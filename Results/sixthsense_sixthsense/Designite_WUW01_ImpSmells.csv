Implementation smell,Namespace,Class,File,Method,Description
Long Method,WUW01,GeometricRecognizer,C:\repos\sixthsense_sixthsense\WUW01\classes\DollarRecognizer.cs,TestBatch,The method has 120 lines of code.
Long Method,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,WUW_Load,The method has 105 lines of code.
Long Method,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The method has 1127 lines of code.
Complex Method,WUW01,GeometricRecognizer,C:\repos\sixthsense_sixthsense\WUW01\classes\DollarRecognizer.cs,TestBatch,Cyclomatic complexity of the method is 9
Complex Method,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,StopOtherApps,Cyclomatic complexity of the method is 17
Long Parameter List,WUW01,GeometricRecognizer,C:\repos\sixthsense_sixthsense\WUW01\classes\DollarRecognizer.cs,GoldenSectionSearch,The method has 5 parameters. Parameters: pts1' pts2' a' b' threshold
Long Parameter List,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,mouse_event,The method has 5 parameters. Parameters: dwFlags' dx' dy' cButtons' dwExtraInfo
Long Statement,WUW01,GeometricRecognizer,C:\repos\sixthsense_sixthsense\WUW01\classes\DollarRecognizer.cs,FullSearch,The length of the statement  "            writer.WriteLine("\nFull Search (360 rotations)\n{0:F2}{1}\t{2:F3} px"' Math.Round(bestA' 2)' (char) 176' Math.Round(bestD' 3)); // calls' angle' distance " is 154.
Long Statement,WUW01,GeometricRecognizer,C:\repos\sixthsense_sixthsense\WUW01\classes\DollarRecognizer.cs,CreateRotationGraph,The length of the statement  "                string outfile = String.Format("{0}\\{1}({2}' {3})_{4}.txt"' dir' similar ? "o" : "x"' g1.Name' g2.Name' Environment.TickCount); " is 128.
Long Statement,WUW01,GeometricRecognizer,C:\repos\sixthsense_sixthsense\WUW01\classes\DollarRecognizer.cs,CreateRotationGraph,The length of the statement  "                writer.WriteLine("Rotated: {0} --> {1}. {2}' {3}\n"' g1.Name' g2.Name' DateTime.Now.ToLongDateString()' DateTime.Now.ToLongTimeString()); " is 137.
Long Statement,WUW01,GeometricRecognizer,C:\repos\sixthsense_sixthsense\WUW01\classes\DollarRecognizer.cs,CreateRotationGraph,The length of the statement  "                writer.WriteLine("\nHill Climb Search ({0} rotations)\n{1:F2}{2}\t{3:F3} px"' pos[2] + neg[2] + 1' Math.Round(best[1]' 2)' (char) 176' Math.Round(best[0]' 3)); // calls' angle' distance " is 185.
Long Statement,WUW01,GeometricRecognizer,C:\repos\sixthsense_sixthsense\WUW01\classes\DollarRecognizer.cs,CreateRotationGraph,The length of the statement  "                writer.WriteLine("\nGolden Section Search ({0} rotations)\n{1:F2}{2}\t{3:F3} px"' gold[2]' Math.Round(gold[1]' 2)' (char) 176' Math.Round(gold[0]' 3)); // calls' angle' distance " is 177.
Long Statement,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,WUW_Load,The length of the statement  "                MessageBox.Show("WUW was unable to find a webcam. Please make sure that a camera is connected and installed."' "WUW Camera Error"); " is 131.
Long Statement,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,drawLatestImage,The length of the statement  "                    e.Graphics.DrawEllipse(penRed' _markerCenter.X - _markerRadius' _markerCenter.Y - _markerRadius' 2 * _markerRadius' 2 * _markerRadius); " is 135.
Long Statement,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,buttonLoadMarkers_Click,The length of the statement  "                Marker newMarker = _touchlessMgr.AddMarker("Marker #" + ++_addedMarkerCount' frame' new Point(Convert.ToInt32(markerSaveArray[count * 3 - 3])' Convert.ToInt32(markerSaveArray[count * 3 - 2]))' markerSaveArray[count * 3 - 1]); " is 225.
Long Statement,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,pictureBoxDisplay_MouseUp,The length of the statement  "                Marker newMarker = _touchlessMgr.AddMarker("Marker #" + ++_addedMarkerCount' (Bitmap)_latestFrame' _markerCenter' _markerRadius); " is 129.
Long Statement,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,btnClear_Click,The length of the statement  "            if (MessageBox.Show(this' "This will clear all loaded gestures. (It will not delete any XML files.)"' "Confirm"' MessageBoxButtons.OKCancel' MessageBoxIcon.Warning) == DialogResult.OK) " is 184.
Long Statement,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,PainterForm_MouseMove,The length of the statement  "            //LinearGradientBrush(new Rectangle(0' 0' 1024' 768)' Color.FromArgb(10' Color.Black)' Color.FromArgb(10' Color.Black)' 90' false); " is 131.
Long Statement,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,PainterForm_MouseMove,The length of the statement  "                graphics.FillRectangle(brushData[index]' newX + dirX * randomGenerator.Next(0' magX)' newY + dirY * randomGenerator.Next(0' magY)' 30' 30); " is 139.
Long Statement,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,inkCanvasColor_Hover,The length of the statement  "            inkCanvas1.DefaultDrawingAttributes.Color = System.Windows.Media.Color.FromArgb(inkColor.A' inkColor.R' inkColor.G' inkColor.B); " is 128.
Long Statement,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,inkCanvasThinner_Hover,The length of the statement  "                    inkCanvas1.EraserShape = new System.Windows.Ink.RectangleStylusShape(inkCanvas1.EraserShape.Height - 2' inkCanvas1.EraserShape.Width - 2); " is 138.
Long Statement,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,inkCanvasThinner_Click,The length of the statement  "                    inkCanvas1.EraserShape = new System.Windows.Ink.RectangleStylusShape(inkCanvas1.EraserShape.Height - 10' inkCanvas1.EraserShape.Width - 10); " is 140.
Long Statement,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,inkCanvasThicker_Hover,The length of the statement  "                inkCanvas1.EraserShape = new System.Windows.Ink.RectangleStylusShape(inkCanvas1.EraserShape.Height + 2' inkCanvas1.EraserShape.Width + 2); " is 138.
Long Statement,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,inkCanvasThicker_Click,The length of the statement  "                inkCanvas1.EraserShape = new System.Windows.Ink.RectangleStylusShape(inkCanvas1.EraserShape.Height + 10' inkCanvas1.EraserShape.Width + 10); " is 140.
Long Statement,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,buttonNewsPaperDemo_Click,The length of the statement  "                //group.Children.Add(new System.Windows.Media.ScaleTransform(new_distance / distance' new_distance / distance' x1' y1)); " is 120.
Long Statement,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,nyar,The length of the statement  "            Bitmap _latestFrameShift = new Bitmap(_latestFrameBitmap.Width' _latestFrameBitmap.Height' PixelFormat.Format32bppArgb); " is 120.
Long Statement,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,nyar,The length of the statement  "            BitmapData _latestFrameShiftData = _latestFrameShift.LockBits(_latestFrameShiftRect' ImageLockMode.ReadWrite' _latestFrameShift.PixelFormat); " is 141.
Long Statement,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The length of the statement  "            this.pictureBoxDisplay.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right))); " is 153.
Long Statement,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The length of the statement  "            this.tabSettings.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right))); " is 147.
Long Statement,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The length of the statement  "            this.tabSettings.Font = new System.Drawing.Font("Microsoft Sans Serif"' 10F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 159.
Long Statement,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The length of the statement  "            this.lblRecord.Font = new System.Drawing.Font("Courier New"' 15.75F' System.Drawing.FontStyle.Bold' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 148.
Long Statement,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The length of the statement  "            this.groupBoxCameraInfo.Font = new System.Drawing.Font("Microsoft Sans Serif"' 10F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 166.
Long Statement,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The length of the statement  "            this.numericUpDownCameraFPSLimit.ValueChanged += new System.EventHandler(this.numericUpDownCameraFPSLimit_ValueChanged); " is 120.
Long Statement,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The length of the statement  "            this.comboBoxCameras.Font = new System.Drawing.Font("Microsoft Sans Serif"' 10F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 163.
Long Statement,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The length of the statement  "            this.groupBoxMarkerControl.Font = new System.Drawing.Font("Microsoft Sans Serif"' 10F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 169.
Long Statement,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The length of the statement  "            this.comboBoxMarkers.Font = new System.Drawing.Font("Microsoft Sans Serif"' 10F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 163.
Long Statement,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The length of the statement  "            this.buttonMarkerAdd.Font = new System.Drawing.Font("Microsoft Sans Serif"' 10F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 163.
Long Statement,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The length of the statement  "            this.labelDemoInstructions.Font = new System.Drawing.Font("Microsoft Sans Serif"' 10F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 169.
Long Statement,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The length of the statement  "            this.btnExit.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right))); " is 143.
Long Statement,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The length of the statement  "            this.btnExit.FlatAppearance.MouseDownBackColor = System.Drawing.Color.FromArgb(((int)(((byte)(192))))' ((int)(((byte)(0))))' ((int)(((byte)(0))))); " is 147.
Long Statement,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The length of the statement  "            this.btnShowHide.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right))); " is 147.
Long Statement,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The length of the statement  "            this.labelM.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(64))))' ((int)(((byte)(0))))' ((int)(((byte)(0))))); " is 121.
Long Statement,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The length of the statement  "            this.labelO.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(64))))' ((int)(((byte)(0))))' ((int)(((byte)(0))))); " is 121.
Long Statement,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The length of the statement  "            this.labelDemoName.Font = new System.Drawing.Font("Microsoft Sans Serif"' 9.75F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 163.
Long Statement,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The length of the statement  "            this.labelDemoName.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(128))))' ((int)(((byte)(128))))' ((int)(((byte)(255))))); " is 133.
Long Statement,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The length of the statement  "            this.photoDemo_TakePhoto.Font = new System.Drawing.Font("Microsoft Sans Serif"' 25F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 167.
Long Statement,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The length of the statement  "            this.pictureBoxAlbum.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left) " is 148.
Long Statement,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The length of the statement  "            this.inkCanvasGreen.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left))); " is 152.
Long Statement,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The length of the statement  "            this.inkCanvasGreen.Font = new System.Drawing.Font("Microsoft Sans Serif"' 18F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 162.
Long Statement,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The length of the statement  "            this.inkCanvasRed.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left))); " is 150.
Long Statement,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The length of the statement  "            this.inkCanvasRed.Font = new System.Drawing.Font("Microsoft Sans Serif"' 18F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 160.
Long Statement,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The length of the statement  "            this.inkCanvasYellow.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left))); " is 153.
Long Statement,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The length of the statement  "            this.inkCanvasYellow.FlatAppearance.MouseOverBackColor = System.Drawing.Color.FromArgb(((int)(((byte)(192))))' ((int)(((byte)(192))))' ((int)(((byte)(255))))); " is 159.
Long Statement,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The length of the statement  "            this.inkCanvasYellow.Font = new System.Drawing.Font("Microsoft Sans Serif"' 18F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 163.
Long Statement,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The length of the statement  "            this.inkCanvasWhite.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left))); " is 152.
Long Statement,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The length of the statement  "            this.inkCanvasWhite.FlatAppearance.MouseOverBackColor = System.Drawing.Color.FromArgb(((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(128))))); " is 158.
Long Statement,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The length of the statement  "            this.inkCanvasWhite.Font = new System.Drawing.Font("Microsoft Sans Serif"' 18F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 162.
Long Statement,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The length of the statement  "            this.inkCanvasToggle.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left))); " is 153.
Long Statement,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The length of the statement  "            this.inkCanvasToggle.Font = new System.Drawing.Font("Microsoft Sans Serif"' 27.75F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(2))); " is 166.
Long Statement,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The length of the statement  "            this.inkCanvasThicker.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left))); " is 154.
Long Statement,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The length of the statement  "            this.inkCanvasThicker.Font = new System.Drawing.Font("Microsoft Sans Serif"' 18F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 164.
Long Statement,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The length of the statement  "            this.inkCanvasThinner.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left))); " is 154.
Long Statement,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The length of the statement  "            this.inkCanvasThinner.Font = new System.Drawing.Font("Microsoft Sans Serif"' 18F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 164.
Complex Conditional,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,m_OnChange,The conditional expression  "globeDemo || weatherDemo || bookDemo || clockDemo"  is complex.
Magic Number,WUW01,GeometricRecognizer,C:\repos\sixthsense_sixthsense\WUW01\classes\DollarRecognizer.cs,GeometricRecognizer,The following statement contains a magic number: _gestures = new Hashtable(256);
Magic Number,WUW01,GeometricRecognizer,C:\repos\sixthsense_sixthsense\WUW01\classes\DollarRecognizer.cs,Recognize,The following statement contains a magic number: foreach (Gesture p in _gestures.Values)              {                  double[] best = GoldenSectionSearch(                      points'                 // to rotate                      p.Points'               // to match                      Utils.Deg2Rad(-45.0)'   // lbound                      Utils.Deg2Rad(+45.0)'   // ubound                      Utils.Deg2Rad(2.0));    // threshold                    double score = 1d - best[0] / HalfDiagonal;                  nbest.AddResult(p.Name' score' best[0]' best[1]); // name' score' distance' angle              }
Magic Number,WUW01,GeometricRecognizer,C:\repos\sixthsense_sixthsense\WUW01\classes\DollarRecognizer.cs,Recognize,The following statement contains a magic number: foreach (Gesture p in _gestures.Values)              {                  double[] best = GoldenSectionSearch(                      points'                 // to rotate                      p.Points'               // to match                      Utils.Deg2Rad(-45.0)'   // lbound                      Utils.Deg2Rad(+45.0)'   // ubound                      Utils.Deg2Rad(2.0));    // threshold                    double score = 1d - best[0] / HalfDiagonal;                  nbest.AddResult(p.Name' score' best[0]' best[1]); // name' score' distance' angle              }
Magic Number,WUW01,GeometricRecognizer,C:\repos\sixthsense_sixthsense\WUW01\classes\DollarRecognizer.cs,Recognize,The following statement contains a magic number: foreach (Gesture p in _gestures.Values)              {                  double[] best = GoldenSectionSearch(                      points'                 // to rotate                      p.Points'               // to match                      Utils.Deg2Rad(-45.0)'   // lbound                      Utils.Deg2Rad(+45.0)'   // ubound                      Utils.Deg2Rad(2.0));    // threshold                    double score = 1d - best[0] / HalfDiagonal;                  nbest.AddResult(p.Name' score' best[0]' best[1]); // name' score' distance' angle              }
Magic Number,WUW01,GeometricRecognizer,C:\repos\sixthsense_sixthsense\WUW01\classes\DollarRecognizer.cs,GoldenSectionSearch,The following statement contains a magic number: double i = 2.0;
Magic Number,WUW01,GeometricRecognizer,C:\repos\sixthsense_sixthsense\WUW01\classes\DollarRecognizer.cs,GoldenSectionSearch,The following statement contains a magic number: return new double[3] { Math.Min(fx1' fx2)' Utils.Rad2Deg((b + a) / 2.0)' i };
Magic Number,WUW01,GeometricRecognizer,C:\repos\sixthsense_sixthsense\WUW01\classes\DollarRecognizer.cs,GoldenSectionSearch,The following statement contains a magic number: return new double[3] { Math.Min(fx1' fx2)' Utils.Rad2Deg((b + a) / 2.0)' i };
Magic Number,WUW01,GeometricRecognizer,C:\repos\sixthsense_sixthsense\WUW01\classes\DollarRecognizer.cs,HillClimbSearch,The following statement contains a magic number: return new double[3] { D' theta - step' i };
Magic Number,WUW01,GeometricRecognizer,C:\repos\sixthsense_sixthsense\WUW01\classes\DollarRecognizer.cs,FullSearch,The following statement contains a magic number: for (int i = -180; i <= +180; i++)              {                  ArrayList newPoints = Utils.RotateByDegrees(pts1' i);                  double d = Utils.PathDistance(newPoints' pts2);                  if (writer != null)                  {                      writer.WriteLine("{0}\t{1:F3}"' i' Math.Round(d' 3));                  }                  if (d < bestD)                  {                      bestD = d;                      bestA = i;                  }              }
Magic Number,WUW01,GeometricRecognizer,C:\repos\sixthsense_sixthsense\WUW01\classes\DollarRecognizer.cs,FullSearch,The following statement contains a magic number: for (int i = -180; i <= +180; i++)              {                  ArrayList newPoints = Utils.RotateByDegrees(pts1' i);                  double d = Utils.PathDistance(newPoints' pts2);                  if (writer != null)                  {                      writer.WriteLine("{0}\t{1:F3}"' i' Math.Round(d' 3));                  }                  if (d < bestD)                  {                      bestD = d;                      bestA = i;                  }              }
Magic Number,WUW01,GeometricRecognizer,C:\repos\sixthsense_sixthsense\WUW01\classes\DollarRecognizer.cs,FullSearch,The following statement contains a magic number: for (int i = -180; i <= +180; i++)              {                  ArrayList newPoints = Utils.RotateByDegrees(pts1' i);                  double d = Utils.PathDistance(newPoints' pts2);                  if (writer != null)                  {                      writer.WriteLine("{0}\t{1:F3}"' i' Math.Round(d' 3));                  }                  if (d < bestD)                  {                      bestD = d;                      bestA = i;                  }              }
Magic Number,WUW01,GeometricRecognizer,C:\repos\sixthsense_sixthsense\WUW01\classes\DollarRecognizer.cs,FullSearch,The following statement contains a magic number: writer.WriteLine("\nFull Search (360 rotations)\n{0:F2}{1}\t{2:F3} px"' Math.Round(bestA' 2)' (char) 176' Math.Round(bestD' 3));
Magic Number,WUW01,GeometricRecognizer,C:\repos\sixthsense_sixthsense\WUW01\classes\DollarRecognizer.cs,FullSearch,The following statement contains a magic number: writer.WriteLine("\nFull Search (360 rotations)\n{0:F2}{1}\t{2:F3} px"' Math.Round(bestA' 2)' (char) 176' Math.Round(bestD' 3));
Magic Number,WUW01,GeometricRecognizer,C:\repos\sixthsense_sixthsense\WUW01\classes\DollarRecognizer.cs,FullSearch,The following statement contains a magic number: writer.WriteLine("\nFull Search (360 rotations)\n{0:F2}{1}\t{2:F3} px"' Math.Round(bestA' 2)' (char) 176' Math.Round(bestD' 3));
Magic Number,WUW01,GeometricRecognizer,C:\repos\sixthsense_sixthsense\WUW01\classes\DollarRecognizer.cs,FullSearch,The following statement contains a magic number: return new double[3] { bestD' bestA' 360.0 };
Magic Number,WUW01,GeometricRecognizer,C:\repos\sixthsense_sixthsense\WUW01\classes\DollarRecognizer.cs,FullSearch,The following statement contains a magic number: return new double[3] { bestD' bestA' 360.0 };
Magic Number,WUW01,GeometricRecognizer,C:\repos\sixthsense_sixthsense\WUW01\classes\DollarRecognizer.cs,TestBatch,The following statement contains a magic number: try              {                  //                  // set up a main results file and detailed recognition results file                  //                  int start = Environment.TickCount;                  string mainFile = String.Format("{0}\\geometric_main_{1}.txt"' dir' start);                  string recFile = String.Format("{0}\\geometric_data_{1}.txt"' dir' start);                    mainWriter = new StreamWriter(mainFile' false' Encoding.UTF8);                  mainWriter.WriteLine("Subject = {0}' Recognizer = geometric' Speed = {1}' StartTime(ms) = {2}"' subject' speed' start);                  mainWriter.WriteLine("Subject Recognizer Speed NumTraining GestureType RecognitionRate\n");                    recWriter = new StreamWriter(recFile' false' Encoding.UTF8);                  recWriter.WriteLine("Subject = {0}' Recognizer = geometric' Speed = {1}' StartTime(ms) = {2}"' subject' speed' start);                  recWriter.WriteLine("Correct? NumTrain Tested 1stCorrect Pts Ms Angle : (NBestNames) [NBestScores]\n");                    //                  // determine the number of gesture categories and the number of examples in each one                  //                  int numCategories = categories.Count;                  int numExamples = ((Category) categories[0]).NumExamples;                  double totalTests = (numExamples - 1) * NumRandomTests;                    //                  // outermost loop: trains on N=1..9' tests on 10-N (for e.g.' numExamples = 10)                  //                  for (int n = 1; n <= numExamples - 1; n++)                  {                      // storage for the final avg results for each category for this N                      double[] results = new double[numCategories];                        //                      // run a number of tests at this particular N number of training examples                      //                      for (int r = 0; r < NumRandomTests; r++)                      {                          _gestures.Clear(); // clear any (old) loaded prototypes                            // load (train on) N randomly selected gestures in each category                          for (int i = 0; i < numCategories; i++)                          {                              Category c = (Category) categories[i]; // the category to load N examples for                              int[] chosen = Utils.Random(0' numExamples - 1' n); // select N unique indices                              for (int j = 0; j < chosen.Length; j++)                              {                                  Gesture p = c[chosen[j]]; // get the prototype from this category at chosen[j]                                  _gestures.Add(p.Name' p); // load the randomly selected test gestures into the recognizer                              }                          }                            //                          // testing loop on all unloaded gestures in each category. creates a recognition                          // rate (%) by averaging the binary outcomes (correct' incorrect) for each test.                          //                          for (int i = 0; i < numCategories; i++)                          {                              // pick a random unloaded gesture in this category for testing                              // instead of dumbly picking' first find out what indices aren't                              // loaded' and then randomly pick from those.                              Category c = (Category) categories[i];                              int[] notLoaded = new int[numExamples - n];                              for (int j = 0' k = 0; j < numExamples; j++)                              {                                  Gesture g = c[j];                                  if (!_gestures.ContainsKey(g.Name))                                      notLoaded[k++] = j; // jth gesture in c is not loaded                              }                              int chosen = Utils.Random(0' notLoaded.Length - 1); // index                              Gesture p = c[notLoaded[chosen]]; // gesture to test                              Debug.Assert(!_gestures.ContainsKey(p.Name));                                                            // do the recognition!                              ArrayList testPts = Utils.RotateByDegrees(p.RawPoints' Utils.Random(0' 359));                              NBestList result = this.Recognize(testPts);                              string category = Category.ParseName(result.Name);                              int correct = (c.Name == category) ? 1 : 0;                                recWriter.WriteLine("{0} {1} {2} {3} {4} {5} {6:F1}{7} : ({8}) [{9}]"'                                  correct'                            // Correct?                                  n'                                  // NumTrain                                   p.Name'                             // Tested                                   FirstCorrect(p.Name' result.Names)' // 1stCorrect                                  p.RawPoints.Count'                  // Pts                                  p.Duration'                         // Ms                                   Math.Round(result.Angle' 1)' (char) 176' // Angle tweaking :                                  result.NamesString'                 // (NBestNames)                                  result.ScoresString);               // [NBestScores]                                results[i] += correct;                          }                            // provide feedback as to how many tests have been performed thus far.                          double testsSoFar = ((n - 1) * NumRandomTests) + r;                          ProgressChangedEvent(this' new ProgressEventArgs(testsSoFar / totalTests)); // callback                      }                        //                      // now create the final results for this N and write them to a file                      //                      for (int i = 0; i < numCategories; i++)                      {                          results[i] /= (double) NumRandomTests; // normalize by the number of tests at this N                          Category c = (Category) categories[i];                          // Subject Recognizer Speed NumTraining GestureType RecognitionRate                          mainWriter.WriteLine("{0} geometric {1} {2} {3} {4:F3}"' subject' speed' n' c.Name' Math.Round(results[i]' 3));                      }                  }                    // time-stamp the end of the processing                  int end = Environment.TickCount;                  mainWriter.WriteLine("\nEndTime(ms) = {0}' Minutes = {1:F2}"' end' Math.Round((end - start) / 60000.0' 2));                  recWriter.WriteLine("\nEndTime(ms) = {0}' Minutes = {1:F2}"' end' Math.Round((end - start) / 60000.0' 2));              }              catch (Exception ex)              {                  Console.WriteLine(ex.Message);                  success = false;              }              finally              {                  if (mainWriter != null)                      mainWriter.Close();                  if (recWriter != null)                      recWriter.Close();              }
Magic Number,WUW01,GeometricRecognizer,C:\repos\sixthsense_sixthsense\WUW01\classes\DollarRecognizer.cs,TestBatch,The following statement contains a magic number: try              {                  //                  // set up a main results file and detailed recognition results file                  //                  int start = Environment.TickCount;                  string mainFile = String.Format("{0}\\geometric_main_{1}.txt"' dir' start);                  string recFile = String.Format("{0}\\geometric_data_{1}.txt"' dir' start);                    mainWriter = new StreamWriter(mainFile' false' Encoding.UTF8);                  mainWriter.WriteLine("Subject = {0}' Recognizer = geometric' Speed = {1}' StartTime(ms) = {2}"' subject' speed' start);                  mainWriter.WriteLine("Subject Recognizer Speed NumTraining GestureType RecognitionRate\n");                    recWriter = new StreamWriter(recFile' false' Encoding.UTF8);                  recWriter.WriteLine("Subject = {0}' Recognizer = geometric' Speed = {1}' StartTime(ms) = {2}"' subject' speed' start);                  recWriter.WriteLine("Correct? NumTrain Tested 1stCorrect Pts Ms Angle : (NBestNames) [NBestScores]\n");                    //                  // determine the number of gesture categories and the number of examples in each one                  //                  int numCategories = categories.Count;                  int numExamples = ((Category) categories[0]).NumExamples;                  double totalTests = (numExamples - 1) * NumRandomTests;                    //                  // outermost loop: trains on N=1..9' tests on 10-N (for e.g.' numExamples = 10)                  //                  for (int n = 1; n <= numExamples - 1; n++)                  {                      // storage for the final avg results for each category for this N                      double[] results = new double[numCategories];                        //                      // run a number of tests at this particular N number of training examples                      //                      for (int r = 0; r < NumRandomTests; r++)                      {                          _gestures.Clear(); // clear any (old) loaded prototypes                            // load (train on) N randomly selected gestures in each category                          for (int i = 0; i < numCategories; i++)                          {                              Category c = (Category) categories[i]; // the category to load N examples for                              int[] chosen = Utils.Random(0' numExamples - 1' n); // select N unique indices                              for (int j = 0; j < chosen.Length; j++)                              {                                  Gesture p = c[chosen[j]]; // get the prototype from this category at chosen[j]                                  _gestures.Add(p.Name' p); // load the randomly selected test gestures into the recognizer                              }                          }                            //                          // testing loop on all unloaded gestures in each category. creates a recognition                          // rate (%) by averaging the binary outcomes (correct' incorrect) for each test.                          //                          for (int i = 0; i < numCategories; i++)                          {                              // pick a random unloaded gesture in this category for testing                              // instead of dumbly picking' first find out what indices aren't                              // loaded' and then randomly pick from those.                              Category c = (Category) categories[i];                              int[] notLoaded = new int[numExamples - n];                              for (int j = 0' k = 0; j < numExamples; j++)                              {                                  Gesture g = c[j];                                  if (!_gestures.ContainsKey(g.Name))                                      notLoaded[k++] = j; // jth gesture in c is not loaded                              }                              int chosen = Utils.Random(0' notLoaded.Length - 1); // index                              Gesture p = c[notLoaded[chosen]]; // gesture to test                              Debug.Assert(!_gestures.ContainsKey(p.Name));                                                            // do the recognition!                              ArrayList testPts = Utils.RotateByDegrees(p.RawPoints' Utils.Random(0' 359));                              NBestList result = this.Recognize(testPts);                              string category = Category.ParseName(result.Name);                              int correct = (c.Name == category) ? 1 : 0;                                recWriter.WriteLine("{0} {1} {2} {3} {4} {5} {6:F1}{7} : ({8}) [{9}]"'                                  correct'                            // Correct?                                  n'                                  // NumTrain                                   p.Name'                             // Tested                                   FirstCorrect(p.Name' result.Names)' // 1stCorrect                                  p.RawPoints.Count'                  // Pts                                  p.Duration'                         // Ms                                   Math.Round(result.Angle' 1)' (char) 176' // Angle tweaking :                                  result.NamesString'                 // (NBestNames)                                  result.ScoresString);               // [NBestScores]                                results[i] += correct;                          }                            // provide feedback as to how many tests have been performed thus far.                          double testsSoFar = ((n - 1) * NumRandomTests) + r;                          ProgressChangedEvent(this' new ProgressEventArgs(testsSoFar / totalTests)); // callback                      }                        //                      // now create the final results for this N and write them to a file                      //                      for (int i = 0; i < numCategories; i++)                      {                          results[i] /= (double) NumRandomTests; // normalize by the number of tests at this N                          Category c = (Category) categories[i];                          // Subject Recognizer Speed NumTraining GestureType RecognitionRate                          mainWriter.WriteLine("{0} geometric {1} {2} {3} {4:F3}"' subject' speed' n' c.Name' Math.Round(results[i]' 3));                      }                  }                    // time-stamp the end of the processing                  int end = Environment.TickCount;                  mainWriter.WriteLine("\nEndTime(ms) = {0}' Minutes = {1:F2}"' end' Math.Round((end - start) / 60000.0' 2));                  recWriter.WriteLine("\nEndTime(ms) = {0}' Minutes = {1:F2}"' end' Math.Round((end - start) / 60000.0' 2));              }              catch (Exception ex)              {                  Console.WriteLine(ex.Message);                  success = false;              }              finally              {                  if (mainWriter != null)                      mainWriter.Close();                  if (recWriter != null)                      recWriter.Close();              }
Magic Number,WUW01,GeometricRecognizer,C:\repos\sixthsense_sixthsense\WUW01\classes\DollarRecognizer.cs,TestBatch,The following statement contains a magic number: try              {                  //                  // set up a main results file and detailed recognition results file                  //                  int start = Environment.TickCount;                  string mainFile = String.Format("{0}\\geometric_main_{1}.txt"' dir' start);                  string recFile = String.Format("{0}\\geometric_data_{1}.txt"' dir' start);                    mainWriter = new StreamWriter(mainFile' false' Encoding.UTF8);                  mainWriter.WriteLine("Subject = {0}' Recognizer = geometric' Speed = {1}' StartTime(ms) = {2}"' subject' speed' start);                  mainWriter.WriteLine("Subject Recognizer Speed NumTraining GestureType RecognitionRate\n");                    recWriter = new StreamWriter(recFile' false' Encoding.UTF8);                  recWriter.WriteLine("Subject = {0}' Recognizer = geometric' Speed = {1}' StartTime(ms) = {2}"' subject' speed' start);                  recWriter.WriteLine("Correct? NumTrain Tested 1stCorrect Pts Ms Angle : (NBestNames) [NBestScores]\n");                    //                  // determine the number of gesture categories and the number of examples in each one                  //                  int numCategories = categories.Count;                  int numExamples = ((Category) categories[0]).NumExamples;                  double totalTests = (numExamples - 1) * NumRandomTests;                    //                  // outermost loop: trains on N=1..9' tests on 10-N (for e.g.' numExamples = 10)                  //                  for (int n = 1; n <= numExamples - 1; n++)                  {                      // storage for the final avg results for each category for this N                      double[] results = new double[numCategories];                        //                      // run a number of tests at this particular N number of training examples                      //                      for (int r = 0; r < NumRandomTests; r++)                      {                          _gestures.Clear(); // clear any (old) loaded prototypes                            // load (train on) N randomly selected gestures in each category                          for (int i = 0; i < numCategories; i++)                          {                              Category c = (Category) categories[i]; // the category to load N examples for                              int[] chosen = Utils.Random(0' numExamples - 1' n); // select N unique indices                              for (int j = 0; j < chosen.Length; j++)                              {                                  Gesture p = c[chosen[j]]; // get the prototype from this category at chosen[j]                                  _gestures.Add(p.Name' p); // load the randomly selected test gestures into the recognizer                              }                          }                            //                          // testing loop on all unloaded gestures in each category. creates a recognition                          // rate (%) by averaging the binary outcomes (correct' incorrect) for each test.                          //                          for (int i = 0; i < numCategories; i++)                          {                              // pick a random unloaded gesture in this category for testing                              // instead of dumbly picking' first find out what indices aren't                              // loaded' and then randomly pick from those.                              Category c = (Category) categories[i];                              int[] notLoaded = new int[numExamples - n];                              for (int j = 0' k = 0; j < numExamples; j++)                              {                                  Gesture g = c[j];                                  if (!_gestures.ContainsKey(g.Name))                                      notLoaded[k++] = j; // jth gesture in c is not loaded                              }                              int chosen = Utils.Random(0' notLoaded.Length - 1); // index                              Gesture p = c[notLoaded[chosen]]; // gesture to test                              Debug.Assert(!_gestures.ContainsKey(p.Name));                                                            // do the recognition!                              ArrayList testPts = Utils.RotateByDegrees(p.RawPoints' Utils.Random(0' 359));                              NBestList result = this.Recognize(testPts);                              string category = Category.ParseName(result.Name);                              int correct = (c.Name == category) ? 1 : 0;                                recWriter.WriteLine("{0} {1} {2} {3} {4} {5} {6:F1}{7} : ({8}) [{9}]"'                                  correct'                            // Correct?                                  n'                                  // NumTrain                                   p.Name'                             // Tested                                   FirstCorrect(p.Name' result.Names)' // 1stCorrect                                  p.RawPoints.Count'                  // Pts                                  p.Duration'                         // Ms                                   Math.Round(result.Angle' 1)' (char) 176' // Angle tweaking :                                  result.NamesString'                 // (NBestNames)                                  result.ScoresString);               // [NBestScores]                                results[i] += correct;                          }                            // provide feedback as to how many tests have been performed thus far.                          double testsSoFar = ((n - 1) * NumRandomTests) + r;                          ProgressChangedEvent(this' new ProgressEventArgs(testsSoFar / totalTests)); // callback                      }                        //                      // now create the final results for this N and write them to a file                      //                      for (int i = 0; i < numCategories; i++)                      {                          results[i] /= (double) NumRandomTests; // normalize by the number of tests at this N                          Category c = (Category) categories[i];                          // Subject Recognizer Speed NumTraining GestureType RecognitionRate                          mainWriter.WriteLine("{0} geometric {1} {2} {3} {4:F3}"' subject' speed' n' c.Name' Math.Round(results[i]' 3));                      }                  }                    // time-stamp the end of the processing                  int end = Environment.TickCount;                  mainWriter.WriteLine("\nEndTime(ms) = {0}' Minutes = {1:F2}"' end' Math.Round((end - start) / 60000.0' 2));                  recWriter.WriteLine("\nEndTime(ms) = {0}' Minutes = {1:F2}"' end' Math.Round((end - start) / 60000.0' 2));              }              catch (Exception ex)              {                  Console.WriteLine(ex.Message);                  success = false;              }              finally              {                  if (mainWriter != null)                      mainWriter.Close();                  if (recWriter != null)                      recWriter.Close();              }
Magic Number,WUW01,GeometricRecognizer,C:\repos\sixthsense_sixthsense\WUW01\classes\DollarRecognizer.cs,TestBatch,The following statement contains a magic number: try              {                  //                  // set up a main results file and detailed recognition results file                  //                  int start = Environment.TickCount;                  string mainFile = String.Format("{0}\\geometric_main_{1}.txt"' dir' start);                  string recFile = String.Format("{0}\\geometric_data_{1}.txt"' dir' start);                    mainWriter = new StreamWriter(mainFile' false' Encoding.UTF8);                  mainWriter.WriteLine("Subject = {0}' Recognizer = geometric' Speed = {1}' StartTime(ms) = {2}"' subject' speed' start);                  mainWriter.WriteLine("Subject Recognizer Speed NumTraining GestureType RecognitionRate\n");                    recWriter = new StreamWriter(recFile' false' Encoding.UTF8);                  recWriter.WriteLine("Subject = {0}' Recognizer = geometric' Speed = {1}' StartTime(ms) = {2}"' subject' speed' start);                  recWriter.WriteLine("Correct? NumTrain Tested 1stCorrect Pts Ms Angle : (NBestNames) [NBestScores]\n");                    //                  // determine the number of gesture categories and the number of examples in each one                  //                  int numCategories = categories.Count;                  int numExamples = ((Category) categories[0]).NumExamples;                  double totalTests = (numExamples - 1) * NumRandomTests;                    //                  // outermost loop: trains on N=1..9' tests on 10-N (for e.g.' numExamples = 10)                  //                  for (int n = 1; n <= numExamples - 1; n++)                  {                      // storage for the final avg results for each category for this N                      double[] results = new double[numCategories];                        //                      // run a number of tests at this particular N number of training examples                      //                      for (int r = 0; r < NumRandomTests; r++)                      {                          _gestures.Clear(); // clear any (old) loaded prototypes                            // load (train on) N randomly selected gestures in each category                          for (int i = 0; i < numCategories; i++)                          {                              Category c = (Category) categories[i]; // the category to load N examples for                              int[] chosen = Utils.Random(0' numExamples - 1' n); // select N unique indices                              for (int j = 0; j < chosen.Length; j++)                              {                                  Gesture p = c[chosen[j]]; // get the prototype from this category at chosen[j]                                  _gestures.Add(p.Name' p); // load the randomly selected test gestures into the recognizer                              }                          }                            //                          // testing loop on all unloaded gestures in each category. creates a recognition                          // rate (%) by averaging the binary outcomes (correct' incorrect) for each test.                          //                          for (int i = 0; i < numCategories; i++)                          {                              // pick a random unloaded gesture in this category for testing                              // instead of dumbly picking' first find out what indices aren't                              // loaded' and then randomly pick from those.                              Category c = (Category) categories[i];                              int[] notLoaded = new int[numExamples - n];                              for (int j = 0' k = 0; j < numExamples; j++)                              {                                  Gesture g = c[j];                                  if (!_gestures.ContainsKey(g.Name))                                      notLoaded[k++] = j; // jth gesture in c is not loaded                              }                              int chosen = Utils.Random(0' notLoaded.Length - 1); // index                              Gesture p = c[notLoaded[chosen]]; // gesture to test                              Debug.Assert(!_gestures.ContainsKey(p.Name));                                                            // do the recognition!                              ArrayList testPts = Utils.RotateByDegrees(p.RawPoints' Utils.Random(0' 359));                              NBestList result = this.Recognize(testPts);                              string category = Category.ParseName(result.Name);                              int correct = (c.Name == category) ? 1 : 0;                                recWriter.WriteLine("{0} {1} {2} {3} {4} {5} {6:F1}{7} : ({8}) [{9}]"'                                  correct'                            // Correct?                                  n'                                  // NumTrain                                   p.Name'                             // Tested                                   FirstCorrect(p.Name' result.Names)' // 1stCorrect                                  p.RawPoints.Count'                  // Pts                                  p.Duration'                         // Ms                                   Math.Round(result.Angle' 1)' (char) 176' // Angle tweaking :                                  result.NamesString'                 // (NBestNames)                                  result.ScoresString);               // [NBestScores]                                results[i] += correct;                          }                            // provide feedback as to how many tests have been performed thus far.                          double testsSoFar = ((n - 1) * NumRandomTests) + r;                          ProgressChangedEvent(this' new ProgressEventArgs(testsSoFar / totalTests)); // callback                      }                        //                      // now create the final results for this N and write them to a file                      //                      for (int i = 0; i < numCategories; i++)                      {                          results[i] /= (double) NumRandomTests; // normalize by the number of tests at this N                          Category c = (Category) categories[i];                          // Subject Recognizer Speed NumTraining GestureType RecognitionRate                          mainWriter.WriteLine("{0} geometric {1} {2} {3} {4:F3}"' subject' speed' n' c.Name' Math.Round(results[i]' 3));                      }                  }                    // time-stamp the end of the processing                  int end = Environment.TickCount;                  mainWriter.WriteLine("\nEndTime(ms) = {0}' Minutes = {1:F2}"' end' Math.Round((end - start) / 60000.0' 2));                  recWriter.WriteLine("\nEndTime(ms) = {0}' Minutes = {1:F2}"' end' Math.Round((end - start) / 60000.0' 2));              }              catch (Exception ex)              {                  Console.WriteLine(ex.Message);                  success = false;              }              finally              {                  if (mainWriter != null)                      mainWriter.Close();                  if (recWriter != null)                      recWriter.Close();              }
Magic Number,WUW01,GeometricRecognizer,C:\repos\sixthsense_sixthsense\WUW01\classes\DollarRecognizer.cs,TestBatch,The following statement contains a magic number: try              {                  //                  // set up a main results file and detailed recognition results file                  //                  int start = Environment.TickCount;                  string mainFile = String.Format("{0}\\geometric_main_{1}.txt"' dir' start);                  string recFile = String.Format("{0}\\geometric_data_{1}.txt"' dir' start);                    mainWriter = new StreamWriter(mainFile' false' Encoding.UTF8);                  mainWriter.WriteLine("Subject = {0}' Recognizer = geometric' Speed = {1}' StartTime(ms) = {2}"' subject' speed' start);                  mainWriter.WriteLine("Subject Recognizer Speed NumTraining GestureType RecognitionRate\n");                    recWriter = new StreamWriter(recFile' false' Encoding.UTF8);                  recWriter.WriteLine("Subject = {0}' Recognizer = geometric' Speed = {1}' StartTime(ms) = {2}"' subject' speed' start);                  recWriter.WriteLine("Correct? NumTrain Tested 1stCorrect Pts Ms Angle : (NBestNames) [NBestScores]\n");                    //                  // determine the number of gesture categories and the number of examples in each one                  //                  int numCategories = categories.Count;                  int numExamples = ((Category) categories[0]).NumExamples;                  double totalTests = (numExamples - 1) * NumRandomTests;                    //                  // outermost loop: trains on N=1..9' tests on 10-N (for e.g.' numExamples = 10)                  //                  for (int n = 1; n <= numExamples - 1; n++)                  {                      // storage for the final avg results for each category for this N                      double[] results = new double[numCategories];                        //                      // run a number of tests at this particular N number of training examples                      //                      for (int r = 0; r < NumRandomTests; r++)                      {                          _gestures.Clear(); // clear any (old) loaded prototypes                            // load (train on) N randomly selected gestures in each category                          for (int i = 0; i < numCategories; i++)                          {                              Category c = (Category) categories[i]; // the category to load N examples for                              int[] chosen = Utils.Random(0' numExamples - 1' n); // select N unique indices                              for (int j = 0; j < chosen.Length; j++)                              {                                  Gesture p = c[chosen[j]]; // get the prototype from this category at chosen[j]                                  _gestures.Add(p.Name' p); // load the randomly selected test gestures into the recognizer                              }                          }                            //                          // testing loop on all unloaded gestures in each category. creates a recognition                          // rate (%) by averaging the binary outcomes (correct' incorrect) for each test.                          //                          for (int i = 0; i < numCategories; i++)                          {                              // pick a random unloaded gesture in this category for testing                              // instead of dumbly picking' first find out what indices aren't                              // loaded' and then randomly pick from those.                              Category c = (Category) categories[i];                              int[] notLoaded = new int[numExamples - n];                              for (int j = 0' k = 0; j < numExamples; j++)                              {                                  Gesture g = c[j];                                  if (!_gestures.ContainsKey(g.Name))                                      notLoaded[k++] = j; // jth gesture in c is not loaded                              }                              int chosen = Utils.Random(0' notLoaded.Length - 1); // index                              Gesture p = c[notLoaded[chosen]]; // gesture to test                              Debug.Assert(!_gestures.ContainsKey(p.Name));                                                            // do the recognition!                              ArrayList testPts = Utils.RotateByDegrees(p.RawPoints' Utils.Random(0' 359));                              NBestList result = this.Recognize(testPts);                              string category = Category.ParseName(result.Name);                              int correct = (c.Name == category) ? 1 : 0;                                recWriter.WriteLine("{0} {1} {2} {3} {4} {5} {6:F1}{7} : ({8}) [{9}]"'                                  correct'                            // Correct?                                  n'                                  // NumTrain                                   p.Name'                             // Tested                                   FirstCorrect(p.Name' result.Names)' // 1stCorrect                                  p.RawPoints.Count'                  // Pts                                  p.Duration'                         // Ms                                   Math.Round(result.Angle' 1)' (char) 176' // Angle tweaking :                                  result.NamesString'                 // (NBestNames)                                  result.ScoresString);               // [NBestScores]                                results[i] += correct;                          }                            // provide feedback as to how many tests have been performed thus far.                          double testsSoFar = ((n - 1) * NumRandomTests) + r;                          ProgressChangedEvent(this' new ProgressEventArgs(testsSoFar / totalTests)); // callback                      }                        //                      // now create the final results for this N and write them to a file                      //                      for (int i = 0; i < numCategories; i++)                      {                          results[i] /= (double) NumRandomTests; // normalize by the number of tests at this N                          Category c = (Category) categories[i];                          // Subject Recognizer Speed NumTraining GestureType RecognitionRate                          mainWriter.WriteLine("{0} geometric {1} {2} {3} {4:F3}"' subject' speed' n' c.Name' Math.Round(results[i]' 3));                      }                  }                    // time-stamp the end of the processing                  int end = Environment.TickCount;                  mainWriter.WriteLine("\nEndTime(ms) = {0}' Minutes = {1:F2}"' end' Math.Round((end - start) / 60000.0' 2));                  recWriter.WriteLine("\nEndTime(ms) = {0}' Minutes = {1:F2}"' end' Math.Round((end - start) / 60000.0' 2));              }              catch (Exception ex)              {                  Console.WriteLine(ex.Message);                  success = false;              }              finally              {                  if (mainWriter != null)                      mainWriter.Close();                  if (recWriter != null)                      recWriter.Close();              }
Magic Number,WUW01,GeometricRecognizer,C:\repos\sixthsense_sixthsense\WUW01\classes\DollarRecognizer.cs,TestBatch,The following statement contains a magic number: try              {                  //                  // set up a main results file and detailed recognition results file                  //                  int start = Environment.TickCount;                  string mainFile = String.Format("{0}\\geometric_main_{1}.txt"' dir' start);                  string recFile = String.Format("{0}\\geometric_data_{1}.txt"' dir' start);                    mainWriter = new StreamWriter(mainFile' false' Encoding.UTF8);                  mainWriter.WriteLine("Subject = {0}' Recognizer = geometric' Speed = {1}' StartTime(ms) = {2}"' subject' speed' start);                  mainWriter.WriteLine("Subject Recognizer Speed NumTraining GestureType RecognitionRate\n");                    recWriter = new StreamWriter(recFile' false' Encoding.UTF8);                  recWriter.WriteLine("Subject = {0}' Recognizer = geometric' Speed = {1}' StartTime(ms) = {2}"' subject' speed' start);                  recWriter.WriteLine("Correct? NumTrain Tested 1stCorrect Pts Ms Angle : (NBestNames) [NBestScores]\n");                    //                  // determine the number of gesture categories and the number of examples in each one                  //                  int numCategories = categories.Count;                  int numExamples = ((Category) categories[0]).NumExamples;                  double totalTests = (numExamples - 1) * NumRandomTests;                    //                  // outermost loop: trains on N=1..9' tests on 10-N (for e.g.' numExamples = 10)                  //                  for (int n = 1; n <= numExamples - 1; n++)                  {                      // storage for the final avg results for each category for this N                      double[] results = new double[numCategories];                        //                      // run a number of tests at this particular N number of training examples                      //                      for (int r = 0; r < NumRandomTests; r++)                      {                          _gestures.Clear(); // clear any (old) loaded prototypes                            // load (train on) N randomly selected gestures in each category                          for (int i = 0; i < numCategories; i++)                          {                              Category c = (Category) categories[i]; // the category to load N examples for                              int[] chosen = Utils.Random(0' numExamples - 1' n); // select N unique indices                              for (int j = 0; j < chosen.Length; j++)                              {                                  Gesture p = c[chosen[j]]; // get the prototype from this category at chosen[j]                                  _gestures.Add(p.Name' p); // load the randomly selected test gestures into the recognizer                              }                          }                            //                          // testing loop on all unloaded gestures in each category. creates a recognition                          // rate (%) by averaging the binary outcomes (correct' incorrect) for each test.                          //                          for (int i = 0; i < numCategories; i++)                          {                              // pick a random unloaded gesture in this category for testing                              // instead of dumbly picking' first find out what indices aren't                              // loaded' and then randomly pick from those.                              Category c = (Category) categories[i];                              int[] notLoaded = new int[numExamples - n];                              for (int j = 0' k = 0; j < numExamples; j++)                              {                                  Gesture g = c[j];                                  if (!_gestures.ContainsKey(g.Name))                                      notLoaded[k++] = j; // jth gesture in c is not loaded                              }                              int chosen = Utils.Random(0' notLoaded.Length - 1); // index                              Gesture p = c[notLoaded[chosen]]; // gesture to test                              Debug.Assert(!_gestures.ContainsKey(p.Name));                                                            // do the recognition!                              ArrayList testPts = Utils.RotateByDegrees(p.RawPoints' Utils.Random(0' 359));                              NBestList result = this.Recognize(testPts);                              string category = Category.ParseName(result.Name);                              int correct = (c.Name == category) ? 1 : 0;                                recWriter.WriteLine("{0} {1} {2} {3} {4} {5} {6:F1}{7} : ({8}) [{9}]"'                                  correct'                            // Correct?                                  n'                                  // NumTrain                                   p.Name'                             // Tested                                   FirstCorrect(p.Name' result.Names)' // 1stCorrect                                  p.RawPoints.Count'                  // Pts                                  p.Duration'                         // Ms                                   Math.Round(result.Angle' 1)' (char) 176' // Angle tweaking :                                  result.NamesString'                 // (NBestNames)                                  result.ScoresString);               // [NBestScores]                                results[i] += correct;                          }                            // provide feedback as to how many tests have been performed thus far.                          double testsSoFar = ((n - 1) * NumRandomTests) + r;                          ProgressChangedEvent(this' new ProgressEventArgs(testsSoFar / totalTests)); // callback                      }                        //                      // now create the final results for this N and write them to a file                      //                      for (int i = 0; i < numCategories; i++)                      {                          results[i] /= (double) NumRandomTests; // normalize by the number of tests at this N                          Category c = (Category) categories[i];                          // Subject Recognizer Speed NumTraining GestureType RecognitionRate                          mainWriter.WriteLine("{0} geometric {1} {2} {3} {4:F3}"' subject' speed' n' c.Name' Math.Round(results[i]' 3));                      }                  }                    // time-stamp the end of the processing                  int end = Environment.TickCount;                  mainWriter.WriteLine("\nEndTime(ms) = {0}' Minutes = {1:F2}"' end' Math.Round((end - start) / 60000.0' 2));                  recWriter.WriteLine("\nEndTime(ms) = {0}' Minutes = {1:F2}"' end' Math.Round((end - start) / 60000.0' 2));              }              catch (Exception ex)              {                  Console.WriteLine(ex.Message);                  success = false;              }              finally              {                  if (mainWriter != null)                      mainWriter.Close();                  if (recWriter != null)                      recWriter.Close();              }
Magic Number,WUW01,GeometricRecognizer,C:\repos\sixthsense_sixthsense\WUW01\classes\DollarRecognizer.cs,TestBatch,The following statement contains a magic number: try              {                  //                  // set up a main results file and detailed recognition results file                  //                  int start = Environment.TickCount;                  string mainFile = String.Format("{0}\\geometric_main_{1}.txt"' dir' start);                  string recFile = String.Format("{0}\\geometric_data_{1}.txt"' dir' start);                    mainWriter = new StreamWriter(mainFile' false' Encoding.UTF8);                  mainWriter.WriteLine("Subject = {0}' Recognizer = geometric' Speed = {1}' StartTime(ms) = {2}"' subject' speed' start);                  mainWriter.WriteLine("Subject Recognizer Speed NumTraining GestureType RecognitionRate\n");                    recWriter = new StreamWriter(recFile' false' Encoding.UTF8);                  recWriter.WriteLine("Subject = {0}' Recognizer = geometric' Speed = {1}' StartTime(ms) = {2}"' subject' speed' start);                  recWriter.WriteLine("Correct? NumTrain Tested 1stCorrect Pts Ms Angle : (NBestNames) [NBestScores]\n");                    //                  // determine the number of gesture categories and the number of examples in each one                  //                  int numCategories = categories.Count;                  int numExamples = ((Category) categories[0]).NumExamples;                  double totalTests = (numExamples - 1) * NumRandomTests;                    //                  // outermost loop: trains on N=1..9' tests on 10-N (for e.g.' numExamples = 10)                  //                  for (int n = 1; n <= numExamples - 1; n++)                  {                      // storage for the final avg results for each category for this N                      double[] results = new double[numCategories];                        //                      // run a number of tests at this particular N number of training examples                      //                      for (int r = 0; r < NumRandomTests; r++)                      {                          _gestures.Clear(); // clear any (old) loaded prototypes                            // load (train on) N randomly selected gestures in each category                          for (int i = 0; i < numCategories; i++)                          {                              Category c = (Category) categories[i]; // the category to load N examples for                              int[] chosen = Utils.Random(0' numExamples - 1' n); // select N unique indices                              for (int j = 0; j < chosen.Length; j++)                              {                                  Gesture p = c[chosen[j]]; // get the prototype from this category at chosen[j]                                  _gestures.Add(p.Name' p); // load the randomly selected test gestures into the recognizer                              }                          }                            //                          // testing loop on all unloaded gestures in each category. creates a recognition                          // rate (%) by averaging the binary outcomes (correct' incorrect) for each test.                          //                          for (int i = 0; i < numCategories; i++)                          {                              // pick a random unloaded gesture in this category for testing                              // instead of dumbly picking' first find out what indices aren't                              // loaded' and then randomly pick from those.                              Category c = (Category) categories[i];                              int[] notLoaded = new int[numExamples - n];                              for (int j = 0' k = 0; j < numExamples; j++)                              {                                  Gesture g = c[j];                                  if (!_gestures.ContainsKey(g.Name))                                      notLoaded[k++] = j; // jth gesture in c is not loaded                              }                              int chosen = Utils.Random(0' notLoaded.Length - 1); // index                              Gesture p = c[notLoaded[chosen]]; // gesture to test                              Debug.Assert(!_gestures.ContainsKey(p.Name));                                                            // do the recognition!                              ArrayList testPts = Utils.RotateByDegrees(p.RawPoints' Utils.Random(0' 359));                              NBestList result = this.Recognize(testPts);                              string category = Category.ParseName(result.Name);                              int correct = (c.Name == category) ? 1 : 0;                                recWriter.WriteLine("{0} {1} {2} {3} {4} {5} {6:F1}{7} : ({8}) [{9}]"'                                  correct'                            // Correct?                                  n'                                  // NumTrain                                   p.Name'                             // Tested                                   FirstCorrect(p.Name' result.Names)' // 1stCorrect                                  p.RawPoints.Count'                  // Pts                                  p.Duration'                         // Ms                                   Math.Round(result.Angle' 1)' (char) 176' // Angle tweaking :                                  result.NamesString'                 // (NBestNames)                                  result.ScoresString);               // [NBestScores]                                results[i] += correct;                          }                            // provide feedback as to how many tests have been performed thus far.                          double testsSoFar = ((n - 1) * NumRandomTests) + r;                          ProgressChangedEvent(this' new ProgressEventArgs(testsSoFar / totalTests)); // callback                      }                        //                      // now create the final results for this N and write them to a file                      //                      for (int i = 0; i < numCategories; i++)                      {                          results[i] /= (double) NumRandomTests; // normalize by the number of tests at this N                          Category c = (Category) categories[i];                          // Subject Recognizer Speed NumTraining GestureType RecognitionRate                          mainWriter.WriteLine("{0} geometric {1} {2} {3} {4:F3}"' subject' speed' n' c.Name' Math.Round(results[i]' 3));                      }                  }                    // time-stamp the end of the processing                  int end = Environment.TickCount;                  mainWriter.WriteLine("\nEndTime(ms) = {0}' Minutes = {1:F2}"' end' Math.Round((end - start) / 60000.0' 2));                  recWriter.WriteLine("\nEndTime(ms) = {0}' Minutes = {1:F2}"' end' Math.Round((end - start) / 60000.0' 2));              }              catch (Exception ex)              {                  Console.WriteLine(ex.Message);                  success = false;              }              finally              {                  if (mainWriter != null)                      mainWriter.Close();                  if (recWriter != null)                      recWriter.Close();              }
Magic Number,WUW01,GeometricRecognizer,C:\repos\sixthsense_sixthsense\WUW01\classes\DollarRecognizer.cs,CreateRotationGraph,The following statement contains a magic number: try              {                  // read gesture file #1                  reader = new XmlTextReader(file1);                  reader.WhitespaceHandling = WhitespaceHandling.None;                  reader.MoveToContent();                  Gesture g1 = ReadGesture(reader);                  reader.Close();                    // read gesture file #2                  reader = new XmlTextReader(file2);                  reader.WhitespaceHandling = WhitespaceHandling.None;                  reader.MoveToContent();                  Gesture g2 = ReadGesture(reader);                    // create output file for results                  string outfile = String.Format("{0}\\{1}({2}' {3})_{4}.txt"' dir' similar ? "o" : "x"' g1.Name' g2.Name' Environment.TickCount);                  writer = new StreamWriter(outfile' false' Encoding.UTF8);                  writer.WriteLine("Rotated: {0} --> {1}. {2}' {3}\n"' g1.Name' g2.Name' DateTime.Now.ToLongDateString()' DateTime.Now.ToLongTimeString());                    // do the full 360 degree rotations                  double[] full = FullSearch(g1.Points' g2.Points' writer);                    // use bidirectional hill climbing to do it again                  double init = Utils.PathDistance(g1.Points' g2.Points); // initial distance                  double[] pos = HillClimbSearch(g1.Points' g2.Points' init' 1d);                  double[] neg = HillClimbSearch(g1.Points' g2.Points' init' -1d);                  double[] best = new double[3];                  best = (neg[0] < pos[0]) ? neg : pos; // min distance                  writer.WriteLine("\nHill Climb Search ({0} rotations)\n{1:F2}{2}\t{3:F3} px"' pos[2] + neg[2] + 1' Math.Round(best[1]' 2)' (char) 176' Math.Round(best[0]' 3)); // calls' angle' distance                    // use golden section search to do it yet again                  double[] gold = GoldenSectionSearch(                      g1.Points'              // to rotate                      g2.Points'              // to match                      Utils.Deg2Rad(-45.0)'   // lbound                      Utils.Deg2Rad(+45.0)'   // ubound                      Utils.Deg2Rad(2.0));    // threshold                  writer.WriteLine("\nGolden Section Search ({0} rotations)\n{1:F2}{2}\t{3:F3} px"' gold[2]' Math.Round(gold[1]' 2)' (char) 176' Math.Round(gold[0]' 3)); // calls' angle' distance                    // for pasting into Excel                  writer.WriteLine("\n{0} {1} {2:F2} {3:F2} {4:F3} {5:F3} {6} {7:F2} {8:F2} {9:F3} {10} {11:F2} {12:F2} {13:F3} {14}"'                      g1.Name'                    // rotated                      g2.Name'                    // into                      Math.Abs(Math.Round(full[1]' 2))' // |angle|                      Math.Round(full[1]' 2)'     // Full Search angle                      Math.Round(full[0]' 3)'     // Full Search distance                      Math.Round(init' 3)'        // Initial distance w/o any search                      full[2]'                    // Full Search iterations                      Math.Abs(Math.Round(best[1]' 2))' // |angle|                      Math.Round(best[1]' 2)'     // Bidirectional Hill Climb Search angle                      Math.Round(best[0]' 3)'     // Bidirectional Hill Climb Search distance                      pos[2] + neg[2] + 1'        // Bidirectional Hill Climb Search iterations                      Math.Abs(Math.Round(gold[1]' 2))' // |angle|                      Math.Round(gold[1]' 2)'     // Golden Section Search angle                      Math.Round(gold[0]' 3)'     // Golden Section Search distance                      gold[2]);                   // Golden Section Search iterations              }              catch (XmlException xml)              {                  Console.Write(xml.Message);                  success = false;              }              catch (Exception ex)              {                  Console.Write(ex.Message);                  success = false;              }              finally              {                  if (reader != null)                      reader.Close();                  if (writer != null)                      writer.Close();              }
Magic Number,WUW01,GeometricRecognizer,C:\repos\sixthsense_sixthsense\WUW01\classes\DollarRecognizer.cs,CreateRotationGraph,The following statement contains a magic number: try              {                  // read gesture file #1                  reader = new XmlTextReader(file1);                  reader.WhitespaceHandling = WhitespaceHandling.None;                  reader.MoveToContent();                  Gesture g1 = ReadGesture(reader);                  reader.Close();                    // read gesture file #2                  reader = new XmlTextReader(file2);                  reader.WhitespaceHandling = WhitespaceHandling.None;                  reader.MoveToContent();                  Gesture g2 = ReadGesture(reader);                    // create output file for results                  string outfile = String.Format("{0}\\{1}({2}' {3})_{4}.txt"' dir' similar ? "o" : "x"' g1.Name' g2.Name' Environment.TickCount);                  writer = new StreamWriter(outfile' false' Encoding.UTF8);                  writer.WriteLine("Rotated: {0} --> {1}. {2}' {3}\n"' g1.Name' g2.Name' DateTime.Now.ToLongDateString()' DateTime.Now.ToLongTimeString());                    // do the full 360 degree rotations                  double[] full = FullSearch(g1.Points' g2.Points' writer);                    // use bidirectional hill climbing to do it again                  double init = Utils.PathDistance(g1.Points' g2.Points); // initial distance                  double[] pos = HillClimbSearch(g1.Points' g2.Points' init' 1d);                  double[] neg = HillClimbSearch(g1.Points' g2.Points' init' -1d);                  double[] best = new double[3];                  best = (neg[0] < pos[0]) ? neg : pos; // min distance                  writer.WriteLine("\nHill Climb Search ({0} rotations)\n{1:F2}{2}\t{3:F3} px"' pos[2] + neg[2] + 1' Math.Round(best[1]' 2)' (char) 176' Math.Round(best[0]' 3)); // calls' angle' distance                    // use golden section search to do it yet again                  double[] gold = GoldenSectionSearch(                      g1.Points'              // to rotate                      g2.Points'              // to match                      Utils.Deg2Rad(-45.0)'   // lbound                      Utils.Deg2Rad(+45.0)'   // ubound                      Utils.Deg2Rad(2.0));    // threshold                  writer.WriteLine("\nGolden Section Search ({0} rotations)\n{1:F2}{2}\t{3:F3} px"' gold[2]' Math.Round(gold[1]' 2)' (char) 176' Math.Round(gold[0]' 3)); // calls' angle' distance                    // for pasting into Excel                  writer.WriteLine("\n{0} {1} {2:F2} {3:F2} {4:F3} {5:F3} {6} {7:F2} {8:F2} {9:F3} {10} {11:F2} {12:F2} {13:F3} {14}"'                      g1.Name'                    // rotated                      g2.Name'                    // into                      Math.Abs(Math.Round(full[1]' 2))' // |angle|                      Math.Round(full[1]' 2)'     // Full Search angle                      Math.Round(full[0]' 3)'     // Full Search distance                      Math.Round(init' 3)'        // Initial distance w/o any search                      full[2]'                    // Full Search iterations                      Math.Abs(Math.Round(best[1]' 2))' // |angle|                      Math.Round(best[1]' 2)'     // Bidirectional Hill Climb Search angle                      Math.Round(best[0]' 3)'     // Bidirectional Hill Climb Search distance                      pos[2] + neg[2] + 1'        // Bidirectional Hill Climb Search iterations                      Math.Abs(Math.Round(gold[1]' 2))' // |angle|                      Math.Round(gold[1]' 2)'     // Golden Section Search angle                      Math.Round(gold[0]' 3)'     // Golden Section Search distance                      gold[2]);                   // Golden Section Search iterations              }              catch (XmlException xml)              {                  Console.Write(xml.Message);                  success = false;              }              catch (Exception ex)              {                  Console.Write(ex.Message);                  success = false;              }              finally              {                  if (reader != null)                      reader.Close();                  if (writer != null)                      writer.Close();              }
Magic Number,WUW01,GeometricRecognizer,C:\repos\sixthsense_sixthsense\WUW01\classes\DollarRecognizer.cs,CreateRotationGraph,The following statement contains a magic number: try              {                  // read gesture file #1                  reader = new XmlTextReader(file1);                  reader.WhitespaceHandling = WhitespaceHandling.None;                  reader.MoveToContent();                  Gesture g1 = ReadGesture(reader);                  reader.Close();                    // read gesture file #2                  reader = new XmlTextReader(file2);                  reader.WhitespaceHandling = WhitespaceHandling.None;                  reader.MoveToContent();                  Gesture g2 = ReadGesture(reader);                    // create output file for results                  string outfile = String.Format("{0}\\{1}({2}' {3})_{4}.txt"' dir' similar ? "o" : "x"' g1.Name' g2.Name' Environment.TickCount);                  writer = new StreamWriter(outfile' false' Encoding.UTF8);                  writer.WriteLine("Rotated: {0} --> {1}. {2}' {3}\n"' g1.Name' g2.Name' DateTime.Now.ToLongDateString()' DateTime.Now.ToLongTimeString());                    // do the full 360 degree rotations                  double[] full = FullSearch(g1.Points' g2.Points' writer);                    // use bidirectional hill climbing to do it again                  double init = Utils.PathDistance(g1.Points' g2.Points); // initial distance                  double[] pos = HillClimbSearch(g1.Points' g2.Points' init' 1d);                  double[] neg = HillClimbSearch(g1.Points' g2.Points' init' -1d);                  double[] best = new double[3];                  best = (neg[0] < pos[0]) ? neg : pos; // min distance                  writer.WriteLine("\nHill Climb Search ({0} rotations)\n{1:F2}{2}\t{3:F3} px"' pos[2] + neg[2] + 1' Math.Round(best[1]' 2)' (char) 176' Math.Round(best[0]' 3)); // calls' angle' distance                    // use golden section search to do it yet again                  double[] gold = GoldenSectionSearch(                      g1.Points'              // to rotate                      g2.Points'              // to match                      Utils.Deg2Rad(-45.0)'   // lbound                      Utils.Deg2Rad(+45.0)'   // ubound                      Utils.Deg2Rad(2.0));    // threshold                  writer.WriteLine("\nGolden Section Search ({0} rotations)\n{1:F2}{2}\t{3:F3} px"' gold[2]' Math.Round(gold[1]' 2)' (char) 176' Math.Round(gold[0]' 3)); // calls' angle' distance                    // for pasting into Excel                  writer.WriteLine("\n{0} {1} {2:F2} {3:F2} {4:F3} {5:F3} {6} {7:F2} {8:F2} {9:F3} {10} {11:F2} {12:F2} {13:F3} {14}"'                      g1.Name'                    // rotated                      g2.Name'                    // into                      Math.Abs(Math.Round(full[1]' 2))' // |angle|                      Math.Round(full[1]' 2)'     // Full Search angle                      Math.Round(full[0]' 3)'     // Full Search distance                      Math.Round(init' 3)'        // Initial distance w/o any search                      full[2]'                    // Full Search iterations                      Math.Abs(Math.Round(best[1]' 2))' // |angle|                      Math.Round(best[1]' 2)'     // Bidirectional Hill Climb Search angle                      Math.Round(best[0]' 3)'     // Bidirectional Hill Climb Search distance                      pos[2] + neg[2] + 1'        // Bidirectional Hill Climb Search iterations                      Math.Abs(Math.Round(gold[1]' 2))' // |angle|                      Math.Round(gold[1]' 2)'     // Golden Section Search angle                      Math.Round(gold[0]' 3)'     // Golden Section Search distance                      gold[2]);                   // Golden Section Search iterations              }              catch (XmlException xml)              {                  Console.Write(xml.Message);                  success = false;              }              catch (Exception ex)              {                  Console.Write(ex.Message);                  success = false;              }              finally              {                  if (reader != null)                      reader.Close();                  if (writer != null)                      writer.Close();              }
Magic Number,WUW01,GeometricRecognizer,C:\repos\sixthsense_sixthsense\WUW01\classes\DollarRecognizer.cs,CreateRotationGraph,The following statement contains a magic number: try              {                  // read gesture file #1                  reader = new XmlTextReader(file1);                  reader.WhitespaceHandling = WhitespaceHandling.None;                  reader.MoveToContent();                  Gesture g1 = ReadGesture(reader);                  reader.Close();                    // read gesture file #2                  reader = new XmlTextReader(file2);                  reader.WhitespaceHandling = WhitespaceHandling.None;                  reader.MoveToContent();                  Gesture g2 = ReadGesture(reader);                    // create output file for results                  string outfile = String.Format("{0}\\{1}({2}' {3})_{4}.txt"' dir' similar ? "o" : "x"' g1.Name' g2.Name' Environment.TickCount);                  writer = new StreamWriter(outfile' false' Encoding.UTF8);                  writer.WriteLine("Rotated: {0} --> {1}. {2}' {3}\n"' g1.Name' g2.Name' DateTime.Now.ToLongDateString()' DateTime.Now.ToLongTimeString());                    // do the full 360 degree rotations                  double[] full = FullSearch(g1.Points' g2.Points' writer);                    // use bidirectional hill climbing to do it again                  double init = Utils.PathDistance(g1.Points' g2.Points); // initial distance                  double[] pos = HillClimbSearch(g1.Points' g2.Points' init' 1d);                  double[] neg = HillClimbSearch(g1.Points' g2.Points' init' -1d);                  double[] best = new double[3];                  best = (neg[0] < pos[0]) ? neg : pos; // min distance                  writer.WriteLine("\nHill Climb Search ({0} rotations)\n{1:F2}{2}\t{3:F3} px"' pos[2] + neg[2] + 1' Math.Round(best[1]' 2)' (char) 176' Math.Round(best[0]' 3)); // calls' angle' distance                    // use golden section search to do it yet again                  double[] gold = GoldenSectionSearch(                      g1.Points'              // to rotate                      g2.Points'              // to match                      Utils.Deg2Rad(-45.0)'   // lbound                      Utils.Deg2Rad(+45.0)'   // ubound                      Utils.Deg2Rad(2.0));    // threshold                  writer.WriteLine("\nGolden Section Search ({0} rotations)\n{1:F2}{2}\t{3:F3} px"' gold[2]' Math.Round(gold[1]' 2)' (char) 176' Math.Round(gold[0]' 3)); // calls' angle' distance                    // for pasting into Excel                  writer.WriteLine("\n{0} {1} {2:F2} {3:F2} {4:F3} {5:F3} {6} {7:F2} {8:F2} {9:F3} {10} {11:F2} {12:F2} {13:F3} {14}"'                      g1.Name'                    // rotated                      g2.Name'                    // into                      Math.Abs(Math.Round(full[1]' 2))' // |angle|                      Math.Round(full[1]' 2)'     // Full Search angle                      Math.Round(full[0]' 3)'     // Full Search distance                      Math.Round(init' 3)'        // Initial distance w/o any search                      full[2]'                    // Full Search iterations                      Math.Abs(Math.Round(best[1]' 2))' // |angle|                      Math.Round(best[1]' 2)'     // Bidirectional Hill Climb Search angle                      Math.Round(best[0]' 3)'     // Bidirectional Hill Climb Search distance                      pos[2] + neg[2] + 1'        // Bidirectional Hill Climb Search iterations                      Math.Abs(Math.Round(gold[1]' 2))' // |angle|                      Math.Round(gold[1]' 2)'     // Golden Section Search angle                      Math.Round(gold[0]' 3)'     // Golden Section Search distance                      gold[2]);                   // Golden Section Search iterations              }              catch (XmlException xml)              {                  Console.Write(xml.Message);                  success = false;              }              catch (Exception ex)              {                  Console.Write(ex.Message);                  success = false;              }              finally              {                  if (reader != null)                      reader.Close();                  if (writer != null)                      writer.Close();              }
Magic Number,WUW01,GeometricRecognizer,C:\repos\sixthsense_sixthsense\WUW01\classes\DollarRecognizer.cs,CreateRotationGraph,The following statement contains a magic number: try              {                  // read gesture file #1                  reader = new XmlTextReader(file1);                  reader.WhitespaceHandling = WhitespaceHandling.None;                  reader.MoveToContent();                  Gesture g1 = ReadGesture(reader);                  reader.Close();                    // read gesture file #2                  reader = new XmlTextReader(file2);                  reader.WhitespaceHandling = WhitespaceHandling.None;                  reader.MoveToContent();                  Gesture g2 = ReadGesture(reader);                    // create output file for results                  string outfile = String.Format("{0}\\{1}({2}' {3})_{4}.txt"' dir' similar ? "o" : "x"' g1.Name' g2.Name' Environment.TickCount);                  writer = new StreamWriter(outfile' false' Encoding.UTF8);                  writer.WriteLine("Rotated: {0} --> {1}. {2}' {3}\n"' g1.Name' g2.Name' DateTime.Now.ToLongDateString()' DateTime.Now.ToLongTimeString());                    // do the full 360 degree rotations                  double[] full = FullSearch(g1.Points' g2.Points' writer);                    // use bidirectional hill climbing to do it again                  double init = Utils.PathDistance(g1.Points' g2.Points); // initial distance                  double[] pos = HillClimbSearch(g1.Points' g2.Points' init' 1d);                  double[] neg = HillClimbSearch(g1.Points' g2.Points' init' -1d);                  double[] best = new double[3];                  best = (neg[0] < pos[0]) ? neg : pos; // min distance                  writer.WriteLine("\nHill Climb Search ({0} rotations)\n{1:F2}{2}\t{3:F3} px"' pos[2] + neg[2] + 1' Math.Round(best[1]' 2)' (char) 176' Math.Round(best[0]' 3)); // calls' angle' distance                    // use golden section search to do it yet again                  double[] gold = GoldenSectionSearch(                      g1.Points'              // to rotate                      g2.Points'              // to match                      Utils.Deg2Rad(-45.0)'   // lbound                      Utils.Deg2Rad(+45.0)'   // ubound                      Utils.Deg2Rad(2.0));    // threshold                  writer.WriteLine("\nGolden Section Search ({0} rotations)\n{1:F2}{2}\t{3:F3} px"' gold[2]' Math.Round(gold[1]' 2)' (char) 176' Math.Round(gold[0]' 3)); // calls' angle' distance                    // for pasting into Excel                  writer.WriteLine("\n{0} {1} {2:F2} {3:F2} {4:F3} {5:F3} {6} {7:F2} {8:F2} {9:F3} {10} {11:F2} {12:F2} {13:F3} {14}"'                      g1.Name'                    // rotated                      g2.Name'                    // into                      Math.Abs(Math.Round(full[1]' 2))' // |angle|                      Math.Round(full[1]' 2)'     // Full Search angle                      Math.Round(full[0]' 3)'     // Full Search distance                      Math.Round(init' 3)'        // Initial distance w/o any search                      full[2]'                    // Full Search iterations                      Math.Abs(Math.Round(best[1]' 2))' // |angle|                      Math.Round(best[1]' 2)'     // Bidirectional Hill Climb Search angle                      Math.Round(best[0]' 3)'     // Bidirectional Hill Climb Search distance                      pos[2] + neg[2] + 1'        // Bidirectional Hill Climb Search iterations                      Math.Abs(Math.Round(gold[1]' 2))' // |angle|                      Math.Round(gold[1]' 2)'     // Golden Section Search angle                      Math.Round(gold[0]' 3)'     // Golden Section Search distance                      gold[2]);                   // Golden Section Search iterations              }              catch (XmlException xml)              {                  Console.Write(xml.Message);                  success = false;              }              catch (Exception ex)              {                  Console.Write(ex.Message);                  success = false;              }              finally              {                  if (reader != null)                      reader.Close();                  if (writer != null)                      writer.Close();              }
Magic Number,WUW01,GeometricRecognizer,C:\repos\sixthsense_sixthsense\WUW01\classes\DollarRecognizer.cs,CreateRotationGraph,The following statement contains a magic number: try              {                  // read gesture file #1                  reader = new XmlTextReader(file1);                  reader.WhitespaceHandling = WhitespaceHandling.None;                  reader.MoveToContent();                  Gesture g1 = ReadGesture(reader);                  reader.Close();                    // read gesture file #2                  reader = new XmlTextReader(file2);                  reader.WhitespaceHandling = WhitespaceHandling.None;                  reader.MoveToContent();                  Gesture g2 = ReadGesture(reader);                    // create output file for results                  string outfile = String.Format("{0}\\{1}({2}' {3})_{4}.txt"' dir' similar ? "o" : "x"' g1.Name' g2.Name' Environment.TickCount);                  writer = new StreamWriter(outfile' false' Encoding.UTF8);                  writer.WriteLine("Rotated: {0} --> {1}. {2}' {3}\n"' g1.Name' g2.Name' DateTime.Now.ToLongDateString()' DateTime.Now.ToLongTimeString());                    // do the full 360 degree rotations                  double[] full = FullSearch(g1.Points' g2.Points' writer);                    // use bidirectional hill climbing to do it again                  double init = Utils.PathDistance(g1.Points' g2.Points); // initial distance                  double[] pos = HillClimbSearch(g1.Points' g2.Points' init' 1d);                  double[] neg = HillClimbSearch(g1.Points' g2.Points' init' -1d);                  double[] best = new double[3];                  best = (neg[0] < pos[0]) ? neg : pos; // min distance                  writer.WriteLine("\nHill Climb Search ({0} rotations)\n{1:F2}{2}\t{3:F3} px"' pos[2] + neg[2] + 1' Math.Round(best[1]' 2)' (char) 176' Math.Round(best[0]' 3)); // calls' angle' distance                    // use golden section search to do it yet again                  double[] gold = GoldenSectionSearch(                      g1.Points'              // to rotate                      g2.Points'              // to match                      Utils.Deg2Rad(-45.0)'   // lbound                      Utils.Deg2Rad(+45.0)'   // ubound                      Utils.Deg2Rad(2.0));    // threshold                  writer.WriteLine("\nGolden Section Search ({0} rotations)\n{1:F2}{2}\t{3:F3} px"' gold[2]' Math.Round(gold[1]' 2)' (char) 176' Math.Round(gold[0]' 3)); // calls' angle' distance                    // for pasting into Excel                  writer.WriteLine("\n{0} {1} {2:F2} {3:F2} {4:F3} {5:F3} {6} {7:F2} {8:F2} {9:F3} {10} {11:F2} {12:F2} {13:F3} {14}"'                      g1.Name'                    // rotated                      g2.Name'                    // into                      Math.Abs(Math.Round(full[1]' 2))' // |angle|                      Math.Round(full[1]' 2)'     // Full Search angle                      Math.Round(full[0]' 3)'     // Full Search distance                      Math.Round(init' 3)'        // Initial distance w/o any search                      full[2]'                    // Full Search iterations                      Math.Abs(Math.Round(best[1]' 2))' // |angle|                      Math.Round(best[1]' 2)'     // Bidirectional Hill Climb Search angle                      Math.Round(best[0]' 3)'     // Bidirectional Hill Climb Search distance                      pos[2] + neg[2] + 1'        // Bidirectional Hill Climb Search iterations                      Math.Abs(Math.Round(gold[1]' 2))' // |angle|                      Math.Round(gold[1]' 2)'     // Golden Section Search angle                      Math.Round(gold[0]' 3)'     // Golden Section Search distance                      gold[2]);                   // Golden Section Search iterations              }              catch (XmlException xml)              {                  Console.Write(xml.Message);                  success = false;              }              catch (Exception ex)              {                  Console.Write(ex.Message);                  success = false;              }              finally              {                  if (reader != null)                      reader.Close();                  if (writer != null)                      writer.Close();              }
Magic Number,WUW01,GeometricRecognizer,C:\repos\sixthsense_sixthsense\WUW01\classes\DollarRecognizer.cs,CreateRotationGraph,The following statement contains a magic number: try              {                  // read gesture file #1                  reader = new XmlTextReader(file1);                  reader.WhitespaceHandling = WhitespaceHandling.None;                  reader.MoveToContent();                  Gesture g1 = ReadGesture(reader);                  reader.Close();                    // read gesture file #2                  reader = new XmlTextReader(file2);                  reader.WhitespaceHandling = WhitespaceHandling.None;                  reader.MoveToContent();                  Gesture g2 = ReadGesture(reader);                    // create output file for results                  string outfile = String.Format("{0}\\{1}({2}' {3})_{4}.txt"' dir' similar ? "o" : "x"' g1.Name' g2.Name' Environment.TickCount);                  writer = new StreamWriter(outfile' false' Encoding.UTF8);                  writer.WriteLine("Rotated: {0} --> {1}. {2}' {3}\n"' g1.Name' g2.Name' DateTime.Now.ToLongDateString()' DateTime.Now.ToLongTimeString());                    // do the full 360 degree rotations                  double[] full = FullSearch(g1.Points' g2.Points' writer);                    // use bidirectional hill climbing to do it again                  double init = Utils.PathDistance(g1.Points' g2.Points); // initial distance                  double[] pos = HillClimbSearch(g1.Points' g2.Points' init' 1d);                  double[] neg = HillClimbSearch(g1.Points' g2.Points' init' -1d);                  double[] best = new double[3];                  best = (neg[0] < pos[0]) ? neg : pos; // min distance                  writer.WriteLine("\nHill Climb Search ({0} rotations)\n{1:F2}{2}\t{3:F3} px"' pos[2] + neg[2] + 1' Math.Round(best[1]' 2)' (char) 176' Math.Round(best[0]' 3)); // calls' angle' distance                    // use golden section search to do it yet again                  double[] gold = GoldenSectionSearch(                      g1.Points'              // to rotate                      g2.Points'              // to match                      Utils.Deg2Rad(-45.0)'   // lbound                      Utils.Deg2Rad(+45.0)'   // ubound                      Utils.Deg2Rad(2.0));    // threshold                  writer.WriteLine("\nGolden Section Search ({0} rotations)\n{1:F2}{2}\t{3:F3} px"' gold[2]' Math.Round(gold[1]' 2)' (char) 176' Math.Round(gold[0]' 3)); // calls' angle' distance                    // for pasting into Excel                  writer.WriteLine("\n{0} {1} {2:F2} {3:F2} {4:F3} {5:F3} {6} {7:F2} {8:F2} {9:F3} {10} {11:F2} {12:F2} {13:F3} {14}"'                      g1.Name'                    // rotated                      g2.Name'                    // into                      Math.Abs(Math.Round(full[1]' 2))' // |angle|                      Math.Round(full[1]' 2)'     // Full Search angle                      Math.Round(full[0]' 3)'     // Full Search distance                      Math.Round(init' 3)'        // Initial distance w/o any search                      full[2]'                    // Full Search iterations                      Math.Abs(Math.Round(best[1]' 2))' // |angle|                      Math.Round(best[1]' 2)'     // Bidirectional Hill Climb Search angle                      Math.Round(best[0]' 3)'     // Bidirectional Hill Climb Search distance                      pos[2] + neg[2] + 1'        // Bidirectional Hill Climb Search iterations                      Math.Abs(Math.Round(gold[1]' 2))' // |angle|                      Math.Round(gold[1]' 2)'     // Golden Section Search angle                      Math.Round(gold[0]' 3)'     // Golden Section Search distance                      gold[2]);                   // Golden Section Search iterations              }              catch (XmlException xml)              {                  Console.Write(xml.Message);                  success = false;              }              catch (Exception ex)              {                  Console.Write(ex.Message);                  success = false;              }              finally              {                  if (reader != null)                      reader.Close();                  if (writer != null)                      writer.Close();              }
Magic Number,WUW01,GeometricRecognizer,C:\repos\sixthsense_sixthsense\WUW01\classes\DollarRecognizer.cs,CreateRotationGraph,The following statement contains a magic number: try              {                  // read gesture file #1                  reader = new XmlTextReader(file1);                  reader.WhitespaceHandling = WhitespaceHandling.None;                  reader.MoveToContent();                  Gesture g1 = ReadGesture(reader);                  reader.Close();                    // read gesture file #2                  reader = new XmlTextReader(file2);                  reader.WhitespaceHandling = WhitespaceHandling.None;                  reader.MoveToContent();                  Gesture g2 = ReadGesture(reader);                    // create output file for results                  string outfile = String.Format("{0}\\{1}({2}' {3})_{4}.txt"' dir' similar ? "o" : "x"' g1.Name' g2.Name' Environment.TickCount);                  writer = new StreamWriter(outfile' false' Encoding.UTF8);                  writer.WriteLine("Rotated: {0} --> {1}. {2}' {3}\n"' g1.Name' g2.Name' DateTime.Now.ToLongDateString()' DateTime.Now.ToLongTimeString());                    // do the full 360 degree rotations                  double[] full = FullSearch(g1.Points' g2.Points' writer);                    // use bidirectional hill climbing to do it again                  double init = Utils.PathDistance(g1.Points' g2.Points); // initial distance                  double[] pos = HillClimbSearch(g1.Points' g2.Points' init' 1d);                  double[] neg = HillClimbSearch(g1.Points' g2.Points' init' -1d);                  double[] best = new double[3];                  best = (neg[0] < pos[0]) ? neg : pos; // min distance                  writer.WriteLine("\nHill Climb Search ({0} rotations)\n{1:F2}{2}\t{3:F3} px"' pos[2] + neg[2] + 1' Math.Round(best[1]' 2)' (char) 176' Math.Round(best[0]' 3)); // calls' angle' distance                    // use golden section search to do it yet again                  double[] gold = GoldenSectionSearch(                      g1.Points'              // to rotate                      g2.Points'              // to match                      Utils.Deg2Rad(-45.0)'   // lbound                      Utils.Deg2Rad(+45.0)'   // ubound                      Utils.Deg2Rad(2.0));    // threshold                  writer.WriteLine("\nGolden Section Search ({0} rotations)\n{1:F2}{2}\t{3:F3} px"' gold[2]' Math.Round(gold[1]' 2)' (char) 176' Math.Round(gold[0]' 3)); // calls' angle' distance                    // for pasting into Excel                  writer.WriteLine("\n{0} {1} {2:F2} {3:F2} {4:F3} {5:F3} {6} {7:F2} {8:F2} {9:F3} {10} {11:F2} {12:F2} {13:F3} {14}"'                      g1.Name'                    // rotated                      g2.Name'                    // into                      Math.Abs(Math.Round(full[1]' 2))' // |angle|                      Math.Round(full[1]' 2)'     // Full Search angle                      Math.Round(full[0]' 3)'     // Full Search distance                      Math.Round(init' 3)'        // Initial distance w/o any search                      full[2]'                    // Full Search iterations                      Math.Abs(Math.Round(best[1]' 2))' // |angle|                      Math.Round(best[1]' 2)'     // Bidirectional Hill Climb Search angle                      Math.Round(best[0]' 3)'     // Bidirectional Hill Climb Search distance                      pos[2] + neg[2] + 1'        // Bidirectional Hill Climb Search iterations                      Math.Abs(Math.Round(gold[1]' 2))' // |angle|                      Math.Round(gold[1]' 2)'     // Golden Section Search angle                      Math.Round(gold[0]' 3)'     // Golden Section Search distance                      gold[2]);                   // Golden Section Search iterations              }              catch (XmlException xml)              {                  Console.Write(xml.Message);                  success = false;              }              catch (Exception ex)              {                  Console.Write(ex.Message);                  success = false;              }              finally              {                  if (reader != null)                      reader.Close();                  if (writer != null)                      writer.Close();              }
Magic Number,WUW01,GeometricRecognizer,C:\repos\sixthsense_sixthsense\WUW01\classes\DollarRecognizer.cs,CreateRotationGraph,The following statement contains a magic number: try              {                  // read gesture file #1                  reader = new XmlTextReader(file1);                  reader.WhitespaceHandling = WhitespaceHandling.None;                  reader.MoveToContent();                  Gesture g1 = ReadGesture(reader);                  reader.Close();                    // read gesture file #2                  reader = new XmlTextReader(file2);                  reader.WhitespaceHandling = WhitespaceHandling.None;                  reader.MoveToContent();                  Gesture g2 = ReadGesture(reader);                    // create output file for results                  string outfile = String.Format("{0}\\{1}({2}' {3})_{4}.txt"' dir' similar ? "o" : "x"' g1.Name' g2.Name' Environment.TickCount);                  writer = new StreamWriter(outfile' false' Encoding.UTF8);                  writer.WriteLine("Rotated: {0} --> {1}. {2}' {3}\n"' g1.Name' g2.Name' DateTime.Now.ToLongDateString()' DateTime.Now.ToLongTimeString());                    // do the full 360 degree rotations                  double[] full = FullSearch(g1.Points' g2.Points' writer);                    // use bidirectional hill climbing to do it again                  double init = Utils.PathDistance(g1.Points' g2.Points); // initial distance                  double[] pos = HillClimbSearch(g1.Points' g2.Points' init' 1d);                  double[] neg = HillClimbSearch(g1.Points' g2.Points' init' -1d);                  double[] best = new double[3];                  best = (neg[0] < pos[0]) ? neg : pos; // min distance                  writer.WriteLine("\nHill Climb Search ({0} rotations)\n{1:F2}{2}\t{3:F3} px"' pos[2] + neg[2] + 1' Math.Round(best[1]' 2)' (char) 176' Math.Round(best[0]' 3)); // calls' angle' distance                    // use golden section search to do it yet again                  double[] gold = GoldenSectionSearch(                      g1.Points'              // to rotate                      g2.Points'              // to match                      Utils.Deg2Rad(-45.0)'   // lbound                      Utils.Deg2Rad(+45.0)'   // ubound                      Utils.Deg2Rad(2.0));    // threshold                  writer.WriteLine("\nGolden Section Search ({0} rotations)\n{1:F2}{2}\t{3:F3} px"' gold[2]' Math.Round(gold[1]' 2)' (char) 176' Math.Round(gold[0]' 3)); // calls' angle' distance                    // for pasting into Excel                  writer.WriteLine("\n{0} {1} {2:F2} {3:F2} {4:F3} {5:F3} {6} {7:F2} {8:F2} {9:F3} {10} {11:F2} {12:F2} {13:F3} {14}"'                      g1.Name'                    // rotated                      g2.Name'                    // into                      Math.Abs(Math.Round(full[1]' 2))' // |angle|                      Math.Round(full[1]' 2)'     // Full Search angle                      Math.Round(full[0]' 3)'     // Full Search distance                      Math.Round(init' 3)'        // Initial distance w/o any search                      full[2]'                    // Full Search iterations                      Math.Abs(Math.Round(best[1]' 2))' // |angle|                      Math.Round(best[1]' 2)'     // Bidirectional Hill Climb Search angle                      Math.Round(best[0]' 3)'     // Bidirectional Hill Climb Search distance                      pos[2] + neg[2] + 1'        // Bidirectional Hill Climb Search iterations                      Math.Abs(Math.Round(gold[1]' 2))' // |angle|                      Math.Round(gold[1]' 2)'     // Golden Section Search angle                      Math.Round(gold[0]' 3)'     // Golden Section Search distance                      gold[2]);                   // Golden Section Search iterations              }              catch (XmlException xml)              {                  Console.Write(xml.Message);                  success = false;              }              catch (Exception ex)              {                  Console.Write(ex.Message);                  success = false;              }              finally              {                  if (reader != null)                      reader.Close();                  if (writer != null)                      writer.Close();              }
Magic Number,WUW01,GeometricRecognizer,C:\repos\sixthsense_sixthsense\WUW01\classes\DollarRecognizer.cs,CreateRotationGraph,The following statement contains a magic number: try              {                  // read gesture file #1                  reader = new XmlTextReader(file1);                  reader.WhitespaceHandling = WhitespaceHandling.None;                  reader.MoveToContent();                  Gesture g1 = ReadGesture(reader);                  reader.Close();                    // read gesture file #2                  reader = new XmlTextReader(file2);                  reader.WhitespaceHandling = WhitespaceHandling.None;                  reader.MoveToContent();                  Gesture g2 = ReadGesture(reader);                    // create output file for results                  string outfile = String.Format("{0}\\{1}({2}' {3})_{4}.txt"' dir' similar ? "o" : "x"' g1.Name' g2.Name' Environment.TickCount);                  writer = new StreamWriter(outfile' false' Encoding.UTF8);                  writer.WriteLine("Rotated: {0} --> {1}. {2}' {3}\n"' g1.Name' g2.Name' DateTime.Now.ToLongDateString()' DateTime.Now.ToLongTimeString());                    // do the full 360 degree rotations                  double[] full = FullSearch(g1.Points' g2.Points' writer);                    // use bidirectional hill climbing to do it again                  double init = Utils.PathDistance(g1.Points' g2.Points); // initial distance                  double[] pos = HillClimbSearch(g1.Points' g2.Points' init' 1d);                  double[] neg = HillClimbSearch(g1.Points' g2.Points' init' -1d);                  double[] best = new double[3];                  best = (neg[0] < pos[0]) ? neg : pos; // min distance                  writer.WriteLine("\nHill Climb Search ({0} rotations)\n{1:F2}{2}\t{3:F3} px"' pos[2] + neg[2] + 1' Math.Round(best[1]' 2)' (char) 176' Math.Round(best[0]' 3)); // calls' angle' distance                    // use golden section search to do it yet again                  double[] gold = GoldenSectionSearch(                      g1.Points'              // to rotate                      g2.Points'              // to match                      Utils.Deg2Rad(-45.0)'   // lbound                      Utils.Deg2Rad(+45.0)'   // ubound                      Utils.Deg2Rad(2.0));    // threshold                  writer.WriteLine("\nGolden Section Search ({0} rotations)\n{1:F2}{2}\t{3:F3} px"' gold[2]' Math.Round(gold[1]' 2)' (char) 176' Math.Round(gold[0]' 3)); // calls' angle' distance                    // for pasting into Excel                  writer.WriteLine("\n{0} {1} {2:F2} {3:F2} {4:F3} {5:F3} {6} {7:F2} {8:F2} {9:F3} {10} {11:F2} {12:F2} {13:F3} {14}"'                      g1.Name'                    // rotated                      g2.Name'                    // into                      Math.Abs(Math.Round(full[1]' 2))' // |angle|                      Math.Round(full[1]' 2)'     // Full Search angle                      Math.Round(full[0]' 3)'     // Full Search distance                      Math.Round(init' 3)'        // Initial distance w/o any search                      full[2]'                    // Full Search iterations                      Math.Abs(Math.Round(best[1]' 2))' // |angle|                      Math.Round(best[1]' 2)'     // Bidirectional Hill Climb Search angle                      Math.Round(best[0]' 3)'     // Bidirectional Hill Climb Search distance                      pos[2] + neg[2] + 1'        // Bidirectional Hill Climb Search iterations                      Math.Abs(Math.Round(gold[1]' 2))' // |angle|                      Math.Round(gold[1]' 2)'     // Golden Section Search angle                      Math.Round(gold[0]' 3)'     // Golden Section Search distance                      gold[2]);                   // Golden Section Search iterations              }              catch (XmlException xml)              {                  Console.Write(xml.Message);                  success = false;              }              catch (Exception ex)              {                  Console.Write(ex.Message);                  success = false;              }              finally              {                  if (reader != null)                      reader.Close();                  if (writer != null)                      writer.Close();              }
Magic Number,WUW01,GeometricRecognizer,C:\repos\sixthsense_sixthsense\WUW01\classes\DollarRecognizer.cs,CreateRotationGraph,The following statement contains a magic number: try              {                  // read gesture file #1                  reader = new XmlTextReader(file1);                  reader.WhitespaceHandling = WhitespaceHandling.None;                  reader.MoveToContent();                  Gesture g1 = ReadGesture(reader);                  reader.Close();                    // read gesture file #2                  reader = new XmlTextReader(file2);                  reader.WhitespaceHandling = WhitespaceHandling.None;                  reader.MoveToContent();                  Gesture g2 = ReadGesture(reader);                    // create output file for results                  string outfile = String.Format("{0}\\{1}({2}' {3})_{4}.txt"' dir' similar ? "o" : "x"' g1.Name' g2.Name' Environment.TickCount);                  writer = new StreamWriter(outfile' false' Encoding.UTF8);                  writer.WriteLine("Rotated: {0} --> {1}. {2}' {3}\n"' g1.Name' g2.Name' DateTime.Now.ToLongDateString()' DateTime.Now.ToLongTimeString());                    // do the full 360 degree rotations                  double[] full = FullSearch(g1.Points' g2.Points' writer);                    // use bidirectional hill climbing to do it again                  double init = Utils.PathDistance(g1.Points' g2.Points); // initial distance                  double[] pos = HillClimbSearch(g1.Points' g2.Points' init' 1d);                  double[] neg = HillClimbSearch(g1.Points' g2.Points' init' -1d);                  double[] best = new double[3];                  best = (neg[0] < pos[0]) ? neg : pos; // min distance                  writer.WriteLine("\nHill Climb Search ({0} rotations)\n{1:F2}{2}\t{3:F3} px"' pos[2] + neg[2] + 1' Math.Round(best[1]' 2)' (char) 176' Math.Round(best[0]' 3)); // calls' angle' distance                    // use golden section search to do it yet again                  double[] gold = GoldenSectionSearch(                      g1.Points'              // to rotate                      g2.Points'              // to match                      Utils.Deg2Rad(-45.0)'   // lbound                      Utils.Deg2Rad(+45.0)'   // ubound                      Utils.Deg2Rad(2.0));    // threshold                  writer.WriteLine("\nGolden Section Search ({0} rotations)\n{1:F2}{2}\t{3:F3} px"' gold[2]' Math.Round(gold[1]' 2)' (char) 176' Math.Round(gold[0]' 3)); // calls' angle' distance                    // for pasting into Excel                  writer.WriteLine("\n{0} {1} {2:F2} {3:F2} {4:F3} {5:F3} {6} {7:F2} {8:F2} {9:F3} {10} {11:F2} {12:F2} {13:F3} {14}"'                      g1.Name'                    // rotated                      g2.Name'                    // into                      Math.Abs(Math.Round(full[1]' 2))' // |angle|                      Math.Round(full[1]' 2)'     // Full Search angle                      Math.Round(full[0]' 3)'     // Full Search distance                      Math.Round(init' 3)'        // Initial distance w/o any search                      full[2]'                    // Full Search iterations                      Math.Abs(Math.Round(best[1]' 2))' // |angle|                      Math.Round(best[1]' 2)'     // Bidirectional Hill Climb Search angle                      Math.Round(best[0]' 3)'     // Bidirectional Hill Climb Search distance                      pos[2] + neg[2] + 1'        // Bidirectional Hill Climb Search iterations                      Math.Abs(Math.Round(gold[1]' 2))' // |angle|                      Math.Round(gold[1]' 2)'     // Golden Section Search angle                      Math.Round(gold[0]' 3)'     // Golden Section Search distance                      gold[2]);                   // Golden Section Search iterations              }              catch (XmlException xml)              {                  Console.Write(xml.Message);                  success = false;              }              catch (Exception ex)              {                  Console.Write(ex.Message);                  success = false;              }              finally              {                  if (reader != null)                      reader.Close();                  if (writer != null)                      writer.Close();              }
Magic Number,WUW01,GeometricRecognizer,C:\repos\sixthsense_sixthsense\WUW01\classes\DollarRecognizer.cs,CreateRotationGraph,The following statement contains a magic number: try              {                  // read gesture file #1                  reader = new XmlTextReader(file1);                  reader.WhitespaceHandling = WhitespaceHandling.None;                  reader.MoveToContent();                  Gesture g1 = ReadGesture(reader);                  reader.Close();                    // read gesture file #2                  reader = new XmlTextReader(file2);                  reader.WhitespaceHandling = WhitespaceHandling.None;                  reader.MoveToContent();                  Gesture g2 = ReadGesture(reader);                    // create output file for results                  string outfile = String.Format("{0}\\{1}({2}' {3})_{4}.txt"' dir' similar ? "o" : "x"' g1.Name' g2.Name' Environment.TickCount);                  writer = new StreamWriter(outfile' false' Encoding.UTF8);                  writer.WriteLine("Rotated: {0} --> {1}. {2}' {3}\n"' g1.Name' g2.Name' DateTime.Now.ToLongDateString()' DateTime.Now.ToLongTimeString());                    // do the full 360 degree rotations                  double[] full = FullSearch(g1.Points' g2.Points' writer);                    // use bidirectional hill climbing to do it again                  double init = Utils.PathDistance(g1.Points' g2.Points); // initial distance                  double[] pos = HillClimbSearch(g1.Points' g2.Points' init' 1d);                  double[] neg = HillClimbSearch(g1.Points' g2.Points' init' -1d);                  double[] best = new double[3];                  best = (neg[0] < pos[0]) ? neg : pos; // min distance                  writer.WriteLine("\nHill Climb Search ({0} rotations)\n{1:F2}{2}\t{3:F3} px"' pos[2] + neg[2] + 1' Math.Round(best[1]' 2)' (char) 176' Math.Round(best[0]' 3)); // calls' angle' distance                    // use golden section search to do it yet again                  double[] gold = GoldenSectionSearch(                      g1.Points'              // to rotate                      g2.Points'              // to match                      Utils.Deg2Rad(-45.0)'   // lbound                      Utils.Deg2Rad(+45.0)'   // ubound                      Utils.Deg2Rad(2.0));    // threshold                  writer.WriteLine("\nGolden Section Search ({0} rotations)\n{1:F2}{2}\t{3:F3} px"' gold[2]' Math.Round(gold[1]' 2)' (char) 176' Math.Round(gold[0]' 3)); // calls' angle' distance                    // for pasting into Excel                  writer.WriteLine("\n{0} {1} {2:F2} {3:F2} {4:F3} {5:F3} {6} {7:F2} {8:F2} {9:F3} {10} {11:F2} {12:F2} {13:F3} {14}"'                      g1.Name'                    // rotated                      g2.Name'                    // into                      Math.Abs(Math.Round(full[1]' 2))' // |angle|                      Math.Round(full[1]' 2)'     // Full Search angle                      Math.Round(full[0]' 3)'     // Full Search distance                      Math.Round(init' 3)'        // Initial distance w/o any search                      full[2]'                    // Full Search iterations                      Math.Abs(Math.Round(best[1]' 2))' // |angle|                      Math.Round(best[1]' 2)'     // Bidirectional Hill Climb Search angle                      Math.Round(best[0]' 3)'     // Bidirectional Hill Climb Search distance                      pos[2] + neg[2] + 1'        // Bidirectional Hill Climb Search iterations                      Math.Abs(Math.Round(gold[1]' 2))' // |angle|                      Math.Round(gold[1]' 2)'     // Golden Section Search angle                      Math.Round(gold[0]' 3)'     // Golden Section Search distance                      gold[2]);                   // Golden Section Search iterations              }              catch (XmlException xml)              {                  Console.Write(xml.Message);                  success = false;              }              catch (Exception ex)              {                  Console.Write(ex.Message);                  success = false;              }              finally              {                  if (reader != null)                      reader.Close();                  if (writer != null)                      writer.Close();              }
Magic Number,WUW01,GeometricRecognizer,C:\repos\sixthsense_sixthsense\WUW01\classes\DollarRecognizer.cs,CreateRotationGraph,The following statement contains a magic number: try              {                  // read gesture file #1                  reader = new XmlTextReader(file1);                  reader.WhitespaceHandling = WhitespaceHandling.None;                  reader.MoveToContent();                  Gesture g1 = ReadGesture(reader);                  reader.Close();                    // read gesture file #2                  reader = new XmlTextReader(file2);                  reader.WhitespaceHandling = WhitespaceHandling.None;                  reader.MoveToContent();                  Gesture g2 = ReadGesture(reader);                    // create output file for results                  string outfile = String.Format("{0}\\{1}({2}' {3})_{4}.txt"' dir' similar ? "o" : "x"' g1.Name' g2.Name' Environment.TickCount);                  writer = new StreamWriter(outfile' false' Encoding.UTF8);                  writer.WriteLine("Rotated: {0} --> {1}. {2}' {3}\n"' g1.Name' g2.Name' DateTime.Now.ToLongDateString()' DateTime.Now.ToLongTimeString());                    // do the full 360 degree rotations                  double[] full = FullSearch(g1.Points' g2.Points' writer);                    // use bidirectional hill climbing to do it again                  double init = Utils.PathDistance(g1.Points' g2.Points); // initial distance                  double[] pos = HillClimbSearch(g1.Points' g2.Points' init' 1d);                  double[] neg = HillClimbSearch(g1.Points' g2.Points' init' -1d);                  double[] best = new double[3];                  best = (neg[0] < pos[0]) ? neg : pos; // min distance                  writer.WriteLine("\nHill Climb Search ({0} rotations)\n{1:F2}{2}\t{3:F3} px"' pos[2] + neg[2] + 1' Math.Round(best[1]' 2)' (char) 176' Math.Round(best[0]' 3)); // calls' angle' distance                    // use golden section search to do it yet again                  double[] gold = GoldenSectionSearch(                      g1.Points'              // to rotate                      g2.Points'              // to match                      Utils.Deg2Rad(-45.0)'   // lbound                      Utils.Deg2Rad(+45.0)'   // ubound                      Utils.Deg2Rad(2.0));    // threshold                  writer.WriteLine("\nGolden Section Search ({0} rotations)\n{1:F2}{2}\t{3:F3} px"' gold[2]' Math.Round(gold[1]' 2)' (char) 176' Math.Round(gold[0]' 3)); // calls' angle' distance                    // for pasting into Excel                  writer.WriteLine("\n{0} {1} {2:F2} {3:F2} {4:F3} {5:F3} {6} {7:F2} {8:F2} {9:F3} {10} {11:F2} {12:F2} {13:F3} {14}"'                      g1.Name'                    // rotated                      g2.Name'                    // into                      Math.Abs(Math.Round(full[1]' 2))' // |angle|                      Math.Round(full[1]' 2)'     // Full Search angle                      Math.Round(full[0]' 3)'     // Full Search distance                      Math.Round(init' 3)'        // Initial distance w/o any search                      full[2]'                    // Full Search iterations                      Math.Abs(Math.Round(best[1]' 2))' // |angle|                      Math.Round(best[1]' 2)'     // Bidirectional Hill Climb Search angle                      Math.Round(best[0]' 3)'     // Bidirectional Hill Climb Search distance                      pos[2] + neg[2] + 1'        // Bidirectional Hill Climb Search iterations                      Math.Abs(Math.Round(gold[1]' 2))' // |angle|                      Math.Round(gold[1]' 2)'     // Golden Section Search angle                      Math.Round(gold[0]' 3)'     // Golden Section Search distance                      gold[2]);                   // Golden Section Search iterations              }              catch (XmlException xml)              {                  Console.Write(xml.Message);                  success = false;              }              catch (Exception ex)              {                  Console.Write(ex.Message);                  success = false;              }              finally              {                  if (reader != null)                      reader.Close();                  if (writer != null)                      writer.Close();              }
Magic Number,WUW01,GeometricRecognizer,C:\repos\sixthsense_sixthsense\WUW01\classes\DollarRecognizer.cs,CreateRotationGraph,The following statement contains a magic number: try              {                  // read gesture file #1                  reader = new XmlTextReader(file1);                  reader.WhitespaceHandling = WhitespaceHandling.None;                  reader.MoveToContent();                  Gesture g1 = ReadGesture(reader);                  reader.Close();                    // read gesture file #2                  reader = new XmlTextReader(file2);                  reader.WhitespaceHandling = WhitespaceHandling.None;                  reader.MoveToContent();                  Gesture g2 = ReadGesture(reader);                    // create output file for results                  string outfile = String.Format("{0}\\{1}({2}' {3})_{4}.txt"' dir' similar ? "o" : "x"' g1.Name' g2.Name' Environment.TickCount);                  writer = new StreamWriter(outfile' false' Encoding.UTF8);                  writer.WriteLine("Rotated: {0} --> {1}. {2}' {3}\n"' g1.Name' g2.Name' DateTime.Now.ToLongDateString()' DateTime.Now.ToLongTimeString());                    // do the full 360 degree rotations                  double[] full = FullSearch(g1.Points' g2.Points' writer);                    // use bidirectional hill climbing to do it again                  double init = Utils.PathDistance(g1.Points' g2.Points); // initial distance                  double[] pos = HillClimbSearch(g1.Points' g2.Points' init' 1d);                  double[] neg = HillClimbSearch(g1.Points' g2.Points' init' -1d);                  double[] best = new double[3];                  best = (neg[0] < pos[0]) ? neg : pos; // min distance                  writer.WriteLine("\nHill Climb Search ({0} rotations)\n{1:F2}{2}\t{3:F3} px"' pos[2] + neg[2] + 1' Math.Round(best[1]' 2)' (char) 176' Math.Round(best[0]' 3)); // calls' angle' distance                    // use golden section search to do it yet again                  double[] gold = GoldenSectionSearch(                      g1.Points'              // to rotate                      g2.Points'              // to match                      Utils.Deg2Rad(-45.0)'   // lbound                      Utils.Deg2Rad(+45.0)'   // ubound                      Utils.Deg2Rad(2.0));    // threshold                  writer.WriteLine("\nGolden Section Search ({0} rotations)\n{1:F2}{2}\t{3:F3} px"' gold[2]' Math.Round(gold[1]' 2)' (char) 176' Math.Round(gold[0]' 3)); // calls' angle' distance                    // for pasting into Excel                  writer.WriteLine("\n{0} {1} {2:F2} {3:F2} {4:F3} {5:F3} {6} {7:F2} {8:F2} {9:F3} {10} {11:F2} {12:F2} {13:F3} {14}"'                      g1.Name'                    // rotated                      g2.Name'                    // into                      Math.Abs(Math.Round(full[1]' 2))' // |angle|                      Math.Round(full[1]' 2)'     // Full Search angle                      Math.Round(full[0]' 3)'     // Full Search distance                      Math.Round(init' 3)'        // Initial distance w/o any search                      full[2]'                    // Full Search iterations                      Math.Abs(Math.Round(best[1]' 2))' // |angle|                      Math.Round(best[1]' 2)'     // Bidirectional Hill Climb Search angle                      Math.Round(best[0]' 3)'     // Bidirectional Hill Climb Search distance                      pos[2] + neg[2] + 1'        // Bidirectional Hill Climb Search iterations                      Math.Abs(Math.Round(gold[1]' 2))' // |angle|                      Math.Round(gold[1]' 2)'     // Golden Section Search angle                      Math.Round(gold[0]' 3)'     // Golden Section Search distance                      gold[2]);                   // Golden Section Search iterations              }              catch (XmlException xml)              {                  Console.Write(xml.Message);                  success = false;              }              catch (Exception ex)              {                  Console.Write(ex.Message);                  success = false;              }              finally              {                  if (reader != null)                      reader.Close();                  if (writer != null)                      writer.Close();              }
Magic Number,WUW01,GeometricRecognizer,C:\repos\sixthsense_sixthsense\WUW01\classes\DollarRecognizer.cs,CreateRotationGraph,The following statement contains a magic number: try              {                  // read gesture file #1                  reader = new XmlTextReader(file1);                  reader.WhitespaceHandling = WhitespaceHandling.None;                  reader.MoveToContent();                  Gesture g1 = ReadGesture(reader);                  reader.Close();                    // read gesture file #2                  reader = new XmlTextReader(file2);                  reader.WhitespaceHandling = WhitespaceHandling.None;                  reader.MoveToContent();                  Gesture g2 = ReadGesture(reader);                    // create output file for results                  string outfile = String.Format("{0}\\{1}({2}' {3})_{4}.txt"' dir' similar ? "o" : "x"' g1.Name' g2.Name' Environment.TickCount);                  writer = new StreamWriter(outfile' false' Encoding.UTF8);                  writer.WriteLine("Rotated: {0} --> {1}. {2}' {3}\n"' g1.Name' g2.Name' DateTime.Now.ToLongDateString()' DateTime.Now.ToLongTimeString());                    // do the full 360 degree rotations                  double[] full = FullSearch(g1.Points' g2.Points' writer);                    // use bidirectional hill climbing to do it again                  double init = Utils.PathDistance(g1.Points' g2.Points); // initial distance                  double[] pos = HillClimbSearch(g1.Points' g2.Points' init' 1d);                  double[] neg = HillClimbSearch(g1.Points' g2.Points' init' -1d);                  double[] best = new double[3];                  best = (neg[0] < pos[0]) ? neg : pos; // min distance                  writer.WriteLine("\nHill Climb Search ({0} rotations)\n{1:F2}{2}\t{3:F3} px"' pos[2] + neg[2] + 1' Math.Round(best[1]' 2)' (char) 176' Math.Round(best[0]' 3)); // calls' angle' distance                    // use golden section search to do it yet again                  double[] gold = GoldenSectionSearch(                      g1.Points'              // to rotate                      g2.Points'              // to match                      Utils.Deg2Rad(-45.0)'   // lbound                      Utils.Deg2Rad(+45.0)'   // ubound                      Utils.Deg2Rad(2.0));    // threshold                  writer.WriteLine("\nGolden Section Search ({0} rotations)\n{1:F2}{2}\t{3:F3} px"' gold[2]' Math.Round(gold[1]' 2)' (char) 176' Math.Round(gold[0]' 3)); // calls' angle' distance                    // for pasting into Excel                  writer.WriteLine("\n{0} {1} {2:F2} {3:F2} {4:F3} {5:F3} {6} {7:F2} {8:F2} {9:F3} {10} {11:F2} {12:F2} {13:F3} {14}"'                      g1.Name'                    // rotated                      g2.Name'                    // into                      Math.Abs(Math.Round(full[1]' 2))' // |angle|                      Math.Round(full[1]' 2)'     // Full Search angle                      Math.Round(full[0]' 3)'     // Full Search distance                      Math.Round(init' 3)'        // Initial distance w/o any search                      full[2]'                    // Full Search iterations                      Math.Abs(Math.Round(best[1]' 2))' // |angle|                      Math.Round(best[1]' 2)'     // Bidirectional Hill Climb Search angle                      Math.Round(best[0]' 3)'     // Bidirectional Hill Climb Search distance                      pos[2] + neg[2] + 1'        // Bidirectional Hill Climb Search iterations                      Math.Abs(Math.Round(gold[1]' 2))' // |angle|                      Math.Round(gold[1]' 2)'     // Golden Section Search angle                      Math.Round(gold[0]' 3)'     // Golden Section Search distance                      gold[2]);                   // Golden Section Search iterations              }              catch (XmlException xml)              {                  Console.Write(xml.Message);                  success = false;              }              catch (Exception ex)              {                  Console.Write(ex.Message);                  success = false;              }              finally              {                  if (reader != null)                      reader.Close();                  if (writer != null)                      writer.Close();              }
Magic Number,WUW01,GeometricRecognizer,C:\repos\sixthsense_sixthsense\WUW01\classes\DollarRecognizer.cs,CreateRotationGraph,The following statement contains a magic number: try              {                  // read gesture file #1                  reader = new XmlTextReader(file1);                  reader.WhitespaceHandling = WhitespaceHandling.None;                  reader.MoveToContent();                  Gesture g1 = ReadGesture(reader);                  reader.Close();                    // read gesture file #2                  reader = new XmlTextReader(file2);                  reader.WhitespaceHandling = WhitespaceHandling.None;                  reader.MoveToContent();                  Gesture g2 = ReadGesture(reader);                    // create output file for results                  string outfile = String.Format("{0}\\{1}({2}' {3})_{4}.txt"' dir' similar ? "o" : "x"' g1.Name' g2.Name' Environment.TickCount);                  writer = new StreamWriter(outfile' false' Encoding.UTF8);                  writer.WriteLine("Rotated: {0} --> {1}. {2}' {3}\n"' g1.Name' g2.Name' DateTime.Now.ToLongDateString()' DateTime.Now.ToLongTimeString());                    // do the full 360 degree rotations                  double[] full = FullSearch(g1.Points' g2.Points' writer);                    // use bidirectional hill climbing to do it again                  double init = Utils.PathDistance(g1.Points' g2.Points); // initial distance                  double[] pos = HillClimbSearch(g1.Points' g2.Points' init' 1d);                  double[] neg = HillClimbSearch(g1.Points' g2.Points' init' -1d);                  double[] best = new double[3];                  best = (neg[0] < pos[0]) ? neg : pos; // min distance                  writer.WriteLine("\nHill Climb Search ({0} rotations)\n{1:F2}{2}\t{3:F3} px"' pos[2] + neg[2] + 1' Math.Round(best[1]' 2)' (char) 176' Math.Round(best[0]' 3)); // calls' angle' distance                    // use golden section search to do it yet again                  double[] gold = GoldenSectionSearch(                      g1.Points'              // to rotate                      g2.Points'              // to match                      Utils.Deg2Rad(-45.0)'   // lbound                      Utils.Deg2Rad(+45.0)'   // ubound                      Utils.Deg2Rad(2.0));    // threshold                  writer.WriteLine("\nGolden Section Search ({0} rotations)\n{1:F2}{2}\t{3:F3} px"' gold[2]' Math.Round(gold[1]' 2)' (char) 176' Math.Round(gold[0]' 3)); // calls' angle' distance                    // for pasting into Excel                  writer.WriteLine("\n{0} {1} {2:F2} {3:F2} {4:F3} {5:F3} {6} {7:F2} {8:F2} {9:F3} {10} {11:F2} {12:F2} {13:F3} {14}"'                      g1.Name'                    // rotated                      g2.Name'                    // into                      Math.Abs(Math.Round(full[1]' 2))' // |angle|                      Math.Round(full[1]' 2)'     // Full Search angle                      Math.Round(full[0]' 3)'     // Full Search distance                      Math.Round(init' 3)'        // Initial distance w/o any search                      full[2]'                    // Full Search iterations                      Math.Abs(Math.Round(best[1]' 2))' // |angle|                      Math.Round(best[1]' 2)'     // Bidirectional Hill Climb Search angle                      Math.Round(best[0]' 3)'     // Bidirectional Hill Climb Search distance                      pos[2] + neg[2] + 1'        // Bidirectional Hill Climb Search iterations                      Math.Abs(Math.Round(gold[1]' 2))' // |angle|                      Math.Round(gold[1]' 2)'     // Golden Section Search angle                      Math.Round(gold[0]' 3)'     // Golden Section Search distance                      gold[2]);                   // Golden Section Search iterations              }              catch (XmlException xml)              {                  Console.Write(xml.Message);                  success = false;              }              catch (Exception ex)              {                  Console.Write(ex.Message);                  success = false;              }              finally              {                  if (reader != null)                      reader.Close();                  if (writer != null)                      writer.Close();              }
Magic Number,WUW01,GeometricRecognizer,C:\repos\sixthsense_sixthsense\WUW01\classes\DollarRecognizer.cs,CreateRotationGraph,The following statement contains a magic number: try              {                  // read gesture file #1                  reader = new XmlTextReader(file1);                  reader.WhitespaceHandling = WhitespaceHandling.None;                  reader.MoveToContent();                  Gesture g1 = ReadGesture(reader);                  reader.Close();                    // read gesture file #2                  reader = new XmlTextReader(file2);                  reader.WhitespaceHandling = WhitespaceHandling.None;                  reader.MoveToContent();                  Gesture g2 = ReadGesture(reader);                    // create output file for results                  string outfile = String.Format("{0}\\{1}({2}' {3})_{4}.txt"' dir' similar ? "o" : "x"' g1.Name' g2.Name' Environment.TickCount);                  writer = new StreamWriter(outfile' false' Encoding.UTF8);                  writer.WriteLine("Rotated: {0} --> {1}. {2}' {3}\n"' g1.Name' g2.Name' DateTime.Now.ToLongDateString()' DateTime.Now.ToLongTimeString());                    // do the full 360 degree rotations                  double[] full = FullSearch(g1.Points' g2.Points' writer);                    // use bidirectional hill climbing to do it again                  double init = Utils.PathDistance(g1.Points' g2.Points); // initial distance                  double[] pos = HillClimbSearch(g1.Points' g2.Points' init' 1d);                  double[] neg = HillClimbSearch(g1.Points' g2.Points' init' -1d);                  double[] best = new double[3];                  best = (neg[0] < pos[0]) ? neg : pos; // min distance                  writer.WriteLine("\nHill Climb Search ({0} rotations)\n{1:F2}{2}\t{3:F3} px"' pos[2] + neg[2] + 1' Math.Round(best[1]' 2)' (char) 176' Math.Round(best[0]' 3)); // calls' angle' distance                    // use golden section search to do it yet again                  double[] gold = GoldenSectionSearch(                      g1.Points'              // to rotate                      g2.Points'              // to match                      Utils.Deg2Rad(-45.0)'   // lbound                      Utils.Deg2Rad(+45.0)'   // ubound                      Utils.Deg2Rad(2.0));    // threshold                  writer.WriteLine("\nGolden Section Search ({0} rotations)\n{1:F2}{2}\t{3:F3} px"' gold[2]' Math.Round(gold[1]' 2)' (char) 176' Math.Round(gold[0]' 3)); // calls' angle' distance                    // for pasting into Excel                  writer.WriteLine("\n{0} {1} {2:F2} {3:F2} {4:F3} {5:F3} {6} {7:F2} {8:F2} {9:F3} {10} {11:F2} {12:F2} {13:F3} {14}"'                      g1.Name'                    // rotated                      g2.Name'                    // into                      Math.Abs(Math.Round(full[1]' 2))' // |angle|                      Math.Round(full[1]' 2)'     // Full Search angle                      Math.Round(full[0]' 3)'     // Full Search distance                      Math.Round(init' 3)'        // Initial distance w/o any search                      full[2]'                    // Full Search iterations                      Math.Abs(Math.Round(best[1]' 2))' // |angle|                      Math.Round(best[1]' 2)'     // Bidirectional Hill Climb Search angle                      Math.Round(best[0]' 3)'     // Bidirectional Hill Climb Search distance                      pos[2] + neg[2] + 1'        // Bidirectional Hill Climb Search iterations                      Math.Abs(Math.Round(gold[1]' 2))' // |angle|                      Math.Round(gold[1]' 2)'     // Golden Section Search angle                      Math.Round(gold[0]' 3)'     // Golden Section Search distance                      gold[2]);                   // Golden Section Search iterations              }              catch (XmlException xml)              {                  Console.Write(xml.Message);                  success = false;              }              catch (Exception ex)              {                  Console.Write(ex.Message);                  success = false;              }              finally              {                  if (reader != null)                      reader.Close();                  if (writer != null)                      writer.Close();              }
Magic Number,WUW01,GeometricRecognizer,C:\repos\sixthsense_sixthsense\WUW01\classes\DollarRecognizer.cs,CreateRotationGraph,The following statement contains a magic number: try              {                  // read gesture file #1                  reader = new XmlTextReader(file1);                  reader.WhitespaceHandling = WhitespaceHandling.None;                  reader.MoveToContent();                  Gesture g1 = ReadGesture(reader);                  reader.Close();                    // read gesture file #2                  reader = new XmlTextReader(file2);                  reader.WhitespaceHandling = WhitespaceHandling.None;                  reader.MoveToContent();                  Gesture g2 = ReadGesture(reader);                    // create output file for results                  string outfile = String.Format("{0}\\{1}({2}' {3})_{4}.txt"' dir' similar ? "o" : "x"' g1.Name' g2.Name' Environment.TickCount);                  writer = new StreamWriter(outfile' false' Encoding.UTF8);                  writer.WriteLine("Rotated: {0} --> {1}. {2}' {3}\n"' g1.Name' g2.Name' DateTime.Now.ToLongDateString()' DateTime.Now.ToLongTimeString());                    // do the full 360 degree rotations                  double[] full = FullSearch(g1.Points' g2.Points' writer);                    // use bidirectional hill climbing to do it again                  double init = Utils.PathDistance(g1.Points' g2.Points); // initial distance                  double[] pos = HillClimbSearch(g1.Points' g2.Points' init' 1d);                  double[] neg = HillClimbSearch(g1.Points' g2.Points' init' -1d);                  double[] best = new double[3];                  best = (neg[0] < pos[0]) ? neg : pos; // min distance                  writer.WriteLine("\nHill Climb Search ({0} rotations)\n{1:F2}{2}\t{3:F3} px"' pos[2] + neg[2] + 1' Math.Round(best[1]' 2)' (char) 176' Math.Round(best[0]' 3)); // calls' angle' distance                    // use golden section search to do it yet again                  double[] gold = GoldenSectionSearch(                      g1.Points'              // to rotate                      g2.Points'              // to match                      Utils.Deg2Rad(-45.0)'   // lbound                      Utils.Deg2Rad(+45.0)'   // ubound                      Utils.Deg2Rad(2.0));    // threshold                  writer.WriteLine("\nGolden Section Search ({0} rotations)\n{1:F2}{2}\t{3:F3} px"' gold[2]' Math.Round(gold[1]' 2)' (char) 176' Math.Round(gold[0]' 3)); // calls' angle' distance                    // for pasting into Excel                  writer.WriteLine("\n{0} {1} {2:F2} {3:F2} {4:F3} {5:F3} {6} {7:F2} {8:F2} {9:F3} {10} {11:F2} {12:F2} {13:F3} {14}"'                      g1.Name'                    // rotated                      g2.Name'                    // into                      Math.Abs(Math.Round(full[1]' 2))' // |angle|                      Math.Round(full[1]' 2)'     // Full Search angle                      Math.Round(full[0]' 3)'     // Full Search distance                      Math.Round(init' 3)'        // Initial distance w/o any search                      full[2]'                    // Full Search iterations                      Math.Abs(Math.Round(best[1]' 2))' // |angle|                      Math.Round(best[1]' 2)'     // Bidirectional Hill Climb Search angle                      Math.Round(best[0]' 3)'     // Bidirectional Hill Climb Search distance                      pos[2] + neg[2] + 1'        // Bidirectional Hill Climb Search iterations                      Math.Abs(Math.Round(gold[1]' 2))' // |angle|                      Math.Round(gold[1]' 2)'     // Golden Section Search angle                      Math.Round(gold[0]' 3)'     // Golden Section Search distance                      gold[2]);                   // Golden Section Search iterations              }              catch (XmlException xml)              {                  Console.Write(xml.Message);                  success = false;              }              catch (Exception ex)              {                  Console.Write(ex.Message);                  success = false;              }              finally              {                  if (reader != null)                      reader.Close();                  if (writer != null)                      writer.Close();              }
Magic Number,WUW01,GeometricRecognizer,C:\repos\sixthsense_sixthsense\WUW01\classes\DollarRecognizer.cs,CreateRotationGraph,The following statement contains a magic number: try              {                  // read gesture file #1                  reader = new XmlTextReader(file1);                  reader.WhitespaceHandling = WhitespaceHandling.None;                  reader.MoveToContent();                  Gesture g1 = ReadGesture(reader);                  reader.Close();                    // read gesture file #2                  reader = new XmlTextReader(file2);                  reader.WhitespaceHandling = WhitespaceHandling.None;                  reader.MoveToContent();                  Gesture g2 = ReadGesture(reader);                    // create output file for results                  string outfile = String.Format("{0}\\{1}({2}' {3})_{4}.txt"' dir' similar ? "o" : "x"' g1.Name' g2.Name' Environment.TickCount);                  writer = new StreamWriter(outfile' false' Encoding.UTF8);                  writer.WriteLine("Rotated: {0} --> {1}. {2}' {3}\n"' g1.Name' g2.Name' DateTime.Now.ToLongDateString()' DateTime.Now.ToLongTimeString());                    // do the full 360 degree rotations                  double[] full = FullSearch(g1.Points' g2.Points' writer);                    // use bidirectional hill climbing to do it again                  double init = Utils.PathDistance(g1.Points' g2.Points); // initial distance                  double[] pos = HillClimbSearch(g1.Points' g2.Points' init' 1d);                  double[] neg = HillClimbSearch(g1.Points' g2.Points' init' -1d);                  double[] best = new double[3];                  best = (neg[0] < pos[0]) ? neg : pos; // min distance                  writer.WriteLine("\nHill Climb Search ({0} rotations)\n{1:F2}{2}\t{3:F3} px"' pos[2] + neg[2] + 1' Math.Round(best[1]' 2)' (char) 176' Math.Round(best[0]' 3)); // calls' angle' distance                    // use golden section search to do it yet again                  double[] gold = GoldenSectionSearch(                      g1.Points'              // to rotate                      g2.Points'              // to match                      Utils.Deg2Rad(-45.0)'   // lbound                      Utils.Deg2Rad(+45.0)'   // ubound                      Utils.Deg2Rad(2.0));    // threshold                  writer.WriteLine("\nGolden Section Search ({0} rotations)\n{1:F2}{2}\t{3:F3} px"' gold[2]' Math.Round(gold[1]' 2)' (char) 176' Math.Round(gold[0]' 3)); // calls' angle' distance                    // for pasting into Excel                  writer.WriteLine("\n{0} {1} {2:F2} {3:F2} {4:F3} {5:F3} {6} {7:F2} {8:F2} {9:F3} {10} {11:F2} {12:F2} {13:F3} {14}"'                      g1.Name'                    // rotated                      g2.Name'                    // into                      Math.Abs(Math.Round(full[1]' 2))' // |angle|                      Math.Round(full[1]' 2)'     // Full Search angle                      Math.Round(full[0]' 3)'     // Full Search distance                      Math.Round(init' 3)'        // Initial distance w/o any search                      full[2]'                    // Full Search iterations                      Math.Abs(Math.Round(best[1]' 2))' // |angle|                      Math.Round(best[1]' 2)'     // Bidirectional Hill Climb Search angle                      Math.Round(best[0]' 3)'     // Bidirectional Hill Climb Search distance                      pos[2] + neg[2] + 1'        // Bidirectional Hill Climb Search iterations                      Math.Abs(Math.Round(gold[1]' 2))' // |angle|                      Math.Round(gold[1]' 2)'     // Golden Section Search angle                      Math.Round(gold[0]' 3)'     // Golden Section Search distance                      gold[2]);                   // Golden Section Search iterations              }              catch (XmlException xml)              {                  Console.Write(xml.Message);                  success = false;              }              catch (Exception ex)              {                  Console.Write(ex.Message);                  success = false;              }              finally              {                  if (reader != null)                      reader.Close();                  if (writer != null)                      writer.Close();              }
Magic Number,WUW01,GeometricRecognizer,C:\repos\sixthsense_sixthsense\WUW01\classes\DollarRecognizer.cs,CreateRotationGraph,The following statement contains a magic number: try              {                  // read gesture file #1                  reader = new XmlTextReader(file1);                  reader.WhitespaceHandling = WhitespaceHandling.None;                  reader.MoveToContent();                  Gesture g1 = ReadGesture(reader);                  reader.Close();                    // read gesture file #2                  reader = new XmlTextReader(file2);                  reader.WhitespaceHandling = WhitespaceHandling.None;                  reader.MoveToContent();                  Gesture g2 = ReadGesture(reader);                    // create output file for results                  string outfile = String.Format("{0}\\{1}({2}' {3})_{4}.txt"' dir' similar ? "o" : "x"' g1.Name' g2.Name' Environment.TickCount);                  writer = new StreamWriter(outfile' false' Encoding.UTF8);                  writer.WriteLine("Rotated: {0} --> {1}. {2}' {3}\n"' g1.Name' g2.Name' DateTime.Now.ToLongDateString()' DateTime.Now.ToLongTimeString());                    // do the full 360 degree rotations                  double[] full = FullSearch(g1.Points' g2.Points' writer);                    // use bidirectional hill climbing to do it again                  double init = Utils.PathDistance(g1.Points' g2.Points); // initial distance                  double[] pos = HillClimbSearch(g1.Points' g2.Points' init' 1d);                  double[] neg = HillClimbSearch(g1.Points' g2.Points' init' -1d);                  double[] best = new double[3];                  best = (neg[0] < pos[0]) ? neg : pos; // min distance                  writer.WriteLine("\nHill Climb Search ({0} rotations)\n{1:F2}{2}\t{3:F3} px"' pos[2] + neg[2] + 1' Math.Round(best[1]' 2)' (char) 176' Math.Round(best[0]' 3)); // calls' angle' distance                    // use golden section search to do it yet again                  double[] gold = GoldenSectionSearch(                      g1.Points'              // to rotate                      g2.Points'              // to match                      Utils.Deg2Rad(-45.0)'   // lbound                      Utils.Deg2Rad(+45.0)'   // ubound                      Utils.Deg2Rad(2.0));    // threshold                  writer.WriteLine("\nGolden Section Search ({0} rotations)\n{1:F2}{2}\t{3:F3} px"' gold[2]' Math.Round(gold[1]' 2)' (char) 176' Math.Round(gold[0]' 3)); // calls' angle' distance                    // for pasting into Excel                  writer.WriteLine("\n{0} {1} {2:F2} {3:F2} {4:F3} {5:F3} {6} {7:F2} {8:F2} {9:F3} {10} {11:F2} {12:F2} {13:F3} {14}"'                      g1.Name'                    // rotated                      g2.Name'                    // into                      Math.Abs(Math.Round(full[1]' 2))' // |angle|                      Math.Round(full[1]' 2)'     // Full Search angle                      Math.Round(full[0]' 3)'     // Full Search distance                      Math.Round(init' 3)'        // Initial distance w/o any search                      full[2]'                    // Full Search iterations                      Math.Abs(Math.Round(best[1]' 2))' // |angle|                      Math.Round(best[1]' 2)'     // Bidirectional Hill Climb Search angle                      Math.Round(best[0]' 3)'     // Bidirectional Hill Climb Search distance                      pos[2] + neg[2] + 1'        // Bidirectional Hill Climb Search iterations                      Math.Abs(Math.Round(gold[1]' 2))' // |angle|                      Math.Round(gold[1]' 2)'     // Golden Section Search angle                      Math.Round(gold[0]' 3)'     // Golden Section Search distance                      gold[2]);                   // Golden Section Search iterations              }              catch (XmlException xml)              {                  Console.Write(xml.Message);                  success = false;              }              catch (Exception ex)              {                  Console.Write(ex.Message);                  success = false;              }              finally              {                  if (reader != null)                      reader.Close();                  if (writer != null)                      writer.Close();              }
Magic Number,WUW01,GeometricRecognizer,C:\repos\sixthsense_sixthsense\WUW01\classes\DollarRecognizer.cs,CreateRotationGraph,The following statement contains a magic number: try              {                  // read gesture file #1                  reader = new XmlTextReader(file1);                  reader.WhitespaceHandling = WhitespaceHandling.None;                  reader.MoveToContent();                  Gesture g1 = ReadGesture(reader);                  reader.Close();                    // read gesture file #2                  reader = new XmlTextReader(file2);                  reader.WhitespaceHandling = WhitespaceHandling.None;                  reader.MoveToContent();                  Gesture g2 = ReadGesture(reader);                    // create output file for results                  string outfile = String.Format("{0}\\{1}({2}' {3})_{4}.txt"' dir' similar ? "o" : "x"' g1.Name' g2.Name' Environment.TickCount);                  writer = new StreamWriter(outfile' false' Encoding.UTF8);                  writer.WriteLine("Rotated: {0} --> {1}. {2}' {3}\n"' g1.Name' g2.Name' DateTime.Now.ToLongDateString()' DateTime.Now.ToLongTimeString());                    // do the full 360 degree rotations                  double[] full = FullSearch(g1.Points' g2.Points' writer);                    // use bidirectional hill climbing to do it again                  double init = Utils.PathDistance(g1.Points' g2.Points); // initial distance                  double[] pos = HillClimbSearch(g1.Points' g2.Points' init' 1d);                  double[] neg = HillClimbSearch(g1.Points' g2.Points' init' -1d);                  double[] best = new double[3];                  best = (neg[0] < pos[0]) ? neg : pos; // min distance                  writer.WriteLine("\nHill Climb Search ({0} rotations)\n{1:F2}{2}\t{3:F3} px"' pos[2] + neg[2] + 1' Math.Round(best[1]' 2)' (char) 176' Math.Round(best[0]' 3)); // calls' angle' distance                    // use golden section search to do it yet again                  double[] gold = GoldenSectionSearch(                      g1.Points'              // to rotate                      g2.Points'              // to match                      Utils.Deg2Rad(-45.0)'   // lbound                      Utils.Deg2Rad(+45.0)'   // ubound                      Utils.Deg2Rad(2.0));    // threshold                  writer.WriteLine("\nGolden Section Search ({0} rotations)\n{1:F2}{2}\t{3:F3} px"' gold[2]' Math.Round(gold[1]' 2)' (char) 176' Math.Round(gold[0]' 3)); // calls' angle' distance                    // for pasting into Excel                  writer.WriteLine("\n{0} {1} {2:F2} {3:F2} {4:F3} {5:F3} {6} {7:F2} {8:F2} {9:F3} {10} {11:F2} {12:F2} {13:F3} {14}"'                      g1.Name'                    // rotated                      g2.Name'                    // into                      Math.Abs(Math.Round(full[1]' 2))' // |angle|                      Math.Round(full[1]' 2)'     // Full Search angle                      Math.Round(full[0]' 3)'     // Full Search distance                      Math.Round(init' 3)'        // Initial distance w/o any search                      full[2]'                    // Full Search iterations                      Math.Abs(Math.Round(best[1]' 2))' // |angle|                      Math.Round(best[1]' 2)'     // Bidirectional Hill Climb Search angle                      Math.Round(best[0]' 3)'     // Bidirectional Hill Climb Search distance                      pos[2] + neg[2] + 1'        // Bidirectional Hill Climb Search iterations                      Math.Abs(Math.Round(gold[1]' 2))' // |angle|                      Math.Round(gold[1]' 2)'     // Golden Section Search angle                      Math.Round(gold[0]' 3)'     // Golden Section Search distance                      gold[2]);                   // Golden Section Search iterations              }              catch (XmlException xml)              {                  Console.Write(xml.Message);                  success = false;              }              catch (Exception ex)              {                  Console.Write(ex.Message);                  success = false;              }              finally              {                  if (reader != null)                      reader.Close();                  if (writer != null)                      writer.Close();              }
Magic Number,WUW01,GeometricRecognizer,C:\repos\sixthsense_sixthsense\WUW01\classes\DollarRecognizer.cs,CreateRotationGraph,The following statement contains a magic number: try              {                  // read gesture file #1                  reader = new XmlTextReader(file1);                  reader.WhitespaceHandling = WhitespaceHandling.None;                  reader.MoveToContent();                  Gesture g1 = ReadGesture(reader);                  reader.Close();                    // read gesture file #2                  reader = new XmlTextReader(file2);                  reader.WhitespaceHandling = WhitespaceHandling.None;                  reader.MoveToContent();                  Gesture g2 = ReadGesture(reader);                    // create output file for results                  string outfile = String.Format("{0}\\{1}({2}' {3})_{4}.txt"' dir' similar ? "o" : "x"' g1.Name' g2.Name' Environment.TickCount);                  writer = new StreamWriter(outfile' false' Encoding.UTF8);                  writer.WriteLine("Rotated: {0} --> {1}. {2}' {3}\n"' g1.Name' g2.Name' DateTime.Now.ToLongDateString()' DateTime.Now.ToLongTimeString());                    // do the full 360 degree rotations                  double[] full = FullSearch(g1.Points' g2.Points' writer);                    // use bidirectional hill climbing to do it again                  double init = Utils.PathDistance(g1.Points' g2.Points); // initial distance                  double[] pos = HillClimbSearch(g1.Points' g2.Points' init' 1d);                  double[] neg = HillClimbSearch(g1.Points' g2.Points' init' -1d);                  double[] best = new double[3];                  best = (neg[0] < pos[0]) ? neg : pos; // min distance                  writer.WriteLine("\nHill Climb Search ({0} rotations)\n{1:F2}{2}\t{3:F3} px"' pos[2] + neg[2] + 1' Math.Round(best[1]' 2)' (char) 176' Math.Round(best[0]' 3)); // calls' angle' distance                    // use golden section search to do it yet again                  double[] gold = GoldenSectionSearch(                      g1.Points'              // to rotate                      g2.Points'              // to match                      Utils.Deg2Rad(-45.0)'   // lbound                      Utils.Deg2Rad(+45.0)'   // ubound                      Utils.Deg2Rad(2.0));    // threshold                  writer.WriteLine("\nGolden Section Search ({0} rotations)\n{1:F2}{2}\t{3:F3} px"' gold[2]' Math.Round(gold[1]' 2)' (char) 176' Math.Round(gold[0]' 3)); // calls' angle' distance                    // for pasting into Excel                  writer.WriteLine("\n{0} {1} {2:F2} {3:F2} {4:F3} {5:F3} {6} {7:F2} {8:F2} {9:F3} {10} {11:F2} {12:F2} {13:F3} {14}"'                      g1.Name'                    // rotated                      g2.Name'                    // into                      Math.Abs(Math.Round(full[1]' 2))' // |angle|                      Math.Round(full[1]' 2)'     // Full Search angle                      Math.Round(full[0]' 3)'     // Full Search distance                      Math.Round(init' 3)'        // Initial distance w/o any search                      full[2]'                    // Full Search iterations                      Math.Abs(Math.Round(best[1]' 2))' // |angle|                      Math.Round(best[1]' 2)'     // Bidirectional Hill Climb Search angle                      Math.Round(best[0]' 3)'     // Bidirectional Hill Climb Search distance                      pos[2] + neg[2] + 1'        // Bidirectional Hill Climb Search iterations                      Math.Abs(Math.Round(gold[1]' 2))' // |angle|                      Math.Round(gold[1]' 2)'     // Golden Section Search angle                      Math.Round(gold[0]' 3)'     // Golden Section Search distance                      gold[2]);                   // Golden Section Search iterations              }              catch (XmlException xml)              {                  Console.Write(xml.Message);                  success = false;              }              catch (Exception ex)              {                  Console.Write(ex.Message);                  success = false;              }              finally              {                  if (reader != null)                      reader.Close();                  if (writer != null)                      writer.Close();              }
Magic Number,WUW01,GeometricRecognizer,C:\repos\sixthsense_sixthsense\WUW01\classes\DollarRecognizer.cs,CreateRotationGraph,The following statement contains a magic number: try              {                  // read gesture file #1                  reader = new XmlTextReader(file1);                  reader.WhitespaceHandling = WhitespaceHandling.None;                  reader.MoveToContent();                  Gesture g1 = ReadGesture(reader);                  reader.Close();                    // read gesture file #2                  reader = new XmlTextReader(file2);                  reader.WhitespaceHandling = WhitespaceHandling.None;                  reader.MoveToContent();                  Gesture g2 = ReadGesture(reader);                    // create output file for results                  string outfile = String.Format("{0}\\{1}({2}' {3})_{4}.txt"' dir' similar ? "o" : "x"' g1.Name' g2.Name' Environment.TickCount);                  writer = new StreamWriter(outfile' false' Encoding.UTF8);                  writer.WriteLine("Rotated: {0} --> {1}. {2}' {3}\n"' g1.Name' g2.Name' DateTime.Now.ToLongDateString()' DateTime.Now.ToLongTimeString());                    // do the full 360 degree rotations                  double[] full = FullSearch(g1.Points' g2.Points' writer);                    // use bidirectional hill climbing to do it again                  double init = Utils.PathDistance(g1.Points' g2.Points); // initial distance                  double[] pos = HillClimbSearch(g1.Points' g2.Points' init' 1d);                  double[] neg = HillClimbSearch(g1.Points' g2.Points' init' -1d);                  double[] best = new double[3];                  best = (neg[0] < pos[0]) ? neg : pos; // min distance                  writer.WriteLine("\nHill Climb Search ({0} rotations)\n{1:F2}{2}\t{3:F3} px"' pos[2] + neg[2] + 1' Math.Round(best[1]' 2)' (char) 176' Math.Round(best[0]' 3)); // calls' angle' distance                    // use golden section search to do it yet again                  double[] gold = GoldenSectionSearch(                      g1.Points'              // to rotate                      g2.Points'              // to match                      Utils.Deg2Rad(-45.0)'   // lbound                      Utils.Deg2Rad(+45.0)'   // ubound                      Utils.Deg2Rad(2.0));    // threshold                  writer.WriteLine("\nGolden Section Search ({0} rotations)\n{1:F2}{2}\t{3:F3} px"' gold[2]' Math.Round(gold[1]' 2)' (char) 176' Math.Round(gold[0]' 3)); // calls' angle' distance                    // for pasting into Excel                  writer.WriteLine("\n{0} {1} {2:F2} {3:F2} {4:F3} {5:F3} {6} {7:F2} {8:F2} {9:F3} {10} {11:F2} {12:F2} {13:F3} {14}"'                      g1.Name'                    // rotated                      g2.Name'                    // into                      Math.Abs(Math.Round(full[1]' 2))' // |angle|                      Math.Round(full[1]' 2)'     // Full Search angle                      Math.Round(full[0]' 3)'     // Full Search distance                      Math.Round(init' 3)'        // Initial distance w/o any search                      full[2]'                    // Full Search iterations                      Math.Abs(Math.Round(best[1]' 2))' // |angle|                      Math.Round(best[1]' 2)'     // Bidirectional Hill Climb Search angle                      Math.Round(best[0]' 3)'     // Bidirectional Hill Climb Search distance                      pos[2] + neg[2] + 1'        // Bidirectional Hill Climb Search iterations                      Math.Abs(Math.Round(gold[1]' 2))' // |angle|                      Math.Round(gold[1]' 2)'     // Golden Section Search angle                      Math.Round(gold[0]' 3)'     // Golden Section Search distance                      gold[2]);                   // Golden Section Search iterations              }              catch (XmlException xml)              {                  Console.Write(xml.Message);                  success = false;              }              catch (Exception ex)              {                  Console.Write(ex.Message);                  success = false;              }              finally              {                  if (reader != null)                      reader.Close();                  if (writer != null)                      writer.Close();              }
Magic Number,WUW01,GeometricRecognizer,C:\repos\sixthsense_sixthsense\WUW01\classes\DollarRecognizer.cs,CreateRotationGraph,The following statement contains a magic number: try              {                  // read gesture file #1                  reader = new XmlTextReader(file1);                  reader.WhitespaceHandling = WhitespaceHandling.None;                  reader.MoveToContent();                  Gesture g1 = ReadGesture(reader);                  reader.Close();                    // read gesture file #2                  reader = new XmlTextReader(file2);                  reader.WhitespaceHandling = WhitespaceHandling.None;                  reader.MoveToContent();                  Gesture g2 = ReadGesture(reader);                    // create output file for results                  string outfile = String.Format("{0}\\{1}({2}' {3})_{4}.txt"' dir' similar ? "o" : "x"' g1.Name' g2.Name' Environment.TickCount);                  writer = new StreamWriter(outfile' false' Encoding.UTF8);                  writer.WriteLine("Rotated: {0} --> {1}. {2}' {3}\n"' g1.Name' g2.Name' DateTime.Now.ToLongDateString()' DateTime.Now.ToLongTimeString());                    // do the full 360 degree rotations                  double[] full = FullSearch(g1.Points' g2.Points' writer);                    // use bidirectional hill climbing to do it again                  double init = Utils.PathDistance(g1.Points' g2.Points); // initial distance                  double[] pos = HillClimbSearch(g1.Points' g2.Points' init' 1d);                  double[] neg = HillClimbSearch(g1.Points' g2.Points' init' -1d);                  double[] best = new double[3];                  best = (neg[0] < pos[0]) ? neg : pos; // min distance                  writer.WriteLine("\nHill Climb Search ({0} rotations)\n{1:F2}{2}\t{3:F3} px"' pos[2] + neg[2] + 1' Math.Round(best[1]' 2)' (char) 176' Math.Round(best[0]' 3)); // calls' angle' distance                    // use golden section search to do it yet again                  double[] gold = GoldenSectionSearch(                      g1.Points'              // to rotate                      g2.Points'              // to match                      Utils.Deg2Rad(-45.0)'   // lbound                      Utils.Deg2Rad(+45.0)'   // ubound                      Utils.Deg2Rad(2.0));    // threshold                  writer.WriteLine("\nGolden Section Search ({0} rotations)\n{1:F2}{2}\t{3:F3} px"' gold[2]' Math.Round(gold[1]' 2)' (char) 176' Math.Round(gold[0]' 3)); // calls' angle' distance                    // for pasting into Excel                  writer.WriteLine("\n{0} {1} {2:F2} {3:F2} {4:F3} {5:F3} {6} {7:F2} {8:F2} {9:F3} {10} {11:F2} {12:F2} {13:F3} {14}"'                      g1.Name'                    // rotated                      g2.Name'                    // into                      Math.Abs(Math.Round(full[1]' 2))' // |angle|                      Math.Round(full[1]' 2)'     // Full Search angle                      Math.Round(full[0]' 3)'     // Full Search distance                      Math.Round(init' 3)'        // Initial distance w/o any search                      full[2]'                    // Full Search iterations                      Math.Abs(Math.Round(best[1]' 2))' // |angle|                      Math.Round(best[1]' 2)'     // Bidirectional Hill Climb Search angle                      Math.Round(best[0]' 3)'     // Bidirectional Hill Climb Search distance                      pos[2] + neg[2] + 1'        // Bidirectional Hill Climb Search iterations                      Math.Abs(Math.Round(gold[1]' 2))' // |angle|                      Math.Round(gold[1]' 2)'     // Golden Section Search angle                      Math.Round(gold[0]' 3)'     // Golden Section Search distance                      gold[2]);                   // Golden Section Search iterations              }              catch (XmlException xml)              {                  Console.Write(xml.Message);                  success = false;              }              catch (Exception ex)              {                  Console.Write(ex.Message);                  success = false;              }              finally              {                  if (reader != null)                      reader.Close();                  if (writer != null)                      writer.Close();              }
Magic Number,WUW01,GeometricRecognizer,C:\repos\sixthsense_sixthsense\WUW01\classes\DollarRecognizer.cs,CreateRotationGraph,The following statement contains a magic number: try              {                  // read gesture file #1                  reader = new XmlTextReader(file1);                  reader.WhitespaceHandling = WhitespaceHandling.None;                  reader.MoveToContent();                  Gesture g1 = ReadGesture(reader);                  reader.Close();                    // read gesture file #2                  reader = new XmlTextReader(file2);                  reader.WhitespaceHandling = WhitespaceHandling.None;                  reader.MoveToContent();                  Gesture g2 = ReadGesture(reader);                    // create output file for results                  string outfile = String.Format("{0}\\{1}({2}' {3})_{4}.txt"' dir' similar ? "o" : "x"' g1.Name' g2.Name' Environment.TickCount);                  writer = new StreamWriter(outfile' false' Encoding.UTF8);                  writer.WriteLine("Rotated: {0} --> {1}. {2}' {3}\n"' g1.Name' g2.Name' DateTime.Now.ToLongDateString()' DateTime.Now.ToLongTimeString());                    // do the full 360 degree rotations                  double[] full = FullSearch(g1.Points' g2.Points' writer);                    // use bidirectional hill climbing to do it again                  double init = Utils.PathDistance(g1.Points' g2.Points); // initial distance                  double[] pos = HillClimbSearch(g1.Points' g2.Points' init' 1d);                  double[] neg = HillClimbSearch(g1.Points' g2.Points' init' -1d);                  double[] best = new double[3];                  best = (neg[0] < pos[0]) ? neg : pos; // min distance                  writer.WriteLine("\nHill Climb Search ({0} rotations)\n{1:F2}{2}\t{3:F3} px"' pos[2] + neg[2] + 1' Math.Round(best[1]' 2)' (char) 176' Math.Round(best[0]' 3)); // calls' angle' distance                    // use golden section search to do it yet again                  double[] gold = GoldenSectionSearch(                      g1.Points'              // to rotate                      g2.Points'              // to match                      Utils.Deg2Rad(-45.0)'   // lbound                      Utils.Deg2Rad(+45.0)'   // ubound                      Utils.Deg2Rad(2.0));    // threshold                  writer.WriteLine("\nGolden Section Search ({0} rotations)\n{1:F2}{2}\t{3:F3} px"' gold[2]' Math.Round(gold[1]' 2)' (char) 176' Math.Round(gold[0]' 3)); // calls' angle' distance                    // for pasting into Excel                  writer.WriteLine("\n{0} {1} {2:F2} {3:F2} {4:F3} {5:F3} {6} {7:F2} {8:F2} {9:F3} {10} {11:F2} {12:F2} {13:F3} {14}"'                      g1.Name'                    // rotated                      g2.Name'                    // into                      Math.Abs(Math.Round(full[1]' 2))' // |angle|                      Math.Round(full[1]' 2)'     // Full Search angle                      Math.Round(full[0]' 3)'     // Full Search distance                      Math.Round(init' 3)'        // Initial distance w/o any search                      full[2]'                    // Full Search iterations                      Math.Abs(Math.Round(best[1]' 2))' // |angle|                      Math.Round(best[1]' 2)'     // Bidirectional Hill Climb Search angle                      Math.Round(best[0]' 3)'     // Bidirectional Hill Climb Search distance                      pos[2] + neg[2] + 1'        // Bidirectional Hill Climb Search iterations                      Math.Abs(Math.Round(gold[1]' 2))' // |angle|                      Math.Round(gold[1]' 2)'     // Golden Section Search angle                      Math.Round(gold[0]' 3)'     // Golden Section Search distance                      gold[2]);                   // Golden Section Search iterations              }              catch (XmlException xml)              {                  Console.Write(xml.Message);                  success = false;              }              catch (Exception ex)              {                  Console.Write(ex.Message);                  success = false;              }              finally              {                  if (reader != null)                      reader.Close();                  if (writer != null)                      writer.Close();              }
Magic Number,WUW01,GeometricRecognizer,C:\repos\sixthsense_sixthsense\WUW01\classes\DollarRecognizer.cs,CreateRotationGraph,The following statement contains a magic number: try              {                  // read gesture file #1                  reader = new XmlTextReader(file1);                  reader.WhitespaceHandling = WhitespaceHandling.None;                  reader.MoveToContent();                  Gesture g1 = ReadGesture(reader);                  reader.Close();                    // read gesture file #2                  reader = new XmlTextReader(file2);                  reader.WhitespaceHandling = WhitespaceHandling.None;                  reader.MoveToContent();                  Gesture g2 = ReadGesture(reader);                    // create output file for results                  string outfile = String.Format("{0}\\{1}({2}' {3})_{4}.txt"' dir' similar ? "o" : "x"' g1.Name' g2.Name' Environment.TickCount);                  writer = new StreamWriter(outfile' false' Encoding.UTF8);                  writer.WriteLine("Rotated: {0} --> {1}. {2}' {3}\n"' g1.Name' g2.Name' DateTime.Now.ToLongDateString()' DateTime.Now.ToLongTimeString());                    // do the full 360 degree rotations                  double[] full = FullSearch(g1.Points' g2.Points' writer);                    // use bidirectional hill climbing to do it again                  double init = Utils.PathDistance(g1.Points' g2.Points); // initial distance                  double[] pos = HillClimbSearch(g1.Points' g2.Points' init' 1d);                  double[] neg = HillClimbSearch(g1.Points' g2.Points' init' -1d);                  double[] best = new double[3];                  best = (neg[0] < pos[0]) ? neg : pos; // min distance                  writer.WriteLine("\nHill Climb Search ({0} rotations)\n{1:F2}{2}\t{3:F3} px"' pos[2] + neg[2] + 1' Math.Round(best[1]' 2)' (char) 176' Math.Round(best[0]' 3)); // calls' angle' distance                    // use golden section search to do it yet again                  double[] gold = GoldenSectionSearch(                      g1.Points'              // to rotate                      g2.Points'              // to match                      Utils.Deg2Rad(-45.0)'   // lbound                      Utils.Deg2Rad(+45.0)'   // ubound                      Utils.Deg2Rad(2.0));    // threshold                  writer.WriteLine("\nGolden Section Search ({0} rotations)\n{1:F2}{2}\t{3:F3} px"' gold[2]' Math.Round(gold[1]' 2)' (char) 176' Math.Round(gold[0]' 3)); // calls' angle' distance                    // for pasting into Excel                  writer.WriteLine("\n{0} {1} {2:F2} {3:F2} {4:F3} {5:F3} {6} {7:F2} {8:F2} {9:F3} {10} {11:F2} {12:F2} {13:F3} {14}"'                      g1.Name'                    // rotated                      g2.Name'                    // into                      Math.Abs(Math.Round(full[1]' 2))' // |angle|                      Math.Round(full[1]' 2)'     // Full Search angle                      Math.Round(full[0]' 3)'     // Full Search distance                      Math.Round(init' 3)'        // Initial distance w/o any search                      full[2]'                    // Full Search iterations                      Math.Abs(Math.Round(best[1]' 2))' // |angle|                      Math.Round(best[1]' 2)'     // Bidirectional Hill Climb Search angle                      Math.Round(best[0]' 3)'     // Bidirectional Hill Climb Search distance                      pos[2] + neg[2] + 1'        // Bidirectional Hill Climb Search iterations                      Math.Abs(Math.Round(gold[1]' 2))' // |angle|                      Math.Round(gold[1]' 2)'     // Golden Section Search angle                      Math.Round(gold[0]' 3)'     // Golden Section Search distance                      gold[2]);                   // Golden Section Search iterations              }              catch (XmlException xml)              {                  Console.Write(xml.Message);                  success = false;              }              catch (Exception ex)              {                  Console.Write(ex.Message);                  success = false;              }              finally              {                  if (reader != null)                      reader.Close();                  if (writer != null)                      writer.Close();              }
Magic Number,WUW01,GeometricRecognizer,C:\repos\sixthsense_sixthsense\WUW01\classes\DollarRecognizer.cs,CreateRotationGraph,The following statement contains a magic number: try              {                  // read gesture file #1                  reader = new XmlTextReader(file1);                  reader.WhitespaceHandling = WhitespaceHandling.None;                  reader.MoveToContent();                  Gesture g1 = ReadGesture(reader);                  reader.Close();                    // read gesture file #2                  reader = new XmlTextReader(file2);                  reader.WhitespaceHandling = WhitespaceHandling.None;                  reader.MoveToContent();                  Gesture g2 = ReadGesture(reader);                    // create output file for results                  string outfile = String.Format("{0}\\{1}({2}' {3})_{4}.txt"' dir' similar ? "o" : "x"' g1.Name' g2.Name' Environment.TickCount);                  writer = new StreamWriter(outfile' false' Encoding.UTF8);                  writer.WriteLine("Rotated: {0} --> {1}. {2}' {3}\n"' g1.Name' g2.Name' DateTime.Now.ToLongDateString()' DateTime.Now.ToLongTimeString());                    // do the full 360 degree rotations                  double[] full = FullSearch(g1.Points' g2.Points' writer);                    // use bidirectional hill climbing to do it again                  double init = Utils.PathDistance(g1.Points' g2.Points); // initial distance                  double[] pos = HillClimbSearch(g1.Points' g2.Points' init' 1d);                  double[] neg = HillClimbSearch(g1.Points' g2.Points' init' -1d);                  double[] best = new double[3];                  best = (neg[0] < pos[0]) ? neg : pos; // min distance                  writer.WriteLine("\nHill Climb Search ({0} rotations)\n{1:F2}{2}\t{3:F3} px"' pos[2] + neg[2] + 1' Math.Round(best[1]' 2)' (char) 176' Math.Round(best[0]' 3)); // calls' angle' distance                    // use golden section search to do it yet again                  double[] gold = GoldenSectionSearch(                      g1.Points'              // to rotate                      g2.Points'              // to match                      Utils.Deg2Rad(-45.0)'   // lbound                      Utils.Deg2Rad(+45.0)'   // ubound                      Utils.Deg2Rad(2.0));    // threshold                  writer.WriteLine("\nGolden Section Search ({0} rotations)\n{1:F2}{2}\t{3:F3} px"' gold[2]' Math.Round(gold[1]' 2)' (char) 176' Math.Round(gold[0]' 3)); // calls' angle' distance                    // for pasting into Excel                  writer.WriteLine("\n{0} {1} {2:F2} {3:F2} {4:F3} {5:F3} {6} {7:F2} {8:F2} {9:F3} {10} {11:F2} {12:F2} {13:F3} {14}"'                      g1.Name'                    // rotated                      g2.Name'                    // into                      Math.Abs(Math.Round(full[1]' 2))' // |angle|                      Math.Round(full[1]' 2)'     // Full Search angle                      Math.Round(full[0]' 3)'     // Full Search distance                      Math.Round(init' 3)'        // Initial distance w/o any search                      full[2]'                    // Full Search iterations                      Math.Abs(Math.Round(best[1]' 2))' // |angle|                      Math.Round(best[1]' 2)'     // Bidirectional Hill Climb Search angle                      Math.Round(best[0]' 3)'     // Bidirectional Hill Climb Search distance                      pos[2] + neg[2] + 1'        // Bidirectional Hill Climb Search iterations                      Math.Abs(Math.Round(gold[1]' 2))' // |angle|                      Math.Round(gold[1]' 2)'     // Golden Section Search angle                      Math.Round(gold[0]' 3)'     // Golden Section Search distance                      gold[2]);                   // Golden Section Search iterations              }              catch (XmlException xml)              {                  Console.Write(xml.Message);                  success = false;              }              catch (Exception ex)              {                  Console.Write(ex.Message);                  success = false;              }              finally              {                  if (reader != null)                      reader.Close();                  if (writer != null)                      writer.Close();              }
Magic Number,WUW01,Utils,C:\repos\sixthsense_sixthsense\WUW01\classes\Utils.cs,AngleInRadians,The following statement contains a magic number: if (start.X != end.X)              {                  radians = Math.Atan2(end.Y - start.Y' end.X - start.X);              }              else // pure vertical movement              {                  if (end.Y < start.Y)                      radians = -Math.PI / 2.0; // -90 degrees is straight up                  else if (end.Y > start.Y)                      radians = Math.PI / 2.0; // 90 degrees is straight down              }
Magic Number,WUW01,Utils,C:\repos\sixthsense_sixthsense\WUW01\classes\Utils.cs,AngleInRadians,The following statement contains a magic number: if (start.X != end.X)              {                  radians = Math.Atan2(end.Y - start.Y' end.X - start.X);              }              else // pure vertical movement              {                  if (end.Y < start.Y)                      radians = -Math.PI / 2.0; // -90 degrees is straight up                  else if (end.Y > start.Y)                      radians = Math.PI / 2.0; // 90 degrees is straight down              }
Magic Number,WUW01,Utils,C:\repos\sixthsense_sixthsense\WUW01\classes\Utils.cs,AngleInRadians,The following statement contains a magic number: if (positiveOnly && radians < 0.0)              {                  radians += Math.PI * 2.0;              }
Magic Number,WUW01,ViewForm,C:\repos\sixthsense_sixthsense\WUW01\ViewForm.cs,ViewForm_Load,The following statement contains a magic number: if (_prototypes.Count == 0)  			{  				StrokeTabs.Visible = false;  				lblNone.Visible = true;  			}  			else  			{  				foreach (Gesture p in _prototypes)  				{  					TabPage page = new TabPage(p.Name);                      page.BackColor = SystemColors.Window;  					page.Paint += new PaintEventHandler(OnPaintPage);  					StrokeTabs.TabPages.Add(page);  				}  				int tabWidth = 0;  				for (int i = 0; i < StrokeTabs.TabCount; i++)  				{  					Rectangle r = StrokeTabs.GetTabRect(i);  					tabWidth += r.Width;  				}                  this.Width = Math.Max(Width' Math.Min(Screen.PrimaryScreen.WorkingArea.Width / 2' tabWidth + 20));              }
Magic Number,WUW01,ViewForm,C:\repos\sixthsense_sixthsense\WUW01\ViewForm.cs,ViewForm_Load,The following statement contains a magic number: if (_prototypes.Count == 0)  			{  				StrokeTabs.Visible = false;  				lblNone.Visible = true;  			}  			else  			{  				foreach (Gesture p in _prototypes)  				{  					TabPage page = new TabPage(p.Name);                      page.BackColor = SystemColors.Window;  					page.Paint += new PaintEventHandler(OnPaintPage);  					StrokeTabs.TabPages.Add(page);  				}  				int tabWidth = 0;  				for (int i = 0; i < StrokeTabs.TabCount; i++)  				{  					Rectangle r = StrokeTabs.GetTabRect(i);  					tabWidth += r.Width;  				}                  this.Width = Math.Max(Width' Math.Min(Screen.PrimaryScreen.WorkingArea.Width / 2' tabWidth + 20));              }
Magic Number,WUW01,ViewForm,C:\repos\sixthsense_sixthsense\WUW01\ViewForm.cs,ViewForm_Resize,The following statement contains a magic number: lblNone.Left = ClientRectangle.Width / 2 - lblNone.Width / 2;
Magic Number,WUW01,ViewForm,C:\repos\sixthsense_sixthsense\WUW01\ViewForm.cs,ViewForm_Resize,The following statement contains a magic number: lblNone.Left = ClientRectangle.Width / 2 - lblNone.Width / 2;
Magic Number,WUW01,ViewForm,C:\repos\sixthsense_sixthsense\WUW01\ViewForm.cs,ViewForm_Resize,The following statement contains a magic number: lblNone.Top = ClientRectangle.Height / 2 - lblNone.Height / 2;
Magic Number,WUW01,ViewForm,C:\repos\sixthsense_sixthsense\WUW01\ViewForm.cs,ViewForm_Resize,The following statement contains a magic number: lblNone.Top = ClientRectangle.Height / 2 - lblNone.Height / 2;
Magic Number,WUW01,ViewForm,C:\repos\sixthsense_sixthsense\WUW01\ViewForm.cs,InitializeComponent,The following statement contains a magic number: this.StrokeTabs.Location = new System.Drawing.Point(16' 16);
Magic Number,WUW01,ViewForm,C:\repos\sixthsense_sixthsense\WUW01\ViewForm.cs,InitializeComponent,The following statement contains a magic number: this.StrokeTabs.Location = new System.Drawing.Point(16' 16);
Magic Number,WUW01,ViewForm,C:\repos\sixthsense_sixthsense\WUW01\ViewForm.cs,InitializeComponent,The following statement contains a magic number: this.StrokeTabs.Size = new System.Drawing.Size(80' 72);
Magic Number,WUW01,ViewForm,C:\repos\sixthsense_sixthsense\WUW01\ViewForm.cs,InitializeComponent,The following statement contains a magic number: this.StrokeTabs.Size = new System.Drawing.Size(80' 72);
Magic Number,WUW01,ViewForm,C:\repos\sixthsense_sixthsense\WUW01\ViewForm.cs,InitializeComponent,The following statement contains a magic number: this.lblNone.Location = new System.Drawing.Point(56' 160);
Magic Number,WUW01,ViewForm,C:\repos\sixthsense_sixthsense\WUW01\ViewForm.cs,InitializeComponent,The following statement contains a magic number: this.lblNone.Location = new System.Drawing.Point(56' 160);
Magic Number,WUW01,ViewForm,C:\repos\sixthsense_sixthsense\WUW01\ViewForm.cs,InitializeComponent,The following statement contains a magic number: this.lblNone.Size = new System.Drawing.Size(239' 13);
Magic Number,WUW01,ViewForm,C:\repos\sixthsense_sixthsense\WUW01\ViewForm.cs,InitializeComponent,The following statement contains a magic number: this.lblNone.Size = new System.Drawing.Size(239' 13);
Magic Number,WUW01,ViewForm,C:\repos\sixthsense_sixthsense\WUW01\ViewForm.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleBaseSize = new System.Drawing.Size(5' 13);
Magic Number,WUW01,ViewForm,C:\repos\sixthsense_sixthsense\WUW01\ViewForm.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleBaseSize = new System.Drawing.Size(5' 13);
Magic Number,WUW01,ViewForm,C:\repos\sixthsense_sixthsense\WUW01\ViewForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(352' 326);
Magic Number,WUW01,ViewForm,C:\repos\sixthsense_sixthsense\WUW01\ViewForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(352' 326);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,btnExit_Click,The following statement contains a magic number: if (_touchlessMgr.MarkerCount >= 4)              {                  m.OnChange -= new EventHandler<MarkerEventArgs>(m_OnChange);                  n.OnChange -= new EventHandler<MarkerEventArgs>(n_OnChange);                  o.OnChange -= new EventHandler<MarkerEventArgs>(o_OnChange);                  p.OnChange -= new EventHandler<MarkerEventArgs>(p_OnChange);                  m = null;                  n = null;                  o = null;                  p = null;              }
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,ResetEnvironment,The following statement contains a magic number: labelM.Left = 35;
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,ResetEnvironment,The following statement contains a magic number: labelM.Top = 9;
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,ResetEnvironment,The following statement contains a magic number: labelN.Left = 35;
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,ResetEnvironment,The following statement contains a magic number: labelN.Top = 35;
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,ResetEnvironment,The following statement contains a magic number: labelO.Left = 9;
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,ResetEnvironment,The following statement contains a magic number: labelO.Top = 9;
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,ResetEnvironment,The following statement contains a magic number: labelP.Left = 9;
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,ResetEnvironment,The following statement contains a magic number: labelP.Top = 35;
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,WUW,The following statement contains a magic number: _points = new ArrayList(256);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,WUW_Load,The following statement contains a magic number: x1 = 200;
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,WUW_Load,The following statement contains a magic number: y1 = 200;
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,WUW_Load,The following statement contains a magic number: x2 = 840;
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,WUW_Load,The following statement contains a magic number: y2 = 680;
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,WUW_Load,The following statement contains a magic number: Theta = Math.Atan2((y2 - y1)' (x2 - x1)) - Math.Atan2(768' 1024);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,WUW_Load,The following statement contains a magic number: Theta = Math.Atan2((y2 - y1)' (x2 - x1)) - Math.Atan2(768' 1024);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,WUW_Load,The following statement contains a magic number: group1.Children.Add(new System.Windows.Media.ScaleTransform(distance / 1280' distance / 1280' 0' 0));
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,WUW_Load,The following statement contains a magic number: group1.Children.Add(new System.Windows.Media.ScaleTransform(distance / 1280' distance / 1280' 0' 0));
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,WUW_Load,The following statement contains a magic number: group1.Children.Add(new System.Windows.Media.RotateTransform(Theta / Math.PI * 180));
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,drawLatestImage,The following statement contains a magic number: if (_latestFrame != null)              {                  // Draw the latest image from the active camera                  e.Graphics.DrawImage(_latestFrame' 0' 0' pictureBoxDisplay.Width' pictureBoxDisplay.Height);                    // Draw the selection adornment                  if (_drawSelectionAdornment)                  {                      Pen penRed = new Pen(Brushes.Red' 1);                      e.Graphics.DrawEllipse(penRed' _markerCenter.X - _markerRadius' _markerCenter.Y - _markerRadius' 2 * _markerRadius' 2 * _markerRadius);                  }                    if (_latestFrameTimeSegment)                  {                      e.Graphics.FillRectangle(Brushes.LightGray' 0' 0' 640' 480);                  }                }
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,drawLatestImage,The following statement contains a magic number: if (_latestFrame != null)              {                  // Draw the latest image from the active camera                  e.Graphics.DrawImage(_latestFrame' 0' 0' pictureBoxDisplay.Width' pictureBoxDisplay.Height);                    // Draw the selection adornment                  if (_drawSelectionAdornment)                  {                      Pen penRed = new Pen(Brushes.Red' 1);                      e.Graphics.DrawEllipse(penRed' _markerCenter.X - _markerRadius' _markerCenter.Y - _markerRadius' 2 * _markerRadius' 2 * _markerRadius);                  }                    if (_latestFrameTimeSegment)                  {                      e.Graphics.FillRectangle(Brushes.LightGray' 0' 0' 640' 480);                  }                }
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,drawLatestImage,The following statement contains a magic number: if (_latestFrame != null)              {                  // Draw the latest image from the active camera                  e.Graphics.DrawImage(_latestFrame' 0' 0' pictureBoxDisplay.Width' pictureBoxDisplay.Height);                    // Draw the selection adornment                  if (_drawSelectionAdornment)                  {                      Pen penRed = new Pen(Brushes.Red' 1);                      e.Graphics.DrawEllipse(penRed' _markerCenter.X - _markerRadius' _markerCenter.Y - _markerRadius' 2 * _markerRadius' 2 * _markerRadius);                  }                    if (_latestFrameTimeSegment)                  {                      e.Graphics.FillRectangle(Brushes.LightGray' 0' 0' 640' 480);                  }                }
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,drawLatestImage,The following statement contains a magic number: if (_latestFrame != null)              {                  // Draw the latest image from the active camera                  e.Graphics.DrawImage(_latestFrame' 0' 0' pictureBoxDisplay.Width' pictureBoxDisplay.Height);                    // Draw the selection adornment                  if (_drawSelectionAdornment)                  {                      Pen penRed = new Pen(Brushes.Red' 1);                      e.Graphics.DrawEllipse(penRed' _markerCenter.X - _markerRadius' _markerCenter.Y - _markerRadius' 2 * _markerRadius' 2 * _markerRadius);                  }                    if (_latestFrameTimeSegment)                  {                      e.Graphics.FillRectangle(Brushes.LightGray' 0' 0' 640' 480);                  }                }
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,OnImageCaptured,The following statement contains a magic number: if (milliseconds >= 1000)              {                  this.BeginInvoke(new Action<double>(UpdateFPSInUI)' new object[] { _nFrameCount * 1000.0 / milliseconds });                  _nFrameCount = 0;                  _dtFrameLast = DateTime.Now;              }
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,OnImageCaptured,The following statement contains a magic number: if (milliseconds >= 1000)              {                  this.BeginInvoke(new Action<double>(UpdateFPSInUI)' new object[] { _nFrameCount * 1000.0 / milliseconds });                  _nFrameCount = 0;                  _dtFrameLast = DateTime.Now;              }
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,OnImageCaptured,The following statement contains a magic number: if (!_fAddingMarker)              {                  // Cause display update                  _latestFrame = args.Image;                  pictureBoxDisplay.Invalidate();                  //set time                  _latestFrameTime = DateTime.Now;              }              else if (_fAddingMarker && markerWait <= 5000)              {                  // Cause display update                  _latestFrame = args.Image;                  pictureBoxDisplay.Invalidate();                  //start timer by not setting time.                    if (markerWait % 1000 < 250)                  {                      _latestFrameTimeSegment = true;                  }                  else                  {                      _latestFrameTimeSegment = false;                  }              }
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,OnImageCaptured,The following statement contains a magic number: if (!_fAddingMarker)              {                  // Cause display update                  _latestFrame = args.Image;                  pictureBoxDisplay.Invalidate();                  //set time                  _latestFrameTime = DateTime.Now;              }              else if (_fAddingMarker && markerWait <= 5000)              {                  // Cause display update                  _latestFrame = args.Image;                  pictureBoxDisplay.Invalidate();                  //start timer by not setting time.                    if (markerWait % 1000 < 250)                  {                      _latestFrameTimeSegment = true;                  }                  else                  {                      _latestFrameTimeSegment = false;                  }              }
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,OnImageCaptured,The following statement contains a magic number: if (!_fAddingMarker)              {                  // Cause display update                  _latestFrame = args.Image;                  pictureBoxDisplay.Invalidate();                  //set time                  _latestFrameTime = DateTime.Now;              }              else if (_fAddingMarker && markerWait <= 5000)              {                  // Cause display update                  _latestFrame = args.Image;                  pictureBoxDisplay.Invalidate();                  //start timer by not setting time.                    if (markerWait % 1000 < 250)                  {                      _latestFrameTimeSegment = true;                  }                  else                  {                      _latestFrameTimeSegment = false;                  }              }
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,UpdateFPSInUI,The following statement contains a magic number: labelCameraFPSValue.Text = "" + Math.Round(fps' 2);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,comboBoxCameras_SelectedIndexChanged,The following statement contains a magic number: try              {                  Camera c = (Camera)comboBoxCameras.SelectedItem;                  c.OnImageCaptured += new EventHandler<CameraEventArgs>(OnImageCaptured);                  c.CaptureWidth = 320; //320; //640; //960;                  c.CaptureHeight = 240; //240; //480; //720;                  _touchlessMgr.CurrentCamera = c;                  _dtFrameLast = DateTime.Now;                    groupBoxCameraInfo.Enabled = true;                  groupBoxCameraInfo.Text = c.ToString();                    // Allow access to the marker mode once a camera has been activated                  // TODO: allow immediate access to the demo if we already have some markers set?                    pictureBoxDisplay.Paint += new PaintEventHandler(drawLatestImage);              }              catch (Exception ex)              {                  comboBoxCameras.Text = "Select A Camera";                  MessageBox.Show(ex.Message);              }
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,comboBoxCameras_SelectedIndexChanged,The following statement contains a magic number: try              {                  Camera c = (Camera)comboBoxCameras.SelectedItem;                  c.OnImageCaptured += new EventHandler<CameraEventArgs>(OnImageCaptured);                  c.CaptureWidth = 320; //320; //640; //960;                  c.CaptureHeight = 240; //240; //480; //720;                  _touchlessMgr.CurrentCamera = c;                  _dtFrameLast = DateTime.Now;                    groupBoxCameraInfo.Enabled = true;                  groupBoxCameraInfo.Text = c.ToString();                    // Allow access to the marker mode once a camera has been activated                  // TODO: allow immediate access to the demo if we already have some markers set?                    pictureBoxDisplay.Paint += new PaintEventHandler(drawLatestImage);              }              catch (Exception ex)              {                  comboBoxCameras.Text = "Select A Camera";                  MessageBox.Show(ex.Message);              }
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,buttonMarkerAdd_Click,The following statement contains a magic number: if (_touchlessMgr.MarkerCount < 4)              {                  _fAddingMarker = !_fAddingMarker;                  buttonMarkerAdd.Text = _fAddingMarker ? "Cancel Adding Marker" : "Add A New Marker";              }              else              {                  removeMarkers();              }
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,removeMarkers,The following statement contains a magic number: if (_touchlessMgr.MarkerCount >= 4)              {                    while (_touchlessMgr.MarkerCount != 0)                  {                      _touchlessMgr.RemoveMarker(0);                      comboBoxMarkers.Items.RemoveAt(0);                  }                    comboBoxMarkers.SelectedIndex = -1;                  comboBoxMarkers.Text = "Edit An Existing Marker";                  groupBoxMarkerControl.Enabled = false;                  groupBoxMarkerControl.Text = "No Marker Selected";                    comboBoxMarkers.Enabled = false;                    lblMarkerCount.Text = _touchlessMgr.MarkerCount.ToString();                    m.OnChange -= new EventHandler<MarkerEventArgs>(m_OnChange);                  n.OnChange -= new EventHandler<MarkerEventArgs>(n_OnChange);                  o.OnChange -= new EventHandler<MarkerEventArgs>(o_OnChange);                  p.OnChange -= new EventHandler<MarkerEventArgs>(p_OnChange);                  m = null;                  n = null;                  o = null;                  p = null;                    markerSaveArray = new float[12];                  _addedMarkerCount = 0;                  buttonMarkerAdd.Text = "Add Marker";              }
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,removeMarkers,The following statement contains a magic number: if (_touchlessMgr.MarkerCount >= 4)              {                    while (_touchlessMgr.MarkerCount != 0)                  {                      _touchlessMgr.RemoveMarker(0);                      comboBoxMarkers.Items.RemoveAt(0);                  }                    comboBoxMarkers.SelectedIndex = -1;                  comboBoxMarkers.Text = "Edit An Existing Marker";                  groupBoxMarkerControl.Enabled = false;                  groupBoxMarkerControl.Text = "No Marker Selected";                    comboBoxMarkers.Enabled = false;                    lblMarkerCount.Text = _touchlessMgr.MarkerCount.ToString();                    m.OnChange -= new EventHandler<MarkerEventArgs>(m_OnChange);                  n.OnChange -= new EventHandler<MarkerEventArgs>(n_OnChange);                  o.OnChange -= new EventHandler<MarkerEventArgs>(o_OnChange);                  p.OnChange -= new EventHandler<MarkerEventArgs>(p_OnChange);                  m = null;                  n = null;                  o = null;                  p = null;                    markerSaveArray = new float[12];                  _addedMarkerCount = 0;                  buttonMarkerAdd.Text = "Add Marker";              }
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,buttonSaveMarkers_Click,The following statement contains a magic number: if (_touchlessMgr.MarkerCount >= 4)              {                  //Write data from array to the file.                  TextWriter tw = new StreamWriter("markerSave.txt");                  foreach (float num in markerSaveArray)                  {                      tw.WriteLine(num.ToString());                  }                  tw.Close();                    // Write data from temp images to real images.                  new Bitmap("marker1temp.bmp").Save("marker1.bmp");                  new Bitmap("marker2temp.bmp").Save("marker2.bmp");                  new Bitmap("marker3temp.bmp").Save("marker3.bmp");                  new Bitmap("marker4temp.bmp").Save("marker4.bmp");                      TextWriter tw2 = new StreamWriter("markerThresholdSave.txt");                  tw2.WriteLine(m.Threshold);                  tw2.WriteLine(n.Threshold);                  tw2.WriteLine(o.Threshold);                  tw2.WriteLine(p.Threshold);                  tw2.Close();                }              else              {                  MessageBox.Show("No Marker Data Saved. Please note that 4 markers are required to save.");              }
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,buttonLoadMarkers_Click,The following statement contains a magic number: for (int x = 0; x < 12; x++)              {                  markerSaveArray[x] = (float)System.Convert.ToSingle(read.ReadLine());              }
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,buttonLoadMarkers_Click,The following statement contains a magic number: for (int count = 1; count <= 4; count++)              {                  // Add the marker                  Bitmap frame = new Bitmap("marker" + count + ".bmp");                  Marker newMarker = _touchlessMgr.AddMarker("Marker #" + ++_addedMarkerCount' frame' new Point(Convert.ToInt32(markerSaveArray[count * 3 - 3])' Convert.ToInt32(markerSaveArray[count * 3 - 2]))' markerSaveArray[count * 3 - 1]);                    lblMarkerCount.Text = _touchlessMgr.MarkerCount.ToString();                  comboBoxMarkers.Items.Add(newMarker);                    // Restore the app to its normal state and clear the selection area adorment                  _fAddingMarker = false;                  buttonMarkerAdd.Text = "Remove";                  _markerCenter = new Point();                  _drawSelectionAdornment = false;                  pictureBoxDisplay.Image = new Bitmap(pictureBoxDisplay.Width' pictureBoxDisplay.Height);                    // Enable the demo and marker editing                               comboBoxMarkers.Enabled = true;              }
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,buttonLoadMarkers_Click,The following statement contains a magic number: for (int count = 1; count <= 4; count++)              {                  // Add the marker                  Bitmap frame = new Bitmap("marker" + count + ".bmp");                  Marker newMarker = _touchlessMgr.AddMarker("Marker #" + ++_addedMarkerCount' frame' new Point(Convert.ToInt32(markerSaveArray[count * 3 - 3])' Convert.ToInt32(markerSaveArray[count * 3 - 2]))' markerSaveArray[count * 3 - 1]);                    lblMarkerCount.Text = _touchlessMgr.MarkerCount.ToString();                  comboBoxMarkers.Items.Add(newMarker);                    // Restore the app to its normal state and clear the selection area adorment                  _fAddingMarker = false;                  buttonMarkerAdd.Text = "Remove";                  _markerCenter = new Point();                  _drawSelectionAdornment = false;                  pictureBoxDisplay.Image = new Bitmap(pictureBoxDisplay.Width' pictureBoxDisplay.Height);                    // Enable the demo and marker editing                               comboBoxMarkers.Enabled = true;              }
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,buttonLoadMarkers_Click,The following statement contains a magic number: for (int count = 1; count <= 4; count++)              {                  // Add the marker                  Bitmap frame = new Bitmap("marker" + count + ".bmp");                  Marker newMarker = _touchlessMgr.AddMarker("Marker #" + ++_addedMarkerCount' frame' new Point(Convert.ToInt32(markerSaveArray[count * 3 - 3])' Convert.ToInt32(markerSaveArray[count * 3 - 2]))' markerSaveArray[count * 3 - 1]);                    lblMarkerCount.Text = _touchlessMgr.MarkerCount.ToString();                  comboBoxMarkers.Items.Add(newMarker);                    // Restore the app to its normal state and clear the selection area adorment                  _fAddingMarker = false;                  buttonMarkerAdd.Text = "Remove";                  _markerCenter = new Point();                  _drawSelectionAdornment = false;                  pictureBoxDisplay.Image = new Bitmap(pictureBoxDisplay.Width' pictureBoxDisplay.Height);                    // Enable the demo and marker editing                               comboBoxMarkers.Enabled = true;              }
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,buttonLoadMarkers_Click,The following statement contains a magic number: for (int count = 1; count <= 4; count++)              {                  // Add the marker                  Bitmap frame = new Bitmap("marker" + count + ".bmp");                  Marker newMarker = _touchlessMgr.AddMarker("Marker #" + ++_addedMarkerCount' frame' new Point(Convert.ToInt32(markerSaveArray[count * 3 - 3])' Convert.ToInt32(markerSaveArray[count * 3 - 2]))' markerSaveArray[count * 3 - 1]);                    lblMarkerCount.Text = _touchlessMgr.MarkerCount.ToString();                  comboBoxMarkers.Items.Add(newMarker);                    // Restore the app to its normal state and clear the selection area adorment                  _fAddingMarker = false;                  buttonMarkerAdd.Text = "Remove";                  _markerCenter = new Point();                  _drawSelectionAdornment = false;                  pictureBoxDisplay.Image = new Bitmap(pictureBoxDisplay.Width' pictureBoxDisplay.Height);                    // Enable the demo and marker editing                               comboBoxMarkers.Enabled = true;              }
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,buttonLoadMarkers_Click,The following statement contains a magic number: for (int count = 1; count <= 4; count++)              {                  // Add the marker                  Bitmap frame = new Bitmap("marker" + count + ".bmp");                  Marker newMarker = _touchlessMgr.AddMarker("Marker #" + ++_addedMarkerCount' frame' new Point(Convert.ToInt32(markerSaveArray[count * 3 - 3])' Convert.ToInt32(markerSaveArray[count * 3 - 2]))' markerSaveArray[count * 3 - 1]);                    lblMarkerCount.Text = _touchlessMgr.MarkerCount.ToString();                  comboBoxMarkers.Items.Add(newMarker);                    // Restore the app to its normal state and clear the selection area adorment                  _fAddingMarker = false;                  buttonMarkerAdd.Text = "Remove";                  _markerCenter = new Point();                  _drawSelectionAdornment = false;                  pictureBoxDisplay.Image = new Bitmap(pictureBoxDisplay.Width' pictureBoxDisplay.Height);                    // Enable the demo and marker editing                               comboBoxMarkers.Enabled = true;              }
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,buttonLoadMarkers_Click,The following statement contains a magic number: for (int count = 1; count <= 4; count++)              {                  // Add the marker                  Bitmap frame = new Bitmap("marker" + count + ".bmp");                  Marker newMarker = _touchlessMgr.AddMarker("Marker #" + ++_addedMarkerCount' frame' new Point(Convert.ToInt32(markerSaveArray[count * 3 - 3])' Convert.ToInt32(markerSaveArray[count * 3 - 2]))' markerSaveArray[count * 3 - 1]);                    lblMarkerCount.Text = _touchlessMgr.MarkerCount.ToString();                  comboBoxMarkers.Items.Add(newMarker);                    // Restore the app to its normal state and clear the selection area adorment                  _fAddingMarker = false;                  buttonMarkerAdd.Text = "Remove";                  _markerCenter = new Point();                  _drawSelectionAdornment = false;                  pictureBoxDisplay.Image = new Bitmap(pictureBoxDisplay.Width' pictureBoxDisplay.Height);                    // Enable the demo and marker editing                               comboBoxMarkers.Enabled = true;              }
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,buttonLoadMarkers_Click,The following statement contains a magic number: string[] markerThresholdSaveArray = new string[4];
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,buttonLoadMarkers_Click,The following statement contains a magic number: for (int x = 0; x < 4; x++)              {                  markerThresholdSaveArray[x] = read2.ReadLine();              }
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,buttonLoadMarkers_Click,The following statement contains a magic number: _touchlessMgr.Markers.ElementAt(2).Threshold = Convert.ToInt32(markerThresholdSaveArray[2]);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,buttonLoadMarkers_Click,The following statement contains a magic number: _touchlessMgr.Markers.ElementAt(2).Threshold = Convert.ToInt32(markerThresholdSaveArray[2]);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,buttonLoadMarkers_Click,The following statement contains a magic number: _touchlessMgr.Markers.ElementAt(3).Threshold = Convert.ToInt32(markerThresholdSaveArray[3]);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,buttonLoadMarkers_Click,The following statement contains a magic number: _touchlessMgr.Markers.ElementAt(3).Threshold = Convert.ToInt32(markerThresholdSaveArray[3]);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,pictureBoxDisplay_MouseUp,The following statement contains a magic number: if (_fAddingMarker && !_markerCenter.IsEmpty)              {                  int dx = e.X - _markerCenter.X;                  int dy = e.Y - _markerCenter.Y;                  _markerRadius = (float)Math.Sqrt(dx * dx + dy * dy);                    // Adjust for the image/display scaling (assumes proportional scaling)                  _markerCenter.X = (_markerCenter.X * _latestFrame.Width) / pictureBoxDisplay.Width;                  _markerCenter.Y = (_markerCenter.Y * _latestFrame.Height) / pictureBoxDisplay.Height;                  _markerRadius = (_markerRadius * _latestFrame.Height) / pictureBoxDisplay.Height;                    // Add the marker                  Marker newMarker = _touchlessMgr.AddMarker("Marker #" + ++_addedMarkerCount' (Bitmap)_latestFrame' _markerCenter' _markerRadius);                  lblMarkerCount.Text = _touchlessMgr.MarkerCount.ToString();                  comboBoxMarkers.Items.Add(newMarker);                    //save the temp images and temp array.                  Bitmap frame = (Bitmap)_latestFrame;                  frame.Save("marker" + _addedMarkerCount + "temp.bmp");                  markerSaveArray[_addedMarkerCount * 3 - 3] = _markerCenter.X;                  markerSaveArray[_addedMarkerCount * 3 - 2] = _markerCenter.Y;                  markerSaveArray[_addedMarkerCount * 3 - 1] = _markerRadius;                    // Restore the app to its normal state and clear the selection area adorment                  //Liyan Chang.                  //Only if there are four.                    _markerCenter = new Point(); //remove the old point                  _drawSelectionAdornment = false;                  pictureBoxDisplay.Invalidate(); //to clear up ellipses.                    if (_touchlessMgr.MarkerCount == 4)                  {                      _fAddingMarker = false;                      buttonMarkerAdd.Text = "Add A New Marker";                      pictureBoxDisplay.Image = new Bitmap(pictureBoxDisplay.Width' pictureBoxDisplay.Height);                        // Enable the demo and marker editing                                   comboBoxMarkers.Enabled = true;                  }                    //checks if there are 4 markers and name them                  nameMarkers();                                }
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,pictureBoxDisplay_MouseUp,The following statement contains a magic number: if (_fAddingMarker && !_markerCenter.IsEmpty)              {                  int dx = e.X - _markerCenter.X;                  int dy = e.Y - _markerCenter.Y;                  _markerRadius = (float)Math.Sqrt(dx * dx + dy * dy);                    // Adjust for the image/display scaling (assumes proportional scaling)                  _markerCenter.X = (_markerCenter.X * _latestFrame.Width) / pictureBoxDisplay.Width;                  _markerCenter.Y = (_markerCenter.Y * _latestFrame.Height) / pictureBoxDisplay.Height;                  _markerRadius = (_markerRadius * _latestFrame.Height) / pictureBoxDisplay.Height;                    // Add the marker                  Marker newMarker = _touchlessMgr.AddMarker("Marker #" + ++_addedMarkerCount' (Bitmap)_latestFrame' _markerCenter' _markerRadius);                  lblMarkerCount.Text = _touchlessMgr.MarkerCount.ToString();                  comboBoxMarkers.Items.Add(newMarker);                    //save the temp images and temp array.                  Bitmap frame = (Bitmap)_latestFrame;                  frame.Save("marker" + _addedMarkerCount + "temp.bmp");                  markerSaveArray[_addedMarkerCount * 3 - 3] = _markerCenter.X;                  markerSaveArray[_addedMarkerCount * 3 - 2] = _markerCenter.Y;                  markerSaveArray[_addedMarkerCount * 3 - 1] = _markerRadius;                    // Restore the app to its normal state and clear the selection area adorment                  //Liyan Chang.                  //Only if there are four.                    _markerCenter = new Point(); //remove the old point                  _drawSelectionAdornment = false;                  pictureBoxDisplay.Invalidate(); //to clear up ellipses.                    if (_touchlessMgr.MarkerCount == 4)                  {                      _fAddingMarker = false;                      buttonMarkerAdd.Text = "Add A New Marker";                      pictureBoxDisplay.Image = new Bitmap(pictureBoxDisplay.Width' pictureBoxDisplay.Height);                        // Enable the demo and marker editing                                   comboBoxMarkers.Enabled = true;                  }                    //checks if there are 4 markers and name them                  nameMarkers();                                }
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,pictureBoxDisplay_MouseUp,The following statement contains a magic number: if (_fAddingMarker && !_markerCenter.IsEmpty)              {                  int dx = e.X - _markerCenter.X;                  int dy = e.Y - _markerCenter.Y;                  _markerRadius = (float)Math.Sqrt(dx * dx + dy * dy);                    // Adjust for the image/display scaling (assumes proportional scaling)                  _markerCenter.X = (_markerCenter.X * _latestFrame.Width) / pictureBoxDisplay.Width;                  _markerCenter.Y = (_markerCenter.Y * _latestFrame.Height) / pictureBoxDisplay.Height;                  _markerRadius = (_markerRadius * _latestFrame.Height) / pictureBoxDisplay.Height;                    // Add the marker                  Marker newMarker = _touchlessMgr.AddMarker("Marker #" + ++_addedMarkerCount' (Bitmap)_latestFrame' _markerCenter' _markerRadius);                  lblMarkerCount.Text = _touchlessMgr.MarkerCount.ToString();                  comboBoxMarkers.Items.Add(newMarker);                    //save the temp images and temp array.                  Bitmap frame = (Bitmap)_latestFrame;                  frame.Save("marker" + _addedMarkerCount + "temp.bmp");                  markerSaveArray[_addedMarkerCount * 3 - 3] = _markerCenter.X;                  markerSaveArray[_addedMarkerCount * 3 - 2] = _markerCenter.Y;                  markerSaveArray[_addedMarkerCount * 3 - 1] = _markerRadius;                    // Restore the app to its normal state and clear the selection area adorment                  //Liyan Chang.                  //Only if there are four.                    _markerCenter = new Point(); //remove the old point                  _drawSelectionAdornment = false;                  pictureBoxDisplay.Invalidate(); //to clear up ellipses.                    if (_touchlessMgr.MarkerCount == 4)                  {                      _fAddingMarker = false;                      buttonMarkerAdd.Text = "Add A New Marker";                      pictureBoxDisplay.Image = new Bitmap(pictureBoxDisplay.Width' pictureBoxDisplay.Height);                        // Enable the demo and marker editing                                   comboBoxMarkers.Enabled = true;                  }                    //checks if there are 4 markers and name them                  nameMarkers();                                }
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,pictureBoxDisplay_MouseUp,The following statement contains a magic number: if (_fAddingMarker && !_markerCenter.IsEmpty)              {                  int dx = e.X - _markerCenter.X;                  int dy = e.Y - _markerCenter.Y;                  _markerRadius = (float)Math.Sqrt(dx * dx + dy * dy);                    // Adjust for the image/display scaling (assumes proportional scaling)                  _markerCenter.X = (_markerCenter.X * _latestFrame.Width) / pictureBoxDisplay.Width;                  _markerCenter.Y = (_markerCenter.Y * _latestFrame.Height) / pictureBoxDisplay.Height;                  _markerRadius = (_markerRadius * _latestFrame.Height) / pictureBoxDisplay.Height;                    // Add the marker                  Marker newMarker = _touchlessMgr.AddMarker("Marker #" + ++_addedMarkerCount' (Bitmap)_latestFrame' _markerCenter' _markerRadius);                  lblMarkerCount.Text = _touchlessMgr.MarkerCount.ToString();                  comboBoxMarkers.Items.Add(newMarker);                    //save the temp images and temp array.                  Bitmap frame = (Bitmap)_latestFrame;                  frame.Save("marker" + _addedMarkerCount + "temp.bmp");                  markerSaveArray[_addedMarkerCount * 3 - 3] = _markerCenter.X;                  markerSaveArray[_addedMarkerCount * 3 - 2] = _markerCenter.Y;                  markerSaveArray[_addedMarkerCount * 3 - 1] = _markerRadius;                    // Restore the app to its normal state and clear the selection area adorment                  //Liyan Chang.                  //Only if there are four.                    _markerCenter = new Point(); //remove the old point                  _drawSelectionAdornment = false;                  pictureBoxDisplay.Invalidate(); //to clear up ellipses.                    if (_touchlessMgr.MarkerCount == 4)                  {                      _fAddingMarker = false;                      buttonMarkerAdd.Text = "Add A New Marker";                      pictureBoxDisplay.Image = new Bitmap(pictureBoxDisplay.Width' pictureBoxDisplay.Height);                        // Enable the demo and marker editing                                   comboBoxMarkers.Enabled = true;                  }                    //checks if there are 4 markers and name them                  nameMarkers();                                }
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,pictureBoxDisplay_MouseUp,The following statement contains a magic number: if (_fAddingMarker && !_markerCenter.IsEmpty)              {                  int dx = e.X - _markerCenter.X;                  int dy = e.Y - _markerCenter.Y;                  _markerRadius = (float)Math.Sqrt(dx * dx + dy * dy);                    // Adjust for the image/display scaling (assumes proportional scaling)                  _markerCenter.X = (_markerCenter.X * _latestFrame.Width) / pictureBoxDisplay.Width;                  _markerCenter.Y = (_markerCenter.Y * _latestFrame.Height) / pictureBoxDisplay.Height;                  _markerRadius = (_markerRadius * _latestFrame.Height) / pictureBoxDisplay.Height;                    // Add the marker                  Marker newMarker = _touchlessMgr.AddMarker("Marker #" + ++_addedMarkerCount' (Bitmap)_latestFrame' _markerCenter' _markerRadius);                  lblMarkerCount.Text = _touchlessMgr.MarkerCount.ToString();                  comboBoxMarkers.Items.Add(newMarker);                    //save the temp images and temp array.                  Bitmap frame = (Bitmap)_latestFrame;                  frame.Save("marker" + _addedMarkerCount + "temp.bmp");                  markerSaveArray[_addedMarkerCount * 3 - 3] = _markerCenter.X;                  markerSaveArray[_addedMarkerCount * 3 - 2] = _markerCenter.Y;                  markerSaveArray[_addedMarkerCount * 3 - 1] = _markerRadius;                    // Restore the app to its normal state and clear the selection area adorment                  //Liyan Chang.                  //Only if there are four.                    _markerCenter = new Point(); //remove the old point                  _drawSelectionAdornment = false;                  pictureBoxDisplay.Invalidate(); //to clear up ellipses.                    if (_touchlessMgr.MarkerCount == 4)                  {                      _fAddingMarker = false;                      buttonMarkerAdd.Text = "Add A New Marker";                      pictureBoxDisplay.Image = new Bitmap(pictureBoxDisplay.Width' pictureBoxDisplay.Height);                        // Enable the demo and marker editing                                   comboBoxMarkers.Enabled = true;                  }                    //checks if there are 4 markers and name them                  nameMarkers();                                }
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,pictureBoxDisplay_MouseUp,The following statement contains a magic number: if (_fAddingMarker && !_markerCenter.IsEmpty)              {                  int dx = e.X - _markerCenter.X;                  int dy = e.Y - _markerCenter.Y;                  _markerRadius = (float)Math.Sqrt(dx * dx + dy * dy);                    // Adjust for the image/display scaling (assumes proportional scaling)                  _markerCenter.X = (_markerCenter.X * _latestFrame.Width) / pictureBoxDisplay.Width;                  _markerCenter.Y = (_markerCenter.Y * _latestFrame.Height) / pictureBoxDisplay.Height;                  _markerRadius = (_markerRadius * _latestFrame.Height) / pictureBoxDisplay.Height;                    // Add the marker                  Marker newMarker = _touchlessMgr.AddMarker("Marker #" + ++_addedMarkerCount' (Bitmap)_latestFrame' _markerCenter' _markerRadius);                  lblMarkerCount.Text = _touchlessMgr.MarkerCount.ToString();                  comboBoxMarkers.Items.Add(newMarker);                    //save the temp images and temp array.                  Bitmap frame = (Bitmap)_latestFrame;                  frame.Save("marker" + _addedMarkerCount + "temp.bmp");                  markerSaveArray[_addedMarkerCount * 3 - 3] = _markerCenter.X;                  markerSaveArray[_addedMarkerCount * 3 - 2] = _markerCenter.Y;                  markerSaveArray[_addedMarkerCount * 3 - 1] = _markerRadius;                    // Restore the app to its normal state and clear the selection area adorment                  //Liyan Chang.                  //Only if there are four.                    _markerCenter = new Point(); //remove the old point                  _drawSelectionAdornment = false;                  pictureBoxDisplay.Invalidate(); //to clear up ellipses.                    if (_touchlessMgr.MarkerCount == 4)                  {                      _fAddingMarker = false;                      buttonMarkerAdd.Text = "Add A New Marker";                      pictureBoxDisplay.Image = new Bitmap(pictureBoxDisplay.Width' pictureBoxDisplay.Height);                        // Enable the demo and marker editing                                   comboBoxMarkers.Enabled = true;                  }                    //checks if there are 4 markers and name them                  nameMarkers();                                }
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,nameMarkers,The following statement contains a magic number: if (_touchlessMgr.MarkerCount == 4)              {                  m = _touchlessMgr.Markers.ElementAt(0);                  n = _touchlessMgr.Markers.ElementAt(1);                  o = _touchlessMgr.Markers.ElementAt(2);                  p = _touchlessMgr.Markers.ElementAt(3);                    m.OnChange += new EventHandler<MarkerEventArgs>(m_OnChange);                  n.OnChange += new EventHandler<MarkerEventArgs>(n_OnChange);                  o.OnChange += new EventHandler<MarkerEventArgs>(o_OnChange);                  p.OnChange += new EventHandler<MarkerEventArgs>(p_OnChange);                    _ratioScreenCameraHeight = 768/ _touchlessMgr.CurrentCamera.CaptureHeight;                  _ratioScreenCameraWidth = 1024/ _touchlessMgr.CurrentCamera.CaptureWidth;                    buttonMarkerAdd.Text = "Remove Markers";              }
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,nameMarkers,The following statement contains a magic number: if (_touchlessMgr.MarkerCount == 4)              {                  m = _touchlessMgr.Markers.ElementAt(0);                  n = _touchlessMgr.Markers.ElementAt(1);                  o = _touchlessMgr.Markers.ElementAt(2);                  p = _touchlessMgr.Markers.ElementAt(3);                    m.OnChange += new EventHandler<MarkerEventArgs>(m_OnChange);                  n.OnChange += new EventHandler<MarkerEventArgs>(n_OnChange);                  o.OnChange += new EventHandler<MarkerEventArgs>(o_OnChange);                  p.OnChange += new EventHandler<MarkerEventArgs>(p_OnChange);                    _ratioScreenCameraHeight = 768/ _touchlessMgr.CurrentCamera.CaptureHeight;                  _ratioScreenCameraWidth = 1024/ _touchlessMgr.CurrentCamera.CaptureWidth;                    buttonMarkerAdd.Text = "Remove Markers";              }
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,nameMarkers,The following statement contains a magic number: if (_touchlessMgr.MarkerCount == 4)              {                  m = _touchlessMgr.Markers.ElementAt(0);                  n = _touchlessMgr.Markers.ElementAt(1);                  o = _touchlessMgr.Markers.ElementAt(2);                  p = _touchlessMgr.Markers.ElementAt(3);                    m.OnChange += new EventHandler<MarkerEventArgs>(m_OnChange);                  n.OnChange += new EventHandler<MarkerEventArgs>(n_OnChange);                  o.OnChange += new EventHandler<MarkerEventArgs>(o_OnChange);                  p.OnChange += new EventHandler<MarkerEventArgs>(p_OnChange);                    _ratioScreenCameraHeight = 768/ _touchlessMgr.CurrentCamera.CaptureHeight;                  _ratioScreenCameraWidth = 1024/ _touchlessMgr.CurrentCamera.CaptureWidth;                    buttonMarkerAdd.Text = "Remove Markers";              }
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,nameMarkers,The following statement contains a magic number: if (_touchlessMgr.MarkerCount == 4)              {                  m = _touchlessMgr.Markers.ElementAt(0);                  n = _touchlessMgr.Markers.ElementAt(1);                  o = _touchlessMgr.Markers.ElementAt(2);                  p = _touchlessMgr.Markers.ElementAt(3);                    m.OnChange += new EventHandler<MarkerEventArgs>(m_OnChange);                  n.OnChange += new EventHandler<MarkerEventArgs>(n_OnChange);                  o.OnChange += new EventHandler<MarkerEventArgs>(o_OnChange);                  p.OnChange += new EventHandler<MarkerEventArgs>(p_OnChange);                    _ratioScreenCameraHeight = 768/ _touchlessMgr.CurrentCamera.CaptureHeight;                  _ratioScreenCameraWidth = 1024/ _touchlessMgr.CurrentCamera.CaptureWidth;                    buttonMarkerAdd.Text = "Remove Markers";              }
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,nameMarkers,The following statement contains a magic number: if (_touchlessMgr.MarkerCount == 4)              {                  m = _touchlessMgr.Markers.ElementAt(0);                  n = _touchlessMgr.Markers.ElementAt(1);                  o = _touchlessMgr.Markers.ElementAt(2);                  p = _touchlessMgr.Markers.ElementAt(3);                    m.OnChange += new EventHandler<MarkerEventArgs>(m_OnChange);                  n.OnChange += new EventHandler<MarkerEventArgs>(n_OnChange);                  o.OnChange += new EventHandler<MarkerEventArgs>(o_OnChange);                  p.OnChange += new EventHandler<MarkerEventArgs>(p_OnChange);                    _ratioScreenCameraHeight = 768/ _touchlessMgr.CurrentCamera.CaptureHeight;                  _ratioScreenCameraWidth = 1024/ _touchlessMgr.CurrentCamera.CaptureWidth;                    buttonMarkerAdd.Text = "Remove Markers";              }
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,m_OnChange,The following statement contains a magic number: if (testDemo)              {                  PainterForm_MouseMove(0' labelM.Location.X' labelM.Location.Y);                  PainterForm_MouseMove(1' labelN.Location.X' labelN.Location.Y);                  PainterForm_MouseMove(2' labelO.Location.X' labelO.Location.Y);                  PainterForm_MouseMove(3' labelP.Location.X' labelP.Location.Y);              }                //MAP Demo                else if (mapDemo)              {                  handSign_NoN();                  mapDemo_OnChange();              }                        //PHOTO Demo  (no need of NoN)              else if (photoDemo && handSign_TakePicture())              {                  photo_clicked = true;                  RunPhotoGesture(new EventArgs());              }                //PRVIEW Demo              else if (previewDemo)              {                  updateImageM(this' e);                  if (handSign_PreviewTrigger())                  {                      //buttonGalleryDemo_Click(this' new EventArgs());                      RunGalleryDemo(new EventArgs());                  }              }                //NEWSPAPER Demo (no need of NoN)              else if (newspaperDemo)              {                  newspaperDemo_OnChange();              }                //.................no need of anything.................                //GLOBE DEMO (no need of NoN)                              //WEATHER Demo (no need of NoN)              //BOOK Demo (no need of NoN)              //CLOCK Demo (no need of NoN)                            else if (globeDemo || weatherDemo || bookDemo || clockDemo)              {                  //do nothing              }                //....................NoN.........................                //DRAW Demo                //GALLERY Demo              //MAIL Demo              //STOCK Demo               //EFFECTS Demo              //MENU Demo              //GESTURE Demo                else              {                  handSign_NoN();              }
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,m_OnChange,The following statement contains a magic number: if (testDemo)              {                  PainterForm_MouseMove(0' labelM.Location.X' labelM.Location.Y);                  PainterForm_MouseMove(1' labelN.Location.X' labelN.Location.Y);                  PainterForm_MouseMove(2' labelO.Location.X' labelO.Location.Y);                  PainterForm_MouseMove(3' labelP.Location.X' labelP.Location.Y);              }                //MAP Demo                else if (mapDemo)              {                  handSign_NoN();                  mapDemo_OnChange();              }                        //PHOTO Demo  (no need of NoN)              else if (photoDemo && handSign_TakePicture())              {                  photo_clicked = true;                  RunPhotoGesture(new EventArgs());              }                //PRVIEW Demo              else if (previewDemo)              {                  updateImageM(this' e);                  if (handSign_PreviewTrigger())                  {                      //buttonGalleryDemo_Click(this' new EventArgs());                      RunGalleryDemo(new EventArgs());                  }              }                //NEWSPAPER Demo (no need of NoN)              else if (newspaperDemo)              {                  newspaperDemo_OnChange();              }                //.................no need of anything.................                //GLOBE DEMO (no need of NoN)                              //WEATHER Demo (no need of NoN)              //BOOK Demo (no need of NoN)              //CLOCK Demo (no need of NoN)                            else if (globeDemo || weatherDemo || bookDemo || clockDemo)              {                  //do nothing              }                //....................NoN.........................                //DRAW Demo                //GALLERY Demo              //MAIL Demo              //STOCK Demo               //EFFECTS Demo              //MENU Demo              //GESTURE Demo                else              {                  handSign_NoN();              }
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,calculateDistance,The following statement contains a magic number: long distance =                  Math.Abs(                      (a.X - b.X) ^ 2 +                      (a.Y - b.Y) ^ 2                      );
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,calculateDistance,The following statement contains a magic number: long distance =                  Math.Abs(                      (a.X - b.X) ^ 2 +                      (a.Y - b.Y) ^ 2                      );
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,calculateDistance,The following statement contains a magic number: long distance =                  Math.Abs(                      (aX - bX) ^ 2 +                      (aY - bY) ^ 2                      );
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,calculateDistance,The following statement contains a magic number: long distance =                  Math.Abs(                      (aX - bX) ^ 2 +                      (aY - bY) ^ 2                      );
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,handSign_NoN,The following statement contains a magic number: if (!n.PreviousData.Present && !_mousedown)              {                  mouse_event(MOUSEEVENTF_LEFTDOWN' labelM.Location.X - 10' labelM.Location.Y - 10' 0' 0);                  _mousedown = true;                  return true;              }              else if (n.PreviousData.Present && _mousedown)              {                  mouse_event(MOUSEEVENTF_LEFTUP' labelM.Location.X - 10' labelM.Location.Y - 10' 0' 0);                  _mousedown = false;                  return true;              }              else              {                  return false;              }
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,handSign_NoN,The following statement contains a magic number: if (!n.PreviousData.Present && !_mousedown)              {                  mouse_event(MOUSEEVENTF_LEFTDOWN' labelM.Location.X - 10' labelM.Location.Y - 10' 0' 0);                  _mousedown = true;                  return true;              }              else if (n.PreviousData.Present && _mousedown)              {                  mouse_event(MOUSEEVENTF_LEFTUP' labelM.Location.X - 10' labelM.Location.Y - 10' 0' 0);                  _mousedown = false;                  return true;              }              else              {                  return false;              }
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,handSign_NoN,The following statement contains a magic number: if (!n.PreviousData.Present && !_mousedown)              {                  mouse_event(MOUSEEVENTF_LEFTDOWN' labelM.Location.X - 10' labelM.Location.Y - 10' 0' 0);                  _mousedown = true;                  return true;              }              else if (n.PreviousData.Present && _mousedown)              {                  mouse_event(MOUSEEVENTF_LEFTUP' labelM.Location.X - 10' labelM.Location.Y - 10' 0' 0);                  _mousedown = false;                  return true;              }              else              {                  return false;              }
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,handSign_NoN,The following statement contains a magic number: if (!n.PreviousData.Present && !_mousedown)              {                  mouse_event(MOUSEEVENTF_LEFTDOWN' labelM.Location.X - 10' labelM.Location.Y - 10' 0' 0);                  _mousedown = true;                  return true;              }              else if (n.PreviousData.Present && _mousedown)              {                  mouse_event(MOUSEEVENTF_LEFTUP' labelM.Location.X - 10' labelM.Location.Y - 10' 0' 0);                  _mousedown = false;                  return true;              }              else              {                  return false;              }
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,handSign_Menu,The following statement contains a magic number: if (((DateTime.Now.Ticks - menuStart) / TimeSpan.TicksPerMillisecond) > 2000)              {                  menuStart = null;                  return true;              }
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,handSign_Menu,The following statement contains a magic number: if (distance1 < 150 && distance2 < 150 && distanceBetweenPairs > 100)              {                  if (menuStart == null)                      menuStart = DateTime.Now.Ticks;                  return false;              }              else              {                  menuStart = null;                  return false;              }
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,handSign_Menu,The following statement contains a magic number: if (distance1 < 150 && distance2 < 150 && distanceBetweenPairs > 100)              {                  if (menuStart == null)                      menuStart = DateTime.Now.Ticks;                  return false;              }              else              {                  menuStart = null;                  return false;              }
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,handSign_Menu,The following statement contains a magic number: if (distance1 < 150 && distance2 < 150 && distanceBetweenPairs > 100)              {                  if (menuStart == null)                      menuStart = DateTime.Now.Ticks;                  return false;              }              else              {                  menuStart = null;                  return false;              }
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,handSign_scaleMap,The following statement contains a magic number: System.Threading.Thread.Sleep(20);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,handSign_scaleMap,The following statement contains a magic number: if (pinch_distance < 100)              {                  if ((current_distance - previous_distance) > 25)                  {                      mouse_event(MOUSEEVENTF_LEFTDOWN' labelM.Location.X + current_distance / 2' labelM.Location.Y' 0' 0);                      mouse_event(MOUSEEVENTF_LEFTUP' labelM.Location.X + current_distance / 2' labelM.Location.Y' 0' 0);                        previous_distance = current_distance;                  }                  else if ((previous_distance - current_distance) > 25)                  {                      //SHIFT KEY DOWN                      keybd_event(VK_LSHIFT' 0x45' 0' 0);                        mouse_event(MOUSEEVENTF_LEFTDOWN' labelM.Location.X + current_distance / 2' labelM.Location.Y' 0' 0);                      mouse_event(MOUSEEVENTF_LEFTUP' labelM.Location.X + current_distance / 2' labelM.Location.Y' 0' 0);                        //SHIFT KEY UP                      keybd_event(VK_LSHIFT' 0x45' KEYEVENTF_KEYUP' 0);                        previous_distance = current_distance;                  }              }
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,handSign_scaleMap,The following statement contains a magic number: if (pinch_distance < 100)              {                  if ((current_distance - previous_distance) > 25)                  {                      mouse_event(MOUSEEVENTF_LEFTDOWN' labelM.Location.X + current_distance / 2' labelM.Location.Y' 0' 0);                      mouse_event(MOUSEEVENTF_LEFTUP' labelM.Location.X + current_distance / 2' labelM.Location.Y' 0' 0);                        previous_distance = current_distance;                  }                  else if ((previous_distance - current_distance) > 25)                  {                      //SHIFT KEY DOWN                      keybd_event(VK_LSHIFT' 0x45' 0' 0);                        mouse_event(MOUSEEVENTF_LEFTDOWN' labelM.Location.X + current_distance / 2' labelM.Location.Y' 0' 0);                      mouse_event(MOUSEEVENTF_LEFTUP' labelM.Location.X + current_distance / 2' labelM.Location.Y' 0' 0);                        //SHIFT KEY UP                      keybd_event(VK_LSHIFT' 0x45' KEYEVENTF_KEYUP' 0);                        previous_distance = current_distance;                  }              }
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,handSign_scaleMap,The following statement contains a magic number: if (pinch_distance < 100)              {                  if ((current_distance - previous_distance) > 25)                  {                      mouse_event(MOUSEEVENTF_LEFTDOWN' labelM.Location.X + current_distance / 2' labelM.Location.Y' 0' 0);                      mouse_event(MOUSEEVENTF_LEFTUP' labelM.Location.X + current_distance / 2' labelM.Location.Y' 0' 0);                        previous_distance = current_distance;                  }                  else if ((previous_distance - current_distance) > 25)                  {                      //SHIFT KEY DOWN                      keybd_event(VK_LSHIFT' 0x45' 0' 0);                        mouse_event(MOUSEEVENTF_LEFTDOWN' labelM.Location.X + current_distance / 2' labelM.Location.Y' 0' 0);                      mouse_event(MOUSEEVENTF_LEFTUP' labelM.Location.X + current_distance / 2' labelM.Location.Y' 0' 0);                        //SHIFT KEY UP                      keybd_event(VK_LSHIFT' 0x45' KEYEVENTF_KEYUP' 0);                        previous_distance = current_distance;                  }              }
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,handSign_scaleMap,The following statement contains a magic number: if (pinch_distance < 100)              {                  if ((current_distance - previous_distance) > 25)                  {                      mouse_event(MOUSEEVENTF_LEFTDOWN' labelM.Location.X + current_distance / 2' labelM.Location.Y' 0' 0);                      mouse_event(MOUSEEVENTF_LEFTUP' labelM.Location.X + current_distance / 2' labelM.Location.Y' 0' 0);                        previous_distance = current_distance;                  }                  else if ((previous_distance - current_distance) > 25)                  {                      //SHIFT KEY DOWN                      keybd_event(VK_LSHIFT' 0x45' 0' 0);                        mouse_event(MOUSEEVENTF_LEFTDOWN' labelM.Location.X + current_distance / 2' labelM.Location.Y' 0' 0);                      mouse_event(MOUSEEVENTF_LEFTUP' labelM.Location.X + current_distance / 2' labelM.Location.Y' 0' 0);                        //SHIFT KEY UP                      keybd_event(VK_LSHIFT' 0x45' KEYEVENTF_KEYUP' 0);                        previous_distance = current_distance;                  }              }
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,handSign_scaleMap,The following statement contains a magic number: if (pinch_distance < 100)              {                  if ((current_distance - previous_distance) > 25)                  {                      mouse_event(MOUSEEVENTF_LEFTDOWN' labelM.Location.X + current_distance / 2' labelM.Location.Y' 0' 0);                      mouse_event(MOUSEEVENTF_LEFTUP' labelM.Location.X + current_distance / 2' labelM.Location.Y' 0' 0);                        previous_distance = current_distance;                  }                  else if ((previous_distance - current_distance) > 25)                  {                      //SHIFT KEY DOWN                      keybd_event(VK_LSHIFT' 0x45' 0' 0);                        mouse_event(MOUSEEVENTF_LEFTDOWN' labelM.Location.X + current_distance / 2' labelM.Location.Y' 0' 0);                      mouse_event(MOUSEEVENTF_LEFTUP' labelM.Location.X + current_distance / 2' labelM.Location.Y' 0' 0);                        //SHIFT KEY UP                      keybd_event(VK_LSHIFT' 0x45' KEYEVENTF_KEYUP' 0);                        previous_distance = current_distance;                  }              }
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,handSign_scaleMap,The following statement contains a magic number: if (pinch_distance < 100)              {                  if ((current_distance - previous_distance) > 25)                  {                      mouse_event(MOUSEEVENTF_LEFTDOWN' labelM.Location.X + current_distance / 2' labelM.Location.Y' 0' 0);                      mouse_event(MOUSEEVENTF_LEFTUP' labelM.Location.X + current_distance / 2' labelM.Location.Y' 0' 0);                        previous_distance = current_distance;                  }                  else if ((previous_distance - current_distance) > 25)                  {                      //SHIFT KEY DOWN                      keybd_event(VK_LSHIFT' 0x45' 0' 0);                        mouse_event(MOUSEEVENTF_LEFTDOWN' labelM.Location.X + current_distance / 2' labelM.Location.Y' 0' 0);                      mouse_event(MOUSEEVENTF_LEFTUP' labelM.Location.X + current_distance / 2' labelM.Location.Y' 0' 0);                        //SHIFT KEY UP                      keybd_event(VK_LSHIFT' 0x45' KEYEVENTF_KEYUP' 0);                        previous_distance = current_distance;                  }              }
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,handSign_scaleMap,The following statement contains a magic number: if (pinch_distance < 100)              {                  if ((current_distance - previous_distance) > 25)                  {                      mouse_event(MOUSEEVENTF_LEFTDOWN' labelM.Location.X + current_distance / 2' labelM.Location.Y' 0' 0);                      mouse_event(MOUSEEVENTF_LEFTUP' labelM.Location.X + current_distance / 2' labelM.Location.Y' 0' 0);                        previous_distance = current_distance;                  }                  else if ((previous_distance - current_distance) > 25)                  {                      //SHIFT KEY DOWN                      keybd_event(VK_LSHIFT' 0x45' 0' 0);                        mouse_event(MOUSEEVENTF_LEFTDOWN' labelM.Location.X + current_distance / 2' labelM.Location.Y' 0' 0);                      mouse_event(MOUSEEVENTF_LEFTUP' labelM.Location.X + current_distance / 2' labelM.Location.Y' 0' 0);                        //SHIFT KEY UP                      keybd_event(VK_LSHIFT' 0x45' KEYEVENTF_KEYUP' 0);                        previous_distance = current_distance;                  }              }
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,handSign_TakePicture,The following statement contains a magic number: if (!photo_clicked)              {                  double timeElapsed = (DateTime.Now.Ticks - photoTaken) / TimeSpan.TicksPerMillisecond;                    long distance = calculateDistance(labelN.Location' labelO.Location) +                      calculateDistance(labelM.Location' labelP.Location);                    if (distance < 150 && timeElapsed > 12000)                  {                      photoTaken = DateTime.Now.Ticks;                      return true;                  }                  else                  {                      return false;                  }              }              else              {                  return false;              }
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,handSign_TakePicture,The following statement contains a magic number: if (!photo_clicked)              {                  double timeElapsed = (DateTime.Now.Ticks - photoTaken) / TimeSpan.TicksPerMillisecond;                    long distance = calculateDistance(labelN.Location' labelO.Location) +                      calculateDistance(labelM.Location' labelP.Location);                    if (distance < 150 && timeElapsed > 12000)                  {                      photoTaken = DateTime.Now.Ticks;                      return true;                  }                  else                  {                      return false;                  }              }              else              {                  return false;              }
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,handSign_PreviewTrigger,The following statement contains a magic number: if (calculateDistance(labelM.Location' labelO.Location) < 50)              {                  return true;              }              else              {                  return false;              }
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,handSign_trackVideo,The following statement contains a magic number: new_x2 = 500;
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,handSign_trackVideo,The following statement contains a magic number: new_y2 = 400;
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,handSign_trackVideo,The following statement contains a magic number: group.Children.Add(new System.Windows.Media.RotateTransform(new_Theta / Math.PI * 180));
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,WUW_MouseMove,The following statement contains a magic number: if (_isDown)  			{  				_points.Add(new PointR(e.X' e.Y' Environment.TickCount));  				Invalidate(new Rectangle(e.X - 2' e.Y - 2' 4' 4));  			}
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,WUW_MouseMove,The following statement contains a magic number: if (_isDown)  			{  				_points.Add(new PointR(e.X' e.Y' Environment.TickCount));  				Invalidate(new Rectangle(e.X - 2' e.Y - 2' 4' 4));  			}
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,WUW_MouseMove,The following statement contains a magic number: if (_isDown)  			{  				_points.Add(new PointR(e.X' e.Y' Environment.TickCount));  				Invalidate(new Rectangle(e.X - 2' e.Y - 2' 4' 4));  			}
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,WUW_MouseMove,The following statement contains a magic number: if (_isDown)  			{  				_points.Add(new PointR(e.X' e.Y' Environment.TickCount));  				Invalidate(new Rectangle(e.X - 2' e.Y - 2' 4' 4));  			}
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,WUW_MouseUp,The following statement contains a magic number: if (_isDown)              {                  _isDown = false;                    if (_points.Count >= 5) // require 5 points for a valid gesture                  {                      if (_recording)                      {                          SaveFileDialog dlg = new SaveFileDialog();                          dlg.Filter = "Gestures (*.xml)|*.xml";                          dlg.Title = "Save Gesture As";                          dlg.AddExtension = true;                          dlg.RestoreDirectory = false;                          dlg.InitialDirectory = "Gestures";                            if (dlg.ShowDialog(this) == DialogResult.OK)                          {                              _rec.SaveGesture(dlg.FileName' _points);  // resample' scale' translate to origin                              ReloadViewForm();                          }                            dlg.Dispose();                          _recording = false;                          lblRecord.Visible = false;                          Invalidate();                      }                      else if (_rec.NumGestures > 0) // not recording' so testing                      {                                                  Application.DoEvents(); // forces label to display                            NBestList result = _rec.Recognize(_points); // where all the action is!!                          lblResult.Text = String.Format("{0}: {1} ({2}px' {3}{4})"'                              result.Name'                              Math.Round(result.Score' 2)'                              Math.Round(result.Distance' 2)'                              Math.Round(result.Angle' 2)' (char)176);                            switch (result.Name)                          {                              case "clock1":                              case "clock2":                                  buttonClockDemo_Click(this' e);                                  break;                              case "draw1":                              case "draw2":                              case "draw3":                              case "draw4":                                  buttonDrawDemo_Click(this' e);                                  break;                              case "email":                                  break;                              case "map1":                              case "map2":                                  buttonMapDemo_Click(this' e);                                  break;                              case "menu1":                              case "menu2":                              case "menuSQ1":                              case "menuSQ1b":                              case "menuSQ2":                                  buttonMenuDemo_Click(this' e);                                  break;                              case "photo1":                              case "photo2":                              case "photo3":                              case "photo4":                              case "photo5":                              case "photo6":                                  buttonPhotoDemo_Click(this' e);                                  break;                              case "weather1":                              case "weather2":                                  buttonWeatherDemo_Click(this' e);                                  break;                              default:                                  break;                          }                      }                  }              }
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,WUW_MouseUp,The following statement contains a magic number: if (_isDown)              {                  _isDown = false;                    if (_points.Count >= 5) // require 5 points for a valid gesture                  {                      if (_recording)                      {                          SaveFileDialog dlg = new SaveFileDialog();                          dlg.Filter = "Gestures (*.xml)|*.xml";                          dlg.Title = "Save Gesture As";                          dlg.AddExtension = true;                          dlg.RestoreDirectory = false;                          dlg.InitialDirectory = "Gestures";                            if (dlg.ShowDialog(this) == DialogResult.OK)                          {                              _rec.SaveGesture(dlg.FileName' _points);  // resample' scale' translate to origin                              ReloadViewForm();                          }                            dlg.Dispose();                          _recording = false;                          lblRecord.Visible = false;                          Invalidate();                      }                      else if (_rec.NumGestures > 0) // not recording' so testing                      {                                                  Application.DoEvents(); // forces label to display                            NBestList result = _rec.Recognize(_points); // where all the action is!!                          lblResult.Text = String.Format("{0}: {1} ({2}px' {3}{4})"'                              result.Name'                              Math.Round(result.Score' 2)'                              Math.Round(result.Distance' 2)'                              Math.Round(result.Angle' 2)' (char)176);                            switch (result.Name)                          {                              case "clock1":                              case "clock2":                                  buttonClockDemo_Click(this' e);                                  break;                              case "draw1":                              case "draw2":                              case "draw3":                              case "draw4":                                  buttonDrawDemo_Click(this' e);                                  break;                              case "email":                                  break;                              case "map1":                              case "map2":                                  buttonMapDemo_Click(this' e);                                  break;                              case "menu1":                              case "menu2":                              case "menuSQ1":                              case "menuSQ1b":                              case "menuSQ2":                                  buttonMenuDemo_Click(this' e);                                  break;                              case "photo1":                              case "photo2":                              case "photo3":                              case "photo4":                              case "photo5":                              case "photo6":                                  buttonPhotoDemo_Click(this' e);                                  break;                              case "weather1":                              case "weather2":                                  buttonWeatherDemo_Click(this' e);                                  break;                              default:                                  break;                          }                      }                  }              }
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,WUW_MouseUp,The following statement contains a magic number: if (_isDown)              {                  _isDown = false;                    if (_points.Count >= 5) // require 5 points for a valid gesture                  {                      if (_recording)                      {                          SaveFileDialog dlg = new SaveFileDialog();                          dlg.Filter = "Gestures (*.xml)|*.xml";                          dlg.Title = "Save Gesture As";                          dlg.AddExtension = true;                          dlg.RestoreDirectory = false;                          dlg.InitialDirectory = "Gestures";                            if (dlg.ShowDialog(this) == DialogResult.OK)                          {                              _rec.SaveGesture(dlg.FileName' _points);  // resample' scale' translate to origin                              ReloadViewForm();                          }                            dlg.Dispose();                          _recording = false;                          lblRecord.Visible = false;                          Invalidate();                      }                      else if (_rec.NumGestures > 0) // not recording' so testing                      {                                                  Application.DoEvents(); // forces label to display                            NBestList result = _rec.Recognize(_points); // where all the action is!!                          lblResult.Text = String.Format("{0}: {1} ({2}px' {3}{4})"'                              result.Name'                              Math.Round(result.Score' 2)'                              Math.Round(result.Distance' 2)'                              Math.Round(result.Angle' 2)' (char)176);                            switch (result.Name)                          {                              case "clock1":                              case "clock2":                                  buttonClockDemo_Click(this' e);                                  break;                              case "draw1":                              case "draw2":                              case "draw3":                              case "draw4":                                  buttonDrawDemo_Click(this' e);                                  break;                              case "email":                                  break;                              case "map1":                              case "map2":                                  buttonMapDemo_Click(this' e);                                  break;                              case "menu1":                              case "menu2":                              case "menuSQ1":                              case "menuSQ1b":                              case "menuSQ2":                                  buttonMenuDemo_Click(this' e);                                  break;                              case "photo1":                              case "photo2":                              case "photo3":                              case "photo4":                              case "photo5":                              case "photo6":                                  buttonPhotoDemo_Click(this' e);                                  break;                              case "weather1":                              case "weather2":                                  buttonWeatherDemo_Click(this' e);                                  break;                              default:                                  break;                          }                      }                  }              }
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,WUW_MouseUp,The following statement contains a magic number: if (_isDown)              {                  _isDown = false;                    if (_points.Count >= 5) // require 5 points for a valid gesture                  {                      if (_recording)                      {                          SaveFileDialog dlg = new SaveFileDialog();                          dlg.Filter = "Gestures (*.xml)|*.xml";                          dlg.Title = "Save Gesture As";                          dlg.AddExtension = true;                          dlg.RestoreDirectory = false;                          dlg.InitialDirectory = "Gestures";                            if (dlg.ShowDialog(this) == DialogResult.OK)                          {                              _rec.SaveGesture(dlg.FileName' _points);  // resample' scale' translate to origin                              ReloadViewForm();                          }                            dlg.Dispose();                          _recording = false;                          lblRecord.Visible = false;                          Invalidate();                      }                      else if (_rec.NumGestures > 0) // not recording' so testing                      {                                                  Application.DoEvents(); // forces label to display                            NBestList result = _rec.Recognize(_points); // where all the action is!!                          lblResult.Text = String.Format("{0}: {1} ({2}px' {3}{4})"'                              result.Name'                              Math.Round(result.Score' 2)'                              Math.Round(result.Distance' 2)'                              Math.Round(result.Angle' 2)' (char)176);                            switch (result.Name)                          {                              case "clock1":                              case "clock2":                                  buttonClockDemo_Click(this' e);                                  break;                              case "draw1":                              case "draw2":                              case "draw3":                              case "draw4":                                  buttonDrawDemo_Click(this' e);                                  break;                              case "email":                                  break;                              case "map1":                              case "map2":                                  buttonMapDemo_Click(this' e);                                  break;                              case "menu1":                              case "menu2":                              case "menuSQ1":                              case "menuSQ1b":                              case "menuSQ2":                                  buttonMenuDemo_Click(this' e);                                  break;                              case "photo1":                              case "photo2":                              case "photo3":                              case "photo4":                              case "photo5":                              case "photo6":                                  buttonPhotoDemo_Click(this' e);                                  break;                              case "weather1":                              case "weather2":                                  buttonWeatherDemo_Click(this' e);                                  break;                              default:                                  break;                          }                      }                  }              }
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,WUW_MouseUp,The following statement contains a magic number: if (_isDown)              {                  _isDown = false;                    if (_points.Count >= 5) // require 5 points for a valid gesture                  {                      if (_recording)                      {                          SaveFileDialog dlg = new SaveFileDialog();                          dlg.Filter = "Gestures (*.xml)|*.xml";                          dlg.Title = "Save Gesture As";                          dlg.AddExtension = true;                          dlg.RestoreDirectory = false;                          dlg.InitialDirectory = "Gestures";                            if (dlg.ShowDialog(this) == DialogResult.OK)                          {                              _rec.SaveGesture(dlg.FileName' _points);  // resample' scale' translate to origin                              ReloadViewForm();                          }                            dlg.Dispose();                          _recording = false;                          lblRecord.Visible = false;                          Invalidate();                      }                      else if (_rec.NumGestures > 0) // not recording' so testing                      {                                                  Application.DoEvents(); // forces label to display                            NBestList result = _rec.Recognize(_points); // where all the action is!!                          lblResult.Text = String.Format("{0}: {1} ({2}px' {3}{4})"'                              result.Name'                              Math.Round(result.Score' 2)'                              Math.Round(result.Distance' 2)'                              Math.Round(result.Angle' 2)' (char)176);                            switch (result.Name)                          {                              case "clock1":                              case "clock2":                                  buttonClockDemo_Click(this' e);                                  break;                              case "draw1":                              case "draw2":                              case "draw3":                              case "draw4":                                  buttonDrawDemo_Click(this' e);                                  break;                              case "email":                                  break;                              case "map1":                              case "map2":                                  buttonMapDemo_Click(this' e);                                  break;                              case "menu1":                              case "menu2":                              case "menuSQ1":                              case "menuSQ1b":                              case "menuSQ2":                                  buttonMenuDemo_Click(this' e);                                  break;                              case "photo1":                              case "photo2":                              case "photo3":                              case "photo4":                              case "photo5":                              case "photo6":                                  buttonPhotoDemo_Click(this' e);                                  break;                              case "weather1":                              case "weather2":                                  buttonWeatherDemo_Click(this' e);                                  break;                              default:                                  break;                          }                      }                  }              }
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,buttonTestDemo_Click,The following statement contains a magic number: if (testDemo == false)              {                  StopOtherApps(this' e);                                  testDemo = true;                  labelDemoName.Text = "Test";                  buttonTestDemo.Text = "Stop Test";                  pictureBoxTestDemo.Show();                  labelDemoInstructions.Enabled = true;                  labelDemoInstructions.Text = "Test Demo Instructions:\n\n"                      + "Test that 4 fingers are tracked.\n";                    updatelabelMLocation(new Point(35' 9));                  updatelabelNLocation(new Point(35' 35));                  updatelabelOLocation(new Point(9' 9));                  updatelabelPLocation(new Point(9' 35));                }              else              {                  testDemo = false;                  labelDemoName.Text = "WUW";                  buttonTestDemo.Text = "Test";                                  Cursor = Cursors.Arrow;                  pictureBoxTestDemo.Hide();                  labelDemoInstructions.Enabled = false;                  labelDemoInstructions.Text = "";                  ResetEnvironment();              }
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,buttonTestDemo_Click,The following statement contains a magic number: if (testDemo == false)              {                  StopOtherApps(this' e);                                  testDemo = true;                  labelDemoName.Text = "Test";                  buttonTestDemo.Text = "Stop Test";                  pictureBoxTestDemo.Show();                  labelDemoInstructions.Enabled = true;                  labelDemoInstructions.Text = "Test Demo Instructions:\n\n"                      + "Test that 4 fingers are tracked.\n";                    updatelabelMLocation(new Point(35' 9));                  updatelabelNLocation(new Point(35' 35));                  updatelabelOLocation(new Point(9' 9));                  updatelabelPLocation(new Point(9' 35));                }              else              {                  testDemo = false;                  labelDemoName.Text = "WUW";                  buttonTestDemo.Text = "Test";                                  Cursor = Cursors.Arrow;                  pictureBoxTestDemo.Hide();                  labelDemoInstructions.Enabled = false;                  labelDemoInstructions.Text = "";                  ResetEnvironment();              }
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,buttonTestDemo_Click,The following statement contains a magic number: if (testDemo == false)              {                  StopOtherApps(this' e);                                  testDemo = true;                  labelDemoName.Text = "Test";                  buttonTestDemo.Text = "Stop Test";                  pictureBoxTestDemo.Show();                  labelDemoInstructions.Enabled = true;                  labelDemoInstructions.Text = "Test Demo Instructions:\n\n"                      + "Test that 4 fingers are tracked.\n";                    updatelabelMLocation(new Point(35' 9));                  updatelabelNLocation(new Point(35' 35));                  updatelabelOLocation(new Point(9' 9));                  updatelabelPLocation(new Point(9' 35));                }              else              {                  testDemo = false;                  labelDemoName.Text = "WUW";                  buttonTestDemo.Text = "Test";                                  Cursor = Cursors.Arrow;                  pictureBoxTestDemo.Hide();                  labelDemoInstructions.Enabled = false;                  labelDemoInstructions.Text = "";                  ResetEnvironment();              }
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,buttonTestDemo_Click,The following statement contains a magic number: if (testDemo == false)              {                  StopOtherApps(this' e);                                  testDemo = true;                  labelDemoName.Text = "Test";                  buttonTestDemo.Text = "Stop Test";                  pictureBoxTestDemo.Show();                  labelDemoInstructions.Enabled = true;                  labelDemoInstructions.Text = "Test Demo Instructions:\n\n"                      + "Test that 4 fingers are tracked.\n";                    updatelabelMLocation(new Point(35' 9));                  updatelabelNLocation(new Point(35' 35));                  updatelabelOLocation(new Point(9' 9));                  updatelabelPLocation(new Point(9' 35));                }              else              {                  testDemo = false;                  labelDemoName.Text = "WUW";                  buttonTestDemo.Text = "Test";                                  Cursor = Cursors.Arrow;                  pictureBoxTestDemo.Hide();                  labelDemoInstructions.Enabled = false;                  labelDemoInstructions.Text = "";                  ResetEnvironment();              }
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,buttonTestDemo_Click,The following statement contains a magic number: if (testDemo == false)              {                  StopOtherApps(this' e);                                  testDemo = true;                  labelDemoName.Text = "Test";                  buttonTestDemo.Text = "Stop Test";                  pictureBoxTestDemo.Show();                  labelDemoInstructions.Enabled = true;                  labelDemoInstructions.Text = "Test Demo Instructions:\n\n"                      + "Test that 4 fingers are tracked.\n";                    updatelabelMLocation(new Point(35' 9));                  updatelabelNLocation(new Point(35' 35));                  updatelabelOLocation(new Point(9' 9));                  updatelabelPLocation(new Point(9' 35));                }              else              {                  testDemo = false;                  labelDemoName.Text = "WUW";                  buttonTestDemo.Text = "Test";                                  Cursor = Cursors.Arrow;                  pictureBoxTestDemo.Hide();                  labelDemoInstructions.Enabled = false;                  labelDemoInstructions.Text = "";                  ResetEnvironment();              }
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,buttonTestDemo_Click,The following statement contains a magic number: if (testDemo == false)              {                  StopOtherApps(this' e);                                  testDemo = true;                  labelDemoName.Text = "Test";                  buttonTestDemo.Text = "Stop Test";                  pictureBoxTestDemo.Show();                  labelDemoInstructions.Enabled = true;                  labelDemoInstructions.Text = "Test Demo Instructions:\n\n"                      + "Test that 4 fingers are tracked.\n";                    updatelabelMLocation(new Point(35' 9));                  updatelabelNLocation(new Point(35' 35));                  updatelabelOLocation(new Point(9' 9));                  updatelabelPLocation(new Point(9' 35));                }              else              {                  testDemo = false;                  labelDemoName.Text = "WUW";                  buttonTestDemo.Text = "Test";                                  Cursor = Cursors.Arrow;                  pictureBoxTestDemo.Hide();                  labelDemoInstructions.Enabled = false;                  labelDemoInstructions.Text = "";                  ResetEnvironment();              }
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,buttonTestDemo_Click,The following statement contains a magic number: if (testDemo == false)              {                  StopOtherApps(this' e);                                  testDemo = true;                  labelDemoName.Text = "Test";                  buttonTestDemo.Text = "Stop Test";                  pictureBoxTestDemo.Show();                  labelDemoInstructions.Enabled = true;                  labelDemoInstructions.Text = "Test Demo Instructions:\n\n"                      + "Test that 4 fingers are tracked.\n";                    updatelabelMLocation(new Point(35' 9));                  updatelabelNLocation(new Point(35' 35));                  updatelabelOLocation(new Point(9' 9));                  updatelabelPLocation(new Point(9' 35));                }              else              {                  testDemo = false;                  labelDemoName.Text = "WUW";                  buttonTestDemo.Text = "Test";                                  Cursor = Cursors.Arrow;                  pictureBoxTestDemo.Hide();                  labelDemoInstructions.Enabled = false;                  labelDemoInstructions.Text = "";                  ResetEnvironment();              }
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,buttonTestDemo_Click,The following statement contains a magic number: if (testDemo == false)              {                  StopOtherApps(this' e);                                  testDemo = true;                  labelDemoName.Text = "Test";                  buttonTestDemo.Text = "Stop Test";                  pictureBoxTestDemo.Show();                  labelDemoInstructions.Enabled = true;                  labelDemoInstructions.Text = "Test Demo Instructions:\n\n"                      + "Test that 4 fingers are tracked.\n";                    updatelabelMLocation(new Point(35' 9));                  updatelabelNLocation(new Point(35' 35));                  updatelabelOLocation(new Point(9' 9));                  updatelabelPLocation(new Point(9' 35));                }              else              {                  testDemo = false;                  labelDemoName.Text = "WUW";                  buttonTestDemo.Text = "Test";                                  Cursor = Cursors.Arrow;                  pictureBoxTestDemo.Hide();                  labelDemoInstructions.Enabled = false;                  labelDemoInstructions.Text = "";                  ResetEnvironment();              }
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,PainterForm_MouseMove,The following statement contains a magic number: magX = Math.Min(100' 5 * (int)Math.Pow(Math.Abs(newX - mouseData[index' 0])' .5));
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,PainterForm_MouseMove,The following statement contains a magic number: magX = Math.Min(100' 5 * (int)Math.Pow(Math.Abs(newX - mouseData[index' 0])' .5));
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,PainterForm_MouseMove,The following statement contains a magic number: magX = Math.Min(100' 5 * (int)Math.Pow(Math.Abs(newX - mouseData[index' 0])' .5));
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,PainterForm_MouseMove,The following statement contains a magic number: magY = Math.Min(100' 5 * (int)Math.Pow(Math.Abs(newY - mouseData[index' 1])' .5));
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,PainterForm_MouseMove,The following statement contains a magic number: magY = Math.Min(100' 5 * (int)Math.Pow(Math.Abs(newY - mouseData[index' 1])' .5));
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,PainterForm_MouseMove,The following statement contains a magic number: magY = Math.Min(100' 5 * (int)Math.Pow(Math.Abs(newY - mouseData[index' 1])' .5));
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,PainterForm_MouseMove,The following statement contains a magic number: SolidBrush cleanBrush = new SolidBrush(Color.FromArgb(25' 0' 0' 0));
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,PainterForm_MouseMove,The following statement contains a magic number: for (int i = 0; i < 20; i++)              {                  graphics.FillRectangle(brushData[index]' newX + dirX * randomGenerator.Next(0' magX)' newY + dirY * randomGenerator.Next(0' magY)' 30' 30);              }
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,PainterForm_MouseMove,The following statement contains a magic number: for (int i = 0; i < 20; i++)              {                  graphics.FillRectangle(brushData[index]' newX + dirX * randomGenerator.Next(0' magX)' newY + dirY * randomGenerator.Next(0' magY)' 30' 30);              }
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,PainterForm_MouseMove,The following statement contains a magic number: for (int i = 0; i < 20; i++)              {                  graphics.FillRectangle(brushData[index]' newX + dirX * randomGenerator.Next(0' magX)' newY + dirY * randomGenerator.Next(0' magY)' 30' 30);              }
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,PainterForm_MouseMove,The following statement contains a magic number: if (index == 0)              {                  graphics.FillRectangle(cleanBrush' 0' 0' 1024' 768);              }
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,PainterForm_MouseMove,The following statement contains a magic number: if (index == 0)              {                  graphics.FillRectangle(cleanBrush' 0' 0' 1024' 768);              }
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,buttonDrawDemo_Click,The following statement contains a magic number: if (drawDemo == false)                  {                      StopOtherApps(this' e);                      inkCanvas1 = new System.Windows.Controls.InkCanvas();                      inkCanvas1.KeyDown += new System.Windows.Input.KeyEventHandler(inkCanvas1_KeyDown);                      inkCanvas1.Background = System.Windows.Media.Brushes.Black;                      inkCanvas1.DefaultDrawingAttributes.Color = System.Windows.Media.Colors.White;                      inkCanvas1.DefaultDrawingAttributes.Width = 16;                      inkCanvas1.DefaultDrawingAttributes.Height = 16;                                            elementHostDraw.Child = inkCanvas1;                                            drawDemo = true;                      labelDemoName.Text = "Draw";                      buttonDrawDemo.Text = "Stop Draw";                      //inkCanvasLoad();                      elementHostDraw.Show();                                                              drawPanel.Show();                      labelDemoInstructions.Enabled = true;                      labelDemoInstructions.Text = "Draw Demo Instructions:\n\n"                          + "Draws with Marker M when N is not\n"                          + "present.";                     }                  else                  {                      drawDemo = false;                      labelDemoName.Text = "WUW";                      buttonDrawDemo.Text = "Draw";                      //inkCanvasSaveJpeg();                      elementHostDraw.Hide();                      drawPanel.Hide();                      Cursor = Cursors.Arrow;                      labelDemoInstructions.Enabled = false;                      labelDemoInstructions.Text = "";                      ResetEnvironment();                  }
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,buttonDrawDemo_Click,The following statement contains a magic number: if (drawDemo == false)                  {                      StopOtherApps(this' e);                      inkCanvas1 = new System.Windows.Controls.InkCanvas();                      inkCanvas1.KeyDown += new System.Windows.Input.KeyEventHandler(inkCanvas1_KeyDown);                      inkCanvas1.Background = System.Windows.Media.Brushes.Black;                      inkCanvas1.DefaultDrawingAttributes.Color = System.Windows.Media.Colors.White;                      inkCanvas1.DefaultDrawingAttributes.Width = 16;                      inkCanvas1.DefaultDrawingAttributes.Height = 16;                                            elementHostDraw.Child = inkCanvas1;                                            drawDemo = true;                      labelDemoName.Text = "Draw";                      buttonDrawDemo.Text = "Stop Draw";                      //inkCanvasLoad();                      elementHostDraw.Show();                                                              drawPanel.Show();                      labelDemoInstructions.Enabled = true;                      labelDemoInstructions.Text = "Draw Demo Instructions:\n\n"                          + "Draws with Marker M when N is not\n"                          + "present.";                     }                  else                  {                      drawDemo = false;                      labelDemoName.Text = "WUW";                      buttonDrawDemo.Text = "Draw";                      //inkCanvasSaveJpeg();                      elementHostDraw.Hide();                      drawPanel.Hide();                      Cursor = Cursors.Arrow;                      labelDemoInstructions.Enabled = false;                      labelDemoInstructions.Text = "";                      ResetEnvironment();                  }
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,inkCanvasThinner_Hover,The following statement contains a magic number: if (inkCanvas1.EditingMode != System.Windows.Controls.InkCanvasEditingMode.EraseByPoint)              {                  if (inkCanvas1.DefaultDrawingAttributes.Height >= 4)                  {                      inkCanvas1.DefaultDrawingAttributes.Height -= 2;                      inkCanvas1.DefaultDrawingAttributes.Width -= 2;                  }              }              else              {                  if (inkCanvas1.EraserShape.Height >= 2)                      inkCanvas1.EraserShape = new System.Windows.Ink.RectangleStylusShape(inkCanvas1.EraserShape.Height - 2' inkCanvas1.EraserShape.Width - 2);              }
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,inkCanvasThinner_Hover,The following statement contains a magic number: if (inkCanvas1.EditingMode != System.Windows.Controls.InkCanvasEditingMode.EraseByPoint)              {                  if (inkCanvas1.DefaultDrawingAttributes.Height >= 4)                  {                      inkCanvas1.DefaultDrawingAttributes.Height -= 2;                      inkCanvas1.DefaultDrawingAttributes.Width -= 2;                  }              }              else              {                  if (inkCanvas1.EraserShape.Height >= 2)                      inkCanvas1.EraserShape = new System.Windows.Ink.RectangleStylusShape(inkCanvas1.EraserShape.Height - 2' inkCanvas1.EraserShape.Width - 2);              }
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,inkCanvasThinner_Hover,The following statement contains a magic number: if (inkCanvas1.EditingMode != System.Windows.Controls.InkCanvasEditingMode.EraseByPoint)              {                  if (inkCanvas1.DefaultDrawingAttributes.Height >= 4)                  {                      inkCanvas1.DefaultDrawingAttributes.Height -= 2;                      inkCanvas1.DefaultDrawingAttributes.Width -= 2;                  }              }              else              {                  if (inkCanvas1.EraserShape.Height >= 2)                      inkCanvas1.EraserShape = new System.Windows.Ink.RectangleStylusShape(inkCanvas1.EraserShape.Height - 2' inkCanvas1.EraserShape.Width - 2);              }
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,inkCanvasThinner_Hover,The following statement contains a magic number: if (inkCanvas1.EditingMode != System.Windows.Controls.InkCanvasEditingMode.EraseByPoint)              {                  if (inkCanvas1.DefaultDrawingAttributes.Height >= 4)                  {                      inkCanvas1.DefaultDrawingAttributes.Height -= 2;                      inkCanvas1.DefaultDrawingAttributes.Width -= 2;                  }              }              else              {                  if (inkCanvas1.EraserShape.Height >= 2)                      inkCanvas1.EraserShape = new System.Windows.Ink.RectangleStylusShape(inkCanvas1.EraserShape.Height - 2' inkCanvas1.EraserShape.Width - 2);              }
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,inkCanvasThinner_Hover,The following statement contains a magic number: if (inkCanvas1.EditingMode != System.Windows.Controls.InkCanvasEditingMode.EraseByPoint)              {                  if (inkCanvas1.DefaultDrawingAttributes.Height >= 4)                  {                      inkCanvas1.DefaultDrawingAttributes.Height -= 2;                      inkCanvas1.DefaultDrawingAttributes.Width -= 2;                  }              }              else              {                  if (inkCanvas1.EraserShape.Height >= 2)                      inkCanvas1.EraserShape = new System.Windows.Ink.RectangleStylusShape(inkCanvas1.EraserShape.Height - 2' inkCanvas1.EraserShape.Width - 2);              }
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,inkCanvasThinner_Hover,The following statement contains a magic number: if (inkCanvas1.EditingMode != System.Windows.Controls.InkCanvasEditingMode.EraseByPoint)              {                  if (inkCanvas1.DefaultDrawingAttributes.Height >= 4)                  {                      inkCanvas1.DefaultDrawingAttributes.Height -= 2;                      inkCanvas1.DefaultDrawingAttributes.Width -= 2;                  }              }              else              {                  if (inkCanvas1.EraserShape.Height >= 2)                      inkCanvas1.EraserShape = new System.Windows.Ink.RectangleStylusShape(inkCanvas1.EraserShape.Height - 2' inkCanvas1.EraserShape.Width - 2);              }
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,inkCanvasThinner_Click,The following statement contains a magic number: if (inkCanvas1.EditingMode != System.Windows.Controls.InkCanvasEditingMode.EraseByPoint)              {                  if (inkCanvas1.DefaultDrawingAttributes.Height >= 14)                  {                      inkCanvas1.DefaultDrawingAttributes.Height -= 10;                      inkCanvas1.DefaultDrawingAttributes.Width -= 10;                  }              }              else              {                  if (inkCanvas1.EraserShape.Height >= 10)                      inkCanvas1.EraserShape = new System.Windows.Ink.RectangleStylusShape(inkCanvas1.EraserShape.Height - 10' inkCanvas1.EraserShape.Width - 10);              }
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,inkCanvasThinner_Click,The following statement contains a magic number: if (inkCanvas1.EditingMode != System.Windows.Controls.InkCanvasEditingMode.EraseByPoint)              {                  if (inkCanvas1.DefaultDrawingAttributes.Height >= 14)                  {                      inkCanvas1.DefaultDrawingAttributes.Height -= 10;                      inkCanvas1.DefaultDrawingAttributes.Width -= 10;                  }              }              else              {                  if (inkCanvas1.EraserShape.Height >= 10)                      inkCanvas1.EraserShape = new System.Windows.Ink.RectangleStylusShape(inkCanvas1.EraserShape.Height - 10' inkCanvas1.EraserShape.Width - 10);              }
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,inkCanvasThinner_Click,The following statement contains a magic number: if (inkCanvas1.EditingMode != System.Windows.Controls.InkCanvasEditingMode.EraseByPoint)              {                  if (inkCanvas1.DefaultDrawingAttributes.Height >= 14)                  {                      inkCanvas1.DefaultDrawingAttributes.Height -= 10;                      inkCanvas1.DefaultDrawingAttributes.Width -= 10;                  }              }              else              {                  if (inkCanvas1.EraserShape.Height >= 10)                      inkCanvas1.EraserShape = new System.Windows.Ink.RectangleStylusShape(inkCanvas1.EraserShape.Height - 10' inkCanvas1.EraserShape.Width - 10);              }
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,inkCanvasThinner_Click,The following statement contains a magic number: if (inkCanvas1.EditingMode != System.Windows.Controls.InkCanvasEditingMode.EraseByPoint)              {                  if (inkCanvas1.DefaultDrawingAttributes.Height >= 14)                  {                      inkCanvas1.DefaultDrawingAttributes.Height -= 10;                      inkCanvas1.DefaultDrawingAttributes.Width -= 10;                  }              }              else              {                  if (inkCanvas1.EraserShape.Height >= 10)                      inkCanvas1.EraserShape = new System.Windows.Ink.RectangleStylusShape(inkCanvas1.EraserShape.Height - 10' inkCanvas1.EraserShape.Width - 10);              }
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,inkCanvasThinner_Click,The following statement contains a magic number: if (inkCanvas1.EditingMode != System.Windows.Controls.InkCanvasEditingMode.EraseByPoint)              {                  if (inkCanvas1.DefaultDrawingAttributes.Height >= 14)                  {                      inkCanvas1.DefaultDrawingAttributes.Height -= 10;                      inkCanvas1.DefaultDrawingAttributes.Width -= 10;                  }              }              else              {                  if (inkCanvas1.EraserShape.Height >= 10)                      inkCanvas1.EraserShape = new System.Windows.Ink.RectangleStylusShape(inkCanvas1.EraserShape.Height - 10' inkCanvas1.EraserShape.Width - 10);              }
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,inkCanvasThinner_Click,The following statement contains a magic number: if (inkCanvas1.EditingMode != System.Windows.Controls.InkCanvasEditingMode.EraseByPoint)              {                  if (inkCanvas1.DefaultDrawingAttributes.Height >= 14)                  {                      inkCanvas1.DefaultDrawingAttributes.Height -= 10;                      inkCanvas1.DefaultDrawingAttributes.Width -= 10;                  }              }              else              {                  if (inkCanvas1.EraserShape.Height >= 10)                      inkCanvas1.EraserShape = new System.Windows.Ink.RectangleStylusShape(inkCanvas1.EraserShape.Height - 10' inkCanvas1.EraserShape.Width - 10);              }
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,inkCanvasThicker_Hover,The following statement contains a magic number: if (inkCanvas1.EditingMode != System.Windows.Controls.InkCanvasEditingMode.EraseByPoint)              {                  inkCanvas1.DefaultDrawingAttributes.Height += 2;                  inkCanvas1.DefaultDrawingAttributes.Width += 2;              }              else              {                  inkCanvas1.EraserShape = new System.Windows.Ink.RectangleStylusShape(inkCanvas1.EraserShape.Height + 2' inkCanvas1.EraserShape.Width + 2);              }
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,inkCanvasThicker_Hover,The following statement contains a magic number: if (inkCanvas1.EditingMode != System.Windows.Controls.InkCanvasEditingMode.EraseByPoint)              {                  inkCanvas1.DefaultDrawingAttributes.Height += 2;                  inkCanvas1.DefaultDrawingAttributes.Width += 2;              }              else              {                  inkCanvas1.EraserShape = new System.Windows.Ink.RectangleStylusShape(inkCanvas1.EraserShape.Height + 2' inkCanvas1.EraserShape.Width + 2);              }
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,inkCanvasThicker_Hover,The following statement contains a magic number: if (inkCanvas1.EditingMode != System.Windows.Controls.InkCanvasEditingMode.EraseByPoint)              {                  inkCanvas1.DefaultDrawingAttributes.Height += 2;                  inkCanvas1.DefaultDrawingAttributes.Width += 2;              }              else              {                  inkCanvas1.EraserShape = new System.Windows.Ink.RectangleStylusShape(inkCanvas1.EraserShape.Height + 2' inkCanvas1.EraserShape.Width + 2);              }
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,inkCanvasThicker_Hover,The following statement contains a magic number: if (inkCanvas1.EditingMode != System.Windows.Controls.InkCanvasEditingMode.EraseByPoint)              {                  inkCanvas1.DefaultDrawingAttributes.Height += 2;                  inkCanvas1.DefaultDrawingAttributes.Width += 2;              }              else              {                  inkCanvas1.EraserShape = new System.Windows.Ink.RectangleStylusShape(inkCanvas1.EraserShape.Height + 2' inkCanvas1.EraserShape.Width + 2);              }
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,inkCanvasThicker_Click,The following statement contains a magic number: if (inkCanvas1.EditingMode != System.Windows.Controls.InkCanvasEditingMode.EraseByPoint)              {                  inkCanvas1.DefaultDrawingAttributes.Height += 10;                  inkCanvas1.DefaultDrawingAttributes.Width += 10;              }              else              {                  inkCanvas1.EraserShape = new System.Windows.Ink.RectangleStylusShape(inkCanvas1.EraserShape.Height + 10' inkCanvas1.EraserShape.Width + 10);              }
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,inkCanvasThicker_Click,The following statement contains a magic number: if (inkCanvas1.EditingMode != System.Windows.Controls.InkCanvasEditingMode.EraseByPoint)              {                  inkCanvas1.DefaultDrawingAttributes.Height += 10;                  inkCanvas1.DefaultDrawingAttributes.Width += 10;              }              else              {                  inkCanvas1.EraserShape = new System.Windows.Ink.RectangleStylusShape(inkCanvas1.EraserShape.Height + 10' inkCanvas1.EraserShape.Width + 10);              }
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,inkCanvasThicker_Click,The following statement contains a magic number: if (inkCanvas1.EditingMode != System.Windows.Controls.InkCanvasEditingMode.EraseByPoint)              {                  inkCanvas1.DefaultDrawingAttributes.Height += 10;                  inkCanvas1.DefaultDrawingAttributes.Width += 10;              }              else              {                  inkCanvas1.EraserShape = new System.Windows.Ink.RectangleStylusShape(inkCanvas1.EraserShape.Height + 10' inkCanvas1.EraserShape.Width + 10);              }
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,inkCanvasThicker_Click,The following statement contains a magic number: if (inkCanvas1.EditingMode != System.Windows.Controls.InkCanvasEditingMode.EraseByPoint)              {                  inkCanvas1.DefaultDrawingAttributes.Height += 10;                  inkCanvas1.DefaultDrawingAttributes.Width += 10;              }              else              {                  inkCanvas1.EraserShape = new System.Windows.Ink.RectangleStylusShape(inkCanvas1.EraserShape.Height + 10' inkCanvas1.EraserShape.Width + 10);              }
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,PhotoDemo_TakePicture,The following statement contains a magic number: Bitmap _latestFrame_Resize = new Bitmap(_latestFrame' 640' 480);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,PhotoDemo_TakePicture,The following statement contains a magic number: Bitmap _latestFrame_Resize = new Bitmap(_latestFrame' 640' 480);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,photoDemo_TakePhoto_Hover,The following statement contains a magic number: Timer.Interval = 1000;
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,Timer_Tick,The following statement contains a magic number: if (timerSum >= 3)              {                  Timer.Stop();                  Timer.Dispose();                  timerSum = 0;                  System.Media.SystemSounds.Asterisk.Play();                  PhotoDemo_TakePicture();                  buttonGalleryDemo_Click(this' eArgs);              }              else              {                  System.Media.SystemSounds.Beep.Play();                  timerSum++;              }
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,buttonPreviewDemo_Click,The following statement contains a magic number: if (previewDemo == false)              {                  StopOtherApps(this' e);                  previewDemo = true;                  labelDemoName.Text = "Preview";                  buttonPreviewDemo.Text = "Stop Preview";                  labelDemoInstructions.Enabled = true;                  labelDemoInstructions.Text = "Preview Demo Instructions:\n\n"                      + "Preivew.\n";                    if (_touchlessMgr.MarkerCount >= 2)                  {                        //Set the images                      _image = new Bitmap("pics/0.jpg");                      _imageWidth = _image.Width;                      _imageHeight = _image.Height;                        // Initialize the bounds                      _captureWidth = _touchlessMgr.CurrentCamera.CaptureWidth;                      _captureHeight = _touchlessMgr.CurrentCamera.CaptureHeight;                      _displayWidth = 1024;                      _displayHeight = 768;                      _displayScale = _displayWidth / _touchlessMgr.CurrentCamera.CaptureWidth;                        // Initialize the points used for placing the image                      _destPoints = new Point[3];                      _destPoints[0] = new Point();                      _destPoints[1] = new Point();                      _destPoints[2] = new Point();                        // Calculate the image's diagonal length                      _imageDiagonal = (float)Math.Sqrt(_imageWidth * _imageWidth + _imageHeight * _imageHeight);                      // The angle from the lower-left corner to the upper right corner (from North)                      _imageDiagonalAngle = (float)Math.Atan2(_imageWidth' _imageHeight);                                            //draw here                      pictureBoxPreview.Show();                      pictureBoxPreview.Paint += new PaintEventHandler(updateImage);                  }                  else                  {                      MessageBox.Show("Need 2 markers");                      buttonPreviewDemo_Click(this' e);                  }              }              else              {                    previewDemo = false;                  labelDemoName.Text = "WUW";                  buttonPreviewDemo.Text = "Preview";                  pictureBoxPreview.Hide();                  Cursor = Cursors.Arrow;                  labelDemoInstructions.Enabled = false;                  labelDemoInstructions.Text = "";                  ResetEnvironment();              }
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,buttonPreviewDemo_Click,The following statement contains a magic number: if (previewDemo == false)              {                  StopOtherApps(this' e);                  previewDemo = true;                  labelDemoName.Text = "Preview";                  buttonPreviewDemo.Text = "Stop Preview";                  labelDemoInstructions.Enabled = true;                  labelDemoInstructions.Text = "Preview Demo Instructions:\n\n"                      + "Preivew.\n";                    if (_touchlessMgr.MarkerCount >= 2)                  {                        //Set the images                      _image = new Bitmap("pics/0.jpg");                      _imageWidth = _image.Width;                      _imageHeight = _image.Height;                        // Initialize the bounds                      _captureWidth = _touchlessMgr.CurrentCamera.CaptureWidth;                      _captureHeight = _touchlessMgr.CurrentCamera.CaptureHeight;                      _displayWidth = 1024;                      _displayHeight = 768;                      _displayScale = _displayWidth / _touchlessMgr.CurrentCamera.CaptureWidth;                        // Initialize the points used for placing the image                      _destPoints = new Point[3];                      _destPoints[0] = new Point();                      _destPoints[1] = new Point();                      _destPoints[2] = new Point();                        // Calculate the image's diagonal length                      _imageDiagonal = (float)Math.Sqrt(_imageWidth * _imageWidth + _imageHeight * _imageHeight);                      // The angle from the lower-left corner to the upper right corner (from North)                      _imageDiagonalAngle = (float)Math.Atan2(_imageWidth' _imageHeight);                                            //draw here                      pictureBoxPreview.Show();                      pictureBoxPreview.Paint += new PaintEventHandler(updateImage);                  }                  else                  {                      MessageBox.Show("Need 2 markers");                      buttonPreviewDemo_Click(this' e);                  }              }              else              {                    previewDemo = false;                  labelDemoName.Text = "WUW";                  buttonPreviewDemo.Text = "Preview";                  pictureBoxPreview.Hide();                  Cursor = Cursors.Arrow;                  labelDemoInstructions.Enabled = false;                  labelDemoInstructions.Text = "";                  ResetEnvironment();              }
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,buttonPreviewDemo_Click,The following statement contains a magic number: if (previewDemo == false)              {                  StopOtherApps(this' e);                  previewDemo = true;                  labelDemoName.Text = "Preview";                  buttonPreviewDemo.Text = "Stop Preview";                  labelDemoInstructions.Enabled = true;                  labelDemoInstructions.Text = "Preview Demo Instructions:\n\n"                      + "Preivew.\n";                    if (_touchlessMgr.MarkerCount >= 2)                  {                        //Set the images                      _image = new Bitmap("pics/0.jpg");                      _imageWidth = _image.Width;                      _imageHeight = _image.Height;                        // Initialize the bounds                      _captureWidth = _touchlessMgr.CurrentCamera.CaptureWidth;                      _captureHeight = _touchlessMgr.CurrentCamera.CaptureHeight;                      _displayWidth = 1024;                      _displayHeight = 768;                      _displayScale = _displayWidth / _touchlessMgr.CurrentCamera.CaptureWidth;                        // Initialize the points used for placing the image                      _destPoints = new Point[3];                      _destPoints[0] = new Point();                      _destPoints[1] = new Point();                      _destPoints[2] = new Point();                        // Calculate the image's diagonal length                      _imageDiagonal = (float)Math.Sqrt(_imageWidth * _imageWidth + _imageHeight * _imageHeight);                      // The angle from the lower-left corner to the upper right corner (from North)                      _imageDiagonalAngle = (float)Math.Atan2(_imageWidth' _imageHeight);                                            //draw here                      pictureBoxPreview.Show();                      pictureBoxPreview.Paint += new PaintEventHandler(updateImage);                  }                  else                  {                      MessageBox.Show("Need 2 markers");                      buttonPreviewDemo_Click(this' e);                  }              }              else              {                    previewDemo = false;                  labelDemoName.Text = "WUW";                  buttonPreviewDemo.Text = "Preview";                  pictureBoxPreview.Hide();                  Cursor = Cursors.Arrow;                  labelDemoInstructions.Enabled = false;                  labelDemoInstructions.Text = "";                  ResetEnvironment();              }
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,buttonPreviewDemo_Click,The following statement contains a magic number: if (previewDemo == false)              {                  StopOtherApps(this' e);                  previewDemo = true;                  labelDemoName.Text = "Preview";                  buttonPreviewDemo.Text = "Stop Preview";                  labelDemoInstructions.Enabled = true;                  labelDemoInstructions.Text = "Preview Demo Instructions:\n\n"                      + "Preivew.\n";                    if (_touchlessMgr.MarkerCount >= 2)                  {                        //Set the images                      _image = new Bitmap("pics/0.jpg");                      _imageWidth = _image.Width;                      _imageHeight = _image.Height;                        // Initialize the bounds                      _captureWidth = _touchlessMgr.CurrentCamera.CaptureWidth;                      _captureHeight = _touchlessMgr.CurrentCamera.CaptureHeight;                      _displayWidth = 1024;                      _displayHeight = 768;                      _displayScale = _displayWidth / _touchlessMgr.CurrentCamera.CaptureWidth;                        // Initialize the points used for placing the image                      _destPoints = new Point[3];                      _destPoints[0] = new Point();                      _destPoints[1] = new Point();                      _destPoints[2] = new Point();                        // Calculate the image's diagonal length                      _imageDiagonal = (float)Math.Sqrt(_imageWidth * _imageWidth + _imageHeight * _imageHeight);                      // The angle from the lower-left corner to the upper right corner (from North)                      _imageDiagonalAngle = (float)Math.Atan2(_imageWidth' _imageHeight);                                            //draw here                      pictureBoxPreview.Show();                      pictureBoxPreview.Paint += new PaintEventHandler(updateImage);                  }                  else                  {                      MessageBox.Show("Need 2 markers");                      buttonPreviewDemo_Click(this' e);                  }              }              else              {                    previewDemo = false;                  labelDemoName.Text = "WUW";                  buttonPreviewDemo.Text = "Preview";                  pictureBoxPreview.Hide();                  Cursor = Cursors.Arrow;                  labelDemoInstructions.Enabled = false;                  labelDemoInstructions.Text = "";                  ResetEnvironment();              }
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,buttonPreviewDemo_Click,The following statement contains a magic number: if (previewDemo == false)              {                  StopOtherApps(this' e);                  previewDemo = true;                  labelDemoName.Text = "Preview";                  buttonPreviewDemo.Text = "Stop Preview";                  labelDemoInstructions.Enabled = true;                  labelDemoInstructions.Text = "Preview Demo Instructions:\n\n"                      + "Preivew.\n";                    if (_touchlessMgr.MarkerCount >= 2)                  {                        //Set the images                      _image = new Bitmap("pics/0.jpg");                      _imageWidth = _image.Width;                      _imageHeight = _image.Height;                        // Initialize the bounds                      _captureWidth = _touchlessMgr.CurrentCamera.CaptureWidth;                      _captureHeight = _touchlessMgr.CurrentCamera.CaptureHeight;                      _displayWidth = 1024;                      _displayHeight = 768;                      _displayScale = _displayWidth / _touchlessMgr.CurrentCamera.CaptureWidth;                        // Initialize the points used for placing the image                      _destPoints = new Point[3];                      _destPoints[0] = new Point();                      _destPoints[1] = new Point();                      _destPoints[2] = new Point();                        // Calculate the image's diagonal length                      _imageDiagonal = (float)Math.Sqrt(_imageWidth * _imageWidth + _imageHeight * _imageHeight);                      // The angle from the lower-left corner to the upper right corner (from North)                      _imageDiagonalAngle = (float)Math.Atan2(_imageWidth' _imageHeight);                                            //draw here                      pictureBoxPreview.Show();                      pictureBoxPreview.Paint += new PaintEventHandler(updateImage);                  }                  else                  {                      MessageBox.Show("Need 2 markers");                      buttonPreviewDemo_Click(this' e);                  }              }              else              {                    previewDemo = false;                  labelDemoName.Text = "WUW";                  buttonPreviewDemo.Text = "Preview";                  pictureBoxPreview.Hide();                  Cursor = Cursors.Arrow;                  labelDemoInstructions.Enabled = false;                  labelDemoInstructions.Text = "";                  ResetEnvironment();              }
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,recalculateTransformation,The following statement contains a magic number: if (_destPoints[2].IsEmpty || _destPoints[1].IsEmpty)                  return;
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,recalculateTransformation,The following statement contains a magic number: Point lowerLeft = _destPoints[2];
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,updateImageM,The following statement contains a magic number: _destPoints[2].X = (int)(args.EventData.X * _displayScale);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,updateImageM,The following statement contains a magic number: _destPoints[2].Y = (int)(args.EventData.Y * _displayScale);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InternetConnectionExists,The following statement contains a magic number: try              {                  System.Net.Sockets.TcpClient clnt = new System.Net.Sockets.TcpClient("www.google.com"' 80);                  clnt.Close();                  return true;              }              catch (System.Exception)              {                  return false;              }
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,buttonNewsPaperDemo_Click,The following statement contains a magic number: if (newspaperDemo == false)              {                                    StopOtherApps(this' e);                                  newspaperDemo = true;                  labelDemoName.Text = "NewsPaper";                  buttonNewsPaperDemo.Text = "Stop NewsPaper";                                  labelDemoInstructions.Enabled = true;                  labelDemoInstructions.Text = "NewsPaper Demo Instructions:\n\n"                      + "NewsPaper Video.\n";                    System.Windows.Controls.MediaElement mediaElement1 = new System.Windows.Controls.MediaElement();                                      mediaElement1.Source = new Uri("C:\\Users\\Public\\Videos\\Sample Videos\\Lake.wmv");                  mediaElement1.Height = 768;                  mediaElement1.Width = 1024;                    //new code                  //new_x1 = 0;                  //new_y1 = 0;                  //new_x2 = 500;                  //new_y2 = 400;                    //new_Theta = Math.Atan2(new_y2 - new_y1' new_x2 - new_x1) - Math.Atan2(y2 - y1' x2 - x1);                  //new_distance = Math.Sqrt((new_x2 - new_x1) * (new_x2 - new_x1) + (new_y2 - new_y1) * (new_y2 - new_y1));                    //group.Children.Add(new System.Windows.Media.ScaleTransform(new_distance / distance' new_distance / distance' x1' y1));                  //group.Children.Add(new System.Windows.Media.RotateTransform(new_Theta / Math.PI * 180));                  //group.Children.Add(new System.Windows.Media.TranslateTransform(new_x1 - x1' new_y1 - y1));                    //mediaElement1.RenderTransform = group;                    //x1 = new_x1;                  //y1 = new_y1;                  //x2 = new_x2;                  //y2 = new_y2;                  //Theta = new_Theta;                  //distance = new_distance;                                                    elementHostNewsPaper.Child = mediaElement1;                    elementHostNewsPaper.Show();              }              else              {                  newspaperDemo = false;                  labelDemoName.Text = "WUW";                  buttonNewsPaperDemo.Text = "NewsPaper";                  elementHostNewsPaper.Hide();                  Cursor = Cursors.Arrow;                  labelDemoInstructions.Enabled = false;                  labelDemoInstructions.Text = "";                  ResetEnvironment();              }
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,buttonNewsPaperDemo_Click,The following statement contains a magic number: if (newspaperDemo == false)              {                                    StopOtherApps(this' e);                                  newspaperDemo = true;                  labelDemoName.Text = "NewsPaper";                  buttonNewsPaperDemo.Text = "Stop NewsPaper";                                  labelDemoInstructions.Enabled = true;                  labelDemoInstructions.Text = "NewsPaper Demo Instructions:\n\n"                      + "NewsPaper Video.\n";                    System.Windows.Controls.MediaElement mediaElement1 = new System.Windows.Controls.MediaElement();                                      mediaElement1.Source = new Uri("C:\\Users\\Public\\Videos\\Sample Videos\\Lake.wmv");                  mediaElement1.Height = 768;                  mediaElement1.Width = 1024;                    //new code                  //new_x1 = 0;                  //new_y1 = 0;                  //new_x2 = 500;                  //new_y2 = 400;                    //new_Theta = Math.Atan2(new_y2 - new_y1' new_x2 - new_x1) - Math.Atan2(y2 - y1' x2 - x1);                  //new_distance = Math.Sqrt((new_x2 - new_x1) * (new_x2 - new_x1) + (new_y2 - new_y1) * (new_y2 - new_y1));                    //group.Children.Add(new System.Windows.Media.ScaleTransform(new_distance / distance' new_distance / distance' x1' y1));                  //group.Children.Add(new System.Windows.Media.RotateTransform(new_Theta / Math.PI * 180));                  //group.Children.Add(new System.Windows.Media.TranslateTransform(new_x1 - x1' new_y1 - y1));                    //mediaElement1.RenderTransform = group;                    //x1 = new_x1;                  //y1 = new_y1;                  //x2 = new_x2;                  //y2 = new_y2;                  //Theta = new_Theta;                  //distance = new_distance;                                                    elementHostNewsPaper.Child = mediaElement1;                    elementHostNewsPaper.Show();              }              else              {                  newspaperDemo = false;                  labelDemoName.Text = "WUW";                  buttonNewsPaperDemo.Text = "NewsPaper";                  elementHostNewsPaper.Hide();                  Cursor = Cursors.Arrow;                  labelDemoInstructions.Enabled = false;                  labelDemoInstructions.Text = "";                  ResetEnvironment();              }
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,buttonBookDemo_Click,The following statement contains a magic number: if (bookDemo == false)              {                  StopOtherApps(this' e);                                  bookDemo = true;                  labelDemoName.Text = "Book";                  buttonBookDemo.Text = "Stop Book";                  labelDemoInstructions.Enabled = true;                  labelDemoInstructions.Text = "Book Demo Instructions:\n\n"                      + "Book \n";                    //pictureBoxAlbum.Show();                  lblResult.Hide();                    //NYAR                  //initialize nyar components.                  NyARParam ap = new NyARParam();                  ap.loadARParamFromFile(AR_CAMERA_FILE);                  ap.changeScreenSize(SCREEN_WIDTH' SCREEN_HEIGHT);                  _raster = new DsBGRX32Raster(SCREEN_WIDTH' SCREEN_HEIGHT' SCREEN_WIDTH * 32 / 8);                  _utils = new NyARD3dUtil();                    // For each pattern                  NyARCode code1 = new NyARCode(16' 16);                  code1.loadARPattFromFile(AR_CODE_FILE1);                  _ar1 = new NyARSingleDetectMarker(ap' code1' 80.0);                  _ar1.setContinueMode(false);                    NyARCode code2 = new NyARCode(16' 16);                  code2.loadARPattFromFile(AR_CODE_FILE2);                  _ar2 = new NyARSingleDetectMarker(ap' code2' 80.0);                  _ar2.setContinueMode(false);                    NyARCode code3 = new NyARCode(16' 16);                  code3.loadARPattFromFile(AR_CODE_FILE3);                  _ar3 = new NyARSingleDetectMarker(ap' code3' 80.0);                  _ar3.setContinueMode(false);                    NyARCode code4 = new NyARCode(16' 16);                  code4.loadARPattFromFile(AR_CODE_FILE4);                  _ar4 = new NyARSingleDetectMarker(ap' code4' 80.0);                  _ar4.setContinueMode(false);              }              else              {                  bookDemo = false;                  labelDemoName.Text = "WUW";                  buttonBookDemo.Text = "Book";                  Cursor = Cursors.Arrow;                  labelDemoInstructions.Enabled = false;                  labelDemoInstructions.Text = "";                  ResetEnvironment();                    //pictureBoxAlbum.Hide();                  lblResult.Show();              }
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,buttonBookDemo_Click,The following statement contains a magic number: if (bookDemo == false)              {                  StopOtherApps(this' e);                                  bookDemo = true;                  labelDemoName.Text = "Book";                  buttonBookDemo.Text = "Stop Book";                  labelDemoInstructions.Enabled = true;                  labelDemoInstructions.Text = "Book Demo Instructions:\n\n"                      + "Book \n";                    //pictureBoxAlbum.Show();                  lblResult.Hide();                    //NYAR                  //initialize nyar components.                  NyARParam ap = new NyARParam();                  ap.loadARParamFromFile(AR_CAMERA_FILE);                  ap.changeScreenSize(SCREEN_WIDTH' SCREEN_HEIGHT);                  _raster = new DsBGRX32Raster(SCREEN_WIDTH' SCREEN_HEIGHT' SCREEN_WIDTH * 32 / 8);                  _utils = new NyARD3dUtil();                    // For each pattern                  NyARCode code1 = new NyARCode(16' 16);                  code1.loadARPattFromFile(AR_CODE_FILE1);                  _ar1 = new NyARSingleDetectMarker(ap' code1' 80.0);                  _ar1.setContinueMode(false);                    NyARCode code2 = new NyARCode(16' 16);                  code2.loadARPattFromFile(AR_CODE_FILE2);                  _ar2 = new NyARSingleDetectMarker(ap' code2' 80.0);                  _ar2.setContinueMode(false);                    NyARCode code3 = new NyARCode(16' 16);                  code3.loadARPattFromFile(AR_CODE_FILE3);                  _ar3 = new NyARSingleDetectMarker(ap' code3' 80.0);                  _ar3.setContinueMode(false);                    NyARCode code4 = new NyARCode(16' 16);                  code4.loadARPattFromFile(AR_CODE_FILE4);                  _ar4 = new NyARSingleDetectMarker(ap' code4' 80.0);                  _ar4.setContinueMode(false);              }              else              {                  bookDemo = false;                  labelDemoName.Text = "WUW";                  buttonBookDemo.Text = "Book";                  Cursor = Cursors.Arrow;                  labelDemoInstructions.Enabled = false;                  labelDemoInstructions.Text = "";                  ResetEnvironment();                    //pictureBoxAlbum.Hide();                  lblResult.Show();              }
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,buttonBookDemo_Click,The following statement contains a magic number: if (bookDemo == false)              {                  StopOtherApps(this' e);                                  bookDemo = true;                  labelDemoName.Text = "Book";                  buttonBookDemo.Text = "Stop Book";                  labelDemoInstructions.Enabled = true;                  labelDemoInstructions.Text = "Book Demo Instructions:\n\n"                      + "Book \n";                    //pictureBoxAlbum.Show();                  lblResult.Hide();                    //NYAR                  //initialize nyar components.                  NyARParam ap = new NyARParam();                  ap.loadARParamFromFile(AR_CAMERA_FILE);                  ap.changeScreenSize(SCREEN_WIDTH' SCREEN_HEIGHT);                  _raster = new DsBGRX32Raster(SCREEN_WIDTH' SCREEN_HEIGHT' SCREEN_WIDTH * 32 / 8);                  _utils = new NyARD3dUtil();                    // For each pattern                  NyARCode code1 = new NyARCode(16' 16);                  code1.loadARPattFromFile(AR_CODE_FILE1);                  _ar1 = new NyARSingleDetectMarker(ap' code1' 80.0);                  _ar1.setContinueMode(false);                    NyARCode code2 = new NyARCode(16' 16);                  code2.loadARPattFromFile(AR_CODE_FILE2);                  _ar2 = new NyARSingleDetectMarker(ap' code2' 80.0);                  _ar2.setContinueMode(false);                    NyARCode code3 = new NyARCode(16' 16);                  code3.loadARPattFromFile(AR_CODE_FILE3);                  _ar3 = new NyARSingleDetectMarker(ap' code3' 80.0);                  _ar3.setContinueMode(false);                    NyARCode code4 = new NyARCode(16' 16);                  code4.loadARPattFromFile(AR_CODE_FILE4);                  _ar4 = new NyARSingleDetectMarker(ap' code4' 80.0);                  _ar4.setContinueMode(false);              }              else              {                  bookDemo = false;                  labelDemoName.Text = "WUW";                  buttonBookDemo.Text = "Book";                  Cursor = Cursors.Arrow;                  labelDemoInstructions.Enabled = false;                  labelDemoInstructions.Text = "";                  ResetEnvironment();                    //pictureBoxAlbum.Hide();                  lblResult.Show();              }
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,buttonBookDemo_Click,The following statement contains a magic number: if (bookDemo == false)              {                  StopOtherApps(this' e);                                  bookDemo = true;                  labelDemoName.Text = "Book";                  buttonBookDemo.Text = "Stop Book";                  labelDemoInstructions.Enabled = true;                  labelDemoInstructions.Text = "Book Demo Instructions:\n\n"                      + "Book \n";                    //pictureBoxAlbum.Show();                  lblResult.Hide();                    //NYAR                  //initialize nyar components.                  NyARParam ap = new NyARParam();                  ap.loadARParamFromFile(AR_CAMERA_FILE);                  ap.changeScreenSize(SCREEN_WIDTH' SCREEN_HEIGHT);                  _raster = new DsBGRX32Raster(SCREEN_WIDTH' SCREEN_HEIGHT' SCREEN_WIDTH * 32 / 8);                  _utils = new NyARD3dUtil();                    // For each pattern                  NyARCode code1 = new NyARCode(16' 16);                  code1.loadARPattFromFile(AR_CODE_FILE1);                  _ar1 = new NyARSingleDetectMarker(ap' code1' 80.0);                  _ar1.setContinueMode(false);                    NyARCode code2 = new NyARCode(16' 16);                  code2.loadARPattFromFile(AR_CODE_FILE2);                  _ar2 = new NyARSingleDetectMarker(ap' code2' 80.0);                  _ar2.setContinueMode(false);                    NyARCode code3 = new NyARCode(16' 16);                  code3.loadARPattFromFile(AR_CODE_FILE3);                  _ar3 = new NyARSingleDetectMarker(ap' code3' 80.0);                  _ar3.setContinueMode(false);                    NyARCode code4 = new NyARCode(16' 16);                  code4.loadARPattFromFile(AR_CODE_FILE4);                  _ar4 = new NyARSingleDetectMarker(ap' code4' 80.0);                  _ar4.setContinueMode(false);              }              else              {                  bookDemo = false;                  labelDemoName.Text = "WUW";                  buttonBookDemo.Text = "Book";                  Cursor = Cursors.Arrow;                  labelDemoInstructions.Enabled = false;                  labelDemoInstructions.Text = "";                  ResetEnvironment();                    //pictureBoxAlbum.Hide();                  lblResult.Show();              }
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,buttonBookDemo_Click,The following statement contains a magic number: if (bookDemo == false)              {                  StopOtherApps(this' e);                                  bookDemo = true;                  labelDemoName.Text = "Book";                  buttonBookDemo.Text = "Stop Book";                  labelDemoInstructions.Enabled = true;                  labelDemoInstructions.Text = "Book Demo Instructions:\n\n"                      + "Book \n";                    //pictureBoxAlbum.Show();                  lblResult.Hide();                    //NYAR                  //initialize nyar components.                  NyARParam ap = new NyARParam();                  ap.loadARParamFromFile(AR_CAMERA_FILE);                  ap.changeScreenSize(SCREEN_WIDTH' SCREEN_HEIGHT);                  _raster = new DsBGRX32Raster(SCREEN_WIDTH' SCREEN_HEIGHT' SCREEN_WIDTH * 32 / 8);                  _utils = new NyARD3dUtil();                    // For each pattern                  NyARCode code1 = new NyARCode(16' 16);                  code1.loadARPattFromFile(AR_CODE_FILE1);                  _ar1 = new NyARSingleDetectMarker(ap' code1' 80.0);                  _ar1.setContinueMode(false);                    NyARCode code2 = new NyARCode(16' 16);                  code2.loadARPattFromFile(AR_CODE_FILE2);                  _ar2 = new NyARSingleDetectMarker(ap' code2' 80.0);                  _ar2.setContinueMode(false);                    NyARCode code3 = new NyARCode(16' 16);                  code3.loadARPattFromFile(AR_CODE_FILE3);                  _ar3 = new NyARSingleDetectMarker(ap' code3' 80.0);                  _ar3.setContinueMode(false);                    NyARCode code4 = new NyARCode(16' 16);                  code4.loadARPattFromFile(AR_CODE_FILE4);                  _ar4 = new NyARSingleDetectMarker(ap' code4' 80.0);                  _ar4.setContinueMode(false);              }              else              {                  bookDemo = false;                  labelDemoName.Text = "WUW";                  buttonBookDemo.Text = "Book";                  Cursor = Cursors.Arrow;                  labelDemoInstructions.Enabled = false;                  labelDemoInstructions.Text = "";                  ResetEnvironment();                    //pictureBoxAlbum.Hide();                  lblResult.Show();              }
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,buttonBookDemo_Click,The following statement contains a magic number: if (bookDemo == false)              {                  StopOtherApps(this' e);                                  bookDemo = true;                  labelDemoName.Text = "Book";                  buttonBookDemo.Text = "Stop Book";                  labelDemoInstructions.Enabled = true;                  labelDemoInstructions.Text = "Book Demo Instructions:\n\n"                      + "Book \n";                    //pictureBoxAlbum.Show();                  lblResult.Hide();                    //NYAR                  //initialize nyar components.                  NyARParam ap = new NyARParam();                  ap.loadARParamFromFile(AR_CAMERA_FILE);                  ap.changeScreenSize(SCREEN_WIDTH' SCREEN_HEIGHT);                  _raster = new DsBGRX32Raster(SCREEN_WIDTH' SCREEN_HEIGHT' SCREEN_WIDTH * 32 / 8);                  _utils = new NyARD3dUtil();                    // For each pattern                  NyARCode code1 = new NyARCode(16' 16);                  code1.loadARPattFromFile(AR_CODE_FILE1);                  _ar1 = new NyARSingleDetectMarker(ap' code1' 80.0);                  _ar1.setContinueMode(false);                    NyARCode code2 = new NyARCode(16' 16);                  code2.loadARPattFromFile(AR_CODE_FILE2);                  _ar2 = new NyARSingleDetectMarker(ap' code2' 80.0);                  _ar2.setContinueMode(false);                    NyARCode code3 = new NyARCode(16' 16);                  code3.loadARPattFromFile(AR_CODE_FILE3);                  _ar3 = new NyARSingleDetectMarker(ap' code3' 80.0);                  _ar3.setContinueMode(false);                    NyARCode code4 = new NyARCode(16' 16);                  code4.loadARPattFromFile(AR_CODE_FILE4);                  _ar4 = new NyARSingleDetectMarker(ap' code4' 80.0);                  _ar4.setContinueMode(false);              }              else              {                  bookDemo = false;                  labelDemoName.Text = "WUW";                  buttonBookDemo.Text = "Book";                  Cursor = Cursors.Arrow;                  labelDemoInstructions.Enabled = false;                  labelDemoInstructions.Text = "";                  ResetEnvironment();                    //pictureBoxAlbum.Hide();                  lblResult.Show();              }
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,buttonBookDemo_Click,The following statement contains a magic number: if (bookDemo == false)              {                  StopOtherApps(this' e);                                  bookDemo = true;                  labelDemoName.Text = "Book";                  buttonBookDemo.Text = "Stop Book";                  labelDemoInstructions.Enabled = true;                  labelDemoInstructions.Text = "Book Demo Instructions:\n\n"                      + "Book \n";                    //pictureBoxAlbum.Show();                  lblResult.Hide();                    //NYAR                  //initialize nyar components.                  NyARParam ap = new NyARParam();                  ap.loadARParamFromFile(AR_CAMERA_FILE);                  ap.changeScreenSize(SCREEN_WIDTH' SCREEN_HEIGHT);                  _raster = new DsBGRX32Raster(SCREEN_WIDTH' SCREEN_HEIGHT' SCREEN_WIDTH * 32 / 8);                  _utils = new NyARD3dUtil();                    // For each pattern                  NyARCode code1 = new NyARCode(16' 16);                  code1.loadARPattFromFile(AR_CODE_FILE1);                  _ar1 = new NyARSingleDetectMarker(ap' code1' 80.0);                  _ar1.setContinueMode(false);                    NyARCode code2 = new NyARCode(16' 16);                  code2.loadARPattFromFile(AR_CODE_FILE2);                  _ar2 = new NyARSingleDetectMarker(ap' code2' 80.0);                  _ar2.setContinueMode(false);                    NyARCode code3 = new NyARCode(16' 16);                  code3.loadARPattFromFile(AR_CODE_FILE3);                  _ar3 = new NyARSingleDetectMarker(ap' code3' 80.0);                  _ar3.setContinueMode(false);                    NyARCode code4 = new NyARCode(16' 16);                  code4.loadARPattFromFile(AR_CODE_FILE4);                  _ar4 = new NyARSingleDetectMarker(ap' code4' 80.0);                  _ar4.setContinueMode(false);              }              else              {                  bookDemo = false;                  labelDemoName.Text = "WUW";                  buttonBookDemo.Text = "Book";                  Cursor = Cursors.Arrow;                  labelDemoInstructions.Enabled = false;                  labelDemoInstructions.Text = "";                  ResetEnvironment();                    //pictureBoxAlbum.Hide();                  lblResult.Show();              }
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,buttonBookDemo_Click,The following statement contains a magic number: if (bookDemo == false)              {                  StopOtherApps(this' e);                                  bookDemo = true;                  labelDemoName.Text = "Book";                  buttonBookDemo.Text = "Stop Book";                  labelDemoInstructions.Enabled = true;                  labelDemoInstructions.Text = "Book Demo Instructions:\n\n"                      + "Book \n";                    //pictureBoxAlbum.Show();                  lblResult.Hide();                    //NYAR                  //initialize nyar components.                  NyARParam ap = new NyARParam();                  ap.loadARParamFromFile(AR_CAMERA_FILE);                  ap.changeScreenSize(SCREEN_WIDTH' SCREEN_HEIGHT);                  _raster = new DsBGRX32Raster(SCREEN_WIDTH' SCREEN_HEIGHT' SCREEN_WIDTH * 32 / 8);                  _utils = new NyARD3dUtil();                    // For each pattern                  NyARCode code1 = new NyARCode(16' 16);                  code1.loadARPattFromFile(AR_CODE_FILE1);                  _ar1 = new NyARSingleDetectMarker(ap' code1' 80.0);                  _ar1.setContinueMode(false);                    NyARCode code2 = new NyARCode(16' 16);                  code2.loadARPattFromFile(AR_CODE_FILE2);                  _ar2 = new NyARSingleDetectMarker(ap' code2' 80.0);                  _ar2.setContinueMode(false);                    NyARCode code3 = new NyARCode(16' 16);                  code3.loadARPattFromFile(AR_CODE_FILE3);                  _ar3 = new NyARSingleDetectMarker(ap' code3' 80.0);                  _ar3.setContinueMode(false);                    NyARCode code4 = new NyARCode(16' 16);                  code4.loadARPattFromFile(AR_CODE_FILE4);                  _ar4 = new NyARSingleDetectMarker(ap' code4' 80.0);                  _ar4.setContinueMode(false);              }              else              {                  bookDemo = false;                  labelDemoName.Text = "WUW";                  buttonBookDemo.Text = "Book";                  Cursor = Cursors.Arrow;                  labelDemoInstructions.Enabled = false;                  labelDemoInstructions.Text = "";                  ResetEnvironment();                    //pictureBoxAlbum.Hide();                  lblResult.Show();              }
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,buttonBookDemo_Click,The following statement contains a magic number: if (bookDemo == false)              {                  StopOtherApps(this' e);                                  bookDemo = true;                  labelDemoName.Text = "Book";                  buttonBookDemo.Text = "Stop Book";                  labelDemoInstructions.Enabled = true;                  labelDemoInstructions.Text = "Book Demo Instructions:\n\n"                      + "Book \n";                    //pictureBoxAlbum.Show();                  lblResult.Hide();                    //NYAR                  //initialize nyar components.                  NyARParam ap = new NyARParam();                  ap.loadARParamFromFile(AR_CAMERA_FILE);                  ap.changeScreenSize(SCREEN_WIDTH' SCREEN_HEIGHT);                  _raster = new DsBGRX32Raster(SCREEN_WIDTH' SCREEN_HEIGHT' SCREEN_WIDTH * 32 / 8);                  _utils = new NyARD3dUtil();                    // For each pattern                  NyARCode code1 = new NyARCode(16' 16);                  code1.loadARPattFromFile(AR_CODE_FILE1);                  _ar1 = new NyARSingleDetectMarker(ap' code1' 80.0);                  _ar1.setContinueMode(false);                    NyARCode code2 = new NyARCode(16' 16);                  code2.loadARPattFromFile(AR_CODE_FILE2);                  _ar2 = new NyARSingleDetectMarker(ap' code2' 80.0);                  _ar2.setContinueMode(false);                    NyARCode code3 = new NyARCode(16' 16);                  code3.loadARPattFromFile(AR_CODE_FILE3);                  _ar3 = new NyARSingleDetectMarker(ap' code3' 80.0);                  _ar3.setContinueMode(false);                    NyARCode code4 = new NyARCode(16' 16);                  code4.loadARPattFromFile(AR_CODE_FILE4);                  _ar4 = new NyARSingleDetectMarker(ap' code4' 80.0);                  _ar4.setContinueMode(false);              }              else              {                  bookDemo = false;                  labelDemoName.Text = "WUW";                  buttonBookDemo.Text = "Book";                  Cursor = Cursors.Arrow;                  labelDemoInstructions.Enabled = false;                  labelDemoInstructions.Text = "";                  ResetEnvironment();                    //pictureBoxAlbum.Hide();                  lblResult.Show();              }
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,buttonBookDemo_Click,The following statement contains a magic number: if (bookDemo == false)              {                  StopOtherApps(this' e);                                  bookDemo = true;                  labelDemoName.Text = "Book";                  buttonBookDemo.Text = "Stop Book";                  labelDemoInstructions.Enabled = true;                  labelDemoInstructions.Text = "Book Demo Instructions:\n\n"                      + "Book \n";                    //pictureBoxAlbum.Show();                  lblResult.Hide();                    //NYAR                  //initialize nyar components.                  NyARParam ap = new NyARParam();                  ap.loadARParamFromFile(AR_CAMERA_FILE);                  ap.changeScreenSize(SCREEN_WIDTH' SCREEN_HEIGHT);                  _raster = new DsBGRX32Raster(SCREEN_WIDTH' SCREEN_HEIGHT' SCREEN_WIDTH * 32 / 8);                  _utils = new NyARD3dUtil();                    // For each pattern                  NyARCode code1 = new NyARCode(16' 16);                  code1.loadARPattFromFile(AR_CODE_FILE1);                  _ar1 = new NyARSingleDetectMarker(ap' code1' 80.0);                  _ar1.setContinueMode(false);                    NyARCode code2 = new NyARCode(16' 16);                  code2.loadARPattFromFile(AR_CODE_FILE2);                  _ar2 = new NyARSingleDetectMarker(ap' code2' 80.0);                  _ar2.setContinueMode(false);                    NyARCode code3 = new NyARCode(16' 16);                  code3.loadARPattFromFile(AR_CODE_FILE3);                  _ar3 = new NyARSingleDetectMarker(ap' code3' 80.0);                  _ar3.setContinueMode(false);                    NyARCode code4 = new NyARCode(16' 16);                  code4.loadARPattFromFile(AR_CODE_FILE4);                  _ar4 = new NyARSingleDetectMarker(ap' code4' 80.0);                  _ar4.setContinueMode(false);              }              else              {                  bookDemo = false;                  labelDemoName.Text = "WUW";                  buttonBookDemo.Text = "Book";                  Cursor = Cursors.Arrow;                  labelDemoInstructions.Enabled = false;                  labelDemoInstructions.Text = "";                  ResetEnvironment();                    //pictureBoxAlbum.Hide();                  lblResult.Show();              }
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,buttonBookDemo_Click,The following statement contains a magic number: if (bookDemo == false)              {                  StopOtherApps(this' e);                                  bookDemo = true;                  labelDemoName.Text = "Book";                  buttonBookDemo.Text = "Stop Book";                  labelDemoInstructions.Enabled = true;                  labelDemoInstructions.Text = "Book Demo Instructions:\n\n"                      + "Book \n";                    //pictureBoxAlbum.Show();                  lblResult.Hide();                    //NYAR                  //initialize nyar components.                  NyARParam ap = new NyARParam();                  ap.loadARParamFromFile(AR_CAMERA_FILE);                  ap.changeScreenSize(SCREEN_WIDTH' SCREEN_HEIGHT);                  _raster = new DsBGRX32Raster(SCREEN_WIDTH' SCREEN_HEIGHT' SCREEN_WIDTH * 32 / 8);                  _utils = new NyARD3dUtil();                    // For each pattern                  NyARCode code1 = new NyARCode(16' 16);                  code1.loadARPattFromFile(AR_CODE_FILE1);                  _ar1 = new NyARSingleDetectMarker(ap' code1' 80.0);                  _ar1.setContinueMode(false);                    NyARCode code2 = new NyARCode(16' 16);                  code2.loadARPattFromFile(AR_CODE_FILE2);                  _ar2 = new NyARSingleDetectMarker(ap' code2' 80.0);                  _ar2.setContinueMode(false);                    NyARCode code3 = new NyARCode(16' 16);                  code3.loadARPattFromFile(AR_CODE_FILE3);                  _ar3 = new NyARSingleDetectMarker(ap' code3' 80.0);                  _ar3.setContinueMode(false);                    NyARCode code4 = new NyARCode(16' 16);                  code4.loadARPattFromFile(AR_CODE_FILE4);                  _ar4 = new NyARSingleDetectMarker(ap' code4' 80.0);                  _ar4.setContinueMode(false);              }              else              {                  bookDemo = false;                  labelDemoName.Text = "WUW";                  buttonBookDemo.Text = "Book";                  Cursor = Cursors.Arrow;                  labelDemoInstructions.Enabled = false;                  labelDemoInstructions.Text = "";                  ResetEnvironment();                    //pictureBoxAlbum.Hide();                  lblResult.Show();              }
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,buttonBookDemo_Click,The following statement contains a magic number: if (bookDemo == false)              {                  StopOtherApps(this' e);                                  bookDemo = true;                  labelDemoName.Text = "Book";                  buttonBookDemo.Text = "Stop Book";                  labelDemoInstructions.Enabled = true;                  labelDemoInstructions.Text = "Book Demo Instructions:\n\n"                      + "Book \n";                    //pictureBoxAlbum.Show();                  lblResult.Hide();                    //NYAR                  //initialize nyar components.                  NyARParam ap = new NyARParam();                  ap.loadARParamFromFile(AR_CAMERA_FILE);                  ap.changeScreenSize(SCREEN_WIDTH' SCREEN_HEIGHT);                  _raster = new DsBGRX32Raster(SCREEN_WIDTH' SCREEN_HEIGHT' SCREEN_WIDTH * 32 / 8);                  _utils = new NyARD3dUtil();                    // For each pattern                  NyARCode code1 = new NyARCode(16' 16);                  code1.loadARPattFromFile(AR_CODE_FILE1);                  _ar1 = new NyARSingleDetectMarker(ap' code1' 80.0);                  _ar1.setContinueMode(false);                    NyARCode code2 = new NyARCode(16' 16);                  code2.loadARPattFromFile(AR_CODE_FILE2);                  _ar2 = new NyARSingleDetectMarker(ap' code2' 80.0);                  _ar2.setContinueMode(false);                    NyARCode code3 = new NyARCode(16' 16);                  code3.loadARPattFromFile(AR_CODE_FILE3);                  _ar3 = new NyARSingleDetectMarker(ap' code3' 80.0);                  _ar3.setContinueMode(false);                    NyARCode code4 = new NyARCode(16' 16);                  code4.loadARPattFromFile(AR_CODE_FILE4);                  _ar4 = new NyARSingleDetectMarker(ap' code4' 80.0);                  _ar4.setContinueMode(false);              }              else              {                  bookDemo = false;                  labelDemoName.Text = "WUW";                  buttonBookDemo.Text = "Book";                  Cursor = Cursors.Arrow;                  labelDemoInstructions.Enabled = false;                  labelDemoInstructions.Text = "";                  ResetEnvironment();                    //pictureBoxAlbum.Hide();                  lblResult.Show();              }
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,buttonBookDemo_Click,The following statement contains a magic number: if (bookDemo == false)              {                  StopOtherApps(this' e);                                  bookDemo = true;                  labelDemoName.Text = "Book";                  buttonBookDemo.Text = "Stop Book";                  labelDemoInstructions.Enabled = true;                  labelDemoInstructions.Text = "Book Demo Instructions:\n\n"                      + "Book \n";                    //pictureBoxAlbum.Show();                  lblResult.Hide();                    //NYAR                  //initialize nyar components.                  NyARParam ap = new NyARParam();                  ap.loadARParamFromFile(AR_CAMERA_FILE);                  ap.changeScreenSize(SCREEN_WIDTH' SCREEN_HEIGHT);                  _raster = new DsBGRX32Raster(SCREEN_WIDTH' SCREEN_HEIGHT' SCREEN_WIDTH * 32 / 8);                  _utils = new NyARD3dUtil();                    // For each pattern                  NyARCode code1 = new NyARCode(16' 16);                  code1.loadARPattFromFile(AR_CODE_FILE1);                  _ar1 = new NyARSingleDetectMarker(ap' code1' 80.0);                  _ar1.setContinueMode(false);                    NyARCode code2 = new NyARCode(16' 16);                  code2.loadARPattFromFile(AR_CODE_FILE2);                  _ar2 = new NyARSingleDetectMarker(ap' code2' 80.0);                  _ar2.setContinueMode(false);                    NyARCode code3 = new NyARCode(16' 16);                  code3.loadARPattFromFile(AR_CODE_FILE3);                  _ar3 = new NyARSingleDetectMarker(ap' code3' 80.0);                  _ar3.setContinueMode(false);                    NyARCode code4 = new NyARCode(16' 16);                  code4.loadARPattFromFile(AR_CODE_FILE4);                  _ar4 = new NyARSingleDetectMarker(ap' code4' 80.0);                  _ar4.setContinueMode(false);              }              else              {                  bookDemo = false;                  labelDemoName.Text = "WUW";                  buttonBookDemo.Text = "Book";                  Cursor = Cursors.Arrow;                  labelDemoInstructions.Enabled = false;                  labelDemoInstructions.Text = "";                  ResetEnvironment();                    //pictureBoxAlbum.Hide();                  lblResult.Show();              }
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,buttonBookDemo_Click,The following statement contains a magic number: if (bookDemo == false)              {                  StopOtherApps(this' e);                                  bookDemo = true;                  labelDemoName.Text = "Book";                  buttonBookDemo.Text = "Stop Book";                  labelDemoInstructions.Enabled = true;                  labelDemoInstructions.Text = "Book Demo Instructions:\n\n"                      + "Book \n";                    //pictureBoxAlbum.Show();                  lblResult.Hide();                    //NYAR                  //initialize nyar components.                  NyARParam ap = new NyARParam();                  ap.loadARParamFromFile(AR_CAMERA_FILE);                  ap.changeScreenSize(SCREEN_WIDTH' SCREEN_HEIGHT);                  _raster = new DsBGRX32Raster(SCREEN_WIDTH' SCREEN_HEIGHT' SCREEN_WIDTH * 32 / 8);                  _utils = new NyARD3dUtil();                    // For each pattern                  NyARCode code1 = new NyARCode(16' 16);                  code1.loadARPattFromFile(AR_CODE_FILE1);                  _ar1 = new NyARSingleDetectMarker(ap' code1' 80.0);                  _ar1.setContinueMode(false);                    NyARCode code2 = new NyARCode(16' 16);                  code2.loadARPattFromFile(AR_CODE_FILE2);                  _ar2 = new NyARSingleDetectMarker(ap' code2' 80.0);                  _ar2.setContinueMode(false);                    NyARCode code3 = new NyARCode(16' 16);                  code3.loadARPattFromFile(AR_CODE_FILE3);                  _ar3 = new NyARSingleDetectMarker(ap' code3' 80.0);                  _ar3.setContinueMode(false);                    NyARCode code4 = new NyARCode(16' 16);                  code4.loadARPattFromFile(AR_CODE_FILE4);                  _ar4 = new NyARSingleDetectMarker(ap' code4' 80.0);                  _ar4.setContinueMode(false);              }              else              {                  bookDemo = false;                  labelDemoName.Text = "WUW";                  buttonBookDemo.Text = "Book";                  Cursor = Cursors.Arrow;                  labelDemoInstructions.Enabled = false;                  labelDemoInstructions.Text = "";                  ResetEnvironment();                    //pictureBoxAlbum.Hide();                  lblResult.Show();              }
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,nyar,The following statement contains a magic number: _ar1.detectMarkerLite(_raster' 110);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,nyar,The following statement contains a magic number: _ar2.detectMarkerLite(_raster' 110);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,nyar,The following statement contains a magic number: _ar3.detectMarkerLite(_raster' 110);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,nyar,The following statement contains a magic number: _ar4.detectMarkerLite(_raster' 110);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,nyar,The following statement contains a magic number: NyARSingleDetectMarker[] _arArray = new NyARSingleDetectMarker[4] { _ar1' _ar2' _ar3' _ar4 };
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,nyar,The following statement contains a magic number: is_marker_enable = _arFinal.detectMarkerLite(_raster' 110);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,nyar,The following statement contains a magic number: if (is_marker_enable && _arFinal.getConfidence() > 0.3)              {                  labelDemoName.Text = "Pattern #" + largestNyarIndex(_arArray) + "[" + _arFinal.getConfidence().ToString() + "]";              }              else              {                  labelDemoName.Text = "No Pattern";              }
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,Control_menu_AppListSelectionChanged,The following statement contains a magic number: switch (Control_menu.SelectedAppNumber)              {                  //DRAW                  case 0:                      buttonDrawDemo_Click(sender' e);                      return;                    //MAP                  case 1:                      buttonMapDemo_Click(sender' e);                      return;                                    //PHOTO                  case 2:                      buttonPhotoDemo_Click(sender' e);                      return;                    //GLOBE                  case 3:                      buttonGlobeDemo_Click(sender' e);                                          return;                    //MAIL                  case 4:                      buttonMailDemo_Click(sender' e);                      return;                    //WEATHER                  case 5:                      buttonWeatherDemo_Click(sender' e);                      return;                    //STOCK                  case 6:                      buttonStockDemo_Click(sender' e);                      return;                    //CLOCK                  case 7:                      buttonClockDemo_Click(sender' e);                      return;                    //GESTURE                  case 8:                      buttonGestureDemo_Click(sender' e);                      return;              }
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,Control_menu_AppListSelectionChanged,The following statement contains a magic number: switch (Control_menu.SelectedAppNumber)              {                  //DRAW                  case 0:                      buttonDrawDemo_Click(sender' e);                      return;                    //MAP                  case 1:                      buttonMapDemo_Click(sender' e);                      return;                                    //PHOTO                  case 2:                      buttonPhotoDemo_Click(sender' e);                      return;                    //GLOBE                  case 3:                      buttonGlobeDemo_Click(sender' e);                                          return;                    //MAIL                  case 4:                      buttonMailDemo_Click(sender' e);                      return;                    //WEATHER                  case 5:                      buttonWeatherDemo_Click(sender' e);                      return;                    //STOCK                  case 6:                      buttonStockDemo_Click(sender' e);                      return;                    //CLOCK                  case 7:                      buttonClockDemo_Click(sender' e);                      return;                    //GESTURE                  case 8:                      buttonGestureDemo_Click(sender' e);                      return;              }
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,Control_menu_AppListSelectionChanged,The following statement contains a magic number: switch (Control_menu.SelectedAppNumber)              {                  //DRAW                  case 0:                      buttonDrawDemo_Click(sender' e);                      return;                    //MAP                  case 1:                      buttonMapDemo_Click(sender' e);                      return;                                    //PHOTO                  case 2:                      buttonPhotoDemo_Click(sender' e);                      return;                    //GLOBE                  case 3:                      buttonGlobeDemo_Click(sender' e);                                          return;                    //MAIL                  case 4:                      buttonMailDemo_Click(sender' e);                      return;                    //WEATHER                  case 5:                      buttonWeatherDemo_Click(sender' e);                      return;                    //STOCK                  case 6:                      buttonStockDemo_Click(sender' e);                      return;                    //CLOCK                  case 7:                      buttonClockDemo_Click(sender' e);                      return;                    //GESTURE                  case 8:                      buttonGestureDemo_Click(sender' e);                      return;              }
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,Control_menu_AppListSelectionChanged,The following statement contains a magic number: switch (Control_menu.SelectedAppNumber)              {                  //DRAW                  case 0:                      buttonDrawDemo_Click(sender' e);                      return;                    //MAP                  case 1:                      buttonMapDemo_Click(sender' e);                      return;                                    //PHOTO                  case 2:                      buttonPhotoDemo_Click(sender' e);                      return;                    //GLOBE                  case 3:                      buttonGlobeDemo_Click(sender' e);                                          return;                    //MAIL                  case 4:                      buttonMailDemo_Click(sender' e);                      return;                    //WEATHER                  case 5:                      buttonWeatherDemo_Click(sender' e);                      return;                    //STOCK                  case 6:                      buttonStockDemo_Click(sender' e);                      return;                    //CLOCK                  case 7:                      buttonClockDemo_Click(sender' e);                      return;                    //GESTURE                  case 8:                      buttonGestureDemo_Click(sender' e);                      return;              }
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,Control_menu_AppListSelectionChanged,The following statement contains a magic number: switch (Control_menu.SelectedAppNumber)              {                  //DRAW                  case 0:                      buttonDrawDemo_Click(sender' e);                      return;                    //MAP                  case 1:                      buttonMapDemo_Click(sender' e);                      return;                                    //PHOTO                  case 2:                      buttonPhotoDemo_Click(sender' e);                      return;                    //GLOBE                  case 3:                      buttonGlobeDemo_Click(sender' e);                                          return;                    //MAIL                  case 4:                      buttonMailDemo_Click(sender' e);                      return;                    //WEATHER                  case 5:                      buttonWeatherDemo_Click(sender' e);                      return;                    //STOCK                  case 6:                      buttonStockDemo_Click(sender' e);                      return;                    //CLOCK                  case 7:                      buttonClockDemo_Click(sender' e);                      return;                    //GESTURE                  case 8:                      buttonGestureDemo_Click(sender' e);                      return;              }
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,Control_menu_AppListSelectionChanged,The following statement contains a magic number: switch (Control_menu.SelectedAppNumber)              {                  //DRAW                  case 0:                      buttonDrawDemo_Click(sender' e);                      return;                    //MAP                  case 1:                      buttonMapDemo_Click(sender' e);                      return;                                    //PHOTO                  case 2:                      buttonPhotoDemo_Click(sender' e);                      return;                    //GLOBE                  case 3:                      buttonGlobeDemo_Click(sender' e);                                          return;                    //MAIL                  case 4:                      buttonMailDemo_Click(sender' e);                      return;                    //WEATHER                  case 5:                      buttonWeatherDemo_Click(sender' e);                      return;                    //STOCK                  case 6:                      buttonStockDemo_Click(sender' e);                      return;                    //CLOCK                  case 7:                      buttonClockDemo_Click(sender' e);                      return;                    //GESTURE                  case 8:                      buttonGestureDemo_Click(sender' e);                      return;              }
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,Control_menu_AppListSelectionChanged,The following statement contains a magic number: switch (Control_menu.SelectedAppNumber)              {                  //DRAW                  case 0:                      buttonDrawDemo_Click(sender' e);                      return;                    //MAP                  case 1:                      buttonMapDemo_Click(sender' e);                      return;                                    //PHOTO                  case 2:                      buttonPhotoDemo_Click(sender' e);                      return;                    //GLOBE                  case 3:                      buttonGlobeDemo_Click(sender' e);                                          return;                    //MAIL                  case 4:                      buttonMailDemo_Click(sender' e);                      return;                    //WEATHER                  case 5:                      buttonWeatherDemo_Click(sender' e);                      return;                    //STOCK                  case 6:                      buttonStockDemo_Click(sender' e);                      return;                    //CLOCK                  case 7:                      buttonClockDemo_Click(sender' e);                      return;                    //GESTURE                  case 8:                      buttonGestureDemo_Click(sender' e);                      return;              }
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.pictureBoxDisplay.Location = new System.Drawing.Point(375' 239);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.pictureBoxDisplay.Location = new System.Drawing.Point(375' 239);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.pictureBoxDisplay.Size = new System.Drawing.Size(640' 480);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.pictureBoxDisplay.Size = new System.Drawing.Size(640' 480);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.tabSettings.ItemSize = new System.Drawing.Size(81' 25);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.tabSettings.ItemSize = new System.Drawing.Size(81' 25);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.tabSettings.Location = new System.Drawing.Point(375' 22);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.tabSettings.Location = new System.Drawing.Point(375' 22);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.tabSettings.Size = new System.Drawing.Size(640' 217);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.tabSettings.Size = new System.Drawing.Size(640' 217);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.tabSettings.TabIndex = 2;
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.tabPageCamera.Location = new System.Drawing.Point(4' 29);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.tabPageCamera.Location = new System.Drawing.Point(4' 29);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.tabPageCamera.Padding = new System.Windows.Forms.Padding(3);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.tabPageCamera.Size = new System.Drawing.Size(632' 184);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.tabPageCamera.Size = new System.Drawing.Size(632' 184);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.lblRecord.Location = new System.Drawing.Point(366' 9);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.lblRecord.Location = new System.Drawing.Point(366' 9);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.lblRecord.Size = new System.Drawing.Size(168' 24);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.lblRecord.Size = new System.Drawing.Size(168' 24);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.lblRecord.TabIndex = 26;
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.btnClear.Location = new System.Drawing.Point(413' 123);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.btnClear.Location = new System.Drawing.Point(413' 123);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.btnClear.Size = new System.Drawing.Size(75' 23);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.btnClear.Size = new System.Drawing.Size(75' 23);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.btnClear.TabIndex = 25;
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.btnView.Location = new System.Drawing.Point(413' 94);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.btnView.Location = new System.Drawing.Point(413' 94);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.btnView.Size = new System.Drawing.Size(75' 23);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.btnView.Size = new System.Drawing.Size(75' 23);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.btnView.TabIndex = 24;
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.btnLoad.Location = new System.Drawing.Point(413' 65);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.btnLoad.Location = new System.Drawing.Point(413' 65);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.btnLoad.Size = new System.Drawing.Size(75' 23);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.btnLoad.Size = new System.Drawing.Size(75' 23);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.btnLoad.TabIndex = 23;
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.btnRecord.Location = new System.Drawing.Point(413' 36);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.btnRecord.Location = new System.Drawing.Point(413' 36);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.btnRecord.Size = new System.Drawing.Size(75' 23);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.btnRecord.Size = new System.Drawing.Size(75' 23);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.btnRecord.TabIndex = 22;
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.groupBoxCameraInfo.Location = new System.Drawing.Point(3' 36);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.groupBoxCameraInfo.Location = new System.Drawing.Point(3' 36);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.groupBoxCameraInfo.Size = new System.Drawing.Size(267' 142);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.groupBoxCameraInfo.Size = new System.Drawing.Size(267' 142);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.groupBoxCameraInfo.TabIndex = 21;
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxCameraFPSLimit.Location = new System.Drawing.Point(9' 72);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxCameraFPSLimit.Location = new System.Drawing.Point(9' 72);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxCameraFPSLimit.Size = new System.Drawing.Size(185' 21);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxCameraFPSLimit.Size = new System.Drawing.Size(185' 21);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxCameraFPSLimit.TabIndex = 21;
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.labelCameraFPSValue.Location = new System.Drawing.Point(101' 50);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.labelCameraFPSValue.Location = new System.Drawing.Point(101' 50);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.labelCameraFPSValue.Size = new System.Drawing.Size(36' 17);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.labelCameraFPSValue.Size = new System.Drawing.Size(36' 17);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.labelCameraFPSValue.TabIndex = 20;
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownCameraFPSLimit.Increment = new decimal(new int[] {              5'              0'              0'              0});
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownCameraFPSLimit.Location = new System.Drawing.Point(198' 70);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownCameraFPSLimit.Location = new System.Drawing.Point(198' 70);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownCameraFPSLimit.Maximum = new decimal(new int[] {              30'              0'              0'              0});
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownCameraFPSLimit.Size = new System.Drawing.Size(50' 23);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownCameraFPSLimit.Size = new System.Drawing.Size(50' 23);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownCameraFPSLimit.TabIndex = 19;
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownCameraFPSLimit.Value = new decimal(new int[] {              30'              0'              0'              0});
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.labelCameraFPS.Location = new System.Drawing.Point(6' 50);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.labelCameraFPS.Location = new System.Drawing.Point(6' 50);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.labelCameraFPS.Size = new System.Drawing.Size(89' 17);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.labelCameraFPS.Size = new System.Drawing.Size(89' 17);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.buttonCameraProperties.Location = new System.Drawing.Point(6' 22);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.buttonCameraProperties.Location = new System.Drawing.Point(6' 22);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.buttonCameraProperties.Size = new System.Drawing.Size(242' 26);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.buttonCameraProperties.Size = new System.Drawing.Size(242' 26);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.buttonCameraProperties.TabIndex = 17;
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.comboBoxCameras.Location = new System.Drawing.Point(3' 6);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.comboBoxCameras.Location = new System.Drawing.Point(3' 6);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.comboBoxCameras.Size = new System.Drawing.Size(267' 24);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.comboBoxCameras.Size = new System.Drawing.Size(267' 24);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.comboBoxCameras.TabIndex = 15;
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.tabPageTokens.Location = new System.Drawing.Point(4' 29);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.tabPageTokens.Location = new System.Drawing.Point(4' 29);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.tabPageTokens.Padding = new System.Windows.Forms.Padding(3);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.tabPageTokens.Size = new System.Drawing.Size(632' 184);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.tabPageTokens.Size = new System.Drawing.Size(632' 184);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.buttonLoadMarkers.Location = new System.Drawing.Point(515' 6);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.buttonLoadMarkers.Location = new System.Drawing.Point(515' 6);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.buttonLoadMarkers.Size = new System.Drawing.Size(111' 26);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.buttonLoadMarkers.Size = new System.Drawing.Size(111' 26);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.buttonLoadMarkers.TabIndex = 30;
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.buttonSaveMarkers.Location = new System.Drawing.Point(401' 6);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.buttonSaveMarkers.Location = new System.Drawing.Point(401' 6);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.buttonSaveMarkers.Size = new System.Drawing.Size(108' 26);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.buttonSaveMarkers.Size = new System.Drawing.Size(108' 26);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.buttonSaveMarkers.TabIndex = 29;
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.lblMarkerCount.Location = new System.Drawing.Point(379' 10);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.lblMarkerCount.Location = new System.Drawing.Point(379' 10);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.lblMarkerCount.Size = new System.Drawing.Size(16' 17);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.lblMarkerCount.Size = new System.Drawing.Size(16' 17);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.lblMarkerCount.TabIndex = 28;
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.lblTotalMarker.Location = new System.Drawing.Point(274' 10);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.lblTotalMarker.Location = new System.Drawing.Point(274' 10);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.lblTotalMarker.Size = new System.Drawing.Size(99' 17);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.lblTotalMarker.Size = new System.Drawing.Size(99' 17);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.lblTotalMarker.TabIndex = 27;
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.groupBoxMarkerControl.Location = new System.Drawing.Point(3' 39);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.groupBoxMarkerControl.Location = new System.Drawing.Point(3' 39);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.groupBoxMarkerControl.Size = new System.Drawing.Size(623' 141);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.groupBoxMarkerControl.Size = new System.Drawing.Size(623' 141);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.groupBoxMarkerControl.TabIndex = 26;
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownMarkerThresh.Location = new System.Drawing.Point(149' 104);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownMarkerThresh.Location = new System.Drawing.Point(149' 104);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownMarkerThresh.Maximum = new decimal(new int[] {              10000'              0'              0'              0});
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownMarkerThresh.Size = new System.Drawing.Size(47' 23);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownMarkerThresh.Size = new System.Drawing.Size(47' 23);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownMarkerThresh.TabIndex = 5;
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.labelMarkerThresh.Location = new System.Drawing.Point(7' 106);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.labelMarkerThresh.Location = new System.Drawing.Point(7' 106);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.labelMarkerThresh.Size = new System.Drawing.Size(124' 17);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.labelMarkerThresh.Size = new System.Drawing.Size(124' 17);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.labelMarkerThresh.TabIndex = 4;
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxMarkerSmoothing.Location = new System.Drawing.Point(10' 82);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxMarkerSmoothing.Location = new System.Drawing.Point(10' 82);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxMarkerSmoothing.Size = new System.Drawing.Size(157' 21);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxMarkerSmoothing.Size = new System.Drawing.Size(157' 21);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxMarkerSmoothing.TabIndex = 3;
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxMarkerHighlight.Location = new System.Drawing.Point(10' 59);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxMarkerHighlight.Location = new System.Drawing.Point(10' 59);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxMarkerHighlight.Size = new System.Drawing.Size(130' 21);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxMarkerHighlight.Size = new System.Drawing.Size(130' 21);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxMarkerHighlight.TabIndex = 2;
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.labelMarkerData.Location = new System.Drawing.Point(202' 22);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.labelMarkerData.Location = new System.Drawing.Point(202' 22);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.labelMarkerData.Size = new System.Drawing.Size(412' 108);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.labelMarkerData.Size = new System.Drawing.Size(412' 108);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.buttonMarkerRemove.Location = new System.Drawing.Point(10' 25);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.buttonMarkerRemove.Location = new System.Drawing.Point(10' 25);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.buttonMarkerRemove.Size = new System.Drawing.Size(186' 26);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.buttonMarkerRemove.Size = new System.Drawing.Size(186' 26);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.comboBoxMarkers.Location = new System.Drawing.Point(120' 6);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.comboBoxMarkers.Location = new System.Drawing.Point(120' 6);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.comboBoxMarkers.Size = new System.Drawing.Size(146' 24);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.comboBoxMarkers.Size = new System.Drawing.Size(146' 24);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.comboBoxMarkers.TabIndex = 24;
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.buttonMarkerAdd.Location = new System.Drawing.Point(6' 5);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.buttonMarkerAdd.Location = new System.Drawing.Point(6' 5);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.buttonMarkerAdd.Size = new System.Drawing.Size(108' 26);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.buttonMarkerAdd.Size = new System.Drawing.Size(108' 26);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.buttonMarkerAdd.TabIndex = 23;
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.tabPageApps.Location = new System.Drawing.Point(4' 29);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.tabPageApps.Location = new System.Drawing.Point(4' 29);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.tabPageApps.Padding = new System.Windows.Forms.Padding(3);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.tabPageApps.Size = new System.Drawing.Size(632' 184);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.tabPageApps.Size = new System.Drawing.Size(632' 184);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.tabPageApps.TabIndex = 2;
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.checkBox_F.Location = new System.Drawing.Point(591' 154);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.checkBox_F.Location = new System.Drawing.Point(591' 154);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.checkBox_F.Size = new System.Drawing.Size(35' 21);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.checkBox_F.Size = new System.Drawing.Size(35' 21);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.checkBox_F.TabIndex = 46;
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.buttonEffectsDemo.Location = new System.Drawing.Point(118' 146);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.buttonEffectsDemo.Location = new System.Drawing.Point(118' 146);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.buttonEffectsDemo.Size = new System.Drawing.Size(106' 29);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.buttonEffectsDemo.Size = new System.Drawing.Size(106' 29);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.buttonEffectsDemo.TabIndex = 45;
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.buttonTestDemo.Location = new System.Drawing.Point(6' 6);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.buttonTestDemo.Location = new System.Drawing.Point(6' 6);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.buttonTestDemo.Size = new System.Drawing.Size(106' 29);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.buttonTestDemo.Size = new System.Drawing.Size(106' 29);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.buttonTestDemo.TabIndex = 44;
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.buttonGlobeDemo.Location = new System.Drawing.Point(118' 6);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.buttonGlobeDemo.Location = new System.Drawing.Point(118' 6);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.buttonGlobeDemo.Size = new System.Drawing.Size(106' 29);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.buttonGlobeDemo.Size = new System.Drawing.Size(106' 29);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.buttonGlobeDemo.TabIndex = 43;
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.buttonStockDemo.Location = new System.Drawing.Point(118' 111);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.buttonStockDemo.Location = new System.Drawing.Point(118' 111);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.buttonStockDemo.Size = new System.Drawing.Size(106' 29);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.buttonStockDemo.Size = new System.Drawing.Size(106' 29);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.buttonStockDemo.TabIndex = 42;
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.buttonGalleryDemo.Location = new System.Drawing.Point(6' 146);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.buttonGalleryDemo.Location = new System.Drawing.Point(6' 146);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.buttonGalleryDemo.Size = new System.Drawing.Size(106' 29);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.buttonGalleryDemo.Size = new System.Drawing.Size(106' 29);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.buttonGalleryDemo.TabIndex = 41;
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.buttonBookDemo.Location = new System.Drawing.Point(230' 41);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.buttonBookDemo.Location = new System.Drawing.Point(230' 41);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.buttonBookDemo.Size = new System.Drawing.Size(106' 29);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.buttonBookDemo.Size = new System.Drawing.Size(106' 29);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.buttonBookDemo.TabIndex = 40;
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.buttonMailDemo.Location = new System.Drawing.Point(118' 41);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.buttonMailDemo.Location = new System.Drawing.Point(118' 41);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.buttonMailDemo.Size = new System.Drawing.Size(106' 29);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.buttonMailDemo.Size = new System.Drawing.Size(106' 29);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.buttonMailDemo.TabIndex = 39;
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.buttonNewsPaperDemo.Location = new System.Drawing.Point(230' 6);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.buttonNewsPaperDemo.Location = new System.Drawing.Point(230' 6);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.buttonNewsPaperDemo.Size = new System.Drawing.Size(106' 29);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.buttonNewsPaperDemo.Size = new System.Drawing.Size(106' 29);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.buttonNewsPaperDemo.TabIndex = 38;
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.buttonWeatherDemo.Location = new System.Drawing.Point(118' 76);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.buttonWeatherDemo.Location = new System.Drawing.Point(118' 76);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.buttonWeatherDemo.Size = new System.Drawing.Size(106' 29);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.buttonWeatherDemo.Size = new System.Drawing.Size(106' 29);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.buttonWeatherDemo.TabIndex = 37;
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.buttonMenuDemo.Location = new System.Drawing.Point(230' 111);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.buttonMenuDemo.Location = new System.Drawing.Point(230' 111);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.buttonMenuDemo.Size = new System.Drawing.Size(106' 29);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.buttonMenuDemo.Size = new System.Drawing.Size(106' 29);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.buttonMenuDemo.TabIndex = 36;
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.buttonClockDemo.Location = new System.Drawing.Point(230' 76);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.buttonClockDemo.Location = new System.Drawing.Point(230' 76);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.buttonClockDemo.Size = new System.Drawing.Size(106' 29);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.buttonClockDemo.Size = new System.Drawing.Size(106' 29);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.buttonClockDemo.TabIndex = 35;
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.buttonPhotoDemo.Location = new System.Drawing.Point(6' 111);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.buttonPhotoDemo.Location = new System.Drawing.Point(6' 111);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.buttonPhotoDemo.Size = new System.Drawing.Size(74' 29);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.buttonPhotoDemo.Size = new System.Drawing.Size(74' 29);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.buttonPhotoDemo.TabIndex = 34;
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.buttonGestureDemo.Location = new System.Drawing.Point(230' 146);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.buttonGestureDemo.Location = new System.Drawing.Point(230' 146);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.buttonGestureDemo.Size = new System.Drawing.Size(106' 29);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.buttonGestureDemo.Size = new System.Drawing.Size(106' 29);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.buttonGestureDemo.TabIndex = 33;
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.buttonMapDemo.Location = new System.Drawing.Point(6' 76);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.buttonMapDemo.Location = new System.Drawing.Point(6' 76);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.buttonMapDemo.Size = new System.Drawing.Size(106' 29);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.buttonMapDemo.Size = new System.Drawing.Size(106' 29);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.buttonMapDemo.TabIndex = 32;
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.buttonDrawDemo.Location = new System.Drawing.Point(6' 41);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.buttonDrawDemo.Location = new System.Drawing.Point(6' 41);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.buttonDrawDemo.Size = new System.Drawing.Size(106' 29);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.buttonDrawDemo.Size = new System.Drawing.Size(106' 29);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.buttonDrawDemo.TabIndex = 31;
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.labelDemoInstructions.Location = new System.Drawing.Point(342' 6);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.labelDemoInstructions.Location = new System.Drawing.Point(342' 6);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.labelDemoInstructions.Size = new System.Drawing.Size(284' 134);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.labelDemoInstructions.Size = new System.Drawing.Size(284' 134);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.labelDemoInstructions.TabIndex = 29;
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.btnExit.FlatAppearance.MouseDownBackColor = System.Drawing.Color.FromArgb(((int)(((byte)(192))))' ((int)(((byte)(0))))' ((int)(((byte)(0)))));
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.btnExit.Location = new System.Drawing.Point(928' 10);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.btnExit.Location = new System.Drawing.Point(928' 10);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.btnExit.Size = new System.Drawing.Size(45' 33);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.btnExit.Size = new System.Drawing.Size(45' 33);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.btnShowHide.Location = new System.Drawing.Point(980' 10);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.btnShowHide.Location = new System.Drawing.Point(980' 10);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.btnShowHide.Size = new System.Drawing.Size(33' 33);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.btnShowHide.Size = new System.Drawing.Size(33' 33);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.elementHostDraw.Size = new System.Drawing.Size(1024' 768);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.elementHostDraw.Size = new System.Drawing.Size(1024' 768);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.elementHostDraw.TabIndex = 12;
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.labelM.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(64))))' ((int)(((byte)(0))))' ((int)(((byte)(0)))));
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.labelM.Location = new System.Drawing.Point(35' 9);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.labelM.Location = new System.Drawing.Point(35' 9);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.labelM.Padding = new System.Windows.Forms.Padding(3);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.labelM.Size = new System.Drawing.Size(22' 19);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.labelM.Size = new System.Drawing.Size(22' 19);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.labelM.TabIndex = 13;
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.labelN.Location = new System.Drawing.Point(35' 35);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.labelN.Location = new System.Drawing.Point(35' 35);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.labelN.Padding = new System.Windows.Forms.Padding(3);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.labelN.Size = new System.Drawing.Size(21' 19);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.labelN.Size = new System.Drawing.Size(21' 19);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.labelN.TabIndex = 14;
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.labelO.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(64))))' ((int)(((byte)(0))))' ((int)(((byte)(0)))));
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.labelO.Location = new System.Drawing.Point(9' 9);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.labelO.Location = new System.Drawing.Point(9' 9);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.labelO.Padding = new System.Windows.Forms.Padding(3);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.labelO.Size = new System.Drawing.Size(21' 19);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.labelO.Size = new System.Drawing.Size(21' 19);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.labelO.TabIndex = 15;
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.labelP.Location = new System.Drawing.Point(9' 35);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.labelP.Location = new System.Drawing.Point(9' 35);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.labelP.Padding = new System.Windows.Forms.Padding(3);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.labelP.Size = new System.Drawing.Size(20' 19);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.labelP.Size = new System.Drawing.Size(20' 19);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.labelP.TabIndex = 16;
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.labelDemoName.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(128))))' ((int)(((byte)(128))))' ((int)(((byte)(255)))));
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.labelDemoName.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(128))))' ((int)(((byte)(128))))' ((int)(((byte)(255)))));
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.labelDemoName.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(128))))' ((int)(((byte)(128))))' ((int)(((byte)(255)))));
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.labelDemoName.Location = new System.Drawing.Point(60' 9);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.labelDemoName.Location = new System.Drawing.Point(60' 9);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.labelDemoName.Size = new System.Drawing.Size(44' 16);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.labelDemoName.Size = new System.Drawing.Size(44' 16);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.labelDemoName.TabIndex = 17;
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.photoDemo_TakePhoto.Location = new System.Drawing.Point(776' 688);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.photoDemo_TakePhoto.Location = new System.Drawing.Point(776' 688);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.photoDemo_TakePhoto.Size = new System.Drawing.Size(239' 71);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.photoDemo_TakePhoto.Size = new System.Drawing.Size(239' 71);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.photoDemo_TakePhoto.TabIndex = 3;
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.lblResult.Location = new System.Drawing.Point(138' 9);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.lblResult.Location = new System.Drawing.Point(138' 9);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.lblResult.Size = new System.Drawing.Size(28' 13);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.lblResult.Size = new System.Drawing.Size(28' 13);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.lblResult.TabIndex = 21;
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.pictureBoxAlbum.Location = new System.Drawing.Point(200' 50);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.pictureBoxAlbum.Location = new System.Drawing.Point(200' 50);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.pictureBoxAlbum.Size = new System.Drawing.Size(640' 480);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.pictureBoxAlbum.Size = new System.Drawing.Size(640' 480);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.pictureBoxAlbum.TabIndex = 23;
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.drawPanel.Location = new System.Drawing.Point(957' 361);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.drawPanel.Location = new System.Drawing.Point(957' 361);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.drawPanel.Size = new System.Drawing.Size(58' 399);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.drawPanel.Size = new System.Drawing.Size(58' 399);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.drawPanel.TabIndex = 24;
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.inkCanvasGreen.Location = new System.Drawing.Point(3' 173);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.inkCanvasGreen.Location = new System.Drawing.Point(3' 173);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.inkCanvasGreen.Size = new System.Drawing.Size(50' 50);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.inkCanvasGreen.Size = new System.Drawing.Size(50' 50);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.inkCanvasGreen.TabIndex = 32;
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.inkCanvasRed.Location = new System.Drawing.Point(3' 61);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.inkCanvasRed.Location = new System.Drawing.Point(3' 61);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.inkCanvasRed.Size = new System.Drawing.Size(50' 50);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.inkCanvasRed.Size = new System.Drawing.Size(50' 50);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.inkCanvasRed.TabIndex = 31;
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.inkCanvasYellow.FlatAppearance.MouseOverBackColor = System.Drawing.Color.FromArgb(((int)(((byte)(192))))' ((int)(((byte)(192))))' ((int)(((byte)(255)))));
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.inkCanvasYellow.FlatAppearance.MouseOverBackColor = System.Drawing.Color.FromArgb(((int)(((byte)(192))))' ((int)(((byte)(192))))' ((int)(((byte)(255)))));
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.inkCanvasYellow.FlatAppearance.MouseOverBackColor = System.Drawing.Color.FromArgb(((int)(((byte)(192))))' ((int)(((byte)(192))))' ((int)(((byte)(255)))));
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.inkCanvasYellow.Location = new System.Drawing.Point(3' 117);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.inkCanvasYellow.Location = new System.Drawing.Point(3' 117);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.inkCanvasYellow.Size = new System.Drawing.Size(50' 50);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.inkCanvasYellow.Size = new System.Drawing.Size(50' 50);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.inkCanvasYellow.TabIndex = 30;
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.inkCanvasWhite.FlatAppearance.MouseOverBackColor = System.Drawing.Color.FromArgb(((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(128)))));
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.inkCanvasWhite.FlatAppearance.MouseOverBackColor = System.Drawing.Color.FromArgb(((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(128)))));
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.inkCanvasWhite.FlatAppearance.MouseOverBackColor = System.Drawing.Color.FromArgb(((int)(((byte)(255))))' ((int)(((byte)(255))))' ((int)(((byte)(128)))));
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.inkCanvasWhite.Location = new System.Drawing.Point(3' 5);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.inkCanvasWhite.Location = new System.Drawing.Point(3' 5);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.inkCanvasWhite.Size = new System.Drawing.Size(50' 50);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.inkCanvasWhite.Size = new System.Drawing.Size(50' 50);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.inkCanvasWhite.TabIndex = 29;
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.inkCanvasToggle.Font = new System.Drawing.Font("Microsoft Sans Serif"' 27.75F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(2)));
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.inkCanvasToggle.Location = new System.Drawing.Point(3' 340);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.inkCanvasToggle.Location = new System.Drawing.Point(3' 340);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.inkCanvasToggle.Size = new System.Drawing.Size(50' 50);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.inkCanvasToggle.Size = new System.Drawing.Size(50' 50);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.inkCanvasToggle.TabIndex = 28;
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.inkCanvasThicker.Location = new System.Drawing.Point(3' 284);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.inkCanvasThicker.Location = new System.Drawing.Point(3' 284);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.inkCanvasThicker.Size = new System.Drawing.Size(50' 50);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.inkCanvasThicker.Size = new System.Drawing.Size(50' 50);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.inkCanvasThicker.TabIndex = 27;
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.inkCanvasThinner.Location = new System.Drawing.Point(3' 229);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.inkCanvasThinner.Location = new System.Drawing.Point(3' 229);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.inkCanvasThinner.Size = new System.Drawing.Size(50' 50);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.inkCanvasThinner.Size = new System.Drawing.Size(50' 50);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.inkCanvasThinner.TabIndex = 26;
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.elementHostClock.Size = new System.Drawing.Size(1024' 768);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.elementHostClock.Size = new System.Drawing.Size(1024' 768);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.elementHostClock.TabIndex = 26;
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.elementHostWeather.Size = new System.Drawing.Size(1024' 768);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.elementHostWeather.Size = new System.Drawing.Size(1024' 768);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.elementHostWeather.TabIndex = 27;
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.elementHostMenu.Size = new System.Drawing.Size(1024' 768);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.elementHostMenu.Size = new System.Drawing.Size(1024' 768);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.elementHostMenu.TabIndex = 28;
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.elementHostStock.Size = new System.Drawing.Size(1024' 768);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.elementHostStock.Size = new System.Drawing.Size(1024' 768);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.elementHostStock.TabIndex = 34;
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.elementHostNewsPaper.Size = new System.Drawing.Size(1024' 768);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.elementHostNewsPaper.Size = new System.Drawing.Size(1024' 768);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.elementHostNewsPaper.TabIndex = 35;
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.webBrowserGallery.MinimumSize = new System.Drawing.Size(20' 20);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.webBrowserGallery.MinimumSize = new System.Drawing.Size(20' 20);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.webBrowserGallery.Size = new System.Drawing.Size(1024' 768);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.webBrowserGallery.Size = new System.Drawing.Size(1024' 768);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.webBrowserGallery.TabIndex = 36;
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.pictureBoxTestDemo.Size = new System.Drawing.Size(1024' 768);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.pictureBoxTestDemo.Size = new System.Drawing.Size(1024' 768);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.pictureBoxTestDemo.TabIndex = 37;
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.elementHostMail.Size = new System.Drawing.Size(1024' 768);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.elementHostMail.Size = new System.Drawing.Size(1024' 768);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.elementHostMail.TabIndex = 38;
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.webBrowserMap.MinimumSize = new System.Drawing.Size(20' 20);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.webBrowserMap.MinimumSize = new System.Drawing.Size(20' 20);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.webBrowserMap.Size = new System.Drawing.Size(1024' 768);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.webBrowserMap.Size = new System.Drawing.Size(1024' 768);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.webBrowserMap.TabIndex = 39;
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.pictureBoxPreview.Size = new System.Drawing.Size(1024' 768);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.pictureBoxPreview.Size = new System.Drawing.Size(1024' 768);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.pictureBoxPreview.TabIndex = 40;
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.buttonPreviewDemo.Location = new System.Drawing.Point(86' 111);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.buttonPreviewDemo.Location = new System.Drawing.Point(86' 111);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.buttonPreviewDemo.Size = new System.Drawing.Size(26' 29);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.buttonPreviewDemo.Size = new System.Drawing.Size(26' 29);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.buttonPreviewDemo.TabIndex = 47;
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(1024' 768);
Magic Number,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(1024' 768);
Missing Default,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,WUW_KeyDown,The following switch statement is missing a default case: switch (e.KeyCode)              {                  case Keys.Decimal:                      //MessageBox.Show("Gesture");                      buttonGestureDemo_Click(sender' e);                      break;                                    case Keys.NumPad0:                      //MessageBox.Show("MENU");                      buttonMenuDemo_Click(sender' e);                      break;                  case Keys.NumPad1:                      //MessageBox.Show("Demo 1");                      buttonTestDemo_Click(sender' e);                      break;                                    case Keys.NumPad2:                      //MessageBox.Show("Demo 2");                      buttonDrawDemo_Click(sender' e);                      break;                  case Keys.NumPad3:                      //MessageBox.Show("Demo 3");                      buttonMapDemo_Click(sender' e);                      break;                  case Keys.NumPad4:                      //MessageBox.Show("Demo 4");                      buttonPhotoDemo_Click(sender' e);                      break;                  case Keys.NumPad5:                      //MessageBox.Show("Demo 5");                      buttonGalleryDemo_Click(sender' e);                      break;                    case Keys.NumPad6:                      //MessageBox.Show("Demo 6");                      buttonGlobeDemo_Click(sender' e);                      break;                        //Mail' Weather' Stock                    case Keys.NumPad7:                      //MessageBox.Show("Demo 7");                      buttonEffectsDemo_Click(sender' e);                      break;                  case Keys.NumPad8:                      //MessageBox.Show("Demo 8");                      buttonNewsPaperDemo_Click(sender' e);                      break;                                        case Keys.NumPad9:                      //MessageBox.Show("Demo 9");                      buttonBookDemo_Click(sender' e);                      break;                        //Clock                    case Keys.Back:                      //MessageBox.Show("Back");                      break;                                  case Keys.Tab:                      //MessageBox.Show("Tab");                      break;                  case Keys.Divide:                      //MessageBox.Show("Devide");                      break;                  case Keys.Multiply:                      //MessageBox.Show("Multiply");                      break;                  case Keys.Add:                      //MessageBox.Show("Add");                      break;                  case Keys.Subtract:                      //MessageBox.Show("Subtract");                      break;                  case Keys.Enter:                      //MessageBox.Show("Enter");                      break;              }
Missing Default,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,inkCanvas1_KeyDown,The following switch statement is missing a default case: switch (e.Key)              {                  case System.Windows.Input.Key.Decimal:                      //MessageBox.Show("Gesture");                      buttonGestureDemo_Click(sender' e);                      break;                    case System.Windows.Input.Key.NumPad0:                      //MessageBox.Show("MENU");                      buttonMenuDemo_Click(sender' e);                      break;                  case System.Windows.Input.Key.NumPad1:                      //MessageBox.Show("Demo 1");                      buttonTestDemo_Click(sender' e);                      break;                    case System.Windows.Input.Key.NumPad2:                      //MessageBox.Show("Demo 2");                      buttonDrawDemo_Click(sender' e);                      break;                  case System.Windows.Input.Key.NumPad3:                      //MessageBox.Show("Demo 3");                      buttonMapDemo_Click(sender' e);                      break;                  case System.Windows.Input.Key.NumPad4:                      //MessageBox.Show("Demo 4");                      buttonPhotoDemo_Click(sender' e);                      break;                  case System.Windows.Input.Key.NumPad5:                      //MessageBox.Show("Demo 5");                      buttonGalleryDemo_Click(sender' e);                      break;                    case System.Windows.Input.Key.NumPad6:                      //MessageBox.Show("Demo 6");                      buttonGlobeDemo_Click(sender' e);                      break;                    //Mail' Weather' Stock                    case System.Windows.Input.Key.NumPad7:                      //MessageBox.Show("Demo 7");                      buttonEffectsDemo_Click(sender' e);                      break;                  case System.Windows.Input.Key.NumPad8:                      //MessageBox.Show("Demo 8");                      buttonNewsPaperDemo_Click(sender' e);                      break;                    case System.Windows.Input.Key.NumPad9:                      //MessageBox.Show("Demo 9");                      buttonBookDemo_Click(sender' e);                      break;                    //Clock                    case System.Windows.Input.Key.Back:                      //MessageBox.Show("Back");                      break;                    case System.Windows.Input.Key.Tab:                      //MessageBox.Show("Tab");                      break;                  case System.Windows.Input.Key.Divide:                      //MessageBox.Show("Devide");                      break;                  case System.Windows.Input.Key.Multiply:                      //MessageBox.Show("Multiply");                      break;                  case System.Windows.Input.Key.Add:                      //MessageBox.Show("Add");                      break;                  case System.Windows.Input.Key.Subtract:                      //MessageBox.Show("Subtract");                      break;                  case System.Windows.Input.Key.Enter:                      //MessageBox.Show("Enter");                      break;              }
Missing Default,WUW01,WUW,C:\repos\sixthsense_sixthsense\WUW01\WUW.cs,Control_menu_AppListSelectionChanged,The following switch statement is missing a default case: switch (Control_menu.SelectedAppNumber)              {                  //DRAW                  case 0:                      buttonDrawDemo_Click(sender' e);                      return;                    //MAP                  case 1:                      buttonMapDemo_Click(sender' e);                      return;                                    //PHOTO                  case 2:                      buttonPhotoDemo_Click(sender' e);                      return;                    //GLOBE                  case 3:                      buttonGlobeDemo_Click(sender' e);                                          return;                    //MAIL                  case 4:                      buttonMailDemo_Click(sender' e);                      return;                    //WEATHER                  case 5:                      buttonWeatherDemo_Click(sender' e);                      return;                    //STOCK                  case 6:                      buttonStockDemo_Click(sender' e);                      return;                    //CLOCK                  case 7:                      buttonClockDemo_Click(sender' e);                      return;                    //GESTURE                  case 8:                      buttonGestureDemo_Click(sender' e);                      return;              }
