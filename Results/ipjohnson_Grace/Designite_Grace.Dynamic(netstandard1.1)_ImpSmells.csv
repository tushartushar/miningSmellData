Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Grace.Dynamic.Impl,AssignExpressionGenerator,D:\research\architectureSmells\repos\ipjohnson_Grace\src\Grace.Dynamic\Impl\AssignExpressionGenerator.cs,GenerateIL,Cyclomatic complexity of the method is 8
Complex Method,Grace.Dynamic.Impl,ConstantExpressionCollector,D:\research\architectureSmells\repos\ipjohnson_Grace\src\Grace.Dynamic\Impl\ConstantExpressionCollector.cs,GetConstantExpressions,Cyclomatic complexity of the method is 8
Complex Method,Grace.Dynamic.Impl,DynamicMethodTargetCreator,D:\research\architectureSmells\repos\ipjohnson_Grace\src\Grace.Dynamic\Impl\DynamicMethodTargetCreator.cs,CreateConstantTarget,Cyclomatic complexity of the method is 9
Complex Method,Grace.Dynamic.Impl,ILGenerationUtgeneratority,D:\research\architectureSmells\repos\ipjohnson_Grace\src\Grace.Dynamic\Impl\ILGenerationUtility.cs,EmitInt,Cyclomatic complexity of the method is 10
Complex Method,Grace.Dynamic.Impl,LinqToDynamicMethodConverter,D:\research\architectureSmells\repos\ipjohnson_Grace\src\Grace.Dynamic\Impl\LinqToDynamicMethodConverter.cs,TryCreateDelegate,Cyclomatic complexity of the method is 9
Complex Method,Grace.Dynamic.Impl,LinqToDynamicMethodConverter,D:\research\architectureSmells\repos\ipjohnson_Grace\src\Grace.Dynamic\Impl\LinqToDynamicMethodConverter.cs,TryGenerateIL,Cyclomatic complexity of the method is 10
Complex Method,Grace.Dynamic.Impl,MemeberInitExpressionGenerator,D:\research\architectureSmells\repos\ipjohnson_Grace\src\Grace.Dynamic\Impl\MemeberInitExpressionGenerator.cs,GenerateIL,Cyclomatic complexity of the method is 8
Complex Method,Grace.Dynamic.Impl,ParameterExpressionGenerator,D:\research\architectureSmells\repos\ipjohnson_Grace\src\Grace.Dynamic\Impl\ParameterExpressionGenerator.cs,GenerateIL,Cyclomatic complexity of the method is 10
Long Parameter List,Grace.Dynamic.Impl,DynamicMethodStrategyCompiler,D:\research\architectureSmells\repos\ipjohnson_Grace\src\Grace.Dynamic\Impl\DynamicMethodStrategyCompiler.cs,DynamicMethodStrategyCompiler,The method has 8 parameters. Parameters: configuration' builder' attributeDiscoveryService' exportExpressionBuilder' injectionContextCreator' constants' injectionCreator' linqToDynamicMethodConverter
Long Parameter List,Grace.Dynamic.Impl,DynamicMethodTarget<T1;T2;T3;T4;T5>,D:\research\architectureSmells\repos\ipjohnson_Grace\src\Grace.Dynamic\Impl\DynamicMethodTarget.cs,DynamicMethodTarget,The method has 5 parameters. Parameters: t1' t2' t3' t4' t5
Long Parameter List,Grace.Dynamic.Impl,DynamicMethodTarget<T1;T2;T3;T4;T5;T6>,D:\research\architectureSmells\repos\ipjohnson_Grace\src\Grace.Dynamic\Impl\DynamicMethodTarget.cs,DynamicMethodTarget,The method has 6 parameters. Parameters: t1' t2' t3' t4' t5' t6
Long Parameter List,Grace.Dynamic.Impl,DynamicMethodTarget<T1;T2;T3;T4;T5;T6;T7>,D:\research\architectureSmells\repos\ipjohnson_Grace\src\Grace.Dynamic\Impl\DynamicMethodTarget.cs,DynamicMethodTarget,The method has 7 parameters. Parameters: t1' t2' t3' t4' t5' t6' t7
Long Parameter List,Grace.Dynamic.Impl,DynamicMethodTarget<T1;T2;T3;T4;T5;T6;T7;T8>,D:\research\architectureSmells\repos\ipjohnson_Grace\src\Grace.Dynamic\Impl\DynamicMethodTarget.cs,DynamicMethodTarget,The method has 8 parameters. Parameters: t1' t2' t3' t4' t5' t6' t7' t8
Long Parameter List,Grace.Dynamic.Impl,ILinqToDynamicMethodConverter,D:\research\architectureSmells\repos\ipjohnson_Grace\src\Grace.Dynamic\Impl\LinqToDynamicMethodConverter.cs,TryCreateDelegate,The method has 5 parameters. Parameters: expressionContext' parameters' extraExpressions' finalExpression' newDelegateType
Long Parameter List,Grace.Dynamic.Impl,LinqToDynamicMethodConverter,D:\research\architectureSmells\repos\ipjohnson_Grace\src\Grace.Dynamic\Impl\LinqToDynamicMethodConverter.cs,TryCreateDelegate,The method has 5 parameters. Parameters: expressionContext' parameters' extraExpressions' finalExpression' newDelegateType
Long Statement,Grace.Dynamic.Impl,DynamicMethodStrategyCompiler,D:\research\architectureSmells\repos\ipjohnson_Grace\src\Grace.Dynamic\Impl\DynamicMethodStrategyCompiler.cs,CompileExpressionResultToDelegate,The length of the statement  "                (ActivationStrategyDelegate)_linqToDynamicMethodConverter.TryCreateDelegate(expressionContext' parameters' extraExpressions' finalExpression' typeof(ActivationStrategyDelegate)); " is 178.
Long Statement,Grace.Dynamic.Impl,DynamicMethodStrategyCompiler,D:\research\architectureSmells\repos\ipjohnson_Grace\src\Grace.Dynamic\Impl\DynamicMethodStrategyCompiler.cs,CompileExpressionResultToDelegate,The length of the statement  "            expressionContext.Request.RequestingScope.ScopeConfiguration.Trace?.Invoke($"Could not generate delegate for {expressionContext.Request.ActivationType.FullName} using DynamicMethod falling back to linq expressions"); " is 216.
Long Statement,Grace.Dynamic.Impl,DynamicMethodStrategyCompiler,D:\research\architectureSmells\repos\ipjohnson_Grace\src\Grace.Dynamic\Impl\DynamicMethodStrategyCompiler.cs,CompileExpressionResultToOpitimzed,The length of the statement  "                (T)(object)_linqToDynamicMethodConverter.TryCreateDelegate(expressionContext' parameters' extraExpressions' finalExpression' typeof(T)); " is 136.
Long Statement,Grace.Dynamic.Impl,DynamicMethodStrategyCompiler,D:\research\architectureSmells\repos\ipjohnson_Grace\src\Grace.Dynamic\Impl\DynamicMethodStrategyCompiler.cs,CompileExpressionResultToOpitimzed,The length of the statement  "            expressionContext.Request.RequestingScope.ScopeConfiguration.Trace?.Invoke($"Could not generate delegate for {expressionContext.Request.ActivationType.FullName} using DynamicMethod falling back to linq expressions"); " is 216.
Long Statement,Grace.Dynamic.Impl,LinqToDynamicMethodConverter,D:\research\architectureSmells\repos\ipjohnson_Grace\src\Grace.Dynamic\Impl\LinqToDynamicMethodConverter.cs,TryCreateDelegate,The length of the statement  "                expressionContext.Request.RequestingScope.ScopeConfiguration.Trace?.Invoke($"Exception thrown while compiling dynamic method {exp.Message}"); " is 141.
Complex Conditional,Grace.Dynamic.Impl,ConstantExpressionCollector,D:\research\architectureSmells\repos\ipjohnson_Grace\src\Grace.Dynamic\Impl\ConstantExpressionCollector.cs,ProcessConstantExpression,The conditional expression  "valueType != typeof(int) &&                      valueType != typeof(double) &&                      valueType != typeof(bool) &&                      valueType != typeof(string) &&                     !constants.Contains(expression.Value)"  is complex.
Magic Number,Grace.Dynamic.Impl,AssignExpressionGenerator,D:\research\architectureSmells\repos\ipjohnson_Grace\src\Grace.Dynamic\Impl\AssignExpressionGenerator.cs,GenerateIL,The following statement contains a magic number: switch (i)                          {                              case 0:                                  request.ILGenerator.Emit(OpCodes.Stloc_0);                                  return true;                              case 1:                                  request.ILGenerator.Emit(OpCodes.Stloc_1);                                  return true;                              case 2:                                  request.ILGenerator.Emit(OpCodes.Stloc_2);                                  return true;                              case 3:                                  request.ILGenerator.Emit(OpCodes.Stloc_3);                                  return true;                              default:                                  request.ILGenerator.Emit(OpCodes.Stloc_S' i);                                  return true;                          }
Magic Number,Grace.Dynamic.Impl,AssignExpressionGenerator,D:\research\architectureSmells\repos\ipjohnson_Grace\src\Grace.Dynamic\Impl\AssignExpressionGenerator.cs,GenerateIL,The following statement contains a magic number: switch (i)                          {                              case 0:                                  request.ILGenerator.Emit(OpCodes.Stloc_0);                                  return true;                              case 1:                                  request.ILGenerator.Emit(OpCodes.Stloc_1);                                  return true;                              case 2:                                  request.ILGenerator.Emit(OpCodes.Stloc_2);                                  return true;                              case 3:                                  request.ILGenerator.Emit(OpCodes.Stloc_3);                                  return true;                              default:                                  request.ILGenerator.Emit(OpCodes.Stloc_S' i);                                  return true;                          }
Magic Number,Grace.Dynamic.Impl,DynamicMethodTargetCreator,D:\research\architectureSmells\repos\ipjohnson_Grace\src\Grace.Dynamic\Impl\DynamicMethodTargetCreator.cs,CreateConstantTarget,The following statement contains a magic number: switch (request.Constants.Count)              {                  case 1:                      openType = typeof(DynamicMethodTarget<>);                      break;                    case 2:                      openType = typeof(DynamicMethodTarget<'>);                      break;                    case 3:                      openType = typeof(DynamicMethodTarget<''>);                      break;                  case 4:                      openType = typeof(DynamicMethodTarget<'''>);                      break;                    case 5:                      openType = typeof(DynamicMethodTarget<''''>);                      break;                    case 6:                      openType = typeof(DynamicMethodTarget<'''''>);                      break;                    case 7:                      openType = typeof(DynamicMethodTarget<''''''>);                      break;                    case 8:                      openType = typeof(DynamicMethodTarget<'''''''>);                      break;                    default:                      return CreateArrayTarget(request);              }
Magic Number,Grace.Dynamic.Impl,DynamicMethodTargetCreator,D:\research\architectureSmells\repos\ipjohnson_Grace\src\Grace.Dynamic\Impl\DynamicMethodTargetCreator.cs,CreateConstantTarget,The following statement contains a magic number: switch (request.Constants.Count)              {                  case 1:                      openType = typeof(DynamicMethodTarget<>);                      break;                    case 2:                      openType = typeof(DynamicMethodTarget<'>);                      break;                    case 3:                      openType = typeof(DynamicMethodTarget<''>);                      break;                  case 4:                      openType = typeof(DynamicMethodTarget<'''>);                      break;                    case 5:                      openType = typeof(DynamicMethodTarget<''''>);                      break;                    case 6:                      openType = typeof(DynamicMethodTarget<'''''>);                      break;                    case 7:                      openType = typeof(DynamicMethodTarget<''''''>);                      break;                    case 8:                      openType = typeof(DynamicMethodTarget<'''''''>);                      break;                    default:                      return CreateArrayTarget(request);              }
Magic Number,Grace.Dynamic.Impl,DynamicMethodTargetCreator,D:\research\architectureSmells\repos\ipjohnson_Grace\src\Grace.Dynamic\Impl\DynamicMethodTargetCreator.cs,CreateConstantTarget,The following statement contains a magic number: switch (request.Constants.Count)              {                  case 1:                      openType = typeof(DynamicMethodTarget<>);                      break;                    case 2:                      openType = typeof(DynamicMethodTarget<'>);                      break;                    case 3:                      openType = typeof(DynamicMethodTarget<''>);                      break;                  case 4:                      openType = typeof(DynamicMethodTarget<'''>);                      break;                    case 5:                      openType = typeof(DynamicMethodTarget<''''>);                      break;                    case 6:                      openType = typeof(DynamicMethodTarget<'''''>);                      break;                    case 7:                      openType = typeof(DynamicMethodTarget<''''''>);                      break;                    case 8:                      openType = typeof(DynamicMethodTarget<'''''''>);                      break;                    default:                      return CreateArrayTarget(request);              }
Magic Number,Grace.Dynamic.Impl,DynamicMethodTargetCreator,D:\research\architectureSmells\repos\ipjohnson_Grace\src\Grace.Dynamic\Impl\DynamicMethodTargetCreator.cs,CreateConstantTarget,The following statement contains a magic number: switch (request.Constants.Count)              {                  case 1:                      openType = typeof(DynamicMethodTarget<>);                      break;                    case 2:                      openType = typeof(DynamicMethodTarget<'>);                      break;                    case 3:                      openType = typeof(DynamicMethodTarget<''>);                      break;                  case 4:                      openType = typeof(DynamicMethodTarget<'''>);                      break;                    case 5:                      openType = typeof(DynamicMethodTarget<''''>);                      break;                    case 6:                      openType = typeof(DynamicMethodTarget<'''''>);                      break;                    case 7:                      openType = typeof(DynamicMethodTarget<''''''>);                      break;                    case 8:                      openType = typeof(DynamicMethodTarget<'''''''>);                      break;                    default:                      return CreateArrayTarget(request);              }
Magic Number,Grace.Dynamic.Impl,DynamicMethodTargetCreator,D:\research\architectureSmells\repos\ipjohnson_Grace\src\Grace.Dynamic\Impl\DynamicMethodTargetCreator.cs,CreateConstantTarget,The following statement contains a magic number: switch (request.Constants.Count)              {                  case 1:                      openType = typeof(DynamicMethodTarget<>);                      break;                    case 2:                      openType = typeof(DynamicMethodTarget<'>);                      break;                    case 3:                      openType = typeof(DynamicMethodTarget<''>);                      break;                  case 4:                      openType = typeof(DynamicMethodTarget<'''>);                      break;                    case 5:                      openType = typeof(DynamicMethodTarget<''''>);                      break;                    case 6:                      openType = typeof(DynamicMethodTarget<'''''>);                      break;                    case 7:                      openType = typeof(DynamicMethodTarget<''''''>);                      break;                    case 8:                      openType = typeof(DynamicMethodTarget<'''''''>);                      break;                    default:                      return CreateArrayTarget(request);              }
Magic Number,Grace.Dynamic.Impl,DynamicMethodTargetCreator,D:\research\architectureSmells\repos\ipjohnson_Grace\src\Grace.Dynamic\Impl\DynamicMethodTargetCreator.cs,CreateConstantTarget,The following statement contains a magic number: switch (request.Constants.Count)              {                  case 1:                      openType = typeof(DynamicMethodTarget<>);                      break;                    case 2:                      openType = typeof(DynamicMethodTarget<'>);                      break;                    case 3:                      openType = typeof(DynamicMethodTarget<''>);                      break;                  case 4:                      openType = typeof(DynamicMethodTarget<'''>);                      break;                    case 5:                      openType = typeof(DynamicMethodTarget<''''>);                      break;                    case 6:                      openType = typeof(DynamicMethodTarget<'''''>);                      break;                    case 7:                      openType = typeof(DynamicMethodTarget<''''''>);                      break;                    case 8:                      openType = typeof(DynamicMethodTarget<'''''''>);                      break;                    default:                      return CreateArrayTarget(request);              }
Magic Number,Grace.Dynamic.Impl,DynamicMethodTargetCreator,D:\research\architectureSmells\repos\ipjohnson_Grace\src\Grace.Dynamic\Impl\DynamicMethodTargetCreator.cs,CreateConstantTarget,The following statement contains a magic number: switch (request.Constants.Count)              {                  case 1:                      openType = typeof(DynamicMethodTarget<>);                      break;                    case 2:                      openType = typeof(DynamicMethodTarget<'>);                      break;                    case 3:                      openType = typeof(DynamicMethodTarget<''>);                      break;                  case 4:                      openType = typeof(DynamicMethodTarget<'''>);                      break;                    case 5:                      openType = typeof(DynamicMethodTarget<''''>);                      break;                    case 6:                      openType = typeof(DynamicMethodTarget<'''''>);                      break;                    case 7:                      openType = typeof(DynamicMethodTarget<''''''>);                      break;                    case 8:                      openType = typeof(DynamicMethodTarget<'''''''>);                      break;                    default:                      return CreateArrayTarget(request);              }
Magic Number,Grace.Dynamic.Impl,ILGenerationUtgeneratority,D:\research\architectureSmells\repos\ipjohnson_Grace\src\Grace.Dynamic\Impl\ILGenerationUtility.cs,EmitInt,The following statement contains a magic number: switch (intValue)              {                  case 0:                      generator.Emit(OpCodes.Ldc_I4_0);                      break;                  case 1:                      generator.Emit(OpCodes.Ldc_I4_1);                      break;                  case 2:                      generator.Emit(OpCodes.Ldc_I4_2);                      break;                  case 3:                      generator.Emit(OpCodes.Ldc_I4_3);                      break;                  case 4:                      generator.Emit(OpCodes.Ldc_I4_4);                      break;                  case 5:                      generator.Emit(OpCodes.Ldc_I4_5);                      break;                  case 6:                      generator.Emit(OpCodes.Ldc_I4_6);                      break;                  case 7:                      generator.Emit(OpCodes.Ldc_I4_7);                      break;                  case 8:                      generator.Emit(OpCodes.Ldc_I4_8);                      break;                  default:                      generator.Emit(OpCodes.Ldc_I4' intValue);                      break;              }
Magic Number,Grace.Dynamic.Impl,ILGenerationUtgeneratority,D:\research\architectureSmells\repos\ipjohnson_Grace\src\Grace.Dynamic\Impl\ILGenerationUtility.cs,EmitInt,The following statement contains a magic number: switch (intValue)              {                  case 0:                      generator.Emit(OpCodes.Ldc_I4_0);                      break;                  case 1:                      generator.Emit(OpCodes.Ldc_I4_1);                      break;                  case 2:                      generator.Emit(OpCodes.Ldc_I4_2);                      break;                  case 3:                      generator.Emit(OpCodes.Ldc_I4_3);                      break;                  case 4:                      generator.Emit(OpCodes.Ldc_I4_4);                      break;                  case 5:                      generator.Emit(OpCodes.Ldc_I4_5);                      break;                  case 6:                      generator.Emit(OpCodes.Ldc_I4_6);                      break;                  case 7:                      generator.Emit(OpCodes.Ldc_I4_7);                      break;                  case 8:                      generator.Emit(OpCodes.Ldc_I4_8);                      break;                  default:                      generator.Emit(OpCodes.Ldc_I4' intValue);                      break;              }
Magic Number,Grace.Dynamic.Impl,ILGenerationUtgeneratority,D:\research\architectureSmells\repos\ipjohnson_Grace\src\Grace.Dynamic\Impl\ILGenerationUtility.cs,EmitInt,The following statement contains a magic number: switch (intValue)              {                  case 0:                      generator.Emit(OpCodes.Ldc_I4_0);                      break;                  case 1:                      generator.Emit(OpCodes.Ldc_I4_1);                      break;                  case 2:                      generator.Emit(OpCodes.Ldc_I4_2);                      break;                  case 3:                      generator.Emit(OpCodes.Ldc_I4_3);                      break;                  case 4:                      generator.Emit(OpCodes.Ldc_I4_4);                      break;                  case 5:                      generator.Emit(OpCodes.Ldc_I4_5);                      break;                  case 6:                      generator.Emit(OpCodes.Ldc_I4_6);                      break;                  case 7:                      generator.Emit(OpCodes.Ldc_I4_7);                      break;                  case 8:                      generator.Emit(OpCodes.Ldc_I4_8);                      break;                  default:                      generator.Emit(OpCodes.Ldc_I4' intValue);                      break;              }
Magic Number,Grace.Dynamic.Impl,ILGenerationUtgeneratority,D:\research\architectureSmells\repos\ipjohnson_Grace\src\Grace.Dynamic\Impl\ILGenerationUtility.cs,EmitInt,The following statement contains a magic number: switch (intValue)              {                  case 0:                      generator.Emit(OpCodes.Ldc_I4_0);                      break;                  case 1:                      generator.Emit(OpCodes.Ldc_I4_1);                      break;                  case 2:                      generator.Emit(OpCodes.Ldc_I4_2);                      break;                  case 3:                      generator.Emit(OpCodes.Ldc_I4_3);                      break;                  case 4:                      generator.Emit(OpCodes.Ldc_I4_4);                      break;                  case 5:                      generator.Emit(OpCodes.Ldc_I4_5);                      break;                  case 6:                      generator.Emit(OpCodes.Ldc_I4_6);                      break;                  case 7:                      generator.Emit(OpCodes.Ldc_I4_7);                      break;                  case 8:                      generator.Emit(OpCodes.Ldc_I4_8);                      break;                  default:                      generator.Emit(OpCodes.Ldc_I4' intValue);                      break;              }
Magic Number,Grace.Dynamic.Impl,ILGenerationUtgeneratority,D:\research\architectureSmells\repos\ipjohnson_Grace\src\Grace.Dynamic\Impl\ILGenerationUtility.cs,EmitInt,The following statement contains a magic number: switch (intValue)              {                  case 0:                      generator.Emit(OpCodes.Ldc_I4_0);                      break;                  case 1:                      generator.Emit(OpCodes.Ldc_I4_1);                      break;                  case 2:                      generator.Emit(OpCodes.Ldc_I4_2);                      break;                  case 3:                      generator.Emit(OpCodes.Ldc_I4_3);                      break;                  case 4:                      generator.Emit(OpCodes.Ldc_I4_4);                      break;                  case 5:                      generator.Emit(OpCodes.Ldc_I4_5);                      break;                  case 6:                      generator.Emit(OpCodes.Ldc_I4_6);                      break;                  case 7:                      generator.Emit(OpCodes.Ldc_I4_7);                      break;                  case 8:                      generator.Emit(OpCodes.Ldc_I4_8);                      break;                  default:                      generator.Emit(OpCodes.Ldc_I4' intValue);                      break;              }
Magic Number,Grace.Dynamic.Impl,ILGenerationUtgeneratority,D:\research\architectureSmells\repos\ipjohnson_Grace\src\Grace.Dynamic\Impl\ILGenerationUtility.cs,EmitInt,The following statement contains a magic number: switch (intValue)              {                  case 0:                      generator.Emit(OpCodes.Ldc_I4_0);                      break;                  case 1:                      generator.Emit(OpCodes.Ldc_I4_1);                      break;                  case 2:                      generator.Emit(OpCodes.Ldc_I4_2);                      break;                  case 3:                      generator.Emit(OpCodes.Ldc_I4_3);                      break;                  case 4:                      generator.Emit(OpCodes.Ldc_I4_4);                      break;                  case 5:                      generator.Emit(OpCodes.Ldc_I4_5);                      break;                  case 6:                      generator.Emit(OpCodes.Ldc_I4_6);                      break;                  case 7:                      generator.Emit(OpCodes.Ldc_I4_7);                      break;                  case 8:                      generator.Emit(OpCodes.Ldc_I4_8);                      break;                  default:                      generator.Emit(OpCodes.Ldc_I4' intValue);                      break;              }
Magic Number,Grace.Dynamic.Impl,ILGenerationUtgeneratority,D:\research\architectureSmells\repos\ipjohnson_Grace\src\Grace.Dynamic\Impl\ILGenerationUtility.cs,EmitInt,The following statement contains a magic number: switch (intValue)              {                  case 0:                      generator.Emit(OpCodes.Ldc_I4_0);                      break;                  case 1:                      generator.Emit(OpCodes.Ldc_I4_1);                      break;                  case 2:                      generator.Emit(OpCodes.Ldc_I4_2);                      break;                  case 3:                      generator.Emit(OpCodes.Ldc_I4_3);                      break;                  case 4:                      generator.Emit(OpCodes.Ldc_I4_4);                      break;                  case 5:                      generator.Emit(OpCodes.Ldc_I4_5);                      break;                  case 6:                      generator.Emit(OpCodes.Ldc_I4_6);                      break;                  case 7:                      generator.Emit(OpCodes.Ldc_I4_7);                      break;                  case 8:                      generator.Emit(OpCodes.Ldc_I4_8);                      break;                  default:                      generator.Emit(OpCodes.Ldc_I4' intValue);                      break;              }
Magic Number,Grace.Dynamic.Impl,ParameterExpressionGenerator,D:\research\architectureSmells\repos\ipjohnson_Grace\src\Grace.Dynamic\Impl\ParameterExpressionGenerator.cs,GenerateIL,The following statement contains a magic number: switch (i)                      {                          case 0:                              request.ILGenerator.Emit(OpCodes.Ldloc_0);                              return true;                            case 1:                              request.ILGenerator.Emit(OpCodes.Ldloc_1);                              return true;                            case 2:                              request.ILGenerator.Emit(OpCodes.Ldloc_2);                              return true;                            case 3:                              request.ILGenerator.Emit(OpCodes.Ldloc_3);                              return true;                            default:                              request.ILGenerator.Emit(OpCodes.Ldloc_S' i);                              return true;                      }
Magic Number,Grace.Dynamic.Impl,ParameterExpressionGenerator,D:\research\architectureSmells\repos\ipjohnson_Grace\src\Grace.Dynamic\Impl\ParameterExpressionGenerator.cs,GenerateIL,The following statement contains a magic number: switch (i)                      {                          case 0:                              request.ILGenerator.Emit(OpCodes.Ldloc_0);                              return true;                            case 1:                              request.ILGenerator.Emit(OpCodes.Ldloc_1);                              return true;                            case 2:                              request.ILGenerator.Emit(OpCodes.Ldloc_2);                              return true;                            case 3:                              request.ILGenerator.Emit(OpCodes.Ldloc_3);                              return true;                            default:                              request.ILGenerator.Emit(OpCodes.Ldloc_S' i);                              return true;                      }
Missing Default,Grace.Dynamic.Impl,ConstantExpressionCollector,D:\research\architectureSmells\repos\ipjohnson_Grace\src\Grace.Dynamic\Impl\ConstantExpressionCollector.cs,GetConstantExpressions,The following switch statement is missing a default case: switch (expression.NodeType)              {                  case ExpressionType.Constant:                      return ProcessConstantExpression((ConstantExpression)expression' constants);                    case ExpressionType.New:                      return ProcessListOfExpression(((NewExpression)expression).Arguments' constants);                    case ExpressionType.MemberInit:                      return ProcessMemberInit(expression' constants);                    case ExpressionType.MemberAccess:                      return GetConstantExpressions(((MemberExpression)expression).Expression' constants);                    case ExpressionType.Call:                      var callExpression = (MethodCallExpression)expression;                      return GetConstantExpressions(callExpression.Object' constants) &&                             ProcessListOfExpression(callExpression.Arguments' constants);                    case ExpressionType.NewArrayInit:                      return ProcessListOfExpression(((NewArrayExpression)expression).Expressions' constants);                    case ExpressionType.Parameter:                      return true;              }
Missing Default,Grace.Dynamic.Impl,LinqToDynamicMethodConverter,D:\research\architectureSmells\repos\ipjohnson_Grace\src\Grace.Dynamic\Impl\LinqToDynamicMethodConverter.cs,TryGenerateIL,The following switch statement is missing a default case: switch (expression.NodeType)              {                  case ExpressionType.Call:                      return ImplementationFactory.Locate<ICallExpressionGenerator>()                          .GenerateIL(request' (MethodCallExpression)expression);                    case ExpressionType.Constant:                      return ImplementationFactory.Locate<IConstantExpressionGenerator>()                          .GenerateIL(request' (ConstantExpression)expression);                    case ExpressionType.Convert:                      if (TryGenerateIL(request' ((UnaryExpression)expression).Operand))                      {                          request.ILGenerator.Emit(OpCodes.Castclass' expression.Type);                          return true;                      }                        return false;                    case ExpressionType.MemberInit:                      return ImplementationFactory.Locate<IMemeberInitExpressionGenerator>()                          .GenerateIL(request' (MemberInitExpression)expression);                    case ExpressionType.New:                      return ImplementationFactory.Locate<INewExpressionGenerator>()                          .GenerateIL(request' (NewExpression)expression);                    case ExpressionType.NewArrayInit:                      return ImplementationFactory.Locate<IArrayInitExpressionGenerator>()                          .GenerateIL(request' (NewArrayExpression)expression);                    case ExpressionType.Parameter:                      return ImplementationFactory.Locate<IParameterExpressionGenerator>()                          .GenerateIL(request' (ParameterExpression)expression);                    case ExpressionType.Assign:                      return ImplementationFactory.Locate<IAssignExpressionGenerator>()                          .GenerateIL(request' (BinaryExpression)expression);              }
