Implementation smell,Namespace,Class,File,Method,Description
Long Method,DocuSignSample,EmbedDocuSign,F:\newReposMay17\docusign_DocuSign-eSignature-SDK\MS.NET\DocuSignSample\DocuSignSample\EmbedDocuSign.aspx.cs,AddTabs,The method has 155 lines of code.
Complex Method,DocuSignSample,EmbedDocuSign,F:\newReposMay17\docusign_DocuSign-eSignature-SDK\MS.NET\DocuSignSample\DocuSignSample\EmbedDocuSign.aspx.cs,Page_Load,Cyclomatic complexity of the method is 8
Complex Method,DocuSignSample,GetStatusAndDocs,F:\newReposMay17\docusign_DocuSign-eSignature-SDK\MS.NET\DocuSignSample\DocuSignSample\GetStatusAndDocs.aspx.cs,CreateEnvelopeTable,Cyclomatic complexity of the method is 8
Complex Method,DocuSignSample,SendDocument,F:\newReposMay17\docusign_DocuSign-eSignature-SDK\MS.NET\DocuSignSample\DocuSignSample\SendDocument.aspx.cs,ConstructRecipients,Cyclomatic complexity of the method is 16
Complex Method,DocuSignSample,Tabs,F:\newReposMay17\docusign_DocuSign-eSignature-SDK\MS.NET\DocuSignSample\DocuSignSample\Tabs.Master.cs,Page_Load,Cyclomatic complexity of the method is 8
Long Parameter List,DocuSignSample.CredentialAPI,RequestSenderTokenRequestBody,F:\newReposMay17\docusign_DocuSign-eSignature-SDK\MS.NET\DocuSignSample\DocuSignSample\Service References\CredentialAPI\Reference.cs,RequestSenderTokenRequestBody,The method has 5 parameters.
Long Parameter List,DocuSignSample.CredentialAPI,RequestCorrectTokenRequestBody,F:\newReposMay17\docusign_DocuSign-eSignature-SDK\MS.NET\DocuSignSample\DocuSignSample\Service References\CredentialAPI\Reference.cs,RequestCorrectTokenRequestBody,The method has 5 parameters.
Long Parameter List,DocuSignSample.CredentialAPI,CredentialSoapClient,F:\newReposMay17\docusign_DocuSign-eSignature-SDK\MS.NET\DocuSignSample\DocuSignSample\Service References\CredentialAPI\Reference.cs,RequestSenderToken,The method has 5 parameters.
Long Parameter List,DocuSignSample.CredentialAPI,CredentialSoapClient,F:\newReposMay17\docusign_DocuSign-eSignature-SDK\MS.NET\DocuSignSample\DocuSignSample\Service References\CredentialAPI\Reference.cs,RequestCorrectToken,The method has 5 parameters.
Long Parameter List,DocuSignSample.DocuSignAPI,APIServiceSoap,F:\newReposMay17\docusign_DocuSign-eSignature-SDK\MS.NET\DocuSignSample\DocuSignSample\Service References\DocuSignAPI\Reference.cs,RequestRecipientToken,The method has 6 parameters.
Long Parameter List,DocuSignSample.DocuSignAPI,APIServiceSoap,F:\newReposMay17\docusign_DocuSign-eSignature-SDK\MS.NET\DocuSignSample\DocuSignSample\Service References\DocuSignAPI\Reference.cs,RequestRecipientFaxToken,The method has 6 parameters.
Long Parameter List,DocuSignSample.DocuSignAPI,APIServiceSoap,F:\newReposMay17\docusign_DocuSign-eSignature-SDK\MS.NET\DocuSignSample\DocuSignSample\Service References\DocuSignAPI\Reference.cs,RequestRecipientFaxPDF,The method has 5 parameters.
Long Parameter List,DocuSignSample.DocuSignAPI,APIServiceSoapClient,F:\newReposMay17\docusign_DocuSign-eSignature-SDK\MS.NET\DocuSignSample\DocuSignSample\Service References\DocuSignAPI\Reference.cs,RequestRecipientToken,The method has 6 parameters.
Long Parameter List,DocuSignSample.DocuSignAPI,APIServiceSoapClient,F:\newReposMay17\docusign_DocuSign-eSignature-SDK\MS.NET\DocuSignSample\DocuSignSample\Service References\DocuSignAPI\Reference.cs,RequestRecipientFaxToken,The method has 6 parameters.
Long Parameter List,DocuSignSample.DocuSignAPI,APIServiceSoapClient,F:\newReposMay17\docusign_DocuSign-eSignature-SDK\MS.NET\DocuSignSample\DocuSignSample\Service References\DocuSignAPI\Reference.cs,RequestRecipientFaxPDF,The method has 5 parameters.
Long Identifier,DocuSignSample.DocuSignAPI,AcknowledgeAuthoritativeCopyExportResponse,F:\newReposMay17\docusign_DocuSign-eSignature-SDK\MS.NET\DocuSignSample\DocuSignSample\Service References\DocuSignAPI\Reference.cs,AcknowledgeAuthoritativeCopyExportResponse,The length of the parameter AcknowledgeAuthoritativeCopyExportResult is 40.
Long Statement,DocuSignSample,BasePage,F:\newReposMay17\docusign_DocuSign-eSignature-SDK\MS.NET\DocuSignSample\DocuSignSample\BasePage.cs,GetAPICredentials,The length of the statement  "	if (SettingIsSet (Keys.ApiUrl) && null != Session [Keys.ApiAccountId] && null != Session [Keys.ApiEmail] && null != Session [Keys.ApiPassword]) { " is 145.
Long Statement,DocuSignSample,BasePage,F:\newReposMay17\docusign_DocuSign-eSignature-SDK\MS.NET\DocuSignSample\DocuSignSample\BasePage.cs,SettingIsSet,The length of the statement  "	return (ConfigurationManager.AppSettings [settingName] != null && ConfigurationManager.AppSettings [settingName].Length > 0); " is 125.
Long Statement,DocuSignSample,BasePage,F:\newReposMay17\docusign_DocuSign-eSignature-SDK\MS.NET\DocuSignSample\DocuSignSample\BasePage.cs,LoggedIn,The length of the statement  "	return (null != Session [Keys.ApiAccountId] && null != Session [Keys.ApiEmail] && null != Session [Keys.ApiPassword] && null != Session [Keys.ApiIkey]); " is 152.
Long Statement,DocuSignSample,Default,F:\newReposMay17\docusign_DocuSign-eSignature-SDK\MS.NET\DocuSignSample\DocuSignSample\Default.aspx.cs,Settings_In_Config,The length of the statement  "	return (SettingIsSet (Keys.ApiUserEmail) && SettingIsSet (Keys.Password) && SettingIsSet (Keys.IntegratorsKey) && SettingIsSet (Keys.ApiAccountId)); " is 148.
Long Statement,DocuSignSample,EmbedDocuSign,F:\newReposMay17\docusign_DocuSign-eSignature-SDK\MS.NET\DocuSignSample\DocuSignSample\EmbedDocuSign.aspx.cs,Page_Load,The length of the statement  "		else if ((Request [Keys.Event].ToString () == "SignComplete1" && status.RecipientStatuses.Length == 1) || Request [Keys.Event].ToString () == "SignComplete2" || null != Request ["event"].ToString ()) { " is 201.
Long Statement,DocuSignSample,EmbedDocuSign,F:\newReposMay17\docusign_DocuSign-eSignature-SDK\MS.NET\DocuSignSample\DocuSignSample\EmbedDocuSign.aspx.cs,SignFirst,The length of the statement  "		token = client.RequestRecipientToken (status.EnvelopeID' recipient.ClientUserId' recipient.UserName' recipient.Email' assertion' urls); " is 135.
Long Statement,DocuSignSample,EmbedDocuSign,F:\newReposMay17\docusign_DocuSign-eSignature-SDK\MS.NET\DocuSignSample\DocuSignSample\EmbedDocuSign.aspx.cs,SignSecond,The length of the statement  "		token = client.RequestRecipientToken (status.EnvelopeID' recipient.ClientUserId' recipient.UserName' recipient.Email' assertion' urls); " is 135.
Long Statement,DocuSignSample,EmbedDocuSign,F:\newReposMay17\docusign_DocuSign-eSignature-SDK\MS.NET\DocuSignSample\DocuSignSample\EmbedDocuSign.aspx.cs,SignSecond,The length of the statement  "	signerMessage = "The first signer has completed the Envelope. Now the second signer will be asked to fill out details in the Envelope."; " is 136.
Long Statement,DocuSignSample,GetStatusAndDocs,F:\newReposMay17\docusign_DocuSign-eSignature-SDK\MS.NET\DocuSignSample\DocuSignSample\GetStatusAndDocs.aspx.cs,CreateStatusTable,The length of the statement  "			InnerHtml = "<a href=\"javascript:toggle('" + status.EnvelopeID + "_Detail" + "');\"><img src=\"images/plus.png\"></a> " + status.Subject + " (" + status.Status.ToString () + ") - " + status.EnvelopeID " is 201.
Long Statement,DocuSignSample,GetStatusAndDocs,F:\newReposMay17\docusign_DocuSign-eSignature-SDK\MS.NET\DocuSignSample\DocuSignSample\GetStatusAndDocs.aspx.cs,CreateEnvelopeTable,The length of the statement  "		String recipId = "Recipient_Detail_" + status.EnvelopeID + "_" + recipient.RoutingOrder + "_" + recipient.UserName + "_" + recipient.Email + "_" + recipIndex++; " is 160.
Long Statement,DocuSignSample,GetStatusAndDocs,F:\newReposMay17\docusign_DocuSign-eSignature-SDK\MS.NET\DocuSignSample\DocuSignSample\GetStatusAndDocs.aspx.cs,CreateEnvelopeTable,The length of the statement  "		info.InnerHtml = "<a href=\"javascript:toggle('" + recipId + "');\"><img src=\"images/plus.png\"></a> Recipient - " + recipient.UserName + ": " + recipient.Status.ToString (); " is 175.
Long Statement,DocuSignSample,GetStatusAndDocs,F:\newReposMay17\docusign_DocuSign-eSignature-SDK\MS.NET\DocuSignSample\DocuSignSample\GetStatusAndDocs.aspx.cs,CreateEnvelopeTable,The length of the statement  "			info.InnerHtml += " <input type=\"submit\" id=\"" + status.EnvelopeID + "\" value=\"Start Signing\" name=\"DocEnvelope+" + status.EnvelopeID + "&Email+" + recipient.Email + "&UserName+" + recipient.UserName + "&CID+" + recipient.ClientUserId + "\">"; " is 250.
Long Statement,DocuSignSample,GetStatusAndDocs,F:\newReposMay17\docusign_DocuSign-eSignature-SDK\MS.NET\DocuSignSample\DocuSignSample\GetStatusAndDocs.aspx.cs,CreateEnvelopeTable,The length of the statement  "		InnerHtml = "<a href=\"javascript:toggle('" + status.EnvelopeID + "_Detail_Documents" + "');\"><img src=\"images/plus.png\"></a> Documents" " is 139.
Long Statement,DocuSignSample,GetStatusAndDocs,F:\newReposMay17\docusign_DocuSign-eSignature-SDK\MS.NET\DocuSignSample\DocuSignSample\GetStatusAndDocs.aspx.cs,CreateEnvelopeTable,The length of the statement  "		documents.InnerHtml += " <input type=\"submit\" id=\"" + status.EnvelopeID + "\" value=\"Download\" name=\"" + status.EnvelopeID + "\";>"; " is 138.
Long Statement,DocuSignSample,GetStatusAndDocs,F:\newReposMay17\docusign_DocuSign-eSignature-SDK\MS.NET\DocuSignSample\DocuSignSample\GetStatusAndDocs.aspx.cs,CreateEnvelopeTable,The length of the statement  "		foreach (var info in status.DocumentStatuses.Select (document => new System.Web.UI.HtmlControls.HtmlGenericControl ("p") { " is 122.
Long Statement,DocuSignSample,SendDocument,F:\newReposMay17\docusign_DocuSign-eSignature-SDK\MS.NET\DocuSignSample\DocuSignSample\SendDocument.aspx.cs,EmbedSending,The length of the statement  "			string navURL = String.Format ("{0}?envelopeID={1}&accountID={2}&source=Document"' "EmbeddedHost.aspx"' status.EnvelopeID' envelope.AccountId); " is 143.
Long Statement,DocuSignSample,SendTemplate,F:\newReposMay17\docusign_DocuSign-eSignature-SDK\MS.NET\DocuSignSample\DocuSignSample\SendTemplate.aspx.cs,EmbedSending,The length of the statement  "			string navURL = String.Format ("{0}?envelopeID={1}&accountID={2}&source=Template"' "EmbeddedHost.aspx"' status.EnvelopeID' envelopeInfo.AccountId); " is 147.
Long Statement,DocuSignSample,SendTemplate,F:\newReposMay17\docusign_DocuSign-eSignature-SDK\MS.NET\DocuSignSample\DocuSignSample\SendTemplate.aspx.cs,AddRecipients,The length of the statement  "		roleCell.InnerHtml = String.Format ("<input id=\"{0}\" type=\"text\" readonly=\"true\" name=\"{0}{1}\" value=\"{2}\"/>"' Keys.RecipientRole' i.ToString ()' recipient.RoleName); " is 176.
Long Statement,DocuSignSample,SendTemplate,F:\newReposMay17\docusign_DocuSign-eSignature-SDK\MS.NET\DocuSignSample\DocuSignSample\SendTemplate.aspx.cs,AddRecipients,The length of the statement  "		nameCell.InnerHtml = String.Format ("<input id=\"{0}\" type=\"text\" name=\"{0}{1}\" value=\"{2}\"/>"' Keys.RecipientName' i.ToString ()' recipient.UserName); " is 158.
Long Statement,DocuSignSample,SendTemplate,F:\newReposMay17\docusign_DocuSign-eSignature-SDK\MS.NET\DocuSignSample\DocuSignSample\SendTemplate.aspx.cs,AddRecipients,The length of the statement  "		emailCell.InnerHtml = String.Format ("<input id=\"{0}\" type=\"text\" name=\"{0}{1}\" value=\"{2}\"/>"' Keys.RecipientEmail' i.ToString ()' recipient.Email); " is 157.
Long Statement,DocuSignSample,SendTemplate,F:\newReposMay17\docusign_DocuSign-eSignature-SDK\MS.NET\DocuSignSample\DocuSignSample\SendTemplate.aspx.cs,AddRecipients,The length of the statement  "		securityCell.InnerHtml = String.Format ("<input id=\"{0}\" type=\"text\" readonly=\"true\" name=\"{0}{1}\" value=\"{2}\"/>"' Keys.RecipientSecurity' i.ToString ()' security); " is 174.
Long Statement,DocuSignSample,SendTemplate,F:\newReposMay17\docusign_DocuSign-eSignature-SDK\MS.NET\DocuSignSample\DocuSignSample\SendTemplate.aspx.cs,AddRecipients,The length of the statement  "		inviteCell.InnerHtml = String.Format ("<ul class=\"switcher\" name=\"{0}{1}\" ><li class=\"active\"><a href=\"#\" title=\"On\">ON</a></li><li><a href=\"#\" title=\"OFF\">OFF</a></li><input id=\"RecipientInviteToggle{1}\" name=\"RecipientInviteToggle{1}\" value=\"RecipientInviteToggle{1}\" type=\"checkbox\" checked=\"\" style=\"display: none\"></ul>"' Keys.RecipientInvite' i.ToString ()); " is 390.
Long Statement,DocuSignSample,SendTemplate,F:\newReposMay17\docusign_DocuSign-eSignature-SDK\MS.NET\DocuSignSample\DocuSignSample\SendTemplate.aspx.cs,AddRecipients,The length of the statement  "		//    <input id="RecipientInviteToggle1" name="RecipientInviteToggle1" value="RecipientInviteToggle1" type="checkbox" checked="" style="display: none"> " is 151.
Long Statement,DocuSignSample,SelectUser,F:\newReposMay17\docusign_DocuSign-eSignature-SDK\MS.NET\DocuSignSample\DocuSignSample\SelectUser.aspx.cs,Page_Load,The length of the statement  "		if (null != Session [Keys.ApiAccounts] && null != Session [Keys.ApiEmail] && null != Session [Keys.ApiPassword] && null != Session [Keys.ApiIkey]) { " is 148.
Long Statement,DocuSignSample.CredentialAPI,CredentialSoapClient,F:\newReposMay17\docusign_DocuSign-eSignature-SDK\MS.NET\DocuSignSample\DocuSignSample\Service References\CredentialAPI\Reference.cs,Login,The length of the statement  "	DocuSignSample.CredentialAPI.LoginResponse retVal = ((DocuSignSample.CredentialAPI.CredentialSoap)(this)).Login (inValue); " is 122.
Long Statement,DocuSignSample.CredentialAPI,CredentialSoapClient,F:\newReposMay17\docusign_DocuSign-eSignature-SDK\MS.NET\DocuSignSample\DocuSignSample\Service References\CredentialAPI\Reference.cs,GetAuthenticationToken,The length of the statement  "	DocuSignSample.CredentialAPI.GetAuthenticationTokenRequest inValue = new DocuSignSample.CredentialAPI.GetAuthenticationTokenRequest (); " is 135.
Long Statement,DocuSignSample.CredentialAPI,CredentialSoapClient,F:\newReposMay17\docusign_DocuSign-eSignature-SDK\MS.NET\DocuSignSample\DocuSignSample\Service References\CredentialAPI\Reference.cs,GetAuthenticationToken,The length of the statement  "	DocuSignSample.CredentialAPI.GetAuthenticationTokenResponse retVal = ((DocuSignSample.CredentialAPI.CredentialSoap)(this)).GetAuthenticationToken (inValue); " is 156.
Long Statement,DocuSignSample.CredentialAPI,CredentialSoapClient,F:\newReposMay17\docusign_DocuSign-eSignature-SDK\MS.NET\DocuSignSample\DocuSignSample\Service References\CredentialAPI\Reference.cs,RequestSenderToken,The length of the statement  "	DocuSignSample.CredentialAPI.RequestSenderTokenRequest inValue = new DocuSignSample.CredentialAPI.RequestSenderTokenRequest (); " is 127.
Long Statement,DocuSignSample.CredentialAPI,CredentialSoapClient,F:\newReposMay17\docusign_DocuSign-eSignature-SDK\MS.NET\DocuSignSample\DocuSignSample\Service References\CredentialAPI\Reference.cs,RequestSenderToken,The length of the statement  "	DocuSignSample.CredentialAPI.RequestSenderTokenResponse retVal = ((DocuSignSample.CredentialAPI.CredentialSoap)(this)).RequestSenderToken (inValue); " is 148.
Long Statement,DocuSignSample.CredentialAPI,CredentialSoapClient,F:\newReposMay17\docusign_DocuSign-eSignature-SDK\MS.NET\DocuSignSample\DocuSignSample\Service References\CredentialAPI\Reference.cs,RequestCorrectToken,The length of the statement  "	DocuSignSample.CredentialAPI.RequestCorrectTokenRequest inValue = new DocuSignSample.CredentialAPI.RequestCorrectTokenRequest (); " is 129.
Long Statement,DocuSignSample.CredentialAPI,CredentialSoapClient,F:\newReposMay17\docusign_DocuSign-eSignature-SDK\MS.NET\DocuSignSample\DocuSignSample\Service References\CredentialAPI\Reference.cs,RequestCorrectToken,The length of the statement  "	DocuSignSample.CredentialAPI.RequestCorrectTokenResponse retVal = ((DocuSignSample.CredentialAPI.CredentialSoap)(this)).RequestCorrectToken (inValue); " is 150.
Long Statement,DocuSignSample.DocuSignAPI,APIServiceSoapClient,F:\newReposMay17\docusign_DocuSign-eSignature-SDK\MS.NET\DocuSignSample\DocuSignSample\Service References\DocuSignAPI\Reference.cs,RequestRecipientToken,The length of the statement  "	return base.Channel.RequestRecipientToken (EnvelopeID' ClientUserID' Username' Email' AuthenticationAssertion' ClientURLs); " is 123.
Long Statement,DocuSignSample.DocuSignAPI,APIServiceSoapClient,F:\newReposMay17\docusign_DocuSign-eSignature-SDK\MS.NET\DocuSignSample\DocuSignSample\Service References\DocuSignAPI\Reference.cs,RequestRecipientFaxToken,The length of the statement  "	return base.Channel.RequestRecipientFaxToken (EnvelopeID' ClientUserID' Username' Email' AuthenticationAssertion' ClientURLs); " is 126.
Long Statement,DocuSignSample.DocuSignAPI,APIServiceSoapClient,F:\newReposMay17\docusign_DocuSign-eSignature-SDK\MS.NET\DocuSignSample\DocuSignSample\Service References\DocuSignAPI\Reference.cs,GetAccountSettingsList,The length of the statement  "	DocuSignSample.DocuSignAPI.GetAccountSettingsListRequest inValue = new DocuSignSample.DocuSignAPI.GetAccountSettingsListRequest (); " is 131.
Long Statement,DocuSignSample.DocuSignAPI,APIServiceSoapClient,F:\newReposMay17\docusign_DocuSign-eSignature-SDK\MS.NET\DocuSignSample\DocuSignSample\Service References\DocuSignAPI\Reference.cs,GetAccountSettingsList,The length of the statement  "	DocuSignSample.DocuSignAPI.GetAccountSettingsListResponse retVal = ((DocuSignSample.DocuSignAPI.APIServiceSoap)(this)).GetAccountSettingsList (inValue); " is 152.
Long Statement,DocuSignSample.DocuSignAPI,APIServiceSoapClient,F:\newReposMay17\docusign_DocuSign-eSignature-SDK\MS.NET\DocuSignSample\DocuSignSample\Service References\DocuSignAPI\Reference.cs,AcknowledgeAuthoritativeCopyExport,The length of the statement  "	DocuSignSample.DocuSignAPI.AcknowledgeAuthoritativeCopyExportRequest inValue = new DocuSignSample.DocuSignAPI.AcknowledgeAuthoritativeCopyExportRequest (); " is 155.
Long Statement,DocuSignSample.DocuSignAPI,APIServiceSoapClient,F:\newReposMay17\docusign_DocuSign-eSignature-SDK\MS.NET\DocuSignSample\DocuSignSample\Service References\DocuSignAPI\Reference.cs,AcknowledgeAuthoritativeCopyExport,The length of the statement  "	DocuSignSample.DocuSignAPI.AcknowledgeAuthoritativeCopyExportResponse retVal = ((DocuSignSample.DocuSignAPI.APIServiceSoap)(this)).AcknowledgeAuthoritativeCopyExport (inValue); " is 176.
Long Statement,DocuSignSample.DocuSignAPI,APIServiceSoapClient,F:\newReposMay17\docusign_DocuSign-eSignature-SDK\MS.NET\DocuSignSample\DocuSignSample\Service References\DocuSignAPI\Reference.cs,CreateEnvelopeFromTemplates,The length of the statement  "	return base.Channel.CreateEnvelopeFromTemplates (TemplateReferences' Recipients' EnvelopeInformation' ActivateEnvelope); " is 120.
Long Statement,DocuSignSample.DocuSignAPI,APIServiceSoapClient,F:\newReposMay17\docusign_DocuSign-eSignature-SDK\MS.NET\DocuSignSample\DocuSignSample\Service References\DocuSignAPI\Reference.cs,RequestTemplates,The length of the statement  "	DocuSignSample.DocuSignAPI.RequestTemplatesResponse retVal = ((DocuSignSample.DocuSignAPI.APIServiceSoap)(this)).RequestTemplates (inValue); " is 140.
Complex Conditional,DocuSignSample,BasePage,F:\newReposMay17\docusign_DocuSign-eSignature-SDK\MS.NET\DocuSignSample\DocuSignSample\BasePage.cs,GetAPICredentials,The conditional expression  "SettingIsSet (Keys.ApiUrl) && null != Session [Keys.ApiAccountId] && null != Session [Keys.ApiEmail] && null != Session [Keys.ApiPassword]"  is complex.
Complex Conditional,DocuSignSample,EmbedDocuSign,F:\newReposMay17\docusign_DocuSign-eSignature-SDK\MS.NET\DocuSignSample\DocuSignSample\EmbedDocuSign.aspx.cs,Page_Load,The conditional expression  "(Request [Keys.Event].ToString () == "SignComplete1" && status.RecipientStatuses.Length == 1) || Request [Keys.Event].ToString () == "SignComplete2" || null != Request ["event"].ToString ()"  is complex.
Complex Conditional,DocuSignSample,SelectUser,F:\newReposMay17\docusign_DocuSign-eSignature-SDK\MS.NET\DocuSignSample\DocuSignSample\SelectUser.aspx.cs,Page_Load,The conditional expression  "null != Session [Keys.ApiAccounts] && null != Session [Keys.ApiEmail] && null != Session [Keys.ApiPassword] && null != Session [Keys.ApiIkey]"  is complex.
Magic Number,DocuSignSample,GetStatusAndDocs,F:\newReposMay17\docusign_DocuSign-eSignature-SDK\MS.NET\DocuSignSample\DocuSignSample\GetStatusAndDocs.aspx.cs,Page_Load,The following statement contains a magic number: if (Request.Form ["__EVENTTARGET"] != logoutCtrlName) {  	if (Request.Form.Keys.Count >= 1) {  		foreach (string key in Request.Form.Keys) {  			// Start the download of an envelope's documents  			if (Request.Form [key] == "Download") {  				DownloadItem (key);  				hostiframe.Visible = false;  			} // Start signing as a particular recipient  			else if (Request.Form [key] == "Start Signing") {  				string[] signing_params = key.Split ('&');  				string uname = signing_params [2].Split ('+') [1];  				string cid = signing_params [3].Split ('+') [1];  				string email = signing_params [1].Split ('+') [1];  				string eid = signing_params [0].Split ('+') [1];  				StartSigning (uname' cid' email' eid);  			}  		}  	} else {  		// Get the statuses of envelopes  		GetStatuses ();  		hostiframe.Visible = false;  	}  }  
Magic Number,DocuSignSample,GetStatusAndDocs,F:\newReposMay17\docusign_DocuSign-eSignature-SDK\MS.NET\DocuSignSample\DocuSignSample\GetStatusAndDocs.aspx.cs,Page_Load,The following statement contains a magic number: if (Request.Form ["__EVENTTARGET"] != logoutCtrlName) {  	if (Request.Form.Keys.Count >= 1) {  		foreach (string key in Request.Form.Keys) {  			// Start the download of an envelope's documents  			if (Request.Form [key] == "Download") {  				DownloadItem (key);  				hostiframe.Visible = false;  			} // Start signing as a particular recipient  			else if (Request.Form [key] == "Start Signing") {  				string[] signing_params = key.Split ('&');  				string uname = signing_params [2].Split ('+') [1];  				string cid = signing_params [3].Split ('+') [1];  				string email = signing_params [1].Split ('+') [1];  				string eid = signing_params [0].Split ('+') [1];  				StartSigning (uname' cid' email' eid);  			}  		}  	} else {  		// Get the statuses of envelopes  		GetStatuses ();  		hostiframe.Visible = false;  	}  }  
Magic Number,DocuSignSample,GetStatusAndDocs,F:\newReposMay17\docusign_DocuSign-eSignature-SDK\MS.NET\DocuSignSample\DocuSignSample\GetStatusAndDocs.aspx.cs,Page_Load,The following statement contains a magic number: if (Request.Form.Keys.Count >= 1) {  	foreach (string key in Request.Form.Keys) {  		// Start the download of an envelope's documents  		if (Request.Form [key] == "Download") {  			DownloadItem (key);  			hostiframe.Visible = false;  		} // Start signing as a particular recipient  		else if (Request.Form [key] == "Start Signing") {  			string[] signing_params = key.Split ('&');  			string uname = signing_params [2].Split ('+') [1];  			string cid = signing_params [3].Split ('+') [1];  			string email = signing_params [1].Split ('+') [1];  			string eid = signing_params [0].Split ('+') [1];  			StartSigning (uname' cid' email' eid);  		}  	}  } else {  	// Get the statuses of envelopes  	GetStatuses ();  	hostiframe.Visible = false;  }  
Magic Number,DocuSignSample,GetStatusAndDocs,F:\newReposMay17\docusign_DocuSign-eSignature-SDK\MS.NET\DocuSignSample\DocuSignSample\GetStatusAndDocs.aspx.cs,Page_Load,The following statement contains a magic number: if (Request.Form.Keys.Count >= 1) {  	foreach (string key in Request.Form.Keys) {  		// Start the download of an envelope's documents  		if (Request.Form [key] == "Download") {  			DownloadItem (key);  			hostiframe.Visible = false;  		} // Start signing as a particular recipient  		else if (Request.Form [key] == "Start Signing") {  			string[] signing_params = key.Split ('&');  			string uname = signing_params [2].Split ('+') [1];  			string cid = signing_params [3].Split ('+') [1];  			string email = signing_params [1].Split ('+') [1];  			string eid = signing_params [0].Split ('+') [1];  			StartSigning (uname' cid' email' eid);  		}  	}  } else {  	// Get the statuses of envelopes  	GetStatuses ();  	hostiframe.Visible = false;  }  
Magic Number,DocuSignSample,GetStatusAndDocs,F:\newReposMay17\docusign_DocuSign-eSignature-SDK\MS.NET\DocuSignSample\DocuSignSample\GetStatusAndDocs.aspx.cs,Page_Load,The following statement contains a magic number: foreach (string key in Request.Form.Keys) {  	// Start the download of an envelope's documents  	if (Request.Form [key] == "Download") {  		DownloadItem (key);  		hostiframe.Visible = false;  	} // Start signing as a particular recipient  	else if (Request.Form [key] == "Start Signing") {  		string[] signing_params = key.Split ('&');  		string uname = signing_params [2].Split ('+') [1];  		string cid = signing_params [3].Split ('+') [1];  		string email = signing_params [1].Split ('+') [1];  		string eid = signing_params [0].Split ('+') [1];  		StartSigning (uname' cid' email' eid);  	}  }  
Magic Number,DocuSignSample,GetStatusAndDocs,F:\newReposMay17\docusign_DocuSign-eSignature-SDK\MS.NET\DocuSignSample\DocuSignSample\GetStatusAndDocs.aspx.cs,Page_Load,The following statement contains a magic number: foreach (string key in Request.Form.Keys) {  	// Start the download of an envelope's documents  	if (Request.Form [key] == "Download") {  		DownloadItem (key);  		hostiframe.Visible = false;  	} // Start signing as a particular recipient  	else if (Request.Form [key] == "Start Signing") {  		string[] signing_params = key.Split ('&');  		string uname = signing_params [2].Split ('+') [1];  		string cid = signing_params [3].Split ('+') [1];  		string email = signing_params [1].Split ('+') [1];  		string eid = signing_params [0].Split ('+') [1];  		StartSigning (uname' cid' email' eid);  	}  }  
Magic Number,DocuSignSample,GetStatusAndDocs,F:\newReposMay17\docusign_DocuSign-eSignature-SDK\MS.NET\DocuSignSample\DocuSignSample\GetStatusAndDocs.aspx.cs,Page_Load,The following statement contains a magic number: if (Request.Form [key] == "Download") {  	DownloadItem (key);  	hostiframe.Visible = false;  } // Start signing as a particular recipient  else if (Request.Form [key] == "Start Signing") {  	string[] signing_params = key.Split ('&');  	string uname = signing_params [2].Split ('+') [1];  	string cid = signing_params [3].Split ('+') [1];  	string email = signing_params [1].Split ('+') [1];  	string eid = signing_params [0].Split ('+') [1];  	StartSigning (uname' cid' email' eid);  }  
Magic Number,DocuSignSample,GetStatusAndDocs,F:\newReposMay17\docusign_DocuSign-eSignature-SDK\MS.NET\DocuSignSample\DocuSignSample\GetStatusAndDocs.aspx.cs,Page_Load,The following statement contains a magic number: if (Request.Form [key] == "Download") {  	DownloadItem (key);  	hostiframe.Visible = false;  } // Start signing as a particular recipient  else if (Request.Form [key] == "Start Signing") {  	string[] signing_params = key.Split ('&');  	string uname = signing_params [2].Split ('+') [1];  	string cid = signing_params [3].Split ('+') [1];  	string email = signing_params [1].Split ('+') [1];  	string eid = signing_params [0].Split ('+') [1];  	StartSigning (uname' cid' email' eid);  }  
Magic Number,DocuSignSample,GetStatusAndDocs,F:\newReposMay17\docusign_DocuSign-eSignature-SDK\MS.NET\DocuSignSample\DocuSignSample\GetStatusAndDocs.aspx.cs,Page_Load,The following statement contains a magic number: if (Request.Form [key] == "Start Signing") {  	string[] signing_params = key.Split ('&');  	string uname = signing_params [2].Split ('+') [1];  	string cid = signing_params [3].Split ('+') [1];  	string email = signing_params [1].Split ('+') [1];  	string eid = signing_params [0].Split ('+') [1];  	StartSigning (uname' cid' email' eid);  }  
Magic Number,DocuSignSample,GetStatusAndDocs,F:\newReposMay17\docusign_DocuSign-eSignature-SDK\MS.NET\DocuSignSample\DocuSignSample\GetStatusAndDocs.aspx.cs,Page_Load,The following statement contains a magic number: if (Request.Form [key] == "Start Signing") {  	string[] signing_params = key.Split ('&');  	string uname = signing_params [2].Split ('+') [1];  	string cid = signing_params [3].Split ('+') [1];  	string email = signing_params [1].Split ('+') [1];  	string eid = signing_params [0].Split ('+') [1];  	StartSigning (uname' cid' email' eid);  }  
Magic Number,DocuSignSample,SendDocument,F:\newReposMay17\docusign_DocuSign-eSignature-SDK\MS.NET\DocuSignSample\DocuSignSample\SendDocument.aspx.cs,ProcessOptions,The following statement contains a magic number: if (!String.IsNullOrEmpty (Request.Form [Keys.Expiration])) {  	// Set any expirations  	DateTime expire = Convert.ToDateTime (Request.Form [Keys.Expiration]);  	int difference = (expire - DateTime.Today).Days;  	if (null == envelope.Notification) {  		envelope.Notification = new Notification ();  	}  	envelope.Notification.Expirations = new Expirations {  		ExpireEnabled = true'  		ExpireAfter = difference.ToString ()'  		ExpireWarn = (difference - 2).ToString ()  	};  }  
Magic Number,DocuSignSample,SendDocument,F:\newReposMay17\docusign_DocuSign-eSignature-SDK\MS.NET\DocuSignSample\DocuSignSample\SendDocument.aspx.cs,ProcessOptions,The following statement contains a magic number: envelope.Notification.Expirations = new Expirations {  	ExpireEnabled = true'  	ExpireAfter = difference.ToString ()'  	ExpireWarn = (difference - 2).ToString ()  };  
Magic Number,DocuSignSample,SendTemplate,F:\newReposMay17\docusign_DocuSign-eSignature-SDK\MS.NET\DocuSignSample\DocuSignSample\SendTemplate.aspx.cs,CreateEnvelope,The following statement contains a magic number: if (!String.IsNullOrEmpty (Request.Form [Keys.Expiration])) {  	DateTime expire = Convert.ToDateTime (Request.Form [Keys.Expiration]);  	int difference = (expire - DateTime.Today).Days;  	if (null == envelopeInfo.Notification) {  		envelopeInfo.Notification = new DocuSignAPI.Notification ();  	}  	envelopeInfo.Notification.Expirations = new DocuSignAPI.Expirations {  		ExpireEnabled = true'  		ExpireAfter = difference.ToString ()'  		ExpireWarn = (difference - 2).ToString ()  	};  }  
Magic Number,DocuSignSample,SendTemplate,F:\newReposMay17\docusign_DocuSign-eSignature-SDK\MS.NET\DocuSignSample\DocuSignSample\SendTemplate.aspx.cs,CreateEnvelope,The following statement contains a magic number: envelopeInfo.Notification.Expirations = new DocuSignAPI.Expirations {  	ExpireEnabled = true'  	ExpireAfter = difference.ToString ()'  	ExpireWarn = (difference - 2).ToString ()  };  
Missing Default,DocuSignSample,SendDocument,F:\newReposMay17\docusign_DocuSign-eSignature-SDK\MS.NET\DocuSignSample\DocuSignSample\SendDocument.aspx.cs,ConstructRecipients,The following switch statement is missing a default case: switch (security) {  case "AccessCode":  	r.AccessCode = Request.Form [Keys.RecipientSecuritySetting + i].ToString ();  	break;  case "PhoneAuthentication":  	r.PhoneAuthentication = new RecipientPhoneAuthentication {  		RecipMayProvideNumber = true'  		RecipMayProvideNumberSpecified = true'  		RecordVoicePrint = true'  		RecordVoicePrintSpecified = true  	};  	r.IDCheckConfigurationName = "Phone Auth $";  	break;  case "IDCheck":  	r.RequireIDLookup = true;  	r.RequireIDLookupSpecified = true;  	r.IDCheckConfigurationName = "ID Check $";  	break;  }  
