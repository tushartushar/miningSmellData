Implementation smell,Namespace,Class,File,Method,Description
Long Statement,SharpRepository.Ioc.Autofac,RepositoryRegistrationSource,D:\research\architectureSmells\repos1\SharpRepository_SharpRepository\SharpRepository.Ioc.Autofac\RepositoryRegistrationSource.cs,RegistrationsFor,The length of the statement  "            bool isRepositoryFunc(Type repo) => repo.GetTypeInfo().IsGenericType ? repositoryInterfaces.Contains(repo.GetGenericTypeDefinition()) : false; " is 142.
Long Statement,SharpRepository.Ioc.Autofac,RepositoryRegistrationSource,D:\research\architectureSmells\repos1\SharpRepository_SharpRepository\SharpRepository.Ioc.Autofac\RepositoryRegistrationSource.cs,RegistrationsFor,The length of the statement  "            bool isCompoundRepositoryFunc(Type repo) => repo.GetTypeInfo().IsGenericType ? typeof(ICompoundKeyRepository<>) == repo.GetGenericTypeDefinition() : repo.GetInterfaces().Where(i => i.GetTypeInfo().IsGenericType).Select(i => i.GetGenericTypeDefinition()).Any(i => typeof(ICompoundKeyRepository<>) == i); " is 302.
Magic Number,SharpRepository.Ioc.Autofac,RepositoryRegistrationSource,D:\research\architectureSmells\repos1\SharpRepository_SharpRepository\SharpRepository.Ioc.Autofac\RepositoryRegistrationSource.cs,RegistrationsFor,The following statement contains a magic number: var registration = new ComponentRegistration(                    Guid.NewGuid()'                    new DelegateActivator(swt.ServiceType' (c' p) =>                      {                          Type modelType = swt.ServiceType.GetGenericArguments().First();                          if (isCompoundRepositoryFunc(swt.ServiceType))                          {                                return RepositoryFactory.GetCompoundKeyInstance(modelType' Configuration' RepositoryName);                          }                          else if (isRepositoryFunc(swt.ServiceType))                              switch (swt.ServiceType.GetGenericArguments().Count())                              {                                  case 1:                                      return RepositoryFactory.GetInstance(modelType' Configuration' RepositoryName);                                  case 2:                                      var key1Type = swt.ServiceType.GetGenericArguments()[1];                                      return RepositoryFactory.GetInstance(modelType' key1Type' Configuration' RepositoryName);                                  case 3:                                      var key1Type2 = swt.ServiceType.GetGenericArguments()[1];                                      var key2Type2 = swt.ServiceType.GetGenericArguments()[2];                                      return RepositoryFactory.GetInstance(modelType' key1Type2' key2Type2' Configuration' RepositoryName);                                  case 4:                                      var key1Type3 = swt.ServiceType.GetGenericArguments()[1];                                      var key2Type3 = swt.ServiceType.GetGenericArguments()[2];                                      var key3Type3 = swt.ServiceType.GetGenericArguments()[3];                                      return RepositoryFactory.GetInstance(modelType' key1Type3' key2Type3' key3Type3' Configuration' RepositoryName);                                  default:                                      throw new NotImplementedException("Error resolving repository: " + swt.ServiceType.Name);                                }                          else                              throw new NotImplementedException("Error resolving repository: " + swt.ServiceType.Name);                      })'                    lifetime'                    instanceSharing'                    InstanceOwnership.OwnedByLifetimeScope'                    new[] { service }'                    new Dictionary<string' object>()              );
Magic Number,SharpRepository.Ioc.Autofac,RepositoryRegistrationSource,D:\research\architectureSmells\repos1\SharpRepository_SharpRepository\SharpRepository.Ioc.Autofac\RepositoryRegistrationSource.cs,RegistrationsFor,The following statement contains a magic number: var registration = new ComponentRegistration(                    Guid.NewGuid()'                    new DelegateActivator(swt.ServiceType' (c' p) =>                      {                          Type modelType = swt.ServiceType.GetGenericArguments().First();                          if (isCompoundRepositoryFunc(swt.ServiceType))                          {                                return RepositoryFactory.GetCompoundKeyInstance(modelType' Configuration' RepositoryName);                          }                          else if (isRepositoryFunc(swt.ServiceType))                              switch (swt.ServiceType.GetGenericArguments().Count())                              {                                  case 1:                                      return RepositoryFactory.GetInstance(modelType' Configuration' RepositoryName);                                  case 2:                                      var key1Type = swt.ServiceType.GetGenericArguments()[1];                                      return RepositoryFactory.GetInstance(modelType' key1Type' Configuration' RepositoryName);                                  case 3:                                      var key1Type2 = swt.ServiceType.GetGenericArguments()[1];                                      var key2Type2 = swt.ServiceType.GetGenericArguments()[2];                                      return RepositoryFactory.GetInstance(modelType' key1Type2' key2Type2' Configuration' RepositoryName);                                  case 4:                                      var key1Type3 = swt.ServiceType.GetGenericArguments()[1];                                      var key2Type3 = swt.ServiceType.GetGenericArguments()[2];                                      var key3Type3 = swt.ServiceType.GetGenericArguments()[3];                                      return RepositoryFactory.GetInstance(modelType' key1Type3' key2Type3' key3Type3' Configuration' RepositoryName);                                  default:                                      throw new NotImplementedException("Error resolving repository: " + swt.ServiceType.Name);                                }                          else                              throw new NotImplementedException("Error resolving repository: " + swt.ServiceType.Name);                      })'                    lifetime'                    instanceSharing'                    InstanceOwnership.OwnedByLifetimeScope'                    new[] { service }'                    new Dictionary<string' object>()              );
Magic Number,SharpRepository.Ioc.Autofac,RepositoryRegistrationSource,D:\research\architectureSmells\repos1\SharpRepository_SharpRepository\SharpRepository.Ioc.Autofac\RepositoryRegistrationSource.cs,RegistrationsFor,The following statement contains a magic number: var registration = new ComponentRegistration(                    Guid.NewGuid()'                    new DelegateActivator(swt.ServiceType' (c' p) =>                      {                          Type modelType = swt.ServiceType.GetGenericArguments().First();                          if (isCompoundRepositoryFunc(swt.ServiceType))                          {                                return RepositoryFactory.GetCompoundKeyInstance(modelType' Configuration' RepositoryName);                          }                          else if (isRepositoryFunc(swt.ServiceType))                              switch (swt.ServiceType.GetGenericArguments().Count())                              {                                  case 1:                                      return RepositoryFactory.GetInstance(modelType' Configuration' RepositoryName);                                  case 2:                                      var key1Type = swt.ServiceType.GetGenericArguments()[1];                                      return RepositoryFactory.GetInstance(modelType' key1Type' Configuration' RepositoryName);                                  case 3:                                      var key1Type2 = swt.ServiceType.GetGenericArguments()[1];                                      var key2Type2 = swt.ServiceType.GetGenericArguments()[2];                                      return RepositoryFactory.GetInstance(modelType' key1Type2' key2Type2' Configuration' RepositoryName);                                  case 4:                                      var key1Type3 = swt.ServiceType.GetGenericArguments()[1];                                      var key2Type3 = swt.ServiceType.GetGenericArguments()[2];                                      var key3Type3 = swt.ServiceType.GetGenericArguments()[3];                                      return RepositoryFactory.GetInstance(modelType' key1Type3' key2Type3' key3Type3' Configuration' RepositoryName);                                  default:                                      throw new NotImplementedException("Error resolving repository: " + swt.ServiceType.Name);                                }                          else                              throw new NotImplementedException("Error resolving repository: " + swt.ServiceType.Name);                      })'                    lifetime'                    instanceSharing'                    InstanceOwnership.OwnedByLifetimeScope'                    new[] { service }'                    new Dictionary<string' object>()              );
Magic Number,SharpRepository.Ioc.Autofac,RepositoryRegistrationSource,D:\research\architectureSmells\repos1\SharpRepository_SharpRepository\SharpRepository.Ioc.Autofac\RepositoryRegistrationSource.cs,RegistrationsFor,The following statement contains a magic number: var registration = new ComponentRegistration(                    Guid.NewGuid()'                    new DelegateActivator(swt.ServiceType' (c' p) =>                      {                          Type modelType = swt.ServiceType.GetGenericArguments().First();                          if (isCompoundRepositoryFunc(swt.ServiceType))                          {                                return RepositoryFactory.GetCompoundKeyInstance(modelType' Configuration' RepositoryName);                          }                          else if (isRepositoryFunc(swt.ServiceType))                              switch (swt.ServiceType.GetGenericArguments().Count())                              {                                  case 1:                                      return RepositoryFactory.GetInstance(modelType' Configuration' RepositoryName);                                  case 2:                                      var key1Type = swt.ServiceType.GetGenericArguments()[1];                                      return RepositoryFactory.GetInstance(modelType' key1Type' Configuration' RepositoryName);                                  case 3:                                      var key1Type2 = swt.ServiceType.GetGenericArguments()[1];                                      var key2Type2 = swt.ServiceType.GetGenericArguments()[2];                                      return RepositoryFactory.GetInstance(modelType' key1Type2' key2Type2' Configuration' RepositoryName);                                  case 4:                                      var key1Type3 = swt.ServiceType.GetGenericArguments()[1];                                      var key2Type3 = swt.ServiceType.GetGenericArguments()[2];                                      var key3Type3 = swt.ServiceType.GetGenericArguments()[3];                                      return RepositoryFactory.GetInstance(modelType' key1Type3' key2Type3' key3Type3' Configuration' RepositoryName);                                  default:                                      throw new NotImplementedException("Error resolving repository: " + swt.ServiceType.Name);                                }                          else                              throw new NotImplementedException("Error resolving repository: " + swt.ServiceType.Name);                      })'                    lifetime'                    instanceSharing'                    InstanceOwnership.OwnedByLifetimeScope'                    new[] { service }'                    new Dictionary<string' object>()              );
Magic Number,SharpRepository.Ioc.Autofac,RepositoryRegistrationSource,D:\research\architectureSmells\repos1\SharpRepository_SharpRepository\SharpRepository.Ioc.Autofac\RepositoryRegistrationSource.cs,RegistrationsFor,The following statement contains a magic number: var registration = new ComponentRegistration(                    Guid.NewGuid()'                    new DelegateActivator(swt.ServiceType' (c' p) =>                      {                          Type modelType = swt.ServiceType.GetGenericArguments().First();                          if (isCompoundRepositoryFunc(swt.ServiceType))                          {                                return RepositoryFactory.GetCompoundKeyInstance(modelType' Configuration' RepositoryName);                          }                          else if (isRepositoryFunc(swt.ServiceType))                              switch (swt.ServiceType.GetGenericArguments().Count())                              {                                  case 1:                                      return RepositoryFactory.GetInstance(modelType' Configuration' RepositoryName);                                  case 2:                                      var key1Type = swt.ServiceType.GetGenericArguments()[1];                                      return RepositoryFactory.GetInstance(modelType' key1Type' Configuration' RepositoryName);                                  case 3:                                      var key1Type2 = swt.ServiceType.GetGenericArguments()[1];                                      var key2Type2 = swt.ServiceType.GetGenericArguments()[2];                                      return RepositoryFactory.GetInstance(modelType' key1Type2' key2Type2' Configuration' RepositoryName);                                  case 4:                                      var key1Type3 = swt.ServiceType.GetGenericArguments()[1];                                      var key2Type3 = swt.ServiceType.GetGenericArguments()[2];                                      var key3Type3 = swt.ServiceType.GetGenericArguments()[3];                                      return RepositoryFactory.GetInstance(modelType' key1Type3' key2Type3' key3Type3' Configuration' RepositoryName);                                  default:                                      throw new NotImplementedException("Error resolving repository: " + swt.ServiceType.Name);                                }                          else                              throw new NotImplementedException("Error resolving repository: " + swt.ServiceType.Name);                      })'                    lifetime'                    instanceSharing'                    InstanceOwnership.OwnedByLifetimeScope'                    new[] { service }'                    new Dictionary<string' object>()              );
Magic Number,SharpRepository.Ioc.Autofac,RepositoryRegistrationSource,D:\research\architectureSmells\repos1\SharpRepository_SharpRepository\SharpRepository.Ioc.Autofac\RepositoryRegistrationSource.cs,RegistrationsFor,The following statement contains a magic number: var registration = new ComponentRegistration(                    Guid.NewGuid()'                    new DelegateActivator(swt.ServiceType' (c' p) =>                      {                          Type modelType = swt.ServiceType.GetGenericArguments().First();                          if (isCompoundRepositoryFunc(swt.ServiceType))                          {                                return RepositoryFactory.GetCompoundKeyInstance(modelType' Configuration' RepositoryName);                          }                          else if (isRepositoryFunc(swt.ServiceType))                              switch (swt.ServiceType.GetGenericArguments().Count())                              {                                  case 1:                                      return RepositoryFactory.GetInstance(modelType' Configuration' RepositoryName);                                  case 2:                                      var key1Type = swt.ServiceType.GetGenericArguments()[1];                                      return RepositoryFactory.GetInstance(modelType' key1Type' Configuration' RepositoryName);                                  case 3:                                      var key1Type2 = swt.ServiceType.GetGenericArguments()[1];                                      var key2Type2 = swt.ServiceType.GetGenericArguments()[2];                                      return RepositoryFactory.GetInstance(modelType' key1Type2' key2Type2' Configuration' RepositoryName);                                  case 4:                                      var key1Type3 = swt.ServiceType.GetGenericArguments()[1];                                      var key2Type3 = swt.ServiceType.GetGenericArguments()[2];                                      var key3Type3 = swt.ServiceType.GetGenericArguments()[3];                                      return RepositoryFactory.GetInstance(modelType' key1Type3' key2Type3' key3Type3' Configuration' RepositoryName);                                  default:                                      throw new NotImplementedException("Error resolving repository: " + swt.ServiceType.Name);                                }                          else                              throw new NotImplementedException("Error resolving repository: " + swt.ServiceType.Name);                      })'                    lifetime'                    instanceSharing'                    InstanceOwnership.OwnedByLifetimeScope'                    new[] { service }'                    new Dictionary<string' object>()              );
