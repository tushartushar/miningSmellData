Implementation smell,Namespace,Class,File,Method,Description
Long Statement,SharpRepository.Ioc.Ninject,NinjectRepositoryExtensions,D:\research\architectureSmells\repos1\SharpRepository_SharpRepository\SharpRepository.Ioc.Ninject\NinjectRepositoryExtensions.cs,BindSharpRepository,The length of the statement  "                return RepositoryFactory.GetInstance(genericArgs[0]' genericArgs[1]' genericArgs[2]' genericArgs[2]' configuration' repositoryName); " is 132.
Magic Number,SharpRepository.Ioc.Ninject,NinjectRepositoryExtensions,D:\research\architectureSmells\repos1\SharpRepository_SharpRepository\SharpRepository.Ioc.Ninject\NinjectRepositoryExtensions.cs,BindSharpRepository,The following statement contains a magic number: kernel.Bind(typeof(ICompoundKeyRepository<''>)).ToMethod(context =>              {                  var genericArgs = context.Request.Service.GetTypeInfo().GenericTypeArguments;                    return RepositoryFactory.GetInstance(genericArgs[0]' genericArgs[1]' genericArgs[2]' configuration' repositoryName);              });
Magic Number,SharpRepository.Ioc.Ninject,NinjectRepositoryExtensions,D:\research\architectureSmells\repos1\SharpRepository_SharpRepository\SharpRepository.Ioc.Ninject\NinjectRepositoryExtensions.cs,BindSharpRepository,The following statement contains a magic number: kernel.Bind(typeof(ICompoundKeyRepository<'''>)).ToMethod(context =>              {                  var genericArgs = context.Request.Service.GetTypeInfo().GenericTypeArguments;                    return RepositoryFactory.GetInstance(genericArgs[0]' genericArgs[1]' genericArgs[2]' genericArgs[2]' configuration' repositoryName);              });
Magic Number,SharpRepository.Ioc.Ninject,NinjectRepositoryExtensions,D:\research\architectureSmells\repos1\SharpRepository_SharpRepository\SharpRepository.Ioc.Ninject\NinjectRepositoryExtensions.cs,BindSharpRepository,The following statement contains a magic number: kernel.Bind(typeof(ICompoundKeyRepository<'''>)).ToMethod(context =>              {                  var genericArgs = context.Request.Service.GetTypeInfo().GenericTypeArguments;                    return RepositoryFactory.GetInstance(genericArgs[0]' genericArgs[1]' genericArgs[2]' genericArgs[2]' configuration' repositoryName);              });
