Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,SharpRepository.AzureDocumentDb,DocumentDbRepository<T;TKey>,D:\research\architectureSmells\repos1\SharpRepository_SharpRepository\SharpRepository.AzureDocumentDb\DocumentDbRepository.cs,DocumentDbRepository,The method has 6 parameters. Parameters: endpointUrl' authorizationKey' databaseId' createIfNotExists' collectionId' cachingStrategy
Long Parameter List,SharpRepository.AzureDocumentDb,DocumentDbRepositoryBase<T;TKey>,D:\research\architectureSmells\repos1\SharpRepository_SharpRepository\SharpRepository.AzureDocumentDb\DocumentDbRepositoryBase.cs,DocumentDbRepositoryBase,The method has 6 parameters. Parameters: endpointUrl' authorizationKey' databaseId' createIfNotExists' collectionId' cachingStrategy
Long Parameter List,SharpRepository.AzureDocumentDb,DocumentDbRepositoryConfiguration,D:\research\architectureSmells\repos1\SharpRepository_SharpRepository\SharpRepository.AzureDocumentDb\DocumentDbRepositoryConfiguration.cs,DocumentDbRepositoryConfiguration,The method has 7 parameters. Parameters: endpointUrl' authorizationKey' databaseId' collectionId' createIfNotExists' cachingStrategy' cachingProvider
Long Statement,SharpRepository.AzureDocumentDb,DocumentDbConfigRepositoryFactory,D:\research\architectureSmells\repos1\SharpRepository_SharpRepository\SharpRepository.AzureDocumentDb\DocumentDbConfigRepositoryFactory.cs,GetInstance,The length of the statement  "            throw new NotImplementedException("DocumentDbRepository does not support using IRepository<T> directly to reference a IRepository<T' string>"); " is 143.
Long Statement,SharpRepository.AzureDocumentDb,DocumentDbConfigRepositoryFactory,D:\research\architectureSmells\repos1\SharpRepository_SharpRepository\SharpRepository.AzureDocumentDb\DocumentDbConfigRepositoryFactory.cs,GetInstance,The length of the statement  "                throw new NotImplementedException(string.Format("DocumentDbRepository does not support using {0} as a Key. {1} only supported as a Key."' typeof(TKey)' typeof(string))); " is 169.
Long Statement,SharpRepository.AzureDocumentDb,DocumentDbConfigRepositoryFactory,D:\research\architectureSmells\repos1\SharpRepository_SharpRepository\SharpRepository.AzureDocumentDb\DocumentDbConfigRepositoryFactory.cs,GetInstance,The length of the statement  "                throw new ConfigurationErrorsException("The endpointUrl' authorizationKey' databaseId attribute is required in order to use the MongoDbRepository via the configuration file."); " is 176.
Long Statement,SharpRepository.AzureDocumentDb,DocumentDbConfigRepositoryFactory,D:\research\architectureSmells\repos1\SharpRepository_SharpRepository\SharpRepository.AzureDocumentDb\DocumentDbConfigRepositoryFactory.cs,GetInstance,The length of the statement  "            return new DocumentDbRepository<T' TKey>(RepositoryConfiguration["endpointUrl"]' RepositoryConfiguration["authorizationKey"]' RepositoryConfiguration["databaseId"]' createIfNotExists); " is 184.
Long Statement,SharpRepository.AzureDocumentDb,DocumentDbRepositoryBase<T;TKey>,D:\research\architectureSmells\repos1\SharpRepository_SharpRepository\SharpRepository.AzureDocumentDb\DocumentDbRepositoryBase.cs,Initilize,The length of the statement  "                throw new Exception(string.Format("No database {0} existed. Use createIfNotExists = true in order to create database."' databaseId)); " is 133.
Long Statement,SharpRepository.AzureDocumentDb,DocumentDbRepositoryBase<T;TKey>,D:\research\architectureSmells\repos1\SharpRepository_SharpRepository\SharpRepository.AzureDocumentDb\DocumentDbRepositoryBase.cs,GetSelfLink,The length of the statement  "            var query = Client.CreateDocumentQuery<Document>(BaseCollection.DocumentsLink' string.Format("SELECT * FROM {0} e WHERE e.{1}"' CollectionId' lambda.ToMSSqlString())); " is 167.
Long Statement,SharpRepository.AzureDocumentDb,DocumentDbRepositoryBase<T;TKey>,D:\research\architectureSmells\repos1\SharpRepository_SharpRepository\SharpRepository.AzureDocumentDb\DocumentDbRepositoryBase.cs,GetPrimaryKeyPropertyInfo,The length of the statement  "            return type.GetProperties().FirstOrDefault(x => x.HasAttribute<JsonPropertyAttribute>() && x.GetCustomAttribute<JsonPropertyAttribute>().PropertyName.ToLower() == "id" && x.PropertyType == typeof(string)) " is 204.
Missing Default,SharpRepository.AzureDocumentDb,ExpressionExtensions,D:\research\architectureSmells\repos1\SharpRepository_SharpRepository\SharpRepository.AzureDocumentDb\ExpressionExtensions.cs,ToMSSqlString,The following switch statement is missing a default case: switch (expression.NodeType)              {                  case ExpressionType.Add:                      var add = expression as BinaryExpression;                      return add.Left.ToMSSqlString() + " + " + add.Right.ToMSSqlString();                    case ExpressionType.Constant:                      var constant = expression as ConstantExpression;                      if (constant.Type == typeof(string))                          return "'" + constant.Value.ToString().Replace("'"' "''") + "'";                      return constant.Value.ToString();                    case ExpressionType.Equal:                      var equal = expression as BinaryExpression;                      return equal.Left.ToMSSqlString() + " = " +                             equal.Right.ToMSSqlString();                    case ExpressionType.Lambda:                      var lambda = expression as LambdaExpression;                      return lambda.Body.ToMSSqlString();                    case ExpressionType.MemberAccess:                      var memberaccess = expression as MemberExpression;                        return GetJsonPropNameAttribute(memberaccess.Member) ?? memberaccess.Member.Name;              }
