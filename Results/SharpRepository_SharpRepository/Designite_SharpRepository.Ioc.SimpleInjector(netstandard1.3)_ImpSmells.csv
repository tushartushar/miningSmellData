Implementation smell,Namespace,Class,File,Method,Description
Magic Number,SharpRepository.Ioc.SimpleInjector,SimpleInjectorRepositoryExtensions,D:\research\architectureSmells\repos1\SharpRepository_SharpRepository\SharpRepository.Ioc.SimpleInjector\SimpleInjectorRepositoryExtensions.cs,RegisterSharpRepository,The following statement contains a magic number: container.ResolveUnregisteredType += (s' e) =>              {                  var type = e.UnregisteredServiceType;                  if (type.GetTypeInfo().IsGenericType)                  {                      var args = type.GetGenericArguments();                      var typedef = type.GetGenericTypeDefinition();                      if (typedef == typeof(IRepository<>))                      {                          e.Register(() => RepositoryFactory.GetInstance(args[0]' configuration' repositoryName));                      }                      else if (typedef == typeof(IRepository<'>))                      {                          e.Register(() => RepositoryFactory.GetInstance(args[0]' args[1]' configuration' repositoryName));                      }                      else if (typedef == typeof(ICompoundKeyRepository<''>))                      {                          e.Register(() => RepositoryFactory.GetInstance(args[0]' args[1]' args[2]' configuration' repositoryName));                      }                      else if (typedef == typeof(ICompoundKeyRepository<'''>))                      {                          e.Register(() => RepositoryFactory.GetInstance(args[0]' args[1]' args[2]' args[2]' configuration' repositoryName));                      }                      else if (typedef == typeof(ICompoundKeyRepository<>))                      {                          e.Register(() => RepositoryFactory.GetInstance(args[0]' configuration' repositoryName));                      }                  }              };
Magic Number,SharpRepository.Ioc.SimpleInjector,SimpleInjectorRepositoryExtensions,D:\research\architectureSmells\repos1\SharpRepository_SharpRepository\SharpRepository.Ioc.SimpleInjector\SimpleInjectorRepositoryExtensions.cs,RegisterSharpRepository,The following statement contains a magic number: container.ResolveUnregisteredType += (s' e) =>              {                  var type = e.UnregisteredServiceType;                  if (type.GetTypeInfo().IsGenericType)                  {                      var args = type.GetGenericArguments();                      var typedef = type.GetGenericTypeDefinition();                      if (typedef == typeof(IRepository<>))                      {                          e.Register(() => RepositoryFactory.GetInstance(args[0]' configuration' repositoryName));                      }                      else if (typedef == typeof(IRepository<'>))                      {                          e.Register(() => RepositoryFactory.GetInstance(args[0]' args[1]' configuration' repositoryName));                      }                      else if (typedef == typeof(ICompoundKeyRepository<''>))                      {                          e.Register(() => RepositoryFactory.GetInstance(args[0]' args[1]' args[2]' configuration' repositoryName));                      }                      else if (typedef == typeof(ICompoundKeyRepository<'''>))                      {                          e.Register(() => RepositoryFactory.GetInstance(args[0]' args[1]' args[2]' args[2]' configuration' repositoryName));                      }                      else if (typedef == typeof(ICompoundKeyRepository<>))                      {                          e.Register(() => RepositoryFactory.GetInstance(args[0]' configuration' repositoryName));                      }                  }              };
Magic Number,SharpRepository.Ioc.SimpleInjector,SimpleInjectorRepositoryExtensions,D:\research\architectureSmells\repos1\SharpRepository_SharpRepository\SharpRepository.Ioc.SimpleInjector\SimpleInjectorRepositoryExtensions.cs,RegisterSharpRepository,The following statement contains a magic number: container.ResolveUnregisteredType += (s' e) =>              {                  var type = e.UnregisteredServiceType;                  if (type.GetTypeInfo().IsGenericType)                  {                      var args = type.GetGenericArguments();                      var typedef = type.GetGenericTypeDefinition();                      if (typedef == typeof(IRepository<>))                      {                          e.Register(() => RepositoryFactory.GetInstance(args[0]' configuration' repositoryName));                      }                      else if (typedef == typeof(IRepository<'>))                      {                          e.Register(() => RepositoryFactory.GetInstance(args[0]' args[1]' configuration' repositoryName));                      }                      else if (typedef == typeof(ICompoundKeyRepository<''>))                      {                          e.Register(() => RepositoryFactory.GetInstance(args[0]' args[1]' args[2]' configuration' repositoryName));                      }                      else if (typedef == typeof(ICompoundKeyRepository<'''>))                      {                          e.Register(() => RepositoryFactory.GetInstance(args[0]' args[1]' args[2]' args[2]' configuration' repositoryName));                      }                      else if (typedef == typeof(ICompoundKeyRepository<>))                      {                          e.Register(() => RepositoryFactory.GetInstance(args[0]' configuration' repositoryName));                      }                  }              };
