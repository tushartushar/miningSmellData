Implementation smell,Namespace,Class,File,Method,Description
Long Statement,SharpRepository.Ioc.Windsor,WindsorRepositoryExtensions,D:\research\architectureSmells\repos1\SharpRepository_SharpRepository\SharpRepository.Ioc.Windsor\WindsorRepositoryExtensions.cs,RegisterSharpRepository,The length of the statement  "                return RepositoryFactory.GetInstance(genericArgs[0]' genericArgs[1]' genericArgs[2]' genericArgs[3]' configuration' repositoryName); " is 132.
Magic Number,SharpRepository.Ioc.Windsor,WindsorRepositoryExtensions,D:\research\architectureSmells\repos1\SharpRepository_SharpRepository\SharpRepository.Ioc.Windsor\WindsorRepositoryExtensions.cs,RegisterSharpRepository,The following statement contains a magic number: container.Register(Component.For(typeof(ICompoundKeyRepository<''>)).UsingFactoryMethod((c' t) =>              {                  var genericArgs = t.GenericArguments;                    return RepositoryFactory.GetInstance(genericArgs[0]' genericArgs[1]' genericArgs[2]' configuration' repositoryName);              }));
Magic Number,SharpRepository.Ioc.Windsor,WindsorRepositoryExtensions,D:\research\architectureSmells\repos1\SharpRepository_SharpRepository\SharpRepository.Ioc.Windsor\WindsorRepositoryExtensions.cs,RegisterSharpRepository,The following statement contains a magic number: container.Register(Component.For(typeof(ICompoundKeyRepository<'''>)).UsingFactoryMethod((c' t) =>              {                  var genericArgs = t.GenericArguments;                    return RepositoryFactory.GetInstance(genericArgs[0]' genericArgs[1]' genericArgs[2]' genericArgs[3]' configuration' repositoryName);              }));
Magic Number,SharpRepository.Ioc.Windsor,WindsorRepositoryExtensions,D:\research\architectureSmells\repos1\SharpRepository_SharpRepository\SharpRepository.Ioc.Windsor\WindsorRepositoryExtensions.cs,RegisterSharpRepository,The following statement contains a magic number: container.Register(Component.For(typeof(ICompoundKeyRepository<'''>)).UsingFactoryMethod((c' t) =>              {                  var genericArgs = t.GenericArguments;                    return RepositoryFactory.GetInstance(genericArgs[0]' genericArgs[1]' genericArgs[2]' genericArgs[3]' configuration' repositoryName);              }));
