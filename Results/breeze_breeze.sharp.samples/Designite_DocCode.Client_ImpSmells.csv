Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Test_NetClient,ExportImportTests,D:\newReposJune17\breeze_breeze.sharp.samples\DocCode\Client\DocCode.Client\ExportImportTests.cs,ExportImportFromIsolatedStorage,Cyclomatic complexity of the method is 9
Long Identifier,Test_NetClient,InsideEntityTests,D:\newReposJune17\breeze_breeze.sharp.samples\DocCode\Client\DocCode.Client\InsideEntityTests.cs,ChangingPropertyRaisesPropertyChanged,The length of the parameter aspectPropertyChangedEventCount is 31.
Long Identifier,Test_NetClient,NavigationTests,D:\newReposJune17\breeze_breeze.sharp.samples\DocCode\Client\DocCode.Client\NavigationTests.cs,SettingOfNavigationProperties,The length of the parameter orderPropertyChangedEventCount is 30.
Long Identifier,Test_NetClient,NavigationTests,D:\newReposJune17\breeze_breeze.sharp.samples\DocCode\Client\DocCode.Client\NavigationTests.cs,SettingOfNavigationProperties,The length of the parameter customerPropertyChangedEventCount is 33.
Long Identifier,Test_NetClient,NavigationTests,D:\newReposJune17\breeze_breeze.sharp.samples\DocCode\Client\DocCode.Client\NavigationTests.cs,SettingOfNavigationProperties,The length of the parameter customerOrdersPropertyChangedEventCount is 39.
Long Identifier,Test_NetClient,NavigationTests,D:\newReposJune17\breeze_breeze.sharp.samples\DocCode\Client\DocCode.Client\NavigationTests.cs,AddingToCollectionNavigationProperties,The length of the parameter customerOrdersPropertyChangedEventCount is 39.
Long Identifier,Test_NetClient,NavigationTests,D:\newReposJune17\breeze_breeze.sharp.samples\DocCode\Client\DocCode.Client\NavigationTests.cs,AddingToCollectionNavigationProperties,The length of the parameter customerOrdersCollectionChangedEventCount is 41.
Long Statement,Test_NetClient,ExportImportTests,D:\newReposJune17\breeze_breeze.sharp.samples\DocCode\Client\DocCode.Client\ExportImportTests.cs,ExportEntitiesToFileWithoutMetadata,The length of the statement  "	Assert.IsTrue (File.Exists (mydocpath + @"\ExportEntitiesWithoutMetadata.txt")' "ExportEntitiesWithoutMetadata.txt should have been created"); " is 142.
Long Statement,Test_NetClient,InsideEntityTests,D:\newReposJune17\breeze_breeze.sharp.samples\DocCode\Client\DocCode.Client\InsideEntityTests.cs,OriginalValuesMapUpdatesWithPropertyChanges,The length of the statement  "	Assert.AreEqual (1' customer.EntityAspect.OriginalValuesMap.Count' "The OriginalValuesMap should have added an entry for the CompanyName change."); " is 147.
Long Statement,Test_NetClient,InsideEntityTests,D:\newReposJune17\breeze_breeze.sharp.samples\DocCode\Client\DocCode.Client\InsideEntityTests.cs,OriginalValuesMapUpdatesWithPropertyChanges,The length of the statement  "	Assert.AreEqual (oldCompanyName' customer.EntityAspect.OriginalValuesMap.First ().Value' "The old company name should have been added to the OriginalValuesMap."); " is 162.
Long Statement,Test_NetClient,InsideEntityTests,D:\newReposJune17\breeze_breeze.sharp.samples\DocCode\Client\DocCode.Client\InsideEntityTests.cs,OriginalValuesMapUpdatesWithPropertyChanges,The length of the statement  "	Assert.AreEqual (0' customer.EntityAspect.OriginalValuesMap.Count' "The OriginalValuesMap should be empty after RejectChanges."); " is 129.
Long Statement,Test_NetClient,InsideEntityTests,D:\newReposJune17\breeze_breeze.sharp.samples\DocCode\Client\DocCode.Client\InsideEntityTests.cs,ChangingPropertyRaisesPropertyChanged,The length of the statement  "	Assert.IsTrue (aspectPropertyChangedEventCount > 0' "The PropertyChanged event should have fired after changing the CompanyName and updated the event counter."); " is 161.
Long Statement,Test_NetClient,InsideEntityTests,D:\newReposJune17\breeze_breeze.sharp.samples\DocCode\Client\DocCode.Client\InsideEntityTests.cs,CanGetEntityMetadataFromEntityType,The length of the statement  "	Assert.AreEqual (customer.EntityAspect.EntityType' customerType' "an entity's entityType should be the same type that created it"); " is 131.
Long Statement,Test_NetClient,LookupListsTests,D:\newReposJune17\breeze_breeze.sharp.samples\DocCode\Client\DocCode.Client\LookupListsTests.cs,LookupLists1,The length of the statement  "	Assert.AreEqual (categories.First ().EntityAspect.EntityState' EntityState.Unchanged' "State of first category in cache should be unchanged"); " is 142.
Long Statement,Test_NetClient,LookupListsTests,D:\newReposJune17\breeze_breeze.sharp.samples\DocCode\Client\DocCode.Client\LookupListsTests.cs,LookupLists2,The length of the statement  "	Assert.AreEqual (categories.First ().EntityAspect.EntityState' EntityState.Unchanged' "State of first category in cache should be unchanged"); " is 142.
Long Statement,Test_NetClient,LookupListsTests,D:\newReposJune17\breeze_breeze.sharp.samples\DocCode\Client\DocCode.Client\LookupListsTests.cs,LookupLists3,The length of the statement  "	Assert.IsTrue (entityManager.GetEntities<Territory> ().Any ()' "Territories returned by LookupsArray should be in cache"); " is 122.
Long Statement,Test_NetClient,LookupListsTests,D:\newReposJune17\breeze_breeze.sharp.samples\DocCode\Client\DocCode.Client\LookupListsTests.cs,LookupLists3,The length of the statement  "	Assert.IsTrue (entityManager.GetEntities<Category> ().Any ()' "Categories returned by LookupsArray should be in cache"); " is 120.
Long Statement,Test_NetClient,LookupListsTests,D:\newReposJune17\breeze_breeze.sharp.samples\DocCode\Client\DocCode.Client\LookupListsTests.cs,LookupLists3,The length of the statement  "	Assert.AreEqual (categories.First ().EntityAspect.EntityState' EntityState.Unchanged' "State of first category in cache should be unchanged"); " is 142.
Long Statement,Test_NetClient,NavigationTests,D:\newReposJune17\breeze_breeze.sharp.samples\DocCode\Client\DocCode.Client\NavigationTests.cs,SimpleNavigation,The length of the statement  "            *********************************************************/var ordersWithCustomerQuery = new EntityQuery<Order> ().Where (o => o.CustomerID == _alfredsID).Expand ("Customer"); " is 174.
Long Statement,Test_NetClient,NavigationTests,D:\newReposJune17\breeze_breeze.sharp.samples\DocCode\Client\DocCode.Client\NavigationTests.cs,SimpleNavigation,The length of the statement  "	Assert.AreEqual (ordersByQuery.Count ()' ordersByNavigation.Count ()' "Should get same number of orders by navigating back from parent Customer"); " is 146.
Long Statement,Test_NetClient,NavigationTests,D:\newReposJune17\breeze_breeze.sharp.samples\DocCode\Client\DocCode.Client\NavigationTests.cs,SimpleNavigation,The length of the statement  "	Assert.IsFalse (lastOrder.OrderDetails.Any ()' "An order's details should not be available because they were not included in query"); " is 133.
Long Statement,Test_NetClient,NavigationTests,D:\newReposJune17\breeze_breeze.sharp.samples\DocCode\Client\DocCode.Client\NavigationTests.cs,SimpleNavigation,The length of the statement  "            *********************************************************/var ordersWithDetails = await new EntityQuery<Order> ().Where (o => o.CustomerID == _alfredsID).Expand ("OrderDetails").Take (1).Execute (entityManager); " is 211.
Long Statement,Test_NetClient,NavigationTests,D:\newReposJune17\breeze_breeze.sharp.samples\DocCode\Client\DocCode.Client\NavigationTests.cs,SimpleNavigation,The length of the statement  "	Assert.IsNull (firstDetail.Product' "An OrderDetail's Product should not be available because Products were not included in query"); " is 132.
Long Statement,Test_NetClient,NavigationTests,D:\newReposJune17\breeze_breeze.sharp.samples\DocCode\Client\DocCode.Client\NavigationTests.cs,SettingOfNavigationProperties,The length of the statement  "            *********************************************************/var existingCustomer = CreateFakeExistingCustomer (entityManager); " is 124.
Long Statement,Test_NetClient,NavigationTests,D:\newReposJune17\breeze_breeze.sharp.samples\DocCode\Client\DocCode.Client\NavigationTests.cs,SettingOfNavigationProperties,The length of the statement  "	Assert.AreEqual (EntityState.Unchanged' existingCustomer.EntityAspect.EntityState' "Existing customer should be unchanged at start of test"); " is 141.
Long Statement,Test_NetClient,NavigationTests,D:\newReposJune17\breeze_breeze.sharp.samples\DocCode\Client\DocCode.Client\NavigationTests.cs,SettingOfNavigationProperties,The length of the statement  "	Assert.IsTrue (existingCustomer.Orders.Any (o => o == newOrder)' "The newly added order should be among the existing customers orders"); " is 136.
Long Statement,Test_NetClient,NavigationTests,D:\newReposJune17\breeze_breeze.sharp.samples\DocCode\Client\DocCode.Client\NavigationTests.cs,SettingOfNavigationProperties,The length of the statement  "	Assert.AreEqual (EntityState.Unchanged' existingCustomer.EntityAspect.EntityState' "Existing customer should be unchanged by assignment to new order"); " is 151.
Long Statement,Test_NetClient,NavigationTests,D:\newReposJune17\breeze_breeze.sharp.samples\DocCode\Client\DocCode.Client\NavigationTests.cs,SettingOfNavigationProperties,The length of the statement  "	Assert.AreEqual (2' orderPropertyChangedEventCount' "Setting the order's Customer should raise the order's PropertyChanged twice' " + "once for FK change and once for the navigation property change"); " is 200.
Long Statement,Test_NetClient,NavigationTests,D:\newReposJune17\breeze_breeze.sharp.samples\DocCode\Client\DocCode.Client\NavigationTests.cs,SettingOfNavigationProperties,The length of the statement  "	Assert.AreEqual (0' customerPropertyChangedEventCount' "Setting the order's customer should NOT raise customer's property changed"); " is 132.
Long Statement,Test_NetClient,NavigationTests,D:\newReposJune17\breeze_breeze.sharp.samples\DocCode\Client\DocCode.Client\NavigationTests.cs,SettingOfNavigationProperties,The length of the statement  "	Assert.AreEqual (1' customerOrdersPropertyChangedEventCount' "Setting the order's customer should raise the Customer.Orders  PropertyChanged event once"); " is 154.
Long Statement,Test_NetClient,NavigationTests,D:\newReposJune17\breeze_breeze.sharp.samples\DocCode\Client\DocCode.Client\NavigationTests.cs,SettingOfNavigationProperties,The length of the statement  "	Assert.IsTrue (newOrder.EntityAspect.EntityState.IsUnchanged ()' "Entity state of order should be unchanged after AcceptChanges()"); " is 132.
Long Statement,Test_NetClient,NavigationTests,D:\newReposJune17\breeze_breeze.sharp.samples\DocCode\Client\DocCode.Client\NavigationTests.cs,SettingOfNavigationProperties,The length of the statement  "	Assert.IsTrue (newOrder.EntityAspect.EntityState.IsModified ()' "Entity state of order should be modified after AcceptChanges()"); " is 130.
Long Statement,Test_NetClient,NavigationTests,D:\newReposJune17\breeze_breeze.sharp.samples\DocCode\Client\DocCode.Client\NavigationTests.cs,SettingOfNavigationProperties,The length of the statement  "	Assert.IsTrue (existingCustomer.Orders.Any (o => o == newOrder)' "Original customer should have order after RejectChanges()"); " is 126.
Long Statement,Test_NetClient,NavigationTests,D:\newReposJune17\breeze_breeze.sharp.samples\DocCode\Client\DocCode.Client\NavigationTests.cs,SettingOfNavigationProperties,The length of the statement  "	Assert.IsTrue (newOrder.EntityAspect.EntityState.IsUnchanged ()' "Entity state of order should be unchanged after RejectChanges()"); " is 132.
Long Statement,Test_NetClient,NavigationTests,D:\newReposJune17\breeze_breeze.sharp.samples\DocCode\Client\DocCode.Client\NavigationTests.cs,AddingToCollectionNavigationProperties,The length of the statement  "            *********************************************************/var existingCustomer = CreateFakeExistingCustomer (entityManager); " is 124.
Long Statement,Test_NetClient,NavigationTests,D:\newReposJune17\breeze_breeze.sharp.samples\DocCode\Client\DocCode.Client\NavigationTests.cs,AddingToCollectionNavigationProperties,The length of the statement  "	Assert.AreEqual (EntityState.Unchanged' existingCustomer.EntityAspect.EntityState' "Existing customer should be unchanged at start of test"); " is 141.
Long Statement,Test_NetClient,NavigationTests,D:\newReposJune17\breeze_breeze.sharp.samples\DocCode\Client\DocCode.Client\NavigationTests.cs,AddingToCollectionNavigationProperties,The length of the statement  "	Assert.IsTrue (existingCustomer.Orders.Any (o => o == newOrder)' "The newly added order should be among the existing customers orders"); " is 136.
Long Statement,Test_NetClient,NavigationTests,D:\newReposJune17\breeze_breeze.sharp.samples\DocCode\Client\DocCode.Client\NavigationTests.cs,AddingToCollectionNavigationProperties,The length of the statement  "	Assert.AreEqual (EntityState.Unchanged' existingCustomer.EntityAspect.EntityState' "Existing customer should be unchanged by assignment to new order"); " is 151.
Long Statement,Test_NetClient,NavigationTests,D:\newReposJune17\breeze_breeze.sharp.samples\DocCode\Client\DocCode.Client\NavigationTests.cs,AddingToCollectionNavigationProperties,The length of the statement  "	Assert.AreEqual (1' customerOrdersPropertyChangedEventCount' "Adding first order should raise PropertyChanged on Orders property of customer"); " is 143.
Long Statement,Test_NetClient,NavigationTests,D:\newReposJune17\breeze_breeze.sharp.samples\DocCode\Client\DocCode.Client\NavigationTests.cs,AddingToCollectionNavigationProperties,The length of the statement  "	Assert.AreEqual (1' customerOrdersCollectionChangedEventCount' "Adding first order should raise CollectionChanged on Orders property of customer"); " is 147.
Long Statement,Test_NetClient,NavigationTests,D:\newReposJune17\breeze_breeze.sharp.samples\DocCode\Client\DocCode.Client\NavigationTests.cs,AddingToCollectionNavigationProperties,The length of the statement  "	Assert.AreEqual (2' customerOrdersPropertyChangedEventCount' "Adding second order should raise PropertyChanged on Orders property of customer"); " is 144.
Long Statement,Test_NetClient,NavigationTests,D:\newReposJune17\breeze_breeze.sharp.samples\DocCode\Client\DocCode.Client\NavigationTests.cs,AddingToCollectionNavigationProperties,The length of the statement  "	Assert.AreEqual (2' customerOrdersCollectionChangedEventCount' "Adding first order should raise CollectionChanged on Orders property of customer"); " is 147.
Long Statement,Test_NetClient,ParallelTests,D:\newReposJune17\breeze_breeze.sharp.samples\DocCode\Client\DocCode.Client\ParallelTests.cs,ParallelQueries,The length of the statement  "	Assert.AreEqual (actualCustomers' numExecutions' "Number of excutions should be " + actualCustomers + "' not " + numExecutions); " is 128.
Long Statement,Test_NetClient,ParallelTests,D:\newReposJune17\breeze_breeze.sharp.samples\DocCode\Client\DocCode.Client\ParallelTests.cs,ParallelQueries,The length of the statement  "	Assert.AreEqual (actualCustomers' numCustomers' actualCustomers + " customers should be returned' not " + numCustomers); " is 120.
Long Statement,Test_NetClient,ParallelTests,D:\newReposJune17\breeze_breeze.sharp.samples\DocCode\Client\DocCode.Client\ParallelTests.cs,ParallelQueriesBatched,The length of the statement  "	Assert.IsTrue (maxActiveQueries <= allowedParallelQueries' "Number of active queries should not exceed " + allowedParallelQueries + ". The max was " + maxActiveQueries); " is 169.
Long Statement,Test_NetClient,ParallelTests,D:\newReposJune17\breeze_breeze.sharp.samples\DocCode\Client\DocCode.Client\ParallelTests.cs,ParallelQueriesBatched,The length of the statement  "	Assert.AreEqual (actualCustomers' numQueriedCustomers' actualCustomers + " customers should be returned' not " + numQueriedCustomers); " is 134.
Long Statement,Test_NetClient,QueryTests,D:\newReposJune17\breeze_breeze.sharp.samples\DocCode\Client\DocCode.Client\QueryTests.cs,MetadataNeededToGetEntityKey,The length of the statement  "		Assert.IsTrue (e.Message.Contains ("There are no KeyProperties yet defined")' "Thrown exception should indicated key property is not defined.  Instead it says \"" + e.Message + "\""); " is 183.
Long Statement,Test_NetClient,QueryTests,D:\newReposJune17\breeze_breeze.sharp.samples\DocCode\Client\DocCode.Client\QueryTests.cs,Expansions,The length of the statement  "		query = new EntityQuery<Order> ().Where (o => o.CustomerID == _alfredsID).Expand ("Customer").Expand ("OrderDetails.Product"); " is 126.
Long Statement,Test_NetClient,QueryTests,D:\newReposJune17\breeze_breeze.sharp.samples\DocCode\Client\DocCode.Client\QueryTests.cs,OrderingAndPaging,The length of the statement  "		query = new EntityQuery<Product> ().Expand ("Category").OrderBy (p => p.ProductName).OrderByDescending (p => p.ProductName); " is 124.
Long Statement,Test_NetClient,QueryTests,D:\newReposJune17\breeze_breeze.sharp.samples\DocCode\Client\DocCode.Client\QueryTests.cs,VerifyProductResults,The length of the statement  "	results.ForEach (p => Console.WriteLine (string.Format ("({0}) '{1}' at ${2} in '{3}'"' p.ProductID' p.ProductName' p.UnitPrice' p.Category.CategoryName))); " is 156.
Long Statement,Test_NetClient,QueryTests,D:\newReposJune17\breeze_breeze.sharp.samples\DocCode\Client\DocCode.Client\QueryTests.cs,AnonymousProjection,The length of the statement  "		var query1 = new EntityQuery<Customer> ().Where (c => c.CompanyName.StartsWith ("C")).OrderBy (obj => obj.CompanyName).Select (c => new { " is 137.
Long Statement,Test_NetClient,QueryTests,D:\newReposJune17\breeze_breeze.sharp.samples\DocCode\Client\DocCode.Client\QueryTests.cs,AnonymousProjection,The length of the statement  "		Assert.IsTrue (results1.Select (obj => obj.CustomerID).OfType<Guid> ().Any ()' "resulting CustomerIDs should be Guids"); " is 120.
Long Statement,Test_NetClient,QueryTests,D:\newReposJune17\breeze_breeze.sharp.samples\DocCode\Client\DocCode.Client\QueryTests.cs,AnonymousProjection,The length of the statement  "		Assert.IsTrue (results1.Select (obj => obj.CompanyName).OfType<string> ().Any ()' "resulting CompanyNames should be strings"); " is 126.
Long Statement,Test_NetClient,QueryTests,D:\newReposJune17\breeze_breeze.sharp.samples\DocCode\Client\DocCode.Client\QueryTests.cs,AnonymousProjection,The length of the statement  "		Assert.IsTrue (results1.Select (obj => obj.ContactName).OfType<string> ().Any ()' "resulting ContactNames should be strings"); " is 126.
Long Statement,Test_NetClient,QueryTests,D:\newReposJune17\breeze_breeze.sharp.samples\DocCode\Client\DocCode.Client\QueryTests.cs,AnonymousProjection,The length of the statement  "		var query2 = new EntityQuery<Customer> ().Where (c => c.CompanyName.StartsWith ("C")).OrderBy (obj => obj.CompanyName).Select (c => new { " is 137.
Long Statement,Test_NetClient,QueryTests,D:\newReposJune17\breeze_breeze.sharp.samples\DocCode\Client\DocCode.Client\QueryTests.cs,AnonymousProjection,The length of the statement  "		Assert.IsTrue (results2.Select (obj => obj.CompanyName).OfType<string> ().Any ()' "resulting CompanyNames should be strings"); " is 126.
Long Statement,Test_NetClient,QueryDatatypeTests,D:\newReposJune17\breeze_breeze.sharp.samples\DocCode\Client\DocCode.Client\QueryDatatypeTests.cs,QueryRoles,The length of the statement  "	// 2.  Comment out the RoleType property in the client model (Model.cs in Client\Model_Northwind.Sharp project lines 514-517). " is 126.
Long Statement,Test_NetClient,QueryWithAFilterTests,D:\newReposJune17\breeze_breeze.sharp.samples\DocCode\Client\DocCode.Client\QueryWithAFilterTests.cs,QueryWithAFilter,The length of the statement  "	var wines = await new EntityQuery<TodoItem> ().Where (td => td.Description == "Wine" && !td.IsArchived && !td.IsDone).Execute (manager); " is 136.
Long Statement,Test_NetClient,QueryWithAFilterTests,D:\newReposJune17\breeze_breeze.sharp.samples\DocCode\Client\DocCode.Client\QueryWithAFilterTests.cs,QueryWithAFilter,The length of the statement  "	Assert.AreEqual (wineTodos.Count ()' localWineTodos.Count ()' "Got " + localWineTodos.Count () + " local wine TodoItems"); " is 122.
Long Statement,Test_NetClient,SaveTests,D:\newReposJune17\breeze_breeze.sharp.samples\DocCode\Client\DocCode.Client\SaveTests.cs,SaveNewEntity,The length of the statement  "		Assert.IsTrue (customer.EntityAspect.EntityState == EntityState.Unchanged' "State of saved entity should be Unchanged"); " is 120.
Long Statement,Test_NetClient,SaveTests,D:\newReposJune17\breeze_breeze.sharp.samples\DocCode\Client\DocCode.Client\SaveTests.cs,SaveModifiedEntity,The length of the statement  "		Assert.IsTrue (customer.EntityAspect.EntityState == EntityState.Unchanged' "State of saved entity should be Unchanged"); " is 120.
Long Statement,Test_NetClient,SaveTests,D:\newReposJune17\breeze_breeze.sharp.samples\DocCode\Client\DocCode.Client\SaveTests.cs,SaveModifiedEntity,The length of the statement  "		Assert.IsTrue (customer.EntityAspect.EntityState == EntityState.Modified' "State of modified entity should be Modified"); " is 121.
Long Statement,Test_NetClient,SaveTests,D:\newReposJune17\breeze_breeze.sharp.samples\DocCode\Client\DocCode.Client\SaveTests.cs,SaveModifiedEntity,The length of the statement  "		Assert.IsTrue (customer.EntityAspect.EntityState == EntityState.Unchanged' "State of saved entity should be Unchanged"); " is 120.
Long Statement,Test_NetClient,SaveTests,D:\newReposJune17\breeze_breeze.sharp.samples\DocCode\Client\DocCode.Client\SaveTests.cs,SaveModifiedEntity,The length of the statement  "		var message = string.Format ("Save of customer {0} should have succeeded;  Received {1}: {2}"' customer.CompanyName' e.GetType ().Name' e.Message); " is 147.
Long Statement,Test_NetClient,SaveTests,D:\newReposJune17\breeze_breeze.sharp.samples\DocCode\Client\DocCode.Client\SaveTests.cs,SaveDeletedEntity,The length of the statement  "		Assert.IsTrue (customer.EntityAspect.EntityState == EntityState.Unchanged' "State of saved entity should be Unchanged"); " is 120.
Long Statement,Test_NetClient,SaveTests,D:\newReposJune17\breeze_breeze.sharp.samples\DocCode\Client\DocCode.Client\SaveTests.cs,SaveDeletedEntity,The length of the statement  "		Assert.IsTrue (customer.EntityAspect.EntityState == EntityState.Deleted' "After delete' entity state should be deleted' not " + customer.EntityAspect.EntityState.ToString ()); " is 175.
Long Statement,Test_NetClient,SaveTests,D:\newReposJune17\breeze_breeze.sharp.samples\DocCode\Client\DocCode.Client\SaveTests.cs,SaveDeletedEntity,The length of the statement  "		Assert.IsTrue (savedEntity.EntityAspect.EntityState == EntityState.Detached' "After save of deleted entity' entity state should be detached' not " + savedEntity.EntityAspect.EntityState.ToString ()); " is 199.
Long Statement,Test_NetClient,SaveTests,D:\newReposJune17\breeze_breeze.sharp.samples\DocCode\Client\DocCode.Client\SaveTests.cs,SaveDeletedEntity,The length of the statement  "		var message = string.Format ("Save of deleted customer {0} should have succeeded;  Received {1}: {2}"' customer.CompanyName' e.GetType ().Name' e.Message); " is 155.
Long Statement,Test_NetClient,SaveTests,D:\newReposJune17\breeze_breeze.sharp.samples\DocCode\Client\DocCode.Client\SaveTests.cs,DeleteClearsRelatedChildren,The length of the statement  "	var orders = await new EntityQuery<Order> ().Take (1).Expand ("Customer' Employee' OrderDetails").Execute (entityManager); " is 122.
Long Statement,Test_NetClient,SaveTests,D:\newReposJune17\breeze_breeze.sharp.samples\DocCode\Client\DocCode.Client\SaveTests.cs,DeleteClearsRelatedChildren,The length of the statement  "	Assert.IsTrue (order.CustomerID != null && order.CustomerID != Guid.Empty' "Order should still have a non-zero CustomerID after order deleted"); " is 144.
Long Statement,Test_NetClient,SaveTests,D:\newReposJune17\breeze_breeze.sharp.samples\DocCode\Client\DocCode.Client\SaveTests.cs,DeleteClearsRelatedChildren,The length of the statement  "	Assert.IsTrue (order.EmployeeID != null && order.CustomerID != Guid.Empty' "Order should still have a non-zero EmployeeID after order deleted"); " is 144.
Long Statement,Test_NetClient,SaveTests,D:\newReposJune17\breeze_breeze.sharp.samples\DocCode\Client\DocCode.Client\SaveTests.cs,DeleteClearsRelatedChildren,The length of the statement  "	Assert.IsTrue (details.All (od => od.OrderID == 0)' "OrderID of every original detail should be zero after order deleted"); " is 123.
Long Statement,Test_NetClient,SaveTests,D:\newReposJune17\breeze_breeze.sharp.samples\DocCode\Client\DocCode.Client\SaveTests.cs,AddUpdateAndDeleteInBatch,The length of the statement  "		Assert.IsTrue (saveResult.Entities.All (e => e.EntityAspect.EntityState.IsUnchanged () || e.EntityAspect.EntityState.IsDetached ())' "All saved entities should be in unchanged state"); " is 184.
Long Statement,Test_NetClient,SaveTests,D:\newReposJune17\breeze_breeze.sharp.samples\DocCode\Client\DocCode.Client\SaveTests.cs,AddUpdateAndDeleteInBatch,The length of the statement  "	Assert.AreEqual (entitiesInCache.Count ()' 2' "There should be only two entities in cache after save of deleted entity"); " is 121.
Long Statement,Test_NetClient,SaveTests,D:\newReposJune17\breeze_breeze.sharp.samples\DocCode\Client\DocCode.Client\SaveTests.cs,HasChangesChangedEvent,The length of the statement  "	Assert.IsFalse (entityManager.HasChanges ()' "EntityManager should have no pending changes after RejectChanges() call"); " is 120.
Long Statement,Test_NetClient,ValidationTests,D:\newReposJune17\breeze_breeze.sharp.samples\DocCode\Client\DocCode.Client\ValidationTests.cs,DoesValidateOnAttachByDefault,The length of the statement  "	Assert.IsTrue (validationErrors.Any (ve => ve.Message.Contains ("CompanyName") && ve.Message.Contains ("required"))' "Should be a validation error stating CompanyName is required."); " is 182.
Long Statement,Test_NetClient,ValidationTests,D:\newReposJune17\breeze_breeze.sharp.samples\DocCode\Client\DocCode.Client\ValidationTests.cs,ManualValidationAndClearingOfErrors,The length of the statement  "	Assert.IsTrue (results.Any (ve => ve.Message.Contains ("CompanyName") && ve.Message.Contains ("required"))' "Should be a validation error stating CompanyName is required."); " is 173.
Long Statement,Test_NetClient,ValidationTests,D:\newReposJune17\breeze_breeze.sharp.samples\DocCode\Client\DocCode.Client\ValidationTests.cs,ManualValidationAndClearingOfErrors,The length of the statement  "	Assert.IsFalse (newCustomer.EntityAspect.ValidationErrors.Any ()' "Should be no validation errors after clearing them."); " is 121.
Long Statement,Test_NetClient,ValidationTests,D:\newReposJune17\breeze_breeze.sharp.samples\DocCode\Client\DocCode.Client\ValidationTests.cs,ManualValidationAndClearingOfErrors,The length of the statement  "	Assert.IsTrue (results.Any (ve => ve.Message.Contains ("CompanyName") && ve.Message.Contains ("required"))' "Should be a validation error stating CompanyName is required."); " is 173.
Long Statement,Test_NetClient,ValidationTests,D:\newReposJune17\breeze_breeze.sharp.samples\DocCode\Client\DocCode.Client\ValidationTests.cs,ManualValidationAndClearingOfErrors,The length of the statement  "	Assert.IsFalse (newCustomer.EntityAspect.ValidationErrors.Any ()' "Should be no validation errors after clearing a specific one."); " is 131.
Long Statement,Test_NetClient,ValidationTests,D:\newReposJune17\breeze_breeze.sharp.samples\DocCode\Client\DocCode.Client\ValidationTests.cs,AddRequiredValidator,The length of the statement  "	Assert.IsFalse (validators.Any (v => v == new RequiredValidator ())' "Should be no required validators on Customer.Country."); " is 126.
Long Statement,Test_NetClient,ValidationTests,D:\newReposJune17\breeze_breeze.sharp.samples\DocCode\Client\DocCode.Client\ValidationTests.cs,AddRequiredValidator,The length of the statement  "		Assert.IsTrue (validationErrors.Any (ve => ve.Message.Contains ("Country") && ve.Message.Contains ("required"))' "Should be a validation error stating Country is required."); " is 174.
Long Statement,Test_NetClient,ValidationTests,D:\newReposJune17\breeze_breeze.sharp.samples\DocCode\Client\DocCode.Client\ValidationTests.cs,CustomerMustBeInUs,The length of the statement  "		Assert.IsTrue (validationErrors.Any (ve => ve.Message.Contains ("Country must start with 'US'"))' "Should be a validation error stating Country must start with 'US'."); " is 168.
Long Statement,Test_NetClient,ValidationTests,D:\newReposJune17\breeze_breeze.sharp.samples\DocCode\Client\DocCode.Client\ValidationTests.cs,CustomerMustBeInUs,The length of the statement  "		Assert.IsTrue (customer.EntityAspect.EntityType.GetProperty ("Country").Validators.Remove (new CountryIsUsValidator ())); " is 121.
Long Statement,Test_NetClient,ValidationTests,D:\newReposJune17\breeze_breeze.sharp.samples\DocCode\Client\DocCode.Client\ValidationTests.cs,EmployeeMustBeFromUs,The length of the statement  "		Assert.IsTrue (validationErrors.Any (ve => ve.Message.Contains ("Country must start with 'US'"))' "Should be a validation error stating Country must start with 'US'."); " is 168.
Long Statement,Test_NetClient,ValidationTests,D:\newReposJune17\breeze_breeze.sharp.samples\DocCode\Client\DocCode.Client\ValidationTests.cs,EmployeeMustBeFromUs,The length of the statement  "		Assert.IsTrue (employee.EntityAspect.EntityType.GetProperty ("Country").Validators.Remove (new CountryIsUsValidator ())); " is 121.
Long Statement,Test_NetClient,ValidationTests,D:\newReposJune17\breeze_breeze.sharp.samples\DocCode\Client\DocCode.Client\ValidationTests.cs,CustomizeMessageString,The length of the statement  "	Assert.IsTrue (error.Message.Contains ("CompanyName") && error.Message.Contains ("Dude")' "should be an error containing 'Dude'"); " is 130.
Long Statement,Test_NetClient,ValidationTests,D:\newReposJune17\breeze_breeze.sharp.samples\DocCode\Client\DocCode.Client\ValidationTests.cs,EmployeeMustHaveValidUSPhone,The length of the statement  "	// var phoneValidator = new RegexValidator(@"^((\([2-9]\d{2}\) ?)|([2-9]\d{2}[-.]))\d{3}[-.]\d{4}$"' "phone number"); // email pattern " is 134.
Magic Number,Test_NetClient,ExportImportTests,D:\newReposJune17\breeze_breeze.sharp.samples\DocCode\Client\DocCode.Client\ExportImportTests.cs,ExportImportSelectedEntities,The following statement contains a magic number: Assert.AreEqual (2' importData2.ImportedEntities.Count);  
Magic Number,Test_NetClient,NavigationTests,D:\newReposJune17\breeze_breeze.sharp.samples\DocCode\Client\DocCode.Client\NavigationTests.cs,SettingOfNavigationProperties,The following statement contains a magic number: Assert.AreEqual (2' orderPropertyChangedEventCount' "Setting the order's Customer should raise the order's PropertyChanged twice' " + "once for FK change and once for the navigation property change");  
Magic Number,Test_NetClient,NavigationTests,D:\newReposJune17\breeze_breeze.sharp.samples\DocCode\Client\DocCode.Client\NavigationTests.cs,AddingToCollectionNavigationProperties,The following statement contains a magic number: Assert.AreEqual (2' customerOrdersPropertyChangedEventCount' "Adding second order should raise PropertyChanged on Orders property of customer");  
Magic Number,Test_NetClient,NavigationTests,D:\newReposJune17\breeze_breeze.sharp.samples\DocCode\Client\DocCode.Client\NavigationTests.cs,AddingToCollectionNavigationProperties,The following statement contains a magic number: Assert.AreEqual (2' customerOrdersCollectionChangedEventCount' "Adding first order should raise CollectionChanged on Orders property of customer");  
Magic Number,Test_NetClient,ParallelTests,D:\newReposJune17\breeze_breeze.sharp.samples\DocCode\Client\DocCode.Client\ParallelTests.cs,TwoParallelOperations,The following statement contains a magic number: Assert.AreEqual (2' seconds' "Two operations in parallel should take approx 2 sec.");  
Magic Number,Test_NetClient,ParallelTests,D:\newReposJune17\breeze_breeze.sharp.samples\DocCode\Client\DocCode.Client\ParallelTests.cs,ParallelOperationsWithException,The following statement contains a magic number: Assert.AreEqual (2' seconds' "Two operations in parallel should take approx 2 sec.");  
Magic Number,Test_NetClient,ParallelTests,D:\newReposJune17\breeze_breeze.sharp.samples\DocCode\Client\DocCode.Client\ParallelTests.cs,ParallelOperationsWithException,The following statement contains a magic number: Assert.AreEqual (3' results.Where (s => s.Contains ("Success")).Count ()' "Three results should contain 'Success'");  
Magic Number,Test_NetClient,ParallelTests,D:\newReposJune17\breeze_breeze.sharp.samples\DocCode\Client\DocCode.Client\ParallelTests.cs,TwoInParallel,The following statement contains a magic number: Assert.AreEqual (2' seconds' "All operations in parallel should take approx 2 sec.");  
Magic Number,Test_NetClient,ParallelTests,D:\newReposJune17\breeze_breeze.sharp.samples\DocCode\Client\DocCode.Client\ParallelTests.cs,OneAtATime,The following statement contains a magic number: Assert.AreEqual (4' seconds' "4 operations one at a time should take approx 4 sec.");  
Magic Number,Test_NetClient,ParallelTests,D:\newReposJune17\breeze_breeze.sharp.samples\DocCode\Client\DocCode.Client\ParallelTests.cs,DoAsyncOperation,The following statement contains a magic number: await Task.Delay (1000);  
Magic Number,Test_NetClient,ParallelTests,D:\newReposJune17\breeze_breeze.sharp.samples\DocCode\Client\DocCode.Client\ParallelTests.cs,DoAsyncOperation,The following statement contains a magic number: if (throwIf3000 && arg == 3000) {  	throw new ArgumentException ("Exception because value is 3000");  }  
Magic Number,Test_NetClient,QueryTests,D:\newReposJune17\breeze_breeze.sharp.samples\DocCode\Client\DocCode.Client\QueryTests.cs,SingleConditions,The following statement contains a magic number: try {  	var entityManager = await TestFns.NewEm (_serviceName);  	var query0 = new EntityQuery<OrderDetail> ().Where (od => od.Quantity > 3);  	var orderDetails = await entityManager.ExecuteQuery (query0);  	Assert.IsTrue (orderDetails.Any ()' "There should be orders with freight cost > 100");  	//  Customers starting w/ 'A' (string comparison)  	var query1 = new EntityQuery<Customer> ().Where (c => c.CompanyName.StartsWith ("A")).OrderBy (c => c.CompanyName);  	var customers = await entityManager.ExecuteQuery (query1);  	Assert.IsTrue (customers.Any ()' "There should be customers whose name begins with A");  	// Orders with freight cost over 100.  	var query2 = new EntityQuery<Order> ().Where (o => o.Freight > 100);  	var orders = await entityManager.ExecuteQuery (query2);  	Assert.IsTrue (orders.Any ()' "There should be orders with freight cost > 100");  	// Orders placed on or after 1/1/1998.  	var testDate = new DateTime (1998' 1' 3);  	var query3 = new EntityQuery<Order> ().Where (o => o.OrderDate >= testDate);  	orders = await entityManager.ExecuteQuery (query3);  	Assert.IsTrue (orders.Any ()' "There should be orders placed after 1/1/1998");  	// Orders placed on 1/1/1998.  	var query4 = new EntityQuery<Order> ().Where (o => o.OrderDate == testDate);  	orders = await entityManager.ExecuteQuery (query4);  	Assert.IsTrue (!orders.Any ()' "There should no orders placed on 1/2/1998.  There are " + orders.Count ());  } catch (Exception e) {  	var message = TestFns.FormatException (e);  	Assert.Fail (message);  }  
Magic Number,Test_NetClient,QueryTests,D:\newReposJune17\breeze_breeze.sharp.samples\DocCode\Client\DocCode.Client\QueryTests.cs,SingleConditions,The following statement contains a magic number: try {  	var entityManager = await TestFns.NewEm (_serviceName);  	var query0 = new EntityQuery<OrderDetail> ().Where (od => od.Quantity > 3);  	var orderDetails = await entityManager.ExecuteQuery (query0);  	Assert.IsTrue (orderDetails.Any ()' "There should be orders with freight cost > 100");  	//  Customers starting w/ 'A' (string comparison)  	var query1 = new EntityQuery<Customer> ().Where (c => c.CompanyName.StartsWith ("A")).OrderBy (c => c.CompanyName);  	var customers = await entityManager.ExecuteQuery (query1);  	Assert.IsTrue (customers.Any ()' "There should be customers whose name begins with A");  	// Orders with freight cost over 100.  	var query2 = new EntityQuery<Order> ().Where (o => o.Freight > 100);  	var orders = await entityManager.ExecuteQuery (query2);  	Assert.IsTrue (orders.Any ()' "There should be orders with freight cost > 100");  	// Orders placed on or after 1/1/1998.  	var testDate = new DateTime (1998' 1' 3);  	var query3 = new EntityQuery<Order> ().Where (o => o.OrderDate >= testDate);  	orders = await entityManager.ExecuteQuery (query3);  	Assert.IsTrue (orders.Any ()' "There should be orders placed after 1/1/1998");  	// Orders placed on 1/1/1998.  	var query4 = new EntityQuery<Order> ().Where (o => o.OrderDate == testDate);  	orders = await entityManager.ExecuteQuery (query4);  	Assert.IsTrue (!orders.Any ()' "There should no orders placed on 1/2/1998.  There are " + orders.Count ());  } catch (Exception e) {  	var message = TestFns.FormatException (e);  	Assert.Fail (message);  }  
Magic Number,Test_NetClient,QueryTests,D:\newReposJune17\breeze_breeze.sharp.samples\DocCode\Client\DocCode.Client\QueryTests.cs,SingleConditions,The following statement contains a magic number: try {  	var entityManager = await TestFns.NewEm (_serviceName);  	var query0 = new EntityQuery<OrderDetail> ().Where (od => od.Quantity > 3);  	var orderDetails = await entityManager.ExecuteQuery (query0);  	Assert.IsTrue (orderDetails.Any ()' "There should be orders with freight cost > 100");  	//  Customers starting w/ 'A' (string comparison)  	var query1 = new EntityQuery<Customer> ().Where (c => c.CompanyName.StartsWith ("A")).OrderBy (c => c.CompanyName);  	var customers = await entityManager.ExecuteQuery (query1);  	Assert.IsTrue (customers.Any ()' "There should be customers whose name begins with A");  	// Orders with freight cost over 100.  	var query2 = new EntityQuery<Order> ().Where (o => o.Freight > 100);  	var orders = await entityManager.ExecuteQuery (query2);  	Assert.IsTrue (orders.Any ()' "There should be orders with freight cost > 100");  	// Orders placed on or after 1/1/1998.  	var testDate = new DateTime (1998' 1' 3);  	var query3 = new EntityQuery<Order> ().Where (o => o.OrderDate >= testDate);  	orders = await entityManager.ExecuteQuery (query3);  	Assert.IsTrue (orders.Any ()' "There should be orders placed after 1/1/1998");  	// Orders placed on 1/1/1998.  	var query4 = new EntityQuery<Order> ().Where (o => o.OrderDate == testDate);  	orders = await entityManager.ExecuteQuery (query4);  	Assert.IsTrue (!orders.Any ()' "There should no orders placed on 1/2/1998.  There are " + orders.Count ());  } catch (Exception e) {  	var message = TestFns.FormatException (e);  	Assert.Fail (message);  }  
Magic Number,Test_NetClient,QueryTests,D:\newReposJune17\breeze_breeze.sharp.samples\DocCode\Client\DocCode.Client\QueryTests.cs,SingleConditions,The following statement contains a magic number: try {  	var entityManager = await TestFns.NewEm (_serviceName);  	var query0 = new EntityQuery<OrderDetail> ().Where (od => od.Quantity > 3);  	var orderDetails = await entityManager.ExecuteQuery (query0);  	Assert.IsTrue (orderDetails.Any ()' "There should be orders with freight cost > 100");  	//  Customers starting w/ 'A' (string comparison)  	var query1 = new EntityQuery<Customer> ().Where (c => c.CompanyName.StartsWith ("A")).OrderBy (c => c.CompanyName);  	var customers = await entityManager.ExecuteQuery (query1);  	Assert.IsTrue (customers.Any ()' "There should be customers whose name begins with A");  	// Orders with freight cost over 100.  	var query2 = new EntityQuery<Order> ().Where (o => o.Freight > 100);  	var orders = await entityManager.ExecuteQuery (query2);  	Assert.IsTrue (orders.Any ()' "There should be orders with freight cost > 100");  	// Orders placed on or after 1/1/1998.  	var testDate = new DateTime (1998' 1' 3);  	var query3 = new EntityQuery<Order> ().Where (o => o.OrderDate >= testDate);  	orders = await entityManager.ExecuteQuery (query3);  	Assert.IsTrue (orders.Any ()' "There should be orders placed after 1/1/1998");  	// Orders placed on 1/1/1998.  	var query4 = new EntityQuery<Order> ().Where (o => o.OrderDate == testDate);  	orders = await entityManager.ExecuteQuery (query4);  	Assert.IsTrue (!orders.Any ()' "There should no orders placed on 1/2/1998.  There are " + orders.Count ());  } catch (Exception e) {  	var message = TestFns.FormatException (e);  	Assert.Fail (message);  }  
Magic Number,Test_NetClient,QueryTests,D:\newReposJune17\breeze_breeze.sharp.samples\DocCode\Client\DocCode.Client\QueryTests.cs,OrderingAndPaging,The following statement contains a magic number: try {  	// Products sorted by name  	query = new EntityQuery<Product> ().Expand ("Category").OrderBy (p => p.ProductName);  	products = await entityManager.ExecuteQuery (query);  	VerifyProductResults (products);  	// Products sorted by name in descending order  	query = new EntityQuery<Product> ().Expand ("Category").OrderByDescending (p => p.ProductName);  	products = await entityManager.ExecuteQuery (query);  	VerifyProductResults (products);  	// Products sorted by price descending' then name ascending  	query = new EntityQuery<Product> ().Expand ("Category").OrderBy (p => p.ProductName).OrderByDescending (p => p.ProductName);  	products = await entityManager.ExecuteQuery (query);  	VerifyProductResults (products);  	// look in results for ...  	//    (27) 'Schoggi Schokolade' at $43.9 in 'Confections''   	//    (63) 'Vegie-spread' at $43.9 in 'Condiments''...  	// Products sorted by related category descending  	query = new EntityQuery<Product> ().Expand ("Category").OrderByDescending (p => p.Category.CategoryName);  	products = await entityManager.ExecuteQuery (query);  	VerifyProductResults (products);  	// First 5 of products ordered by product name' then expanded to related category  	query = new EntityQuery<Product> ().OrderBy (p => p.ProductName).Take (5).Expand ("Category");  	products = await entityManager.ExecuteQuery (query);  	VerifyProductResults (products);  	// Skip first 10 of products ordered by product name' then expanded to related category  	query = new EntityQuery<Product> ().OrderBy (p => p.ProductName).Skip (10).Expand ("Category");  	products = await entityManager.ExecuteQuery (query);  	VerifyProductResults (products);  	// Products paging with skip and take  	query = new EntityQuery<Product> ().OrderBy (p => p.ProductName).Skip (10).Take (5).Expand ("Category");  	products = await entityManager.ExecuteQuery (query);  	VerifyProductResults (products);  	// Inline count of paged products  	var productQuery = new EntityQuery<Product> ().Where (p => p.ProductName.StartsWith ("C"));  	var pagedQuery = productQuery.OrderBy (p => p.ProductName).Skip (5).Take (5).InlineCount ();  	// Execute in parallel and verify products received  	var productTask = entityManager.ExecuteQuery (productQuery);  	var pagedTask = entityManager.ExecuteQuery (pagedQuery);  	await Task.WhenAll (productTask' pagedTask);  	var productCount = productTask.Result.Count ();  	var pageCount = pagedTask.Result.Count ();  	var pagedQueryResult = pagedTask.Result as QueryResult<Product>;  	var inlineCount = pagedQueryResult.InlineCount;  	Assert.AreEqual (productCount' inlineCount' "Inline count should return item count excluding skip/take");  	Assert.IsTrue (pageCount <= productCount' "Paged query should return subset of total query");  } catch (Exception e) {  	var message = TestFns.FormatException (e);  	Assert.Fail (message);  }  
Magic Number,Test_NetClient,QueryTests,D:\newReposJune17\breeze_breeze.sharp.samples\DocCode\Client\DocCode.Client\QueryTests.cs,OrderingAndPaging,The following statement contains a magic number: try {  	// Products sorted by name  	query = new EntityQuery<Product> ().Expand ("Category").OrderBy (p => p.ProductName);  	products = await entityManager.ExecuteQuery (query);  	VerifyProductResults (products);  	// Products sorted by name in descending order  	query = new EntityQuery<Product> ().Expand ("Category").OrderByDescending (p => p.ProductName);  	products = await entityManager.ExecuteQuery (query);  	VerifyProductResults (products);  	// Products sorted by price descending' then name ascending  	query = new EntityQuery<Product> ().Expand ("Category").OrderBy (p => p.ProductName).OrderByDescending (p => p.ProductName);  	products = await entityManager.ExecuteQuery (query);  	VerifyProductResults (products);  	// look in results for ...  	//    (27) 'Schoggi Schokolade' at $43.9 in 'Confections''   	//    (63) 'Vegie-spread' at $43.9 in 'Condiments''...  	// Products sorted by related category descending  	query = new EntityQuery<Product> ().Expand ("Category").OrderByDescending (p => p.Category.CategoryName);  	products = await entityManager.ExecuteQuery (query);  	VerifyProductResults (products);  	// First 5 of products ordered by product name' then expanded to related category  	query = new EntityQuery<Product> ().OrderBy (p => p.ProductName).Take (5).Expand ("Category");  	products = await entityManager.ExecuteQuery (query);  	VerifyProductResults (products);  	// Skip first 10 of products ordered by product name' then expanded to related category  	query = new EntityQuery<Product> ().OrderBy (p => p.ProductName).Skip (10).Expand ("Category");  	products = await entityManager.ExecuteQuery (query);  	VerifyProductResults (products);  	// Products paging with skip and take  	query = new EntityQuery<Product> ().OrderBy (p => p.ProductName).Skip (10).Take (5).Expand ("Category");  	products = await entityManager.ExecuteQuery (query);  	VerifyProductResults (products);  	// Inline count of paged products  	var productQuery = new EntityQuery<Product> ().Where (p => p.ProductName.StartsWith ("C"));  	var pagedQuery = productQuery.OrderBy (p => p.ProductName).Skip (5).Take (5).InlineCount ();  	// Execute in parallel and verify products received  	var productTask = entityManager.ExecuteQuery (productQuery);  	var pagedTask = entityManager.ExecuteQuery (pagedQuery);  	await Task.WhenAll (productTask' pagedTask);  	var productCount = productTask.Result.Count ();  	var pageCount = pagedTask.Result.Count ();  	var pagedQueryResult = pagedTask.Result as QueryResult<Product>;  	var inlineCount = pagedQueryResult.InlineCount;  	Assert.AreEqual (productCount' inlineCount' "Inline count should return item count excluding skip/take");  	Assert.IsTrue (pageCount <= productCount' "Paged query should return subset of total query");  } catch (Exception e) {  	var message = TestFns.FormatException (e);  	Assert.Fail (message);  }  
Magic Number,Test_NetClient,QueryTests,D:\newReposJune17\breeze_breeze.sharp.samples\DocCode\Client\DocCode.Client\QueryTests.cs,OrderingAndPaging,The following statement contains a magic number: try {  	// Products sorted by name  	query = new EntityQuery<Product> ().Expand ("Category").OrderBy (p => p.ProductName);  	products = await entityManager.ExecuteQuery (query);  	VerifyProductResults (products);  	// Products sorted by name in descending order  	query = new EntityQuery<Product> ().Expand ("Category").OrderByDescending (p => p.ProductName);  	products = await entityManager.ExecuteQuery (query);  	VerifyProductResults (products);  	// Products sorted by price descending' then name ascending  	query = new EntityQuery<Product> ().Expand ("Category").OrderBy (p => p.ProductName).OrderByDescending (p => p.ProductName);  	products = await entityManager.ExecuteQuery (query);  	VerifyProductResults (products);  	// look in results for ...  	//    (27) 'Schoggi Schokolade' at $43.9 in 'Confections''   	//    (63) 'Vegie-spread' at $43.9 in 'Condiments''...  	// Products sorted by related category descending  	query = new EntityQuery<Product> ().Expand ("Category").OrderByDescending (p => p.Category.CategoryName);  	products = await entityManager.ExecuteQuery (query);  	VerifyProductResults (products);  	// First 5 of products ordered by product name' then expanded to related category  	query = new EntityQuery<Product> ().OrderBy (p => p.ProductName).Take (5).Expand ("Category");  	products = await entityManager.ExecuteQuery (query);  	VerifyProductResults (products);  	// Skip first 10 of products ordered by product name' then expanded to related category  	query = new EntityQuery<Product> ().OrderBy (p => p.ProductName).Skip (10).Expand ("Category");  	products = await entityManager.ExecuteQuery (query);  	VerifyProductResults (products);  	// Products paging with skip and take  	query = new EntityQuery<Product> ().OrderBy (p => p.ProductName).Skip (10).Take (5).Expand ("Category");  	products = await entityManager.ExecuteQuery (query);  	VerifyProductResults (products);  	// Inline count of paged products  	var productQuery = new EntityQuery<Product> ().Where (p => p.ProductName.StartsWith ("C"));  	var pagedQuery = productQuery.OrderBy (p => p.ProductName).Skip (5).Take (5).InlineCount ();  	// Execute in parallel and verify products received  	var productTask = entityManager.ExecuteQuery (productQuery);  	var pagedTask = entityManager.ExecuteQuery (pagedQuery);  	await Task.WhenAll (productTask' pagedTask);  	var productCount = productTask.Result.Count ();  	var pageCount = pagedTask.Result.Count ();  	var pagedQueryResult = pagedTask.Result as QueryResult<Product>;  	var inlineCount = pagedQueryResult.InlineCount;  	Assert.AreEqual (productCount' inlineCount' "Inline count should return item count excluding skip/take");  	Assert.IsTrue (pageCount <= productCount' "Paged query should return subset of total query");  } catch (Exception e) {  	var message = TestFns.FormatException (e);  	Assert.Fail (message);  }  
Magic Number,Test_NetClient,QueryTests,D:\newReposJune17\breeze_breeze.sharp.samples\DocCode\Client\DocCode.Client\QueryTests.cs,OrderingAndPaging,The following statement contains a magic number: try {  	// Products sorted by name  	query = new EntityQuery<Product> ().Expand ("Category").OrderBy (p => p.ProductName);  	products = await entityManager.ExecuteQuery (query);  	VerifyProductResults (products);  	// Products sorted by name in descending order  	query = new EntityQuery<Product> ().Expand ("Category").OrderByDescending (p => p.ProductName);  	products = await entityManager.ExecuteQuery (query);  	VerifyProductResults (products);  	// Products sorted by price descending' then name ascending  	query = new EntityQuery<Product> ().Expand ("Category").OrderBy (p => p.ProductName).OrderByDescending (p => p.ProductName);  	products = await entityManager.ExecuteQuery (query);  	VerifyProductResults (products);  	// look in results for ...  	//    (27) 'Schoggi Schokolade' at $43.9 in 'Confections''   	//    (63) 'Vegie-spread' at $43.9 in 'Condiments''...  	// Products sorted by related category descending  	query = new EntityQuery<Product> ().Expand ("Category").OrderByDescending (p => p.Category.CategoryName);  	products = await entityManager.ExecuteQuery (query);  	VerifyProductResults (products);  	// First 5 of products ordered by product name' then expanded to related category  	query = new EntityQuery<Product> ().OrderBy (p => p.ProductName).Take (5).Expand ("Category");  	products = await entityManager.ExecuteQuery (query);  	VerifyProductResults (products);  	// Skip first 10 of products ordered by product name' then expanded to related category  	query = new EntityQuery<Product> ().OrderBy (p => p.ProductName).Skip (10).Expand ("Category");  	products = await entityManager.ExecuteQuery (query);  	VerifyProductResults (products);  	// Products paging with skip and take  	query = new EntityQuery<Product> ().OrderBy (p => p.ProductName).Skip (10).Take (5).Expand ("Category");  	products = await entityManager.ExecuteQuery (query);  	VerifyProductResults (products);  	// Inline count of paged products  	var productQuery = new EntityQuery<Product> ().Where (p => p.ProductName.StartsWith ("C"));  	var pagedQuery = productQuery.OrderBy (p => p.ProductName).Skip (5).Take (5).InlineCount ();  	// Execute in parallel and verify products received  	var productTask = entityManager.ExecuteQuery (productQuery);  	var pagedTask = entityManager.ExecuteQuery (pagedQuery);  	await Task.WhenAll (productTask' pagedTask);  	var productCount = productTask.Result.Count ();  	var pageCount = pagedTask.Result.Count ();  	var pagedQueryResult = pagedTask.Result as QueryResult<Product>;  	var inlineCount = pagedQueryResult.InlineCount;  	Assert.AreEqual (productCount' inlineCount' "Inline count should return item count excluding skip/take");  	Assert.IsTrue (pageCount <= productCount' "Paged query should return subset of total query");  } catch (Exception e) {  	var message = TestFns.FormatException (e);  	Assert.Fail (message);  }  
Magic Number,Test_NetClient,QueryTests,D:\newReposJune17\breeze_breeze.sharp.samples\DocCode\Client\DocCode.Client\QueryTests.cs,OrderingAndPaging,The following statement contains a magic number: try {  	// Products sorted by name  	query = new EntityQuery<Product> ().Expand ("Category").OrderBy (p => p.ProductName);  	products = await entityManager.ExecuteQuery (query);  	VerifyProductResults (products);  	// Products sorted by name in descending order  	query = new EntityQuery<Product> ().Expand ("Category").OrderByDescending (p => p.ProductName);  	products = await entityManager.ExecuteQuery (query);  	VerifyProductResults (products);  	// Products sorted by price descending' then name ascending  	query = new EntityQuery<Product> ().Expand ("Category").OrderBy (p => p.ProductName).OrderByDescending (p => p.ProductName);  	products = await entityManager.ExecuteQuery (query);  	VerifyProductResults (products);  	// look in results for ...  	//    (27) 'Schoggi Schokolade' at $43.9 in 'Confections''   	//    (63) 'Vegie-spread' at $43.9 in 'Condiments''...  	// Products sorted by related category descending  	query = new EntityQuery<Product> ().Expand ("Category").OrderByDescending (p => p.Category.CategoryName);  	products = await entityManager.ExecuteQuery (query);  	VerifyProductResults (products);  	// First 5 of products ordered by product name' then expanded to related category  	query = new EntityQuery<Product> ().OrderBy (p => p.ProductName).Take (5).Expand ("Category");  	products = await entityManager.ExecuteQuery (query);  	VerifyProductResults (products);  	// Skip first 10 of products ordered by product name' then expanded to related category  	query = new EntityQuery<Product> ().OrderBy (p => p.ProductName).Skip (10).Expand ("Category");  	products = await entityManager.ExecuteQuery (query);  	VerifyProductResults (products);  	// Products paging with skip and take  	query = new EntityQuery<Product> ().OrderBy (p => p.ProductName).Skip (10).Take (5).Expand ("Category");  	products = await entityManager.ExecuteQuery (query);  	VerifyProductResults (products);  	// Inline count of paged products  	var productQuery = new EntityQuery<Product> ().Where (p => p.ProductName.StartsWith ("C"));  	var pagedQuery = productQuery.OrderBy (p => p.ProductName).Skip (5).Take (5).InlineCount ();  	// Execute in parallel and verify products received  	var productTask = entityManager.ExecuteQuery (productQuery);  	var pagedTask = entityManager.ExecuteQuery (pagedQuery);  	await Task.WhenAll (productTask' pagedTask);  	var productCount = productTask.Result.Count ();  	var pageCount = pagedTask.Result.Count ();  	var pagedQueryResult = pagedTask.Result as QueryResult<Product>;  	var inlineCount = pagedQueryResult.InlineCount;  	Assert.AreEqual (productCount' inlineCount' "Inline count should return item count excluding skip/take");  	Assert.IsTrue (pageCount <= productCount' "Paged query should return subset of total query");  } catch (Exception e) {  	var message = TestFns.FormatException (e);  	Assert.Fail (message);  }  
Magic Number,Test_NetClient,QueryTests,D:\newReposJune17\breeze_breeze.sharp.samples\DocCode\Client\DocCode.Client\QueryTests.cs,OrderingAndPaging,The following statement contains a magic number: try {  	// Products sorted by name  	query = new EntityQuery<Product> ().Expand ("Category").OrderBy (p => p.ProductName);  	products = await entityManager.ExecuteQuery (query);  	VerifyProductResults (products);  	// Products sorted by name in descending order  	query = new EntityQuery<Product> ().Expand ("Category").OrderByDescending (p => p.ProductName);  	products = await entityManager.ExecuteQuery (query);  	VerifyProductResults (products);  	// Products sorted by price descending' then name ascending  	query = new EntityQuery<Product> ().Expand ("Category").OrderBy (p => p.ProductName).OrderByDescending (p => p.ProductName);  	products = await entityManager.ExecuteQuery (query);  	VerifyProductResults (products);  	// look in results for ...  	//    (27) 'Schoggi Schokolade' at $43.9 in 'Confections''   	//    (63) 'Vegie-spread' at $43.9 in 'Condiments''...  	// Products sorted by related category descending  	query = new EntityQuery<Product> ().Expand ("Category").OrderByDescending (p => p.Category.CategoryName);  	products = await entityManager.ExecuteQuery (query);  	VerifyProductResults (products);  	// First 5 of products ordered by product name' then expanded to related category  	query = new EntityQuery<Product> ().OrderBy (p => p.ProductName).Take (5).Expand ("Category");  	products = await entityManager.ExecuteQuery (query);  	VerifyProductResults (products);  	// Skip first 10 of products ordered by product name' then expanded to related category  	query = new EntityQuery<Product> ().OrderBy (p => p.ProductName).Skip (10).Expand ("Category");  	products = await entityManager.ExecuteQuery (query);  	VerifyProductResults (products);  	// Products paging with skip and take  	query = new EntityQuery<Product> ().OrderBy (p => p.ProductName).Skip (10).Take (5).Expand ("Category");  	products = await entityManager.ExecuteQuery (query);  	VerifyProductResults (products);  	// Inline count of paged products  	var productQuery = new EntityQuery<Product> ().Where (p => p.ProductName.StartsWith ("C"));  	var pagedQuery = productQuery.OrderBy (p => p.ProductName).Skip (5).Take (5).InlineCount ();  	// Execute in parallel and verify products received  	var productTask = entityManager.ExecuteQuery (productQuery);  	var pagedTask = entityManager.ExecuteQuery (pagedQuery);  	await Task.WhenAll (productTask' pagedTask);  	var productCount = productTask.Result.Count ();  	var pageCount = pagedTask.Result.Count ();  	var pagedQueryResult = pagedTask.Result as QueryResult<Product>;  	var inlineCount = pagedQueryResult.InlineCount;  	Assert.AreEqual (productCount' inlineCount' "Inline count should return item count excluding skip/take");  	Assert.IsTrue (pageCount <= productCount' "Paged query should return subset of total query");  } catch (Exception e) {  	var message = TestFns.FormatException (e);  	Assert.Fail (message);  }  
Magic Number,Test_NetClient,QueryTests,D:\newReposJune17\breeze_breeze.sharp.samples\DocCode\Client\DocCode.Client\QueryTests.cs,OrderingAndPaging,The following statement contains a magic number: query = new EntityQuery<Product> ().OrderBy (p => p.ProductName).Take (5).Expand ("Category");  
Magic Number,Test_NetClient,QueryTests,D:\newReposJune17\breeze_breeze.sharp.samples\DocCode\Client\DocCode.Client\QueryTests.cs,OrderingAndPaging,The following statement contains a magic number: query = new EntityQuery<Product> ().OrderBy (p => p.ProductName).Skip (10).Expand ("Category");  
Magic Number,Test_NetClient,QueryTests,D:\newReposJune17\breeze_breeze.sharp.samples\DocCode\Client\DocCode.Client\QueryTests.cs,OrderingAndPaging,The following statement contains a magic number: query = new EntityQuery<Product> ().OrderBy (p => p.ProductName).Skip (10).Take (5).Expand ("Category");  
Magic Number,Test_NetClient,QueryTests,D:\newReposJune17\breeze_breeze.sharp.samples\DocCode\Client\DocCode.Client\QueryTests.cs,OrderingAndPaging,The following statement contains a magic number: query = new EntityQuery<Product> ().OrderBy (p => p.ProductName).Skip (10).Take (5).Expand ("Category");  
Magic Number,Test_NetClient,SaveTests,D:\newReposJune17\breeze_breeze.sharp.samples\DocCode\Client\DocCode.Client\SaveTests.cs,AddUpdateAndDeleteInBatch,The following statement contains a magic number: Assert.IsTrue (todos.Count () == 2' "Take(2) query should return the two items");  
Magic Number,Test_NetClient,SaveTests,D:\newReposJune17\breeze_breeze.sharp.samples\DocCode\Client\DocCode.Client\SaveTests.cs,AddUpdateAndDeleteInBatch,The following statement contains a magic number: Assert.AreEqual (numChanges' 3' "There should be three changed entities in the cache");  
Magic Number,Test_NetClient,SaveTests,D:\newReposJune17\breeze_breeze.sharp.samples\DocCode\Client\DocCode.Client\SaveTests.cs,AddUpdateAndDeleteInBatch,The following statement contains a magic number: try {  	var saveResult = await entityManager.SaveChanges ();  	Assert.AreEqual (saveResult.Entities.Count ()' 3' "There should be three saved entities");  	Assert.IsTrue (saveResult.Entities.All (e => e.EntityAspect.EntityState.IsUnchanged () || e.EntityAspect.EntityState.IsDetached ())' "All saved entities should be in unchanged state");  } catch (Exception e) {  	var message = "Server should not have rejected save of TodoItem entities with the error " + e.Message;  	Assert.Fail (message);  }  
Magic Number,Test_NetClient,SaveTests,D:\newReposJune17\breeze_breeze.sharp.samples\DocCode\Client\DocCode.Client\SaveTests.cs,AddUpdateAndDeleteInBatch,The following statement contains a magic number: Assert.AreEqual (saveResult.Entities.Count ()' 3' "There should be three saved entities");  
Magic Number,Test_NetClient,SaveTests,D:\newReposJune17\breeze_breeze.sharp.samples\DocCode\Client\DocCode.Client\SaveTests.cs,AddUpdateAndDeleteInBatch,The following statement contains a magic number: Assert.AreEqual (entitiesInCache.Count ()' 2' "There should be only two entities in cache after save of deleted entity");  
Magic Number,Test_NetClient,TestFns,D:\newReposJune17\breeze_breeze.sharp.samples\DocCode\Client\DocCode.Client\TestFns.cs,MorphString,The following statement contains a magic number: if (String.IsNullOrEmpty (val)) {  	return suffix;  } else {  	if (val.EndsWith (suffix)) {  		val = val.Substring (0' val.Length - 2);  	} else {  		val = val + suffix;  	}  }  
Magic Number,Test_NetClient,TestFns,D:\newReposJune17\breeze_breeze.sharp.samples\DocCode\Client\DocCode.Client\TestFns.cs,MorphString,The following statement contains a magic number: if (val.EndsWith (suffix)) {  	val = val.Substring (0' val.Length - 2);  } else {  	val = val + suffix;  }  
Magic Number,Test_NetClient,TestFns,D:\newReposJune17\breeze_breeze.sharp.samples\DocCode\Client\DocCode.Client\TestFns.cs,MorphString,The following statement contains a magic number: val = val.Substring (0' val.Length - 2);  
