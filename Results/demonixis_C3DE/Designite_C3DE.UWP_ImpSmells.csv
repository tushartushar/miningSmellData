Implementation smell,Namespace,Class,File,Method,Description
Long Method,C3DE.Graphics.PostProcessing,Bloom,C:\repos\demonixis_C3DE\C3DE\Graphics\PostProcessing\Bloom.cs,Draw,The method has 133 lines of code.
Complex Method,C3DE.Graphics.PostProcessing,Bloom,C:\repos\demonixis_C3DE\C3DE\Graphics\PostProcessing\Bloom.cs,Draw,Cyclomatic complexity of the method is 14
Complex Method,C3DE.Graphics.Primitives,CylinderMesh,C:\repos\demonixis_C3DE\C3DE\Graphics\Primitives\CylinderMesh.cs,CreateGeometry,Cyclomatic complexity of the method is 9
Complex Method,C3DE.Graphics.Rendering,ForwardRenderer,C:\repos\demonixis_C3DE\C3DE\Graphics\Rendering\ForwardRenderer.cs,RenderObjects,Cyclomatic complexity of the method is 9
Long Parameter List,C3DE.Components.Rendering,Terrain,C:\repos\demonixis_C3DE\C3DE\Components\Rendering\Terrain.cs,Randomize,The method has 5 parameters. Parameters: octaves' amplitude' frequency' persistence' limit
Long Parameter List,C3DE.Graphics.PostProcessing,BloomLegacy,C:\repos\demonixis_C3DE\C3DE\Graphics\PostProcessing\BloomLegacy.cs,DrawFullscreenQuad,The method has 5 parameters. Parameters: spriteBatch' texture' renderTarget' effect' currentBuffer
Long Parameter List,C3DE.Graphics.PostProcessing,BloomLegacy,C:\repos\demonixis_C3DE\C3DE\Graphics\PostProcessing\BloomLegacy.cs,DrawFullscreenQuad,The method has 6 parameters. Parameters: spriteBatch' texture' width' height' effect' currentBuffer
Long Parameter List,C3DE.Graphics.PostProcessing,BloomLegacySettings,C:\repos\demonixis_C3DE\C3DE\Graphics\PostProcessing\BloomLegacySettings.cs,BloomLegacySettings,The method has 7 parameters. Parameters: name' bloomThreshold' blurAmount' bloomIntensity' baseIntensity' bloomSaturation' baseSaturation
Long Parameter List,C3DE.Graphics.PostProcessing,PostProcessPass,C:\repos\demonixis_C3DE\C3DE\Graphics\PostProcessing\PostProcessPass.cs,DrawFullscreenQuad,The method has 5 parameters. Parameters: spriteBatch' texture' width' height' effect
Long Parameter List,Microsoft.Xna.Framework,QuaternionExtensions,C:\repos\demonixis_C3DE\C3DE\Extensions\QuaternionExtensions.cs,ToEuler,The method has 5 parameters. Parameters: x' y' z' w' result
Long Parameter List,C3DE.Graphics.Primitives,CylinderMesh,C:\repos\demonixis_C3DE\C3DE\Graphics\Primitives\CylinderMesh.cs,CylinderMesh,The method has 6 parameters. Parameters: startPosition' endPosition' startRadius' endRadius' nbSegments' nbSlices
Long Parameter List,C3DE.UI,GUI,C:\repos\demonixis_C3DE\C3DE\UI\GUI.cs,Slider,The method has 5 parameters. Parameters: rect' value' leftValue' rightValue' horizontal
Long Parameter List,C3DE.UI,GUI,C:\repos\demonixis_C3DE\C3DE\UI\GUI.cs,DrawTexture,The method has 9 parameters. Parameters: position' texture' sourceRectangle' color' rotation' origin' scale' effect' depth
Long Parameter List,C3DE.UI,GUI,C:\repos\demonixis_C3DE\C3DE\UI\GUI.cs,DrawTexture,The method has 9 parameters. Parameters: texture' position' sourceRectangle' color' rotation' origin' scale' effect' depth
Long Parameter List,C3DE.Utils,GraphicsHelper,C:\repos\demonixis_C3DE\C3DE\Utils\GraphicsHelper.cs,CreateBorderTexture,The method has 5 parameters. Parameters: borderColor' color' width' height' thickness
Long Parameter List,C3DE.Utils,RandomHelper,C:\repos\demonixis_C3DE\C3DE\Utils\RandomHelper.cs,GetVector3,The method has 6 parameters. Parameters: minX' minY' minZ' maxX' maxY' maxZ
Long Identifier,C3DE.Graphics.PostProcessing,Bloom,C:\repos\demonixis_C3DE\C3DE\Graphics\PostProcessing\Bloom.cs,,The length of the parameter _bloomInverseResolutionParameter is 32.
Long Statement,C3DE,Serializer,C:\repos\demonixis_C3DE\C3DE\Serializer.cs,AddAssembly,The length of the statement  "                if (Attribute.IsDefined(type' typeof(DataContractAttribute)) || Attribute.IsDefined(type' typeof(CollectionDataContractAttribute))) " is 131.
Long Statement,C3DE.Components,Camera,C:\repos\demonixis_C3DE\C3DE\Components\Camera.cs,ComputeProjectionMatrix,The length of the statement  "                m_ProjectionMatrix = Matrix.CreateOrthographic(Application.GraphicsDevice.Viewport.Width' Application.GraphicsDevice.Viewport.Height' _nearPlane' _farPlane); " is 157.
Long Statement,C3DE.Components,Camera,C:\repos\demonixis_C3DE\C3DE\Components\Camera.cs,GetRay,The length of the statement  "            nearPoint = Application.GraphicsDevice.Viewport.Unproject(nearPoint' m_ProjectionMatrix' m_ViewMatrix' Matrix.Identity); " is 120.
Long Statement,C3DE.Components,Transform,C:\repos\demonixis_C3DE\C3DE\Components\Transform.cs,GetTransformedVector,The length of the statement  "            return Vector3.Transform(direction' Matrix.CreateFromYawPitchRoll(m_LocalRotation.Y' m_LocalRotation.X' m_LocalRotation.Z)); " is 124.
Long Statement,C3DE.Components.Rendering,LensFlare,C:\repos\demonixis_C3DE\C3DE\Components\Rendering\LensFlare.cs,DrawFlares,The length of the statement  "                m_SpriteBatch.Draw(flareTexture' flarePosition' null' new Color(flareColor)' 1' flareOrigin' flare.Scale' SpriteEffects.None' 0); " is 129.
Long Statement,C3DE.Components.Rendering,BoundingBoxRenderer,C:\repos\demonixis_C3DE\C3DE\Components\Rendering\BoundingBoxRenderer.cs,Draw,The length of the statement  "            _effect.World = Matrix.CreateFromYawPitchRoll(m_Transform.LocalRotation.Y' m_Transform.LocalRotation.X' m_Transform.LocalRotation.Z) * Matrix.CreateTranslation(m_Transform.LocalPosition); " is 187.
Long Statement,C3DE.Components.Rendering,Terrain,C:\repos\demonixis_C3DE\C3DE\Components\Rendering\Terrain.cs,ApplyCollision,The length of the statement  "            var y = (GetTerrainHeight(tr.LocalPosition.X' 0' tr.LocalPosition.Z) + 2 * m_Geometry.Size.Y - tr.LocalPosition.Y) * 0.2f; " is 122.
Long Statement,C3DE.Components.Rendering,ModelRenderer,C:\repos\demonixis_C3DE\C3DE\Components\Rendering\ModelRenderer.cs,ComputeBoundingInfos,The length of the statement  "                boundingSphere.Radius *= Math.Max(Math.Max(m_Transform.LocalScale.X' m_Transform.LocalScale.Y)' m_Transform.LocalScale.Z); " is 122.
Long Statement,C3DE.Components.Rendering,ModelRenderer,C:\repos\demonixis_C3DE\C3DE\Components\Rendering\ModelRenderer.cs,DrawNative,The length of the statement  "                    device.DrawIndexedPrimitives(PrimitiveType.TriangleList' meshPart.VertexOffset' meshPart.StartIndex' meshPart.PrimitiveCount); " is 126.
Long Statement,C3DE.Components.Rendering,DepthRenderer,C:\repos\demonixis_C3DE\C3DE\Components\Rendering\DepthNormalRenderer.cs,CreateRenderTargets,The length of the statement  "            m_DepthRT = new RenderTarget2D(device' pp.BackBufferWidth' pp.BackBufferHeight' false' SurfaceFormat.Single' DepthFormat.Depth24); " is 130.
Long Statement,C3DE.Components.Rendering,DepthRenderer,C:\repos\demonixis_C3DE\C3DE\Components\Rendering\DepthNormalRenderer.cs,CreateRenderTargets,The length of the statement  "            m_NormalRT = new RenderTarget2D(device' pp.BackBufferWidth' pp.BackBufferHeight' false' SurfaceFormat.Color' DepthFormat.Depth24); " is 130.
Long Statement,C3DE.Components.Controllers,FirstPersonController,C:\repos\demonixis_C3DE\C3DE\Components\Controllers\FirstPersonController.cs,Update,The length of the statement  "            _transformedReference = Vector3.Transform(translation' !Fly ? Matrix.CreateRotationY(m_Transform.LocalRotation.Y) : _rotationMatrix); " is 133.
Long Statement,C3DE.Components.Physics,Rigidbody,C:\repos\demonixis_C3DE\C3DE\Components\Physics\Rigidbody.cs,SyncTransform,The length of the statement  "            m_rigidBody.Orientation = ToJMatrix(Matrix.CreateFromYawPitchRoll(m_Transform.LocalRotation.Y' m_Transform.LocalRotation.Y' m_Transform.LocalRotation.Z)); " is 154.
Long Statement,C3DE.Components.Controllers.Mobile,SwipeZone,C:\repos\demonixis_C3DE\C3DE\Components\Controllers\Mobile\SwipeZone.cs,Start,The length of the statement  "                _borderZone = new Rectangle(Screen.VirtualWidthPerTwo' 10' Screen.VirtualWidthPerTwo' Screen.VirtualHeight - Screen.VirtualHeight / 3); " is 135.
Long Statement,C3DE.Components.Controllers.Mobile,SwipeZone,C:\repos\demonixis_C3DE\C3DE\Components\Controllers\Mobile\SwipeZone.cs,Start,The length of the statement  "                _borderTexture = GraphicsHelper.CreateBorderTexture(new Color(0.3f' 0.3f' 0.3f' 0.6f)' Color.Transparent' _borderZone.Width' _borderZone.Height' 2); " is 148.
Long Statement,C3DE.Components.Lighting,Light,C:\repos\demonixis_C3DE\C3DE\Components\Lighting\Light.cs,Update,The length of the statement  "            projectionMatrix = Matrix.CreateOrthographicOffCenter(-size' size' size' -size' dist - sphere.Radius' dist + sphere.Radius * 2); " is 128.
Long Statement,C3DE.Components.Lighting,ShadowGenerator,C:\repos\demonixis_C3DE\C3DE\Components\Lighting\ShadowGenerator.cs,SetShadowMapSize,The length of the statement  "            shadowMap = new RenderTarget2D(device' size' size' false' SurfaceFormat.Single' DepthFormat.Depth24' 0' RenderTargetUsage.DiscardContents); " is 139.
Long Statement,C3DE.Graphics.Materials,BillboardMaterial,C:\repos\demonixis_C3DE\C3DE\Graphics\Materials\BillboardMaterial.cs,Pass,The length of the statement  "            var world = Matrix.CreateConstrainedBillboard(renderable.m_Transform.LocalPosition' Camera.Main.m_Transform.LocalPosition' Vector3.Up' Camera.Main.m_Transform.Forward' renderable.m_Transform.Forward); " is 200.
Long Statement,C3DE.Graphics.PostProcessing,Bloom,C:\repos\demonixis_C3DE\C3DE\Graphics\PostProcessing\Bloom.cs,Draw,The length of the statement  "            //Change renderTarget resolution if different from what we expected. If lower than the inputTexture we gain performance. " is 120.
Long Statement,C3DE.Graphics.PostProcessing,ColorGrading,C:\repos\demonixis_C3DE\C3DE\Graphics\PostProcessing\ColorGrading.cs,CreateLUT,The length of the statement  "            int size = lutsize == LUTSizes.Size16 ? 16 * 4 : lutsize == LUTSizes.Size32 ? 32 * 8 : lutsize == LUTSizes.Size64 ? 64 * 8 : 4 * 2; " is 131.
Long Statement,C3DE.Graphics.PostProcessing,ColorGrading,C:\repos\demonixis_C3DE\C3DE\Graphics\PostProcessing\ColorGrading.cs,CreateLUT,The length of the statement  "            _renderTarget = new RenderTarget2D(graphics' size' size / (lutsize == LUTSizes.Size32 ? 2 : 1)' false' SurfaceFormat.Color' DepthFormat.None); " is 142.
Long Statement,C3DE.Graphics.PostProcessing,ColorGrading,C:\repos\demonixis_C3DE\C3DE\Graphics\PostProcessing\ColorGrading.cs,Draw,The length of the statement  "                _renderTarget = new RenderTarget2D(graphics' renderTarget.Width' renderTarget.Height' false' SurfaceFormat.Color' DepthFormat.None); " is 132.
Long Statement,C3DE.Graphics.PostProcessing,BloomLegacy,C:\repos\demonixis_C3DE\C3DE\Graphics\PostProcessing\BloomLegacy.cs,Initialize,The length of the statement  "            sceneRenderTarget = new RenderTarget2D(Application.GraphicsDevice' width' height' false' format' pp.DepthStencilFormat' pp.MultiSampleCount' RenderTargetUsage.DiscardContents); " is 176.
Long Statement,C3DE.Graphics.PostProcessing,BloomLegacy,C:\repos\demonixis_C3DE\C3DE\Graphics\PostProcessing\BloomLegacy.cs,Draw,The length of the statement  "            DrawFullscreenQuad(spriteBatch' renderTarget1' renderTarget2' gaussianBlurEffect' IntermediateBuffer.BlurredHorizontally); " is 122.
Long Statement,C3DE.Graphics.PostProcessing,BloomLegacy,C:\repos\demonixis_C3DE\C3DE\Graphics\PostProcessing\BloomLegacy.cs,Draw,The length of the statement  "            DrawFullscreenQuad(spriteBatch' renderTarget1' viewport.Width' viewport.Height' bloomCombineEffect' IntermediateBuffer.FinalResult); " is 132.
Long Statement,C3DE.Graphics.PostProcessing,PostProcessPass,C:\repos\demonixis_C3DE\C3DE\Graphics\PostProcessing\PostProcessPass.cs,GetRenderTarget,The length of the statement  "            return new RenderTarget2D(Application.GraphicsDevice' width' height' false' format' pp.DepthStencilFormat' pp.MultiSampleCount' targetUsage); " is 141.
Long Statement,C3DE.Inputs,TouchComponent,C:\repos\demonixis_C3DE\C3DE\Inputs\TouchComponent.cs,JustPressed,The length of the statement  "            return (_lastTouchState[id].State == TouchLocationState.Pressed || _lastTouchState[id].State == TouchLocationState.Moved) && (_touchState[id].State == TouchLocationState.Released); " is 180.
Long Statement,C3DE.Graphics.Rendering,Renderer,C:\repos\demonixis_C3DE\C3DE\Graphics\Rendering\Renderer.cs,RenderUI,The length of the statement  "                m_spriteBatch.Begin(SpriteSortMode.Deferred' BlendState.AlphaBlend' SamplerState.PointClamp' DepthStencilState.None' RasterizerState.CullNone' GUI.uiEffect' GUI.uiMatrix); " is 171.
Long Statement,C3DE.Graphics.Rendering,ForwardRenderer,C:\repos\demonixis_C3DE\C3DE\Graphics\Rendering\ForwardRenderer.cs,RebuildRenderTargets,The length of the statement  "                m_SceneRenderTarget = new RenderTarget2D(m_graphicsDevice' m_graphicsDevice.Viewport.Width' m_graphicsDevice.Viewport.Height' false' m_HDRSupport ? SurfaceFormat.HdrBlendable : SurfaceFormat.Color' DepthFormat.Depth24Stencil8' 0' RenderTargetUsage.PreserveContents); " is 266.
Long Statement,C3DE.Graphics.Rendering,ForwardRenderer,C:\repos\demonixis_C3DE\C3DE\Graphics\Rendering\ForwardRenderer.cs,renderBuffers,The length of the statement  "            m_spriteBatch.Begin(SpriteSortMode.Deferred' BlendState.Opaque' SamplerState.PointClamp' DepthStencilState.None' RasterizerState.CullNone); " is 139.
Long Statement,C3DE.Graphics.Rendering,ForwardRenderer,C:\repos\demonixis_C3DE\C3DE\Graphics\Rendering\ForwardRenderer.cs,RenderEditor,The length of the statement  "            m_spriteBatch.Begin(SpriteSortMode.Deferred' BlendState.Opaque' SamplerState.PointClamp' DepthStencilState.None' RasterizerState.CullNone); " is 139.
Long Statement,C3DE.Graphics.Rendering,ForwardRenderer,C:\repos\demonixis_C3DE\C3DE\Graphics\Rendering\ForwardRenderer.cs,DrawVRPreview,The length of the statement  "                m_spriteBatch.Draw(m_VRRenderTargets[0]' new Rectangle(0' 0' width' height)' null' Color.White' 0' Vector2.Zero' m_VRService.PreviewRenderEffect' 0); " is 149.
Long Statement,C3DE.Graphics.Rendering,ForwardRenderer,C:\repos\demonixis_C3DE\C3DE\Graphics\Rendering\ForwardRenderer.cs,DrawVRPreview,The length of the statement  "                m_spriteBatch.Draw(m_VRRenderTargets[1]' new Rectangle(width' 0' width' height)' null' Color.White' 0' Vector2.Zero' m_VRService.PreviewRenderEffect' 0); " is 153.
Long Statement,C3DE.Graphics.Rendering,ForwardRenderer,C:\repos\demonixis_C3DE\C3DE\Graphics\Rendering\ForwardRenderer.cs,DrawVRPreview,The length of the statement  "                m_spriteBatch.Draw(m_VRRenderTargets[eye]' new Rectangle(offset' 0' width' height)' null' Color.White' 0' Vector2.Zero' m_VRService.PreviewRenderEffect' 0); " is 156.
Long Statement,C3DE.UI,GUI,C:\repos\demonixis_C3DE\C3DE\UI\GUI.cs,Label,The length of the statement  "            _spriteBatch.DrawString(Skin.Font' text' position' Skin.TextColor' rotation' Vector2.Zero' _cacheVec2' SpriteEffects.None' 1); " is 126.
Long Statement,C3DE.Utils,GraphicsHelper,C:\repos\demonixis_C3DE\C3DE\Utils\GraphicsHelper.cs,CreateBorderTexture,The length of the statement  "                    if (y == 0 || y < thickness || y == (height - 1) || y > (height - thickness - 1) || (x == 0 || x < thickness || x == (width - 1) || x > (width - thickness - 1))) " is 161.
Long Statement,C3DE.VR,NullVRService,C:\repos\demonixis_C3DE\C3DE\VR\NullVRService.cs,CreateRenderTargetForEye,The length of the statement  "            return new RenderTarget2D(Game.GraphicsDevice' Screen.Width / 2' Screen.Height' false' SurfaceFormat.Color' DepthFormat.Depth24Stencil8); " is 137.
Complex Conditional,C3DE.Components.Rendering,Terrain,C:\repos\demonixis_C3DE\C3DE\Components\Rendering\Terrain.cs,GetTerrainHeight,The conditional expression  "px < 0 || px >= m_Geometry.Data.GetLength(0) - 1 || pz < 0 || pz >= m_Geometry.Data.GetLength(1) - 1"  is complex.
Complex Conditional,C3DE.Graphics.Rendering,Renderer,C:\repos\demonixis_C3DE\C3DE\Graphics\Rendering\Renderer.cs,SetVREnabled,The conditional expression  "enabled && m_VRService != null || !enabled && m_VRService == null"  is complex.
Complex Conditional,C3DE.Utils,GraphicsHelper,C:\repos\demonixis_C3DE\C3DE\Utils\GraphicsHelper.cs,CreateCheckboardTexture,The conditional expression  "(x < segX && y < segY) || (x >= segX && y >= segY)"  is complex.
Complex Conditional,C3DE.Utils,GraphicsHelper,C:\repos\demonixis_C3DE\C3DE\Utils\GraphicsHelper.cs,CreateBorderTexture,The conditional expression  "y == 0 || y < thickness || y == (height - 1) || y > (height - thickness - 1) || (x == 0 || x < thickness || x == (width - 1) || x > (width - thickness - 1))"  is complex.
Magic Number,C3DE,SceneManager,C:\repos\demonixis_C3DE\C3DE\SceneManager.cs,SceneManager,The following statement contains a magic number: _scenes = new List<Scene>(3);
Magic Number,C3DE,Screen,C:\repos\demonixis_C3DE\C3DE\Screen.cs,SetBestResolution,The following statement contains a magic number: var width = 800;
Magic Number,C3DE,Screen,C:\repos\demonixis_C3DE\C3DE\Screen.cs,SetBestResolution,The following statement contains a magic number: var height = 480;
Magic Number,C3DE,Scene,C:\repos\demonixis_C3DE\C3DE\Scene.cs,Scene,The following statement contains a magic number: renderList = new List<Renderer>(10);
Magic Number,C3DE,Scene,C:\repos\demonixis_C3DE\C3DE\Scene.cs,Scene,The following statement contains a magic number: materials = new List<Material>(5);
Magic Number,C3DE,Scene,C:\repos\demonixis_C3DE\C3DE\Scene.cs,Scene,The following statement contains a magic number: effects = new List<Effect>(5);
Magic Number,C3DE,Scene,C:\repos\demonixis_C3DE\C3DE\Scene.cs,Scene,The following statement contains a magic number: materialsEffectIndex = new Dictionary<int' int>(5);
Magic Number,C3DE,Scene,C:\repos\demonixis_C3DE\C3DE\Scene.cs,Scene,The following statement contains a magic number: colliders = new List<Collider>(5);
Magic Number,C3DE,Scene,C:\repos\demonixis_C3DE\C3DE\Scene.cs,Scene,The following statement contains a magic number: scripts = new List<Behaviour>(5);
Magic Number,C3DE,Scene,C:\repos\demonixis_C3DE\C3DE\Scene.cs,Scene,The following statement contains a magic number: lights = new List<Light>(2);
Magic Number,C3DE,GameObject,C:\repos\demonixis_C3DE\C3DE\GameObject.cs,InternalConstructor,The following statement contains a magic number: if (m_Transform == null)              {                  m_Components = new List<Component>(5);                    m_Transform = new Transform();                  m_Transform.m_Transform = m_Transform;                  m_Transform.GameObject = this;                  m_Transform.PropertyChanged += OnComponentChanged;                  m_Transform.Awake();                  m_Components.Add(m_Transform);                    m_Enabled = true;                  m_Initialized = false;                  IsStatic = false;                  IsPrefab = false;                    Id = "SO_" + Guid.NewGuid();                  Name = string.IsNullOrEmpty(name) ? "SceneObject-" + Guid.NewGuid() : name;                    Scene.current?.Add(this);              }
Magic Number,C3DE,Skybox,C:\repos\demonixis_C3DE\C3DE\Skybox.cs,Generate,The following statement contains a magic number: if (textures.Length != 6)                  throw new Exception("The array of texture names must contains 6 elements.");
Magic Number,C3DE,Skybox,C:\repos\demonixis_C3DE\C3DE\Skybox.cs,Generate,The following statement contains a magic number: for (int i = 0; i < 6; i++)              {                  textureData = new Color[textures[i].Width * textures[i].Height];                  textures[i].GetData<Color>(textureData);                  m_MainTexture.SetData<Color>((CubeMapFace)i' textureData);              }
Magic Number,C3DE,Skybox,C:\repos\demonixis_C3DE\C3DE\Skybox.cs,Generate,The following statement contains a magic number: var textures = new Texture2D[6];
Magic Number,C3DE,Skybox,C:\repos\demonixis_C3DE\C3DE\Skybox.cs,Generate,The following statement contains a magic number: for (int i = 0; i < 6; i++)                  textures[i] = content.Load<Texture2D>(textureNames[i]);
Magic Number,C3DE,Skybox,C:\repos\demonixis_C3DE\C3DE\Skybox.cs,Generate,The following statement contains a magic number: var skyTop = GraphicsHelper.CreateTexture(new Color(168' 189' 255)' 64' 64);
Magic Number,C3DE,Skybox,C:\repos\demonixis_C3DE\C3DE\Skybox.cs,Generate,The following statement contains a magic number: var skyTop = GraphicsHelper.CreateTexture(new Color(168' 189' 255)' 64' 64);
Magic Number,C3DE,Skybox,C:\repos\demonixis_C3DE\C3DE\Skybox.cs,Generate,The following statement contains a magic number: var skyTop = GraphicsHelper.CreateTexture(new Color(168' 189' 255)' 64' 64);
Magic Number,C3DE,Skybox,C:\repos\demonixis_C3DE\C3DE\Skybox.cs,Generate,The following statement contains a magic number: var skyTop = GraphicsHelper.CreateTexture(new Color(168' 189' 255)' 64' 64);
Magic Number,C3DE,Skybox,C:\repos\demonixis_C3DE\C3DE\Skybox.cs,Generate,The following statement contains a magic number: var skyTop = GraphicsHelper.CreateTexture(new Color(168' 189' 255)' 64' 64);
Magic Number,C3DE,Skybox,C:\repos\demonixis_C3DE\C3DE\Skybox.cs,Generate,The following statement contains a magic number: var skySide = GraphicsHelper.CreateGradiantTexture(new Color(168' 189' 255)' Color.White' 64' 64);
Magic Number,C3DE,Skybox,C:\repos\demonixis_C3DE\C3DE\Skybox.cs,Generate,The following statement contains a magic number: var skySide = GraphicsHelper.CreateGradiantTexture(new Color(168' 189' 255)' Color.White' 64' 64);
Magic Number,C3DE,Skybox,C:\repos\demonixis_C3DE\C3DE\Skybox.cs,Generate,The following statement contains a magic number: var skySide = GraphicsHelper.CreateGradiantTexture(new Color(168' 189' 255)' Color.White' 64' 64);
Magic Number,C3DE,Skybox,C:\repos\demonixis_C3DE\C3DE\Skybox.cs,Generate,The following statement contains a magic number: var skySide = GraphicsHelper.CreateGradiantTexture(new Color(168' 189' 255)' Color.White' 64' 64);
Magic Number,C3DE,Skybox,C:\repos\demonixis_C3DE\C3DE\Skybox.cs,Generate,The following statement contains a magic number: var skySide = GraphicsHelper.CreateGradiantTexture(new Color(168' 189' 255)' Color.White' 64' 64);
Magic Number,C3DE,Skybox,C:\repos\demonixis_C3DE\C3DE\Skybox.cs,Generate,The following statement contains a magic number: var skyBottom = GraphicsHelper.CreateTexture(Color.White' 64' 64);
Magic Number,C3DE,Skybox,C:\repos\demonixis_C3DE\C3DE\Skybox.cs,Generate,The following statement contains a magic number: var skyBottom = GraphicsHelper.CreateTexture(Color.White' 64' 64);
Magic Number,C3DE,Skybox,C:\repos\demonixis_C3DE\C3DE\Skybox.cs,Draw,The following statement contains a magic number: device.DrawIndexedPrimitives(PrimitiveType.TriangleList' 0' 0' m_Geometry.Indices.Length / 3);
Magic Number,C3DE.Components,Camera,C:\repos\demonixis_C3DE\C3DE\Components\Camera.cs,Camera,The following statement contains a magic number: _fieldOfView = MathHelper.ToRadians(45);
Magic Number,C3DE.Components.Rendering,LensFlare,C:\repos\demonixis_C3DE\C3DE\Components\Rendering\LensFlare.cs,Start,The following statement contains a magic number: m_QueryVertices = new VertexPositionColor[4];
Magic Number,C3DE.Components.Rendering,LensFlare,C:\repos\demonixis_C3DE\C3DE\Components\Rendering\LensFlare.cs,Start,The following statement contains a magic number: m_QueryVertices[0].Position = new Vector3(-QuerySize / 2' -QuerySize / 2' -1);
Magic Number,C3DE.Components.Rendering,LensFlare,C:\repos\demonixis_C3DE\C3DE\Components\Rendering\LensFlare.cs,Start,The following statement contains a magic number: m_QueryVertices[0].Position = new Vector3(-QuerySize / 2' -QuerySize / 2' -1);
Magic Number,C3DE.Components.Rendering,LensFlare,C:\repos\demonixis_C3DE\C3DE\Components\Rendering\LensFlare.cs,Start,The following statement contains a magic number: m_QueryVertices[1].Position = new Vector3(QuerySize / 2' -QuerySize / 2' -1);
Magic Number,C3DE.Components.Rendering,LensFlare,C:\repos\demonixis_C3DE\C3DE\Components\Rendering\LensFlare.cs,Start,The following statement contains a magic number: m_QueryVertices[1].Position = new Vector3(QuerySize / 2' -QuerySize / 2' -1);
Magic Number,C3DE.Components.Rendering,LensFlare,C:\repos\demonixis_C3DE\C3DE\Components\Rendering\LensFlare.cs,Start,The following statement contains a magic number: m_QueryVertices[2].Position = new Vector3(-QuerySize / 2' QuerySize / 2' -1);
Magic Number,C3DE.Components.Rendering,LensFlare,C:\repos\demonixis_C3DE\C3DE\Components\Rendering\LensFlare.cs,Start,The following statement contains a magic number: m_QueryVertices[2].Position = new Vector3(-QuerySize / 2' QuerySize / 2' -1);
Magic Number,C3DE.Components.Rendering,LensFlare,C:\repos\demonixis_C3DE\C3DE\Components\Rendering\LensFlare.cs,Start,The following statement contains a magic number: m_QueryVertices[2].Position = new Vector3(-QuerySize / 2' QuerySize / 2' -1);
Magic Number,C3DE.Components.Rendering,LensFlare,C:\repos\demonixis_C3DE\C3DE\Components\Rendering\LensFlare.cs,Start,The following statement contains a magic number: m_QueryVertices[3].Position = new Vector3(QuerySize / 2' QuerySize / 2' -1);
Magic Number,C3DE.Components.Rendering,LensFlare,C:\repos\demonixis_C3DE\C3DE\Components\Rendering\LensFlare.cs,Start,The following statement contains a magic number: m_QueryVertices[3].Position = new Vector3(QuerySize / 2' QuerySize / 2' -1);
Magic Number,C3DE.Components.Rendering,LensFlare,C:\repos\demonixis_C3DE\C3DE\Components\Rendering\LensFlare.cs,Start,The following statement contains a magic number: m_QueryVertices[3].Position = new Vector3(QuerySize / 2' QuerySize / 2' -1);
Magic Number,C3DE.Components.Rendering,LensFlare,C:\repos\demonixis_C3DE\C3DE\Components\Rendering\LensFlare.cs,Setup,The following statement contains a magic number: if (flares.Length != 3)                  throw new Exception("The array of flare must contains 3 textures");
Magic Number,C3DE.Components.Rendering,LensFlare,C:\repos\demonixis_C3DE\C3DE\Components\Rendering\LensFlare.cs,UpdateOcclusion,The following statement contains a magic number: m_GraphicsDevice.DrawUserPrimitives(PrimitiveType.TriangleStrip' m_QueryVertices' 0' 2);
Magic Number,C3DE.Components.Rendering,LensFlare,C:\repos\demonixis_C3DE\C3DE\Components\Rendering\LensFlare.cs,DrawGlow,The following statement contains a magic number: var origin = new Vector2(GlowTexture.Width' GlowTexture.Height) / 2;
Magic Number,C3DE.Components.Rendering,LensFlare,C:\repos\demonixis_C3DE\C3DE\Components\Rendering\LensFlare.cs,DrawGlow,The following statement contains a magic number: var scale = GlowSize * 2 / GlowTexture.Width;
Magic Number,C3DE.Components.Rendering,LensFlare,C:\repos\demonixis_C3DE\C3DE\Components\Rendering\LensFlare.cs,DrawFlares,The following statement contains a magic number: var screenCenter = new Vector2(viewport.Width' viewport.Height) / 2;
Magic Number,C3DE.Components.Rendering,LensFlare,C:\repos\demonixis_C3DE\C3DE\Components\Rendering\LensFlare.cs,DrawFlares,The following statement contains a magic number: foreach (Flare flare in m_Flares)              {                  var flarePosition = m_LightPosition + flareVector * flare.Position;                  var flareColor = flare.Color.ToVector4();                  flareColor.W *= m_OcclusionAlpha;                    var flareTexture = FlareTextures[flare.FlareId];                  var flareOrigin = new Vector2(flareTexture.Width' flareTexture.Height) / 2;                    m_SpriteBatch.Draw(flareTexture' flarePosition' null' new Color(flareColor)' 1' flareOrigin' flare.Scale' SpriteEffects.None' 0);              }
Magic Number,C3DE.Components.Rendering,BoundingBoxRenderer,C:\repos\demonixis_C3DE\C3DE\Components\Rendering\BoundingBoxRenderer.cs,Draw,The following statement contains a magic number: for (int i = 0; i < 8; i++)              {                  _vertices[i].Position = _corners[i] * m_Transform.LocalScale;                  _vertices[i].Color = LineColor;              }
Magic Number,C3DE.Components.Rendering,BoundingBoxRenderer,C:\repos\demonixis_C3DE\C3DE\Components\Rendering\BoundingBoxRenderer.cs,Draw,The following statement contains a magic number: device.DrawUserIndexedPrimitives(PrimitiveType.LineList' _vertices' 0' 8' _indices' 0' _indices.Length / 2);
Magic Number,C3DE.Components.Rendering,BoundingBoxRenderer,C:\repos\demonixis_C3DE\C3DE\Components\Rendering\BoundingBoxRenderer.cs,Draw,The following statement contains a magic number: device.DrawUserIndexedPrimitives(PrimitiveType.LineList' _vertices' 0' 8' _indices' 0' _indices.Length / 2);
Magic Number,C3DE.Components.Rendering,MeshRenderer,C:\repos\demonixis_C3DE\C3DE\Components\Rendering\MeshRenderer.cs,Draw,The following statement contains a magic number: device.DrawIndexedPrimitives(PrimitiveType.TriangleList' 0' 0' m_Geometry.IndexBuffer.IndexCount / 3);
Magic Number,C3DE.Components.Rendering,Terrain,C:\repos\demonixis_C3DE\C3DE\Components\Rendering\Terrain.cs,Awake,The following statement contains a magic number: m_Geometry = new TerrainMesh(100' 100' 1);
Magic Number,C3DE.Components.Rendering,Terrain,C:\repos\demonixis_C3DE\C3DE\Components\Rendering\Terrain.cs,Awake,The following statement contains a magic number: m_Geometry = new TerrainMesh(100' 100' 1);
Magic Number,C3DE.Components.Rendering,Terrain,C:\repos\demonixis_C3DE\C3DE\Components\Rendering\Terrain.cs,Awake,The following statement contains a magic number: m_WeightData = new TerrainWeightData()              {                  SandLayer = 9'                  GroundLayer = 18'                  RockLayer = 23'                  SnowLayer = 27              };
Magic Number,C3DE.Components.Rendering,Terrain,C:\repos\demonixis_C3DE\C3DE\Components\Rendering\Terrain.cs,Awake,The following statement contains a magic number: m_WeightData = new TerrainWeightData()              {                  SandLayer = 9'                  GroundLayer = 18'                  RockLayer = 23'                  SnowLayer = 27              };
Magic Number,C3DE.Components.Rendering,Terrain,C:\repos\demonixis_C3DE\C3DE\Components\Rendering\Terrain.cs,Awake,The following statement contains a magic number: m_WeightData = new TerrainWeightData()              {                  SandLayer = 9'                  GroundLayer = 18'                  RockLayer = 23'                  SnowLayer = 27              };
Magic Number,C3DE.Components.Rendering,Terrain,C:\repos\demonixis_C3DE\C3DE\Components\Rendering\Terrain.cs,Awake,The following statement contains a magic number: m_WeightData = new TerrainWeightData()              {                  SandLayer = 9'                  GroundLayer = 18'                  RockLayer = 23'                  SnowLayer = 27              };
Magic Number,C3DE.Components.Rendering,Terrain,C:\repos\demonixis_C3DE\C3DE\Components\Rendering\Terrain.cs,ApplyCollision,The following statement contains a magic number: var y = (GetTerrainHeight(tr.LocalPosition.X' 0' tr.LocalPosition.Z) + 2 * m_Geometry.Size.Y - tr.LocalPosition.Y) * 0.2f;
Magic Number,C3DE.Components.Controllers,OrbitController,C:\repos\demonixis_C3DE\C3DE\Components\Controllers\OrbitController.cs,OrbitController,The following statement contains a magic number: _distance = 35;
Magic Number,C3DE.Components.Controllers,OrbitController,C:\repos\demonixis_C3DE\C3DE\Components\Controllers\OrbitController.cs,UpdateTouchInput,The following statement contains a magic number: if (Input.Touch.TouchCount == 1)  				angleVelocity -= Input.Touch.Delta () * RotationSpeed * Time.DeltaTime * TouchSensibility;  			else if (Input.Touch.TouchCount == 2)  				distanceVelocity += Input.Touch.Delta ().X * MoveSpeed * Time.DeltaTime;              else if (Input.Touch.TouchCount == 3)              {                  _cacheVec3.X = Input.Touch.Delta().X;                  _cacheVec3.Y = Input.Touch.Delta().Y;                  _cacheVec3.Z = 0;                  positionVelicoty += _cacheVec3 * StrafeSpeed * Time.DeltaTime * 0.5f;              }
Magic Number,C3DE.Components.Controllers,OrbitController,C:\repos\demonixis_C3DE\C3DE\Components\Controllers\OrbitController.cs,UpdateTouchInput,The following statement contains a magic number: if (Input.Touch.TouchCount == 1)  				angleVelocity -= Input.Touch.Delta () * RotationSpeed * Time.DeltaTime * TouchSensibility;  			else if (Input.Touch.TouchCount == 2)  				distanceVelocity += Input.Touch.Delta ().X * MoveSpeed * Time.DeltaTime;              else if (Input.Touch.TouchCount == 3)              {                  _cacheVec3.X = Input.Touch.Delta().X;                  _cacheVec3.Y = Input.Touch.Delta().Y;                  _cacheVec3.Z = 0;                  positionVelicoty += _cacheVec3 * StrafeSpeed * Time.DeltaTime * 0.5f;              }
Magic Number,C3DE.Components.Controllers,FirstPersonController,C:\repos\demonixis_C3DE\C3DE\Components\Controllers\FirstPersonController.cs,UpdateGamepadInput,The following statement contains a magic number: if (Input.Gamepad.LeftShoulder())                  translation.Y -= MoveSpeed / 2 * Time.DeltaTime;              else if (Input.Gamepad.RightShoulder())                  translation.Y += MoveSpeed / 2 * Time.DeltaTime;
Magic Number,C3DE.Components.Controllers,FirstPersonController,C:\repos\demonixis_C3DE\C3DE\Components\Controllers\FirstPersonController.cs,UpdateGamepadInput,The following statement contains a magic number: if (Input.Gamepad.LeftShoulder())                  translation.Y -= MoveSpeed / 2 * Time.DeltaTime;              else if (Input.Gamepad.RightShoulder())                  translation.Y += MoveSpeed / 2 * Time.DeltaTime;
Magic Number,C3DE.Components.Physics,Rigidbody,C:\repos\demonixis_C3DE\C3DE\Components\Physics\Rigidbody.cs,SetShapeFromCollider,The following statement contains a magic number: if (sphere != null)                  shape = new SphereShape(sphere.Sphere.Radius);              else                  shape = new BoxShape(size.X  * 2' size.Y * 2' size.Z * 2);
Magic Number,C3DE.Components.Physics,Rigidbody,C:\repos\demonixis_C3DE\C3DE\Components\Physics\Rigidbody.cs,SetShapeFromCollider,The following statement contains a magic number: if (sphere != null)                  shape = new SphereShape(sphere.Sphere.Radius);              else                  shape = new BoxShape(size.X  * 2' size.Y * 2' size.Z * 2);
Magic Number,C3DE.Components.Physics,Rigidbody,C:\repos\demonixis_C3DE\C3DE\Components\Physics\Rigidbody.cs,SetShapeFromCollider,The following statement contains a magic number: if (sphere != null)                  shape = new SphereShape(sphere.Sphere.Radius);              else                  shape = new BoxShape(size.X  * 2' size.Y * 2' size.Z * 2);
Magic Number,C3DE.Components.Controllers.Mobile,SwipeZone,C:\repos\demonixis_C3DE\C3DE\Components\Controllers\Mobile\SwipeZone.cs,Start,The following statement contains a magic number: if (_borderZone == Rectangle.Empty)                  _borderZone = new Rectangle(Screen.VirtualWidthPerTwo' 10' Screen.VirtualWidthPerTwo' Screen.VirtualHeight - Screen.VirtualHeight / 3);
Magic Number,C3DE.Components.Controllers.Mobile,SwipeZone,C:\repos\demonixis_C3DE\C3DE\Components\Controllers\Mobile\SwipeZone.cs,Start,The following statement contains a magic number: if (_borderZone == Rectangle.Empty)                  _borderZone = new Rectangle(Screen.VirtualWidthPerTwo' 10' Screen.VirtualWidthPerTwo' Screen.VirtualHeight - Screen.VirtualHeight / 3);
Magic Number,C3DE.Components.Controllers.Mobile,SwipeZone,C:\repos\demonixis_C3DE\C3DE\Components\Controllers\Mobile\SwipeZone.cs,Start,The following statement contains a magic number: if (_borderTexture == null)                  _borderTexture = GraphicsHelper.CreateBorderTexture(new Color(0.3f' 0.3f' 0.3f' 0.6f)' Color.Transparent' _borderZone.Width' _borderZone.Height' 2);
Magic Number,C3DE.Components.Controllers.Mobile,VirtualGamepad,C:\repos\demonixis_C3DE\C3DE\Components\Controllers\Mobile\VirtualGamepad.cs,Start,The following statement contains a magic number: if (_texture == null)              {                  var t1 = GraphicsHelper.CreateCircleTexture(Color.Black' 150);                  var t2 = GraphicsHelper.CreateCircleTexture(Color.GhostWhite' 135);                  _texture = GraphicsHelper.Combine(t1' t2);              }
Magic Number,C3DE.Components.Controllers.Mobile,VirtualGamepad,C:\repos\demonixis_C3DE\C3DE\Components\Controllers\Mobile\VirtualGamepad.cs,Start,The following statement contains a magic number: if (_texture == null)              {                  var t1 = GraphicsHelper.CreateCircleTexture(Color.Black' 150);                  var t2 = GraphicsHelper.CreateCircleTexture(Color.GhostWhite' 135);                  _texture = GraphicsHelper.Combine(t1' t2);              }
Magic Number,C3DE.Components.Controllers.Mobile,VirtualGamepad,C:\repos\demonixis_C3DE\C3DE\Components\Controllers\Mobile\VirtualGamepad.cs,Start,The following statement contains a magic number: var x = (_texture.Width * Scale) / 2;
Magic Number,C3DE.Components.Controllers.Mobile,VirtualGamepad,C:\repos\demonixis_C3DE\C3DE\Components\Controllers\Mobile\VirtualGamepad.cs,Start,The following statement contains a magic number: var y = Screen.VirtualHeight - (_texture.Height * Scale + (_texture.Height * Scale) / 2);
Magic Number,C3DE.Components.Controllers.Mobile,VirtualGamepad,C:\repos\demonixis_C3DE\C3DE\Components\Controllers\Mobile\VirtualGamepad.cs,ShowAt,The following statement contains a magic number: _limits.X = _texture.Width / 2 * Scale;
Magic Number,C3DE.Components.Controllers.Mobile,VirtualGamepad,C:\repos\demonixis_C3DE\C3DE\Components\Controllers\Mobile\VirtualGamepad.cs,ShowAt,The following statement contains a magic number: _limits.Y = _texture.Height / 2 * Scale;
Magic Number,C3DE.Components.Lighting,Light,C:\repos\demonixis_C3DE\C3DE\Components\Lighting\Light.cs,Light,The following statement contains a magic number: projectionMatrix = Matrix.CreatePerspectiveFieldOfView(MathHelper.ToRadians(45)' 1' 1' 1000);
Magic Number,C3DE.Components.Lighting,Light,C:\repos\demonixis_C3DE\C3DE\Components\Lighting\Light.cs,Light,The following statement contains a magic number: projectionMatrix = Matrix.CreatePerspectiveFieldOfView(MathHelper.ToRadians(45)' 1' 1' 1000);
Magic Number,C3DE.Components.Lighting,Light,C:\repos\demonixis_C3DE\C3DE\Components\Lighting\Light.cs,Update,The following statement contains a magic number: projectionMatrix = Matrix.CreateOrthographicOffCenter(-size' size' size' -size' dist - sphere.Radius' dist + sphere.Radius * 2);
Magic Number,C3DE.Graphics.PostProcessing,Bloom,C:\repos\demonixis_C3DE\C3DE\Graphics\PostProcessing\Bloom.cs,SetPreset,The following statement contains a magic number: if (strengths.Length != 5 || raduis.Length != 5)                  return;
Magic Number,C3DE.Graphics.PostProcessing,Bloom,C:\repos\demonixis_C3DE\C3DE\Graphics\PostProcessing\Bloom.cs,SetPreset,The following statement contains a magic number: if (strengths.Length != 5 || raduis.Length != 5)                  return;
Magic Number,C3DE.Graphics.PostProcessing,Bloom,C:\repos\demonixis_C3DE\C3DE\Graphics\PostProcessing\Bloom.cs,SetPreset,The following statement contains a magic number: _bloomStrength3 = strengths[2];
Magic Number,C3DE.Graphics.PostProcessing,Bloom,C:\repos\demonixis_C3DE\C3DE\Graphics\PostProcessing\Bloom.cs,SetPreset,The following statement contains a magic number: _bloomStrength4 = strengths[3];
Magic Number,C3DE.Graphics.PostProcessing,Bloom,C:\repos\demonixis_C3DE\C3DE\Graphics\PostProcessing\Bloom.cs,SetPreset,The following statement contains a magic number: _bloomStrength5 = strengths[4];
Magic Number,C3DE.Graphics.PostProcessing,Bloom,C:\repos\demonixis_C3DE\C3DE\Graphics\PostProcessing\Bloom.cs,SetPreset,The following statement contains a magic number: _bloomRadius5 = raduis[4];
Magic Number,C3DE.Graphics.PostProcessing,Bloom,C:\repos\demonixis_C3DE\C3DE\Graphics\PostProcessing\Bloom.cs,SetPreset,The following statement contains a magic number: _bloomRadius4 = raduis[3];
Magic Number,C3DE.Graphics.PostProcessing,Bloom,C:\repos\demonixis_C3DE\C3DE\Graphics\PostProcessing\Bloom.cs,SetPreset,The following statement contains a magic number: _bloomRadius3 = raduis[2];
Magic Number,C3DE.Graphics.PostProcessing,Bloom,C:\repos\demonixis_C3DE\C3DE\Graphics\PostProcessing\Bloom.cs,SetBloomPreset,The following statement contains a magic number: switch (preset)              {                  case BloomPresets.Wide:                      {                          _bloomStrength1 = 0.5f;                          _bloomStrength2 = 1;                          _bloomStrength3 = 2;                          _bloomStrength4 = 1;                          _bloomStrength5 = 2;                          _bloomRadius5 = 4.0f;                          _bloomRadius4 = 4.0f;                          _bloomRadius3 = 2.0f;                          _bloomRadius2 = 2.0f;                          _bloomRadius1 = 1.0f;                          BloomStreakLength = 1;                          BloomDownsamplePasses = 5;                          break;                      }                  case BloomPresets.SuperWide:                      {                          _bloomStrength1 = 0.9f;                          _bloomStrength2 = 1;                          _bloomStrength3 = 1;                          _bloomStrength4 = 2;                          _bloomStrength5 = 6;                          _bloomRadius5 = 4.0f;                          _bloomRadius4 = 2.0f;                          _bloomRadius3 = 2.0f;                          _bloomRadius2 = 2.0f;                          _bloomRadius1 = 2.0f;                          BloomStreakLength = 1;                          BloomDownsamplePasses = 5;                          break;                      }                  case BloomPresets.Focussed:                      {                          _bloomStrength1 = 0.8f;                          _bloomStrength2 = 1;                          _bloomStrength3 = 1;                          _bloomStrength4 = 1;                          _bloomStrength5 = 2;                          _bloomRadius5 = 4.0f;                          _bloomRadius4 = 2.0f;                          _bloomRadius3 = 2.0f;                          _bloomRadius2 = 2.0f;                          _bloomRadius1 = 2.0f;                          BloomStreakLength = 1;                          BloomDownsamplePasses = 5;                          break;                      }                  case BloomPresets.Small:                      {                          _bloomStrength1 = 0.8f;                          _bloomStrength2 = 1;                          _bloomStrength3 = 1;                          _bloomStrength4 = 1;                          _bloomStrength5 = 1;                          _bloomRadius5 = 1;                          _bloomRadius4 = 1;                          _bloomRadius3 = 1;                          _bloomRadius2 = 1;                          _bloomRadius1 = 1;                          BloomStreakLength = 1;                          BloomDownsamplePasses = 5;                          break;                      }                  case BloomPresets.Cheap:                      {                          _bloomStrength1 = 0.8f;                          _bloomStrength2 = 2;                          _bloomRadius2 = 2;                          _bloomRadius1 = 2;                          BloomStreakLength = 1;                          BloomDownsamplePasses = 2;                          break;                      }                  case BloomPresets.One:                      {                          _bloomStrength1 = 4f;                          _bloomStrength2 = 1;                          _bloomStrength3 = 1;                          _bloomStrength4 = 1;                          _bloomStrength5 = 2;                          _bloomRadius5 = 1.0f;                          _bloomRadius4 = 1.0f;                          _bloomRadius3 = 1.0f;                          _bloomRadius2 = 1.0f;                          _bloomRadius1 = 1.0f;                          BloomStreakLength = 1;                          BloomDownsamplePasses = 5;                          break;                      }              }
Magic Number,C3DE.Graphics.PostProcessing,Bloom,C:\repos\demonixis_C3DE\C3DE\Graphics\PostProcessing\Bloom.cs,SetBloomPreset,The following statement contains a magic number: switch (preset)              {                  case BloomPresets.Wide:                      {                          _bloomStrength1 = 0.5f;                          _bloomStrength2 = 1;                          _bloomStrength3 = 2;                          _bloomStrength4 = 1;                          _bloomStrength5 = 2;                          _bloomRadius5 = 4.0f;                          _bloomRadius4 = 4.0f;                          _bloomRadius3 = 2.0f;                          _bloomRadius2 = 2.0f;                          _bloomRadius1 = 1.0f;                          BloomStreakLength = 1;                          BloomDownsamplePasses = 5;                          break;                      }                  case BloomPresets.SuperWide:                      {                          _bloomStrength1 = 0.9f;                          _bloomStrength2 = 1;                          _bloomStrength3 = 1;                          _bloomStrength4 = 2;                          _bloomStrength5 = 6;                          _bloomRadius5 = 4.0f;                          _bloomRadius4 = 2.0f;                          _bloomRadius3 = 2.0f;                          _bloomRadius2 = 2.0f;                          _bloomRadius1 = 2.0f;                          BloomStreakLength = 1;                          BloomDownsamplePasses = 5;                          break;                      }                  case BloomPresets.Focussed:                      {                          _bloomStrength1 = 0.8f;                          _bloomStrength2 = 1;                          _bloomStrength3 = 1;                          _bloomStrength4 = 1;                          _bloomStrength5 = 2;                          _bloomRadius5 = 4.0f;                          _bloomRadius4 = 2.0f;                          _bloomRadius3 = 2.0f;                          _bloomRadius2 = 2.0f;                          _bloomRadius1 = 2.0f;                          BloomStreakLength = 1;                          BloomDownsamplePasses = 5;                          break;                      }                  case BloomPresets.Small:                      {                          _bloomStrength1 = 0.8f;                          _bloomStrength2 = 1;                          _bloomStrength3 = 1;                          _bloomStrength4 = 1;                          _bloomStrength5 = 1;                          _bloomRadius5 = 1;                          _bloomRadius4 = 1;                          _bloomRadius3 = 1;                          _bloomRadius2 = 1;                          _bloomRadius1 = 1;                          BloomStreakLength = 1;                          BloomDownsamplePasses = 5;                          break;                      }                  case BloomPresets.Cheap:                      {                          _bloomStrength1 = 0.8f;                          _bloomStrength2 = 2;                          _bloomRadius2 = 2;                          _bloomRadius1 = 2;                          BloomStreakLength = 1;                          BloomDownsamplePasses = 2;                          break;                      }                  case BloomPresets.One:                      {                          _bloomStrength1 = 4f;                          _bloomStrength2 = 1;                          _bloomStrength3 = 1;                          _bloomStrength4 = 1;                          _bloomStrength5 = 2;                          _bloomRadius5 = 1.0f;                          _bloomRadius4 = 1.0f;                          _bloomRadius3 = 1.0f;                          _bloomRadius2 = 1.0f;                          _bloomRadius1 = 1.0f;                          BloomStreakLength = 1;                          BloomDownsamplePasses = 5;                          break;                      }              }
Magic Number,C3DE.Graphics.PostProcessing,Bloom,C:\repos\demonixis_C3DE\C3DE\Graphics\PostProcessing\Bloom.cs,SetBloomPreset,The following statement contains a magic number: switch (preset)              {                  case BloomPresets.Wide:                      {                          _bloomStrength1 = 0.5f;                          _bloomStrength2 = 1;                          _bloomStrength3 = 2;                          _bloomStrength4 = 1;                          _bloomStrength5 = 2;                          _bloomRadius5 = 4.0f;                          _bloomRadius4 = 4.0f;                          _bloomRadius3 = 2.0f;                          _bloomRadius2 = 2.0f;                          _bloomRadius1 = 1.0f;                          BloomStreakLength = 1;                          BloomDownsamplePasses = 5;                          break;                      }                  case BloomPresets.SuperWide:                      {                          _bloomStrength1 = 0.9f;                          _bloomStrength2 = 1;                          _bloomStrength3 = 1;                          _bloomStrength4 = 2;                          _bloomStrength5 = 6;                          _bloomRadius5 = 4.0f;                          _bloomRadius4 = 2.0f;                          _bloomRadius3 = 2.0f;                          _bloomRadius2 = 2.0f;                          _bloomRadius1 = 2.0f;                          BloomStreakLength = 1;                          BloomDownsamplePasses = 5;                          break;                      }                  case BloomPresets.Focussed:                      {                          _bloomStrength1 = 0.8f;                          _bloomStrength2 = 1;                          _bloomStrength3 = 1;                          _bloomStrength4 = 1;                          _bloomStrength5 = 2;                          _bloomRadius5 = 4.0f;                          _bloomRadius4 = 2.0f;                          _bloomRadius3 = 2.0f;                          _bloomRadius2 = 2.0f;                          _bloomRadius1 = 2.0f;                          BloomStreakLength = 1;                          BloomDownsamplePasses = 5;                          break;                      }                  case BloomPresets.Small:                      {                          _bloomStrength1 = 0.8f;                          _bloomStrength2 = 1;                          _bloomStrength3 = 1;                          _bloomStrength4 = 1;                          _bloomStrength5 = 1;                          _bloomRadius5 = 1;                          _bloomRadius4 = 1;                          _bloomRadius3 = 1;                          _bloomRadius2 = 1;                          _bloomRadius1 = 1;                          BloomStreakLength = 1;                          BloomDownsamplePasses = 5;                          break;                      }                  case BloomPresets.Cheap:                      {                          _bloomStrength1 = 0.8f;                          _bloomStrength2 = 2;                          _bloomRadius2 = 2;                          _bloomRadius1 = 2;                          BloomStreakLength = 1;                          BloomDownsamplePasses = 2;                          break;                      }                  case BloomPresets.One:                      {                          _bloomStrength1 = 4f;                          _bloomStrength2 = 1;                          _bloomStrength3 = 1;                          _bloomStrength4 = 1;                          _bloomStrength5 = 2;                          _bloomRadius5 = 1.0f;                          _bloomRadius4 = 1.0f;                          _bloomRadius3 = 1.0f;                          _bloomRadius2 = 1.0f;                          _bloomRadius1 = 1.0f;                          BloomStreakLength = 1;                          BloomDownsamplePasses = 5;                          break;                      }              }
Magic Number,C3DE.Graphics.PostProcessing,Bloom,C:\repos\demonixis_C3DE\C3DE\Graphics\PostProcessing\Bloom.cs,SetBloomPreset,The following statement contains a magic number: switch (preset)              {                  case BloomPresets.Wide:                      {                          _bloomStrength1 = 0.5f;                          _bloomStrength2 = 1;                          _bloomStrength3 = 2;                          _bloomStrength4 = 1;                          _bloomStrength5 = 2;                          _bloomRadius5 = 4.0f;                          _bloomRadius4 = 4.0f;                          _bloomRadius3 = 2.0f;                          _bloomRadius2 = 2.0f;                          _bloomRadius1 = 1.0f;                          BloomStreakLength = 1;                          BloomDownsamplePasses = 5;                          break;                      }                  case BloomPresets.SuperWide:                      {                          _bloomStrength1 = 0.9f;                          _bloomStrength2 = 1;                          _bloomStrength3 = 1;                          _bloomStrength4 = 2;                          _bloomStrength5 = 6;                          _bloomRadius5 = 4.0f;                          _bloomRadius4 = 2.0f;                          _bloomRadius3 = 2.0f;                          _bloomRadius2 = 2.0f;                          _bloomRadius1 = 2.0f;                          BloomStreakLength = 1;                          BloomDownsamplePasses = 5;                          break;                      }                  case BloomPresets.Focussed:                      {                          _bloomStrength1 = 0.8f;                          _bloomStrength2 = 1;                          _bloomStrength3 = 1;                          _bloomStrength4 = 1;                          _bloomStrength5 = 2;                          _bloomRadius5 = 4.0f;                          _bloomRadius4 = 2.0f;                          _bloomRadius3 = 2.0f;                          _bloomRadius2 = 2.0f;                          _bloomRadius1 = 2.0f;                          BloomStreakLength = 1;                          BloomDownsamplePasses = 5;                          break;                      }                  case BloomPresets.Small:                      {                          _bloomStrength1 = 0.8f;                          _bloomStrength2 = 1;                          _bloomStrength3 = 1;                          _bloomStrength4 = 1;                          _bloomStrength5 = 1;                          _bloomRadius5 = 1;                          _bloomRadius4 = 1;                          _bloomRadius3 = 1;                          _bloomRadius2 = 1;                          _bloomRadius1 = 1;                          BloomStreakLength = 1;                          BloomDownsamplePasses = 5;                          break;                      }                  case BloomPresets.Cheap:                      {                          _bloomStrength1 = 0.8f;                          _bloomStrength2 = 2;                          _bloomRadius2 = 2;                          _bloomRadius1 = 2;                          BloomStreakLength = 1;                          BloomDownsamplePasses = 2;                          break;                      }                  case BloomPresets.One:                      {                          _bloomStrength1 = 4f;                          _bloomStrength2 = 1;                          _bloomStrength3 = 1;                          _bloomStrength4 = 1;                          _bloomStrength5 = 2;                          _bloomRadius5 = 1.0f;                          _bloomRadius4 = 1.0f;                          _bloomRadius3 = 1.0f;                          _bloomRadius2 = 1.0f;                          _bloomRadius1 = 1.0f;                          BloomStreakLength = 1;                          BloomDownsamplePasses = 5;                          break;                      }              }
Magic Number,C3DE.Graphics.PostProcessing,Bloom,C:\repos\demonixis_C3DE\C3DE\Graphics\PostProcessing\Bloom.cs,SetBloomPreset,The following statement contains a magic number: switch (preset)              {                  case BloomPresets.Wide:                      {                          _bloomStrength1 = 0.5f;                          _bloomStrength2 = 1;                          _bloomStrength3 = 2;                          _bloomStrength4 = 1;                          _bloomStrength5 = 2;                          _bloomRadius5 = 4.0f;                          _bloomRadius4 = 4.0f;                          _bloomRadius3 = 2.0f;                          _bloomRadius2 = 2.0f;                          _bloomRadius1 = 1.0f;                          BloomStreakLength = 1;                          BloomDownsamplePasses = 5;                          break;                      }                  case BloomPresets.SuperWide:                      {                          _bloomStrength1 = 0.9f;                          _bloomStrength2 = 1;                          _bloomStrength3 = 1;                          _bloomStrength4 = 2;                          _bloomStrength5 = 6;                          _bloomRadius5 = 4.0f;                          _bloomRadius4 = 2.0f;                          _bloomRadius3 = 2.0f;                          _bloomRadius2 = 2.0f;                          _bloomRadius1 = 2.0f;                          BloomStreakLength = 1;                          BloomDownsamplePasses = 5;                          break;                      }                  case BloomPresets.Focussed:                      {                          _bloomStrength1 = 0.8f;                          _bloomStrength2 = 1;                          _bloomStrength3 = 1;                          _bloomStrength4 = 1;                          _bloomStrength5 = 2;                          _bloomRadius5 = 4.0f;                          _bloomRadius4 = 2.0f;                          _bloomRadius3 = 2.0f;                          _bloomRadius2 = 2.0f;                          _bloomRadius1 = 2.0f;                          BloomStreakLength = 1;                          BloomDownsamplePasses = 5;                          break;                      }                  case BloomPresets.Small:                      {                          _bloomStrength1 = 0.8f;                          _bloomStrength2 = 1;                          _bloomStrength3 = 1;                          _bloomStrength4 = 1;                          _bloomStrength5 = 1;                          _bloomRadius5 = 1;                          _bloomRadius4 = 1;                          _bloomRadius3 = 1;                          _bloomRadius2 = 1;                          _bloomRadius1 = 1;                          BloomStreakLength = 1;                          BloomDownsamplePasses = 5;                          break;                      }                  case BloomPresets.Cheap:                      {                          _bloomStrength1 = 0.8f;                          _bloomStrength2 = 2;                          _bloomRadius2 = 2;                          _bloomRadius1 = 2;                          BloomStreakLength = 1;                          BloomDownsamplePasses = 2;                          break;                      }                  case BloomPresets.One:                      {                          _bloomStrength1 = 4f;                          _bloomStrength2 = 1;                          _bloomStrength3 = 1;                          _bloomStrength4 = 1;                          _bloomStrength5 = 2;                          _bloomRadius5 = 1.0f;                          _bloomRadius4 = 1.0f;                          _bloomRadius3 = 1.0f;                          _bloomRadius2 = 1.0f;                          _bloomRadius1 = 1.0f;                          BloomStreakLength = 1;                          BloomDownsamplePasses = 5;                          break;                      }              }
Magic Number,C3DE.Graphics.PostProcessing,Bloom,C:\repos\demonixis_C3DE\C3DE\Graphics\PostProcessing\Bloom.cs,SetBloomPreset,The following statement contains a magic number: switch (preset)              {                  case BloomPresets.Wide:                      {                          _bloomStrength1 = 0.5f;                          _bloomStrength2 = 1;                          _bloomStrength3 = 2;                          _bloomStrength4 = 1;                          _bloomStrength5 = 2;                          _bloomRadius5 = 4.0f;                          _bloomRadius4 = 4.0f;                          _bloomRadius3 = 2.0f;                          _bloomRadius2 = 2.0f;                          _bloomRadius1 = 1.0f;                          BloomStreakLength = 1;                          BloomDownsamplePasses = 5;                          break;                      }                  case BloomPresets.SuperWide:                      {                          _bloomStrength1 = 0.9f;                          _bloomStrength2 = 1;                          _bloomStrength3 = 1;                          _bloomStrength4 = 2;                          _bloomStrength5 = 6;                          _bloomRadius5 = 4.0f;                          _bloomRadius4 = 2.0f;                          _bloomRadius3 = 2.0f;                          _bloomRadius2 = 2.0f;                          _bloomRadius1 = 2.0f;                          BloomStreakLength = 1;                          BloomDownsamplePasses = 5;                          break;                      }                  case BloomPresets.Focussed:                      {                          _bloomStrength1 = 0.8f;                          _bloomStrength2 = 1;                          _bloomStrength3 = 1;                          _bloomStrength4 = 1;                          _bloomStrength5 = 2;                          _bloomRadius5 = 4.0f;                          _bloomRadius4 = 2.0f;                          _bloomRadius3 = 2.0f;                          _bloomRadius2 = 2.0f;                          _bloomRadius1 = 2.0f;                          BloomStreakLength = 1;                          BloomDownsamplePasses = 5;                          break;                      }                  case BloomPresets.Small:                      {                          _bloomStrength1 = 0.8f;                          _bloomStrength2 = 1;                          _bloomStrength3 = 1;                          _bloomStrength4 = 1;                          _bloomStrength5 = 1;                          _bloomRadius5 = 1;                          _bloomRadius4 = 1;                          _bloomRadius3 = 1;                          _bloomRadius2 = 1;                          _bloomRadius1 = 1;                          BloomStreakLength = 1;                          BloomDownsamplePasses = 5;                          break;                      }                  case BloomPresets.Cheap:                      {                          _bloomStrength1 = 0.8f;                          _bloomStrength2 = 2;                          _bloomRadius2 = 2;                          _bloomRadius1 = 2;                          BloomStreakLength = 1;                          BloomDownsamplePasses = 2;                          break;                      }                  case BloomPresets.One:                      {                          _bloomStrength1 = 4f;                          _bloomStrength2 = 1;                          _bloomStrength3 = 1;                          _bloomStrength4 = 1;                          _bloomStrength5 = 2;                          _bloomRadius5 = 1.0f;                          _bloomRadius4 = 1.0f;                          _bloomRadius3 = 1.0f;                          _bloomRadius2 = 1.0f;                          _bloomRadius1 = 1.0f;                          BloomStreakLength = 1;                          BloomDownsamplePasses = 5;                          break;                      }              }
Magic Number,C3DE.Graphics.PostProcessing,Bloom,C:\repos\demonixis_C3DE\C3DE\Graphics\PostProcessing\Bloom.cs,SetBloomPreset,The following statement contains a magic number: switch (preset)              {                  case BloomPresets.Wide:                      {                          _bloomStrength1 = 0.5f;                          _bloomStrength2 = 1;                          _bloomStrength3 = 2;                          _bloomStrength4 = 1;                          _bloomStrength5 = 2;                          _bloomRadius5 = 4.0f;                          _bloomRadius4 = 4.0f;                          _bloomRadius3 = 2.0f;                          _bloomRadius2 = 2.0f;                          _bloomRadius1 = 1.0f;                          BloomStreakLength = 1;                          BloomDownsamplePasses = 5;                          break;                      }                  case BloomPresets.SuperWide:                      {                          _bloomStrength1 = 0.9f;                          _bloomStrength2 = 1;                          _bloomStrength3 = 1;                          _bloomStrength4 = 2;                          _bloomStrength5 = 6;                          _bloomRadius5 = 4.0f;                          _bloomRadius4 = 2.0f;                          _bloomRadius3 = 2.0f;                          _bloomRadius2 = 2.0f;                          _bloomRadius1 = 2.0f;                          BloomStreakLength = 1;                          BloomDownsamplePasses = 5;                          break;                      }                  case BloomPresets.Focussed:                      {                          _bloomStrength1 = 0.8f;                          _bloomStrength2 = 1;                          _bloomStrength3 = 1;                          _bloomStrength4 = 1;                          _bloomStrength5 = 2;                          _bloomRadius5 = 4.0f;                          _bloomRadius4 = 2.0f;                          _bloomRadius3 = 2.0f;                          _bloomRadius2 = 2.0f;                          _bloomRadius1 = 2.0f;                          BloomStreakLength = 1;                          BloomDownsamplePasses = 5;                          break;                      }                  case BloomPresets.Small:                      {                          _bloomStrength1 = 0.8f;                          _bloomStrength2 = 1;                          _bloomStrength3 = 1;                          _bloomStrength4 = 1;                          _bloomStrength5 = 1;                          _bloomRadius5 = 1;                          _bloomRadius4 = 1;                          _bloomRadius3 = 1;                          _bloomRadius2 = 1;                          _bloomRadius1 = 1;                          BloomStreakLength = 1;                          BloomDownsamplePasses = 5;                          break;                      }                  case BloomPresets.Cheap:                      {                          _bloomStrength1 = 0.8f;                          _bloomStrength2 = 2;                          _bloomRadius2 = 2;                          _bloomRadius1 = 2;                          BloomStreakLength = 1;                          BloomDownsamplePasses = 2;                          break;                      }                  case BloomPresets.One:                      {                          _bloomStrength1 = 4f;                          _bloomStrength2 = 1;                          _bloomStrength3 = 1;                          _bloomStrength4 = 1;                          _bloomStrength5 = 2;                          _bloomRadius5 = 1.0f;                          _bloomRadius4 = 1.0f;                          _bloomRadius3 = 1.0f;                          _bloomRadius2 = 1.0f;                          _bloomRadius1 = 1.0f;                          BloomStreakLength = 1;                          BloomDownsamplePasses = 5;                          break;                      }              }
Magic Number,C3DE.Graphics.PostProcessing,Bloom,C:\repos\demonixis_C3DE\C3DE\Graphics\PostProcessing\Bloom.cs,SetBloomPreset,The following statement contains a magic number: switch (preset)              {                  case BloomPresets.Wide:                      {                          _bloomStrength1 = 0.5f;                          _bloomStrength2 = 1;                          _bloomStrength3 = 2;                          _bloomStrength4 = 1;                          _bloomStrength5 = 2;                          _bloomRadius5 = 4.0f;                          _bloomRadius4 = 4.0f;                          _bloomRadius3 = 2.0f;                          _bloomRadius2 = 2.0f;                          _bloomRadius1 = 1.0f;                          BloomStreakLength = 1;                          BloomDownsamplePasses = 5;                          break;                      }                  case BloomPresets.SuperWide:                      {                          _bloomStrength1 = 0.9f;                          _bloomStrength2 = 1;                          _bloomStrength3 = 1;                          _bloomStrength4 = 2;                          _bloomStrength5 = 6;                          _bloomRadius5 = 4.0f;                          _bloomRadius4 = 2.0f;                          _bloomRadius3 = 2.0f;                          _bloomRadius2 = 2.0f;                          _bloomRadius1 = 2.0f;                          BloomStreakLength = 1;                          BloomDownsamplePasses = 5;                          break;                      }                  case BloomPresets.Focussed:                      {                          _bloomStrength1 = 0.8f;                          _bloomStrength2 = 1;                          _bloomStrength3 = 1;                          _bloomStrength4 = 1;                          _bloomStrength5 = 2;                          _bloomRadius5 = 4.0f;                          _bloomRadius4 = 2.0f;                          _bloomRadius3 = 2.0f;                          _bloomRadius2 = 2.0f;                          _bloomRadius1 = 2.0f;                          BloomStreakLength = 1;                          BloomDownsamplePasses = 5;                          break;                      }                  case BloomPresets.Small:                      {                          _bloomStrength1 = 0.8f;                          _bloomStrength2 = 1;                          _bloomStrength3 = 1;                          _bloomStrength4 = 1;                          _bloomStrength5 = 1;                          _bloomRadius5 = 1;                          _bloomRadius4 = 1;                          _bloomRadius3 = 1;                          _bloomRadius2 = 1;                          _bloomRadius1 = 1;                          BloomStreakLength = 1;                          BloomDownsamplePasses = 5;                          break;                      }                  case BloomPresets.Cheap:                      {                          _bloomStrength1 = 0.8f;                          _bloomStrength2 = 2;                          _bloomRadius2 = 2;                          _bloomRadius1 = 2;                          BloomStreakLength = 1;                          BloomDownsamplePasses = 2;                          break;                      }                  case BloomPresets.One:                      {                          _bloomStrength1 = 4f;                          _bloomStrength2 = 1;                          _bloomStrength3 = 1;                          _bloomStrength4 = 1;                          _bloomStrength5 = 2;                          _bloomRadius5 = 1.0f;                          _bloomRadius4 = 1.0f;                          _bloomRadius3 = 1.0f;                          _bloomRadius2 = 1.0f;                          _bloomRadius1 = 1.0f;                          BloomStreakLength = 1;                          BloomDownsamplePasses = 5;                          break;                      }              }
Magic Number,C3DE.Graphics.PostProcessing,Bloom,C:\repos\demonixis_C3DE\C3DE\Graphics\PostProcessing\Bloom.cs,SetBloomPreset,The following statement contains a magic number: switch (preset)              {                  case BloomPresets.Wide:                      {                          _bloomStrength1 = 0.5f;                          _bloomStrength2 = 1;                          _bloomStrength3 = 2;                          _bloomStrength4 = 1;                          _bloomStrength5 = 2;                          _bloomRadius5 = 4.0f;                          _bloomRadius4 = 4.0f;                          _bloomRadius3 = 2.0f;                          _bloomRadius2 = 2.0f;                          _bloomRadius1 = 1.0f;                          BloomStreakLength = 1;                          BloomDownsamplePasses = 5;                          break;                      }                  case BloomPresets.SuperWide:                      {                          _bloomStrength1 = 0.9f;                          _bloomStrength2 = 1;                          _bloomStrength3 = 1;                          _bloomStrength4 = 2;                          _bloomStrength5 = 6;                          _bloomRadius5 = 4.0f;                          _bloomRadius4 = 2.0f;                          _bloomRadius3 = 2.0f;                          _bloomRadius2 = 2.0f;                          _bloomRadius1 = 2.0f;                          BloomStreakLength = 1;                          BloomDownsamplePasses = 5;                          break;                      }                  case BloomPresets.Focussed:                      {                          _bloomStrength1 = 0.8f;                          _bloomStrength2 = 1;                          _bloomStrength3 = 1;                          _bloomStrength4 = 1;                          _bloomStrength5 = 2;                          _bloomRadius5 = 4.0f;                          _bloomRadius4 = 2.0f;                          _bloomRadius3 = 2.0f;                          _bloomRadius2 = 2.0f;                          _bloomRadius1 = 2.0f;                          BloomStreakLength = 1;                          BloomDownsamplePasses = 5;                          break;                      }                  case BloomPresets.Small:                      {                          _bloomStrength1 = 0.8f;                          _bloomStrength2 = 1;                          _bloomStrength3 = 1;                          _bloomStrength4 = 1;                          _bloomStrength5 = 1;                          _bloomRadius5 = 1;                          _bloomRadius4 = 1;                          _bloomRadius3 = 1;                          _bloomRadius2 = 1;                          _bloomRadius1 = 1;                          BloomStreakLength = 1;                          BloomDownsamplePasses = 5;                          break;                      }                  case BloomPresets.Cheap:                      {                          _bloomStrength1 = 0.8f;                          _bloomStrength2 = 2;                          _bloomRadius2 = 2;                          _bloomRadius1 = 2;                          BloomStreakLength = 1;                          BloomDownsamplePasses = 2;                          break;                      }                  case BloomPresets.One:                      {                          _bloomStrength1 = 4f;                          _bloomStrength2 = 1;                          _bloomStrength3 = 1;                          _bloomStrength4 = 1;                          _bloomStrength5 = 2;                          _bloomRadius5 = 1.0f;                          _bloomRadius4 = 1.0f;                          _bloomRadius3 = 1.0f;                          _bloomRadius2 = 1.0f;                          _bloomRadius1 = 1.0f;                          BloomStreakLength = 1;                          BloomDownsamplePasses = 5;                          break;                      }              }
Magic Number,C3DE.Graphics.PostProcessing,Bloom,C:\repos\demonixis_C3DE\C3DE\Graphics\PostProcessing\Bloom.cs,SetBloomPreset,The following statement contains a magic number: switch (preset)              {                  case BloomPresets.Wide:                      {                          _bloomStrength1 = 0.5f;                          _bloomStrength2 = 1;                          _bloomStrength3 = 2;                          _bloomStrength4 = 1;                          _bloomStrength5 = 2;                          _bloomRadius5 = 4.0f;                          _bloomRadius4 = 4.0f;                          _bloomRadius3 = 2.0f;                          _bloomRadius2 = 2.0f;                          _bloomRadius1 = 1.0f;                          BloomStreakLength = 1;                          BloomDownsamplePasses = 5;                          break;                      }                  case BloomPresets.SuperWide:                      {                          _bloomStrength1 = 0.9f;                          _bloomStrength2 = 1;                          _bloomStrength3 = 1;                          _bloomStrength4 = 2;                          _bloomStrength5 = 6;                          _bloomRadius5 = 4.0f;                          _bloomRadius4 = 2.0f;                          _bloomRadius3 = 2.0f;                          _bloomRadius2 = 2.0f;                          _bloomRadius1 = 2.0f;                          BloomStreakLength = 1;                          BloomDownsamplePasses = 5;                          break;                      }                  case BloomPresets.Focussed:                      {                          _bloomStrength1 = 0.8f;                          _bloomStrength2 = 1;                          _bloomStrength3 = 1;                          _bloomStrength4 = 1;                          _bloomStrength5 = 2;                          _bloomRadius5 = 4.0f;                          _bloomRadius4 = 2.0f;                          _bloomRadius3 = 2.0f;                          _bloomRadius2 = 2.0f;                          _bloomRadius1 = 2.0f;                          BloomStreakLength = 1;                          BloomDownsamplePasses = 5;                          break;                      }                  case BloomPresets.Small:                      {                          _bloomStrength1 = 0.8f;                          _bloomStrength2 = 1;                          _bloomStrength3 = 1;                          _bloomStrength4 = 1;                          _bloomStrength5 = 1;                          _bloomRadius5 = 1;                          _bloomRadius4 = 1;                          _bloomRadius3 = 1;                          _bloomRadius2 = 1;                          _bloomRadius1 = 1;                          BloomStreakLength = 1;                          BloomDownsamplePasses = 5;                          break;                      }                  case BloomPresets.Cheap:                      {                          _bloomStrength1 = 0.8f;                          _bloomStrength2 = 2;                          _bloomRadius2 = 2;                          _bloomRadius1 = 2;                          BloomStreakLength = 1;                          BloomDownsamplePasses = 2;                          break;                      }                  case BloomPresets.One:                      {                          _bloomStrength1 = 4f;                          _bloomStrength2 = 1;                          _bloomStrength3 = 1;                          _bloomStrength4 = 1;                          _bloomStrength5 = 2;                          _bloomRadius5 = 1.0f;                          _bloomRadius4 = 1.0f;                          _bloomRadius3 = 1.0f;                          _bloomRadius2 = 1.0f;                          _bloomRadius1 = 1.0f;                          BloomStreakLength = 1;                          BloomDownsamplePasses = 5;                          break;                      }              }
Magic Number,C3DE.Graphics.PostProcessing,Bloom,C:\repos\demonixis_C3DE\C3DE\Graphics\PostProcessing\Bloom.cs,SetBloomPreset,The following statement contains a magic number: switch (preset)              {                  case BloomPresets.Wide:                      {                          _bloomStrength1 = 0.5f;                          _bloomStrength2 = 1;                          _bloomStrength3 = 2;                          _bloomStrength4 = 1;                          _bloomStrength5 = 2;                          _bloomRadius5 = 4.0f;                          _bloomRadius4 = 4.0f;                          _bloomRadius3 = 2.0f;                          _bloomRadius2 = 2.0f;                          _bloomRadius1 = 1.0f;                          BloomStreakLength = 1;                          BloomDownsamplePasses = 5;                          break;                      }                  case BloomPresets.SuperWide:                      {                          _bloomStrength1 = 0.9f;                          _bloomStrength2 = 1;                          _bloomStrength3 = 1;                          _bloomStrength4 = 2;                          _bloomStrength5 = 6;                          _bloomRadius5 = 4.0f;                          _bloomRadius4 = 2.0f;                          _bloomRadius3 = 2.0f;                          _bloomRadius2 = 2.0f;                          _bloomRadius1 = 2.0f;                          BloomStreakLength = 1;                          BloomDownsamplePasses = 5;                          break;                      }                  case BloomPresets.Focussed:                      {                          _bloomStrength1 = 0.8f;                          _bloomStrength2 = 1;                          _bloomStrength3 = 1;                          _bloomStrength4 = 1;                          _bloomStrength5 = 2;                          _bloomRadius5 = 4.0f;                          _bloomRadius4 = 2.0f;                          _bloomRadius3 = 2.0f;                          _bloomRadius2 = 2.0f;                          _bloomRadius1 = 2.0f;                          BloomStreakLength = 1;                          BloomDownsamplePasses = 5;                          break;                      }                  case BloomPresets.Small:                      {                          _bloomStrength1 = 0.8f;                          _bloomStrength2 = 1;                          _bloomStrength3 = 1;                          _bloomStrength4 = 1;                          _bloomStrength5 = 1;                          _bloomRadius5 = 1;                          _bloomRadius4 = 1;                          _bloomRadius3 = 1;                          _bloomRadius2 = 1;                          _bloomRadius1 = 1;                          BloomStreakLength = 1;                          BloomDownsamplePasses = 5;                          break;                      }                  case BloomPresets.Cheap:                      {                          _bloomStrength1 = 0.8f;                          _bloomStrength2 = 2;                          _bloomRadius2 = 2;                          _bloomRadius1 = 2;                          BloomStreakLength = 1;                          BloomDownsamplePasses = 2;                          break;                      }                  case BloomPresets.One:                      {                          _bloomStrength1 = 4f;                          _bloomStrength2 = 1;                          _bloomStrength3 = 1;                          _bloomStrength4 = 1;                          _bloomStrength5 = 2;                          _bloomRadius5 = 1.0f;                          _bloomRadius4 = 1.0f;                          _bloomRadius3 = 1.0f;                          _bloomRadius2 = 1.0f;                          _bloomRadius1 = 1.0f;                          BloomStreakLength = 1;                          BloomDownsamplePasses = 5;                          break;                      }              }
Magic Number,C3DE.Graphics.PostProcessing,Bloom,C:\repos\demonixis_C3DE\C3DE\Graphics\PostProcessing\Bloom.cs,SetBloomPreset,The following statement contains a magic number: switch (preset)              {                  case BloomPresets.Wide:                      {                          _bloomStrength1 = 0.5f;                          _bloomStrength2 = 1;                          _bloomStrength3 = 2;                          _bloomStrength4 = 1;                          _bloomStrength5 = 2;                          _bloomRadius5 = 4.0f;                          _bloomRadius4 = 4.0f;                          _bloomRadius3 = 2.0f;                          _bloomRadius2 = 2.0f;                          _bloomRadius1 = 1.0f;                          BloomStreakLength = 1;                          BloomDownsamplePasses = 5;                          break;                      }                  case BloomPresets.SuperWide:                      {                          _bloomStrength1 = 0.9f;                          _bloomStrength2 = 1;                          _bloomStrength3 = 1;                          _bloomStrength4 = 2;                          _bloomStrength5 = 6;                          _bloomRadius5 = 4.0f;                          _bloomRadius4 = 2.0f;                          _bloomRadius3 = 2.0f;                          _bloomRadius2 = 2.0f;                          _bloomRadius1 = 2.0f;                          BloomStreakLength = 1;                          BloomDownsamplePasses = 5;                          break;                      }                  case BloomPresets.Focussed:                      {                          _bloomStrength1 = 0.8f;                          _bloomStrength2 = 1;                          _bloomStrength3 = 1;                          _bloomStrength4 = 1;                          _bloomStrength5 = 2;                          _bloomRadius5 = 4.0f;                          _bloomRadius4 = 2.0f;                          _bloomRadius3 = 2.0f;                          _bloomRadius2 = 2.0f;                          _bloomRadius1 = 2.0f;                          BloomStreakLength = 1;                          BloomDownsamplePasses = 5;                          break;                      }                  case BloomPresets.Small:                      {                          _bloomStrength1 = 0.8f;                          _bloomStrength2 = 1;                          _bloomStrength3 = 1;                          _bloomStrength4 = 1;                          _bloomStrength5 = 1;                          _bloomRadius5 = 1;                          _bloomRadius4 = 1;                          _bloomRadius3 = 1;                          _bloomRadius2 = 1;                          _bloomRadius1 = 1;                          BloomStreakLength = 1;                          BloomDownsamplePasses = 5;                          break;                      }                  case BloomPresets.Cheap:                      {                          _bloomStrength1 = 0.8f;                          _bloomStrength2 = 2;                          _bloomRadius2 = 2;                          _bloomRadius1 = 2;                          BloomStreakLength = 1;                          BloomDownsamplePasses = 2;                          break;                      }                  case BloomPresets.One:                      {                          _bloomStrength1 = 4f;                          _bloomStrength2 = 1;                          _bloomStrength3 = 1;                          _bloomStrength4 = 1;                          _bloomStrength5 = 2;                          _bloomRadius5 = 1.0f;                          _bloomRadius4 = 1.0f;                          _bloomRadius3 = 1.0f;                          _bloomRadius2 = 1.0f;                          _bloomRadius1 = 1.0f;                          BloomStreakLength = 1;                          BloomDownsamplePasses = 5;                          break;                      }              }
Magic Number,C3DE.Graphics.PostProcessing,Bloom,C:\repos\demonixis_C3DE\C3DE\Graphics\PostProcessing\Bloom.cs,SetBloomPreset,The following statement contains a magic number: switch (preset)              {                  case BloomPresets.Wide:                      {                          _bloomStrength1 = 0.5f;                          _bloomStrength2 = 1;                          _bloomStrength3 = 2;                          _bloomStrength4 = 1;                          _bloomStrength5 = 2;                          _bloomRadius5 = 4.0f;                          _bloomRadius4 = 4.0f;                          _bloomRadius3 = 2.0f;                          _bloomRadius2 = 2.0f;                          _bloomRadius1 = 1.0f;                          BloomStreakLength = 1;                          BloomDownsamplePasses = 5;                          break;                      }                  case BloomPresets.SuperWide:                      {                          _bloomStrength1 = 0.9f;                          _bloomStrength2 = 1;                          _bloomStrength3 = 1;                          _bloomStrength4 = 2;                          _bloomStrength5 = 6;                          _bloomRadius5 = 4.0f;                          _bloomRadius4 = 2.0f;                          _bloomRadius3 = 2.0f;                          _bloomRadius2 = 2.0f;                          _bloomRadius1 = 2.0f;                          BloomStreakLength = 1;                          BloomDownsamplePasses = 5;                          break;                      }                  case BloomPresets.Focussed:                      {                          _bloomStrength1 = 0.8f;                          _bloomStrength2 = 1;                          _bloomStrength3 = 1;                          _bloomStrength4 = 1;                          _bloomStrength5 = 2;                          _bloomRadius5 = 4.0f;                          _bloomRadius4 = 2.0f;                          _bloomRadius3 = 2.0f;                          _bloomRadius2 = 2.0f;                          _bloomRadius1 = 2.0f;                          BloomStreakLength = 1;                          BloomDownsamplePasses = 5;                          break;                      }                  case BloomPresets.Small:                      {                          _bloomStrength1 = 0.8f;                          _bloomStrength2 = 1;                          _bloomStrength3 = 1;                          _bloomStrength4 = 1;                          _bloomStrength5 = 1;                          _bloomRadius5 = 1;                          _bloomRadius4 = 1;                          _bloomRadius3 = 1;                          _bloomRadius2 = 1;                          _bloomRadius1 = 1;                          BloomStreakLength = 1;                          BloomDownsamplePasses = 5;                          break;                      }                  case BloomPresets.Cheap:                      {                          _bloomStrength1 = 0.8f;                          _bloomStrength2 = 2;                          _bloomRadius2 = 2;                          _bloomRadius1 = 2;                          BloomStreakLength = 1;                          BloomDownsamplePasses = 2;                          break;                      }                  case BloomPresets.One:                      {                          _bloomStrength1 = 4f;                          _bloomStrength2 = 1;                          _bloomStrength3 = 1;                          _bloomStrength4 = 1;                          _bloomStrength5 = 2;                          _bloomRadius5 = 1.0f;                          _bloomRadius4 = 1.0f;                          _bloomRadius3 = 1.0f;                          _bloomRadius2 = 1.0f;                          _bloomRadius1 = 1.0f;                          BloomStreakLength = 1;                          BloomDownsamplePasses = 5;                          break;                      }              }
Magic Number,C3DE.Graphics.PostProcessing,Bloom,C:\repos\demonixis_C3DE\C3DE\Graphics\PostProcessing\Bloom.cs,SetBloomPreset,The following statement contains a magic number: switch (preset)              {                  case BloomPresets.Wide:                      {                          _bloomStrength1 = 0.5f;                          _bloomStrength2 = 1;                          _bloomStrength3 = 2;                          _bloomStrength4 = 1;                          _bloomStrength5 = 2;                          _bloomRadius5 = 4.0f;                          _bloomRadius4 = 4.0f;                          _bloomRadius3 = 2.0f;                          _bloomRadius2 = 2.0f;                          _bloomRadius1 = 1.0f;                          BloomStreakLength = 1;                          BloomDownsamplePasses = 5;                          break;                      }                  case BloomPresets.SuperWide:                      {                          _bloomStrength1 = 0.9f;                          _bloomStrength2 = 1;                          _bloomStrength3 = 1;                          _bloomStrength4 = 2;                          _bloomStrength5 = 6;                          _bloomRadius5 = 4.0f;                          _bloomRadius4 = 2.0f;                          _bloomRadius3 = 2.0f;                          _bloomRadius2 = 2.0f;                          _bloomRadius1 = 2.0f;                          BloomStreakLength = 1;                          BloomDownsamplePasses = 5;                          break;                      }                  case BloomPresets.Focussed:                      {                          _bloomStrength1 = 0.8f;                          _bloomStrength2 = 1;                          _bloomStrength3 = 1;                          _bloomStrength4 = 1;                          _bloomStrength5 = 2;                          _bloomRadius5 = 4.0f;                          _bloomRadius4 = 2.0f;                          _bloomRadius3 = 2.0f;                          _bloomRadius2 = 2.0f;                          _bloomRadius1 = 2.0f;                          BloomStreakLength = 1;                          BloomDownsamplePasses = 5;                          break;                      }                  case BloomPresets.Small:                      {                          _bloomStrength1 = 0.8f;                          _bloomStrength2 = 1;                          _bloomStrength3 = 1;                          _bloomStrength4 = 1;                          _bloomStrength5 = 1;                          _bloomRadius5 = 1;                          _bloomRadius4 = 1;                          _bloomRadius3 = 1;                          _bloomRadius2 = 1;                          _bloomRadius1 = 1;                          BloomStreakLength = 1;                          BloomDownsamplePasses = 5;                          break;                      }                  case BloomPresets.Cheap:                      {                          _bloomStrength1 = 0.8f;                          _bloomStrength2 = 2;                          _bloomRadius2 = 2;                          _bloomRadius1 = 2;                          BloomStreakLength = 1;                          BloomDownsamplePasses = 2;                          break;                      }                  case BloomPresets.One:                      {                          _bloomStrength1 = 4f;                          _bloomStrength2 = 1;                          _bloomStrength3 = 1;                          _bloomStrength4 = 1;                          _bloomStrength5 = 2;                          _bloomRadius5 = 1.0f;                          _bloomRadius4 = 1.0f;                          _bloomRadius3 = 1.0f;                          _bloomRadius2 = 1.0f;                          _bloomRadius1 = 1.0f;                          BloomStreakLength = 1;                          BloomDownsamplePasses = 5;                          break;                      }              }
Magic Number,C3DE.Graphics.PostProcessing,Bloom,C:\repos\demonixis_C3DE\C3DE\Graphics\PostProcessing\Bloom.cs,SetBloomPreset,The following statement contains a magic number: switch (preset)              {                  case BloomPresets.Wide:                      {                          _bloomStrength1 = 0.5f;                          _bloomStrength2 = 1;                          _bloomStrength3 = 2;                          _bloomStrength4 = 1;                          _bloomStrength5 = 2;                          _bloomRadius5 = 4.0f;                          _bloomRadius4 = 4.0f;                          _bloomRadius3 = 2.0f;                          _bloomRadius2 = 2.0f;                          _bloomRadius1 = 1.0f;                          BloomStreakLength = 1;                          BloomDownsamplePasses = 5;                          break;                      }                  case BloomPresets.SuperWide:                      {                          _bloomStrength1 = 0.9f;                          _bloomStrength2 = 1;                          _bloomStrength3 = 1;                          _bloomStrength4 = 2;                          _bloomStrength5 = 6;                          _bloomRadius5 = 4.0f;                          _bloomRadius4 = 2.0f;                          _bloomRadius3 = 2.0f;                          _bloomRadius2 = 2.0f;                          _bloomRadius1 = 2.0f;                          BloomStreakLength = 1;                          BloomDownsamplePasses = 5;                          break;                      }                  case BloomPresets.Focussed:                      {                          _bloomStrength1 = 0.8f;                          _bloomStrength2 = 1;                          _bloomStrength3 = 1;                          _bloomStrength4 = 1;                          _bloomStrength5 = 2;                          _bloomRadius5 = 4.0f;                          _bloomRadius4 = 2.0f;                          _bloomRadius3 = 2.0f;                          _bloomRadius2 = 2.0f;                          _bloomRadius1 = 2.0f;                          BloomStreakLength = 1;                          BloomDownsamplePasses = 5;                          break;                      }                  case BloomPresets.Small:                      {                          _bloomStrength1 = 0.8f;                          _bloomStrength2 = 1;                          _bloomStrength3 = 1;                          _bloomStrength4 = 1;                          _bloomStrength5 = 1;                          _bloomRadius5 = 1;                          _bloomRadius4 = 1;                          _bloomRadius3 = 1;                          _bloomRadius2 = 1;                          _bloomRadius1 = 1;                          BloomStreakLength = 1;                          BloomDownsamplePasses = 5;                          break;                      }                  case BloomPresets.Cheap:                      {                          _bloomStrength1 = 0.8f;                          _bloomStrength2 = 2;                          _bloomRadius2 = 2;                          _bloomRadius1 = 2;                          BloomStreakLength = 1;                          BloomDownsamplePasses = 2;                          break;                      }                  case BloomPresets.One:                      {                          _bloomStrength1 = 4f;                          _bloomStrength2 = 1;                          _bloomStrength3 = 1;                          _bloomStrength4 = 1;                          _bloomStrength5 = 2;                          _bloomRadius5 = 1.0f;                          _bloomRadius4 = 1.0f;                          _bloomRadius3 = 1.0f;                          _bloomRadius2 = 1.0f;                          _bloomRadius1 = 1.0f;                          BloomStreakLength = 1;                          BloomDownsamplePasses = 5;                          break;                      }              }
Magic Number,C3DE.Graphics.PostProcessing,Bloom,C:\repos\demonixis_C3DE\C3DE\Graphics\PostProcessing\Bloom.cs,UpdateResolution,The following statement contains a magic number: _bloomRenderTarget2DMip1 = new RenderTarget2D(_graphicsDevice'                  (int)(width / 2)'                  (int)(height / 2)' false' _renderTargetFormat' DepthFormat.None' 0' RenderTargetUsage.PreserveContents);
Magic Number,C3DE.Graphics.PostProcessing,Bloom,C:\repos\demonixis_C3DE\C3DE\Graphics\PostProcessing\Bloom.cs,UpdateResolution,The following statement contains a magic number: _bloomRenderTarget2DMip1 = new RenderTarget2D(_graphicsDevice'                  (int)(width / 2)'                  (int)(height / 2)' false' _renderTargetFormat' DepthFormat.None' 0' RenderTargetUsage.PreserveContents);
Magic Number,C3DE.Graphics.PostProcessing,Bloom,C:\repos\demonixis_C3DE\C3DE\Graphics\PostProcessing\Bloom.cs,UpdateResolution,The following statement contains a magic number: _bloomRenderTarget2DMip2 = new RenderTarget2D(_graphicsDevice'                  (int)(width / 4)'                  (int)(height / 4)' false' _renderTargetFormat' DepthFormat.None' 0' RenderTargetUsage.PreserveContents);
Magic Number,C3DE.Graphics.PostProcessing,Bloom,C:\repos\demonixis_C3DE\C3DE\Graphics\PostProcessing\Bloom.cs,UpdateResolution,The following statement contains a magic number: _bloomRenderTarget2DMip2 = new RenderTarget2D(_graphicsDevice'                  (int)(width / 4)'                  (int)(height / 4)' false' _renderTargetFormat' DepthFormat.None' 0' RenderTargetUsage.PreserveContents);
Magic Number,C3DE.Graphics.PostProcessing,Bloom,C:\repos\demonixis_C3DE\C3DE\Graphics\PostProcessing\Bloom.cs,UpdateResolution,The following statement contains a magic number: _bloomRenderTarget2DMip3 = new RenderTarget2D(_graphicsDevice'                  (int)(width / 8)'                  (int)(height / 8)' false' _renderTargetFormat' DepthFormat.None' 0' RenderTargetUsage.PreserveContents);
Magic Number,C3DE.Graphics.PostProcessing,Bloom,C:\repos\demonixis_C3DE\C3DE\Graphics\PostProcessing\Bloom.cs,UpdateResolution,The following statement contains a magic number: _bloomRenderTarget2DMip3 = new RenderTarget2D(_graphicsDevice'                  (int)(width / 8)'                  (int)(height / 8)' false' _renderTargetFormat' DepthFormat.None' 0' RenderTargetUsage.PreserveContents);
Magic Number,C3DE.Graphics.PostProcessing,Bloom,C:\repos\demonixis_C3DE\C3DE\Graphics\PostProcessing\Bloom.cs,UpdateResolution,The following statement contains a magic number: _bloomRenderTarget2DMip4 = new RenderTarget2D(_graphicsDevice'                  (int)(width / 16)'                  (int)(height / 16)' false' _renderTargetFormat' DepthFormat.None' 0' RenderTargetUsage.PreserveContents);
Magic Number,C3DE.Graphics.PostProcessing,Bloom,C:\repos\demonixis_C3DE\C3DE\Graphics\PostProcessing\Bloom.cs,UpdateResolution,The following statement contains a magic number: _bloomRenderTarget2DMip4 = new RenderTarget2D(_graphicsDevice'                  (int)(width / 16)'                  (int)(height / 16)' false' _renderTargetFormat' DepthFormat.None' 0' RenderTargetUsage.PreserveContents);
Magic Number,C3DE.Graphics.PostProcessing,Bloom,C:\repos\demonixis_C3DE\C3DE\Graphics\PostProcessing\Bloom.cs,UpdateResolution,The following statement contains a magic number: _bloomRenderTarget2DMip5 = new RenderTarget2D(_graphicsDevice'                  (int)(width / 32)'                  (int)(height / 32)' false' _renderTargetFormat' DepthFormat.None' 0' RenderTargetUsage.PreserveContents);
Magic Number,C3DE.Graphics.PostProcessing,Bloom,C:\repos\demonixis_C3DE\C3DE\Graphics\PostProcessing\Bloom.cs,UpdateResolution,The following statement contains a magic number: _bloomRenderTarget2DMip5 = new RenderTarget2D(_graphicsDevice'                  (int)(width / 32)'                  (int)(height / 32)' false' _renderTargetFormat' DepthFormat.None' 0' RenderTargetUsage.PreserveContents);
Magic Number,C3DE.Graphics.PostProcessing,Bloom,C:\repos\demonixis_C3DE\C3DE\Graphics\PostProcessing\Bloom.cs,Draw,The following statement contains a magic number: if (BloomDownsamplePasses > 0)              {                  //DOWNSAMPLE TO MIP1                  _graphicsDevice.SetRenderTarget(_bloomRenderTarget2DMip1);                    BloomScreenTexture = _bloomRenderTarget2DMip0;                  //Pass                  _bloomPassDownsample.Apply();                  _quadRenderer.RenderQuad(_graphicsDevice' Vector2.One * -1' Vector2.One);                    if (BloomDownsamplePasses > 1)                  {                      //Our input resolution is halfed' so our inverse 1/res. must be doubled                      BloomInverseResolution *= 2;                        //DOWNSAMPLE TO MIP2                      _graphicsDevice.SetRenderTarget(_bloomRenderTarget2DMip2);                        BloomScreenTexture = _bloomRenderTarget2DMip1;                      //Pass                      _bloomPassDownsample.Apply();                      _quadRenderer.RenderQuad(_graphicsDevice' Vector2.One * -1' Vector2.One);                        if (BloomDownsamplePasses > 2)                      {                          BloomInverseResolution *= 2;                            //DOWNSAMPLE TO MIP3                          _graphicsDevice.SetRenderTarget(_bloomRenderTarget2DMip3);                            BloomScreenTexture = _bloomRenderTarget2DMip2;                          //Pass                          _bloomPassDownsample.Apply();                          _quadRenderer.RenderQuad(_graphicsDevice' Vector2.One * -1' Vector2.One);                            if (BloomDownsamplePasses > 3)                          {                              BloomInverseResolution *= 2;                                //DOWNSAMPLE TO MIP4                              _graphicsDevice.SetRenderTarget(_bloomRenderTarget2DMip4);                                BloomScreenTexture = _bloomRenderTarget2DMip3;                              //Pass                              _bloomPassDownsample.Apply();                              _quadRenderer.RenderQuad(_graphicsDevice' Vector2.One * -1' Vector2.One);                                if (BloomDownsamplePasses > 4)                              {                                  BloomInverseResolution *= 2;                                    //DOWNSAMPLE TO MIP5                                  _graphicsDevice.SetRenderTarget(_bloomRenderTarget2DMip5);                                    BloomScreenTexture = _bloomRenderTarget2DMip4;                                  //Pass                                  _bloomPassDownsample.Apply();                                  _quadRenderer.RenderQuad(_graphicsDevice' Vector2.One * -1' Vector2.One);                                    ChangeBlendState();                                    //UPSAMPLE TO MIP4                                  _graphicsDevice.SetRenderTarget(_bloomRenderTarget2DMip4);                                  BloomScreenTexture = _bloomRenderTarget2DMip5;                                    BloomStrength = _bloomStrength5;                                  BloomRadius = _bloomRadius5;                                  if (BloomUseLuminance) _bloomPassUpsampleLuminance.Apply();                                  else _bloomPassUpsample.Apply();                                  _quadRenderer.RenderQuad(_graphicsDevice' Vector2.One * -1' Vector2.One);                                    BloomInverseResolution /= 2;                              }                                ChangeBlendState();                                //UPSAMPLE TO MIP3                              _graphicsDevice.SetRenderTarget(_bloomRenderTarget2DMip3);                              BloomScreenTexture = _bloomRenderTarget2DMip4;                                BloomStrength = _bloomStrength4;                              BloomRadius = _bloomRadius4;                              if (BloomUseLuminance) _bloomPassUpsampleLuminance.Apply();                              else _bloomPassUpsample.Apply();                              _quadRenderer.RenderQuad(_graphicsDevice' Vector2.One * -1' Vector2.One);                                BloomInverseResolution /= 2;                          }                            ChangeBlendState();                            //UPSAMPLE TO MIP2                          _graphicsDevice.SetRenderTarget(_bloomRenderTarget2DMip2);                          BloomScreenTexture = _bloomRenderTarget2DMip3;                            BloomStrength = _bloomStrength3;                          BloomRadius = _bloomRadius3;                          if (BloomUseLuminance) _bloomPassUpsampleLuminance.Apply();                          else _bloomPassUpsample.Apply();                          _quadRenderer.RenderQuad(_graphicsDevice' Vector2.One * -1' Vector2.One);                            BloomInverseResolution /= 2;                      }                        ChangeBlendState();                        //UPSAMPLE TO MIP1                      _graphicsDevice.SetRenderTarget(_bloomRenderTarget2DMip1);                      BloomScreenTexture = _bloomRenderTarget2DMip2;                        BloomStrength = _bloomStrength2;                      BloomRadius = _bloomRadius2;                      if (BloomUseLuminance) _bloomPassUpsampleLuminance.Apply();                      else _bloomPassUpsample.Apply();                      _quadRenderer.RenderQuad(_graphicsDevice' Vector2.One * -1' Vector2.One);                        BloomInverseResolution /= 2;                  }                    ChangeBlendState();                    //UPSAMPLE TO MIP0                  _graphicsDevice.SetRenderTarget(_bloomRenderTarget2DMip0);                  BloomScreenTexture = _bloomRenderTarget2DMip1;                    BloomStrength = _bloomStrength1;                  BloomRadius = _bloomRadius1;                    if (BloomUseLuminance) _bloomPassUpsampleLuminance.Apply();                  else _bloomPassUpsample.Apply();                  _quadRenderer.RenderQuad(_graphicsDevice' Vector2.One * -1' Vector2.One);              }
Magic Number,C3DE.Graphics.PostProcessing,Bloom,C:\repos\demonixis_C3DE\C3DE\Graphics\PostProcessing\Bloom.cs,Draw,The following statement contains a magic number: if (BloomDownsamplePasses > 0)              {                  //DOWNSAMPLE TO MIP1                  _graphicsDevice.SetRenderTarget(_bloomRenderTarget2DMip1);                    BloomScreenTexture = _bloomRenderTarget2DMip0;                  //Pass                  _bloomPassDownsample.Apply();                  _quadRenderer.RenderQuad(_graphicsDevice' Vector2.One * -1' Vector2.One);                    if (BloomDownsamplePasses > 1)                  {                      //Our input resolution is halfed' so our inverse 1/res. must be doubled                      BloomInverseResolution *= 2;                        //DOWNSAMPLE TO MIP2                      _graphicsDevice.SetRenderTarget(_bloomRenderTarget2DMip2);                        BloomScreenTexture = _bloomRenderTarget2DMip1;                      //Pass                      _bloomPassDownsample.Apply();                      _quadRenderer.RenderQuad(_graphicsDevice' Vector2.One * -1' Vector2.One);                        if (BloomDownsamplePasses > 2)                      {                          BloomInverseResolution *= 2;                            //DOWNSAMPLE TO MIP3                          _graphicsDevice.SetRenderTarget(_bloomRenderTarget2DMip3);                            BloomScreenTexture = _bloomRenderTarget2DMip2;                          //Pass                          _bloomPassDownsample.Apply();                          _quadRenderer.RenderQuad(_graphicsDevice' Vector2.One * -1' Vector2.One);                            if (BloomDownsamplePasses > 3)                          {                              BloomInverseResolution *= 2;                                //DOWNSAMPLE TO MIP4                              _graphicsDevice.SetRenderTarget(_bloomRenderTarget2DMip4);                                BloomScreenTexture = _bloomRenderTarget2DMip3;                              //Pass                              _bloomPassDownsample.Apply();                              _quadRenderer.RenderQuad(_graphicsDevice' Vector2.One * -1' Vector2.One);                                if (BloomDownsamplePasses > 4)                              {                                  BloomInverseResolution *= 2;                                    //DOWNSAMPLE TO MIP5                                  _graphicsDevice.SetRenderTarget(_bloomRenderTarget2DMip5);                                    BloomScreenTexture = _bloomRenderTarget2DMip4;                                  //Pass                                  _bloomPassDownsample.Apply();                                  _quadRenderer.RenderQuad(_graphicsDevice' Vector2.One * -1' Vector2.One);                                    ChangeBlendState();                                    //UPSAMPLE TO MIP4                                  _graphicsDevice.SetRenderTarget(_bloomRenderTarget2DMip4);                                  BloomScreenTexture = _bloomRenderTarget2DMip5;                                    BloomStrength = _bloomStrength5;                                  BloomRadius = _bloomRadius5;                                  if (BloomUseLuminance) _bloomPassUpsampleLuminance.Apply();                                  else _bloomPassUpsample.Apply();                                  _quadRenderer.RenderQuad(_graphicsDevice' Vector2.One * -1' Vector2.One);                                    BloomInverseResolution /= 2;                              }                                ChangeBlendState();                                //UPSAMPLE TO MIP3                              _graphicsDevice.SetRenderTarget(_bloomRenderTarget2DMip3);                              BloomScreenTexture = _bloomRenderTarget2DMip4;                                BloomStrength = _bloomStrength4;                              BloomRadius = _bloomRadius4;                              if (BloomUseLuminance) _bloomPassUpsampleLuminance.Apply();                              else _bloomPassUpsample.Apply();                              _quadRenderer.RenderQuad(_graphicsDevice' Vector2.One * -1' Vector2.One);                                BloomInverseResolution /= 2;                          }                            ChangeBlendState();                            //UPSAMPLE TO MIP2                          _graphicsDevice.SetRenderTarget(_bloomRenderTarget2DMip2);                          BloomScreenTexture = _bloomRenderTarget2DMip3;                            BloomStrength = _bloomStrength3;                          BloomRadius = _bloomRadius3;                          if (BloomUseLuminance) _bloomPassUpsampleLuminance.Apply();                          else _bloomPassUpsample.Apply();                          _quadRenderer.RenderQuad(_graphicsDevice' Vector2.One * -1' Vector2.One);                            BloomInverseResolution /= 2;                      }                        ChangeBlendState();                        //UPSAMPLE TO MIP1                      _graphicsDevice.SetRenderTarget(_bloomRenderTarget2DMip1);                      BloomScreenTexture = _bloomRenderTarget2DMip2;                        BloomStrength = _bloomStrength2;                      BloomRadius = _bloomRadius2;                      if (BloomUseLuminance) _bloomPassUpsampleLuminance.Apply();                      else _bloomPassUpsample.Apply();                      _quadRenderer.RenderQuad(_graphicsDevice' Vector2.One * -1' Vector2.One);                        BloomInverseResolution /= 2;                  }                    ChangeBlendState();                    //UPSAMPLE TO MIP0                  _graphicsDevice.SetRenderTarget(_bloomRenderTarget2DMip0);                  BloomScreenTexture = _bloomRenderTarget2DMip1;                    BloomStrength = _bloomStrength1;                  BloomRadius = _bloomRadius1;                    if (BloomUseLuminance) _bloomPassUpsampleLuminance.Apply();                  else _bloomPassUpsample.Apply();                  _quadRenderer.RenderQuad(_graphicsDevice' Vector2.One * -1' Vector2.One);              }
Magic Number,C3DE.Graphics.PostProcessing,Bloom,C:\repos\demonixis_C3DE\C3DE\Graphics\PostProcessing\Bloom.cs,Draw,The following statement contains a magic number: if (BloomDownsamplePasses > 0)              {                  //DOWNSAMPLE TO MIP1                  _graphicsDevice.SetRenderTarget(_bloomRenderTarget2DMip1);                    BloomScreenTexture = _bloomRenderTarget2DMip0;                  //Pass                  _bloomPassDownsample.Apply();                  _quadRenderer.RenderQuad(_graphicsDevice' Vector2.One * -1' Vector2.One);                    if (BloomDownsamplePasses > 1)                  {                      //Our input resolution is halfed' so our inverse 1/res. must be doubled                      BloomInverseResolution *= 2;                        //DOWNSAMPLE TO MIP2                      _graphicsDevice.SetRenderTarget(_bloomRenderTarget2DMip2);                        BloomScreenTexture = _bloomRenderTarget2DMip1;                      //Pass                      _bloomPassDownsample.Apply();                      _quadRenderer.RenderQuad(_graphicsDevice' Vector2.One * -1' Vector2.One);                        if (BloomDownsamplePasses > 2)                      {                          BloomInverseResolution *= 2;                            //DOWNSAMPLE TO MIP3                          _graphicsDevice.SetRenderTarget(_bloomRenderTarget2DMip3);                            BloomScreenTexture = _bloomRenderTarget2DMip2;                          //Pass                          _bloomPassDownsample.Apply();                          _quadRenderer.RenderQuad(_graphicsDevice' Vector2.One * -1' Vector2.One);                            if (BloomDownsamplePasses > 3)                          {                              BloomInverseResolution *= 2;                                //DOWNSAMPLE TO MIP4                              _graphicsDevice.SetRenderTarget(_bloomRenderTarget2DMip4);                                BloomScreenTexture = _bloomRenderTarget2DMip3;                              //Pass                              _bloomPassDownsample.Apply();                              _quadRenderer.RenderQuad(_graphicsDevice' Vector2.One * -1' Vector2.One);                                if (BloomDownsamplePasses > 4)                              {                                  BloomInverseResolution *= 2;                                    //DOWNSAMPLE TO MIP5                                  _graphicsDevice.SetRenderTarget(_bloomRenderTarget2DMip5);                                    BloomScreenTexture = _bloomRenderTarget2DMip4;                                  //Pass                                  _bloomPassDownsample.Apply();                                  _quadRenderer.RenderQuad(_graphicsDevice' Vector2.One * -1' Vector2.One);                                    ChangeBlendState();                                    //UPSAMPLE TO MIP4                                  _graphicsDevice.SetRenderTarget(_bloomRenderTarget2DMip4);                                  BloomScreenTexture = _bloomRenderTarget2DMip5;                                    BloomStrength = _bloomStrength5;                                  BloomRadius = _bloomRadius5;                                  if (BloomUseLuminance) _bloomPassUpsampleLuminance.Apply();                                  else _bloomPassUpsample.Apply();                                  _quadRenderer.RenderQuad(_graphicsDevice' Vector2.One * -1' Vector2.One);                                    BloomInverseResolution /= 2;                              }                                ChangeBlendState();                                //UPSAMPLE TO MIP3                              _graphicsDevice.SetRenderTarget(_bloomRenderTarget2DMip3);                              BloomScreenTexture = _bloomRenderTarget2DMip4;                                BloomStrength = _bloomStrength4;                              BloomRadius = _bloomRadius4;                              if (BloomUseLuminance) _bloomPassUpsampleLuminance.Apply();                              else _bloomPassUpsample.Apply();                              _quadRenderer.RenderQuad(_graphicsDevice' Vector2.One * -1' Vector2.One);                                BloomInverseResolution /= 2;                          }                            ChangeBlendState();                            //UPSAMPLE TO MIP2                          _graphicsDevice.SetRenderTarget(_bloomRenderTarget2DMip2);                          BloomScreenTexture = _bloomRenderTarget2DMip3;                            BloomStrength = _bloomStrength3;                          BloomRadius = _bloomRadius3;                          if (BloomUseLuminance) _bloomPassUpsampleLuminance.Apply();                          else _bloomPassUpsample.Apply();                          _quadRenderer.RenderQuad(_graphicsDevice' Vector2.One * -1' Vector2.One);                            BloomInverseResolution /= 2;                      }                        ChangeBlendState();                        //UPSAMPLE TO MIP1                      _graphicsDevice.SetRenderTarget(_bloomRenderTarget2DMip1);                      BloomScreenTexture = _bloomRenderTarget2DMip2;                        BloomStrength = _bloomStrength2;                      BloomRadius = _bloomRadius2;                      if (BloomUseLuminance) _bloomPassUpsampleLuminance.Apply();                      else _bloomPassUpsample.Apply();                      _quadRenderer.RenderQuad(_graphicsDevice' Vector2.One * -1' Vector2.One);                        BloomInverseResolution /= 2;                  }                    ChangeBlendState();                    //UPSAMPLE TO MIP0                  _graphicsDevice.SetRenderTarget(_bloomRenderTarget2DMip0);                  BloomScreenTexture = _bloomRenderTarget2DMip1;                    BloomStrength = _bloomStrength1;                  BloomRadius = _bloomRadius1;                    if (BloomUseLuminance) _bloomPassUpsampleLuminance.Apply();                  else _bloomPassUpsample.Apply();                  _quadRenderer.RenderQuad(_graphicsDevice' Vector2.One * -1' Vector2.One);              }
Magic Number,C3DE.Graphics.PostProcessing,Bloom,C:\repos\demonixis_C3DE\C3DE\Graphics\PostProcessing\Bloom.cs,Draw,The following statement contains a magic number: if (BloomDownsamplePasses > 0)              {                  //DOWNSAMPLE TO MIP1                  _graphicsDevice.SetRenderTarget(_bloomRenderTarget2DMip1);                    BloomScreenTexture = _bloomRenderTarget2DMip0;                  //Pass                  _bloomPassDownsample.Apply();                  _quadRenderer.RenderQuad(_graphicsDevice' Vector2.One * -1' Vector2.One);                    if (BloomDownsamplePasses > 1)                  {                      //Our input resolution is halfed' so our inverse 1/res. must be doubled                      BloomInverseResolution *= 2;                        //DOWNSAMPLE TO MIP2                      _graphicsDevice.SetRenderTarget(_bloomRenderTarget2DMip2);                        BloomScreenTexture = _bloomRenderTarget2DMip1;                      //Pass                      _bloomPassDownsample.Apply();                      _quadRenderer.RenderQuad(_graphicsDevice' Vector2.One * -1' Vector2.One);                        if (BloomDownsamplePasses > 2)                      {                          BloomInverseResolution *= 2;                            //DOWNSAMPLE TO MIP3                          _graphicsDevice.SetRenderTarget(_bloomRenderTarget2DMip3);                            BloomScreenTexture = _bloomRenderTarget2DMip2;                          //Pass                          _bloomPassDownsample.Apply();                          _quadRenderer.RenderQuad(_graphicsDevice' Vector2.One * -1' Vector2.One);                            if (BloomDownsamplePasses > 3)                          {                              BloomInverseResolution *= 2;                                //DOWNSAMPLE TO MIP4                              _graphicsDevice.SetRenderTarget(_bloomRenderTarget2DMip4);                                BloomScreenTexture = _bloomRenderTarget2DMip3;                              //Pass                              _bloomPassDownsample.Apply();                              _quadRenderer.RenderQuad(_graphicsDevice' Vector2.One * -1' Vector2.One);                                if (BloomDownsamplePasses > 4)                              {                                  BloomInverseResolution *= 2;                                    //DOWNSAMPLE TO MIP5                                  _graphicsDevice.SetRenderTarget(_bloomRenderTarget2DMip5);                                    BloomScreenTexture = _bloomRenderTarget2DMip4;                                  //Pass                                  _bloomPassDownsample.Apply();                                  _quadRenderer.RenderQuad(_graphicsDevice' Vector2.One * -1' Vector2.One);                                    ChangeBlendState();                                    //UPSAMPLE TO MIP4                                  _graphicsDevice.SetRenderTarget(_bloomRenderTarget2DMip4);                                  BloomScreenTexture = _bloomRenderTarget2DMip5;                                    BloomStrength = _bloomStrength5;                                  BloomRadius = _bloomRadius5;                                  if (BloomUseLuminance) _bloomPassUpsampleLuminance.Apply();                                  else _bloomPassUpsample.Apply();                                  _quadRenderer.RenderQuad(_graphicsDevice' Vector2.One * -1' Vector2.One);                                    BloomInverseResolution /= 2;                              }                                ChangeBlendState();                                //UPSAMPLE TO MIP3                              _graphicsDevice.SetRenderTarget(_bloomRenderTarget2DMip3);                              BloomScreenTexture = _bloomRenderTarget2DMip4;                                BloomStrength = _bloomStrength4;                              BloomRadius = _bloomRadius4;                              if (BloomUseLuminance) _bloomPassUpsampleLuminance.Apply();                              else _bloomPassUpsample.Apply();                              _quadRenderer.RenderQuad(_graphicsDevice' Vector2.One * -1' Vector2.One);                                BloomInverseResolution /= 2;                          }                            ChangeBlendState();                            //UPSAMPLE TO MIP2                          _graphicsDevice.SetRenderTarget(_bloomRenderTarget2DMip2);                          BloomScreenTexture = _bloomRenderTarget2DMip3;                            BloomStrength = _bloomStrength3;                          BloomRadius = _bloomRadius3;                          if (BloomUseLuminance) _bloomPassUpsampleLuminance.Apply();                          else _bloomPassUpsample.Apply();                          _quadRenderer.RenderQuad(_graphicsDevice' Vector2.One * -1' Vector2.One);                            BloomInverseResolution /= 2;                      }                        ChangeBlendState();                        //UPSAMPLE TO MIP1                      _graphicsDevice.SetRenderTarget(_bloomRenderTarget2DMip1);                      BloomScreenTexture = _bloomRenderTarget2DMip2;                        BloomStrength = _bloomStrength2;                      BloomRadius = _bloomRadius2;                      if (BloomUseLuminance) _bloomPassUpsampleLuminance.Apply();                      else _bloomPassUpsample.Apply();                      _quadRenderer.RenderQuad(_graphicsDevice' Vector2.One * -1' Vector2.One);                        BloomInverseResolution /= 2;                  }                    ChangeBlendState();                    //UPSAMPLE TO MIP0                  _graphicsDevice.SetRenderTarget(_bloomRenderTarget2DMip0);                  BloomScreenTexture = _bloomRenderTarget2DMip1;                    BloomStrength = _bloomStrength1;                  BloomRadius = _bloomRadius1;                    if (BloomUseLuminance) _bloomPassUpsampleLuminance.Apply();                  else _bloomPassUpsample.Apply();                  _quadRenderer.RenderQuad(_graphicsDevice' Vector2.One * -1' Vector2.One);              }
Magic Number,C3DE.Graphics.PostProcessing,Bloom,C:\repos\demonixis_C3DE\C3DE\Graphics\PostProcessing\Bloom.cs,Draw,The following statement contains a magic number: if (BloomDownsamplePasses > 0)              {                  //DOWNSAMPLE TO MIP1                  _graphicsDevice.SetRenderTarget(_bloomRenderTarget2DMip1);                    BloomScreenTexture = _bloomRenderTarget2DMip0;                  //Pass                  _bloomPassDownsample.Apply();                  _quadRenderer.RenderQuad(_graphicsDevice' Vector2.One * -1' Vector2.One);                    if (BloomDownsamplePasses > 1)                  {                      //Our input resolution is halfed' so our inverse 1/res. must be doubled                      BloomInverseResolution *= 2;                        //DOWNSAMPLE TO MIP2                      _graphicsDevice.SetRenderTarget(_bloomRenderTarget2DMip2);                        BloomScreenTexture = _bloomRenderTarget2DMip1;                      //Pass                      _bloomPassDownsample.Apply();                      _quadRenderer.RenderQuad(_graphicsDevice' Vector2.One * -1' Vector2.One);                        if (BloomDownsamplePasses > 2)                      {                          BloomInverseResolution *= 2;                            //DOWNSAMPLE TO MIP3                          _graphicsDevice.SetRenderTarget(_bloomRenderTarget2DMip3);                            BloomScreenTexture = _bloomRenderTarget2DMip2;                          //Pass                          _bloomPassDownsample.Apply();                          _quadRenderer.RenderQuad(_graphicsDevice' Vector2.One * -1' Vector2.One);                            if (BloomDownsamplePasses > 3)                          {                              BloomInverseResolution *= 2;                                //DOWNSAMPLE TO MIP4                              _graphicsDevice.SetRenderTarget(_bloomRenderTarget2DMip4);                                BloomScreenTexture = _bloomRenderTarget2DMip3;                              //Pass                              _bloomPassDownsample.Apply();                              _quadRenderer.RenderQuad(_graphicsDevice' Vector2.One * -1' Vector2.One);                                if (BloomDownsamplePasses > 4)                              {                                  BloomInverseResolution *= 2;                                    //DOWNSAMPLE TO MIP5                                  _graphicsDevice.SetRenderTarget(_bloomRenderTarget2DMip5);                                    BloomScreenTexture = _bloomRenderTarget2DMip4;                                  //Pass                                  _bloomPassDownsample.Apply();                                  _quadRenderer.RenderQuad(_graphicsDevice' Vector2.One * -1' Vector2.One);                                    ChangeBlendState();                                    //UPSAMPLE TO MIP4                                  _graphicsDevice.SetRenderTarget(_bloomRenderTarget2DMip4);                                  BloomScreenTexture = _bloomRenderTarget2DMip5;                                    BloomStrength = _bloomStrength5;                                  BloomRadius = _bloomRadius5;                                  if (BloomUseLuminance) _bloomPassUpsampleLuminance.Apply();                                  else _bloomPassUpsample.Apply();                                  _quadRenderer.RenderQuad(_graphicsDevice' Vector2.One * -1' Vector2.One);                                    BloomInverseResolution /= 2;                              }                                ChangeBlendState();                                //UPSAMPLE TO MIP3                              _graphicsDevice.SetRenderTarget(_bloomRenderTarget2DMip3);                              BloomScreenTexture = _bloomRenderTarget2DMip4;                                BloomStrength = _bloomStrength4;                              BloomRadius = _bloomRadius4;                              if (BloomUseLuminance) _bloomPassUpsampleLuminance.Apply();                              else _bloomPassUpsample.Apply();                              _quadRenderer.RenderQuad(_graphicsDevice' Vector2.One * -1' Vector2.One);                                BloomInverseResolution /= 2;                          }                            ChangeBlendState();                            //UPSAMPLE TO MIP2                          _graphicsDevice.SetRenderTarget(_bloomRenderTarget2DMip2);                          BloomScreenTexture = _bloomRenderTarget2DMip3;                            BloomStrength = _bloomStrength3;                          BloomRadius = _bloomRadius3;                          if (BloomUseLuminance) _bloomPassUpsampleLuminance.Apply();                          else _bloomPassUpsample.Apply();                          _quadRenderer.RenderQuad(_graphicsDevice' Vector2.One * -1' Vector2.One);                            BloomInverseResolution /= 2;                      }                        ChangeBlendState();                        //UPSAMPLE TO MIP1                      _graphicsDevice.SetRenderTarget(_bloomRenderTarget2DMip1);                      BloomScreenTexture = _bloomRenderTarget2DMip2;                        BloomStrength = _bloomStrength2;                      BloomRadius = _bloomRadius2;                      if (BloomUseLuminance) _bloomPassUpsampleLuminance.Apply();                      else _bloomPassUpsample.Apply();                      _quadRenderer.RenderQuad(_graphicsDevice' Vector2.One * -1' Vector2.One);                        BloomInverseResolution /= 2;                  }                    ChangeBlendState();                    //UPSAMPLE TO MIP0                  _graphicsDevice.SetRenderTarget(_bloomRenderTarget2DMip0);                  BloomScreenTexture = _bloomRenderTarget2DMip1;                    BloomStrength = _bloomStrength1;                  BloomRadius = _bloomRadius1;                    if (BloomUseLuminance) _bloomPassUpsampleLuminance.Apply();                  else _bloomPassUpsample.Apply();                  _quadRenderer.RenderQuad(_graphicsDevice' Vector2.One * -1' Vector2.One);              }
Magic Number,C3DE.Graphics.PostProcessing,Bloom,C:\repos\demonixis_C3DE\C3DE\Graphics\PostProcessing\Bloom.cs,Draw,The following statement contains a magic number: if (BloomDownsamplePasses > 0)              {                  //DOWNSAMPLE TO MIP1                  _graphicsDevice.SetRenderTarget(_bloomRenderTarget2DMip1);                    BloomScreenTexture = _bloomRenderTarget2DMip0;                  //Pass                  _bloomPassDownsample.Apply();                  _quadRenderer.RenderQuad(_graphicsDevice' Vector2.One * -1' Vector2.One);                    if (BloomDownsamplePasses > 1)                  {                      //Our input resolution is halfed' so our inverse 1/res. must be doubled                      BloomInverseResolution *= 2;                        //DOWNSAMPLE TO MIP2                      _graphicsDevice.SetRenderTarget(_bloomRenderTarget2DMip2);                        BloomScreenTexture = _bloomRenderTarget2DMip1;                      //Pass                      _bloomPassDownsample.Apply();                      _quadRenderer.RenderQuad(_graphicsDevice' Vector2.One * -1' Vector2.One);                        if (BloomDownsamplePasses > 2)                      {                          BloomInverseResolution *= 2;                            //DOWNSAMPLE TO MIP3                          _graphicsDevice.SetRenderTarget(_bloomRenderTarget2DMip3);                            BloomScreenTexture = _bloomRenderTarget2DMip2;                          //Pass                          _bloomPassDownsample.Apply();                          _quadRenderer.RenderQuad(_graphicsDevice' Vector2.One * -1' Vector2.One);                            if (BloomDownsamplePasses > 3)                          {                              BloomInverseResolution *= 2;                                //DOWNSAMPLE TO MIP4                              _graphicsDevice.SetRenderTarget(_bloomRenderTarget2DMip4);                                BloomScreenTexture = _bloomRenderTarget2DMip3;                              //Pass                              _bloomPassDownsample.Apply();                              _quadRenderer.RenderQuad(_graphicsDevice' Vector2.One * -1' Vector2.One);                                if (BloomDownsamplePasses > 4)                              {                                  BloomInverseResolution *= 2;                                    //DOWNSAMPLE TO MIP5                                  _graphicsDevice.SetRenderTarget(_bloomRenderTarget2DMip5);                                    BloomScreenTexture = _bloomRenderTarget2DMip4;                                  //Pass                                  _bloomPassDownsample.Apply();                                  _quadRenderer.RenderQuad(_graphicsDevice' Vector2.One * -1' Vector2.One);                                    ChangeBlendState();                                    //UPSAMPLE TO MIP4                                  _graphicsDevice.SetRenderTarget(_bloomRenderTarget2DMip4);                                  BloomScreenTexture = _bloomRenderTarget2DMip5;                                    BloomStrength = _bloomStrength5;                                  BloomRadius = _bloomRadius5;                                  if (BloomUseLuminance) _bloomPassUpsampleLuminance.Apply();                                  else _bloomPassUpsample.Apply();                                  _quadRenderer.RenderQuad(_graphicsDevice' Vector2.One * -1' Vector2.One);                                    BloomInverseResolution /= 2;                              }                                ChangeBlendState();                                //UPSAMPLE TO MIP3                              _graphicsDevice.SetRenderTarget(_bloomRenderTarget2DMip3);                              BloomScreenTexture = _bloomRenderTarget2DMip4;                                BloomStrength = _bloomStrength4;                              BloomRadius = _bloomRadius4;                              if (BloomUseLuminance) _bloomPassUpsampleLuminance.Apply();                              else _bloomPassUpsample.Apply();                              _quadRenderer.RenderQuad(_graphicsDevice' Vector2.One * -1' Vector2.One);                                BloomInverseResolution /= 2;                          }                            ChangeBlendState();                            //UPSAMPLE TO MIP2                          _graphicsDevice.SetRenderTarget(_bloomRenderTarget2DMip2);                          BloomScreenTexture = _bloomRenderTarget2DMip3;                            BloomStrength = _bloomStrength3;                          BloomRadius = _bloomRadius3;                          if (BloomUseLuminance) _bloomPassUpsampleLuminance.Apply();                          else _bloomPassUpsample.Apply();                          _quadRenderer.RenderQuad(_graphicsDevice' Vector2.One * -1' Vector2.One);                            BloomInverseResolution /= 2;                      }                        ChangeBlendState();                        //UPSAMPLE TO MIP1                      _graphicsDevice.SetRenderTarget(_bloomRenderTarget2DMip1);                      BloomScreenTexture = _bloomRenderTarget2DMip2;                        BloomStrength = _bloomStrength2;                      BloomRadius = _bloomRadius2;                      if (BloomUseLuminance) _bloomPassUpsampleLuminance.Apply();                      else _bloomPassUpsample.Apply();                      _quadRenderer.RenderQuad(_graphicsDevice' Vector2.One * -1' Vector2.One);                        BloomInverseResolution /= 2;                  }                    ChangeBlendState();                    //UPSAMPLE TO MIP0                  _graphicsDevice.SetRenderTarget(_bloomRenderTarget2DMip0);                  BloomScreenTexture = _bloomRenderTarget2DMip1;                    BloomStrength = _bloomStrength1;                  BloomRadius = _bloomRadius1;                    if (BloomUseLuminance) _bloomPassUpsampleLuminance.Apply();                  else _bloomPassUpsample.Apply();                  _quadRenderer.RenderQuad(_graphicsDevice' Vector2.One * -1' Vector2.One);              }
Magic Number,C3DE.Graphics.PostProcessing,Bloom,C:\repos\demonixis_C3DE\C3DE\Graphics\PostProcessing\Bloom.cs,Draw,The following statement contains a magic number: if (BloomDownsamplePasses > 0)              {                  //DOWNSAMPLE TO MIP1                  _graphicsDevice.SetRenderTarget(_bloomRenderTarget2DMip1);                    BloomScreenTexture = _bloomRenderTarget2DMip0;                  //Pass                  _bloomPassDownsample.Apply();                  _quadRenderer.RenderQuad(_graphicsDevice' Vector2.One * -1' Vector2.One);                    if (BloomDownsamplePasses > 1)                  {                      //Our input resolution is halfed' so our inverse 1/res. must be doubled                      BloomInverseResolution *= 2;                        //DOWNSAMPLE TO MIP2                      _graphicsDevice.SetRenderTarget(_bloomRenderTarget2DMip2);                        BloomScreenTexture = _bloomRenderTarget2DMip1;                      //Pass                      _bloomPassDownsample.Apply();                      _quadRenderer.RenderQuad(_graphicsDevice' Vector2.One * -1' Vector2.One);                        if (BloomDownsamplePasses > 2)                      {                          BloomInverseResolution *= 2;                            //DOWNSAMPLE TO MIP3                          _graphicsDevice.SetRenderTarget(_bloomRenderTarget2DMip3);                            BloomScreenTexture = _bloomRenderTarget2DMip2;                          //Pass                          _bloomPassDownsample.Apply();                          _quadRenderer.RenderQuad(_graphicsDevice' Vector2.One * -1' Vector2.One);                            if (BloomDownsamplePasses > 3)                          {                              BloomInverseResolution *= 2;                                //DOWNSAMPLE TO MIP4                              _graphicsDevice.SetRenderTarget(_bloomRenderTarget2DMip4);                                BloomScreenTexture = _bloomRenderTarget2DMip3;                              //Pass                              _bloomPassDownsample.Apply();                              _quadRenderer.RenderQuad(_graphicsDevice' Vector2.One * -1' Vector2.One);                                if (BloomDownsamplePasses > 4)                              {                                  BloomInverseResolution *= 2;                                    //DOWNSAMPLE TO MIP5                                  _graphicsDevice.SetRenderTarget(_bloomRenderTarget2DMip5);                                    BloomScreenTexture = _bloomRenderTarget2DMip4;                                  //Pass                                  _bloomPassDownsample.Apply();                                  _quadRenderer.RenderQuad(_graphicsDevice' Vector2.One * -1' Vector2.One);                                    ChangeBlendState();                                    //UPSAMPLE TO MIP4                                  _graphicsDevice.SetRenderTarget(_bloomRenderTarget2DMip4);                                  BloomScreenTexture = _bloomRenderTarget2DMip5;                                    BloomStrength = _bloomStrength5;                                  BloomRadius = _bloomRadius5;                                  if (BloomUseLuminance) _bloomPassUpsampleLuminance.Apply();                                  else _bloomPassUpsample.Apply();                                  _quadRenderer.RenderQuad(_graphicsDevice' Vector2.One * -1' Vector2.One);                                    BloomInverseResolution /= 2;                              }                                ChangeBlendState();                                //UPSAMPLE TO MIP3                              _graphicsDevice.SetRenderTarget(_bloomRenderTarget2DMip3);                              BloomScreenTexture = _bloomRenderTarget2DMip4;                                BloomStrength = _bloomStrength4;                              BloomRadius = _bloomRadius4;                              if (BloomUseLuminance) _bloomPassUpsampleLuminance.Apply();                              else _bloomPassUpsample.Apply();                              _quadRenderer.RenderQuad(_graphicsDevice' Vector2.One * -1' Vector2.One);                                BloomInverseResolution /= 2;                          }                            ChangeBlendState();                            //UPSAMPLE TO MIP2                          _graphicsDevice.SetRenderTarget(_bloomRenderTarget2DMip2);                          BloomScreenTexture = _bloomRenderTarget2DMip3;                            BloomStrength = _bloomStrength3;                          BloomRadius = _bloomRadius3;                          if (BloomUseLuminance) _bloomPassUpsampleLuminance.Apply();                          else _bloomPassUpsample.Apply();                          _quadRenderer.RenderQuad(_graphicsDevice' Vector2.One * -1' Vector2.One);                            BloomInverseResolution /= 2;                      }                        ChangeBlendState();                        //UPSAMPLE TO MIP1                      _graphicsDevice.SetRenderTarget(_bloomRenderTarget2DMip1);                      BloomScreenTexture = _bloomRenderTarget2DMip2;                        BloomStrength = _bloomStrength2;                      BloomRadius = _bloomRadius2;                      if (BloomUseLuminance) _bloomPassUpsampleLuminance.Apply();                      else _bloomPassUpsample.Apply();                      _quadRenderer.RenderQuad(_graphicsDevice' Vector2.One * -1' Vector2.One);                        BloomInverseResolution /= 2;                  }                    ChangeBlendState();                    //UPSAMPLE TO MIP0                  _graphicsDevice.SetRenderTarget(_bloomRenderTarget2DMip0);                  BloomScreenTexture = _bloomRenderTarget2DMip1;                    BloomStrength = _bloomStrength1;                  BloomRadius = _bloomRadius1;                    if (BloomUseLuminance) _bloomPassUpsampleLuminance.Apply();                  else _bloomPassUpsample.Apply();                  _quadRenderer.RenderQuad(_graphicsDevice' Vector2.One * -1' Vector2.One);              }
Magic Number,C3DE.Graphics.PostProcessing,Bloom,C:\repos\demonixis_C3DE\C3DE\Graphics\PostProcessing\Bloom.cs,Draw,The following statement contains a magic number: if (BloomDownsamplePasses > 0)              {                  //DOWNSAMPLE TO MIP1                  _graphicsDevice.SetRenderTarget(_bloomRenderTarget2DMip1);                    BloomScreenTexture = _bloomRenderTarget2DMip0;                  //Pass                  _bloomPassDownsample.Apply();                  _quadRenderer.RenderQuad(_graphicsDevice' Vector2.One * -1' Vector2.One);                    if (BloomDownsamplePasses > 1)                  {                      //Our input resolution is halfed' so our inverse 1/res. must be doubled                      BloomInverseResolution *= 2;                        //DOWNSAMPLE TO MIP2                      _graphicsDevice.SetRenderTarget(_bloomRenderTarget2DMip2);                        BloomScreenTexture = _bloomRenderTarget2DMip1;                      //Pass                      _bloomPassDownsample.Apply();                      _quadRenderer.RenderQuad(_graphicsDevice' Vector2.One * -1' Vector2.One);                        if (BloomDownsamplePasses > 2)                      {                          BloomInverseResolution *= 2;                            //DOWNSAMPLE TO MIP3                          _graphicsDevice.SetRenderTarget(_bloomRenderTarget2DMip3);                            BloomScreenTexture = _bloomRenderTarget2DMip2;                          //Pass                          _bloomPassDownsample.Apply();                          _quadRenderer.RenderQuad(_graphicsDevice' Vector2.One * -1' Vector2.One);                            if (BloomDownsamplePasses > 3)                          {                              BloomInverseResolution *= 2;                                //DOWNSAMPLE TO MIP4                              _graphicsDevice.SetRenderTarget(_bloomRenderTarget2DMip4);                                BloomScreenTexture = _bloomRenderTarget2DMip3;                              //Pass                              _bloomPassDownsample.Apply();                              _quadRenderer.RenderQuad(_graphicsDevice' Vector2.One * -1' Vector2.One);                                if (BloomDownsamplePasses > 4)                              {                                  BloomInverseResolution *= 2;                                    //DOWNSAMPLE TO MIP5                                  _graphicsDevice.SetRenderTarget(_bloomRenderTarget2DMip5);                                    BloomScreenTexture = _bloomRenderTarget2DMip4;                                  //Pass                                  _bloomPassDownsample.Apply();                                  _quadRenderer.RenderQuad(_graphicsDevice' Vector2.One * -1' Vector2.One);                                    ChangeBlendState();                                    //UPSAMPLE TO MIP4                                  _graphicsDevice.SetRenderTarget(_bloomRenderTarget2DMip4);                                  BloomScreenTexture = _bloomRenderTarget2DMip5;                                    BloomStrength = _bloomStrength5;                                  BloomRadius = _bloomRadius5;                                  if (BloomUseLuminance) _bloomPassUpsampleLuminance.Apply();                                  else _bloomPassUpsample.Apply();                                  _quadRenderer.RenderQuad(_graphicsDevice' Vector2.One * -1' Vector2.One);                                    BloomInverseResolution /= 2;                              }                                ChangeBlendState();                                //UPSAMPLE TO MIP3                              _graphicsDevice.SetRenderTarget(_bloomRenderTarget2DMip3);                              BloomScreenTexture = _bloomRenderTarget2DMip4;                                BloomStrength = _bloomStrength4;                              BloomRadius = _bloomRadius4;                              if (BloomUseLuminance) _bloomPassUpsampleLuminance.Apply();                              else _bloomPassUpsample.Apply();                              _quadRenderer.RenderQuad(_graphicsDevice' Vector2.One * -1' Vector2.One);                                BloomInverseResolution /= 2;                          }                            ChangeBlendState();                            //UPSAMPLE TO MIP2                          _graphicsDevice.SetRenderTarget(_bloomRenderTarget2DMip2);                          BloomScreenTexture = _bloomRenderTarget2DMip3;                            BloomStrength = _bloomStrength3;                          BloomRadius = _bloomRadius3;                          if (BloomUseLuminance) _bloomPassUpsampleLuminance.Apply();                          else _bloomPassUpsample.Apply();                          _quadRenderer.RenderQuad(_graphicsDevice' Vector2.One * -1' Vector2.One);                            BloomInverseResolution /= 2;                      }                        ChangeBlendState();                        //UPSAMPLE TO MIP1                      _graphicsDevice.SetRenderTarget(_bloomRenderTarget2DMip1);                      BloomScreenTexture = _bloomRenderTarget2DMip2;                        BloomStrength = _bloomStrength2;                      BloomRadius = _bloomRadius2;                      if (BloomUseLuminance) _bloomPassUpsampleLuminance.Apply();                      else _bloomPassUpsample.Apply();                      _quadRenderer.RenderQuad(_graphicsDevice' Vector2.One * -1' Vector2.One);                        BloomInverseResolution /= 2;                  }                    ChangeBlendState();                    //UPSAMPLE TO MIP0                  _graphicsDevice.SetRenderTarget(_bloomRenderTarget2DMip0);                  BloomScreenTexture = _bloomRenderTarget2DMip1;                    BloomStrength = _bloomStrength1;                  BloomRadius = _bloomRadius1;                    if (BloomUseLuminance) _bloomPassUpsampleLuminance.Apply();                  else _bloomPassUpsample.Apply();                  _quadRenderer.RenderQuad(_graphicsDevice' Vector2.One * -1' Vector2.One);              }
Magic Number,C3DE.Graphics.PostProcessing,Bloom,C:\repos\demonixis_C3DE\C3DE\Graphics\PostProcessing\Bloom.cs,Draw,The following statement contains a magic number: if (BloomDownsamplePasses > 0)              {                  //DOWNSAMPLE TO MIP1                  _graphicsDevice.SetRenderTarget(_bloomRenderTarget2DMip1);                    BloomScreenTexture = _bloomRenderTarget2DMip0;                  //Pass                  _bloomPassDownsample.Apply();                  _quadRenderer.RenderQuad(_graphicsDevice' Vector2.One * -1' Vector2.One);                    if (BloomDownsamplePasses > 1)                  {                      //Our input resolution is halfed' so our inverse 1/res. must be doubled                      BloomInverseResolution *= 2;                        //DOWNSAMPLE TO MIP2                      _graphicsDevice.SetRenderTarget(_bloomRenderTarget2DMip2);                        BloomScreenTexture = _bloomRenderTarget2DMip1;                      //Pass                      _bloomPassDownsample.Apply();                      _quadRenderer.RenderQuad(_graphicsDevice' Vector2.One * -1' Vector2.One);                        if (BloomDownsamplePasses > 2)                      {                          BloomInverseResolution *= 2;                            //DOWNSAMPLE TO MIP3                          _graphicsDevice.SetRenderTarget(_bloomRenderTarget2DMip3);                            BloomScreenTexture = _bloomRenderTarget2DMip2;                          //Pass                          _bloomPassDownsample.Apply();                          _quadRenderer.RenderQuad(_graphicsDevice' Vector2.One * -1' Vector2.One);                            if (BloomDownsamplePasses > 3)                          {                              BloomInverseResolution *= 2;                                //DOWNSAMPLE TO MIP4                              _graphicsDevice.SetRenderTarget(_bloomRenderTarget2DMip4);                                BloomScreenTexture = _bloomRenderTarget2DMip3;                              //Pass                              _bloomPassDownsample.Apply();                              _quadRenderer.RenderQuad(_graphicsDevice' Vector2.One * -1' Vector2.One);                                if (BloomDownsamplePasses > 4)                              {                                  BloomInverseResolution *= 2;                                    //DOWNSAMPLE TO MIP5                                  _graphicsDevice.SetRenderTarget(_bloomRenderTarget2DMip5);                                    BloomScreenTexture = _bloomRenderTarget2DMip4;                                  //Pass                                  _bloomPassDownsample.Apply();                                  _quadRenderer.RenderQuad(_graphicsDevice' Vector2.One * -1' Vector2.One);                                    ChangeBlendState();                                    //UPSAMPLE TO MIP4                                  _graphicsDevice.SetRenderTarget(_bloomRenderTarget2DMip4);                                  BloomScreenTexture = _bloomRenderTarget2DMip5;                                    BloomStrength = _bloomStrength5;                                  BloomRadius = _bloomRadius5;                                  if (BloomUseLuminance) _bloomPassUpsampleLuminance.Apply();                                  else _bloomPassUpsample.Apply();                                  _quadRenderer.RenderQuad(_graphicsDevice' Vector2.One * -1' Vector2.One);                                    BloomInverseResolution /= 2;                              }                                ChangeBlendState();                                //UPSAMPLE TO MIP3                              _graphicsDevice.SetRenderTarget(_bloomRenderTarget2DMip3);                              BloomScreenTexture = _bloomRenderTarget2DMip4;                                BloomStrength = _bloomStrength4;                              BloomRadius = _bloomRadius4;                              if (BloomUseLuminance) _bloomPassUpsampleLuminance.Apply();                              else _bloomPassUpsample.Apply();                              _quadRenderer.RenderQuad(_graphicsDevice' Vector2.One * -1' Vector2.One);                                BloomInverseResolution /= 2;                          }                            ChangeBlendState();                            //UPSAMPLE TO MIP2                          _graphicsDevice.SetRenderTarget(_bloomRenderTarget2DMip2);                          BloomScreenTexture = _bloomRenderTarget2DMip3;                            BloomStrength = _bloomStrength3;                          BloomRadius = _bloomRadius3;                          if (BloomUseLuminance) _bloomPassUpsampleLuminance.Apply();                          else _bloomPassUpsample.Apply();                          _quadRenderer.RenderQuad(_graphicsDevice' Vector2.One * -1' Vector2.One);                            BloomInverseResolution /= 2;                      }                        ChangeBlendState();                        //UPSAMPLE TO MIP1                      _graphicsDevice.SetRenderTarget(_bloomRenderTarget2DMip1);                      BloomScreenTexture = _bloomRenderTarget2DMip2;                        BloomStrength = _bloomStrength2;                      BloomRadius = _bloomRadius2;                      if (BloomUseLuminance) _bloomPassUpsampleLuminance.Apply();                      else _bloomPassUpsample.Apply();                      _quadRenderer.RenderQuad(_graphicsDevice' Vector2.One * -1' Vector2.One);                        BloomInverseResolution /= 2;                  }                    ChangeBlendState();                    //UPSAMPLE TO MIP0                  _graphicsDevice.SetRenderTarget(_bloomRenderTarget2DMip0);                  BloomScreenTexture = _bloomRenderTarget2DMip1;                    BloomStrength = _bloomStrength1;                  BloomRadius = _bloomRadius1;                    if (BloomUseLuminance) _bloomPassUpsampleLuminance.Apply();                  else _bloomPassUpsample.Apply();                  _quadRenderer.RenderQuad(_graphicsDevice' Vector2.One * -1' Vector2.One);              }
Magic Number,C3DE.Graphics.PostProcessing,Bloom,C:\repos\demonixis_C3DE\C3DE\Graphics\PostProcessing\Bloom.cs,Draw,The following statement contains a magic number: if (BloomDownsamplePasses > 0)              {                  //DOWNSAMPLE TO MIP1                  _graphicsDevice.SetRenderTarget(_bloomRenderTarget2DMip1);                    BloomScreenTexture = _bloomRenderTarget2DMip0;                  //Pass                  _bloomPassDownsample.Apply();                  _quadRenderer.RenderQuad(_graphicsDevice' Vector2.One * -1' Vector2.One);                    if (BloomDownsamplePasses > 1)                  {                      //Our input resolution is halfed' so our inverse 1/res. must be doubled                      BloomInverseResolution *= 2;                        //DOWNSAMPLE TO MIP2                      _graphicsDevice.SetRenderTarget(_bloomRenderTarget2DMip2);                        BloomScreenTexture = _bloomRenderTarget2DMip1;                      //Pass                      _bloomPassDownsample.Apply();                      _quadRenderer.RenderQuad(_graphicsDevice' Vector2.One * -1' Vector2.One);                        if (BloomDownsamplePasses > 2)                      {                          BloomInverseResolution *= 2;                            //DOWNSAMPLE TO MIP3                          _graphicsDevice.SetRenderTarget(_bloomRenderTarget2DMip3);                            BloomScreenTexture = _bloomRenderTarget2DMip2;                          //Pass                          _bloomPassDownsample.Apply();                          _quadRenderer.RenderQuad(_graphicsDevice' Vector2.One * -1' Vector2.One);                            if (BloomDownsamplePasses > 3)                          {                              BloomInverseResolution *= 2;                                //DOWNSAMPLE TO MIP4                              _graphicsDevice.SetRenderTarget(_bloomRenderTarget2DMip4);                                BloomScreenTexture = _bloomRenderTarget2DMip3;                              //Pass                              _bloomPassDownsample.Apply();                              _quadRenderer.RenderQuad(_graphicsDevice' Vector2.One * -1' Vector2.One);                                if (BloomDownsamplePasses > 4)                              {                                  BloomInverseResolution *= 2;                                    //DOWNSAMPLE TO MIP5                                  _graphicsDevice.SetRenderTarget(_bloomRenderTarget2DMip5);                                    BloomScreenTexture = _bloomRenderTarget2DMip4;                                  //Pass                                  _bloomPassDownsample.Apply();                                  _quadRenderer.RenderQuad(_graphicsDevice' Vector2.One * -1' Vector2.One);                                    ChangeBlendState();                                    //UPSAMPLE TO MIP4                                  _graphicsDevice.SetRenderTarget(_bloomRenderTarget2DMip4);                                  BloomScreenTexture = _bloomRenderTarget2DMip5;                                    BloomStrength = _bloomStrength5;                                  BloomRadius = _bloomRadius5;                                  if (BloomUseLuminance) _bloomPassUpsampleLuminance.Apply();                                  else _bloomPassUpsample.Apply();                                  _quadRenderer.RenderQuad(_graphicsDevice' Vector2.One * -1' Vector2.One);                                    BloomInverseResolution /= 2;                              }                                ChangeBlendState();                                //UPSAMPLE TO MIP3                              _graphicsDevice.SetRenderTarget(_bloomRenderTarget2DMip3);                              BloomScreenTexture = _bloomRenderTarget2DMip4;                                BloomStrength = _bloomStrength4;                              BloomRadius = _bloomRadius4;                              if (BloomUseLuminance) _bloomPassUpsampleLuminance.Apply();                              else _bloomPassUpsample.Apply();                              _quadRenderer.RenderQuad(_graphicsDevice' Vector2.One * -1' Vector2.One);                                BloomInverseResolution /= 2;                          }                            ChangeBlendState();                            //UPSAMPLE TO MIP2                          _graphicsDevice.SetRenderTarget(_bloomRenderTarget2DMip2);                          BloomScreenTexture = _bloomRenderTarget2DMip3;                            BloomStrength = _bloomStrength3;                          BloomRadius = _bloomRadius3;                          if (BloomUseLuminance) _bloomPassUpsampleLuminance.Apply();                          else _bloomPassUpsample.Apply();                          _quadRenderer.RenderQuad(_graphicsDevice' Vector2.One * -1' Vector2.One);                            BloomInverseResolution /= 2;                      }                        ChangeBlendState();                        //UPSAMPLE TO MIP1                      _graphicsDevice.SetRenderTarget(_bloomRenderTarget2DMip1);                      BloomScreenTexture = _bloomRenderTarget2DMip2;                        BloomStrength = _bloomStrength2;                      BloomRadius = _bloomRadius2;                      if (BloomUseLuminance) _bloomPassUpsampleLuminance.Apply();                      else _bloomPassUpsample.Apply();                      _quadRenderer.RenderQuad(_graphicsDevice' Vector2.One * -1' Vector2.One);                        BloomInverseResolution /= 2;                  }                    ChangeBlendState();                    //UPSAMPLE TO MIP0                  _graphicsDevice.SetRenderTarget(_bloomRenderTarget2DMip0);                  BloomScreenTexture = _bloomRenderTarget2DMip1;                    BloomStrength = _bloomStrength1;                  BloomRadius = _bloomRadius1;                    if (BloomUseLuminance) _bloomPassUpsampleLuminance.Apply();                  else _bloomPassUpsample.Apply();                  _quadRenderer.RenderQuad(_graphicsDevice' Vector2.One * -1' Vector2.One);              }
Magic Number,C3DE.Graphics.PostProcessing,Bloom,C:\repos\demonixis_C3DE\C3DE\Graphics\PostProcessing\Bloom.cs,Draw,The following statement contains a magic number: if (BloomDownsamplePasses > 0)              {                  //DOWNSAMPLE TO MIP1                  _graphicsDevice.SetRenderTarget(_bloomRenderTarget2DMip1);                    BloomScreenTexture = _bloomRenderTarget2DMip0;                  //Pass                  _bloomPassDownsample.Apply();                  _quadRenderer.RenderQuad(_graphicsDevice' Vector2.One * -1' Vector2.One);                    if (BloomDownsamplePasses > 1)                  {                      //Our input resolution is halfed' so our inverse 1/res. must be doubled                      BloomInverseResolution *= 2;                        //DOWNSAMPLE TO MIP2                      _graphicsDevice.SetRenderTarget(_bloomRenderTarget2DMip2);                        BloomScreenTexture = _bloomRenderTarget2DMip1;                      //Pass                      _bloomPassDownsample.Apply();                      _quadRenderer.RenderQuad(_graphicsDevice' Vector2.One * -1' Vector2.One);                        if (BloomDownsamplePasses > 2)                      {                          BloomInverseResolution *= 2;                            //DOWNSAMPLE TO MIP3                          _graphicsDevice.SetRenderTarget(_bloomRenderTarget2DMip3);                            BloomScreenTexture = _bloomRenderTarget2DMip2;                          //Pass                          _bloomPassDownsample.Apply();                          _quadRenderer.RenderQuad(_graphicsDevice' Vector2.One * -1' Vector2.One);                            if (BloomDownsamplePasses > 3)                          {                              BloomInverseResolution *= 2;                                //DOWNSAMPLE TO MIP4                              _graphicsDevice.SetRenderTarget(_bloomRenderTarget2DMip4);                                BloomScreenTexture = _bloomRenderTarget2DMip3;                              //Pass                              _bloomPassDownsample.Apply();                              _quadRenderer.RenderQuad(_graphicsDevice' Vector2.One * -1' Vector2.One);                                if (BloomDownsamplePasses > 4)                              {                                  BloomInverseResolution *= 2;                                    //DOWNSAMPLE TO MIP5                                  _graphicsDevice.SetRenderTarget(_bloomRenderTarget2DMip5);                                    BloomScreenTexture = _bloomRenderTarget2DMip4;                                  //Pass                                  _bloomPassDownsample.Apply();                                  _quadRenderer.RenderQuad(_graphicsDevice' Vector2.One * -1' Vector2.One);                                    ChangeBlendState();                                    //UPSAMPLE TO MIP4                                  _graphicsDevice.SetRenderTarget(_bloomRenderTarget2DMip4);                                  BloomScreenTexture = _bloomRenderTarget2DMip5;                                    BloomStrength = _bloomStrength5;                                  BloomRadius = _bloomRadius5;                                  if (BloomUseLuminance) _bloomPassUpsampleLuminance.Apply();                                  else _bloomPassUpsample.Apply();                                  _quadRenderer.RenderQuad(_graphicsDevice' Vector2.One * -1' Vector2.One);                                    BloomInverseResolution /= 2;                              }                                ChangeBlendState();                                //UPSAMPLE TO MIP3                              _graphicsDevice.SetRenderTarget(_bloomRenderTarget2DMip3);                              BloomScreenTexture = _bloomRenderTarget2DMip4;                                BloomStrength = _bloomStrength4;                              BloomRadius = _bloomRadius4;                              if (BloomUseLuminance) _bloomPassUpsampleLuminance.Apply();                              else _bloomPassUpsample.Apply();                              _quadRenderer.RenderQuad(_graphicsDevice' Vector2.One * -1' Vector2.One);                                BloomInverseResolution /= 2;                          }                            ChangeBlendState();                            //UPSAMPLE TO MIP2                          _graphicsDevice.SetRenderTarget(_bloomRenderTarget2DMip2);                          BloomScreenTexture = _bloomRenderTarget2DMip3;                            BloomStrength = _bloomStrength3;                          BloomRadius = _bloomRadius3;                          if (BloomUseLuminance) _bloomPassUpsampleLuminance.Apply();                          else _bloomPassUpsample.Apply();                          _quadRenderer.RenderQuad(_graphicsDevice' Vector2.One * -1' Vector2.One);                            BloomInverseResolution /= 2;                      }                        ChangeBlendState();                        //UPSAMPLE TO MIP1                      _graphicsDevice.SetRenderTarget(_bloomRenderTarget2DMip1);                      BloomScreenTexture = _bloomRenderTarget2DMip2;                        BloomStrength = _bloomStrength2;                      BloomRadius = _bloomRadius2;                      if (BloomUseLuminance) _bloomPassUpsampleLuminance.Apply();                      else _bloomPassUpsample.Apply();                      _quadRenderer.RenderQuad(_graphicsDevice' Vector2.One * -1' Vector2.One);                        BloomInverseResolution /= 2;                  }                    ChangeBlendState();                    //UPSAMPLE TO MIP0                  _graphicsDevice.SetRenderTarget(_bloomRenderTarget2DMip0);                  BloomScreenTexture = _bloomRenderTarget2DMip1;                    BloomStrength = _bloomStrength1;                  BloomRadius = _bloomRadius1;                    if (BloomUseLuminance) _bloomPassUpsampleLuminance.Apply();                  else _bloomPassUpsample.Apply();                  _quadRenderer.RenderQuad(_graphicsDevice' Vector2.One * -1' Vector2.One);              }
Magic Number,C3DE.Graphics.PostProcessing,ColorGrading,C:\repos\demonixis_C3DE\C3DE\Graphics\PostProcessing\ColorGrading.cs,CreateLUT,The following statement contains a magic number: Size = lutsize == LUTSizes.Size16 ? 16 : lutsize == LUTSizes.Size32 ? 32 : lutsize == LUTSizes.Size64 ? 64 : 4;
Magic Number,C3DE.Graphics.PostProcessing,ColorGrading,C:\repos\demonixis_C3DE\C3DE\Graphics\PostProcessing\ColorGrading.cs,CreateLUT,The following statement contains a magic number: Size = lutsize == LUTSizes.Size16 ? 16 : lutsize == LUTSizes.Size32 ? 32 : lutsize == LUTSizes.Size64 ? 64 : 4;
Magic Number,C3DE.Graphics.PostProcessing,ColorGrading,C:\repos\demonixis_C3DE\C3DE\Graphics\PostProcessing\ColorGrading.cs,CreateLUT,The following statement contains a magic number: Size = lutsize == LUTSizes.Size16 ? 16 : lutsize == LUTSizes.Size32 ? 32 : lutsize == LUTSizes.Size64 ? 64 : 4;
Magic Number,C3DE.Graphics.PostProcessing,ColorGrading,C:\repos\demonixis_C3DE\C3DE\Graphics\PostProcessing\ColorGrading.cs,CreateLUT,The following statement contains a magic number: Size = lutsize == LUTSizes.Size16 ? 16 : lutsize == LUTSizes.Size32 ? 32 : lutsize == LUTSizes.Size64 ? 64 : 4;
Magic Number,C3DE.Graphics.PostProcessing,ColorGrading,C:\repos\demonixis_C3DE\C3DE\Graphics\PostProcessing\ColorGrading.cs,CreateLUT,The following statement contains a magic number: int size = lutsize == LUTSizes.Size16 ? 16 * 4 : lutsize == LUTSizes.Size32 ? 32 * 8 : lutsize == LUTSizes.Size64 ? 64 * 8 : 4 * 2;
Magic Number,C3DE.Graphics.PostProcessing,ColorGrading,C:\repos\demonixis_C3DE\C3DE\Graphics\PostProcessing\ColorGrading.cs,CreateLUT,The following statement contains a magic number: int size = lutsize == LUTSizes.Size16 ? 16 * 4 : lutsize == LUTSizes.Size32 ? 32 * 8 : lutsize == LUTSizes.Size64 ? 64 * 8 : 4 * 2;
Magic Number,C3DE.Graphics.PostProcessing,ColorGrading,C:\repos\demonixis_C3DE\C3DE\Graphics\PostProcessing\ColorGrading.cs,CreateLUT,The following statement contains a magic number: int size = lutsize == LUTSizes.Size16 ? 16 * 4 : lutsize == LUTSizes.Size32 ? 32 * 8 : lutsize == LUTSizes.Size64 ? 64 * 8 : 4 * 2;
Magic Number,C3DE.Graphics.PostProcessing,ColorGrading,C:\repos\demonixis_C3DE\C3DE\Graphics\PostProcessing\ColorGrading.cs,CreateLUT,The following statement contains a magic number: int size = lutsize == LUTSizes.Size16 ? 16 * 4 : lutsize == LUTSizes.Size32 ? 32 * 8 : lutsize == LUTSizes.Size64 ? 64 * 8 : 4 * 2;
Magic Number,C3DE.Graphics.PostProcessing,ColorGrading,C:\repos\demonixis_C3DE\C3DE\Graphics\PostProcessing\ColorGrading.cs,CreateLUT,The following statement contains a magic number: int size = lutsize == LUTSizes.Size16 ? 16 * 4 : lutsize == LUTSizes.Size32 ? 32 * 8 : lutsize == LUTSizes.Size64 ? 64 * 8 : 4 * 2;
Magic Number,C3DE.Graphics.PostProcessing,ColorGrading,C:\repos\demonixis_C3DE\C3DE\Graphics\PostProcessing\ColorGrading.cs,CreateLUT,The following statement contains a magic number: int size = lutsize == LUTSizes.Size16 ? 16 * 4 : lutsize == LUTSizes.Size32 ? 32 * 8 : lutsize == LUTSizes.Size64 ? 64 * 8 : 4 * 2;
Magic Number,C3DE.Graphics.PostProcessing,ColorGrading,C:\repos\demonixis_C3DE\C3DE\Graphics\PostProcessing\ColorGrading.cs,CreateLUT,The following statement contains a magic number: int size = lutsize == LUTSizes.Size16 ? 16 * 4 : lutsize == LUTSizes.Size32 ? 32 * 8 : lutsize == LUTSizes.Size64 ? 64 * 8 : 4 * 2;
Magic Number,C3DE.Graphics.PostProcessing,ColorGrading,C:\repos\demonixis_C3DE\C3DE\Graphics\PostProcessing\ColorGrading.cs,CreateLUT,The following statement contains a magic number: int size = lutsize == LUTSizes.Size16 ? 16 * 4 : lutsize == LUTSizes.Size32 ? 32 * 8 : lutsize == LUTSizes.Size64 ? 64 * 8 : 4 * 2;
Magic Number,C3DE.Graphics.PostProcessing,ColorGrading,C:\repos\demonixis_C3DE\C3DE\Graphics\PostProcessing\ColorGrading.cs,CreateLUT,The following statement contains a magic number: _renderTarget = new RenderTarget2D(graphics' size' size / (lutsize == LUTSizes.Size32 ? 2 : 1)' false' SurfaceFormat.Color' DepthFormat.None);
Magic Number,C3DE.Graphics.PostProcessing,ColorGrading,C:\repos\demonixis_C3DE\C3DE\Graphics\PostProcessing\ColorGrading.cs,Draw,The following statement contains a magic number: Size = ((renderTarget.Width == 512) ? 64 : (renderTarget.Width == 256) ? 32 : (renderTarget.Width == 64) ? 16 : 4);
Magic Number,C3DE.Graphics.PostProcessing,ColorGrading,C:\repos\demonixis_C3DE\C3DE\Graphics\PostProcessing\ColorGrading.cs,Draw,The following statement contains a magic number: Size = ((renderTarget.Width == 512) ? 64 : (renderTarget.Width == 256) ? 32 : (renderTarget.Width == 64) ? 16 : 4);
Magic Number,C3DE.Graphics.PostProcessing,ColorGrading,C:\repos\demonixis_C3DE\C3DE\Graphics\PostProcessing\ColorGrading.cs,Draw,The following statement contains a magic number: Size = ((renderTarget.Width == 512) ? 64 : (renderTarget.Width == 256) ? 32 : (renderTarget.Width == 64) ? 16 : 4);
Magic Number,C3DE.Graphics.PostProcessing,ColorGrading,C:\repos\demonixis_C3DE\C3DE\Graphics\PostProcessing\ColorGrading.cs,Draw,The following statement contains a magic number: Size = ((renderTarget.Width == 512) ? 64 : (renderTarget.Width == 256) ? 32 : (renderTarget.Width == 64) ? 16 : 4);
Magic Number,C3DE.Graphics.PostProcessing,ColorGrading,C:\repos\demonixis_C3DE\C3DE\Graphics\PostProcessing\ColorGrading.cs,Draw,The following statement contains a magic number: Size = ((renderTarget.Width == 512) ? 64 : (renderTarget.Width == 256) ? 32 : (renderTarget.Width == 64) ? 16 : 4);
Magic Number,C3DE.Graphics.PostProcessing,ColorGrading,C:\repos\demonixis_C3DE\C3DE\Graphics\PostProcessing\ColorGrading.cs,Draw,The following statement contains a magic number: Size = ((renderTarget.Width == 512) ? 64 : (renderTarget.Width == 256) ? 32 : (renderTarget.Width == 64) ? 16 : 4);
Magic Number,C3DE.Graphics.PostProcessing,ColorGrading,C:\repos\demonixis_C3DE\C3DE\Graphics\PostProcessing\ColorGrading.cs,Draw,The following statement contains a magic number: Size = ((renderTarget.Width == 512) ? 64 : (renderTarget.Width == 256) ? 32 : (renderTarget.Width == 64) ? 16 : 4);
Magic Number,C3DE.Graphics.PostProcessing,FullScreenQuadRenderer,C:\repos\demonixis_C3DE\C3DE\Graphics\PostProcessing\FullScreenQuadRenderer.cs,FullScreenQuadRenderer,The following statement contains a magic number: FullScreenQuadVertex[] vertexBufferTemp = new FullScreenQuadVertex[4];
Magic Number,C3DE.Graphics.PostProcessing,FullScreenQuadRenderer,C:\repos\demonixis_C3DE\C3DE\Graphics\PostProcessing\FullScreenQuadRenderer.cs,FullScreenQuadRenderer,The following statement contains a magic number: vertexBufferTemp[2] = new FullScreenQuadVertex(new Vector2(-1' -1) );
Magic Number,C3DE.Graphics.PostProcessing,FullScreenQuadRenderer,C:\repos\demonixis_C3DE\C3DE\Graphics\PostProcessing\FullScreenQuadRenderer.cs,FullScreenQuadRenderer,The following statement contains a magic number: vertexBufferTemp[3] = new FullScreenQuadVertex(new Vector2(1' -1));
Magic Number,C3DE.Graphics.PostProcessing,FullScreenQuadRenderer,C:\repos\demonixis_C3DE\C3DE\Graphics\PostProcessing\FullScreenQuadRenderer.cs,FullScreenQuadRenderer,The following statement contains a magic number: short[] indexBufferTemp = new short[] { 0' 3' 2' 0' 1' 3 };
Magic Number,C3DE.Graphics.PostProcessing,FullScreenQuadRenderer,C:\repos\demonixis_C3DE\C3DE\Graphics\PostProcessing\FullScreenQuadRenderer.cs,FullScreenQuadRenderer,The following statement contains a magic number: short[] indexBufferTemp = new short[] { 0' 3' 2' 0' 1' 3 };
Magic Number,C3DE.Graphics.PostProcessing,FullScreenQuadRenderer,C:\repos\demonixis_C3DE\C3DE\Graphics\PostProcessing\FullScreenQuadRenderer.cs,FullScreenQuadRenderer,The following statement contains a magic number: short[] indexBufferTemp = new short[] { 0' 3' 2' 0' 1' 3 };
Magic Number,C3DE.Graphics.PostProcessing,FullScreenQuadRenderer,C:\repos\demonixis_C3DE\C3DE\Graphics\PostProcessing\FullScreenQuadRenderer.cs,FullScreenQuadRenderer,The following statement contains a magic number: _vertexBuffer = new VertexBuffer(graphics' FullScreenQuadVertex.VertexDeclaration' 4' BufferUsage.WriteOnly);
Magic Number,C3DE.Graphics.PostProcessing,FullScreenQuadRenderer,C:\repos\demonixis_C3DE\C3DE\Graphics\PostProcessing\FullScreenQuadRenderer.cs,FullScreenQuadRenderer,The following statement contains a magic number: _indexBuffer = new IndexBuffer(graphics' IndexElementSize.SixteenBits' 6' BufferUsage.WriteOnly);
Magic Number,C3DE.Graphics.PostProcessing,FullScreenQuadRenderer,C:\repos\demonixis_C3DE\C3DE\Graphics\PostProcessing\FullScreenQuadRenderer.cs,RenderFullscreenQuad,The following statement contains a magic number: graphicsDevice.DrawIndexedPrimitives                  (PrimitiveType.TriangleList' 0'0'4);
Magic Number,C3DE.Graphics.PostProcessing,QuadRenderer,C:\repos\demonixis_C3DE\C3DE\Graphics\PostProcessing\QuadRenderer.cs,QuadRenderer,The following statement contains a magic number: _vertexBuffer = new VertexPositionTexture[4];
Magic Number,C3DE.Graphics.PostProcessing,QuadRenderer,C:\repos\demonixis_C3DE\C3DE\Graphics\PostProcessing\QuadRenderer.cs,QuadRenderer,The following statement contains a magic number: _vertexBuffer[2] = new VertexPositionTexture(new Vector3(-1' -1' 1)' new Vector2(0' 1));
Magic Number,C3DE.Graphics.PostProcessing,QuadRenderer,C:\repos\demonixis_C3DE\C3DE\Graphics\PostProcessing\QuadRenderer.cs,QuadRenderer,The following statement contains a magic number: _vertexBuffer[3] = new VertexPositionTexture(new Vector3(1' -1' 1)' new Vector2(1' 1));
Magic Number,C3DE.Graphics.PostProcessing,QuadRenderer,C:\repos\demonixis_C3DE\C3DE\Graphics\PostProcessing\QuadRenderer.cs,QuadRenderer,The following statement contains a magic number: _indexBuffer = new short[] { 0' 3' 2' 0' 1' 3 };
Magic Number,C3DE.Graphics.PostProcessing,QuadRenderer,C:\repos\demonixis_C3DE\C3DE\Graphics\PostProcessing\QuadRenderer.cs,QuadRenderer,The following statement contains a magic number: _indexBuffer = new short[] { 0' 3' 2' 0' 1' 3 };
Magic Number,C3DE.Graphics.PostProcessing,QuadRenderer,C:\repos\demonixis_C3DE\C3DE\Graphics\PostProcessing\QuadRenderer.cs,QuadRenderer,The following statement contains a magic number: _indexBuffer = new short[] { 0' 3' 2' 0' 1' 3 };
Magic Number,C3DE.Graphics.PostProcessing,QuadRenderer,C:\repos\demonixis_C3DE\C3DE\Graphics\PostProcessing\QuadRenderer.cs,RenderQuad,The following statement contains a magic number: _vertexBuffer[2].Position.X = v1.X;
Magic Number,C3DE.Graphics.PostProcessing,QuadRenderer,C:\repos\demonixis_C3DE\C3DE\Graphics\PostProcessing\QuadRenderer.cs,RenderQuad,The following statement contains a magic number: _vertexBuffer[2].Position.Y = v1.Y;
Magic Number,C3DE.Graphics.PostProcessing,QuadRenderer,C:\repos\demonixis_C3DE\C3DE\Graphics\PostProcessing\QuadRenderer.cs,RenderQuad,The following statement contains a magic number: _vertexBuffer[3].Position.X = v2.X;
Magic Number,C3DE.Graphics.PostProcessing,QuadRenderer,C:\repos\demonixis_C3DE\C3DE\Graphics\PostProcessing\QuadRenderer.cs,RenderQuad,The following statement contains a magic number: _vertexBuffer[3].Position.Y = v1.Y;
Magic Number,C3DE.Graphics.PostProcessing,QuadRenderer,C:\repos\demonixis_C3DE\C3DE\Graphics\PostProcessing\QuadRenderer.cs,RenderQuad,The following statement contains a magic number: graphicsDevice.DrawUserIndexedPrimitives(PrimitiveType.TriangleList' _vertexBuffer' 0' 4' _indexBuffer' 0' 2);
Magic Number,C3DE.Graphics.PostProcessing,QuadRenderer,C:\repos\demonixis_C3DE\C3DE\Graphics\PostProcessing\QuadRenderer.cs,RenderQuad,The following statement contains a magic number: graphicsDevice.DrawUserIndexedPrimitives(PrimitiveType.TriangleList' _vertexBuffer' 0' 4' _indexBuffer' 0' 2);
Magic Number,C3DE.Graphics.PostProcessing,PostProcessManager,C:\repos\demonixis_C3DE\C3DE\Graphics\PostProcessing\PostProcessManager.cs,PostProcessManager,The following statement contains a magic number: _postProcesses = new List<PostProcessPass>(2);
Magic Number,C3DE.Graphics.PostProcessing,BloomLegacy,C:\repos\demonixis_C3DE\C3DE\Graphics\PostProcessing\BloomLegacy.cs,Initialize,The following statement contains a magic number: width /= 2;
Magic Number,C3DE.Graphics.PostProcessing,BloomLegacy,C:\repos\demonixis_C3DE\C3DE\Graphics\PostProcessing\BloomLegacy.cs,Initialize,The following statement contains a magic number: height /= 2;
Magic Number,C3DE.Graphics.PostProcessing,BloomLegacy,C:\repos\demonixis_C3DE\C3DE\Graphics\PostProcessing\BloomLegacy.cs,SetBlurEffectParameters,The following statement contains a magic number: for (int i = 0; i < sampleCount / 2; i++)              {                  float weight = ComputeGaussian(i + 1);                    sampleWeights[i * 2 + 1] = weight;                  sampleWeights[i * 2 + 2] = weight;                    totalWeights += weight * 2;                    float sampleOffset = i * 2 + 1.5f;                    Vector2 delta = new Vector2(dx' dy) * sampleOffset;                    // Store texture coordinate offsets for the positive and negative taps.                  sampleOffsets[i * 2 + 1] = delta;                  sampleOffsets[i * 2 + 2] = -delta;              }
Magic Number,C3DE.Graphics.PostProcessing,BloomLegacy,C:\repos\demonixis_C3DE\C3DE\Graphics\PostProcessing\BloomLegacy.cs,SetBlurEffectParameters,The following statement contains a magic number: for (int i = 0; i < sampleCount / 2; i++)              {                  float weight = ComputeGaussian(i + 1);                    sampleWeights[i * 2 + 1] = weight;                  sampleWeights[i * 2 + 2] = weight;                    totalWeights += weight * 2;                    float sampleOffset = i * 2 + 1.5f;                    Vector2 delta = new Vector2(dx' dy) * sampleOffset;                    // Store texture coordinate offsets for the positive and negative taps.                  sampleOffsets[i * 2 + 1] = delta;                  sampleOffsets[i * 2 + 2] = -delta;              }
Magic Number,C3DE.Graphics.PostProcessing,BloomLegacy,C:\repos\demonixis_C3DE\C3DE\Graphics\PostProcessing\BloomLegacy.cs,SetBlurEffectParameters,The following statement contains a magic number: for (int i = 0; i < sampleCount / 2; i++)              {                  float weight = ComputeGaussian(i + 1);                    sampleWeights[i * 2 + 1] = weight;                  sampleWeights[i * 2 + 2] = weight;                    totalWeights += weight * 2;                    float sampleOffset = i * 2 + 1.5f;                    Vector2 delta = new Vector2(dx' dy) * sampleOffset;                    // Store texture coordinate offsets for the positive and negative taps.                  sampleOffsets[i * 2 + 1] = delta;                  sampleOffsets[i * 2 + 2] = -delta;              }
Magic Number,C3DE.Graphics.PostProcessing,BloomLegacy,C:\repos\demonixis_C3DE\C3DE\Graphics\PostProcessing\BloomLegacy.cs,SetBlurEffectParameters,The following statement contains a magic number: for (int i = 0; i < sampleCount / 2; i++)              {                  float weight = ComputeGaussian(i + 1);                    sampleWeights[i * 2 + 1] = weight;                  sampleWeights[i * 2 + 2] = weight;                    totalWeights += weight * 2;                    float sampleOffset = i * 2 + 1.5f;                    Vector2 delta = new Vector2(dx' dy) * sampleOffset;                    // Store texture coordinate offsets for the positive and negative taps.                  sampleOffsets[i * 2 + 1] = delta;                  sampleOffsets[i * 2 + 2] = -delta;              }
Magic Number,C3DE.Graphics.PostProcessing,BloomLegacy,C:\repos\demonixis_C3DE\C3DE\Graphics\PostProcessing\BloomLegacy.cs,SetBlurEffectParameters,The following statement contains a magic number: for (int i = 0; i < sampleCount / 2; i++)              {                  float weight = ComputeGaussian(i + 1);                    sampleWeights[i * 2 + 1] = weight;                  sampleWeights[i * 2 + 2] = weight;                    totalWeights += weight * 2;                    float sampleOffset = i * 2 + 1.5f;                    Vector2 delta = new Vector2(dx' dy) * sampleOffset;                    // Store texture coordinate offsets for the positive and negative taps.                  sampleOffsets[i * 2 + 1] = delta;                  sampleOffsets[i * 2 + 2] = -delta;              }
Magic Number,C3DE.Graphics.PostProcessing,BloomLegacy,C:\repos\demonixis_C3DE\C3DE\Graphics\PostProcessing\BloomLegacy.cs,SetBlurEffectParameters,The following statement contains a magic number: for (int i = 0; i < sampleCount / 2; i++)              {                  float weight = ComputeGaussian(i + 1);                    sampleWeights[i * 2 + 1] = weight;                  sampleWeights[i * 2 + 2] = weight;                    totalWeights += weight * 2;                    float sampleOffset = i * 2 + 1.5f;                    Vector2 delta = new Vector2(dx' dy) * sampleOffset;                    // Store texture coordinate offsets for the positive and negative taps.                  sampleOffsets[i * 2 + 1] = delta;                  sampleOffsets[i * 2 + 2] = -delta;              }
Magic Number,C3DE.Graphics.PostProcessing,BloomLegacy,C:\repos\demonixis_C3DE\C3DE\Graphics\PostProcessing\BloomLegacy.cs,SetBlurEffectParameters,The following statement contains a magic number: for (int i = 0; i < sampleCount / 2; i++)              {                  float weight = ComputeGaussian(i + 1);                    sampleWeights[i * 2 + 1] = weight;                  sampleWeights[i * 2 + 2] = weight;                    totalWeights += weight * 2;                    float sampleOffset = i * 2 + 1.5f;                    Vector2 delta = new Vector2(dx' dy) * sampleOffset;                    // Store texture coordinate offsets for the positive and negative taps.                  sampleOffsets[i * 2 + 1] = delta;                  sampleOffsets[i * 2 + 2] = -delta;              }
Magic Number,C3DE.Graphics.PostProcessing,BloomLegacy,C:\repos\demonixis_C3DE\C3DE\Graphics\PostProcessing\BloomLegacy.cs,SetBlurEffectParameters,The following statement contains a magic number: for (int i = 0; i < sampleCount / 2; i++)              {                  float weight = ComputeGaussian(i + 1);                    sampleWeights[i * 2 + 1] = weight;                  sampleWeights[i * 2 + 2] = weight;                    totalWeights += weight * 2;                    float sampleOffset = i * 2 + 1.5f;                    Vector2 delta = new Vector2(dx' dy) * sampleOffset;                    // Store texture coordinate offsets for the positive and negative taps.                  sampleOffsets[i * 2 + 1] = delta;                  sampleOffsets[i * 2 + 2] = -delta;              }
Magic Number,C3DE.Graphics.PostProcessing,BloomLegacy,C:\repos\demonixis_C3DE\C3DE\Graphics\PostProcessing\BloomLegacy.cs,SetBlurEffectParameters,The following statement contains a magic number: for (int i = 0; i < sampleCount / 2; i++)              {                  float weight = ComputeGaussian(i + 1);                    sampleWeights[i * 2 + 1] = weight;                  sampleWeights[i * 2 + 2] = weight;                    totalWeights += weight * 2;                    float sampleOffset = i * 2 + 1.5f;                    Vector2 delta = new Vector2(dx' dy) * sampleOffset;                    // Store texture coordinate offsets for the positive and negative taps.                  sampleOffsets[i * 2 + 1] = delta;                  sampleOffsets[i * 2 + 2] = -delta;              }
Magic Number,C3DE.Graphics.PostProcessing,BloomLegacy,C:\repos\demonixis_C3DE\C3DE\Graphics\PostProcessing\BloomLegacy.cs,ComputeGaussian,The following statement contains a magic number: return (float)((1.0 / Math.Sqrt(2 * Math.PI * theta)) * Math.Exp(-(n * n) / (2 * theta * theta)));
Magic Number,C3DE.Graphics.PostProcessing,BloomLegacy,C:\repos\demonixis_C3DE\C3DE\Graphics\PostProcessing\BloomLegacy.cs,ComputeGaussian,The following statement contains a magic number: return (float)((1.0 / Math.Sqrt(2 * Math.PI * theta)) * Math.Exp(-(n * n) / (2 * theta * theta)));
Magic Number,C3DE.Graphics.PostProcessing,C64Filter,C:\repos\demonixis_C3DE\C3DE\Graphics\PostProcessing\C64Filter.cs,SetPalette,The following statement contains a magic number: if (palette.Length != 16)                  throw new Exception("The palette must contains 16 colors");
Magic Number,C3DE.Graphics.PostProcessing,C64Filter,C:\repos\demonixis_C3DE\C3DE\Graphics\PostProcessing\C64Filter.cs,SetPalette,The following statement contains a magic number: m_Palette = new Vector3[16];
Magic Number,C3DE.Graphics.PostProcessing,C64Filter,C:\repos\demonixis_C3DE\C3DE\Graphics\PostProcessing\C64Filter.cs,SetPalette,The following statement contains a magic number: for (int i = 0; i < 16; i++)                  m_Palette[i] = new Vector3(palette[i][0]' palette[i][1]' palette[i][2]);
Magic Number,C3DE.Graphics.PostProcessing,C64Filter,C:\repos\demonixis_C3DE\C3DE\Graphics\PostProcessing\C64Filter.cs,SetPalette,The following statement contains a magic number: for (int i = 0; i < 16; i++)                  m_Palette[i] = new Vector3(palette[i][0]' palette[i][1]' palette[i][2]);
Magic Number,C3DE.Graphics.PostProcessing,CGAFilter,C:\repos\demonixis_C3DE\C3DE\Graphics\PostProcessing\CGAFilter.cs,SetPalette,The following statement contains a magic number: if (palette.Length != 4)                  throw new Exception("The palette must contains four colors");
Magic Number,C3DE.Graphics.PostProcessing,CGAFilter,C:\repos\demonixis_C3DE\C3DE\Graphics\PostProcessing\CGAFilter.cs,SetPalette,The following statement contains a magic number: m_Palette = new Vector3[4];
Magic Number,C3DE.Graphics.PostProcessing,CGAFilter,C:\repos\demonixis_C3DE\C3DE\Graphics\PostProcessing\CGAFilter.cs,SetPalette,The following statement contains a magic number: for (int i = 0; i < 4; i++)                  m_Palette[i] = new Vector3(palette[i][0]' palette[i][1]' palette[i][2]);
Magic Number,C3DE.Graphics.PostProcessing,CGAFilter,C:\repos\demonixis_C3DE\C3DE\Graphics\PostProcessing\CGAFilter.cs,SetPalette,The following statement contains a magic number: for (int i = 0; i < 4; i++)                  m_Palette[i] = new Vector3(palette[i][0]' palette[i][1]' palette[i][2]);
Magic Number,Microsoft.Xna.Framework,QuaternionExtensions,C:\repos\demonixis_C3DE\C3DE\Extensions\QuaternionExtensions.cs,ToEuler,The following statement contains a magic number: result.Y = (float)Math.Atan2(2.0 * (y * w - x * z)' 1.0 - 2.0 * (sqy + sqz));
Magic Number,Microsoft.Xna.Framework,QuaternionExtensions,C:\repos\demonixis_C3DE\C3DE\Extensions\QuaternionExtensions.cs,ToEuler,The following statement contains a magic number: result.Y = (float)Math.Atan2(2.0 * (y * w - x * z)' 1.0 - 2.0 * (sqy + sqz));
Magic Number,Microsoft.Xna.Framework,QuaternionExtensions,C:\repos\demonixis_C3DE\C3DE\Extensions\QuaternionExtensions.cs,ToEuler,The following statement contains a magic number: result.X = (float)Math.Asin(2.0 * (x * y + z * w));
Magic Number,Microsoft.Xna.Framework,QuaternionExtensions,C:\repos\demonixis_C3DE\C3DE\Extensions\QuaternionExtensions.cs,ToEuler,The following statement contains a magic number: result.Z = (float)Math.Atan2(2.0 * (x * w - y * z)' 1.0 - 2.0 * (sqx + sqz));
Magic Number,Microsoft.Xna.Framework,QuaternionExtensions,C:\repos\demonixis_C3DE\C3DE\Extensions\QuaternionExtensions.cs,ToEuler,The following statement contains a magic number: result.Z = (float)Math.Atan2(2.0 * (x * w - y * z)' 1.0 - 2.0 * (sqx + sqz));
Magic Number,Microsoft.Xna.Framework,QuaternionExtensions,C:\repos\demonixis_C3DE\C3DE\Extensions\QuaternionExtensions.cs,ToEuler,The following statement contains a magic number: if (gimbaLockTest > 0.499f)              {                  result.Y = (float)(2.0 * Math.Atan2(x' w));                  result.Z = 0.0f;              }              else if (gimbaLockTest < -0.499f)               {                  result.Y = (float)(-2.0 * Math.Atan2(x' w));                  result.Z = 0.0f;              }
Magic Number,Microsoft.Xna.Framework,QuaternionExtensions,C:\repos\demonixis_C3DE\C3DE\Extensions\QuaternionExtensions.cs,ToEuler,The following statement contains a magic number: if (gimbaLockTest > 0.499f)              {                  result.Y = (float)(2.0 * Math.Atan2(x' w));                  result.Z = 0.0f;              }              else if (gimbaLockTest < -0.499f)               {                  result.Y = (float)(-2.0 * Math.Atan2(x' w));                  result.Z = 0.0f;              }
Magic Number,C3DE.Graphics.Primitives,CubeMesh,C:\repos\demonixis_C3DE\C3DE\Graphics\Primitives\CubeMesh.cs,CreateGeometry,The following statement contains a magic number: Indices = new ushort[] {                   0' 1' 2' 2' 1' 3'                     4' 5' 6' 6' 5' 7'                  8' 9' 10' 10' 9' 11'                   12' 13' 14' 14' 13' 15'                   16' 17' 18' 18' 17' 19'                  20' 21' 22' 22' 21' 23              };
Magic Number,C3DE.Graphics.Primitives,CubeMesh,C:\repos\demonixis_C3DE\C3DE\Graphics\Primitives\CubeMesh.cs,CreateGeometry,The following statement contains a magic number: Indices = new ushort[] {                   0' 1' 2' 2' 1' 3'                     4' 5' 6' 6' 5' 7'                  8' 9' 10' 10' 9' 11'                   12' 13' 14' 14' 13' 15'                   16' 17' 18' 18' 17' 19'                  20' 21' 22' 22' 21' 23              };
Magic Number,C3DE.Graphics.Primitives,CubeMesh,C:\repos\demonixis_C3DE\C3DE\Graphics\Primitives\CubeMesh.cs,CreateGeometry,The following statement contains a magic number: Indices = new ushort[] {                   0' 1' 2' 2' 1' 3'                     4' 5' 6' 6' 5' 7'                  8' 9' 10' 10' 9' 11'                   12' 13' 14' 14' 13' 15'                   16' 17' 18' 18' 17' 19'                  20' 21' 22' 22' 21' 23              };
Magic Number,C3DE.Graphics.Primitives,CubeMesh,C:\repos\demonixis_C3DE\C3DE\Graphics\Primitives\CubeMesh.cs,CreateGeometry,The following statement contains a magic number: Indices = new ushort[] {                   0' 1' 2' 2' 1' 3'                     4' 5' 6' 6' 5' 7'                  8' 9' 10' 10' 9' 11'                   12' 13' 14' 14' 13' 15'                   16' 17' 18' 18' 17' 19'                  20' 21' 22' 22' 21' 23              };
Magic Number,C3DE.Graphics.Primitives,CubeMesh,C:\repos\demonixis_C3DE\C3DE\Graphics\Primitives\CubeMesh.cs,CreateGeometry,The following statement contains a magic number: Indices = new ushort[] {                   0' 1' 2' 2' 1' 3'                     4' 5' 6' 6' 5' 7'                  8' 9' 10' 10' 9' 11'                   12' 13' 14' 14' 13' 15'                   16' 17' 18' 18' 17' 19'                  20' 21' 22' 22' 21' 23              };
Magic Number,C3DE.Graphics.Primitives,CubeMesh,C:\repos\demonixis_C3DE\C3DE\Graphics\Primitives\CubeMesh.cs,CreateGeometry,The following statement contains a magic number: Indices = new ushort[] {                   0' 1' 2' 2' 1' 3'                     4' 5' 6' 6' 5' 7'                  8' 9' 10' 10' 9' 11'                   12' 13' 14' 14' 13' 15'                   16' 17' 18' 18' 17' 19'                  20' 21' 22' 22' 21' 23              };
Magic Number,C3DE.Graphics.Primitives,CubeMesh,C:\repos\demonixis_C3DE\C3DE\Graphics\Primitives\CubeMesh.cs,CreateGeometry,The following statement contains a magic number: Indices = new ushort[] {                   0' 1' 2' 2' 1' 3'                     4' 5' 6' 6' 5' 7'                  8' 9' 10' 10' 9' 11'                   12' 13' 14' 14' 13' 15'                   16' 17' 18' 18' 17' 19'                  20' 21' 22' 22' 21' 23              };
Magic Number,C3DE.Graphics.Primitives,CubeMesh,C:\repos\demonixis_C3DE\C3DE\Graphics\Primitives\CubeMesh.cs,CreateGeometry,The following statement contains a magic number: Indices = new ushort[] {                   0' 1' 2' 2' 1' 3'                     4' 5' 6' 6' 5' 7'                  8' 9' 10' 10' 9' 11'                   12' 13' 14' 14' 13' 15'                   16' 17' 18' 18' 17' 19'                  20' 21' 22' 22' 21' 23              };
Magic Number,C3DE.Graphics.Primitives,CubeMesh,C:\repos\demonixis_C3DE\C3DE\Graphics\Primitives\CubeMesh.cs,CreateGeometry,The following statement contains a magic number: Indices = new ushort[] {                   0' 1' 2' 2' 1' 3'                     4' 5' 6' 6' 5' 7'                  8' 9' 10' 10' 9' 11'                   12' 13' 14' 14' 13' 15'                   16' 17' 18' 18' 17' 19'                  20' 21' 22' 22' 21' 23              };
Magic Number,C3DE.Graphics.Primitives,CubeMesh,C:\repos\demonixis_C3DE\C3DE\Graphics\Primitives\CubeMesh.cs,CreateGeometry,The following statement contains a magic number: Indices = new ushort[] {                   0' 1' 2' 2' 1' 3'                     4' 5' 6' 6' 5' 7'                  8' 9' 10' 10' 9' 11'                   12' 13' 14' 14' 13' 15'                   16' 17' 18' 18' 17' 19'                  20' 21' 22' 22' 21' 23              };
Magic Number,C3DE.Graphics.Primitives,CubeMesh,C:\repos\demonixis_C3DE\C3DE\Graphics\Primitives\CubeMesh.cs,CreateGeometry,The following statement contains a magic number: Indices = new ushort[] {                   0' 1' 2' 2' 1' 3'                     4' 5' 6' 6' 5' 7'                  8' 9' 10' 10' 9' 11'                   12' 13' 14' 14' 13' 15'                   16' 17' 18' 18' 17' 19'                  20' 21' 22' 22' 21' 23              };
Magic Number,C3DE.Graphics.Primitives,CubeMesh,C:\repos\demonixis_C3DE\C3DE\Graphics\Primitives\CubeMesh.cs,CreateGeometry,The following statement contains a magic number: Indices = new ushort[] {                   0' 1' 2' 2' 1' 3'                     4' 5' 6' 6' 5' 7'                  8' 9' 10' 10' 9' 11'                   12' 13' 14' 14' 13' 15'                   16' 17' 18' 18' 17' 19'                  20' 21' 22' 22' 21' 23              };
Magic Number,C3DE.Graphics.Primitives,CubeMesh,C:\repos\demonixis_C3DE\C3DE\Graphics\Primitives\CubeMesh.cs,CreateGeometry,The following statement contains a magic number: Indices = new ushort[] {                   0' 1' 2' 2' 1' 3'                     4' 5' 6' 6' 5' 7'                  8' 9' 10' 10' 9' 11'                   12' 13' 14' 14' 13' 15'                   16' 17' 18' 18' 17' 19'                  20' 21' 22' 22' 21' 23              };
Magic Number,C3DE.Graphics.Primitives,CubeMesh,C:\repos\demonixis_C3DE\C3DE\Graphics\Primitives\CubeMesh.cs,CreateGeometry,The following statement contains a magic number: Indices = new ushort[] {                   0' 1' 2' 2' 1' 3'                     4' 5' 6' 6' 5' 7'                  8' 9' 10' 10' 9' 11'                   12' 13' 14' 14' 13' 15'                   16' 17' 18' 18' 17' 19'                  20' 21' 22' 22' 21' 23              };
Magic Number,C3DE.Graphics.Primitives,CubeMesh,C:\repos\demonixis_C3DE\C3DE\Graphics\Primitives\CubeMesh.cs,CreateGeometry,The following statement contains a magic number: Indices = new ushort[] {                   0' 1' 2' 2' 1' 3'                     4' 5' 6' 6' 5' 7'                  8' 9' 10' 10' 9' 11'                   12' 13' 14' 14' 13' 15'                   16' 17' 18' 18' 17' 19'                  20' 21' 22' 22' 21' 23              };
Magic Number,C3DE.Graphics.Primitives,CubeMesh,C:\repos\demonixis_C3DE\C3DE\Graphics\Primitives\CubeMesh.cs,CreateGeometry,The following statement contains a magic number: Indices = new ushort[] {                   0' 1' 2' 2' 1' 3'                     4' 5' 6' 6' 5' 7'                  8' 9' 10' 10' 9' 11'                   12' 13' 14' 14' 13' 15'                   16' 17' 18' 18' 17' 19'                  20' 21' 22' 22' 21' 23              };
Magic Number,C3DE.Graphics.Primitives,CubeMesh,C:\repos\demonixis_C3DE\C3DE\Graphics\Primitives\CubeMesh.cs,CreateGeometry,The following statement contains a magic number: Indices = new ushort[] {                   0' 1' 2' 2' 1' 3'                     4' 5' 6' 6' 5' 7'                  8' 9' 10' 10' 9' 11'                   12' 13' 14' 14' 13' 15'                   16' 17' 18' 18' 17' 19'                  20' 21' 22' 22' 21' 23              };
Magic Number,C3DE.Graphics.Primitives,CubeMesh,C:\repos\demonixis_C3DE\C3DE\Graphics\Primitives\CubeMesh.cs,CreateGeometry,The following statement contains a magic number: Indices = new ushort[] {                   0' 1' 2' 2' 1' 3'                     4' 5' 6' 6' 5' 7'                  8' 9' 10' 10' 9' 11'                   12' 13' 14' 14' 13' 15'                   16' 17' 18' 18' 17' 19'                  20' 21' 22' 22' 21' 23              };
Magic Number,C3DE.Graphics.Primitives,CubeMesh,C:\repos\demonixis_C3DE\C3DE\Graphics\Primitives\CubeMesh.cs,CreateGeometry,The following statement contains a magic number: Indices = new ushort[] {                   0' 1' 2' 2' 1' 3'                     4' 5' 6' 6' 5' 7'                  8' 9' 10' 10' 9' 11'                   12' 13' 14' 14' 13' 15'                   16' 17' 18' 18' 17' 19'                  20' 21' 22' 22' 21' 23              };
Magic Number,C3DE.Graphics.Primitives,CubeMesh,C:\repos\demonixis_C3DE\C3DE\Graphics\Primitives\CubeMesh.cs,CreateGeometry,The following statement contains a magic number: Indices = new ushort[] {                   0' 1' 2' 2' 1' 3'                     4' 5' 6' 6' 5' 7'                  8' 9' 10' 10' 9' 11'                   12' 13' 14' 14' 13' 15'                   16' 17' 18' 18' 17' 19'                  20' 21' 22' 22' 21' 23              };
Magic Number,C3DE.Graphics.Primitives,CubeMesh,C:\repos\demonixis_C3DE\C3DE\Graphics\Primitives\CubeMesh.cs,CreateGeometry,The following statement contains a magic number: Indices = new ushort[] {                   0' 1' 2' 2' 1' 3'                     4' 5' 6' 6' 5' 7'                  8' 9' 10' 10' 9' 11'                   12' 13' 14' 14' 13' 15'                   16' 17' 18' 18' 17' 19'                  20' 21' 22' 22' 21' 23              };
Magic Number,C3DE.Graphics.Primitives,CubeMesh,C:\repos\demonixis_C3DE\C3DE\Graphics\Primitives\CubeMesh.cs,CreateGeometry,The following statement contains a magic number: Indices = new ushort[] {                   0' 1' 2' 2' 1' 3'                     4' 5' 6' 6' 5' 7'                  8' 9' 10' 10' 9' 11'                   12' 13' 14' 14' 13' 15'                   16' 17' 18' 18' 17' 19'                  20' 21' 22' 22' 21' 23              };
Magic Number,C3DE.Graphics.Primitives,CubeMesh,C:\repos\demonixis_C3DE\C3DE\Graphics\Primitives\CubeMesh.cs,CreateGeometry,The following statement contains a magic number: Indices = new ushort[] {                   0' 1' 2' 2' 1' 3'                     4' 5' 6' 6' 5' 7'                  8' 9' 10' 10' 9' 11'                   12' 13' 14' 14' 13' 15'                   16' 17' 18' 18' 17' 19'                  20' 21' 22' 22' 21' 23              };
Magic Number,C3DE.Graphics.Primitives,CubeMesh,C:\repos\demonixis_C3DE\C3DE\Graphics\Primitives\CubeMesh.cs,CreateGeometry,The following statement contains a magic number: Indices = new ushort[] {                   0' 1' 2' 2' 1' 3'                     4' 5' 6' 6' 5' 7'                  8' 9' 10' 10' 9' 11'                   12' 13' 14' 14' 13' 15'                   16' 17' 18' 18' 17' 19'                  20' 21' 22' 22' 21' 23              };
Magic Number,C3DE.Graphics.Primitives,CubeMesh,C:\repos\demonixis_C3DE\C3DE\Graphics\Primitives\CubeMesh.cs,CreateGeometry,The following statement contains a magic number: Indices = new ushort[] {                   0' 1' 2' 2' 1' 3'                     4' 5' 6' 6' 5' 7'                  8' 9' 10' 10' 9' 11'                   12' 13' 14' 14' 13' 15'                   16' 17' 18' 18' 17' 19'                  20' 21' 22' 22' 21' 23              };
Magic Number,C3DE.Graphics.Primitives,CubeMesh,C:\repos\demonixis_C3DE\C3DE\Graphics\Primitives\CubeMesh.cs,CreateGeometry,The following statement contains a magic number: Indices = new ushort[] {                   0' 1' 2' 2' 1' 3'                     4' 5' 6' 6' 5' 7'                  8' 9' 10' 10' 9' 11'                   12' 13' 14' 14' 13' 15'                   16' 17' 18' 18' 17' 19'                  20' 21' 22' 22' 21' 23              };
Magic Number,C3DE.Graphics.Primitives,CubeMesh,C:\repos\demonixis_C3DE\C3DE\Graphics\Primitives\CubeMesh.cs,CreateGeometry,The following statement contains a magic number: Indices = new ushort[] {                   0' 1' 2' 2' 1' 3'                     4' 5' 6' 6' 5' 7'                  8' 9' 10' 10' 9' 11'                   12' 13' 14' 14' 13' 15'                   16' 17' 18' 18' 17' 19'                  20' 21' 22' 22' 21' 23              };
Magic Number,C3DE.Graphics.Primitives,CubeMesh,C:\repos\demonixis_C3DE\C3DE\Graphics\Primitives\CubeMesh.cs,CreateGeometry,The following statement contains a magic number: Indices = new ushort[] {                   0' 1' 2' 2' 1' 3'                     4' 5' 6' 6' 5' 7'                  8' 9' 10' 10' 9' 11'                   12' 13' 14' 14' 13' 15'                   16' 17' 18' 18' 17' 19'                  20' 21' 22' 22' 21' 23              };
Magic Number,C3DE.Graphics.Primitives,CubeMesh,C:\repos\demonixis_C3DE\C3DE\Graphics\Primitives\CubeMesh.cs,CreateGeometry,The following statement contains a magic number: Indices = new ushort[] {                   0' 1' 2' 2' 1' 3'                     4' 5' 6' 6' 5' 7'                  8' 9' 10' 10' 9' 11'                   12' 13' 14' 14' 13' 15'                   16' 17' 18' 18' 17' 19'                  20' 21' 22' 22' 21' 23              };
Magic Number,C3DE.Graphics.Primitives,CubeMesh,C:\repos\demonixis_C3DE\C3DE\Graphics\Primitives\CubeMesh.cs,CreateGeometry,The following statement contains a magic number: Indices = new ushort[] {                   0' 1' 2' 2' 1' 3'                     4' 5' 6' 6' 5' 7'                  8' 9' 10' 10' 9' 11'                   12' 13' 14' 14' 13' 15'                   16' 17' 18' 18' 17' 19'                  20' 21' 22' 22' 21' 23              };
Magic Number,C3DE.Graphics.Primitives,CubeMesh,C:\repos\demonixis_C3DE\C3DE\Graphics\Primitives\CubeMesh.cs,CreateGeometry,The following statement contains a magic number: Indices = new ushort[] {                   0' 1' 2' 2' 1' 3'                     4' 5' 6' 6' 5' 7'                  8' 9' 10' 10' 9' 11'                   12' 13' 14' 14' 13' 15'                   16' 17' 18' 18' 17' 19'                  20' 21' 22' 22' 21' 23              };
Magic Number,C3DE.Graphics.Primitives,CubeMesh,C:\repos\demonixis_C3DE\C3DE\Graphics\Primitives\CubeMesh.cs,CreateGeometry,The following statement contains a magic number: Indices = new ushort[] {                   0' 1' 2' 2' 1' 3'                     4' 5' 6' 6' 5' 7'                  8' 9' 10' 10' 9' 11'                   12' 13' 14' 14' 13' 15'                   16' 17' 18' 18' 17' 19'                  20' 21' 22' 22' 21' 23              };
Magic Number,C3DE.Graphics.Primitives,CubeMesh,C:\repos\demonixis_C3DE\C3DE\Graphics\Primitives\CubeMesh.cs,CreateGeometry,The following statement contains a magic number: Indices = new ushort[] {                   0' 1' 2' 2' 1' 3'                     4' 5' 6' 6' 5' 7'                  8' 9' 10' 10' 9' 11'                   12' 13' 14' 14' 13' 15'                   16' 17' 18' 18' 17' 19'                  20' 21' 22' 22' 21' 23              };
Magic Number,C3DE.Graphics.Primitives,CylinderMesh,C:\repos\demonixis_C3DE\C3DE\Graphics\Primitives\CylinderMesh.cs,CreateGeometry,The following statement contains a magic number: NbSlices = Math.Max(3' NbSlices);
Magic Number,C3DE.Graphics.Primitives,CylinderMesh,C:\repos\demonixis_C3DE\C3DE\Graphics\Primitives\CylinderMesh.cs,CreateGeometry,The following statement contains a magic number: Vertices = new VertexPositionNormalTexture[((NbSegments + 1) * (NbSlices + 1)) + 2];
Magic Number,C3DE.Graphics.Primitives,CylinderMesh,C:\repos\demonixis_C3DE\C3DE\Graphics\Primitives\CylinderMesh.cs,CreateGeometry,The following statement contains a magic number: Indices = new ushort[(NbSlices + (NbSlices * NbSegments)) * 6];
Magic Number,C3DE.Graphics.Primitives,CylinderMesh,C:\repos\demonixis_C3DE\C3DE\Graphics\Primitives\CylinderMesh.cs,CreateGeometry,The following statement contains a magic number: for (int j = 0; j <= NbSegments; j++)              {                  Vector3 center = Vector3.Lerp(StartPosition' EndPosition' j * invSegments);                  float radius = MathHelper.Lerp(StartRadius' EndRadius' j * invSegments);                    if (j == 0)                  {                      Vertices[vertexCount++] = new VertexPositionNormalTexture()                      {                          Position = center'                          TextureCoordinate = new Vector2(0.5f' (float)j * invSegments)                      };                  }                    for (int i = 0; i <= NbSlices; i++)                  {                      float theta = i * MathHelper.TwoPi * invSlices;                      float rCosTheta = radius * (float)Math.Cos(theta);                      float rSinTheta = radius * (float)Math.Sin(theta);                        Vertices[vertexCount++] = new VertexPositionNormalTexture()                      {                          Position = new Vector3()                          {                              X = (center.X + rCosTheta * r.X + rSinTheta * s.X)'                              Y = (center.Y + rCosTheta * r.Y + rSinTheta * s.Y)'                              Z = (center.Z + rCosTheta * r.Z + rSinTheta * s.Z)                          }'                          TextureCoordinate = new Vector2()                          {                              X = i * invSlices'                              Y = j * invSegments                          }                      };                        if (i < NbSlices)                      {                          // just an alias to assist with think of each vertex that's                          //  iterated in here as the bottom right corner of a triangle                          int vRef = vertexCount - 1;                            if (j == 0)                          {                                 // start cap - i0 is always center point on start cap                              ushort i0 = 0;                              ushort i1 = (ushort)(vRef + 1);                              ushort i2 = (ushort)(vRef);                                Indices[indexCount++] = i0;                              Indices[indexCount++] = invertFaces ? i2 : i1;                              Indices[indexCount++] = invertFaces ? i1 : i2;                          }                            if (j == NbSegments)                          {                                 // end cap - i0 is always the center point on end cap                              ushort i0 = (ushort)((vRef + NbSlices + 2) - (vRef % (NbSlices + 1)));                              ushort i1 = (ushort)(vRef);                              ushort i2 = (ushort)(vRef + 1);                                Indices[indexCount++] = i0;                              Indices[indexCount++] = invertFaces ? i2 : i1;                              Indices[indexCount++] = invertFaces ? i1 : i2;                          }                            if (j < NbSegments)                          {                                 // middle area                              ushort i0 = (ushort)(vRef);                              ushort i1 = (ushort)(vRef + 1);                              ushort i2 = (ushort)(vRef + NbSlices + 2);                              ushort i3 = (ushort)(vRef + NbSlices + 1);                                Indices[indexCount++] = i0;                              Indices[indexCount++] = invertFaces ? i2 : i1;                              Indices[indexCount++] = invertFaces ? i1 : i2;                                Indices[indexCount++] = i0;                              Indices[indexCount++] = invertFaces ? i3 : i2;                              Indices[indexCount++] = invertFaces ? i2 : i3;                          }                      }                  }                    if (j == NbSegments)                  {                      Vertices[vertexCount++] = new VertexPositionNormalTexture()                      {                          Position = center'                          TextureCoordinate = new Vector2(0.5f' (float)j * invSegments)                      };                  }              }
Magic Number,C3DE.Graphics.Primitives,CylinderMesh,C:\repos\demonixis_C3DE\C3DE\Graphics\Primitives\CylinderMesh.cs,CreateGeometry,The following statement contains a magic number: for (int j = 0; j <= NbSegments; j++)              {                  Vector3 center = Vector3.Lerp(StartPosition' EndPosition' j * invSegments);                  float radius = MathHelper.Lerp(StartRadius' EndRadius' j * invSegments);                    if (j == 0)                  {                      Vertices[vertexCount++] = new VertexPositionNormalTexture()                      {                          Position = center'                          TextureCoordinate = new Vector2(0.5f' (float)j * invSegments)                      };                  }                    for (int i = 0; i <= NbSlices; i++)                  {                      float theta = i * MathHelper.TwoPi * invSlices;                      float rCosTheta = radius * (float)Math.Cos(theta);                      float rSinTheta = radius * (float)Math.Sin(theta);                        Vertices[vertexCount++] = new VertexPositionNormalTexture()                      {                          Position = new Vector3()                          {                              X = (center.X + rCosTheta * r.X + rSinTheta * s.X)'                              Y = (center.Y + rCosTheta * r.Y + rSinTheta * s.Y)'                              Z = (center.Z + rCosTheta * r.Z + rSinTheta * s.Z)                          }'                          TextureCoordinate = new Vector2()                          {                              X = i * invSlices'                              Y = j * invSegments                          }                      };                        if (i < NbSlices)                      {                          // just an alias to assist with think of each vertex that's                          //  iterated in here as the bottom right corner of a triangle                          int vRef = vertexCount - 1;                            if (j == 0)                          {                                 // start cap - i0 is always center point on start cap                              ushort i0 = 0;                              ushort i1 = (ushort)(vRef + 1);                              ushort i2 = (ushort)(vRef);                                Indices[indexCount++] = i0;                              Indices[indexCount++] = invertFaces ? i2 : i1;                              Indices[indexCount++] = invertFaces ? i1 : i2;                          }                            if (j == NbSegments)                          {                                 // end cap - i0 is always the center point on end cap                              ushort i0 = (ushort)((vRef + NbSlices + 2) - (vRef % (NbSlices + 1)));                              ushort i1 = (ushort)(vRef);                              ushort i2 = (ushort)(vRef + 1);                                Indices[indexCount++] = i0;                              Indices[indexCount++] = invertFaces ? i2 : i1;                              Indices[indexCount++] = invertFaces ? i1 : i2;                          }                            if (j < NbSegments)                          {                                 // middle area                              ushort i0 = (ushort)(vRef);                              ushort i1 = (ushort)(vRef + 1);                              ushort i2 = (ushort)(vRef + NbSlices + 2);                              ushort i3 = (ushort)(vRef + NbSlices + 1);                                Indices[indexCount++] = i0;                              Indices[indexCount++] = invertFaces ? i2 : i1;                              Indices[indexCount++] = invertFaces ? i1 : i2;                                Indices[indexCount++] = i0;                              Indices[indexCount++] = invertFaces ? i3 : i2;                              Indices[indexCount++] = invertFaces ? i2 : i3;                          }                      }                  }                    if (j == NbSegments)                  {                      Vertices[vertexCount++] = new VertexPositionNormalTexture()                      {                          Position = center'                          TextureCoordinate = new Vector2(0.5f' (float)j * invSegments)                      };                  }              }
Magic Number,C3DE.Graphics.Primitives,Mesh,C:\repos\demonixis_C3DE\C3DE\Graphics\Primitives\Mesh.cs,ComputeNormals,The following statement contains a magic number: for (int i = 0; i < _indices.Length / 3; i++)              {                  int index1 = _indices[i * 3];                  int index2 = _indices[i * 3 + 1];                  int index3 = _indices[i * 3 + 2];                    // Select the face                  Vector3 side1 = _vertices[index1].Position - _vertices[index3].Position;                  Vector3 side2 = _vertices[index1].Position - _vertices[index2].Position;                  Vector3 normal = Vector3.Cross(side1' side2);                    _vertices[index1].Normal += normal;                  _vertices[index2].Normal += normal;                  _vertices[index3].Normal += normal;              }
Magic Number,C3DE.Graphics.Primitives,Mesh,C:\repos\demonixis_C3DE\C3DE\Graphics\Primitives\Mesh.cs,ComputeNormals,The following statement contains a magic number: for (int i = 0; i < _indices.Length / 3; i++)              {                  int index1 = _indices[i * 3];                  int index2 = _indices[i * 3 + 1];                  int index3 = _indices[i * 3 + 2];                    // Select the face                  Vector3 side1 = _vertices[index1].Position - _vertices[index3].Position;                  Vector3 side2 = _vertices[index1].Position - _vertices[index2].Position;                  Vector3 normal = Vector3.Cross(side1' side2);                    _vertices[index1].Normal += normal;                  _vertices[index2].Normal += normal;                  _vertices[index3].Normal += normal;              }
Magic Number,C3DE.Graphics.Primitives,Mesh,C:\repos\demonixis_C3DE\C3DE\Graphics\Primitives\Mesh.cs,ComputeNormals,The following statement contains a magic number: for (int i = 0; i < _indices.Length / 3; i++)              {                  int index1 = _indices[i * 3];                  int index2 = _indices[i * 3 + 1];                  int index3 = _indices[i * 3 + 2];                    // Select the face                  Vector3 side1 = _vertices[index1].Position - _vertices[index3].Position;                  Vector3 side2 = _vertices[index1].Position - _vertices[index2].Position;                  Vector3 normal = Vector3.Cross(side1' side2);                    _vertices[index1].Normal += normal;                  _vertices[index2].Normal += normal;                  _vertices[index3].Normal += normal;              }
Magic Number,C3DE.Graphics.Primitives,Mesh,C:\repos\demonixis_C3DE\C3DE\Graphics\Primitives\Mesh.cs,ComputeNormals,The following statement contains a magic number: for (int i = 0; i < _indices.Length / 3; i++)              {                  int index1 = _indices[i * 3];                  int index2 = _indices[i * 3 + 1];                  int index3 = _indices[i * 3 + 2];                    // Select the face                  Vector3 side1 = _vertices[index1].Position - _vertices[index3].Position;                  Vector3 side2 = _vertices[index1].Position - _vertices[index2].Position;                  Vector3 normal = Vector3.Cross(side1' side2);                    _vertices[index1].Normal += normal;                  _vertices[index2].Normal += normal;                  _vertices[index3].Normal += normal;              }
Magic Number,C3DE.Graphics.Primitives,Mesh,C:\repos\demonixis_C3DE\C3DE\Graphics\Primitives\Mesh.cs,ComputeNormals,The following statement contains a magic number: for (int i = 0; i < _indices.Length / 3; i++)              {                  int index1 = _indices[i * 3];                  int index2 = _indices[i * 3 + 1];                  int index3 = _indices[i * 3 + 2];                    // Select the face                  Vector3 side1 = _vertices[index1].Position - _vertices[index3].Position;                  Vector3 side2 = _vertices[index1].Position - _vertices[index2].Position;                  Vector3 normal = Vector3.Cross(side1' side2);                    _vertices[index1].Normal += normal;                  _vertices[index2].Normal += normal;                  _vertices[index3].Normal += normal;              }
Magic Number,C3DE.Graphics.Primitives,PlaneMesh,C:\repos\demonixis_C3DE\C3DE\Graphics\Primitives\PlaneMesh.cs,CreateGeometry,The following statement contains a magic number: var position = new Vector3[4]              {                  new Vector3(-1.0f' 0.0f' 1.0f)'                  new Vector3(-1.0f' 0.0f' -1.0f)'                  new Vector3(1.0f' 0.0f' -1.0f)'                  new Vector3(1.0f' 0.0f' 1.0f)              };
Magic Number,C3DE.Graphics.Primitives,PlaneMesh,C:\repos\demonixis_C3DE\C3DE\Graphics\Primitives\PlaneMesh.cs,CreateGeometry,The following statement contains a magic number: var uvs = new Vector2[4]              {                  new Vector2(0.0f' 1.0f)'                  new Vector2(0.0f' 0.0f)'                  new Vector2(1.0f' 0.0f)'                  new Vector2(1.0f' 1.0f)              };
Magic Number,C3DE.Graphics.Primitives,PlaneMesh,C:\repos\demonixis_C3DE\C3DE\Graphics\Primitives\PlaneMesh.cs,CreateGeometry,The following statement contains a magic number: Vertices = new VertexPositionNormalTexture[4];
Magic Number,C3DE.Graphics.Primitives,PlaneMesh,C:\repos\demonixis_C3DE\C3DE\Graphics\Primitives\PlaneMesh.cs,CreateGeometry,The following statement contains a magic number: for (int i = 0; i < 4; i++)              {                  Vertices[i].Position = position[i];                  Vertices[i].TextureCoordinate = uvs[i];                  Vertices[i].Normal = Vector3.Up;              }
Magic Number,C3DE.Graphics.Primitives,PlaneMesh,C:\repos\demonixis_C3DE\C3DE\Graphics\Primitives\PlaneMesh.cs,CreateGeometry,The following statement contains a magic number: Indices = new ushort[] { 0' 1' 2' 0' 2' 3 };
Magic Number,C3DE.Graphics.Primitives,PlaneMesh,C:\repos\demonixis_C3DE\C3DE\Graphics\Primitives\PlaneMesh.cs,CreateGeometry,The following statement contains a magic number: Indices = new ushort[] { 0' 1' 2' 0' 2' 3 };
Magic Number,C3DE.Graphics.Primitives,PlaneMesh,C:\repos\demonixis_C3DE\C3DE\Graphics\Primitives\PlaneMesh.cs,CreateGeometry,The following statement contains a magic number: Indices = new ushort[] { 0' 1' 2' 0' 2' 3 };
Magic Number,C3DE.Graphics.Primitives,QuadMesh,C:\repos\demonixis_C3DE\C3DE\Graphics\Primitives\QuadMesh.cs,CreateGeometry,The following statement contains a magic number: var position = new Vector3[4]              {                  new Vector3(-1.0f' 1.0f' 0.0f)'                  new Vector3(1.0f' 1.0f' 0.0f)'                  new Vector3(1.0f' -1.0f' 0.0f)'                  new Vector3(-1.0f' -1.0f' 0.0f)              };
Magic Number,C3DE.Graphics.Primitives,QuadMesh,C:\repos\demonixis_C3DE\C3DE\Graphics\Primitives\QuadMesh.cs,CreateGeometry,The following statement contains a magic number: var uvs = new Vector2[4]              {                  new Vector2(0.0f' 0.0f)'                  new Vector2(1.0f' 0.0f)'                  new Vector2(1.0f' 1.0f)'                  new Vector2(0.0f' 1.0f)              };
Magic Number,C3DE.Graphics.Primitives,QuadMesh,C:\repos\demonixis_C3DE\C3DE\Graphics\Primitives\QuadMesh.cs,CreateGeometry,The following statement contains a magic number: Vertices = new VertexPositionNormalTexture[4];
Magic Number,C3DE.Graphics.Primitives,QuadMesh,C:\repos\demonixis_C3DE\C3DE\Graphics\Primitives\QuadMesh.cs,CreateGeometry,The following statement contains a magic number: for (int i = 0; i < 4; i++)              {                  Vertices[i].Position = position[i];                  Vertices[i].TextureCoordinate = uvs[i];                  Vertices[i].Normal = Vector3.Forward;              }
Magic Number,C3DE.Graphics.Primitives,QuadMesh,C:\repos\demonixis_C3DE\C3DE\Graphics\Primitives\QuadMesh.cs,CreateGeometry,The following statement contains a magic number: Indices = new ushort[] { 0' 1' 2' 0' 2' 3 };
Magic Number,C3DE.Graphics.Primitives,QuadMesh,C:\repos\demonixis_C3DE\C3DE\Graphics\Primitives\QuadMesh.cs,CreateGeometry,The following statement contains a magic number: Indices = new ushort[] { 0' 1' 2' 0' 2' 3 };
Magic Number,C3DE.Graphics.Primitives,QuadMesh,C:\repos\demonixis_C3DE\C3DE\Graphics\Primitives\QuadMesh.cs,CreateGeometry,The following statement contains a magic number: Indices = new ushort[] { 0' 1' 2' 0' 2' 3 };
Magic Number,C3DE.Graphics.Primitives,PyramidMesh,C:\repos\demonixis_C3DE\C3DE\Graphics\Primitives\PyramidMesh.cs,CreateGeometry,The following statement contains a magic number: Vertices = new VertexPositionNormalTexture[12];
Magic Number,C3DE.Graphics.Primitives,PyramidMesh,C:\repos\demonixis_C3DE\C3DE\Graphics\Primitives\PyramidMesh.cs,CreateGeometry,The following statement contains a magic number: Vertices[2] = new VertexPositionNormalTexture(new Vector3(0.0f' 1.0f' 0.0f)' normal' topRight);
Magic Number,C3DE.Graphics.Primitives,PyramidMesh,C:\repos\demonixis_C3DE\C3DE\Graphics\Primitives\PyramidMesh.cs,CreateGeometry,The following statement contains a magic number: Vertices[3] = new VertexPositionNormalTexture(new Vector3(1.0f' -1.0f' -1.0f)' normal' bottomRight);
Magic Number,C3DE.Graphics.Primitives,PyramidMesh,C:\repos\demonixis_C3DE\C3DE\Graphics\Primitives\PyramidMesh.cs,CreateGeometry,The following statement contains a magic number: Vertices[4] = new VertexPositionNormalTexture(new Vector3(1.0f' -1.0f' 1.0f)' normal' bottomLeft);
Magic Number,C3DE.Graphics.Primitives,PyramidMesh,C:\repos\demonixis_C3DE\C3DE\Graphics\Primitives\PyramidMesh.cs,CreateGeometry,The following statement contains a magic number: Vertices[5] = new VertexPositionNormalTexture(new Vector3(0.0f' 1.0f' 0.0f)' normal' topRight);
Magic Number,C3DE.Graphics.Primitives,PyramidMesh,C:\repos\demonixis_C3DE\C3DE\Graphics\Primitives\PyramidMesh.cs,CreateGeometry,The following statement contains a magic number: Vertices[6] = new VertexPositionNormalTexture(new Vector3(-1.0f' -1.0f' -1.0f)' normal' bottomRight);
Magic Number,C3DE.Graphics.Primitives,PyramidMesh,C:\repos\demonixis_C3DE\C3DE\Graphics\Primitives\PyramidMesh.cs,CreateGeometry,The following statement contains a magic number: Vertices[7] = new VertexPositionNormalTexture(new Vector3(1.0f' -1.0f' -1.0f)' normal' bottomLeft);
Magic Number,C3DE.Graphics.Primitives,PyramidMesh,C:\repos\demonixis_C3DE\C3DE\Graphics\Primitives\PyramidMesh.cs,CreateGeometry,The following statement contains a magic number: Vertices[8] = new VertexPositionNormalTexture(new Vector3(0.0f' 1.0f' 0.0f)' normal' topRight);
Magic Number,C3DE.Graphics.Primitives,PyramidMesh,C:\repos\demonixis_C3DE\C3DE\Graphics\Primitives\PyramidMesh.cs,CreateGeometry,The following statement contains a magic number: Vertices[9] = new VertexPositionNormalTexture(new Vector3(-1.0f' -1.0f' 1.0f)' normal' bottomRight);
Magic Number,C3DE.Graphics.Primitives,PyramidMesh,C:\repos\demonixis_C3DE\C3DE\Graphics\Primitives\PyramidMesh.cs,CreateGeometry,The following statement contains a magic number: Vertices[10] = new VertexPositionNormalTexture(new Vector3(-1.0f' -1.0f' -1.0f)' normal' bottomLeft);
Magic Number,C3DE.Graphics.Primitives,PyramidMesh,C:\repos\demonixis_C3DE\C3DE\Graphics\Primitives\PyramidMesh.cs,CreateGeometry,The following statement contains a magic number: Vertices[11] = new VertexPositionNormalTexture(new Vector3(0.0f' 1.0f' 0.0f)' normal' topRight);
Magic Number,C3DE.Graphics.Primitives,PyramidMesh,C:\repos\demonixis_C3DE\C3DE\Graphics\Primitives\PyramidMesh.cs,CreateGeometry,The following statement contains a magic number: Indices = new ushort[]               {                   0' 1' 2'                   3' 4' 5'                   6' 7' 8'                  9' 10' 11               };
Magic Number,C3DE.Graphics.Primitives,PyramidMesh,C:\repos\demonixis_C3DE\C3DE\Graphics\Primitives\PyramidMesh.cs,CreateGeometry,The following statement contains a magic number: Indices = new ushort[]               {                   0' 1' 2'                   3' 4' 5'                   6' 7' 8'                  9' 10' 11               };
Magic Number,C3DE.Graphics.Primitives,PyramidMesh,C:\repos\demonixis_C3DE\C3DE\Graphics\Primitives\PyramidMesh.cs,CreateGeometry,The following statement contains a magic number: Indices = new ushort[]               {                   0' 1' 2'                   3' 4' 5'                   6' 7' 8'                  9' 10' 11               };
Magic Number,C3DE.Graphics.Primitives,PyramidMesh,C:\repos\demonixis_C3DE\C3DE\Graphics\Primitives\PyramidMesh.cs,CreateGeometry,The following statement contains a magic number: Indices = new ushort[]               {                   0' 1' 2'                   3' 4' 5'                   6' 7' 8'                  9' 10' 11               };
Magic Number,C3DE.Graphics.Primitives,PyramidMesh,C:\repos\demonixis_C3DE\C3DE\Graphics\Primitives\PyramidMesh.cs,CreateGeometry,The following statement contains a magic number: Indices = new ushort[]               {                   0' 1' 2'                   3' 4' 5'                   6' 7' 8'                  9' 10' 11               };
Magic Number,C3DE.Graphics.Primitives,PyramidMesh,C:\repos\demonixis_C3DE\C3DE\Graphics\Primitives\PyramidMesh.cs,CreateGeometry,The following statement contains a magic number: Indices = new ushort[]               {                   0' 1' 2'                   3' 4' 5'                   6' 7' 8'                  9' 10' 11               };
Magic Number,C3DE.Graphics.Primitives,PyramidMesh,C:\repos\demonixis_C3DE\C3DE\Graphics\Primitives\PyramidMesh.cs,CreateGeometry,The following statement contains a magic number: Indices = new ushort[]               {                   0' 1' 2'                   3' 4' 5'                   6' 7' 8'                  9' 10' 11               };
Magic Number,C3DE.Graphics.Primitives,PyramidMesh,C:\repos\demonixis_C3DE\C3DE\Graphics\Primitives\PyramidMesh.cs,CreateGeometry,The following statement contains a magic number: Indices = new ushort[]               {                   0' 1' 2'                   3' 4' 5'                   6' 7' 8'                  9' 10' 11               };
Magic Number,C3DE.Graphics.Primitives,PyramidMesh,C:\repos\demonixis_C3DE\C3DE\Graphics\Primitives\PyramidMesh.cs,CreateGeometry,The following statement contains a magic number: Indices = new ushort[]               {                   0' 1' 2'                   3' 4' 5'                   6' 7' 8'                  9' 10' 11               };
Magic Number,C3DE.Graphics.Primitives,PyramidMesh,C:\repos\demonixis_C3DE\C3DE\Graphics\Primitives\PyramidMesh.cs,CreateGeometry,The following statement contains a magic number: Indices = new ushort[]               {                   0' 1' 2'                   3' 4' 5'                   6' 7' 8'                  9' 10' 11               };
Magic Number,C3DE.Graphics.Primitives,SphereMesh,C:\repos\demonixis_C3DE\C3DE\Graphics\Primitives\SphereMesh.cs,CreateGeometry,The following statement contains a magic number: TessellationLevel = Math.Max(4' TessellationLevel);
Magic Number,C3DE.Graphics.Primitives,SphereMesh,C:\repos\demonixis_C3DE\C3DE\Graphics\Primitives\SphereMesh.cs,CreateGeometry,The following statement contains a magic number: TessellationLevel += (TessellationLevel % 2);
Magic Number,C3DE.Graphics.Primitives,SphereMesh,C:\repos\demonixis_C3DE\C3DE\Graphics\Primitives\SphereMesh.cs,CreateGeometry,The following statement contains a magic number: Vertices = new VertexPositionNormalTexture[((TessellationLevel / 2) * (TessellationLevel - 1)) + 1];
Magic Number,C3DE.Graphics.Primitives,SphereMesh,C:\repos\demonixis_C3DE\C3DE\Graphics\Primitives\SphereMesh.cs,CreateGeometry,The following statement contains a magic number: Indices = new ushort[(((TessellationLevel / 2) - 2) * (TessellationLevel + 1) * 6) + (6 * (TessellationLevel + 1))];
Magic Number,C3DE.Graphics.Primitives,SphereMesh,C:\repos\demonixis_C3DE\C3DE\Graphics\Primitives\SphereMesh.cs,CreateGeometry,The following statement contains a magic number: Indices = new ushort[(((TessellationLevel / 2) - 2) * (TessellationLevel + 1) * 6) + (6 * (TessellationLevel + 1))];
Magic Number,C3DE.Graphics.Primitives,SphereMesh,C:\repos\demonixis_C3DE\C3DE\Graphics\Primitives\SphereMesh.cs,CreateGeometry,The following statement contains a magic number: Indices = new ushort[(((TessellationLevel / 2) - 2) * (TessellationLevel + 1) * 6) + (6 * (TessellationLevel + 1))];
Magic Number,C3DE.Graphics.Primitives,SphereMesh,C:\repos\demonixis_C3DE\C3DE\Graphics\Primitives\SphereMesh.cs,CreateGeometry,The following statement contains a magic number: Indices = new ushort[(((TessellationLevel / 2) - 2) * (TessellationLevel + 1) * 6) + (6 * (TessellationLevel + 1))];
Magic Number,C3DE.Graphics.Primitives,SphereMesh,C:\repos\demonixis_C3DE\C3DE\Graphics\Primitives\SphereMesh.cs,CreateGeometry,The following statement contains a magic number: for (int j = 0; j <= TessellationLevel / 2; j++)              {                  float theta = j * MathHelper.TwoPi / TessellationLevel - MathHelper.PiOver2;                    for (int i = 0; i <= TessellationLevel; i++)                  {                      float phi = i * MathHelper.TwoPi / TessellationLevel;                        Vertices[vertexCount++] = new VertexPositionNormalTexture()                      {                          Position = new Vector3()                          {                              X = (Radius * (float)(Math.Cos(theta) * Math.Cos(phi)))'                              Y = (Radius * (float)(Math.Sin(theta)))'                              Z = (Radius * (float)(Math.Cos(theta) * Math.Sin(phi)))                          }'                                                    TextureCoordinate = new Vector2()                          {                              X = ((float)i / (float)TessellationLevel)'                              Y = ((float)2 * (float)j / (float)TessellationLevel)                          }                      };                        if (j == 0)                      {                          // bottom cap                          for (i = 0; i <= TessellationLevel; i++)                          {                              ushort i0 = 0;                              ushort i1 = (ushort)((i % TessellationLevel) + 1);                              ushort i2 = (ushort)i;                                Indices[indexCount++] = i0;                              Indices[indexCount++] = invertFaces ? i2 : i1;                              Indices[indexCount++] = invertFaces ? i1 : i2;                          }                      }                      else if (j < TessellationLevel / 2 - 1)                      {                          // middle area                          ushort i0 = (ushort)(vertexCount - 1);                          ushort i1 = (ushort)vertexCount;                          ushort i2 = (ushort)(vertexCount + TessellationLevel);                          ushort i3 = (ushort)(vertexCount + TessellationLevel + 1);                            Indices[indexCount++] = i0;                          Indices[indexCount++] = invertFaces ? i2 : i1;                          Indices[indexCount++] = invertFaces ? i1 : i2;                            Indices[indexCount++] = i1;                          Indices[indexCount++] = invertFaces ? i2 : i3;                          Indices[indexCount++] = invertFaces ? i3 : i2;                      }                      else if (j == TessellationLevel / 2)                      {                          // top cap                          for (i = 0; i <= TessellationLevel; i++)                          {                              ushort i0 = (ushort)(vertexCount - 1);                              ushort i1 = (ushort)((vertexCount - 1) - ((i % TessellationLevel) + 1));                              ushort i2 = (ushort)((vertexCount - 1) - i);                                Indices[indexCount++] = i0;                              Indices[indexCount++] = invertFaces ? i2 : i1;                              Indices[indexCount++] = invertFaces ? i1 : i2;                          }                      }                  }              }
Magic Number,C3DE.Graphics.Primitives,SphereMesh,C:\repos\demonixis_C3DE\C3DE\Graphics\Primitives\SphereMesh.cs,CreateGeometry,The following statement contains a magic number: for (int j = 0; j <= TessellationLevel / 2; j++)              {                  float theta = j * MathHelper.TwoPi / TessellationLevel - MathHelper.PiOver2;                    for (int i = 0; i <= TessellationLevel; i++)                  {                      float phi = i * MathHelper.TwoPi / TessellationLevel;                        Vertices[vertexCount++] = new VertexPositionNormalTexture()                      {                          Position = new Vector3()                          {                              X = (Radius * (float)(Math.Cos(theta) * Math.Cos(phi)))'                              Y = (Radius * (float)(Math.Sin(theta)))'                              Z = (Radius * (float)(Math.Cos(theta) * Math.Sin(phi)))                          }'                                                    TextureCoordinate = new Vector2()                          {                              X = ((float)i / (float)TessellationLevel)'                              Y = ((float)2 * (float)j / (float)TessellationLevel)                          }                      };                        if (j == 0)                      {                          // bottom cap                          for (i = 0; i <= TessellationLevel; i++)                          {                              ushort i0 = 0;                              ushort i1 = (ushort)((i % TessellationLevel) + 1);                              ushort i2 = (ushort)i;                                Indices[indexCount++] = i0;                              Indices[indexCount++] = invertFaces ? i2 : i1;                              Indices[indexCount++] = invertFaces ? i1 : i2;                          }                      }                      else if (j < TessellationLevel / 2 - 1)                      {                          // middle area                          ushort i0 = (ushort)(vertexCount - 1);                          ushort i1 = (ushort)vertexCount;                          ushort i2 = (ushort)(vertexCount + TessellationLevel);                          ushort i3 = (ushort)(vertexCount + TessellationLevel + 1);                            Indices[indexCount++] = i0;                          Indices[indexCount++] = invertFaces ? i2 : i1;                          Indices[indexCount++] = invertFaces ? i1 : i2;                            Indices[indexCount++] = i1;                          Indices[indexCount++] = invertFaces ? i2 : i3;                          Indices[indexCount++] = invertFaces ? i3 : i2;                      }                      else if (j == TessellationLevel / 2)                      {                          // top cap                          for (i = 0; i <= TessellationLevel; i++)                          {                              ushort i0 = (ushort)(vertexCount - 1);                              ushort i1 = (ushort)((vertexCount - 1) - ((i % TessellationLevel) + 1));                              ushort i2 = (ushort)((vertexCount - 1) - i);                                Indices[indexCount++] = i0;                              Indices[indexCount++] = invertFaces ? i2 : i1;                              Indices[indexCount++] = invertFaces ? i1 : i2;                          }                      }                  }              }
Magic Number,C3DE.Graphics.Primitives,SphereMesh,C:\repos\demonixis_C3DE\C3DE\Graphics\Primitives\SphereMesh.cs,CreateGeometry,The following statement contains a magic number: for (int j = 0; j <= TessellationLevel / 2; j++)              {                  float theta = j * MathHelper.TwoPi / TessellationLevel - MathHelper.PiOver2;                    for (int i = 0; i <= TessellationLevel; i++)                  {                      float phi = i * MathHelper.TwoPi / TessellationLevel;                        Vertices[vertexCount++] = new VertexPositionNormalTexture()                      {                          Position = new Vector3()                          {                              X = (Radius * (float)(Math.Cos(theta) * Math.Cos(phi)))'                              Y = (Radius * (float)(Math.Sin(theta)))'                              Z = (Radius * (float)(Math.Cos(theta) * Math.Sin(phi)))                          }'                                                    TextureCoordinate = new Vector2()                          {                              X = ((float)i / (float)TessellationLevel)'                              Y = ((float)2 * (float)j / (float)TessellationLevel)                          }                      };                        if (j == 0)                      {                          // bottom cap                          for (i = 0; i <= TessellationLevel; i++)                          {                              ushort i0 = 0;                              ushort i1 = (ushort)((i % TessellationLevel) + 1);                              ushort i2 = (ushort)i;                                Indices[indexCount++] = i0;                              Indices[indexCount++] = invertFaces ? i2 : i1;                              Indices[indexCount++] = invertFaces ? i1 : i2;                          }                      }                      else if (j < TessellationLevel / 2 - 1)                      {                          // middle area                          ushort i0 = (ushort)(vertexCount - 1);                          ushort i1 = (ushort)vertexCount;                          ushort i2 = (ushort)(vertexCount + TessellationLevel);                          ushort i3 = (ushort)(vertexCount + TessellationLevel + 1);                            Indices[indexCount++] = i0;                          Indices[indexCount++] = invertFaces ? i2 : i1;                          Indices[indexCount++] = invertFaces ? i1 : i2;                            Indices[indexCount++] = i1;                          Indices[indexCount++] = invertFaces ? i2 : i3;                          Indices[indexCount++] = invertFaces ? i3 : i2;                      }                      else if (j == TessellationLevel / 2)                      {                          // top cap                          for (i = 0; i <= TessellationLevel; i++)                          {                              ushort i0 = (ushort)(vertexCount - 1);                              ushort i1 = (ushort)((vertexCount - 1) - ((i % TessellationLevel) + 1));                              ushort i2 = (ushort)((vertexCount - 1) - i);                                Indices[indexCount++] = i0;                              Indices[indexCount++] = invertFaces ? i2 : i1;                              Indices[indexCount++] = invertFaces ? i1 : i2;                          }                      }                  }              }
Magic Number,C3DE.Graphics.Primitives,SphereMesh,C:\repos\demonixis_C3DE\C3DE\Graphics\Primitives\SphereMesh.cs,CreateGeometry,The following statement contains a magic number: for (int j = 0; j <= TessellationLevel / 2; j++)              {                  float theta = j * MathHelper.TwoPi / TessellationLevel - MathHelper.PiOver2;                    for (int i = 0; i <= TessellationLevel; i++)                  {                      float phi = i * MathHelper.TwoPi / TessellationLevel;                        Vertices[vertexCount++] = new VertexPositionNormalTexture()                      {                          Position = new Vector3()                          {                              X = (Radius * (float)(Math.Cos(theta) * Math.Cos(phi)))'                              Y = (Radius * (float)(Math.Sin(theta)))'                              Z = (Radius * (float)(Math.Cos(theta) * Math.Sin(phi)))                          }'                                                    TextureCoordinate = new Vector2()                          {                              X = ((float)i / (float)TessellationLevel)'                              Y = ((float)2 * (float)j / (float)TessellationLevel)                          }                      };                        if (j == 0)                      {                          // bottom cap                          for (i = 0; i <= TessellationLevel; i++)                          {                              ushort i0 = 0;                              ushort i1 = (ushort)((i % TessellationLevel) + 1);                              ushort i2 = (ushort)i;                                Indices[indexCount++] = i0;                              Indices[indexCount++] = invertFaces ? i2 : i1;                              Indices[indexCount++] = invertFaces ? i1 : i2;                          }                      }                      else if (j < TessellationLevel / 2 - 1)                      {                          // middle area                          ushort i0 = (ushort)(vertexCount - 1);                          ushort i1 = (ushort)vertexCount;                          ushort i2 = (ushort)(vertexCount + TessellationLevel);                          ushort i3 = (ushort)(vertexCount + TessellationLevel + 1);                            Indices[indexCount++] = i0;                          Indices[indexCount++] = invertFaces ? i2 : i1;                          Indices[indexCount++] = invertFaces ? i1 : i2;                            Indices[indexCount++] = i1;                          Indices[indexCount++] = invertFaces ? i2 : i3;                          Indices[indexCount++] = invertFaces ? i3 : i2;                      }                      else if (j == TessellationLevel / 2)                      {                          // top cap                          for (i = 0; i <= TessellationLevel; i++)                          {                              ushort i0 = (ushort)(vertexCount - 1);                              ushort i1 = (ushort)((vertexCount - 1) - ((i % TessellationLevel) + 1));                              ushort i2 = (ushort)((vertexCount - 1) - i);                                Indices[indexCount++] = i0;                              Indices[indexCount++] = invertFaces ? i2 : i1;                              Indices[indexCount++] = invertFaces ? i1 : i2;                          }                      }                  }              }
Magic Number,C3DE.Graphics.Primitives,TerrainMesh,C:\repos\demonixis_C3DE\C3DE\Graphics\Primitives\TerrainMesh.cs,TerrainMesh,The following statement contains a magic number: _width = 25;
Magic Number,C3DE.Graphics.Primitives,TerrainMesh,C:\repos\demonixis_C3DE\C3DE\Graphics\Primitives\TerrainMesh.cs,TerrainMesh,The following statement contains a magic number: _depth = 25;
Magic Number,C3DE.Graphics.Primitives,TerrainMesh,C:\repos\demonixis_C3DE\C3DE\Graphics\Primitives\TerrainMesh.cs,CreateGeometry,The following statement contains a magic number: var xx = -_width / 2;
Magic Number,C3DE.Graphics.Primitives,TerrainMesh,C:\repos\demonixis_C3DE\C3DE\Graphics\Primitives\TerrainMesh.cs,CreateGeometry,The following statement contains a magic number: for (int x = 0; x < _width; x++)              {                  var zz = -_depth / 2;                    for (int z = 0; z < _depth; z++)                  {                      Vertices[x + z * _width].Position = new Vector3(xx' _data[x' z]' zz);                        Vertices[x + z * _width].TextureCoordinate = new Vector2(                          ((float)x / (float)_width)'                          ((float)z / (float)_depth));                        Vertices[x + z * _width].Normal = Vector3.Up;                        zz++;                  }                    xx++;              }
Magic Number,C3DE.Graphics.Primitives,TerrainMesh,C:\repos\demonixis_C3DE\C3DE\Graphics\Primitives\TerrainMesh.cs,CreateGeometry,The following statement contains a magic number: Indices = new ushort[(_width - 1) * (_depth - 1) * 6];
Magic Number,C3DE.Graphics.Primitives,TorusMesh,C:\repos\demonixis_C3DE\C3DE\Graphics\Primitives\TorusMesh.cs,CreateGeometry,The following statement contains a magic number: NbSegments = Math.Max(3' NbSegments);
Magic Number,C3DE.Graphics.Primitives,TorusMesh,C:\repos\demonixis_C3DE\C3DE\Graphics\Primitives\TorusMesh.cs,CreateGeometry,The following statement contains a magic number: NbSlices = Math.Max(3' NbSlices);
Magic Number,C3DE.Graphics.Primitives,TorusMesh,C:\repos\demonixis_C3DE\C3DE\Graphics\Primitives\TorusMesh.cs,CreateGeometry,The following statement contains a magic number: Indices = new ushort[NbSegments * NbSlices * (lines ? 8 : 6)];
Magic Number,C3DE.Graphics.Primitives,TorusMesh,C:\repos\demonixis_C3DE\C3DE\Graphics\Primitives\TorusMesh.cs,CreateGeometry,The following statement contains a magic number: Indices = new ushort[NbSegments * NbSlices * (lines ? 8 : 6)];
Magic Number,C3DE.Inputs,TouchComponent,C:\repos\demonixis_C3DE\C3DE\Inputs\TouchComponent.cs,TouchComponent,The following statement contains a magic number: MaxDelta = 100;
Magic Number,C3DE.Inputs,GamepadComponent,C:\repos\demonixis_C3DE\C3DE\Inputs\GamepadComponent.cs,GamepadComponent,The following statement contains a magic number: _gpState = new GamePadState[4];
Magic Number,C3DE.Inputs,GamepadComponent,C:\repos\demonixis_C3DE\C3DE\Inputs\GamepadComponent.cs,GamepadComponent,The following statement contains a magic number: _previousGpState = new GamePadState[4];
Magic Number,C3DE.Graphics.Rendering,ForwardRenderer,C:\repos\demonixis_C3DE\C3DE\Graphics\Rendering\ForwardRenderer.cs,Dispose,The following statement contains a magic number: if (!m_IsDisposed)              {                  if (disposing)                  {                      DisposeObject(m_SceneRenderTarget);                        for (var eye = 0; eye < 2; eye++)                          DisposeObject(m_VRRenderTargets[eye]);                  }                  m_IsDisposed = true;              }
Magic Number,C3DE.Graphics.Rendering,ForwardRenderer,C:\repos\demonixis_C3DE\C3DE\Graphics\Rendering\ForwardRenderer.cs,RebuildRenderTargets,The following statement contains a magic number: for (var eye = 0; eye < 2; eye++)                  m_VRRenderTargets[eye]?.Dispose();
Magic Number,C3DE.Graphics.Rendering,ForwardRenderer,C:\repos\demonixis_C3DE\C3DE\Graphics\Rendering\ForwardRenderer.cs,RebuildRenderTargets,The following statement contains a magic number: if (m_VREnabled)              {                  for (var eye = 0; eye < 2; eye++)                      m_VRRenderTargets[eye] = m_VRService.CreateRenderTargetForEye(eye);              }              else                  m_SceneRenderTarget = new RenderTarget2D(m_graphicsDevice' m_graphicsDevice.Viewport.Width' m_graphicsDevice.Viewport.Height' false' m_HDRSupport ? SurfaceFormat.HdrBlendable : SurfaceFormat.Color' DepthFormat.Depth24Stencil8' 0' RenderTargetUsage.PreserveContents);
Magic Number,C3DE.Graphics.Rendering,ForwardRenderer,C:\repos\demonixis_C3DE\C3DE\Graphics\Rendering\ForwardRenderer.cs,Render,The following statement contains a magic number: if (m_VREnabled)              {                  for (var eye = 0; eye < 2; eye++)                  {                      camera.m_ProjectionMatrix = m_VRService.GetProjectionMatrix(eye);                      camera.m_ViewMatrix = m_VRService.GetViewMatrix(eye' Matrix.Identity);                        RenderSceneForCamera(scene' camera' m_VRRenderTargets[eye]);                  }                    m_VRService.SubmitRenderTargets(m_VRRenderTargets[0]' m_VRRenderTargets[1]);                  DrawVRPreview(0);              }              else                  RenderSceneForCamera(scene' camera' m_SceneRenderTarget);
Magic Number,C3DE.Graphics.Rendering,ForwardRenderer,C:\repos\demonixis_C3DE\C3DE\Graphics\Rendering\ForwardRenderer.cs,DrawVRPreview,The following statement contains a magic number: var offset = (pp.BackBufferWidth - width) / 2;
Magic Number,C3DE.Graphics.Rendering,ForwardRenderer,C:\repos\demonixis_C3DE\C3DE\Graphics\Rendering\ForwardRenderer.cs,DrawVRPreview,The following statement contains a magic number: if (StereoPreview || m_VRService.DistortionCorrectionRequired)              {                  width = pp.BackBufferWidth / 2;                  m_spriteBatch.Draw(m_VRRenderTargets[0]' new Rectangle(0' 0' width' height)' null' Color.White' 0' Vector2.Zero' m_VRService.PreviewRenderEffect' 0);                  m_VRService.ApplyDistortion(m_VRRenderTargets[0]' 0);                    m_spriteBatch.Draw(m_VRRenderTargets[1]' new Rectangle(width' 0' width' height)' null' Color.White' 0' Vector2.Zero' m_VRService.PreviewRenderEffect' 0);                  m_VRService.ApplyDistortion(m_VRRenderTargets[1]' 0);              }              else                  m_spriteBatch.Draw(m_VRRenderTargets[eye]' new Rectangle(offset' 0' width' height)' null' Color.White' 0' Vector2.Zero' m_VRService.PreviewRenderEffect' 0);
Magic Number,C3DE.UI,GUISkin,C:\repos\demonixis_C3DE\C3DE\UI\GUISkin.cs,GUISkin,The following statement contains a magic number: Buttons = new Texture2D[3];
Magic Number,C3DE.UI,GUISkin,C:\repos\demonixis_C3DE\C3DE\UI\GUISkin.cs,GUISkin,The following statement contains a magic number: Checkbox = new Texture2D[3];
Magic Number,C3DE.UI,GUISkin,C:\repos\demonixis_C3DE\C3DE\UI\GUISkin.cs,GUISkin,The following statement contains a magic number: Sliders = new Texture2D[2];
Magic Number,C3DE.UI,GUISkin,C:\repos\demonixis_C3DE\C3DE\UI\GUISkin.cs,LoadContent,The following statement contains a magic number: Box = GraphicsHelper.CreateBorderTexture(Color.White' new Color(0.08f' 0.12f' 0.16f' 0.7f)' 128' 128' 1);
Magic Number,C3DE.UI,GUISkin,C:\repos\demonixis_C3DE\C3DE\UI\GUISkin.cs,LoadContent,The following statement contains a magic number: Box = GraphicsHelper.CreateBorderTexture(Color.White' new Color(0.08f' 0.12f' 0.16f' 0.7f)' 128' 128' 1);
Magic Number,C3DE.UI,GUISkin,C:\repos\demonixis_C3DE\C3DE\UI\GUISkin.cs,LoadContent,The following statement contains a magic number: Border = GraphicsHelper.CreateBorderTexture(Color.White' new Color(0.08f' 0.12f' 0.16f' 0.7f)' 128' 128' 1);
Magic Number,C3DE.UI,GUISkin,C:\repos\demonixis_C3DE\C3DE\UI\GUISkin.cs,LoadContent,The following statement contains a magic number: Border = GraphicsHelper.CreateBorderTexture(Color.White' new Color(0.08f' 0.12f' 0.16f' 0.7f)' 128' 128' 1);
Magic Number,C3DE.UI,GUISkin,C:\repos\demonixis_C3DE\C3DE\UI\GUISkin.cs,LoadContent,The following statement contains a magic number: Buttons[0] = GraphicsHelper.CreateBorderTexture(Color.White' new Color(0.08f' 0.12f' 0.16f' 0.7f)' 128' 48' 1);
Magic Number,C3DE.UI,GUISkin,C:\repos\demonixis_C3DE\C3DE\UI\GUISkin.cs,LoadContent,The following statement contains a magic number: Buttons[0] = GraphicsHelper.CreateBorderTexture(Color.White' new Color(0.08f' 0.12f' 0.16f' 0.7f)' 128' 48' 1);
Magic Number,C3DE.UI,GUISkin,C:\repos\demonixis_C3DE\C3DE\UI\GUISkin.cs,LoadContent,The following statement contains a magic number: Buttons[1] = GraphicsHelper.CreateBorderTexture(Color.WhiteSmoke' new Color(0.16f' 0.19f' 0.23f' 0.7f)' 128' 48' 1);
Magic Number,C3DE.UI,GUISkin,C:\repos\demonixis_C3DE\C3DE\UI\GUISkin.cs,LoadContent,The following statement contains a magic number: Buttons[1] = GraphicsHelper.CreateBorderTexture(Color.WhiteSmoke' new Color(0.16f' 0.19f' 0.23f' 0.7f)' 128' 48' 1);
Magic Number,C3DE.UI,GUISkin,C:\repos\demonixis_C3DE\C3DE\UI\GUISkin.cs,LoadContent,The following statement contains a magic number: Buttons[2] =  GraphicsHelper.CreateBorderTexture(Color.LightGray' new Color(0.19f' 0.23f' 0.27f' 0.7f)' 128' 48' 1);
Magic Number,C3DE.UI,GUISkin,C:\repos\demonixis_C3DE\C3DE\UI\GUISkin.cs,LoadContent,The following statement contains a magic number: Buttons[2] =  GraphicsHelper.CreateBorderTexture(Color.LightGray' new Color(0.19f' 0.23f' 0.27f' 0.7f)' 128' 48' 1);
Magic Number,C3DE.UI,GUISkin,C:\repos\demonixis_C3DE\C3DE\UI\GUISkin.cs,LoadContent,The following statement contains a magic number: Buttons[2] =  GraphicsHelper.CreateBorderTexture(Color.LightGray' new Color(0.19f' 0.23f' 0.27f' 0.7f)' 128' 48' 1);
Magic Number,C3DE.UI,GUISkin,C:\repos\demonixis_C3DE\C3DE\UI\GUISkin.cs,LoadContent,The following statement contains a magic number: Checkbox[0] = GraphicsHelper.CreateBorderTexture(Color.White' new Color(0.08f' 0.12f' 0.16f' 0.7f)' 48' 48' 2);
Magic Number,C3DE.UI,GUISkin,C:\repos\demonixis_C3DE\C3DE\UI\GUISkin.cs,LoadContent,The following statement contains a magic number: Checkbox[0] = GraphicsHelper.CreateBorderTexture(Color.White' new Color(0.08f' 0.12f' 0.16f' 0.7f)' 48' 48' 2);
Magic Number,C3DE.UI,GUISkin,C:\repos\demonixis_C3DE\C3DE\UI\GUISkin.cs,LoadContent,The following statement contains a magic number: Checkbox[0] = GraphicsHelper.CreateBorderTexture(Color.White' new Color(0.08f' 0.12f' 0.16f' 0.7f)' 48' 48' 2);
Magic Number,C3DE.UI,GUISkin,C:\repos\demonixis_C3DE\C3DE\UI\GUISkin.cs,LoadContent,The following statement contains a magic number: Checkbox[2] = GraphicsHelper.CreateTexture(Color.White' 1' 1);
Magic Number,C3DE.UI,GUISkin,C:\repos\demonixis_C3DE\C3DE\UI\GUISkin.cs,LoadContent,The following statement contains a magic number: Sliders[1] = GraphicsHelper.CreateGradiantTexture(Color.LightBlue' Color.CadetBlue' 16' 16);
Magic Number,C3DE.UI,GUISkin,C:\repos\demonixis_C3DE\C3DE\UI\GUISkin.cs,LoadContent,The following statement contains a magic number: Sliders[1] = GraphicsHelper.CreateGradiantTexture(Color.LightBlue' Color.CadetBlue' 16' 16);
Magic Number,C3DE.UI,GUI,C:\repos\demonixis_C3DE\C3DE\UI\GUI.cs,GUI,The following statement contains a magic number: if (uiMatrix[0] == 1 && uiMatrix[5] == 1)                  uiMatrix = Matrix.Identity;
Magic Number,C3DE.UI,GUI,C:\repos\demonixis_C3DE\C3DE\UI\GUI.cs,Box,The following statement contains a magic number: _cacheVec2.X = (rect.X + rect.Width / 2) - (_cacheVec2.X / 2);
Magic Number,C3DE.UI,GUI,C:\repos\demonixis_C3DE\C3DE\UI\GUI.cs,Box,The following statement contains a magic number: _cacheVec2.X = (rect.X + rect.Width / 2) - (_cacheVec2.X / 2);
Magic Number,C3DE.UI,GUI,C:\repos\demonixis_C3DE\C3DE\UI\GUI.cs,Button,The following statement contains a magic number: if (rect.Contains(_cacheVec2))              {                  index = 1;                  if (Input.Mouse.JustClicked() || Input.Touch.JustPressed())                      index = 2;              }
Magic Number,C3DE.UI,GUI,C:\repos\demonixis_C3DE\C3DE\UI\GUI.cs,Button,The following statement contains a magic number: _cacheVec2.X = (rect.X + rect.Width / 2) - (_cacheVec2.X / 2);
Magic Number,C3DE.UI,GUI,C:\repos\demonixis_C3DE\C3DE\UI\GUI.cs,Button,The following statement contains a magic number: _cacheVec2.X = (rect.X + rect.Width / 2) - (_cacheVec2.X / 2);
Magic Number,C3DE.UI,GUI,C:\repos\demonixis_C3DE\C3DE\UI\GUI.cs,Button,The following statement contains a magic number: _cacheVec2.Y = (rect.Y + rect.Height / 2) - (_cacheVec2.Y / 2);
Magic Number,C3DE.UI,GUI,C:\repos\demonixis_C3DE\C3DE\UI\GUI.cs,Button,The following statement contains a magic number: _cacheVec2.Y = (rect.Y + rect.Height / 2) - (_cacheVec2.Y / 2);
Magic Number,C3DE.UI,GUI,C:\repos\demonixis_C3DE\C3DE\UI\GUI.cs,Button,The following statement contains a magic number: return index == 2;
Magic Number,C3DE.UI,GUI,C:\repos\demonixis_C3DE\C3DE\UI\GUI.cs,Checkbox,The following statement contains a magic number: var index = isChecked ? 2 : 0;
Magic Number,C3DE.UI,GUI,C:\repos\demonixis_C3DE\C3DE\UI\GUI.cs,Checkbox,The following statement contains a magic number: _cacheVec2.Y = rect.Y + rect.Height / 2 - _cacheVec2.Y / 2;
Magic Number,C3DE.UI,GUI,C:\repos\demonixis_C3DE\C3DE\UI\GUI.cs,Checkbox,The following statement contains a magic number: _cacheVec2.Y = rect.Y + rect.Height / 2 - _cacheVec2.Y / 2;
Magic Number,C3DE.UI,GUI,C:\repos\demonixis_C3DE\C3DE\UI\GUI.cs,Checkbox,The following statement contains a magic number: if (isChecked)              {                  _cacheRect.X = rect.X + 4;                  _cacheRect.Y = rect.Y + 4;                  _cacheRect.Width = rect.Height - 8;                  _cacheRect.Height = rect.Height - 8;                    _spriteBatch.Draw(Skin.Checkbox[2]' _cacheRect' Color.White);              }
Magic Number,C3DE.UI,GUI,C:\repos\demonixis_C3DE\C3DE\UI\GUI.cs,Checkbox,The following statement contains a magic number: if (isChecked)              {                  _cacheRect.X = rect.X + 4;                  _cacheRect.Y = rect.Y + 4;                  _cacheRect.Width = rect.Height - 8;                  _cacheRect.Height = rect.Height - 8;                    _spriteBatch.Draw(Skin.Checkbox[2]' _cacheRect' Color.White);              }
Magic Number,C3DE.UI,GUI,C:\repos\demonixis_C3DE\C3DE\UI\GUI.cs,Checkbox,The following statement contains a magic number: if (isChecked)              {                  _cacheRect.X = rect.X + 4;                  _cacheRect.Y = rect.Y + 4;                  _cacheRect.Width = rect.Height - 8;                  _cacheRect.Height = rect.Height - 8;                    _spriteBatch.Draw(Skin.Checkbox[2]' _cacheRect' Color.White);              }
Magic Number,C3DE.UI,GUI,C:\repos\demonixis_C3DE\C3DE\UI\GUI.cs,Checkbox,The following statement contains a magic number: if (isChecked)              {                  _cacheRect.X = rect.X + 4;                  _cacheRect.Y = rect.Y + 4;                  _cacheRect.Width = rect.Height - 8;                  _cacheRect.Height = rect.Height - 8;                    _spriteBatch.Draw(Skin.Checkbox[2]' _cacheRect' Color.White);              }
Magic Number,C3DE.UI,GUI,C:\repos\demonixis_C3DE\C3DE\UI\GUI.cs,Checkbox,The following statement contains a magic number: if (isChecked)              {                  _cacheRect.X = rect.X + 4;                  _cacheRect.Y = rect.Y + 4;                  _cacheRect.Width = rect.Height - 8;                  _cacheRect.Height = rect.Height - 8;                    _spriteBatch.Draw(Skin.Checkbox[2]' _cacheRect' Color.White);              }
Magic Number,C3DE.UI,GUI,C:\repos\demonixis_C3DE\C3DE\UI\GUI.cs,Checkbox,The following statement contains a magic number: if (rect.Contains(_cacheVec2))              {                  index = 1;                    if (Input.Mouse.JustClicked() || Input.Touch.JustPressed())                      index = isChecked ? 0 : 2;                    _cacheRect.X = rect.X + 4;                  _cacheRect.Y = rect.Y + 4;                  _cacheRect.Width = rect.Height - 8;                  _cacheRect.Height = rect.Height - 8; ;                    if (!isChecked)                      _spriteBatch.Draw(Skin.Checkbox[index]' _cacheRect' Color.White);                    // Restore previous state if not clicked                  if (isChecked && index > 0)                      index = 2;              }
Magic Number,C3DE.UI,GUI,C:\repos\demonixis_C3DE\C3DE\UI\GUI.cs,Checkbox,The following statement contains a magic number: if (rect.Contains(_cacheVec2))              {                  index = 1;                    if (Input.Mouse.JustClicked() || Input.Touch.JustPressed())                      index = isChecked ? 0 : 2;                    _cacheRect.X = rect.X + 4;                  _cacheRect.Y = rect.Y + 4;                  _cacheRect.Width = rect.Height - 8;                  _cacheRect.Height = rect.Height - 8; ;                    if (!isChecked)                      _spriteBatch.Draw(Skin.Checkbox[index]' _cacheRect' Color.White);                    // Restore previous state if not clicked                  if (isChecked && index > 0)                      index = 2;              }
Magic Number,C3DE.UI,GUI,C:\repos\demonixis_C3DE\C3DE\UI\GUI.cs,Checkbox,The following statement contains a magic number: if (rect.Contains(_cacheVec2))              {                  index = 1;                    if (Input.Mouse.JustClicked() || Input.Touch.JustPressed())                      index = isChecked ? 0 : 2;                    _cacheRect.X = rect.X + 4;                  _cacheRect.Y = rect.Y + 4;                  _cacheRect.Width = rect.Height - 8;                  _cacheRect.Height = rect.Height - 8; ;                    if (!isChecked)                      _spriteBatch.Draw(Skin.Checkbox[index]' _cacheRect' Color.White);                    // Restore previous state if not clicked                  if (isChecked && index > 0)                      index = 2;              }
Magic Number,C3DE.UI,GUI,C:\repos\demonixis_C3DE\C3DE\UI\GUI.cs,Checkbox,The following statement contains a magic number: if (rect.Contains(_cacheVec2))              {                  index = 1;                    if (Input.Mouse.JustClicked() || Input.Touch.JustPressed())                      index = isChecked ? 0 : 2;                    _cacheRect.X = rect.X + 4;                  _cacheRect.Y = rect.Y + 4;                  _cacheRect.Width = rect.Height - 8;                  _cacheRect.Height = rect.Height - 8; ;                    if (!isChecked)                      _spriteBatch.Draw(Skin.Checkbox[index]' _cacheRect' Color.White);                    // Restore previous state if not clicked                  if (isChecked && index > 0)                      index = 2;              }
Magic Number,C3DE.UI,GUI,C:\repos\demonixis_C3DE\C3DE\UI\GUI.cs,Checkbox,The following statement contains a magic number: if (rect.Contains(_cacheVec2))              {                  index = 1;                    if (Input.Mouse.JustClicked() || Input.Touch.JustPressed())                      index = isChecked ? 0 : 2;                    _cacheRect.X = rect.X + 4;                  _cacheRect.Y = rect.Y + 4;                  _cacheRect.Width = rect.Height - 8;                  _cacheRect.Height = rect.Height - 8; ;                    if (!isChecked)                      _spriteBatch.Draw(Skin.Checkbox[index]' _cacheRect' Color.White);                    // Restore previous state if not clicked                  if (isChecked && index > 0)                      index = 2;              }
Magic Number,C3DE.UI,GUI,C:\repos\demonixis_C3DE\C3DE\UI\GUI.cs,Checkbox,The following statement contains a magic number: if (rect.Contains(_cacheVec2))              {                  index = 1;                    if (Input.Mouse.JustClicked() || Input.Touch.JustPressed())                      index = isChecked ? 0 : 2;                    _cacheRect.X = rect.X + 4;                  _cacheRect.Y = rect.Y + 4;                  _cacheRect.Width = rect.Height - 8;                  _cacheRect.Height = rect.Height - 8; ;                    if (!isChecked)                      _spriteBatch.Draw(Skin.Checkbox[index]' _cacheRect' Color.White);                    // Restore previous state if not clicked                  if (isChecked && index > 0)                      index = 2;              }
Magic Number,C3DE.UI,GUI,C:\repos\demonixis_C3DE\C3DE\UI\GUI.cs,Checkbox,The following statement contains a magic number: return index == 2;
Magic Number,C3DE.UI,GUI,C:\repos\demonixis_C3DE\C3DE\UI\GUI.cs,Slider,The following statement contains a magic number: _cacheRect.X = rect.X + 4;
Magic Number,C3DE.UI,GUI,C:\repos\demonixis_C3DE\C3DE\UI\GUI.cs,Slider,The following statement contains a magic number: _cacheRect.Y = rect.Y + 4;
Magic Number,C3DE.UI,GUI,C:\repos\demonixis_C3DE\C3DE\UI\GUI.cs,Slider,The following statement contains a magic number: _cacheRect.Width = horizontal ? (int)(rect.Width * value) - 8 : rect.Width - 8;
Magic Number,C3DE.UI,GUI,C:\repos\demonixis_C3DE\C3DE\UI\GUI.cs,Slider,The following statement contains a magic number: _cacheRect.Width = horizontal ? (int)(rect.Width * value) - 8 : rect.Width - 8;
Magic Number,C3DE.UI,GUI,C:\repos\demonixis_C3DE\C3DE\UI\GUI.cs,Slider,The following statement contains a magic number: _cacheRect.Height = !horizontal ? (int)(rect.Height * value) - 8 : rect.Height - 8;
Magic Number,C3DE.UI,GUI,C:\repos\demonixis_C3DE\C3DE\UI\GUI.cs,Slider,The following statement contains a magic number: _cacheRect.Height = !horizontal ? (int)(rect.Height * value) - 8 : rect.Height - 8;
Magic Number,C3DE.Utils,GraphicsHelper,C:\repos\demonixis_C3DE\C3DE\Utils\GraphicsHelper.cs,CreateCubeMap,The following statement contains a magic number: for (int i = 0; i < 6; i++)                  cubeMap.SetData<Color>((CubeMapFace)i' textureData);
Magic Number,C3DE.Utils,GraphicsHelper,C:\repos\demonixis_C3DE\C3DE\Utils\GraphicsHelper.cs,CreateTriangleTexture,The following statement contains a magic number: var triangle = new Point[3]              {                  new Point(0' 0)'                  new Point(0' height)'                  new Point(width' height)              };
Magic Number,C3DE.Utils,GraphicsHelper,C:\repos\demonixis_C3DE\C3DE\Utils\GraphicsHelper.cs,Combine,The following statement contains a magic number: var tex2Position = new Vector2(texture1.Width / 2 - texture2.Width / 2' texture1.Height / 2 - texture2.Height / 2);
Magic Number,C3DE.Utils,GraphicsHelper,C:\repos\demonixis_C3DE\C3DE\Utils\GraphicsHelper.cs,Combine,The following statement contains a magic number: var tex2Position = new Vector2(texture1.Width / 2 - texture2.Width / 2' texture1.Height / 2 - texture2.Height / 2);
Magic Number,C3DE.Utils,GraphicsHelper,C:\repos\demonixis_C3DE\C3DE\Utils\GraphicsHelper.cs,Combine,The following statement contains a magic number: var tex2Position = new Vector2(texture1.Width / 2 - texture2.Width / 2' texture1.Height / 2 - texture2.Height / 2);
Magic Number,C3DE.Utils,GraphicsHelper,C:\repos\demonixis_C3DE\C3DE\Utils\GraphicsHelper.cs,Combine,The following statement contains a magic number: var tex2Position = new Vector2(texture1.Width / 2 - texture2.Width / 2' texture1.Height / 2 - texture2.Height / 2);
Magic Number,C3DE.Utils,GraphicsHelper,C:\repos\demonixis_C3DE\C3DE\Utils\GraphicsHelper.cs,IsPointInsideTriangle,The following statement contains a magic number: float z2 = ComputeZCoordinate(ref triangle[1]' ref triangle[2]' ref point);
Magic Number,C3DE.Utils,GraphicsHelper,C:\repos\demonixis_C3DE\C3DE\Utils\GraphicsHelper.cs,IsPointInsideTriangle,The following statement contains a magic number: float z3 = ComputeZCoordinate(ref triangle[2]' ref triangle[0]' ref point);
Magic Number,C3DE.Utils,NoiseGenerator,C:\repos\demonixis_C3DE\C3DE\Utils\NoiseGenerator.cs,NoiseGenerator,The following statement contains a magic number: NoiseGenerator.Octaves = 6;
Magic Number,C3DE.Utils,NoiseGenerator,C:\repos\demonixis_C3DE\C3DE\Utils\NoiseGenerator.cs,NoiseGenerator,The following statement contains a magic number: NoiseGenerator.Amplitude = 12;
Magic Number,C3DE.Utils,NoiseGenerator,C:\repos\demonixis_C3DE\C3DE\Utils\NoiseGenerator.cs,NoiseGenerator,The following statement contains a magic number: NoiseGenerator.Frequency = 0.045;
Magic Number,C3DE.Utils,NoiseGenerator,C:\repos\demonixis_C3DE\C3DE\Utils\NoiseGenerator.cs,NoiseGenerator,The following statement contains a magic number: NoiseGenerator.Persistence = 0.3;
Magic Number,C3DE.Utils,NoiseGenerator,C:\repos\demonixis_C3DE\C3DE\Utils\NoiseGenerator.cs,Noise,The following statement contains a magic number: for (int i = 0; i < NoiseGenerator.Octaves; ++i)              {                  total = total + NoiseGenerator.Smooth(x * freq' y * freq) * amp;                  freq *= 2;                  amp *= NoiseGenerator.Persistence;              }
Magic Number,C3DE.Utils,NoiseGenerator,C:\repos\demonixis_C3DE\C3DE\Utils\NoiseGenerator.cs,Noise,The following statement contains a magic number: if (total < -2.4) total = -2.4;              else if (total > 2.4) total = 2.4;
Magic Number,C3DE.Utils,NoiseGenerator,C:\repos\demonixis_C3DE\C3DE\Utils\NoiseGenerator.cs,Noise,The following statement contains a magic number: if (total < -2.4) total = -2.4;              else if (total > 2.4) total = 2.4;
Magic Number,C3DE.Utils,NoiseGenerator,C:\repos\demonixis_C3DE\C3DE\Utils\NoiseGenerator.cs,Noise,The following statement contains a magic number: if (total < -2.4) total = -2.4;              else if (total > 2.4) total = 2.4;
Magic Number,C3DE.Utils,NoiseGenerator,C:\repos\demonixis_C3DE\C3DE\Utils\NoiseGenerator.cs,Noise,The following statement contains a magic number: if (total < -2.4) total = -2.4;              else if (total > 2.4) total = 2.4;
Magic Number,C3DE.Utils,NoiseGenerator,C:\repos\demonixis_C3DE\C3DE\Utils\NoiseGenerator.cs,Noise,The following statement contains a magic number: return (total / 2.4);
Magic Number,C3DE.Utils,NoiseGenerator,C:\repos\demonixis_C3DE\C3DE\Utils\NoiseGenerator.cs,NoiseGeneration,The following statement contains a magic number: int n = x + y * 57;
Magic Number,C3DE.Utils,NoiseGenerator,C:\repos\demonixis_C3DE\C3DE\Utils\NoiseGenerator.cs,NoiseGeneration,The following statement contains a magic number: n = (n << 13) ^ n;
Magic Number,C3DE.Utils,NoiseGenerator,C:\repos\demonixis_C3DE\C3DE\Utils\NoiseGenerator.cs,NoiseGeneration,The following statement contains a magic number: return (1.0 - ((n * (n * n * 15731 + 789221) + NoiseGenerator.Seed) & 0x7fffffff) / 1073741824.0);
Magic Number,C3DE.Utils,NoiseGenerator,C:\repos\demonixis_C3DE\C3DE\Utils\NoiseGenerator.cs,NoiseGeneration,The following statement contains a magic number: return (1.0 - ((n * (n * n * 15731 + 789221) + NoiseGenerator.Seed) & 0x7fffffff) / 1073741824.0);
Magic Number,C3DE.Utils,NoiseGenerator,C:\repos\demonixis_C3DE\C3DE\Utils\NoiseGenerator.cs,NoiseGeneration,The following statement contains a magic number: return (1.0 - ((n * (n * n * 15731 + 789221) + NoiseGenerator.Seed) & 0x7fffffff) / 1073741824.0);
Magic Number,C3DE.Utils,NoiseGenerator,C:\repos\demonixis_C3DE\C3DE\Utils\NoiseGenerator.cs,Interpolate,The following statement contains a magic number: double value = (1 - Math.Cos(a * Math.PI)) * 0.5;
Magic Number,C3DE.VR,NullVRService,C:\repos\demonixis_C3DE\C3DE\VR\NullVRService.cs,CreateRenderTargetForEye,The following statement contains a magic number: return new RenderTarget2D(Game.GraphicsDevice' Screen.Width / 2' Screen.Height' false' SurfaceFormat.Color' DepthFormat.Depth24Stencil8);
Missing Default,C3DE.Graphics.PostProcessing,Bloom,C:\repos\demonixis_C3DE\C3DE\Graphics\PostProcessing\Bloom.cs,SetBloomPreset,The following switch statement is missing a default case: switch (preset)              {                  case BloomPresets.Wide:                      {                          _bloomStrength1 = 0.5f;                          _bloomStrength2 = 1;                          _bloomStrength3 = 2;                          _bloomStrength4 = 1;                          _bloomStrength5 = 2;                          _bloomRadius5 = 4.0f;                          _bloomRadius4 = 4.0f;                          _bloomRadius3 = 2.0f;                          _bloomRadius2 = 2.0f;                          _bloomRadius1 = 1.0f;                          BloomStreakLength = 1;                          BloomDownsamplePasses = 5;                          break;                      }                  case BloomPresets.SuperWide:                      {                          _bloomStrength1 = 0.9f;                          _bloomStrength2 = 1;                          _bloomStrength3 = 1;                          _bloomStrength4 = 2;                          _bloomStrength5 = 6;                          _bloomRadius5 = 4.0f;                          _bloomRadius4 = 2.0f;                          _bloomRadius3 = 2.0f;                          _bloomRadius2 = 2.0f;                          _bloomRadius1 = 2.0f;                          BloomStreakLength = 1;                          BloomDownsamplePasses = 5;                          break;                      }                  case BloomPresets.Focussed:                      {                          _bloomStrength1 = 0.8f;                          _bloomStrength2 = 1;                          _bloomStrength3 = 1;                          _bloomStrength4 = 1;                          _bloomStrength5 = 2;                          _bloomRadius5 = 4.0f;                          _bloomRadius4 = 2.0f;                          _bloomRadius3 = 2.0f;                          _bloomRadius2 = 2.0f;                          _bloomRadius1 = 2.0f;                          BloomStreakLength = 1;                          BloomDownsamplePasses = 5;                          break;                      }                  case BloomPresets.Small:                      {                          _bloomStrength1 = 0.8f;                          _bloomStrength2 = 1;                          _bloomStrength3 = 1;                          _bloomStrength4 = 1;                          _bloomStrength5 = 1;                          _bloomRadius5 = 1;                          _bloomRadius4 = 1;                          _bloomRadius3 = 1;                          _bloomRadius2 = 1;                          _bloomRadius1 = 1;                          BloomStreakLength = 1;                          BloomDownsamplePasses = 5;                          break;                      }                  case BloomPresets.Cheap:                      {                          _bloomStrength1 = 0.8f;                          _bloomStrength2 = 2;                          _bloomRadius2 = 2;                          _bloomRadius1 = 2;                          BloomStreakLength = 1;                          BloomDownsamplePasses = 2;                          break;                      }                  case BloomPresets.One:                      {                          _bloomStrength1 = 4f;                          _bloomStrength2 = 1;                          _bloomStrength3 = 1;                          _bloomStrength4 = 1;                          _bloomStrength5 = 2;                          _bloomRadius5 = 1.0f;                          _bloomRadius4 = 1.0f;                          _bloomRadius3 = 1.0f;                          _bloomRadius2 = 1.0f;                          _bloomRadius1 = 1.0f;                          BloomStreakLength = 1;                          BloomDownsamplePasses = 5;                          break;                      }              }
Missing Default,C3DE.Inputs,MouseComponent,C:\repos\demonixis_C3DE\C3DE\Inputs\MouseComponent.cs,MouseButtonState,The following switch statement is missing a default case: switch (button)              {                  case MouseButton.Left: result = _mouseState.LeftButton == state; break;                  case MouseButton.Middle: result = _mouseState.MiddleButton == state; break;                  case MouseButton.Right: result = _mouseState.RightButton == state; break;              }
