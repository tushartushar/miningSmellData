Implementation smell,Namespace,Class,File,Method,Description
Long Identifier,MefContrib.Hosting.Conventions,AppDomainPartRegistryLocator,C:\repos\MefContrib_MefContrib\src\MefContrib\Hosting\Conventions\AppDomainPartRegistryLocator.cs,GetPublicPartRegistryInstancesInAppDomain,The length of the parameter registryInstancesLocatedInDomain is 32.
Long Identifier,MefContrib.Hosting.Conventions,ConventionPartCreator,C:\repos\MefContrib_MefContrib\src\MefContrib\Hosting\Conventions\ConventionPartCreator.cs,CreateExportDefinitions,The length of the parameter exportDefinitionsFromConvention is 31.
Long Identifier,MefContrib.Hosting.Conventions,ConventionPartCreator,C:\repos\MefContrib_MefContrib\src\MefContrib\Hosting\Conventions\ConventionPartCreator.cs,CreateImportDefinitions,The length of the parameter importDefinitionsFromConvention is 31.
Long Identifier,MefContrib.Hosting.Generics,GenericContractRegistryBase,C:\repos\MefContrib_MefContrib\src\MefContrib\Hosting\Generics\GenericContractRegistryBase.cs,Register,The length of the parameter genericImplementationTypeDefinition is 35.
Long Identifier,MefContrib.Hosting.Generics,GenericContractTypeMapping,C:\repos\MefContrib_MefContrib\src\MefContrib\Hosting\Generics\GenericContractTypeMapping.cs,GenericContractTypeMapping,The length of the parameter genericImplementationTypeDefinition is 35.
Long Identifier,MefContrib.Hosting.Generics,GenericContractTypeMapping,C:\repos\MefContrib_MefContrib\src\MefContrib\Hosting\Generics\GenericContractTypeMapping.cs,,The length of the parameter genericContractTypeDefinitionDefinition is 39.
Long Identifier,MefContrib.Hosting.Generics,GenericExportHandler,C:\repos\MefContrib_MefContrib\src\MefContrib\Hosting\Generics\GenericExportHandler.cs,CreateGenericParts,The length of the parameter genericImportTypeImplementations is 32.
Long Identifier,MefContrib.Hosting.Interception,InterceptingCatalog,C:\repos\MefContrib_MefContrib\src\MefContrib\Hosting\Interception\InterceptingCatalog.cs,InitializeRecomposition,The length of the parameter interceptedCatalogNotifyChange is 30.
Long Statement,MefContrib.Hosting.Conventions,ConventionPartCreator,C:\repos\MefContrib_MefContrib\src\MefContrib\Hosting\Conventions\ConventionPartCreator.cs,CreateImportDefinitions,The length of the statement  "                        importDefinitionsFromConvention.AddRange(((ConstructorInfo)member).GetParameters().Select(parameter => GetImportParameterDefinition(importConvention' parameter))); " is 163.
Long Statement,MefContrib.Hosting.Conventions.Configuration,PartConventionBuilderExtensions,C:\repos\MefContrib_MefContrib\src\MefContrib\Hosting\Conventions\Configuration\PartConventionBuilderExtensions.cs,ImportProperty,The length of the statement  "            builder.Imports(i => i.Import().Members(m => new[] { m.GetProperty(propertyName) }).ContractType(t => contractType).ContractName(contractName)); " is 144.
Long Statement,MefContrib.Hosting.Conventions.Configuration,PartConventionBuilderExtensions,C:\repos\MefContrib_MefContrib\src\MefContrib\Hosting\Conventions\Configuration\PartConventionBuilderExtensions.cs,ImportField,The length of the statement  "            builder.Imports(i => i.Import().Members(m => new[] { m.GetField(fieldName) }).ContractType(t => contractType).ContractName(contractName)); " is 138.
Long Statement,MefContrib.Hosting.Conventions.Configuration,PartConventionBuilderExtensions,C:\repos\MefContrib_MefContrib\src\MefContrib\Hosting\Conventions\Configuration\PartConventionBuilderExtensions.cs,ExportProperty,The length of the statement  "            builder.Exports(x => x.Export().Members(m => new[] { m.GetProperty(propertyName) }).ContractType(m => contractType).ContractName(contractName)); " is 144.
Long Statement,MefContrib.Hosting.Conventions.Configuration,PartConventionBuilderExtensions,C:\repos\MefContrib_MefContrib\src\MefContrib\Hosting\Conventions\Configuration\PartConventionBuilderExtensions.cs,ExportField,The length of the statement  "            builder.Exports(x => x.Export().Members(m => new[] { m.GetField(fieldName) }).ContractType(m => contractType).ContractName(contractName)); " is 138.
Long Statement,MefContrib.Hosting.Filter,HasCreationPolicy,C:\repos\MefContrib_MefContrib\src\MefContrib\Hosting\Filter\CommonFilters.cs,Filter,The length of the statement  "            if (creationPolicy == CreationPolicy.Any && !part.Metadata.ContainsKey(CompositionConstants.PartCreationPolicyMetadataName)) " is 124.
Long Statement,MefContrib.Hosting.Generics,GenericTypeCatalog,C:\repos\MefContrib_MefContrib\src\MefContrib\Hosting\Generics\GenericTypeCatalog.cs,RewritePart,The length of the statement  "                    foreach (var key in exportDefinition.Metadata.Keys.Where(key => key != CompositionConstants.ExportTypeIdentityMetadataName)) " is 124.
Missing Default,MefContrib.Hosting.Conventions,MemberInfoExtensions,C:\repos\MefContrib_MefContrib\src\MefContrib\Hosting\Conventions\MemberInfoExtensions.cs,GetCardinality,The following switch statement is missing a default case: switch (member.MemberType)              {                  case MemberTypes.Field:                      importType = ((FieldInfo)member).FieldType;                      break;                    case MemberTypes.Property:                      importType = ((PropertyInfo)member).PropertyType;                      break;              }
Missing Default,MefContrib.Hosting.Conventions.Configuration,ExpressionBuilder<T>,C:\repos\MefContrib_MefContrib\src\MefContrib\Hosting\Conventions\Configuration\ExpressionBuilder.cs,SetCollectionValue,The following switch statement is missing a default case: switch (member.MemberType)              {                  case MemberTypes.Field:                      collection = ((FieldInfo)member).GetValue(instance);                      break;                    case MemberTypes.Property:                      collection = ((PropertyInfo)member).GetValue(instance' null);                      break;              }
Missing Default,MefContrib.Hosting.Conventions.Configuration,ExpressionBuilder<T>,C:\repos\MefContrib_MefContrib\src\MefContrib\Hosting\Conventions\Configuration\ExpressionBuilder.cs,SetSingleValue,The following switch statement is missing a default case: switch (member.MemberType)              {                  case MemberTypes.Field:                      ((FieldInfo)member).SetValue(instance' value.First());                      break;                    case MemberTypes.Property:                      ((PropertyInfo)member).SetValue(instance' value.First()' null);                      break;              }
