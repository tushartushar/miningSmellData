Implementation smell,Namespace,Class,File,Method,Description
Long Statement,Http2Download,Program,C:\repos\masroore_CurlSharp\Samples\Http2Download\Http2Download.cs,Main,The length of the statement  "                    /* On success the value of maxfd is guaranteed to be >= -1. We call select(maxfd + 1' ...); specially in case of (maxfd == -1) there are no fds ready yet so we call select(0' ...) --or Sleep() on Windows-- to sleep 100ms' which is the minimum suggested value in the curl_multi_fdset() doc. */ " is 292.
Magic Number,Http2Download,Program,C:\repos\masroore_CurlSharp\Samples\Http2Download\Http2Download.cs,Main,The following statement contains a magic number: using (var multi = new CurlMulti())              {                  foreach (var url in new[]                  {                      "https://www.google.com"'                      "https://www.yahoo.com"'                      "http://edition.cnn.com"'                      "https://news.ycombinator.com"'                      "https://pages.github.com"                  })                  {                      Writers.Add(url' new BinaryWriter(new FileStream($"dl-{HostName(url)}.html"' FileMode.Create)));                      var easy = CreateEasy(url);                      multi.AddHandle(easy);                      handles.Add(easy);                  }                    multi.Pipelining = CurlPipelining.Multiplex;                    var stillRunning = 1;                  // call CurlMulti.Perform right away (note ref qualifier)                  multi.Perform(ref stillRunning);                    while (stillRunning != 0)                  {                      var mc = multi.FdSet();                      if (mc != CurlMultiCode.Ok)                      {                          WriteLine($"curl_multi_fdset() failed' code: {mc}");                          break;                      }                        /* On success the value of maxfd is guaranteed to be >= -1. We call select(maxfd + 1' ...); specially in case of (maxfd == -1) there are no fds ready yet so we call select(0' ...) --or Sleep() on Windows-- to sleep 100ms' which is the minimum suggested value in the curl_multi_fdset() doc. */                      var rc = 0;                        if (multi.MaxFd == -1) Thread.Sleep(100);                      else                          rc = multi.Select(1000); // one second                        switch (rc)                      {                          case -1: // select error                              break;                          default:                          {                              multi.Perform(ref stillRunning);                              break;                          }                      }                  }              }
Magic Number,Http2Download,Program,C:\repos\masroore_CurlSharp\Samples\Http2Download\Http2Download.cs,Main,The following statement contains a magic number: using (var multi = new CurlMulti())              {                  foreach (var url in new[]                  {                      "https://www.google.com"'                      "https://www.yahoo.com"'                      "http://edition.cnn.com"'                      "https://news.ycombinator.com"'                      "https://pages.github.com"                  })                  {                      Writers.Add(url' new BinaryWriter(new FileStream($"dl-{HostName(url)}.html"' FileMode.Create)));                      var easy = CreateEasy(url);                      multi.AddHandle(easy);                      handles.Add(easy);                  }                    multi.Pipelining = CurlPipelining.Multiplex;                    var stillRunning = 1;                  // call CurlMulti.Perform right away (note ref qualifier)                  multi.Perform(ref stillRunning);                    while (stillRunning != 0)                  {                      var mc = multi.FdSet();                      if (mc != CurlMultiCode.Ok)                      {                          WriteLine($"curl_multi_fdset() failed' code: {mc}");                          break;                      }                        /* On success the value of maxfd is guaranteed to be >= -1. We call select(maxfd + 1' ...); specially in case of (maxfd == -1) there are no fds ready yet so we call select(0' ...) --or Sleep() on Windows-- to sleep 100ms' which is the minimum suggested value in the curl_multi_fdset() doc. */                      var rc = 0;                        if (multi.MaxFd == -1) Thread.Sleep(100);                      else                          rc = multi.Select(1000); // one second                        switch (rc)                      {                          case -1: // select error                              break;                          default:                          {                              multi.Perform(ref stillRunning);                              break;                          }                      }                  }              }
Missing Default,Http2Download,Program,C:\repos\masroore_CurlSharp\Samples\Http2Download\Http2Download.cs,OnDebug,The following switch statement is missing a default case: switch (infoType)              {                  case CurlInfoType.Text:                      WriteLine($"== Info: {message.TrimEnd()}");                      break;                  case CurlInfoType.HeaderOut:                      WriteLine($"=> Send header");                      break;                  case CurlInfoType.HeaderIn:                      WriteLine($"<= Recv header");                      break;                  case CurlInfoType.DataOut:                      WriteLine($"=> Send data");                      break;                  case CurlInfoType.DataIn:                      WriteLine($"<= Recv data");                      break;                  case CurlInfoType.SslDataOut:                      WriteLine($"=> Send SSL data");                      break;                  case CurlInfoType.SslDataIn:                      WriteLine($"<= Recv SSL data");                      break;                  case CurlInfoType.End:                      WriteLine("== End");                      break;              }
