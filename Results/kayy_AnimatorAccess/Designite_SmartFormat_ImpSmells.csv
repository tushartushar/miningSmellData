Implementation smell,Namespace,Class,File,Method,Description
Long Method,SmartFormat.Core.Parsing,Parser,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Core\Parsing\Parser.cs,ParseFormat,The method has 168 lines of code.
Long Method,SmartFormat.Extensions,CommonLanguageRules,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\PluralLocalizationFormatter.cs,GetPluralRule,The method has 272 lines of code.
Long Method,SmartFormat.Extensions,ConditionalFormatter,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\ConditionalFormatter.cs,EvaluateFormat,The method has 146 lines of code.
Long Method,SmartFormat.Utilities,TimeSpanUtility,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Utilities\TimeSpanUtility.cs,ToTimeString,The method has 111 lines of code.
Complex Method,SmartFormat.Core.Parsing,Format,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Core\Parsing\Format.cs,Substring,Cyclomatic complexity of the method is 9
Complex Method,SmartFormat.Core.Parsing,Parser,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Core\Parsing\Parser.cs,ParseFormat,Cyclomatic complexity of the method is 28
Complex Method,SmartFormat.Extensions,CommonLanguageRules_Old,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\PluralLocalizationFormatter.cs,GetPluralRule,Cyclomatic complexity of the method is 11
Complex Method,SmartFormat.Extensions,CommonLanguageRules,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\PluralLocalizationFormatter.cs,GetPluralRule,Cyclomatic complexity of the method is 24
Complex Method,SmartFormat.Extensions,DefaultFormatter,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\DefaultFormatter.cs,EvaluateFormat,Cyclomatic complexity of the method is 10
Complex Method,SmartFormat.Extensions,ReflectionSource,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\ReflectionSource.cs,EvaluateSelector,Cyclomatic complexity of the method is 8
Complex Method,SmartFormat.Extensions,ListFormatter,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\ListFormatter.cs,EvaluateFormat,Cyclomatic complexity of the method is 13
Complex Method,SmartFormat.Extensions,ConditionalFormatter,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\ConditionalFormatter.cs,EvaluateFormat,Cyclomatic complexity of the method is 24
Complex Method,SmartFormat.Extensions,ConditionalFormatter,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\ConditionalFormatter.cs,TryEvaluateCondition,Cyclomatic complexity of the method is 10
Complex Method,SmartFormat.Utilities,TimeSpanUtility,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Utilities\TimeSpanUtility.cs,ToTimeString,Cyclomatic complexity of the method is 25
Complex Method,SmartFormat.Utilities,TimeSpanFormatOptionsConverter,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Utilities\TimeSpanUtility.cs,Parse,Cyclomatic complexity of the method is 15
Long Parameter List,SmartFormat.Core.Parsing,Selector,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Core\Parsing\Selector.cs,Selector,The method has 5 parameters. Parameters: baseString' startIndex' endIndex' operatorStart' selectorIndex
Long Parameter List,SmartFormat.Core.Extensions,IFormatter,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Core\Extensions\IFormatter.cs,EvaluateFormat,The method has 5 parameters. Parameters: current' format' handled' output' formatDetails
Long Parameter List,SmartFormat.Core.Extensions,ISource,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Core\Extensions\ISource.cs,EvaluateSelector,The method has 5 parameters. Parameters: current' selector' handled' result' formatDetails
Long Parameter List,SmartFormat.Extensions,DictionarySource,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\DictionarySource.cs,EvaluateSelector,The method has 5 parameters. Parameters: current' selector' handled' result' formatDetails
Long Parameter List,SmartFormat.Extensions,PluralLocalizationFormatter,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\PluralLocalizationFormatter.cs,EvaluateFormat,The method has 5 parameters. Parameters: current' format' handled' output' formatDetails
Long Parameter List,SmartFormat.Extensions,TimeFormatter,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\TimeFormatter.cs,EvaluateFormat,The method has 5 parameters. Parameters: current' format' handled' output' formatDetails
Long Parameter List,SmartFormat.Extensions,DefaultFormatter,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\DefaultFormatter.cs,EvaluateFormat,The method has 5 parameters. Parameters: current' format' handled' output' formatDetails
Long Parameter List,SmartFormat.Extensions,DefaultSource,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\DefaultSource.cs,EvaluateSelector,The method has 5 parameters. Parameters: current' selector' handled' result' formatDetails
Long Parameter List,SmartFormat.Extensions,ReflectionSource,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\ReflectionSource.cs,EvaluateSelector,The method has 5 parameters. Parameters: current' selector' handled' result' formatDetails
Long Parameter List,SmartFormat.Extensions,ListFormatter,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\ListFormatter.cs,EvaluateSelector,The method has 5 parameters. Parameters: current' selector' handled' result' formatDetails
Long Parameter List,SmartFormat.Extensions,ListFormatter,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\ListFormatter.cs,EvaluateFormat,The method has 5 parameters. Parameters: current' format' handled' output' formatDetails
Long Parameter List,SmartFormat.Extensions,ConditionalFormatter,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\ConditionalFormatter.cs,EvaluateFormat,The method has 5 parameters. Parameters: current' format' handled' output' formatDetails
Long Parameter List,SmartFormat.Utilities,TimeTextInfo,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Utilities\TimeSpanUtility.cs,TimeTextInfo,The method has 14 parameters. Parameters: pluralRule' week' day' hour' minute' second' millisecond' w' d' h' m' s' ms' lessThan
Long Parameter List,SmartFormat.Utilities,TimeTextInfo,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Utilities\TimeSpanUtility.cs,TimeTextInfo,The method has 7 parameters. Parameters: week' day' hour' minute' second' millisecond' lessThan
Long Parameter List,SmartFormat,SmartFormatter,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\SmartFormatter.cs,InvokeSourceExtensions,The method has 5 parameters. Parameters: current' selector' handled' result' formatDetails
Long Parameter List,SmartFormat,SmartFormatter,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\SmartFormatter.cs,InvokeFormatterExtensions,The method has 5 parameters. Parameters: current' format' handled' output' formatDetails
Long Parameter List,SmartFormat,SmartFormatter,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\SmartFormatter.cs,FormatError,The method has 5 parameters. Parameters: errorItem' issue' startIndex' output' formatDetails
Long Parameter List,SmartFormat,SmartFormatter,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\SmartFormatter.cs,FormatError,The method has 5 parameters. Parameters: errorItem' innerException' startIndex' output' formatDetails
Long Identifier,SmartFormat.Extensions,PluralLocalizationFormatter,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\PluralLocalizationFormatter.cs,PluralLocalizationFormatter,The length of the parameter defaultTwoLetterISOLanguageName is 31.
Long Identifier,SmartFormat.Extensions,CommonLanguagesPluralFormatInfo,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\PluralLocalizationFormatter.cs,CommonLanguagesPluralFormatInfo,The length of the parameter defaultTwoLetterIsoLanguageName is 31.
Long Identifier,SmartFormat.Extensions,CommonLanguagesPluralFormatInfo,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\PluralLocalizationFormatter.cs,,The length of the parameter defaultTwoLetterISOLanguageName is 31.
Long Identifier,SmartFormat.Extensions,TimeFormatter,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\TimeFormatter.cs,,The length of the parameter defaultTwoLetterISOLanguageName is 31.
Long Statement,SmartFormat.Extensions,CommonLanguageRules_Old,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\PluralLocalizationFormatter.cs,Lithuanian,The length of the statement  "                    return (value % 10 == 1 && value % 100 != 11) ? 0 : (value % 10 >= 2 && (value % 100 < 10 || value % 100 >= 20)) ? 1 : 2; " is 121.
Long Statement,SmartFormat.Extensions,CommonLanguageRules_Old,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\PluralLocalizationFormatter.cs,Russian,The length of the statement  "                    return (value % 10 == 1 && value % 100 != 11) ? 0 : (value % 10 >= 2 && value % 10 <= 4 && (value % 100 < 10 || value % 100 >= 20)) ? 1 : 2; " is 140.
Long Statement,SmartFormat.Extensions,DefaultFormatter,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\DefaultFormatter.cs,EvaluateFormat,The length of the statement  "            if (formatDetails.Provider != null && (cFormatter = formatDetails.Provider.GetFormat(typeof(ICustomFormatter)) as ICustomFormatter) != null) " is 140.
Long Statement,SmartFormat.Extensions,ListFormatter,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\ListFormatter.cs,EvaluateFormat,The length of the statement  "            // This method needs the Highest priority so that it comes before the PluralLocalizationExtension and ConditionalExtension " is 122.
Long Statement,SmartFormat.Extensions,ListFormatter,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\ListFormatter.cs,EvaluateFormat,The length of the statement  "            int oldCollectionIndex = CollectionIndex; // In case we have nested arrays' we might need to restore the CollectionIndex " is 120.
Long Statement,SmartFormat.Extensions,ConditionalFormatter,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\ConditionalFormatter.cs,TryEvaluateCondition,The length of the statement  "            Match m = complexConditionPattern.Match(parameter.baseString' parameter.startIndex' parameter.endIndex - parameter.startIndex); " is 127.
Long Statement,SmartFormat.Utilities,TimeSpanUtility,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Utilities\TimeSpanUtility.cs,ToTimeString,The length of the statement  "                bool breakFor = false; // I wish C# supported "break for;" (like how VB supports "Exit For" from within a "Select Case" statement) " is 130.
Long Statement,SmartFormat,SmartFormatter,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\SmartFormatter.cs,AddExtensions,The length of the statement  "					throw new ArgumentException(string.Format("{0} does not implement ISource nor IFormatter."' extension.GetType().FullName)' "extensions"); " is 137.
Long Statement,SmartFormat,SmartFormatter,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\SmartFormatter.cs,Format,The length of the statement  "                    output.Write(literalItem.baseString' literalItem.startIndex' literalItem.endIndex - literalItem.startIndex' formatDetails); " is 123.
Long Statement,SmartFormat,SmartFormatter,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\SmartFormatter.cs,Format,The length of the statement  "                        FormatError(selector' string.Format("Could not evaluate the selector \"{0}\""' selector.Text)' selector.startIndex' output' formatDetails); " is 139.
Long Statement,SmartFormat,SmartFormatter,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\SmartFormatter.cs,CheckForExtensions,The length of the statement  "                throw new InvalidOperationException("No source extensions are available.  Please add at least one source extension' such as the DefaultSource."); " is 145.
Long Statement,SmartFormat,SmartFormatter,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\SmartFormatter.cs,CheckForExtensions,The length of the statement  "                throw new InvalidOperationException("No formatter extensions are available.  Please add at least one formatter extension' such as the DefaultFormatter."); " is 154.
Complex Conditional,SmartFormat.Core.Parsing,Parser,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Core\Parsing\Parser.cs,ParseFormat,The conditional expression  "('0' <= c && c <= '9')                           || (AlphanumericSelectors && ('a' <= c && c <= 'z' || 'A' <= c && c <= 'Z'))                           || (AllowedSelectorChars.IndexOf(c) != -1)"  is complex.
Complex Conditional,SmartFormat.Extensions,ListFormatter,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\ListFormatter.cs,EvaluateSelector,The conditional expression  "!isAbsolute && currentList != null && int.TryParse(selector.Text' out itemIndex) && itemIndex < currentList.Count"  is complex.
Magic Number,SmartFormat.Extensions,CommonLanguageRules_Old,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\PluralLocalizationFormatter.cs,English_Special,The following statement contains a magic number: pluralCount == 2
Magic Number,SmartFormat.Extensions,CommonLanguageRules_Old,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\PluralLocalizationFormatter.cs,English_Special,The following statement contains a magic number: return (value == 0m) ? 0 : (value == 1m) ? 1 : 2;
Magic Number,SmartFormat.Extensions,CommonLanguageRules_Old,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\PluralLocalizationFormatter.cs,English_Special,The following statement contains a magic number: pluralCount == 3
Magic Number,SmartFormat.Extensions,CommonLanguageRules_Old,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\PluralLocalizationFormatter.cs,English_Special,The following statement contains a magic number: return (value < 0m) ? 0 : (value == 0m) ? 1 : (value == 1m) ? 2 : 3;
Magic Number,SmartFormat.Extensions,CommonLanguageRules_Old,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\PluralLocalizationFormatter.cs,English_Special,The following statement contains a magic number: return (value < 0m) ? 0 : (value == 0m) ? 1 : (value == 1m) ? 2 : 3;
Magic Number,SmartFormat.Extensions,CommonLanguageRules_Old,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\PluralLocalizationFormatter.cs,English_Special,The following statement contains a magic number: pluralCount == 4
Magic Number,SmartFormat.Extensions,CommonLanguageRules_Old,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\PluralLocalizationFormatter.cs,French,The following statement contains a magic number: pluralCount == 2
Magic Number,SmartFormat.Extensions,CommonLanguageRules_Old,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\PluralLocalizationFormatter.cs,Latvian,The following statement contains a magic number: return (value % 10 == 1 && value % 100 != 11) ? 0 : (value != 0) ? 1 : 2;
Magic Number,SmartFormat.Extensions,CommonLanguageRules_Old,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\PluralLocalizationFormatter.cs,Latvian,The following statement contains a magic number: return (value % 10 == 1 && value % 100 != 11) ? 0 : (value != 0) ? 1 : 2;
Magic Number,SmartFormat.Extensions,CommonLanguageRules_Old,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\PluralLocalizationFormatter.cs,Latvian,The following statement contains a magic number: return (value % 10 == 1 && value % 100 != 11) ? 0 : (value != 0) ? 1 : 2;
Magic Number,SmartFormat.Extensions,CommonLanguageRules_Old,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\PluralLocalizationFormatter.cs,Latvian,The following statement contains a magic number: return (value % 10 == 1 && value % 100 != 11) ? 0 : (value != 0) ? 1 : 2;
Magic Number,SmartFormat.Extensions,CommonLanguageRules_Old,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\PluralLocalizationFormatter.cs,Latvian,The following statement contains a magic number: pluralCount == 3
Magic Number,SmartFormat.Extensions,CommonLanguageRules_Old,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\PluralLocalizationFormatter.cs,Irish,The following statement contains a magic number: return (value == 1) ? 0 : (value == 2) ? 1 : 2;
Magic Number,SmartFormat.Extensions,CommonLanguageRules_Old,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\PluralLocalizationFormatter.cs,Irish,The following statement contains a magic number: return (value == 1) ? 0 : (value == 2) ? 1 : 2;
Magic Number,SmartFormat.Extensions,CommonLanguageRules_Old,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\PluralLocalizationFormatter.cs,Irish,The following statement contains a magic number: pluralCount == 3
Magic Number,SmartFormat.Extensions,CommonLanguageRules_Old,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\PluralLocalizationFormatter.cs,Romanian,The following statement contains a magic number: return (value == 1m) ? 0 : (value == 0m || (value % 100 > 0 && value % 100 < 20)) ? 1 : 2;
Magic Number,SmartFormat.Extensions,CommonLanguageRules_Old,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\PluralLocalizationFormatter.cs,Romanian,The following statement contains a magic number: return (value == 1m) ? 0 : (value == 0m || (value % 100 > 0 && value % 100 < 20)) ? 1 : 2;
Magic Number,SmartFormat.Extensions,CommonLanguageRules_Old,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\PluralLocalizationFormatter.cs,Romanian,The following statement contains a magic number: return (value == 1m) ? 0 : (value == 0m || (value % 100 > 0 && value % 100 < 20)) ? 1 : 2;
Magic Number,SmartFormat.Extensions,CommonLanguageRules_Old,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\PluralLocalizationFormatter.cs,Romanian,The following statement contains a magic number: return (value == 1m) ? 0 : (value == 0m || (value % 100 > 0 && value % 100 < 20)) ? 1 : 2;
Magic Number,SmartFormat.Extensions,CommonLanguageRules_Old,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\PluralLocalizationFormatter.cs,Romanian,The following statement contains a magic number: pluralCount == 3
Magic Number,SmartFormat.Extensions,CommonLanguageRules_Old,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\PluralLocalizationFormatter.cs,Lithuanian,The following statement contains a magic number: return (value % 10 == 1 && value % 100 != 11) ? 0 : (value % 10 >= 2 && (value % 100 < 10 || value % 100 >= 20)) ? 1 : 2;
Magic Number,SmartFormat.Extensions,CommonLanguageRules_Old,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\PluralLocalizationFormatter.cs,Lithuanian,The following statement contains a magic number: return (value % 10 == 1 && value % 100 != 11) ? 0 : (value % 10 >= 2 && (value % 100 < 10 || value % 100 >= 20)) ? 1 : 2;
Magic Number,SmartFormat.Extensions,CommonLanguageRules_Old,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\PluralLocalizationFormatter.cs,Lithuanian,The following statement contains a magic number: return (value % 10 == 1 && value % 100 != 11) ? 0 : (value % 10 >= 2 && (value % 100 < 10 || value % 100 >= 20)) ? 1 : 2;
Magic Number,SmartFormat.Extensions,CommonLanguageRules_Old,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\PluralLocalizationFormatter.cs,Lithuanian,The following statement contains a magic number: return (value % 10 == 1 && value % 100 != 11) ? 0 : (value % 10 >= 2 && (value % 100 < 10 || value % 100 >= 20)) ? 1 : 2;
Magic Number,SmartFormat.Extensions,CommonLanguageRules_Old,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\PluralLocalizationFormatter.cs,Lithuanian,The following statement contains a magic number: return (value % 10 == 1 && value % 100 != 11) ? 0 : (value % 10 >= 2 && (value % 100 < 10 || value % 100 >= 20)) ? 1 : 2;
Magic Number,SmartFormat.Extensions,CommonLanguageRules_Old,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\PluralLocalizationFormatter.cs,Lithuanian,The following statement contains a magic number: return (value % 10 == 1 && value % 100 != 11) ? 0 : (value % 10 >= 2 && (value % 100 < 10 || value % 100 >= 20)) ? 1 : 2;
Magic Number,SmartFormat.Extensions,CommonLanguageRules_Old,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\PluralLocalizationFormatter.cs,Lithuanian,The following statement contains a magic number: return (value % 10 == 1 && value % 100 != 11) ? 0 : (value % 10 >= 2 && (value % 100 < 10 || value % 100 >= 20)) ? 1 : 2;
Magic Number,SmartFormat.Extensions,CommonLanguageRules_Old,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\PluralLocalizationFormatter.cs,Lithuanian,The following statement contains a magic number: return (value % 10 == 1 && value % 100 != 11) ? 0 : (value % 10 >= 2 && (value % 100 < 10 || value % 100 >= 20)) ? 1 : 2;
Magic Number,SmartFormat.Extensions,CommonLanguageRules_Old,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\PluralLocalizationFormatter.cs,Lithuanian,The following statement contains a magic number: return (value % 10 == 1 && value % 100 != 11) ? 0 : (value % 10 >= 2 && (value % 100 < 10 || value % 100 >= 20)) ? 1 : 2;
Magic Number,SmartFormat.Extensions,CommonLanguageRules_Old,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\PluralLocalizationFormatter.cs,Lithuanian,The following statement contains a magic number: return (value % 10 == 1 && value % 100 != 11) ? 0 : (value % 10 >= 2 && (value % 100 < 10 || value % 100 >= 20)) ? 1 : 2;
Magic Number,SmartFormat.Extensions,CommonLanguageRules_Old,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\PluralLocalizationFormatter.cs,Lithuanian,The following statement contains a magic number: pluralCount == 3
Magic Number,SmartFormat.Extensions,CommonLanguageRules_Old,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\PluralLocalizationFormatter.cs,Russian,The following statement contains a magic number: return (value % 10 == 1 && value % 100 != 11) ? 0 : (value % 10 >= 2 && value % 10 <= 4 && (value % 100 < 10 || value % 100 >= 20)) ? 1 : 2;
Magic Number,SmartFormat.Extensions,CommonLanguageRules_Old,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\PluralLocalizationFormatter.cs,Russian,The following statement contains a magic number: return (value % 10 == 1 && value % 100 != 11) ? 0 : (value % 10 >= 2 && value % 10 <= 4 && (value % 100 < 10 || value % 100 >= 20)) ? 1 : 2;
Magic Number,SmartFormat.Extensions,CommonLanguageRules_Old,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\PluralLocalizationFormatter.cs,Russian,The following statement contains a magic number: return (value % 10 == 1 && value % 100 != 11) ? 0 : (value % 10 >= 2 && value % 10 <= 4 && (value % 100 < 10 || value % 100 >= 20)) ? 1 : 2;
Magic Number,SmartFormat.Extensions,CommonLanguageRules_Old,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\PluralLocalizationFormatter.cs,Russian,The following statement contains a magic number: return (value % 10 == 1 && value % 100 != 11) ? 0 : (value % 10 >= 2 && value % 10 <= 4 && (value % 100 < 10 || value % 100 >= 20)) ? 1 : 2;
Magic Number,SmartFormat.Extensions,CommonLanguageRules_Old,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\PluralLocalizationFormatter.cs,Russian,The following statement contains a magic number: return (value % 10 == 1 && value % 100 != 11) ? 0 : (value % 10 >= 2 && value % 10 <= 4 && (value % 100 < 10 || value % 100 >= 20)) ? 1 : 2;
Magic Number,SmartFormat.Extensions,CommonLanguageRules_Old,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\PluralLocalizationFormatter.cs,Russian,The following statement contains a magic number: return (value % 10 == 1 && value % 100 != 11) ? 0 : (value % 10 >= 2 && value % 10 <= 4 && (value % 100 < 10 || value % 100 >= 20)) ? 1 : 2;
Magic Number,SmartFormat.Extensions,CommonLanguageRules_Old,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\PluralLocalizationFormatter.cs,Russian,The following statement contains a magic number: return (value % 10 == 1 && value % 100 != 11) ? 0 : (value % 10 >= 2 && value % 10 <= 4 && (value % 100 < 10 || value % 100 >= 20)) ? 1 : 2;
Magic Number,SmartFormat.Extensions,CommonLanguageRules_Old,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\PluralLocalizationFormatter.cs,Russian,The following statement contains a magic number: return (value % 10 == 1 && value % 100 != 11) ? 0 : (value % 10 >= 2 && value % 10 <= 4 && (value % 100 < 10 || value % 100 >= 20)) ? 1 : 2;
Magic Number,SmartFormat.Extensions,CommonLanguageRules_Old,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\PluralLocalizationFormatter.cs,Russian,The following statement contains a magic number: return (value % 10 == 1 && value % 100 != 11) ? 0 : (value % 10 >= 2 && value % 10 <= 4 && (value % 100 < 10 || value % 100 >= 20)) ? 1 : 2;
Magic Number,SmartFormat.Extensions,CommonLanguageRules_Old,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\PluralLocalizationFormatter.cs,Russian,The following statement contains a magic number: return (value % 10 == 1 && value % 100 != 11) ? 0 : (value % 10 >= 2 && value % 10 <= 4 && (value % 100 < 10 || value % 100 >= 20)) ? 1 : 2;
Magic Number,SmartFormat.Extensions,CommonLanguageRules_Old,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\PluralLocalizationFormatter.cs,Russian,The following statement contains a magic number: return (value % 10 == 1 && value % 100 != 11) ? 0 : (value % 10 >= 2 && value % 10 <= 4 && (value % 100 < 10 || value % 100 >= 20)) ? 1 : 2;
Magic Number,SmartFormat.Extensions,CommonLanguageRules_Old,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\PluralLocalizationFormatter.cs,Russian,The following statement contains a magic number: return (value % 10 == 1 && value % 100 != 11) ? 0 : (value % 10 >= 2 && value % 10 <= 4 && (value % 100 < 10 || value % 100 >= 20)) ? 1 : 2;
Magic Number,SmartFormat.Extensions,CommonLanguageRules_Old,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\PluralLocalizationFormatter.cs,Russian,The following statement contains a magic number: pluralCount == 3
Magic Number,SmartFormat.Extensions,CommonLanguageRules_Old,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\PluralLocalizationFormatter.cs,Czech,The following statement contains a magic number: return (value == 1) ? 0 : (value >= 2 && value <= 4) ? 1 : 2;
Magic Number,SmartFormat.Extensions,CommonLanguageRules_Old,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\PluralLocalizationFormatter.cs,Czech,The following statement contains a magic number: return (value == 1) ? 0 : (value >= 2 && value <= 4) ? 1 : 2;
Magic Number,SmartFormat.Extensions,CommonLanguageRules_Old,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\PluralLocalizationFormatter.cs,Czech,The following statement contains a magic number: return (value == 1) ? 0 : (value >= 2 && value <= 4) ? 1 : 2;
Magic Number,SmartFormat.Extensions,CommonLanguageRules_Old,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\PluralLocalizationFormatter.cs,Czech,The following statement contains a magic number: pluralCount == 3
Magic Number,SmartFormat.Extensions,CommonLanguageRules_Old,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\PluralLocalizationFormatter.cs,Polish,The following statement contains a magic number: return (value == 1) ? 0 : (value % 10 >= 2 && value % 10 <= 4 && (value % 100 < 10 || value % 100 >= 20)) ? 1 : 2;
Magic Number,SmartFormat.Extensions,CommonLanguageRules_Old,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\PluralLocalizationFormatter.cs,Polish,The following statement contains a magic number: return (value == 1) ? 0 : (value % 10 >= 2 && value % 10 <= 4 && (value % 100 < 10 || value % 100 >= 20)) ? 1 : 2;
Magic Number,SmartFormat.Extensions,CommonLanguageRules_Old,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\PluralLocalizationFormatter.cs,Polish,The following statement contains a magic number: return (value == 1) ? 0 : (value % 10 >= 2 && value % 10 <= 4 && (value % 100 < 10 || value % 100 >= 20)) ? 1 : 2;
Magic Number,SmartFormat.Extensions,CommonLanguageRules_Old,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\PluralLocalizationFormatter.cs,Polish,The following statement contains a magic number: return (value == 1) ? 0 : (value % 10 >= 2 && value % 10 <= 4 && (value % 100 < 10 || value % 100 >= 20)) ? 1 : 2;
Magic Number,SmartFormat.Extensions,CommonLanguageRules_Old,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\PluralLocalizationFormatter.cs,Polish,The following statement contains a magic number: return (value == 1) ? 0 : (value % 10 >= 2 && value % 10 <= 4 && (value % 100 < 10 || value % 100 >= 20)) ? 1 : 2;
Magic Number,SmartFormat.Extensions,CommonLanguageRules_Old,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\PluralLocalizationFormatter.cs,Polish,The following statement contains a magic number: return (value == 1) ? 0 : (value % 10 >= 2 && value % 10 <= 4 && (value % 100 < 10 || value % 100 >= 20)) ? 1 : 2;
Magic Number,SmartFormat.Extensions,CommonLanguageRules_Old,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\PluralLocalizationFormatter.cs,Polish,The following statement contains a magic number: return (value == 1) ? 0 : (value % 10 >= 2 && value % 10 <= 4 && (value % 100 < 10 || value % 100 >= 20)) ? 1 : 2;
Magic Number,SmartFormat.Extensions,CommonLanguageRules_Old,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\PluralLocalizationFormatter.cs,Polish,The following statement contains a magic number: return (value == 1) ? 0 : (value % 10 >= 2 && value % 10 <= 4 && (value % 100 < 10 || value % 100 >= 20)) ? 1 : 2;
Magic Number,SmartFormat.Extensions,CommonLanguageRules_Old,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\PluralLocalizationFormatter.cs,Polish,The following statement contains a magic number: return (value == 1) ? 0 : (value % 10 >= 2 && value % 10 <= 4 && (value % 100 < 10 || value % 100 >= 20)) ? 1 : 2;
Magic Number,SmartFormat.Extensions,CommonLanguageRules_Old,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\PluralLocalizationFormatter.cs,Polish,The following statement contains a magic number: pluralCount == 3
Magic Number,SmartFormat.Extensions,CommonLanguageRules_Old,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\PluralLocalizationFormatter.cs,Slovenian,The following statement contains a magic number: return (value % 100 == 1) ? 0 : (value % 100 == 2) ? 1 : (value % 100 == 3 || value % 100 == 4) ? 2 : 3;
Magic Number,SmartFormat.Extensions,CommonLanguageRules_Old,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\PluralLocalizationFormatter.cs,Slovenian,The following statement contains a magic number: return (value % 100 == 1) ? 0 : (value % 100 == 2) ? 1 : (value % 100 == 3 || value % 100 == 4) ? 2 : 3;
Magic Number,SmartFormat.Extensions,CommonLanguageRules_Old,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\PluralLocalizationFormatter.cs,Slovenian,The following statement contains a magic number: return (value % 100 == 1) ? 0 : (value % 100 == 2) ? 1 : (value % 100 == 3 || value % 100 == 4) ? 2 : 3;
Magic Number,SmartFormat.Extensions,CommonLanguageRules_Old,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\PluralLocalizationFormatter.cs,Slovenian,The following statement contains a magic number: return (value % 100 == 1) ? 0 : (value % 100 == 2) ? 1 : (value % 100 == 3 || value % 100 == 4) ? 2 : 3;
Magic Number,SmartFormat.Extensions,CommonLanguageRules_Old,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\PluralLocalizationFormatter.cs,Slovenian,The following statement contains a magic number: return (value % 100 == 1) ? 0 : (value % 100 == 2) ? 1 : (value % 100 == 3 || value % 100 == 4) ? 2 : 3;
Magic Number,SmartFormat.Extensions,CommonLanguageRules_Old,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\PluralLocalizationFormatter.cs,Slovenian,The following statement contains a magic number: return (value % 100 == 1) ? 0 : (value % 100 == 2) ? 1 : (value % 100 == 3 || value % 100 == 4) ? 2 : 3;
Magic Number,SmartFormat.Extensions,CommonLanguageRules_Old,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\PluralLocalizationFormatter.cs,Slovenian,The following statement contains a magic number: return (value % 100 == 1) ? 0 : (value % 100 == 2) ? 1 : (value % 100 == 3 || value % 100 == 4) ? 2 : 3;
Magic Number,SmartFormat.Extensions,CommonLanguageRules_Old,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\PluralLocalizationFormatter.cs,Slovenian,The following statement contains a magic number: return (value % 100 == 1) ? 0 : (value % 100 == 2) ? 1 : (value % 100 == 3 || value % 100 == 4) ? 2 : 3;
Magic Number,SmartFormat.Extensions,CommonLanguageRules_Old,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\PluralLocalizationFormatter.cs,Slovenian,The following statement contains a magic number: return (value % 100 == 1) ? 0 : (value % 100 == 2) ? 1 : (value % 100 == 3 || value % 100 == 4) ? 2 : 3;
Magic Number,SmartFormat.Extensions,CommonLanguageRules_Old,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\PluralLocalizationFormatter.cs,Slovenian,The following statement contains a magic number: pluralCount == 4
Magic Number,SmartFormat.Extensions,CommonLanguageRules,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\PluralLocalizationFormatter.cs,GetPluralRule,The following statement contains a magic number: switch (twoLetterISOLanguageName)              {                  // Singular                  case "az": // Azerbaijani                  case "bm": // Bambara                  case "bo": // Tibetan                  case "dz": // Dzongkha                  case "fa": // Persian                  case "hu": // Hungarian                  case "id": // Indonesian                  case "ig": // Igbo                  case "ii": // Sichuan Yi                  case "ja": // Japanese                  case "jv": // Javanese                  case "ka": // Georgian                  case "kde": // Makonde                  case "kea": // Kabuverdianu                  case "km": // Khmer                  case "kn": // Kannada                  case "ko": // Korean                  case "ms": // Malay                  case "my": // Burmese                  case "root": // Root (?)                  case "sah": // Sakha                  case "ses": // Koyraboro Senni                  case "sg": // Sango                  case "th": // Thai                  case "to": // Tonga                  case "vi": // Vietnamese                  case "wo": // Wolof                  case "yo": // Yoruba                  case "zh": // Chinese                      return (n' c) => 0;                    // Dual: one (n == 1)' other                  case "af": // Afrikaans                  case "bem": // Bembda                  case "bg": // Bulgarian                  case "bn": // Bengali                  case "brx": // Bodo                  case "ca": // Catalan                  case "cgg": // Chiga                  case "chr": // Cherokee                  case "da": // Danish                  case "de": // German                  case "dv": // Divehi                  case "ee": // Ewe                  case "el": // Greek                  case "en": // English                  case "eo": // Esperanto                  case "es": // Spanish                  case "et": // Estonian                  case "eu": // Basque                  case "fi": // Finnish                  case "fo": // Faroese                  case "fur": // Friulian                  case "fy": // Western Frisian                  case "gl": // Galician                  case "gsw": // Swiss German                  case "gu": // Gujarati                  case "ha": // Hausa                  case "haw": // Hawaiian                  case "he": // Hebrew                  case "is": // Icelandic                  case "it": // Italian                  case "kk": // Kazakh                  case "kl": // Kalaallisut                  case "ku": // Kurdish                  case "lb": // Luxembourgish                  case "lg": // Ganda                  case "lo": // Lao                  case "mas": // Masai                  case "ml": // Malayalam                  case "mn": // Mongolian                  case "mr": // Marathi                  case "nah": // Nahuatl                  case "nb": // Norwegian Bokmål                  case "ne": // Nepali                  case "nl": // Dutch                  case "nn": // Norwegian Nynorsk                  case "no": // Norwegian                  case "nyn": // Nyankole                  case "om": // Oromo                  case "or": // Oriya                  case "pa": // Punjabi                  case "pap": // Papiamento                  case "ps": // Pashto                  case "pt": // Portuguese                  case "rm": // Romansh                  case "saq": // Samburu                  case "so": // Somali                  case "sq": // Albanian                  case "ssy": // Saho                  case "sw": // Swahili                  case "sv": // Swedish                  case "syr": // Syriac                  case "ta": // Tamil                  case "te": // Telugu                  case "tk": // Turkmen                  case "tr": // Turkish                  case "ur": // Urdu                  case "wae": // Walser                  case "xog": // Soga                  case "zu": // Zulu                      return (n' c) =>                      {                          if (c == 2) return (n == 1) ? 0 : 1;                          if (c == 3) return (n == 0) ? 0 : (n == 1) ? 1 : 2;                          if (c == 4) return (n < 0) ? 0 : (n == 0) ? 1 : (n == 1) ? 2 : 3;                          return -1;                      };                    // DualWithZero: one (n == 0..1)' other                  case "ak": // Akan                  case "am": // Amharic                  case "bh": // Bihari                  case "fil": // Filipino                  case "guw": // Gun                  case "hi": // Hindi                  case "ln": // Lingala                  case "mg": // Malagasy                  case "nso": // Northern Sotho                  case "ti": // Tigrinya                  case "tl": // Tagalog                  case "wa": // Walloon                      return (n' c) => (n == 0 || n == 1) ? 0 : 1;                    // DualFromZeroToTwo: one (n == 0..2 fractionate and n != 2)' other                  case "ff": // Fulah                  case "fr": // French                  case "kab": // Kabyle                      return (n' c) => (n >= 0 && n < 2) ? 0 : 1;                    // Triple: one (n == 1)' two (n == 2)' other                  case "ga": // Irish                  case "iu": // Inuktitut                  case "ksh": // Colognian                  case "kw": // Cornish                  case "se": // Northern Sami                  case "sma": // Southern Sami                  case "smi": // Sami language                  case "smj": // Lule Sami                  case "smn": // Inari Sami                  case "sms": // Skolt Sami                      return (n' c) => (n == 1) ? 0 : (n == 2) ? 1 : 2;                    // Russian & Serbo-Croatian                  case "be": // Belarusian                  case "bs": // Bosnian                  case "hr": // Croatian                  case "ru": // Russian                  case "sh": // Serbo-Croatian                  case "sr": // Serbian                  case "uk": // Ukrainian                      return (n' c) =>                          (n % 10 == 1) && !(n % 100 == 11) ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          2;                    // Unique:                    // Arabic                  case "ar":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          (n % 100).Between(3' 10) ? 3 : // few                          (n % 100).Between(11' 99) ? 4 : // many                          5; // other                    // Breton                  case "br":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5; // other                    // Czech                  case "cs":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Welsh                  case "cy":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5;                    // Manx                  case "gv":                      return (n' c) =>                          (n % 10).Between(1' 2) || (n % 20) == 0 ? 0 :  // one                          1;                    // Langi                  case "lag":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n > 0) && (n < 2) ? 1 : // one                          2;                    // Lithuanian                  case "lt":                      return (n' c) =>                          (n % 10) == 1 && !(n % 100).Between(11' 19) ? 0 : // one                          (n % 10).Between(2' 9) && !(n % 100).Between(11' 19) ? 1 : // few                          2;                    // Latvian                  case "lv":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n % 10) == 1 && (n % 100) != 11 ? 1 :                          2;                    // Macedonian                  case "mb":                      return (n' c) =>                          (n % 10) == 1 && n != 11 ? 0 : // one                          1;                    // Moldavian                  case "mo":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n != 1 && (n % 100).Between(1' 19)) ? 1 : // few                          2;                    // Maltese                  case "mt":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(2' 10) ? 1 : // few                          (n % 100).Between(11' 19) ? 2 : // many                          3;                    // Polish                  case "pl":                      return (n' c) =>                          n == 1 ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          (n % 10).Between(0' 1) || (n % 10).Between(5' 9) || (n % 100).Between(12' 14) ? 2 : // many                          3;                    // Romanian                  case "ro":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(1' 19) ? 1 : // few                          2;                    // Tachelhit                  case "shi":                      return (n' c) =>                          (n >= 0 && n <= 1) ? 0 : // one                          n.Between(2' 10) ? 1 : // few                          2;                    // Slovak                  case "sk":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Slovenian                  case "sl":                      return (n' c) =>                          (n % 100) == 1 ? 0 : // one                          (n % 100) == 2 ? 1 : // two                          (n % 100).Between(3' 4) ? 2 : // few                          3;                    // Central Morocco Tamazight                  case "tzm":                      return (n' c) =>                          n.Between(0' 1) || n.Between(11' 99) ? 0 : // one                          1;                      // Unknown language                  default:                      return null;              }
Magic Number,SmartFormat.Extensions,CommonLanguageRules,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\PluralLocalizationFormatter.cs,GetPluralRule,The following statement contains a magic number: switch (twoLetterISOLanguageName)              {                  // Singular                  case "az": // Azerbaijani                  case "bm": // Bambara                  case "bo": // Tibetan                  case "dz": // Dzongkha                  case "fa": // Persian                  case "hu": // Hungarian                  case "id": // Indonesian                  case "ig": // Igbo                  case "ii": // Sichuan Yi                  case "ja": // Japanese                  case "jv": // Javanese                  case "ka": // Georgian                  case "kde": // Makonde                  case "kea": // Kabuverdianu                  case "km": // Khmer                  case "kn": // Kannada                  case "ko": // Korean                  case "ms": // Malay                  case "my": // Burmese                  case "root": // Root (?)                  case "sah": // Sakha                  case "ses": // Koyraboro Senni                  case "sg": // Sango                  case "th": // Thai                  case "to": // Tonga                  case "vi": // Vietnamese                  case "wo": // Wolof                  case "yo": // Yoruba                  case "zh": // Chinese                      return (n' c) => 0;                    // Dual: one (n == 1)' other                  case "af": // Afrikaans                  case "bem": // Bembda                  case "bg": // Bulgarian                  case "bn": // Bengali                  case "brx": // Bodo                  case "ca": // Catalan                  case "cgg": // Chiga                  case "chr": // Cherokee                  case "da": // Danish                  case "de": // German                  case "dv": // Divehi                  case "ee": // Ewe                  case "el": // Greek                  case "en": // English                  case "eo": // Esperanto                  case "es": // Spanish                  case "et": // Estonian                  case "eu": // Basque                  case "fi": // Finnish                  case "fo": // Faroese                  case "fur": // Friulian                  case "fy": // Western Frisian                  case "gl": // Galician                  case "gsw": // Swiss German                  case "gu": // Gujarati                  case "ha": // Hausa                  case "haw": // Hawaiian                  case "he": // Hebrew                  case "is": // Icelandic                  case "it": // Italian                  case "kk": // Kazakh                  case "kl": // Kalaallisut                  case "ku": // Kurdish                  case "lb": // Luxembourgish                  case "lg": // Ganda                  case "lo": // Lao                  case "mas": // Masai                  case "ml": // Malayalam                  case "mn": // Mongolian                  case "mr": // Marathi                  case "nah": // Nahuatl                  case "nb": // Norwegian Bokmål                  case "ne": // Nepali                  case "nl": // Dutch                  case "nn": // Norwegian Nynorsk                  case "no": // Norwegian                  case "nyn": // Nyankole                  case "om": // Oromo                  case "or": // Oriya                  case "pa": // Punjabi                  case "pap": // Papiamento                  case "ps": // Pashto                  case "pt": // Portuguese                  case "rm": // Romansh                  case "saq": // Samburu                  case "so": // Somali                  case "sq": // Albanian                  case "ssy": // Saho                  case "sw": // Swahili                  case "sv": // Swedish                  case "syr": // Syriac                  case "ta": // Tamil                  case "te": // Telugu                  case "tk": // Turkmen                  case "tr": // Turkish                  case "ur": // Urdu                  case "wae": // Walser                  case "xog": // Soga                  case "zu": // Zulu                      return (n' c) =>                      {                          if (c == 2) return (n == 1) ? 0 : 1;                          if (c == 3) return (n == 0) ? 0 : (n == 1) ? 1 : 2;                          if (c == 4) return (n < 0) ? 0 : (n == 0) ? 1 : (n == 1) ? 2 : 3;                          return -1;                      };                    // DualWithZero: one (n == 0..1)' other                  case "ak": // Akan                  case "am": // Amharic                  case "bh": // Bihari                  case "fil": // Filipino                  case "guw": // Gun                  case "hi": // Hindi                  case "ln": // Lingala                  case "mg": // Malagasy                  case "nso": // Northern Sotho                  case "ti": // Tigrinya                  case "tl": // Tagalog                  case "wa": // Walloon                      return (n' c) => (n == 0 || n == 1) ? 0 : 1;                    // DualFromZeroToTwo: one (n == 0..2 fractionate and n != 2)' other                  case "ff": // Fulah                  case "fr": // French                  case "kab": // Kabyle                      return (n' c) => (n >= 0 && n < 2) ? 0 : 1;                    // Triple: one (n == 1)' two (n == 2)' other                  case "ga": // Irish                  case "iu": // Inuktitut                  case "ksh": // Colognian                  case "kw": // Cornish                  case "se": // Northern Sami                  case "sma": // Southern Sami                  case "smi": // Sami language                  case "smj": // Lule Sami                  case "smn": // Inari Sami                  case "sms": // Skolt Sami                      return (n' c) => (n == 1) ? 0 : (n == 2) ? 1 : 2;                    // Russian & Serbo-Croatian                  case "be": // Belarusian                  case "bs": // Bosnian                  case "hr": // Croatian                  case "ru": // Russian                  case "sh": // Serbo-Croatian                  case "sr": // Serbian                  case "uk": // Ukrainian                      return (n' c) =>                          (n % 10 == 1) && !(n % 100 == 11) ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          2;                    // Unique:                    // Arabic                  case "ar":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          (n % 100).Between(3' 10) ? 3 : // few                          (n % 100).Between(11' 99) ? 4 : // many                          5; // other                    // Breton                  case "br":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5; // other                    // Czech                  case "cs":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Welsh                  case "cy":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5;                    // Manx                  case "gv":                      return (n' c) =>                          (n % 10).Between(1' 2) || (n % 20) == 0 ? 0 :  // one                          1;                    // Langi                  case "lag":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n > 0) && (n < 2) ? 1 : // one                          2;                    // Lithuanian                  case "lt":                      return (n' c) =>                          (n % 10) == 1 && !(n % 100).Between(11' 19) ? 0 : // one                          (n % 10).Between(2' 9) && !(n % 100).Between(11' 19) ? 1 : // few                          2;                    // Latvian                  case "lv":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n % 10) == 1 && (n % 100) != 11 ? 1 :                          2;                    // Macedonian                  case "mb":                      return (n' c) =>                          (n % 10) == 1 && n != 11 ? 0 : // one                          1;                    // Moldavian                  case "mo":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n != 1 && (n % 100).Between(1' 19)) ? 1 : // few                          2;                    // Maltese                  case "mt":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(2' 10) ? 1 : // few                          (n % 100).Between(11' 19) ? 2 : // many                          3;                    // Polish                  case "pl":                      return (n' c) =>                          n == 1 ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          (n % 10).Between(0' 1) || (n % 10).Between(5' 9) || (n % 100).Between(12' 14) ? 2 : // many                          3;                    // Romanian                  case "ro":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(1' 19) ? 1 : // few                          2;                    // Tachelhit                  case "shi":                      return (n' c) =>                          (n >= 0 && n <= 1) ? 0 : // one                          n.Between(2' 10) ? 1 : // few                          2;                    // Slovak                  case "sk":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Slovenian                  case "sl":                      return (n' c) =>                          (n % 100) == 1 ? 0 : // one                          (n % 100) == 2 ? 1 : // two                          (n % 100).Between(3' 4) ? 2 : // few                          3;                    // Central Morocco Tamazight                  case "tzm":                      return (n' c) =>                          n.Between(0' 1) || n.Between(11' 99) ? 0 : // one                          1;                      // Unknown language                  default:                      return null;              }
Magic Number,SmartFormat.Extensions,CommonLanguageRules,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\PluralLocalizationFormatter.cs,GetPluralRule,The following statement contains a magic number: switch (twoLetterISOLanguageName)              {                  // Singular                  case "az": // Azerbaijani                  case "bm": // Bambara                  case "bo": // Tibetan                  case "dz": // Dzongkha                  case "fa": // Persian                  case "hu": // Hungarian                  case "id": // Indonesian                  case "ig": // Igbo                  case "ii": // Sichuan Yi                  case "ja": // Japanese                  case "jv": // Javanese                  case "ka": // Georgian                  case "kde": // Makonde                  case "kea": // Kabuverdianu                  case "km": // Khmer                  case "kn": // Kannada                  case "ko": // Korean                  case "ms": // Malay                  case "my": // Burmese                  case "root": // Root (?)                  case "sah": // Sakha                  case "ses": // Koyraboro Senni                  case "sg": // Sango                  case "th": // Thai                  case "to": // Tonga                  case "vi": // Vietnamese                  case "wo": // Wolof                  case "yo": // Yoruba                  case "zh": // Chinese                      return (n' c) => 0;                    // Dual: one (n == 1)' other                  case "af": // Afrikaans                  case "bem": // Bembda                  case "bg": // Bulgarian                  case "bn": // Bengali                  case "brx": // Bodo                  case "ca": // Catalan                  case "cgg": // Chiga                  case "chr": // Cherokee                  case "da": // Danish                  case "de": // German                  case "dv": // Divehi                  case "ee": // Ewe                  case "el": // Greek                  case "en": // English                  case "eo": // Esperanto                  case "es": // Spanish                  case "et": // Estonian                  case "eu": // Basque                  case "fi": // Finnish                  case "fo": // Faroese                  case "fur": // Friulian                  case "fy": // Western Frisian                  case "gl": // Galician                  case "gsw": // Swiss German                  case "gu": // Gujarati                  case "ha": // Hausa                  case "haw": // Hawaiian                  case "he": // Hebrew                  case "is": // Icelandic                  case "it": // Italian                  case "kk": // Kazakh                  case "kl": // Kalaallisut                  case "ku": // Kurdish                  case "lb": // Luxembourgish                  case "lg": // Ganda                  case "lo": // Lao                  case "mas": // Masai                  case "ml": // Malayalam                  case "mn": // Mongolian                  case "mr": // Marathi                  case "nah": // Nahuatl                  case "nb": // Norwegian Bokmål                  case "ne": // Nepali                  case "nl": // Dutch                  case "nn": // Norwegian Nynorsk                  case "no": // Norwegian                  case "nyn": // Nyankole                  case "om": // Oromo                  case "or": // Oriya                  case "pa": // Punjabi                  case "pap": // Papiamento                  case "ps": // Pashto                  case "pt": // Portuguese                  case "rm": // Romansh                  case "saq": // Samburu                  case "so": // Somali                  case "sq": // Albanian                  case "ssy": // Saho                  case "sw": // Swahili                  case "sv": // Swedish                  case "syr": // Syriac                  case "ta": // Tamil                  case "te": // Telugu                  case "tk": // Turkmen                  case "tr": // Turkish                  case "ur": // Urdu                  case "wae": // Walser                  case "xog": // Soga                  case "zu": // Zulu                      return (n' c) =>                      {                          if (c == 2) return (n == 1) ? 0 : 1;                          if (c == 3) return (n == 0) ? 0 : (n == 1) ? 1 : 2;                          if (c == 4) return (n < 0) ? 0 : (n == 0) ? 1 : (n == 1) ? 2 : 3;                          return -1;                      };                    // DualWithZero: one (n == 0..1)' other                  case "ak": // Akan                  case "am": // Amharic                  case "bh": // Bihari                  case "fil": // Filipino                  case "guw": // Gun                  case "hi": // Hindi                  case "ln": // Lingala                  case "mg": // Malagasy                  case "nso": // Northern Sotho                  case "ti": // Tigrinya                  case "tl": // Tagalog                  case "wa": // Walloon                      return (n' c) => (n == 0 || n == 1) ? 0 : 1;                    // DualFromZeroToTwo: one (n == 0..2 fractionate and n != 2)' other                  case "ff": // Fulah                  case "fr": // French                  case "kab": // Kabyle                      return (n' c) => (n >= 0 && n < 2) ? 0 : 1;                    // Triple: one (n == 1)' two (n == 2)' other                  case "ga": // Irish                  case "iu": // Inuktitut                  case "ksh": // Colognian                  case "kw": // Cornish                  case "se": // Northern Sami                  case "sma": // Southern Sami                  case "smi": // Sami language                  case "smj": // Lule Sami                  case "smn": // Inari Sami                  case "sms": // Skolt Sami                      return (n' c) => (n == 1) ? 0 : (n == 2) ? 1 : 2;                    // Russian & Serbo-Croatian                  case "be": // Belarusian                  case "bs": // Bosnian                  case "hr": // Croatian                  case "ru": // Russian                  case "sh": // Serbo-Croatian                  case "sr": // Serbian                  case "uk": // Ukrainian                      return (n' c) =>                          (n % 10 == 1) && !(n % 100 == 11) ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          2;                    // Unique:                    // Arabic                  case "ar":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          (n % 100).Between(3' 10) ? 3 : // few                          (n % 100).Between(11' 99) ? 4 : // many                          5; // other                    // Breton                  case "br":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5; // other                    // Czech                  case "cs":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Welsh                  case "cy":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5;                    // Manx                  case "gv":                      return (n' c) =>                          (n % 10).Between(1' 2) || (n % 20) == 0 ? 0 :  // one                          1;                    // Langi                  case "lag":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n > 0) && (n < 2) ? 1 : // one                          2;                    // Lithuanian                  case "lt":                      return (n' c) =>                          (n % 10) == 1 && !(n % 100).Between(11' 19) ? 0 : // one                          (n % 10).Between(2' 9) && !(n % 100).Between(11' 19) ? 1 : // few                          2;                    // Latvian                  case "lv":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n % 10) == 1 && (n % 100) != 11 ? 1 :                          2;                    // Macedonian                  case "mb":                      return (n' c) =>                          (n % 10) == 1 && n != 11 ? 0 : // one                          1;                    // Moldavian                  case "mo":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n != 1 && (n % 100).Between(1' 19)) ? 1 : // few                          2;                    // Maltese                  case "mt":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(2' 10) ? 1 : // few                          (n % 100).Between(11' 19) ? 2 : // many                          3;                    // Polish                  case "pl":                      return (n' c) =>                          n == 1 ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          (n % 10).Between(0' 1) || (n % 10).Between(5' 9) || (n % 100).Between(12' 14) ? 2 : // many                          3;                    // Romanian                  case "ro":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(1' 19) ? 1 : // few                          2;                    // Tachelhit                  case "shi":                      return (n' c) =>                          (n >= 0 && n <= 1) ? 0 : // one                          n.Between(2' 10) ? 1 : // few                          2;                    // Slovak                  case "sk":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Slovenian                  case "sl":                      return (n' c) =>                          (n % 100) == 1 ? 0 : // one                          (n % 100) == 2 ? 1 : // two                          (n % 100).Between(3' 4) ? 2 : // few                          3;                    // Central Morocco Tamazight                  case "tzm":                      return (n' c) =>                          n.Between(0' 1) || n.Between(11' 99) ? 0 : // one                          1;                      // Unknown language                  default:                      return null;              }
Magic Number,SmartFormat.Extensions,CommonLanguageRules,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\PluralLocalizationFormatter.cs,GetPluralRule,The following statement contains a magic number: switch (twoLetterISOLanguageName)              {                  // Singular                  case "az": // Azerbaijani                  case "bm": // Bambara                  case "bo": // Tibetan                  case "dz": // Dzongkha                  case "fa": // Persian                  case "hu": // Hungarian                  case "id": // Indonesian                  case "ig": // Igbo                  case "ii": // Sichuan Yi                  case "ja": // Japanese                  case "jv": // Javanese                  case "ka": // Georgian                  case "kde": // Makonde                  case "kea": // Kabuverdianu                  case "km": // Khmer                  case "kn": // Kannada                  case "ko": // Korean                  case "ms": // Malay                  case "my": // Burmese                  case "root": // Root (?)                  case "sah": // Sakha                  case "ses": // Koyraboro Senni                  case "sg": // Sango                  case "th": // Thai                  case "to": // Tonga                  case "vi": // Vietnamese                  case "wo": // Wolof                  case "yo": // Yoruba                  case "zh": // Chinese                      return (n' c) => 0;                    // Dual: one (n == 1)' other                  case "af": // Afrikaans                  case "bem": // Bembda                  case "bg": // Bulgarian                  case "bn": // Bengali                  case "brx": // Bodo                  case "ca": // Catalan                  case "cgg": // Chiga                  case "chr": // Cherokee                  case "da": // Danish                  case "de": // German                  case "dv": // Divehi                  case "ee": // Ewe                  case "el": // Greek                  case "en": // English                  case "eo": // Esperanto                  case "es": // Spanish                  case "et": // Estonian                  case "eu": // Basque                  case "fi": // Finnish                  case "fo": // Faroese                  case "fur": // Friulian                  case "fy": // Western Frisian                  case "gl": // Galician                  case "gsw": // Swiss German                  case "gu": // Gujarati                  case "ha": // Hausa                  case "haw": // Hawaiian                  case "he": // Hebrew                  case "is": // Icelandic                  case "it": // Italian                  case "kk": // Kazakh                  case "kl": // Kalaallisut                  case "ku": // Kurdish                  case "lb": // Luxembourgish                  case "lg": // Ganda                  case "lo": // Lao                  case "mas": // Masai                  case "ml": // Malayalam                  case "mn": // Mongolian                  case "mr": // Marathi                  case "nah": // Nahuatl                  case "nb": // Norwegian Bokmål                  case "ne": // Nepali                  case "nl": // Dutch                  case "nn": // Norwegian Nynorsk                  case "no": // Norwegian                  case "nyn": // Nyankole                  case "om": // Oromo                  case "or": // Oriya                  case "pa": // Punjabi                  case "pap": // Papiamento                  case "ps": // Pashto                  case "pt": // Portuguese                  case "rm": // Romansh                  case "saq": // Samburu                  case "so": // Somali                  case "sq": // Albanian                  case "ssy": // Saho                  case "sw": // Swahili                  case "sv": // Swedish                  case "syr": // Syriac                  case "ta": // Tamil                  case "te": // Telugu                  case "tk": // Turkmen                  case "tr": // Turkish                  case "ur": // Urdu                  case "wae": // Walser                  case "xog": // Soga                  case "zu": // Zulu                      return (n' c) =>                      {                          if (c == 2) return (n == 1) ? 0 : 1;                          if (c == 3) return (n == 0) ? 0 : (n == 1) ? 1 : 2;                          if (c == 4) return (n < 0) ? 0 : (n == 0) ? 1 : (n == 1) ? 2 : 3;                          return -1;                      };                    // DualWithZero: one (n == 0..1)' other                  case "ak": // Akan                  case "am": // Amharic                  case "bh": // Bihari                  case "fil": // Filipino                  case "guw": // Gun                  case "hi": // Hindi                  case "ln": // Lingala                  case "mg": // Malagasy                  case "nso": // Northern Sotho                  case "ti": // Tigrinya                  case "tl": // Tagalog                  case "wa": // Walloon                      return (n' c) => (n == 0 || n == 1) ? 0 : 1;                    // DualFromZeroToTwo: one (n == 0..2 fractionate and n != 2)' other                  case "ff": // Fulah                  case "fr": // French                  case "kab": // Kabyle                      return (n' c) => (n >= 0 && n < 2) ? 0 : 1;                    // Triple: one (n == 1)' two (n == 2)' other                  case "ga": // Irish                  case "iu": // Inuktitut                  case "ksh": // Colognian                  case "kw": // Cornish                  case "se": // Northern Sami                  case "sma": // Southern Sami                  case "smi": // Sami language                  case "smj": // Lule Sami                  case "smn": // Inari Sami                  case "sms": // Skolt Sami                      return (n' c) => (n == 1) ? 0 : (n == 2) ? 1 : 2;                    // Russian & Serbo-Croatian                  case "be": // Belarusian                  case "bs": // Bosnian                  case "hr": // Croatian                  case "ru": // Russian                  case "sh": // Serbo-Croatian                  case "sr": // Serbian                  case "uk": // Ukrainian                      return (n' c) =>                          (n % 10 == 1) && !(n % 100 == 11) ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          2;                    // Unique:                    // Arabic                  case "ar":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          (n % 100).Between(3' 10) ? 3 : // few                          (n % 100).Between(11' 99) ? 4 : // many                          5; // other                    // Breton                  case "br":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5; // other                    // Czech                  case "cs":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Welsh                  case "cy":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5;                    // Manx                  case "gv":                      return (n' c) =>                          (n % 10).Between(1' 2) || (n % 20) == 0 ? 0 :  // one                          1;                    // Langi                  case "lag":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n > 0) && (n < 2) ? 1 : // one                          2;                    // Lithuanian                  case "lt":                      return (n' c) =>                          (n % 10) == 1 && !(n % 100).Between(11' 19) ? 0 : // one                          (n % 10).Between(2' 9) && !(n % 100).Between(11' 19) ? 1 : // few                          2;                    // Latvian                  case "lv":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n % 10) == 1 && (n % 100) != 11 ? 1 :                          2;                    // Macedonian                  case "mb":                      return (n' c) =>                          (n % 10) == 1 && n != 11 ? 0 : // one                          1;                    // Moldavian                  case "mo":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n != 1 && (n % 100).Between(1' 19)) ? 1 : // few                          2;                    // Maltese                  case "mt":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(2' 10) ? 1 : // few                          (n % 100).Between(11' 19) ? 2 : // many                          3;                    // Polish                  case "pl":                      return (n' c) =>                          n == 1 ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          (n % 10).Between(0' 1) || (n % 10).Between(5' 9) || (n % 100).Between(12' 14) ? 2 : // many                          3;                    // Romanian                  case "ro":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(1' 19) ? 1 : // few                          2;                    // Tachelhit                  case "shi":                      return (n' c) =>                          (n >= 0 && n <= 1) ? 0 : // one                          n.Between(2' 10) ? 1 : // few                          2;                    // Slovak                  case "sk":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Slovenian                  case "sl":                      return (n' c) =>                          (n % 100) == 1 ? 0 : // one                          (n % 100) == 2 ? 1 : // two                          (n % 100).Between(3' 4) ? 2 : // few                          3;                    // Central Morocco Tamazight                  case "tzm":                      return (n' c) =>                          n.Between(0' 1) || n.Between(11' 99) ? 0 : // one                          1;                      // Unknown language                  default:                      return null;              }
Magic Number,SmartFormat.Extensions,CommonLanguageRules,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\PluralLocalizationFormatter.cs,GetPluralRule,The following statement contains a magic number: switch (twoLetterISOLanguageName)              {                  // Singular                  case "az": // Azerbaijani                  case "bm": // Bambara                  case "bo": // Tibetan                  case "dz": // Dzongkha                  case "fa": // Persian                  case "hu": // Hungarian                  case "id": // Indonesian                  case "ig": // Igbo                  case "ii": // Sichuan Yi                  case "ja": // Japanese                  case "jv": // Javanese                  case "ka": // Georgian                  case "kde": // Makonde                  case "kea": // Kabuverdianu                  case "km": // Khmer                  case "kn": // Kannada                  case "ko": // Korean                  case "ms": // Malay                  case "my": // Burmese                  case "root": // Root (?)                  case "sah": // Sakha                  case "ses": // Koyraboro Senni                  case "sg": // Sango                  case "th": // Thai                  case "to": // Tonga                  case "vi": // Vietnamese                  case "wo": // Wolof                  case "yo": // Yoruba                  case "zh": // Chinese                      return (n' c) => 0;                    // Dual: one (n == 1)' other                  case "af": // Afrikaans                  case "bem": // Bembda                  case "bg": // Bulgarian                  case "bn": // Bengali                  case "brx": // Bodo                  case "ca": // Catalan                  case "cgg": // Chiga                  case "chr": // Cherokee                  case "da": // Danish                  case "de": // German                  case "dv": // Divehi                  case "ee": // Ewe                  case "el": // Greek                  case "en": // English                  case "eo": // Esperanto                  case "es": // Spanish                  case "et": // Estonian                  case "eu": // Basque                  case "fi": // Finnish                  case "fo": // Faroese                  case "fur": // Friulian                  case "fy": // Western Frisian                  case "gl": // Galician                  case "gsw": // Swiss German                  case "gu": // Gujarati                  case "ha": // Hausa                  case "haw": // Hawaiian                  case "he": // Hebrew                  case "is": // Icelandic                  case "it": // Italian                  case "kk": // Kazakh                  case "kl": // Kalaallisut                  case "ku": // Kurdish                  case "lb": // Luxembourgish                  case "lg": // Ganda                  case "lo": // Lao                  case "mas": // Masai                  case "ml": // Malayalam                  case "mn": // Mongolian                  case "mr": // Marathi                  case "nah": // Nahuatl                  case "nb": // Norwegian Bokmål                  case "ne": // Nepali                  case "nl": // Dutch                  case "nn": // Norwegian Nynorsk                  case "no": // Norwegian                  case "nyn": // Nyankole                  case "om": // Oromo                  case "or": // Oriya                  case "pa": // Punjabi                  case "pap": // Papiamento                  case "ps": // Pashto                  case "pt": // Portuguese                  case "rm": // Romansh                  case "saq": // Samburu                  case "so": // Somali                  case "sq": // Albanian                  case "ssy": // Saho                  case "sw": // Swahili                  case "sv": // Swedish                  case "syr": // Syriac                  case "ta": // Tamil                  case "te": // Telugu                  case "tk": // Turkmen                  case "tr": // Turkish                  case "ur": // Urdu                  case "wae": // Walser                  case "xog": // Soga                  case "zu": // Zulu                      return (n' c) =>                      {                          if (c == 2) return (n == 1) ? 0 : 1;                          if (c == 3) return (n == 0) ? 0 : (n == 1) ? 1 : 2;                          if (c == 4) return (n < 0) ? 0 : (n == 0) ? 1 : (n == 1) ? 2 : 3;                          return -1;                      };                    // DualWithZero: one (n == 0..1)' other                  case "ak": // Akan                  case "am": // Amharic                  case "bh": // Bihari                  case "fil": // Filipino                  case "guw": // Gun                  case "hi": // Hindi                  case "ln": // Lingala                  case "mg": // Malagasy                  case "nso": // Northern Sotho                  case "ti": // Tigrinya                  case "tl": // Tagalog                  case "wa": // Walloon                      return (n' c) => (n == 0 || n == 1) ? 0 : 1;                    // DualFromZeroToTwo: one (n == 0..2 fractionate and n != 2)' other                  case "ff": // Fulah                  case "fr": // French                  case "kab": // Kabyle                      return (n' c) => (n >= 0 && n < 2) ? 0 : 1;                    // Triple: one (n == 1)' two (n == 2)' other                  case "ga": // Irish                  case "iu": // Inuktitut                  case "ksh": // Colognian                  case "kw": // Cornish                  case "se": // Northern Sami                  case "sma": // Southern Sami                  case "smi": // Sami language                  case "smj": // Lule Sami                  case "smn": // Inari Sami                  case "sms": // Skolt Sami                      return (n' c) => (n == 1) ? 0 : (n == 2) ? 1 : 2;                    // Russian & Serbo-Croatian                  case "be": // Belarusian                  case "bs": // Bosnian                  case "hr": // Croatian                  case "ru": // Russian                  case "sh": // Serbo-Croatian                  case "sr": // Serbian                  case "uk": // Ukrainian                      return (n' c) =>                          (n % 10 == 1) && !(n % 100 == 11) ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          2;                    // Unique:                    // Arabic                  case "ar":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          (n % 100).Between(3' 10) ? 3 : // few                          (n % 100).Between(11' 99) ? 4 : // many                          5; // other                    // Breton                  case "br":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5; // other                    // Czech                  case "cs":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Welsh                  case "cy":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5;                    // Manx                  case "gv":                      return (n' c) =>                          (n % 10).Between(1' 2) || (n % 20) == 0 ? 0 :  // one                          1;                    // Langi                  case "lag":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n > 0) && (n < 2) ? 1 : // one                          2;                    // Lithuanian                  case "lt":                      return (n' c) =>                          (n % 10) == 1 && !(n % 100).Between(11' 19) ? 0 : // one                          (n % 10).Between(2' 9) && !(n % 100).Between(11' 19) ? 1 : // few                          2;                    // Latvian                  case "lv":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n % 10) == 1 && (n % 100) != 11 ? 1 :                          2;                    // Macedonian                  case "mb":                      return (n' c) =>                          (n % 10) == 1 && n != 11 ? 0 : // one                          1;                    // Moldavian                  case "mo":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n != 1 && (n % 100).Between(1' 19)) ? 1 : // few                          2;                    // Maltese                  case "mt":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(2' 10) ? 1 : // few                          (n % 100).Between(11' 19) ? 2 : // many                          3;                    // Polish                  case "pl":                      return (n' c) =>                          n == 1 ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          (n % 10).Between(0' 1) || (n % 10).Between(5' 9) || (n % 100).Between(12' 14) ? 2 : // many                          3;                    // Romanian                  case "ro":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(1' 19) ? 1 : // few                          2;                    // Tachelhit                  case "shi":                      return (n' c) =>                          (n >= 0 && n <= 1) ? 0 : // one                          n.Between(2' 10) ? 1 : // few                          2;                    // Slovak                  case "sk":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Slovenian                  case "sl":                      return (n' c) =>                          (n % 100) == 1 ? 0 : // one                          (n % 100) == 2 ? 1 : // two                          (n % 100).Between(3' 4) ? 2 : // few                          3;                    // Central Morocco Tamazight                  case "tzm":                      return (n' c) =>                          n.Between(0' 1) || n.Between(11' 99) ? 0 : // one                          1;                      // Unknown language                  default:                      return null;              }
Magic Number,SmartFormat.Extensions,CommonLanguageRules,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\PluralLocalizationFormatter.cs,GetPluralRule,The following statement contains a magic number: switch (twoLetterISOLanguageName)              {                  // Singular                  case "az": // Azerbaijani                  case "bm": // Bambara                  case "bo": // Tibetan                  case "dz": // Dzongkha                  case "fa": // Persian                  case "hu": // Hungarian                  case "id": // Indonesian                  case "ig": // Igbo                  case "ii": // Sichuan Yi                  case "ja": // Japanese                  case "jv": // Javanese                  case "ka": // Georgian                  case "kde": // Makonde                  case "kea": // Kabuverdianu                  case "km": // Khmer                  case "kn": // Kannada                  case "ko": // Korean                  case "ms": // Malay                  case "my": // Burmese                  case "root": // Root (?)                  case "sah": // Sakha                  case "ses": // Koyraboro Senni                  case "sg": // Sango                  case "th": // Thai                  case "to": // Tonga                  case "vi": // Vietnamese                  case "wo": // Wolof                  case "yo": // Yoruba                  case "zh": // Chinese                      return (n' c) => 0;                    // Dual: one (n == 1)' other                  case "af": // Afrikaans                  case "bem": // Bembda                  case "bg": // Bulgarian                  case "bn": // Bengali                  case "brx": // Bodo                  case "ca": // Catalan                  case "cgg": // Chiga                  case "chr": // Cherokee                  case "da": // Danish                  case "de": // German                  case "dv": // Divehi                  case "ee": // Ewe                  case "el": // Greek                  case "en": // English                  case "eo": // Esperanto                  case "es": // Spanish                  case "et": // Estonian                  case "eu": // Basque                  case "fi": // Finnish                  case "fo": // Faroese                  case "fur": // Friulian                  case "fy": // Western Frisian                  case "gl": // Galician                  case "gsw": // Swiss German                  case "gu": // Gujarati                  case "ha": // Hausa                  case "haw": // Hawaiian                  case "he": // Hebrew                  case "is": // Icelandic                  case "it": // Italian                  case "kk": // Kazakh                  case "kl": // Kalaallisut                  case "ku": // Kurdish                  case "lb": // Luxembourgish                  case "lg": // Ganda                  case "lo": // Lao                  case "mas": // Masai                  case "ml": // Malayalam                  case "mn": // Mongolian                  case "mr": // Marathi                  case "nah": // Nahuatl                  case "nb": // Norwegian Bokmål                  case "ne": // Nepali                  case "nl": // Dutch                  case "nn": // Norwegian Nynorsk                  case "no": // Norwegian                  case "nyn": // Nyankole                  case "om": // Oromo                  case "or": // Oriya                  case "pa": // Punjabi                  case "pap": // Papiamento                  case "ps": // Pashto                  case "pt": // Portuguese                  case "rm": // Romansh                  case "saq": // Samburu                  case "so": // Somali                  case "sq": // Albanian                  case "ssy": // Saho                  case "sw": // Swahili                  case "sv": // Swedish                  case "syr": // Syriac                  case "ta": // Tamil                  case "te": // Telugu                  case "tk": // Turkmen                  case "tr": // Turkish                  case "ur": // Urdu                  case "wae": // Walser                  case "xog": // Soga                  case "zu": // Zulu                      return (n' c) =>                      {                          if (c == 2) return (n == 1) ? 0 : 1;                          if (c == 3) return (n == 0) ? 0 : (n == 1) ? 1 : 2;                          if (c == 4) return (n < 0) ? 0 : (n == 0) ? 1 : (n == 1) ? 2 : 3;                          return -1;                      };                    // DualWithZero: one (n == 0..1)' other                  case "ak": // Akan                  case "am": // Amharic                  case "bh": // Bihari                  case "fil": // Filipino                  case "guw": // Gun                  case "hi": // Hindi                  case "ln": // Lingala                  case "mg": // Malagasy                  case "nso": // Northern Sotho                  case "ti": // Tigrinya                  case "tl": // Tagalog                  case "wa": // Walloon                      return (n' c) => (n == 0 || n == 1) ? 0 : 1;                    // DualFromZeroToTwo: one (n == 0..2 fractionate and n != 2)' other                  case "ff": // Fulah                  case "fr": // French                  case "kab": // Kabyle                      return (n' c) => (n >= 0 && n < 2) ? 0 : 1;                    // Triple: one (n == 1)' two (n == 2)' other                  case "ga": // Irish                  case "iu": // Inuktitut                  case "ksh": // Colognian                  case "kw": // Cornish                  case "se": // Northern Sami                  case "sma": // Southern Sami                  case "smi": // Sami language                  case "smj": // Lule Sami                  case "smn": // Inari Sami                  case "sms": // Skolt Sami                      return (n' c) => (n == 1) ? 0 : (n == 2) ? 1 : 2;                    // Russian & Serbo-Croatian                  case "be": // Belarusian                  case "bs": // Bosnian                  case "hr": // Croatian                  case "ru": // Russian                  case "sh": // Serbo-Croatian                  case "sr": // Serbian                  case "uk": // Ukrainian                      return (n' c) =>                          (n % 10 == 1) && !(n % 100 == 11) ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          2;                    // Unique:                    // Arabic                  case "ar":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          (n % 100).Between(3' 10) ? 3 : // few                          (n % 100).Between(11' 99) ? 4 : // many                          5; // other                    // Breton                  case "br":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5; // other                    // Czech                  case "cs":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Welsh                  case "cy":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5;                    // Manx                  case "gv":                      return (n' c) =>                          (n % 10).Between(1' 2) || (n % 20) == 0 ? 0 :  // one                          1;                    // Langi                  case "lag":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n > 0) && (n < 2) ? 1 : // one                          2;                    // Lithuanian                  case "lt":                      return (n' c) =>                          (n % 10) == 1 && !(n % 100).Between(11' 19) ? 0 : // one                          (n % 10).Between(2' 9) && !(n % 100).Between(11' 19) ? 1 : // few                          2;                    // Latvian                  case "lv":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n % 10) == 1 && (n % 100) != 11 ? 1 :                          2;                    // Macedonian                  case "mb":                      return (n' c) =>                          (n % 10) == 1 && n != 11 ? 0 : // one                          1;                    // Moldavian                  case "mo":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n != 1 && (n % 100).Between(1' 19)) ? 1 : // few                          2;                    // Maltese                  case "mt":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(2' 10) ? 1 : // few                          (n % 100).Between(11' 19) ? 2 : // many                          3;                    // Polish                  case "pl":                      return (n' c) =>                          n == 1 ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          (n % 10).Between(0' 1) || (n % 10).Between(5' 9) || (n % 100).Between(12' 14) ? 2 : // many                          3;                    // Romanian                  case "ro":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(1' 19) ? 1 : // few                          2;                    // Tachelhit                  case "shi":                      return (n' c) =>                          (n >= 0 && n <= 1) ? 0 : // one                          n.Between(2' 10) ? 1 : // few                          2;                    // Slovak                  case "sk":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Slovenian                  case "sl":                      return (n' c) =>                          (n % 100) == 1 ? 0 : // one                          (n % 100) == 2 ? 1 : // two                          (n % 100).Between(3' 4) ? 2 : // few                          3;                    // Central Morocco Tamazight                  case "tzm":                      return (n' c) =>                          n.Between(0' 1) || n.Between(11' 99) ? 0 : // one                          1;                      // Unknown language                  default:                      return null;              }
Magic Number,SmartFormat.Extensions,CommonLanguageRules,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\PluralLocalizationFormatter.cs,GetPluralRule,The following statement contains a magic number: switch (twoLetterISOLanguageName)              {                  // Singular                  case "az": // Azerbaijani                  case "bm": // Bambara                  case "bo": // Tibetan                  case "dz": // Dzongkha                  case "fa": // Persian                  case "hu": // Hungarian                  case "id": // Indonesian                  case "ig": // Igbo                  case "ii": // Sichuan Yi                  case "ja": // Japanese                  case "jv": // Javanese                  case "ka": // Georgian                  case "kde": // Makonde                  case "kea": // Kabuverdianu                  case "km": // Khmer                  case "kn": // Kannada                  case "ko": // Korean                  case "ms": // Malay                  case "my": // Burmese                  case "root": // Root (?)                  case "sah": // Sakha                  case "ses": // Koyraboro Senni                  case "sg": // Sango                  case "th": // Thai                  case "to": // Tonga                  case "vi": // Vietnamese                  case "wo": // Wolof                  case "yo": // Yoruba                  case "zh": // Chinese                      return (n' c) => 0;                    // Dual: one (n == 1)' other                  case "af": // Afrikaans                  case "bem": // Bembda                  case "bg": // Bulgarian                  case "bn": // Bengali                  case "brx": // Bodo                  case "ca": // Catalan                  case "cgg": // Chiga                  case "chr": // Cherokee                  case "da": // Danish                  case "de": // German                  case "dv": // Divehi                  case "ee": // Ewe                  case "el": // Greek                  case "en": // English                  case "eo": // Esperanto                  case "es": // Spanish                  case "et": // Estonian                  case "eu": // Basque                  case "fi": // Finnish                  case "fo": // Faroese                  case "fur": // Friulian                  case "fy": // Western Frisian                  case "gl": // Galician                  case "gsw": // Swiss German                  case "gu": // Gujarati                  case "ha": // Hausa                  case "haw": // Hawaiian                  case "he": // Hebrew                  case "is": // Icelandic                  case "it": // Italian                  case "kk": // Kazakh                  case "kl": // Kalaallisut                  case "ku": // Kurdish                  case "lb": // Luxembourgish                  case "lg": // Ganda                  case "lo": // Lao                  case "mas": // Masai                  case "ml": // Malayalam                  case "mn": // Mongolian                  case "mr": // Marathi                  case "nah": // Nahuatl                  case "nb": // Norwegian Bokmål                  case "ne": // Nepali                  case "nl": // Dutch                  case "nn": // Norwegian Nynorsk                  case "no": // Norwegian                  case "nyn": // Nyankole                  case "om": // Oromo                  case "or": // Oriya                  case "pa": // Punjabi                  case "pap": // Papiamento                  case "ps": // Pashto                  case "pt": // Portuguese                  case "rm": // Romansh                  case "saq": // Samburu                  case "so": // Somali                  case "sq": // Albanian                  case "ssy": // Saho                  case "sw": // Swahili                  case "sv": // Swedish                  case "syr": // Syriac                  case "ta": // Tamil                  case "te": // Telugu                  case "tk": // Turkmen                  case "tr": // Turkish                  case "ur": // Urdu                  case "wae": // Walser                  case "xog": // Soga                  case "zu": // Zulu                      return (n' c) =>                      {                          if (c == 2) return (n == 1) ? 0 : 1;                          if (c == 3) return (n == 0) ? 0 : (n == 1) ? 1 : 2;                          if (c == 4) return (n < 0) ? 0 : (n == 0) ? 1 : (n == 1) ? 2 : 3;                          return -1;                      };                    // DualWithZero: one (n == 0..1)' other                  case "ak": // Akan                  case "am": // Amharic                  case "bh": // Bihari                  case "fil": // Filipino                  case "guw": // Gun                  case "hi": // Hindi                  case "ln": // Lingala                  case "mg": // Malagasy                  case "nso": // Northern Sotho                  case "ti": // Tigrinya                  case "tl": // Tagalog                  case "wa": // Walloon                      return (n' c) => (n == 0 || n == 1) ? 0 : 1;                    // DualFromZeroToTwo: one (n == 0..2 fractionate and n != 2)' other                  case "ff": // Fulah                  case "fr": // French                  case "kab": // Kabyle                      return (n' c) => (n >= 0 && n < 2) ? 0 : 1;                    // Triple: one (n == 1)' two (n == 2)' other                  case "ga": // Irish                  case "iu": // Inuktitut                  case "ksh": // Colognian                  case "kw": // Cornish                  case "se": // Northern Sami                  case "sma": // Southern Sami                  case "smi": // Sami language                  case "smj": // Lule Sami                  case "smn": // Inari Sami                  case "sms": // Skolt Sami                      return (n' c) => (n == 1) ? 0 : (n == 2) ? 1 : 2;                    // Russian & Serbo-Croatian                  case "be": // Belarusian                  case "bs": // Bosnian                  case "hr": // Croatian                  case "ru": // Russian                  case "sh": // Serbo-Croatian                  case "sr": // Serbian                  case "uk": // Ukrainian                      return (n' c) =>                          (n % 10 == 1) && !(n % 100 == 11) ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          2;                    // Unique:                    // Arabic                  case "ar":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          (n % 100).Between(3' 10) ? 3 : // few                          (n % 100).Between(11' 99) ? 4 : // many                          5; // other                    // Breton                  case "br":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5; // other                    // Czech                  case "cs":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Welsh                  case "cy":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5;                    // Manx                  case "gv":                      return (n' c) =>                          (n % 10).Between(1' 2) || (n % 20) == 0 ? 0 :  // one                          1;                    // Langi                  case "lag":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n > 0) && (n < 2) ? 1 : // one                          2;                    // Lithuanian                  case "lt":                      return (n' c) =>                          (n % 10) == 1 && !(n % 100).Between(11' 19) ? 0 : // one                          (n % 10).Between(2' 9) && !(n % 100).Between(11' 19) ? 1 : // few                          2;                    // Latvian                  case "lv":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n % 10) == 1 && (n % 100) != 11 ? 1 :                          2;                    // Macedonian                  case "mb":                      return (n' c) =>                          (n % 10) == 1 && n != 11 ? 0 : // one                          1;                    // Moldavian                  case "mo":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n != 1 && (n % 100).Between(1' 19)) ? 1 : // few                          2;                    // Maltese                  case "mt":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(2' 10) ? 1 : // few                          (n % 100).Between(11' 19) ? 2 : // many                          3;                    // Polish                  case "pl":                      return (n' c) =>                          n == 1 ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          (n % 10).Between(0' 1) || (n % 10).Between(5' 9) || (n % 100).Between(12' 14) ? 2 : // many                          3;                    // Romanian                  case "ro":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(1' 19) ? 1 : // few                          2;                    // Tachelhit                  case "shi":                      return (n' c) =>                          (n >= 0 && n <= 1) ? 0 : // one                          n.Between(2' 10) ? 1 : // few                          2;                    // Slovak                  case "sk":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Slovenian                  case "sl":                      return (n' c) =>                          (n % 100) == 1 ? 0 : // one                          (n % 100) == 2 ? 1 : // two                          (n % 100).Between(3' 4) ? 2 : // few                          3;                    // Central Morocco Tamazight                  case "tzm":                      return (n' c) =>                          n.Between(0' 1) || n.Between(11' 99) ? 0 : // one                          1;                      // Unknown language                  default:                      return null;              }
Magic Number,SmartFormat.Extensions,CommonLanguageRules,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\PluralLocalizationFormatter.cs,GetPluralRule,The following statement contains a magic number: switch (twoLetterISOLanguageName)              {                  // Singular                  case "az": // Azerbaijani                  case "bm": // Bambara                  case "bo": // Tibetan                  case "dz": // Dzongkha                  case "fa": // Persian                  case "hu": // Hungarian                  case "id": // Indonesian                  case "ig": // Igbo                  case "ii": // Sichuan Yi                  case "ja": // Japanese                  case "jv": // Javanese                  case "ka": // Georgian                  case "kde": // Makonde                  case "kea": // Kabuverdianu                  case "km": // Khmer                  case "kn": // Kannada                  case "ko": // Korean                  case "ms": // Malay                  case "my": // Burmese                  case "root": // Root (?)                  case "sah": // Sakha                  case "ses": // Koyraboro Senni                  case "sg": // Sango                  case "th": // Thai                  case "to": // Tonga                  case "vi": // Vietnamese                  case "wo": // Wolof                  case "yo": // Yoruba                  case "zh": // Chinese                      return (n' c) => 0;                    // Dual: one (n == 1)' other                  case "af": // Afrikaans                  case "bem": // Bembda                  case "bg": // Bulgarian                  case "bn": // Bengali                  case "brx": // Bodo                  case "ca": // Catalan                  case "cgg": // Chiga                  case "chr": // Cherokee                  case "da": // Danish                  case "de": // German                  case "dv": // Divehi                  case "ee": // Ewe                  case "el": // Greek                  case "en": // English                  case "eo": // Esperanto                  case "es": // Spanish                  case "et": // Estonian                  case "eu": // Basque                  case "fi": // Finnish                  case "fo": // Faroese                  case "fur": // Friulian                  case "fy": // Western Frisian                  case "gl": // Galician                  case "gsw": // Swiss German                  case "gu": // Gujarati                  case "ha": // Hausa                  case "haw": // Hawaiian                  case "he": // Hebrew                  case "is": // Icelandic                  case "it": // Italian                  case "kk": // Kazakh                  case "kl": // Kalaallisut                  case "ku": // Kurdish                  case "lb": // Luxembourgish                  case "lg": // Ganda                  case "lo": // Lao                  case "mas": // Masai                  case "ml": // Malayalam                  case "mn": // Mongolian                  case "mr": // Marathi                  case "nah": // Nahuatl                  case "nb": // Norwegian Bokmål                  case "ne": // Nepali                  case "nl": // Dutch                  case "nn": // Norwegian Nynorsk                  case "no": // Norwegian                  case "nyn": // Nyankole                  case "om": // Oromo                  case "or": // Oriya                  case "pa": // Punjabi                  case "pap": // Papiamento                  case "ps": // Pashto                  case "pt": // Portuguese                  case "rm": // Romansh                  case "saq": // Samburu                  case "so": // Somali                  case "sq": // Albanian                  case "ssy": // Saho                  case "sw": // Swahili                  case "sv": // Swedish                  case "syr": // Syriac                  case "ta": // Tamil                  case "te": // Telugu                  case "tk": // Turkmen                  case "tr": // Turkish                  case "ur": // Urdu                  case "wae": // Walser                  case "xog": // Soga                  case "zu": // Zulu                      return (n' c) =>                      {                          if (c == 2) return (n == 1) ? 0 : 1;                          if (c == 3) return (n == 0) ? 0 : (n == 1) ? 1 : 2;                          if (c == 4) return (n < 0) ? 0 : (n == 0) ? 1 : (n == 1) ? 2 : 3;                          return -1;                      };                    // DualWithZero: one (n == 0..1)' other                  case "ak": // Akan                  case "am": // Amharic                  case "bh": // Bihari                  case "fil": // Filipino                  case "guw": // Gun                  case "hi": // Hindi                  case "ln": // Lingala                  case "mg": // Malagasy                  case "nso": // Northern Sotho                  case "ti": // Tigrinya                  case "tl": // Tagalog                  case "wa": // Walloon                      return (n' c) => (n == 0 || n == 1) ? 0 : 1;                    // DualFromZeroToTwo: one (n == 0..2 fractionate and n != 2)' other                  case "ff": // Fulah                  case "fr": // French                  case "kab": // Kabyle                      return (n' c) => (n >= 0 && n < 2) ? 0 : 1;                    // Triple: one (n == 1)' two (n == 2)' other                  case "ga": // Irish                  case "iu": // Inuktitut                  case "ksh": // Colognian                  case "kw": // Cornish                  case "se": // Northern Sami                  case "sma": // Southern Sami                  case "smi": // Sami language                  case "smj": // Lule Sami                  case "smn": // Inari Sami                  case "sms": // Skolt Sami                      return (n' c) => (n == 1) ? 0 : (n == 2) ? 1 : 2;                    // Russian & Serbo-Croatian                  case "be": // Belarusian                  case "bs": // Bosnian                  case "hr": // Croatian                  case "ru": // Russian                  case "sh": // Serbo-Croatian                  case "sr": // Serbian                  case "uk": // Ukrainian                      return (n' c) =>                          (n % 10 == 1) && !(n % 100 == 11) ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          2;                    // Unique:                    // Arabic                  case "ar":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          (n % 100).Between(3' 10) ? 3 : // few                          (n % 100).Between(11' 99) ? 4 : // many                          5; // other                    // Breton                  case "br":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5; // other                    // Czech                  case "cs":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Welsh                  case "cy":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5;                    // Manx                  case "gv":                      return (n' c) =>                          (n % 10).Between(1' 2) || (n % 20) == 0 ? 0 :  // one                          1;                    // Langi                  case "lag":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n > 0) && (n < 2) ? 1 : // one                          2;                    // Lithuanian                  case "lt":                      return (n' c) =>                          (n % 10) == 1 && !(n % 100).Between(11' 19) ? 0 : // one                          (n % 10).Between(2' 9) && !(n % 100).Between(11' 19) ? 1 : // few                          2;                    // Latvian                  case "lv":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n % 10) == 1 && (n % 100) != 11 ? 1 :                          2;                    // Macedonian                  case "mb":                      return (n' c) =>                          (n % 10) == 1 && n != 11 ? 0 : // one                          1;                    // Moldavian                  case "mo":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n != 1 && (n % 100).Between(1' 19)) ? 1 : // few                          2;                    // Maltese                  case "mt":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(2' 10) ? 1 : // few                          (n % 100).Between(11' 19) ? 2 : // many                          3;                    // Polish                  case "pl":                      return (n' c) =>                          n == 1 ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          (n % 10).Between(0' 1) || (n % 10).Between(5' 9) || (n % 100).Between(12' 14) ? 2 : // many                          3;                    // Romanian                  case "ro":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(1' 19) ? 1 : // few                          2;                    // Tachelhit                  case "shi":                      return (n' c) =>                          (n >= 0 && n <= 1) ? 0 : // one                          n.Between(2' 10) ? 1 : // few                          2;                    // Slovak                  case "sk":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Slovenian                  case "sl":                      return (n' c) =>                          (n % 100) == 1 ? 0 : // one                          (n % 100) == 2 ? 1 : // two                          (n % 100).Between(3' 4) ? 2 : // few                          3;                    // Central Morocco Tamazight                  case "tzm":                      return (n' c) =>                          n.Between(0' 1) || n.Between(11' 99) ? 0 : // one                          1;                      // Unknown language                  default:                      return null;              }
Magic Number,SmartFormat.Extensions,CommonLanguageRules,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\PluralLocalizationFormatter.cs,GetPluralRule,The following statement contains a magic number: switch (twoLetterISOLanguageName)              {                  // Singular                  case "az": // Azerbaijani                  case "bm": // Bambara                  case "bo": // Tibetan                  case "dz": // Dzongkha                  case "fa": // Persian                  case "hu": // Hungarian                  case "id": // Indonesian                  case "ig": // Igbo                  case "ii": // Sichuan Yi                  case "ja": // Japanese                  case "jv": // Javanese                  case "ka": // Georgian                  case "kde": // Makonde                  case "kea": // Kabuverdianu                  case "km": // Khmer                  case "kn": // Kannada                  case "ko": // Korean                  case "ms": // Malay                  case "my": // Burmese                  case "root": // Root (?)                  case "sah": // Sakha                  case "ses": // Koyraboro Senni                  case "sg": // Sango                  case "th": // Thai                  case "to": // Tonga                  case "vi": // Vietnamese                  case "wo": // Wolof                  case "yo": // Yoruba                  case "zh": // Chinese                      return (n' c) => 0;                    // Dual: one (n == 1)' other                  case "af": // Afrikaans                  case "bem": // Bembda                  case "bg": // Bulgarian                  case "bn": // Bengali                  case "brx": // Bodo                  case "ca": // Catalan                  case "cgg": // Chiga                  case "chr": // Cherokee                  case "da": // Danish                  case "de": // German                  case "dv": // Divehi                  case "ee": // Ewe                  case "el": // Greek                  case "en": // English                  case "eo": // Esperanto                  case "es": // Spanish                  case "et": // Estonian                  case "eu": // Basque                  case "fi": // Finnish                  case "fo": // Faroese                  case "fur": // Friulian                  case "fy": // Western Frisian                  case "gl": // Galician                  case "gsw": // Swiss German                  case "gu": // Gujarati                  case "ha": // Hausa                  case "haw": // Hawaiian                  case "he": // Hebrew                  case "is": // Icelandic                  case "it": // Italian                  case "kk": // Kazakh                  case "kl": // Kalaallisut                  case "ku": // Kurdish                  case "lb": // Luxembourgish                  case "lg": // Ganda                  case "lo": // Lao                  case "mas": // Masai                  case "ml": // Malayalam                  case "mn": // Mongolian                  case "mr": // Marathi                  case "nah": // Nahuatl                  case "nb": // Norwegian Bokmål                  case "ne": // Nepali                  case "nl": // Dutch                  case "nn": // Norwegian Nynorsk                  case "no": // Norwegian                  case "nyn": // Nyankole                  case "om": // Oromo                  case "or": // Oriya                  case "pa": // Punjabi                  case "pap": // Papiamento                  case "ps": // Pashto                  case "pt": // Portuguese                  case "rm": // Romansh                  case "saq": // Samburu                  case "so": // Somali                  case "sq": // Albanian                  case "ssy": // Saho                  case "sw": // Swahili                  case "sv": // Swedish                  case "syr": // Syriac                  case "ta": // Tamil                  case "te": // Telugu                  case "tk": // Turkmen                  case "tr": // Turkish                  case "ur": // Urdu                  case "wae": // Walser                  case "xog": // Soga                  case "zu": // Zulu                      return (n' c) =>                      {                          if (c == 2) return (n == 1) ? 0 : 1;                          if (c == 3) return (n == 0) ? 0 : (n == 1) ? 1 : 2;                          if (c == 4) return (n < 0) ? 0 : (n == 0) ? 1 : (n == 1) ? 2 : 3;                          return -1;                      };                    // DualWithZero: one (n == 0..1)' other                  case "ak": // Akan                  case "am": // Amharic                  case "bh": // Bihari                  case "fil": // Filipino                  case "guw": // Gun                  case "hi": // Hindi                  case "ln": // Lingala                  case "mg": // Malagasy                  case "nso": // Northern Sotho                  case "ti": // Tigrinya                  case "tl": // Tagalog                  case "wa": // Walloon                      return (n' c) => (n == 0 || n == 1) ? 0 : 1;                    // DualFromZeroToTwo: one (n == 0..2 fractionate and n != 2)' other                  case "ff": // Fulah                  case "fr": // French                  case "kab": // Kabyle                      return (n' c) => (n >= 0 && n < 2) ? 0 : 1;                    // Triple: one (n == 1)' two (n == 2)' other                  case "ga": // Irish                  case "iu": // Inuktitut                  case "ksh": // Colognian                  case "kw": // Cornish                  case "se": // Northern Sami                  case "sma": // Southern Sami                  case "smi": // Sami language                  case "smj": // Lule Sami                  case "smn": // Inari Sami                  case "sms": // Skolt Sami                      return (n' c) => (n == 1) ? 0 : (n == 2) ? 1 : 2;                    // Russian & Serbo-Croatian                  case "be": // Belarusian                  case "bs": // Bosnian                  case "hr": // Croatian                  case "ru": // Russian                  case "sh": // Serbo-Croatian                  case "sr": // Serbian                  case "uk": // Ukrainian                      return (n' c) =>                          (n % 10 == 1) && !(n % 100 == 11) ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          2;                    // Unique:                    // Arabic                  case "ar":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          (n % 100).Between(3' 10) ? 3 : // few                          (n % 100).Between(11' 99) ? 4 : // many                          5; // other                    // Breton                  case "br":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5; // other                    // Czech                  case "cs":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Welsh                  case "cy":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5;                    // Manx                  case "gv":                      return (n' c) =>                          (n % 10).Between(1' 2) || (n % 20) == 0 ? 0 :  // one                          1;                    // Langi                  case "lag":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n > 0) && (n < 2) ? 1 : // one                          2;                    // Lithuanian                  case "lt":                      return (n' c) =>                          (n % 10) == 1 && !(n % 100).Between(11' 19) ? 0 : // one                          (n % 10).Between(2' 9) && !(n % 100).Between(11' 19) ? 1 : // few                          2;                    // Latvian                  case "lv":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n % 10) == 1 && (n % 100) != 11 ? 1 :                          2;                    // Macedonian                  case "mb":                      return (n' c) =>                          (n % 10) == 1 && n != 11 ? 0 : // one                          1;                    // Moldavian                  case "mo":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n != 1 && (n % 100).Between(1' 19)) ? 1 : // few                          2;                    // Maltese                  case "mt":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(2' 10) ? 1 : // few                          (n % 100).Between(11' 19) ? 2 : // many                          3;                    // Polish                  case "pl":                      return (n' c) =>                          n == 1 ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          (n % 10).Between(0' 1) || (n % 10).Between(5' 9) || (n % 100).Between(12' 14) ? 2 : // many                          3;                    // Romanian                  case "ro":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(1' 19) ? 1 : // few                          2;                    // Tachelhit                  case "shi":                      return (n' c) =>                          (n >= 0 && n <= 1) ? 0 : // one                          n.Between(2' 10) ? 1 : // few                          2;                    // Slovak                  case "sk":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Slovenian                  case "sl":                      return (n' c) =>                          (n % 100) == 1 ? 0 : // one                          (n % 100) == 2 ? 1 : // two                          (n % 100).Between(3' 4) ? 2 : // few                          3;                    // Central Morocco Tamazight                  case "tzm":                      return (n' c) =>                          n.Between(0' 1) || n.Between(11' 99) ? 0 : // one                          1;                      // Unknown language                  default:                      return null;              }
Magic Number,SmartFormat.Extensions,CommonLanguageRules,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\PluralLocalizationFormatter.cs,GetPluralRule,The following statement contains a magic number: switch (twoLetterISOLanguageName)              {                  // Singular                  case "az": // Azerbaijani                  case "bm": // Bambara                  case "bo": // Tibetan                  case "dz": // Dzongkha                  case "fa": // Persian                  case "hu": // Hungarian                  case "id": // Indonesian                  case "ig": // Igbo                  case "ii": // Sichuan Yi                  case "ja": // Japanese                  case "jv": // Javanese                  case "ka": // Georgian                  case "kde": // Makonde                  case "kea": // Kabuverdianu                  case "km": // Khmer                  case "kn": // Kannada                  case "ko": // Korean                  case "ms": // Malay                  case "my": // Burmese                  case "root": // Root (?)                  case "sah": // Sakha                  case "ses": // Koyraboro Senni                  case "sg": // Sango                  case "th": // Thai                  case "to": // Tonga                  case "vi": // Vietnamese                  case "wo": // Wolof                  case "yo": // Yoruba                  case "zh": // Chinese                      return (n' c) => 0;                    // Dual: one (n == 1)' other                  case "af": // Afrikaans                  case "bem": // Bembda                  case "bg": // Bulgarian                  case "bn": // Bengali                  case "brx": // Bodo                  case "ca": // Catalan                  case "cgg": // Chiga                  case "chr": // Cherokee                  case "da": // Danish                  case "de": // German                  case "dv": // Divehi                  case "ee": // Ewe                  case "el": // Greek                  case "en": // English                  case "eo": // Esperanto                  case "es": // Spanish                  case "et": // Estonian                  case "eu": // Basque                  case "fi": // Finnish                  case "fo": // Faroese                  case "fur": // Friulian                  case "fy": // Western Frisian                  case "gl": // Galician                  case "gsw": // Swiss German                  case "gu": // Gujarati                  case "ha": // Hausa                  case "haw": // Hawaiian                  case "he": // Hebrew                  case "is": // Icelandic                  case "it": // Italian                  case "kk": // Kazakh                  case "kl": // Kalaallisut                  case "ku": // Kurdish                  case "lb": // Luxembourgish                  case "lg": // Ganda                  case "lo": // Lao                  case "mas": // Masai                  case "ml": // Malayalam                  case "mn": // Mongolian                  case "mr": // Marathi                  case "nah": // Nahuatl                  case "nb": // Norwegian Bokmål                  case "ne": // Nepali                  case "nl": // Dutch                  case "nn": // Norwegian Nynorsk                  case "no": // Norwegian                  case "nyn": // Nyankole                  case "om": // Oromo                  case "or": // Oriya                  case "pa": // Punjabi                  case "pap": // Papiamento                  case "ps": // Pashto                  case "pt": // Portuguese                  case "rm": // Romansh                  case "saq": // Samburu                  case "so": // Somali                  case "sq": // Albanian                  case "ssy": // Saho                  case "sw": // Swahili                  case "sv": // Swedish                  case "syr": // Syriac                  case "ta": // Tamil                  case "te": // Telugu                  case "tk": // Turkmen                  case "tr": // Turkish                  case "ur": // Urdu                  case "wae": // Walser                  case "xog": // Soga                  case "zu": // Zulu                      return (n' c) =>                      {                          if (c == 2) return (n == 1) ? 0 : 1;                          if (c == 3) return (n == 0) ? 0 : (n == 1) ? 1 : 2;                          if (c == 4) return (n < 0) ? 0 : (n == 0) ? 1 : (n == 1) ? 2 : 3;                          return -1;                      };                    // DualWithZero: one (n == 0..1)' other                  case "ak": // Akan                  case "am": // Amharic                  case "bh": // Bihari                  case "fil": // Filipino                  case "guw": // Gun                  case "hi": // Hindi                  case "ln": // Lingala                  case "mg": // Malagasy                  case "nso": // Northern Sotho                  case "ti": // Tigrinya                  case "tl": // Tagalog                  case "wa": // Walloon                      return (n' c) => (n == 0 || n == 1) ? 0 : 1;                    // DualFromZeroToTwo: one (n == 0..2 fractionate and n != 2)' other                  case "ff": // Fulah                  case "fr": // French                  case "kab": // Kabyle                      return (n' c) => (n >= 0 && n < 2) ? 0 : 1;                    // Triple: one (n == 1)' two (n == 2)' other                  case "ga": // Irish                  case "iu": // Inuktitut                  case "ksh": // Colognian                  case "kw": // Cornish                  case "se": // Northern Sami                  case "sma": // Southern Sami                  case "smi": // Sami language                  case "smj": // Lule Sami                  case "smn": // Inari Sami                  case "sms": // Skolt Sami                      return (n' c) => (n == 1) ? 0 : (n == 2) ? 1 : 2;                    // Russian & Serbo-Croatian                  case "be": // Belarusian                  case "bs": // Bosnian                  case "hr": // Croatian                  case "ru": // Russian                  case "sh": // Serbo-Croatian                  case "sr": // Serbian                  case "uk": // Ukrainian                      return (n' c) =>                          (n % 10 == 1) && !(n % 100 == 11) ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          2;                    // Unique:                    // Arabic                  case "ar":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          (n % 100).Between(3' 10) ? 3 : // few                          (n % 100).Between(11' 99) ? 4 : // many                          5; // other                    // Breton                  case "br":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5; // other                    // Czech                  case "cs":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Welsh                  case "cy":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5;                    // Manx                  case "gv":                      return (n' c) =>                          (n % 10).Between(1' 2) || (n % 20) == 0 ? 0 :  // one                          1;                    // Langi                  case "lag":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n > 0) && (n < 2) ? 1 : // one                          2;                    // Lithuanian                  case "lt":                      return (n' c) =>                          (n % 10) == 1 && !(n % 100).Between(11' 19) ? 0 : // one                          (n % 10).Between(2' 9) && !(n % 100).Between(11' 19) ? 1 : // few                          2;                    // Latvian                  case "lv":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n % 10) == 1 && (n % 100) != 11 ? 1 :                          2;                    // Macedonian                  case "mb":                      return (n' c) =>                          (n % 10) == 1 && n != 11 ? 0 : // one                          1;                    // Moldavian                  case "mo":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n != 1 && (n % 100).Between(1' 19)) ? 1 : // few                          2;                    // Maltese                  case "mt":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(2' 10) ? 1 : // few                          (n % 100).Between(11' 19) ? 2 : // many                          3;                    // Polish                  case "pl":                      return (n' c) =>                          n == 1 ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          (n % 10).Between(0' 1) || (n % 10).Between(5' 9) || (n % 100).Between(12' 14) ? 2 : // many                          3;                    // Romanian                  case "ro":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(1' 19) ? 1 : // few                          2;                    // Tachelhit                  case "shi":                      return (n' c) =>                          (n >= 0 && n <= 1) ? 0 : // one                          n.Between(2' 10) ? 1 : // few                          2;                    // Slovak                  case "sk":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Slovenian                  case "sl":                      return (n' c) =>                          (n % 100) == 1 ? 0 : // one                          (n % 100) == 2 ? 1 : // two                          (n % 100).Between(3' 4) ? 2 : // few                          3;                    // Central Morocco Tamazight                  case "tzm":                      return (n' c) =>                          n.Between(0' 1) || n.Between(11' 99) ? 0 : // one                          1;                      // Unknown language                  default:                      return null;              }
Magic Number,SmartFormat.Extensions,CommonLanguageRules,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\PluralLocalizationFormatter.cs,GetPluralRule,The following statement contains a magic number: switch (twoLetterISOLanguageName)              {                  // Singular                  case "az": // Azerbaijani                  case "bm": // Bambara                  case "bo": // Tibetan                  case "dz": // Dzongkha                  case "fa": // Persian                  case "hu": // Hungarian                  case "id": // Indonesian                  case "ig": // Igbo                  case "ii": // Sichuan Yi                  case "ja": // Japanese                  case "jv": // Javanese                  case "ka": // Georgian                  case "kde": // Makonde                  case "kea": // Kabuverdianu                  case "km": // Khmer                  case "kn": // Kannada                  case "ko": // Korean                  case "ms": // Malay                  case "my": // Burmese                  case "root": // Root (?)                  case "sah": // Sakha                  case "ses": // Koyraboro Senni                  case "sg": // Sango                  case "th": // Thai                  case "to": // Tonga                  case "vi": // Vietnamese                  case "wo": // Wolof                  case "yo": // Yoruba                  case "zh": // Chinese                      return (n' c) => 0;                    // Dual: one (n == 1)' other                  case "af": // Afrikaans                  case "bem": // Bembda                  case "bg": // Bulgarian                  case "bn": // Bengali                  case "brx": // Bodo                  case "ca": // Catalan                  case "cgg": // Chiga                  case "chr": // Cherokee                  case "da": // Danish                  case "de": // German                  case "dv": // Divehi                  case "ee": // Ewe                  case "el": // Greek                  case "en": // English                  case "eo": // Esperanto                  case "es": // Spanish                  case "et": // Estonian                  case "eu": // Basque                  case "fi": // Finnish                  case "fo": // Faroese                  case "fur": // Friulian                  case "fy": // Western Frisian                  case "gl": // Galician                  case "gsw": // Swiss German                  case "gu": // Gujarati                  case "ha": // Hausa                  case "haw": // Hawaiian                  case "he": // Hebrew                  case "is": // Icelandic                  case "it": // Italian                  case "kk": // Kazakh                  case "kl": // Kalaallisut                  case "ku": // Kurdish                  case "lb": // Luxembourgish                  case "lg": // Ganda                  case "lo": // Lao                  case "mas": // Masai                  case "ml": // Malayalam                  case "mn": // Mongolian                  case "mr": // Marathi                  case "nah": // Nahuatl                  case "nb": // Norwegian Bokmål                  case "ne": // Nepali                  case "nl": // Dutch                  case "nn": // Norwegian Nynorsk                  case "no": // Norwegian                  case "nyn": // Nyankole                  case "om": // Oromo                  case "or": // Oriya                  case "pa": // Punjabi                  case "pap": // Papiamento                  case "ps": // Pashto                  case "pt": // Portuguese                  case "rm": // Romansh                  case "saq": // Samburu                  case "so": // Somali                  case "sq": // Albanian                  case "ssy": // Saho                  case "sw": // Swahili                  case "sv": // Swedish                  case "syr": // Syriac                  case "ta": // Tamil                  case "te": // Telugu                  case "tk": // Turkmen                  case "tr": // Turkish                  case "ur": // Urdu                  case "wae": // Walser                  case "xog": // Soga                  case "zu": // Zulu                      return (n' c) =>                      {                          if (c == 2) return (n == 1) ? 0 : 1;                          if (c == 3) return (n == 0) ? 0 : (n == 1) ? 1 : 2;                          if (c == 4) return (n < 0) ? 0 : (n == 0) ? 1 : (n == 1) ? 2 : 3;                          return -1;                      };                    // DualWithZero: one (n == 0..1)' other                  case "ak": // Akan                  case "am": // Amharic                  case "bh": // Bihari                  case "fil": // Filipino                  case "guw": // Gun                  case "hi": // Hindi                  case "ln": // Lingala                  case "mg": // Malagasy                  case "nso": // Northern Sotho                  case "ti": // Tigrinya                  case "tl": // Tagalog                  case "wa": // Walloon                      return (n' c) => (n == 0 || n == 1) ? 0 : 1;                    // DualFromZeroToTwo: one (n == 0..2 fractionate and n != 2)' other                  case "ff": // Fulah                  case "fr": // French                  case "kab": // Kabyle                      return (n' c) => (n >= 0 && n < 2) ? 0 : 1;                    // Triple: one (n == 1)' two (n == 2)' other                  case "ga": // Irish                  case "iu": // Inuktitut                  case "ksh": // Colognian                  case "kw": // Cornish                  case "se": // Northern Sami                  case "sma": // Southern Sami                  case "smi": // Sami language                  case "smj": // Lule Sami                  case "smn": // Inari Sami                  case "sms": // Skolt Sami                      return (n' c) => (n == 1) ? 0 : (n == 2) ? 1 : 2;                    // Russian & Serbo-Croatian                  case "be": // Belarusian                  case "bs": // Bosnian                  case "hr": // Croatian                  case "ru": // Russian                  case "sh": // Serbo-Croatian                  case "sr": // Serbian                  case "uk": // Ukrainian                      return (n' c) =>                          (n % 10 == 1) && !(n % 100 == 11) ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          2;                    // Unique:                    // Arabic                  case "ar":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          (n % 100).Between(3' 10) ? 3 : // few                          (n % 100).Between(11' 99) ? 4 : // many                          5; // other                    // Breton                  case "br":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5; // other                    // Czech                  case "cs":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Welsh                  case "cy":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5;                    // Manx                  case "gv":                      return (n' c) =>                          (n % 10).Between(1' 2) || (n % 20) == 0 ? 0 :  // one                          1;                    // Langi                  case "lag":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n > 0) && (n < 2) ? 1 : // one                          2;                    // Lithuanian                  case "lt":                      return (n' c) =>                          (n % 10) == 1 && !(n % 100).Between(11' 19) ? 0 : // one                          (n % 10).Between(2' 9) && !(n % 100).Between(11' 19) ? 1 : // few                          2;                    // Latvian                  case "lv":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n % 10) == 1 && (n % 100) != 11 ? 1 :                          2;                    // Macedonian                  case "mb":                      return (n' c) =>                          (n % 10) == 1 && n != 11 ? 0 : // one                          1;                    // Moldavian                  case "mo":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n != 1 && (n % 100).Between(1' 19)) ? 1 : // few                          2;                    // Maltese                  case "mt":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(2' 10) ? 1 : // few                          (n % 100).Between(11' 19) ? 2 : // many                          3;                    // Polish                  case "pl":                      return (n' c) =>                          n == 1 ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          (n % 10).Between(0' 1) || (n % 10).Between(5' 9) || (n % 100).Between(12' 14) ? 2 : // many                          3;                    // Romanian                  case "ro":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(1' 19) ? 1 : // few                          2;                    // Tachelhit                  case "shi":                      return (n' c) =>                          (n >= 0 && n <= 1) ? 0 : // one                          n.Between(2' 10) ? 1 : // few                          2;                    // Slovak                  case "sk":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Slovenian                  case "sl":                      return (n' c) =>                          (n % 100) == 1 ? 0 : // one                          (n % 100) == 2 ? 1 : // two                          (n % 100).Between(3' 4) ? 2 : // few                          3;                    // Central Morocco Tamazight                  case "tzm":                      return (n' c) =>                          n.Between(0' 1) || n.Between(11' 99) ? 0 : // one                          1;                      // Unknown language                  default:                      return null;              }
Magic Number,SmartFormat.Extensions,CommonLanguageRules,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\PluralLocalizationFormatter.cs,GetPluralRule,The following statement contains a magic number: switch (twoLetterISOLanguageName)              {                  // Singular                  case "az": // Azerbaijani                  case "bm": // Bambara                  case "bo": // Tibetan                  case "dz": // Dzongkha                  case "fa": // Persian                  case "hu": // Hungarian                  case "id": // Indonesian                  case "ig": // Igbo                  case "ii": // Sichuan Yi                  case "ja": // Japanese                  case "jv": // Javanese                  case "ka": // Georgian                  case "kde": // Makonde                  case "kea": // Kabuverdianu                  case "km": // Khmer                  case "kn": // Kannada                  case "ko": // Korean                  case "ms": // Malay                  case "my": // Burmese                  case "root": // Root (?)                  case "sah": // Sakha                  case "ses": // Koyraboro Senni                  case "sg": // Sango                  case "th": // Thai                  case "to": // Tonga                  case "vi": // Vietnamese                  case "wo": // Wolof                  case "yo": // Yoruba                  case "zh": // Chinese                      return (n' c) => 0;                    // Dual: one (n == 1)' other                  case "af": // Afrikaans                  case "bem": // Bembda                  case "bg": // Bulgarian                  case "bn": // Bengali                  case "brx": // Bodo                  case "ca": // Catalan                  case "cgg": // Chiga                  case "chr": // Cherokee                  case "da": // Danish                  case "de": // German                  case "dv": // Divehi                  case "ee": // Ewe                  case "el": // Greek                  case "en": // English                  case "eo": // Esperanto                  case "es": // Spanish                  case "et": // Estonian                  case "eu": // Basque                  case "fi": // Finnish                  case "fo": // Faroese                  case "fur": // Friulian                  case "fy": // Western Frisian                  case "gl": // Galician                  case "gsw": // Swiss German                  case "gu": // Gujarati                  case "ha": // Hausa                  case "haw": // Hawaiian                  case "he": // Hebrew                  case "is": // Icelandic                  case "it": // Italian                  case "kk": // Kazakh                  case "kl": // Kalaallisut                  case "ku": // Kurdish                  case "lb": // Luxembourgish                  case "lg": // Ganda                  case "lo": // Lao                  case "mas": // Masai                  case "ml": // Malayalam                  case "mn": // Mongolian                  case "mr": // Marathi                  case "nah": // Nahuatl                  case "nb": // Norwegian Bokmål                  case "ne": // Nepali                  case "nl": // Dutch                  case "nn": // Norwegian Nynorsk                  case "no": // Norwegian                  case "nyn": // Nyankole                  case "om": // Oromo                  case "or": // Oriya                  case "pa": // Punjabi                  case "pap": // Papiamento                  case "ps": // Pashto                  case "pt": // Portuguese                  case "rm": // Romansh                  case "saq": // Samburu                  case "so": // Somali                  case "sq": // Albanian                  case "ssy": // Saho                  case "sw": // Swahili                  case "sv": // Swedish                  case "syr": // Syriac                  case "ta": // Tamil                  case "te": // Telugu                  case "tk": // Turkmen                  case "tr": // Turkish                  case "ur": // Urdu                  case "wae": // Walser                  case "xog": // Soga                  case "zu": // Zulu                      return (n' c) =>                      {                          if (c == 2) return (n == 1) ? 0 : 1;                          if (c == 3) return (n == 0) ? 0 : (n == 1) ? 1 : 2;                          if (c == 4) return (n < 0) ? 0 : (n == 0) ? 1 : (n == 1) ? 2 : 3;                          return -1;                      };                    // DualWithZero: one (n == 0..1)' other                  case "ak": // Akan                  case "am": // Amharic                  case "bh": // Bihari                  case "fil": // Filipino                  case "guw": // Gun                  case "hi": // Hindi                  case "ln": // Lingala                  case "mg": // Malagasy                  case "nso": // Northern Sotho                  case "ti": // Tigrinya                  case "tl": // Tagalog                  case "wa": // Walloon                      return (n' c) => (n == 0 || n == 1) ? 0 : 1;                    // DualFromZeroToTwo: one (n == 0..2 fractionate and n != 2)' other                  case "ff": // Fulah                  case "fr": // French                  case "kab": // Kabyle                      return (n' c) => (n >= 0 && n < 2) ? 0 : 1;                    // Triple: one (n == 1)' two (n == 2)' other                  case "ga": // Irish                  case "iu": // Inuktitut                  case "ksh": // Colognian                  case "kw": // Cornish                  case "se": // Northern Sami                  case "sma": // Southern Sami                  case "smi": // Sami language                  case "smj": // Lule Sami                  case "smn": // Inari Sami                  case "sms": // Skolt Sami                      return (n' c) => (n == 1) ? 0 : (n == 2) ? 1 : 2;                    // Russian & Serbo-Croatian                  case "be": // Belarusian                  case "bs": // Bosnian                  case "hr": // Croatian                  case "ru": // Russian                  case "sh": // Serbo-Croatian                  case "sr": // Serbian                  case "uk": // Ukrainian                      return (n' c) =>                          (n % 10 == 1) && !(n % 100 == 11) ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          2;                    // Unique:                    // Arabic                  case "ar":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          (n % 100).Between(3' 10) ? 3 : // few                          (n % 100).Between(11' 99) ? 4 : // many                          5; // other                    // Breton                  case "br":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5; // other                    // Czech                  case "cs":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Welsh                  case "cy":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5;                    // Manx                  case "gv":                      return (n' c) =>                          (n % 10).Between(1' 2) || (n % 20) == 0 ? 0 :  // one                          1;                    // Langi                  case "lag":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n > 0) && (n < 2) ? 1 : // one                          2;                    // Lithuanian                  case "lt":                      return (n' c) =>                          (n % 10) == 1 && !(n % 100).Between(11' 19) ? 0 : // one                          (n % 10).Between(2' 9) && !(n % 100).Between(11' 19) ? 1 : // few                          2;                    // Latvian                  case "lv":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n % 10) == 1 && (n % 100) != 11 ? 1 :                          2;                    // Macedonian                  case "mb":                      return (n' c) =>                          (n % 10) == 1 && n != 11 ? 0 : // one                          1;                    // Moldavian                  case "mo":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n != 1 && (n % 100).Between(1' 19)) ? 1 : // few                          2;                    // Maltese                  case "mt":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(2' 10) ? 1 : // few                          (n % 100).Between(11' 19) ? 2 : // many                          3;                    // Polish                  case "pl":                      return (n' c) =>                          n == 1 ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          (n % 10).Between(0' 1) || (n % 10).Between(5' 9) || (n % 100).Between(12' 14) ? 2 : // many                          3;                    // Romanian                  case "ro":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(1' 19) ? 1 : // few                          2;                    // Tachelhit                  case "shi":                      return (n' c) =>                          (n >= 0 && n <= 1) ? 0 : // one                          n.Between(2' 10) ? 1 : // few                          2;                    // Slovak                  case "sk":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Slovenian                  case "sl":                      return (n' c) =>                          (n % 100) == 1 ? 0 : // one                          (n % 100) == 2 ? 1 : // two                          (n % 100).Between(3' 4) ? 2 : // few                          3;                    // Central Morocco Tamazight                  case "tzm":                      return (n' c) =>                          n.Between(0' 1) || n.Between(11' 99) ? 0 : // one                          1;                      // Unknown language                  default:                      return null;              }
Magic Number,SmartFormat.Extensions,CommonLanguageRules,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\PluralLocalizationFormatter.cs,GetPluralRule,The following statement contains a magic number: switch (twoLetterISOLanguageName)              {                  // Singular                  case "az": // Azerbaijani                  case "bm": // Bambara                  case "bo": // Tibetan                  case "dz": // Dzongkha                  case "fa": // Persian                  case "hu": // Hungarian                  case "id": // Indonesian                  case "ig": // Igbo                  case "ii": // Sichuan Yi                  case "ja": // Japanese                  case "jv": // Javanese                  case "ka": // Georgian                  case "kde": // Makonde                  case "kea": // Kabuverdianu                  case "km": // Khmer                  case "kn": // Kannada                  case "ko": // Korean                  case "ms": // Malay                  case "my": // Burmese                  case "root": // Root (?)                  case "sah": // Sakha                  case "ses": // Koyraboro Senni                  case "sg": // Sango                  case "th": // Thai                  case "to": // Tonga                  case "vi": // Vietnamese                  case "wo": // Wolof                  case "yo": // Yoruba                  case "zh": // Chinese                      return (n' c) => 0;                    // Dual: one (n == 1)' other                  case "af": // Afrikaans                  case "bem": // Bembda                  case "bg": // Bulgarian                  case "bn": // Bengali                  case "brx": // Bodo                  case "ca": // Catalan                  case "cgg": // Chiga                  case "chr": // Cherokee                  case "da": // Danish                  case "de": // German                  case "dv": // Divehi                  case "ee": // Ewe                  case "el": // Greek                  case "en": // English                  case "eo": // Esperanto                  case "es": // Spanish                  case "et": // Estonian                  case "eu": // Basque                  case "fi": // Finnish                  case "fo": // Faroese                  case "fur": // Friulian                  case "fy": // Western Frisian                  case "gl": // Galician                  case "gsw": // Swiss German                  case "gu": // Gujarati                  case "ha": // Hausa                  case "haw": // Hawaiian                  case "he": // Hebrew                  case "is": // Icelandic                  case "it": // Italian                  case "kk": // Kazakh                  case "kl": // Kalaallisut                  case "ku": // Kurdish                  case "lb": // Luxembourgish                  case "lg": // Ganda                  case "lo": // Lao                  case "mas": // Masai                  case "ml": // Malayalam                  case "mn": // Mongolian                  case "mr": // Marathi                  case "nah": // Nahuatl                  case "nb": // Norwegian Bokmål                  case "ne": // Nepali                  case "nl": // Dutch                  case "nn": // Norwegian Nynorsk                  case "no": // Norwegian                  case "nyn": // Nyankole                  case "om": // Oromo                  case "or": // Oriya                  case "pa": // Punjabi                  case "pap": // Papiamento                  case "ps": // Pashto                  case "pt": // Portuguese                  case "rm": // Romansh                  case "saq": // Samburu                  case "so": // Somali                  case "sq": // Albanian                  case "ssy": // Saho                  case "sw": // Swahili                  case "sv": // Swedish                  case "syr": // Syriac                  case "ta": // Tamil                  case "te": // Telugu                  case "tk": // Turkmen                  case "tr": // Turkish                  case "ur": // Urdu                  case "wae": // Walser                  case "xog": // Soga                  case "zu": // Zulu                      return (n' c) =>                      {                          if (c == 2) return (n == 1) ? 0 : 1;                          if (c == 3) return (n == 0) ? 0 : (n == 1) ? 1 : 2;                          if (c == 4) return (n < 0) ? 0 : (n == 0) ? 1 : (n == 1) ? 2 : 3;                          return -1;                      };                    // DualWithZero: one (n == 0..1)' other                  case "ak": // Akan                  case "am": // Amharic                  case "bh": // Bihari                  case "fil": // Filipino                  case "guw": // Gun                  case "hi": // Hindi                  case "ln": // Lingala                  case "mg": // Malagasy                  case "nso": // Northern Sotho                  case "ti": // Tigrinya                  case "tl": // Tagalog                  case "wa": // Walloon                      return (n' c) => (n == 0 || n == 1) ? 0 : 1;                    // DualFromZeroToTwo: one (n == 0..2 fractionate and n != 2)' other                  case "ff": // Fulah                  case "fr": // French                  case "kab": // Kabyle                      return (n' c) => (n >= 0 && n < 2) ? 0 : 1;                    // Triple: one (n == 1)' two (n == 2)' other                  case "ga": // Irish                  case "iu": // Inuktitut                  case "ksh": // Colognian                  case "kw": // Cornish                  case "se": // Northern Sami                  case "sma": // Southern Sami                  case "smi": // Sami language                  case "smj": // Lule Sami                  case "smn": // Inari Sami                  case "sms": // Skolt Sami                      return (n' c) => (n == 1) ? 0 : (n == 2) ? 1 : 2;                    // Russian & Serbo-Croatian                  case "be": // Belarusian                  case "bs": // Bosnian                  case "hr": // Croatian                  case "ru": // Russian                  case "sh": // Serbo-Croatian                  case "sr": // Serbian                  case "uk": // Ukrainian                      return (n' c) =>                          (n % 10 == 1) && !(n % 100 == 11) ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          2;                    // Unique:                    // Arabic                  case "ar":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          (n % 100).Between(3' 10) ? 3 : // few                          (n % 100).Between(11' 99) ? 4 : // many                          5; // other                    // Breton                  case "br":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5; // other                    // Czech                  case "cs":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Welsh                  case "cy":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5;                    // Manx                  case "gv":                      return (n' c) =>                          (n % 10).Between(1' 2) || (n % 20) == 0 ? 0 :  // one                          1;                    // Langi                  case "lag":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n > 0) && (n < 2) ? 1 : // one                          2;                    // Lithuanian                  case "lt":                      return (n' c) =>                          (n % 10) == 1 && !(n % 100).Between(11' 19) ? 0 : // one                          (n % 10).Between(2' 9) && !(n % 100).Between(11' 19) ? 1 : // few                          2;                    // Latvian                  case "lv":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n % 10) == 1 && (n % 100) != 11 ? 1 :                          2;                    // Macedonian                  case "mb":                      return (n' c) =>                          (n % 10) == 1 && n != 11 ? 0 : // one                          1;                    // Moldavian                  case "mo":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n != 1 && (n % 100).Between(1' 19)) ? 1 : // few                          2;                    // Maltese                  case "mt":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(2' 10) ? 1 : // few                          (n % 100).Between(11' 19) ? 2 : // many                          3;                    // Polish                  case "pl":                      return (n' c) =>                          n == 1 ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          (n % 10).Between(0' 1) || (n % 10).Between(5' 9) || (n % 100).Between(12' 14) ? 2 : // many                          3;                    // Romanian                  case "ro":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(1' 19) ? 1 : // few                          2;                    // Tachelhit                  case "shi":                      return (n' c) =>                          (n >= 0 && n <= 1) ? 0 : // one                          n.Between(2' 10) ? 1 : // few                          2;                    // Slovak                  case "sk":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Slovenian                  case "sl":                      return (n' c) =>                          (n % 100) == 1 ? 0 : // one                          (n % 100) == 2 ? 1 : // two                          (n % 100).Between(3' 4) ? 2 : // few                          3;                    // Central Morocco Tamazight                  case "tzm":                      return (n' c) =>                          n.Between(0' 1) || n.Between(11' 99) ? 0 : // one                          1;                      // Unknown language                  default:                      return null;              }
Magic Number,SmartFormat.Extensions,CommonLanguageRules,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\PluralLocalizationFormatter.cs,GetPluralRule,The following statement contains a magic number: switch (twoLetterISOLanguageName)              {                  // Singular                  case "az": // Azerbaijani                  case "bm": // Bambara                  case "bo": // Tibetan                  case "dz": // Dzongkha                  case "fa": // Persian                  case "hu": // Hungarian                  case "id": // Indonesian                  case "ig": // Igbo                  case "ii": // Sichuan Yi                  case "ja": // Japanese                  case "jv": // Javanese                  case "ka": // Georgian                  case "kde": // Makonde                  case "kea": // Kabuverdianu                  case "km": // Khmer                  case "kn": // Kannada                  case "ko": // Korean                  case "ms": // Malay                  case "my": // Burmese                  case "root": // Root (?)                  case "sah": // Sakha                  case "ses": // Koyraboro Senni                  case "sg": // Sango                  case "th": // Thai                  case "to": // Tonga                  case "vi": // Vietnamese                  case "wo": // Wolof                  case "yo": // Yoruba                  case "zh": // Chinese                      return (n' c) => 0;                    // Dual: one (n == 1)' other                  case "af": // Afrikaans                  case "bem": // Bembda                  case "bg": // Bulgarian                  case "bn": // Bengali                  case "brx": // Bodo                  case "ca": // Catalan                  case "cgg": // Chiga                  case "chr": // Cherokee                  case "da": // Danish                  case "de": // German                  case "dv": // Divehi                  case "ee": // Ewe                  case "el": // Greek                  case "en": // English                  case "eo": // Esperanto                  case "es": // Spanish                  case "et": // Estonian                  case "eu": // Basque                  case "fi": // Finnish                  case "fo": // Faroese                  case "fur": // Friulian                  case "fy": // Western Frisian                  case "gl": // Galician                  case "gsw": // Swiss German                  case "gu": // Gujarati                  case "ha": // Hausa                  case "haw": // Hawaiian                  case "he": // Hebrew                  case "is": // Icelandic                  case "it": // Italian                  case "kk": // Kazakh                  case "kl": // Kalaallisut                  case "ku": // Kurdish                  case "lb": // Luxembourgish                  case "lg": // Ganda                  case "lo": // Lao                  case "mas": // Masai                  case "ml": // Malayalam                  case "mn": // Mongolian                  case "mr": // Marathi                  case "nah": // Nahuatl                  case "nb": // Norwegian Bokmål                  case "ne": // Nepali                  case "nl": // Dutch                  case "nn": // Norwegian Nynorsk                  case "no": // Norwegian                  case "nyn": // Nyankole                  case "om": // Oromo                  case "or": // Oriya                  case "pa": // Punjabi                  case "pap": // Papiamento                  case "ps": // Pashto                  case "pt": // Portuguese                  case "rm": // Romansh                  case "saq": // Samburu                  case "so": // Somali                  case "sq": // Albanian                  case "ssy": // Saho                  case "sw": // Swahili                  case "sv": // Swedish                  case "syr": // Syriac                  case "ta": // Tamil                  case "te": // Telugu                  case "tk": // Turkmen                  case "tr": // Turkish                  case "ur": // Urdu                  case "wae": // Walser                  case "xog": // Soga                  case "zu": // Zulu                      return (n' c) =>                      {                          if (c == 2) return (n == 1) ? 0 : 1;                          if (c == 3) return (n == 0) ? 0 : (n == 1) ? 1 : 2;                          if (c == 4) return (n < 0) ? 0 : (n == 0) ? 1 : (n == 1) ? 2 : 3;                          return -1;                      };                    // DualWithZero: one (n == 0..1)' other                  case "ak": // Akan                  case "am": // Amharic                  case "bh": // Bihari                  case "fil": // Filipino                  case "guw": // Gun                  case "hi": // Hindi                  case "ln": // Lingala                  case "mg": // Malagasy                  case "nso": // Northern Sotho                  case "ti": // Tigrinya                  case "tl": // Tagalog                  case "wa": // Walloon                      return (n' c) => (n == 0 || n == 1) ? 0 : 1;                    // DualFromZeroToTwo: one (n == 0..2 fractionate and n != 2)' other                  case "ff": // Fulah                  case "fr": // French                  case "kab": // Kabyle                      return (n' c) => (n >= 0 && n < 2) ? 0 : 1;                    // Triple: one (n == 1)' two (n == 2)' other                  case "ga": // Irish                  case "iu": // Inuktitut                  case "ksh": // Colognian                  case "kw": // Cornish                  case "se": // Northern Sami                  case "sma": // Southern Sami                  case "smi": // Sami language                  case "smj": // Lule Sami                  case "smn": // Inari Sami                  case "sms": // Skolt Sami                      return (n' c) => (n == 1) ? 0 : (n == 2) ? 1 : 2;                    // Russian & Serbo-Croatian                  case "be": // Belarusian                  case "bs": // Bosnian                  case "hr": // Croatian                  case "ru": // Russian                  case "sh": // Serbo-Croatian                  case "sr": // Serbian                  case "uk": // Ukrainian                      return (n' c) =>                          (n % 10 == 1) && !(n % 100 == 11) ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          2;                    // Unique:                    // Arabic                  case "ar":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          (n % 100).Between(3' 10) ? 3 : // few                          (n % 100).Between(11' 99) ? 4 : // many                          5; // other                    // Breton                  case "br":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5; // other                    // Czech                  case "cs":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Welsh                  case "cy":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5;                    // Manx                  case "gv":                      return (n' c) =>                          (n % 10).Between(1' 2) || (n % 20) == 0 ? 0 :  // one                          1;                    // Langi                  case "lag":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n > 0) && (n < 2) ? 1 : // one                          2;                    // Lithuanian                  case "lt":                      return (n' c) =>                          (n % 10) == 1 && !(n % 100).Between(11' 19) ? 0 : // one                          (n % 10).Between(2' 9) && !(n % 100).Between(11' 19) ? 1 : // few                          2;                    // Latvian                  case "lv":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n % 10) == 1 && (n % 100) != 11 ? 1 :                          2;                    // Macedonian                  case "mb":                      return (n' c) =>                          (n % 10) == 1 && n != 11 ? 0 : // one                          1;                    // Moldavian                  case "mo":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n != 1 && (n % 100).Between(1' 19)) ? 1 : // few                          2;                    // Maltese                  case "mt":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(2' 10) ? 1 : // few                          (n % 100).Between(11' 19) ? 2 : // many                          3;                    // Polish                  case "pl":                      return (n' c) =>                          n == 1 ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          (n % 10).Between(0' 1) || (n % 10).Between(5' 9) || (n % 100).Between(12' 14) ? 2 : // many                          3;                    // Romanian                  case "ro":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(1' 19) ? 1 : // few                          2;                    // Tachelhit                  case "shi":                      return (n' c) =>                          (n >= 0 && n <= 1) ? 0 : // one                          n.Between(2' 10) ? 1 : // few                          2;                    // Slovak                  case "sk":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Slovenian                  case "sl":                      return (n' c) =>                          (n % 100) == 1 ? 0 : // one                          (n % 100) == 2 ? 1 : // two                          (n % 100).Between(3' 4) ? 2 : // few                          3;                    // Central Morocco Tamazight                  case "tzm":                      return (n' c) =>                          n.Between(0' 1) || n.Between(11' 99) ? 0 : // one                          1;                      // Unknown language                  default:                      return null;              }
Magic Number,SmartFormat.Extensions,CommonLanguageRules,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\PluralLocalizationFormatter.cs,GetPluralRule,The following statement contains a magic number: switch (twoLetterISOLanguageName)              {                  // Singular                  case "az": // Azerbaijani                  case "bm": // Bambara                  case "bo": // Tibetan                  case "dz": // Dzongkha                  case "fa": // Persian                  case "hu": // Hungarian                  case "id": // Indonesian                  case "ig": // Igbo                  case "ii": // Sichuan Yi                  case "ja": // Japanese                  case "jv": // Javanese                  case "ka": // Georgian                  case "kde": // Makonde                  case "kea": // Kabuverdianu                  case "km": // Khmer                  case "kn": // Kannada                  case "ko": // Korean                  case "ms": // Malay                  case "my": // Burmese                  case "root": // Root (?)                  case "sah": // Sakha                  case "ses": // Koyraboro Senni                  case "sg": // Sango                  case "th": // Thai                  case "to": // Tonga                  case "vi": // Vietnamese                  case "wo": // Wolof                  case "yo": // Yoruba                  case "zh": // Chinese                      return (n' c) => 0;                    // Dual: one (n == 1)' other                  case "af": // Afrikaans                  case "bem": // Bembda                  case "bg": // Bulgarian                  case "bn": // Bengali                  case "brx": // Bodo                  case "ca": // Catalan                  case "cgg": // Chiga                  case "chr": // Cherokee                  case "da": // Danish                  case "de": // German                  case "dv": // Divehi                  case "ee": // Ewe                  case "el": // Greek                  case "en": // English                  case "eo": // Esperanto                  case "es": // Spanish                  case "et": // Estonian                  case "eu": // Basque                  case "fi": // Finnish                  case "fo": // Faroese                  case "fur": // Friulian                  case "fy": // Western Frisian                  case "gl": // Galician                  case "gsw": // Swiss German                  case "gu": // Gujarati                  case "ha": // Hausa                  case "haw": // Hawaiian                  case "he": // Hebrew                  case "is": // Icelandic                  case "it": // Italian                  case "kk": // Kazakh                  case "kl": // Kalaallisut                  case "ku": // Kurdish                  case "lb": // Luxembourgish                  case "lg": // Ganda                  case "lo": // Lao                  case "mas": // Masai                  case "ml": // Malayalam                  case "mn": // Mongolian                  case "mr": // Marathi                  case "nah": // Nahuatl                  case "nb": // Norwegian Bokmål                  case "ne": // Nepali                  case "nl": // Dutch                  case "nn": // Norwegian Nynorsk                  case "no": // Norwegian                  case "nyn": // Nyankole                  case "om": // Oromo                  case "or": // Oriya                  case "pa": // Punjabi                  case "pap": // Papiamento                  case "ps": // Pashto                  case "pt": // Portuguese                  case "rm": // Romansh                  case "saq": // Samburu                  case "so": // Somali                  case "sq": // Albanian                  case "ssy": // Saho                  case "sw": // Swahili                  case "sv": // Swedish                  case "syr": // Syriac                  case "ta": // Tamil                  case "te": // Telugu                  case "tk": // Turkmen                  case "tr": // Turkish                  case "ur": // Urdu                  case "wae": // Walser                  case "xog": // Soga                  case "zu": // Zulu                      return (n' c) =>                      {                          if (c == 2) return (n == 1) ? 0 : 1;                          if (c == 3) return (n == 0) ? 0 : (n == 1) ? 1 : 2;                          if (c == 4) return (n < 0) ? 0 : (n == 0) ? 1 : (n == 1) ? 2 : 3;                          return -1;                      };                    // DualWithZero: one (n == 0..1)' other                  case "ak": // Akan                  case "am": // Amharic                  case "bh": // Bihari                  case "fil": // Filipino                  case "guw": // Gun                  case "hi": // Hindi                  case "ln": // Lingala                  case "mg": // Malagasy                  case "nso": // Northern Sotho                  case "ti": // Tigrinya                  case "tl": // Tagalog                  case "wa": // Walloon                      return (n' c) => (n == 0 || n == 1) ? 0 : 1;                    // DualFromZeroToTwo: one (n == 0..2 fractionate and n != 2)' other                  case "ff": // Fulah                  case "fr": // French                  case "kab": // Kabyle                      return (n' c) => (n >= 0 && n < 2) ? 0 : 1;                    // Triple: one (n == 1)' two (n == 2)' other                  case "ga": // Irish                  case "iu": // Inuktitut                  case "ksh": // Colognian                  case "kw": // Cornish                  case "se": // Northern Sami                  case "sma": // Southern Sami                  case "smi": // Sami language                  case "smj": // Lule Sami                  case "smn": // Inari Sami                  case "sms": // Skolt Sami                      return (n' c) => (n == 1) ? 0 : (n == 2) ? 1 : 2;                    // Russian & Serbo-Croatian                  case "be": // Belarusian                  case "bs": // Bosnian                  case "hr": // Croatian                  case "ru": // Russian                  case "sh": // Serbo-Croatian                  case "sr": // Serbian                  case "uk": // Ukrainian                      return (n' c) =>                          (n % 10 == 1) && !(n % 100 == 11) ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          2;                    // Unique:                    // Arabic                  case "ar":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          (n % 100).Between(3' 10) ? 3 : // few                          (n % 100).Between(11' 99) ? 4 : // many                          5; // other                    // Breton                  case "br":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5; // other                    // Czech                  case "cs":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Welsh                  case "cy":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5;                    // Manx                  case "gv":                      return (n' c) =>                          (n % 10).Between(1' 2) || (n % 20) == 0 ? 0 :  // one                          1;                    // Langi                  case "lag":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n > 0) && (n < 2) ? 1 : // one                          2;                    // Lithuanian                  case "lt":                      return (n' c) =>                          (n % 10) == 1 && !(n % 100).Between(11' 19) ? 0 : // one                          (n % 10).Between(2' 9) && !(n % 100).Between(11' 19) ? 1 : // few                          2;                    // Latvian                  case "lv":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n % 10) == 1 && (n % 100) != 11 ? 1 :                          2;                    // Macedonian                  case "mb":                      return (n' c) =>                          (n % 10) == 1 && n != 11 ? 0 : // one                          1;                    // Moldavian                  case "mo":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n != 1 && (n % 100).Between(1' 19)) ? 1 : // few                          2;                    // Maltese                  case "mt":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(2' 10) ? 1 : // few                          (n % 100).Between(11' 19) ? 2 : // many                          3;                    // Polish                  case "pl":                      return (n' c) =>                          n == 1 ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          (n % 10).Between(0' 1) || (n % 10).Between(5' 9) || (n % 100).Between(12' 14) ? 2 : // many                          3;                    // Romanian                  case "ro":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(1' 19) ? 1 : // few                          2;                    // Tachelhit                  case "shi":                      return (n' c) =>                          (n >= 0 && n <= 1) ? 0 : // one                          n.Between(2' 10) ? 1 : // few                          2;                    // Slovak                  case "sk":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Slovenian                  case "sl":                      return (n' c) =>                          (n % 100) == 1 ? 0 : // one                          (n % 100) == 2 ? 1 : // two                          (n % 100).Between(3' 4) ? 2 : // few                          3;                    // Central Morocco Tamazight                  case "tzm":                      return (n' c) =>                          n.Between(0' 1) || n.Between(11' 99) ? 0 : // one                          1;                      // Unknown language                  default:                      return null;              }
Magic Number,SmartFormat.Extensions,CommonLanguageRules,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\PluralLocalizationFormatter.cs,GetPluralRule,The following statement contains a magic number: switch (twoLetterISOLanguageName)              {                  // Singular                  case "az": // Azerbaijani                  case "bm": // Bambara                  case "bo": // Tibetan                  case "dz": // Dzongkha                  case "fa": // Persian                  case "hu": // Hungarian                  case "id": // Indonesian                  case "ig": // Igbo                  case "ii": // Sichuan Yi                  case "ja": // Japanese                  case "jv": // Javanese                  case "ka": // Georgian                  case "kde": // Makonde                  case "kea": // Kabuverdianu                  case "km": // Khmer                  case "kn": // Kannada                  case "ko": // Korean                  case "ms": // Malay                  case "my": // Burmese                  case "root": // Root (?)                  case "sah": // Sakha                  case "ses": // Koyraboro Senni                  case "sg": // Sango                  case "th": // Thai                  case "to": // Tonga                  case "vi": // Vietnamese                  case "wo": // Wolof                  case "yo": // Yoruba                  case "zh": // Chinese                      return (n' c) => 0;                    // Dual: one (n == 1)' other                  case "af": // Afrikaans                  case "bem": // Bembda                  case "bg": // Bulgarian                  case "bn": // Bengali                  case "brx": // Bodo                  case "ca": // Catalan                  case "cgg": // Chiga                  case "chr": // Cherokee                  case "da": // Danish                  case "de": // German                  case "dv": // Divehi                  case "ee": // Ewe                  case "el": // Greek                  case "en": // English                  case "eo": // Esperanto                  case "es": // Spanish                  case "et": // Estonian                  case "eu": // Basque                  case "fi": // Finnish                  case "fo": // Faroese                  case "fur": // Friulian                  case "fy": // Western Frisian                  case "gl": // Galician                  case "gsw": // Swiss German                  case "gu": // Gujarati                  case "ha": // Hausa                  case "haw": // Hawaiian                  case "he": // Hebrew                  case "is": // Icelandic                  case "it": // Italian                  case "kk": // Kazakh                  case "kl": // Kalaallisut                  case "ku": // Kurdish                  case "lb": // Luxembourgish                  case "lg": // Ganda                  case "lo": // Lao                  case "mas": // Masai                  case "ml": // Malayalam                  case "mn": // Mongolian                  case "mr": // Marathi                  case "nah": // Nahuatl                  case "nb": // Norwegian Bokmål                  case "ne": // Nepali                  case "nl": // Dutch                  case "nn": // Norwegian Nynorsk                  case "no": // Norwegian                  case "nyn": // Nyankole                  case "om": // Oromo                  case "or": // Oriya                  case "pa": // Punjabi                  case "pap": // Papiamento                  case "ps": // Pashto                  case "pt": // Portuguese                  case "rm": // Romansh                  case "saq": // Samburu                  case "so": // Somali                  case "sq": // Albanian                  case "ssy": // Saho                  case "sw": // Swahili                  case "sv": // Swedish                  case "syr": // Syriac                  case "ta": // Tamil                  case "te": // Telugu                  case "tk": // Turkmen                  case "tr": // Turkish                  case "ur": // Urdu                  case "wae": // Walser                  case "xog": // Soga                  case "zu": // Zulu                      return (n' c) =>                      {                          if (c == 2) return (n == 1) ? 0 : 1;                          if (c == 3) return (n == 0) ? 0 : (n == 1) ? 1 : 2;                          if (c == 4) return (n < 0) ? 0 : (n == 0) ? 1 : (n == 1) ? 2 : 3;                          return -1;                      };                    // DualWithZero: one (n == 0..1)' other                  case "ak": // Akan                  case "am": // Amharic                  case "bh": // Bihari                  case "fil": // Filipino                  case "guw": // Gun                  case "hi": // Hindi                  case "ln": // Lingala                  case "mg": // Malagasy                  case "nso": // Northern Sotho                  case "ti": // Tigrinya                  case "tl": // Tagalog                  case "wa": // Walloon                      return (n' c) => (n == 0 || n == 1) ? 0 : 1;                    // DualFromZeroToTwo: one (n == 0..2 fractionate and n != 2)' other                  case "ff": // Fulah                  case "fr": // French                  case "kab": // Kabyle                      return (n' c) => (n >= 0 && n < 2) ? 0 : 1;                    // Triple: one (n == 1)' two (n == 2)' other                  case "ga": // Irish                  case "iu": // Inuktitut                  case "ksh": // Colognian                  case "kw": // Cornish                  case "se": // Northern Sami                  case "sma": // Southern Sami                  case "smi": // Sami language                  case "smj": // Lule Sami                  case "smn": // Inari Sami                  case "sms": // Skolt Sami                      return (n' c) => (n == 1) ? 0 : (n == 2) ? 1 : 2;                    // Russian & Serbo-Croatian                  case "be": // Belarusian                  case "bs": // Bosnian                  case "hr": // Croatian                  case "ru": // Russian                  case "sh": // Serbo-Croatian                  case "sr": // Serbian                  case "uk": // Ukrainian                      return (n' c) =>                          (n % 10 == 1) && !(n % 100 == 11) ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          2;                    // Unique:                    // Arabic                  case "ar":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          (n % 100).Between(3' 10) ? 3 : // few                          (n % 100).Between(11' 99) ? 4 : // many                          5; // other                    // Breton                  case "br":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5; // other                    // Czech                  case "cs":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Welsh                  case "cy":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5;                    // Manx                  case "gv":                      return (n' c) =>                          (n % 10).Between(1' 2) || (n % 20) == 0 ? 0 :  // one                          1;                    // Langi                  case "lag":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n > 0) && (n < 2) ? 1 : // one                          2;                    // Lithuanian                  case "lt":                      return (n' c) =>                          (n % 10) == 1 && !(n % 100).Between(11' 19) ? 0 : // one                          (n % 10).Between(2' 9) && !(n % 100).Between(11' 19) ? 1 : // few                          2;                    // Latvian                  case "lv":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n % 10) == 1 && (n % 100) != 11 ? 1 :                          2;                    // Macedonian                  case "mb":                      return (n' c) =>                          (n % 10) == 1 && n != 11 ? 0 : // one                          1;                    // Moldavian                  case "mo":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n != 1 && (n % 100).Between(1' 19)) ? 1 : // few                          2;                    // Maltese                  case "mt":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(2' 10) ? 1 : // few                          (n % 100).Between(11' 19) ? 2 : // many                          3;                    // Polish                  case "pl":                      return (n' c) =>                          n == 1 ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          (n % 10).Between(0' 1) || (n % 10).Between(5' 9) || (n % 100).Between(12' 14) ? 2 : // many                          3;                    // Romanian                  case "ro":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(1' 19) ? 1 : // few                          2;                    // Tachelhit                  case "shi":                      return (n' c) =>                          (n >= 0 && n <= 1) ? 0 : // one                          n.Between(2' 10) ? 1 : // few                          2;                    // Slovak                  case "sk":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Slovenian                  case "sl":                      return (n' c) =>                          (n % 100) == 1 ? 0 : // one                          (n % 100) == 2 ? 1 : // two                          (n % 100).Between(3' 4) ? 2 : // few                          3;                    // Central Morocco Tamazight                  case "tzm":                      return (n' c) =>                          n.Between(0' 1) || n.Between(11' 99) ? 0 : // one                          1;                      // Unknown language                  default:                      return null;              }
Magic Number,SmartFormat.Extensions,CommonLanguageRules,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\PluralLocalizationFormatter.cs,GetPluralRule,The following statement contains a magic number: switch (twoLetterISOLanguageName)              {                  // Singular                  case "az": // Azerbaijani                  case "bm": // Bambara                  case "bo": // Tibetan                  case "dz": // Dzongkha                  case "fa": // Persian                  case "hu": // Hungarian                  case "id": // Indonesian                  case "ig": // Igbo                  case "ii": // Sichuan Yi                  case "ja": // Japanese                  case "jv": // Javanese                  case "ka": // Georgian                  case "kde": // Makonde                  case "kea": // Kabuverdianu                  case "km": // Khmer                  case "kn": // Kannada                  case "ko": // Korean                  case "ms": // Malay                  case "my": // Burmese                  case "root": // Root (?)                  case "sah": // Sakha                  case "ses": // Koyraboro Senni                  case "sg": // Sango                  case "th": // Thai                  case "to": // Tonga                  case "vi": // Vietnamese                  case "wo": // Wolof                  case "yo": // Yoruba                  case "zh": // Chinese                      return (n' c) => 0;                    // Dual: one (n == 1)' other                  case "af": // Afrikaans                  case "bem": // Bembda                  case "bg": // Bulgarian                  case "bn": // Bengali                  case "brx": // Bodo                  case "ca": // Catalan                  case "cgg": // Chiga                  case "chr": // Cherokee                  case "da": // Danish                  case "de": // German                  case "dv": // Divehi                  case "ee": // Ewe                  case "el": // Greek                  case "en": // English                  case "eo": // Esperanto                  case "es": // Spanish                  case "et": // Estonian                  case "eu": // Basque                  case "fi": // Finnish                  case "fo": // Faroese                  case "fur": // Friulian                  case "fy": // Western Frisian                  case "gl": // Galician                  case "gsw": // Swiss German                  case "gu": // Gujarati                  case "ha": // Hausa                  case "haw": // Hawaiian                  case "he": // Hebrew                  case "is": // Icelandic                  case "it": // Italian                  case "kk": // Kazakh                  case "kl": // Kalaallisut                  case "ku": // Kurdish                  case "lb": // Luxembourgish                  case "lg": // Ganda                  case "lo": // Lao                  case "mas": // Masai                  case "ml": // Malayalam                  case "mn": // Mongolian                  case "mr": // Marathi                  case "nah": // Nahuatl                  case "nb": // Norwegian Bokmål                  case "ne": // Nepali                  case "nl": // Dutch                  case "nn": // Norwegian Nynorsk                  case "no": // Norwegian                  case "nyn": // Nyankole                  case "om": // Oromo                  case "or": // Oriya                  case "pa": // Punjabi                  case "pap": // Papiamento                  case "ps": // Pashto                  case "pt": // Portuguese                  case "rm": // Romansh                  case "saq": // Samburu                  case "so": // Somali                  case "sq": // Albanian                  case "ssy": // Saho                  case "sw": // Swahili                  case "sv": // Swedish                  case "syr": // Syriac                  case "ta": // Tamil                  case "te": // Telugu                  case "tk": // Turkmen                  case "tr": // Turkish                  case "ur": // Urdu                  case "wae": // Walser                  case "xog": // Soga                  case "zu": // Zulu                      return (n' c) =>                      {                          if (c == 2) return (n == 1) ? 0 : 1;                          if (c == 3) return (n == 0) ? 0 : (n == 1) ? 1 : 2;                          if (c == 4) return (n < 0) ? 0 : (n == 0) ? 1 : (n == 1) ? 2 : 3;                          return -1;                      };                    // DualWithZero: one (n == 0..1)' other                  case "ak": // Akan                  case "am": // Amharic                  case "bh": // Bihari                  case "fil": // Filipino                  case "guw": // Gun                  case "hi": // Hindi                  case "ln": // Lingala                  case "mg": // Malagasy                  case "nso": // Northern Sotho                  case "ti": // Tigrinya                  case "tl": // Tagalog                  case "wa": // Walloon                      return (n' c) => (n == 0 || n == 1) ? 0 : 1;                    // DualFromZeroToTwo: one (n == 0..2 fractionate and n != 2)' other                  case "ff": // Fulah                  case "fr": // French                  case "kab": // Kabyle                      return (n' c) => (n >= 0 && n < 2) ? 0 : 1;                    // Triple: one (n == 1)' two (n == 2)' other                  case "ga": // Irish                  case "iu": // Inuktitut                  case "ksh": // Colognian                  case "kw": // Cornish                  case "se": // Northern Sami                  case "sma": // Southern Sami                  case "smi": // Sami language                  case "smj": // Lule Sami                  case "smn": // Inari Sami                  case "sms": // Skolt Sami                      return (n' c) => (n == 1) ? 0 : (n == 2) ? 1 : 2;                    // Russian & Serbo-Croatian                  case "be": // Belarusian                  case "bs": // Bosnian                  case "hr": // Croatian                  case "ru": // Russian                  case "sh": // Serbo-Croatian                  case "sr": // Serbian                  case "uk": // Ukrainian                      return (n' c) =>                          (n % 10 == 1) && !(n % 100 == 11) ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          2;                    // Unique:                    // Arabic                  case "ar":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          (n % 100).Between(3' 10) ? 3 : // few                          (n % 100).Between(11' 99) ? 4 : // many                          5; // other                    // Breton                  case "br":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5; // other                    // Czech                  case "cs":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Welsh                  case "cy":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5;                    // Manx                  case "gv":                      return (n' c) =>                          (n % 10).Between(1' 2) || (n % 20) == 0 ? 0 :  // one                          1;                    // Langi                  case "lag":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n > 0) && (n < 2) ? 1 : // one                          2;                    // Lithuanian                  case "lt":                      return (n' c) =>                          (n % 10) == 1 && !(n % 100).Between(11' 19) ? 0 : // one                          (n % 10).Between(2' 9) && !(n % 100).Between(11' 19) ? 1 : // few                          2;                    // Latvian                  case "lv":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n % 10) == 1 && (n % 100) != 11 ? 1 :                          2;                    // Macedonian                  case "mb":                      return (n' c) =>                          (n % 10) == 1 && n != 11 ? 0 : // one                          1;                    // Moldavian                  case "mo":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n != 1 && (n % 100).Between(1' 19)) ? 1 : // few                          2;                    // Maltese                  case "mt":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(2' 10) ? 1 : // few                          (n % 100).Between(11' 19) ? 2 : // many                          3;                    // Polish                  case "pl":                      return (n' c) =>                          n == 1 ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          (n % 10).Between(0' 1) || (n % 10).Between(5' 9) || (n % 100).Between(12' 14) ? 2 : // many                          3;                    // Romanian                  case "ro":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(1' 19) ? 1 : // few                          2;                    // Tachelhit                  case "shi":                      return (n' c) =>                          (n >= 0 && n <= 1) ? 0 : // one                          n.Between(2' 10) ? 1 : // few                          2;                    // Slovak                  case "sk":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Slovenian                  case "sl":                      return (n' c) =>                          (n % 100) == 1 ? 0 : // one                          (n % 100) == 2 ? 1 : // two                          (n % 100).Between(3' 4) ? 2 : // few                          3;                    // Central Morocco Tamazight                  case "tzm":                      return (n' c) =>                          n.Between(0' 1) || n.Between(11' 99) ? 0 : // one                          1;                      // Unknown language                  default:                      return null;              }
Magic Number,SmartFormat.Extensions,CommonLanguageRules,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\PluralLocalizationFormatter.cs,GetPluralRule,The following statement contains a magic number: switch (twoLetterISOLanguageName)              {                  // Singular                  case "az": // Azerbaijani                  case "bm": // Bambara                  case "bo": // Tibetan                  case "dz": // Dzongkha                  case "fa": // Persian                  case "hu": // Hungarian                  case "id": // Indonesian                  case "ig": // Igbo                  case "ii": // Sichuan Yi                  case "ja": // Japanese                  case "jv": // Javanese                  case "ka": // Georgian                  case "kde": // Makonde                  case "kea": // Kabuverdianu                  case "km": // Khmer                  case "kn": // Kannada                  case "ko": // Korean                  case "ms": // Malay                  case "my": // Burmese                  case "root": // Root (?)                  case "sah": // Sakha                  case "ses": // Koyraboro Senni                  case "sg": // Sango                  case "th": // Thai                  case "to": // Tonga                  case "vi": // Vietnamese                  case "wo": // Wolof                  case "yo": // Yoruba                  case "zh": // Chinese                      return (n' c) => 0;                    // Dual: one (n == 1)' other                  case "af": // Afrikaans                  case "bem": // Bembda                  case "bg": // Bulgarian                  case "bn": // Bengali                  case "brx": // Bodo                  case "ca": // Catalan                  case "cgg": // Chiga                  case "chr": // Cherokee                  case "da": // Danish                  case "de": // German                  case "dv": // Divehi                  case "ee": // Ewe                  case "el": // Greek                  case "en": // English                  case "eo": // Esperanto                  case "es": // Spanish                  case "et": // Estonian                  case "eu": // Basque                  case "fi": // Finnish                  case "fo": // Faroese                  case "fur": // Friulian                  case "fy": // Western Frisian                  case "gl": // Galician                  case "gsw": // Swiss German                  case "gu": // Gujarati                  case "ha": // Hausa                  case "haw": // Hawaiian                  case "he": // Hebrew                  case "is": // Icelandic                  case "it": // Italian                  case "kk": // Kazakh                  case "kl": // Kalaallisut                  case "ku": // Kurdish                  case "lb": // Luxembourgish                  case "lg": // Ganda                  case "lo": // Lao                  case "mas": // Masai                  case "ml": // Malayalam                  case "mn": // Mongolian                  case "mr": // Marathi                  case "nah": // Nahuatl                  case "nb": // Norwegian Bokmål                  case "ne": // Nepali                  case "nl": // Dutch                  case "nn": // Norwegian Nynorsk                  case "no": // Norwegian                  case "nyn": // Nyankole                  case "om": // Oromo                  case "or": // Oriya                  case "pa": // Punjabi                  case "pap": // Papiamento                  case "ps": // Pashto                  case "pt": // Portuguese                  case "rm": // Romansh                  case "saq": // Samburu                  case "so": // Somali                  case "sq": // Albanian                  case "ssy": // Saho                  case "sw": // Swahili                  case "sv": // Swedish                  case "syr": // Syriac                  case "ta": // Tamil                  case "te": // Telugu                  case "tk": // Turkmen                  case "tr": // Turkish                  case "ur": // Urdu                  case "wae": // Walser                  case "xog": // Soga                  case "zu": // Zulu                      return (n' c) =>                      {                          if (c == 2) return (n == 1) ? 0 : 1;                          if (c == 3) return (n == 0) ? 0 : (n == 1) ? 1 : 2;                          if (c == 4) return (n < 0) ? 0 : (n == 0) ? 1 : (n == 1) ? 2 : 3;                          return -1;                      };                    // DualWithZero: one (n == 0..1)' other                  case "ak": // Akan                  case "am": // Amharic                  case "bh": // Bihari                  case "fil": // Filipino                  case "guw": // Gun                  case "hi": // Hindi                  case "ln": // Lingala                  case "mg": // Malagasy                  case "nso": // Northern Sotho                  case "ti": // Tigrinya                  case "tl": // Tagalog                  case "wa": // Walloon                      return (n' c) => (n == 0 || n == 1) ? 0 : 1;                    // DualFromZeroToTwo: one (n == 0..2 fractionate and n != 2)' other                  case "ff": // Fulah                  case "fr": // French                  case "kab": // Kabyle                      return (n' c) => (n >= 0 && n < 2) ? 0 : 1;                    // Triple: one (n == 1)' two (n == 2)' other                  case "ga": // Irish                  case "iu": // Inuktitut                  case "ksh": // Colognian                  case "kw": // Cornish                  case "se": // Northern Sami                  case "sma": // Southern Sami                  case "smi": // Sami language                  case "smj": // Lule Sami                  case "smn": // Inari Sami                  case "sms": // Skolt Sami                      return (n' c) => (n == 1) ? 0 : (n == 2) ? 1 : 2;                    // Russian & Serbo-Croatian                  case "be": // Belarusian                  case "bs": // Bosnian                  case "hr": // Croatian                  case "ru": // Russian                  case "sh": // Serbo-Croatian                  case "sr": // Serbian                  case "uk": // Ukrainian                      return (n' c) =>                          (n % 10 == 1) && !(n % 100 == 11) ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          2;                    // Unique:                    // Arabic                  case "ar":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          (n % 100).Between(3' 10) ? 3 : // few                          (n % 100).Between(11' 99) ? 4 : // many                          5; // other                    // Breton                  case "br":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5; // other                    // Czech                  case "cs":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Welsh                  case "cy":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5;                    // Manx                  case "gv":                      return (n' c) =>                          (n % 10).Between(1' 2) || (n % 20) == 0 ? 0 :  // one                          1;                    // Langi                  case "lag":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n > 0) && (n < 2) ? 1 : // one                          2;                    // Lithuanian                  case "lt":                      return (n' c) =>                          (n % 10) == 1 && !(n % 100).Between(11' 19) ? 0 : // one                          (n % 10).Between(2' 9) && !(n % 100).Between(11' 19) ? 1 : // few                          2;                    // Latvian                  case "lv":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n % 10) == 1 && (n % 100) != 11 ? 1 :                          2;                    // Macedonian                  case "mb":                      return (n' c) =>                          (n % 10) == 1 && n != 11 ? 0 : // one                          1;                    // Moldavian                  case "mo":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n != 1 && (n % 100).Between(1' 19)) ? 1 : // few                          2;                    // Maltese                  case "mt":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(2' 10) ? 1 : // few                          (n % 100).Between(11' 19) ? 2 : // many                          3;                    // Polish                  case "pl":                      return (n' c) =>                          n == 1 ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          (n % 10).Between(0' 1) || (n % 10).Between(5' 9) || (n % 100).Between(12' 14) ? 2 : // many                          3;                    // Romanian                  case "ro":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(1' 19) ? 1 : // few                          2;                    // Tachelhit                  case "shi":                      return (n' c) =>                          (n >= 0 && n <= 1) ? 0 : // one                          n.Between(2' 10) ? 1 : // few                          2;                    // Slovak                  case "sk":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Slovenian                  case "sl":                      return (n' c) =>                          (n % 100) == 1 ? 0 : // one                          (n % 100) == 2 ? 1 : // two                          (n % 100).Between(3' 4) ? 2 : // few                          3;                    // Central Morocco Tamazight                  case "tzm":                      return (n' c) =>                          n.Between(0' 1) || n.Between(11' 99) ? 0 : // one                          1;                      // Unknown language                  default:                      return null;              }
Magic Number,SmartFormat.Extensions,CommonLanguageRules,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\PluralLocalizationFormatter.cs,GetPluralRule,The following statement contains a magic number: switch (twoLetterISOLanguageName)              {                  // Singular                  case "az": // Azerbaijani                  case "bm": // Bambara                  case "bo": // Tibetan                  case "dz": // Dzongkha                  case "fa": // Persian                  case "hu": // Hungarian                  case "id": // Indonesian                  case "ig": // Igbo                  case "ii": // Sichuan Yi                  case "ja": // Japanese                  case "jv": // Javanese                  case "ka": // Georgian                  case "kde": // Makonde                  case "kea": // Kabuverdianu                  case "km": // Khmer                  case "kn": // Kannada                  case "ko": // Korean                  case "ms": // Malay                  case "my": // Burmese                  case "root": // Root (?)                  case "sah": // Sakha                  case "ses": // Koyraboro Senni                  case "sg": // Sango                  case "th": // Thai                  case "to": // Tonga                  case "vi": // Vietnamese                  case "wo": // Wolof                  case "yo": // Yoruba                  case "zh": // Chinese                      return (n' c) => 0;                    // Dual: one (n == 1)' other                  case "af": // Afrikaans                  case "bem": // Bembda                  case "bg": // Bulgarian                  case "bn": // Bengali                  case "brx": // Bodo                  case "ca": // Catalan                  case "cgg": // Chiga                  case "chr": // Cherokee                  case "da": // Danish                  case "de": // German                  case "dv": // Divehi                  case "ee": // Ewe                  case "el": // Greek                  case "en": // English                  case "eo": // Esperanto                  case "es": // Spanish                  case "et": // Estonian                  case "eu": // Basque                  case "fi": // Finnish                  case "fo": // Faroese                  case "fur": // Friulian                  case "fy": // Western Frisian                  case "gl": // Galician                  case "gsw": // Swiss German                  case "gu": // Gujarati                  case "ha": // Hausa                  case "haw": // Hawaiian                  case "he": // Hebrew                  case "is": // Icelandic                  case "it": // Italian                  case "kk": // Kazakh                  case "kl": // Kalaallisut                  case "ku": // Kurdish                  case "lb": // Luxembourgish                  case "lg": // Ganda                  case "lo": // Lao                  case "mas": // Masai                  case "ml": // Malayalam                  case "mn": // Mongolian                  case "mr": // Marathi                  case "nah": // Nahuatl                  case "nb": // Norwegian Bokmål                  case "ne": // Nepali                  case "nl": // Dutch                  case "nn": // Norwegian Nynorsk                  case "no": // Norwegian                  case "nyn": // Nyankole                  case "om": // Oromo                  case "or": // Oriya                  case "pa": // Punjabi                  case "pap": // Papiamento                  case "ps": // Pashto                  case "pt": // Portuguese                  case "rm": // Romansh                  case "saq": // Samburu                  case "so": // Somali                  case "sq": // Albanian                  case "ssy": // Saho                  case "sw": // Swahili                  case "sv": // Swedish                  case "syr": // Syriac                  case "ta": // Tamil                  case "te": // Telugu                  case "tk": // Turkmen                  case "tr": // Turkish                  case "ur": // Urdu                  case "wae": // Walser                  case "xog": // Soga                  case "zu": // Zulu                      return (n' c) =>                      {                          if (c == 2) return (n == 1) ? 0 : 1;                          if (c == 3) return (n == 0) ? 0 : (n == 1) ? 1 : 2;                          if (c == 4) return (n < 0) ? 0 : (n == 0) ? 1 : (n == 1) ? 2 : 3;                          return -1;                      };                    // DualWithZero: one (n == 0..1)' other                  case "ak": // Akan                  case "am": // Amharic                  case "bh": // Bihari                  case "fil": // Filipino                  case "guw": // Gun                  case "hi": // Hindi                  case "ln": // Lingala                  case "mg": // Malagasy                  case "nso": // Northern Sotho                  case "ti": // Tigrinya                  case "tl": // Tagalog                  case "wa": // Walloon                      return (n' c) => (n == 0 || n == 1) ? 0 : 1;                    // DualFromZeroToTwo: one (n == 0..2 fractionate and n != 2)' other                  case "ff": // Fulah                  case "fr": // French                  case "kab": // Kabyle                      return (n' c) => (n >= 0 && n < 2) ? 0 : 1;                    // Triple: one (n == 1)' two (n == 2)' other                  case "ga": // Irish                  case "iu": // Inuktitut                  case "ksh": // Colognian                  case "kw": // Cornish                  case "se": // Northern Sami                  case "sma": // Southern Sami                  case "smi": // Sami language                  case "smj": // Lule Sami                  case "smn": // Inari Sami                  case "sms": // Skolt Sami                      return (n' c) => (n == 1) ? 0 : (n == 2) ? 1 : 2;                    // Russian & Serbo-Croatian                  case "be": // Belarusian                  case "bs": // Bosnian                  case "hr": // Croatian                  case "ru": // Russian                  case "sh": // Serbo-Croatian                  case "sr": // Serbian                  case "uk": // Ukrainian                      return (n' c) =>                          (n % 10 == 1) && !(n % 100 == 11) ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          2;                    // Unique:                    // Arabic                  case "ar":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          (n % 100).Between(3' 10) ? 3 : // few                          (n % 100).Between(11' 99) ? 4 : // many                          5; // other                    // Breton                  case "br":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5; // other                    // Czech                  case "cs":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Welsh                  case "cy":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5;                    // Manx                  case "gv":                      return (n' c) =>                          (n % 10).Between(1' 2) || (n % 20) == 0 ? 0 :  // one                          1;                    // Langi                  case "lag":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n > 0) && (n < 2) ? 1 : // one                          2;                    // Lithuanian                  case "lt":                      return (n' c) =>                          (n % 10) == 1 && !(n % 100).Between(11' 19) ? 0 : // one                          (n % 10).Between(2' 9) && !(n % 100).Between(11' 19) ? 1 : // few                          2;                    // Latvian                  case "lv":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n % 10) == 1 && (n % 100) != 11 ? 1 :                          2;                    // Macedonian                  case "mb":                      return (n' c) =>                          (n % 10) == 1 && n != 11 ? 0 : // one                          1;                    // Moldavian                  case "mo":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n != 1 && (n % 100).Between(1' 19)) ? 1 : // few                          2;                    // Maltese                  case "mt":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(2' 10) ? 1 : // few                          (n % 100).Between(11' 19) ? 2 : // many                          3;                    // Polish                  case "pl":                      return (n' c) =>                          n == 1 ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          (n % 10).Between(0' 1) || (n % 10).Between(5' 9) || (n % 100).Between(12' 14) ? 2 : // many                          3;                    // Romanian                  case "ro":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(1' 19) ? 1 : // few                          2;                    // Tachelhit                  case "shi":                      return (n' c) =>                          (n >= 0 && n <= 1) ? 0 : // one                          n.Between(2' 10) ? 1 : // few                          2;                    // Slovak                  case "sk":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Slovenian                  case "sl":                      return (n' c) =>                          (n % 100) == 1 ? 0 : // one                          (n % 100) == 2 ? 1 : // two                          (n % 100).Between(3' 4) ? 2 : // few                          3;                    // Central Morocco Tamazight                  case "tzm":                      return (n' c) =>                          n.Between(0' 1) || n.Between(11' 99) ? 0 : // one                          1;                      // Unknown language                  default:                      return null;              }
Magic Number,SmartFormat.Extensions,CommonLanguageRules,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\PluralLocalizationFormatter.cs,GetPluralRule,The following statement contains a magic number: switch (twoLetterISOLanguageName)              {                  // Singular                  case "az": // Azerbaijani                  case "bm": // Bambara                  case "bo": // Tibetan                  case "dz": // Dzongkha                  case "fa": // Persian                  case "hu": // Hungarian                  case "id": // Indonesian                  case "ig": // Igbo                  case "ii": // Sichuan Yi                  case "ja": // Japanese                  case "jv": // Javanese                  case "ka": // Georgian                  case "kde": // Makonde                  case "kea": // Kabuverdianu                  case "km": // Khmer                  case "kn": // Kannada                  case "ko": // Korean                  case "ms": // Malay                  case "my": // Burmese                  case "root": // Root (?)                  case "sah": // Sakha                  case "ses": // Koyraboro Senni                  case "sg": // Sango                  case "th": // Thai                  case "to": // Tonga                  case "vi": // Vietnamese                  case "wo": // Wolof                  case "yo": // Yoruba                  case "zh": // Chinese                      return (n' c) => 0;                    // Dual: one (n == 1)' other                  case "af": // Afrikaans                  case "bem": // Bembda                  case "bg": // Bulgarian                  case "bn": // Bengali                  case "brx": // Bodo                  case "ca": // Catalan                  case "cgg": // Chiga                  case "chr": // Cherokee                  case "da": // Danish                  case "de": // German                  case "dv": // Divehi                  case "ee": // Ewe                  case "el": // Greek                  case "en": // English                  case "eo": // Esperanto                  case "es": // Spanish                  case "et": // Estonian                  case "eu": // Basque                  case "fi": // Finnish                  case "fo": // Faroese                  case "fur": // Friulian                  case "fy": // Western Frisian                  case "gl": // Galician                  case "gsw": // Swiss German                  case "gu": // Gujarati                  case "ha": // Hausa                  case "haw": // Hawaiian                  case "he": // Hebrew                  case "is": // Icelandic                  case "it": // Italian                  case "kk": // Kazakh                  case "kl": // Kalaallisut                  case "ku": // Kurdish                  case "lb": // Luxembourgish                  case "lg": // Ganda                  case "lo": // Lao                  case "mas": // Masai                  case "ml": // Malayalam                  case "mn": // Mongolian                  case "mr": // Marathi                  case "nah": // Nahuatl                  case "nb": // Norwegian Bokmål                  case "ne": // Nepali                  case "nl": // Dutch                  case "nn": // Norwegian Nynorsk                  case "no": // Norwegian                  case "nyn": // Nyankole                  case "om": // Oromo                  case "or": // Oriya                  case "pa": // Punjabi                  case "pap": // Papiamento                  case "ps": // Pashto                  case "pt": // Portuguese                  case "rm": // Romansh                  case "saq": // Samburu                  case "so": // Somali                  case "sq": // Albanian                  case "ssy": // Saho                  case "sw": // Swahili                  case "sv": // Swedish                  case "syr": // Syriac                  case "ta": // Tamil                  case "te": // Telugu                  case "tk": // Turkmen                  case "tr": // Turkish                  case "ur": // Urdu                  case "wae": // Walser                  case "xog": // Soga                  case "zu": // Zulu                      return (n' c) =>                      {                          if (c == 2) return (n == 1) ? 0 : 1;                          if (c == 3) return (n == 0) ? 0 : (n == 1) ? 1 : 2;                          if (c == 4) return (n < 0) ? 0 : (n == 0) ? 1 : (n == 1) ? 2 : 3;                          return -1;                      };                    // DualWithZero: one (n == 0..1)' other                  case "ak": // Akan                  case "am": // Amharic                  case "bh": // Bihari                  case "fil": // Filipino                  case "guw": // Gun                  case "hi": // Hindi                  case "ln": // Lingala                  case "mg": // Malagasy                  case "nso": // Northern Sotho                  case "ti": // Tigrinya                  case "tl": // Tagalog                  case "wa": // Walloon                      return (n' c) => (n == 0 || n == 1) ? 0 : 1;                    // DualFromZeroToTwo: one (n == 0..2 fractionate and n != 2)' other                  case "ff": // Fulah                  case "fr": // French                  case "kab": // Kabyle                      return (n' c) => (n >= 0 && n < 2) ? 0 : 1;                    // Triple: one (n == 1)' two (n == 2)' other                  case "ga": // Irish                  case "iu": // Inuktitut                  case "ksh": // Colognian                  case "kw": // Cornish                  case "se": // Northern Sami                  case "sma": // Southern Sami                  case "smi": // Sami language                  case "smj": // Lule Sami                  case "smn": // Inari Sami                  case "sms": // Skolt Sami                      return (n' c) => (n == 1) ? 0 : (n == 2) ? 1 : 2;                    // Russian & Serbo-Croatian                  case "be": // Belarusian                  case "bs": // Bosnian                  case "hr": // Croatian                  case "ru": // Russian                  case "sh": // Serbo-Croatian                  case "sr": // Serbian                  case "uk": // Ukrainian                      return (n' c) =>                          (n % 10 == 1) && !(n % 100 == 11) ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          2;                    // Unique:                    // Arabic                  case "ar":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          (n % 100).Between(3' 10) ? 3 : // few                          (n % 100).Between(11' 99) ? 4 : // many                          5; // other                    // Breton                  case "br":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5; // other                    // Czech                  case "cs":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Welsh                  case "cy":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5;                    // Manx                  case "gv":                      return (n' c) =>                          (n % 10).Between(1' 2) || (n % 20) == 0 ? 0 :  // one                          1;                    // Langi                  case "lag":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n > 0) && (n < 2) ? 1 : // one                          2;                    // Lithuanian                  case "lt":                      return (n' c) =>                          (n % 10) == 1 && !(n % 100).Between(11' 19) ? 0 : // one                          (n % 10).Between(2' 9) && !(n % 100).Between(11' 19) ? 1 : // few                          2;                    // Latvian                  case "lv":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n % 10) == 1 && (n % 100) != 11 ? 1 :                          2;                    // Macedonian                  case "mb":                      return (n' c) =>                          (n % 10) == 1 && n != 11 ? 0 : // one                          1;                    // Moldavian                  case "mo":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n != 1 && (n % 100).Between(1' 19)) ? 1 : // few                          2;                    // Maltese                  case "mt":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(2' 10) ? 1 : // few                          (n % 100).Between(11' 19) ? 2 : // many                          3;                    // Polish                  case "pl":                      return (n' c) =>                          n == 1 ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          (n % 10).Between(0' 1) || (n % 10).Between(5' 9) || (n % 100).Between(12' 14) ? 2 : // many                          3;                    // Romanian                  case "ro":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(1' 19) ? 1 : // few                          2;                    // Tachelhit                  case "shi":                      return (n' c) =>                          (n >= 0 && n <= 1) ? 0 : // one                          n.Between(2' 10) ? 1 : // few                          2;                    // Slovak                  case "sk":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Slovenian                  case "sl":                      return (n' c) =>                          (n % 100) == 1 ? 0 : // one                          (n % 100) == 2 ? 1 : // two                          (n % 100).Between(3' 4) ? 2 : // few                          3;                    // Central Morocco Tamazight                  case "tzm":                      return (n' c) =>                          n.Between(0' 1) || n.Between(11' 99) ? 0 : // one                          1;                      // Unknown language                  default:                      return null;              }
Magic Number,SmartFormat.Extensions,CommonLanguageRules,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\PluralLocalizationFormatter.cs,GetPluralRule,The following statement contains a magic number: switch (twoLetterISOLanguageName)              {                  // Singular                  case "az": // Azerbaijani                  case "bm": // Bambara                  case "bo": // Tibetan                  case "dz": // Dzongkha                  case "fa": // Persian                  case "hu": // Hungarian                  case "id": // Indonesian                  case "ig": // Igbo                  case "ii": // Sichuan Yi                  case "ja": // Japanese                  case "jv": // Javanese                  case "ka": // Georgian                  case "kde": // Makonde                  case "kea": // Kabuverdianu                  case "km": // Khmer                  case "kn": // Kannada                  case "ko": // Korean                  case "ms": // Malay                  case "my": // Burmese                  case "root": // Root (?)                  case "sah": // Sakha                  case "ses": // Koyraboro Senni                  case "sg": // Sango                  case "th": // Thai                  case "to": // Tonga                  case "vi": // Vietnamese                  case "wo": // Wolof                  case "yo": // Yoruba                  case "zh": // Chinese                      return (n' c) => 0;                    // Dual: one (n == 1)' other                  case "af": // Afrikaans                  case "bem": // Bembda                  case "bg": // Bulgarian                  case "bn": // Bengali                  case "brx": // Bodo                  case "ca": // Catalan                  case "cgg": // Chiga                  case "chr": // Cherokee                  case "da": // Danish                  case "de": // German                  case "dv": // Divehi                  case "ee": // Ewe                  case "el": // Greek                  case "en": // English                  case "eo": // Esperanto                  case "es": // Spanish                  case "et": // Estonian                  case "eu": // Basque                  case "fi": // Finnish                  case "fo": // Faroese                  case "fur": // Friulian                  case "fy": // Western Frisian                  case "gl": // Galician                  case "gsw": // Swiss German                  case "gu": // Gujarati                  case "ha": // Hausa                  case "haw": // Hawaiian                  case "he": // Hebrew                  case "is": // Icelandic                  case "it": // Italian                  case "kk": // Kazakh                  case "kl": // Kalaallisut                  case "ku": // Kurdish                  case "lb": // Luxembourgish                  case "lg": // Ganda                  case "lo": // Lao                  case "mas": // Masai                  case "ml": // Malayalam                  case "mn": // Mongolian                  case "mr": // Marathi                  case "nah": // Nahuatl                  case "nb": // Norwegian Bokmål                  case "ne": // Nepali                  case "nl": // Dutch                  case "nn": // Norwegian Nynorsk                  case "no": // Norwegian                  case "nyn": // Nyankole                  case "om": // Oromo                  case "or": // Oriya                  case "pa": // Punjabi                  case "pap": // Papiamento                  case "ps": // Pashto                  case "pt": // Portuguese                  case "rm": // Romansh                  case "saq": // Samburu                  case "so": // Somali                  case "sq": // Albanian                  case "ssy": // Saho                  case "sw": // Swahili                  case "sv": // Swedish                  case "syr": // Syriac                  case "ta": // Tamil                  case "te": // Telugu                  case "tk": // Turkmen                  case "tr": // Turkish                  case "ur": // Urdu                  case "wae": // Walser                  case "xog": // Soga                  case "zu": // Zulu                      return (n' c) =>                      {                          if (c == 2) return (n == 1) ? 0 : 1;                          if (c == 3) return (n == 0) ? 0 : (n == 1) ? 1 : 2;                          if (c == 4) return (n < 0) ? 0 : (n == 0) ? 1 : (n == 1) ? 2 : 3;                          return -1;                      };                    // DualWithZero: one (n == 0..1)' other                  case "ak": // Akan                  case "am": // Amharic                  case "bh": // Bihari                  case "fil": // Filipino                  case "guw": // Gun                  case "hi": // Hindi                  case "ln": // Lingala                  case "mg": // Malagasy                  case "nso": // Northern Sotho                  case "ti": // Tigrinya                  case "tl": // Tagalog                  case "wa": // Walloon                      return (n' c) => (n == 0 || n == 1) ? 0 : 1;                    // DualFromZeroToTwo: one (n == 0..2 fractionate and n != 2)' other                  case "ff": // Fulah                  case "fr": // French                  case "kab": // Kabyle                      return (n' c) => (n >= 0 && n < 2) ? 0 : 1;                    // Triple: one (n == 1)' two (n == 2)' other                  case "ga": // Irish                  case "iu": // Inuktitut                  case "ksh": // Colognian                  case "kw": // Cornish                  case "se": // Northern Sami                  case "sma": // Southern Sami                  case "smi": // Sami language                  case "smj": // Lule Sami                  case "smn": // Inari Sami                  case "sms": // Skolt Sami                      return (n' c) => (n == 1) ? 0 : (n == 2) ? 1 : 2;                    // Russian & Serbo-Croatian                  case "be": // Belarusian                  case "bs": // Bosnian                  case "hr": // Croatian                  case "ru": // Russian                  case "sh": // Serbo-Croatian                  case "sr": // Serbian                  case "uk": // Ukrainian                      return (n' c) =>                          (n % 10 == 1) && !(n % 100 == 11) ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          2;                    // Unique:                    // Arabic                  case "ar":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          (n % 100).Between(3' 10) ? 3 : // few                          (n % 100).Between(11' 99) ? 4 : // many                          5; // other                    // Breton                  case "br":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5; // other                    // Czech                  case "cs":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Welsh                  case "cy":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5;                    // Manx                  case "gv":                      return (n' c) =>                          (n % 10).Between(1' 2) || (n % 20) == 0 ? 0 :  // one                          1;                    // Langi                  case "lag":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n > 0) && (n < 2) ? 1 : // one                          2;                    // Lithuanian                  case "lt":                      return (n' c) =>                          (n % 10) == 1 && !(n % 100).Between(11' 19) ? 0 : // one                          (n % 10).Between(2' 9) && !(n % 100).Between(11' 19) ? 1 : // few                          2;                    // Latvian                  case "lv":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n % 10) == 1 && (n % 100) != 11 ? 1 :                          2;                    // Macedonian                  case "mb":                      return (n' c) =>                          (n % 10) == 1 && n != 11 ? 0 : // one                          1;                    // Moldavian                  case "mo":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n != 1 && (n % 100).Between(1' 19)) ? 1 : // few                          2;                    // Maltese                  case "mt":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(2' 10) ? 1 : // few                          (n % 100).Between(11' 19) ? 2 : // many                          3;                    // Polish                  case "pl":                      return (n' c) =>                          n == 1 ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          (n % 10).Between(0' 1) || (n % 10).Between(5' 9) || (n % 100).Between(12' 14) ? 2 : // many                          3;                    // Romanian                  case "ro":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(1' 19) ? 1 : // few                          2;                    // Tachelhit                  case "shi":                      return (n' c) =>                          (n >= 0 && n <= 1) ? 0 : // one                          n.Between(2' 10) ? 1 : // few                          2;                    // Slovak                  case "sk":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Slovenian                  case "sl":                      return (n' c) =>                          (n % 100) == 1 ? 0 : // one                          (n % 100) == 2 ? 1 : // two                          (n % 100).Between(3' 4) ? 2 : // few                          3;                    // Central Morocco Tamazight                  case "tzm":                      return (n' c) =>                          n.Between(0' 1) || n.Between(11' 99) ? 0 : // one                          1;                      // Unknown language                  default:                      return null;              }
Magic Number,SmartFormat.Extensions,CommonLanguageRules,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\PluralLocalizationFormatter.cs,GetPluralRule,The following statement contains a magic number: switch (twoLetterISOLanguageName)              {                  // Singular                  case "az": // Azerbaijani                  case "bm": // Bambara                  case "bo": // Tibetan                  case "dz": // Dzongkha                  case "fa": // Persian                  case "hu": // Hungarian                  case "id": // Indonesian                  case "ig": // Igbo                  case "ii": // Sichuan Yi                  case "ja": // Japanese                  case "jv": // Javanese                  case "ka": // Georgian                  case "kde": // Makonde                  case "kea": // Kabuverdianu                  case "km": // Khmer                  case "kn": // Kannada                  case "ko": // Korean                  case "ms": // Malay                  case "my": // Burmese                  case "root": // Root (?)                  case "sah": // Sakha                  case "ses": // Koyraboro Senni                  case "sg": // Sango                  case "th": // Thai                  case "to": // Tonga                  case "vi": // Vietnamese                  case "wo": // Wolof                  case "yo": // Yoruba                  case "zh": // Chinese                      return (n' c) => 0;                    // Dual: one (n == 1)' other                  case "af": // Afrikaans                  case "bem": // Bembda                  case "bg": // Bulgarian                  case "bn": // Bengali                  case "brx": // Bodo                  case "ca": // Catalan                  case "cgg": // Chiga                  case "chr": // Cherokee                  case "da": // Danish                  case "de": // German                  case "dv": // Divehi                  case "ee": // Ewe                  case "el": // Greek                  case "en": // English                  case "eo": // Esperanto                  case "es": // Spanish                  case "et": // Estonian                  case "eu": // Basque                  case "fi": // Finnish                  case "fo": // Faroese                  case "fur": // Friulian                  case "fy": // Western Frisian                  case "gl": // Galician                  case "gsw": // Swiss German                  case "gu": // Gujarati                  case "ha": // Hausa                  case "haw": // Hawaiian                  case "he": // Hebrew                  case "is": // Icelandic                  case "it": // Italian                  case "kk": // Kazakh                  case "kl": // Kalaallisut                  case "ku": // Kurdish                  case "lb": // Luxembourgish                  case "lg": // Ganda                  case "lo": // Lao                  case "mas": // Masai                  case "ml": // Malayalam                  case "mn": // Mongolian                  case "mr": // Marathi                  case "nah": // Nahuatl                  case "nb": // Norwegian Bokmål                  case "ne": // Nepali                  case "nl": // Dutch                  case "nn": // Norwegian Nynorsk                  case "no": // Norwegian                  case "nyn": // Nyankole                  case "om": // Oromo                  case "or": // Oriya                  case "pa": // Punjabi                  case "pap": // Papiamento                  case "ps": // Pashto                  case "pt": // Portuguese                  case "rm": // Romansh                  case "saq": // Samburu                  case "so": // Somali                  case "sq": // Albanian                  case "ssy": // Saho                  case "sw": // Swahili                  case "sv": // Swedish                  case "syr": // Syriac                  case "ta": // Tamil                  case "te": // Telugu                  case "tk": // Turkmen                  case "tr": // Turkish                  case "ur": // Urdu                  case "wae": // Walser                  case "xog": // Soga                  case "zu": // Zulu                      return (n' c) =>                      {                          if (c == 2) return (n == 1) ? 0 : 1;                          if (c == 3) return (n == 0) ? 0 : (n == 1) ? 1 : 2;                          if (c == 4) return (n < 0) ? 0 : (n == 0) ? 1 : (n == 1) ? 2 : 3;                          return -1;                      };                    // DualWithZero: one (n == 0..1)' other                  case "ak": // Akan                  case "am": // Amharic                  case "bh": // Bihari                  case "fil": // Filipino                  case "guw": // Gun                  case "hi": // Hindi                  case "ln": // Lingala                  case "mg": // Malagasy                  case "nso": // Northern Sotho                  case "ti": // Tigrinya                  case "tl": // Tagalog                  case "wa": // Walloon                      return (n' c) => (n == 0 || n == 1) ? 0 : 1;                    // DualFromZeroToTwo: one (n == 0..2 fractionate and n != 2)' other                  case "ff": // Fulah                  case "fr": // French                  case "kab": // Kabyle                      return (n' c) => (n >= 0 && n < 2) ? 0 : 1;                    // Triple: one (n == 1)' two (n == 2)' other                  case "ga": // Irish                  case "iu": // Inuktitut                  case "ksh": // Colognian                  case "kw": // Cornish                  case "se": // Northern Sami                  case "sma": // Southern Sami                  case "smi": // Sami language                  case "smj": // Lule Sami                  case "smn": // Inari Sami                  case "sms": // Skolt Sami                      return (n' c) => (n == 1) ? 0 : (n == 2) ? 1 : 2;                    // Russian & Serbo-Croatian                  case "be": // Belarusian                  case "bs": // Bosnian                  case "hr": // Croatian                  case "ru": // Russian                  case "sh": // Serbo-Croatian                  case "sr": // Serbian                  case "uk": // Ukrainian                      return (n' c) =>                          (n % 10 == 1) && !(n % 100 == 11) ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          2;                    // Unique:                    // Arabic                  case "ar":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          (n % 100).Between(3' 10) ? 3 : // few                          (n % 100).Between(11' 99) ? 4 : // many                          5; // other                    // Breton                  case "br":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5; // other                    // Czech                  case "cs":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Welsh                  case "cy":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5;                    // Manx                  case "gv":                      return (n' c) =>                          (n % 10).Between(1' 2) || (n % 20) == 0 ? 0 :  // one                          1;                    // Langi                  case "lag":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n > 0) && (n < 2) ? 1 : // one                          2;                    // Lithuanian                  case "lt":                      return (n' c) =>                          (n % 10) == 1 && !(n % 100).Between(11' 19) ? 0 : // one                          (n % 10).Between(2' 9) && !(n % 100).Between(11' 19) ? 1 : // few                          2;                    // Latvian                  case "lv":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n % 10) == 1 && (n % 100) != 11 ? 1 :                          2;                    // Macedonian                  case "mb":                      return (n' c) =>                          (n % 10) == 1 && n != 11 ? 0 : // one                          1;                    // Moldavian                  case "mo":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n != 1 && (n % 100).Between(1' 19)) ? 1 : // few                          2;                    // Maltese                  case "mt":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(2' 10) ? 1 : // few                          (n % 100).Between(11' 19) ? 2 : // many                          3;                    // Polish                  case "pl":                      return (n' c) =>                          n == 1 ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          (n % 10).Between(0' 1) || (n % 10).Between(5' 9) || (n % 100).Between(12' 14) ? 2 : // many                          3;                    // Romanian                  case "ro":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(1' 19) ? 1 : // few                          2;                    // Tachelhit                  case "shi":                      return (n' c) =>                          (n >= 0 && n <= 1) ? 0 : // one                          n.Between(2' 10) ? 1 : // few                          2;                    // Slovak                  case "sk":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Slovenian                  case "sl":                      return (n' c) =>                          (n % 100) == 1 ? 0 : // one                          (n % 100) == 2 ? 1 : // two                          (n % 100).Between(3' 4) ? 2 : // few                          3;                    // Central Morocco Tamazight                  case "tzm":                      return (n' c) =>                          n.Between(0' 1) || n.Between(11' 99) ? 0 : // one                          1;                      // Unknown language                  default:                      return null;              }
Magic Number,SmartFormat.Extensions,CommonLanguageRules,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\PluralLocalizationFormatter.cs,GetPluralRule,The following statement contains a magic number: switch (twoLetterISOLanguageName)              {                  // Singular                  case "az": // Azerbaijani                  case "bm": // Bambara                  case "bo": // Tibetan                  case "dz": // Dzongkha                  case "fa": // Persian                  case "hu": // Hungarian                  case "id": // Indonesian                  case "ig": // Igbo                  case "ii": // Sichuan Yi                  case "ja": // Japanese                  case "jv": // Javanese                  case "ka": // Georgian                  case "kde": // Makonde                  case "kea": // Kabuverdianu                  case "km": // Khmer                  case "kn": // Kannada                  case "ko": // Korean                  case "ms": // Malay                  case "my": // Burmese                  case "root": // Root (?)                  case "sah": // Sakha                  case "ses": // Koyraboro Senni                  case "sg": // Sango                  case "th": // Thai                  case "to": // Tonga                  case "vi": // Vietnamese                  case "wo": // Wolof                  case "yo": // Yoruba                  case "zh": // Chinese                      return (n' c) => 0;                    // Dual: one (n == 1)' other                  case "af": // Afrikaans                  case "bem": // Bembda                  case "bg": // Bulgarian                  case "bn": // Bengali                  case "brx": // Bodo                  case "ca": // Catalan                  case "cgg": // Chiga                  case "chr": // Cherokee                  case "da": // Danish                  case "de": // German                  case "dv": // Divehi                  case "ee": // Ewe                  case "el": // Greek                  case "en": // English                  case "eo": // Esperanto                  case "es": // Spanish                  case "et": // Estonian                  case "eu": // Basque                  case "fi": // Finnish                  case "fo": // Faroese                  case "fur": // Friulian                  case "fy": // Western Frisian                  case "gl": // Galician                  case "gsw": // Swiss German                  case "gu": // Gujarati                  case "ha": // Hausa                  case "haw": // Hawaiian                  case "he": // Hebrew                  case "is": // Icelandic                  case "it": // Italian                  case "kk": // Kazakh                  case "kl": // Kalaallisut                  case "ku": // Kurdish                  case "lb": // Luxembourgish                  case "lg": // Ganda                  case "lo": // Lao                  case "mas": // Masai                  case "ml": // Malayalam                  case "mn": // Mongolian                  case "mr": // Marathi                  case "nah": // Nahuatl                  case "nb": // Norwegian Bokmål                  case "ne": // Nepali                  case "nl": // Dutch                  case "nn": // Norwegian Nynorsk                  case "no": // Norwegian                  case "nyn": // Nyankole                  case "om": // Oromo                  case "or": // Oriya                  case "pa": // Punjabi                  case "pap": // Papiamento                  case "ps": // Pashto                  case "pt": // Portuguese                  case "rm": // Romansh                  case "saq": // Samburu                  case "so": // Somali                  case "sq": // Albanian                  case "ssy": // Saho                  case "sw": // Swahili                  case "sv": // Swedish                  case "syr": // Syriac                  case "ta": // Tamil                  case "te": // Telugu                  case "tk": // Turkmen                  case "tr": // Turkish                  case "ur": // Urdu                  case "wae": // Walser                  case "xog": // Soga                  case "zu": // Zulu                      return (n' c) =>                      {                          if (c == 2) return (n == 1) ? 0 : 1;                          if (c == 3) return (n == 0) ? 0 : (n == 1) ? 1 : 2;                          if (c == 4) return (n < 0) ? 0 : (n == 0) ? 1 : (n == 1) ? 2 : 3;                          return -1;                      };                    // DualWithZero: one (n == 0..1)' other                  case "ak": // Akan                  case "am": // Amharic                  case "bh": // Bihari                  case "fil": // Filipino                  case "guw": // Gun                  case "hi": // Hindi                  case "ln": // Lingala                  case "mg": // Malagasy                  case "nso": // Northern Sotho                  case "ti": // Tigrinya                  case "tl": // Tagalog                  case "wa": // Walloon                      return (n' c) => (n == 0 || n == 1) ? 0 : 1;                    // DualFromZeroToTwo: one (n == 0..2 fractionate and n != 2)' other                  case "ff": // Fulah                  case "fr": // French                  case "kab": // Kabyle                      return (n' c) => (n >= 0 && n < 2) ? 0 : 1;                    // Triple: one (n == 1)' two (n == 2)' other                  case "ga": // Irish                  case "iu": // Inuktitut                  case "ksh": // Colognian                  case "kw": // Cornish                  case "se": // Northern Sami                  case "sma": // Southern Sami                  case "smi": // Sami language                  case "smj": // Lule Sami                  case "smn": // Inari Sami                  case "sms": // Skolt Sami                      return (n' c) => (n == 1) ? 0 : (n == 2) ? 1 : 2;                    // Russian & Serbo-Croatian                  case "be": // Belarusian                  case "bs": // Bosnian                  case "hr": // Croatian                  case "ru": // Russian                  case "sh": // Serbo-Croatian                  case "sr": // Serbian                  case "uk": // Ukrainian                      return (n' c) =>                          (n % 10 == 1) && !(n % 100 == 11) ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          2;                    // Unique:                    // Arabic                  case "ar":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          (n % 100).Between(3' 10) ? 3 : // few                          (n % 100).Between(11' 99) ? 4 : // many                          5; // other                    // Breton                  case "br":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5; // other                    // Czech                  case "cs":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Welsh                  case "cy":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5;                    // Manx                  case "gv":                      return (n' c) =>                          (n % 10).Between(1' 2) || (n % 20) == 0 ? 0 :  // one                          1;                    // Langi                  case "lag":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n > 0) && (n < 2) ? 1 : // one                          2;                    // Lithuanian                  case "lt":                      return (n' c) =>                          (n % 10) == 1 && !(n % 100).Between(11' 19) ? 0 : // one                          (n % 10).Between(2' 9) && !(n % 100).Between(11' 19) ? 1 : // few                          2;                    // Latvian                  case "lv":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n % 10) == 1 && (n % 100) != 11 ? 1 :                          2;                    // Macedonian                  case "mb":                      return (n' c) =>                          (n % 10) == 1 && n != 11 ? 0 : // one                          1;                    // Moldavian                  case "mo":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n != 1 && (n % 100).Between(1' 19)) ? 1 : // few                          2;                    // Maltese                  case "mt":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(2' 10) ? 1 : // few                          (n % 100).Between(11' 19) ? 2 : // many                          3;                    // Polish                  case "pl":                      return (n' c) =>                          n == 1 ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          (n % 10).Between(0' 1) || (n % 10).Between(5' 9) || (n % 100).Between(12' 14) ? 2 : // many                          3;                    // Romanian                  case "ro":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(1' 19) ? 1 : // few                          2;                    // Tachelhit                  case "shi":                      return (n' c) =>                          (n >= 0 && n <= 1) ? 0 : // one                          n.Between(2' 10) ? 1 : // few                          2;                    // Slovak                  case "sk":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Slovenian                  case "sl":                      return (n' c) =>                          (n % 100) == 1 ? 0 : // one                          (n % 100) == 2 ? 1 : // two                          (n % 100).Between(3' 4) ? 2 : // few                          3;                    // Central Morocco Tamazight                  case "tzm":                      return (n' c) =>                          n.Between(0' 1) || n.Between(11' 99) ? 0 : // one                          1;                      // Unknown language                  default:                      return null;              }
Magic Number,SmartFormat.Extensions,CommonLanguageRules,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\PluralLocalizationFormatter.cs,GetPluralRule,The following statement contains a magic number: switch (twoLetterISOLanguageName)              {                  // Singular                  case "az": // Azerbaijani                  case "bm": // Bambara                  case "bo": // Tibetan                  case "dz": // Dzongkha                  case "fa": // Persian                  case "hu": // Hungarian                  case "id": // Indonesian                  case "ig": // Igbo                  case "ii": // Sichuan Yi                  case "ja": // Japanese                  case "jv": // Javanese                  case "ka": // Georgian                  case "kde": // Makonde                  case "kea": // Kabuverdianu                  case "km": // Khmer                  case "kn": // Kannada                  case "ko": // Korean                  case "ms": // Malay                  case "my": // Burmese                  case "root": // Root (?)                  case "sah": // Sakha                  case "ses": // Koyraboro Senni                  case "sg": // Sango                  case "th": // Thai                  case "to": // Tonga                  case "vi": // Vietnamese                  case "wo": // Wolof                  case "yo": // Yoruba                  case "zh": // Chinese                      return (n' c) => 0;                    // Dual: one (n == 1)' other                  case "af": // Afrikaans                  case "bem": // Bembda                  case "bg": // Bulgarian                  case "bn": // Bengali                  case "brx": // Bodo                  case "ca": // Catalan                  case "cgg": // Chiga                  case "chr": // Cherokee                  case "da": // Danish                  case "de": // German                  case "dv": // Divehi                  case "ee": // Ewe                  case "el": // Greek                  case "en": // English                  case "eo": // Esperanto                  case "es": // Spanish                  case "et": // Estonian                  case "eu": // Basque                  case "fi": // Finnish                  case "fo": // Faroese                  case "fur": // Friulian                  case "fy": // Western Frisian                  case "gl": // Galician                  case "gsw": // Swiss German                  case "gu": // Gujarati                  case "ha": // Hausa                  case "haw": // Hawaiian                  case "he": // Hebrew                  case "is": // Icelandic                  case "it": // Italian                  case "kk": // Kazakh                  case "kl": // Kalaallisut                  case "ku": // Kurdish                  case "lb": // Luxembourgish                  case "lg": // Ganda                  case "lo": // Lao                  case "mas": // Masai                  case "ml": // Malayalam                  case "mn": // Mongolian                  case "mr": // Marathi                  case "nah": // Nahuatl                  case "nb": // Norwegian Bokmål                  case "ne": // Nepali                  case "nl": // Dutch                  case "nn": // Norwegian Nynorsk                  case "no": // Norwegian                  case "nyn": // Nyankole                  case "om": // Oromo                  case "or": // Oriya                  case "pa": // Punjabi                  case "pap": // Papiamento                  case "ps": // Pashto                  case "pt": // Portuguese                  case "rm": // Romansh                  case "saq": // Samburu                  case "so": // Somali                  case "sq": // Albanian                  case "ssy": // Saho                  case "sw": // Swahili                  case "sv": // Swedish                  case "syr": // Syriac                  case "ta": // Tamil                  case "te": // Telugu                  case "tk": // Turkmen                  case "tr": // Turkish                  case "ur": // Urdu                  case "wae": // Walser                  case "xog": // Soga                  case "zu": // Zulu                      return (n' c) =>                      {                          if (c == 2) return (n == 1) ? 0 : 1;                          if (c == 3) return (n == 0) ? 0 : (n == 1) ? 1 : 2;                          if (c == 4) return (n < 0) ? 0 : (n == 0) ? 1 : (n == 1) ? 2 : 3;                          return -1;                      };                    // DualWithZero: one (n == 0..1)' other                  case "ak": // Akan                  case "am": // Amharic                  case "bh": // Bihari                  case "fil": // Filipino                  case "guw": // Gun                  case "hi": // Hindi                  case "ln": // Lingala                  case "mg": // Malagasy                  case "nso": // Northern Sotho                  case "ti": // Tigrinya                  case "tl": // Tagalog                  case "wa": // Walloon                      return (n' c) => (n == 0 || n == 1) ? 0 : 1;                    // DualFromZeroToTwo: one (n == 0..2 fractionate and n != 2)' other                  case "ff": // Fulah                  case "fr": // French                  case "kab": // Kabyle                      return (n' c) => (n >= 0 && n < 2) ? 0 : 1;                    // Triple: one (n == 1)' two (n == 2)' other                  case "ga": // Irish                  case "iu": // Inuktitut                  case "ksh": // Colognian                  case "kw": // Cornish                  case "se": // Northern Sami                  case "sma": // Southern Sami                  case "smi": // Sami language                  case "smj": // Lule Sami                  case "smn": // Inari Sami                  case "sms": // Skolt Sami                      return (n' c) => (n == 1) ? 0 : (n == 2) ? 1 : 2;                    // Russian & Serbo-Croatian                  case "be": // Belarusian                  case "bs": // Bosnian                  case "hr": // Croatian                  case "ru": // Russian                  case "sh": // Serbo-Croatian                  case "sr": // Serbian                  case "uk": // Ukrainian                      return (n' c) =>                          (n % 10 == 1) && !(n % 100 == 11) ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          2;                    // Unique:                    // Arabic                  case "ar":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          (n % 100).Between(3' 10) ? 3 : // few                          (n % 100).Between(11' 99) ? 4 : // many                          5; // other                    // Breton                  case "br":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5; // other                    // Czech                  case "cs":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Welsh                  case "cy":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5;                    // Manx                  case "gv":                      return (n' c) =>                          (n % 10).Between(1' 2) || (n % 20) == 0 ? 0 :  // one                          1;                    // Langi                  case "lag":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n > 0) && (n < 2) ? 1 : // one                          2;                    // Lithuanian                  case "lt":                      return (n' c) =>                          (n % 10) == 1 && !(n % 100).Between(11' 19) ? 0 : // one                          (n % 10).Between(2' 9) && !(n % 100).Between(11' 19) ? 1 : // few                          2;                    // Latvian                  case "lv":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n % 10) == 1 && (n % 100) != 11 ? 1 :                          2;                    // Macedonian                  case "mb":                      return (n' c) =>                          (n % 10) == 1 && n != 11 ? 0 : // one                          1;                    // Moldavian                  case "mo":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n != 1 && (n % 100).Between(1' 19)) ? 1 : // few                          2;                    // Maltese                  case "mt":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(2' 10) ? 1 : // few                          (n % 100).Between(11' 19) ? 2 : // many                          3;                    // Polish                  case "pl":                      return (n' c) =>                          n == 1 ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          (n % 10).Between(0' 1) || (n % 10).Between(5' 9) || (n % 100).Between(12' 14) ? 2 : // many                          3;                    // Romanian                  case "ro":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(1' 19) ? 1 : // few                          2;                    // Tachelhit                  case "shi":                      return (n' c) =>                          (n >= 0 && n <= 1) ? 0 : // one                          n.Between(2' 10) ? 1 : // few                          2;                    // Slovak                  case "sk":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Slovenian                  case "sl":                      return (n' c) =>                          (n % 100) == 1 ? 0 : // one                          (n % 100) == 2 ? 1 : // two                          (n % 100).Between(3' 4) ? 2 : // few                          3;                    // Central Morocco Tamazight                  case "tzm":                      return (n' c) =>                          n.Between(0' 1) || n.Between(11' 99) ? 0 : // one                          1;                      // Unknown language                  default:                      return null;              }
Magic Number,SmartFormat.Extensions,CommonLanguageRules,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\PluralLocalizationFormatter.cs,GetPluralRule,The following statement contains a magic number: switch (twoLetterISOLanguageName)              {                  // Singular                  case "az": // Azerbaijani                  case "bm": // Bambara                  case "bo": // Tibetan                  case "dz": // Dzongkha                  case "fa": // Persian                  case "hu": // Hungarian                  case "id": // Indonesian                  case "ig": // Igbo                  case "ii": // Sichuan Yi                  case "ja": // Japanese                  case "jv": // Javanese                  case "ka": // Georgian                  case "kde": // Makonde                  case "kea": // Kabuverdianu                  case "km": // Khmer                  case "kn": // Kannada                  case "ko": // Korean                  case "ms": // Malay                  case "my": // Burmese                  case "root": // Root (?)                  case "sah": // Sakha                  case "ses": // Koyraboro Senni                  case "sg": // Sango                  case "th": // Thai                  case "to": // Tonga                  case "vi": // Vietnamese                  case "wo": // Wolof                  case "yo": // Yoruba                  case "zh": // Chinese                      return (n' c) => 0;                    // Dual: one (n == 1)' other                  case "af": // Afrikaans                  case "bem": // Bembda                  case "bg": // Bulgarian                  case "bn": // Bengali                  case "brx": // Bodo                  case "ca": // Catalan                  case "cgg": // Chiga                  case "chr": // Cherokee                  case "da": // Danish                  case "de": // German                  case "dv": // Divehi                  case "ee": // Ewe                  case "el": // Greek                  case "en": // English                  case "eo": // Esperanto                  case "es": // Spanish                  case "et": // Estonian                  case "eu": // Basque                  case "fi": // Finnish                  case "fo": // Faroese                  case "fur": // Friulian                  case "fy": // Western Frisian                  case "gl": // Galician                  case "gsw": // Swiss German                  case "gu": // Gujarati                  case "ha": // Hausa                  case "haw": // Hawaiian                  case "he": // Hebrew                  case "is": // Icelandic                  case "it": // Italian                  case "kk": // Kazakh                  case "kl": // Kalaallisut                  case "ku": // Kurdish                  case "lb": // Luxembourgish                  case "lg": // Ganda                  case "lo": // Lao                  case "mas": // Masai                  case "ml": // Malayalam                  case "mn": // Mongolian                  case "mr": // Marathi                  case "nah": // Nahuatl                  case "nb": // Norwegian Bokmål                  case "ne": // Nepali                  case "nl": // Dutch                  case "nn": // Norwegian Nynorsk                  case "no": // Norwegian                  case "nyn": // Nyankole                  case "om": // Oromo                  case "or": // Oriya                  case "pa": // Punjabi                  case "pap": // Papiamento                  case "ps": // Pashto                  case "pt": // Portuguese                  case "rm": // Romansh                  case "saq": // Samburu                  case "so": // Somali                  case "sq": // Albanian                  case "ssy": // Saho                  case "sw": // Swahili                  case "sv": // Swedish                  case "syr": // Syriac                  case "ta": // Tamil                  case "te": // Telugu                  case "tk": // Turkmen                  case "tr": // Turkish                  case "ur": // Urdu                  case "wae": // Walser                  case "xog": // Soga                  case "zu": // Zulu                      return (n' c) =>                      {                          if (c == 2) return (n == 1) ? 0 : 1;                          if (c == 3) return (n == 0) ? 0 : (n == 1) ? 1 : 2;                          if (c == 4) return (n < 0) ? 0 : (n == 0) ? 1 : (n == 1) ? 2 : 3;                          return -1;                      };                    // DualWithZero: one (n == 0..1)' other                  case "ak": // Akan                  case "am": // Amharic                  case "bh": // Bihari                  case "fil": // Filipino                  case "guw": // Gun                  case "hi": // Hindi                  case "ln": // Lingala                  case "mg": // Malagasy                  case "nso": // Northern Sotho                  case "ti": // Tigrinya                  case "tl": // Tagalog                  case "wa": // Walloon                      return (n' c) => (n == 0 || n == 1) ? 0 : 1;                    // DualFromZeroToTwo: one (n == 0..2 fractionate and n != 2)' other                  case "ff": // Fulah                  case "fr": // French                  case "kab": // Kabyle                      return (n' c) => (n >= 0 && n < 2) ? 0 : 1;                    // Triple: one (n == 1)' two (n == 2)' other                  case "ga": // Irish                  case "iu": // Inuktitut                  case "ksh": // Colognian                  case "kw": // Cornish                  case "se": // Northern Sami                  case "sma": // Southern Sami                  case "smi": // Sami language                  case "smj": // Lule Sami                  case "smn": // Inari Sami                  case "sms": // Skolt Sami                      return (n' c) => (n == 1) ? 0 : (n == 2) ? 1 : 2;                    // Russian & Serbo-Croatian                  case "be": // Belarusian                  case "bs": // Bosnian                  case "hr": // Croatian                  case "ru": // Russian                  case "sh": // Serbo-Croatian                  case "sr": // Serbian                  case "uk": // Ukrainian                      return (n' c) =>                          (n % 10 == 1) && !(n % 100 == 11) ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          2;                    // Unique:                    // Arabic                  case "ar":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          (n % 100).Between(3' 10) ? 3 : // few                          (n % 100).Between(11' 99) ? 4 : // many                          5; // other                    // Breton                  case "br":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5; // other                    // Czech                  case "cs":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Welsh                  case "cy":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5;                    // Manx                  case "gv":                      return (n' c) =>                          (n % 10).Between(1' 2) || (n % 20) == 0 ? 0 :  // one                          1;                    // Langi                  case "lag":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n > 0) && (n < 2) ? 1 : // one                          2;                    // Lithuanian                  case "lt":                      return (n' c) =>                          (n % 10) == 1 && !(n % 100).Between(11' 19) ? 0 : // one                          (n % 10).Between(2' 9) && !(n % 100).Between(11' 19) ? 1 : // few                          2;                    // Latvian                  case "lv":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n % 10) == 1 && (n % 100) != 11 ? 1 :                          2;                    // Macedonian                  case "mb":                      return (n' c) =>                          (n % 10) == 1 && n != 11 ? 0 : // one                          1;                    // Moldavian                  case "mo":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n != 1 && (n % 100).Between(1' 19)) ? 1 : // few                          2;                    // Maltese                  case "mt":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(2' 10) ? 1 : // few                          (n % 100).Between(11' 19) ? 2 : // many                          3;                    // Polish                  case "pl":                      return (n' c) =>                          n == 1 ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          (n % 10).Between(0' 1) || (n % 10).Between(5' 9) || (n % 100).Between(12' 14) ? 2 : // many                          3;                    // Romanian                  case "ro":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(1' 19) ? 1 : // few                          2;                    // Tachelhit                  case "shi":                      return (n' c) =>                          (n >= 0 && n <= 1) ? 0 : // one                          n.Between(2' 10) ? 1 : // few                          2;                    // Slovak                  case "sk":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Slovenian                  case "sl":                      return (n' c) =>                          (n % 100) == 1 ? 0 : // one                          (n % 100) == 2 ? 1 : // two                          (n % 100).Between(3' 4) ? 2 : // few                          3;                    // Central Morocco Tamazight                  case "tzm":                      return (n' c) =>                          n.Between(0' 1) || n.Between(11' 99) ? 0 : // one                          1;                      // Unknown language                  default:                      return null;              }
Magic Number,SmartFormat.Extensions,CommonLanguageRules,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\PluralLocalizationFormatter.cs,GetPluralRule,The following statement contains a magic number: switch (twoLetterISOLanguageName)              {                  // Singular                  case "az": // Azerbaijani                  case "bm": // Bambara                  case "bo": // Tibetan                  case "dz": // Dzongkha                  case "fa": // Persian                  case "hu": // Hungarian                  case "id": // Indonesian                  case "ig": // Igbo                  case "ii": // Sichuan Yi                  case "ja": // Japanese                  case "jv": // Javanese                  case "ka": // Georgian                  case "kde": // Makonde                  case "kea": // Kabuverdianu                  case "km": // Khmer                  case "kn": // Kannada                  case "ko": // Korean                  case "ms": // Malay                  case "my": // Burmese                  case "root": // Root (?)                  case "sah": // Sakha                  case "ses": // Koyraboro Senni                  case "sg": // Sango                  case "th": // Thai                  case "to": // Tonga                  case "vi": // Vietnamese                  case "wo": // Wolof                  case "yo": // Yoruba                  case "zh": // Chinese                      return (n' c) => 0;                    // Dual: one (n == 1)' other                  case "af": // Afrikaans                  case "bem": // Bembda                  case "bg": // Bulgarian                  case "bn": // Bengali                  case "brx": // Bodo                  case "ca": // Catalan                  case "cgg": // Chiga                  case "chr": // Cherokee                  case "da": // Danish                  case "de": // German                  case "dv": // Divehi                  case "ee": // Ewe                  case "el": // Greek                  case "en": // English                  case "eo": // Esperanto                  case "es": // Spanish                  case "et": // Estonian                  case "eu": // Basque                  case "fi": // Finnish                  case "fo": // Faroese                  case "fur": // Friulian                  case "fy": // Western Frisian                  case "gl": // Galician                  case "gsw": // Swiss German                  case "gu": // Gujarati                  case "ha": // Hausa                  case "haw": // Hawaiian                  case "he": // Hebrew                  case "is": // Icelandic                  case "it": // Italian                  case "kk": // Kazakh                  case "kl": // Kalaallisut                  case "ku": // Kurdish                  case "lb": // Luxembourgish                  case "lg": // Ganda                  case "lo": // Lao                  case "mas": // Masai                  case "ml": // Malayalam                  case "mn": // Mongolian                  case "mr": // Marathi                  case "nah": // Nahuatl                  case "nb": // Norwegian Bokmål                  case "ne": // Nepali                  case "nl": // Dutch                  case "nn": // Norwegian Nynorsk                  case "no": // Norwegian                  case "nyn": // Nyankole                  case "om": // Oromo                  case "or": // Oriya                  case "pa": // Punjabi                  case "pap": // Papiamento                  case "ps": // Pashto                  case "pt": // Portuguese                  case "rm": // Romansh                  case "saq": // Samburu                  case "so": // Somali                  case "sq": // Albanian                  case "ssy": // Saho                  case "sw": // Swahili                  case "sv": // Swedish                  case "syr": // Syriac                  case "ta": // Tamil                  case "te": // Telugu                  case "tk": // Turkmen                  case "tr": // Turkish                  case "ur": // Urdu                  case "wae": // Walser                  case "xog": // Soga                  case "zu": // Zulu                      return (n' c) =>                      {                          if (c == 2) return (n == 1) ? 0 : 1;                          if (c == 3) return (n == 0) ? 0 : (n == 1) ? 1 : 2;                          if (c == 4) return (n < 0) ? 0 : (n == 0) ? 1 : (n == 1) ? 2 : 3;                          return -1;                      };                    // DualWithZero: one (n == 0..1)' other                  case "ak": // Akan                  case "am": // Amharic                  case "bh": // Bihari                  case "fil": // Filipino                  case "guw": // Gun                  case "hi": // Hindi                  case "ln": // Lingala                  case "mg": // Malagasy                  case "nso": // Northern Sotho                  case "ti": // Tigrinya                  case "tl": // Tagalog                  case "wa": // Walloon                      return (n' c) => (n == 0 || n == 1) ? 0 : 1;                    // DualFromZeroToTwo: one (n == 0..2 fractionate and n != 2)' other                  case "ff": // Fulah                  case "fr": // French                  case "kab": // Kabyle                      return (n' c) => (n >= 0 && n < 2) ? 0 : 1;                    // Triple: one (n == 1)' two (n == 2)' other                  case "ga": // Irish                  case "iu": // Inuktitut                  case "ksh": // Colognian                  case "kw": // Cornish                  case "se": // Northern Sami                  case "sma": // Southern Sami                  case "smi": // Sami language                  case "smj": // Lule Sami                  case "smn": // Inari Sami                  case "sms": // Skolt Sami                      return (n' c) => (n == 1) ? 0 : (n == 2) ? 1 : 2;                    // Russian & Serbo-Croatian                  case "be": // Belarusian                  case "bs": // Bosnian                  case "hr": // Croatian                  case "ru": // Russian                  case "sh": // Serbo-Croatian                  case "sr": // Serbian                  case "uk": // Ukrainian                      return (n' c) =>                          (n % 10 == 1) && !(n % 100 == 11) ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          2;                    // Unique:                    // Arabic                  case "ar":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          (n % 100).Between(3' 10) ? 3 : // few                          (n % 100).Between(11' 99) ? 4 : // many                          5; // other                    // Breton                  case "br":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5; // other                    // Czech                  case "cs":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Welsh                  case "cy":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5;                    // Manx                  case "gv":                      return (n' c) =>                          (n % 10).Between(1' 2) || (n % 20) == 0 ? 0 :  // one                          1;                    // Langi                  case "lag":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n > 0) && (n < 2) ? 1 : // one                          2;                    // Lithuanian                  case "lt":                      return (n' c) =>                          (n % 10) == 1 && !(n % 100).Between(11' 19) ? 0 : // one                          (n % 10).Between(2' 9) && !(n % 100).Between(11' 19) ? 1 : // few                          2;                    // Latvian                  case "lv":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n % 10) == 1 && (n % 100) != 11 ? 1 :                          2;                    // Macedonian                  case "mb":                      return (n' c) =>                          (n % 10) == 1 && n != 11 ? 0 : // one                          1;                    // Moldavian                  case "mo":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n != 1 && (n % 100).Between(1' 19)) ? 1 : // few                          2;                    // Maltese                  case "mt":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(2' 10) ? 1 : // few                          (n % 100).Between(11' 19) ? 2 : // many                          3;                    // Polish                  case "pl":                      return (n' c) =>                          n == 1 ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          (n % 10).Between(0' 1) || (n % 10).Between(5' 9) || (n % 100).Between(12' 14) ? 2 : // many                          3;                    // Romanian                  case "ro":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(1' 19) ? 1 : // few                          2;                    // Tachelhit                  case "shi":                      return (n' c) =>                          (n >= 0 && n <= 1) ? 0 : // one                          n.Between(2' 10) ? 1 : // few                          2;                    // Slovak                  case "sk":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Slovenian                  case "sl":                      return (n' c) =>                          (n % 100) == 1 ? 0 : // one                          (n % 100) == 2 ? 1 : // two                          (n % 100).Between(3' 4) ? 2 : // few                          3;                    // Central Morocco Tamazight                  case "tzm":                      return (n' c) =>                          n.Between(0' 1) || n.Between(11' 99) ? 0 : // one                          1;                      // Unknown language                  default:                      return null;              }
Magic Number,SmartFormat.Extensions,CommonLanguageRules,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\PluralLocalizationFormatter.cs,GetPluralRule,The following statement contains a magic number: switch (twoLetterISOLanguageName)              {                  // Singular                  case "az": // Azerbaijani                  case "bm": // Bambara                  case "bo": // Tibetan                  case "dz": // Dzongkha                  case "fa": // Persian                  case "hu": // Hungarian                  case "id": // Indonesian                  case "ig": // Igbo                  case "ii": // Sichuan Yi                  case "ja": // Japanese                  case "jv": // Javanese                  case "ka": // Georgian                  case "kde": // Makonde                  case "kea": // Kabuverdianu                  case "km": // Khmer                  case "kn": // Kannada                  case "ko": // Korean                  case "ms": // Malay                  case "my": // Burmese                  case "root": // Root (?)                  case "sah": // Sakha                  case "ses": // Koyraboro Senni                  case "sg": // Sango                  case "th": // Thai                  case "to": // Tonga                  case "vi": // Vietnamese                  case "wo": // Wolof                  case "yo": // Yoruba                  case "zh": // Chinese                      return (n' c) => 0;                    // Dual: one (n == 1)' other                  case "af": // Afrikaans                  case "bem": // Bembda                  case "bg": // Bulgarian                  case "bn": // Bengali                  case "brx": // Bodo                  case "ca": // Catalan                  case "cgg": // Chiga                  case "chr": // Cherokee                  case "da": // Danish                  case "de": // German                  case "dv": // Divehi                  case "ee": // Ewe                  case "el": // Greek                  case "en": // English                  case "eo": // Esperanto                  case "es": // Spanish                  case "et": // Estonian                  case "eu": // Basque                  case "fi": // Finnish                  case "fo": // Faroese                  case "fur": // Friulian                  case "fy": // Western Frisian                  case "gl": // Galician                  case "gsw": // Swiss German                  case "gu": // Gujarati                  case "ha": // Hausa                  case "haw": // Hawaiian                  case "he": // Hebrew                  case "is": // Icelandic                  case "it": // Italian                  case "kk": // Kazakh                  case "kl": // Kalaallisut                  case "ku": // Kurdish                  case "lb": // Luxembourgish                  case "lg": // Ganda                  case "lo": // Lao                  case "mas": // Masai                  case "ml": // Malayalam                  case "mn": // Mongolian                  case "mr": // Marathi                  case "nah": // Nahuatl                  case "nb": // Norwegian Bokmål                  case "ne": // Nepali                  case "nl": // Dutch                  case "nn": // Norwegian Nynorsk                  case "no": // Norwegian                  case "nyn": // Nyankole                  case "om": // Oromo                  case "or": // Oriya                  case "pa": // Punjabi                  case "pap": // Papiamento                  case "ps": // Pashto                  case "pt": // Portuguese                  case "rm": // Romansh                  case "saq": // Samburu                  case "so": // Somali                  case "sq": // Albanian                  case "ssy": // Saho                  case "sw": // Swahili                  case "sv": // Swedish                  case "syr": // Syriac                  case "ta": // Tamil                  case "te": // Telugu                  case "tk": // Turkmen                  case "tr": // Turkish                  case "ur": // Urdu                  case "wae": // Walser                  case "xog": // Soga                  case "zu": // Zulu                      return (n' c) =>                      {                          if (c == 2) return (n == 1) ? 0 : 1;                          if (c == 3) return (n == 0) ? 0 : (n == 1) ? 1 : 2;                          if (c == 4) return (n < 0) ? 0 : (n == 0) ? 1 : (n == 1) ? 2 : 3;                          return -1;                      };                    // DualWithZero: one (n == 0..1)' other                  case "ak": // Akan                  case "am": // Amharic                  case "bh": // Bihari                  case "fil": // Filipino                  case "guw": // Gun                  case "hi": // Hindi                  case "ln": // Lingala                  case "mg": // Malagasy                  case "nso": // Northern Sotho                  case "ti": // Tigrinya                  case "tl": // Tagalog                  case "wa": // Walloon                      return (n' c) => (n == 0 || n == 1) ? 0 : 1;                    // DualFromZeroToTwo: one (n == 0..2 fractionate and n != 2)' other                  case "ff": // Fulah                  case "fr": // French                  case "kab": // Kabyle                      return (n' c) => (n >= 0 && n < 2) ? 0 : 1;                    // Triple: one (n == 1)' two (n == 2)' other                  case "ga": // Irish                  case "iu": // Inuktitut                  case "ksh": // Colognian                  case "kw": // Cornish                  case "se": // Northern Sami                  case "sma": // Southern Sami                  case "smi": // Sami language                  case "smj": // Lule Sami                  case "smn": // Inari Sami                  case "sms": // Skolt Sami                      return (n' c) => (n == 1) ? 0 : (n == 2) ? 1 : 2;                    // Russian & Serbo-Croatian                  case "be": // Belarusian                  case "bs": // Bosnian                  case "hr": // Croatian                  case "ru": // Russian                  case "sh": // Serbo-Croatian                  case "sr": // Serbian                  case "uk": // Ukrainian                      return (n' c) =>                          (n % 10 == 1) && !(n % 100 == 11) ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          2;                    // Unique:                    // Arabic                  case "ar":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          (n % 100).Between(3' 10) ? 3 : // few                          (n % 100).Between(11' 99) ? 4 : // many                          5; // other                    // Breton                  case "br":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5; // other                    // Czech                  case "cs":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Welsh                  case "cy":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5;                    // Manx                  case "gv":                      return (n' c) =>                          (n % 10).Between(1' 2) || (n % 20) == 0 ? 0 :  // one                          1;                    // Langi                  case "lag":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n > 0) && (n < 2) ? 1 : // one                          2;                    // Lithuanian                  case "lt":                      return (n' c) =>                          (n % 10) == 1 && !(n % 100).Between(11' 19) ? 0 : // one                          (n % 10).Between(2' 9) && !(n % 100).Between(11' 19) ? 1 : // few                          2;                    // Latvian                  case "lv":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n % 10) == 1 && (n % 100) != 11 ? 1 :                          2;                    // Macedonian                  case "mb":                      return (n' c) =>                          (n % 10) == 1 && n != 11 ? 0 : // one                          1;                    // Moldavian                  case "mo":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n != 1 && (n % 100).Between(1' 19)) ? 1 : // few                          2;                    // Maltese                  case "mt":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(2' 10) ? 1 : // few                          (n % 100).Between(11' 19) ? 2 : // many                          3;                    // Polish                  case "pl":                      return (n' c) =>                          n == 1 ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          (n % 10).Between(0' 1) || (n % 10).Between(5' 9) || (n % 100).Between(12' 14) ? 2 : // many                          3;                    // Romanian                  case "ro":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(1' 19) ? 1 : // few                          2;                    // Tachelhit                  case "shi":                      return (n' c) =>                          (n >= 0 && n <= 1) ? 0 : // one                          n.Between(2' 10) ? 1 : // few                          2;                    // Slovak                  case "sk":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Slovenian                  case "sl":                      return (n' c) =>                          (n % 100) == 1 ? 0 : // one                          (n % 100) == 2 ? 1 : // two                          (n % 100).Between(3' 4) ? 2 : // few                          3;                    // Central Morocco Tamazight                  case "tzm":                      return (n' c) =>                          n.Between(0' 1) || n.Between(11' 99) ? 0 : // one                          1;                      // Unknown language                  default:                      return null;              }
Magic Number,SmartFormat.Extensions,CommonLanguageRules,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\PluralLocalizationFormatter.cs,GetPluralRule,The following statement contains a magic number: switch (twoLetterISOLanguageName)              {                  // Singular                  case "az": // Azerbaijani                  case "bm": // Bambara                  case "bo": // Tibetan                  case "dz": // Dzongkha                  case "fa": // Persian                  case "hu": // Hungarian                  case "id": // Indonesian                  case "ig": // Igbo                  case "ii": // Sichuan Yi                  case "ja": // Japanese                  case "jv": // Javanese                  case "ka": // Georgian                  case "kde": // Makonde                  case "kea": // Kabuverdianu                  case "km": // Khmer                  case "kn": // Kannada                  case "ko": // Korean                  case "ms": // Malay                  case "my": // Burmese                  case "root": // Root (?)                  case "sah": // Sakha                  case "ses": // Koyraboro Senni                  case "sg": // Sango                  case "th": // Thai                  case "to": // Tonga                  case "vi": // Vietnamese                  case "wo": // Wolof                  case "yo": // Yoruba                  case "zh": // Chinese                      return (n' c) => 0;                    // Dual: one (n == 1)' other                  case "af": // Afrikaans                  case "bem": // Bembda                  case "bg": // Bulgarian                  case "bn": // Bengali                  case "brx": // Bodo                  case "ca": // Catalan                  case "cgg": // Chiga                  case "chr": // Cherokee                  case "da": // Danish                  case "de": // German                  case "dv": // Divehi                  case "ee": // Ewe                  case "el": // Greek                  case "en": // English                  case "eo": // Esperanto                  case "es": // Spanish                  case "et": // Estonian                  case "eu": // Basque                  case "fi": // Finnish                  case "fo": // Faroese                  case "fur": // Friulian                  case "fy": // Western Frisian                  case "gl": // Galician                  case "gsw": // Swiss German                  case "gu": // Gujarati                  case "ha": // Hausa                  case "haw": // Hawaiian                  case "he": // Hebrew                  case "is": // Icelandic                  case "it": // Italian                  case "kk": // Kazakh                  case "kl": // Kalaallisut                  case "ku": // Kurdish                  case "lb": // Luxembourgish                  case "lg": // Ganda                  case "lo": // Lao                  case "mas": // Masai                  case "ml": // Malayalam                  case "mn": // Mongolian                  case "mr": // Marathi                  case "nah": // Nahuatl                  case "nb": // Norwegian Bokmål                  case "ne": // Nepali                  case "nl": // Dutch                  case "nn": // Norwegian Nynorsk                  case "no": // Norwegian                  case "nyn": // Nyankole                  case "om": // Oromo                  case "or": // Oriya                  case "pa": // Punjabi                  case "pap": // Papiamento                  case "ps": // Pashto                  case "pt": // Portuguese                  case "rm": // Romansh                  case "saq": // Samburu                  case "so": // Somali                  case "sq": // Albanian                  case "ssy": // Saho                  case "sw": // Swahili                  case "sv": // Swedish                  case "syr": // Syriac                  case "ta": // Tamil                  case "te": // Telugu                  case "tk": // Turkmen                  case "tr": // Turkish                  case "ur": // Urdu                  case "wae": // Walser                  case "xog": // Soga                  case "zu": // Zulu                      return (n' c) =>                      {                          if (c == 2) return (n == 1) ? 0 : 1;                          if (c == 3) return (n == 0) ? 0 : (n == 1) ? 1 : 2;                          if (c == 4) return (n < 0) ? 0 : (n == 0) ? 1 : (n == 1) ? 2 : 3;                          return -1;                      };                    // DualWithZero: one (n == 0..1)' other                  case "ak": // Akan                  case "am": // Amharic                  case "bh": // Bihari                  case "fil": // Filipino                  case "guw": // Gun                  case "hi": // Hindi                  case "ln": // Lingala                  case "mg": // Malagasy                  case "nso": // Northern Sotho                  case "ti": // Tigrinya                  case "tl": // Tagalog                  case "wa": // Walloon                      return (n' c) => (n == 0 || n == 1) ? 0 : 1;                    // DualFromZeroToTwo: one (n == 0..2 fractionate and n != 2)' other                  case "ff": // Fulah                  case "fr": // French                  case "kab": // Kabyle                      return (n' c) => (n >= 0 && n < 2) ? 0 : 1;                    // Triple: one (n == 1)' two (n == 2)' other                  case "ga": // Irish                  case "iu": // Inuktitut                  case "ksh": // Colognian                  case "kw": // Cornish                  case "se": // Northern Sami                  case "sma": // Southern Sami                  case "smi": // Sami language                  case "smj": // Lule Sami                  case "smn": // Inari Sami                  case "sms": // Skolt Sami                      return (n' c) => (n == 1) ? 0 : (n == 2) ? 1 : 2;                    // Russian & Serbo-Croatian                  case "be": // Belarusian                  case "bs": // Bosnian                  case "hr": // Croatian                  case "ru": // Russian                  case "sh": // Serbo-Croatian                  case "sr": // Serbian                  case "uk": // Ukrainian                      return (n' c) =>                          (n % 10 == 1) && !(n % 100 == 11) ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          2;                    // Unique:                    // Arabic                  case "ar":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          (n % 100).Between(3' 10) ? 3 : // few                          (n % 100).Between(11' 99) ? 4 : // many                          5; // other                    // Breton                  case "br":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5; // other                    // Czech                  case "cs":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Welsh                  case "cy":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5;                    // Manx                  case "gv":                      return (n' c) =>                          (n % 10).Between(1' 2) || (n % 20) == 0 ? 0 :  // one                          1;                    // Langi                  case "lag":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n > 0) && (n < 2) ? 1 : // one                          2;                    // Lithuanian                  case "lt":                      return (n' c) =>                          (n % 10) == 1 && !(n % 100).Between(11' 19) ? 0 : // one                          (n % 10).Between(2' 9) && !(n % 100).Between(11' 19) ? 1 : // few                          2;                    // Latvian                  case "lv":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n % 10) == 1 && (n % 100) != 11 ? 1 :                          2;                    // Macedonian                  case "mb":                      return (n' c) =>                          (n % 10) == 1 && n != 11 ? 0 : // one                          1;                    // Moldavian                  case "mo":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n != 1 && (n % 100).Between(1' 19)) ? 1 : // few                          2;                    // Maltese                  case "mt":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(2' 10) ? 1 : // few                          (n % 100).Between(11' 19) ? 2 : // many                          3;                    // Polish                  case "pl":                      return (n' c) =>                          n == 1 ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          (n % 10).Between(0' 1) || (n % 10).Between(5' 9) || (n % 100).Between(12' 14) ? 2 : // many                          3;                    // Romanian                  case "ro":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(1' 19) ? 1 : // few                          2;                    // Tachelhit                  case "shi":                      return (n' c) =>                          (n >= 0 && n <= 1) ? 0 : // one                          n.Between(2' 10) ? 1 : // few                          2;                    // Slovak                  case "sk":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Slovenian                  case "sl":                      return (n' c) =>                          (n % 100) == 1 ? 0 : // one                          (n % 100) == 2 ? 1 : // two                          (n % 100).Between(3' 4) ? 2 : // few                          3;                    // Central Morocco Tamazight                  case "tzm":                      return (n' c) =>                          n.Between(0' 1) || n.Between(11' 99) ? 0 : // one                          1;                      // Unknown language                  default:                      return null;              }
Magic Number,SmartFormat.Extensions,CommonLanguageRules,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\PluralLocalizationFormatter.cs,GetPluralRule,The following statement contains a magic number: switch (twoLetterISOLanguageName)              {                  // Singular                  case "az": // Azerbaijani                  case "bm": // Bambara                  case "bo": // Tibetan                  case "dz": // Dzongkha                  case "fa": // Persian                  case "hu": // Hungarian                  case "id": // Indonesian                  case "ig": // Igbo                  case "ii": // Sichuan Yi                  case "ja": // Japanese                  case "jv": // Javanese                  case "ka": // Georgian                  case "kde": // Makonde                  case "kea": // Kabuverdianu                  case "km": // Khmer                  case "kn": // Kannada                  case "ko": // Korean                  case "ms": // Malay                  case "my": // Burmese                  case "root": // Root (?)                  case "sah": // Sakha                  case "ses": // Koyraboro Senni                  case "sg": // Sango                  case "th": // Thai                  case "to": // Tonga                  case "vi": // Vietnamese                  case "wo": // Wolof                  case "yo": // Yoruba                  case "zh": // Chinese                      return (n' c) => 0;                    // Dual: one (n == 1)' other                  case "af": // Afrikaans                  case "bem": // Bembda                  case "bg": // Bulgarian                  case "bn": // Bengali                  case "brx": // Bodo                  case "ca": // Catalan                  case "cgg": // Chiga                  case "chr": // Cherokee                  case "da": // Danish                  case "de": // German                  case "dv": // Divehi                  case "ee": // Ewe                  case "el": // Greek                  case "en": // English                  case "eo": // Esperanto                  case "es": // Spanish                  case "et": // Estonian                  case "eu": // Basque                  case "fi": // Finnish                  case "fo": // Faroese                  case "fur": // Friulian                  case "fy": // Western Frisian                  case "gl": // Galician                  case "gsw": // Swiss German                  case "gu": // Gujarati                  case "ha": // Hausa                  case "haw": // Hawaiian                  case "he": // Hebrew                  case "is": // Icelandic                  case "it": // Italian                  case "kk": // Kazakh                  case "kl": // Kalaallisut                  case "ku": // Kurdish                  case "lb": // Luxembourgish                  case "lg": // Ganda                  case "lo": // Lao                  case "mas": // Masai                  case "ml": // Malayalam                  case "mn": // Mongolian                  case "mr": // Marathi                  case "nah": // Nahuatl                  case "nb": // Norwegian Bokmål                  case "ne": // Nepali                  case "nl": // Dutch                  case "nn": // Norwegian Nynorsk                  case "no": // Norwegian                  case "nyn": // Nyankole                  case "om": // Oromo                  case "or": // Oriya                  case "pa": // Punjabi                  case "pap": // Papiamento                  case "ps": // Pashto                  case "pt": // Portuguese                  case "rm": // Romansh                  case "saq": // Samburu                  case "so": // Somali                  case "sq": // Albanian                  case "ssy": // Saho                  case "sw": // Swahili                  case "sv": // Swedish                  case "syr": // Syriac                  case "ta": // Tamil                  case "te": // Telugu                  case "tk": // Turkmen                  case "tr": // Turkish                  case "ur": // Urdu                  case "wae": // Walser                  case "xog": // Soga                  case "zu": // Zulu                      return (n' c) =>                      {                          if (c == 2) return (n == 1) ? 0 : 1;                          if (c == 3) return (n == 0) ? 0 : (n == 1) ? 1 : 2;                          if (c == 4) return (n < 0) ? 0 : (n == 0) ? 1 : (n == 1) ? 2 : 3;                          return -1;                      };                    // DualWithZero: one (n == 0..1)' other                  case "ak": // Akan                  case "am": // Amharic                  case "bh": // Bihari                  case "fil": // Filipino                  case "guw": // Gun                  case "hi": // Hindi                  case "ln": // Lingala                  case "mg": // Malagasy                  case "nso": // Northern Sotho                  case "ti": // Tigrinya                  case "tl": // Tagalog                  case "wa": // Walloon                      return (n' c) => (n == 0 || n == 1) ? 0 : 1;                    // DualFromZeroToTwo: one (n == 0..2 fractionate and n != 2)' other                  case "ff": // Fulah                  case "fr": // French                  case "kab": // Kabyle                      return (n' c) => (n >= 0 && n < 2) ? 0 : 1;                    // Triple: one (n == 1)' two (n == 2)' other                  case "ga": // Irish                  case "iu": // Inuktitut                  case "ksh": // Colognian                  case "kw": // Cornish                  case "se": // Northern Sami                  case "sma": // Southern Sami                  case "smi": // Sami language                  case "smj": // Lule Sami                  case "smn": // Inari Sami                  case "sms": // Skolt Sami                      return (n' c) => (n == 1) ? 0 : (n == 2) ? 1 : 2;                    // Russian & Serbo-Croatian                  case "be": // Belarusian                  case "bs": // Bosnian                  case "hr": // Croatian                  case "ru": // Russian                  case "sh": // Serbo-Croatian                  case "sr": // Serbian                  case "uk": // Ukrainian                      return (n' c) =>                          (n % 10 == 1) && !(n % 100 == 11) ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          2;                    // Unique:                    // Arabic                  case "ar":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          (n % 100).Between(3' 10) ? 3 : // few                          (n % 100).Between(11' 99) ? 4 : // many                          5; // other                    // Breton                  case "br":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5; // other                    // Czech                  case "cs":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Welsh                  case "cy":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5;                    // Manx                  case "gv":                      return (n' c) =>                          (n % 10).Between(1' 2) || (n % 20) == 0 ? 0 :  // one                          1;                    // Langi                  case "lag":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n > 0) && (n < 2) ? 1 : // one                          2;                    // Lithuanian                  case "lt":                      return (n' c) =>                          (n % 10) == 1 && !(n % 100).Between(11' 19) ? 0 : // one                          (n % 10).Between(2' 9) && !(n % 100).Between(11' 19) ? 1 : // few                          2;                    // Latvian                  case "lv":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n % 10) == 1 && (n % 100) != 11 ? 1 :                          2;                    // Macedonian                  case "mb":                      return (n' c) =>                          (n % 10) == 1 && n != 11 ? 0 : // one                          1;                    // Moldavian                  case "mo":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n != 1 && (n % 100).Between(1' 19)) ? 1 : // few                          2;                    // Maltese                  case "mt":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(2' 10) ? 1 : // few                          (n % 100).Between(11' 19) ? 2 : // many                          3;                    // Polish                  case "pl":                      return (n' c) =>                          n == 1 ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          (n % 10).Between(0' 1) || (n % 10).Between(5' 9) || (n % 100).Between(12' 14) ? 2 : // many                          3;                    // Romanian                  case "ro":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(1' 19) ? 1 : // few                          2;                    // Tachelhit                  case "shi":                      return (n' c) =>                          (n >= 0 && n <= 1) ? 0 : // one                          n.Between(2' 10) ? 1 : // few                          2;                    // Slovak                  case "sk":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Slovenian                  case "sl":                      return (n' c) =>                          (n % 100) == 1 ? 0 : // one                          (n % 100) == 2 ? 1 : // two                          (n % 100).Between(3' 4) ? 2 : // few                          3;                    // Central Morocco Tamazight                  case "tzm":                      return (n' c) =>                          n.Between(0' 1) || n.Between(11' 99) ? 0 : // one                          1;                      // Unknown language                  default:                      return null;              }
Magic Number,SmartFormat.Extensions,CommonLanguageRules,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\PluralLocalizationFormatter.cs,GetPluralRule,The following statement contains a magic number: switch (twoLetterISOLanguageName)              {                  // Singular                  case "az": // Azerbaijani                  case "bm": // Bambara                  case "bo": // Tibetan                  case "dz": // Dzongkha                  case "fa": // Persian                  case "hu": // Hungarian                  case "id": // Indonesian                  case "ig": // Igbo                  case "ii": // Sichuan Yi                  case "ja": // Japanese                  case "jv": // Javanese                  case "ka": // Georgian                  case "kde": // Makonde                  case "kea": // Kabuverdianu                  case "km": // Khmer                  case "kn": // Kannada                  case "ko": // Korean                  case "ms": // Malay                  case "my": // Burmese                  case "root": // Root (?)                  case "sah": // Sakha                  case "ses": // Koyraboro Senni                  case "sg": // Sango                  case "th": // Thai                  case "to": // Tonga                  case "vi": // Vietnamese                  case "wo": // Wolof                  case "yo": // Yoruba                  case "zh": // Chinese                      return (n' c) => 0;                    // Dual: one (n == 1)' other                  case "af": // Afrikaans                  case "bem": // Bembda                  case "bg": // Bulgarian                  case "bn": // Bengali                  case "brx": // Bodo                  case "ca": // Catalan                  case "cgg": // Chiga                  case "chr": // Cherokee                  case "da": // Danish                  case "de": // German                  case "dv": // Divehi                  case "ee": // Ewe                  case "el": // Greek                  case "en": // English                  case "eo": // Esperanto                  case "es": // Spanish                  case "et": // Estonian                  case "eu": // Basque                  case "fi": // Finnish                  case "fo": // Faroese                  case "fur": // Friulian                  case "fy": // Western Frisian                  case "gl": // Galician                  case "gsw": // Swiss German                  case "gu": // Gujarati                  case "ha": // Hausa                  case "haw": // Hawaiian                  case "he": // Hebrew                  case "is": // Icelandic                  case "it": // Italian                  case "kk": // Kazakh                  case "kl": // Kalaallisut                  case "ku": // Kurdish                  case "lb": // Luxembourgish                  case "lg": // Ganda                  case "lo": // Lao                  case "mas": // Masai                  case "ml": // Malayalam                  case "mn": // Mongolian                  case "mr": // Marathi                  case "nah": // Nahuatl                  case "nb": // Norwegian Bokmål                  case "ne": // Nepali                  case "nl": // Dutch                  case "nn": // Norwegian Nynorsk                  case "no": // Norwegian                  case "nyn": // Nyankole                  case "om": // Oromo                  case "or": // Oriya                  case "pa": // Punjabi                  case "pap": // Papiamento                  case "ps": // Pashto                  case "pt": // Portuguese                  case "rm": // Romansh                  case "saq": // Samburu                  case "so": // Somali                  case "sq": // Albanian                  case "ssy": // Saho                  case "sw": // Swahili                  case "sv": // Swedish                  case "syr": // Syriac                  case "ta": // Tamil                  case "te": // Telugu                  case "tk": // Turkmen                  case "tr": // Turkish                  case "ur": // Urdu                  case "wae": // Walser                  case "xog": // Soga                  case "zu": // Zulu                      return (n' c) =>                      {                          if (c == 2) return (n == 1) ? 0 : 1;                          if (c == 3) return (n == 0) ? 0 : (n == 1) ? 1 : 2;                          if (c == 4) return (n < 0) ? 0 : (n == 0) ? 1 : (n == 1) ? 2 : 3;                          return -1;                      };                    // DualWithZero: one (n == 0..1)' other                  case "ak": // Akan                  case "am": // Amharic                  case "bh": // Bihari                  case "fil": // Filipino                  case "guw": // Gun                  case "hi": // Hindi                  case "ln": // Lingala                  case "mg": // Malagasy                  case "nso": // Northern Sotho                  case "ti": // Tigrinya                  case "tl": // Tagalog                  case "wa": // Walloon                      return (n' c) => (n == 0 || n == 1) ? 0 : 1;                    // DualFromZeroToTwo: one (n == 0..2 fractionate and n != 2)' other                  case "ff": // Fulah                  case "fr": // French                  case "kab": // Kabyle                      return (n' c) => (n >= 0 && n < 2) ? 0 : 1;                    // Triple: one (n == 1)' two (n == 2)' other                  case "ga": // Irish                  case "iu": // Inuktitut                  case "ksh": // Colognian                  case "kw": // Cornish                  case "se": // Northern Sami                  case "sma": // Southern Sami                  case "smi": // Sami language                  case "smj": // Lule Sami                  case "smn": // Inari Sami                  case "sms": // Skolt Sami                      return (n' c) => (n == 1) ? 0 : (n == 2) ? 1 : 2;                    // Russian & Serbo-Croatian                  case "be": // Belarusian                  case "bs": // Bosnian                  case "hr": // Croatian                  case "ru": // Russian                  case "sh": // Serbo-Croatian                  case "sr": // Serbian                  case "uk": // Ukrainian                      return (n' c) =>                          (n % 10 == 1) && !(n % 100 == 11) ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          2;                    // Unique:                    // Arabic                  case "ar":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          (n % 100).Between(3' 10) ? 3 : // few                          (n % 100).Between(11' 99) ? 4 : // many                          5; // other                    // Breton                  case "br":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5; // other                    // Czech                  case "cs":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Welsh                  case "cy":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5;                    // Manx                  case "gv":                      return (n' c) =>                          (n % 10).Between(1' 2) || (n % 20) == 0 ? 0 :  // one                          1;                    // Langi                  case "lag":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n > 0) && (n < 2) ? 1 : // one                          2;                    // Lithuanian                  case "lt":                      return (n' c) =>                          (n % 10) == 1 && !(n % 100).Between(11' 19) ? 0 : // one                          (n % 10).Between(2' 9) && !(n % 100).Between(11' 19) ? 1 : // few                          2;                    // Latvian                  case "lv":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n % 10) == 1 && (n % 100) != 11 ? 1 :                          2;                    // Macedonian                  case "mb":                      return (n' c) =>                          (n % 10) == 1 && n != 11 ? 0 : // one                          1;                    // Moldavian                  case "mo":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n != 1 && (n % 100).Between(1' 19)) ? 1 : // few                          2;                    // Maltese                  case "mt":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(2' 10) ? 1 : // few                          (n % 100).Between(11' 19) ? 2 : // many                          3;                    // Polish                  case "pl":                      return (n' c) =>                          n == 1 ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          (n % 10).Between(0' 1) || (n % 10).Between(5' 9) || (n % 100).Between(12' 14) ? 2 : // many                          3;                    // Romanian                  case "ro":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(1' 19) ? 1 : // few                          2;                    // Tachelhit                  case "shi":                      return (n' c) =>                          (n >= 0 && n <= 1) ? 0 : // one                          n.Between(2' 10) ? 1 : // few                          2;                    // Slovak                  case "sk":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Slovenian                  case "sl":                      return (n' c) =>                          (n % 100) == 1 ? 0 : // one                          (n % 100) == 2 ? 1 : // two                          (n % 100).Between(3' 4) ? 2 : // few                          3;                    // Central Morocco Tamazight                  case "tzm":                      return (n' c) =>                          n.Between(0' 1) || n.Between(11' 99) ? 0 : // one                          1;                      // Unknown language                  default:                      return null;              }
Magic Number,SmartFormat.Extensions,CommonLanguageRules,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\PluralLocalizationFormatter.cs,GetPluralRule,The following statement contains a magic number: switch (twoLetterISOLanguageName)              {                  // Singular                  case "az": // Azerbaijani                  case "bm": // Bambara                  case "bo": // Tibetan                  case "dz": // Dzongkha                  case "fa": // Persian                  case "hu": // Hungarian                  case "id": // Indonesian                  case "ig": // Igbo                  case "ii": // Sichuan Yi                  case "ja": // Japanese                  case "jv": // Javanese                  case "ka": // Georgian                  case "kde": // Makonde                  case "kea": // Kabuverdianu                  case "km": // Khmer                  case "kn": // Kannada                  case "ko": // Korean                  case "ms": // Malay                  case "my": // Burmese                  case "root": // Root (?)                  case "sah": // Sakha                  case "ses": // Koyraboro Senni                  case "sg": // Sango                  case "th": // Thai                  case "to": // Tonga                  case "vi": // Vietnamese                  case "wo": // Wolof                  case "yo": // Yoruba                  case "zh": // Chinese                      return (n' c) => 0;                    // Dual: one (n == 1)' other                  case "af": // Afrikaans                  case "bem": // Bembda                  case "bg": // Bulgarian                  case "bn": // Bengali                  case "brx": // Bodo                  case "ca": // Catalan                  case "cgg": // Chiga                  case "chr": // Cherokee                  case "da": // Danish                  case "de": // German                  case "dv": // Divehi                  case "ee": // Ewe                  case "el": // Greek                  case "en": // English                  case "eo": // Esperanto                  case "es": // Spanish                  case "et": // Estonian                  case "eu": // Basque                  case "fi": // Finnish                  case "fo": // Faroese                  case "fur": // Friulian                  case "fy": // Western Frisian                  case "gl": // Galician                  case "gsw": // Swiss German                  case "gu": // Gujarati                  case "ha": // Hausa                  case "haw": // Hawaiian                  case "he": // Hebrew                  case "is": // Icelandic                  case "it": // Italian                  case "kk": // Kazakh                  case "kl": // Kalaallisut                  case "ku": // Kurdish                  case "lb": // Luxembourgish                  case "lg": // Ganda                  case "lo": // Lao                  case "mas": // Masai                  case "ml": // Malayalam                  case "mn": // Mongolian                  case "mr": // Marathi                  case "nah": // Nahuatl                  case "nb": // Norwegian Bokmål                  case "ne": // Nepali                  case "nl": // Dutch                  case "nn": // Norwegian Nynorsk                  case "no": // Norwegian                  case "nyn": // Nyankole                  case "om": // Oromo                  case "or": // Oriya                  case "pa": // Punjabi                  case "pap": // Papiamento                  case "ps": // Pashto                  case "pt": // Portuguese                  case "rm": // Romansh                  case "saq": // Samburu                  case "so": // Somali                  case "sq": // Albanian                  case "ssy": // Saho                  case "sw": // Swahili                  case "sv": // Swedish                  case "syr": // Syriac                  case "ta": // Tamil                  case "te": // Telugu                  case "tk": // Turkmen                  case "tr": // Turkish                  case "ur": // Urdu                  case "wae": // Walser                  case "xog": // Soga                  case "zu": // Zulu                      return (n' c) =>                      {                          if (c == 2) return (n == 1) ? 0 : 1;                          if (c == 3) return (n == 0) ? 0 : (n == 1) ? 1 : 2;                          if (c == 4) return (n < 0) ? 0 : (n == 0) ? 1 : (n == 1) ? 2 : 3;                          return -1;                      };                    // DualWithZero: one (n == 0..1)' other                  case "ak": // Akan                  case "am": // Amharic                  case "bh": // Bihari                  case "fil": // Filipino                  case "guw": // Gun                  case "hi": // Hindi                  case "ln": // Lingala                  case "mg": // Malagasy                  case "nso": // Northern Sotho                  case "ti": // Tigrinya                  case "tl": // Tagalog                  case "wa": // Walloon                      return (n' c) => (n == 0 || n == 1) ? 0 : 1;                    // DualFromZeroToTwo: one (n == 0..2 fractionate and n != 2)' other                  case "ff": // Fulah                  case "fr": // French                  case "kab": // Kabyle                      return (n' c) => (n >= 0 && n < 2) ? 0 : 1;                    // Triple: one (n == 1)' two (n == 2)' other                  case "ga": // Irish                  case "iu": // Inuktitut                  case "ksh": // Colognian                  case "kw": // Cornish                  case "se": // Northern Sami                  case "sma": // Southern Sami                  case "smi": // Sami language                  case "smj": // Lule Sami                  case "smn": // Inari Sami                  case "sms": // Skolt Sami                      return (n' c) => (n == 1) ? 0 : (n == 2) ? 1 : 2;                    // Russian & Serbo-Croatian                  case "be": // Belarusian                  case "bs": // Bosnian                  case "hr": // Croatian                  case "ru": // Russian                  case "sh": // Serbo-Croatian                  case "sr": // Serbian                  case "uk": // Ukrainian                      return (n' c) =>                          (n % 10 == 1) && !(n % 100 == 11) ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          2;                    // Unique:                    // Arabic                  case "ar":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          (n % 100).Between(3' 10) ? 3 : // few                          (n % 100).Between(11' 99) ? 4 : // many                          5; // other                    // Breton                  case "br":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5; // other                    // Czech                  case "cs":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Welsh                  case "cy":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5;                    // Manx                  case "gv":                      return (n' c) =>                          (n % 10).Between(1' 2) || (n % 20) == 0 ? 0 :  // one                          1;                    // Langi                  case "lag":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n > 0) && (n < 2) ? 1 : // one                          2;                    // Lithuanian                  case "lt":                      return (n' c) =>                          (n % 10) == 1 && !(n % 100).Between(11' 19) ? 0 : // one                          (n % 10).Between(2' 9) && !(n % 100).Between(11' 19) ? 1 : // few                          2;                    // Latvian                  case "lv":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n % 10) == 1 && (n % 100) != 11 ? 1 :                          2;                    // Macedonian                  case "mb":                      return (n' c) =>                          (n % 10) == 1 && n != 11 ? 0 : // one                          1;                    // Moldavian                  case "mo":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n != 1 && (n % 100).Between(1' 19)) ? 1 : // few                          2;                    // Maltese                  case "mt":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(2' 10) ? 1 : // few                          (n % 100).Between(11' 19) ? 2 : // many                          3;                    // Polish                  case "pl":                      return (n' c) =>                          n == 1 ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          (n % 10).Between(0' 1) || (n % 10).Between(5' 9) || (n % 100).Between(12' 14) ? 2 : // many                          3;                    // Romanian                  case "ro":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(1' 19) ? 1 : // few                          2;                    // Tachelhit                  case "shi":                      return (n' c) =>                          (n >= 0 && n <= 1) ? 0 : // one                          n.Between(2' 10) ? 1 : // few                          2;                    // Slovak                  case "sk":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Slovenian                  case "sl":                      return (n' c) =>                          (n % 100) == 1 ? 0 : // one                          (n % 100) == 2 ? 1 : // two                          (n % 100).Between(3' 4) ? 2 : // few                          3;                    // Central Morocco Tamazight                  case "tzm":                      return (n' c) =>                          n.Between(0' 1) || n.Between(11' 99) ? 0 : // one                          1;                      // Unknown language                  default:                      return null;              }
Magic Number,SmartFormat.Extensions,CommonLanguageRules,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\PluralLocalizationFormatter.cs,GetPluralRule,The following statement contains a magic number: switch (twoLetterISOLanguageName)              {                  // Singular                  case "az": // Azerbaijani                  case "bm": // Bambara                  case "bo": // Tibetan                  case "dz": // Dzongkha                  case "fa": // Persian                  case "hu": // Hungarian                  case "id": // Indonesian                  case "ig": // Igbo                  case "ii": // Sichuan Yi                  case "ja": // Japanese                  case "jv": // Javanese                  case "ka": // Georgian                  case "kde": // Makonde                  case "kea": // Kabuverdianu                  case "km": // Khmer                  case "kn": // Kannada                  case "ko": // Korean                  case "ms": // Malay                  case "my": // Burmese                  case "root": // Root (?)                  case "sah": // Sakha                  case "ses": // Koyraboro Senni                  case "sg": // Sango                  case "th": // Thai                  case "to": // Tonga                  case "vi": // Vietnamese                  case "wo": // Wolof                  case "yo": // Yoruba                  case "zh": // Chinese                      return (n' c) => 0;                    // Dual: one (n == 1)' other                  case "af": // Afrikaans                  case "bem": // Bembda                  case "bg": // Bulgarian                  case "bn": // Bengali                  case "brx": // Bodo                  case "ca": // Catalan                  case "cgg": // Chiga                  case "chr": // Cherokee                  case "da": // Danish                  case "de": // German                  case "dv": // Divehi                  case "ee": // Ewe                  case "el": // Greek                  case "en": // English                  case "eo": // Esperanto                  case "es": // Spanish                  case "et": // Estonian                  case "eu": // Basque                  case "fi": // Finnish                  case "fo": // Faroese                  case "fur": // Friulian                  case "fy": // Western Frisian                  case "gl": // Galician                  case "gsw": // Swiss German                  case "gu": // Gujarati                  case "ha": // Hausa                  case "haw": // Hawaiian                  case "he": // Hebrew                  case "is": // Icelandic                  case "it": // Italian                  case "kk": // Kazakh                  case "kl": // Kalaallisut                  case "ku": // Kurdish                  case "lb": // Luxembourgish                  case "lg": // Ganda                  case "lo": // Lao                  case "mas": // Masai                  case "ml": // Malayalam                  case "mn": // Mongolian                  case "mr": // Marathi                  case "nah": // Nahuatl                  case "nb": // Norwegian Bokmål                  case "ne": // Nepali                  case "nl": // Dutch                  case "nn": // Norwegian Nynorsk                  case "no": // Norwegian                  case "nyn": // Nyankole                  case "om": // Oromo                  case "or": // Oriya                  case "pa": // Punjabi                  case "pap": // Papiamento                  case "ps": // Pashto                  case "pt": // Portuguese                  case "rm": // Romansh                  case "saq": // Samburu                  case "so": // Somali                  case "sq": // Albanian                  case "ssy": // Saho                  case "sw": // Swahili                  case "sv": // Swedish                  case "syr": // Syriac                  case "ta": // Tamil                  case "te": // Telugu                  case "tk": // Turkmen                  case "tr": // Turkish                  case "ur": // Urdu                  case "wae": // Walser                  case "xog": // Soga                  case "zu": // Zulu                      return (n' c) =>                      {                          if (c == 2) return (n == 1) ? 0 : 1;                          if (c == 3) return (n == 0) ? 0 : (n == 1) ? 1 : 2;                          if (c == 4) return (n < 0) ? 0 : (n == 0) ? 1 : (n == 1) ? 2 : 3;                          return -1;                      };                    // DualWithZero: one (n == 0..1)' other                  case "ak": // Akan                  case "am": // Amharic                  case "bh": // Bihari                  case "fil": // Filipino                  case "guw": // Gun                  case "hi": // Hindi                  case "ln": // Lingala                  case "mg": // Malagasy                  case "nso": // Northern Sotho                  case "ti": // Tigrinya                  case "tl": // Tagalog                  case "wa": // Walloon                      return (n' c) => (n == 0 || n == 1) ? 0 : 1;                    // DualFromZeroToTwo: one (n == 0..2 fractionate and n != 2)' other                  case "ff": // Fulah                  case "fr": // French                  case "kab": // Kabyle                      return (n' c) => (n >= 0 && n < 2) ? 0 : 1;                    // Triple: one (n == 1)' two (n == 2)' other                  case "ga": // Irish                  case "iu": // Inuktitut                  case "ksh": // Colognian                  case "kw": // Cornish                  case "se": // Northern Sami                  case "sma": // Southern Sami                  case "smi": // Sami language                  case "smj": // Lule Sami                  case "smn": // Inari Sami                  case "sms": // Skolt Sami                      return (n' c) => (n == 1) ? 0 : (n == 2) ? 1 : 2;                    // Russian & Serbo-Croatian                  case "be": // Belarusian                  case "bs": // Bosnian                  case "hr": // Croatian                  case "ru": // Russian                  case "sh": // Serbo-Croatian                  case "sr": // Serbian                  case "uk": // Ukrainian                      return (n' c) =>                          (n % 10 == 1) && !(n % 100 == 11) ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          2;                    // Unique:                    // Arabic                  case "ar":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          (n % 100).Between(3' 10) ? 3 : // few                          (n % 100).Between(11' 99) ? 4 : // many                          5; // other                    // Breton                  case "br":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5; // other                    // Czech                  case "cs":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Welsh                  case "cy":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5;                    // Manx                  case "gv":                      return (n' c) =>                          (n % 10).Between(1' 2) || (n % 20) == 0 ? 0 :  // one                          1;                    // Langi                  case "lag":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n > 0) && (n < 2) ? 1 : // one                          2;                    // Lithuanian                  case "lt":                      return (n' c) =>                          (n % 10) == 1 && !(n % 100).Between(11' 19) ? 0 : // one                          (n % 10).Between(2' 9) && !(n % 100).Between(11' 19) ? 1 : // few                          2;                    // Latvian                  case "lv":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n % 10) == 1 && (n % 100) != 11 ? 1 :                          2;                    // Macedonian                  case "mb":                      return (n' c) =>                          (n % 10) == 1 && n != 11 ? 0 : // one                          1;                    // Moldavian                  case "mo":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n != 1 && (n % 100).Between(1' 19)) ? 1 : // few                          2;                    // Maltese                  case "mt":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(2' 10) ? 1 : // few                          (n % 100).Between(11' 19) ? 2 : // many                          3;                    // Polish                  case "pl":                      return (n' c) =>                          n == 1 ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          (n % 10).Between(0' 1) || (n % 10).Between(5' 9) || (n % 100).Between(12' 14) ? 2 : // many                          3;                    // Romanian                  case "ro":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(1' 19) ? 1 : // few                          2;                    // Tachelhit                  case "shi":                      return (n' c) =>                          (n >= 0 && n <= 1) ? 0 : // one                          n.Between(2' 10) ? 1 : // few                          2;                    // Slovak                  case "sk":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Slovenian                  case "sl":                      return (n' c) =>                          (n % 100) == 1 ? 0 : // one                          (n % 100) == 2 ? 1 : // two                          (n % 100).Between(3' 4) ? 2 : // few                          3;                    // Central Morocco Tamazight                  case "tzm":                      return (n' c) =>                          n.Between(0' 1) || n.Between(11' 99) ? 0 : // one                          1;                      // Unknown language                  default:                      return null;              }
Magic Number,SmartFormat.Extensions,CommonLanguageRules,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\PluralLocalizationFormatter.cs,GetPluralRule,The following statement contains a magic number: switch (twoLetterISOLanguageName)              {                  // Singular                  case "az": // Azerbaijani                  case "bm": // Bambara                  case "bo": // Tibetan                  case "dz": // Dzongkha                  case "fa": // Persian                  case "hu": // Hungarian                  case "id": // Indonesian                  case "ig": // Igbo                  case "ii": // Sichuan Yi                  case "ja": // Japanese                  case "jv": // Javanese                  case "ka": // Georgian                  case "kde": // Makonde                  case "kea": // Kabuverdianu                  case "km": // Khmer                  case "kn": // Kannada                  case "ko": // Korean                  case "ms": // Malay                  case "my": // Burmese                  case "root": // Root (?)                  case "sah": // Sakha                  case "ses": // Koyraboro Senni                  case "sg": // Sango                  case "th": // Thai                  case "to": // Tonga                  case "vi": // Vietnamese                  case "wo": // Wolof                  case "yo": // Yoruba                  case "zh": // Chinese                      return (n' c) => 0;                    // Dual: one (n == 1)' other                  case "af": // Afrikaans                  case "bem": // Bembda                  case "bg": // Bulgarian                  case "bn": // Bengali                  case "brx": // Bodo                  case "ca": // Catalan                  case "cgg": // Chiga                  case "chr": // Cherokee                  case "da": // Danish                  case "de": // German                  case "dv": // Divehi                  case "ee": // Ewe                  case "el": // Greek                  case "en": // English                  case "eo": // Esperanto                  case "es": // Spanish                  case "et": // Estonian                  case "eu": // Basque                  case "fi": // Finnish                  case "fo": // Faroese                  case "fur": // Friulian                  case "fy": // Western Frisian                  case "gl": // Galician                  case "gsw": // Swiss German                  case "gu": // Gujarati                  case "ha": // Hausa                  case "haw": // Hawaiian                  case "he": // Hebrew                  case "is": // Icelandic                  case "it": // Italian                  case "kk": // Kazakh                  case "kl": // Kalaallisut                  case "ku": // Kurdish                  case "lb": // Luxembourgish                  case "lg": // Ganda                  case "lo": // Lao                  case "mas": // Masai                  case "ml": // Malayalam                  case "mn": // Mongolian                  case "mr": // Marathi                  case "nah": // Nahuatl                  case "nb": // Norwegian Bokmål                  case "ne": // Nepali                  case "nl": // Dutch                  case "nn": // Norwegian Nynorsk                  case "no": // Norwegian                  case "nyn": // Nyankole                  case "om": // Oromo                  case "or": // Oriya                  case "pa": // Punjabi                  case "pap": // Papiamento                  case "ps": // Pashto                  case "pt": // Portuguese                  case "rm": // Romansh                  case "saq": // Samburu                  case "so": // Somali                  case "sq": // Albanian                  case "ssy": // Saho                  case "sw": // Swahili                  case "sv": // Swedish                  case "syr": // Syriac                  case "ta": // Tamil                  case "te": // Telugu                  case "tk": // Turkmen                  case "tr": // Turkish                  case "ur": // Urdu                  case "wae": // Walser                  case "xog": // Soga                  case "zu": // Zulu                      return (n' c) =>                      {                          if (c == 2) return (n == 1) ? 0 : 1;                          if (c == 3) return (n == 0) ? 0 : (n == 1) ? 1 : 2;                          if (c == 4) return (n < 0) ? 0 : (n == 0) ? 1 : (n == 1) ? 2 : 3;                          return -1;                      };                    // DualWithZero: one (n == 0..1)' other                  case "ak": // Akan                  case "am": // Amharic                  case "bh": // Bihari                  case "fil": // Filipino                  case "guw": // Gun                  case "hi": // Hindi                  case "ln": // Lingala                  case "mg": // Malagasy                  case "nso": // Northern Sotho                  case "ti": // Tigrinya                  case "tl": // Tagalog                  case "wa": // Walloon                      return (n' c) => (n == 0 || n == 1) ? 0 : 1;                    // DualFromZeroToTwo: one (n == 0..2 fractionate and n != 2)' other                  case "ff": // Fulah                  case "fr": // French                  case "kab": // Kabyle                      return (n' c) => (n >= 0 && n < 2) ? 0 : 1;                    // Triple: one (n == 1)' two (n == 2)' other                  case "ga": // Irish                  case "iu": // Inuktitut                  case "ksh": // Colognian                  case "kw": // Cornish                  case "se": // Northern Sami                  case "sma": // Southern Sami                  case "smi": // Sami language                  case "smj": // Lule Sami                  case "smn": // Inari Sami                  case "sms": // Skolt Sami                      return (n' c) => (n == 1) ? 0 : (n == 2) ? 1 : 2;                    // Russian & Serbo-Croatian                  case "be": // Belarusian                  case "bs": // Bosnian                  case "hr": // Croatian                  case "ru": // Russian                  case "sh": // Serbo-Croatian                  case "sr": // Serbian                  case "uk": // Ukrainian                      return (n' c) =>                          (n % 10 == 1) && !(n % 100 == 11) ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          2;                    // Unique:                    // Arabic                  case "ar":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          (n % 100).Between(3' 10) ? 3 : // few                          (n % 100).Between(11' 99) ? 4 : // many                          5; // other                    // Breton                  case "br":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5; // other                    // Czech                  case "cs":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Welsh                  case "cy":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5;                    // Manx                  case "gv":                      return (n' c) =>                          (n % 10).Between(1' 2) || (n % 20) == 0 ? 0 :  // one                          1;                    // Langi                  case "lag":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n > 0) && (n < 2) ? 1 : // one                          2;                    // Lithuanian                  case "lt":                      return (n' c) =>                          (n % 10) == 1 && !(n % 100).Between(11' 19) ? 0 : // one                          (n % 10).Between(2' 9) && !(n % 100).Between(11' 19) ? 1 : // few                          2;                    // Latvian                  case "lv":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n % 10) == 1 && (n % 100) != 11 ? 1 :                          2;                    // Macedonian                  case "mb":                      return (n' c) =>                          (n % 10) == 1 && n != 11 ? 0 : // one                          1;                    // Moldavian                  case "mo":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n != 1 && (n % 100).Between(1' 19)) ? 1 : // few                          2;                    // Maltese                  case "mt":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(2' 10) ? 1 : // few                          (n % 100).Between(11' 19) ? 2 : // many                          3;                    // Polish                  case "pl":                      return (n' c) =>                          n == 1 ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          (n % 10).Between(0' 1) || (n % 10).Between(5' 9) || (n % 100).Between(12' 14) ? 2 : // many                          3;                    // Romanian                  case "ro":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(1' 19) ? 1 : // few                          2;                    // Tachelhit                  case "shi":                      return (n' c) =>                          (n >= 0 && n <= 1) ? 0 : // one                          n.Between(2' 10) ? 1 : // few                          2;                    // Slovak                  case "sk":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Slovenian                  case "sl":                      return (n' c) =>                          (n % 100) == 1 ? 0 : // one                          (n % 100) == 2 ? 1 : // two                          (n % 100).Between(3' 4) ? 2 : // few                          3;                    // Central Morocco Tamazight                  case "tzm":                      return (n' c) =>                          n.Between(0' 1) || n.Between(11' 99) ? 0 : // one                          1;                      // Unknown language                  default:                      return null;              }
Magic Number,SmartFormat.Extensions,CommonLanguageRules,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\PluralLocalizationFormatter.cs,GetPluralRule,The following statement contains a magic number: switch (twoLetterISOLanguageName)              {                  // Singular                  case "az": // Azerbaijani                  case "bm": // Bambara                  case "bo": // Tibetan                  case "dz": // Dzongkha                  case "fa": // Persian                  case "hu": // Hungarian                  case "id": // Indonesian                  case "ig": // Igbo                  case "ii": // Sichuan Yi                  case "ja": // Japanese                  case "jv": // Javanese                  case "ka": // Georgian                  case "kde": // Makonde                  case "kea": // Kabuverdianu                  case "km": // Khmer                  case "kn": // Kannada                  case "ko": // Korean                  case "ms": // Malay                  case "my": // Burmese                  case "root": // Root (?)                  case "sah": // Sakha                  case "ses": // Koyraboro Senni                  case "sg": // Sango                  case "th": // Thai                  case "to": // Tonga                  case "vi": // Vietnamese                  case "wo": // Wolof                  case "yo": // Yoruba                  case "zh": // Chinese                      return (n' c) => 0;                    // Dual: one (n == 1)' other                  case "af": // Afrikaans                  case "bem": // Bembda                  case "bg": // Bulgarian                  case "bn": // Bengali                  case "brx": // Bodo                  case "ca": // Catalan                  case "cgg": // Chiga                  case "chr": // Cherokee                  case "da": // Danish                  case "de": // German                  case "dv": // Divehi                  case "ee": // Ewe                  case "el": // Greek                  case "en": // English                  case "eo": // Esperanto                  case "es": // Spanish                  case "et": // Estonian                  case "eu": // Basque                  case "fi": // Finnish                  case "fo": // Faroese                  case "fur": // Friulian                  case "fy": // Western Frisian                  case "gl": // Galician                  case "gsw": // Swiss German                  case "gu": // Gujarati                  case "ha": // Hausa                  case "haw": // Hawaiian                  case "he": // Hebrew                  case "is": // Icelandic                  case "it": // Italian                  case "kk": // Kazakh                  case "kl": // Kalaallisut                  case "ku": // Kurdish                  case "lb": // Luxembourgish                  case "lg": // Ganda                  case "lo": // Lao                  case "mas": // Masai                  case "ml": // Malayalam                  case "mn": // Mongolian                  case "mr": // Marathi                  case "nah": // Nahuatl                  case "nb": // Norwegian Bokmål                  case "ne": // Nepali                  case "nl": // Dutch                  case "nn": // Norwegian Nynorsk                  case "no": // Norwegian                  case "nyn": // Nyankole                  case "om": // Oromo                  case "or": // Oriya                  case "pa": // Punjabi                  case "pap": // Papiamento                  case "ps": // Pashto                  case "pt": // Portuguese                  case "rm": // Romansh                  case "saq": // Samburu                  case "so": // Somali                  case "sq": // Albanian                  case "ssy": // Saho                  case "sw": // Swahili                  case "sv": // Swedish                  case "syr": // Syriac                  case "ta": // Tamil                  case "te": // Telugu                  case "tk": // Turkmen                  case "tr": // Turkish                  case "ur": // Urdu                  case "wae": // Walser                  case "xog": // Soga                  case "zu": // Zulu                      return (n' c) =>                      {                          if (c == 2) return (n == 1) ? 0 : 1;                          if (c == 3) return (n == 0) ? 0 : (n == 1) ? 1 : 2;                          if (c == 4) return (n < 0) ? 0 : (n == 0) ? 1 : (n == 1) ? 2 : 3;                          return -1;                      };                    // DualWithZero: one (n == 0..1)' other                  case "ak": // Akan                  case "am": // Amharic                  case "bh": // Bihari                  case "fil": // Filipino                  case "guw": // Gun                  case "hi": // Hindi                  case "ln": // Lingala                  case "mg": // Malagasy                  case "nso": // Northern Sotho                  case "ti": // Tigrinya                  case "tl": // Tagalog                  case "wa": // Walloon                      return (n' c) => (n == 0 || n == 1) ? 0 : 1;                    // DualFromZeroToTwo: one (n == 0..2 fractionate and n != 2)' other                  case "ff": // Fulah                  case "fr": // French                  case "kab": // Kabyle                      return (n' c) => (n >= 0 && n < 2) ? 0 : 1;                    // Triple: one (n == 1)' two (n == 2)' other                  case "ga": // Irish                  case "iu": // Inuktitut                  case "ksh": // Colognian                  case "kw": // Cornish                  case "se": // Northern Sami                  case "sma": // Southern Sami                  case "smi": // Sami language                  case "smj": // Lule Sami                  case "smn": // Inari Sami                  case "sms": // Skolt Sami                      return (n' c) => (n == 1) ? 0 : (n == 2) ? 1 : 2;                    // Russian & Serbo-Croatian                  case "be": // Belarusian                  case "bs": // Bosnian                  case "hr": // Croatian                  case "ru": // Russian                  case "sh": // Serbo-Croatian                  case "sr": // Serbian                  case "uk": // Ukrainian                      return (n' c) =>                          (n % 10 == 1) && !(n % 100 == 11) ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          2;                    // Unique:                    // Arabic                  case "ar":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          (n % 100).Between(3' 10) ? 3 : // few                          (n % 100).Between(11' 99) ? 4 : // many                          5; // other                    // Breton                  case "br":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5; // other                    // Czech                  case "cs":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Welsh                  case "cy":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5;                    // Manx                  case "gv":                      return (n' c) =>                          (n % 10).Between(1' 2) || (n % 20) == 0 ? 0 :  // one                          1;                    // Langi                  case "lag":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n > 0) && (n < 2) ? 1 : // one                          2;                    // Lithuanian                  case "lt":                      return (n' c) =>                          (n % 10) == 1 && !(n % 100).Between(11' 19) ? 0 : // one                          (n % 10).Between(2' 9) && !(n % 100).Between(11' 19) ? 1 : // few                          2;                    // Latvian                  case "lv":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n % 10) == 1 && (n % 100) != 11 ? 1 :                          2;                    // Macedonian                  case "mb":                      return (n' c) =>                          (n % 10) == 1 && n != 11 ? 0 : // one                          1;                    // Moldavian                  case "mo":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n != 1 && (n % 100).Between(1' 19)) ? 1 : // few                          2;                    // Maltese                  case "mt":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(2' 10) ? 1 : // few                          (n % 100).Between(11' 19) ? 2 : // many                          3;                    // Polish                  case "pl":                      return (n' c) =>                          n == 1 ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          (n % 10).Between(0' 1) || (n % 10).Between(5' 9) || (n % 100).Between(12' 14) ? 2 : // many                          3;                    // Romanian                  case "ro":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(1' 19) ? 1 : // few                          2;                    // Tachelhit                  case "shi":                      return (n' c) =>                          (n >= 0 && n <= 1) ? 0 : // one                          n.Between(2' 10) ? 1 : // few                          2;                    // Slovak                  case "sk":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Slovenian                  case "sl":                      return (n' c) =>                          (n % 100) == 1 ? 0 : // one                          (n % 100) == 2 ? 1 : // two                          (n % 100).Between(3' 4) ? 2 : // few                          3;                    // Central Morocco Tamazight                  case "tzm":                      return (n' c) =>                          n.Between(0' 1) || n.Between(11' 99) ? 0 : // one                          1;                      // Unknown language                  default:                      return null;              }
Magic Number,SmartFormat.Extensions,CommonLanguageRules,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\PluralLocalizationFormatter.cs,GetPluralRule,The following statement contains a magic number: switch (twoLetterISOLanguageName)              {                  // Singular                  case "az": // Azerbaijani                  case "bm": // Bambara                  case "bo": // Tibetan                  case "dz": // Dzongkha                  case "fa": // Persian                  case "hu": // Hungarian                  case "id": // Indonesian                  case "ig": // Igbo                  case "ii": // Sichuan Yi                  case "ja": // Japanese                  case "jv": // Javanese                  case "ka": // Georgian                  case "kde": // Makonde                  case "kea": // Kabuverdianu                  case "km": // Khmer                  case "kn": // Kannada                  case "ko": // Korean                  case "ms": // Malay                  case "my": // Burmese                  case "root": // Root (?)                  case "sah": // Sakha                  case "ses": // Koyraboro Senni                  case "sg": // Sango                  case "th": // Thai                  case "to": // Tonga                  case "vi": // Vietnamese                  case "wo": // Wolof                  case "yo": // Yoruba                  case "zh": // Chinese                      return (n' c) => 0;                    // Dual: one (n == 1)' other                  case "af": // Afrikaans                  case "bem": // Bembda                  case "bg": // Bulgarian                  case "bn": // Bengali                  case "brx": // Bodo                  case "ca": // Catalan                  case "cgg": // Chiga                  case "chr": // Cherokee                  case "da": // Danish                  case "de": // German                  case "dv": // Divehi                  case "ee": // Ewe                  case "el": // Greek                  case "en": // English                  case "eo": // Esperanto                  case "es": // Spanish                  case "et": // Estonian                  case "eu": // Basque                  case "fi": // Finnish                  case "fo": // Faroese                  case "fur": // Friulian                  case "fy": // Western Frisian                  case "gl": // Galician                  case "gsw": // Swiss German                  case "gu": // Gujarati                  case "ha": // Hausa                  case "haw": // Hawaiian                  case "he": // Hebrew                  case "is": // Icelandic                  case "it": // Italian                  case "kk": // Kazakh                  case "kl": // Kalaallisut                  case "ku": // Kurdish                  case "lb": // Luxembourgish                  case "lg": // Ganda                  case "lo": // Lao                  case "mas": // Masai                  case "ml": // Malayalam                  case "mn": // Mongolian                  case "mr": // Marathi                  case "nah": // Nahuatl                  case "nb": // Norwegian Bokmål                  case "ne": // Nepali                  case "nl": // Dutch                  case "nn": // Norwegian Nynorsk                  case "no": // Norwegian                  case "nyn": // Nyankole                  case "om": // Oromo                  case "or": // Oriya                  case "pa": // Punjabi                  case "pap": // Papiamento                  case "ps": // Pashto                  case "pt": // Portuguese                  case "rm": // Romansh                  case "saq": // Samburu                  case "so": // Somali                  case "sq": // Albanian                  case "ssy": // Saho                  case "sw": // Swahili                  case "sv": // Swedish                  case "syr": // Syriac                  case "ta": // Tamil                  case "te": // Telugu                  case "tk": // Turkmen                  case "tr": // Turkish                  case "ur": // Urdu                  case "wae": // Walser                  case "xog": // Soga                  case "zu": // Zulu                      return (n' c) =>                      {                          if (c == 2) return (n == 1) ? 0 : 1;                          if (c == 3) return (n == 0) ? 0 : (n == 1) ? 1 : 2;                          if (c == 4) return (n < 0) ? 0 : (n == 0) ? 1 : (n == 1) ? 2 : 3;                          return -1;                      };                    // DualWithZero: one (n == 0..1)' other                  case "ak": // Akan                  case "am": // Amharic                  case "bh": // Bihari                  case "fil": // Filipino                  case "guw": // Gun                  case "hi": // Hindi                  case "ln": // Lingala                  case "mg": // Malagasy                  case "nso": // Northern Sotho                  case "ti": // Tigrinya                  case "tl": // Tagalog                  case "wa": // Walloon                      return (n' c) => (n == 0 || n == 1) ? 0 : 1;                    // DualFromZeroToTwo: one (n == 0..2 fractionate and n != 2)' other                  case "ff": // Fulah                  case "fr": // French                  case "kab": // Kabyle                      return (n' c) => (n >= 0 && n < 2) ? 0 : 1;                    // Triple: one (n == 1)' two (n == 2)' other                  case "ga": // Irish                  case "iu": // Inuktitut                  case "ksh": // Colognian                  case "kw": // Cornish                  case "se": // Northern Sami                  case "sma": // Southern Sami                  case "smi": // Sami language                  case "smj": // Lule Sami                  case "smn": // Inari Sami                  case "sms": // Skolt Sami                      return (n' c) => (n == 1) ? 0 : (n == 2) ? 1 : 2;                    // Russian & Serbo-Croatian                  case "be": // Belarusian                  case "bs": // Bosnian                  case "hr": // Croatian                  case "ru": // Russian                  case "sh": // Serbo-Croatian                  case "sr": // Serbian                  case "uk": // Ukrainian                      return (n' c) =>                          (n % 10 == 1) && !(n % 100 == 11) ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          2;                    // Unique:                    // Arabic                  case "ar":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          (n % 100).Between(3' 10) ? 3 : // few                          (n % 100).Between(11' 99) ? 4 : // many                          5; // other                    // Breton                  case "br":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5; // other                    // Czech                  case "cs":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Welsh                  case "cy":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5;                    // Manx                  case "gv":                      return (n' c) =>                          (n % 10).Between(1' 2) || (n % 20) == 0 ? 0 :  // one                          1;                    // Langi                  case "lag":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n > 0) && (n < 2) ? 1 : // one                          2;                    // Lithuanian                  case "lt":                      return (n' c) =>                          (n % 10) == 1 && !(n % 100).Between(11' 19) ? 0 : // one                          (n % 10).Between(2' 9) && !(n % 100).Between(11' 19) ? 1 : // few                          2;                    // Latvian                  case "lv":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n % 10) == 1 && (n % 100) != 11 ? 1 :                          2;                    // Macedonian                  case "mb":                      return (n' c) =>                          (n % 10) == 1 && n != 11 ? 0 : // one                          1;                    // Moldavian                  case "mo":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n != 1 && (n % 100).Between(1' 19)) ? 1 : // few                          2;                    // Maltese                  case "mt":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(2' 10) ? 1 : // few                          (n % 100).Between(11' 19) ? 2 : // many                          3;                    // Polish                  case "pl":                      return (n' c) =>                          n == 1 ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          (n % 10).Between(0' 1) || (n % 10).Between(5' 9) || (n % 100).Between(12' 14) ? 2 : // many                          3;                    // Romanian                  case "ro":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(1' 19) ? 1 : // few                          2;                    // Tachelhit                  case "shi":                      return (n' c) =>                          (n >= 0 && n <= 1) ? 0 : // one                          n.Between(2' 10) ? 1 : // few                          2;                    // Slovak                  case "sk":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Slovenian                  case "sl":                      return (n' c) =>                          (n % 100) == 1 ? 0 : // one                          (n % 100) == 2 ? 1 : // two                          (n % 100).Between(3' 4) ? 2 : // few                          3;                    // Central Morocco Tamazight                  case "tzm":                      return (n' c) =>                          n.Between(0' 1) || n.Between(11' 99) ? 0 : // one                          1;                      // Unknown language                  default:                      return null;              }
Magic Number,SmartFormat.Extensions,CommonLanguageRules,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\PluralLocalizationFormatter.cs,GetPluralRule,The following statement contains a magic number: switch (twoLetterISOLanguageName)              {                  // Singular                  case "az": // Azerbaijani                  case "bm": // Bambara                  case "bo": // Tibetan                  case "dz": // Dzongkha                  case "fa": // Persian                  case "hu": // Hungarian                  case "id": // Indonesian                  case "ig": // Igbo                  case "ii": // Sichuan Yi                  case "ja": // Japanese                  case "jv": // Javanese                  case "ka": // Georgian                  case "kde": // Makonde                  case "kea": // Kabuverdianu                  case "km": // Khmer                  case "kn": // Kannada                  case "ko": // Korean                  case "ms": // Malay                  case "my": // Burmese                  case "root": // Root (?)                  case "sah": // Sakha                  case "ses": // Koyraboro Senni                  case "sg": // Sango                  case "th": // Thai                  case "to": // Tonga                  case "vi": // Vietnamese                  case "wo": // Wolof                  case "yo": // Yoruba                  case "zh": // Chinese                      return (n' c) => 0;                    // Dual: one (n == 1)' other                  case "af": // Afrikaans                  case "bem": // Bembda                  case "bg": // Bulgarian                  case "bn": // Bengali                  case "brx": // Bodo                  case "ca": // Catalan                  case "cgg": // Chiga                  case "chr": // Cherokee                  case "da": // Danish                  case "de": // German                  case "dv": // Divehi                  case "ee": // Ewe                  case "el": // Greek                  case "en": // English                  case "eo": // Esperanto                  case "es": // Spanish                  case "et": // Estonian                  case "eu": // Basque                  case "fi": // Finnish                  case "fo": // Faroese                  case "fur": // Friulian                  case "fy": // Western Frisian                  case "gl": // Galician                  case "gsw": // Swiss German                  case "gu": // Gujarati                  case "ha": // Hausa                  case "haw": // Hawaiian                  case "he": // Hebrew                  case "is": // Icelandic                  case "it": // Italian                  case "kk": // Kazakh                  case "kl": // Kalaallisut                  case "ku": // Kurdish                  case "lb": // Luxembourgish                  case "lg": // Ganda                  case "lo": // Lao                  case "mas": // Masai                  case "ml": // Malayalam                  case "mn": // Mongolian                  case "mr": // Marathi                  case "nah": // Nahuatl                  case "nb": // Norwegian Bokmål                  case "ne": // Nepali                  case "nl": // Dutch                  case "nn": // Norwegian Nynorsk                  case "no": // Norwegian                  case "nyn": // Nyankole                  case "om": // Oromo                  case "or": // Oriya                  case "pa": // Punjabi                  case "pap": // Papiamento                  case "ps": // Pashto                  case "pt": // Portuguese                  case "rm": // Romansh                  case "saq": // Samburu                  case "so": // Somali                  case "sq": // Albanian                  case "ssy": // Saho                  case "sw": // Swahili                  case "sv": // Swedish                  case "syr": // Syriac                  case "ta": // Tamil                  case "te": // Telugu                  case "tk": // Turkmen                  case "tr": // Turkish                  case "ur": // Urdu                  case "wae": // Walser                  case "xog": // Soga                  case "zu": // Zulu                      return (n' c) =>                      {                          if (c == 2) return (n == 1) ? 0 : 1;                          if (c == 3) return (n == 0) ? 0 : (n == 1) ? 1 : 2;                          if (c == 4) return (n < 0) ? 0 : (n == 0) ? 1 : (n == 1) ? 2 : 3;                          return -1;                      };                    // DualWithZero: one (n == 0..1)' other                  case "ak": // Akan                  case "am": // Amharic                  case "bh": // Bihari                  case "fil": // Filipino                  case "guw": // Gun                  case "hi": // Hindi                  case "ln": // Lingala                  case "mg": // Malagasy                  case "nso": // Northern Sotho                  case "ti": // Tigrinya                  case "tl": // Tagalog                  case "wa": // Walloon                      return (n' c) => (n == 0 || n == 1) ? 0 : 1;                    // DualFromZeroToTwo: one (n == 0..2 fractionate and n != 2)' other                  case "ff": // Fulah                  case "fr": // French                  case "kab": // Kabyle                      return (n' c) => (n >= 0 && n < 2) ? 0 : 1;                    // Triple: one (n == 1)' two (n == 2)' other                  case "ga": // Irish                  case "iu": // Inuktitut                  case "ksh": // Colognian                  case "kw": // Cornish                  case "se": // Northern Sami                  case "sma": // Southern Sami                  case "smi": // Sami language                  case "smj": // Lule Sami                  case "smn": // Inari Sami                  case "sms": // Skolt Sami                      return (n' c) => (n == 1) ? 0 : (n == 2) ? 1 : 2;                    // Russian & Serbo-Croatian                  case "be": // Belarusian                  case "bs": // Bosnian                  case "hr": // Croatian                  case "ru": // Russian                  case "sh": // Serbo-Croatian                  case "sr": // Serbian                  case "uk": // Ukrainian                      return (n' c) =>                          (n % 10 == 1) && !(n % 100 == 11) ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          2;                    // Unique:                    // Arabic                  case "ar":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          (n % 100).Between(3' 10) ? 3 : // few                          (n % 100).Between(11' 99) ? 4 : // many                          5; // other                    // Breton                  case "br":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5; // other                    // Czech                  case "cs":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Welsh                  case "cy":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5;                    // Manx                  case "gv":                      return (n' c) =>                          (n % 10).Between(1' 2) || (n % 20) == 0 ? 0 :  // one                          1;                    // Langi                  case "lag":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n > 0) && (n < 2) ? 1 : // one                          2;                    // Lithuanian                  case "lt":                      return (n' c) =>                          (n % 10) == 1 && !(n % 100).Between(11' 19) ? 0 : // one                          (n % 10).Between(2' 9) && !(n % 100).Between(11' 19) ? 1 : // few                          2;                    // Latvian                  case "lv":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n % 10) == 1 && (n % 100) != 11 ? 1 :                          2;                    // Macedonian                  case "mb":                      return (n' c) =>                          (n % 10) == 1 && n != 11 ? 0 : // one                          1;                    // Moldavian                  case "mo":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n != 1 && (n % 100).Between(1' 19)) ? 1 : // few                          2;                    // Maltese                  case "mt":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(2' 10) ? 1 : // few                          (n % 100).Between(11' 19) ? 2 : // many                          3;                    // Polish                  case "pl":                      return (n' c) =>                          n == 1 ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          (n % 10).Between(0' 1) || (n % 10).Between(5' 9) || (n % 100).Between(12' 14) ? 2 : // many                          3;                    // Romanian                  case "ro":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(1' 19) ? 1 : // few                          2;                    // Tachelhit                  case "shi":                      return (n' c) =>                          (n >= 0 && n <= 1) ? 0 : // one                          n.Between(2' 10) ? 1 : // few                          2;                    // Slovak                  case "sk":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Slovenian                  case "sl":                      return (n' c) =>                          (n % 100) == 1 ? 0 : // one                          (n % 100) == 2 ? 1 : // two                          (n % 100).Between(3' 4) ? 2 : // few                          3;                    // Central Morocco Tamazight                  case "tzm":                      return (n' c) =>                          n.Between(0' 1) || n.Between(11' 99) ? 0 : // one                          1;                      // Unknown language                  default:                      return null;              }
Magic Number,SmartFormat.Extensions,CommonLanguageRules,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\PluralLocalizationFormatter.cs,GetPluralRule,The following statement contains a magic number: switch (twoLetterISOLanguageName)              {                  // Singular                  case "az": // Azerbaijani                  case "bm": // Bambara                  case "bo": // Tibetan                  case "dz": // Dzongkha                  case "fa": // Persian                  case "hu": // Hungarian                  case "id": // Indonesian                  case "ig": // Igbo                  case "ii": // Sichuan Yi                  case "ja": // Japanese                  case "jv": // Javanese                  case "ka": // Georgian                  case "kde": // Makonde                  case "kea": // Kabuverdianu                  case "km": // Khmer                  case "kn": // Kannada                  case "ko": // Korean                  case "ms": // Malay                  case "my": // Burmese                  case "root": // Root (?)                  case "sah": // Sakha                  case "ses": // Koyraboro Senni                  case "sg": // Sango                  case "th": // Thai                  case "to": // Tonga                  case "vi": // Vietnamese                  case "wo": // Wolof                  case "yo": // Yoruba                  case "zh": // Chinese                      return (n' c) => 0;                    // Dual: one (n == 1)' other                  case "af": // Afrikaans                  case "bem": // Bembda                  case "bg": // Bulgarian                  case "bn": // Bengali                  case "brx": // Bodo                  case "ca": // Catalan                  case "cgg": // Chiga                  case "chr": // Cherokee                  case "da": // Danish                  case "de": // German                  case "dv": // Divehi                  case "ee": // Ewe                  case "el": // Greek                  case "en": // English                  case "eo": // Esperanto                  case "es": // Spanish                  case "et": // Estonian                  case "eu": // Basque                  case "fi": // Finnish                  case "fo": // Faroese                  case "fur": // Friulian                  case "fy": // Western Frisian                  case "gl": // Galician                  case "gsw": // Swiss German                  case "gu": // Gujarati                  case "ha": // Hausa                  case "haw": // Hawaiian                  case "he": // Hebrew                  case "is": // Icelandic                  case "it": // Italian                  case "kk": // Kazakh                  case "kl": // Kalaallisut                  case "ku": // Kurdish                  case "lb": // Luxembourgish                  case "lg": // Ganda                  case "lo": // Lao                  case "mas": // Masai                  case "ml": // Malayalam                  case "mn": // Mongolian                  case "mr": // Marathi                  case "nah": // Nahuatl                  case "nb": // Norwegian Bokmål                  case "ne": // Nepali                  case "nl": // Dutch                  case "nn": // Norwegian Nynorsk                  case "no": // Norwegian                  case "nyn": // Nyankole                  case "om": // Oromo                  case "or": // Oriya                  case "pa": // Punjabi                  case "pap": // Papiamento                  case "ps": // Pashto                  case "pt": // Portuguese                  case "rm": // Romansh                  case "saq": // Samburu                  case "so": // Somali                  case "sq": // Albanian                  case "ssy": // Saho                  case "sw": // Swahili                  case "sv": // Swedish                  case "syr": // Syriac                  case "ta": // Tamil                  case "te": // Telugu                  case "tk": // Turkmen                  case "tr": // Turkish                  case "ur": // Urdu                  case "wae": // Walser                  case "xog": // Soga                  case "zu": // Zulu                      return (n' c) =>                      {                          if (c == 2) return (n == 1) ? 0 : 1;                          if (c == 3) return (n == 0) ? 0 : (n == 1) ? 1 : 2;                          if (c == 4) return (n < 0) ? 0 : (n == 0) ? 1 : (n == 1) ? 2 : 3;                          return -1;                      };                    // DualWithZero: one (n == 0..1)' other                  case "ak": // Akan                  case "am": // Amharic                  case "bh": // Bihari                  case "fil": // Filipino                  case "guw": // Gun                  case "hi": // Hindi                  case "ln": // Lingala                  case "mg": // Malagasy                  case "nso": // Northern Sotho                  case "ti": // Tigrinya                  case "tl": // Tagalog                  case "wa": // Walloon                      return (n' c) => (n == 0 || n == 1) ? 0 : 1;                    // DualFromZeroToTwo: one (n == 0..2 fractionate and n != 2)' other                  case "ff": // Fulah                  case "fr": // French                  case "kab": // Kabyle                      return (n' c) => (n >= 0 && n < 2) ? 0 : 1;                    // Triple: one (n == 1)' two (n == 2)' other                  case "ga": // Irish                  case "iu": // Inuktitut                  case "ksh": // Colognian                  case "kw": // Cornish                  case "se": // Northern Sami                  case "sma": // Southern Sami                  case "smi": // Sami language                  case "smj": // Lule Sami                  case "smn": // Inari Sami                  case "sms": // Skolt Sami                      return (n' c) => (n == 1) ? 0 : (n == 2) ? 1 : 2;                    // Russian & Serbo-Croatian                  case "be": // Belarusian                  case "bs": // Bosnian                  case "hr": // Croatian                  case "ru": // Russian                  case "sh": // Serbo-Croatian                  case "sr": // Serbian                  case "uk": // Ukrainian                      return (n' c) =>                          (n % 10 == 1) && !(n % 100 == 11) ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          2;                    // Unique:                    // Arabic                  case "ar":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          (n % 100).Between(3' 10) ? 3 : // few                          (n % 100).Between(11' 99) ? 4 : // many                          5; // other                    // Breton                  case "br":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5; // other                    // Czech                  case "cs":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Welsh                  case "cy":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5;                    // Manx                  case "gv":                      return (n' c) =>                          (n % 10).Between(1' 2) || (n % 20) == 0 ? 0 :  // one                          1;                    // Langi                  case "lag":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n > 0) && (n < 2) ? 1 : // one                          2;                    // Lithuanian                  case "lt":                      return (n' c) =>                          (n % 10) == 1 && !(n % 100).Between(11' 19) ? 0 : // one                          (n % 10).Between(2' 9) && !(n % 100).Between(11' 19) ? 1 : // few                          2;                    // Latvian                  case "lv":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n % 10) == 1 && (n % 100) != 11 ? 1 :                          2;                    // Macedonian                  case "mb":                      return (n' c) =>                          (n % 10) == 1 && n != 11 ? 0 : // one                          1;                    // Moldavian                  case "mo":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n != 1 && (n % 100).Between(1' 19)) ? 1 : // few                          2;                    // Maltese                  case "mt":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(2' 10) ? 1 : // few                          (n % 100).Between(11' 19) ? 2 : // many                          3;                    // Polish                  case "pl":                      return (n' c) =>                          n == 1 ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          (n % 10).Between(0' 1) || (n % 10).Between(5' 9) || (n % 100).Between(12' 14) ? 2 : // many                          3;                    // Romanian                  case "ro":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(1' 19) ? 1 : // few                          2;                    // Tachelhit                  case "shi":                      return (n' c) =>                          (n >= 0 && n <= 1) ? 0 : // one                          n.Between(2' 10) ? 1 : // few                          2;                    // Slovak                  case "sk":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Slovenian                  case "sl":                      return (n' c) =>                          (n % 100) == 1 ? 0 : // one                          (n % 100) == 2 ? 1 : // two                          (n % 100).Between(3' 4) ? 2 : // few                          3;                    // Central Morocco Tamazight                  case "tzm":                      return (n' c) =>                          n.Between(0' 1) || n.Between(11' 99) ? 0 : // one                          1;                      // Unknown language                  default:                      return null;              }
Magic Number,SmartFormat.Extensions,CommonLanguageRules,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\PluralLocalizationFormatter.cs,GetPluralRule,The following statement contains a magic number: switch (twoLetterISOLanguageName)              {                  // Singular                  case "az": // Azerbaijani                  case "bm": // Bambara                  case "bo": // Tibetan                  case "dz": // Dzongkha                  case "fa": // Persian                  case "hu": // Hungarian                  case "id": // Indonesian                  case "ig": // Igbo                  case "ii": // Sichuan Yi                  case "ja": // Japanese                  case "jv": // Javanese                  case "ka": // Georgian                  case "kde": // Makonde                  case "kea": // Kabuverdianu                  case "km": // Khmer                  case "kn": // Kannada                  case "ko": // Korean                  case "ms": // Malay                  case "my": // Burmese                  case "root": // Root (?)                  case "sah": // Sakha                  case "ses": // Koyraboro Senni                  case "sg": // Sango                  case "th": // Thai                  case "to": // Tonga                  case "vi": // Vietnamese                  case "wo": // Wolof                  case "yo": // Yoruba                  case "zh": // Chinese                      return (n' c) => 0;                    // Dual: one (n == 1)' other                  case "af": // Afrikaans                  case "bem": // Bembda                  case "bg": // Bulgarian                  case "bn": // Bengali                  case "brx": // Bodo                  case "ca": // Catalan                  case "cgg": // Chiga                  case "chr": // Cherokee                  case "da": // Danish                  case "de": // German                  case "dv": // Divehi                  case "ee": // Ewe                  case "el": // Greek                  case "en": // English                  case "eo": // Esperanto                  case "es": // Spanish                  case "et": // Estonian                  case "eu": // Basque                  case "fi": // Finnish                  case "fo": // Faroese                  case "fur": // Friulian                  case "fy": // Western Frisian                  case "gl": // Galician                  case "gsw": // Swiss German                  case "gu": // Gujarati                  case "ha": // Hausa                  case "haw": // Hawaiian                  case "he": // Hebrew                  case "is": // Icelandic                  case "it": // Italian                  case "kk": // Kazakh                  case "kl": // Kalaallisut                  case "ku": // Kurdish                  case "lb": // Luxembourgish                  case "lg": // Ganda                  case "lo": // Lao                  case "mas": // Masai                  case "ml": // Malayalam                  case "mn": // Mongolian                  case "mr": // Marathi                  case "nah": // Nahuatl                  case "nb": // Norwegian Bokmål                  case "ne": // Nepali                  case "nl": // Dutch                  case "nn": // Norwegian Nynorsk                  case "no": // Norwegian                  case "nyn": // Nyankole                  case "om": // Oromo                  case "or": // Oriya                  case "pa": // Punjabi                  case "pap": // Papiamento                  case "ps": // Pashto                  case "pt": // Portuguese                  case "rm": // Romansh                  case "saq": // Samburu                  case "so": // Somali                  case "sq": // Albanian                  case "ssy": // Saho                  case "sw": // Swahili                  case "sv": // Swedish                  case "syr": // Syriac                  case "ta": // Tamil                  case "te": // Telugu                  case "tk": // Turkmen                  case "tr": // Turkish                  case "ur": // Urdu                  case "wae": // Walser                  case "xog": // Soga                  case "zu": // Zulu                      return (n' c) =>                      {                          if (c == 2) return (n == 1) ? 0 : 1;                          if (c == 3) return (n == 0) ? 0 : (n == 1) ? 1 : 2;                          if (c == 4) return (n < 0) ? 0 : (n == 0) ? 1 : (n == 1) ? 2 : 3;                          return -1;                      };                    // DualWithZero: one (n == 0..1)' other                  case "ak": // Akan                  case "am": // Amharic                  case "bh": // Bihari                  case "fil": // Filipino                  case "guw": // Gun                  case "hi": // Hindi                  case "ln": // Lingala                  case "mg": // Malagasy                  case "nso": // Northern Sotho                  case "ti": // Tigrinya                  case "tl": // Tagalog                  case "wa": // Walloon                      return (n' c) => (n == 0 || n == 1) ? 0 : 1;                    // DualFromZeroToTwo: one (n == 0..2 fractionate and n != 2)' other                  case "ff": // Fulah                  case "fr": // French                  case "kab": // Kabyle                      return (n' c) => (n >= 0 && n < 2) ? 0 : 1;                    // Triple: one (n == 1)' two (n == 2)' other                  case "ga": // Irish                  case "iu": // Inuktitut                  case "ksh": // Colognian                  case "kw": // Cornish                  case "se": // Northern Sami                  case "sma": // Southern Sami                  case "smi": // Sami language                  case "smj": // Lule Sami                  case "smn": // Inari Sami                  case "sms": // Skolt Sami                      return (n' c) => (n == 1) ? 0 : (n == 2) ? 1 : 2;                    // Russian & Serbo-Croatian                  case "be": // Belarusian                  case "bs": // Bosnian                  case "hr": // Croatian                  case "ru": // Russian                  case "sh": // Serbo-Croatian                  case "sr": // Serbian                  case "uk": // Ukrainian                      return (n' c) =>                          (n % 10 == 1) && !(n % 100 == 11) ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          2;                    // Unique:                    // Arabic                  case "ar":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          (n % 100).Between(3' 10) ? 3 : // few                          (n % 100).Between(11' 99) ? 4 : // many                          5; // other                    // Breton                  case "br":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5; // other                    // Czech                  case "cs":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Welsh                  case "cy":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5;                    // Manx                  case "gv":                      return (n' c) =>                          (n % 10).Between(1' 2) || (n % 20) == 0 ? 0 :  // one                          1;                    // Langi                  case "lag":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n > 0) && (n < 2) ? 1 : // one                          2;                    // Lithuanian                  case "lt":                      return (n' c) =>                          (n % 10) == 1 && !(n % 100).Between(11' 19) ? 0 : // one                          (n % 10).Between(2' 9) && !(n % 100).Between(11' 19) ? 1 : // few                          2;                    // Latvian                  case "lv":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n % 10) == 1 && (n % 100) != 11 ? 1 :                          2;                    // Macedonian                  case "mb":                      return (n' c) =>                          (n % 10) == 1 && n != 11 ? 0 : // one                          1;                    // Moldavian                  case "mo":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n != 1 && (n % 100).Between(1' 19)) ? 1 : // few                          2;                    // Maltese                  case "mt":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(2' 10) ? 1 : // few                          (n % 100).Between(11' 19) ? 2 : // many                          3;                    // Polish                  case "pl":                      return (n' c) =>                          n == 1 ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          (n % 10).Between(0' 1) || (n % 10).Between(5' 9) || (n % 100).Between(12' 14) ? 2 : // many                          3;                    // Romanian                  case "ro":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(1' 19) ? 1 : // few                          2;                    // Tachelhit                  case "shi":                      return (n' c) =>                          (n >= 0 && n <= 1) ? 0 : // one                          n.Between(2' 10) ? 1 : // few                          2;                    // Slovak                  case "sk":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Slovenian                  case "sl":                      return (n' c) =>                          (n % 100) == 1 ? 0 : // one                          (n % 100) == 2 ? 1 : // two                          (n % 100).Between(3' 4) ? 2 : // few                          3;                    // Central Morocco Tamazight                  case "tzm":                      return (n' c) =>                          n.Between(0' 1) || n.Between(11' 99) ? 0 : // one                          1;                      // Unknown language                  default:                      return null;              }
Magic Number,SmartFormat.Extensions,CommonLanguageRules,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\PluralLocalizationFormatter.cs,GetPluralRule,The following statement contains a magic number: switch (twoLetterISOLanguageName)              {                  // Singular                  case "az": // Azerbaijani                  case "bm": // Bambara                  case "bo": // Tibetan                  case "dz": // Dzongkha                  case "fa": // Persian                  case "hu": // Hungarian                  case "id": // Indonesian                  case "ig": // Igbo                  case "ii": // Sichuan Yi                  case "ja": // Japanese                  case "jv": // Javanese                  case "ka": // Georgian                  case "kde": // Makonde                  case "kea": // Kabuverdianu                  case "km": // Khmer                  case "kn": // Kannada                  case "ko": // Korean                  case "ms": // Malay                  case "my": // Burmese                  case "root": // Root (?)                  case "sah": // Sakha                  case "ses": // Koyraboro Senni                  case "sg": // Sango                  case "th": // Thai                  case "to": // Tonga                  case "vi": // Vietnamese                  case "wo": // Wolof                  case "yo": // Yoruba                  case "zh": // Chinese                      return (n' c) => 0;                    // Dual: one (n == 1)' other                  case "af": // Afrikaans                  case "bem": // Bembda                  case "bg": // Bulgarian                  case "bn": // Bengali                  case "brx": // Bodo                  case "ca": // Catalan                  case "cgg": // Chiga                  case "chr": // Cherokee                  case "da": // Danish                  case "de": // German                  case "dv": // Divehi                  case "ee": // Ewe                  case "el": // Greek                  case "en": // English                  case "eo": // Esperanto                  case "es": // Spanish                  case "et": // Estonian                  case "eu": // Basque                  case "fi": // Finnish                  case "fo": // Faroese                  case "fur": // Friulian                  case "fy": // Western Frisian                  case "gl": // Galician                  case "gsw": // Swiss German                  case "gu": // Gujarati                  case "ha": // Hausa                  case "haw": // Hawaiian                  case "he": // Hebrew                  case "is": // Icelandic                  case "it": // Italian                  case "kk": // Kazakh                  case "kl": // Kalaallisut                  case "ku": // Kurdish                  case "lb": // Luxembourgish                  case "lg": // Ganda                  case "lo": // Lao                  case "mas": // Masai                  case "ml": // Malayalam                  case "mn": // Mongolian                  case "mr": // Marathi                  case "nah": // Nahuatl                  case "nb": // Norwegian Bokmål                  case "ne": // Nepali                  case "nl": // Dutch                  case "nn": // Norwegian Nynorsk                  case "no": // Norwegian                  case "nyn": // Nyankole                  case "om": // Oromo                  case "or": // Oriya                  case "pa": // Punjabi                  case "pap": // Papiamento                  case "ps": // Pashto                  case "pt": // Portuguese                  case "rm": // Romansh                  case "saq": // Samburu                  case "so": // Somali                  case "sq": // Albanian                  case "ssy": // Saho                  case "sw": // Swahili                  case "sv": // Swedish                  case "syr": // Syriac                  case "ta": // Tamil                  case "te": // Telugu                  case "tk": // Turkmen                  case "tr": // Turkish                  case "ur": // Urdu                  case "wae": // Walser                  case "xog": // Soga                  case "zu": // Zulu                      return (n' c) =>                      {                          if (c == 2) return (n == 1) ? 0 : 1;                          if (c == 3) return (n == 0) ? 0 : (n == 1) ? 1 : 2;                          if (c == 4) return (n < 0) ? 0 : (n == 0) ? 1 : (n == 1) ? 2 : 3;                          return -1;                      };                    // DualWithZero: one (n == 0..1)' other                  case "ak": // Akan                  case "am": // Amharic                  case "bh": // Bihari                  case "fil": // Filipino                  case "guw": // Gun                  case "hi": // Hindi                  case "ln": // Lingala                  case "mg": // Malagasy                  case "nso": // Northern Sotho                  case "ti": // Tigrinya                  case "tl": // Tagalog                  case "wa": // Walloon                      return (n' c) => (n == 0 || n == 1) ? 0 : 1;                    // DualFromZeroToTwo: one (n == 0..2 fractionate and n != 2)' other                  case "ff": // Fulah                  case "fr": // French                  case "kab": // Kabyle                      return (n' c) => (n >= 0 && n < 2) ? 0 : 1;                    // Triple: one (n == 1)' two (n == 2)' other                  case "ga": // Irish                  case "iu": // Inuktitut                  case "ksh": // Colognian                  case "kw": // Cornish                  case "se": // Northern Sami                  case "sma": // Southern Sami                  case "smi": // Sami language                  case "smj": // Lule Sami                  case "smn": // Inari Sami                  case "sms": // Skolt Sami                      return (n' c) => (n == 1) ? 0 : (n == 2) ? 1 : 2;                    // Russian & Serbo-Croatian                  case "be": // Belarusian                  case "bs": // Bosnian                  case "hr": // Croatian                  case "ru": // Russian                  case "sh": // Serbo-Croatian                  case "sr": // Serbian                  case "uk": // Ukrainian                      return (n' c) =>                          (n % 10 == 1) && !(n % 100 == 11) ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          2;                    // Unique:                    // Arabic                  case "ar":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          (n % 100).Between(3' 10) ? 3 : // few                          (n % 100).Between(11' 99) ? 4 : // many                          5; // other                    // Breton                  case "br":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5; // other                    // Czech                  case "cs":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Welsh                  case "cy":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5;                    // Manx                  case "gv":                      return (n' c) =>                          (n % 10).Between(1' 2) || (n % 20) == 0 ? 0 :  // one                          1;                    // Langi                  case "lag":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n > 0) && (n < 2) ? 1 : // one                          2;                    // Lithuanian                  case "lt":                      return (n' c) =>                          (n % 10) == 1 && !(n % 100).Between(11' 19) ? 0 : // one                          (n % 10).Between(2' 9) && !(n % 100).Between(11' 19) ? 1 : // few                          2;                    // Latvian                  case "lv":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n % 10) == 1 && (n % 100) != 11 ? 1 :                          2;                    // Macedonian                  case "mb":                      return (n' c) =>                          (n % 10) == 1 && n != 11 ? 0 : // one                          1;                    // Moldavian                  case "mo":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n != 1 && (n % 100).Between(1' 19)) ? 1 : // few                          2;                    // Maltese                  case "mt":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(2' 10) ? 1 : // few                          (n % 100).Between(11' 19) ? 2 : // many                          3;                    // Polish                  case "pl":                      return (n' c) =>                          n == 1 ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          (n % 10).Between(0' 1) || (n % 10).Between(5' 9) || (n % 100).Between(12' 14) ? 2 : // many                          3;                    // Romanian                  case "ro":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(1' 19) ? 1 : // few                          2;                    // Tachelhit                  case "shi":                      return (n' c) =>                          (n >= 0 && n <= 1) ? 0 : // one                          n.Between(2' 10) ? 1 : // few                          2;                    // Slovak                  case "sk":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Slovenian                  case "sl":                      return (n' c) =>                          (n % 100) == 1 ? 0 : // one                          (n % 100) == 2 ? 1 : // two                          (n % 100).Between(3' 4) ? 2 : // few                          3;                    // Central Morocco Tamazight                  case "tzm":                      return (n' c) =>                          n.Between(0' 1) || n.Between(11' 99) ? 0 : // one                          1;                      // Unknown language                  default:                      return null;              }
Magic Number,SmartFormat.Extensions,CommonLanguageRules,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\PluralLocalizationFormatter.cs,GetPluralRule,The following statement contains a magic number: switch (twoLetterISOLanguageName)              {                  // Singular                  case "az": // Azerbaijani                  case "bm": // Bambara                  case "bo": // Tibetan                  case "dz": // Dzongkha                  case "fa": // Persian                  case "hu": // Hungarian                  case "id": // Indonesian                  case "ig": // Igbo                  case "ii": // Sichuan Yi                  case "ja": // Japanese                  case "jv": // Javanese                  case "ka": // Georgian                  case "kde": // Makonde                  case "kea": // Kabuverdianu                  case "km": // Khmer                  case "kn": // Kannada                  case "ko": // Korean                  case "ms": // Malay                  case "my": // Burmese                  case "root": // Root (?)                  case "sah": // Sakha                  case "ses": // Koyraboro Senni                  case "sg": // Sango                  case "th": // Thai                  case "to": // Tonga                  case "vi": // Vietnamese                  case "wo": // Wolof                  case "yo": // Yoruba                  case "zh": // Chinese                      return (n' c) => 0;                    // Dual: one (n == 1)' other                  case "af": // Afrikaans                  case "bem": // Bembda                  case "bg": // Bulgarian                  case "bn": // Bengali                  case "brx": // Bodo                  case "ca": // Catalan                  case "cgg": // Chiga                  case "chr": // Cherokee                  case "da": // Danish                  case "de": // German                  case "dv": // Divehi                  case "ee": // Ewe                  case "el": // Greek                  case "en": // English                  case "eo": // Esperanto                  case "es": // Spanish                  case "et": // Estonian                  case "eu": // Basque                  case "fi": // Finnish                  case "fo": // Faroese                  case "fur": // Friulian                  case "fy": // Western Frisian                  case "gl": // Galician                  case "gsw": // Swiss German                  case "gu": // Gujarati                  case "ha": // Hausa                  case "haw": // Hawaiian                  case "he": // Hebrew                  case "is": // Icelandic                  case "it": // Italian                  case "kk": // Kazakh                  case "kl": // Kalaallisut                  case "ku": // Kurdish                  case "lb": // Luxembourgish                  case "lg": // Ganda                  case "lo": // Lao                  case "mas": // Masai                  case "ml": // Malayalam                  case "mn": // Mongolian                  case "mr": // Marathi                  case "nah": // Nahuatl                  case "nb": // Norwegian Bokmål                  case "ne": // Nepali                  case "nl": // Dutch                  case "nn": // Norwegian Nynorsk                  case "no": // Norwegian                  case "nyn": // Nyankole                  case "om": // Oromo                  case "or": // Oriya                  case "pa": // Punjabi                  case "pap": // Papiamento                  case "ps": // Pashto                  case "pt": // Portuguese                  case "rm": // Romansh                  case "saq": // Samburu                  case "so": // Somali                  case "sq": // Albanian                  case "ssy": // Saho                  case "sw": // Swahili                  case "sv": // Swedish                  case "syr": // Syriac                  case "ta": // Tamil                  case "te": // Telugu                  case "tk": // Turkmen                  case "tr": // Turkish                  case "ur": // Urdu                  case "wae": // Walser                  case "xog": // Soga                  case "zu": // Zulu                      return (n' c) =>                      {                          if (c == 2) return (n == 1) ? 0 : 1;                          if (c == 3) return (n == 0) ? 0 : (n == 1) ? 1 : 2;                          if (c == 4) return (n < 0) ? 0 : (n == 0) ? 1 : (n == 1) ? 2 : 3;                          return -1;                      };                    // DualWithZero: one (n == 0..1)' other                  case "ak": // Akan                  case "am": // Amharic                  case "bh": // Bihari                  case "fil": // Filipino                  case "guw": // Gun                  case "hi": // Hindi                  case "ln": // Lingala                  case "mg": // Malagasy                  case "nso": // Northern Sotho                  case "ti": // Tigrinya                  case "tl": // Tagalog                  case "wa": // Walloon                      return (n' c) => (n == 0 || n == 1) ? 0 : 1;                    // DualFromZeroToTwo: one (n == 0..2 fractionate and n != 2)' other                  case "ff": // Fulah                  case "fr": // French                  case "kab": // Kabyle                      return (n' c) => (n >= 0 && n < 2) ? 0 : 1;                    // Triple: one (n == 1)' two (n == 2)' other                  case "ga": // Irish                  case "iu": // Inuktitut                  case "ksh": // Colognian                  case "kw": // Cornish                  case "se": // Northern Sami                  case "sma": // Southern Sami                  case "smi": // Sami language                  case "smj": // Lule Sami                  case "smn": // Inari Sami                  case "sms": // Skolt Sami                      return (n' c) => (n == 1) ? 0 : (n == 2) ? 1 : 2;                    // Russian & Serbo-Croatian                  case "be": // Belarusian                  case "bs": // Bosnian                  case "hr": // Croatian                  case "ru": // Russian                  case "sh": // Serbo-Croatian                  case "sr": // Serbian                  case "uk": // Ukrainian                      return (n' c) =>                          (n % 10 == 1) && !(n % 100 == 11) ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          2;                    // Unique:                    // Arabic                  case "ar":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          (n % 100).Between(3' 10) ? 3 : // few                          (n % 100).Between(11' 99) ? 4 : // many                          5; // other                    // Breton                  case "br":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5; // other                    // Czech                  case "cs":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Welsh                  case "cy":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5;                    // Manx                  case "gv":                      return (n' c) =>                          (n % 10).Between(1' 2) || (n % 20) == 0 ? 0 :  // one                          1;                    // Langi                  case "lag":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n > 0) && (n < 2) ? 1 : // one                          2;                    // Lithuanian                  case "lt":                      return (n' c) =>                          (n % 10) == 1 && !(n % 100).Between(11' 19) ? 0 : // one                          (n % 10).Between(2' 9) && !(n % 100).Between(11' 19) ? 1 : // few                          2;                    // Latvian                  case "lv":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n % 10) == 1 && (n % 100) != 11 ? 1 :                          2;                    // Macedonian                  case "mb":                      return (n' c) =>                          (n % 10) == 1 && n != 11 ? 0 : // one                          1;                    // Moldavian                  case "mo":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n != 1 && (n % 100).Between(1' 19)) ? 1 : // few                          2;                    // Maltese                  case "mt":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(2' 10) ? 1 : // few                          (n % 100).Between(11' 19) ? 2 : // many                          3;                    // Polish                  case "pl":                      return (n' c) =>                          n == 1 ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          (n % 10).Between(0' 1) || (n % 10).Between(5' 9) || (n % 100).Between(12' 14) ? 2 : // many                          3;                    // Romanian                  case "ro":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(1' 19) ? 1 : // few                          2;                    // Tachelhit                  case "shi":                      return (n' c) =>                          (n >= 0 && n <= 1) ? 0 : // one                          n.Between(2' 10) ? 1 : // few                          2;                    // Slovak                  case "sk":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Slovenian                  case "sl":                      return (n' c) =>                          (n % 100) == 1 ? 0 : // one                          (n % 100) == 2 ? 1 : // two                          (n % 100).Between(3' 4) ? 2 : // few                          3;                    // Central Morocco Tamazight                  case "tzm":                      return (n' c) =>                          n.Between(0' 1) || n.Between(11' 99) ? 0 : // one                          1;                      // Unknown language                  default:                      return null;              }
Magic Number,SmartFormat.Extensions,CommonLanguageRules,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\PluralLocalizationFormatter.cs,GetPluralRule,The following statement contains a magic number: switch (twoLetterISOLanguageName)              {                  // Singular                  case "az": // Azerbaijani                  case "bm": // Bambara                  case "bo": // Tibetan                  case "dz": // Dzongkha                  case "fa": // Persian                  case "hu": // Hungarian                  case "id": // Indonesian                  case "ig": // Igbo                  case "ii": // Sichuan Yi                  case "ja": // Japanese                  case "jv": // Javanese                  case "ka": // Georgian                  case "kde": // Makonde                  case "kea": // Kabuverdianu                  case "km": // Khmer                  case "kn": // Kannada                  case "ko": // Korean                  case "ms": // Malay                  case "my": // Burmese                  case "root": // Root (?)                  case "sah": // Sakha                  case "ses": // Koyraboro Senni                  case "sg": // Sango                  case "th": // Thai                  case "to": // Tonga                  case "vi": // Vietnamese                  case "wo": // Wolof                  case "yo": // Yoruba                  case "zh": // Chinese                      return (n' c) => 0;                    // Dual: one (n == 1)' other                  case "af": // Afrikaans                  case "bem": // Bembda                  case "bg": // Bulgarian                  case "bn": // Bengali                  case "brx": // Bodo                  case "ca": // Catalan                  case "cgg": // Chiga                  case "chr": // Cherokee                  case "da": // Danish                  case "de": // German                  case "dv": // Divehi                  case "ee": // Ewe                  case "el": // Greek                  case "en": // English                  case "eo": // Esperanto                  case "es": // Spanish                  case "et": // Estonian                  case "eu": // Basque                  case "fi": // Finnish                  case "fo": // Faroese                  case "fur": // Friulian                  case "fy": // Western Frisian                  case "gl": // Galician                  case "gsw": // Swiss German                  case "gu": // Gujarati                  case "ha": // Hausa                  case "haw": // Hawaiian                  case "he": // Hebrew                  case "is": // Icelandic                  case "it": // Italian                  case "kk": // Kazakh                  case "kl": // Kalaallisut                  case "ku": // Kurdish                  case "lb": // Luxembourgish                  case "lg": // Ganda                  case "lo": // Lao                  case "mas": // Masai                  case "ml": // Malayalam                  case "mn": // Mongolian                  case "mr": // Marathi                  case "nah": // Nahuatl                  case "nb": // Norwegian Bokmål                  case "ne": // Nepali                  case "nl": // Dutch                  case "nn": // Norwegian Nynorsk                  case "no": // Norwegian                  case "nyn": // Nyankole                  case "om": // Oromo                  case "or": // Oriya                  case "pa": // Punjabi                  case "pap": // Papiamento                  case "ps": // Pashto                  case "pt": // Portuguese                  case "rm": // Romansh                  case "saq": // Samburu                  case "so": // Somali                  case "sq": // Albanian                  case "ssy": // Saho                  case "sw": // Swahili                  case "sv": // Swedish                  case "syr": // Syriac                  case "ta": // Tamil                  case "te": // Telugu                  case "tk": // Turkmen                  case "tr": // Turkish                  case "ur": // Urdu                  case "wae": // Walser                  case "xog": // Soga                  case "zu": // Zulu                      return (n' c) =>                      {                          if (c == 2) return (n == 1) ? 0 : 1;                          if (c == 3) return (n == 0) ? 0 : (n == 1) ? 1 : 2;                          if (c == 4) return (n < 0) ? 0 : (n == 0) ? 1 : (n == 1) ? 2 : 3;                          return -1;                      };                    // DualWithZero: one (n == 0..1)' other                  case "ak": // Akan                  case "am": // Amharic                  case "bh": // Bihari                  case "fil": // Filipino                  case "guw": // Gun                  case "hi": // Hindi                  case "ln": // Lingala                  case "mg": // Malagasy                  case "nso": // Northern Sotho                  case "ti": // Tigrinya                  case "tl": // Tagalog                  case "wa": // Walloon                      return (n' c) => (n == 0 || n == 1) ? 0 : 1;                    // DualFromZeroToTwo: one (n == 0..2 fractionate and n != 2)' other                  case "ff": // Fulah                  case "fr": // French                  case "kab": // Kabyle                      return (n' c) => (n >= 0 && n < 2) ? 0 : 1;                    // Triple: one (n == 1)' two (n == 2)' other                  case "ga": // Irish                  case "iu": // Inuktitut                  case "ksh": // Colognian                  case "kw": // Cornish                  case "se": // Northern Sami                  case "sma": // Southern Sami                  case "smi": // Sami language                  case "smj": // Lule Sami                  case "smn": // Inari Sami                  case "sms": // Skolt Sami                      return (n' c) => (n == 1) ? 0 : (n == 2) ? 1 : 2;                    // Russian & Serbo-Croatian                  case "be": // Belarusian                  case "bs": // Bosnian                  case "hr": // Croatian                  case "ru": // Russian                  case "sh": // Serbo-Croatian                  case "sr": // Serbian                  case "uk": // Ukrainian                      return (n' c) =>                          (n % 10 == 1) && !(n % 100 == 11) ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          2;                    // Unique:                    // Arabic                  case "ar":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          (n % 100).Between(3' 10) ? 3 : // few                          (n % 100).Between(11' 99) ? 4 : // many                          5; // other                    // Breton                  case "br":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5; // other                    // Czech                  case "cs":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Welsh                  case "cy":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5;                    // Manx                  case "gv":                      return (n' c) =>                          (n % 10).Between(1' 2) || (n % 20) == 0 ? 0 :  // one                          1;                    // Langi                  case "lag":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n > 0) && (n < 2) ? 1 : // one                          2;                    // Lithuanian                  case "lt":                      return (n' c) =>                          (n % 10) == 1 && !(n % 100).Between(11' 19) ? 0 : // one                          (n % 10).Between(2' 9) && !(n % 100).Between(11' 19) ? 1 : // few                          2;                    // Latvian                  case "lv":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n % 10) == 1 && (n % 100) != 11 ? 1 :                          2;                    // Macedonian                  case "mb":                      return (n' c) =>                          (n % 10) == 1 && n != 11 ? 0 : // one                          1;                    // Moldavian                  case "mo":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n != 1 && (n % 100).Between(1' 19)) ? 1 : // few                          2;                    // Maltese                  case "mt":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(2' 10) ? 1 : // few                          (n % 100).Between(11' 19) ? 2 : // many                          3;                    // Polish                  case "pl":                      return (n' c) =>                          n == 1 ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          (n % 10).Between(0' 1) || (n % 10).Between(5' 9) || (n % 100).Between(12' 14) ? 2 : // many                          3;                    // Romanian                  case "ro":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(1' 19) ? 1 : // few                          2;                    // Tachelhit                  case "shi":                      return (n' c) =>                          (n >= 0 && n <= 1) ? 0 : // one                          n.Between(2' 10) ? 1 : // few                          2;                    // Slovak                  case "sk":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Slovenian                  case "sl":                      return (n' c) =>                          (n % 100) == 1 ? 0 : // one                          (n % 100) == 2 ? 1 : // two                          (n % 100).Between(3' 4) ? 2 : // few                          3;                    // Central Morocco Tamazight                  case "tzm":                      return (n' c) =>                          n.Between(0' 1) || n.Between(11' 99) ? 0 : // one                          1;                      // Unknown language                  default:                      return null;              }
Magic Number,SmartFormat.Extensions,CommonLanguageRules,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\PluralLocalizationFormatter.cs,GetPluralRule,The following statement contains a magic number: switch (twoLetterISOLanguageName)              {                  // Singular                  case "az": // Azerbaijani                  case "bm": // Bambara                  case "bo": // Tibetan                  case "dz": // Dzongkha                  case "fa": // Persian                  case "hu": // Hungarian                  case "id": // Indonesian                  case "ig": // Igbo                  case "ii": // Sichuan Yi                  case "ja": // Japanese                  case "jv": // Javanese                  case "ka": // Georgian                  case "kde": // Makonde                  case "kea": // Kabuverdianu                  case "km": // Khmer                  case "kn": // Kannada                  case "ko": // Korean                  case "ms": // Malay                  case "my": // Burmese                  case "root": // Root (?)                  case "sah": // Sakha                  case "ses": // Koyraboro Senni                  case "sg": // Sango                  case "th": // Thai                  case "to": // Tonga                  case "vi": // Vietnamese                  case "wo": // Wolof                  case "yo": // Yoruba                  case "zh": // Chinese                      return (n' c) => 0;                    // Dual: one (n == 1)' other                  case "af": // Afrikaans                  case "bem": // Bembda                  case "bg": // Bulgarian                  case "bn": // Bengali                  case "brx": // Bodo                  case "ca": // Catalan                  case "cgg": // Chiga                  case "chr": // Cherokee                  case "da": // Danish                  case "de": // German                  case "dv": // Divehi                  case "ee": // Ewe                  case "el": // Greek                  case "en": // English                  case "eo": // Esperanto                  case "es": // Spanish                  case "et": // Estonian                  case "eu": // Basque                  case "fi": // Finnish                  case "fo": // Faroese                  case "fur": // Friulian                  case "fy": // Western Frisian                  case "gl": // Galician                  case "gsw": // Swiss German                  case "gu": // Gujarati                  case "ha": // Hausa                  case "haw": // Hawaiian                  case "he": // Hebrew                  case "is": // Icelandic                  case "it": // Italian                  case "kk": // Kazakh                  case "kl": // Kalaallisut                  case "ku": // Kurdish                  case "lb": // Luxembourgish                  case "lg": // Ganda                  case "lo": // Lao                  case "mas": // Masai                  case "ml": // Malayalam                  case "mn": // Mongolian                  case "mr": // Marathi                  case "nah": // Nahuatl                  case "nb": // Norwegian Bokmål                  case "ne": // Nepali                  case "nl": // Dutch                  case "nn": // Norwegian Nynorsk                  case "no": // Norwegian                  case "nyn": // Nyankole                  case "om": // Oromo                  case "or": // Oriya                  case "pa": // Punjabi                  case "pap": // Papiamento                  case "ps": // Pashto                  case "pt": // Portuguese                  case "rm": // Romansh                  case "saq": // Samburu                  case "so": // Somali                  case "sq": // Albanian                  case "ssy": // Saho                  case "sw": // Swahili                  case "sv": // Swedish                  case "syr": // Syriac                  case "ta": // Tamil                  case "te": // Telugu                  case "tk": // Turkmen                  case "tr": // Turkish                  case "ur": // Urdu                  case "wae": // Walser                  case "xog": // Soga                  case "zu": // Zulu                      return (n' c) =>                      {                          if (c == 2) return (n == 1) ? 0 : 1;                          if (c == 3) return (n == 0) ? 0 : (n == 1) ? 1 : 2;                          if (c == 4) return (n < 0) ? 0 : (n == 0) ? 1 : (n == 1) ? 2 : 3;                          return -1;                      };                    // DualWithZero: one (n == 0..1)' other                  case "ak": // Akan                  case "am": // Amharic                  case "bh": // Bihari                  case "fil": // Filipino                  case "guw": // Gun                  case "hi": // Hindi                  case "ln": // Lingala                  case "mg": // Malagasy                  case "nso": // Northern Sotho                  case "ti": // Tigrinya                  case "tl": // Tagalog                  case "wa": // Walloon                      return (n' c) => (n == 0 || n == 1) ? 0 : 1;                    // DualFromZeroToTwo: one (n == 0..2 fractionate and n != 2)' other                  case "ff": // Fulah                  case "fr": // French                  case "kab": // Kabyle                      return (n' c) => (n >= 0 && n < 2) ? 0 : 1;                    // Triple: one (n == 1)' two (n == 2)' other                  case "ga": // Irish                  case "iu": // Inuktitut                  case "ksh": // Colognian                  case "kw": // Cornish                  case "se": // Northern Sami                  case "sma": // Southern Sami                  case "smi": // Sami language                  case "smj": // Lule Sami                  case "smn": // Inari Sami                  case "sms": // Skolt Sami                      return (n' c) => (n == 1) ? 0 : (n == 2) ? 1 : 2;                    // Russian & Serbo-Croatian                  case "be": // Belarusian                  case "bs": // Bosnian                  case "hr": // Croatian                  case "ru": // Russian                  case "sh": // Serbo-Croatian                  case "sr": // Serbian                  case "uk": // Ukrainian                      return (n' c) =>                          (n % 10 == 1) && !(n % 100 == 11) ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          2;                    // Unique:                    // Arabic                  case "ar":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          (n % 100).Between(3' 10) ? 3 : // few                          (n % 100).Between(11' 99) ? 4 : // many                          5; // other                    // Breton                  case "br":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5; // other                    // Czech                  case "cs":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Welsh                  case "cy":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5;                    // Manx                  case "gv":                      return (n' c) =>                          (n % 10).Between(1' 2) || (n % 20) == 0 ? 0 :  // one                          1;                    // Langi                  case "lag":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n > 0) && (n < 2) ? 1 : // one                          2;                    // Lithuanian                  case "lt":                      return (n' c) =>                          (n % 10) == 1 && !(n % 100).Between(11' 19) ? 0 : // one                          (n % 10).Between(2' 9) && !(n % 100).Between(11' 19) ? 1 : // few                          2;                    // Latvian                  case "lv":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n % 10) == 1 && (n % 100) != 11 ? 1 :                          2;                    // Macedonian                  case "mb":                      return (n' c) =>                          (n % 10) == 1 && n != 11 ? 0 : // one                          1;                    // Moldavian                  case "mo":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n != 1 && (n % 100).Between(1' 19)) ? 1 : // few                          2;                    // Maltese                  case "mt":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(2' 10) ? 1 : // few                          (n % 100).Between(11' 19) ? 2 : // many                          3;                    // Polish                  case "pl":                      return (n' c) =>                          n == 1 ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          (n % 10).Between(0' 1) || (n % 10).Between(5' 9) || (n % 100).Between(12' 14) ? 2 : // many                          3;                    // Romanian                  case "ro":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(1' 19) ? 1 : // few                          2;                    // Tachelhit                  case "shi":                      return (n' c) =>                          (n >= 0 && n <= 1) ? 0 : // one                          n.Between(2' 10) ? 1 : // few                          2;                    // Slovak                  case "sk":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Slovenian                  case "sl":                      return (n' c) =>                          (n % 100) == 1 ? 0 : // one                          (n % 100) == 2 ? 1 : // two                          (n % 100).Between(3' 4) ? 2 : // few                          3;                    // Central Morocco Tamazight                  case "tzm":                      return (n' c) =>                          n.Between(0' 1) || n.Between(11' 99) ? 0 : // one                          1;                      // Unknown language                  default:                      return null;              }
Magic Number,SmartFormat.Extensions,CommonLanguageRules,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\PluralLocalizationFormatter.cs,GetPluralRule,The following statement contains a magic number: switch (twoLetterISOLanguageName)              {                  // Singular                  case "az": // Azerbaijani                  case "bm": // Bambara                  case "bo": // Tibetan                  case "dz": // Dzongkha                  case "fa": // Persian                  case "hu": // Hungarian                  case "id": // Indonesian                  case "ig": // Igbo                  case "ii": // Sichuan Yi                  case "ja": // Japanese                  case "jv": // Javanese                  case "ka": // Georgian                  case "kde": // Makonde                  case "kea": // Kabuverdianu                  case "km": // Khmer                  case "kn": // Kannada                  case "ko": // Korean                  case "ms": // Malay                  case "my": // Burmese                  case "root": // Root (?)                  case "sah": // Sakha                  case "ses": // Koyraboro Senni                  case "sg": // Sango                  case "th": // Thai                  case "to": // Tonga                  case "vi": // Vietnamese                  case "wo": // Wolof                  case "yo": // Yoruba                  case "zh": // Chinese                      return (n' c) => 0;                    // Dual: one (n == 1)' other                  case "af": // Afrikaans                  case "bem": // Bembda                  case "bg": // Bulgarian                  case "bn": // Bengali                  case "brx": // Bodo                  case "ca": // Catalan                  case "cgg": // Chiga                  case "chr": // Cherokee                  case "da": // Danish                  case "de": // German                  case "dv": // Divehi                  case "ee": // Ewe                  case "el": // Greek                  case "en": // English                  case "eo": // Esperanto                  case "es": // Spanish                  case "et": // Estonian                  case "eu": // Basque                  case "fi": // Finnish                  case "fo": // Faroese                  case "fur": // Friulian                  case "fy": // Western Frisian                  case "gl": // Galician                  case "gsw": // Swiss German                  case "gu": // Gujarati                  case "ha": // Hausa                  case "haw": // Hawaiian                  case "he": // Hebrew                  case "is": // Icelandic                  case "it": // Italian                  case "kk": // Kazakh                  case "kl": // Kalaallisut                  case "ku": // Kurdish                  case "lb": // Luxembourgish                  case "lg": // Ganda                  case "lo": // Lao                  case "mas": // Masai                  case "ml": // Malayalam                  case "mn": // Mongolian                  case "mr": // Marathi                  case "nah": // Nahuatl                  case "nb": // Norwegian Bokmål                  case "ne": // Nepali                  case "nl": // Dutch                  case "nn": // Norwegian Nynorsk                  case "no": // Norwegian                  case "nyn": // Nyankole                  case "om": // Oromo                  case "or": // Oriya                  case "pa": // Punjabi                  case "pap": // Papiamento                  case "ps": // Pashto                  case "pt": // Portuguese                  case "rm": // Romansh                  case "saq": // Samburu                  case "so": // Somali                  case "sq": // Albanian                  case "ssy": // Saho                  case "sw": // Swahili                  case "sv": // Swedish                  case "syr": // Syriac                  case "ta": // Tamil                  case "te": // Telugu                  case "tk": // Turkmen                  case "tr": // Turkish                  case "ur": // Urdu                  case "wae": // Walser                  case "xog": // Soga                  case "zu": // Zulu                      return (n' c) =>                      {                          if (c == 2) return (n == 1) ? 0 : 1;                          if (c == 3) return (n == 0) ? 0 : (n == 1) ? 1 : 2;                          if (c == 4) return (n < 0) ? 0 : (n == 0) ? 1 : (n == 1) ? 2 : 3;                          return -1;                      };                    // DualWithZero: one (n == 0..1)' other                  case "ak": // Akan                  case "am": // Amharic                  case "bh": // Bihari                  case "fil": // Filipino                  case "guw": // Gun                  case "hi": // Hindi                  case "ln": // Lingala                  case "mg": // Malagasy                  case "nso": // Northern Sotho                  case "ti": // Tigrinya                  case "tl": // Tagalog                  case "wa": // Walloon                      return (n' c) => (n == 0 || n == 1) ? 0 : 1;                    // DualFromZeroToTwo: one (n == 0..2 fractionate and n != 2)' other                  case "ff": // Fulah                  case "fr": // French                  case "kab": // Kabyle                      return (n' c) => (n >= 0 && n < 2) ? 0 : 1;                    // Triple: one (n == 1)' two (n == 2)' other                  case "ga": // Irish                  case "iu": // Inuktitut                  case "ksh": // Colognian                  case "kw": // Cornish                  case "se": // Northern Sami                  case "sma": // Southern Sami                  case "smi": // Sami language                  case "smj": // Lule Sami                  case "smn": // Inari Sami                  case "sms": // Skolt Sami                      return (n' c) => (n == 1) ? 0 : (n == 2) ? 1 : 2;                    // Russian & Serbo-Croatian                  case "be": // Belarusian                  case "bs": // Bosnian                  case "hr": // Croatian                  case "ru": // Russian                  case "sh": // Serbo-Croatian                  case "sr": // Serbian                  case "uk": // Ukrainian                      return (n' c) =>                          (n % 10 == 1) && !(n % 100 == 11) ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          2;                    // Unique:                    // Arabic                  case "ar":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          (n % 100).Between(3' 10) ? 3 : // few                          (n % 100).Between(11' 99) ? 4 : // many                          5; // other                    // Breton                  case "br":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5; // other                    // Czech                  case "cs":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Welsh                  case "cy":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5;                    // Manx                  case "gv":                      return (n' c) =>                          (n % 10).Between(1' 2) || (n % 20) == 0 ? 0 :  // one                          1;                    // Langi                  case "lag":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n > 0) && (n < 2) ? 1 : // one                          2;                    // Lithuanian                  case "lt":                      return (n' c) =>                          (n % 10) == 1 && !(n % 100).Between(11' 19) ? 0 : // one                          (n % 10).Between(2' 9) && !(n % 100).Between(11' 19) ? 1 : // few                          2;                    // Latvian                  case "lv":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n % 10) == 1 && (n % 100) != 11 ? 1 :                          2;                    // Macedonian                  case "mb":                      return (n' c) =>                          (n % 10) == 1 && n != 11 ? 0 : // one                          1;                    // Moldavian                  case "mo":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n != 1 && (n % 100).Between(1' 19)) ? 1 : // few                          2;                    // Maltese                  case "mt":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(2' 10) ? 1 : // few                          (n % 100).Between(11' 19) ? 2 : // many                          3;                    // Polish                  case "pl":                      return (n' c) =>                          n == 1 ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          (n % 10).Between(0' 1) || (n % 10).Between(5' 9) || (n % 100).Between(12' 14) ? 2 : // many                          3;                    // Romanian                  case "ro":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(1' 19) ? 1 : // few                          2;                    // Tachelhit                  case "shi":                      return (n' c) =>                          (n >= 0 && n <= 1) ? 0 : // one                          n.Between(2' 10) ? 1 : // few                          2;                    // Slovak                  case "sk":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Slovenian                  case "sl":                      return (n' c) =>                          (n % 100) == 1 ? 0 : // one                          (n % 100) == 2 ? 1 : // two                          (n % 100).Between(3' 4) ? 2 : // few                          3;                    // Central Morocco Tamazight                  case "tzm":                      return (n' c) =>                          n.Between(0' 1) || n.Between(11' 99) ? 0 : // one                          1;                      // Unknown language                  default:                      return null;              }
Magic Number,SmartFormat.Extensions,CommonLanguageRules,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\PluralLocalizationFormatter.cs,GetPluralRule,The following statement contains a magic number: switch (twoLetterISOLanguageName)              {                  // Singular                  case "az": // Azerbaijani                  case "bm": // Bambara                  case "bo": // Tibetan                  case "dz": // Dzongkha                  case "fa": // Persian                  case "hu": // Hungarian                  case "id": // Indonesian                  case "ig": // Igbo                  case "ii": // Sichuan Yi                  case "ja": // Japanese                  case "jv": // Javanese                  case "ka": // Georgian                  case "kde": // Makonde                  case "kea": // Kabuverdianu                  case "km": // Khmer                  case "kn": // Kannada                  case "ko": // Korean                  case "ms": // Malay                  case "my": // Burmese                  case "root": // Root (?)                  case "sah": // Sakha                  case "ses": // Koyraboro Senni                  case "sg": // Sango                  case "th": // Thai                  case "to": // Tonga                  case "vi": // Vietnamese                  case "wo": // Wolof                  case "yo": // Yoruba                  case "zh": // Chinese                      return (n' c) => 0;                    // Dual: one (n == 1)' other                  case "af": // Afrikaans                  case "bem": // Bembda                  case "bg": // Bulgarian                  case "bn": // Bengali                  case "brx": // Bodo                  case "ca": // Catalan                  case "cgg": // Chiga                  case "chr": // Cherokee                  case "da": // Danish                  case "de": // German                  case "dv": // Divehi                  case "ee": // Ewe                  case "el": // Greek                  case "en": // English                  case "eo": // Esperanto                  case "es": // Spanish                  case "et": // Estonian                  case "eu": // Basque                  case "fi": // Finnish                  case "fo": // Faroese                  case "fur": // Friulian                  case "fy": // Western Frisian                  case "gl": // Galician                  case "gsw": // Swiss German                  case "gu": // Gujarati                  case "ha": // Hausa                  case "haw": // Hawaiian                  case "he": // Hebrew                  case "is": // Icelandic                  case "it": // Italian                  case "kk": // Kazakh                  case "kl": // Kalaallisut                  case "ku": // Kurdish                  case "lb": // Luxembourgish                  case "lg": // Ganda                  case "lo": // Lao                  case "mas": // Masai                  case "ml": // Malayalam                  case "mn": // Mongolian                  case "mr": // Marathi                  case "nah": // Nahuatl                  case "nb": // Norwegian Bokmål                  case "ne": // Nepali                  case "nl": // Dutch                  case "nn": // Norwegian Nynorsk                  case "no": // Norwegian                  case "nyn": // Nyankole                  case "om": // Oromo                  case "or": // Oriya                  case "pa": // Punjabi                  case "pap": // Papiamento                  case "ps": // Pashto                  case "pt": // Portuguese                  case "rm": // Romansh                  case "saq": // Samburu                  case "so": // Somali                  case "sq": // Albanian                  case "ssy": // Saho                  case "sw": // Swahili                  case "sv": // Swedish                  case "syr": // Syriac                  case "ta": // Tamil                  case "te": // Telugu                  case "tk": // Turkmen                  case "tr": // Turkish                  case "ur": // Urdu                  case "wae": // Walser                  case "xog": // Soga                  case "zu": // Zulu                      return (n' c) =>                      {                          if (c == 2) return (n == 1) ? 0 : 1;                          if (c == 3) return (n == 0) ? 0 : (n == 1) ? 1 : 2;                          if (c == 4) return (n < 0) ? 0 : (n == 0) ? 1 : (n == 1) ? 2 : 3;                          return -1;                      };                    // DualWithZero: one (n == 0..1)' other                  case "ak": // Akan                  case "am": // Amharic                  case "bh": // Bihari                  case "fil": // Filipino                  case "guw": // Gun                  case "hi": // Hindi                  case "ln": // Lingala                  case "mg": // Malagasy                  case "nso": // Northern Sotho                  case "ti": // Tigrinya                  case "tl": // Tagalog                  case "wa": // Walloon                      return (n' c) => (n == 0 || n == 1) ? 0 : 1;                    // DualFromZeroToTwo: one (n == 0..2 fractionate and n != 2)' other                  case "ff": // Fulah                  case "fr": // French                  case "kab": // Kabyle                      return (n' c) => (n >= 0 && n < 2) ? 0 : 1;                    // Triple: one (n == 1)' two (n == 2)' other                  case "ga": // Irish                  case "iu": // Inuktitut                  case "ksh": // Colognian                  case "kw": // Cornish                  case "se": // Northern Sami                  case "sma": // Southern Sami                  case "smi": // Sami language                  case "smj": // Lule Sami                  case "smn": // Inari Sami                  case "sms": // Skolt Sami                      return (n' c) => (n == 1) ? 0 : (n == 2) ? 1 : 2;                    // Russian & Serbo-Croatian                  case "be": // Belarusian                  case "bs": // Bosnian                  case "hr": // Croatian                  case "ru": // Russian                  case "sh": // Serbo-Croatian                  case "sr": // Serbian                  case "uk": // Ukrainian                      return (n' c) =>                          (n % 10 == 1) && !(n % 100 == 11) ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          2;                    // Unique:                    // Arabic                  case "ar":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          (n % 100).Between(3' 10) ? 3 : // few                          (n % 100).Between(11' 99) ? 4 : // many                          5; // other                    // Breton                  case "br":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5; // other                    // Czech                  case "cs":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Welsh                  case "cy":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5;                    // Manx                  case "gv":                      return (n' c) =>                          (n % 10).Between(1' 2) || (n % 20) == 0 ? 0 :  // one                          1;                    // Langi                  case "lag":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n > 0) && (n < 2) ? 1 : // one                          2;                    // Lithuanian                  case "lt":                      return (n' c) =>                          (n % 10) == 1 && !(n % 100).Between(11' 19) ? 0 : // one                          (n % 10).Between(2' 9) && !(n % 100).Between(11' 19) ? 1 : // few                          2;                    // Latvian                  case "lv":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n % 10) == 1 && (n % 100) != 11 ? 1 :                          2;                    // Macedonian                  case "mb":                      return (n' c) =>                          (n % 10) == 1 && n != 11 ? 0 : // one                          1;                    // Moldavian                  case "mo":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n != 1 && (n % 100).Between(1' 19)) ? 1 : // few                          2;                    // Maltese                  case "mt":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(2' 10) ? 1 : // few                          (n % 100).Between(11' 19) ? 2 : // many                          3;                    // Polish                  case "pl":                      return (n' c) =>                          n == 1 ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          (n % 10).Between(0' 1) || (n % 10).Between(5' 9) || (n % 100).Between(12' 14) ? 2 : // many                          3;                    // Romanian                  case "ro":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(1' 19) ? 1 : // few                          2;                    // Tachelhit                  case "shi":                      return (n' c) =>                          (n >= 0 && n <= 1) ? 0 : // one                          n.Between(2' 10) ? 1 : // few                          2;                    // Slovak                  case "sk":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Slovenian                  case "sl":                      return (n' c) =>                          (n % 100) == 1 ? 0 : // one                          (n % 100) == 2 ? 1 : // two                          (n % 100).Between(3' 4) ? 2 : // few                          3;                    // Central Morocco Tamazight                  case "tzm":                      return (n' c) =>                          n.Between(0' 1) || n.Between(11' 99) ? 0 : // one                          1;                      // Unknown language                  default:                      return null;              }
Magic Number,SmartFormat.Extensions,CommonLanguageRules,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\PluralLocalizationFormatter.cs,GetPluralRule,The following statement contains a magic number: switch (twoLetterISOLanguageName)              {                  // Singular                  case "az": // Azerbaijani                  case "bm": // Bambara                  case "bo": // Tibetan                  case "dz": // Dzongkha                  case "fa": // Persian                  case "hu": // Hungarian                  case "id": // Indonesian                  case "ig": // Igbo                  case "ii": // Sichuan Yi                  case "ja": // Japanese                  case "jv": // Javanese                  case "ka": // Georgian                  case "kde": // Makonde                  case "kea": // Kabuverdianu                  case "km": // Khmer                  case "kn": // Kannada                  case "ko": // Korean                  case "ms": // Malay                  case "my": // Burmese                  case "root": // Root (?)                  case "sah": // Sakha                  case "ses": // Koyraboro Senni                  case "sg": // Sango                  case "th": // Thai                  case "to": // Tonga                  case "vi": // Vietnamese                  case "wo": // Wolof                  case "yo": // Yoruba                  case "zh": // Chinese                      return (n' c) => 0;                    // Dual: one (n == 1)' other                  case "af": // Afrikaans                  case "bem": // Bembda                  case "bg": // Bulgarian                  case "bn": // Bengali                  case "brx": // Bodo                  case "ca": // Catalan                  case "cgg": // Chiga                  case "chr": // Cherokee                  case "da": // Danish                  case "de": // German                  case "dv": // Divehi                  case "ee": // Ewe                  case "el": // Greek                  case "en": // English                  case "eo": // Esperanto                  case "es": // Spanish                  case "et": // Estonian                  case "eu": // Basque                  case "fi": // Finnish                  case "fo": // Faroese                  case "fur": // Friulian                  case "fy": // Western Frisian                  case "gl": // Galician                  case "gsw": // Swiss German                  case "gu": // Gujarati                  case "ha": // Hausa                  case "haw": // Hawaiian                  case "he": // Hebrew                  case "is": // Icelandic                  case "it": // Italian                  case "kk": // Kazakh                  case "kl": // Kalaallisut                  case "ku": // Kurdish                  case "lb": // Luxembourgish                  case "lg": // Ganda                  case "lo": // Lao                  case "mas": // Masai                  case "ml": // Malayalam                  case "mn": // Mongolian                  case "mr": // Marathi                  case "nah": // Nahuatl                  case "nb": // Norwegian Bokmål                  case "ne": // Nepali                  case "nl": // Dutch                  case "nn": // Norwegian Nynorsk                  case "no": // Norwegian                  case "nyn": // Nyankole                  case "om": // Oromo                  case "or": // Oriya                  case "pa": // Punjabi                  case "pap": // Papiamento                  case "ps": // Pashto                  case "pt": // Portuguese                  case "rm": // Romansh                  case "saq": // Samburu                  case "so": // Somali                  case "sq": // Albanian                  case "ssy": // Saho                  case "sw": // Swahili                  case "sv": // Swedish                  case "syr": // Syriac                  case "ta": // Tamil                  case "te": // Telugu                  case "tk": // Turkmen                  case "tr": // Turkish                  case "ur": // Urdu                  case "wae": // Walser                  case "xog": // Soga                  case "zu": // Zulu                      return (n' c) =>                      {                          if (c == 2) return (n == 1) ? 0 : 1;                          if (c == 3) return (n == 0) ? 0 : (n == 1) ? 1 : 2;                          if (c == 4) return (n < 0) ? 0 : (n == 0) ? 1 : (n == 1) ? 2 : 3;                          return -1;                      };                    // DualWithZero: one (n == 0..1)' other                  case "ak": // Akan                  case "am": // Amharic                  case "bh": // Bihari                  case "fil": // Filipino                  case "guw": // Gun                  case "hi": // Hindi                  case "ln": // Lingala                  case "mg": // Malagasy                  case "nso": // Northern Sotho                  case "ti": // Tigrinya                  case "tl": // Tagalog                  case "wa": // Walloon                      return (n' c) => (n == 0 || n == 1) ? 0 : 1;                    // DualFromZeroToTwo: one (n == 0..2 fractionate and n != 2)' other                  case "ff": // Fulah                  case "fr": // French                  case "kab": // Kabyle                      return (n' c) => (n >= 0 && n < 2) ? 0 : 1;                    // Triple: one (n == 1)' two (n == 2)' other                  case "ga": // Irish                  case "iu": // Inuktitut                  case "ksh": // Colognian                  case "kw": // Cornish                  case "se": // Northern Sami                  case "sma": // Southern Sami                  case "smi": // Sami language                  case "smj": // Lule Sami                  case "smn": // Inari Sami                  case "sms": // Skolt Sami                      return (n' c) => (n == 1) ? 0 : (n == 2) ? 1 : 2;                    // Russian & Serbo-Croatian                  case "be": // Belarusian                  case "bs": // Bosnian                  case "hr": // Croatian                  case "ru": // Russian                  case "sh": // Serbo-Croatian                  case "sr": // Serbian                  case "uk": // Ukrainian                      return (n' c) =>                          (n % 10 == 1) && !(n % 100 == 11) ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          2;                    // Unique:                    // Arabic                  case "ar":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          (n % 100).Between(3' 10) ? 3 : // few                          (n % 100).Between(11' 99) ? 4 : // many                          5; // other                    // Breton                  case "br":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5; // other                    // Czech                  case "cs":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Welsh                  case "cy":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5;                    // Manx                  case "gv":                      return (n' c) =>                          (n % 10).Between(1' 2) || (n % 20) == 0 ? 0 :  // one                          1;                    // Langi                  case "lag":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n > 0) && (n < 2) ? 1 : // one                          2;                    // Lithuanian                  case "lt":                      return (n' c) =>                          (n % 10) == 1 && !(n % 100).Between(11' 19) ? 0 : // one                          (n % 10).Between(2' 9) && !(n % 100).Between(11' 19) ? 1 : // few                          2;                    // Latvian                  case "lv":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n % 10) == 1 && (n % 100) != 11 ? 1 :                          2;                    // Macedonian                  case "mb":                      return (n' c) =>                          (n % 10) == 1 && n != 11 ? 0 : // one                          1;                    // Moldavian                  case "mo":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n != 1 && (n % 100).Between(1' 19)) ? 1 : // few                          2;                    // Maltese                  case "mt":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(2' 10) ? 1 : // few                          (n % 100).Between(11' 19) ? 2 : // many                          3;                    // Polish                  case "pl":                      return (n' c) =>                          n == 1 ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          (n % 10).Between(0' 1) || (n % 10).Between(5' 9) || (n % 100).Between(12' 14) ? 2 : // many                          3;                    // Romanian                  case "ro":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(1' 19) ? 1 : // few                          2;                    // Tachelhit                  case "shi":                      return (n' c) =>                          (n >= 0 && n <= 1) ? 0 : // one                          n.Between(2' 10) ? 1 : // few                          2;                    // Slovak                  case "sk":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Slovenian                  case "sl":                      return (n' c) =>                          (n % 100) == 1 ? 0 : // one                          (n % 100) == 2 ? 1 : // two                          (n % 100).Between(3' 4) ? 2 : // few                          3;                    // Central Morocco Tamazight                  case "tzm":                      return (n' c) =>                          n.Between(0' 1) || n.Between(11' 99) ? 0 : // one                          1;                      // Unknown language                  default:                      return null;              }
Magic Number,SmartFormat.Extensions,CommonLanguageRules,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\PluralLocalizationFormatter.cs,GetPluralRule,The following statement contains a magic number: switch (twoLetterISOLanguageName)              {                  // Singular                  case "az": // Azerbaijani                  case "bm": // Bambara                  case "bo": // Tibetan                  case "dz": // Dzongkha                  case "fa": // Persian                  case "hu": // Hungarian                  case "id": // Indonesian                  case "ig": // Igbo                  case "ii": // Sichuan Yi                  case "ja": // Japanese                  case "jv": // Javanese                  case "ka": // Georgian                  case "kde": // Makonde                  case "kea": // Kabuverdianu                  case "km": // Khmer                  case "kn": // Kannada                  case "ko": // Korean                  case "ms": // Malay                  case "my": // Burmese                  case "root": // Root (?)                  case "sah": // Sakha                  case "ses": // Koyraboro Senni                  case "sg": // Sango                  case "th": // Thai                  case "to": // Tonga                  case "vi": // Vietnamese                  case "wo": // Wolof                  case "yo": // Yoruba                  case "zh": // Chinese                      return (n' c) => 0;                    // Dual: one (n == 1)' other                  case "af": // Afrikaans                  case "bem": // Bembda                  case "bg": // Bulgarian                  case "bn": // Bengali                  case "brx": // Bodo                  case "ca": // Catalan                  case "cgg": // Chiga                  case "chr": // Cherokee                  case "da": // Danish                  case "de": // German                  case "dv": // Divehi                  case "ee": // Ewe                  case "el": // Greek                  case "en": // English                  case "eo": // Esperanto                  case "es": // Spanish                  case "et": // Estonian                  case "eu": // Basque                  case "fi": // Finnish                  case "fo": // Faroese                  case "fur": // Friulian                  case "fy": // Western Frisian                  case "gl": // Galician                  case "gsw": // Swiss German                  case "gu": // Gujarati                  case "ha": // Hausa                  case "haw": // Hawaiian                  case "he": // Hebrew                  case "is": // Icelandic                  case "it": // Italian                  case "kk": // Kazakh                  case "kl": // Kalaallisut                  case "ku": // Kurdish                  case "lb": // Luxembourgish                  case "lg": // Ganda                  case "lo": // Lao                  case "mas": // Masai                  case "ml": // Malayalam                  case "mn": // Mongolian                  case "mr": // Marathi                  case "nah": // Nahuatl                  case "nb": // Norwegian Bokmål                  case "ne": // Nepali                  case "nl": // Dutch                  case "nn": // Norwegian Nynorsk                  case "no": // Norwegian                  case "nyn": // Nyankole                  case "om": // Oromo                  case "or": // Oriya                  case "pa": // Punjabi                  case "pap": // Papiamento                  case "ps": // Pashto                  case "pt": // Portuguese                  case "rm": // Romansh                  case "saq": // Samburu                  case "so": // Somali                  case "sq": // Albanian                  case "ssy": // Saho                  case "sw": // Swahili                  case "sv": // Swedish                  case "syr": // Syriac                  case "ta": // Tamil                  case "te": // Telugu                  case "tk": // Turkmen                  case "tr": // Turkish                  case "ur": // Urdu                  case "wae": // Walser                  case "xog": // Soga                  case "zu": // Zulu                      return (n' c) =>                      {                          if (c == 2) return (n == 1) ? 0 : 1;                          if (c == 3) return (n == 0) ? 0 : (n == 1) ? 1 : 2;                          if (c == 4) return (n < 0) ? 0 : (n == 0) ? 1 : (n == 1) ? 2 : 3;                          return -1;                      };                    // DualWithZero: one (n == 0..1)' other                  case "ak": // Akan                  case "am": // Amharic                  case "bh": // Bihari                  case "fil": // Filipino                  case "guw": // Gun                  case "hi": // Hindi                  case "ln": // Lingala                  case "mg": // Malagasy                  case "nso": // Northern Sotho                  case "ti": // Tigrinya                  case "tl": // Tagalog                  case "wa": // Walloon                      return (n' c) => (n == 0 || n == 1) ? 0 : 1;                    // DualFromZeroToTwo: one (n == 0..2 fractionate and n != 2)' other                  case "ff": // Fulah                  case "fr": // French                  case "kab": // Kabyle                      return (n' c) => (n >= 0 && n < 2) ? 0 : 1;                    // Triple: one (n == 1)' two (n == 2)' other                  case "ga": // Irish                  case "iu": // Inuktitut                  case "ksh": // Colognian                  case "kw": // Cornish                  case "se": // Northern Sami                  case "sma": // Southern Sami                  case "smi": // Sami language                  case "smj": // Lule Sami                  case "smn": // Inari Sami                  case "sms": // Skolt Sami                      return (n' c) => (n == 1) ? 0 : (n == 2) ? 1 : 2;                    // Russian & Serbo-Croatian                  case "be": // Belarusian                  case "bs": // Bosnian                  case "hr": // Croatian                  case "ru": // Russian                  case "sh": // Serbo-Croatian                  case "sr": // Serbian                  case "uk": // Ukrainian                      return (n' c) =>                          (n % 10 == 1) && !(n % 100 == 11) ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          2;                    // Unique:                    // Arabic                  case "ar":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          (n % 100).Between(3' 10) ? 3 : // few                          (n % 100).Between(11' 99) ? 4 : // many                          5; // other                    // Breton                  case "br":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5; // other                    // Czech                  case "cs":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Welsh                  case "cy":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5;                    // Manx                  case "gv":                      return (n' c) =>                          (n % 10).Between(1' 2) || (n % 20) == 0 ? 0 :  // one                          1;                    // Langi                  case "lag":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n > 0) && (n < 2) ? 1 : // one                          2;                    // Lithuanian                  case "lt":                      return (n' c) =>                          (n % 10) == 1 && !(n % 100).Between(11' 19) ? 0 : // one                          (n % 10).Between(2' 9) && !(n % 100).Between(11' 19) ? 1 : // few                          2;                    // Latvian                  case "lv":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n % 10) == 1 && (n % 100) != 11 ? 1 :                          2;                    // Macedonian                  case "mb":                      return (n' c) =>                          (n % 10) == 1 && n != 11 ? 0 : // one                          1;                    // Moldavian                  case "mo":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n != 1 && (n % 100).Between(1' 19)) ? 1 : // few                          2;                    // Maltese                  case "mt":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(2' 10) ? 1 : // few                          (n % 100).Between(11' 19) ? 2 : // many                          3;                    // Polish                  case "pl":                      return (n' c) =>                          n == 1 ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          (n % 10).Between(0' 1) || (n % 10).Between(5' 9) || (n % 100).Between(12' 14) ? 2 : // many                          3;                    // Romanian                  case "ro":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(1' 19) ? 1 : // few                          2;                    // Tachelhit                  case "shi":                      return (n' c) =>                          (n >= 0 && n <= 1) ? 0 : // one                          n.Between(2' 10) ? 1 : // few                          2;                    // Slovak                  case "sk":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Slovenian                  case "sl":                      return (n' c) =>                          (n % 100) == 1 ? 0 : // one                          (n % 100) == 2 ? 1 : // two                          (n % 100).Between(3' 4) ? 2 : // few                          3;                    // Central Morocco Tamazight                  case "tzm":                      return (n' c) =>                          n.Between(0' 1) || n.Between(11' 99) ? 0 : // one                          1;                      // Unknown language                  default:                      return null;              }
Magic Number,SmartFormat.Extensions,CommonLanguageRules,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\PluralLocalizationFormatter.cs,GetPluralRule,The following statement contains a magic number: switch (twoLetterISOLanguageName)              {                  // Singular                  case "az": // Azerbaijani                  case "bm": // Bambara                  case "bo": // Tibetan                  case "dz": // Dzongkha                  case "fa": // Persian                  case "hu": // Hungarian                  case "id": // Indonesian                  case "ig": // Igbo                  case "ii": // Sichuan Yi                  case "ja": // Japanese                  case "jv": // Javanese                  case "ka": // Georgian                  case "kde": // Makonde                  case "kea": // Kabuverdianu                  case "km": // Khmer                  case "kn": // Kannada                  case "ko": // Korean                  case "ms": // Malay                  case "my": // Burmese                  case "root": // Root (?)                  case "sah": // Sakha                  case "ses": // Koyraboro Senni                  case "sg": // Sango                  case "th": // Thai                  case "to": // Tonga                  case "vi": // Vietnamese                  case "wo": // Wolof                  case "yo": // Yoruba                  case "zh": // Chinese                      return (n' c) => 0;                    // Dual: one (n == 1)' other                  case "af": // Afrikaans                  case "bem": // Bembda                  case "bg": // Bulgarian                  case "bn": // Bengali                  case "brx": // Bodo                  case "ca": // Catalan                  case "cgg": // Chiga                  case "chr": // Cherokee                  case "da": // Danish                  case "de": // German                  case "dv": // Divehi                  case "ee": // Ewe                  case "el": // Greek                  case "en": // English                  case "eo": // Esperanto                  case "es": // Spanish                  case "et": // Estonian                  case "eu": // Basque                  case "fi": // Finnish                  case "fo": // Faroese                  case "fur": // Friulian                  case "fy": // Western Frisian                  case "gl": // Galician                  case "gsw": // Swiss German                  case "gu": // Gujarati                  case "ha": // Hausa                  case "haw": // Hawaiian                  case "he": // Hebrew                  case "is": // Icelandic                  case "it": // Italian                  case "kk": // Kazakh                  case "kl": // Kalaallisut                  case "ku": // Kurdish                  case "lb": // Luxembourgish                  case "lg": // Ganda                  case "lo": // Lao                  case "mas": // Masai                  case "ml": // Malayalam                  case "mn": // Mongolian                  case "mr": // Marathi                  case "nah": // Nahuatl                  case "nb": // Norwegian Bokmål                  case "ne": // Nepali                  case "nl": // Dutch                  case "nn": // Norwegian Nynorsk                  case "no": // Norwegian                  case "nyn": // Nyankole                  case "om": // Oromo                  case "or": // Oriya                  case "pa": // Punjabi                  case "pap": // Papiamento                  case "ps": // Pashto                  case "pt": // Portuguese                  case "rm": // Romansh                  case "saq": // Samburu                  case "so": // Somali                  case "sq": // Albanian                  case "ssy": // Saho                  case "sw": // Swahili                  case "sv": // Swedish                  case "syr": // Syriac                  case "ta": // Tamil                  case "te": // Telugu                  case "tk": // Turkmen                  case "tr": // Turkish                  case "ur": // Urdu                  case "wae": // Walser                  case "xog": // Soga                  case "zu": // Zulu                      return (n' c) =>                      {                          if (c == 2) return (n == 1) ? 0 : 1;                          if (c == 3) return (n == 0) ? 0 : (n == 1) ? 1 : 2;                          if (c == 4) return (n < 0) ? 0 : (n == 0) ? 1 : (n == 1) ? 2 : 3;                          return -1;                      };                    // DualWithZero: one (n == 0..1)' other                  case "ak": // Akan                  case "am": // Amharic                  case "bh": // Bihari                  case "fil": // Filipino                  case "guw": // Gun                  case "hi": // Hindi                  case "ln": // Lingala                  case "mg": // Malagasy                  case "nso": // Northern Sotho                  case "ti": // Tigrinya                  case "tl": // Tagalog                  case "wa": // Walloon                      return (n' c) => (n == 0 || n == 1) ? 0 : 1;                    // DualFromZeroToTwo: one (n == 0..2 fractionate and n != 2)' other                  case "ff": // Fulah                  case "fr": // French                  case "kab": // Kabyle                      return (n' c) => (n >= 0 && n < 2) ? 0 : 1;                    // Triple: one (n == 1)' two (n == 2)' other                  case "ga": // Irish                  case "iu": // Inuktitut                  case "ksh": // Colognian                  case "kw": // Cornish                  case "se": // Northern Sami                  case "sma": // Southern Sami                  case "smi": // Sami language                  case "smj": // Lule Sami                  case "smn": // Inari Sami                  case "sms": // Skolt Sami                      return (n' c) => (n == 1) ? 0 : (n == 2) ? 1 : 2;                    // Russian & Serbo-Croatian                  case "be": // Belarusian                  case "bs": // Bosnian                  case "hr": // Croatian                  case "ru": // Russian                  case "sh": // Serbo-Croatian                  case "sr": // Serbian                  case "uk": // Ukrainian                      return (n' c) =>                          (n % 10 == 1) && !(n % 100 == 11) ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          2;                    // Unique:                    // Arabic                  case "ar":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          (n % 100).Between(3' 10) ? 3 : // few                          (n % 100).Between(11' 99) ? 4 : // many                          5; // other                    // Breton                  case "br":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5; // other                    // Czech                  case "cs":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Welsh                  case "cy":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5;                    // Manx                  case "gv":                      return (n' c) =>                          (n % 10).Between(1' 2) || (n % 20) == 0 ? 0 :  // one                          1;                    // Langi                  case "lag":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n > 0) && (n < 2) ? 1 : // one                          2;                    // Lithuanian                  case "lt":                      return (n' c) =>                          (n % 10) == 1 && !(n % 100).Between(11' 19) ? 0 : // one                          (n % 10).Between(2' 9) && !(n % 100).Between(11' 19) ? 1 : // few                          2;                    // Latvian                  case "lv":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n % 10) == 1 && (n % 100) != 11 ? 1 :                          2;                    // Macedonian                  case "mb":                      return (n' c) =>                          (n % 10) == 1 && n != 11 ? 0 : // one                          1;                    // Moldavian                  case "mo":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n != 1 && (n % 100).Between(1' 19)) ? 1 : // few                          2;                    // Maltese                  case "mt":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(2' 10) ? 1 : // few                          (n % 100).Between(11' 19) ? 2 : // many                          3;                    // Polish                  case "pl":                      return (n' c) =>                          n == 1 ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          (n % 10).Between(0' 1) || (n % 10).Between(5' 9) || (n % 100).Between(12' 14) ? 2 : // many                          3;                    // Romanian                  case "ro":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(1' 19) ? 1 : // few                          2;                    // Tachelhit                  case "shi":                      return (n' c) =>                          (n >= 0 && n <= 1) ? 0 : // one                          n.Between(2' 10) ? 1 : // few                          2;                    // Slovak                  case "sk":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Slovenian                  case "sl":                      return (n' c) =>                          (n % 100) == 1 ? 0 : // one                          (n % 100) == 2 ? 1 : // two                          (n % 100).Between(3' 4) ? 2 : // few                          3;                    // Central Morocco Tamazight                  case "tzm":                      return (n' c) =>                          n.Between(0' 1) || n.Between(11' 99) ? 0 : // one                          1;                      // Unknown language                  default:                      return null;              }
Magic Number,SmartFormat.Extensions,CommonLanguageRules,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\PluralLocalizationFormatter.cs,GetPluralRule,The following statement contains a magic number: switch (twoLetterISOLanguageName)              {                  // Singular                  case "az": // Azerbaijani                  case "bm": // Bambara                  case "bo": // Tibetan                  case "dz": // Dzongkha                  case "fa": // Persian                  case "hu": // Hungarian                  case "id": // Indonesian                  case "ig": // Igbo                  case "ii": // Sichuan Yi                  case "ja": // Japanese                  case "jv": // Javanese                  case "ka": // Georgian                  case "kde": // Makonde                  case "kea": // Kabuverdianu                  case "km": // Khmer                  case "kn": // Kannada                  case "ko": // Korean                  case "ms": // Malay                  case "my": // Burmese                  case "root": // Root (?)                  case "sah": // Sakha                  case "ses": // Koyraboro Senni                  case "sg": // Sango                  case "th": // Thai                  case "to": // Tonga                  case "vi": // Vietnamese                  case "wo": // Wolof                  case "yo": // Yoruba                  case "zh": // Chinese                      return (n' c) => 0;                    // Dual: one (n == 1)' other                  case "af": // Afrikaans                  case "bem": // Bembda                  case "bg": // Bulgarian                  case "bn": // Bengali                  case "brx": // Bodo                  case "ca": // Catalan                  case "cgg": // Chiga                  case "chr": // Cherokee                  case "da": // Danish                  case "de": // German                  case "dv": // Divehi                  case "ee": // Ewe                  case "el": // Greek                  case "en": // English                  case "eo": // Esperanto                  case "es": // Spanish                  case "et": // Estonian                  case "eu": // Basque                  case "fi": // Finnish                  case "fo": // Faroese                  case "fur": // Friulian                  case "fy": // Western Frisian                  case "gl": // Galician                  case "gsw": // Swiss German                  case "gu": // Gujarati                  case "ha": // Hausa                  case "haw": // Hawaiian                  case "he": // Hebrew                  case "is": // Icelandic                  case "it": // Italian                  case "kk": // Kazakh                  case "kl": // Kalaallisut                  case "ku": // Kurdish                  case "lb": // Luxembourgish                  case "lg": // Ganda                  case "lo": // Lao                  case "mas": // Masai                  case "ml": // Malayalam                  case "mn": // Mongolian                  case "mr": // Marathi                  case "nah": // Nahuatl                  case "nb": // Norwegian Bokmål                  case "ne": // Nepali                  case "nl": // Dutch                  case "nn": // Norwegian Nynorsk                  case "no": // Norwegian                  case "nyn": // Nyankole                  case "om": // Oromo                  case "or": // Oriya                  case "pa": // Punjabi                  case "pap": // Papiamento                  case "ps": // Pashto                  case "pt": // Portuguese                  case "rm": // Romansh                  case "saq": // Samburu                  case "so": // Somali                  case "sq": // Albanian                  case "ssy": // Saho                  case "sw": // Swahili                  case "sv": // Swedish                  case "syr": // Syriac                  case "ta": // Tamil                  case "te": // Telugu                  case "tk": // Turkmen                  case "tr": // Turkish                  case "ur": // Urdu                  case "wae": // Walser                  case "xog": // Soga                  case "zu": // Zulu                      return (n' c) =>                      {                          if (c == 2) return (n == 1) ? 0 : 1;                          if (c == 3) return (n == 0) ? 0 : (n == 1) ? 1 : 2;                          if (c == 4) return (n < 0) ? 0 : (n == 0) ? 1 : (n == 1) ? 2 : 3;                          return -1;                      };                    // DualWithZero: one (n == 0..1)' other                  case "ak": // Akan                  case "am": // Amharic                  case "bh": // Bihari                  case "fil": // Filipino                  case "guw": // Gun                  case "hi": // Hindi                  case "ln": // Lingala                  case "mg": // Malagasy                  case "nso": // Northern Sotho                  case "ti": // Tigrinya                  case "tl": // Tagalog                  case "wa": // Walloon                      return (n' c) => (n == 0 || n == 1) ? 0 : 1;                    // DualFromZeroToTwo: one (n == 0..2 fractionate and n != 2)' other                  case "ff": // Fulah                  case "fr": // French                  case "kab": // Kabyle                      return (n' c) => (n >= 0 && n < 2) ? 0 : 1;                    // Triple: one (n == 1)' two (n == 2)' other                  case "ga": // Irish                  case "iu": // Inuktitut                  case "ksh": // Colognian                  case "kw": // Cornish                  case "se": // Northern Sami                  case "sma": // Southern Sami                  case "smi": // Sami language                  case "smj": // Lule Sami                  case "smn": // Inari Sami                  case "sms": // Skolt Sami                      return (n' c) => (n == 1) ? 0 : (n == 2) ? 1 : 2;                    // Russian & Serbo-Croatian                  case "be": // Belarusian                  case "bs": // Bosnian                  case "hr": // Croatian                  case "ru": // Russian                  case "sh": // Serbo-Croatian                  case "sr": // Serbian                  case "uk": // Ukrainian                      return (n' c) =>                          (n % 10 == 1) && !(n % 100 == 11) ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          2;                    // Unique:                    // Arabic                  case "ar":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          (n % 100).Between(3' 10) ? 3 : // few                          (n % 100).Between(11' 99) ? 4 : // many                          5; // other                    // Breton                  case "br":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5; // other                    // Czech                  case "cs":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Welsh                  case "cy":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5;                    // Manx                  case "gv":                      return (n' c) =>                          (n % 10).Between(1' 2) || (n % 20) == 0 ? 0 :  // one                          1;                    // Langi                  case "lag":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n > 0) && (n < 2) ? 1 : // one                          2;                    // Lithuanian                  case "lt":                      return (n' c) =>                          (n % 10) == 1 && !(n % 100).Between(11' 19) ? 0 : // one                          (n % 10).Between(2' 9) && !(n % 100).Between(11' 19) ? 1 : // few                          2;                    // Latvian                  case "lv":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n % 10) == 1 && (n % 100) != 11 ? 1 :                          2;                    // Macedonian                  case "mb":                      return (n' c) =>                          (n % 10) == 1 && n != 11 ? 0 : // one                          1;                    // Moldavian                  case "mo":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n != 1 && (n % 100).Between(1' 19)) ? 1 : // few                          2;                    // Maltese                  case "mt":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(2' 10) ? 1 : // few                          (n % 100).Between(11' 19) ? 2 : // many                          3;                    // Polish                  case "pl":                      return (n' c) =>                          n == 1 ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          (n % 10).Between(0' 1) || (n % 10).Between(5' 9) || (n % 100).Between(12' 14) ? 2 : // many                          3;                    // Romanian                  case "ro":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(1' 19) ? 1 : // few                          2;                    // Tachelhit                  case "shi":                      return (n' c) =>                          (n >= 0 && n <= 1) ? 0 : // one                          n.Between(2' 10) ? 1 : // few                          2;                    // Slovak                  case "sk":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Slovenian                  case "sl":                      return (n' c) =>                          (n % 100) == 1 ? 0 : // one                          (n % 100) == 2 ? 1 : // two                          (n % 100).Between(3' 4) ? 2 : // few                          3;                    // Central Morocco Tamazight                  case "tzm":                      return (n' c) =>                          n.Between(0' 1) || n.Between(11' 99) ? 0 : // one                          1;                      // Unknown language                  default:                      return null;              }
Magic Number,SmartFormat.Extensions,CommonLanguageRules,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\PluralLocalizationFormatter.cs,GetPluralRule,The following statement contains a magic number: switch (twoLetterISOLanguageName)              {                  // Singular                  case "az": // Azerbaijani                  case "bm": // Bambara                  case "bo": // Tibetan                  case "dz": // Dzongkha                  case "fa": // Persian                  case "hu": // Hungarian                  case "id": // Indonesian                  case "ig": // Igbo                  case "ii": // Sichuan Yi                  case "ja": // Japanese                  case "jv": // Javanese                  case "ka": // Georgian                  case "kde": // Makonde                  case "kea": // Kabuverdianu                  case "km": // Khmer                  case "kn": // Kannada                  case "ko": // Korean                  case "ms": // Malay                  case "my": // Burmese                  case "root": // Root (?)                  case "sah": // Sakha                  case "ses": // Koyraboro Senni                  case "sg": // Sango                  case "th": // Thai                  case "to": // Tonga                  case "vi": // Vietnamese                  case "wo": // Wolof                  case "yo": // Yoruba                  case "zh": // Chinese                      return (n' c) => 0;                    // Dual: one (n == 1)' other                  case "af": // Afrikaans                  case "bem": // Bembda                  case "bg": // Bulgarian                  case "bn": // Bengali                  case "brx": // Bodo                  case "ca": // Catalan                  case "cgg": // Chiga                  case "chr": // Cherokee                  case "da": // Danish                  case "de": // German                  case "dv": // Divehi                  case "ee": // Ewe                  case "el": // Greek                  case "en": // English                  case "eo": // Esperanto                  case "es": // Spanish                  case "et": // Estonian                  case "eu": // Basque                  case "fi": // Finnish                  case "fo": // Faroese                  case "fur": // Friulian                  case "fy": // Western Frisian                  case "gl": // Galician                  case "gsw": // Swiss German                  case "gu": // Gujarati                  case "ha": // Hausa                  case "haw": // Hawaiian                  case "he": // Hebrew                  case "is": // Icelandic                  case "it": // Italian                  case "kk": // Kazakh                  case "kl": // Kalaallisut                  case "ku": // Kurdish                  case "lb": // Luxembourgish                  case "lg": // Ganda                  case "lo": // Lao                  case "mas": // Masai                  case "ml": // Malayalam                  case "mn": // Mongolian                  case "mr": // Marathi                  case "nah": // Nahuatl                  case "nb": // Norwegian Bokmål                  case "ne": // Nepali                  case "nl": // Dutch                  case "nn": // Norwegian Nynorsk                  case "no": // Norwegian                  case "nyn": // Nyankole                  case "om": // Oromo                  case "or": // Oriya                  case "pa": // Punjabi                  case "pap": // Papiamento                  case "ps": // Pashto                  case "pt": // Portuguese                  case "rm": // Romansh                  case "saq": // Samburu                  case "so": // Somali                  case "sq": // Albanian                  case "ssy": // Saho                  case "sw": // Swahili                  case "sv": // Swedish                  case "syr": // Syriac                  case "ta": // Tamil                  case "te": // Telugu                  case "tk": // Turkmen                  case "tr": // Turkish                  case "ur": // Urdu                  case "wae": // Walser                  case "xog": // Soga                  case "zu": // Zulu                      return (n' c) =>                      {                          if (c == 2) return (n == 1) ? 0 : 1;                          if (c == 3) return (n == 0) ? 0 : (n == 1) ? 1 : 2;                          if (c == 4) return (n < 0) ? 0 : (n == 0) ? 1 : (n == 1) ? 2 : 3;                          return -1;                      };                    // DualWithZero: one (n == 0..1)' other                  case "ak": // Akan                  case "am": // Amharic                  case "bh": // Bihari                  case "fil": // Filipino                  case "guw": // Gun                  case "hi": // Hindi                  case "ln": // Lingala                  case "mg": // Malagasy                  case "nso": // Northern Sotho                  case "ti": // Tigrinya                  case "tl": // Tagalog                  case "wa": // Walloon                      return (n' c) => (n == 0 || n == 1) ? 0 : 1;                    // DualFromZeroToTwo: one (n == 0..2 fractionate and n != 2)' other                  case "ff": // Fulah                  case "fr": // French                  case "kab": // Kabyle                      return (n' c) => (n >= 0 && n < 2) ? 0 : 1;                    // Triple: one (n == 1)' two (n == 2)' other                  case "ga": // Irish                  case "iu": // Inuktitut                  case "ksh": // Colognian                  case "kw": // Cornish                  case "se": // Northern Sami                  case "sma": // Southern Sami                  case "smi": // Sami language                  case "smj": // Lule Sami                  case "smn": // Inari Sami                  case "sms": // Skolt Sami                      return (n' c) => (n == 1) ? 0 : (n == 2) ? 1 : 2;                    // Russian & Serbo-Croatian                  case "be": // Belarusian                  case "bs": // Bosnian                  case "hr": // Croatian                  case "ru": // Russian                  case "sh": // Serbo-Croatian                  case "sr": // Serbian                  case "uk": // Ukrainian                      return (n' c) =>                          (n % 10 == 1) && !(n % 100 == 11) ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          2;                    // Unique:                    // Arabic                  case "ar":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          (n % 100).Between(3' 10) ? 3 : // few                          (n % 100).Between(11' 99) ? 4 : // many                          5; // other                    // Breton                  case "br":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5; // other                    // Czech                  case "cs":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Welsh                  case "cy":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5;                    // Manx                  case "gv":                      return (n' c) =>                          (n % 10).Between(1' 2) || (n % 20) == 0 ? 0 :  // one                          1;                    // Langi                  case "lag":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n > 0) && (n < 2) ? 1 : // one                          2;                    // Lithuanian                  case "lt":                      return (n' c) =>                          (n % 10) == 1 && !(n % 100).Between(11' 19) ? 0 : // one                          (n % 10).Between(2' 9) && !(n % 100).Between(11' 19) ? 1 : // few                          2;                    // Latvian                  case "lv":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n % 10) == 1 && (n % 100) != 11 ? 1 :                          2;                    // Macedonian                  case "mb":                      return (n' c) =>                          (n % 10) == 1 && n != 11 ? 0 : // one                          1;                    // Moldavian                  case "mo":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n != 1 && (n % 100).Between(1' 19)) ? 1 : // few                          2;                    // Maltese                  case "mt":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(2' 10) ? 1 : // few                          (n % 100).Between(11' 19) ? 2 : // many                          3;                    // Polish                  case "pl":                      return (n' c) =>                          n == 1 ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          (n % 10).Between(0' 1) || (n % 10).Between(5' 9) || (n % 100).Between(12' 14) ? 2 : // many                          3;                    // Romanian                  case "ro":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(1' 19) ? 1 : // few                          2;                    // Tachelhit                  case "shi":                      return (n' c) =>                          (n >= 0 && n <= 1) ? 0 : // one                          n.Between(2' 10) ? 1 : // few                          2;                    // Slovak                  case "sk":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Slovenian                  case "sl":                      return (n' c) =>                          (n % 100) == 1 ? 0 : // one                          (n % 100) == 2 ? 1 : // two                          (n % 100).Between(3' 4) ? 2 : // few                          3;                    // Central Morocco Tamazight                  case "tzm":                      return (n' c) =>                          n.Between(0' 1) || n.Between(11' 99) ? 0 : // one                          1;                      // Unknown language                  default:                      return null;              }
Magic Number,SmartFormat.Extensions,CommonLanguageRules,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\PluralLocalizationFormatter.cs,GetPluralRule,The following statement contains a magic number: switch (twoLetterISOLanguageName)              {                  // Singular                  case "az": // Azerbaijani                  case "bm": // Bambara                  case "bo": // Tibetan                  case "dz": // Dzongkha                  case "fa": // Persian                  case "hu": // Hungarian                  case "id": // Indonesian                  case "ig": // Igbo                  case "ii": // Sichuan Yi                  case "ja": // Japanese                  case "jv": // Javanese                  case "ka": // Georgian                  case "kde": // Makonde                  case "kea": // Kabuverdianu                  case "km": // Khmer                  case "kn": // Kannada                  case "ko": // Korean                  case "ms": // Malay                  case "my": // Burmese                  case "root": // Root (?)                  case "sah": // Sakha                  case "ses": // Koyraboro Senni                  case "sg": // Sango                  case "th": // Thai                  case "to": // Tonga                  case "vi": // Vietnamese                  case "wo": // Wolof                  case "yo": // Yoruba                  case "zh": // Chinese                      return (n' c) => 0;                    // Dual: one (n == 1)' other                  case "af": // Afrikaans                  case "bem": // Bembda                  case "bg": // Bulgarian                  case "bn": // Bengali                  case "brx": // Bodo                  case "ca": // Catalan                  case "cgg": // Chiga                  case "chr": // Cherokee                  case "da": // Danish                  case "de": // German                  case "dv": // Divehi                  case "ee": // Ewe                  case "el": // Greek                  case "en": // English                  case "eo": // Esperanto                  case "es": // Spanish                  case "et": // Estonian                  case "eu": // Basque                  case "fi": // Finnish                  case "fo": // Faroese                  case "fur": // Friulian                  case "fy": // Western Frisian                  case "gl": // Galician                  case "gsw": // Swiss German                  case "gu": // Gujarati                  case "ha": // Hausa                  case "haw": // Hawaiian                  case "he": // Hebrew                  case "is": // Icelandic                  case "it": // Italian                  case "kk": // Kazakh                  case "kl": // Kalaallisut                  case "ku": // Kurdish                  case "lb": // Luxembourgish                  case "lg": // Ganda                  case "lo": // Lao                  case "mas": // Masai                  case "ml": // Malayalam                  case "mn": // Mongolian                  case "mr": // Marathi                  case "nah": // Nahuatl                  case "nb": // Norwegian Bokmål                  case "ne": // Nepali                  case "nl": // Dutch                  case "nn": // Norwegian Nynorsk                  case "no": // Norwegian                  case "nyn": // Nyankole                  case "om": // Oromo                  case "or": // Oriya                  case "pa": // Punjabi                  case "pap": // Papiamento                  case "ps": // Pashto                  case "pt": // Portuguese                  case "rm": // Romansh                  case "saq": // Samburu                  case "so": // Somali                  case "sq": // Albanian                  case "ssy": // Saho                  case "sw": // Swahili                  case "sv": // Swedish                  case "syr": // Syriac                  case "ta": // Tamil                  case "te": // Telugu                  case "tk": // Turkmen                  case "tr": // Turkish                  case "ur": // Urdu                  case "wae": // Walser                  case "xog": // Soga                  case "zu": // Zulu                      return (n' c) =>                      {                          if (c == 2) return (n == 1) ? 0 : 1;                          if (c == 3) return (n == 0) ? 0 : (n == 1) ? 1 : 2;                          if (c == 4) return (n < 0) ? 0 : (n == 0) ? 1 : (n == 1) ? 2 : 3;                          return -1;                      };                    // DualWithZero: one (n == 0..1)' other                  case "ak": // Akan                  case "am": // Amharic                  case "bh": // Bihari                  case "fil": // Filipino                  case "guw": // Gun                  case "hi": // Hindi                  case "ln": // Lingala                  case "mg": // Malagasy                  case "nso": // Northern Sotho                  case "ti": // Tigrinya                  case "tl": // Tagalog                  case "wa": // Walloon                      return (n' c) => (n == 0 || n == 1) ? 0 : 1;                    // DualFromZeroToTwo: one (n == 0..2 fractionate and n != 2)' other                  case "ff": // Fulah                  case "fr": // French                  case "kab": // Kabyle                      return (n' c) => (n >= 0 && n < 2) ? 0 : 1;                    // Triple: one (n == 1)' two (n == 2)' other                  case "ga": // Irish                  case "iu": // Inuktitut                  case "ksh": // Colognian                  case "kw": // Cornish                  case "se": // Northern Sami                  case "sma": // Southern Sami                  case "smi": // Sami language                  case "smj": // Lule Sami                  case "smn": // Inari Sami                  case "sms": // Skolt Sami                      return (n' c) => (n == 1) ? 0 : (n == 2) ? 1 : 2;                    // Russian & Serbo-Croatian                  case "be": // Belarusian                  case "bs": // Bosnian                  case "hr": // Croatian                  case "ru": // Russian                  case "sh": // Serbo-Croatian                  case "sr": // Serbian                  case "uk": // Ukrainian                      return (n' c) =>                          (n % 10 == 1) && !(n % 100 == 11) ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          2;                    // Unique:                    // Arabic                  case "ar":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          (n % 100).Between(3' 10) ? 3 : // few                          (n % 100).Between(11' 99) ? 4 : // many                          5; // other                    // Breton                  case "br":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5; // other                    // Czech                  case "cs":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Welsh                  case "cy":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5;                    // Manx                  case "gv":                      return (n' c) =>                          (n % 10).Between(1' 2) || (n % 20) == 0 ? 0 :  // one                          1;                    // Langi                  case "lag":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n > 0) && (n < 2) ? 1 : // one                          2;                    // Lithuanian                  case "lt":                      return (n' c) =>                          (n % 10) == 1 && !(n % 100).Between(11' 19) ? 0 : // one                          (n % 10).Between(2' 9) && !(n % 100).Between(11' 19) ? 1 : // few                          2;                    // Latvian                  case "lv":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n % 10) == 1 && (n % 100) != 11 ? 1 :                          2;                    // Macedonian                  case "mb":                      return (n' c) =>                          (n % 10) == 1 && n != 11 ? 0 : // one                          1;                    // Moldavian                  case "mo":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n != 1 && (n % 100).Between(1' 19)) ? 1 : // few                          2;                    // Maltese                  case "mt":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(2' 10) ? 1 : // few                          (n % 100).Between(11' 19) ? 2 : // many                          3;                    // Polish                  case "pl":                      return (n' c) =>                          n == 1 ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          (n % 10).Between(0' 1) || (n % 10).Between(5' 9) || (n % 100).Between(12' 14) ? 2 : // many                          3;                    // Romanian                  case "ro":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(1' 19) ? 1 : // few                          2;                    // Tachelhit                  case "shi":                      return (n' c) =>                          (n >= 0 && n <= 1) ? 0 : // one                          n.Between(2' 10) ? 1 : // few                          2;                    // Slovak                  case "sk":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Slovenian                  case "sl":                      return (n' c) =>                          (n % 100) == 1 ? 0 : // one                          (n % 100) == 2 ? 1 : // two                          (n % 100).Between(3' 4) ? 2 : // few                          3;                    // Central Morocco Tamazight                  case "tzm":                      return (n' c) =>                          n.Between(0' 1) || n.Between(11' 99) ? 0 : // one                          1;                      // Unknown language                  default:                      return null;              }
Magic Number,SmartFormat.Extensions,CommonLanguageRules,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\PluralLocalizationFormatter.cs,GetPluralRule,The following statement contains a magic number: switch (twoLetterISOLanguageName)              {                  // Singular                  case "az": // Azerbaijani                  case "bm": // Bambara                  case "bo": // Tibetan                  case "dz": // Dzongkha                  case "fa": // Persian                  case "hu": // Hungarian                  case "id": // Indonesian                  case "ig": // Igbo                  case "ii": // Sichuan Yi                  case "ja": // Japanese                  case "jv": // Javanese                  case "ka": // Georgian                  case "kde": // Makonde                  case "kea": // Kabuverdianu                  case "km": // Khmer                  case "kn": // Kannada                  case "ko": // Korean                  case "ms": // Malay                  case "my": // Burmese                  case "root": // Root (?)                  case "sah": // Sakha                  case "ses": // Koyraboro Senni                  case "sg": // Sango                  case "th": // Thai                  case "to": // Tonga                  case "vi": // Vietnamese                  case "wo": // Wolof                  case "yo": // Yoruba                  case "zh": // Chinese                      return (n' c) => 0;                    // Dual: one (n == 1)' other                  case "af": // Afrikaans                  case "bem": // Bembda                  case "bg": // Bulgarian                  case "bn": // Bengali                  case "brx": // Bodo                  case "ca": // Catalan                  case "cgg": // Chiga                  case "chr": // Cherokee                  case "da": // Danish                  case "de": // German                  case "dv": // Divehi                  case "ee": // Ewe                  case "el": // Greek                  case "en": // English                  case "eo": // Esperanto                  case "es": // Spanish                  case "et": // Estonian                  case "eu": // Basque                  case "fi": // Finnish                  case "fo": // Faroese                  case "fur": // Friulian                  case "fy": // Western Frisian                  case "gl": // Galician                  case "gsw": // Swiss German                  case "gu": // Gujarati                  case "ha": // Hausa                  case "haw": // Hawaiian                  case "he": // Hebrew                  case "is": // Icelandic                  case "it": // Italian                  case "kk": // Kazakh                  case "kl": // Kalaallisut                  case "ku": // Kurdish                  case "lb": // Luxembourgish                  case "lg": // Ganda                  case "lo": // Lao                  case "mas": // Masai                  case "ml": // Malayalam                  case "mn": // Mongolian                  case "mr": // Marathi                  case "nah": // Nahuatl                  case "nb": // Norwegian Bokmål                  case "ne": // Nepali                  case "nl": // Dutch                  case "nn": // Norwegian Nynorsk                  case "no": // Norwegian                  case "nyn": // Nyankole                  case "om": // Oromo                  case "or": // Oriya                  case "pa": // Punjabi                  case "pap": // Papiamento                  case "ps": // Pashto                  case "pt": // Portuguese                  case "rm": // Romansh                  case "saq": // Samburu                  case "so": // Somali                  case "sq": // Albanian                  case "ssy": // Saho                  case "sw": // Swahili                  case "sv": // Swedish                  case "syr": // Syriac                  case "ta": // Tamil                  case "te": // Telugu                  case "tk": // Turkmen                  case "tr": // Turkish                  case "ur": // Urdu                  case "wae": // Walser                  case "xog": // Soga                  case "zu": // Zulu                      return (n' c) =>                      {                          if (c == 2) return (n == 1) ? 0 : 1;                          if (c == 3) return (n == 0) ? 0 : (n == 1) ? 1 : 2;                          if (c == 4) return (n < 0) ? 0 : (n == 0) ? 1 : (n == 1) ? 2 : 3;                          return -1;                      };                    // DualWithZero: one (n == 0..1)' other                  case "ak": // Akan                  case "am": // Amharic                  case "bh": // Bihari                  case "fil": // Filipino                  case "guw": // Gun                  case "hi": // Hindi                  case "ln": // Lingala                  case "mg": // Malagasy                  case "nso": // Northern Sotho                  case "ti": // Tigrinya                  case "tl": // Tagalog                  case "wa": // Walloon                      return (n' c) => (n == 0 || n == 1) ? 0 : 1;                    // DualFromZeroToTwo: one (n == 0..2 fractionate and n != 2)' other                  case "ff": // Fulah                  case "fr": // French                  case "kab": // Kabyle                      return (n' c) => (n >= 0 && n < 2) ? 0 : 1;                    // Triple: one (n == 1)' two (n == 2)' other                  case "ga": // Irish                  case "iu": // Inuktitut                  case "ksh": // Colognian                  case "kw": // Cornish                  case "se": // Northern Sami                  case "sma": // Southern Sami                  case "smi": // Sami language                  case "smj": // Lule Sami                  case "smn": // Inari Sami                  case "sms": // Skolt Sami                      return (n' c) => (n == 1) ? 0 : (n == 2) ? 1 : 2;                    // Russian & Serbo-Croatian                  case "be": // Belarusian                  case "bs": // Bosnian                  case "hr": // Croatian                  case "ru": // Russian                  case "sh": // Serbo-Croatian                  case "sr": // Serbian                  case "uk": // Ukrainian                      return (n' c) =>                          (n % 10 == 1) && !(n % 100 == 11) ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          2;                    // Unique:                    // Arabic                  case "ar":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          (n % 100).Between(3' 10) ? 3 : // few                          (n % 100).Between(11' 99) ? 4 : // many                          5; // other                    // Breton                  case "br":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5; // other                    // Czech                  case "cs":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Welsh                  case "cy":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5;                    // Manx                  case "gv":                      return (n' c) =>                          (n % 10).Between(1' 2) || (n % 20) == 0 ? 0 :  // one                          1;                    // Langi                  case "lag":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n > 0) && (n < 2) ? 1 : // one                          2;                    // Lithuanian                  case "lt":                      return (n' c) =>                          (n % 10) == 1 && !(n % 100).Between(11' 19) ? 0 : // one                          (n % 10).Between(2' 9) && !(n % 100).Between(11' 19) ? 1 : // few                          2;                    // Latvian                  case "lv":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n % 10) == 1 && (n % 100) != 11 ? 1 :                          2;                    // Macedonian                  case "mb":                      return (n' c) =>                          (n % 10) == 1 && n != 11 ? 0 : // one                          1;                    // Moldavian                  case "mo":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n != 1 && (n % 100).Between(1' 19)) ? 1 : // few                          2;                    // Maltese                  case "mt":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(2' 10) ? 1 : // few                          (n % 100).Between(11' 19) ? 2 : // many                          3;                    // Polish                  case "pl":                      return (n' c) =>                          n == 1 ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          (n % 10).Between(0' 1) || (n % 10).Between(5' 9) || (n % 100).Between(12' 14) ? 2 : // many                          3;                    // Romanian                  case "ro":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(1' 19) ? 1 : // few                          2;                    // Tachelhit                  case "shi":                      return (n' c) =>                          (n >= 0 && n <= 1) ? 0 : // one                          n.Between(2' 10) ? 1 : // few                          2;                    // Slovak                  case "sk":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Slovenian                  case "sl":                      return (n' c) =>                          (n % 100) == 1 ? 0 : // one                          (n % 100) == 2 ? 1 : // two                          (n % 100).Between(3' 4) ? 2 : // few                          3;                    // Central Morocco Tamazight                  case "tzm":                      return (n' c) =>                          n.Between(0' 1) || n.Between(11' 99) ? 0 : // one                          1;                      // Unknown language                  default:                      return null;              }
Magic Number,SmartFormat.Extensions,CommonLanguageRules,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\PluralLocalizationFormatter.cs,GetPluralRule,The following statement contains a magic number: switch (twoLetterISOLanguageName)              {                  // Singular                  case "az": // Azerbaijani                  case "bm": // Bambara                  case "bo": // Tibetan                  case "dz": // Dzongkha                  case "fa": // Persian                  case "hu": // Hungarian                  case "id": // Indonesian                  case "ig": // Igbo                  case "ii": // Sichuan Yi                  case "ja": // Japanese                  case "jv": // Javanese                  case "ka": // Georgian                  case "kde": // Makonde                  case "kea": // Kabuverdianu                  case "km": // Khmer                  case "kn": // Kannada                  case "ko": // Korean                  case "ms": // Malay                  case "my": // Burmese                  case "root": // Root (?)                  case "sah": // Sakha                  case "ses": // Koyraboro Senni                  case "sg": // Sango                  case "th": // Thai                  case "to": // Tonga                  case "vi": // Vietnamese                  case "wo": // Wolof                  case "yo": // Yoruba                  case "zh": // Chinese                      return (n' c) => 0;                    // Dual: one (n == 1)' other                  case "af": // Afrikaans                  case "bem": // Bembda                  case "bg": // Bulgarian                  case "bn": // Bengali                  case "brx": // Bodo                  case "ca": // Catalan                  case "cgg": // Chiga                  case "chr": // Cherokee                  case "da": // Danish                  case "de": // German                  case "dv": // Divehi                  case "ee": // Ewe                  case "el": // Greek                  case "en": // English                  case "eo": // Esperanto                  case "es": // Spanish                  case "et": // Estonian                  case "eu": // Basque                  case "fi": // Finnish                  case "fo": // Faroese                  case "fur": // Friulian                  case "fy": // Western Frisian                  case "gl": // Galician                  case "gsw": // Swiss German                  case "gu": // Gujarati                  case "ha": // Hausa                  case "haw": // Hawaiian                  case "he": // Hebrew                  case "is": // Icelandic                  case "it": // Italian                  case "kk": // Kazakh                  case "kl": // Kalaallisut                  case "ku": // Kurdish                  case "lb": // Luxembourgish                  case "lg": // Ganda                  case "lo": // Lao                  case "mas": // Masai                  case "ml": // Malayalam                  case "mn": // Mongolian                  case "mr": // Marathi                  case "nah": // Nahuatl                  case "nb": // Norwegian Bokmål                  case "ne": // Nepali                  case "nl": // Dutch                  case "nn": // Norwegian Nynorsk                  case "no": // Norwegian                  case "nyn": // Nyankole                  case "om": // Oromo                  case "or": // Oriya                  case "pa": // Punjabi                  case "pap": // Papiamento                  case "ps": // Pashto                  case "pt": // Portuguese                  case "rm": // Romansh                  case "saq": // Samburu                  case "so": // Somali                  case "sq": // Albanian                  case "ssy": // Saho                  case "sw": // Swahili                  case "sv": // Swedish                  case "syr": // Syriac                  case "ta": // Tamil                  case "te": // Telugu                  case "tk": // Turkmen                  case "tr": // Turkish                  case "ur": // Urdu                  case "wae": // Walser                  case "xog": // Soga                  case "zu": // Zulu                      return (n' c) =>                      {                          if (c == 2) return (n == 1) ? 0 : 1;                          if (c == 3) return (n == 0) ? 0 : (n == 1) ? 1 : 2;                          if (c == 4) return (n < 0) ? 0 : (n == 0) ? 1 : (n == 1) ? 2 : 3;                          return -1;                      };                    // DualWithZero: one (n == 0..1)' other                  case "ak": // Akan                  case "am": // Amharic                  case "bh": // Bihari                  case "fil": // Filipino                  case "guw": // Gun                  case "hi": // Hindi                  case "ln": // Lingala                  case "mg": // Malagasy                  case "nso": // Northern Sotho                  case "ti": // Tigrinya                  case "tl": // Tagalog                  case "wa": // Walloon                      return (n' c) => (n == 0 || n == 1) ? 0 : 1;                    // DualFromZeroToTwo: one (n == 0..2 fractionate and n != 2)' other                  case "ff": // Fulah                  case "fr": // French                  case "kab": // Kabyle                      return (n' c) => (n >= 0 && n < 2) ? 0 : 1;                    // Triple: one (n == 1)' two (n == 2)' other                  case "ga": // Irish                  case "iu": // Inuktitut                  case "ksh": // Colognian                  case "kw": // Cornish                  case "se": // Northern Sami                  case "sma": // Southern Sami                  case "smi": // Sami language                  case "smj": // Lule Sami                  case "smn": // Inari Sami                  case "sms": // Skolt Sami                      return (n' c) => (n == 1) ? 0 : (n == 2) ? 1 : 2;                    // Russian & Serbo-Croatian                  case "be": // Belarusian                  case "bs": // Bosnian                  case "hr": // Croatian                  case "ru": // Russian                  case "sh": // Serbo-Croatian                  case "sr": // Serbian                  case "uk": // Ukrainian                      return (n' c) =>                          (n % 10 == 1) && !(n % 100 == 11) ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          2;                    // Unique:                    // Arabic                  case "ar":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          (n % 100).Between(3' 10) ? 3 : // few                          (n % 100).Between(11' 99) ? 4 : // many                          5; // other                    // Breton                  case "br":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5; // other                    // Czech                  case "cs":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Welsh                  case "cy":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5;                    // Manx                  case "gv":                      return (n' c) =>                          (n % 10).Between(1' 2) || (n % 20) == 0 ? 0 :  // one                          1;                    // Langi                  case "lag":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n > 0) && (n < 2) ? 1 : // one                          2;                    // Lithuanian                  case "lt":                      return (n' c) =>                          (n % 10) == 1 && !(n % 100).Between(11' 19) ? 0 : // one                          (n % 10).Between(2' 9) && !(n % 100).Between(11' 19) ? 1 : // few                          2;                    // Latvian                  case "lv":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n % 10) == 1 && (n % 100) != 11 ? 1 :                          2;                    // Macedonian                  case "mb":                      return (n' c) =>                          (n % 10) == 1 && n != 11 ? 0 : // one                          1;                    // Moldavian                  case "mo":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n != 1 && (n % 100).Between(1' 19)) ? 1 : // few                          2;                    // Maltese                  case "mt":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(2' 10) ? 1 : // few                          (n % 100).Between(11' 19) ? 2 : // many                          3;                    // Polish                  case "pl":                      return (n' c) =>                          n == 1 ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          (n % 10).Between(0' 1) || (n % 10).Between(5' 9) || (n % 100).Between(12' 14) ? 2 : // many                          3;                    // Romanian                  case "ro":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(1' 19) ? 1 : // few                          2;                    // Tachelhit                  case "shi":                      return (n' c) =>                          (n >= 0 && n <= 1) ? 0 : // one                          n.Between(2' 10) ? 1 : // few                          2;                    // Slovak                  case "sk":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Slovenian                  case "sl":                      return (n' c) =>                          (n % 100) == 1 ? 0 : // one                          (n % 100) == 2 ? 1 : // two                          (n % 100).Between(3' 4) ? 2 : // few                          3;                    // Central Morocco Tamazight                  case "tzm":                      return (n' c) =>                          n.Between(0' 1) || n.Between(11' 99) ? 0 : // one                          1;                      // Unknown language                  default:                      return null;              }
Magic Number,SmartFormat.Extensions,CommonLanguageRules,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\PluralLocalizationFormatter.cs,GetPluralRule,The following statement contains a magic number: switch (twoLetterISOLanguageName)              {                  // Singular                  case "az": // Azerbaijani                  case "bm": // Bambara                  case "bo": // Tibetan                  case "dz": // Dzongkha                  case "fa": // Persian                  case "hu": // Hungarian                  case "id": // Indonesian                  case "ig": // Igbo                  case "ii": // Sichuan Yi                  case "ja": // Japanese                  case "jv": // Javanese                  case "ka": // Georgian                  case "kde": // Makonde                  case "kea": // Kabuverdianu                  case "km": // Khmer                  case "kn": // Kannada                  case "ko": // Korean                  case "ms": // Malay                  case "my": // Burmese                  case "root": // Root (?)                  case "sah": // Sakha                  case "ses": // Koyraboro Senni                  case "sg": // Sango                  case "th": // Thai                  case "to": // Tonga                  case "vi": // Vietnamese                  case "wo": // Wolof                  case "yo": // Yoruba                  case "zh": // Chinese                      return (n' c) => 0;                    // Dual: one (n == 1)' other                  case "af": // Afrikaans                  case "bem": // Bembda                  case "bg": // Bulgarian                  case "bn": // Bengali                  case "brx": // Bodo                  case "ca": // Catalan                  case "cgg": // Chiga                  case "chr": // Cherokee                  case "da": // Danish                  case "de": // German                  case "dv": // Divehi                  case "ee": // Ewe                  case "el": // Greek                  case "en": // English                  case "eo": // Esperanto                  case "es": // Spanish                  case "et": // Estonian                  case "eu": // Basque                  case "fi": // Finnish                  case "fo": // Faroese                  case "fur": // Friulian                  case "fy": // Western Frisian                  case "gl": // Galician                  case "gsw": // Swiss German                  case "gu": // Gujarati                  case "ha": // Hausa                  case "haw": // Hawaiian                  case "he": // Hebrew                  case "is": // Icelandic                  case "it": // Italian                  case "kk": // Kazakh                  case "kl": // Kalaallisut                  case "ku": // Kurdish                  case "lb": // Luxembourgish                  case "lg": // Ganda                  case "lo": // Lao                  case "mas": // Masai                  case "ml": // Malayalam                  case "mn": // Mongolian                  case "mr": // Marathi                  case "nah": // Nahuatl                  case "nb": // Norwegian Bokmål                  case "ne": // Nepali                  case "nl": // Dutch                  case "nn": // Norwegian Nynorsk                  case "no": // Norwegian                  case "nyn": // Nyankole                  case "om": // Oromo                  case "or": // Oriya                  case "pa": // Punjabi                  case "pap": // Papiamento                  case "ps": // Pashto                  case "pt": // Portuguese                  case "rm": // Romansh                  case "saq": // Samburu                  case "so": // Somali                  case "sq": // Albanian                  case "ssy": // Saho                  case "sw": // Swahili                  case "sv": // Swedish                  case "syr": // Syriac                  case "ta": // Tamil                  case "te": // Telugu                  case "tk": // Turkmen                  case "tr": // Turkish                  case "ur": // Urdu                  case "wae": // Walser                  case "xog": // Soga                  case "zu": // Zulu                      return (n' c) =>                      {                          if (c == 2) return (n == 1) ? 0 : 1;                          if (c == 3) return (n == 0) ? 0 : (n == 1) ? 1 : 2;                          if (c == 4) return (n < 0) ? 0 : (n == 0) ? 1 : (n == 1) ? 2 : 3;                          return -1;                      };                    // DualWithZero: one (n == 0..1)' other                  case "ak": // Akan                  case "am": // Amharic                  case "bh": // Bihari                  case "fil": // Filipino                  case "guw": // Gun                  case "hi": // Hindi                  case "ln": // Lingala                  case "mg": // Malagasy                  case "nso": // Northern Sotho                  case "ti": // Tigrinya                  case "tl": // Tagalog                  case "wa": // Walloon                      return (n' c) => (n == 0 || n == 1) ? 0 : 1;                    // DualFromZeroToTwo: one (n == 0..2 fractionate and n != 2)' other                  case "ff": // Fulah                  case "fr": // French                  case "kab": // Kabyle                      return (n' c) => (n >= 0 && n < 2) ? 0 : 1;                    // Triple: one (n == 1)' two (n == 2)' other                  case "ga": // Irish                  case "iu": // Inuktitut                  case "ksh": // Colognian                  case "kw": // Cornish                  case "se": // Northern Sami                  case "sma": // Southern Sami                  case "smi": // Sami language                  case "smj": // Lule Sami                  case "smn": // Inari Sami                  case "sms": // Skolt Sami                      return (n' c) => (n == 1) ? 0 : (n == 2) ? 1 : 2;                    // Russian & Serbo-Croatian                  case "be": // Belarusian                  case "bs": // Bosnian                  case "hr": // Croatian                  case "ru": // Russian                  case "sh": // Serbo-Croatian                  case "sr": // Serbian                  case "uk": // Ukrainian                      return (n' c) =>                          (n % 10 == 1) && !(n % 100 == 11) ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          2;                    // Unique:                    // Arabic                  case "ar":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          (n % 100).Between(3' 10) ? 3 : // few                          (n % 100).Between(11' 99) ? 4 : // many                          5; // other                    // Breton                  case "br":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5; // other                    // Czech                  case "cs":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Welsh                  case "cy":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5;                    // Manx                  case "gv":                      return (n' c) =>                          (n % 10).Between(1' 2) || (n % 20) == 0 ? 0 :  // one                          1;                    // Langi                  case "lag":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n > 0) && (n < 2) ? 1 : // one                          2;                    // Lithuanian                  case "lt":                      return (n' c) =>                          (n % 10) == 1 && !(n % 100).Between(11' 19) ? 0 : // one                          (n % 10).Between(2' 9) && !(n % 100).Between(11' 19) ? 1 : // few                          2;                    // Latvian                  case "lv":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n % 10) == 1 && (n % 100) != 11 ? 1 :                          2;                    // Macedonian                  case "mb":                      return (n' c) =>                          (n % 10) == 1 && n != 11 ? 0 : // one                          1;                    // Moldavian                  case "mo":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n != 1 && (n % 100).Between(1' 19)) ? 1 : // few                          2;                    // Maltese                  case "mt":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(2' 10) ? 1 : // few                          (n % 100).Between(11' 19) ? 2 : // many                          3;                    // Polish                  case "pl":                      return (n' c) =>                          n == 1 ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          (n % 10).Between(0' 1) || (n % 10).Between(5' 9) || (n % 100).Between(12' 14) ? 2 : // many                          3;                    // Romanian                  case "ro":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(1' 19) ? 1 : // few                          2;                    // Tachelhit                  case "shi":                      return (n' c) =>                          (n >= 0 && n <= 1) ? 0 : // one                          n.Between(2' 10) ? 1 : // few                          2;                    // Slovak                  case "sk":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Slovenian                  case "sl":                      return (n' c) =>                          (n % 100) == 1 ? 0 : // one                          (n % 100) == 2 ? 1 : // two                          (n % 100).Between(3' 4) ? 2 : // few                          3;                    // Central Morocco Tamazight                  case "tzm":                      return (n' c) =>                          n.Between(0' 1) || n.Between(11' 99) ? 0 : // one                          1;                      // Unknown language                  default:                      return null;              }
Magic Number,SmartFormat.Extensions,CommonLanguageRules,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\PluralLocalizationFormatter.cs,GetPluralRule,The following statement contains a magic number: switch (twoLetterISOLanguageName)              {                  // Singular                  case "az": // Azerbaijani                  case "bm": // Bambara                  case "bo": // Tibetan                  case "dz": // Dzongkha                  case "fa": // Persian                  case "hu": // Hungarian                  case "id": // Indonesian                  case "ig": // Igbo                  case "ii": // Sichuan Yi                  case "ja": // Japanese                  case "jv": // Javanese                  case "ka": // Georgian                  case "kde": // Makonde                  case "kea": // Kabuverdianu                  case "km": // Khmer                  case "kn": // Kannada                  case "ko": // Korean                  case "ms": // Malay                  case "my": // Burmese                  case "root": // Root (?)                  case "sah": // Sakha                  case "ses": // Koyraboro Senni                  case "sg": // Sango                  case "th": // Thai                  case "to": // Tonga                  case "vi": // Vietnamese                  case "wo": // Wolof                  case "yo": // Yoruba                  case "zh": // Chinese                      return (n' c) => 0;                    // Dual: one (n == 1)' other                  case "af": // Afrikaans                  case "bem": // Bembda                  case "bg": // Bulgarian                  case "bn": // Bengali                  case "brx": // Bodo                  case "ca": // Catalan                  case "cgg": // Chiga                  case "chr": // Cherokee                  case "da": // Danish                  case "de": // German                  case "dv": // Divehi                  case "ee": // Ewe                  case "el": // Greek                  case "en": // English                  case "eo": // Esperanto                  case "es": // Spanish                  case "et": // Estonian                  case "eu": // Basque                  case "fi": // Finnish                  case "fo": // Faroese                  case "fur": // Friulian                  case "fy": // Western Frisian                  case "gl": // Galician                  case "gsw": // Swiss German                  case "gu": // Gujarati                  case "ha": // Hausa                  case "haw": // Hawaiian                  case "he": // Hebrew                  case "is": // Icelandic                  case "it": // Italian                  case "kk": // Kazakh                  case "kl": // Kalaallisut                  case "ku": // Kurdish                  case "lb": // Luxembourgish                  case "lg": // Ganda                  case "lo": // Lao                  case "mas": // Masai                  case "ml": // Malayalam                  case "mn": // Mongolian                  case "mr": // Marathi                  case "nah": // Nahuatl                  case "nb": // Norwegian Bokmål                  case "ne": // Nepali                  case "nl": // Dutch                  case "nn": // Norwegian Nynorsk                  case "no": // Norwegian                  case "nyn": // Nyankole                  case "om": // Oromo                  case "or": // Oriya                  case "pa": // Punjabi                  case "pap": // Papiamento                  case "ps": // Pashto                  case "pt": // Portuguese                  case "rm": // Romansh                  case "saq": // Samburu                  case "so": // Somali                  case "sq": // Albanian                  case "ssy": // Saho                  case "sw": // Swahili                  case "sv": // Swedish                  case "syr": // Syriac                  case "ta": // Tamil                  case "te": // Telugu                  case "tk": // Turkmen                  case "tr": // Turkish                  case "ur": // Urdu                  case "wae": // Walser                  case "xog": // Soga                  case "zu": // Zulu                      return (n' c) =>                      {                          if (c == 2) return (n == 1) ? 0 : 1;                          if (c == 3) return (n == 0) ? 0 : (n == 1) ? 1 : 2;                          if (c == 4) return (n < 0) ? 0 : (n == 0) ? 1 : (n == 1) ? 2 : 3;                          return -1;                      };                    // DualWithZero: one (n == 0..1)' other                  case "ak": // Akan                  case "am": // Amharic                  case "bh": // Bihari                  case "fil": // Filipino                  case "guw": // Gun                  case "hi": // Hindi                  case "ln": // Lingala                  case "mg": // Malagasy                  case "nso": // Northern Sotho                  case "ti": // Tigrinya                  case "tl": // Tagalog                  case "wa": // Walloon                      return (n' c) => (n == 0 || n == 1) ? 0 : 1;                    // DualFromZeroToTwo: one (n == 0..2 fractionate and n != 2)' other                  case "ff": // Fulah                  case "fr": // French                  case "kab": // Kabyle                      return (n' c) => (n >= 0 && n < 2) ? 0 : 1;                    // Triple: one (n == 1)' two (n == 2)' other                  case "ga": // Irish                  case "iu": // Inuktitut                  case "ksh": // Colognian                  case "kw": // Cornish                  case "se": // Northern Sami                  case "sma": // Southern Sami                  case "smi": // Sami language                  case "smj": // Lule Sami                  case "smn": // Inari Sami                  case "sms": // Skolt Sami                      return (n' c) => (n == 1) ? 0 : (n == 2) ? 1 : 2;                    // Russian & Serbo-Croatian                  case "be": // Belarusian                  case "bs": // Bosnian                  case "hr": // Croatian                  case "ru": // Russian                  case "sh": // Serbo-Croatian                  case "sr": // Serbian                  case "uk": // Ukrainian                      return (n' c) =>                          (n % 10 == 1) && !(n % 100 == 11) ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          2;                    // Unique:                    // Arabic                  case "ar":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          (n % 100).Between(3' 10) ? 3 : // few                          (n % 100).Between(11' 99) ? 4 : // many                          5; // other                    // Breton                  case "br":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5; // other                    // Czech                  case "cs":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Welsh                  case "cy":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5;                    // Manx                  case "gv":                      return (n' c) =>                          (n % 10).Between(1' 2) || (n % 20) == 0 ? 0 :  // one                          1;                    // Langi                  case "lag":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n > 0) && (n < 2) ? 1 : // one                          2;                    // Lithuanian                  case "lt":                      return (n' c) =>                          (n % 10) == 1 && !(n % 100).Between(11' 19) ? 0 : // one                          (n % 10).Between(2' 9) && !(n % 100).Between(11' 19) ? 1 : // few                          2;                    // Latvian                  case "lv":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n % 10) == 1 && (n % 100) != 11 ? 1 :                          2;                    // Macedonian                  case "mb":                      return (n' c) =>                          (n % 10) == 1 && n != 11 ? 0 : // one                          1;                    // Moldavian                  case "mo":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n != 1 && (n % 100).Between(1' 19)) ? 1 : // few                          2;                    // Maltese                  case "mt":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(2' 10) ? 1 : // few                          (n % 100).Between(11' 19) ? 2 : // many                          3;                    // Polish                  case "pl":                      return (n' c) =>                          n == 1 ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          (n % 10).Between(0' 1) || (n % 10).Between(5' 9) || (n % 100).Between(12' 14) ? 2 : // many                          3;                    // Romanian                  case "ro":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(1' 19) ? 1 : // few                          2;                    // Tachelhit                  case "shi":                      return (n' c) =>                          (n >= 0 && n <= 1) ? 0 : // one                          n.Between(2' 10) ? 1 : // few                          2;                    // Slovak                  case "sk":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Slovenian                  case "sl":                      return (n' c) =>                          (n % 100) == 1 ? 0 : // one                          (n % 100) == 2 ? 1 : // two                          (n % 100).Between(3' 4) ? 2 : // few                          3;                    // Central Morocco Tamazight                  case "tzm":                      return (n' c) =>                          n.Between(0' 1) || n.Between(11' 99) ? 0 : // one                          1;                      // Unknown language                  default:                      return null;              }
Magic Number,SmartFormat.Extensions,CommonLanguageRules,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\PluralLocalizationFormatter.cs,GetPluralRule,The following statement contains a magic number: switch (twoLetterISOLanguageName)              {                  // Singular                  case "az": // Azerbaijani                  case "bm": // Bambara                  case "bo": // Tibetan                  case "dz": // Dzongkha                  case "fa": // Persian                  case "hu": // Hungarian                  case "id": // Indonesian                  case "ig": // Igbo                  case "ii": // Sichuan Yi                  case "ja": // Japanese                  case "jv": // Javanese                  case "ka": // Georgian                  case "kde": // Makonde                  case "kea": // Kabuverdianu                  case "km": // Khmer                  case "kn": // Kannada                  case "ko": // Korean                  case "ms": // Malay                  case "my": // Burmese                  case "root": // Root (?)                  case "sah": // Sakha                  case "ses": // Koyraboro Senni                  case "sg": // Sango                  case "th": // Thai                  case "to": // Tonga                  case "vi": // Vietnamese                  case "wo": // Wolof                  case "yo": // Yoruba                  case "zh": // Chinese                      return (n' c) => 0;                    // Dual: one (n == 1)' other                  case "af": // Afrikaans                  case "bem": // Bembda                  case "bg": // Bulgarian                  case "bn": // Bengali                  case "brx": // Bodo                  case "ca": // Catalan                  case "cgg": // Chiga                  case "chr": // Cherokee                  case "da": // Danish                  case "de": // German                  case "dv": // Divehi                  case "ee": // Ewe                  case "el": // Greek                  case "en": // English                  case "eo": // Esperanto                  case "es": // Spanish                  case "et": // Estonian                  case "eu": // Basque                  case "fi": // Finnish                  case "fo": // Faroese                  case "fur": // Friulian                  case "fy": // Western Frisian                  case "gl": // Galician                  case "gsw": // Swiss German                  case "gu": // Gujarati                  case "ha": // Hausa                  case "haw": // Hawaiian                  case "he": // Hebrew                  case "is": // Icelandic                  case "it": // Italian                  case "kk": // Kazakh                  case "kl": // Kalaallisut                  case "ku": // Kurdish                  case "lb": // Luxembourgish                  case "lg": // Ganda                  case "lo": // Lao                  case "mas": // Masai                  case "ml": // Malayalam                  case "mn": // Mongolian                  case "mr": // Marathi                  case "nah": // Nahuatl                  case "nb": // Norwegian Bokmål                  case "ne": // Nepali                  case "nl": // Dutch                  case "nn": // Norwegian Nynorsk                  case "no": // Norwegian                  case "nyn": // Nyankole                  case "om": // Oromo                  case "or": // Oriya                  case "pa": // Punjabi                  case "pap": // Papiamento                  case "ps": // Pashto                  case "pt": // Portuguese                  case "rm": // Romansh                  case "saq": // Samburu                  case "so": // Somali                  case "sq": // Albanian                  case "ssy": // Saho                  case "sw": // Swahili                  case "sv": // Swedish                  case "syr": // Syriac                  case "ta": // Tamil                  case "te": // Telugu                  case "tk": // Turkmen                  case "tr": // Turkish                  case "ur": // Urdu                  case "wae": // Walser                  case "xog": // Soga                  case "zu": // Zulu                      return (n' c) =>                      {                          if (c == 2) return (n == 1) ? 0 : 1;                          if (c == 3) return (n == 0) ? 0 : (n == 1) ? 1 : 2;                          if (c == 4) return (n < 0) ? 0 : (n == 0) ? 1 : (n == 1) ? 2 : 3;                          return -1;                      };                    // DualWithZero: one (n == 0..1)' other                  case "ak": // Akan                  case "am": // Amharic                  case "bh": // Bihari                  case "fil": // Filipino                  case "guw": // Gun                  case "hi": // Hindi                  case "ln": // Lingala                  case "mg": // Malagasy                  case "nso": // Northern Sotho                  case "ti": // Tigrinya                  case "tl": // Tagalog                  case "wa": // Walloon                      return (n' c) => (n == 0 || n == 1) ? 0 : 1;                    // DualFromZeroToTwo: one (n == 0..2 fractionate and n != 2)' other                  case "ff": // Fulah                  case "fr": // French                  case "kab": // Kabyle                      return (n' c) => (n >= 0 && n < 2) ? 0 : 1;                    // Triple: one (n == 1)' two (n == 2)' other                  case "ga": // Irish                  case "iu": // Inuktitut                  case "ksh": // Colognian                  case "kw": // Cornish                  case "se": // Northern Sami                  case "sma": // Southern Sami                  case "smi": // Sami language                  case "smj": // Lule Sami                  case "smn": // Inari Sami                  case "sms": // Skolt Sami                      return (n' c) => (n == 1) ? 0 : (n == 2) ? 1 : 2;                    // Russian & Serbo-Croatian                  case "be": // Belarusian                  case "bs": // Bosnian                  case "hr": // Croatian                  case "ru": // Russian                  case "sh": // Serbo-Croatian                  case "sr": // Serbian                  case "uk": // Ukrainian                      return (n' c) =>                          (n % 10 == 1) && !(n % 100 == 11) ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          2;                    // Unique:                    // Arabic                  case "ar":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          (n % 100).Between(3' 10) ? 3 : // few                          (n % 100).Between(11' 99) ? 4 : // many                          5; // other                    // Breton                  case "br":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5; // other                    // Czech                  case "cs":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Welsh                  case "cy":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5;                    // Manx                  case "gv":                      return (n' c) =>                          (n % 10).Between(1' 2) || (n % 20) == 0 ? 0 :  // one                          1;                    // Langi                  case "lag":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n > 0) && (n < 2) ? 1 : // one                          2;                    // Lithuanian                  case "lt":                      return (n' c) =>                          (n % 10) == 1 && !(n % 100).Between(11' 19) ? 0 : // one                          (n % 10).Between(2' 9) && !(n % 100).Between(11' 19) ? 1 : // few                          2;                    // Latvian                  case "lv":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n % 10) == 1 && (n % 100) != 11 ? 1 :                          2;                    // Macedonian                  case "mb":                      return (n' c) =>                          (n % 10) == 1 && n != 11 ? 0 : // one                          1;                    // Moldavian                  case "mo":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n != 1 && (n % 100).Between(1' 19)) ? 1 : // few                          2;                    // Maltese                  case "mt":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(2' 10) ? 1 : // few                          (n % 100).Between(11' 19) ? 2 : // many                          3;                    // Polish                  case "pl":                      return (n' c) =>                          n == 1 ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          (n % 10).Between(0' 1) || (n % 10).Between(5' 9) || (n % 100).Between(12' 14) ? 2 : // many                          3;                    // Romanian                  case "ro":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(1' 19) ? 1 : // few                          2;                    // Tachelhit                  case "shi":                      return (n' c) =>                          (n >= 0 && n <= 1) ? 0 : // one                          n.Between(2' 10) ? 1 : // few                          2;                    // Slovak                  case "sk":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Slovenian                  case "sl":                      return (n' c) =>                          (n % 100) == 1 ? 0 : // one                          (n % 100) == 2 ? 1 : // two                          (n % 100).Between(3' 4) ? 2 : // few                          3;                    // Central Morocco Tamazight                  case "tzm":                      return (n' c) =>                          n.Between(0' 1) || n.Between(11' 99) ? 0 : // one                          1;                      // Unknown language                  default:                      return null;              }
Magic Number,SmartFormat.Extensions,CommonLanguageRules,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\PluralLocalizationFormatter.cs,GetPluralRule,The following statement contains a magic number: switch (twoLetterISOLanguageName)              {                  // Singular                  case "az": // Azerbaijani                  case "bm": // Bambara                  case "bo": // Tibetan                  case "dz": // Dzongkha                  case "fa": // Persian                  case "hu": // Hungarian                  case "id": // Indonesian                  case "ig": // Igbo                  case "ii": // Sichuan Yi                  case "ja": // Japanese                  case "jv": // Javanese                  case "ka": // Georgian                  case "kde": // Makonde                  case "kea": // Kabuverdianu                  case "km": // Khmer                  case "kn": // Kannada                  case "ko": // Korean                  case "ms": // Malay                  case "my": // Burmese                  case "root": // Root (?)                  case "sah": // Sakha                  case "ses": // Koyraboro Senni                  case "sg": // Sango                  case "th": // Thai                  case "to": // Tonga                  case "vi": // Vietnamese                  case "wo": // Wolof                  case "yo": // Yoruba                  case "zh": // Chinese                      return (n' c) => 0;                    // Dual: one (n == 1)' other                  case "af": // Afrikaans                  case "bem": // Bembda                  case "bg": // Bulgarian                  case "bn": // Bengali                  case "brx": // Bodo                  case "ca": // Catalan                  case "cgg": // Chiga                  case "chr": // Cherokee                  case "da": // Danish                  case "de": // German                  case "dv": // Divehi                  case "ee": // Ewe                  case "el": // Greek                  case "en": // English                  case "eo": // Esperanto                  case "es": // Spanish                  case "et": // Estonian                  case "eu": // Basque                  case "fi": // Finnish                  case "fo": // Faroese                  case "fur": // Friulian                  case "fy": // Western Frisian                  case "gl": // Galician                  case "gsw": // Swiss German                  case "gu": // Gujarati                  case "ha": // Hausa                  case "haw": // Hawaiian                  case "he": // Hebrew                  case "is": // Icelandic                  case "it": // Italian                  case "kk": // Kazakh                  case "kl": // Kalaallisut                  case "ku": // Kurdish                  case "lb": // Luxembourgish                  case "lg": // Ganda                  case "lo": // Lao                  case "mas": // Masai                  case "ml": // Malayalam                  case "mn": // Mongolian                  case "mr": // Marathi                  case "nah": // Nahuatl                  case "nb": // Norwegian Bokmål                  case "ne": // Nepali                  case "nl": // Dutch                  case "nn": // Norwegian Nynorsk                  case "no": // Norwegian                  case "nyn": // Nyankole                  case "om": // Oromo                  case "or": // Oriya                  case "pa": // Punjabi                  case "pap": // Papiamento                  case "ps": // Pashto                  case "pt": // Portuguese                  case "rm": // Romansh                  case "saq": // Samburu                  case "so": // Somali                  case "sq": // Albanian                  case "ssy": // Saho                  case "sw": // Swahili                  case "sv": // Swedish                  case "syr": // Syriac                  case "ta": // Tamil                  case "te": // Telugu                  case "tk": // Turkmen                  case "tr": // Turkish                  case "ur": // Urdu                  case "wae": // Walser                  case "xog": // Soga                  case "zu": // Zulu                      return (n' c) =>                      {                          if (c == 2) return (n == 1) ? 0 : 1;                          if (c == 3) return (n == 0) ? 0 : (n == 1) ? 1 : 2;                          if (c == 4) return (n < 0) ? 0 : (n == 0) ? 1 : (n == 1) ? 2 : 3;                          return -1;                      };                    // DualWithZero: one (n == 0..1)' other                  case "ak": // Akan                  case "am": // Amharic                  case "bh": // Bihari                  case "fil": // Filipino                  case "guw": // Gun                  case "hi": // Hindi                  case "ln": // Lingala                  case "mg": // Malagasy                  case "nso": // Northern Sotho                  case "ti": // Tigrinya                  case "tl": // Tagalog                  case "wa": // Walloon                      return (n' c) => (n == 0 || n == 1) ? 0 : 1;                    // DualFromZeroToTwo: one (n == 0..2 fractionate and n != 2)' other                  case "ff": // Fulah                  case "fr": // French                  case "kab": // Kabyle                      return (n' c) => (n >= 0 && n < 2) ? 0 : 1;                    // Triple: one (n == 1)' two (n == 2)' other                  case "ga": // Irish                  case "iu": // Inuktitut                  case "ksh": // Colognian                  case "kw": // Cornish                  case "se": // Northern Sami                  case "sma": // Southern Sami                  case "smi": // Sami language                  case "smj": // Lule Sami                  case "smn": // Inari Sami                  case "sms": // Skolt Sami                      return (n' c) => (n == 1) ? 0 : (n == 2) ? 1 : 2;                    // Russian & Serbo-Croatian                  case "be": // Belarusian                  case "bs": // Bosnian                  case "hr": // Croatian                  case "ru": // Russian                  case "sh": // Serbo-Croatian                  case "sr": // Serbian                  case "uk": // Ukrainian                      return (n' c) =>                          (n % 10 == 1) && !(n % 100 == 11) ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          2;                    // Unique:                    // Arabic                  case "ar":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          (n % 100).Between(3' 10) ? 3 : // few                          (n % 100).Between(11' 99) ? 4 : // many                          5; // other                    // Breton                  case "br":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5; // other                    // Czech                  case "cs":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Welsh                  case "cy":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5;                    // Manx                  case "gv":                      return (n' c) =>                          (n % 10).Between(1' 2) || (n % 20) == 0 ? 0 :  // one                          1;                    // Langi                  case "lag":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n > 0) && (n < 2) ? 1 : // one                          2;                    // Lithuanian                  case "lt":                      return (n' c) =>                          (n % 10) == 1 && !(n % 100).Between(11' 19) ? 0 : // one                          (n % 10).Between(2' 9) && !(n % 100).Between(11' 19) ? 1 : // few                          2;                    // Latvian                  case "lv":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n % 10) == 1 && (n % 100) != 11 ? 1 :                          2;                    // Macedonian                  case "mb":                      return (n' c) =>                          (n % 10) == 1 && n != 11 ? 0 : // one                          1;                    // Moldavian                  case "mo":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n != 1 && (n % 100).Between(1' 19)) ? 1 : // few                          2;                    // Maltese                  case "mt":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(2' 10) ? 1 : // few                          (n % 100).Between(11' 19) ? 2 : // many                          3;                    // Polish                  case "pl":                      return (n' c) =>                          n == 1 ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          (n % 10).Between(0' 1) || (n % 10).Between(5' 9) || (n % 100).Between(12' 14) ? 2 : // many                          3;                    // Romanian                  case "ro":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(1' 19) ? 1 : // few                          2;                    // Tachelhit                  case "shi":                      return (n' c) =>                          (n >= 0 && n <= 1) ? 0 : // one                          n.Between(2' 10) ? 1 : // few                          2;                    // Slovak                  case "sk":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Slovenian                  case "sl":                      return (n' c) =>                          (n % 100) == 1 ? 0 : // one                          (n % 100) == 2 ? 1 : // two                          (n % 100).Between(3' 4) ? 2 : // few                          3;                    // Central Morocco Tamazight                  case "tzm":                      return (n' c) =>                          n.Between(0' 1) || n.Between(11' 99) ? 0 : // one                          1;                      // Unknown language                  default:                      return null;              }
Magic Number,SmartFormat.Extensions,CommonLanguageRules,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\PluralLocalizationFormatter.cs,GetPluralRule,The following statement contains a magic number: switch (twoLetterISOLanguageName)              {                  // Singular                  case "az": // Azerbaijani                  case "bm": // Bambara                  case "bo": // Tibetan                  case "dz": // Dzongkha                  case "fa": // Persian                  case "hu": // Hungarian                  case "id": // Indonesian                  case "ig": // Igbo                  case "ii": // Sichuan Yi                  case "ja": // Japanese                  case "jv": // Javanese                  case "ka": // Georgian                  case "kde": // Makonde                  case "kea": // Kabuverdianu                  case "km": // Khmer                  case "kn": // Kannada                  case "ko": // Korean                  case "ms": // Malay                  case "my": // Burmese                  case "root": // Root (?)                  case "sah": // Sakha                  case "ses": // Koyraboro Senni                  case "sg": // Sango                  case "th": // Thai                  case "to": // Tonga                  case "vi": // Vietnamese                  case "wo": // Wolof                  case "yo": // Yoruba                  case "zh": // Chinese                      return (n' c) => 0;                    // Dual: one (n == 1)' other                  case "af": // Afrikaans                  case "bem": // Bembda                  case "bg": // Bulgarian                  case "bn": // Bengali                  case "brx": // Bodo                  case "ca": // Catalan                  case "cgg": // Chiga                  case "chr": // Cherokee                  case "da": // Danish                  case "de": // German                  case "dv": // Divehi                  case "ee": // Ewe                  case "el": // Greek                  case "en": // English                  case "eo": // Esperanto                  case "es": // Spanish                  case "et": // Estonian                  case "eu": // Basque                  case "fi": // Finnish                  case "fo": // Faroese                  case "fur": // Friulian                  case "fy": // Western Frisian                  case "gl": // Galician                  case "gsw": // Swiss German                  case "gu": // Gujarati                  case "ha": // Hausa                  case "haw": // Hawaiian                  case "he": // Hebrew                  case "is": // Icelandic                  case "it": // Italian                  case "kk": // Kazakh                  case "kl": // Kalaallisut                  case "ku": // Kurdish                  case "lb": // Luxembourgish                  case "lg": // Ganda                  case "lo": // Lao                  case "mas": // Masai                  case "ml": // Malayalam                  case "mn": // Mongolian                  case "mr": // Marathi                  case "nah": // Nahuatl                  case "nb": // Norwegian Bokmål                  case "ne": // Nepali                  case "nl": // Dutch                  case "nn": // Norwegian Nynorsk                  case "no": // Norwegian                  case "nyn": // Nyankole                  case "om": // Oromo                  case "or": // Oriya                  case "pa": // Punjabi                  case "pap": // Papiamento                  case "ps": // Pashto                  case "pt": // Portuguese                  case "rm": // Romansh                  case "saq": // Samburu                  case "so": // Somali                  case "sq": // Albanian                  case "ssy": // Saho                  case "sw": // Swahili                  case "sv": // Swedish                  case "syr": // Syriac                  case "ta": // Tamil                  case "te": // Telugu                  case "tk": // Turkmen                  case "tr": // Turkish                  case "ur": // Urdu                  case "wae": // Walser                  case "xog": // Soga                  case "zu": // Zulu                      return (n' c) =>                      {                          if (c == 2) return (n == 1) ? 0 : 1;                          if (c == 3) return (n == 0) ? 0 : (n == 1) ? 1 : 2;                          if (c == 4) return (n < 0) ? 0 : (n == 0) ? 1 : (n == 1) ? 2 : 3;                          return -1;                      };                    // DualWithZero: one (n == 0..1)' other                  case "ak": // Akan                  case "am": // Amharic                  case "bh": // Bihari                  case "fil": // Filipino                  case "guw": // Gun                  case "hi": // Hindi                  case "ln": // Lingala                  case "mg": // Malagasy                  case "nso": // Northern Sotho                  case "ti": // Tigrinya                  case "tl": // Tagalog                  case "wa": // Walloon                      return (n' c) => (n == 0 || n == 1) ? 0 : 1;                    // DualFromZeroToTwo: one (n == 0..2 fractionate and n != 2)' other                  case "ff": // Fulah                  case "fr": // French                  case "kab": // Kabyle                      return (n' c) => (n >= 0 && n < 2) ? 0 : 1;                    // Triple: one (n == 1)' two (n == 2)' other                  case "ga": // Irish                  case "iu": // Inuktitut                  case "ksh": // Colognian                  case "kw": // Cornish                  case "se": // Northern Sami                  case "sma": // Southern Sami                  case "smi": // Sami language                  case "smj": // Lule Sami                  case "smn": // Inari Sami                  case "sms": // Skolt Sami                      return (n' c) => (n == 1) ? 0 : (n == 2) ? 1 : 2;                    // Russian & Serbo-Croatian                  case "be": // Belarusian                  case "bs": // Bosnian                  case "hr": // Croatian                  case "ru": // Russian                  case "sh": // Serbo-Croatian                  case "sr": // Serbian                  case "uk": // Ukrainian                      return (n' c) =>                          (n % 10 == 1) && !(n % 100 == 11) ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          2;                    // Unique:                    // Arabic                  case "ar":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          (n % 100).Between(3' 10) ? 3 : // few                          (n % 100).Between(11' 99) ? 4 : // many                          5; // other                    // Breton                  case "br":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5; // other                    // Czech                  case "cs":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Welsh                  case "cy":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5;                    // Manx                  case "gv":                      return (n' c) =>                          (n % 10).Between(1' 2) || (n % 20) == 0 ? 0 :  // one                          1;                    // Langi                  case "lag":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n > 0) && (n < 2) ? 1 : // one                          2;                    // Lithuanian                  case "lt":                      return (n' c) =>                          (n % 10) == 1 && !(n % 100).Between(11' 19) ? 0 : // one                          (n % 10).Between(2' 9) && !(n % 100).Between(11' 19) ? 1 : // few                          2;                    // Latvian                  case "lv":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n % 10) == 1 && (n % 100) != 11 ? 1 :                          2;                    // Macedonian                  case "mb":                      return (n' c) =>                          (n % 10) == 1 && n != 11 ? 0 : // one                          1;                    // Moldavian                  case "mo":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n != 1 && (n % 100).Between(1' 19)) ? 1 : // few                          2;                    // Maltese                  case "mt":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(2' 10) ? 1 : // few                          (n % 100).Between(11' 19) ? 2 : // many                          3;                    // Polish                  case "pl":                      return (n' c) =>                          n == 1 ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          (n % 10).Between(0' 1) || (n % 10).Between(5' 9) || (n % 100).Between(12' 14) ? 2 : // many                          3;                    // Romanian                  case "ro":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(1' 19) ? 1 : // few                          2;                    // Tachelhit                  case "shi":                      return (n' c) =>                          (n >= 0 && n <= 1) ? 0 : // one                          n.Between(2' 10) ? 1 : // few                          2;                    // Slovak                  case "sk":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Slovenian                  case "sl":                      return (n' c) =>                          (n % 100) == 1 ? 0 : // one                          (n % 100) == 2 ? 1 : // two                          (n % 100).Between(3' 4) ? 2 : // few                          3;                    // Central Morocco Tamazight                  case "tzm":                      return (n' c) =>                          n.Between(0' 1) || n.Between(11' 99) ? 0 : // one                          1;                      // Unknown language                  default:                      return null;              }
Magic Number,SmartFormat.Extensions,CommonLanguageRules,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\PluralLocalizationFormatter.cs,GetPluralRule,The following statement contains a magic number: switch (twoLetterISOLanguageName)              {                  // Singular                  case "az": // Azerbaijani                  case "bm": // Bambara                  case "bo": // Tibetan                  case "dz": // Dzongkha                  case "fa": // Persian                  case "hu": // Hungarian                  case "id": // Indonesian                  case "ig": // Igbo                  case "ii": // Sichuan Yi                  case "ja": // Japanese                  case "jv": // Javanese                  case "ka": // Georgian                  case "kde": // Makonde                  case "kea": // Kabuverdianu                  case "km": // Khmer                  case "kn": // Kannada                  case "ko": // Korean                  case "ms": // Malay                  case "my": // Burmese                  case "root": // Root (?)                  case "sah": // Sakha                  case "ses": // Koyraboro Senni                  case "sg": // Sango                  case "th": // Thai                  case "to": // Tonga                  case "vi": // Vietnamese                  case "wo": // Wolof                  case "yo": // Yoruba                  case "zh": // Chinese                      return (n' c) => 0;                    // Dual: one (n == 1)' other                  case "af": // Afrikaans                  case "bem": // Bembda                  case "bg": // Bulgarian                  case "bn": // Bengali                  case "brx": // Bodo                  case "ca": // Catalan                  case "cgg": // Chiga                  case "chr": // Cherokee                  case "da": // Danish                  case "de": // German                  case "dv": // Divehi                  case "ee": // Ewe                  case "el": // Greek                  case "en": // English                  case "eo": // Esperanto                  case "es": // Spanish                  case "et": // Estonian                  case "eu": // Basque                  case "fi": // Finnish                  case "fo": // Faroese                  case "fur": // Friulian                  case "fy": // Western Frisian                  case "gl": // Galician                  case "gsw": // Swiss German                  case "gu": // Gujarati                  case "ha": // Hausa                  case "haw": // Hawaiian                  case "he": // Hebrew                  case "is": // Icelandic                  case "it": // Italian                  case "kk": // Kazakh                  case "kl": // Kalaallisut                  case "ku": // Kurdish                  case "lb": // Luxembourgish                  case "lg": // Ganda                  case "lo": // Lao                  case "mas": // Masai                  case "ml": // Malayalam                  case "mn": // Mongolian                  case "mr": // Marathi                  case "nah": // Nahuatl                  case "nb": // Norwegian Bokmål                  case "ne": // Nepali                  case "nl": // Dutch                  case "nn": // Norwegian Nynorsk                  case "no": // Norwegian                  case "nyn": // Nyankole                  case "om": // Oromo                  case "or": // Oriya                  case "pa": // Punjabi                  case "pap": // Papiamento                  case "ps": // Pashto                  case "pt": // Portuguese                  case "rm": // Romansh                  case "saq": // Samburu                  case "so": // Somali                  case "sq": // Albanian                  case "ssy": // Saho                  case "sw": // Swahili                  case "sv": // Swedish                  case "syr": // Syriac                  case "ta": // Tamil                  case "te": // Telugu                  case "tk": // Turkmen                  case "tr": // Turkish                  case "ur": // Urdu                  case "wae": // Walser                  case "xog": // Soga                  case "zu": // Zulu                      return (n' c) =>                      {                          if (c == 2) return (n == 1) ? 0 : 1;                          if (c == 3) return (n == 0) ? 0 : (n == 1) ? 1 : 2;                          if (c == 4) return (n < 0) ? 0 : (n == 0) ? 1 : (n == 1) ? 2 : 3;                          return -1;                      };                    // DualWithZero: one (n == 0..1)' other                  case "ak": // Akan                  case "am": // Amharic                  case "bh": // Bihari                  case "fil": // Filipino                  case "guw": // Gun                  case "hi": // Hindi                  case "ln": // Lingala                  case "mg": // Malagasy                  case "nso": // Northern Sotho                  case "ti": // Tigrinya                  case "tl": // Tagalog                  case "wa": // Walloon                      return (n' c) => (n == 0 || n == 1) ? 0 : 1;                    // DualFromZeroToTwo: one (n == 0..2 fractionate and n != 2)' other                  case "ff": // Fulah                  case "fr": // French                  case "kab": // Kabyle                      return (n' c) => (n >= 0 && n < 2) ? 0 : 1;                    // Triple: one (n == 1)' two (n == 2)' other                  case "ga": // Irish                  case "iu": // Inuktitut                  case "ksh": // Colognian                  case "kw": // Cornish                  case "se": // Northern Sami                  case "sma": // Southern Sami                  case "smi": // Sami language                  case "smj": // Lule Sami                  case "smn": // Inari Sami                  case "sms": // Skolt Sami                      return (n' c) => (n == 1) ? 0 : (n == 2) ? 1 : 2;                    // Russian & Serbo-Croatian                  case "be": // Belarusian                  case "bs": // Bosnian                  case "hr": // Croatian                  case "ru": // Russian                  case "sh": // Serbo-Croatian                  case "sr": // Serbian                  case "uk": // Ukrainian                      return (n' c) =>                          (n % 10 == 1) && !(n % 100 == 11) ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          2;                    // Unique:                    // Arabic                  case "ar":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          (n % 100).Between(3' 10) ? 3 : // few                          (n % 100).Between(11' 99) ? 4 : // many                          5; // other                    // Breton                  case "br":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5; // other                    // Czech                  case "cs":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Welsh                  case "cy":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5;                    // Manx                  case "gv":                      return (n' c) =>                          (n % 10).Between(1' 2) || (n % 20) == 0 ? 0 :  // one                          1;                    // Langi                  case "lag":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n > 0) && (n < 2) ? 1 : // one                          2;                    // Lithuanian                  case "lt":                      return (n' c) =>                          (n % 10) == 1 && !(n % 100).Between(11' 19) ? 0 : // one                          (n % 10).Between(2' 9) && !(n % 100).Between(11' 19) ? 1 : // few                          2;                    // Latvian                  case "lv":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n % 10) == 1 && (n % 100) != 11 ? 1 :                          2;                    // Macedonian                  case "mb":                      return (n' c) =>                          (n % 10) == 1 && n != 11 ? 0 : // one                          1;                    // Moldavian                  case "mo":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n != 1 && (n % 100).Between(1' 19)) ? 1 : // few                          2;                    // Maltese                  case "mt":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(2' 10) ? 1 : // few                          (n % 100).Between(11' 19) ? 2 : // many                          3;                    // Polish                  case "pl":                      return (n' c) =>                          n == 1 ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          (n % 10).Between(0' 1) || (n % 10).Between(5' 9) || (n % 100).Between(12' 14) ? 2 : // many                          3;                    // Romanian                  case "ro":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(1' 19) ? 1 : // few                          2;                    // Tachelhit                  case "shi":                      return (n' c) =>                          (n >= 0 && n <= 1) ? 0 : // one                          n.Between(2' 10) ? 1 : // few                          2;                    // Slovak                  case "sk":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Slovenian                  case "sl":                      return (n' c) =>                          (n % 100) == 1 ? 0 : // one                          (n % 100) == 2 ? 1 : // two                          (n % 100).Between(3' 4) ? 2 : // few                          3;                    // Central Morocco Tamazight                  case "tzm":                      return (n' c) =>                          n.Between(0' 1) || n.Between(11' 99) ? 0 : // one                          1;                      // Unknown language                  default:                      return null;              }
Magic Number,SmartFormat.Extensions,CommonLanguageRules,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\PluralLocalizationFormatter.cs,GetPluralRule,The following statement contains a magic number: switch (twoLetterISOLanguageName)              {                  // Singular                  case "az": // Azerbaijani                  case "bm": // Bambara                  case "bo": // Tibetan                  case "dz": // Dzongkha                  case "fa": // Persian                  case "hu": // Hungarian                  case "id": // Indonesian                  case "ig": // Igbo                  case "ii": // Sichuan Yi                  case "ja": // Japanese                  case "jv": // Javanese                  case "ka": // Georgian                  case "kde": // Makonde                  case "kea": // Kabuverdianu                  case "km": // Khmer                  case "kn": // Kannada                  case "ko": // Korean                  case "ms": // Malay                  case "my": // Burmese                  case "root": // Root (?)                  case "sah": // Sakha                  case "ses": // Koyraboro Senni                  case "sg": // Sango                  case "th": // Thai                  case "to": // Tonga                  case "vi": // Vietnamese                  case "wo": // Wolof                  case "yo": // Yoruba                  case "zh": // Chinese                      return (n' c) => 0;                    // Dual: one (n == 1)' other                  case "af": // Afrikaans                  case "bem": // Bembda                  case "bg": // Bulgarian                  case "bn": // Bengali                  case "brx": // Bodo                  case "ca": // Catalan                  case "cgg": // Chiga                  case "chr": // Cherokee                  case "da": // Danish                  case "de": // German                  case "dv": // Divehi                  case "ee": // Ewe                  case "el": // Greek                  case "en": // English                  case "eo": // Esperanto                  case "es": // Spanish                  case "et": // Estonian                  case "eu": // Basque                  case "fi": // Finnish                  case "fo": // Faroese                  case "fur": // Friulian                  case "fy": // Western Frisian                  case "gl": // Galician                  case "gsw": // Swiss German                  case "gu": // Gujarati                  case "ha": // Hausa                  case "haw": // Hawaiian                  case "he": // Hebrew                  case "is": // Icelandic                  case "it": // Italian                  case "kk": // Kazakh                  case "kl": // Kalaallisut                  case "ku": // Kurdish                  case "lb": // Luxembourgish                  case "lg": // Ganda                  case "lo": // Lao                  case "mas": // Masai                  case "ml": // Malayalam                  case "mn": // Mongolian                  case "mr": // Marathi                  case "nah": // Nahuatl                  case "nb": // Norwegian Bokmål                  case "ne": // Nepali                  case "nl": // Dutch                  case "nn": // Norwegian Nynorsk                  case "no": // Norwegian                  case "nyn": // Nyankole                  case "om": // Oromo                  case "or": // Oriya                  case "pa": // Punjabi                  case "pap": // Papiamento                  case "ps": // Pashto                  case "pt": // Portuguese                  case "rm": // Romansh                  case "saq": // Samburu                  case "so": // Somali                  case "sq": // Albanian                  case "ssy": // Saho                  case "sw": // Swahili                  case "sv": // Swedish                  case "syr": // Syriac                  case "ta": // Tamil                  case "te": // Telugu                  case "tk": // Turkmen                  case "tr": // Turkish                  case "ur": // Urdu                  case "wae": // Walser                  case "xog": // Soga                  case "zu": // Zulu                      return (n' c) =>                      {                          if (c == 2) return (n == 1) ? 0 : 1;                          if (c == 3) return (n == 0) ? 0 : (n == 1) ? 1 : 2;                          if (c == 4) return (n < 0) ? 0 : (n == 0) ? 1 : (n == 1) ? 2 : 3;                          return -1;                      };                    // DualWithZero: one (n == 0..1)' other                  case "ak": // Akan                  case "am": // Amharic                  case "bh": // Bihari                  case "fil": // Filipino                  case "guw": // Gun                  case "hi": // Hindi                  case "ln": // Lingala                  case "mg": // Malagasy                  case "nso": // Northern Sotho                  case "ti": // Tigrinya                  case "tl": // Tagalog                  case "wa": // Walloon                      return (n' c) => (n == 0 || n == 1) ? 0 : 1;                    // DualFromZeroToTwo: one (n == 0..2 fractionate and n != 2)' other                  case "ff": // Fulah                  case "fr": // French                  case "kab": // Kabyle                      return (n' c) => (n >= 0 && n < 2) ? 0 : 1;                    // Triple: one (n == 1)' two (n == 2)' other                  case "ga": // Irish                  case "iu": // Inuktitut                  case "ksh": // Colognian                  case "kw": // Cornish                  case "se": // Northern Sami                  case "sma": // Southern Sami                  case "smi": // Sami language                  case "smj": // Lule Sami                  case "smn": // Inari Sami                  case "sms": // Skolt Sami                      return (n' c) => (n == 1) ? 0 : (n == 2) ? 1 : 2;                    // Russian & Serbo-Croatian                  case "be": // Belarusian                  case "bs": // Bosnian                  case "hr": // Croatian                  case "ru": // Russian                  case "sh": // Serbo-Croatian                  case "sr": // Serbian                  case "uk": // Ukrainian                      return (n' c) =>                          (n % 10 == 1) && !(n % 100 == 11) ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          2;                    // Unique:                    // Arabic                  case "ar":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          (n % 100).Between(3' 10) ? 3 : // few                          (n % 100).Between(11' 99) ? 4 : // many                          5; // other                    // Breton                  case "br":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5; // other                    // Czech                  case "cs":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Welsh                  case "cy":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5;                    // Manx                  case "gv":                      return (n' c) =>                          (n % 10).Between(1' 2) || (n % 20) == 0 ? 0 :  // one                          1;                    // Langi                  case "lag":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n > 0) && (n < 2) ? 1 : // one                          2;                    // Lithuanian                  case "lt":                      return (n' c) =>                          (n % 10) == 1 && !(n % 100).Between(11' 19) ? 0 : // one                          (n % 10).Between(2' 9) && !(n % 100).Between(11' 19) ? 1 : // few                          2;                    // Latvian                  case "lv":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n % 10) == 1 && (n % 100) != 11 ? 1 :                          2;                    // Macedonian                  case "mb":                      return (n' c) =>                          (n % 10) == 1 && n != 11 ? 0 : // one                          1;                    // Moldavian                  case "mo":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n != 1 && (n % 100).Between(1' 19)) ? 1 : // few                          2;                    // Maltese                  case "mt":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(2' 10) ? 1 : // few                          (n % 100).Between(11' 19) ? 2 : // many                          3;                    // Polish                  case "pl":                      return (n' c) =>                          n == 1 ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          (n % 10).Between(0' 1) || (n % 10).Between(5' 9) || (n % 100).Between(12' 14) ? 2 : // many                          3;                    // Romanian                  case "ro":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(1' 19) ? 1 : // few                          2;                    // Tachelhit                  case "shi":                      return (n' c) =>                          (n >= 0 && n <= 1) ? 0 : // one                          n.Between(2' 10) ? 1 : // few                          2;                    // Slovak                  case "sk":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Slovenian                  case "sl":                      return (n' c) =>                          (n % 100) == 1 ? 0 : // one                          (n % 100) == 2 ? 1 : // two                          (n % 100).Between(3' 4) ? 2 : // few                          3;                    // Central Morocco Tamazight                  case "tzm":                      return (n' c) =>                          n.Between(0' 1) || n.Between(11' 99) ? 0 : // one                          1;                      // Unknown language                  default:                      return null;              }
Magic Number,SmartFormat.Extensions,CommonLanguageRules,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\PluralLocalizationFormatter.cs,GetPluralRule,The following statement contains a magic number: switch (twoLetterISOLanguageName)              {                  // Singular                  case "az": // Azerbaijani                  case "bm": // Bambara                  case "bo": // Tibetan                  case "dz": // Dzongkha                  case "fa": // Persian                  case "hu": // Hungarian                  case "id": // Indonesian                  case "ig": // Igbo                  case "ii": // Sichuan Yi                  case "ja": // Japanese                  case "jv": // Javanese                  case "ka": // Georgian                  case "kde": // Makonde                  case "kea": // Kabuverdianu                  case "km": // Khmer                  case "kn": // Kannada                  case "ko": // Korean                  case "ms": // Malay                  case "my": // Burmese                  case "root": // Root (?)                  case "sah": // Sakha                  case "ses": // Koyraboro Senni                  case "sg": // Sango                  case "th": // Thai                  case "to": // Tonga                  case "vi": // Vietnamese                  case "wo": // Wolof                  case "yo": // Yoruba                  case "zh": // Chinese                      return (n' c) => 0;                    // Dual: one (n == 1)' other                  case "af": // Afrikaans                  case "bem": // Bembda                  case "bg": // Bulgarian                  case "bn": // Bengali                  case "brx": // Bodo                  case "ca": // Catalan                  case "cgg": // Chiga                  case "chr": // Cherokee                  case "da": // Danish                  case "de": // German                  case "dv": // Divehi                  case "ee": // Ewe                  case "el": // Greek                  case "en": // English                  case "eo": // Esperanto                  case "es": // Spanish                  case "et": // Estonian                  case "eu": // Basque                  case "fi": // Finnish                  case "fo": // Faroese                  case "fur": // Friulian                  case "fy": // Western Frisian                  case "gl": // Galician                  case "gsw": // Swiss German                  case "gu": // Gujarati                  case "ha": // Hausa                  case "haw": // Hawaiian                  case "he": // Hebrew                  case "is": // Icelandic                  case "it": // Italian                  case "kk": // Kazakh                  case "kl": // Kalaallisut                  case "ku": // Kurdish                  case "lb": // Luxembourgish                  case "lg": // Ganda                  case "lo": // Lao                  case "mas": // Masai                  case "ml": // Malayalam                  case "mn": // Mongolian                  case "mr": // Marathi                  case "nah": // Nahuatl                  case "nb": // Norwegian Bokmål                  case "ne": // Nepali                  case "nl": // Dutch                  case "nn": // Norwegian Nynorsk                  case "no": // Norwegian                  case "nyn": // Nyankole                  case "om": // Oromo                  case "or": // Oriya                  case "pa": // Punjabi                  case "pap": // Papiamento                  case "ps": // Pashto                  case "pt": // Portuguese                  case "rm": // Romansh                  case "saq": // Samburu                  case "so": // Somali                  case "sq": // Albanian                  case "ssy": // Saho                  case "sw": // Swahili                  case "sv": // Swedish                  case "syr": // Syriac                  case "ta": // Tamil                  case "te": // Telugu                  case "tk": // Turkmen                  case "tr": // Turkish                  case "ur": // Urdu                  case "wae": // Walser                  case "xog": // Soga                  case "zu": // Zulu                      return (n' c) =>                      {                          if (c == 2) return (n == 1) ? 0 : 1;                          if (c == 3) return (n == 0) ? 0 : (n == 1) ? 1 : 2;                          if (c == 4) return (n < 0) ? 0 : (n == 0) ? 1 : (n == 1) ? 2 : 3;                          return -1;                      };                    // DualWithZero: one (n == 0..1)' other                  case "ak": // Akan                  case "am": // Amharic                  case "bh": // Bihari                  case "fil": // Filipino                  case "guw": // Gun                  case "hi": // Hindi                  case "ln": // Lingala                  case "mg": // Malagasy                  case "nso": // Northern Sotho                  case "ti": // Tigrinya                  case "tl": // Tagalog                  case "wa": // Walloon                      return (n' c) => (n == 0 || n == 1) ? 0 : 1;                    // DualFromZeroToTwo: one (n == 0..2 fractionate and n != 2)' other                  case "ff": // Fulah                  case "fr": // French                  case "kab": // Kabyle                      return (n' c) => (n >= 0 && n < 2) ? 0 : 1;                    // Triple: one (n == 1)' two (n == 2)' other                  case "ga": // Irish                  case "iu": // Inuktitut                  case "ksh": // Colognian                  case "kw": // Cornish                  case "se": // Northern Sami                  case "sma": // Southern Sami                  case "smi": // Sami language                  case "smj": // Lule Sami                  case "smn": // Inari Sami                  case "sms": // Skolt Sami                      return (n' c) => (n == 1) ? 0 : (n == 2) ? 1 : 2;                    // Russian & Serbo-Croatian                  case "be": // Belarusian                  case "bs": // Bosnian                  case "hr": // Croatian                  case "ru": // Russian                  case "sh": // Serbo-Croatian                  case "sr": // Serbian                  case "uk": // Ukrainian                      return (n' c) =>                          (n % 10 == 1) && !(n % 100 == 11) ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          2;                    // Unique:                    // Arabic                  case "ar":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          (n % 100).Between(3' 10) ? 3 : // few                          (n % 100).Between(11' 99) ? 4 : // many                          5; // other                    // Breton                  case "br":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5; // other                    // Czech                  case "cs":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Welsh                  case "cy":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5;                    // Manx                  case "gv":                      return (n' c) =>                          (n % 10).Between(1' 2) || (n % 20) == 0 ? 0 :  // one                          1;                    // Langi                  case "lag":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n > 0) && (n < 2) ? 1 : // one                          2;                    // Lithuanian                  case "lt":                      return (n' c) =>                          (n % 10) == 1 && !(n % 100).Between(11' 19) ? 0 : // one                          (n % 10).Between(2' 9) && !(n % 100).Between(11' 19) ? 1 : // few                          2;                    // Latvian                  case "lv":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n % 10) == 1 && (n % 100) != 11 ? 1 :                          2;                    // Macedonian                  case "mb":                      return (n' c) =>                          (n % 10) == 1 && n != 11 ? 0 : // one                          1;                    // Moldavian                  case "mo":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n != 1 && (n % 100).Between(1' 19)) ? 1 : // few                          2;                    // Maltese                  case "mt":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(2' 10) ? 1 : // few                          (n % 100).Between(11' 19) ? 2 : // many                          3;                    // Polish                  case "pl":                      return (n' c) =>                          n == 1 ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          (n % 10).Between(0' 1) || (n % 10).Between(5' 9) || (n % 100).Between(12' 14) ? 2 : // many                          3;                    // Romanian                  case "ro":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(1' 19) ? 1 : // few                          2;                    // Tachelhit                  case "shi":                      return (n' c) =>                          (n >= 0 && n <= 1) ? 0 : // one                          n.Between(2' 10) ? 1 : // few                          2;                    // Slovak                  case "sk":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Slovenian                  case "sl":                      return (n' c) =>                          (n % 100) == 1 ? 0 : // one                          (n % 100) == 2 ? 1 : // two                          (n % 100).Between(3' 4) ? 2 : // few                          3;                    // Central Morocco Tamazight                  case "tzm":                      return (n' c) =>                          n.Between(0' 1) || n.Between(11' 99) ? 0 : // one                          1;                      // Unknown language                  default:                      return null;              }
Magic Number,SmartFormat.Extensions,CommonLanguageRules,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\PluralLocalizationFormatter.cs,GetPluralRule,The following statement contains a magic number: switch (twoLetterISOLanguageName)              {                  // Singular                  case "az": // Azerbaijani                  case "bm": // Bambara                  case "bo": // Tibetan                  case "dz": // Dzongkha                  case "fa": // Persian                  case "hu": // Hungarian                  case "id": // Indonesian                  case "ig": // Igbo                  case "ii": // Sichuan Yi                  case "ja": // Japanese                  case "jv": // Javanese                  case "ka": // Georgian                  case "kde": // Makonde                  case "kea": // Kabuverdianu                  case "km": // Khmer                  case "kn": // Kannada                  case "ko": // Korean                  case "ms": // Malay                  case "my": // Burmese                  case "root": // Root (?)                  case "sah": // Sakha                  case "ses": // Koyraboro Senni                  case "sg": // Sango                  case "th": // Thai                  case "to": // Tonga                  case "vi": // Vietnamese                  case "wo": // Wolof                  case "yo": // Yoruba                  case "zh": // Chinese                      return (n' c) => 0;                    // Dual: one (n == 1)' other                  case "af": // Afrikaans                  case "bem": // Bembda                  case "bg": // Bulgarian                  case "bn": // Bengali                  case "brx": // Bodo                  case "ca": // Catalan                  case "cgg": // Chiga                  case "chr": // Cherokee                  case "da": // Danish                  case "de": // German                  case "dv": // Divehi                  case "ee": // Ewe                  case "el": // Greek                  case "en": // English                  case "eo": // Esperanto                  case "es": // Spanish                  case "et": // Estonian                  case "eu": // Basque                  case "fi": // Finnish                  case "fo": // Faroese                  case "fur": // Friulian                  case "fy": // Western Frisian                  case "gl": // Galician                  case "gsw": // Swiss German                  case "gu": // Gujarati                  case "ha": // Hausa                  case "haw": // Hawaiian                  case "he": // Hebrew                  case "is": // Icelandic                  case "it": // Italian                  case "kk": // Kazakh                  case "kl": // Kalaallisut                  case "ku": // Kurdish                  case "lb": // Luxembourgish                  case "lg": // Ganda                  case "lo": // Lao                  case "mas": // Masai                  case "ml": // Malayalam                  case "mn": // Mongolian                  case "mr": // Marathi                  case "nah": // Nahuatl                  case "nb": // Norwegian Bokmål                  case "ne": // Nepali                  case "nl": // Dutch                  case "nn": // Norwegian Nynorsk                  case "no": // Norwegian                  case "nyn": // Nyankole                  case "om": // Oromo                  case "or": // Oriya                  case "pa": // Punjabi                  case "pap": // Papiamento                  case "ps": // Pashto                  case "pt": // Portuguese                  case "rm": // Romansh                  case "saq": // Samburu                  case "so": // Somali                  case "sq": // Albanian                  case "ssy": // Saho                  case "sw": // Swahili                  case "sv": // Swedish                  case "syr": // Syriac                  case "ta": // Tamil                  case "te": // Telugu                  case "tk": // Turkmen                  case "tr": // Turkish                  case "ur": // Urdu                  case "wae": // Walser                  case "xog": // Soga                  case "zu": // Zulu                      return (n' c) =>                      {                          if (c == 2) return (n == 1) ? 0 : 1;                          if (c == 3) return (n == 0) ? 0 : (n == 1) ? 1 : 2;                          if (c == 4) return (n < 0) ? 0 : (n == 0) ? 1 : (n == 1) ? 2 : 3;                          return -1;                      };                    // DualWithZero: one (n == 0..1)' other                  case "ak": // Akan                  case "am": // Amharic                  case "bh": // Bihari                  case "fil": // Filipino                  case "guw": // Gun                  case "hi": // Hindi                  case "ln": // Lingala                  case "mg": // Malagasy                  case "nso": // Northern Sotho                  case "ti": // Tigrinya                  case "tl": // Tagalog                  case "wa": // Walloon                      return (n' c) => (n == 0 || n == 1) ? 0 : 1;                    // DualFromZeroToTwo: one (n == 0..2 fractionate and n != 2)' other                  case "ff": // Fulah                  case "fr": // French                  case "kab": // Kabyle                      return (n' c) => (n >= 0 && n < 2) ? 0 : 1;                    // Triple: one (n == 1)' two (n == 2)' other                  case "ga": // Irish                  case "iu": // Inuktitut                  case "ksh": // Colognian                  case "kw": // Cornish                  case "se": // Northern Sami                  case "sma": // Southern Sami                  case "smi": // Sami language                  case "smj": // Lule Sami                  case "smn": // Inari Sami                  case "sms": // Skolt Sami                      return (n' c) => (n == 1) ? 0 : (n == 2) ? 1 : 2;                    // Russian & Serbo-Croatian                  case "be": // Belarusian                  case "bs": // Bosnian                  case "hr": // Croatian                  case "ru": // Russian                  case "sh": // Serbo-Croatian                  case "sr": // Serbian                  case "uk": // Ukrainian                      return (n' c) =>                          (n % 10 == 1) && !(n % 100 == 11) ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          2;                    // Unique:                    // Arabic                  case "ar":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          (n % 100).Between(3' 10) ? 3 : // few                          (n % 100).Between(11' 99) ? 4 : // many                          5; // other                    // Breton                  case "br":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5; // other                    // Czech                  case "cs":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Welsh                  case "cy":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5;                    // Manx                  case "gv":                      return (n' c) =>                          (n % 10).Between(1' 2) || (n % 20) == 0 ? 0 :  // one                          1;                    // Langi                  case "lag":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n > 0) && (n < 2) ? 1 : // one                          2;                    // Lithuanian                  case "lt":                      return (n' c) =>                          (n % 10) == 1 && !(n % 100).Between(11' 19) ? 0 : // one                          (n % 10).Between(2' 9) && !(n % 100).Between(11' 19) ? 1 : // few                          2;                    // Latvian                  case "lv":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n % 10) == 1 && (n % 100) != 11 ? 1 :                          2;                    // Macedonian                  case "mb":                      return (n' c) =>                          (n % 10) == 1 && n != 11 ? 0 : // one                          1;                    // Moldavian                  case "mo":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n != 1 && (n % 100).Between(1' 19)) ? 1 : // few                          2;                    // Maltese                  case "mt":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(2' 10) ? 1 : // few                          (n % 100).Between(11' 19) ? 2 : // many                          3;                    // Polish                  case "pl":                      return (n' c) =>                          n == 1 ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          (n % 10).Between(0' 1) || (n % 10).Between(5' 9) || (n % 100).Between(12' 14) ? 2 : // many                          3;                    // Romanian                  case "ro":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(1' 19) ? 1 : // few                          2;                    // Tachelhit                  case "shi":                      return (n' c) =>                          (n >= 0 && n <= 1) ? 0 : // one                          n.Between(2' 10) ? 1 : // few                          2;                    // Slovak                  case "sk":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Slovenian                  case "sl":                      return (n' c) =>                          (n % 100) == 1 ? 0 : // one                          (n % 100) == 2 ? 1 : // two                          (n % 100).Between(3' 4) ? 2 : // few                          3;                    // Central Morocco Tamazight                  case "tzm":                      return (n' c) =>                          n.Between(0' 1) || n.Between(11' 99) ? 0 : // one                          1;                      // Unknown language                  default:                      return null;              }
Magic Number,SmartFormat.Extensions,CommonLanguageRules,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\PluralLocalizationFormatter.cs,GetPluralRule,The following statement contains a magic number: switch (twoLetterISOLanguageName)              {                  // Singular                  case "az": // Azerbaijani                  case "bm": // Bambara                  case "bo": // Tibetan                  case "dz": // Dzongkha                  case "fa": // Persian                  case "hu": // Hungarian                  case "id": // Indonesian                  case "ig": // Igbo                  case "ii": // Sichuan Yi                  case "ja": // Japanese                  case "jv": // Javanese                  case "ka": // Georgian                  case "kde": // Makonde                  case "kea": // Kabuverdianu                  case "km": // Khmer                  case "kn": // Kannada                  case "ko": // Korean                  case "ms": // Malay                  case "my": // Burmese                  case "root": // Root (?)                  case "sah": // Sakha                  case "ses": // Koyraboro Senni                  case "sg": // Sango                  case "th": // Thai                  case "to": // Tonga                  case "vi": // Vietnamese                  case "wo": // Wolof                  case "yo": // Yoruba                  case "zh": // Chinese                      return (n' c) => 0;                    // Dual: one (n == 1)' other                  case "af": // Afrikaans                  case "bem": // Bembda                  case "bg": // Bulgarian                  case "bn": // Bengali                  case "brx": // Bodo                  case "ca": // Catalan                  case "cgg": // Chiga                  case "chr": // Cherokee                  case "da": // Danish                  case "de": // German                  case "dv": // Divehi                  case "ee": // Ewe                  case "el": // Greek                  case "en": // English                  case "eo": // Esperanto                  case "es": // Spanish                  case "et": // Estonian                  case "eu": // Basque                  case "fi": // Finnish                  case "fo": // Faroese                  case "fur": // Friulian                  case "fy": // Western Frisian                  case "gl": // Galician                  case "gsw": // Swiss German                  case "gu": // Gujarati                  case "ha": // Hausa                  case "haw": // Hawaiian                  case "he": // Hebrew                  case "is": // Icelandic                  case "it": // Italian                  case "kk": // Kazakh                  case "kl": // Kalaallisut                  case "ku": // Kurdish                  case "lb": // Luxembourgish                  case "lg": // Ganda                  case "lo": // Lao                  case "mas": // Masai                  case "ml": // Malayalam                  case "mn": // Mongolian                  case "mr": // Marathi                  case "nah": // Nahuatl                  case "nb": // Norwegian Bokmål                  case "ne": // Nepali                  case "nl": // Dutch                  case "nn": // Norwegian Nynorsk                  case "no": // Norwegian                  case "nyn": // Nyankole                  case "om": // Oromo                  case "or": // Oriya                  case "pa": // Punjabi                  case "pap": // Papiamento                  case "ps": // Pashto                  case "pt": // Portuguese                  case "rm": // Romansh                  case "saq": // Samburu                  case "so": // Somali                  case "sq": // Albanian                  case "ssy": // Saho                  case "sw": // Swahili                  case "sv": // Swedish                  case "syr": // Syriac                  case "ta": // Tamil                  case "te": // Telugu                  case "tk": // Turkmen                  case "tr": // Turkish                  case "ur": // Urdu                  case "wae": // Walser                  case "xog": // Soga                  case "zu": // Zulu                      return (n' c) =>                      {                          if (c == 2) return (n == 1) ? 0 : 1;                          if (c == 3) return (n == 0) ? 0 : (n == 1) ? 1 : 2;                          if (c == 4) return (n < 0) ? 0 : (n == 0) ? 1 : (n == 1) ? 2 : 3;                          return -1;                      };                    // DualWithZero: one (n == 0..1)' other                  case "ak": // Akan                  case "am": // Amharic                  case "bh": // Bihari                  case "fil": // Filipino                  case "guw": // Gun                  case "hi": // Hindi                  case "ln": // Lingala                  case "mg": // Malagasy                  case "nso": // Northern Sotho                  case "ti": // Tigrinya                  case "tl": // Tagalog                  case "wa": // Walloon                      return (n' c) => (n == 0 || n == 1) ? 0 : 1;                    // DualFromZeroToTwo: one (n == 0..2 fractionate and n != 2)' other                  case "ff": // Fulah                  case "fr": // French                  case "kab": // Kabyle                      return (n' c) => (n >= 0 && n < 2) ? 0 : 1;                    // Triple: one (n == 1)' two (n == 2)' other                  case "ga": // Irish                  case "iu": // Inuktitut                  case "ksh": // Colognian                  case "kw": // Cornish                  case "se": // Northern Sami                  case "sma": // Southern Sami                  case "smi": // Sami language                  case "smj": // Lule Sami                  case "smn": // Inari Sami                  case "sms": // Skolt Sami                      return (n' c) => (n == 1) ? 0 : (n == 2) ? 1 : 2;                    // Russian & Serbo-Croatian                  case "be": // Belarusian                  case "bs": // Bosnian                  case "hr": // Croatian                  case "ru": // Russian                  case "sh": // Serbo-Croatian                  case "sr": // Serbian                  case "uk": // Ukrainian                      return (n' c) =>                          (n % 10 == 1) && !(n % 100 == 11) ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          2;                    // Unique:                    // Arabic                  case "ar":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          (n % 100).Between(3' 10) ? 3 : // few                          (n % 100).Between(11' 99) ? 4 : // many                          5; // other                    // Breton                  case "br":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5; // other                    // Czech                  case "cs":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Welsh                  case "cy":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5;                    // Manx                  case "gv":                      return (n' c) =>                          (n % 10).Between(1' 2) || (n % 20) == 0 ? 0 :  // one                          1;                    // Langi                  case "lag":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n > 0) && (n < 2) ? 1 : // one                          2;                    // Lithuanian                  case "lt":                      return (n' c) =>                          (n % 10) == 1 && !(n % 100).Between(11' 19) ? 0 : // one                          (n % 10).Between(2' 9) && !(n % 100).Between(11' 19) ? 1 : // few                          2;                    // Latvian                  case "lv":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n % 10) == 1 && (n % 100) != 11 ? 1 :                          2;                    // Macedonian                  case "mb":                      return (n' c) =>                          (n % 10) == 1 && n != 11 ? 0 : // one                          1;                    // Moldavian                  case "mo":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n != 1 && (n % 100).Between(1' 19)) ? 1 : // few                          2;                    // Maltese                  case "mt":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(2' 10) ? 1 : // few                          (n % 100).Between(11' 19) ? 2 : // many                          3;                    // Polish                  case "pl":                      return (n' c) =>                          n == 1 ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          (n % 10).Between(0' 1) || (n % 10).Between(5' 9) || (n % 100).Between(12' 14) ? 2 : // many                          3;                    // Romanian                  case "ro":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(1' 19) ? 1 : // few                          2;                    // Tachelhit                  case "shi":                      return (n' c) =>                          (n >= 0 && n <= 1) ? 0 : // one                          n.Between(2' 10) ? 1 : // few                          2;                    // Slovak                  case "sk":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Slovenian                  case "sl":                      return (n' c) =>                          (n % 100) == 1 ? 0 : // one                          (n % 100) == 2 ? 1 : // two                          (n % 100).Between(3' 4) ? 2 : // few                          3;                    // Central Morocco Tamazight                  case "tzm":                      return (n' c) =>                          n.Between(0' 1) || n.Between(11' 99) ? 0 : // one                          1;                      // Unknown language                  default:                      return null;              }
Magic Number,SmartFormat.Extensions,CommonLanguageRules,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\PluralLocalizationFormatter.cs,GetPluralRule,The following statement contains a magic number: switch (twoLetterISOLanguageName)              {                  // Singular                  case "az": // Azerbaijani                  case "bm": // Bambara                  case "bo": // Tibetan                  case "dz": // Dzongkha                  case "fa": // Persian                  case "hu": // Hungarian                  case "id": // Indonesian                  case "ig": // Igbo                  case "ii": // Sichuan Yi                  case "ja": // Japanese                  case "jv": // Javanese                  case "ka": // Georgian                  case "kde": // Makonde                  case "kea": // Kabuverdianu                  case "km": // Khmer                  case "kn": // Kannada                  case "ko": // Korean                  case "ms": // Malay                  case "my": // Burmese                  case "root": // Root (?)                  case "sah": // Sakha                  case "ses": // Koyraboro Senni                  case "sg": // Sango                  case "th": // Thai                  case "to": // Tonga                  case "vi": // Vietnamese                  case "wo": // Wolof                  case "yo": // Yoruba                  case "zh": // Chinese                      return (n' c) => 0;                    // Dual: one (n == 1)' other                  case "af": // Afrikaans                  case "bem": // Bembda                  case "bg": // Bulgarian                  case "bn": // Bengali                  case "brx": // Bodo                  case "ca": // Catalan                  case "cgg": // Chiga                  case "chr": // Cherokee                  case "da": // Danish                  case "de": // German                  case "dv": // Divehi                  case "ee": // Ewe                  case "el": // Greek                  case "en": // English                  case "eo": // Esperanto                  case "es": // Spanish                  case "et": // Estonian                  case "eu": // Basque                  case "fi": // Finnish                  case "fo": // Faroese                  case "fur": // Friulian                  case "fy": // Western Frisian                  case "gl": // Galician                  case "gsw": // Swiss German                  case "gu": // Gujarati                  case "ha": // Hausa                  case "haw": // Hawaiian                  case "he": // Hebrew                  case "is": // Icelandic                  case "it": // Italian                  case "kk": // Kazakh                  case "kl": // Kalaallisut                  case "ku": // Kurdish                  case "lb": // Luxembourgish                  case "lg": // Ganda                  case "lo": // Lao                  case "mas": // Masai                  case "ml": // Malayalam                  case "mn": // Mongolian                  case "mr": // Marathi                  case "nah": // Nahuatl                  case "nb": // Norwegian Bokmål                  case "ne": // Nepali                  case "nl": // Dutch                  case "nn": // Norwegian Nynorsk                  case "no": // Norwegian                  case "nyn": // Nyankole                  case "om": // Oromo                  case "or": // Oriya                  case "pa": // Punjabi                  case "pap": // Papiamento                  case "ps": // Pashto                  case "pt": // Portuguese                  case "rm": // Romansh                  case "saq": // Samburu                  case "so": // Somali                  case "sq": // Albanian                  case "ssy": // Saho                  case "sw": // Swahili                  case "sv": // Swedish                  case "syr": // Syriac                  case "ta": // Tamil                  case "te": // Telugu                  case "tk": // Turkmen                  case "tr": // Turkish                  case "ur": // Urdu                  case "wae": // Walser                  case "xog": // Soga                  case "zu": // Zulu                      return (n' c) =>                      {                          if (c == 2) return (n == 1) ? 0 : 1;                          if (c == 3) return (n == 0) ? 0 : (n == 1) ? 1 : 2;                          if (c == 4) return (n < 0) ? 0 : (n == 0) ? 1 : (n == 1) ? 2 : 3;                          return -1;                      };                    // DualWithZero: one (n == 0..1)' other                  case "ak": // Akan                  case "am": // Amharic                  case "bh": // Bihari                  case "fil": // Filipino                  case "guw": // Gun                  case "hi": // Hindi                  case "ln": // Lingala                  case "mg": // Malagasy                  case "nso": // Northern Sotho                  case "ti": // Tigrinya                  case "tl": // Tagalog                  case "wa": // Walloon                      return (n' c) => (n == 0 || n == 1) ? 0 : 1;                    // DualFromZeroToTwo: one (n == 0..2 fractionate and n != 2)' other                  case "ff": // Fulah                  case "fr": // French                  case "kab": // Kabyle                      return (n' c) => (n >= 0 && n < 2) ? 0 : 1;                    // Triple: one (n == 1)' two (n == 2)' other                  case "ga": // Irish                  case "iu": // Inuktitut                  case "ksh": // Colognian                  case "kw": // Cornish                  case "se": // Northern Sami                  case "sma": // Southern Sami                  case "smi": // Sami language                  case "smj": // Lule Sami                  case "smn": // Inari Sami                  case "sms": // Skolt Sami                      return (n' c) => (n == 1) ? 0 : (n == 2) ? 1 : 2;                    // Russian & Serbo-Croatian                  case "be": // Belarusian                  case "bs": // Bosnian                  case "hr": // Croatian                  case "ru": // Russian                  case "sh": // Serbo-Croatian                  case "sr": // Serbian                  case "uk": // Ukrainian                      return (n' c) =>                          (n % 10 == 1) && !(n % 100 == 11) ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          2;                    // Unique:                    // Arabic                  case "ar":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          (n % 100).Between(3' 10) ? 3 : // few                          (n % 100).Between(11' 99) ? 4 : // many                          5; // other                    // Breton                  case "br":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5; // other                    // Czech                  case "cs":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Welsh                  case "cy":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5;                    // Manx                  case "gv":                      return (n' c) =>                          (n % 10).Between(1' 2) || (n % 20) == 0 ? 0 :  // one                          1;                    // Langi                  case "lag":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n > 0) && (n < 2) ? 1 : // one                          2;                    // Lithuanian                  case "lt":                      return (n' c) =>                          (n % 10) == 1 && !(n % 100).Between(11' 19) ? 0 : // one                          (n % 10).Between(2' 9) && !(n % 100).Between(11' 19) ? 1 : // few                          2;                    // Latvian                  case "lv":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n % 10) == 1 && (n % 100) != 11 ? 1 :                          2;                    // Macedonian                  case "mb":                      return (n' c) =>                          (n % 10) == 1 && n != 11 ? 0 : // one                          1;                    // Moldavian                  case "mo":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n != 1 && (n % 100).Between(1' 19)) ? 1 : // few                          2;                    // Maltese                  case "mt":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(2' 10) ? 1 : // few                          (n % 100).Between(11' 19) ? 2 : // many                          3;                    // Polish                  case "pl":                      return (n' c) =>                          n == 1 ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          (n % 10).Between(0' 1) || (n % 10).Between(5' 9) || (n % 100).Between(12' 14) ? 2 : // many                          3;                    // Romanian                  case "ro":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(1' 19) ? 1 : // few                          2;                    // Tachelhit                  case "shi":                      return (n' c) =>                          (n >= 0 && n <= 1) ? 0 : // one                          n.Between(2' 10) ? 1 : // few                          2;                    // Slovak                  case "sk":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Slovenian                  case "sl":                      return (n' c) =>                          (n % 100) == 1 ? 0 : // one                          (n % 100) == 2 ? 1 : // two                          (n % 100).Between(3' 4) ? 2 : // few                          3;                    // Central Morocco Tamazight                  case "tzm":                      return (n' c) =>                          n.Between(0' 1) || n.Between(11' 99) ? 0 : // one                          1;                      // Unknown language                  default:                      return null;              }
Magic Number,SmartFormat.Extensions,CommonLanguageRules,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\PluralLocalizationFormatter.cs,GetPluralRule,The following statement contains a magic number: switch (twoLetterISOLanguageName)              {                  // Singular                  case "az": // Azerbaijani                  case "bm": // Bambara                  case "bo": // Tibetan                  case "dz": // Dzongkha                  case "fa": // Persian                  case "hu": // Hungarian                  case "id": // Indonesian                  case "ig": // Igbo                  case "ii": // Sichuan Yi                  case "ja": // Japanese                  case "jv": // Javanese                  case "ka": // Georgian                  case "kde": // Makonde                  case "kea": // Kabuverdianu                  case "km": // Khmer                  case "kn": // Kannada                  case "ko": // Korean                  case "ms": // Malay                  case "my": // Burmese                  case "root": // Root (?)                  case "sah": // Sakha                  case "ses": // Koyraboro Senni                  case "sg": // Sango                  case "th": // Thai                  case "to": // Tonga                  case "vi": // Vietnamese                  case "wo": // Wolof                  case "yo": // Yoruba                  case "zh": // Chinese                      return (n' c) => 0;                    // Dual: one (n == 1)' other                  case "af": // Afrikaans                  case "bem": // Bembda                  case "bg": // Bulgarian                  case "bn": // Bengali                  case "brx": // Bodo                  case "ca": // Catalan                  case "cgg": // Chiga                  case "chr": // Cherokee                  case "da": // Danish                  case "de": // German                  case "dv": // Divehi                  case "ee": // Ewe                  case "el": // Greek                  case "en": // English                  case "eo": // Esperanto                  case "es": // Spanish                  case "et": // Estonian                  case "eu": // Basque                  case "fi": // Finnish                  case "fo": // Faroese                  case "fur": // Friulian                  case "fy": // Western Frisian                  case "gl": // Galician                  case "gsw": // Swiss German                  case "gu": // Gujarati                  case "ha": // Hausa                  case "haw": // Hawaiian                  case "he": // Hebrew                  case "is": // Icelandic                  case "it": // Italian                  case "kk": // Kazakh                  case "kl": // Kalaallisut                  case "ku": // Kurdish                  case "lb": // Luxembourgish                  case "lg": // Ganda                  case "lo": // Lao                  case "mas": // Masai                  case "ml": // Malayalam                  case "mn": // Mongolian                  case "mr": // Marathi                  case "nah": // Nahuatl                  case "nb": // Norwegian Bokmål                  case "ne": // Nepali                  case "nl": // Dutch                  case "nn": // Norwegian Nynorsk                  case "no": // Norwegian                  case "nyn": // Nyankole                  case "om": // Oromo                  case "or": // Oriya                  case "pa": // Punjabi                  case "pap": // Papiamento                  case "ps": // Pashto                  case "pt": // Portuguese                  case "rm": // Romansh                  case "saq": // Samburu                  case "so": // Somali                  case "sq": // Albanian                  case "ssy": // Saho                  case "sw": // Swahili                  case "sv": // Swedish                  case "syr": // Syriac                  case "ta": // Tamil                  case "te": // Telugu                  case "tk": // Turkmen                  case "tr": // Turkish                  case "ur": // Urdu                  case "wae": // Walser                  case "xog": // Soga                  case "zu": // Zulu                      return (n' c) =>                      {                          if (c == 2) return (n == 1) ? 0 : 1;                          if (c == 3) return (n == 0) ? 0 : (n == 1) ? 1 : 2;                          if (c == 4) return (n < 0) ? 0 : (n == 0) ? 1 : (n == 1) ? 2 : 3;                          return -1;                      };                    // DualWithZero: one (n == 0..1)' other                  case "ak": // Akan                  case "am": // Amharic                  case "bh": // Bihari                  case "fil": // Filipino                  case "guw": // Gun                  case "hi": // Hindi                  case "ln": // Lingala                  case "mg": // Malagasy                  case "nso": // Northern Sotho                  case "ti": // Tigrinya                  case "tl": // Tagalog                  case "wa": // Walloon                      return (n' c) => (n == 0 || n == 1) ? 0 : 1;                    // DualFromZeroToTwo: one (n == 0..2 fractionate and n != 2)' other                  case "ff": // Fulah                  case "fr": // French                  case "kab": // Kabyle                      return (n' c) => (n >= 0 && n < 2) ? 0 : 1;                    // Triple: one (n == 1)' two (n == 2)' other                  case "ga": // Irish                  case "iu": // Inuktitut                  case "ksh": // Colognian                  case "kw": // Cornish                  case "se": // Northern Sami                  case "sma": // Southern Sami                  case "smi": // Sami language                  case "smj": // Lule Sami                  case "smn": // Inari Sami                  case "sms": // Skolt Sami                      return (n' c) => (n == 1) ? 0 : (n == 2) ? 1 : 2;                    // Russian & Serbo-Croatian                  case "be": // Belarusian                  case "bs": // Bosnian                  case "hr": // Croatian                  case "ru": // Russian                  case "sh": // Serbo-Croatian                  case "sr": // Serbian                  case "uk": // Ukrainian                      return (n' c) =>                          (n % 10 == 1) && !(n % 100 == 11) ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          2;                    // Unique:                    // Arabic                  case "ar":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          (n % 100).Between(3' 10) ? 3 : // few                          (n % 100).Between(11' 99) ? 4 : // many                          5; // other                    // Breton                  case "br":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5; // other                    // Czech                  case "cs":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Welsh                  case "cy":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5;                    // Manx                  case "gv":                      return (n' c) =>                          (n % 10).Between(1' 2) || (n % 20) == 0 ? 0 :  // one                          1;                    // Langi                  case "lag":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n > 0) && (n < 2) ? 1 : // one                          2;                    // Lithuanian                  case "lt":                      return (n' c) =>                          (n % 10) == 1 && !(n % 100).Between(11' 19) ? 0 : // one                          (n % 10).Between(2' 9) && !(n % 100).Between(11' 19) ? 1 : // few                          2;                    // Latvian                  case "lv":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n % 10) == 1 && (n % 100) != 11 ? 1 :                          2;                    // Macedonian                  case "mb":                      return (n' c) =>                          (n % 10) == 1 && n != 11 ? 0 : // one                          1;                    // Moldavian                  case "mo":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n != 1 && (n % 100).Between(1' 19)) ? 1 : // few                          2;                    // Maltese                  case "mt":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(2' 10) ? 1 : // few                          (n % 100).Between(11' 19) ? 2 : // many                          3;                    // Polish                  case "pl":                      return (n' c) =>                          n == 1 ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          (n % 10).Between(0' 1) || (n % 10).Between(5' 9) || (n % 100).Between(12' 14) ? 2 : // many                          3;                    // Romanian                  case "ro":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(1' 19) ? 1 : // few                          2;                    // Tachelhit                  case "shi":                      return (n' c) =>                          (n >= 0 && n <= 1) ? 0 : // one                          n.Between(2' 10) ? 1 : // few                          2;                    // Slovak                  case "sk":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Slovenian                  case "sl":                      return (n' c) =>                          (n % 100) == 1 ? 0 : // one                          (n % 100) == 2 ? 1 : // two                          (n % 100).Between(3' 4) ? 2 : // few                          3;                    // Central Morocco Tamazight                  case "tzm":                      return (n' c) =>                          n.Between(0' 1) || n.Between(11' 99) ? 0 : // one                          1;                      // Unknown language                  default:                      return null;              }
Magic Number,SmartFormat.Extensions,CommonLanguageRules,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\PluralLocalizationFormatter.cs,GetPluralRule,The following statement contains a magic number: switch (twoLetterISOLanguageName)              {                  // Singular                  case "az": // Azerbaijani                  case "bm": // Bambara                  case "bo": // Tibetan                  case "dz": // Dzongkha                  case "fa": // Persian                  case "hu": // Hungarian                  case "id": // Indonesian                  case "ig": // Igbo                  case "ii": // Sichuan Yi                  case "ja": // Japanese                  case "jv": // Javanese                  case "ka": // Georgian                  case "kde": // Makonde                  case "kea": // Kabuverdianu                  case "km": // Khmer                  case "kn": // Kannada                  case "ko": // Korean                  case "ms": // Malay                  case "my": // Burmese                  case "root": // Root (?)                  case "sah": // Sakha                  case "ses": // Koyraboro Senni                  case "sg": // Sango                  case "th": // Thai                  case "to": // Tonga                  case "vi": // Vietnamese                  case "wo": // Wolof                  case "yo": // Yoruba                  case "zh": // Chinese                      return (n' c) => 0;                    // Dual: one (n == 1)' other                  case "af": // Afrikaans                  case "bem": // Bembda                  case "bg": // Bulgarian                  case "bn": // Bengali                  case "brx": // Bodo                  case "ca": // Catalan                  case "cgg": // Chiga                  case "chr": // Cherokee                  case "da": // Danish                  case "de": // German                  case "dv": // Divehi                  case "ee": // Ewe                  case "el": // Greek                  case "en": // English                  case "eo": // Esperanto                  case "es": // Spanish                  case "et": // Estonian                  case "eu": // Basque                  case "fi": // Finnish                  case "fo": // Faroese                  case "fur": // Friulian                  case "fy": // Western Frisian                  case "gl": // Galician                  case "gsw": // Swiss German                  case "gu": // Gujarati                  case "ha": // Hausa                  case "haw": // Hawaiian                  case "he": // Hebrew                  case "is": // Icelandic                  case "it": // Italian                  case "kk": // Kazakh                  case "kl": // Kalaallisut                  case "ku": // Kurdish                  case "lb": // Luxembourgish                  case "lg": // Ganda                  case "lo": // Lao                  case "mas": // Masai                  case "ml": // Malayalam                  case "mn": // Mongolian                  case "mr": // Marathi                  case "nah": // Nahuatl                  case "nb": // Norwegian Bokmål                  case "ne": // Nepali                  case "nl": // Dutch                  case "nn": // Norwegian Nynorsk                  case "no": // Norwegian                  case "nyn": // Nyankole                  case "om": // Oromo                  case "or": // Oriya                  case "pa": // Punjabi                  case "pap": // Papiamento                  case "ps": // Pashto                  case "pt": // Portuguese                  case "rm": // Romansh                  case "saq": // Samburu                  case "so": // Somali                  case "sq": // Albanian                  case "ssy": // Saho                  case "sw": // Swahili                  case "sv": // Swedish                  case "syr": // Syriac                  case "ta": // Tamil                  case "te": // Telugu                  case "tk": // Turkmen                  case "tr": // Turkish                  case "ur": // Urdu                  case "wae": // Walser                  case "xog": // Soga                  case "zu": // Zulu                      return (n' c) =>                      {                          if (c == 2) return (n == 1) ? 0 : 1;                          if (c == 3) return (n == 0) ? 0 : (n == 1) ? 1 : 2;                          if (c == 4) return (n < 0) ? 0 : (n == 0) ? 1 : (n == 1) ? 2 : 3;                          return -1;                      };                    // DualWithZero: one (n == 0..1)' other                  case "ak": // Akan                  case "am": // Amharic                  case "bh": // Bihari                  case "fil": // Filipino                  case "guw": // Gun                  case "hi": // Hindi                  case "ln": // Lingala                  case "mg": // Malagasy                  case "nso": // Northern Sotho                  case "ti": // Tigrinya                  case "tl": // Tagalog                  case "wa": // Walloon                      return (n' c) => (n == 0 || n == 1) ? 0 : 1;                    // DualFromZeroToTwo: one (n == 0..2 fractionate and n != 2)' other                  case "ff": // Fulah                  case "fr": // French                  case "kab": // Kabyle                      return (n' c) => (n >= 0 && n < 2) ? 0 : 1;                    // Triple: one (n == 1)' two (n == 2)' other                  case "ga": // Irish                  case "iu": // Inuktitut                  case "ksh": // Colognian                  case "kw": // Cornish                  case "se": // Northern Sami                  case "sma": // Southern Sami                  case "smi": // Sami language                  case "smj": // Lule Sami                  case "smn": // Inari Sami                  case "sms": // Skolt Sami                      return (n' c) => (n == 1) ? 0 : (n == 2) ? 1 : 2;                    // Russian & Serbo-Croatian                  case "be": // Belarusian                  case "bs": // Bosnian                  case "hr": // Croatian                  case "ru": // Russian                  case "sh": // Serbo-Croatian                  case "sr": // Serbian                  case "uk": // Ukrainian                      return (n' c) =>                          (n % 10 == 1) && !(n % 100 == 11) ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          2;                    // Unique:                    // Arabic                  case "ar":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          (n % 100).Between(3' 10) ? 3 : // few                          (n % 100).Between(11' 99) ? 4 : // many                          5; // other                    // Breton                  case "br":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5; // other                    // Czech                  case "cs":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Welsh                  case "cy":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5;                    // Manx                  case "gv":                      return (n' c) =>                          (n % 10).Between(1' 2) || (n % 20) == 0 ? 0 :  // one                          1;                    // Langi                  case "lag":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n > 0) && (n < 2) ? 1 : // one                          2;                    // Lithuanian                  case "lt":                      return (n' c) =>                          (n % 10) == 1 && !(n % 100).Between(11' 19) ? 0 : // one                          (n % 10).Between(2' 9) && !(n % 100).Between(11' 19) ? 1 : // few                          2;                    // Latvian                  case "lv":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n % 10) == 1 && (n % 100) != 11 ? 1 :                          2;                    // Macedonian                  case "mb":                      return (n' c) =>                          (n % 10) == 1 && n != 11 ? 0 : // one                          1;                    // Moldavian                  case "mo":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n != 1 && (n % 100).Between(1' 19)) ? 1 : // few                          2;                    // Maltese                  case "mt":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(2' 10) ? 1 : // few                          (n % 100).Between(11' 19) ? 2 : // many                          3;                    // Polish                  case "pl":                      return (n' c) =>                          n == 1 ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          (n % 10).Between(0' 1) || (n % 10).Between(5' 9) || (n % 100).Between(12' 14) ? 2 : // many                          3;                    // Romanian                  case "ro":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(1' 19) ? 1 : // few                          2;                    // Tachelhit                  case "shi":                      return (n' c) =>                          (n >= 0 && n <= 1) ? 0 : // one                          n.Between(2' 10) ? 1 : // few                          2;                    // Slovak                  case "sk":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Slovenian                  case "sl":                      return (n' c) =>                          (n % 100) == 1 ? 0 : // one                          (n % 100) == 2 ? 1 : // two                          (n % 100).Between(3' 4) ? 2 : // few                          3;                    // Central Morocco Tamazight                  case "tzm":                      return (n' c) =>                          n.Between(0' 1) || n.Between(11' 99) ? 0 : // one                          1;                      // Unknown language                  default:                      return null;              }
Magic Number,SmartFormat.Extensions,CommonLanguageRules,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\PluralLocalizationFormatter.cs,GetPluralRule,The following statement contains a magic number: switch (twoLetterISOLanguageName)              {                  // Singular                  case "az": // Azerbaijani                  case "bm": // Bambara                  case "bo": // Tibetan                  case "dz": // Dzongkha                  case "fa": // Persian                  case "hu": // Hungarian                  case "id": // Indonesian                  case "ig": // Igbo                  case "ii": // Sichuan Yi                  case "ja": // Japanese                  case "jv": // Javanese                  case "ka": // Georgian                  case "kde": // Makonde                  case "kea": // Kabuverdianu                  case "km": // Khmer                  case "kn": // Kannada                  case "ko": // Korean                  case "ms": // Malay                  case "my": // Burmese                  case "root": // Root (?)                  case "sah": // Sakha                  case "ses": // Koyraboro Senni                  case "sg": // Sango                  case "th": // Thai                  case "to": // Tonga                  case "vi": // Vietnamese                  case "wo": // Wolof                  case "yo": // Yoruba                  case "zh": // Chinese                      return (n' c) => 0;                    // Dual: one (n == 1)' other                  case "af": // Afrikaans                  case "bem": // Bembda                  case "bg": // Bulgarian                  case "bn": // Bengali                  case "brx": // Bodo                  case "ca": // Catalan                  case "cgg": // Chiga                  case "chr": // Cherokee                  case "da": // Danish                  case "de": // German                  case "dv": // Divehi                  case "ee": // Ewe                  case "el": // Greek                  case "en": // English                  case "eo": // Esperanto                  case "es": // Spanish                  case "et": // Estonian                  case "eu": // Basque                  case "fi": // Finnish                  case "fo": // Faroese                  case "fur": // Friulian                  case "fy": // Western Frisian                  case "gl": // Galician                  case "gsw": // Swiss German                  case "gu": // Gujarati                  case "ha": // Hausa                  case "haw": // Hawaiian                  case "he": // Hebrew                  case "is": // Icelandic                  case "it": // Italian                  case "kk": // Kazakh                  case "kl": // Kalaallisut                  case "ku": // Kurdish                  case "lb": // Luxembourgish                  case "lg": // Ganda                  case "lo": // Lao                  case "mas": // Masai                  case "ml": // Malayalam                  case "mn": // Mongolian                  case "mr": // Marathi                  case "nah": // Nahuatl                  case "nb": // Norwegian Bokmål                  case "ne": // Nepali                  case "nl": // Dutch                  case "nn": // Norwegian Nynorsk                  case "no": // Norwegian                  case "nyn": // Nyankole                  case "om": // Oromo                  case "or": // Oriya                  case "pa": // Punjabi                  case "pap": // Papiamento                  case "ps": // Pashto                  case "pt": // Portuguese                  case "rm": // Romansh                  case "saq": // Samburu                  case "so": // Somali                  case "sq": // Albanian                  case "ssy": // Saho                  case "sw": // Swahili                  case "sv": // Swedish                  case "syr": // Syriac                  case "ta": // Tamil                  case "te": // Telugu                  case "tk": // Turkmen                  case "tr": // Turkish                  case "ur": // Urdu                  case "wae": // Walser                  case "xog": // Soga                  case "zu": // Zulu                      return (n' c) =>                      {                          if (c == 2) return (n == 1) ? 0 : 1;                          if (c == 3) return (n == 0) ? 0 : (n == 1) ? 1 : 2;                          if (c == 4) return (n < 0) ? 0 : (n == 0) ? 1 : (n == 1) ? 2 : 3;                          return -1;                      };                    // DualWithZero: one (n == 0..1)' other                  case "ak": // Akan                  case "am": // Amharic                  case "bh": // Bihari                  case "fil": // Filipino                  case "guw": // Gun                  case "hi": // Hindi                  case "ln": // Lingala                  case "mg": // Malagasy                  case "nso": // Northern Sotho                  case "ti": // Tigrinya                  case "tl": // Tagalog                  case "wa": // Walloon                      return (n' c) => (n == 0 || n == 1) ? 0 : 1;                    // DualFromZeroToTwo: one (n == 0..2 fractionate and n != 2)' other                  case "ff": // Fulah                  case "fr": // French                  case "kab": // Kabyle                      return (n' c) => (n >= 0 && n < 2) ? 0 : 1;                    // Triple: one (n == 1)' two (n == 2)' other                  case "ga": // Irish                  case "iu": // Inuktitut                  case "ksh": // Colognian                  case "kw": // Cornish                  case "se": // Northern Sami                  case "sma": // Southern Sami                  case "smi": // Sami language                  case "smj": // Lule Sami                  case "smn": // Inari Sami                  case "sms": // Skolt Sami                      return (n' c) => (n == 1) ? 0 : (n == 2) ? 1 : 2;                    // Russian & Serbo-Croatian                  case "be": // Belarusian                  case "bs": // Bosnian                  case "hr": // Croatian                  case "ru": // Russian                  case "sh": // Serbo-Croatian                  case "sr": // Serbian                  case "uk": // Ukrainian                      return (n' c) =>                          (n % 10 == 1) && !(n % 100 == 11) ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          2;                    // Unique:                    // Arabic                  case "ar":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          (n % 100).Between(3' 10) ? 3 : // few                          (n % 100).Between(11' 99) ? 4 : // many                          5; // other                    // Breton                  case "br":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5; // other                    // Czech                  case "cs":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Welsh                  case "cy":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5;                    // Manx                  case "gv":                      return (n' c) =>                          (n % 10).Between(1' 2) || (n % 20) == 0 ? 0 :  // one                          1;                    // Langi                  case "lag":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n > 0) && (n < 2) ? 1 : // one                          2;                    // Lithuanian                  case "lt":                      return (n' c) =>                          (n % 10) == 1 && !(n % 100).Between(11' 19) ? 0 : // one                          (n % 10).Between(2' 9) && !(n % 100).Between(11' 19) ? 1 : // few                          2;                    // Latvian                  case "lv":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n % 10) == 1 && (n % 100) != 11 ? 1 :                          2;                    // Macedonian                  case "mb":                      return (n' c) =>                          (n % 10) == 1 && n != 11 ? 0 : // one                          1;                    // Moldavian                  case "mo":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n != 1 && (n % 100).Between(1' 19)) ? 1 : // few                          2;                    // Maltese                  case "mt":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(2' 10) ? 1 : // few                          (n % 100).Between(11' 19) ? 2 : // many                          3;                    // Polish                  case "pl":                      return (n' c) =>                          n == 1 ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          (n % 10).Between(0' 1) || (n % 10).Between(5' 9) || (n % 100).Between(12' 14) ? 2 : // many                          3;                    // Romanian                  case "ro":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(1' 19) ? 1 : // few                          2;                    // Tachelhit                  case "shi":                      return (n' c) =>                          (n >= 0 && n <= 1) ? 0 : // one                          n.Between(2' 10) ? 1 : // few                          2;                    // Slovak                  case "sk":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Slovenian                  case "sl":                      return (n' c) =>                          (n % 100) == 1 ? 0 : // one                          (n % 100) == 2 ? 1 : // two                          (n % 100).Between(3' 4) ? 2 : // few                          3;                    // Central Morocco Tamazight                  case "tzm":                      return (n' c) =>                          n.Between(0' 1) || n.Between(11' 99) ? 0 : // one                          1;                      // Unknown language                  default:                      return null;              }
Magic Number,SmartFormat.Extensions,CommonLanguageRules,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\PluralLocalizationFormatter.cs,GetPluralRule,The following statement contains a magic number: switch (twoLetterISOLanguageName)              {                  // Singular                  case "az": // Azerbaijani                  case "bm": // Bambara                  case "bo": // Tibetan                  case "dz": // Dzongkha                  case "fa": // Persian                  case "hu": // Hungarian                  case "id": // Indonesian                  case "ig": // Igbo                  case "ii": // Sichuan Yi                  case "ja": // Japanese                  case "jv": // Javanese                  case "ka": // Georgian                  case "kde": // Makonde                  case "kea": // Kabuverdianu                  case "km": // Khmer                  case "kn": // Kannada                  case "ko": // Korean                  case "ms": // Malay                  case "my": // Burmese                  case "root": // Root (?)                  case "sah": // Sakha                  case "ses": // Koyraboro Senni                  case "sg": // Sango                  case "th": // Thai                  case "to": // Tonga                  case "vi": // Vietnamese                  case "wo": // Wolof                  case "yo": // Yoruba                  case "zh": // Chinese                      return (n' c) => 0;                    // Dual: one (n == 1)' other                  case "af": // Afrikaans                  case "bem": // Bembda                  case "bg": // Bulgarian                  case "bn": // Bengali                  case "brx": // Bodo                  case "ca": // Catalan                  case "cgg": // Chiga                  case "chr": // Cherokee                  case "da": // Danish                  case "de": // German                  case "dv": // Divehi                  case "ee": // Ewe                  case "el": // Greek                  case "en": // English                  case "eo": // Esperanto                  case "es": // Spanish                  case "et": // Estonian                  case "eu": // Basque                  case "fi": // Finnish                  case "fo": // Faroese                  case "fur": // Friulian                  case "fy": // Western Frisian                  case "gl": // Galician                  case "gsw": // Swiss German                  case "gu": // Gujarati                  case "ha": // Hausa                  case "haw": // Hawaiian                  case "he": // Hebrew                  case "is": // Icelandic                  case "it": // Italian                  case "kk": // Kazakh                  case "kl": // Kalaallisut                  case "ku": // Kurdish                  case "lb": // Luxembourgish                  case "lg": // Ganda                  case "lo": // Lao                  case "mas": // Masai                  case "ml": // Malayalam                  case "mn": // Mongolian                  case "mr": // Marathi                  case "nah": // Nahuatl                  case "nb": // Norwegian Bokmål                  case "ne": // Nepali                  case "nl": // Dutch                  case "nn": // Norwegian Nynorsk                  case "no": // Norwegian                  case "nyn": // Nyankole                  case "om": // Oromo                  case "or": // Oriya                  case "pa": // Punjabi                  case "pap": // Papiamento                  case "ps": // Pashto                  case "pt": // Portuguese                  case "rm": // Romansh                  case "saq": // Samburu                  case "so": // Somali                  case "sq": // Albanian                  case "ssy": // Saho                  case "sw": // Swahili                  case "sv": // Swedish                  case "syr": // Syriac                  case "ta": // Tamil                  case "te": // Telugu                  case "tk": // Turkmen                  case "tr": // Turkish                  case "ur": // Urdu                  case "wae": // Walser                  case "xog": // Soga                  case "zu": // Zulu                      return (n' c) =>                      {                          if (c == 2) return (n == 1) ? 0 : 1;                          if (c == 3) return (n == 0) ? 0 : (n == 1) ? 1 : 2;                          if (c == 4) return (n < 0) ? 0 : (n == 0) ? 1 : (n == 1) ? 2 : 3;                          return -1;                      };                    // DualWithZero: one (n == 0..1)' other                  case "ak": // Akan                  case "am": // Amharic                  case "bh": // Bihari                  case "fil": // Filipino                  case "guw": // Gun                  case "hi": // Hindi                  case "ln": // Lingala                  case "mg": // Malagasy                  case "nso": // Northern Sotho                  case "ti": // Tigrinya                  case "tl": // Tagalog                  case "wa": // Walloon                      return (n' c) => (n == 0 || n == 1) ? 0 : 1;                    // DualFromZeroToTwo: one (n == 0..2 fractionate and n != 2)' other                  case "ff": // Fulah                  case "fr": // French                  case "kab": // Kabyle                      return (n' c) => (n >= 0 && n < 2) ? 0 : 1;                    // Triple: one (n == 1)' two (n == 2)' other                  case "ga": // Irish                  case "iu": // Inuktitut                  case "ksh": // Colognian                  case "kw": // Cornish                  case "se": // Northern Sami                  case "sma": // Southern Sami                  case "smi": // Sami language                  case "smj": // Lule Sami                  case "smn": // Inari Sami                  case "sms": // Skolt Sami                      return (n' c) => (n == 1) ? 0 : (n == 2) ? 1 : 2;                    // Russian & Serbo-Croatian                  case "be": // Belarusian                  case "bs": // Bosnian                  case "hr": // Croatian                  case "ru": // Russian                  case "sh": // Serbo-Croatian                  case "sr": // Serbian                  case "uk": // Ukrainian                      return (n' c) =>                          (n % 10 == 1) && !(n % 100 == 11) ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          2;                    // Unique:                    // Arabic                  case "ar":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          (n % 100).Between(3' 10) ? 3 : // few                          (n % 100).Between(11' 99) ? 4 : // many                          5; // other                    // Breton                  case "br":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5; // other                    // Czech                  case "cs":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Welsh                  case "cy":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5;                    // Manx                  case "gv":                      return (n' c) =>                          (n % 10).Between(1' 2) || (n % 20) == 0 ? 0 :  // one                          1;                    // Langi                  case "lag":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n > 0) && (n < 2) ? 1 : // one                          2;                    // Lithuanian                  case "lt":                      return (n' c) =>                          (n % 10) == 1 && !(n % 100).Between(11' 19) ? 0 : // one                          (n % 10).Between(2' 9) && !(n % 100).Between(11' 19) ? 1 : // few                          2;                    // Latvian                  case "lv":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n % 10) == 1 && (n % 100) != 11 ? 1 :                          2;                    // Macedonian                  case "mb":                      return (n' c) =>                          (n % 10) == 1 && n != 11 ? 0 : // one                          1;                    // Moldavian                  case "mo":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n != 1 && (n % 100).Between(1' 19)) ? 1 : // few                          2;                    // Maltese                  case "mt":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(2' 10) ? 1 : // few                          (n % 100).Between(11' 19) ? 2 : // many                          3;                    // Polish                  case "pl":                      return (n' c) =>                          n == 1 ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          (n % 10).Between(0' 1) || (n % 10).Between(5' 9) || (n % 100).Between(12' 14) ? 2 : // many                          3;                    // Romanian                  case "ro":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(1' 19) ? 1 : // few                          2;                    // Tachelhit                  case "shi":                      return (n' c) =>                          (n >= 0 && n <= 1) ? 0 : // one                          n.Between(2' 10) ? 1 : // few                          2;                    // Slovak                  case "sk":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Slovenian                  case "sl":                      return (n' c) =>                          (n % 100) == 1 ? 0 : // one                          (n % 100) == 2 ? 1 : // two                          (n % 100).Between(3' 4) ? 2 : // few                          3;                    // Central Morocco Tamazight                  case "tzm":                      return (n' c) =>                          n.Between(0' 1) || n.Between(11' 99) ? 0 : // one                          1;                      // Unknown language                  default:                      return null;              }
Magic Number,SmartFormat.Extensions,CommonLanguageRules,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\PluralLocalizationFormatter.cs,GetPluralRule,The following statement contains a magic number: switch (twoLetterISOLanguageName)              {                  // Singular                  case "az": // Azerbaijani                  case "bm": // Bambara                  case "bo": // Tibetan                  case "dz": // Dzongkha                  case "fa": // Persian                  case "hu": // Hungarian                  case "id": // Indonesian                  case "ig": // Igbo                  case "ii": // Sichuan Yi                  case "ja": // Japanese                  case "jv": // Javanese                  case "ka": // Georgian                  case "kde": // Makonde                  case "kea": // Kabuverdianu                  case "km": // Khmer                  case "kn": // Kannada                  case "ko": // Korean                  case "ms": // Malay                  case "my": // Burmese                  case "root": // Root (?)                  case "sah": // Sakha                  case "ses": // Koyraboro Senni                  case "sg": // Sango                  case "th": // Thai                  case "to": // Tonga                  case "vi": // Vietnamese                  case "wo": // Wolof                  case "yo": // Yoruba                  case "zh": // Chinese                      return (n' c) => 0;                    // Dual: one (n == 1)' other                  case "af": // Afrikaans                  case "bem": // Bembda                  case "bg": // Bulgarian                  case "bn": // Bengali                  case "brx": // Bodo                  case "ca": // Catalan                  case "cgg": // Chiga                  case "chr": // Cherokee                  case "da": // Danish                  case "de": // German                  case "dv": // Divehi                  case "ee": // Ewe                  case "el": // Greek                  case "en": // English                  case "eo": // Esperanto                  case "es": // Spanish                  case "et": // Estonian                  case "eu": // Basque                  case "fi": // Finnish                  case "fo": // Faroese                  case "fur": // Friulian                  case "fy": // Western Frisian                  case "gl": // Galician                  case "gsw": // Swiss German                  case "gu": // Gujarati                  case "ha": // Hausa                  case "haw": // Hawaiian                  case "he": // Hebrew                  case "is": // Icelandic                  case "it": // Italian                  case "kk": // Kazakh                  case "kl": // Kalaallisut                  case "ku": // Kurdish                  case "lb": // Luxembourgish                  case "lg": // Ganda                  case "lo": // Lao                  case "mas": // Masai                  case "ml": // Malayalam                  case "mn": // Mongolian                  case "mr": // Marathi                  case "nah": // Nahuatl                  case "nb": // Norwegian Bokmål                  case "ne": // Nepali                  case "nl": // Dutch                  case "nn": // Norwegian Nynorsk                  case "no": // Norwegian                  case "nyn": // Nyankole                  case "om": // Oromo                  case "or": // Oriya                  case "pa": // Punjabi                  case "pap": // Papiamento                  case "ps": // Pashto                  case "pt": // Portuguese                  case "rm": // Romansh                  case "saq": // Samburu                  case "so": // Somali                  case "sq": // Albanian                  case "ssy": // Saho                  case "sw": // Swahili                  case "sv": // Swedish                  case "syr": // Syriac                  case "ta": // Tamil                  case "te": // Telugu                  case "tk": // Turkmen                  case "tr": // Turkish                  case "ur": // Urdu                  case "wae": // Walser                  case "xog": // Soga                  case "zu": // Zulu                      return (n' c) =>                      {                          if (c == 2) return (n == 1) ? 0 : 1;                          if (c == 3) return (n == 0) ? 0 : (n == 1) ? 1 : 2;                          if (c == 4) return (n < 0) ? 0 : (n == 0) ? 1 : (n == 1) ? 2 : 3;                          return -1;                      };                    // DualWithZero: one (n == 0..1)' other                  case "ak": // Akan                  case "am": // Amharic                  case "bh": // Bihari                  case "fil": // Filipino                  case "guw": // Gun                  case "hi": // Hindi                  case "ln": // Lingala                  case "mg": // Malagasy                  case "nso": // Northern Sotho                  case "ti": // Tigrinya                  case "tl": // Tagalog                  case "wa": // Walloon                      return (n' c) => (n == 0 || n == 1) ? 0 : 1;                    // DualFromZeroToTwo: one (n == 0..2 fractionate and n != 2)' other                  case "ff": // Fulah                  case "fr": // French                  case "kab": // Kabyle                      return (n' c) => (n >= 0 && n < 2) ? 0 : 1;                    // Triple: one (n == 1)' two (n == 2)' other                  case "ga": // Irish                  case "iu": // Inuktitut                  case "ksh": // Colognian                  case "kw": // Cornish                  case "se": // Northern Sami                  case "sma": // Southern Sami                  case "smi": // Sami language                  case "smj": // Lule Sami                  case "smn": // Inari Sami                  case "sms": // Skolt Sami                      return (n' c) => (n == 1) ? 0 : (n == 2) ? 1 : 2;                    // Russian & Serbo-Croatian                  case "be": // Belarusian                  case "bs": // Bosnian                  case "hr": // Croatian                  case "ru": // Russian                  case "sh": // Serbo-Croatian                  case "sr": // Serbian                  case "uk": // Ukrainian                      return (n' c) =>                          (n % 10 == 1) && !(n % 100 == 11) ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          2;                    // Unique:                    // Arabic                  case "ar":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          (n % 100).Between(3' 10) ? 3 : // few                          (n % 100).Between(11' 99) ? 4 : // many                          5; // other                    // Breton                  case "br":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5; // other                    // Czech                  case "cs":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Welsh                  case "cy":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5;                    // Manx                  case "gv":                      return (n' c) =>                          (n % 10).Between(1' 2) || (n % 20) == 0 ? 0 :  // one                          1;                    // Langi                  case "lag":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n > 0) && (n < 2) ? 1 : // one                          2;                    // Lithuanian                  case "lt":                      return (n' c) =>                          (n % 10) == 1 && !(n % 100).Between(11' 19) ? 0 : // one                          (n % 10).Between(2' 9) && !(n % 100).Between(11' 19) ? 1 : // few                          2;                    // Latvian                  case "lv":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n % 10) == 1 && (n % 100) != 11 ? 1 :                          2;                    // Macedonian                  case "mb":                      return (n' c) =>                          (n % 10) == 1 && n != 11 ? 0 : // one                          1;                    // Moldavian                  case "mo":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n != 1 && (n % 100).Between(1' 19)) ? 1 : // few                          2;                    // Maltese                  case "mt":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(2' 10) ? 1 : // few                          (n % 100).Between(11' 19) ? 2 : // many                          3;                    // Polish                  case "pl":                      return (n' c) =>                          n == 1 ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          (n % 10).Between(0' 1) || (n % 10).Between(5' 9) || (n % 100).Between(12' 14) ? 2 : // many                          3;                    // Romanian                  case "ro":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(1' 19) ? 1 : // few                          2;                    // Tachelhit                  case "shi":                      return (n' c) =>                          (n >= 0 && n <= 1) ? 0 : // one                          n.Between(2' 10) ? 1 : // few                          2;                    // Slovak                  case "sk":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Slovenian                  case "sl":                      return (n' c) =>                          (n % 100) == 1 ? 0 : // one                          (n % 100) == 2 ? 1 : // two                          (n % 100).Between(3' 4) ? 2 : // few                          3;                    // Central Morocco Tamazight                  case "tzm":                      return (n' c) =>                          n.Between(0' 1) || n.Between(11' 99) ? 0 : // one                          1;                      // Unknown language                  default:                      return null;              }
Magic Number,SmartFormat.Extensions,CommonLanguageRules,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\PluralLocalizationFormatter.cs,GetPluralRule,The following statement contains a magic number: switch (twoLetterISOLanguageName)              {                  // Singular                  case "az": // Azerbaijani                  case "bm": // Bambara                  case "bo": // Tibetan                  case "dz": // Dzongkha                  case "fa": // Persian                  case "hu": // Hungarian                  case "id": // Indonesian                  case "ig": // Igbo                  case "ii": // Sichuan Yi                  case "ja": // Japanese                  case "jv": // Javanese                  case "ka": // Georgian                  case "kde": // Makonde                  case "kea": // Kabuverdianu                  case "km": // Khmer                  case "kn": // Kannada                  case "ko": // Korean                  case "ms": // Malay                  case "my": // Burmese                  case "root": // Root (?)                  case "sah": // Sakha                  case "ses": // Koyraboro Senni                  case "sg": // Sango                  case "th": // Thai                  case "to": // Tonga                  case "vi": // Vietnamese                  case "wo": // Wolof                  case "yo": // Yoruba                  case "zh": // Chinese                      return (n' c) => 0;                    // Dual: one (n == 1)' other                  case "af": // Afrikaans                  case "bem": // Bembda                  case "bg": // Bulgarian                  case "bn": // Bengali                  case "brx": // Bodo                  case "ca": // Catalan                  case "cgg": // Chiga                  case "chr": // Cherokee                  case "da": // Danish                  case "de": // German                  case "dv": // Divehi                  case "ee": // Ewe                  case "el": // Greek                  case "en": // English                  case "eo": // Esperanto                  case "es": // Spanish                  case "et": // Estonian                  case "eu": // Basque                  case "fi": // Finnish                  case "fo": // Faroese                  case "fur": // Friulian                  case "fy": // Western Frisian                  case "gl": // Galician                  case "gsw": // Swiss German                  case "gu": // Gujarati                  case "ha": // Hausa                  case "haw": // Hawaiian                  case "he": // Hebrew                  case "is": // Icelandic                  case "it": // Italian                  case "kk": // Kazakh                  case "kl": // Kalaallisut                  case "ku": // Kurdish                  case "lb": // Luxembourgish                  case "lg": // Ganda                  case "lo": // Lao                  case "mas": // Masai                  case "ml": // Malayalam                  case "mn": // Mongolian                  case "mr": // Marathi                  case "nah": // Nahuatl                  case "nb": // Norwegian Bokmål                  case "ne": // Nepali                  case "nl": // Dutch                  case "nn": // Norwegian Nynorsk                  case "no": // Norwegian                  case "nyn": // Nyankole                  case "om": // Oromo                  case "or": // Oriya                  case "pa": // Punjabi                  case "pap": // Papiamento                  case "ps": // Pashto                  case "pt": // Portuguese                  case "rm": // Romansh                  case "saq": // Samburu                  case "so": // Somali                  case "sq": // Albanian                  case "ssy": // Saho                  case "sw": // Swahili                  case "sv": // Swedish                  case "syr": // Syriac                  case "ta": // Tamil                  case "te": // Telugu                  case "tk": // Turkmen                  case "tr": // Turkish                  case "ur": // Urdu                  case "wae": // Walser                  case "xog": // Soga                  case "zu": // Zulu                      return (n' c) =>                      {                          if (c == 2) return (n == 1) ? 0 : 1;                          if (c == 3) return (n == 0) ? 0 : (n == 1) ? 1 : 2;                          if (c == 4) return (n < 0) ? 0 : (n == 0) ? 1 : (n == 1) ? 2 : 3;                          return -1;                      };                    // DualWithZero: one (n == 0..1)' other                  case "ak": // Akan                  case "am": // Amharic                  case "bh": // Bihari                  case "fil": // Filipino                  case "guw": // Gun                  case "hi": // Hindi                  case "ln": // Lingala                  case "mg": // Malagasy                  case "nso": // Northern Sotho                  case "ti": // Tigrinya                  case "tl": // Tagalog                  case "wa": // Walloon                      return (n' c) => (n == 0 || n == 1) ? 0 : 1;                    // DualFromZeroToTwo: one (n == 0..2 fractionate and n != 2)' other                  case "ff": // Fulah                  case "fr": // French                  case "kab": // Kabyle                      return (n' c) => (n >= 0 && n < 2) ? 0 : 1;                    // Triple: one (n == 1)' two (n == 2)' other                  case "ga": // Irish                  case "iu": // Inuktitut                  case "ksh": // Colognian                  case "kw": // Cornish                  case "se": // Northern Sami                  case "sma": // Southern Sami                  case "smi": // Sami language                  case "smj": // Lule Sami                  case "smn": // Inari Sami                  case "sms": // Skolt Sami                      return (n' c) => (n == 1) ? 0 : (n == 2) ? 1 : 2;                    // Russian & Serbo-Croatian                  case "be": // Belarusian                  case "bs": // Bosnian                  case "hr": // Croatian                  case "ru": // Russian                  case "sh": // Serbo-Croatian                  case "sr": // Serbian                  case "uk": // Ukrainian                      return (n' c) =>                          (n % 10 == 1) && !(n % 100 == 11) ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          2;                    // Unique:                    // Arabic                  case "ar":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          (n % 100).Between(3' 10) ? 3 : // few                          (n % 100).Between(11' 99) ? 4 : // many                          5; // other                    // Breton                  case "br":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5; // other                    // Czech                  case "cs":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Welsh                  case "cy":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5;                    // Manx                  case "gv":                      return (n' c) =>                          (n % 10).Between(1' 2) || (n % 20) == 0 ? 0 :  // one                          1;                    // Langi                  case "lag":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n > 0) && (n < 2) ? 1 : // one                          2;                    // Lithuanian                  case "lt":                      return (n' c) =>                          (n % 10) == 1 && !(n % 100).Between(11' 19) ? 0 : // one                          (n % 10).Between(2' 9) && !(n % 100).Between(11' 19) ? 1 : // few                          2;                    // Latvian                  case "lv":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n % 10) == 1 && (n % 100) != 11 ? 1 :                          2;                    // Macedonian                  case "mb":                      return (n' c) =>                          (n % 10) == 1 && n != 11 ? 0 : // one                          1;                    // Moldavian                  case "mo":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n != 1 && (n % 100).Between(1' 19)) ? 1 : // few                          2;                    // Maltese                  case "mt":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(2' 10) ? 1 : // few                          (n % 100).Between(11' 19) ? 2 : // many                          3;                    // Polish                  case "pl":                      return (n' c) =>                          n == 1 ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          (n % 10).Between(0' 1) || (n % 10).Between(5' 9) || (n % 100).Between(12' 14) ? 2 : // many                          3;                    // Romanian                  case "ro":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(1' 19) ? 1 : // few                          2;                    // Tachelhit                  case "shi":                      return (n' c) =>                          (n >= 0 && n <= 1) ? 0 : // one                          n.Between(2' 10) ? 1 : // few                          2;                    // Slovak                  case "sk":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Slovenian                  case "sl":                      return (n' c) =>                          (n % 100) == 1 ? 0 : // one                          (n % 100) == 2 ? 1 : // two                          (n % 100).Between(3' 4) ? 2 : // few                          3;                    // Central Morocco Tamazight                  case "tzm":                      return (n' c) =>                          n.Between(0' 1) || n.Between(11' 99) ? 0 : // one                          1;                      // Unknown language                  default:                      return null;              }
Magic Number,SmartFormat.Extensions,CommonLanguageRules,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\PluralLocalizationFormatter.cs,GetPluralRule,The following statement contains a magic number: switch (twoLetterISOLanguageName)              {                  // Singular                  case "az": // Azerbaijani                  case "bm": // Bambara                  case "bo": // Tibetan                  case "dz": // Dzongkha                  case "fa": // Persian                  case "hu": // Hungarian                  case "id": // Indonesian                  case "ig": // Igbo                  case "ii": // Sichuan Yi                  case "ja": // Japanese                  case "jv": // Javanese                  case "ka": // Georgian                  case "kde": // Makonde                  case "kea": // Kabuverdianu                  case "km": // Khmer                  case "kn": // Kannada                  case "ko": // Korean                  case "ms": // Malay                  case "my": // Burmese                  case "root": // Root (?)                  case "sah": // Sakha                  case "ses": // Koyraboro Senni                  case "sg": // Sango                  case "th": // Thai                  case "to": // Tonga                  case "vi": // Vietnamese                  case "wo": // Wolof                  case "yo": // Yoruba                  case "zh": // Chinese                      return (n' c) => 0;                    // Dual: one (n == 1)' other                  case "af": // Afrikaans                  case "bem": // Bembda                  case "bg": // Bulgarian                  case "bn": // Bengali                  case "brx": // Bodo                  case "ca": // Catalan                  case "cgg": // Chiga                  case "chr": // Cherokee                  case "da": // Danish                  case "de": // German                  case "dv": // Divehi                  case "ee": // Ewe                  case "el": // Greek                  case "en": // English                  case "eo": // Esperanto                  case "es": // Spanish                  case "et": // Estonian                  case "eu": // Basque                  case "fi": // Finnish                  case "fo": // Faroese                  case "fur": // Friulian                  case "fy": // Western Frisian                  case "gl": // Galician                  case "gsw": // Swiss German                  case "gu": // Gujarati                  case "ha": // Hausa                  case "haw": // Hawaiian                  case "he": // Hebrew                  case "is": // Icelandic                  case "it": // Italian                  case "kk": // Kazakh                  case "kl": // Kalaallisut                  case "ku": // Kurdish                  case "lb": // Luxembourgish                  case "lg": // Ganda                  case "lo": // Lao                  case "mas": // Masai                  case "ml": // Malayalam                  case "mn": // Mongolian                  case "mr": // Marathi                  case "nah": // Nahuatl                  case "nb": // Norwegian Bokmål                  case "ne": // Nepali                  case "nl": // Dutch                  case "nn": // Norwegian Nynorsk                  case "no": // Norwegian                  case "nyn": // Nyankole                  case "om": // Oromo                  case "or": // Oriya                  case "pa": // Punjabi                  case "pap": // Papiamento                  case "ps": // Pashto                  case "pt": // Portuguese                  case "rm": // Romansh                  case "saq": // Samburu                  case "so": // Somali                  case "sq": // Albanian                  case "ssy": // Saho                  case "sw": // Swahili                  case "sv": // Swedish                  case "syr": // Syriac                  case "ta": // Tamil                  case "te": // Telugu                  case "tk": // Turkmen                  case "tr": // Turkish                  case "ur": // Urdu                  case "wae": // Walser                  case "xog": // Soga                  case "zu": // Zulu                      return (n' c) =>                      {                          if (c == 2) return (n == 1) ? 0 : 1;                          if (c == 3) return (n == 0) ? 0 : (n == 1) ? 1 : 2;                          if (c == 4) return (n < 0) ? 0 : (n == 0) ? 1 : (n == 1) ? 2 : 3;                          return -1;                      };                    // DualWithZero: one (n == 0..1)' other                  case "ak": // Akan                  case "am": // Amharic                  case "bh": // Bihari                  case "fil": // Filipino                  case "guw": // Gun                  case "hi": // Hindi                  case "ln": // Lingala                  case "mg": // Malagasy                  case "nso": // Northern Sotho                  case "ti": // Tigrinya                  case "tl": // Tagalog                  case "wa": // Walloon                      return (n' c) => (n == 0 || n == 1) ? 0 : 1;                    // DualFromZeroToTwo: one (n == 0..2 fractionate and n != 2)' other                  case "ff": // Fulah                  case "fr": // French                  case "kab": // Kabyle                      return (n' c) => (n >= 0 && n < 2) ? 0 : 1;                    // Triple: one (n == 1)' two (n == 2)' other                  case "ga": // Irish                  case "iu": // Inuktitut                  case "ksh": // Colognian                  case "kw": // Cornish                  case "se": // Northern Sami                  case "sma": // Southern Sami                  case "smi": // Sami language                  case "smj": // Lule Sami                  case "smn": // Inari Sami                  case "sms": // Skolt Sami                      return (n' c) => (n == 1) ? 0 : (n == 2) ? 1 : 2;                    // Russian & Serbo-Croatian                  case "be": // Belarusian                  case "bs": // Bosnian                  case "hr": // Croatian                  case "ru": // Russian                  case "sh": // Serbo-Croatian                  case "sr": // Serbian                  case "uk": // Ukrainian                      return (n' c) =>                          (n % 10 == 1) && !(n % 100 == 11) ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          2;                    // Unique:                    // Arabic                  case "ar":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          (n % 100).Between(3' 10) ? 3 : // few                          (n % 100).Between(11' 99) ? 4 : // many                          5; // other                    // Breton                  case "br":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5; // other                    // Czech                  case "cs":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Welsh                  case "cy":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5;                    // Manx                  case "gv":                      return (n' c) =>                          (n % 10).Between(1' 2) || (n % 20) == 0 ? 0 :  // one                          1;                    // Langi                  case "lag":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n > 0) && (n < 2) ? 1 : // one                          2;                    // Lithuanian                  case "lt":                      return (n' c) =>                          (n % 10) == 1 && !(n % 100).Between(11' 19) ? 0 : // one                          (n % 10).Between(2' 9) && !(n % 100).Between(11' 19) ? 1 : // few                          2;                    // Latvian                  case "lv":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n % 10) == 1 && (n % 100) != 11 ? 1 :                          2;                    // Macedonian                  case "mb":                      return (n' c) =>                          (n % 10) == 1 && n != 11 ? 0 : // one                          1;                    // Moldavian                  case "mo":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n != 1 && (n % 100).Between(1' 19)) ? 1 : // few                          2;                    // Maltese                  case "mt":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(2' 10) ? 1 : // few                          (n % 100).Between(11' 19) ? 2 : // many                          3;                    // Polish                  case "pl":                      return (n' c) =>                          n == 1 ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          (n % 10).Between(0' 1) || (n % 10).Between(5' 9) || (n % 100).Between(12' 14) ? 2 : // many                          3;                    // Romanian                  case "ro":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(1' 19) ? 1 : // few                          2;                    // Tachelhit                  case "shi":                      return (n' c) =>                          (n >= 0 && n <= 1) ? 0 : // one                          n.Between(2' 10) ? 1 : // few                          2;                    // Slovak                  case "sk":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Slovenian                  case "sl":                      return (n' c) =>                          (n % 100) == 1 ? 0 : // one                          (n % 100) == 2 ? 1 : // two                          (n % 100).Between(3' 4) ? 2 : // few                          3;                    // Central Morocco Tamazight                  case "tzm":                      return (n' c) =>                          n.Between(0' 1) || n.Between(11' 99) ? 0 : // one                          1;                      // Unknown language                  default:                      return null;              }
Magic Number,SmartFormat.Extensions,CommonLanguageRules,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\PluralLocalizationFormatter.cs,GetPluralRule,The following statement contains a magic number: switch (twoLetterISOLanguageName)              {                  // Singular                  case "az": // Azerbaijani                  case "bm": // Bambara                  case "bo": // Tibetan                  case "dz": // Dzongkha                  case "fa": // Persian                  case "hu": // Hungarian                  case "id": // Indonesian                  case "ig": // Igbo                  case "ii": // Sichuan Yi                  case "ja": // Japanese                  case "jv": // Javanese                  case "ka": // Georgian                  case "kde": // Makonde                  case "kea": // Kabuverdianu                  case "km": // Khmer                  case "kn": // Kannada                  case "ko": // Korean                  case "ms": // Malay                  case "my": // Burmese                  case "root": // Root (?)                  case "sah": // Sakha                  case "ses": // Koyraboro Senni                  case "sg": // Sango                  case "th": // Thai                  case "to": // Tonga                  case "vi": // Vietnamese                  case "wo": // Wolof                  case "yo": // Yoruba                  case "zh": // Chinese                      return (n' c) => 0;                    // Dual: one (n == 1)' other                  case "af": // Afrikaans                  case "bem": // Bembda                  case "bg": // Bulgarian                  case "bn": // Bengali                  case "brx": // Bodo                  case "ca": // Catalan                  case "cgg": // Chiga                  case "chr": // Cherokee                  case "da": // Danish                  case "de": // German                  case "dv": // Divehi                  case "ee": // Ewe                  case "el": // Greek                  case "en": // English                  case "eo": // Esperanto                  case "es": // Spanish                  case "et": // Estonian                  case "eu": // Basque                  case "fi": // Finnish                  case "fo": // Faroese                  case "fur": // Friulian                  case "fy": // Western Frisian                  case "gl": // Galician                  case "gsw": // Swiss German                  case "gu": // Gujarati                  case "ha": // Hausa                  case "haw": // Hawaiian                  case "he": // Hebrew                  case "is": // Icelandic                  case "it": // Italian                  case "kk": // Kazakh                  case "kl": // Kalaallisut                  case "ku": // Kurdish                  case "lb": // Luxembourgish                  case "lg": // Ganda                  case "lo": // Lao                  case "mas": // Masai                  case "ml": // Malayalam                  case "mn": // Mongolian                  case "mr": // Marathi                  case "nah": // Nahuatl                  case "nb": // Norwegian Bokmål                  case "ne": // Nepali                  case "nl": // Dutch                  case "nn": // Norwegian Nynorsk                  case "no": // Norwegian                  case "nyn": // Nyankole                  case "om": // Oromo                  case "or": // Oriya                  case "pa": // Punjabi                  case "pap": // Papiamento                  case "ps": // Pashto                  case "pt": // Portuguese                  case "rm": // Romansh                  case "saq": // Samburu                  case "so": // Somali                  case "sq": // Albanian                  case "ssy": // Saho                  case "sw": // Swahili                  case "sv": // Swedish                  case "syr": // Syriac                  case "ta": // Tamil                  case "te": // Telugu                  case "tk": // Turkmen                  case "tr": // Turkish                  case "ur": // Urdu                  case "wae": // Walser                  case "xog": // Soga                  case "zu": // Zulu                      return (n' c) =>                      {                          if (c == 2) return (n == 1) ? 0 : 1;                          if (c == 3) return (n == 0) ? 0 : (n == 1) ? 1 : 2;                          if (c == 4) return (n < 0) ? 0 : (n == 0) ? 1 : (n == 1) ? 2 : 3;                          return -1;                      };                    // DualWithZero: one (n == 0..1)' other                  case "ak": // Akan                  case "am": // Amharic                  case "bh": // Bihari                  case "fil": // Filipino                  case "guw": // Gun                  case "hi": // Hindi                  case "ln": // Lingala                  case "mg": // Malagasy                  case "nso": // Northern Sotho                  case "ti": // Tigrinya                  case "tl": // Tagalog                  case "wa": // Walloon                      return (n' c) => (n == 0 || n == 1) ? 0 : 1;                    // DualFromZeroToTwo: one (n == 0..2 fractionate and n != 2)' other                  case "ff": // Fulah                  case "fr": // French                  case "kab": // Kabyle                      return (n' c) => (n >= 0 && n < 2) ? 0 : 1;                    // Triple: one (n == 1)' two (n == 2)' other                  case "ga": // Irish                  case "iu": // Inuktitut                  case "ksh": // Colognian                  case "kw": // Cornish                  case "se": // Northern Sami                  case "sma": // Southern Sami                  case "smi": // Sami language                  case "smj": // Lule Sami                  case "smn": // Inari Sami                  case "sms": // Skolt Sami                      return (n' c) => (n == 1) ? 0 : (n == 2) ? 1 : 2;                    // Russian & Serbo-Croatian                  case "be": // Belarusian                  case "bs": // Bosnian                  case "hr": // Croatian                  case "ru": // Russian                  case "sh": // Serbo-Croatian                  case "sr": // Serbian                  case "uk": // Ukrainian                      return (n' c) =>                          (n % 10 == 1) && !(n % 100 == 11) ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          2;                    // Unique:                    // Arabic                  case "ar":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          (n % 100).Between(3' 10) ? 3 : // few                          (n % 100).Between(11' 99) ? 4 : // many                          5; // other                    // Breton                  case "br":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5; // other                    // Czech                  case "cs":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Welsh                  case "cy":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5;                    // Manx                  case "gv":                      return (n' c) =>                          (n % 10).Between(1' 2) || (n % 20) == 0 ? 0 :  // one                          1;                    // Langi                  case "lag":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n > 0) && (n < 2) ? 1 : // one                          2;                    // Lithuanian                  case "lt":                      return (n' c) =>                          (n % 10) == 1 && !(n % 100).Between(11' 19) ? 0 : // one                          (n % 10).Between(2' 9) && !(n % 100).Between(11' 19) ? 1 : // few                          2;                    // Latvian                  case "lv":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n % 10) == 1 && (n % 100) != 11 ? 1 :                          2;                    // Macedonian                  case "mb":                      return (n' c) =>                          (n % 10) == 1 && n != 11 ? 0 : // one                          1;                    // Moldavian                  case "mo":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n != 1 && (n % 100).Between(1' 19)) ? 1 : // few                          2;                    // Maltese                  case "mt":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(2' 10) ? 1 : // few                          (n % 100).Between(11' 19) ? 2 : // many                          3;                    // Polish                  case "pl":                      return (n' c) =>                          n == 1 ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          (n % 10).Between(0' 1) || (n % 10).Between(5' 9) || (n % 100).Between(12' 14) ? 2 : // many                          3;                    // Romanian                  case "ro":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(1' 19) ? 1 : // few                          2;                    // Tachelhit                  case "shi":                      return (n' c) =>                          (n >= 0 && n <= 1) ? 0 : // one                          n.Between(2' 10) ? 1 : // few                          2;                    // Slovak                  case "sk":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Slovenian                  case "sl":                      return (n' c) =>                          (n % 100) == 1 ? 0 : // one                          (n % 100) == 2 ? 1 : // two                          (n % 100).Between(3' 4) ? 2 : // few                          3;                    // Central Morocco Tamazight                  case "tzm":                      return (n' c) =>                          n.Between(0' 1) || n.Between(11' 99) ? 0 : // one                          1;                      // Unknown language                  default:                      return null;              }
Magic Number,SmartFormat.Extensions,CommonLanguageRules,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\PluralLocalizationFormatter.cs,GetPluralRule,The following statement contains a magic number: switch (twoLetterISOLanguageName)              {                  // Singular                  case "az": // Azerbaijani                  case "bm": // Bambara                  case "bo": // Tibetan                  case "dz": // Dzongkha                  case "fa": // Persian                  case "hu": // Hungarian                  case "id": // Indonesian                  case "ig": // Igbo                  case "ii": // Sichuan Yi                  case "ja": // Japanese                  case "jv": // Javanese                  case "ka": // Georgian                  case "kde": // Makonde                  case "kea": // Kabuverdianu                  case "km": // Khmer                  case "kn": // Kannada                  case "ko": // Korean                  case "ms": // Malay                  case "my": // Burmese                  case "root": // Root (?)                  case "sah": // Sakha                  case "ses": // Koyraboro Senni                  case "sg": // Sango                  case "th": // Thai                  case "to": // Tonga                  case "vi": // Vietnamese                  case "wo": // Wolof                  case "yo": // Yoruba                  case "zh": // Chinese                      return (n' c) => 0;                    // Dual: one (n == 1)' other                  case "af": // Afrikaans                  case "bem": // Bembda                  case "bg": // Bulgarian                  case "bn": // Bengali                  case "brx": // Bodo                  case "ca": // Catalan                  case "cgg": // Chiga                  case "chr": // Cherokee                  case "da": // Danish                  case "de": // German                  case "dv": // Divehi                  case "ee": // Ewe                  case "el": // Greek                  case "en": // English                  case "eo": // Esperanto                  case "es": // Spanish                  case "et": // Estonian                  case "eu": // Basque                  case "fi": // Finnish                  case "fo": // Faroese                  case "fur": // Friulian                  case "fy": // Western Frisian                  case "gl": // Galician                  case "gsw": // Swiss German                  case "gu": // Gujarati                  case "ha": // Hausa                  case "haw": // Hawaiian                  case "he": // Hebrew                  case "is": // Icelandic                  case "it": // Italian                  case "kk": // Kazakh                  case "kl": // Kalaallisut                  case "ku": // Kurdish                  case "lb": // Luxembourgish                  case "lg": // Ganda                  case "lo": // Lao                  case "mas": // Masai                  case "ml": // Malayalam                  case "mn": // Mongolian                  case "mr": // Marathi                  case "nah": // Nahuatl                  case "nb": // Norwegian Bokmål                  case "ne": // Nepali                  case "nl": // Dutch                  case "nn": // Norwegian Nynorsk                  case "no": // Norwegian                  case "nyn": // Nyankole                  case "om": // Oromo                  case "or": // Oriya                  case "pa": // Punjabi                  case "pap": // Papiamento                  case "ps": // Pashto                  case "pt": // Portuguese                  case "rm": // Romansh                  case "saq": // Samburu                  case "so": // Somali                  case "sq": // Albanian                  case "ssy": // Saho                  case "sw": // Swahili                  case "sv": // Swedish                  case "syr": // Syriac                  case "ta": // Tamil                  case "te": // Telugu                  case "tk": // Turkmen                  case "tr": // Turkish                  case "ur": // Urdu                  case "wae": // Walser                  case "xog": // Soga                  case "zu": // Zulu                      return (n' c) =>                      {                          if (c == 2) return (n == 1) ? 0 : 1;                          if (c == 3) return (n == 0) ? 0 : (n == 1) ? 1 : 2;                          if (c == 4) return (n < 0) ? 0 : (n == 0) ? 1 : (n == 1) ? 2 : 3;                          return -1;                      };                    // DualWithZero: one (n == 0..1)' other                  case "ak": // Akan                  case "am": // Amharic                  case "bh": // Bihari                  case "fil": // Filipino                  case "guw": // Gun                  case "hi": // Hindi                  case "ln": // Lingala                  case "mg": // Malagasy                  case "nso": // Northern Sotho                  case "ti": // Tigrinya                  case "tl": // Tagalog                  case "wa": // Walloon                      return (n' c) => (n == 0 || n == 1) ? 0 : 1;                    // DualFromZeroToTwo: one (n == 0..2 fractionate and n != 2)' other                  case "ff": // Fulah                  case "fr": // French                  case "kab": // Kabyle                      return (n' c) => (n >= 0 && n < 2) ? 0 : 1;                    // Triple: one (n == 1)' two (n == 2)' other                  case "ga": // Irish                  case "iu": // Inuktitut                  case "ksh": // Colognian                  case "kw": // Cornish                  case "se": // Northern Sami                  case "sma": // Southern Sami                  case "smi": // Sami language                  case "smj": // Lule Sami                  case "smn": // Inari Sami                  case "sms": // Skolt Sami                      return (n' c) => (n == 1) ? 0 : (n == 2) ? 1 : 2;                    // Russian & Serbo-Croatian                  case "be": // Belarusian                  case "bs": // Bosnian                  case "hr": // Croatian                  case "ru": // Russian                  case "sh": // Serbo-Croatian                  case "sr": // Serbian                  case "uk": // Ukrainian                      return (n' c) =>                          (n % 10 == 1) && !(n % 100 == 11) ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          2;                    // Unique:                    // Arabic                  case "ar":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          (n % 100).Between(3' 10) ? 3 : // few                          (n % 100).Between(11' 99) ? 4 : // many                          5; // other                    // Breton                  case "br":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5; // other                    // Czech                  case "cs":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Welsh                  case "cy":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5;                    // Manx                  case "gv":                      return (n' c) =>                          (n % 10).Between(1' 2) || (n % 20) == 0 ? 0 :  // one                          1;                    // Langi                  case "lag":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n > 0) && (n < 2) ? 1 : // one                          2;                    // Lithuanian                  case "lt":                      return (n' c) =>                          (n % 10) == 1 && !(n % 100).Between(11' 19) ? 0 : // one                          (n % 10).Between(2' 9) && !(n % 100).Between(11' 19) ? 1 : // few                          2;                    // Latvian                  case "lv":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n % 10) == 1 && (n % 100) != 11 ? 1 :                          2;                    // Macedonian                  case "mb":                      return (n' c) =>                          (n % 10) == 1 && n != 11 ? 0 : // one                          1;                    // Moldavian                  case "mo":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n != 1 && (n % 100).Between(1' 19)) ? 1 : // few                          2;                    // Maltese                  case "mt":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(2' 10) ? 1 : // few                          (n % 100).Between(11' 19) ? 2 : // many                          3;                    // Polish                  case "pl":                      return (n' c) =>                          n == 1 ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          (n % 10).Between(0' 1) || (n % 10).Between(5' 9) || (n % 100).Between(12' 14) ? 2 : // many                          3;                    // Romanian                  case "ro":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(1' 19) ? 1 : // few                          2;                    // Tachelhit                  case "shi":                      return (n' c) =>                          (n >= 0 && n <= 1) ? 0 : // one                          n.Between(2' 10) ? 1 : // few                          2;                    // Slovak                  case "sk":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Slovenian                  case "sl":                      return (n' c) =>                          (n % 100) == 1 ? 0 : // one                          (n % 100) == 2 ? 1 : // two                          (n % 100).Between(3' 4) ? 2 : // few                          3;                    // Central Morocco Tamazight                  case "tzm":                      return (n' c) =>                          n.Between(0' 1) || n.Between(11' 99) ? 0 : // one                          1;                      // Unknown language                  default:                      return null;              }
Magic Number,SmartFormat.Extensions,CommonLanguageRules,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\PluralLocalizationFormatter.cs,GetPluralRule,The following statement contains a magic number: switch (twoLetterISOLanguageName)              {                  // Singular                  case "az": // Azerbaijani                  case "bm": // Bambara                  case "bo": // Tibetan                  case "dz": // Dzongkha                  case "fa": // Persian                  case "hu": // Hungarian                  case "id": // Indonesian                  case "ig": // Igbo                  case "ii": // Sichuan Yi                  case "ja": // Japanese                  case "jv": // Javanese                  case "ka": // Georgian                  case "kde": // Makonde                  case "kea": // Kabuverdianu                  case "km": // Khmer                  case "kn": // Kannada                  case "ko": // Korean                  case "ms": // Malay                  case "my": // Burmese                  case "root": // Root (?)                  case "sah": // Sakha                  case "ses": // Koyraboro Senni                  case "sg": // Sango                  case "th": // Thai                  case "to": // Tonga                  case "vi": // Vietnamese                  case "wo": // Wolof                  case "yo": // Yoruba                  case "zh": // Chinese                      return (n' c) => 0;                    // Dual: one (n == 1)' other                  case "af": // Afrikaans                  case "bem": // Bembda                  case "bg": // Bulgarian                  case "bn": // Bengali                  case "brx": // Bodo                  case "ca": // Catalan                  case "cgg": // Chiga                  case "chr": // Cherokee                  case "da": // Danish                  case "de": // German                  case "dv": // Divehi                  case "ee": // Ewe                  case "el": // Greek                  case "en": // English                  case "eo": // Esperanto                  case "es": // Spanish                  case "et": // Estonian                  case "eu": // Basque                  case "fi": // Finnish                  case "fo": // Faroese                  case "fur": // Friulian                  case "fy": // Western Frisian                  case "gl": // Galician                  case "gsw": // Swiss German                  case "gu": // Gujarati                  case "ha": // Hausa                  case "haw": // Hawaiian                  case "he": // Hebrew                  case "is": // Icelandic                  case "it": // Italian                  case "kk": // Kazakh                  case "kl": // Kalaallisut                  case "ku": // Kurdish                  case "lb": // Luxembourgish                  case "lg": // Ganda                  case "lo": // Lao                  case "mas": // Masai                  case "ml": // Malayalam                  case "mn": // Mongolian                  case "mr": // Marathi                  case "nah": // Nahuatl                  case "nb": // Norwegian Bokmål                  case "ne": // Nepali                  case "nl": // Dutch                  case "nn": // Norwegian Nynorsk                  case "no": // Norwegian                  case "nyn": // Nyankole                  case "om": // Oromo                  case "or": // Oriya                  case "pa": // Punjabi                  case "pap": // Papiamento                  case "ps": // Pashto                  case "pt": // Portuguese                  case "rm": // Romansh                  case "saq": // Samburu                  case "so": // Somali                  case "sq": // Albanian                  case "ssy": // Saho                  case "sw": // Swahili                  case "sv": // Swedish                  case "syr": // Syriac                  case "ta": // Tamil                  case "te": // Telugu                  case "tk": // Turkmen                  case "tr": // Turkish                  case "ur": // Urdu                  case "wae": // Walser                  case "xog": // Soga                  case "zu": // Zulu                      return (n' c) =>                      {                          if (c == 2) return (n == 1) ? 0 : 1;                          if (c == 3) return (n == 0) ? 0 : (n == 1) ? 1 : 2;                          if (c == 4) return (n < 0) ? 0 : (n == 0) ? 1 : (n == 1) ? 2 : 3;                          return -1;                      };                    // DualWithZero: one (n == 0..1)' other                  case "ak": // Akan                  case "am": // Amharic                  case "bh": // Bihari                  case "fil": // Filipino                  case "guw": // Gun                  case "hi": // Hindi                  case "ln": // Lingala                  case "mg": // Malagasy                  case "nso": // Northern Sotho                  case "ti": // Tigrinya                  case "tl": // Tagalog                  case "wa": // Walloon                      return (n' c) => (n == 0 || n == 1) ? 0 : 1;                    // DualFromZeroToTwo: one (n == 0..2 fractionate and n != 2)' other                  case "ff": // Fulah                  case "fr": // French                  case "kab": // Kabyle                      return (n' c) => (n >= 0 && n < 2) ? 0 : 1;                    // Triple: one (n == 1)' two (n == 2)' other                  case "ga": // Irish                  case "iu": // Inuktitut                  case "ksh": // Colognian                  case "kw": // Cornish                  case "se": // Northern Sami                  case "sma": // Southern Sami                  case "smi": // Sami language                  case "smj": // Lule Sami                  case "smn": // Inari Sami                  case "sms": // Skolt Sami                      return (n' c) => (n == 1) ? 0 : (n == 2) ? 1 : 2;                    // Russian & Serbo-Croatian                  case "be": // Belarusian                  case "bs": // Bosnian                  case "hr": // Croatian                  case "ru": // Russian                  case "sh": // Serbo-Croatian                  case "sr": // Serbian                  case "uk": // Ukrainian                      return (n' c) =>                          (n % 10 == 1) && !(n % 100 == 11) ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          2;                    // Unique:                    // Arabic                  case "ar":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          (n % 100).Between(3' 10) ? 3 : // few                          (n % 100).Between(11' 99) ? 4 : // many                          5; // other                    // Breton                  case "br":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5; // other                    // Czech                  case "cs":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Welsh                  case "cy":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5;                    // Manx                  case "gv":                      return (n' c) =>                          (n % 10).Between(1' 2) || (n % 20) == 0 ? 0 :  // one                          1;                    // Langi                  case "lag":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n > 0) && (n < 2) ? 1 : // one                          2;                    // Lithuanian                  case "lt":                      return (n' c) =>                          (n % 10) == 1 && !(n % 100).Between(11' 19) ? 0 : // one                          (n % 10).Between(2' 9) && !(n % 100).Between(11' 19) ? 1 : // few                          2;                    // Latvian                  case "lv":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n % 10) == 1 && (n % 100) != 11 ? 1 :                          2;                    // Macedonian                  case "mb":                      return (n' c) =>                          (n % 10) == 1 && n != 11 ? 0 : // one                          1;                    // Moldavian                  case "mo":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n != 1 && (n % 100).Between(1' 19)) ? 1 : // few                          2;                    // Maltese                  case "mt":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(2' 10) ? 1 : // few                          (n % 100).Between(11' 19) ? 2 : // many                          3;                    // Polish                  case "pl":                      return (n' c) =>                          n == 1 ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          (n % 10).Between(0' 1) || (n % 10).Between(5' 9) || (n % 100).Between(12' 14) ? 2 : // many                          3;                    // Romanian                  case "ro":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(1' 19) ? 1 : // few                          2;                    // Tachelhit                  case "shi":                      return (n' c) =>                          (n >= 0 && n <= 1) ? 0 : // one                          n.Between(2' 10) ? 1 : // few                          2;                    // Slovak                  case "sk":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Slovenian                  case "sl":                      return (n' c) =>                          (n % 100) == 1 ? 0 : // one                          (n % 100) == 2 ? 1 : // two                          (n % 100).Between(3' 4) ? 2 : // few                          3;                    // Central Morocco Tamazight                  case "tzm":                      return (n' c) =>                          n.Between(0' 1) || n.Between(11' 99) ? 0 : // one                          1;                      // Unknown language                  default:                      return null;              }
Magic Number,SmartFormat.Extensions,CommonLanguageRules,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\PluralLocalizationFormatter.cs,GetPluralRule,The following statement contains a magic number: switch (twoLetterISOLanguageName)              {                  // Singular                  case "az": // Azerbaijani                  case "bm": // Bambara                  case "bo": // Tibetan                  case "dz": // Dzongkha                  case "fa": // Persian                  case "hu": // Hungarian                  case "id": // Indonesian                  case "ig": // Igbo                  case "ii": // Sichuan Yi                  case "ja": // Japanese                  case "jv": // Javanese                  case "ka": // Georgian                  case "kde": // Makonde                  case "kea": // Kabuverdianu                  case "km": // Khmer                  case "kn": // Kannada                  case "ko": // Korean                  case "ms": // Malay                  case "my": // Burmese                  case "root": // Root (?)                  case "sah": // Sakha                  case "ses": // Koyraboro Senni                  case "sg": // Sango                  case "th": // Thai                  case "to": // Tonga                  case "vi": // Vietnamese                  case "wo": // Wolof                  case "yo": // Yoruba                  case "zh": // Chinese                      return (n' c) => 0;                    // Dual: one (n == 1)' other                  case "af": // Afrikaans                  case "bem": // Bembda                  case "bg": // Bulgarian                  case "bn": // Bengali                  case "brx": // Bodo                  case "ca": // Catalan                  case "cgg": // Chiga                  case "chr": // Cherokee                  case "da": // Danish                  case "de": // German                  case "dv": // Divehi                  case "ee": // Ewe                  case "el": // Greek                  case "en": // English                  case "eo": // Esperanto                  case "es": // Spanish                  case "et": // Estonian                  case "eu": // Basque                  case "fi": // Finnish                  case "fo": // Faroese                  case "fur": // Friulian                  case "fy": // Western Frisian                  case "gl": // Galician                  case "gsw": // Swiss German                  case "gu": // Gujarati                  case "ha": // Hausa                  case "haw": // Hawaiian                  case "he": // Hebrew                  case "is": // Icelandic                  case "it": // Italian                  case "kk": // Kazakh                  case "kl": // Kalaallisut                  case "ku": // Kurdish                  case "lb": // Luxembourgish                  case "lg": // Ganda                  case "lo": // Lao                  case "mas": // Masai                  case "ml": // Malayalam                  case "mn": // Mongolian                  case "mr": // Marathi                  case "nah": // Nahuatl                  case "nb": // Norwegian Bokmål                  case "ne": // Nepali                  case "nl": // Dutch                  case "nn": // Norwegian Nynorsk                  case "no": // Norwegian                  case "nyn": // Nyankole                  case "om": // Oromo                  case "or": // Oriya                  case "pa": // Punjabi                  case "pap": // Papiamento                  case "ps": // Pashto                  case "pt": // Portuguese                  case "rm": // Romansh                  case "saq": // Samburu                  case "so": // Somali                  case "sq": // Albanian                  case "ssy": // Saho                  case "sw": // Swahili                  case "sv": // Swedish                  case "syr": // Syriac                  case "ta": // Tamil                  case "te": // Telugu                  case "tk": // Turkmen                  case "tr": // Turkish                  case "ur": // Urdu                  case "wae": // Walser                  case "xog": // Soga                  case "zu": // Zulu                      return (n' c) =>                      {                          if (c == 2) return (n == 1) ? 0 : 1;                          if (c == 3) return (n == 0) ? 0 : (n == 1) ? 1 : 2;                          if (c == 4) return (n < 0) ? 0 : (n == 0) ? 1 : (n == 1) ? 2 : 3;                          return -1;                      };                    // DualWithZero: one (n == 0..1)' other                  case "ak": // Akan                  case "am": // Amharic                  case "bh": // Bihari                  case "fil": // Filipino                  case "guw": // Gun                  case "hi": // Hindi                  case "ln": // Lingala                  case "mg": // Malagasy                  case "nso": // Northern Sotho                  case "ti": // Tigrinya                  case "tl": // Tagalog                  case "wa": // Walloon                      return (n' c) => (n == 0 || n == 1) ? 0 : 1;                    // DualFromZeroToTwo: one (n == 0..2 fractionate and n != 2)' other                  case "ff": // Fulah                  case "fr": // French                  case "kab": // Kabyle                      return (n' c) => (n >= 0 && n < 2) ? 0 : 1;                    // Triple: one (n == 1)' two (n == 2)' other                  case "ga": // Irish                  case "iu": // Inuktitut                  case "ksh": // Colognian                  case "kw": // Cornish                  case "se": // Northern Sami                  case "sma": // Southern Sami                  case "smi": // Sami language                  case "smj": // Lule Sami                  case "smn": // Inari Sami                  case "sms": // Skolt Sami                      return (n' c) => (n == 1) ? 0 : (n == 2) ? 1 : 2;                    // Russian & Serbo-Croatian                  case "be": // Belarusian                  case "bs": // Bosnian                  case "hr": // Croatian                  case "ru": // Russian                  case "sh": // Serbo-Croatian                  case "sr": // Serbian                  case "uk": // Ukrainian                      return (n' c) =>                          (n % 10 == 1) && !(n % 100 == 11) ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          2;                    // Unique:                    // Arabic                  case "ar":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          (n % 100).Between(3' 10) ? 3 : // few                          (n % 100).Between(11' 99) ? 4 : // many                          5; // other                    // Breton                  case "br":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5; // other                    // Czech                  case "cs":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Welsh                  case "cy":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5;                    // Manx                  case "gv":                      return (n' c) =>                          (n % 10).Between(1' 2) || (n % 20) == 0 ? 0 :  // one                          1;                    // Langi                  case "lag":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n > 0) && (n < 2) ? 1 : // one                          2;                    // Lithuanian                  case "lt":                      return (n' c) =>                          (n % 10) == 1 && !(n % 100).Between(11' 19) ? 0 : // one                          (n % 10).Between(2' 9) && !(n % 100).Between(11' 19) ? 1 : // few                          2;                    // Latvian                  case "lv":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n % 10) == 1 && (n % 100) != 11 ? 1 :                          2;                    // Macedonian                  case "mb":                      return (n' c) =>                          (n % 10) == 1 && n != 11 ? 0 : // one                          1;                    // Moldavian                  case "mo":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n != 1 && (n % 100).Between(1' 19)) ? 1 : // few                          2;                    // Maltese                  case "mt":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(2' 10) ? 1 : // few                          (n % 100).Between(11' 19) ? 2 : // many                          3;                    // Polish                  case "pl":                      return (n' c) =>                          n == 1 ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          (n % 10).Between(0' 1) || (n % 10).Between(5' 9) || (n % 100).Between(12' 14) ? 2 : // many                          3;                    // Romanian                  case "ro":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(1' 19) ? 1 : // few                          2;                    // Tachelhit                  case "shi":                      return (n' c) =>                          (n >= 0 && n <= 1) ? 0 : // one                          n.Between(2' 10) ? 1 : // few                          2;                    // Slovak                  case "sk":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Slovenian                  case "sl":                      return (n' c) =>                          (n % 100) == 1 ? 0 : // one                          (n % 100) == 2 ? 1 : // two                          (n % 100).Between(3' 4) ? 2 : // few                          3;                    // Central Morocco Tamazight                  case "tzm":                      return (n' c) =>                          n.Between(0' 1) || n.Between(11' 99) ? 0 : // one                          1;                      // Unknown language                  default:                      return null;              }
Magic Number,SmartFormat.Extensions,CommonLanguageRules,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\PluralLocalizationFormatter.cs,GetPluralRule,The following statement contains a magic number: switch (twoLetterISOLanguageName)              {                  // Singular                  case "az": // Azerbaijani                  case "bm": // Bambara                  case "bo": // Tibetan                  case "dz": // Dzongkha                  case "fa": // Persian                  case "hu": // Hungarian                  case "id": // Indonesian                  case "ig": // Igbo                  case "ii": // Sichuan Yi                  case "ja": // Japanese                  case "jv": // Javanese                  case "ka": // Georgian                  case "kde": // Makonde                  case "kea": // Kabuverdianu                  case "km": // Khmer                  case "kn": // Kannada                  case "ko": // Korean                  case "ms": // Malay                  case "my": // Burmese                  case "root": // Root (?)                  case "sah": // Sakha                  case "ses": // Koyraboro Senni                  case "sg": // Sango                  case "th": // Thai                  case "to": // Tonga                  case "vi": // Vietnamese                  case "wo": // Wolof                  case "yo": // Yoruba                  case "zh": // Chinese                      return (n' c) => 0;                    // Dual: one (n == 1)' other                  case "af": // Afrikaans                  case "bem": // Bembda                  case "bg": // Bulgarian                  case "bn": // Bengali                  case "brx": // Bodo                  case "ca": // Catalan                  case "cgg": // Chiga                  case "chr": // Cherokee                  case "da": // Danish                  case "de": // German                  case "dv": // Divehi                  case "ee": // Ewe                  case "el": // Greek                  case "en": // English                  case "eo": // Esperanto                  case "es": // Spanish                  case "et": // Estonian                  case "eu": // Basque                  case "fi": // Finnish                  case "fo": // Faroese                  case "fur": // Friulian                  case "fy": // Western Frisian                  case "gl": // Galician                  case "gsw": // Swiss German                  case "gu": // Gujarati                  case "ha": // Hausa                  case "haw": // Hawaiian                  case "he": // Hebrew                  case "is": // Icelandic                  case "it": // Italian                  case "kk": // Kazakh                  case "kl": // Kalaallisut                  case "ku": // Kurdish                  case "lb": // Luxembourgish                  case "lg": // Ganda                  case "lo": // Lao                  case "mas": // Masai                  case "ml": // Malayalam                  case "mn": // Mongolian                  case "mr": // Marathi                  case "nah": // Nahuatl                  case "nb": // Norwegian Bokmål                  case "ne": // Nepali                  case "nl": // Dutch                  case "nn": // Norwegian Nynorsk                  case "no": // Norwegian                  case "nyn": // Nyankole                  case "om": // Oromo                  case "or": // Oriya                  case "pa": // Punjabi                  case "pap": // Papiamento                  case "ps": // Pashto                  case "pt": // Portuguese                  case "rm": // Romansh                  case "saq": // Samburu                  case "so": // Somali                  case "sq": // Albanian                  case "ssy": // Saho                  case "sw": // Swahili                  case "sv": // Swedish                  case "syr": // Syriac                  case "ta": // Tamil                  case "te": // Telugu                  case "tk": // Turkmen                  case "tr": // Turkish                  case "ur": // Urdu                  case "wae": // Walser                  case "xog": // Soga                  case "zu": // Zulu                      return (n' c) =>                      {                          if (c == 2) return (n == 1) ? 0 : 1;                          if (c == 3) return (n == 0) ? 0 : (n == 1) ? 1 : 2;                          if (c == 4) return (n < 0) ? 0 : (n == 0) ? 1 : (n == 1) ? 2 : 3;                          return -1;                      };                    // DualWithZero: one (n == 0..1)' other                  case "ak": // Akan                  case "am": // Amharic                  case "bh": // Bihari                  case "fil": // Filipino                  case "guw": // Gun                  case "hi": // Hindi                  case "ln": // Lingala                  case "mg": // Malagasy                  case "nso": // Northern Sotho                  case "ti": // Tigrinya                  case "tl": // Tagalog                  case "wa": // Walloon                      return (n' c) => (n == 0 || n == 1) ? 0 : 1;                    // DualFromZeroToTwo: one (n == 0..2 fractionate and n != 2)' other                  case "ff": // Fulah                  case "fr": // French                  case "kab": // Kabyle                      return (n' c) => (n >= 0 && n < 2) ? 0 : 1;                    // Triple: one (n == 1)' two (n == 2)' other                  case "ga": // Irish                  case "iu": // Inuktitut                  case "ksh": // Colognian                  case "kw": // Cornish                  case "se": // Northern Sami                  case "sma": // Southern Sami                  case "smi": // Sami language                  case "smj": // Lule Sami                  case "smn": // Inari Sami                  case "sms": // Skolt Sami                      return (n' c) => (n == 1) ? 0 : (n == 2) ? 1 : 2;                    // Russian & Serbo-Croatian                  case "be": // Belarusian                  case "bs": // Bosnian                  case "hr": // Croatian                  case "ru": // Russian                  case "sh": // Serbo-Croatian                  case "sr": // Serbian                  case "uk": // Ukrainian                      return (n' c) =>                          (n % 10 == 1) && !(n % 100 == 11) ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          2;                    // Unique:                    // Arabic                  case "ar":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          (n % 100).Between(3' 10) ? 3 : // few                          (n % 100).Between(11' 99) ? 4 : // many                          5; // other                    // Breton                  case "br":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5; // other                    // Czech                  case "cs":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Welsh                  case "cy":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5;                    // Manx                  case "gv":                      return (n' c) =>                          (n % 10).Between(1' 2) || (n % 20) == 0 ? 0 :  // one                          1;                    // Langi                  case "lag":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n > 0) && (n < 2) ? 1 : // one                          2;                    // Lithuanian                  case "lt":                      return (n' c) =>                          (n % 10) == 1 && !(n % 100).Between(11' 19) ? 0 : // one                          (n % 10).Between(2' 9) && !(n % 100).Between(11' 19) ? 1 : // few                          2;                    // Latvian                  case "lv":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n % 10) == 1 && (n % 100) != 11 ? 1 :                          2;                    // Macedonian                  case "mb":                      return (n' c) =>                          (n % 10) == 1 && n != 11 ? 0 : // one                          1;                    // Moldavian                  case "mo":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n != 1 && (n % 100).Between(1' 19)) ? 1 : // few                          2;                    // Maltese                  case "mt":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(2' 10) ? 1 : // few                          (n % 100).Between(11' 19) ? 2 : // many                          3;                    // Polish                  case "pl":                      return (n' c) =>                          n == 1 ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          (n % 10).Between(0' 1) || (n % 10).Between(5' 9) || (n % 100).Between(12' 14) ? 2 : // many                          3;                    // Romanian                  case "ro":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(1' 19) ? 1 : // few                          2;                    // Tachelhit                  case "shi":                      return (n' c) =>                          (n >= 0 && n <= 1) ? 0 : // one                          n.Between(2' 10) ? 1 : // few                          2;                    // Slovak                  case "sk":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Slovenian                  case "sl":                      return (n' c) =>                          (n % 100) == 1 ? 0 : // one                          (n % 100) == 2 ? 1 : // two                          (n % 100).Between(3' 4) ? 2 : // few                          3;                    // Central Morocco Tamazight                  case "tzm":                      return (n' c) =>                          n.Between(0' 1) || n.Between(11' 99) ? 0 : // one                          1;                      // Unknown language                  default:                      return null;              }
Magic Number,SmartFormat.Extensions,CommonLanguageRules,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\PluralLocalizationFormatter.cs,GetPluralRule,The following statement contains a magic number: switch (twoLetterISOLanguageName)              {                  // Singular                  case "az": // Azerbaijani                  case "bm": // Bambara                  case "bo": // Tibetan                  case "dz": // Dzongkha                  case "fa": // Persian                  case "hu": // Hungarian                  case "id": // Indonesian                  case "ig": // Igbo                  case "ii": // Sichuan Yi                  case "ja": // Japanese                  case "jv": // Javanese                  case "ka": // Georgian                  case "kde": // Makonde                  case "kea": // Kabuverdianu                  case "km": // Khmer                  case "kn": // Kannada                  case "ko": // Korean                  case "ms": // Malay                  case "my": // Burmese                  case "root": // Root (?)                  case "sah": // Sakha                  case "ses": // Koyraboro Senni                  case "sg": // Sango                  case "th": // Thai                  case "to": // Tonga                  case "vi": // Vietnamese                  case "wo": // Wolof                  case "yo": // Yoruba                  case "zh": // Chinese                      return (n' c) => 0;                    // Dual: one (n == 1)' other                  case "af": // Afrikaans                  case "bem": // Bembda                  case "bg": // Bulgarian                  case "bn": // Bengali                  case "brx": // Bodo                  case "ca": // Catalan                  case "cgg": // Chiga                  case "chr": // Cherokee                  case "da": // Danish                  case "de": // German                  case "dv": // Divehi                  case "ee": // Ewe                  case "el": // Greek                  case "en": // English                  case "eo": // Esperanto                  case "es": // Spanish                  case "et": // Estonian                  case "eu": // Basque                  case "fi": // Finnish                  case "fo": // Faroese                  case "fur": // Friulian                  case "fy": // Western Frisian                  case "gl": // Galician                  case "gsw": // Swiss German                  case "gu": // Gujarati                  case "ha": // Hausa                  case "haw": // Hawaiian                  case "he": // Hebrew                  case "is": // Icelandic                  case "it": // Italian                  case "kk": // Kazakh                  case "kl": // Kalaallisut                  case "ku": // Kurdish                  case "lb": // Luxembourgish                  case "lg": // Ganda                  case "lo": // Lao                  case "mas": // Masai                  case "ml": // Malayalam                  case "mn": // Mongolian                  case "mr": // Marathi                  case "nah": // Nahuatl                  case "nb": // Norwegian Bokmål                  case "ne": // Nepali                  case "nl": // Dutch                  case "nn": // Norwegian Nynorsk                  case "no": // Norwegian                  case "nyn": // Nyankole                  case "om": // Oromo                  case "or": // Oriya                  case "pa": // Punjabi                  case "pap": // Papiamento                  case "ps": // Pashto                  case "pt": // Portuguese                  case "rm": // Romansh                  case "saq": // Samburu                  case "so": // Somali                  case "sq": // Albanian                  case "ssy": // Saho                  case "sw": // Swahili                  case "sv": // Swedish                  case "syr": // Syriac                  case "ta": // Tamil                  case "te": // Telugu                  case "tk": // Turkmen                  case "tr": // Turkish                  case "ur": // Urdu                  case "wae": // Walser                  case "xog": // Soga                  case "zu": // Zulu                      return (n' c) =>                      {                          if (c == 2) return (n == 1) ? 0 : 1;                          if (c == 3) return (n == 0) ? 0 : (n == 1) ? 1 : 2;                          if (c == 4) return (n < 0) ? 0 : (n == 0) ? 1 : (n == 1) ? 2 : 3;                          return -1;                      };                    // DualWithZero: one (n == 0..1)' other                  case "ak": // Akan                  case "am": // Amharic                  case "bh": // Bihari                  case "fil": // Filipino                  case "guw": // Gun                  case "hi": // Hindi                  case "ln": // Lingala                  case "mg": // Malagasy                  case "nso": // Northern Sotho                  case "ti": // Tigrinya                  case "tl": // Tagalog                  case "wa": // Walloon                      return (n' c) => (n == 0 || n == 1) ? 0 : 1;                    // DualFromZeroToTwo: one (n == 0..2 fractionate and n != 2)' other                  case "ff": // Fulah                  case "fr": // French                  case "kab": // Kabyle                      return (n' c) => (n >= 0 && n < 2) ? 0 : 1;                    // Triple: one (n == 1)' two (n == 2)' other                  case "ga": // Irish                  case "iu": // Inuktitut                  case "ksh": // Colognian                  case "kw": // Cornish                  case "se": // Northern Sami                  case "sma": // Southern Sami                  case "smi": // Sami language                  case "smj": // Lule Sami                  case "smn": // Inari Sami                  case "sms": // Skolt Sami                      return (n' c) => (n == 1) ? 0 : (n == 2) ? 1 : 2;                    // Russian & Serbo-Croatian                  case "be": // Belarusian                  case "bs": // Bosnian                  case "hr": // Croatian                  case "ru": // Russian                  case "sh": // Serbo-Croatian                  case "sr": // Serbian                  case "uk": // Ukrainian                      return (n' c) =>                          (n % 10 == 1) && !(n % 100 == 11) ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          2;                    // Unique:                    // Arabic                  case "ar":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          (n % 100).Between(3' 10) ? 3 : // few                          (n % 100).Between(11' 99) ? 4 : // many                          5; // other                    // Breton                  case "br":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5; // other                    // Czech                  case "cs":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Welsh                  case "cy":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5;                    // Manx                  case "gv":                      return (n' c) =>                          (n % 10).Between(1' 2) || (n % 20) == 0 ? 0 :  // one                          1;                    // Langi                  case "lag":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n > 0) && (n < 2) ? 1 : // one                          2;                    // Lithuanian                  case "lt":                      return (n' c) =>                          (n % 10) == 1 && !(n % 100).Between(11' 19) ? 0 : // one                          (n % 10).Between(2' 9) && !(n % 100).Between(11' 19) ? 1 : // few                          2;                    // Latvian                  case "lv":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n % 10) == 1 && (n % 100) != 11 ? 1 :                          2;                    // Macedonian                  case "mb":                      return (n' c) =>                          (n % 10) == 1 && n != 11 ? 0 : // one                          1;                    // Moldavian                  case "mo":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n != 1 && (n % 100).Between(1' 19)) ? 1 : // few                          2;                    // Maltese                  case "mt":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(2' 10) ? 1 : // few                          (n % 100).Between(11' 19) ? 2 : // many                          3;                    // Polish                  case "pl":                      return (n' c) =>                          n == 1 ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          (n % 10).Between(0' 1) || (n % 10).Between(5' 9) || (n % 100).Between(12' 14) ? 2 : // many                          3;                    // Romanian                  case "ro":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(1' 19) ? 1 : // few                          2;                    // Tachelhit                  case "shi":                      return (n' c) =>                          (n >= 0 && n <= 1) ? 0 : // one                          n.Between(2' 10) ? 1 : // few                          2;                    // Slovak                  case "sk":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Slovenian                  case "sl":                      return (n' c) =>                          (n % 100) == 1 ? 0 : // one                          (n % 100) == 2 ? 1 : // two                          (n % 100).Between(3' 4) ? 2 : // few                          3;                    // Central Morocco Tamazight                  case "tzm":                      return (n' c) =>                          n.Between(0' 1) || n.Between(11' 99) ? 0 : // one                          1;                      // Unknown language                  default:                      return null;              }
Magic Number,SmartFormat.Extensions,CommonLanguageRules,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\PluralLocalizationFormatter.cs,GetPluralRule,The following statement contains a magic number: switch (twoLetterISOLanguageName)              {                  // Singular                  case "az": // Azerbaijani                  case "bm": // Bambara                  case "bo": // Tibetan                  case "dz": // Dzongkha                  case "fa": // Persian                  case "hu": // Hungarian                  case "id": // Indonesian                  case "ig": // Igbo                  case "ii": // Sichuan Yi                  case "ja": // Japanese                  case "jv": // Javanese                  case "ka": // Georgian                  case "kde": // Makonde                  case "kea": // Kabuverdianu                  case "km": // Khmer                  case "kn": // Kannada                  case "ko": // Korean                  case "ms": // Malay                  case "my": // Burmese                  case "root": // Root (?)                  case "sah": // Sakha                  case "ses": // Koyraboro Senni                  case "sg": // Sango                  case "th": // Thai                  case "to": // Tonga                  case "vi": // Vietnamese                  case "wo": // Wolof                  case "yo": // Yoruba                  case "zh": // Chinese                      return (n' c) => 0;                    // Dual: one (n == 1)' other                  case "af": // Afrikaans                  case "bem": // Bembda                  case "bg": // Bulgarian                  case "bn": // Bengali                  case "brx": // Bodo                  case "ca": // Catalan                  case "cgg": // Chiga                  case "chr": // Cherokee                  case "da": // Danish                  case "de": // German                  case "dv": // Divehi                  case "ee": // Ewe                  case "el": // Greek                  case "en": // English                  case "eo": // Esperanto                  case "es": // Spanish                  case "et": // Estonian                  case "eu": // Basque                  case "fi": // Finnish                  case "fo": // Faroese                  case "fur": // Friulian                  case "fy": // Western Frisian                  case "gl": // Galician                  case "gsw": // Swiss German                  case "gu": // Gujarati                  case "ha": // Hausa                  case "haw": // Hawaiian                  case "he": // Hebrew                  case "is": // Icelandic                  case "it": // Italian                  case "kk": // Kazakh                  case "kl": // Kalaallisut                  case "ku": // Kurdish                  case "lb": // Luxembourgish                  case "lg": // Ganda                  case "lo": // Lao                  case "mas": // Masai                  case "ml": // Malayalam                  case "mn": // Mongolian                  case "mr": // Marathi                  case "nah": // Nahuatl                  case "nb": // Norwegian Bokmål                  case "ne": // Nepali                  case "nl": // Dutch                  case "nn": // Norwegian Nynorsk                  case "no": // Norwegian                  case "nyn": // Nyankole                  case "om": // Oromo                  case "or": // Oriya                  case "pa": // Punjabi                  case "pap": // Papiamento                  case "ps": // Pashto                  case "pt": // Portuguese                  case "rm": // Romansh                  case "saq": // Samburu                  case "so": // Somali                  case "sq": // Albanian                  case "ssy": // Saho                  case "sw": // Swahili                  case "sv": // Swedish                  case "syr": // Syriac                  case "ta": // Tamil                  case "te": // Telugu                  case "tk": // Turkmen                  case "tr": // Turkish                  case "ur": // Urdu                  case "wae": // Walser                  case "xog": // Soga                  case "zu": // Zulu                      return (n' c) =>                      {                          if (c == 2) return (n == 1) ? 0 : 1;                          if (c == 3) return (n == 0) ? 0 : (n == 1) ? 1 : 2;                          if (c == 4) return (n < 0) ? 0 : (n == 0) ? 1 : (n == 1) ? 2 : 3;                          return -1;                      };                    // DualWithZero: one (n == 0..1)' other                  case "ak": // Akan                  case "am": // Amharic                  case "bh": // Bihari                  case "fil": // Filipino                  case "guw": // Gun                  case "hi": // Hindi                  case "ln": // Lingala                  case "mg": // Malagasy                  case "nso": // Northern Sotho                  case "ti": // Tigrinya                  case "tl": // Tagalog                  case "wa": // Walloon                      return (n' c) => (n == 0 || n == 1) ? 0 : 1;                    // DualFromZeroToTwo: one (n == 0..2 fractionate and n != 2)' other                  case "ff": // Fulah                  case "fr": // French                  case "kab": // Kabyle                      return (n' c) => (n >= 0 && n < 2) ? 0 : 1;                    // Triple: one (n == 1)' two (n == 2)' other                  case "ga": // Irish                  case "iu": // Inuktitut                  case "ksh": // Colognian                  case "kw": // Cornish                  case "se": // Northern Sami                  case "sma": // Southern Sami                  case "smi": // Sami language                  case "smj": // Lule Sami                  case "smn": // Inari Sami                  case "sms": // Skolt Sami                      return (n' c) => (n == 1) ? 0 : (n == 2) ? 1 : 2;                    // Russian & Serbo-Croatian                  case "be": // Belarusian                  case "bs": // Bosnian                  case "hr": // Croatian                  case "ru": // Russian                  case "sh": // Serbo-Croatian                  case "sr": // Serbian                  case "uk": // Ukrainian                      return (n' c) =>                          (n % 10 == 1) && !(n % 100 == 11) ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          2;                    // Unique:                    // Arabic                  case "ar":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          (n % 100).Between(3' 10) ? 3 : // few                          (n % 100).Between(11' 99) ? 4 : // many                          5; // other                    // Breton                  case "br":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5; // other                    // Czech                  case "cs":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Welsh                  case "cy":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5;                    // Manx                  case "gv":                      return (n' c) =>                          (n % 10).Between(1' 2) || (n % 20) == 0 ? 0 :  // one                          1;                    // Langi                  case "lag":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n > 0) && (n < 2) ? 1 : // one                          2;                    // Lithuanian                  case "lt":                      return (n' c) =>                          (n % 10) == 1 && !(n % 100).Between(11' 19) ? 0 : // one                          (n % 10).Between(2' 9) && !(n % 100).Between(11' 19) ? 1 : // few                          2;                    // Latvian                  case "lv":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n % 10) == 1 && (n % 100) != 11 ? 1 :                          2;                    // Macedonian                  case "mb":                      return (n' c) =>                          (n % 10) == 1 && n != 11 ? 0 : // one                          1;                    // Moldavian                  case "mo":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n != 1 && (n % 100).Between(1' 19)) ? 1 : // few                          2;                    // Maltese                  case "mt":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(2' 10) ? 1 : // few                          (n % 100).Between(11' 19) ? 2 : // many                          3;                    // Polish                  case "pl":                      return (n' c) =>                          n == 1 ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          (n % 10).Between(0' 1) || (n % 10).Between(5' 9) || (n % 100).Between(12' 14) ? 2 : // many                          3;                    // Romanian                  case "ro":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(1' 19) ? 1 : // few                          2;                    // Tachelhit                  case "shi":                      return (n' c) =>                          (n >= 0 && n <= 1) ? 0 : // one                          n.Between(2' 10) ? 1 : // few                          2;                    // Slovak                  case "sk":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Slovenian                  case "sl":                      return (n' c) =>                          (n % 100) == 1 ? 0 : // one                          (n % 100) == 2 ? 1 : // two                          (n % 100).Between(3' 4) ? 2 : // few                          3;                    // Central Morocco Tamazight                  case "tzm":                      return (n' c) =>                          n.Between(0' 1) || n.Between(11' 99) ? 0 : // one                          1;                      // Unknown language                  default:                      return null;              }
Magic Number,SmartFormat.Extensions,CommonLanguageRules,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\PluralLocalizationFormatter.cs,GetPluralRule,The following statement contains a magic number: switch (twoLetterISOLanguageName)              {                  // Singular                  case "az": // Azerbaijani                  case "bm": // Bambara                  case "bo": // Tibetan                  case "dz": // Dzongkha                  case "fa": // Persian                  case "hu": // Hungarian                  case "id": // Indonesian                  case "ig": // Igbo                  case "ii": // Sichuan Yi                  case "ja": // Japanese                  case "jv": // Javanese                  case "ka": // Georgian                  case "kde": // Makonde                  case "kea": // Kabuverdianu                  case "km": // Khmer                  case "kn": // Kannada                  case "ko": // Korean                  case "ms": // Malay                  case "my": // Burmese                  case "root": // Root (?)                  case "sah": // Sakha                  case "ses": // Koyraboro Senni                  case "sg": // Sango                  case "th": // Thai                  case "to": // Tonga                  case "vi": // Vietnamese                  case "wo": // Wolof                  case "yo": // Yoruba                  case "zh": // Chinese                      return (n' c) => 0;                    // Dual: one (n == 1)' other                  case "af": // Afrikaans                  case "bem": // Bembda                  case "bg": // Bulgarian                  case "bn": // Bengali                  case "brx": // Bodo                  case "ca": // Catalan                  case "cgg": // Chiga                  case "chr": // Cherokee                  case "da": // Danish                  case "de": // German                  case "dv": // Divehi                  case "ee": // Ewe                  case "el": // Greek                  case "en": // English                  case "eo": // Esperanto                  case "es": // Spanish                  case "et": // Estonian                  case "eu": // Basque                  case "fi": // Finnish                  case "fo": // Faroese                  case "fur": // Friulian                  case "fy": // Western Frisian                  case "gl": // Galician                  case "gsw": // Swiss German                  case "gu": // Gujarati                  case "ha": // Hausa                  case "haw": // Hawaiian                  case "he": // Hebrew                  case "is": // Icelandic                  case "it": // Italian                  case "kk": // Kazakh                  case "kl": // Kalaallisut                  case "ku": // Kurdish                  case "lb": // Luxembourgish                  case "lg": // Ganda                  case "lo": // Lao                  case "mas": // Masai                  case "ml": // Malayalam                  case "mn": // Mongolian                  case "mr": // Marathi                  case "nah": // Nahuatl                  case "nb": // Norwegian Bokmål                  case "ne": // Nepali                  case "nl": // Dutch                  case "nn": // Norwegian Nynorsk                  case "no": // Norwegian                  case "nyn": // Nyankole                  case "om": // Oromo                  case "or": // Oriya                  case "pa": // Punjabi                  case "pap": // Papiamento                  case "ps": // Pashto                  case "pt": // Portuguese                  case "rm": // Romansh                  case "saq": // Samburu                  case "so": // Somali                  case "sq": // Albanian                  case "ssy": // Saho                  case "sw": // Swahili                  case "sv": // Swedish                  case "syr": // Syriac                  case "ta": // Tamil                  case "te": // Telugu                  case "tk": // Turkmen                  case "tr": // Turkish                  case "ur": // Urdu                  case "wae": // Walser                  case "xog": // Soga                  case "zu": // Zulu                      return (n' c) =>                      {                          if (c == 2) return (n == 1) ? 0 : 1;                          if (c == 3) return (n == 0) ? 0 : (n == 1) ? 1 : 2;                          if (c == 4) return (n < 0) ? 0 : (n == 0) ? 1 : (n == 1) ? 2 : 3;                          return -1;                      };                    // DualWithZero: one (n == 0..1)' other                  case "ak": // Akan                  case "am": // Amharic                  case "bh": // Bihari                  case "fil": // Filipino                  case "guw": // Gun                  case "hi": // Hindi                  case "ln": // Lingala                  case "mg": // Malagasy                  case "nso": // Northern Sotho                  case "ti": // Tigrinya                  case "tl": // Tagalog                  case "wa": // Walloon                      return (n' c) => (n == 0 || n == 1) ? 0 : 1;                    // DualFromZeroToTwo: one (n == 0..2 fractionate and n != 2)' other                  case "ff": // Fulah                  case "fr": // French                  case "kab": // Kabyle                      return (n' c) => (n >= 0 && n < 2) ? 0 : 1;                    // Triple: one (n == 1)' two (n == 2)' other                  case "ga": // Irish                  case "iu": // Inuktitut                  case "ksh": // Colognian                  case "kw": // Cornish                  case "se": // Northern Sami                  case "sma": // Southern Sami                  case "smi": // Sami language                  case "smj": // Lule Sami                  case "smn": // Inari Sami                  case "sms": // Skolt Sami                      return (n' c) => (n == 1) ? 0 : (n == 2) ? 1 : 2;                    // Russian & Serbo-Croatian                  case "be": // Belarusian                  case "bs": // Bosnian                  case "hr": // Croatian                  case "ru": // Russian                  case "sh": // Serbo-Croatian                  case "sr": // Serbian                  case "uk": // Ukrainian                      return (n' c) =>                          (n % 10 == 1) && !(n % 100 == 11) ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          2;                    // Unique:                    // Arabic                  case "ar":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          (n % 100).Between(3' 10) ? 3 : // few                          (n % 100).Between(11' 99) ? 4 : // many                          5; // other                    // Breton                  case "br":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5; // other                    // Czech                  case "cs":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Welsh                  case "cy":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5;                    // Manx                  case "gv":                      return (n' c) =>                          (n % 10).Between(1' 2) || (n % 20) == 0 ? 0 :  // one                          1;                    // Langi                  case "lag":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n > 0) && (n < 2) ? 1 : // one                          2;                    // Lithuanian                  case "lt":                      return (n' c) =>                          (n % 10) == 1 && !(n % 100).Between(11' 19) ? 0 : // one                          (n % 10).Between(2' 9) && !(n % 100).Between(11' 19) ? 1 : // few                          2;                    // Latvian                  case "lv":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n % 10) == 1 && (n % 100) != 11 ? 1 :                          2;                    // Macedonian                  case "mb":                      return (n' c) =>                          (n % 10) == 1 && n != 11 ? 0 : // one                          1;                    // Moldavian                  case "mo":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n != 1 && (n % 100).Between(1' 19)) ? 1 : // few                          2;                    // Maltese                  case "mt":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(2' 10) ? 1 : // few                          (n % 100).Between(11' 19) ? 2 : // many                          3;                    // Polish                  case "pl":                      return (n' c) =>                          n == 1 ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          (n % 10).Between(0' 1) || (n % 10).Between(5' 9) || (n % 100).Between(12' 14) ? 2 : // many                          3;                    // Romanian                  case "ro":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(1' 19) ? 1 : // few                          2;                    // Tachelhit                  case "shi":                      return (n' c) =>                          (n >= 0 && n <= 1) ? 0 : // one                          n.Between(2' 10) ? 1 : // few                          2;                    // Slovak                  case "sk":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Slovenian                  case "sl":                      return (n' c) =>                          (n % 100) == 1 ? 0 : // one                          (n % 100) == 2 ? 1 : // two                          (n % 100).Between(3' 4) ? 2 : // few                          3;                    // Central Morocco Tamazight                  case "tzm":                      return (n' c) =>                          n.Between(0' 1) || n.Between(11' 99) ? 0 : // one                          1;                      // Unknown language                  default:                      return null;              }
Magic Number,SmartFormat.Extensions,CommonLanguageRules,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\PluralLocalizationFormatter.cs,GetPluralRule,The following statement contains a magic number: switch (twoLetterISOLanguageName)              {                  // Singular                  case "az": // Azerbaijani                  case "bm": // Bambara                  case "bo": // Tibetan                  case "dz": // Dzongkha                  case "fa": // Persian                  case "hu": // Hungarian                  case "id": // Indonesian                  case "ig": // Igbo                  case "ii": // Sichuan Yi                  case "ja": // Japanese                  case "jv": // Javanese                  case "ka": // Georgian                  case "kde": // Makonde                  case "kea": // Kabuverdianu                  case "km": // Khmer                  case "kn": // Kannada                  case "ko": // Korean                  case "ms": // Malay                  case "my": // Burmese                  case "root": // Root (?)                  case "sah": // Sakha                  case "ses": // Koyraboro Senni                  case "sg": // Sango                  case "th": // Thai                  case "to": // Tonga                  case "vi": // Vietnamese                  case "wo": // Wolof                  case "yo": // Yoruba                  case "zh": // Chinese                      return (n' c) => 0;                    // Dual: one (n == 1)' other                  case "af": // Afrikaans                  case "bem": // Bembda                  case "bg": // Bulgarian                  case "bn": // Bengali                  case "brx": // Bodo                  case "ca": // Catalan                  case "cgg": // Chiga                  case "chr": // Cherokee                  case "da": // Danish                  case "de": // German                  case "dv": // Divehi                  case "ee": // Ewe                  case "el": // Greek                  case "en": // English                  case "eo": // Esperanto                  case "es": // Spanish                  case "et": // Estonian                  case "eu": // Basque                  case "fi": // Finnish                  case "fo": // Faroese                  case "fur": // Friulian                  case "fy": // Western Frisian                  case "gl": // Galician                  case "gsw": // Swiss German                  case "gu": // Gujarati                  case "ha": // Hausa                  case "haw": // Hawaiian                  case "he": // Hebrew                  case "is": // Icelandic                  case "it": // Italian                  case "kk": // Kazakh                  case "kl": // Kalaallisut                  case "ku": // Kurdish                  case "lb": // Luxembourgish                  case "lg": // Ganda                  case "lo": // Lao                  case "mas": // Masai                  case "ml": // Malayalam                  case "mn": // Mongolian                  case "mr": // Marathi                  case "nah": // Nahuatl                  case "nb": // Norwegian Bokmål                  case "ne": // Nepali                  case "nl": // Dutch                  case "nn": // Norwegian Nynorsk                  case "no": // Norwegian                  case "nyn": // Nyankole                  case "om": // Oromo                  case "or": // Oriya                  case "pa": // Punjabi                  case "pap": // Papiamento                  case "ps": // Pashto                  case "pt": // Portuguese                  case "rm": // Romansh                  case "saq": // Samburu                  case "so": // Somali                  case "sq": // Albanian                  case "ssy": // Saho                  case "sw": // Swahili                  case "sv": // Swedish                  case "syr": // Syriac                  case "ta": // Tamil                  case "te": // Telugu                  case "tk": // Turkmen                  case "tr": // Turkish                  case "ur": // Urdu                  case "wae": // Walser                  case "xog": // Soga                  case "zu": // Zulu                      return (n' c) =>                      {                          if (c == 2) return (n == 1) ? 0 : 1;                          if (c == 3) return (n == 0) ? 0 : (n == 1) ? 1 : 2;                          if (c == 4) return (n < 0) ? 0 : (n == 0) ? 1 : (n == 1) ? 2 : 3;                          return -1;                      };                    // DualWithZero: one (n == 0..1)' other                  case "ak": // Akan                  case "am": // Amharic                  case "bh": // Bihari                  case "fil": // Filipino                  case "guw": // Gun                  case "hi": // Hindi                  case "ln": // Lingala                  case "mg": // Malagasy                  case "nso": // Northern Sotho                  case "ti": // Tigrinya                  case "tl": // Tagalog                  case "wa": // Walloon                      return (n' c) => (n == 0 || n == 1) ? 0 : 1;                    // DualFromZeroToTwo: one (n == 0..2 fractionate and n != 2)' other                  case "ff": // Fulah                  case "fr": // French                  case "kab": // Kabyle                      return (n' c) => (n >= 0 && n < 2) ? 0 : 1;                    // Triple: one (n == 1)' two (n == 2)' other                  case "ga": // Irish                  case "iu": // Inuktitut                  case "ksh": // Colognian                  case "kw": // Cornish                  case "se": // Northern Sami                  case "sma": // Southern Sami                  case "smi": // Sami language                  case "smj": // Lule Sami                  case "smn": // Inari Sami                  case "sms": // Skolt Sami                      return (n' c) => (n == 1) ? 0 : (n == 2) ? 1 : 2;                    // Russian & Serbo-Croatian                  case "be": // Belarusian                  case "bs": // Bosnian                  case "hr": // Croatian                  case "ru": // Russian                  case "sh": // Serbo-Croatian                  case "sr": // Serbian                  case "uk": // Ukrainian                      return (n' c) =>                          (n % 10 == 1) && !(n % 100 == 11) ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          2;                    // Unique:                    // Arabic                  case "ar":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          (n % 100).Between(3' 10) ? 3 : // few                          (n % 100).Between(11' 99) ? 4 : // many                          5; // other                    // Breton                  case "br":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5; // other                    // Czech                  case "cs":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Welsh                  case "cy":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5;                    // Manx                  case "gv":                      return (n' c) =>                          (n % 10).Between(1' 2) || (n % 20) == 0 ? 0 :  // one                          1;                    // Langi                  case "lag":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n > 0) && (n < 2) ? 1 : // one                          2;                    // Lithuanian                  case "lt":                      return (n' c) =>                          (n % 10) == 1 && !(n % 100).Between(11' 19) ? 0 : // one                          (n % 10).Between(2' 9) && !(n % 100).Between(11' 19) ? 1 : // few                          2;                    // Latvian                  case "lv":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n % 10) == 1 && (n % 100) != 11 ? 1 :                          2;                    // Macedonian                  case "mb":                      return (n' c) =>                          (n % 10) == 1 && n != 11 ? 0 : // one                          1;                    // Moldavian                  case "mo":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n != 1 && (n % 100).Between(1' 19)) ? 1 : // few                          2;                    // Maltese                  case "mt":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(2' 10) ? 1 : // few                          (n % 100).Between(11' 19) ? 2 : // many                          3;                    // Polish                  case "pl":                      return (n' c) =>                          n == 1 ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          (n % 10).Between(0' 1) || (n % 10).Between(5' 9) || (n % 100).Between(12' 14) ? 2 : // many                          3;                    // Romanian                  case "ro":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(1' 19) ? 1 : // few                          2;                    // Tachelhit                  case "shi":                      return (n' c) =>                          (n >= 0 && n <= 1) ? 0 : // one                          n.Between(2' 10) ? 1 : // few                          2;                    // Slovak                  case "sk":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Slovenian                  case "sl":                      return (n' c) =>                          (n % 100) == 1 ? 0 : // one                          (n % 100) == 2 ? 1 : // two                          (n % 100).Between(3' 4) ? 2 : // few                          3;                    // Central Morocco Tamazight                  case "tzm":                      return (n' c) =>                          n.Between(0' 1) || n.Between(11' 99) ? 0 : // one                          1;                      // Unknown language                  default:                      return null;              }
Magic Number,SmartFormat.Extensions,CommonLanguageRules,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\PluralLocalizationFormatter.cs,GetPluralRule,The following statement contains a magic number: switch (twoLetterISOLanguageName)              {                  // Singular                  case "az": // Azerbaijani                  case "bm": // Bambara                  case "bo": // Tibetan                  case "dz": // Dzongkha                  case "fa": // Persian                  case "hu": // Hungarian                  case "id": // Indonesian                  case "ig": // Igbo                  case "ii": // Sichuan Yi                  case "ja": // Japanese                  case "jv": // Javanese                  case "ka": // Georgian                  case "kde": // Makonde                  case "kea": // Kabuverdianu                  case "km": // Khmer                  case "kn": // Kannada                  case "ko": // Korean                  case "ms": // Malay                  case "my": // Burmese                  case "root": // Root (?)                  case "sah": // Sakha                  case "ses": // Koyraboro Senni                  case "sg": // Sango                  case "th": // Thai                  case "to": // Tonga                  case "vi": // Vietnamese                  case "wo": // Wolof                  case "yo": // Yoruba                  case "zh": // Chinese                      return (n' c) => 0;                    // Dual: one (n == 1)' other                  case "af": // Afrikaans                  case "bem": // Bembda                  case "bg": // Bulgarian                  case "bn": // Bengali                  case "brx": // Bodo                  case "ca": // Catalan                  case "cgg": // Chiga                  case "chr": // Cherokee                  case "da": // Danish                  case "de": // German                  case "dv": // Divehi                  case "ee": // Ewe                  case "el": // Greek                  case "en": // English                  case "eo": // Esperanto                  case "es": // Spanish                  case "et": // Estonian                  case "eu": // Basque                  case "fi": // Finnish                  case "fo": // Faroese                  case "fur": // Friulian                  case "fy": // Western Frisian                  case "gl": // Galician                  case "gsw": // Swiss German                  case "gu": // Gujarati                  case "ha": // Hausa                  case "haw": // Hawaiian                  case "he": // Hebrew                  case "is": // Icelandic                  case "it": // Italian                  case "kk": // Kazakh                  case "kl": // Kalaallisut                  case "ku": // Kurdish                  case "lb": // Luxembourgish                  case "lg": // Ganda                  case "lo": // Lao                  case "mas": // Masai                  case "ml": // Malayalam                  case "mn": // Mongolian                  case "mr": // Marathi                  case "nah": // Nahuatl                  case "nb": // Norwegian Bokmål                  case "ne": // Nepali                  case "nl": // Dutch                  case "nn": // Norwegian Nynorsk                  case "no": // Norwegian                  case "nyn": // Nyankole                  case "om": // Oromo                  case "or": // Oriya                  case "pa": // Punjabi                  case "pap": // Papiamento                  case "ps": // Pashto                  case "pt": // Portuguese                  case "rm": // Romansh                  case "saq": // Samburu                  case "so": // Somali                  case "sq": // Albanian                  case "ssy": // Saho                  case "sw": // Swahili                  case "sv": // Swedish                  case "syr": // Syriac                  case "ta": // Tamil                  case "te": // Telugu                  case "tk": // Turkmen                  case "tr": // Turkish                  case "ur": // Urdu                  case "wae": // Walser                  case "xog": // Soga                  case "zu": // Zulu                      return (n' c) =>                      {                          if (c == 2) return (n == 1) ? 0 : 1;                          if (c == 3) return (n == 0) ? 0 : (n == 1) ? 1 : 2;                          if (c == 4) return (n < 0) ? 0 : (n == 0) ? 1 : (n == 1) ? 2 : 3;                          return -1;                      };                    // DualWithZero: one (n == 0..1)' other                  case "ak": // Akan                  case "am": // Amharic                  case "bh": // Bihari                  case "fil": // Filipino                  case "guw": // Gun                  case "hi": // Hindi                  case "ln": // Lingala                  case "mg": // Malagasy                  case "nso": // Northern Sotho                  case "ti": // Tigrinya                  case "tl": // Tagalog                  case "wa": // Walloon                      return (n' c) => (n == 0 || n == 1) ? 0 : 1;                    // DualFromZeroToTwo: one (n == 0..2 fractionate and n != 2)' other                  case "ff": // Fulah                  case "fr": // French                  case "kab": // Kabyle                      return (n' c) => (n >= 0 && n < 2) ? 0 : 1;                    // Triple: one (n == 1)' two (n == 2)' other                  case "ga": // Irish                  case "iu": // Inuktitut                  case "ksh": // Colognian                  case "kw": // Cornish                  case "se": // Northern Sami                  case "sma": // Southern Sami                  case "smi": // Sami language                  case "smj": // Lule Sami                  case "smn": // Inari Sami                  case "sms": // Skolt Sami                      return (n' c) => (n == 1) ? 0 : (n == 2) ? 1 : 2;                    // Russian & Serbo-Croatian                  case "be": // Belarusian                  case "bs": // Bosnian                  case "hr": // Croatian                  case "ru": // Russian                  case "sh": // Serbo-Croatian                  case "sr": // Serbian                  case "uk": // Ukrainian                      return (n' c) =>                          (n % 10 == 1) && !(n % 100 == 11) ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          2;                    // Unique:                    // Arabic                  case "ar":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          (n % 100).Between(3' 10) ? 3 : // few                          (n % 100).Between(11' 99) ? 4 : // many                          5; // other                    // Breton                  case "br":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5; // other                    // Czech                  case "cs":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Welsh                  case "cy":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5;                    // Manx                  case "gv":                      return (n' c) =>                          (n % 10).Between(1' 2) || (n % 20) == 0 ? 0 :  // one                          1;                    // Langi                  case "lag":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n > 0) && (n < 2) ? 1 : // one                          2;                    // Lithuanian                  case "lt":                      return (n' c) =>                          (n % 10) == 1 && !(n % 100).Between(11' 19) ? 0 : // one                          (n % 10).Between(2' 9) && !(n % 100).Between(11' 19) ? 1 : // few                          2;                    // Latvian                  case "lv":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n % 10) == 1 && (n % 100) != 11 ? 1 :                          2;                    // Macedonian                  case "mb":                      return (n' c) =>                          (n % 10) == 1 && n != 11 ? 0 : // one                          1;                    // Moldavian                  case "mo":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n != 1 && (n % 100).Between(1' 19)) ? 1 : // few                          2;                    // Maltese                  case "mt":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(2' 10) ? 1 : // few                          (n % 100).Between(11' 19) ? 2 : // many                          3;                    // Polish                  case "pl":                      return (n' c) =>                          n == 1 ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          (n % 10).Between(0' 1) || (n % 10).Between(5' 9) || (n % 100).Between(12' 14) ? 2 : // many                          3;                    // Romanian                  case "ro":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(1' 19) ? 1 : // few                          2;                    // Tachelhit                  case "shi":                      return (n' c) =>                          (n >= 0 && n <= 1) ? 0 : // one                          n.Between(2' 10) ? 1 : // few                          2;                    // Slovak                  case "sk":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Slovenian                  case "sl":                      return (n' c) =>                          (n % 100) == 1 ? 0 : // one                          (n % 100) == 2 ? 1 : // two                          (n % 100).Between(3' 4) ? 2 : // few                          3;                    // Central Morocco Tamazight                  case "tzm":                      return (n' c) =>                          n.Between(0' 1) || n.Between(11' 99) ? 0 : // one                          1;                      // Unknown language                  default:                      return null;              }
Magic Number,SmartFormat.Extensions,CommonLanguageRules,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\PluralLocalizationFormatter.cs,GetPluralRule,The following statement contains a magic number: switch (twoLetterISOLanguageName)              {                  // Singular                  case "az": // Azerbaijani                  case "bm": // Bambara                  case "bo": // Tibetan                  case "dz": // Dzongkha                  case "fa": // Persian                  case "hu": // Hungarian                  case "id": // Indonesian                  case "ig": // Igbo                  case "ii": // Sichuan Yi                  case "ja": // Japanese                  case "jv": // Javanese                  case "ka": // Georgian                  case "kde": // Makonde                  case "kea": // Kabuverdianu                  case "km": // Khmer                  case "kn": // Kannada                  case "ko": // Korean                  case "ms": // Malay                  case "my": // Burmese                  case "root": // Root (?)                  case "sah": // Sakha                  case "ses": // Koyraboro Senni                  case "sg": // Sango                  case "th": // Thai                  case "to": // Tonga                  case "vi": // Vietnamese                  case "wo": // Wolof                  case "yo": // Yoruba                  case "zh": // Chinese                      return (n' c) => 0;                    // Dual: one (n == 1)' other                  case "af": // Afrikaans                  case "bem": // Bembda                  case "bg": // Bulgarian                  case "bn": // Bengali                  case "brx": // Bodo                  case "ca": // Catalan                  case "cgg": // Chiga                  case "chr": // Cherokee                  case "da": // Danish                  case "de": // German                  case "dv": // Divehi                  case "ee": // Ewe                  case "el": // Greek                  case "en": // English                  case "eo": // Esperanto                  case "es": // Spanish                  case "et": // Estonian                  case "eu": // Basque                  case "fi": // Finnish                  case "fo": // Faroese                  case "fur": // Friulian                  case "fy": // Western Frisian                  case "gl": // Galician                  case "gsw": // Swiss German                  case "gu": // Gujarati                  case "ha": // Hausa                  case "haw": // Hawaiian                  case "he": // Hebrew                  case "is": // Icelandic                  case "it": // Italian                  case "kk": // Kazakh                  case "kl": // Kalaallisut                  case "ku": // Kurdish                  case "lb": // Luxembourgish                  case "lg": // Ganda                  case "lo": // Lao                  case "mas": // Masai                  case "ml": // Malayalam                  case "mn": // Mongolian                  case "mr": // Marathi                  case "nah": // Nahuatl                  case "nb": // Norwegian Bokmål                  case "ne": // Nepali                  case "nl": // Dutch                  case "nn": // Norwegian Nynorsk                  case "no": // Norwegian                  case "nyn": // Nyankole                  case "om": // Oromo                  case "or": // Oriya                  case "pa": // Punjabi                  case "pap": // Papiamento                  case "ps": // Pashto                  case "pt": // Portuguese                  case "rm": // Romansh                  case "saq": // Samburu                  case "so": // Somali                  case "sq": // Albanian                  case "ssy": // Saho                  case "sw": // Swahili                  case "sv": // Swedish                  case "syr": // Syriac                  case "ta": // Tamil                  case "te": // Telugu                  case "tk": // Turkmen                  case "tr": // Turkish                  case "ur": // Urdu                  case "wae": // Walser                  case "xog": // Soga                  case "zu": // Zulu                      return (n' c) =>                      {                          if (c == 2) return (n == 1) ? 0 : 1;                          if (c == 3) return (n == 0) ? 0 : (n == 1) ? 1 : 2;                          if (c == 4) return (n < 0) ? 0 : (n == 0) ? 1 : (n == 1) ? 2 : 3;                          return -1;                      };                    // DualWithZero: one (n == 0..1)' other                  case "ak": // Akan                  case "am": // Amharic                  case "bh": // Bihari                  case "fil": // Filipino                  case "guw": // Gun                  case "hi": // Hindi                  case "ln": // Lingala                  case "mg": // Malagasy                  case "nso": // Northern Sotho                  case "ti": // Tigrinya                  case "tl": // Tagalog                  case "wa": // Walloon                      return (n' c) => (n == 0 || n == 1) ? 0 : 1;                    // DualFromZeroToTwo: one (n == 0..2 fractionate and n != 2)' other                  case "ff": // Fulah                  case "fr": // French                  case "kab": // Kabyle                      return (n' c) => (n >= 0 && n < 2) ? 0 : 1;                    // Triple: one (n == 1)' two (n == 2)' other                  case "ga": // Irish                  case "iu": // Inuktitut                  case "ksh": // Colognian                  case "kw": // Cornish                  case "se": // Northern Sami                  case "sma": // Southern Sami                  case "smi": // Sami language                  case "smj": // Lule Sami                  case "smn": // Inari Sami                  case "sms": // Skolt Sami                      return (n' c) => (n == 1) ? 0 : (n == 2) ? 1 : 2;                    // Russian & Serbo-Croatian                  case "be": // Belarusian                  case "bs": // Bosnian                  case "hr": // Croatian                  case "ru": // Russian                  case "sh": // Serbo-Croatian                  case "sr": // Serbian                  case "uk": // Ukrainian                      return (n' c) =>                          (n % 10 == 1) && !(n % 100 == 11) ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          2;                    // Unique:                    // Arabic                  case "ar":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          (n % 100).Between(3' 10) ? 3 : // few                          (n % 100).Between(11' 99) ? 4 : // many                          5; // other                    // Breton                  case "br":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5; // other                    // Czech                  case "cs":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Welsh                  case "cy":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5;                    // Manx                  case "gv":                      return (n' c) =>                          (n % 10).Between(1' 2) || (n % 20) == 0 ? 0 :  // one                          1;                    // Langi                  case "lag":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n > 0) && (n < 2) ? 1 : // one                          2;                    // Lithuanian                  case "lt":                      return (n' c) =>                          (n % 10) == 1 && !(n % 100).Between(11' 19) ? 0 : // one                          (n % 10).Between(2' 9) && !(n % 100).Between(11' 19) ? 1 : // few                          2;                    // Latvian                  case "lv":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n % 10) == 1 && (n % 100) != 11 ? 1 :                          2;                    // Macedonian                  case "mb":                      return (n' c) =>                          (n % 10) == 1 && n != 11 ? 0 : // one                          1;                    // Moldavian                  case "mo":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n != 1 && (n % 100).Between(1' 19)) ? 1 : // few                          2;                    // Maltese                  case "mt":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(2' 10) ? 1 : // few                          (n % 100).Between(11' 19) ? 2 : // many                          3;                    // Polish                  case "pl":                      return (n' c) =>                          n == 1 ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          (n % 10).Between(0' 1) || (n % 10).Between(5' 9) || (n % 100).Between(12' 14) ? 2 : // many                          3;                    // Romanian                  case "ro":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(1' 19) ? 1 : // few                          2;                    // Tachelhit                  case "shi":                      return (n' c) =>                          (n >= 0 && n <= 1) ? 0 : // one                          n.Between(2' 10) ? 1 : // few                          2;                    // Slovak                  case "sk":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Slovenian                  case "sl":                      return (n' c) =>                          (n % 100) == 1 ? 0 : // one                          (n % 100) == 2 ? 1 : // two                          (n % 100).Between(3' 4) ? 2 : // few                          3;                    // Central Morocco Tamazight                  case "tzm":                      return (n' c) =>                          n.Between(0' 1) || n.Between(11' 99) ? 0 : // one                          1;                      // Unknown language                  default:                      return null;              }
Magic Number,SmartFormat.Extensions,CommonLanguageRules,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\PluralLocalizationFormatter.cs,GetPluralRule,The following statement contains a magic number: switch (twoLetterISOLanguageName)              {                  // Singular                  case "az": // Azerbaijani                  case "bm": // Bambara                  case "bo": // Tibetan                  case "dz": // Dzongkha                  case "fa": // Persian                  case "hu": // Hungarian                  case "id": // Indonesian                  case "ig": // Igbo                  case "ii": // Sichuan Yi                  case "ja": // Japanese                  case "jv": // Javanese                  case "ka": // Georgian                  case "kde": // Makonde                  case "kea": // Kabuverdianu                  case "km": // Khmer                  case "kn": // Kannada                  case "ko": // Korean                  case "ms": // Malay                  case "my": // Burmese                  case "root": // Root (?)                  case "sah": // Sakha                  case "ses": // Koyraboro Senni                  case "sg": // Sango                  case "th": // Thai                  case "to": // Tonga                  case "vi": // Vietnamese                  case "wo": // Wolof                  case "yo": // Yoruba                  case "zh": // Chinese                      return (n' c) => 0;                    // Dual: one (n == 1)' other                  case "af": // Afrikaans                  case "bem": // Bembda                  case "bg": // Bulgarian                  case "bn": // Bengali                  case "brx": // Bodo                  case "ca": // Catalan                  case "cgg": // Chiga                  case "chr": // Cherokee                  case "da": // Danish                  case "de": // German                  case "dv": // Divehi                  case "ee": // Ewe                  case "el": // Greek                  case "en": // English                  case "eo": // Esperanto                  case "es": // Spanish                  case "et": // Estonian                  case "eu": // Basque                  case "fi": // Finnish                  case "fo": // Faroese                  case "fur": // Friulian                  case "fy": // Western Frisian                  case "gl": // Galician                  case "gsw": // Swiss German                  case "gu": // Gujarati                  case "ha": // Hausa                  case "haw": // Hawaiian                  case "he": // Hebrew                  case "is": // Icelandic                  case "it": // Italian                  case "kk": // Kazakh                  case "kl": // Kalaallisut                  case "ku": // Kurdish                  case "lb": // Luxembourgish                  case "lg": // Ganda                  case "lo": // Lao                  case "mas": // Masai                  case "ml": // Malayalam                  case "mn": // Mongolian                  case "mr": // Marathi                  case "nah": // Nahuatl                  case "nb": // Norwegian Bokmål                  case "ne": // Nepali                  case "nl": // Dutch                  case "nn": // Norwegian Nynorsk                  case "no": // Norwegian                  case "nyn": // Nyankole                  case "om": // Oromo                  case "or": // Oriya                  case "pa": // Punjabi                  case "pap": // Papiamento                  case "ps": // Pashto                  case "pt": // Portuguese                  case "rm": // Romansh                  case "saq": // Samburu                  case "so": // Somali                  case "sq": // Albanian                  case "ssy": // Saho                  case "sw": // Swahili                  case "sv": // Swedish                  case "syr": // Syriac                  case "ta": // Tamil                  case "te": // Telugu                  case "tk": // Turkmen                  case "tr": // Turkish                  case "ur": // Urdu                  case "wae": // Walser                  case "xog": // Soga                  case "zu": // Zulu                      return (n' c) =>                      {                          if (c == 2) return (n == 1) ? 0 : 1;                          if (c == 3) return (n == 0) ? 0 : (n == 1) ? 1 : 2;                          if (c == 4) return (n < 0) ? 0 : (n == 0) ? 1 : (n == 1) ? 2 : 3;                          return -1;                      };                    // DualWithZero: one (n == 0..1)' other                  case "ak": // Akan                  case "am": // Amharic                  case "bh": // Bihari                  case "fil": // Filipino                  case "guw": // Gun                  case "hi": // Hindi                  case "ln": // Lingala                  case "mg": // Malagasy                  case "nso": // Northern Sotho                  case "ti": // Tigrinya                  case "tl": // Tagalog                  case "wa": // Walloon                      return (n' c) => (n == 0 || n == 1) ? 0 : 1;                    // DualFromZeroToTwo: one (n == 0..2 fractionate and n != 2)' other                  case "ff": // Fulah                  case "fr": // French                  case "kab": // Kabyle                      return (n' c) => (n >= 0 && n < 2) ? 0 : 1;                    // Triple: one (n == 1)' two (n == 2)' other                  case "ga": // Irish                  case "iu": // Inuktitut                  case "ksh": // Colognian                  case "kw": // Cornish                  case "se": // Northern Sami                  case "sma": // Southern Sami                  case "smi": // Sami language                  case "smj": // Lule Sami                  case "smn": // Inari Sami                  case "sms": // Skolt Sami                      return (n' c) => (n == 1) ? 0 : (n == 2) ? 1 : 2;                    // Russian & Serbo-Croatian                  case "be": // Belarusian                  case "bs": // Bosnian                  case "hr": // Croatian                  case "ru": // Russian                  case "sh": // Serbo-Croatian                  case "sr": // Serbian                  case "uk": // Ukrainian                      return (n' c) =>                          (n % 10 == 1) && !(n % 100 == 11) ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          2;                    // Unique:                    // Arabic                  case "ar":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          (n % 100).Between(3' 10) ? 3 : // few                          (n % 100).Between(11' 99) ? 4 : // many                          5; // other                    // Breton                  case "br":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5; // other                    // Czech                  case "cs":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Welsh                  case "cy":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5;                    // Manx                  case "gv":                      return (n' c) =>                          (n % 10).Between(1' 2) || (n % 20) == 0 ? 0 :  // one                          1;                    // Langi                  case "lag":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n > 0) && (n < 2) ? 1 : // one                          2;                    // Lithuanian                  case "lt":                      return (n' c) =>                          (n % 10) == 1 && !(n % 100).Between(11' 19) ? 0 : // one                          (n % 10).Between(2' 9) && !(n % 100).Between(11' 19) ? 1 : // few                          2;                    // Latvian                  case "lv":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n % 10) == 1 && (n % 100) != 11 ? 1 :                          2;                    // Macedonian                  case "mb":                      return (n' c) =>                          (n % 10) == 1 && n != 11 ? 0 : // one                          1;                    // Moldavian                  case "mo":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n != 1 && (n % 100).Between(1' 19)) ? 1 : // few                          2;                    // Maltese                  case "mt":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(2' 10) ? 1 : // few                          (n % 100).Between(11' 19) ? 2 : // many                          3;                    // Polish                  case "pl":                      return (n' c) =>                          n == 1 ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          (n % 10).Between(0' 1) || (n % 10).Between(5' 9) || (n % 100).Between(12' 14) ? 2 : // many                          3;                    // Romanian                  case "ro":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(1' 19) ? 1 : // few                          2;                    // Tachelhit                  case "shi":                      return (n' c) =>                          (n >= 0 && n <= 1) ? 0 : // one                          n.Between(2' 10) ? 1 : // few                          2;                    // Slovak                  case "sk":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Slovenian                  case "sl":                      return (n' c) =>                          (n % 100) == 1 ? 0 : // one                          (n % 100) == 2 ? 1 : // two                          (n % 100).Between(3' 4) ? 2 : // few                          3;                    // Central Morocco Tamazight                  case "tzm":                      return (n' c) =>                          n.Between(0' 1) || n.Between(11' 99) ? 0 : // one                          1;                      // Unknown language                  default:                      return null;              }
Magic Number,SmartFormat.Extensions,CommonLanguageRules,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\PluralLocalizationFormatter.cs,GetPluralRule,The following statement contains a magic number: switch (twoLetterISOLanguageName)              {                  // Singular                  case "az": // Azerbaijani                  case "bm": // Bambara                  case "bo": // Tibetan                  case "dz": // Dzongkha                  case "fa": // Persian                  case "hu": // Hungarian                  case "id": // Indonesian                  case "ig": // Igbo                  case "ii": // Sichuan Yi                  case "ja": // Japanese                  case "jv": // Javanese                  case "ka": // Georgian                  case "kde": // Makonde                  case "kea": // Kabuverdianu                  case "km": // Khmer                  case "kn": // Kannada                  case "ko": // Korean                  case "ms": // Malay                  case "my": // Burmese                  case "root": // Root (?)                  case "sah": // Sakha                  case "ses": // Koyraboro Senni                  case "sg": // Sango                  case "th": // Thai                  case "to": // Tonga                  case "vi": // Vietnamese                  case "wo": // Wolof                  case "yo": // Yoruba                  case "zh": // Chinese                      return (n' c) => 0;                    // Dual: one (n == 1)' other                  case "af": // Afrikaans                  case "bem": // Bembda                  case "bg": // Bulgarian                  case "bn": // Bengali                  case "brx": // Bodo                  case "ca": // Catalan                  case "cgg": // Chiga                  case "chr": // Cherokee                  case "da": // Danish                  case "de": // German                  case "dv": // Divehi                  case "ee": // Ewe                  case "el": // Greek                  case "en": // English                  case "eo": // Esperanto                  case "es": // Spanish                  case "et": // Estonian                  case "eu": // Basque                  case "fi": // Finnish                  case "fo": // Faroese                  case "fur": // Friulian                  case "fy": // Western Frisian                  case "gl": // Galician                  case "gsw": // Swiss German                  case "gu": // Gujarati                  case "ha": // Hausa                  case "haw": // Hawaiian                  case "he": // Hebrew                  case "is": // Icelandic                  case "it": // Italian                  case "kk": // Kazakh                  case "kl": // Kalaallisut                  case "ku": // Kurdish                  case "lb": // Luxembourgish                  case "lg": // Ganda                  case "lo": // Lao                  case "mas": // Masai                  case "ml": // Malayalam                  case "mn": // Mongolian                  case "mr": // Marathi                  case "nah": // Nahuatl                  case "nb": // Norwegian Bokmål                  case "ne": // Nepali                  case "nl": // Dutch                  case "nn": // Norwegian Nynorsk                  case "no": // Norwegian                  case "nyn": // Nyankole                  case "om": // Oromo                  case "or": // Oriya                  case "pa": // Punjabi                  case "pap": // Papiamento                  case "ps": // Pashto                  case "pt": // Portuguese                  case "rm": // Romansh                  case "saq": // Samburu                  case "so": // Somali                  case "sq": // Albanian                  case "ssy": // Saho                  case "sw": // Swahili                  case "sv": // Swedish                  case "syr": // Syriac                  case "ta": // Tamil                  case "te": // Telugu                  case "tk": // Turkmen                  case "tr": // Turkish                  case "ur": // Urdu                  case "wae": // Walser                  case "xog": // Soga                  case "zu": // Zulu                      return (n' c) =>                      {                          if (c == 2) return (n == 1) ? 0 : 1;                          if (c == 3) return (n == 0) ? 0 : (n == 1) ? 1 : 2;                          if (c == 4) return (n < 0) ? 0 : (n == 0) ? 1 : (n == 1) ? 2 : 3;                          return -1;                      };                    // DualWithZero: one (n == 0..1)' other                  case "ak": // Akan                  case "am": // Amharic                  case "bh": // Bihari                  case "fil": // Filipino                  case "guw": // Gun                  case "hi": // Hindi                  case "ln": // Lingala                  case "mg": // Malagasy                  case "nso": // Northern Sotho                  case "ti": // Tigrinya                  case "tl": // Tagalog                  case "wa": // Walloon                      return (n' c) => (n == 0 || n == 1) ? 0 : 1;                    // DualFromZeroToTwo: one (n == 0..2 fractionate and n != 2)' other                  case "ff": // Fulah                  case "fr": // French                  case "kab": // Kabyle                      return (n' c) => (n >= 0 && n < 2) ? 0 : 1;                    // Triple: one (n == 1)' two (n == 2)' other                  case "ga": // Irish                  case "iu": // Inuktitut                  case "ksh": // Colognian                  case "kw": // Cornish                  case "se": // Northern Sami                  case "sma": // Southern Sami                  case "smi": // Sami language                  case "smj": // Lule Sami                  case "smn": // Inari Sami                  case "sms": // Skolt Sami                      return (n' c) => (n == 1) ? 0 : (n == 2) ? 1 : 2;                    // Russian & Serbo-Croatian                  case "be": // Belarusian                  case "bs": // Bosnian                  case "hr": // Croatian                  case "ru": // Russian                  case "sh": // Serbo-Croatian                  case "sr": // Serbian                  case "uk": // Ukrainian                      return (n' c) =>                          (n % 10 == 1) && !(n % 100 == 11) ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          2;                    // Unique:                    // Arabic                  case "ar":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          (n % 100).Between(3' 10) ? 3 : // few                          (n % 100).Between(11' 99) ? 4 : // many                          5; // other                    // Breton                  case "br":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5; // other                    // Czech                  case "cs":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Welsh                  case "cy":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5;                    // Manx                  case "gv":                      return (n' c) =>                          (n % 10).Between(1' 2) || (n % 20) == 0 ? 0 :  // one                          1;                    // Langi                  case "lag":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n > 0) && (n < 2) ? 1 : // one                          2;                    // Lithuanian                  case "lt":                      return (n' c) =>                          (n % 10) == 1 && !(n % 100).Between(11' 19) ? 0 : // one                          (n % 10).Between(2' 9) && !(n % 100).Between(11' 19) ? 1 : // few                          2;                    // Latvian                  case "lv":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n % 10) == 1 && (n % 100) != 11 ? 1 :                          2;                    // Macedonian                  case "mb":                      return (n' c) =>                          (n % 10) == 1 && n != 11 ? 0 : // one                          1;                    // Moldavian                  case "mo":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n != 1 && (n % 100).Between(1' 19)) ? 1 : // few                          2;                    // Maltese                  case "mt":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(2' 10) ? 1 : // few                          (n % 100).Between(11' 19) ? 2 : // many                          3;                    // Polish                  case "pl":                      return (n' c) =>                          n == 1 ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          (n % 10).Between(0' 1) || (n % 10).Between(5' 9) || (n % 100).Between(12' 14) ? 2 : // many                          3;                    // Romanian                  case "ro":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(1' 19) ? 1 : // few                          2;                    // Tachelhit                  case "shi":                      return (n' c) =>                          (n >= 0 && n <= 1) ? 0 : // one                          n.Between(2' 10) ? 1 : // few                          2;                    // Slovak                  case "sk":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Slovenian                  case "sl":                      return (n' c) =>                          (n % 100) == 1 ? 0 : // one                          (n % 100) == 2 ? 1 : // two                          (n % 100).Between(3' 4) ? 2 : // few                          3;                    // Central Morocco Tamazight                  case "tzm":                      return (n' c) =>                          n.Between(0' 1) || n.Between(11' 99) ? 0 : // one                          1;                      // Unknown language                  default:                      return null;              }
Magic Number,SmartFormat.Extensions,CommonLanguageRules,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\PluralLocalizationFormatter.cs,GetPluralRule,The following statement contains a magic number: switch (twoLetterISOLanguageName)              {                  // Singular                  case "az": // Azerbaijani                  case "bm": // Bambara                  case "bo": // Tibetan                  case "dz": // Dzongkha                  case "fa": // Persian                  case "hu": // Hungarian                  case "id": // Indonesian                  case "ig": // Igbo                  case "ii": // Sichuan Yi                  case "ja": // Japanese                  case "jv": // Javanese                  case "ka": // Georgian                  case "kde": // Makonde                  case "kea": // Kabuverdianu                  case "km": // Khmer                  case "kn": // Kannada                  case "ko": // Korean                  case "ms": // Malay                  case "my": // Burmese                  case "root": // Root (?)                  case "sah": // Sakha                  case "ses": // Koyraboro Senni                  case "sg": // Sango                  case "th": // Thai                  case "to": // Tonga                  case "vi": // Vietnamese                  case "wo": // Wolof                  case "yo": // Yoruba                  case "zh": // Chinese                      return (n' c) => 0;                    // Dual: one (n == 1)' other                  case "af": // Afrikaans                  case "bem": // Bembda                  case "bg": // Bulgarian                  case "bn": // Bengali                  case "brx": // Bodo                  case "ca": // Catalan                  case "cgg": // Chiga                  case "chr": // Cherokee                  case "da": // Danish                  case "de": // German                  case "dv": // Divehi                  case "ee": // Ewe                  case "el": // Greek                  case "en": // English                  case "eo": // Esperanto                  case "es": // Spanish                  case "et": // Estonian                  case "eu": // Basque                  case "fi": // Finnish                  case "fo": // Faroese                  case "fur": // Friulian                  case "fy": // Western Frisian                  case "gl": // Galician                  case "gsw": // Swiss German                  case "gu": // Gujarati                  case "ha": // Hausa                  case "haw": // Hawaiian                  case "he": // Hebrew                  case "is": // Icelandic                  case "it": // Italian                  case "kk": // Kazakh                  case "kl": // Kalaallisut                  case "ku": // Kurdish                  case "lb": // Luxembourgish                  case "lg": // Ganda                  case "lo": // Lao                  case "mas": // Masai                  case "ml": // Malayalam                  case "mn": // Mongolian                  case "mr": // Marathi                  case "nah": // Nahuatl                  case "nb": // Norwegian Bokmål                  case "ne": // Nepali                  case "nl": // Dutch                  case "nn": // Norwegian Nynorsk                  case "no": // Norwegian                  case "nyn": // Nyankole                  case "om": // Oromo                  case "or": // Oriya                  case "pa": // Punjabi                  case "pap": // Papiamento                  case "ps": // Pashto                  case "pt": // Portuguese                  case "rm": // Romansh                  case "saq": // Samburu                  case "so": // Somali                  case "sq": // Albanian                  case "ssy": // Saho                  case "sw": // Swahili                  case "sv": // Swedish                  case "syr": // Syriac                  case "ta": // Tamil                  case "te": // Telugu                  case "tk": // Turkmen                  case "tr": // Turkish                  case "ur": // Urdu                  case "wae": // Walser                  case "xog": // Soga                  case "zu": // Zulu                      return (n' c) =>                      {                          if (c == 2) return (n == 1) ? 0 : 1;                          if (c == 3) return (n == 0) ? 0 : (n == 1) ? 1 : 2;                          if (c == 4) return (n < 0) ? 0 : (n == 0) ? 1 : (n == 1) ? 2 : 3;                          return -1;                      };                    // DualWithZero: one (n == 0..1)' other                  case "ak": // Akan                  case "am": // Amharic                  case "bh": // Bihari                  case "fil": // Filipino                  case "guw": // Gun                  case "hi": // Hindi                  case "ln": // Lingala                  case "mg": // Malagasy                  case "nso": // Northern Sotho                  case "ti": // Tigrinya                  case "tl": // Tagalog                  case "wa": // Walloon                      return (n' c) => (n == 0 || n == 1) ? 0 : 1;                    // DualFromZeroToTwo: one (n == 0..2 fractionate and n != 2)' other                  case "ff": // Fulah                  case "fr": // French                  case "kab": // Kabyle                      return (n' c) => (n >= 0 && n < 2) ? 0 : 1;                    // Triple: one (n == 1)' two (n == 2)' other                  case "ga": // Irish                  case "iu": // Inuktitut                  case "ksh": // Colognian                  case "kw": // Cornish                  case "se": // Northern Sami                  case "sma": // Southern Sami                  case "smi": // Sami language                  case "smj": // Lule Sami                  case "smn": // Inari Sami                  case "sms": // Skolt Sami                      return (n' c) => (n == 1) ? 0 : (n == 2) ? 1 : 2;                    // Russian & Serbo-Croatian                  case "be": // Belarusian                  case "bs": // Bosnian                  case "hr": // Croatian                  case "ru": // Russian                  case "sh": // Serbo-Croatian                  case "sr": // Serbian                  case "uk": // Ukrainian                      return (n' c) =>                          (n % 10 == 1) && !(n % 100 == 11) ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          2;                    // Unique:                    // Arabic                  case "ar":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          (n % 100).Between(3' 10) ? 3 : // few                          (n % 100).Between(11' 99) ? 4 : // many                          5; // other                    // Breton                  case "br":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5; // other                    // Czech                  case "cs":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Welsh                  case "cy":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5;                    // Manx                  case "gv":                      return (n' c) =>                          (n % 10).Between(1' 2) || (n % 20) == 0 ? 0 :  // one                          1;                    // Langi                  case "lag":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n > 0) && (n < 2) ? 1 : // one                          2;                    // Lithuanian                  case "lt":                      return (n' c) =>                          (n % 10) == 1 && !(n % 100).Between(11' 19) ? 0 : // one                          (n % 10).Between(2' 9) && !(n % 100).Between(11' 19) ? 1 : // few                          2;                    // Latvian                  case "lv":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n % 10) == 1 && (n % 100) != 11 ? 1 :                          2;                    // Macedonian                  case "mb":                      return (n' c) =>                          (n % 10) == 1 && n != 11 ? 0 : // one                          1;                    // Moldavian                  case "mo":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n != 1 && (n % 100).Between(1' 19)) ? 1 : // few                          2;                    // Maltese                  case "mt":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(2' 10) ? 1 : // few                          (n % 100).Between(11' 19) ? 2 : // many                          3;                    // Polish                  case "pl":                      return (n' c) =>                          n == 1 ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          (n % 10).Between(0' 1) || (n % 10).Between(5' 9) || (n % 100).Between(12' 14) ? 2 : // many                          3;                    // Romanian                  case "ro":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(1' 19) ? 1 : // few                          2;                    // Tachelhit                  case "shi":                      return (n' c) =>                          (n >= 0 && n <= 1) ? 0 : // one                          n.Between(2' 10) ? 1 : // few                          2;                    // Slovak                  case "sk":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Slovenian                  case "sl":                      return (n' c) =>                          (n % 100) == 1 ? 0 : // one                          (n % 100) == 2 ? 1 : // two                          (n % 100).Between(3' 4) ? 2 : // few                          3;                    // Central Morocco Tamazight                  case "tzm":                      return (n' c) =>                          n.Between(0' 1) || n.Between(11' 99) ? 0 : // one                          1;                      // Unknown language                  default:                      return null;              }
Magic Number,SmartFormat.Extensions,CommonLanguageRules,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\PluralLocalizationFormatter.cs,GetPluralRule,The following statement contains a magic number: switch (twoLetterISOLanguageName)              {                  // Singular                  case "az": // Azerbaijani                  case "bm": // Bambara                  case "bo": // Tibetan                  case "dz": // Dzongkha                  case "fa": // Persian                  case "hu": // Hungarian                  case "id": // Indonesian                  case "ig": // Igbo                  case "ii": // Sichuan Yi                  case "ja": // Japanese                  case "jv": // Javanese                  case "ka": // Georgian                  case "kde": // Makonde                  case "kea": // Kabuverdianu                  case "km": // Khmer                  case "kn": // Kannada                  case "ko": // Korean                  case "ms": // Malay                  case "my": // Burmese                  case "root": // Root (?)                  case "sah": // Sakha                  case "ses": // Koyraboro Senni                  case "sg": // Sango                  case "th": // Thai                  case "to": // Tonga                  case "vi": // Vietnamese                  case "wo": // Wolof                  case "yo": // Yoruba                  case "zh": // Chinese                      return (n' c) => 0;                    // Dual: one (n == 1)' other                  case "af": // Afrikaans                  case "bem": // Bembda                  case "bg": // Bulgarian                  case "bn": // Bengali                  case "brx": // Bodo                  case "ca": // Catalan                  case "cgg": // Chiga                  case "chr": // Cherokee                  case "da": // Danish                  case "de": // German                  case "dv": // Divehi                  case "ee": // Ewe                  case "el": // Greek                  case "en": // English                  case "eo": // Esperanto                  case "es": // Spanish                  case "et": // Estonian                  case "eu": // Basque                  case "fi": // Finnish                  case "fo": // Faroese                  case "fur": // Friulian                  case "fy": // Western Frisian                  case "gl": // Galician                  case "gsw": // Swiss German                  case "gu": // Gujarati                  case "ha": // Hausa                  case "haw": // Hawaiian                  case "he": // Hebrew                  case "is": // Icelandic                  case "it": // Italian                  case "kk": // Kazakh                  case "kl": // Kalaallisut                  case "ku": // Kurdish                  case "lb": // Luxembourgish                  case "lg": // Ganda                  case "lo": // Lao                  case "mas": // Masai                  case "ml": // Malayalam                  case "mn": // Mongolian                  case "mr": // Marathi                  case "nah": // Nahuatl                  case "nb": // Norwegian Bokmål                  case "ne": // Nepali                  case "nl": // Dutch                  case "nn": // Norwegian Nynorsk                  case "no": // Norwegian                  case "nyn": // Nyankole                  case "om": // Oromo                  case "or": // Oriya                  case "pa": // Punjabi                  case "pap": // Papiamento                  case "ps": // Pashto                  case "pt": // Portuguese                  case "rm": // Romansh                  case "saq": // Samburu                  case "so": // Somali                  case "sq": // Albanian                  case "ssy": // Saho                  case "sw": // Swahili                  case "sv": // Swedish                  case "syr": // Syriac                  case "ta": // Tamil                  case "te": // Telugu                  case "tk": // Turkmen                  case "tr": // Turkish                  case "ur": // Urdu                  case "wae": // Walser                  case "xog": // Soga                  case "zu": // Zulu                      return (n' c) =>                      {                          if (c == 2) return (n == 1) ? 0 : 1;                          if (c == 3) return (n == 0) ? 0 : (n == 1) ? 1 : 2;                          if (c == 4) return (n < 0) ? 0 : (n == 0) ? 1 : (n == 1) ? 2 : 3;                          return -1;                      };                    // DualWithZero: one (n == 0..1)' other                  case "ak": // Akan                  case "am": // Amharic                  case "bh": // Bihari                  case "fil": // Filipino                  case "guw": // Gun                  case "hi": // Hindi                  case "ln": // Lingala                  case "mg": // Malagasy                  case "nso": // Northern Sotho                  case "ti": // Tigrinya                  case "tl": // Tagalog                  case "wa": // Walloon                      return (n' c) => (n == 0 || n == 1) ? 0 : 1;                    // DualFromZeroToTwo: one (n == 0..2 fractionate and n != 2)' other                  case "ff": // Fulah                  case "fr": // French                  case "kab": // Kabyle                      return (n' c) => (n >= 0 && n < 2) ? 0 : 1;                    // Triple: one (n == 1)' two (n == 2)' other                  case "ga": // Irish                  case "iu": // Inuktitut                  case "ksh": // Colognian                  case "kw": // Cornish                  case "se": // Northern Sami                  case "sma": // Southern Sami                  case "smi": // Sami language                  case "smj": // Lule Sami                  case "smn": // Inari Sami                  case "sms": // Skolt Sami                      return (n' c) => (n == 1) ? 0 : (n == 2) ? 1 : 2;                    // Russian & Serbo-Croatian                  case "be": // Belarusian                  case "bs": // Bosnian                  case "hr": // Croatian                  case "ru": // Russian                  case "sh": // Serbo-Croatian                  case "sr": // Serbian                  case "uk": // Ukrainian                      return (n' c) =>                          (n % 10 == 1) && !(n % 100 == 11) ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          2;                    // Unique:                    // Arabic                  case "ar":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          (n % 100).Between(3' 10) ? 3 : // few                          (n % 100).Between(11' 99) ? 4 : // many                          5; // other                    // Breton                  case "br":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5; // other                    // Czech                  case "cs":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Welsh                  case "cy":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5;                    // Manx                  case "gv":                      return (n' c) =>                          (n % 10).Between(1' 2) || (n % 20) == 0 ? 0 :  // one                          1;                    // Langi                  case "lag":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n > 0) && (n < 2) ? 1 : // one                          2;                    // Lithuanian                  case "lt":                      return (n' c) =>                          (n % 10) == 1 && !(n % 100).Between(11' 19) ? 0 : // one                          (n % 10).Between(2' 9) && !(n % 100).Between(11' 19) ? 1 : // few                          2;                    // Latvian                  case "lv":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n % 10) == 1 && (n % 100) != 11 ? 1 :                          2;                    // Macedonian                  case "mb":                      return (n' c) =>                          (n % 10) == 1 && n != 11 ? 0 : // one                          1;                    // Moldavian                  case "mo":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n != 1 && (n % 100).Between(1' 19)) ? 1 : // few                          2;                    // Maltese                  case "mt":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(2' 10) ? 1 : // few                          (n % 100).Between(11' 19) ? 2 : // many                          3;                    // Polish                  case "pl":                      return (n' c) =>                          n == 1 ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          (n % 10).Between(0' 1) || (n % 10).Between(5' 9) || (n % 100).Between(12' 14) ? 2 : // many                          3;                    // Romanian                  case "ro":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(1' 19) ? 1 : // few                          2;                    // Tachelhit                  case "shi":                      return (n' c) =>                          (n >= 0 && n <= 1) ? 0 : // one                          n.Between(2' 10) ? 1 : // few                          2;                    // Slovak                  case "sk":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Slovenian                  case "sl":                      return (n' c) =>                          (n % 100) == 1 ? 0 : // one                          (n % 100) == 2 ? 1 : // two                          (n % 100).Between(3' 4) ? 2 : // few                          3;                    // Central Morocco Tamazight                  case "tzm":                      return (n' c) =>                          n.Between(0' 1) || n.Between(11' 99) ? 0 : // one                          1;                      // Unknown language                  default:                      return null;              }
Magic Number,SmartFormat.Extensions,CommonLanguageRules,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\PluralLocalizationFormatter.cs,GetPluralRule,The following statement contains a magic number: switch (twoLetterISOLanguageName)              {                  // Singular                  case "az": // Azerbaijani                  case "bm": // Bambara                  case "bo": // Tibetan                  case "dz": // Dzongkha                  case "fa": // Persian                  case "hu": // Hungarian                  case "id": // Indonesian                  case "ig": // Igbo                  case "ii": // Sichuan Yi                  case "ja": // Japanese                  case "jv": // Javanese                  case "ka": // Georgian                  case "kde": // Makonde                  case "kea": // Kabuverdianu                  case "km": // Khmer                  case "kn": // Kannada                  case "ko": // Korean                  case "ms": // Malay                  case "my": // Burmese                  case "root": // Root (?)                  case "sah": // Sakha                  case "ses": // Koyraboro Senni                  case "sg": // Sango                  case "th": // Thai                  case "to": // Tonga                  case "vi": // Vietnamese                  case "wo": // Wolof                  case "yo": // Yoruba                  case "zh": // Chinese                      return (n' c) => 0;                    // Dual: one (n == 1)' other                  case "af": // Afrikaans                  case "bem": // Bembda                  case "bg": // Bulgarian                  case "bn": // Bengali                  case "brx": // Bodo                  case "ca": // Catalan                  case "cgg": // Chiga                  case "chr": // Cherokee                  case "da": // Danish                  case "de": // German                  case "dv": // Divehi                  case "ee": // Ewe                  case "el": // Greek                  case "en": // English                  case "eo": // Esperanto                  case "es": // Spanish                  case "et": // Estonian                  case "eu": // Basque                  case "fi": // Finnish                  case "fo": // Faroese                  case "fur": // Friulian                  case "fy": // Western Frisian                  case "gl": // Galician                  case "gsw": // Swiss German                  case "gu": // Gujarati                  case "ha": // Hausa                  case "haw": // Hawaiian                  case "he": // Hebrew                  case "is": // Icelandic                  case "it": // Italian                  case "kk": // Kazakh                  case "kl": // Kalaallisut                  case "ku": // Kurdish                  case "lb": // Luxembourgish                  case "lg": // Ganda                  case "lo": // Lao                  case "mas": // Masai                  case "ml": // Malayalam                  case "mn": // Mongolian                  case "mr": // Marathi                  case "nah": // Nahuatl                  case "nb": // Norwegian Bokmål                  case "ne": // Nepali                  case "nl": // Dutch                  case "nn": // Norwegian Nynorsk                  case "no": // Norwegian                  case "nyn": // Nyankole                  case "om": // Oromo                  case "or": // Oriya                  case "pa": // Punjabi                  case "pap": // Papiamento                  case "ps": // Pashto                  case "pt": // Portuguese                  case "rm": // Romansh                  case "saq": // Samburu                  case "so": // Somali                  case "sq": // Albanian                  case "ssy": // Saho                  case "sw": // Swahili                  case "sv": // Swedish                  case "syr": // Syriac                  case "ta": // Tamil                  case "te": // Telugu                  case "tk": // Turkmen                  case "tr": // Turkish                  case "ur": // Urdu                  case "wae": // Walser                  case "xog": // Soga                  case "zu": // Zulu                      return (n' c) =>                      {                          if (c == 2) return (n == 1) ? 0 : 1;                          if (c == 3) return (n == 0) ? 0 : (n == 1) ? 1 : 2;                          if (c == 4) return (n < 0) ? 0 : (n == 0) ? 1 : (n == 1) ? 2 : 3;                          return -1;                      };                    // DualWithZero: one (n == 0..1)' other                  case "ak": // Akan                  case "am": // Amharic                  case "bh": // Bihari                  case "fil": // Filipino                  case "guw": // Gun                  case "hi": // Hindi                  case "ln": // Lingala                  case "mg": // Malagasy                  case "nso": // Northern Sotho                  case "ti": // Tigrinya                  case "tl": // Tagalog                  case "wa": // Walloon                      return (n' c) => (n == 0 || n == 1) ? 0 : 1;                    // DualFromZeroToTwo: one (n == 0..2 fractionate and n != 2)' other                  case "ff": // Fulah                  case "fr": // French                  case "kab": // Kabyle                      return (n' c) => (n >= 0 && n < 2) ? 0 : 1;                    // Triple: one (n == 1)' two (n == 2)' other                  case "ga": // Irish                  case "iu": // Inuktitut                  case "ksh": // Colognian                  case "kw": // Cornish                  case "se": // Northern Sami                  case "sma": // Southern Sami                  case "smi": // Sami language                  case "smj": // Lule Sami                  case "smn": // Inari Sami                  case "sms": // Skolt Sami                      return (n' c) => (n == 1) ? 0 : (n == 2) ? 1 : 2;                    // Russian & Serbo-Croatian                  case "be": // Belarusian                  case "bs": // Bosnian                  case "hr": // Croatian                  case "ru": // Russian                  case "sh": // Serbo-Croatian                  case "sr": // Serbian                  case "uk": // Ukrainian                      return (n' c) =>                          (n % 10 == 1) && !(n % 100 == 11) ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          2;                    // Unique:                    // Arabic                  case "ar":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          (n % 100).Between(3' 10) ? 3 : // few                          (n % 100).Between(11' 99) ? 4 : // many                          5; // other                    // Breton                  case "br":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5; // other                    // Czech                  case "cs":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Welsh                  case "cy":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5;                    // Manx                  case "gv":                      return (n' c) =>                          (n % 10).Between(1' 2) || (n % 20) == 0 ? 0 :  // one                          1;                    // Langi                  case "lag":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n > 0) && (n < 2) ? 1 : // one                          2;                    // Lithuanian                  case "lt":                      return (n' c) =>                          (n % 10) == 1 && !(n % 100).Between(11' 19) ? 0 : // one                          (n % 10).Between(2' 9) && !(n % 100).Between(11' 19) ? 1 : // few                          2;                    // Latvian                  case "lv":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n % 10) == 1 && (n % 100) != 11 ? 1 :                          2;                    // Macedonian                  case "mb":                      return (n' c) =>                          (n % 10) == 1 && n != 11 ? 0 : // one                          1;                    // Moldavian                  case "mo":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n != 1 && (n % 100).Between(1' 19)) ? 1 : // few                          2;                    // Maltese                  case "mt":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(2' 10) ? 1 : // few                          (n % 100).Between(11' 19) ? 2 : // many                          3;                    // Polish                  case "pl":                      return (n' c) =>                          n == 1 ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          (n % 10).Between(0' 1) || (n % 10).Between(5' 9) || (n % 100).Between(12' 14) ? 2 : // many                          3;                    // Romanian                  case "ro":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(1' 19) ? 1 : // few                          2;                    // Tachelhit                  case "shi":                      return (n' c) =>                          (n >= 0 && n <= 1) ? 0 : // one                          n.Between(2' 10) ? 1 : // few                          2;                    // Slovak                  case "sk":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Slovenian                  case "sl":                      return (n' c) =>                          (n % 100) == 1 ? 0 : // one                          (n % 100) == 2 ? 1 : // two                          (n % 100).Between(3' 4) ? 2 : // few                          3;                    // Central Morocco Tamazight                  case "tzm":                      return (n' c) =>                          n.Between(0' 1) || n.Between(11' 99) ? 0 : // one                          1;                      // Unknown language                  default:                      return null;              }
Magic Number,SmartFormat.Extensions,CommonLanguageRules,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\PluralLocalizationFormatter.cs,GetPluralRule,The following statement contains a magic number: switch (twoLetterISOLanguageName)              {                  // Singular                  case "az": // Azerbaijani                  case "bm": // Bambara                  case "bo": // Tibetan                  case "dz": // Dzongkha                  case "fa": // Persian                  case "hu": // Hungarian                  case "id": // Indonesian                  case "ig": // Igbo                  case "ii": // Sichuan Yi                  case "ja": // Japanese                  case "jv": // Javanese                  case "ka": // Georgian                  case "kde": // Makonde                  case "kea": // Kabuverdianu                  case "km": // Khmer                  case "kn": // Kannada                  case "ko": // Korean                  case "ms": // Malay                  case "my": // Burmese                  case "root": // Root (?)                  case "sah": // Sakha                  case "ses": // Koyraboro Senni                  case "sg": // Sango                  case "th": // Thai                  case "to": // Tonga                  case "vi": // Vietnamese                  case "wo": // Wolof                  case "yo": // Yoruba                  case "zh": // Chinese                      return (n' c) => 0;                    // Dual: one (n == 1)' other                  case "af": // Afrikaans                  case "bem": // Bembda                  case "bg": // Bulgarian                  case "bn": // Bengali                  case "brx": // Bodo                  case "ca": // Catalan                  case "cgg": // Chiga                  case "chr": // Cherokee                  case "da": // Danish                  case "de": // German                  case "dv": // Divehi                  case "ee": // Ewe                  case "el": // Greek                  case "en": // English                  case "eo": // Esperanto                  case "es": // Spanish                  case "et": // Estonian                  case "eu": // Basque                  case "fi": // Finnish                  case "fo": // Faroese                  case "fur": // Friulian                  case "fy": // Western Frisian                  case "gl": // Galician                  case "gsw": // Swiss German                  case "gu": // Gujarati                  case "ha": // Hausa                  case "haw": // Hawaiian                  case "he": // Hebrew                  case "is": // Icelandic                  case "it": // Italian                  case "kk": // Kazakh                  case "kl": // Kalaallisut                  case "ku": // Kurdish                  case "lb": // Luxembourgish                  case "lg": // Ganda                  case "lo": // Lao                  case "mas": // Masai                  case "ml": // Malayalam                  case "mn": // Mongolian                  case "mr": // Marathi                  case "nah": // Nahuatl                  case "nb": // Norwegian Bokmål                  case "ne": // Nepali                  case "nl": // Dutch                  case "nn": // Norwegian Nynorsk                  case "no": // Norwegian                  case "nyn": // Nyankole                  case "om": // Oromo                  case "or": // Oriya                  case "pa": // Punjabi                  case "pap": // Papiamento                  case "ps": // Pashto                  case "pt": // Portuguese                  case "rm": // Romansh                  case "saq": // Samburu                  case "so": // Somali                  case "sq": // Albanian                  case "ssy": // Saho                  case "sw": // Swahili                  case "sv": // Swedish                  case "syr": // Syriac                  case "ta": // Tamil                  case "te": // Telugu                  case "tk": // Turkmen                  case "tr": // Turkish                  case "ur": // Urdu                  case "wae": // Walser                  case "xog": // Soga                  case "zu": // Zulu                      return (n' c) =>                      {                          if (c == 2) return (n == 1) ? 0 : 1;                          if (c == 3) return (n == 0) ? 0 : (n == 1) ? 1 : 2;                          if (c == 4) return (n < 0) ? 0 : (n == 0) ? 1 : (n == 1) ? 2 : 3;                          return -1;                      };                    // DualWithZero: one (n == 0..1)' other                  case "ak": // Akan                  case "am": // Amharic                  case "bh": // Bihari                  case "fil": // Filipino                  case "guw": // Gun                  case "hi": // Hindi                  case "ln": // Lingala                  case "mg": // Malagasy                  case "nso": // Northern Sotho                  case "ti": // Tigrinya                  case "tl": // Tagalog                  case "wa": // Walloon                      return (n' c) => (n == 0 || n == 1) ? 0 : 1;                    // DualFromZeroToTwo: one (n == 0..2 fractionate and n != 2)' other                  case "ff": // Fulah                  case "fr": // French                  case "kab": // Kabyle                      return (n' c) => (n >= 0 && n < 2) ? 0 : 1;                    // Triple: one (n == 1)' two (n == 2)' other                  case "ga": // Irish                  case "iu": // Inuktitut                  case "ksh": // Colognian                  case "kw": // Cornish                  case "se": // Northern Sami                  case "sma": // Southern Sami                  case "smi": // Sami language                  case "smj": // Lule Sami                  case "smn": // Inari Sami                  case "sms": // Skolt Sami                      return (n' c) => (n == 1) ? 0 : (n == 2) ? 1 : 2;                    // Russian & Serbo-Croatian                  case "be": // Belarusian                  case "bs": // Bosnian                  case "hr": // Croatian                  case "ru": // Russian                  case "sh": // Serbo-Croatian                  case "sr": // Serbian                  case "uk": // Ukrainian                      return (n' c) =>                          (n % 10 == 1) && !(n % 100 == 11) ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          2;                    // Unique:                    // Arabic                  case "ar":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          (n % 100).Between(3' 10) ? 3 : // few                          (n % 100).Between(11' 99) ? 4 : // many                          5; // other                    // Breton                  case "br":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5; // other                    // Czech                  case "cs":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Welsh                  case "cy":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5;                    // Manx                  case "gv":                      return (n' c) =>                          (n % 10).Between(1' 2) || (n % 20) == 0 ? 0 :  // one                          1;                    // Langi                  case "lag":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n > 0) && (n < 2) ? 1 : // one                          2;                    // Lithuanian                  case "lt":                      return (n' c) =>                          (n % 10) == 1 && !(n % 100).Between(11' 19) ? 0 : // one                          (n % 10).Between(2' 9) && !(n % 100).Between(11' 19) ? 1 : // few                          2;                    // Latvian                  case "lv":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n % 10) == 1 && (n % 100) != 11 ? 1 :                          2;                    // Macedonian                  case "mb":                      return (n' c) =>                          (n % 10) == 1 && n != 11 ? 0 : // one                          1;                    // Moldavian                  case "mo":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n != 1 && (n % 100).Between(1' 19)) ? 1 : // few                          2;                    // Maltese                  case "mt":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(2' 10) ? 1 : // few                          (n % 100).Between(11' 19) ? 2 : // many                          3;                    // Polish                  case "pl":                      return (n' c) =>                          n == 1 ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          (n % 10).Between(0' 1) || (n % 10).Between(5' 9) || (n % 100).Between(12' 14) ? 2 : // many                          3;                    // Romanian                  case "ro":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(1' 19) ? 1 : // few                          2;                    // Tachelhit                  case "shi":                      return (n' c) =>                          (n >= 0 && n <= 1) ? 0 : // one                          n.Between(2' 10) ? 1 : // few                          2;                    // Slovak                  case "sk":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Slovenian                  case "sl":                      return (n' c) =>                          (n % 100) == 1 ? 0 : // one                          (n % 100) == 2 ? 1 : // two                          (n % 100).Between(3' 4) ? 2 : // few                          3;                    // Central Morocco Tamazight                  case "tzm":                      return (n' c) =>                          n.Between(0' 1) || n.Between(11' 99) ? 0 : // one                          1;                      // Unknown language                  default:                      return null;              }
Magic Number,SmartFormat.Extensions,CommonLanguageRules,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\PluralLocalizationFormatter.cs,GetPluralRule,The following statement contains a magic number: switch (twoLetterISOLanguageName)              {                  // Singular                  case "az": // Azerbaijani                  case "bm": // Bambara                  case "bo": // Tibetan                  case "dz": // Dzongkha                  case "fa": // Persian                  case "hu": // Hungarian                  case "id": // Indonesian                  case "ig": // Igbo                  case "ii": // Sichuan Yi                  case "ja": // Japanese                  case "jv": // Javanese                  case "ka": // Georgian                  case "kde": // Makonde                  case "kea": // Kabuverdianu                  case "km": // Khmer                  case "kn": // Kannada                  case "ko": // Korean                  case "ms": // Malay                  case "my": // Burmese                  case "root": // Root (?)                  case "sah": // Sakha                  case "ses": // Koyraboro Senni                  case "sg": // Sango                  case "th": // Thai                  case "to": // Tonga                  case "vi": // Vietnamese                  case "wo": // Wolof                  case "yo": // Yoruba                  case "zh": // Chinese                      return (n' c) => 0;                    // Dual: one (n == 1)' other                  case "af": // Afrikaans                  case "bem": // Bembda                  case "bg": // Bulgarian                  case "bn": // Bengali                  case "brx": // Bodo                  case "ca": // Catalan                  case "cgg": // Chiga                  case "chr": // Cherokee                  case "da": // Danish                  case "de": // German                  case "dv": // Divehi                  case "ee": // Ewe                  case "el": // Greek                  case "en": // English                  case "eo": // Esperanto                  case "es": // Spanish                  case "et": // Estonian                  case "eu": // Basque                  case "fi": // Finnish                  case "fo": // Faroese                  case "fur": // Friulian                  case "fy": // Western Frisian                  case "gl": // Galician                  case "gsw": // Swiss German                  case "gu": // Gujarati                  case "ha": // Hausa                  case "haw": // Hawaiian                  case "he": // Hebrew                  case "is": // Icelandic                  case "it": // Italian                  case "kk": // Kazakh                  case "kl": // Kalaallisut                  case "ku": // Kurdish                  case "lb": // Luxembourgish                  case "lg": // Ganda                  case "lo": // Lao                  case "mas": // Masai                  case "ml": // Malayalam                  case "mn": // Mongolian                  case "mr": // Marathi                  case "nah": // Nahuatl                  case "nb": // Norwegian Bokmål                  case "ne": // Nepali                  case "nl": // Dutch                  case "nn": // Norwegian Nynorsk                  case "no": // Norwegian                  case "nyn": // Nyankole                  case "om": // Oromo                  case "or": // Oriya                  case "pa": // Punjabi                  case "pap": // Papiamento                  case "ps": // Pashto                  case "pt": // Portuguese                  case "rm": // Romansh                  case "saq": // Samburu                  case "so": // Somali                  case "sq": // Albanian                  case "ssy": // Saho                  case "sw": // Swahili                  case "sv": // Swedish                  case "syr": // Syriac                  case "ta": // Tamil                  case "te": // Telugu                  case "tk": // Turkmen                  case "tr": // Turkish                  case "ur": // Urdu                  case "wae": // Walser                  case "xog": // Soga                  case "zu": // Zulu                      return (n' c) =>                      {                          if (c == 2) return (n == 1) ? 0 : 1;                          if (c == 3) return (n == 0) ? 0 : (n == 1) ? 1 : 2;                          if (c == 4) return (n < 0) ? 0 : (n == 0) ? 1 : (n == 1) ? 2 : 3;                          return -1;                      };                    // DualWithZero: one (n == 0..1)' other                  case "ak": // Akan                  case "am": // Amharic                  case "bh": // Bihari                  case "fil": // Filipino                  case "guw": // Gun                  case "hi": // Hindi                  case "ln": // Lingala                  case "mg": // Malagasy                  case "nso": // Northern Sotho                  case "ti": // Tigrinya                  case "tl": // Tagalog                  case "wa": // Walloon                      return (n' c) => (n == 0 || n == 1) ? 0 : 1;                    // DualFromZeroToTwo: one (n == 0..2 fractionate and n != 2)' other                  case "ff": // Fulah                  case "fr": // French                  case "kab": // Kabyle                      return (n' c) => (n >= 0 && n < 2) ? 0 : 1;                    // Triple: one (n == 1)' two (n == 2)' other                  case "ga": // Irish                  case "iu": // Inuktitut                  case "ksh": // Colognian                  case "kw": // Cornish                  case "se": // Northern Sami                  case "sma": // Southern Sami                  case "smi": // Sami language                  case "smj": // Lule Sami                  case "smn": // Inari Sami                  case "sms": // Skolt Sami                      return (n' c) => (n == 1) ? 0 : (n == 2) ? 1 : 2;                    // Russian & Serbo-Croatian                  case "be": // Belarusian                  case "bs": // Bosnian                  case "hr": // Croatian                  case "ru": // Russian                  case "sh": // Serbo-Croatian                  case "sr": // Serbian                  case "uk": // Ukrainian                      return (n' c) =>                          (n % 10 == 1) && !(n % 100 == 11) ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          2;                    // Unique:                    // Arabic                  case "ar":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          (n % 100).Between(3' 10) ? 3 : // few                          (n % 100).Between(11' 99) ? 4 : // many                          5; // other                    // Breton                  case "br":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5; // other                    // Czech                  case "cs":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Welsh                  case "cy":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5;                    // Manx                  case "gv":                      return (n' c) =>                          (n % 10).Between(1' 2) || (n % 20) == 0 ? 0 :  // one                          1;                    // Langi                  case "lag":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n > 0) && (n < 2) ? 1 : // one                          2;                    // Lithuanian                  case "lt":                      return (n' c) =>                          (n % 10) == 1 && !(n % 100).Between(11' 19) ? 0 : // one                          (n % 10).Between(2' 9) && !(n % 100).Between(11' 19) ? 1 : // few                          2;                    // Latvian                  case "lv":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n % 10) == 1 && (n % 100) != 11 ? 1 :                          2;                    // Macedonian                  case "mb":                      return (n' c) =>                          (n % 10) == 1 && n != 11 ? 0 : // one                          1;                    // Moldavian                  case "mo":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n != 1 && (n % 100).Between(1' 19)) ? 1 : // few                          2;                    // Maltese                  case "mt":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(2' 10) ? 1 : // few                          (n % 100).Between(11' 19) ? 2 : // many                          3;                    // Polish                  case "pl":                      return (n' c) =>                          n == 1 ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          (n % 10).Between(0' 1) || (n % 10).Between(5' 9) || (n % 100).Between(12' 14) ? 2 : // many                          3;                    // Romanian                  case "ro":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(1' 19) ? 1 : // few                          2;                    // Tachelhit                  case "shi":                      return (n' c) =>                          (n >= 0 && n <= 1) ? 0 : // one                          n.Between(2' 10) ? 1 : // few                          2;                    // Slovak                  case "sk":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Slovenian                  case "sl":                      return (n' c) =>                          (n % 100) == 1 ? 0 : // one                          (n % 100) == 2 ? 1 : // two                          (n % 100).Between(3' 4) ? 2 : // few                          3;                    // Central Morocco Tamazight                  case "tzm":                      return (n' c) =>                          n.Between(0' 1) || n.Between(11' 99) ? 0 : // one                          1;                      // Unknown language                  default:                      return null;              }
Magic Number,SmartFormat.Extensions,CommonLanguageRules,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\PluralLocalizationFormatter.cs,GetPluralRule,The following statement contains a magic number: switch (twoLetterISOLanguageName)              {                  // Singular                  case "az": // Azerbaijani                  case "bm": // Bambara                  case "bo": // Tibetan                  case "dz": // Dzongkha                  case "fa": // Persian                  case "hu": // Hungarian                  case "id": // Indonesian                  case "ig": // Igbo                  case "ii": // Sichuan Yi                  case "ja": // Japanese                  case "jv": // Javanese                  case "ka": // Georgian                  case "kde": // Makonde                  case "kea": // Kabuverdianu                  case "km": // Khmer                  case "kn": // Kannada                  case "ko": // Korean                  case "ms": // Malay                  case "my": // Burmese                  case "root": // Root (?)                  case "sah": // Sakha                  case "ses": // Koyraboro Senni                  case "sg": // Sango                  case "th": // Thai                  case "to": // Tonga                  case "vi": // Vietnamese                  case "wo": // Wolof                  case "yo": // Yoruba                  case "zh": // Chinese                      return (n' c) => 0;                    // Dual: one (n == 1)' other                  case "af": // Afrikaans                  case "bem": // Bembda                  case "bg": // Bulgarian                  case "bn": // Bengali                  case "brx": // Bodo                  case "ca": // Catalan                  case "cgg": // Chiga                  case "chr": // Cherokee                  case "da": // Danish                  case "de": // German                  case "dv": // Divehi                  case "ee": // Ewe                  case "el": // Greek                  case "en": // English                  case "eo": // Esperanto                  case "es": // Spanish                  case "et": // Estonian                  case "eu": // Basque                  case "fi": // Finnish                  case "fo": // Faroese                  case "fur": // Friulian                  case "fy": // Western Frisian                  case "gl": // Galician                  case "gsw": // Swiss German                  case "gu": // Gujarati                  case "ha": // Hausa                  case "haw": // Hawaiian                  case "he": // Hebrew                  case "is": // Icelandic                  case "it": // Italian                  case "kk": // Kazakh                  case "kl": // Kalaallisut                  case "ku": // Kurdish                  case "lb": // Luxembourgish                  case "lg": // Ganda                  case "lo": // Lao                  case "mas": // Masai                  case "ml": // Malayalam                  case "mn": // Mongolian                  case "mr": // Marathi                  case "nah": // Nahuatl                  case "nb": // Norwegian Bokmål                  case "ne": // Nepali                  case "nl": // Dutch                  case "nn": // Norwegian Nynorsk                  case "no": // Norwegian                  case "nyn": // Nyankole                  case "om": // Oromo                  case "or": // Oriya                  case "pa": // Punjabi                  case "pap": // Papiamento                  case "ps": // Pashto                  case "pt": // Portuguese                  case "rm": // Romansh                  case "saq": // Samburu                  case "so": // Somali                  case "sq": // Albanian                  case "ssy": // Saho                  case "sw": // Swahili                  case "sv": // Swedish                  case "syr": // Syriac                  case "ta": // Tamil                  case "te": // Telugu                  case "tk": // Turkmen                  case "tr": // Turkish                  case "ur": // Urdu                  case "wae": // Walser                  case "xog": // Soga                  case "zu": // Zulu                      return (n' c) =>                      {                          if (c == 2) return (n == 1) ? 0 : 1;                          if (c == 3) return (n == 0) ? 0 : (n == 1) ? 1 : 2;                          if (c == 4) return (n < 0) ? 0 : (n == 0) ? 1 : (n == 1) ? 2 : 3;                          return -1;                      };                    // DualWithZero: one (n == 0..1)' other                  case "ak": // Akan                  case "am": // Amharic                  case "bh": // Bihari                  case "fil": // Filipino                  case "guw": // Gun                  case "hi": // Hindi                  case "ln": // Lingala                  case "mg": // Malagasy                  case "nso": // Northern Sotho                  case "ti": // Tigrinya                  case "tl": // Tagalog                  case "wa": // Walloon                      return (n' c) => (n == 0 || n == 1) ? 0 : 1;                    // DualFromZeroToTwo: one (n == 0..2 fractionate and n != 2)' other                  case "ff": // Fulah                  case "fr": // French                  case "kab": // Kabyle                      return (n' c) => (n >= 0 && n < 2) ? 0 : 1;                    // Triple: one (n == 1)' two (n == 2)' other                  case "ga": // Irish                  case "iu": // Inuktitut                  case "ksh": // Colognian                  case "kw": // Cornish                  case "se": // Northern Sami                  case "sma": // Southern Sami                  case "smi": // Sami language                  case "smj": // Lule Sami                  case "smn": // Inari Sami                  case "sms": // Skolt Sami                      return (n' c) => (n == 1) ? 0 : (n == 2) ? 1 : 2;                    // Russian & Serbo-Croatian                  case "be": // Belarusian                  case "bs": // Bosnian                  case "hr": // Croatian                  case "ru": // Russian                  case "sh": // Serbo-Croatian                  case "sr": // Serbian                  case "uk": // Ukrainian                      return (n' c) =>                          (n % 10 == 1) && !(n % 100 == 11) ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          2;                    // Unique:                    // Arabic                  case "ar":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          (n % 100).Between(3' 10) ? 3 : // few                          (n % 100).Between(11' 99) ? 4 : // many                          5; // other                    // Breton                  case "br":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5; // other                    // Czech                  case "cs":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Welsh                  case "cy":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5;                    // Manx                  case "gv":                      return (n' c) =>                          (n % 10).Between(1' 2) || (n % 20) == 0 ? 0 :  // one                          1;                    // Langi                  case "lag":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n > 0) && (n < 2) ? 1 : // one                          2;                    // Lithuanian                  case "lt":                      return (n' c) =>                          (n % 10) == 1 && !(n % 100).Between(11' 19) ? 0 : // one                          (n % 10).Between(2' 9) && !(n % 100).Between(11' 19) ? 1 : // few                          2;                    // Latvian                  case "lv":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n % 10) == 1 && (n % 100) != 11 ? 1 :                          2;                    // Macedonian                  case "mb":                      return (n' c) =>                          (n % 10) == 1 && n != 11 ? 0 : // one                          1;                    // Moldavian                  case "mo":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n != 1 && (n % 100).Between(1' 19)) ? 1 : // few                          2;                    // Maltese                  case "mt":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(2' 10) ? 1 : // few                          (n % 100).Between(11' 19) ? 2 : // many                          3;                    // Polish                  case "pl":                      return (n' c) =>                          n == 1 ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          (n % 10).Between(0' 1) || (n % 10).Between(5' 9) || (n % 100).Between(12' 14) ? 2 : // many                          3;                    // Romanian                  case "ro":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(1' 19) ? 1 : // few                          2;                    // Tachelhit                  case "shi":                      return (n' c) =>                          (n >= 0 && n <= 1) ? 0 : // one                          n.Between(2' 10) ? 1 : // few                          2;                    // Slovak                  case "sk":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Slovenian                  case "sl":                      return (n' c) =>                          (n % 100) == 1 ? 0 : // one                          (n % 100) == 2 ? 1 : // two                          (n % 100).Between(3' 4) ? 2 : // few                          3;                    // Central Morocco Tamazight                  case "tzm":                      return (n' c) =>                          n.Between(0' 1) || n.Between(11' 99) ? 0 : // one                          1;                      // Unknown language                  default:                      return null;              }
Magic Number,SmartFormat.Extensions,CommonLanguageRules,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\PluralLocalizationFormatter.cs,GetPluralRule,The following statement contains a magic number: switch (twoLetterISOLanguageName)              {                  // Singular                  case "az": // Azerbaijani                  case "bm": // Bambara                  case "bo": // Tibetan                  case "dz": // Dzongkha                  case "fa": // Persian                  case "hu": // Hungarian                  case "id": // Indonesian                  case "ig": // Igbo                  case "ii": // Sichuan Yi                  case "ja": // Japanese                  case "jv": // Javanese                  case "ka": // Georgian                  case "kde": // Makonde                  case "kea": // Kabuverdianu                  case "km": // Khmer                  case "kn": // Kannada                  case "ko": // Korean                  case "ms": // Malay                  case "my": // Burmese                  case "root": // Root (?)                  case "sah": // Sakha                  case "ses": // Koyraboro Senni                  case "sg": // Sango                  case "th": // Thai                  case "to": // Tonga                  case "vi": // Vietnamese                  case "wo": // Wolof                  case "yo": // Yoruba                  case "zh": // Chinese                      return (n' c) => 0;                    // Dual: one (n == 1)' other                  case "af": // Afrikaans                  case "bem": // Bembda                  case "bg": // Bulgarian                  case "bn": // Bengali                  case "brx": // Bodo                  case "ca": // Catalan                  case "cgg": // Chiga                  case "chr": // Cherokee                  case "da": // Danish                  case "de": // German                  case "dv": // Divehi                  case "ee": // Ewe                  case "el": // Greek                  case "en": // English                  case "eo": // Esperanto                  case "es": // Spanish                  case "et": // Estonian                  case "eu": // Basque                  case "fi": // Finnish                  case "fo": // Faroese                  case "fur": // Friulian                  case "fy": // Western Frisian                  case "gl": // Galician                  case "gsw": // Swiss German                  case "gu": // Gujarati                  case "ha": // Hausa                  case "haw": // Hawaiian                  case "he": // Hebrew                  case "is": // Icelandic                  case "it": // Italian                  case "kk": // Kazakh                  case "kl": // Kalaallisut                  case "ku": // Kurdish                  case "lb": // Luxembourgish                  case "lg": // Ganda                  case "lo": // Lao                  case "mas": // Masai                  case "ml": // Malayalam                  case "mn": // Mongolian                  case "mr": // Marathi                  case "nah": // Nahuatl                  case "nb": // Norwegian Bokmål                  case "ne": // Nepali                  case "nl": // Dutch                  case "nn": // Norwegian Nynorsk                  case "no": // Norwegian                  case "nyn": // Nyankole                  case "om": // Oromo                  case "or": // Oriya                  case "pa": // Punjabi                  case "pap": // Papiamento                  case "ps": // Pashto                  case "pt": // Portuguese                  case "rm": // Romansh                  case "saq": // Samburu                  case "so": // Somali                  case "sq": // Albanian                  case "ssy": // Saho                  case "sw": // Swahili                  case "sv": // Swedish                  case "syr": // Syriac                  case "ta": // Tamil                  case "te": // Telugu                  case "tk": // Turkmen                  case "tr": // Turkish                  case "ur": // Urdu                  case "wae": // Walser                  case "xog": // Soga                  case "zu": // Zulu                      return (n' c) =>                      {                          if (c == 2) return (n == 1) ? 0 : 1;                          if (c == 3) return (n == 0) ? 0 : (n == 1) ? 1 : 2;                          if (c == 4) return (n < 0) ? 0 : (n == 0) ? 1 : (n == 1) ? 2 : 3;                          return -1;                      };                    // DualWithZero: one (n == 0..1)' other                  case "ak": // Akan                  case "am": // Amharic                  case "bh": // Bihari                  case "fil": // Filipino                  case "guw": // Gun                  case "hi": // Hindi                  case "ln": // Lingala                  case "mg": // Malagasy                  case "nso": // Northern Sotho                  case "ti": // Tigrinya                  case "tl": // Tagalog                  case "wa": // Walloon                      return (n' c) => (n == 0 || n == 1) ? 0 : 1;                    // DualFromZeroToTwo: one (n == 0..2 fractionate and n != 2)' other                  case "ff": // Fulah                  case "fr": // French                  case "kab": // Kabyle                      return (n' c) => (n >= 0 && n < 2) ? 0 : 1;                    // Triple: one (n == 1)' two (n == 2)' other                  case "ga": // Irish                  case "iu": // Inuktitut                  case "ksh": // Colognian                  case "kw": // Cornish                  case "se": // Northern Sami                  case "sma": // Southern Sami                  case "smi": // Sami language                  case "smj": // Lule Sami                  case "smn": // Inari Sami                  case "sms": // Skolt Sami                      return (n' c) => (n == 1) ? 0 : (n == 2) ? 1 : 2;                    // Russian & Serbo-Croatian                  case "be": // Belarusian                  case "bs": // Bosnian                  case "hr": // Croatian                  case "ru": // Russian                  case "sh": // Serbo-Croatian                  case "sr": // Serbian                  case "uk": // Ukrainian                      return (n' c) =>                          (n % 10 == 1) && !(n % 100 == 11) ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          2;                    // Unique:                    // Arabic                  case "ar":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          (n % 100).Between(3' 10) ? 3 : // few                          (n % 100).Between(11' 99) ? 4 : // many                          5; // other                    // Breton                  case "br":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5; // other                    // Czech                  case "cs":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Welsh                  case "cy":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5;                    // Manx                  case "gv":                      return (n' c) =>                          (n % 10).Between(1' 2) || (n % 20) == 0 ? 0 :  // one                          1;                    // Langi                  case "lag":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n > 0) && (n < 2) ? 1 : // one                          2;                    // Lithuanian                  case "lt":                      return (n' c) =>                          (n % 10) == 1 && !(n % 100).Between(11' 19) ? 0 : // one                          (n % 10).Between(2' 9) && !(n % 100).Between(11' 19) ? 1 : // few                          2;                    // Latvian                  case "lv":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n % 10) == 1 && (n % 100) != 11 ? 1 :                          2;                    // Macedonian                  case "mb":                      return (n' c) =>                          (n % 10) == 1 && n != 11 ? 0 : // one                          1;                    // Moldavian                  case "mo":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n != 1 && (n % 100).Between(1' 19)) ? 1 : // few                          2;                    // Maltese                  case "mt":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(2' 10) ? 1 : // few                          (n % 100).Between(11' 19) ? 2 : // many                          3;                    // Polish                  case "pl":                      return (n' c) =>                          n == 1 ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          (n % 10).Between(0' 1) || (n % 10).Between(5' 9) || (n % 100).Between(12' 14) ? 2 : // many                          3;                    // Romanian                  case "ro":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(1' 19) ? 1 : // few                          2;                    // Tachelhit                  case "shi":                      return (n' c) =>                          (n >= 0 && n <= 1) ? 0 : // one                          n.Between(2' 10) ? 1 : // few                          2;                    // Slovak                  case "sk":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Slovenian                  case "sl":                      return (n' c) =>                          (n % 100) == 1 ? 0 : // one                          (n % 100) == 2 ? 1 : // two                          (n % 100).Between(3' 4) ? 2 : // few                          3;                    // Central Morocco Tamazight                  case "tzm":                      return (n' c) =>                          n.Between(0' 1) || n.Between(11' 99) ? 0 : // one                          1;                      // Unknown language                  default:                      return null;              }
Magic Number,SmartFormat.Extensions,CommonLanguageRules,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\PluralLocalizationFormatter.cs,GetPluralRule,The following statement contains a magic number: switch (twoLetterISOLanguageName)              {                  // Singular                  case "az": // Azerbaijani                  case "bm": // Bambara                  case "bo": // Tibetan                  case "dz": // Dzongkha                  case "fa": // Persian                  case "hu": // Hungarian                  case "id": // Indonesian                  case "ig": // Igbo                  case "ii": // Sichuan Yi                  case "ja": // Japanese                  case "jv": // Javanese                  case "ka": // Georgian                  case "kde": // Makonde                  case "kea": // Kabuverdianu                  case "km": // Khmer                  case "kn": // Kannada                  case "ko": // Korean                  case "ms": // Malay                  case "my": // Burmese                  case "root": // Root (?)                  case "sah": // Sakha                  case "ses": // Koyraboro Senni                  case "sg": // Sango                  case "th": // Thai                  case "to": // Tonga                  case "vi": // Vietnamese                  case "wo": // Wolof                  case "yo": // Yoruba                  case "zh": // Chinese                      return (n' c) => 0;                    // Dual: one (n == 1)' other                  case "af": // Afrikaans                  case "bem": // Bembda                  case "bg": // Bulgarian                  case "bn": // Bengali                  case "brx": // Bodo                  case "ca": // Catalan                  case "cgg": // Chiga                  case "chr": // Cherokee                  case "da": // Danish                  case "de": // German                  case "dv": // Divehi                  case "ee": // Ewe                  case "el": // Greek                  case "en": // English                  case "eo": // Esperanto                  case "es": // Spanish                  case "et": // Estonian                  case "eu": // Basque                  case "fi": // Finnish                  case "fo": // Faroese                  case "fur": // Friulian                  case "fy": // Western Frisian                  case "gl": // Galician                  case "gsw": // Swiss German                  case "gu": // Gujarati                  case "ha": // Hausa                  case "haw": // Hawaiian                  case "he": // Hebrew                  case "is": // Icelandic                  case "it": // Italian                  case "kk": // Kazakh                  case "kl": // Kalaallisut                  case "ku": // Kurdish                  case "lb": // Luxembourgish                  case "lg": // Ganda                  case "lo": // Lao                  case "mas": // Masai                  case "ml": // Malayalam                  case "mn": // Mongolian                  case "mr": // Marathi                  case "nah": // Nahuatl                  case "nb": // Norwegian Bokmål                  case "ne": // Nepali                  case "nl": // Dutch                  case "nn": // Norwegian Nynorsk                  case "no": // Norwegian                  case "nyn": // Nyankole                  case "om": // Oromo                  case "or": // Oriya                  case "pa": // Punjabi                  case "pap": // Papiamento                  case "ps": // Pashto                  case "pt": // Portuguese                  case "rm": // Romansh                  case "saq": // Samburu                  case "so": // Somali                  case "sq": // Albanian                  case "ssy": // Saho                  case "sw": // Swahili                  case "sv": // Swedish                  case "syr": // Syriac                  case "ta": // Tamil                  case "te": // Telugu                  case "tk": // Turkmen                  case "tr": // Turkish                  case "ur": // Urdu                  case "wae": // Walser                  case "xog": // Soga                  case "zu": // Zulu                      return (n' c) =>                      {                          if (c == 2) return (n == 1) ? 0 : 1;                          if (c == 3) return (n == 0) ? 0 : (n == 1) ? 1 : 2;                          if (c == 4) return (n < 0) ? 0 : (n == 0) ? 1 : (n == 1) ? 2 : 3;                          return -1;                      };                    // DualWithZero: one (n == 0..1)' other                  case "ak": // Akan                  case "am": // Amharic                  case "bh": // Bihari                  case "fil": // Filipino                  case "guw": // Gun                  case "hi": // Hindi                  case "ln": // Lingala                  case "mg": // Malagasy                  case "nso": // Northern Sotho                  case "ti": // Tigrinya                  case "tl": // Tagalog                  case "wa": // Walloon                      return (n' c) => (n == 0 || n == 1) ? 0 : 1;                    // DualFromZeroToTwo: one (n == 0..2 fractionate and n != 2)' other                  case "ff": // Fulah                  case "fr": // French                  case "kab": // Kabyle                      return (n' c) => (n >= 0 && n < 2) ? 0 : 1;                    // Triple: one (n == 1)' two (n == 2)' other                  case "ga": // Irish                  case "iu": // Inuktitut                  case "ksh": // Colognian                  case "kw": // Cornish                  case "se": // Northern Sami                  case "sma": // Southern Sami                  case "smi": // Sami language                  case "smj": // Lule Sami                  case "smn": // Inari Sami                  case "sms": // Skolt Sami                      return (n' c) => (n == 1) ? 0 : (n == 2) ? 1 : 2;                    // Russian & Serbo-Croatian                  case "be": // Belarusian                  case "bs": // Bosnian                  case "hr": // Croatian                  case "ru": // Russian                  case "sh": // Serbo-Croatian                  case "sr": // Serbian                  case "uk": // Ukrainian                      return (n' c) =>                          (n % 10 == 1) && !(n % 100 == 11) ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          2;                    // Unique:                    // Arabic                  case "ar":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          (n % 100).Between(3' 10) ? 3 : // few                          (n % 100).Between(11' 99) ? 4 : // many                          5; // other                    // Breton                  case "br":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5; // other                    // Czech                  case "cs":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Welsh                  case "cy":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5;                    // Manx                  case "gv":                      return (n' c) =>                          (n % 10).Between(1' 2) || (n % 20) == 0 ? 0 :  // one                          1;                    // Langi                  case "lag":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n > 0) && (n < 2) ? 1 : // one                          2;                    // Lithuanian                  case "lt":                      return (n' c) =>                          (n % 10) == 1 && !(n % 100).Between(11' 19) ? 0 : // one                          (n % 10).Between(2' 9) && !(n % 100).Between(11' 19) ? 1 : // few                          2;                    // Latvian                  case "lv":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n % 10) == 1 && (n % 100) != 11 ? 1 :                          2;                    // Macedonian                  case "mb":                      return (n' c) =>                          (n % 10) == 1 && n != 11 ? 0 : // one                          1;                    // Moldavian                  case "mo":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n != 1 && (n % 100).Between(1' 19)) ? 1 : // few                          2;                    // Maltese                  case "mt":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(2' 10) ? 1 : // few                          (n % 100).Between(11' 19) ? 2 : // many                          3;                    // Polish                  case "pl":                      return (n' c) =>                          n == 1 ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          (n % 10).Between(0' 1) || (n % 10).Between(5' 9) || (n % 100).Between(12' 14) ? 2 : // many                          3;                    // Romanian                  case "ro":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(1' 19) ? 1 : // few                          2;                    // Tachelhit                  case "shi":                      return (n' c) =>                          (n >= 0 && n <= 1) ? 0 : // one                          n.Between(2' 10) ? 1 : // few                          2;                    // Slovak                  case "sk":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Slovenian                  case "sl":                      return (n' c) =>                          (n % 100) == 1 ? 0 : // one                          (n % 100) == 2 ? 1 : // two                          (n % 100).Between(3' 4) ? 2 : // few                          3;                    // Central Morocco Tamazight                  case "tzm":                      return (n' c) =>                          n.Between(0' 1) || n.Between(11' 99) ? 0 : // one                          1;                      // Unknown language                  default:                      return null;              }
Magic Number,SmartFormat.Extensions,CommonLanguageRules,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\PluralLocalizationFormatter.cs,GetPluralRule,The following statement contains a magic number: switch (twoLetterISOLanguageName)              {                  // Singular                  case "az": // Azerbaijani                  case "bm": // Bambara                  case "bo": // Tibetan                  case "dz": // Dzongkha                  case "fa": // Persian                  case "hu": // Hungarian                  case "id": // Indonesian                  case "ig": // Igbo                  case "ii": // Sichuan Yi                  case "ja": // Japanese                  case "jv": // Javanese                  case "ka": // Georgian                  case "kde": // Makonde                  case "kea": // Kabuverdianu                  case "km": // Khmer                  case "kn": // Kannada                  case "ko": // Korean                  case "ms": // Malay                  case "my": // Burmese                  case "root": // Root (?)                  case "sah": // Sakha                  case "ses": // Koyraboro Senni                  case "sg": // Sango                  case "th": // Thai                  case "to": // Tonga                  case "vi": // Vietnamese                  case "wo": // Wolof                  case "yo": // Yoruba                  case "zh": // Chinese                      return (n' c) => 0;                    // Dual: one (n == 1)' other                  case "af": // Afrikaans                  case "bem": // Bembda                  case "bg": // Bulgarian                  case "bn": // Bengali                  case "brx": // Bodo                  case "ca": // Catalan                  case "cgg": // Chiga                  case "chr": // Cherokee                  case "da": // Danish                  case "de": // German                  case "dv": // Divehi                  case "ee": // Ewe                  case "el": // Greek                  case "en": // English                  case "eo": // Esperanto                  case "es": // Spanish                  case "et": // Estonian                  case "eu": // Basque                  case "fi": // Finnish                  case "fo": // Faroese                  case "fur": // Friulian                  case "fy": // Western Frisian                  case "gl": // Galician                  case "gsw": // Swiss German                  case "gu": // Gujarati                  case "ha": // Hausa                  case "haw": // Hawaiian                  case "he": // Hebrew                  case "is": // Icelandic                  case "it": // Italian                  case "kk": // Kazakh                  case "kl": // Kalaallisut                  case "ku": // Kurdish                  case "lb": // Luxembourgish                  case "lg": // Ganda                  case "lo": // Lao                  case "mas": // Masai                  case "ml": // Malayalam                  case "mn": // Mongolian                  case "mr": // Marathi                  case "nah": // Nahuatl                  case "nb": // Norwegian Bokmål                  case "ne": // Nepali                  case "nl": // Dutch                  case "nn": // Norwegian Nynorsk                  case "no": // Norwegian                  case "nyn": // Nyankole                  case "om": // Oromo                  case "or": // Oriya                  case "pa": // Punjabi                  case "pap": // Papiamento                  case "ps": // Pashto                  case "pt": // Portuguese                  case "rm": // Romansh                  case "saq": // Samburu                  case "so": // Somali                  case "sq": // Albanian                  case "ssy": // Saho                  case "sw": // Swahili                  case "sv": // Swedish                  case "syr": // Syriac                  case "ta": // Tamil                  case "te": // Telugu                  case "tk": // Turkmen                  case "tr": // Turkish                  case "ur": // Urdu                  case "wae": // Walser                  case "xog": // Soga                  case "zu": // Zulu                      return (n' c) =>                      {                          if (c == 2) return (n == 1) ? 0 : 1;                          if (c == 3) return (n == 0) ? 0 : (n == 1) ? 1 : 2;                          if (c == 4) return (n < 0) ? 0 : (n == 0) ? 1 : (n == 1) ? 2 : 3;                          return -1;                      };                    // DualWithZero: one (n == 0..1)' other                  case "ak": // Akan                  case "am": // Amharic                  case "bh": // Bihari                  case "fil": // Filipino                  case "guw": // Gun                  case "hi": // Hindi                  case "ln": // Lingala                  case "mg": // Malagasy                  case "nso": // Northern Sotho                  case "ti": // Tigrinya                  case "tl": // Tagalog                  case "wa": // Walloon                      return (n' c) => (n == 0 || n == 1) ? 0 : 1;                    // DualFromZeroToTwo: one (n == 0..2 fractionate and n != 2)' other                  case "ff": // Fulah                  case "fr": // French                  case "kab": // Kabyle                      return (n' c) => (n >= 0 && n < 2) ? 0 : 1;                    // Triple: one (n == 1)' two (n == 2)' other                  case "ga": // Irish                  case "iu": // Inuktitut                  case "ksh": // Colognian                  case "kw": // Cornish                  case "se": // Northern Sami                  case "sma": // Southern Sami                  case "smi": // Sami language                  case "smj": // Lule Sami                  case "smn": // Inari Sami                  case "sms": // Skolt Sami                      return (n' c) => (n == 1) ? 0 : (n == 2) ? 1 : 2;                    // Russian & Serbo-Croatian                  case "be": // Belarusian                  case "bs": // Bosnian                  case "hr": // Croatian                  case "ru": // Russian                  case "sh": // Serbo-Croatian                  case "sr": // Serbian                  case "uk": // Ukrainian                      return (n' c) =>                          (n % 10 == 1) && !(n % 100 == 11) ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          2;                    // Unique:                    // Arabic                  case "ar":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          (n % 100).Between(3' 10) ? 3 : // few                          (n % 100).Between(11' 99) ? 4 : // many                          5; // other                    // Breton                  case "br":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5; // other                    // Czech                  case "cs":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Welsh                  case "cy":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5;                    // Manx                  case "gv":                      return (n' c) =>                          (n % 10).Between(1' 2) || (n % 20) == 0 ? 0 :  // one                          1;                    // Langi                  case "lag":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n > 0) && (n < 2) ? 1 : // one                          2;                    // Lithuanian                  case "lt":                      return (n' c) =>                          (n % 10) == 1 && !(n % 100).Between(11' 19) ? 0 : // one                          (n % 10).Between(2' 9) && !(n % 100).Between(11' 19) ? 1 : // few                          2;                    // Latvian                  case "lv":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n % 10) == 1 && (n % 100) != 11 ? 1 :                          2;                    // Macedonian                  case "mb":                      return (n' c) =>                          (n % 10) == 1 && n != 11 ? 0 : // one                          1;                    // Moldavian                  case "mo":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n != 1 && (n % 100).Between(1' 19)) ? 1 : // few                          2;                    // Maltese                  case "mt":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(2' 10) ? 1 : // few                          (n % 100).Between(11' 19) ? 2 : // many                          3;                    // Polish                  case "pl":                      return (n' c) =>                          n == 1 ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          (n % 10).Between(0' 1) || (n % 10).Between(5' 9) || (n % 100).Between(12' 14) ? 2 : // many                          3;                    // Romanian                  case "ro":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(1' 19) ? 1 : // few                          2;                    // Tachelhit                  case "shi":                      return (n' c) =>                          (n >= 0 && n <= 1) ? 0 : // one                          n.Between(2' 10) ? 1 : // few                          2;                    // Slovak                  case "sk":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Slovenian                  case "sl":                      return (n' c) =>                          (n % 100) == 1 ? 0 : // one                          (n % 100) == 2 ? 1 : // two                          (n % 100).Between(3' 4) ? 2 : // few                          3;                    // Central Morocco Tamazight                  case "tzm":                      return (n' c) =>                          n.Between(0' 1) || n.Between(11' 99) ? 0 : // one                          1;                      // Unknown language                  default:                      return null;              }
Magic Number,SmartFormat.Extensions,CommonLanguageRules,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\PluralLocalizationFormatter.cs,GetPluralRule,The following statement contains a magic number: switch (twoLetterISOLanguageName)              {                  // Singular                  case "az": // Azerbaijani                  case "bm": // Bambara                  case "bo": // Tibetan                  case "dz": // Dzongkha                  case "fa": // Persian                  case "hu": // Hungarian                  case "id": // Indonesian                  case "ig": // Igbo                  case "ii": // Sichuan Yi                  case "ja": // Japanese                  case "jv": // Javanese                  case "ka": // Georgian                  case "kde": // Makonde                  case "kea": // Kabuverdianu                  case "km": // Khmer                  case "kn": // Kannada                  case "ko": // Korean                  case "ms": // Malay                  case "my": // Burmese                  case "root": // Root (?)                  case "sah": // Sakha                  case "ses": // Koyraboro Senni                  case "sg": // Sango                  case "th": // Thai                  case "to": // Tonga                  case "vi": // Vietnamese                  case "wo": // Wolof                  case "yo": // Yoruba                  case "zh": // Chinese                      return (n' c) => 0;                    // Dual: one (n == 1)' other                  case "af": // Afrikaans                  case "bem": // Bembda                  case "bg": // Bulgarian                  case "bn": // Bengali                  case "brx": // Bodo                  case "ca": // Catalan                  case "cgg": // Chiga                  case "chr": // Cherokee                  case "da": // Danish                  case "de": // German                  case "dv": // Divehi                  case "ee": // Ewe                  case "el": // Greek                  case "en": // English                  case "eo": // Esperanto                  case "es": // Spanish                  case "et": // Estonian                  case "eu": // Basque                  case "fi": // Finnish                  case "fo": // Faroese                  case "fur": // Friulian                  case "fy": // Western Frisian                  case "gl": // Galician                  case "gsw": // Swiss German                  case "gu": // Gujarati                  case "ha": // Hausa                  case "haw": // Hawaiian                  case "he": // Hebrew                  case "is": // Icelandic                  case "it": // Italian                  case "kk": // Kazakh                  case "kl": // Kalaallisut                  case "ku": // Kurdish                  case "lb": // Luxembourgish                  case "lg": // Ganda                  case "lo": // Lao                  case "mas": // Masai                  case "ml": // Malayalam                  case "mn": // Mongolian                  case "mr": // Marathi                  case "nah": // Nahuatl                  case "nb": // Norwegian Bokmål                  case "ne": // Nepali                  case "nl": // Dutch                  case "nn": // Norwegian Nynorsk                  case "no": // Norwegian                  case "nyn": // Nyankole                  case "om": // Oromo                  case "or": // Oriya                  case "pa": // Punjabi                  case "pap": // Papiamento                  case "ps": // Pashto                  case "pt": // Portuguese                  case "rm": // Romansh                  case "saq": // Samburu                  case "so": // Somali                  case "sq": // Albanian                  case "ssy": // Saho                  case "sw": // Swahili                  case "sv": // Swedish                  case "syr": // Syriac                  case "ta": // Tamil                  case "te": // Telugu                  case "tk": // Turkmen                  case "tr": // Turkish                  case "ur": // Urdu                  case "wae": // Walser                  case "xog": // Soga                  case "zu": // Zulu                      return (n' c) =>                      {                          if (c == 2) return (n == 1) ? 0 : 1;                          if (c == 3) return (n == 0) ? 0 : (n == 1) ? 1 : 2;                          if (c == 4) return (n < 0) ? 0 : (n == 0) ? 1 : (n == 1) ? 2 : 3;                          return -1;                      };                    // DualWithZero: one (n == 0..1)' other                  case "ak": // Akan                  case "am": // Amharic                  case "bh": // Bihari                  case "fil": // Filipino                  case "guw": // Gun                  case "hi": // Hindi                  case "ln": // Lingala                  case "mg": // Malagasy                  case "nso": // Northern Sotho                  case "ti": // Tigrinya                  case "tl": // Tagalog                  case "wa": // Walloon                      return (n' c) => (n == 0 || n == 1) ? 0 : 1;                    // DualFromZeroToTwo: one (n == 0..2 fractionate and n != 2)' other                  case "ff": // Fulah                  case "fr": // French                  case "kab": // Kabyle                      return (n' c) => (n >= 0 && n < 2) ? 0 : 1;                    // Triple: one (n == 1)' two (n == 2)' other                  case "ga": // Irish                  case "iu": // Inuktitut                  case "ksh": // Colognian                  case "kw": // Cornish                  case "se": // Northern Sami                  case "sma": // Southern Sami                  case "smi": // Sami language                  case "smj": // Lule Sami                  case "smn": // Inari Sami                  case "sms": // Skolt Sami                      return (n' c) => (n == 1) ? 0 : (n == 2) ? 1 : 2;                    // Russian & Serbo-Croatian                  case "be": // Belarusian                  case "bs": // Bosnian                  case "hr": // Croatian                  case "ru": // Russian                  case "sh": // Serbo-Croatian                  case "sr": // Serbian                  case "uk": // Ukrainian                      return (n' c) =>                          (n % 10 == 1) && !(n % 100 == 11) ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          2;                    // Unique:                    // Arabic                  case "ar":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          (n % 100).Between(3' 10) ? 3 : // few                          (n % 100).Between(11' 99) ? 4 : // many                          5; // other                    // Breton                  case "br":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5; // other                    // Czech                  case "cs":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Welsh                  case "cy":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5;                    // Manx                  case "gv":                      return (n' c) =>                          (n % 10).Between(1' 2) || (n % 20) == 0 ? 0 :  // one                          1;                    // Langi                  case "lag":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n > 0) && (n < 2) ? 1 : // one                          2;                    // Lithuanian                  case "lt":                      return (n' c) =>                          (n % 10) == 1 && !(n % 100).Between(11' 19) ? 0 : // one                          (n % 10).Between(2' 9) && !(n % 100).Between(11' 19) ? 1 : // few                          2;                    // Latvian                  case "lv":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n % 10) == 1 && (n % 100) != 11 ? 1 :                          2;                    // Macedonian                  case "mb":                      return (n' c) =>                          (n % 10) == 1 && n != 11 ? 0 : // one                          1;                    // Moldavian                  case "mo":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n != 1 && (n % 100).Between(1' 19)) ? 1 : // few                          2;                    // Maltese                  case "mt":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(2' 10) ? 1 : // few                          (n % 100).Between(11' 19) ? 2 : // many                          3;                    // Polish                  case "pl":                      return (n' c) =>                          n == 1 ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          (n % 10).Between(0' 1) || (n % 10).Between(5' 9) || (n % 100).Between(12' 14) ? 2 : // many                          3;                    // Romanian                  case "ro":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(1' 19) ? 1 : // few                          2;                    // Tachelhit                  case "shi":                      return (n' c) =>                          (n >= 0 && n <= 1) ? 0 : // one                          n.Between(2' 10) ? 1 : // few                          2;                    // Slovak                  case "sk":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Slovenian                  case "sl":                      return (n' c) =>                          (n % 100) == 1 ? 0 : // one                          (n % 100) == 2 ? 1 : // two                          (n % 100).Between(3' 4) ? 2 : // few                          3;                    // Central Morocco Tamazight                  case "tzm":                      return (n' c) =>                          n.Between(0' 1) || n.Between(11' 99) ? 0 : // one                          1;                      // Unknown language                  default:                      return null;              }
Magic Number,SmartFormat.Extensions,CommonLanguageRules,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\PluralLocalizationFormatter.cs,GetPluralRule,The following statement contains a magic number: switch (twoLetterISOLanguageName)              {                  // Singular                  case "az": // Azerbaijani                  case "bm": // Bambara                  case "bo": // Tibetan                  case "dz": // Dzongkha                  case "fa": // Persian                  case "hu": // Hungarian                  case "id": // Indonesian                  case "ig": // Igbo                  case "ii": // Sichuan Yi                  case "ja": // Japanese                  case "jv": // Javanese                  case "ka": // Georgian                  case "kde": // Makonde                  case "kea": // Kabuverdianu                  case "km": // Khmer                  case "kn": // Kannada                  case "ko": // Korean                  case "ms": // Malay                  case "my": // Burmese                  case "root": // Root (?)                  case "sah": // Sakha                  case "ses": // Koyraboro Senni                  case "sg": // Sango                  case "th": // Thai                  case "to": // Tonga                  case "vi": // Vietnamese                  case "wo": // Wolof                  case "yo": // Yoruba                  case "zh": // Chinese                      return (n' c) => 0;                    // Dual: one (n == 1)' other                  case "af": // Afrikaans                  case "bem": // Bembda                  case "bg": // Bulgarian                  case "bn": // Bengali                  case "brx": // Bodo                  case "ca": // Catalan                  case "cgg": // Chiga                  case "chr": // Cherokee                  case "da": // Danish                  case "de": // German                  case "dv": // Divehi                  case "ee": // Ewe                  case "el": // Greek                  case "en": // English                  case "eo": // Esperanto                  case "es": // Spanish                  case "et": // Estonian                  case "eu": // Basque                  case "fi": // Finnish                  case "fo": // Faroese                  case "fur": // Friulian                  case "fy": // Western Frisian                  case "gl": // Galician                  case "gsw": // Swiss German                  case "gu": // Gujarati                  case "ha": // Hausa                  case "haw": // Hawaiian                  case "he": // Hebrew                  case "is": // Icelandic                  case "it": // Italian                  case "kk": // Kazakh                  case "kl": // Kalaallisut                  case "ku": // Kurdish                  case "lb": // Luxembourgish                  case "lg": // Ganda                  case "lo": // Lao                  case "mas": // Masai                  case "ml": // Malayalam                  case "mn": // Mongolian                  case "mr": // Marathi                  case "nah": // Nahuatl                  case "nb": // Norwegian Bokmål                  case "ne": // Nepali                  case "nl": // Dutch                  case "nn": // Norwegian Nynorsk                  case "no": // Norwegian                  case "nyn": // Nyankole                  case "om": // Oromo                  case "or": // Oriya                  case "pa": // Punjabi                  case "pap": // Papiamento                  case "ps": // Pashto                  case "pt": // Portuguese                  case "rm": // Romansh                  case "saq": // Samburu                  case "so": // Somali                  case "sq": // Albanian                  case "ssy": // Saho                  case "sw": // Swahili                  case "sv": // Swedish                  case "syr": // Syriac                  case "ta": // Tamil                  case "te": // Telugu                  case "tk": // Turkmen                  case "tr": // Turkish                  case "ur": // Urdu                  case "wae": // Walser                  case "xog": // Soga                  case "zu": // Zulu                      return (n' c) =>                      {                          if (c == 2) return (n == 1) ? 0 : 1;                          if (c == 3) return (n == 0) ? 0 : (n == 1) ? 1 : 2;                          if (c == 4) return (n < 0) ? 0 : (n == 0) ? 1 : (n == 1) ? 2 : 3;                          return -1;                      };                    // DualWithZero: one (n == 0..1)' other                  case "ak": // Akan                  case "am": // Amharic                  case "bh": // Bihari                  case "fil": // Filipino                  case "guw": // Gun                  case "hi": // Hindi                  case "ln": // Lingala                  case "mg": // Malagasy                  case "nso": // Northern Sotho                  case "ti": // Tigrinya                  case "tl": // Tagalog                  case "wa": // Walloon                      return (n' c) => (n == 0 || n == 1) ? 0 : 1;                    // DualFromZeroToTwo: one (n == 0..2 fractionate and n != 2)' other                  case "ff": // Fulah                  case "fr": // French                  case "kab": // Kabyle                      return (n' c) => (n >= 0 && n < 2) ? 0 : 1;                    // Triple: one (n == 1)' two (n == 2)' other                  case "ga": // Irish                  case "iu": // Inuktitut                  case "ksh": // Colognian                  case "kw": // Cornish                  case "se": // Northern Sami                  case "sma": // Southern Sami                  case "smi": // Sami language                  case "smj": // Lule Sami                  case "smn": // Inari Sami                  case "sms": // Skolt Sami                      return (n' c) => (n == 1) ? 0 : (n == 2) ? 1 : 2;                    // Russian & Serbo-Croatian                  case "be": // Belarusian                  case "bs": // Bosnian                  case "hr": // Croatian                  case "ru": // Russian                  case "sh": // Serbo-Croatian                  case "sr": // Serbian                  case "uk": // Ukrainian                      return (n' c) =>                          (n % 10 == 1) && !(n % 100 == 11) ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          2;                    // Unique:                    // Arabic                  case "ar":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          (n % 100).Between(3' 10) ? 3 : // few                          (n % 100).Between(11' 99) ? 4 : // many                          5; // other                    // Breton                  case "br":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5; // other                    // Czech                  case "cs":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Welsh                  case "cy":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5;                    // Manx                  case "gv":                      return (n' c) =>                          (n % 10).Between(1' 2) || (n % 20) == 0 ? 0 :  // one                          1;                    // Langi                  case "lag":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n > 0) && (n < 2) ? 1 : // one                          2;                    // Lithuanian                  case "lt":                      return (n' c) =>                          (n % 10) == 1 && !(n % 100).Between(11' 19) ? 0 : // one                          (n % 10).Between(2' 9) && !(n % 100).Between(11' 19) ? 1 : // few                          2;                    // Latvian                  case "lv":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n % 10) == 1 && (n % 100) != 11 ? 1 :                          2;                    // Macedonian                  case "mb":                      return (n' c) =>                          (n % 10) == 1 && n != 11 ? 0 : // one                          1;                    // Moldavian                  case "mo":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n != 1 && (n % 100).Between(1' 19)) ? 1 : // few                          2;                    // Maltese                  case "mt":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(2' 10) ? 1 : // few                          (n % 100).Between(11' 19) ? 2 : // many                          3;                    // Polish                  case "pl":                      return (n' c) =>                          n == 1 ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          (n % 10).Between(0' 1) || (n % 10).Between(5' 9) || (n % 100).Between(12' 14) ? 2 : // many                          3;                    // Romanian                  case "ro":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(1' 19) ? 1 : // few                          2;                    // Tachelhit                  case "shi":                      return (n' c) =>                          (n >= 0 && n <= 1) ? 0 : // one                          n.Between(2' 10) ? 1 : // few                          2;                    // Slovak                  case "sk":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Slovenian                  case "sl":                      return (n' c) =>                          (n % 100) == 1 ? 0 : // one                          (n % 100) == 2 ? 1 : // two                          (n % 100).Between(3' 4) ? 2 : // few                          3;                    // Central Morocco Tamazight                  case "tzm":                      return (n' c) =>                          n.Between(0' 1) || n.Between(11' 99) ? 0 : // one                          1;                      // Unknown language                  default:                      return null;              }
Magic Number,SmartFormat.Extensions,CommonLanguageRules,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\PluralLocalizationFormatter.cs,GetPluralRule,The following statement contains a magic number: switch (twoLetterISOLanguageName)              {                  // Singular                  case "az": // Azerbaijani                  case "bm": // Bambara                  case "bo": // Tibetan                  case "dz": // Dzongkha                  case "fa": // Persian                  case "hu": // Hungarian                  case "id": // Indonesian                  case "ig": // Igbo                  case "ii": // Sichuan Yi                  case "ja": // Japanese                  case "jv": // Javanese                  case "ka": // Georgian                  case "kde": // Makonde                  case "kea": // Kabuverdianu                  case "km": // Khmer                  case "kn": // Kannada                  case "ko": // Korean                  case "ms": // Malay                  case "my": // Burmese                  case "root": // Root (?)                  case "sah": // Sakha                  case "ses": // Koyraboro Senni                  case "sg": // Sango                  case "th": // Thai                  case "to": // Tonga                  case "vi": // Vietnamese                  case "wo": // Wolof                  case "yo": // Yoruba                  case "zh": // Chinese                      return (n' c) => 0;                    // Dual: one (n == 1)' other                  case "af": // Afrikaans                  case "bem": // Bembda                  case "bg": // Bulgarian                  case "bn": // Bengali                  case "brx": // Bodo                  case "ca": // Catalan                  case "cgg": // Chiga                  case "chr": // Cherokee                  case "da": // Danish                  case "de": // German                  case "dv": // Divehi                  case "ee": // Ewe                  case "el": // Greek                  case "en": // English                  case "eo": // Esperanto                  case "es": // Spanish                  case "et": // Estonian                  case "eu": // Basque                  case "fi": // Finnish                  case "fo": // Faroese                  case "fur": // Friulian                  case "fy": // Western Frisian                  case "gl": // Galician                  case "gsw": // Swiss German                  case "gu": // Gujarati                  case "ha": // Hausa                  case "haw": // Hawaiian                  case "he": // Hebrew                  case "is": // Icelandic                  case "it": // Italian                  case "kk": // Kazakh                  case "kl": // Kalaallisut                  case "ku": // Kurdish                  case "lb": // Luxembourgish                  case "lg": // Ganda                  case "lo": // Lao                  case "mas": // Masai                  case "ml": // Malayalam                  case "mn": // Mongolian                  case "mr": // Marathi                  case "nah": // Nahuatl                  case "nb": // Norwegian Bokmål                  case "ne": // Nepali                  case "nl": // Dutch                  case "nn": // Norwegian Nynorsk                  case "no": // Norwegian                  case "nyn": // Nyankole                  case "om": // Oromo                  case "or": // Oriya                  case "pa": // Punjabi                  case "pap": // Papiamento                  case "ps": // Pashto                  case "pt": // Portuguese                  case "rm": // Romansh                  case "saq": // Samburu                  case "so": // Somali                  case "sq": // Albanian                  case "ssy": // Saho                  case "sw": // Swahili                  case "sv": // Swedish                  case "syr": // Syriac                  case "ta": // Tamil                  case "te": // Telugu                  case "tk": // Turkmen                  case "tr": // Turkish                  case "ur": // Urdu                  case "wae": // Walser                  case "xog": // Soga                  case "zu": // Zulu                      return (n' c) =>                      {                          if (c == 2) return (n == 1) ? 0 : 1;                          if (c == 3) return (n == 0) ? 0 : (n == 1) ? 1 : 2;                          if (c == 4) return (n < 0) ? 0 : (n == 0) ? 1 : (n == 1) ? 2 : 3;                          return -1;                      };                    // DualWithZero: one (n == 0..1)' other                  case "ak": // Akan                  case "am": // Amharic                  case "bh": // Bihari                  case "fil": // Filipino                  case "guw": // Gun                  case "hi": // Hindi                  case "ln": // Lingala                  case "mg": // Malagasy                  case "nso": // Northern Sotho                  case "ti": // Tigrinya                  case "tl": // Tagalog                  case "wa": // Walloon                      return (n' c) => (n == 0 || n == 1) ? 0 : 1;                    // DualFromZeroToTwo: one (n == 0..2 fractionate and n != 2)' other                  case "ff": // Fulah                  case "fr": // French                  case "kab": // Kabyle                      return (n' c) => (n >= 0 && n < 2) ? 0 : 1;                    // Triple: one (n == 1)' two (n == 2)' other                  case "ga": // Irish                  case "iu": // Inuktitut                  case "ksh": // Colognian                  case "kw": // Cornish                  case "se": // Northern Sami                  case "sma": // Southern Sami                  case "smi": // Sami language                  case "smj": // Lule Sami                  case "smn": // Inari Sami                  case "sms": // Skolt Sami                      return (n' c) => (n == 1) ? 0 : (n == 2) ? 1 : 2;                    // Russian & Serbo-Croatian                  case "be": // Belarusian                  case "bs": // Bosnian                  case "hr": // Croatian                  case "ru": // Russian                  case "sh": // Serbo-Croatian                  case "sr": // Serbian                  case "uk": // Ukrainian                      return (n' c) =>                          (n % 10 == 1) && !(n % 100 == 11) ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          2;                    // Unique:                    // Arabic                  case "ar":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          (n % 100).Between(3' 10) ? 3 : // few                          (n % 100).Between(11' 99) ? 4 : // many                          5; // other                    // Breton                  case "br":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5; // other                    // Czech                  case "cs":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Welsh                  case "cy":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5;                    // Manx                  case "gv":                      return (n' c) =>                          (n % 10).Between(1' 2) || (n % 20) == 0 ? 0 :  // one                          1;                    // Langi                  case "lag":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n > 0) && (n < 2) ? 1 : // one                          2;                    // Lithuanian                  case "lt":                      return (n' c) =>                          (n % 10) == 1 && !(n % 100).Between(11' 19) ? 0 : // one                          (n % 10).Between(2' 9) && !(n % 100).Between(11' 19) ? 1 : // few                          2;                    // Latvian                  case "lv":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n % 10) == 1 && (n % 100) != 11 ? 1 :                          2;                    // Macedonian                  case "mb":                      return (n' c) =>                          (n % 10) == 1 && n != 11 ? 0 : // one                          1;                    // Moldavian                  case "mo":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n != 1 && (n % 100).Between(1' 19)) ? 1 : // few                          2;                    // Maltese                  case "mt":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(2' 10) ? 1 : // few                          (n % 100).Between(11' 19) ? 2 : // many                          3;                    // Polish                  case "pl":                      return (n' c) =>                          n == 1 ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          (n % 10).Between(0' 1) || (n % 10).Between(5' 9) || (n % 100).Between(12' 14) ? 2 : // many                          3;                    // Romanian                  case "ro":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(1' 19) ? 1 : // few                          2;                    // Tachelhit                  case "shi":                      return (n' c) =>                          (n >= 0 && n <= 1) ? 0 : // one                          n.Between(2' 10) ? 1 : // few                          2;                    // Slovak                  case "sk":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Slovenian                  case "sl":                      return (n' c) =>                          (n % 100) == 1 ? 0 : // one                          (n % 100) == 2 ? 1 : // two                          (n % 100).Between(3' 4) ? 2 : // few                          3;                    // Central Morocco Tamazight                  case "tzm":                      return (n' c) =>                          n.Between(0' 1) || n.Between(11' 99) ? 0 : // one                          1;                      // Unknown language                  default:                      return null;              }
Magic Number,SmartFormat.Extensions,CommonLanguageRules,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\PluralLocalizationFormatter.cs,GetPluralRule,The following statement contains a magic number: switch (twoLetterISOLanguageName)              {                  // Singular                  case "az": // Azerbaijani                  case "bm": // Bambara                  case "bo": // Tibetan                  case "dz": // Dzongkha                  case "fa": // Persian                  case "hu": // Hungarian                  case "id": // Indonesian                  case "ig": // Igbo                  case "ii": // Sichuan Yi                  case "ja": // Japanese                  case "jv": // Javanese                  case "ka": // Georgian                  case "kde": // Makonde                  case "kea": // Kabuverdianu                  case "km": // Khmer                  case "kn": // Kannada                  case "ko": // Korean                  case "ms": // Malay                  case "my": // Burmese                  case "root": // Root (?)                  case "sah": // Sakha                  case "ses": // Koyraboro Senni                  case "sg": // Sango                  case "th": // Thai                  case "to": // Tonga                  case "vi": // Vietnamese                  case "wo": // Wolof                  case "yo": // Yoruba                  case "zh": // Chinese                      return (n' c) => 0;                    // Dual: one (n == 1)' other                  case "af": // Afrikaans                  case "bem": // Bembda                  case "bg": // Bulgarian                  case "bn": // Bengali                  case "brx": // Bodo                  case "ca": // Catalan                  case "cgg": // Chiga                  case "chr": // Cherokee                  case "da": // Danish                  case "de": // German                  case "dv": // Divehi                  case "ee": // Ewe                  case "el": // Greek                  case "en": // English                  case "eo": // Esperanto                  case "es": // Spanish                  case "et": // Estonian                  case "eu": // Basque                  case "fi": // Finnish                  case "fo": // Faroese                  case "fur": // Friulian                  case "fy": // Western Frisian                  case "gl": // Galician                  case "gsw": // Swiss German                  case "gu": // Gujarati                  case "ha": // Hausa                  case "haw": // Hawaiian                  case "he": // Hebrew                  case "is": // Icelandic                  case "it": // Italian                  case "kk": // Kazakh                  case "kl": // Kalaallisut                  case "ku": // Kurdish                  case "lb": // Luxembourgish                  case "lg": // Ganda                  case "lo": // Lao                  case "mas": // Masai                  case "ml": // Malayalam                  case "mn": // Mongolian                  case "mr": // Marathi                  case "nah": // Nahuatl                  case "nb": // Norwegian Bokmål                  case "ne": // Nepali                  case "nl": // Dutch                  case "nn": // Norwegian Nynorsk                  case "no": // Norwegian                  case "nyn": // Nyankole                  case "om": // Oromo                  case "or": // Oriya                  case "pa": // Punjabi                  case "pap": // Papiamento                  case "ps": // Pashto                  case "pt": // Portuguese                  case "rm": // Romansh                  case "saq": // Samburu                  case "so": // Somali                  case "sq": // Albanian                  case "ssy": // Saho                  case "sw": // Swahili                  case "sv": // Swedish                  case "syr": // Syriac                  case "ta": // Tamil                  case "te": // Telugu                  case "tk": // Turkmen                  case "tr": // Turkish                  case "ur": // Urdu                  case "wae": // Walser                  case "xog": // Soga                  case "zu": // Zulu                      return (n' c) =>                      {                          if (c == 2) return (n == 1) ? 0 : 1;                          if (c == 3) return (n == 0) ? 0 : (n == 1) ? 1 : 2;                          if (c == 4) return (n < 0) ? 0 : (n == 0) ? 1 : (n == 1) ? 2 : 3;                          return -1;                      };                    // DualWithZero: one (n == 0..1)' other                  case "ak": // Akan                  case "am": // Amharic                  case "bh": // Bihari                  case "fil": // Filipino                  case "guw": // Gun                  case "hi": // Hindi                  case "ln": // Lingala                  case "mg": // Malagasy                  case "nso": // Northern Sotho                  case "ti": // Tigrinya                  case "tl": // Tagalog                  case "wa": // Walloon                      return (n' c) => (n == 0 || n == 1) ? 0 : 1;                    // DualFromZeroToTwo: one (n == 0..2 fractionate and n != 2)' other                  case "ff": // Fulah                  case "fr": // French                  case "kab": // Kabyle                      return (n' c) => (n >= 0 && n < 2) ? 0 : 1;                    // Triple: one (n == 1)' two (n == 2)' other                  case "ga": // Irish                  case "iu": // Inuktitut                  case "ksh": // Colognian                  case "kw": // Cornish                  case "se": // Northern Sami                  case "sma": // Southern Sami                  case "smi": // Sami language                  case "smj": // Lule Sami                  case "smn": // Inari Sami                  case "sms": // Skolt Sami                      return (n' c) => (n == 1) ? 0 : (n == 2) ? 1 : 2;                    // Russian & Serbo-Croatian                  case "be": // Belarusian                  case "bs": // Bosnian                  case "hr": // Croatian                  case "ru": // Russian                  case "sh": // Serbo-Croatian                  case "sr": // Serbian                  case "uk": // Ukrainian                      return (n' c) =>                          (n % 10 == 1) && !(n % 100 == 11) ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          2;                    // Unique:                    // Arabic                  case "ar":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          (n % 100).Between(3' 10) ? 3 : // few                          (n % 100).Between(11' 99) ? 4 : // many                          5; // other                    // Breton                  case "br":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5; // other                    // Czech                  case "cs":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Welsh                  case "cy":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5;                    // Manx                  case "gv":                      return (n' c) =>                          (n % 10).Between(1' 2) || (n % 20) == 0 ? 0 :  // one                          1;                    // Langi                  case "lag":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n > 0) && (n < 2) ? 1 : // one                          2;                    // Lithuanian                  case "lt":                      return (n' c) =>                          (n % 10) == 1 && !(n % 100).Between(11' 19) ? 0 : // one                          (n % 10).Between(2' 9) && !(n % 100).Between(11' 19) ? 1 : // few                          2;                    // Latvian                  case "lv":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n % 10) == 1 && (n % 100) != 11 ? 1 :                          2;                    // Macedonian                  case "mb":                      return (n' c) =>                          (n % 10) == 1 && n != 11 ? 0 : // one                          1;                    // Moldavian                  case "mo":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n != 1 && (n % 100).Between(1' 19)) ? 1 : // few                          2;                    // Maltese                  case "mt":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(2' 10) ? 1 : // few                          (n % 100).Between(11' 19) ? 2 : // many                          3;                    // Polish                  case "pl":                      return (n' c) =>                          n == 1 ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          (n % 10).Between(0' 1) || (n % 10).Between(5' 9) || (n % 100).Between(12' 14) ? 2 : // many                          3;                    // Romanian                  case "ro":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(1' 19) ? 1 : // few                          2;                    // Tachelhit                  case "shi":                      return (n' c) =>                          (n >= 0 && n <= 1) ? 0 : // one                          n.Between(2' 10) ? 1 : // few                          2;                    // Slovak                  case "sk":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Slovenian                  case "sl":                      return (n' c) =>                          (n % 100) == 1 ? 0 : // one                          (n % 100) == 2 ? 1 : // two                          (n % 100).Between(3' 4) ? 2 : // few                          3;                    // Central Morocco Tamazight                  case "tzm":                      return (n' c) =>                          n.Between(0' 1) || n.Between(11' 99) ? 0 : // one                          1;                      // Unknown language                  default:                      return null;              }
Magic Number,SmartFormat.Extensions,CommonLanguageRules,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\PluralLocalizationFormatter.cs,GetPluralRule,The following statement contains a magic number: switch (twoLetterISOLanguageName)              {                  // Singular                  case "az": // Azerbaijani                  case "bm": // Bambara                  case "bo": // Tibetan                  case "dz": // Dzongkha                  case "fa": // Persian                  case "hu": // Hungarian                  case "id": // Indonesian                  case "ig": // Igbo                  case "ii": // Sichuan Yi                  case "ja": // Japanese                  case "jv": // Javanese                  case "ka": // Georgian                  case "kde": // Makonde                  case "kea": // Kabuverdianu                  case "km": // Khmer                  case "kn": // Kannada                  case "ko": // Korean                  case "ms": // Malay                  case "my": // Burmese                  case "root": // Root (?)                  case "sah": // Sakha                  case "ses": // Koyraboro Senni                  case "sg": // Sango                  case "th": // Thai                  case "to": // Tonga                  case "vi": // Vietnamese                  case "wo": // Wolof                  case "yo": // Yoruba                  case "zh": // Chinese                      return (n' c) => 0;                    // Dual: one (n == 1)' other                  case "af": // Afrikaans                  case "bem": // Bembda                  case "bg": // Bulgarian                  case "bn": // Bengali                  case "brx": // Bodo                  case "ca": // Catalan                  case "cgg": // Chiga                  case "chr": // Cherokee                  case "da": // Danish                  case "de": // German                  case "dv": // Divehi                  case "ee": // Ewe                  case "el": // Greek                  case "en": // English                  case "eo": // Esperanto                  case "es": // Spanish                  case "et": // Estonian                  case "eu": // Basque                  case "fi": // Finnish                  case "fo": // Faroese                  case "fur": // Friulian                  case "fy": // Western Frisian                  case "gl": // Galician                  case "gsw": // Swiss German                  case "gu": // Gujarati                  case "ha": // Hausa                  case "haw": // Hawaiian                  case "he": // Hebrew                  case "is": // Icelandic                  case "it": // Italian                  case "kk": // Kazakh                  case "kl": // Kalaallisut                  case "ku": // Kurdish                  case "lb": // Luxembourgish                  case "lg": // Ganda                  case "lo": // Lao                  case "mas": // Masai                  case "ml": // Malayalam                  case "mn": // Mongolian                  case "mr": // Marathi                  case "nah": // Nahuatl                  case "nb": // Norwegian Bokmål                  case "ne": // Nepali                  case "nl": // Dutch                  case "nn": // Norwegian Nynorsk                  case "no": // Norwegian                  case "nyn": // Nyankole                  case "om": // Oromo                  case "or": // Oriya                  case "pa": // Punjabi                  case "pap": // Papiamento                  case "ps": // Pashto                  case "pt": // Portuguese                  case "rm": // Romansh                  case "saq": // Samburu                  case "so": // Somali                  case "sq": // Albanian                  case "ssy": // Saho                  case "sw": // Swahili                  case "sv": // Swedish                  case "syr": // Syriac                  case "ta": // Tamil                  case "te": // Telugu                  case "tk": // Turkmen                  case "tr": // Turkish                  case "ur": // Urdu                  case "wae": // Walser                  case "xog": // Soga                  case "zu": // Zulu                      return (n' c) =>                      {                          if (c == 2) return (n == 1) ? 0 : 1;                          if (c == 3) return (n == 0) ? 0 : (n == 1) ? 1 : 2;                          if (c == 4) return (n < 0) ? 0 : (n == 0) ? 1 : (n == 1) ? 2 : 3;                          return -1;                      };                    // DualWithZero: one (n == 0..1)' other                  case "ak": // Akan                  case "am": // Amharic                  case "bh": // Bihari                  case "fil": // Filipino                  case "guw": // Gun                  case "hi": // Hindi                  case "ln": // Lingala                  case "mg": // Malagasy                  case "nso": // Northern Sotho                  case "ti": // Tigrinya                  case "tl": // Tagalog                  case "wa": // Walloon                      return (n' c) => (n == 0 || n == 1) ? 0 : 1;                    // DualFromZeroToTwo: one (n == 0..2 fractionate and n != 2)' other                  case "ff": // Fulah                  case "fr": // French                  case "kab": // Kabyle                      return (n' c) => (n >= 0 && n < 2) ? 0 : 1;                    // Triple: one (n == 1)' two (n == 2)' other                  case "ga": // Irish                  case "iu": // Inuktitut                  case "ksh": // Colognian                  case "kw": // Cornish                  case "se": // Northern Sami                  case "sma": // Southern Sami                  case "smi": // Sami language                  case "smj": // Lule Sami                  case "smn": // Inari Sami                  case "sms": // Skolt Sami                      return (n' c) => (n == 1) ? 0 : (n == 2) ? 1 : 2;                    // Russian & Serbo-Croatian                  case "be": // Belarusian                  case "bs": // Bosnian                  case "hr": // Croatian                  case "ru": // Russian                  case "sh": // Serbo-Croatian                  case "sr": // Serbian                  case "uk": // Ukrainian                      return (n' c) =>                          (n % 10 == 1) && !(n % 100 == 11) ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          2;                    // Unique:                    // Arabic                  case "ar":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          (n % 100).Between(3' 10) ? 3 : // few                          (n % 100).Between(11' 99) ? 4 : // many                          5; // other                    // Breton                  case "br":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5; // other                    // Czech                  case "cs":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Welsh                  case "cy":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5;                    // Manx                  case "gv":                      return (n' c) =>                          (n % 10).Between(1' 2) || (n % 20) == 0 ? 0 :  // one                          1;                    // Langi                  case "lag":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n > 0) && (n < 2) ? 1 : // one                          2;                    // Lithuanian                  case "lt":                      return (n' c) =>                          (n % 10) == 1 && !(n % 100).Between(11' 19) ? 0 : // one                          (n % 10).Between(2' 9) && !(n % 100).Between(11' 19) ? 1 : // few                          2;                    // Latvian                  case "lv":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n % 10) == 1 && (n % 100) != 11 ? 1 :                          2;                    // Macedonian                  case "mb":                      return (n' c) =>                          (n % 10) == 1 && n != 11 ? 0 : // one                          1;                    // Moldavian                  case "mo":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n != 1 && (n % 100).Between(1' 19)) ? 1 : // few                          2;                    // Maltese                  case "mt":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(2' 10) ? 1 : // few                          (n % 100).Between(11' 19) ? 2 : // many                          3;                    // Polish                  case "pl":                      return (n' c) =>                          n == 1 ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          (n % 10).Between(0' 1) || (n % 10).Between(5' 9) || (n % 100).Between(12' 14) ? 2 : // many                          3;                    // Romanian                  case "ro":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(1' 19) ? 1 : // few                          2;                    // Tachelhit                  case "shi":                      return (n' c) =>                          (n >= 0 && n <= 1) ? 0 : // one                          n.Between(2' 10) ? 1 : // few                          2;                    // Slovak                  case "sk":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Slovenian                  case "sl":                      return (n' c) =>                          (n % 100) == 1 ? 0 : // one                          (n % 100) == 2 ? 1 : // two                          (n % 100).Between(3' 4) ? 2 : // few                          3;                    // Central Morocco Tamazight                  case "tzm":                      return (n' c) =>                          n.Between(0' 1) || n.Between(11' 99) ? 0 : // one                          1;                      // Unknown language                  default:                      return null;              }
Magic Number,SmartFormat.Extensions,CommonLanguageRules,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\PluralLocalizationFormatter.cs,GetPluralRule,The following statement contains a magic number: switch (twoLetterISOLanguageName)              {                  // Singular                  case "az": // Azerbaijani                  case "bm": // Bambara                  case "bo": // Tibetan                  case "dz": // Dzongkha                  case "fa": // Persian                  case "hu": // Hungarian                  case "id": // Indonesian                  case "ig": // Igbo                  case "ii": // Sichuan Yi                  case "ja": // Japanese                  case "jv": // Javanese                  case "ka": // Georgian                  case "kde": // Makonde                  case "kea": // Kabuverdianu                  case "km": // Khmer                  case "kn": // Kannada                  case "ko": // Korean                  case "ms": // Malay                  case "my": // Burmese                  case "root": // Root (?)                  case "sah": // Sakha                  case "ses": // Koyraboro Senni                  case "sg": // Sango                  case "th": // Thai                  case "to": // Tonga                  case "vi": // Vietnamese                  case "wo": // Wolof                  case "yo": // Yoruba                  case "zh": // Chinese                      return (n' c) => 0;                    // Dual: one (n == 1)' other                  case "af": // Afrikaans                  case "bem": // Bembda                  case "bg": // Bulgarian                  case "bn": // Bengali                  case "brx": // Bodo                  case "ca": // Catalan                  case "cgg": // Chiga                  case "chr": // Cherokee                  case "da": // Danish                  case "de": // German                  case "dv": // Divehi                  case "ee": // Ewe                  case "el": // Greek                  case "en": // English                  case "eo": // Esperanto                  case "es": // Spanish                  case "et": // Estonian                  case "eu": // Basque                  case "fi": // Finnish                  case "fo": // Faroese                  case "fur": // Friulian                  case "fy": // Western Frisian                  case "gl": // Galician                  case "gsw": // Swiss German                  case "gu": // Gujarati                  case "ha": // Hausa                  case "haw": // Hawaiian                  case "he": // Hebrew                  case "is": // Icelandic                  case "it": // Italian                  case "kk": // Kazakh                  case "kl": // Kalaallisut                  case "ku": // Kurdish                  case "lb": // Luxembourgish                  case "lg": // Ganda                  case "lo": // Lao                  case "mas": // Masai                  case "ml": // Malayalam                  case "mn": // Mongolian                  case "mr": // Marathi                  case "nah": // Nahuatl                  case "nb": // Norwegian Bokmål                  case "ne": // Nepali                  case "nl": // Dutch                  case "nn": // Norwegian Nynorsk                  case "no": // Norwegian                  case "nyn": // Nyankole                  case "om": // Oromo                  case "or": // Oriya                  case "pa": // Punjabi                  case "pap": // Papiamento                  case "ps": // Pashto                  case "pt": // Portuguese                  case "rm": // Romansh                  case "saq": // Samburu                  case "so": // Somali                  case "sq": // Albanian                  case "ssy": // Saho                  case "sw": // Swahili                  case "sv": // Swedish                  case "syr": // Syriac                  case "ta": // Tamil                  case "te": // Telugu                  case "tk": // Turkmen                  case "tr": // Turkish                  case "ur": // Urdu                  case "wae": // Walser                  case "xog": // Soga                  case "zu": // Zulu                      return (n' c) =>                      {                          if (c == 2) return (n == 1) ? 0 : 1;                          if (c == 3) return (n == 0) ? 0 : (n == 1) ? 1 : 2;                          if (c == 4) return (n < 0) ? 0 : (n == 0) ? 1 : (n == 1) ? 2 : 3;                          return -1;                      };                    // DualWithZero: one (n == 0..1)' other                  case "ak": // Akan                  case "am": // Amharic                  case "bh": // Bihari                  case "fil": // Filipino                  case "guw": // Gun                  case "hi": // Hindi                  case "ln": // Lingala                  case "mg": // Malagasy                  case "nso": // Northern Sotho                  case "ti": // Tigrinya                  case "tl": // Tagalog                  case "wa": // Walloon                      return (n' c) => (n == 0 || n == 1) ? 0 : 1;                    // DualFromZeroToTwo: one (n == 0..2 fractionate and n != 2)' other                  case "ff": // Fulah                  case "fr": // French                  case "kab": // Kabyle                      return (n' c) => (n >= 0 && n < 2) ? 0 : 1;                    // Triple: one (n == 1)' two (n == 2)' other                  case "ga": // Irish                  case "iu": // Inuktitut                  case "ksh": // Colognian                  case "kw": // Cornish                  case "se": // Northern Sami                  case "sma": // Southern Sami                  case "smi": // Sami language                  case "smj": // Lule Sami                  case "smn": // Inari Sami                  case "sms": // Skolt Sami                      return (n' c) => (n == 1) ? 0 : (n == 2) ? 1 : 2;                    // Russian & Serbo-Croatian                  case "be": // Belarusian                  case "bs": // Bosnian                  case "hr": // Croatian                  case "ru": // Russian                  case "sh": // Serbo-Croatian                  case "sr": // Serbian                  case "uk": // Ukrainian                      return (n' c) =>                          (n % 10 == 1) && !(n % 100 == 11) ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          2;                    // Unique:                    // Arabic                  case "ar":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          (n % 100).Between(3' 10) ? 3 : // few                          (n % 100).Between(11' 99) ? 4 : // many                          5; // other                    // Breton                  case "br":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5; // other                    // Czech                  case "cs":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Welsh                  case "cy":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5;                    // Manx                  case "gv":                      return (n' c) =>                          (n % 10).Between(1' 2) || (n % 20) == 0 ? 0 :  // one                          1;                    // Langi                  case "lag":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n > 0) && (n < 2) ? 1 : // one                          2;                    // Lithuanian                  case "lt":                      return (n' c) =>                          (n % 10) == 1 && !(n % 100).Between(11' 19) ? 0 : // one                          (n % 10).Between(2' 9) && !(n % 100).Between(11' 19) ? 1 : // few                          2;                    // Latvian                  case "lv":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n % 10) == 1 && (n % 100) != 11 ? 1 :                          2;                    // Macedonian                  case "mb":                      return (n' c) =>                          (n % 10) == 1 && n != 11 ? 0 : // one                          1;                    // Moldavian                  case "mo":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n != 1 && (n % 100).Between(1' 19)) ? 1 : // few                          2;                    // Maltese                  case "mt":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(2' 10) ? 1 : // few                          (n % 100).Between(11' 19) ? 2 : // many                          3;                    // Polish                  case "pl":                      return (n' c) =>                          n == 1 ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          (n % 10).Between(0' 1) || (n % 10).Between(5' 9) || (n % 100).Between(12' 14) ? 2 : // many                          3;                    // Romanian                  case "ro":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(1' 19) ? 1 : // few                          2;                    // Tachelhit                  case "shi":                      return (n' c) =>                          (n >= 0 && n <= 1) ? 0 : // one                          n.Between(2' 10) ? 1 : // few                          2;                    // Slovak                  case "sk":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Slovenian                  case "sl":                      return (n' c) =>                          (n % 100) == 1 ? 0 : // one                          (n % 100) == 2 ? 1 : // two                          (n % 100).Between(3' 4) ? 2 : // few                          3;                    // Central Morocco Tamazight                  case "tzm":                      return (n' c) =>                          n.Between(0' 1) || n.Between(11' 99) ? 0 : // one                          1;                      // Unknown language                  default:                      return null;              }
Magic Number,SmartFormat.Extensions,CommonLanguageRules,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\PluralLocalizationFormatter.cs,GetPluralRule,The following statement contains a magic number: switch (twoLetterISOLanguageName)              {                  // Singular                  case "az": // Azerbaijani                  case "bm": // Bambara                  case "bo": // Tibetan                  case "dz": // Dzongkha                  case "fa": // Persian                  case "hu": // Hungarian                  case "id": // Indonesian                  case "ig": // Igbo                  case "ii": // Sichuan Yi                  case "ja": // Japanese                  case "jv": // Javanese                  case "ka": // Georgian                  case "kde": // Makonde                  case "kea": // Kabuverdianu                  case "km": // Khmer                  case "kn": // Kannada                  case "ko": // Korean                  case "ms": // Malay                  case "my": // Burmese                  case "root": // Root (?)                  case "sah": // Sakha                  case "ses": // Koyraboro Senni                  case "sg": // Sango                  case "th": // Thai                  case "to": // Tonga                  case "vi": // Vietnamese                  case "wo": // Wolof                  case "yo": // Yoruba                  case "zh": // Chinese                      return (n' c) => 0;                    // Dual: one (n == 1)' other                  case "af": // Afrikaans                  case "bem": // Bembda                  case "bg": // Bulgarian                  case "bn": // Bengali                  case "brx": // Bodo                  case "ca": // Catalan                  case "cgg": // Chiga                  case "chr": // Cherokee                  case "da": // Danish                  case "de": // German                  case "dv": // Divehi                  case "ee": // Ewe                  case "el": // Greek                  case "en": // English                  case "eo": // Esperanto                  case "es": // Spanish                  case "et": // Estonian                  case "eu": // Basque                  case "fi": // Finnish                  case "fo": // Faroese                  case "fur": // Friulian                  case "fy": // Western Frisian                  case "gl": // Galician                  case "gsw": // Swiss German                  case "gu": // Gujarati                  case "ha": // Hausa                  case "haw": // Hawaiian                  case "he": // Hebrew                  case "is": // Icelandic                  case "it": // Italian                  case "kk": // Kazakh                  case "kl": // Kalaallisut                  case "ku": // Kurdish                  case "lb": // Luxembourgish                  case "lg": // Ganda                  case "lo": // Lao                  case "mas": // Masai                  case "ml": // Malayalam                  case "mn": // Mongolian                  case "mr": // Marathi                  case "nah": // Nahuatl                  case "nb": // Norwegian Bokmål                  case "ne": // Nepali                  case "nl": // Dutch                  case "nn": // Norwegian Nynorsk                  case "no": // Norwegian                  case "nyn": // Nyankole                  case "om": // Oromo                  case "or": // Oriya                  case "pa": // Punjabi                  case "pap": // Papiamento                  case "ps": // Pashto                  case "pt": // Portuguese                  case "rm": // Romansh                  case "saq": // Samburu                  case "so": // Somali                  case "sq": // Albanian                  case "ssy": // Saho                  case "sw": // Swahili                  case "sv": // Swedish                  case "syr": // Syriac                  case "ta": // Tamil                  case "te": // Telugu                  case "tk": // Turkmen                  case "tr": // Turkish                  case "ur": // Urdu                  case "wae": // Walser                  case "xog": // Soga                  case "zu": // Zulu                      return (n' c) =>                      {                          if (c == 2) return (n == 1) ? 0 : 1;                          if (c == 3) return (n == 0) ? 0 : (n == 1) ? 1 : 2;                          if (c == 4) return (n < 0) ? 0 : (n == 0) ? 1 : (n == 1) ? 2 : 3;                          return -1;                      };                    // DualWithZero: one (n == 0..1)' other                  case "ak": // Akan                  case "am": // Amharic                  case "bh": // Bihari                  case "fil": // Filipino                  case "guw": // Gun                  case "hi": // Hindi                  case "ln": // Lingala                  case "mg": // Malagasy                  case "nso": // Northern Sotho                  case "ti": // Tigrinya                  case "tl": // Tagalog                  case "wa": // Walloon                      return (n' c) => (n == 0 || n == 1) ? 0 : 1;                    // DualFromZeroToTwo: one (n == 0..2 fractionate and n != 2)' other                  case "ff": // Fulah                  case "fr": // French                  case "kab": // Kabyle                      return (n' c) => (n >= 0 && n < 2) ? 0 : 1;                    // Triple: one (n == 1)' two (n == 2)' other                  case "ga": // Irish                  case "iu": // Inuktitut                  case "ksh": // Colognian                  case "kw": // Cornish                  case "se": // Northern Sami                  case "sma": // Southern Sami                  case "smi": // Sami language                  case "smj": // Lule Sami                  case "smn": // Inari Sami                  case "sms": // Skolt Sami                      return (n' c) => (n == 1) ? 0 : (n == 2) ? 1 : 2;                    // Russian & Serbo-Croatian                  case "be": // Belarusian                  case "bs": // Bosnian                  case "hr": // Croatian                  case "ru": // Russian                  case "sh": // Serbo-Croatian                  case "sr": // Serbian                  case "uk": // Ukrainian                      return (n' c) =>                          (n % 10 == 1) && !(n % 100 == 11) ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          2;                    // Unique:                    // Arabic                  case "ar":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          (n % 100).Between(3' 10) ? 3 : // few                          (n % 100).Between(11' 99) ? 4 : // many                          5; // other                    // Breton                  case "br":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5; // other                    // Czech                  case "cs":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Welsh                  case "cy":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5;                    // Manx                  case "gv":                      return (n' c) =>                          (n % 10).Between(1' 2) || (n % 20) == 0 ? 0 :  // one                          1;                    // Langi                  case "lag":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n > 0) && (n < 2) ? 1 : // one                          2;                    // Lithuanian                  case "lt":                      return (n' c) =>                          (n % 10) == 1 && !(n % 100).Between(11' 19) ? 0 : // one                          (n % 10).Between(2' 9) && !(n % 100).Between(11' 19) ? 1 : // few                          2;                    // Latvian                  case "lv":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n % 10) == 1 && (n % 100) != 11 ? 1 :                          2;                    // Macedonian                  case "mb":                      return (n' c) =>                          (n % 10) == 1 && n != 11 ? 0 : // one                          1;                    // Moldavian                  case "mo":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n != 1 && (n % 100).Between(1' 19)) ? 1 : // few                          2;                    // Maltese                  case "mt":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(2' 10) ? 1 : // few                          (n % 100).Between(11' 19) ? 2 : // many                          3;                    // Polish                  case "pl":                      return (n' c) =>                          n == 1 ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          (n % 10).Between(0' 1) || (n % 10).Between(5' 9) || (n % 100).Between(12' 14) ? 2 : // many                          3;                    // Romanian                  case "ro":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(1' 19) ? 1 : // few                          2;                    // Tachelhit                  case "shi":                      return (n' c) =>                          (n >= 0 && n <= 1) ? 0 : // one                          n.Between(2' 10) ? 1 : // few                          2;                    // Slovak                  case "sk":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Slovenian                  case "sl":                      return (n' c) =>                          (n % 100) == 1 ? 0 : // one                          (n % 100) == 2 ? 1 : // two                          (n % 100).Between(3' 4) ? 2 : // few                          3;                    // Central Morocco Tamazight                  case "tzm":                      return (n' c) =>                          n.Between(0' 1) || n.Between(11' 99) ? 0 : // one                          1;                      // Unknown language                  default:                      return null;              }
Magic Number,SmartFormat.Extensions,CommonLanguageRules,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\PluralLocalizationFormatter.cs,GetPluralRule,The following statement contains a magic number: switch (twoLetterISOLanguageName)              {                  // Singular                  case "az": // Azerbaijani                  case "bm": // Bambara                  case "bo": // Tibetan                  case "dz": // Dzongkha                  case "fa": // Persian                  case "hu": // Hungarian                  case "id": // Indonesian                  case "ig": // Igbo                  case "ii": // Sichuan Yi                  case "ja": // Japanese                  case "jv": // Javanese                  case "ka": // Georgian                  case "kde": // Makonde                  case "kea": // Kabuverdianu                  case "km": // Khmer                  case "kn": // Kannada                  case "ko": // Korean                  case "ms": // Malay                  case "my": // Burmese                  case "root": // Root (?)                  case "sah": // Sakha                  case "ses": // Koyraboro Senni                  case "sg": // Sango                  case "th": // Thai                  case "to": // Tonga                  case "vi": // Vietnamese                  case "wo": // Wolof                  case "yo": // Yoruba                  case "zh": // Chinese                      return (n' c) => 0;                    // Dual: one (n == 1)' other                  case "af": // Afrikaans                  case "bem": // Bembda                  case "bg": // Bulgarian                  case "bn": // Bengali                  case "brx": // Bodo                  case "ca": // Catalan                  case "cgg": // Chiga                  case "chr": // Cherokee                  case "da": // Danish                  case "de": // German                  case "dv": // Divehi                  case "ee": // Ewe                  case "el": // Greek                  case "en": // English                  case "eo": // Esperanto                  case "es": // Spanish                  case "et": // Estonian                  case "eu": // Basque                  case "fi": // Finnish                  case "fo": // Faroese                  case "fur": // Friulian                  case "fy": // Western Frisian                  case "gl": // Galician                  case "gsw": // Swiss German                  case "gu": // Gujarati                  case "ha": // Hausa                  case "haw": // Hawaiian                  case "he": // Hebrew                  case "is": // Icelandic                  case "it": // Italian                  case "kk": // Kazakh                  case "kl": // Kalaallisut                  case "ku": // Kurdish                  case "lb": // Luxembourgish                  case "lg": // Ganda                  case "lo": // Lao                  case "mas": // Masai                  case "ml": // Malayalam                  case "mn": // Mongolian                  case "mr": // Marathi                  case "nah": // Nahuatl                  case "nb": // Norwegian Bokmål                  case "ne": // Nepali                  case "nl": // Dutch                  case "nn": // Norwegian Nynorsk                  case "no": // Norwegian                  case "nyn": // Nyankole                  case "om": // Oromo                  case "or": // Oriya                  case "pa": // Punjabi                  case "pap": // Papiamento                  case "ps": // Pashto                  case "pt": // Portuguese                  case "rm": // Romansh                  case "saq": // Samburu                  case "so": // Somali                  case "sq": // Albanian                  case "ssy": // Saho                  case "sw": // Swahili                  case "sv": // Swedish                  case "syr": // Syriac                  case "ta": // Tamil                  case "te": // Telugu                  case "tk": // Turkmen                  case "tr": // Turkish                  case "ur": // Urdu                  case "wae": // Walser                  case "xog": // Soga                  case "zu": // Zulu                      return (n' c) =>                      {                          if (c == 2) return (n == 1) ? 0 : 1;                          if (c == 3) return (n == 0) ? 0 : (n == 1) ? 1 : 2;                          if (c == 4) return (n < 0) ? 0 : (n == 0) ? 1 : (n == 1) ? 2 : 3;                          return -1;                      };                    // DualWithZero: one (n == 0..1)' other                  case "ak": // Akan                  case "am": // Amharic                  case "bh": // Bihari                  case "fil": // Filipino                  case "guw": // Gun                  case "hi": // Hindi                  case "ln": // Lingala                  case "mg": // Malagasy                  case "nso": // Northern Sotho                  case "ti": // Tigrinya                  case "tl": // Tagalog                  case "wa": // Walloon                      return (n' c) => (n == 0 || n == 1) ? 0 : 1;                    // DualFromZeroToTwo: one (n == 0..2 fractionate and n != 2)' other                  case "ff": // Fulah                  case "fr": // French                  case "kab": // Kabyle                      return (n' c) => (n >= 0 && n < 2) ? 0 : 1;                    // Triple: one (n == 1)' two (n == 2)' other                  case "ga": // Irish                  case "iu": // Inuktitut                  case "ksh": // Colognian                  case "kw": // Cornish                  case "se": // Northern Sami                  case "sma": // Southern Sami                  case "smi": // Sami language                  case "smj": // Lule Sami                  case "smn": // Inari Sami                  case "sms": // Skolt Sami                      return (n' c) => (n == 1) ? 0 : (n == 2) ? 1 : 2;                    // Russian & Serbo-Croatian                  case "be": // Belarusian                  case "bs": // Bosnian                  case "hr": // Croatian                  case "ru": // Russian                  case "sh": // Serbo-Croatian                  case "sr": // Serbian                  case "uk": // Ukrainian                      return (n' c) =>                          (n % 10 == 1) && !(n % 100 == 11) ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          2;                    // Unique:                    // Arabic                  case "ar":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          (n % 100).Between(3' 10) ? 3 : // few                          (n % 100).Between(11' 99) ? 4 : // many                          5; // other                    // Breton                  case "br":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5; // other                    // Czech                  case "cs":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Welsh                  case "cy":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5;                    // Manx                  case "gv":                      return (n' c) =>                          (n % 10).Between(1' 2) || (n % 20) == 0 ? 0 :  // one                          1;                    // Langi                  case "lag":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n > 0) && (n < 2) ? 1 : // one                          2;                    // Lithuanian                  case "lt":                      return (n' c) =>                          (n % 10) == 1 && !(n % 100).Between(11' 19) ? 0 : // one                          (n % 10).Between(2' 9) && !(n % 100).Between(11' 19) ? 1 : // few                          2;                    // Latvian                  case "lv":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n % 10) == 1 && (n % 100) != 11 ? 1 :                          2;                    // Macedonian                  case "mb":                      return (n' c) =>                          (n % 10) == 1 && n != 11 ? 0 : // one                          1;                    // Moldavian                  case "mo":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n != 1 && (n % 100).Between(1' 19)) ? 1 : // few                          2;                    // Maltese                  case "mt":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(2' 10) ? 1 : // few                          (n % 100).Between(11' 19) ? 2 : // many                          3;                    // Polish                  case "pl":                      return (n' c) =>                          n == 1 ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          (n % 10).Between(0' 1) || (n % 10).Between(5' 9) || (n % 100).Between(12' 14) ? 2 : // many                          3;                    // Romanian                  case "ro":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(1' 19) ? 1 : // few                          2;                    // Tachelhit                  case "shi":                      return (n' c) =>                          (n >= 0 && n <= 1) ? 0 : // one                          n.Between(2' 10) ? 1 : // few                          2;                    // Slovak                  case "sk":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Slovenian                  case "sl":                      return (n' c) =>                          (n % 100) == 1 ? 0 : // one                          (n % 100) == 2 ? 1 : // two                          (n % 100).Between(3' 4) ? 2 : // few                          3;                    // Central Morocco Tamazight                  case "tzm":                      return (n' c) =>                          n.Between(0' 1) || n.Between(11' 99) ? 0 : // one                          1;                      // Unknown language                  default:                      return null;              }
Magic Number,SmartFormat.Extensions,CommonLanguageRules,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\PluralLocalizationFormatter.cs,GetPluralRule,The following statement contains a magic number: switch (twoLetterISOLanguageName)              {                  // Singular                  case "az": // Azerbaijani                  case "bm": // Bambara                  case "bo": // Tibetan                  case "dz": // Dzongkha                  case "fa": // Persian                  case "hu": // Hungarian                  case "id": // Indonesian                  case "ig": // Igbo                  case "ii": // Sichuan Yi                  case "ja": // Japanese                  case "jv": // Javanese                  case "ka": // Georgian                  case "kde": // Makonde                  case "kea": // Kabuverdianu                  case "km": // Khmer                  case "kn": // Kannada                  case "ko": // Korean                  case "ms": // Malay                  case "my": // Burmese                  case "root": // Root (?)                  case "sah": // Sakha                  case "ses": // Koyraboro Senni                  case "sg": // Sango                  case "th": // Thai                  case "to": // Tonga                  case "vi": // Vietnamese                  case "wo": // Wolof                  case "yo": // Yoruba                  case "zh": // Chinese                      return (n' c) => 0;                    // Dual: one (n == 1)' other                  case "af": // Afrikaans                  case "bem": // Bembda                  case "bg": // Bulgarian                  case "bn": // Bengali                  case "brx": // Bodo                  case "ca": // Catalan                  case "cgg": // Chiga                  case "chr": // Cherokee                  case "da": // Danish                  case "de": // German                  case "dv": // Divehi                  case "ee": // Ewe                  case "el": // Greek                  case "en": // English                  case "eo": // Esperanto                  case "es": // Spanish                  case "et": // Estonian                  case "eu": // Basque                  case "fi": // Finnish                  case "fo": // Faroese                  case "fur": // Friulian                  case "fy": // Western Frisian                  case "gl": // Galician                  case "gsw": // Swiss German                  case "gu": // Gujarati                  case "ha": // Hausa                  case "haw": // Hawaiian                  case "he": // Hebrew                  case "is": // Icelandic                  case "it": // Italian                  case "kk": // Kazakh                  case "kl": // Kalaallisut                  case "ku": // Kurdish                  case "lb": // Luxembourgish                  case "lg": // Ganda                  case "lo": // Lao                  case "mas": // Masai                  case "ml": // Malayalam                  case "mn": // Mongolian                  case "mr": // Marathi                  case "nah": // Nahuatl                  case "nb": // Norwegian Bokmål                  case "ne": // Nepali                  case "nl": // Dutch                  case "nn": // Norwegian Nynorsk                  case "no": // Norwegian                  case "nyn": // Nyankole                  case "om": // Oromo                  case "or": // Oriya                  case "pa": // Punjabi                  case "pap": // Papiamento                  case "ps": // Pashto                  case "pt": // Portuguese                  case "rm": // Romansh                  case "saq": // Samburu                  case "so": // Somali                  case "sq": // Albanian                  case "ssy": // Saho                  case "sw": // Swahili                  case "sv": // Swedish                  case "syr": // Syriac                  case "ta": // Tamil                  case "te": // Telugu                  case "tk": // Turkmen                  case "tr": // Turkish                  case "ur": // Urdu                  case "wae": // Walser                  case "xog": // Soga                  case "zu": // Zulu                      return (n' c) =>                      {                          if (c == 2) return (n == 1) ? 0 : 1;                          if (c == 3) return (n == 0) ? 0 : (n == 1) ? 1 : 2;                          if (c == 4) return (n < 0) ? 0 : (n == 0) ? 1 : (n == 1) ? 2 : 3;                          return -1;                      };                    // DualWithZero: one (n == 0..1)' other                  case "ak": // Akan                  case "am": // Amharic                  case "bh": // Bihari                  case "fil": // Filipino                  case "guw": // Gun                  case "hi": // Hindi                  case "ln": // Lingala                  case "mg": // Malagasy                  case "nso": // Northern Sotho                  case "ti": // Tigrinya                  case "tl": // Tagalog                  case "wa": // Walloon                      return (n' c) => (n == 0 || n == 1) ? 0 : 1;                    // DualFromZeroToTwo: one (n == 0..2 fractionate and n != 2)' other                  case "ff": // Fulah                  case "fr": // French                  case "kab": // Kabyle                      return (n' c) => (n >= 0 && n < 2) ? 0 : 1;                    // Triple: one (n == 1)' two (n == 2)' other                  case "ga": // Irish                  case "iu": // Inuktitut                  case "ksh": // Colognian                  case "kw": // Cornish                  case "se": // Northern Sami                  case "sma": // Southern Sami                  case "smi": // Sami language                  case "smj": // Lule Sami                  case "smn": // Inari Sami                  case "sms": // Skolt Sami                      return (n' c) => (n == 1) ? 0 : (n == 2) ? 1 : 2;                    // Russian & Serbo-Croatian                  case "be": // Belarusian                  case "bs": // Bosnian                  case "hr": // Croatian                  case "ru": // Russian                  case "sh": // Serbo-Croatian                  case "sr": // Serbian                  case "uk": // Ukrainian                      return (n' c) =>                          (n % 10 == 1) && !(n % 100 == 11) ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          2;                    // Unique:                    // Arabic                  case "ar":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          (n % 100).Between(3' 10) ? 3 : // few                          (n % 100).Between(11' 99) ? 4 : // many                          5; // other                    // Breton                  case "br":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5; // other                    // Czech                  case "cs":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Welsh                  case "cy":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5;                    // Manx                  case "gv":                      return (n' c) =>                          (n % 10).Between(1' 2) || (n % 20) == 0 ? 0 :  // one                          1;                    // Langi                  case "lag":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n > 0) && (n < 2) ? 1 : // one                          2;                    // Lithuanian                  case "lt":                      return (n' c) =>                          (n % 10) == 1 && !(n % 100).Between(11' 19) ? 0 : // one                          (n % 10).Between(2' 9) && !(n % 100).Between(11' 19) ? 1 : // few                          2;                    // Latvian                  case "lv":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n % 10) == 1 && (n % 100) != 11 ? 1 :                          2;                    // Macedonian                  case "mb":                      return (n' c) =>                          (n % 10) == 1 && n != 11 ? 0 : // one                          1;                    // Moldavian                  case "mo":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n != 1 && (n % 100).Between(1' 19)) ? 1 : // few                          2;                    // Maltese                  case "mt":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(2' 10) ? 1 : // few                          (n % 100).Between(11' 19) ? 2 : // many                          3;                    // Polish                  case "pl":                      return (n' c) =>                          n == 1 ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          (n % 10).Between(0' 1) || (n % 10).Between(5' 9) || (n % 100).Between(12' 14) ? 2 : // many                          3;                    // Romanian                  case "ro":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(1' 19) ? 1 : // few                          2;                    // Tachelhit                  case "shi":                      return (n' c) =>                          (n >= 0 && n <= 1) ? 0 : // one                          n.Between(2' 10) ? 1 : // few                          2;                    // Slovak                  case "sk":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Slovenian                  case "sl":                      return (n' c) =>                          (n % 100) == 1 ? 0 : // one                          (n % 100) == 2 ? 1 : // two                          (n % 100).Between(3' 4) ? 2 : // few                          3;                    // Central Morocco Tamazight                  case "tzm":                      return (n' c) =>                          n.Between(0' 1) || n.Between(11' 99) ? 0 : // one                          1;                      // Unknown language                  default:                      return null;              }
Magic Number,SmartFormat.Extensions,CommonLanguageRules,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\PluralLocalizationFormatter.cs,GetPluralRule,The following statement contains a magic number: switch (twoLetterISOLanguageName)              {                  // Singular                  case "az": // Azerbaijani                  case "bm": // Bambara                  case "bo": // Tibetan                  case "dz": // Dzongkha                  case "fa": // Persian                  case "hu": // Hungarian                  case "id": // Indonesian                  case "ig": // Igbo                  case "ii": // Sichuan Yi                  case "ja": // Japanese                  case "jv": // Javanese                  case "ka": // Georgian                  case "kde": // Makonde                  case "kea": // Kabuverdianu                  case "km": // Khmer                  case "kn": // Kannada                  case "ko": // Korean                  case "ms": // Malay                  case "my": // Burmese                  case "root": // Root (?)                  case "sah": // Sakha                  case "ses": // Koyraboro Senni                  case "sg": // Sango                  case "th": // Thai                  case "to": // Tonga                  case "vi": // Vietnamese                  case "wo": // Wolof                  case "yo": // Yoruba                  case "zh": // Chinese                      return (n' c) => 0;                    // Dual: one (n == 1)' other                  case "af": // Afrikaans                  case "bem": // Bembda                  case "bg": // Bulgarian                  case "bn": // Bengali                  case "brx": // Bodo                  case "ca": // Catalan                  case "cgg": // Chiga                  case "chr": // Cherokee                  case "da": // Danish                  case "de": // German                  case "dv": // Divehi                  case "ee": // Ewe                  case "el": // Greek                  case "en": // English                  case "eo": // Esperanto                  case "es": // Spanish                  case "et": // Estonian                  case "eu": // Basque                  case "fi": // Finnish                  case "fo": // Faroese                  case "fur": // Friulian                  case "fy": // Western Frisian                  case "gl": // Galician                  case "gsw": // Swiss German                  case "gu": // Gujarati                  case "ha": // Hausa                  case "haw": // Hawaiian                  case "he": // Hebrew                  case "is": // Icelandic                  case "it": // Italian                  case "kk": // Kazakh                  case "kl": // Kalaallisut                  case "ku": // Kurdish                  case "lb": // Luxembourgish                  case "lg": // Ganda                  case "lo": // Lao                  case "mas": // Masai                  case "ml": // Malayalam                  case "mn": // Mongolian                  case "mr": // Marathi                  case "nah": // Nahuatl                  case "nb": // Norwegian Bokmål                  case "ne": // Nepali                  case "nl": // Dutch                  case "nn": // Norwegian Nynorsk                  case "no": // Norwegian                  case "nyn": // Nyankole                  case "om": // Oromo                  case "or": // Oriya                  case "pa": // Punjabi                  case "pap": // Papiamento                  case "ps": // Pashto                  case "pt": // Portuguese                  case "rm": // Romansh                  case "saq": // Samburu                  case "so": // Somali                  case "sq": // Albanian                  case "ssy": // Saho                  case "sw": // Swahili                  case "sv": // Swedish                  case "syr": // Syriac                  case "ta": // Tamil                  case "te": // Telugu                  case "tk": // Turkmen                  case "tr": // Turkish                  case "ur": // Urdu                  case "wae": // Walser                  case "xog": // Soga                  case "zu": // Zulu                      return (n' c) =>                      {                          if (c == 2) return (n == 1) ? 0 : 1;                          if (c == 3) return (n == 0) ? 0 : (n == 1) ? 1 : 2;                          if (c == 4) return (n < 0) ? 0 : (n == 0) ? 1 : (n == 1) ? 2 : 3;                          return -1;                      };                    // DualWithZero: one (n == 0..1)' other                  case "ak": // Akan                  case "am": // Amharic                  case "bh": // Bihari                  case "fil": // Filipino                  case "guw": // Gun                  case "hi": // Hindi                  case "ln": // Lingala                  case "mg": // Malagasy                  case "nso": // Northern Sotho                  case "ti": // Tigrinya                  case "tl": // Tagalog                  case "wa": // Walloon                      return (n' c) => (n == 0 || n == 1) ? 0 : 1;                    // DualFromZeroToTwo: one (n == 0..2 fractionate and n != 2)' other                  case "ff": // Fulah                  case "fr": // French                  case "kab": // Kabyle                      return (n' c) => (n >= 0 && n < 2) ? 0 : 1;                    // Triple: one (n == 1)' two (n == 2)' other                  case "ga": // Irish                  case "iu": // Inuktitut                  case "ksh": // Colognian                  case "kw": // Cornish                  case "se": // Northern Sami                  case "sma": // Southern Sami                  case "smi": // Sami language                  case "smj": // Lule Sami                  case "smn": // Inari Sami                  case "sms": // Skolt Sami                      return (n' c) => (n == 1) ? 0 : (n == 2) ? 1 : 2;                    // Russian & Serbo-Croatian                  case "be": // Belarusian                  case "bs": // Bosnian                  case "hr": // Croatian                  case "ru": // Russian                  case "sh": // Serbo-Croatian                  case "sr": // Serbian                  case "uk": // Ukrainian                      return (n' c) =>                          (n % 10 == 1) && !(n % 100 == 11) ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          2;                    // Unique:                    // Arabic                  case "ar":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          (n % 100).Between(3' 10) ? 3 : // few                          (n % 100).Between(11' 99) ? 4 : // many                          5; // other                    // Breton                  case "br":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5; // other                    // Czech                  case "cs":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Welsh                  case "cy":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5;                    // Manx                  case "gv":                      return (n' c) =>                          (n % 10).Between(1' 2) || (n % 20) == 0 ? 0 :  // one                          1;                    // Langi                  case "lag":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n > 0) && (n < 2) ? 1 : // one                          2;                    // Lithuanian                  case "lt":                      return (n' c) =>                          (n % 10) == 1 && !(n % 100).Between(11' 19) ? 0 : // one                          (n % 10).Between(2' 9) && !(n % 100).Between(11' 19) ? 1 : // few                          2;                    // Latvian                  case "lv":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n % 10) == 1 && (n % 100) != 11 ? 1 :                          2;                    // Macedonian                  case "mb":                      return (n' c) =>                          (n % 10) == 1 && n != 11 ? 0 : // one                          1;                    // Moldavian                  case "mo":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n != 1 && (n % 100).Between(1' 19)) ? 1 : // few                          2;                    // Maltese                  case "mt":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(2' 10) ? 1 : // few                          (n % 100).Between(11' 19) ? 2 : // many                          3;                    // Polish                  case "pl":                      return (n' c) =>                          n == 1 ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          (n % 10).Between(0' 1) || (n % 10).Between(5' 9) || (n % 100).Between(12' 14) ? 2 : // many                          3;                    // Romanian                  case "ro":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(1' 19) ? 1 : // few                          2;                    // Tachelhit                  case "shi":                      return (n' c) =>                          (n >= 0 && n <= 1) ? 0 : // one                          n.Between(2' 10) ? 1 : // few                          2;                    // Slovak                  case "sk":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Slovenian                  case "sl":                      return (n' c) =>                          (n % 100) == 1 ? 0 : // one                          (n % 100) == 2 ? 1 : // two                          (n % 100).Between(3' 4) ? 2 : // few                          3;                    // Central Morocco Tamazight                  case "tzm":                      return (n' c) =>                          n.Between(0' 1) || n.Between(11' 99) ? 0 : // one                          1;                      // Unknown language                  default:                      return null;              }
Magic Number,SmartFormat.Extensions,CommonLanguageRules,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\PluralLocalizationFormatter.cs,GetPluralRule,The following statement contains a magic number: switch (twoLetterISOLanguageName)              {                  // Singular                  case "az": // Azerbaijani                  case "bm": // Bambara                  case "bo": // Tibetan                  case "dz": // Dzongkha                  case "fa": // Persian                  case "hu": // Hungarian                  case "id": // Indonesian                  case "ig": // Igbo                  case "ii": // Sichuan Yi                  case "ja": // Japanese                  case "jv": // Javanese                  case "ka": // Georgian                  case "kde": // Makonde                  case "kea": // Kabuverdianu                  case "km": // Khmer                  case "kn": // Kannada                  case "ko": // Korean                  case "ms": // Malay                  case "my": // Burmese                  case "root": // Root (?)                  case "sah": // Sakha                  case "ses": // Koyraboro Senni                  case "sg": // Sango                  case "th": // Thai                  case "to": // Tonga                  case "vi": // Vietnamese                  case "wo": // Wolof                  case "yo": // Yoruba                  case "zh": // Chinese                      return (n' c) => 0;                    // Dual: one (n == 1)' other                  case "af": // Afrikaans                  case "bem": // Bembda                  case "bg": // Bulgarian                  case "bn": // Bengali                  case "brx": // Bodo                  case "ca": // Catalan                  case "cgg": // Chiga                  case "chr": // Cherokee                  case "da": // Danish                  case "de": // German                  case "dv": // Divehi                  case "ee": // Ewe                  case "el": // Greek                  case "en": // English                  case "eo": // Esperanto                  case "es": // Spanish                  case "et": // Estonian                  case "eu": // Basque                  case "fi": // Finnish                  case "fo": // Faroese                  case "fur": // Friulian                  case "fy": // Western Frisian                  case "gl": // Galician                  case "gsw": // Swiss German                  case "gu": // Gujarati                  case "ha": // Hausa                  case "haw": // Hawaiian                  case "he": // Hebrew                  case "is": // Icelandic                  case "it": // Italian                  case "kk": // Kazakh                  case "kl": // Kalaallisut                  case "ku": // Kurdish                  case "lb": // Luxembourgish                  case "lg": // Ganda                  case "lo": // Lao                  case "mas": // Masai                  case "ml": // Malayalam                  case "mn": // Mongolian                  case "mr": // Marathi                  case "nah": // Nahuatl                  case "nb": // Norwegian Bokmål                  case "ne": // Nepali                  case "nl": // Dutch                  case "nn": // Norwegian Nynorsk                  case "no": // Norwegian                  case "nyn": // Nyankole                  case "om": // Oromo                  case "or": // Oriya                  case "pa": // Punjabi                  case "pap": // Papiamento                  case "ps": // Pashto                  case "pt": // Portuguese                  case "rm": // Romansh                  case "saq": // Samburu                  case "so": // Somali                  case "sq": // Albanian                  case "ssy": // Saho                  case "sw": // Swahili                  case "sv": // Swedish                  case "syr": // Syriac                  case "ta": // Tamil                  case "te": // Telugu                  case "tk": // Turkmen                  case "tr": // Turkish                  case "ur": // Urdu                  case "wae": // Walser                  case "xog": // Soga                  case "zu": // Zulu                      return (n' c) =>                      {                          if (c == 2) return (n == 1) ? 0 : 1;                          if (c == 3) return (n == 0) ? 0 : (n == 1) ? 1 : 2;                          if (c == 4) return (n < 0) ? 0 : (n == 0) ? 1 : (n == 1) ? 2 : 3;                          return -1;                      };                    // DualWithZero: one (n == 0..1)' other                  case "ak": // Akan                  case "am": // Amharic                  case "bh": // Bihari                  case "fil": // Filipino                  case "guw": // Gun                  case "hi": // Hindi                  case "ln": // Lingala                  case "mg": // Malagasy                  case "nso": // Northern Sotho                  case "ti": // Tigrinya                  case "tl": // Tagalog                  case "wa": // Walloon                      return (n' c) => (n == 0 || n == 1) ? 0 : 1;                    // DualFromZeroToTwo: one (n == 0..2 fractionate and n != 2)' other                  case "ff": // Fulah                  case "fr": // French                  case "kab": // Kabyle                      return (n' c) => (n >= 0 && n < 2) ? 0 : 1;                    // Triple: one (n == 1)' two (n == 2)' other                  case "ga": // Irish                  case "iu": // Inuktitut                  case "ksh": // Colognian                  case "kw": // Cornish                  case "se": // Northern Sami                  case "sma": // Southern Sami                  case "smi": // Sami language                  case "smj": // Lule Sami                  case "smn": // Inari Sami                  case "sms": // Skolt Sami                      return (n' c) => (n == 1) ? 0 : (n == 2) ? 1 : 2;                    // Russian & Serbo-Croatian                  case "be": // Belarusian                  case "bs": // Bosnian                  case "hr": // Croatian                  case "ru": // Russian                  case "sh": // Serbo-Croatian                  case "sr": // Serbian                  case "uk": // Ukrainian                      return (n' c) =>                          (n % 10 == 1) && !(n % 100 == 11) ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          2;                    // Unique:                    // Arabic                  case "ar":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          (n % 100).Between(3' 10) ? 3 : // few                          (n % 100).Between(11' 99) ? 4 : // many                          5; // other                    // Breton                  case "br":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5; // other                    // Czech                  case "cs":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Welsh                  case "cy":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5;                    // Manx                  case "gv":                      return (n' c) =>                          (n % 10).Between(1' 2) || (n % 20) == 0 ? 0 :  // one                          1;                    // Langi                  case "lag":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n > 0) && (n < 2) ? 1 : // one                          2;                    // Lithuanian                  case "lt":                      return (n' c) =>                          (n % 10) == 1 && !(n % 100).Between(11' 19) ? 0 : // one                          (n % 10).Between(2' 9) && !(n % 100).Between(11' 19) ? 1 : // few                          2;                    // Latvian                  case "lv":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n % 10) == 1 && (n % 100) != 11 ? 1 :                          2;                    // Macedonian                  case "mb":                      return (n' c) =>                          (n % 10) == 1 && n != 11 ? 0 : // one                          1;                    // Moldavian                  case "mo":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n != 1 && (n % 100).Between(1' 19)) ? 1 : // few                          2;                    // Maltese                  case "mt":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(2' 10) ? 1 : // few                          (n % 100).Between(11' 19) ? 2 : // many                          3;                    // Polish                  case "pl":                      return (n' c) =>                          n == 1 ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          (n % 10).Between(0' 1) || (n % 10).Between(5' 9) || (n % 100).Between(12' 14) ? 2 : // many                          3;                    // Romanian                  case "ro":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(1' 19) ? 1 : // few                          2;                    // Tachelhit                  case "shi":                      return (n' c) =>                          (n >= 0 && n <= 1) ? 0 : // one                          n.Between(2' 10) ? 1 : // few                          2;                    // Slovak                  case "sk":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Slovenian                  case "sl":                      return (n' c) =>                          (n % 100) == 1 ? 0 : // one                          (n % 100) == 2 ? 1 : // two                          (n % 100).Between(3' 4) ? 2 : // few                          3;                    // Central Morocco Tamazight                  case "tzm":                      return (n' c) =>                          n.Between(0' 1) || n.Between(11' 99) ? 0 : // one                          1;                      // Unknown language                  default:                      return null;              }
Magic Number,SmartFormat.Extensions,CommonLanguageRules,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\PluralLocalizationFormatter.cs,GetPluralRule,The following statement contains a magic number: switch (twoLetterISOLanguageName)              {                  // Singular                  case "az": // Azerbaijani                  case "bm": // Bambara                  case "bo": // Tibetan                  case "dz": // Dzongkha                  case "fa": // Persian                  case "hu": // Hungarian                  case "id": // Indonesian                  case "ig": // Igbo                  case "ii": // Sichuan Yi                  case "ja": // Japanese                  case "jv": // Javanese                  case "ka": // Georgian                  case "kde": // Makonde                  case "kea": // Kabuverdianu                  case "km": // Khmer                  case "kn": // Kannada                  case "ko": // Korean                  case "ms": // Malay                  case "my": // Burmese                  case "root": // Root (?)                  case "sah": // Sakha                  case "ses": // Koyraboro Senni                  case "sg": // Sango                  case "th": // Thai                  case "to": // Tonga                  case "vi": // Vietnamese                  case "wo": // Wolof                  case "yo": // Yoruba                  case "zh": // Chinese                      return (n' c) => 0;                    // Dual: one (n == 1)' other                  case "af": // Afrikaans                  case "bem": // Bembda                  case "bg": // Bulgarian                  case "bn": // Bengali                  case "brx": // Bodo                  case "ca": // Catalan                  case "cgg": // Chiga                  case "chr": // Cherokee                  case "da": // Danish                  case "de": // German                  case "dv": // Divehi                  case "ee": // Ewe                  case "el": // Greek                  case "en": // English                  case "eo": // Esperanto                  case "es": // Spanish                  case "et": // Estonian                  case "eu": // Basque                  case "fi": // Finnish                  case "fo": // Faroese                  case "fur": // Friulian                  case "fy": // Western Frisian                  case "gl": // Galician                  case "gsw": // Swiss German                  case "gu": // Gujarati                  case "ha": // Hausa                  case "haw": // Hawaiian                  case "he": // Hebrew                  case "is": // Icelandic                  case "it": // Italian                  case "kk": // Kazakh                  case "kl": // Kalaallisut                  case "ku": // Kurdish                  case "lb": // Luxembourgish                  case "lg": // Ganda                  case "lo": // Lao                  case "mas": // Masai                  case "ml": // Malayalam                  case "mn": // Mongolian                  case "mr": // Marathi                  case "nah": // Nahuatl                  case "nb": // Norwegian Bokmål                  case "ne": // Nepali                  case "nl": // Dutch                  case "nn": // Norwegian Nynorsk                  case "no": // Norwegian                  case "nyn": // Nyankole                  case "om": // Oromo                  case "or": // Oriya                  case "pa": // Punjabi                  case "pap": // Papiamento                  case "ps": // Pashto                  case "pt": // Portuguese                  case "rm": // Romansh                  case "saq": // Samburu                  case "so": // Somali                  case "sq": // Albanian                  case "ssy": // Saho                  case "sw": // Swahili                  case "sv": // Swedish                  case "syr": // Syriac                  case "ta": // Tamil                  case "te": // Telugu                  case "tk": // Turkmen                  case "tr": // Turkish                  case "ur": // Urdu                  case "wae": // Walser                  case "xog": // Soga                  case "zu": // Zulu                      return (n' c) =>                      {                          if (c == 2) return (n == 1) ? 0 : 1;                          if (c == 3) return (n == 0) ? 0 : (n == 1) ? 1 : 2;                          if (c == 4) return (n < 0) ? 0 : (n == 0) ? 1 : (n == 1) ? 2 : 3;                          return -1;                      };                    // DualWithZero: one (n == 0..1)' other                  case "ak": // Akan                  case "am": // Amharic                  case "bh": // Bihari                  case "fil": // Filipino                  case "guw": // Gun                  case "hi": // Hindi                  case "ln": // Lingala                  case "mg": // Malagasy                  case "nso": // Northern Sotho                  case "ti": // Tigrinya                  case "tl": // Tagalog                  case "wa": // Walloon                      return (n' c) => (n == 0 || n == 1) ? 0 : 1;                    // DualFromZeroToTwo: one (n == 0..2 fractionate and n != 2)' other                  case "ff": // Fulah                  case "fr": // French                  case "kab": // Kabyle                      return (n' c) => (n >= 0 && n < 2) ? 0 : 1;                    // Triple: one (n == 1)' two (n == 2)' other                  case "ga": // Irish                  case "iu": // Inuktitut                  case "ksh": // Colognian                  case "kw": // Cornish                  case "se": // Northern Sami                  case "sma": // Southern Sami                  case "smi": // Sami language                  case "smj": // Lule Sami                  case "smn": // Inari Sami                  case "sms": // Skolt Sami                      return (n' c) => (n == 1) ? 0 : (n == 2) ? 1 : 2;                    // Russian & Serbo-Croatian                  case "be": // Belarusian                  case "bs": // Bosnian                  case "hr": // Croatian                  case "ru": // Russian                  case "sh": // Serbo-Croatian                  case "sr": // Serbian                  case "uk": // Ukrainian                      return (n' c) =>                          (n % 10 == 1) && !(n % 100 == 11) ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          2;                    // Unique:                    // Arabic                  case "ar":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          (n % 100).Between(3' 10) ? 3 : // few                          (n % 100).Between(11' 99) ? 4 : // many                          5; // other                    // Breton                  case "br":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5; // other                    // Czech                  case "cs":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Welsh                  case "cy":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5;                    // Manx                  case "gv":                      return (n' c) =>                          (n % 10).Between(1' 2) || (n % 20) == 0 ? 0 :  // one                          1;                    // Langi                  case "lag":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n > 0) && (n < 2) ? 1 : // one                          2;                    // Lithuanian                  case "lt":                      return (n' c) =>                          (n % 10) == 1 && !(n % 100).Between(11' 19) ? 0 : // one                          (n % 10).Between(2' 9) && !(n % 100).Between(11' 19) ? 1 : // few                          2;                    // Latvian                  case "lv":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n % 10) == 1 && (n % 100) != 11 ? 1 :                          2;                    // Macedonian                  case "mb":                      return (n' c) =>                          (n % 10) == 1 && n != 11 ? 0 : // one                          1;                    // Moldavian                  case "mo":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n != 1 && (n % 100).Between(1' 19)) ? 1 : // few                          2;                    // Maltese                  case "mt":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(2' 10) ? 1 : // few                          (n % 100).Between(11' 19) ? 2 : // many                          3;                    // Polish                  case "pl":                      return (n' c) =>                          n == 1 ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          (n % 10).Between(0' 1) || (n % 10).Between(5' 9) || (n % 100).Between(12' 14) ? 2 : // many                          3;                    // Romanian                  case "ro":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(1' 19) ? 1 : // few                          2;                    // Tachelhit                  case "shi":                      return (n' c) =>                          (n >= 0 && n <= 1) ? 0 : // one                          n.Between(2' 10) ? 1 : // few                          2;                    // Slovak                  case "sk":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Slovenian                  case "sl":                      return (n' c) =>                          (n % 100) == 1 ? 0 : // one                          (n % 100) == 2 ? 1 : // two                          (n % 100).Between(3' 4) ? 2 : // few                          3;                    // Central Morocco Tamazight                  case "tzm":                      return (n' c) =>                          n.Between(0' 1) || n.Between(11' 99) ? 0 : // one                          1;                      // Unknown language                  default:                      return null;              }
Magic Number,SmartFormat.Extensions,CommonLanguageRules,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\PluralLocalizationFormatter.cs,GetPluralRule,The following statement contains a magic number: switch (twoLetterISOLanguageName)              {                  // Singular                  case "az": // Azerbaijani                  case "bm": // Bambara                  case "bo": // Tibetan                  case "dz": // Dzongkha                  case "fa": // Persian                  case "hu": // Hungarian                  case "id": // Indonesian                  case "ig": // Igbo                  case "ii": // Sichuan Yi                  case "ja": // Japanese                  case "jv": // Javanese                  case "ka": // Georgian                  case "kde": // Makonde                  case "kea": // Kabuverdianu                  case "km": // Khmer                  case "kn": // Kannada                  case "ko": // Korean                  case "ms": // Malay                  case "my": // Burmese                  case "root": // Root (?)                  case "sah": // Sakha                  case "ses": // Koyraboro Senni                  case "sg": // Sango                  case "th": // Thai                  case "to": // Tonga                  case "vi": // Vietnamese                  case "wo": // Wolof                  case "yo": // Yoruba                  case "zh": // Chinese                      return (n' c) => 0;                    // Dual: one (n == 1)' other                  case "af": // Afrikaans                  case "bem": // Bembda                  case "bg": // Bulgarian                  case "bn": // Bengali                  case "brx": // Bodo                  case "ca": // Catalan                  case "cgg": // Chiga                  case "chr": // Cherokee                  case "da": // Danish                  case "de": // German                  case "dv": // Divehi                  case "ee": // Ewe                  case "el": // Greek                  case "en": // English                  case "eo": // Esperanto                  case "es": // Spanish                  case "et": // Estonian                  case "eu": // Basque                  case "fi": // Finnish                  case "fo": // Faroese                  case "fur": // Friulian                  case "fy": // Western Frisian                  case "gl": // Galician                  case "gsw": // Swiss German                  case "gu": // Gujarati                  case "ha": // Hausa                  case "haw": // Hawaiian                  case "he": // Hebrew                  case "is": // Icelandic                  case "it": // Italian                  case "kk": // Kazakh                  case "kl": // Kalaallisut                  case "ku": // Kurdish                  case "lb": // Luxembourgish                  case "lg": // Ganda                  case "lo": // Lao                  case "mas": // Masai                  case "ml": // Malayalam                  case "mn": // Mongolian                  case "mr": // Marathi                  case "nah": // Nahuatl                  case "nb": // Norwegian Bokmål                  case "ne": // Nepali                  case "nl": // Dutch                  case "nn": // Norwegian Nynorsk                  case "no": // Norwegian                  case "nyn": // Nyankole                  case "om": // Oromo                  case "or": // Oriya                  case "pa": // Punjabi                  case "pap": // Papiamento                  case "ps": // Pashto                  case "pt": // Portuguese                  case "rm": // Romansh                  case "saq": // Samburu                  case "so": // Somali                  case "sq": // Albanian                  case "ssy": // Saho                  case "sw": // Swahili                  case "sv": // Swedish                  case "syr": // Syriac                  case "ta": // Tamil                  case "te": // Telugu                  case "tk": // Turkmen                  case "tr": // Turkish                  case "ur": // Urdu                  case "wae": // Walser                  case "xog": // Soga                  case "zu": // Zulu                      return (n' c) =>                      {                          if (c == 2) return (n == 1) ? 0 : 1;                          if (c == 3) return (n == 0) ? 0 : (n == 1) ? 1 : 2;                          if (c == 4) return (n < 0) ? 0 : (n == 0) ? 1 : (n == 1) ? 2 : 3;                          return -1;                      };                    // DualWithZero: one (n == 0..1)' other                  case "ak": // Akan                  case "am": // Amharic                  case "bh": // Bihari                  case "fil": // Filipino                  case "guw": // Gun                  case "hi": // Hindi                  case "ln": // Lingala                  case "mg": // Malagasy                  case "nso": // Northern Sotho                  case "ti": // Tigrinya                  case "tl": // Tagalog                  case "wa": // Walloon                      return (n' c) => (n == 0 || n == 1) ? 0 : 1;                    // DualFromZeroToTwo: one (n == 0..2 fractionate and n != 2)' other                  case "ff": // Fulah                  case "fr": // French                  case "kab": // Kabyle                      return (n' c) => (n >= 0 && n < 2) ? 0 : 1;                    // Triple: one (n == 1)' two (n == 2)' other                  case "ga": // Irish                  case "iu": // Inuktitut                  case "ksh": // Colognian                  case "kw": // Cornish                  case "se": // Northern Sami                  case "sma": // Southern Sami                  case "smi": // Sami language                  case "smj": // Lule Sami                  case "smn": // Inari Sami                  case "sms": // Skolt Sami                      return (n' c) => (n == 1) ? 0 : (n == 2) ? 1 : 2;                    // Russian & Serbo-Croatian                  case "be": // Belarusian                  case "bs": // Bosnian                  case "hr": // Croatian                  case "ru": // Russian                  case "sh": // Serbo-Croatian                  case "sr": // Serbian                  case "uk": // Ukrainian                      return (n' c) =>                          (n % 10 == 1) && !(n % 100 == 11) ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          2;                    // Unique:                    // Arabic                  case "ar":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          (n % 100).Between(3' 10) ? 3 : // few                          (n % 100).Between(11' 99) ? 4 : // many                          5; // other                    // Breton                  case "br":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5; // other                    // Czech                  case "cs":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Welsh                  case "cy":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5;                    // Manx                  case "gv":                      return (n' c) =>                          (n % 10).Between(1' 2) || (n % 20) == 0 ? 0 :  // one                          1;                    // Langi                  case "lag":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n > 0) && (n < 2) ? 1 : // one                          2;                    // Lithuanian                  case "lt":                      return (n' c) =>                          (n % 10) == 1 && !(n % 100).Between(11' 19) ? 0 : // one                          (n % 10).Between(2' 9) && !(n % 100).Between(11' 19) ? 1 : // few                          2;                    // Latvian                  case "lv":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n % 10) == 1 && (n % 100) != 11 ? 1 :                          2;                    // Macedonian                  case "mb":                      return (n' c) =>                          (n % 10) == 1 && n != 11 ? 0 : // one                          1;                    // Moldavian                  case "mo":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n != 1 && (n % 100).Between(1' 19)) ? 1 : // few                          2;                    // Maltese                  case "mt":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(2' 10) ? 1 : // few                          (n % 100).Between(11' 19) ? 2 : // many                          3;                    // Polish                  case "pl":                      return (n' c) =>                          n == 1 ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          (n % 10).Between(0' 1) || (n % 10).Between(5' 9) || (n % 100).Between(12' 14) ? 2 : // many                          3;                    // Romanian                  case "ro":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(1' 19) ? 1 : // few                          2;                    // Tachelhit                  case "shi":                      return (n' c) =>                          (n >= 0 && n <= 1) ? 0 : // one                          n.Between(2' 10) ? 1 : // few                          2;                    // Slovak                  case "sk":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Slovenian                  case "sl":                      return (n' c) =>                          (n % 100) == 1 ? 0 : // one                          (n % 100) == 2 ? 1 : // two                          (n % 100).Between(3' 4) ? 2 : // few                          3;                    // Central Morocco Tamazight                  case "tzm":                      return (n' c) =>                          n.Between(0' 1) || n.Between(11' 99) ? 0 : // one                          1;                      // Unknown language                  default:                      return null;              }
Magic Number,SmartFormat.Extensions,CommonLanguageRules,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\PluralLocalizationFormatter.cs,GetPluralRule,The following statement contains a magic number: switch (twoLetterISOLanguageName)              {                  // Singular                  case "az": // Azerbaijani                  case "bm": // Bambara                  case "bo": // Tibetan                  case "dz": // Dzongkha                  case "fa": // Persian                  case "hu": // Hungarian                  case "id": // Indonesian                  case "ig": // Igbo                  case "ii": // Sichuan Yi                  case "ja": // Japanese                  case "jv": // Javanese                  case "ka": // Georgian                  case "kde": // Makonde                  case "kea": // Kabuverdianu                  case "km": // Khmer                  case "kn": // Kannada                  case "ko": // Korean                  case "ms": // Malay                  case "my": // Burmese                  case "root": // Root (?)                  case "sah": // Sakha                  case "ses": // Koyraboro Senni                  case "sg": // Sango                  case "th": // Thai                  case "to": // Tonga                  case "vi": // Vietnamese                  case "wo": // Wolof                  case "yo": // Yoruba                  case "zh": // Chinese                      return (n' c) => 0;                    // Dual: one (n == 1)' other                  case "af": // Afrikaans                  case "bem": // Bembda                  case "bg": // Bulgarian                  case "bn": // Bengali                  case "brx": // Bodo                  case "ca": // Catalan                  case "cgg": // Chiga                  case "chr": // Cherokee                  case "da": // Danish                  case "de": // German                  case "dv": // Divehi                  case "ee": // Ewe                  case "el": // Greek                  case "en": // English                  case "eo": // Esperanto                  case "es": // Spanish                  case "et": // Estonian                  case "eu": // Basque                  case "fi": // Finnish                  case "fo": // Faroese                  case "fur": // Friulian                  case "fy": // Western Frisian                  case "gl": // Galician                  case "gsw": // Swiss German                  case "gu": // Gujarati                  case "ha": // Hausa                  case "haw": // Hawaiian                  case "he": // Hebrew                  case "is": // Icelandic                  case "it": // Italian                  case "kk": // Kazakh                  case "kl": // Kalaallisut                  case "ku": // Kurdish                  case "lb": // Luxembourgish                  case "lg": // Ganda                  case "lo": // Lao                  case "mas": // Masai                  case "ml": // Malayalam                  case "mn": // Mongolian                  case "mr": // Marathi                  case "nah": // Nahuatl                  case "nb": // Norwegian Bokmål                  case "ne": // Nepali                  case "nl": // Dutch                  case "nn": // Norwegian Nynorsk                  case "no": // Norwegian                  case "nyn": // Nyankole                  case "om": // Oromo                  case "or": // Oriya                  case "pa": // Punjabi                  case "pap": // Papiamento                  case "ps": // Pashto                  case "pt": // Portuguese                  case "rm": // Romansh                  case "saq": // Samburu                  case "so": // Somali                  case "sq": // Albanian                  case "ssy": // Saho                  case "sw": // Swahili                  case "sv": // Swedish                  case "syr": // Syriac                  case "ta": // Tamil                  case "te": // Telugu                  case "tk": // Turkmen                  case "tr": // Turkish                  case "ur": // Urdu                  case "wae": // Walser                  case "xog": // Soga                  case "zu": // Zulu                      return (n' c) =>                      {                          if (c == 2) return (n == 1) ? 0 : 1;                          if (c == 3) return (n == 0) ? 0 : (n == 1) ? 1 : 2;                          if (c == 4) return (n < 0) ? 0 : (n == 0) ? 1 : (n == 1) ? 2 : 3;                          return -1;                      };                    // DualWithZero: one (n == 0..1)' other                  case "ak": // Akan                  case "am": // Amharic                  case "bh": // Bihari                  case "fil": // Filipino                  case "guw": // Gun                  case "hi": // Hindi                  case "ln": // Lingala                  case "mg": // Malagasy                  case "nso": // Northern Sotho                  case "ti": // Tigrinya                  case "tl": // Tagalog                  case "wa": // Walloon                      return (n' c) => (n == 0 || n == 1) ? 0 : 1;                    // DualFromZeroToTwo: one (n == 0..2 fractionate and n != 2)' other                  case "ff": // Fulah                  case "fr": // French                  case "kab": // Kabyle                      return (n' c) => (n >= 0 && n < 2) ? 0 : 1;                    // Triple: one (n == 1)' two (n == 2)' other                  case "ga": // Irish                  case "iu": // Inuktitut                  case "ksh": // Colognian                  case "kw": // Cornish                  case "se": // Northern Sami                  case "sma": // Southern Sami                  case "smi": // Sami language                  case "smj": // Lule Sami                  case "smn": // Inari Sami                  case "sms": // Skolt Sami                      return (n' c) => (n == 1) ? 0 : (n == 2) ? 1 : 2;                    // Russian & Serbo-Croatian                  case "be": // Belarusian                  case "bs": // Bosnian                  case "hr": // Croatian                  case "ru": // Russian                  case "sh": // Serbo-Croatian                  case "sr": // Serbian                  case "uk": // Ukrainian                      return (n' c) =>                          (n % 10 == 1) && !(n % 100 == 11) ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          2;                    // Unique:                    // Arabic                  case "ar":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          (n % 100).Between(3' 10) ? 3 : // few                          (n % 100).Between(11' 99) ? 4 : // many                          5; // other                    // Breton                  case "br":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5; // other                    // Czech                  case "cs":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Welsh                  case "cy":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5;                    // Manx                  case "gv":                      return (n' c) =>                          (n % 10).Between(1' 2) || (n % 20) == 0 ? 0 :  // one                          1;                    // Langi                  case "lag":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n > 0) && (n < 2) ? 1 : // one                          2;                    // Lithuanian                  case "lt":                      return (n' c) =>                          (n % 10) == 1 && !(n % 100).Between(11' 19) ? 0 : // one                          (n % 10).Between(2' 9) && !(n % 100).Between(11' 19) ? 1 : // few                          2;                    // Latvian                  case "lv":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n % 10) == 1 && (n % 100) != 11 ? 1 :                          2;                    // Macedonian                  case "mb":                      return (n' c) =>                          (n % 10) == 1 && n != 11 ? 0 : // one                          1;                    // Moldavian                  case "mo":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n != 1 && (n % 100).Between(1' 19)) ? 1 : // few                          2;                    // Maltese                  case "mt":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(2' 10) ? 1 : // few                          (n % 100).Between(11' 19) ? 2 : // many                          3;                    // Polish                  case "pl":                      return (n' c) =>                          n == 1 ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          (n % 10).Between(0' 1) || (n % 10).Between(5' 9) || (n % 100).Between(12' 14) ? 2 : // many                          3;                    // Romanian                  case "ro":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(1' 19) ? 1 : // few                          2;                    // Tachelhit                  case "shi":                      return (n' c) =>                          (n >= 0 && n <= 1) ? 0 : // one                          n.Between(2' 10) ? 1 : // few                          2;                    // Slovak                  case "sk":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Slovenian                  case "sl":                      return (n' c) =>                          (n % 100) == 1 ? 0 : // one                          (n % 100) == 2 ? 1 : // two                          (n % 100).Between(3' 4) ? 2 : // few                          3;                    // Central Morocco Tamazight                  case "tzm":                      return (n' c) =>                          n.Between(0' 1) || n.Between(11' 99) ? 0 : // one                          1;                      // Unknown language                  default:                      return null;              }
Magic Number,SmartFormat.Extensions,CommonLanguageRules,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\PluralLocalizationFormatter.cs,GetPluralRule,The following statement contains a magic number: switch (twoLetterISOLanguageName)              {                  // Singular                  case "az": // Azerbaijani                  case "bm": // Bambara                  case "bo": // Tibetan                  case "dz": // Dzongkha                  case "fa": // Persian                  case "hu": // Hungarian                  case "id": // Indonesian                  case "ig": // Igbo                  case "ii": // Sichuan Yi                  case "ja": // Japanese                  case "jv": // Javanese                  case "ka": // Georgian                  case "kde": // Makonde                  case "kea": // Kabuverdianu                  case "km": // Khmer                  case "kn": // Kannada                  case "ko": // Korean                  case "ms": // Malay                  case "my": // Burmese                  case "root": // Root (?)                  case "sah": // Sakha                  case "ses": // Koyraboro Senni                  case "sg": // Sango                  case "th": // Thai                  case "to": // Tonga                  case "vi": // Vietnamese                  case "wo": // Wolof                  case "yo": // Yoruba                  case "zh": // Chinese                      return (n' c) => 0;                    // Dual: one (n == 1)' other                  case "af": // Afrikaans                  case "bem": // Bembda                  case "bg": // Bulgarian                  case "bn": // Bengali                  case "brx": // Bodo                  case "ca": // Catalan                  case "cgg": // Chiga                  case "chr": // Cherokee                  case "da": // Danish                  case "de": // German                  case "dv": // Divehi                  case "ee": // Ewe                  case "el": // Greek                  case "en": // English                  case "eo": // Esperanto                  case "es": // Spanish                  case "et": // Estonian                  case "eu": // Basque                  case "fi": // Finnish                  case "fo": // Faroese                  case "fur": // Friulian                  case "fy": // Western Frisian                  case "gl": // Galician                  case "gsw": // Swiss German                  case "gu": // Gujarati                  case "ha": // Hausa                  case "haw": // Hawaiian                  case "he": // Hebrew                  case "is": // Icelandic                  case "it": // Italian                  case "kk": // Kazakh                  case "kl": // Kalaallisut                  case "ku": // Kurdish                  case "lb": // Luxembourgish                  case "lg": // Ganda                  case "lo": // Lao                  case "mas": // Masai                  case "ml": // Malayalam                  case "mn": // Mongolian                  case "mr": // Marathi                  case "nah": // Nahuatl                  case "nb": // Norwegian Bokmål                  case "ne": // Nepali                  case "nl": // Dutch                  case "nn": // Norwegian Nynorsk                  case "no": // Norwegian                  case "nyn": // Nyankole                  case "om": // Oromo                  case "or": // Oriya                  case "pa": // Punjabi                  case "pap": // Papiamento                  case "ps": // Pashto                  case "pt": // Portuguese                  case "rm": // Romansh                  case "saq": // Samburu                  case "so": // Somali                  case "sq": // Albanian                  case "ssy": // Saho                  case "sw": // Swahili                  case "sv": // Swedish                  case "syr": // Syriac                  case "ta": // Tamil                  case "te": // Telugu                  case "tk": // Turkmen                  case "tr": // Turkish                  case "ur": // Urdu                  case "wae": // Walser                  case "xog": // Soga                  case "zu": // Zulu                      return (n' c) =>                      {                          if (c == 2) return (n == 1) ? 0 : 1;                          if (c == 3) return (n == 0) ? 0 : (n == 1) ? 1 : 2;                          if (c == 4) return (n < 0) ? 0 : (n == 0) ? 1 : (n == 1) ? 2 : 3;                          return -1;                      };                    // DualWithZero: one (n == 0..1)' other                  case "ak": // Akan                  case "am": // Amharic                  case "bh": // Bihari                  case "fil": // Filipino                  case "guw": // Gun                  case "hi": // Hindi                  case "ln": // Lingala                  case "mg": // Malagasy                  case "nso": // Northern Sotho                  case "ti": // Tigrinya                  case "tl": // Tagalog                  case "wa": // Walloon                      return (n' c) => (n == 0 || n == 1) ? 0 : 1;                    // DualFromZeroToTwo: one (n == 0..2 fractionate and n != 2)' other                  case "ff": // Fulah                  case "fr": // French                  case "kab": // Kabyle                      return (n' c) => (n >= 0 && n < 2) ? 0 : 1;                    // Triple: one (n == 1)' two (n == 2)' other                  case "ga": // Irish                  case "iu": // Inuktitut                  case "ksh": // Colognian                  case "kw": // Cornish                  case "se": // Northern Sami                  case "sma": // Southern Sami                  case "smi": // Sami language                  case "smj": // Lule Sami                  case "smn": // Inari Sami                  case "sms": // Skolt Sami                      return (n' c) => (n == 1) ? 0 : (n == 2) ? 1 : 2;                    // Russian & Serbo-Croatian                  case "be": // Belarusian                  case "bs": // Bosnian                  case "hr": // Croatian                  case "ru": // Russian                  case "sh": // Serbo-Croatian                  case "sr": // Serbian                  case "uk": // Ukrainian                      return (n' c) =>                          (n % 10 == 1) && !(n % 100 == 11) ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          2;                    // Unique:                    // Arabic                  case "ar":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          (n % 100).Between(3' 10) ? 3 : // few                          (n % 100).Between(11' 99) ? 4 : // many                          5; // other                    // Breton                  case "br":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5; // other                    // Czech                  case "cs":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Welsh                  case "cy":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5;                    // Manx                  case "gv":                      return (n' c) =>                          (n % 10).Between(1' 2) || (n % 20) == 0 ? 0 :  // one                          1;                    // Langi                  case "lag":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n > 0) && (n < 2) ? 1 : // one                          2;                    // Lithuanian                  case "lt":                      return (n' c) =>                          (n % 10) == 1 && !(n % 100).Between(11' 19) ? 0 : // one                          (n % 10).Between(2' 9) && !(n % 100).Between(11' 19) ? 1 : // few                          2;                    // Latvian                  case "lv":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n % 10) == 1 && (n % 100) != 11 ? 1 :                          2;                    // Macedonian                  case "mb":                      return (n' c) =>                          (n % 10) == 1 && n != 11 ? 0 : // one                          1;                    // Moldavian                  case "mo":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n != 1 && (n % 100).Between(1' 19)) ? 1 : // few                          2;                    // Maltese                  case "mt":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(2' 10) ? 1 : // few                          (n % 100).Between(11' 19) ? 2 : // many                          3;                    // Polish                  case "pl":                      return (n' c) =>                          n == 1 ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          (n % 10).Between(0' 1) || (n % 10).Between(5' 9) || (n % 100).Between(12' 14) ? 2 : // many                          3;                    // Romanian                  case "ro":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(1' 19) ? 1 : // few                          2;                    // Tachelhit                  case "shi":                      return (n' c) =>                          (n >= 0 && n <= 1) ? 0 : // one                          n.Between(2' 10) ? 1 : // few                          2;                    // Slovak                  case "sk":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Slovenian                  case "sl":                      return (n' c) =>                          (n % 100) == 1 ? 0 : // one                          (n % 100) == 2 ? 1 : // two                          (n % 100).Between(3' 4) ? 2 : // few                          3;                    // Central Morocco Tamazight                  case "tzm":                      return (n' c) =>                          n.Between(0' 1) || n.Between(11' 99) ? 0 : // one                          1;                      // Unknown language                  default:                      return null;              }
Magic Number,SmartFormat.Extensions,CommonLanguageRules,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\PluralLocalizationFormatter.cs,GetPluralRule,The following statement contains a magic number: switch (twoLetterISOLanguageName)              {                  // Singular                  case "az": // Azerbaijani                  case "bm": // Bambara                  case "bo": // Tibetan                  case "dz": // Dzongkha                  case "fa": // Persian                  case "hu": // Hungarian                  case "id": // Indonesian                  case "ig": // Igbo                  case "ii": // Sichuan Yi                  case "ja": // Japanese                  case "jv": // Javanese                  case "ka": // Georgian                  case "kde": // Makonde                  case "kea": // Kabuverdianu                  case "km": // Khmer                  case "kn": // Kannada                  case "ko": // Korean                  case "ms": // Malay                  case "my": // Burmese                  case "root": // Root (?)                  case "sah": // Sakha                  case "ses": // Koyraboro Senni                  case "sg": // Sango                  case "th": // Thai                  case "to": // Tonga                  case "vi": // Vietnamese                  case "wo": // Wolof                  case "yo": // Yoruba                  case "zh": // Chinese                      return (n' c) => 0;                    // Dual: one (n == 1)' other                  case "af": // Afrikaans                  case "bem": // Bembda                  case "bg": // Bulgarian                  case "bn": // Bengali                  case "brx": // Bodo                  case "ca": // Catalan                  case "cgg": // Chiga                  case "chr": // Cherokee                  case "da": // Danish                  case "de": // German                  case "dv": // Divehi                  case "ee": // Ewe                  case "el": // Greek                  case "en": // English                  case "eo": // Esperanto                  case "es": // Spanish                  case "et": // Estonian                  case "eu": // Basque                  case "fi": // Finnish                  case "fo": // Faroese                  case "fur": // Friulian                  case "fy": // Western Frisian                  case "gl": // Galician                  case "gsw": // Swiss German                  case "gu": // Gujarati                  case "ha": // Hausa                  case "haw": // Hawaiian                  case "he": // Hebrew                  case "is": // Icelandic                  case "it": // Italian                  case "kk": // Kazakh                  case "kl": // Kalaallisut                  case "ku": // Kurdish                  case "lb": // Luxembourgish                  case "lg": // Ganda                  case "lo": // Lao                  case "mas": // Masai                  case "ml": // Malayalam                  case "mn": // Mongolian                  case "mr": // Marathi                  case "nah": // Nahuatl                  case "nb": // Norwegian Bokmål                  case "ne": // Nepali                  case "nl": // Dutch                  case "nn": // Norwegian Nynorsk                  case "no": // Norwegian                  case "nyn": // Nyankole                  case "om": // Oromo                  case "or": // Oriya                  case "pa": // Punjabi                  case "pap": // Papiamento                  case "ps": // Pashto                  case "pt": // Portuguese                  case "rm": // Romansh                  case "saq": // Samburu                  case "so": // Somali                  case "sq": // Albanian                  case "ssy": // Saho                  case "sw": // Swahili                  case "sv": // Swedish                  case "syr": // Syriac                  case "ta": // Tamil                  case "te": // Telugu                  case "tk": // Turkmen                  case "tr": // Turkish                  case "ur": // Urdu                  case "wae": // Walser                  case "xog": // Soga                  case "zu": // Zulu                      return (n' c) =>                      {                          if (c == 2) return (n == 1) ? 0 : 1;                          if (c == 3) return (n == 0) ? 0 : (n == 1) ? 1 : 2;                          if (c == 4) return (n < 0) ? 0 : (n == 0) ? 1 : (n == 1) ? 2 : 3;                          return -1;                      };                    // DualWithZero: one (n == 0..1)' other                  case "ak": // Akan                  case "am": // Amharic                  case "bh": // Bihari                  case "fil": // Filipino                  case "guw": // Gun                  case "hi": // Hindi                  case "ln": // Lingala                  case "mg": // Malagasy                  case "nso": // Northern Sotho                  case "ti": // Tigrinya                  case "tl": // Tagalog                  case "wa": // Walloon                      return (n' c) => (n == 0 || n == 1) ? 0 : 1;                    // DualFromZeroToTwo: one (n == 0..2 fractionate and n != 2)' other                  case "ff": // Fulah                  case "fr": // French                  case "kab": // Kabyle                      return (n' c) => (n >= 0 && n < 2) ? 0 : 1;                    // Triple: one (n == 1)' two (n == 2)' other                  case "ga": // Irish                  case "iu": // Inuktitut                  case "ksh": // Colognian                  case "kw": // Cornish                  case "se": // Northern Sami                  case "sma": // Southern Sami                  case "smi": // Sami language                  case "smj": // Lule Sami                  case "smn": // Inari Sami                  case "sms": // Skolt Sami                      return (n' c) => (n == 1) ? 0 : (n == 2) ? 1 : 2;                    // Russian & Serbo-Croatian                  case "be": // Belarusian                  case "bs": // Bosnian                  case "hr": // Croatian                  case "ru": // Russian                  case "sh": // Serbo-Croatian                  case "sr": // Serbian                  case "uk": // Ukrainian                      return (n' c) =>                          (n % 10 == 1) && !(n % 100 == 11) ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          2;                    // Unique:                    // Arabic                  case "ar":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          (n % 100).Between(3' 10) ? 3 : // few                          (n % 100).Between(11' 99) ? 4 : // many                          5; // other                    // Breton                  case "br":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5; // other                    // Czech                  case "cs":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Welsh                  case "cy":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5;                    // Manx                  case "gv":                      return (n' c) =>                          (n % 10).Between(1' 2) || (n % 20) == 0 ? 0 :  // one                          1;                    // Langi                  case "lag":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n > 0) && (n < 2) ? 1 : // one                          2;                    // Lithuanian                  case "lt":                      return (n' c) =>                          (n % 10) == 1 && !(n % 100).Between(11' 19) ? 0 : // one                          (n % 10).Between(2' 9) && !(n % 100).Between(11' 19) ? 1 : // few                          2;                    // Latvian                  case "lv":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n % 10) == 1 && (n % 100) != 11 ? 1 :                          2;                    // Macedonian                  case "mb":                      return (n' c) =>                          (n % 10) == 1 && n != 11 ? 0 : // one                          1;                    // Moldavian                  case "mo":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n != 1 && (n % 100).Between(1' 19)) ? 1 : // few                          2;                    // Maltese                  case "mt":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(2' 10) ? 1 : // few                          (n % 100).Between(11' 19) ? 2 : // many                          3;                    // Polish                  case "pl":                      return (n' c) =>                          n == 1 ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          (n % 10).Between(0' 1) || (n % 10).Between(5' 9) || (n % 100).Between(12' 14) ? 2 : // many                          3;                    // Romanian                  case "ro":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(1' 19) ? 1 : // few                          2;                    // Tachelhit                  case "shi":                      return (n' c) =>                          (n >= 0 && n <= 1) ? 0 : // one                          n.Between(2' 10) ? 1 : // few                          2;                    // Slovak                  case "sk":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Slovenian                  case "sl":                      return (n' c) =>                          (n % 100) == 1 ? 0 : // one                          (n % 100) == 2 ? 1 : // two                          (n % 100).Between(3' 4) ? 2 : // few                          3;                    // Central Morocco Tamazight                  case "tzm":                      return (n' c) =>                          n.Between(0' 1) || n.Between(11' 99) ? 0 : // one                          1;                      // Unknown language                  default:                      return null;              }
Magic Number,SmartFormat.Extensions,CommonLanguageRules,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\PluralLocalizationFormatter.cs,GetPluralRule,The following statement contains a magic number: switch (twoLetterISOLanguageName)              {                  // Singular                  case "az": // Azerbaijani                  case "bm": // Bambara                  case "bo": // Tibetan                  case "dz": // Dzongkha                  case "fa": // Persian                  case "hu": // Hungarian                  case "id": // Indonesian                  case "ig": // Igbo                  case "ii": // Sichuan Yi                  case "ja": // Japanese                  case "jv": // Javanese                  case "ka": // Georgian                  case "kde": // Makonde                  case "kea": // Kabuverdianu                  case "km": // Khmer                  case "kn": // Kannada                  case "ko": // Korean                  case "ms": // Malay                  case "my": // Burmese                  case "root": // Root (?)                  case "sah": // Sakha                  case "ses": // Koyraboro Senni                  case "sg": // Sango                  case "th": // Thai                  case "to": // Tonga                  case "vi": // Vietnamese                  case "wo": // Wolof                  case "yo": // Yoruba                  case "zh": // Chinese                      return (n' c) => 0;                    // Dual: one (n == 1)' other                  case "af": // Afrikaans                  case "bem": // Bembda                  case "bg": // Bulgarian                  case "bn": // Bengali                  case "brx": // Bodo                  case "ca": // Catalan                  case "cgg": // Chiga                  case "chr": // Cherokee                  case "da": // Danish                  case "de": // German                  case "dv": // Divehi                  case "ee": // Ewe                  case "el": // Greek                  case "en": // English                  case "eo": // Esperanto                  case "es": // Spanish                  case "et": // Estonian                  case "eu": // Basque                  case "fi": // Finnish                  case "fo": // Faroese                  case "fur": // Friulian                  case "fy": // Western Frisian                  case "gl": // Galician                  case "gsw": // Swiss German                  case "gu": // Gujarati                  case "ha": // Hausa                  case "haw": // Hawaiian                  case "he": // Hebrew                  case "is": // Icelandic                  case "it": // Italian                  case "kk": // Kazakh                  case "kl": // Kalaallisut                  case "ku": // Kurdish                  case "lb": // Luxembourgish                  case "lg": // Ganda                  case "lo": // Lao                  case "mas": // Masai                  case "ml": // Malayalam                  case "mn": // Mongolian                  case "mr": // Marathi                  case "nah": // Nahuatl                  case "nb": // Norwegian Bokmål                  case "ne": // Nepali                  case "nl": // Dutch                  case "nn": // Norwegian Nynorsk                  case "no": // Norwegian                  case "nyn": // Nyankole                  case "om": // Oromo                  case "or": // Oriya                  case "pa": // Punjabi                  case "pap": // Papiamento                  case "ps": // Pashto                  case "pt": // Portuguese                  case "rm": // Romansh                  case "saq": // Samburu                  case "so": // Somali                  case "sq": // Albanian                  case "ssy": // Saho                  case "sw": // Swahili                  case "sv": // Swedish                  case "syr": // Syriac                  case "ta": // Tamil                  case "te": // Telugu                  case "tk": // Turkmen                  case "tr": // Turkish                  case "ur": // Urdu                  case "wae": // Walser                  case "xog": // Soga                  case "zu": // Zulu                      return (n' c) =>                      {                          if (c == 2) return (n == 1) ? 0 : 1;                          if (c == 3) return (n == 0) ? 0 : (n == 1) ? 1 : 2;                          if (c == 4) return (n < 0) ? 0 : (n == 0) ? 1 : (n == 1) ? 2 : 3;                          return -1;                      };                    // DualWithZero: one (n == 0..1)' other                  case "ak": // Akan                  case "am": // Amharic                  case "bh": // Bihari                  case "fil": // Filipino                  case "guw": // Gun                  case "hi": // Hindi                  case "ln": // Lingala                  case "mg": // Malagasy                  case "nso": // Northern Sotho                  case "ti": // Tigrinya                  case "tl": // Tagalog                  case "wa": // Walloon                      return (n' c) => (n == 0 || n == 1) ? 0 : 1;                    // DualFromZeroToTwo: one (n == 0..2 fractionate and n != 2)' other                  case "ff": // Fulah                  case "fr": // French                  case "kab": // Kabyle                      return (n' c) => (n >= 0 && n < 2) ? 0 : 1;                    // Triple: one (n == 1)' two (n == 2)' other                  case "ga": // Irish                  case "iu": // Inuktitut                  case "ksh": // Colognian                  case "kw": // Cornish                  case "se": // Northern Sami                  case "sma": // Southern Sami                  case "smi": // Sami language                  case "smj": // Lule Sami                  case "smn": // Inari Sami                  case "sms": // Skolt Sami                      return (n' c) => (n == 1) ? 0 : (n == 2) ? 1 : 2;                    // Russian & Serbo-Croatian                  case "be": // Belarusian                  case "bs": // Bosnian                  case "hr": // Croatian                  case "ru": // Russian                  case "sh": // Serbo-Croatian                  case "sr": // Serbian                  case "uk": // Ukrainian                      return (n' c) =>                          (n % 10 == 1) && !(n % 100 == 11) ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          2;                    // Unique:                    // Arabic                  case "ar":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          (n % 100).Between(3' 10) ? 3 : // few                          (n % 100).Between(11' 99) ? 4 : // many                          5; // other                    // Breton                  case "br":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5; // other                    // Czech                  case "cs":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Welsh                  case "cy":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5;                    // Manx                  case "gv":                      return (n' c) =>                          (n % 10).Between(1' 2) || (n % 20) == 0 ? 0 :  // one                          1;                    // Langi                  case "lag":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n > 0) && (n < 2) ? 1 : // one                          2;                    // Lithuanian                  case "lt":                      return (n' c) =>                          (n % 10) == 1 && !(n % 100).Between(11' 19) ? 0 : // one                          (n % 10).Between(2' 9) && !(n % 100).Between(11' 19) ? 1 : // few                          2;                    // Latvian                  case "lv":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n % 10) == 1 && (n % 100) != 11 ? 1 :                          2;                    // Macedonian                  case "mb":                      return (n' c) =>                          (n % 10) == 1 && n != 11 ? 0 : // one                          1;                    // Moldavian                  case "mo":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n != 1 && (n % 100).Between(1' 19)) ? 1 : // few                          2;                    // Maltese                  case "mt":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(2' 10) ? 1 : // few                          (n % 100).Between(11' 19) ? 2 : // many                          3;                    // Polish                  case "pl":                      return (n' c) =>                          n == 1 ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          (n % 10).Between(0' 1) || (n % 10).Between(5' 9) || (n % 100).Between(12' 14) ? 2 : // many                          3;                    // Romanian                  case "ro":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(1' 19) ? 1 : // few                          2;                    // Tachelhit                  case "shi":                      return (n' c) =>                          (n >= 0 && n <= 1) ? 0 : // one                          n.Between(2' 10) ? 1 : // few                          2;                    // Slovak                  case "sk":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Slovenian                  case "sl":                      return (n' c) =>                          (n % 100) == 1 ? 0 : // one                          (n % 100) == 2 ? 1 : // two                          (n % 100).Between(3' 4) ? 2 : // few                          3;                    // Central Morocco Tamazight                  case "tzm":                      return (n' c) =>                          n.Between(0' 1) || n.Between(11' 99) ? 0 : // one                          1;                      // Unknown language                  default:                      return null;              }
Magic Number,SmartFormat.Extensions,CommonLanguageRules,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\PluralLocalizationFormatter.cs,GetPluralRule,The following statement contains a magic number: switch (twoLetterISOLanguageName)              {                  // Singular                  case "az": // Azerbaijani                  case "bm": // Bambara                  case "bo": // Tibetan                  case "dz": // Dzongkha                  case "fa": // Persian                  case "hu": // Hungarian                  case "id": // Indonesian                  case "ig": // Igbo                  case "ii": // Sichuan Yi                  case "ja": // Japanese                  case "jv": // Javanese                  case "ka": // Georgian                  case "kde": // Makonde                  case "kea": // Kabuverdianu                  case "km": // Khmer                  case "kn": // Kannada                  case "ko": // Korean                  case "ms": // Malay                  case "my": // Burmese                  case "root": // Root (?)                  case "sah": // Sakha                  case "ses": // Koyraboro Senni                  case "sg": // Sango                  case "th": // Thai                  case "to": // Tonga                  case "vi": // Vietnamese                  case "wo": // Wolof                  case "yo": // Yoruba                  case "zh": // Chinese                      return (n' c) => 0;                    // Dual: one (n == 1)' other                  case "af": // Afrikaans                  case "bem": // Bembda                  case "bg": // Bulgarian                  case "bn": // Bengali                  case "brx": // Bodo                  case "ca": // Catalan                  case "cgg": // Chiga                  case "chr": // Cherokee                  case "da": // Danish                  case "de": // German                  case "dv": // Divehi                  case "ee": // Ewe                  case "el": // Greek                  case "en": // English                  case "eo": // Esperanto                  case "es": // Spanish                  case "et": // Estonian                  case "eu": // Basque                  case "fi": // Finnish                  case "fo": // Faroese                  case "fur": // Friulian                  case "fy": // Western Frisian                  case "gl": // Galician                  case "gsw": // Swiss German                  case "gu": // Gujarati                  case "ha": // Hausa                  case "haw": // Hawaiian                  case "he": // Hebrew                  case "is": // Icelandic                  case "it": // Italian                  case "kk": // Kazakh                  case "kl": // Kalaallisut                  case "ku": // Kurdish                  case "lb": // Luxembourgish                  case "lg": // Ganda                  case "lo": // Lao                  case "mas": // Masai                  case "ml": // Malayalam                  case "mn": // Mongolian                  case "mr": // Marathi                  case "nah": // Nahuatl                  case "nb": // Norwegian Bokmål                  case "ne": // Nepali                  case "nl": // Dutch                  case "nn": // Norwegian Nynorsk                  case "no": // Norwegian                  case "nyn": // Nyankole                  case "om": // Oromo                  case "or": // Oriya                  case "pa": // Punjabi                  case "pap": // Papiamento                  case "ps": // Pashto                  case "pt": // Portuguese                  case "rm": // Romansh                  case "saq": // Samburu                  case "so": // Somali                  case "sq": // Albanian                  case "ssy": // Saho                  case "sw": // Swahili                  case "sv": // Swedish                  case "syr": // Syriac                  case "ta": // Tamil                  case "te": // Telugu                  case "tk": // Turkmen                  case "tr": // Turkish                  case "ur": // Urdu                  case "wae": // Walser                  case "xog": // Soga                  case "zu": // Zulu                      return (n' c) =>                      {                          if (c == 2) return (n == 1) ? 0 : 1;                          if (c == 3) return (n == 0) ? 0 : (n == 1) ? 1 : 2;                          if (c == 4) return (n < 0) ? 0 : (n == 0) ? 1 : (n == 1) ? 2 : 3;                          return -1;                      };                    // DualWithZero: one (n == 0..1)' other                  case "ak": // Akan                  case "am": // Amharic                  case "bh": // Bihari                  case "fil": // Filipino                  case "guw": // Gun                  case "hi": // Hindi                  case "ln": // Lingala                  case "mg": // Malagasy                  case "nso": // Northern Sotho                  case "ti": // Tigrinya                  case "tl": // Tagalog                  case "wa": // Walloon                      return (n' c) => (n == 0 || n == 1) ? 0 : 1;                    // DualFromZeroToTwo: one (n == 0..2 fractionate and n != 2)' other                  case "ff": // Fulah                  case "fr": // French                  case "kab": // Kabyle                      return (n' c) => (n >= 0 && n < 2) ? 0 : 1;                    // Triple: one (n == 1)' two (n == 2)' other                  case "ga": // Irish                  case "iu": // Inuktitut                  case "ksh": // Colognian                  case "kw": // Cornish                  case "se": // Northern Sami                  case "sma": // Southern Sami                  case "smi": // Sami language                  case "smj": // Lule Sami                  case "smn": // Inari Sami                  case "sms": // Skolt Sami                      return (n' c) => (n == 1) ? 0 : (n == 2) ? 1 : 2;                    // Russian & Serbo-Croatian                  case "be": // Belarusian                  case "bs": // Bosnian                  case "hr": // Croatian                  case "ru": // Russian                  case "sh": // Serbo-Croatian                  case "sr": // Serbian                  case "uk": // Ukrainian                      return (n' c) =>                          (n % 10 == 1) && !(n % 100 == 11) ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          2;                    // Unique:                    // Arabic                  case "ar":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          (n % 100).Between(3' 10) ? 3 : // few                          (n % 100).Between(11' 99) ? 4 : // many                          5; // other                    // Breton                  case "br":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5; // other                    // Czech                  case "cs":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Welsh                  case "cy":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5;                    // Manx                  case "gv":                      return (n' c) =>                          (n % 10).Between(1' 2) || (n % 20) == 0 ? 0 :  // one                          1;                    // Langi                  case "lag":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n > 0) && (n < 2) ? 1 : // one                          2;                    // Lithuanian                  case "lt":                      return (n' c) =>                          (n % 10) == 1 && !(n % 100).Between(11' 19) ? 0 : // one                          (n % 10).Between(2' 9) && !(n % 100).Between(11' 19) ? 1 : // few                          2;                    // Latvian                  case "lv":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n % 10) == 1 && (n % 100) != 11 ? 1 :                          2;                    // Macedonian                  case "mb":                      return (n' c) =>                          (n % 10) == 1 && n != 11 ? 0 : // one                          1;                    // Moldavian                  case "mo":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n != 1 && (n % 100).Between(1' 19)) ? 1 : // few                          2;                    // Maltese                  case "mt":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(2' 10) ? 1 : // few                          (n % 100).Between(11' 19) ? 2 : // many                          3;                    // Polish                  case "pl":                      return (n' c) =>                          n == 1 ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          (n % 10).Between(0' 1) || (n % 10).Between(5' 9) || (n % 100).Between(12' 14) ? 2 : // many                          3;                    // Romanian                  case "ro":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(1' 19) ? 1 : // few                          2;                    // Tachelhit                  case "shi":                      return (n' c) =>                          (n >= 0 && n <= 1) ? 0 : // one                          n.Between(2' 10) ? 1 : // few                          2;                    // Slovak                  case "sk":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Slovenian                  case "sl":                      return (n' c) =>                          (n % 100) == 1 ? 0 : // one                          (n % 100) == 2 ? 1 : // two                          (n % 100).Between(3' 4) ? 2 : // few                          3;                    // Central Morocco Tamazight                  case "tzm":                      return (n' c) =>                          n.Between(0' 1) || n.Between(11' 99) ? 0 : // one                          1;                      // Unknown language                  default:                      return null;              }
Magic Number,SmartFormat.Extensions,CommonLanguageRules,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\PluralLocalizationFormatter.cs,GetPluralRule,The following statement contains a magic number: switch (twoLetterISOLanguageName)              {                  // Singular                  case "az": // Azerbaijani                  case "bm": // Bambara                  case "bo": // Tibetan                  case "dz": // Dzongkha                  case "fa": // Persian                  case "hu": // Hungarian                  case "id": // Indonesian                  case "ig": // Igbo                  case "ii": // Sichuan Yi                  case "ja": // Japanese                  case "jv": // Javanese                  case "ka": // Georgian                  case "kde": // Makonde                  case "kea": // Kabuverdianu                  case "km": // Khmer                  case "kn": // Kannada                  case "ko": // Korean                  case "ms": // Malay                  case "my": // Burmese                  case "root": // Root (?)                  case "sah": // Sakha                  case "ses": // Koyraboro Senni                  case "sg": // Sango                  case "th": // Thai                  case "to": // Tonga                  case "vi": // Vietnamese                  case "wo": // Wolof                  case "yo": // Yoruba                  case "zh": // Chinese                      return (n' c) => 0;                    // Dual: one (n == 1)' other                  case "af": // Afrikaans                  case "bem": // Bembda                  case "bg": // Bulgarian                  case "bn": // Bengali                  case "brx": // Bodo                  case "ca": // Catalan                  case "cgg": // Chiga                  case "chr": // Cherokee                  case "da": // Danish                  case "de": // German                  case "dv": // Divehi                  case "ee": // Ewe                  case "el": // Greek                  case "en": // English                  case "eo": // Esperanto                  case "es": // Spanish                  case "et": // Estonian                  case "eu": // Basque                  case "fi": // Finnish                  case "fo": // Faroese                  case "fur": // Friulian                  case "fy": // Western Frisian                  case "gl": // Galician                  case "gsw": // Swiss German                  case "gu": // Gujarati                  case "ha": // Hausa                  case "haw": // Hawaiian                  case "he": // Hebrew                  case "is": // Icelandic                  case "it": // Italian                  case "kk": // Kazakh                  case "kl": // Kalaallisut                  case "ku": // Kurdish                  case "lb": // Luxembourgish                  case "lg": // Ganda                  case "lo": // Lao                  case "mas": // Masai                  case "ml": // Malayalam                  case "mn": // Mongolian                  case "mr": // Marathi                  case "nah": // Nahuatl                  case "nb": // Norwegian Bokmål                  case "ne": // Nepali                  case "nl": // Dutch                  case "nn": // Norwegian Nynorsk                  case "no": // Norwegian                  case "nyn": // Nyankole                  case "om": // Oromo                  case "or": // Oriya                  case "pa": // Punjabi                  case "pap": // Papiamento                  case "ps": // Pashto                  case "pt": // Portuguese                  case "rm": // Romansh                  case "saq": // Samburu                  case "so": // Somali                  case "sq": // Albanian                  case "ssy": // Saho                  case "sw": // Swahili                  case "sv": // Swedish                  case "syr": // Syriac                  case "ta": // Tamil                  case "te": // Telugu                  case "tk": // Turkmen                  case "tr": // Turkish                  case "ur": // Urdu                  case "wae": // Walser                  case "xog": // Soga                  case "zu": // Zulu                      return (n' c) =>                      {                          if (c == 2) return (n == 1) ? 0 : 1;                          if (c == 3) return (n == 0) ? 0 : (n == 1) ? 1 : 2;                          if (c == 4) return (n < 0) ? 0 : (n == 0) ? 1 : (n == 1) ? 2 : 3;                          return -1;                      };                    // DualWithZero: one (n == 0..1)' other                  case "ak": // Akan                  case "am": // Amharic                  case "bh": // Bihari                  case "fil": // Filipino                  case "guw": // Gun                  case "hi": // Hindi                  case "ln": // Lingala                  case "mg": // Malagasy                  case "nso": // Northern Sotho                  case "ti": // Tigrinya                  case "tl": // Tagalog                  case "wa": // Walloon                      return (n' c) => (n == 0 || n == 1) ? 0 : 1;                    // DualFromZeroToTwo: one (n == 0..2 fractionate and n != 2)' other                  case "ff": // Fulah                  case "fr": // French                  case "kab": // Kabyle                      return (n' c) => (n >= 0 && n < 2) ? 0 : 1;                    // Triple: one (n == 1)' two (n == 2)' other                  case "ga": // Irish                  case "iu": // Inuktitut                  case "ksh": // Colognian                  case "kw": // Cornish                  case "se": // Northern Sami                  case "sma": // Southern Sami                  case "smi": // Sami language                  case "smj": // Lule Sami                  case "smn": // Inari Sami                  case "sms": // Skolt Sami                      return (n' c) => (n == 1) ? 0 : (n == 2) ? 1 : 2;                    // Russian & Serbo-Croatian                  case "be": // Belarusian                  case "bs": // Bosnian                  case "hr": // Croatian                  case "ru": // Russian                  case "sh": // Serbo-Croatian                  case "sr": // Serbian                  case "uk": // Ukrainian                      return (n' c) =>                          (n % 10 == 1) && !(n % 100 == 11) ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          2;                    // Unique:                    // Arabic                  case "ar":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          (n % 100).Between(3' 10) ? 3 : // few                          (n % 100).Between(11' 99) ? 4 : // many                          5; // other                    // Breton                  case "br":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5; // other                    // Czech                  case "cs":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Welsh                  case "cy":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5;                    // Manx                  case "gv":                      return (n' c) =>                          (n % 10).Between(1' 2) || (n % 20) == 0 ? 0 :  // one                          1;                    // Langi                  case "lag":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n > 0) && (n < 2) ? 1 : // one                          2;                    // Lithuanian                  case "lt":                      return (n' c) =>                          (n % 10) == 1 && !(n % 100).Between(11' 19) ? 0 : // one                          (n % 10).Between(2' 9) && !(n % 100).Between(11' 19) ? 1 : // few                          2;                    // Latvian                  case "lv":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n % 10) == 1 && (n % 100) != 11 ? 1 :                          2;                    // Macedonian                  case "mb":                      return (n' c) =>                          (n % 10) == 1 && n != 11 ? 0 : // one                          1;                    // Moldavian                  case "mo":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n != 1 && (n % 100).Between(1' 19)) ? 1 : // few                          2;                    // Maltese                  case "mt":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(2' 10) ? 1 : // few                          (n % 100).Between(11' 19) ? 2 : // many                          3;                    // Polish                  case "pl":                      return (n' c) =>                          n == 1 ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          (n % 10).Between(0' 1) || (n % 10).Between(5' 9) || (n % 100).Between(12' 14) ? 2 : // many                          3;                    // Romanian                  case "ro":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(1' 19) ? 1 : // few                          2;                    // Tachelhit                  case "shi":                      return (n' c) =>                          (n >= 0 && n <= 1) ? 0 : // one                          n.Between(2' 10) ? 1 : // few                          2;                    // Slovak                  case "sk":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Slovenian                  case "sl":                      return (n' c) =>                          (n % 100) == 1 ? 0 : // one                          (n % 100) == 2 ? 1 : // two                          (n % 100).Between(3' 4) ? 2 : // few                          3;                    // Central Morocco Tamazight                  case "tzm":                      return (n' c) =>                          n.Between(0' 1) || n.Between(11' 99) ? 0 : // one                          1;                      // Unknown language                  default:                      return null;              }
Magic Number,SmartFormat.Extensions,CommonLanguageRules,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\PluralLocalizationFormatter.cs,GetPluralRule,The following statement contains a magic number: switch (twoLetterISOLanguageName)              {                  // Singular                  case "az": // Azerbaijani                  case "bm": // Bambara                  case "bo": // Tibetan                  case "dz": // Dzongkha                  case "fa": // Persian                  case "hu": // Hungarian                  case "id": // Indonesian                  case "ig": // Igbo                  case "ii": // Sichuan Yi                  case "ja": // Japanese                  case "jv": // Javanese                  case "ka": // Georgian                  case "kde": // Makonde                  case "kea": // Kabuverdianu                  case "km": // Khmer                  case "kn": // Kannada                  case "ko": // Korean                  case "ms": // Malay                  case "my": // Burmese                  case "root": // Root (?)                  case "sah": // Sakha                  case "ses": // Koyraboro Senni                  case "sg": // Sango                  case "th": // Thai                  case "to": // Tonga                  case "vi": // Vietnamese                  case "wo": // Wolof                  case "yo": // Yoruba                  case "zh": // Chinese                      return (n' c) => 0;                    // Dual: one (n == 1)' other                  case "af": // Afrikaans                  case "bem": // Bembda                  case "bg": // Bulgarian                  case "bn": // Bengali                  case "brx": // Bodo                  case "ca": // Catalan                  case "cgg": // Chiga                  case "chr": // Cherokee                  case "da": // Danish                  case "de": // German                  case "dv": // Divehi                  case "ee": // Ewe                  case "el": // Greek                  case "en": // English                  case "eo": // Esperanto                  case "es": // Spanish                  case "et": // Estonian                  case "eu": // Basque                  case "fi": // Finnish                  case "fo": // Faroese                  case "fur": // Friulian                  case "fy": // Western Frisian                  case "gl": // Galician                  case "gsw": // Swiss German                  case "gu": // Gujarati                  case "ha": // Hausa                  case "haw": // Hawaiian                  case "he": // Hebrew                  case "is": // Icelandic                  case "it": // Italian                  case "kk": // Kazakh                  case "kl": // Kalaallisut                  case "ku": // Kurdish                  case "lb": // Luxembourgish                  case "lg": // Ganda                  case "lo": // Lao                  case "mas": // Masai                  case "ml": // Malayalam                  case "mn": // Mongolian                  case "mr": // Marathi                  case "nah": // Nahuatl                  case "nb": // Norwegian Bokmål                  case "ne": // Nepali                  case "nl": // Dutch                  case "nn": // Norwegian Nynorsk                  case "no": // Norwegian                  case "nyn": // Nyankole                  case "om": // Oromo                  case "or": // Oriya                  case "pa": // Punjabi                  case "pap": // Papiamento                  case "ps": // Pashto                  case "pt": // Portuguese                  case "rm": // Romansh                  case "saq": // Samburu                  case "so": // Somali                  case "sq": // Albanian                  case "ssy": // Saho                  case "sw": // Swahili                  case "sv": // Swedish                  case "syr": // Syriac                  case "ta": // Tamil                  case "te": // Telugu                  case "tk": // Turkmen                  case "tr": // Turkish                  case "ur": // Urdu                  case "wae": // Walser                  case "xog": // Soga                  case "zu": // Zulu                      return (n' c) =>                      {                          if (c == 2) return (n == 1) ? 0 : 1;                          if (c == 3) return (n == 0) ? 0 : (n == 1) ? 1 : 2;                          if (c == 4) return (n < 0) ? 0 : (n == 0) ? 1 : (n == 1) ? 2 : 3;                          return -1;                      };                    // DualWithZero: one (n == 0..1)' other                  case "ak": // Akan                  case "am": // Amharic                  case "bh": // Bihari                  case "fil": // Filipino                  case "guw": // Gun                  case "hi": // Hindi                  case "ln": // Lingala                  case "mg": // Malagasy                  case "nso": // Northern Sotho                  case "ti": // Tigrinya                  case "tl": // Tagalog                  case "wa": // Walloon                      return (n' c) => (n == 0 || n == 1) ? 0 : 1;                    // DualFromZeroToTwo: one (n == 0..2 fractionate and n != 2)' other                  case "ff": // Fulah                  case "fr": // French                  case "kab": // Kabyle                      return (n' c) => (n >= 0 && n < 2) ? 0 : 1;                    // Triple: one (n == 1)' two (n == 2)' other                  case "ga": // Irish                  case "iu": // Inuktitut                  case "ksh": // Colognian                  case "kw": // Cornish                  case "se": // Northern Sami                  case "sma": // Southern Sami                  case "smi": // Sami language                  case "smj": // Lule Sami                  case "smn": // Inari Sami                  case "sms": // Skolt Sami                      return (n' c) => (n == 1) ? 0 : (n == 2) ? 1 : 2;                    // Russian & Serbo-Croatian                  case "be": // Belarusian                  case "bs": // Bosnian                  case "hr": // Croatian                  case "ru": // Russian                  case "sh": // Serbo-Croatian                  case "sr": // Serbian                  case "uk": // Ukrainian                      return (n' c) =>                          (n % 10 == 1) && !(n % 100 == 11) ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          2;                    // Unique:                    // Arabic                  case "ar":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          (n % 100).Between(3' 10) ? 3 : // few                          (n % 100).Between(11' 99) ? 4 : // many                          5; // other                    // Breton                  case "br":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5; // other                    // Czech                  case "cs":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Welsh                  case "cy":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5;                    // Manx                  case "gv":                      return (n' c) =>                          (n % 10).Between(1' 2) || (n % 20) == 0 ? 0 :  // one                          1;                    // Langi                  case "lag":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n > 0) && (n < 2) ? 1 : // one                          2;                    // Lithuanian                  case "lt":                      return (n' c) =>                          (n % 10) == 1 && !(n % 100).Between(11' 19) ? 0 : // one                          (n % 10).Between(2' 9) && !(n % 100).Between(11' 19) ? 1 : // few                          2;                    // Latvian                  case "lv":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n % 10) == 1 && (n % 100) != 11 ? 1 :                          2;                    // Macedonian                  case "mb":                      return (n' c) =>                          (n % 10) == 1 && n != 11 ? 0 : // one                          1;                    // Moldavian                  case "mo":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n != 1 && (n % 100).Between(1' 19)) ? 1 : // few                          2;                    // Maltese                  case "mt":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(2' 10) ? 1 : // few                          (n % 100).Between(11' 19) ? 2 : // many                          3;                    // Polish                  case "pl":                      return (n' c) =>                          n == 1 ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          (n % 10).Between(0' 1) || (n % 10).Between(5' 9) || (n % 100).Between(12' 14) ? 2 : // many                          3;                    // Romanian                  case "ro":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(1' 19) ? 1 : // few                          2;                    // Tachelhit                  case "shi":                      return (n' c) =>                          (n >= 0 && n <= 1) ? 0 : // one                          n.Between(2' 10) ? 1 : // few                          2;                    // Slovak                  case "sk":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Slovenian                  case "sl":                      return (n' c) =>                          (n % 100) == 1 ? 0 : // one                          (n % 100) == 2 ? 1 : // two                          (n % 100).Between(3' 4) ? 2 : // few                          3;                    // Central Morocco Tamazight                  case "tzm":                      return (n' c) =>                          n.Between(0' 1) || n.Between(11' 99) ? 0 : // one                          1;                      // Unknown language                  default:                      return null;              }
Magic Number,SmartFormat.Extensions,CommonLanguageRules,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\PluralLocalizationFormatter.cs,GetPluralRule,The following statement contains a magic number: switch (twoLetterISOLanguageName)              {                  // Singular                  case "az": // Azerbaijani                  case "bm": // Bambara                  case "bo": // Tibetan                  case "dz": // Dzongkha                  case "fa": // Persian                  case "hu": // Hungarian                  case "id": // Indonesian                  case "ig": // Igbo                  case "ii": // Sichuan Yi                  case "ja": // Japanese                  case "jv": // Javanese                  case "ka": // Georgian                  case "kde": // Makonde                  case "kea": // Kabuverdianu                  case "km": // Khmer                  case "kn": // Kannada                  case "ko": // Korean                  case "ms": // Malay                  case "my": // Burmese                  case "root": // Root (?)                  case "sah": // Sakha                  case "ses": // Koyraboro Senni                  case "sg": // Sango                  case "th": // Thai                  case "to": // Tonga                  case "vi": // Vietnamese                  case "wo": // Wolof                  case "yo": // Yoruba                  case "zh": // Chinese                      return (n' c) => 0;                    // Dual: one (n == 1)' other                  case "af": // Afrikaans                  case "bem": // Bembda                  case "bg": // Bulgarian                  case "bn": // Bengali                  case "brx": // Bodo                  case "ca": // Catalan                  case "cgg": // Chiga                  case "chr": // Cherokee                  case "da": // Danish                  case "de": // German                  case "dv": // Divehi                  case "ee": // Ewe                  case "el": // Greek                  case "en": // English                  case "eo": // Esperanto                  case "es": // Spanish                  case "et": // Estonian                  case "eu": // Basque                  case "fi": // Finnish                  case "fo": // Faroese                  case "fur": // Friulian                  case "fy": // Western Frisian                  case "gl": // Galician                  case "gsw": // Swiss German                  case "gu": // Gujarati                  case "ha": // Hausa                  case "haw": // Hawaiian                  case "he": // Hebrew                  case "is": // Icelandic                  case "it": // Italian                  case "kk": // Kazakh                  case "kl": // Kalaallisut                  case "ku": // Kurdish                  case "lb": // Luxembourgish                  case "lg": // Ganda                  case "lo": // Lao                  case "mas": // Masai                  case "ml": // Malayalam                  case "mn": // Mongolian                  case "mr": // Marathi                  case "nah": // Nahuatl                  case "nb": // Norwegian Bokmål                  case "ne": // Nepali                  case "nl": // Dutch                  case "nn": // Norwegian Nynorsk                  case "no": // Norwegian                  case "nyn": // Nyankole                  case "om": // Oromo                  case "or": // Oriya                  case "pa": // Punjabi                  case "pap": // Papiamento                  case "ps": // Pashto                  case "pt": // Portuguese                  case "rm": // Romansh                  case "saq": // Samburu                  case "so": // Somali                  case "sq": // Albanian                  case "ssy": // Saho                  case "sw": // Swahili                  case "sv": // Swedish                  case "syr": // Syriac                  case "ta": // Tamil                  case "te": // Telugu                  case "tk": // Turkmen                  case "tr": // Turkish                  case "ur": // Urdu                  case "wae": // Walser                  case "xog": // Soga                  case "zu": // Zulu                      return (n' c) =>                      {                          if (c == 2) return (n == 1) ? 0 : 1;                          if (c == 3) return (n == 0) ? 0 : (n == 1) ? 1 : 2;                          if (c == 4) return (n < 0) ? 0 : (n == 0) ? 1 : (n == 1) ? 2 : 3;                          return -1;                      };                    // DualWithZero: one (n == 0..1)' other                  case "ak": // Akan                  case "am": // Amharic                  case "bh": // Bihari                  case "fil": // Filipino                  case "guw": // Gun                  case "hi": // Hindi                  case "ln": // Lingala                  case "mg": // Malagasy                  case "nso": // Northern Sotho                  case "ti": // Tigrinya                  case "tl": // Tagalog                  case "wa": // Walloon                      return (n' c) => (n == 0 || n == 1) ? 0 : 1;                    // DualFromZeroToTwo: one (n == 0..2 fractionate and n != 2)' other                  case "ff": // Fulah                  case "fr": // French                  case "kab": // Kabyle                      return (n' c) => (n >= 0 && n < 2) ? 0 : 1;                    // Triple: one (n == 1)' two (n == 2)' other                  case "ga": // Irish                  case "iu": // Inuktitut                  case "ksh": // Colognian                  case "kw": // Cornish                  case "se": // Northern Sami                  case "sma": // Southern Sami                  case "smi": // Sami language                  case "smj": // Lule Sami                  case "smn": // Inari Sami                  case "sms": // Skolt Sami                      return (n' c) => (n == 1) ? 0 : (n == 2) ? 1 : 2;                    // Russian & Serbo-Croatian                  case "be": // Belarusian                  case "bs": // Bosnian                  case "hr": // Croatian                  case "ru": // Russian                  case "sh": // Serbo-Croatian                  case "sr": // Serbian                  case "uk": // Ukrainian                      return (n' c) =>                          (n % 10 == 1) && !(n % 100 == 11) ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          2;                    // Unique:                    // Arabic                  case "ar":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          (n % 100).Between(3' 10) ? 3 : // few                          (n % 100).Between(11' 99) ? 4 : // many                          5; // other                    // Breton                  case "br":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5; // other                    // Czech                  case "cs":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Welsh                  case "cy":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5;                    // Manx                  case "gv":                      return (n' c) =>                          (n % 10).Between(1' 2) || (n % 20) == 0 ? 0 :  // one                          1;                    // Langi                  case "lag":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n > 0) && (n < 2) ? 1 : // one                          2;                    // Lithuanian                  case "lt":                      return (n' c) =>                          (n % 10) == 1 && !(n % 100).Between(11' 19) ? 0 : // one                          (n % 10).Between(2' 9) && !(n % 100).Between(11' 19) ? 1 : // few                          2;                    // Latvian                  case "lv":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n % 10) == 1 && (n % 100) != 11 ? 1 :                          2;                    // Macedonian                  case "mb":                      return (n' c) =>                          (n % 10) == 1 && n != 11 ? 0 : // one                          1;                    // Moldavian                  case "mo":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n != 1 && (n % 100).Between(1' 19)) ? 1 : // few                          2;                    // Maltese                  case "mt":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(2' 10) ? 1 : // few                          (n % 100).Between(11' 19) ? 2 : // many                          3;                    // Polish                  case "pl":                      return (n' c) =>                          n == 1 ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          (n % 10).Between(0' 1) || (n % 10).Between(5' 9) || (n % 100).Between(12' 14) ? 2 : // many                          3;                    // Romanian                  case "ro":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(1' 19) ? 1 : // few                          2;                    // Tachelhit                  case "shi":                      return (n' c) =>                          (n >= 0 && n <= 1) ? 0 : // one                          n.Between(2' 10) ? 1 : // few                          2;                    // Slovak                  case "sk":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Slovenian                  case "sl":                      return (n' c) =>                          (n % 100) == 1 ? 0 : // one                          (n % 100) == 2 ? 1 : // two                          (n % 100).Between(3' 4) ? 2 : // few                          3;                    // Central Morocco Tamazight                  case "tzm":                      return (n' c) =>                          n.Between(0' 1) || n.Between(11' 99) ? 0 : // one                          1;                      // Unknown language                  default:                      return null;              }
Magic Number,SmartFormat.Extensions,CommonLanguageRules,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\PluralLocalizationFormatter.cs,GetPluralRule,The following statement contains a magic number: switch (twoLetterISOLanguageName)              {                  // Singular                  case "az": // Azerbaijani                  case "bm": // Bambara                  case "bo": // Tibetan                  case "dz": // Dzongkha                  case "fa": // Persian                  case "hu": // Hungarian                  case "id": // Indonesian                  case "ig": // Igbo                  case "ii": // Sichuan Yi                  case "ja": // Japanese                  case "jv": // Javanese                  case "ka": // Georgian                  case "kde": // Makonde                  case "kea": // Kabuverdianu                  case "km": // Khmer                  case "kn": // Kannada                  case "ko": // Korean                  case "ms": // Malay                  case "my": // Burmese                  case "root": // Root (?)                  case "sah": // Sakha                  case "ses": // Koyraboro Senni                  case "sg": // Sango                  case "th": // Thai                  case "to": // Tonga                  case "vi": // Vietnamese                  case "wo": // Wolof                  case "yo": // Yoruba                  case "zh": // Chinese                      return (n' c) => 0;                    // Dual: one (n == 1)' other                  case "af": // Afrikaans                  case "bem": // Bembda                  case "bg": // Bulgarian                  case "bn": // Bengali                  case "brx": // Bodo                  case "ca": // Catalan                  case "cgg": // Chiga                  case "chr": // Cherokee                  case "da": // Danish                  case "de": // German                  case "dv": // Divehi                  case "ee": // Ewe                  case "el": // Greek                  case "en": // English                  case "eo": // Esperanto                  case "es": // Spanish                  case "et": // Estonian                  case "eu": // Basque                  case "fi": // Finnish                  case "fo": // Faroese                  case "fur": // Friulian                  case "fy": // Western Frisian                  case "gl": // Galician                  case "gsw": // Swiss German                  case "gu": // Gujarati                  case "ha": // Hausa                  case "haw": // Hawaiian                  case "he": // Hebrew                  case "is": // Icelandic                  case "it": // Italian                  case "kk": // Kazakh                  case "kl": // Kalaallisut                  case "ku": // Kurdish                  case "lb": // Luxembourgish                  case "lg": // Ganda                  case "lo": // Lao                  case "mas": // Masai                  case "ml": // Malayalam                  case "mn": // Mongolian                  case "mr": // Marathi                  case "nah": // Nahuatl                  case "nb": // Norwegian Bokmål                  case "ne": // Nepali                  case "nl": // Dutch                  case "nn": // Norwegian Nynorsk                  case "no": // Norwegian                  case "nyn": // Nyankole                  case "om": // Oromo                  case "or": // Oriya                  case "pa": // Punjabi                  case "pap": // Papiamento                  case "ps": // Pashto                  case "pt": // Portuguese                  case "rm": // Romansh                  case "saq": // Samburu                  case "so": // Somali                  case "sq": // Albanian                  case "ssy": // Saho                  case "sw": // Swahili                  case "sv": // Swedish                  case "syr": // Syriac                  case "ta": // Tamil                  case "te": // Telugu                  case "tk": // Turkmen                  case "tr": // Turkish                  case "ur": // Urdu                  case "wae": // Walser                  case "xog": // Soga                  case "zu": // Zulu                      return (n' c) =>                      {                          if (c == 2) return (n == 1) ? 0 : 1;                          if (c == 3) return (n == 0) ? 0 : (n == 1) ? 1 : 2;                          if (c == 4) return (n < 0) ? 0 : (n == 0) ? 1 : (n == 1) ? 2 : 3;                          return -1;                      };                    // DualWithZero: one (n == 0..1)' other                  case "ak": // Akan                  case "am": // Amharic                  case "bh": // Bihari                  case "fil": // Filipino                  case "guw": // Gun                  case "hi": // Hindi                  case "ln": // Lingala                  case "mg": // Malagasy                  case "nso": // Northern Sotho                  case "ti": // Tigrinya                  case "tl": // Tagalog                  case "wa": // Walloon                      return (n' c) => (n == 0 || n == 1) ? 0 : 1;                    // DualFromZeroToTwo: one (n == 0..2 fractionate and n != 2)' other                  case "ff": // Fulah                  case "fr": // French                  case "kab": // Kabyle                      return (n' c) => (n >= 0 && n < 2) ? 0 : 1;                    // Triple: one (n == 1)' two (n == 2)' other                  case "ga": // Irish                  case "iu": // Inuktitut                  case "ksh": // Colognian                  case "kw": // Cornish                  case "se": // Northern Sami                  case "sma": // Southern Sami                  case "smi": // Sami language                  case "smj": // Lule Sami                  case "smn": // Inari Sami                  case "sms": // Skolt Sami                      return (n' c) => (n == 1) ? 0 : (n == 2) ? 1 : 2;                    // Russian & Serbo-Croatian                  case "be": // Belarusian                  case "bs": // Bosnian                  case "hr": // Croatian                  case "ru": // Russian                  case "sh": // Serbo-Croatian                  case "sr": // Serbian                  case "uk": // Ukrainian                      return (n' c) =>                          (n % 10 == 1) && !(n % 100 == 11) ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          2;                    // Unique:                    // Arabic                  case "ar":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          (n % 100).Between(3' 10) ? 3 : // few                          (n % 100).Between(11' 99) ? 4 : // many                          5; // other                    // Breton                  case "br":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5; // other                    // Czech                  case "cs":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Welsh                  case "cy":                      return (n' c) =>                          n == 0 ? 0 : // zero                          n == 1 ? 1 : // one                          n == 2 ? 2 : // two                          n == 3 ? 3 : // few                          n == 6 ? 4 : // many                          5;                    // Manx                  case "gv":                      return (n' c) =>                          (n % 10).Between(1' 2) || (n % 20) == 0 ? 0 :  // one                          1;                    // Langi                  case "lag":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n > 0) && (n < 2) ? 1 : // one                          2;                    // Lithuanian                  case "lt":                      return (n' c) =>                          (n % 10) == 1 && !(n % 100).Between(11' 19) ? 0 : // one                          (n % 10).Between(2' 9) && !(n % 100).Between(11' 19) ? 1 : // few                          2;                    // Latvian                  case "lv":                      return (n' c) =>                          n == 0 ? 0 : // zero                          (n % 10) == 1 && (n % 100) != 11 ? 1 :                          2;                    // Macedonian                  case "mb":                      return (n' c) =>                          (n % 10) == 1 && n != 11 ? 0 : // one                          1;                    // Moldavian                  case "mo":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n != 1 && (n % 100).Between(1' 19)) ? 1 : // few                          2;                    // Maltese                  case "mt":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(2' 10) ? 1 : // few                          (n % 100).Between(11' 19) ? 2 : // many                          3;                    // Polish                  case "pl":                      return (n' c) =>                          n == 1 ? 0 : // one                          (n % 10).Between(2' 4) && !(n % 100).Between(12' 14) ? 1 : // few                          (n % 10).Between(0' 1) || (n % 10).Between(5' 9) || (n % 100).Between(12' 14) ? 2 : // many                          3;                    // Romanian                  case "ro":                      return (n' c) =>                          n == 1 ? 0 : // one                          n == 0 || (n % 100).Between(1' 19) ? 1 : // few                          2;                    // Tachelhit                  case "shi":                      return (n' c) =>                          (n >= 0 && n <= 1) ? 0 : // one                          n.Between(2' 10) ? 1 : // few                          2;                    // Slovak                  case "sk":                      return (n' c) =>                          n == 1 ? 0 : // one                          n.Between(2' 4) ? 1 : // few                          2;                    // Slovenian                  case "sl":                      return (n' c) =>                          (n % 100) == 1 ? 0 : // one                          (n % 100) == 2 ? 1 : // two                          (n % 100).Between(3' 4) ? 2 : // few                          3;                    // Central Morocco Tamazight                  case "tzm":                      return (n' c) =>                          n.Between(0' 1) || n.Between(11' 99) ? 0 : // one                          1;                      // Unknown language                  default:                      return null;              }
Magic Number,SmartFormat.Extensions,ListFormatter,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\ListFormatter.cs,EvaluateFormat,The following statement contains a magic number: var parameters = format.Split("|"' 4);
Magic Number,SmartFormat.Extensions,ListFormatter,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\ListFormatter.cs,EvaluateFormat,The following statement contains a magic number: parameters.Count < 2
Magic Number,SmartFormat.Extensions,ListFormatter,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\ListFormatter.cs,EvaluateFormat,The following statement contains a magic number: var spacer = (parameters.Count >= 2) ? parameters[1].Text : "";
Magic Number,SmartFormat.Extensions,ListFormatter,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\ListFormatter.cs,EvaluateFormat,The following statement contains a magic number: var lastSpacer = (parameters.Count >= 3) ? parameters[2].Text : spacer;
Magic Number,SmartFormat.Extensions,ListFormatter,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\ListFormatter.cs,EvaluateFormat,The following statement contains a magic number: var lastSpacer = (parameters.Count >= 3) ? parameters[2].Text : spacer;
Magic Number,SmartFormat.Extensions,ListFormatter,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\ListFormatter.cs,EvaluateFormat,The following statement contains a magic number: var twoSpacer = (parameters.Count >= 4) ? parameters[3].Text : lastSpacer;
Magic Number,SmartFormat.Extensions,ListFormatter,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\ListFormatter.cs,EvaluateFormat,The following statement contains a magic number: var twoSpacer = (parameters.Count >= 4) ? parameters[3].Text : lastSpacer;
Magic Number,SmartFormat.Extensions,ConditionalFormatter,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\ConditionalFormatter.cs,TryEvaluateCondition,The following statement contains a magic number: CaptureCollection comps = m.Groups[2].Captures;
Magic Number,SmartFormat.Extensions,ConditionalFormatter,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\ConditionalFormatter.cs,TryEvaluateCondition,The following statement contains a magic number: CaptureCollection values = m.Groups[3].Captures;
Magic Number,SmartFormat.Utilities,TimeSpanUtility,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Utilities\TimeSpanUtility.cs,ToTimeString,The following statement contains a magic number: switch (rangeMin) {                  case TimeSpanFormatOptions.RangeWeeks:                      FromTime = TimeSpan.FromDays(round(FromTime.TotalDays / 7) * 7);                      break;                  case TimeSpanFormatOptions.RangeDays:                      FromTime = TimeSpan.FromDays(round(FromTime.TotalDays));                      break;                  case TimeSpanFormatOptions.RangeHours:                      FromTime = TimeSpan.FromHours(round(FromTime.TotalHours));                      break;                  case TimeSpanFormatOptions.RangeMinutes:                      FromTime = TimeSpan.FromMinutes(round(FromTime.TotalMinutes));                      break;                  case TimeSpanFormatOptions.RangeSeconds:                      FromTime = TimeSpan.FromSeconds(round(FromTime.TotalSeconds));                      break;                  case TimeSpanFormatOptions.RangeMilliSeconds:                      FromTime = TimeSpan.FromMilliseconds(round(FromTime.TotalMilliseconds));                      break;              }
Magic Number,SmartFormat.Utilities,TimeSpanUtility,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Utilities\TimeSpanUtility.cs,ToTimeString,The following statement contains a magic number: switch (rangeMin) {                  case TimeSpanFormatOptions.RangeWeeks:                      FromTime = TimeSpan.FromDays(round(FromTime.TotalDays / 7) * 7);                      break;                  case TimeSpanFormatOptions.RangeDays:                      FromTime = TimeSpan.FromDays(round(FromTime.TotalDays));                      break;                  case TimeSpanFormatOptions.RangeHours:                      FromTime = TimeSpan.FromHours(round(FromTime.TotalHours));                      break;                  case TimeSpanFormatOptions.RangeMinutes:                      FromTime = TimeSpan.FromMinutes(round(FromTime.TotalMinutes));                      break;                  case TimeSpanFormatOptions.RangeSeconds:                      FromTime = TimeSpan.FromSeconds(round(FromTime.TotalSeconds));                      break;                  case TimeSpanFormatOptions.RangeMilliSeconds:                      FromTime = TimeSpan.FromMilliseconds(round(FromTime.TotalMilliseconds));                      break;              }
Magic Number,SmartFormat.Utilities,TimeSpanUtility,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Utilities\TimeSpanUtility.cs,ToTimeString,The following statement contains a magic number: switch (i) {                      case TimeSpanFormatOptions.RangeWeeks:                          value = (int)Math.Floor(FromTime.TotalDays / 7);                          FromTime -= TimeSpan.FromDays(value * 7);                          break;                      case TimeSpanFormatOptions.RangeDays:                          value = (int)Math.Floor(FromTime.TotalDays);                          FromTime -= TimeSpan.FromDays(value);                          break;                      case TimeSpanFormatOptions.RangeHours:                          value = (int)Math.Floor(FromTime.TotalHours);                          FromTime -= TimeSpan.FromHours(value);                          break;                      case TimeSpanFormatOptions.RangeMinutes:                          value = (int)Math.Floor(FromTime.TotalMinutes);                          FromTime -= TimeSpan.FromMinutes(value);                          break;                      case TimeSpanFormatOptions.RangeSeconds:                          value = (int)Math.Floor(FromTime.TotalSeconds);                          FromTime -= TimeSpan.FromSeconds(value);                          break;                      case TimeSpanFormatOptions.RangeMilliSeconds:                          value = (int)Math.Floor(FromTime.TotalMilliseconds);                          FromTime -= TimeSpan.FromMilliseconds(value);                          break;                      default:                          // This code is unreachable' but it prevents compile-errors.                          throw new InvalidEnumArgumentException();                  }
Magic Number,SmartFormat.Utilities,TimeSpanUtility,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Utilities\TimeSpanUtility.cs,ToTimeString,The following statement contains a magic number: switch (i) {                      case TimeSpanFormatOptions.RangeWeeks:                          value = (int)Math.Floor(FromTime.TotalDays / 7);                          FromTime -= TimeSpan.FromDays(value * 7);                          break;                      case TimeSpanFormatOptions.RangeDays:                          value = (int)Math.Floor(FromTime.TotalDays);                          FromTime -= TimeSpan.FromDays(value);                          break;                      case TimeSpanFormatOptions.RangeHours:                          value = (int)Math.Floor(FromTime.TotalHours);                          FromTime -= TimeSpan.FromHours(value);                          break;                      case TimeSpanFormatOptions.RangeMinutes:                          value = (int)Math.Floor(FromTime.TotalMinutes);                          FromTime -= TimeSpan.FromMinutes(value);                          break;                      case TimeSpanFormatOptions.RangeSeconds:                          value = (int)Math.Floor(FromTime.TotalSeconds);                          FromTime -= TimeSpan.FromSeconds(value);                          break;                      case TimeSpanFormatOptions.RangeMilliSeconds:                          value = (int)Math.Floor(FromTime.TotalMilliseconds);                          FromTime -= TimeSpan.FromMilliseconds(value);                          break;                      default:                          // This code is unreachable' but it prevents compile-errors.                          throw new InvalidEnumArgumentException();                  }
Magic Number,SmartFormat,SmartFormatter,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\SmartFormatter.cs,Format,The following statement contains a magic number: var output = new StringOutput(format.Length + args.Length * 8);
Magic Number,SmartFormat,SmartFormatter,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\SmartFormatter.cs,FormatWithCache,The following statement contains a magic number: var output = new StringOutput(format.Length + args.Length * 8);
Missing Default,SmartFormat.Extensions,ReflectionSource,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\ReflectionSource.cs,EvaluateSelector,The following switch statement is missing a default case: switch (member.MemberType)                  {                      case MemberTypes.Field:                          //  Selector is a Field; retrieve the value:                          var field = (FieldInfo) member;                          result = field.GetValue(current);                          handled = true;                          return;                      case MemberTypes.Property:                      case MemberTypes.Method:                          MethodInfo method;                          if (member.MemberType == MemberTypes.Property)                          {                              //  Selector is a Property                              var prop = (PropertyInfo) member;                              //  Make sure the property is not WriteOnly:                              if (prop.CanRead)                              {                                  method = prop.GetGetMethod();                              }                              else                              {                                  continue;                              }                          }                          else                          {                              //  Selector is a method                              method = (MethodInfo) member;                          }                            //  Check that this method is valid -- it needs to return a value and has to be parameterless:                          //  We are only looking for a parameterless Function/Property:                          if (method.GetParameters().Length > 0)                          {                              continue;                          }                            //  Make sure that this method is not void!  It has to be a Function!                          if (method.ReturnType == typeof(void))                          {                              continue;                          }                            //  Retrieve the Selectors/ParseFormat value:                          result = method.Invoke(current' new object[0]);                          handled = true;                          return;                                            }
Missing Default,SmartFormat.Extensions,ConditionalFormatter,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Extensions\ConditionalFormatter.cs,TryEvaluateCondition,The following switch statement is missing a default case: switch (comps[i].Value) {                      case ">":                          exp = value > v;                          break;                      case "<":                          exp = value < v;                          break;                      case "=":                      case "==":                          exp = value == v;                          break;                      case "<=":                          exp = value <= v;                          break;                      case ">=":                          exp = value >= v;                          break;                      case "!":                      case "!=":                          exp = value != v;                          break;                  }
Missing Default,SmartFormat.Utilities,TimeSpanUtility,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Utilities\TimeSpanUtility.cs,ToTimeString,The following switch statement is missing a default case: switch (rangeMin) {                  case TimeSpanFormatOptions.RangeWeeks:                      FromTime = TimeSpan.FromDays(round(FromTime.TotalDays / 7) * 7);                      break;                  case TimeSpanFormatOptions.RangeDays:                      FromTime = TimeSpan.FromDays(round(FromTime.TotalDays));                      break;                  case TimeSpanFormatOptions.RangeHours:                      FromTime = TimeSpan.FromHours(round(FromTime.TotalHours));                      break;                  case TimeSpanFormatOptions.RangeMinutes:                      FromTime = TimeSpan.FromMinutes(round(FromTime.TotalMinutes));                      break;                  case TimeSpanFormatOptions.RangeSeconds:                      FromTime = TimeSpan.FromSeconds(round(FromTime.TotalSeconds));                      break;                  case TimeSpanFormatOptions.RangeMilliSeconds:                      FromTime = TimeSpan.FromMilliseconds(round(FromTime.TotalMilliseconds));                      break;              }
Missing Default,SmartFormat.Utilities,TimeSpanUtility,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Utilities\TimeSpanUtility.cs,ToTimeString,The following switch statement is missing a default case: switch (truncate)                  {                      case TimeSpanFormatOptions.TruncateShortest:                          if (textStarted)                          {                              breakFor = true;                               break;                          }                          if (value > 0) displayThisValue = true;                          break;                      case TimeSpanFormatOptions.TruncateAuto:                          if (value > 0) displayThisValue = true;                          break;                      case TimeSpanFormatOptions.TruncateFill:                          if (textStarted || value > 0) displayThisValue = true;                          break;                      case TimeSpanFormatOptions.TruncateFull:                          displayThisValue = true;                          break;                  }
Missing Default,SmartFormat.Utilities,TimeSpanFormatOptionsConverter,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Utilities\TimeSpanUtility.cs,Parse,The following switch statement is missing a default case: switch (m.Value)                  {                      case "w":                      case "week":                      case "weeks":                          t |= TimeSpanFormatOptions.RangeWeeks;                          break;                      case "d":                      case "day":                      case "days":                          t |= TimeSpanFormatOptions.RangeDays;                          break;                      case "h":                      case "hour":                      case "hours":                          t |= TimeSpanFormatOptions.RangeHours;                          break;                      case "m":                      case "minute":                      case "minutes":                          t |= TimeSpanFormatOptions.RangeMinutes;                          break;                      case "s":                      case "second":                      case "seconds":                          t |= TimeSpanFormatOptions.RangeSeconds;                          break;                      case "ms":                      case "millisecond":                      case "milliseconds":                          t |= TimeSpanFormatOptions.RangeMilliSeconds;                          break;                          case "short":                          t |= TimeSpanFormatOptions.TruncateShortest;                          break;                      case "auto":                          t |= TimeSpanFormatOptions.TruncateAuto;                          break;                      case "fill":                          t |= TimeSpanFormatOptions.TruncateFill;                          break;                      case "full":                          t |= TimeSpanFormatOptions.TruncateFull;                          break;                          case "abbr":                          t |= TimeSpanFormatOptions.Abbreviate;                          break;                      case "noabbr":                          t |= TimeSpanFormatOptions.AbbreviateOff;                          break;                          case "less":                          t |= TimeSpanFormatOptions.LessThan;                          break;                      case "noless":                          t |= TimeSpanFormatOptions.LessThanOff;                          break;                  }
Missing Default,SmartFormat.Utilities,TimeTextInfo,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\Utilities\TimeSpanUtility.cs,GetUnitText,The following switch statement is missing a default case: switch (unit)              {                  case TimeSpanFormatOptions.RangeWeeks:                      return getValue(PluralRule' value' abbr ? w : week);                  case TimeSpanFormatOptions.RangeDays:                      return getValue(PluralRule' value' abbr ? d : day);                  case TimeSpanFormatOptions.RangeHours:                      return getValue(PluralRule' value' abbr ? h : hour);                  case TimeSpanFormatOptions.RangeMinutes:                      return getValue(PluralRule' value' abbr ? m : minute);                  case TimeSpanFormatOptions.RangeSeconds:                      return getValue(PluralRule' value' abbr ? s : second);                  case TimeSpanFormatOptions.RangeMilliSeconds:                      return getValue(PluralRule' value' abbr ? ms : millisecond);              }
Missing Default,SmartFormat,SmartFormatter,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\SmartFormatter.cs,FormatError,The following switch statement is missing a default case: switch (this.ErrorAction)              {                  case ErrorAction.Ignore:                      return;                  case ErrorAction.ThrowError:                      throw new FormatException(errorItem' issue' startIndex);                  case ErrorAction.OutputErrorInResult:                      formatDetails.FormatError = new FormatException(errorItem' issue' startIndex);                      output.Write(issue' formatDetails);                      formatDetails.FormatError = null;                      break;                  case ErrorAction.MaintainTokens:                      output.Write(formatDetails.Placeholder.Text' formatDetails);                      break;              }
Missing Default,SmartFormat,SmartFormatter,D:\research\architectureSmells\repos\kayy_AnimatorAccess\Editor\SmartFormat\SmartFormatter.cs,FormatError,The following switch statement is missing a default case: switch (this.ErrorAction)              {                  case ErrorAction.Ignore:                      return;                  case ErrorAction.ThrowError:                      throw new FormatException(errorItem' innerException' startIndex);                  case ErrorAction.OutputErrorInResult:                      formatDetails.FormatError = new FormatException(errorItem' innerException' startIndex);                      output.Write(innerException.Message' formatDetails);                      formatDetails.FormatError = null;                      break;                  case ErrorAction.MaintainTokens:                      output.Write(formatDetails.Placeholder.Text' formatDetails);                      break;              }
