Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,ParallelDemos,Calculator,C:\repos\chunchill_Csharp-Demos\ConsoleDemo\APMWithTask.cs,BeginCalculate,The method has 5 parameters.
Long Parameter List,ParallelDemos,ParallerLoop,C:\repos\chunchill_Csharp-Demos\ConsoleDemo\ParallerLoop.cs,GetDirecotryBytes,The method has 8 parameters.
Long Parameter List,ParallelDemos,TaskFactory,C:\repos\chunchill_Csharp-Demos\ConsoleDemo\TaskFactory.cs,Go,The method has 6 parameters.
Long Parameter List,ParallelDemos,TaskLogger,C:\repos\chunchill_Csharp-Demos\ConsoleDemo\TaskLogger.cs,Log,The method has 5 parameters.
Long Parameter List,ParallelDemos,TaskLogger,C:\repos\chunchill_Csharp-Demos\ConsoleDemo\TaskLogger.cs,Log,The method has 6 parameters.
Long Statement,ParallelDemos,AsynchronousFunctionsDemo,C:\repos\chunchill_Csharp-Demos\ConsoleDemo\AsynchronousFunctionsDemo.cs,IssueClientRequestAsync,The length of the statement  "	using (var pipe = new NamedPipeClientStream (serverName' pipeName' PipeDirection.InOut' PipeOptions.Asynchronous | PipeOptions.WriteThrough)) { " is 143.
Long Statement,ParallelDemos,AsyncResultDemo,C:\repos\chunchill_Csharp-Demos\ConsoleDemo\AsyncResultDemo.cs,Go,The length of the statement  "	var result = caller.BeginInvoke (3000' out threadId' new AsyncCallback (CallbackMethod)' "The call executed on thread {0}' with return value \"{1}\"."); " is 152.
Long Statement,ParallelDemos,PLINQDemo,C:\repos\chunchill_Csharp-Demos\ConsoleDemo\PLINQDemo.cs,ObsoleteMethods,The length of the statement  "	select String.Format ("Type={0}\n Method={1}\nMessage={2}\n"' type.FullName' method.ToString ()' obsoleteAttrObj.Message); " is 122.
Long Statement,ParallelDemos,TaskFactory,C:\repos\chunchill_Csharp-Demos\ConsoleDemo\TaskFactory.cs,Go,The length of the statement  "		var tf = new TaskFactory<Int32> (cts.Token' TaskCreationOptions.AttachedToParent' TaskContinuationOptions.ExecuteSynchronously' TaskScheduler.Default); " is 151.
Long Statement,ParallelDemos,TaskFactory,C:\repos\chunchill_Csharp-Demos\ConsoleDemo\TaskFactory.cs,Go,The length of the statement  "		// CancellationToken.None would override the one passed into TaskFactory'so even the cts.Token is canceled'this task would be always excuted. " is 141.
Long Statement,ParallelDemos,TaskFactory,C:\repos\chunchill_Csharp-Demos\ConsoleDemo\TaskFactory.cs,Go,The length of the statement  "		tf.ContinueWhenAll (childTasks' complatedTasks => complatedTasks.Where (t => !t.IsFaulted && !t.IsCanceled).Max (t => t.Result)' CancellationToken.None).ContinueWith (t => Console.WriteLine ("The maximum is: " + t.Result)' TaskContinuationOptions.ExecuteSynchronously); " is 269.
Empty Catch Block,ParallelDemos,ParallerLoop,C:\repos\chunchill_Csharp-Demos\ConsoleDemo\ParallerLoop.cs,GetDirecotryBytes,The method has an empty catch block.
Empty Catch Block,ParallelDemos,TaskLogger,C:\repos\chunchill_Csharp-Demos\ConsoleDemo\TaskLogger.cs,Go,The method has an empty catch block.
Magic Number,ParallelDemos,Calculator,C:\repos\chunchill_Csharp-Demos\ConsoleDemo\APMWithTask.cs,Compute,The following statement contains a magic number: Thread.SpinWait (500000000);  
Magic Number,ParallelDemos,APMWithTask,C:\repos\chunchill_Csharp-Demos\ConsoleDemo\APMWithTask.cs,Go,The following statement contains a magic number: Thread.SpinWait (500000);  
Magic Number,ParallelDemos,AsyncAwaitDemo,C:\repos\chunchill_Csharp-Demos\ConsoleDemo\AsyncAwaitDemo.cs,MyMethodAsync,The following statement contains a magic number: try {  	Type1 result1 = await Method1Async ();  	for (Int32 x = 0; x < 3; x++) {  		Type2 result2 = await Method2Async ();  	}  }  catch (Exception) {  	Console.WriteLine ("Catch");  }  finally {  	Console.WriteLine ("Finally");  }  
Magic Number,ParallelDemos,AsyncAwaitDemo,C:\repos\chunchill_Csharp-Demos\ConsoleDemo\AsyncAwaitDemo.cs,MyMethodAsync,The following statement contains a magic number: for (Int32 x = 0; x < 3; x++) {  	Type2 result2 = await Method2Async ();  }  
Magic Number,ParallelDemos,AsynchronousFunctionsDemo,C:\repos\chunchill_Csharp-Demos\ConsoleDemo\AsynchronousFunctionsDemo.cs,IssueClientRequestAsync,The following statement contains a magic number: using (var pipe = new NamedPipeClientStream (serverName' pipeName' PipeDirection.InOut' PipeOptions.Asynchronous | PipeOptions.WriteThrough)) {  	pipe.Connect ();  	// Must Connect before setting ReadMode   	pipe.ReadMode = PipeTransmissionMode.Message;  	// Asynchronously send data to the server   	Byte[] request = Encoding.UTF8.GetBytes (message);  	await pipe.WriteAsync (request' 0' request.Length);  	// Asynchronously read the server's response   	Byte[] response = new Byte[1000];  	Int32 bytesRead = await pipe.ReadAsync (response' 0' response.Length);  	return Encoding.UTF8.GetString (response' 0' bytesRead);  }  
Magic Number,ParallelDemos,CancellationDemo,C:\repos\chunchill_Csharp-Demos\ConsoleDemo\CancellationDemo.cs,Go,The following statement contains a magic number: ThreadPool.QueueUserWorkItem (o => Count (cts.Token' 1000));  
Magic Number,ParallelDemos,CancellationDemo,C:\repos\chunchill_Csharp-Demos\ConsoleDemo\CancellationDemo.cs,Count,The following statement contains a magic number: for (Int32 count = 0; count < countTo; count++) {  	if (token.IsCancellationRequested) {  		Console.WriteLine ("Count is cancelled");  		break;  		// Exit the loop to stop the operation   	}  	Console.WriteLine (count);  	Thread.Sleep (200);  	// For demo' waste some time   }  
Magic Number,ParallelDemos,CancellationDemo,C:\repos\chunchill_Csharp-Demos\ConsoleDemo\CancellationDemo.cs,Count,The following statement contains a magic number: Thread.Sleep (200);  
Magic Number,ParallelDemos,CancellationRegistDemo,C:\repos\chunchill_Csharp-Demos\ConsoleDemo\CancellationRegistDemo.cs,Go,The following statement contains a magic number: ThreadPool.QueueUserWorkItem (o => Count (cts.Token' 1000));  
Magic Number,ParallelDemos,CancellationRegistDemo,C:\repos\chunchill_Csharp-Demos\ConsoleDemo\CancellationRegistDemo.cs,Count,The following statement contains a magic number: for (Int32 count = 0; count < countTo; count++) {  	if (token.IsCancellationRequested) {  		Console.WriteLine ("Count is cancelled");  		break;  		// Exit the loop to stop the operation   	}  	Console.WriteLine (count);  	Thread.Sleep (200);  	// For demo' waste some time   }  
Magic Number,ParallelDemos,CancellationRegistDemo,C:\repos\chunchill_Csharp-Demos\ConsoleDemo\CancellationRegistDemo.cs,Count,The following statement contains a magic number: Thread.Sleep (200);  
Magic Number,ParallelDemos,ForegroundAndBackGroundThreads,C:\repos\chunchill_Csharp-Demos\ConsoleDemo\ForegroundAndBackGroundThreads.cs,Worker,The following statement contains a magic number: Thread.Sleep (10000);  
Magic Number,ParallelDemos,StrangeBehavior,C:\repos\chunchill_Csharp-Demos\ConsoleDemo\OptimizedAwayDemo.cs,Go,The following statement contains a magic number: Thread.Sleep (5000);  
Magic Number,ParallelDemos,ThreadsSharingData,C:\repos\chunchill_Csharp-Demos\ConsoleDemo\OptimizedAwayDemo.cs,Thread1,The following statement contains a magic number: m_value = 5;  
Magic Number,ParallelDemos,ThreadsSharingDataFixed,C:\repos\chunchill_Csharp-Demos\ConsoleDemo\OptimizedAwayDemo.cs,Thread1,The following statement contains a magic number: m_value = 5;  
Magic Number,ParallelDemos,SimpleAwaitDemo,C:\repos\chunchill_Csharp-Demos\ConsoleDemo\SimpleAwaitDemo.cs,DoWork,The following statement contains a magic number: for (int i = 0; i < 3; i++) {  	Console.WriteLine ("Working..{0}"' i);  	await Task.Delay (1000);  }  
Magic Number,ParallelDemos,SimpleAwaitDemo,C:\repos\chunchill_Csharp-Demos\ConsoleDemo\SimpleAwaitDemo.cs,DoWork,The following statement contains a magic number: for (int i = 0; i < 3; i++) {  	Console.WriteLine ("Working..{0}"' i);  	await Task.Delay (1000);  }  
Magic Number,ParallelDemos,SimpleAwaitDemo,C:\repos\chunchill_Csharp-Demos\ConsoleDemo\SimpleAwaitDemo.cs,DoWork,The following statement contains a magic number: await Task.Delay (1000);  
Magic Number,ParallelDemos,QueueUserWorkItemDemo,C:\repos\chunchill_Csharp-Demos\ConsoleDemo\QueueUserWorkItemDemo.cs,Go,The following statement contains a magic number: ThreadPool.QueueUserWorkItem (ComputeBoundOp' 5);  
Magic Number,ParallelDemos,QueueUserWorkItemDemo,C:\repos\chunchill_Csharp-Demos\ConsoleDemo\QueueUserWorkItemDemo.cs,Go,The following statement contains a magic number: Thread.Sleep (10000);  
Magic Number,ParallelDemos,QueueUserWorkItemDemo,C:\repos\chunchill_Csharp-Demos\ConsoleDemo\QueueUserWorkItemDemo.cs,ComputeBoundOp,The following statement contains a magic number: Thread.Sleep (1000);  
Magic Number,ParallelDemos,TimerDemo,C:\repos\chunchill_Csharp-Demos\ConsoleDemo\TimerDemo.cs,Go,The following statement contains a magic number: using (s_timer = new Timer (ComputeBoundOp' 5' 0' Timeout.Infinite)) {  	Console.WriteLine ("Main thread:Doing other work here...");  	Thread.Sleep (10000);  }  
Magic Number,ParallelDemos,TimerDemo,C:\repos\chunchill_Csharp-Demos\ConsoleDemo\TimerDemo.cs,Go,The following statement contains a magic number: using (s_timer = new Timer (ComputeBoundOp' 5' 0' Timeout.Infinite)) {  	Console.WriteLine ("Main thread:Doing other work here...");  	Thread.Sleep (10000);  }  
Magic Number,ParallelDemos,TimerDemo,C:\repos\chunchill_Csharp-Demos\ConsoleDemo\TimerDemo.cs,Go,The following statement contains a magic number: Thread.Sleep (10000);  
Magic Number,ParallelDemos,TimerDemo,C:\repos\chunchill_Csharp-Demos\ConsoleDemo\TimerDemo.cs,ComputeBoundOp,The following statement contains a magic number: Thread.Sleep (1000);  
Magic Number,ParallelDemos,TimerDemo,C:\repos\chunchill_Csharp-Demos\ConsoleDemo\TimerDemo.cs,ComputeBoundOp,The following statement contains a magic number: s_timer.Change (2000' Timeout.Infinite);  
