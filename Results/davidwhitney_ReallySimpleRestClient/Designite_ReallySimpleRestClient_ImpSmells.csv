Implementation smell,Namespace,Class,File,Method,Description
Complex Method,ReallySimpleRestClient.Http,HttpChannel,C:\repos\davidwhitney_ReallySimpleRestClient\ReallySimpleRestClient\Http\HttpChannel.cs,ThrowExceptionForExceptionalStatusCodes,Cyclomatic complexity of the method is 14
Long Parameter List,ReallySimpleRestClient.Http,HttpChannel,C:\repos\davidwhitney_ReallySimpleRestClient\ReallySimpleRestClient\Http\HttpChannel.cs,PerformRequest,The method has 5 parameters.
Long Parameter List,ReallySimpleRestClient.Http,HttpChannel,C:\repos\davidwhitney_ReallySimpleRestClient\ReallySimpleRestClient\Http\HttpChannel.cs,PerformRawRequestAsync,The method has 5 parameters.
Long Parameter List,ReallySimpleRestClient.Http,HttpChannel,C:\repos\davidwhitney_ReallySimpleRestClient\ReallySimpleRestClient\Http\HttpChannel.cs,PerformRequestAsync,The method has 5 parameters.
Long Parameter List,ReallySimpleRestClient.Http,IHttpClientAsync,C:\repos\davidwhitney_ReallySimpleRestClient\ReallySimpleRestClient\Http\IHttpClientAsync.cs,SendAsync,The method has 5 parameters.
Long Parameter List,ReallySimpleRestClient.Http.MicrosoftHttp,HttpClientWrapper,C:\repos\davidwhitney_ReallySimpleRestClient\ReallySimpleRestClient\Http\MicrosoftHttp\HttpClientWrapper.cs,SendAsync,The method has 5 parameters.
Long Statement,ReallySimpleRestClient.Http,HttpChannel,C:\repos\davidwhitney_ReallySimpleRestClient\ReallySimpleRestClient\Http\HttpChannel.cs,PerformRequest,The length of the statement  "		throw new ArgumentException ("Invalid Http Method - Currently Supported Methods are GET' POST' PUT and HEAD"' "method"); " is 120.
Long Statement,ReallySimpleRestClient.Http,HttpChannel,C:\repos\davidwhitney_ReallySimpleRestClient\ReallySimpleRestClient\Http\HttpChannel.cs,PerformRequestAsync,The length of the statement  "		throw new ArgumentException ("Invalid Http Method - Currently Supported Methods are GET' POST' PUT and HEAD"' "method"); " is 120.
Long Statement,ReallySimpleRestClient.Http,HttpChannel,C:\repos\davidwhitney_ReallySimpleRestClient\ReallySimpleRestClient\Http\HttpChannel.cs,PerformRequestAsync,The length of the statement  "	_httpClient.SendAsync (method' url' payload' responseMessage => apiCallback (ProcessResponse<TResponseType> (responseMessage))); " is 128.
Long Statement,ReallySimpleRestClient.Http.MicrosoftHttp,HttpClientWrapper,C:\repos\davidwhitney_ReallySimpleRestClient\ReallySimpleRestClient\Http\MicrosoftHttp\HttpClientWrapper.cs,Send,The length of the statement  "	var httpRequestMessage = new HttpRequestMessage (method' uri' HttpContent.Create (postData.Content' postData.ContentType)) { " is 124.
Long Statement,ReallySimpleRestClient.Http.MicrosoftHttp,HttpClientWrapper,C:\repos\davidwhitney_ReallySimpleRestClient\ReallySimpleRestClient\Http\MicrosoftHttp\HttpClientWrapper.cs,ToMicrosoftHttpRequest,The length of the statement  "		return new HttpRequestMessage (httpRequestMessage.Method' httpRequestMessage.Uri).WithAcceptHeader (httpRequestMessage); " is 120.
Long Statement,ReallySimpleRestClient.Http.MicrosoftHttp,HttpClientWrapper,C:\repos\davidwhitney_ReallySimpleRestClient\ReallySimpleRestClient\Http\MicrosoftHttp\HttpClientWrapper.cs,ToMicrosoftHttpRequest,The length of the statement  "	return new HttpRequestMessage (httpRequestMessage.Method' httpRequestMessage.Uri' HttpContent.Create (httpRequestMessage.Content.Content' httpRequestMessage.Content.ContentType)).WithAcceptHeader (httpRequestMessage); " is 217.
Long Statement,ReallySimpleRestClient.Http.MicrosoftHttp,HttpClientWrapper,C:\repos\davidwhitney_ReallySimpleRestClient\ReallySimpleRestClient\Http\MicrosoftHttp\HttpClientWrapper.cs,SendAsync,The length of the statement  "	var httpRequestMessage = new HttpRequestMessage (method' uri' HttpContent.Create (postData.Content' postData.ContentType)) { " is 124.
Magic Number,ReallySimpleRestClient,ClientBase,C:\repos\davidwhitney_ReallySimpleRestClient\ReallySimpleRestClient\ClientBase.cs,ClientBase,The following statement contains a magic number: HttpClient.ConnectionTimeOut = TimeSpan.FromMinutes (3);  
Magic Number,ReallySimpleRestClient.Http,HttpChannel,C:\repos\davidwhitney_ReallySimpleRestClient\ReallySimpleRestClient\Http\HttpChannel.cs,ThrowExceptionForExceptionalStatusCodes,The following statement contains a magic number: switch (response.StatusCode) {  case HttpStatusCode.OK:  case HttpStatusCode.Created:  case HttpStatusCode.Accepted:  case HttpStatusCode.Continue:  case HttpStatusCode.Found:  case (HttpStatusCode)207:  	var errorsDespiteSuccess = TryExtractErrorsFromResponse (content);  	if (errorsDespiteSuccess != null && errorsDespiteSuccess.Count > 0) {  		throw ErrorResponseExceptionFactory.CreateException (response' errorsDespiteSuccess);  	}  	return;  case HttpStatusCode.NotFound:  	throw new ResourceNotFoundException ();  default:  	var errors = TryExtractErrorsFromResponse (content);  	throw ErrorResponseExceptionFactory.CreateException (response' errors);  }  
Magic Number,ReallySimpleRestClient.Http.MicrosoftHttp,Zip,C:\repos\davidwhitney_ReallySimpleRestClient\ReallySimpleRestClient\Http\MicrosoftHttp\Zip.cs,ReadAllBytes,The following statement contains a magic number: while ((chunk = streamOfUnknownLength.Read (buffer' read' buffer.Length - read)) > 0) {  	read += chunk;  	// If we've reached the end of our buffer' check to see if there's  	// any more information  	if (read == buffer.Length) {  		int nextByte = streamOfUnknownLength.ReadByte ();  		// End of stream? If so' we're done  		if (nextByte == -1) {  			return buffer;  		}  		// Nope. Resize the buffer' put in the byte we've just  		// read' and continue  		var newBuffer = new byte[buffer.Length * 2];  		Array.Copy (buffer' newBuffer' buffer.Length);  		newBuffer [read] = (byte)nextByte;  		buffer = newBuffer;  		read++;  	}  }  
Magic Number,ReallySimpleRestClient.Http.MicrosoftHttp,Zip,C:\repos\davidwhitney_ReallySimpleRestClient\ReallySimpleRestClient\Http\MicrosoftHttp\Zip.cs,ReadAllBytes,The following statement contains a magic number: if (read == buffer.Length) {  	int nextByte = streamOfUnknownLength.ReadByte ();  	// End of stream? If so' we're done  	if (nextByte == -1) {  		return buffer;  	}  	// Nope. Resize the buffer' put in the byte we've just  	// read' and continue  	var newBuffer = new byte[buffer.Length * 2];  	Array.Copy (buffer' newBuffer' buffer.Length);  	newBuffer [read] = (byte)nextByte;  	buffer = newBuffer;  	read++;  }  
