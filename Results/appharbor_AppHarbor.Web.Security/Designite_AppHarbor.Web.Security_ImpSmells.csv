Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,AppHarbor.Web.Security,AuthenticationCookie,C:\repos\appharbor_AppHarbor.Web.Security\AppHarbor.Web.Security\AuthenticationCookie.cs,AuthenticationCookie,The method has 6 parameters. Parameters: cookieType' id' persistent' name' roles' tag
Long Statement,AppHarbor.Web.Security,CookieAuthenticationModule,C:\repos\appharbor_AppHarbor.Web.Security\AppHarbor.Web.Security\CookieAuthenticationModule.cs,RenewCookieIfExpiring,The length of the statement  "			if (!_configuration.SlidingExpiration || !authenticationCookie.IsExpired(TimeSpan.FromTicks(_configuration.Timeout.Ticks / 2))) " is 127.
Long Statement,AppHarbor.Web.Security,SymmetricEncryption,C:\repos\appharbor_AppHarbor.Web.Security\AppHarbor.Web.Security\SymmetricEncryption.cs,Encrypt,The length of the statement  "				using (var cryptoOutput = new CryptoStream(output' _algorithm.CreateEncryptor(_secretKey' initializationVector)' CryptoStreamMode.Write)) " is 137.
Long Statement,AppHarbor.Web.Security,SymmetricEncryption,C:\repos\appharbor_AppHarbor.Web.Security\AppHarbor.Web.Security\SymmetricEncryption.cs,Decrypt,The length of the statement  "				using (var cryptoOutput = new CryptoStream(output' _algorithm.CreateDecryptor(_secretKey' initializationVector)' CryptoStreamMode.Write)) " is 137.
Empty Catch Block,AppHarbor.Web.Security,CookieAuthenticationModule,C:\repos\appharbor_AppHarbor.Web.Security\AppHarbor.Web.Security\CookieAuthenticationModule.cs,OnAuthenticateRequest,The method has an empty catch block.
Magic Number,AppHarbor.Web.Security,AuthenticationCookie,C:\repos\appharbor_AppHarbor.Web.Security\AppHarbor.Web.Security\AuthenticationCookie.cs,AuthenticationCookie,The following statement contains a magic number: using (var memoryStream = new MemoryStream(data))  			{  				using (var binaryReader = new BinaryReader(memoryStream))  				{  					_cookieType = binaryReader.ReadInt16();  					_id = new Guid(binaryReader.ReadBytes(16));  					_persistent = binaryReader.ReadBoolean();  					_issueDate = DateTime.FromBinary(binaryReader.ReadInt64());  					_name = binaryReader.ReadString();  					var rolesLength = binaryReader.ReadInt16();  					_roles = new string[rolesLength];  					for (int i = 0; i < _roles.Length; i++)  					{  						_roles[i] = binaryReader.ReadString();  					}  					var tagLength = binaryReader.ReadInt16();  					if (tagLength == 0)  					{  						_tag = null;  					}  					else  					{  						_tag = binaryReader.ReadBytes(tagLength);  					}  				}  			}
Magic Number,AppHarbor.Web.Security,CookieAuthenticationModule,C:\repos\appharbor_AppHarbor.Web.Security\AppHarbor.Web.Security\CookieAuthenticationModule.cs,RenewCookieIfExpiring,The following statement contains a magic number: if (!_configuration.SlidingExpiration || !authenticationCookie.IsExpired(TimeSpan.FromTicks(_configuration.Timeout.Ticks / 2)))  			{  				return;  			}
Magic Number,AppHarbor.Web.Security,CookieAuthenticationModule,C:\repos\appharbor_AppHarbor.Web.Security\AppHarbor.Web.Security\CookieAuthenticationModule.cs,OnEndRequest,The following statement contains a magic number: if (response.StatusCode == 401 && !request.QueryString.AllKeys.Contains("ReturnUrl"))  			{  				var delimiter = "?";  				var loginUrl = _configuration.LoginUrl;  				if (loginUrl.Contains("?"))  				{  					delimiter = "&";  				}  				response.Redirect(loginUrl + delimiter + "ReturnUrl=" + HttpUtility.UrlEncode(context.Request.RawUrl)' false);  			}
Magic Number,AppHarbor.Web.Security,CookieAuthenticator,C:\repos\appharbor_AppHarbor.Web.Security\AppHarbor.Web.Security\CookieAuthenticator.cs,SignOut,The following statement contains a magic number: _context.Response.Cookies.Add(new HttpCookie(_configuration.CookieName' "")  			{  				Expires = DateTime.UtcNow.AddMonths(-100)'  			});
Magic Number,AppHarbor.Web.Security,KeyedHashValidation,C:\repos\appharbor_AppHarbor.Web.Security\AppHarbor.Web.Security\KeyedHashValidation.cs,Sign,The following statement contains a magic number: var hashLength = _algorithm.HashSize / 8;
Magic Number,AppHarbor.Web.Security,KeyedHashValidation,C:\repos\appharbor_AppHarbor.Web.Security\AppHarbor.Web.Security\KeyedHashValidation.cs,StripSignature,The following statement contains a magic number: var hashLength = _algorithm.HashSize / 8;
Magic Number,AppHarbor.Web.Security,KeyedHashValidation,C:\repos\appharbor_AppHarbor.Web.Security\AppHarbor.Web.Security\KeyedHashValidation.cs,Validate,The following statement contains a magic number: var hashLength = _algorithm.HashSize / 8;
Magic Number,AppHarbor.Web.Security,SymmetricEncryption,C:\repos\appharbor_AppHarbor.Web.Security\AppHarbor.Web.Security\SymmetricEncryption.cs,Encrypt,The following statement contains a magic number: if (generateRandomIV)  			{  				initializationVector = new byte[_algorithm.BlockSize / 8];  				using (var rng = RandomNumberGenerator.Create())  				{  					rng.GetBytes(initializationVector);  				}  			}
Magic Number,AppHarbor.Web.Security,SymmetricEncryption,C:\repos\appharbor_AppHarbor.Web.Security\AppHarbor.Web.Security\SymmetricEncryption.cs,Decrypt,The following statement contains a magic number: if (initializationVector == null)  			{  				initializationVector = new byte[_algorithm.BlockSize / 8];  				Buffer.BlockCopy(encryptedValue' 0' initializationVector' 0' initializationVector.Length);  				dataOffset = initializationVector.Length;  			}
