Implementation smell,Namespace,Class,File,Method,Description
Complex Method,GmailNotifierClone,StringCipher,C:\repos\xy2041_GmailNotifierClone\Classes\StringCipher.cs,Encrypt,Cyclomatic complexity of the method is 11
Complex Method,GmailNotifierClone,StringCipher,C:\repos\xy2041_GmailNotifierClone\Classes\StringCipher.cs,Decrypt,Cyclomatic complexity of the method is 12
Complex Method,GmailNotifierClone,MailManager,C:\repos\xy2041_GmailNotifierClone\Classes\MailManager.cs,CheckMailThreadFunc,Cyclomatic complexity of the method is 13
Long Parameter List,GmailNotifierClone,Utils,C:\repos\xy2041_GmailNotifierClone\Utils\Utils.cs,WriteTextToBox,The method has 6 parameters.
Long Statement,GmailNotifierClone,AuthForm,C:\repos\xy2041_GmailNotifierClone\Forms\AuthForm.cs,AuthForm_Load,The length of the statement  "		if (Settings.Instance.Login.Length > 0 && Settings.Instance.Password.Length > 0 && Settings.Instance.IsNeedToSaveAuth == true) { " is 128.
Long Statement,GmailNotifierClone,MailManager,C:\repos\xy2041_GmailNotifierClone\Classes\MailManager.cs,CheckMailThreadFunc,The length of the statement  "		using (var imap = new AE.Net.Mail.ImapClient ("imap.gmail.com"' Settings.Instance.Login' Settings.Instance.Password' AE.Net.Mail.ImapClient.AuthMethods.Login' 993' true)) { " is 172.
Long Statement,GmailNotifierClone,MailManager,C:\repos\xy2041_GmailNotifierClone\Classes\MailManager.cs,MarkAsRead,The length of the statement  "		using (var imap = new AE.Net.Mail.ImapClient ("imap.gmail.com"' Settings.Instance.Login' Settings.Instance.Password' AE.Net.Mail.ImapClient.AuthMethods.Login' 993' true)) { " is 172.
Long Statement,GmailNotifierClone,OptionsForm,C:\repos\xy2041_GmailNotifierClone\Forms\OptionsForm.cs,SetAutorun,The length of the statement  "	RegistryKey rkApp = Registry.CurrentUser.OpenSubKey (REGISTRY_AUTORUN_PATH' true) ?? Registry.CurrentUser.CreateSubKey (REGISTRY_AUTORUN_PATH); " is 143.
Empty Catch Block,GmailNotifierClone,Log,C:\repos\xy2041_GmailNotifierClone\Log\Log.cs,Add,The method has an empty catch block.
Magic Number,GmailNotifierClone,StringCipher,C:\repos\xy2041_GmailNotifierClone\Classes\StringCipher.cs,Encrypt,The following statement contains a magic number: using (PasswordDeriveBytes password = new PasswordDeriveBytes (passPhrase' null)) {  	byte[] keyBytes = password.GetBytes (keysize / 8);  	using (RijndaelManaged symmetricKey = new RijndaelManaged ()) {  		symmetricKey.Mode = CipherMode.CBC;  		using (ICryptoTransform encryptor = symmetricKey.CreateEncryptor (keyBytes' initVectorBytes)) {  			using (MemoryStream memoryStream = new MemoryStream ()) {  				using (CryptoStream cryptoStream = new CryptoStream (memoryStream' encryptor' CryptoStreamMode.Write)) {  					cryptoStream.Write (plainTextBytes' 0' plainTextBytes.Length);  					cryptoStream.FlushFinalBlock ();  					byte[] cipherTextBytes = memoryStream.ToArray ();  					return Convert.ToBase64String (cipherTextBytes);  				}  			}  		}  	}  }  
Magic Number,GmailNotifierClone,StringCipher,C:\repos\xy2041_GmailNotifierClone\Classes\StringCipher.cs,Decrypt,The following statement contains a magic number: using (PasswordDeriveBytes password = new PasswordDeriveBytes (passPhrase' null)) {  	byte[] keyBytes = password.GetBytes (keysize / 8);  	using (RijndaelManaged symmetricKey = new RijndaelManaged ()) {  		symmetricKey.Mode = CipherMode.CBC;  		using (ICryptoTransform decryptor = symmetricKey.CreateDecryptor (keyBytes' initVectorBytes)) {  			using (MemoryStream memoryStream = new MemoryStream (cipherTextBytes)) {  				using (CryptoStream cryptoStream = new CryptoStream (memoryStream' decryptor' CryptoStreamMode.Read)) {  					byte[] plainTextBytes = new byte[cipherTextBytes.Length];  					int decryptedByteCount = cryptoStream.Read (plainTextBytes' 0' plainTextBytes.Length);  					return Encoding.UTF8.GetString (plainTextBytes' 0' decryptedByteCount);  				}  			}  		}  	}  }  
Magic Number,GmailNotifierClone,MailManager,C:\repos\xy2041_GmailNotifierClone\Classes\MailManager.cs,CheckMailThreadFunc,The following statement contains a magic number: try {  	Log.Add ("Checking mailbox...");  	using (var imap = new AE.Net.Mail.ImapClient ("imap.gmail.com"' Settings.Instance.Login' Settings.Instance.Password' AE.Net.Mail.ImapClient.AuthMethods.Login' 993' true)) {  		imap.SelectMailbox ("INBOX");  		const bool headersOnly = false;  		Lazy<MailMessage>[] messages = imap.SearchMessages (SearchCondition.Unseen ()' headersOnly);  		// Run through each message:  		MailManager.Instance.m_notificationsList.Clear ();  		Log.Add ("Total messages fetched: " + messages.Count ());  		var resources = new System.ComponentModel.ComponentResourceManager (typeof(Assets));  		if (messages.Any ()) {  			int messCount = messages.Count ();  			MainForm.Instance.trayIcon.Text = "New mail: " + messCount;  			if (messCount > 0 && messCount <= 9) {  				string icoName = String.Format ("tray_ico_{0}"' messCount);  				MainForm.Instance.trayIcon.Icon = ((System.Drawing.Icon)(resources.GetObject (icoName)));  			}  			else if (messCount > 9) {  				MainForm.Instance.trayIcon.Icon = ((System.Drawing.Icon)(resources.GetObject ("blank_ico_max")));  			}  			else {  				MainForm.Instance.trayIcon.Icon = ((System.Drawing.Icon)(resources.GetObject ("gnotify_2")));  			}  		}  		else {  			MainForm.Instance.trayIcon.Icon = ((System.Drawing.Icon)(resources.GetObject ("gnotify_4")));  			MainForm.Instance.trayIcon.Text = "No unread mail";  		}  		List<string> newMailIdsList = new List<string> ();  		int cnt = 0;  		foreach (Lazy<MailMessage> message in messages) {  			try {  				MailMessage m = message.Value;  				newMailIdsList.Add (m.Uid);  				if (!MailManager.Instance.m_mails.ContainsKey (m.Uid)) {  					Log.Add ("Schedule notification for message with id: " + m.Uid);  					MailManager.Instance.m_mails.Add (m.Uid' m);  					MailManager.Instance.m_notificationsList.Add (m.Uid);  				}  			}  			catch (System.Exception ex) {  				Log.Add (ex);  			}  		}  		// Del from cache viewed messages  		for (int i = MailManager.Instance.m_mails.Count - 1; i >= 0; --i) {  			if (!newMailIdsList.Contains (MailManager.Instance.m_mails.ElementAt (i).Key)) {  				MailManager.Instance.m_mails.Remove (MailManager.Instance.m_mails.ElementAt (i).Key);  			}  		}  	}  	if (!MainForm.IsForegroundWwindowFullScreen ()) {  		ShowNotifications ();  	}  }  catch (Exception e) {  	if (e.Message.Contains ("[AUTHENTICATIONFAILED] Invalid credentials")) {  		Settings.Instance.Password = "";  		Settings.Instance.Save ();  		MainForm.Instance.Invoke ((MethodInvoker)AuthForm.Instance.Show);  	}  	try {  		MainForm.Instance.trayIcon.Text = e.Message.Length > 63 ? e.Message.Substring (0' 63) : e.Message;  		var resources = new System.ComponentModel.ComponentResourceManager (typeof(Assets));  		MainForm.Instance.trayIcon.Icon = ((System.Drawing.Icon)(resources.GetObject ("gnotify_5")));  	}  	catch (Exception ee) {  		Log.Add (ee);  	}  	Log.Add (e);  }  finally {  	m_isCheckInProgress = false;  }  
Magic Number,GmailNotifierClone,MailManager,C:\repos\xy2041_GmailNotifierClone\Classes\MailManager.cs,CheckMailThreadFunc,The following statement contains a magic number: try {  	Log.Add ("Checking mailbox...");  	using (var imap = new AE.Net.Mail.ImapClient ("imap.gmail.com"' Settings.Instance.Login' Settings.Instance.Password' AE.Net.Mail.ImapClient.AuthMethods.Login' 993' true)) {  		imap.SelectMailbox ("INBOX");  		const bool headersOnly = false;  		Lazy<MailMessage>[] messages = imap.SearchMessages (SearchCondition.Unseen ()' headersOnly);  		// Run through each message:  		MailManager.Instance.m_notificationsList.Clear ();  		Log.Add ("Total messages fetched: " + messages.Count ());  		var resources = new System.ComponentModel.ComponentResourceManager (typeof(Assets));  		if (messages.Any ()) {  			int messCount = messages.Count ();  			MainForm.Instance.trayIcon.Text = "New mail: " + messCount;  			if (messCount > 0 && messCount <= 9) {  				string icoName = String.Format ("tray_ico_{0}"' messCount);  				MainForm.Instance.trayIcon.Icon = ((System.Drawing.Icon)(resources.GetObject (icoName)));  			}  			else if (messCount > 9) {  				MainForm.Instance.trayIcon.Icon = ((System.Drawing.Icon)(resources.GetObject ("blank_ico_max")));  			}  			else {  				MainForm.Instance.trayIcon.Icon = ((System.Drawing.Icon)(resources.GetObject ("gnotify_2")));  			}  		}  		else {  			MainForm.Instance.trayIcon.Icon = ((System.Drawing.Icon)(resources.GetObject ("gnotify_4")));  			MainForm.Instance.trayIcon.Text = "No unread mail";  		}  		List<string> newMailIdsList = new List<string> ();  		int cnt = 0;  		foreach (Lazy<MailMessage> message in messages) {  			try {  				MailMessage m = message.Value;  				newMailIdsList.Add (m.Uid);  				if (!MailManager.Instance.m_mails.ContainsKey (m.Uid)) {  					Log.Add ("Schedule notification for message with id: " + m.Uid);  					MailManager.Instance.m_mails.Add (m.Uid' m);  					MailManager.Instance.m_notificationsList.Add (m.Uid);  				}  			}  			catch (System.Exception ex) {  				Log.Add (ex);  			}  		}  		// Del from cache viewed messages  		for (int i = MailManager.Instance.m_mails.Count - 1; i >= 0; --i) {  			if (!newMailIdsList.Contains (MailManager.Instance.m_mails.ElementAt (i).Key)) {  				MailManager.Instance.m_mails.Remove (MailManager.Instance.m_mails.ElementAt (i).Key);  			}  		}  	}  	if (!MainForm.IsForegroundWwindowFullScreen ()) {  		ShowNotifications ();  	}  }  catch (Exception e) {  	if (e.Message.Contains ("[AUTHENTICATIONFAILED] Invalid credentials")) {  		Settings.Instance.Password = "";  		Settings.Instance.Save ();  		MainForm.Instance.Invoke ((MethodInvoker)AuthForm.Instance.Show);  	}  	try {  		MainForm.Instance.trayIcon.Text = e.Message.Length > 63 ? e.Message.Substring (0' 63) : e.Message;  		var resources = new System.ComponentModel.ComponentResourceManager (typeof(Assets));  		MainForm.Instance.trayIcon.Icon = ((System.Drawing.Icon)(resources.GetObject ("gnotify_5")));  	}  	catch (Exception ee) {  		Log.Add (ee);  	}  	Log.Add (e);  }  finally {  	m_isCheckInProgress = false;  }  
Magic Number,GmailNotifierClone,MailManager,C:\repos\xy2041_GmailNotifierClone\Classes\MailManager.cs,CheckMailThreadFunc,The following statement contains a magic number: try {  	Log.Add ("Checking mailbox...");  	using (var imap = new AE.Net.Mail.ImapClient ("imap.gmail.com"' Settings.Instance.Login' Settings.Instance.Password' AE.Net.Mail.ImapClient.AuthMethods.Login' 993' true)) {  		imap.SelectMailbox ("INBOX");  		const bool headersOnly = false;  		Lazy<MailMessage>[] messages = imap.SearchMessages (SearchCondition.Unseen ()' headersOnly);  		// Run through each message:  		MailManager.Instance.m_notificationsList.Clear ();  		Log.Add ("Total messages fetched: " + messages.Count ());  		var resources = new System.ComponentModel.ComponentResourceManager (typeof(Assets));  		if (messages.Any ()) {  			int messCount = messages.Count ();  			MainForm.Instance.trayIcon.Text = "New mail: " + messCount;  			if (messCount > 0 && messCount <= 9) {  				string icoName = String.Format ("tray_ico_{0}"' messCount);  				MainForm.Instance.trayIcon.Icon = ((System.Drawing.Icon)(resources.GetObject (icoName)));  			}  			else if (messCount > 9) {  				MainForm.Instance.trayIcon.Icon = ((System.Drawing.Icon)(resources.GetObject ("blank_ico_max")));  			}  			else {  				MainForm.Instance.trayIcon.Icon = ((System.Drawing.Icon)(resources.GetObject ("gnotify_2")));  			}  		}  		else {  			MainForm.Instance.trayIcon.Icon = ((System.Drawing.Icon)(resources.GetObject ("gnotify_4")));  			MainForm.Instance.trayIcon.Text = "No unread mail";  		}  		List<string> newMailIdsList = new List<string> ();  		int cnt = 0;  		foreach (Lazy<MailMessage> message in messages) {  			try {  				MailMessage m = message.Value;  				newMailIdsList.Add (m.Uid);  				if (!MailManager.Instance.m_mails.ContainsKey (m.Uid)) {  					Log.Add ("Schedule notification for message with id: " + m.Uid);  					MailManager.Instance.m_mails.Add (m.Uid' m);  					MailManager.Instance.m_notificationsList.Add (m.Uid);  				}  			}  			catch (System.Exception ex) {  				Log.Add (ex);  			}  		}  		// Del from cache viewed messages  		for (int i = MailManager.Instance.m_mails.Count - 1; i >= 0; --i) {  			if (!newMailIdsList.Contains (MailManager.Instance.m_mails.ElementAt (i).Key)) {  				MailManager.Instance.m_mails.Remove (MailManager.Instance.m_mails.ElementAt (i).Key);  			}  		}  	}  	if (!MainForm.IsForegroundWwindowFullScreen ()) {  		ShowNotifications ();  	}  }  catch (Exception e) {  	if (e.Message.Contains ("[AUTHENTICATIONFAILED] Invalid credentials")) {  		Settings.Instance.Password = "";  		Settings.Instance.Save ();  		MainForm.Instance.Invoke ((MethodInvoker)AuthForm.Instance.Show);  	}  	try {  		MainForm.Instance.trayIcon.Text = e.Message.Length > 63 ? e.Message.Substring (0' 63) : e.Message;  		var resources = new System.ComponentModel.ComponentResourceManager (typeof(Assets));  		MainForm.Instance.trayIcon.Icon = ((System.Drawing.Icon)(resources.GetObject ("gnotify_5")));  	}  	catch (Exception ee) {  		Log.Add (ee);  	}  	Log.Add (e);  }  finally {  	m_isCheckInProgress = false;  }  
Magic Number,GmailNotifierClone,MailManager,C:\repos\xy2041_GmailNotifierClone\Classes\MailManager.cs,CheckMailThreadFunc,The following statement contains a magic number: try {  	Log.Add ("Checking mailbox...");  	using (var imap = new AE.Net.Mail.ImapClient ("imap.gmail.com"' Settings.Instance.Login' Settings.Instance.Password' AE.Net.Mail.ImapClient.AuthMethods.Login' 993' true)) {  		imap.SelectMailbox ("INBOX");  		const bool headersOnly = false;  		Lazy<MailMessage>[] messages = imap.SearchMessages (SearchCondition.Unseen ()' headersOnly);  		// Run through each message:  		MailManager.Instance.m_notificationsList.Clear ();  		Log.Add ("Total messages fetched: " + messages.Count ());  		var resources = new System.ComponentModel.ComponentResourceManager (typeof(Assets));  		if (messages.Any ()) {  			int messCount = messages.Count ();  			MainForm.Instance.trayIcon.Text = "New mail: " + messCount;  			if (messCount > 0 && messCount <= 9) {  				string icoName = String.Format ("tray_ico_{0}"' messCount);  				MainForm.Instance.trayIcon.Icon = ((System.Drawing.Icon)(resources.GetObject (icoName)));  			}  			else if (messCount > 9) {  				MainForm.Instance.trayIcon.Icon = ((System.Drawing.Icon)(resources.GetObject ("blank_ico_max")));  			}  			else {  				MainForm.Instance.trayIcon.Icon = ((System.Drawing.Icon)(resources.GetObject ("gnotify_2")));  			}  		}  		else {  			MainForm.Instance.trayIcon.Icon = ((System.Drawing.Icon)(resources.GetObject ("gnotify_4")));  			MainForm.Instance.trayIcon.Text = "No unread mail";  		}  		List<string> newMailIdsList = new List<string> ();  		int cnt = 0;  		foreach (Lazy<MailMessage> message in messages) {  			try {  				MailMessage m = message.Value;  				newMailIdsList.Add (m.Uid);  				if (!MailManager.Instance.m_mails.ContainsKey (m.Uid)) {  					Log.Add ("Schedule notification for message with id: " + m.Uid);  					MailManager.Instance.m_mails.Add (m.Uid' m);  					MailManager.Instance.m_notificationsList.Add (m.Uid);  				}  			}  			catch (System.Exception ex) {  				Log.Add (ex);  			}  		}  		// Del from cache viewed messages  		for (int i = MailManager.Instance.m_mails.Count - 1; i >= 0; --i) {  			if (!newMailIdsList.Contains (MailManager.Instance.m_mails.ElementAt (i).Key)) {  				MailManager.Instance.m_mails.Remove (MailManager.Instance.m_mails.ElementAt (i).Key);  			}  		}  	}  	if (!MainForm.IsForegroundWwindowFullScreen ()) {  		ShowNotifications ();  	}  }  catch (Exception e) {  	if (e.Message.Contains ("[AUTHENTICATIONFAILED] Invalid credentials")) {  		Settings.Instance.Password = "";  		Settings.Instance.Save ();  		MainForm.Instance.Invoke ((MethodInvoker)AuthForm.Instance.Show);  	}  	try {  		MainForm.Instance.trayIcon.Text = e.Message.Length > 63 ? e.Message.Substring (0' 63) : e.Message;  		var resources = new System.ComponentModel.ComponentResourceManager (typeof(Assets));  		MainForm.Instance.trayIcon.Icon = ((System.Drawing.Icon)(resources.GetObject ("gnotify_5")));  	}  	catch (Exception ee) {  		Log.Add (ee);  	}  	Log.Add (e);  }  finally {  	m_isCheckInProgress = false;  }  
Magic Number,GmailNotifierClone,MailManager,C:\repos\xy2041_GmailNotifierClone\Classes\MailManager.cs,CheckMailThreadFunc,The following statement contains a magic number: try {  	Log.Add ("Checking mailbox...");  	using (var imap = new AE.Net.Mail.ImapClient ("imap.gmail.com"' Settings.Instance.Login' Settings.Instance.Password' AE.Net.Mail.ImapClient.AuthMethods.Login' 993' true)) {  		imap.SelectMailbox ("INBOX");  		const bool headersOnly = false;  		Lazy<MailMessage>[] messages = imap.SearchMessages (SearchCondition.Unseen ()' headersOnly);  		// Run through each message:  		MailManager.Instance.m_notificationsList.Clear ();  		Log.Add ("Total messages fetched: " + messages.Count ());  		var resources = new System.ComponentModel.ComponentResourceManager (typeof(Assets));  		if (messages.Any ()) {  			int messCount = messages.Count ();  			MainForm.Instance.trayIcon.Text = "New mail: " + messCount;  			if (messCount > 0 && messCount <= 9) {  				string icoName = String.Format ("tray_ico_{0}"' messCount);  				MainForm.Instance.trayIcon.Icon = ((System.Drawing.Icon)(resources.GetObject (icoName)));  			}  			else if (messCount > 9) {  				MainForm.Instance.trayIcon.Icon = ((System.Drawing.Icon)(resources.GetObject ("blank_ico_max")));  			}  			else {  				MainForm.Instance.trayIcon.Icon = ((System.Drawing.Icon)(resources.GetObject ("gnotify_2")));  			}  		}  		else {  			MainForm.Instance.trayIcon.Icon = ((System.Drawing.Icon)(resources.GetObject ("gnotify_4")));  			MainForm.Instance.trayIcon.Text = "No unread mail";  		}  		List<string> newMailIdsList = new List<string> ();  		int cnt = 0;  		foreach (Lazy<MailMessage> message in messages) {  			try {  				MailMessage m = message.Value;  				newMailIdsList.Add (m.Uid);  				if (!MailManager.Instance.m_mails.ContainsKey (m.Uid)) {  					Log.Add ("Schedule notification for message with id: " + m.Uid);  					MailManager.Instance.m_mails.Add (m.Uid' m);  					MailManager.Instance.m_notificationsList.Add (m.Uid);  				}  			}  			catch (System.Exception ex) {  				Log.Add (ex);  			}  		}  		// Del from cache viewed messages  		for (int i = MailManager.Instance.m_mails.Count - 1; i >= 0; --i) {  			if (!newMailIdsList.Contains (MailManager.Instance.m_mails.ElementAt (i).Key)) {  				MailManager.Instance.m_mails.Remove (MailManager.Instance.m_mails.ElementAt (i).Key);  			}  		}  	}  	if (!MainForm.IsForegroundWwindowFullScreen ()) {  		ShowNotifications ();  	}  }  catch (Exception e) {  	if (e.Message.Contains ("[AUTHENTICATIONFAILED] Invalid credentials")) {  		Settings.Instance.Password = "";  		Settings.Instance.Save ();  		MainForm.Instance.Invoke ((MethodInvoker)AuthForm.Instance.Show);  	}  	try {  		MainForm.Instance.trayIcon.Text = e.Message.Length > 63 ? e.Message.Substring (0' 63) : e.Message;  		var resources = new System.ComponentModel.ComponentResourceManager (typeof(Assets));  		MainForm.Instance.trayIcon.Icon = ((System.Drawing.Icon)(resources.GetObject ("gnotify_5")));  	}  	catch (Exception ee) {  		Log.Add (ee);  	}  	Log.Add (e);  }  finally {  	m_isCheckInProgress = false;  }  
Magic Number,GmailNotifierClone,MailManager,C:\repos\xy2041_GmailNotifierClone\Classes\MailManager.cs,CheckMailThreadFunc,The following statement contains a magic number: using (var imap = new AE.Net.Mail.ImapClient ("imap.gmail.com"' Settings.Instance.Login' Settings.Instance.Password' AE.Net.Mail.ImapClient.AuthMethods.Login' 993' true)) {  	imap.SelectMailbox ("INBOX");  	const bool headersOnly = false;  	Lazy<MailMessage>[] messages = imap.SearchMessages (SearchCondition.Unseen ()' headersOnly);  	// Run through each message:  	MailManager.Instance.m_notificationsList.Clear ();  	Log.Add ("Total messages fetched: " + messages.Count ());  	var resources = new System.ComponentModel.ComponentResourceManager (typeof(Assets));  	if (messages.Any ()) {  		int messCount = messages.Count ();  		MainForm.Instance.trayIcon.Text = "New mail: " + messCount;  		if (messCount > 0 && messCount <= 9) {  			string icoName = String.Format ("tray_ico_{0}"' messCount);  			MainForm.Instance.trayIcon.Icon = ((System.Drawing.Icon)(resources.GetObject (icoName)));  		}  		else if (messCount > 9) {  			MainForm.Instance.trayIcon.Icon = ((System.Drawing.Icon)(resources.GetObject ("blank_ico_max")));  		}  		else {  			MainForm.Instance.trayIcon.Icon = ((System.Drawing.Icon)(resources.GetObject ("gnotify_2")));  		}  	}  	else {  		MainForm.Instance.trayIcon.Icon = ((System.Drawing.Icon)(resources.GetObject ("gnotify_4")));  		MainForm.Instance.trayIcon.Text = "No unread mail";  	}  	List<string> newMailIdsList = new List<string> ();  	int cnt = 0;  	foreach (Lazy<MailMessage> message in messages) {  		try {  			MailMessage m = message.Value;  			newMailIdsList.Add (m.Uid);  			if (!MailManager.Instance.m_mails.ContainsKey (m.Uid)) {  				Log.Add ("Schedule notification for message with id: " + m.Uid);  				MailManager.Instance.m_mails.Add (m.Uid' m);  				MailManager.Instance.m_notificationsList.Add (m.Uid);  			}  		}  		catch (System.Exception ex) {  			Log.Add (ex);  		}  	}  	// Del from cache viewed messages  	for (int i = MailManager.Instance.m_mails.Count - 1; i >= 0; --i) {  		if (!newMailIdsList.Contains (MailManager.Instance.m_mails.ElementAt (i).Key)) {  			MailManager.Instance.m_mails.Remove (MailManager.Instance.m_mails.ElementAt (i).Key);  		}  	}  }  
Magic Number,GmailNotifierClone,MailManager,C:\repos\xy2041_GmailNotifierClone\Classes\MailManager.cs,CheckMailThreadFunc,The following statement contains a magic number: using (var imap = new AE.Net.Mail.ImapClient ("imap.gmail.com"' Settings.Instance.Login' Settings.Instance.Password' AE.Net.Mail.ImapClient.AuthMethods.Login' 993' true)) {  	imap.SelectMailbox ("INBOX");  	const bool headersOnly = false;  	Lazy<MailMessage>[] messages = imap.SearchMessages (SearchCondition.Unseen ()' headersOnly);  	// Run through each message:  	MailManager.Instance.m_notificationsList.Clear ();  	Log.Add ("Total messages fetched: " + messages.Count ());  	var resources = new System.ComponentModel.ComponentResourceManager (typeof(Assets));  	if (messages.Any ()) {  		int messCount = messages.Count ();  		MainForm.Instance.trayIcon.Text = "New mail: " + messCount;  		if (messCount > 0 && messCount <= 9) {  			string icoName = String.Format ("tray_ico_{0}"' messCount);  			MainForm.Instance.trayIcon.Icon = ((System.Drawing.Icon)(resources.GetObject (icoName)));  		}  		else if (messCount > 9) {  			MainForm.Instance.trayIcon.Icon = ((System.Drawing.Icon)(resources.GetObject ("blank_ico_max")));  		}  		else {  			MainForm.Instance.trayIcon.Icon = ((System.Drawing.Icon)(resources.GetObject ("gnotify_2")));  		}  	}  	else {  		MainForm.Instance.trayIcon.Icon = ((System.Drawing.Icon)(resources.GetObject ("gnotify_4")));  		MainForm.Instance.trayIcon.Text = "No unread mail";  	}  	List<string> newMailIdsList = new List<string> ();  	int cnt = 0;  	foreach (Lazy<MailMessage> message in messages) {  		try {  			MailMessage m = message.Value;  			newMailIdsList.Add (m.Uid);  			if (!MailManager.Instance.m_mails.ContainsKey (m.Uid)) {  				Log.Add ("Schedule notification for message with id: " + m.Uid);  				MailManager.Instance.m_mails.Add (m.Uid' m);  				MailManager.Instance.m_notificationsList.Add (m.Uid);  			}  		}  		catch (System.Exception ex) {  			Log.Add (ex);  		}  	}  	// Del from cache viewed messages  	for (int i = MailManager.Instance.m_mails.Count - 1; i >= 0; --i) {  		if (!newMailIdsList.Contains (MailManager.Instance.m_mails.ElementAt (i).Key)) {  			MailManager.Instance.m_mails.Remove (MailManager.Instance.m_mails.ElementAt (i).Key);  		}  	}  }  
Magic Number,GmailNotifierClone,MailManager,C:\repos\xy2041_GmailNotifierClone\Classes\MailManager.cs,CheckMailThreadFunc,The following statement contains a magic number: using (var imap = new AE.Net.Mail.ImapClient ("imap.gmail.com"' Settings.Instance.Login' Settings.Instance.Password' AE.Net.Mail.ImapClient.AuthMethods.Login' 993' true)) {  	imap.SelectMailbox ("INBOX");  	const bool headersOnly = false;  	Lazy<MailMessage>[] messages = imap.SearchMessages (SearchCondition.Unseen ()' headersOnly);  	// Run through each message:  	MailManager.Instance.m_notificationsList.Clear ();  	Log.Add ("Total messages fetched: " + messages.Count ());  	var resources = new System.ComponentModel.ComponentResourceManager (typeof(Assets));  	if (messages.Any ()) {  		int messCount = messages.Count ();  		MainForm.Instance.trayIcon.Text = "New mail: " + messCount;  		if (messCount > 0 && messCount <= 9) {  			string icoName = String.Format ("tray_ico_{0}"' messCount);  			MainForm.Instance.trayIcon.Icon = ((System.Drawing.Icon)(resources.GetObject (icoName)));  		}  		else if (messCount > 9) {  			MainForm.Instance.trayIcon.Icon = ((System.Drawing.Icon)(resources.GetObject ("blank_ico_max")));  		}  		else {  			MainForm.Instance.trayIcon.Icon = ((System.Drawing.Icon)(resources.GetObject ("gnotify_2")));  		}  	}  	else {  		MainForm.Instance.trayIcon.Icon = ((System.Drawing.Icon)(resources.GetObject ("gnotify_4")));  		MainForm.Instance.trayIcon.Text = "No unread mail";  	}  	List<string> newMailIdsList = new List<string> ();  	int cnt = 0;  	foreach (Lazy<MailMessage> message in messages) {  		try {  			MailMessage m = message.Value;  			newMailIdsList.Add (m.Uid);  			if (!MailManager.Instance.m_mails.ContainsKey (m.Uid)) {  				Log.Add ("Schedule notification for message with id: " + m.Uid);  				MailManager.Instance.m_mails.Add (m.Uid' m);  				MailManager.Instance.m_notificationsList.Add (m.Uid);  			}  		}  		catch (System.Exception ex) {  			Log.Add (ex);  		}  	}  	// Del from cache viewed messages  	for (int i = MailManager.Instance.m_mails.Count - 1; i >= 0; --i) {  		if (!newMailIdsList.Contains (MailManager.Instance.m_mails.ElementAt (i).Key)) {  			MailManager.Instance.m_mails.Remove (MailManager.Instance.m_mails.ElementAt (i).Key);  		}  	}  }  
Magic Number,GmailNotifierClone,MailManager,C:\repos\xy2041_GmailNotifierClone\Classes\MailManager.cs,CheckMailThreadFunc,The following statement contains a magic number: if (messages.Any ()) {  	int messCount = messages.Count ();  	MainForm.Instance.trayIcon.Text = "New mail: " + messCount;  	if (messCount > 0 && messCount <= 9) {  		string icoName = String.Format ("tray_ico_{0}"' messCount);  		MainForm.Instance.trayIcon.Icon = ((System.Drawing.Icon)(resources.GetObject (icoName)));  	}  	else if (messCount > 9) {  		MainForm.Instance.trayIcon.Icon = ((System.Drawing.Icon)(resources.GetObject ("blank_ico_max")));  	}  	else {  		MainForm.Instance.trayIcon.Icon = ((System.Drawing.Icon)(resources.GetObject ("gnotify_2")));  	}  }  else {  	MainForm.Instance.trayIcon.Icon = ((System.Drawing.Icon)(resources.GetObject ("gnotify_4")));  	MainForm.Instance.trayIcon.Text = "No unread mail";  }  
Magic Number,GmailNotifierClone,MailManager,C:\repos\xy2041_GmailNotifierClone\Classes\MailManager.cs,CheckMailThreadFunc,The following statement contains a magic number: if (messages.Any ()) {  	int messCount = messages.Count ();  	MainForm.Instance.trayIcon.Text = "New mail: " + messCount;  	if (messCount > 0 && messCount <= 9) {  		string icoName = String.Format ("tray_ico_{0}"' messCount);  		MainForm.Instance.trayIcon.Icon = ((System.Drawing.Icon)(resources.GetObject (icoName)));  	}  	else if (messCount > 9) {  		MainForm.Instance.trayIcon.Icon = ((System.Drawing.Icon)(resources.GetObject ("blank_ico_max")));  	}  	else {  		MainForm.Instance.trayIcon.Icon = ((System.Drawing.Icon)(resources.GetObject ("gnotify_2")));  	}  }  else {  	MainForm.Instance.trayIcon.Icon = ((System.Drawing.Icon)(resources.GetObject ("gnotify_4")));  	MainForm.Instance.trayIcon.Text = "No unread mail";  }  
Magic Number,GmailNotifierClone,MailManager,C:\repos\xy2041_GmailNotifierClone\Classes\MailManager.cs,CheckMailThreadFunc,The following statement contains a magic number: if (messCount > 0 && messCount <= 9) {  	string icoName = String.Format ("tray_ico_{0}"' messCount);  	MainForm.Instance.trayIcon.Icon = ((System.Drawing.Icon)(resources.GetObject (icoName)));  }  else if (messCount > 9) {  	MainForm.Instance.trayIcon.Icon = ((System.Drawing.Icon)(resources.GetObject ("blank_ico_max")));  }  else {  	MainForm.Instance.trayIcon.Icon = ((System.Drawing.Icon)(resources.GetObject ("gnotify_2")));  }  
Magic Number,GmailNotifierClone,MailManager,C:\repos\xy2041_GmailNotifierClone\Classes\MailManager.cs,CheckMailThreadFunc,The following statement contains a magic number: if (messCount > 0 && messCount <= 9) {  	string icoName = String.Format ("tray_ico_{0}"' messCount);  	MainForm.Instance.trayIcon.Icon = ((System.Drawing.Icon)(resources.GetObject (icoName)));  }  else if (messCount > 9) {  	MainForm.Instance.trayIcon.Icon = ((System.Drawing.Icon)(resources.GetObject ("blank_ico_max")));  }  else {  	MainForm.Instance.trayIcon.Icon = ((System.Drawing.Icon)(resources.GetObject ("gnotify_2")));  }  
Magic Number,GmailNotifierClone,MailManager,C:\repos\xy2041_GmailNotifierClone\Classes\MailManager.cs,CheckMailThreadFunc,The following statement contains a magic number: if (messCount > 9) {  	MainForm.Instance.trayIcon.Icon = ((System.Drawing.Icon)(resources.GetObject ("blank_ico_max")));  }  else {  	MainForm.Instance.trayIcon.Icon = ((System.Drawing.Icon)(resources.GetObject ("gnotify_2")));  }  
Magic Number,GmailNotifierClone,MailManager,C:\repos\xy2041_GmailNotifierClone\Classes\MailManager.cs,CheckMailThreadFunc,The following statement contains a magic number: try {  	MainForm.Instance.trayIcon.Text = e.Message.Length > 63 ? e.Message.Substring (0' 63) : e.Message;  	var resources = new System.ComponentModel.ComponentResourceManager (typeof(Assets));  	MainForm.Instance.trayIcon.Icon = ((System.Drawing.Icon)(resources.GetObject ("gnotify_5")));  }  catch (Exception ee) {  	Log.Add (ee);  }  
Magic Number,GmailNotifierClone,MailManager,C:\repos\xy2041_GmailNotifierClone\Classes\MailManager.cs,CheckMailThreadFunc,The following statement contains a magic number: try {  	MainForm.Instance.trayIcon.Text = e.Message.Length > 63 ? e.Message.Substring (0' 63) : e.Message;  	var resources = new System.ComponentModel.ComponentResourceManager (typeof(Assets));  	MainForm.Instance.trayIcon.Icon = ((System.Drawing.Icon)(resources.GetObject ("gnotify_5")));  }  catch (Exception ee) {  	Log.Add (ee);  }  
Magic Number,GmailNotifierClone,MailManager,C:\repos\xy2041_GmailNotifierClone\Classes\MailManager.cs,CheckMailThreadFunc,The following statement contains a magic number: MainForm.Instance.trayIcon.Text = e.Message.Length > 63 ? e.Message.Substring (0' 63) : e.Message;  
Magic Number,GmailNotifierClone,MailManager,C:\repos\xy2041_GmailNotifierClone\Classes\MailManager.cs,CheckMailThreadFunc,The following statement contains a magic number: MainForm.Instance.trayIcon.Text = e.Message.Length > 63 ? e.Message.Substring (0' 63) : e.Message;  
Magic Number,GmailNotifierClone,MailManager,C:\repos\xy2041_GmailNotifierClone\Classes\MailManager.cs,ShowNotifications,The following statement contains a magic number: if (mailCount > 5) {  	index = mailCount - 5 - 1;  }  
Magic Number,GmailNotifierClone,MailManager,C:\repos\xy2041_GmailNotifierClone\Classes\MailManager.cs,ShowNotifications,The following statement contains a magic number: if (mailCount > 5) {  	index = mailCount - 5 - 1;  }  
Magic Number,GmailNotifierClone,MailManager,C:\repos\xy2041_GmailNotifierClone\Classes\MailManager.cs,ShowNotifications,The following statement contains a magic number: index = mailCount - 5 - 1;  
Magic Number,GmailNotifierClone,MailManager,C:\repos\xy2041_GmailNotifierClone\Classes\MailManager.cs,ShowNotifications,The following statement contains a magic number: for (; index < MailManager.Instance.m_notificationsList.Count; index++) {  	var s = MailManager.Instance.m_notificationsList [index];  	Notifier tws = new Notifier (MailManager.Instance.m_mails [s]' index + 1 + offset);  	// Create a thread to execute the task' and then   	// start the thread.  	Thread t = new Thread (new ThreadStart (tws.ThreadProc));  	t.Start ();  	Log.Add ("Wait...");  	Application.DoEvents ();  	Thread.Sleep (5000);  	Application.DoEvents ();  }  
Magic Number,GmailNotifierClone,MailManager,C:\repos\xy2041_GmailNotifierClone\Classes\MailManager.cs,ShowNotifications,The following statement contains a magic number: Thread.Sleep (5000);  
Magic Number,GmailNotifierClone,MailManager,C:\repos\xy2041_GmailNotifierClone\Classes\MailManager.cs,MarkAsRead,The following statement contains a magic number: try {  	using (var imap = new AE.Net.Mail.ImapClient ("imap.gmail.com"' Settings.Instance.Login' Settings.Instance.Password' AE.Net.Mail.ImapClient.AuthMethods.Login' 993' true)) {  		imap.SelectMailbox ("INBOX");  		if (all) {  			foreach (var mailMessage in m_mails) {  				imap.Store ("UID " + mailMessage.Value.Uid' true' "\\Seen");  			}  		}  		else {  			if (m_mails.Count > 0) {  				var lastMail = m_mails.Values.OrderBy (i => i.Date).FirstOrDefault ();  				//var lastMail2 = m_mails.Values.OrderByDescending(i => i.Date).FirstOrDefault();  				imap.Store ("UID " + lastMail.Uid' true' "\\Seen");  			}  		}  	}  }  catch (System.Exception ex) {  	Log.Add (ex);  }  
Magic Number,GmailNotifierClone,MailManager,C:\repos\xy2041_GmailNotifierClone\Classes\MailManager.cs,MarkAsRead,The following statement contains a magic number: using (var imap = new AE.Net.Mail.ImapClient ("imap.gmail.com"' Settings.Instance.Login' Settings.Instance.Password' AE.Net.Mail.ImapClient.AuthMethods.Login' 993' true)) {  	imap.SelectMailbox ("INBOX");  	if (all) {  		foreach (var mailMessage in m_mails) {  			imap.Store ("UID " + mailMessage.Value.Uid' true' "\\Seen");  		}  	}  	else {  		if (m_mails.Count > 0) {  			var lastMail = m_mails.Values.OrderBy (i => i.Date).FirstOrDefault ();  			//var lastMail2 = m_mails.Values.OrderByDescending(i => i.Date).FirstOrDefault();  			imap.Store ("UID " + lastMail.Uid' true' "\\Seen");  		}  	}  }  
Magic Number,GmailNotifierClone,PopupForm,C:\repos\xy2041_GmailNotifierClone\Forms\PopupForm.cs,ScheduleSuicide,The following statement contains a magic number: timerSuicide.Interval = 5000;  
