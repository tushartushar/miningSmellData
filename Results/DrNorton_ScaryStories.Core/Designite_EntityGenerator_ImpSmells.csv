Implementation smell,Namespace,Class,File,Method,Description
Long Method,EntityGenerator.Entities,SqlCeDataSource,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\EntityGenerator\Entities\SqlCeDataSource.cs,GetEntityDefinitions,The method has 111 lines of code.
Complex Method,EntityGenerator.Entities,BuildOptions,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\EntityGenerator\Entities\BuildOptions.cs,Load,Cyclomatic complexity of the method is 8
Complex Method,EntityGenerator.Entities,SQLiteDataSource,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\EntityGenerator\Entities\SQLiteDataSource.cs,GetEntityDefinitions,Cyclomatic complexity of the method is 23
Complex Method,EntityGenerator.Entities,SqlCeDataSource,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\EntityGenerator\Entities\SqlCeDataSource.cs,GetEntityDefinitions,Cyclomatic complexity of the method is 35
Complex Method,EntityGenerator.Services,GeneratorService,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\EntityGenerator\Services\GeneratorService.cs,GenerateCode,Cyclomatic complexity of the method is 9
Complex Method,EntityGenerator.Services,GeneratorService,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\EntityGenerator\Services\GeneratorService.cs,GenerateEntityCreationProxy,Cyclomatic complexity of the method is 43
Complex Method,EntityGenerator.Services,WizardService,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\EntityGenerator\Services\WizardService.cs,Back,Cyclomatic complexity of the method is 14
Complex Method,EntityGenerator.Services,WizardService,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\EntityGenerator\Services\WizardService.cs,Next,Cyclomatic complexity of the method is 15
Complex Method,EntityGenerator.Services,WizardService,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\EntityGenerator\Services\WizardService.cs,SetStep,Cyclomatic complexity of the method is 24
Long Statement,EntityGenerator.Entities,BuildOptions,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\EntityGenerator\Entities\BuildOptions.cs,Save,The length of the statement  "	doc.Add (new XElement (ElementName' new XAttribute (LanguageAttribute' this.Language.ToString ())' new XAttribute (OutputFolderAttribute' this.OutputFolder)' new XAttribute (SourceFolderAttribute' this.SourceFolder)' new XAttribute (NamespaceAttribute' this.EntityNamespace)' new XAttribute (EntityModifierAttribute' this.EntityModifier.ToString ()))); " is 352.
Long Statement,EntityGenerator.Entities,SQLiteDataSource,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\EntityGenerator\Entities\SQLiteDataSource.cs,GetEntityDefinitions,The length of the statement  "					using (var idxcmd = new SQLiteCommand (string.Format ("SELECT sql FROM sqlite_master WHERE type = 'index' AND tbl_name = '{0}'"' info.Entity.NameInStore)' connection)) " is 167.
Long Statement,EntityGenerator.Entities,SQLiteDataSource,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\EntityGenerator\Entities\SQLiteDataSource.cs,GetEntityDefinitions,The length of the statement  "					using (var fkcmd = new SQLiteCommand (String.Format ("PRAGMA foreign_key_list({0})"' info.Entity.NameInStore)' connection)) " is 123.
Long Statement,EntityGenerator.Entities,SqlCeDataSource,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\EntityGenerator\Entities\SqlCeDataSource.cs,GetEntityDefinitions,The length of the statement  "					using (var indexCommand = new SqlCeCommand (string.Format ("SELECT INDEX_NAME' PRIMARY_KEY' COLUMN_NAME' COLLATION FROM INFORMATION_SCHEMA.INDEXES WHERE TABLE_NAME = '{0}'"' info.Entity.NameInStore)' connection)) " is 212.
Long Statement,EntityGenerator.Entities,SqlCeDataSource,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\EntityGenerator\Entities\SqlCeDataSource.cs,GetEntityDefinitions,The length of the statement  "					using (var fieldCommand = new SqlCeCommand (string.Format ("SELECT COLUMN_NAME' COLUMN_HASDEFAULT' IS_NULLABLE' DATA_TYPE' CHARACTER_MAXIMUM_LENGTH' NUMERIC_PRECISION' NUMERIC_SCALE' AUTOINC_SEED FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = '{0}'"' info.Entity.NameInStore)' connection)) { " is 295.
Long Statement,EntityGenerator.Entities,SqlCeDataSource,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\EntityGenerator\Entities\SqlCeDataSource.cs,GetEntityDefinitions,The length of the statement  "					using (var referenceSourceCommand = new SqlCeCommand (string.Format ("SELECT a.Constraint_name' a.TABLE_NAME' b.COLUMN_NAME " + "FROM information_schema.table_constraints AS a " + "INNER JOIN information_schema.KEY_COLUMN_USAGE AS b ON a.CONSTRAINT_NAME = b.CONSTRAINT_NAME " + "WHERE (a.TABLE_NAME = '{0}') AND (a.CONSTRAINT_TYPE = 'FOREIGN KEY')"' info.Entity.NameInStore)' connection)) { " is 390.
Long Statement,EntityGenerator.Entities,SqlCeDataSource,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\EntityGenerator\Entities\SqlCeDataSource.cs,GetEntityDefinitions,The length of the statement  "								using (var referenceTargetCommand = new SqlCeCommand (string.Format ("SELECT a.UNIQUE_CONSTRAINT_TABLE_NAME' b.COLUMN_NAME " + "FROM information_schema.REFERENTIAL_CONSTRAINTS AS a INNER JOIN " + "information_schema.KEY_COLUMN_USAGE AS b ON a.Constraint_name = b.CONSTRAINT_NAME " + "WHERE a.CONSTRAINT_NAME = '{0}'"' constraintName)' connection)) { " is 349.
Long Statement,EntityGenerator.Services,GeneratorService,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\EntityGenerator\Services\GeneratorService.cs,GenerateCode,The length of the statement  "			var entityAttributeDeclaration = new CodeAttributeDeclaration ("Entity"' new CodeAttributeArgument (new CodeSnippetExpression ("KeyScheme." + entity.Entity.KeyScheme.ToString ()))// new CodeAttributeArgument(new CodeSnippetExpression("NameInStore=\"" + entity.Entity.NameInStore + "\"")) " is 287.
Long Statement,EntityGenerator.Services,GeneratorService,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\EntityGenerator\Services\GeneratorService.cs,GenerateCode,The length of the statement  "				prop.GetStatements.Add (new CodeMethodReturnStatement (new CodeFieldReferenceExpression (new CodeThisReferenceExpression ()' backingFieldName))); " is 145.
Long Statement,EntityGenerator.Services,GeneratorService,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\EntityGenerator\Services\GeneratorService.cs,GenerateCode,The length of the statement  "				prop.SetStatements.Add (new CodeAssignStatement (new CodeFieldReferenceExpression (new CodeThisReferenceExpression ()' backingFieldName)' new CodePropertySetValueReferenceExpression ())); " is 187.
Long Statement,EntityGenerator.Services,GeneratorService,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\EntityGenerator\Services\GeneratorService.cs,GenerateCode,The length of the statement  "				prop.GetStatements.Add (new CodeMethodReturnStatement (new CodeFieldReferenceExpression (new CodeThisReferenceExpression ()' backingFieldName))); " is 145.
Long Statement,EntityGenerator.Services,GeneratorService,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\EntityGenerator\Services\GeneratorService.cs,GenerateCode,The length of the statement  "				prop.SetStatements.Add (new CodeAssignStatement (new CodeFieldReferenceExpression (new CodeThisReferenceExpression ()' backingFieldName)' new CodePropertySetValueReferenceExpression ())); " is 187.
Long Statement,EntityGenerator.Services,GeneratorService,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\EntityGenerator\Services\GeneratorService.cs,GenerateEntityCreationProxy,The length of the statement  "	CodeStatement statement = new CodeExpressionStatement (new CodeSnippetExpression (string.Format ("var item = new {0}()"' entity.Entity.NameInStore))); " is 150.
Long Statement,EntityGenerator.Services,GeneratorService,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\EntityGenerator\Services\GeneratorService.cs,GenerateEntityCreationProxy,The length of the statement  "			statement = new CodeExpressionStatement (new CodeSnippetExpression (string.Format ("item.{0} = (value == DBNull.Value) ? {2} : (bool{1})value"' field.FieldName' field.AllowsNulls ? "?" : string.Empty' field.AllowsNulls ? "null" : "false"))); " is 241.
Long Statement,EntityGenerator.Services,GeneratorService,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\EntityGenerator\Services\GeneratorService.cs,GenerateEntityCreationProxy,The length of the statement  "			statement = new CodeExpressionStatement (new CodeSnippetExpression (string.Format ("item.{0} = (value == DBNull.Value) ? (byte{1})0 : (byte{1})value"' field.FieldName' field.AllowsNulls ? "?" : string.Empty))); " is 210.
Long Statement,EntityGenerator.Services,GeneratorService,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\EntityGenerator\Services\GeneratorService.cs,GenerateEntityCreationProxy,The length of the statement  "			statement = new CodeExpressionStatement (new CodeSnippetExpression (string.Format ("item.{0} = (value == DBNull.Value) ? (short{1})0 : (short{1})value"' field.FieldName' field.AllowsNulls ? "?" : string.Empty))); " is 212.
Long Statement,EntityGenerator.Services,GeneratorService,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\EntityGenerator\Services\GeneratorService.cs,GenerateEntityCreationProxy,The length of the statement  "			statement = new CodeExpressionStatement (new CodeSnippetExpression (string.Format ("item.{0} = (value == DBNull.Value) ? 0 : (int{1})value"' field.FieldName' field.AllowsNulls ? "?" : string.Empty))); " is 200.
Long Statement,EntityGenerator.Services,GeneratorService,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\EntityGenerator\Services\GeneratorService.cs,GenerateEntityCreationProxy,The length of the statement  "			statement = new CodeExpressionStatement (new CodeSnippetExpression (string.Format ("item.{0} = (value == DBNull.Value) ? 0 : (long{1})value"' field.FieldName' field.AllowsNulls ? "?" : string.Empty))); " is 201.
Long Statement,EntityGenerator.Services,GeneratorService,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\EntityGenerator\Services\GeneratorService.cs,GenerateEntityCreationProxy,The length of the statement  "			proxy.Statements.Add (new CodeCommentStatement (string.Format ("item.{0} = (value == DBNull.Value) ? {1} : new TimeSpan((long)value);"' field.FieldName' field.AllowsNulls ? "null" : "TimeSpan.MinValue;"))); " is 206.
Long Statement,EntityGenerator.Services,GeneratorService,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\EntityGenerator\Services\GeneratorService.cs,GenerateEntityCreationProxy,The length of the statement  "			statement = new CodeExpressionStatement (new CodeSnippetExpression (string.Format ("item.{0} = (value == DBNull.Value) ? 0 : (float{1})value"' field.FieldName' field.AllowsNulls ? "?" : string.Empty))); " is 202.
Long Statement,EntityGenerator.Services,GeneratorService,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\EntityGenerator\Services\GeneratorService.cs,GenerateEntityCreationProxy,The length of the statement  "			statement = new CodeExpressionStatement (new CodeSnippetExpression (string.Format ("item.{0} = (value == DBNull.Value) ? 0 : (double{1})value"' field.FieldName' field.AllowsNulls ? "?" : string.Empty))); " is 203.
Long Statement,EntityGenerator.Services,GeneratorService,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\EntityGenerator\Services\GeneratorService.cs,GenerateEntityCreationProxy,The length of the statement  "			statement = new CodeExpressionStatement (new CodeSnippetExpression (string.Format ("item.{0} = (value == DBNull.Value) ? 0 : (decimal{1})value"' field.FieldName' field.AllowsNulls ? "?" : string.Empty))); " is 204.
Long Statement,EntityGenerator.Services,GeneratorService,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\EntityGenerator\Services\GeneratorService.cs,GenerateEntityCreationProxy,The length of the statement  "			statement = new CodeExpressionStatement (new CodeSnippetExpression (string.Format ("item.{0} = (value == DBNull.Value) ? null : (string)value"' field.FieldName))); " is 163.
Long Statement,EntityGenerator.Services,GeneratorService,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\EntityGenerator\Services\GeneratorService.cs,GenerateEntityCreationProxy,The length of the statement  "			statement = new CodeExpressionStatement (new CodeSnippetExpression (string.Format ("item.{0} = (value == DBNull.Value) ? null : (Guid{1})value"' field.FieldName' field.AllowsNulls ? "?" : string.Empty))); " is 204.
Long Statement,EntityGenerator.Services,GeneratorService,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\EntityGenerator\Services\GeneratorService.cs,GenerateEntityCreationProxy,The length of the statement  "			statement = new CodeExpressionStatement (new CodeSnippetExpression (string.Format ("item.{0} = (value == DBNull.Value) ? null : (byte[])value"' field.FieldName))); " is 163.
Long Statement,EntityGenerator.Services,GeneratorService,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\EntityGenerator\Services\GeneratorService.cs,GenerateEntityCreationProxy,The length of the statement  "			statement = new CodeExpressionStatement (new CodeSnippetExpression (string.Format ("item.{0} = (value == DBNull.Value) ? null : (DateTime{1})value"' field.FieldName' field.AllowsNulls ? "?" : string.Empty))); " is 208.
Long Statement,EntityGenerator.Services,GeneratorService,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\EntityGenerator\Services\GeneratorService.cs,GenerateEntityCreationProxy,The length of the statement  "			statement = new CodeCommentStatement (string.Format ("Field '{0}' not generated: Unsupported type '{1}'"' field.FieldName' field.DataType)); " is 140.
Long Statement,EntityGenerator.Services,GeneratorService,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\EntityGenerator\Services\GeneratorService.cs,GenerateReferenceArguments,The length of the statement  "	attrList.Add (new CodeAttributeArgument (new CodeSnippetExpression (string.Format ("typeof({0})"' reference.ReferenceTable)))); " is 127.
Long Statement,EntityGenerator.Services,GeneratorService,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\EntityGenerator\Services\GeneratorService.cs,GenerateReferenceArguments,The length of the statement  "	attrList.Add (new CodeAttributeArgument (new CodeSnippetExpression (string.Format ("\"{0}\""' reference.LocalFieldName)))); " is 123.
Long Statement,EntityGenerator.Services,GeneratorService,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\EntityGenerator\Services\GeneratorService.cs,GenerateFieldArguments,The length of the statement  "		attrList.Add (new CodeAttributeArgument (new CodeSnippetExpression ("SearchOrder=FieldSearchOrder." + field.SearchOrder.ToString ()))); " is 135.
Long Statement,EntityGenerator.Services,GeneratorService,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\EntityGenerator\Services\GeneratorService.cs,AddReferencedAssemblies,The length of the statement  "	//if (pathToWCFAssemblies.EndsWith("\\")) pathToWCFAssemblies = pathToWCFAssemblies.Substring(0' pathToWCFAssemblies.Length - 1); " is 129.
Long Statement,EntityGenerator.Services,WizardService,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\EntityGenerator\Services\WizardService.cs,Quit,The length of the statement  "	return (MessageBox.Show ("Exit Wizard?"' "Quit?"' MessageBoxButtons.YesNo' MessageBoxIcon.Question' MessageBoxDefaultButton.Button2) == DialogResult.Yes); " is 154.
Long Statement,EntityGenerator.Views,SelectEntitiesView,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\EntityGenerator\Views\SelectEntitiesView.cs,OnNavigatingToForward,The length of the statement  "				var refNode = new TreeNode (string.Format ("[Reference from {0} to {1}.{2}]"' reference.LocalFieldName' reference.ReferenceTable' reference.RemoteFieldName)); " is 158.
Magic Number,EntityGenerator.Entities,SqlCeDataSource,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\EntityGenerator\Entities\SqlCeDataSource.cs,GetEntityDefinitions,The following statement contains a magic number: using (var connection = new SqlCeConnection (m_connectionString))  	using (var cmd = new SqlCeCommand (GetTablesSQL' connection)) {  		connection.Open ();  		using (var reader = cmd.ExecuteReader ()) {  			while (reader.Read ()) {  				var info = new EntityInfo ();  				var indexInfo = new Dictionary<string' IndexInfo> ();  				info.Entity = new EntityAttribute ();  				info.Entity.NameInStore = reader.GetString (0);  				using (var indexCommand = new SqlCeCommand (string.Format ("SELECT INDEX_NAME' PRIMARY_KEY' COLUMN_NAME' COLLATION FROM INFORMATION_SCHEMA.INDEXES WHERE TABLE_NAME = '{0}'"' info.Entity.NameInStore)' connection))  					using (var indexReader = indexCommand.ExecuteReader ()) {  						while (indexReader.Read ()) {  							var indexName = indexReader.GetString (0);  							var primaryKey = indexReader.GetBoolean (1);  							var columnName = indexReader.GetString (2);  							var sortOrder = indexReader.GetInt16 (3) == 1 ? FieldSearchOrder.Ascending : FieldSearchOrder.Descending;  							// collation of 1 == ascending' 2 == descending (based on a quick test' this might be incorrect)  							// TODO: handle cases where a column is in multiple indexes (ORM doesn't support that scenario for now)  							if (!indexInfo.ContainsKey (columnName)) {  								indexInfo.Add (columnName' new IndexInfo () {  									ColumnName = columnName'  									IndexName = indexName'  									PrimaryKey = primaryKey'  									SearchOrder = sortOrder  								});  							}  						}  					}  				// TODO: look for primary key to set key scheme  				info.Entity.KeyScheme = KeyScheme.None;  				using (var fieldCommand = new SqlCeCommand (string.Format ("SELECT COLUMN_NAME' COLUMN_HASDEFAULT' IS_NULLABLE' DATA_TYPE' CHARACTER_MAXIMUM_LENGTH' NUMERIC_PRECISION' NUMERIC_SCALE' AUTOINC_SEED FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = '{0}'"' info.Entity.NameInStore)' connection)) {  					using (var fieldReader = fieldCommand.ExecuteReader ()) {  						while (fieldReader.Read ()) {  							var field = new FieldAttribute ();  							field.FieldName = fieldReader.GetString (0);  							field.AllowsNulls = string.Compare (fieldReader.GetString (2)' "YES"' true) == 0;  							field.DataType = fieldReader.GetString (3).ParseToDbType ();  							object val = fieldReader [4];  							if (!val.Equals (DBNull.Value)) {  								field.Length = Convert.ToInt32 (val);  							}  							val = fieldReader [5];  							if (!val.Equals (DBNull.Value)) {  								field.Precision = Convert.ToInt32 (val);  							}  							val = fieldReader [6];  							if (!val.Equals (DBNull.Value)) {  								field.Scale = Convert.ToInt32 (val);  							}  							val = fieldReader [7];  							if (!val.Equals (DBNull.Value)) {  								// identity field' so it must be the PK (or part of it)  								info.Entity.KeyScheme = KeyScheme.Identity;  							}  							// check for indexes  							if (indexInfo.ContainsKey (field.FieldName)) {  								var idx = indexInfo [field.FieldName];  								if (idx.PrimaryKey) {  									field.IsPrimaryKey = true;  									if (field.DataType == DbType.Guid) {  										info.Entity.KeyScheme = KeyScheme.GUID;  									}  								}  								field.SearchOrder = idx.SearchOrder;  							}  							// TODO: populate the remainder of the field info  							info.Fields.Add (field);  						}  					}  				}  				// check for references  				using (var referenceSourceCommand = new SqlCeCommand (string.Format ("SELECT a.Constraint_name' a.TABLE_NAME' b.COLUMN_NAME " + "FROM information_schema.table_constraints AS a " + "INNER JOIN information_schema.KEY_COLUMN_USAGE AS b ON a.CONSTRAINT_NAME = b.CONSTRAINT_NAME " + "WHERE (a.TABLE_NAME = '{0}') AND (a.CONSTRAINT_TYPE = 'FOREIGN KEY')"' info.Entity.NameInStore)' connection)) {  					string constraintName = null;  					string localField = null;  					string remoteTable = null;  					string remoteFieldName = null;  					bool referenceExists = false;  					using (var srcReader = referenceSourceCommand.ExecuteReader ()) {  						while (srcReader.Read ()) {  							constraintName = (string)srcReader [0];  							localField = (string)srcReader [2];  							using (var referenceTargetCommand = new SqlCeCommand (string.Format ("SELECT a.UNIQUE_CONSTRAINT_TABLE_NAME' b.COLUMN_NAME " + "FROM information_schema.REFERENTIAL_CONSTRAINTS AS a INNER JOIN " + "information_schema.KEY_COLUMN_USAGE AS b ON a.Constraint_name = b.CONSTRAINT_NAME " + "WHERE a.CONSTRAINT_NAME = '{0}'"' constraintName)' connection)) {  								using (var targetReader = referenceTargetCommand.ExecuteReader ()) {  									while (targetReader.Read ()) {  										remoteTable = (string)targetReader [0];  										remoteFieldName = (string)targetReader [1];  										referenceExists = true;  										break;  									}  								}  							}  						}  					}  					if (referenceExists) {  						var reference = new ReferenceInfo () {  							ReferenceTable = remoteTable'  							LocalFieldName = localField'  							RemoteFieldName = remoteFieldName  						};  						info.References.Add (reference);  					}  				}  				entities.Add (info);  			}  		}  	}  
Magic Number,EntityGenerator.Entities,SqlCeDataSource,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\EntityGenerator\Entities\SqlCeDataSource.cs,GetEntityDefinitions,The following statement contains a magic number: using (var connection = new SqlCeConnection (m_connectionString))  	using (var cmd = new SqlCeCommand (GetTablesSQL' connection)) {  		connection.Open ();  		using (var reader = cmd.ExecuteReader ()) {  			while (reader.Read ()) {  				var info = new EntityInfo ();  				var indexInfo = new Dictionary<string' IndexInfo> ();  				info.Entity = new EntityAttribute ();  				info.Entity.NameInStore = reader.GetString (0);  				using (var indexCommand = new SqlCeCommand (string.Format ("SELECT INDEX_NAME' PRIMARY_KEY' COLUMN_NAME' COLLATION FROM INFORMATION_SCHEMA.INDEXES WHERE TABLE_NAME = '{0}'"' info.Entity.NameInStore)' connection))  					using (var indexReader = indexCommand.ExecuteReader ()) {  						while (indexReader.Read ()) {  							var indexName = indexReader.GetString (0);  							var primaryKey = indexReader.GetBoolean (1);  							var columnName = indexReader.GetString (2);  							var sortOrder = indexReader.GetInt16 (3) == 1 ? FieldSearchOrder.Ascending : FieldSearchOrder.Descending;  							// collation of 1 == ascending' 2 == descending (based on a quick test' this might be incorrect)  							// TODO: handle cases where a column is in multiple indexes (ORM doesn't support that scenario for now)  							if (!indexInfo.ContainsKey (columnName)) {  								indexInfo.Add (columnName' new IndexInfo () {  									ColumnName = columnName'  									IndexName = indexName'  									PrimaryKey = primaryKey'  									SearchOrder = sortOrder  								});  							}  						}  					}  				// TODO: look for primary key to set key scheme  				info.Entity.KeyScheme = KeyScheme.None;  				using (var fieldCommand = new SqlCeCommand (string.Format ("SELECT COLUMN_NAME' COLUMN_HASDEFAULT' IS_NULLABLE' DATA_TYPE' CHARACTER_MAXIMUM_LENGTH' NUMERIC_PRECISION' NUMERIC_SCALE' AUTOINC_SEED FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = '{0}'"' info.Entity.NameInStore)' connection)) {  					using (var fieldReader = fieldCommand.ExecuteReader ()) {  						while (fieldReader.Read ()) {  							var field = new FieldAttribute ();  							field.FieldName = fieldReader.GetString (0);  							field.AllowsNulls = string.Compare (fieldReader.GetString (2)' "YES"' true) == 0;  							field.DataType = fieldReader.GetString (3).ParseToDbType ();  							object val = fieldReader [4];  							if (!val.Equals (DBNull.Value)) {  								field.Length = Convert.ToInt32 (val);  							}  							val = fieldReader [5];  							if (!val.Equals (DBNull.Value)) {  								field.Precision = Convert.ToInt32 (val);  							}  							val = fieldReader [6];  							if (!val.Equals (DBNull.Value)) {  								field.Scale = Convert.ToInt32 (val);  							}  							val = fieldReader [7];  							if (!val.Equals (DBNull.Value)) {  								// identity field' so it must be the PK (or part of it)  								info.Entity.KeyScheme = KeyScheme.Identity;  							}  							// check for indexes  							if (indexInfo.ContainsKey (field.FieldName)) {  								var idx = indexInfo [field.FieldName];  								if (idx.PrimaryKey) {  									field.IsPrimaryKey = true;  									if (field.DataType == DbType.Guid) {  										info.Entity.KeyScheme = KeyScheme.GUID;  									}  								}  								field.SearchOrder = idx.SearchOrder;  							}  							// TODO: populate the remainder of the field info  							info.Fields.Add (field);  						}  					}  				}  				// check for references  				using (var referenceSourceCommand = new SqlCeCommand (string.Format ("SELECT a.Constraint_name' a.TABLE_NAME' b.COLUMN_NAME " + "FROM information_schema.table_constraints AS a " + "INNER JOIN information_schema.KEY_COLUMN_USAGE AS b ON a.CONSTRAINT_NAME = b.CONSTRAINT_NAME " + "WHERE (a.TABLE_NAME = '{0}') AND (a.CONSTRAINT_TYPE = 'FOREIGN KEY')"' info.Entity.NameInStore)' connection)) {  					string constraintName = null;  					string localField = null;  					string remoteTable = null;  					string remoteFieldName = null;  					bool referenceExists = false;  					using (var srcReader = referenceSourceCommand.ExecuteReader ()) {  						while (srcReader.Read ()) {  							constraintName = (string)srcReader [0];  							localField = (string)srcReader [2];  							using (var referenceTargetCommand = new SqlCeCommand (string.Format ("SELECT a.UNIQUE_CONSTRAINT_TABLE_NAME' b.COLUMN_NAME " + "FROM information_schema.REFERENTIAL_CONSTRAINTS AS a INNER JOIN " + "information_schema.KEY_COLUMN_USAGE AS b ON a.Constraint_name = b.CONSTRAINT_NAME " + "WHERE a.CONSTRAINT_NAME = '{0}'"' constraintName)' connection)) {  								using (var targetReader = referenceTargetCommand.ExecuteReader ()) {  									while (targetReader.Read ()) {  										remoteTable = (string)targetReader [0];  										remoteFieldName = (string)targetReader [1];  										referenceExists = true;  										break;  									}  								}  							}  						}  					}  					if (referenceExists) {  						var reference = new ReferenceInfo () {  							ReferenceTable = remoteTable'  							LocalFieldName = localField'  							RemoteFieldName = remoteFieldName  						};  						info.References.Add (reference);  					}  				}  				entities.Add (info);  			}  		}  	}  
Magic Number,EntityGenerator.Entities,SqlCeDataSource,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\EntityGenerator\Entities\SqlCeDataSource.cs,GetEntityDefinitions,The following statement contains a magic number: using (var connection = new SqlCeConnection (m_connectionString))  	using (var cmd = new SqlCeCommand (GetTablesSQL' connection)) {  		connection.Open ();  		using (var reader = cmd.ExecuteReader ()) {  			while (reader.Read ()) {  				var info = new EntityInfo ();  				var indexInfo = new Dictionary<string' IndexInfo> ();  				info.Entity = new EntityAttribute ();  				info.Entity.NameInStore = reader.GetString (0);  				using (var indexCommand = new SqlCeCommand (string.Format ("SELECT INDEX_NAME' PRIMARY_KEY' COLUMN_NAME' COLLATION FROM INFORMATION_SCHEMA.INDEXES WHERE TABLE_NAME = '{0}'"' info.Entity.NameInStore)' connection))  					using (var indexReader = indexCommand.ExecuteReader ()) {  						while (indexReader.Read ()) {  							var indexName = indexReader.GetString (0);  							var primaryKey = indexReader.GetBoolean (1);  							var columnName = indexReader.GetString (2);  							var sortOrder = indexReader.GetInt16 (3) == 1 ? FieldSearchOrder.Ascending : FieldSearchOrder.Descending;  							// collation of 1 == ascending' 2 == descending (based on a quick test' this might be incorrect)  							// TODO: handle cases where a column is in multiple indexes (ORM doesn't support that scenario for now)  							if (!indexInfo.ContainsKey (columnName)) {  								indexInfo.Add (columnName' new IndexInfo () {  									ColumnName = columnName'  									IndexName = indexName'  									PrimaryKey = primaryKey'  									SearchOrder = sortOrder  								});  							}  						}  					}  				// TODO: look for primary key to set key scheme  				info.Entity.KeyScheme = KeyScheme.None;  				using (var fieldCommand = new SqlCeCommand (string.Format ("SELECT COLUMN_NAME' COLUMN_HASDEFAULT' IS_NULLABLE' DATA_TYPE' CHARACTER_MAXIMUM_LENGTH' NUMERIC_PRECISION' NUMERIC_SCALE' AUTOINC_SEED FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = '{0}'"' info.Entity.NameInStore)' connection)) {  					using (var fieldReader = fieldCommand.ExecuteReader ()) {  						while (fieldReader.Read ()) {  							var field = new FieldAttribute ();  							field.FieldName = fieldReader.GetString (0);  							field.AllowsNulls = string.Compare (fieldReader.GetString (2)' "YES"' true) == 0;  							field.DataType = fieldReader.GetString (3).ParseToDbType ();  							object val = fieldReader [4];  							if (!val.Equals (DBNull.Value)) {  								field.Length = Convert.ToInt32 (val);  							}  							val = fieldReader [5];  							if (!val.Equals (DBNull.Value)) {  								field.Precision = Convert.ToInt32 (val);  							}  							val = fieldReader [6];  							if (!val.Equals (DBNull.Value)) {  								field.Scale = Convert.ToInt32 (val);  							}  							val = fieldReader [7];  							if (!val.Equals (DBNull.Value)) {  								// identity field' so it must be the PK (or part of it)  								info.Entity.KeyScheme = KeyScheme.Identity;  							}  							// check for indexes  							if (indexInfo.ContainsKey (field.FieldName)) {  								var idx = indexInfo [field.FieldName];  								if (idx.PrimaryKey) {  									field.IsPrimaryKey = true;  									if (field.DataType == DbType.Guid) {  										info.Entity.KeyScheme = KeyScheme.GUID;  									}  								}  								field.SearchOrder = idx.SearchOrder;  							}  							// TODO: populate the remainder of the field info  							info.Fields.Add (field);  						}  					}  				}  				// check for references  				using (var referenceSourceCommand = new SqlCeCommand (string.Format ("SELECT a.Constraint_name' a.TABLE_NAME' b.COLUMN_NAME " + "FROM information_schema.table_constraints AS a " + "INNER JOIN information_schema.KEY_COLUMN_USAGE AS b ON a.CONSTRAINT_NAME = b.CONSTRAINT_NAME " + "WHERE (a.TABLE_NAME = '{0}') AND (a.CONSTRAINT_TYPE = 'FOREIGN KEY')"' info.Entity.NameInStore)' connection)) {  					string constraintName = null;  					string localField = null;  					string remoteTable = null;  					string remoteFieldName = null;  					bool referenceExists = false;  					using (var srcReader = referenceSourceCommand.ExecuteReader ()) {  						while (srcReader.Read ()) {  							constraintName = (string)srcReader [0];  							localField = (string)srcReader [2];  							using (var referenceTargetCommand = new SqlCeCommand (string.Format ("SELECT a.UNIQUE_CONSTRAINT_TABLE_NAME' b.COLUMN_NAME " + "FROM information_schema.REFERENTIAL_CONSTRAINTS AS a INNER JOIN " + "information_schema.KEY_COLUMN_USAGE AS b ON a.Constraint_name = b.CONSTRAINT_NAME " + "WHERE a.CONSTRAINT_NAME = '{0}'"' constraintName)' connection)) {  								using (var targetReader = referenceTargetCommand.ExecuteReader ()) {  									while (targetReader.Read ()) {  										remoteTable = (string)targetReader [0];  										remoteFieldName = (string)targetReader [1];  										referenceExists = true;  										break;  									}  								}  							}  						}  					}  					if (referenceExists) {  						var reference = new ReferenceInfo () {  							ReferenceTable = remoteTable'  							LocalFieldName = localField'  							RemoteFieldName = remoteFieldName  						};  						info.References.Add (reference);  					}  				}  				entities.Add (info);  			}  		}  	}  
Magic Number,EntityGenerator.Entities,SqlCeDataSource,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\EntityGenerator\Entities\SqlCeDataSource.cs,GetEntityDefinitions,The following statement contains a magic number: using (var connection = new SqlCeConnection (m_connectionString))  	using (var cmd = new SqlCeCommand (GetTablesSQL' connection)) {  		connection.Open ();  		using (var reader = cmd.ExecuteReader ()) {  			while (reader.Read ()) {  				var info = new EntityInfo ();  				var indexInfo = new Dictionary<string' IndexInfo> ();  				info.Entity = new EntityAttribute ();  				info.Entity.NameInStore = reader.GetString (0);  				using (var indexCommand = new SqlCeCommand (string.Format ("SELECT INDEX_NAME' PRIMARY_KEY' COLUMN_NAME' COLLATION FROM INFORMATION_SCHEMA.INDEXES WHERE TABLE_NAME = '{0}'"' info.Entity.NameInStore)' connection))  					using (var indexReader = indexCommand.ExecuteReader ()) {  						while (indexReader.Read ()) {  							var indexName = indexReader.GetString (0);  							var primaryKey = indexReader.GetBoolean (1);  							var columnName = indexReader.GetString (2);  							var sortOrder = indexReader.GetInt16 (3) == 1 ? FieldSearchOrder.Ascending : FieldSearchOrder.Descending;  							// collation of 1 == ascending' 2 == descending (based on a quick test' this might be incorrect)  							// TODO: handle cases where a column is in multiple indexes (ORM doesn't support that scenario for now)  							if (!indexInfo.ContainsKey (columnName)) {  								indexInfo.Add (columnName' new IndexInfo () {  									ColumnName = columnName'  									IndexName = indexName'  									PrimaryKey = primaryKey'  									SearchOrder = sortOrder  								});  							}  						}  					}  				// TODO: look for primary key to set key scheme  				info.Entity.KeyScheme = KeyScheme.None;  				using (var fieldCommand = new SqlCeCommand (string.Format ("SELECT COLUMN_NAME' COLUMN_HASDEFAULT' IS_NULLABLE' DATA_TYPE' CHARACTER_MAXIMUM_LENGTH' NUMERIC_PRECISION' NUMERIC_SCALE' AUTOINC_SEED FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = '{0}'"' info.Entity.NameInStore)' connection)) {  					using (var fieldReader = fieldCommand.ExecuteReader ()) {  						while (fieldReader.Read ()) {  							var field = new FieldAttribute ();  							field.FieldName = fieldReader.GetString (0);  							field.AllowsNulls = string.Compare (fieldReader.GetString (2)' "YES"' true) == 0;  							field.DataType = fieldReader.GetString (3).ParseToDbType ();  							object val = fieldReader [4];  							if (!val.Equals (DBNull.Value)) {  								field.Length = Convert.ToInt32 (val);  							}  							val = fieldReader [5];  							if (!val.Equals (DBNull.Value)) {  								field.Precision = Convert.ToInt32 (val);  							}  							val = fieldReader [6];  							if (!val.Equals (DBNull.Value)) {  								field.Scale = Convert.ToInt32 (val);  							}  							val = fieldReader [7];  							if (!val.Equals (DBNull.Value)) {  								// identity field' so it must be the PK (or part of it)  								info.Entity.KeyScheme = KeyScheme.Identity;  							}  							// check for indexes  							if (indexInfo.ContainsKey (field.FieldName)) {  								var idx = indexInfo [field.FieldName];  								if (idx.PrimaryKey) {  									field.IsPrimaryKey = true;  									if (field.DataType == DbType.Guid) {  										info.Entity.KeyScheme = KeyScheme.GUID;  									}  								}  								field.SearchOrder = idx.SearchOrder;  							}  							// TODO: populate the remainder of the field info  							info.Fields.Add (field);  						}  					}  				}  				// check for references  				using (var referenceSourceCommand = new SqlCeCommand (string.Format ("SELECT a.Constraint_name' a.TABLE_NAME' b.COLUMN_NAME " + "FROM information_schema.table_constraints AS a " + "INNER JOIN information_schema.KEY_COLUMN_USAGE AS b ON a.CONSTRAINT_NAME = b.CONSTRAINT_NAME " + "WHERE (a.TABLE_NAME = '{0}') AND (a.CONSTRAINT_TYPE = 'FOREIGN KEY')"' info.Entity.NameInStore)' connection)) {  					string constraintName = null;  					string localField = null;  					string remoteTable = null;  					string remoteFieldName = null;  					bool referenceExists = false;  					using (var srcReader = referenceSourceCommand.ExecuteReader ()) {  						while (srcReader.Read ()) {  							constraintName = (string)srcReader [0];  							localField = (string)srcReader [2];  							using (var referenceTargetCommand = new SqlCeCommand (string.Format ("SELECT a.UNIQUE_CONSTRAINT_TABLE_NAME' b.COLUMN_NAME " + "FROM information_schema.REFERENTIAL_CONSTRAINTS AS a INNER JOIN " + "information_schema.KEY_COLUMN_USAGE AS b ON a.Constraint_name = b.CONSTRAINT_NAME " + "WHERE a.CONSTRAINT_NAME = '{0}'"' constraintName)' connection)) {  								using (var targetReader = referenceTargetCommand.ExecuteReader ()) {  									while (targetReader.Read ()) {  										remoteTable = (string)targetReader [0];  										remoteFieldName = (string)targetReader [1];  										referenceExists = true;  										break;  									}  								}  							}  						}  					}  					if (referenceExists) {  						var reference = new ReferenceInfo () {  							ReferenceTable = remoteTable'  							LocalFieldName = localField'  							RemoteFieldName = remoteFieldName  						};  						info.References.Add (reference);  					}  				}  				entities.Add (info);  			}  		}  	}  
Magic Number,EntityGenerator.Entities,SqlCeDataSource,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\EntityGenerator\Entities\SqlCeDataSource.cs,GetEntityDefinitions,The following statement contains a magic number: using (var connection = new SqlCeConnection (m_connectionString))  	using (var cmd = new SqlCeCommand (GetTablesSQL' connection)) {  		connection.Open ();  		using (var reader = cmd.ExecuteReader ()) {  			while (reader.Read ()) {  				var info = new EntityInfo ();  				var indexInfo = new Dictionary<string' IndexInfo> ();  				info.Entity = new EntityAttribute ();  				info.Entity.NameInStore = reader.GetString (0);  				using (var indexCommand = new SqlCeCommand (string.Format ("SELECT INDEX_NAME' PRIMARY_KEY' COLUMN_NAME' COLLATION FROM INFORMATION_SCHEMA.INDEXES WHERE TABLE_NAME = '{0}'"' info.Entity.NameInStore)' connection))  					using (var indexReader = indexCommand.ExecuteReader ()) {  						while (indexReader.Read ()) {  							var indexName = indexReader.GetString (0);  							var primaryKey = indexReader.GetBoolean (1);  							var columnName = indexReader.GetString (2);  							var sortOrder = indexReader.GetInt16 (3) == 1 ? FieldSearchOrder.Ascending : FieldSearchOrder.Descending;  							// collation of 1 == ascending' 2 == descending (based on a quick test' this might be incorrect)  							// TODO: handle cases where a column is in multiple indexes (ORM doesn't support that scenario for now)  							if (!indexInfo.ContainsKey (columnName)) {  								indexInfo.Add (columnName' new IndexInfo () {  									ColumnName = columnName'  									IndexName = indexName'  									PrimaryKey = primaryKey'  									SearchOrder = sortOrder  								});  							}  						}  					}  				// TODO: look for primary key to set key scheme  				info.Entity.KeyScheme = KeyScheme.None;  				using (var fieldCommand = new SqlCeCommand (string.Format ("SELECT COLUMN_NAME' COLUMN_HASDEFAULT' IS_NULLABLE' DATA_TYPE' CHARACTER_MAXIMUM_LENGTH' NUMERIC_PRECISION' NUMERIC_SCALE' AUTOINC_SEED FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = '{0}'"' info.Entity.NameInStore)' connection)) {  					using (var fieldReader = fieldCommand.ExecuteReader ()) {  						while (fieldReader.Read ()) {  							var field = new FieldAttribute ();  							field.FieldName = fieldReader.GetString (0);  							field.AllowsNulls = string.Compare (fieldReader.GetString (2)' "YES"' true) == 0;  							field.DataType = fieldReader.GetString (3).ParseToDbType ();  							object val = fieldReader [4];  							if (!val.Equals (DBNull.Value)) {  								field.Length = Convert.ToInt32 (val);  							}  							val = fieldReader [5];  							if (!val.Equals (DBNull.Value)) {  								field.Precision = Convert.ToInt32 (val);  							}  							val = fieldReader [6];  							if (!val.Equals (DBNull.Value)) {  								field.Scale = Convert.ToInt32 (val);  							}  							val = fieldReader [7];  							if (!val.Equals (DBNull.Value)) {  								// identity field' so it must be the PK (or part of it)  								info.Entity.KeyScheme = KeyScheme.Identity;  							}  							// check for indexes  							if (indexInfo.ContainsKey (field.FieldName)) {  								var idx = indexInfo [field.FieldName];  								if (idx.PrimaryKey) {  									field.IsPrimaryKey = true;  									if (field.DataType == DbType.Guid) {  										info.Entity.KeyScheme = KeyScheme.GUID;  									}  								}  								field.SearchOrder = idx.SearchOrder;  							}  							// TODO: populate the remainder of the field info  							info.Fields.Add (field);  						}  					}  				}  				// check for references  				using (var referenceSourceCommand = new SqlCeCommand (string.Format ("SELECT a.Constraint_name' a.TABLE_NAME' b.COLUMN_NAME " + "FROM information_schema.table_constraints AS a " + "INNER JOIN information_schema.KEY_COLUMN_USAGE AS b ON a.CONSTRAINT_NAME = b.CONSTRAINT_NAME " + "WHERE (a.TABLE_NAME = '{0}') AND (a.CONSTRAINT_TYPE = 'FOREIGN KEY')"' info.Entity.NameInStore)' connection)) {  					string constraintName = null;  					string localField = null;  					string remoteTable = null;  					string remoteFieldName = null;  					bool referenceExists = false;  					using (var srcReader = referenceSourceCommand.ExecuteReader ()) {  						while (srcReader.Read ()) {  							constraintName = (string)srcReader [0];  							localField = (string)srcReader [2];  							using (var referenceTargetCommand = new SqlCeCommand (string.Format ("SELECT a.UNIQUE_CONSTRAINT_TABLE_NAME' b.COLUMN_NAME " + "FROM information_schema.REFERENTIAL_CONSTRAINTS AS a INNER JOIN " + "information_schema.KEY_COLUMN_USAGE AS b ON a.Constraint_name = b.CONSTRAINT_NAME " + "WHERE a.CONSTRAINT_NAME = '{0}'"' constraintName)' connection)) {  								using (var targetReader = referenceTargetCommand.ExecuteReader ()) {  									while (targetReader.Read ()) {  										remoteTable = (string)targetReader [0];  										remoteFieldName = (string)targetReader [1];  										referenceExists = true;  										break;  									}  								}  							}  						}  					}  					if (referenceExists) {  						var reference = new ReferenceInfo () {  							ReferenceTable = remoteTable'  							LocalFieldName = localField'  							RemoteFieldName = remoteFieldName  						};  						info.References.Add (reference);  					}  				}  				entities.Add (info);  			}  		}  	}  
Magic Number,EntityGenerator.Entities,SqlCeDataSource,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\EntityGenerator\Entities\SqlCeDataSource.cs,GetEntityDefinitions,The following statement contains a magic number: using (var connection = new SqlCeConnection (m_connectionString))  	using (var cmd = new SqlCeCommand (GetTablesSQL' connection)) {  		connection.Open ();  		using (var reader = cmd.ExecuteReader ()) {  			while (reader.Read ()) {  				var info = new EntityInfo ();  				var indexInfo = new Dictionary<string' IndexInfo> ();  				info.Entity = new EntityAttribute ();  				info.Entity.NameInStore = reader.GetString (0);  				using (var indexCommand = new SqlCeCommand (string.Format ("SELECT INDEX_NAME' PRIMARY_KEY' COLUMN_NAME' COLLATION FROM INFORMATION_SCHEMA.INDEXES WHERE TABLE_NAME = '{0}'"' info.Entity.NameInStore)' connection))  					using (var indexReader = indexCommand.ExecuteReader ()) {  						while (indexReader.Read ()) {  							var indexName = indexReader.GetString (0);  							var primaryKey = indexReader.GetBoolean (1);  							var columnName = indexReader.GetString (2);  							var sortOrder = indexReader.GetInt16 (3) == 1 ? FieldSearchOrder.Ascending : FieldSearchOrder.Descending;  							// collation of 1 == ascending' 2 == descending (based on a quick test' this might be incorrect)  							// TODO: handle cases where a column is in multiple indexes (ORM doesn't support that scenario for now)  							if (!indexInfo.ContainsKey (columnName)) {  								indexInfo.Add (columnName' new IndexInfo () {  									ColumnName = columnName'  									IndexName = indexName'  									PrimaryKey = primaryKey'  									SearchOrder = sortOrder  								});  							}  						}  					}  				// TODO: look for primary key to set key scheme  				info.Entity.KeyScheme = KeyScheme.None;  				using (var fieldCommand = new SqlCeCommand (string.Format ("SELECT COLUMN_NAME' COLUMN_HASDEFAULT' IS_NULLABLE' DATA_TYPE' CHARACTER_MAXIMUM_LENGTH' NUMERIC_PRECISION' NUMERIC_SCALE' AUTOINC_SEED FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = '{0}'"' info.Entity.NameInStore)' connection)) {  					using (var fieldReader = fieldCommand.ExecuteReader ()) {  						while (fieldReader.Read ()) {  							var field = new FieldAttribute ();  							field.FieldName = fieldReader.GetString (0);  							field.AllowsNulls = string.Compare (fieldReader.GetString (2)' "YES"' true) == 0;  							field.DataType = fieldReader.GetString (3).ParseToDbType ();  							object val = fieldReader [4];  							if (!val.Equals (DBNull.Value)) {  								field.Length = Convert.ToInt32 (val);  							}  							val = fieldReader [5];  							if (!val.Equals (DBNull.Value)) {  								field.Precision = Convert.ToInt32 (val);  							}  							val = fieldReader [6];  							if (!val.Equals (DBNull.Value)) {  								field.Scale = Convert.ToInt32 (val);  							}  							val = fieldReader [7];  							if (!val.Equals (DBNull.Value)) {  								// identity field' so it must be the PK (or part of it)  								info.Entity.KeyScheme = KeyScheme.Identity;  							}  							// check for indexes  							if (indexInfo.ContainsKey (field.FieldName)) {  								var idx = indexInfo [field.FieldName];  								if (idx.PrimaryKey) {  									field.IsPrimaryKey = true;  									if (field.DataType == DbType.Guid) {  										info.Entity.KeyScheme = KeyScheme.GUID;  									}  								}  								field.SearchOrder = idx.SearchOrder;  							}  							// TODO: populate the remainder of the field info  							info.Fields.Add (field);  						}  					}  				}  				// check for references  				using (var referenceSourceCommand = new SqlCeCommand (string.Format ("SELECT a.Constraint_name' a.TABLE_NAME' b.COLUMN_NAME " + "FROM information_schema.table_constraints AS a " + "INNER JOIN information_schema.KEY_COLUMN_USAGE AS b ON a.CONSTRAINT_NAME = b.CONSTRAINT_NAME " + "WHERE (a.TABLE_NAME = '{0}') AND (a.CONSTRAINT_TYPE = 'FOREIGN KEY')"' info.Entity.NameInStore)' connection)) {  					string constraintName = null;  					string localField = null;  					string remoteTable = null;  					string remoteFieldName = null;  					bool referenceExists = false;  					using (var srcReader = referenceSourceCommand.ExecuteReader ()) {  						while (srcReader.Read ()) {  							constraintName = (string)srcReader [0];  							localField = (string)srcReader [2];  							using (var referenceTargetCommand = new SqlCeCommand (string.Format ("SELECT a.UNIQUE_CONSTRAINT_TABLE_NAME' b.COLUMN_NAME " + "FROM information_schema.REFERENTIAL_CONSTRAINTS AS a INNER JOIN " + "information_schema.KEY_COLUMN_USAGE AS b ON a.Constraint_name = b.CONSTRAINT_NAME " + "WHERE a.CONSTRAINT_NAME = '{0}'"' constraintName)' connection)) {  								using (var targetReader = referenceTargetCommand.ExecuteReader ()) {  									while (targetReader.Read ()) {  										remoteTable = (string)targetReader [0];  										remoteFieldName = (string)targetReader [1];  										referenceExists = true;  										break;  									}  								}  							}  						}  					}  					if (referenceExists) {  						var reference = new ReferenceInfo () {  							ReferenceTable = remoteTable'  							LocalFieldName = localField'  							RemoteFieldName = remoteFieldName  						};  						info.References.Add (reference);  					}  				}  				entities.Add (info);  			}  		}  	}  
Magic Number,EntityGenerator.Entities,SqlCeDataSource,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\EntityGenerator\Entities\SqlCeDataSource.cs,GetEntityDefinitions,The following statement contains a magic number: using (var connection = new SqlCeConnection (m_connectionString))  	using (var cmd = new SqlCeCommand (GetTablesSQL' connection)) {  		connection.Open ();  		using (var reader = cmd.ExecuteReader ()) {  			while (reader.Read ()) {  				var info = new EntityInfo ();  				var indexInfo = new Dictionary<string' IndexInfo> ();  				info.Entity = new EntityAttribute ();  				info.Entity.NameInStore = reader.GetString (0);  				using (var indexCommand = new SqlCeCommand (string.Format ("SELECT INDEX_NAME' PRIMARY_KEY' COLUMN_NAME' COLLATION FROM INFORMATION_SCHEMA.INDEXES WHERE TABLE_NAME = '{0}'"' info.Entity.NameInStore)' connection))  					using (var indexReader = indexCommand.ExecuteReader ()) {  						while (indexReader.Read ()) {  							var indexName = indexReader.GetString (0);  							var primaryKey = indexReader.GetBoolean (1);  							var columnName = indexReader.GetString (2);  							var sortOrder = indexReader.GetInt16 (3) == 1 ? FieldSearchOrder.Ascending : FieldSearchOrder.Descending;  							// collation of 1 == ascending' 2 == descending (based on a quick test' this might be incorrect)  							// TODO: handle cases where a column is in multiple indexes (ORM doesn't support that scenario for now)  							if (!indexInfo.ContainsKey (columnName)) {  								indexInfo.Add (columnName' new IndexInfo () {  									ColumnName = columnName'  									IndexName = indexName'  									PrimaryKey = primaryKey'  									SearchOrder = sortOrder  								});  							}  						}  					}  				// TODO: look for primary key to set key scheme  				info.Entity.KeyScheme = KeyScheme.None;  				using (var fieldCommand = new SqlCeCommand (string.Format ("SELECT COLUMN_NAME' COLUMN_HASDEFAULT' IS_NULLABLE' DATA_TYPE' CHARACTER_MAXIMUM_LENGTH' NUMERIC_PRECISION' NUMERIC_SCALE' AUTOINC_SEED FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = '{0}'"' info.Entity.NameInStore)' connection)) {  					using (var fieldReader = fieldCommand.ExecuteReader ()) {  						while (fieldReader.Read ()) {  							var field = new FieldAttribute ();  							field.FieldName = fieldReader.GetString (0);  							field.AllowsNulls = string.Compare (fieldReader.GetString (2)' "YES"' true) == 0;  							field.DataType = fieldReader.GetString (3).ParseToDbType ();  							object val = fieldReader [4];  							if (!val.Equals (DBNull.Value)) {  								field.Length = Convert.ToInt32 (val);  							}  							val = fieldReader [5];  							if (!val.Equals (DBNull.Value)) {  								field.Precision = Convert.ToInt32 (val);  							}  							val = fieldReader [6];  							if (!val.Equals (DBNull.Value)) {  								field.Scale = Convert.ToInt32 (val);  							}  							val = fieldReader [7];  							if (!val.Equals (DBNull.Value)) {  								// identity field' so it must be the PK (or part of it)  								info.Entity.KeyScheme = KeyScheme.Identity;  							}  							// check for indexes  							if (indexInfo.ContainsKey (field.FieldName)) {  								var idx = indexInfo [field.FieldName];  								if (idx.PrimaryKey) {  									field.IsPrimaryKey = true;  									if (field.DataType == DbType.Guid) {  										info.Entity.KeyScheme = KeyScheme.GUID;  									}  								}  								field.SearchOrder = idx.SearchOrder;  							}  							// TODO: populate the remainder of the field info  							info.Fields.Add (field);  						}  					}  				}  				// check for references  				using (var referenceSourceCommand = new SqlCeCommand (string.Format ("SELECT a.Constraint_name' a.TABLE_NAME' b.COLUMN_NAME " + "FROM information_schema.table_constraints AS a " + "INNER JOIN information_schema.KEY_COLUMN_USAGE AS b ON a.CONSTRAINT_NAME = b.CONSTRAINT_NAME " + "WHERE (a.TABLE_NAME = '{0}') AND (a.CONSTRAINT_TYPE = 'FOREIGN KEY')"' info.Entity.NameInStore)' connection)) {  					string constraintName = null;  					string localField = null;  					string remoteTable = null;  					string remoteFieldName = null;  					bool referenceExists = false;  					using (var srcReader = referenceSourceCommand.ExecuteReader ()) {  						while (srcReader.Read ()) {  							constraintName = (string)srcReader [0];  							localField = (string)srcReader [2];  							using (var referenceTargetCommand = new SqlCeCommand (string.Format ("SELECT a.UNIQUE_CONSTRAINT_TABLE_NAME' b.COLUMN_NAME " + "FROM information_schema.REFERENTIAL_CONSTRAINTS AS a INNER JOIN " + "information_schema.KEY_COLUMN_USAGE AS b ON a.Constraint_name = b.CONSTRAINT_NAME " + "WHERE a.CONSTRAINT_NAME = '{0}'"' constraintName)' connection)) {  								using (var targetReader = referenceTargetCommand.ExecuteReader ()) {  									while (targetReader.Read ()) {  										remoteTable = (string)targetReader [0];  										remoteFieldName = (string)targetReader [1];  										referenceExists = true;  										break;  									}  								}  							}  						}  					}  					if (referenceExists) {  						var reference = new ReferenceInfo () {  							ReferenceTable = remoteTable'  							LocalFieldName = localField'  							RemoteFieldName = remoteFieldName  						};  						info.References.Add (reference);  					}  				}  				entities.Add (info);  			}  		}  	}  
Magic Number,EntityGenerator.Entities,SqlCeDataSource,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\EntityGenerator\Entities\SqlCeDataSource.cs,GetEntityDefinitions,The following statement contains a magic number: using (var connection = new SqlCeConnection (m_connectionString))  	using (var cmd = new SqlCeCommand (GetTablesSQL' connection)) {  		connection.Open ();  		using (var reader = cmd.ExecuteReader ()) {  			while (reader.Read ()) {  				var info = new EntityInfo ();  				var indexInfo = new Dictionary<string' IndexInfo> ();  				info.Entity = new EntityAttribute ();  				info.Entity.NameInStore = reader.GetString (0);  				using (var indexCommand = new SqlCeCommand (string.Format ("SELECT INDEX_NAME' PRIMARY_KEY' COLUMN_NAME' COLLATION FROM INFORMATION_SCHEMA.INDEXES WHERE TABLE_NAME = '{0}'"' info.Entity.NameInStore)' connection))  					using (var indexReader = indexCommand.ExecuteReader ()) {  						while (indexReader.Read ()) {  							var indexName = indexReader.GetString (0);  							var primaryKey = indexReader.GetBoolean (1);  							var columnName = indexReader.GetString (2);  							var sortOrder = indexReader.GetInt16 (3) == 1 ? FieldSearchOrder.Ascending : FieldSearchOrder.Descending;  							// collation of 1 == ascending' 2 == descending (based on a quick test' this might be incorrect)  							// TODO: handle cases where a column is in multiple indexes (ORM doesn't support that scenario for now)  							if (!indexInfo.ContainsKey (columnName)) {  								indexInfo.Add (columnName' new IndexInfo () {  									ColumnName = columnName'  									IndexName = indexName'  									PrimaryKey = primaryKey'  									SearchOrder = sortOrder  								});  							}  						}  					}  				// TODO: look for primary key to set key scheme  				info.Entity.KeyScheme = KeyScheme.None;  				using (var fieldCommand = new SqlCeCommand (string.Format ("SELECT COLUMN_NAME' COLUMN_HASDEFAULT' IS_NULLABLE' DATA_TYPE' CHARACTER_MAXIMUM_LENGTH' NUMERIC_PRECISION' NUMERIC_SCALE' AUTOINC_SEED FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = '{0}'"' info.Entity.NameInStore)' connection)) {  					using (var fieldReader = fieldCommand.ExecuteReader ()) {  						while (fieldReader.Read ()) {  							var field = new FieldAttribute ();  							field.FieldName = fieldReader.GetString (0);  							field.AllowsNulls = string.Compare (fieldReader.GetString (2)' "YES"' true) == 0;  							field.DataType = fieldReader.GetString (3).ParseToDbType ();  							object val = fieldReader [4];  							if (!val.Equals (DBNull.Value)) {  								field.Length = Convert.ToInt32 (val);  							}  							val = fieldReader [5];  							if (!val.Equals (DBNull.Value)) {  								field.Precision = Convert.ToInt32 (val);  							}  							val = fieldReader [6];  							if (!val.Equals (DBNull.Value)) {  								field.Scale = Convert.ToInt32 (val);  							}  							val = fieldReader [7];  							if (!val.Equals (DBNull.Value)) {  								// identity field' so it must be the PK (or part of it)  								info.Entity.KeyScheme = KeyScheme.Identity;  							}  							// check for indexes  							if (indexInfo.ContainsKey (field.FieldName)) {  								var idx = indexInfo [field.FieldName];  								if (idx.PrimaryKey) {  									field.IsPrimaryKey = true;  									if (field.DataType == DbType.Guid) {  										info.Entity.KeyScheme = KeyScheme.GUID;  									}  								}  								field.SearchOrder = idx.SearchOrder;  							}  							// TODO: populate the remainder of the field info  							info.Fields.Add (field);  						}  					}  				}  				// check for references  				using (var referenceSourceCommand = new SqlCeCommand (string.Format ("SELECT a.Constraint_name' a.TABLE_NAME' b.COLUMN_NAME " + "FROM information_schema.table_constraints AS a " + "INNER JOIN information_schema.KEY_COLUMN_USAGE AS b ON a.CONSTRAINT_NAME = b.CONSTRAINT_NAME " + "WHERE (a.TABLE_NAME = '{0}') AND (a.CONSTRAINT_TYPE = 'FOREIGN KEY')"' info.Entity.NameInStore)' connection)) {  					string constraintName = null;  					string localField = null;  					string remoteTable = null;  					string remoteFieldName = null;  					bool referenceExists = false;  					using (var srcReader = referenceSourceCommand.ExecuteReader ()) {  						while (srcReader.Read ()) {  							constraintName = (string)srcReader [0];  							localField = (string)srcReader [2];  							using (var referenceTargetCommand = new SqlCeCommand (string.Format ("SELECT a.UNIQUE_CONSTRAINT_TABLE_NAME' b.COLUMN_NAME " + "FROM information_schema.REFERENTIAL_CONSTRAINTS AS a INNER JOIN " + "information_schema.KEY_COLUMN_USAGE AS b ON a.Constraint_name = b.CONSTRAINT_NAME " + "WHERE a.CONSTRAINT_NAME = '{0}'"' constraintName)' connection)) {  								using (var targetReader = referenceTargetCommand.ExecuteReader ()) {  									while (targetReader.Read ()) {  										remoteTable = (string)targetReader [0];  										remoteFieldName = (string)targetReader [1];  										referenceExists = true;  										break;  									}  								}  							}  						}  					}  					if (referenceExists) {  						var reference = new ReferenceInfo () {  							ReferenceTable = remoteTable'  							LocalFieldName = localField'  							RemoteFieldName = remoteFieldName  						};  						info.References.Add (reference);  					}  				}  				entities.Add (info);  			}  		}  	}  
Magic Number,EntityGenerator.Entities,SqlCeDataSource,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\EntityGenerator\Entities\SqlCeDataSource.cs,GetEntityDefinitions,The following statement contains a magic number: using (var connection = new SqlCeConnection (m_connectionString))  	using (var cmd = new SqlCeCommand (GetTablesSQL' connection)) {  		connection.Open ();  		using (var reader = cmd.ExecuteReader ()) {  			while (reader.Read ()) {  				var info = new EntityInfo ();  				var indexInfo = new Dictionary<string' IndexInfo> ();  				info.Entity = new EntityAttribute ();  				info.Entity.NameInStore = reader.GetString (0);  				using (var indexCommand = new SqlCeCommand (string.Format ("SELECT INDEX_NAME' PRIMARY_KEY' COLUMN_NAME' COLLATION FROM INFORMATION_SCHEMA.INDEXES WHERE TABLE_NAME = '{0}'"' info.Entity.NameInStore)' connection))  					using (var indexReader = indexCommand.ExecuteReader ()) {  						while (indexReader.Read ()) {  							var indexName = indexReader.GetString (0);  							var primaryKey = indexReader.GetBoolean (1);  							var columnName = indexReader.GetString (2);  							var sortOrder = indexReader.GetInt16 (3) == 1 ? FieldSearchOrder.Ascending : FieldSearchOrder.Descending;  							// collation of 1 == ascending' 2 == descending (based on a quick test' this might be incorrect)  							// TODO: handle cases where a column is in multiple indexes (ORM doesn't support that scenario for now)  							if (!indexInfo.ContainsKey (columnName)) {  								indexInfo.Add (columnName' new IndexInfo () {  									ColumnName = columnName'  									IndexName = indexName'  									PrimaryKey = primaryKey'  									SearchOrder = sortOrder  								});  							}  						}  					}  				// TODO: look for primary key to set key scheme  				info.Entity.KeyScheme = KeyScheme.None;  				using (var fieldCommand = new SqlCeCommand (string.Format ("SELECT COLUMN_NAME' COLUMN_HASDEFAULT' IS_NULLABLE' DATA_TYPE' CHARACTER_MAXIMUM_LENGTH' NUMERIC_PRECISION' NUMERIC_SCALE' AUTOINC_SEED FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = '{0}'"' info.Entity.NameInStore)' connection)) {  					using (var fieldReader = fieldCommand.ExecuteReader ()) {  						while (fieldReader.Read ()) {  							var field = new FieldAttribute ();  							field.FieldName = fieldReader.GetString (0);  							field.AllowsNulls = string.Compare (fieldReader.GetString (2)' "YES"' true) == 0;  							field.DataType = fieldReader.GetString (3).ParseToDbType ();  							object val = fieldReader [4];  							if (!val.Equals (DBNull.Value)) {  								field.Length = Convert.ToInt32 (val);  							}  							val = fieldReader [5];  							if (!val.Equals (DBNull.Value)) {  								field.Precision = Convert.ToInt32 (val);  							}  							val = fieldReader [6];  							if (!val.Equals (DBNull.Value)) {  								field.Scale = Convert.ToInt32 (val);  							}  							val = fieldReader [7];  							if (!val.Equals (DBNull.Value)) {  								// identity field' so it must be the PK (or part of it)  								info.Entity.KeyScheme = KeyScheme.Identity;  							}  							// check for indexes  							if (indexInfo.ContainsKey (field.FieldName)) {  								var idx = indexInfo [field.FieldName];  								if (idx.PrimaryKey) {  									field.IsPrimaryKey = true;  									if (field.DataType == DbType.Guid) {  										info.Entity.KeyScheme = KeyScheme.GUID;  									}  								}  								field.SearchOrder = idx.SearchOrder;  							}  							// TODO: populate the remainder of the field info  							info.Fields.Add (field);  						}  					}  				}  				// check for references  				using (var referenceSourceCommand = new SqlCeCommand (string.Format ("SELECT a.Constraint_name' a.TABLE_NAME' b.COLUMN_NAME " + "FROM information_schema.table_constraints AS a " + "INNER JOIN information_schema.KEY_COLUMN_USAGE AS b ON a.CONSTRAINT_NAME = b.CONSTRAINT_NAME " + "WHERE (a.TABLE_NAME = '{0}') AND (a.CONSTRAINT_TYPE = 'FOREIGN KEY')"' info.Entity.NameInStore)' connection)) {  					string constraintName = null;  					string localField = null;  					string remoteTable = null;  					string remoteFieldName = null;  					bool referenceExists = false;  					using (var srcReader = referenceSourceCommand.ExecuteReader ()) {  						while (srcReader.Read ()) {  							constraintName = (string)srcReader [0];  							localField = (string)srcReader [2];  							using (var referenceTargetCommand = new SqlCeCommand (string.Format ("SELECT a.UNIQUE_CONSTRAINT_TABLE_NAME' b.COLUMN_NAME " + "FROM information_schema.REFERENTIAL_CONSTRAINTS AS a INNER JOIN " + "information_schema.KEY_COLUMN_USAGE AS b ON a.Constraint_name = b.CONSTRAINT_NAME " + "WHERE a.CONSTRAINT_NAME = '{0}'"' constraintName)' connection)) {  								using (var targetReader = referenceTargetCommand.ExecuteReader ()) {  									while (targetReader.Read ()) {  										remoteTable = (string)targetReader [0];  										remoteFieldName = (string)targetReader [1];  										referenceExists = true;  										break;  									}  								}  							}  						}  					}  					if (referenceExists) {  						var reference = new ReferenceInfo () {  							ReferenceTable = remoteTable'  							LocalFieldName = localField'  							RemoteFieldName = remoteFieldName  						};  						info.References.Add (reference);  					}  				}  				entities.Add (info);  			}  		}  	}  
Magic Number,EntityGenerator.Entities,SqlCeDataSource,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\EntityGenerator\Entities\SqlCeDataSource.cs,GetEntityDefinitions,The following statement contains a magic number: using (var cmd = new SqlCeCommand (GetTablesSQL' connection)) {  	connection.Open ();  	using (var reader = cmd.ExecuteReader ()) {  		while (reader.Read ()) {  			var info = new EntityInfo ();  			var indexInfo = new Dictionary<string' IndexInfo> ();  			info.Entity = new EntityAttribute ();  			info.Entity.NameInStore = reader.GetString (0);  			using (var indexCommand = new SqlCeCommand (string.Format ("SELECT INDEX_NAME' PRIMARY_KEY' COLUMN_NAME' COLLATION FROM INFORMATION_SCHEMA.INDEXES WHERE TABLE_NAME = '{0}'"' info.Entity.NameInStore)' connection))  				using (var indexReader = indexCommand.ExecuteReader ()) {  					while (indexReader.Read ()) {  						var indexName = indexReader.GetString (0);  						var primaryKey = indexReader.GetBoolean (1);  						var columnName = indexReader.GetString (2);  						var sortOrder = indexReader.GetInt16 (3) == 1 ? FieldSearchOrder.Ascending : FieldSearchOrder.Descending;  						// collation of 1 == ascending' 2 == descending (based on a quick test' this might be incorrect)  						// TODO: handle cases where a column is in multiple indexes (ORM doesn't support that scenario for now)  						if (!indexInfo.ContainsKey (columnName)) {  							indexInfo.Add (columnName' new IndexInfo () {  								ColumnName = columnName'  								IndexName = indexName'  								PrimaryKey = primaryKey'  								SearchOrder = sortOrder  							});  						}  					}  				}  			// TODO: look for primary key to set key scheme  			info.Entity.KeyScheme = KeyScheme.None;  			using (var fieldCommand = new SqlCeCommand (string.Format ("SELECT COLUMN_NAME' COLUMN_HASDEFAULT' IS_NULLABLE' DATA_TYPE' CHARACTER_MAXIMUM_LENGTH' NUMERIC_PRECISION' NUMERIC_SCALE' AUTOINC_SEED FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = '{0}'"' info.Entity.NameInStore)' connection)) {  				using (var fieldReader = fieldCommand.ExecuteReader ()) {  					while (fieldReader.Read ()) {  						var field = new FieldAttribute ();  						field.FieldName = fieldReader.GetString (0);  						field.AllowsNulls = string.Compare (fieldReader.GetString (2)' "YES"' true) == 0;  						field.DataType = fieldReader.GetString (3).ParseToDbType ();  						object val = fieldReader [4];  						if (!val.Equals (DBNull.Value)) {  							field.Length = Convert.ToInt32 (val);  						}  						val = fieldReader [5];  						if (!val.Equals (DBNull.Value)) {  							field.Precision = Convert.ToInt32 (val);  						}  						val = fieldReader [6];  						if (!val.Equals (DBNull.Value)) {  							field.Scale = Convert.ToInt32 (val);  						}  						val = fieldReader [7];  						if (!val.Equals (DBNull.Value)) {  							// identity field' so it must be the PK (or part of it)  							info.Entity.KeyScheme = KeyScheme.Identity;  						}  						// check for indexes  						if (indexInfo.ContainsKey (field.FieldName)) {  							var idx = indexInfo [field.FieldName];  							if (idx.PrimaryKey) {  								field.IsPrimaryKey = true;  								if (field.DataType == DbType.Guid) {  									info.Entity.KeyScheme = KeyScheme.GUID;  								}  							}  							field.SearchOrder = idx.SearchOrder;  						}  						// TODO: populate the remainder of the field info  						info.Fields.Add (field);  					}  				}  			}  			// check for references  			using (var referenceSourceCommand = new SqlCeCommand (string.Format ("SELECT a.Constraint_name' a.TABLE_NAME' b.COLUMN_NAME " + "FROM information_schema.table_constraints AS a " + "INNER JOIN information_schema.KEY_COLUMN_USAGE AS b ON a.CONSTRAINT_NAME = b.CONSTRAINT_NAME " + "WHERE (a.TABLE_NAME = '{0}') AND (a.CONSTRAINT_TYPE = 'FOREIGN KEY')"' info.Entity.NameInStore)' connection)) {  				string constraintName = null;  				string localField = null;  				string remoteTable = null;  				string remoteFieldName = null;  				bool referenceExists = false;  				using (var srcReader = referenceSourceCommand.ExecuteReader ()) {  					while (srcReader.Read ()) {  						constraintName = (string)srcReader [0];  						localField = (string)srcReader [2];  						using (var referenceTargetCommand = new SqlCeCommand (string.Format ("SELECT a.UNIQUE_CONSTRAINT_TABLE_NAME' b.COLUMN_NAME " + "FROM information_schema.REFERENTIAL_CONSTRAINTS AS a INNER JOIN " + "information_schema.KEY_COLUMN_USAGE AS b ON a.Constraint_name = b.CONSTRAINT_NAME " + "WHERE a.CONSTRAINT_NAME = '{0}'"' constraintName)' connection)) {  							using (var targetReader = referenceTargetCommand.ExecuteReader ()) {  								while (targetReader.Read ()) {  									remoteTable = (string)targetReader [0];  									remoteFieldName = (string)targetReader [1];  									referenceExists = true;  									break;  								}  							}  						}  					}  				}  				if (referenceExists) {  					var reference = new ReferenceInfo () {  						ReferenceTable = remoteTable'  						LocalFieldName = localField'  						RemoteFieldName = remoteFieldName  					};  					info.References.Add (reference);  				}  			}  			entities.Add (info);  		}  	}  }  
Magic Number,EntityGenerator.Entities,SqlCeDataSource,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\EntityGenerator\Entities\SqlCeDataSource.cs,GetEntityDefinitions,The following statement contains a magic number: using (var cmd = new SqlCeCommand (GetTablesSQL' connection)) {  	connection.Open ();  	using (var reader = cmd.ExecuteReader ()) {  		while (reader.Read ()) {  			var info = new EntityInfo ();  			var indexInfo = new Dictionary<string' IndexInfo> ();  			info.Entity = new EntityAttribute ();  			info.Entity.NameInStore = reader.GetString (0);  			using (var indexCommand = new SqlCeCommand (string.Format ("SELECT INDEX_NAME' PRIMARY_KEY' COLUMN_NAME' COLLATION FROM INFORMATION_SCHEMA.INDEXES WHERE TABLE_NAME = '{0}'"' info.Entity.NameInStore)' connection))  				using (var indexReader = indexCommand.ExecuteReader ()) {  					while (indexReader.Read ()) {  						var indexName = indexReader.GetString (0);  						var primaryKey = indexReader.GetBoolean (1);  						var columnName = indexReader.GetString (2);  						var sortOrder = indexReader.GetInt16 (3) == 1 ? FieldSearchOrder.Ascending : FieldSearchOrder.Descending;  						// collation of 1 == ascending' 2 == descending (based on a quick test' this might be incorrect)  						// TODO: handle cases where a column is in multiple indexes (ORM doesn't support that scenario for now)  						if (!indexInfo.ContainsKey (columnName)) {  							indexInfo.Add (columnName' new IndexInfo () {  								ColumnName = columnName'  								IndexName = indexName'  								PrimaryKey = primaryKey'  								SearchOrder = sortOrder  							});  						}  					}  				}  			// TODO: look for primary key to set key scheme  			info.Entity.KeyScheme = KeyScheme.None;  			using (var fieldCommand = new SqlCeCommand (string.Format ("SELECT COLUMN_NAME' COLUMN_HASDEFAULT' IS_NULLABLE' DATA_TYPE' CHARACTER_MAXIMUM_LENGTH' NUMERIC_PRECISION' NUMERIC_SCALE' AUTOINC_SEED FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = '{0}'"' info.Entity.NameInStore)' connection)) {  				using (var fieldReader = fieldCommand.ExecuteReader ()) {  					while (fieldReader.Read ()) {  						var field = new FieldAttribute ();  						field.FieldName = fieldReader.GetString (0);  						field.AllowsNulls = string.Compare (fieldReader.GetString (2)' "YES"' true) == 0;  						field.DataType = fieldReader.GetString (3).ParseToDbType ();  						object val = fieldReader [4];  						if (!val.Equals (DBNull.Value)) {  							field.Length = Convert.ToInt32 (val);  						}  						val = fieldReader [5];  						if (!val.Equals (DBNull.Value)) {  							field.Precision = Convert.ToInt32 (val);  						}  						val = fieldReader [6];  						if (!val.Equals (DBNull.Value)) {  							field.Scale = Convert.ToInt32 (val);  						}  						val = fieldReader [7];  						if (!val.Equals (DBNull.Value)) {  							// identity field' so it must be the PK (or part of it)  							info.Entity.KeyScheme = KeyScheme.Identity;  						}  						// check for indexes  						if (indexInfo.ContainsKey (field.FieldName)) {  							var idx = indexInfo [field.FieldName];  							if (idx.PrimaryKey) {  								field.IsPrimaryKey = true;  								if (field.DataType == DbType.Guid) {  									info.Entity.KeyScheme = KeyScheme.GUID;  								}  							}  							field.SearchOrder = idx.SearchOrder;  						}  						// TODO: populate the remainder of the field info  						info.Fields.Add (field);  					}  				}  			}  			// check for references  			using (var referenceSourceCommand = new SqlCeCommand (string.Format ("SELECT a.Constraint_name' a.TABLE_NAME' b.COLUMN_NAME " + "FROM information_schema.table_constraints AS a " + "INNER JOIN information_schema.KEY_COLUMN_USAGE AS b ON a.CONSTRAINT_NAME = b.CONSTRAINT_NAME " + "WHERE (a.TABLE_NAME = '{0}') AND (a.CONSTRAINT_TYPE = 'FOREIGN KEY')"' info.Entity.NameInStore)' connection)) {  				string constraintName = null;  				string localField = null;  				string remoteTable = null;  				string remoteFieldName = null;  				bool referenceExists = false;  				using (var srcReader = referenceSourceCommand.ExecuteReader ()) {  					while (srcReader.Read ()) {  						constraintName = (string)srcReader [0];  						localField = (string)srcReader [2];  						using (var referenceTargetCommand = new SqlCeCommand (string.Format ("SELECT a.UNIQUE_CONSTRAINT_TABLE_NAME' b.COLUMN_NAME " + "FROM information_schema.REFERENTIAL_CONSTRAINTS AS a INNER JOIN " + "information_schema.KEY_COLUMN_USAGE AS b ON a.Constraint_name = b.CONSTRAINT_NAME " + "WHERE a.CONSTRAINT_NAME = '{0}'"' constraintName)' connection)) {  							using (var targetReader = referenceTargetCommand.ExecuteReader ()) {  								while (targetReader.Read ()) {  									remoteTable = (string)targetReader [0];  									remoteFieldName = (string)targetReader [1];  									referenceExists = true;  									break;  								}  							}  						}  					}  				}  				if (referenceExists) {  					var reference = new ReferenceInfo () {  						ReferenceTable = remoteTable'  						LocalFieldName = localField'  						RemoteFieldName = remoteFieldName  					};  					info.References.Add (reference);  				}  			}  			entities.Add (info);  		}  	}  }  
Magic Number,EntityGenerator.Entities,SqlCeDataSource,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\EntityGenerator\Entities\SqlCeDataSource.cs,GetEntityDefinitions,The following statement contains a magic number: using (var cmd = new SqlCeCommand (GetTablesSQL' connection)) {  	connection.Open ();  	using (var reader = cmd.ExecuteReader ()) {  		while (reader.Read ()) {  			var info = new EntityInfo ();  			var indexInfo = new Dictionary<string' IndexInfo> ();  			info.Entity = new EntityAttribute ();  			info.Entity.NameInStore = reader.GetString (0);  			using (var indexCommand = new SqlCeCommand (string.Format ("SELECT INDEX_NAME' PRIMARY_KEY' COLUMN_NAME' COLLATION FROM INFORMATION_SCHEMA.INDEXES WHERE TABLE_NAME = '{0}'"' info.Entity.NameInStore)' connection))  				using (var indexReader = indexCommand.ExecuteReader ()) {  					while (indexReader.Read ()) {  						var indexName = indexReader.GetString (0);  						var primaryKey = indexReader.GetBoolean (1);  						var columnName = indexReader.GetString (2);  						var sortOrder = indexReader.GetInt16 (3) == 1 ? FieldSearchOrder.Ascending : FieldSearchOrder.Descending;  						// collation of 1 == ascending' 2 == descending (based on a quick test' this might be incorrect)  						// TODO: handle cases where a column is in multiple indexes (ORM doesn't support that scenario for now)  						if (!indexInfo.ContainsKey (columnName)) {  							indexInfo.Add (columnName' new IndexInfo () {  								ColumnName = columnName'  								IndexName = indexName'  								PrimaryKey = primaryKey'  								SearchOrder = sortOrder  							});  						}  					}  				}  			// TODO: look for primary key to set key scheme  			info.Entity.KeyScheme = KeyScheme.None;  			using (var fieldCommand = new SqlCeCommand (string.Format ("SELECT COLUMN_NAME' COLUMN_HASDEFAULT' IS_NULLABLE' DATA_TYPE' CHARACTER_MAXIMUM_LENGTH' NUMERIC_PRECISION' NUMERIC_SCALE' AUTOINC_SEED FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = '{0}'"' info.Entity.NameInStore)' connection)) {  				using (var fieldReader = fieldCommand.ExecuteReader ()) {  					while (fieldReader.Read ()) {  						var field = new FieldAttribute ();  						field.FieldName = fieldReader.GetString (0);  						field.AllowsNulls = string.Compare (fieldReader.GetString (2)' "YES"' true) == 0;  						field.DataType = fieldReader.GetString (3).ParseToDbType ();  						object val = fieldReader [4];  						if (!val.Equals (DBNull.Value)) {  							field.Length = Convert.ToInt32 (val);  						}  						val = fieldReader [5];  						if (!val.Equals (DBNull.Value)) {  							field.Precision = Convert.ToInt32 (val);  						}  						val = fieldReader [6];  						if (!val.Equals (DBNull.Value)) {  							field.Scale = Convert.ToInt32 (val);  						}  						val = fieldReader [7];  						if (!val.Equals (DBNull.Value)) {  							// identity field' so it must be the PK (or part of it)  							info.Entity.KeyScheme = KeyScheme.Identity;  						}  						// check for indexes  						if (indexInfo.ContainsKey (field.FieldName)) {  							var idx = indexInfo [field.FieldName];  							if (idx.PrimaryKey) {  								field.IsPrimaryKey = true;  								if (field.DataType == DbType.Guid) {  									info.Entity.KeyScheme = KeyScheme.GUID;  								}  							}  							field.SearchOrder = idx.SearchOrder;  						}  						// TODO: populate the remainder of the field info  						info.Fields.Add (field);  					}  				}  			}  			// check for references  			using (var referenceSourceCommand = new SqlCeCommand (string.Format ("SELECT a.Constraint_name' a.TABLE_NAME' b.COLUMN_NAME " + "FROM information_schema.table_constraints AS a " + "INNER JOIN information_schema.KEY_COLUMN_USAGE AS b ON a.CONSTRAINT_NAME = b.CONSTRAINT_NAME " + "WHERE (a.TABLE_NAME = '{0}') AND (a.CONSTRAINT_TYPE = 'FOREIGN KEY')"' info.Entity.NameInStore)' connection)) {  				string constraintName = null;  				string localField = null;  				string remoteTable = null;  				string remoteFieldName = null;  				bool referenceExists = false;  				using (var srcReader = referenceSourceCommand.ExecuteReader ()) {  					while (srcReader.Read ()) {  						constraintName = (string)srcReader [0];  						localField = (string)srcReader [2];  						using (var referenceTargetCommand = new SqlCeCommand (string.Format ("SELECT a.UNIQUE_CONSTRAINT_TABLE_NAME' b.COLUMN_NAME " + "FROM information_schema.REFERENTIAL_CONSTRAINTS AS a INNER JOIN " + "information_schema.KEY_COLUMN_USAGE AS b ON a.Constraint_name = b.CONSTRAINT_NAME " + "WHERE a.CONSTRAINT_NAME = '{0}'"' constraintName)' connection)) {  							using (var targetReader = referenceTargetCommand.ExecuteReader ()) {  								while (targetReader.Read ()) {  									remoteTable = (string)targetReader [0];  									remoteFieldName = (string)targetReader [1];  									referenceExists = true;  									break;  								}  							}  						}  					}  				}  				if (referenceExists) {  					var reference = new ReferenceInfo () {  						ReferenceTable = remoteTable'  						LocalFieldName = localField'  						RemoteFieldName = remoteFieldName  					};  					info.References.Add (reference);  				}  			}  			entities.Add (info);  		}  	}  }  
Magic Number,EntityGenerator.Entities,SqlCeDataSource,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\EntityGenerator\Entities\SqlCeDataSource.cs,GetEntityDefinitions,The following statement contains a magic number: using (var cmd = new SqlCeCommand (GetTablesSQL' connection)) {  	connection.Open ();  	using (var reader = cmd.ExecuteReader ()) {  		while (reader.Read ()) {  			var info = new EntityInfo ();  			var indexInfo = new Dictionary<string' IndexInfo> ();  			info.Entity = new EntityAttribute ();  			info.Entity.NameInStore = reader.GetString (0);  			using (var indexCommand = new SqlCeCommand (string.Format ("SELECT INDEX_NAME' PRIMARY_KEY' COLUMN_NAME' COLLATION FROM INFORMATION_SCHEMA.INDEXES WHERE TABLE_NAME = '{0}'"' info.Entity.NameInStore)' connection))  				using (var indexReader = indexCommand.ExecuteReader ()) {  					while (indexReader.Read ()) {  						var indexName = indexReader.GetString (0);  						var primaryKey = indexReader.GetBoolean (1);  						var columnName = indexReader.GetString (2);  						var sortOrder = indexReader.GetInt16 (3) == 1 ? FieldSearchOrder.Ascending : FieldSearchOrder.Descending;  						// collation of 1 == ascending' 2 == descending (based on a quick test' this might be incorrect)  						// TODO: handle cases where a column is in multiple indexes (ORM doesn't support that scenario for now)  						if (!indexInfo.ContainsKey (columnName)) {  							indexInfo.Add (columnName' new IndexInfo () {  								ColumnName = columnName'  								IndexName = indexName'  								PrimaryKey = primaryKey'  								SearchOrder = sortOrder  							});  						}  					}  				}  			// TODO: look for primary key to set key scheme  			info.Entity.KeyScheme = KeyScheme.None;  			using (var fieldCommand = new SqlCeCommand (string.Format ("SELECT COLUMN_NAME' COLUMN_HASDEFAULT' IS_NULLABLE' DATA_TYPE' CHARACTER_MAXIMUM_LENGTH' NUMERIC_PRECISION' NUMERIC_SCALE' AUTOINC_SEED FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = '{0}'"' info.Entity.NameInStore)' connection)) {  				using (var fieldReader = fieldCommand.ExecuteReader ()) {  					while (fieldReader.Read ()) {  						var field = new FieldAttribute ();  						field.FieldName = fieldReader.GetString (0);  						field.AllowsNulls = string.Compare (fieldReader.GetString (2)' "YES"' true) == 0;  						field.DataType = fieldReader.GetString (3).ParseToDbType ();  						object val = fieldReader [4];  						if (!val.Equals (DBNull.Value)) {  							field.Length = Convert.ToInt32 (val);  						}  						val = fieldReader [5];  						if (!val.Equals (DBNull.Value)) {  							field.Precision = Convert.ToInt32 (val);  						}  						val = fieldReader [6];  						if (!val.Equals (DBNull.Value)) {  							field.Scale = Convert.ToInt32 (val);  						}  						val = fieldReader [7];  						if (!val.Equals (DBNull.Value)) {  							// identity field' so it must be the PK (or part of it)  							info.Entity.KeyScheme = KeyScheme.Identity;  						}  						// check for indexes  						if (indexInfo.ContainsKey (field.FieldName)) {  							var idx = indexInfo [field.FieldName];  							if (idx.PrimaryKey) {  								field.IsPrimaryKey = true;  								if (field.DataType == DbType.Guid) {  									info.Entity.KeyScheme = KeyScheme.GUID;  								}  							}  							field.SearchOrder = idx.SearchOrder;  						}  						// TODO: populate the remainder of the field info  						info.Fields.Add (field);  					}  				}  			}  			// check for references  			using (var referenceSourceCommand = new SqlCeCommand (string.Format ("SELECT a.Constraint_name' a.TABLE_NAME' b.COLUMN_NAME " + "FROM information_schema.table_constraints AS a " + "INNER JOIN information_schema.KEY_COLUMN_USAGE AS b ON a.CONSTRAINT_NAME = b.CONSTRAINT_NAME " + "WHERE (a.TABLE_NAME = '{0}') AND (a.CONSTRAINT_TYPE = 'FOREIGN KEY')"' info.Entity.NameInStore)' connection)) {  				string constraintName = null;  				string localField = null;  				string remoteTable = null;  				string remoteFieldName = null;  				bool referenceExists = false;  				using (var srcReader = referenceSourceCommand.ExecuteReader ()) {  					while (srcReader.Read ()) {  						constraintName = (string)srcReader [0];  						localField = (string)srcReader [2];  						using (var referenceTargetCommand = new SqlCeCommand (string.Format ("SELECT a.UNIQUE_CONSTRAINT_TABLE_NAME' b.COLUMN_NAME " + "FROM information_schema.REFERENTIAL_CONSTRAINTS AS a INNER JOIN " + "information_schema.KEY_COLUMN_USAGE AS b ON a.Constraint_name = b.CONSTRAINT_NAME " + "WHERE a.CONSTRAINT_NAME = '{0}'"' constraintName)' connection)) {  							using (var targetReader = referenceTargetCommand.ExecuteReader ()) {  								while (targetReader.Read ()) {  									remoteTable = (string)targetReader [0];  									remoteFieldName = (string)targetReader [1];  									referenceExists = true;  									break;  								}  							}  						}  					}  				}  				if (referenceExists) {  					var reference = new ReferenceInfo () {  						ReferenceTable = remoteTable'  						LocalFieldName = localField'  						RemoteFieldName = remoteFieldName  					};  					info.References.Add (reference);  				}  			}  			entities.Add (info);  		}  	}  }  
Magic Number,EntityGenerator.Entities,SqlCeDataSource,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\EntityGenerator\Entities\SqlCeDataSource.cs,GetEntityDefinitions,The following statement contains a magic number: using (var cmd = new SqlCeCommand (GetTablesSQL' connection)) {  	connection.Open ();  	using (var reader = cmd.ExecuteReader ()) {  		while (reader.Read ()) {  			var info = new EntityInfo ();  			var indexInfo = new Dictionary<string' IndexInfo> ();  			info.Entity = new EntityAttribute ();  			info.Entity.NameInStore = reader.GetString (0);  			using (var indexCommand = new SqlCeCommand (string.Format ("SELECT INDEX_NAME' PRIMARY_KEY' COLUMN_NAME' COLLATION FROM INFORMATION_SCHEMA.INDEXES WHERE TABLE_NAME = '{0}'"' info.Entity.NameInStore)' connection))  				using (var indexReader = indexCommand.ExecuteReader ()) {  					while (indexReader.Read ()) {  						var indexName = indexReader.GetString (0);  						var primaryKey = indexReader.GetBoolean (1);  						var columnName = indexReader.GetString (2);  						var sortOrder = indexReader.GetInt16 (3) == 1 ? FieldSearchOrder.Ascending : FieldSearchOrder.Descending;  						// collation of 1 == ascending' 2 == descending (based on a quick test' this might be incorrect)  						// TODO: handle cases where a column is in multiple indexes (ORM doesn't support that scenario for now)  						if (!indexInfo.ContainsKey (columnName)) {  							indexInfo.Add (columnName' new IndexInfo () {  								ColumnName = columnName'  								IndexName = indexName'  								PrimaryKey = primaryKey'  								SearchOrder = sortOrder  							});  						}  					}  				}  			// TODO: look for primary key to set key scheme  			info.Entity.KeyScheme = KeyScheme.None;  			using (var fieldCommand = new SqlCeCommand (string.Format ("SELECT COLUMN_NAME' COLUMN_HASDEFAULT' IS_NULLABLE' DATA_TYPE' CHARACTER_MAXIMUM_LENGTH' NUMERIC_PRECISION' NUMERIC_SCALE' AUTOINC_SEED FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = '{0}'"' info.Entity.NameInStore)' connection)) {  				using (var fieldReader = fieldCommand.ExecuteReader ()) {  					while (fieldReader.Read ()) {  						var field = new FieldAttribute ();  						field.FieldName = fieldReader.GetString (0);  						field.AllowsNulls = string.Compare (fieldReader.GetString (2)' "YES"' true) == 0;  						field.DataType = fieldReader.GetString (3).ParseToDbType ();  						object val = fieldReader [4];  						if (!val.Equals (DBNull.Value)) {  							field.Length = Convert.ToInt32 (val);  						}  						val = fieldReader [5];  						if (!val.Equals (DBNull.Value)) {  							field.Precision = Convert.ToInt32 (val);  						}  						val = fieldReader [6];  						if (!val.Equals (DBNull.Value)) {  							field.Scale = Convert.ToInt32 (val);  						}  						val = fieldReader [7];  						if (!val.Equals (DBNull.Value)) {  							// identity field' so it must be the PK (or part of it)  							info.Entity.KeyScheme = KeyScheme.Identity;  						}  						// check for indexes  						if (indexInfo.ContainsKey (field.FieldName)) {  							var idx = indexInfo [field.FieldName];  							if (idx.PrimaryKey) {  								field.IsPrimaryKey = true;  								if (field.DataType == DbType.Guid) {  									info.Entity.KeyScheme = KeyScheme.GUID;  								}  							}  							field.SearchOrder = idx.SearchOrder;  						}  						// TODO: populate the remainder of the field info  						info.Fields.Add (field);  					}  				}  			}  			// check for references  			using (var referenceSourceCommand = new SqlCeCommand (string.Format ("SELECT a.Constraint_name' a.TABLE_NAME' b.COLUMN_NAME " + "FROM information_schema.table_constraints AS a " + "INNER JOIN information_schema.KEY_COLUMN_USAGE AS b ON a.CONSTRAINT_NAME = b.CONSTRAINT_NAME " + "WHERE (a.TABLE_NAME = '{0}') AND (a.CONSTRAINT_TYPE = 'FOREIGN KEY')"' info.Entity.NameInStore)' connection)) {  				string constraintName = null;  				string localField = null;  				string remoteTable = null;  				string remoteFieldName = null;  				bool referenceExists = false;  				using (var srcReader = referenceSourceCommand.ExecuteReader ()) {  					while (srcReader.Read ()) {  						constraintName = (string)srcReader [0];  						localField = (string)srcReader [2];  						using (var referenceTargetCommand = new SqlCeCommand (string.Format ("SELECT a.UNIQUE_CONSTRAINT_TABLE_NAME' b.COLUMN_NAME " + "FROM information_schema.REFERENTIAL_CONSTRAINTS AS a INNER JOIN " + "information_schema.KEY_COLUMN_USAGE AS b ON a.Constraint_name = b.CONSTRAINT_NAME " + "WHERE a.CONSTRAINT_NAME = '{0}'"' constraintName)' connection)) {  							using (var targetReader = referenceTargetCommand.ExecuteReader ()) {  								while (targetReader.Read ()) {  									remoteTable = (string)targetReader [0];  									remoteFieldName = (string)targetReader [1];  									referenceExists = true;  									break;  								}  							}  						}  					}  				}  				if (referenceExists) {  					var reference = new ReferenceInfo () {  						ReferenceTable = remoteTable'  						LocalFieldName = localField'  						RemoteFieldName = remoteFieldName  					};  					info.References.Add (reference);  				}  			}  			entities.Add (info);  		}  	}  }  
Magic Number,EntityGenerator.Entities,SqlCeDataSource,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\EntityGenerator\Entities\SqlCeDataSource.cs,GetEntityDefinitions,The following statement contains a magic number: using (var cmd = new SqlCeCommand (GetTablesSQL' connection)) {  	connection.Open ();  	using (var reader = cmd.ExecuteReader ()) {  		while (reader.Read ()) {  			var info = new EntityInfo ();  			var indexInfo = new Dictionary<string' IndexInfo> ();  			info.Entity = new EntityAttribute ();  			info.Entity.NameInStore = reader.GetString (0);  			using (var indexCommand = new SqlCeCommand (string.Format ("SELECT INDEX_NAME' PRIMARY_KEY' COLUMN_NAME' COLLATION FROM INFORMATION_SCHEMA.INDEXES WHERE TABLE_NAME = '{0}'"' info.Entity.NameInStore)' connection))  				using (var indexReader = indexCommand.ExecuteReader ()) {  					while (indexReader.Read ()) {  						var indexName = indexReader.GetString (0);  						var primaryKey = indexReader.GetBoolean (1);  						var columnName = indexReader.GetString (2);  						var sortOrder = indexReader.GetInt16 (3) == 1 ? FieldSearchOrder.Ascending : FieldSearchOrder.Descending;  						// collation of 1 == ascending' 2 == descending (based on a quick test' this might be incorrect)  						// TODO: handle cases where a column is in multiple indexes (ORM doesn't support that scenario for now)  						if (!indexInfo.ContainsKey (columnName)) {  							indexInfo.Add (columnName' new IndexInfo () {  								ColumnName = columnName'  								IndexName = indexName'  								PrimaryKey = primaryKey'  								SearchOrder = sortOrder  							});  						}  					}  				}  			// TODO: look for primary key to set key scheme  			info.Entity.KeyScheme = KeyScheme.None;  			using (var fieldCommand = new SqlCeCommand (string.Format ("SELECT COLUMN_NAME' COLUMN_HASDEFAULT' IS_NULLABLE' DATA_TYPE' CHARACTER_MAXIMUM_LENGTH' NUMERIC_PRECISION' NUMERIC_SCALE' AUTOINC_SEED FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = '{0}'"' info.Entity.NameInStore)' connection)) {  				using (var fieldReader = fieldCommand.ExecuteReader ()) {  					while (fieldReader.Read ()) {  						var field = new FieldAttribute ();  						field.FieldName = fieldReader.GetString (0);  						field.AllowsNulls = string.Compare (fieldReader.GetString (2)' "YES"' true) == 0;  						field.DataType = fieldReader.GetString (3).ParseToDbType ();  						object val = fieldReader [4];  						if (!val.Equals (DBNull.Value)) {  							field.Length = Convert.ToInt32 (val);  						}  						val = fieldReader [5];  						if (!val.Equals (DBNull.Value)) {  							field.Precision = Convert.ToInt32 (val);  						}  						val = fieldReader [6];  						if (!val.Equals (DBNull.Value)) {  							field.Scale = Convert.ToInt32 (val);  						}  						val = fieldReader [7];  						if (!val.Equals (DBNull.Value)) {  							// identity field' so it must be the PK (or part of it)  							info.Entity.KeyScheme = KeyScheme.Identity;  						}  						// check for indexes  						if (indexInfo.ContainsKey (field.FieldName)) {  							var idx = indexInfo [field.FieldName];  							if (idx.PrimaryKey) {  								field.IsPrimaryKey = true;  								if (field.DataType == DbType.Guid) {  									info.Entity.KeyScheme = KeyScheme.GUID;  								}  							}  							field.SearchOrder = idx.SearchOrder;  						}  						// TODO: populate the remainder of the field info  						info.Fields.Add (field);  					}  				}  			}  			// check for references  			using (var referenceSourceCommand = new SqlCeCommand (string.Format ("SELECT a.Constraint_name' a.TABLE_NAME' b.COLUMN_NAME " + "FROM information_schema.table_constraints AS a " + "INNER JOIN information_schema.KEY_COLUMN_USAGE AS b ON a.CONSTRAINT_NAME = b.CONSTRAINT_NAME " + "WHERE (a.TABLE_NAME = '{0}') AND (a.CONSTRAINT_TYPE = 'FOREIGN KEY')"' info.Entity.NameInStore)' connection)) {  				string constraintName = null;  				string localField = null;  				string remoteTable = null;  				string remoteFieldName = null;  				bool referenceExists = false;  				using (var srcReader = referenceSourceCommand.ExecuteReader ()) {  					while (srcReader.Read ()) {  						constraintName = (string)srcReader [0];  						localField = (string)srcReader [2];  						using (var referenceTargetCommand = new SqlCeCommand (string.Format ("SELECT a.UNIQUE_CONSTRAINT_TABLE_NAME' b.COLUMN_NAME " + "FROM information_schema.REFERENTIAL_CONSTRAINTS AS a INNER JOIN " + "information_schema.KEY_COLUMN_USAGE AS b ON a.Constraint_name = b.CONSTRAINT_NAME " + "WHERE a.CONSTRAINT_NAME = '{0}'"' constraintName)' connection)) {  							using (var targetReader = referenceTargetCommand.ExecuteReader ()) {  								while (targetReader.Read ()) {  									remoteTable = (string)targetReader [0];  									remoteFieldName = (string)targetReader [1];  									referenceExists = true;  									break;  								}  							}  						}  					}  				}  				if (referenceExists) {  					var reference = new ReferenceInfo () {  						ReferenceTable = remoteTable'  						LocalFieldName = localField'  						RemoteFieldName = remoteFieldName  					};  					info.References.Add (reference);  				}  			}  			entities.Add (info);  		}  	}  }  
Magic Number,EntityGenerator.Entities,SqlCeDataSource,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\EntityGenerator\Entities\SqlCeDataSource.cs,GetEntityDefinitions,The following statement contains a magic number: using (var cmd = new SqlCeCommand (GetTablesSQL' connection)) {  	connection.Open ();  	using (var reader = cmd.ExecuteReader ()) {  		while (reader.Read ()) {  			var info = new EntityInfo ();  			var indexInfo = new Dictionary<string' IndexInfo> ();  			info.Entity = new EntityAttribute ();  			info.Entity.NameInStore = reader.GetString (0);  			using (var indexCommand = new SqlCeCommand (string.Format ("SELECT INDEX_NAME' PRIMARY_KEY' COLUMN_NAME' COLLATION FROM INFORMATION_SCHEMA.INDEXES WHERE TABLE_NAME = '{0}'"' info.Entity.NameInStore)' connection))  				using (var indexReader = indexCommand.ExecuteReader ()) {  					while (indexReader.Read ()) {  						var indexName = indexReader.GetString (0);  						var primaryKey = indexReader.GetBoolean (1);  						var columnName = indexReader.GetString (2);  						var sortOrder = indexReader.GetInt16 (3) == 1 ? FieldSearchOrder.Ascending : FieldSearchOrder.Descending;  						// collation of 1 == ascending' 2 == descending (based on a quick test' this might be incorrect)  						// TODO: handle cases where a column is in multiple indexes (ORM doesn't support that scenario for now)  						if (!indexInfo.ContainsKey (columnName)) {  							indexInfo.Add (columnName' new IndexInfo () {  								ColumnName = columnName'  								IndexName = indexName'  								PrimaryKey = primaryKey'  								SearchOrder = sortOrder  							});  						}  					}  				}  			// TODO: look for primary key to set key scheme  			info.Entity.KeyScheme = KeyScheme.None;  			using (var fieldCommand = new SqlCeCommand (string.Format ("SELECT COLUMN_NAME' COLUMN_HASDEFAULT' IS_NULLABLE' DATA_TYPE' CHARACTER_MAXIMUM_LENGTH' NUMERIC_PRECISION' NUMERIC_SCALE' AUTOINC_SEED FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = '{0}'"' info.Entity.NameInStore)' connection)) {  				using (var fieldReader = fieldCommand.ExecuteReader ()) {  					while (fieldReader.Read ()) {  						var field = new FieldAttribute ();  						field.FieldName = fieldReader.GetString (0);  						field.AllowsNulls = string.Compare (fieldReader.GetString (2)' "YES"' true) == 0;  						field.DataType = fieldReader.GetString (3).ParseToDbType ();  						object val = fieldReader [4];  						if (!val.Equals (DBNull.Value)) {  							field.Length = Convert.ToInt32 (val);  						}  						val = fieldReader [5];  						if (!val.Equals (DBNull.Value)) {  							field.Precision = Convert.ToInt32 (val);  						}  						val = fieldReader [6];  						if (!val.Equals (DBNull.Value)) {  							field.Scale = Convert.ToInt32 (val);  						}  						val = fieldReader [7];  						if (!val.Equals (DBNull.Value)) {  							// identity field' so it must be the PK (or part of it)  							info.Entity.KeyScheme = KeyScheme.Identity;  						}  						// check for indexes  						if (indexInfo.ContainsKey (field.FieldName)) {  							var idx = indexInfo [field.FieldName];  							if (idx.PrimaryKey) {  								field.IsPrimaryKey = true;  								if (field.DataType == DbType.Guid) {  									info.Entity.KeyScheme = KeyScheme.GUID;  								}  							}  							field.SearchOrder = idx.SearchOrder;  						}  						// TODO: populate the remainder of the field info  						info.Fields.Add (field);  					}  				}  			}  			// check for references  			using (var referenceSourceCommand = new SqlCeCommand (string.Format ("SELECT a.Constraint_name' a.TABLE_NAME' b.COLUMN_NAME " + "FROM information_schema.table_constraints AS a " + "INNER JOIN information_schema.KEY_COLUMN_USAGE AS b ON a.CONSTRAINT_NAME = b.CONSTRAINT_NAME " + "WHERE (a.TABLE_NAME = '{0}') AND (a.CONSTRAINT_TYPE = 'FOREIGN KEY')"' info.Entity.NameInStore)' connection)) {  				string constraintName = null;  				string localField = null;  				string remoteTable = null;  				string remoteFieldName = null;  				bool referenceExists = false;  				using (var srcReader = referenceSourceCommand.ExecuteReader ()) {  					while (srcReader.Read ()) {  						constraintName = (string)srcReader [0];  						localField = (string)srcReader [2];  						using (var referenceTargetCommand = new SqlCeCommand (string.Format ("SELECT a.UNIQUE_CONSTRAINT_TABLE_NAME' b.COLUMN_NAME " + "FROM information_schema.REFERENTIAL_CONSTRAINTS AS a INNER JOIN " + "information_schema.KEY_COLUMN_USAGE AS b ON a.Constraint_name = b.CONSTRAINT_NAME " + "WHERE a.CONSTRAINT_NAME = '{0}'"' constraintName)' connection)) {  							using (var targetReader = referenceTargetCommand.ExecuteReader ()) {  								while (targetReader.Read ()) {  									remoteTable = (string)targetReader [0];  									remoteFieldName = (string)targetReader [1];  									referenceExists = true;  									break;  								}  							}  						}  					}  				}  				if (referenceExists) {  					var reference = new ReferenceInfo () {  						ReferenceTable = remoteTable'  						LocalFieldName = localField'  						RemoteFieldName = remoteFieldName  					};  					info.References.Add (reference);  				}  			}  			entities.Add (info);  		}  	}  }  
Magic Number,EntityGenerator.Entities,SqlCeDataSource,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\EntityGenerator\Entities\SqlCeDataSource.cs,GetEntityDefinitions,The following statement contains a magic number: using (var cmd = new SqlCeCommand (GetTablesSQL' connection)) {  	connection.Open ();  	using (var reader = cmd.ExecuteReader ()) {  		while (reader.Read ()) {  			var info = new EntityInfo ();  			var indexInfo = new Dictionary<string' IndexInfo> ();  			info.Entity = new EntityAttribute ();  			info.Entity.NameInStore = reader.GetString (0);  			using (var indexCommand = new SqlCeCommand (string.Format ("SELECT INDEX_NAME' PRIMARY_KEY' COLUMN_NAME' COLLATION FROM INFORMATION_SCHEMA.INDEXES WHERE TABLE_NAME = '{0}'"' info.Entity.NameInStore)' connection))  				using (var indexReader = indexCommand.ExecuteReader ()) {  					while (indexReader.Read ()) {  						var indexName = indexReader.GetString (0);  						var primaryKey = indexReader.GetBoolean (1);  						var columnName = indexReader.GetString (2);  						var sortOrder = indexReader.GetInt16 (3) == 1 ? FieldSearchOrder.Ascending : FieldSearchOrder.Descending;  						// collation of 1 == ascending' 2 == descending (based on a quick test' this might be incorrect)  						// TODO: handle cases where a column is in multiple indexes (ORM doesn't support that scenario for now)  						if (!indexInfo.ContainsKey (columnName)) {  							indexInfo.Add (columnName' new IndexInfo () {  								ColumnName = columnName'  								IndexName = indexName'  								PrimaryKey = primaryKey'  								SearchOrder = sortOrder  							});  						}  					}  				}  			// TODO: look for primary key to set key scheme  			info.Entity.KeyScheme = KeyScheme.None;  			using (var fieldCommand = new SqlCeCommand (string.Format ("SELECT COLUMN_NAME' COLUMN_HASDEFAULT' IS_NULLABLE' DATA_TYPE' CHARACTER_MAXIMUM_LENGTH' NUMERIC_PRECISION' NUMERIC_SCALE' AUTOINC_SEED FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = '{0}'"' info.Entity.NameInStore)' connection)) {  				using (var fieldReader = fieldCommand.ExecuteReader ()) {  					while (fieldReader.Read ()) {  						var field = new FieldAttribute ();  						field.FieldName = fieldReader.GetString (0);  						field.AllowsNulls = string.Compare (fieldReader.GetString (2)' "YES"' true) == 0;  						field.DataType = fieldReader.GetString (3).ParseToDbType ();  						object val = fieldReader [4];  						if (!val.Equals (DBNull.Value)) {  							field.Length = Convert.ToInt32 (val);  						}  						val = fieldReader [5];  						if (!val.Equals (DBNull.Value)) {  							field.Precision = Convert.ToInt32 (val);  						}  						val = fieldReader [6];  						if (!val.Equals (DBNull.Value)) {  							field.Scale = Convert.ToInt32 (val);  						}  						val = fieldReader [7];  						if (!val.Equals (DBNull.Value)) {  							// identity field' so it must be the PK (or part of it)  							info.Entity.KeyScheme = KeyScheme.Identity;  						}  						// check for indexes  						if (indexInfo.ContainsKey (field.FieldName)) {  							var idx = indexInfo [field.FieldName];  							if (idx.PrimaryKey) {  								field.IsPrimaryKey = true;  								if (field.DataType == DbType.Guid) {  									info.Entity.KeyScheme = KeyScheme.GUID;  								}  							}  							field.SearchOrder = idx.SearchOrder;  						}  						// TODO: populate the remainder of the field info  						info.Fields.Add (field);  					}  				}  			}  			// check for references  			using (var referenceSourceCommand = new SqlCeCommand (string.Format ("SELECT a.Constraint_name' a.TABLE_NAME' b.COLUMN_NAME " + "FROM information_schema.table_constraints AS a " + "INNER JOIN information_schema.KEY_COLUMN_USAGE AS b ON a.CONSTRAINT_NAME = b.CONSTRAINT_NAME " + "WHERE (a.TABLE_NAME = '{0}') AND (a.CONSTRAINT_TYPE = 'FOREIGN KEY')"' info.Entity.NameInStore)' connection)) {  				string constraintName = null;  				string localField = null;  				string remoteTable = null;  				string remoteFieldName = null;  				bool referenceExists = false;  				using (var srcReader = referenceSourceCommand.ExecuteReader ()) {  					while (srcReader.Read ()) {  						constraintName = (string)srcReader [0];  						localField = (string)srcReader [2];  						using (var referenceTargetCommand = new SqlCeCommand (string.Format ("SELECT a.UNIQUE_CONSTRAINT_TABLE_NAME' b.COLUMN_NAME " + "FROM information_schema.REFERENTIAL_CONSTRAINTS AS a INNER JOIN " + "information_schema.KEY_COLUMN_USAGE AS b ON a.Constraint_name = b.CONSTRAINT_NAME " + "WHERE a.CONSTRAINT_NAME = '{0}'"' constraintName)' connection)) {  							using (var targetReader = referenceTargetCommand.ExecuteReader ()) {  								while (targetReader.Read ()) {  									remoteTable = (string)targetReader [0];  									remoteFieldName = (string)targetReader [1];  									referenceExists = true;  									break;  								}  							}  						}  					}  				}  				if (referenceExists) {  					var reference = new ReferenceInfo () {  						ReferenceTable = remoteTable'  						LocalFieldName = localField'  						RemoteFieldName = remoteFieldName  					};  					info.References.Add (reference);  				}  			}  			entities.Add (info);  		}  	}  }  
Magic Number,EntityGenerator.Entities,SqlCeDataSource,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\EntityGenerator\Entities\SqlCeDataSource.cs,GetEntityDefinitions,The following statement contains a magic number: using (var cmd = new SqlCeCommand (GetTablesSQL' connection)) {  	connection.Open ();  	using (var reader = cmd.ExecuteReader ()) {  		while (reader.Read ()) {  			var info = new EntityInfo ();  			var indexInfo = new Dictionary<string' IndexInfo> ();  			info.Entity = new EntityAttribute ();  			info.Entity.NameInStore = reader.GetString (0);  			using (var indexCommand = new SqlCeCommand (string.Format ("SELECT INDEX_NAME' PRIMARY_KEY' COLUMN_NAME' COLLATION FROM INFORMATION_SCHEMA.INDEXES WHERE TABLE_NAME = '{0}'"' info.Entity.NameInStore)' connection))  				using (var indexReader = indexCommand.ExecuteReader ()) {  					while (indexReader.Read ()) {  						var indexName = indexReader.GetString (0);  						var primaryKey = indexReader.GetBoolean (1);  						var columnName = indexReader.GetString (2);  						var sortOrder = indexReader.GetInt16 (3) == 1 ? FieldSearchOrder.Ascending : FieldSearchOrder.Descending;  						// collation of 1 == ascending' 2 == descending (based on a quick test' this might be incorrect)  						// TODO: handle cases where a column is in multiple indexes (ORM doesn't support that scenario for now)  						if (!indexInfo.ContainsKey (columnName)) {  							indexInfo.Add (columnName' new IndexInfo () {  								ColumnName = columnName'  								IndexName = indexName'  								PrimaryKey = primaryKey'  								SearchOrder = sortOrder  							});  						}  					}  				}  			// TODO: look for primary key to set key scheme  			info.Entity.KeyScheme = KeyScheme.None;  			using (var fieldCommand = new SqlCeCommand (string.Format ("SELECT COLUMN_NAME' COLUMN_HASDEFAULT' IS_NULLABLE' DATA_TYPE' CHARACTER_MAXIMUM_LENGTH' NUMERIC_PRECISION' NUMERIC_SCALE' AUTOINC_SEED FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = '{0}'"' info.Entity.NameInStore)' connection)) {  				using (var fieldReader = fieldCommand.ExecuteReader ()) {  					while (fieldReader.Read ()) {  						var field = new FieldAttribute ();  						field.FieldName = fieldReader.GetString (0);  						field.AllowsNulls = string.Compare (fieldReader.GetString (2)' "YES"' true) == 0;  						field.DataType = fieldReader.GetString (3).ParseToDbType ();  						object val = fieldReader [4];  						if (!val.Equals (DBNull.Value)) {  							field.Length = Convert.ToInt32 (val);  						}  						val = fieldReader [5];  						if (!val.Equals (DBNull.Value)) {  							field.Precision = Convert.ToInt32 (val);  						}  						val = fieldReader [6];  						if (!val.Equals (DBNull.Value)) {  							field.Scale = Convert.ToInt32 (val);  						}  						val = fieldReader [7];  						if (!val.Equals (DBNull.Value)) {  							// identity field' so it must be the PK (or part of it)  							info.Entity.KeyScheme = KeyScheme.Identity;  						}  						// check for indexes  						if (indexInfo.ContainsKey (field.FieldName)) {  							var idx = indexInfo [field.FieldName];  							if (idx.PrimaryKey) {  								field.IsPrimaryKey = true;  								if (field.DataType == DbType.Guid) {  									info.Entity.KeyScheme = KeyScheme.GUID;  								}  							}  							field.SearchOrder = idx.SearchOrder;  						}  						// TODO: populate the remainder of the field info  						info.Fields.Add (field);  					}  				}  			}  			// check for references  			using (var referenceSourceCommand = new SqlCeCommand (string.Format ("SELECT a.Constraint_name' a.TABLE_NAME' b.COLUMN_NAME " + "FROM information_schema.table_constraints AS a " + "INNER JOIN information_schema.KEY_COLUMN_USAGE AS b ON a.CONSTRAINT_NAME = b.CONSTRAINT_NAME " + "WHERE (a.TABLE_NAME = '{0}') AND (a.CONSTRAINT_TYPE = 'FOREIGN KEY')"' info.Entity.NameInStore)' connection)) {  				string constraintName = null;  				string localField = null;  				string remoteTable = null;  				string remoteFieldName = null;  				bool referenceExists = false;  				using (var srcReader = referenceSourceCommand.ExecuteReader ()) {  					while (srcReader.Read ()) {  						constraintName = (string)srcReader [0];  						localField = (string)srcReader [2];  						using (var referenceTargetCommand = new SqlCeCommand (string.Format ("SELECT a.UNIQUE_CONSTRAINT_TABLE_NAME' b.COLUMN_NAME " + "FROM information_schema.REFERENTIAL_CONSTRAINTS AS a INNER JOIN " + "information_schema.KEY_COLUMN_USAGE AS b ON a.Constraint_name = b.CONSTRAINT_NAME " + "WHERE a.CONSTRAINT_NAME = '{0}'"' constraintName)' connection)) {  							using (var targetReader = referenceTargetCommand.ExecuteReader ()) {  								while (targetReader.Read ()) {  									remoteTable = (string)targetReader [0];  									remoteFieldName = (string)targetReader [1];  									referenceExists = true;  									break;  								}  							}  						}  					}  				}  				if (referenceExists) {  					var reference = new ReferenceInfo () {  						ReferenceTable = remoteTable'  						LocalFieldName = localField'  						RemoteFieldName = remoteFieldName  					};  					info.References.Add (reference);  				}  			}  			entities.Add (info);  		}  	}  }  
Magic Number,EntityGenerator.Entities,SqlCeDataSource,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\EntityGenerator\Entities\SqlCeDataSource.cs,GetEntityDefinitions,The following statement contains a magic number: using (var reader = cmd.ExecuteReader ()) {  	while (reader.Read ()) {  		var info = new EntityInfo ();  		var indexInfo = new Dictionary<string' IndexInfo> ();  		info.Entity = new EntityAttribute ();  		info.Entity.NameInStore = reader.GetString (0);  		using (var indexCommand = new SqlCeCommand (string.Format ("SELECT INDEX_NAME' PRIMARY_KEY' COLUMN_NAME' COLLATION FROM INFORMATION_SCHEMA.INDEXES WHERE TABLE_NAME = '{0}'"' info.Entity.NameInStore)' connection))  			using (var indexReader = indexCommand.ExecuteReader ()) {  				while (indexReader.Read ()) {  					var indexName = indexReader.GetString (0);  					var primaryKey = indexReader.GetBoolean (1);  					var columnName = indexReader.GetString (2);  					var sortOrder = indexReader.GetInt16 (3) == 1 ? FieldSearchOrder.Ascending : FieldSearchOrder.Descending;  					// collation of 1 == ascending' 2 == descending (based on a quick test' this might be incorrect)  					// TODO: handle cases where a column is in multiple indexes (ORM doesn't support that scenario for now)  					if (!indexInfo.ContainsKey (columnName)) {  						indexInfo.Add (columnName' new IndexInfo () {  							ColumnName = columnName'  							IndexName = indexName'  							PrimaryKey = primaryKey'  							SearchOrder = sortOrder  						});  					}  				}  			}  		// TODO: look for primary key to set key scheme  		info.Entity.KeyScheme = KeyScheme.None;  		using (var fieldCommand = new SqlCeCommand (string.Format ("SELECT COLUMN_NAME' COLUMN_HASDEFAULT' IS_NULLABLE' DATA_TYPE' CHARACTER_MAXIMUM_LENGTH' NUMERIC_PRECISION' NUMERIC_SCALE' AUTOINC_SEED FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = '{0}'"' info.Entity.NameInStore)' connection)) {  			using (var fieldReader = fieldCommand.ExecuteReader ()) {  				while (fieldReader.Read ()) {  					var field = new FieldAttribute ();  					field.FieldName = fieldReader.GetString (0);  					field.AllowsNulls = string.Compare (fieldReader.GetString (2)' "YES"' true) == 0;  					field.DataType = fieldReader.GetString (3).ParseToDbType ();  					object val = fieldReader [4];  					if (!val.Equals (DBNull.Value)) {  						field.Length = Convert.ToInt32 (val);  					}  					val = fieldReader [5];  					if (!val.Equals (DBNull.Value)) {  						field.Precision = Convert.ToInt32 (val);  					}  					val = fieldReader [6];  					if (!val.Equals (DBNull.Value)) {  						field.Scale = Convert.ToInt32 (val);  					}  					val = fieldReader [7];  					if (!val.Equals (DBNull.Value)) {  						// identity field' so it must be the PK (or part of it)  						info.Entity.KeyScheme = KeyScheme.Identity;  					}  					// check for indexes  					if (indexInfo.ContainsKey (field.FieldName)) {  						var idx = indexInfo [field.FieldName];  						if (idx.PrimaryKey) {  							field.IsPrimaryKey = true;  							if (field.DataType == DbType.Guid) {  								info.Entity.KeyScheme = KeyScheme.GUID;  							}  						}  						field.SearchOrder = idx.SearchOrder;  					}  					// TODO: populate the remainder of the field info  					info.Fields.Add (field);  				}  			}  		}  		// check for references  		using (var referenceSourceCommand = new SqlCeCommand (string.Format ("SELECT a.Constraint_name' a.TABLE_NAME' b.COLUMN_NAME " + "FROM information_schema.table_constraints AS a " + "INNER JOIN information_schema.KEY_COLUMN_USAGE AS b ON a.CONSTRAINT_NAME = b.CONSTRAINT_NAME " + "WHERE (a.TABLE_NAME = '{0}') AND (a.CONSTRAINT_TYPE = 'FOREIGN KEY')"' info.Entity.NameInStore)' connection)) {  			string constraintName = null;  			string localField = null;  			string remoteTable = null;  			string remoteFieldName = null;  			bool referenceExists = false;  			using (var srcReader = referenceSourceCommand.ExecuteReader ()) {  				while (srcReader.Read ()) {  					constraintName = (string)srcReader [0];  					localField = (string)srcReader [2];  					using (var referenceTargetCommand = new SqlCeCommand (string.Format ("SELECT a.UNIQUE_CONSTRAINT_TABLE_NAME' b.COLUMN_NAME " + "FROM information_schema.REFERENTIAL_CONSTRAINTS AS a INNER JOIN " + "information_schema.KEY_COLUMN_USAGE AS b ON a.Constraint_name = b.CONSTRAINT_NAME " + "WHERE a.CONSTRAINT_NAME = '{0}'"' constraintName)' connection)) {  						using (var targetReader = referenceTargetCommand.ExecuteReader ()) {  							while (targetReader.Read ()) {  								remoteTable = (string)targetReader [0];  								remoteFieldName = (string)targetReader [1];  								referenceExists = true;  								break;  							}  						}  					}  				}  			}  			if (referenceExists) {  				var reference = new ReferenceInfo () {  					ReferenceTable = remoteTable'  					LocalFieldName = localField'  					RemoteFieldName = remoteFieldName  				};  				info.References.Add (reference);  			}  		}  		entities.Add (info);  	}  }  
Magic Number,EntityGenerator.Entities,SqlCeDataSource,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\EntityGenerator\Entities\SqlCeDataSource.cs,GetEntityDefinitions,The following statement contains a magic number: using (var reader = cmd.ExecuteReader ()) {  	while (reader.Read ()) {  		var info = new EntityInfo ();  		var indexInfo = new Dictionary<string' IndexInfo> ();  		info.Entity = new EntityAttribute ();  		info.Entity.NameInStore = reader.GetString (0);  		using (var indexCommand = new SqlCeCommand (string.Format ("SELECT INDEX_NAME' PRIMARY_KEY' COLUMN_NAME' COLLATION FROM INFORMATION_SCHEMA.INDEXES WHERE TABLE_NAME = '{0}'"' info.Entity.NameInStore)' connection))  			using (var indexReader = indexCommand.ExecuteReader ()) {  				while (indexReader.Read ()) {  					var indexName = indexReader.GetString (0);  					var primaryKey = indexReader.GetBoolean (1);  					var columnName = indexReader.GetString (2);  					var sortOrder = indexReader.GetInt16 (3) == 1 ? FieldSearchOrder.Ascending : FieldSearchOrder.Descending;  					// collation of 1 == ascending' 2 == descending (based on a quick test' this might be incorrect)  					// TODO: handle cases where a column is in multiple indexes (ORM doesn't support that scenario for now)  					if (!indexInfo.ContainsKey (columnName)) {  						indexInfo.Add (columnName' new IndexInfo () {  							ColumnName = columnName'  							IndexName = indexName'  							PrimaryKey = primaryKey'  							SearchOrder = sortOrder  						});  					}  				}  			}  		// TODO: look for primary key to set key scheme  		info.Entity.KeyScheme = KeyScheme.None;  		using (var fieldCommand = new SqlCeCommand (string.Format ("SELECT COLUMN_NAME' COLUMN_HASDEFAULT' IS_NULLABLE' DATA_TYPE' CHARACTER_MAXIMUM_LENGTH' NUMERIC_PRECISION' NUMERIC_SCALE' AUTOINC_SEED FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = '{0}'"' info.Entity.NameInStore)' connection)) {  			using (var fieldReader = fieldCommand.ExecuteReader ()) {  				while (fieldReader.Read ()) {  					var field = new FieldAttribute ();  					field.FieldName = fieldReader.GetString (0);  					field.AllowsNulls = string.Compare (fieldReader.GetString (2)' "YES"' true) == 0;  					field.DataType = fieldReader.GetString (3).ParseToDbType ();  					object val = fieldReader [4];  					if (!val.Equals (DBNull.Value)) {  						field.Length = Convert.ToInt32 (val);  					}  					val = fieldReader [5];  					if (!val.Equals (DBNull.Value)) {  						field.Precision = Convert.ToInt32 (val);  					}  					val = fieldReader [6];  					if (!val.Equals (DBNull.Value)) {  						field.Scale = Convert.ToInt32 (val);  					}  					val = fieldReader [7];  					if (!val.Equals (DBNull.Value)) {  						// identity field' so it must be the PK (or part of it)  						info.Entity.KeyScheme = KeyScheme.Identity;  					}  					// check for indexes  					if (indexInfo.ContainsKey (field.FieldName)) {  						var idx = indexInfo [field.FieldName];  						if (idx.PrimaryKey) {  							field.IsPrimaryKey = true;  							if (field.DataType == DbType.Guid) {  								info.Entity.KeyScheme = KeyScheme.GUID;  							}  						}  						field.SearchOrder = idx.SearchOrder;  					}  					// TODO: populate the remainder of the field info  					info.Fields.Add (field);  				}  			}  		}  		// check for references  		using (var referenceSourceCommand = new SqlCeCommand (string.Format ("SELECT a.Constraint_name' a.TABLE_NAME' b.COLUMN_NAME " + "FROM information_schema.table_constraints AS a " + "INNER JOIN information_schema.KEY_COLUMN_USAGE AS b ON a.CONSTRAINT_NAME = b.CONSTRAINT_NAME " + "WHERE (a.TABLE_NAME = '{0}') AND (a.CONSTRAINT_TYPE = 'FOREIGN KEY')"' info.Entity.NameInStore)' connection)) {  			string constraintName = null;  			string localField = null;  			string remoteTable = null;  			string remoteFieldName = null;  			bool referenceExists = false;  			using (var srcReader = referenceSourceCommand.ExecuteReader ()) {  				while (srcReader.Read ()) {  					constraintName = (string)srcReader [0];  					localField = (string)srcReader [2];  					using (var referenceTargetCommand = new SqlCeCommand (string.Format ("SELECT a.UNIQUE_CONSTRAINT_TABLE_NAME' b.COLUMN_NAME " + "FROM information_schema.REFERENTIAL_CONSTRAINTS AS a INNER JOIN " + "information_schema.KEY_COLUMN_USAGE AS b ON a.Constraint_name = b.CONSTRAINT_NAME " + "WHERE a.CONSTRAINT_NAME = '{0}'"' constraintName)' connection)) {  						using (var targetReader = referenceTargetCommand.ExecuteReader ()) {  							while (targetReader.Read ()) {  								remoteTable = (string)targetReader [0];  								remoteFieldName = (string)targetReader [1];  								referenceExists = true;  								break;  							}  						}  					}  				}  			}  			if (referenceExists) {  				var reference = new ReferenceInfo () {  					ReferenceTable = remoteTable'  					LocalFieldName = localField'  					RemoteFieldName = remoteFieldName  				};  				info.References.Add (reference);  			}  		}  		entities.Add (info);  	}  }  
Magic Number,EntityGenerator.Entities,SqlCeDataSource,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\EntityGenerator\Entities\SqlCeDataSource.cs,GetEntityDefinitions,The following statement contains a magic number: using (var reader = cmd.ExecuteReader ()) {  	while (reader.Read ()) {  		var info = new EntityInfo ();  		var indexInfo = new Dictionary<string' IndexInfo> ();  		info.Entity = new EntityAttribute ();  		info.Entity.NameInStore = reader.GetString (0);  		using (var indexCommand = new SqlCeCommand (string.Format ("SELECT INDEX_NAME' PRIMARY_KEY' COLUMN_NAME' COLLATION FROM INFORMATION_SCHEMA.INDEXES WHERE TABLE_NAME = '{0}'"' info.Entity.NameInStore)' connection))  			using (var indexReader = indexCommand.ExecuteReader ()) {  				while (indexReader.Read ()) {  					var indexName = indexReader.GetString (0);  					var primaryKey = indexReader.GetBoolean (1);  					var columnName = indexReader.GetString (2);  					var sortOrder = indexReader.GetInt16 (3) == 1 ? FieldSearchOrder.Ascending : FieldSearchOrder.Descending;  					// collation of 1 == ascending' 2 == descending (based on a quick test' this might be incorrect)  					// TODO: handle cases where a column is in multiple indexes (ORM doesn't support that scenario for now)  					if (!indexInfo.ContainsKey (columnName)) {  						indexInfo.Add (columnName' new IndexInfo () {  							ColumnName = columnName'  							IndexName = indexName'  							PrimaryKey = primaryKey'  							SearchOrder = sortOrder  						});  					}  				}  			}  		// TODO: look for primary key to set key scheme  		info.Entity.KeyScheme = KeyScheme.None;  		using (var fieldCommand = new SqlCeCommand (string.Format ("SELECT COLUMN_NAME' COLUMN_HASDEFAULT' IS_NULLABLE' DATA_TYPE' CHARACTER_MAXIMUM_LENGTH' NUMERIC_PRECISION' NUMERIC_SCALE' AUTOINC_SEED FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = '{0}'"' info.Entity.NameInStore)' connection)) {  			using (var fieldReader = fieldCommand.ExecuteReader ()) {  				while (fieldReader.Read ()) {  					var field = new FieldAttribute ();  					field.FieldName = fieldReader.GetString (0);  					field.AllowsNulls = string.Compare (fieldReader.GetString (2)' "YES"' true) == 0;  					field.DataType = fieldReader.GetString (3).ParseToDbType ();  					object val = fieldReader [4];  					if (!val.Equals (DBNull.Value)) {  						field.Length = Convert.ToInt32 (val);  					}  					val = fieldReader [5];  					if (!val.Equals (DBNull.Value)) {  						field.Precision = Convert.ToInt32 (val);  					}  					val = fieldReader [6];  					if (!val.Equals (DBNull.Value)) {  						field.Scale = Convert.ToInt32 (val);  					}  					val = fieldReader [7];  					if (!val.Equals (DBNull.Value)) {  						// identity field' so it must be the PK (or part of it)  						info.Entity.KeyScheme = KeyScheme.Identity;  					}  					// check for indexes  					if (indexInfo.ContainsKey (field.FieldName)) {  						var idx = indexInfo [field.FieldName];  						if (idx.PrimaryKey) {  							field.IsPrimaryKey = true;  							if (field.DataType == DbType.Guid) {  								info.Entity.KeyScheme = KeyScheme.GUID;  							}  						}  						field.SearchOrder = idx.SearchOrder;  					}  					// TODO: populate the remainder of the field info  					info.Fields.Add (field);  				}  			}  		}  		// check for references  		using (var referenceSourceCommand = new SqlCeCommand (string.Format ("SELECT a.Constraint_name' a.TABLE_NAME' b.COLUMN_NAME " + "FROM information_schema.table_constraints AS a " + "INNER JOIN information_schema.KEY_COLUMN_USAGE AS b ON a.CONSTRAINT_NAME = b.CONSTRAINT_NAME " + "WHERE (a.TABLE_NAME = '{0}') AND (a.CONSTRAINT_TYPE = 'FOREIGN KEY')"' info.Entity.NameInStore)' connection)) {  			string constraintName = null;  			string localField = null;  			string remoteTable = null;  			string remoteFieldName = null;  			bool referenceExists = false;  			using (var srcReader = referenceSourceCommand.ExecuteReader ()) {  				while (srcReader.Read ()) {  					constraintName = (string)srcReader [0];  					localField = (string)srcReader [2];  					using (var referenceTargetCommand = new SqlCeCommand (string.Format ("SELECT a.UNIQUE_CONSTRAINT_TABLE_NAME' b.COLUMN_NAME " + "FROM information_schema.REFERENTIAL_CONSTRAINTS AS a INNER JOIN " + "information_schema.KEY_COLUMN_USAGE AS b ON a.Constraint_name = b.CONSTRAINT_NAME " + "WHERE a.CONSTRAINT_NAME = '{0}'"' constraintName)' connection)) {  						using (var targetReader = referenceTargetCommand.ExecuteReader ()) {  							while (targetReader.Read ()) {  								remoteTable = (string)targetReader [0];  								remoteFieldName = (string)targetReader [1];  								referenceExists = true;  								break;  							}  						}  					}  				}  			}  			if (referenceExists) {  				var reference = new ReferenceInfo () {  					ReferenceTable = remoteTable'  					LocalFieldName = localField'  					RemoteFieldName = remoteFieldName  				};  				info.References.Add (reference);  			}  		}  		entities.Add (info);  	}  }  
Magic Number,EntityGenerator.Entities,SqlCeDataSource,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\EntityGenerator\Entities\SqlCeDataSource.cs,GetEntityDefinitions,The following statement contains a magic number: using (var reader = cmd.ExecuteReader ()) {  	while (reader.Read ()) {  		var info = new EntityInfo ();  		var indexInfo = new Dictionary<string' IndexInfo> ();  		info.Entity = new EntityAttribute ();  		info.Entity.NameInStore = reader.GetString (0);  		using (var indexCommand = new SqlCeCommand (string.Format ("SELECT INDEX_NAME' PRIMARY_KEY' COLUMN_NAME' COLLATION FROM INFORMATION_SCHEMA.INDEXES WHERE TABLE_NAME = '{0}'"' info.Entity.NameInStore)' connection))  			using (var indexReader = indexCommand.ExecuteReader ()) {  				while (indexReader.Read ()) {  					var indexName = indexReader.GetString (0);  					var primaryKey = indexReader.GetBoolean (1);  					var columnName = indexReader.GetString (2);  					var sortOrder = indexReader.GetInt16 (3) == 1 ? FieldSearchOrder.Ascending : FieldSearchOrder.Descending;  					// collation of 1 == ascending' 2 == descending (based on a quick test' this might be incorrect)  					// TODO: handle cases where a column is in multiple indexes (ORM doesn't support that scenario for now)  					if (!indexInfo.ContainsKey (columnName)) {  						indexInfo.Add (columnName' new IndexInfo () {  							ColumnName = columnName'  							IndexName = indexName'  							PrimaryKey = primaryKey'  							SearchOrder = sortOrder  						});  					}  				}  			}  		// TODO: look for primary key to set key scheme  		info.Entity.KeyScheme = KeyScheme.None;  		using (var fieldCommand = new SqlCeCommand (string.Format ("SELECT COLUMN_NAME' COLUMN_HASDEFAULT' IS_NULLABLE' DATA_TYPE' CHARACTER_MAXIMUM_LENGTH' NUMERIC_PRECISION' NUMERIC_SCALE' AUTOINC_SEED FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = '{0}'"' info.Entity.NameInStore)' connection)) {  			using (var fieldReader = fieldCommand.ExecuteReader ()) {  				while (fieldReader.Read ()) {  					var field = new FieldAttribute ();  					field.FieldName = fieldReader.GetString (0);  					field.AllowsNulls = string.Compare (fieldReader.GetString (2)' "YES"' true) == 0;  					field.DataType = fieldReader.GetString (3).ParseToDbType ();  					object val = fieldReader [4];  					if (!val.Equals (DBNull.Value)) {  						field.Length = Convert.ToInt32 (val);  					}  					val = fieldReader [5];  					if (!val.Equals (DBNull.Value)) {  						field.Precision = Convert.ToInt32 (val);  					}  					val = fieldReader [6];  					if (!val.Equals (DBNull.Value)) {  						field.Scale = Convert.ToInt32 (val);  					}  					val = fieldReader [7];  					if (!val.Equals (DBNull.Value)) {  						// identity field' so it must be the PK (or part of it)  						info.Entity.KeyScheme = KeyScheme.Identity;  					}  					// check for indexes  					if (indexInfo.ContainsKey (field.FieldName)) {  						var idx = indexInfo [field.FieldName];  						if (idx.PrimaryKey) {  							field.IsPrimaryKey = true;  							if (field.DataType == DbType.Guid) {  								info.Entity.KeyScheme = KeyScheme.GUID;  							}  						}  						field.SearchOrder = idx.SearchOrder;  					}  					// TODO: populate the remainder of the field info  					info.Fields.Add (field);  				}  			}  		}  		// check for references  		using (var referenceSourceCommand = new SqlCeCommand (string.Format ("SELECT a.Constraint_name' a.TABLE_NAME' b.COLUMN_NAME " + "FROM information_schema.table_constraints AS a " + "INNER JOIN information_schema.KEY_COLUMN_USAGE AS b ON a.CONSTRAINT_NAME = b.CONSTRAINT_NAME " + "WHERE (a.TABLE_NAME = '{0}') AND (a.CONSTRAINT_TYPE = 'FOREIGN KEY')"' info.Entity.NameInStore)' connection)) {  			string constraintName = null;  			string localField = null;  			string remoteTable = null;  			string remoteFieldName = null;  			bool referenceExists = false;  			using (var srcReader = referenceSourceCommand.ExecuteReader ()) {  				while (srcReader.Read ()) {  					constraintName = (string)srcReader [0];  					localField = (string)srcReader [2];  					using (var referenceTargetCommand = new SqlCeCommand (string.Format ("SELECT a.UNIQUE_CONSTRAINT_TABLE_NAME' b.COLUMN_NAME " + "FROM information_schema.REFERENTIAL_CONSTRAINTS AS a INNER JOIN " + "information_schema.KEY_COLUMN_USAGE AS b ON a.Constraint_name = b.CONSTRAINT_NAME " + "WHERE a.CONSTRAINT_NAME = '{0}'"' constraintName)' connection)) {  						using (var targetReader = referenceTargetCommand.ExecuteReader ()) {  							while (targetReader.Read ()) {  								remoteTable = (string)targetReader [0];  								remoteFieldName = (string)targetReader [1];  								referenceExists = true;  								break;  							}  						}  					}  				}  			}  			if (referenceExists) {  				var reference = new ReferenceInfo () {  					ReferenceTable = remoteTable'  					LocalFieldName = localField'  					RemoteFieldName = remoteFieldName  				};  				info.References.Add (reference);  			}  		}  		entities.Add (info);  	}  }  
Magic Number,EntityGenerator.Entities,SqlCeDataSource,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\EntityGenerator\Entities\SqlCeDataSource.cs,GetEntityDefinitions,The following statement contains a magic number: using (var reader = cmd.ExecuteReader ()) {  	while (reader.Read ()) {  		var info = new EntityInfo ();  		var indexInfo = new Dictionary<string' IndexInfo> ();  		info.Entity = new EntityAttribute ();  		info.Entity.NameInStore = reader.GetString (0);  		using (var indexCommand = new SqlCeCommand (string.Format ("SELECT INDEX_NAME' PRIMARY_KEY' COLUMN_NAME' COLLATION FROM INFORMATION_SCHEMA.INDEXES WHERE TABLE_NAME = '{0}'"' info.Entity.NameInStore)' connection))  			using (var indexReader = indexCommand.ExecuteReader ()) {  				while (indexReader.Read ()) {  					var indexName = indexReader.GetString (0);  					var primaryKey = indexReader.GetBoolean (1);  					var columnName = indexReader.GetString (2);  					var sortOrder = indexReader.GetInt16 (3) == 1 ? FieldSearchOrder.Ascending : FieldSearchOrder.Descending;  					// collation of 1 == ascending' 2 == descending (based on a quick test' this might be incorrect)  					// TODO: handle cases where a column is in multiple indexes (ORM doesn't support that scenario for now)  					if (!indexInfo.ContainsKey (columnName)) {  						indexInfo.Add (columnName' new IndexInfo () {  							ColumnName = columnName'  							IndexName = indexName'  							PrimaryKey = primaryKey'  							SearchOrder = sortOrder  						});  					}  				}  			}  		// TODO: look for primary key to set key scheme  		info.Entity.KeyScheme = KeyScheme.None;  		using (var fieldCommand = new SqlCeCommand (string.Format ("SELECT COLUMN_NAME' COLUMN_HASDEFAULT' IS_NULLABLE' DATA_TYPE' CHARACTER_MAXIMUM_LENGTH' NUMERIC_PRECISION' NUMERIC_SCALE' AUTOINC_SEED FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = '{0}'"' info.Entity.NameInStore)' connection)) {  			using (var fieldReader = fieldCommand.ExecuteReader ()) {  				while (fieldReader.Read ()) {  					var field = new FieldAttribute ();  					field.FieldName = fieldReader.GetString (0);  					field.AllowsNulls = string.Compare (fieldReader.GetString (2)' "YES"' true) == 0;  					field.DataType = fieldReader.GetString (3).ParseToDbType ();  					object val = fieldReader [4];  					if (!val.Equals (DBNull.Value)) {  						field.Length = Convert.ToInt32 (val);  					}  					val = fieldReader [5];  					if (!val.Equals (DBNull.Value)) {  						field.Precision = Convert.ToInt32 (val);  					}  					val = fieldReader [6];  					if (!val.Equals (DBNull.Value)) {  						field.Scale = Convert.ToInt32 (val);  					}  					val = fieldReader [7];  					if (!val.Equals (DBNull.Value)) {  						// identity field' so it must be the PK (or part of it)  						info.Entity.KeyScheme = KeyScheme.Identity;  					}  					// check for indexes  					if (indexInfo.ContainsKey (field.FieldName)) {  						var idx = indexInfo [field.FieldName];  						if (idx.PrimaryKey) {  							field.IsPrimaryKey = true;  							if (field.DataType == DbType.Guid) {  								info.Entity.KeyScheme = KeyScheme.GUID;  							}  						}  						field.SearchOrder = idx.SearchOrder;  					}  					// TODO: populate the remainder of the field info  					info.Fields.Add (field);  				}  			}  		}  		// check for references  		using (var referenceSourceCommand = new SqlCeCommand (string.Format ("SELECT a.Constraint_name' a.TABLE_NAME' b.COLUMN_NAME " + "FROM information_schema.table_constraints AS a " + "INNER JOIN information_schema.KEY_COLUMN_USAGE AS b ON a.CONSTRAINT_NAME = b.CONSTRAINT_NAME " + "WHERE (a.TABLE_NAME = '{0}') AND (a.CONSTRAINT_TYPE = 'FOREIGN KEY')"' info.Entity.NameInStore)' connection)) {  			string constraintName = null;  			string localField = null;  			string remoteTable = null;  			string remoteFieldName = null;  			bool referenceExists = false;  			using (var srcReader = referenceSourceCommand.ExecuteReader ()) {  				while (srcReader.Read ()) {  					constraintName = (string)srcReader [0];  					localField = (string)srcReader [2];  					using (var referenceTargetCommand = new SqlCeCommand (string.Format ("SELECT a.UNIQUE_CONSTRAINT_TABLE_NAME' b.COLUMN_NAME " + "FROM information_schema.REFERENTIAL_CONSTRAINTS AS a INNER JOIN " + "information_schema.KEY_COLUMN_USAGE AS b ON a.Constraint_name = b.CONSTRAINT_NAME " + "WHERE a.CONSTRAINT_NAME = '{0}'"' constraintName)' connection)) {  						using (var targetReader = referenceTargetCommand.ExecuteReader ()) {  							while (targetReader.Read ()) {  								remoteTable = (string)targetReader [0];  								remoteFieldName = (string)targetReader [1];  								referenceExists = true;  								break;  							}  						}  					}  				}  			}  			if (referenceExists) {  				var reference = new ReferenceInfo () {  					ReferenceTable = remoteTable'  					LocalFieldName = localField'  					RemoteFieldName = remoteFieldName  				};  				info.References.Add (reference);  			}  		}  		entities.Add (info);  	}  }  
Magic Number,EntityGenerator.Entities,SqlCeDataSource,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\EntityGenerator\Entities\SqlCeDataSource.cs,GetEntityDefinitions,The following statement contains a magic number: using (var reader = cmd.ExecuteReader ()) {  	while (reader.Read ()) {  		var info = new EntityInfo ();  		var indexInfo = new Dictionary<string' IndexInfo> ();  		info.Entity = new EntityAttribute ();  		info.Entity.NameInStore = reader.GetString (0);  		using (var indexCommand = new SqlCeCommand (string.Format ("SELECT INDEX_NAME' PRIMARY_KEY' COLUMN_NAME' COLLATION FROM INFORMATION_SCHEMA.INDEXES WHERE TABLE_NAME = '{0}'"' info.Entity.NameInStore)' connection))  			using (var indexReader = indexCommand.ExecuteReader ()) {  				while (indexReader.Read ()) {  					var indexName = indexReader.GetString (0);  					var primaryKey = indexReader.GetBoolean (1);  					var columnName = indexReader.GetString (2);  					var sortOrder = indexReader.GetInt16 (3) == 1 ? FieldSearchOrder.Ascending : FieldSearchOrder.Descending;  					// collation of 1 == ascending' 2 == descending (based on a quick test' this might be incorrect)  					// TODO: handle cases where a column is in multiple indexes (ORM doesn't support that scenario for now)  					if (!indexInfo.ContainsKey (columnName)) {  						indexInfo.Add (columnName' new IndexInfo () {  							ColumnName = columnName'  							IndexName = indexName'  							PrimaryKey = primaryKey'  							SearchOrder = sortOrder  						});  					}  				}  			}  		// TODO: look for primary key to set key scheme  		info.Entity.KeyScheme = KeyScheme.None;  		using (var fieldCommand = new SqlCeCommand (string.Format ("SELECT COLUMN_NAME' COLUMN_HASDEFAULT' IS_NULLABLE' DATA_TYPE' CHARACTER_MAXIMUM_LENGTH' NUMERIC_PRECISION' NUMERIC_SCALE' AUTOINC_SEED FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = '{0}'"' info.Entity.NameInStore)' connection)) {  			using (var fieldReader = fieldCommand.ExecuteReader ()) {  				while (fieldReader.Read ()) {  					var field = new FieldAttribute ();  					field.FieldName = fieldReader.GetString (0);  					field.AllowsNulls = string.Compare (fieldReader.GetString (2)' "YES"' true) == 0;  					field.DataType = fieldReader.GetString (3).ParseToDbType ();  					object val = fieldReader [4];  					if (!val.Equals (DBNull.Value)) {  						field.Length = Convert.ToInt32 (val);  					}  					val = fieldReader [5];  					if (!val.Equals (DBNull.Value)) {  						field.Precision = Convert.ToInt32 (val);  					}  					val = fieldReader [6];  					if (!val.Equals (DBNull.Value)) {  						field.Scale = Convert.ToInt32 (val);  					}  					val = fieldReader [7];  					if (!val.Equals (DBNull.Value)) {  						// identity field' so it must be the PK (or part of it)  						info.Entity.KeyScheme = KeyScheme.Identity;  					}  					// check for indexes  					if (indexInfo.ContainsKey (field.FieldName)) {  						var idx = indexInfo [field.FieldName];  						if (idx.PrimaryKey) {  							field.IsPrimaryKey = true;  							if (field.DataType == DbType.Guid) {  								info.Entity.KeyScheme = KeyScheme.GUID;  							}  						}  						field.SearchOrder = idx.SearchOrder;  					}  					// TODO: populate the remainder of the field info  					info.Fields.Add (field);  				}  			}  		}  		// check for references  		using (var referenceSourceCommand = new SqlCeCommand (string.Format ("SELECT a.Constraint_name' a.TABLE_NAME' b.COLUMN_NAME " + "FROM information_schema.table_constraints AS a " + "INNER JOIN information_schema.KEY_COLUMN_USAGE AS b ON a.CONSTRAINT_NAME = b.CONSTRAINT_NAME " + "WHERE (a.TABLE_NAME = '{0}') AND (a.CONSTRAINT_TYPE = 'FOREIGN KEY')"' info.Entity.NameInStore)' connection)) {  			string constraintName = null;  			string localField = null;  			string remoteTable = null;  			string remoteFieldName = null;  			bool referenceExists = false;  			using (var srcReader = referenceSourceCommand.ExecuteReader ()) {  				while (srcReader.Read ()) {  					constraintName = (string)srcReader [0];  					localField = (string)srcReader [2];  					using (var referenceTargetCommand = new SqlCeCommand (string.Format ("SELECT a.UNIQUE_CONSTRAINT_TABLE_NAME' b.COLUMN_NAME " + "FROM information_schema.REFERENTIAL_CONSTRAINTS AS a INNER JOIN " + "information_schema.KEY_COLUMN_USAGE AS b ON a.Constraint_name = b.CONSTRAINT_NAME " + "WHERE a.CONSTRAINT_NAME = '{0}'"' constraintName)' connection)) {  						using (var targetReader = referenceTargetCommand.ExecuteReader ()) {  							while (targetReader.Read ()) {  								remoteTable = (string)targetReader [0];  								remoteFieldName = (string)targetReader [1];  								referenceExists = true;  								break;  							}  						}  					}  				}  			}  			if (referenceExists) {  				var reference = new ReferenceInfo () {  					ReferenceTable = remoteTable'  					LocalFieldName = localField'  					RemoteFieldName = remoteFieldName  				};  				info.References.Add (reference);  			}  		}  		entities.Add (info);  	}  }  
Magic Number,EntityGenerator.Entities,SqlCeDataSource,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\EntityGenerator\Entities\SqlCeDataSource.cs,GetEntityDefinitions,The following statement contains a magic number: using (var reader = cmd.ExecuteReader ()) {  	while (reader.Read ()) {  		var info = new EntityInfo ();  		var indexInfo = new Dictionary<string' IndexInfo> ();  		info.Entity = new EntityAttribute ();  		info.Entity.NameInStore = reader.GetString (0);  		using (var indexCommand = new SqlCeCommand (string.Format ("SELECT INDEX_NAME' PRIMARY_KEY' COLUMN_NAME' COLLATION FROM INFORMATION_SCHEMA.INDEXES WHERE TABLE_NAME = '{0}'"' info.Entity.NameInStore)' connection))  			using (var indexReader = indexCommand.ExecuteReader ()) {  				while (indexReader.Read ()) {  					var indexName = indexReader.GetString (0);  					var primaryKey = indexReader.GetBoolean (1);  					var columnName = indexReader.GetString (2);  					var sortOrder = indexReader.GetInt16 (3) == 1 ? FieldSearchOrder.Ascending : FieldSearchOrder.Descending;  					// collation of 1 == ascending' 2 == descending (based on a quick test' this might be incorrect)  					// TODO: handle cases where a column is in multiple indexes (ORM doesn't support that scenario for now)  					if (!indexInfo.ContainsKey (columnName)) {  						indexInfo.Add (columnName' new IndexInfo () {  							ColumnName = columnName'  							IndexName = indexName'  							PrimaryKey = primaryKey'  							SearchOrder = sortOrder  						});  					}  				}  			}  		// TODO: look for primary key to set key scheme  		info.Entity.KeyScheme = KeyScheme.None;  		using (var fieldCommand = new SqlCeCommand (string.Format ("SELECT COLUMN_NAME' COLUMN_HASDEFAULT' IS_NULLABLE' DATA_TYPE' CHARACTER_MAXIMUM_LENGTH' NUMERIC_PRECISION' NUMERIC_SCALE' AUTOINC_SEED FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = '{0}'"' info.Entity.NameInStore)' connection)) {  			using (var fieldReader = fieldCommand.ExecuteReader ()) {  				while (fieldReader.Read ()) {  					var field = new FieldAttribute ();  					field.FieldName = fieldReader.GetString (0);  					field.AllowsNulls = string.Compare (fieldReader.GetString (2)' "YES"' true) == 0;  					field.DataType = fieldReader.GetString (3).ParseToDbType ();  					object val = fieldReader [4];  					if (!val.Equals (DBNull.Value)) {  						field.Length = Convert.ToInt32 (val);  					}  					val = fieldReader [5];  					if (!val.Equals (DBNull.Value)) {  						field.Precision = Convert.ToInt32 (val);  					}  					val = fieldReader [6];  					if (!val.Equals (DBNull.Value)) {  						field.Scale = Convert.ToInt32 (val);  					}  					val = fieldReader [7];  					if (!val.Equals (DBNull.Value)) {  						// identity field' so it must be the PK (or part of it)  						info.Entity.KeyScheme = KeyScheme.Identity;  					}  					// check for indexes  					if (indexInfo.ContainsKey (field.FieldName)) {  						var idx = indexInfo [field.FieldName];  						if (idx.PrimaryKey) {  							field.IsPrimaryKey = true;  							if (field.DataType == DbType.Guid) {  								info.Entity.KeyScheme = KeyScheme.GUID;  							}  						}  						field.SearchOrder = idx.SearchOrder;  					}  					// TODO: populate the remainder of the field info  					info.Fields.Add (field);  				}  			}  		}  		// check for references  		using (var referenceSourceCommand = new SqlCeCommand (string.Format ("SELECT a.Constraint_name' a.TABLE_NAME' b.COLUMN_NAME " + "FROM information_schema.table_constraints AS a " + "INNER JOIN information_schema.KEY_COLUMN_USAGE AS b ON a.CONSTRAINT_NAME = b.CONSTRAINT_NAME " + "WHERE (a.TABLE_NAME = '{0}') AND (a.CONSTRAINT_TYPE = 'FOREIGN KEY')"' info.Entity.NameInStore)' connection)) {  			string constraintName = null;  			string localField = null;  			string remoteTable = null;  			string remoteFieldName = null;  			bool referenceExists = false;  			using (var srcReader = referenceSourceCommand.ExecuteReader ()) {  				while (srcReader.Read ()) {  					constraintName = (string)srcReader [0];  					localField = (string)srcReader [2];  					using (var referenceTargetCommand = new SqlCeCommand (string.Format ("SELECT a.UNIQUE_CONSTRAINT_TABLE_NAME' b.COLUMN_NAME " + "FROM information_schema.REFERENTIAL_CONSTRAINTS AS a INNER JOIN " + "information_schema.KEY_COLUMN_USAGE AS b ON a.Constraint_name = b.CONSTRAINT_NAME " + "WHERE a.CONSTRAINT_NAME = '{0}'"' constraintName)' connection)) {  						using (var targetReader = referenceTargetCommand.ExecuteReader ()) {  							while (targetReader.Read ()) {  								remoteTable = (string)targetReader [0];  								remoteFieldName = (string)targetReader [1];  								referenceExists = true;  								break;  							}  						}  					}  				}  			}  			if (referenceExists) {  				var reference = new ReferenceInfo () {  					ReferenceTable = remoteTable'  					LocalFieldName = localField'  					RemoteFieldName = remoteFieldName  				};  				info.References.Add (reference);  			}  		}  		entities.Add (info);  	}  }  
Magic Number,EntityGenerator.Entities,SqlCeDataSource,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\EntityGenerator\Entities\SqlCeDataSource.cs,GetEntityDefinitions,The following statement contains a magic number: using (var reader = cmd.ExecuteReader ()) {  	while (reader.Read ()) {  		var info = new EntityInfo ();  		var indexInfo = new Dictionary<string' IndexInfo> ();  		info.Entity = new EntityAttribute ();  		info.Entity.NameInStore = reader.GetString (0);  		using (var indexCommand = new SqlCeCommand (string.Format ("SELECT INDEX_NAME' PRIMARY_KEY' COLUMN_NAME' COLLATION FROM INFORMATION_SCHEMA.INDEXES WHERE TABLE_NAME = '{0}'"' info.Entity.NameInStore)' connection))  			using (var indexReader = indexCommand.ExecuteReader ()) {  				while (indexReader.Read ()) {  					var indexName = indexReader.GetString (0);  					var primaryKey = indexReader.GetBoolean (1);  					var columnName = indexReader.GetString (2);  					var sortOrder = indexReader.GetInt16 (3) == 1 ? FieldSearchOrder.Ascending : FieldSearchOrder.Descending;  					// collation of 1 == ascending' 2 == descending (based on a quick test' this might be incorrect)  					// TODO: handle cases where a column is in multiple indexes (ORM doesn't support that scenario for now)  					if (!indexInfo.ContainsKey (columnName)) {  						indexInfo.Add (columnName' new IndexInfo () {  							ColumnName = columnName'  							IndexName = indexName'  							PrimaryKey = primaryKey'  							SearchOrder = sortOrder  						});  					}  				}  			}  		// TODO: look for primary key to set key scheme  		info.Entity.KeyScheme = KeyScheme.None;  		using (var fieldCommand = new SqlCeCommand (string.Format ("SELECT COLUMN_NAME' COLUMN_HASDEFAULT' IS_NULLABLE' DATA_TYPE' CHARACTER_MAXIMUM_LENGTH' NUMERIC_PRECISION' NUMERIC_SCALE' AUTOINC_SEED FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = '{0}'"' info.Entity.NameInStore)' connection)) {  			using (var fieldReader = fieldCommand.ExecuteReader ()) {  				while (fieldReader.Read ()) {  					var field = new FieldAttribute ();  					field.FieldName = fieldReader.GetString (0);  					field.AllowsNulls = string.Compare (fieldReader.GetString (2)' "YES"' true) == 0;  					field.DataType = fieldReader.GetString (3).ParseToDbType ();  					object val = fieldReader [4];  					if (!val.Equals (DBNull.Value)) {  						field.Length = Convert.ToInt32 (val);  					}  					val = fieldReader [5];  					if (!val.Equals (DBNull.Value)) {  						field.Precision = Convert.ToInt32 (val);  					}  					val = fieldReader [6];  					if (!val.Equals (DBNull.Value)) {  						field.Scale = Convert.ToInt32 (val);  					}  					val = fieldReader [7];  					if (!val.Equals (DBNull.Value)) {  						// identity field' so it must be the PK (or part of it)  						info.Entity.KeyScheme = KeyScheme.Identity;  					}  					// check for indexes  					if (indexInfo.ContainsKey (field.FieldName)) {  						var idx = indexInfo [field.FieldName];  						if (idx.PrimaryKey) {  							field.IsPrimaryKey = true;  							if (field.DataType == DbType.Guid) {  								info.Entity.KeyScheme = KeyScheme.GUID;  							}  						}  						field.SearchOrder = idx.SearchOrder;  					}  					// TODO: populate the remainder of the field info  					info.Fields.Add (field);  				}  			}  		}  		// check for references  		using (var referenceSourceCommand = new SqlCeCommand (string.Format ("SELECT a.Constraint_name' a.TABLE_NAME' b.COLUMN_NAME " + "FROM information_schema.table_constraints AS a " + "INNER JOIN information_schema.KEY_COLUMN_USAGE AS b ON a.CONSTRAINT_NAME = b.CONSTRAINT_NAME " + "WHERE (a.TABLE_NAME = '{0}') AND (a.CONSTRAINT_TYPE = 'FOREIGN KEY')"' info.Entity.NameInStore)' connection)) {  			string constraintName = null;  			string localField = null;  			string remoteTable = null;  			string remoteFieldName = null;  			bool referenceExists = false;  			using (var srcReader = referenceSourceCommand.ExecuteReader ()) {  				while (srcReader.Read ()) {  					constraintName = (string)srcReader [0];  					localField = (string)srcReader [2];  					using (var referenceTargetCommand = new SqlCeCommand (string.Format ("SELECT a.UNIQUE_CONSTRAINT_TABLE_NAME' b.COLUMN_NAME " + "FROM information_schema.REFERENTIAL_CONSTRAINTS AS a INNER JOIN " + "information_schema.KEY_COLUMN_USAGE AS b ON a.Constraint_name = b.CONSTRAINT_NAME " + "WHERE a.CONSTRAINT_NAME = '{0}'"' constraintName)' connection)) {  						using (var targetReader = referenceTargetCommand.ExecuteReader ()) {  							while (targetReader.Read ()) {  								remoteTable = (string)targetReader [0];  								remoteFieldName = (string)targetReader [1];  								referenceExists = true;  								break;  							}  						}  					}  				}  			}  			if (referenceExists) {  				var reference = new ReferenceInfo () {  					ReferenceTable = remoteTable'  					LocalFieldName = localField'  					RemoteFieldName = remoteFieldName  				};  				info.References.Add (reference);  			}  		}  		entities.Add (info);  	}  }  
Magic Number,EntityGenerator.Entities,SqlCeDataSource,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\EntityGenerator\Entities\SqlCeDataSource.cs,GetEntityDefinitions,The following statement contains a magic number: using (var reader = cmd.ExecuteReader ()) {  	while (reader.Read ()) {  		var info = new EntityInfo ();  		var indexInfo = new Dictionary<string' IndexInfo> ();  		info.Entity = new EntityAttribute ();  		info.Entity.NameInStore = reader.GetString (0);  		using (var indexCommand = new SqlCeCommand (string.Format ("SELECT INDEX_NAME' PRIMARY_KEY' COLUMN_NAME' COLLATION FROM INFORMATION_SCHEMA.INDEXES WHERE TABLE_NAME = '{0}'"' info.Entity.NameInStore)' connection))  			using (var indexReader = indexCommand.ExecuteReader ()) {  				while (indexReader.Read ()) {  					var indexName = indexReader.GetString (0);  					var primaryKey = indexReader.GetBoolean (1);  					var columnName = indexReader.GetString (2);  					var sortOrder = indexReader.GetInt16 (3) == 1 ? FieldSearchOrder.Ascending : FieldSearchOrder.Descending;  					// collation of 1 == ascending' 2 == descending (based on a quick test' this might be incorrect)  					// TODO: handle cases where a column is in multiple indexes (ORM doesn't support that scenario for now)  					if (!indexInfo.ContainsKey (columnName)) {  						indexInfo.Add (columnName' new IndexInfo () {  							ColumnName = columnName'  							IndexName = indexName'  							PrimaryKey = primaryKey'  							SearchOrder = sortOrder  						});  					}  				}  			}  		// TODO: look for primary key to set key scheme  		info.Entity.KeyScheme = KeyScheme.None;  		using (var fieldCommand = new SqlCeCommand (string.Format ("SELECT COLUMN_NAME' COLUMN_HASDEFAULT' IS_NULLABLE' DATA_TYPE' CHARACTER_MAXIMUM_LENGTH' NUMERIC_PRECISION' NUMERIC_SCALE' AUTOINC_SEED FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = '{0}'"' info.Entity.NameInStore)' connection)) {  			using (var fieldReader = fieldCommand.ExecuteReader ()) {  				while (fieldReader.Read ()) {  					var field = new FieldAttribute ();  					field.FieldName = fieldReader.GetString (0);  					field.AllowsNulls = string.Compare (fieldReader.GetString (2)' "YES"' true) == 0;  					field.DataType = fieldReader.GetString (3).ParseToDbType ();  					object val = fieldReader [4];  					if (!val.Equals (DBNull.Value)) {  						field.Length = Convert.ToInt32 (val);  					}  					val = fieldReader [5];  					if (!val.Equals (DBNull.Value)) {  						field.Precision = Convert.ToInt32 (val);  					}  					val = fieldReader [6];  					if (!val.Equals (DBNull.Value)) {  						field.Scale = Convert.ToInt32 (val);  					}  					val = fieldReader [7];  					if (!val.Equals (DBNull.Value)) {  						// identity field' so it must be the PK (or part of it)  						info.Entity.KeyScheme = KeyScheme.Identity;  					}  					// check for indexes  					if (indexInfo.ContainsKey (field.FieldName)) {  						var idx = indexInfo [field.FieldName];  						if (idx.PrimaryKey) {  							field.IsPrimaryKey = true;  							if (field.DataType == DbType.Guid) {  								info.Entity.KeyScheme = KeyScheme.GUID;  							}  						}  						field.SearchOrder = idx.SearchOrder;  					}  					// TODO: populate the remainder of the field info  					info.Fields.Add (field);  				}  			}  		}  		// check for references  		using (var referenceSourceCommand = new SqlCeCommand (string.Format ("SELECT a.Constraint_name' a.TABLE_NAME' b.COLUMN_NAME " + "FROM information_schema.table_constraints AS a " + "INNER JOIN information_schema.KEY_COLUMN_USAGE AS b ON a.CONSTRAINT_NAME = b.CONSTRAINT_NAME " + "WHERE (a.TABLE_NAME = '{0}') AND (a.CONSTRAINT_TYPE = 'FOREIGN KEY')"' info.Entity.NameInStore)' connection)) {  			string constraintName = null;  			string localField = null;  			string remoteTable = null;  			string remoteFieldName = null;  			bool referenceExists = false;  			using (var srcReader = referenceSourceCommand.ExecuteReader ()) {  				while (srcReader.Read ()) {  					constraintName = (string)srcReader [0];  					localField = (string)srcReader [2];  					using (var referenceTargetCommand = new SqlCeCommand (string.Format ("SELECT a.UNIQUE_CONSTRAINT_TABLE_NAME' b.COLUMN_NAME " + "FROM information_schema.REFERENTIAL_CONSTRAINTS AS a INNER JOIN " + "information_schema.KEY_COLUMN_USAGE AS b ON a.Constraint_name = b.CONSTRAINT_NAME " + "WHERE a.CONSTRAINT_NAME = '{0}'"' constraintName)' connection)) {  						using (var targetReader = referenceTargetCommand.ExecuteReader ()) {  							while (targetReader.Read ()) {  								remoteTable = (string)targetReader [0];  								remoteFieldName = (string)targetReader [1];  								referenceExists = true;  								break;  							}  						}  					}  				}  			}  			if (referenceExists) {  				var reference = new ReferenceInfo () {  					ReferenceTable = remoteTable'  					LocalFieldName = localField'  					RemoteFieldName = remoteFieldName  				};  				info.References.Add (reference);  			}  		}  		entities.Add (info);  	}  }  
Magic Number,EntityGenerator.Entities,SqlCeDataSource,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\EntityGenerator\Entities\SqlCeDataSource.cs,GetEntityDefinitions,The following statement contains a magic number: while (reader.Read ()) {  	var info = new EntityInfo ();  	var indexInfo = new Dictionary<string' IndexInfo> ();  	info.Entity = new EntityAttribute ();  	info.Entity.NameInStore = reader.GetString (0);  	using (var indexCommand = new SqlCeCommand (string.Format ("SELECT INDEX_NAME' PRIMARY_KEY' COLUMN_NAME' COLLATION FROM INFORMATION_SCHEMA.INDEXES WHERE TABLE_NAME = '{0}'"' info.Entity.NameInStore)' connection))  		using (var indexReader = indexCommand.ExecuteReader ()) {  			while (indexReader.Read ()) {  				var indexName = indexReader.GetString (0);  				var primaryKey = indexReader.GetBoolean (1);  				var columnName = indexReader.GetString (2);  				var sortOrder = indexReader.GetInt16 (3) == 1 ? FieldSearchOrder.Ascending : FieldSearchOrder.Descending;  				// collation of 1 == ascending' 2 == descending (based on a quick test' this might be incorrect)  				// TODO: handle cases where a column is in multiple indexes (ORM doesn't support that scenario for now)  				if (!indexInfo.ContainsKey (columnName)) {  					indexInfo.Add (columnName' new IndexInfo () {  						ColumnName = columnName'  						IndexName = indexName'  						PrimaryKey = primaryKey'  						SearchOrder = sortOrder  					});  				}  			}  		}  	// TODO: look for primary key to set key scheme  	info.Entity.KeyScheme = KeyScheme.None;  	using (var fieldCommand = new SqlCeCommand (string.Format ("SELECT COLUMN_NAME' COLUMN_HASDEFAULT' IS_NULLABLE' DATA_TYPE' CHARACTER_MAXIMUM_LENGTH' NUMERIC_PRECISION' NUMERIC_SCALE' AUTOINC_SEED FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = '{0}'"' info.Entity.NameInStore)' connection)) {  		using (var fieldReader = fieldCommand.ExecuteReader ()) {  			while (fieldReader.Read ()) {  				var field = new FieldAttribute ();  				field.FieldName = fieldReader.GetString (0);  				field.AllowsNulls = string.Compare (fieldReader.GetString (2)' "YES"' true) == 0;  				field.DataType = fieldReader.GetString (3).ParseToDbType ();  				object val = fieldReader [4];  				if (!val.Equals (DBNull.Value)) {  					field.Length = Convert.ToInt32 (val);  				}  				val = fieldReader [5];  				if (!val.Equals (DBNull.Value)) {  					field.Precision = Convert.ToInt32 (val);  				}  				val = fieldReader [6];  				if (!val.Equals (DBNull.Value)) {  					field.Scale = Convert.ToInt32 (val);  				}  				val = fieldReader [7];  				if (!val.Equals (DBNull.Value)) {  					// identity field' so it must be the PK (or part of it)  					info.Entity.KeyScheme = KeyScheme.Identity;  				}  				// check for indexes  				if (indexInfo.ContainsKey (field.FieldName)) {  					var idx = indexInfo [field.FieldName];  					if (idx.PrimaryKey) {  						field.IsPrimaryKey = true;  						if (field.DataType == DbType.Guid) {  							info.Entity.KeyScheme = KeyScheme.GUID;  						}  					}  					field.SearchOrder = idx.SearchOrder;  				}  				// TODO: populate the remainder of the field info  				info.Fields.Add (field);  			}  		}  	}  	// check for references  	using (var referenceSourceCommand = new SqlCeCommand (string.Format ("SELECT a.Constraint_name' a.TABLE_NAME' b.COLUMN_NAME " + "FROM information_schema.table_constraints AS a " + "INNER JOIN information_schema.KEY_COLUMN_USAGE AS b ON a.CONSTRAINT_NAME = b.CONSTRAINT_NAME " + "WHERE (a.TABLE_NAME = '{0}') AND (a.CONSTRAINT_TYPE = 'FOREIGN KEY')"' info.Entity.NameInStore)' connection)) {  		string constraintName = null;  		string localField = null;  		string remoteTable = null;  		string remoteFieldName = null;  		bool referenceExists = false;  		using (var srcReader = referenceSourceCommand.ExecuteReader ()) {  			while (srcReader.Read ()) {  				constraintName = (string)srcReader [0];  				localField = (string)srcReader [2];  				using (var referenceTargetCommand = new SqlCeCommand (string.Format ("SELECT a.UNIQUE_CONSTRAINT_TABLE_NAME' b.COLUMN_NAME " + "FROM information_schema.REFERENTIAL_CONSTRAINTS AS a INNER JOIN " + "information_schema.KEY_COLUMN_USAGE AS b ON a.Constraint_name = b.CONSTRAINT_NAME " + "WHERE a.CONSTRAINT_NAME = '{0}'"' constraintName)' connection)) {  					using (var targetReader = referenceTargetCommand.ExecuteReader ()) {  						while (targetReader.Read ()) {  							remoteTable = (string)targetReader [0];  							remoteFieldName = (string)targetReader [1];  							referenceExists = true;  							break;  						}  					}  				}  			}  		}  		if (referenceExists) {  			var reference = new ReferenceInfo () {  				ReferenceTable = remoteTable'  				LocalFieldName = localField'  				RemoteFieldName = remoteFieldName  			};  			info.References.Add (reference);  		}  	}  	entities.Add (info);  }  
Magic Number,EntityGenerator.Entities,SqlCeDataSource,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\EntityGenerator\Entities\SqlCeDataSource.cs,GetEntityDefinitions,The following statement contains a magic number: while (reader.Read ()) {  	var info = new EntityInfo ();  	var indexInfo = new Dictionary<string' IndexInfo> ();  	info.Entity = new EntityAttribute ();  	info.Entity.NameInStore = reader.GetString (0);  	using (var indexCommand = new SqlCeCommand (string.Format ("SELECT INDEX_NAME' PRIMARY_KEY' COLUMN_NAME' COLLATION FROM INFORMATION_SCHEMA.INDEXES WHERE TABLE_NAME = '{0}'"' info.Entity.NameInStore)' connection))  		using (var indexReader = indexCommand.ExecuteReader ()) {  			while (indexReader.Read ()) {  				var indexName = indexReader.GetString (0);  				var primaryKey = indexReader.GetBoolean (1);  				var columnName = indexReader.GetString (2);  				var sortOrder = indexReader.GetInt16 (3) == 1 ? FieldSearchOrder.Ascending : FieldSearchOrder.Descending;  				// collation of 1 == ascending' 2 == descending (based on a quick test' this might be incorrect)  				// TODO: handle cases where a column is in multiple indexes (ORM doesn't support that scenario for now)  				if (!indexInfo.ContainsKey (columnName)) {  					indexInfo.Add (columnName' new IndexInfo () {  						ColumnName = columnName'  						IndexName = indexName'  						PrimaryKey = primaryKey'  						SearchOrder = sortOrder  					});  				}  			}  		}  	// TODO: look for primary key to set key scheme  	info.Entity.KeyScheme = KeyScheme.None;  	using (var fieldCommand = new SqlCeCommand (string.Format ("SELECT COLUMN_NAME' COLUMN_HASDEFAULT' IS_NULLABLE' DATA_TYPE' CHARACTER_MAXIMUM_LENGTH' NUMERIC_PRECISION' NUMERIC_SCALE' AUTOINC_SEED FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = '{0}'"' info.Entity.NameInStore)' connection)) {  		using (var fieldReader = fieldCommand.ExecuteReader ()) {  			while (fieldReader.Read ()) {  				var field = new FieldAttribute ();  				field.FieldName = fieldReader.GetString (0);  				field.AllowsNulls = string.Compare (fieldReader.GetString (2)' "YES"' true) == 0;  				field.DataType = fieldReader.GetString (3).ParseToDbType ();  				object val = fieldReader [4];  				if (!val.Equals (DBNull.Value)) {  					field.Length = Convert.ToInt32 (val);  				}  				val = fieldReader [5];  				if (!val.Equals (DBNull.Value)) {  					field.Precision = Convert.ToInt32 (val);  				}  				val = fieldReader [6];  				if (!val.Equals (DBNull.Value)) {  					field.Scale = Convert.ToInt32 (val);  				}  				val = fieldReader [7];  				if (!val.Equals (DBNull.Value)) {  					// identity field' so it must be the PK (or part of it)  					info.Entity.KeyScheme = KeyScheme.Identity;  				}  				// check for indexes  				if (indexInfo.ContainsKey (field.FieldName)) {  					var idx = indexInfo [field.FieldName];  					if (idx.PrimaryKey) {  						field.IsPrimaryKey = true;  						if (field.DataType == DbType.Guid) {  							info.Entity.KeyScheme = KeyScheme.GUID;  						}  					}  					field.SearchOrder = idx.SearchOrder;  				}  				// TODO: populate the remainder of the field info  				info.Fields.Add (field);  			}  		}  	}  	// check for references  	using (var referenceSourceCommand = new SqlCeCommand (string.Format ("SELECT a.Constraint_name' a.TABLE_NAME' b.COLUMN_NAME " + "FROM information_schema.table_constraints AS a " + "INNER JOIN information_schema.KEY_COLUMN_USAGE AS b ON a.CONSTRAINT_NAME = b.CONSTRAINT_NAME " + "WHERE (a.TABLE_NAME = '{0}') AND (a.CONSTRAINT_TYPE = 'FOREIGN KEY')"' info.Entity.NameInStore)' connection)) {  		string constraintName = null;  		string localField = null;  		string remoteTable = null;  		string remoteFieldName = null;  		bool referenceExists = false;  		using (var srcReader = referenceSourceCommand.ExecuteReader ()) {  			while (srcReader.Read ()) {  				constraintName = (string)srcReader [0];  				localField = (string)srcReader [2];  				using (var referenceTargetCommand = new SqlCeCommand (string.Format ("SELECT a.UNIQUE_CONSTRAINT_TABLE_NAME' b.COLUMN_NAME " + "FROM information_schema.REFERENTIAL_CONSTRAINTS AS a INNER JOIN " + "information_schema.KEY_COLUMN_USAGE AS b ON a.Constraint_name = b.CONSTRAINT_NAME " + "WHERE a.CONSTRAINT_NAME = '{0}'"' constraintName)' connection)) {  					using (var targetReader = referenceTargetCommand.ExecuteReader ()) {  						while (targetReader.Read ()) {  							remoteTable = (string)targetReader [0];  							remoteFieldName = (string)targetReader [1];  							referenceExists = true;  							break;  						}  					}  				}  			}  		}  		if (referenceExists) {  			var reference = new ReferenceInfo () {  				ReferenceTable = remoteTable'  				LocalFieldName = localField'  				RemoteFieldName = remoteFieldName  			};  			info.References.Add (reference);  		}  	}  	entities.Add (info);  }  
Magic Number,EntityGenerator.Entities,SqlCeDataSource,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\EntityGenerator\Entities\SqlCeDataSource.cs,GetEntityDefinitions,The following statement contains a magic number: while (reader.Read ()) {  	var info = new EntityInfo ();  	var indexInfo = new Dictionary<string' IndexInfo> ();  	info.Entity = new EntityAttribute ();  	info.Entity.NameInStore = reader.GetString (0);  	using (var indexCommand = new SqlCeCommand (string.Format ("SELECT INDEX_NAME' PRIMARY_KEY' COLUMN_NAME' COLLATION FROM INFORMATION_SCHEMA.INDEXES WHERE TABLE_NAME = '{0}'"' info.Entity.NameInStore)' connection))  		using (var indexReader = indexCommand.ExecuteReader ()) {  			while (indexReader.Read ()) {  				var indexName = indexReader.GetString (0);  				var primaryKey = indexReader.GetBoolean (1);  				var columnName = indexReader.GetString (2);  				var sortOrder = indexReader.GetInt16 (3) == 1 ? FieldSearchOrder.Ascending : FieldSearchOrder.Descending;  				// collation of 1 == ascending' 2 == descending (based on a quick test' this might be incorrect)  				// TODO: handle cases where a column is in multiple indexes (ORM doesn't support that scenario for now)  				if (!indexInfo.ContainsKey (columnName)) {  					indexInfo.Add (columnName' new IndexInfo () {  						ColumnName = columnName'  						IndexName = indexName'  						PrimaryKey = primaryKey'  						SearchOrder = sortOrder  					});  				}  			}  		}  	// TODO: look for primary key to set key scheme  	info.Entity.KeyScheme = KeyScheme.None;  	using (var fieldCommand = new SqlCeCommand (string.Format ("SELECT COLUMN_NAME' COLUMN_HASDEFAULT' IS_NULLABLE' DATA_TYPE' CHARACTER_MAXIMUM_LENGTH' NUMERIC_PRECISION' NUMERIC_SCALE' AUTOINC_SEED FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = '{0}'"' info.Entity.NameInStore)' connection)) {  		using (var fieldReader = fieldCommand.ExecuteReader ()) {  			while (fieldReader.Read ()) {  				var field = new FieldAttribute ();  				field.FieldName = fieldReader.GetString (0);  				field.AllowsNulls = string.Compare (fieldReader.GetString (2)' "YES"' true) == 0;  				field.DataType = fieldReader.GetString (3).ParseToDbType ();  				object val = fieldReader [4];  				if (!val.Equals (DBNull.Value)) {  					field.Length = Convert.ToInt32 (val);  				}  				val = fieldReader [5];  				if (!val.Equals (DBNull.Value)) {  					field.Precision = Convert.ToInt32 (val);  				}  				val = fieldReader [6];  				if (!val.Equals (DBNull.Value)) {  					field.Scale = Convert.ToInt32 (val);  				}  				val = fieldReader [7];  				if (!val.Equals (DBNull.Value)) {  					// identity field' so it must be the PK (or part of it)  					info.Entity.KeyScheme = KeyScheme.Identity;  				}  				// check for indexes  				if (indexInfo.ContainsKey (field.FieldName)) {  					var idx = indexInfo [field.FieldName];  					if (idx.PrimaryKey) {  						field.IsPrimaryKey = true;  						if (field.DataType == DbType.Guid) {  							info.Entity.KeyScheme = KeyScheme.GUID;  						}  					}  					field.SearchOrder = idx.SearchOrder;  				}  				// TODO: populate the remainder of the field info  				info.Fields.Add (field);  			}  		}  	}  	// check for references  	using (var referenceSourceCommand = new SqlCeCommand (string.Format ("SELECT a.Constraint_name' a.TABLE_NAME' b.COLUMN_NAME " + "FROM information_schema.table_constraints AS a " + "INNER JOIN information_schema.KEY_COLUMN_USAGE AS b ON a.CONSTRAINT_NAME = b.CONSTRAINT_NAME " + "WHERE (a.TABLE_NAME = '{0}') AND (a.CONSTRAINT_TYPE = 'FOREIGN KEY')"' info.Entity.NameInStore)' connection)) {  		string constraintName = null;  		string localField = null;  		string remoteTable = null;  		string remoteFieldName = null;  		bool referenceExists = false;  		using (var srcReader = referenceSourceCommand.ExecuteReader ()) {  			while (srcReader.Read ()) {  				constraintName = (string)srcReader [0];  				localField = (string)srcReader [2];  				using (var referenceTargetCommand = new SqlCeCommand (string.Format ("SELECT a.UNIQUE_CONSTRAINT_TABLE_NAME' b.COLUMN_NAME " + "FROM information_schema.REFERENTIAL_CONSTRAINTS AS a INNER JOIN " + "information_schema.KEY_COLUMN_USAGE AS b ON a.Constraint_name = b.CONSTRAINT_NAME " + "WHERE a.CONSTRAINT_NAME = '{0}'"' constraintName)' connection)) {  					using (var targetReader = referenceTargetCommand.ExecuteReader ()) {  						while (targetReader.Read ()) {  							remoteTable = (string)targetReader [0];  							remoteFieldName = (string)targetReader [1];  							referenceExists = true;  							break;  						}  					}  				}  			}  		}  		if (referenceExists) {  			var reference = new ReferenceInfo () {  				ReferenceTable = remoteTable'  				LocalFieldName = localField'  				RemoteFieldName = remoteFieldName  			};  			info.References.Add (reference);  		}  	}  	entities.Add (info);  }  
Magic Number,EntityGenerator.Entities,SqlCeDataSource,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\EntityGenerator\Entities\SqlCeDataSource.cs,GetEntityDefinitions,The following statement contains a magic number: while (reader.Read ()) {  	var info = new EntityInfo ();  	var indexInfo = new Dictionary<string' IndexInfo> ();  	info.Entity = new EntityAttribute ();  	info.Entity.NameInStore = reader.GetString (0);  	using (var indexCommand = new SqlCeCommand (string.Format ("SELECT INDEX_NAME' PRIMARY_KEY' COLUMN_NAME' COLLATION FROM INFORMATION_SCHEMA.INDEXES WHERE TABLE_NAME = '{0}'"' info.Entity.NameInStore)' connection))  		using (var indexReader = indexCommand.ExecuteReader ()) {  			while (indexReader.Read ()) {  				var indexName = indexReader.GetString (0);  				var primaryKey = indexReader.GetBoolean (1);  				var columnName = indexReader.GetString (2);  				var sortOrder = indexReader.GetInt16 (3) == 1 ? FieldSearchOrder.Ascending : FieldSearchOrder.Descending;  				// collation of 1 == ascending' 2 == descending (based on a quick test' this might be incorrect)  				// TODO: handle cases where a column is in multiple indexes (ORM doesn't support that scenario for now)  				if (!indexInfo.ContainsKey (columnName)) {  					indexInfo.Add (columnName' new IndexInfo () {  						ColumnName = columnName'  						IndexName = indexName'  						PrimaryKey = primaryKey'  						SearchOrder = sortOrder  					});  				}  			}  		}  	// TODO: look for primary key to set key scheme  	info.Entity.KeyScheme = KeyScheme.None;  	using (var fieldCommand = new SqlCeCommand (string.Format ("SELECT COLUMN_NAME' COLUMN_HASDEFAULT' IS_NULLABLE' DATA_TYPE' CHARACTER_MAXIMUM_LENGTH' NUMERIC_PRECISION' NUMERIC_SCALE' AUTOINC_SEED FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = '{0}'"' info.Entity.NameInStore)' connection)) {  		using (var fieldReader = fieldCommand.ExecuteReader ()) {  			while (fieldReader.Read ()) {  				var field = new FieldAttribute ();  				field.FieldName = fieldReader.GetString (0);  				field.AllowsNulls = string.Compare (fieldReader.GetString (2)' "YES"' true) == 0;  				field.DataType = fieldReader.GetString (3).ParseToDbType ();  				object val = fieldReader [4];  				if (!val.Equals (DBNull.Value)) {  					field.Length = Convert.ToInt32 (val);  				}  				val = fieldReader [5];  				if (!val.Equals (DBNull.Value)) {  					field.Precision = Convert.ToInt32 (val);  				}  				val = fieldReader [6];  				if (!val.Equals (DBNull.Value)) {  					field.Scale = Convert.ToInt32 (val);  				}  				val = fieldReader [7];  				if (!val.Equals (DBNull.Value)) {  					// identity field' so it must be the PK (or part of it)  					info.Entity.KeyScheme = KeyScheme.Identity;  				}  				// check for indexes  				if (indexInfo.ContainsKey (field.FieldName)) {  					var idx = indexInfo [field.FieldName];  					if (idx.PrimaryKey) {  						field.IsPrimaryKey = true;  						if (field.DataType == DbType.Guid) {  							info.Entity.KeyScheme = KeyScheme.GUID;  						}  					}  					field.SearchOrder = idx.SearchOrder;  				}  				// TODO: populate the remainder of the field info  				info.Fields.Add (field);  			}  		}  	}  	// check for references  	using (var referenceSourceCommand = new SqlCeCommand (string.Format ("SELECT a.Constraint_name' a.TABLE_NAME' b.COLUMN_NAME " + "FROM information_schema.table_constraints AS a " + "INNER JOIN information_schema.KEY_COLUMN_USAGE AS b ON a.CONSTRAINT_NAME = b.CONSTRAINT_NAME " + "WHERE (a.TABLE_NAME = '{0}') AND (a.CONSTRAINT_TYPE = 'FOREIGN KEY')"' info.Entity.NameInStore)' connection)) {  		string constraintName = null;  		string localField = null;  		string remoteTable = null;  		string remoteFieldName = null;  		bool referenceExists = false;  		using (var srcReader = referenceSourceCommand.ExecuteReader ()) {  			while (srcReader.Read ()) {  				constraintName = (string)srcReader [0];  				localField = (string)srcReader [2];  				using (var referenceTargetCommand = new SqlCeCommand (string.Format ("SELECT a.UNIQUE_CONSTRAINT_TABLE_NAME' b.COLUMN_NAME " + "FROM information_schema.REFERENTIAL_CONSTRAINTS AS a INNER JOIN " + "information_schema.KEY_COLUMN_USAGE AS b ON a.Constraint_name = b.CONSTRAINT_NAME " + "WHERE a.CONSTRAINT_NAME = '{0}'"' constraintName)' connection)) {  					using (var targetReader = referenceTargetCommand.ExecuteReader ()) {  						while (targetReader.Read ()) {  							remoteTable = (string)targetReader [0];  							remoteFieldName = (string)targetReader [1];  							referenceExists = true;  							break;  						}  					}  				}  			}  		}  		if (referenceExists) {  			var reference = new ReferenceInfo () {  				ReferenceTable = remoteTable'  				LocalFieldName = localField'  				RemoteFieldName = remoteFieldName  			};  			info.References.Add (reference);  		}  	}  	entities.Add (info);  }  
Magic Number,EntityGenerator.Entities,SqlCeDataSource,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\EntityGenerator\Entities\SqlCeDataSource.cs,GetEntityDefinitions,The following statement contains a magic number: while (reader.Read ()) {  	var info = new EntityInfo ();  	var indexInfo = new Dictionary<string' IndexInfo> ();  	info.Entity = new EntityAttribute ();  	info.Entity.NameInStore = reader.GetString (0);  	using (var indexCommand = new SqlCeCommand (string.Format ("SELECT INDEX_NAME' PRIMARY_KEY' COLUMN_NAME' COLLATION FROM INFORMATION_SCHEMA.INDEXES WHERE TABLE_NAME = '{0}'"' info.Entity.NameInStore)' connection))  		using (var indexReader = indexCommand.ExecuteReader ()) {  			while (indexReader.Read ()) {  				var indexName = indexReader.GetString (0);  				var primaryKey = indexReader.GetBoolean (1);  				var columnName = indexReader.GetString (2);  				var sortOrder = indexReader.GetInt16 (3) == 1 ? FieldSearchOrder.Ascending : FieldSearchOrder.Descending;  				// collation of 1 == ascending' 2 == descending (based on a quick test' this might be incorrect)  				// TODO: handle cases where a column is in multiple indexes (ORM doesn't support that scenario for now)  				if (!indexInfo.ContainsKey (columnName)) {  					indexInfo.Add (columnName' new IndexInfo () {  						ColumnName = columnName'  						IndexName = indexName'  						PrimaryKey = primaryKey'  						SearchOrder = sortOrder  					});  				}  			}  		}  	// TODO: look for primary key to set key scheme  	info.Entity.KeyScheme = KeyScheme.None;  	using (var fieldCommand = new SqlCeCommand (string.Format ("SELECT COLUMN_NAME' COLUMN_HASDEFAULT' IS_NULLABLE' DATA_TYPE' CHARACTER_MAXIMUM_LENGTH' NUMERIC_PRECISION' NUMERIC_SCALE' AUTOINC_SEED FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = '{0}'"' info.Entity.NameInStore)' connection)) {  		using (var fieldReader = fieldCommand.ExecuteReader ()) {  			while (fieldReader.Read ()) {  				var field = new FieldAttribute ();  				field.FieldName = fieldReader.GetString (0);  				field.AllowsNulls = string.Compare (fieldReader.GetString (2)' "YES"' true) == 0;  				field.DataType = fieldReader.GetString (3).ParseToDbType ();  				object val = fieldReader [4];  				if (!val.Equals (DBNull.Value)) {  					field.Length = Convert.ToInt32 (val);  				}  				val = fieldReader [5];  				if (!val.Equals (DBNull.Value)) {  					field.Precision = Convert.ToInt32 (val);  				}  				val = fieldReader [6];  				if (!val.Equals (DBNull.Value)) {  					field.Scale = Convert.ToInt32 (val);  				}  				val = fieldReader [7];  				if (!val.Equals (DBNull.Value)) {  					// identity field' so it must be the PK (or part of it)  					info.Entity.KeyScheme = KeyScheme.Identity;  				}  				// check for indexes  				if (indexInfo.ContainsKey (field.FieldName)) {  					var idx = indexInfo [field.FieldName];  					if (idx.PrimaryKey) {  						field.IsPrimaryKey = true;  						if (field.DataType == DbType.Guid) {  							info.Entity.KeyScheme = KeyScheme.GUID;  						}  					}  					field.SearchOrder = idx.SearchOrder;  				}  				// TODO: populate the remainder of the field info  				info.Fields.Add (field);  			}  		}  	}  	// check for references  	using (var referenceSourceCommand = new SqlCeCommand (string.Format ("SELECT a.Constraint_name' a.TABLE_NAME' b.COLUMN_NAME " + "FROM information_schema.table_constraints AS a " + "INNER JOIN information_schema.KEY_COLUMN_USAGE AS b ON a.CONSTRAINT_NAME = b.CONSTRAINT_NAME " + "WHERE (a.TABLE_NAME = '{0}') AND (a.CONSTRAINT_TYPE = 'FOREIGN KEY')"' info.Entity.NameInStore)' connection)) {  		string constraintName = null;  		string localField = null;  		string remoteTable = null;  		string remoteFieldName = null;  		bool referenceExists = false;  		using (var srcReader = referenceSourceCommand.ExecuteReader ()) {  			while (srcReader.Read ()) {  				constraintName = (string)srcReader [0];  				localField = (string)srcReader [2];  				using (var referenceTargetCommand = new SqlCeCommand (string.Format ("SELECT a.UNIQUE_CONSTRAINT_TABLE_NAME' b.COLUMN_NAME " + "FROM information_schema.REFERENTIAL_CONSTRAINTS AS a INNER JOIN " + "information_schema.KEY_COLUMN_USAGE AS b ON a.Constraint_name = b.CONSTRAINT_NAME " + "WHERE a.CONSTRAINT_NAME = '{0}'"' constraintName)' connection)) {  					using (var targetReader = referenceTargetCommand.ExecuteReader ()) {  						while (targetReader.Read ()) {  							remoteTable = (string)targetReader [0];  							remoteFieldName = (string)targetReader [1];  							referenceExists = true;  							break;  						}  					}  				}  			}  		}  		if (referenceExists) {  			var reference = new ReferenceInfo () {  				ReferenceTable = remoteTable'  				LocalFieldName = localField'  				RemoteFieldName = remoteFieldName  			};  			info.References.Add (reference);  		}  	}  	entities.Add (info);  }  
Magic Number,EntityGenerator.Entities,SqlCeDataSource,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\EntityGenerator\Entities\SqlCeDataSource.cs,GetEntityDefinitions,The following statement contains a magic number: while (reader.Read ()) {  	var info = new EntityInfo ();  	var indexInfo = new Dictionary<string' IndexInfo> ();  	info.Entity = new EntityAttribute ();  	info.Entity.NameInStore = reader.GetString (0);  	using (var indexCommand = new SqlCeCommand (string.Format ("SELECT INDEX_NAME' PRIMARY_KEY' COLUMN_NAME' COLLATION FROM INFORMATION_SCHEMA.INDEXES WHERE TABLE_NAME = '{0}'"' info.Entity.NameInStore)' connection))  		using (var indexReader = indexCommand.ExecuteReader ()) {  			while (indexReader.Read ()) {  				var indexName = indexReader.GetString (0);  				var primaryKey = indexReader.GetBoolean (1);  				var columnName = indexReader.GetString (2);  				var sortOrder = indexReader.GetInt16 (3) == 1 ? FieldSearchOrder.Ascending : FieldSearchOrder.Descending;  				// collation of 1 == ascending' 2 == descending (based on a quick test' this might be incorrect)  				// TODO: handle cases where a column is in multiple indexes (ORM doesn't support that scenario for now)  				if (!indexInfo.ContainsKey (columnName)) {  					indexInfo.Add (columnName' new IndexInfo () {  						ColumnName = columnName'  						IndexName = indexName'  						PrimaryKey = primaryKey'  						SearchOrder = sortOrder  					});  				}  			}  		}  	// TODO: look for primary key to set key scheme  	info.Entity.KeyScheme = KeyScheme.None;  	using (var fieldCommand = new SqlCeCommand (string.Format ("SELECT COLUMN_NAME' COLUMN_HASDEFAULT' IS_NULLABLE' DATA_TYPE' CHARACTER_MAXIMUM_LENGTH' NUMERIC_PRECISION' NUMERIC_SCALE' AUTOINC_SEED FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = '{0}'"' info.Entity.NameInStore)' connection)) {  		using (var fieldReader = fieldCommand.ExecuteReader ()) {  			while (fieldReader.Read ()) {  				var field = new FieldAttribute ();  				field.FieldName = fieldReader.GetString (0);  				field.AllowsNulls = string.Compare (fieldReader.GetString (2)' "YES"' true) == 0;  				field.DataType = fieldReader.GetString (3).ParseToDbType ();  				object val = fieldReader [4];  				if (!val.Equals (DBNull.Value)) {  					field.Length = Convert.ToInt32 (val);  				}  				val = fieldReader [5];  				if (!val.Equals (DBNull.Value)) {  					field.Precision = Convert.ToInt32 (val);  				}  				val = fieldReader [6];  				if (!val.Equals (DBNull.Value)) {  					field.Scale = Convert.ToInt32 (val);  				}  				val = fieldReader [7];  				if (!val.Equals (DBNull.Value)) {  					// identity field' so it must be the PK (or part of it)  					info.Entity.KeyScheme = KeyScheme.Identity;  				}  				// check for indexes  				if (indexInfo.ContainsKey (field.FieldName)) {  					var idx = indexInfo [field.FieldName];  					if (idx.PrimaryKey) {  						field.IsPrimaryKey = true;  						if (field.DataType == DbType.Guid) {  							info.Entity.KeyScheme = KeyScheme.GUID;  						}  					}  					field.SearchOrder = idx.SearchOrder;  				}  				// TODO: populate the remainder of the field info  				info.Fields.Add (field);  			}  		}  	}  	// check for references  	using (var referenceSourceCommand = new SqlCeCommand (string.Format ("SELECT a.Constraint_name' a.TABLE_NAME' b.COLUMN_NAME " + "FROM information_schema.table_constraints AS a " + "INNER JOIN information_schema.KEY_COLUMN_USAGE AS b ON a.CONSTRAINT_NAME = b.CONSTRAINT_NAME " + "WHERE (a.TABLE_NAME = '{0}') AND (a.CONSTRAINT_TYPE = 'FOREIGN KEY')"' info.Entity.NameInStore)' connection)) {  		string constraintName = null;  		string localField = null;  		string remoteTable = null;  		string remoteFieldName = null;  		bool referenceExists = false;  		using (var srcReader = referenceSourceCommand.ExecuteReader ()) {  			while (srcReader.Read ()) {  				constraintName = (string)srcReader [0];  				localField = (string)srcReader [2];  				using (var referenceTargetCommand = new SqlCeCommand (string.Format ("SELECT a.UNIQUE_CONSTRAINT_TABLE_NAME' b.COLUMN_NAME " + "FROM information_schema.REFERENTIAL_CONSTRAINTS AS a INNER JOIN " + "information_schema.KEY_COLUMN_USAGE AS b ON a.Constraint_name = b.CONSTRAINT_NAME " + "WHERE a.CONSTRAINT_NAME = '{0}'"' constraintName)' connection)) {  					using (var targetReader = referenceTargetCommand.ExecuteReader ()) {  						while (targetReader.Read ()) {  							remoteTable = (string)targetReader [0];  							remoteFieldName = (string)targetReader [1];  							referenceExists = true;  							break;  						}  					}  				}  			}  		}  		if (referenceExists) {  			var reference = new ReferenceInfo () {  				ReferenceTable = remoteTable'  				LocalFieldName = localField'  				RemoteFieldName = remoteFieldName  			};  			info.References.Add (reference);  		}  	}  	entities.Add (info);  }  
Magic Number,EntityGenerator.Entities,SqlCeDataSource,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\EntityGenerator\Entities\SqlCeDataSource.cs,GetEntityDefinitions,The following statement contains a magic number: while (reader.Read ()) {  	var info = new EntityInfo ();  	var indexInfo = new Dictionary<string' IndexInfo> ();  	info.Entity = new EntityAttribute ();  	info.Entity.NameInStore = reader.GetString (0);  	using (var indexCommand = new SqlCeCommand (string.Format ("SELECT INDEX_NAME' PRIMARY_KEY' COLUMN_NAME' COLLATION FROM INFORMATION_SCHEMA.INDEXES WHERE TABLE_NAME = '{0}'"' info.Entity.NameInStore)' connection))  		using (var indexReader = indexCommand.ExecuteReader ()) {  			while (indexReader.Read ()) {  				var indexName = indexReader.GetString (0);  				var primaryKey = indexReader.GetBoolean (1);  				var columnName = indexReader.GetString (2);  				var sortOrder = indexReader.GetInt16 (3) == 1 ? FieldSearchOrder.Ascending : FieldSearchOrder.Descending;  				// collation of 1 == ascending' 2 == descending (based on a quick test' this might be incorrect)  				// TODO: handle cases where a column is in multiple indexes (ORM doesn't support that scenario for now)  				if (!indexInfo.ContainsKey (columnName)) {  					indexInfo.Add (columnName' new IndexInfo () {  						ColumnName = columnName'  						IndexName = indexName'  						PrimaryKey = primaryKey'  						SearchOrder = sortOrder  					});  				}  			}  		}  	// TODO: look for primary key to set key scheme  	info.Entity.KeyScheme = KeyScheme.None;  	using (var fieldCommand = new SqlCeCommand (string.Format ("SELECT COLUMN_NAME' COLUMN_HASDEFAULT' IS_NULLABLE' DATA_TYPE' CHARACTER_MAXIMUM_LENGTH' NUMERIC_PRECISION' NUMERIC_SCALE' AUTOINC_SEED FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = '{0}'"' info.Entity.NameInStore)' connection)) {  		using (var fieldReader = fieldCommand.ExecuteReader ()) {  			while (fieldReader.Read ()) {  				var field = new FieldAttribute ();  				field.FieldName = fieldReader.GetString (0);  				field.AllowsNulls = string.Compare (fieldReader.GetString (2)' "YES"' true) == 0;  				field.DataType = fieldReader.GetString (3).ParseToDbType ();  				object val = fieldReader [4];  				if (!val.Equals (DBNull.Value)) {  					field.Length = Convert.ToInt32 (val);  				}  				val = fieldReader [5];  				if (!val.Equals (DBNull.Value)) {  					field.Precision = Convert.ToInt32 (val);  				}  				val = fieldReader [6];  				if (!val.Equals (DBNull.Value)) {  					field.Scale = Convert.ToInt32 (val);  				}  				val = fieldReader [7];  				if (!val.Equals (DBNull.Value)) {  					// identity field' so it must be the PK (or part of it)  					info.Entity.KeyScheme = KeyScheme.Identity;  				}  				// check for indexes  				if (indexInfo.ContainsKey (field.FieldName)) {  					var idx = indexInfo [field.FieldName];  					if (idx.PrimaryKey) {  						field.IsPrimaryKey = true;  						if (field.DataType == DbType.Guid) {  							info.Entity.KeyScheme = KeyScheme.GUID;  						}  					}  					field.SearchOrder = idx.SearchOrder;  				}  				// TODO: populate the remainder of the field info  				info.Fields.Add (field);  			}  		}  	}  	// check for references  	using (var referenceSourceCommand = new SqlCeCommand (string.Format ("SELECT a.Constraint_name' a.TABLE_NAME' b.COLUMN_NAME " + "FROM information_schema.table_constraints AS a " + "INNER JOIN information_schema.KEY_COLUMN_USAGE AS b ON a.CONSTRAINT_NAME = b.CONSTRAINT_NAME " + "WHERE (a.TABLE_NAME = '{0}') AND (a.CONSTRAINT_TYPE = 'FOREIGN KEY')"' info.Entity.NameInStore)' connection)) {  		string constraintName = null;  		string localField = null;  		string remoteTable = null;  		string remoteFieldName = null;  		bool referenceExists = false;  		using (var srcReader = referenceSourceCommand.ExecuteReader ()) {  			while (srcReader.Read ()) {  				constraintName = (string)srcReader [0];  				localField = (string)srcReader [2];  				using (var referenceTargetCommand = new SqlCeCommand (string.Format ("SELECT a.UNIQUE_CONSTRAINT_TABLE_NAME' b.COLUMN_NAME " + "FROM information_schema.REFERENTIAL_CONSTRAINTS AS a INNER JOIN " + "information_schema.KEY_COLUMN_USAGE AS b ON a.Constraint_name = b.CONSTRAINT_NAME " + "WHERE a.CONSTRAINT_NAME = '{0}'"' constraintName)' connection)) {  					using (var targetReader = referenceTargetCommand.ExecuteReader ()) {  						while (targetReader.Read ()) {  							remoteTable = (string)targetReader [0];  							remoteFieldName = (string)targetReader [1];  							referenceExists = true;  							break;  						}  					}  				}  			}  		}  		if (referenceExists) {  			var reference = new ReferenceInfo () {  				ReferenceTable = remoteTable'  				LocalFieldName = localField'  				RemoteFieldName = remoteFieldName  			};  			info.References.Add (reference);  		}  	}  	entities.Add (info);  }  
Magic Number,EntityGenerator.Entities,SqlCeDataSource,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\EntityGenerator\Entities\SqlCeDataSource.cs,GetEntityDefinitions,The following statement contains a magic number: while (reader.Read ()) {  	var info = new EntityInfo ();  	var indexInfo = new Dictionary<string' IndexInfo> ();  	info.Entity = new EntityAttribute ();  	info.Entity.NameInStore = reader.GetString (0);  	using (var indexCommand = new SqlCeCommand (string.Format ("SELECT INDEX_NAME' PRIMARY_KEY' COLUMN_NAME' COLLATION FROM INFORMATION_SCHEMA.INDEXES WHERE TABLE_NAME = '{0}'"' info.Entity.NameInStore)' connection))  		using (var indexReader = indexCommand.ExecuteReader ()) {  			while (indexReader.Read ()) {  				var indexName = indexReader.GetString (0);  				var primaryKey = indexReader.GetBoolean (1);  				var columnName = indexReader.GetString (2);  				var sortOrder = indexReader.GetInt16 (3) == 1 ? FieldSearchOrder.Ascending : FieldSearchOrder.Descending;  				// collation of 1 == ascending' 2 == descending (based on a quick test' this might be incorrect)  				// TODO: handle cases where a column is in multiple indexes (ORM doesn't support that scenario for now)  				if (!indexInfo.ContainsKey (columnName)) {  					indexInfo.Add (columnName' new IndexInfo () {  						ColumnName = columnName'  						IndexName = indexName'  						PrimaryKey = primaryKey'  						SearchOrder = sortOrder  					});  				}  			}  		}  	// TODO: look for primary key to set key scheme  	info.Entity.KeyScheme = KeyScheme.None;  	using (var fieldCommand = new SqlCeCommand (string.Format ("SELECT COLUMN_NAME' COLUMN_HASDEFAULT' IS_NULLABLE' DATA_TYPE' CHARACTER_MAXIMUM_LENGTH' NUMERIC_PRECISION' NUMERIC_SCALE' AUTOINC_SEED FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = '{0}'"' info.Entity.NameInStore)' connection)) {  		using (var fieldReader = fieldCommand.ExecuteReader ()) {  			while (fieldReader.Read ()) {  				var field = new FieldAttribute ();  				field.FieldName = fieldReader.GetString (0);  				field.AllowsNulls = string.Compare (fieldReader.GetString (2)' "YES"' true) == 0;  				field.DataType = fieldReader.GetString (3).ParseToDbType ();  				object val = fieldReader [4];  				if (!val.Equals (DBNull.Value)) {  					field.Length = Convert.ToInt32 (val);  				}  				val = fieldReader [5];  				if (!val.Equals (DBNull.Value)) {  					field.Precision = Convert.ToInt32 (val);  				}  				val = fieldReader [6];  				if (!val.Equals (DBNull.Value)) {  					field.Scale = Convert.ToInt32 (val);  				}  				val = fieldReader [7];  				if (!val.Equals (DBNull.Value)) {  					// identity field' so it must be the PK (or part of it)  					info.Entity.KeyScheme = KeyScheme.Identity;  				}  				// check for indexes  				if (indexInfo.ContainsKey (field.FieldName)) {  					var idx = indexInfo [field.FieldName];  					if (idx.PrimaryKey) {  						field.IsPrimaryKey = true;  						if (field.DataType == DbType.Guid) {  							info.Entity.KeyScheme = KeyScheme.GUID;  						}  					}  					field.SearchOrder = idx.SearchOrder;  				}  				// TODO: populate the remainder of the field info  				info.Fields.Add (field);  			}  		}  	}  	// check for references  	using (var referenceSourceCommand = new SqlCeCommand (string.Format ("SELECT a.Constraint_name' a.TABLE_NAME' b.COLUMN_NAME " + "FROM information_schema.table_constraints AS a " + "INNER JOIN information_schema.KEY_COLUMN_USAGE AS b ON a.CONSTRAINT_NAME = b.CONSTRAINT_NAME " + "WHERE (a.TABLE_NAME = '{0}') AND (a.CONSTRAINT_TYPE = 'FOREIGN KEY')"' info.Entity.NameInStore)' connection)) {  		string constraintName = null;  		string localField = null;  		string remoteTable = null;  		string remoteFieldName = null;  		bool referenceExists = false;  		using (var srcReader = referenceSourceCommand.ExecuteReader ()) {  			while (srcReader.Read ()) {  				constraintName = (string)srcReader [0];  				localField = (string)srcReader [2];  				using (var referenceTargetCommand = new SqlCeCommand (string.Format ("SELECT a.UNIQUE_CONSTRAINT_TABLE_NAME' b.COLUMN_NAME " + "FROM information_schema.REFERENTIAL_CONSTRAINTS AS a INNER JOIN " + "information_schema.KEY_COLUMN_USAGE AS b ON a.Constraint_name = b.CONSTRAINT_NAME " + "WHERE a.CONSTRAINT_NAME = '{0}'"' constraintName)' connection)) {  					using (var targetReader = referenceTargetCommand.ExecuteReader ()) {  						while (targetReader.Read ()) {  							remoteTable = (string)targetReader [0];  							remoteFieldName = (string)targetReader [1];  							referenceExists = true;  							break;  						}  					}  				}  			}  		}  		if (referenceExists) {  			var reference = new ReferenceInfo () {  				ReferenceTable = remoteTable'  				LocalFieldName = localField'  				RemoteFieldName = remoteFieldName  			};  			info.References.Add (reference);  		}  	}  	entities.Add (info);  }  
Magic Number,EntityGenerator.Entities,SqlCeDataSource,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\EntityGenerator\Entities\SqlCeDataSource.cs,GetEntityDefinitions,The following statement contains a magic number: while (reader.Read ()) {  	var info = new EntityInfo ();  	var indexInfo = new Dictionary<string' IndexInfo> ();  	info.Entity = new EntityAttribute ();  	info.Entity.NameInStore = reader.GetString (0);  	using (var indexCommand = new SqlCeCommand (string.Format ("SELECT INDEX_NAME' PRIMARY_KEY' COLUMN_NAME' COLLATION FROM INFORMATION_SCHEMA.INDEXES WHERE TABLE_NAME = '{0}'"' info.Entity.NameInStore)' connection))  		using (var indexReader = indexCommand.ExecuteReader ()) {  			while (indexReader.Read ()) {  				var indexName = indexReader.GetString (0);  				var primaryKey = indexReader.GetBoolean (1);  				var columnName = indexReader.GetString (2);  				var sortOrder = indexReader.GetInt16 (3) == 1 ? FieldSearchOrder.Ascending : FieldSearchOrder.Descending;  				// collation of 1 == ascending' 2 == descending (based on a quick test' this might be incorrect)  				// TODO: handle cases where a column is in multiple indexes (ORM doesn't support that scenario for now)  				if (!indexInfo.ContainsKey (columnName)) {  					indexInfo.Add (columnName' new IndexInfo () {  						ColumnName = columnName'  						IndexName = indexName'  						PrimaryKey = primaryKey'  						SearchOrder = sortOrder  					});  				}  			}  		}  	// TODO: look for primary key to set key scheme  	info.Entity.KeyScheme = KeyScheme.None;  	using (var fieldCommand = new SqlCeCommand (string.Format ("SELECT COLUMN_NAME' COLUMN_HASDEFAULT' IS_NULLABLE' DATA_TYPE' CHARACTER_MAXIMUM_LENGTH' NUMERIC_PRECISION' NUMERIC_SCALE' AUTOINC_SEED FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = '{0}'"' info.Entity.NameInStore)' connection)) {  		using (var fieldReader = fieldCommand.ExecuteReader ()) {  			while (fieldReader.Read ()) {  				var field = new FieldAttribute ();  				field.FieldName = fieldReader.GetString (0);  				field.AllowsNulls = string.Compare (fieldReader.GetString (2)' "YES"' true) == 0;  				field.DataType = fieldReader.GetString (3).ParseToDbType ();  				object val = fieldReader [4];  				if (!val.Equals (DBNull.Value)) {  					field.Length = Convert.ToInt32 (val);  				}  				val = fieldReader [5];  				if (!val.Equals (DBNull.Value)) {  					field.Precision = Convert.ToInt32 (val);  				}  				val = fieldReader [6];  				if (!val.Equals (DBNull.Value)) {  					field.Scale = Convert.ToInt32 (val);  				}  				val = fieldReader [7];  				if (!val.Equals (DBNull.Value)) {  					// identity field' so it must be the PK (or part of it)  					info.Entity.KeyScheme = KeyScheme.Identity;  				}  				// check for indexes  				if (indexInfo.ContainsKey (field.FieldName)) {  					var idx = indexInfo [field.FieldName];  					if (idx.PrimaryKey) {  						field.IsPrimaryKey = true;  						if (field.DataType == DbType.Guid) {  							info.Entity.KeyScheme = KeyScheme.GUID;  						}  					}  					field.SearchOrder = idx.SearchOrder;  				}  				// TODO: populate the remainder of the field info  				info.Fields.Add (field);  			}  		}  	}  	// check for references  	using (var referenceSourceCommand = new SqlCeCommand (string.Format ("SELECT a.Constraint_name' a.TABLE_NAME' b.COLUMN_NAME " + "FROM information_schema.table_constraints AS a " + "INNER JOIN information_schema.KEY_COLUMN_USAGE AS b ON a.CONSTRAINT_NAME = b.CONSTRAINT_NAME " + "WHERE (a.TABLE_NAME = '{0}') AND (a.CONSTRAINT_TYPE = 'FOREIGN KEY')"' info.Entity.NameInStore)' connection)) {  		string constraintName = null;  		string localField = null;  		string remoteTable = null;  		string remoteFieldName = null;  		bool referenceExists = false;  		using (var srcReader = referenceSourceCommand.ExecuteReader ()) {  			while (srcReader.Read ()) {  				constraintName = (string)srcReader [0];  				localField = (string)srcReader [2];  				using (var referenceTargetCommand = new SqlCeCommand (string.Format ("SELECT a.UNIQUE_CONSTRAINT_TABLE_NAME' b.COLUMN_NAME " + "FROM information_schema.REFERENTIAL_CONSTRAINTS AS a INNER JOIN " + "information_schema.KEY_COLUMN_USAGE AS b ON a.Constraint_name = b.CONSTRAINT_NAME " + "WHERE a.CONSTRAINT_NAME = '{0}'"' constraintName)' connection)) {  					using (var targetReader = referenceTargetCommand.ExecuteReader ()) {  						while (targetReader.Read ()) {  							remoteTable = (string)targetReader [0];  							remoteFieldName = (string)targetReader [1];  							referenceExists = true;  							break;  						}  					}  				}  			}  		}  		if (referenceExists) {  			var reference = new ReferenceInfo () {  				ReferenceTable = remoteTable'  				LocalFieldName = localField'  				RemoteFieldName = remoteFieldName  			};  			info.References.Add (reference);  		}  	}  	entities.Add (info);  }  
Magic Number,EntityGenerator.Entities,SqlCeDataSource,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\EntityGenerator\Entities\SqlCeDataSource.cs,GetEntityDefinitions,The following statement contains a magic number: using (var indexCommand = new SqlCeCommand (string.Format ("SELECT INDEX_NAME' PRIMARY_KEY' COLUMN_NAME' COLLATION FROM INFORMATION_SCHEMA.INDEXES WHERE TABLE_NAME = '{0}'"' info.Entity.NameInStore)' connection))  	using (var indexReader = indexCommand.ExecuteReader ()) {  		while (indexReader.Read ()) {  			var indexName = indexReader.GetString (0);  			var primaryKey = indexReader.GetBoolean (1);  			var columnName = indexReader.GetString (2);  			var sortOrder = indexReader.GetInt16 (3) == 1 ? FieldSearchOrder.Ascending : FieldSearchOrder.Descending;  			// collation of 1 == ascending' 2 == descending (based on a quick test' this might be incorrect)  			// TODO: handle cases where a column is in multiple indexes (ORM doesn't support that scenario for now)  			if (!indexInfo.ContainsKey (columnName)) {  				indexInfo.Add (columnName' new IndexInfo () {  					ColumnName = columnName'  					IndexName = indexName'  					PrimaryKey = primaryKey'  					SearchOrder = sortOrder  				});  			}  		}  	}  
Magic Number,EntityGenerator.Entities,SqlCeDataSource,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\EntityGenerator\Entities\SqlCeDataSource.cs,GetEntityDefinitions,The following statement contains a magic number: using (var indexCommand = new SqlCeCommand (string.Format ("SELECT INDEX_NAME' PRIMARY_KEY' COLUMN_NAME' COLLATION FROM INFORMATION_SCHEMA.INDEXES WHERE TABLE_NAME = '{0}'"' info.Entity.NameInStore)' connection))  	using (var indexReader = indexCommand.ExecuteReader ()) {  		while (indexReader.Read ()) {  			var indexName = indexReader.GetString (0);  			var primaryKey = indexReader.GetBoolean (1);  			var columnName = indexReader.GetString (2);  			var sortOrder = indexReader.GetInt16 (3) == 1 ? FieldSearchOrder.Ascending : FieldSearchOrder.Descending;  			// collation of 1 == ascending' 2 == descending (based on a quick test' this might be incorrect)  			// TODO: handle cases where a column is in multiple indexes (ORM doesn't support that scenario for now)  			if (!indexInfo.ContainsKey (columnName)) {  				indexInfo.Add (columnName' new IndexInfo () {  					ColumnName = columnName'  					IndexName = indexName'  					PrimaryKey = primaryKey'  					SearchOrder = sortOrder  				});  			}  		}  	}  
Magic Number,EntityGenerator.Entities,SqlCeDataSource,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\EntityGenerator\Entities\SqlCeDataSource.cs,GetEntityDefinitions,The following statement contains a magic number: using (var indexReader = indexCommand.ExecuteReader ()) {  	while (indexReader.Read ()) {  		var indexName = indexReader.GetString (0);  		var primaryKey = indexReader.GetBoolean (1);  		var columnName = indexReader.GetString (2);  		var sortOrder = indexReader.GetInt16 (3) == 1 ? FieldSearchOrder.Ascending : FieldSearchOrder.Descending;  		// collation of 1 == ascending' 2 == descending (based on a quick test' this might be incorrect)  		// TODO: handle cases where a column is in multiple indexes (ORM doesn't support that scenario for now)  		if (!indexInfo.ContainsKey (columnName)) {  			indexInfo.Add (columnName' new IndexInfo () {  				ColumnName = columnName'  				IndexName = indexName'  				PrimaryKey = primaryKey'  				SearchOrder = sortOrder  			});  		}  	}  }  
Magic Number,EntityGenerator.Entities,SqlCeDataSource,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\EntityGenerator\Entities\SqlCeDataSource.cs,GetEntityDefinitions,The following statement contains a magic number: using (var indexReader = indexCommand.ExecuteReader ()) {  	while (indexReader.Read ()) {  		var indexName = indexReader.GetString (0);  		var primaryKey = indexReader.GetBoolean (1);  		var columnName = indexReader.GetString (2);  		var sortOrder = indexReader.GetInt16 (3) == 1 ? FieldSearchOrder.Ascending : FieldSearchOrder.Descending;  		// collation of 1 == ascending' 2 == descending (based on a quick test' this might be incorrect)  		// TODO: handle cases where a column is in multiple indexes (ORM doesn't support that scenario for now)  		if (!indexInfo.ContainsKey (columnName)) {  			indexInfo.Add (columnName' new IndexInfo () {  				ColumnName = columnName'  				IndexName = indexName'  				PrimaryKey = primaryKey'  				SearchOrder = sortOrder  			});  		}  	}  }  
Magic Number,EntityGenerator.Entities,SqlCeDataSource,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\EntityGenerator\Entities\SqlCeDataSource.cs,GetEntityDefinitions,The following statement contains a magic number: while (indexReader.Read ()) {  	var indexName = indexReader.GetString (0);  	var primaryKey = indexReader.GetBoolean (1);  	var columnName = indexReader.GetString (2);  	var sortOrder = indexReader.GetInt16 (3) == 1 ? FieldSearchOrder.Ascending : FieldSearchOrder.Descending;  	// collation of 1 == ascending' 2 == descending (based on a quick test' this might be incorrect)  	// TODO: handle cases where a column is in multiple indexes (ORM doesn't support that scenario for now)  	if (!indexInfo.ContainsKey (columnName)) {  		indexInfo.Add (columnName' new IndexInfo () {  			ColumnName = columnName'  			IndexName = indexName'  			PrimaryKey = primaryKey'  			SearchOrder = sortOrder  		});  	}  }  
Magic Number,EntityGenerator.Entities,SqlCeDataSource,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\EntityGenerator\Entities\SqlCeDataSource.cs,GetEntityDefinitions,The following statement contains a magic number: while (indexReader.Read ()) {  	var indexName = indexReader.GetString (0);  	var primaryKey = indexReader.GetBoolean (1);  	var columnName = indexReader.GetString (2);  	var sortOrder = indexReader.GetInt16 (3) == 1 ? FieldSearchOrder.Ascending : FieldSearchOrder.Descending;  	// collation of 1 == ascending' 2 == descending (based on a quick test' this might be incorrect)  	// TODO: handle cases where a column is in multiple indexes (ORM doesn't support that scenario for now)  	if (!indexInfo.ContainsKey (columnName)) {  		indexInfo.Add (columnName' new IndexInfo () {  			ColumnName = columnName'  			IndexName = indexName'  			PrimaryKey = primaryKey'  			SearchOrder = sortOrder  		});  	}  }  
Magic Number,EntityGenerator.Entities,SqlCeDataSource,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\EntityGenerator\Entities\SqlCeDataSource.cs,GetEntityDefinitions,The following statement contains a magic number: using (var fieldCommand = new SqlCeCommand (string.Format ("SELECT COLUMN_NAME' COLUMN_HASDEFAULT' IS_NULLABLE' DATA_TYPE' CHARACTER_MAXIMUM_LENGTH' NUMERIC_PRECISION' NUMERIC_SCALE' AUTOINC_SEED FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = '{0}'"' info.Entity.NameInStore)' connection)) {  	using (var fieldReader = fieldCommand.ExecuteReader ()) {  		while (fieldReader.Read ()) {  			var field = new FieldAttribute ();  			field.FieldName = fieldReader.GetString (0);  			field.AllowsNulls = string.Compare (fieldReader.GetString (2)' "YES"' true) == 0;  			field.DataType = fieldReader.GetString (3).ParseToDbType ();  			object val = fieldReader [4];  			if (!val.Equals (DBNull.Value)) {  				field.Length = Convert.ToInt32 (val);  			}  			val = fieldReader [5];  			if (!val.Equals (DBNull.Value)) {  				field.Precision = Convert.ToInt32 (val);  			}  			val = fieldReader [6];  			if (!val.Equals (DBNull.Value)) {  				field.Scale = Convert.ToInt32 (val);  			}  			val = fieldReader [7];  			if (!val.Equals (DBNull.Value)) {  				// identity field' so it must be the PK (or part of it)  				info.Entity.KeyScheme = KeyScheme.Identity;  			}  			// check for indexes  			if (indexInfo.ContainsKey (field.FieldName)) {  				var idx = indexInfo [field.FieldName];  				if (idx.PrimaryKey) {  					field.IsPrimaryKey = true;  					if (field.DataType == DbType.Guid) {  						info.Entity.KeyScheme = KeyScheme.GUID;  					}  				}  				field.SearchOrder = idx.SearchOrder;  			}  			// TODO: populate the remainder of the field info  			info.Fields.Add (field);  		}  	}  }  
Magic Number,EntityGenerator.Entities,SqlCeDataSource,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\EntityGenerator\Entities\SqlCeDataSource.cs,GetEntityDefinitions,The following statement contains a magic number: using (var fieldCommand = new SqlCeCommand (string.Format ("SELECT COLUMN_NAME' COLUMN_HASDEFAULT' IS_NULLABLE' DATA_TYPE' CHARACTER_MAXIMUM_LENGTH' NUMERIC_PRECISION' NUMERIC_SCALE' AUTOINC_SEED FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = '{0}'"' info.Entity.NameInStore)' connection)) {  	using (var fieldReader = fieldCommand.ExecuteReader ()) {  		while (fieldReader.Read ()) {  			var field = new FieldAttribute ();  			field.FieldName = fieldReader.GetString (0);  			field.AllowsNulls = string.Compare (fieldReader.GetString (2)' "YES"' true) == 0;  			field.DataType = fieldReader.GetString (3).ParseToDbType ();  			object val = fieldReader [4];  			if (!val.Equals (DBNull.Value)) {  				field.Length = Convert.ToInt32 (val);  			}  			val = fieldReader [5];  			if (!val.Equals (DBNull.Value)) {  				field.Precision = Convert.ToInt32 (val);  			}  			val = fieldReader [6];  			if (!val.Equals (DBNull.Value)) {  				field.Scale = Convert.ToInt32 (val);  			}  			val = fieldReader [7];  			if (!val.Equals (DBNull.Value)) {  				// identity field' so it must be the PK (or part of it)  				info.Entity.KeyScheme = KeyScheme.Identity;  			}  			// check for indexes  			if (indexInfo.ContainsKey (field.FieldName)) {  				var idx = indexInfo [field.FieldName];  				if (idx.PrimaryKey) {  					field.IsPrimaryKey = true;  					if (field.DataType == DbType.Guid) {  						info.Entity.KeyScheme = KeyScheme.GUID;  					}  				}  				field.SearchOrder = idx.SearchOrder;  			}  			// TODO: populate the remainder of the field info  			info.Fields.Add (field);  		}  	}  }  
Magic Number,EntityGenerator.Entities,SqlCeDataSource,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\EntityGenerator\Entities\SqlCeDataSource.cs,GetEntityDefinitions,The following statement contains a magic number: using (var fieldCommand = new SqlCeCommand (string.Format ("SELECT COLUMN_NAME' COLUMN_HASDEFAULT' IS_NULLABLE' DATA_TYPE' CHARACTER_MAXIMUM_LENGTH' NUMERIC_PRECISION' NUMERIC_SCALE' AUTOINC_SEED FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = '{0}'"' info.Entity.NameInStore)' connection)) {  	using (var fieldReader = fieldCommand.ExecuteReader ()) {  		while (fieldReader.Read ()) {  			var field = new FieldAttribute ();  			field.FieldName = fieldReader.GetString (0);  			field.AllowsNulls = string.Compare (fieldReader.GetString (2)' "YES"' true) == 0;  			field.DataType = fieldReader.GetString (3).ParseToDbType ();  			object val = fieldReader [4];  			if (!val.Equals (DBNull.Value)) {  				field.Length = Convert.ToInt32 (val);  			}  			val = fieldReader [5];  			if (!val.Equals (DBNull.Value)) {  				field.Precision = Convert.ToInt32 (val);  			}  			val = fieldReader [6];  			if (!val.Equals (DBNull.Value)) {  				field.Scale = Convert.ToInt32 (val);  			}  			val = fieldReader [7];  			if (!val.Equals (DBNull.Value)) {  				// identity field' so it must be the PK (or part of it)  				info.Entity.KeyScheme = KeyScheme.Identity;  			}  			// check for indexes  			if (indexInfo.ContainsKey (field.FieldName)) {  				var idx = indexInfo [field.FieldName];  				if (idx.PrimaryKey) {  					field.IsPrimaryKey = true;  					if (field.DataType == DbType.Guid) {  						info.Entity.KeyScheme = KeyScheme.GUID;  					}  				}  				field.SearchOrder = idx.SearchOrder;  			}  			// TODO: populate the remainder of the field info  			info.Fields.Add (field);  		}  	}  }  
Magic Number,EntityGenerator.Entities,SqlCeDataSource,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\EntityGenerator\Entities\SqlCeDataSource.cs,GetEntityDefinitions,The following statement contains a magic number: using (var fieldCommand = new SqlCeCommand (string.Format ("SELECT COLUMN_NAME' COLUMN_HASDEFAULT' IS_NULLABLE' DATA_TYPE' CHARACTER_MAXIMUM_LENGTH' NUMERIC_PRECISION' NUMERIC_SCALE' AUTOINC_SEED FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = '{0}'"' info.Entity.NameInStore)' connection)) {  	using (var fieldReader = fieldCommand.ExecuteReader ()) {  		while (fieldReader.Read ()) {  			var field = new FieldAttribute ();  			field.FieldName = fieldReader.GetString (0);  			field.AllowsNulls = string.Compare (fieldReader.GetString (2)' "YES"' true) == 0;  			field.DataType = fieldReader.GetString (3).ParseToDbType ();  			object val = fieldReader [4];  			if (!val.Equals (DBNull.Value)) {  				field.Length = Convert.ToInt32 (val);  			}  			val = fieldReader [5];  			if (!val.Equals (DBNull.Value)) {  				field.Precision = Convert.ToInt32 (val);  			}  			val = fieldReader [6];  			if (!val.Equals (DBNull.Value)) {  				field.Scale = Convert.ToInt32 (val);  			}  			val = fieldReader [7];  			if (!val.Equals (DBNull.Value)) {  				// identity field' so it must be the PK (or part of it)  				info.Entity.KeyScheme = KeyScheme.Identity;  			}  			// check for indexes  			if (indexInfo.ContainsKey (field.FieldName)) {  				var idx = indexInfo [field.FieldName];  				if (idx.PrimaryKey) {  					field.IsPrimaryKey = true;  					if (field.DataType == DbType.Guid) {  						info.Entity.KeyScheme = KeyScheme.GUID;  					}  				}  				field.SearchOrder = idx.SearchOrder;  			}  			// TODO: populate the remainder of the field info  			info.Fields.Add (field);  		}  	}  }  
Magic Number,EntityGenerator.Entities,SqlCeDataSource,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\EntityGenerator\Entities\SqlCeDataSource.cs,GetEntityDefinitions,The following statement contains a magic number: using (var fieldCommand = new SqlCeCommand (string.Format ("SELECT COLUMN_NAME' COLUMN_HASDEFAULT' IS_NULLABLE' DATA_TYPE' CHARACTER_MAXIMUM_LENGTH' NUMERIC_PRECISION' NUMERIC_SCALE' AUTOINC_SEED FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = '{0}'"' info.Entity.NameInStore)' connection)) {  	using (var fieldReader = fieldCommand.ExecuteReader ()) {  		while (fieldReader.Read ()) {  			var field = new FieldAttribute ();  			field.FieldName = fieldReader.GetString (0);  			field.AllowsNulls = string.Compare (fieldReader.GetString (2)' "YES"' true) == 0;  			field.DataType = fieldReader.GetString (3).ParseToDbType ();  			object val = fieldReader [4];  			if (!val.Equals (DBNull.Value)) {  				field.Length = Convert.ToInt32 (val);  			}  			val = fieldReader [5];  			if (!val.Equals (DBNull.Value)) {  				field.Precision = Convert.ToInt32 (val);  			}  			val = fieldReader [6];  			if (!val.Equals (DBNull.Value)) {  				field.Scale = Convert.ToInt32 (val);  			}  			val = fieldReader [7];  			if (!val.Equals (DBNull.Value)) {  				// identity field' so it must be the PK (or part of it)  				info.Entity.KeyScheme = KeyScheme.Identity;  			}  			// check for indexes  			if (indexInfo.ContainsKey (field.FieldName)) {  				var idx = indexInfo [field.FieldName];  				if (idx.PrimaryKey) {  					field.IsPrimaryKey = true;  					if (field.DataType == DbType.Guid) {  						info.Entity.KeyScheme = KeyScheme.GUID;  					}  				}  				field.SearchOrder = idx.SearchOrder;  			}  			// TODO: populate the remainder of the field info  			info.Fields.Add (field);  		}  	}  }  
Magic Number,EntityGenerator.Entities,SqlCeDataSource,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\EntityGenerator\Entities\SqlCeDataSource.cs,GetEntityDefinitions,The following statement contains a magic number: using (var fieldCommand = new SqlCeCommand (string.Format ("SELECT COLUMN_NAME' COLUMN_HASDEFAULT' IS_NULLABLE' DATA_TYPE' CHARACTER_MAXIMUM_LENGTH' NUMERIC_PRECISION' NUMERIC_SCALE' AUTOINC_SEED FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = '{0}'"' info.Entity.NameInStore)' connection)) {  	using (var fieldReader = fieldCommand.ExecuteReader ()) {  		while (fieldReader.Read ()) {  			var field = new FieldAttribute ();  			field.FieldName = fieldReader.GetString (0);  			field.AllowsNulls = string.Compare (fieldReader.GetString (2)' "YES"' true) == 0;  			field.DataType = fieldReader.GetString (3).ParseToDbType ();  			object val = fieldReader [4];  			if (!val.Equals (DBNull.Value)) {  				field.Length = Convert.ToInt32 (val);  			}  			val = fieldReader [5];  			if (!val.Equals (DBNull.Value)) {  				field.Precision = Convert.ToInt32 (val);  			}  			val = fieldReader [6];  			if (!val.Equals (DBNull.Value)) {  				field.Scale = Convert.ToInt32 (val);  			}  			val = fieldReader [7];  			if (!val.Equals (DBNull.Value)) {  				// identity field' so it must be the PK (or part of it)  				info.Entity.KeyScheme = KeyScheme.Identity;  			}  			// check for indexes  			if (indexInfo.ContainsKey (field.FieldName)) {  				var idx = indexInfo [field.FieldName];  				if (idx.PrimaryKey) {  					field.IsPrimaryKey = true;  					if (field.DataType == DbType.Guid) {  						info.Entity.KeyScheme = KeyScheme.GUID;  					}  				}  				field.SearchOrder = idx.SearchOrder;  			}  			// TODO: populate the remainder of the field info  			info.Fields.Add (field);  		}  	}  }  
Magic Number,EntityGenerator.Entities,SqlCeDataSource,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\EntityGenerator\Entities\SqlCeDataSource.cs,GetEntityDefinitions,The following statement contains a magic number: using (var fieldReader = fieldCommand.ExecuteReader ()) {  	while (fieldReader.Read ()) {  		var field = new FieldAttribute ();  		field.FieldName = fieldReader.GetString (0);  		field.AllowsNulls = string.Compare (fieldReader.GetString (2)' "YES"' true) == 0;  		field.DataType = fieldReader.GetString (3).ParseToDbType ();  		object val = fieldReader [4];  		if (!val.Equals (DBNull.Value)) {  			field.Length = Convert.ToInt32 (val);  		}  		val = fieldReader [5];  		if (!val.Equals (DBNull.Value)) {  			field.Precision = Convert.ToInt32 (val);  		}  		val = fieldReader [6];  		if (!val.Equals (DBNull.Value)) {  			field.Scale = Convert.ToInt32 (val);  		}  		val = fieldReader [7];  		if (!val.Equals (DBNull.Value)) {  			// identity field' so it must be the PK (or part of it)  			info.Entity.KeyScheme = KeyScheme.Identity;  		}  		// check for indexes  		if (indexInfo.ContainsKey (field.FieldName)) {  			var idx = indexInfo [field.FieldName];  			if (idx.PrimaryKey) {  				field.IsPrimaryKey = true;  				if (field.DataType == DbType.Guid) {  					info.Entity.KeyScheme = KeyScheme.GUID;  				}  			}  			field.SearchOrder = idx.SearchOrder;  		}  		// TODO: populate the remainder of the field info  		info.Fields.Add (field);  	}  }  
Magic Number,EntityGenerator.Entities,SqlCeDataSource,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\EntityGenerator\Entities\SqlCeDataSource.cs,GetEntityDefinitions,The following statement contains a magic number: using (var fieldReader = fieldCommand.ExecuteReader ()) {  	while (fieldReader.Read ()) {  		var field = new FieldAttribute ();  		field.FieldName = fieldReader.GetString (0);  		field.AllowsNulls = string.Compare (fieldReader.GetString (2)' "YES"' true) == 0;  		field.DataType = fieldReader.GetString (3).ParseToDbType ();  		object val = fieldReader [4];  		if (!val.Equals (DBNull.Value)) {  			field.Length = Convert.ToInt32 (val);  		}  		val = fieldReader [5];  		if (!val.Equals (DBNull.Value)) {  			field.Precision = Convert.ToInt32 (val);  		}  		val = fieldReader [6];  		if (!val.Equals (DBNull.Value)) {  			field.Scale = Convert.ToInt32 (val);  		}  		val = fieldReader [7];  		if (!val.Equals (DBNull.Value)) {  			// identity field' so it must be the PK (or part of it)  			info.Entity.KeyScheme = KeyScheme.Identity;  		}  		// check for indexes  		if (indexInfo.ContainsKey (field.FieldName)) {  			var idx = indexInfo [field.FieldName];  			if (idx.PrimaryKey) {  				field.IsPrimaryKey = true;  				if (field.DataType == DbType.Guid) {  					info.Entity.KeyScheme = KeyScheme.GUID;  				}  			}  			field.SearchOrder = idx.SearchOrder;  		}  		// TODO: populate the remainder of the field info  		info.Fields.Add (field);  	}  }  
Magic Number,EntityGenerator.Entities,SqlCeDataSource,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\EntityGenerator\Entities\SqlCeDataSource.cs,GetEntityDefinitions,The following statement contains a magic number: using (var fieldReader = fieldCommand.ExecuteReader ()) {  	while (fieldReader.Read ()) {  		var field = new FieldAttribute ();  		field.FieldName = fieldReader.GetString (0);  		field.AllowsNulls = string.Compare (fieldReader.GetString (2)' "YES"' true) == 0;  		field.DataType = fieldReader.GetString (3).ParseToDbType ();  		object val = fieldReader [4];  		if (!val.Equals (DBNull.Value)) {  			field.Length = Convert.ToInt32 (val);  		}  		val = fieldReader [5];  		if (!val.Equals (DBNull.Value)) {  			field.Precision = Convert.ToInt32 (val);  		}  		val = fieldReader [6];  		if (!val.Equals (DBNull.Value)) {  			field.Scale = Convert.ToInt32 (val);  		}  		val = fieldReader [7];  		if (!val.Equals (DBNull.Value)) {  			// identity field' so it must be the PK (or part of it)  			info.Entity.KeyScheme = KeyScheme.Identity;  		}  		// check for indexes  		if (indexInfo.ContainsKey (field.FieldName)) {  			var idx = indexInfo [field.FieldName];  			if (idx.PrimaryKey) {  				field.IsPrimaryKey = true;  				if (field.DataType == DbType.Guid) {  					info.Entity.KeyScheme = KeyScheme.GUID;  				}  			}  			field.SearchOrder = idx.SearchOrder;  		}  		// TODO: populate the remainder of the field info  		info.Fields.Add (field);  	}  }  
Magic Number,EntityGenerator.Entities,SqlCeDataSource,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\EntityGenerator\Entities\SqlCeDataSource.cs,GetEntityDefinitions,The following statement contains a magic number: using (var fieldReader = fieldCommand.ExecuteReader ()) {  	while (fieldReader.Read ()) {  		var field = new FieldAttribute ();  		field.FieldName = fieldReader.GetString (0);  		field.AllowsNulls = string.Compare (fieldReader.GetString (2)' "YES"' true) == 0;  		field.DataType = fieldReader.GetString (3).ParseToDbType ();  		object val = fieldReader [4];  		if (!val.Equals (DBNull.Value)) {  			field.Length = Convert.ToInt32 (val);  		}  		val = fieldReader [5];  		if (!val.Equals (DBNull.Value)) {  			field.Precision = Convert.ToInt32 (val);  		}  		val = fieldReader [6];  		if (!val.Equals (DBNull.Value)) {  			field.Scale = Convert.ToInt32 (val);  		}  		val = fieldReader [7];  		if (!val.Equals (DBNull.Value)) {  			// identity field' so it must be the PK (or part of it)  			info.Entity.KeyScheme = KeyScheme.Identity;  		}  		// check for indexes  		if (indexInfo.ContainsKey (field.FieldName)) {  			var idx = indexInfo [field.FieldName];  			if (idx.PrimaryKey) {  				field.IsPrimaryKey = true;  				if (field.DataType == DbType.Guid) {  					info.Entity.KeyScheme = KeyScheme.GUID;  				}  			}  			field.SearchOrder = idx.SearchOrder;  		}  		// TODO: populate the remainder of the field info  		info.Fields.Add (field);  	}  }  
Magic Number,EntityGenerator.Entities,SqlCeDataSource,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\EntityGenerator\Entities\SqlCeDataSource.cs,GetEntityDefinitions,The following statement contains a magic number: using (var fieldReader = fieldCommand.ExecuteReader ()) {  	while (fieldReader.Read ()) {  		var field = new FieldAttribute ();  		field.FieldName = fieldReader.GetString (0);  		field.AllowsNulls = string.Compare (fieldReader.GetString (2)' "YES"' true) == 0;  		field.DataType = fieldReader.GetString (3).ParseToDbType ();  		object val = fieldReader [4];  		if (!val.Equals (DBNull.Value)) {  			field.Length = Convert.ToInt32 (val);  		}  		val = fieldReader [5];  		if (!val.Equals (DBNull.Value)) {  			field.Precision = Convert.ToInt32 (val);  		}  		val = fieldReader [6];  		if (!val.Equals (DBNull.Value)) {  			field.Scale = Convert.ToInt32 (val);  		}  		val = fieldReader [7];  		if (!val.Equals (DBNull.Value)) {  			// identity field' so it must be the PK (or part of it)  			info.Entity.KeyScheme = KeyScheme.Identity;  		}  		// check for indexes  		if (indexInfo.ContainsKey (field.FieldName)) {  			var idx = indexInfo [field.FieldName];  			if (idx.PrimaryKey) {  				field.IsPrimaryKey = true;  				if (field.DataType == DbType.Guid) {  					info.Entity.KeyScheme = KeyScheme.GUID;  				}  			}  			field.SearchOrder = idx.SearchOrder;  		}  		// TODO: populate the remainder of the field info  		info.Fields.Add (field);  	}  }  
Magic Number,EntityGenerator.Entities,SqlCeDataSource,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\EntityGenerator\Entities\SqlCeDataSource.cs,GetEntityDefinitions,The following statement contains a magic number: using (var fieldReader = fieldCommand.ExecuteReader ()) {  	while (fieldReader.Read ()) {  		var field = new FieldAttribute ();  		field.FieldName = fieldReader.GetString (0);  		field.AllowsNulls = string.Compare (fieldReader.GetString (2)' "YES"' true) == 0;  		field.DataType = fieldReader.GetString (3).ParseToDbType ();  		object val = fieldReader [4];  		if (!val.Equals (DBNull.Value)) {  			field.Length = Convert.ToInt32 (val);  		}  		val = fieldReader [5];  		if (!val.Equals (DBNull.Value)) {  			field.Precision = Convert.ToInt32 (val);  		}  		val = fieldReader [6];  		if (!val.Equals (DBNull.Value)) {  			field.Scale = Convert.ToInt32 (val);  		}  		val = fieldReader [7];  		if (!val.Equals (DBNull.Value)) {  			// identity field' so it must be the PK (or part of it)  			info.Entity.KeyScheme = KeyScheme.Identity;  		}  		// check for indexes  		if (indexInfo.ContainsKey (field.FieldName)) {  			var idx = indexInfo [field.FieldName];  			if (idx.PrimaryKey) {  				field.IsPrimaryKey = true;  				if (field.DataType == DbType.Guid) {  					info.Entity.KeyScheme = KeyScheme.GUID;  				}  			}  			field.SearchOrder = idx.SearchOrder;  		}  		// TODO: populate the remainder of the field info  		info.Fields.Add (field);  	}  }  
Magic Number,EntityGenerator.Entities,SqlCeDataSource,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\EntityGenerator\Entities\SqlCeDataSource.cs,GetEntityDefinitions,The following statement contains a magic number: while (fieldReader.Read ()) {  	var field = new FieldAttribute ();  	field.FieldName = fieldReader.GetString (0);  	field.AllowsNulls = string.Compare (fieldReader.GetString (2)' "YES"' true) == 0;  	field.DataType = fieldReader.GetString (3).ParseToDbType ();  	object val = fieldReader [4];  	if (!val.Equals (DBNull.Value)) {  		field.Length = Convert.ToInt32 (val);  	}  	val = fieldReader [5];  	if (!val.Equals (DBNull.Value)) {  		field.Precision = Convert.ToInt32 (val);  	}  	val = fieldReader [6];  	if (!val.Equals (DBNull.Value)) {  		field.Scale = Convert.ToInt32 (val);  	}  	val = fieldReader [7];  	if (!val.Equals (DBNull.Value)) {  		// identity field' so it must be the PK (or part of it)  		info.Entity.KeyScheme = KeyScheme.Identity;  	}  	// check for indexes  	if (indexInfo.ContainsKey (field.FieldName)) {  		var idx = indexInfo [field.FieldName];  		if (idx.PrimaryKey) {  			field.IsPrimaryKey = true;  			if (field.DataType == DbType.Guid) {  				info.Entity.KeyScheme = KeyScheme.GUID;  			}  		}  		field.SearchOrder = idx.SearchOrder;  	}  	// TODO: populate the remainder of the field info  	info.Fields.Add (field);  }  
Magic Number,EntityGenerator.Entities,SqlCeDataSource,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\EntityGenerator\Entities\SqlCeDataSource.cs,GetEntityDefinitions,The following statement contains a magic number: while (fieldReader.Read ()) {  	var field = new FieldAttribute ();  	field.FieldName = fieldReader.GetString (0);  	field.AllowsNulls = string.Compare (fieldReader.GetString (2)' "YES"' true) == 0;  	field.DataType = fieldReader.GetString (3).ParseToDbType ();  	object val = fieldReader [4];  	if (!val.Equals (DBNull.Value)) {  		field.Length = Convert.ToInt32 (val);  	}  	val = fieldReader [5];  	if (!val.Equals (DBNull.Value)) {  		field.Precision = Convert.ToInt32 (val);  	}  	val = fieldReader [6];  	if (!val.Equals (DBNull.Value)) {  		field.Scale = Convert.ToInt32 (val);  	}  	val = fieldReader [7];  	if (!val.Equals (DBNull.Value)) {  		// identity field' so it must be the PK (or part of it)  		info.Entity.KeyScheme = KeyScheme.Identity;  	}  	// check for indexes  	if (indexInfo.ContainsKey (field.FieldName)) {  		var idx = indexInfo [field.FieldName];  		if (idx.PrimaryKey) {  			field.IsPrimaryKey = true;  			if (field.DataType == DbType.Guid) {  				info.Entity.KeyScheme = KeyScheme.GUID;  			}  		}  		field.SearchOrder = idx.SearchOrder;  	}  	// TODO: populate the remainder of the field info  	info.Fields.Add (field);  }  
Magic Number,EntityGenerator.Entities,SqlCeDataSource,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\EntityGenerator\Entities\SqlCeDataSource.cs,GetEntityDefinitions,The following statement contains a magic number: while (fieldReader.Read ()) {  	var field = new FieldAttribute ();  	field.FieldName = fieldReader.GetString (0);  	field.AllowsNulls = string.Compare (fieldReader.GetString (2)' "YES"' true) == 0;  	field.DataType = fieldReader.GetString (3).ParseToDbType ();  	object val = fieldReader [4];  	if (!val.Equals (DBNull.Value)) {  		field.Length = Convert.ToInt32 (val);  	}  	val = fieldReader [5];  	if (!val.Equals (DBNull.Value)) {  		field.Precision = Convert.ToInt32 (val);  	}  	val = fieldReader [6];  	if (!val.Equals (DBNull.Value)) {  		field.Scale = Convert.ToInt32 (val);  	}  	val = fieldReader [7];  	if (!val.Equals (DBNull.Value)) {  		// identity field' so it must be the PK (or part of it)  		info.Entity.KeyScheme = KeyScheme.Identity;  	}  	// check for indexes  	if (indexInfo.ContainsKey (field.FieldName)) {  		var idx = indexInfo [field.FieldName];  		if (idx.PrimaryKey) {  			field.IsPrimaryKey = true;  			if (field.DataType == DbType.Guid) {  				info.Entity.KeyScheme = KeyScheme.GUID;  			}  		}  		field.SearchOrder = idx.SearchOrder;  	}  	// TODO: populate the remainder of the field info  	info.Fields.Add (field);  }  
Magic Number,EntityGenerator.Entities,SqlCeDataSource,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\EntityGenerator\Entities\SqlCeDataSource.cs,GetEntityDefinitions,The following statement contains a magic number: while (fieldReader.Read ()) {  	var field = new FieldAttribute ();  	field.FieldName = fieldReader.GetString (0);  	field.AllowsNulls = string.Compare (fieldReader.GetString (2)' "YES"' true) == 0;  	field.DataType = fieldReader.GetString (3).ParseToDbType ();  	object val = fieldReader [4];  	if (!val.Equals (DBNull.Value)) {  		field.Length = Convert.ToInt32 (val);  	}  	val = fieldReader [5];  	if (!val.Equals (DBNull.Value)) {  		field.Precision = Convert.ToInt32 (val);  	}  	val = fieldReader [6];  	if (!val.Equals (DBNull.Value)) {  		field.Scale = Convert.ToInt32 (val);  	}  	val = fieldReader [7];  	if (!val.Equals (DBNull.Value)) {  		// identity field' so it must be the PK (or part of it)  		info.Entity.KeyScheme = KeyScheme.Identity;  	}  	// check for indexes  	if (indexInfo.ContainsKey (field.FieldName)) {  		var idx = indexInfo [field.FieldName];  		if (idx.PrimaryKey) {  			field.IsPrimaryKey = true;  			if (field.DataType == DbType.Guid) {  				info.Entity.KeyScheme = KeyScheme.GUID;  			}  		}  		field.SearchOrder = idx.SearchOrder;  	}  	// TODO: populate the remainder of the field info  	info.Fields.Add (field);  }  
Magic Number,EntityGenerator.Entities,SqlCeDataSource,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\EntityGenerator\Entities\SqlCeDataSource.cs,GetEntityDefinitions,The following statement contains a magic number: while (fieldReader.Read ()) {  	var field = new FieldAttribute ();  	field.FieldName = fieldReader.GetString (0);  	field.AllowsNulls = string.Compare (fieldReader.GetString (2)' "YES"' true) == 0;  	field.DataType = fieldReader.GetString (3).ParseToDbType ();  	object val = fieldReader [4];  	if (!val.Equals (DBNull.Value)) {  		field.Length = Convert.ToInt32 (val);  	}  	val = fieldReader [5];  	if (!val.Equals (DBNull.Value)) {  		field.Precision = Convert.ToInt32 (val);  	}  	val = fieldReader [6];  	if (!val.Equals (DBNull.Value)) {  		field.Scale = Convert.ToInt32 (val);  	}  	val = fieldReader [7];  	if (!val.Equals (DBNull.Value)) {  		// identity field' so it must be the PK (or part of it)  		info.Entity.KeyScheme = KeyScheme.Identity;  	}  	// check for indexes  	if (indexInfo.ContainsKey (field.FieldName)) {  		var idx = indexInfo [field.FieldName];  		if (idx.PrimaryKey) {  			field.IsPrimaryKey = true;  			if (field.DataType == DbType.Guid) {  				info.Entity.KeyScheme = KeyScheme.GUID;  			}  		}  		field.SearchOrder = idx.SearchOrder;  	}  	// TODO: populate the remainder of the field info  	info.Fields.Add (field);  }  
Magic Number,EntityGenerator.Entities,SqlCeDataSource,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\EntityGenerator\Entities\SqlCeDataSource.cs,GetEntityDefinitions,The following statement contains a magic number: while (fieldReader.Read ()) {  	var field = new FieldAttribute ();  	field.FieldName = fieldReader.GetString (0);  	field.AllowsNulls = string.Compare (fieldReader.GetString (2)' "YES"' true) == 0;  	field.DataType = fieldReader.GetString (3).ParseToDbType ();  	object val = fieldReader [4];  	if (!val.Equals (DBNull.Value)) {  		field.Length = Convert.ToInt32 (val);  	}  	val = fieldReader [5];  	if (!val.Equals (DBNull.Value)) {  		field.Precision = Convert.ToInt32 (val);  	}  	val = fieldReader [6];  	if (!val.Equals (DBNull.Value)) {  		field.Scale = Convert.ToInt32 (val);  	}  	val = fieldReader [7];  	if (!val.Equals (DBNull.Value)) {  		// identity field' so it must be the PK (or part of it)  		info.Entity.KeyScheme = KeyScheme.Identity;  	}  	// check for indexes  	if (indexInfo.ContainsKey (field.FieldName)) {  		var idx = indexInfo [field.FieldName];  		if (idx.PrimaryKey) {  			field.IsPrimaryKey = true;  			if (field.DataType == DbType.Guid) {  				info.Entity.KeyScheme = KeyScheme.GUID;  			}  		}  		field.SearchOrder = idx.SearchOrder;  	}  	// TODO: populate the remainder of the field info  	info.Fields.Add (field);  }  
Magic Number,EntityGenerator.Entities,SqlCeDataSource,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\EntityGenerator\Entities\SqlCeDataSource.cs,GetEntityDefinitions,The following statement contains a magic number: field.AllowsNulls = string.Compare (fieldReader.GetString (2)' "YES"' true) == 0;  
Magic Number,EntityGenerator.Entities,SqlCeDataSource,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\EntityGenerator\Entities\SqlCeDataSource.cs,GetEntityDefinitions,The following statement contains a magic number: field.DataType = fieldReader.GetString (3).ParseToDbType ();  
Magic Number,EntityGenerator.Entities,SqlCeDataSource,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\EntityGenerator\Entities\SqlCeDataSource.cs,GetEntityDefinitions,The following statement contains a magic number: val = fieldReader [5];  
Magic Number,EntityGenerator.Entities,SqlCeDataSource,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\EntityGenerator\Entities\SqlCeDataSource.cs,GetEntityDefinitions,The following statement contains a magic number: val = fieldReader [6];  
Magic Number,EntityGenerator.Entities,SqlCeDataSource,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\EntityGenerator\Entities\SqlCeDataSource.cs,GetEntityDefinitions,The following statement contains a magic number: val = fieldReader [7];  
Magic Number,EntityGenerator.Entities,SqlCeDataSource,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\EntityGenerator\Entities\SqlCeDataSource.cs,GetEntityDefinitions,The following statement contains a magic number: using (var referenceSourceCommand = new SqlCeCommand (string.Format ("SELECT a.Constraint_name' a.TABLE_NAME' b.COLUMN_NAME " + "FROM information_schema.table_constraints AS a " + "INNER JOIN information_schema.KEY_COLUMN_USAGE AS b ON a.CONSTRAINT_NAME = b.CONSTRAINT_NAME " + "WHERE (a.TABLE_NAME = '{0}') AND (a.CONSTRAINT_TYPE = 'FOREIGN KEY')"' info.Entity.NameInStore)' connection)) {  	string constraintName = null;  	string localField = null;  	string remoteTable = null;  	string remoteFieldName = null;  	bool referenceExists = false;  	using (var srcReader = referenceSourceCommand.ExecuteReader ()) {  		while (srcReader.Read ()) {  			constraintName = (string)srcReader [0];  			localField = (string)srcReader [2];  			using (var referenceTargetCommand = new SqlCeCommand (string.Format ("SELECT a.UNIQUE_CONSTRAINT_TABLE_NAME' b.COLUMN_NAME " + "FROM information_schema.REFERENTIAL_CONSTRAINTS AS a INNER JOIN " + "information_schema.KEY_COLUMN_USAGE AS b ON a.Constraint_name = b.CONSTRAINT_NAME " + "WHERE a.CONSTRAINT_NAME = '{0}'"' constraintName)' connection)) {  				using (var targetReader = referenceTargetCommand.ExecuteReader ()) {  					while (targetReader.Read ()) {  						remoteTable = (string)targetReader [0];  						remoteFieldName = (string)targetReader [1];  						referenceExists = true;  						break;  					}  				}  			}  		}  	}  	if (referenceExists) {  		var reference = new ReferenceInfo () {  			ReferenceTable = remoteTable'  			LocalFieldName = localField'  			RemoteFieldName = remoteFieldName  		};  		info.References.Add (reference);  	}  }  
Magic Number,EntityGenerator.Entities,SqlCeDataSource,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\EntityGenerator\Entities\SqlCeDataSource.cs,GetEntityDefinitions,The following statement contains a magic number: using (var srcReader = referenceSourceCommand.ExecuteReader ()) {  	while (srcReader.Read ()) {  		constraintName = (string)srcReader [0];  		localField = (string)srcReader [2];  		using (var referenceTargetCommand = new SqlCeCommand (string.Format ("SELECT a.UNIQUE_CONSTRAINT_TABLE_NAME' b.COLUMN_NAME " + "FROM information_schema.REFERENTIAL_CONSTRAINTS AS a INNER JOIN " + "information_schema.KEY_COLUMN_USAGE AS b ON a.Constraint_name = b.CONSTRAINT_NAME " + "WHERE a.CONSTRAINT_NAME = '{0}'"' constraintName)' connection)) {  			using (var targetReader = referenceTargetCommand.ExecuteReader ()) {  				while (targetReader.Read ()) {  					remoteTable = (string)targetReader [0];  					remoteFieldName = (string)targetReader [1];  					referenceExists = true;  					break;  				}  			}  		}  	}  }  
Magic Number,EntityGenerator.Entities,SqlCeDataSource,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\EntityGenerator\Entities\SqlCeDataSource.cs,GetEntityDefinitions,The following statement contains a magic number: while (srcReader.Read ()) {  	constraintName = (string)srcReader [0];  	localField = (string)srcReader [2];  	using (var referenceTargetCommand = new SqlCeCommand (string.Format ("SELECT a.UNIQUE_CONSTRAINT_TABLE_NAME' b.COLUMN_NAME " + "FROM information_schema.REFERENTIAL_CONSTRAINTS AS a INNER JOIN " + "information_schema.KEY_COLUMN_USAGE AS b ON a.Constraint_name = b.CONSTRAINT_NAME " + "WHERE a.CONSTRAINT_NAME = '{0}'"' constraintName)' connection)) {  		using (var targetReader = referenceTargetCommand.ExecuteReader ()) {  			while (targetReader.Read ()) {  				remoteTable = (string)targetReader [0];  				remoteFieldName = (string)targetReader [1];  				referenceExists = true;  				break;  			}  		}  	}  }  
Magic Number,EntityGenerator.Entities,SqlCeDataSource,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\EntityGenerator\Entities\SqlCeDataSource.cs,GetEntityDefinitions,The following statement contains a magic number: localField = (string)srcReader [2];  
Magic Number,EntityGenerator.Entities,SqlCeDataSource,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\EntityGenerator\Entities\SqlCeDataSource.cs,ValidateConnection,The following statement contains a magic number: if (m_firstConnection) {  	var connection = new SqlCeConnection (connectionString);  	// see if we need a password  	try {  		connection.Open ();  	}  	catch (SqlCeException ex) {  		if (ex.NativeError == 25028) {  			// a password is required.  			var dialog = new GetPasswordDialog ();  			if (dialog.ShowDialog () == DialogResult.OK) {  				connectionString += (";password=" + dialog.Password);  				connection.ConnectionString = connectionString;  				try {  					connection.Open ();  				}  				catch (SqlCeException exi) {  					if (exi.NativeError == 25028) {  						throw new InvalidPasswordException ();  					}  					throw;  				}  			}  			else {  				throw new InvalidPasswordException ();  			}  		}  		else {  			throw;  		}  	}  	finally {  		if (connection != null) {  			connection.Dispose ();  		}  	}  	m_connectionString = connectionString;  	m_firstConnection = false;  }  
Magic Number,EntityGenerator.Entities,SqlCeDataSource,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\EntityGenerator\Entities\SqlCeDataSource.cs,ValidateConnection,The following statement contains a magic number: if (m_firstConnection) {  	var connection = new SqlCeConnection (connectionString);  	// see if we need a password  	try {  		connection.Open ();  	}  	catch (SqlCeException ex) {  		if (ex.NativeError == 25028) {  			// a password is required.  			var dialog = new GetPasswordDialog ();  			if (dialog.ShowDialog () == DialogResult.OK) {  				connectionString += (";password=" + dialog.Password);  				connection.ConnectionString = connectionString;  				try {  					connection.Open ();  				}  				catch (SqlCeException exi) {  					if (exi.NativeError == 25028) {  						throw new InvalidPasswordException ();  					}  					throw;  				}  			}  			else {  				throw new InvalidPasswordException ();  			}  		}  		else {  			throw;  		}  	}  	finally {  		if (connection != null) {  			connection.Dispose ();  		}  	}  	m_connectionString = connectionString;  	m_firstConnection = false;  }  
Magic Number,EntityGenerator.Entities,SqlCeDataSource,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\EntityGenerator\Entities\SqlCeDataSource.cs,ValidateConnection,The following statement contains a magic number: try {  	connection.Open ();  }  catch (SqlCeException ex) {  	if (ex.NativeError == 25028) {  		// a password is required.  		var dialog = new GetPasswordDialog ();  		if (dialog.ShowDialog () == DialogResult.OK) {  			connectionString += (";password=" + dialog.Password);  			connection.ConnectionString = connectionString;  			try {  				connection.Open ();  			}  			catch (SqlCeException exi) {  				if (exi.NativeError == 25028) {  					throw new InvalidPasswordException ();  				}  				throw;  			}  		}  		else {  			throw new InvalidPasswordException ();  		}  	}  	else {  		throw;  	}  }  finally {  	if (connection != null) {  		connection.Dispose ();  	}  }  
Magic Number,EntityGenerator.Entities,SqlCeDataSource,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\EntityGenerator\Entities\SqlCeDataSource.cs,ValidateConnection,The following statement contains a magic number: try {  	connection.Open ();  }  catch (SqlCeException ex) {  	if (ex.NativeError == 25028) {  		// a password is required.  		var dialog = new GetPasswordDialog ();  		if (dialog.ShowDialog () == DialogResult.OK) {  			connectionString += (";password=" + dialog.Password);  			connection.ConnectionString = connectionString;  			try {  				connection.Open ();  			}  			catch (SqlCeException exi) {  				if (exi.NativeError == 25028) {  					throw new InvalidPasswordException ();  				}  				throw;  			}  		}  		else {  			throw new InvalidPasswordException ();  		}  	}  	else {  		throw;  	}  }  finally {  	if (connection != null) {  		connection.Dispose ();  	}  }  
Magic Number,EntityGenerator.Entities,SqlCeDataSource,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\EntityGenerator\Entities\SqlCeDataSource.cs,ValidateConnection,The following statement contains a magic number: if (ex.NativeError == 25028) {  	// a password is required.  	var dialog = new GetPasswordDialog ();  	if (dialog.ShowDialog () == DialogResult.OK) {  		connectionString += (";password=" + dialog.Password);  		connection.ConnectionString = connectionString;  		try {  			connection.Open ();  		}  		catch (SqlCeException exi) {  			if (exi.NativeError == 25028) {  				throw new InvalidPasswordException ();  			}  			throw;  		}  	}  	else {  		throw new InvalidPasswordException ();  	}  }  else {  	throw;  }  
Magic Number,EntityGenerator.Entities,SqlCeDataSource,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\EntityGenerator\Entities\SqlCeDataSource.cs,ValidateConnection,The following statement contains a magic number: if (ex.NativeError == 25028) {  	// a password is required.  	var dialog = new GetPasswordDialog ();  	if (dialog.ShowDialog () == DialogResult.OK) {  		connectionString += (";password=" + dialog.Password);  		connection.ConnectionString = connectionString;  		try {  			connection.Open ();  		}  		catch (SqlCeException exi) {  			if (exi.NativeError == 25028) {  				throw new InvalidPasswordException ();  			}  			throw;  		}  	}  	else {  		throw new InvalidPasswordException ();  	}  }  else {  	throw;  }  
Magic Number,EntityGenerator.Entities,SqlCeDataSource,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\EntityGenerator\Entities\SqlCeDataSource.cs,ValidateConnection,The following statement contains a magic number: if (dialog.ShowDialog () == DialogResult.OK) {  	connectionString += (";password=" + dialog.Password);  	connection.ConnectionString = connectionString;  	try {  		connection.Open ();  	}  	catch (SqlCeException exi) {  		if (exi.NativeError == 25028) {  			throw new InvalidPasswordException ();  		}  		throw;  	}  }  else {  	throw new InvalidPasswordException ();  }  
Magic Number,EntityGenerator.Entities,SqlCeDataSource,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\EntityGenerator\Entities\SqlCeDataSource.cs,ValidateConnection,The following statement contains a magic number: try {  	connection.Open ();  }  catch (SqlCeException exi) {  	if (exi.NativeError == 25028) {  		throw new InvalidPasswordException ();  	}  	throw;  }  
Magic Number,EntityGenerator.Entities,SqlCeDataSource,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\EntityGenerator\Entities\SqlCeDataSource.cs,ValidateConnection,The following statement contains a magic number: if (exi.NativeError == 25028) {  	throw new InvalidPasswordException ();  }  
Missing Default,EntityGenerator.Dialogs,GetPasswordDialog,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\EntityGenerator\Dialogs\GetPasswordDialog.cs,password_KeyDown,The following switch statement is missing a default case: switch (e.KeyCode) {  case Keys.Enter:  	AcceptPassword ();  	break;  case Keys.Escape:  	CancelPassword ();  	break;  }  
Missing Default,EntityGenerator.Services,WizardService,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\EntityGenerator\Services\WizardService.cs,Back,The following switch statement is missing a default case: switch (CurrentStep) {  case WizardStep.SelectEntities:  	SetStep (WizardStep.SelectStore);  	nextView = RootWorkItem.SmartParts.GetFirstOrCreate<SelectStoreView> ();  	break;  case WizardStep.EditEntities:  	SetStep (WizardStep.SelectEntities);  	nextView = RootWorkItem.SmartParts.GetFirstOrCreate<SelectEntitiesView> ();  	break;  case WizardStep.GenerateCode:  	SetStep (WizardStep.EditEntities);  	nextView = RootWorkItem.SmartParts.GetFirstOrCreate<EditEntitiesView> ();  	break;  }  
Missing Default,EntityGenerator.Services,WizardService,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\EntityGenerator\Services\WizardService.cs,Next,The following switch statement is missing a default case: switch (CurrentStep) {  case WizardStep.SelectStore:  	SetStep (WizardStep.SelectEntities);  	nextView = RootWorkItem.SmartParts.GetFirstOrCreate<SelectEntitiesView> ();  	break;  case WizardStep.SelectEntities:  	SetStep (WizardStep.EditEntities);  	nextView = RootWorkItem.SmartParts.GetFirstOrCreate<EditEntitiesView> ();  	break;  case WizardStep.EditEntities:  case WizardStep.GenerateCode:  	SetStep (WizardStep.GenerateCode);  	nextView = RootWorkItem.SmartParts.GetFirstOrCreate<GenerateCodeView> ();  	break;  }  
Missing Default,EntityGenerator.Services,WizardService,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\EntityGenerator\Services\WizardService.cs,SetStep,The following switch statement is missing a default case: switch (newStep) {  case WizardStep.SelectStore:  	Presenter.RestartAllowed = false;  	Presenter.BackwardAllowed = false;  	Presenter.ForwardAllowed = true;  	Presenter.LastStep = false;  	break;  case WizardStep.SelectEntities:  	Presenter.RestartAllowed = true;  	Presenter.BackwardAllowed = true;  	Presenter.ForwardAllowed = true;  	Presenter.LastStep = false;  	break;  case WizardStep.EditEntities:  	Presenter.RestartAllowed = true;  	Presenter.BackwardAllowed = true;  	Presenter.ForwardAllowed = true;  	Presenter.LastStep = false;  	break;  case WizardStep.GenerateCode:  	Presenter.RestartAllowed = true;  	Presenter.BackwardAllowed = true;  	Presenter.ForwardAllowed = true;  	Presenter.LastStep = true;  	break;  }  
