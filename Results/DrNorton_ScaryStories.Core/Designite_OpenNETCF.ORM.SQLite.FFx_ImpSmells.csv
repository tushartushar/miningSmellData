Implementation smell,Namespace,Class,File,Method,Description
Long Method,OpenNETCF.ORM,SQLiteDataStore,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\OpenNETCF.ORM.SQLite\SQLiteDataStore.cs,Select,The method has 154 lines of code.
Long Method,OpenNETCF.ORM,SQLiteDataStore,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\OpenNETCF.ORM.SQLite\SQLiteDataStore.cs,OnUpdate,The method has 125 lines of code.
Long Method,OpenNETCF.ORM,SQLiteDataStore,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\OpenNETCF.ORM.SQLite\SQLiteDataStore.cs,Fetch,The method has 154 lines of code.
Complex Method,OpenNETCF.ORM,SQLiteDataStore,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\OpenNETCF.ORM.SQLite\SQLiteDataStore.cs,OnInsert,Cyclomatic complexity of the method is 13
Complex Method,OpenNETCF.ORM,SQLiteDataStore,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\OpenNETCF.ORM.SQLite\SQLiteDataStore.cs,GetPrimaryKeyIndexName,Cyclomatic complexity of the method is 8
Complex Method,OpenNETCF.ORM,SQLiteDataStore,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\OpenNETCF.ORM.SQLite\SQLiteDataStore.cs,Select,Cyclomatic complexity of the method is 32
Complex Method,OpenNETCF.ORM,SQLiteDataStore,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\OpenNETCF.ORM.SQLite\SQLiteDataStore.cs,OnUpdate,Cyclomatic complexity of the method is 27
Complex Method,OpenNETCF.ORM,SQLiteDataStore,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\OpenNETCF.ORM.SQLite\SQLiteDataStore.cs,Fetch,Cyclomatic complexity of the method is 32
Long Parameter List,OpenNETCF.ORM,SQLiteDataStore,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\OpenNETCF.ORM.SQLite\SQLiteDataStore.cs,VerifyIndex,The method has 5 parameters.
Long Parameter List,OpenNETCF.ORM,SQLiteDataStore,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\OpenNETCF.ORM.SQLite\SQLiteDataStore.cs,Select,The method has 6 parameters.
Long Parameter List,OpenNETCF.ORM,SQLiteDataStore,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\OpenNETCF.ORM.SQLite\SQLiteDataStore.cs,Fetch,The method has 5 parameters.
Long Parameter List,OpenNETCF.ORM,SQLiteDataStore,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\OpenNETCF.ORM.SQLite\SQLiteDataStore.cs,Fetch,The method has 5 parameters.
Long Statement,OpenNETCF.ORM,SQLiteDataStore,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\OpenNETCF.ORM.SQLite\SQLiteDataStore.cs,OnInsert,The length of the statement  "					throw new MissingMethodException (string.Format ("The field '{0}' requires a custom serializer/deserializer method pair in the '{1}' Entity"' field.FieldName' entityName)); " is 172.
Long Statement,OpenNETCF.ORM,SQLiteDataStore,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\OpenNETCF.ORM.SQLite\SQLiteDataStore.cs,ValidateTable,The length of the statement  "	//        // yes' I realize hard-coded ordinals are not a good practice' but the SQL isn't changing' it's method specific " is 121.
Long Statement,OpenNETCF.ORM,SQLiteDataStore,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\OpenNETCF.ORM.SQLite\SQLiteDataStore.cs,VerifyIndex,The length of the statement  "		var indexName = string.Format ("ORM_IDX_{0}_{1}_{2}"' entityName' fieldName' searchOrder == FieldSearchOrder.Descending ? "DESC" : "ASC"); " is 138.
Long Statement,OpenNETCF.ORM,SQLiteDataStore,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\OpenNETCF.ORM.SQLite\SQLiteDataStore.cs,VerifyIndex,The length of the statement  "				sql = string.Format ("CREATE INDEX {0} ON {1}({2} {3})"' indexName' entityName' fieldName' searchOrder == FieldSearchOrder.Descending ? "DESC" : string.Empty); " is 159.
Long Statement,OpenNETCF.ORM,SQLiteDataStore,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\OpenNETCF.ORM.SQLite\SQLiteDataStore.cs,Select,The length of the statement  "											throw new MissingMethodException (string.Format ("The field '{0}' requires a custom serializer/deserializer method pair in the '{1}' Entity"' field.FieldName' entityName)); " is 172.
Long Statement,OpenNETCF.ORM,SQLiteDataStore,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\OpenNETCF.ORM.SQLite\SQLiteDataStore.cs,Select,The length of the statement  "									else if ((field.PropertyInfo.PropertyType.Equals (typeof(Int32))) || (field.PropertyInfo.PropertyType.Equals (typeof(Int32?)))) { " is 129.
Long Statement,OpenNETCF.ORM,SQLiteDataStore,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\OpenNETCF.ORM.SQLite\SQLiteDataStore.cs,OnUpdate,The length of the statement  "			command.CommandText = string.Format ("SELECT * FROM {0} WHERE [{1}] = @keyparam"' entityName' Entities [entityName].Fields.KeyField.FieldName); " is 143.
Long Statement,OpenNETCF.ORM,SQLiteDataStore,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\OpenNETCF.ORM.SQLite\SQLiteDataStore.cs,OnUpdate,The length of the statement  "					throw new RecordNotFoundException ("Cannot locate a record with the provided primary key.  You cannot update a primary key value through the Update method"); " is 157.
Long Statement,OpenNETCF.ORM,SQLiteDataStore,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\OpenNETCF.ORM.SQLite\SQLiteDataStore.cs,OnUpdate,The length of the statement  "								throw new MissingMethodException (string.Format ("The field '{0}' requires a custom serializer/deserializer method pair in the '{1}' Entity"' field.FieldName' entityName)); " is 172.
Long Statement,OpenNETCF.ORM,SQLiteDataStore,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\OpenNETCF.ORM.SQLite\SQLiteDataStore.cs,OnUpdate,The length of the statement  "						var foreignKey = refItem.GetType ().GetProperty (reference.ReferenceField' BindingFlags.Instance | BindingFlags.Public); " is 120.
Long Statement,OpenNETCF.ORM,SQLiteDataStore,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\OpenNETCF.ORM.SQLite\SQLiteDataStore.cs,Fetch,The length of the statement  "		command = GetSelectCommand<SQLiteCommand' SQLiteParameter> (entityName' sortOrder' sortField' out tableDirect' fetchCount); " is 123.
Long Statement,OpenNETCF.ORM,SQLiteDataStore,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\OpenNETCF.ORM.SQLite\SQLiteDataStore.cs,Fetch,The length of the statement  "											throw new MissingMethodException (string.Format ("The field '{0}' requires a custom serializer/deserializer method pair in the '{1}' Entity"' field.FieldName' entityName)); " is 172.
Long Statement,OpenNETCF.ORM,SQLiteDataStore,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\OpenNETCF.ORM.SQLite\SQLiteDataStore.cs,Fetch,The length of the statement  "									else if ((field.PropertyInfo.PropertyType.Equals (typeof(Int32))) || (field.PropertyInfo.PropertyType.Equals (typeof(Int32?)))) { " is 129.
Long Statement,OpenNETCF.ORM,SQLiteDataStore,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\OpenNETCF.ORM.SQLite\SQLiteDataStore.cs,GetLastDateTimeInsert,The length of the statement  "	using (var command = new SQLiteCommand (String.Format ("SELECT  CreatedTime FROM {0} ORDER BY CreatedTime DESC LIMIT 1"' tableName)' connection as SQLiteConnection)) { " is 167.
Magic Number,OpenNETCF.ORM,SQLiteDataStore,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\OpenNETCF.ORM.SQLite\SQLiteDataStore.cs,GetPrimaryKeyIndexName,The following statement contains a magic number: try {  	string name = null;  	string sql = string.Format ("PRAGMA table_info({0})"' entityName);  	using (var command = GetNewCommandObject ()) {  		command.CommandText = sql;  		command.Connection = connection;  		command.Transaction = CurrentTransaction;  		using (var reader = command.ExecuteReader () as SQLiteDataReader) {  			if (reader.HasRows) {  				while (reader.Read ()) {  					// pk column is #5  					if (Convert.ToInt32 (reader [5]) != 0) {  						return reader [1] as string;  					}  				}  			}  		}  	}  	return name;  }  finally {  	DoneWithConnection (connection' true);  }  
Magic Number,OpenNETCF.ORM,SQLiteDataStore,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\OpenNETCF.ORM.SQLite\SQLiteDataStore.cs,GetPrimaryKeyIndexName,The following statement contains a magic number: using (var command = GetNewCommandObject ()) {  	command.CommandText = sql;  	command.Connection = connection;  	command.Transaction = CurrentTransaction;  	using (var reader = command.ExecuteReader () as SQLiteDataReader) {  		if (reader.HasRows) {  			while (reader.Read ()) {  				// pk column is #5  				if (Convert.ToInt32 (reader [5]) != 0) {  					return reader [1] as string;  				}  			}  		}  	}  }  
Magic Number,OpenNETCF.ORM,SQLiteDataStore,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\OpenNETCF.ORM.SQLite\SQLiteDataStore.cs,GetPrimaryKeyIndexName,The following statement contains a magic number: using (var reader = command.ExecuteReader () as SQLiteDataReader) {  	if (reader.HasRows) {  		while (reader.Read ()) {  			// pk column is #5  			if (Convert.ToInt32 (reader [5]) != 0) {  				return reader [1] as string;  			}  		}  	}  }  
Magic Number,OpenNETCF.ORM,SQLiteDataStore,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\OpenNETCF.ORM.SQLite\SQLiteDataStore.cs,GetPrimaryKeyIndexName,The following statement contains a magic number: if (reader.HasRows) {  	while (reader.Read ()) {  		// pk column is #5  		if (Convert.ToInt32 (reader [5]) != 0) {  			return reader [1] as string;  		}  	}  }  
Magic Number,OpenNETCF.ORM,SQLiteDataStore,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\OpenNETCF.ORM.SQLite\SQLiteDataStore.cs,GetPrimaryKeyIndexName,The following statement contains a magic number: while (reader.Read ()) {  	// pk column is #5  	if (Convert.ToInt32 (reader [5]) != 0) {  		return reader [1] as string;  	}  }  
Magic Number,OpenNETCF.ORM,SQLiteDataStore,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\OpenNETCF.ORM.SQLite\SQLiteDataStore.cs,GetPrimaryKeyIndexName,The following statement contains a magic number: if (Convert.ToInt32 (reader [5]) != 0) {  	return reader [1] as string;  }  
Magic Number,OpenNETCF.ORM,SQLiteDataStore,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\OpenNETCF.ORM.SQLite\SQLiteDataStore.cs,OnUpdate,The following statement contains a magic number: try {  	CheckOrdinals (entityName);  	CheckPrimaryKeyIndex (entityName);  	using (var command = GetNewCommandObject ()) {  		keyValue = Entities [entityName].Fields.KeyField.PropertyInfo.GetValue (item' null);  		command.Connection = connection;  		command.CommandText = string.Format ("SELECT * FROM {0} WHERE [{1}] = @keyparam"' entityName' Entities [entityName].Fields.KeyField.FieldName);  		command.CommandType = CommandType.Text;  		command.Parameters.Add (new SQLiteParameter ("@keyparam"' keyValue));  		command.Transaction = CurrentTransaction;  		var updateSQL = new StringBuilder (string.Format ("UPDATE {0} SET "' entityName));  		using (var reader = command.ExecuteReader () as SQLiteDataReader) {  			if (!reader.HasRows) {  				// TODO: the PK value has changed - we need to store the original value in the entity or diallow this kind of change  				throw new RecordNotFoundException ("Cannot locate a record with the provided primary key.  You cannot update a primary key value through the Update method");  			}  			reader.Read ();  			using (var insertCommand = GetNewCommandObject ()) {  				// update the values  				foreach (var field in Entities [entityName].Fields) {  					// do not update PK fields  					if (field.IsPrimaryKey) {  						continue;  					}  					else if (fieldName != null && field.FieldName != fieldName) {  						continue;  						// if we pass in a field name' skip over any fields that don't match  					}  					else if (field.IsRowVersion) {  						// read-only' so do nothing  					}  					else if (field.DataType == DbType.Object) {  						changeDetected = true;  						// get serializer  						var serializer = GetSerializer (itemType);  						if (serializer == null) {  							throw new MissingMethodException (string.Format ("The field '{0}' requires a custom serializer/deserializer method pair in the '{1}' Entity"' field.FieldName' entityName));  						}  						var value = serializer.Invoke (item' new object[] {  							field.FieldName  						});  						if (value == null) {  							updateSQL.AppendFormat ("{0}=NULL' "' field.FieldName);  						}  						else {  							updateSQL.AppendFormat ("{0}=@{0}' "' field.FieldName);  							insertCommand.Parameters.Add (new SQLiteParameter ("@" + field.FieldName' value));  						}  					}  					else if (field.PropertyInfo.PropertyType.UnderlyingTypeIs<TimeSpan> ()) {  						changeDetected = true;  						// SQL Compact doesn't support Time' so we're convert to ticks in both directions  						var value = field.PropertyInfo.GetValue (item' null);  						if (value == null) {  							updateSQL.AppendFormat ("{0}=NULL' "' field.FieldName);  						}  						else {  							var ticks = ((TimeSpan)value).Ticks;  							updateSQL.AppendFormat ("{0}=@{0}' "' field.FieldName);  							insertCommand.Parameters.Add (new SQLiteParameter ("@" + field.FieldName' ticks));  						}  					}  					else {  						var value = field.PropertyInfo.GetValue (item' null);  						if (reader [field.FieldName] != value) {  							changeDetected = true;  							if (value == null) {  								updateSQL.AppendFormat ("{0}=NULL' "' field.FieldName);  							}  							else {  								updateSQL.AppendFormat ("{0}=@{0}' "' field.FieldName);  								insertCommand.Parameters.Add (new SQLiteParameter ("@" + field.FieldName' value));  							}  						}  					}  				}  				// only execute if a change occurred  				if (changeDetected) {  					// remove the trailing comma and append the filter  					updateSQL.Length -= 2;  					updateSQL.AppendFormat (" WHERE {0} = @keyparam"' Entities [entityName].Fields.KeyField.FieldName);  					insertCommand.Parameters.Add (new SQLiteParameter ("@keyparam"' keyValue));  					insertCommand.CommandText = updateSQL.ToString ();  					insertCommand.Connection = connection;  					insertCommand.Transaction = CurrentTransaction;  					insertCommand.ExecuteNonQuery ();  				}  			}  		}  	}  }  finally {  	DoneWithConnection (connection' false);  }  
Magic Number,OpenNETCF.ORM,SQLiteDataStore,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\OpenNETCF.ORM.SQLite\SQLiteDataStore.cs,OnUpdate,The following statement contains a magic number: using (var command = GetNewCommandObject ()) {  	keyValue = Entities [entityName].Fields.KeyField.PropertyInfo.GetValue (item' null);  	command.Connection = connection;  	command.CommandText = string.Format ("SELECT * FROM {0} WHERE [{1}] = @keyparam"' entityName' Entities [entityName].Fields.KeyField.FieldName);  	command.CommandType = CommandType.Text;  	command.Parameters.Add (new SQLiteParameter ("@keyparam"' keyValue));  	command.Transaction = CurrentTransaction;  	var updateSQL = new StringBuilder (string.Format ("UPDATE {0} SET "' entityName));  	using (var reader = command.ExecuteReader () as SQLiteDataReader) {  		if (!reader.HasRows) {  			// TODO: the PK value has changed - we need to store the original value in the entity or diallow this kind of change  			throw new RecordNotFoundException ("Cannot locate a record with the provided primary key.  You cannot update a primary key value through the Update method");  		}  		reader.Read ();  		using (var insertCommand = GetNewCommandObject ()) {  			// update the values  			foreach (var field in Entities [entityName].Fields) {  				// do not update PK fields  				if (field.IsPrimaryKey) {  					continue;  				}  				else if (fieldName != null && field.FieldName != fieldName) {  					continue;  					// if we pass in a field name' skip over any fields that don't match  				}  				else if (field.IsRowVersion) {  					// read-only' so do nothing  				}  				else if (field.DataType == DbType.Object) {  					changeDetected = true;  					// get serializer  					var serializer = GetSerializer (itemType);  					if (serializer == null) {  						throw new MissingMethodException (string.Format ("The field '{0}' requires a custom serializer/deserializer method pair in the '{1}' Entity"' field.FieldName' entityName));  					}  					var value = serializer.Invoke (item' new object[] {  						field.FieldName  					});  					if (value == null) {  						updateSQL.AppendFormat ("{0}=NULL' "' field.FieldName);  					}  					else {  						updateSQL.AppendFormat ("{0}=@{0}' "' field.FieldName);  						insertCommand.Parameters.Add (new SQLiteParameter ("@" + field.FieldName' value));  					}  				}  				else if (field.PropertyInfo.PropertyType.UnderlyingTypeIs<TimeSpan> ()) {  					changeDetected = true;  					// SQL Compact doesn't support Time' so we're convert to ticks in both directions  					var value = field.PropertyInfo.GetValue (item' null);  					if (value == null) {  						updateSQL.AppendFormat ("{0}=NULL' "' field.FieldName);  					}  					else {  						var ticks = ((TimeSpan)value).Ticks;  						updateSQL.AppendFormat ("{0}=@{0}' "' field.FieldName);  						insertCommand.Parameters.Add (new SQLiteParameter ("@" + field.FieldName' ticks));  					}  				}  				else {  					var value = field.PropertyInfo.GetValue (item' null);  					if (reader [field.FieldName] != value) {  						changeDetected = true;  						if (value == null) {  							updateSQL.AppendFormat ("{0}=NULL' "' field.FieldName);  						}  						else {  							updateSQL.AppendFormat ("{0}=@{0}' "' field.FieldName);  							insertCommand.Parameters.Add (new SQLiteParameter ("@" + field.FieldName' value));  						}  					}  				}  			}  			// only execute if a change occurred  			if (changeDetected) {  				// remove the trailing comma and append the filter  				updateSQL.Length -= 2;  				updateSQL.AppendFormat (" WHERE {0} = @keyparam"' Entities [entityName].Fields.KeyField.FieldName);  				insertCommand.Parameters.Add (new SQLiteParameter ("@keyparam"' keyValue));  				insertCommand.CommandText = updateSQL.ToString ();  				insertCommand.Connection = connection;  				insertCommand.Transaction = CurrentTransaction;  				insertCommand.ExecuteNonQuery ();  			}  		}  	}  }  
Magic Number,OpenNETCF.ORM,SQLiteDataStore,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\OpenNETCF.ORM.SQLite\SQLiteDataStore.cs,OnUpdate,The following statement contains a magic number: using (var reader = command.ExecuteReader () as SQLiteDataReader) {  	if (!reader.HasRows) {  		// TODO: the PK value has changed - we need to store the original value in the entity or diallow this kind of change  		throw new RecordNotFoundException ("Cannot locate a record with the provided primary key.  You cannot update a primary key value through the Update method");  	}  	reader.Read ();  	using (var insertCommand = GetNewCommandObject ()) {  		// update the values  		foreach (var field in Entities [entityName].Fields) {  			// do not update PK fields  			if (field.IsPrimaryKey) {  				continue;  			}  			else if (fieldName != null && field.FieldName != fieldName) {  				continue;  				// if we pass in a field name' skip over any fields that don't match  			}  			else if (field.IsRowVersion) {  				// read-only' so do nothing  			}  			else if (field.DataType == DbType.Object) {  				changeDetected = true;  				// get serializer  				var serializer = GetSerializer (itemType);  				if (serializer == null) {  					throw new MissingMethodException (string.Format ("The field '{0}' requires a custom serializer/deserializer method pair in the '{1}' Entity"' field.FieldName' entityName));  				}  				var value = serializer.Invoke (item' new object[] {  					field.FieldName  				});  				if (value == null) {  					updateSQL.AppendFormat ("{0}=NULL' "' field.FieldName);  				}  				else {  					updateSQL.AppendFormat ("{0}=@{0}' "' field.FieldName);  					insertCommand.Parameters.Add (new SQLiteParameter ("@" + field.FieldName' value));  				}  			}  			else if (field.PropertyInfo.PropertyType.UnderlyingTypeIs<TimeSpan> ()) {  				changeDetected = true;  				// SQL Compact doesn't support Time' so we're convert to ticks in both directions  				var value = field.PropertyInfo.GetValue (item' null);  				if (value == null) {  					updateSQL.AppendFormat ("{0}=NULL' "' field.FieldName);  				}  				else {  					var ticks = ((TimeSpan)value).Ticks;  					updateSQL.AppendFormat ("{0}=@{0}' "' field.FieldName);  					insertCommand.Parameters.Add (new SQLiteParameter ("@" + field.FieldName' ticks));  				}  			}  			else {  				var value = field.PropertyInfo.GetValue (item' null);  				if (reader [field.FieldName] != value) {  					changeDetected = true;  					if (value == null) {  						updateSQL.AppendFormat ("{0}=NULL' "' field.FieldName);  					}  					else {  						updateSQL.AppendFormat ("{0}=@{0}' "' field.FieldName);  						insertCommand.Parameters.Add (new SQLiteParameter ("@" + field.FieldName' value));  					}  				}  			}  		}  		// only execute if a change occurred  		if (changeDetected) {  			// remove the trailing comma and append the filter  			updateSQL.Length -= 2;  			updateSQL.AppendFormat (" WHERE {0} = @keyparam"' Entities [entityName].Fields.KeyField.FieldName);  			insertCommand.Parameters.Add (new SQLiteParameter ("@keyparam"' keyValue));  			insertCommand.CommandText = updateSQL.ToString ();  			insertCommand.Connection = connection;  			insertCommand.Transaction = CurrentTransaction;  			insertCommand.ExecuteNonQuery ();  		}  	}  }  
Magic Number,OpenNETCF.ORM,SQLiteDataStore,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\OpenNETCF.ORM.SQLite\SQLiteDataStore.cs,OnUpdate,The following statement contains a magic number: using (var insertCommand = GetNewCommandObject ()) {  	// update the values  	foreach (var field in Entities [entityName].Fields) {  		// do not update PK fields  		if (field.IsPrimaryKey) {  			continue;  		}  		else if (fieldName != null && field.FieldName != fieldName) {  			continue;  			// if we pass in a field name' skip over any fields that don't match  		}  		else if (field.IsRowVersion) {  			// read-only' so do nothing  		}  		else if (field.DataType == DbType.Object) {  			changeDetected = true;  			// get serializer  			var serializer = GetSerializer (itemType);  			if (serializer == null) {  				throw new MissingMethodException (string.Format ("The field '{0}' requires a custom serializer/deserializer method pair in the '{1}' Entity"' field.FieldName' entityName));  			}  			var value = serializer.Invoke (item' new object[] {  				field.FieldName  			});  			if (value == null) {  				updateSQL.AppendFormat ("{0}=NULL' "' field.FieldName);  			}  			else {  				updateSQL.AppendFormat ("{0}=@{0}' "' field.FieldName);  				insertCommand.Parameters.Add (new SQLiteParameter ("@" + field.FieldName' value));  			}  		}  		else if (field.PropertyInfo.PropertyType.UnderlyingTypeIs<TimeSpan> ()) {  			changeDetected = true;  			// SQL Compact doesn't support Time' so we're convert to ticks in both directions  			var value = field.PropertyInfo.GetValue (item' null);  			if (value == null) {  				updateSQL.AppendFormat ("{0}=NULL' "' field.FieldName);  			}  			else {  				var ticks = ((TimeSpan)value).Ticks;  				updateSQL.AppendFormat ("{0}=@{0}' "' field.FieldName);  				insertCommand.Parameters.Add (new SQLiteParameter ("@" + field.FieldName' ticks));  			}  		}  		else {  			var value = field.PropertyInfo.GetValue (item' null);  			if (reader [field.FieldName] != value) {  				changeDetected = true;  				if (value == null) {  					updateSQL.AppendFormat ("{0}=NULL' "' field.FieldName);  				}  				else {  					updateSQL.AppendFormat ("{0}=@{0}' "' field.FieldName);  					insertCommand.Parameters.Add (new SQLiteParameter ("@" + field.FieldName' value));  				}  			}  		}  	}  	// only execute if a change occurred  	if (changeDetected) {  		// remove the trailing comma and append the filter  		updateSQL.Length -= 2;  		updateSQL.AppendFormat (" WHERE {0} = @keyparam"' Entities [entityName].Fields.KeyField.FieldName);  		insertCommand.Parameters.Add (new SQLiteParameter ("@keyparam"' keyValue));  		insertCommand.CommandText = updateSQL.ToString ();  		insertCommand.Connection = connection;  		insertCommand.Transaction = CurrentTransaction;  		insertCommand.ExecuteNonQuery ();  	}  }  
Magic Number,OpenNETCF.ORM,SQLiteDataStore,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\OpenNETCF.ORM.SQLite\SQLiteDataStore.cs,OnUpdate,The following statement contains a magic number: if (changeDetected) {  	// remove the trailing comma and append the filter  	updateSQL.Length -= 2;  	updateSQL.AppendFormat (" WHERE {0} = @keyparam"' Entities [entityName].Fields.KeyField.FieldName);  	insertCommand.Parameters.Add (new SQLiteParameter ("@keyparam"' keyValue));  	insertCommand.CommandText = updateSQL.ToString ();  	insertCommand.Connection = connection;  	insertCommand.Transaction = CurrentTransaction;  	insertCommand.ExecuteNonQuery ();  }  
Magic Number,OpenNETCF.ORM,SQLiteDataStore,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\OpenNETCF.ORM.SQLite\SQLiteDataStore.cs,OnUpdate,The following statement contains a magic number: updateSQL.Length -= 2;  
Magic Number,OpenNETCF.ORM,SQLiteDataStore,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\OpenNETCF.ORM.SQLite\SQLiteDataStore.cs,GetLastDateTimeInsert,The following statement contains a magic number: using (var command = new SQLiteCommand (String.Format ("SELECT  CreatedTime FROM {0} ORDER BY CreatedTime DESC LIMIT 1"' tableName)' connection as SQLiteConnection)) {  	object datetime = command.ExecuteScalar ();  	if (datetime == null) {  		return new DateTime (1990' 01' 30);  	}  	return (DateTime)datetime;  }  
Magic Number,OpenNETCF.ORM,SQLiteDataStore,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\OpenNETCF.ORM.SQLite\SQLiteDataStore.cs,GetLastDateTimeInsert,The following statement contains a magic number: using (var command = new SQLiteCommand (String.Format ("SELECT  CreatedTime FROM {0} ORDER BY CreatedTime DESC LIMIT 1"' tableName)' connection as SQLiteConnection)) {  	object datetime = command.ExecuteScalar ();  	if (datetime == null) {  		return new DateTime (1990' 01' 30);  	}  	return (DateTime)datetime;  }  
Magic Number,OpenNETCF.ORM,SQLiteDataStore,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\OpenNETCF.ORM.SQLite\SQLiteDataStore.cs,GetLastDateTimeInsert,The following statement contains a magic number: if (datetime == null) {  	return new DateTime (1990' 01' 30);  }  
Magic Number,OpenNETCF.ORM,SQLiteDataStore,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\OpenNETCF.ORM.SQLite\SQLiteDataStore.cs,GetLastDateTimeInsert,The following statement contains a magic number: if (datetime == null) {  	return new DateTime (1990' 01' 30);  }  
Magic Number,OpenNETCF.ORM,SQLiteDataStore,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\OpenNETCF.ORM.SQLite\SQLiteDataStore.cs,GetLastDateTimeInsert,The following statement contains a magic number: return new DateTime (1990' 01' 30);  
Magic Number,OpenNETCF.ORM,SQLiteDataStore,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\OpenNETCF.ORM.SQLite\SQLiteDataStore.cs,GetLastDateTimeInsert,The following statement contains a magic number: return new DateTime (1990' 01' 30);  
