Implementation smell,Namespace,Class,File,Method,Description
Complex Method,OpenNETCF.ORM,SqlCeDataStore,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\OpenNETCF.ORM.SqlCe\SqlCeDataStore.cs,OnInsert,Cyclomatic complexity of the method is 10
Complex Method,OpenNETCF.ORM,SqlCeDataStore,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\OpenNETCF.ORM.SqlCe\SqlCeDataStore.cs,DiscoverDynamicEntity,Cyclomatic complexity of the method is 14
Complex Method,OpenNETCF.ORM,SqlCeDataStore,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\OpenNETCF.ORM.SqlCe\SqlCeDataStore.cs,ValidateTable,Cyclomatic complexity of the method is 11
Long Parameter List,OpenNETCF.ORM,SqlCeDataStore,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\OpenNETCF.ORM.SqlCe\SqlCeDataStore.cs,FillEntity,The method has 5 parameters.
Long Parameter List,OpenNETCF.ORM,SqlCeDataStore,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\OpenNETCF.ORM.SqlCe\SqlCeDataStore.cs,ValidateIndex,The method has 5 parameters.
Long Statement,OpenNETCF.ORM,SqlCeDataStore,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\OpenNETCF.ORM.SqlCe\SqlCeDataStore.cs,FillEntity,The length of the statement  "				throw new MissingMethodException (string.Format ("The field '{0}' requires a custom serializer/deserializer method pair in the '{1}' Entity"' field.FieldName' entityName)); " is 172.
Long Statement,OpenNETCF.ORM,SqlCeDataStore,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\OpenNETCF.ORM.SqlCe\SqlCeDataStore.cs,GetPrimaryKeyIndexName,The length of the statement  "		string sql = string.Format ("SELECT INDEX_NAME FROM information_schema.indexes WHERE (TABLE_NAME = '{0}') AND (PRIMARY_KEY = 1)"' entityName); " is 142.
Long Statement,OpenNETCF.ORM,SqlCeDataStore,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\OpenNETCF.ORM.SqlCe\SqlCeDataStore.cs,ValidateIndex,The length of the statement  "	string sql = string.Format ("SELECT INDEX_NAME FROM information_schema.indexes WHERE (TABLE_NAME = '{0}') AND (COLUMN_NAME = '{1}')"' tableName' fieldName); " is 156.
Long Statement,OpenNETCF.ORM,SqlCeDataStore,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\OpenNETCF.ORM.SqlCe\SqlCeDataStore.cs,DiscoverDynamicEntity,The length of the statement  "			cmd.CommandText = string.Format ("SELECT COLUMN_NAME' ORDINAL_POSITION' IS_NULLABLE' DATA_TYPE' NUMERIC_PRECISION' NUMERIC_SCALE FROM information_schema.columns WHERE TABLE_NAME = '{0}' ORDER BY ORDINAL_POSITION"' entityName); " is 226.
Long Statement,OpenNETCF.ORM,SqlCeDataStore,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\OpenNETCF.ORM.SqlCe\SqlCeDataStore.cs,DiscoverDynamicEntity,The length of the statement  "			cmd.CommandText = string.Format ("SELECT COLUMN_NAME' PRIMARY_KEY' [UNIQUE]' COLLATION FROM information_schema.indexes WHERE TABLE_NAME = '{0}'"' entityName); " is 158.
Long Statement,OpenNETCF.ORM,SqlCeDataStore,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\OpenNETCF.ORM.SqlCe\SqlCeDataStore.cs,ValidateTable,The length of the statement  "			+ "is_nullable " + "FROM information_schema.columns " + "WHERE (table_name = '{0}' AND column_name = '{1}')"' entity.EntityAttribute.NameInStore' field.FieldName); " is 163.
Long Statement,OpenNETCF.ORM,SqlCeDataStore,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\OpenNETCF.ORM.SqlCe\SqlCeDataStore.cs,ValidateTable,The length of the statement  "					alter.Append (string.Format ("ADD [{0}] {1} {2}"' field.FieldName' GetFieldDataTypeString (entity.EntityName' field)' GetFieldCreationAttributes (entity.EntityAttribute' field))); " is 179.
Magic Number,OpenNETCF.ORM,SqlCeDataStore,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\OpenNETCF.ORM.SqlCe\SqlCeDataStore.cs,DiscoverDynamicEntity,The following statement contains a magic number: try {  	using (var cmd = GetNewCommandObject ()) {  		cmd.Connection = connection;  		cmd.Transaction = CurrentTransaction;  		cmd.CommandText = string.Format ("SELECT COLUMN_NAME' ORDINAL_POSITION' IS_NULLABLE' DATA_TYPE' NUMERIC_PRECISION' NUMERIC_SCALE FROM information_schema.columns WHERE TABLE_NAME = '{0}' ORDER BY ORDINAL_POSITION"' entityName);  		var fields = new List<FieldAttribute> ();  		using (var reader = cmd.ExecuteReader ()) {  			while (reader.Read ()) {  				var name = reader.GetString (0);  				var nullable = string.Compare (reader.GetString (2)' "YES"' true) == 0;  				var type = reader.GetString (3).ParseToDbType ();  				var field = new FieldAttribute () {  					DataType = type'  					FieldName = name'  					AllowsNulls = nullable'  				};  				if (!reader.IsDBNull (4)) {  					field.Precision = Convert.ToInt32 (reader.GetValue (4));  				}  				if (!reader.IsDBNull (5)) {  					field.Scale = Convert.ToInt32 (reader.GetValue (5));  				}  				fields.Add (field);  			}  		}  		cmd.CommandText = string.Format ("SELECT COLUMN_NAME' PRIMARY_KEY' [UNIQUE]' COLLATION FROM information_schema.indexes WHERE TABLE_NAME = '{0}'"' entityName);  		using (var reader = cmd.ExecuteReader ()) {  			while (reader.Read ()) {  				var column = reader.GetString (0);  				var pk = Convert.ToBoolean (reader.GetValue (1));  				var unique = Convert.ToBoolean (reader.GetValue (2));  				var field = fields.FirstOrDefault (f => f.FieldName == column);  				if (pk) {  					field.IsPrimaryKey = true;  				}  				else {  					var collation = Convert.ToInt32 (reader.GetValue (3));  					field.SearchOrder = collation == 1 ? FieldSearchOrder.Ascending : FieldSearchOrder.Descending;  				}  				if (unique) {  					field.RequireUniqueValue = true;  				}  			}  		}  		var entityDefinition = new DynamicEntityDefinition (entityName' fields);  		RegisterEntityInfo (entityDefinition);  	}  }  finally {  	DoneWithConnection (connection' true);  }  
Magic Number,OpenNETCF.ORM,SqlCeDataStore,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\OpenNETCF.ORM.SqlCe\SqlCeDataStore.cs,DiscoverDynamicEntity,The following statement contains a magic number: try {  	using (var cmd = GetNewCommandObject ()) {  		cmd.Connection = connection;  		cmd.Transaction = CurrentTransaction;  		cmd.CommandText = string.Format ("SELECT COLUMN_NAME' ORDINAL_POSITION' IS_NULLABLE' DATA_TYPE' NUMERIC_PRECISION' NUMERIC_SCALE FROM information_schema.columns WHERE TABLE_NAME = '{0}' ORDER BY ORDINAL_POSITION"' entityName);  		var fields = new List<FieldAttribute> ();  		using (var reader = cmd.ExecuteReader ()) {  			while (reader.Read ()) {  				var name = reader.GetString (0);  				var nullable = string.Compare (reader.GetString (2)' "YES"' true) == 0;  				var type = reader.GetString (3).ParseToDbType ();  				var field = new FieldAttribute () {  					DataType = type'  					FieldName = name'  					AllowsNulls = nullable'  				};  				if (!reader.IsDBNull (4)) {  					field.Precision = Convert.ToInt32 (reader.GetValue (4));  				}  				if (!reader.IsDBNull (5)) {  					field.Scale = Convert.ToInt32 (reader.GetValue (5));  				}  				fields.Add (field);  			}  		}  		cmd.CommandText = string.Format ("SELECT COLUMN_NAME' PRIMARY_KEY' [UNIQUE]' COLLATION FROM information_schema.indexes WHERE TABLE_NAME = '{0}'"' entityName);  		using (var reader = cmd.ExecuteReader ()) {  			while (reader.Read ()) {  				var column = reader.GetString (0);  				var pk = Convert.ToBoolean (reader.GetValue (1));  				var unique = Convert.ToBoolean (reader.GetValue (2));  				var field = fields.FirstOrDefault (f => f.FieldName == column);  				if (pk) {  					field.IsPrimaryKey = true;  				}  				else {  					var collation = Convert.ToInt32 (reader.GetValue (3));  					field.SearchOrder = collation == 1 ? FieldSearchOrder.Ascending : FieldSearchOrder.Descending;  				}  				if (unique) {  					field.RequireUniqueValue = true;  				}  			}  		}  		var entityDefinition = new DynamicEntityDefinition (entityName' fields);  		RegisterEntityInfo (entityDefinition);  	}  }  finally {  	DoneWithConnection (connection' true);  }  
Magic Number,OpenNETCF.ORM,SqlCeDataStore,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\OpenNETCF.ORM.SqlCe\SqlCeDataStore.cs,DiscoverDynamicEntity,The following statement contains a magic number: try {  	using (var cmd = GetNewCommandObject ()) {  		cmd.Connection = connection;  		cmd.Transaction = CurrentTransaction;  		cmd.CommandText = string.Format ("SELECT COLUMN_NAME' ORDINAL_POSITION' IS_NULLABLE' DATA_TYPE' NUMERIC_PRECISION' NUMERIC_SCALE FROM information_schema.columns WHERE TABLE_NAME = '{0}' ORDER BY ORDINAL_POSITION"' entityName);  		var fields = new List<FieldAttribute> ();  		using (var reader = cmd.ExecuteReader ()) {  			while (reader.Read ()) {  				var name = reader.GetString (0);  				var nullable = string.Compare (reader.GetString (2)' "YES"' true) == 0;  				var type = reader.GetString (3).ParseToDbType ();  				var field = new FieldAttribute () {  					DataType = type'  					FieldName = name'  					AllowsNulls = nullable'  				};  				if (!reader.IsDBNull (4)) {  					field.Precision = Convert.ToInt32 (reader.GetValue (4));  				}  				if (!reader.IsDBNull (5)) {  					field.Scale = Convert.ToInt32 (reader.GetValue (5));  				}  				fields.Add (field);  			}  		}  		cmd.CommandText = string.Format ("SELECT COLUMN_NAME' PRIMARY_KEY' [UNIQUE]' COLLATION FROM information_schema.indexes WHERE TABLE_NAME = '{0}'"' entityName);  		using (var reader = cmd.ExecuteReader ()) {  			while (reader.Read ()) {  				var column = reader.GetString (0);  				var pk = Convert.ToBoolean (reader.GetValue (1));  				var unique = Convert.ToBoolean (reader.GetValue (2));  				var field = fields.FirstOrDefault (f => f.FieldName == column);  				if (pk) {  					field.IsPrimaryKey = true;  				}  				else {  					var collation = Convert.ToInt32 (reader.GetValue (3));  					field.SearchOrder = collation == 1 ? FieldSearchOrder.Ascending : FieldSearchOrder.Descending;  				}  				if (unique) {  					field.RequireUniqueValue = true;  				}  			}  		}  		var entityDefinition = new DynamicEntityDefinition (entityName' fields);  		RegisterEntityInfo (entityDefinition);  	}  }  finally {  	DoneWithConnection (connection' true);  }  
Magic Number,OpenNETCF.ORM,SqlCeDataStore,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\OpenNETCF.ORM.SqlCe\SqlCeDataStore.cs,DiscoverDynamicEntity,The following statement contains a magic number: try {  	using (var cmd = GetNewCommandObject ()) {  		cmd.Connection = connection;  		cmd.Transaction = CurrentTransaction;  		cmd.CommandText = string.Format ("SELECT COLUMN_NAME' ORDINAL_POSITION' IS_NULLABLE' DATA_TYPE' NUMERIC_PRECISION' NUMERIC_SCALE FROM information_schema.columns WHERE TABLE_NAME = '{0}' ORDER BY ORDINAL_POSITION"' entityName);  		var fields = new List<FieldAttribute> ();  		using (var reader = cmd.ExecuteReader ()) {  			while (reader.Read ()) {  				var name = reader.GetString (0);  				var nullable = string.Compare (reader.GetString (2)' "YES"' true) == 0;  				var type = reader.GetString (3).ParseToDbType ();  				var field = new FieldAttribute () {  					DataType = type'  					FieldName = name'  					AllowsNulls = nullable'  				};  				if (!reader.IsDBNull (4)) {  					field.Precision = Convert.ToInt32 (reader.GetValue (4));  				}  				if (!reader.IsDBNull (5)) {  					field.Scale = Convert.ToInt32 (reader.GetValue (5));  				}  				fields.Add (field);  			}  		}  		cmd.CommandText = string.Format ("SELECT COLUMN_NAME' PRIMARY_KEY' [UNIQUE]' COLLATION FROM information_schema.indexes WHERE TABLE_NAME = '{0}'"' entityName);  		using (var reader = cmd.ExecuteReader ()) {  			while (reader.Read ()) {  				var column = reader.GetString (0);  				var pk = Convert.ToBoolean (reader.GetValue (1));  				var unique = Convert.ToBoolean (reader.GetValue (2));  				var field = fields.FirstOrDefault (f => f.FieldName == column);  				if (pk) {  					field.IsPrimaryKey = true;  				}  				else {  					var collation = Convert.ToInt32 (reader.GetValue (3));  					field.SearchOrder = collation == 1 ? FieldSearchOrder.Ascending : FieldSearchOrder.Descending;  				}  				if (unique) {  					field.RequireUniqueValue = true;  				}  			}  		}  		var entityDefinition = new DynamicEntityDefinition (entityName' fields);  		RegisterEntityInfo (entityDefinition);  	}  }  finally {  	DoneWithConnection (connection' true);  }  
Magic Number,OpenNETCF.ORM,SqlCeDataStore,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\OpenNETCF.ORM.SqlCe\SqlCeDataStore.cs,DiscoverDynamicEntity,The following statement contains a magic number: try {  	using (var cmd = GetNewCommandObject ()) {  		cmd.Connection = connection;  		cmd.Transaction = CurrentTransaction;  		cmd.CommandText = string.Format ("SELECT COLUMN_NAME' ORDINAL_POSITION' IS_NULLABLE' DATA_TYPE' NUMERIC_PRECISION' NUMERIC_SCALE FROM information_schema.columns WHERE TABLE_NAME = '{0}' ORDER BY ORDINAL_POSITION"' entityName);  		var fields = new List<FieldAttribute> ();  		using (var reader = cmd.ExecuteReader ()) {  			while (reader.Read ()) {  				var name = reader.GetString (0);  				var nullable = string.Compare (reader.GetString (2)' "YES"' true) == 0;  				var type = reader.GetString (3).ParseToDbType ();  				var field = new FieldAttribute () {  					DataType = type'  					FieldName = name'  					AllowsNulls = nullable'  				};  				if (!reader.IsDBNull (4)) {  					field.Precision = Convert.ToInt32 (reader.GetValue (4));  				}  				if (!reader.IsDBNull (5)) {  					field.Scale = Convert.ToInt32 (reader.GetValue (5));  				}  				fields.Add (field);  			}  		}  		cmd.CommandText = string.Format ("SELECT COLUMN_NAME' PRIMARY_KEY' [UNIQUE]' COLLATION FROM information_schema.indexes WHERE TABLE_NAME = '{0}'"' entityName);  		using (var reader = cmd.ExecuteReader ()) {  			while (reader.Read ()) {  				var column = reader.GetString (0);  				var pk = Convert.ToBoolean (reader.GetValue (1));  				var unique = Convert.ToBoolean (reader.GetValue (2));  				var field = fields.FirstOrDefault (f => f.FieldName == column);  				if (pk) {  					field.IsPrimaryKey = true;  				}  				else {  					var collation = Convert.ToInt32 (reader.GetValue (3));  					field.SearchOrder = collation == 1 ? FieldSearchOrder.Ascending : FieldSearchOrder.Descending;  				}  				if (unique) {  					field.RequireUniqueValue = true;  				}  			}  		}  		var entityDefinition = new DynamicEntityDefinition (entityName' fields);  		RegisterEntityInfo (entityDefinition);  	}  }  finally {  	DoneWithConnection (connection' true);  }  
Magic Number,OpenNETCF.ORM,SqlCeDataStore,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\OpenNETCF.ORM.SqlCe\SqlCeDataStore.cs,DiscoverDynamicEntity,The following statement contains a magic number: try {  	using (var cmd = GetNewCommandObject ()) {  		cmd.Connection = connection;  		cmd.Transaction = CurrentTransaction;  		cmd.CommandText = string.Format ("SELECT COLUMN_NAME' ORDINAL_POSITION' IS_NULLABLE' DATA_TYPE' NUMERIC_PRECISION' NUMERIC_SCALE FROM information_schema.columns WHERE TABLE_NAME = '{0}' ORDER BY ORDINAL_POSITION"' entityName);  		var fields = new List<FieldAttribute> ();  		using (var reader = cmd.ExecuteReader ()) {  			while (reader.Read ()) {  				var name = reader.GetString (0);  				var nullable = string.Compare (reader.GetString (2)' "YES"' true) == 0;  				var type = reader.GetString (3).ParseToDbType ();  				var field = new FieldAttribute () {  					DataType = type'  					FieldName = name'  					AllowsNulls = nullable'  				};  				if (!reader.IsDBNull (4)) {  					field.Precision = Convert.ToInt32 (reader.GetValue (4));  				}  				if (!reader.IsDBNull (5)) {  					field.Scale = Convert.ToInt32 (reader.GetValue (5));  				}  				fields.Add (field);  			}  		}  		cmd.CommandText = string.Format ("SELECT COLUMN_NAME' PRIMARY_KEY' [UNIQUE]' COLLATION FROM information_schema.indexes WHERE TABLE_NAME = '{0}'"' entityName);  		using (var reader = cmd.ExecuteReader ()) {  			while (reader.Read ()) {  				var column = reader.GetString (0);  				var pk = Convert.ToBoolean (reader.GetValue (1));  				var unique = Convert.ToBoolean (reader.GetValue (2));  				var field = fields.FirstOrDefault (f => f.FieldName == column);  				if (pk) {  					field.IsPrimaryKey = true;  				}  				else {  					var collation = Convert.ToInt32 (reader.GetValue (3));  					field.SearchOrder = collation == 1 ? FieldSearchOrder.Ascending : FieldSearchOrder.Descending;  				}  				if (unique) {  					field.RequireUniqueValue = true;  				}  			}  		}  		var entityDefinition = new DynamicEntityDefinition (entityName' fields);  		RegisterEntityInfo (entityDefinition);  	}  }  finally {  	DoneWithConnection (connection' true);  }  
Magic Number,OpenNETCF.ORM,SqlCeDataStore,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\OpenNETCF.ORM.SqlCe\SqlCeDataStore.cs,DiscoverDynamicEntity,The following statement contains a magic number: try {  	using (var cmd = GetNewCommandObject ()) {  		cmd.Connection = connection;  		cmd.Transaction = CurrentTransaction;  		cmd.CommandText = string.Format ("SELECT COLUMN_NAME' ORDINAL_POSITION' IS_NULLABLE' DATA_TYPE' NUMERIC_PRECISION' NUMERIC_SCALE FROM information_schema.columns WHERE TABLE_NAME = '{0}' ORDER BY ORDINAL_POSITION"' entityName);  		var fields = new List<FieldAttribute> ();  		using (var reader = cmd.ExecuteReader ()) {  			while (reader.Read ()) {  				var name = reader.GetString (0);  				var nullable = string.Compare (reader.GetString (2)' "YES"' true) == 0;  				var type = reader.GetString (3).ParseToDbType ();  				var field = new FieldAttribute () {  					DataType = type'  					FieldName = name'  					AllowsNulls = nullable'  				};  				if (!reader.IsDBNull (4)) {  					field.Precision = Convert.ToInt32 (reader.GetValue (4));  				}  				if (!reader.IsDBNull (5)) {  					field.Scale = Convert.ToInt32 (reader.GetValue (5));  				}  				fields.Add (field);  			}  		}  		cmd.CommandText = string.Format ("SELECT COLUMN_NAME' PRIMARY_KEY' [UNIQUE]' COLLATION FROM information_schema.indexes WHERE TABLE_NAME = '{0}'"' entityName);  		using (var reader = cmd.ExecuteReader ()) {  			while (reader.Read ()) {  				var column = reader.GetString (0);  				var pk = Convert.ToBoolean (reader.GetValue (1));  				var unique = Convert.ToBoolean (reader.GetValue (2));  				var field = fields.FirstOrDefault (f => f.FieldName == column);  				if (pk) {  					field.IsPrimaryKey = true;  				}  				else {  					var collation = Convert.ToInt32 (reader.GetValue (3));  					field.SearchOrder = collation == 1 ? FieldSearchOrder.Ascending : FieldSearchOrder.Descending;  				}  				if (unique) {  					field.RequireUniqueValue = true;  				}  			}  		}  		var entityDefinition = new DynamicEntityDefinition (entityName' fields);  		RegisterEntityInfo (entityDefinition);  	}  }  finally {  	DoneWithConnection (connection' true);  }  
Magic Number,OpenNETCF.ORM,SqlCeDataStore,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\OpenNETCF.ORM.SqlCe\SqlCeDataStore.cs,DiscoverDynamicEntity,The following statement contains a magic number: try {  	using (var cmd = GetNewCommandObject ()) {  		cmd.Connection = connection;  		cmd.Transaction = CurrentTransaction;  		cmd.CommandText = string.Format ("SELECT COLUMN_NAME' ORDINAL_POSITION' IS_NULLABLE' DATA_TYPE' NUMERIC_PRECISION' NUMERIC_SCALE FROM information_schema.columns WHERE TABLE_NAME = '{0}' ORDER BY ORDINAL_POSITION"' entityName);  		var fields = new List<FieldAttribute> ();  		using (var reader = cmd.ExecuteReader ()) {  			while (reader.Read ()) {  				var name = reader.GetString (0);  				var nullable = string.Compare (reader.GetString (2)' "YES"' true) == 0;  				var type = reader.GetString (3).ParseToDbType ();  				var field = new FieldAttribute () {  					DataType = type'  					FieldName = name'  					AllowsNulls = nullable'  				};  				if (!reader.IsDBNull (4)) {  					field.Precision = Convert.ToInt32 (reader.GetValue (4));  				}  				if (!reader.IsDBNull (5)) {  					field.Scale = Convert.ToInt32 (reader.GetValue (5));  				}  				fields.Add (field);  			}  		}  		cmd.CommandText = string.Format ("SELECT COLUMN_NAME' PRIMARY_KEY' [UNIQUE]' COLLATION FROM information_schema.indexes WHERE TABLE_NAME = '{0}'"' entityName);  		using (var reader = cmd.ExecuteReader ()) {  			while (reader.Read ()) {  				var column = reader.GetString (0);  				var pk = Convert.ToBoolean (reader.GetValue (1));  				var unique = Convert.ToBoolean (reader.GetValue (2));  				var field = fields.FirstOrDefault (f => f.FieldName == column);  				if (pk) {  					field.IsPrimaryKey = true;  				}  				else {  					var collation = Convert.ToInt32 (reader.GetValue (3));  					field.SearchOrder = collation == 1 ? FieldSearchOrder.Ascending : FieldSearchOrder.Descending;  				}  				if (unique) {  					field.RequireUniqueValue = true;  				}  			}  		}  		var entityDefinition = new DynamicEntityDefinition (entityName' fields);  		RegisterEntityInfo (entityDefinition);  	}  }  finally {  	DoneWithConnection (connection' true);  }  
Magic Number,OpenNETCF.ORM,SqlCeDataStore,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\OpenNETCF.ORM.SqlCe\SqlCeDataStore.cs,DiscoverDynamicEntity,The following statement contains a magic number: using (var cmd = GetNewCommandObject ()) {  	cmd.Connection = connection;  	cmd.Transaction = CurrentTransaction;  	cmd.CommandText = string.Format ("SELECT COLUMN_NAME' ORDINAL_POSITION' IS_NULLABLE' DATA_TYPE' NUMERIC_PRECISION' NUMERIC_SCALE FROM information_schema.columns WHERE TABLE_NAME = '{0}' ORDER BY ORDINAL_POSITION"' entityName);  	var fields = new List<FieldAttribute> ();  	using (var reader = cmd.ExecuteReader ()) {  		while (reader.Read ()) {  			var name = reader.GetString (0);  			var nullable = string.Compare (reader.GetString (2)' "YES"' true) == 0;  			var type = reader.GetString (3).ParseToDbType ();  			var field = new FieldAttribute () {  				DataType = type'  				FieldName = name'  				AllowsNulls = nullable'  			};  			if (!reader.IsDBNull (4)) {  				field.Precision = Convert.ToInt32 (reader.GetValue (4));  			}  			if (!reader.IsDBNull (5)) {  				field.Scale = Convert.ToInt32 (reader.GetValue (5));  			}  			fields.Add (field);  		}  	}  	cmd.CommandText = string.Format ("SELECT COLUMN_NAME' PRIMARY_KEY' [UNIQUE]' COLLATION FROM information_schema.indexes WHERE TABLE_NAME = '{0}'"' entityName);  	using (var reader = cmd.ExecuteReader ()) {  		while (reader.Read ()) {  			var column = reader.GetString (0);  			var pk = Convert.ToBoolean (reader.GetValue (1));  			var unique = Convert.ToBoolean (reader.GetValue (2));  			var field = fields.FirstOrDefault (f => f.FieldName == column);  			if (pk) {  				field.IsPrimaryKey = true;  			}  			else {  				var collation = Convert.ToInt32 (reader.GetValue (3));  				field.SearchOrder = collation == 1 ? FieldSearchOrder.Ascending : FieldSearchOrder.Descending;  			}  			if (unique) {  				field.RequireUniqueValue = true;  			}  		}  	}  	var entityDefinition = new DynamicEntityDefinition (entityName' fields);  	RegisterEntityInfo (entityDefinition);  }  
Magic Number,OpenNETCF.ORM,SqlCeDataStore,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\OpenNETCF.ORM.SqlCe\SqlCeDataStore.cs,DiscoverDynamicEntity,The following statement contains a magic number: using (var cmd = GetNewCommandObject ()) {  	cmd.Connection = connection;  	cmd.Transaction = CurrentTransaction;  	cmd.CommandText = string.Format ("SELECT COLUMN_NAME' ORDINAL_POSITION' IS_NULLABLE' DATA_TYPE' NUMERIC_PRECISION' NUMERIC_SCALE FROM information_schema.columns WHERE TABLE_NAME = '{0}' ORDER BY ORDINAL_POSITION"' entityName);  	var fields = new List<FieldAttribute> ();  	using (var reader = cmd.ExecuteReader ()) {  		while (reader.Read ()) {  			var name = reader.GetString (0);  			var nullable = string.Compare (reader.GetString (2)' "YES"' true) == 0;  			var type = reader.GetString (3).ParseToDbType ();  			var field = new FieldAttribute () {  				DataType = type'  				FieldName = name'  				AllowsNulls = nullable'  			};  			if (!reader.IsDBNull (4)) {  				field.Precision = Convert.ToInt32 (reader.GetValue (4));  			}  			if (!reader.IsDBNull (5)) {  				field.Scale = Convert.ToInt32 (reader.GetValue (5));  			}  			fields.Add (field);  		}  	}  	cmd.CommandText = string.Format ("SELECT COLUMN_NAME' PRIMARY_KEY' [UNIQUE]' COLLATION FROM information_schema.indexes WHERE TABLE_NAME = '{0}'"' entityName);  	using (var reader = cmd.ExecuteReader ()) {  		while (reader.Read ()) {  			var column = reader.GetString (0);  			var pk = Convert.ToBoolean (reader.GetValue (1));  			var unique = Convert.ToBoolean (reader.GetValue (2));  			var field = fields.FirstOrDefault (f => f.FieldName == column);  			if (pk) {  				field.IsPrimaryKey = true;  			}  			else {  				var collation = Convert.ToInt32 (reader.GetValue (3));  				field.SearchOrder = collation == 1 ? FieldSearchOrder.Ascending : FieldSearchOrder.Descending;  			}  			if (unique) {  				field.RequireUniqueValue = true;  			}  		}  	}  	var entityDefinition = new DynamicEntityDefinition (entityName' fields);  	RegisterEntityInfo (entityDefinition);  }  
Magic Number,OpenNETCF.ORM,SqlCeDataStore,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\OpenNETCF.ORM.SqlCe\SqlCeDataStore.cs,DiscoverDynamicEntity,The following statement contains a magic number: using (var cmd = GetNewCommandObject ()) {  	cmd.Connection = connection;  	cmd.Transaction = CurrentTransaction;  	cmd.CommandText = string.Format ("SELECT COLUMN_NAME' ORDINAL_POSITION' IS_NULLABLE' DATA_TYPE' NUMERIC_PRECISION' NUMERIC_SCALE FROM information_schema.columns WHERE TABLE_NAME = '{0}' ORDER BY ORDINAL_POSITION"' entityName);  	var fields = new List<FieldAttribute> ();  	using (var reader = cmd.ExecuteReader ()) {  		while (reader.Read ()) {  			var name = reader.GetString (0);  			var nullable = string.Compare (reader.GetString (2)' "YES"' true) == 0;  			var type = reader.GetString (3).ParseToDbType ();  			var field = new FieldAttribute () {  				DataType = type'  				FieldName = name'  				AllowsNulls = nullable'  			};  			if (!reader.IsDBNull (4)) {  				field.Precision = Convert.ToInt32 (reader.GetValue (4));  			}  			if (!reader.IsDBNull (5)) {  				field.Scale = Convert.ToInt32 (reader.GetValue (5));  			}  			fields.Add (field);  		}  	}  	cmd.CommandText = string.Format ("SELECT COLUMN_NAME' PRIMARY_KEY' [UNIQUE]' COLLATION FROM information_schema.indexes WHERE TABLE_NAME = '{0}'"' entityName);  	using (var reader = cmd.ExecuteReader ()) {  		while (reader.Read ()) {  			var column = reader.GetString (0);  			var pk = Convert.ToBoolean (reader.GetValue (1));  			var unique = Convert.ToBoolean (reader.GetValue (2));  			var field = fields.FirstOrDefault (f => f.FieldName == column);  			if (pk) {  				field.IsPrimaryKey = true;  			}  			else {  				var collation = Convert.ToInt32 (reader.GetValue (3));  				field.SearchOrder = collation == 1 ? FieldSearchOrder.Ascending : FieldSearchOrder.Descending;  			}  			if (unique) {  				field.RequireUniqueValue = true;  			}  		}  	}  	var entityDefinition = new DynamicEntityDefinition (entityName' fields);  	RegisterEntityInfo (entityDefinition);  }  
Magic Number,OpenNETCF.ORM,SqlCeDataStore,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\OpenNETCF.ORM.SqlCe\SqlCeDataStore.cs,DiscoverDynamicEntity,The following statement contains a magic number: using (var cmd = GetNewCommandObject ()) {  	cmd.Connection = connection;  	cmd.Transaction = CurrentTransaction;  	cmd.CommandText = string.Format ("SELECT COLUMN_NAME' ORDINAL_POSITION' IS_NULLABLE' DATA_TYPE' NUMERIC_PRECISION' NUMERIC_SCALE FROM information_schema.columns WHERE TABLE_NAME = '{0}' ORDER BY ORDINAL_POSITION"' entityName);  	var fields = new List<FieldAttribute> ();  	using (var reader = cmd.ExecuteReader ()) {  		while (reader.Read ()) {  			var name = reader.GetString (0);  			var nullable = string.Compare (reader.GetString (2)' "YES"' true) == 0;  			var type = reader.GetString (3).ParseToDbType ();  			var field = new FieldAttribute () {  				DataType = type'  				FieldName = name'  				AllowsNulls = nullable'  			};  			if (!reader.IsDBNull (4)) {  				field.Precision = Convert.ToInt32 (reader.GetValue (4));  			}  			if (!reader.IsDBNull (5)) {  				field.Scale = Convert.ToInt32 (reader.GetValue (5));  			}  			fields.Add (field);  		}  	}  	cmd.CommandText = string.Format ("SELECT COLUMN_NAME' PRIMARY_KEY' [UNIQUE]' COLLATION FROM information_schema.indexes WHERE TABLE_NAME = '{0}'"' entityName);  	using (var reader = cmd.ExecuteReader ()) {  		while (reader.Read ()) {  			var column = reader.GetString (0);  			var pk = Convert.ToBoolean (reader.GetValue (1));  			var unique = Convert.ToBoolean (reader.GetValue (2));  			var field = fields.FirstOrDefault (f => f.FieldName == column);  			if (pk) {  				field.IsPrimaryKey = true;  			}  			else {  				var collation = Convert.ToInt32 (reader.GetValue (3));  				field.SearchOrder = collation == 1 ? FieldSearchOrder.Ascending : FieldSearchOrder.Descending;  			}  			if (unique) {  				field.RequireUniqueValue = true;  			}  		}  	}  	var entityDefinition = new DynamicEntityDefinition (entityName' fields);  	RegisterEntityInfo (entityDefinition);  }  
Magic Number,OpenNETCF.ORM,SqlCeDataStore,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\OpenNETCF.ORM.SqlCe\SqlCeDataStore.cs,DiscoverDynamicEntity,The following statement contains a magic number: using (var cmd = GetNewCommandObject ()) {  	cmd.Connection = connection;  	cmd.Transaction = CurrentTransaction;  	cmd.CommandText = string.Format ("SELECT COLUMN_NAME' ORDINAL_POSITION' IS_NULLABLE' DATA_TYPE' NUMERIC_PRECISION' NUMERIC_SCALE FROM information_schema.columns WHERE TABLE_NAME = '{0}' ORDER BY ORDINAL_POSITION"' entityName);  	var fields = new List<FieldAttribute> ();  	using (var reader = cmd.ExecuteReader ()) {  		while (reader.Read ()) {  			var name = reader.GetString (0);  			var nullable = string.Compare (reader.GetString (2)' "YES"' true) == 0;  			var type = reader.GetString (3).ParseToDbType ();  			var field = new FieldAttribute () {  				DataType = type'  				FieldName = name'  				AllowsNulls = nullable'  			};  			if (!reader.IsDBNull (4)) {  				field.Precision = Convert.ToInt32 (reader.GetValue (4));  			}  			if (!reader.IsDBNull (5)) {  				field.Scale = Convert.ToInt32 (reader.GetValue (5));  			}  			fields.Add (field);  		}  	}  	cmd.CommandText = string.Format ("SELECT COLUMN_NAME' PRIMARY_KEY' [UNIQUE]' COLLATION FROM information_schema.indexes WHERE TABLE_NAME = '{0}'"' entityName);  	using (var reader = cmd.ExecuteReader ()) {  		while (reader.Read ()) {  			var column = reader.GetString (0);  			var pk = Convert.ToBoolean (reader.GetValue (1));  			var unique = Convert.ToBoolean (reader.GetValue (2));  			var field = fields.FirstOrDefault (f => f.FieldName == column);  			if (pk) {  				field.IsPrimaryKey = true;  			}  			else {  				var collation = Convert.ToInt32 (reader.GetValue (3));  				field.SearchOrder = collation == 1 ? FieldSearchOrder.Ascending : FieldSearchOrder.Descending;  			}  			if (unique) {  				field.RequireUniqueValue = true;  			}  		}  	}  	var entityDefinition = new DynamicEntityDefinition (entityName' fields);  	RegisterEntityInfo (entityDefinition);  }  
Magic Number,OpenNETCF.ORM,SqlCeDataStore,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\OpenNETCF.ORM.SqlCe\SqlCeDataStore.cs,DiscoverDynamicEntity,The following statement contains a magic number: using (var cmd = GetNewCommandObject ()) {  	cmd.Connection = connection;  	cmd.Transaction = CurrentTransaction;  	cmd.CommandText = string.Format ("SELECT COLUMN_NAME' ORDINAL_POSITION' IS_NULLABLE' DATA_TYPE' NUMERIC_PRECISION' NUMERIC_SCALE FROM information_schema.columns WHERE TABLE_NAME = '{0}' ORDER BY ORDINAL_POSITION"' entityName);  	var fields = new List<FieldAttribute> ();  	using (var reader = cmd.ExecuteReader ()) {  		while (reader.Read ()) {  			var name = reader.GetString (0);  			var nullable = string.Compare (reader.GetString (2)' "YES"' true) == 0;  			var type = reader.GetString (3).ParseToDbType ();  			var field = new FieldAttribute () {  				DataType = type'  				FieldName = name'  				AllowsNulls = nullable'  			};  			if (!reader.IsDBNull (4)) {  				field.Precision = Convert.ToInt32 (reader.GetValue (4));  			}  			if (!reader.IsDBNull (5)) {  				field.Scale = Convert.ToInt32 (reader.GetValue (5));  			}  			fields.Add (field);  		}  	}  	cmd.CommandText = string.Format ("SELECT COLUMN_NAME' PRIMARY_KEY' [UNIQUE]' COLLATION FROM information_schema.indexes WHERE TABLE_NAME = '{0}'"' entityName);  	using (var reader = cmd.ExecuteReader ()) {  		while (reader.Read ()) {  			var column = reader.GetString (0);  			var pk = Convert.ToBoolean (reader.GetValue (1));  			var unique = Convert.ToBoolean (reader.GetValue (2));  			var field = fields.FirstOrDefault (f => f.FieldName == column);  			if (pk) {  				field.IsPrimaryKey = true;  			}  			else {  				var collation = Convert.ToInt32 (reader.GetValue (3));  				field.SearchOrder = collation == 1 ? FieldSearchOrder.Ascending : FieldSearchOrder.Descending;  			}  			if (unique) {  				field.RequireUniqueValue = true;  			}  		}  	}  	var entityDefinition = new DynamicEntityDefinition (entityName' fields);  	RegisterEntityInfo (entityDefinition);  }  
Magic Number,OpenNETCF.ORM,SqlCeDataStore,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\OpenNETCF.ORM.SqlCe\SqlCeDataStore.cs,DiscoverDynamicEntity,The following statement contains a magic number: using (var cmd = GetNewCommandObject ()) {  	cmd.Connection = connection;  	cmd.Transaction = CurrentTransaction;  	cmd.CommandText = string.Format ("SELECT COLUMN_NAME' ORDINAL_POSITION' IS_NULLABLE' DATA_TYPE' NUMERIC_PRECISION' NUMERIC_SCALE FROM information_schema.columns WHERE TABLE_NAME = '{0}' ORDER BY ORDINAL_POSITION"' entityName);  	var fields = new List<FieldAttribute> ();  	using (var reader = cmd.ExecuteReader ()) {  		while (reader.Read ()) {  			var name = reader.GetString (0);  			var nullable = string.Compare (reader.GetString (2)' "YES"' true) == 0;  			var type = reader.GetString (3).ParseToDbType ();  			var field = new FieldAttribute () {  				DataType = type'  				FieldName = name'  				AllowsNulls = nullable'  			};  			if (!reader.IsDBNull (4)) {  				field.Precision = Convert.ToInt32 (reader.GetValue (4));  			}  			if (!reader.IsDBNull (5)) {  				field.Scale = Convert.ToInt32 (reader.GetValue (5));  			}  			fields.Add (field);  		}  	}  	cmd.CommandText = string.Format ("SELECT COLUMN_NAME' PRIMARY_KEY' [UNIQUE]' COLLATION FROM information_schema.indexes WHERE TABLE_NAME = '{0}'"' entityName);  	using (var reader = cmd.ExecuteReader ()) {  		while (reader.Read ()) {  			var column = reader.GetString (0);  			var pk = Convert.ToBoolean (reader.GetValue (1));  			var unique = Convert.ToBoolean (reader.GetValue (2));  			var field = fields.FirstOrDefault (f => f.FieldName == column);  			if (pk) {  				field.IsPrimaryKey = true;  			}  			else {  				var collation = Convert.ToInt32 (reader.GetValue (3));  				field.SearchOrder = collation == 1 ? FieldSearchOrder.Ascending : FieldSearchOrder.Descending;  			}  			if (unique) {  				field.RequireUniqueValue = true;  			}  		}  	}  	var entityDefinition = new DynamicEntityDefinition (entityName' fields);  	RegisterEntityInfo (entityDefinition);  }  
Magic Number,OpenNETCF.ORM,SqlCeDataStore,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\OpenNETCF.ORM.SqlCe\SqlCeDataStore.cs,DiscoverDynamicEntity,The following statement contains a magic number: using (var cmd = GetNewCommandObject ()) {  	cmd.Connection = connection;  	cmd.Transaction = CurrentTransaction;  	cmd.CommandText = string.Format ("SELECT COLUMN_NAME' ORDINAL_POSITION' IS_NULLABLE' DATA_TYPE' NUMERIC_PRECISION' NUMERIC_SCALE FROM information_schema.columns WHERE TABLE_NAME = '{0}' ORDER BY ORDINAL_POSITION"' entityName);  	var fields = new List<FieldAttribute> ();  	using (var reader = cmd.ExecuteReader ()) {  		while (reader.Read ()) {  			var name = reader.GetString (0);  			var nullable = string.Compare (reader.GetString (2)' "YES"' true) == 0;  			var type = reader.GetString (3).ParseToDbType ();  			var field = new FieldAttribute () {  				DataType = type'  				FieldName = name'  				AllowsNulls = nullable'  			};  			if (!reader.IsDBNull (4)) {  				field.Precision = Convert.ToInt32 (reader.GetValue (4));  			}  			if (!reader.IsDBNull (5)) {  				field.Scale = Convert.ToInt32 (reader.GetValue (5));  			}  			fields.Add (field);  		}  	}  	cmd.CommandText = string.Format ("SELECT COLUMN_NAME' PRIMARY_KEY' [UNIQUE]' COLLATION FROM information_schema.indexes WHERE TABLE_NAME = '{0}'"' entityName);  	using (var reader = cmd.ExecuteReader ()) {  		while (reader.Read ()) {  			var column = reader.GetString (0);  			var pk = Convert.ToBoolean (reader.GetValue (1));  			var unique = Convert.ToBoolean (reader.GetValue (2));  			var field = fields.FirstOrDefault (f => f.FieldName == column);  			if (pk) {  				field.IsPrimaryKey = true;  			}  			else {  				var collation = Convert.ToInt32 (reader.GetValue (3));  				field.SearchOrder = collation == 1 ? FieldSearchOrder.Ascending : FieldSearchOrder.Descending;  			}  			if (unique) {  				field.RequireUniqueValue = true;  			}  		}  	}  	var entityDefinition = new DynamicEntityDefinition (entityName' fields);  	RegisterEntityInfo (entityDefinition);  }  
Magic Number,OpenNETCF.ORM,SqlCeDataStore,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\OpenNETCF.ORM.SqlCe\SqlCeDataStore.cs,DiscoverDynamicEntity,The following statement contains a magic number: using (var reader = cmd.ExecuteReader ()) {  	while (reader.Read ()) {  		var name = reader.GetString (0);  		var nullable = string.Compare (reader.GetString (2)' "YES"' true) == 0;  		var type = reader.GetString (3).ParseToDbType ();  		var field = new FieldAttribute () {  			DataType = type'  			FieldName = name'  			AllowsNulls = nullable'  		};  		if (!reader.IsDBNull (4)) {  			field.Precision = Convert.ToInt32 (reader.GetValue (4));  		}  		if (!reader.IsDBNull (5)) {  			field.Scale = Convert.ToInt32 (reader.GetValue (5));  		}  		fields.Add (field);  	}  }  
Magic Number,OpenNETCF.ORM,SqlCeDataStore,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\OpenNETCF.ORM.SqlCe\SqlCeDataStore.cs,DiscoverDynamicEntity,The following statement contains a magic number: using (var reader = cmd.ExecuteReader ()) {  	while (reader.Read ()) {  		var name = reader.GetString (0);  		var nullable = string.Compare (reader.GetString (2)' "YES"' true) == 0;  		var type = reader.GetString (3).ParseToDbType ();  		var field = new FieldAttribute () {  			DataType = type'  			FieldName = name'  			AllowsNulls = nullable'  		};  		if (!reader.IsDBNull (4)) {  			field.Precision = Convert.ToInt32 (reader.GetValue (4));  		}  		if (!reader.IsDBNull (5)) {  			field.Scale = Convert.ToInt32 (reader.GetValue (5));  		}  		fields.Add (field);  	}  }  
Magic Number,OpenNETCF.ORM,SqlCeDataStore,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\OpenNETCF.ORM.SqlCe\SqlCeDataStore.cs,DiscoverDynamicEntity,The following statement contains a magic number: using (var reader = cmd.ExecuteReader ()) {  	while (reader.Read ()) {  		var name = reader.GetString (0);  		var nullable = string.Compare (reader.GetString (2)' "YES"' true) == 0;  		var type = reader.GetString (3).ParseToDbType ();  		var field = new FieldAttribute () {  			DataType = type'  			FieldName = name'  			AllowsNulls = nullable'  		};  		if (!reader.IsDBNull (4)) {  			field.Precision = Convert.ToInt32 (reader.GetValue (4));  		}  		if (!reader.IsDBNull (5)) {  			field.Scale = Convert.ToInt32 (reader.GetValue (5));  		}  		fields.Add (field);  	}  }  
Magic Number,OpenNETCF.ORM,SqlCeDataStore,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\OpenNETCF.ORM.SqlCe\SqlCeDataStore.cs,DiscoverDynamicEntity,The following statement contains a magic number: using (var reader = cmd.ExecuteReader ()) {  	while (reader.Read ()) {  		var name = reader.GetString (0);  		var nullable = string.Compare (reader.GetString (2)' "YES"' true) == 0;  		var type = reader.GetString (3).ParseToDbType ();  		var field = new FieldAttribute () {  			DataType = type'  			FieldName = name'  			AllowsNulls = nullable'  		};  		if (!reader.IsDBNull (4)) {  			field.Precision = Convert.ToInt32 (reader.GetValue (4));  		}  		if (!reader.IsDBNull (5)) {  			field.Scale = Convert.ToInt32 (reader.GetValue (5));  		}  		fields.Add (field);  	}  }  
Magic Number,OpenNETCF.ORM,SqlCeDataStore,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\OpenNETCF.ORM.SqlCe\SqlCeDataStore.cs,DiscoverDynamicEntity,The following statement contains a magic number: using (var reader = cmd.ExecuteReader ()) {  	while (reader.Read ()) {  		var name = reader.GetString (0);  		var nullable = string.Compare (reader.GetString (2)' "YES"' true) == 0;  		var type = reader.GetString (3).ParseToDbType ();  		var field = new FieldAttribute () {  			DataType = type'  			FieldName = name'  			AllowsNulls = nullable'  		};  		if (!reader.IsDBNull (4)) {  			field.Precision = Convert.ToInt32 (reader.GetValue (4));  		}  		if (!reader.IsDBNull (5)) {  			field.Scale = Convert.ToInt32 (reader.GetValue (5));  		}  		fields.Add (field);  	}  }  
Magic Number,OpenNETCF.ORM,SqlCeDataStore,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\OpenNETCF.ORM.SqlCe\SqlCeDataStore.cs,DiscoverDynamicEntity,The following statement contains a magic number: using (var reader = cmd.ExecuteReader ()) {  	while (reader.Read ()) {  		var name = reader.GetString (0);  		var nullable = string.Compare (reader.GetString (2)' "YES"' true) == 0;  		var type = reader.GetString (3).ParseToDbType ();  		var field = new FieldAttribute () {  			DataType = type'  			FieldName = name'  			AllowsNulls = nullable'  		};  		if (!reader.IsDBNull (4)) {  			field.Precision = Convert.ToInt32 (reader.GetValue (4));  		}  		if (!reader.IsDBNull (5)) {  			field.Scale = Convert.ToInt32 (reader.GetValue (5));  		}  		fields.Add (field);  	}  }  
Magic Number,OpenNETCF.ORM,SqlCeDataStore,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\OpenNETCF.ORM.SqlCe\SqlCeDataStore.cs,DiscoverDynamicEntity,The following statement contains a magic number: while (reader.Read ()) {  	var name = reader.GetString (0);  	var nullable = string.Compare (reader.GetString (2)' "YES"' true) == 0;  	var type = reader.GetString (3).ParseToDbType ();  	var field = new FieldAttribute () {  		DataType = type'  		FieldName = name'  		AllowsNulls = nullable'  	};  	if (!reader.IsDBNull (4)) {  		field.Precision = Convert.ToInt32 (reader.GetValue (4));  	}  	if (!reader.IsDBNull (5)) {  		field.Scale = Convert.ToInt32 (reader.GetValue (5));  	}  	fields.Add (field);  }  
Magic Number,OpenNETCF.ORM,SqlCeDataStore,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\OpenNETCF.ORM.SqlCe\SqlCeDataStore.cs,DiscoverDynamicEntity,The following statement contains a magic number: while (reader.Read ()) {  	var name = reader.GetString (0);  	var nullable = string.Compare (reader.GetString (2)' "YES"' true) == 0;  	var type = reader.GetString (3).ParseToDbType ();  	var field = new FieldAttribute () {  		DataType = type'  		FieldName = name'  		AllowsNulls = nullable'  	};  	if (!reader.IsDBNull (4)) {  		field.Precision = Convert.ToInt32 (reader.GetValue (4));  	}  	if (!reader.IsDBNull (5)) {  		field.Scale = Convert.ToInt32 (reader.GetValue (5));  	}  	fields.Add (field);  }  
Magic Number,OpenNETCF.ORM,SqlCeDataStore,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\OpenNETCF.ORM.SqlCe\SqlCeDataStore.cs,DiscoverDynamicEntity,The following statement contains a magic number: while (reader.Read ()) {  	var name = reader.GetString (0);  	var nullable = string.Compare (reader.GetString (2)' "YES"' true) == 0;  	var type = reader.GetString (3).ParseToDbType ();  	var field = new FieldAttribute () {  		DataType = type'  		FieldName = name'  		AllowsNulls = nullable'  	};  	if (!reader.IsDBNull (4)) {  		field.Precision = Convert.ToInt32 (reader.GetValue (4));  	}  	if (!reader.IsDBNull (5)) {  		field.Scale = Convert.ToInt32 (reader.GetValue (5));  	}  	fields.Add (field);  }  
Magic Number,OpenNETCF.ORM,SqlCeDataStore,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\OpenNETCF.ORM.SqlCe\SqlCeDataStore.cs,DiscoverDynamicEntity,The following statement contains a magic number: while (reader.Read ()) {  	var name = reader.GetString (0);  	var nullable = string.Compare (reader.GetString (2)' "YES"' true) == 0;  	var type = reader.GetString (3).ParseToDbType ();  	var field = new FieldAttribute () {  		DataType = type'  		FieldName = name'  		AllowsNulls = nullable'  	};  	if (!reader.IsDBNull (4)) {  		field.Precision = Convert.ToInt32 (reader.GetValue (4));  	}  	if (!reader.IsDBNull (5)) {  		field.Scale = Convert.ToInt32 (reader.GetValue (5));  	}  	fields.Add (field);  }  
Magic Number,OpenNETCF.ORM,SqlCeDataStore,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\OpenNETCF.ORM.SqlCe\SqlCeDataStore.cs,DiscoverDynamicEntity,The following statement contains a magic number: while (reader.Read ()) {  	var name = reader.GetString (0);  	var nullable = string.Compare (reader.GetString (2)' "YES"' true) == 0;  	var type = reader.GetString (3).ParseToDbType ();  	var field = new FieldAttribute () {  		DataType = type'  		FieldName = name'  		AllowsNulls = nullable'  	};  	if (!reader.IsDBNull (4)) {  		field.Precision = Convert.ToInt32 (reader.GetValue (4));  	}  	if (!reader.IsDBNull (5)) {  		field.Scale = Convert.ToInt32 (reader.GetValue (5));  	}  	fields.Add (field);  }  
Magic Number,OpenNETCF.ORM,SqlCeDataStore,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\OpenNETCF.ORM.SqlCe\SqlCeDataStore.cs,DiscoverDynamicEntity,The following statement contains a magic number: while (reader.Read ()) {  	var name = reader.GetString (0);  	var nullable = string.Compare (reader.GetString (2)' "YES"' true) == 0;  	var type = reader.GetString (3).ParseToDbType ();  	var field = new FieldAttribute () {  		DataType = type'  		FieldName = name'  		AllowsNulls = nullable'  	};  	if (!reader.IsDBNull (4)) {  		field.Precision = Convert.ToInt32 (reader.GetValue (4));  	}  	if (!reader.IsDBNull (5)) {  		field.Scale = Convert.ToInt32 (reader.GetValue (5));  	}  	fields.Add (field);  }  
Magic Number,OpenNETCF.ORM,SqlCeDataStore,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\OpenNETCF.ORM.SqlCe\SqlCeDataStore.cs,DiscoverDynamicEntity,The following statement contains a magic number: if (!reader.IsDBNull (4)) {  	field.Precision = Convert.ToInt32 (reader.GetValue (4));  }  
Magic Number,OpenNETCF.ORM,SqlCeDataStore,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\OpenNETCF.ORM.SqlCe\SqlCeDataStore.cs,DiscoverDynamicEntity,The following statement contains a magic number: if (!reader.IsDBNull (4)) {  	field.Precision = Convert.ToInt32 (reader.GetValue (4));  }  
Magic Number,OpenNETCF.ORM,SqlCeDataStore,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\OpenNETCF.ORM.SqlCe\SqlCeDataStore.cs,DiscoverDynamicEntity,The following statement contains a magic number: field.Precision = Convert.ToInt32 (reader.GetValue (4));  
Magic Number,OpenNETCF.ORM,SqlCeDataStore,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\OpenNETCF.ORM.SqlCe\SqlCeDataStore.cs,DiscoverDynamicEntity,The following statement contains a magic number: if (!reader.IsDBNull (5)) {  	field.Scale = Convert.ToInt32 (reader.GetValue (5));  }  
Magic Number,OpenNETCF.ORM,SqlCeDataStore,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\OpenNETCF.ORM.SqlCe\SqlCeDataStore.cs,DiscoverDynamicEntity,The following statement contains a magic number: if (!reader.IsDBNull (5)) {  	field.Scale = Convert.ToInt32 (reader.GetValue (5));  }  
Magic Number,OpenNETCF.ORM,SqlCeDataStore,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\OpenNETCF.ORM.SqlCe\SqlCeDataStore.cs,DiscoverDynamicEntity,The following statement contains a magic number: field.Scale = Convert.ToInt32 (reader.GetValue (5));  
Magic Number,OpenNETCF.ORM,SqlCeDataStore,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\OpenNETCF.ORM.SqlCe\SqlCeDataStore.cs,DiscoverDynamicEntity,The following statement contains a magic number: using (var reader = cmd.ExecuteReader ()) {  	while (reader.Read ()) {  		var column = reader.GetString (0);  		var pk = Convert.ToBoolean (reader.GetValue (1));  		var unique = Convert.ToBoolean (reader.GetValue (2));  		var field = fields.FirstOrDefault (f => f.FieldName == column);  		if (pk) {  			field.IsPrimaryKey = true;  		}  		else {  			var collation = Convert.ToInt32 (reader.GetValue (3));  			field.SearchOrder = collation == 1 ? FieldSearchOrder.Ascending : FieldSearchOrder.Descending;  		}  		if (unique) {  			field.RequireUniqueValue = true;  		}  	}  }  
Magic Number,OpenNETCF.ORM,SqlCeDataStore,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\OpenNETCF.ORM.SqlCe\SqlCeDataStore.cs,DiscoverDynamicEntity,The following statement contains a magic number: using (var reader = cmd.ExecuteReader ()) {  	while (reader.Read ()) {  		var column = reader.GetString (0);  		var pk = Convert.ToBoolean (reader.GetValue (1));  		var unique = Convert.ToBoolean (reader.GetValue (2));  		var field = fields.FirstOrDefault (f => f.FieldName == column);  		if (pk) {  			field.IsPrimaryKey = true;  		}  		else {  			var collation = Convert.ToInt32 (reader.GetValue (3));  			field.SearchOrder = collation == 1 ? FieldSearchOrder.Ascending : FieldSearchOrder.Descending;  		}  		if (unique) {  			field.RequireUniqueValue = true;  		}  	}  }  
Magic Number,OpenNETCF.ORM,SqlCeDataStore,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\OpenNETCF.ORM.SqlCe\SqlCeDataStore.cs,DiscoverDynamicEntity,The following statement contains a magic number: while (reader.Read ()) {  	var column = reader.GetString (0);  	var pk = Convert.ToBoolean (reader.GetValue (1));  	var unique = Convert.ToBoolean (reader.GetValue (2));  	var field = fields.FirstOrDefault (f => f.FieldName == column);  	if (pk) {  		field.IsPrimaryKey = true;  	}  	else {  		var collation = Convert.ToInt32 (reader.GetValue (3));  		field.SearchOrder = collation == 1 ? FieldSearchOrder.Ascending : FieldSearchOrder.Descending;  	}  	if (unique) {  		field.RequireUniqueValue = true;  	}  }  
Magic Number,OpenNETCF.ORM,SqlCeDataStore,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\OpenNETCF.ORM.SqlCe\SqlCeDataStore.cs,DiscoverDynamicEntity,The following statement contains a magic number: while (reader.Read ()) {  	var column = reader.GetString (0);  	var pk = Convert.ToBoolean (reader.GetValue (1));  	var unique = Convert.ToBoolean (reader.GetValue (2));  	var field = fields.FirstOrDefault (f => f.FieldName == column);  	if (pk) {  		field.IsPrimaryKey = true;  	}  	else {  		var collation = Convert.ToInt32 (reader.GetValue (3));  		field.SearchOrder = collation == 1 ? FieldSearchOrder.Ascending : FieldSearchOrder.Descending;  	}  	if (unique) {  		field.RequireUniqueValue = true;  	}  }  
Magic Number,OpenNETCF.ORM,SqlCeDataStore,C:\repos\DrNorton_ScaryStories.Core\ORM_1.0.13029_SRC\OpenNETCF.ORM.SqlCe\SqlCeDataStore.cs,DiscoverDynamicEntity,The following statement contains a magic number: if (pk) {  	field.IsPrimaryKey = true;  }  else {  	var collation = Convert.ToInt32 (reader.GetValue (3));  	field.SearchOrder = collation == 1 ? FieldSearchOrder.Ascending : FieldSearchOrder.Descending;  }  
