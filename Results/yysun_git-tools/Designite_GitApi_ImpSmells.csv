Implementation smell,Namespace,Class,File,Method,Description
Complex Method,GitScc.DataServices,RepositoryGraph,C:\repos\yysun_git-tools\GitApi\DataServices\RepositoryGraph.cs,GenerateGraph,Cyclomatic complexity of the method is 9
Complex Method,GitScc,DiffTool,C:\repos\yysun_git-tools\GitApi\DiffTool.cs,GetHunks,Cyclomatic complexity of the method is 16
Complex Method,GitScc,GitRepository,C:\repos\yysun_git-tools\GitApi\GitRepository.cs,ParseGitStatus,Cyclomatic complexity of the method is 8
Long Parameter List,GitScc,GitRepository,C:\repos\yysun_git-tools\GitApi\GitRepository.cs,Apply,The method has 5 parameters. Parameters: diffLines' startLine' endLine' cached' reverse
Long Statement,GitScc.DataServices,RepositoryGraph,C:\repos\yysun_git-tools\GitApi\DataServices\RepositoryGraph.cs,GetChanges,The length of the statement  "                var result = GitBash.Run(string.Format("diff -M -C --name-status -z {0} {1}"' fromCommitId' toCommitId)' this.workingDirectory); " is 128.
Long Statement,GitScc,GitRepository,C:\repos\yysun_git-tools\GitApi\GitRepository.cs,DiffFile,The length of the statement  "            GitBash.RunCmd(string.Format("diff {2} {3} -- \"{0}\" > \"{1}\""' fileNameRel' tmpFileName' commitId1' commitId2)' WorkingDirectory); " is 133.
Long Statement,GitScc,GitRepository,C:\repos\yysun_git-tools\GitApi\GitRepository.cs,GetCommitsForFile,The length of the statement  "            var result = GitBash.Run(string.Format("log -z --ignore-space-change --pretty=format:%H -- \"{0}\""' fileNameRel)' WorkingDirectory); " is 133.
Empty Catch Block,GitScc,GitSccOptions,C:\repos\yysun_git-tools\GitApi\GitSccOptions.cs,LoadFromConfig,The method has an empty catch block.
Empty Catch Block,GitScc,GitSccOptions,C:\repos\yysun_git-tools\GitApi\GitSccOptions.cs,SaveConfig,The method has an empty catch block.
Magic Number,GitScc.DataServices,GitTreeObject,C:\repos\yysun_git-tools\GitApi\DataServices\GitTreeObject.cs,ParseString,The following statement contains a magic number: if (string.IsNullOrWhiteSpace(itemsString) || (itemsString.Length <= 53))                  return null;
Magic Number,GitScc.DataServices,GitTreeObject,C:\repos\yysun_git-tools\GitApi\DataServices\GitTreeObject.cs,ParseString,The following statement contains a magic number: var guidStart = itemsString.IndexOf(' '' 7);
Magic Number,GitScc.DataServices,GitTreeObject,C:\repos\yysun_git-tools\GitApi\DataServices\GitTreeObject.cs,ParseString,The following statement contains a magic number: var name = itemsString.Substring(guidStart + 42).Trim();
Magic Number,GitScc.DataServices,GitTreeObject,C:\repos\yysun_git-tools\GitApi\DataServices\GitTreeObject.cs,ParseString,The following statement contains a magic number: return new GitTreeObject              {                  Mode = itemsString.Substring(0' 6)'                  Type = itemsString.Substring(7' guidStart - 7).ToLower()'                  Id = itemsString.Substring(guidStart + 1' 40)'                  Name = name'                  FullName = fullName'                  Repository = this.Repository'              };
Magic Number,GitScc.DataServices,GitTreeObject,C:\repos\yysun_git-tools\GitApi\DataServices\GitTreeObject.cs,ParseString,The following statement contains a magic number: return new GitTreeObject              {                  Mode = itemsString.Substring(0' 6)'                  Type = itemsString.Substring(7' guidStart - 7).ToLower()'                  Id = itemsString.Substring(guidStart + 1' 40)'                  Name = name'                  FullName = fullName'                  Repository = this.Repository'              };
Magic Number,GitScc.DataServices,GitTreeObject,C:\repos\yysun_git-tools\GitApi\DataServices\GitTreeObject.cs,ParseString,The following statement contains a magic number: return new GitTreeObject              {                  Mode = itemsString.Substring(0' 6)'                  Type = itemsString.Substring(7' guidStart - 7).ToLower()'                  Id = itemsString.Substring(guidStart + 1' 40)'                  Name = name'                  FullName = fullName'                  Repository = this.Repository'              };
Magic Number,GitScc.DataServices,GitTreeObject,C:\repos\yysun_git-tools\GitApi\DataServices\GitTreeObject.cs,ParseString,The following statement contains a magic number: return new GitTreeObject              {                  Mode = itemsString.Substring(0' 6)'                  Type = itemsString.Substring(7' guidStart - 7).ToLower()'                  Id = itemsString.Substring(guidStart + 1' 40)'                  Name = name'                  FullName = fullName'                  Repository = this.Repository'              };
Magic Number,GitScc.DataServices,RepositoryGraph,C:\repos\yysun_git-tools\GitApi\DataServices\RepositoryGraph.cs,ParseCommit,The following statement contains a magic number: return new Commit              {                  Id = ss[0]'                  ParentIds = ss[1].Split(' ')'                  AuthorDateRelative = ss[2]'                  AuthorName = ss[3]'                  AuthorEmail = ss[4]'                  AuthorDate = DateTime.Parse(ss[5])'                  TreeId = ss[6]'                  Subject = ss[7]'                  Message = ss[7] + (ss.Length <= 8 ? "" : "\n\n" + string.Join("\n"' ss' 8' ss.Length - 8))              };
Magic Number,GitScc.DataServices,RepositoryGraph,C:\repos\yysun_git-tools\GitApi\DataServices\RepositoryGraph.cs,ParseCommit,The following statement contains a magic number: return new Commit              {                  Id = ss[0]'                  ParentIds = ss[1].Split(' ')'                  AuthorDateRelative = ss[2]'                  AuthorName = ss[3]'                  AuthorEmail = ss[4]'                  AuthorDate = DateTime.Parse(ss[5])'                  TreeId = ss[6]'                  Subject = ss[7]'                  Message = ss[7] + (ss.Length <= 8 ? "" : "\n\n" + string.Join("\n"' ss' 8' ss.Length - 8))              };
Magic Number,GitScc.DataServices,RepositoryGraph,C:\repos\yysun_git-tools\GitApi\DataServices\RepositoryGraph.cs,ParseCommit,The following statement contains a magic number: return new Commit              {                  Id = ss[0]'                  ParentIds = ss[1].Split(' ')'                  AuthorDateRelative = ss[2]'                  AuthorName = ss[3]'                  AuthorEmail = ss[4]'                  AuthorDate = DateTime.Parse(ss[5])'                  TreeId = ss[6]'                  Subject = ss[7]'                  Message = ss[7] + (ss.Length <= 8 ? "" : "\n\n" + string.Join("\n"' ss' 8' ss.Length - 8))              };
Magic Number,GitScc.DataServices,RepositoryGraph,C:\repos\yysun_git-tools\GitApi\DataServices\RepositoryGraph.cs,ParseCommit,The following statement contains a magic number: return new Commit              {                  Id = ss[0]'                  ParentIds = ss[1].Split(' ')'                  AuthorDateRelative = ss[2]'                  AuthorName = ss[3]'                  AuthorEmail = ss[4]'                  AuthorDate = DateTime.Parse(ss[5])'                  TreeId = ss[6]'                  Subject = ss[7]'                  Message = ss[7] + (ss.Length <= 8 ? "" : "\n\n" + string.Join("\n"' ss' 8' ss.Length - 8))              };
Magic Number,GitScc.DataServices,RepositoryGraph,C:\repos\yysun_git-tools\GitApi\DataServices\RepositoryGraph.cs,ParseCommit,The following statement contains a magic number: return new Commit              {                  Id = ss[0]'                  ParentIds = ss[1].Split(' ')'                  AuthorDateRelative = ss[2]'                  AuthorName = ss[3]'                  AuthorEmail = ss[4]'                  AuthorDate = DateTime.Parse(ss[5])'                  TreeId = ss[6]'                  Subject = ss[7]'                  Message = ss[7] + (ss.Length <= 8 ? "" : "\n\n" + string.Join("\n"' ss' 8' ss.Length - 8))              };
Magic Number,GitScc.DataServices,RepositoryGraph,C:\repos\yysun_git-tools\GitApi\DataServices\RepositoryGraph.cs,ParseCommit,The following statement contains a magic number: return new Commit              {                  Id = ss[0]'                  ParentIds = ss[1].Split(' ')'                  AuthorDateRelative = ss[2]'                  AuthorName = ss[3]'                  AuthorEmail = ss[4]'                  AuthorDate = DateTime.Parse(ss[5])'                  TreeId = ss[6]'                  Subject = ss[7]'                  Message = ss[7] + (ss.Length <= 8 ? "" : "\n\n" + string.Join("\n"' ss' 8' ss.Length - 8))              };
Magic Number,GitScc.DataServices,RepositoryGraph,C:\repos\yysun_git-tools\GitApi\DataServices\RepositoryGraph.cs,ParseCommit,The following statement contains a magic number: return new Commit              {                  Id = ss[0]'                  ParentIds = ss[1].Split(' ')'                  AuthorDateRelative = ss[2]'                  AuthorName = ss[3]'                  AuthorEmail = ss[4]'                  AuthorDate = DateTime.Parse(ss[5])'                  TreeId = ss[6]'                  Subject = ss[7]'                  Message = ss[7] + (ss.Length <= 8 ? "" : "\n\n" + string.Join("\n"' ss' 8' ss.Length - 8))              };
Magic Number,GitScc.DataServices,RepositoryGraph,C:\repos\yysun_git-tools\GitApi\DataServices\RepositoryGraph.cs,ParseCommit,The following statement contains a magic number: return new Commit              {                  Id = ss[0]'                  ParentIds = ss[1].Split(' ')'                  AuthorDateRelative = ss[2]'                  AuthorName = ss[3]'                  AuthorEmail = ss[4]'                  AuthorDate = DateTime.Parse(ss[5])'                  TreeId = ss[6]'                  Subject = ss[7]'                  Message = ss[7] + (ss.Length <= 8 ? "" : "\n\n" + string.Join("\n"' ss' 8' ss.Length - 8))              };
Magic Number,GitScc.DataServices,RepositoryGraph,C:\repos\yysun_git-tools\GitApi\DataServices\RepositoryGraph.cs,ParseCommit,The following statement contains a magic number: return new Commit              {                  Id = ss[0]'                  ParentIds = ss[1].Split(' ')'                  AuthorDateRelative = ss[2]'                  AuthorName = ss[3]'                  AuthorEmail = ss[4]'                  AuthorDate = DateTime.Parse(ss[5])'                  TreeId = ss[6]'                  Subject = ss[7]'                  Message = ss[7] + (ss.Length <= 8 ? "" : "\n\n" + string.Join("\n"' ss' 8' ss.Length - 8))              };
Magic Number,GitScc.DataServices,RepositoryGraph,C:\repos\yysun_git-tools\GitApi\DataServices\RepositoryGraph.cs,ParseCommit,The following statement contains a magic number: return new Commit              {                  Id = ss[0]'                  ParentIds = ss[1].Split(' ')'                  AuthorDateRelative = ss[2]'                  AuthorName = ss[3]'                  AuthorEmail = ss[4]'                  AuthorDate = DateTime.Parse(ss[5])'                  TreeId = ss[6]'                  Subject = ss[7]'                  Message = ss[7] + (ss.Length <= 8 ? "" : "\n\n" + string.Join("\n"' ss' 8' ss.Length - 8))              };
Magic Number,GitScc.DataServices,RepositoryGraph,C:\repos\yysun_git-tools\GitApi\DataServices\RepositoryGraph.cs,GetChanges,The following statement contains a magic number: try              {                  var result = GitBash.Run(string.Format("diff -M -C --name-status -z {0} {1}"' fromCommitId' toCommitId)' this.workingDirectory);                    if (!string.IsNullOrWhiteSpace(result.Output))                  {                      //from gitextensions GitCommandHelper.cs                      var nl = new char[] { '\n'' '\r' };                      string trimmedStatus = result.Output.Trim(nl);                      int lastNewLinePos = trimmedStatus.LastIndexOfAny(nl);                      if (lastNewLinePos > 0)                      {                          int ind = trimmedStatus.LastIndexOf('\0');                          if (ind < lastNewLinePos) //Warning at end                          {                              lastNewLinePos = trimmedStatus.IndexOfAny(nl' ind >= 0 ? ind : 0);                              trimmedStatus = trimmedStatus.Substring(0' lastNewLinePos).Trim(nl);                          }                          else //Warning at beginning                              trimmedStatus = trimmedStatus.Substring(lastNewLinePos).Trim(nl);                      }                        var files = trimmedStatus.Split(new char[] { '\0' }' StringSplitOptions.RemoveEmptyEntries);                      for (int n = 0; n < files.Length; n++)                      {                          string status = files[n];                          var fileName = string.Empty;                          var change = ParseStaus(status);                            switch (change)                          {                              case ChangeType.Renamed:                              case ChangeType.Copied:                                  fileName = files[n + 2];                                  n++; n++;                                  break;                              case ChangeType.Unknown:                                   continue;                              default:                                                                 fileName = files[n + 1];                                  n++;                                  break;                          }                            changes.Add(new Change                          {                              ChangeType = change'                              Name = fileName.Trim()                          });                      }                  }              }              catch (Exception ex)              {                  Log.WriteLine("Repository.GetChanges: {0} - {1}\r\n{2}"' fromCommitId' toCommitId' ex.ToString());              }
Magic Number,GitScc,DiffTool,C:\repos\yysun_git-tools\GitApi\DiffTool.cs,Parse,The following statement contains a magic number: for(int idx=0; idx<diffLines.Length; idx++)              {                  var line = diffLines[idx];                  var match = Regex.Match(line' HUNK_HEADER);                    if(match.Success)                  {                      hunk = new DiffHunk {                          FirstLineIndex = idx + 1'                          Heading = match.Groups[3].Value'                          Lines = new List<string>()'                          OldBlock = ParseRange(match.Groups[1].Value)'                          NewBlock = ParseRange(match.Groups[2].Value)'                      };                      hunks.Add(hunk);                  }                  else if(hunk != null)                  {                      hunk.Lines.Add(line);                  }              }
Magic Number,GitScc,DiffTool,C:\repos\yysun_git-tools\GitApi\DiffTool.cs,Parse,The following statement contains a magic number: for(int idx=0; idx<diffLines.Length; idx++)              {                  var line = diffLines[idx];                  var match = Regex.Match(line' HUNK_HEADER);                    if(match.Success)                  {                      hunk = new DiffHunk {                          FirstLineIndex = idx + 1'                          Heading = match.Groups[3].Value'                          Lines = new List<string>()'                          OldBlock = ParseRange(match.Groups[1].Value)'                          NewBlock = ParseRange(match.Groups[2].Value)'                      };                      hunks.Add(hunk);                  }                  else if(hunk != null)                  {                      hunk.Lines.Add(line);                  }              }
Magic Number,GitScc,GitRepository,C:\repos\yysun_git-tools\GitApi\GitRepository.cs,IsBinaryFile,The following statement contains a magic number: try              {                  int len = Convert.ToInt32(fs.Length);                  if (len > 1000) len = 1000;                  byte[] bytes = new byte[len];                  fs.Read(bytes' 0' len);                  for (int i = 0; i < len - 1; i++)                  {                      if (bytes[i] == 0) return true;                  }                  return false;              }              finally              {                  fs.Close();              }
Magic Number,GitScc,GitRepository,C:\repos\yysun_git-tools\GitApi\GitRepository.cs,IsBinaryFile,The following statement contains a magic number: try              {                  int len = Convert.ToInt32(fs.Length);                  if (len > 1000) len = 1000;                  byte[] bytes = new byte[len];                  fs.Read(bytes' 0' len);                  for (int i = 0; i < len - 1; i++)                  {                      if (bytes[i] == 0) return true;                  }                  return false;              }              finally              {                  fs.Close();              }
Magic Number,GitScc,GitRepository,C:\repos\yysun_git-tools\GitApi\GitRepository.cs,CurrentCommitHasRefs,The following statement contains a magic number: if (!result.HasError && !result.Output.StartsWith("fatal:"))              {                  var refs = result.Output.Split('\n')                            .Where(t => t.IndexOf(head) >= 0);                  return refs.Count() > 2;              }
Magic Number,GitScc,GitRepository,C:\repos\yysun_git-tools\GitApi\GitRepository.cs,Apply,The following statement contains a magic number: using (var file = new StreamWriter(tmpFileName' false' Encoding.UTF8))              {                  for (int i = 0; i < 4; i++)                  {                      // Skip the line: index xxxx..xxxx                      if (i != 1)                      {                          var line = diffLines[i];                          file.Write(FixEOL(line));                      }                  }                  foreach (var hunk in hunks)                  {                      var heading = $"@@ -{hunk.OldBlock[0]}'{hunk.OldBlock[1]} +{hunk.NewBlock[0]}'{hunk.NewBlock[1]} @@{hunk.Heading}";                      file.Write(FixEOL(heading));                      foreach (var line in hunk.Lines)                      {                          file.Write(FixEOL(line));                      }                  }              }
Missing Default,GitScc.DataServices,RepositoryGraph,C:\repos\yysun_git-tools\GitApi\DataServices\RepositoryGraph.cs,ParseStaus,The following switch statement is missing a default case: switch (x)              {                  case 'A':                      return ChangeType.Added;                  case 'C':                      return ChangeType.Copied;                  case 'D':                      return ChangeType.Deleted;                  case 'M':                      return ChangeType.Modified;                  case 'R':                      return ChangeType.Renamed;                  case 'T':                      return ChangeType.TypeChanged;                  case 'U':                      return ChangeType.Unmerged;              }
Missing Default,GitScc,GitRepository,C:\repos\yysun_git-tools\GitApi\GitRepository.cs,ParseGitStatus,The following switch statement is missing a default case: switch (x)                  {                      case '?':                          gitFile.Status = GitFileStatus.New;                          break;                      case '!':                          gitFile.Status = GitFileStatus.Ignored;                          break;                      case ' ':                          if (y == 'M') gitFile.Status = GitFileStatus.Modified;                          else if (y == 'D') gitFile.Status = GitFileStatus.Deleted;                          break;                      case 'M':                          if (y == 'M') gitFile.Status = GitFileStatus.Modified;                          else gitFile.Status = GitFileStatus.Staged;                          break;                      case 'A':                          gitFile.Status = GitFileStatus.Added;                          break;                      case 'D':                          gitFile.Status = GitFileStatus.Removed;                          break;                      case 'R':                          gitFile.Status = GitFileStatus.Renamed;                          break;                      case 'C':                          gitFile.Status = GitFileStatus.Copied;                          break;                        case 'U':                          gitFile.Status = GitFileStatus.Conflict;                          break;                  }
