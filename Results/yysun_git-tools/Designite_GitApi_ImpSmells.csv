Implementation smell,Namespace,Class,File,Method,Description
Complex Method,GitScc.DataServices,RepositoryGraph,D:\research\architectureSmells\repos\yysun_git-tools\GitApi\DataServices\RepositoryGraph.cs,GenerateGraph,Cyclomatic complexity of the method is 9
Complex Method,GitScc.DataServices,RepositoryGraph,D:\research\architectureSmells\repos\yysun_git-tools\GitApi\DataServices\RepositoryGraph.cs,ParseStaus,Cyclomatic complexity of the method is 8
Complex Method,GitScc,DiffTool,D:\research\architectureSmells\repos\yysun_git-tools\GitApi\DiffTool.cs,GetHunks,Cyclomatic complexity of the method is 18
Complex Method,GitScc,GitRepository,D:\research\architectureSmells\repos\yysun_git-tools\GitApi\GitRepository.cs,ParseGitStatus,Cyclomatic complexity of the method is 18
Complex Method,GitScc,GitRepository,D:\research\architectureSmells\repos\yysun_git-tools\GitApi\GitRepository.cs,Apply,Cyclomatic complexity of the method is 8
Long Parameter List,GitScc,GitRepository,D:\research\architectureSmells\repos\yysun_git-tools\GitApi\GitRepository.cs,Apply,The method has 5 parameters. Parameters: diffLines' startLine' endLine' cached' reverse
Long Statement,GitScc.DataServices,RepositoryGraph,D:\research\architectureSmells\repos\yysun_git-tools\GitApi\DataServices\RepositoryGraph.cs,GetChanges,The length of the statement  "                var result = GitBash.Run(string.Format("diff -M -C --name-status -z {0} {1}"' fromCommitId' toCommitId)' this.workingDirectory); " is 128.
Long Statement,GitScc,GitRepository,D:\research\architectureSmells\repos\yysun_git-tools\GitApi\GitRepository.cs,DiffFile,The length of the statement  "            GitBash.RunCmd(string.Format("diff {2} {3} -- \"{0}\" > \"{1}\""' fileNameRel' tmpFileName' commitId1' commitId2)' WorkingDirectory); " is 133.
Long Statement,GitScc,GitRepository,D:\research\architectureSmells\repos\yysun_git-tools\GitApi\GitRepository.cs,GetCommitsForFile,The length of the statement  "            var result = GitBash.Run(string.Format("log -z --ignore-space-change --pretty=format:%H -- \"{0}\""' fileNameRel)' WorkingDirectory); " is 133.
Empty Catch Block,GitScc,GitSccOptions,D:\research\architectureSmells\repos\yysun_git-tools\GitApi\GitSccOptions.cs,LoadFromConfig,The method has an empty catch block.
Empty Catch Block,GitScc,GitSccOptions,D:\research\architectureSmells\repos\yysun_git-tools\GitApi\GitSccOptions.cs,SaveConfig,The method has an empty catch block.
Magic Number,GitScc.DataServices,GitTreeObject,D:\research\architectureSmells\repos\yysun_git-tools\GitApi\DataServices\GitTreeObject.cs,ParseString,The following statement contains a magic number: string.IsNullOrWhiteSpace(itemsString) || (itemsString.Length <= 53)
Magic Number,GitScc.DataServices,GitTreeObject,D:\research\architectureSmells\repos\yysun_git-tools\GitApi\DataServices\GitTreeObject.cs,ParseString,The following statement contains a magic number: var guidStart = itemsString.IndexOf(' '' 7);
Magic Number,GitScc.DataServices,GitTreeObject,D:\research\architectureSmells\repos\yysun_git-tools\GitApi\DataServices\GitTreeObject.cs,ParseString,The following statement contains a magic number: var name = itemsString.Substring(guidStart + 42).Trim();
Magic Number,GitScc.DataServices,GitTreeObject,D:\research\architectureSmells\repos\yysun_git-tools\GitApi\DataServices\GitTreeObject.cs,ParseString,The following statement contains a magic number: return new GitTreeObject              {                  Mode = itemsString.Substring(0' 6)'                  Type = itemsString.Substring(7' guidStart - 7).ToLower()'                  Id = itemsString.Substring(guidStart + 1' 40)'                  Name = name'                  FullName = fullName'                  Repository = this.Repository'              };
Magic Number,GitScc.DataServices,GitTreeObject,D:\research\architectureSmells\repos\yysun_git-tools\GitApi\DataServices\GitTreeObject.cs,ParseString,The following statement contains a magic number: return new GitTreeObject              {                  Mode = itemsString.Substring(0' 6)'                  Type = itemsString.Substring(7' guidStart - 7).ToLower()'                  Id = itemsString.Substring(guidStart + 1' 40)'                  Name = name'                  FullName = fullName'                  Repository = this.Repository'              };
Magic Number,GitScc.DataServices,GitTreeObject,D:\research\architectureSmells\repos\yysun_git-tools\GitApi\DataServices\GitTreeObject.cs,ParseString,The following statement contains a magic number: return new GitTreeObject              {                  Mode = itemsString.Substring(0' 6)'                  Type = itemsString.Substring(7' guidStart - 7).ToLower()'                  Id = itemsString.Substring(guidStart + 1' 40)'                  Name = name'                  FullName = fullName'                  Repository = this.Repository'              };
Magic Number,GitScc.DataServices,GitTreeObject,D:\research\architectureSmells\repos\yysun_git-tools\GitApi\DataServices\GitTreeObject.cs,ParseString,The following statement contains a magic number: return new GitTreeObject              {                  Mode = itemsString.Substring(0' 6)'                  Type = itemsString.Substring(7' guidStart - 7).ToLower()'                  Id = itemsString.Substring(guidStart + 1' 40)'                  Name = name'                  FullName = fullName'                  Repository = this.Repository'              };
Magic Number,GitScc.DataServices,RepositoryGraph,D:\research\architectureSmells\repos\yysun_git-tools\GitApi\DataServices\RepositoryGraph.cs,ParseCommit,The following statement contains a magic number: return new Commit              {                  Id = ss[0]'                  ParentIds = ss[1].Split(' ')'                  AuthorDateRelative = ss[2]'                  AuthorName = ss[3]'                  AuthorEmail = ss[4]'                  AuthorDate = DateTime.Parse(ss[5])'                  TreeId = ss[6]'                  Subject = ss[7]'                  Message = ss[7] + (ss.Length <= 8 ? "" : "\n\n" + string.Join("\n"' ss' 8' ss.Length - 8))              };
Magic Number,GitScc.DataServices,RepositoryGraph,D:\research\architectureSmells\repos\yysun_git-tools\GitApi\DataServices\RepositoryGraph.cs,ParseCommit,The following statement contains a magic number: return new Commit              {                  Id = ss[0]'                  ParentIds = ss[1].Split(' ')'                  AuthorDateRelative = ss[2]'                  AuthorName = ss[3]'                  AuthorEmail = ss[4]'                  AuthorDate = DateTime.Parse(ss[5])'                  TreeId = ss[6]'                  Subject = ss[7]'                  Message = ss[7] + (ss.Length <= 8 ? "" : "\n\n" + string.Join("\n"' ss' 8' ss.Length - 8))              };
Magic Number,GitScc.DataServices,RepositoryGraph,D:\research\architectureSmells\repos\yysun_git-tools\GitApi\DataServices\RepositoryGraph.cs,ParseCommit,The following statement contains a magic number: return new Commit              {                  Id = ss[0]'                  ParentIds = ss[1].Split(' ')'                  AuthorDateRelative = ss[2]'                  AuthorName = ss[3]'                  AuthorEmail = ss[4]'                  AuthorDate = DateTime.Parse(ss[5])'                  TreeId = ss[6]'                  Subject = ss[7]'                  Message = ss[7] + (ss.Length <= 8 ? "" : "\n\n" + string.Join("\n"' ss' 8' ss.Length - 8))              };
Magic Number,GitScc.DataServices,RepositoryGraph,D:\research\architectureSmells\repos\yysun_git-tools\GitApi\DataServices\RepositoryGraph.cs,ParseCommit,The following statement contains a magic number: return new Commit              {                  Id = ss[0]'                  ParentIds = ss[1].Split(' ')'                  AuthorDateRelative = ss[2]'                  AuthorName = ss[3]'                  AuthorEmail = ss[4]'                  AuthorDate = DateTime.Parse(ss[5])'                  TreeId = ss[6]'                  Subject = ss[7]'                  Message = ss[7] + (ss.Length <= 8 ? "" : "\n\n" + string.Join("\n"' ss' 8' ss.Length - 8))              };
Magic Number,GitScc.DataServices,RepositoryGraph,D:\research\architectureSmells\repos\yysun_git-tools\GitApi\DataServices\RepositoryGraph.cs,ParseCommit,The following statement contains a magic number: return new Commit              {                  Id = ss[0]'                  ParentIds = ss[1].Split(' ')'                  AuthorDateRelative = ss[2]'                  AuthorName = ss[3]'                  AuthorEmail = ss[4]'                  AuthorDate = DateTime.Parse(ss[5])'                  TreeId = ss[6]'                  Subject = ss[7]'                  Message = ss[7] + (ss.Length <= 8 ? "" : "\n\n" + string.Join("\n"' ss' 8' ss.Length - 8))              };
Magic Number,GitScc.DataServices,RepositoryGraph,D:\research\architectureSmells\repos\yysun_git-tools\GitApi\DataServices\RepositoryGraph.cs,ParseCommit,The following statement contains a magic number: return new Commit              {                  Id = ss[0]'                  ParentIds = ss[1].Split(' ')'                  AuthorDateRelative = ss[2]'                  AuthorName = ss[3]'                  AuthorEmail = ss[4]'                  AuthorDate = DateTime.Parse(ss[5])'                  TreeId = ss[6]'                  Subject = ss[7]'                  Message = ss[7] + (ss.Length <= 8 ? "" : "\n\n" + string.Join("\n"' ss' 8' ss.Length - 8))              };
Magic Number,GitScc.DataServices,RepositoryGraph,D:\research\architectureSmells\repos\yysun_git-tools\GitApi\DataServices\RepositoryGraph.cs,ParseCommit,The following statement contains a magic number: return new Commit              {                  Id = ss[0]'                  ParentIds = ss[1].Split(' ')'                  AuthorDateRelative = ss[2]'                  AuthorName = ss[3]'                  AuthorEmail = ss[4]'                  AuthorDate = DateTime.Parse(ss[5])'                  TreeId = ss[6]'                  Subject = ss[7]'                  Message = ss[7] + (ss.Length <= 8 ? "" : "\n\n" + string.Join("\n"' ss' 8' ss.Length - 8))              };
Magic Number,GitScc.DataServices,RepositoryGraph,D:\research\architectureSmells\repos\yysun_git-tools\GitApi\DataServices\RepositoryGraph.cs,ParseCommit,The following statement contains a magic number: return new Commit              {                  Id = ss[0]'                  ParentIds = ss[1].Split(' ')'                  AuthorDateRelative = ss[2]'                  AuthorName = ss[3]'                  AuthorEmail = ss[4]'                  AuthorDate = DateTime.Parse(ss[5])'                  TreeId = ss[6]'                  Subject = ss[7]'                  Message = ss[7] + (ss.Length <= 8 ? "" : "\n\n" + string.Join("\n"' ss' 8' ss.Length - 8))              };
Magic Number,GitScc.DataServices,RepositoryGraph,D:\research\architectureSmells\repos\yysun_git-tools\GitApi\DataServices\RepositoryGraph.cs,ParseCommit,The following statement contains a magic number: return new Commit              {                  Id = ss[0]'                  ParentIds = ss[1].Split(' ')'                  AuthorDateRelative = ss[2]'                  AuthorName = ss[3]'                  AuthorEmail = ss[4]'                  AuthorDate = DateTime.Parse(ss[5])'                  TreeId = ss[6]'                  Subject = ss[7]'                  Message = ss[7] + (ss.Length <= 8 ? "" : "\n\n" + string.Join("\n"' ss' 8' ss.Length - 8))              };
Magic Number,GitScc.DataServices,RepositoryGraph,D:\research\architectureSmells\repos\yysun_git-tools\GitApi\DataServices\RepositoryGraph.cs,ParseCommit,The following statement contains a magic number: return new Commit              {                  Id = ss[0]'                  ParentIds = ss[1].Split(' ')'                  AuthorDateRelative = ss[2]'                  AuthorName = ss[3]'                  AuthorEmail = ss[4]'                  AuthorDate = DateTime.Parse(ss[5])'                  TreeId = ss[6]'                  Subject = ss[7]'                  Message = ss[7] + (ss.Length <= 8 ? "" : "\n\n" + string.Join("\n"' ss' 8' ss.Length - 8))              };
Magic Number,GitScc.DataServices,RepositoryGraph,D:\research\architectureSmells\repos\yysun_git-tools\GitApi\DataServices\RepositoryGraph.cs,GetChanges,The following statement contains a magic number: switch (change)                          {                              case ChangeType.Renamed:                              case ChangeType.Copied:                                  fileName = files[n + 2];                                  n++; n++;                                  break;                              case ChangeType.Unknown:                                   continue;                              default:                                                                 fileName = files[n + 1];                                  n++;                                  break;                          }
Magic Number,GitScc,DiffTool,D:\research\architectureSmells\repos\yysun_git-tools\GitApi\DiffTool.cs,Parse,The following statement contains a magic number: hunk = new DiffHunk {                          FirstLineIndex = idx + 1'                          Heading = match.Groups[3].Value'                          Lines = new List<string>()'                          OldBlock = ParseRange(match.Groups[1].Value)'                          NewBlock = ParseRange(match.Groups[2].Value)'                      };
Magic Number,GitScc,DiffTool,D:\research\architectureSmells\repos\yysun_git-tools\GitApi\DiffTool.cs,Parse,The following statement contains a magic number: hunk = new DiffHunk {                          FirstLineIndex = idx + 1'                          Heading = match.Groups[3].Value'                          Lines = new List<string>()'                          OldBlock = ParseRange(match.Groups[1].Value)'                          NewBlock = ParseRange(match.Groups[2].Value)'                      };
Magic Number,GitScc,GitRepository,D:\research\architectureSmells\repos\yysun_git-tools\GitApi\GitRepository.cs,IsBinaryFile,The following statement contains a magic number: len = 1000;
Magic Number,GitScc,GitRepository,D:\research\architectureSmells\repos\yysun_git-tools\GitApi\GitRepository.cs,IsBinaryFile,The following statement contains a magic number: len > 1000
Magic Number,GitScc,GitRepository,D:\research\architectureSmells\repos\yysun_git-tools\GitApi\GitRepository.cs,CurrentCommitHasRefs,The following statement contains a magic number: return refs.Count() > 2;
Magic Number,GitScc,GitRepository,D:\research\architectureSmells\repos\yysun_git-tools\GitApi\GitRepository.cs,Apply,The following statement contains a magic number: i < 4
Missing Default,GitScc.DataServices,RepositoryGraph,D:\research\architectureSmells\repos\yysun_git-tools\GitApi\DataServices\RepositoryGraph.cs,ParseStaus,The following switch statement is missing a default case: switch (x)              {                  case 'A':                      return ChangeType.Added;                  case 'C':                      return ChangeType.Copied;                  case 'D':                      return ChangeType.Deleted;                  case 'M':                      return ChangeType.Modified;                  case 'R':                      return ChangeType.Renamed;                  case 'T':                      return ChangeType.TypeChanged;                  case 'U':                      return ChangeType.Unmerged;              }
Missing Default,GitScc,GitRepository,D:\research\architectureSmells\repos\yysun_git-tools\GitApi\GitRepository.cs,ParseGitStatus,The following switch statement is missing a default case: switch (x)                  {                      case '?':                          gitFile.Status = GitFileStatus.New;                          break;                      case '!':                          gitFile.Status = GitFileStatus.Ignored;                          break;                      case ' ':                          if (y == 'M') gitFile.Status = GitFileStatus.Modified;                          else if (y == 'D') gitFile.Status = GitFileStatus.Deleted;                          break;                      case 'M':                          if (y == 'M') gitFile.Status = GitFileStatus.Modified;                          else gitFile.Status = GitFileStatus.Staged;                          break;                      case 'A':                          gitFile.Status = GitFileStatus.Added;                          break;                      case 'D':                          gitFile.Status = GitFileStatus.Removed;                          break;                      case 'R':                          gitFile.Status = GitFileStatus.Renamed;                          break;                      case 'C':                          gitFile.Status = GitFileStatus.Copied;                          break;                        case 'U':                          gitFile.Status = GitFileStatus.Conflict;                          break;                  }
