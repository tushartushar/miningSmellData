Implementation smell,Namespace,Class,File,Method,Description
Complex Method,F1SYS.VsGitToolsPackage,MyControl,C:\repos\yysun_git-tools\VsGitToolsPackage\MyControl.xaml.cs,OnCommit,Cyclomatic complexity of the method is 8
Complex Method,F1SYS.VsGitToolsPackage,VsGitToolsService,C:\repos\yysun_git-tools\VsGitToolsPackage\VsGitToolsService.cs,GetNodeFiles,Cyclomatic complexity of the method is 9
Long Parameter List,GitScc.UI,GitConsole,C:\repos\yysun_git-tools\VsGitToolsPackage\GitConsole.xaml.cs,SetWindowPos,The method has 7 parameters. Parameters: hWnd' hWndInsertAfter' x' Y' cx' cy' wFlags
Long Parameter List,GitScc,SccOnIdleEvent,C:\repos\yysun_git-tools\VsGitToolsPackage\SccOnIdleEvent.cs,OnActivationChange,The method has 6 parameters. Parameters: pic' fSameComponent' pcrinfo' fHostIsActivating' pchostinfo' dwReserved
Long Parameter List,F1SYS.VsGitToolsPackage,MyToolWindow,C:\repos\yysun_git-tools\VsGitToolsPackage\MyToolWindow.cs,OnDockableChange,The method has 5 parameters. Parameters: fDockable' x' y' w' h
Long Parameter List,F1SYS.VsGitToolsPackage,VsGitToolsService,C:\repos\yysun_git-tools\VsGitToolsPackage\VsGitToolsService.cs,UpdateProjectCfg_Begin,The method has 5 parameters. Parameters: pHierProj' pCfgProj' pCfgSln' dwAction' pfCancel
Long Parameter List,F1SYS.VsGitToolsPackage,VsGitToolsService,C:\repos\yysun_git-tools\VsGitToolsPackage\VsGitToolsService.cs,UpdateProjectCfg_Done,The method has 6 parameters. Parameters: pHierProj' pCfgProj' pCfgSln' dwAction' fSuccess' fCancel
Long Identifier,F1SYS.VsGitToolsPackage,GuidList,C:\repos\yysun_git-tools\VsGitToolsPackage\Guids.cs,,The length of the parameter guidVsGitToolsPackagePkgString is 30.
Long Identifier,F1SYS.VsGitToolsPackage,GuidList,C:\repos\yysun_git-tools\VsGitToolsPackage\Guids.cs,,The length of the parameter guidVsGitToolsPackageCmdSetString is 33.
Long Identifier,F1SYS.VsGitToolsPackage,GuidList,C:\repos\yysun_git-tools\VsGitToolsPackage\Guids.cs,,The length of the parameter guidToolWindowPersistanceString is 31.
Long Identifier,F1SYS.VsGitToolsPackage,PkgCmdIDList,C:\repos\yysun_git-tools\VsGitToolsPackage\PkgCmdID.cs,,The length of the parameter icmdPendingChangesCommitToBranch is 32.
Long Identifier,F1SYS.VsGitToolsPackage,PkgCmdIDList,C:\repos\yysun_git-tools\VsGitToolsPackage\PkgCmdID.cs,,The length of the parameter imnuGitChangesToolWindowToolbarMenu is 35.
Long Identifier,F1SYS.VsGitToolsPackage,VsGitToolsService,C:\repos\yysun_git-tools\VsGitToolsPackage\VsGitToolsService.cs,,The length of the parameter _vsIVsUpdateSolutionEventsCookie is 32.
Long Statement,GitScc.UI,GitConsole,C:\repos\yysun_git-tools\VsGitToolsPackage\GitConsole.xaml.cs,ShowWaring,The length of the statement  "                WriteError("Git credential helper is not installed. Please download and installed from https://gitcredentialstore.codeplex.com/"); " is 130.
Long Statement,F1SYS.VsGitToolsPackage,MyControl,C:\repos\yysun_git-tools\VsGitToolsPackage\MyControl.xaml.cs,listView1_ContextMenuOpening,The length of the statement  "                menuDeleteFile.Visibility = (selectedItem.Status == GitFileStatus.New || selectedItem.Status == GitFileStatus.Modified) ? " is 121.
Long Statement,F1SYS.VsGitToolsPackage,MyControl,C:\repos\yysun_git-tools\VsGitToolsPackage\MyControl.xaml.cs,menuUndo_Click,The length of the statement  "            string title = (filesToUndo.Count() == 1) ? "Undo File Changes" : "Undo Files Changes for " + filesToUndo.Count() + " Files?"; " is 126.
Long Statement,F1SYS.VsGitToolsPackage,MyControl,C:\repos\yysun_git-tools\VsGitToolsPackage\MyControl.xaml.cs,OnCommit,The length of the statement  "                    const string amendMsg = @"You are about to amend a commit that has tags or remotes' which could cause issues in local and remote repositories. " is 142.
Long Statement,F1SYS.VsGitToolsPackage,MyToolWindow,C:\repos\yysun_git-tools\VsGitToolsPackage\MyToolWindow.cs,SetDisplayedFile,The length of the statement  "                //Get an invisible editor over the file' this makes it much easier than having to manually figure out the right content type'  " is 125.
Long Statement,F1SYS.VsGitToolsPackage,MyToolWindow,C:\repos\yysun_git-tools\VsGitToolsPackage\MyToolWindow.cs,SetDisplayedFile,The length of the statement  "                //language service' and it will automatically associate the document with its owning project' meaning we will get intellisense " is 126.
Long Statement,F1SYS.VsGitToolsPackage,MyToolWindow,C:\repos\yysun_git-tools\VsGitToolsPackage\MyToolWindow.cs,SetDisplayedFile,The length of the statement  "                IVsInvisibleEditorManager invisibleEditorManager = (IVsInvisibleEditorManager)GetService(typeof(SVsInvisibleEditorManager)); " is 124.
Long Statement,F1SYS.VsGitToolsPackage,MyToolWindow,C:\repos\yysun_git-tools\VsGitToolsPackage\MyToolWindow.cs,SetDisplayedFile,The length of the statement  "                //The doc data is the IVsTextLines that represents the in-memory version of the file we opened in our invisibe editor' we need " is 126.
Long Statement,F1SYS.VsGitToolsPackage,MyToolWindow,C:\repos\yysun_git-tools\VsGitToolsPackage\MyToolWindow.cs,SetDisplayedFile,The length of the statement  "                ErrorHandler.ThrowOnFailure(this.invisibleEditor.GetDocData(fEnsureWritable: 1' riid: ref guidIVSTextLines' ppDocData: out docDataPointer)); " is 140.
Long Statement,F1SYS.VsGitToolsPackage,MyToolWindow,C:\repos\yysun_git-tools\VsGitToolsPackage\MyToolWindow.cs,SetDisplayedFile,The length of the statement  "                    IVsEditorAdaptersFactoryService editorAdapterFactoryService = componentModel.GetService<IVsEditorAdaptersFactoryService>(); " is 123.
Long Statement,F1SYS.VsGitToolsPackage,VsGitToolsPackagePackage,C:\repos\yysun_git-tools\VsGitToolsPackage\VsGitToolsPackagePackage.cs,Initialize,The length of the statement  "                CommandID toolwndCommandID = new CommandID(GuidList.guidVsGitToolsPackageCmdSet' (int)PkgCmdIDList.cmdidGitToolsWindow); " is 120.
Long Statement,F1SYS.VsGitToolsPackage,VsGitToolsService,C:\repos\yysun_git-tools\VsGitToolsPackage\VsGitToolsService.cs,GetLoadedControllableProjects,The length of the statement  "            ErrorHandler.ThrowOnFailure(sol.GetProjectEnum((uint)__VSENUMPROJFLAGS.EPF_LOADEDINSOLUTION' ref rguidEnumOnlyThisType' out ppenum)); " is 133.
Long Statement,F1SYS.VsGitToolsPackage,VsGitToolsService,C:\repos\yysun_git-tools\VsGitToolsPackage\VsGitToolsService.cs,GetSelectedNodes,The length of the statement  "            Debug.Assert(monitorSelection != null' "Could not get the IVsMonitorSelection object from the services exposed by this project"); " is 129.
Long Statement,F1SYS.VsGitToolsPackage,VsGitToolsService,C:\repos\yysun_git-tools\VsGitToolsPackage\VsGitToolsService.cs,GetSelectedNodes,The length of the statement  "                ErrorHandler.ThrowOnFailure(monitorSelection.GetCurrentSelection(out hierarchyPtr' out itemid' out multiItemSelect' out selectionContainer)); " is 141.
Complex Conditional,F1SYS.VsGitToolsPackage,MyControl,C:\repos\yysun_git-tools\VsGitToolsPackage\MyControl.xaml.cs,UpdateColumnHeaderTemplate,The conditional expression  "_currentSortedColumn != null && _currentSortedColumn != header &&                  _currentSortedColumn.Column != null && _currentSortedColumn.Column != checkStateColumn"  is complex.
Complex Conditional,F1SYS.VsGitToolsPackage,ExtHelper,C:\repos\yysun_git-tools\VsGitToolsPackage\MyControl.xaml.cs,FindVisualChild,The conditional expression  "child != null && child is TChild && (name == null || ((Control)child).Name == name)"  is complex.
Complex Conditional,F1SYS.VsGitToolsPackage,VsGitToolsPackagePackage,C:\repos\yysun_git-tools\VsGitToolsPackage\VsGitToolsPackagePackage.cs,QueryStatus,The conditional expression  "prgCmds[0].cmdID >= PkgCmdIDList.icmdGitExtCommand1 &&                          prgCmds[0].cmdID < PkgCmdIDList.icmdGitExtCommand1 + GitToolCommands.GitExtCommands.Count &&                          !string.IsNullOrEmpty(gitExtPath) && File.Exists(gitExtPath)"  is complex.
Complex Conditional,F1SYS.VsGitToolsPackage,VsGitToolsPackagePackage,C:\repos\yysun_git-tools\VsGitToolsPackage\VsGitToolsPackagePackage.cs,QueryStatus,The conditional expression  "prgCmds[0].cmdID >= PkgCmdIDList.icmdGitTorCommand1 &&                          prgCmds[0].cmdID < PkgCmdIDList.icmdGitTorCommand1 + GitToolCommands.GitTorCommands.Count &&                          !string.IsNullOrEmpty(torGitPath) && File.Exists(torGitPath)"  is complex.
Complex Conditional,F1SYS.VsGitToolsPackage,VsGitToolsService,C:\repos\yysun_git-tools\VsGitToolsPackage\VsGitToolsService.cs,fileSystemWatcher_Changed,The conditional expression  "!NoRefresh && this.Repository !=null &&                  !(name.EndsWith(".git") && e.ChangeType == WatcherChangeTypes.Changed)                  && !name.EndsWith("index.lock") && !this.Repository.IsIgnored(name)"  is complex.
Empty Catch Block,F1SYS.VsGitToolsPackage,MyToolWindow,C:\repos\yysun_git-tools\VsGitToolsPackage\MyToolWindow.cs,SetDisplayedFile,The method has an empty catch block.
Empty Catch Block,F1SYS.VsGitToolsPackage,VsGitToolsPackagePackage,C:\repos\yysun_git-tools\VsGitToolsPackage\VsGitToolsPackagePackage.cs,ShowHistoryWindow,The method has an empty catch block.
Magic Number,DiffClassifier,DiffAddedFormat,C:\repos\yysun_git-tools\VsGitToolsPackage\DiffClassifier\DiffClassificationDefinitions.cs,DiffAddedFormat,The following statement contains a magic number: this.BackgroundBrush = new SolidColorBrush(Color.FromArgb(128' 166' 255' 166));
Magic Number,DiffClassifier,DiffAddedFormat,C:\repos\yysun_git-tools\VsGitToolsPackage\DiffClassifier\DiffClassificationDefinitions.cs,DiffAddedFormat,The following statement contains a magic number: this.BackgroundBrush = new SolidColorBrush(Color.FromArgb(128' 166' 255' 166));
Magic Number,DiffClassifier,DiffAddedFormat,C:\repos\yysun_git-tools\VsGitToolsPackage\DiffClassifier\DiffClassificationDefinitions.cs,DiffAddedFormat,The following statement contains a magic number: this.BackgroundBrush = new SolidColorBrush(Color.FromArgb(128' 166' 255' 166));
Magic Number,DiffClassifier,DiffAddedFormat,C:\repos\yysun_git-tools\VsGitToolsPackage\DiffClassifier\DiffClassificationDefinitions.cs,DiffAddedFormat,The following statement contains a magic number: this.BackgroundBrush = new SolidColorBrush(Color.FromArgb(128' 166' 255' 166));
Magic Number,DiffClassifier,DiffRemovedFormat,C:\repos\yysun_git-tools\VsGitToolsPackage\DiffClassifier\DiffClassificationDefinitions.cs,DiffRemovedFormat,The following statement contains a magic number: this.BackgroundBrush = new SolidColorBrush(Color.FromArgb(128' 255' 166' 166));
Magic Number,DiffClassifier,DiffRemovedFormat,C:\repos\yysun_git-tools\VsGitToolsPackage\DiffClassifier\DiffClassificationDefinitions.cs,DiffRemovedFormat,The following statement contains a magic number: this.BackgroundBrush = new SolidColorBrush(Color.FromArgb(128' 255' 166' 166));
Magic Number,DiffClassifier,DiffRemovedFormat,C:\repos\yysun_git-tools\VsGitToolsPackage\DiffClassifier\DiffClassificationDefinitions.cs,DiffRemovedFormat,The following statement contains a magic number: this.BackgroundBrush = new SolidColorBrush(Color.FromArgb(128' 255' 166' 166));
Magic Number,DiffClassifier,DiffRemovedFormat,C:\repos\yysun_git-tools\VsGitToolsPackage\DiffClassifier\DiffClassificationDefinitions.cs,DiffRemovedFormat,The following statement contains a magic number: this.BackgroundBrush = new SolidColorBrush(Color.FromArgb(128' 255' 166' 166));
Magic Number,DiffClassifier,DiffClassifier,C:\repos\yysun_git-tools\VsGitToolsPackage\DiffClassifier\DiffClassifier.cs,GetClassificationSpans,The following statement contains a magic number: for (int i = startno; i <= endno; i++)              {                  ITextSnapshotLine line = snapshot.GetLineFromLineNumber(i);                    IClassificationType type = null;                  string text = line.Snapshot.GetText(                          new SnapshotSpan(line.Start' Math.Min(4' line.Length))); // We only need the first 4                     if (text.StartsWith("!"' StringComparison.Ordinal))                      type = _classificationTypeRegistry.GetClassificationType("diff.changed");                    else if (text.StartsWith("---"' StringComparison.Ordinal))                      type = _classificationTypeRegistry.GetClassificationType("diff.header");                  else if (text.StartsWith("-"' StringComparison.Ordinal))                      type = _classificationTypeRegistry.GetClassificationType("diff.removed");                  else if (text.StartsWith("<"' StringComparison.Ordinal))                      type = _classificationTypeRegistry.GetClassificationType("diff.removed");                    else if (text.StartsWith("@@"' StringComparison.Ordinal))                      type = _classificationTypeRegistry.GetClassificationType("diff.patchline");                    else if (text.StartsWith("+++"' StringComparison.Ordinal))                      type = _classificationTypeRegistry.GetClassificationType("diff.header");                  else if (text.StartsWith("+"' StringComparison.Ordinal))                      type = _classificationTypeRegistry.GetClassificationType("diff.added");                  else if (text.StartsWith(">"' StringComparison.Ordinal))                      type = _classificationTypeRegistry.GetClassificationType("diff.added");                    else if (text.StartsWith("***"' StringComparison.Ordinal))                  {                      if (i < 2)                          type = _classificationTypeRegistry.GetClassificationType("diff.header");                      else                          type = _classificationTypeRegistry.GetClassificationType("diff.infoline");                  }                  else if (text.Length > 0 && !char.IsWhiteSpace(text[0]))                      type = _classificationTypeRegistry.GetClassificationType("diff.infoline");                    if (type != null)                      spans.Add(new ClassificationSpan(line.Extent' type));              }
Magic Number,DiffClassifier,DiffClassifier,C:\repos\yysun_git-tools\VsGitToolsPackage\DiffClassifier\DiffClassifier.cs,GetClassificationSpans,The following statement contains a magic number: for (int i = startno; i <= endno; i++)              {                  ITextSnapshotLine line = snapshot.GetLineFromLineNumber(i);                    IClassificationType type = null;                  string text = line.Snapshot.GetText(                          new SnapshotSpan(line.Start' Math.Min(4' line.Length))); // We only need the first 4                     if (text.StartsWith("!"' StringComparison.Ordinal))                      type = _classificationTypeRegistry.GetClassificationType("diff.changed");                    else if (text.StartsWith("---"' StringComparison.Ordinal))                      type = _classificationTypeRegistry.GetClassificationType("diff.header");                  else if (text.StartsWith("-"' StringComparison.Ordinal))                      type = _classificationTypeRegistry.GetClassificationType("diff.removed");                  else if (text.StartsWith("<"' StringComparison.Ordinal))                      type = _classificationTypeRegistry.GetClassificationType("diff.removed");                    else if (text.StartsWith("@@"' StringComparison.Ordinal))                      type = _classificationTypeRegistry.GetClassificationType("diff.patchline");                    else if (text.StartsWith("+++"' StringComparison.Ordinal))                      type = _classificationTypeRegistry.GetClassificationType("diff.header");                  else if (text.StartsWith("+"' StringComparison.Ordinal))                      type = _classificationTypeRegistry.GetClassificationType("diff.added");                  else if (text.StartsWith(">"' StringComparison.Ordinal))                      type = _classificationTypeRegistry.GetClassificationType("diff.added");                    else if (text.StartsWith("***"' StringComparison.Ordinal))                  {                      if (i < 2)                          type = _classificationTypeRegistry.GetClassificationType("diff.header");                      else                          type = _classificationTypeRegistry.GetClassificationType("diff.infoline");                  }                  else if (text.Length > 0 && !char.IsWhiteSpace(text[0]))                      type = _classificationTypeRegistry.GetClassificationType("diff.infoline");                    if (type != null)                      spans.Add(new ClassificationSpan(line.Extent' type));              }
Magic Number,GitScc.UI,GitConsole,C:\repos\yysun_git-tools\VsGitToolsPackage\GitConsole.xaml.cs,errorWorker_DoWork,The following statement contains a magic number: var buffer = new char[1024];
Magic Number,GitScc.UI,GitConsole,C:\repos\yysun_git-tools\VsGitToolsPackage\GitConsole.xaml.cs,errorWorker_DoWork,The following statement contains a magic number: while (errorWorker.CancellationPending == false && errorReader != null)              {                  var count = errorReader.Read(buffer' 0' 1024);                  if (count > 0)                  {                      sb.Append(buffer' 0' count);                      if (buffer[count - 1] == '\n')                      {                          this.WriteError(sb.ToString().TrimEnd());                          sb.Clear();                      }                  }                  else break;              }
Magic Number,GitScc.UI,GitConsole,C:\repos\yysun_git-tools\VsGitToolsPackage\GitConsole.xaml.cs,outputWorker_DoWork,The following statement contains a magic number: var buffer = new char[1024];
Magic Number,GitScc.UI,GitConsole,C:\repos\yysun_git-tools\VsGitToolsPackage\GitConsole.xaml.cs,outputWorker_DoWork,The following statement contains a magic number: while (outputWorker.CancellationPending == false && outputReader != null)              {                  var count = outputReader.Read(buffer' 0' 1024);                  if (count > 0)                  {                      sb.Append(buffer' 0' count);                      this.WriteOutput(sb.ToString().TrimEnd());                      sb.Clear();                  }                  else break;              }
Magic Number,GitScc.UI,GitConsole,C:\repos\yysun_git-tools\VsGitToolsPackage\GitConsole.xaml.cs,WritePromptText,The following statement contains a magic number: para.Margin = new Thickness(0' 10' 0' 0);
Magic Number,GitScc.UI,GitConsole,C:\repos\yysun_git-tools\VsGitToolsPackage\GitConsole.xaml.cs,WritePromptText,The following statement contains a magic number: para.LineHeight = 10;
Magic Number,GitScc.UI,GitConsole,C:\repos\yysun_git-tools\VsGitToolsPackage\GitConsole.xaml.cs,WriteText,The following statement contains a magic number: para.Margin = new Thickness(0' 2' 0' 0);
Magic Number,GitScc.UI,GitConsole,C:\repos\yysun_git-tools\VsGitToolsPackage\GitConsole.xaml.cs,WriteText,The following statement contains a magic number: para.LineHeight = 10;
Magic Number,GitScc.UI,GitConsole,C:\repos\yysun_git-tools\VsGitToolsPackage\GitConsole.xaml.cs,ShowOptions,The following statement contains a magic number: if (options != null && options.Any())              {                  Rect rect = this.richTextBox1.CaretPosition.GetCharacterRect(LogicalDirection.Forward);                  double d = this.ActualHeight - (rect.Y + lstOptions.Height + 12);                  double left = rect.X + 6;                  double top = d > 0 ? rect.Y + 12 : rect.Y - lstOptions.Height;                  left += this.Padding.Left;                  top += this.Padding.Top;                  lstOptions.SetCurrentValue(ListBox.MarginProperty' new Thickness(left' top' 0' 0));                  lstOptions.ItemsSource = options;                  ShowOptions();              }
Magic Number,GitScc.UI,GitConsole,C:\repos\yysun_git-tools\VsGitToolsPackage\GitConsole.xaml.cs,ShowOptions,The following statement contains a magic number: if (options != null && options.Any())              {                  Rect rect = this.richTextBox1.CaretPosition.GetCharacterRect(LogicalDirection.Forward);                  double d = this.ActualHeight - (rect.Y + lstOptions.Height + 12);                  double left = rect.X + 6;                  double top = d > 0 ? rect.Y + 12 : rect.Y - lstOptions.Height;                  left += this.Padding.Left;                  top += this.Padding.Top;                  lstOptions.SetCurrentValue(ListBox.MarginProperty' new Thickness(left' top' 0' 0));                  lstOptions.ItemsSource = options;                  ShowOptions();              }
Magic Number,GitScc.UI,GitConsole,C:\repos\yysun_git-tools\VsGitToolsPackage\GitConsole.xaml.cs,ShowOptions,The following statement contains a magic number: if (options != null && options.Any())              {                  Rect rect = this.richTextBox1.CaretPosition.GetCharacterRect(LogicalDirection.Forward);                  double d = this.ActualHeight - (rect.Y + lstOptions.Height + 12);                  double left = rect.X + 6;                  double top = d > 0 ? rect.Y + 12 : rect.Y - lstOptions.Height;                  left += this.Padding.Left;                  top += this.Padding.Top;                  lstOptions.SetCurrentValue(ListBox.MarginProperty' new Thickness(left' top' 0' 0));                  lstOptions.ItemsSource = options;                  ShowOptions();              }
Magic Number,GitScc.UI,GitConsole,C:\repos\yysun_git-tools\VsGitToolsPackage\GitConsole.xaml.cs,FilterOptions,The following statement contains a magic number: if (command != null && command.IndexOf(' ') > 0)              {                  var idx = command.LastIndexOf(' ');                  var options = GetOptions(command.Substring(0' idx));                  if (options != null && options.Any())                  {                      Rect rect = this.richTextBox1.CaretPosition.GetCharacterRect(LogicalDirection.Forward);                      double d = this.ActualHeight - (rect.Y + lstOptions.Height + 12);                      double left = rect.X + 6;                      double top = d > 0 ? rect.Y + 12 : rect.Y - lstOptions.Height;                      left += this.Padding.Left;                      top += this.Padding.Top;                      lstOptions.SetCurrentValue(ListBox.MarginProperty' new Thickness(left' top' 0' 0));                      lstOptions.ItemsSource = options;                        var subcommand = command.Substring(idx + 1);                      var opts = options.Where(item => item.StartsWith(subcommand));                      lstOptions.ItemsSource = opts;                      lstOptions.Visibility = (opts.Count() > 0 && opts.First() != subcommand) ?                          Visibility.Visible : Visibility.Collapsed;                        if (opts.Count() == 1) lstOptions.SelectedIndex = 0;                  }                  else                  {                      HideOptions();                  }              }              else              {                  HideOptions();              }
Magic Number,GitScc.UI,GitConsole,C:\repos\yysun_git-tools\VsGitToolsPackage\GitConsole.xaml.cs,FilterOptions,The following statement contains a magic number: if (command != null && command.IndexOf(' ') > 0)              {                  var idx = command.LastIndexOf(' ');                  var options = GetOptions(command.Substring(0' idx));                  if (options != null && options.Any())                  {                      Rect rect = this.richTextBox1.CaretPosition.GetCharacterRect(LogicalDirection.Forward);                      double d = this.ActualHeight - (rect.Y + lstOptions.Height + 12);                      double left = rect.X + 6;                      double top = d > 0 ? rect.Y + 12 : rect.Y - lstOptions.Height;                      left += this.Padding.Left;                      top += this.Padding.Top;                      lstOptions.SetCurrentValue(ListBox.MarginProperty' new Thickness(left' top' 0' 0));                      lstOptions.ItemsSource = options;                        var subcommand = command.Substring(idx + 1);                      var opts = options.Where(item => item.StartsWith(subcommand));                      lstOptions.ItemsSource = opts;                      lstOptions.Visibility = (opts.Count() > 0 && opts.First() != subcommand) ?                          Visibility.Visible : Visibility.Collapsed;                        if (opts.Count() == 1) lstOptions.SelectedIndex = 0;                  }                  else                  {                      HideOptions();                  }              }              else              {                  HideOptions();              }
Magic Number,GitScc.UI,GitConsole,C:\repos\yysun_git-tools\VsGitToolsPackage\GitConsole.xaml.cs,FilterOptions,The following statement contains a magic number: if (command != null && command.IndexOf(' ') > 0)              {                  var idx = command.LastIndexOf(' ');                  var options = GetOptions(command.Substring(0' idx));                  if (options != null && options.Any())                  {                      Rect rect = this.richTextBox1.CaretPosition.GetCharacterRect(LogicalDirection.Forward);                      double d = this.ActualHeight - (rect.Y + lstOptions.Height + 12);                      double left = rect.X + 6;                      double top = d > 0 ? rect.Y + 12 : rect.Y - lstOptions.Height;                      left += this.Padding.Left;                      top += this.Padding.Top;                      lstOptions.SetCurrentValue(ListBox.MarginProperty' new Thickness(left' top' 0' 0));                      lstOptions.ItemsSource = options;                        var subcommand = command.Substring(idx + 1);                      var opts = options.Where(item => item.StartsWith(subcommand));                      lstOptions.ItemsSource = opts;                      lstOptions.Visibility = (opts.Count() > 0 && opts.First() != subcommand) ?                          Visibility.Visible : Visibility.Collapsed;                        if (opts.Count() == 1) lstOptions.SelectedIndex = 0;                  }                  else                  {                      HideOptions();                  }              }              else              {                  HideOptions();              }
Magic Number,GitScc.UI,GitConsole,C:\repos\yysun_git-tools\VsGitToolsPackage\GitConsole.xaml.cs,SendCtrlC,The following statement contains a magic number: const uint keyeventfKeyup = 2;
Magic Number,GitScc,SccOnIdleEvent,C:\repos\yysun_git-tools\VsGitToolsPackage\SccOnIdleEvent.cs,RegisterForIdleTimeCallbacks,The following statement contains a magic number: if (_cmService != null)              {                  OLECRINFO[] pcrinfo = new OLECRINFO[1];                  pcrinfo[0].cbSize = (uint)Marshal.SizeOf(typeof(OLECRINFO));                  pcrinfo[0].grfcrf = (uint)_OLECRF.olecrfNeedIdleTime |                                                (uint)_OLECRF.olecrfNeedPeriodicIdleTime;                  pcrinfo[0].grfcadvf = (uint)_OLECADVF.olecadvfModal |                                                (uint)_OLECADVF.olecadvfRedrawOff |                                                (uint)_OLECADVF.olecadvfWarningsOff;                  pcrinfo[0].uIdleTimeInterval = 100;                    _cmService.FRegisterComponent(this' pcrinfo' out _wComponentID);              }
Magic Number,F1SYS.VsGitToolsPackage,MyControl,C:\repos\yysun_git-tools\VsGitToolsPackage\MyControl.xaml.cs,GetEditorSelectionPosition,The following statement contains a magic number: return new int[2] { sl +1' el + 1 };
Magic Number,F1SYS.VsGitToolsPackage,MyControl,C:\repos\yysun_git-tools\VsGitToolsPackage\MyControl.xaml.cs,DiffEditor_MouseDoubleClick,The following statement contains a magic number: try              {                  if (this.textView != null && diffLines != null && diffLines.Length > 0)                  {                      int line;                      textView.GetCaretPos(out line' out column);                        string text = diffLines[line];                      while (line >= 0)                      {                          var match = Regex.Match(text' "^@@(.+)@@");                          if (match.Success)                          {                              var s = match.Groups[1].Value;                              s = s.Substring(s.IndexOf('+') + 1);                              s = s.Substring(0' s.IndexOf('''));                              start += Convert.ToInt32(s) - 2;                              diff = true;                              break;                          }                          else if (text.StartsWith("-"))                          {                              start--;                          }                            start++;                          --line;                          text = line >= 0 ? diffLines[line] : "";                      }                  }                  if (!diff) start--;              }              catch (Exception ex)              {                  ShowStatusMessage(ex.Message);              }
Magic Number,F1SYS.VsGitToolsPackage,MyToolWindow,C:\repos\yysun_git-tools\VsGitToolsPackage\MyToolWindow.cs,MyToolWindow,The following statement contains a magic number: this.BitmapResourceID = 301;
Magic Number,F1SYS.VsGitToolsPackage,VsGitToolsPackagePackage,C:\repos\yysun_git-tools\VsGitToolsPackage\VsGitToolsPackagePackage.cs,SetOleCmdText,The following statement contains a magic number: Marshal.WriteInt16((IntPtr)((long)pText + (long)maxChars * 2)' (Int16)0);
Magic Number,F1SYS.VsGitToolsPackage,VsGitToolsService,C:\repos\yysun_git-tools\VsGitToolsPackage\VsGitToolsService.cs,VsGitToolsService,The following statement contains a magic number: timer.Interval = TimeSpan.FromMilliseconds(588);
Missing Default,F1SYS.VsGitToolsPackage,MyControl,C:\repos\yysun_git-tools\VsGitToolsPackage\MyControl.xaml.cs,listView1_ContextMenuOpening,The following switch statement is missing a default case: switch (selectedItem.Status)                  {                      case GitFileStatus.Added:                      case GitFileStatus.New:                          menuCompare.IsEnabled = menuUndo.IsEnabled = false;                          break;                        case GitFileStatus.Modified:                      case GitFileStatus.Staged:                          menuCompare.IsEnabled = menuUndo.IsEnabled = true;                          break;                        case GitFileStatus.Removed:                      case GitFileStatus.Deleted:                          menuCompare.IsEnabled = false;                          menuUndo.IsEnabled = true;                          break;                  }
