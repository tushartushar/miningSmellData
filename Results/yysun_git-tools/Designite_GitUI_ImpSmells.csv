Implementation smell,Namespace,Class,File,Method,Description
Long Method,GitUI.UI,MainToolBar,C:\repos\yysun_git-tools\GitUI\UI\MainToolBar.xaml.cs,Connect,The method has 122 lines of code.
Long Method,GitScc.UI,CommitBox,C:\repos\yysun_git-tools\GitUI\UI\CommitBox.xaml.cs,Connect,The method has 119 lines of code.
Long Method,GitScc.UI,HistoryGraph,C:\repos\yysun_git-tools\GitUI\UI\HistoryGraph.xaml.cs,Show,The method has 188 lines of code.
Complex Method,Mono.Options,Option,C:\repos\yysun_git-tools\GitUI\Options.cs,ParsePrototype,Cyclomatic complexity of the method is 9
Complex Method,Mono.Options,OptionSet,C:\repos\yysun_git-tools\GitUI\Options.cs,WriteOptionPrototype,Cyclomatic complexity of the method is 8
Complex Method,GitUI.UI,PendingChanges,C:\repos\yysun_git-tools\GitUI\UI\PendingChanges.xaml.cs,OnCommit,Cyclomatic complexity of the method is 9
Complex Method,GitScc.UI,CommitBox,C:\repos\yysun_git-tools\GitUI\UI\CommitBox.xaml.cs,NewBranch_Click,Cyclomatic complexity of the method is 8
Long Parameter List,Mono.Options,OptionSet,C:\repos\yysun_git-tools\GitUI\Options.cs,GetOptionParts,The method has 5 parameters. Parameters: argument' flag' name' sep' value
Long Parameter List,GitUI.UI,GitConsole,C:\repos\yysun_git-tools\GitUI\UI\GitConsole.xaml.cs,SetWindowPos,The method has 7 parameters. Parameters: hWnd' hWndInsertAfter' x' Y' cx' cy' wFlags
Long Parameter List,ZoomAndPan,AnimationHelper,C:\repos\yysun_git-tools\GitUI\ZoomAndPan\AnimationHelper.cs,StartAnimation,The method has 5 parameters. Parameters: animatableElement' dependencyProperty' toValue' animationDurationSeconds' completedEvent
Long Identifier,GitScc.UI,HistoryGraph,C:\repos\yysun_git-tools\GitUI\UI\HistoryGraph.xaml.cs,,The length of the parameter origZoomAndPanControlMouseDownPoint is 35.
Long Identifier,ZoomAndPan,ZoomAndPanControl,C:\repos\yysun_git-tools\GitUI\ZoomAndPan\ZoomAndPanControl.cs,,The length of the parameter enableContentOffsetUpdateFromScale is 34.
Long Identifier,ZoomAndPan,ZoomAndPanControl,C:\repos\yysun_git-tools\GitUI\ZoomAndPan\ZoomAndPanControl.cs,,The length of the parameter constrainedContentViewportWidth is 31.
Long Identifier,ZoomAndPan,ZoomAndPanControl,C:\repos\yysun_git-tools\GitUI\ZoomAndPan\ZoomAndPanControl.cs,,The length of the parameter constrainedContentViewportHeight is 32.
Long Identifier,ZoomAndPan,ZoomAndPanControl,C:\repos\yysun_git-tools\GitUI\ZoomAndPan\ZoomAndPanControl.cs,,The length of the parameter IsMouseWheelScrollingEnabledProperty is 36.
Long Statement,GitUI.UI,GitConsole,C:\repos\yysun_git-tools\GitUI\UI\GitConsole.xaml.cs,ShowWaring,The length of the statement  "                WriteError("Git credential helper is not installed. Please download and installed from https://gitcredentialstore.codeplex.com/"); " is 130.
Long Statement,GitUI.UI,MainToolBar,C:\repos\yysun_git-tools\GitUI\UI\MainToolBar.xaml.cs,Connect,The length of the statement  "            ((System.Windows.Controls.Grid)(target)).PreviewKeyDown += new System.Windows.Input.KeyEventHandler(this.Grid_PreviewKeyDown); " is 126.
Long Statement,GitUI.UI,MainToolBar,C:\repos\yysun_git-tools\GitUI\UI\MainToolBar.xaml.cs,Connect,The length of the statement  "            this.branchList.MouseLeftButtonUp += new System.Windows.Input.MouseButtonEventHandler(this.branchList_MouseLeftButtonUp); " is 121.
Long Statement,GitUI.UI,PendingChanges,C:\repos\yysun_git-tools\GitUI\UI\PendingChanges.xaml.cs,dataGrid1_ContextMenuOpening,The length of the statement  "                menuDeleteFile.Visibility = (selectedItem.Status == GitFileStatus.New || selectedItem.Status == GitFileStatus.Modified) ? " is 121.
Long Statement,GitUI.UI,PendingChanges,C:\repos\yysun_git-tools\GitUI\UI\PendingChanges.xaml.cs,menuUndo_Click,The length of the statement  "            string title = (filesToUndo.Count() == 1) ? "Undo File Changes" : "Undo Files Changes for " + filesToUndo.Count() + " Files?"; " is 126.
Long Statement,GitUI.UI,PendingChanges,C:\repos\yysun_git-tools\GitUI\UI\PendingChanges.xaml.cs,OnCommit,The length of the statement  "                    const string amendMsg = @"You are about to amend a commit that has tags or remotes' which could cause issues in local and remote repositories. " is 142.
Long Statement,GitUI.UI,PendingChanges,C:\repos\yysun_git-tools\GitUI\UI\PendingChanges.xaml.cs,GetEditorSelectionPosition,The length of the statement  "                this.DiffEditor.Document.GetLineByOffset(this.DiffEditor.SelectionStart + this.DiffEditor.SelectionLength).LineNumber }; " is 120.
Long Statement,GitScc.UI,HistoryGraph,C:\repos\yysun_git-tools\GitUI\UI\HistoryGraph.xaml.cs,Connect,The length of the statement  "            ((GitScc.UI.HistoryGraph)(target)).SizeChanged += new System.Windows.SizeChangedEventHandler(this.UserControl_SizeChanged); " is 123.
Long Statement,GitScc.UI,HistoryGraph,C:\repos\yysun_git-tools\GitUI\UI\HistoryGraph.xaml.cs,Connect,The length of the statement  "            ((GitScc.UI.HistoryGraph)(target)).ContextMenuOpening += new System.Windows.Controls.ContextMenuEventHandler(this.UserControl_ContextMenuOpening); " is 146.
Long Statement,ZoomAndPan,ZoomAndPanControl,C:\repos\yysun_git-tools\GitUI\ZoomAndPan\ZoomAndPanControl.cs,AnimatedZoomTo,The length of the statement  "            AnimatedZoomPointToViewportCenter(newScale' new Point(contentRect.X + (contentRect.Width / 2)' contentRect.Y + (contentRect.Height / 2))' " is 137.
Long Statement,ZoomAndPan,ZoomAndPanControl,C:\repos\yysun_git-tools\GitUI\ZoomAndPan\ZoomAndPanControl.cs,AnimatedZoomTo,The length of the statement  "            AnimatedZoomPointToViewportCenter(newScale' new Point(contentRect.X + (contentRect.Width / 2)' contentRect.Y + (contentRect.Height / 2))' null); " is 144.
Long Statement,ZoomAndPan,ZoomAndPanControl,C:\repos\yysun_git-tools\GitUI\ZoomAndPan\ZoomAndPanControl.cs,ZoomTo,The length of the statement  "            ZoomPointToViewportCenter(newScale' new Point(contentRect.X + (contentRect.Width / 2)' contentRect.Y + (contentRect.Height / 2))); " is 130.
Long Statement,ZoomAndPan,ZoomAndPanControl,C:\repos\yysun_git-tools\GitUI\ZoomAndPan\ZoomAndPanControl.cs,AnimatedZoomTo,The length of the statement  "            Point zoomCenter = new Point(ContentOffsetX + (ContentViewportWidth / 2)' ContentOffsetY + (ContentViewportHeight / 2)); " is 120.
Long Statement,ZoomAndPan,ZoomAndPanControl,C:\repos\yysun_git-tools\GitUI\ZoomAndPan\ZoomAndPanControl.cs,ZoomTo,The length of the statement  "            Point zoomCenter = new Point(ContentOffsetX + (ContentViewportWidth / 2)' ContentOffsetY + (ContentViewportHeight / 2)); " is 120.
Long Statement,XamlGeneratedNamespace,GeneratedInternalTypeHelper,C:\repos\yysun_git-tools\GitUI\obj\Debug\GeneratedInternalTypeHelper.g.cs,CreateInstance,The length of the statement  "            return System.Activator.CreateInstance(type' ((System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic)  " is 128.
Complex Conditional,GitUI,GitViewModel,C:\repos\yysun_git-tools\GitUI\GitViewModel.cs,fileSystemWatcher_Changed,The conditional expression  "!noRefresh && this.tracker != null                   && !(name.EndsWith(".git") && e.ChangeType == WatcherChangeTypes.Changed)                  && !name.EndsWith("index.lock") && !this.tracker.IsIgnored(name)"  is complex.
Complex Conditional,Mono.Options,Option,C:\repos\yysun_git-tools\GitUI\Options.cs,Option,The conditional expression  "Array.IndexOf (names' "<>") >= 0 &&   					((names.Length == 1 && this.type != OptionValueType.None) ||  					 (names.Length > 1 && this.MaxValueCount > 1))"  is complex.
Complex Conditional,Mono.Options,OptionSet,C:\repos\yysun_git-tools\GitUI\Options.cs,ParseBool,The conditional expression  "n.Length >= 1 && (n [n.Length-1] == '+' || n [n.Length-1] == '-') &&  					Contains ((rn = n.Substring (0' n.Length-1)))"  is complex.
Complex Conditional,GitUI.UI,ExtHelper,C:\repos\yysun_git-tools\GitUI\UI\PendingChanges.xaml.cs,FindVisualChild,The conditional expression  "child != null && child is TChild && (name == null || ((Control)child).Name == name)"  is complex.
Magic Number,GitUI,GitViewModel,C:\repos\yysun_git-tools\GitUI\GitViewModel.cs,GitViewModel,The following statement contains a magic number: timer.Interval = TimeSpan.FromMilliseconds(588);
Magic Number,GitUI,GitViewModel,C:\repos\yysun_git-tools\GitUI\GitViewModel.cs,RefreshToolWindows,The following statement contains a magic number: await Task.Delay(300);
Magic Number,GitUI,MainWindow,C:\repos\yysun_git-tools\GitUI\MainWindow.xaml.cs,Window_Loaded,The following statement contains a magic number: this.rootGrid.RowDefinitions[2].Height = new GridLength(this.ActualHeight / 3);
Magic Number,GitUI,MainWindow,C:\repos\yysun_git-tools\GitUI\MainWindow.xaml.cs,Window_Loaded,The following statement contains a magic number: this.rootGrid.RowDefinitions[2].Height = new GridLength(this.ActualHeight / 3);
Magic Number,GitUI,MainWindow,C:\repos\yysun_git-tools\GitUI\MainWindow.xaml.cs,Window_Loaded,The following statement contains a magic number: Action a1 = () =>              {                  this.WindowState = WindowState.Maximized;                  this.console_height = (this.ActualHeight - 60) * 0.5;              };
Magic Number,GitUI,MainWindow,C:\repos\yysun_git-tools\GitUI\MainWindow.xaml.cs,Window_Loaded,The following statement contains a magic number: Action a1 = () =>              {                  this.WindowState = WindowState.Maximized;                  this.console_height = (this.ActualHeight - 60) * 0.5;              };
Magic Number,GitUI,MainWindow,C:\repos\yysun_git-tools\GitUI\MainWindow.xaml.cs,ShowCommitDetails,The following statement contains a magic number: if (id != null)  			{  				this.details.RenderTransform.SetValue(TranslateTransform.XProperty' this.ActualWidth);  				this.details.Visibility = Visibility.Visible;  				var animationDuration = TimeSpan.FromSeconds(.5);  				var animation = new DoubleAnimation(0' new Duration(animationDuration));  				animation.EasingFunction = new CubicEase() { EasingMode = EasingMode.EaseOut };    				loading.Visibility = Visibility.Visible;    				animation.Completed += (_' e) =>  				{  					this.details.Show(this.gitViewModel.Tracker' id);  					loading.Visibility = Visibility.Collapsed;  				};  				this.details.RenderTransform.BeginAnimation(TranslateTransform.XProperty' animation);  			}
Magic Number,GitUI,MainWindow,C:\repos\yysun_git-tools\GitUI\MainWindow.xaml.cs,CloseCommitDetails_Executed,The following statement contains a magic number: try  			{  				if (e.Parameter == null)  				{  					var animationDuration = TimeSpan.FromSeconds(.2);  					var animation = new DoubleAnimation(this.ActualWidth + 200' new Duration(animationDuration));  					animation.EasingFunction = new CubicEase() { EasingMode = EasingMode.EaseIn };  					animation.Completed += (o' _) => this.details.Visibility = Visibility.Collapsed;  					this.details.RenderTransform.BeginAnimation(TranslateTransform.XProperty' animation);  				}  				else  				{  					var animationDuration = TimeSpan.FromSeconds(.2);  					var animation = new DoubleAnimation(-this.ActualWidth' new Duration(animationDuration));  					animation.EasingFunction = new CubicEase() { EasingMode = EasingMode.EaseIn };  					animation.Completed += (o' _) => this.pendingChanges.Visibility = Visibility.Collapsed;  					this.pendingChanges.RenderTransform.BeginAnimation(TranslateTransform.XProperty' animation);  				}  			}  			catch (Exception ex)  			{  				Log.WriteLine("MainWindow.CloseCommitDetails_Executed: {0}"' ex.ToString());  			}
Magic Number,GitUI,MainWindow,C:\repos\yysun_git-tools\GitUI\MainWindow.xaml.cs,CloseCommitDetails_Executed,The following statement contains a magic number: try  			{  				if (e.Parameter == null)  				{  					var animationDuration = TimeSpan.FromSeconds(.2);  					var animation = new DoubleAnimation(this.ActualWidth + 200' new Duration(animationDuration));  					animation.EasingFunction = new CubicEase() { EasingMode = EasingMode.EaseIn };  					animation.Completed += (o' _) => this.details.Visibility = Visibility.Collapsed;  					this.details.RenderTransform.BeginAnimation(TranslateTransform.XProperty' animation);  				}  				else  				{  					var animationDuration = TimeSpan.FromSeconds(.2);  					var animation = new DoubleAnimation(-this.ActualWidth' new Duration(animationDuration));  					animation.EasingFunction = new CubicEase() { EasingMode = EasingMode.EaseIn };  					animation.Completed += (o' _) => this.pendingChanges.Visibility = Visibility.Collapsed;  					this.pendingChanges.RenderTransform.BeginAnimation(TranslateTransform.XProperty' animation);  				}  			}  			catch (Exception ex)  			{  				Log.WriteLine("MainWindow.CloseCommitDetails_Executed: {0}"' ex.ToString());  			}
Magic Number,GitUI,MainWindow,C:\repos\yysun_git-tools\GitUI\MainWindow.xaml.cs,CloseCommitDetails_Executed,The following statement contains a magic number: try  			{  				if (e.Parameter == null)  				{  					var animationDuration = TimeSpan.FromSeconds(.2);  					var animation = new DoubleAnimation(this.ActualWidth + 200' new Duration(animationDuration));  					animation.EasingFunction = new CubicEase() { EasingMode = EasingMode.EaseIn };  					animation.Completed += (o' _) => this.details.Visibility = Visibility.Collapsed;  					this.details.RenderTransform.BeginAnimation(TranslateTransform.XProperty' animation);  				}  				else  				{  					var animationDuration = TimeSpan.FromSeconds(.2);  					var animation = new DoubleAnimation(-this.ActualWidth' new Duration(animationDuration));  					animation.EasingFunction = new CubicEase() { EasingMode = EasingMode.EaseIn };  					animation.Completed += (o' _) => this.pendingChanges.Visibility = Visibility.Collapsed;  					this.pendingChanges.RenderTransform.BeginAnimation(TranslateTransform.XProperty' animation);  				}  			}  			catch (Exception ex)  			{  				Log.WriteLine("MainWindow.CloseCommitDetails_Executed: {0}"' ex.ToString());  			}
Magic Number,GitUI,MainWindow,C:\repos\yysun_git-tools\GitUI\MainWindow.xaml.cs,ShowMessage_Executed,The following statement contains a magic number: int max_lines = (int) this.ActualHeight / 40;
Magic Number,GitUI,MainWindow,C:\repos\yysun_git-tools\GitUI\MainWindow.xaml.cs,ShowMessage_Executed,The following statement contains a magic number: if (lines.Length > max_lines)              {                  var sb = new StringBuilder();                  for (int i = 0; i < max_lines-3; i++)                  {                      sb.Append("\n" + lines[i]);                  }                  text = string.Format("{0}\n .......\n{1}\n{2}"'                       sb.ToString()' lines[lines.Length - 2]' lines[lines.Length - 1]);              }
Magic Number,GitUI,MainWindow,C:\repos\yysun_git-tools\GitUI\MainWindow.xaml.cs,ShowMessage_Executed,The following statement contains a magic number: if (lines.Length > max_lines)              {                  var sb = new StringBuilder();                  for (int i = 0; i < max_lines-3; i++)                  {                      sb.Append("\n" + lines[i]);                  }                  text = string.Format("{0}\n .......\n{1}\n{2}"'                       sb.ToString()' lines[lines.Length - 2]' lines[lines.Length - 1]);              }
Magic Number,GitUI,MainWindow,C:\repos\yysun_git-tools\GitUI\MainWindow.xaml.cs,ShowMessage_Executed,The following statement contains a magic number: DoubleAnimation doubleAnimation = new DoubleAnimation  			{                  Duration = new Duration(ret.HasError ? TimeSpan.FromSeconds(30) : TimeSpan.FromSeconds(10))'  				From = 1.0'  				To = 0.0  			};
Magic Number,GitUI,MainWindow,C:\repos\yysun_git-tools\GitUI\MainWindow.xaml.cs,ShowMessage_Executed,The following statement contains a magic number: DoubleAnimation doubleAnimation = new DoubleAnimation  			{                  Duration = new Duration(ret.HasError ? TimeSpan.FromSeconds(30) : TimeSpan.FromSeconds(10))'  				From = 1.0'  				To = 0.0  			};
Magic Number,GitUI,MainWindow,C:\repos\yysun_git-tools\GitUI\MainWindow.xaml.cs,CompareCommits_Executed,The following statement contains a magic number: try  			{  				this.details.RenderTransform.SetValue(TranslateTransform.XProperty' this.ActualWidth);  				this.details.Visibility = Visibility.Visible;  				var animationDuration = TimeSpan.FromSeconds(.5);  				var animation = new DoubleAnimation(0' new Duration(animationDuration));  				animation.EasingFunction = new CubicEase() { EasingMode = EasingMode.EaseOut };    				loading.Visibility = Visibility.Visible;  				animation.Completed += (_' x) =>  				{  					var ids = e.Parameter as string[];  					this.details.Show(this.gitViewModel.Tracker' ids[0]' ids[1]);  					loading.Visibility = Visibility.Collapsed;  				};    				this.details.RenderTransform.BeginAnimation(TranslateTransform.XProperty' animation);  			}  			catch (Exception ex)  			{  				Log.WriteLine("MainWindow.CompareCommits_Executed {0}"' ex.ToString());  			}
Magic Number,GitUI,MainWindow,C:\repos\yysun_git-tools\GitUI\MainWindow.xaml.cs,PendingChanges_Executed,The following statement contains a magic number: try  			{  				this.pendingChanges.RenderTransform.SetValue(TranslateTransform.XProperty' -this.ActualWidth);  				this.pendingChanges.Visibility = Visibility.Visible;  				var animationDuration = TimeSpan.FromSeconds(.5);  				var animation = new DoubleAnimation(0' new Duration(animationDuration));  				animation.EasingFunction = new CubicEase() { EasingMode = EasingMode.EaseOut };    				loading.Visibility = Visibility.Visible;  				animation.Completed += (_' x) =>  				{  					this.pendingChanges.Refresh(gitViewModel.Tracker);  					loading.Visibility = Visibility.Collapsed;  				};  				this.pendingChanges.RenderTransform.BeginAnimation(TranslateTransform.XProperty' animation);    			}  			catch (Exception ex)  			{  				Log.WriteLine("MainWindow.PendingChanges_Executed {0}"' ex.ToString());  			}
Magic Number,GitUI,MainWindow,C:\repos\yysun_git-tools\GitUI\MainWindow.xaml.cs,AdjustConsoleHeight,The following statement contains a magic number: var mh = this.ActualHeight / 2 - 30;
Magic Number,GitUI,MainWindow,C:\repos\yysun_git-tools\GitUI\MainWindow.xaml.cs,AdjustConsoleHeight,The following statement contains a magic number: var mh = this.ActualHeight / 2 - 30;
Magic Number,GitUI,MainWindow,C:\repos\yysun_git-tools\GitUI\MainWindow.xaml.cs,AdjustConsoleHeight,The following statement contains a magic number: var h = this.rootGrid.RowDefinitions[2].Height.Value;
Magic Number,GitUI,MainWindow,C:\repos\yysun_git-tools\GitUI\MainWindow.xaml.cs,AdjustConsoleHeight,The following statement contains a magic number: if (h> 0 && h > mh)              {                  this.rootGrid.RowDefinitions[2].Height = new GridLength(mh);                  console_height = mh;              }
Magic Number,GitUI,MainWindow,C:\repos\yysun_git-tools\GitUI\MainWindow.xaml.cs,toogleGitConsole,The following statement contains a magic number: var h = this.rootGrid.RowDefinitions[2].Height.Value;
Magic Number,GitUI,MainWindow,C:\repos\yysun_git-tools\GitUI\MainWindow.xaml.cs,toogleGitConsole,The following statement contains a magic number: this.rootGrid.RowDefinitions[2].Height = h > 0 ?                  new GridLength(0) :                  new GridLength(console_height);
Magic Number,Mono.Options,OptionSet,C:\repos\yysun_git-tools\GitUI\Options.cs,Add,The following statement contains a magic number: Option p = new ActionOption (prototype' description' 2'   					delegate (OptionValueCollection v) {action (v [0]' v [1]);});
Magic Number,Mono.Options,OptionSet,C:\repos\yysun_git-tools\GitUI\Options.cs,WriteOptionDescriptions,The following statement contains a magic number: foreach (Option p in this) {  				int written = 0;  				if (!WriteOptionPrototype (o' p' ref written))  					continue;    				if (written < OptionWidth)  					o.Write (new string (' '' OptionWidth - written));  				else {  					o.WriteLine ();  					o.Write (new string (' '' OptionWidth));  				}    				List<string> lines = GetLines (localizer (GetDescription (p.Description)));  				o.WriteLine (lines [0]);  				string prefix = new string (' '' OptionWidth+2);  				for (int i = 1; i < lines.Count; ++i) {  					o.Write (prefix);  					o.WriteLine (lines [i]);  				}  			}
Magic Number,Mono.Options,OptionSet,C:\repos\yysun_git-tools\GitUI\Options.cs,GetLines,The following statement contains a magic number: int length = 80 - OptionWidth - 2;
Magic Number,Mono.Options,OptionSet,C:\repos\yysun_git-tools\GitUI\Options.cs,GetLines,The following statement contains a magic number: int length = 80 - OptionWidth - 2;
Magic Number,GitUI.UI,BottomToolBar,C:\repos\yysun_git-tools\GitUI\UI\BottomToolBar.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.btnBack = ((System.Windows.Controls.Button)(target));              return;              case 2:              this.txtDirectory = ((System.Windows.Controls.TextBox)(target));              return;              case 3:              this.btnGo = ((System.Windows.Controls.Button)(target));                            #line 18 "..\..\..\UI\BottomToolBar.xaml"              this.btnGo.Click += new System.Windows.RoutedEventHandler(this.btnGo_Click);                            #line default              #line hidden              return;              }
Magic Number,GitUI.UI,BottomToolBar,C:\repos\yysun_git-tools\GitUI\UI\BottomToolBar.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.btnBack = ((System.Windows.Controls.Button)(target));              return;              case 2:              this.txtDirectory = ((System.Windows.Controls.TextBox)(target));              return;              case 3:              this.btnGo = ((System.Windows.Controls.Button)(target));                            #line 18 "..\..\..\UI\BottomToolBar.xaml"              this.btnGo.Click += new System.Windows.RoutedEventHandler(this.btnGo_Click);                            #line default              #line hidden              return;              }
Magic Number,GitUI.UI,GitConsole,C:\repos\yysun_git-tools\GitUI\UI\GitConsole.xaml.cs,errorWorker_DoWork,The following statement contains a magic number: var buffer = new char[1024];
Magic Number,GitUI.UI,GitConsole,C:\repos\yysun_git-tools\GitUI\UI\GitConsole.xaml.cs,errorWorker_DoWork,The following statement contains a magic number: while (errorWorker.CancellationPending == false && errorReader != null)              {                  var count = errorReader.Read(buffer' 0' 1024);                  if (count > 0)                  {                      sb.Append(buffer' 0' count);                      if (buffer[count - 1] == '\n')                      {                          this.WriteError(sb.ToString().TrimEnd());                          sb.Clear();                      }                  }                  else break;              }
Magic Number,GitUI.UI,GitConsole,C:\repos\yysun_git-tools\GitUI\UI\GitConsole.xaml.cs,outputWorker_DoWork,The following statement contains a magic number: var buffer = new char[1024];
Magic Number,GitUI.UI,GitConsole,C:\repos\yysun_git-tools\GitUI\UI\GitConsole.xaml.cs,outputWorker_DoWork,The following statement contains a magic number: while (outputWorker.CancellationPending == false && outputReader != null)              {                  var count = outputReader.Read(buffer' 0' 1024);                  if (count > 0)                  {                      sb.Append(buffer' 0' count);                      this.WriteOutput(sb.ToString().TrimEnd());                      sb.Clear();                  }                  else break;              }
Magic Number,GitUI.UI,GitConsole,C:\repos\yysun_git-tools\GitUI\UI\GitConsole.xaml.cs,WritePromptText,The following statement contains a magic number: para.Margin = new Thickness(0' 10' 0' 0);
Magic Number,GitUI.UI,GitConsole,C:\repos\yysun_git-tools\GitUI\UI\GitConsole.xaml.cs,WritePromptText,The following statement contains a magic number: para.LineHeight = 10;
Magic Number,GitUI.UI,GitConsole,C:\repos\yysun_git-tools\GitUI\UI\GitConsole.xaml.cs,WriteText,The following statement contains a magic number: para.Margin = new Thickness(0' 2' 0' 0);
Magic Number,GitUI.UI,GitConsole,C:\repos\yysun_git-tools\GitUI\UI\GitConsole.xaml.cs,WriteText,The following statement contains a magic number: para.LineHeight = 10;
Magic Number,GitUI.UI,GitConsole,C:\repos\yysun_git-tools\GitUI\UI\GitConsole.xaml.cs,ShowOptions,The following statement contains a magic number: if (options != null && options.Any())              {                  Rect rect = this.richTextBox1.CaretPosition.GetCharacterRect(LogicalDirection.Forward);                  double d = this.ActualHeight - (rect.Y + lstOptions.Height + 12);                  double left = rect.X + 6;                  double top = d > 0 ? rect.Y + 12 : rect.Y - lstOptions.Height;                  left += this.Padding.Left;                  top += this.Padding.Top;                  lstOptions.SetCurrentValue(ListBox.MarginProperty' new Thickness(left' top' 0' 0));                  lstOptions.ItemsSource = options;                  ShowOptions();              }
Magic Number,GitUI.UI,GitConsole,C:\repos\yysun_git-tools\GitUI\UI\GitConsole.xaml.cs,ShowOptions,The following statement contains a magic number: if (options != null && options.Any())              {                  Rect rect = this.richTextBox1.CaretPosition.GetCharacterRect(LogicalDirection.Forward);                  double d = this.ActualHeight - (rect.Y + lstOptions.Height + 12);                  double left = rect.X + 6;                  double top = d > 0 ? rect.Y + 12 : rect.Y - lstOptions.Height;                  left += this.Padding.Left;                  top += this.Padding.Top;                  lstOptions.SetCurrentValue(ListBox.MarginProperty' new Thickness(left' top' 0' 0));                  lstOptions.ItemsSource = options;                  ShowOptions();              }
Magic Number,GitUI.UI,GitConsole,C:\repos\yysun_git-tools\GitUI\UI\GitConsole.xaml.cs,ShowOptions,The following statement contains a magic number: if (options != null && options.Any())              {                  Rect rect = this.richTextBox1.CaretPosition.GetCharacterRect(LogicalDirection.Forward);                  double d = this.ActualHeight - (rect.Y + lstOptions.Height + 12);                  double left = rect.X + 6;                  double top = d > 0 ? rect.Y + 12 : rect.Y - lstOptions.Height;                  left += this.Padding.Left;                  top += this.Padding.Top;                  lstOptions.SetCurrentValue(ListBox.MarginProperty' new Thickness(left' top' 0' 0));                  lstOptions.ItemsSource = options;                  ShowOptions();              }
Magic Number,GitUI.UI,GitConsole,C:\repos\yysun_git-tools\GitUI\UI\GitConsole.xaml.cs,FilterOptions,The following statement contains a magic number: if (command != null && command.IndexOf(' ') > 0)              {                  var idx = command.LastIndexOf(' ');                  var options = GetOptions(command.Substring(0' idx));                  if (options != null && options.Any())                  {                      Rect rect = this.richTextBox1.CaretPosition.GetCharacterRect(LogicalDirection.Forward);                      double d = this.ActualHeight - (rect.Y + lstOptions.Height + 12);                      double left = rect.X + 6;                      double top = d > 0 ? rect.Y + 12 : rect.Y - lstOptions.Height;                      left += this.Padding.Left;                      top += this.Padding.Top;                      lstOptions.SetCurrentValue(ListBox.MarginProperty' new Thickness(left' top' 0' 0));                      lstOptions.ItemsSource = options;                        var subcommand = command.Substring(idx + 1);                      var opts = options.Where(item => item.StartsWith(subcommand));                      lstOptions.ItemsSource = opts;                      lstOptions.Visibility = (opts.Count() > 0 && opts.First() != subcommand) ?                           Visibility.Visible : Visibility.Collapsed;                        if (opts.Count() == 1) lstOptions.SelectedIndex = 0;                  }                  else                  {                      HideOptions();                  }              }              else              {                  HideOptions();              }
Magic Number,GitUI.UI,GitConsole,C:\repos\yysun_git-tools\GitUI\UI\GitConsole.xaml.cs,FilterOptions,The following statement contains a magic number: if (command != null && command.IndexOf(' ') > 0)              {                  var idx = command.LastIndexOf(' ');                  var options = GetOptions(command.Substring(0' idx));                  if (options != null && options.Any())                  {                      Rect rect = this.richTextBox1.CaretPosition.GetCharacterRect(LogicalDirection.Forward);                      double d = this.ActualHeight - (rect.Y + lstOptions.Height + 12);                      double left = rect.X + 6;                      double top = d > 0 ? rect.Y + 12 : rect.Y - lstOptions.Height;                      left += this.Padding.Left;                      top += this.Padding.Top;                      lstOptions.SetCurrentValue(ListBox.MarginProperty' new Thickness(left' top' 0' 0));                      lstOptions.ItemsSource = options;                        var subcommand = command.Substring(idx + 1);                      var opts = options.Where(item => item.StartsWith(subcommand));                      lstOptions.ItemsSource = opts;                      lstOptions.Visibility = (opts.Count() > 0 && opts.First() != subcommand) ?                           Visibility.Visible : Visibility.Collapsed;                        if (opts.Count() == 1) lstOptions.SelectedIndex = 0;                  }                  else                  {                      HideOptions();                  }              }              else              {                  HideOptions();              }
Magic Number,GitUI.UI,GitConsole,C:\repos\yysun_git-tools\GitUI\UI\GitConsole.xaml.cs,FilterOptions,The following statement contains a magic number: if (command != null && command.IndexOf(' ') > 0)              {                  var idx = command.LastIndexOf(' ');                  var options = GetOptions(command.Substring(0' idx));                  if (options != null && options.Any())                  {                      Rect rect = this.richTextBox1.CaretPosition.GetCharacterRect(LogicalDirection.Forward);                      double d = this.ActualHeight - (rect.Y + lstOptions.Height + 12);                      double left = rect.X + 6;                      double top = d > 0 ? rect.Y + 12 : rect.Y - lstOptions.Height;                      left += this.Padding.Left;                      top += this.Padding.Top;                      lstOptions.SetCurrentValue(ListBox.MarginProperty' new Thickness(left' top' 0' 0));                      lstOptions.ItemsSource = options;                        var subcommand = command.Substring(idx + 1);                      var opts = options.Where(item => item.StartsWith(subcommand));                      lstOptions.ItemsSource = opts;                      lstOptions.Visibility = (opts.Count() > 0 && opts.First() != subcommand) ?                           Visibility.Visible : Visibility.Collapsed;                        if (opts.Count() == 1) lstOptions.SelectedIndex = 0;                  }                  else                  {                      HideOptions();                  }              }              else              {                  HideOptions();              }
Magic Number,GitUI.UI,GitConsole,C:\repos\yysun_git-tools\GitUI\UI\GitConsole.xaml.cs,SendCtrlC,The following statement contains a magic number: const uint keyeventfKeyup = 2;
Magic Number,GitUI.UI,GitConsole,C:\repos\yysun_git-tools\GitUI\UI\GitConsole.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 7 "..\..\..\UI\GitConsole.xaml"              ((GitUI.UI.GitConsole)(target)).Loaded += new System.Windows.RoutedEventHandler(this.UserControl_Loaded);                            #line default              #line hidden              return;              case 2:              this.richTextBox1 = ((System.Windows.Controls.RichTextBox)(target));                            #line 10 "..\..\..\UI\GitConsole.xaml"              this.richTextBox1.PreviewKeyDown += new System.Windows.Input.KeyEventHandler(this.richTextBox1_PreviewKeyDown);                            #line default              #line hidden                            #line 11 "..\..\..\UI\GitConsole.xaml"              this.richTextBox1.KeyUp += new System.Windows.Input.KeyEventHandler(this.richTextBox1_KeyUp);                            #line default              #line hidden              return;              case 3:              this.lstOptions = ((System.Windows.Controls.ListBox)(target));                            #line 14 "..\..\..\UI\GitConsole.xaml"              this.lstOptions.PreviewMouseDown += new System.Windows.Input.MouseButtonEventHandler(this.lstOptions_PreviewMouseDown);                            #line default              #line hidden              return;              }
Magic Number,GitUI.UI,GitConsole,C:\repos\yysun_git-tools\GitUI\UI\GitConsole.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 7 "..\..\..\UI\GitConsole.xaml"              ((GitUI.UI.GitConsole)(target)).Loaded += new System.Windows.RoutedEventHandler(this.UserControl_Loaded);                            #line default              #line hidden              return;              case 2:              this.richTextBox1 = ((System.Windows.Controls.RichTextBox)(target));                            #line 10 "..\..\..\UI\GitConsole.xaml"              this.richTextBox1.PreviewKeyDown += new System.Windows.Input.KeyEventHandler(this.richTextBox1_PreviewKeyDown);                            #line default              #line hidden                            #line 11 "..\..\..\UI\GitConsole.xaml"              this.richTextBox1.KeyUp += new System.Windows.Input.KeyEventHandler(this.richTextBox1_KeyUp);                            #line default              #line hidden              return;              case 3:              this.lstOptions = ((System.Windows.Controls.ListBox)(target));                            #line 14 "..\..\..\UI\GitConsole.xaml"              this.lstOptions.PreviewMouseDown += new System.Windows.Input.MouseButtonEventHandler(this.lstOptions_PreviewMouseDown);                            #line default              #line hidden              return;              }
Magic Number,GitUI.UI,MainToolBar,C:\repos\yysun_git-tools\GitUI\UI\MainToolBar.xaml.cs,SelectCommit,The following statement contains a magic number: id = id.Substring(0' 7);
Magic Number,GitUI.UI,MainToolBar,C:\repos\yysun_git-tools\GitUI\UI\MainToolBar.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 39 "..\..\..\UI\MainToolBar.xaml"              ((System.Windows.Controls.Grid)(target)).PreviewKeyDown += new System.Windows.Input.KeyEventHandler(this.Grid_PreviewKeyDown);                            #line default              #line hidden              return;              case 2:              this.label1 = ((System.Windows.Controls.Label)(target));              return;              case 3:              this.label2 = ((System.Windows.Controls.Label)(target));              return;              case 4:              this.branchList = ((System.Windows.Controls.ListBox)(target));                            #line 52 "..\..\..\UI\MainToolBar.xaml"              this.branchList.MouseLeftButtonUp += new System.Windows.Input.MouseButtonEventHandler(this.branchList_MouseLeftButtonUp);                            #line default              #line hidden              return;              case 5:              this.tagList = ((System.Windows.Controls.ListBox)(target));                            #line 56 "..\..\..\UI\MainToolBar.xaml"              this.tagList.MouseLeftButtonUp += new System.Windows.Input.MouseButtonEventHandler(this.tagList_MouseLeftButtonUp);                            #line default              #line hidden              return;              case 6:              this.checkBox1 = ((System.Windows.Controls.CheckBox)(target));                            #line 58 "..\..\..\UI\MainToolBar.xaml"              this.checkBox1.Click += new System.Windows.RoutedEventHandler(this.checkBox1_Click);                            #line default              #line hidden              return;              case 7:              this.lableView = ((System.Windows.Controls.Label)(target));              return;              case 8:              this.txtSearch = ((System.Windows.Controls.TextBox)(target));                            #line 65 "..\..\..\UI\MainToolBar.xaml"              this.txtSearch.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.txtSearch_TextChanged);                            #line default              #line hidden                            #line 65 "..\..\..\UI\MainToolBar.xaml"              this.txtSearch.PreviewKeyDown += new System.Windows.Input.KeyEventHandler(this.txtSearch_PreviewKeyDown);                            #line default              #line hidden                            #line 65 "..\..\..\UI\MainToolBar.xaml"              this.txtSearch.PreviewMouseDown += new System.Windows.Input.MouseButtonEventHandler(this.txtSearch_PreviewMouseDown);                            #line default              #line hidden              return;              case 9:              this.lstSearch = ((System.Windows.Controls.ListBox)(target));                            #line 66 "..\..\..\UI\MainToolBar.xaml"              this.lstSearch.PreviewKeyDown += new System.Windows.Input.KeyEventHandler(this.lstSearch_PreviewKeyDown);                            #line default              #line hidden                            #line 66 "..\..\..\UI\MainToolBar.xaml"              this.lstSearch.MouseDoubleClick += new System.Windows.Input.MouseButtonEventHandler(this.lstSearch_MouseDoubleClick);                            #line default              #line hidden              return;              case 10:              this.btnCompare = ((System.Windows.Controls.Button)(target));                            #line 67 "..\..\..\UI\MainToolBar.xaml"              this.btnCompare.Click += new System.Windows.RoutedEventHandler(this.btnCompare_Click);                            #line default              #line hidden              return;              case 11:              this.txtCommit1 = ((System.Windows.Controls.TextBlock)(target));              return;              case 12:              this.txtCommit2 = ((System.Windows.Controls.TextBlock)(target));              return;              case 13:              this.lblSelectedCommits = ((System.Windows.Controls.Label)(target));              return;              case 14:              this.btnGitBash = ((System.Windows.Controls.Button)(target));                            #line 71 "..\..\..\UI\MainToolBar.xaml"              this.btnGitBash.Click += new System.Windows.RoutedEventHandler(this.btnGitBash_Click);                            #line default              #line hidden              return;              case 15:              this.btnPendingChanges = ((System.Windows.Controls.Button)(target));                            #line 76 "..\..\..\UI\MainToolBar.xaml"              this.btnPendingChanges.Click += new System.Windows.RoutedEventHandler(this.btnPendingChanges_Click);                            #line default              #line hidden              return;              }
Magic Number,GitUI.UI,MainToolBar,C:\repos\yysun_git-tools\GitUI\UI\MainToolBar.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 39 "..\..\..\UI\MainToolBar.xaml"              ((System.Windows.Controls.Grid)(target)).PreviewKeyDown += new System.Windows.Input.KeyEventHandler(this.Grid_PreviewKeyDown);                            #line default              #line hidden              return;              case 2:              this.label1 = ((System.Windows.Controls.Label)(target));              return;              case 3:              this.label2 = ((System.Windows.Controls.Label)(target));              return;              case 4:              this.branchList = ((System.Windows.Controls.ListBox)(target));                            #line 52 "..\..\..\UI\MainToolBar.xaml"              this.branchList.MouseLeftButtonUp += new System.Windows.Input.MouseButtonEventHandler(this.branchList_MouseLeftButtonUp);                            #line default              #line hidden              return;              case 5:              this.tagList = ((System.Windows.Controls.ListBox)(target));                            #line 56 "..\..\..\UI\MainToolBar.xaml"              this.tagList.MouseLeftButtonUp += new System.Windows.Input.MouseButtonEventHandler(this.tagList_MouseLeftButtonUp);                            #line default              #line hidden              return;              case 6:              this.checkBox1 = ((System.Windows.Controls.CheckBox)(target));                            #line 58 "..\..\..\UI\MainToolBar.xaml"              this.checkBox1.Click += new System.Windows.RoutedEventHandler(this.checkBox1_Click);                            #line default              #line hidden              return;              case 7:              this.lableView = ((System.Windows.Controls.Label)(target));              return;              case 8:              this.txtSearch = ((System.Windows.Controls.TextBox)(target));                            #line 65 "..\..\..\UI\MainToolBar.xaml"              this.txtSearch.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.txtSearch_TextChanged);                            #line default              #line hidden                            #line 65 "..\..\..\UI\MainToolBar.xaml"              this.txtSearch.PreviewKeyDown += new System.Windows.Input.KeyEventHandler(this.txtSearch_PreviewKeyDown);                            #line default              #line hidden                            #line 65 "..\..\..\UI\MainToolBar.xaml"              this.txtSearch.PreviewMouseDown += new System.Windows.Input.MouseButtonEventHandler(this.txtSearch_PreviewMouseDown);                            #line default              #line hidden              return;              case 9:              this.lstSearch = ((System.Windows.Controls.ListBox)(target));                            #line 66 "..\..\..\UI\MainToolBar.xaml"              this.lstSearch.PreviewKeyDown += new System.Windows.Input.KeyEventHandler(this.lstSearch_PreviewKeyDown);                            #line default              #line hidden                            #line 66 "..\..\..\UI\MainToolBar.xaml"              this.lstSearch.MouseDoubleClick += new System.Windows.Input.MouseButtonEventHandler(this.lstSearch_MouseDoubleClick);                            #line default              #line hidden              return;              case 10:              this.btnCompare = ((System.Windows.Controls.Button)(target));                            #line 67 "..\..\..\UI\MainToolBar.xaml"              this.btnCompare.Click += new System.Windows.RoutedEventHandler(this.btnCompare_Click);                            #line default              #line hidden              return;              case 11:              this.txtCommit1 = ((System.Windows.Controls.TextBlock)(target));              return;              case 12:              this.txtCommit2 = ((System.Windows.Controls.TextBlock)(target));              return;              case 13:              this.lblSelectedCommits = ((System.Windows.Controls.Label)(target));              return;              case 14:              this.btnGitBash = ((System.Windows.Controls.Button)(target));                            #line 71 "..\..\..\UI\MainToolBar.xaml"              this.btnGitBash.Click += new System.Windows.RoutedEventHandler(this.btnGitBash_Click);                            #line default              #line hidden              return;              case 15:              this.btnPendingChanges = ((System.Windows.Controls.Button)(target));                            #line 76 "..\..\..\UI\MainToolBar.xaml"              this.btnPendingChanges.Click += new System.Windows.RoutedEventHandler(this.btnPendingChanges_Click);                            #line default              #line hidden              return;              }
Magic Number,GitUI.UI,MainToolBar,C:\repos\yysun_git-tools\GitUI\UI\MainToolBar.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 39 "..\..\..\UI\MainToolBar.xaml"              ((System.Windows.Controls.Grid)(target)).PreviewKeyDown += new System.Windows.Input.KeyEventHandler(this.Grid_PreviewKeyDown);                            #line default              #line hidden              return;              case 2:              this.label1 = ((System.Windows.Controls.Label)(target));              return;              case 3:              this.label2 = ((System.Windows.Controls.Label)(target));              return;              case 4:              this.branchList = ((System.Windows.Controls.ListBox)(target));                            #line 52 "..\..\..\UI\MainToolBar.xaml"              this.branchList.MouseLeftButtonUp += new System.Windows.Input.MouseButtonEventHandler(this.branchList_MouseLeftButtonUp);                            #line default              #line hidden              return;              case 5:              this.tagList = ((System.Windows.Controls.ListBox)(target));                            #line 56 "..\..\..\UI\MainToolBar.xaml"              this.tagList.MouseLeftButtonUp += new System.Windows.Input.MouseButtonEventHandler(this.tagList_MouseLeftButtonUp);                            #line default              #line hidden              return;              case 6:              this.checkBox1 = ((System.Windows.Controls.CheckBox)(target));                            #line 58 "..\..\..\UI\MainToolBar.xaml"              this.checkBox1.Click += new System.Windows.RoutedEventHandler(this.checkBox1_Click);                            #line default              #line hidden              return;              case 7:              this.lableView = ((System.Windows.Controls.Label)(target));              return;              case 8:              this.txtSearch = ((System.Windows.Controls.TextBox)(target));                            #line 65 "..\..\..\UI\MainToolBar.xaml"              this.txtSearch.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.txtSearch_TextChanged);                            #line default              #line hidden                            #line 65 "..\..\..\UI\MainToolBar.xaml"              this.txtSearch.PreviewKeyDown += new System.Windows.Input.KeyEventHandler(this.txtSearch_PreviewKeyDown);                            #line default              #line hidden                            #line 65 "..\..\..\UI\MainToolBar.xaml"              this.txtSearch.PreviewMouseDown += new System.Windows.Input.MouseButtonEventHandler(this.txtSearch_PreviewMouseDown);                            #line default              #line hidden              return;              case 9:              this.lstSearch = ((System.Windows.Controls.ListBox)(target));                            #line 66 "..\..\..\UI\MainToolBar.xaml"              this.lstSearch.PreviewKeyDown += new System.Windows.Input.KeyEventHandler(this.lstSearch_PreviewKeyDown);                            #line default              #line hidden                            #line 66 "..\..\..\UI\MainToolBar.xaml"              this.lstSearch.MouseDoubleClick += new System.Windows.Input.MouseButtonEventHandler(this.lstSearch_MouseDoubleClick);                            #line default              #line hidden              return;              case 10:              this.btnCompare = ((System.Windows.Controls.Button)(target));                            #line 67 "..\..\..\UI\MainToolBar.xaml"              this.btnCompare.Click += new System.Windows.RoutedEventHandler(this.btnCompare_Click);                            #line default              #line hidden              return;              case 11:              this.txtCommit1 = ((System.Windows.Controls.TextBlock)(target));              return;              case 12:              this.txtCommit2 = ((System.Windows.Controls.TextBlock)(target));              return;              case 13:              this.lblSelectedCommits = ((System.Windows.Controls.Label)(target));              return;              case 14:              this.btnGitBash = ((System.Windows.Controls.Button)(target));                            #line 71 "..\..\..\UI\MainToolBar.xaml"              this.btnGitBash.Click += new System.Windows.RoutedEventHandler(this.btnGitBash_Click);                            #line default              #line hidden              return;              case 15:              this.btnPendingChanges = ((System.Windows.Controls.Button)(target));                            #line 76 "..\..\..\UI\MainToolBar.xaml"              this.btnPendingChanges.Click += new System.Windows.RoutedEventHandler(this.btnPendingChanges_Click);                            #line default              #line hidden              return;              }
Magic Number,GitUI.UI,MainToolBar,C:\repos\yysun_git-tools\GitUI\UI\MainToolBar.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 39 "..\..\..\UI\MainToolBar.xaml"              ((System.Windows.Controls.Grid)(target)).PreviewKeyDown += new System.Windows.Input.KeyEventHandler(this.Grid_PreviewKeyDown);                            #line default              #line hidden              return;              case 2:              this.label1 = ((System.Windows.Controls.Label)(target));              return;              case 3:              this.label2 = ((System.Windows.Controls.Label)(target));              return;              case 4:              this.branchList = ((System.Windows.Controls.ListBox)(target));                            #line 52 "..\..\..\UI\MainToolBar.xaml"              this.branchList.MouseLeftButtonUp += new System.Windows.Input.MouseButtonEventHandler(this.branchList_MouseLeftButtonUp);                            #line default              #line hidden              return;              case 5:              this.tagList = ((System.Windows.Controls.ListBox)(target));                            #line 56 "..\..\..\UI\MainToolBar.xaml"              this.tagList.MouseLeftButtonUp += new System.Windows.Input.MouseButtonEventHandler(this.tagList_MouseLeftButtonUp);                            #line default              #line hidden              return;              case 6:              this.checkBox1 = ((System.Windows.Controls.CheckBox)(target));                            #line 58 "..\..\..\UI\MainToolBar.xaml"              this.checkBox1.Click += new System.Windows.RoutedEventHandler(this.checkBox1_Click);                            #line default              #line hidden              return;              case 7:              this.lableView = ((System.Windows.Controls.Label)(target));              return;              case 8:              this.txtSearch = ((System.Windows.Controls.TextBox)(target));                            #line 65 "..\..\..\UI\MainToolBar.xaml"              this.txtSearch.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.txtSearch_TextChanged);                            #line default              #line hidden                            #line 65 "..\..\..\UI\MainToolBar.xaml"              this.txtSearch.PreviewKeyDown += new System.Windows.Input.KeyEventHandler(this.txtSearch_PreviewKeyDown);                            #line default              #line hidden                            #line 65 "..\..\..\UI\MainToolBar.xaml"              this.txtSearch.PreviewMouseDown += new System.Windows.Input.MouseButtonEventHandler(this.txtSearch_PreviewMouseDown);                            #line default              #line hidden              return;              case 9:              this.lstSearch = ((System.Windows.Controls.ListBox)(target));                            #line 66 "..\..\..\UI\MainToolBar.xaml"              this.lstSearch.PreviewKeyDown += new System.Windows.Input.KeyEventHandler(this.lstSearch_PreviewKeyDown);                            #line default              #line hidden                            #line 66 "..\..\..\UI\MainToolBar.xaml"              this.lstSearch.MouseDoubleClick += new System.Windows.Input.MouseButtonEventHandler(this.lstSearch_MouseDoubleClick);                            #line default              #line hidden              return;              case 10:              this.btnCompare = ((System.Windows.Controls.Button)(target));                            #line 67 "..\..\..\UI\MainToolBar.xaml"              this.btnCompare.Click += new System.Windows.RoutedEventHandler(this.btnCompare_Click);                            #line default              #line hidden              return;              case 11:              this.txtCommit1 = ((System.Windows.Controls.TextBlock)(target));              return;              case 12:              this.txtCommit2 = ((System.Windows.Controls.TextBlock)(target));              return;              case 13:              this.lblSelectedCommits = ((System.Windows.Controls.Label)(target));              return;              case 14:              this.btnGitBash = ((System.Windows.Controls.Button)(target));                            #line 71 "..\..\..\UI\MainToolBar.xaml"              this.btnGitBash.Click += new System.Windows.RoutedEventHandler(this.btnGitBash_Click);                            #line default              #line hidden              return;              case 15:              this.btnPendingChanges = ((System.Windows.Controls.Button)(target));                            #line 76 "..\..\..\UI\MainToolBar.xaml"              this.btnPendingChanges.Click += new System.Windows.RoutedEventHandler(this.btnPendingChanges_Click);                            #line default              #line hidden              return;              }
Magic Number,GitUI.UI,MainToolBar,C:\repos\yysun_git-tools\GitUI\UI\MainToolBar.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 39 "..\..\..\UI\MainToolBar.xaml"              ((System.Windows.Controls.Grid)(target)).PreviewKeyDown += new System.Windows.Input.KeyEventHandler(this.Grid_PreviewKeyDown);                            #line default              #line hidden              return;              case 2:              this.label1 = ((System.Windows.Controls.Label)(target));              return;              case 3:              this.label2 = ((System.Windows.Controls.Label)(target));              return;              case 4:              this.branchList = ((System.Windows.Controls.ListBox)(target));                            #line 52 "..\..\..\UI\MainToolBar.xaml"              this.branchList.MouseLeftButtonUp += new System.Windows.Input.MouseButtonEventHandler(this.branchList_MouseLeftButtonUp);                            #line default              #line hidden              return;              case 5:              this.tagList = ((System.Windows.Controls.ListBox)(target));                            #line 56 "..\..\..\UI\MainToolBar.xaml"              this.tagList.MouseLeftButtonUp += new System.Windows.Input.MouseButtonEventHandler(this.tagList_MouseLeftButtonUp);                            #line default              #line hidden              return;              case 6:              this.checkBox1 = ((System.Windows.Controls.CheckBox)(target));                            #line 58 "..\..\..\UI\MainToolBar.xaml"              this.checkBox1.Click += new System.Windows.RoutedEventHandler(this.checkBox1_Click);                            #line default              #line hidden              return;              case 7:              this.lableView = ((System.Windows.Controls.Label)(target));              return;              case 8:              this.txtSearch = ((System.Windows.Controls.TextBox)(target));                            #line 65 "..\..\..\UI\MainToolBar.xaml"              this.txtSearch.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.txtSearch_TextChanged);                            #line default              #line hidden                            #line 65 "..\..\..\UI\MainToolBar.xaml"              this.txtSearch.PreviewKeyDown += new System.Windows.Input.KeyEventHandler(this.txtSearch_PreviewKeyDown);                            #line default              #line hidden                            #line 65 "..\..\..\UI\MainToolBar.xaml"              this.txtSearch.PreviewMouseDown += new System.Windows.Input.MouseButtonEventHandler(this.txtSearch_PreviewMouseDown);                            #line default              #line hidden              return;              case 9:              this.lstSearch = ((System.Windows.Controls.ListBox)(target));                            #line 66 "..\..\..\UI\MainToolBar.xaml"              this.lstSearch.PreviewKeyDown += new System.Windows.Input.KeyEventHandler(this.lstSearch_PreviewKeyDown);                            #line default              #line hidden                            #line 66 "..\..\..\UI\MainToolBar.xaml"              this.lstSearch.MouseDoubleClick += new System.Windows.Input.MouseButtonEventHandler(this.lstSearch_MouseDoubleClick);                            #line default              #line hidden              return;              case 10:              this.btnCompare = ((System.Windows.Controls.Button)(target));                            #line 67 "..\..\..\UI\MainToolBar.xaml"              this.btnCompare.Click += new System.Windows.RoutedEventHandler(this.btnCompare_Click);                            #line default              #line hidden              return;              case 11:              this.txtCommit1 = ((System.Windows.Controls.TextBlock)(target));              return;              case 12:              this.txtCommit2 = ((System.Windows.Controls.TextBlock)(target));              return;              case 13:              this.lblSelectedCommits = ((System.Windows.Controls.Label)(target));              return;              case 14:              this.btnGitBash = ((System.Windows.Controls.Button)(target));                            #line 71 "..\..\..\UI\MainToolBar.xaml"              this.btnGitBash.Click += new System.Windows.RoutedEventHandler(this.btnGitBash_Click);                            #line default              #line hidden              return;              case 15:              this.btnPendingChanges = ((System.Windows.Controls.Button)(target));                            #line 76 "..\..\..\UI\MainToolBar.xaml"              this.btnPendingChanges.Click += new System.Windows.RoutedEventHandler(this.btnPendingChanges_Click);                            #line default              #line hidden              return;              }
Magic Number,GitUI.UI,MainToolBar,C:\repos\yysun_git-tools\GitUI\UI\MainToolBar.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 39 "..\..\..\UI\MainToolBar.xaml"              ((System.Windows.Controls.Grid)(target)).PreviewKeyDown += new System.Windows.Input.KeyEventHandler(this.Grid_PreviewKeyDown);                            #line default              #line hidden              return;              case 2:              this.label1 = ((System.Windows.Controls.Label)(target));              return;              case 3:              this.label2 = ((System.Windows.Controls.Label)(target));              return;              case 4:              this.branchList = ((System.Windows.Controls.ListBox)(target));                            #line 52 "..\..\..\UI\MainToolBar.xaml"              this.branchList.MouseLeftButtonUp += new System.Windows.Input.MouseButtonEventHandler(this.branchList_MouseLeftButtonUp);                            #line default              #line hidden              return;              case 5:              this.tagList = ((System.Windows.Controls.ListBox)(target));                            #line 56 "..\..\..\UI\MainToolBar.xaml"              this.tagList.MouseLeftButtonUp += new System.Windows.Input.MouseButtonEventHandler(this.tagList_MouseLeftButtonUp);                            #line default              #line hidden              return;              case 6:              this.checkBox1 = ((System.Windows.Controls.CheckBox)(target));                            #line 58 "..\..\..\UI\MainToolBar.xaml"              this.checkBox1.Click += new System.Windows.RoutedEventHandler(this.checkBox1_Click);                            #line default              #line hidden              return;              case 7:              this.lableView = ((System.Windows.Controls.Label)(target));              return;              case 8:              this.txtSearch = ((System.Windows.Controls.TextBox)(target));                            #line 65 "..\..\..\UI\MainToolBar.xaml"              this.txtSearch.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.txtSearch_TextChanged);                            #line default              #line hidden                            #line 65 "..\..\..\UI\MainToolBar.xaml"              this.txtSearch.PreviewKeyDown += new System.Windows.Input.KeyEventHandler(this.txtSearch_PreviewKeyDown);                            #line default              #line hidden                            #line 65 "..\..\..\UI\MainToolBar.xaml"              this.txtSearch.PreviewMouseDown += new System.Windows.Input.MouseButtonEventHandler(this.txtSearch_PreviewMouseDown);                            #line default              #line hidden              return;              case 9:              this.lstSearch = ((System.Windows.Controls.ListBox)(target));                            #line 66 "..\..\..\UI\MainToolBar.xaml"              this.lstSearch.PreviewKeyDown += new System.Windows.Input.KeyEventHandler(this.lstSearch_PreviewKeyDown);                            #line default              #line hidden                            #line 66 "..\..\..\UI\MainToolBar.xaml"              this.lstSearch.MouseDoubleClick += new System.Windows.Input.MouseButtonEventHandler(this.lstSearch_MouseDoubleClick);                            #line default              #line hidden              return;              case 10:              this.btnCompare = ((System.Windows.Controls.Button)(target));                            #line 67 "..\..\..\UI\MainToolBar.xaml"              this.btnCompare.Click += new System.Windows.RoutedEventHandler(this.btnCompare_Click);                            #line default              #line hidden              return;              case 11:              this.txtCommit1 = ((System.Windows.Controls.TextBlock)(target));              return;              case 12:              this.txtCommit2 = ((System.Windows.Controls.TextBlock)(target));              return;              case 13:              this.lblSelectedCommits = ((System.Windows.Controls.Label)(target));              return;              case 14:              this.btnGitBash = ((System.Windows.Controls.Button)(target));                            #line 71 "..\..\..\UI\MainToolBar.xaml"              this.btnGitBash.Click += new System.Windows.RoutedEventHandler(this.btnGitBash_Click);                            #line default              #line hidden              return;              case 15:              this.btnPendingChanges = ((System.Windows.Controls.Button)(target));                            #line 76 "..\..\..\UI\MainToolBar.xaml"              this.btnPendingChanges.Click += new System.Windows.RoutedEventHandler(this.btnPendingChanges_Click);                            #line default              #line hidden              return;              }
Magic Number,GitUI.UI,MainToolBar,C:\repos\yysun_git-tools\GitUI\UI\MainToolBar.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 39 "..\..\..\UI\MainToolBar.xaml"              ((System.Windows.Controls.Grid)(target)).PreviewKeyDown += new System.Windows.Input.KeyEventHandler(this.Grid_PreviewKeyDown);                            #line default              #line hidden              return;              case 2:              this.label1 = ((System.Windows.Controls.Label)(target));              return;              case 3:              this.label2 = ((System.Windows.Controls.Label)(target));              return;              case 4:              this.branchList = ((System.Windows.Controls.ListBox)(target));                            #line 52 "..\..\..\UI\MainToolBar.xaml"              this.branchList.MouseLeftButtonUp += new System.Windows.Input.MouseButtonEventHandler(this.branchList_MouseLeftButtonUp);                            #line default              #line hidden              return;              case 5:              this.tagList = ((System.Windows.Controls.ListBox)(target));                            #line 56 "..\..\..\UI\MainToolBar.xaml"              this.tagList.MouseLeftButtonUp += new System.Windows.Input.MouseButtonEventHandler(this.tagList_MouseLeftButtonUp);                            #line default              #line hidden              return;              case 6:              this.checkBox1 = ((System.Windows.Controls.CheckBox)(target));                            #line 58 "..\..\..\UI\MainToolBar.xaml"              this.checkBox1.Click += new System.Windows.RoutedEventHandler(this.checkBox1_Click);                            #line default              #line hidden              return;              case 7:              this.lableView = ((System.Windows.Controls.Label)(target));              return;              case 8:              this.txtSearch = ((System.Windows.Controls.TextBox)(target));                            #line 65 "..\..\..\UI\MainToolBar.xaml"              this.txtSearch.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.txtSearch_TextChanged);                            #line default              #line hidden                            #line 65 "..\..\..\UI\MainToolBar.xaml"              this.txtSearch.PreviewKeyDown += new System.Windows.Input.KeyEventHandler(this.txtSearch_PreviewKeyDown);                            #line default              #line hidden                            #line 65 "..\..\..\UI\MainToolBar.xaml"              this.txtSearch.PreviewMouseDown += new System.Windows.Input.MouseButtonEventHandler(this.txtSearch_PreviewMouseDown);                            #line default              #line hidden              return;              case 9:              this.lstSearch = ((System.Windows.Controls.ListBox)(target));                            #line 66 "..\..\..\UI\MainToolBar.xaml"              this.lstSearch.PreviewKeyDown += new System.Windows.Input.KeyEventHandler(this.lstSearch_PreviewKeyDown);                            #line default              #line hidden                            #line 66 "..\..\..\UI\MainToolBar.xaml"              this.lstSearch.MouseDoubleClick += new System.Windows.Input.MouseButtonEventHandler(this.lstSearch_MouseDoubleClick);                            #line default              #line hidden              return;              case 10:              this.btnCompare = ((System.Windows.Controls.Button)(target));                            #line 67 "..\..\..\UI\MainToolBar.xaml"              this.btnCompare.Click += new System.Windows.RoutedEventHandler(this.btnCompare_Click);                            #line default              #line hidden              return;              case 11:              this.txtCommit1 = ((System.Windows.Controls.TextBlock)(target));              return;              case 12:              this.txtCommit2 = ((System.Windows.Controls.TextBlock)(target));              return;              case 13:              this.lblSelectedCommits = ((System.Windows.Controls.Label)(target));              return;              case 14:              this.btnGitBash = ((System.Windows.Controls.Button)(target));                            #line 71 "..\..\..\UI\MainToolBar.xaml"              this.btnGitBash.Click += new System.Windows.RoutedEventHandler(this.btnGitBash_Click);                            #line default              #line hidden              return;              case 15:              this.btnPendingChanges = ((System.Windows.Controls.Button)(target));                            #line 76 "..\..\..\UI\MainToolBar.xaml"              this.btnPendingChanges.Click += new System.Windows.RoutedEventHandler(this.btnPendingChanges_Click);                            #line default              #line hidden              return;              }
Magic Number,GitUI.UI,MainToolBar,C:\repos\yysun_git-tools\GitUI\UI\MainToolBar.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 39 "..\..\..\UI\MainToolBar.xaml"              ((System.Windows.Controls.Grid)(target)).PreviewKeyDown += new System.Windows.Input.KeyEventHandler(this.Grid_PreviewKeyDown);                            #line default              #line hidden              return;              case 2:              this.label1 = ((System.Windows.Controls.Label)(target));              return;              case 3:              this.label2 = ((System.Windows.Controls.Label)(target));              return;              case 4:              this.branchList = ((System.Windows.Controls.ListBox)(target));                            #line 52 "..\..\..\UI\MainToolBar.xaml"              this.branchList.MouseLeftButtonUp += new System.Windows.Input.MouseButtonEventHandler(this.branchList_MouseLeftButtonUp);                            #line default              #line hidden              return;              case 5:              this.tagList = ((System.Windows.Controls.ListBox)(target));                            #line 56 "..\..\..\UI\MainToolBar.xaml"              this.tagList.MouseLeftButtonUp += new System.Windows.Input.MouseButtonEventHandler(this.tagList_MouseLeftButtonUp);                            #line default              #line hidden              return;              case 6:              this.checkBox1 = ((System.Windows.Controls.CheckBox)(target));                            #line 58 "..\..\..\UI\MainToolBar.xaml"              this.checkBox1.Click += new System.Windows.RoutedEventHandler(this.checkBox1_Click);                            #line default              #line hidden              return;              case 7:              this.lableView = ((System.Windows.Controls.Label)(target));              return;              case 8:              this.txtSearch = ((System.Windows.Controls.TextBox)(target));                            #line 65 "..\..\..\UI\MainToolBar.xaml"              this.txtSearch.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.txtSearch_TextChanged);                            #line default              #line hidden                            #line 65 "..\..\..\UI\MainToolBar.xaml"              this.txtSearch.PreviewKeyDown += new System.Windows.Input.KeyEventHandler(this.txtSearch_PreviewKeyDown);                            #line default              #line hidden                            #line 65 "..\..\..\UI\MainToolBar.xaml"              this.txtSearch.PreviewMouseDown += new System.Windows.Input.MouseButtonEventHandler(this.txtSearch_PreviewMouseDown);                            #line default              #line hidden              return;              case 9:              this.lstSearch = ((System.Windows.Controls.ListBox)(target));                            #line 66 "..\..\..\UI\MainToolBar.xaml"              this.lstSearch.PreviewKeyDown += new System.Windows.Input.KeyEventHandler(this.lstSearch_PreviewKeyDown);                            #line default              #line hidden                            #line 66 "..\..\..\UI\MainToolBar.xaml"              this.lstSearch.MouseDoubleClick += new System.Windows.Input.MouseButtonEventHandler(this.lstSearch_MouseDoubleClick);                            #line default              #line hidden              return;              case 10:              this.btnCompare = ((System.Windows.Controls.Button)(target));                            #line 67 "..\..\..\UI\MainToolBar.xaml"              this.btnCompare.Click += new System.Windows.RoutedEventHandler(this.btnCompare_Click);                            #line default              #line hidden              return;              case 11:              this.txtCommit1 = ((System.Windows.Controls.TextBlock)(target));              return;              case 12:              this.txtCommit2 = ((System.Windows.Controls.TextBlock)(target));              return;              case 13:              this.lblSelectedCommits = ((System.Windows.Controls.Label)(target));              return;              case 14:              this.btnGitBash = ((System.Windows.Controls.Button)(target));                            #line 71 "..\..\..\UI\MainToolBar.xaml"              this.btnGitBash.Click += new System.Windows.RoutedEventHandler(this.btnGitBash_Click);                            #line default              #line hidden              return;              case 15:              this.btnPendingChanges = ((System.Windows.Controls.Button)(target));                            #line 76 "..\..\..\UI\MainToolBar.xaml"              this.btnPendingChanges.Click += new System.Windows.RoutedEventHandler(this.btnPendingChanges_Click);                            #line default              #line hidden              return;              }
Magic Number,GitUI.UI,MainToolBar,C:\repos\yysun_git-tools\GitUI\UI\MainToolBar.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 39 "..\..\..\UI\MainToolBar.xaml"              ((System.Windows.Controls.Grid)(target)).PreviewKeyDown += new System.Windows.Input.KeyEventHandler(this.Grid_PreviewKeyDown);                            #line default              #line hidden              return;              case 2:              this.label1 = ((System.Windows.Controls.Label)(target));              return;              case 3:              this.label2 = ((System.Windows.Controls.Label)(target));              return;              case 4:              this.branchList = ((System.Windows.Controls.ListBox)(target));                            #line 52 "..\..\..\UI\MainToolBar.xaml"              this.branchList.MouseLeftButtonUp += new System.Windows.Input.MouseButtonEventHandler(this.branchList_MouseLeftButtonUp);                            #line default              #line hidden              return;              case 5:              this.tagList = ((System.Windows.Controls.ListBox)(target));                            #line 56 "..\..\..\UI\MainToolBar.xaml"              this.tagList.MouseLeftButtonUp += new System.Windows.Input.MouseButtonEventHandler(this.tagList_MouseLeftButtonUp);                            #line default              #line hidden              return;              case 6:              this.checkBox1 = ((System.Windows.Controls.CheckBox)(target));                            #line 58 "..\..\..\UI\MainToolBar.xaml"              this.checkBox1.Click += new System.Windows.RoutedEventHandler(this.checkBox1_Click);                            #line default              #line hidden              return;              case 7:              this.lableView = ((System.Windows.Controls.Label)(target));              return;              case 8:              this.txtSearch = ((System.Windows.Controls.TextBox)(target));                            #line 65 "..\..\..\UI\MainToolBar.xaml"              this.txtSearch.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.txtSearch_TextChanged);                            #line default              #line hidden                            #line 65 "..\..\..\UI\MainToolBar.xaml"              this.txtSearch.PreviewKeyDown += new System.Windows.Input.KeyEventHandler(this.txtSearch_PreviewKeyDown);                            #line default              #line hidden                            #line 65 "..\..\..\UI\MainToolBar.xaml"              this.txtSearch.PreviewMouseDown += new System.Windows.Input.MouseButtonEventHandler(this.txtSearch_PreviewMouseDown);                            #line default              #line hidden              return;              case 9:              this.lstSearch = ((System.Windows.Controls.ListBox)(target));                            #line 66 "..\..\..\UI\MainToolBar.xaml"              this.lstSearch.PreviewKeyDown += new System.Windows.Input.KeyEventHandler(this.lstSearch_PreviewKeyDown);                            #line default              #line hidden                            #line 66 "..\..\..\UI\MainToolBar.xaml"              this.lstSearch.MouseDoubleClick += new System.Windows.Input.MouseButtonEventHandler(this.lstSearch_MouseDoubleClick);                            #line default              #line hidden              return;              case 10:              this.btnCompare = ((System.Windows.Controls.Button)(target));                            #line 67 "..\..\..\UI\MainToolBar.xaml"              this.btnCompare.Click += new System.Windows.RoutedEventHandler(this.btnCompare_Click);                            #line default              #line hidden              return;              case 11:              this.txtCommit1 = ((System.Windows.Controls.TextBlock)(target));              return;              case 12:              this.txtCommit2 = ((System.Windows.Controls.TextBlock)(target));              return;              case 13:              this.lblSelectedCommits = ((System.Windows.Controls.Label)(target));              return;              case 14:              this.btnGitBash = ((System.Windows.Controls.Button)(target));                            #line 71 "..\..\..\UI\MainToolBar.xaml"              this.btnGitBash.Click += new System.Windows.RoutedEventHandler(this.btnGitBash_Click);                            #line default              #line hidden              return;              case 15:              this.btnPendingChanges = ((System.Windows.Controls.Button)(target));                            #line 76 "..\..\..\UI\MainToolBar.xaml"              this.btnPendingChanges.Click += new System.Windows.RoutedEventHandler(this.btnPendingChanges_Click);                            #line default              #line hidden              return;              }
Magic Number,GitUI.UI,MainToolBar,C:\repos\yysun_git-tools\GitUI\UI\MainToolBar.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 39 "..\..\..\UI\MainToolBar.xaml"              ((System.Windows.Controls.Grid)(target)).PreviewKeyDown += new System.Windows.Input.KeyEventHandler(this.Grid_PreviewKeyDown);                            #line default              #line hidden              return;              case 2:              this.label1 = ((System.Windows.Controls.Label)(target));              return;              case 3:              this.label2 = ((System.Windows.Controls.Label)(target));              return;              case 4:              this.branchList = ((System.Windows.Controls.ListBox)(target));                            #line 52 "..\..\..\UI\MainToolBar.xaml"              this.branchList.MouseLeftButtonUp += new System.Windows.Input.MouseButtonEventHandler(this.branchList_MouseLeftButtonUp);                            #line default              #line hidden              return;              case 5:              this.tagList = ((System.Windows.Controls.ListBox)(target));                            #line 56 "..\..\..\UI\MainToolBar.xaml"              this.tagList.MouseLeftButtonUp += new System.Windows.Input.MouseButtonEventHandler(this.tagList_MouseLeftButtonUp);                            #line default              #line hidden              return;              case 6:              this.checkBox1 = ((System.Windows.Controls.CheckBox)(target));                            #line 58 "..\..\..\UI\MainToolBar.xaml"              this.checkBox1.Click += new System.Windows.RoutedEventHandler(this.checkBox1_Click);                            #line default              #line hidden              return;              case 7:              this.lableView = ((System.Windows.Controls.Label)(target));              return;              case 8:              this.txtSearch = ((System.Windows.Controls.TextBox)(target));                            #line 65 "..\..\..\UI\MainToolBar.xaml"              this.txtSearch.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.txtSearch_TextChanged);                            #line default              #line hidden                            #line 65 "..\..\..\UI\MainToolBar.xaml"              this.txtSearch.PreviewKeyDown += new System.Windows.Input.KeyEventHandler(this.txtSearch_PreviewKeyDown);                            #line default              #line hidden                            #line 65 "..\..\..\UI\MainToolBar.xaml"              this.txtSearch.PreviewMouseDown += new System.Windows.Input.MouseButtonEventHandler(this.txtSearch_PreviewMouseDown);                            #line default              #line hidden              return;              case 9:              this.lstSearch = ((System.Windows.Controls.ListBox)(target));                            #line 66 "..\..\..\UI\MainToolBar.xaml"              this.lstSearch.PreviewKeyDown += new System.Windows.Input.KeyEventHandler(this.lstSearch_PreviewKeyDown);                            #line default              #line hidden                            #line 66 "..\..\..\UI\MainToolBar.xaml"              this.lstSearch.MouseDoubleClick += new System.Windows.Input.MouseButtonEventHandler(this.lstSearch_MouseDoubleClick);                            #line default              #line hidden              return;              case 10:              this.btnCompare = ((System.Windows.Controls.Button)(target));                            #line 67 "..\..\..\UI\MainToolBar.xaml"              this.btnCompare.Click += new System.Windows.RoutedEventHandler(this.btnCompare_Click);                            #line default              #line hidden              return;              case 11:              this.txtCommit1 = ((System.Windows.Controls.TextBlock)(target));              return;              case 12:              this.txtCommit2 = ((System.Windows.Controls.TextBlock)(target));              return;              case 13:              this.lblSelectedCommits = ((System.Windows.Controls.Label)(target));              return;              case 14:              this.btnGitBash = ((System.Windows.Controls.Button)(target));                            #line 71 "..\..\..\UI\MainToolBar.xaml"              this.btnGitBash.Click += new System.Windows.RoutedEventHandler(this.btnGitBash_Click);                            #line default              #line hidden              return;              case 15:              this.btnPendingChanges = ((System.Windows.Controls.Button)(target));                            #line 76 "..\..\..\UI\MainToolBar.xaml"              this.btnPendingChanges.Click += new System.Windows.RoutedEventHandler(this.btnPendingChanges_Click);                            #line default              #line hidden              return;              }
Magic Number,GitUI.UI,MainToolBar,C:\repos\yysun_git-tools\GitUI\UI\MainToolBar.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 39 "..\..\..\UI\MainToolBar.xaml"              ((System.Windows.Controls.Grid)(target)).PreviewKeyDown += new System.Windows.Input.KeyEventHandler(this.Grid_PreviewKeyDown);                            #line default              #line hidden              return;              case 2:              this.label1 = ((System.Windows.Controls.Label)(target));              return;              case 3:              this.label2 = ((System.Windows.Controls.Label)(target));              return;              case 4:              this.branchList = ((System.Windows.Controls.ListBox)(target));                            #line 52 "..\..\..\UI\MainToolBar.xaml"              this.branchList.MouseLeftButtonUp += new System.Windows.Input.MouseButtonEventHandler(this.branchList_MouseLeftButtonUp);                            #line default              #line hidden              return;              case 5:              this.tagList = ((System.Windows.Controls.ListBox)(target));                            #line 56 "..\..\..\UI\MainToolBar.xaml"              this.tagList.MouseLeftButtonUp += new System.Windows.Input.MouseButtonEventHandler(this.tagList_MouseLeftButtonUp);                            #line default              #line hidden              return;              case 6:              this.checkBox1 = ((System.Windows.Controls.CheckBox)(target));                            #line 58 "..\..\..\UI\MainToolBar.xaml"              this.checkBox1.Click += new System.Windows.RoutedEventHandler(this.checkBox1_Click);                            #line default              #line hidden              return;              case 7:              this.lableView = ((System.Windows.Controls.Label)(target));              return;              case 8:              this.txtSearch = ((System.Windows.Controls.TextBox)(target));                            #line 65 "..\..\..\UI\MainToolBar.xaml"              this.txtSearch.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.txtSearch_TextChanged);                            #line default              #line hidden                            #line 65 "..\..\..\UI\MainToolBar.xaml"              this.txtSearch.PreviewKeyDown += new System.Windows.Input.KeyEventHandler(this.txtSearch_PreviewKeyDown);                            #line default              #line hidden                            #line 65 "..\..\..\UI\MainToolBar.xaml"              this.txtSearch.PreviewMouseDown += new System.Windows.Input.MouseButtonEventHandler(this.txtSearch_PreviewMouseDown);                            #line default              #line hidden              return;              case 9:              this.lstSearch = ((System.Windows.Controls.ListBox)(target));                            #line 66 "..\..\..\UI\MainToolBar.xaml"              this.lstSearch.PreviewKeyDown += new System.Windows.Input.KeyEventHandler(this.lstSearch_PreviewKeyDown);                            #line default              #line hidden                            #line 66 "..\..\..\UI\MainToolBar.xaml"              this.lstSearch.MouseDoubleClick += new System.Windows.Input.MouseButtonEventHandler(this.lstSearch_MouseDoubleClick);                            #line default              #line hidden              return;              case 10:              this.btnCompare = ((System.Windows.Controls.Button)(target));                            #line 67 "..\..\..\UI\MainToolBar.xaml"              this.btnCompare.Click += new System.Windows.RoutedEventHandler(this.btnCompare_Click);                            #line default              #line hidden              return;              case 11:              this.txtCommit1 = ((System.Windows.Controls.TextBlock)(target));              return;              case 12:              this.txtCommit2 = ((System.Windows.Controls.TextBlock)(target));              return;              case 13:              this.lblSelectedCommits = ((System.Windows.Controls.Label)(target));              return;              case 14:              this.btnGitBash = ((System.Windows.Controls.Button)(target));                            #line 71 "..\..\..\UI\MainToolBar.xaml"              this.btnGitBash.Click += new System.Windows.RoutedEventHandler(this.btnGitBash_Click);                            #line default              #line hidden              return;              case 15:              this.btnPendingChanges = ((System.Windows.Controls.Button)(target));                            #line 76 "..\..\..\UI\MainToolBar.xaml"              this.btnPendingChanges.Click += new System.Windows.RoutedEventHandler(this.btnPendingChanges_Click);                            #line default              #line hidden              return;              }
Magic Number,GitUI.UI,MainToolBar,C:\repos\yysun_git-tools\GitUI\UI\MainToolBar.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 39 "..\..\..\UI\MainToolBar.xaml"              ((System.Windows.Controls.Grid)(target)).PreviewKeyDown += new System.Windows.Input.KeyEventHandler(this.Grid_PreviewKeyDown);                            #line default              #line hidden              return;              case 2:              this.label1 = ((System.Windows.Controls.Label)(target));              return;              case 3:              this.label2 = ((System.Windows.Controls.Label)(target));              return;              case 4:              this.branchList = ((System.Windows.Controls.ListBox)(target));                            #line 52 "..\..\..\UI\MainToolBar.xaml"              this.branchList.MouseLeftButtonUp += new System.Windows.Input.MouseButtonEventHandler(this.branchList_MouseLeftButtonUp);                            #line default              #line hidden              return;              case 5:              this.tagList = ((System.Windows.Controls.ListBox)(target));                            #line 56 "..\..\..\UI\MainToolBar.xaml"              this.tagList.MouseLeftButtonUp += new System.Windows.Input.MouseButtonEventHandler(this.tagList_MouseLeftButtonUp);                            #line default              #line hidden              return;              case 6:              this.checkBox1 = ((System.Windows.Controls.CheckBox)(target));                            #line 58 "..\..\..\UI\MainToolBar.xaml"              this.checkBox1.Click += new System.Windows.RoutedEventHandler(this.checkBox1_Click);                            #line default              #line hidden              return;              case 7:              this.lableView = ((System.Windows.Controls.Label)(target));              return;              case 8:              this.txtSearch = ((System.Windows.Controls.TextBox)(target));                            #line 65 "..\..\..\UI\MainToolBar.xaml"              this.txtSearch.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.txtSearch_TextChanged);                            #line default              #line hidden                            #line 65 "..\..\..\UI\MainToolBar.xaml"              this.txtSearch.PreviewKeyDown += new System.Windows.Input.KeyEventHandler(this.txtSearch_PreviewKeyDown);                            #line default              #line hidden                            #line 65 "..\..\..\UI\MainToolBar.xaml"              this.txtSearch.PreviewMouseDown += new System.Windows.Input.MouseButtonEventHandler(this.txtSearch_PreviewMouseDown);                            #line default              #line hidden              return;              case 9:              this.lstSearch = ((System.Windows.Controls.ListBox)(target));                            #line 66 "..\..\..\UI\MainToolBar.xaml"              this.lstSearch.PreviewKeyDown += new System.Windows.Input.KeyEventHandler(this.lstSearch_PreviewKeyDown);                            #line default              #line hidden                            #line 66 "..\..\..\UI\MainToolBar.xaml"              this.lstSearch.MouseDoubleClick += new System.Windows.Input.MouseButtonEventHandler(this.lstSearch_MouseDoubleClick);                            #line default              #line hidden              return;              case 10:              this.btnCompare = ((System.Windows.Controls.Button)(target));                            #line 67 "..\..\..\UI\MainToolBar.xaml"              this.btnCompare.Click += new System.Windows.RoutedEventHandler(this.btnCompare_Click);                            #line default              #line hidden              return;              case 11:              this.txtCommit1 = ((System.Windows.Controls.TextBlock)(target));              return;              case 12:              this.txtCommit2 = ((System.Windows.Controls.TextBlock)(target));              return;              case 13:              this.lblSelectedCommits = ((System.Windows.Controls.Label)(target));              return;              case 14:              this.btnGitBash = ((System.Windows.Controls.Button)(target));                            #line 71 "..\..\..\UI\MainToolBar.xaml"              this.btnGitBash.Click += new System.Windows.RoutedEventHandler(this.btnGitBash_Click);                            #line default              #line hidden              return;              case 15:              this.btnPendingChanges = ((System.Windows.Controls.Button)(target));                            #line 76 "..\..\..\UI\MainToolBar.xaml"              this.btnPendingChanges.Click += new System.Windows.RoutedEventHandler(this.btnPendingChanges_Click);                            #line default              #line hidden              return;              }
Magic Number,GitUI.UI,MainToolBar,C:\repos\yysun_git-tools\GitUI\UI\MainToolBar.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 39 "..\..\..\UI\MainToolBar.xaml"              ((System.Windows.Controls.Grid)(target)).PreviewKeyDown += new System.Windows.Input.KeyEventHandler(this.Grid_PreviewKeyDown);                            #line default              #line hidden              return;              case 2:              this.label1 = ((System.Windows.Controls.Label)(target));              return;              case 3:              this.label2 = ((System.Windows.Controls.Label)(target));              return;              case 4:              this.branchList = ((System.Windows.Controls.ListBox)(target));                            #line 52 "..\..\..\UI\MainToolBar.xaml"              this.branchList.MouseLeftButtonUp += new System.Windows.Input.MouseButtonEventHandler(this.branchList_MouseLeftButtonUp);                            #line default              #line hidden              return;              case 5:              this.tagList = ((System.Windows.Controls.ListBox)(target));                            #line 56 "..\..\..\UI\MainToolBar.xaml"              this.tagList.MouseLeftButtonUp += new System.Windows.Input.MouseButtonEventHandler(this.tagList_MouseLeftButtonUp);                            #line default              #line hidden              return;              case 6:              this.checkBox1 = ((System.Windows.Controls.CheckBox)(target));                            #line 58 "..\..\..\UI\MainToolBar.xaml"              this.checkBox1.Click += new System.Windows.RoutedEventHandler(this.checkBox1_Click);                            #line default              #line hidden              return;              case 7:              this.lableView = ((System.Windows.Controls.Label)(target));              return;              case 8:              this.txtSearch = ((System.Windows.Controls.TextBox)(target));                            #line 65 "..\..\..\UI\MainToolBar.xaml"              this.txtSearch.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.txtSearch_TextChanged);                            #line default              #line hidden                            #line 65 "..\..\..\UI\MainToolBar.xaml"              this.txtSearch.PreviewKeyDown += new System.Windows.Input.KeyEventHandler(this.txtSearch_PreviewKeyDown);                            #line default              #line hidden                            #line 65 "..\..\..\UI\MainToolBar.xaml"              this.txtSearch.PreviewMouseDown += new System.Windows.Input.MouseButtonEventHandler(this.txtSearch_PreviewMouseDown);                            #line default              #line hidden              return;              case 9:              this.lstSearch = ((System.Windows.Controls.ListBox)(target));                            #line 66 "..\..\..\UI\MainToolBar.xaml"              this.lstSearch.PreviewKeyDown += new System.Windows.Input.KeyEventHandler(this.lstSearch_PreviewKeyDown);                            #line default              #line hidden                            #line 66 "..\..\..\UI\MainToolBar.xaml"              this.lstSearch.MouseDoubleClick += new System.Windows.Input.MouseButtonEventHandler(this.lstSearch_MouseDoubleClick);                            #line default              #line hidden              return;              case 10:              this.btnCompare = ((System.Windows.Controls.Button)(target));                            #line 67 "..\..\..\UI\MainToolBar.xaml"              this.btnCompare.Click += new System.Windows.RoutedEventHandler(this.btnCompare_Click);                            #line default              #line hidden              return;              case 11:              this.txtCommit1 = ((System.Windows.Controls.TextBlock)(target));              return;              case 12:              this.txtCommit2 = ((System.Windows.Controls.TextBlock)(target));              return;              case 13:              this.lblSelectedCommits = ((System.Windows.Controls.Label)(target));              return;              case 14:              this.btnGitBash = ((System.Windows.Controls.Button)(target));                            #line 71 "..\..\..\UI\MainToolBar.xaml"              this.btnGitBash.Click += new System.Windows.RoutedEventHandler(this.btnGitBash_Click);                            #line default              #line hidden              return;              case 15:              this.btnPendingChanges = ((System.Windows.Controls.Button)(target));                            #line 76 "..\..\..\UI\MainToolBar.xaml"              this.btnPendingChanges.Click += new System.Windows.RoutedEventHandler(this.btnPendingChanges_Click);                            #line default              #line hidden              return;              }
Magic Number,GitUI.UI,MainToolBar,C:\repos\yysun_git-tools\GitUI\UI\MainToolBar.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 39 "..\..\..\UI\MainToolBar.xaml"              ((System.Windows.Controls.Grid)(target)).PreviewKeyDown += new System.Windows.Input.KeyEventHandler(this.Grid_PreviewKeyDown);                            #line default              #line hidden              return;              case 2:              this.label1 = ((System.Windows.Controls.Label)(target));              return;              case 3:              this.label2 = ((System.Windows.Controls.Label)(target));              return;              case 4:              this.branchList = ((System.Windows.Controls.ListBox)(target));                            #line 52 "..\..\..\UI\MainToolBar.xaml"              this.branchList.MouseLeftButtonUp += new System.Windows.Input.MouseButtonEventHandler(this.branchList_MouseLeftButtonUp);                            #line default              #line hidden              return;              case 5:              this.tagList = ((System.Windows.Controls.ListBox)(target));                            #line 56 "..\..\..\UI\MainToolBar.xaml"              this.tagList.MouseLeftButtonUp += new System.Windows.Input.MouseButtonEventHandler(this.tagList_MouseLeftButtonUp);                            #line default              #line hidden              return;              case 6:              this.checkBox1 = ((System.Windows.Controls.CheckBox)(target));                            #line 58 "..\..\..\UI\MainToolBar.xaml"              this.checkBox1.Click += new System.Windows.RoutedEventHandler(this.checkBox1_Click);                            #line default              #line hidden              return;              case 7:              this.lableView = ((System.Windows.Controls.Label)(target));              return;              case 8:              this.txtSearch = ((System.Windows.Controls.TextBox)(target));                            #line 65 "..\..\..\UI\MainToolBar.xaml"              this.txtSearch.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.txtSearch_TextChanged);                            #line default              #line hidden                            #line 65 "..\..\..\UI\MainToolBar.xaml"              this.txtSearch.PreviewKeyDown += new System.Windows.Input.KeyEventHandler(this.txtSearch_PreviewKeyDown);                            #line default              #line hidden                            #line 65 "..\..\..\UI\MainToolBar.xaml"              this.txtSearch.PreviewMouseDown += new System.Windows.Input.MouseButtonEventHandler(this.txtSearch_PreviewMouseDown);                            #line default              #line hidden              return;              case 9:              this.lstSearch = ((System.Windows.Controls.ListBox)(target));                            #line 66 "..\..\..\UI\MainToolBar.xaml"              this.lstSearch.PreviewKeyDown += new System.Windows.Input.KeyEventHandler(this.lstSearch_PreviewKeyDown);                            #line default              #line hidden                            #line 66 "..\..\..\UI\MainToolBar.xaml"              this.lstSearch.MouseDoubleClick += new System.Windows.Input.MouseButtonEventHandler(this.lstSearch_MouseDoubleClick);                            #line default              #line hidden              return;              case 10:              this.btnCompare = ((System.Windows.Controls.Button)(target));                            #line 67 "..\..\..\UI\MainToolBar.xaml"              this.btnCompare.Click += new System.Windows.RoutedEventHandler(this.btnCompare_Click);                            #line default              #line hidden              return;              case 11:              this.txtCommit1 = ((System.Windows.Controls.TextBlock)(target));              return;              case 12:              this.txtCommit2 = ((System.Windows.Controls.TextBlock)(target));              return;              case 13:              this.lblSelectedCommits = ((System.Windows.Controls.Label)(target));              return;              case 14:              this.btnGitBash = ((System.Windows.Controls.Button)(target));                            #line 71 "..\..\..\UI\MainToolBar.xaml"              this.btnGitBash.Click += new System.Windows.RoutedEventHandler(this.btnGitBash_Click);                            #line default              #line hidden              return;              case 15:              this.btnPendingChanges = ((System.Windows.Controls.Button)(target));                            #line 76 "..\..\..\UI\MainToolBar.xaml"              this.btnPendingChanges.Click += new System.Windows.RoutedEventHandler(this.btnPendingChanges_Click);                            #line default              #line hidden              return;              }
Magic Number,GitUI.UI,PendingChanges,C:\repos\yysun_git-tools\GitUI\UI\PendingChanges.xaml.cs,dataGrid1_SelectionChanged,The following statement contains a magic number: Action act = () =>              {                  service.NoRefresh = true;                  try                  {                      //var ret = tracker.DiffFile(fileName);                      //ret = ret.Replace("\r"' "").Replace("\n"' "\r\n");                        //var tmpFileName = Path.ChangeExtension(Path.GetTempFileName()' ".diff");                      //File.WriteAllText(tmpFileName' ret);                        var tmpFileName = tracker.DiffFile(fileName);                      if (!string.IsNullOrWhiteSpace(tmpFileName) && File.Exists(tmpFileName))                      {                          if (new FileInfo(tmpFileName).Length > 2 * 1024 * 1024)                          {                              this.DiffEditor.Text = "File is too big to display: " + fileName;                          }                          else                          {                              diffLines = File.ReadAllLines(tmpFileName);                              this.ShowFile(tmpFileName);                          }                      }                  }                  catch (Exception ex)                  {                      //ShowStatusMessage(ex.Message);                      this.DiffEditor.Text = ex.Message;                  }                  service.NoRefresh = false;                };
Magic Number,GitUI.UI,PendingChanges,C:\repos\yysun_git-tools\GitUI\UI\PendingChanges.xaml.cs,dataGrid1_SelectionChanged,The following statement contains a magic number: Action act = () =>              {                  service.NoRefresh = true;                  try                  {                      //var ret = tracker.DiffFile(fileName);                      //ret = ret.Replace("\r"' "").Replace("\n"' "\r\n");                        //var tmpFileName = Path.ChangeExtension(Path.GetTempFileName()' ".diff");                      //File.WriteAllText(tmpFileName' ret);                        var tmpFileName = tracker.DiffFile(fileName);                      if (!string.IsNullOrWhiteSpace(tmpFileName) && File.Exists(tmpFileName))                      {                          if (new FileInfo(tmpFileName).Length > 2 * 1024 * 1024)                          {                              this.DiffEditor.Text = "File is too big to display: " + fileName;                          }                          else                          {                              diffLines = File.ReadAllLines(tmpFileName);                              this.ShowFile(tmpFileName);                          }                      }                  }                  catch (Exception ex)                  {                      //ShowStatusMessage(ex.Message);                      this.DiffEditor.Text = ex.Message;                  }                  service.NoRefresh = false;                };
Magic Number,GitUI.UI,PendingChanges,C:\repos\yysun_git-tools\GitUI\UI\PendingChanges.xaml.cs,dataGrid1_SelectionChanged,The following statement contains a magic number: Action act = () =>              {                  service.NoRefresh = true;                  try                  {                      //var ret = tracker.DiffFile(fileName);                      //ret = ret.Replace("\r"' "").Replace("\n"' "\r\n");                        //var tmpFileName = Path.ChangeExtension(Path.GetTempFileName()' ".diff");                      //File.WriteAllText(tmpFileName' ret);                        var tmpFileName = tracker.DiffFile(fileName);                      if (!string.IsNullOrWhiteSpace(tmpFileName) && File.Exists(tmpFileName))                      {                          if (new FileInfo(tmpFileName).Length > 2 * 1024 * 1024)                          {                              this.DiffEditor.Text = "File is too big to display: " + fileName;                          }                          else                          {                              diffLines = File.ReadAllLines(tmpFileName);                              this.ShowFile(tmpFileName);                          }                      }                  }                  catch (Exception ex)                  {                      //ShowStatusMessage(ex.Message);                      this.DiffEditor.Text = ex.Message;                  }                  service.NoRefresh = false;                };
Magic Number,GitUI.UI,PendingChanges,C:\repos\yysun_git-tools\GitUI\UI\PendingChanges.xaml.cs,ShowSelectedFile,The following statement contains a magic number: try              {                  string tmpFileName = "";                    var status = tracker.GetFileStatus(fileName);                  if (status == GitFileStatus.NotControlled || status == GitFileStatus.New)                  {                      tmpFileName = Path.Combine(tracker.WorkingDirectory' fileName);                  }                  else                  {                      var diffAgainstIndex = this.activeListView == this.listStaged;                      tmpFileName = tracker.DiffFileAdv(fileName' diffAgainstIndex);                                        }                  if (!string.IsNullOrWhiteSpace(tmpFileName) && File.Exists(tmpFileName))                  {                      if (tracker.IsBinaryFile(tmpFileName))                      {                          this.DiffEditor.Text  = $"File \"{fileName}\" is binary that cannot be displayed.";                      }                      else if (new FileInfo(tmpFileName).Length > 2 * 1024 * 1024)                      {                          this.DiffEditor.Text = "File is too big to display: " + fileName;                      }                      else                      {                          diffLines = File.ReadAllLines(tmpFileName);                          this.ShowFile(tmpFileName);                      }                  }              }              catch (Exception ex)              {                  string message = ex.Message;                  ShowStatusMessage(message);              }
Magic Number,GitUI.UI,PendingChanges,C:\repos\yysun_git-tools\GitUI\UI\PendingChanges.xaml.cs,ShowSelectedFile,The following statement contains a magic number: try              {                  string tmpFileName = "";                    var status = tracker.GetFileStatus(fileName);                  if (status == GitFileStatus.NotControlled || status == GitFileStatus.New)                  {                      tmpFileName = Path.Combine(tracker.WorkingDirectory' fileName);                  }                  else                  {                      var diffAgainstIndex = this.activeListView == this.listStaged;                      tmpFileName = tracker.DiffFileAdv(fileName' diffAgainstIndex);                                        }                  if (!string.IsNullOrWhiteSpace(tmpFileName) && File.Exists(tmpFileName))                  {                      if (tracker.IsBinaryFile(tmpFileName))                      {                          this.DiffEditor.Text  = $"File \"{fileName}\" is binary that cannot be displayed.";                      }                      else if (new FileInfo(tmpFileName).Length > 2 * 1024 * 1024)                      {                          this.DiffEditor.Text = "File is too big to display: " + fileName;                      }                      else                      {                          diffLines = File.ReadAllLines(tmpFileName);                          this.ShowFile(tmpFileName);                      }                  }              }              catch (Exception ex)              {                  string message = ex.Message;                  ShowStatusMessage(message);              }
Magic Number,GitUI.UI,PendingChanges,C:\repos\yysun_git-tools\GitUI\UI\PendingChanges.xaml.cs,ShowSelectedFile,The following statement contains a magic number: try              {                  string tmpFileName = "";                    var status = tracker.GetFileStatus(fileName);                  if (status == GitFileStatus.NotControlled || status == GitFileStatus.New)                  {                      tmpFileName = Path.Combine(tracker.WorkingDirectory' fileName);                  }                  else                  {                      var diffAgainstIndex = this.activeListView == this.listStaged;                      tmpFileName = tracker.DiffFileAdv(fileName' diffAgainstIndex);                                        }                  if (!string.IsNullOrWhiteSpace(tmpFileName) && File.Exists(tmpFileName))                  {                      if (tracker.IsBinaryFile(tmpFileName))                      {                          this.DiffEditor.Text  = $"File \"{fileName}\" is binary that cannot be displayed.";                      }                      else if (new FileInfo(tmpFileName).Length > 2 * 1024 * 1024)                      {                          this.DiffEditor.Text = "File is too big to display: " + fileName;                      }                      else                      {                          diffLines = File.ReadAllLines(tmpFileName);                          this.ShowFile(tmpFileName);                      }                  }              }              catch (Exception ex)              {                  string message = ex.Message;                  ShowStatusMessage(message);              }
Magic Number,GitScc.UI,CommitBox,C:\repos\yysun_git-tools\GitUI\UI\CommitBox.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 38 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.CheckoutCommit_Click);                            #line default              #line hidden              return;              case 2:                            #line 40 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.NewTag_Click);                            #line default              #line hidden              return;              case 3:                            #line 41 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.NewBranch_Click);                            #line default              #line hidden              return;              case 4:                            #line 43 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.CherryPick_Click);                            #line default              #line hidden              return;              case 5:                            #line 45 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.Export_Click);                            #line default              #line hidden              return;              case 6:                            #line 47 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.CopyId_Click);                            #line default              #line hidden              return;              case 7:              this.root = ((System.Windows.Controls.Grid)(target));                            #line 50 "..\..\..\UI\CommitBox.xaml"              this.root.MouseEnter += new System.Windows.Input.MouseEventHandler(this.root_MouseEnter);                            #line default              #line hidden                            #line 50 "..\..\..\UI\CommitBox.xaml"              this.root.MouseLeave += new System.Windows.Input.MouseEventHandler(this.root_MouseLeave);                            #line default              #line hidden                            #line 50 "..\..\..\UI\CommitBox.xaml"              this.root.MouseLeftButtonUp += new System.Windows.Input.MouseButtonEventHandler(this.root_MouseLeftButtonUp);                            #line default              #line hidden              return;              case 8:              this.VisualStateGroup = ((System.Windows.VisualStateGroup)(target));              return;              case 9:              this.NormalState = ((System.Windows.VisualState)(target));              return;              case 10:              this.MouseOverState = ((System.Windows.VisualState)(target));              return;              case 11:              this.VisualStateGroup1 = ((System.Windows.VisualStateGroup)(target));              return;              case 12:              this.SelectedSate = ((System.Windows.VisualState)(target));              return;              case 13:              this.NotSelectedState = ((System.Windows.VisualState)(target));              return;              case 14:              this.rectangle1 = ((System.Windows.Shapes.Rectangle)(target));              return;              case 15:              this.scrollViewer = ((System.Windows.Controls.ScrollViewer)(target));              return;              case 16:              this.txtComment = ((System.Windows.Controls.TextBlock)(target));              return;              case 17:              this.txtId = ((System.Windows.Controls.TextBlock)(target));              return;              case 18:              this.txtAuthor = ((System.Windows.Controls.TextBlock)(target));              return;              case 19:              this.txtDate = ((System.Windows.Controls.TextBlock)(target));              return;              case 20:                            #line 114 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.Button_Click);                            #line default              #line hidden              return;              }
Magic Number,GitScc.UI,CommitBox,C:\repos\yysun_git-tools\GitUI\UI\CommitBox.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 38 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.CheckoutCommit_Click);                            #line default              #line hidden              return;              case 2:                            #line 40 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.NewTag_Click);                            #line default              #line hidden              return;              case 3:                            #line 41 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.NewBranch_Click);                            #line default              #line hidden              return;              case 4:                            #line 43 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.CherryPick_Click);                            #line default              #line hidden              return;              case 5:                            #line 45 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.Export_Click);                            #line default              #line hidden              return;              case 6:                            #line 47 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.CopyId_Click);                            #line default              #line hidden              return;              case 7:              this.root = ((System.Windows.Controls.Grid)(target));                            #line 50 "..\..\..\UI\CommitBox.xaml"              this.root.MouseEnter += new System.Windows.Input.MouseEventHandler(this.root_MouseEnter);                            #line default              #line hidden                            #line 50 "..\..\..\UI\CommitBox.xaml"              this.root.MouseLeave += new System.Windows.Input.MouseEventHandler(this.root_MouseLeave);                            #line default              #line hidden                            #line 50 "..\..\..\UI\CommitBox.xaml"              this.root.MouseLeftButtonUp += new System.Windows.Input.MouseButtonEventHandler(this.root_MouseLeftButtonUp);                            #line default              #line hidden              return;              case 8:              this.VisualStateGroup = ((System.Windows.VisualStateGroup)(target));              return;              case 9:              this.NormalState = ((System.Windows.VisualState)(target));              return;              case 10:              this.MouseOverState = ((System.Windows.VisualState)(target));              return;              case 11:              this.VisualStateGroup1 = ((System.Windows.VisualStateGroup)(target));              return;              case 12:              this.SelectedSate = ((System.Windows.VisualState)(target));              return;              case 13:              this.NotSelectedState = ((System.Windows.VisualState)(target));              return;              case 14:              this.rectangle1 = ((System.Windows.Shapes.Rectangle)(target));              return;              case 15:              this.scrollViewer = ((System.Windows.Controls.ScrollViewer)(target));              return;              case 16:              this.txtComment = ((System.Windows.Controls.TextBlock)(target));              return;              case 17:              this.txtId = ((System.Windows.Controls.TextBlock)(target));              return;              case 18:              this.txtAuthor = ((System.Windows.Controls.TextBlock)(target));              return;              case 19:              this.txtDate = ((System.Windows.Controls.TextBlock)(target));              return;              case 20:                            #line 114 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.Button_Click);                            #line default              #line hidden              return;              }
Magic Number,GitScc.UI,CommitBox,C:\repos\yysun_git-tools\GitUI\UI\CommitBox.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 38 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.CheckoutCommit_Click);                            #line default              #line hidden              return;              case 2:                            #line 40 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.NewTag_Click);                            #line default              #line hidden              return;              case 3:                            #line 41 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.NewBranch_Click);                            #line default              #line hidden              return;              case 4:                            #line 43 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.CherryPick_Click);                            #line default              #line hidden              return;              case 5:                            #line 45 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.Export_Click);                            #line default              #line hidden              return;              case 6:                            #line 47 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.CopyId_Click);                            #line default              #line hidden              return;              case 7:              this.root = ((System.Windows.Controls.Grid)(target));                            #line 50 "..\..\..\UI\CommitBox.xaml"              this.root.MouseEnter += new System.Windows.Input.MouseEventHandler(this.root_MouseEnter);                            #line default              #line hidden                            #line 50 "..\..\..\UI\CommitBox.xaml"              this.root.MouseLeave += new System.Windows.Input.MouseEventHandler(this.root_MouseLeave);                            #line default              #line hidden                            #line 50 "..\..\..\UI\CommitBox.xaml"              this.root.MouseLeftButtonUp += new System.Windows.Input.MouseButtonEventHandler(this.root_MouseLeftButtonUp);                            #line default              #line hidden              return;              case 8:              this.VisualStateGroup = ((System.Windows.VisualStateGroup)(target));              return;              case 9:              this.NormalState = ((System.Windows.VisualState)(target));              return;              case 10:              this.MouseOverState = ((System.Windows.VisualState)(target));              return;              case 11:              this.VisualStateGroup1 = ((System.Windows.VisualStateGroup)(target));              return;              case 12:              this.SelectedSate = ((System.Windows.VisualState)(target));              return;              case 13:              this.NotSelectedState = ((System.Windows.VisualState)(target));              return;              case 14:              this.rectangle1 = ((System.Windows.Shapes.Rectangle)(target));              return;              case 15:              this.scrollViewer = ((System.Windows.Controls.ScrollViewer)(target));              return;              case 16:              this.txtComment = ((System.Windows.Controls.TextBlock)(target));              return;              case 17:              this.txtId = ((System.Windows.Controls.TextBlock)(target));              return;              case 18:              this.txtAuthor = ((System.Windows.Controls.TextBlock)(target));              return;              case 19:              this.txtDate = ((System.Windows.Controls.TextBlock)(target));              return;              case 20:                            #line 114 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.Button_Click);                            #line default              #line hidden              return;              }
Magic Number,GitScc.UI,CommitBox,C:\repos\yysun_git-tools\GitUI\UI\CommitBox.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 38 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.CheckoutCommit_Click);                            #line default              #line hidden              return;              case 2:                            #line 40 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.NewTag_Click);                            #line default              #line hidden              return;              case 3:                            #line 41 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.NewBranch_Click);                            #line default              #line hidden              return;              case 4:                            #line 43 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.CherryPick_Click);                            #line default              #line hidden              return;              case 5:                            #line 45 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.Export_Click);                            #line default              #line hidden              return;              case 6:                            #line 47 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.CopyId_Click);                            #line default              #line hidden              return;              case 7:              this.root = ((System.Windows.Controls.Grid)(target));                            #line 50 "..\..\..\UI\CommitBox.xaml"              this.root.MouseEnter += new System.Windows.Input.MouseEventHandler(this.root_MouseEnter);                            #line default              #line hidden                            #line 50 "..\..\..\UI\CommitBox.xaml"              this.root.MouseLeave += new System.Windows.Input.MouseEventHandler(this.root_MouseLeave);                            #line default              #line hidden                            #line 50 "..\..\..\UI\CommitBox.xaml"              this.root.MouseLeftButtonUp += new System.Windows.Input.MouseButtonEventHandler(this.root_MouseLeftButtonUp);                            #line default              #line hidden              return;              case 8:              this.VisualStateGroup = ((System.Windows.VisualStateGroup)(target));              return;              case 9:              this.NormalState = ((System.Windows.VisualState)(target));              return;              case 10:              this.MouseOverState = ((System.Windows.VisualState)(target));              return;              case 11:              this.VisualStateGroup1 = ((System.Windows.VisualStateGroup)(target));              return;              case 12:              this.SelectedSate = ((System.Windows.VisualState)(target));              return;              case 13:              this.NotSelectedState = ((System.Windows.VisualState)(target));              return;              case 14:              this.rectangle1 = ((System.Windows.Shapes.Rectangle)(target));              return;              case 15:              this.scrollViewer = ((System.Windows.Controls.ScrollViewer)(target));              return;              case 16:              this.txtComment = ((System.Windows.Controls.TextBlock)(target));              return;              case 17:              this.txtId = ((System.Windows.Controls.TextBlock)(target));              return;              case 18:              this.txtAuthor = ((System.Windows.Controls.TextBlock)(target));              return;              case 19:              this.txtDate = ((System.Windows.Controls.TextBlock)(target));              return;              case 20:                            #line 114 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.Button_Click);                            #line default              #line hidden              return;              }
Magic Number,GitScc.UI,CommitBox,C:\repos\yysun_git-tools\GitUI\UI\CommitBox.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 38 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.CheckoutCommit_Click);                            #line default              #line hidden              return;              case 2:                            #line 40 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.NewTag_Click);                            #line default              #line hidden              return;              case 3:                            #line 41 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.NewBranch_Click);                            #line default              #line hidden              return;              case 4:                            #line 43 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.CherryPick_Click);                            #line default              #line hidden              return;              case 5:                            #line 45 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.Export_Click);                            #line default              #line hidden              return;              case 6:                            #line 47 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.CopyId_Click);                            #line default              #line hidden              return;              case 7:              this.root = ((System.Windows.Controls.Grid)(target));                            #line 50 "..\..\..\UI\CommitBox.xaml"              this.root.MouseEnter += new System.Windows.Input.MouseEventHandler(this.root_MouseEnter);                            #line default              #line hidden                            #line 50 "..\..\..\UI\CommitBox.xaml"              this.root.MouseLeave += new System.Windows.Input.MouseEventHandler(this.root_MouseLeave);                            #line default              #line hidden                            #line 50 "..\..\..\UI\CommitBox.xaml"              this.root.MouseLeftButtonUp += new System.Windows.Input.MouseButtonEventHandler(this.root_MouseLeftButtonUp);                            #line default              #line hidden              return;              case 8:              this.VisualStateGroup = ((System.Windows.VisualStateGroup)(target));              return;              case 9:              this.NormalState = ((System.Windows.VisualState)(target));              return;              case 10:              this.MouseOverState = ((System.Windows.VisualState)(target));              return;              case 11:              this.VisualStateGroup1 = ((System.Windows.VisualStateGroup)(target));              return;              case 12:              this.SelectedSate = ((System.Windows.VisualState)(target));              return;              case 13:              this.NotSelectedState = ((System.Windows.VisualState)(target));              return;              case 14:              this.rectangle1 = ((System.Windows.Shapes.Rectangle)(target));              return;              case 15:              this.scrollViewer = ((System.Windows.Controls.ScrollViewer)(target));              return;              case 16:              this.txtComment = ((System.Windows.Controls.TextBlock)(target));              return;              case 17:              this.txtId = ((System.Windows.Controls.TextBlock)(target));              return;              case 18:              this.txtAuthor = ((System.Windows.Controls.TextBlock)(target));              return;              case 19:              this.txtDate = ((System.Windows.Controls.TextBlock)(target));              return;              case 20:                            #line 114 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.Button_Click);                            #line default              #line hidden              return;              }
Magic Number,GitScc.UI,CommitBox,C:\repos\yysun_git-tools\GitUI\UI\CommitBox.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 38 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.CheckoutCommit_Click);                            #line default              #line hidden              return;              case 2:                            #line 40 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.NewTag_Click);                            #line default              #line hidden              return;              case 3:                            #line 41 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.NewBranch_Click);                            #line default              #line hidden              return;              case 4:                            #line 43 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.CherryPick_Click);                            #line default              #line hidden              return;              case 5:                            #line 45 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.Export_Click);                            #line default              #line hidden              return;              case 6:                            #line 47 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.CopyId_Click);                            #line default              #line hidden              return;              case 7:              this.root = ((System.Windows.Controls.Grid)(target));                            #line 50 "..\..\..\UI\CommitBox.xaml"              this.root.MouseEnter += new System.Windows.Input.MouseEventHandler(this.root_MouseEnter);                            #line default              #line hidden                            #line 50 "..\..\..\UI\CommitBox.xaml"              this.root.MouseLeave += new System.Windows.Input.MouseEventHandler(this.root_MouseLeave);                            #line default              #line hidden                            #line 50 "..\..\..\UI\CommitBox.xaml"              this.root.MouseLeftButtonUp += new System.Windows.Input.MouseButtonEventHandler(this.root_MouseLeftButtonUp);                            #line default              #line hidden              return;              case 8:              this.VisualStateGroup = ((System.Windows.VisualStateGroup)(target));              return;              case 9:              this.NormalState = ((System.Windows.VisualState)(target));              return;              case 10:              this.MouseOverState = ((System.Windows.VisualState)(target));              return;              case 11:              this.VisualStateGroup1 = ((System.Windows.VisualStateGroup)(target));              return;              case 12:              this.SelectedSate = ((System.Windows.VisualState)(target));              return;              case 13:              this.NotSelectedState = ((System.Windows.VisualState)(target));              return;              case 14:              this.rectangle1 = ((System.Windows.Shapes.Rectangle)(target));              return;              case 15:              this.scrollViewer = ((System.Windows.Controls.ScrollViewer)(target));              return;              case 16:              this.txtComment = ((System.Windows.Controls.TextBlock)(target));              return;              case 17:              this.txtId = ((System.Windows.Controls.TextBlock)(target));              return;              case 18:              this.txtAuthor = ((System.Windows.Controls.TextBlock)(target));              return;              case 19:              this.txtDate = ((System.Windows.Controls.TextBlock)(target));              return;              case 20:                            #line 114 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.Button_Click);                            #line default              #line hidden              return;              }
Magic Number,GitScc.UI,CommitBox,C:\repos\yysun_git-tools\GitUI\UI\CommitBox.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 38 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.CheckoutCommit_Click);                            #line default              #line hidden              return;              case 2:                            #line 40 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.NewTag_Click);                            #line default              #line hidden              return;              case 3:                            #line 41 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.NewBranch_Click);                            #line default              #line hidden              return;              case 4:                            #line 43 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.CherryPick_Click);                            #line default              #line hidden              return;              case 5:                            #line 45 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.Export_Click);                            #line default              #line hidden              return;              case 6:                            #line 47 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.CopyId_Click);                            #line default              #line hidden              return;              case 7:              this.root = ((System.Windows.Controls.Grid)(target));                            #line 50 "..\..\..\UI\CommitBox.xaml"              this.root.MouseEnter += new System.Windows.Input.MouseEventHandler(this.root_MouseEnter);                            #line default              #line hidden                            #line 50 "..\..\..\UI\CommitBox.xaml"              this.root.MouseLeave += new System.Windows.Input.MouseEventHandler(this.root_MouseLeave);                            #line default              #line hidden                            #line 50 "..\..\..\UI\CommitBox.xaml"              this.root.MouseLeftButtonUp += new System.Windows.Input.MouseButtonEventHandler(this.root_MouseLeftButtonUp);                            #line default              #line hidden              return;              case 8:              this.VisualStateGroup = ((System.Windows.VisualStateGroup)(target));              return;              case 9:              this.NormalState = ((System.Windows.VisualState)(target));              return;              case 10:              this.MouseOverState = ((System.Windows.VisualState)(target));              return;              case 11:              this.VisualStateGroup1 = ((System.Windows.VisualStateGroup)(target));              return;              case 12:              this.SelectedSate = ((System.Windows.VisualState)(target));              return;              case 13:              this.NotSelectedState = ((System.Windows.VisualState)(target));              return;              case 14:              this.rectangle1 = ((System.Windows.Shapes.Rectangle)(target));              return;              case 15:              this.scrollViewer = ((System.Windows.Controls.ScrollViewer)(target));              return;              case 16:              this.txtComment = ((System.Windows.Controls.TextBlock)(target));              return;              case 17:              this.txtId = ((System.Windows.Controls.TextBlock)(target));              return;              case 18:              this.txtAuthor = ((System.Windows.Controls.TextBlock)(target));              return;              case 19:              this.txtDate = ((System.Windows.Controls.TextBlock)(target));              return;              case 20:                            #line 114 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.Button_Click);                            #line default              #line hidden              return;              }
Magic Number,GitScc.UI,CommitBox,C:\repos\yysun_git-tools\GitUI\UI\CommitBox.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 38 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.CheckoutCommit_Click);                            #line default              #line hidden              return;              case 2:                            #line 40 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.NewTag_Click);                            #line default              #line hidden              return;              case 3:                            #line 41 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.NewBranch_Click);                            #line default              #line hidden              return;              case 4:                            #line 43 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.CherryPick_Click);                            #line default              #line hidden              return;              case 5:                            #line 45 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.Export_Click);                            #line default              #line hidden              return;              case 6:                            #line 47 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.CopyId_Click);                            #line default              #line hidden              return;              case 7:              this.root = ((System.Windows.Controls.Grid)(target));                            #line 50 "..\..\..\UI\CommitBox.xaml"              this.root.MouseEnter += new System.Windows.Input.MouseEventHandler(this.root_MouseEnter);                            #line default              #line hidden                            #line 50 "..\..\..\UI\CommitBox.xaml"              this.root.MouseLeave += new System.Windows.Input.MouseEventHandler(this.root_MouseLeave);                            #line default              #line hidden                            #line 50 "..\..\..\UI\CommitBox.xaml"              this.root.MouseLeftButtonUp += new System.Windows.Input.MouseButtonEventHandler(this.root_MouseLeftButtonUp);                            #line default              #line hidden              return;              case 8:              this.VisualStateGroup = ((System.Windows.VisualStateGroup)(target));              return;              case 9:              this.NormalState = ((System.Windows.VisualState)(target));              return;              case 10:              this.MouseOverState = ((System.Windows.VisualState)(target));              return;              case 11:              this.VisualStateGroup1 = ((System.Windows.VisualStateGroup)(target));              return;              case 12:              this.SelectedSate = ((System.Windows.VisualState)(target));              return;              case 13:              this.NotSelectedState = ((System.Windows.VisualState)(target));              return;              case 14:              this.rectangle1 = ((System.Windows.Shapes.Rectangle)(target));              return;              case 15:              this.scrollViewer = ((System.Windows.Controls.ScrollViewer)(target));              return;              case 16:              this.txtComment = ((System.Windows.Controls.TextBlock)(target));              return;              case 17:              this.txtId = ((System.Windows.Controls.TextBlock)(target));              return;              case 18:              this.txtAuthor = ((System.Windows.Controls.TextBlock)(target));              return;              case 19:              this.txtDate = ((System.Windows.Controls.TextBlock)(target));              return;              case 20:                            #line 114 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.Button_Click);                            #line default              #line hidden              return;              }
Magic Number,GitScc.UI,CommitBox,C:\repos\yysun_git-tools\GitUI\UI\CommitBox.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 38 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.CheckoutCommit_Click);                            #line default              #line hidden              return;              case 2:                            #line 40 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.NewTag_Click);                            #line default              #line hidden              return;              case 3:                            #line 41 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.NewBranch_Click);                            #line default              #line hidden              return;              case 4:                            #line 43 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.CherryPick_Click);                            #line default              #line hidden              return;              case 5:                            #line 45 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.Export_Click);                            #line default              #line hidden              return;              case 6:                            #line 47 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.CopyId_Click);                            #line default              #line hidden              return;              case 7:              this.root = ((System.Windows.Controls.Grid)(target));                            #line 50 "..\..\..\UI\CommitBox.xaml"              this.root.MouseEnter += new System.Windows.Input.MouseEventHandler(this.root_MouseEnter);                            #line default              #line hidden                            #line 50 "..\..\..\UI\CommitBox.xaml"              this.root.MouseLeave += new System.Windows.Input.MouseEventHandler(this.root_MouseLeave);                            #line default              #line hidden                            #line 50 "..\..\..\UI\CommitBox.xaml"              this.root.MouseLeftButtonUp += new System.Windows.Input.MouseButtonEventHandler(this.root_MouseLeftButtonUp);                            #line default              #line hidden              return;              case 8:              this.VisualStateGroup = ((System.Windows.VisualStateGroup)(target));              return;              case 9:              this.NormalState = ((System.Windows.VisualState)(target));              return;              case 10:              this.MouseOverState = ((System.Windows.VisualState)(target));              return;              case 11:              this.VisualStateGroup1 = ((System.Windows.VisualStateGroup)(target));              return;              case 12:              this.SelectedSate = ((System.Windows.VisualState)(target));              return;              case 13:              this.NotSelectedState = ((System.Windows.VisualState)(target));              return;              case 14:              this.rectangle1 = ((System.Windows.Shapes.Rectangle)(target));              return;              case 15:              this.scrollViewer = ((System.Windows.Controls.ScrollViewer)(target));              return;              case 16:              this.txtComment = ((System.Windows.Controls.TextBlock)(target));              return;              case 17:              this.txtId = ((System.Windows.Controls.TextBlock)(target));              return;              case 18:              this.txtAuthor = ((System.Windows.Controls.TextBlock)(target));              return;              case 19:              this.txtDate = ((System.Windows.Controls.TextBlock)(target));              return;              case 20:                            #line 114 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.Button_Click);                            #line default              #line hidden              return;              }
Magic Number,GitScc.UI,CommitBox,C:\repos\yysun_git-tools\GitUI\UI\CommitBox.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 38 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.CheckoutCommit_Click);                            #line default              #line hidden              return;              case 2:                            #line 40 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.NewTag_Click);                            #line default              #line hidden              return;              case 3:                            #line 41 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.NewBranch_Click);                            #line default              #line hidden              return;              case 4:                            #line 43 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.CherryPick_Click);                            #line default              #line hidden              return;              case 5:                            #line 45 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.Export_Click);                            #line default              #line hidden              return;              case 6:                            #line 47 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.CopyId_Click);                            #line default              #line hidden              return;              case 7:              this.root = ((System.Windows.Controls.Grid)(target));                            #line 50 "..\..\..\UI\CommitBox.xaml"              this.root.MouseEnter += new System.Windows.Input.MouseEventHandler(this.root_MouseEnter);                            #line default              #line hidden                            #line 50 "..\..\..\UI\CommitBox.xaml"              this.root.MouseLeave += new System.Windows.Input.MouseEventHandler(this.root_MouseLeave);                            #line default              #line hidden                            #line 50 "..\..\..\UI\CommitBox.xaml"              this.root.MouseLeftButtonUp += new System.Windows.Input.MouseButtonEventHandler(this.root_MouseLeftButtonUp);                            #line default              #line hidden              return;              case 8:              this.VisualStateGroup = ((System.Windows.VisualStateGroup)(target));              return;              case 9:              this.NormalState = ((System.Windows.VisualState)(target));              return;              case 10:              this.MouseOverState = ((System.Windows.VisualState)(target));              return;              case 11:              this.VisualStateGroup1 = ((System.Windows.VisualStateGroup)(target));              return;              case 12:              this.SelectedSate = ((System.Windows.VisualState)(target));              return;              case 13:              this.NotSelectedState = ((System.Windows.VisualState)(target));              return;              case 14:              this.rectangle1 = ((System.Windows.Shapes.Rectangle)(target));              return;              case 15:              this.scrollViewer = ((System.Windows.Controls.ScrollViewer)(target));              return;              case 16:              this.txtComment = ((System.Windows.Controls.TextBlock)(target));              return;              case 17:              this.txtId = ((System.Windows.Controls.TextBlock)(target));              return;              case 18:              this.txtAuthor = ((System.Windows.Controls.TextBlock)(target));              return;              case 19:              this.txtDate = ((System.Windows.Controls.TextBlock)(target));              return;              case 20:                            #line 114 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.Button_Click);                            #line default              #line hidden              return;              }
Magic Number,GitScc.UI,CommitBox,C:\repos\yysun_git-tools\GitUI\UI\CommitBox.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 38 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.CheckoutCommit_Click);                            #line default              #line hidden              return;              case 2:                            #line 40 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.NewTag_Click);                            #line default              #line hidden              return;              case 3:                            #line 41 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.NewBranch_Click);                            #line default              #line hidden              return;              case 4:                            #line 43 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.CherryPick_Click);                            #line default              #line hidden              return;              case 5:                            #line 45 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.Export_Click);                            #line default              #line hidden              return;              case 6:                            #line 47 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.CopyId_Click);                            #line default              #line hidden              return;              case 7:              this.root = ((System.Windows.Controls.Grid)(target));                            #line 50 "..\..\..\UI\CommitBox.xaml"              this.root.MouseEnter += new System.Windows.Input.MouseEventHandler(this.root_MouseEnter);                            #line default              #line hidden                            #line 50 "..\..\..\UI\CommitBox.xaml"              this.root.MouseLeave += new System.Windows.Input.MouseEventHandler(this.root_MouseLeave);                            #line default              #line hidden                            #line 50 "..\..\..\UI\CommitBox.xaml"              this.root.MouseLeftButtonUp += new System.Windows.Input.MouseButtonEventHandler(this.root_MouseLeftButtonUp);                            #line default              #line hidden              return;              case 8:              this.VisualStateGroup = ((System.Windows.VisualStateGroup)(target));              return;              case 9:              this.NormalState = ((System.Windows.VisualState)(target));              return;              case 10:              this.MouseOverState = ((System.Windows.VisualState)(target));              return;              case 11:              this.VisualStateGroup1 = ((System.Windows.VisualStateGroup)(target));              return;              case 12:              this.SelectedSate = ((System.Windows.VisualState)(target));              return;              case 13:              this.NotSelectedState = ((System.Windows.VisualState)(target));              return;              case 14:              this.rectangle1 = ((System.Windows.Shapes.Rectangle)(target));              return;              case 15:              this.scrollViewer = ((System.Windows.Controls.ScrollViewer)(target));              return;              case 16:              this.txtComment = ((System.Windows.Controls.TextBlock)(target));              return;              case 17:              this.txtId = ((System.Windows.Controls.TextBlock)(target));              return;              case 18:              this.txtAuthor = ((System.Windows.Controls.TextBlock)(target));              return;              case 19:              this.txtDate = ((System.Windows.Controls.TextBlock)(target));              return;              case 20:                            #line 114 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.Button_Click);                            #line default              #line hidden              return;              }
Magic Number,GitScc.UI,CommitBox,C:\repos\yysun_git-tools\GitUI\UI\CommitBox.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 38 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.CheckoutCommit_Click);                            #line default              #line hidden              return;              case 2:                            #line 40 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.NewTag_Click);                            #line default              #line hidden              return;              case 3:                            #line 41 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.NewBranch_Click);                            #line default              #line hidden              return;              case 4:                            #line 43 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.CherryPick_Click);                            #line default              #line hidden              return;              case 5:                            #line 45 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.Export_Click);                            #line default              #line hidden              return;              case 6:                            #line 47 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.CopyId_Click);                            #line default              #line hidden              return;              case 7:              this.root = ((System.Windows.Controls.Grid)(target));                            #line 50 "..\..\..\UI\CommitBox.xaml"              this.root.MouseEnter += new System.Windows.Input.MouseEventHandler(this.root_MouseEnter);                            #line default              #line hidden                            #line 50 "..\..\..\UI\CommitBox.xaml"              this.root.MouseLeave += new System.Windows.Input.MouseEventHandler(this.root_MouseLeave);                            #line default              #line hidden                            #line 50 "..\..\..\UI\CommitBox.xaml"              this.root.MouseLeftButtonUp += new System.Windows.Input.MouseButtonEventHandler(this.root_MouseLeftButtonUp);                            #line default              #line hidden              return;              case 8:              this.VisualStateGroup = ((System.Windows.VisualStateGroup)(target));              return;              case 9:              this.NormalState = ((System.Windows.VisualState)(target));              return;              case 10:              this.MouseOverState = ((System.Windows.VisualState)(target));              return;              case 11:              this.VisualStateGroup1 = ((System.Windows.VisualStateGroup)(target));              return;              case 12:              this.SelectedSate = ((System.Windows.VisualState)(target));              return;              case 13:              this.NotSelectedState = ((System.Windows.VisualState)(target));              return;              case 14:              this.rectangle1 = ((System.Windows.Shapes.Rectangle)(target));              return;              case 15:              this.scrollViewer = ((System.Windows.Controls.ScrollViewer)(target));              return;              case 16:              this.txtComment = ((System.Windows.Controls.TextBlock)(target));              return;              case 17:              this.txtId = ((System.Windows.Controls.TextBlock)(target));              return;              case 18:              this.txtAuthor = ((System.Windows.Controls.TextBlock)(target));              return;              case 19:              this.txtDate = ((System.Windows.Controls.TextBlock)(target));              return;              case 20:                            #line 114 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.Button_Click);                            #line default              #line hidden              return;              }
Magic Number,GitScc.UI,CommitBox,C:\repos\yysun_git-tools\GitUI\UI\CommitBox.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 38 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.CheckoutCommit_Click);                            #line default              #line hidden              return;              case 2:                            #line 40 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.NewTag_Click);                            #line default              #line hidden              return;              case 3:                            #line 41 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.NewBranch_Click);                            #line default              #line hidden              return;              case 4:                            #line 43 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.CherryPick_Click);                            #line default              #line hidden              return;              case 5:                            #line 45 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.Export_Click);                            #line default              #line hidden              return;              case 6:                            #line 47 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.CopyId_Click);                            #line default              #line hidden              return;              case 7:              this.root = ((System.Windows.Controls.Grid)(target));                            #line 50 "..\..\..\UI\CommitBox.xaml"              this.root.MouseEnter += new System.Windows.Input.MouseEventHandler(this.root_MouseEnter);                            #line default              #line hidden                            #line 50 "..\..\..\UI\CommitBox.xaml"              this.root.MouseLeave += new System.Windows.Input.MouseEventHandler(this.root_MouseLeave);                            #line default              #line hidden                            #line 50 "..\..\..\UI\CommitBox.xaml"              this.root.MouseLeftButtonUp += new System.Windows.Input.MouseButtonEventHandler(this.root_MouseLeftButtonUp);                            #line default              #line hidden              return;              case 8:              this.VisualStateGroup = ((System.Windows.VisualStateGroup)(target));              return;              case 9:              this.NormalState = ((System.Windows.VisualState)(target));              return;              case 10:              this.MouseOverState = ((System.Windows.VisualState)(target));              return;              case 11:              this.VisualStateGroup1 = ((System.Windows.VisualStateGroup)(target));              return;              case 12:              this.SelectedSate = ((System.Windows.VisualState)(target));              return;              case 13:              this.NotSelectedState = ((System.Windows.VisualState)(target));              return;              case 14:              this.rectangle1 = ((System.Windows.Shapes.Rectangle)(target));              return;              case 15:              this.scrollViewer = ((System.Windows.Controls.ScrollViewer)(target));              return;              case 16:              this.txtComment = ((System.Windows.Controls.TextBlock)(target));              return;              case 17:              this.txtId = ((System.Windows.Controls.TextBlock)(target));              return;              case 18:              this.txtAuthor = ((System.Windows.Controls.TextBlock)(target));              return;              case 19:              this.txtDate = ((System.Windows.Controls.TextBlock)(target));              return;              case 20:                            #line 114 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.Button_Click);                            #line default              #line hidden              return;              }
Magic Number,GitScc.UI,CommitBox,C:\repos\yysun_git-tools\GitUI\UI\CommitBox.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 38 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.CheckoutCommit_Click);                            #line default              #line hidden              return;              case 2:                            #line 40 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.NewTag_Click);                            #line default              #line hidden              return;              case 3:                            #line 41 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.NewBranch_Click);                            #line default              #line hidden              return;              case 4:                            #line 43 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.CherryPick_Click);                            #line default              #line hidden              return;              case 5:                            #line 45 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.Export_Click);                            #line default              #line hidden              return;              case 6:                            #line 47 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.CopyId_Click);                            #line default              #line hidden              return;              case 7:              this.root = ((System.Windows.Controls.Grid)(target));                            #line 50 "..\..\..\UI\CommitBox.xaml"              this.root.MouseEnter += new System.Windows.Input.MouseEventHandler(this.root_MouseEnter);                            #line default              #line hidden                            #line 50 "..\..\..\UI\CommitBox.xaml"              this.root.MouseLeave += new System.Windows.Input.MouseEventHandler(this.root_MouseLeave);                            #line default              #line hidden                            #line 50 "..\..\..\UI\CommitBox.xaml"              this.root.MouseLeftButtonUp += new System.Windows.Input.MouseButtonEventHandler(this.root_MouseLeftButtonUp);                            #line default              #line hidden              return;              case 8:              this.VisualStateGroup = ((System.Windows.VisualStateGroup)(target));              return;              case 9:              this.NormalState = ((System.Windows.VisualState)(target));              return;              case 10:              this.MouseOverState = ((System.Windows.VisualState)(target));              return;              case 11:              this.VisualStateGroup1 = ((System.Windows.VisualStateGroup)(target));              return;              case 12:              this.SelectedSate = ((System.Windows.VisualState)(target));              return;              case 13:              this.NotSelectedState = ((System.Windows.VisualState)(target));              return;              case 14:              this.rectangle1 = ((System.Windows.Shapes.Rectangle)(target));              return;              case 15:              this.scrollViewer = ((System.Windows.Controls.ScrollViewer)(target));              return;              case 16:              this.txtComment = ((System.Windows.Controls.TextBlock)(target));              return;              case 17:              this.txtId = ((System.Windows.Controls.TextBlock)(target));              return;              case 18:              this.txtAuthor = ((System.Windows.Controls.TextBlock)(target));              return;              case 19:              this.txtDate = ((System.Windows.Controls.TextBlock)(target));              return;              case 20:                            #line 114 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.Button_Click);                            #line default              #line hidden              return;              }
Magic Number,GitScc.UI,CommitBox,C:\repos\yysun_git-tools\GitUI\UI\CommitBox.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 38 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.CheckoutCommit_Click);                            #line default              #line hidden              return;              case 2:                            #line 40 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.NewTag_Click);                            #line default              #line hidden              return;              case 3:                            #line 41 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.NewBranch_Click);                            #line default              #line hidden              return;              case 4:                            #line 43 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.CherryPick_Click);                            #line default              #line hidden              return;              case 5:                            #line 45 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.Export_Click);                            #line default              #line hidden              return;              case 6:                            #line 47 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.CopyId_Click);                            #line default              #line hidden              return;              case 7:              this.root = ((System.Windows.Controls.Grid)(target));                            #line 50 "..\..\..\UI\CommitBox.xaml"              this.root.MouseEnter += new System.Windows.Input.MouseEventHandler(this.root_MouseEnter);                            #line default              #line hidden                            #line 50 "..\..\..\UI\CommitBox.xaml"              this.root.MouseLeave += new System.Windows.Input.MouseEventHandler(this.root_MouseLeave);                            #line default              #line hidden                            #line 50 "..\..\..\UI\CommitBox.xaml"              this.root.MouseLeftButtonUp += new System.Windows.Input.MouseButtonEventHandler(this.root_MouseLeftButtonUp);                            #line default              #line hidden              return;              case 8:              this.VisualStateGroup = ((System.Windows.VisualStateGroup)(target));              return;              case 9:              this.NormalState = ((System.Windows.VisualState)(target));              return;              case 10:              this.MouseOverState = ((System.Windows.VisualState)(target));              return;              case 11:              this.VisualStateGroup1 = ((System.Windows.VisualStateGroup)(target));              return;              case 12:              this.SelectedSate = ((System.Windows.VisualState)(target));              return;              case 13:              this.NotSelectedState = ((System.Windows.VisualState)(target));              return;              case 14:              this.rectangle1 = ((System.Windows.Shapes.Rectangle)(target));              return;              case 15:              this.scrollViewer = ((System.Windows.Controls.ScrollViewer)(target));              return;              case 16:              this.txtComment = ((System.Windows.Controls.TextBlock)(target));              return;              case 17:              this.txtId = ((System.Windows.Controls.TextBlock)(target));              return;              case 18:              this.txtAuthor = ((System.Windows.Controls.TextBlock)(target));              return;              case 19:              this.txtDate = ((System.Windows.Controls.TextBlock)(target));              return;              case 20:                            #line 114 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.Button_Click);                            #line default              #line hidden              return;              }
Magic Number,GitScc.UI,CommitBox,C:\repos\yysun_git-tools\GitUI\UI\CommitBox.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 38 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.CheckoutCommit_Click);                            #line default              #line hidden              return;              case 2:                            #line 40 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.NewTag_Click);                            #line default              #line hidden              return;              case 3:                            #line 41 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.NewBranch_Click);                            #line default              #line hidden              return;              case 4:                            #line 43 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.CherryPick_Click);                            #line default              #line hidden              return;              case 5:                            #line 45 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.Export_Click);                            #line default              #line hidden              return;              case 6:                            #line 47 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.CopyId_Click);                            #line default              #line hidden              return;              case 7:              this.root = ((System.Windows.Controls.Grid)(target));                            #line 50 "..\..\..\UI\CommitBox.xaml"              this.root.MouseEnter += new System.Windows.Input.MouseEventHandler(this.root_MouseEnter);                            #line default              #line hidden                            #line 50 "..\..\..\UI\CommitBox.xaml"              this.root.MouseLeave += new System.Windows.Input.MouseEventHandler(this.root_MouseLeave);                            #line default              #line hidden                            #line 50 "..\..\..\UI\CommitBox.xaml"              this.root.MouseLeftButtonUp += new System.Windows.Input.MouseButtonEventHandler(this.root_MouseLeftButtonUp);                            #line default              #line hidden              return;              case 8:              this.VisualStateGroup = ((System.Windows.VisualStateGroup)(target));              return;              case 9:              this.NormalState = ((System.Windows.VisualState)(target));              return;              case 10:              this.MouseOverState = ((System.Windows.VisualState)(target));              return;              case 11:              this.VisualStateGroup1 = ((System.Windows.VisualStateGroup)(target));              return;              case 12:              this.SelectedSate = ((System.Windows.VisualState)(target));              return;              case 13:              this.NotSelectedState = ((System.Windows.VisualState)(target));              return;              case 14:              this.rectangle1 = ((System.Windows.Shapes.Rectangle)(target));              return;              case 15:              this.scrollViewer = ((System.Windows.Controls.ScrollViewer)(target));              return;              case 16:              this.txtComment = ((System.Windows.Controls.TextBlock)(target));              return;              case 17:              this.txtId = ((System.Windows.Controls.TextBlock)(target));              return;              case 18:              this.txtAuthor = ((System.Windows.Controls.TextBlock)(target));              return;              case 19:              this.txtDate = ((System.Windows.Controls.TextBlock)(target));              return;              case 20:                            #line 114 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.Button_Click);                            #line default              #line hidden              return;              }
Magic Number,GitScc.UI,CommitBox,C:\repos\yysun_git-tools\GitUI\UI\CommitBox.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 38 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.CheckoutCommit_Click);                            #line default              #line hidden              return;              case 2:                            #line 40 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.NewTag_Click);                            #line default              #line hidden              return;              case 3:                            #line 41 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.NewBranch_Click);                            #line default              #line hidden              return;              case 4:                            #line 43 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.CherryPick_Click);                            #line default              #line hidden              return;              case 5:                            #line 45 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.Export_Click);                            #line default              #line hidden              return;              case 6:                            #line 47 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.CopyId_Click);                            #line default              #line hidden              return;              case 7:              this.root = ((System.Windows.Controls.Grid)(target));                            #line 50 "..\..\..\UI\CommitBox.xaml"              this.root.MouseEnter += new System.Windows.Input.MouseEventHandler(this.root_MouseEnter);                            #line default              #line hidden                            #line 50 "..\..\..\UI\CommitBox.xaml"              this.root.MouseLeave += new System.Windows.Input.MouseEventHandler(this.root_MouseLeave);                            #line default              #line hidden                            #line 50 "..\..\..\UI\CommitBox.xaml"              this.root.MouseLeftButtonUp += new System.Windows.Input.MouseButtonEventHandler(this.root_MouseLeftButtonUp);                            #line default              #line hidden              return;              case 8:              this.VisualStateGroup = ((System.Windows.VisualStateGroup)(target));              return;              case 9:              this.NormalState = ((System.Windows.VisualState)(target));              return;              case 10:              this.MouseOverState = ((System.Windows.VisualState)(target));              return;              case 11:              this.VisualStateGroup1 = ((System.Windows.VisualStateGroup)(target));              return;              case 12:              this.SelectedSate = ((System.Windows.VisualState)(target));              return;              case 13:              this.NotSelectedState = ((System.Windows.VisualState)(target));              return;              case 14:              this.rectangle1 = ((System.Windows.Shapes.Rectangle)(target));              return;              case 15:              this.scrollViewer = ((System.Windows.Controls.ScrollViewer)(target));              return;              case 16:              this.txtComment = ((System.Windows.Controls.TextBlock)(target));              return;              case 17:              this.txtId = ((System.Windows.Controls.TextBlock)(target));              return;              case 18:              this.txtAuthor = ((System.Windows.Controls.TextBlock)(target));              return;              case 19:              this.txtDate = ((System.Windows.Controls.TextBlock)(target));              return;              case 20:                            #line 114 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.Button_Click);                            #line default              #line hidden              return;              }
Magic Number,GitScc.UI,CommitBox,C:\repos\yysun_git-tools\GitUI\UI\CommitBox.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 38 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.CheckoutCommit_Click);                            #line default              #line hidden              return;              case 2:                            #line 40 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.NewTag_Click);                            #line default              #line hidden              return;              case 3:                            #line 41 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.NewBranch_Click);                            #line default              #line hidden              return;              case 4:                            #line 43 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.CherryPick_Click);                            #line default              #line hidden              return;              case 5:                            #line 45 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.Export_Click);                            #line default              #line hidden              return;              case 6:                            #line 47 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.CopyId_Click);                            #line default              #line hidden              return;              case 7:              this.root = ((System.Windows.Controls.Grid)(target));                            #line 50 "..\..\..\UI\CommitBox.xaml"              this.root.MouseEnter += new System.Windows.Input.MouseEventHandler(this.root_MouseEnter);                            #line default              #line hidden                            #line 50 "..\..\..\UI\CommitBox.xaml"              this.root.MouseLeave += new System.Windows.Input.MouseEventHandler(this.root_MouseLeave);                            #line default              #line hidden                            #line 50 "..\..\..\UI\CommitBox.xaml"              this.root.MouseLeftButtonUp += new System.Windows.Input.MouseButtonEventHandler(this.root_MouseLeftButtonUp);                            #line default              #line hidden              return;              case 8:              this.VisualStateGroup = ((System.Windows.VisualStateGroup)(target));              return;              case 9:              this.NormalState = ((System.Windows.VisualState)(target));              return;              case 10:              this.MouseOverState = ((System.Windows.VisualState)(target));              return;              case 11:              this.VisualStateGroup1 = ((System.Windows.VisualStateGroup)(target));              return;              case 12:              this.SelectedSate = ((System.Windows.VisualState)(target));              return;              case 13:              this.NotSelectedState = ((System.Windows.VisualState)(target));              return;              case 14:              this.rectangle1 = ((System.Windows.Shapes.Rectangle)(target));              return;              case 15:              this.scrollViewer = ((System.Windows.Controls.ScrollViewer)(target));              return;              case 16:              this.txtComment = ((System.Windows.Controls.TextBlock)(target));              return;              case 17:              this.txtId = ((System.Windows.Controls.TextBlock)(target));              return;              case 18:              this.txtAuthor = ((System.Windows.Controls.TextBlock)(target));              return;              case 19:              this.txtDate = ((System.Windows.Controls.TextBlock)(target));              return;              case 20:                            #line 114 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.Button_Click);                            #line default              #line hidden              return;              }
Magic Number,GitScc.UI,CommitBox,C:\repos\yysun_git-tools\GitUI\UI\CommitBox.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 38 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.CheckoutCommit_Click);                            #line default              #line hidden              return;              case 2:                            #line 40 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.NewTag_Click);                            #line default              #line hidden              return;              case 3:                            #line 41 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.NewBranch_Click);                            #line default              #line hidden              return;              case 4:                            #line 43 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.CherryPick_Click);                            #line default              #line hidden              return;              case 5:                            #line 45 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.Export_Click);                            #line default              #line hidden              return;              case 6:                            #line 47 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.CopyId_Click);                            #line default              #line hidden              return;              case 7:              this.root = ((System.Windows.Controls.Grid)(target));                            #line 50 "..\..\..\UI\CommitBox.xaml"              this.root.MouseEnter += new System.Windows.Input.MouseEventHandler(this.root_MouseEnter);                            #line default              #line hidden                            #line 50 "..\..\..\UI\CommitBox.xaml"              this.root.MouseLeave += new System.Windows.Input.MouseEventHandler(this.root_MouseLeave);                            #line default              #line hidden                            #line 50 "..\..\..\UI\CommitBox.xaml"              this.root.MouseLeftButtonUp += new System.Windows.Input.MouseButtonEventHandler(this.root_MouseLeftButtonUp);                            #line default              #line hidden              return;              case 8:              this.VisualStateGroup = ((System.Windows.VisualStateGroup)(target));              return;              case 9:              this.NormalState = ((System.Windows.VisualState)(target));              return;              case 10:              this.MouseOverState = ((System.Windows.VisualState)(target));              return;              case 11:              this.VisualStateGroup1 = ((System.Windows.VisualStateGroup)(target));              return;              case 12:              this.SelectedSate = ((System.Windows.VisualState)(target));              return;              case 13:              this.NotSelectedState = ((System.Windows.VisualState)(target));              return;              case 14:              this.rectangle1 = ((System.Windows.Shapes.Rectangle)(target));              return;              case 15:              this.scrollViewer = ((System.Windows.Controls.ScrollViewer)(target));              return;              case 16:              this.txtComment = ((System.Windows.Controls.TextBlock)(target));              return;              case 17:              this.txtId = ((System.Windows.Controls.TextBlock)(target));              return;              case 18:              this.txtAuthor = ((System.Windows.Controls.TextBlock)(target));              return;              case 19:              this.txtDate = ((System.Windows.Controls.TextBlock)(target));              return;              case 20:                            #line 114 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.Button_Click);                            #line default              #line hidden              return;              }
Magic Number,GitScc.UI,CommitDetails,C:\repos\yysun_git-tools\GitUI\UI\CommitDetails.xaml.cs,Show,The following statement contains a magic number: try              {                  this.tracker = tracker;                  var repositoryGraph = tracker.RepositoryGraph;                    var msg1 = repositoryGraph.Commits                      .Where(r => r.Id.StartsWith(commitId1))                      .Select(r => string.Format("{0} ({1}' {2})"' r.Subject' r.AuthorDateRelative' r.AuthorName))                      .First().Replace("\r"' "");                    var msg2 = repositoryGraph.Commits                      .Where(r => r.Id.StartsWith(commitId2))                      .Select(r => string.Format("{0} ({1}' {2})"' r.Subject' r.AuthorDateRelative' r.AuthorName))                      .First().Replace("\r"' "");                    var names1 = repositoryGraph.Refs                      .Where(r => r.Id.StartsWith(commitId1))                      .Select(r => r.Name);                    var names2 = repositoryGraph.Refs                      .Where(r => r.Id.StartsWith(commitId2))                      .Select(r => r.Name);                    var name1 = names1.Count() == 0 ? commitId1 : string.Join("' "' names1.ToArray()) + " " + commitId1.Substring(0' 7);                  var name2 = names2.Count() == 0 ? commitId2 : string.Join("' "' names2.ToArray()) + " " + commitId2.Substring(0' 7);                    this.lblCommit.Content = string.Format("[{1}] {0}"' msg2' name2);                  this.lblMessage.Content = string.Format("[{1}] {0}"' msg1' name1);                  this.lblAuthor.Content = "";                    var comment1 = repositoryGraph.Commits                      .Where(r => r.Id.StartsWith(commitId1))                      .Select(r => r.Message)                      .FirstOrDefault();                    var comment2 = repositoryGraph.Commits                      .Where(r => r.Id.StartsWith(commitId2))                      .Select(r => r.Message)                      .FirstOrDefault();                    this.Comments = string.Format(@"{0}:  ----------  {1}    {2}:  ----------  {3}"'                      commitId1' comment1' commitId2' comment2);                    this.patchList.ItemsSource = repositoryGraph.GetChanges(commitId1' commitId2);                  this.radioShowChanges.IsChecked = true;                  this.radioShowFileTree.IsEnabled = false;                  ClearEditor();                  this.commitId1 = commitId1;                  this.commitId2 = commitId2;                  this.btnSwitch.Visibility = Visibility.Visible;                  this.txtFileName.Text = "";                    if (this.patchList.Items.Count > 0) this.patchList.SelectedIndex = 0;              }              catch (Exception ex)              {                  this.lblCommit.Content = ex.Message + " Please try again.";              }
Magic Number,GitScc.UI,CommitDetails,C:\repos\yysun_git-tools\GitUI\UI\CommitDetails.xaml.cs,Show,The following statement contains a magic number: try              {                  this.tracker = tracker;                  var repositoryGraph = tracker.RepositoryGraph;                    var msg1 = repositoryGraph.Commits                      .Where(r => r.Id.StartsWith(commitId1))                      .Select(r => string.Format("{0} ({1}' {2})"' r.Subject' r.AuthorDateRelative' r.AuthorName))                      .First().Replace("\r"' "");                    var msg2 = repositoryGraph.Commits                      .Where(r => r.Id.StartsWith(commitId2))                      .Select(r => string.Format("{0} ({1}' {2})"' r.Subject' r.AuthorDateRelative' r.AuthorName))                      .First().Replace("\r"' "");                    var names1 = repositoryGraph.Refs                      .Where(r => r.Id.StartsWith(commitId1))                      .Select(r => r.Name);                    var names2 = repositoryGraph.Refs                      .Where(r => r.Id.StartsWith(commitId2))                      .Select(r => r.Name);                    var name1 = names1.Count() == 0 ? commitId1 : string.Join("' "' names1.ToArray()) + " " + commitId1.Substring(0' 7);                  var name2 = names2.Count() == 0 ? commitId2 : string.Join("' "' names2.ToArray()) + " " + commitId2.Substring(0' 7);                    this.lblCommit.Content = string.Format("[{1}] {0}"' msg2' name2);                  this.lblMessage.Content = string.Format("[{1}] {0}"' msg1' name1);                  this.lblAuthor.Content = "";                    var comment1 = repositoryGraph.Commits                      .Where(r => r.Id.StartsWith(commitId1))                      .Select(r => r.Message)                      .FirstOrDefault();                    var comment2 = repositoryGraph.Commits                      .Where(r => r.Id.StartsWith(commitId2))                      .Select(r => r.Message)                      .FirstOrDefault();                    this.Comments = string.Format(@"{0}:  ----------  {1}    {2}:  ----------  {3}"'                      commitId1' comment1' commitId2' comment2);                    this.patchList.ItemsSource = repositoryGraph.GetChanges(commitId1' commitId2);                  this.radioShowChanges.IsChecked = true;                  this.radioShowFileTree.IsEnabled = false;                  ClearEditor();                  this.commitId1 = commitId1;                  this.commitId2 = commitId2;                  this.btnSwitch.Visibility = Visibility.Visible;                  this.txtFileName.Text = "";                    if (this.patchList.Items.Count > 0) this.patchList.SelectedIndex = 0;              }              catch (Exception ex)              {                  this.lblCommit.Content = ex.Message + " Please try again.";              }
Magic Number,GitScc.UI,CommitDetails,C:\repos\yysun_git-tools\GitUI\UI\CommitDetails.xaml.cs,btnSave_Click,The following statement contains a magic number: if (btnSwitch.Visibility == Visibility.Collapsed)              {                  var dlg = new Microsoft.Win32.SaveFileDialog();                  dlg.DefaultExt = ".patch";                  dlg.Filter = "Patch (.patch)|*.patch";                    var id = this.commitId2.Substring(0' 7);                  dlg.FileName = id + ".patch";                  if (dlg.ShowDialog() == true)                  {                      try                      {                          GitViewModel.Current.Patch( this.commitId2' dlg.FileName);                      }                      catch (Exception ex)                      {                          MessageBox.Show(ex.Message' "Error"' MessageBoxButton.OK' MessageBoxImage.Error);                      }                  }              }              else              {                  var dlg = new System.Windows.Forms.FolderBrowserDialog();                  dlg.ShowNewFolderButton = true;                                    var id1 = this.commitId1.Substring(0' 7);                  var id2 = this.commitId2.Substring(0' 7);                    dlg.Description = string.Format("Select a folder to save patches from {0} to {1}"' id1' id2);                    if (dlg.ShowDialog() == System.Windows.Forms.DialogResult.OK)                  {                      try                      {                          GitViewModel.Current.Patch(this.commitId1' this.commitId2' dlg.SelectedPath);                      }                      catch(Exception ex)                      {                          MessageBox.Show(ex.Message' "Error"' MessageBoxButton.OK' MessageBoxImage.Error);                      }                  }              }
Magic Number,GitScc.UI,CommitDetails,C:\repos\yysun_git-tools\GitUI\UI\CommitDetails.xaml.cs,btnSave_Click,The following statement contains a magic number: if (btnSwitch.Visibility == Visibility.Collapsed)              {                  var dlg = new Microsoft.Win32.SaveFileDialog();                  dlg.DefaultExt = ".patch";                  dlg.Filter = "Patch (.patch)|*.patch";                    var id = this.commitId2.Substring(0' 7);                  dlg.FileName = id + ".patch";                  if (dlg.ShowDialog() == true)                  {                      try                      {                          GitViewModel.Current.Patch( this.commitId2' dlg.FileName);                      }                      catch (Exception ex)                      {                          MessageBox.Show(ex.Message' "Error"' MessageBoxButton.OK' MessageBoxImage.Error);                      }                  }              }              else              {                  var dlg = new System.Windows.Forms.FolderBrowserDialog();                  dlg.ShowNewFolderButton = true;                                    var id1 = this.commitId1.Substring(0' 7);                  var id2 = this.commitId2.Substring(0' 7);                    dlg.Description = string.Format("Select a folder to save patches from {0} to {1}"' id1' id2);                    if (dlg.ShowDialog() == System.Windows.Forms.DialogResult.OK)                  {                      try                      {                          GitViewModel.Current.Patch(this.commitId1' this.commitId2' dlg.SelectedPath);                      }                      catch(Exception ex)                      {                          MessageBox.Show(ex.Message' "Error"' MessageBoxButton.OK' MessageBoxImage.Error);                      }                  }              }
Magic Number,GitScc.UI,CommitDetails,C:\repos\yysun_git-tools\GitUI\UI\CommitDetails.xaml.cs,btnSave_Click,The following statement contains a magic number: if (btnSwitch.Visibility == Visibility.Collapsed)              {                  var dlg = new Microsoft.Win32.SaveFileDialog();                  dlg.DefaultExt = ".patch";                  dlg.Filter = "Patch (.patch)|*.patch";                    var id = this.commitId2.Substring(0' 7);                  dlg.FileName = id + ".patch";                  if (dlg.ShowDialog() == true)                  {                      try                      {                          GitViewModel.Current.Patch( this.commitId2' dlg.FileName);                      }                      catch (Exception ex)                      {                          MessageBox.Show(ex.Message' "Error"' MessageBoxButton.OK' MessageBoxImage.Error);                      }                  }              }              else              {                  var dlg = new System.Windows.Forms.FolderBrowserDialog();                  dlg.ShowNewFolderButton = true;                                    var id1 = this.commitId1.Substring(0' 7);                  var id2 = this.commitId2.Substring(0' 7);                    dlg.Description = string.Format("Select a folder to save patches from {0} to {1}"' id1' id2);                    if (dlg.ShowDialog() == System.Windows.Forms.DialogResult.OK)                  {                      try                      {                          GitViewModel.Current.Patch(this.commitId1' this.commitId2' dlg.SelectedPath);                      }                      catch(Exception ex)                      {                          MessageBox.Show(ex.Message' "Error"' MessageBoxButton.OK' MessageBoxImage.Error);                      }                  }              }
Magic Number,GitScc.UI,CommitHead,C:\repos\yysun_git-tools\GitUI\UI\CommitHead.xaml.cs,UserControl_Loaded,The following statement contains a magic number: if (BranchName == "HEAD" || this.txtHead.Text == "*")              {                  this.border.Background = this.border.BorderBrush =                  this.polygon.Fill = new SolidColorBrush(Color.FromArgb(128' 255' 0' 0));                  this.txtName.Foreground = new SolidColorBrush(Color.FromRgb(255' 255' 255));                  this.txtHead.Foreground = new SolidColorBrush(Color.FromRgb(255' 255' 255));                  this.menuCheckoutBranch.IsEnabled = this.menuDeleteBranch.IsEnabled =                  this.menuRebase.IsEnabled = false;              }
Magic Number,GitScc.UI,CommitHead,C:\repos\yysun_git-tools\GitUI\UI\CommitHead.xaml.cs,UserControl_Loaded,The following statement contains a magic number: if (BranchName == "HEAD" || this.txtHead.Text == "*")              {                  this.border.Background = this.border.BorderBrush =                  this.polygon.Fill = new SolidColorBrush(Color.FromArgb(128' 255' 0' 0));                  this.txtName.Foreground = new SolidColorBrush(Color.FromRgb(255' 255' 255));                  this.txtHead.Foreground = new SolidColorBrush(Color.FromRgb(255' 255' 255));                  this.menuCheckoutBranch.IsEnabled = this.menuDeleteBranch.IsEnabled =                  this.menuRebase.IsEnabled = false;              }
Magic Number,GitScc.UI,CommitHead,C:\repos\yysun_git-tools\GitUI\UI\CommitHead.xaml.cs,UserControl_Loaded,The following statement contains a magic number: if (BranchName == "HEAD" || this.txtHead.Text == "*")              {                  this.border.Background = this.border.BorderBrush =                  this.polygon.Fill = new SolidColorBrush(Color.FromArgb(128' 255' 0' 0));                  this.txtName.Foreground = new SolidColorBrush(Color.FromRgb(255' 255' 255));                  this.txtHead.Foreground = new SolidColorBrush(Color.FromRgb(255' 255' 255));                  this.menuCheckoutBranch.IsEnabled = this.menuDeleteBranch.IsEnabled =                  this.menuRebase.IsEnabled = false;              }
Magic Number,GitScc.UI,CommitHead,C:\repos\yysun_git-tools\GitUI\UI\CommitHead.xaml.cs,UserControl_Loaded,The following statement contains a magic number: if (BranchName == "HEAD" || this.txtHead.Text == "*")              {                  this.border.Background = this.border.BorderBrush =                  this.polygon.Fill = new SolidColorBrush(Color.FromArgb(128' 255' 0' 0));                  this.txtName.Foreground = new SolidColorBrush(Color.FromRgb(255' 255' 255));                  this.txtHead.Foreground = new SolidColorBrush(Color.FromRgb(255' 255' 255));                  this.menuCheckoutBranch.IsEnabled = this.menuDeleteBranch.IsEnabled =                  this.menuRebase.IsEnabled = false;              }
Magic Number,GitScc.UI,CommitHead,C:\repos\yysun_git-tools\GitUI\UI\CommitHead.xaml.cs,UserControl_Loaded,The following statement contains a magic number: if (BranchName == "HEAD" || this.txtHead.Text == "*")              {                  this.border.Background = this.border.BorderBrush =                  this.polygon.Fill = new SolidColorBrush(Color.FromArgb(128' 255' 0' 0));                  this.txtName.Foreground = new SolidColorBrush(Color.FromRgb(255' 255' 255));                  this.txtHead.Foreground = new SolidColorBrush(Color.FromRgb(255' 255' 255));                  this.menuCheckoutBranch.IsEnabled = this.menuDeleteBranch.IsEnabled =                  this.menuRebase.IsEnabled = false;              }
Magic Number,GitScc.UI,CommitHead,C:\repos\yysun_git-tools\GitUI\UI\CommitHead.xaml.cs,UserControl_Loaded,The following statement contains a magic number: if (BranchName == "HEAD" || this.txtHead.Text == "*")              {                  this.border.Background = this.border.BorderBrush =                  this.polygon.Fill = new SolidColorBrush(Color.FromArgb(128' 255' 0' 0));                  this.txtName.Foreground = new SolidColorBrush(Color.FromRgb(255' 255' 255));                  this.txtHead.Foreground = new SolidColorBrush(Color.FromRgb(255' 255' 255));                  this.menuCheckoutBranch.IsEnabled = this.menuDeleteBranch.IsEnabled =                  this.menuRebase.IsEnabled = false;              }
Magic Number,GitScc.UI,CommitHead,C:\repos\yysun_git-tools\GitUI\UI\CommitHead.xaml.cs,UserControl_Loaded,The following statement contains a magic number: if (BranchName == "HEAD" || this.txtHead.Text == "*")              {                  this.border.Background = this.border.BorderBrush =                  this.polygon.Fill = new SolidColorBrush(Color.FromArgb(128' 255' 0' 0));                  this.txtName.Foreground = new SolidColorBrush(Color.FromRgb(255' 255' 255));                  this.txtHead.Foreground = new SolidColorBrush(Color.FromRgb(255' 255' 255));                  this.menuCheckoutBranch.IsEnabled = this.menuDeleteBranch.IsEnabled =                  this.menuRebase.IsEnabled = false;              }
Magic Number,GitScc.UI,CommitHead,C:\repos\yysun_git-tools\GitUI\UI\CommitHead.xaml.cs,UserControl_Loaded,The following statement contains a magic number: if (BranchName == "HEAD" || this.txtHead.Text == "*")              {                  this.border.Background = this.border.BorderBrush =                  this.polygon.Fill = new SolidColorBrush(Color.FromArgb(128' 255' 0' 0));                  this.txtName.Foreground = new SolidColorBrush(Color.FromRgb(255' 255' 255));                  this.txtHead.Foreground = new SolidColorBrush(Color.FromRgb(255' 255' 255));                  this.menuCheckoutBranch.IsEnabled = this.menuDeleteBranch.IsEnabled =                  this.menuRebase.IsEnabled = false;              }
Magic Number,GitScc.UI,CommitHead,C:\repos\yysun_git-tools\GitUI\UI\CommitHead.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 7 "..\..\..\UI\CommitHead.xaml"              ((GitScc.UI.CommitHead)(target)).Loaded += new System.Windows.RoutedEventHandler(this.UserControl_Loaded);                            #line default              #line hidden              return;              case 2:              this.menuCheckoutBranch = ((System.Windows.Controls.MenuItem)(target));                            #line 10 "..\..\..\UI\CommitHead.xaml"              this.menuCheckoutBranch.Click += new System.Windows.RoutedEventHandler(this.CheckoutBranch_Click);                            #line default              #line hidden              return;              case 3:              this.menuDeleteBranch = ((System.Windows.Controls.MenuItem)(target));                            #line 11 "..\..\..\UI\CommitHead.xaml"              this.menuDeleteBranch.Click += new System.Windows.RoutedEventHandler(this.DeleteBranch_Click);                            #line default              #line hidden              return;              case 4:              this.menuMerge = ((System.Windows.Controls.MenuItem)(target));                            #line 12 "..\..\..\UI\CommitHead.xaml"              this.menuMerge.Click += new System.Windows.RoutedEventHandler(this.Merge_Click);                            #line default              #line hidden              return;              case 5:              this.menuRebase = ((System.Windows.Controls.MenuItem)(target));                            #line 13 "..\..\..\UI\CommitHead.xaml"              this.menuRebase.Click += new System.Windows.RoutedEventHandler(this.Rebase_Click);                            #line default              #line hidden              return;              case 6:              this.polygon = ((System.Windows.Shapes.Polygon)(target));              return;              case 7:              this.border = ((System.Windows.Controls.Border)(target));              return;              case 8:              this.txtName = ((System.Windows.Controls.TextBlock)(target));              return;              case 9:              this.txtHead = ((System.Windows.Controls.TextBlock)(target));              return;              }
Magic Number,GitScc.UI,CommitHead,C:\repos\yysun_git-tools\GitUI\UI\CommitHead.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 7 "..\..\..\UI\CommitHead.xaml"              ((GitScc.UI.CommitHead)(target)).Loaded += new System.Windows.RoutedEventHandler(this.UserControl_Loaded);                            #line default              #line hidden              return;              case 2:              this.menuCheckoutBranch = ((System.Windows.Controls.MenuItem)(target));                            #line 10 "..\..\..\UI\CommitHead.xaml"              this.menuCheckoutBranch.Click += new System.Windows.RoutedEventHandler(this.CheckoutBranch_Click);                            #line default              #line hidden              return;              case 3:              this.menuDeleteBranch = ((System.Windows.Controls.MenuItem)(target));                            #line 11 "..\..\..\UI\CommitHead.xaml"              this.menuDeleteBranch.Click += new System.Windows.RoutedEventHandler(this.DeleteBranch_Click);                            #line default              #line hidden              return;              case 4:              this.menuMerge = ((System.Windows.Controls.MenuItem)(target));                            #line 12 "..\..\..\UI\CommitHead.xaml"              this.menuMerge.Click += new System.Windows.RoutedEventHandler(this.Merge_Click);                            #line default              #line hidden              return;              case 5:              this.menuRebase = ((System.Windows.Controls.MenuItem)(target));                            #line 13 "..\..\..\UI\CommitHead.xaml"              this.menuRebase.Click += new System.Windows.RoutedEventHandler(this.Rebase_Click);                            #line default              #line hidden              return;              case 6:              this.polygon = ((System.Windows.Shapes.Polygon)(target));              return;              case 7:              this.border = ((System.Windows.Controls.Border)(target));              return;              case 8:              this.txtName = ((System.Windows.Controls.TextBlock)(target));              return;              case 9:              this.txtHead = ((System.Windows.Controls.TextBlock)(target));              return;              }
Magic Number,GitScc.UI,CommitHead,C:\repos\yysun_git-tools\GitUI\UI\CommitHead.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 7 "..\..\..\UI\CommitHead.xaml"              ((GitScc.UI.CommitHead)(target)).Loaded += new System.Windows.RoutedEventHandler(this.UserControl_Loaded);                            #line default              #line hidden              return;              case 2:              this.menuCheckoutBranch = ((System.Windows.Controls.MenuItem)(target));                            #line 10 "..\..\..\UI\CommitHead.xaml"              this.menuCheckoutBranch.Click += new System.Windows.RoutedEventHandler(this.CheckoutBranch_Click);                            #line default              #line hidden              return;              case 3:              this.menuDeleteBranch = ((System.Windows.Controls.MenuItem)(target));                            #line 11 "..\..\..\UI\CommitHead.xaml"              this.menuDeleteBranch.Click += new System.Windows.RoutedEventHandler(this.DeleteBranch_Click);                            #line default              #line hidden              return;              case 4:              this.menuMerge = ((System.Windows.Controls.MenuItem)(target));                            #line 12 "..\..\..\UI\CommitHead.xaml"              this.menuMerge.Click += new System.Windows.RoutedEventHandler(this.Merge_Click);                            #line default              #line hidden              return;              case 5:              this.menuRebase = ((System.Windows.Controls.MenuItem)(target));                            #line 13 "..\..\..\UI\CommitHead.xaml"              this.menuRebase.Click += new System.Windows.RoutedEventHandler(this.Rebase_Click);                            #line default              #line hidden              return;              case 6:              this.polygon = ((System.Windows.Shapes.Polygon)(target));              return;              case 7:              this.border = ((System.Windows.Controls.Border)(target));              return;              case 8:              this.txtName = ((System.Windows.Controls.TextBlock)(target));              return;              case 9:              this.txtHead = ((System.Windows.Controls.TextBlock)(target));              return;              }
Magic Number,GitScc.UI,CommitHead,C:\repos\yysun_git-tools\GitUI\UI\CommitHead.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 7 "..\..\..\UI\CommitHead.xaml"              ((GitScc.UI.CommitHead)(target)).Loaded += new System.Windows.RoutedEventHandler(this.UserControl_Loaded);                            #line default              #line hidden              return;              case 2:              this.menuCheckoutBranch = ((System.Windows.Controls.MenuItem)(target));                            #line 10 "..\..\..\UI\CommitHead.xaml"              this.menuCheckoutBranch.Click += new System.Windows.RoutedEventHandler(this.CheckoutBranch_Click);                            #line default              #line hidden              return;              case 3:              this.menuDeleteBranch = ((System.Windows.Controls.MenuItem)(target));                            #line 11 "..\..\..\UI\CommitHead.xaml"              this.menuDeleteBranch.Click += new System.Windows.RoutedEventHandler(this.DeleteBranch_Click);                            #line default              #line hidden              return;              case 4:              this.menuMerge = ((System.Windows.Controls.MenuItem)(target));                            #line 12 "..\..\..\UI\CommitHead.xaml"              this.menuMerge.Click += new System.Windows.RoutedEventHandler(this.Merge_Click);                            #line default              #line hidden              return;              case 5:              this.menuRebase = ((System.Windows.Controls.MenuItem)(target));                            #line 13 "..\..\..\UI\CommitHead.xaml"              this.menuRebase.Click += new System.Windows.RoutedEventHandler(this.Rebase_Click);                            #line default              #line hidden              return;              case 6:              this.polygon = ((System.Windows.Shapes.Polygon)(target));              return;              case 7:              this.border = ((System.Windows.Controls.Border)(target));              return;              case 8:              this.txtName = ((System.Windows.Controls.TextBlock)(target));              return;              case 9:              this.txtHead = ((System.Windows.Controls.TextBlock)(target));              return;              }
Magic Number,GitScc.UI,CommitHead,C:\repos\yysun_git-tools\GitUI\UI\CommitHead.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 7 "..\..\..\UI\CommitHead.xaml"              ((GitScc.UI.CommitHead)(target)).Loaded += new System.Windows.RoutedEventHandler(this.UserControl_Loaded);                            #line default              #line hidden              return;              case 2:              this.menuCheckoutBranch = ((System.Windows.Controls.MenuItem)(target));                            #line 10 "..\..\..\UI\CommitHead.xaml"              this.menuCheckoutBranch.Click += new System.Windows.RoutedEventHandler(this.CheckoutBranch_Click);                            #line default              #line hidden              return;              case 3:              this.menuDeleteBranch = ((System.Windows.Controls.MenuItem)(target));                            #line 11 "..\..\..\UI\CommitHead.xaml"              this.menuDeleteBranch.Click += new System.Windows.RoutedEventHandler(this.DeleteBranch_Click);                            #line default              #line hidden              return;              case 4:              this.menuMerge = ((System.Windows.Controls.MenuItem)(target));                            #line 12 "..\..\..\UI\CommitHead.xaml"              this.menuMerge.Click += new System.Windows.RoutedEventHandler(this.Merge_Click);                            #line default              #line hidden              return;              case 5:              this.menuRebase = ((System.Windows.Controls.MenuItem)(target));                            #line 13 "..\..\..\UI\CommitHead.xaml"              this.menuRebase.Click += new System.Windows.RoutedEventHandler(this.Rebase_Click);                            #line default              #line hidden              return;              case 6:              this.polygon = ((System.Windows.Shapes.Polygon)(target));              return;              case 7:              this.border = ((System.Windows.Controls.Border)(target));              return;              case 8:              this.txtName = ((System.Windows.Controls.TextBlock)(target));              return;              case 9:              this.txtHead = ((System.Windows.Controls.TextBlock)(target));              return;              }
Magic Number,GitScc.UI,CommitHead,C:\repos\yysun_git-tools\GitUI\UI\CommitHead.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 7 "..\..\..\UI\CommitHead.xaml"              ((GitScc.UI.CommitHead)(target)).Loaded += new System.Windows.RoutedEventHandler(this.UserControl_Loaded);                            #line default              #line hidden              return;              case 2:              this.menuCheckoutBranch = ((System.Windows.Controls.MenuItem)(target));                            #line 10 "..\..\..\UI\CommitHead.xaml"              this.menuCheckoutBranch.Click += new System.Windows.RoutedEventHandler(this.CheckoutBranch_Click);                            #line default              #line hidden              return;              case 3:              this.menuDeleteBranch = ((System.Windows.Controls.MenuItem)(target));                            #line 11 "..\..\..\UI\CommitHead.xaml"              this.menuDeleteBranch.Click += new System.Windows.RoutedEventHandler(this.DeleteBranch_Click);                            #line default              #line hidden              return;              case 4:              this.menuMerge = ((System.Windows.Controls.MenuItem)(target));                            #line 12 "..\..\..\UI\CommitHead.xaml"              this.menuMerge.Click += new System.Windows.RoutedEventHandler(this.Merge_Click);                            #line default              #line hidden              return;              case 5:              this.menuRebase = ((System.Windows.Controls.MenuItem)(target));                            #line 13 "..\..\..\UI\CommitHead.xaml"              this.menuRebase.Click += new System.Windows.RoutedEventHandler(this.Rebase_Click);                            #line default              #line hidden              return;              case 6:              this.polygon = ((System.Windows.Shapes.Polygon)(target));              return;              case 7:              this.border = ((System.Windows.Controls.Border)(target));              return;              case 8:              this.txtName = ((System.Windows.Controls.TextBlock)(target));              return;              case 9:              this.txtHead = ((System.Windows.Controls.TextBlock)(target));              return;              }
Magic Number,GitScc.UI,CommitHead,C:\repos\yysun_git-tools\GitUI\UI\CommitHead.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 7 "..\..\..\UI\CommitHead.xaml"              ((GitScc.UI.CommitHead)(target)).Loaded += new System.Windows.RoutedEventHandler(this.UserControl_Loaded);                            #line default              #line hidden              return;              case 2:              this.menuCheckoutBranch = ((System.Windows.Controls.MenuItem)(target));                            #line 10 "..\..\..\UI\CommitHead.xaml"              this.menuCheckoutBranch.Click += new System.Windows.RoutedEventHandler(this.CheckoutBranch_Click);                            #line default              #line hidden              return;              case 3:              this.menuDeleteBranch = ((System.Windows.Controls.MenuItem)(target));                            #line 11 "..\..\..\UI\CommitHead.xaml"              this.menuDeleteBranch.Click += new System.Windows.RoutedEventHandler(this.DeleteBranch_Click);                            #line default              #line hidden              return;              case 4:              this.menuMerge = ((System.Windows.Controls.MenuItem)(target));                            #line 12 "..\..\..\UI\CommitHead.xaml"              this.menuMerge.Click += new System.Windows.RoutedEventHandler(this.Merge_Click);                            #line default              #line hidden              return;              case 5:              this.menuRebase = ((System.Windows.Controls.MenuItem)(target));                            #line 13 "..\..\..\UI\CommitHead.xaml"              this.menuRebase.Click += new System.Windows.RoutedEventHandler(this.Rebase_Click);                            #line default              #line hidden              return;              case 6:              this.polygon = ((System.Windows.Shapes.Polygon)(target));              return;              case 7:              this.border = ((System.Windows.Controls.Border)(target));              return;              case 8:              this.txtName = ((System.Windows.Controls.TextBlock)(target));              return;              case 9:              this.txtHead = ((System.Windows.Controls.TextBlock)(target));              return;              }
Magic Number,GitScc.UI,CommitHead,C:\repos\yysun_git-tools\GitUI\UI\CommitHead.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 7 "..\..\..\UI\CommitHead.xaml"              ((GitScc.UI.CommitHead)(target)).Loaded += new System.Windows.RoutedEventHandler(this.UserControl_Loaded);                            #line default              #line hidden              return;              case 2:              this.menuCheckoutBranch = ((System.Windows.Controls.MenuItem)(target));                            #line 10 "..\..\..\UI\CommitHead.xaml"              this.menuCheckoutBranch.Click += new System.Windows.RoutedEventHandler(this.CheckoutBranch_Click);                            #line default              #line hidden              return;              case 3:              this.menuDeleteBranch = ((System.Windows.Controls.MenuItem)(target));                            #line 11 "..\..\..\UI\CommitHead.xaml"              this.menuDeleteBranch.Click += new System.Windows.RoutedEventHandler(this.DeleteBranch_Click);                            #line default              #line hidden              return;              case 4:              this.menuMerge = ((System.Windows.Controls.MenuItem)(target));                            #line 12 "..\..\..\UI\CommitHead.xaml"              this.menuMerge.Click += new System.Windows.RoutedEventHandler(this.Merge_Click);                            #line default              #line hidden              return;              case 5:              this.menuRebase = ((System.Windows.Controls.MenuItem)(target));                            #line 13 "..\..\..\UI\CommitHead.xaml"              this.menuRebase.Click += new System.Windows.RoutedEventHandler(this.Rebase_Click);                            #line default              #line hidden              return;              case 6:              this.polygon = ((System.Windows.Shapes.Polygon)(target));              return;              case 7:              this.border = ((System.Windows.Controls.Border)(target));              return;              case 8:              this.txtName = ((System.Windows.Controls.TextBlock)(target));              return;              case 9:              this.txtHead = ((System.Windows.Controls.TextBlock)(target));              return;              }
Magic Number,GitScc.UI,HistoryGraph,C:\repos\yysun_git-tools\GitUI\UI\HistoryGraph.xaml.cs,Show,The following statement contains a magic number: Action action = () =>              {                  try                  {                      IList<GraphNode> commits = null;                      string hash = null;                        if (tracker != null && tracker.IsGit)                      {                          commits = tracker.RepositoryGraph.Nodes;                          hash = GetHashCode(commits);                      }                        bool changed = true; // lastHash == null ? hash != null : !lastHash.Equals(hash);                        if (changed)                      {                          lastHash = hash;                            canvasContainer.Children.Clear();                          maxX = maxY = 0;                            if (changed && commits != null && commits.Any())                          {                              maxX = commits.Count();                              maxY = commits.Max(c => c.X);                                for (int i = commits.Count() - 1; i >= 0; i--)                              {                                  var commit = commits[i];                                    #region Add commit box                                    var box = new CommitBox();                                  box.DataContext = new                                  {                                      Id = commit.Id'                                      ShortId = commit.ShortId'                                      Comments = commit.Message'                                      Author = commit.AuthorName'                                      Date = commit.AuthorDateRelative'                                      Refs = commit.Refs                                  };                                    box.Height = HEIGHT;                                  box.Width = WIDTH;                                    double left = GetScreenX(maxX - commit.Y);                                  double top = GetScreenY(commit.X);                                    Canvas.SetLeft(box' left);                                  Canvas.SetTop(box' top);                                  Canvas.SetZIndex(box' 10);                                    this.canvasContainer.Children.Add(box);                                    #endregion                                    #region Add Branches                                    var m = 0;                                  foreach (var head in commit.Refs.Where(r => r.Type == RefTypes.Branch || r.Type == RefTypes.HEAD))                                  {                                      var control = new CommitHead                                      {                                          DataContext = head'                                      };                                        Canvas.SetLeft(control' left + WIDTH + 4);                                      Canvas.SetTop(control' top + m++ * 30);                                      this.canvasContainer.Children.Add(control);                                    }                                  #endregion                                    #region Add Tags                                  m = 0;                                  foreach (var tag in commit.Refs.Where(r => r.Type == RefTypes.Tag))                                  {                                      var control = new CommitTag                                      {                                          DataContext = tag'                                      };                                        Canvas.SetLeft(control' left + m++ * 80); // TODO: get width of the control                                      Canvas.SetTop(control' top - 24);                                      this.canvasContainer.Children.Add(control);                                  }                                    #endregion                                    #region Add Remote Branches                                  m = 0;                                  foreach (var name in commit.Refs.Where(r => r.Type == RefTypes.RemoteBranch))                                  {                                      var control = new CommitRemote                                      {                                          DataContext = new { Text = name }'                                      };                                        Canvas.SetLeft(control' left + m++ * 100); // TODO: get width of the control                                      Canvas.SetTop(control' top + HEIGHT + 4);                                      this.canvasContainer.Children.Add(control);                                  }                                  #endregion                              }                                #region Add commit links                                var links = tracker.RepositoryGraph.Links;                                foreach (var link in links)                              {                                  // current node                                  double x1 = link.Y1;                                  double y1 = link.X1;                                    // parent node                                  double x2 = link.Y2;                                  double y2 = link.X2;                                    bool flip = links.Any(lnk => lnk.X1 == x2 && lnk.Y2 == y2 && lnk.X1 == lnk.X2);                                    x1 = GetScreenX(maxX - x1);                                  y1 = GetScreenY(y1) + HEIGHT / 2;                                  x2 = GetScreenX(maxX - x2) + WIDTH;                                  y2 = GetScreenY(y2) + HEIGHT / 2;                                    if (y1 == y2)                                  {                                      var line = new Line                                      {                                          Stroke = new SolidColorBrush(Color.FromArgb(255' 153' 182' 209))'                                          StrokeThickness = 4'                                      };                                      line.X1 = x1;                                      line.Y1 = y1;                                      line.X2 = x2;                                      line.Y2 = y2;                                      this.canvasContainer.Children.Add(line);                                  }                                  else if (y1 > y2 && !flip)                                  {                                      var x3 = x2 - WIDTH / 2;                                      var path = new System.Windows.Shapes.Path                                      {                                          Stroke = new SolidColorBrush(Color.FromArgb(255' 153' 182' 209))'                                          StrokeThickness = 4'                                      };                                        PathSegmentCollection pscollection = new PathSegmentCollection();                                        pscollection.Add(new LineSegment(new Point(x2' y1)' true));                                        BezierSegment curve = new BezierSegment(                                          new Point(x2' y1)' new Point(x3' y1)' new Point(x3' y2)' true);                                      pscollection.Add(curve);                                        PathFigure pf = new PathFigure                                      {                                          StartPoint = new Point(x1' y1)'                                          Segments = pscollection'                                      };                                      PathFigureCollection pfcollection = new PathFigureCollection();                                      pfcollection.Add(pf);                                      PathGeometry pathGeometry = new PathGeometry();                                      pathGeometry.Figures = pfcollection;                                      path.Data = pathGeometry;                                        this.canvasContainer.Children.Add(path);                                  }                                  else                                  {                                      var x3 = x1 + WIDTH / 2;                                      var path = new System.Windows.Shapes.Path                                      {                                          Stroke = new SolidColorBrush(Color.FromArgb(255' 153' 182' 209))'                                          StrokeThickness = 4'                                      };                                        PathSegmentCollection pscollection = new PathSegmentCollection();                                        BezierSegment curve = new BezierSegment(                                          new Point(x3' y1)' new Point(x3' y2)' new Point(x1' y2)' true);                                      pscollection.Add(curve);                                        pscollection.Add(new LineSegment(new Point(x2' y2)' true));                                        PathFigure pf = new PathFigure                                      {                                          StartPoint = new Point(x3' y1)'                                          Segments = pscollection'                                      };                                      PathFigureCollection pfcollection = new PathFigureCollection();                                      pfcollection.Add(pf);                                      PathGeometry pathGeometry = new PathGeometry();                                      pathGeometry.Figures = pfcollection;                                      path.Data = pathGeometry;                                        this.canvasContainer.Children.Add(path);                                  }                              }                                #endregion                          }                            AdjustCanvasSize();                      }                        if (scroll)                      {                          //this.Scaler.ScaleX = this.Scaler.ScaleY = 1;                          //AdjustCanvasSize();                            this.zoomAndPanControl.ContentScale = 1;                          this.canvasContainer.SetValue(Canvas.LeftProperty' 0.0);                          this.canvasContainer.SetValue(Canvas.TopProperty' 0.0);                          this.scrollRoot.ScrollToRightEnd();                      }                  }                  catch (Exception ex)                  {                      Log.WriteLine("History Graph Show: {0}"' ex.ToString());                  }                    HistoryViewCommands.GraphLoaded.Execute(null' this);                };
Magic Number,GitScc.UI,HistoryGraph,C:\repos\yysun_git-tools\GitUI\UI\HistoryGraph.xaml.cs,Show,The following statement contains a magic number: Action action = () =>              {                  try                  {                      IList<GraphNode> commits = null;                      string hash = null;                        if (tracker != null && tracker.IsGit)                      {                          commits = tracker.RepositoryGraph.Nodes;                          hash = GetHashCode(commits);                      }                        bool changed = true; // lastHash == null ? hash != null : !lastHash.Equals(hash);                        if (changed)                      {                          lastHash = hash;                            canvasContainer.Children.Clear();                          maxX = maxY = 0;                            if (changed && commits != null && commits.Any())                          {                              maxX = commits.Count();                              maxY = commits.Max(c => c.X);                                for (int i = commits.Count() - 1; i >= 0; i--)                              {                                  var commit = commits[i];                                    #region Add commit box                                    var box = new CommitBox();                                  box.DataContext = new                                  {                                      Id = commit.Id'                                      ShortId = commit.ShortId'                                      Comments = commit.Message'                                      Author = commit.AuthorName'                                      Date = commit.AuthorDateRelative'                                      Refs = commit.Refs                                  };                                    box.Height = HEIGHT;                                  box.Width = WIDTH;                                    double left = GetScreenX(maxX - commit.Y);                                  double top = GetScreenY(commit.X);                                    Canvas.SetLeft(box' left);                                  Canvas.SetTop(box' top);                                  Canvas.SetZIndex(box' 10);                                    this.canvasContainer.Children.Add(box);                                    #endregion                                    #region Add Branches                                    var m = 0;                                  foreach (var head in commit.Refs.Where(r => r.Type == RefTypes.Branch || r.Type == RefTypes.HEAD))                                  {                                      var control = new CommitHead                                      {                                          DataContext = head'                                      };                                        Canvas.SetLeft(control' left + WIDTH + 4);                                      Canvas.SetTop(control' top + m++ * 30);                                      this.canvasContainer.Children.Add(control);                                    }                                  #endregion                                    #region Add Tags                                  m = 0;                                  foreach (var tag in commit.Refs.Where(r => r.Type == RefTypes.Tag))                                  {                                      var control = new CommitTag                                      {                                          DataContext = tag'                                      };                                        Canvas.SetLeft(control' left + m++ * 80); // TODO: get width of the control                                      Canvas.SetTop(control' top - 24);                                      this.canvasContainer.Children.Add(control);                                  }                                    #endregion                                    #region Add Remote Branches                                  m = 0;                                  foreach (var name in commit.Refs.Where(r => r.Type == RefTypes.RemoteBranch))                                  {                                      var control = new CommitRemote                                      {                                          DataContext = new { Text = name }'                                      };                                        Canvas.SetLeft(control' left + m++ * 100); // TODO: get width of the control                                      Canvas.SetTop(control' top + HEIGHT + 4);                                      this.canvasContainer.Children.Add(control);                                  }                                  #endregion                              }                                #region Add commit links                                var links = tracker.RepositoryGraph.Links;                                foreach (var link in links)                              {                                  // current node                                  double x1 = link.Y1;                                  double y1 = link.X1;                                    // parent node                                  double x2 = link.Y2;                                  double y2 = link.X2;                                    bool flip = links.Any(lnk => lnk.X1 == x2 && lnk.Y2 == y2 && lnk.X1 == lnk.X2);                                    x1 = GetScreenX(maxX - x1);                                  y1 = GetScreenY(y1) + HEIGHT / 2;                                  x2 = GetScreenX(maxX - x2) + WIDTH;                                  y2 = GetScreenY(y2) + HEIGHT / 2;                                    if (y1 == y2)                                  {                                      var line = new Line                                      {                                          Stroke = new SolidColorBrush(Color.FromArgb(255' 153' 182' 209))'                                          StrokeThickness = 4'                                      };                                      line.X1 = x1;                                      line.Y1 = y1;                                      line.X2 = x2;                                      line.Y2 = y2;                                      this.canvasContainer.Children.Add(line);                                  }                                  else if (y1 > y2 && !flip)                                  {                                      var x3 = x2 - WIDTH / 2;                                      var path = new System.Windows.Shapes.Path                                      {                                          Stroke = new SolidColorBrush(Color.FromArgb(255' 153' 182' 209))'                                          StrokeThickness = 4'                                      };                                        PathSegmentCollection pscollection = new PathSegmentCollection();                                        pscollection.Add(new LineSegment(new Point(x2' y1)' true));                                        BezierSegment curve = new BezierSegment(                                          new Point(x2' y1)' new Point(x3' y1)' new Point(x3' y2)' true);                                      pscollection.Add(curve);                                        PathFigure pf = new PathFigure                                      {                                          StartPoint = new Point(x1' y1)'                                          Segments = pscollection'                                      };                                      PathFigureCollection pfcollection = new PathFigureCollection();                                      pfcollection.Add(pf);                                      PathGeometry pathGeometry = new PathGeometry();                                      pathGeometry.Figures = pfcollection;                                      path.Data = pathGeometry;                                        this.canvasContainer.Children.Add(path);                                  }                                  else                                  {                                      var x3 = x1 + WIDTH / 2;                                      var path = new System.Windows.Shapes.Path                                      {                                          Stroke = new SolidColorBrush(Color.FromArgb(255' 153' 182' 209))'                                          StrokeThickness = 4'                                      };                                        PathSegmentCollection pscollection = new PathSegmentCollection();                                        BezierSegment curve = new BezierSegment(                                          new Point(x3' y1)' new Point(x3' y2)' new Point(x1' y2)' true);                                      pscollection.Add(curve);                                        pscollection.Add(new LineSegment(new Point(x2' y2)' true));                                        PathFigure pf = new PathFigure                                      {                                          StartPoint = new Point(x3' y1)'                                          Segments = pscollection'                                      };                                      PathFigureCollection pfcollection = new PathFigureCollection();                                      pfcollection.Add(pf);                                      PathGeometry pathGeometry = new PathGeometry();                                      pathGeometry.Figures = pfcollection;                                      path.Data = pathGeometry;                                        this.canvasContainer.Children.Add(path);                                  }                              }                                #endregion                          }                            AdjustCanvasSize();                      }                        if (scroll)                      {                          //this.Scaler.ScaleX = this.Scaler.ScaleY = 1;                          //AdjustCanvasSize();                            this.zoomAndPanControl.ContentScale = 1;                          this.canvasContainer.SetValue(Canvas.LeftProperty' 0.0);                          this.canvasContainer.SetValue(Canvas.TopProperty' 0.0);                          this.scrollRoot.ScrollToRightEnd();                      }                  }                  catch (Exception ex)                  {                      Log.WriteLine("History Graph Show: {0}"' ex.ToString());                  }                    HistoryViewCommands.GraphLoaded.Execute(null' this);                };
Magic Number,GitScc.UI,HistoryGraph,C:\repos\yysun_git-tools\GitUI\UI\HistoryGraph.xaml.cs,Show,The following statement contains a magic number: Action action = () =>              {                  try                  {                      IList<GraphNode> commits = null;                      string hash = null;                        if (tracker != null && tracker.IsGit)                      {                          commits = tracker.RepositoryGraph.Nodes;                          hash = GetHashCode(commits);                      }                        bool changed = true; // lastHash == null ? hash != null : !lastHash.Equals(hash);                        if (changed)                      {                          lastHash = hash;                            canvasContainer.Children.Clear();                          maxX = maxY = 0;                            if (changed && commits != null && commits.Any())                          {                              maxX = commits.Count();                              maxY = commits.Max(c => c.X);                                for (int i = commits.Count() - 1; i >= 0; i--)                              {                                  var commit = commits[i];                                    #region Add commit box                                    var box = new CommitBox();                                  box.DataContext = new                                  {                                      Id = commit.Id'                                      ShortId = commit.ShortId'                                      Comments = commit.Message'                                      Author = commit.AuthorName'                                      Date = commit.AuthorDateRelative'                                      Refs = commit.Refs                                  };                                    box.Height = HEIGHT;                                  box.Width = WIDTH;                                    double left = GetScreenX(maxX - commit.Y);                                  double top = GetScreenY(commit.X);                                    Canvas.SetLeft(box' left);                                  Canvas.SetTop(box' top);                                  Canvas.SetZIndex(box' 10);                                    this.canvasContainer.Children.Add(box);                                    #endregion                                    #region Add Branches                                    var m = 0;                                  foreach (var head in commit.Refs.Where(r => r.Type == RefTypes.Branch || r.Type == RefTypes.HEAD))                                  {                                      var control = new CommitHead                                      {                                          DataContext = head'                                      };                                        Canvas.SetLeft(control' left + WIDTH + 4);                                      Canvas.SetTop(control' top + m++ * 30);                                      this.canvasContainer.Children.Add(control);                                    }                                  #endregion                                    #region Add Tags                                  m = 0;                                  foreach (var tag in commit.Refs.Where(r => r.Type == RefTypes.Tag))                                  {                                      var control = new CommitTag                                      {                                          DataContext = tag'                                      };                                        Canvas.SetLeft(control' left + m++ * 80); // TODO: get width of the control                                      Canvas.SetTop(control' top - 24);                                      this.canvasContainer.Children.Add(control);                                  }                                    #endregion                                    #region Add Remote Branches                                  m = 0;                                  foreach (var name in commit.Refs.Where(r => r.Type == RefTypes.RemoteBranch))                                  {                                      var control = new CommitRemote                                      {                                          DataContext = new { Text = name }'                                      };                                        Canvas.SetLeft(control' left + m++ * 100); // TODO: get width of the control                                      Canvas.SetTop(control' top + HEIGHT + 4);                                      this.canvasContainer.Children.Add(control);                                  }                                  #endregion                              }                                #region Add commit links                                var links = tracker.RepositoryGraph.Links;                                foreach (var link in links)                              {                                  // current node                                  double x1 = link.Y1;                                  double y1 = link.X1;                                    // parent node                                  double x2 = link.Y2;                                  double y2 = link.X2;                                    bool flip = links.Any(lnk => lnk.X1 == x2 && lnk.Y2 == y2 && lnk.X1 == lnk.X2);                                    x1 = GetScreenX(maxX - x1);                                  y1 = GetScreenY(y1) + HEIGHT / 2;                                  x2 = GetScreenX(maxX - x2) + WIDTH;                                  y2 = GetScreenY(y2) + HEIGHT / 2;                                    if (y1 == y2)                                  {                                      var line = new Line                                      {                                          Stroke = new SolidColorBrush(Color.FromArgb(255' 153' 182' 209))'                                          StrokeThickness = 4'                                      };                                      line.X1 = x1;                                      line.Y1 = y1;                                      line.X2 = x2;                                      line.Y2 = y2;                                      this.canvasContainer.Children.Add(line);                                  }                                  else if (y1 > y2 && !flip)                                  {                                      var x3 = x2 - WIDTH / 2;                                      var path = new System.Windows.Shapes.Path                                      {                                          Stroke = new SolidColorBrush(Color.FromArgb(255' 153' 182' 209))'                                          StrokeThickness = 4'                                      };                                        PathSegmentCollection pscollection = new PathSegmentCollection();                                        pscollection.Add(new LineSegment(new Point(x2' y1)' true));                                        BezierSegment curve = new BezierSegment(                                          new Point(x2' y1)' new Point(x3' y1)' new Point(x3' y2)' true);                                      pscollection.Add(curve);                                        PathFigure pf = new PathFigure                                      {                                          StartPoint = new Point(x1' y1)'                                          Segments = pscollection'                                      };                                      PathFigureCollection pfcollection = new PathFigureCollection();                                      pfcollection.Add(pf);                                      PathGeometry pathGeometry = new PathGeometry();                                      pathGeometry.Figures = pfcollection;                                      path.Data = pathGeometry;                                        this.canvasContainer.Children.Add(path);                                  }                                  else                                  {                                      var x3 = x1 + WIDTH / 2;                                      var path = new System.Windows.Shapes.Path                                      {                                          Stroke = new SolidColorBrush(Color.FromArgb(255' 153' 182' 209))'                                          StrokeThickness = 4'                                      };                                        PathSegmentCollection pscollection = new PathSegmentCollection();                                        BezierSegment curve = new BezierSegment(                                          new Point(x3' y1)' new Point(x3' y2)' new Point(x1' y2)' true);                                      pscollection.Add(curve);                                        pscollection.Add(new LineSegment(new Point(x2' y2)' true));                                        PathFigure pf = new PathFigure                                      {                                          StartPoint = new Point(x3' y1)'                                          Segments = pscollection'                                      };                                      PathFigureCollection pfcollection = new PathFigureCollection();                                      pfcollection.Add(pf);                                      PathGeometry pathGeometry = new PathGeometry();                                      pathGeometry.Figures = pfcollection;                                      path.Data = pathGeometry;                                        this.canvasContainer.Children.Add(path);                                  }                              }                                #endregion                          }                            AdjustCanvasSize();                      }                        if (scroll)                      {                          //this.Scaler.ScaleX = this.Scaler.ScaleY = 1;                          //AdjustCanvasSize();                            this.zoomAndPanControl.ContentScale = 1;                          this.canvasContainer.SetValue(Canvas.LeftProperty' 0.0);                          this.canvasContainer.SetValue(Canvas.TopProperty' 0.0);                          this.scrollRoot.ScrollToRightEnd();                      }                  }                  catch (Exception ex)                  {                      Log.WriteLine("History Graph Show: {0}"' ex.ToString());                  }                    HistoryViewCommands.GraphLoaded.Execute(null' this);                };
Magic Number,GitScc.UI,HistoryGraph,C:\repos\yysun_git-tools\GitUI\UI\HistoryGraph.xaml.cs,Show,The following statement contains a magic number: Action action = () =>              {                  try                  {                      IList<GraphNode> commits = null;                      string hash = null;                        if (tracker != null && tracker.IsGit)                      {                          commits = tracker.RepositoryGraph.Nodes;                          hash = GetHashCode(commits);                      }                        bool changed = true; // lastHash == null ? hash != null : !lastHash.Equals(hash);                        if (changed)                      {                          lastHash = hash;                            canvasContainer.Children.Clear();                          maxX = maxY = 0;                            if (changed && commits != null && commits.Any())                          {                              maxX = commits.Count();                              maxY = commits.Max(c => c.X);                                for (int i = commits.Count() - 1; i >= 0; i--)                              {                                  var commit = commits[i];                                    #region Add commit box                                    var box = new CommitBox();                                  box.DataContext = new                                  {                                      Id = commit.Id'                                      ShortId = commit.ShortId'                                      Comments = commit.Message'                                      Author = commit.AuthorName'                                      Date = commit.AuthorDateRelative'                                      Refs = commit.Refs                                  };                                    box.Height = HEIGHT;                                  box.Width = WIDTH;                                    double left = GetScreenX(maxX - commit.Y);                                  double top = GetScreenY(commit.X);                                    Canvas.SetLeft(box' left);                                  Canvas.SetTop(box' top);                                  Canvas.SetZIndex(box' 10);                                    this.canvasContainer.Children.Add(box);                                    #endregion                                    #region Add Branches                                    var m = 0;                                  foreach (var head in commit.Refs.Where(r => r.Type == RefTypes.Branch || r.Type == RefTypes.HEAD))                                  {                                      var control = new CommitHead                                      {                                          DataContext = head'                                      };                                        Canvas.SetLeft(control' left + WIDTH + 4);                                      Canvas.SetTop(control' top + m++ * 30);                                      this.canvasContainer.Children.Add(control);                                    }                                  #endregion                                    #region Add Tags                                  m = 0;                                  foreach (var tag in commit.Refs.Where(r => r.Type == RefTypes.Tag))                                  {                                      var control = new CommitTag                                      {                                          DataContext = tag'                                      };                                        Canvas.SetLeft(control' left + m++ * 80); // TODO: get width of the control                                      Canvas.SetTop(control' top - 24);                                      this.canvasContainer.Children.Add(control);                                  }                                    #endregion                                    #region Add Remote Branches                                  m = 0;                                  foreach (var name in commit.Refs.Where(r => r.Type == RefTypes.RemoteBranch))                                  {                                      var control = new CommitRemote                                      {                                          DataContext = new { Text = name }'                                      };                                        Canvas.SetLeft(control' left + m++ * 100); // TODO: get width of the control                                      Canvas.SetTop(control' top + HEIGHT + 4);                                      this.canvasContainer.Children.Add(control);                                  }                                  #endregion                              }                                #region Add commit links                                var links = tracker.RepositoryGraph.Links;                                foreach (var link in links)                              {                                  // current node                                  double x1 = link.Y1;                                  double y1 = link.X1;                                    // parent node                                  double x2 = link.Y2;                                  double y2 = link.X2;                                    bool flip = links.Any(lnk => lnk.X1 == x2 && lnk.Y2 == y2 && lnk.X1 == lnk.X2);                                    x1 = GetScreenX(maxX - x1);                                  y1 = GetScreenY(y1) + HEIGHT / 2;                                  x2 = GetScreenX(maxX - x2) + WIDTH;                                  y2 = GetScreenY(y2) + HEIGHT / 2;                                    if (y1 == y2)                                  {                                      var line = new Line                                      {                                          Stroke = new SolidColorBrush(Color.FromArgb(255' 153' 182' 209))'                                          StrokeThickness = 4'                                      };                                      line.X1 = x1;                                      line.Y1 = y1;                                      line.X2 = x2;                                      line.Y2 = y2;                                      this.canvasContainer.Children.Add(line);                                  }                                  else if (y1 > y2 && !flip)                                  {                                      var x3 = x2 - WIDTH / 2;                                      var path = new System.Windows.Shapes.Path                                      {                                          Stroke = new SolidColorBrush(Color.FromArgb(255' 153' 182' 209))'                                          StrokeThickness = 4'                                      };                                        PathSegmentCollection pscollection = new PathSegmentCollection();                                        pscollection.Add(new LineSegment(new Point(x2' y1)' true));                                        BezierSegment curve = new BezierSegment(                                          new Point(x2' y1)' new Point(x3' y1)' new Point(x3' y2)' true);                                      pscollection.Add(curve);                                        PathFigure pf = new PathFigure                                      {                                          StartPoint = new Point(x1' y1)'                                          Segments = pscollection'                                      };                                      PathFigureCollection pfcollection = new PathFigureCollection();                                      pfcollection.Add(pf);                                      PathGeometry pathGeometry = new PathGeometry();                                      pathGeometry.Figures = pfcollection;                                      path.Data = pathGeometry;                                        this.canvasContainer.Children.Add(path);                                  }                                  else                                  {                                      var x3 = x1 + WIDTH / 2;                                      var path = new System.Windows.Shapes.Path                                      {                                          Stroke = new SolidColorBrush(Color.FromArgb(255' 153' 182' 209))'                                          StrokeThickness = 4'                                      };                                        PathSegmentCollection pscollection = new PathSegmentCollection();                                        BezierSegment curve = new BezierSegment(                                          new Point(x3' y1)' new Point(x3' y2)' new Point(x1' y2)' true);                                      pscollection.Add(curve);                                        pscollection.Add(new LineSegment(new Point(x2' y2)' true));                                        PathFigure pf = new PathFigure                                      {                                          StartPoint = new Point(x3' y1)'                                          Segments = pscollection'                                      };                                      PathFigureCollection pfcollection = new PathFigureCollection();                                      pfcollection.Add(pf);                                      PathGeometry pathGeometry = new PathGeometry();                                      pathGeometry.Figures = pfcollection;                                      path.Data = pathGeometry;                                        this.canvasContainer.Children.Add(path);                                  }                              }                                #endregion                          }                            AdjustCanvasSize();                      }                        if (scroll)                      {                          //this.Scaler.ScaleX = this.Scaler.ScaleY = 1;                          //AdjustCanvasSize();                            this.zoomAndPanControl.ContentScale = 1;                          this.canvasContainer.SetValue(Canvas.LeftProperty' 0.0);                          this.canvasContainer.SetValue(Canvas.TopProperty' 0.0);                          this.scrollRoot.ScrollToRightEnd();                      }                  }                  catch (Exception ex)                  {                      Log.WriteLine("History Graph Show: {0}"' ex.ToString());                  }                    HistoryViewCommands.GraphLoaded.Execute(null' this);                };
Magic Number,GitScc.UI,HistoryGraph,C:\repos\yysun_git-tools\GitUI\UI\HistoryGraph.xaml.cs,Show,The following statement contains a magic number: Action action = () =>              {                  try                  {                      IList<GraphNode> commits = null;                      string hash = null;                        if (tracker != null && tracker.IsGit)                      {                          commits = tracker.RepositoryGraph.Nodes;                          hash = GetHashCode(commits);                      }                        bool changed = true; // lastHash == null ? hash != null : !lastHash.Equals(hash);                        if (changed)                      {                          lastHash = hash;                            canvasContainer.Children.Clear();                          maxX = maxY = 0;                            if (changed && commits != null && commits.Any())                          {                              maxX = commits.Count();                              maxY = commits.Max(c => c.X);                                for (int i = commits.Count() - 1; i >= 0; i--)                              {                                  var commit = commits[i];                                    #region Add commit box                                    var box = new CommitBox();                                  box.DataContext = new                                  {                                      Id = commit.Id'                                      ShortId = commit.ShortId'                                      Comments = commit.Message'                                      Author = commit.AuthorName'                                      Date = commit.AuthorDateRelative'                                      Refs = commit.Refs                                  };                                    box.Height = HEIGHT;                                  box.Width = WIDTH;                                    double left = GetScreenX(maxX - commit.Y);                                  double top = GetScreenY(commit.X);                                    Canvas.SetLeft(box' left);                                  Canvas.SetTop(box' top);                                  Canvas.SetZIndex(box' 10);                                    this.canvasContainer.Children.Add(box);                                    #endregion                                    #region Add Branches                                    var m = 0;                                  foreach (var head in commit.Refs.Where(r => r.Type == RefTypes.Branch || r.Type == RefTypes.HEAD))                                  {                                      var control = new CommitHead                                      {                                          DataContext = head'                                      };                                        Canvas.SetLeft(control' left + WIDTH + 4);                                      Canvas.SetTop(control' top + m++ * 30);                                      this.canvasContainer.Children.Add(control);                                    }                                  #endregion                                    #region Add Tags                                  m = 0;                                  foreach (var tag in commit.Refs.Where(r => r.Type == RefTypes.Tag))                                  {                                      var control = new CommitTag                                      {                                          DataContext = tag'                                      };                                        Canvas.SetLeft(control' left + m++ * 80); // TODO: get width of the control                                      Canvas.SetTop(control' top - 24);                                      this.canvasContainer.Children.Add(control);                                  }                                    #endregion                                    #region Add Remote Branches                                  m = 0;                                  foreach (var name in commit.Refs.Where(r => r.Type == RefTypes.RemoteBranch))                                  {                                      var control = new CommitRemote                                      {                                          DataContext = new { Text = name }'                                      };                                        Canvas.SetLeft(control' left + m++ * 100); // TODO: get width of the control                                      Canvas.SetTop(control' top + HEIGHT + 4);                                      this.canvasContainer.Children.Add(control);                                  }                                  #endregion                              }                                #region Add commit links                                var links = tracker.RepositoryGraph.Links;                                foreach (var link in links)                              {                                  // current node                                  double x1 = link.Y1;                                  double y1 = link.X1;                                    // parent node                                  double x2 = link.Y2;                                  double y2 = link.X2;                                    bool flip = links.Any(lnk => lnk.X1 == x2 && lnk.Y2 == y2 && lnk.X1 == lnk.X2);                                    x1 = GetScreenX(maxX - x1);                                  y1 = GetScreenY(y1) + HEIGHT / 2;                                  x2 = GetScreenX(maxX - x2) + WIDTH;                                  y2 = GetScreenY(y2) + HEIGHT / 2;                                    if (y1 == y2)                                  {                                      var line = new Line                                      {                                          Stroke = new SolidColorBrush(Color.FromArgb(255' 153' 182' 209))'                                          StrokeThickness = 4'                                      };                                      line.X1 = x1;                                      line.Y1 = y1;                                      line.X2 = x2;                                      line.Y2 = y2;                                      this.canvasContainer.Children.Add(line);                                  }                                  else if (y1 > y2 && !flip)                                  {                                      var x3 = x2 - WIDTH / 2;                                      var path = new System.Windows.Shapes.Path                                      {                                          Stroke = new SolidColorBrush(Color.FromArgb(255' 153' 182' 209))'                                          StrokeThickness = 4'                                      };                                        PathSegmentCollection pscollection = new PathSegmentCollection();                                        pscollection.Add(new LineSegment(new Point(x2' y1)' true));                                        BezierSegment curve = new BezierSegment(                                          new Point(x2' y1)' new Point(x3' y1)' new Point(x3' y2)' true);                                      pscollection.Add(curve);                                        PathFigure pf = new PathFigure                                      {                                          StartPoint = new Point(x1' y1)'                                          Segments = pscollection'                                      };                                      PathFigureCollection pfcollection = new PathFigureCollection();                                      pfcollection.Add(pf);                                      PathGeometry pathGeometry = new PathGeometry();                                      pathGeometry.Figures = pfcollection;                                      path.Data = pathGeometry;                                        this.canvasContainer.Children.Add(path);                                  }                                  else                                  {                                      var x3 = x1 + WIDTH / 2;                                      var path = new System.Windows.Shapes.Path                                      {                                          Stroke = new SolidColorBrush(Color.FromArgb(255' 153' 182' 209))'                                          StrokeThickness = 4'                                      };                                        PathSegmentCollection pscollection = new PathSegmentCollection();                                        BezierSegment curve = new BezierSegment(                                          new Point(x3' y1)' new Point(x3' y2)' new Point(x1' y2)' true);                                      pscollection.Add(curve);                                        pscollection.Add(new LineSegment(new Point(x2' y2)' true));                                        PathFigure pf = new PathFigure                                      {                                          StartPoint = new Point(x3' y1)'                                          Segments = pscollection'                                      };                                      PathFigureCollection pfcollection = new PathFigureCollection();                                      pfcollection.Add(pf);                                      PathGeometry pathGeometry = new PathGeometry();                                      pathGeometry.Figures = pfcollection;                                      path.Data = pathGeometry;                                        this.canvasContainer.Children.Add(path);                                  }                              }                                #endregion                          }                            AdjustCanvasSize();                      }                        if (scroll)                      {                          //this.Scaler.ScaleX = this.Scaler.ScaleY = 1;                          //AdjustCanvasSize();                            this.zoomAndPanControl.ContentScale = 1;                          this.canvasContainer.SetValue(Canvas.LeftProperty' 0.0);                          this.canvasContainer.SetValue(Canvas.TopProperty' 0.0);                          this.scrollRoot.ScrollToRightEnd();                      }                  }                  catch (Exception ex)                  {                      Log.WriteLine("History Graph Show: {0}"' ex.ToString());                  }                    HistoryViewCommands.GraphLoaded.Execute(null' this);                };
Magic Number,GitScc.UI,HistoryGraph,C:\repos\yysun_git-tools\GitUI\UI\HistoryGraph.xaml.cs,Show,The following statement contains a magic number: Action action = () =>              {                  try                  {                      IList<GraphNode> commits = null;                      string hash = null;                        if (tracker != null && tracker.IsGit)                      {                          commits = tracker.RepositoryGraph.Nodes;                          hash = GetHashCode(commits);                      }                        bool changed = true; // lastHash == null ? hash != null : !lastHash.Equals(hash);                        if (changed)                      {                          lastHash = hash;                            canvasContainer.Children.Clear();                          maxX = maxY = 0;                            if (changed && commits != null && commits.Any())                          {                              maxX = commits.Count();                              maxY = commits.Max(c => c.X);                                for (int i = commits.Count() - 1; i >= 0; i--)                              {                                  var commit = commits[i];                                    #region Add commit box                                    var box = new CommitBox();                                  box.DataContext = new                                  {                                      Id = commit.Id'                                      ShortId = commit.ShortId'                                      Comments = commit.Message'                                      Author = commit.AuthorName'                                      Date = commit.AuthorDateRelative'                                      Refs = commit.Refs                                  };                                    box.Height = HEIGHT;                                  box.Width = WIDTH;                                    double left = GetScreenX(maxX - commit.Y);                                  double top = GetScreenY(commit.X);                                    Canvas.SetLeft(box' left);                                  Canvas.SetTop(box' top);                                  Canvas.SetZIndex(box' 10);                                    this.canvasContainer.Children.Add(box);                                    #endregion                                    #region Add Branches                                    var m = 0;                                  foreach (var head in commit.Refs.Where(r => r.Type == RefTypes.Branch || r.Type == RefTypes.HEAD))                                  {                                      var control = new CommitHead                                      {                                          DataContext = head'                                      };                                        Canvas.SetLeft(control' left + WIDTH + 4);                                      Canvas.SetTop(control' top + m++ * 30);                                      this.canvasContainer.Children.Add(control);                                    }                                  #endregion                                    #region Add Tags                                  m = 0;                                  foreach (var tag in commit.Refs.Where(r => r.Type == RefTypes.Tag))                                  {                                      var control = new CommitTag                                      {                                          DataContext = tag'                                      };                                        Canvas.SetLeft(control' left + m++ * 80); // TODO: get width of the control                                      Canvas.SetTop(control' top - 24);                                      this.canvasContainer.Children.Add(control);                                  }                                    #endregion                                    #region Add Remote Branches                                  m = 0;                                  foreach (var name in commit.Refs.Where(r => r.Type == RefTypes.RemoteBranch))                                  {                                      var control = new CommitRemote                                      {                                          DataContext = new { Text = name }'                                      };                                        Canvas.SetLeft(control' left + m++ * 100); // TODO: get width of the control                                      Canvas.SetTop(control' top + HEIGHT + 4);                                      this.canvasContainer.Children.Add(control);                                  }                                  #endregion                              }                                #region Add commit links                                var links = tracker.RepositoryGraph.Links;                                foreach (var link in links)                              {                                  // current node                                  double x1 = link.Y1;                                  double y1 = link.X1;                                    // parent node                                  double x2 = link.Y2;                                  double y2 = link.X2;                                    bool flip = links.Any(lnk => lnk.X1 == x2 && lnk.Y2 == y2 && lnk.X1 == lnk.X2);                                    x1 = GetScreenX(maxX - x1);                                  y1 = GetScreenY(y1) + HEIGHT / 2;                                  x2 = GetScreenX(maxX - x2) + WIDTH;                                  y2 = GetScreenY(y2) + HEIGHT / 2;                                    if (y1 == y2)                                  {                                      var line = new Line                                      {                                          Stroke = new SolidColorBrush(Color.FromArgb(255' 153' 182' 209))'                                          StrokeThickness = 4'                                      };                                      line.X1 = x1;                                      line.Y1 = y1;                                      line.X2 = x2;                                      line.Y2 = y2;                                      this.canvasContainer.Children.Add(line);                                  }                                  else if (y1 > y2 && !flip)                                  {                                      var x3 = x2 - WIDTH / 2;                                      var path = new System.Windows.Shapes.Path                                      {                                          Stroke = new SolidColorBrush(Color.FromArgb(255' 153' 182' 209))'                                          StrokeThickness = 4'                                      };                                        PathSegmentCollection pscollection = new PathSegmentCollection();                                        pscollection.Add(new LineSegment(new Point(x2' y1)' true));                                        BezierSegment curve = new BezierSegment(                                          new Point(x2' y1)' new Point(x3' y1)' new Point(x3' y2)' true);                                      pscollection.Add(curve);                                        PathFigure pf = new PathFigure                                      {                                          StartPoint = new Point(x1' y1)'                                          Segments = pscollection'                                      };                                      PathFigureCollection pfcollection = new PathFigureCollection();                                      pfcollection.Add(pf);                                      PathGeometry pathGeometry = new PathGeometry();                                      pathGeometry.Figures = pfcollection;                                      path.Data = pathGeometry;                                        this.canvasContainer.Children.Add(path);                                  }                                  else                                  {                                      var x3 = x1 + WIDTH / 2;                                      var path = new System.Windows.Shapes.Path                                      {                                          Stroke = new SolidColorBrush(Color.FromArgb(255' 153' 182' 209))'                                          StrokeThickness = 4'                                      };                                        PathSegmentCollection pscollection = new PathSegmentCollection();                                        BezierSegment curve = new BezierSegment(                                          new Point(x3' y1)' new Point(x3' y2)' new Point(x1' y2)' true);                                      pscollection.Add(curve);                                        pscollection.Add(new LineSegment(new Point(x2' y2)' true));                                        PathFigure pf = new PathFigure                                      {                                          StartPoint = new Point(x3' y1)'                                          Segments = pscollection'                                      };                                      PathFigureCollection pfcollection = new PathFigureCollection();                                      pfcollection.Add(pf);                                      PathGeometry pathGeometry = new PathGeometry();                                      pathGeometry.Figures = pfcollection;                                      path.Data = pathGeometry;                                        this.canvasContainer.Children.Add(path);                                  }                              }                                #endregion                          }                            AdjustCanvasSize();                      }                        if (scroll)                      {                          //this.Scaler.ScaleX = this.Scaler.ScaleY = 1;                          //AdjustCanvasSize();                            this.zoomAndPanControl.ContentScale = 1;                          this.canvasContainer.SetValue(Canvas.LeftProperty' 0.0);                          this.canvasContainer.SetValue(Canvas.TopProperty' 0.0);                          this.scrollRoot.ScrollToRightEnd();                      }                  }                  catch (Exception ex)                  {                      Log.WriteLine("History Graph Show: {0}"' ex.ToString());                  }                    HistoryViewCommands.GraphLoaded.Execute(null' this);                };
Magic Number,GitScc.UI,HistoryGraph,C:\repos\yysun_git-tools\GitUI\UI\HistoryGraph.xaml.cs,Show,The following statement contains a magic number: Action action = () =>              {                  try                  {                      IList<GraphNode> commits = null;                      string hash = null;                        if (tracker != null && tracker.IsGit)                      {                          commits = tracker.RepositoryGraph.Nodes;                          hash = GetHashCode(commits);                      }                        bool changed = true; // lastHash == null ? hash != null : !lastHash.Equals(hash);                        if (changed)                      {                          lastHash = hash;                            canvasContainer.Children.Clear();                          maxX = maxY = 0;                            if (changed && commits != null && commits.Any())                          {                              maxX = commits.Count();                              maxY = commits.Max(c => c.X);                                for (int i = commits.Count() - 1; i >= 0; i--)                              {                                  var commit = commits[i];                                    #region Add commit box                                    var box = new CommitBox();                                  box.DataContext = new                                  {                                      Id = commit.Id'                                      ShortId = commit.ShortId'                                      Comments = commit.Message'                                      Author = commit.AuthorName'                                      Date = commit.AuthorDateRelative'                                      Refs = commit.Refs                                  };                                    box.Height = HEIGHT;                                  box.Width = WIDTH;                                    double left = GetScreenX(maxX - commit.Y);                                  double top = GetScreenY(commit.X);                                    Canvas.SetLeft(box' left);                                  Canvas.SetTop(box' top);                                  Canvas.SetZIndex(box' 10);                                    this.canvasContainer.Children.Add(box);                                    #endregion                                    #region Add Branches                                    var m = 0;                                  foreach (var head in commit.Refs.Where(r => r.Type == RefTypes.Branch || r.Type == RefTypes.HEAD))                                  {                                      var control = new CommitHead                                      {                                          DataContext = head'                                      };                                        Canvas.SetLeft(control' left + WIDTH + 4);                                      Canvas.SetTop(control' top + m++ * 30);                                      this.canvasContainer.Children.Add(control);                                    }                                  #endregion                                    #region Add Tags                                  m = 0;                                  foreach (var tag in commit.Refs.Where(r => r.Type == RefTypes.Tag))                                  {                                      var control = new CommitTag                                      {                                          DataContext = tag'                                      };                                        Canvas.SetLeft(control' left + m++ * 80); // TODO: get width of the control                                      Canvas.SetTop(control' top - 24);                                      this.canvasContainer.Children.Add(control);                                  }                                    #endregion                                    #region Add Remote Branches                                  m = 0;                                  foreach (var name in commit.Refs.Where(r => r.Type == RefTypes.RemoteBranch))                                  {                                      var control = new CommitRemote                                      {                                          DataContext = new { Text = name }'                                      };                                        Canvas.SetLeft(control' left + m++ * 100); // TODO: get width of the control                                      Canvas.SetTop(control' top + HEIGHT + 4);                                      this.canvasContainer.Children.Add(control);                                  }                                  #endregion                              }                                #region Add commit links                                var links = tracker.RepositoryGraph.Links;                                foreach (var link in links)                              {                                  // current node                                  double x1 = link.Y1;                                  double y1 = link.X1;                                    // parent node                                  double x2 = link.Y2;                                  double y2 = link.X2;                                    bool flip = links.Any(lnk => lnk.X1 == x2 && lnk.Y2 == y2 && lnk.X1 == lnk.X2);                                    x1 = GetScreenX(maxX - x1);                                  y1 = GetScreenY(y1) + HEIGHT / 2;                                  x2 = GetScreenX(maxX - x2) + WIDTH;                                  y2 = GetScreenY(y2) + HEIGHT / 2;                                    if (y1 == y2)                                  {                                      var line = new Line                                      {                                          Stroke = new SolidColorBrush(Color.FromArgb(255' 153' 182' 209))'                                          StrokeThickness = 4'                                      };                                      line.X1 = x1;                                      line.Y1 = y1;                                      line.X2 = x2;                                      line.Y2 = y2;                                      this.canvasContainer.Children.Add(line);                                  }                                  else if (y1 > y2 && !flip)                                  {                                      var x3 = x2 - WIDTH / 2;                                      var path = new System.Windows.Shapes.Path                                      {                                          Stroke = new SolidColorBrush(Color.FromArgb(255' 153' 182' 209))'                                          StrokeThickness = 4'                                      };                                        PathSegmentCollection pscollection = new PathSegmentCollection();                                        pscollection.Add(new LineSegment(new Point(x2' y1)' true));                                        BezierSegment curve = new BezierSegment(                                          new Point(x2' y1)' new Point(x3' y1)' new Point(x3' y2)' true);                                      pscollection.Add(curve);                                        PathFigure pf = new PathFigure                                      {                                          StartPoint = new Point(x1' y1)'                                          Segments = pscollection'                                      };                                      PathFigureCollection pfcollection = new PathFigureCollection();                                      pfcollection.Add(pf);                                      PathGeometry pathGeometry = new PathGeometry();                                      pathGeometry.Figures = pfcollection;                                      path.Data = pathGeometry;                                        this.canvasContainer.Children.Add(path);                                  }                                  else                                  {                                      var x3 = x1 + WIDTH / 2;                                      var path = new System.Windows.Shapes.Path                                      {                                          Stroke = new SolidColorBrush(Color.FromArgb(255' 153' 182' 209))'                                          StrokeThickness = 4'                                      };                                        PathSegmentCollection pscollection = new PathSegmentCollection();                                        BezierSegment curve = new BezierSegment(                                          new Point(x3' y1)' new Point(x3' y2)' new Point(x1' y2)' true);                                      pscollection.Add(curve);                                        pscollection.Add(new LineSegment(new Point(x2' y2)' true));                                        PathFigure pf = new PathFigure                                      {                                          StartPoint = new Point(x3' y1)'                                          Segments = pscollection'                                      };                                      PathFigureCollection pfcollection = new PathFigureCollection();                                      pfcollection.Add(pf);                                      PathGeometry pathGeometry = new PathGeometry();                                      pathGeometry.Figures = pfcollection;                                      path.Data = pathGeometry;                                        this.canvasContainer.Children.Add(path);                                  }                              }                                #endregion                          }                            AdjustCanvasSize();                      }                        if (scroll)                      {                          //this.Scaler.ScaleX = this.Scaler.ScaleY = 1;                          //AdjustCanvasSize();                            this.zoomAndPanControl.ContentScale = 1;                          this.canvasContainer.SetValue(Canvas.LeftProperty' 0.0);                          this.canvasContainer.SetValue(Canvas.TopProperty' 0.0);                          this.scrollRoot.ScrollToRightEnd();                      }                  }                  catch (Exception ex)                  {                      Log.WriteLine("History Graph Show: {0}"' ex.ToString());                  }                    HistoryViewCommands.GraphLoaded.Execute(null' this);                };
Magic Number,GitScc.UI,HistoryGraph,C:\repos\yysun_git-tools\GitUI\UI\HistoryGraph.xaml.cs,Show,The following statement contains a magic number: Action action = () =>              {                  try                  {                      IList<GraphNode> commits = null;                      string hash = null;                        if (tracker != null && tracker.IsGit)                      {                          commits = tracker.RepositoryGraph.Nodes;                          hash = GetHashCode(commits);                      }                        bool changed = true; // lastHash == null ? hash != null : !lastHash.Equals(hash);                        if (changed)                      {                          lastHash = hash;                            canvasContainer.Children.Clear();                          maxX = maxY = 0;                            if (changed && commits != null && commits.Any())                          {                              maxX = commits.Count();                              maxY = commits.Max(c => c.X);                                for (int i = commits.Count() - 1; i >= 0; i--)                              {                                  var commit = commits[i];                                    #region Add commit box                                    var box = new CommitBox();                                  box.DataContext = new                                  {                                      Id = commit.Id'                                      ShortId = commit.ShortId'                                      Comments = commit.Message'                                      Author = commit.AuthorName'                                      Date = commit.AuthorDateRelative'                                      Refs = commit.Refs                                  };                                    box.Height = HEIGHT;                                  box.Width = WIDTH;                                    double left = GetScreenX(maxX - commit.Y);                                  double top = GetScreenY(commit.X);                                    Canvas.SetLeft(box' left);                                  Canvas.SetTop(box' top);                                  Canvas.SetZIndex(box' 10);                                    this.canvasContainer.Children.Add(box);                                    #endregion                                    #region Add Branches                                    var m = 0;                                  foreach (var head in commit.Refs.Where(r => r.Type == RefTypes.Branch || r.Type == RefTypes.HEAD))                                  {                                      var control = new CommitHead                                      {                                          DataContext = head'                                      };                                        Canvas.SetLeft(control' left + WIDTH + 4);                                      Canvas.SetTop(control' top + m++ * 30);                                      this.canvasContainer.Children.Add(control);                                    }                                  #endregion                                    #region Add Tags                                  m = 0;                                  foreach (var tag in commit.Refs.Where(r => r.Type == RefTypes.Tag))                                  {                                      var control = new CommitTag                                      {                                          DataContext = tag'                                      };                                        Canvas.SetLeft(control' left + m++ * 80); // TODO: get width of the control                                      Canvas.SetTop(control' top - 24);                                      this.canvasContainer.Children.Add(control);                                  }                                    #endregion                                    #region Add Remote Branches                                  m = 0;                                  foreach (var name in commit.Refs.Where(r => r.Type == RefTypes.RemoteBranch))                                  {                                      var control = new CommitRemote                                      {                                          DataContext = new { Text = name }'                                      };                                        Canvas.SetLeft(control' left + m++ * 100); // TODO: get width of the control                                      Canvas.SetTop(control' top + HEIGHT + 4);                                      this.canvasContainer.Children.Add(control);                                  }                                  #endregion                              }                                #region Add commit links                                var links = tracker.RepositoryGraph.Links;                                foreach (var link in links)                              {                                  // current node                                  double x1 = link.Y1;                                  double y1 = link.X1;                                    // parent node                                  double x2 = link.Y2;                                  double y2 = link.X2;                                    bool flip = links.Any(lnk => lnk.X1 == x2 && lnk.Y2 == y2 && lnk.X1 == lnk.X2);                                    x1 = GetScreenX(maxX - x1);                                  y1 = GetScreenY(y1) + HEIGHT / 2;                                  x2 = GetScreenX(maxX - x2) + WIDTH;                                  y2 = GetScreenY(y2) + HEIGHT / 2;                                    if (y1 == y2)                                  {                                      var line = new Line                                      {                                          Stroke = new SolidColorBrush(Color.FromArgb(255' 153' 182' 209))'                                          StrokeThickness = 4'                                      };                                      line.X1 = x1;                                      line.Y1 = y1;                                      line.X2 = x2;                                      line.Y2 = y2;                                      this.canvasContainer.Children.Add(line);                                  }                                  else if (y1 > y2 && !flip)                                  {                                      var x3 = x2 - WIDTH / 2;                                      var path = new System.Windows.Shapes.Path                                      {                                          Stroke = new SolidColorBrush(Color.FromArgb(255' 153' 182' 209))'                                          StrokeThickness = 4'                                      };                                        PathSegmentCollection pscollection = new PathSegmentCollection();                                        pscollection.Add(new LineSegment(new Point(x2' y1)' true));                                        BezierSegment curve = new BezierSegment(                                          new Point(x2' y1)' new Point(x3' y1)' new Point(x3' y2)' true);                                      pscollection.Add(curve);                                        PathFigure pf = new PathFigure                                      {                                          StartPoint = new Point(x1' y1)'                                          Segments = pscollection'                                      };                                      PathFigureCollection pfcollection = new PathFigureCollection();                                      pfcollection.Add(pf);                                      PathGeometry pathGeometry = new PathGeometry();                                      pathGeometry.Figures = pfcollection;                                      path.Data = pathGeometry;                                        this.canvasContainer.Children.Add(path);                                  }                                  else                                  {                                      var x3 = x1 + WIDTH / 2;                                      var path = new System.Windows.Shapes.Path                                      {                                          Stroke = new SolidColorBrush(Color.FromArgb(255' 153' 182' 209))'                                          StrokeThickness = 4'                                      };                                        PathSegmentCollection pscollection = new PathSegmentCollection();                                        BezierSegment curve = new BezierSegment(                                          new Point(x3' y1)' new Point(x3' y2)' new Point(x1' y2)' true);                                      pscollection.Add(curve);                                        pscollection.Add(new LineSegment(new Point(x2' y2)' true));                                        PathFigure pf = new PathFigure                                      {                                          StartPoint = new Point(x3' y1)'                                          Segments = pscollection'                                      };                                      PathFigureCollection pfcollection = new PathFigureCollection();                                      pfcollection.Add(pf);                                      PathGeometry pathGeometry = new PathGeometry();                                      pathGeometry.Figures = pfcollection;                                      path.Data = pathGeometry;                                        this.canvasContainer.Children.Add(path);                                  }                              }                                #endregion                          }                            AdjustCanvasSize();                      }                        if (scroll)                      {                          //this.Scaler.ScaleX = this.Scaler.ScaleY = 1;                          //AdjustCanvasSize();                            this.zoomAndPanControl.ContentScale = 1;                          this.canvasContainer.SetValue(Canvas.LeftProperty' 0.0);                          this.canvasContainer.SetValue(Canvas.TopProperty' 0.0);                          this.scrollRoot.ScrollToRightEnd();                      }                  }                  catch (Exception ex)                  {                      Log.WriteLine("History Graph Show: {0}"' ex.ToString());                  }                    HistoryViewCommands.GraphLoaded.Execute(null' this);                };
Magic Number,GitScc.UI,HistoryGraph,C:\repos\yysun_git-tools\GitUI\UI\HistoryGraph.xaml.cs,Show,The following statement contains a magic number: Action action = () =>              {                  try                  {                      IList<GraphNode> commits = null;                      string hash = null;                        if (tracker != null && tracker.IsGit)                      {                          commits = tracker.RepositoryGraph.Nodes;                          hash = GetHashCode(commits);                      }                        bool changed = true; // lastHash == null ? hash != null : !lastHash.Equals(hash);                        if (changed)                      {                          lastHash = hash;                            canvasContainer.Children.Clear();                          maxX = maxY = 0;                            if (changed && commits != null && commits.Any())                          {                              maxX = commits.Count();                              maxY = commits.Max(c => c.X);                                for (int i = commits.Count() - 1; i >= 0; i--)                              {                                  var commit = commits[i];                                    #region Add commit box                                    var box = new CommitBox();                                  box.DataContext = new                                  {                                      Id = commit.Id'                                      ShortId = commit.ShortId'                                      Comments = commit.Message'                                      Author = commit.AuthorName'                                      Date = commit.AuthorDateRelative'                                      Refs = commit.Refs                                  };                                    box.Height = HEIGHT;                                  box.Width = WIDTH;                                    double left = GetScreenX(maxX - commit.Y);                                  double top = GetScreenY(commit.X);                                    Canvas.SetLeft(box' left);                                  Canvas.SetTop(box' top);                                  Canvas.SetZIndex(box' 10);                                    this.canvasContainer.Children.Add(box);                                    #endregion                                    #region Add Branches                                    var m = 0;                                  foreach (var head in commit.Refs.Where(r => r.Type == RefTypes.Branch || r.Type == RefTypes.HEAD))                                  {                                      var control = new CommitHead                                      {                                          DataContext = head'                                      };                                        Canvas.SetLeft(control' left + WIDTH + 4);                                      Canvas.SetTop(control' top + m++ * 30);                                      this.canvasContainer.Children.Add(control);                                    }                                  #endregion                                    #region Add Tags                                  m = 0;                                  foreach (var tag in commit.Refs.Where(r => r.Type == RefTypes.Tag))                                  {                                      var control = new CommitTag                                      {                                          DataContext = tag'                                      };                                        Canvas.SetLeft(control' left + m++ * 80); // TODO: get width of the control                                      Canvas.SetTop(control' top - 24);                                      this.canvasContainer.Children.Add(control);                                  }                                    #endregion                                    #region Add Remote Branches                                  m = 0;                                  foreach (var name in commit.Refs.Where(r => r.Type == RefTypes.RemoteBranch))                                  {                                      var control = new CommitRemote                                      {                                          DataContext = new { Text = name }'                                      };                                        Canvas.SetLeft(control' left + m++ * 100); // TODO: get width of the control                                      Canvas.SetTop(control' top + HEIGHT + 4);                                      this.canvasContainer.Children.Add(control);                                  }                                  #endregion                              }                                #region Add commit links                                var links = tracker.RepositoryGraph.Links;                                foreach (var link in links)                              {                                  // current node                                  double x1 = link.Y1;                                  double y1 = link.X1;                                    // parent node                                  double x2 = link.Y2;                                  double y2 = link.X2;                                    bool flip = links.Any(lnk => lnk.X1 == x2 && lnk.Y2 == y2 && lnk.X1 == lnk.X2);                                    x1 = GetScreenX(maxX - x1);                                  y1 = GetScreenY(y1) + HEIGHT / 2;                                  x2 = GetScreenX(maxX - x2) + WIDTH;                                  y2 = GetScreenY(y2) + HEIGHT / 2;                                    if (y1 == y2)                                  {                                      var line = new Line                                      {                                          Stroke = new SolidColorBrush(Color.FromArgb(255' 153' 182' 209))'                                          StrokeThickness = 4'                                      };                                      line.X1 = x1;                                      line.Y1 = y1;                                      line.X2 = x2;                                      line.Y2 = y2;                                      this.canvasContainer.Children.Add(line);                                  }                                  else if (y1 > y2 && !flip)                                  {                                      var x3 = x2 - WIDTH / 2;                                      var path = new System.Windows.Shapes.Path                                      {                                          Stroke = new SolidColorBrush(Color.FromArgb(255' 153' 182' 209))'                                          StrokeThickness = 4'                                      };                                        PathSegmentCollection pscollection = new PathSegmentCollection();                                        pscollection.Add(new LineSegment(new Point(x2' y1)' true));                                        BezierSegment curve = new BezierSegment(                                          new Point(x2' y1)' new Point(x3' y1)' new Point(x3' y2)' true);                                      pscollection.Add(curve);                                        PathFigure pf = new PathFigure                                      {                                          StartPoint = new Point(x1' y1)'                                          Segments = pscollection'                                      };                                      PathFigureCollection pfcollection = new PathFigureCollection();                                      pfcollection.Add(pf);                                      PathGeometry pathGeometry = new PathGeometry();                                      pathGeometry.Figures = pfcollection;                                      path.Data = pathGeometry;                                        this.canvasContainer.Children.Add(path);                                  }                                  else                                  {                                      var x3 = x1 + WIDTH / 2;                                      var path = new System.Windows.Shapes.Path                                      {                                          Stroke = new SolidColorBrush(Color.FromArgb(255' 153' 182' 209))'                                          StrokeThickness = 4'                                      };                                        PathSegmentCollection pscollection = new PathSegmentCollection();                                        BezierSegment curve = new BezierSegment(                                          new Point(x3' y1)' new Point(x3' y2)' new Point(x1' y2)' true);                                      pscollection.Add(curve);                                        pscollection.Add(new LineSegment(new Point(x2' y2)' true));                                        PathFigure pf = new PathFigure                                      {                                          StartPoint = new Point(x3' y1)'                                          Segments = pscollection'                                      };                                      PathFigureCollection pfcollection = new PathFigureCollection();                                      pfcollection.Add(pf);                                      PathGeometry pathGeometry = new PathGeometry();                                      pathGeometry.Figures = pfcollection;                                      path.Data = pathGeometry;                                        this.canvasContainer.Children.Add(path);                                  }                              }                                #endregion                          }                            AdjustCanvasSize();                      }                        if (scroll)                      {                          //this.Scaler.ScaleX = this.Scaler.ScaleY = 1;                          //AdjustCanvasSize();                            this.zoomAndPanControl.ContentScale = 1;                          this.canvasContainer.SetValue(Canvas.LeftProperty' 0.0);                          this.canvasContainer.SetValue(Canvas.TopProperty' 0.0);                          this.scrollRoot.ScrollToRightEnd();                      }                  }                  catch (Exception ex)                  {                      Log.WriteLine("History Graph Show: {0}"' ex.ToString());                  }                    HistoryViewCommands.GraphLoaded.Execute(null' this);                };
Magic Number,GitScc.UI,HistoryGraph,C:\repos\yysun_git-tools\GitUI\UI\HistoryGraph.xaml.cs,Show,The following statement contains a magic number: Action action = () =>              {                  try                  {                      IList<GraphNode> commits = null;                      string hash = null;                        if (tracker != null && tracker.IsGit)                      {                          commits = tracker.RepositoryGraph.Nodes;                          hash = GetHashCode(commits);                      }                        bool changed = true; // lastHash == null ? hash != null : !lastHash.Equals(hash);                        if (changed)                      {                          lastHash = hash;                            canvasContainer.Children.Clear();                          maxX = maxY = 0;                            if (changed && commits != null && commits.Any())                          {                              maxX = commits.Count();                              maxY = commits.Max(c => c.X);                                for (int i = commits.Count() - 1; i >= 0; i--)                              {                                  var commit = commits[i];                                    #region Add commit box                                    var box = new CommitBox();                                  box.DataContext = new                                  {                                      Id = commit.Id'                                      ShortId = commit.ShortId'                                      Comments = commit.Message'                                      Author = commit.AuthorName'                                      Date = commit.AuthorDateRelative'                                      Refs = commit.Refs                                  };                                    box.Height = HEIGHT;                                  box.Width = WIDTH;                                    double left = GetScreenX(maxX - commit.Y);                                  double top = GetScreenY(commit.X);                                    Canvas.SetLeft(box' left);                                  Canvas.SetTop(box' top);                                  Canvas.SetZIndex(box' 10);                                    this.canvasContainer.Children.Add(box);                                    #endregion                                    #region Add Branches                                    var m = 0;                                  foreach (var head in commit.Refs.Where(r => r.Type == RefTypes.Branch || r.Type == RefTypes.HEAD))                                  {                                      var control = new CommitHead                                      {                                          DataContext = head'                                      };                                        Canvas.SetLeft(control' left + WIDTH + 4);                                      Canvas.SetTop(control' top + m++ * 30);                                      this.canvasContainer.Children.Add(control);                                    }                                  #endregion                                    #region Add Tags                                  m = 0;                                  foreach (var tag in commit.Refs.Where(r => r.Type == RefTypes.Tag))                                  {                                      var control = new CommitTag                                      {                                          DataContext = tag'                                      };                                        Canvas.SetLeft(control' left + m++ * 80); // TODO: get width of the control                                      Canvas.SetTop(control' top - 24);                                      this.canvasContainer.Children.Add(control);                                  }                                    #endregion                                    #region Add Remote Branches                                  m = 0;                                  foreach (var name in commit.Refs.Where(r => r.Type == RefTypes.RemoteBranch))                                  {                                      var control = new CommitRemote                                      {                                          DataContext = new { Text = name }'                                      };                                        Canvas.SetLeft(control' left + m++ * 100); // TODO: get width of the control                                      Canvas.SetTop(control' top + HEIGHT + 4);                                      this.canvasContainer.Children.Add(control);                                  }                                  #endregion                              }                                #region Add commit links                                var links = tracker.RepositoryGraph.Links;                                foreach (var link in links)                              {                                  // current node                                  double x1 = link.Y1;                                  double y1 = link.X1;                                    // parent node                                  double x2 = link.Y2;                                  double y2 = link.X2;                                    bool flip = links.Any(lnk => lnk.X1 == x2 && lnk.Y2 == y2 && lnk.X1 == lnk.X2);                                    x1 = GetScreenX(maxX - x1);                                  y1 = GetScreenY(y1) + HEIGHT / 2;                                  x2 = GetScreenX(maxX - x2) + WIDTH;                                  y2 = GetScreenY(y2) + HEIGHT / 2;                                    if (y1 == y2)                                  {                                      var line = new Line                                      {                                          Stroke = new SolidColorBrush(Color.FromArgb(255' 153' 182' 209))'                                          StrokeThickness = 4'                                      };                                      line.X1 = x1;                                      line.Y1 = y1;                                      line.X2 = x2;                                      line.Y2 = y2;                                      this.canvasContainer.Children.Add(line);                                  }                                  else if (y1 > y2 && !flip)                                  {                                      var x3 = x2 - WIDTH / 2;                                      var path = new System.Windows.Shapes.Path                                      {                                          Stroke = new SolidColorBrush(Color.FromArgb(255' 153' 182' 209))'                                          StrokeThickness = 4'                                      };                                        PathSegmentCollection pscollection = new PathSegmentCollection();                                        pscollection.Add(new LineSegment(new Point(x2' y1)' true));                                        BezierSegment curve = new BezierSegment(                                          new Point(x2' y1)' new Point(x3' y1)' new Point(x3' y2)' true);                                      pscollection.Add(curve);                                        PathFigure pf = new PathFigure                                      {                                          StartPoint = new Point(x1' y1)'                                          Segments = pscollection'                                      };                                      PathFigureCollection pfcollection = new PathFigureCollection();                                      pfcollection.Add(pf);                                      PathGeometry pathGeometry = new PathGeometry();                                      pathGeometry.Figures = pfcollection;                                      path.Data = pathGeometry;                                        this.canvasContainer.Children.Add(path);                                  }                                  else                                  {                                      var x3 = x1 + WIDTH / 2;                                      var path = new System.Windows.Shapes.Path                                      {                                          Stroke = new SolidColorBrush(Color.FromArgb(255' 153' 182' 209))'                                          StrokeThickness = 4'                                      };                                        PathSegmentCollection pscollection = new PathSegmentCollection();                                        BezierSegment curve = new BezierSegment(                                          new Point(x3' y1)' new Point(x3' y2)' new Point(x1' y2)' true);                                      pscollection.Add(curve);                                        pscollection.Add(new LineSegment(new Point(x2' y2)' true));                                        PathFigure pf = new PathFigure                                      {                                          StartPoint = new Point(x3' y1)'                                          Segments = pscollection'                                      };                                      PathFigureCollection pfcollection = new PathFigureCollection();                                      pfcollection.Add(pf);                                      PathGeometry pathGeometry = new PathGeometry();                                      pathGeometry.Figures = pfcollection;                                      path.Data = pathGeometry;                                        this.canvasContainer.Children.Add(path);                                  }                              }                                #endregion                          }                            AdjustCanvasSize();                      }                        if (scroll)                      {                          //this.Scaler.ScaleX = this.Scaler.ScaleY = 1;                          //AdjustCanvasSize();                            this.zoomAndPanControl.ContentScale = 1;                          this.canvasContainer.SetValue(Canvas.LeftProperty' 0.0);                          this.canvasContainer.SetValue(Canvas.TopProperty' 0.0);                          this.scrollRoot.ScrollToRightEnd();                      }                  }                  catch (Exception ex)                  {                      Log.WriteLine("History Graph Show: {0}"' ex.ToString());                  }                    HistoryViewCommands.GraphLoaded.Execute(null' this);                };
Magic Number,GitScc.UI,HistoryGraph,C:\repos\yysun_git-tools\GitUI\UI\HistoryGraph.xaml.cs,Show,The following statement contains a magic number: Action action = () =>              {                  try                  {                      IList<GraphNode> commits = null;                      string hash = null;                        if (tracker != null && tracker.IsGit)                      {                          commits = tracker.RepositoryGraph.Nodes;                          hash = GetHashCode(commits);                      }                        bool changed = true; // lastHash == null ? hash != null : !lastHash.Equals(hash);                        if (changed)                      {                          lastHash = hash;                            canvasContainer.Children.Clear();                          maxX = maxY = 0;                            if (changed && commits != null && commits.Any())                          {                              maxX = commits.Count();                              maxY = commits.Max(c => c.X);                                for (int i = commits.Count() - 1; i >= 0; i--)                              {                                  var commit = commits[i];                                    #region Add commit box                                    var box = new CommitBox();                                  box.DataContext = new                                  {                                      Id = commit.Id'                                      ShortId = commit.ShortId'                                      Comments = commit.Message'                                      Author = commit.AuthorName'                                      Date = commit.AuthorDateRelative'                                      Refs = commit.Refs                                  };                                    box.Height = HEIGHT;                                  box.Width = WIDTH;                                    double left = GetScreenX(maxX - commit.Y);                                  double top = GetScreenY(commit.X);                                    Canvas.SetLeft(box' left);                                  Canvas.SetTop(box' top);                                  Canvas.SetZIndex(box' 10);                                    this.canvasContainer.Children.Add(box);                                    #endregion                                    #region Add Branches                                    var m = 0;                                  foreach (var head in commit.Refs.Where(r => r.Type == RefTypes.Branch || r.Type == RefTypes.HEAD))                                  {                                      var control = new CommitHead                                      {                                          DataContext = head'                                      };                                        Canvas.SetLeft(control' left + WIDTH + 4);                                      Canvas.SetTop(control' top + m++ * 30);                                      this.canvasContainer.Children.Add(control);                                    }                                  #endregion                                    #region Add Tags                                  m = 0;                                  foreach (var tag in commit.Refs.Where(r => r.Type == RefTypes.Tag))                                  {                                      var control = new CommitTag                                      {                                          DataContext = tag'                                      };                                        Canvas.SetLeft(control' left + m++ * 80); // TODO: get width of the control                                      Canvas.SetTop(control' top - 24);                                      this.canvasContainer.Children.Add(control);                                  }                                    #endregion                                    #region Add Remote Branches                                  m = 0;                                  foreach (var name in commit.Refs.Where(r => r.Type == RefTypes.RemoteBranch))                                  {                                      var control = new CommitRemote                                      {                                          DataContext = new { Text = name }'                                      };                                        Canvas.SetLeft(control' left + m++ * 100); // TODO: get width of the control                                      Canvas.SetTop(control' top + HEIGHT + 4);                                      this.canvasContainer.Children.Add(control);                                  }                                  #endregion                              }                                #region Add commit links                                var links = tracker.RepositoryGraph.Links;                                foreach (var link in links)                              {                                  // current node                                  double x1 = link.Y1;                                  double y1 = link.X1;                                    // parent node                                  double x2 = link.Y2;                                  double y2 = link.X2;                                    bool flip = links.Any(lnk => lnk.X1 == x2 && lnk.Y2 == y2 && lnk.X1 == lnk.X2);                                    x1 = GetScreenX(maxX - x1);                                  y1 = GetScreenY(y1) + HEIGHT / 2;                                  x2 = GetScreenX(maxX - x2) + WIDTH;                                  y2 = GetScreenY(y2) + HEIGHT / 2;                                    if (y1 == y2)                                  {                                      var line = new Line                                      {                                          Stroke = new SolidColorBrush(Color.FromArgb(255' 153' 182' 209))'                                          StrokeThickness = 4'                                      };                                      line.X1 = x1;                                      line.Y1 = y1;                                      line.X2 = x2;                                      line.Y2 = y2;                                      this.canvasContainer.Children.Add(line);                                  }                                  else if (y1 > y2 && !flip)                                  {                                      var x3 = x2 - WIDTH / 2;                                      var path = new System.Windows.Shapes.Path                                      {                                          Stroke = new SolidColorBrush(Color.FromArgb(255' 153' 182' 209))'                                          StrokeThickness = 4'                                      };                                        PathSegmentCollection pscollection = new PathSegmentCollection();                                        pscollection.Add(new LineSegment(new Point(x2' y1)' true));                                        BezierSegment curve = new BezierSegment(                                          new Point(x2' y1)' new Point(x3' y1)' new Point(x3' y2)' true);                                      pscollection.Add(curve);                                        PathFigure pf = new PathFigure                                      {                                          StartPoint = new Point(x1' y1)'                                          Segments = pscollection'                                      };                                      PathFigureCollection pfcollection = new PathFigureCollection();                                      pfcollection.Add(pf);                                      PathGeometry pathGeometry = new PathGeometry();                                      pathGeometry.Figures = pfcollection;                                      path.Data = pathGeometry;                                        this.canvasContainer.Children.Add(path);                                  }                                  else                                  {                                      var x3 = x1 + WIDTH / 2;                                      var path = new System.Windows.Shapes.Path                                      {                                          Stroke = new SolidColorBrush(Color.FromArgb(255' 153' 182' 209))'                                          StrokeThickness = 4'                                      };                                        PathSegmentCollection pscollection = new PathSegmentCollection();                                        BezierSegment curve = new BezierSegment(                                          new Point(x3' y1)' new Point(x3' y2)' new Point(x1' y2)' true);                                      pscollection.Add(curve);                                        pscollection.Add(new LineSegment(new Point(x2' y2)' true));                                        PathFigure pf = new PathFigure                                      {                                          StartPoint = new Point(x3' y1)'                                          Segments = pscollection'                                      };                                      PathFigureCollection pfcollection = new PathFigureCollection();                                      pfcollection.Add(pf);                                      PathGeometry pathGeometry = new PathGeometry();                                      pathGeometry.Figures = pfcollection;                                      path.Data = pathGeometry;                                        this.canvasContainer.Children.Add(path);                                  }                              }                                #endregion                          }                            AdjustCanvasSize();                      }                        if (scroll)                      {                          //this.Scaler.ScaleX = this.Scaler.ScaleY = 1;                          //AdjustCanvasSize();                            this.zoomAndPanControl.ContentScale = 1;                          this.canvasContainer.SetValue(Canvas.LeftProperty' 0.0);                          this.canvasContainer.SetValue(Canvas.TopProperty' 0.0);                          this.scrollRoot.ScrollToRightEnd();                      }                  }                  catch (Exception ex)                  {                      Log.WriteLine("History Graph Show: {0}"' ex.ToString());                  }                    HistoryViewCommands.GraphLoaded.Execute(null' this);                };
Magic Number,GitScc.UI,HistoryGraph,C:\repos\yysun_git-tools\GitUI\UI\HistoryGraph.xaml.cs,Show,The following statement contains a magic number: Action action = () =>              {                  try                  {                      IList<GraphNode> commits = null;                      string hash = null;                        if (tracker != null && tracker.IsGit)                      {                          commits = tracker.RepositoryGraph.Nodes;                          hash = GetHashCode(commits);                      }                        bool changed = true; // lastHash == null ? hash != null : !lastHash.Equals(hash);                        if (changed)                      {                          lastHash = hash;                            canvasContainer.Children.Clear();                          maxX = maxY = 0;                            if (changed && commits != null && commits.Any())                          {                              maxX = commits.Count();                              maxY = commits.Max(c => c.X);                                for (int i = commits.Count() - 1; i >= 0; i--)                              {                                  var commit = commits[i];                                    #region Add commit box                                    var box = new CommitBox();                                  box.DataContext = new                                  {                                      Id = commit.Id'                                      ShortId = commit.ShortId'                                      Comments = commit.Message'                                      Author = commit.AuthorName'                                      Date = commit.AuthorDateRelative'                                      Refs = commit.Refs                                  };                                    box.Height = HEIGHT;                                  box.Width = WIDTH;                                    double left = GetScreenX(maxX - commit.Y);                                  double top = GetScreenY(commit.X);                                    Canvas.SetLeft(box' left);                                  Canvas.SetTop(box' top);                                  Canvas.SetZIndex(box' 10);                                    this.canvasContainer.Children.Add(box);                                    #endregion                                    #region Add Branches                                    var m = 0;                                  foreach (var head in commit.Refs.Where(r => r.Type == RefTypes.Branch || r.Type == RefTypes.HEAD))                                  {                                      var control = new CommitHead                                      {                                          DataContext = head'                                      };                                        Canvas.SetLeft(control' left + WIDTH + 4);                                      Canvas.SetTop(control' top + m++ * 30);                                      this.canvasContainer.Children.Add(control);                                    }                                  #endregion                                    #region Add Tags                                  m = 0;                                  foreach (var tag in commit.Refs.Where(r => r.Type == RefTypes.Tag))                                  {                                      var control = new CommitTag                                      {                                          DataContext = tag'                                      };                                        Canvas.SetLeft(control' left + m++ * 80); // TODO: get width of the control                                      Canvas.SetTop(control' top - 24);                                      this.canvasContainer.Children.Add(control);                                  }                                    #endregion                                    #region Add Remote Branches                                  m = 0;                                  foreach (var name in commit.Refs.Where(r => r.Type == RefTypes.RemoteBranch))                                  {                                      var control = new CommitRemote                                      {                                          DataContext = new { Text = name }'                                      };                                        Canvas.SetLeft(control' left + m++ * 100); // TODO: get width of the control                                      Canvas.SetTop(control' top + HEIGHT + 4);                                      this.canvasContainer.Children.Add(control);                                  }                                  #endregion                              }                                #region Add commit links                                var links = tracker.RepositoryGraph.Links;                                foreach (var link in links)                              {                                  // current node                                  double x1 = link.Y1;                                  double y1 = link.X1;                                    // parent node                                  double x2 = link.Y2;                                  double y2 = link.X2;                                    bool flip = links.Any(lnk => lnk.X1 == x2 && lnk.Y2 == y2 && lnk.X1 == lnk.X2);                                    x1 = GetScreenX(maxX - x1);                                  y1 = GetScreenY(y1) + HEIGHT / 2;                                  x2 = GetScreenX(maxX - x2) + WIDTH;                                  y2 = GetScreenY(y2) + HEIGHT / 2;                                    if (y1 == y2)                                  {                                      var line = new Line                                      {                                          Stroke = new SolidColorBrush(Color.FromArgb(255' 153' 182' 209))'                                          StrokeThickness = 4'                                      };                                      line.X1 = x1;                                      line.Y1 = y1;                                      line.X2 = x2;                                      line.Y2 = y2;                                      this.canvasContainer.Children.Add(line);                                  }                                  else if (y1 > y2 && !flip)                                  {                                      var x3 = x2 - WIDTH / 2;                                      var path = new System.Windows.Shapes.Path                                      {                                          Stroke = new SolidColorBrush(Color.FromArgb(255' 153' 182' 209))'                                          StrokeThickness = 4'                                      };                                        PathSegmentCollection pscollection = new PathSegmentCollection();                                        pscollection.Add(new LineSegment(new Point(x2' y1)' true));                                        BezierSegment curve = new BezierSegment(                                          new Point(x2' y1)' new Point(x3' y1)' new Point(x3' y2)' true);                                      pscollection.Add(curve);                                        PathFigure pf = new PathFigure                                      {                                          StartPoint = new Point(x1' y1)'                                          Segments = pscollection'                                      };                                      PathFigureCollection pfcollection = new PathFigureCollection();                                      pfcollection.Add(pf);                                      PathGeometry pathGeometry = new PathGeometry();                                      pathGeometry.Figures = pfcollection;                                      path.Data = pathGeometry;                                        this.canvasContainer.Children.Add(path);                                  }                                  else                                  {                                      var x3 = x1 + WIDTH / 2;                                      var path = new System.Windows.Shapes.Path                                      {                                          Stroke = new SolidColorBrush(Color.FromArgb(255' 153' 182' 209))'                                          StrokeThickness = 4'                                      };                                        PathSegmentCollection pscollection = new PathSegmentCollection();                                        BezierSegment curve = new BezierSegment(                                          new Point(x3' y1)' new Point(x3' y2)' new Point(x1' y2)' true);                                      pscollection.Add(curve);                                        pscollection.Add(new LineSegment(new Point(x2' y2)' true));                                        PathFigure pf = new PathFigure                                      {                                          StartPoint = new Point(x3' y1)'                                          Segments = pscollection'                                      };                                      PathFigureCollection pfcollection = new PathFigureCollection();                                      pfcollection.Add(pf);                                      PathGeometry pathGeometry = new PathGeometry();                                      pathGeometry.Figures = pfcollection;                                      path.Data = pathGeometry;                                        this.canvasContainer.Children.Add(path);                                  }                              }                                #endregion                          }                            AdjustCanvasSize();                      }                        if (scroll)                      {                          //this.Scaler.ScaleX = this.Scaler.ScaleY = 1;                          //AdjustCanvasSize();                            this.zoomAndPanControl.ContentScale = 1;                          this.canvasContainer.SetValue(Canvas.LeftProperty' 0.0);                          this.canvasContainer.SetValue(Canvas.TopProperty' 0.0);                          this.scrollRoot.ScrollToRightEnd();                      }                  }                  catch (Exception ex)                  {                      Log.WriteLine("History Graph Show: {0}"' ex.ToString());                  }                    HistoryViewCommands.GraphLoaded.Execute(null' this);                };
Magic Number,GitScc.UI,HistoryGraph,C:\repos\yysun_git-tools\GitUI\UI\HistoryGraph.xaml.cs,Show,The following statement contains a magic number: Action action = () =>              {                  try                  {                      IList<GraphNode> commits = null;                      string hash = null;                        if (tracker != null && tracker.IsGit)                      {                          commits = tracker.RepositoryGraph.Nodes;                          hash = GetHashCode(commits);                      }                        bool changed = true; // lastHash == null ? hash != null : !lastHash.Equals(hash);                        if (changed)                      {                          lastHash = hash;                            canvasContainer.Children.Clear();                          maxX = maxY = 0;                            if (changed && commits != null && commits.Any())                          {                              maxX = commits.Count();                              maxY = commits.Max(c => c.X);                                for (int i = commits.Count() - 1; i >= 0; i--)                              {                                  var commit = commits[i];                                    #region Add commit box                                    var box = new CommitBox();                                  box.DataContext = new                                  {                                      Id = commit.Id'                                      ShortId = commit.ShortId'                                      Comments = commit.Message'                                      Author = commit.AuthorName'                                      Date = commit.AuthorDateRelative'                                      Refs = commit.Refs                                  };                                    box.Height = HEIGHT;                                  box.Width = WIDTH;                                    double left = GetScreenX(maxX - commit.Y);                                  double top = GetScreenY(commit.X);                                    Canvas.SetLeft(box' left);                                  Canvas.SetTop(box' top);                                  Canvas.SetZIndex(box' 10);                                    this.canvasContainer.Children.Add(box);                                    #endregion                                    #region Add Branches                                    var m = 0;                                  foreach (var head in commit.Refs.Where(r => r.Type == RefTypes.Branch || r.Type == RefTypes.HEAD))                                  {                                      var control = new CommitHead                                      {                                          DataContext = head'                                      };                                        Canvas.SetLeft(control' left + WIDTH + 4);                                      Canvas.SetTop(control' top + m++ * 30);                                      this.canvasContainer.Children.Add(control);                                    }                                  #endregion                                    #region Add Tags                                  m = 0;                                  foreach (var tag in commit.Refs.Where(r => r.Type == RefTypes.Tag))                                  {                                      var control = new CommitTag                                      {                                          DataContext = tag'                                      };                                        Canvas.SetLeft(control' left + m++ * 80); // TODO: get width of the control                                      Canvas.SetTop(control' top - 24);                                      this.canvasContainer.Children.Add(control);                                  }                                    #endregion                                    #region Add Remote Branches                                  m = 0;                                  foreach (var name in commit.Refs.Where(r => r.Type == RefTypes.RemoteBranch))                                  {                                      var control = new CommitRemote                                      {                                          DataContext = new { Text = name }'                                      };                                        Canvas.SetLeft(control' left + m++ * 100); // TODO: get width of the control                                      Canvas.SetTop(control' top + HEIGHT + 4);                                      this.canvasContainer.Children.Add(control);                                  }                                  #endregion                              }                                #region Add commit links                                var links = tracker.RepositoryGraph.Links;                                foreach (var link in links)                              {                                  // current node                                  double x1 = link.Y1;                                  double y1 = link.X1;                                    // parent node                                  double x2 = link.Y2;                                  double y2 = link.X2;                                    bool flip = links.Any(lnk => lnk.X1 == x2 && lnk.Y2 == y2 && lnk.X1 == lnk.X2);                                    x1 = GetScreenX(maxX - x1);                                  y1 = GetScreenY(y1) + HEIGHT / 2;                                  x2 = GetScreenX(maxX - x2) + WIDTH;                                  y2 = GetScreenY(y2) + HEIGHT / 2;                                    if (y1 == y2)                                  {                                      var line = new Line                                      {                                          Stroke = new SolidColorBrush(Color.FromArgb(255' 153' 182' 209))'                                          StrokeThickness = 4'                                      };                                      line.X1 = x1;                                      line.Y1 = y1;                                      line.X2 = x2;                                      line.Y2 = y2;                                      this.canvasContainer.Children.Add(line);                                  }                                  else if (y1 > y2 && !flip)                                  {                                      var x3 = x2 - WIDTH / 2;                                      var path = new System.Windows.Shapes.Path                                      {                                          Stroke = new SolidColorBrush(Color.FromArgb(255' 153' 182' 209))'                                          StrokeThickness = 4'                                      };                                        PathSegmentCollection pscollection = new PathSegmentCollection();                                        pscollection.Add(new LineSegment(new Point(x2' y1)' true));                                        BezierSegment curve = new BezierSegment(                                          new Point(x2' y1)' new Point(x3' y1)' new Point(x3' y2)' true);                                      pscollection.Add(curve);                                        PathFigure pf = new PathFigure                                      {                                          StartPoint = new Point(x1' y1)'                                          Segments = pscollection'                                      };                                      PathFigureCollection pfcollection = new PathFigureCollection();                                      pfcollection.Add(pf);                                      PathGeometry pathGeometry = new PathGeometry();                                      pathGeometry.Figures = pfcollection;                                      path.Data = pathGeometry;                                        this.canvasContainer.Children.Add(path);                                  }                                  else                                  {                                      var x3 = x1 + WIDTH / 2;                                      var path = new System.Windows.Shapes.Path                                      {                                          Stroke = new SolidColorBrush(Color.FromArgb(255' 153' 182' 209))'                                          StrokeThickness = 4'                                      };                                        PathSegmentCollection pscollection = new PathSegmentCollection();                                        BezierSegment curve = new BezierSegment(                                          new Point(x3' y1)' new Point(x3' y2)' new Point(x1' y2)' true);                                      pscollection.Add(curve);                                        pscollection.Add(new LineSegment(new Point(x2' y2)' true));                                        PathFigure pf = new PathFigure                                      {                                          StartPoint = new Point(x3' y1)'                                          Segments = pscollection'                                      };                                      PathFigureCollection pfcollection = new PathFigureCollection();                                      pfcollection.Add(pf);                                      PathGeometry pathGeometry = new PathGeometry();                                      pathGeometry.Figures = pfcollection;                                      path.Data = pathGeometry;                                        this.canvasContainer.Children.Add(path);                                  }                              }                                #endregion                          }                            AdjustCanvasSize();                      }                        if (scroll)                      {                          //this.Scaler.ScaleX = this.Scaler.ScaleY = 1;                          //AdjustCanvasSize();                            this.zoomAndPanControl.ContentScale = 1;                          this.canvasContainer.SetValue(Canvas.LeftProperty' 0.0);                          this.canvasContainer.SetValue(Canvas.TopProperty' 0.0);                          this.scrollRoot.ScrollToRightEnd();                      }                  }                  catch (Exception ex)                  {                      Log.WriteLine("History Graph Show: {0}"' ex.ToString());                  }                    HistoryViewCommands.GraphLoaded.Execute(null' this);                };
Magic Number,GitScc.UI,HistoryGraph,C:\repos\yysun_git-tools\GitUI\UI\HistoryGraph.xaml.cs,Show,The following statement contains a magic number: Action action = () =>              {                  try                  {                      IList<GraphNode> commits = null;                      string hash = null;                        if (tracker != null && tracker.IsGit)                      {                          commits = tracker.RepositoryGraph.Nodes;                          hash = GetHashCode(commits);                      }                        bool changed = true; // lastHash == null ? hash != null : !lastHash.Equals(hash);                        if (changed)                      {                          lastHash = hash;                            canvasContainer.Children.Clear();                          maxX = maxY = 0;                            if (changed && commits != null && commits.Any())                          {                              maxX = commits.Count();                              maxY = commits.Max(c => c.X);                                for (int i = commits.Count() - 1; i >= 0; i--)                              {                                  var commit = commits[i];                                    #region Add commit box                                    var box = new CommitBox();                                  box.DataContext = new                                  {                                      Id = commit.Id'                                      ShortId = commit.ShortId'                                      Comments = commit.Message'                                      Author = commit.AuthorName'                                      Date = commit.AuthorDateRelative'                                      Refs = commit.Refs                                  };                                    box.Height = HEIGHT;                                  box.Width = WIDTH;                                    double left = GetScreenX(maxX - commit.Y);                                  double top = GetScreenY(commit.X);                                    Canvas.SetLeft(box' left);                                  Canvas.SetTop(box' top);                                  Canvas.SetZIndex(box' 10);                                    this.canvasContainer.Children.Add(box);                                    #endregion                                    #region Add Branches                                    var m = 0;                                  foreach (var head in commit.Refs.Where(r => r.Type == RefTypes.Branch || r.Type == RefTypes.HEAD))                                  {                                      var control = new CommitHead                                      {                                          DataContext = head'                                      };                                        Canvas.SetLeft(control' left + WIDTH + 4);                                      Canvas.SetTop(control' top + m++ * 30);                                      this.canvasContainer.Children.Add(control);                                    }                                  #endregion                                    #region Add Tags                                  m = 0;                                  foreach (var tag in commit.Refs.Where(r => r.Type == RefTypes.Tag))                                  {                                      var control = new CommitTag                                      {                                          DataContext = tag'                                      };                                        Canvas.SetLeft(control' left + m++ * 80); // TODO: get width of the control                                      Canvas.SetTop(control' top - 24);                                      this.canvasContainer.Children.Add(control);                                  }                                    #endregion                                    #region Add Remote Branches                                  m = 0;                                  foreach (var name in commit.Refs.Where(r => r.Type == RefTypes.RemoteBranch))                                  {                                      var control = new CommitRemote                                      {                                          DataContext = new { Text = name }'                                      };                                        Canvas.SetLeft(control' left + m++ * 100); // TODO: get width of the control                                      Canvas.SetTop(control' top + HEIGHT + 4);                                      this.canvasContainer.Children.Add(control);                                  }                                  #endregion                              }                                #region Add commit links                                var links = tracker.RepositoryGraph.Links;                                foreach (var link in links)                              {                                  // current node                                  double x1 = link.Y1;                                  double y1 = link.X1;                                    // parent node                                  double x2 = link.Y2;                                  double y2 = link.X2;                                    bool flip = links.Any(lnk => lnk.X1 == x2 && lnk.Y2 == y2 && lnk.X1 == lnk.X2);                                    x1 = GetScreenX(maxX - x1);                                  y1 = GetScreenY(y1) + HEIGHT / 2;                                  x2 = GetScreenX(maxX - x2) + WIDTH;                                  y2 = GetScreenY(y2) + HEIGHT / 2;                                    if (y1 == y2)                                  {                                      var line = new Line                                      {                                          Stroke = new SolidColorBrush(Color.FromArgb(255' 153' 182' 209))'                                          StrokeThickness = 4'                                      };                                      line.X1 = x1;                                      line.Y1 = y1;                                      line.X2 = x2;                                      line.Y2 = y2;                                      this.canvasContainer.Children.Add(line);                                  }                                  else if (y1 > y2 && !flip)                                  {                                      var x3 = x2 - WIDTH / 2;                                      var path = new System.Windows.Shapes.Path                                      {                                          Stroke = new SolidColorBrush(Color.FromArgb(255' 153' 182' 209))'                                          StrokeThickness = 4'                                      };                                        PathSegmentCollection pscollection = new PathSegmentCollection();                                        pscollection.Add(new LineSegment(new Point(x2' y1)' true));                                        BezierSegment curve = new BezierSegment(                                          new Point(x2' y1)' new Point(x3' y1)' new Point(x3' y2)' true);                                      pscollection.Add(curve);                                        PathFigure pf = new PathFigure                                      {                                          StartPoint = new Point(x1' y1)'                                          Segments = pscollection'                                      };                                      PathFigureCollection pfcollection = new PathFigureCollection();                                      pfcollection.Add(pf);                                      PathGeometry pathGeometry = new PathGeometry();                                      pathGeometry.Figures = pfcollection;                                      path.Data = pathGeometry;                                        this.canvasContainer.Children.Add(path);                                  }                                  else                                  {                                      var x3 = x1 + WIDTH / 2;                                      var path = new System.Windows.Shapes.Path                                      {                                          Stroke = new SolidColorBrush(Color.FromArgb(255' 153' 182' 209))'                                          StrokeThickness = 4'                                      };                                        PathSegmentCollection pscollection = new PathSegmentCollection();                                        BezierSegment curve = new BezierSegment(                                          new Point(x3' y1)' new Point(x3' y2)' new Point(x1' y2)' true);                                      pscollection.Add(curve);                                        pscollection.Add(new LineSegment(new Point(x2' y2)' true));                                        PathFigure pf = new PathFigure                                      {                                          StartPoint = new Point(x3' y1)'                                          Segments = pscollection'                                      };                                      PathFigureCollection pfcollection = new PathFigureCollection();                                      pfcollection.Add(pf);                                      PathGeometry pathGeometry = new PathGeometry();                                      pathGeometry.Figures = pfcollection;                                      path.Data = pathGeometry;                                        this.canvasContainer.Children.Add(path);                                  }                              }                                #endregion                          }                            AdjustCanvasSize();                      }                        if (scroll)                      {                          //this.Scaler.ScaleX = this.Scaler.ScaleY = 1;                          //AdjustCanvasSize();                            this.zoomAndPanControl.ContentScale = 1;                          this.canvasContainer.SetValue(Canvas.LeftProperty' 0.0);                          this.canvasContainer.SetValue(Canvas.TopProperty' 0.0);                          this.scrollRoot.ScrollToRightEnd();                      }                  }                  catch (Exception ex)                  {                      Log.WriteLine("History Graph Show: {0}"' ex.ToString());                  }                    HistoryViewCommands.GraphLoaded.Execute(null' this);                };
Magic Number,GitScc.UI,HistoryGraph,C:\repos\yysun_git-tools\GitUI\UI\HistoryGraph.xaml.cs,Show,The following statement contains a magic number: Action action = () =>              {                  try                  {                      IList<GraphNode> commits = null;                      string hash = null;                        if (tracker != null && tracker.IsGit)                      {                          commits = tracker.RepositoryGraph.Nodes;                          hash = GetHashCode(commits);                      }                        bool changed = true; // lastHash == null ? hash != null : !lastHash.Equals(hash);                        if (changed)                      {                          lastHash = hash;                            canvasContainer.Children.Clear();                          maxX = maxY = 0;                            if (changed && commits != null && commits.Any())                          {                              maxX = commits.Count();                              maxY = commits.Max(c => c.X);                                for (int i = commits.Count() - 1; i >= 0; i--)                              {                                  var commit = commits[i];                                    #region Add commit box                                    var box = new CommitBox();                                  box.DataContext = new                                  {                                      Id = commit.Id'                                      ShortId = commit.ShortId'                                      Comments = commit.Message'                                      Author = commit.AuthorName'                                      Date = commit.AuthorDateRelative'                                      Refs = commit.Refs                                  };                                    box.Height = HEIGHT;                                  box.Width = WIDTH;                                    double left = GetScreenX(maxX - commit.Y);                                  double top = GetScreenY(commit.X);                                    Canvas.SetLeft(box' left);                                  Canvas.SetTop(box' top);                                  Canvas.SetZIndex(box' 10);                                    this.canvasContainer.Children.Add(box);                                    #endregion                                    #region Add Branches                                    var m = 0;                                  foreach (var head in commit.Refs.Where(r => r.Type == RefTypes.Branch || r.Type == RefTypes.HEAD))                                  {                                      var control = new CommitHead                                      {                                          DataContext = head'                                      };                                        Canvas.SetLeft(control' left + WIDTH + 4);                                      Canvas.SetTop(control' top + m++ * 30);                                      this.canvasContainer.Children.Add(control);                                    }                                  #endregion                                    #region Add Tags                                  m = 0;                                  foreach (var tag in commit.Refs.Where(r => r.Type == RefTypes.Tag))                                  {                                      var control = new CommitTag                                      {                                          DataContext = tag'                                      };                                        Canvas.SetLeft(control' left + m++ * 80); // TODO: get width of the control                                      Canvas.SetTop(control' top - 24);                                      this.canvasContainer.Children.Add(control);                                  }                                    #endregion                                    #region Add Remote Branches                                  m = 0;                                  foreach (var name in commit.Refs.Where(r => r.Type == RefTypes.RemoteBranch))                                  {                                      var control = new CommitRemote                                      {                                          DataContext = new { Text = name }'                                      };                                        Canvas.SetLeft(control' left + m++ * 100); // TODO: get width of the control                                      Canvas.SetTop(control' top + HEIGHT + 4);                                      this.canvasContainer.Children.Add(control);                                  }                                  #endregion                              }                                #region Add commit links                                var links = tracker.RepositoryGraph.Links;                                foreach (var link in links)                              {                                  // current node                                  double x1 = link.Y1;                                  double y1 = link.X1;                                    // parent node                                  double x2 = link.Y2;                                  double y2 = link.X2;                                    bool flip = links.Any(lnk => lnk.X1 == x2 && lnk.Y2 == y2 && lnk.X1 == lnk.X2);                                    x1 = GetScreenX(maxX - x1);                                  y1 = GetScreenY(y1) + HEIGHT / 2;                                  x2 = GetScreenX(maxX - x2) + WIDTH;                                  y2 = GetScreenY(y2) + HEIGHT / 2;                                    if (y1 == y2)                                  {                                      var line = new Line                                      {                                          Stroke = new SolidColorBrush(Color.FromArgb(255' 153' 182' 209))'                                          StrokeThickness = 4'                                      };                                      line.X1 = x1;                                      line.Y1 = y1;                                      line.X2 = x2;                                      line.Y2 = y2;                                      this.canvasContainer.Children.Add(line);                                  }                                  else if (y1 > y2 && !flip)                                  {                                      var x3 = x2 - WIDTH / 2;                                      var path = new System.Windows.Shapes.Path                                      {                                          Stroke = new SolidColorBrush(Color.FromArgb(255' 153' 182' 209))'                                          StrokeThickness = 4'                                      };                                        PathSegmentCollection pscollection = new PathSegmentCollection();                                        pscollection.Add(new LineSegment(new Point(x2' y1)' true));                                        BezierSegment curve = new BezierSegment(                                          new Point(x2' y1)' new Point(x3' y1)' new Point(x3' y2)' true);                                      pscollection.Add(curve);                                        PathFigure pf = new PathFigure                                      {                                          StartPoint = new Point(x1' y1)'                                          Segments = pscollection'                                      };                                      PathFigureCollection pfcollection = new PathFigureCollection();                                      pfcollection.Add(pf);                                      PathGeometry pathGeometry = new PathGeometry();                                      pathGeometry.Figures = pfcollection;                                      path.Data = pathGeometry;                                        this.canvasContainer.Children.Add(path);                                  }                                  else                                  {                                      var x3 = x1 + WIDTH / 2;                                      var path = new System.Windows.Shapes.Path                                      {                                          Stroke = new SolidColorBrush(Color.FromArgb(255' 153' 182' 209))'                                          StrokeThickness = 4'                                      };                                        PathSegmentCollection pscollection = new PathSegmentCollection();                                        BezierSegment curve = new BezierSegment(                                          new Point(x3' y1)' new Point(x3' y2)' new Point(x1' y2)' true);                                      pscollection.Add(curve);                                        pscollection.Add(new LineSegment(new Point(x2' y2)' true));                                        PathFigure pf = new PathFigure                                      {                                          StartPoint = new Point(x3' y1)'                                          Segments = pscollection'                                      };                                      PathFigureCollection pfcollection = new PathFigureCollection();                                      pfcollection.Add(pf);                                      PathGeometry pathGeometry = new PathGeometry();                                      pathGeometry.Figures = pfcollection;                                      path.Data = pathGeometry;                                        this.canvasContainer.Children.Add(path);                                  }                              }                                #endregion                          }                            AdjustCanvasSize();                      }                        if (scroll)                      {                          //this.Scaler.ScaleX = this.Scaler.ScaleY = 1;                          //AdjustCanvasSize();                            this.zoomAndPanControl.ContentScale = 1;                          this.canvasContainer.SetValue(Canvas.LeftProperty' 0.0);                          this.canvasContainer.SetValue(Canvas.TopProperty' 0.0);                          this.scrollRoot.ScrollToRightEnd();                      }                  }                  catch (Exception ex)                  {                      Log.WriteLine("History Graph Show: {0}"' ex.ToString());                  }                    HistoryViewCommands.GraphLoaded.Execute(null' this);                };
Magic Number,GitScc.UI,HistoryGraph,C:\repos\yysun_git-tools\GitUI\UI\HistoryGraph.xaml.cs,Show,The following statement contains a magic number: Action action = () =>              {                  try                  {                      IList<GraphNode> commits = null;                      string hash = null;                        if (tracker != null && tracker.IsGit)                      {                          commits = tracker.RepositoryGraph.Nodes;                          hash = GetHashCode(commits);                      }                        bool changed = true; // lastHash == null ? hash != null : !lastHash.Equals(hash);                        if (changed)                      {                          lastHash = hash;                            canvasContainer.Children.Clear();                          maxX = maxY = 0;                            if (changed && commits != null && commits.Any())                          {                              maxX = commits.Count();                              maxY = commits.Max(c => c.X);                                for (int i = commits.Count() - 1; i >= 0; i--)                              {                                  var commit = commits[i];                                    #region Add commit box                                    var box = new CommitBox();                                  box.DataContext = new                                  {                                      Id = commit.Id'                                      ShortId = commit.ShortId'                                      Comments = commit.Message'                                      Author = commit.AuthorName'                                      Date = commit.AuthorDateRelative'                                      Refs = commit.Refs                                  };                                    box.Height = HEIGHT;                                  box.Width = WIDTH;                                    double left = GetScreenX(maxX - commit.Y);                                  double top = GetScreenY(commit.X);                                    Canvas.SetLeft(box' left);                                  Canvas.SetTop(box' top);                                  Canvas.SetZIndex(box' 10);                                    this.canvasContainer.Children.Add(box);                                    #endregion                                    #region Add Branches                                    var m = 0;                                  foreach (var head in commit.Refs.Where(r => r.Type == RefTypes.Branch || r.Type == RefTypes.HEAD))                                  {                                      var control = new CommitHead                                      {                                          DataContext = head'                                      };                                        Canvas.SetLeft(control' left + WIDTH + 4);                                      Canvas.SetTop(control' top + m++ * 30);                                      this.canvasContainer.Children.Add(control);                                    }                                  #endregion                                    #region Add Tags                                  m = 0;                                  foreach (var tag in commit.Refs.Where(r => r.Type == RefTypes.Tag))                                  {                                      var control = new CommitTag                                      {                                          DataContext = tag'                                      };                                        Canvas.SetLeft(control' left + m++ * 80); // TODO: get width of the control                                      Canvas.SetTop(control' top - 24);                                      this.canvasContainer.Children.Add(control);                                  }                                    #endregion                                    #region Add Remote Branches                                  m = 0;                                  foreach (var name in commit.Refs.Where(r => r.Type == RefTypes.RemoteBranch))                                  {                                      var control = new CommitRemote                                      {                                          DataContext = new { Text = name }'                                      };                                        Canvas.SetLeft(control' left + m++ * 100); // TODO: get width of the control                                      Canvas.SetTop(control' top + HEIGHT + 4);                                      this.canvasContainer.Children.Add(control);                                  }                                  #endregion                              }                                #region Add commit links                                var links = tracker.RepositoryGraph.Links;                                foreach (var link in links)                              {                                  // current node                                  double x1 = link.Y1;                                  double y1 = link.X1;                                    // parent node                                  double x2 = link.Y2;                                  double y2 = link.X2;                                    bool flip = links.Any(lnk => lnk.X1 == x2 && lnk.Y2 == y2 && lnk.X1 == lnk.X2);                                    x1 = GetScreenX(maxX - x1);                                  y1 = GetScreenY(y1) + HEIGHT / 2;                                  x2 = GetScreenX(maxX - x2) + WIDTH;                                  y2 = GetScreenY(y2) + HEIGHT / 2;                                    if (y1 == y2)                                  {                                      var line = new Line                                      {                                          Stroke = new SolidColorBrush(Color.FromArgb(255' 153' 182' 209))'                                          StrokeThickness = 4'                                      };                                      line.X1 = x1;                                      line.Y1 = y1;                                      line.X2 = x2;                                      line.Y2 = y2;                                      this.canvasContainer.Children.Add(line);                                  }                                  else if (y1 > y2 && !flip)                                  {                                      var x3 = x2 - WIDTH / 2;                                      var path = new System.Windows.Shapes.Path                                      {                                          Stroke = new SolidColorBrush(Color.FromArgb(255' 153' 182' 209))'                                          StrokeThickness = 4'                                      };                                        PathSegmentCollection pscollection = new PathSegmentCollection();                                        pscollection.Add(new LineSegment(new Point(x2' y1)' true));                                        BezierSegment curve = new BezierSegment(                                          new Point(x2' y1)' new Point(x3' y1)' new Point(x3' y2)' true);                                      pscollection.Add(curve);                                        PathFigure pf = new PathFigure                                      {                                          StartPoint = new Point(x1' y1)'                                          Segments = pscollection'                                      };                                      PathFigureCollection pfcollection = new PathFigureCollection();                                      pfcollection.Add(pf);                                      PathGeometry pathGeometry = new PathGeometry();                                      pathGeometry.Figures = pfcollection;                                      path.Data = pathGeometry;                                        this.canvasContainer.Children.Add(path);                                  }                                  else                                  {                                      var x3 = x1 + WIDTH / 2;                                      var path = new System.Windows.Shapes.Path                                      {                                          Stroke = new SolidColorBrush(Color.FromArgb(255' 153' 182' 209))'                                          StrokeThickness = 4'                                      };                                        PathSegmentCollection pscollection = new PathSegmentCollection();                                        BezierSegment curve = new BezierSegment(                                          new Point(x3' y1)' new Point(x3' y2)' new Point(x1' y2)' true);                                      pscollection.Add(curve);                                        pscollection.Add(new LineSegment(new Point(x2' y2)' true));                                        PathFigure pf = new PathFigure                                      {                                          StartPoint = new Point(x3' y1)'                                          Segments = pscollection'                                      };                                      PathFigureCollection pfcollection = new PathFigureCollection();                                      pfcollection.Add(pf);                                      PathGeometry pathGeometry = new PathGeometry();                                      pathGeometry.Figures = pfcollection;                                      path.Data = pathGeometry;                                        this.canvasContainer.Children.Add(path);                                  }                              }                                #endregion                          }                            AdjustCanvasSize();                      }                        if (scroll)                      {                          //this.Scaler.ScaleX = this.Scaler.ScaleY = 1;                          //AdjustCanvasSize();                            this.zoomAndPanControl.ContentScale = 1;                          this.canvasContainer.SetValue(Canvas.LeftProperty' 0.0);                          this.canvasContainer.SetValue(Canvas.TopProperty' 0.0);                          this.scrollRoot.ScrollToRightEnd();                      }                  }                  catch (Exception ex)                  {                      Log.WriteLine("History Graph Show: {0}"' ex.ToString());                  }                    HistoryViewCommands.GraphLoaded.Execute(null' this);                };
Magic Number,GitScc.UI,HistoryGraph,C:\repos\yysun_git-tools\GitUI\UI\HistoryGraph.xaml.cs,Show,The following statement contains a magic number: Action action = () =>              {                  try                  {                      IList<GraphNode> commits = null;                      string hash = null;                        if (tracker != null && tracker.IsGit)                      {                          commits = tracker.RepositoryGraph.Nodes;                          hash = GetHashCode(commits);                      }                        bool changed = true; // lastHash == null ? hash != null : !lastHash.Equals(hash);                        if (changed)                      {                          lastHash = hash;                            canvasContainer.Children.Clear();                          maxX = maxY = 0;                            if (changed && commits != null && commits.Any())                          {                              maxX = commits.Count();                              maxY = commits.Max(c => c.X);                                for (int i = commits.Count() - 1; i >= 0; i--)                              {                                  var commit = commits[i];                                    #region Add commit box                                    var box = new CommitBox();                                  box.DataContext = new                                  {                                      Id = commit.Id'                                      ShortId = commit.ShortId'                                      Comments = commit.Message'                                      Author = commit.AuthorName'                                      Date = commit.AuthorDateRelative'                                      Refs = commit.Refs                                  };                                    box.Height = HEIGHT;                                  box.Width = WIDTH;                                    double left = GetScreenX(maxX - commit.Y);                                  double top = GetScreenY(commit.X);                                    Canvas.SetLeft(box' left);                                  Canvas.SetTop(box' top);                                  Canvas.SetZIndex(box' 10);                                    this.canvasContainer.Children.Add(box);                                    #endregion                                    #region Add Branches                                    var m = 0;                                  foreach (var head in commit.Refs.Where(r => r.Type == RefTypes.Branch || r.Type == RefTypes.HEAD))                                  {                                      var control = new CommitHead                                      {                                          DataContext = head'                                      };                                        Canvas.SetLeft(control' left + WIDTH + 4);                                      Canvas.SetTop(control' top + m++ * 30);                                      this.canvasContainer.Children.Add(control);                                    }                                  #endregion                                    #region Add Tags                                  m = 0;                                  foreach (var tag in commit.Refs.Where(r => r.Type == RefTypes.Tag))                                  {                                      var control = new CommitTag                                      {                                          DataContext = tag'                                      };                                        Canvas.SetLeft(control' left + m++ * 80); // TODO: get width of the control                                      Canvas.SetTop(control' top - 24);                                      this.canvasContainer.Children.Add(control);                                  }                                    #endregion                                    #region Add Remote Branches                                  m = 0;                                  foreach (var name in commit.Refs.Where(r => r.Type == RefTypes.RemoteBranch))                                  {                                      var control = new CommitRemote                                      {                                          DataContext = new { Text = name }'                                      };                                        Canvas.SetLeft(control' left + m++ * 100); // TODO: get width of the control                                      Canvas.SetTop(control' top + HEIGHT + 4);                                      this.canvasContainer.Children.Add(control);                                  }                                  #endregion                              }                                #region Add commit links                                var links = tracker.RepositoryGraph.Links;                                foreach (var link in links)                              {                                  // current node                                  double x1 = link.Y1;                                  double y1 = link.X1;                                    // parent node                                  double x2 = link.Y2;                                  double y2 = link.X2;                                    bool flip = links.Any(lnk => lnk.X1 == x2 && lnk.Y2 == y2 && lnk.X1 == lnk.X2);                                    x1 = GetScreenX(maxX - x1);                                  y1 = GetScreenY(y1) + HEIGHT / 2;                                  x2 = GetScreenX(maxX - x2) + WIDTH;                                  y2 = GetScreenY(y2) + HEIGHT / 2;                                    if (y1 == y2)                                  {                                      var line = new Line                                      {                                          Stroke = new SolidColorBrush(Color.FromArgb(255' 153' 182' 209))'                                          StrokeThickness = 4'                                      };                                      line.X1 = x1;                                      line.Y1 = y1;                                      line.X2 = x2;                                      line.Y2 = y2;                                      this.canvasContainer.Children.Add(line);                                  }                                  else if (y1 > y2 && !flip)                                  {                                      var x3 = x2 - WIDTH / 2;                                      var path = new System.Windows.Shapes.Path                                      {                                          Stroke = new SolidColorBrush(Color.FromArgb(255' 153' 182' 209))'                                          StrokeThickness = 4'                                      };                                        PathSegmentCollection pscollection = new PathSegmentCollection();                                        pscollection.Add(new LineSegment(new Point(x2' y1)' true));                                        BezierSegment curve = new BezierSegment(                                          new Point(x2' y1)' new Point(x3' y1)' new Point(x3' y2)' true);                                      pscollection.Add(curve);                                        PathFigure pf = new PathFigure                                      {                                          StartPoint = new Point(x1' y1)'                                          Segments = pscollection'                                      };                                      PathFigureCollection pfcollection = new PathFigureCollection();                                      pfcollection.Add(pf);                                      PathGeometry pathGeometry = new PathGeometry();                                      pathGeometry.Figures = pfcollection;                                      path.Data = pathGeometry;                                        this.canvasContainer.Children.Add(path);                                  }                                  else                                  {                                      var x3 = x1 + WIDTH / 2;                                      var path = new System.Windows.Shapes.Path                                      {                                          Stroke = new SolidColorBrush(Color.FromArgb(255' 153' 182' 209))'                                          StrokeThickness = 4'                                      };                                        PathSegmentCollection pscollection = new PathSegmentCollection();                                        BezierSegment curve = new BezierSegment(                                          new Point(x3' y1)' new Point(x3' y2)' new Point(x1' y2)' true);                                      pscollection.Add(curve);                                        pscollection.Add(new LineSegment(new Point(x2' y2)' true));                                        PathFigure pf = new PathFigure                                      {                                          StartPoint = new Point(x3' y1)'                                          Segments = pscollection'                                      };                                      PathFigureCollection pfcollection = new PathFigureCollection();                                      pfcollection.Add(pf);                                      PathGeometry pathGeometry = new PathGeometry();                                      pathGeometry.Figures = pfcollection;                                      path.Data = pathGeometry;                                        this.canvasContainer.Children.Add(path);                                  }                              }                                #endregion                          }                            AdjustCanvasSize();                      }                        if (scroll)                      {                          //this.Scaler.ScaleX = this.Scaler.ScaleY = 1;                          //AdjustCanvasSize();                            this.zoomAndPanControl.ContentScale = 1;                          this.canvasContainer.SetValue(Canvas.LeftProperty' 0.0);                          this.canvasContainer.SetValue(Canvas.TopProperty' 0.0);                          this.scrollRoot.ScrollToRightEnd();                      }                  }                  catch (Exception ex)                  {                      Log.WriteLine("History Graph Show: {0}"' ex.ToString());                  }                    HistoryViewCommands.GraphLoaded.Execute(null' this);                };
Magic Number,GitScc.UI,HistoryGraph,C:\repos\yysun_git-tools\GitUI\UI\HistoryGraph.xaml.cs,Show,The following statement contains a magic number: Action action = () =>              {                  try                  {                      IList<GraphNode> commits = null;                      string hash = null;                        if (tracker != null && tracker.IsGit)                      {                          commits = tracker.RepositoryGraph.Nodes;                          hash = GetHashCode(commits);                      }                        bool changed = true; // lastHash == null ? hash != null : !lastHash.Equals(hash);                        if (changed)                      {                          lastHash = hash;                            canvasContainer.Children.Clear();                          maxX = maxY = 0;                            if (changed && commits != null && commits.Any())                          {                              maxX = commits.Count();                              maxY = commits.Max(c => c.X);                                for (int i = commits.Count() - 1; i >= 0; i--)                              {                                  var commit = commits[i];                                    #region Add commit box                                    var box = new CommitBox();                                  box.DataContext = new                                  {                                      Id = commit.Id'                                      ShortId = commit.ShortId'                                      Comments = commit.Message'                                      Author = commit.AuthorName'                                      Date = commit.AuthorDateRelative'                                      Refs = commit.Refs                                  };                                    box.Height = HEIGHT;                                  box.Width = WIDTH;                                    double left = GetScreenX(maxX - commit.Y);                                  double top = GetScreenY(commit.X);                                    Canvas.SetLeft(box' left);                                  Canvas.SetTop(box' top);                                  Canvas.SetZIndex(box' 10);                                    this.canvasContainer.Children.Add(box);                                    #endregion                                    #region Add Branches                                    var m = 0;                                  foreach (var head in commit.Refs.Where(r => r.Type == RefTypes.Branch || r.Type == RefTypes.HEAD))                                  {                                      var control = new CommitHead                                      {                                          DataContext = head'                                      };                                        Canvas.SetLeft(control' left + WIDTH + 4);                                      Canvas.SetTop(control' top + m++ * 30);                                      this.canvasContainer.Children.Add(control);                                    }                                  #endregion                                    #region Add Tags                                  m = 0;                                  foreach (var tag in commit.Refs.Where(r => r.Type == RefTypes.Tag))                                  {                                      var control = new CommitTag                                      {                                          DataContext = tag'                                      };                                        Canvas.SetLeft(control' left + m++ * 80); // TODO: get width of the control                                      Canvas.SetTop(control' top - 24);                                      this.canvasContainer.Children.Add(control);                                  }                                    #endregion                                    #region Add Remote Branches                                  m = 0;                                  foreach (var name in commit.Refs.Where(r => r.Type == RefTypes.RemoteBranch))                                  {                                      var control = new CommitRemote                                      {                                          DataContext = new { Text = name }'                                      };                                        Canvas.SetLeft(control' left + m++ * 100); // TODO: get width of the control                                      Canvas.SetTop(control' top + HEIGHT + 4);                                      this.canvasContainer.Children.Add(control);                                  }                                  #endregion                              }                                #region Add commit links                                var links = tracker.RepositoryGraph.Links;                                foreach (var link in links)                              {                                  // current node                                  double x1 = link.Y1;                                  double y1 = link.X1;                                    // parent node                                  double x2 = link.Y2;                                  double y2 = link.X2;                                    bool flip = links.Any(lnk => lnk.X1 == x2 && lnk.Y2 == y2 && lnk.X1 == lnk.X2);                                    x1 = GetScreenX(maxX - x1);                                  y1 = GetScreenY(y1) + HEIGHT / 2;                                  x2 = GetScreenX(maxX - x2) + WIDTH;                                  y2 = GetScreenY(y2) + HEIGHT / 2;                                    if (y1 == y2)                                  {                                      var line = new Line                                      {                                          Stroke = new SolidColorBrush(Color.FromArgb(255' 153' 182' 209))'                                          StrokeThickness = 4'                                      };                                      line.X1 = x1;                                      line.Y1 = y1;                                      line.X2 = x2;                                      line.Y2 = y2;                                      this.canvasContainer.Children.Add(line);                                  }                                  else if (y1 > y2 && !flip)                                  {                                      var x3 = x2 - WIDTH / 2;                                      var path = new System.Windows.Shapes.Path                                      {                                          Stroke = new SolidColorBrush(Color.FromArgb(255' 153' 182' 209))'                                          StrokeThickness = 4'                                      };                                        PathSegmentCollection pscollection = new PathSegmentCollection();                                        pscollection.Add(new LineSegment(new Point(x2' y1)' true));                                        BezierSegment curve = new BezierSegment(                                          new Point(x2' y1)' new Point(x3' y1)' new Point(x3' y2)' true);                                      pscollection.Add(curve);                                        PathFigure pf = new PathFigure                                      {                                          StartPoint = new Point(x1' y1)'                                          Segments = pscollection'                                      };                                      PathFigureCollection pfcollection = new PathFigureCollection();                                      pfcollection.Add(pf);                                      PathGeometry pathGeometry = new PathGeometry();                                      pathGeometry.Figures = pfcollection;                                      path.Data = pathGeometry;                                        this.canvasContainer.Children.Add(path);                                  }                                  else                                  {                                      var x3 = x1 + WIDTH / 2;                                      var path = new System.Windows.Shapes.Path                                      {                                          Stroke = new SolidColorBrush(Color.FromArgb(255' 153' 182' 209))'                                          StrokeThickness = 4'                                      };                                        PathSegmentCollection pscollection = new PathSegmentCollection();                                        BezierSegment curve = new BezierSegment(                                          new Point(x3' y1)' new Point(x3' y2)' new Point(x1' y2)' true);                                      pscollection.Add(curve);                                        pscollection.Add(new LineSegment(new Point(x2' y2)' true));                                        PathFigure pf = new PathFigure                                      {                                          StartPoint = new Point(x3' y1)'                                          Segments = pscollection'                                      };                                      PathFigureCollection pfcollection = new PathFigureCollection();                                      pfcollection.Add(pf);                                      PathGeometry pathGeometry = new PathGeometry();                                      pathGeometry.Figures = pfcollection;                                      path.Data = pathGeometry;                                        this.canvasContainer.Children.Add(path);                                  }                              }                                #endregion                          }                            AdjustCanvasSize();                      }                        if (scroll)                      {                          //this.Scaler.ScaleX = this.Scaler.ScaleY = 1;                          //AdjustCanvasSize();                            this.zoomAndPanControl.ContentScale = 1;                          this.canvasContainer.SetValue(Canvas.LeftProperty' 0.0);                          this.canvasContainer.SetValue(Canvas.TopProperty' 0.0);                          this.scrollRoot.ScrollToRightEnd();                      }                  }                  catch (Exception ex)                  {                      Log.WriteLine("History Graph Show: {0}"' ex.ToString());                  }                    HistoryViewCommands.GraphLoaded.Execute(null' this);                };
Magic Number,GitScc.UI,HistoryGraph,C:\repos\yysun_git-tools\GitUI\UI\HistoryGraph.xaml.cs,Show,The following statement contains a magic number: Action action = () =>              {                  try                  {                      IList<GraphNode> commits = null;                      string hash = null;                        if (tracker != null && tracker.IsGit)                      {                          commits = tracker.RepositoryGraph.Nodes;                          hash = GetHashCode(commits);                      }                        bool changed = true; // lastHash == null ? hash != null : !lastHash.Equals(hash);                        if (changed)                      {                          lastHash = hash;                            canvasContainer.Children.Clear();                          maxX = maxY = 0;                            if (changed && commits != null && commits.Any())                          {                              maxX = commits.Count();                              maxY = commits.Max(c => c.X);                                for (int i = commits.Count() - 1; i >= 0; i--)                              {                                  var commit = commits[i];                                    #region Add commit box                                    var box = new CommitBox();                                  box.DataContext = new                                  {                                      Id = commit.Id'                                      ShortId = commit.ShortId'                                      Comments = commit.Message'                                      Author = commit.AuthorName'                                      Date = commit.AuthorDateRelative'                                      Refs = commit.Refs                                  };                                    box.Height = HEIGHT;                                  box.Width = WIDTH;                                    double left = GetScreenX(maxX - commit.Y);                                  double top = GetScreenY(commit.X);                                    Canvas.SetLeft(box' left);                                  Canvas.SetTop(box' top);                                  Canvas.SetZIndex(box' 10);                                    this.canvasContainer.Children.Add(box);                                    #endregion                                    #region Add Branches                                    var m = 0;                                  foreach (var head in commit.Refs.Where(r => r.Type == RefTypes.Branch || r.Type == RefTypes.HEAD))                                  {                                      var control = new CommitHead                                      {                                          DataContext = head'                                      };                                        Canvas.SetLeft(control' left + WIDTH + 4);                                      Canvas.SetTop(control' top + m++ * 30);                                      this.canvasContainer.Children.Add(control);                                    }                                  #endregion                                    #region Add Tags                                  m = 0;                                  foreach (var tag in commit.Refs.Where(r => r.Type == RefTypes.Tag))                                  {                                      var control = new CommitTag                                      {                                          DataContext = tag'                                      };                                        Canvas.SetLeft(control' left + m++ * 80); // TODO: get width of the control                                      Canvas.SetTop(control' top - 24);                                      this.canvasContainer.Children.Add(control);                                  }                                    #endregion                                    #region Add Remote Branches                                  m = 0;                                  foreach (var name in commit.Refs.Where(r => r.Type == RefTypes.RemoteBranch))                                  {                                      var control = new CommitRemote                                      {                                          DataContext = new { Text = name }'                                      };                                        Canvas.SetLeft(control' left + m++ * 100); // TODO: get width of the control                                      Canvas.SetTop(control' top + HEIGHT + 4);                                      this.canvasContainer.Children.Add(control);                                  }                                  #endregion                              }                                #region Add commit links                                var links = tracker.RepositoryGraph.Links;                                foreach (var link in links)                              {                                  // current node                                  double x1 = link.Y1;                                  double y1 = link.X1;                                    // parent node                                  double x2 = link.Y2;                                  double y2 = link.X2;                                    bool flip = links.Any(lnk => lnk.X1 == x2 && lnk.Y2 == y2 && lnk.X1 == lnk.X2);                                    x1 = GetScreenX(maxX - x1);                                  y1 = GetScreenY(y1) + HEIGHT / 2;                                  x2 = GetScreenX(maxX - x2) + WIDTH;                                  y2 = GetScreenY(y2) + HEIGHT / 2;                                    if (y1 == y2)                                  {                                      var line = new Line                                      {                                          Stroke = new SolidColorBrush(Color.FromArgb(255' 153' 182' 209))'                                          StrokeThickness = 4'                                      };                                      line.X1 = x1;                                      line.Y1 = y1;                                      line.X2 = x2;                                      line.Y2 = y2;                                      this.canvasContainer.Children.Add(line);                                  }                                  else if (y1 > y2 && !flip)                                  {                                      var x3 = x2 - WIDTH / 2;                                      var path = new System.Windows.Shapes.Path                                      {                                          Stroke = new SolidColorBrush(Color.FromArgb(255' 153' 182' 209))'                                          StrokeThickness = 4'                                      };                                        PathSegmentCollection pscollection = new PathSegmentCollection();                                        pscollection.Add(new LineSegment(new Point(x2' y1)' true));                                        BezierSegment curve = new BezierSegment(                                          new Point(x2' y1)' new Point(x3' y1)' new Point(x3' y2)' true);                                      pscollection.Add(curve);                                        PathFigure pf = new PathFigure                                      {                                          StartPoint = new Point(x1' y1)'                                          Segments = pscollection'                                      };                                      PathFigureCollection pfcollection = new PathFigureCollection();                                      pfcollection.Add(pf);                                      PathGeometry pathGeometry = new PathGeometry();                                      pathGeometry.Figures = pfcollection;                                      path.Data = pathGeometry;                                        this.canvasContainer.Children.Add(path);                                  }                                  else                                  {                                      var x3 = x1 + WIDTH / 2;                                      var path = new System.Windows.Shapes.Path                                      {                                          Stroke = new SolidColorBrush(Color.FromArgb(255' 153' 182' 209))'                                          StrokeThickness = 4'                                      };                                        PathSegmentCollection pscollection = new PathSegmentCollection();                                        BezierSegment curve = new BezierSegment(                                          new Point(x3' y1)' new Point(x3' y2)' new Point(x1' y2)' true);                                      pscollection.Add(curve);                                        pscollection.Add(new LineSegment(new Point(x2' y2)' true));                                        PathFigure pf = new PathFigure                                      {                                          StartPoint = new Point(x3' y1)'                                          Segments = pscollection'                                      };                                      PathFigureCollection pfcollection = new PathFigureCollection();                                      pfcollection.Add(pf);                                      PathGeometry pathGeometry = new PathGeometry();                                      pathGeometry.Figures = pfcollection;                                      path.Data = pathGeometry;                                        this.canvasContainer.Children.Add(path);                                  }                              }                                #endregion                          }                            AdjustCanvasSize();                      }                        if (scroll)                      {                          //this.Scaler.ScaleX = this.Scaler.ScaleY = 1;                          //AdjustCanvasSize();                            this.zoomAndPanControl.ContentScale = 1;                          this.canvasContainer.SetValue(Canvas.LeftProperty' 0.0);                          this.canvasContainer.SetValue(Canvas.TopProperty' 0.0);                          this.scrollRoot.ScrollToRightEnd();                      }                  }                  catch (Exception ex)                  {                      Log.WriteLine("History Graph Show: {0}"' ex.ToString());                  }                    HistoryViewCommands.GraphLoaded.Execute(null' this);                };
Magic Number,GitScc.UI,HistoryGraph,C:\repos\yysun_git-tools\GitUI\UI\HistoryGraph.xaml.cs,Show,The following statement contains a magic number: Action action = () =>              {                  try                  {                      IList<GraphNode> commits = null;                      string hash = null;                        if (tracker != null && tracker.IsGit)                      {                          commits = tracker.RepositoryGraph.Nodes;                          hash = GetHashCode(commits);                      }                        bool changed = true; // lastHash == null ? hash != null : !lastHash.Equals(hash);                        if (changed)                      {                          lastHash = hash;                            canvasContainer.Children.Clear();                          maxX = maxY = 0;                            if (changed && commits != null && commits.Any())                          {                              maxX = commits.Count();                              maxY = commits.Max(c => c.X);                                for (int i = commits.Count() - 1; i >= 0; i--)                              {                                  var commit = commits[i];                                    #region Add commit box                                    var box = new CommitBox();                                  box.DataContext = new                                  {                                      Id = commit.Id'                                      ShortId = commit.ShortId'                                      Comments = commit.Message'                                      Author = commit.AuthorName'                                      Date = commit.AuthorDateRelative'                                      Refs = commit.Refs                                  };                                    box.Height = HEIGHT;                                  box.Width = WIDTH;                                    double left = GetScreenX(maxX - commit.Y);                                  double top = GetScreenY(commit.X);                                    Canvas.SetLeft(box' left);                                  Canvas.SetTop(box' top);                                  Canvas.SetZIndex(box' 10);                                    this.canvasContainer.Children.Add(box);                                    #endregion                                    #region Add Branches                                    var m = 0;                                  foreach (var head in commit.Refs.Where(r => r.Type == RefTypes.Branch || r.Type == RefTypes.HEAD))                                  {                                      var control = new CommitHead                                      {                                          DataContext = head'                                      };                                        Canvas.SetLeft(control' left + WIDTH + 4);                                      Canvas.SetTop(control' top + m++ * 30);                                      this.canvasContainer.Children.Add(control);                                    }                                  #endregion                                    #region Add Tags                                  m = 0;                                  foreach (var tag in commit.Refs.Where(r => r.Type == RefTypes.Tag))                                  {                                      var control = new CommitTag                                      {                                          DataContext = tag'                                      };                                        Canvas.SetLeft(control' left + m++ * 80); // TODO: get width of the control                                      Canvas.SetTop(control' top - 24);                                      this.canvasContainer.Children.Add(control);                                  }                                    #endregion                                    #region Add Remote Branches                                  m = 0;                                  foreach (var name in commit.Refs.Where(r => r.Type == RefTypes.RemoteBranch))                                  {                                      var control = new CommitRemote                                      {                                          DataContext = new { Text = name }'                                      };                                        Canvas.SetLeft(control' left + m++ * 100); // TODO: get width of the control                                      Canvas.SetTop(control' top + HEIGHT + 4);                                      this.canvasContainer.Children.Add(control);                                  }                                  #endregion                              }                                #region Add commit links                                var links = tracker.RepositoryGraph.Links;                                foreach (var link in links)                              {                                  // current node                                  double x1 = link.Y1;                                  double y1 = link.X1;                                    // parent node                                  double x2 = link.Y2;                                  double y2 = link.X2;                                    bool flip = links.Any(lnk => lnk.X1 == x2 && lnk.Y2 == y2 && lnk.X1 == lnk.X2);                                    x1 = GetScreenX(maxX - x1);                                  y1 = GetScreenY(y1) + HEIGHT / 2;                                  x2 = GetScreenX(maxX - x2) + WIDTH;                                  y2 = GetScreenY(y2) + HEIGHT / 2;                                    if (y1 == y2)                                  {                                      var line = new Line                                      {                                          Stroke = new SolidColorBrush(Color.FromArgb(255' 153' 182' 209))'                                          StrokeThickness = 4'                                      };                                      line.X1 = x1;                                      line.Y1 = y1;                                      line.X2 = x2;                                      line.Y2 = y2;                                      this.canvasContainer.Children.Add(line);                                  }                                  else if (y1 > y2 && !flip)                                  {                                      var x3 = x2 - WIDTH / 2;                                      var path = new System.Windows.Shapes.Path                                      {                                          Stroke = new SolidColorBrush(Color.FromArgb(255' 153' 182' 209))'                                          StrokeThickness = 4'                                      };                                        PathSegmentCollection pscollection = new PathSegmentCollection();                                        pscollection.Add(new LineSegment(new Point(x2' y1)' true));                                        BezierSegment curve = new BezierSegment(                                          new Point(x2' y1)' new Point(x3' y1)' new Point(x3' y2)' true);                                      pscollection.Add(curve);                                        PathFigure pf = new PathFigure                                      {                                          StartPoint = new Point(x1' y1)'                                          Segments = pscollection'                                      };                                      PathFigureCollection pfcollection = new PathFigureCollection();                                      pfcollection.Add(pf);                                      PathGeometry pathGeometry = new PathGeometry();                                      pathGeometry.Figures = pfcollection;                                      path.Data = pathGeometry;                                        this.canvasContainer.Children.Add(path);                                  }                                  else                                  {                                      var x3 = x1 + WIDTH / 2;                                      var path = new System.Windows.Shapes.Path                                      {                                          Stroke = new SolidColorBrush(Color.FromArgb(255' 153' 182' 209))'                                          StrokeThickness = 4'                                      };                                        PathSegmentCollection pscollection = new PathSegmentCollection();                                        BezierSegment curve = new BezierSegment(                                          new Point(x3' y1)' new Point(x3' y2)' new Point(x1' y2)' true);                                      pscollection.Add(curve);                                        pscollection.Add(new LineSegment(new Point(x2' y2)' true));                                        PathFigure pf = new PathFigure                                      {                                          StartPoint = new Point(x3' y1)'                                          Segments = pscollection'                                      };                                      PathFigureCollection pfcollection = new PathFigureCollection();                                      pfcollection.Add(pf);                                      PathGeometry pathGeometry = new PathGeometry();                                      pathGeometry.Figures = pfcollection;                                      path.Data = pathGeometry;                                        this.canvasContainer.Children.Add(path);                                  }                              }                                #endregion                          }                            AdjustCanvasSize();                      }                        if (scroll)                      {                          //this.Scaler.ScaleX = this.Scaler.ScaleY = 1;                          //AdjustCanvasSize();                            this.zoomAndPanControl.ContentScale = 1;                          this.canvasContainer.SetValue(Canvas.LeftProperty' 0.0);                          this.canvasContainer.SetValue(Canvas.TopProperty' 0.0);                          this.scrollRoot.ScrollToRightEnd();                      }                  }                  catch (Exception ex)                  {                      Log.WriteLine("History Graph Show: {0}"' ex.ToString());                  }                    HistoryViewCommands.GraphLoaded.Execute(null' this);                };
Magic Number,GitScc.UI,HistoryGraph,C:\repos\yysun_git-tools\GitUI\UI\HistoryGraph.xaml.cs,Show,The following statement contains a magic number: Action action = () =>              {                  try                  {                      IList<GraphNode> commits = null;                      string hash = null;                        if (tracker != null && tracker.IsGit)                      {                          commits = tracker.RepositoryGraph.Nodes;                          hash = GetHashCode(commits);                      }                        bool changed = true; // lastHash == null ? hash != null : !lastHash.Equals(hash);                        if (changed)                      {                          lastHash = hash;                            canvasContainer.Children.Clear();                          maxX = maxY = 0;                            if (changed && commits != null && commits.Any())                          {                              maxX = commits.Count();                              maxY = commits.Max(c => c.X);                                for (int i = commits.Count() - 1; i >= 0; i--)                              {                                  var commit = commits[i];                                    #region Add commit box                                    var box = new CommitBox();                                  box.DataContext = new                                  {                                      Id = commit.Id'                                      ShortId = commit.ShortId'                                      Comments = commit.Message'                                      Author = commit.AuthorName'                                      Date = commit.AuthorDateRelative'                                      Refs = commit.Refs                                  };                                    box.Height = HEIGHT;                                  box.Width = WIDTH;                                    double left = GetScreenX(maxX - commit.Y);                                  double top = GetScreenY(commit.X);                                    Canvas.SetLeft(box' left);                                  Canvas.SetTop(box' top);                                  Canvas.SetZIndex(box' 10);                                    this.canvasContainer.Children.Add(box);                                    #endregion                                    #region Add Branches                                    var m = 0;                                  foreach (var head in commit.Refs.Where(r => r.Type == RefTypes.Branch || r.Type == RefTypes.HEAD))                                  {                                      var control = new CommitHead                                      {                                          DataContext = head'                                      };                                        Canvas.SetLeft(control' left + WIDTH + 4);                                      Canvas.SetTop(control' top + m++ * 30);                                      this.canvasContainer.Children.Add(control);                                    }                                  #endregion                                    #region Add Tags                                  m = 0;                                  foreach (var tag in commit.Refs.Where(r => r.Type == RefTypes.Tag))                                  {                                      var control = new CommitTag                                      {                                          DataContext = tag'                                      };                                        Canvas.SetLeft(control' left + m++ * 80); // TODO: get width of the control                                      Canvas.SetTop(control' top - 24);                                      this.canvasContainer.Children.Add(control);                                  }                                    #endregion                                    #region Add Remote Branches                                  m = 0;                                  foreach (var name in commit.Refs.Where(r => r.Type == RefTypes.RemoteBranch))                                  {                                      var control = new CommitRemote                                      {                                          DataContext = new { Text = name }'                                      };                                        Canvas.SetLeft(control' left + m++ * 100); // TODO: get width of the control                                      Canvas.SetTop(control' top + HEIGHT + 4);                                      this.canvasContainer.Children.Add(control);                                  }                                  #endregion                              }                                #region Add commit links                                var links = tracker.RepositoryGraph.Links;                                foreach (var link in links)                              {                                  // current node                                  double x1 = link.Y1;                                  double y1 = link.X1;                                    // parent node                                  double x2 = link.Y2;                                  double y2 = link.X2;                                    bool flip = links.Any(lnk => lnk.X1 == x2 && lnk.Y2 == y2 && lnk.X1 == lnk.X2);                                    x1 = GetScreenX(maxX - x1);                                  y1 = GetScreenY(y1) + HEIGHT / 2;                                  x2 = GetScreenX(maxX - x2) + WIDTH;                                  y2 = GetScreenY(y2) + HEIGHT / 2;                                    if (y1 == y2)                                  {                                      var line = new Line                                      {                                          Stroke = new SolidColorBrush(Color.FromArgb(255' 153' 182' 209))'                                          StrokeThickness = 4'                                      };                                      line.X1 = x1;                                      line.Y1 = y1;                                      line.X2 = x2;                                      line.Y2 = y2;                                      this.canvasContainer.Children.Add(line);                                  }                                  else if (y1 > y2 && !flip)                                  {                                      var x3 = x2 - WIDTH / 2;                                      var path = new System.Windows.Shapes.Path                                      {                                          Stroke = new SolidColorBrush(Color.FromArgb(255' 153' 182' 209))'                                          StrokeThickness = 4'                                      };                                        PathSegmentCollection pscollection = new PathSegmentCollection();                                        pscollection.Add(new LineSegment(new Point(x2' y1)' true));                                        BezierSegment curve = new BezierSegment(                                          new Point(x2' y1)' new Point(x3' y1)' new Point(x3' y2)' true);                                      pscollection.Add(curve);                                        PathFigure pf = new PathFigure                                      {                                          StartPoint = new Point(x1' y1)'                                          Segments = pscollection'                                      };                                      PathFigureCollection pfcollection = new PathFigureCollection();                                      pfcollection.Add(pf);                                      PathGeometry pathGeometry = new PathGeometry();                                      pathGeometry.Figures = pfcollection;                                      path.Data = pathGeometry;                                        this.canvasContainer.Children.Add(path);                                  }                                  else                                  {                                      var x3 = x1 + WIDTH / 2;                                      var path = new System.Windows.Shapes.Path                                      {                                          Stroke = new SolidColorBrush(Color.FromArgb(255' 153' 182' 209))'                                          StrokeThickness = 4'                                      };                                        PathSegmentCollection pscollection = new PathSegmentCollection();                                        BezierSegment curve = new BezierSegment(                                          new Point(x3' y1)' new Point(x3' y2)' new Point(x1' y2)' true);                                      pscollection.Add(curve);                                        pscollection.Add(new LineSegment(new Point(x2' y2)' true));                                        PathFigure pf = new PathFigure                                      {                                          StartPoint = new Point(x3' y1)'                                          Segments = pscollection'                                      };                                      PathFigureCollection pfcollection = new PathFigureCollection();                                      pfcollection.Add(pf);                                      PathGeometry pathGeometry = new PathGeometry();                                      pathGeometry.Figures = pfcollection;                                      path.Data = pathGeometry;                                        this.canvasContainer.Children.Add(path);                                  }                              }                                #endregion                          }                            AdjustCanvasSize();                      }                        if (scroll)                      {                          //this.Scaler.ScaleX = this.Scaler.ScaleY = 1;                          //AdjustCanvasSize();                            this.zoomAndPanControl.ContentScale = 1;                          this.canvasContainer.SetValue(Canvas.LeftProperty' 0.0);                          this.canvasContainer.SetValue(Canvas.TopProperty' 0.0);                          this.scrollRoot.ScrollToRightEnd();                      }                  }                  catch (Exception ex)                  {                      Log.WriteLine("History Graph Show: {0}"' ex.ToString());                  }                    HistoryViewCommands.GraphLoaded.Execute(null' this);                };
Magic Number,GitScc.UI,HistoryGraph,C:\repos\yysun_git-tools\GitUI\UI\HistoryGraph.xaml.cs,Show,The following statement contains a magic number: Action action = () =>              {                  try                  {                      IList<GraphNode> commits = null;                      string hash = null;                        if (tracker != null && tracker.IsGit)                      {                          commits = tracker.RepositoryGraph.Nodes;                          hash = GetHashCode(commits);                      }                        bool changed = true; // lastHash == null ? hash != null : !lastHash.Equals(hash);                        if (changed)                      {                          lastHash = hash;                            canvasContainer.Children.Clear();                          maxX = maxY = 0;                            if (changed && commits != null && commits.Any())                          {                              maxX = commits.Count();                              maxY = commits.Max(c => c.X);                                for (int i = commits.Count() - 1; i >= 0; i--)                              {                                  var commit = commits[i];                                    #region Add commit box                                    var box = new CommitBox();                                  box.DataContext = new                                  {                                      Id = commit.Id'                                      ShortId = commit.ShortId'                                      Comments = commit.Message'                                      Author = commit.AuthorName'                                      Date = commit.AuthorDateRelative'                                      Refs = commit.Refs                                  };                                    box.Height = HEIGHT;                                  box.Width = WIDTH;                                    double left = GetScreenX(maxX - commit.Y);                                  double top = GetScreenY(commit.X);                                    Canvas.SetLeft(box' left);                                  Canvas.SetTop(box' top);                                  Canvas.SetZIndex(box' 10);                                    this.canvasContainer.Children.Add(box);                                    #endregion                                    #region Add Branches                                    var m = 0;                                  foreach (var head in commit.Refs.Where(r => r.Type == RefTypes.Branch || r.Type == RefTypes.HEAD))                                  {                                      var control = new CommitHead                                      {                                          DataContext = head'                                      };                                        Canvas.SetLeft(control' left + WIDTH + 4);                                      Canvas.SetTop(control' top + m++ * 30);                                      this.canvasContainer.Children.Add(control);                                    }                                  #endregion                                    #region Add Tags                                  m = 0;                                  foreach (var tag in commit.Refs.Where(r => r.Type == RefTypes.Tag))                                  {                                      var control = new CommitTag                                      {                                          DataContext = tag'                                      };                                        Canvas.SetLeft(control' left + m++ * 80); // TODO: get width of the control                                      Canvas.SetTop(control' top - 24);                                      this.canvasContainer.Children.Add(control);                                  }                                    #endregion                                    #region Add Remote Branches                                  m = 0;                                  foreach (var name in commit.Refs.Where(r => r.Type == RefTypes.RemoteBranch))                                  {                                      var control = new CommitRemote                                      {                                          DataContext = new { Text = name }'                                      };                                        Canvas.SetLeft(control' left + m++ * 100); // TODO: get width of the control                                      Canvas.SetTop(control' top + HEIGHT + 4);                                      this.canvasContainer.Children.Add(control);                                  }                                  #endregion                              }                                #region Add commit links                                var links = tracker.RepositoryGraph.Links;                                foreach (var link in links)                              {                                  // current node                                  double x1 = link.Y1;                                  double y1 = link.X1;                                    // parent node                                  double x2 = link.Y2;                                  double y2 = link.X2;                                    bool flip = links.Any(lnk => lnk.X1 == x2 && lnk.Y2 == y2 && lnk.X1 == lnk.X2);                                    x1 = GetScreenX(maxX - x1);                                  y1 = GetScreenY(y1) + HEIGHT / 2;                                  x2 = GetScreenX(maxX - x2) + WIDTH;                                  y2 = GetScreenY(y2) + HEIGHT / 2;                                    if (y1 == y2)                                  {                                      var line = new Line                                      {                                          Stroke = new SolidColorBrush(Color.FromArgb(255' 153' 182' 209))'                                          StrokeThickness = 4'                                      };                                      line.X1 = x1;                                      line.Y1 = y1;                                      line.X2 = x2;                                      line.Y2 = y2;                                      this.canvasContainer.Children.Add(line);                                  }                                  else if (y1 > y2 && !flip)                                  {                                      var x3 = x2 - WIDTH / 2;                                      var path = new System.Windows.Shapes.Path                                      {                                          Stroke = new SolidColorBrush(Color.FromArgb(255' 153' 182' 209))'                                          StrokeThickness = 4'                                      };                                        PathSegmentCollection pscollection = new PathSegmentCollection();                                        pscollection.Add(new LineSegment(new Point(x2' y1)' true));                                        BezierSegment curve = new BezierSegment(                                          new Point(x2' y1)' new Point(x3' y1)' new Point(x3' y2)' true);                                      pscollection.Add(curve);                                        PathFigure pf = new PathFigure                                      {                                          StartPoint = new Point(x1' y1)'                                          Segments = pscollection'                                      };                                      PathFigureCollection pfcollection = new PathFigureCollection();                                      pfcollection.Add(pf);                                      PathGeometry pathGeometry = new PathGeometry();                                      pathGeometry.Figures = pfcollection;                                      path.Data = pathGeometry;                                        this.canvasContainer.Children.Add(path);                                  }                                  else                                  {                                      var x3 = x1 + WIDTH / 2;                                      var path = new System.Windows.Shapes.Path                                      {                                          Stroke = new SolidColorBrush(Color.FromArgb(255' 153' 182' 209))'                                          StrokeThickness = 4'                                      };                                        PathSegmentCollection pscollection = new PathSegmentCollection();                                        BezierSegment curve = new BezierSegment(                                          new Point(x3' y1)' new Point(x3' y2)' new Point(x1' y2)' true);                                      pscollection.Add(curve);                                        pscollection.Add(new LineSegment(new Point(x2' y2)' true));                                        PathFigure pf = new PathFigure                                      {                                          StartPoint = new Point(x3' y1)'                                          Segments = pscollection'                                      };                                      PathFigureCollection pfcollection = new PathFigureCollection();                                      pfcollection.Add(pf);                                      PathGeometry pathGeometry = new PathGeometry();                                      pathGeometry.Figures = pfcollection;                                      path.Data = pathGeometry;                                        this.canvasContainer.Children.Add(path);                                  }                              }                                #endregion                          }                            AdjustCanvasSize();                      }                        if (scroll)                      {                          //this.Scaler.ScaleX = this.Scaler.ScaleY = 1;                          //AdjustCanvasSize();                            this.zoomAndPanControl.ContentScale = 1;                          this.canvasContainer.SetValue(Canvas.LeftProperty' 0.0);                          this.canvasContainer.SetValue(Canvas.TopProperty' 0.0);                          this.scrollRoot.ScrollToRightEnd();                      }                  }                  catch (Exception ex)                  {                      Log.WriteLine("History Graph Show: {0}"' ex.ToString());                  }                    HistoryViewCommands.GraphLoaded.Execute(null' this);                };
Magic Number,GitScc.UI,HistoryGraph,C:\repos\yysun_git-tools\GitUI\UI\HistoryGraph.xaml.cs,Show,The following statement contains a magic number: Action action = () =>              {                  try                  {                      IList<GraphNode> commits = null;                      string hash = null;                        if (tracker != null && tracker.IsGit)                      {                          commits = tracker.RepositoryGraph.Nodes;                          hash = GetHashCode(commits);                      }                        bool changed = true; // lastHash == null ? hash != null : !lastHash.Equals(hash);                        if (changed)                      {                          lastHash = hash;                            canvasContainer.Children.Clear();                          maxX = maxY = 0;                            if (changed && commits != null && commits.Any())                          {                              maxX = commits.Count();                              maxY = commits.Max(c => c.X);                                for (int i = commits.Count() - 1; i >= 0; i--)                              {                                  var commit = commits[i];                                    #region Add commit box                                    var box = new CommitBox();                                  box.DataContext = new                                  {                                      Id = commit.Id'                                      ShortId = commit.ShortId'                                      Comments = commit.Message'                                      Author = commit.AuthorName'                                      Date = commit.AuthorDateRelative'                                      Refs = commit.Refs                                  };                                    box.Height = HEIGHT;                                  box.Width = WIDTH;                                    double left = GetScreenX(maxX - commit.Y);                                  double top = GetScreenY(commit.X);                                    Canvas.SetLeft(box' left);                                  Canvas.SetTop(box' top);                                  Canvas.SetZIndex(box' 10);                                    this.canvasContainer.Children.Add(box);                                    #endregion                                    #region Add Branches                                    var m = 0;                                  foreach (var head in commit.Refs.Where(r => r.Type == RefTypes.Branch || r.Type == RefTypes.HEAD))                                  {                                      var control = new CommitHead                                      {                                          DataContext = head'                                      };                                        Canvas.SetLeft(control' left + WIDTH + 4);                                      Canvas.SetTop(control' top + m++ * 30);                                      this.canvasContainer.Children.Add(control);                                    }                                  #endregion                                    #region Add Tags                                  m = 0;                                  foreach (var tag in commit.Refs.Where(r => r.Type == RefTypes.Tag))                                  {                                      var control = new CommitTag                                      {                                          DataContext = tag'                                      };                                        Canvas.SetLeft(control' left + m++ * 80); // TODO: get width of the control                                      Canvas.SetTop(control' top - 24);                                      this.canvasContainer.Children.Add(control);                                  }                                    #endregion                                    #region Add Remote Branches                                  m = 0;                                  foreach (var name in commit.Refs.Where(r => r.Type == RefTypes.RemoteBranch))                                  {                                      var control = new CommitRemote                                      {                                          DataContext = new { Text = name }'                                      };                                        Canvas.SetLeft(control' left + m++ * 100); // TODO: get width of the control                                      Canvas.SetTop(control' top + HEIGHT + 4);                                      this.canvasContainer.Children.Add(control);                                  }                                  #endregion                              }                                #region Add commit links                                var links = tracker.RepositoryGraph.Links;                                foreach (var link in links)                              {                                  // current node                                  double x1 = link.Y1;                                  double y1 = link.X1;                                    // parent node                                  double x2 = link.Y2;                                  double y2 = link.X2;                                    bool flip = links.Any(lnk => lnk.X1 == x2 && lnk.Y2 == y2 && lnk.X1 == lnk.X2);                                    x1 = GetScreenX(maxX - x1);                                  y1 = GetScreenY(y1) + HEIGHT / 2;                                  x2 = GetScreenX(maxX - x2) + WIDTH;                                  y2 = GetScreenY(y2) + HEIGHT / 2;                                    if (y1 == y2)                                  {                                      var line = new Line                                      {                                          Stroke = new SolidColorBrush(Color.FromArgb(255' 153' 182' 209))'                                          StrokeThickness = 4'                                      };                                      line.X1 = x1;                                      line.Y1 = y1;                                      line.X2 = x2;                                      line.Y2 = y2;                                      this.canvasContainer.Children.Add(line);                                  }                                  else if (y1 > y2 && !flip)                                  {                                      var x3 = x2 - WIDTH / 2;                                      var path = new System.Windows.Shapes.Path                                      {                                          Stroke = new SolidColorBrush(Color.FromArgb(255' 153' 182' 209))'                                          StrokeThickness = 4'                                      };                                        PathSegmentCollection pscollection = new PathSegmentCollection();                                        pscollection.Add(new LineSegment(new Point(x2' y1)' true));                                        BezierSegment curve = new BezierSegment(                                          new Point(x2' y1)' new Point(x3' y1)' new Point(x3' y2)' true);                                      pscollection.Add(curve);                                        PathFigure pf = new PathFigure                                      {                                          StartPoint = new Point(x1' y1)'                                          Segments = pscollection'                                      };                                      PathFigureCollection pfcollection = new PathFigureCollection();                                      pfcollection.Add(pf);                                      PathGeometry pathGeometry = new PathGeometry();                                      pathGeometry.Figures = pfcollection;                                      path.Data = pathGeometry;                                        this.canvasContainer.Children.Add(path);                                  }                                  else                                  {                                      var x3 = x1 + WIDTH / 2;                                      var path = new System.Windows.Shapes.Path                                      {                                          Stroke = new SolidColorBrush(Color.FromArgb(255' 153' 182' 209))'                                          StrokeThickness = 4'                                      };                                        PathSegmentCollection pscollection = new PathSegmentCollection();                                        BezierSegment curve = new BezierSegment(                                          new Point(x3' y1)' new Point(x3' y2)' new Point(x1' y2)' true);                                      pscollection.Add(curve);                                        pscollection.Add(new LineSegment(new Point(x2' y2)' true));                                        PathFigure pf = new PathFigure                                      {                                          StartPoint = new Point(x3' y1)'                                          Segments = pscollection'                                      };                                      PathFigureCollection pfcollection = new PathFigureCollection();                                      pfcollection.Add(pf);                                      PathGeometry pathGeometry = new PathGeometry();                                      pathGeometry.Figures = pfcollection;                                      path.Data = pathGeometry;                                        this.canvasContainer.Children.Add(path);                                  }                              }                                #endregion                          }                            AdjustCanvasSize();                      }                        if (scroll)                      {                          //this.Scaler.ScaleX = this.Scaler.ScaleY = 1;                          //AdjustCanvasSize();                            this.zoomAndPanControl.ContentScale = 1;                          this.canvasContainer.SetValue(Canvas.LeftProperty' 0.0);                          this.canvasContainer.SetValue(Canvas.TopProperty' 0.0);                          this.scrollRoot.ScrollToRightEnd();                      }                  }                  catch (Exception ex)                  {                      Log.WriteLine("History Graph Show: {0}"' ex.ToString());                  }                    HistoryViewCommands.GraphLoaded.Execute(null' this);                };
Magic Number,GitScc.UI,HistoryGraph,C:\repos\yysun_git-tools\GitUI\UI\HistoryGraph.xaml.cs,Show,The following statement contains a magic number: Action action = () =>              {                  try                  {                      IList<GraphNode> commits = null;                      string hash = null;                        if (tracker != null && tracker.IsGit)                      {                          commits = tracker.RepositoryGraph.Nodes;                          hash = GetHashCode(commits);                      }                        bool changed = true; // lastHash == null ? hash != null : !lastHash.Equals(hash);                        if (changed)                      {                          lastHash = hash;                            canvasContainer.Children.Clear();                          maxX = maxY = 0;                            if (changed && commits != null && commits.Any())                          {                              maxX = commits.Count();                              maxY = commits.Max(c => c.X);                                for (int i = commits.Count() - 1; i >= 0; i--)                              {                                  var commit = commits[i];                                    #region Add commit box                                    var box = new CommitBox();                                  box.DataContext = new                                  {                                      Id = commit.Id'                                      ShortId = commit.ShortId'                                      Comments = commit.Message'                                      Author = commit.AuthorName'                                      Date = commit.AuthorDateRelative'                                      Refs = commit.Refs                                  };                                    box.Height = HEIGHT;                                  box.Width = WIDTH;                                    double left = GetScreenX(maxX - commit.Y);                                  double top = GetScreenY(commit.X);                                    Canvas.SetLeft(box' left);                                  Canvas.SetTop(box' top);                                  Canvas.SetZIndex(box' 10);                                    this.canvasContainer.Children.Add(box);                                    #endregion                                    #region Add Branches                                    var m = 0;                                  foreach (var head in commit.Refs.Where(r => r.Type == RefTypes.Branch || r.Type == RefTypes.HEAD))                                  {                                      var control = new CommitHead                                      {                                          DataContext = head'                                      };                                        Canvas.SetLeft(control' left + WIDTH + 4);                                      Canvas.SetTop(control' top + m++ * 30);                                      this.canvasContainer.Children.Add(control);                                    }                                  #endregion                                    #region Add Tags                                  m = 0;                                  foreach (var tag in commit.Refs.Where(r => r.Type == RefTypes.Tag))                                  {                                      var control = new CommitTag                                      {                                          DataContext = tag'                                      };                                        Canvas.SetLeft(control' left + m++ * 80); // TODO: get width of the control                                      Canvas.SetTop(control' top - 24);                                      this.canvasContainer.Children.Add(control);                                  }                                    #endregion                                    #region Add Remote Branches                                  m = 0;                                  foreach (var name in commit.Refs.Where(r => r.Type == RefTypes.RemoteBranch))                                  {                                      var control = new CommitRemote                                      {                                          DataContext = new { Text = name }'                                      };                                        Canvas.SetLeft(control' left + m++ * 100); // TODO: get width of the control                                      Canvas.SetTop(control' top + HEIGHT + 4);                                      this.canvasContainer.Children.Add(control);                                  }                                  #endregion                              }                                #region Add commit links                                var links = tracker.RepositoryGraph.Links;                                foreach (var link in links)                              {                                  // current node                                  double x1 = link.Y1;                                  double y1 = link.X1;                                    // parent node                                  double x2 = link.Y2;                                  double y2 = link.X2;                                    bool flip = links.Any(lnk => lnk.X1 == x2 && lnk.Y2 == y2 && lnk.X1 == lnk.X2);                                    x1 = GetScreenX(maxX - x1);                                  y1 = GetScreenY(y1) + HEIGHT / 2;                                  x2 = GetScreenX(maxX - x2) + WIDTH;                                  y2 = GetScreenY(y2) + HEIGHT / 2;                                    if (y1 == y2)                                  {                                      var line = new Line                                      {                                          Stroke = new SolidColorBrush(Color.FromArgb(255' 153' 182' 209))'                                          StrokeThickness = 4'                                      };                                      line.X1 = x1;                                      line.Y1 = y1;                                      line.X2 = x2;                                      line.Y2 = y2;                                      this.canvasContainer.Children.Add(line);                                  }                                  else if (y1 > y2 && !flip)                                  {                                      var x3 = x2 - WIDTH / 2;                                      var path = new System.Windows.Shapes.Path                                      {                                          Stroke = new SolidColorBrush(Color.FromArgb(255' 153' 182' 209))'                                          StrokeThickness = 4'                                      };                                        PathSegmentCollection pscollection = new PathSegmentCollection();                                        pscollection.Add(new LineSegment(new Point(x2' y1)' true));                                        BezierSegment curve = new BezierSegment(                                          new Point(x2' y1)' new Point(x3' y1)' new Point(x3' y2)' true);                                      pscollection.Add(curve);                                        PathFigure pf = new PathFigure                                      {                                          StartPoint = new Point(x1' y1)'                                          Segments = pscollection'                                      };                                      PathFigureCollection pfcollection = new PathFigureCollection();                                      pfcollection.Add(pf);                                      PathGeometry pathGeometry = new PathGeometry();                                      pathGeometry.Figures = pfcollection;                                      path.Data = pathGeometry;                                        this.canvasContainer.Children.Add(path);                                  }                                  else                                  {                                      var x3 = x1 + WIDTH / 2;                                      var path = new System.Windows.Shapes.Path                                      {                                          Stroke = new SolidColorBrush(Color.FromArgb(255' 153' 182' 209))'                                          StrokeThickness = 4'                                      };                                        PathSegmentCollection pscollection = new PathSegmentCollection();                                        BezierSegment curve = new BezierSegment(                                          new Point(x3' y1)' new Point(x3' y2)' new Point(x1' y2)' true);                                      pscollection.Add(curve);                                        pscollection.Add(new LineSegment(new Point(x2' y2)' true));                                        PathFigure pf = new PathFigure                                      {                                          StartPoint = new Point(x3' y1)'                                          Segments = pscollection'                                      };                                      PathFigureCollection pfcollection = new PathFigureCollection();                                      pfcollection.Add(pf);                                      PathGeometry pathGeometry = new PathGeometry();                                      pathGeometry.Figures = pfcollection;                                      path.Data = pathGeometry;                                        this.canvasContainer.Children.Add(path);                                  }                              }                                #endregion                          }                            AdjustCanvasSize();                      }                        if (scroll)                      {                          //this.Scaler.ScaleX = this.Scaler.ScaleY = 1;                          //AdjustCanvasSize();                            this.zoomAndPanControl.ContentScale = 1;                          this.canvasContainer.SetValue(Canvas.LeftProperty' 0.0);                          this.canvasContainer.SetValue(Canvas.TopProperty' 0.0);                          this.scrollRoot.ScrollToRightEnd();                      }                  }                  catch (Exception ex)                  {                      Log.WriteLine("History Graph Show: {0}"' ex.ToString());                  }                    HistoryViewCommands.GraphLoaded.Execute(null' this);                };
Magic Number,GitScc.UI,HistoryGraph,C:\repos\yysun_git-tools\GitUI\UI\HistoryGraph.xaml.cs,Show,The following statement contains a magic number: Action action = () =>              {                  try                  {                      IList<GraphNode> commits = null;                      string hash = null;                        if (tracker != null && tracker.IsGit)                      {                          commits = tracker.RepositoryGraph.Nodes;                          hash = GetHashCode(commits);                      }                        bool changed = true; // lastHash == null ? hash != null : !lastHash.Equals(hash);                        if (changed)                      {                          lastHash = hash;                            canvasContainer.Children.Clear();                          maxX = maxY = 0;                            if (changed && commits != null && commits.Any())                          {                              maxX = commits.Count();                              maxY = commits.Max(c => c.X);                                for (int i = commits.Count() - 1; i >= 0; i--)                              {                                  var commit = commits[i];                                    #region Add commit box                                    var box = new CommitBox();                                  box.DataContext = new                                  {                                      Id = commit.Id'                                      ShortId = commit.ShortId'                                      Comments = commit.Message'                                      Author = commit.AuthorName'                                      Date = commit.AuthorDateRelative'                                      Refs = commit.Refs                                  };                                    box.Height = HEIGHT;                                  box.Width = WIDTH;                                    double left = GetScreenX(maxX - commit.Y);                                  double top = GetScreenY(commit.X);                                    Canvas.SetLeft(box' left);                                  Canvas.SetTop(box' top);                                  Canvas.SetZIndex(box' 10);                                    this.canvasContainer.Children.Add(box);                                    #endregion                                    #region Add Branches                                    var m = 0;                                  foreach (var head in commit.Refs.Where(r => r.Type == RefTypes.Branch || r.Type == RefTypes.HEAD))                                  {                                      var control = new CommitHead                                      {                                          DataContext = head'                                      };                                        Canvas.SetLeft(control' left + WIDTH + 4);                                      Canvas.SetTop(control' top + m++ * 30);                                      this.canvasContainer.Children.Add(control);                                    }                                  #endregion                                    #region Add Tags                                  m = 0;                                  foreach (var tag in commit.Refs.Where(r => r.Type == RefTypes.Tag))                                  {                                      var control = new CommitTag                                      {                                          DataContext = tag'                                      };                                        Canvas.SetLeft(control' left + m++ * 80); // TODO: get width of the control                                      Canvas.SetTop(control' top - 24);                                      this.canvasContainer.Children.Add(control);                                  }                                    #endregion                                    #region Add Remote Branches                                  m = 0;                                  foreach (var name in commit.Refs.Where(r => r.Type == RefTypes.RemoteBranch))                                  {                                      var control = new CommitRemote                                      {                                          DataContext = new { Text = name }'                                      };                                        Canvas.SetLeft(control' left + m++ * 100); // TODO: get width of the control                                      Canvas.SetTop(control' top + HEIGHT + 4);                                      this.canvasContainer.Children.Add(control);                                  }                                  #endregion                              }                                #region Add commit links                                var links = tracker.RepositoryGraph.Links;                                foreach (var link in links)                              {                                  // current node                                  double x1 = link.Y1;                                  double y1 = link.X1;                                    // parent node                                  double x2 = link.Y2;                                  double y2 = link.X2;                                    bool flip = links.Any(lnk => lnk.X1 == x2 && lnk.Y2 == y2 && lnk.X1 == lnk.X2);                                    x1 = GetScreenX(maxX - x1);                                  y1 = GetScreenY(y1) + HEIGHT / 2;                                  x2 = GetScreenX(maxX - x2) + WIDTH;                                  y2 = GetScreenY(y2) + HEIGHT / 2;                                    if (y1 == y2)                                  {                                      var line = new Line                                      {                                          Stroke = new SolidColorBrush(Color.FromArgb(255' 153' 182' 209))'                                          StrokeThickness = 4'                                      };                                      line.X1 = x1;                                      line.Y1 = y1;                                      line.X2 = x2;                                      line.Y2 = y2;                                      this.canvasContainer.Children.Add(line);                                  }                                  else if (y1 > y2 && !flip)                                  {                                      var x3 = x2 - WIDTH / 2;                                      var path = new System.Windows.Shapes.Path                                      {                                          Stroke = new SolidColorBrush(Color.FromArgb(255' 153' 182' 209))'                                          StrokeThickness = 4'                                      };                                        PathSegmentCollection pscollection = new PathSegmentCollection();                                        pscollection.Add(new LineSegment(new Point(x2' y1)' true));                                        BezierSegment curve = new BezierSegment(                                          new Point(x2' y1)' new Point(x3' y1)' new Point(x3' y2)' true);                                      pscollection.Add(curve);                                        PathFigure pf = new PathFigure                                      {                                          StartPoint = new Point(x1' y1)'                                          Segments = pscollection'                                      };                                      PathFigureCollection pfcollection = new PathFigureCollection();                                      pfcollection.Add(pf);                                      PathGeometry pathGeometry = new PathGeometry();                                      pathGeometry.Figures = pfcollection;                                      path.Data = pathGeometry;                                        this.canvasContainer.Children.Add(path);                                  }                                  else                                  {                                      var x3 = x1 + WIDTH / 2;                                      var path = new System.Windows.Shapes.Path                                      {                                          Stroke = new SolidColorBrush(Color.FromArgb(255' 153' 182' 209))'                                          StrokeThickness = 4'                                      };                                        PathSegmentCollection pscollection = new PathSegmentCollection();                                        BezierSegment curve = new BezierSegment(                                          new Point(x3' y1)' new Point(x3' y2)' new Point(x1' y2)' true);                                      pscollection.Add(curve);                                        pscollection.Add(new LineSegment(new Point(x2' y2)' true));                                        PathFigure pf = new PathFigure                                      {                                          StartPoint = new Point(x3' y1)'                                          Segments = pscollection'                                      };                                      PathFigureCollection pfcollection = new PathFigureCollection();                                      pfcollection.Add(pf);                                      PathGeometry pathGeometry = new PathGeometry();                                      pathGeometry.Figures = pfcollection;                                      path.Data = pathGeometry;                                        this.canvasContainer.Children.Add(path);                                  }                              }                                #endregion                          }                            AdjustCanvasSize();                      }                        if (scroll)                      {                          //this.Scaler.ScaleX = this.Scaler.ScaleY = 1;                          //AdjustCanvasSize();                            this.zoomAndPanControl.ContentScale = 1;                          this.canvasContainer.SetValue(Canvas.LeftProperty' 0.0);                          this.canvasContainer.SetValue(Canvas.TopProperty' 0.0);                          this.scrollRoot.ScrollToRightEnd();                      }                  }                  catch (Exception ex)                  {                      Log.WriteLine("History Graph Show: {0}"' ex.ToString());                  }                    HistoryViewCommands.GraphLoaded.Execute(null' this);                };
Magic Number,GitScc.UI,HistoryGraph,C:\repos\yysun_git-tools\GitUI\UI\HistoryGraph.xaml.cs,Show,The following statement contains a magic number: Action action = () =>              {                  try                  {                      IList<GraphNode> commits = null;                      string hash = null;                        if (tracker != null && tracker.IsGit)                      {                          commits = tracker.RepositoryGraph.Nodes;                          hash = GetHashCode(commits);                      }                        bool changed = true; // lastHash == null ? hash != null : !lastHash.Equals(hash);                        if (changed)                      {                          lastHash = hash;                            canvasContainer.Children.Clear();                          maxX = maxY = 0;                            if (changed && commits != null && commits.Any())                          {                              maxX = commits.Count();                              maxY = commits.Max(c => c.X);                                for (int i = commits.Count() - 1; i >= 0; i--)                              {                                  var commit = commits[i];                                    #region Add commit box                                    var box = new CommitBox();                                  box.DataContext = new                                  {                                      Id = commit.Id'                                      ShortId = commit.ShortId'                                      Comments = commit.Message'                                      Author = commit.AuthorName'                                      Date = commit.AuthorDateRelative'                                      Refs = commit.Refs                                  };                                    box.Height = HEIGHT;                                  box.Width = WIDTH;                                    double left = GetScreenX(maxX - commit.Y);                                  double top = GetScreenY(commit.X);                                    Canvas.SetLeft(box' left);                                  Canvas.SetTop(box' top);                                  Canvas.SetZIndex(box' 10);                                    this.canvasContainer.Children.Add(box);                                    #endregion                                    #region Add Branches                                    var m = 0;                                  foreach (var head in commit.Refs.Where(r => r.Type == RefTypes.Branch || r.Type == RefTypes.HEAD))                                  {                                      var control = new CommitHead                                      {                                          DataContext = head'                                      };                                        Canvas.SetLeft(control' left + WIDTH + 4);                                      Canvas.SetTop(control' top + m++ * 30);                                      this.canvasContainer.Children.Add(control);                                    }                                  #endregion                                    #region Add Tags                                  m = 0;                                  foreach (var tag in commit.Refs.Where(r => r.Type == RefTypes.Tag))                                  {                                      var control = new CommitTag                                      {                                          DataContext = tag'                                      };                                        Canvas.SetLeft(control' left + m++ * 80); // TODO: get width of the control                                      Canvas.SetTop(control' top - 24);                                      this.canvasContainer.Children.Add(control);                                  }                                    #endregion                                    #region Add Remote Branches                                  m = 0;                                  foreach (var name in commit.Refs.Where(r => r.Type == RefTypes.RemoteBranch))                                  {                                      var control = new CommitRemote                                      {                                          DataContext = new { Text = name }'                                      };                                        Canvas.SetLeft(control' left + m++ * 100); // TODO: get width of the control                                      Canvas.SetTop(control' top + HEIGHT + 4);                                      this.canvasContainer.Children.Add(control);                                  }                                  #endregion                              }                                #region Add commit links                                var links = tracker.RepositoryGraph.Links;                                foreach (var link in links)                              {                                  // current node                                  double x1 = link.Y1;                                  double y1 = link.X1;                                    // parent node                                  double x2 = link.Y2;                                  double y2 = link.X2;                                    bool flip = links.Any(lnk => lnk.X1 == x2 && lnk.Y2 == y2 && lnk.X1 == lnk.X2);                                    x1 = GetScreenX(maxX - x1);                                  y1 = GetScreenY(y1) + HEIGHT / 2;                                  x2 = GetScreenX(maxX - x2) + WIDTH;                                  y2 = GetScreenY(y2) + HEIGHT / 2;                                    if (y1 == y2)                                  {                                      var line = new Line                                      {                                          Stroke = new SolidColorBrush(Color.FromArgb(255' 153' 182' 209))'                                          StrokeThickness = 4'                                      };                                      line.X1 = x1;                                      line.Y1 = y1;                                      line.X2 = x2;                                      line.Y2 = y2;                                      this.canvasContainer.Children.Add(line);                                  }                                  else if (y1 > y2 && !flip)                                  {                                      var x3 = x2 - WIDTH / 2;                                      var path = new System.Windows.Shapes.Path                                      {                                          Stroke = new SolidColorBrush(Color.FromArgb(255' 153' 182' 209))'                                          StrokeThickness = 4'                                      };                                        PathSegmentCollection pscollection = new PathSegmentCollection();                                        pscollection.Add(new LineSegment(new Point(x2' y1)' true));                                        BezierSegment curve = new BezierSegment(                                          new Point(x2' y1)' new Point(x3' y1)' new Point(x3' y2)' true);                                      pscollection.Add(curve);                                        PathFigure pf = new PathFigure                                      {                                          StartPoint = new Point(x1' y1)'                                          Segments = pscollection'                                      };                                      PathFigureCollection pfcollection = new PathFigureCollection();                                      pfcollection.Add(pf);                                      PathGeometry pathGeometry = new PathGeometry();                                      pathGeometry.Figures = pfcollection;                                      path.Data = pathGeometry;                                        this.canvasContainer.Children.Add(path);                                  }                                  else                                  {                                      var x3 = x1 + WIDTH / 2;                                      var path = new System.Windows.Shapes.Path                                      {                                          Stroke = new SolidColorBrush(Color.FromArgb(255' 153' 182' 209))'                                          StrokeThickness = 4'                                      };                                        PathSegmentCollection pscollection = new PathSegmentCollection();                                        BezierSegment curve = new BezierSegment(                                          new Point(x3' y1)' new Point(x3' y2)' new Point(x1' y2)' true);                                      pscollection.Add(curve);                                        pscollection.Add(new LineSegment(new Point(x2' y2)' true));                                        PathFigure pf = new PathFigure                                      {                                          StartPoint = new Point(x3' y1)'                                          Segments = pscollection'                                      };                                      PathFigureCollection pfcollection = new PathFigureCollection();                                      pfcollection.Add(pf);                                      PathGeometry pathGeometry = new PathGeometry();                                      pathGeometry.Figures = pfcollection;                                      path.Data = pathGeometry;                                        this.canvasContainer.Children.Add(path);                                  }                              }                                #endregion                          }                            AdjustCanvasSize();                      }                        if (scroll)                      {                          //this.Scaler.ScaleX = this.Scaler.ScaleY = 1;                          //AdjustCanvasSize();                            this.zoomAndPanControl.ContentScale = 1;                          this.canvasContainer.SetValue(Canvas.LeftProperty' 0.0);                          this.canvasContainer.SetValue(Canvas.TopProperty' 0.0);                          this.scrollRoot.ScrollToRightEnd();                      }                  }                  catch (Exception ex)                  {                      Log.WriteLine("History Graph Show: {0}"' ex.ToString());                  }                    HistoryViewCommands.GraphLoaded.Execute(null' this);                };
Magic Number,GitScc.UI,HistoryGraph,C:\repos\yysun_git-tools\GitUI\UI\HistoryGraph.xaml.cs,GetHashCode,The following statement contains a magic number: foreach (var c in commits)              {                  sb.Append(c.Id.Substring(5));                  foreach (var r in c.Refs) sb.Append(r.Id.Substring(5));              }
Magic Number,GitScc.UI,HistoryGraph,C:\repos\yysun_git-tools\GitUI\UI\HistoryGraph.xaml.cs,GetHashCode,The following statement contains a magic number: foreach (var c in commits)              {                  sb.Append(c.Id.Substring(5));                  foreach (var r in c.Refs) sb.Append(r.Id.Substring(5));              }
Magic Number,GitScc.UI,HistoryGraph,C:\repos\yysun_git-tools\GitUI\UI\HistoryGraph.xaml.cs,ExportToPng,The following statement contains a magic number: RenderTargetBitmap renderBitmap =                new RenderTargetBitmap( (int)size.Width*300/96' (int)size.Height*300/96' 300d' 300d'                  PixelFormats.Pbgra32);
Magic Number,GitScc.UI,HistoryGraph,C:\repos\yysun_git-tools\GitUI\UI\HistoryGraph.xaml.cs,ExportToPng,The following statement contains a magic number: RenderTargetBitmap renderBitmap =                new RenderTargetBitmap( (int)size.Width*300/96' (int)size.Height*300/96' 300d' 300d'                  PixelFormats.Pbgra32);
Magic Number,GitScc.UI,HistoryGraph,C:\repos\yysun_git-tools\GitUI\UI\HistoryGraph.xaml.cs,ExportToPng,The following statement contains a magic number: RenderTargetBitmap renderBitmap =                new RenderTargetBitmap( (int)size.Width*300/96' (int)size.Height*300/96' 300d' 300d'                  PixelFormats.Pbgra32);
Magic Number,GitScc.UI,HistoryGraph,C:\repos\yysun_git-tools\GitUI\UI\HistoryGraph.xaml.cs,ExportToPng,The following statement contains a magic number: RenderTargetBitmap renderBitmap =                new RenderTargetBitmap( (int)size.Width*300/96' (int)size.Height*300/96' 300d' 300d'                  PixelFormats.Pbgra32);
Magic Number,GitScc.UI,HistoryGraph,C:\repos\yysun_git-tools\GitUI\UI\HistoryGraph.xaml.cs,ScrollToCommit,The following statement contains a magic number: var id = commitId.Substring(0' 7);
Magic Number,GitScc.UI,HistoryGraph,C:\repos\yysun_git-tools\GitUI\UI\HistoryGraph.xaml.cs,ScrollToCommit,The following statement contains a magic number: foreach (var element in this.canvasContainer.Children)              {                  var box = element as CommitBox;                  if (box != null)                  {                      box.Selected = box.txtId.Text == id;                      if (box.Selected)                      {                          //this.Scaler.ScaleX = this.Scaler.ScaleY = 1;                          zoomAndPanControl.ContentScale = 1;                            //AdjustCanvasSize();                          this.canvasContainer.SetValue(Canvas.LeftProperty' 0.0);                          this.canvasContainer.SetValue(Canvas.TopProperty' 0.0);                            var left = Canvas.GetLeft(box) + Canvas.GetLeft(canvasContainer) - this.ActualWidth / 2 + GRID_WIDTH / 2;                          var top = Canvas.GetTop(box) + Canvas.GetTop(canvasContainer) - this.ActualHeight / 2 + GRID_HEIGHT / 2;                            this.scrollRoot.ScrollToHorizontalOffset(left);                          this.scrollRoot.ScrollToVerticalOffset(top);                      }                  }              }
Magic Number,GitScc.UI,HistoryGraph,C:\repos\yysun_git-tools\GitUI\UI\HistoryGraph.xaml.cs,ScrollToCommit,The following statement contains a magic number: foreach (var element in this.canvasContainer.Children)              {                  var box = element as CommitBox;                  if (box != null)                  {                      box.Selected = box.txtId.Text == id;                      if (box.Selected)                      {                          //this.Scaler.ScaleX = this.Scaler.ScaleY = 1;                          zoomAndPanControl.ContentScale = 1;                            //AdjustCanvasSize();                          this.canvasContainer.SetValue(Canvas.LeftProperty' 0.0);                          this.canvasContainer.SetValue(Canvas.TopProperty' 0.0);                            var left = Canvas.GetLeft(box) + Canvas.GetLeft(canvasContainer) - this.ActualWidth / 2 + GRID_WIDTH / 2;                          var top = Canvas.GetTop(box) + Canvas.GetTop(canvasContainer) - this.ActualHeight / 2 + GRID_HEIGHT / 2;                            this.scrollRoot.ScrollToHorizontalOffset(left);                          this.scrollRoot.ScrollToVerticalOffset(top);                      }                  }              }
Magic Number,GitScc.UI,HistoryGraph,C:\repos\yysun_git-tools\GitUI\UI\HistoryGraph.xaml.cs,ScrollToCommit,The following statement contains a magic number: foreach (var element in this.canvasContainer.Children)              {                  var box = element as CommitBox;                  if (box != null)                  {                      box.Selected = box.txtId.Text == id;                      if (box.Selected)                      {                          //this.Scaler.ScaleX = this.Scaler.ScaleY = 1;                          zoomAndPanControl.ContentScale = 1;                            //AdjustCanvasSize();                          this.canvasContainer.SetValue(Canvas.LeftProperty' 0.0);                          this.canvasContainer.SetValue(Canvas.TopProperty' 0.0);                            var left = Canvas.GetLeft(box) + Canvas.GetLeft(canvasContainer) - this.ActualWidth / 2 + GRID_WIDTH / 2;                          var top = Canvas.GetTop(box) + Canvas.GetTop(canvasContainer) - this.ActualHeight / 2 + GRID_HEIGHT / 2;                            this.scrollRoot.ScrollToHorizontalOffset(left);                          this.scrollRoot.ScrollToVerticalOffset(top);                      }                  }              }
Magic Number,GitScc.UI,HistoryGraph,C:\repos\yysun_git-tools\GitUI\UI\HistoryGraph.xaml.cs,ScrollToCommit,The following statement contains a magic number: foreach (var element in this.canvasContainer.Children)              {                  var box = element as CommitBox;                  if (box != null)                  {                      box.Selected = box.txtId.Text == id;                      if (box.Selected)                      {                          //this.Scaler.ScaleX = this.Scaler.ScaleY = 1;                          zoomAndPanControl.ContentScale = 1;                            //AdjustCanvasSize();                          this.canvasContainer.SetValue(Canvas.LeftProperty' 0.0);                          this.canvasContainer.SetValue(Canvas.TopProperty' 0.0);                            var left = Canvas.GetLeft(box) + Canvas.GetLeft(canvasContainer) - this.ActualWidth / 2 + GRID_WIDTH / 2;                          var top = Canvas.GetTop(box) + Canvas.GetTop(canvasContainer) - this.ActualHeight / 2 + GRID_HEIGHT / 2;                            this.scrollRoot.ScrollToHorizontalOffset(left);                          this.scrollRoot.ScrollToVerticalOffset(top);                      }                  }              }
Magic Number,GitScc.UI,HistoryGraph,C:\repos\yysun_git-tools\GitUI\UI\HistoryGraph.xaml.cs,ZoomOut,The following statement contains a magic number: zoomAndPanControl.ContentScale -= 0.1;
Magic Number,GitScc.UI,HistoryGraph,C:\repos\yysun_git-tools\GitUI\UI\HistoryGraph.xaml.cs,ZoomIn,The following statement contains a magic number: zoomAndPanControl.ContentScale += 0.1;
Magic Number,GitScc.UI,HistoryGraph,C:\repos\yysun_git-tools\GitUI\UI\HistoryGraph.xaml.cs,AdjustCanvasSize,The following statement contains a magic number: this.canvasContainer.Width = Math.Max(this.ActualWidth - PADDING' (PADDING * 2 + maxX * GRID_WIDTH));
Magic Number,GitScc.UI,HistoryGraph,C:\repos\yysun_git-tools\GitUI\UI\HistoryGraph.xaml.cs,AdjustCanvasSize,The following statement contains a magic number: this.canvasContainer.Height = Math.Max(this.ActualHeight * 2' (PADDING * 2 + (maxY + 1) * GRID_HEIGHT));
Magic Number,GitScc.UI,HistoryGraph,C:\repos\yysun_git-tools\GitUI\UI\HistoryGraph.xaml.cs,AdjustCanvasSize,The following statement contains a magic number: this.canvasContainer.Height = Math.Max(this.ActualHeight * 2' (PADDING * 2 + (maxY + 1) * GRID_HEIGHT));
Magic Number,GitScc.UI,HistoryGraph,C:\repos\yysun_git-tools\GitUI\UI\HistoryGraph.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 8 "..\..\..\UI\HistoryGraph.xaml"              ((GitScc.UI.HistoryGraph)(target)).SizeChanged += new System.Windows.SizeChangedEventHandler(this.UserControl_SizeChanged);                            #line default              #line hidden                            #line 8 "..\..\..\UI\HistoryGraph.xaml"              ((GitScc.UI.HistoryGraph)(target)).ContextMenuOpening += new System.Windows.Controls.ContextMenuEventHandler(this.UserControl_ContextMenuOpening);                            #line default              #line hidden              return;              case 2:                            #line 11 "..\..\..\UI\HistoryGraph.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.menuOpen_Click);                            #line default              #line hidden              return;              case 3:              this.menuInit = ((System.Windows.Controls.MenuItem)(target));                            #line 12 "..\..\..\UI\HistoryGraph.xaml"              this.menuInit.Click += new System.Windows.RoutedEventHandler(this.menuInit_Click);                            #line default              #line hidden              return;              case 4:              this.menuIgnore = ((System.Windows.Controls.MenuItem)(target));                            #line 13 "..\..\..\UI\HistoryGraph.xaml"              this.menuIgnore.Click += new System.Windows.RoutedEventHandler(this.menuEditGitIgnore_Click);                            #line default              #line hidden              return;              case 5:              this.menuStash = ((System.Windows.Controls.MenuItem)(target));                            #line 19 "..\..\..\UI\HistoryGraph.xaml"              this.menuStash.Click += new System.Windows.RoutedEventHandler(this.menuStash_Click);                            #line default              #line hidden              return;              case 6:              this.menuStashPop = ((System.Windows.Controls.MenuItem)(target));                            #line 20 "..\..\..\UI\HistoryGraph.xaml"              this.menuStashPop.Click += new System.Windows.RoutedEventHandler(this.menuStashPop_Click);                            #line default              #line hidden              return;              case 7:              this.menuStashDrop = ((System.Windows.Controls.MenuItem)(target));                            #line 21 "..\..\..\UI\HistoryGraph.xaml"              this.menuStashDrop.Click += new System.Windows.RoutedEventHandler(this.menuStashDrop_Click);                            #line default              #line hidden              return;              case 8:                            #line 24 "..\..\..\UI\HistoryGraph.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.menuRefresh_Click);                            #line default              #line hidden              return;              case 9:                            #line 26 "..\..\..\UI\HistoryGraph.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.menuAbout_Click);                            #line default              #line hidden              return;              case 10:              this.scrollRoot = ((System.Windows.Controls.ScrollViewer)(target));              return;              case 11:              this.zoomAndPanControl = ((ZoomAndPan.ZoomAndPanControl)(target));              return;              case 12:              this.canvasContainer = ((System.Windows.Controls.Canvas)(target));              return;              }
Magic Number,GitScc.UI,HistoryGraph,C:\repos\yysun_git-tools\GitUI\UI\HistoryGraph.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 8 "..\..\..\UI\HistoryGraph.xaml"              ((GitScc.UI.HistoryGraph)(target)).SizeChanged += new System.Windows.SizeChangedEventHandler(this.UserControl_SizeChanged);                            #line default              #line hidden                            #line 8 "..\..\..\UI\HistoryGraph.xaml"              ((GitScc.UI.HistoryGraph)(target)).ContextMenuOpening += new System.Windows.Controls.ContextMenuEventHandler(this.UserControl_ContextMenuOpening);                            #line default              #line hidden              return;              case 2:                            #line 11 "..\..\..\UI\HistoryGraph.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.menuOpen_Click);                            #line default              #line hidden              return;              case 3:              this.menuInit = ((System.Windows.Controls.MenuItem)(target));                            #line 12 "..\..\..\UI\HistoryGraph.xaml"              this.menuInit.Click += new System.Windows.RoutedEventHandler(this.menuInit_Click);                            #line default              #line hidden              return;              case 4:              this.menuIgnore = ((System.Windows.Controls.MenuItem)(target));                            #line 13 "..\..\..\UI\HistoryGraph.xaml"              this.menuIgnore.Click += new System.Windows.RoutedEventHandler(this.menuEditGitIgnore_Click);                            #line default              #line hidden              return;              case 5:              this.menuStash = ((System.Windows.Controls.MenuItem)(target));                            #line 19 "..\..\..\UI\HistoryGraph.xaml"              this.menuStash.Click += new System.Windows.RoutedEventHandler(this.menuStash_Click);                            #line default              #line hidden              return;              case 6:              this.menuStashPop = ((System.Windows.Controls.MenuItem)(target));                            #line 20 "..\..\..\UI\HistoryGraph.xaml"              this.menuStashPop.Click += new System.Windows.RoutedEventHandler(this.menuStashPop_Click);                            #line default              #line hidden              return;              case 7:              this.menuStashDrop = ((System.Windows.Controls.MenuItem)(target));                            #line 21 "..\..\..\UI\HistoryGraph.xaml"              this.menuStashDrop.Click += new System.Windows.RoutedEventHandler(this.menuStashDrop_Click);                            #line default              #line hidden              return;              case 8:                            #line 24 "..\..\..\UI\HistoryGraph.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.menuRefresh_Click);                            #line default              #line hidden              return;              case 9:                            #line 26 "..\..\..\UI\HistoryGraph.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.menuAbout_Click);                            #line default              #line hidden              return;              case 10:              this.scrollRoot = ((System.Windows.Controls.ScrollViewer)(target));              return;              case 11:              this.zoomAndPanControl = ((ZoomAndPan.ZoomAndPanControl)(target));              return;              case 12:              this.canvasContainer = ((System.Windows.Controls.Canvas)(target));              return;              }
Magic Number,GitScc.UI,HistoryGraph,C:\repos\yysun_git-tools\GitUI\UI\HistoryGraph.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 8 "..\..\..\UI\HistoryGraph.xaml"              ((GitScc.UI.HistoryGraph)(target)).SizeChanged += new System.Windows.SizeChangedEventHandler(this.UserControl_SizeChanged);                            #line default              #line hidden                            #line 8 "..\..\..\UI\HistoryGraph.xaml"              ((GitScc.UI.HistoryGraph)(target)).ContextMenuOpening += new System.Windows.Controls.ContextMenuEventHandler(this.UserControl_ContextMenuOpening);                            #line default              #line hidden              return;              case 2:                            #line 11 "..\..\..\UI\HistoryGraph.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.menuOpen_Click);                            #line default              #line hidden              return;              case 3:              this.menuInit = ((System.Windows.Controls.MenuItem)(target));                            #line 12 "..\..\..\UI\HistoryGraph.xaml"              this.menuInit.Click += new System.Windows.RoutedEventHandler(this.menuInit_Click);                            #line default              #line hidden              return;              case 4:              this.menuIgnore = ((System.Windows.Controls.MenuItem)(target));                            #line 13 "..\..\..\UI\HistoryGraph.xaml"              this.menuIgnore.Click += new System.Windows.RoutedEventHandler(this.menuEditGitIgnore_Click);                            #line default              #line hidden              return;              case 5:              this.menuStash = ((System.Windows.Controls.MenuItem)(target));                            #line 19 "..\..\..\UI\HistoryGraph.xaml"              this.menuStash.Click += new System.Windows.RoutedEventHandler(this.menuStash_Click);                            #line default              #line hidden              return;              case 6:              this.menuStashPop = ((System.Windows.Controls.MenuItem)(target));                            #line 20 "..\..\..\UI\HistoryGraph.xaml"              this.menuStashPop.Click += new System.Windows.RoutedEventHandler(this.menuStashPop_Click);                            #line default              #line hidden              return;              case 7:              this.menuStashDrop = ((System.Windows.Controls.MenuItem)(target));                            #line 21 "..\..\..\UI\HistoryGraph.xaml"              this.menuStashDrop.Click += new System.Windows.RoutedEventHandler(this.menuStashDrop_Click);                            #line default              #line hidden              return;              case 8:                            #line 24 "..\..\..\UI\HistoryGraph.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.menuRefresh_Click);                            #line default              #line hidden              return;              case 9:                            #line 26 "..\..\..\UI\HistoryGraph.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.menuAbout_Click);                            #line default              #line hidden              return;              case 10:              this.scrollRoot = ((System.Windows.Controls.ScrollViewer)(target));              return;              case 11:              this.zoomAndPanControl = ((ZoomAndPan.ZoomAndPanControl)(target));              return;              case 12:              this.canvasContainer = ((System.Windows.Controls.Canvas)(target));              return;              }
Magic Number,GitScc.UI,HistoryGraph,C:\repos\yysun_git-tools\GitUI\UI\HistoryGraph.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 8 "..\..\..\UI\HistoryGraph.xaml"              ((GitScc.UI.HistoryGraph)(target)).SizeChanged += new System.Windows.SizeChangedEventHandler(this.UserControl_SizeChanged);                            #line default              #line hidden                            #line 8 "..\..\..\UI\HistoryGraph.xaml"              ((GitScc.UI.HistoryGraph)(target)).ContextMenuOpening += new System.Windows.Controls.ContextMenuEventHandler(this.UserControl_ContextMenuOpening);                            #line default              #line hidden              return;              case 2:                            #line 11 "..\..\..\UI\HistoryGraph.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.menuOpen_Click);                            #line default              #line hidden              return;              case 3:              this.menuInit = ((System.Windows.Controls.MenuItem)(target));                            #line 12 "..\..\..\UI\HistoryGraph.xaml"              this.menuInit.Click += new System.Windows.RoutedEventHandler(this.menuInit_Click);                            #line default              #line hidden              return;              case 4:              this.menuIgnore = ((System.Windows.Controls.MenuItem)(target));                            #line 13 "..\..\..\UI\HistoryGraph.xaml"              this.menuIgnore.Click += new System.Windows.RoutedEventHandler(this.menuEditGitIgnore_Click);                            #line default              #line hidden              return;              case 5:              this.menuStash = ((System.Windows.Controls.MenuItem)(target));                            #line 19 "..\..\..\UI\HistoryGraph.xaml"              this.menuStash.Click += new System.Windows.RoutedEventHandler(this.menuStash_Click);                            #line default              #line hidden              return;              case 6:              this.menuStashPop = ((System.Windows.Controls.MenuItem)(target));                            #line 20 "..\..\..\UI\HistoryGraph.xaml"              this.menuStashPop.Click += new System.Windows.RoutedEventHandler(this.menuStashPop_Click);                            #line default              #line hidden              return;              case 7:              this.menuStashDrop = ((System.Windows.Controls.MenuItem)(target));                            #line 21 "..\..\..\UI\HistoryGraph.xaml"              this.menuStashDrop.Click += new System.Windows.RoutedEventHandler(this.menuStashDrop_Click);                            #line default              #line hidden              return;              case 8:                            #line 24 "..\..\..\UI\HistoryGraph.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.menuRefresh_Click);                            #line default              #line hidden              return;              case 9:                            #line 26 "..\..\..\UI\HistoryGraph.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.menuAbout_Click);                            #line default              #line hidden              return;              case 10:              this.scrollRoot = ((System.Windows.Controls.ScrollViewer)(target));              return;              case 11:              this.zoomAndPanControl = ((ZoomAndPan.ZoomAndPanControl)(target));              return;              case 12:              this.canvasContainer = ((System.Windows.Controls.Canvas)(target));              return;              }
Magic Number,GitScc.UI,HistoryGraph,C:\repos\yysun_git-tools\GitUI\UI\HistoryGraph.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 8 "..\..\..\UI\HistoryGraph.xaml"              ((GitScc.UI.HistoryGraph)(target)).SizeChanged += new System.Windows.SizeChangedEventHandler(this.UserControl_SizeChanged);                            #line default              #line hidden                            #line 8 "..\..\..\UI\HistoryGraph.xaml"              ((GitScc.UI.HistoryGraph)(target)).ContextMenuOpening += new System.Windows.Controls.ContextMenuEventHandler(this.UserControl_ContextMenuOpening);                            #line default              #line hidden              return;              case 2:                            #line 11 "..\..\..\UI\HistoryGraph.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.menuOpen_Click);                            #line default              #line hidden              return;              case 3:              this.menuInit = ((System.Windows.Controls.MenuItem)(target));                            #line 12 "..\..\..\UI\HistoryGraph.xaml"              this.menuInit.Click += new System.Windows.RoutedEventHandler(this.menuInit_Click);                            #line default              #line hidden              return;              case 4:              this.menuIgnore = ((System.Windows.Controls.MenuItem)(target));                            #line 13 "..\..\..\UI\HistoryGraph.xaml"              this.menuIgnore.Click += new System.Windows.RoutedEventHandler(this.menuEditGitIgnore_Click);                            #line default              #line hidden              return;              case 5:              this.menuStash = ((System.Windows.Controls.MenuItem)(target));                            #line 19 "..\..\..\UI\HistoryGraph.xaml"              this.menuStash.Click += new System.Windows.RoutedEventHandler(this.menuStash_Click);                            #line default              #line hidden              return;              case 6:              this.menuStashPop = ((System.Windows.Controls.MenuItem)(target));                            #line 20 "..\..\..\UI\HistoryGraph.xaml"              this.menuStashPop.Click += new System.Windows.RoutedEventHandler(this.menuStashPop_Click);                            #line default              #line hidden              return;              case 7:              this.menuStashDrop = ((System.Windows.Controls.MenuItem)(target));                            #line 21 "..\..\..\UI\HistoryGraph.xaml"              this.menuStashDrop.Click += new System.Windows.RoutedEventHandler(this.menuStashDrop_Click);                            #line default              #line hidden              return;              case 8:                            #line 24 "..\..\..\UI\HistoryGraph.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.menuRefresh_Click);                            #line default              #line hidden              return;              case 9:                            #line 26 "..\..\..\UI\HistoryGraph.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.menuAbout_Click);                            #line default              #line hidden              return;              case 10:              this.scrollRoot = ((System.Windows.Controls.ScrollViewer)(target));              return;              case 11:              this.zoomAndPanControl = ((ZoomAndPan.ZoomAndPanControl)(target));              return;              case 12:              this.canvasContainer = ((System.Windows.Controls.Canvas)(target));              return;              }
Magic Number,GitScc.UI,HistoryGraph,C:\repos\yysun_git-tools\GitUI\UI\HistoryGraph.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 8 "..\..\..\UI\HistoryGraph.xaml"              ((GitScc.UI.HistoryGraph)(target)).SizeChanged += new System.Windows.SizeChangedEventHandler(this.UserControl_SizeChanged);                            #line default              #line hidden                            #line 8 "..\..\..\UI\HistoryGraph.xaml"              ((GitScc.UI.HistoryGraph)(target)).ContextMenuOpening += new System.Windows.Controls.ContextMenuEventHandler(this.UserControl_ContextMenuOpening);                            #line default              #line hidden              return;              case 2:                            #line 11 "..\..\..\UI\HistoryGraph.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.menuOpen_Click);                            #line default              #line hidden              return;              case 3:              this.menuInit = ((System.Windows.Controls.MenuItem)(target));                            #line 12 "..\..\..\UI\HistoryGraph.xaml"              this.menuInit.Click += new System.Windows.RoutedEventHandler(this.menuInit_Click);                            #line default              #line hidden              return;              case 4:              this.menuIgnore = ((System.Windows.Controls.MenuItem)(target));                            #line 13 "..\..\..\UI\HistoryGraph.xaml"              this.menuIgnore.Click += new System.Windows.RoutedEventHandler(this.menuEditGitIgnore_Click);                            #line default              #line hidden              return;              case 5:              this.menuStash = ((System.Windows.Controls.MenuItem)(target));                            #line 19 "..\..\..\UI\HistoryGraph.xaml"              this.menuStash.Click += new System.Windows.RoutedEventHandler(this.menuStash_Click);                            #line default              #line hidden              return;              case 6:              this.menuStashPop = ((System.Windows.Controls.MenuItem)(target));                            #line 20 "..\..\..\UI\HistoryGraph.xaml"              this.menuStashPop.Click += new System.Windows.RoutedEventHandler(this.menuStashPop_Click);                            #line default              #line hidden              return;              case 7:              this.menuStashDrop = ((System.Windows.Controls.MenuItem)(target));                            #line 21 "..\..\..\UI\HistoryGraph.xaml"              this.menuStashDrop.Click += new System.Windows.RoutedEventHandler(this.menuStashDrop_Click);                            #line default              #line hidden              return;              case 8:                            #line 24 "..\..\..\UI\HistoryGraph.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.menuRefresh_Click);                            #line default              #line hidden              return;              case 9:                            #line 26 "..\..\..\UI\HistoryGraph.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.menuAbout_Click);                            #line default              #line hidden              return;              case 10:              this.scrollRoot = ((System.Windows.Controls.ScrollViewer)(target));              return;              case 11:              this.zoomAndPanControl = ((ZoomAndPan.ZoomAndPanControl)(target));              return;              case 12:              this.canvasContainer = ((System.Windows.Controls.Canvas)(target));              return;              }
Magic Number,GitScc.UI,HistoryGraph,C:\repos\yysun_git-tools\GitUI\UI\HistoryGraph.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 8 "..\..\..\UI\HistoryGraph.xaml"              ((GitScc.UI.HistoryGraph)(target)).SizeChanged += new System.Windows.SizeChangedEventHandler(this.UserControl_SizeChanged);                            #line default              #line hidden                            #line 8 "..\..\..\UI\HistoryGraph.xaml"              ((GitScc.UI.HistoryGraph)(target)).ContextMenuOpening += new System.Windows.Controls.ContextMenuEventHandler(this.UserControl_ContextMenuOpening);                            #line default              #line hidden              return;              case 2:                            #line 11 "..\..\..\UI\HistoryGraph.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.menuOpen_Click);                            #line default              #line hidden              return;              case 3:              this.menuInit = ((System.Windows.Controls.MenuItem)(target));                            #line 12 "..\..\..\UI\HistoryGraph.xaml"              this.menuInit.Click += new System.Windows.RoutedEventHandler(this.menuInit_Click);                            #line default              #line hidden              return;              case 4:              this.menuIgnore = ((System.Windows.Controls.MenuItem)(target));                            #line 13 "..\..\..\UI\HistoryGraph.xaml"              this.menuIgnore.Click += new System.Windows.RoutedEventHandler(this.menuEditGitIgnore_Click);                            #line default              #line hidden              return;              case 5:              this.menuStash = ((System.Windows.Controls.MenuItem)(target));                            #line 19 "..\..\..\UI\HistoryGraph.xaml"              this.menuStash.Click += new System.Windows.RoutedEventHandler(this.menuStash_Click);                            #line default              #line hidden              return;              case 6:              this.menuStashPop = ((System.Windows.Controls.MenuItem)(target));                            #line 20 "..\..\..\UI\HistoryGraph.xaml"              this.menuStashPop.Click += new System.Windows.RoutedEventHandler(this.menuStashPop_Click);                            #line default              #line hidden              return;              case 7:              this.menuStashDrop = ((System.Windows.Controls.MenuItem)(target));                            #line 21 "..\..\..\UI\HistoryGraph.xaml"              this.menuStashDrop.Click += new System.Windows.RoutedEventHandler(this.menuStashDrop_Click);                            #line default              #line hidden              return;              case 8:                            #line 24 "..\..\..\UI\HistoryGraph.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.menuRefresh_Click);                            #line default              #line hidden              return;              case 9:                            #line 26 "..\..\..\UI\HistoryGraph.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.menuAbout_Click);                            #line default              #line hidden              return;              case 10:              this.scrollRoot = ((System.Windows.Controls.ScrollViewer)(target));              return;              case 11:              this.zoomAndPanControl = ((ZoomAndPan.ZoomAndPanControl)(target));              return;              case 12:              this.canvasContainer = ((System.Windows.Controls.Canvas)(target));              return;              }
Magic Number,GitScc.UI,HistoryGraph,C:\repos\yysun_git-tools\GitUI\UI\HistoryGraph.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 8 "..\..\..\UI\HistoryGraph.xaml"              ((GitScc.UI.HistoryGraph)(target)).SizeChanged += new System.Windows.SizeChangedEventHandler(this.UserControl_SizeChanged);                            #line default              #line hidden                            #line 8 "..\..\..\UI\HistoryGraph.xaml"              ((GitScc.UI.HistoryGraph)(target)).ContextMenuOpening += new System.Windows.Controls.ContextMenuEventHandler(this.UserControl_ContextMenuOpening);                            #line default              #line hidden              return;              case 2:                            #line 11 "..\..\..\UI\HistoryGraph.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.menuOpen_Click);                            #line default              #line hidden              return;              case 3:              this.menuInit = ((System.Windows.Controls.MenuItem)(target));                            #line 12 "..\..\..\UI\HistoryGraph.xaml"              this.menuInit.Click += new System.Windows.RoutedEventHandler(this.menuInit_Click);                            #line default              #line hidden              return;              case 4:              this.menuIgnore = ((System.Windows.Controls.MenuItem)(target));                            #line 13 "..\..\..\UI\HistoryGraph.xaml"              this.menuIgnore.Click += new System.Windows.RoutedEventHandler(this.menuEditGitIgnore_Click);                            #line default              #line hidden              return;              case 5:              this.menuStash = ((System.Windows.Controls.MenuItem)(target));                            #line 19 "..\..\..\UI\HistoryGraph.xaml"              this.menuStash.Click += new System.Windows.RoutedEventHandler(this.menuStash_Click);                            #line default              #line hidden              return;              case 6:              this.menuStashPop = ((System.Windows.Controls.MenuItem)(target));                            #line 20 "..\..\..\UI\HistoryGraph.xaml"              this.menuStashPop.Click += new System.Windows.RoutedEventHandler(this.menuStashPop_Click);                            #line default              #line hidden              return;              case 7:              this.menuStashDrop = ((System.Windows.Controls.MenuItem)(target));                            #line 21 "..\..\..\UI\HistoryGraph.xaml"              this.menuStashDrop.Click += new System.Windows.RoutedEventHandler(this.menuStashDrop_Click);                            #line default              #line hidden              return;              case 8:                            #line 24 "..\..\..\UI\HistoryGraph.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.menuRefresh_Click);                            #line default              #line hidden              return;              case 9:                            #line 26 "..\..\..\UI\HistoryGraph.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.menuAbout_Click);                            #line default              #line hidden              return;              case 10:              this.scrollRoot = ((System.Windows.Controls.ScrollViewer)(target));              return;              case 11:              this.zoomAndPanControl = ((ZoomAndPan.ZoomAndPanControl)(target));              return;              case 12:              this.canvasContainer = ((System.Windows.Controls.Canvas)(target));              return;              }
Magic Number,GitScc.UI,HistoryGraph,C:\repos\yysun_git-tools\GitUI\UI\HistoryGraph.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 8 "..\..\..\UI\HistoryGraph.xaml"              ((GitScc.UI.HistoryGraph)(target)).SizeChanged += new System.Windows.SizeChangedEventHandler(this.UserControl_SizeChanged);                            #line default              #line hidden                            #line 8 "..\..\..\UI\HistoryGraph.xaml"              ((GitScc.UI.HistoryGraph)(target)).ContextMenuOpening += new System.Windows.Controls.ContextMenuEventHandler(this.UserControl_ContextMenuOpening);                            #line default              #line hidden              return;              case 2:                            #line 11 "..\..\..\UI\HistoryGraph.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.menuOpen_Click);                            #line default              #line hidden              return;              case 3:              this.menuInit = ((System.Windows.Controls.MenuItem)(target));                            #line 12 "..\..\..\UI\HistoryGraph.xaml"              this.menuInit.Click += new System.Windows.RoutedEventHandler(this.menuInit_Click);                            #line default              #line hidden              return;              case 4:              this.menuIgnore = ((System.Windows.Controls.MenuItem)(target));                            #line 13 "..\..\..\UI\HistoryGraph.xaml"              this.menuIgnore.Click += new System.Windows.RoutedEventHandler(this.menuEditGitIgnore_Click);                            #line default              #line hidden              return;              case 5:              this.menuStash = ((System.Windows.Controls.MenuItem)(target));                            #line 19 "..\..\..\UI\HistoryGraph.xaml"              this.menuStash.Click += new System.Windows.RoutedEventHandler(this.menuStash_Click);                            #line default              #line hidden              return;              case 6:              this.menuStashPop = ((System.Windows.Controls.MenuItem)(target));                            #line 20 "..\..\..\UI\HistoryGraph.xaml"              this.menuStashPop.Click += new System.Windows.RoutedEventHandler(this.menuStashPop_Click);                            #line default              #line hidden              return;              case 7:              this.menuStashDrop = ((System.Windows.Controls.MenuItem)(target));                            #line 21 "..\..\..\UI\HistoryGraph.xaml"              this.menuStashDrop.Click += new System.Windows.RoutedEventHandler(this.menuStashDrop_Click);                            #line default              #line hidden              return;              case 8:                            #line 24 "..\..\..\UI\HistoryGraph.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.menuRefresh_Click);                            #line default              #line hidden              return;              case 9:                            #line 26 "..\..\..\UI\HistoryGraph.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.menuAbout_Click);                            #line default              #line hidden              return;              case 10:              this.scrollRoot = ((System.Windows.Controls.ScrollViewer)(target));              return;              case 11:              this.zoomAndPanControl = ((ZoomAndPan.ZoomAndPanControl)(target));              return;              case 12:              this.canvasContainer = ((System.Windows.Controls.Canvas)(target));              return;              }
Magic Number,GitScc.UI,HistoryGraph,C:\repos\yysun_git-tools\GitUI\UI\HistoryGraph.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 8 "..\..\..\UI\HistoryGraph.xaml"              ((GitScc.UI.HistoryGraph)(target)).SizeChanged += new System.Windows.SizeChangedEventHandler(this.UserControl_SizeChanged);                            #line default              #line hidden                            #line 8 "..\..\..\UI\HistoryGraph.xaml"              ((GitScc.UI.HistoryGraph)(target)).ContextMenuOpening += new System.Windows.Controls.ContextMenuEventHandler(this.UserControl_ContextMenuOpening);                            #line default              #line hidden              return;              case 2:                            #line 11 "..\..\..\UI\HistoryGraph.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.menuOpen_Click);                            #line default              #line hidden              return;              case 3:              this.menuInit = ((System.Windows.Controls.MenuItem)(target));                            #line 12 "..\..\..\UI\HistoryGraph.xaml"              this.menuInit.Click += new System.Windows.RoutedEventHandler(this.menuInit_Click);                            #line default              #line hidden              return;              case 4:              this.menuIgnore = ((System.Windows.Controls.MenuItem)(target));                            #line 13 "..\..\..\UI\HistoryGraph.xaml"              this.menuIgnore.Click += new System.Windows.RoutedEventHandler(this.menuEditGitIgnore_Click);                            #line default              #line hidden              return;              case 5:              this.menuStash = ((System.Windows.Controls.MenuItem)(target));                            #line 19 "..\..\..\UI\HistoryGraph.xaml"              this.menuStash.Click += new System.Windows.RoutedEventHandler(this.menuStash_Click);                            #line default              #line hidden              return;              case 6:              this.menuStashPop = ((System.Windows.Controls.MenuItem)(target));                            #line 20 "..\..\..\UI\HistoryGraph.xaml"              this.menuStashPop.Click += new System.Windows.RoutedEventHandler(this.menuStashPop_Click);                            #line default              #line hidden              return;              case 7:              this.menuStashDrop = ((System.Windows.Controls.MenuItem)(target));                            #line 21 "..\..\..\UI\HistoryGraph.xaml"              this.menuStashDrop.Click += new System.Windows.RoutedEventHandler(this.menuStashDrop_Click);                            #line default              #line hidden              return;              case 8:                            #line 24 "..\..\..\UI\HistoryGraph.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.menuRefresh_Click);                            #line default              #line hidden              return;              case 9:                            #line 26 "..\..\..\UI\HistoryGraph.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.menuAbout_Click);                            #line default              #line hidden              return;              case 10:              this.scrollRoot = ((System.Windows.Controls.ScrollViewer)(target));              return;              case 11:              this.zoomAndPanControl = ((ZoomAndPan.ZoomAndPanControl)(target));              return;              case 12:              this.canvasContainer = ((System.Windows.Controls.Canvas)(target));              return;              }
Magic Number,GitScc.UI,HistoryGraph,C:\repos\yysun_git-tools\GitUI\UI\HistoryGraph.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 8 "..\..\..\UI\HistoryGraph.xaml"              ((GitScc.UI.HistoryGraph)(target)).SizeChanged += new System.Windows.SizeChangedEventHandler(this.UserControl_SizeChanged);                            #line default              #line hidden                            #line 8 "..\..\..\UI\HistoryGraph.xaml"              ((GitScc.UI.HistoryGraph)(target)).ContextMenuOpening += new System.Windows.Controls.ContextMenuEventHandler(this.UserControl_ContextMenuOpening);                            #line default              #line hidden              return;              case 2:                            #line 11 "..\..\..\UI\HistoryGraph.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.menuOpen_Click);                            #line default              #line hidden              return;              case 3:              this.menuInit = ((System.Windows.Controls.MenuItem)(target));                            #line 12 "..\..\..\UI\HistoryGraph.xaml"              this.menuInit.Click += new System.Windows.RoutedEventHandler(this.menuInit_Click);                            #line default              #line hidden              return;              case 4:              this.menuIgnore = ((System.Windows.Controls.MenuItem)(target));                            #line 13 "..\..\..\UI\HistoryGraph.xaml"              this.menuIgnore.Click += new System.Windows.RoutedEventHandler(this.menuEditGitIgnore_Click);                            #line default              #line hidden              return;              case 5:              this.menuStash = ((System.Windows.Controls.MenuItem)(target));                            #line 19 "..\..\..\UI\HistoryGraph.xaml"              this.menuStash.Click += new System.Windows.RoutedEventHandler(this.menuStash_Click);                            #line default              #line hidden              return;              case 6:              this.menuStashPop = ((System.Windows.Controls.MenuItem)(target));                            #line 20 "..\..\..\UI\HistoryGraph.xaml"              this.menuStashPop.Click += new System.Windows.RoutedEventHandler(this.menuStashPop_Click);                            #line default              #line hidden              return;              case 7:              this.menuStashDrop = ((System.Windows.Controls.MenuItem)(target));                            #line 21 "..\..\..\UI\HistoryGraph.xaml"              this.menuStashDrop.Click += new System.Windows.RoutedEventHandler(this.menuStashDrop_Click);                            #line default              #line hidden              return;              case 8:                            #line 24 "..\..\..\UI\HistoryGraph.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.menuRefresh_Click);                            #line default              #line hidden              return;              case 9:                            #line 26 "..\..\..\UI\HistoryGraph.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.menuAbout_Click);                            #line default              #line hidden              return;              case 10:              this.scrollRoot = ((System.Windows.Controls.ScrollViewer)(target));              return;              case 11:              this.zoomAndPanControl = ((ZoomAndPan.ZoomAndPanControl)(target));              return;              case 12:              this.canvasContainer = ((System.Windows.Controls.Canvas)(target));              return;              }
Magic Number,GitScc.UI,Loading,C:\repos\yysun_git-tools\GitUI\UI\Loading.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.spin = ((System.Windows.Media.RotateTransform)(target));              return;              case 2:              this.text1 = ((System.Windows.Controls.TextBlock)(target));              return;              }
Magic Number,ZoomAndPan,ZoomAndPanControl,C:\repos\yysun_git-tools\GitUI\ZoomAndPan\ZoomAndPanControl.cs,AnimatedZoomTo,The following statement contains a magic number: AnimatedZoomPointToViewportCenter(newScale' new Point(contentRect.X + (contentRect.Width / 2)' contentRect.Y + (contentRect.Height / 2))'                  delegate(object sender' EventArgs e)                  {                      //                      // At the end of the animation' ensure that we are snapped to the specified content offset.                      // Due to zooming in on the content focus point and rounding errors' the content offset may                      // be slightly off what we want at the end of the animation and this bit of code corrects it.                      //                      this.ContentOffsetX = contentRect.X;                      this.ContentOffsetY = contentRect.Y;                  });
Magic Number,ZoomAndPan,ZoomAndPanControl,C:\repos\yysun_git-tools\GitUI\ZoomAndPan\ZoomAndPanControl.cs,AnimatedZoomTo,The following statement contains a magic number: AnimatedZoomPointToViewportCenter(newScale' new Point(contentRect.X + (contentRect.Width / 2)' contentRect.Y + (contentRect.Height / 2))'                  delegate(object sender' EventArgs e)                  {                      //                      // At the end of the animation' ensure that we are snapped to the specified content offset.                      // Due to zooming in on the content focus point and rounding errors' the content offset may                      // be slightly off what we want at the end of the animation and this bit of code corrects it.                      //                      this.ContentOffsetX = contentRect.X;                      this.ContentOffsetY = contentRect.Y;                  });
Magic Number,ZoomAndPan,ZoomAndPanControl,C:\repos\yysun_git-tools\GitUI\ZoomAndPan\ZoomAndPanControl.cs,AnimatedZoomTo,The following statement contains a magic number: AnimatedZoomPointToViewportCenter(newScale' new Point(contentRect.X + (contentRect.Width / 2)' contentRect.Y + (contentRect.Height / 2))' null);
Magic Number,ZoomAndPan,ZoomAndPanControl,C:\repos\yysun_git-tools\GitUI\ZoomAndPan\ZoomAndPanControl.cs,AnimatedZoomTo,The following statement contains a magic number: AnimatedZoomPointToViewportCenter(newScale' new Point(contentRect.X + (contentRect.Width / 2)' contentRect.Y + (contentRect.Height / 2))' null);
Magic Number,ZoomAndPan,ZoomAndPanControl,C:\repos\yysun_git-tools\GitUI\ZoomAndPan\ZoomAndPanControl.cs,ZoomTo,The following statement contains a magic number: ZoomPointToViewportCenter(newScale' new Point(contentRect.X + (contentRect.Width / 2)' contentRect.Y + (contentRect.Height / 2)));
Magic Number,ZoomAndPan,ZoomAndPanControl,C:\repos\yysun_git-tools\GitUI\ZoomAndPan\ZoomAndPanControl.cs,ZoomTo,The following statement contains a magic number: ZoomPointToViewportCenter(newScale' new Point(contentRect.X + (contentRect.Width / 2)' contentRect.Y + (contentRect.Height / 2)));
Magic Number,ZoomAndPan,ZoomAndPanControl,C:\repos\yysun_git-tools\GitUI\ZoomAndPan\ZoomAndPanControl.cs,SnapTo,The following statement contains a magic number: this.ContentOffsetX = contentPoint.X - (this.ContentViewportWidth / 2);
Magic Number,ZoomAndPan,ZoomAndPanControl,C:\repos\yysun_git-tools\GitUI\ZoomAndPan\ZoomAndPanControl.cs,SnapTo,The following statement contains a magic number: this.ContentOffsetY = contentPoint.Y - (this.ContentViewportHeight / 2);
Magic Number,ZoomAndPan,ZoomAndPanControl,C:\repos\yysun_git-tools\GitUI\ZoomAndPan\ZoomAndPanControl.cs,AnimatedSnapTo,The following statement contains a magic number: double newX = contentPoint.X - (this.ContentViewportWidth / 2);
Magic Number,ZoomAndPan,ZoomAndPanControl,C:\repos\yysun_git-tools\GitUI\ZoomAndPan\ZoomAndPanControl.cs,AnimatedSnapTo,The following statement contains a magic number: double newY = contentPoint.Y - (this.ContentViewportHeight / 2);
Magic Number,ZoomAndPan,ZoomAndPanControl,C:\repos\yysun_git-tools\GitUI\ZoomAndPan\ZoomAndPanControl.cs,AnimatedZoomTo,The following statement contains a magic number: Point zoomCenter = new Point(ContentOffsetX + (ContentViewportWidth / 2)' ContentOffsetY + (ContentViewportHeight / 2));
Magic Number,ZoomAndPan,ZoomAndPanControl,C:\repos\yysun_git-tools\GitUI\ZoomAndPan\ZoomAndPanControl.cs,AnimatedZoomTo,The following statement contains a magic number: Point zoomCenter = new Point(ContentOffsetX + (ContentViewportWidth / 2)' ContentOffsetY + (ContentViewportHeight / 2));
Magic Number,ZoomAndPan,ZoomAndPanControl,C:\repos\yysun_git-tools\GitUI\ZoomAndPan\ZoomAndPanControl.cs,ZoomTo,The following statement contains a magic number: Point zoomCenter = new Point(ContentOffsetX + (ContentViewportWidth / 2)' ContentOffsetY + (ContentViewportHeight / 2));
Magic Number,ZoomAndPan,ZoomAndPanControl,C:\repos\yysun_git-tools\GitUI\ZoomAndPan\ZoomAndPanControl.cs,ZoomTo,The following statement contains a magic number: Point zoomCenter = new Point(ContentOffsetX + (ContentViewportWidth / 2)' ContentOffsetY + (ContentViewportHeight / 2));
Magic Number,ZoomAndPan,ZoomAndPanControl,C:\repos\yysun_git-tools\GitUI\ZoomAndPan\ZoomAndPanControl.cs,AnimatedZoomPointToViewportCenter,The following statement contains a magic number: AnimationHelper.StartAnimation(this' ViewportZoomFocusXProperty' ViewportWidth / 2' AnimationDuration);
Magic Number,ZoomAndPan,ZoomAndPanControl,C:\repos\yysun_git-tools\GitUI\ZoomAndPan\ZoomAndPanControl.cs,AnimatedZoomPointToViewportCenter,The following statement contains a magic number: AnimationHelper.StartAnimation(this' ViewportZoomFocusYProperty' ViewportHeight / 2' AnimationDuration);
Magic Number,ZoomAndPan,ZoomAndPanControl,C:\repos\yysun_git-tools\GitUI\ZoomAndPan\ZoomAndPanControl.cs,ZoomPointToViewportCenter,The following statement contains a magic number: this.ContentOffsetX = contentZoomFocus.X - (ContentViewportWidth / 2);
Magic Number,ZoomAndPan,ZoomAndPanControl,C:\repos\yysun_git-tools\GitUI\ZoomAndPan\ZoomAndPanControl.cs,ZoomPointToViewportCenter,The following statement contains a magic number: this.ContentOffsetY = contentZoomFocus.Y - (ContentViewportHeight / 2);
Magic Number,ZoomAndPan,ZoomAndPanControl,C:\repos\yysun_git-tools\GitUI\ZoomAndPan\ZoomAndPanControl.cs,ContentScale_PropertyChanged,The following statement contains a magic number: if (c.enableContentOffsetUpdateFromScale)              {                  try                  {                      //                       // Disable content focus syncronization.  We are about to update content offset whilst zooming                      // to ensure that the viewport is focused on our desired content focus point.  Setting this                      // to 'true' stops the automatic update of the content focus when content offset changes.                      //                      c.disableContentFocusSync = true;                        //                      // Whilst zooming in or out keep the content offset up-to-date so that the viewport is always                      // focused on the content focus point (and also so that the content focus is locked to the                       // viewport focus point - this is how the google maps style zooming works).                      //                      double viewportOffsetX = c.ViewportZoomFocusX - (c.ViewportWidth / 2);                      double viewportOffsetY = c.ViewportZoomFocusY - (c.ViewportHeight / 2);                      double contentOffsetX = viewportOffsetX / c.ContentScale;                      double contentOffsetY = viewportOffsetY / c.ContentScale;                      c.ContentOffsetX = (c.ContentZoomFocusX - (c.ContentViewportWidth / 2)) - contentOffsetX;                      c.ContentOffsetY = (c.ContentZoomFocusY - (c.ContentViewportHeight / 2)) - contentOffsetY;                  }                  finally                  {                      c.disableContentFocusSync = false;                  }              }
Magic Number,ZoomAndPan,ZoomAndPanControl,C:\repos\yysun_git-tools\GitUI\ZoomAndPan\ZoomAndPanControl.cs,ContentScale_PropertyChanged,The following statement contains a magic number: if (c.enableContentOffsetUpdateFromScale)              {                  try                  {                      //                       // Disable content focus syncronization.  We are about to update content offset whilst zooming                      // to ensure that the viewport is focused on our desired content focus point.  Setting this                      // to 'true' stops the automatic update of the content focus when content offset changes.                      //                      c.disableContentFocusSync = true;                        //                      // Whilst zooming in or out keep the content offset up-to-date so that the viewport is always                      // focused on the content focus point (and also so that the content focus is locked to the                       // viewport focus point - this is how the google maps style zooming works).                      //                      double viewportOffsetX = c.ViewportZoomFocusX - (c.ViewportWidth / 2);                      double viewportOffsetY = c.ViewportZoomFocusY - (c.ViewportHeight / 2);                      double contentOffsetX = viewportOffsetX / c.ContentScale;                      double contentOffsetY = viewportOffsetY / c.ContentScale;                      c.ContentOffsetX = (c.ContentZoomFocusX - (c.ContentViewportWidth / 2)) - contentOffsetX;                      c.ContentOffsetY = (c.ContentZoomFocusY - (c.ContentViewportHeight / 2)) - contentOffsetY;                  }                  finally                  {                      c.disableContentFocusSync = false;                  }              }
Magic Number,ZoomAndPan,ZoomAndPanControl,C:\repos\yysun_git-tools\GitUI\ZoomAndPan\ZoomAndPanControl.cs,ContentScale_PropertyChanged,The following statement contains a magic number: if (c.enableContentOffsetUpdateFromScale)              {                  try                  {                      //                       // Disable content focus syncronization.  We are about to update content offset whilst zooming                      // to ensure that the viewport is focused on our desired content focus point.  Setting this                      // to 'true' stops the automatic update of the content focus when content offset changes.                      //                      c.disableContentFocusSync = true;                        //                      // Whilst zooming in or out keep the content offset up-to-date so that the viewport is always                      // focused on the content focus point (and also so that the content focus is locked to the                       // viewport focus point - this is how the google maps style zooming works).                      //                      double viewportOffsetX = c.ViewportZoomFocusX - (c.ViewportWidth / 2);                      double viewportOffsetY = c.ViewportZoomFocusY - (c.ViewportHeight / 2);                      double contentOffsetX = viewportOffsetX / c.ContentScale;                      double contentOffsetY = viewportOffsetY / c.ContentScale;                      c.ContentOffsetX = (c.ContentZoomFocusX - (c.ContentViewportWidth / 2)) - contentOffsetX;                      c.ContentOffsetY = (c.ContentZoomFocusY - (c.ContentViewportHeight / 2)) - contentOffsetY;                  }                  finally                  {                      c.disableContentFocusSync = false;                  }              }
Magic Number,ZoomAndPan,ZoomAndPanControl,C:\repos\yysun_git-tools\GitUI\ZoomAndPan\ZoomAndPanControl.cs,ContentScale_PropertyChanged,The following statement contains a magic number: if (c.enableContentOffsetUpdateFromScale)              {                  try                  {                      //                       // Disable content focus syncronization.  We are about to update content offset whilst zooming                      // to ensure that the viewport is focused on our desired content focus point.  Setting this                      // to 'true' stops the automatic update of the content focus when content offset changes.                      //                      c.disableContentFocusSync = true;                        //                      // Whilst zooming in or out keep the content offset up-to-date so that the viewport is always                      // focused on the content focus point (and also so that the content focus is locked to the                       // viewport focus point - this is how the google maps style zooming works).                      //                      double viewportOffsetX = c.ViewportZoomFocusX - (c.ViewportWidth / 2);                      double viewportOffsetY = c.ViewportZoomFocusY - (c.ViewportHeight / 2);                      double contentOffsetX = viewportOffsetX / c.ContentScale;                      double contentOffsetY = viewportOffsetY / c.ContentScale;                      c.ContentOffsetX = (c.ContentZoomFocusX - (c.ContentViewportWidth / 2)) - contentOffsetX;                      c.ContentOffsetY = (c.ContentZoomFocusY - (c.ContentViewportHeight / 2)) - contentOffsetY;                  }                  finally                  {                      c.disableContentFocusSync = false;                  }              }
Magic Number,ZoomAndPan,ZoomAndPanControl,C:\repos\yysun_git-tools\GitUI\ZoomAndPan\ZoomAndPanControl.cs,ContentOffsetY_Coerce,The following statement contains a magic number: maxOffsetY *= 2;
Magic Number,ZoomAndPan,ZoomAndPanControl,C:\repos\yysun_git-tools\GitUI\ZoomAndPan\ZoomAndPanControl.cs,ResetViewportZoomFocus,The following statement contains a magic number: ViewportZoomFocusX = ViewportWidth / 2;
Magic Number,ZoomAndPan,ZoomAndPanControl,C:\repos\yysun_git-tools\GitUI\ZoomAndPan\ZoomAndPanControl.cs,ResetViewportZoomFocus,The following statement contains a magic number: ViewportZoomFocusY = ViewportHeight / 2;
Magic Number,ZoomAndPan,ZoomAndPanControl,C:\repos\yysun_git-tools\GitUI\ZoomAndPan\ZoomAndPanControl.cs,UpdateTranslationX,The following statement contains a magic number: if (this.contentOffsetTransform != null)              {                  double scaledContentWidth = this.unScaledExtent.Width * this.ContentScale;                  if (scaledContentWidth < this.ViewportWidth)                  {                      //                      // When the content can fit entirely within the viewport' center it.                      //                      this.contentOffsetTransform.X = (this.ContentViewportWidth - this.unScaledExtent.Width) / 2;                  }                  else                  {                      this.contentOffsetTransform.X = -this.ContentOffsetX;                  }              }
Magic Number,ZoomAndPan,ZoomAndPanControl,C:\repos\yysun_git-tools\GitUI\ZoomAndPan\ZoomAndPanControl.cs,UpdateTranslationY,The following statement contains a magic number: if (this.contentOffsetTransform != null)              {                  double scaledContentHeight = this.unScaledExtent.Height * this.ContentScale;                  if (scaledContentHeight < this.ViewportHeight)                  {                      //                      // When the content can fit entirely within the viewport' center it.                      //                      this.contentOffsetTransform.Y = (this.ContentViewportHeight - this.unScaledExtent.Height) / 2;                  }                  else                  {                      this.contentOffsetTransform.Y = -this.ContentOffsetY;                  }              }
Magic Number,ZoomAndPan,ZoomAndPanControl,C:\repos\yysun_git-tools\GitUI\ZoomAndPan\ZoomAndPanControl.cs,UpdateContentZoomFocusX,The following statement contains a magic number: ContentZoomFocusX = ContentOffsetX + (constrainedContentViewportWidth / 2);
Magic Number,ZoomAndPan,ZoomAndPanControl,C:\repos\yysun_git-tools\GitUI\ZoomAndPan\ZoomAndPanControl.cs,UpdateContentZoomFocusY,The following statement contains a magic number: ContentZoomFocusY = ContentOffsetY + (constrainedContentViewportHeight / 2);
Magic Number,ZoomAndPan,ZoomAndPanControl,C:\repos\yysun_git-tools\GitUI\ZoomAndPan\ZoomAndPanControl.cs,LineUp,The following statement contains a magic number: ContentOffsetY -= (ContentViewportHeight / 10);
Magic Number,ZoomAndPan,ZoomAndPanControl,C:\repos\yysun_git-tools\GitUI\ZoomAndPan\ZoomAndPanControl.cs,LineDown,The following statement contains a magic number: ContentOffsetY += (ContentViewportHeight / 10);
Magic Number,ZoomAndPan,ZoomAndPanControl,C:\repos\yysun_git-tools\GitUI\ZoomAndPan\ZoomAndPanControl.cs,LineLeft,The following statement contains a magic number: ContentOffsetX -= (ContentViewportWidth / 10);
Magic Number,ZoomAndPan,ZoomAndPanControl,C:\repos\yysun_git-tools\GitUI\ZoomAndPan\ZoomAndPanControl.cs,LineRight,The following statement contains a magic number: ContentOffsetX += (ContentViewportWidth / 10);
Missing Default,Mono.Options,OptionSet,C:\repos\yysun_git-tools\GitUI\Options.cs,Parse,The following switch statement is missing a default case: switch (p.OptionValueType) {  					case OptionValueType.None:  						c.OptionValues.Add (n);  						c.Option.Invoke (c);  						break;  					case OptionValueType.Optional:  					case OptionValueType.Required:   						ParseValue (v' c);  						break;  				}
Missing Default,Mono.Options,OptionSet,C:\repos\yysun_git-tools\GitUI\Options.cs,GetLineEnd,The following switch statement is missing a default case: switch (description [i]) {  					case ' ':  					case '\t':  					case '\v':  					case '-':  					case ''':  					case '.':  					case ';':  						sep = i;  						break;  					case '\n':  						return i;  				}
Missing Default,GitUI.UI,BottomToolBar,C:\repos\yysun_git-tools\GitUI\UI\BottomToolBar.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:              this.btnBack = ((System.Windows.Controls.Button)(target));              return;              case 2:              this.txtDirectory = ((System.Windows.Controls.TextBox)(target));              return;              case 3:              this.btnGo = ((System.Windows.Controls.Button)(target));                            #line 18 "..\..\..\UI\BottomToolBar.xaml"              this.btnGo.Click += new System.Windows.RoutedEventHandler(this.btnGo_Click);                            #line default              #line hidden              return;              }
Missing Default,GitUI.UI,GitConsole,C:\repos\yysun_git-tools\GitUI\UI\GitConsole.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:                            #line 7 "..\..\..\UI\GitConsole.xaml"              ((GitUI.UI.GitConsole)(target)).Loaded += new System.Windows.RoutedEventHandler(this.UserControl_Loaded);                            #line default              #line hidden              return;              case 2:              this.richTextBox1 = ((System.Windows.Controls.RichTextBox)(target));                            #line 10 "..\..\..\UI\GitConsole.xaml"              this.richTextBox1.PreviewKeyDown += new System.Windows.Input.KeyEventHandler(this.richTextBox1_PreviewKeyDown);                            #line default              #line hidden                            #line 11 "..\..\..\UI\GitConsole.xaml"              this.richTextBox1.KeyUp += new System.Windows.Input.KeyEventHandler(this.richTextBox1_KeyUp);                            #line default              #line hidden              return;              case 3:              this.lstOptions = ((System.Windows.Controls.ListBox)(target));                            #line 14 "..\..\..\UI\GitConsole.xaml"              this.lstOptions.PreviewMouseDown += new System.Windows.Input.MouseButtonEventHandler(this.lstOptions_PreviewMouseDown);                            #line default              #line hidden              return;              }
Missing Default,GitUI.UI,MainToolBar,C:\repos\yysun_git-tools\GitUI\UI\MainToolBar.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:                            #line 39 "..\..\..\UI\MainToolBar.xaml"              ((System.Windows.Controls.Grid)(target)).PreviewKeyDown += new System.Windows.Input.KeyEventHandler(this.Grid_PreviewKeyDown);                            #line default              #line hidden              return;              case 2:              this.label1 = ((System.Windows.Controls.Label)(target));              return;              case 3:              this.label2 = ((System.Windows.Controls.Label)(target));              return;              case 4:              this.branchList = ((System.Windows.Controls.ListBox)(target));                            #line 52 "..\..\..\UI\MainToolBar.xaml"              this.branchList.MouseLeftButtonUp += new System.Windows.Input.MouseButtonEventHandler(this.branchList_MouseLeftButtonUp);                            #line default              #line hidden              return;              case 5:              this.tagList = ((System.Windows.Controls.ListBox)(target));                            #line 56 "..\..\..\UI\MainToolBar.xaml"              this.tagList.MouseLeftButtonUp += new System.Windows.Input.MouseButtonEventHandler(this.tagList_MouseLeftButtonUp);                            #line default              #line hidden              return;              case 6:              this.checkBox1 = ((System.Windows.Controls.CheckBox)(target));                            #line 58 "..\..\..\UI\MainToolBar.xaml"              this.checkBox1.Click += new System.Windows.RoutedEventHandler(this.checkBox1_Click);                            #line default              #line hidden              return;              case 7:              this.lableView = ((System.Windows.Controls.Label)(target));              return;              case 8:              this.txtSearch = ((System.Windows.Controls.TextBox)(target));                            #line 65 "..\..\..\UI\MainToolBar.xaml"              this.txtSearch.TextChanged += new System.Windows.Controls.TextChangedEventHandler(this.txtSearch_TextChanged);                            #line default              #line hidden                            #line 65 "..\..\..\UI\MainToolBar.xaml"              this.txtSearch.PreviewKeyDown += new System.Windows.Input.KeyEventHandler(this.txtSearch_PreviewKeyDown);                            #line default              #line hidden                            #line 65 "..\..\..\UI\MainToolBar.xaml"              this.txtSearch.PreviewMouseDown += new System.Windows.Input.MouseButtonEventHandler(this.txtSearch_PreviewMouseDown);                            #line default              #line hidden              return;              case 9:              this.lstSearch = ((System.Windows.Controls.ListBox)(target));                            #line 66 "..\..\..\UI\MainToolBar.xaml"              this.lstSearch.PreviewKeyDown += new System.Windows.Input.KeyEventHandler(this.lstSearch_PreviewKeyDown);                            #line default              #line hidden                            #line 66 "..\..\..\UI\MainToolBar.xaml"              this.lstSearch.MouseDoubleClick += new System.Windows.Input.MouseButtonEventHandler(this.lstSearch_MouseDoubleClick);                            #line default              #line hidden              return;              case 10:              this.btnCompare = ((System.Windows.Controls.Button)(target));                            #line 67 "..\..\..\UI\MainToolBar.xaml"              this.btnCompare.Click += new System.Windows.RoutedEventHandler(this.btnCompare_Click);                            #line default              #line hidden              return;              case 11:              this.txtCommit1 = ((System.Windows.Controls.TextBlock)(target));              return;              case 12:              this.txtCommit2 = ((System.Windows.Controls.TextBlock)(target));              return;              case 13:              this.lblSelectedCommits = ((System.Windows.Controls.Label)(target));              return;              case 14:              this.btnGitBash = ((System.Windows.Controls.Button)(target));                            #line 71 "..\..\..\UI\MainToolBar.xaml"              this.btnGitBash.Click += new System.Windows.RoutedEventHandler(this.btnGitBash_Click);                            #line default              #line hidden              return;              case 15:              this.btnPendingChanges = ((System.Windows.Controls.Button)(target));                            #line 76 "..\..\..\UI\MainToolBar.xaml"              this.btnPendingChanges.Click += new System.Windows.RoutedEventHandler(this.btnPendingChanges_Click);                            #line default              #line hidden              return;              }
Missing Default,GitUI.UI,PendingChanges,C:\repos\yysun_git-tools\GitUI\UI\PendingChanges.xaml.cs,dataGrid1_ContextMenuOpening,The following switch statement is missing a default case: switch (selectedItem.Status)                  {                      case GitFileStatus.Added:                      case GitFileStatus.New:                          //menuCompare.IsEnabled =                           menuUndo.IsEnabled = false;                          break;                        case GitFileStatus.Modified:                      case GitFileStatus.Staged:                          //menuCompare.IsEnabled =                           menuUndo.IsEnabled = true;                          break;                        case GitFileStatus.Removed:                      case GitFileStatus.Deleted:                          //menuCompare.IsEnabled = false;                          menuUndo.IsEnabled = true;                          break;                  }
Missing Default,GitScc.UI,CommitBox,C:\repos\yysun_git-tools\GitUI\UI\CommitBox.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:                            #line 38 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.CheckoutCommit_Click);                            #line default              #line hidden              return;              case 2:                            #line 40 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.NewTag_Click);                            #line default              #line hidden              return;              case 3:                            #line 41 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.NewBranch_Click);                            #line default              #line hidden              return;              case 4:                            #line 43 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.CherryPick_Click);                            #line default              #line hidden              return;              case 5:                            #line 45 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.Export_Click);                            #line default              #line hidden              return;              case 6:                            #line 47 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.CopyId_Click);                            #line default              #line hidden              return;              case 7:              this.root = ((System.Windows.Controls.Grid)(target));                            #line 50 "..\..\..\UI\CommitBox.xaml"              this.root.MouseEnter += new System.Windows.Input.MouseEventHandler(this.root_MouseEnter);                            #line default              #line hidden                            #line 50 "..\..\..\UI\CommitBox.xaml"              this.root.MouseLeave += new System.Windows.Input.MouseEventHandler(this.root_MouseLeave);                            #line default              #line hidden                            #line 50 "..\..\..\UI\CommitBox.xaml"              this.root.MouseLeftButtonUp += new System.Windows.Input.MouseButtonEventHandler(this.root_MouseLeftButtonUp);                            #line default              #line hidden              return;              case 8:              this.VisualStateGroup = ((System.Windows.VisualStateGroup)(target));              return;              case 9:              this.NormalState = ((System.Windows.VisualState)(target));              return;              case 10:              this.MouseOverState = ((System.Windows.VisualState)(target));              return;              case 11:              this.VisualStateGroup1 = ((System.Windows.VisualStateGroup)(target));              return;              case 12:              this.SelectedSate = ((System.Windows.VisualState)(target));              return;              case 13:              this.NotSelectedState = ((System.Windows.VisualState)(target));              return;              case 14:              this.rectangle1 = ((System.Windows.Shapes.Rectangle)(target));              return;              case 15:              this.scrollViewer = ((System.Windows.Controls.ScrollViewer)(target));              return;              case 16:              this.txtComment = ((System.Windows.Controls.TextBlock)(target));              return;              case 17:              this.txtId = ((System.Windows.Controls.TextBlock)(target));              return;              case 18:              this.txtAuthor = ((System.Windows.Controls.TextBlock)(target));              return;              case 19:              this.txtDate = ((System.Windows.Controls.TextBlock)(target));              return;              case 20:                            #line 114 "..\..\..\UI\CommitBox.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.Button_Click);                            #line default              #line hidden              return;              }
Missing Default,GitScc.UI,CommitHead,C:\repos\yysun_git-tools\GitUI\UI\CommitHead.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:                            #line 7 "..\..\..\UI\CommitHead.xaml"              ((GitScc.UI.CommitHead)(target)).Loaded += new System.Windows.RoutedEventHandler(this.UserControl_Loaded);                            #line default              #line hidden              return;              case 2:              this.menuCheckoutBranch = ((System.Windows.Controls.MenuItem)(target));                            #line 10 "..\..\..\UI\CommitHead.xaml"              this.menuCheckoutBranch.Click += new System.Windows.RoutedEventHandler(this.CheckoutBranch_Click);                            #line default              #line hidden              return;              case 3:              this.menuDeleteBranch = ((System.Windows.Controls.MenuItem)(target));                            #line 11 "..\..\..\UI\CommitHead.xaml"              this.menuDeleteBranch.Click += new System.Windows.RoutedEventHandler(this.DeleteBranch_Click);                            #line default              #line hidden              return;              case 4:              this.menuMerge = ((System.Windows.Controls.MenuItem)(target));                            #line 12 "..\..\..\UI\CommitHead.xaml"              this.menuMerge.Click += new System.Windows.RoutedEventHandler(this.Merge_Click);                            #line default              #line hidden              return;              case 5:              this.menuRebase = ((System.Windows.Controls.MenuItem)(target));                            #line 13 "..\..\..\UI\CommitHead.xaml"              this.menuRebase.Click += new System.Windows.RoutedEventHandler(this.Rebase_Click);                            #line default              #line hidden              return;              case 6:              this.polygon = ((System.Windows.Shapes.Polygon)(target));              return;              case 7:              this.border = ((System.Windows.Controls.Border)(target));              return;              case 8:              this.txtName = ((System.Windows.Controls.TextBlock)(target));              return;              case 9:              this.txtHead = ((System.Windows.Controls.TextBlock)(target));              return;              }
Missing Default,GitScc.UI,CommitTag,C:\repos\yysun_git-tools\GitUI\UI\CommitTag.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:                            #line 10 "..\..\..\UI\CommitTag.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.DeleteTag_Click);                            #line default              #line hidden              return;              }
Missing Default,GitScc.UI,HistoryGraph,C:\repos\yysun_git-tools\GitUI\UI\HistoryGraph.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:                            #line 8 "..\..\..\UI\HistoryGraph.xaml"              ((GitScc.UI.HistoryGraph)(target)).SizeChanged += new System.Windows.SizeChangedEventHandler(this.UserControl_SizeChanged);                            #line default              #line hidden                            #line 8 "..\..\..\UI\HistoryGraph.xaml"              ((GitScc.UI.HistoryGraph)(target)).ContextMenuOpening += new System.Windows.Controls.ContextMenuEventHandler(this.UserControl_ContextMenuOpening);                            #line default              #line hidden              return;              case 2:                            #line 11 "..\..\..\UI\HistoryGraph.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.menuOpen_Click);                            #line default              #line hidden              return;              case 3:              this.menuInit = ((System.Windows.Controls.MenuItem)(target));                            #line 12 "..\..\..\UI\HistoryGraph.xaml"              this.menuInit.Click += new System.Windows.RoutedEventHandler(this.menuInit_Click);                            #line default              #line hidden              return;              case 4:              this.menuIgnore = ((System.Windows.Controls.MenuItem)(target));                            #line 13 "..\..\..\UI\HistoryGraph.xaml"              this.menuIgnore.Click += new System.Windows.RoutedEventHandler(this.menuEditGitIgnore_Click);                            #line default              #line hidden              return;              case 5:              this.menuStash = ((System.Windows.Controls.MenuItem)(target));                            #line 19 "..\..\..\UI\HistoryGraph.xaml"              this.menuStash.Click += new System.Windows.RoutedEventHandler(this.menuStash_Click);                            #line default              #line hidden              return;              case 6:              this.menuStashPop = ((System.Windows.Controls.MenuItem)(target));                            #line 20 "..\..\..\UI\HistoryGraph.xaml"              this.menuStashPop.Click += new System.Windows.RoutedEventHandler(this.menuStashPop_Click);                            #line default              #line hidden              return;              case 7:              this.menuStashDrop = ((System.Windows.Controls.MenuItem)(target));                            #line 21 "..\..\..\UI\HistoryGraph.xaml"              this.menuStashDrop.Click += new System.Windows.RoutedEventHandler(this.menuStashDrop_Click);                            #line default              #line hidden              return;              case 8:                            #line 24 "..\..\..\UI\HistoryGraph.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.menuRefresh_Click);                            #line default              #line hidden              return;              case 9:                            #line 26 "..\..\..\UI\HistoryGraph.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.menuAbout_Click);                            #line default              #line hidden              return;              case 10:              this.scrollRoot = ((System.Windows.Controls.ScrollViewer)(target));              return;              case 11:              this.zoomAndPanControl = ((ZoomAndPan.ZoomAndPanControl)(target));              return;              case 12:              this.canvasContainer = ((System.Windows.Controls.Canvas)(target));              return;              }
Missing Default,GitScc.UI,Loading,C:\repos\yysun_git-tools\GitUI\UI\Loading.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:              this.spin = ((System.Windows.Media.RotateTransform)(target));              return;              case 2:              this.text1 = ((System.Windows.Controls.TextBlock)(target));              return;              }
