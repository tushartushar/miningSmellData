Implementation smell,Namespace,Class,File,Method,Description
Long Method,plcdb_lib_siemens_s7,SiemensTag,C:\repos\joncarson_plcdb\plcdb lib siemens s7\SiemensTag.cs,CreateTag,The method has 106 lines of code.
Complex Method,plcdb_lib_siemens_s7,SiemensTag,C:\repos\joncarson_plcdb\plcdb lib siemens s7\SiemensTag.cs,CreateTag,Cyclomatic complexity of the method is 23
Long Parameter List,Snap7,S7Client,C:\repos\joncarson_plcdb\plcdb lib siemens s7\snap7.net.cs,Cli_ReadArea,The method has 7 parameters.
Long Parameter List,Snap7,S7Client,C:\repos\joncarson_plcdb\plcdb lib siemens s7\snap7.net.cs,ReadArea,The method has 6 parameters.
Long Parameter List,Snap7,S7Client,C:\repos\joncarson_plcdb\plcdb lib siemens s7\snap7.net.cs,Cli_WriteArea,The method has 7 parameters.
Long Parameter List,Snap7,S7Client,C:\repos\joncarson_plcdb\plcdb lib siemens s7\snap7.net.cs,WriteArea,The method has 6 parameters.
Long Parameter List,Snap7,S7Client,C:\repos\joncarson_plcdb\plcdb lib siemens s7\snap7.net.cs,Cli_DBRead,The method has 5 parameters.
Long Parameter List,Snap7,S7Client,C:\repos\joncarson_plcdb\plcdb lib siemens s7\snap7.net.cs,Cli_DBWrite,The method has 5 parameters.
Long Parameter List,Snap7,S7Client,C:\repos\joncarson_plcdb\plcdb lib siemens s7\snap7.net.cs,Cli_Upload,The method has 5 parameters.
Long Parameter List,Snap7,S7Client,C:\repos\joncarson_plcdb\plcdb lib siemens s7\snap7.net.cs,Cli_FullUpload,The method has 5 parameters.
Long Parameter List,Snap7,S7Client,C:\repos\joncarson_plcdb\plcdb lib siemens s7\snap7.net.cs,Cli_ReadSZL,The method has 5 parameters.
Long Parameter List,Snap7,S7Client,C:\repos\joncarson_plcdb\plcdb lib siemens s7\snap7.net.cs,Cli_AsReadArea,The method has 7 parameters.
Long Parameter List,Snap7,S7Client,C:\repos\joncarson_plcdb\plcdb lib siemens s7\snap7.net.cs,AsReadArea,The method has 6 parameters.
Long Parameter List,Snap7,S7Client,C:\repos\joncarson_plcdb\plcdb lib siemens s7\snap7.net.cs,Cli_AsWriteArea,The method has 7 parameters.
Long Parameter List,Snap7,S7Client,C:\repos\joncarson_plcdb\plcdb lib siemens s7\snap7.net.cs,AsWriteArea,The method has 6 parameters.
Long Parameter List,Snap7,S7Client,C:\repos\joncarson_plcdb\plcdb lib siemens s7\snap7.net.cs,Cli_AsDBRead,The method has 5 parameters.
Long Parameter List,Snap7,S7Client,C:\repos\joncarson_plcdb\plcdb lib siemens s7\snap7.net.cs,Cli_AsDBWrite,The method has 5 parameters.
Long Parameter List,Snap7,S7Client,C:\repos\joncarson_plcdb\plcdb lib siemens s7\snap7.net.cs,Cli_AsReadSZL,The method has 5 parameters.
Long Parameter List,Snap7,S7Client,C:\repos\joncarson_plcdb\plcdb lib siemens s7\snap7.net.cs,Cli_AsUpload,The method has 5 parameters.
Long Parameter List,Snap7,S7Client,C:\repos\joncarson_plcdb\plcdb lib siemens s7\snap7.net.cs,Cli_AsFullUpload,The method has 5 parameters.
Long Parameter List,Snap7,S7Server,C:\repos\joncarson_plcdb\plcdb lib siemens s7\snap7.net.cs,Srv_RegisterArea,The method has 5 parameters.
Long Parameter List,Snap7,S7Partner,C:\repos\joncarson_plcdb\plcdb lib siemens s7\snap7.net.cs,Par_StartTo,The method has 5 parameters.
Long Parameter List,Snap7,S7Partner,C:\repos\joncarson_plcdb\plcdb lib siemens s7\snap7.net.cs,Par_BRecv,The method has 5 parameters.
Long Parameter List,Snap7,S7Partner,C:\repos\joncarson_plcdb\plcdb lib siemens s7\snap7.net.cs,Par_CheckAsBRecvCompletion,The method has 5 parameters.
Long Parameter List,Snap7,S7Partner,C:\repos\joncarson_plcdb\plcdb lib siemens s7\snap7.net.cs,Par_GetStats,The method has 5 parameters.
Magic Number,plcdb_lib_siemens_s7,SiemensTag,C:\repos\joncarson_plcdb\plcdb lib siemens s7\SiemensTag.cs,CreateTag,The following statement contains a magic number: if (DbRegex.IsMatch (address)) {  	char AddressType = Regex.Match (address' "(DBB|DBX|DBW|DBD)").Value [2];  	if (AddressType == 'X') {  		NewTag.Length = AddressLength.Bit;  		NewTag.Start = int.Parse (Regex.Match (address' @"DBX[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (3));  		NewTag.Bit = int.Parse (Regex.Match (address' @"\.[0-7]").Value.Substring (1));  	}  	else if (AddressType == 'B') {  		NewTag.Length = AddressLength.Byte;  		NewTag.Start = int.Parse (Regex.Match (address' @"DBB[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (3));  	}  	else if (AddressType == 'W') {  		NewTag.Length = AddressLength.Word;  		NewTag.Start = int.Parse (Regex.Match (address' @"DBW[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (3));  	}  	else if (AddressType == 'D') {  		NewTag.Length = AddressLength.DWord;  		NewTag.Start = int.Parse (Regex.Match (address' @"DBD[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (3));  	}  }  else if (MRegex.IsMatch (address)) {  	Match AddressTypeMatch = Regex.Match (address' "(MB|MW|MD)");  	if (!AddressTypeMatch.Success) {  		NewTag.Length = AddressLength.Bit;  		NewTag.Start = int.Parse (Regex.Match (address' @"M[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (1));  		NewTag.Bit = int.Parse (Regex.Match (address' @"\.[0-7]").Value.Substring (1));  	}  	else {  		char AddressType = AddressTypeMatch.Value [1];  		if (AddressType == 'B') {  			NewTag.Length = AddressLength.Byte;  			NewTag.Start = int.Parse (Regex.Match (address' @"MB[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  		else if (AddressType == 'W') {  			NewTag.Length = AddressLength.Word;  			NewTag.Start = int.Parse (Regex.Match (address' @"MW[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  		else if (AddressType == 'D') {  			NewTag.Length = AddressLength.DWord;  			NewTag.Start = int.Parse (Regex.Match (address' @"MD[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  	}  }  else if (IRegex.IsMatch (address)) {  	Match AddressTypeMatch = Regex.Match (address' "(IB|IW|ID)");  	if (!AddressTypeMatch.Success) {  		NewTag.Length = AddressLength.Bit;  		NewTag.Start = int.Parse (Regex.Match (address' @"I[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (1));  		NewTag.Bit = int.Parse (Regex.Match (address' @"\.[0-7]").Value.Substring (1));  	}  	else {  		char AddressType = AddressTypeMatch.Value [1];  		if (AddressType == 'B') {  			NewTag.Length = AddressLength.Byte;  			NewTag.Start = int.Parse (Regex.Match (address' @"IB[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  		else if (AddressType == 'W') {  			NewTag.Length = AddressLength.Word;  			NewTag.Start = int.Parse (Regex.Match (address' @"IW[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  		else if (AddressType == 'D') {  			NewTag.Length = AddressLength.DWord;  			NewTag.Start = int.Parse (Regex.Match (address' @"ID[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  	}  }  else if (QRegex.IsMatch (address)) {  	Match AddressTypeMatch = Regex.Match (address' "(QB|QW|QD)");  	if (!AddressTypeMatch.Success) {  		NewTag.Length = AddressLength.Bit;  		NewTag.Start = int.Parse (Regex.Match (address' @"Q[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (1));  		NewTag.Bit = int.Parse (Regex.Match (address' @"\.[0-7]").Value.Substring (1));  	}  	else {  		char AddressType = AddressTypeMatch.Value [1];  		if (AddressType == 'B') {  			NewTag.Length = AddressLength.Byte;  			NewTag.Start = int.Parse (Regex.Match (address' @"QB[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  		else if (AddressType == 'W') {  			NewTag.Length = AddressLength.Word;  			NewTag.Start = int.Parse (Regex.Match (address' @"QW[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  		else if (AddressType == 'D') {  			NewTag.Length = AddressLength.DWord;  			NewTag.Start = int.Parse (Regex.Match (address' @"QD[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  	}  }  else if (CRegex.IsMatch (address)) {  	NewTag.Length = AddressLength.Counter;  	NewTag.Start = int.Parse (Regex.Match (address' @"C[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (1));  }  else if (TRegex.IsMatch (address)) {  	NewTag.Length = AddressLength.Timer;  	NewTag.Start = int.Parse (Regex.Match (address' @"T[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (1));  }  else {  	return null;  }  
Magic Number,plcdb_lib_siemens_s7,SiemensTag,C:\repos\joncarson_plcdb\plcdb lib siemens s7\SiemensTag.cs,CreateTag,The following statement contains a magic number: if (DbRegex.IsMatch (address)) {  	char AddressType = Regex.Match (address' "(DBB|DBX|DBW|DBD)").Value [2];  	if (AddressType == 'X') {  		NewTag.Length = AddressLength.Bit;  		NewTag.Start = int.Parse (Regex.Match (address' @"DBX[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (3));  		NewTag.Bit = int.Parse (Regex.Match (address' @"\.[0-7]").Value.Substring (1));  	}  	else if (AddressType == 'B') {  		NewTag.Length = AddressLength.Byte;  		NewTag.Start = int.Parse (Regex.Match (address' @"DBB[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (3));  	}  	else if (AddressType == 'W') {  		NewTag.Length = AddressLength.Word;  		NewTag.Start = int.Parse (Regex.Match (address' @"DBW[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (3));  	}  	else if (AddressType == 'D') {  		NewTag.Length = AddressLength.DWord;  		NewTag.Start = int.Parse (Regex.Match (address' @"DBD[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (3));  	}  }  else if (MRegex.IsMatch (address)) {  	Match AddressTypeMatch = Regex.Match (address' "(MB|MW|MD)");  	if (!AddressTypeMatch.Success) {  		NewTag.Length = AddressLength.Bit;  		NewTag.Start = int.Parse (Regex.Match (address' @"M[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (1));  		NewTag.Bit = int.Parse (Regex.Match (address' @"\.[0-7]").Value.Substring (1));  	}  	else {  		char AddressType = AddressTypeMatch.Value [1];  		if (AddressType == 'B') {  			NewTag.Length = AddressLength.Byte;  			NewTag.Start = int.Parse (Regex.Match (address' @"MB[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  		else if (AddressType == 'W') {  			NewTag.Length = AddressLength.Word;  			NewTag.Start = int.Parse (Regex.Match (address' @"MW[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  		else if (AddressType == 'D') {  			NewTag.Length = AddressLength.DWord;  			NewTag.Start = int.Parse (Regex.Match (address' @"MD[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  	}  }  else if (IRegex.IsMatch (address)) {  	Match AddressTypeMatch = Regex.Match (address' "(IB|IW|ID)");  	if (!AddressTypeMatch.Success) {  		NewTag.Length = AddressLength.Bit;  		NewTag.Start = int.Parse (Regex.Match (address' @"I[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (1));  		NewTag.Bit = int.Parse (Regex.Match (address' @"\.[0-7]").Value.Substring (1));  	}  	else {  		char AddressType = AddressTypeMatch.Value [1];  		if (AddressType == 'B') {  			NewTag.Length = AddressLength.Byte;  			NewTag.Start = int.Parse (Regex.Match (address' @"IB[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  		else if (AddressType == 'W') {  			NewTag.Length = AddressLength.Word;  			NewTag.Start = int.Parse (Regex.Match (address' @"IW[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  		else if (AddressType == 'D') {  			NewTag.Length = AddressLength.DWord;  			NewTag.Start = int.Parse (Regex.Match (address' @"ID[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  	}  }  else if (QRegex.IsMatch (address)) {  	Match AddressTypeMatch = Regex.Match (address' "(QB|QW|QD)");  	if (!AddressTypeMatch.Success) {  		NewTag.Length = AddressLength.Bit;  		NewTag.Start = int.Parse (Regex.Match (address' @"Q[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (1));  		NewTag.Bit = int.Parse (Regex.Match (address' @"\.[0-7]").Value.Substring (1));  	}  	else {  		char AddressType = AddressTypeMatch.Value [1];  		if (AddressType == 'B') {  			NewTag.Length = AddressLength.Byte;  			NewTag.Start = int.Parse (Regex.Match (address' @"QB[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  		else if (AddressType == 'W') {  			NewTag.Length = AddressLength.Word;  			NewTag.Start = int.Parse (Regex.Match (address' @"QW[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  		else if (AddressType == 'D') {  			NewTag.Length = AddressLength.DWord;  			NewTag.Start = int.Parse (Regex.Match (address' @"QD[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  	}  }  else if (CRegex.IsMatch (address)) {  	NewTag.Length = AddressLength.Counter;  	NewTag.Start = int.Parse (Regex.Match (address' @"C[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (1));  }  else if (TRegex.IsMatch (address)) {  	NewTag.Length = AddressLength.Timer;  	NewTag.Start = int.Parse (Regex.Match (address' @"T[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (1));  }  else {  	return null;  }  
Magic Number,plcdb_lib_siemens_s7,SiemensTag,C:\repos\joncarson_plcdb\plcdb lib siemens s7\SiemensTag.cs,CreateTag,The following statement contains a magic number: if (DbRegex.IsMatch (address)) {  	char AddressType = Regex.Match (address' "(DBB|DBX|DBW|DBD)").Value [2];  	if (AddressType == 'X') {  		NewTag.Length = AddressLength.Bit;  		NewTag.Start = int.Parse (Regex.Match (address' @"DBX[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (3));  		NewTag.Bit = int.Parse (Regex.Match (address' @"\.[0-7]").Value.Substring (1));  	}  	else if (AddressType == 'B') {  		NewTag.Length = AddressLength.Byte;  		NewTag.Start = int.Parse (Regex.Match (address' @"DBB[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (3));  	}  	else if (AddressType == 'W') {  		NewTag.Length = AddressLength.Word;  		NewTag.Start = int.Parse (Regex.Match (address' @"DBW[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (3));  	}  	else if (AddressType == 'D') {  		NewTag.Length = AddressLength.DWord;  		NewTag.Start = int.Parse (Regex.Match (address' @"DBD[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (3));  	}  }  else if (MRegex.IsMatch (address)) {  	Match AddressTypeMatch = Regex.Match (address' "(MB|MW|MD)");  	if (!AddressTypeMatch.Success) {  		NewTag.Length = AddressLength.Bit;  		NewTag.Start = int.Parse (Regex.Match (address' @"M[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (1));  		NewTag.Bit = int.Parse (Regex.Match (address' @"\.[0-7]").Value.Substring (1));  	}  	else {  		char AddressType = AddressTypeMatch.Value [1];  		if (AddressType == 'B') {  			NewTag.Length = AddressLength.Byte;  			NewTag.Start = int.Parse (Regex.Match (address' @"MB[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  		else if (AddressType == 'W') {  			NewTag.Length = AddressLength.Word;  			NewTag.Start = int.Parse (Regex.Match (address' @"MW[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  		else if (AddressType == 'D') {  			NewTag.Length = AddressLength.DWord;  			NewTag.Start = int.Parse (Regex.Match (address' @"MD[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  	}  }  else if (IRegex.IsMatch (address)) {  	Match AddressTypeMatch = Regex.Match (address' "(IB|IW|ID)");  	if (!AddressTypeMatch.Success) {  		NewTag.Length = AddressLength.Bit;  		NewTag.Start = int.Parse (Regex.Match (address' @"I[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (1));  		NewTag.Bit = int.Parse (Regex.Match (address' @"\.[0-7]").Value.Substring (1));  	}  	else {  		char AddressType = AddressTypeMatch.Value [1];  		if (AddressType == 'B') {  			NewTag.Length = AddressLength.Byte;  			NewTag.Start = int.Parse (Regex.Match (address' @"IB[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  		else if (AddressType == 'W') {  			NewTag.Length = AddressLength.Word;  			NewTag.Start = int.Parse (Regex.Match (address' @"IW[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  		else if (AddressType == 'D') {  			NewTag.Length = AddressLength.DWord;  			NewTag.Start = int.Parse (Regex.Match (address' @"ID[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  	}  }  else if (QRegex.IsMatch (address)) {  	Match AddressTypeMatch = Regex.Match (address' "(QB|QW|QD)");  	if (!AddressTypeMatch.Success) {  		NewTag.Length = AddressLength.Bit;  		NewTag.Start = int.Parse (Regex.Match (address' @"Q[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (1));  		NewTag.Bit = int.Parse (Regex.Match (address' @"\.[0-7]").Value.Substring (1));  	}  	else {  		char AddressType = AddressTypeMatch.Value [1];  		if (AddressType == 'B') {  			NewTag.Length = AddressLength.Byte;  			NewTag.Start = int.Parse (Regex.Match (address' @"QB[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  		else if (AddressType == 'W') {  			NewTag.Length = AddressLength.Word;  			NewTag.Start = int.Parse (Regex.Match (address' @"QW[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  		else if (AddressType == 'D') {  			NewTag.Length = AddressLength.DWord;  			NewTag.Start = int.Parse (Regex.Match (address' @"QD[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  	}  }  else if (CRegex.IsMatch (address)) {  	NewTag.Length = AddressLength.Counter;  	NewTag.Start = int.Parse (Regex.Match (address' @"C[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (1));  }  else if (TRegex.IsMatch (address)) {  	NewTag.Length = AddressLength.Timer;  	NewTag.Start = int.Parse (Regex.Match (address' @"T[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (1));  }  else {  	return null;  }  
Magic Number,plcdb_lib_siemens_s7,SiemensTag,C:\repos\joncarson_plcdb\plcdb lib siemens s7\SiemensTag.cs,CreateTag,The following statement contains a magic number: if (DbRegex.IsMatch (address)) {  	char AddressType = Regex.Match (address' "(DBB|DBX|DBW|DBD)").Value [2];  	if (AddressType == 'X') {  		NewTag.Length = AddressLength.Bit;  		NewTag.Start = int.Parse (Regex.Match (address' @"DBX[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (3));  		NewTag.Bit = int.Parse (Regex.Match (address' @"\.[0-7]").Value.Substring (1));  	}  	else if (AddressType == 'B') {  		NewTag.Length = AddressLength.Byte;  		NewTag.Start = int.Parse (Regex.Match (address' @"DBB[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (3));  	}  	else if (AddressType == 'W') {  		NewTag.Length = AddressLength.Word;  		NewTag.Start = int.Parse (Regex.Match (address' @"DBW[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (3));  	}  	else if (AddressType == 'D') {  		NewTag.Length = AddressLength.DWord;  		NewTag.Start = int.Parse (Regex.Match (address' @"DBD[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (3));  	}  }  else if (MRegex.IsMatch (address)) {  	Match AddressTypeMatch = Regex.Match (address' "(MB|MW|MD)");  	if (!AddressTypeMatch.Success) {  		NewTag.Length = AddressLength.Bit;  		NewTag.Start = int.Parse (Regex.Match (address' @"M[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (1));  		NewTag.Bit = int.Parse (Regex.Match (address' @"\.[0-7]").Value.Substring (1));  	}  	else {  		char AddressType = AddressTypeMatch.Value [1];  		if (AddressType == 'B') {  			NewTag.Length = AddressLength.Byte;  			NewTag.Start = int.Parse (Regex.Match (address' @"MB[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  		else if (AddressType == 'W') {  			NewTag.Length = AddressLength.Word;  			NewTag.Start = int.Parse (Regex.Match (address' @"MW[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  		else if (AddressType == 'D') {  			NewTag.Length = AddressLength.DWord;  			NewTag.Start = int.Parse (Regex.Match (address' @"MD[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  	}  }  else if (IRegex.IsMatch (address)) {  	Match AddressTypeMatch = Regex.Match (address' "(IB|IW|ID)");  	if (!AddressTypeMatch.Success) {  		NewTag.Length = AddressLength.Bit;  		NewTag.Start = int.Parse (Regex.Match (address' @"I[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (1));  		NewTag.Bit = int.Parse (Regex.Match (address' @"\.[0-7]").Value.Substring (1));  	}  	else {  		char AddressType = AddressTypeMatch.Value [1];  		if (AddressType == 'B') {  			NewTag.Length = AddressLength.Byte;  			NewTag.Start = int.Parse (Regex.Match (address' @"IB[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  		else if (AddressType == 'W') {  			NewTag.Length = AddressLength.Word;  			NewTag.Start = int.Parse (Regex.Match (address' @"IW[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  		else if (AddressType == 'D') {  			NewTag.Length = AddressLength.DWord;  			NewTag.Start = int.Parse (Regex.Match (address' @"ID[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  	}  }  else if (QRegex.IsMatch (address)) {  	Match AddressTypeMatch = Regex.Match (address' "(QB|QW|QD)");  	if (!AddressTypeMatch.Success) {  		NewTag.Length = AddressLength.Bit;  		NewTag.Start = int.Parse (Regex.Match (address' @"Q[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (1));  		NewTag.Bit = int.Parse (Regex.Match (address' @"\.[0-7]").Value.Substring (1));  	}  	else {  		char AddressType = AddressTypeMatch.Value [1];  		if (AddressType == 'B') {  			NewTag.Length = AddressLength.Byte;  			NewTag.Start = int.Parse (Regex.Match (address' @"QB[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  		else if (AddressType == 'W') {  			NewTag.Length = AddressLength.Word;  			NewTag.Start = int.Parse (Regex.Match (address' @"QW[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  		else if (AddressType == 'D') {  			NewTag.Length = AddressLength.DWord;  			NewTag.Start = int.Parse (Regex.Match (address' @"QD[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  	}  }  else if (CRegex.IsMatch (address)) {  	NewTag.Length = AddressLength.Counter;  	NewTag.Start = int.Parse (Regex.Match (address' @"C[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (1));  }  else if (TRegex.IsMatch (address)) {  	NewTag.Length = AddressLength.Timer;  	NewTag.Start = int.Parse (Regex.Match (address' @"T[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (1));  }  else {  	return null;  }  
Magic Number,plcdb_lib_siemens_s7,SiemensTag,C:\repos\joncarson_plcdb\plcdb lib siemens s7\SiemensTag.cs,CreateTag,The following statement contains a magic number: if (DbRegex.IsMatch (address)) {  	char AddressType = Regex.Match (address' "(DBB|DBX|DBW|DBD)").Value [2];  	if (AddressType == 'X') {  		NewTag.Length = AddressLength.Bit;  		NewTag.Start = int.Parse (Regex.Match (address' @"DBX[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (3));  		NewTag.Bit = int.Parse (Regex.Match (address' @"\.[0-7]").Value.Substring (1));  	}  	else if (AddressType == 'B') {  		NewTag.Length = AddressLength.Byte;  		NewTag.Start = int.Parse (Regex.Match (address' @"DBB[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (3));  	}  	else if (AddressType == 'W') {  		NewTag.Length = AddressLength.Word;  		NewTag.Start = int.Parse (Regex.Match (address' @"DBW[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (3));  	}  	else if (AddressType == 'D') {  		NewTag.Length = AddressLength.DWord;  		NewTag.Start = int.Parse (Regex.Match (address' @"DBD[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (3));  	}  }  else if (MRegex.IsMatch (address)) {  	Match AddressTypeMatch = Regex.Match (address' "(MB|MW|MD)");  	if (!AddressTypeMatch.Success) {  		NewTag.Length = AddressLength.Bit;  		NewTag.Start = int.Parse (Regex.Match (address' @"M[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (1));  		NewTag.Bit = int.Parse (Regex.Match (address' @"\.[0-7]").Value.Substring (1));  	}  	else {  		char AddressType = AddressTypeMatch.Value [1];  		if (AddressType == 'B') {  			NewTag.Length = AddressLength.Byte;  			NewTag.Start = int.Parse (Regex.Match (address' @"MB[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  		else if (AddressType == 'W') {  			NewTag.Length = AddressLength.Word;  			NewTag.Start = int.Parse (Regex.Match (address' @"MW[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  		else if (AddressType == 'D') {  			NewTag.Length = AddressLength.DWord;  			NewTag.Start = int.Parse (Regex.Match (address' @"MD[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  	}  }  else if (IRegex.IsMatch (address)) {  	Match AddressTypeMatch = Regex.Match (address' "(IB|IW|ID)");  	if (!AddressTypeMatch.Success) {  		NewTag.Length = AddressLength.Bit;  		NewTag.Start = int.Parse (Regex.Match (address' @"I[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (1));  		NewTag.Bit = int.Parse (Regex.Match (address' @"\.[0-7]").Value.Substring (1));  	}  	else {  		char AddressType = AddressTypeMatch.Value [1];  		if (AddressType == 'B') {  			NewTag.Length = AddressLength.Byte;  			NewTag.Start = int.Parse (Regex.Match (address' @"IB[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  		else if (AddressType == 'W') {  			NewTag.Length = AddressLength.Word;  			NewTag.Start = int.Parse (Regex.Match (address' @"IW[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  		else if (AddressType == 'D') {  			NewTag.Length = AddressLength.DWord;  			NewTag.Start = int.Parse (Regex.Match (address' @"ID[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  	}  }  else if (QRegex.IsMatch (address)) {  	Match AddressTypeMatch = Regex.Match (address' "(QB|QW|QD)");  	if (!AddressTypeMatch.Success) {  		NewTag.Length = AddressLength.Bit;  		NewTag.Start = int.Parse (Regex.Match (address' @"Q[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (1));  		NewTag.Bit = int.Parse (Regex.Match (address' @"\.[0-7]").Value.Substring (1));  	}  	else {  		char AddressType = AddressTypeMatch.Value [1];  		if (AddressType == 'B') {  			NewTag.Length = AddressLength.Byte;  			NewTag.Start = int.Parse (Regex.Match (address' @"QB[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  		else if (AddressType == 'W') {  			NewTag.Length = AddressLength.Word;  			NewTag.Start = int.Parse (Regex.Match (address' @"QW[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  		else if (AddressType == 'D') {  			NewTag.Length = AddressLength.DWord;  			NewTag.Start = int.Parse (Regex.Match (address' @"QD[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  	}  }  else if (CRegex.IsMatch (address)) {  	NewTag.Length = AddressLength.Counter;  	NewTag.Start = int.Parse (Regex.Match (address' @"C[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (1));  }  else if (TRegex.IsMatch (address)) {  	NewTag.Length = AddressLength.Timer;  	NewTag.Start = int.Parse (Regex.Match (address' @"T[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (1));  }  else {  	return null;  }  
Magic Number,plcdb_lib_siemens_s7,SiemensTag,C:\repos\joncarson_plcdb\plcdb lib siemens s7\SiemensTag.cs,CreateTag,The following statement contains a magic number: if (DbRegex.IsMatch (address)) {  	char AddressType = Regex.Match (address' "(DBB|DBX|DBW|DBD)").Value [2];  	if (AddressType == 'X') {  		NewTag.Length = AddressLength.Bit;  		NewTag.Start = int.Parse (Regex.Match (address' @"DBX[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (3));  		NewTag.Bit = int.Parse (Regex.Match (address' @"\.[0-7]").Value.Substring (1));  	}  	else if (AddressType == 'B') {  		NewTag.Length = AddressLength.Byte;  		NewTag.Start = int.Parse (Regex.Match (address' @"DBB[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (3));  	}  	else if (AddressType == 'W') {  		NewTag.Length = AddressLength.Word;  		NewTag.Start = int.Parse (Regex.Match (address' @"DBW[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (3));  	}  	else if (AddressType == 'D') {  		NewTag.Length = AddressLength.DWord;  		NewTag.Start = int.Parse (Regex.Match (address' @"DBD[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (3));  	}  }  else if (MRegex.IsMatch (address)) {  	Match AddressTypeMatch = Regex.Match (address' "(MB|MW|MD)");  	if (!AddressTypeMatch.Success) {  		NewTag.Length = AddressLength.Bit;  		NewTag.Start = int.Parse (Regex.Match (address' @"M[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (1));  		NewTag.Bit = int.Parse (Regex.Match (address' @"\.[0-7]").Value.Substring (1));  	}  	else {  		char AddressType = AddressTypeMatch.Value [1];  		if (AddressType == 'B') {  			NewTag.Length = AddressLength.Byte;  			NewTag.Start = int.Parse (Regex.Match (address' @"MB[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  		else if (AddressType == 'W') {  			NewTag.Length = AddressLength.Word;  			NewTag.Start = int.Parse (Regex.Match (address' @"MW[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  		else if (AddressType == 'D') {  			NewTag.Length = AddressLength.DWord;  			NewTag.Start = int.Parse (Regex.Match (address' @"MD[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  	}  }  else if (IRegex.IsMatch (address)) {  	Match AddressTypeMatch = Regex.Match (address' "(IB|IW|ID)");  	if (!AddressTypeMatch.Success) {  		NewTag.Length = AddressLength.Bit;  		NewTag.Start = int.Parse (Regex.Match (address' @"I[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (1));  		NewTag.Bit = int.Parse (Regex.Match (address' @"\.[0-7]").Value.Substring (1));  	}  	else {  		char AddressType = AddressTypeMatch.Value [1];  		if (AddressType == 'B') {  			NewTag.Length = AddressLength.Byte;  			NewTag.Start = int.Parse (Regex.Match (address' @"IB[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  		else if (AddressType == 'W') {  			NewTag.Length = AddressLength.Word;  			NewTag.Start = int.Parse (Regex.Match (address' @"IW[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  		else if (AddressType == 'D') {  			NewTag.Length = AddressLength.DWord;  			NewTag.Start = int.Parse (Regex.Match (address' @"ID[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  	}  }  else if (QRegex.IsMatch (address)) {  	Match AddressTypeMatch = Regex.Match (address' "(QB|QW|QD)");  	if (!AddressTypeMatch.Success) {  		NewTag.Length = AddressLength.Bit;  		NewTag.Start = int.Parse (Regex.Match (address' @"Q[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (1));  		NewTag.Bit = int.Parse (Regex.Match (address' @"\.[0-7]").Value.Substring (1));  	}  	else {  		char AddressType = AddressTypeMatch.Value [1];  		if (AddressType == 'B') {  			NewTag.Length = AddressLength.Byte;  			NewTag.Start = int.Parse (Regex.Match (address' @"QB[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  		else if (AddressType == 'W') {  			NewTag.Length = AddressLength.Word;  			NewTag.Start = int.Parse (Regex.Match (address' @"QW[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  		else if (AddressType == 'D') {  			NewTag.Length = AddressLength.DWord;  			NewTag.Start = int.Parse (Regex.Match (address' @"QD[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  	}  }  else if (CRegex.IsMatch (address)) {  	NewTag.Length = AddressLength.Counter;  	NewTag.Start = int.Parse (Regex.Match (address' @"C[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (1));  }  else if (TRegex.IsMatch (address)) {  	NewTag.Length = AddressLength.Timer;  	NewTag.Start = int.Parse (Regex.Match (address' @"T[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (1));  }  else {  	return null;  }  
Magic Number,plcdb_lib_siemens_s7,SiemensTag,C:\repos\joncarson_plcdb\plcdb lib siemens s7\SiemensTag.cs,CreateTag,The following statement contains a magic number: if (DbRegex.IsMatch (address)) {  	char AddressType = Regex.Match (address' "(DBB|DBX|DBW|DBD)").Value [2];  	if (AddressType == 'X') {  		NewTag.Length = AddressLength.Bit;  		NewTag.Start = int.Parse (Regex.Match (address' @"DBX[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (3));  		NewTag.Bit = int.Parse (Regex.Match (address' @"\.[0-7]").Value.Substring (1));  	}  	else if (AddressType == 'B') {  		NewTag.Length = AddressLength.Byte;  		NewTag.Start = int.Parse (Regex.Match (address' @"DBB[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (3));  	}  	else if (AddressType == 'W') {  		NewTag.Length = AddressLength.Word;  		NewTag.Start = int.Parse (Regex.Match (address' @"DBW[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (3));  	}  	else if (AddressType == 'D') {  		NewTag.Length = AddressLength.DWord;  		NewTag.Start = int.Parse (Regex.Match (address' @"DBD[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (3));  	}  }  else if (MRegex.IsMatch (address)) {  	Match AddressTypeMatch = Regex.Match (address' "(MB|MW|MD)");  	if (!AddressTypeMatch.Success) {  		NewTag.Length = AddressLength.Bit;  		NewTag.Start = int.Parse (Regex.Match (address' @"M[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (1));  		NewTag.Bit = int.Parse (Regex.Match (address' @"\.[0-7]").Value.Substring (1));  	}  	else {  		char AddressType = AddressTypeMatch.Value [1];  		if (AddressType == 'B') {  			NewTag.Length = AddressLength.Byte;  			NewTag.Start = int.Parse (Regex.Match (address' @"MB[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  		else if (AddressType == 'W') {  			NewTag.Length = AddressLength.Word;  			NewTag.Start = int.Parse (Regex.Match (address' @"MW[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  		else if (AddressType == 'D') {  			NewTag.Length = AddressLength.DWord;  			NewTag.Start = int.Parse (Regex.Match (address' @"MD[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  	}  }  else if (IRegex.IsMatch (address)) {  	Match AddressTypeMatch = Regex.Match (address' "(IB|IW|ID)");  	if (!AddressTypeMatch.Success) {  		NewTag.Length = AddressLength.Bit;  		NewTag.Start = int.Parse (Regex.Match (address' @"I[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (1));  		NewTag.Bit = int.Parse (Regex.Match (address' @"\.[0-7]").Value.Substring (1));  	}  	else {  		char AddressType = AddressTypeMatch.Value [1];  		if (AddressType == 'B') {  			NewTag.Length = AddressLength.Byte;  			NewTag.Start = int.Parse (Regex.Match (address' @"IB[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  		else if (AddressType == 'W') {  			NewTag.Length = AddressLength.Word;  			NewTag.Start = int.Parse (Regex.Match (address' @"IW[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  		else if (AddressType == 'D') {  			NewTag.Length = AddressLength.DWord;  			NewTag.Start = int.Parse (Regex.Match (address' @"ID[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  	}  }  else if (QRegex.IsMatch (address)) {  	Match AddressTypeMatch = Regex.Match (address' "(QB|QW|QD)");  	if (!AddressTypeMatch.Success) {  		NewTag.Length = AddressLength.Bit;  		NewTag.Start = int.Parse (Regex.Match (address' @"Q[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (1));  		NewTag.Bit = int.Parse (Regex.Match (address' @"\.[0-7]").Value.Substring (1));  	}  	else {  		char AddressType = AddressTypeMatch.Value [1];  		if (AddressType == 'B') {  			NewTag.Length = AddressLength.Byte;  			NewTag.Start = int.Parse (Regex.Match (address' @"QB[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  		else if (AddressType == 'W') {  			NewTag.Length = AddressLength.Word;  			NewTag.Start = int.Parse (Regex.Match (address' @"QW[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  		else if (AddressType == 'D') {  			NewTag.Length = AddressLength.DWord;  			NewTag.Start = int.Parse (Regex.Match (address' @"QD[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  	}  }  else if (CRegex.IsMatch (address)) {  	NewTag.Length = AddressLength.Counter;  	NewTag.Start = int.Parse (Regex.Match (address' @"C[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (1));  }  else if (TRegex.IsMatch (address)) {  	NewTag.Length = AddressLength.Timer;  	NewTag.Start = int.Parse (Regex.Match (address' @"T[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (1));  }  else {  	return null;  }  
Magic Number,plcdb_lib_siemens_s7,SiemensTag,C:\repos\joncarson_plcdb\plcdb lib siemens s7\SiemensTag.cs,CreateTag,The following statement contains a magic number: if (DbRegex.IsMatch (address)) {  	char AddressType = Regex.Match (address' "(DBB|DBX|DBW|DBD)").Value [2];  	if (AddressType == 'X') {  		NewTag.Length = AddressLength.Bit;  		NewTag.Start = int.Parse (Regex.Match (address' @"DBX[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (3));  		NewTag.Bit = int.Parse (Regex.Match (address' @"\.[0-7]").Value.Substring (1));  	}  	else if (AddressType == 'B') {  		NewTag.Length = AddressLength.Byte;  		NewTag.Start = int.Parse (Regex.Match (address' @"DBB[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (3));  	}  	else if (AddressType == 'W') {  		NewTag.Length = AddressLength.Word;  		NewTag.Start = int.Parse (Regex.Match (address' @"DBW[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (3));  	}  	else if (AddressType == 'D') {  		NewTag.Length = AddressLength.DWord;  		NewTag.Start = int.Parse (Regex.Match (address' @"DBD[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (3));  	}  }  else if (MRegex.IsMatch (address)) {  	Match AddressTypeMatch = Regex.Match (address' "(MB|MW|MD)");  	if (!AddressTypeMatch.Success) {  		NewTag.Length = AddressLength.Bit;  		NewTag.Start = int.Parse (Regex.Match (address' @"M[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (1));  		NewTag.Bit = int.Parse (Regex.Match (address' @"\.[0-7]").Value.Substring (1));  	}  	else {  		char AddressType = AddressTypeMatch.Value [1];  		if (AddressType == 'B') {  			NewTag.Length = AddressLength.Byte;  			NewTag.Start = int.Parse (Regex.Match (address' @"MB[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  		else if (AddressType == 'W') {  			NewTag.Length = AddressLength.Word;  			NewTag.Start = int.Parse (Regex.Match (address' @"MW[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  		else if (AddressType == 'D') {  			NewTag.Length = AddressLength.DWord;  			NewTag.Start = int.Parse (Regex.Match (address' @"MD[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  	}  }  else if (IRegex.IsMatch (address)) {  	Match AddressTypeMatch = Regex.Match (address' "(IB|IW|ID)");  	if (!AddressTypeMatch.Success) {  		NewTag.Length = AddressLength.Bit;  		NewTag.Start = int.Parse (Regex.Match (address' @"I[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (1));  		NewTag.Bit = int.Parse (Regex.Match (address' @"\.[0-7]").Value.Substring (1));  	}  	else {  		char AddressType = AddressTypeMatch.Value [1];  		if (AddressType == 'B') {  			NewTag.Length = AddressLength.Byte;  			NewTag.Start = int.Parse (Regex.Match (address' @"IB[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  		else if (AddressType == 'W') {  			NewTag.Length = AddressLength.Word;  			NewTag.Start = int.Parse (Regex.Match (address' @"IW[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  		else if (AddressType == 'D') {  			NewTag.Length = AddressLength.DWord;  			NewTag.Start = int.Parse (Regex.Match (address' @"ID[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  	}  }  else if (QRegex.IsMatch (address)) {  	Match AddressTypeMatch = Regex.Match (address' "(QB|QW|QD)");  	if (!AddressTypeMatch.Success) {  		NewTag.Length = AddressLength.Bit;  		NewTag.Start = int.Parse (Regex.Match (address' @"Q[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (1));  		NewTag.Bit = int.Parse (Regex.Match (address' @"\.[0-7]").Value.Substring (1));  	}  	else {  		char AddressType = AddressTypeMatch.Value [1];  		if (AddressType == 'B') {  			NewTag.Length = AddressLength.Byte;  			NewTag.Start = int.Parse (Regex.Match (address' @"QB[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  		else if (AddressType == 'W') {  			NewTag.Length = AddressLength.Word;  			NewTag.Start = int.Parse (Regex.Match (address' @"QW[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  		else if (AddressType == 'D') {  			NewTag.Length = AddressLength.DWord;  			NewTag.Start = int.Parse (Regex.Match (address' @"QD[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  	}  }  else if (CRegex.IsMatch (address)) {  	NewTag.Length = AddressLength.Counter;  	NewTag.Start = int.Parse (Regex.Match (address' @"C[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (1));  }  else if (TRegex.IsMatch (address)) {  	NewTag.Length = AddressLength.Timer;  	NewTag.Start = int.Parse (Regex.Match (address' @"T[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (1));  }  else {  	return null;  }  
Magic Number,plcdb_lib_siemens_s7,SiemensTag,C:\repos\joncarson_plcdb\plcdb lib siemens s7\SiemensTag.cs,CreateTag,The following statement contains a magic number: if (DbRegex.IsMatch (address)) {  	char AddressType = Regex.Match (address' "(DBB|DBX|DBW|DBD)").Value [2];  	if (AddressType == 'X') {  		NewTag.Length = AddressLength.Bit;  		NewTag.Start = int.Parse (Regex.Match (address' @"DBX[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (3));  		NewTag.Bit = int.Parse (Regex.Match (address' @"\.[0-7]").Value.Substring (1));  	}  	else if (AddressType == 'B') {  		NewTag.Length = AddressLength.Byte;  		NewTag.Start = int.Parse (Regex.Match (address' @"DBB[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (3));  	}  	else if (AddressType == 'W') {  		NewTag.Length = AddressLength.Word;  		NewTag.Start = int.Parse (Regex.Match (address' @"DBW[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (3));  	}  	else if (AddressType == 'D') {  		NewTag.Length = AddressLength.DWord;  		NewTag.Start = int.Parse (Regex.Match (address' @"DBD[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (3));  	}  }  else if (MRegex.IsMatch (address)) {  	Match AddressTypeMatch = Regex.Match (address' "(MB|MW|MD)");  	if (!AddressTypeMatch.Success) {  		NewTag.Length = AddressLength.Bit;  		NewTag.Start = int.Parse (Regex.Match (address' @"M[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (1));  		NewTag.Bit = int.Parse (Regex.Match (address' @"\.[0-7]").Value.Substring (1));  	}  	else {  		char AddressType = AddressTypeMatch.Value [1];  		if (AddressType == 'B') {  			NewTag.Length = AddressLength.Byte;  			NewTag.Start = int.Parse (Regex.Match (address' @"MB[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  		else if (AddressType == 'W') {  			NewTag.Length = AddressLength.Word;  			NewTag.Start = int.Parse (Regex.Match (address' @"MW[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  		else if (AddressType == 'D') {  			NewTag.Length = AddressLength.DWord;  			NewTag.Start = int.Parse (Regex.Match (address' @"MD[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  	}  }  else if (IRegex.IsMatch (address)) {  	Match AddressTypeMatch = Regex.Match (address' "(IB|IW|ID)");  	if (!AddressTypeMatch.Success) {  		NewTag.Length = AddressLength.Bit;  		NewTag.Start = int.Parse (Regex.Match (address' @"I[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (1));  		NewTag.Bit = int.Parse (Regex.Match (address' @"\.[0-7]").Value.Substring (1));  	}  	else {  		char AddressType = AddressTypeMatch.Value [1];  		if (AddressType == 'B') {  			NewTag.Length = AddressLength.Byte;  			NewTag.Start = int.Parse (Regex.Match (address' @"IB[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  		else if (AddressType == 'W') {  			NewTag.Length = AddressLength.Word;  			NewTag.Start = int.Parse (Regex.Match (address' @"IW[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  		else if (AddressType == 'D') {  			NewTag.Length = AddressLength.DWord;  			NewTag.Start = int.Parse (Regex.Match (address' @"ID[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  	}  }  else if (QRegex.IsMatch (address)) {  	Match AddressTypeMatch = Regex.Match (address' "(QB|QW|QD)");  	if (!AddressTypeMatch.Success) {  		NewTag.Length = AddressLength.Bit;  		NewTag.Start = int.Parse (Regex.Match (address' @"Q[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (1));  		NewTag.Bit = int.Parse (Regex.Match (address' @"\.[0-7]").Value.Substring (1));  	}  	else {  		char AddressType = AddressTypeMatch.Value [1];  		if (AddressType == 'B') {  			NewTag.Length = AddressLength.Byte;  			NewTag.Start = int.Parse (Regex.Match (address' @"QB[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  		else if (AddressType == 'W') {  			NewTag.Length = AddressLength.Word;  			NewTag.Start = int.Parse (Regex.Match (address' @"QW[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  		else if (AddressType == 'D') {  			NewTag.Length = AddressLength.DWord;  			NewTag.Start = int.Parse (Regex.Match (address' @"QD[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  	}  }  else if (CRegex.IsMatch (address)) {  	NewTag.Length = AddressLength.Counter;  	NewTag.Start = int.Parse (Regex.Match (address' @"C[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (1));  }  else if (TRegex.IsMatch (address)) {  	NewTag.Length = AddressLength.Timer;  	NewTag.Start = int.Parse (Regex.Match (address' @"T[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (1));  }  else {  	return null;  }  
Magic Number,plcdb_lib_siemens_s7,SiemensTag,C:\repos\joncarson_plcdb\plcdb lib siemens s7\SiemensTag.cs,CreateTag,The following statement contains a magic number: if (DbRegex.IsMatch (address)) {  	char AddressType = Regex.Match (address' "(DBB|DBX|DBW|DBD)").Value [2];  	if (AddressType == 'X') {  		NewTag.Length = AddressLength.Bit;  		NewTag.Start = int.Parse (Regex.Match (address' @"DBX[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (3));  		NewTag.Bit = int.Parse (Regex.Match (address' @"\.[0-7]").Value.Substring (1));  	}  	else if (AddressType == 'B') {  		NewTag.Length = AddressLength.Byte;  		NewTag.Start = int.Parse (Regex.Match (address' @"DBB[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (3));  	}  	else if (AddressType == 'W') {  		NewTag.Length = AddressLength.Word;  		NewTag.Start = int.Parse (Regex.Match (address' @"DBW[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (3));  	}  	else if (AddressType == 'D') {  		NewTag.Length = AddressLength.DWord;  		NewTag.Start = int.Parse (Regex.Match (address' @"DBD[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (3));  	}  }  else if (MRegex.IsMatch (address)) {  	Match AddressTypeMatch = Regex.Match (address' "(MB|MW|MD)");  	if (!AddressTypeMatch.Success) {  		NewTag.Length = AddressLength.Bit;  		NewTag.Start = int.Parse (Regex.Match (address' @"M[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (1));  		NewTag.Bit = int.Parse (Regex.Match (address' @"\.[0-7]").Value.Substring (1));  	}  	else {  		char AddressType = AddressTypeMatch.Value [1];  		if (AddressType == 'B') {  			NewTag.Length = AddressLength.Byte;  			NewTag.Start = int.Parse (Regex.Match (address' @"MB[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  		else if (AddressType == 'W') {  			NewTag.Length = AddressLength.Word;  			NewTag.Start = int.Parse (Regex.Match (address' @"MW[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  		else if (AddressType == 'D') {  			NewTag.Length = AddressLength.DWord;  			NewTag.Start = int.Parse (Regex.Match (address' @"MD[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  	}  }  else if (IRegex.IsMatch (address)) {  	Match AddressTypeMatch = Regex.Match (address' "(IB|IW|ID)");  	if (!AddressTypeMatch.Success) {  		NewTag.Length = AddressLength.Bit;  		NewTag.Start = int.Parse (Regex.Match (address' @"I[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (1));  		NewTag.Bit = int.Parse (Regex.Match (address' @"\.[0-7]").Value.Substring (1));  	}  	else {  		char AddressType = AddressTypeMatch.Value [1];  		if (AddressType == 'B') {  			NewTag.Length = AddressLength.Byte;  			NewTag.Start = int.Parse (Regex.Match (address' @"IB[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  		else if (AddressType == 'W') {  			NewTag.Length = AddressLength.Word;  			NewTag.Start = int.Parse (Regex.Match (address' @"IW[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  		else if (AddressType == 'D') {  			NewTag.Length = AddressLength.DWord;  			NewTag.Start = int.Parse (Regex.Match (address' @"ID[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  	}  }  else if (QRegex.IsMatch (address)) {  	Match AddressTypeMatch = Regex.Match (address' "(QB|QW|QD)");  	if (!AddressTypeMatch.Success) {  		NewTag.Length = AddressLength.Bit;  		NewTag.Start = int.Parse (Regex.Match (address' @"Q[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (1));  		NewTag.Bit = int.Parse (Regex.Match (address' @"\.[0-7]").Value.Substring (1));  	}  	else {  		char AddressType = AddressTypeMatch.Value [1];  		if (AddressType == 'B') {  			NewTag.Length = AddressLength.Byte;  			NewTag.Start = int.Parse (Regex.Match (address' @"QB[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  		else if (AddressType == 'W') {  			NewTag.Length = AddressLength.Word;  			NewTag.Start = int.Parse (Regex.Match (address' @"QW[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  		else if (AddressType == 'D') {  			NewTag.Length = AddressLength.DWord;  			NewTag.Start = int.Parse (Regex.Match (address' @"QD[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  	}  }  else if (CRegex.IsMatch (address)) {  	NewTag.Length = AddressLength.Counter;  	NewTag.Start = int.Parse (Regex.Match (address' @"C[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (1));  }  else if (TRegex.IsMatch (address)) {  	NewTag.Length = AddressLength.Timer;  	NewTag.Start = int.Parse (Regex.Match (address' @"T[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (1));  }  else {  	return null;  }  
Magic Number,plcdb_lib_siemens_s7,SiemensTag,C:\repos\joncarson_plcdb\plcdb lib siemens s7\SiemensTag.cs,CreateTag,The following statement contains a magic number: if (DbRegex.IsMatch (address)) {  	char AddressType = Regex.Match (address' "(DBB|DBX|DBW|DBD)").Value [2];  	if (AddressType == 'X') {  		NewTag.Length = AddressLength.Bit;  		NewTag.Start = int.Parse (Regex.Match (address' @"DBX[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (3));  		NewTag.Bit = int.Parse (Regex.Match (address' @"\.[0-7]").Value.Substring (1));  	}  	else if (AddressType == 'B') {  		NewTag.Length = AddressLength.Byte;  		NewTag.Start = int.Parse (Regex.Match (address' @"DBB[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (3));  	}  	else if (AddressType == 'W') {  		NewTag.Length = AddressLength.Word;  		NewTag.Start = int.Parse (Regex.Match (address' @"DBW[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (3));  	}  	else if (AddressType == 'D') {  		NewTag.Length = AddressLength.DWord;  		NewTag.Start = int.Parse (Regex.Match (address' @"DBD[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (3));  	}  }  else if (MRegex.IsMatch (address)) {  	Match AddressTypeMatch = Regex.Match (address' "(MB|MW|MD)");  	if (!AddressTypeMatch.Success) {  		NewTag.Length = AddressLength.Bit;  		NewTag.Start = int.Parse (Regex.Match (address' @"M[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (1));  		NewTag.Bit = int.Parse (Regex.Match (address' @"\.[0-7]").Value.Substring (1));  	}  	else {  		char AddressType = AddressTypeMatch.Value [1];  		if (AddressType == 'B') {  			NewTag.Length = AddressLength.Byte;  			NewTag.Start = int.Parse (Regex.Match (address' @"MB[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  		else if (AddressType == 'W') {  			NewTag.Length = AddressLength.Word;  			NewTag.Start = int.Parse (Regex.Match (address' @"MW[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  		else if (AddressType == 'D') {  			NewTag.Length = AddressLength.DWord;  			NewTag.Start = int.Parse (Regex.Match (address' @"MD[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  	}  }  else if (IRegex.IsMatch (address)) {  	Match AddressTypeMatch = Regex.Match (address' "(IB|IW|ID)");  	if (!AddressTypeMatch.Success) {  		NewTag.Length = AddressLength.Bit;  		NewTag.Start = int.Parse (Regex.Match (address' @"I[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (1));  		NewTag.Bit = int.Parse (Regex.Match (address' @"\.[0-7]").Value.Substring (1));  	}  	else {  		char AddressType = AddressTypeMatch.Value [1];  		if (AddressType == 'B') {  			NewTag.Length = AddressLength.Byte;  			NewTag.Start = int.Parse (Regex.Match (address' @"IB[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  		else if (AddressType == 'W') {  			NewTag.Length = AddressLength.Word;  			NewTag.Start = int.Parse (Regex.Match (address' @"IW[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  		else if (AddressType == 'D') {  			NewTag.Length = AddressLength.DWord;  			NewTag.Start = int.Parse (Regex.Match (address' @"ID[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  	}  }  else if (QRegex.IsMatch (address)) {  	Match AddressTypeMatch = Regex.Match (address' "(QB|QW|QD)");  	if (!AddressTypeMatch.Success) {  		NewTag.Length = AddressLength.Bit;  		NewTag.Start = int.Parse (Regex.Match (address' @"Q[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (1));  		NewTag.Bit = int.Parse (Regex.Match (address' @"\.[0-7]").Value.Substring (1));  	}  	else {  		char AddressType = AddressTypeMatch.Value [1];  		if (AddressType == 'B') {  			NewTag.Length = AddressLength.Byte;  			NewTag.Start = int.Parse (Regex.Match (address' @"QB[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  		else if (AddressType == 'W') {  			NewTag.Length = AddressLength.Word;  			NewTag.Start = int.Parse (Regex.Match (address' @"QW[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  		else if (AddressType == 'D') {  			NewTag.Length = AddressLength.DWord;  			NewTag.Start = int.Parse (Regex.Match (address' @"QD[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  	}  }  else if (CRegex.IsMatch (address)) {  	NewTag.Length = AddressLength.Counter;  	NewTag.Start = int.Parse (Regex.Match (address' @"C[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (1));  }  else if (TRegex.IsMatch (address)) {  	NewTag.Length = AddressLength.Timer;  	NewTag.Start = int.Parse (Regex.Match (address' @"T[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (1));  }  else {  	return null;  }  
Magic Number,plcdb_lib_siemens_s7,SiemensTag,C:\repos\joncarson_plcdb\plcdb lib siemens s7\SiemensTag.cs,CreateTag,The following statement contains a magic number: if (DbRegex.IsMatch (address)) {  	char AddressType = Regex.Match (address' "(DBB|DBX|DBW|DBD)").Value [2];  	if (AddressType == 'X') {  		NewTag.Length = AddressLength.Bit;  		NewTag.Start = int.Parse (Regex.Match (address' @"DBX[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (3));  		NewTag.Bit = int.Parse (Regex.Match (address' @"\.[0-7]").Value.Substring (1));  	}  	else if (AddressType == 'B') {  		NewTag.Length = AddressLength.Byte;  		NewTag.Start = int.Parse (Regex.Match (address' @"DBB[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (3));  	}  	else if (AddressType == 'W') {  		NewTag.Length = AddressLength.Word;  		NewTag.Start = int.Parse (Regex.Match (address' @"DBW[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (3));  	}  	else if (AddressType == 'D') {  		NewTag.Length = AddressLength.DWord;  		NewTag.Start = int.Parse (Regex.Match (address' @"DBD[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (3));  	}  }  else if (MRegex.IsMatch (address)) {  	Match AddressTypeMatch = Regex.Match (address' "(MB|MW|MD)");  	if (!AddressTypeMatch.Success) {  		NewTag.Length = AddressLength.Bit;  		NewTag.Start = int.Parse (Regex.Match (address' @"M[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (1));  		NewTag.Bit = int.Parse (Regex.Match (address' @"\.[0-7]").Value.Substring (1));  	}  	else {  		char AddressType = AddressTypeMatch.Value [1];  		if (AddressType == 'B') {  			NewTag.Length = AddressLength.Byte;  			NewTag.Start = int.Parse (Regex.Match (address' @"MB[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  		else if (AddressType == 'W') {  			NewTag.Length = AddressLength.Word;  			NewTag.Start = int.Parse (Regex.Match (address' @"MW[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  		else if (AddressType == 'D') {  			NewTag.Length = AddressLength.DWord;  			NewTag.Start = int.Parse (Regex.Match (address' @"MD[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  	}  }  else if (IRegex.IsMatch (address)) {  	Match AddressTypeMatch = Regex.Match (address' "(IB|IW|ID)");  	if (!AddressTypeMatch.Success) {  		NewTag.Length = AddressLength.Bit;  		NewTag.Start = int.Parse (Regex.Match (address' @"I[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (1));  		NewTag.Bit = int.Parse (Regex.Match (address' @"\.[0-7]").Value.Substring (1));  	}  	else {  		char AddressType = AddressTypeMatch.Value [1];  		if (AddressType == 'B') {  			NewTag.Length = AddressLength.Byte;  			NewTag.Start = int.Parse (Regex.Match (address' @"IB[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  		else if (AddressType == 'W') {  			NewTag.Length = AddressLength.Word;  			NewTag.Start = int.Parse (Regex.Match (address' @"IW[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  		else if (AddressType == 'D') {  			NewTag.Length = AddressLength.DWord;  			NewTag.Start = int.Parse (Regex.Match (address' @"ID[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  	}  }  else if (QRegex.IsMatch (address)) {  	Match AddressTypeMatch = Regex.Match (address' "(QB|QW|QD)");  	if (!AddressTypeMatch.Success) {  		NewTag.Length = AddressLength.Bit;  		NewTag.Start = int.Parse (Regex.Match (address' @"Q[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (1));  		NewTag.Bit = int.Parse (Regex.Match (address' @"\.[0-7]").Value.Substring (1));  	}  	else {  		char AddressType = AddressTypeMatch.Value [1];  		if (AddressType == 'B') {  			NewTag.Length = AddressLength.Byte;  			NewTag.Start = int.Parse (Regex.Match (address' @"QB[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  		else if (AddressType == 'W') {  			NewTag.Length = AddressLength.Word;  			NewTag.Start = int.Parse (Regex.Match (address' @"QW[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  		else if (AddressType == 'D') {  			NewTag.Length = AddressLength.DWord;  			NewTag.Start = int.Parse (Regex.Match (address' @"QD[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  	}  }  else if (CRegex.IsMatch (address)) {  	NewTag.Length = AddressLength.Counter;  	NewTag.Start = int.Parse (Regex.Match (address' @"C[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (1));  }  else if (TRegex.IsMatch (address)) {  	NewTag.Length = AddressLength.Timer;  	NewTag.Start = int.Parse (Regex.Match (address' @"T[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (1));  }  else {  	return null;  }  
Magic Number,plcdb_lib_siemens_s7,SiemensTag,C:\repos\joncarson_plcdb\plcdb lib siemens s7\SiemensTag.cs,CreateTag,The following statement contains a magic number: if (DbRegex.IsMatch (address)) {  	char AddressType = Regex.Match (address' "(DBB|DBX|DBW|DBD)").Value [2];  	if (AddressType == 'X') {  		NewTag.Length = AddressLength.Bit;  		NewTag.Start = int.Parse (Regex.Match (address' @"DBX[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (3));  		NewTag.Bit = int.Parse (Regex.Match (address' @"\.[0-7]").Value.Substring (1));  	}  	else if (AddressType == 'B') {  		NewTag.Length = AddressLength.Byte;  		NewTag.Start = int.Parse (Regex.Match (address' @"DBB[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (3));  	}  	else if (AddressType == 'W') {  		NewTag.Length = AddressLength.Word;  		NewTag.Start = int.Parse (Regex.Match (address' @"DBW[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (3));  	}  	else if (AddressType == 'D') {  		NewTag.Length = AddressLength.DWord;  		NewTag.Start = int.Parse (Regex.Match (address' @"DBD[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (3));  	}  }  else if (MRegex.IsMatch (address)) {  	Match AddressTypeMatch = Regex.Match (address' "(MB|MW|MD)");  	if (!AddressTypeMatch.Success) {  		NewTag.Length = AddressLength.Bit;  		NewTag.Start = int.Parse (Regex.Match (address' @"M[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (1));  		NewTag.Bit = int.Parse (Regex.Match (address' @"\.[0-7]").Value.Substring (1));  	}  	else {  		char AddressType = AddressTypeMatch.Value [1];  		if (AddressType == 'B') {  			NewTag.Length = AddressLength.Byte;  			NewTag.Start = int.Parse (Regex.Match (address' @"MB[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  		else if (AddressType == 'W') {  			NewTag.Length = AddressLength.Word;  			NewTag.Start = int.Parse (Regex.Match (address' @"MW[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  		else if (AddressType == 'D') {  			NewTag.Length = AddressLength.DWord;  			NewTag.Start = int.Parse (Regex.Match (address' @"MD[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  	}  }  else if (IRegex.IsMatch (address)) {  	Match AddressTypeMatch = Regex.Match (address' "(IB|IW|ID)");  	if (!AddressTypeMatch.Success) {  		NewTag.Length = AddressLength.Bit;  		NewTag.Start = int.Parse (Regex.Match (address' @"I[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (1));  		NewTag.Bit = int.Parse (Regex.Match (address' @"\.[0-7]").Value.Substring (1));  	}  	else {  		char AddressType = AddressTypeMatch.Value [1];  		if (AddressType == 'B') {  			NewTag.Length = AddressLength.Byte;  			NewTag.Start = int.Parse (Regex.Match (address' @"IB[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  		else if (AddressType == 'W') {  			NewTag.Length = AddressLength.Word;  			NewTag.Start = int.Parse (Regex.Match (address' @"IW[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  		else if (AddressType == 'D') {  			NewTag.Length = AddressLength.DWord;  			NewTag.Start = int.Parse (Regex.Match (address' @"ID[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  	}  }  else if (QRegex.IsMatch (address)) {  	Match AddressTypeMatch = Regex.Match (address' "(QB|QW|QD)");  	if (!AddressTypeMatch.Success) {  		NewTag.Length = AddressLength.Bit;  		NewTag.Start = int.Parse (Regex.Match (address' @"Q[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (1));  		NewTag.Bit = int.Parse (Regex.Match (address' @"\.[0-7]").Value.Substring (1));  	}  	else {  		char AddressType = AddressTypeMatch.Value [1];  		if (AddressType == 'B') {  			NewTag.Length = AddressLength.Byte;  			NewTag.Start = int.Parse (Regex.Match (address' @"QB[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  		else if (AddressType == 'W') {  			NewTag.Length = AddressLength.Word;  			NewTag.Start = int.Parse (Regex.Match (address' @"QW[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  		else if (AddressType == 'D') {  			NewTag.Length = AddressLength.DWord;  			NewTag.Start = int.Parse (Regex.Match (address' @"QD[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  	}  }  else if (CRegex.IsMatch (address)) {  	NewTag.Length = AddressLength.Counter;  	NewTag.Start = int.Parse (Regex.Match (address' @"C[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (1));  }  else if (TRegex.IsMatch (address)) {  	NewTag.Length = AddressLength.Timer;  	NewTag.Start = int.Parse (Regex.Match (address' @"T[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (1));  }  else {  	return null;  }  
Magic Number,plcdb_lib_siemens_s7,SiemensTag,C:\repos\joncarson_plcdb\plcdb lib siemens s7\SiemensTag.cs,CreateTag,The following statement contains a magic number: if (DbRegex.IsMatch (address)) {  	char AddressType = Regex.Match (address' "(DBB|DBX|DBW|DBD)").Value [2];  	if (AddressType == 'X') {  		NewTag.Length = AddressLength.Bit;  		NewTag.Start = int.Parse (Regex.Match (address' @"DBX[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (3));  		NewTag.Bit = int.Parse (Regex.Match (address' @"\.[0-7]").Value.Substring (1));  	}  	else if (AddressType == 'B') {  		NewTag.Length = AddressLength.Byte;  		NewTag.Start = int.Parse (Regex.Match (address' @"DBB[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (3));  	}  	else if (AddressType == 'W') {  		NewTag.Length = AddressLength.Word;  		NewTag.Start = int.Parse (Regex.Match (address' @"DBW[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (3));  	}  	else if (AddressType == 'D') {  		NewTag.Length = AddressLength.DWord;  		NewTag.Start = int.Parse (Regex.Match (address' @"DBD[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (3));  	}  }  else if (MRegex.IsMatch (address)) {  	Match AddressTypeMatch = Regex.Match (address' "(MB|MW|MD)");  	if (!AddressTypeMatch.Success) {  		NewTag.Length = AddressLength.Bit;  		NewTag.Start = int.Parse (Regex.Match (address' @"M[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (1));  		NewTag.Bit = int.Parse (Regex.Match (address' @"\.[0-7]").Value.Substring (1));  	}  	else {  		char AddressType = AddressTypeMatch.Value [1];  		if (AddressType == 'B') {  			NewTag.Length = AddressLength.Byte;  			NewTag.Start = int.Parse (Regex.Match (address' @"MB[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  		else if (AddressType == 'W') {  			NewTag.Length = AddressLength.Word;  			NewTag.Start = int.Parse (Regex.Match (address' @"MW[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  		else if (AddressType == 'D') {  			NewTag.Length = AddressLength.DWord;  			NewTag.Start = int.Parse (Regex.Match (address' @"MD[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  	}  }  else if (IRegex.IsMatch (address)) {  	Match AddressTypeMatch = Regex.Match (address' "(IB|IW|ID)");  	if (!AddressTypeMatch.Success) {  		NewTag.Length = AddressLength.Bit;  		NewTag.Start = int.Parse (Regex.Match (address' @"I[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (1));  		NewTag.Bit = int.Parse (Regex.Match (address' @"\.[0-7]").Value.Substring (1));  	}  	else {  		char AddressType = AddressTypeMatch.Value [1];  		if (AddressType == 'B') {  			NewTag.Length = AddressLength.Byte;  			NewTag.Start = int.Parse (Regex.Match (address' @"IB[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  		else if (AddressType == 'W') {  			NewTag.Length = AddressLength.Word;  			NewTag.Start = int.Parse (Regex.Match (address' @"IW[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  		else if (AddressType == 'D') {  			NewTag.Length = AddressLength.DWord;  			NewTag.Start = int.Parse (Regex.Match (address' @"ID[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  	}  }  else if (QRegex.IsMatch (address)) {  	Match AddressTypeMatch = Regex.Match (address' "(QB|QW|QD)");  	if (!AddressTypeMatch.Success) {  		NewTag.Length = AddressLength.Bit;  		NewTag.Start = int.Parse (Regex.Match (address' @"Q[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (1));  		NewTag.Bit = int.Parse (Regex.Match (address' @"\.[0-7]").Value.Substring (1));  	}  	else {  		char AddressType = AddressTypeMatch.Value [1];  		if (AddressType == 'B') {  			NewTag.Length = AddressLength.Byte;  			NewTag.Start = int.Parse (Regex.Match (address' @"QB[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  		else if (AddressType == 'W') {  			NewTag.Length = AddressLength.Word;  			NewTag.Start = int.Parse (Regex.Match (address' @"QW[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  		else if (AddressType == 'D') {  			NewTag.Length = AddressLength.DWord;  			NewTag.Start = int.Parse (Regex.Match (address' @"QD[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  	}  }  else if (CRegex.IsMatch (address)) {  	NewTag.Length = AddressLength.Counter;  	NewTag.Start = int.Parse (Regex.Match (address' @"C[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (1));  }  else if (TRegex.IsMatch (address)) {  	NewTag.Length = AddressLength.Timer;  	NewTag.Start = int.Parse (Regex.Match (address' @"T[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (1));  }  else {  	return null;  }  
Magic Number,plcdb_lib_siemens_s7,SiemensTag,C:\repos\joncarson_plcdb\plcdb lib siemens s7\SiemensTag.cs,CreateTag,The following statement contains a magic number: if (AddressType == 'X') {  	NewTag.Length = AddressLength.Bit;  	NewTag.Start = int.Parse (Regex.Match (address' @"DBX[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (3));  	NewTag.Bit = int.Parse (Regex.Match (address' @"\.[0-7]").Value.Substring (1));  }  else if (AddressType == 'B') {  	NewTag.Length = AddressLength.Byte;  	NewTag.Start = int.Parse (Regex.Match (address' @"DBB[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (3));  }  else if (AddressType == 'W') {  	NewTag.Length = AddressLength.Word;  	NewTag.Start = int.Parse (Regex.Match (address' @"DBW[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (3));  }  else if (AddressType == 'D') {  	NewTag.Length = AddressLength.DWord;  	NewTag.Start = int.Parse (Regex.Match (address' @"DBD[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (3));  }  
Magic Number,plcdb_lib_siemens_s7,SiemensTag,C:\repos\joncarson_plcdb\plcdb lib siemens s7\SiemensTag.cs,CreateTag,The following statement contains a magic number: if (AddressType == 'X') {  	NewTag.Length = AddressLength.Bit;  	NewTag.Start = int.Parse (Regex.Match (address' @"DBX[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (3));  	NewTag.Bit = int.Parse (Regex.Match (address' @"\.[0-7]").Value.Substring (1));  }  else if (AddressType == 'B') {  	NewTag.Length = AddressLength.Byte;  	NewTag.Start = int.Parse (Regex.Match (address' @"DBB[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (3));  }  else if (AddressType == 'W') {  	NewTag.Length = AddressLength.Word;  	NewTag.Start = int.Parse (Regex.Match (address' @"DBW[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (3));  }  else if (AddressType == 'D') {  	NewTag.Length = AddressLength.DWord;  	NewTag.Start = int.Parse (Regex.Match (address' @"DBD[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (3));  }  
Magic Number,plcdb_lib_siemens_s7,SiemensTag,C:\repos\joncarson_plcdb\plcdb lib siemens s7\SiemensTag.cs,CreateTag,The following statement contains a magic number: if (AddressType == 'X') {  	NewTag.Length = AddressLength.Bit;  	NewTag.Start = int.Parse (Regex.Match (address' @"DBX[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (3));  	NewTag.Bit = int.Parse (Regex.Match (address' @"\.[0-7]").Value.Substring (1));  }  else if (AddressType == 'B') {  	NewTag.Length = AddressLength.Byte;  	NewTag.Start = int.Parse (Regex.Match (address' @"DBB[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (3));  }  else if (AddressType == 'W') {  	NewTag.Length = AddressLength.Word;  	NewTag.Start = int.Parse (Regex.Match (address' @"DBW[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (3));  }  else if (AddressType == 'D') {  	NewTag.Length = AddressLength.DWord;  	NewTag.Start = int.Parse (Regex.Match (address' @"DBD[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (3));  }  
Magic Number,plcdb_lib_siemens_s7,SiemensTag,C:\repos\joncarson_plcdb\plcdb lib siemens s7\SiemensTag.cs,CreateTag,The following statement contains a magic number: if (AddressType == 'X') {  	NewTag.Length = AddressLength.Bit;  	NewTag.Start = int.Parse (Regex.Match (address' @"DBX[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (3));  	NewTag.Bit = int.Parse (Regex.Match (address' @"\.[0-7]").Value.Substring (1));  }  else if (AddressType == 'B') {  	NewTag.Length = AddressLength.Byte;  	NewTag.Start = int.Parse (Regex.Match (address' @"DBB[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (3));  }  else if (AddressType == 'W') {  	NewTag.Length = AddressLength.Word;  	NewTag.Start = int.Parse (Regex.Match (address' @"DBW[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (3));  }  else if (AddressType == 'D') {  	NewTag.Length = AddressLength.DWord;  	NewTag.Start = int.Parse (Regex.Match (address' @"DBD[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (3));  }  
Magic Number,plcdb_lib_siemens_s7,SiemensTag,C:\repos\joncarson_plcdb\plcdb lib siemens s7\SiemensTag.cs,CreateTag,The following statement contains a magic number: NewTag.Start = int.Parse (Regex.Match (address' @"DBX[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (3));  
Magic Number,plcdb_lib_siemens_s7,SiemensTag,C:\repos\joncarson_plcdb\plcdb lib siemens s7\SiemensTag.cs,CreateTag,The following statement contains a magic number: if (AddressType == 'B') {  	NewTag.Length = AddressLength.Byte;  	NewTag.Start = int.Parse (Regex.Match (address' @"DBB[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (3));  }  else if (AddressType == 'W') {  	NewTag.Length = AddressLength.Word;  	NewTag.Start = int.Parse (Regex.Match (address' @"DBW[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (3));  }  else if (AddressType == 'D') {  	NewTag.Length = AddressLength.DWord;  	NewTag.Start = int.Parse (Regex.Match (address' @"DBD[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (3));  }  
Magic Number,plcdb_lib_siemens_s7,SiemensTag,C:\repos\joncarson_plcdb\plcdb lib siemens s7\SiemensTag.cs,CreateTag,The following statement contains a magic number: if (AddressType == 'B') {  	NewTag.Length = AddressLength.Byte;  	NewTag.Start = int.Parse (Regex.Match (address' @"DBB[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (3));  }  else if (AddressType == 'W') {  	NewTag.Length = AddressLength.Word;  	NewTag.Start = int.Parse (Regex.Match (address' @"DBW[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (3));  }  else if (AddressType == 'D') {  	NewTag.Length = AddressLength.DWord;  	NewTag.Start = int.Parse (Regex.Match (address' @"DBD[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (3));  }  
Magic Number,plcdb_lib_siemens_s7,SiemensTag,C:\repos\joncarson_plcdb\plcdb lib siemens s7\SiemensTag.cs,CreateTag,The following statement contains a magic number: if (AddressType == 'B') {  	NewTag.Length = AddressLength.Byte;  	NewTag.Start = int.Parse (Regex.Match (address' @"DBB[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (3));  }  else if (AddressType == 'W') {  	NewTag.Length = AddressLength.Word;  	NewTag.Start = int.Parse (Regex.Match (address' @"DBW[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (3));  }  else if (AddressType == 'D') {  	NewTag.Length = AddressLength.DWord;  	NewTag.Start = int.Parse (Regex.Match (address' @"DBD[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (3));  }  
Magic Number,plcdb_lib_siemens_s7,SiemensTag,C:\repos\joncarson_plcdb\plcdb lib siemens s7\SiemensTag.cs,CreateTag,The following statement contains a magic number: NewTag.Start = int.Parse (Regex.Match (address' @"DBB[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (3));  
Magic Number,plcdb_lib_siemens_s7,SiemensTag,C:\repos\joncarson_plcdb\plcdb lib siemens s7\SiemensTag.cs,CreateTag,The following statement contains a magic number: if (AddressType == 'W') {  	NewTag.Length = AddressLength.Word;  	NewTag.Start = int.Parse (Regex.Match (address' @"DBW[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (3));  }  else if (AddressType == 'D') {  	NewTag.Length = AddressLength.DWord;  	NewTag.Start = int.Parse (Regex.Match (address' @"DBD[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (3));  }  
Magic Number,plcdb_lib_siemens_s7,SiemensTag,C:\repos\joncarson_plcdb\plcdb lib siemens s7\SiemensTag.cs,CreateTag,The following statement contains a magic number: if (AddressType == 'W') {  	NewTag.Length = AddressLength.Word;  	NewTag.Start = int.Parse (Regex.Match (address' @"DBW[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (3));  }  else if (AddressType == 'D') {  	NewTag.Length = AddressLength.DWord;  	NewTag.Start = int.Parse (Regex.Match (address' @"DBD[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (3));  }  
Magic Number,plcdb_lib_siemens_s7,SiemensTag,C:\repos\joncarson_plcdb\plcdb lib siemens s7\SiemensTag.cs,CreateTag,The following statement contains a magic number: NewTag.Start = int.Parse (Regex.Match (address' @"DBW[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (3));  
Magic Number,plcdb_lib_siemens_s7,SiemensTag,C:\repos\joncarson_plcdb\plcdb lib siemens s7\SiemensTag.cs,CreateTag,The following statement contains a magic number: if (AddressType == 'D') {  	NewTag.Length = AddressLength.DWord;  	NewTag.Start = int.Parse (Regex.Match (address' @"DBD[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (3));  }  
Magic Number,plcdb_lib_siemens_s7,SiemensTag,C:\repos\joncarson_plcdb\plcdb lib siemens s7\SiemensTag.cs,CreateTag,The following statement contains a magic number: NewTag.Start = int.Parse (Regex.Match (address' @"DBD[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (3));  
Magic Number,plcdb_lib_siemens_s7,SiemensTag,C:\repos\joncarson_plcdb\plcdb lib siemens s7\SiemensTag.cs,CreateTag,The following statement contains a magic number: if (MRegex.IsMatch (address)) {  	Match AddressTypeMatch = Regex.Match (address' "(MB|MW|MD)");  	if (!AddressTypeMatch.Success) {  		NewTag.Length = AddressLength.Bit;  		NewTag.Start = int.Parse (Regex.Match (address' @"M[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (1));  		NewTag.Bit = int.Parse (Regex.Match (address' @"\.[0-7]").Value.Substring (1));  	}  	else {  		char AddressType = AddressTypeMatch.Value [1];  		if (AddressType == 'B') {  			NewTag.Length = AddressLength.Byte;  			NewTag.Start = int.Parse (Regex.Match (address' @"MB[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  		else if (AddressType == 'W') {  			NewTag.Length = AddressLength.Word;  			NewTag.Start = int.Parse (Regex.Match (address' @"MW[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  		else if (AddressType == 'D') {  			NewTag.Length = AddressLength.DWord;  			NewTag.Start = int.Parse (Regex.Match (address' @"MD[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  	}  }  else if (IRegex.IsMatch (address)) {  	Match AddressTypeMatch = Regex.Match (address' "(IB|IW|ID)");  	if (!AddressTypeMatch.Success) {  		NewTag.Length = AddressLength.Bit;  		NewTag.Start = int.Parse (Regex.Match (address' @"I[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (1));  		NewTag.Bit = int.Parse (Regex.Match (address' @"\.[0-7]").Value.Substring (1));  	}  	else {  		char AddressType = AddressTypeMatch.Value [1];  		if (AddressType == 'B') {  			NewTag.Length = AddressLength.Byte;  			NewTag.Start = int.Parse (Regex.Match (address' @"IB[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  		else if (AddressType == 'W') {  			NewTag.Length = AddressLength.Word;  			NewTag.Start = int.Parse (Regex.Match (address' @"IW[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  		else if (AddressType == 'D') {  			NewTag.Length = AddressLength.DWord;  			NewTag.Start = int.Parse (Regex.Match (address' @"ID[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  	}  }  else if (QRegex.IsMatch (address)) {  	Match AddressTypeMatch = Regex.Match (address' "(QB|QW|QD)");  	if (!AddressTypeMatch.Success) {  		NewTag.Length = AddressLength.Bit;  		NewTag.Start = int.Parse (Regex.Match (address' @"Q[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (1));  		NewTag.Bit = int.Parse (Regex.Match (address' @"\.[0-7]").Value.Substring (1));  	}  	else {  		char AddressType = AddressTypeMatch.Value [1];  		if (AddressType == 'B') {  			NewTag.Length = AddressLength.Byte;  			NewTag.Start = int.Parse (Regex.Match (address' @"QB[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  		else if (AddressType == 'W') {  			NewTag.Length = AddressLength.Word;  			NewTag.Start = int.Parse (Regex.Match (address' @"QW[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  		else if (AddressType == 'D') {  			NewTag.Length = AddressLength.DWord;  			NewTag.Start = int.Parse (Regex.Match (address' @"QD[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  	}  }  else if (CRegex.IsMatch (address)) {  	NewTag.Length = AddressLength.Counter;  	NewTag.Start = int.Parse (Regex.Match (address' @"C[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (1));  }  else if (TRegex.IsMatch (address)) {  	NewTag.Length = AddressLength.Timer;  	NewTag.Start = int.Parse (Regex.Match (address' @"T[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (1));  }  else {  	return null;  }  
Magic Number,plcdb_lib_siemens_s7,SiemensTag,C:\repos\joncarson_plcdb\plcdb lib siemens s7\SiemensTag.cs,CreateTag,The following statement contains a magic number: if (MRegex.IsMatch (address)) {  	Match AddressTypeMatch = Regex.Match (address' "(MB|MW|MD)");  	if (!AddressTypeMatch.Success) {  		NewTag.Length = AddressLength.Bit;  		NewTag.Start = int.Parse (Regex.Match (address' @"M[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (1));  		NewTag.Bit = int.Parse (Regex.Match (address' @"\.[0-7]").Value.Substring (1));  	}  	else {  		char AddressType = AddressTypeMatch.Value [1];  		if (AddressType == 'B') {  			NewTag.Length = AddressLength.Byte;  			NewTag.Start = int.Parse (Regex.Match (address' @"MB[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  		else if (AddressType == 'W') {  			NewTag.Length = AddressLength.Word;  			NewTag.Start = int.Parse (Regex.Match (address' @"MW[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  		else if (AddressType == 'D') {  			NewTag.Length = AddressLength.DWord;  			NewTag.Start = int.Parse (Regex.Match (address' @"MD[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  	}  }  else if (IRegex.IsMatch (address)) {  	Match AddressTypeMatch = Regex.Match (address' "(IB|IW|ID)");  	if (!AddressTypeMatch.Success) {  		NewTag.Length = AddressLength.Bit;  		NewTag.Start = int.Parse (Regex.Match (address' @"I[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (1));  		NewTag.Bit = int.Parse (Regex.Match (address' @"\.[0-7]").Value.Substring (1));  	}  	else {  		char AddressType = AddressTypeMatch.Value [1];  		if (AddressType == 'B') {  			NewTag.Length = AddressLength.Byte;  			NewTag.Start = int.Parse (Regex.Match (address' @"IB[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  		else if (AddressType == 'W') {  			NewTag.Length = AddressLength.Word;  			NewTag.Start = int.Parse (Regex.Match (address' @"IW[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  		else if (AddressType == 'D') {  			NewTag.Length = AddressLength.DWord;  			NewTag.Start = int.Parse (Regex.Match (address' @"ID[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  	}  }  else if (QRegex.IsMatch (address)) {  	Match AddressTypeMatch = Regex.Match (address' "(QB|QW|QD)");  	if (!AddressTypeMatch.Success) {  		NewTag.Length = AddressLength.Bit;  		NewTag.Start = int.Parse (Regex.Match (address' @"Q[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (1));  		NewTag.Bit = int.Parse (Regex.Match (address' @"\.[0-7]").Value.Substring (1));  	}  	else {  		char AddressType = AddressTypeMatch.Value [1];  		if (AddressType == 'B') {  			NewTag.Length = AddressLength.Byte;  			NewTag.Start = int.Parse (Regex.Match (address' @"QB[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  		else if (AddressType == 'W') {  			NewTag.Length = AddressLength.Word;  			NewTag.Start = int.Parse (Regex.Match (address' @"QW[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  		else if (AddressType == 'D') {  			NewTag.Length = AddressLength.DWord;  			NewTag.Start = int.Parse (Regex.Match (address' @"QD[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  	}  }  else if (CRegex.IsMatch (address)) {  	NewTag.Length = AddressLength.Counter;  	NewTag.Start = int.Parse (Regex.Match (address' @"C[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (1));  }  else if (TRegex.IsMatch (address)) {  	NewTag.Length = AddressLength.Timer;  	NewTag.Start = int.Parse (Regex.Match (address' @"T[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (1));  }  else {  	return null;  }  
Magic Number,plcdb_lib_siemens_s7,SiemensTag,C:\repos\joncarson_plcdb\plcdb lib siemens s7\SiemensTag.cs,CreateTag,The following statement contains a magic number: if (MRegex.IsMatch (address)) {  	Match AddressTypeMatch = Regex.Match (address' "(MB|MW|MD)");  	if (!AddressTypeMatch.Success) {  		NewTag.Length = AddressLength.Bit;  		NewTag.Start = int.Parse (Regex.Match (address' @"M[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (1));  		NewTag.Bit = int.Parse (Regex.Match (address' @"\.[0-7]").Value.Substring (1));  	}  	else {  		char AddressType = AddressTypeMatch.Value [1];  		if (AddressType == 'B') {  			NewTag.Length = AddressLength.Byte;  			NewTag.Start = int.Parse (Regex.Match (address' @"MB[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  		else if (AddressType == 'W') {  			NewTag.Length = AddressLength.Word;  			NewTag.Start = int.Parse (Regex.Match (address' @"MW[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  		else if (AddressType == 'D') {  			NewTag.Length = AddressLength.DWord;  			NewTag.Start = int.Parse (Regex.Match (address' @"MD[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  	}  }  else if (IRegex.IsMatch (address)) {  	Match AddressTypeMatch = Regex.Match (address' "(IB|IW|ID)");  	if (!AddressTypeMatch.Success) {  		NewTag.Length = AddressLength.Bit;  		NewTag.Start = int.Parse (Regex.Match (address' @"I[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (1));  		NewTag.Bit = int.Parse (Regex.Match (address' @"\.[0-7]").Value.Substring (1));  	}  	else {  		char AddressType = AddressTypeMatch.Value [1];  		if (AddressType == 'B') {  			NewTag.Length = AddressLength.Byte;  			NewTag.Start = int.Parse (Regex.Match (address' @"IB[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  		else if (AddressType == 'W') {  			NewTag.Length = AddressLength.Word;  			NewTag.Start = int.Parse (Regex.Match (address' @"IW[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  		else if (AddressType == 'D') {  			NewTag.Length = AddressLength.DWord;  			NewTag.Start = int.Parse (Regex.Match (address' @"ID[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  	}  }  else if (QRegex.IsMatch (address)) {  	Match AddressTypeMatch = Regex.Match (address' "(QB|QW|QD)");  	if (!AddressTypeMatch.Success) {  		NewTag.Length = AddressLength.Bit;  		NewTag.Start = int.Parse (Regex.Match (address' @"Q[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (1));  		NewTag.Bit = int.Parse (Regex.Match (address' @"\.[0-7]").Value.Substring (1));  	}  	else {  		char AddressType = AddressTypeMatch.Value [1];  		if (AddressType == 'B') {  			NewTag.Length = AddressLength.Byte;  			NewTag.Start = int.Parse (Regex.Match (address' @"QB[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  		else if (AddressType == 'W') {  			NewTag.Length = AddressLength.Word;  			NewTag.Start = int.Parse (Regex.Match (address' @"QW[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  		else if (AddressType == 'D') {  			NewTag.Length = AddressLength.DWord;  			NewTag.Start = int.Parse (Regex.Match (address' @"QD[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  	}  }  else if (CRegex.IsMatch (address)) {  	NewTag.Length = AddressLength.Counter;  	NewTag.Start = int.Parse (Regex.Match (address' @"C[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (1));  }  else if (TRegex.IsMatch (address)) {  	NewTag.Length = AddressLength.Timer;  	NewTag.Start = int.Parse (Regex.Match (address' @"T[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (1));  }  else {  	return null;  }  
Magic Number,plcdb_lib_siemens_s7,SiemensTag,C:\repos\joncarson_plcdb\plcdb lib siemens s7\SiemensTag.cs,CreateTag,The following statement contains a magic number: if (MRegex.IsMatch (address)) {  	Match AddressTypeMatch = Regex.Match (address' "(MB|MW|MD)");  	if (!AddressTypeMatch.Success) {  		NewTag.Length = AddressLength.Bit;  		NewTag.Start = int.Parse (Regex.Match (address' @"M[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (1));  		NewTag.Bit = int.Parse (Regex.Match (address' @"\.[0-7]").Value.Substring (1));  	}  	else {  		char AddressType = AddressTypeMatch.Value [1];  		if (AddressType == 'B') {  			NewTag.Length = AddressLength.Byte;  			NewTag.Start = int.Parse (Regex.Match (address' @"MB[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  		else if (AddressType == 'W') {  			NewTag.Length = AddressLength.Word;  			NewTag.Start = int.Parse (Regex.Match (address' @"MW[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  		else if (AddressType == 'D') {  			NewTag.Length = AddressLength.DWord;  			NewTag.Start = int.Parse (Regex.Match (address' @"MD[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  	}  }  else if (IRegex.IsMatch (address)) {  	Match AddressTypeMatch = Regex.Match (address' "(IB|IW|ID)");  	if (!AddressTypeMatch.Success) {  		NewTag.Length = AddressLength.Bit;  		NewTag.Start = int.Parse (Regex.Match (address' @"I[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (1));  		NewTag.Bit = int.Parse (Regex.Match (address' @"\.[0-7]").Value.Substring (1));  	}  	else {  		char AddressType = AddressTypeMatch.Value [1];  		if (AddressType == 'B') {  			NewTag.Length = AddressLength.Byte;  			NewTag.Start = int.Parse (Regex.Match (address' @"IB[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  		else if (AddressType == 'W') {  			NewTag.Length = AddressLength.Word;  			NewTag.Start = int.Parse (Regex.Match (address' @"IW[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  		else if (AddressType == 'D') {  			NewTag.Length = AddressLength.DWord;  			NewTag.Start = int.Parse (Regex.Match (address' @"ID[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  	}  }  else if (QRegex.IsMatch (address)) {  	Match AddressTypeMatch = Regex.Match (address' "(QB|QW|QD)");  	if (!AddressTypeMatch.Success) {  		NewTag.Length = AddressLength.Bit;  		NewTag.Start = int.Parse (Regex.Match (address' @"Q[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (1));  		NewTag.Bit = int.Parse (Regex.Match (address' @"\.[0-7]").Value.Substring (1));  	}  	else {  		char AddressType = AddressTypeMatch.Value [1];  		if (AddressType == 'B') {  			NewTag.Length = AddressLength.Byte;  			NewTag.Start = int.Parse (Regex.Match (address' @"QB[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  		else if (AddressType == 'W') {  			NewTag.Length = AddressLength.Word;  			NewTag.Start = int.Parse (Regex.Match (address' @"QW[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  		else if (AddressType == 'D') {  			NewTag.Length = AddressLength.DWord;  			NewTag.Start = int.Parse (Regex.Match (address' @"QD[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  	}  }  else if (CRegex.IsMatch (address)) {  	NewTag.Length = AddressLength.Counter;  	NewTag.Start = int.Parse (Regex.Match (address' @"C[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (1));  }  else if (TRegex.IsMatch (address)) {  	NewTag.Length = AddressLength.Timer;  	NewTag.Start = int.Parse (Regex.Match (address' @"T[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (1));  }  else {  	return null;  }  
Magic Number,plcdb_lib_siemens_s7,SiemensTag,C:\repos\joncarson_plcdb\plcdb lib siemens s7\SiemensTag.cs,CreateTag,The following statement contains a magic number: if (MRegex.IsMatch (address)) {  	Match AddressTypeMatch = Regex.Match (address' "(MB|MW|MD)");  	if (!AddressTypeMatch.Success) {  		NewTag.Length = AddressLength.Bit;  		NewTag.Start = int.Parse (Regex.Match (address' @"M[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (1));  		NewTag.Bit = int.Parse (Regex.Match (address' @"\.[0-7]").Value.Substring (1));  	}  	else {  		char AddressType = AddressTypeMatch.Value [1];  		if (AddressType == 'B') {  			NewTag.Length = AddressLength.Byte;  			NewTag.Start = int.Parse (Regex.Match (address' @"MB[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  		else if (AddressType == 'W') {  			NewTag.Length = AddressLength.Word;  			NewTag.Start = int.Parse (Regex.Match (address' @"MW[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  		else if (AddressType == 'D') {  			NewTag.Length = AddressLength.DWord;  			NewTag.Start = int.Parse (Regex.Match (address' @"MD[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  	}  }  else if (IRegex.IsMatch (address)) {  	Match AddressTypeMatch = Regex.Match (address' "(IB|IW|ID)");  	if (!AddressTypeMatch.Success) {  		NewTag.Length = AddressLength.Bit;  		NewTag.Start = int.Parse (Regex.Match (address' @"I[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (1));  		NewTag.Bit = int.Parse (Regex.Match (address' @"\.[0-7]").Value.Substring (1));  	}  	else {  		char AddressType = AddressTypeMatch.Value [1];  		if (AddressType == 'B') {  			NewTag.Length = AddressLength.Byte;  			NewTag.Start = int.Parse (Regex.Match (address' @"IB[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  		else if (AddressType == 'W') {  			NewTag.Length = AddressLength.Word;  			NewTag.Start = int.Parse (Regex.Match (address' @"IW[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  		else if (AddressType == 'D') {  			NewTag.Length = AddressLength.DWord;  			NewTag.Start = int.Parse (Regex.Match (address' @"ID[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  	}  }  else if (QRegex.IsMatch (address)) {  	Match AddressTypeMatch = Regex.Match (address' "(QB|QW|QD)");  	if (!AddressTypeMatch.Success) {  		NewTag.Length = AddressLength.Bit;  		NewTag.Start = int.Parse (Regex.Match (address' @"Q[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (1));  		NewTag.Bit = int.Parse (Regex.Match (address' @"\.[0-7]").Value.Substring (1));  	}  	else {  		char AddressType = AddressTypeMatch.Value [1];  		if (AddressType == 'B') {  			NewTag.Length = AddressLength.Byte;  			NewTag.Start = int.Parse (Regex.Match (address' @"QB[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  		else if (AddressType == 'W') {  			NewTag.Length = AddressLength.Word;  			NewTag.Start = int.Parse (Regex.Match (address' @"QW[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  		else if (AddressType == 'D') {  			NewTag.Length = AddressLength.DWord;  			NewTag.Start = int.Parse (Regex.Match (address' @"QD[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  	}  }  else if (CRegex.IsMatch (address)) {  	NewTag.Length = AddressLength.Counter;  	NewTag.Start = int.Parse (Regex.Match (address' @"C[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (1));  }  else if (TRegex.IsMatch (address)) {  	NewTag.Length = AddressLength.Timer;  	NewTag.Start = int.Parse (Regex.Match (address' @"T[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (1));  }  else {  	return null;  }  
Magic Number,plcdb_lib_siemens_s7,SiemensTag,C:\repos\joncarson_plcdb\plcdb lib siemens s7\SiemensTag.cs,CreateTag,The following statement contains a magic number: if (MRegex.IsMatch (address)) {  	Match AddressTypeMatch = Regex.Match (address' "(MB|MW|MD)");  	if (!AddressTypeMatch.Success) {  		NewTag.Length = AddressLength.Bit;  		NewTag.Start = int.Parse (Regex.Match (address' @"M[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (1));  		NewTag.Bit = int.Parse (Regex.Match (address' @"\.[0-7]").Value.Substring (1));  	}  	else {  		char AddressType = AddressTypeMatch.Value [1];  		if (AddressType == 'B') {  			NewTag.Length = AddressLength.Byte;  			NewTag.Start = int.Parse (Regex.Match (address' @"MB[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  		else if (AddressType == 'W') {  			NewTag.Length = AddressLength.Word;  			NewTag.Start = int.Parse (Regex.Match (address' @"MW[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  		else if (AddressType == 'D') {  			NewTag.Length = AddressLength.DWord;  			NewTag.Start = int.Parse (Regex.Match (address' @"MD[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  	}  }  else if (IRegex.IsMatch (address)) {  	Match AddressTypeMatch = Regex.Match (address' "(IB|IW|ID)");  	if (!AddressTypeMatch.Success) {  		NewTag.Length = AddressLength.Bit;  		NewTag.Start = int.Parse (Regex.Match (address' @"I[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (1));  		NewTag.Bit = int.Parse (Regex.Match (address' @"\.[0-7]").Value.Substring (1));  	}  	else {  		char AddressType = AddressTypeMatch.Value [1];  		if (AddressType == 'B') {  			NewTag.Length = AddressLength.Byte;  			NewTag.Start = int.Parse (Regex.Match (address' @"IB[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  		else if (AddressType == 'W') {  			NewTag.Length = AddressLength.Word;  			NewTag.Start = int.Parse (Regex.Match (address' @"IW[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  		else if (AddressType == 'D') {  			NewTag.Length = AddressLength.DWord;  			NewTag.Start = int.Parse (Regex.Match (address' @"ID[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  	}  }  else if (QRegex.IsMatch (address)) {  	Match AddressTypeMatch = Regex.Match (address' "(QB|QW|QD)");  	if (!AddressTypeMatch.Success) {  		NewTag.Length = AddressLength.Bit;  		NewTag.Start = int.Parse (Regex.Match (address' @"Q[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (1));  		NewTag.Bit = int.Parse (Regex.Match (address' @"\.[0-7]").Value.Substring (1));  	}  	else {  		char AddressType = AddressTypeMatch.Value [1];  		if (AddressType == 'B') {  			NewTag.Length = AddressLength.Byte;  			NewTag.Start = int.Parse (Regex.Match (address' @"QB[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  		else if (AddressType == 'W') {  			NewTag.Length = AddressLength.Word;  			NewTag.Start = int.Parse (Regex.Match (address' @"QW[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  		else if (AddressType == 'D') {  			NewTag.Length = AddressLength.DWord;  			NewTag.Start = int.Parse (Regex.Match (address' @"QD[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  	}  }  else if (CRegex.IsMatch (address)) {  	NewTag.Length = AddressLength.Counter;  	NewTag.Start = int.Parse (Regex.Match (address' @"C[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (1));  }  else if (TRegex.IsMatch (address)) {  	NewTag.Length = AddressLength.Timer;  	NewTag.Start = int.Parse (Regex.Match (address' @"T[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (1));  }  else {  	return null;  }  
Magic Number,plcdb_lib_siemens_s7,SiemensTag,C:\repos\joncarson_plcdb\plcdb lib siemens s7\SiemensTag.cs,CreateTag,The following statement contains a magic number: if (MRegex.IsMatch (address)) {  	Match AddressTypeMatch = Regex.Match (address' "(MB|MW|MD)");  	if (!AddressTypeMatch.Success) {  		NewTag.Length = AddressLength.Bit;  		NewTag.Start = int.Parse (Regex.Match (address' @"M[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (1));  		NewTag.Bit = int.Parse (Regex.Match (address' @"\.[0-7]").Value.Substring (1));  	}  	else {  		char AddressType = AddressTypeMatch.Value [1];  		if (AddressType == 'B') {  			NewTag.Length = AddressLength.Byte;  			NewTag.Start = int.Parse (Regex.Match (address' @"MB[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  		else if (AddressType == 'W') {  			NewTag.Length = AddressLength.Word;  			NewTag.Start = int.Parse (Regex.Match (address' @"MW[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  		else if (AddressType == 'D') {  			NewTag.Length = AddressLength.DWord;  			NewTag.Start = int.Parse (Regex.Match (address' @"MD[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  	}  }  else if (IRegex.IsMatch (address)) {  	Match AddressTypeMatch = Regex.Match (address' "(IB|IW|ID)");  	if (!AddressTypeMatch.Success) {  		NewTag.Length = AddressLength.Bit;  		NewTag.Start = int.Parse (Regex.Match (address' @"I[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (1));  		NewTag.Bit = int.Parse (Regex.Match (address' @"\.[0-7]").Value.Substring (1));  	}  	else {  		char AddressType = AddressTypeMatch.Value [1];  		if (AddressType == 'B') {  			NewTag.Length = AddressLength.Byte;  			NewTag.Start = int.Parse (Regex.Match (address' @"IB[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  		else if (AddressType == 'W') {  			NewTag.Length = AddressLength.Word;  			NewTag.Start = int.Parse (Regex.Match (address' @"IW[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  		else if (AddressType == 'D') {  			NewTag.Length = AddressLength.DWord;  			NewTag.Start = int.Parse (Regex.Match (address' @"ID[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  	}  }  else if (QRegex.IsMatch (address)) {  	Match AddressTypeMatch = Regex.Match (address' "(QB|QW|QD)");  	if (!AddressTypeMatch.Success) {  		NewTag.Length = AddressLength.Bit;  		NewTag.Start = int.Parse (Regex.Match (address' @"Q[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (1));  		NewTag.Bit = int.Parse (Regex.Match (address' @"\.[0-7]").Value.Substring (1));  	}  	else {  		char AddressType = AddressTypeMatch.Value [1];  		if (AddressType == 'B') {  			NewTag.Length = AddressLength.Byte;  			NewTag.Start = int.Parse (Regex.Match (address' @"QB[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  		else if (AddressType == 'W') {  			NewTag.Length = AddressLength.Word;  			NewTag.Start = int.Parse (Regex.Match (address' @"QW[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  		else if (AddressType == 'D') {  			NewTag.Length = AddressLength.DWord;  			NewTag.Start = int.Parse (Regex.Match (address' @"QD[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  	}  }  else if (CRegex.IsMatch (address)) {  	NewTag.Length = AddressLength.Counter;  	NewTag.Start = int.Parse (Regex.Match (address' @"C[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (1));  }  else if (TRegex.IsMatch (address)) {  	NewTag.Length = AddressLength.Timer;  	NewTag.Start = int.Parse (Regex.Match (address' @"T[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (1));  }  else {  	return null;  }  
Magic Number,plcdb_lib_siemens_s7,SiemensTag,C:\repos\joncarson_plcdb\plcdb lib siemens s7\SiemensTag.cs,CreateTag,The following statement contains a magic number: if (MRegex.IsMatch (address)) {  	Match AddressTypeMatch = Regex.Match (address' "(MB|MW|MD)");  	if (!AddressTypeMatch.Success) {  		NewTag.Length = AddressLength.Bit;  		NewTag.Start = int.Parse (Regex.Match (address' @"M[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (1));  		NewTag.Bit = int.Parse (Regex.Match (address' @"\.[0-7]").Value.Substring (1));  	}  	else {  		char AddressType = AddressTypeMatch.Value [1];  		if (AddressType == 'B') {  			NewTag.Length = AddressLength.Byte;  			NewTag.Start = int.Parse (Regex.Match (address' @"MB[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  		else if (AddressType == 'W') {  			NewTag.Length = AddressLength.Word;  			NewTag.Start = int.Parse (Regex.Match (address' @"MW[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  		else if (AddressType == 'D') {  			NewTag.Length = AddressLength.DWord;  			NewTag.Start = int.Parse (Regex.Match (address' @"MD[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  	}  }  else if (IRegex.IsMatch (address)) {  	Match AddressTypeMatch = Regex.Match (address' "(IB|IW|ID)");  	if (!AddressTypeMatch.Success) {  		NewTag.Length = AddressLength.Bit;  		NewTag.Start = int.Parse (Regex.Match (address' @"I[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (1));  		NewTag.Bit = int.Parse (Regex.Match (address' @"\.[0-7]").Value.Substring (1));  	}  	else {  		char AddressType = AddressTypeMatch.Value [1];  		if (AddressType == 'B') {  			NewTag.Length = AddressLength.Byte;  			NewTag.Start = int.Parse (Regex.Match (address' @"IB[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  		else if (AddressType == 'W') {  			NewTag.Length = AddressLength.Word;  			NewTag.Start = int.Parse (Regex.Match (address' @"IW[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  		else if (AddressType == 'D') {  			NewTag.Length = AddressLength.DWord;  			NewTag.Start = int.Parse (Regex.Match (address' @"ID[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  	}  }  else if (QRegex.IsMatch (address)) {  	Match AddressTypeMatch = Regex.Match (address' "(QB|QW|QD)");  	if (!AddressTypeMatch.Success) {  		NewTag.Length = AddressLength.Bit;  		NewTag.Start = int.Parse (Regex.Match (address' @"Q[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (1));  		NewTag.Bit = int.Parse (Regex.Match (address' @"\.[0-7]").Value.Substring (1));  	}  	else {  		char AddressType = AddressTypeMatch.Value [1];  		if (AddressType == 'B') {  			NewTag.Length = AddressLength.Byte;  			NewTag.Start = int.Parse (Regex.Match (address' @"QB[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  		else if (AddressType == 'W') {  			NewTag.Length = AddressLength.Word;  			NewTag.Start = int.Parse (Regex.Match (address' @"QW[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  		else if (AddressType == 'D') {  			NewTag.Length = AddressLength.DWord;  			NewTag.Start = int.Parse (Regex.Match (address' @"QD[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  	}  }  else if (CRegex.IsMatch (address)) {  	NewTag.Length = AddressLength.Counter;  	NewTag.Start = int.Parse (Regex.Match (address' @"C[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (1));  }  else if (TRegex.IsMatch (address)) {  	NewTag.Length = AddressLength.Timer;  	NewTag.Start = int.Parse (Regex.Match (address' @"T[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (1));  }  else {  	return null;  }  
Magic Number,plcdb_lib_siemens_s7,SiemensTag,C:\repos\joncarson_plcdb\plcdb lib siemens s7\SiemensTag.cs,CreateTag,The following statement contains a magic number: if (MRegex.IsMatch (address)) {  	Match AddressTypeMatch = Regex.Match (address' "(MB|MW|MD)");  	if (!AddressTypeMatch.Success) {  		NewTag.Length = AddressLength.Bit;  		NewTag.Start = int.Parse (Regex.Match (address' @"M[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (1));  		NewTag.Bit = int.Parse (Regex.Match (address' @"\.[0-7]").Value.Substring (1));  	}  	else {  		char AddressType = AddressTypeMatch.Value [1];  		if (AddressType == 'B') {  			NewTag.Length = AddressLength.Byte;  			NewTag.Start = int.Parse (Regex.Match (address' @"MB[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  		else if (AddressType == 'W') {  			NewTag.Length = AddressLength.Word;  			NewTag.Start = int.Parse (Regex.Match (address' @"MW[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  		else if (AddressType == 'D') {  			NewTag.Length = AddressLength.DWord;  			NewTag.Start = int.Parse (Regex.Match (address' @"MD[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  	}  }  else if (IRegex.IsMatch (address)) {  	Match AddressTypeMatch = Regex.Match (address' "(IB|IW|ID)");  	if (!AddressTypeMatch.Success) {  		NewTag.Length = AddressLength.Bit;  		NewTag.Start = int.Parse (Regex.Match (address' @"I[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (1));  		NewTag.Bit = int.Parse (Regex.Match (address' @"\.[0-7]").Value.Substring (1));  	}  	else {  		char AddressType = AddressTypeMatch.Value [1];  		if (AddressType == 'B') {  			NewTag.Length = AddressLength.Byte;  			NewTag.Start = int.Parse (Regex.Match (address' @"IB[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  		else if (AddressType == 'W') {  			NewTag.Length = AddressLength.Word;  			NewTag.Start = int.Parse (Regex.Match (address' @"IW[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  		else if (AddressType == 'D') {  			NewTag.Length = AddressLength.DWord;  			NewTag.Start = int.Parse (Regex.Match (address' @"ID[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  	}  }  else if (QRegex.IsMatch (address)) {  	Match AddressTypeMatch = Regex.Match (address' "(QB|QW|QD)");  	if (!AddressTypeMatch.Success) {  		NewTag.Length = AddressLength.Bit;  		NewTag.Start = int.Parse (Regex.Match (address' @"Q[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (1));  		NewTag.Bit = int.Parse (Regex.Match (address' @"\.[0-7]").Value.Substring (1));  	}  	else {  		char AddressType = AddressTypeMatch.Value [1];  		if (AddressType == 'B') {  			NewTag.Length = AddressLength.Byte;  			NewTag.Start = int.Parse (Regex.Match (address' @"QB[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  		else if (AddressType == 'W') {  			NewTag.Length = AddressLength.Word;  			NewTag.Start = int.Parse (Regex.Match (address' @"QW[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  		else if (AddressType == 'D') {  			NewTag.Length = AddressLength.DWord;  			NewTag.Start = int.Parse (Regex.Match (address' @"QD[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  	}  }  else if (CRegex.IsMatch (address)) {  	NewTag.Length = AddressLength.Counter;  	NewTag.Start = int.Parse (Regex.Match (address' @"C[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (1));  }  else if (TRegex.IsMatch (address)) {  	NewTag.Length = AddressLength.Timer;  	NewTag.Start = int.Parse (Regex.Match (address' @"T[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (1));  }  else {  	return null;  }  
Magic Number,plcdb_lib_siemens_s7,SiemensTag,C:\repos\joncarson_plcdb\plcdb lib siemens s7\SiemensTag.cs,CreateTag,The following statement contains a magic number: if (!AddressTypeMatch.Success) {  	NewTag.Length = AddressLength.Bit;  	NewTag.Start = int.Parse (Regex.Match (address' @"M[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (1));  	NewTag.Bit = int.Parse (Regex.Match (address' @"\.[0-7]").Value.Substring (1));  }  else {  	char AddressType = AddressTypeMatch.Value [1];  	if (AddressType == 'B') {  		NewTag.Length = AddressLength.Byte;  		NewTag.Start = int.Parse (Regex.Match (address' @"MB[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  	}  	else if (AddressType == 'W') {  		NewTag.Length = AddressLength.Word;  		NewTag.Start = int.Parse (Regex.Match (address' @"MW[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  	}  	else if (AddressType == 'D') {  		NewTag.Length = AddressLength.DWord;  		NewTag.Start = int.Parse (Regex.Match (address' @"MD[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  	}  }  
Magic Number,plcdb_lib_siemens_s7,SiemensTag,C:\repos\joncarson_plcdb\plcdb lib siemens s7\SiemensTag.cs,CreateTag,The following statement contains a magic number: if (!AddressTypeMatch.Success) {  	NewTag.Length = AddressLength.Bit;  	NewTag.Start = int.Parse (Regex.Match (address' @"M[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (1));  	NewTag.Bit = int.Parse (Regex.Match (address' @"\.[0-7]").Value.Substring (1));  }  else {  	char AddressType = AddressTypeMatch.Value [1];  	if (AddressType == 'B') {  		NewTag.Length = AddressLength.Byte;  		NewTag.Start = int.Parse (Regex.Match (address' @"MB[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  	}  	else if (AddressType == 'W') {  		NewTag.Length = AddressLength.Word;  		NewTag.Start = int.Parse (Regex.Match (address' @"MW[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  	}  	else if (AddressType == 'D') {  		NewTag.Length = AddressLength.DWord;  		NewTag.Start = int.Parse (Regex.Match (address' @"MD[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  	}  }  
Magic Number,plcdb_lib_siemens_s7,SiemensTag,C:\repos\joncarson_plcdb\plcdb lib siemens s7\SiemensTag.cs,CreateTag,The following statement contains a magic number: if (!AddressTypeMatch.Success) {  	NewTag.Length = AddressLength.Bit;  	NewTag.Start = int.Parse (Regex.Match (address' @"M[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (1));  	NewTag.Bit = int.Parse (Regex.Match (address' @"\.[0-7]").Value.Substring (1));  }  else {  	char AddressType = AddressTypeMatch.Value [1];  	if (AddressType == 'B') {  		NewTag.Length = AddressLength.Byte;  		NewTag.Start = int.Parse (Regex.Match (address' @"MB[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  	}  	else if (AddressType == 'W') {  		NewTag.Length = AddressLength.Word;  		NewTag.Start = int.Parse (Regex.Match (address' @"MW[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  	}  	else if (AddressType == 'D') {  		NewTag.Length = AddressLength.DWord;  		NewTag.Start = int.Parse (Regex.Match (address' @"MD[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  	}  }  
Magic Number,plcdb_lib_siemens_s7,SiemensTag,C:\repos\joncarson_plcdb\plcdb lib siemens s7\SiemensTag.cs,CreateTag,The following statement contains a magic number: if (AddressType == 'B') {  	NewTag.Length = AddressLength.Byte;  	NewTag.Start = int.Parse (Regex.Match (address' @"MB[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  }  else if (AddressType == 'W') {  	NewTag.Length = AddressLength.Word;  	NewTag.Start = int.Parse (Regex.Match (address' @"MW[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  }  else if (AddressType == 'D') {  	NewTag.Length = AddressLength.DWord;  	NewTag.Start = int.Parse (Regex.Match (address' @"MD[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  }  
Magic Number,plcdb_lib_siemens_s7,SiemensTag,C:\repos\joncarson_plcdb\plcdb lib siemens s7\SiemensTag.cs,CreateTag,The following statement contains a magic number: if (AddressType == 'B') {  	NewTag.Length = AddressLength.Byte;  	NewTag.Start = int.Parse (Regex.Match (address' @"MB[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  }  else if (AddressType == 'W') {  	NewTag.Length = AddressLength.Word;  	NewTag.Start = int.Parse (Regex.Match (address' @"MW[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  }  else if (AddressType == 'D') {  	NewTag.Length = AddressLength.DWord;  	NewTag.Start = int.Parse (Regex.Match (address' @"MD[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  }  
Magic Number,plcdb_lib_siemens_s7,SiemensTag,C:\repos\joncarson_plcdb\plcdb lib siemens s7\SiemensTag.cs,CreateTag,The following statement contains a magic number: if (AddressType == 'B') {  	NewTag.Length = AddressLength.Byte;  	NewTag.Start = int.Parse (Regex.Match (address' @"MB[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  }  else if (AddressType == 'W') {  	NewTag.Length = AddressLength.Word;  	NewTag.Start = int.Parse (Regex.Match (address' @"MW[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  }  else if (AddressType == 'D') {  	NewTag.Length = AddressLength.DWord;  	NewTag.Start = int.Parse (Regex.Match (address' @"MD[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  }  
Magic Number,plcdb_lib_siemens_s7,SiemensTag,C:\repos\joncarson_plcdb\plcdb lib siemens s7\SiemensTag.cs,CreateTag,The following statement contains a magic number: NewTag.Start = int.Parse (Regex.Match (address' @"MB[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  
Magic Number,plcdb_lib_siemens_s7,SiemensTag,C:\repos\joncarson_plcdb\plcdb lib siemens s7\SiemensTag.cs,CreateTag,The following statement contains a magic number: if (AddressType == 'W') {  	NewTag.Length = AddressLength.Word;  	NewTag.Start = int.Parse (Regex.Match (address' @"MW[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  }  else if (AddressType == 'D') {  	NewTag.Length = AddressLength.DWord;  	NewTag.Start = int.Parse (Regex.Match (address' @"MD[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  }  
Magic Number,plcdb_lib_siemens_s7,SiemensTag,C:\repos\joncarson_plcdb\plcdb lib siemens s7\SiemensTag.cs,CreateTag,The following statement contains a magic number: if (AddressType == 'W') {  	NewTag.Length = AddressLength.Word;  	NewTag.Start = int.Parse (Regex.Match (address' @"MW[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  }  else if (AddressType == 'D') {  	NewTag.Length = AddressLength.DWord;  	NewTag.Start = int.Parse (Regex.Match (address' @"MD[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  }  
Magic Number,plcdb_lib_siemens_s7,SiemensTag,C:\repos\joncarson_plcdb\plcdb lib siemens s7\SiemensTag.cs,CreateTag,The following statement contains a magic number: NewTag.Start = int.Parse (Regex.Match (address' @"MW[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  
Magic Number,plcdb_lib_siemens_s7,SiemensTag,C:\repos\joncarson_plcdb\plcdb lib siemens s7\SiemensTag.cs,CreateTag,The following statement contains a magic number: if (AddressType == 'D') {  	NewTag.Length = AddressLength.DWord;  	NewTag.Start = int.Parse (Regex.Match (address' @"MD[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  }  
Magic Number,plcdb_lib_siemens_s7,SiemensTag,C:\repos\joncarson_plcdb\plcdb lib siemens s7\SiemensTag.cs,CreateTag,The following statement contains a magic number: NewTag.Start = int.Parse (Regex.Match (address' @"MD[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  
Magic Number,plcdb_lib_siemens_s7,SiemensTag,C:\repos\joncarson_plcdb\plcdb lib siemens s7\SiemensTag.cs,CreateTag,The following statement contains a magic number: if (IRegex.IsMatch (address)) {  	Match AddressTypeMatch = Regex.Match (address' "(IB|IW|ID)");  	if (!AddressTypeMatch.Success) {  		NewTag.Length = AddressLength.Bit;  		NewTag.Start = int.Parse (Regex.Match (address' @"I[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (1));  		NewTag.Bit = int.Parse (Regex.Match (address' @"\.[0-7]").Value.Substring (1));  	}  	else {  		char AddressType = AddressTypeMatch.Value [1];  		if (AddressType == 'B') {  			NewTag.Length = AddressLength.Byte;  			NewTag.Start = int.Parse (Regex.Match (address' @"IB[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  		else if (AddressType == 'W') {  			NewTag.Length = AddressLength.Word;  			NewTag.Start = int.Parse (Regex.Match (address' @"IW[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  		else if (AddressType == 'D') {  			NewTag.Length = AddressLength.DWord;  			NewTag.Start = int.Parse (Regex.Match (address' @"ID[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  	}  }  else if (QRegex.IsMatch (address)) {  	Match AddressTypeMatch = Regex.Match (address' "(QB|QW|QD)");  	if (!AddressTypeMatch.Success) {  		NewTag.Length = AddressLength.Bit;  		NewTag.Start = int.Parse (Regex.Match (address' @"Q[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (1));  		NewTag.Bit = int.Parse (Regex.Match (address' @"\.[0-7]").Value.Substring (1));  	}  	else {  		char AddressType = AddressTypeMatch.Value [1];  		if (AddressType == 'B') {  			NewTag.Length = AddressLength.Byte;  			NewTag.Start = int.Parse (Regex.Match (address' @"QB[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  		else if (AddressType == 'W') {  			NewTag.Length = AddressLength.Word;  			NewTag.Start = int.Parse (Regex.Match (address' @"QW[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  		else if (AddressType == 'D') {  			NewTag.Length = AddressLength.DWord;  			NewTag.Start = int.Parse (Regex.Match (address' @"QD[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  	}  }  else if (CRegex.IsMatch (address)) {  	NewTag.Length = AddressLength.Counter;  	NewTag.Start = int.Parse (Regex.Match (address' @"C[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (1));  }  else if (TRegex.IsMatch (address)) {  	NewTag.Length = AddressLength.Timer;  	NewTag.Start = int.Parse (Regex.Match (address' @"T[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (1));  }  else {  	return null;  }  
Magic Number,plcdb_lib_siemens_s7,SiemensTag,C:\repos\joncarson_plcdb\plcdb lib siemens s7\SiemensTag.cs,CreateTag,The following statement contains a magic number: if (IRegex.IsMatch (address)) {  	Match AddressTypeMatch = Regex.Match (address' "(IB|IW|ID)");  	if (!AddressTypeMatch.Success) {  		NewTag.Length = AddressLength.Bit;  		NewTag.Start = int.Parse (Regex.Match (address' @"I[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (1));  		NewTag.Bit = int.Parse (Regex.Match (address' @"\.[0-7]").Value.Substring (1));  	}  	else {  		char AddressType = AddressTypeMatch.Value [1];  		if (AddressType == 'B') {  			NewTag.Length = AddressLength.Byte;  			NewTag.Start = int.Parse (Regex.Match (address' @"IB[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  		else if (AddressType == 'W') {  			NewTag.Length = AddressLength.Word;  			NewTag.Start = int.Parse (Regex.Match (address' @"IW[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  		else if (AddressType == 'D') {  			NewTag.Length = AddressLength.DWord;  			NewTag.Start = int.Parse (Regex.Match (address' @"ID[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  	}  }  else if (QRegex.IsMatch (address)) {  	Match AddressTypeMatch = Regex.Match (address' "(QB|QW|QD)");  	if (!AddressTypeMatch.Success) {  		NewTag.Length = AddressLength.Bit;  		NewTag.Start = int.Parse (Regex.Match (address' @"Q[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (1));  		NewTag.Bit = int.Parse (Regex.Match (address' @"\.[0-7]").Value.Substring (1));  	}  	else {  		char AddressType = AddressTypeMatch.Value [1];  		if (AddressType == 'B') {  			NewTag.Length = AddressLength.Byte;  			NewTag.Start = int.Parse (Regex.Match (address' @"QB[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  		else if (AddressType == 'W') {  			NewTag.Length = AddressLength.Word;  			NewTag.Start = int.Parse (Regex.Match (address' @"QW[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  		else if (AddressType == 'D') {  			NewTag.Length = AddressLength.DWord;  			NewTag.Start = int.Parse (Regex.Match (address' @"QD[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  	}  }  else if (CRegex.IsMatch (address)) {  	NewTag.Length = AddressLength.Counter;  	NewTag.Start = int.Parse (Regex.Match (address' @"C[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (1));  }  else if (TRegex.IsMatch (address)) {  	NewTag.Length = AddressLength.Timer;  	NewTag.Start = int.Parse (Regex.Match (address' @"T[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (1));  }  else {  	return null;  }  
Magic Number,plcdb_lib_siemens_s7,SiemensTag,C:\repos\joncarson_plcdb\plcdb lib siemens s7\SiemensTag.cs,CreateTag,The following statement contains a magic number: if (IRegex.IsMatch (address)) {  	Match AddressTypeMatch = Regex.Match (address' "(IB|IW|ID)");  	if (!AddressTypeMatch.Success) {  		NewTag.Length = AddressLength.Bit;  		NewTag.Start = int.Parse (Regex.Match (address' @"I[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (1));  		NewTag.Bit = int.Parse (Regex.Match (address' @"\.[0-7]").Value.Substring (1));  	}  	else {  		char AddressType = AddressTypeMatch.Value [1];  		if (AddressType == 'B') {  			NewTag.Length = AddressLength.Byte;  			NewTag.Start = int.Parse (Regex.Match (address' @"IB[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  		else if (AddressType == 'W') {  			NewTag.Length = AddressLength.Word;  			NewTag.Start = int.Parse (Regex.Match (address' @"IW[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  		else if (AddressType == 'D') {  			NewTag.Length = AddressLength.DWord;  			NewTag.Start = int.Parse (Regex.Match (address' @"ID[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  	}  }  else if (QRegex.IsMatch (address)) {  	Match AddressTypeMatch = Regex.Match (address' "(QB|QW|QD)");  	if (!AddressTypeMatch.Success) {  		NewTag.Length = AddressLength.Bit;  		NewTag.Start = int.Parse (Regex.Match (address' @"Q[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (1));  		NewTag.Bit = int.Parse (Regex.Match (address' @"\.[0-7]").Value.Substring (1));  	}  	else {  		char AddressType = AddressTypeMatch.Value [1];  		if (AddressType == 'B') {  			NewTag.Length = AddressLength.Byte;  			NewTag.Start = int.Parse (Regex.Match (address' @"QB[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  		else if (AddressType == 'W') {  			NewTag.Length = AddressLength.Word;  			NewTag.Start = int.Parse (Regex.Match (address' @"QW[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  		else if (AddressType == 'D') {  			NewTag.Length = AddressLength.DWord;  			NewTag.Start = int.Parse (Regex.Match (address' @"QD[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  	}  }  else if (CRegex.IsMatch (address)) {  	NewTag.Length = AddressLength.Counter;  	NewTag.Start = int.Parse (Regex.Match (address' @"C[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (1));  }  else if (TRegex.IsMatch (address)) {  	NewTag.Length = AddressLength.Timer;  	NewTag.Start = int.Parse (Regex.Match (address' @"T[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (1));  }  else {  	return null;  }  
Magic Number,plcdb_lib_siemens_s7,SiemensTag,C:\repos\joncarson_plcdb\plcdb lib siemens s7\SiemensTag.cs,CreateTag,The following statement contains a magic number: if (IRegex.IsMatch (address)) {  	Match AddressTypeMatch = Regex.Match (address' "(IB|IW|ID)");  	if (!AddressTypeMatch.Success) {  		NewTag.Length = AddressLength.Bit;  		NewTag.Start = int.Parse (Regex.Match (address' @"I[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (1));  		NewTag.Bit = int.Parse (Regex.Match (address' @"\.[0-7]").Value.Substring (1));  	}  	else {  		char AddressType = AddressTypeMatch.Value [1];  		if (AddressType == 'B') {  			NewTag.Length = AddressLength.Byte;  			NewTag.Start = int.Parse (Regex.Match (address' @"IB[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  		else if (AddressType == 'W') {  			NewTag.Length = AddressLength.Word;  			NewTag.Start = int.Parse (Regex.Match (address' @"IW[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  		else if (AddressType == 'D') {  			NewTag.Length = AddressLength.DWord;  			NewTag.Start = int.Parse (Regex.Match (address' @"ID[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  	}  }  else if (QRegex.IsMatch (address)) {  	Match AddressTypeMatch = Regex.Match (address' "(QB|QW|QD)");  	if (!AddressTypeMatch.Success) {  		NewTag.Length = AddressLength.Bit;  		NewTag.Start = int.Parse (Regex.Match (address' @"Q[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (1));  		NewTag.Bit = int.Parse (Regex.Match (address' @"\.[0-7]").Value.Substring (1));  	}  	else {  		char AddressType = AddressTypeMatch.Value [1];  		if (AddressType == 'B') {  			NewTag.Length = AddressLength.Byte;  			NewTag.Start = int.Parse (Regex.Match (address' @"QB[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  		else if (AddressType == 'W') {  			NewTag.Length = AddressLength.Word;  			NewTag.Start = int.Parse (Regex.Match (address' @"QW[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  		else if (AddressType == 'D') {  			NewTag.Length = AddressLength.DWord;  			NewTag.Start = int.Parse (Regex.Match (address' @"QD[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  	}  }  else if (CRegex.IsMatch (address)) {  	NewTag.Length = AddressLength.Counter;  	NewTag.Start = int.Parse (Regex.Match (address' @"C[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (1));  }  else if (TRegex.IsMatch (address)) {  	NewTag.Length = AddressLength.Timer;  	NewTag.Start = int.Parse (Regex.Match (address' @"T[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (1));  }  else {  	return null;  }  
Magic Number,plcdb_lib_siemens_s7,SiemensTag,C:\repos\joncarson_plcdb\plcdb lib siemens s7\SiemensTag.cs,CreateTag,The following statement contains a magic number: if (IRegex.IsMatch (address)) {  	Match AddressTypeMatch = Regex.Match (address' "(IB|IW|ID)");  	if (!AddressTypeMatch.Success) {  		NewTag.Length = AddressLength.Bit;  		NewTag.Start = int.Parse (Regex.Match (address' @"I[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (1));  		NewTag.Bit = int.Parse (Regex.Match (address' @"\.[0-7]").Value.Substring (1));  	}  	else {  		char AddressType = AddressTypeMatch.Value [1];  		if (AddressType == 'B') {  			NewTag.Length = AddressLength.Byte;  			NewTag.Start = int.Parse (Regex.Match (address' @"IB[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  		else if (AddressType == 'W') {  			NewTag.Length = AddressLength.Word;  			NewTag.Start = int.Parse (Regex.Match (address' @"IW[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  		else if (AddressType == 'D') {  			NewTag.Length = AddressLength.DWord;  			NewTag.Start = int.Parse (Regex.Match (address' @"ID[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  	}  }  else if (QRegex.IsMatch (address)) {  	Match AddressTypeMatch = Regex.Match (address' "(QB|QW|QD)");  	if (!AddressTypeMatch.Success) {  		NewTag.Length = AddressLength.Bit;  		NewTag.Start = int.Parse (Regex.Match (address' @"Q[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (1));  		NewTag.Bit = int.Parse (Regex.Match (address' @"\.[0-7]").Value.Substring (1));  	}  	else {  		char AddressType = AddressTypeMatch.Value [1];  		if (AddressType == 'B') {  			NewTag.Length = AddressLength.Byte;  			NewTag.Start = int.Parse (Regex.Match (address' @"QB[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  		else if (AddressType == 'W') {  			NewTag.Length = AddressLength.Word;  			NewTag.Start = int.Parse (Regex.Match (address' @"QW[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  		else if (AddressType == 'D') {  			NewTag.Length = AddressLength.DWord;  			NewTag.Start = int.Parse (Regex.Match (address' @"QD[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  	}  }  else if (CRegex.IsMatch (address)) {  	NewTag.Length = AddressLength.Counter;  	NewTag.Start = int.Parse (Regex.Match (address' @"C[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (1));  }  else if (TRegex.IsMatch (address)) {  	NewTag.Length = AddressLength.Timer;  	NewTag.Start = int.Parse (Regex.Match (address' @"T[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (1));  }  else {  	return null;  }  
Magic Number,plcdb_lib_siemens_s7,SiemensTag,C:\repos\joncarson_plcdb\plcdb lib siemens s7\SiemensTag.cs,CreateTag,The following statement contains a magic number: if (IRegex.IsMatch (address)) {  	Match AddressTypeMatch = Regex.Match (address' "(IB|IW|ID)");  	if (!AddressTypeMatch.Success) {  		NewTag.Length = AddressLength.Bit;  		NewTag.Start = int.Parse (Regex.Match (address' @"I[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (1));  		NewTag.Bit = int.Parse (Regex.Match (address' @"\.[0-7]").Value.Substring (1));  	}  	else {  		char AddressType = AddressTypeMatch.Value [1];  		if (AddressType == 'B') {  			NewTag.Length = AddressLength.Byte;  			NewTag.Start = int.Parse (Regex.Match (address' @"IB[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  		else if (AddressType == 'W') {  			NewTag.Length = AddressLength.Word;  			NewTag.Start = int.Parse (Regex.Match (address' @"IW[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  		else if (AddressType == 'D') {  			NewTag.Length = AddressLength.DWord;  			NewTag.Start = int.Parse (Regex.Match (address' @"ID[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  	}  }  else if (QRegex.IsMatch (address)) {  	Match AddressTypeMatch = Regex.Match (address' "(QB|QW|QD)");  	if (!AddressTypeMatch.Success) {  		NewTag.Length = AddressLength.Bit;  		NewTag.Start = int.Parse (Regex.Match (address' @"Q[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (1));  		NewTag.Bit = int.Parse (Regex.Match (address' @"\.[0-7]").Value.Substring (1));  	}  	else {  		char AddressType = AddressTypeMatch.Value [1];  		if (AddressType == 'B') {  			NewTag.Length = AddressLength.Byte;  			NewTag.Start = int.Parse (Regex.Match (address' @"QB[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  		else if (AddressType == 'W') {  			NewTag.Length = AddressLength.Word;  			NewTag.Start = int.Parse (Regex.Match (address' @"QW[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  		else if (AddressType == 'D') {  			NewTag.Length = AddressLength.DWord;  			NewTag.Start = int.Parse (Regex.Match (address' @"QD[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  	}  }  else if (CRegex.IsMatch (address)) {  	NewTag.Length = AddressLength.Counter;  	NewTag.Start = int.Parse (Regex.Match (address' @"C[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (1));  }  else if (TRegex.IsMatch (address)) {  	NewTag.Length = AddressLength.Timer;  	NewTag.Start = int.Parse (Regex.Match (address' @"T[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (1));  }  else {  	return null;  }  
Magic Number,plcdb_lib_siemens_s7,SiemensTag,C:\repos\joncarson_plcdb\plcdb lib siemens s7\SiemensTag.cs,CreateTag,The following statement contains a magic number: if (!AddressTypeMatch.Success) {  	NewTag.Length = AddressLength.Bit;  	NewTag.Start = int.Parse (Regex.Match (address' @"I[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (1));  	NewTag.Bit = int.Parse (Regex.Match (address' @"\.[0-7]").Value.Substring (1));  }  else {  	char AddressType = AddressTypeMatch.Value [1];  	if (AddressType == 'B') {  		NewTag.Length = AddressLength.Byte;  		NewTag.Start = int.Parse (Regex.Match (address' @"IB[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  	}  	else if (AddressType == 'W') {  		NewTag.Length = AddressLength.Word;  		NewTag.Start = int.Parse (Regex.Match (address' @"IW[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  	}  	else if (AddressType == 'D') {  		NewTag.Length = AddressLength.DWord;  		NewTag.Start = int.Parse (Regex.Match (address' @"ID[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  	}  }  
Magic Number,plcdb_lib_siemens_s7,SiemensTag,C:\repos\joncarson_plcdb\plcdb lib siemens s7\SiemensTag.cs,CreateTag,The following statement contains a magic number: if (!AddressTypeMatch.Success) {  	NewTag.Length = AddressLength.Bit;  	NewTag.Start = int.Parse (Regex.Match (address' @"I[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (1));  	NewTag.Bit = int.Parse (Regex.Match (address' @"\.[0-7]").Value.Substring (1));  }  else {  	char AddressType = AddressTypeMatch.Value [1];  	if (AddressType == 'B') {  		NewTag.Length = AddressLength.Byte;  		NewTag.Start = int.Parse (Regex.Match (address' @"IB[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  	}  	else if (AddressType == 'W') {  		NewTag.Length = AddressLength.Word;  		NewTag.Start = int.Parse (Regex.Match (address' @"IW[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  	}  	else if (AddressType == 'D') {  		NewTag.Length = AddressLength.DWord;  		NewTag.Start = int.Parse (Regex.Match (address' @"ID[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  	}  }  
Magic Number,plcdb_lib_siemens_s7,SiemensTag,C:\repos\joncarson_plcdb\plcdb lib siemens s7\SiemensTag.cs,CreateTag,The following statement contains a magic number: if (!AddressTypeMatch.Success) {  	NewTag.Length = AddressLength.Bit;  	NewTag.Start = int.Parse (Regex.Match (address' @"I[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (1));  	NewTag.Bit = int.Parse (Regex.Match (address' @"\.[0-7]").Value.Substring (1));  }  else {  	char AddressType = AddressTypeMatch.Value [1];  	if (AddressType == 'B') {  		NewTag.Length = AddressLength.Byte;  		NewTag.Start = int.Parse (Regex.Match (address' @"IB[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  	}  	else if (AddressType == 'W') {  		NewTag.Length = AddressLength.Word;  		NewTag.Start = int.Parse (Regex.Match (address' @"IW[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  	}  	else if (AddressType == 'D') {  		NewTag.Length = AddressLength.DWord;  		NewTag.Start = int.Parse (Regex.Match (address' @"ID[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  	}  }  
Magic Number,plcdb_lib_siemens_s7,SiemensTag,C:\repos\joncarson_plcdb\plcdb lib siemens s7\SiemensTag.cs,CreateTag,The following statement contains a magic number: if (AddressType == 'B') {  	NewTag.Length = AddressLength.Byte;  	NewTag.Start = int.Parse (Regex.Match (address' @"IB[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  }  else if (AddressType == 'W') {  	NewTag.Length = AddressLength.Word;  	NewTag.Start = int.Parse (Regex.Match (address' @"IW[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  }  else if (AddressType == 'D') {  	NewTag.Length = AddressLength.DWord;  	NewTag.Start = int.Parse (Regex.Match (address' @"ID[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  }  
Magic Number,plcdb_lib_siemens_s7,SiemensTag,C:\repos\joncarson_plcdb\plcdb lib siemens s7\SiemensTag.cs,CreateTag,The following statement contains a magic number: if (AddressType == 'B') {  	NewTag.Length = AddressLength.Byte;  	NewTag.Start = int.Parse (Regex.Match (address' @"IB[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  }  else if (AddressType == 'W') {  	NewTag.Length = AddressLength.Word;  	NewTag.Start = int.Parse (Regex.Match (address' @"IW[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  }  else if (AddressType == 'D') {  	NewTag.Length = AddressLength.DWord;  	NewTag.Start = int.Parse (Regex.Match (address' @"ID[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  }  
Magic Number,plcdb_lib_siemens_s7,SiemensTag,C:\repos\joncarson_plcdb\plcdb lib siemens s7\SiemensTag.cs,CreateTag,The following statement contains a magic number: if (AddressType == 'B') {  	NewTag.Length = AddressLength.Byte;  	NewTag.Start = int.Parse (Regex.Match (address' @"IB[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  }  else if (AddressType == 'W') {  	NewTag.Length = AddressLength.Word;  	NewTag.Start = int.Parse (Regex.Match (address' @"IW[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  }  else if (AddressType == 'D') {  	NewTag.Length = AddressLength.DWord;  	NewTag.Start = int.Parse (Regex.Match (address' @"ID[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  }  
Magic Number,plcdb_lib_siemens_s7,SiemensTag,C:\repos\joncarson_plcdb\plcdb lib siemens s7\SiemensTag.cs,CreateTag,The following statement contains a magic number: NewTag.Start = int.Parse (Regex.Match (address' @"IB[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  
Magic Number,plcdb_lib_siemens_s7,SiemensTag,C:\repos\joncarson_plcdb\plcdb lib siemens s7\SiemensTag.cs,CreateTag,The following statement contains a magic number: if (AddressType == 'W') {  	NewTag.Length = AddressLength.Word;  	NewTag.Start = int.Parse (Regex.Match (address' @"IW[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  }  else if (AddressType == 'D') {  	NewTag.Length = AddressLength.DWord;  	NewTag.Start = int.Parse (Regex.Match (address' @"ID[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  }  
Magic Number,plcdb_lib_siemens_s7,SiemensTag,C:\repos\joncarson_plcdb\plcdb lib siemens s7\SiemensTag.cs,CreateTag,The following statement contains a magic number: if (AddressType == 'W') {  	NewTag.Length = AddressLength.Word;  	NewTag.Start = int.Parse (Regex.Match (address' @"IW[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  }  else if (AddressType == 'D') {  	NewTag.Length = AddressLength.DWord;  	NewTag.Start = int.Parse (Regex.Match (address' @"ID[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  }  
Magic Number,plcdb_lib_siemens_s7,SiemensTag,C:\repos\joncarson_plcdb\plcdb lib siemens s7\SiemensTag.cs,CreateTag,The following statement contains a magic number: NewTag.Start = int.Parse (Regex.Match (address' @"IW[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  
Magic Number,plcdb_lib_siemens_s7,SiemensTag,C:\repos\joncarson_plcdb\plcdb lib siemens s7\SiemensTag.cs,CreateTag,The following statement contains a magic number: if (AddressType == 'D') {  	NewTag.Length = AddressLength.DWord;  	NewTag.Start = int.Parse (Regex.Match (address' @"ID[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  }  
Magic Number,plcdb_lib_siemens_s7,SiemensTag,C:\repos\joncarson_plcdb\plcdb lib siemens s7\SiemensTag.cs,CreateTag,The following statement contains a magic number: NewTag.Start = int.Parse (Regex.Match (address' @"ID[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  
Magic Number,plcdb_lib_siemens_s7,SiemensTag,C:\repos\joncarson_plcdb\plcdb lib siemens s7\SiemensTag.cs,CreateTag,The following statement contains a magic number: if (QRegex.IsMatch (address)) {  	Match AddressTypeMatch = Regex.Match (address' "(QB|QW|QD)");  	if (!AddressTypeMatch.Success) {  		NewTag.Length = AddressLength.Bit;  		NewTag.Start = int.Parse (Regex.Match (address' @"Q[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (1));  		NewTag.Bit = int.Parse (Regex.Match (address' @"\.[0-7]").Value.Substring (1));  	}  	else {  		char AddressType = AddressTypeMatch.Value [1];  		if (AddressType == 'B') {  			NewTag.Length = AddressLength.Byte;  			NewTag.Start = int.Parse (Regex.Match (address' @"QB[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  		else if (AddressType == 'W') {  			NewTag.Length = AddressLength.Word;  			NewTag.Start = int.Parse (Regex.Match (address' @"QW[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  		else if (AddressType == 'D') {  			NewTag.Length = AddressLength.DWord;  			NewTag.Start = int.Parse (Regex.Match (address' @"QD[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  	}  }  else if (CRegex.IsMatch (address)) {  	NewTag.Length = AddressLength.Counter;  	NewTag.Start = int.Parse (Regex.Match (address' @"C[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (1));  }  else if (TRegex.IsMatch (address)) {  	NewTag.Length = AddressLength.Timer;  	NewTag.Start = int.Parse (Regex.Match (address' @"T[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (1));  }  else {  	return null;  }  
Magic Number,plcdb_lib_siemens_s7,SiemensTag,C:\repos\joncarson_plcdb\plcdb lib siemens s7\SiemensTag.cs,CreateTag,The following statement contains a magic number: if (QRegex.IsMatch (address)) {  	Match AddressTypeMatch = Regex.Match (address' "(QB|QW|QD)");  	if (!AddressTypeMatch.Success) {  		NewTag.Length = AddressLength.Bit;  		NewTag.Start = int.Parse (Regex.Match (address' @"Q[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (1));  		NewTag.Bit = int.Parse (Regex.Match (address' @"\.[0-7]").Value.Substring (1));  	}  	else {  		char AddressType = AddressTypeMatch.Value [1];  		if (AddressType == 'B') {  			NewTag.Length = AddressLength.Byte;  			NewTag.Start = int.Parse (Regex.Match (address' @"QB[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  		else if (AddressType == 'W') {  			NewTag.Length = AddressLength.Word;  			NewTag.Start = int.Parse (Regex.Match (address' @"QW[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  		else if (AddressType == 'D') {  			NewTag.Length = AddressLength.DWord;  			NewTag.Start = int.Parse (Regex.Match (address' @"QD[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  	}  }  else if (CRegex.IsMatch (address)) {  	NewTag.Length = AddressLength.Counter;  	NewTag.Start = int.Parse (Regex.Match (address' @"C[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (1));  }  else if (TRegex.IsMatch (address)) {  	NewTag.Length = AddressLength.Timer;  	NewTag.Start = int.Parse (Regex.Match (address' @"T[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (1));  }  else {  	return null;  }  
Magic Number,plcdb_lib_siemens_s7,SiemensTag,C:\repos\joncarson_plcdb\plcdb lib siemens s7\SiemensTag.cs,CreateTag,The following statement contains a magic number: if (QRegex.IsMatch (address)) {  	Match AddressTypeMatch = Regex.Match (address' "(QB|QW|QD)");  	if (!AddressTypeMatch.Success) {  		NewTag.Length = AddressLength.Bit;  		NewTag.Start = int.Parse (Regex.Match (address' @"Q[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (1));  		NewTag.Bit = int.Parse (Regex.Match (address' @"\.[0-7]").Value.Substring (1));  	}  	else {  		char AddressType = AddressTypeMatch.Value [1];  		if (AddressType == 'B') {  			NewTag.Length = AddressLength.Byte;  			NewTag.Start = int.Parse (Regex.Match (address' @"QB[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  		else if (AddressType == 'W') {  			NewTag.Length = AddressLength.Word;  			NewTag.Start = int.Parse (Regex.Match (address' @"QW[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  		else if (AddressType == 'D') {  			NewTag.Length = AddressLength.DWord;  			NewTag.Start = int.Parse (Regex.Match (address' @"QD[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  		}  	}  }  else if (CRegex.IsMatch (address)) {  	NewTag.Length = AddressLength.Counter;  	NewTag.Start = int.Parse (Regex.Match (address' @"C[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (1));  }  else if (TRegex.IsMatch (address)) {  	NewTag.Length = AddressLength.Timer;  	NewTag.Start = int.Parse (Regex.Match (address' @"T[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (1));  }  else {  	return null;  }  
Magic Number,plcdb_lib_siemens_s7,SiemensTag,C:\repos\joncarson_plcdb\plcdb lib siemens s7\SiemensTag.cs,CreateTag,The following statement contains a magic number: if (!AddressTypeMatch.Success) {  	NewTag.Length = AddressLength.Bit;  	NewTag.Start = int.Parse (Regex.Match (address' @"Q[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (1));  	NewTag.Bit = int.Parse (Regex.Match (address' @"\.[0-7]").Value.Substring (1));  }  else {  	char AddressType = AddressTypeMatch.Value [1];  	if (AddressType == 'B') {  		NewTag.Length = AddressLength.Byte;  		NewTag.Start = int.Parse (Regex.Match (address' @"QB[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  	}  	else if (AddressType == 'W') {  		NewTag.Length = AddressLength.Word;  		NewTag.Start = int.Parse (Regex.Match (address' @"QW[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  	}  	else if (AddressType == 'D') {  		NewTag.Length = AddressLength.DWord;  		NewTag.Start = int.Parse (Regex.Match (address' @"QD[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  	}  }  
Magic Number,plcdb_lib_siemens_s7,SiemensTag,C:\repos\joncarson_plcdb\plcdb lib siemens s7\SiemensTag.cs,CreateTag,The following statement contains a magic number: if (!AddressTypeMatch.Success) {  	NewTag.Length = AddressLength.Bit;  	NewTag.Start = int.Parse (Regex.Match (address' @"Q[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (1));  	NewTag.Bit = int.Parse (Regex.Match (address' @"\.[0-7]").Value.Substring (1));  }  else {  	char AddressType = AddressTypeMatch.Value [1];  	if (AddressType == 'B') {  		NewTag.Length = AddressLength.Byte;  		NewTag.Start = int.Parse (Regex.Match (address' @"QB[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  	}  	else if (AddressType == 'W') {  		NewTag.Length = AddressLength.Word;  		NewTag.Start = int.Parse (Regex.Match (address' @"QW[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  	}  	else if (AddressType == 'D') {  		NewTag.Length = AddressLength.DWord;  		NewTag.Start = int.Parse (Regex.Match (address' @"QD[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  	}  }  
Magic Number,plcdb_lib_siemens_s7,SiemensTag,C:\repos\joncarson_plcdb\plcdb lib siemens s7\SiemensTag.cs,CreateTag,The following statement contains a magic number: if (!AddressTypeMatch.Success) {  	NewTag.Length = AddressLength.Bit;  	NewTag.Start = int.Parse (Regex.Match (address' @"Q[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (1));  	NewTag.Bit = int.Parse (Regex.Match (address' @"\.[0-7]").Value.Substring (1));  }  else {  	char AddressType = AddressTypeMatch.Value [1];  	if (AddressType == 'B') {  		NewTag.Length = AddressLength.Byte;  		NewTag.Start = int.Parse (Regex.Match (address' @"QB[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  	}  	else if (AddressType == 'W') {  		NewTag.Length = AddressLength.Word;  		NewTag.Start = int.Parse (Regex.Match (address' @"QW[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  	}  	else if (AddressType == 'D') {  		NewTag.Length = AddressLength.DWord;  		NewTag.Start = int.Parse (Regex.Match (address' @"QD[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  	}  }  
Magic Number,plcdb_lib_siemens_s7,SiemensTag,C:\repos\joncarson_plcdb\plcdb lib siemens s7\SiemensTag.cs,CreateTag,The following statement contains a magic number: if (AddressType == 'B') {  	NewTag.Length = AddressLength.Byte;  	NewTag.Start = int.Parse (Regex.Match (address' @"QB[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  }  else if (AddressType == 'W') {  	NewTag.Length = AddressLength.Word;  	NewTag.Start = int.Parse (Regex.Match (address' @"QW[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  }  else if (AddressType == 'D') {  	NewTag.Length = AddressLength.DWord;  	NewTag.Start = int.Parse (Regex.Match (address' @"QD[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  }  
Magic Number,plcdb_lib_siemens_s7,SiemensTag,C:\repos\joncarson_plcdb\plcdb lib siemens s7\SiemensTag.cs,CreateTag,The following statement contains a magic number: if (AddressType == 'B') {  	NewTag.Length = AddressLength.Byte;  	NewTag.Start = int.Parse (Regex.Match (address' @"QB[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  }  else if (AddressType == 'W') {  	NewTag.Length = AddressLength.Word;  	NewTag.Start = int.Parse (Regex.Match (address' @"QW[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  }  else if (AddressType == 'D') {  	NewTag.Length = AddressLength.DWord;  	NewTag.Start = int.Parse (Regex.Match (address' @"QD[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  }  
Magic Number,plcdb_lib_siemens_s7,SiemensTag,C:\repos\joncarson_plcdb\plcdb lib siemens s7\SiemensTag.cs,CreateTag,The following statement contains a magic number: if (AddressType == 'B') {  	NewTag.Length = AddressLength.Byte;  	NewTag.Start = int.Parse (Regex.Match (address' @"QB[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  }  else if (AddressType == 'W') {  	NewTag.Length = AddressLength.Word;  	NewTag.Start = int.Parse (Regex.Match (address' @"QW[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  }  else if (AddressType == 'D') {  	NewTag.Length = AddressLength.DWord;  	NewTag.Start = int.Parse (Regex.Match (address' @"QD[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  }  
Magic Number,plcdb_lib_siemens_s7,SiemensTag,C:\repos\joncarson_plcdb\plcdb lib siemens s7\SiemensTag.cs,CreateTag,The following statement contains a magic number: NewTag.Start = int.Parse (Regex.Match (address' @"QB[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  
Magic Number,plcdb_lib_siemens_s7,SiemensTag,C:\repos\joncarson_plcdb\plcdb lib siemens s7\SiemensTag.cs,CreateTag,The following statement contains a magic number: if (AddressType == 'W') {  	NewTag.Length = AddressLength.Word;  	NewTag.Start = int.Parse (Regex.Match (address' @"QW[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  }  else if (AddressType == 'D') {  	NewTag.Length = AddressLength.DWord;  	NewTag.Start = int.Parse (Regex.Match (address' @"QD[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  }  
Magic Number,plcdb_lib_siemens_s7,SiemensTag,C:\repos\joncarson_plcdb\plcdb lib siemens s7\SiemensTag.cs,CreateTag,The following statement contains a magic number: if (AddressType == 'W') {  	NewTag.Length = AddressLength.Word;  	NewTag.Start = int.Parse (Regex.Match (address' @"QW[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  }  else if (AddressType == 'D') {  	NewTag.Length = AddressLength.DWord;  	NewTag.Start = int.Parse (Regex.Match (address' @"QD[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  }  
Magic Number,plcdb_lib_siemens_s7,SiemensTag,C:\repos\joncarson_plcdb\plcdb lib siemens s7\SiemensTag.cs,CreateTag,The following statement contains a magic number: NewTag.Start = int.Parse (Regex.Match (address' @"QW[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  
Magic Number,plcdb_lib_siemens_s7,SiemensTag,C:\repos\joncarson_plcdb\plcdb lib siemens s7\SiemensTag.cs,CreateTag,The following statement contains a magic number: if (AddressType == 'D') {  	NewTag.Length = AddressLength.DWord;  	NewTag.Start = int.Parse (Regex.Match (address' @"QD[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  }  
Magic Number,plcdb_lib_siemens_s7,SiemensTag,C:\repos\joncarson_plcdb\plcdb lib siemens s7\SiemensTag.cs,CreateTag,The following statement contains a magic number: NewTag.Start = int.Parse (Regex.Match (address' @"QD[0-9]+[0-9]*[0-9]*[0-9]*[0-9]*").Value.Substring (2));  
Magic Number,plcdb_lib_siemens_s7,SiemensS7,C:\repos\joncarson_plcdb\plcdb lib siemens s7\SiemensS7.cs,Read,The following statement contains a magic number: if (!Client.Connected ()) {  	int connResult = Client.ConnectTo (ControllerInfo.Address' (int)ControllerInfo.s7_rack' (int)ControllerInfo.s7_slot);  	if (connResult != 0) {  		Log.Error (GetErrorText (connResult));  		Client.Disconnect ();  		Client = null;  		Client = new S7Client ();  		throw new EntryPointNotFoundException ("Unable to connect to PLC " + ControllerInfo.Name);  	}  	bgReadThread.DoWork -= ReadFromPLC;  	bgReadThread.DoWork += ReadFromPLC;  	RefreshDataTimer.Interval = 1000;  	RefreshDataTimer.Elapsed -= RefreshDataTimer_Elapsed;  	RefreshDataTimer.Elapsed += RefreshDataTimer_Elapsed;  	RefreshDataTimer.Start ();  }  
Magic Number,plcdb_lib_siemens_s7,SiemensS7,C:\repos\joncarson_plcdb\plcdb lib siemens s7\SiemensS7.cs,Read,The following statement contains a magic number: RefreshDataTimer.Interval = 1000;  
Magic Number,plcdb_lib_siemens_s7,SiemensS7,C:\repos\joncarson_plcdb\plcdb lib siemens s7\SiemensS7.cs,WriteToPLC,The following statement contains a magic number: lock (Client) {  	SiemensTag Tag = ActiveTags.FirstOrDefault (p => p.TagRow.PK == t.TagRow.PK);  	if (Tag == null) {  		ActiveTags.Add (new SiemensTag () {  			TagRow = t.TagRow  		});  	}  	int result = 0;  	if (Tag.Length == SiemensTag.AddressLength.Bit)//if bit is used' start address is byte_number*8 + bit_number  	 {  		byte mask = (byte)(1 << Tag.Bit);  		if (Convert.ToBoolean (val))  			Buffer [Tag.Start] |= mask;  		else  			Buffer [Tag.Start] &= mask;  		result = Client.WriteArea ((int)Tag.AddressSpace' Tag.DB' Tag.Start * 8 + Tag.Bit' 1' (int)Tag.Length' Buffer);  	}  	else if (Tag.Length == SiemensTag.AddressLength.DWord || Tag.Length == SiemensTag.AddressLength.Real) {  		byte[] ConvertedToBytes = BitConverter.GetBytes ((int)val);  		for (int i = 0; i < 4; i++) {  			Buffer [Tag.Start + i] = ConvertedToBytes [i];  		}  		result = Client.WriteArea ((int)Tag.AddressSpace' Tag.DB' Tag.Start' 2' (int)Tag.Length' Buffer);  	}  	else {  		byte[] ConvertedToBytes = BitConverter.GetBytes (short.Parse (val.ToString ()));  		for (int i = 0; i < 2; i++) {  			Buffer [Tag.Start + i] = ConvertedToBytes [i];  		}  		result = Client.WriteArea ((int)Tag.AddressSpace' Tag.DB' Tag.Start' 1' (int)Tag.Length' Buffer);  	}  	if (result != 0) {  		Log.Error ("Error writing tag " + Tag.TagRow + "' " + GetErrorText (result));  		Client.Disconnect ();  		Client = null;  		Client = new S7Client ();  	}  }  
Magic Number,plcdb_lib_siemens_s7,SiemensS7,C:\repos\joncarson_plcdb\plcdb lib siemens s7\SiemensS7.cs,WriteToPLC,The following statement contains a magic number: lock (Client) {  	SiemensTag Tag = ActiveTags.FirstOrDefault (p => p.TagRow.PK == t.TagRow.PK);  	if (Tag == null) {  		ActiveTags.Add (new SiemensTag () {  			TagRow = t.TagRow  		});  	}  	int result = 0;  	if (Tag.Length == SiemensTag.AddressLength.Bit)//if bit is used' start address is byte_number*8 + bit_number  	 {  		byte mask = (byte)(1 << Tag.Bit);  		if (Convert.ToBoolean (val))  			Buffer [Tag.Start] |= mask;  		else  			Buffer [Tag.Start] &= mask;  		result = Client.WriteArea ((int)Tag.AddressSpace' Tag.DB' Tag.Start * 8 + Tag.Bit' 1' (int)Tag.Length' Buffer);  	}  	else if (Tag.Length == SiemensTag.AddressLength.DWord || Tag.Length == SiemensTag.AddressLength.Real) {  		byte[] ConvertedToBytes = BitConverter.GetBytes ((int)val);  		for (int i = 0; i < 4; i++) {  			Buffer [Tag.Start + i] = ConvertedToBytes [i];  		}  		result = Client.WriteArea ((int)Tag.AddressSpace' Tag.DB' Tag.Start' 2' (int)Tag.Length' Buffer);  	}  	else {  		byte[] ConvertedToBytes = BitConverter.GetBytes (short.Parse (val.ToString ()));  		for (int i = 0; i < 2; i++) {  			Buffer [Tag.Start + i] = ConvertedToBytes [i];  		}  		result = Client.WriteArea ((int)Tag.AddressSpace' Tag.DB' Tag.Start' 1' (int)Tag.Length' Buffer);  	}  	if (result != 0) {  		Log.Error ("Error writing tag " + Tag.TagRow + "' " + GetErrorText (result));  		Client.Disconnect ();  		Client = null;  		Client = new S7Client ();  	}  }  
Magic Number,plcdb_lib_siemens_s7,SiemensS7,C:\repos\joncarson_plcdb\plcdb lib siemens s7\SiemensS7.cs,WriteToPLC,The following statement contains a magic number: lock (Client) {  	SiemensTag Tag = ActiveTags.FirstOrDefault (p => p.TagRow.PK == t.TagRow.PK);  	if (Tag == null) {  		ActiveTags.Add (new SiemensTag () {  			TagRow = t.TagRow  		});  	}  	int result = 0;  	if (Tag.Length == SiemensTag.AddressLength.Bit)//if bit is used' start address is byte_number*8 + bit_number  	 {  		byte mask = (byte)(1 << Tag.Bit);  		if (Convert.ToBoolean (val))  			Buffer [Tag.Start] |= mask;  		else  			Buffer [Tag.Start] &= mask;  		result = Client.WriteArea ((int)Tag.AddressSpace' Tag.DB' Tag.Start * 8 + Tag.Bit' 1' (int)Tag.Length' Buffer);  	}  	else if (Tag.Length == SiemensTag.AddressLength.DWord || Tag.Length == SiemensTag.AddressLength.Real) {  		byte[] ConvertedToBytes = BitConverter.GetBytes ((int)val);  		for (int i = 0; i < 4; i++) {  			Buffer [Tag.Start + i] = ConvertedToBytes [i];  		}  		result = Client.WriteArea ((int)Tag.AddressSpace' Tag.DB' Tag.Start' 2' (int)Tag.Length' Buffer);  	}  	else {  		byte[] ConvertedToBytes = BitConverter.GetBytes (short.Parse (val.ToString ()));  		for (int i = 0; i < 2; i++) {  			Buffer [Tag.Start + i] = ConvertedToBytes [i];  		}  		result = Client.WriteArea ((int)Tag.AddressSpace' Tag.DB' Tag.Start' 1' (int)Tag.Length' Buffer);  	}  	if (result != 0) {  		Log.Error ("Error writing tag " + Tag.TagRow + "' " + GetErrorText (result));  		Client.Disconnect ();  		Client = null;  		Client = new S7Client ();  	}  }  
Magic Number,plcdb_lib_siemens_s7,SiemensS7,C:\repos\joncarson_plcdb\plcdb lib siemens s7\SiemensS7.cs,WriteToPLC,The following statement contains a magic number: lock (Client) {  	SiemensTag Tag = ActiveTags.FirstOrDefault (p => p.TagRow.PK == t.TagRow.PK);  	if (Tag == null) {  		ActiveTags.Add (new SiemensTag () {  			TagRow = t.TagRow  		});  	}  	int result = 0;  	if (Tag.Length == SiemensTag.AddressLength.Bit)//if bit is used' start address is byte_number*8 + bit_number  	 {  		byte mask = (byte)(1 << Tag.Bit);  		if (Convert.ToBoolean (val))  			Buffer [Tag.Start] |= mask;  		else  			Buffer [Tag.Start] &= mask;  		result = Client.WriteArea ((int)Tag.AddressSpace' Tag.DB' Tag.Start * 8 + Tag.Bit' 1' (int)Tag.Length' Buffer);  	}  	else if (Tag.Length == SiemensTag.AddressLength.DWord || Tag.Length == SiemensTag.AddressLength.Real) {  		byte[] ConvertedToBytes = BitConverter.GetBytes ((int)val);  		for (int i = 0; i < 4; i++) {  			Buffer [Tag.Start + i] = ConvertedToBytes [i];  		}  		result = Client.WriteArea ((int)Tag.AddressSpace' Tag.DB' Tag.Start' 2' (int)Tag.Length' Buffer);  	}  	else {  		byte[] ConvertedToBytes = BitConverter.GetBytes (short.Parse (val.ToString ()));  		for (int i = 0; i < 2; i++) {  			Buffer [Tag.Start + i] = ConvertedToBytes [i];  		}  		result = Client.WriteArea ((int)Tag.AddressSpace' Tag.DB' Tag.Start' 1' (int)Tag.Length' Buffer);  	}  	if (result != 0) {  		Log.Error ("Error writing tag " + Tag.TagRow + "' " + GetErrorText (result));  		Client.Disconnect ();  		Client = null;  		Client = new S7Client ();  	}  }  
Magic Number,plcdb_lib_siemens_s7,SiemensS7,C:\repos\joncarson_plcdb\plcdb lib siemens s7\SiemensS7.cs,WriteToPLC,The following statement contains a magic number: if (Tag.Length == SiemensTag.AddressLength.Bit)//if bit is used' start address is byte_number*8 + bit_number   {  	byte mask = (byte)(1 << Tag.Bit);  	if (Convert.ToBoolean (val))  		Buffer [Tag.Start] |= mask;  	else  		Buffer [Tag.Start] &= mask;  	result = Client.WriteArea ((int)Tag.AddressSpace' Tag.DB' Tag.Start * 8 + Tag.Bit' 1' (int)Tag.Length' Buffer);  }  else if (Tag.Length == SiemensTag.AddressLength.DWord || Tag.Length == SiemensTag.AddressLength.Real) {  	byte[] ConvertedToBytes = BitConverter.GetBytes ((int)val);  	for (int i = 0; i < 4; i++) {  		Buffer [Tag.Start + i] = ConvertedToBytes [i];  	}  	result = Client.WriteArea ((int)Tag.AddressSpace' Tag.DB' Tag.Start' 2' (int)Tag.Length' Buffer);  }  else {  	byte[] ConvertedToBytes = BitConverter.GetBytes (short.Parse (val.ToString ()));  	for (int i = 0; i < 2; i++) {  		Buffer [Tag.Start + i] = ConvertedToBytes [i];  	}  	result = Client.WriteArea ((int)Tag.AddressSpace' Tag.DB' Tag.Start' 1' (int)Tag.Length' Buffer);  }  
Magic Number,plcdb_lib_siemens_s7,SiemensS7,C:\repos\joncarson_plcdb\plcdb lib siemens s7\SiemensS7.cs,WriteToPLC,The following statement contains a magic number: if (Tag.Length == SiemensTag.AddressLength.Bit)//if bit is used' start address is byte_number*8 + bit_number   {  	byte mask = (byte)(1 << Tag.Bit);  	if (Convert.ToBoolean (val))  		Buffer [Tag.Start] |= mask;  	else  		Buffer [Tag.Start] &= mask;  	result = Client.WriteArea ((int)Tag.AddressSpace' Tag.DB' Tag.Start * 8 + Tag.Bit' 1' (int)Tag.Length' Buffer);  }  else if (Tag.Length == SiemensTag.AddressLength.DWord || Tag.Length == SiemensTag.AddressLength.Real) {  	byte[] ConvertedToBytes = BitConverter.GetBytes ((int)val);  	for (int i = 0; i < 4; i++) {  		Buffer [Tag.Start + i] = ConvertedToBytes [i];  	}  	result = Client.WriteArea ((int)Tag.AddressSpace' Tag.DB' Tag.Start' 2' (int)Tag.Length' Buffer);  }  else {  	byte[] ConvertedToBytes = BitConverter.GetBytes (short.Parse (val.ToString ()));  	for (int i = 0; i < 2; i++) {  		Buffer [Tag.Start + i] = ConvertedToBytes [i];  	}  	result = Client.WriteArea ((int)Tag.AddressSpace' Tag.DB' Tag.Start' 1' (int)Tag.Length' Buffer);  }  
Magic Number,plcdb_lib_siemens_s7,SiemensS7,C:\repos\joncarson_plcdb\plcdb lib siemens s7\SiemensS7.cs,WriteToPLC,The following statement contains a magic number: if (Tag.Length == SiemensTag.AddressLength.Bit)//if bit is used' start address is byte_number*8 + bit_number   {  	byte mask = (byte)(1 << Tag.Bit);  	if (Convert.ToBoolean (val))  		Buffer [Tag.Start] |= mask;  	else  		Buffer [Tag.Start] &= mask;  	result = Client.WriteArea ((int)Tag.AddressSpace' Tag.DB' Tag.Start * 8 + Tag.Bit' 1' (int)Tag.Length' Buffer);  }  else if (Tag.Length == SiemensTag.AddressLength.DWord || Tag.Length == SiemensTag.AddressLength.Real) {  	byte[] ConvertedToBytes = BitConverter.GetBytes ((int)val);  	for (int i = 0; i < 4; i++) {  		Buffer [Tag.Start + i] = ConvertedToBytes [i];  	}  	result = Client.WriteArea ((int)Tag.AddressSpace' Tag.DB' Tag.Start' 2' (int)Tag.Length' Buffer);  }  else {  	byte[] ConvertedToBytes = BitConverter.GetBytes (short.Parse (val.ToString ()));  	for (int i = 0; i < 2; i++) {  		Buffer [Tag.Start + i] = ConvertedToBytes [i];  	}  	result = Client.WriteArea ((int)Tag.AddressSpace' Tag.DB' Tag.Start' 1' (int)Tag.Length' Buffer);  }  
Magic Number,plcdb_lib_siemens_s7,SiemensS7,C:\repos\joncarson_plcdb\plcdb lib siemens s7\SiemensS7.cs,WriteToPLC,The following statement contains a magic number: if (Tag.Length == SiemensTag.AddressLength.Bit)//if bit is used' start address is byte_number*8 + bit_number   {  	byte mask = (byte)(1 << Tag.Bit);  	if (Convert.ToBoolean (val))  		Buffer [Tag.Start] |= mask;  	else  		Buffer [Tag.Start] &= mask;  	result = Client.WriteArea ((int)Tag.AddressSpace' Tag.DB' Tag.Start * 8 + Tag.Bit' 1' (int)Tag.Length' Buffer);  }  else if (Tag.Length == SiemensTag.AddressLength.DWord || Tag.Length == SiemensTag.AddressLength.Real) {  	byte[] ConvertedToBytes = BitConverter.GetBytes ((int)val);  	for (int i = 0; i < 4; i++) {  		Buffer [Tag.Start + i] = ConvertedToBytes [i];  	}  	result = Client.WriteArea ((int)Tag.AddressSpace' Tag.DB' Tag.Start' 2' (int)Tag.Length' Buffer);  }  else {  	byte[] ConvertedToBytes = BitConverter.GetBytes (short.Parse (val.ToString ()));  	for (int i = 0; i < 2; i++) {  		Buffer [Tag.Start + i] = ConvertedToBytes [i];  	}  	result = Client.WriteArea ((int)Tag.AddressSpace' Tag.DB' Tag.Start' 1' (int)Tag.Length' Buffer);  }  
Magic Number,plcdb_lib_siemens_s7,SiemensS7,C:\repos\joncarson_plcdb\plcdb lib siemens s7\SiemensS7.cs,WriteToPLC,The following statement contains a magic number: result = Client.WriteArea ((int)Tag.AddressSpace' Tag.DB' Tag.Start * 8 + Tag.Bit' 1' (int)Tag.Length' Buffer);  
Magic Number,plcdb_lib_siemens_s7,SiemensS7,C:\repos\joncarson_plcdb\plcdb lib siemens s7\SiemensS7.cs,WriteToPLC,The following statement contains a magic number: if (Tag.Length == SiemensTag.AddressLength.DWord || Tag.Length == SiemensTag.AddressLength.Real) {  	byte[] ConvertedToBytes = BitConverter.GetBytes ((int)val);  	for (int i = 0; i < 4; i++) {  		Buffer [Tag.Start + i] = ConvertedToBytes [i];  	}  	result = Client.WriteArea ((int)Tag.AddressSpace' Tag.DB' Tag.Start' 2' (int)Tag.Length' Buffer);  }  else {  	byte[] ConvertedToBytes = BitConverter.GetBytes (short.Parse (val.ToString ()));  	for (int i = 0; i < 2; i++) {  		Buffer [Tag.Start + i] = ConvertedToBytes [i];  	}  	result = Client.WriteArea ((int)Tag.AddressSpace' Tag.DB' Tag.Start' 1' (int)Tag.Length' Buffer);  }  
Magic Number,plcdb_lib_siemens_s7,SiemensS7,C:\repos\joncarson_plcdb\plcdb lib siemens s7\SiemensS7.cs,WriteToPLC,The following statement contains a magic number: if (Tag.Length == SiemensTag.AddressLength.DWord || Tag.Length == SiemensTag.AddressLength.Real) {  	byte[] ConvertedToBytes = BitConverter.GetBytes ((int)val);  	for (int i = 0; i < 4; i++) {  		Buffer [Tag.Start + i] = ConvertedToBytes [i];  	}  	result = Client.WriteArea ((int)Tag.AddressSpace' Tag.DB' Tag.Start' 2' (int)Tag.Length' Buffer);  }  else {  	byte[] ConvertedToBytes = BitConverter.GetBytes (short.Parse (val.ToString ()));  	for (int i = 0; i < 2; i++) {  		Buffer [Tag.Start + i] = ConvertedToBytes [i];  	}  	result = Client.WriteArea ((int)Tag.AddressSpace' Tag.DB' Tag.Start' 1' (int)Tag.Length' Buffer);  }  
Magic Number,plcdb_lib_siemens_s7,SiemensS7,C:\repos\joncarson_plcdb\plcdb lib siemens s7\SiemensS7.cs,WriteToPLC,The following statement contains a magic number: if (Tag.Length == SiemensTag.AddressLength.DWord || Tag.Length == SiemensTag.AddressLength.Real) {  	byte[] ConvertedToBytes = BitConverter.GetBytes ((int)val);  	for (int i = 0; i < 4; i++) {  		Buffer [Tag.Start + i] = ConvertedToBytes [i];  	}  	result = Client.WriteArea ((int)Tag.AddressSpace' Tag.DB' Tag.Start' 2' (int)Tag.Length' Buffer);  }  else {  	byte[] ConvertedToBytes = BitConverter.GetBytes (short.Parse (val.ToString ()));  	for (int i = 0; i < 2; i++) {  		Buffer [Tag.Start + i] = ConvertedToBytes [i];  	}  	result = Client.WriteArea ((int)Tag.AddressSpace' Tag.DB' Tag.Start' 1' (int)Tag.Length' Buffer);  }  
Magic Number,plcdb_lib_siemens_s7,SiemensS7,C:\repos\joncarson_plcdb\plcdb lib siemens s7\SiemensS7.cs,WriteToPLC,The following statement contains a magic number: for (int i = 0; i < 4; i++) {  	Buffer [Tag.Start + i] = ConvertedToBytes [i];  }  
Magic Number,plcdb_lib_siemens_s7,SiemensS7,C:\repos\joncarson_plcdb\plcdb lib siemens s7\SiemensS7.cs,WriteToPLC,The following statement contains a magic number: result = Client.WriteArea ((int)Tag.AddressSpace' Tag.DB' Tag.Start' 2' (int)Tag.Length' Buffer);  
Magic Number,plcdb_lib_siemens_s7,SiemensS7,C:\repos\joncarson_plcdb\plcdb lib siemens s7\SiemensS7.cs,WriteToPLC,The following statement contains a magic number: for (int i = 0; i < 2; i++) {  	Buffer [Tag.Start + i] = ConvertedToBytes [i];  }  
Magic Number,plcdb_lib_siemens_s7,SiemensS7,C:\repos\joncarson_plcdb\plcdb lib siemens s7\SiemensS7.cs,ReadFromPLC,The following statement contains a magic number: try {  	lock (Client) {  		if (!Client.Connected ()) {  			int connResult = Client.ConnectTo (ControllerInfo.Address' (int)ControllerInfo.s7_rack' (int)ControllerInfo.s7_slot);  			if (connResult != 0) {  				Log.Error (GetErrorText (connResult));  				Client.Disconnect ();  				Client = null;  				Client = new S7Client ();  				return;  			}  		}  		foreach (SiemensTag Tag in ActiveTags) {  			int result = 0;  			if (Tag.Length == SiemensTag.AddressLength.Bit)//if bit is used' start address is byte_number*8 + bit_number  			 {  				result = Client.WriteArea ((int)Tag.AddressSpace' Tag.DB' Tag.Start * 8 + Tag.Bit' 1' (int)Tag.Length' Buffer);  			}  			else if (Tag.Length == SiemensTag.AddressLength.DWord || Tag.Length == SiemensTag.AddressLength.Real) {  				result = Client.ReadArea ((int)Tag.AddressSpace' Tag.DB' Tag.Start' 2' (int)Tag.Length' Buffer);  			}  			else {  				result = Client.ReadArea ((int)Tag.AddressSpace' Tag.DB' Tag.Start' 1' (int)Tag.Length' Buffer);  			}  			if (result != 0) {  				Log.Error ("Error reading tag " + Tag.TagRow + "' " + GetErrorText (result));  				Client.Disconnect ();  				return;  			}  			else {  				if (Tag.Length == SiemensTag.AddressLength.Bit)  					Tag.TagRow.CurrentValue = (Buffer [Tag.Start] & (1 << Tag.Bit)) != 0;  				else if (Tag.Length == SiemensTag.AddressLength.Byte)  					Tag.TagRow.CurrentValue = Buffer [Tag.Start];  				else if (Tag.Length == SiemensTag.AddressLength.Word)  					Tag.TagRow.CurrentValue = BitConverter.ToInt16 (Buffer' Tag.Start);  				else if (Tag.Length == SiemensTag.AddressLength.Real || Tag.Length == SiemensTag.AddressLength.DWord)  					Tag.TagRow.CurrentValue = BitConverter.ToInt32 (Buffer' Tag.Start);  				else  					throw new MissingMemberException ("Unknown type in Siemens tag: " + Tag.TagRow);  			}  		}  	}  }  catch (Exception ex) {  	Log.Error ("Error reading from PLC: " + ControllerInfo.Name + ". Reconnecting.");  }  
Magic Number,plcdb_lib_siemens_s7,SiemensS7,C:\repos\joncarson_plcdb\plcdb lib siemens s7\SiemensS7.cs,ReadFromPLC,The following statement contains a magic number: try {  	lock (Client) {  		if (!Client.Connected ()) {  			int connResult = Client.ConnectTo (ControllerInfo.Address' (int)ControllerInfo.s7_rack' (int)ControllerInfo.s7_slot);  			if (connResult != 0) {  				Log.Error (GetErrorText (connResult));  				Client.Disconnect ();  				Client = null;  				Client = new S7Client ();  				return;  			}  		}  		foreach (SiemensTag Tag in ActiveTags) {  			int result = 0;  			if (Tag.Length == SiemensTag.AddressLength.Bit)//if bit is used' start address is byte_number*8 + bit_number  			 {  				result = Client.WriteArea ((int)Tag.AddressSpace' Tag.DB' Tag.Start * 8 + Tag.Bit' 1' (int)Tag.Length' Buffer);  			}  			else if (Tag.Length == SiemensTag.AddressLength.DWord || Tag.Length == SiemensTag.AddressLength.Real) {  				result = Client.ReadArea ((int)Tag.AddressSpace' Tag.DB' Tag.Start' 2' (int)Tag.Length' Buffer);  			}  			else {  				result = Client.ReadArea ((int)Tag.AddressSpace' Tag.DB' Tag.Start' 1' (int)Tag.Length' Buffer);  			}  			if (result != 0) {  				Log.Error ("Error reading tag " + Tag.TagRow + "' " + GetErrorText (result));  				Client.Disconnect ();  				return;  			}  			else {  				if (Tag.Length == SiemensTag.AddressLength.Bit)  					Tag.TagRow.CurrentValue = (Buffer [Tag.Start] & (1 << Tag.Bit)) != 0;  				else if (Tag.Length == SiemensTag.AddressLength.Byte)  					Tag.TagRow.CurrentValue = Buffer [Tag.Start];  				else if (Tag.Length == SiemensTag.AddressLength.Word)  					Tag.TagRow.CurrentValue = BitConverter.ToInt16 (Buffer' Tag.Start);  				else if (Tag.Length == SiemensTag.AddressLength.Real || Tag.Length == SiemensTag.AddressLength.DWord)  					Tag.TagRow.CurrentValue = BitConverter.ToInt32 (Buffer' Tag.Start);  				else  					throw new MissingMemberException ("Unknown type in Siemens tag: " + Tag.TagRow);  			}  		}  	}  }  catch (Exception ex) {  	Log.Error ("Error reading from PLC: " + ControllerInfo.Name + ". Reconnecting.");  }  
Magic Number,plcdb_lib_siemens_s7,SiemensS7,C:\repos\joncarson_plcdb\plcdb lib siemens s7\SiemensS7.cs,ReadFromPLC,The following statement contains a magic number: lock (Client) {  	if (!Client.Connected ()) {  		int connResult = Client.ConnectTo (ControllerInfo.Address' (int)ControllerInfo.s7_rack' (int)ControllerInfo.s7_slot);  		if (connResult != 0) {  			Log.Error (GetErrorText (connResult));  			Client.Disconnect ();  			Client = null;  			Client = new S7Client ();  			return;  		}  	}  	foreach (SiemensTag Tag in ActiveTags) {  		int result = 0;  		if (Tag.Length == SiemensTag.AddressLength.Bit)//if bit is used' start address is byte_number*8 + bit_number  		 {  			result = Client.WriteArea ((int)Tag.AddressSpace' Tag.DB' Tag.Start * 8 + Tag.Bit' 1' (int)Tag.Length' Buffer);  		}  		else if (Tag.Length == SiemensTag.AddressLength.DWord || Tag.Length == SiemensTag.AddressLength.Real) {  			result = Client.ReadArea ((int)Tag.AddressSpace' Tag.DB' Tag.Start' 2' (int)Tag.Length' Buffer);  		}  		else {  			result = Client.ReadArea ((int)Tag.AddressSpace' Tag.DB' Tag.Start' 1' (int)Tag.Length' Buffer);  		}  		if (result != 0) {  			Log.Error ("Error reading tag " + Tag.TagRow + "' " + GetErrorText (result));  			Client.Disconnect ();  			return;  		}  		else {  			if (Tag.Length == SiemensTag.AddressLength.Bit)  				Tag.TagRow.CurrentValue = (Buffer [Tag.Start] & (1 << Tag.Bit)) != 0;  			else if (Tag.Length == SiemensTag.AddressLength.Byte)  				Tag.TagRow.CurrentValue = Buffer [Tag.Start];  			else if (Tag.Length == SiemensTag.AddressLength.Word)  				Tag.TagRow.CurrentValue = BitConverter.ToInt16 (Buffer' Tag.Start);  			else if (Tag.Length == SiemensTag.AddressLength.Real || Tag.Length == SiemensTag.AddressLength.DWord)  				Tag.TagRow.CurrentValue = BitConverter.ToInt32 (Buffer' Tag.Start);  			else  				throw new MissingMemberException ("Unknown type in Siemens tag: " + Tag.TagRow);  		}  	}  }  
Magic Number,plcdb_lib_siemens_s7,SiemensS7,C:\repos\joncarson_plcdb\plcdb lib siemens s7\SiemensS7.cs,ReadFromPLC,The following statement contains a magic number: lock (Client) {  	if (!Client.Connected ()) {  		int connResult = Client.ConnectTo (ControllerInfo.Address' (int)ControllerInfo.s7_rack' (int)ControllerInfo.s7_slot);  		if (connResult != 0) {  			Log.Error (GetErrorText (connResult));  			Client.Disconnect ();  			Client = null;  			Client = new S7Client ();  			return;  		}  	}  	foreach (SiemensTag Tag in ActiveTags) {  		int result = 0;  		if (Tag.Length == SiemensTag.AddressLength.Bit)//if bit is used' start address is byte_number*8 + bit_number  		 {  			result = Client.WriteArea ((int)Tag.AddressSpace' Tag.DB' Tag.Start * 8 + Tag.Bit' 1' (int)Tag.Length' Buffer);  		}  		else if (Tag.Length == SiemensTag.AddressLength.DWord || Tag.Length == SiemensTag.AddressLength.Real) {  			result = Client.ReadArea ((int)Tag.AddressSpace' Tag.DB' Tag.Start' 2' (int)Tag.Length' Buffer);  		}  		else {  			result = Client.ReadArea ((int)Tag.AddressSpace' Tag.DB' Tag.Start' 1' (int)Tag.Length' Buffer);  		}  		if (result != 0) {  			Log.Error ("Error reading tag " + Tag.TagRow + "' " + GetErrorText (result));  			Client.Disconnect ();  			return;  		}  		else {  			if (Tag.Length == SiemensTag.AddressLength.Bit)  				Tag.TagRow.CurrentValue = (Buffer [Tag.Start] & (1 << Tag.Bit)) != 0;  			else if (Tag.Length == SiemensTag.AddressLength.Byte)  				Tag.TagRow.CurrentValue = Buffer [Tag.Start];  			else if (Tag.Length == SiemensTag.AddressLength.Word)  				Tag.TagRow.CurrentValue = BitConverter.ToInt16 (Buffer' Tag.Start);  			else if (Tag.Length == SiemensTag.AddressLength.Real || Tag.Length == SiemensTag.AddressLength.DWord)  				Tag.TagRow.CurrentValue = BitConverter.ToInt32 (Buffer' Tag.Start);  			else  				throw new MissingMemberException ("Unknown type in Siemens tag: " + Tag.TagRow);  		}  	}  }  
Magic Number,plcdb_lib_siemens_s7,SiemensS7,C:\repos\joncarson_plcdb\plcdb lib siemens s7\SiemensS7.cs,ReadFromPLC,The following statement contains a magic number: foreach (SiemensTag Tag in ActiveTags) {  	int result = 0;  	if (Tag.Length == SiemensTag.AddressLength.Bit)//if bit is used' start address is byte_number*8 + bit_number  	 {  		result = Client.WriteArea ((int)Tag.AddressSpace' Tag.DB' Tag.Start * 8 + Tag.Bit' 1' (int)Tag.Length' Buffer);  	}  	else if (Tag.Length == SiemensTag.AddressLength.DWord || Tag.Length == SiemensTag.AddressLength.Real) {  		result = Client.ReadArea ((int)Tag.AddressSpace' Tag.DB' Tag.Start' 2' (int)Tag.Length' Buffer);  	}  	else {  		result = Client.ReadArea ((int)Tag.AddressSpace' Tag.DB' Tag.Start' 1' (int)Tag.Length' Buffer);  	}  	if (result != 0) {  		Log.Error ("Error reading tag " + Tag.TagRow + "' " + GetErrorText (result));  		Client.Disconnect ();  		return;  	}  	else {  		if (Tag.Length == SiemensTag.AddressLength.Bit)  			Tag.TagRow.CurrentValue = (Buffer [Tag.Start] & (1 << Tag.Bit)) != 0;  		else if (Tag.Length == SiemensTag.AddressLength.Byte)  			Tag.TagRow.CurrentValue = Buffer [Tag.Start];  		else if (Tag.Length == SiemensTag.AddressLength.Word)  			Tag.TagRow.CurrentValue = BitConverter.ToInt16 (Buffer' Tag.Start);  		else if (Tag.Length == SiemensTag.AddressLength.Real || Tag.Length == SiemensTag.AddressLength.DWord)  			Tag.TagRow.CurrentValue = BitConverter.ToInt32 (Buffer' Tag.Start);  		else  			throw new MissingMemberException ("Unknown type in Siemens tag: " + Tag.TagRow);  	}  }  
Magic Number,plcdb_lib_siemens_s7,SiemensS7,C:\repos\joncarson_plcdb\plcdb lib siemens s7\SiemensS7.cs,ReadFromPLC,The following statement contains a magic number: foreach (SiemensTag Tag in ActiveTags) {  	int result = 0;  	if (Tag.Length == SiemensTag.AddressLength.Bit)//if bit is used' start address is byte_number*8 + bit_number  	 {  		result = Client.WriteArea ((int)Tag.AddressSpace' Tag.DB' Tag.Start * 8 + Tag.Bit' 1' (int)Tag.Length' Buffer);  	}  	else if (Tag.Length == SiemensTag.AddressLength.DWord || Tag.Length == SiemensTag.AddressLength.Real) {  		result = Client.ReadArea ((int)Tag.AddressSpace' Tag.DB' Tag.Start' 2' (int)Tag.Length' Buffer);  	}  	else {  		result = Client.ReadArea ((int)Tag.AddressSpace' Tag.DB' Tag.Start' 1' (int)Tag.Length' Buffer);  	}  	if (result != 0) {  		Log.Error ("Error reading tag " + Tag.TagRow + "' " + GetErrorText (result));  		Client.Disconnect ();  		return;  	}  	else {  		if (Tag.Length == SiemensTag.AddressLength.Bit)  			Tag.TagRow.CurrentValue = (Buffer [Tag.Start] & (1 << Tag.Bit)) != 0;  		else if (Tag.Length == SiemensTag.AddressLength.Byte)  			Tag.TagRow.CurrentValue = Buffer [Tag.Start];  		else if (Tag.Length == SiemensTag.AddressLength.Word)  			Tag.TagRow.CurrentValue = BitConverter.ToInt16 (Buffer' Tag.Start);  		else if (Tag.Length == SiemensTag.AddressLength.Real || Tag.Length == SiemensTag.AddressLength.DWord)  			Tag.TagRow.CurrentValue = BitConverter.ToInt32 (Buffer' Tag.Start);  		else  			throw new MissingMemberException ("Unknown type in Siemens tag: " + Tag.TagRow);  	}  }  
Magic Number,plcdb_lib_siemens_s7,SiemensS7,C:\repos\joncarson_plcdb\plcdb lib siemens s7\SiemensS7.cs,ReadFromPLC,The following statement contains a magic number: if (Tag.Length == SiemensTag.AddressLength.Bit)//if bit is used' start address is byte_number*8 + bit_number   {  	result = Client.WriteArea ((int)Tag.AddressSpace' Tag.DB' Tag.Start * 8 + Tag.Bit' 1' (int)Tag.Length' Buffer);  }  else if (Tag.Length == SiemensTag.AddressLength.DWord || Tag.Length == SiemensTag.AddressLength.Real) {  	result = Client.ReadArea ((int)Tag.AddressSpace' Tag.DB' Tag.Start' 2' (int)Tag.Length' Buffer);  }  else {  	result = Client.ReadArea ((int)Tag.AddressSpace' Tag.DB' Tag.Start' 1' (int)Tag.Length' Buffer);  }  
Magic Number,plcdb_lib_siemens_s7,SiemensS7,C:\repos\joncarson_plcdb\plcdb lib siemens s7\SiemensS7.cs,ReadFromPLC,The following statement contains a magic number: if (Tag.Length == SiemensTag.AddressLength.Bit)//if bit is used' start address is byte_number*8 + bit_number   {  	result = Client.WriteArea ((int)Tag.AddressSpace' Tag.DB' Tag.Start * 8 + Tag.Bit' 1' (int)Tag.Length' Buffer);  }  else if (Tag.Length == SiemensTag.AddressLength.DWord || Tag.Length == SiemensTag.AddressLength.Real) {  	result = Client.ReadArea ((int)Tag.AddressSpace' Tag.DB' Tag.Start' 2' (int)Tag.Length' Buffer);  }  else {  	result = Client.ReadArea ((int)Tag.AddressSpace' Tag.DB' Tag.Start' 1' (int)Tag.Length' Buffer);  }  
Magic Number,plcdb_lib_siemens_s7,SiemensS7,C:\repos\joncarson_plcdb\plcdb lib siemens s7\SiemensS7.cs,ReadFromPLC,The following statement contains a magic number: result = Client.WriteArea ((int)Tag.AddressSpace' Tag.DB' Tag.Start * 8 + Tag.Bit' 1' (int)Tag.Length' Buffer);  
Magic Number,plcdb_lib_siemens_s7,SiemensS7,C:\repos\joncarson_plcdb\plcdb lib siemens s7\SiemensS7.cs,ReadFromPLC,The following statement contains a magic number: if (Tag.Length == SiemensTag.AddressLength.DWord || Tag.Length == SiemensTag.AddressLength.Real) {  	result = Client.ReadArea ((int)Tag.AddressSpace' Tag.DB' Tag.Start' 2' (int)Tag.Length' Buffer);  }  else {  	result = Client.ReadArea ((int)Tag.AddressSpace' Tag.DB' Tag.Start' 1' (int)Tag.Length' Buffer);  }  
Magic Number,plcdb_lib_siemens_s7,SiemensS7,C:\repos\joncarson_plcdb\plcdb lib siemens s7\SiemensS7.cs,ReadFromPLC,The following statement contains a magic number: result = Client.ReadArea ((int)Tag.AddressSpace' Tag.DB' Tag.Start' 2' (int)Tag.Length' Buffer);  
Magic Number,Snap7,S7Client,C:\repos\joncarson_plcdb\plcdb lib siemens s7\snap7.net.cs,GetPlcDateTime,The following statement contains a magic number: if (res == 0) {  	// Packed->Managed  	DateTime PlcDT = new DateTime (tm.tm_year + 1900' tm.tm_mon + 1' tm.tm_mday' tm.tm_hour' tm.tm_min' tm.tm_sec);  	DT = PlcDT;  }  
Magic Number,Snap7,S7Client,C:\repos\joncarson_plcdb\plcdb lib siemens s7\snap7.net.cs,SetPlcDateTime,The following statement contains a magic number: tm.tm_year = DT.Year - 1900;  
