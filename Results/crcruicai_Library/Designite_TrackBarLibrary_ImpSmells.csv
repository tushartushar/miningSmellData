Implementation smell,Namespace,Class,File,Method,Description
Long Method,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,OnPaint,The method has 173 lines of code.
Complex Method,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,ProcessCmdKey,Cyclomatic complexity of the method is 24
Complex Method,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,OnPaint,Cyclomatic complexity of the method is 14
Complex Method,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,DrawBorder,Cyclomatic complexity of the method is 48
Complex Method,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,OnMouseDownSlider,Cyclomatic complexity of the method is 20
Complex Method,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,OnMouseMoveSlider,Cyclomatic complexity of the method is 12
Complex Method,CRC.Controls,PlayerTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\PlayerTrackBar.cs,OnPaint,Cyclomatic complexity of the method is 14
Long Parameter List,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,DrawTickTextLine,The method has 8 parameters.
Long Parameter List,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,DrawTickLine,The method has 7 parameters.
Long Statement,CRC.Controls,LoadingBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\LoadingBar.cs,OnPaint,The length of the statement  "	Rectangle rec = new Rectangle ((int)(curLen - this.Width * barLength)' 1' (int)(this.Width * barLength)' this.Height - 2); " is 122.
Long Statement,CRC.Controls,DrawMacStyleHelper,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\DrawMacStyleHelper.cs,DrawAquaPill,The length of the statement  "	color2 = ColorHelper.OpacityMix (Color.White' ColorHelper.SoftLightMix (drawColor' ColorHelper.CreateColorFromRGB (64' 64' 64)' 100)' 20); " is 138.
Long Statement,CRC.Controls,DrawMacStyleHelper,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\DrawMacStyleHelper.cs,DrawAquaPill,The length of the statement  "		gradientBrush = new System.Drawing.Drawing2D.LinearGradientBrush (new Point ((int)drawRectF.Left' (int)drawRectF.Top - 1)' new Point ((int)drawRectF.Left' (int)drawRectF.Top + (int)drawRectF.Height + 1)' color1' color5); " is 220.
Long Statement,CRC.Controls,DrawMacStyleHelper,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\DrawMacStyleHelper.cs,DrawAquaPill,The length of the statement  "		gradientBrush = new System.Drawing.Drawing2D.LinearGradientBrush (new Point ((int)drawRectF.Left - 1' (int)drawRectF.Top)' new Point ((int)drawRectF.Left + (int)drawRectF.Width + 1' (int)drawRectF.Top)' color1' color5); " is 219.
Long Statement,CRC.Controls,DrawMacStyleHelper,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\DrawMacStyleHelper.cs,DrawAquaPill,The length of the statement  "		gradientBrush = new System.Drawing.Drawing2D.LinearGradientBrush (new Point ((int)drawRectF.Left + 1' (int)drawRectF.Top)' new Point ((int)drawRectF.Left + 1' (int)drawRectF.Top + (int)drawRectF.Height - 1)' color2' color5); " is 224.
Long Statement,CRC.Controls,DrawMacStyleHelper,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\DrawMacStyleHelper.cs,DrawAquaPill,The length of the statement  "		gradientBrush = new System.Drawing.Drawing2D.LinearGradientBrush (new Point ((int)drawRectF.Left' (int)drawRectF.Top + 1)' new Point ((int)drawRectF.Left + (int)drawRectF.Width - 1' (int)drawRectF.Top + 1)' color2' color5); " is 223.
Long Statement,CRC.Controls,DrawMacStyleHelper,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\DrawMacStyleHelper.cs,DrawAquaPillSingleLayer,The length of the statement  "		gradientBrush = new System.Drawing.Drawing2D.LinearGradientBrush (new Point ((int)drawRectF.Left' (int)drawRectF.Top)' new Point ((int)drawRectF.Left' (int)drawRectF.Top + (int)drawRectF.Height)' color1' color4); " is 212.
Long Statement,CRC.Controls,DrawMacStyleHelper,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\DrawMacStyleHelper.cs,DrawAquaPillSingleLayer,The length of the statement  "		gradientBrush = new System.Drawing.Drawing2D.LinearGradientBrush (new Point ((int)drawRectF.Left' (int)drawRectF.Top)' new Point ((int)drawRectF.Left + (int)drawRectF.Width' (int)drawRectF.Top)' color1' color4); " is 211.
Long Statement,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,OnPaint,The length of the statement  "			currentTrackerPos = (workingRect.Width - _trackerSize.Width) * (_value - _minimum) / (_maximum - _minimum) + workingRect.Left; " is 126.
Long Statement,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,OnPaint,The length of the statement  "		drawRect = new RectangleF (workingRect.Left' currentUsedPos + _trackerSize.Height / 2 - _trackLineHeight / 2' workingRect.Width' _trackLineHeight); " is 147.
Long Statement,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,OnPaint,The length of the statement  "		_trackerRect = new RectangleF (currentUsedPos' workingRect.Bottom - currentTrackerPos - _trackerSize.Width' _trackerSize.Height' _trackerSize.Width); " is 149.
Long Statement,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,OnPaint,The length of the statement  "		drawRect = new RectangleF (currentUsedPos + _trackerSize.Height / 2 - _trackLineHeight / 2' workingRect.Top' _trackLineHeight' workingRect.Height); " is 147.
Long Statement,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,DrawTickTextLine,The length of the statement  "			g.DrawString (text' font' brush' drawRect.Left + tickFrequencySize * i' drawRect.Top + drawRect.Height / 2' stringFormat); " is 122.
Long Statement,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,DrawTickTextLine,The length of the statement  "			g.DrawString (text' font' brush' drawRect.Left + drawRect.Width / 2' drawRect.Bottom - tickFrequencySize * i' stringFormat); " is 124.
Long Statement,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,DrawTickLine,The length of the statement  "			g.DrawLine (pen' drawRect.Left + tickFrequencySize * i' drawRect.Top' drawRect.Left + tickFrequencySize * i' drawRect.Bottom); " is 126.
Long Statement,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,DrawTickLine,The length of the statement  "			g.DrawLine (pen' drawRect.Left' drawRect.Bottom - tickFrequencySize * i' drawRect.Right' drawRect.Bottom - tickFrequencySize * i); " is 130.
Long Statement,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,OnMouseDownSlider,The length of the statement  "				offsetValue = (int)(((currentPoint.X - _indentWidth - _trackerSize.Width / 2) * (_maximum - _minimum)) / (this.Width - 2 * _indentWidth - _trackerSize.Width) + 0.5); " is 165.
Long Statement,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,OnMouseDownSlider,The length of the statement  "				offsetValue = (int)(((this.Height - currentPoint.Y - _indentHeight - _trackerSize.Width / 2) * (_maximum - _minimum)) / (this.Height - 2 * _indentHeight - _trackerSize.Width) + 0.5); " is 182.
Long Statement,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,OnMouseMoveSlider,The length of the statement  "					offsetValue = (int)(((currentPoint.X - mouseStartPos - _indentWidth) * (_maximum - _minimum)) / (this.Width - 2 * _indentWidth - _trackerSize.Width) + 0.5); " is 156.
Long Statement,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,OnMouseMoveSlider,The length of the statement  "					offsetValue = (int)(((this.Height - currentPoint.Y + _trackerSize.Width / 2 - mouseStartPos - _indentHeight) * (_maximum - _minimum)) / (this.Height - 2 * _indentHeight) + 0.5); " is 177.
Empty Catch Block,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,OnMouseMoveSlider,The method has an empty catch block.
Magic Number,CRC.Controls,LoadingBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\LoadingBar.cs,timer1_Tick,The following statement contains a magic number: if (!this.DesignMode) {  	curLen += 10;  	if (curLen >= this.Width * (1 + barLength))  		curLen = 0;  	this.Refresh ();  }  
Magic Number,CRC.Controls,LoadingBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\LoadingBar.cs,timer1_Tick,The following statement contains a magic number: curLen += 10;  
Magic Number,CRC.Controls,ColorHelper,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\ColorHelper.cs,SoftLightMath,The following statement contains a magic number: if (dblend < 0.5) {  	return (int)(((2 * dbase * dblend) + (Math.Pow (dbase' 2)) * (1 - (2 * dblend))) * 255);  }  else {  	return (int)(((Math.Sqrt (dbase) * (2 * dblend - 1)) + ((2 * dbase) * (1 - dblend))) * 255);  }  
Magic Number,CRC.Controls,ColorHelper,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\ColorHelper.cs,SoftLightMath,The following statement contains a magic number: if (dblend < 0.5) {  	return (int)(((2 * dbase * dblend) + (Math.Pow (dbase' 2)) * (1 - (2 * dblend))) * 255);  }  else {  	return (int)(((Math.Sqrt (dbase) * (2 * dblend - 1)) + ((2 * dbase) * (1 - dblend))) * 255);  }  
Magic Number,CRC.Controls,ColorHelper,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\ColorHelper.cs,SoftLightMath,The following statement contains a magic number: if (dblend < 0.5) {  	return (int)(((2 * dbase * dblend) + (Math.Pow (dbase' 2)) * (1 - (2 * dblend))) * 255);  }  else {  	return (int)(((Math.Sqrt (dbase) * (2 * dblend - 1)) + ((2 * dbase) * (1 - dblend))) * 255);  }  
Magic Number,CRC.Controls,ColorHelper,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\ColorHelper.cs,SoftLightMath,The following statement contains a magic number: if (dblend < 0.5) {  	return (int)(((2 * dbase * dblend) + (Math.Pow (dbase' 2)) * (1 - (2 * dblend))) * 255);  }  else {  	return (int)(((Math.Sqrt (dbase) * (2 * dblend - 1)) + ((2 * dbase) * (1 - dblend))) * 255);  }  
Magic Number,CRC.Controls,ColorHelper,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\ColorHelper.cs,SoftLightMath,The following statement contains a magic number: if (dblend < 0.5) {  	return (int)(((2 * dbase * dblend) + (Math.Pow (dbase' 2)) * (1 - (2 * dblend))) * 255);  }  else {  	return (int)(((Math.Sqrt (dbase) * (2 * dblend - 1)) + ((2 * dbase) * (1 - dblend))) * 255);  }  
Magic Number,CRC.Controls,ColorHelper,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\ColorHelper.cs,SoftLightMath,The following statement contains a magic number: if (dblend < 0.5) {  	return (int)(((2 * dbase * dblend) + (Math.Pow (dbase' 2)) * (1 - (2 * dblend))) * 255);  }  else {  	return (int)(((Math.Sqrt (dbase) * (2 * dblend - 1)) + ((2 * dbase) * (1 - dblend))) * 255);  }  
Magic Number,CRC.Controls,ColorHelper,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\ColorHelper.cs,SoftLightMath,The following statement contains a magic number: if (dblend < 0.5) {  	return (int)(((2 * dbase * dblend) + (Math.Pow (dbase' 2)) * (1 - (2 * dblend))) * 255);  }  else {  	return (int)(((Math.Sqrt (dbase) * (2 * dblend - 1)) + ((2 * dbase) * (1 - dblend))) * 255);  }  
Magic Number,CRC.Controls,ColorHelper,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\ColorHelper.cs,SoftLightMath,The following statement contains a magic number: if (dblend < 0.5) {  	return (int)(((2 * dbase * dblend) + (Math.Pow (dbase' 2)) * (1 - (2 * dblend))) * 255);  }  else {  	return (int)(((Math.Sqrt (dbase) * (2 * dblend - 1)) + ((2 * dbase) * (1 - dblend))) * 255);  }  
Magic Number,CRC.Controls,ColorHelper,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\ColorHelper.cs,SoftLightMath,The following statement contains a magic number: return (int)(((2 * dbase * dblend) + (Math.Pow (dbase' 2)) * (1 - (2 * dblend))) * 255);  
Magic Number,CRC.Controls,ColorHelper,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\ColorHelper.cs,SoftLightMath,The following statement contains a magic number: return (int)(((2 * dbase * dblend) + (Math.Pow (dbase' 2)) * (1 - (2 * dblend))) * 255);  
Magic Number,CRC.Controls,ColorHelper,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\ColorHelper.cs,SoftLightMath,The following statement contains a magic number: return (int)(((2 * dbase * dblend) + (Math.Pow (dbase' 2)) * (1 - (2 * dblend))) * 255);  
Magic Number,CRC.Controls,ColorHelper,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\ColorHelper.cs,SoftLightMath,The following statement contains a magic number: return (int)(((2 * dbase * dblend) + (Math.Pow (dbase' 2)) * (1 - (2 * dblend))) * 255);  
Magic Number,CRC.Controls,ColorHelper,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\ColorHelper.cs,SoftLightMath,The following statement contains a magic number: return (int)(((Math.Sqrt (dbase) * (2 * dblend - 1)) + ((2 * dbase) * (1 - dblend))) * 255);  
Magic Number,CRC.Controls,ColorHelper,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\ColorHelper.cs,SoftLightMath,The following statement contains a magic number: return (int)(((Math.Sqrt (dbase) * (2 * dblend - 1)) + ((2 * dbase) * (1 - dblend))) * 255);  
Magic Number,CRC.Controls,ColorHelper,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\ColorHelper.cs,SoftLightMath,The following statement contains a magic number: return (int)(((Math.Sqrt (dbase) * (2 * dblend - 1)) + ((2 * dbase) * (1 - dblend))) * 255);  
Magic Number,CRC.Controls,ColorHelper,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\ColorHelper.cs,OverlayMath,The following statement contains a magic number: if (dbase < 0.5) {  	return (int)((2 * dbase * dblend) * 255);  }  else {  	return (int)((1 - (2 * (1 - dbase) * (1 - dblend))) * 255);  }  
Magic Number,CRC.Controls,ColorHelper,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\ColorHelper.cs,OverlayMath,The following statement contains a magic number: if (dbase < 0.5) {  	return (int)((2 * dbase * dblend) * 255);  }  else {  	return (int)((1 - (2 * (1 - dbase) * (1 - dblend))) * 255);  }  
Magic Number,CRC.Controls,ColorHelper,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\ColorHelper.cs,OverlayMath,The following statement contains a magic number: if (dbase < 0.5) {  	return (int)((2 * dbase * dblend) * 255);  }  else {  	return (int)((1 - (2 * (1 - dbase) * (1 - dblend))) * 255);  }  
Magic Number,CRC.Controls,ColorHelper,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\ColorHelper.cs,OverlayMath,The following statement contains a magic number: if (dbase < 0.5) {  	return (int)((2 * dbase * dblend) * 255);  }  else {  	return (int)((1 - (2 * (1 - dbase) * (1 - dblend))) * 255);  }  
Magic Number,CRC.Controls,ColorHelper,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\ColorHelper.cs,OverlayMath,The following statement contains a magic number: if (dbase < 0.5) {  	return (int)((2 * dbase * dblend) * 255);  }  else {  	return (int)((1 - (2 * (1 - dbase) * (1 - dblend))) * 255);  }  
Magic Number,CRC.Controls,ColorHelper,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\ColorHelper.cs,OverlayMath,The following statement contains a magic number: return (int)((2 * dbase * dblend) * 255);  
Magic Number,CRC.Controls,ColorHelper,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\ColorHelper.cs,OverlayMath,The following statement contains a magic number: return (int)((2 * dbase * dblend) * 255);  
Magic Number,CRC.Controls,ColorHelper,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\ColorHelper.cs,OverlayMath,The following statement contains a magic number: return (int)((1 - (2 * (1 - dbase) * (1 - dblend))) * 255);  
Magic Number,CRC.Controls,ColorHelper,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\ColorHelper.cs,OverlayMath,The following statement contains a magic number: return (int)((1 - (2 * (1 - dbase) * (1 - dblend))) * 255);  
Magic Number,CRC.Controls,DrawMacStyleHelper,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\DrawMacStyleHelper.cs,DrawAquaPill,The following statement contains a magic number: color1 = ColorHelper.OpacityMix (Color.White' ColorHelper.SoftLightMix (drawColor' Color.Black' 100)' 40);  
Magic Number,CRC.Controls,DrawMacStyleHelper,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\DrawMacStyleHelper.cs,DrawAquaPill,The following statement contains a magic number: color1 = ColorHelper.OpacityMix (Color.White' ColorHelper.SoftLightMix (drawColor' Color.Black' 100)' 40);  
Magic Number,CRC.Controls,DrawMacStyleHelper,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\DrawMacStyleHelper.cs,DrawAquaPill,The following statement contains a magic number: color2 = ColorHelper.OpacityMix (Color.White' ColorHelper.SoftLightMix (drawColor' ColorHelper.CreateColorFromRGB (64' 64' 64)' 100)' 20);  
Magic Number,CRC.Controls,DrawMacStyleHelper,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\DrawMacStyleHelper.cs,DrawAquaPill,The following statement contains a magic number: color2 = ColorHelper.OpacityMix (Color.White' ColorHelper.SoftLightMix (drawColor' ColorHelper.CreateColorFromRGB (64' 64' 64)' 100)' 20);  
Magic Number,CRC.Controls,DrawMacStyleHelper,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\DrawMacStyleHelper.cs,DrawAquaPill,The following statement contains a magic number: color2 = ColorHelper.OpacityMix (Color.White' ColorHelper.SoftLightMix (drawColor' ColorHelper.CreateColorFromRGB (64' 64' 64)' 100)' 20);  
Magic Number,CRC.Controls,DrawMacStyleHelper,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\DrawMacStyleHelper.cs,DrawAquaPill,The following statement contains a magic number: color2 = ColorHelper.OpacityMix (Color.White' ColorHelper.SoftLightMix (drawColor' ColorHelper.CreateColorFromRGB (64' 64' 64)' 100)' 20);  
Magic Number,CRC.Controls,DrawMacStyleHelper,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\DrawMacStyleHelper.cs,DrawAquaPill,The following statement contains a magic number: color2 = ColorHelper.OpacityMix (Color.White' ColorHelper.SoftLightMix (drawColor' ColorHelper.CreateColorFromRGB (64' 64' 64)' 100)' 20);  
Magic Number,CRC.Controls,DrawMacStyleHelper,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\DrawMacStyleHelper.cs,DrawAquaPill,The following statement contains a magic number: color3 = ColorHelper.SoftLightMix (drawColor' ColorHelper.CreateColorFromRGB (128' 128' 128)' 100);  
Magic Number,CRC.Controls,DrawMacStyleHelper,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\DrawMacStyleHelper.cs,DrawAquaPill,The following statement contains a magic number: color3 = ColorHelper.SoftLightMix (drawColor' ColorHelper.CreateColorFromRGB (128' 128' 128)' 100);  
Magic Number,CRC.Controls,DrawMacStyleHelper,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\DrawMacStyleHelper.cs,DrawAquaPill,The following statement contains a magic number: color3 = ColorHelper.SoftLightMix (drawColor' ColorHelper.CreateColorFromRGB (128' 128' 128)' 100);  
Magic Number,CRC.Controls,DrawMacStyleHelper,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\DrawMacStyleHelper.cs,DrawAquaPill,The following statement contains a magic number: color3 = ColorHelper.SoftLightMix (drawColor' ColorHelper.CreateColorFromRGB (128' 128' 128)' 100);  
Magic Number,CRC.Controls,DrawMacStyleHelper,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\DrawMacStyleHelper.cs,DrawAquaPill,The following statement contains a magic number: color4 = ColorHelper.SoftLightMix (drawColor' ColorHelper.CreateColorFromRGB (192' 192' 192)' 100);  
Magic Number,CRC.Controls,DrawMacStyleHelper,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\DrawMacStyleHelper.cs,DrawAquaPill,The following statement contains a magic number: color4 = ColorHelper.SoftLightMix (drawColor' ColorHelper.CreateColorFromRGB (192' 192' 192)' 100);  
Magic Number,CRC.Controls,DrawMacStyleHelper,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\DrawMacStyleHelper.cs,DrawAquaPill,The following statement contains a magic number: color4 = ColorHelper.SoftLightMix (drawColor' ColorHelper.CreateColorFromRGB (192' 192' 192)' 100);  
Magic Number,CRC.Controls,DrawMacStyleHelper,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\DrawMacStyleHelper.cs,DrawAquaPill,The following statement contains a magic number: color4 = ColorHelper.SoftLightMix (drawColor' ColorHelper.CreateColorFromRGB (192' 192' 192)' 100);  
Magic Number,CRC.Controls,DrawMacStyleHelper,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\DrawMacStyleHelper.cs,DrawAquaPill,The following statement contains a magic number: color5 = ColorHelper.OverlayMix (ColorHelper.SoftLightMix (drawColor' Color.White' 100)' Color.White' 75);  
Magic Number,CRC.Controls,DrawMacStyleHelper,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\DrawMacStyleHelper.cs,DrawAquaPill,The following statement contains a magic number: color5 = ColorHelper.OverlayMix (ColorHelper.SoftLightMix (drawColor' Color.White' 100)' Color.White' 75);  
Magic Number,CRC.Controls,DrawMacStyleHelper,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\DrawMacStyleHelper.cs,DrawAquaPill,The following statement contains a magic number: FillPill (gradientBrush' RectangleF.Inflate (drawRectF' -3' -3)' g);  
Magic Number,CRC.Controls,DrawMacStyleHelper,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\DrawMacStyleHelper.cs,DrawAquaPill,The following statement contains a magic number: FillPill (gradientBrush' RectangleF.Inflate (drawRectF' -3' -3)' g);  
Magic Number,CRC.Controls,DrawMacStyleHelper,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\DrawMacStyleHelper.cs,FillPill,The following statement contains a magic number: if (rect.Width > rect.Height) {  	g.SmoothingMode = SmoothingMode.HighQuality;  	g.FillEllipse (b' new RectangleF (rect.Left' rect.Top' rect.Height' rect.Height));  	g.FillEllipse (b' new RectangleF (rect.Left + rect.Width - rect.Height' rect.Top' rect.Height' rect.Height));  	float w = rect.Width - rect.Height;  	float l = rect.Left + ((rect.Height) / 2);  	g.FillRectangle (b' new RectangleF (l' rect.Top' w' rect.Height));  	g.SmoothingMode = SmoothingMode.Default;  }  else if (rect.Width < rect.Height) {  	g.SmoothingMode = SmoothingMode.HighQuality;  	g.FillEllipse (b' new RectangleF (rect.Left' rect.Top' rect.Width' rect.Width));  	g.FillEllipse (b' new RectangleF (rect.Left' rect.Top + rect.Height - rect.Width' rect.Width' rect.Width));  	float t = rect.Top + (rect.Width / 2);  	float h = rect.Height - rect.Width;  	g.FillRectangle (b' new RectangleF (rect.Left' t' rect.Width' h));  	g.SmoothingMode = SmoothingMode.Default;  }  else if (rect.Width == rect.Height) {  	g.SmoothingMode = SmoothingMode.HighQuality;  	g.FillEllipse (b' rect);  	g.SmoothingMode = SmoothingMode.Default;  }  
Magic Number,CRC.Controls,DrawMacStyleHelper,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\DrawMacStyleHelper.cs,FillPill,The following statement contains a magic number: if (rect.Width > rect.Height) {  	g.SmoothingMode = SmoothingMode.HighQuality;  	g.FillEllipse (b' new RectangleF (rect.Left' rect.Top' rect.Height' rect.Height));  	g.FillEllipse (b' new RectangleF (rect.Left + rect.Width - rect.Height' rect.Top' rect.Height' rect.Height));  	float w = rect.Width - rect.Height;  	float l = rect.Left + ((rect.Height) / 2);  	g.FillRectangle (b' new RectangleF (l' rect.Top' w' rect.Height));  	g.SmoothingMode = SmoothingMode.Default;  }  else if (rect.Width < rect.Height) {  	g.SmoothingMode = SmoothingMode.HighQuality;  	g.FillEllipse (b' new RectangleF (rect.Left' rect.Top' rect.Width' rect.Width));  	g.FillEllipse (b' new RectangleF (rect.Left' rect.Top + rect.Height - rect.Width' rect.Width' rect.Width));  	float t = rect.Top + (rect.Width / 2);  	float h = rect.Height - rect.Width;  	g.FillRectangle (b' new RectangleF (rect.Left' t' rect.Width' h));  	g.SmoothingMode = SmoothingMode.Default;  }  else if (rect.Width == rect.Height) {  	g.SmoothingMode = SmoothingMode.HighQuality;  	g.FillEllipse (b' rect);  	g.SmoothingMode = SmoothingMode.Default;  }  
Magic Number,CRC.Controls,DrawMacStyleHelper,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\DrawMacStyleHelper.cs,FillPill,The following statement contains a magic number: if (rect.Width < rect.Height) {  	g.SmoothingMode = SmoothingMode.HighQuality;  	g.FillEllipse (b' new RectangleF (rect.Left' rect.Top' rect.Width' rect.Width));  	g.FillEllipse (b' new RectangleF (rect.Left' rect.Top + rect.Height - rect.Width' rect.Width' rect.Width));  	float t = rect.Top + (rect.Width / 2);  	float h = rect.Height - rect.Width;  	g.FillRectangle (b' new RectangleF (rect.Left' t' rect.Width' h));  	g.SmoothingMode = SmoothingMode.Default;  }  else if (rect.Width == rect.Height) {  	g.SmoothingMode = SmoothingMode.HighQuality;  	g.FillEllipse (b' rect);  	g.SmoothingMode = SmoothingMode.Default;  }  
Magic Number,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,MacTrackBar,The following statement contains a magic number: ForeColor = Color.FromArgb (123' 125' 123);  
Magic Number,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,MacTrackBar,The following statement contains a magic number: ForeColor = Color.FromArgb (123' 125' 123);  
Magic Number,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,MacTrackBar,The following statement contains a magic number: ForeColor = Color.FromArgb (123' 125' 123);  
Magic Number,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,MacTrackBar,The following statement contains a magic number: _tickColor = Color.FromArgb (148' 146' 148);  
Magic Number,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,MacTrackBar,The following statement contains a magic number: _tickColor = Color.FromArgb (148' 146' 148);  
Magic Number,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,MacTrackBar,The following statement contains a magic number: _tickColor = Color.FromArgb (148' 146' 148);  
Magic Number,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,MacTrackBar,The following statement contains a magic number: _tickHeight = 4;  
Magic Number,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,MacTrackBar,The following statement contains a magic number: _trackerColor = Color.FromArgb (24' 130' 198);  
Magic Number,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,MacTrackBar,The following statement contains a magic number: _trackerColor = Color.FromArgb (24' 130' 198);  
Magic Number,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,MacTrackBar,The following statement contains a magic number: _trackerColor = Color.FromArgb (24' 130' 198);  
Magic Number,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,MacTrackBar,The following statement contains a magic number: _trackerSize = new Size (16' 16);  
Magic Number,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,MacTrackBar,The following statement contains a magic number: _trackerSize = new Size (16' 16);  
Magic Number,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,MacTrackBar,The following statement contains a magic number: _indentWidth = 6;  
Magic Number,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,MacTrackBar,The following statement contains a magic number: _indentHeight = 6;  
Magic Number,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,MacTrackBar,The following statement contains a magic number: _trackLineColor = Color.FromArgb (90' 93' 90);  
Magic Number,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,MacTrackBar,The following statement contains a magic number: _trackLineColor = Color.FromArgb (90' 93' 90);  
Magic Number,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,MacTrackBar,The following statement contains a magic number: _trackLineColor = Color.FromArgb (90' 93' 90);  
Magic Number,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,MacTrackBar,The following statement contains a magic number: _trackLineHeight = 3;  
Magic Number,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,ResetAppearance,The following statement contains a magic number: ForeColor = Color.FromArgb (123' 125' 123);  
Magic Number,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,ResetAppearance,The following statement contains a magic number: ForeColor = Color.FromArgb (123' 125' 123);  
Magic Number,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,ResetAppearance,The following statement contains a magic number: ForeColor = Color.FromArgb (123' 125' 123);  
Magic Number,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,ResetAppearance,The following statement contains a magic number: _tickColor = Color.FromArgb (148' 146' 148);  
Magic Number,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,ResetAppearance,The following statement contains a magic number: _tickColor = Color.FromArgb (148' 146' 148);  
Magic Number,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,ResetAppearance,The following statement contains a magic number: _tickColor = Color.FromArgb (148' 146' 148);  
Magic Number,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,ResetAppearance,The following statement contains a magic number: _tickHeight = 4;  
Magic Number,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,ResetAppearance,The following statement contains a magic number: _trackerColor = Color.FromArgb (24' 130' 198);  
Magic Number,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,ResetAppearance,The following statement contains a magic number: _trackerColor = Color.FromArgb (24' 130' 198);  
Magic Number,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,ResetAppearance,The following statement contains a magic number: _trackerColor = Color.FromArgb (24' 130' 198);  
Magic Number,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,ResetAppearance,The following statement contains a magic number: _trackerSize = new Size (16' 16);  
Magic Number,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,ResetAppearance,The following statement contains a magic number: _trackerSize = new Size (16' 16);  
Magic Number,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,ResetAppearance,The following statement contains a magic number: _indentWidth = 6;  
Magic Number,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,ResetAppearance,The following statement contains a magic number: _indentHeight = 6;  
Magic Number,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,ResetAppearance,The following statement contains a magic number: _trackLineColor = Color.FromArgb (90' 93' 90);  
Magic Number,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,ResetAppearance,The following statement contains a magic number: _trackLineColor = Color.FromArgb (90' 93' 90);  
Magic Number,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,ResetAppearance,The following statement contains a magic number: _trackLineColor = Color.FromArgb (90' 93' 90);  
Magic Number,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,ResetAppearance,The following statement contains a magic number: _trackLineHeight = 3;  
Magic Number,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,OnPaint,The following statement contains a magic number: if (_orientation == Orientation.Horizontal) {  	currentUsedPos = _indentHeight;  	//==========================================================================  	// Get Height of Text Area  	textAreaSize = e.Graphics.MeasureString (_maximum.ToString ()' this.Font).Height;  	if (_textTickStyle == TickStyle.TopLeft || _textTickStyle == TickStyle.Both) {  		//==========================================================================  		// Draw the 1st Text Line.  		//==========================================================================  		drawRect = new RectangleF (workingRect.Left' currentUsedPos' workingRect.Width' textAreaSize);  		drawRect.Inflate (-_trackerSize.Width / 2' 0);  		currentUsedPos += textAreaSize;  		DrawTickTextLine (e.Graphics' drawRect' _tickFrequency' _minimum' _maximum' this.ForeColor' this.Font' _orientation);  		//==========================================================================  	}  	if (_tickStyle == TickStyle.TopLeft || _tickStyle == TickStyle.Both) {  		//==========================================================================  		// Draw the 1st Tick Line.  		//==========================================================================  		drawRect = new RectangleF (workingRect.Left' currentUsedPos' workingRect.Width' _tickHeight);  		drawRect.Inflate (-_trackerSize.Width / 2' 0);  		currentUsedPos += _tickHeight + 1;  		DrawTickLine (e.Graphics' drawRect' _tickFrequency' _minimum' _maximum' _tickColor' _orientation);  		//==========================================================================  	}  	//==========================================================================  	// Caculate the Tracker's rectangle  	//==========================================================================  	float currentTrackerPos;  	if (_maximum == _minimum)  		currentTrackerPos = workingRect.Left;  	else  		currentTrackerPos = (workingRect.Width - _trackerSize.Width) * (_value - _minimum) / (_maximum - _minimum) + workingRect.Left;  	_trackerRect = new RectangleF (currentTrackerPos' currentUsedPos' _trackerSize.Width' _trackerSize.Height);  	// Remember this for drawing the Tracker later  	//_trackerRect.Inflate(0'-1);  	//==========================================================================  	// Draw the Track Line  	//==========================================================================  	drawRect = new RectangleF (workingRect.Left' currentUsedPos + _trackerSize.Height / 2 - _trackLineHeight / 2' workingRect.Width' _trackLineHeight);  	DrawTrackLine (e.Graphics' drawRect);  	currentUsedPos += _trackerSize.Height;  	//==========================================================================  	if (_tickStyle == TickStyle.BottomRight || _tickStyle == TickStyle.Both) {  		//==========================================================================  		// Draw the 2st Tick Line.  		//==========================================================================  		currentUsedPos += 1;  		drawRect = new RectangleF (workingRect.Left' currentUsedPos' workingRect.Width' _tickHeight);  		drawRect.Inflate (-_trackerSize.Width / 2' 0);  		currentUsedPos += _tickHeight;  		DrawTickLine (e.Graphics' drawRect' _tickFrequency' _minimum' _maximum' _tickColor' _orientation);  		//==========================================================================  	}  	if (_textTickStyle == TickStyle.BottomRight || _textTickStyle == TickStyle.Both) {  		//==========================================================================  		// Draw the 2st Text Line.  		//==========================================================================  		// Get Height of Text Area  		drawRect = new RectangleF (workingRect.Left' currentUsedPos' workingRect.Width' textAreaSize);  		drawRect.Inflate (-_trackerSize.Width / 2' 0);  		currentUsedPos += textAreaSize;  		DrawTickTextLine (e.Graphics' drawRect' _tickFrequency' _minimum' _maximum' this.ForeColor' this.Font' _orientation);  		//==========================================================================  	}  }  else//_orientation == Orientation.Vertical   {  	currentUsedPos = _indentWidth;  	//==========================================================================  	// Get Width of Text Area  	textAreaSize = e.Graphics.MeasureString (_maximum.ToString ()' this.Font).Width;  	if (_textTickStyle == TickStyle.TopLeft || _textTickStyle == TickStyle.Both) {  		//==========================================================================  		// Draw the 1st Text Line.  		//==========================================================================  		// Get Height of Text Area  		drawRect = new RectangleF (currentUsedPos' workingRect.Top' textAreaSize' workingRect.Height);  		drawRect.Inflate (0' -_trackerSize.Width / 2);  		currentUsedPos += textAreaSize;  		DrawTickTextLine (e.Graphics' drawRect' _tickFrequency' _minimum' _maximum' this.ForeColor' this.Font' _orientation);  		//==========================================================================  	}  	if (_tickStyle == TickStyle.TopLeft || _tickStyle == TickStyle.Both) {  		//==========================================================================  		// Draw the 1st Tick Line.  		//==========================================================================  		drawRect = new RectangleF (currentUsedPos' workingRect.Top' _tickHeight' workingRect.Height);  		drawRect.Inflate (0' -_trackerSize.Width / 2);  		currentUsedPos += _tickHeight + 1;  		DrawTickLine (e.Graphics' drawRect' _tickFrequency' _minimum' _maximum' _tickColor' _orientation);  		//==========================================================================  	}  	//==========================================================================  	// Caculate the Tracker's rectangle  	//==========================================================================  	float currentTrackerPos;  	if (_maximum == _minimum)  		currentTrackerPos = workingRect.Top;  	else  		currentTrackerPos = (workingRect.Height - _trackerSize.Width) * (_value - _minimum) / (_maximum - _minimum);  	_trackerRect = new RectangleF (currentUsedPos' workingRect.Bottom - currentTrackerPos - _trackerSize.Width' _trackerSize.Height' _trackerSize.Width);  	// Remember this for drawing the Tracker later  	//_trackerRect.Inflate(-1'0);  	rectTemp = _trackerRect;  	//Testing  	//==========================================================================  	// Draw the Track Line  	//==========================================================================  	drawRect = new RectangleF (currentUsedPos + _trackerSize.Height / 2 - _trackLineHeight / 2' workingRect.Top' _trackLineHeight' workingRect.Height);  	DrawTrackLine (e.Graphics' drawRect);  	currentUsedPos += _trackerSize.Height;  	//==========================================================================  	if (_tickStyle == TickStyle.BottomRight || _tickStyle == TickStyle.Both) {  		//==========================================================================  		// Draw the 2st Tick Line.  		//==========================================================================  		currentUsedPos += 1;  		drawRect = new RectangleF (currentUsedPos' workingRect.Top' _tickHeight' workingRect.Height);  		drawRect.Inflate (0' -_trackerSize.Width / 2);  		currentUsedPos += _tickHeight;  		DrawTickLine (e.Graphics' drawRect' _tickFrequency' _minimum' _maximum' _tickColor' _orientation);  		//==========================================================================  	}  	if (_textTickStyle == TickStyle.BottomRight || _textTickStyle == TickStyle.Both) {  		//==========================================================================  		// Draw the 2st Text Line.  		//==========================================================================  		// Get Height of Text Area  		drawRect = new RectangleF (currentUsedPos' workingRect.Top' textAreaSize' workingRect.Height);  		drawRect.Inflate (0' -_trackerSize.Width / 2);  		currentUsedPos += textAreaSize;  		DrawTickTextLine (e.Graphics' drawRect' _tickFrequency' _minimum' _maximum' this.ForeColor' this.Font' _orientation);  		//==========================================================================  	}  }  
Magic Number,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,OnPaint,The following statement contains a magic number: if (_orientation == Orientation.Horizontal) {  	currentUsedPos = _indentHeight;  	//==========================================================================  	// Get Height of Text Area  	textAreaSize = e.Graphics.MeasureString (_maximum.ToString ()' this.Font).Height;  	if (_textTickStyle == TickStyle.TopLeft || _textTickStyle == TickStyle.Both) {  		//==========================================================================  		// Draw the 1st Text Line.  		//==========================================================================  		drawRect = new RectangleF (workingRect.Left' currentUsedPos' workingRect.Width' textAreaSize);  		drawRect.Inflate (-_trackerSize.Width / 2' 0);  		currentUsedPos += textAreaSize;  		DrawTickTextLine (e.Graphics' drawRect' _tickFrequency' _minimum' _maximum' this.ForeColor' this.Font' _orientation);  		//==========================================================================  	}  	if (_tickStyle == TickStyle.TopLeft || _tickStyle == TickStyle.Both) {  		//==========================================================================  		// Draw the 1st Tick Line.  		//==========================================================================  		drawRect = new RectangleF (workingRect.Left' currentUsedPos' workingRect.Width' _tickHeight);  		drawRect.Inflate (-_trackerSize.Width / 2' 0);  		currentUsedPos += _tickHeight + 1;  		DrawTickLine (e.Graphics' drawRect' _tickFrequency' _minimum' _maximum' _tickColor' _orientation);  		//==========================================================================  	}  	//==========================================================================  	// Caculate the Tracker's rectangle  	//==========================================================================  	float currentTrackerPos;  	if (_maximum == _minimum)  		currentTrackerPos = workingRect.Left;  	else  		currentTrackerPos = (workingRect.Width - _trackerSize.Width) * (_value - _minimum) / (_maximum - _minimum) + workingRect.Left;  	_trackerRect = new RectangleF (currentTrackerPos' currentUsedPos' _trackerSize.Width' _trackerSize.Height);  	// Remember this for drawing the Tracker later  	//_trackerRect.Inflate(0'-1);  	//==========================================================================  	// Draw the Track Line  	//==========================================================================  	drawRect = new RectangleF (workingRect.Left' currentUsedPos + _trackerSize.Height / 2 - _trackLineHeight / 2' workingRect.Width' _trackLineHeight);  	DrawTrackLine (e.Graphics' drawRect);  	currentUsedPos += _trackerSize.Height;  	//==========================================================================  	if (_tickStyle == TickStyle.BottomRight || _tickStyle == TickStyle.Both) {  		//==========================================================================  		// Draw the 2st Tick Line.  		//==========================================================================  		currentUsedPos += 1;  		drawRect = new RectangleF (workingRect.Left' currentUsedPos' workingRect.Width' _tickHeight);  		drawRect.Inflate (-_trackerSize.Width / 2' 0);  		currentUsedPos += _tickHeight;  		DrawTickLine (e.Graphics' drawRect' _tickFrequency' _minimum' _maximum' _tickColor' _orientation);  		//==========================================================================  	}  	if (_textTickStyle == TickStyle.BottomRight || _textTickStyle == TickStyle.Both) {  		//==========================================================================  		// Draw the 2st Text Line.  		//==========================================================================  		// Get Height of Text Area  		drawRect = new RectangleF (workingRect.Left' currentUsedPos' workingRect.Width' textAreaSize);  		drawRect.Inflate (-_trackerSize.Width / 2' 0);  		currentUsedPos += textAreaSize;  		DrawTickTextLine (e.Graphics' drawRect' _tickFrequency' _minimum' _maximum' this.ForeColor' this.Font' _orientation);  		//==========================================================================  	}  }  else//_orientation == Orientation.Vertical   {  	currentUsedPos = _indentWidth;  	//==========================================================================  	// Get Width of Text Area  	textAreaSize = e.Graphics.MeasureString (_maximum.ToString ()' this.Font).Width;  	if (_textTickStyle == TickStyle.TopLeft || _textTickStyle == TickStyle.Both) {  		//==========================================================================  		// Draw the 1st Text Line.  		//==========================================================================  		// Get Height of Text Area  		drawRect = new RectangleF (currentUsedPos' workingRect.Top' textAreaSize' workingRect.Height);  		drawRect.Inflate (0' -_trackerSize.Width / 2);  		currentUsedPos += textAreaSize;  		DrawTickTextLine (e.Graphics' drawRect' _tickFrequency' _minimum' _maximum' this.ForeColor' this.Font' _orientation);  		//==========================================================================  	}  	if (_tickStyle == TickStyle.TopLeft || _tickStyle == TickStyle.Both) {  		//==========================================================================  		// Draw the 1st Tick Line.  		//==========================================================================  		drawRect = new RectangleF (currentUsedPos' workingRect.Top' _tickHeight' workingRect.Height);  		drawRect.Inflate (0' -_trackerSize.Width / 2);  		currentUsedPos += _tickHeight + 1;  		DrawTickLine (e.Graphics' drawRect' _tickFrequency' _minimum' _maximum' _tickColor' _orientation);  		//==========================================================================  	}  	//==========================================================================  	// Caculate the Tracker's rectangle  	//==========================================================================  	float currentTrackerPos;  	if (_maximum == _minimum)  		currentTrackerPos = workingRect.Top;  	else  		currentTrackerPos = (workingRect.Height - _trackerSize.Width) * (_value - _minimum) / (_maximum - _minimum);  	_trackerRect = new RectangleF (currentUsedPos' workingRect.Bottom - currentTrackerPos - _trackerSize.Width' _trackerSize.Height' _trackerSize.Width);  	// Remember this for drawing the Tracker later  	//_trackerRect.Inflate(-1'0);  	rectTemp = _trackerRect;  	//Testing  	//==========================================================================  	// Draw the Track Line  	//==========================================================================  	drawRect = new RectangleF (currentUsedPos + _trackerSize.Height / 2 - _trackLineHeight / 2' workingRect.Top' _trackLineHeight' workingRect.Height);  	DrawTrackLine (e.Graphics' drawRect);  	currentUsedPos += _trackerSize.Height;  	//==========================================================================  	if (_tickStyle == TickStyle.BottomRight || _tickStyle == TickStyle.Both) {  		//==========================================================================  		// Draw the 2st Tick Line.  		//==========================================================================  		currentUsedPos += 1;  		drawRect = new RectangleF (currentUsedPos' workingRect.Top' _tickHeight' workingRect.Height);  		drawRect.Inflate (0' -_trackerSize.Width / 2);  		currentUsedPos += _tickHeight;  		DrawTickLine (e.Graphics' drawRect' _tickFrequency' _minimum' _maximum' _tickColor' _orientation);  		//==========================================================================  	}  	if (_textTickStyle == TickStyle.BottomRight || _textTickStyle == TickStyle.Both) {  		//==========================================================================  		// Draw the 2st Text Line.  		//==========================================================================  		// Get Height of Text Area  		drawRect = new RectangleF (currentUsedPos' workingRect.Top' textAreaSize' workingRect.Height);  		drawRect.Inflate (0' -_trackerSize.Width / 2);  		currentUsedPos += textAreaSize;  		DrawTickTextLine (e.Graphics' drawRect' _tickFrequency' _minimum' _maximum' this.ForeColor' this.Font' _orientation);  		//==========================================================================  	}  }  
Magic Number,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,OnPaint,The following statement contains a magic number: if (_orientation == Orientation.Horizontal) {  	currentUsedPos = _indentHeight;  	//==========================================================================  	// Get Height of Text Area  	textAreaSize = e.Graphics.MeasureString (_maximum.ToString ()' this.Font).Height;  	if (_textTickStyle == TickStyle.TopLeft || _textTickStyle == TickStyle.Both) {  		//==========================================================================  		// Draw the 1st Text Line.  		//==========================================================================  		drawRect = new RectangleF (workingRect.Left' currentUsedPos' workingRect.Width' textAreaSize);  		drawRect.Inflate (-_trackerSize.Width / 2' 0);  		currentUsedPos += textAreaSize;  		DrawTickTextLine (e.Graphics' drawRect' _tickFrequency' _minimum' _maximum' this.ForeColor' this.Font' _orientation);  		//==========================================================================  	}  	if (_tickStyle == TickStyle.TopLeft || _tickStyle == TickStyle.Both) {  		//==========================================================================  		// Draw the 1st Tick Line.  		//==========================================================================  		drawRect = new RectangleF (workingRect.Left' currentUsedPos' workingRect.Width' _tickHeight);  		drawRect.Inflate (-_trackerSize.Width / 2' 0);  		currentUsedPos += _tickHeight + 1;  		DrawTickLine (e.Graphics' drawRect' _tickFrequency' _minimum' _maximum' _tickColor' _orientation);  		//==========================================================================  	}  	//==========================================================================  	// Caculate the Tracker's rectangle  	//==========================================================================  	float currentTrackerPos;  	if (_maximum == _minimum)  		currentTrackerPos = workingRect.Left;  	else  		currentTrackerPos = (workingRect.Width - _trackerSize.Width) * (_value - _minimum) / (_maximum - _minimum) + workingRect.Left;  	_trackerRect = new RectangleF (currentTrackerPos' currentUsedPos' _trackerSize.Width' _trackerSize.Height);  	// Remember this for drawing the Tracker later  	//_trackerRect.Inflate(0'-1);  	//==========================================================================  	// Draw the Track Line  	//==========================================================================  	drawRect = new RectangleF (workingRect.Left' currentUsedPos + _trackerSize.Height / 2 - _trackLineHeight / 2' workingRect.Width' _trackLineHeight);  	DrawTrackLine (e.Graphics' drawRect);  	currentUsedPos += _trackerSize.Height;  	//==========================================================================  	if (_tickStyle == TickStyle.BottomRight || _tickStyle == TickStyle.Both) {  		//==========================================================================  		// Draw the 2st Tick Line.  		//==========================================================================  		currentUsedPos += 1;  		drawRect = new RectangleF (workingRect.Left' currentUsedPos' workingRect.Width' _tickHeight);  		drawRect.Inflate (-_trackerSize.Width / 2' 0);  		currentUsedPos += _tickHeight;  		DrawTickLine (e.Graphics' drawRect' _tickFrequency' _minimum' _maximum' _tickColor' _orientation);  		//==========================================================================  	}  	if (_textTickStyle == TickStyle.BottomRight || _textTickStyle == TickStyle.Both) {  		//==========================================================================  		// Draw the 2st Text Line.  		//==========================================================================  		// Get Height of Text Area  		drawRect = new RectangleF (workingRect.Left' currentUsedPos' workingRect.Width' textAreaSize);  		drawRect.Inflate (-_trackerSize.Width / 2' 0);  		currentUsedPos += textAreaSize;  		DrawTickTextLine (e.Graphics' drawRect' _tickFrequency' _minimum' _maximum' this.ForeColor' this.Font' _orientation);  		//==========================================================================  	}  }  else//_orientation == Orientation.Vertical   {  	currentUsedPos = _indentWidth;  	//==========================================================================  	// Get Width of Text Area  	textAreaSize = e.Graphics.MeasureString (_maximum.ToString ()' this.Font).Width;  	if (_textTickStyle == TickStyle.TopLeft || _textTickStyle == TickStyle.Both) {  		//==========================================================================  		// Draw the 1st Text Line.  		//==========================================================================  		// Get Height of Text Area  		drawRect = new RectangleF (currentUsedPos' workingRect.Top' textAreaSize' workingRect.Height);  		drawRect.Inflate (0' -_trackerSize.Width / 2);  		currentUsedPos += textAreaSize;  		DrawTickTextLine (e.Graphics' drawRect' _tickFrequency' _minimum' _maximum' this.ForeColor' this.Font' _orientation);  		//==========================================================================  	}  	if (_tickStyle == TickStyle.TopLeft || _tickStyle == TickStyle.Both) {  		//==========================================================================  		// Draw the 1st Tick Line.  		//==========================================================================  		drawRect = new RectangleF (currentUsedPos' workingRect.Top' _tickHeight' workingRect.Height);  		drawRect.Inflate (0' -_trackerSize.Width / 2);  		currentUsedPos += _tickHeight + 1;  		DrawTickLine (e.Graphics' drawRect' _tickFrequency' _minimum' _maximum' _tickColor' _orientation);  		//==========================================================================  	}  	//==========================================================================  	// Caculate the Tracker's rectangle  	//==========================================================================  	float currentTrackerPos;  	if (_maximum == _minimum)  		currentTrackerPos = workingRect.Top;  	else  		currentTrackerPos = (workingRect.Height - _trackerSize.Width) * (_value - _minimum) / (_maximum - _minimum);  	_trackerRect = new RectangleF (currentUsedPos' workingRect.Bottom - currentTrackerPos - _trackerSize.Width' _trackerSize.Height' _trackerSize.Width);  	// Remember this for drawing the Tracker later  	//_trackerRect.Inflate(-1'0);  	rectTemp = _trackerRect;  	//Testing  	//==========================================================================  	// Draw the Track Line  	//==========================================================================  	drawRect = new RectangleF (currentUsedPos + _trackerSize.Height / 2 - _trackLineHeight / 2' workingRect.Top' _trackLineHeight' workingRect.Height);  	DrawTrackLine (e.Graphics' drawRect);  	currentUsedPos += _trackerSize.Height;  	//==========================================================================  	if (_tickStyle == TickStyle.BottomRight || _tickStyle == TickStyle.Both) {  		//==========================================================================  		// Draw the 2st Tick Line.  		//==========================================================================  		currentUsedPos += 1;  		drawRect = new RectangleF (currentUsedPos' workingRect.Top' _tickHeight' workingRect.Height);  		drawRect.Inflate (0' -_trackerSize.Width / 2);  		currentUsedPos += _tickHeight;  		DrawTickLine (e.Graphics' drawRect' _tickFrequency' _minimum' _maximum' _tickColor' _orientation);  		//==========================================================================  	}  	if (_textTickStyle == TickStyle.BottomRight || _textTickStyle == TickStyle.Both) {  		//==========================================================================  		// Draw the 2st Text Line.  		//==========================================================================  		// Get Height of Text Area  		drawRect = new RectangleF (currentUsedPos' workingRect.Top' textAreaSize' workingRect.Height);  		drawRect.Inflate (0' -_trackerSize.Width / 2);  		currentUsedPos += textAreaSize;  		DrawTickTextLine (e.Graphics' drawRect' _tickFrequency' _minimum' _maximum' this.ForeColor' this.Font' _orientation);  		//==========================================================================  	}  }  
Magic Number,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,OnPaint,The following statement contains a magic number: if (_orientation == Orientation.Horizontal) {  	currentUsedPos = _indentHeight;  	//==========================================================================  	// Get Height of Text Area  	textAreaSize = e.Graphics.MeasureString (_maximum.ToString ()' this.Font).Height;  	if (_textTickStyle == TickStyle.TopLeft || _textTickStyle == TickStyle.Both) {  		//==========================================================================  		// Draw the 1st Text Line.  		//==========================================================================  		drawRect = new RectangleF (workingRect.Left' currentUsedPos' workingRect.Width' textAreaSize);  		drawRect.Inflate (-_trackerSize.Width / 2' 0);  		currentUsedPos += textAreaSize;  		DrawTickTextLine (e.Graphics' drawRect' _tickFrequency' _minimum' _maximum' this.ForeColor' this.Font' _orientation);  		//==========================================================================  	}  	if (_tickStyle == TickStyle.TopLeft || _tickStyle == TickStyle.Both) {  		//==========================================================================  		// Draw the 1st Tick Line.  		//==========================================================================  		drawRect = new RectangleF (workingRect.Left' currentUsedPos' workingRect.Width' _tickHeight);  		drawRect.Inflate (-_trackerSize.Width / 2' 0);  		currentUsedPos += _tickHeight + 1;  		DrawTickLine (e.Graphics' drawRect' _tickFrequency' _minimum' _maximum' _tickColor' _orientation);  		//==========================================================================  	}  	//==========================================================================  	// Caculate the Tracker's rectangle  	//==========================================================================  	float currentTrackerPos;  	if (_maximum == _minimum)  		currentTrackerPos = workingRect.Left;  	else  		currentTrackerPos = (workingRect.Width - _trackerSize.Width) * (_value - _minimum) / (_maximum - _minimum) + workingRect.Left;  	_trackerRect = new RectangleF (currentTrackerPos' currentUsedPos' _trackerSize.Width' _trackerSize.Height);  	// Remember this for drawing the Tracker later  	//_trackerRect.Inflate(0'-1);  	//==========================================================================  	// Draw the Track Line  	//==========================================================================  	drawRect = new RectangleF (workingRect.Left' currentUsedPos + _trackerSize.Height / 2 - _trackLineHeight / 2' workingRect.Width' _trackLineHeight);  	DrawTrackLine (e.Graphics' drawRect);  	currentUsedPos += _trackerSize.Height;  	//==========================================================================  	if (_tickStyle == TickStyle.BottomRight || _tickStyle == TickStyle.Both) {  		//==========================================================================  		// Draw the 2st Tick Line.  		//==========================================================================  		currentUsedPos += 1;  		drawRect = new RectangleF (workingRect.Left' currentUsedPos' workingRect.Width' _tickHeight);  		drawRect.Inflate (-_trackerSize.Width / 2' 0);  		currentUsedPos += _tickHeight;  		DrawTickLine (e.Graphics' drawRect' _tickFrequency' _minimum' _maximum' _tickColor' _orientation);  		//==========================================================================  	}  	if (_textTickStyle == TickStyle.BottomRight || _textTickStyle == TickStyle.Both) {  		//==========================================================================  		// Draw the 2st Text Line.  		//==========================================================================  		// Get Height of Text Area  		drawRect = new RectangleF (workingRect.Left' currentUsedPos' workingRect.Width' textAreaSize);  		drawRect.Inflate (-_trackerSize.Width / 2' 0);  		currentUsedPos += textAreaSize;  		DrawTickTextLine (e.Graphics' drawRect' _tickFrequency' _minimum' _maximum' this.ForeColor' this.Font' _orientation);  		//==========================================================================  	}  }  else//_orientation == Orientation.Vertical   {  	currentUsedPos = _indentWidth;  	//==========================================================================  	// Get Width of Text Area  	textAreaSize = e.Graphics.MeasureString (_maximum.ToString ()' this.Font).Width;  	if (_textTickStyle == TickStyle.TopLeft || _textTickStyle == TickStyle.Both) {  		//==========================================================================  		// Draw the 1st Text Line.  		//==========================================================================  		// Get Height of Text Area  		drawRect = new RectangleF (currentUsedPos' workingRect.Top' textAreaSize' workingRect.Height);  		drawRect.Inflate (0' -_trackerSize.Width / 2);  		currentUsedPos += textAreaSize;  		DrawTickTextLine (e.Graphics' drawRect' _tickFrequency' _minimum' _maximum' this.ForeColor' this.Font' _orientation);  		//==========================================================================  	}  	if (_tickStyle == TickStyle.TopLeft || _tickStyle == TickStyle.Both) {  		//==========================================================================  		// Draw the 1st Tick Line.  		//==========================================================================  		drawRect = new RectangleF (currentUsedPos' workingRect.Top' _tickHeight' workingRect.Height);  		drawRect.Inflate (0' -_trackerSize.Width / 2);  		currentUsedPos += _tickHeight + 1;  		DrawTickLine (e.Graphics' drawRect' _tickFrequency' _minimum' _maximum' _tickColor' _orientation);  		//==========================================================================  	}  	//==========================================================================  	// Caculate the Tracker's rectangle  	//==========================================================================  	float currentTrackerPos;  	if (_maximum == _minimum)  		currentTrackerPos = workingRect.Top;  	else  		currentTrackerPos = (workingRect.Height - _trackerSize.Width) * (_value - _minimum) / (_maximum - _minimum);  	_trackerRect = new RectangleF (currentUsedPos' workingRect.Bottom - currentTrackerPos - _trackerSize.Width' _trackerSize.Height' _trackerSize.Width);  	// Remember this for drawing the Tracker later  	//_trackerRect.Inflate(-1'0);  	rectTemp = _trackerRect;  	//Testing  	//==========================================================================  	// Draw the Track Line  	//==========================================================================  	drawRect = new RectangleF (currentUsedPos + _trackerSize.Height / 2 - _trackLineHeight / 2' workingRect.Top' _trackLineHeight' workingRect.Height);  	DrawTrackLine (e.Graphics' drawRect);  	currentUsedPos += _trackerSize.Height;  	//==========================================================================  	if (_tickStyle == TickStyle.BottomRight || _tickStyle == TickStyle.Both) {  		//==========================================================================  		// Draw the 2st Tick Line.  		//==========================================================================  		currentUsedPos += 1;  		drawRect = new RectangleF (currentUsedPos' workingRect.Top' _tickHeight' workingRect.Height);  		drawRect.Inflate (0' -_trackerSize.Width / 2);  		currentUsedPos += _tickHeight;  		DrawTickLine (e.Graphics' drawRect' _tickFrequency' _minimum' _maximum' _tickColor' _orientation);  		//==========================================================================  	}  	if (_textTickStyle == TickStyle.BottomRight || _textTickStyle == TickStyle.Both) {  		//==========================================================================  		// Draw the 2st Text Line.  		//==========================================================================  		// Get Height of Text Area  		drawRect = new RectangleF (currentUsedPos' workingRect.Top' textAreaSize' workingRect.Height);  		drawRect.Inflate (0' -_trackerSize.Width / 2);  		currentUsedPos += textAreaSize;  		DrawTickTextLine (e.Graphics' drawRect' _tickFrequency' _minimum' _maximum' this.ForeColor' this.Font' _orientation);  		//==========================================================================  	}  }  
Magic Number,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,OnPaint,The following statement contains a magic number: if (_orientation == Orientation.Horizontal) {  	currentUsedPos = _indentHeight;  	//==========================================================================  	// Get Height of Text Area  	textAreaSize = e.Graphics.MeasureString (_maximum.ToString ()' this.Font).Height;  	if (_textTickStyle == TickStyle.TopLeft || _textTickStyle == TickStyle.Both) {  		//==========================================================================  		// Draw the 1st Text Line.  		//==========================================================================  		drawRect = new RectangleF (workingRect.Left' currentUsedPos' workingRect.Width' textAreaSize);  		drawRect.Inflate (-_trackerSize.Width / 2' 0);  		currentUsedPos += textAreaSize;  		DrawTickTextLine (e.Graphics' drawRect' _tickFrequency' _minimum' _maximum' this.ForeColor' this.Font' _orientation);  		//==========================================================================  	}  	if (_tickStyle == TickStyle.TopLeft || _tickStyle == TickStyle.Both) {  		//==========================================================================  		// Draw the 1st Tick Line.  		//==========================================================================  		drawRect = new RectangleF (workingRect.Left' currentUsedPos' workingRect.Width' _tickHeight);  		drawRect.Inflate (-_trackerSize.Width / 2' 0);  		currentUsedPos += _tickHeight + 1;  		DrawTickLine (e.Graphics' drawRect' _tickFrequency' _minimum' _maximum' _tickColor' _orientation);  		//==========================================================================  	}  	//==========================================================================  	// Caculate the Tracker's rectangle  	//==========================================================================  	float currentTrackerPos;  	if (_maximum == _minimum)  		currentTrackerPos = workingRect.Left;  	else  		currentTrackerPos = (workingRect.Width - _trackerSize.Width) * (_value - _minimum) / (_maximum - _minimum) + workingRect.Left;  	_trackerRect = new RectangleF (currentTrackerPos' currentUsedPos' _trackerSize.Width' _trackerSize.Height);  	// Remember this for drawing the Tracker later  	//_trackerRect.Inflate(0'-1);  	//==========================================================================  	// Draw the Track Line  	//==========================================================================  	drawRect = new RectangleF (workingRect.Left' currentUsedPos + _trackerSize.Height / 2 - _trackLineHeight / 2' workingRect.Width' _trackLineHeight);  	DrawTrackLine (e.Graphics' drawRect);  	currentUsedPos += _trackerSize.Height;  	//==========================================================================  	if (_tickStyle == TickStyle.BottomRight || _tickStyle == TickStyle.Both) {  		//==========================================================================  		// Draw the 2st Tick Line.  		//==========================================================================  		currentUsedPos += 1;  		drawRect = new RectangleF (workingRect.Left' currentUsedPos' workingRect.Width' _tickHeight);  		drawRect.Inflate (-_trackerSize.Width / 2' 0);  		currentUsedPos += _tickHeight;  		DrawTickLine (e.Graphics' drawRect' _tickFrequency' _minimum' _maximum' _tickColor' _orientation);  		//==========================================================================  	}  	if (_textTickStyle == TickStyle.BottomRight || _textTickStyle == TickStyle.Both) {  		//==========================================================================  		// Draw the 2st Text Line.  		//==========================================================================  		// Get Height of Text Area  		drawRect = new RectangleF (workingRect.Left' currentUsedPos' workingRect.Width' textAreaSize);  		drawRect.Inflate (-_trackerSize.Width / 2' 0);  		currentUsedPos += textAreaSize;  		DrawTickTextLine (e.Graphics' drawRect' _tickFrequency' _minimum' _maximum' this.ForeColor' this.Font' _orientation);  		//==========================================================================  	}  }  else//_orientation == Orientation.Vertical   {  	currentUsedPos = _indentWidth;  	//==========================================================================  	// Get Width of Text Area  	textAreaSize = e.Graphics.MeasureString (_maximum.ToString ()' this.Font).Width;  	if (_textTickStyle == TickStyle.TopLeft || _textTickStyle == TickStyle.Both) {  		//==========================================================================  		// Draw the 1st Text Line.  		//==========================================================================  		// Get Height of Text Area  		drawRect = new RectangleF (currentUsedPos' workingRect.Top' textAreaSize' workingRect.Height);  		drawRect.Inflate (0' -_trackerSize.Width / 2);  		currentUsedPos += textAreaSize;  		DrawTickTextLine (e.Graphics' drawRect' _tickFrequency' _minimum' _maximum' this.ForeColor' this.Font' _orientation);  		//==========================================================================  	}  	if (_tickStyle == TickStyle.TopLeft || _tickStyle == TickStyle.Both) {  		//==========================================================================  		// Draw the 1st Tick Line.  		//==========================================================================  		drawRect = new RectangleF (currentUsedPos' workingRect.Top' _tickHeight' workingRect.Height);  		drawRect.Inflate (0' -_trackerSize.Width / 2);  		currentUsedPos += _tickHeight + 1;  		DrawTickLine (e.Graphics' drawRect' _tickFrequency' _minimum' _maximum' _tickColor' _orientation);  		//==========================================================================  	}  	//==========================================================================  	// Caculate the Tracker's rectangle  	//==========================================================================  	float currentTrackerPos;  	if (_maximum == _minimum)  		currentTrackerPos = workingRect.Top;  	else  		currentTrackerPos = (workingRect.Height - _trackerSize.Width) * (_value - _minimum) / (_maximum - _minimum);  	_trackerRect = new RectangleF (currentUsedPos' workingRect.Bottom - currentTrackerPos - _trackerSize.Width' _trackerSize.Height' _trackerSize.Width);  	// Remember this for drawing the Tracker later  	//_trackerRect.Inflate(-1'0);  	rectTemp = _trackerRect;  	//Testing  	//==========================================================================  	// Draw the Track Line  	//==========================================================================  	drawRect = new RectangleF (currentUsedPos + _trackerSize.Height / 2 - _trackLineHeight / 2' workingRect.Top' _trackLineHeight' workingRect.Height);  	DrawTrackLine (e.Graphics' drawRect);  	currentUsedPos += _trackerSize.Height;  	//==========================================================================  	if (_tickStyle == TickStyle.BottomRight || _tickStyle == TickStyle.Both) {  		//==========================================================================  		// Draw the 2st Tick Line.  		//==========================================================================  		currentUsedPos += 1;  		drawRect = new RectangleF (currentUsedPos' workingRect.Top' _tickHeight' workingRect.Height);  		drawRect.Inflate (0' -_trackerSize.Width / 2);  		currentUsedPos += _tickHeight;  		DrawTickLine (e.Graphics' drawRect' _tickFrequency' _minimum' _maximum' _tickColor' _orientation);  		//==========================================================================  	}  	if (_textTickStyle == TickStyle.BottomRight || _textTickStyle == TickStyle.Both) {  		//==========================================================================  		// Draw the 2st Text Line.  		//==========================================================================  		// Get Height of Text Area  		drawRect = new RectangleF (currentUsedPos' workingRect.Top' textAreaSize' workingRect.Height);  		drawRect.Inflate (0' -_trackerSize.Width / 2);  		currentUsedPos += textAreaSize;  		DrawTickTextLine (e.Graphics' drawRect' _tickFrequency' _minimum' _maximum' this.ForeColor' this.Font' _orientation);  		//==========================================================================  	}  }  
Magic Number,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,OnPaint,The following statement contains a magic number: if (_orientation == Orientation.Horizontal) {  	currentUsedPos = _indentHeight;  	//==========================================================================  	// Get Height of Text Area  	textAreaSize = e.Graphics.MeasureString (_maximum.ToString ()' this.Font).Height;  	if (_textTickStyle == TickStyle.TopLeft || _textTickStyle == TickStyle.Both) {  		//==========================================================================  		// Draw the 1st Text Line.  		//==========================================================================  		drawRect = new RectangleF (workingRect.Left' currentUsedPos' workingRect.Width' textAreaSize);  		drawRect.Inflate (-_trackerSize.Width / 2' 0);  		currentUsedPos += textAreaSize;  		DrawTickTextLine (e.Graphics' drawRect' _tickFrequency' _minimum' _maximum' this.ForeColor' this.Font' _orientation);  		//==========================================================================  	}  	if (_tickStyle == TickStyle.TopLeft || _tickStyle == TickStyle.Both) {  		//==========================================================================  		// Draw the 1st Tick Line.  		//==========================================================================  		drawRect = new RectangleF (workingRect.Left' currentUsedPos' workingRect.Width' _tickHeight);  		drawRect.Inflate (-_trackerSize.Width / 2' 0);  		currentUsedPos += _tickHeight + 1;  		DrawTickLine (e.Graphics' drawRect' _tickFrequency' _minimum' _maximum' _tickColor' _orientation);  		//==========================================================================  	}  	//==========================================================================  	// Caculate the Tracker's rectangle  	//==========================================================================  	float currentTrackerPos;  	if (_maximum == _minimum)  		currentTrackerPos = workingRect.Left;  	else  		currentTrackerPos = (workingRect.Width - _trackerSize.Width) * (_value - _minimum) / (_maximum - _minimum) + workingRect.Left;  	_trackerRect = new RectangleF (currentTrackerPos' currentUsedPos' _trackerSize.Width' _trackerSize.Height);  	// Remember this for drawing the Tracker later  	//_trackerRect.Inflate(0'-1);  	//==========================================================================  	// Draw the Track Line  	//==========================================================================  	drawRect = new RectangleF (workingRect.Left' currentUsedPos + _trackerSize.Height / 2 - _trackLineHeight / 2' workingRect.Width' _trackLineHeight);  	DrawTrackLine (e.Graphics' drawRect);  	currentUsedPos += _trackerSize.Height;  	//==========================================================================  	if (_tickStyle == TickStyle.BottomRight || _tickStyle == TickStyle.Both) {  		//==========================================================================  		// Draw the 2st Tick Line.  		//==========================================================================  		currentUsedPos += 1;  		drawRect = new RectangleF (workingRect.Left' currentUsedPos' workingRect.Width' _tickHeight);  		drawRect.Inflate (-_trackerSize.Width / 2' 0);  		currentUsedPos += _tickHeight;  		DrawTickLine (e.Graphics' drawRect' _tickFrequency' _minimum' _maximum' _tickColor' _orientation);  		//==========================================================================  	}  	if (_textTickStyle == TickStyle.BottomRight || _textTickStyle == TickStyle.Both) {  		//==========================================================================  		// Draw the 2st Text Line.  		//==========================================================================  		// Get Height of Text Area  		drawRect = new RectangleF (workingRect.Left' currentUsedPos' workingRect.Width' textAreaSize);  		drawRect.Inflate (-_trackerSize.Width / 2' 0);  		currentUsedPos += textAreaSize;  		DrawTickTextLine (e.Graphics' drawRect' _tickFrequency' _minimum' _maximum' this.ForeColor' this.Font' _orientation);  		//==========================================================================  	}  }  else//_orientation == Orientation.Vertical   {  	currentUsedPos = _indentWidth;  	//==========================================================================  	// Get Width of Text Area  	textAreaSize = e.Graphics.MeasureString (_maximum.ToString ()' this.Font).Width;  	if (_textTickStyle == TickStyle.TopLeft || _textTickStyle == TickStyle.Both) {  		//==========================================================================  		// Draw the 1st Text Line.  		//==========================================================================  		// Get Height of Text Area  		drawRect = new RectangleF (currentUsedPos' workingRect.Top' textAreaSize' workingRect.Height);  		drawRect.Inflate (0' -_trackerSize.Width / 2);  		currentUsedPos += textAreaSize;  		DrawTickTextLine (e.Graphics' drawRect' _tickFrequency' _minimum' _maximum' this.ForeColor' this.Font' _orientation);  		//==========================================================================  	}  	if (_tickStyle == TickStyle.TopLeft || _tickStyle == TickStyle.Both) {  		//==========================================================================  		// Draw the 1st Tick Line.  		//==========================================================================  		drawRect = new RectangleF (currentUsedPos' workingRect.Top' _tickHeight' workingRect.Height);  		drawRect.Inflate (0' -_trackerSize.Width / 2);  		currentUsedPos += _tickHeight + 1;  		DrawTickLine (e.Graphics' drawRect' _tickFrequency' _minimum' _maximum' _tickColor' _orientation);  		//==========================================================================  	}  	//==========================================================================  	// Caculate the Tracker's rectangle  	//==========================================================================  	float currentTrackerPos;  	if (_maximum == _minimum)  		currentTrackerPos = workingRect.Top;  	else  		currentTrackerPos = (workingRect.Height - _trackerSize.Width) * (_value - _minimum) / (_maximum - _minimum);  	_trackerRect = new RectangleF (currentUsedPos' workingRect.Bottom - currentTrackerPos - _trackerSize.Width' _trackerSize.Height' _trackerSize.Width);  	// Remember this for drawing the Tracker later  	//_trackerRect.Inflate(-1'0);  	rectTemp = _trackerRect;  	//Testing  	//==========================================================================  	// Draw the Track Line  	//==========================================================================  	drawRect = new RectangleF (currentUsedPos + _trackerSize.Height / 2 - _trackLineHeight / 2' workingRect.Top' _trackLineHeight' workingRect.Height);  	DrawTrackLine (e.Graphics' drawRect);  	currentUsedPos += _trackerSize.Height;  	//==========================================================================  	if (_tickStyle == TickStyle.BottomRight || _tickStyle == TickStyle.Both) {  		//==========================================================================  		// Draw the 2st Tick Line.  		//==========================================================================  		currentUsedPos += 1;  		drawRect = new RectangleF (currentUsedPos' workingRect.Top' _tickHeight' workingRect.Height);  		drawRect.Inflate (0' -_trackerSize.Width / 2);  		currentUsedPos += _tickHeight;  		DrawTickLine (e.Graphics' drawRect' _tickFrequency' _minimum' _maximum' _tickColor' _orientation);  		//==========================================================================  	}  	if (_textTickStyle == TickStyle.BottomRight || _textTickStyle == TickStyle.Both) {  		//==========================================================================  		// Draw the 2st Text Line.  		//==========================================================================  		// Get Height of Text Area  		drawRect = new RectangleF (currentUsedPos' workingRect.Top' textAreaSize' workingRect.Height);  		drawRect.Inflate (0' -_trackerSize.Width / 2);  		currentUsedPos += textAreaSize;  		DrawTickTextLine (e.Graphics' drawRect' _tickFrequency' _minimum' _maximum' this.ForeColor' this.Font' _orientation);  		//==========================================================================  	}  }  
Magic Number,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,OnPaint,The following statement contains a magic number: if (_orientation == Orientation.Horizontal) {  	currentUsedPos = _indentHeight;  	//==========================================================================  	// Get Height of Text Area  	textAreaSize = e.Graphics.MeasureString (_maximum.ToString ()' this.Font).Height;  	if (_textTickStyle == TickStyle.TopLeft || _textTickStyle == TickStyle.Both) {  		//==========================================================================  		// Draw the 1st Text Line.  		//==========================================================================  		drawRect = new RectangleF (workingRect.Left' currentUsedPos' workingRect.Width' textAreaSize);  		drawRect.Inflate (-_trackerSize.Width / 2' 0);  		currentUsedPos += textAreaSize;  		DrawTickTextLine (e.Graphics' drawRect' _tickFrequency' _minimum' _maximum' this.ForeColor' this.Font' _orientation);  		//==========================================================================  	}  	if (_tickStyle == TickStyle.TopLeft || _tickStyle == TickStyle.Both) {  		//==========================================================================  		// Draw the 1st Tick Line.  		//==========================================================================  		drawRect = new RectangleF (workingRect.Left' currentUsedPos' workingRect.Width' _tickHeight);  		drawRect.Inflate (-_trackerSize.Width / 2' 0);  		currentUsedPos += _tickHeight + 1;  		DrawTickLine (e.Graphics' drawRect' _tickFrequency' _minimum' _maximum' _tickColor' _orientation);  		//==========================================================================  	}  	//==========================================================================  	// Caculate the Tracker's rectangle  	//==========================================================================  	float currentTrackerPos;  	if (_maximum == _minimum)  		currentTrackerPos = workingRect.Left;  	else  		currentTrackerPos = (workingRect.Width - _trackerSize.Width) * (_value - _minimum) / (_maximum - _minimum) + workingRect.Left;  	_trackerRect = new RectangleF (currentTrackerPos' currentUsedPos' _trackerSize.Width' _trackerSize.Height);  	// Remember this for drawing the Tracker later  	//_trackerRect.Inflate(0'-1);  	//==========================================================================  	// Draw the Track Line  	//==========================================================================  	drawRect = new RectangleF (workingRect.Left' currentUsedPos + _trackerSize.Height / 2 - _trackLineHeight / 2' workingRect.Width' _trackLineHeight);  	DrawTrackLine (e.Graphics' drawRect);  	currentUsedPos += _trackerSize.Height;  	//==========================================================================  	if (_tickStyle == TickStyle.BottomRight || _tickStyle == TickStyle.Both) {  		//==========================================================================  		// Draw the 2st Tick Line.  		//==========================================================================  		currentUsedPos += 1;  		drawRect = new RectangleF (workingRect.Left' currentUsedPos' workingRect.Width' _tickHeight);  		drawRect.Inflate (-_trackerSize.Width / 2' 0);  		currentUsedPos += _tickHeight;  		DrawTickLine (e.Graphics' drawRect' _tickFrequency' _minimum' _maximum' _tickColor' _orientation);  		//==========================================================================  	}  	if (_textTickStyle == TickStyle.BottomRight || _textTickStyle == TickStyle.Both) {  		//==========================================================================  		// Draw the 2st Text Line.  		//==========================================================================  		// Get Height of Text Area  		drawRect = new RectangleF (workingRect.Left' currentUsedPos' workingRect.Width' textAreaSize);  		drawRect.Inflate (-_trackerSize.Width / 2' 0);  		currentUsedPos += textAreaSize;  		DrawTickTextLine (e.Graphics' drawRect' _tickFrequency' _minimum' _maximum' this.ForeColor' this.Font' _orientation);  		//==========================================================================  	}  }  else//_orientation == Orientation.Vertical   {  	currentUsedPos = _indentWidth;  	//==========================================================================  	// Get Width of Text Area  	textAreaSize = e.Graphics.MeasureString (_maximum.ToString ()' this.Font).Width;  	if (_textTickStyle == TickStyle.TopLeft || _textTickStyle == TickStyle.Both) {  		//==========================================================================  		// Draw the 1st Text Line.  		//==========================================================================  		// Get Height of Text Area  		drawRect = new RectangleF (currentUsedPos' workingRect.Top' textAreaSize' workingRect.Height);  		drawRect.Inflate (0' -_trackerSize.Width / 2);  		currentUsedPos += textAreaSize;  		DrawTickTextLine (e.Graphics' drawRect' _tickFrequency' _minimum' _maximum' this.ForeColor' this.Font' _orientation);  		//==========================================================================  	}  	if (_tickStyle == TickStyle.TopLeft || _tickStyle == TickStyle.Both) {  		//==========================================================================  		// Draw the 1st Tick Line.  		//==========================================================================  		drawRect = new RectangleF (currentUsedPos' workingRect.Top' _tickHeight' workingRect.Height);  		drawRect.Inflate (0' -_trackerSize.Width / 2);  		currentUsedPos += _tickHeight + 1;  		DrawTickLine (e.Graphics' drawRect' _tickFrequency' _minimum' _maximum' _tickColor' _orientation);  		//==========================================================================  	}  	//==========================================================================  	// Caculate the Tracker's rectangle  	//==========================================================================  	float currentTrackerPos;  	if (_maximum == _minimum)  		currentTrackerPos = workingRect.Top;  	else  		currentTrackerPos = (workingRect.Height - _trackerSize.Width) * (_value - _minimum) / (_maximum - _minimum);  	_trackerRect = new RectangleF (currentUsedPos' workingRect.Bottom - currentTrackerPos - _trackerSize.Width' _trackerSize.Height' _trackerSize.Width);  	// Remember this for drawing the Tracker later  	//_trackerRect.Inflate(-1'0);  	rectTemp = _trackerRect;  	//Testing  	//==========================================================================  	// Draw the Track Line  	//==========================================================================  	drawRect = new RectangleF (currentUsedPos + _trackerSize.Height / 2 - _trackLineHeight / 2' workingRect.Top' _trackLineHeight' workingRect.Height);  	DrawTrackLine (e.Graphics' drawRect);  	currentUsedPos += _trackerSize.Height;  	//==========================================================================  	if (_tickStyle == TickStyle.BottomRight || _tickStyle == TickStyle.Both) {  		//==========================================================================  		// Draw the 2st Tick Line.  		//==========================================================================  		currentUsedPos += 1;  		drawRect = new RectangleF (currentUsedPos' workingRect.Top' _tickHeight' workingRect.Height);  		drawRect.Inflate (0' -_trackerSize.Width / 2);  		currentUsedPos += _tickHeight;  		DrawTickLine (e.Graphics' drawRect' _tickFrequency' _minimum' _maximum' _tickColor' _orientation);  		//==========================================================================  	}  	if (_textTickStyle == TickStyle.BottomRight || _textTickStyle == TickStyle.Both) {  		//==========================================================================  		// Draw the 2st Text Line.  		//==========================================================================  		// Get Height of Text Area  		drawRect = new RectangleF (currentUsedPos' workingRect.Top' textAreaSize' workingRect.Height);  		drawRect.Inflate (0' -_trackerSize.Width / 2);  		currentUsedPos += textAreaSize;  		DrawTickTextLine (e.Graphics' drawRect' _tickFrequency' _minimum' _maximum' this.ForeColor' this.Font' _orientation);  		//==========================================================================  	}  }  
Magic Number,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,OnPaint,The following statement contains a magic number: if (_orientation == Orientation.Horizontal) {  	currentUsedPos = _indentHeight;  	//==========================================================================  	// Get Height of Text Area  	textAreaSize = e.Graphics.MeasureString (_maximum.ToString ()' this.Font).Height;  	if (_textTickStyle == TickStyle.TopLeft || _textTickStyle == TickStyle.Both) {  		//==========================================================================  		// Draw the 1st Text Line.  		//==========================================================================  		drawRect = new RectangleF (workingRect.Left' currentUsedPos' workingRect.Width' textAreaSize);  		drawRect.Inflate (-_trackerSize.Width / 2' 0);  		currentUsedPos += textAreaSize;  		DrawTickTextLine (e.Graphics' drawRect' _tickFrequency' _minimum' _maximum' this.ForeColor' this.Font' _orientation);  		//==========================================================================  	}  	if (_tickStyle == TickStyle.TopLeft || _tickStyle == TickStyle.Both) {  		//==========================================================================  		// Draw the 1st Tick Line.  		//==========================================================================  		drawRect = new RectangleF (workingRect.Left' currentUsedPos' workingRect.Width' _tickHeight);  		drawRect.Inflate (-_trackerSize.Width / 2' 0);  		currentUsedPos += _tickHeight + 1;  		DrawTickLine (e.Graphics' drawRect' _tickFrequency' _minimum' _maximum' _tickColor' _orientation);  		//==========================================================================  	}  	//==========================================================================  	// Caculate the Tracker's rectangle  	//==========================================================================  	float currentTrackerPos;  	if (_maximum == _minimum)  		currentTrackerPos = workingRect.Left;  	else  		currentTrackerPos = (workingRect.Width - _trackerSize.Width) * (_value - _minimum) / (_maximum - _minimum) + workingRect.Left;  	_trackerRect = new RectangleF (currentTrackerPos' currentUsedPos' _trackerSize.Width' _trackerSize.Height);  	// Remember this for drawing the Tracker later  	//_trackerRect.Inflate(0'-1);  	//==========================================================================  	// Draw the Track Line  	//==========================================================================  	drawRect = new RectangleF (workingRect.Left' currentUsedPos + _trackerSize.Height / 2 - _trackLineHeight / 2' workingRect.Width' _trackLineHeight);  	DrawTrackLine (e.Graphics' drawRect);  	currentUsedPos += _trackerSize.Height;  	//==========================================================================  	if (_tickStyle == TickStyle.BottomRight || _tickStyle == TickStyle.Both) {  		//==========================================================================  		// Draw the 2st Tick Line.  		//==========================================================================  		currentUsedPos += 1;  		drawRect = new RectangleF (workingRect.Left' currentUsedPos' workingRect.Width' _tickHeight);  		drawRect.Inflate (-_trackerSize.Width / 2' 0);  		currentUsedPos += _tickHeight;  		DrawTickLine (e.Graphics' drawRect' _tickFrequency' _minimum' _maximum' _tickColor' _orientation);  		//==========================================================================  	}  	if (_textTickStyle == TickStyle.BottomRight || _textTickStyle == TickStyle.Both) {  		//==========================================================================  		// Draw the 2st Text Line.  		//==========================================================================  		// Get Height of Text Area  		drawRect = new RectangleF (workingRect.Left' currentUsedPos' workingRect.Width' textAreaSize);  		drawRect.Inflate (-_trackerSize.Width / 2' 0);  		currentUsedPos += textAreaSize;  		DrawTickTextLine (e.Graphics' drawRect' _tickFrequency' _minimum' _maximum' this.ForeColor' this.Font' _orientation);  		//==========================================================================  	}  }  else//_orientation == Orientation.Vertical   {  	currentUsedPos = _indentWidth;  	//==========================================================================  	// Get Width of Text Area  	textAreaSize = e.Graphics.MeasureString (_maximum.ToString ()' this.Font).Width;  	if (_textTickStyle == TickStyle.TopLeft || _textTickStyle == TickStyle.Both) {  		//==========================================================================  		// Draw the 1st Text Line.  		//==========================================================================  		// Get Height of Text Area  		drawRect = new RectangleF (currentUsedPos' workingRect.Top' textAreaSize' workingRect.Height);  		drawRect.Inflate (0' -_trackerSize.Width / 2);  		currentUsedPos += textAreaSize;  		DrawTickTextLine (e.Graphics' drawRect' _tickFrequency' _minimum' _maximum' this.ForeColor' this.Font' _orientation);  		//==========================================================================  	}  	if (_tickStyle == TickStyle.TopLeft || _tickStyle == TickStyle.Both) {  		//==========================================================================  		// Draw the 1st Tick Line.  		//==========================================================================  		drawRect = new RectangleF (currentUsedPos' workingRect.Top' _tickHeight' workingRect.Height);  		drawRect.Inflate (0' -_trackerSize.Width / 2);  		currentUsedPos += _tickHeight + 1;  		DrawTickLine (e.Graphics' drawRect' _tickFrequency' _minimum' _maximum' _tickColor' _orientation);  		//==========================================================================  	}  	//==========================================================================  	// Caculate the Tracker's rectangle  	//==========================================================================  	float currentTrackerPos;  	if (_maximum == _minimum)  		currentTrackerPos = workingRect.Top;  	else  		currentTrackerPos = (workingRect.Height - _trackerSize.Width) * (_value - _minimum) / (_maximum - _minimum);  	_trackerRect = new RectangleF (currentUsedPos' workingRect.Bottom - currentTrackerPos - _trackerSize.Width' _trackerSize.Height' _trackerSize.Width);  	// Remember this for drawing the Tracker later  	//_trackerRect.Inflate(-1'0);  	rectTemp = _trackerRect;  	//Testing  	//==========================================================================  	// Draw the Track Line  	//==========================================================================  	drawRect = new RectangleF (currentUsedPos + _trackerSize.Height / 2 - _trackLineHeight / 2' workingRect.Top' _trackLineHeight' workingRect.Height);  	DrawTrackLine (e.Graphics' drawRect);  	currentUsedPos += _trackerSize.Height;  	//==========================================================================  	if (_tickStyle == TickStyle.BottomRight || _tickStyle == TickStyle.Both) {  		//==========================================================================  		// Draw the 2st Tick Line.  		//==========================================================================  		currentUsedPos += 1;  		drawRect = new RectangleF (currentUsedPos' workingRect.Top' _tickHeight' workingRect.Height);  		drawRect.Inflate (0' -_trackerSize.Width / 2);  		currentUsedPos += _tickHeight;  		DrawTickLine (e.Graphics' drawRect' _tickFrequency' _minimum' _maximum' _tickColor' _orientation);  		//==========================================================================  	}  	if (_textTickStyle == TickStyle.BottomRight || _textTickStyle == TickStyle.Both) {  		//==========================================================================  		// Draw the 2st Text Line.  		//==========================================================================  		// Get Height of Text Area  		drawRect = new RectangleF (currentUsedPos' workingRect.Top' textAreaSize' workingRect.Height);  		drawRect.Inflate (0' -_trackerSize.Width / 2);  		currentUsedPos += textAreaSize;  		DrawTickTextLine (e.Graphics' drawRect' _tickFrequency' _minimum' _maximum' this.ForeColor' this.Font' _orientation);  		//==========================================================================  	}  }  
Magic Number,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,OnPaint,The following statement contains a magic number: if (_orientation == Orientation.Horizontal) {  	currentUsedPos = _indentHeight;  	//==========================================================================  	// Get Height of Text Area  	textAreaSize = e.Graphics.MeasureString (_maximum.ToString ()' this.Font).Height;  	if (_textTickStyle == TickStyle.TopLeft || _textTickStyle == TickStyle.Both) {  		//==========================================================================  		// Draw the 1st Text Line.  		//==========================================================================  		drawRect = new RectangleF (workingRect.Left' currentUsedPos' workingRect.Width' textAreaSize);  		drawRect.Inflate (-_trackerSize.Width / 2' 0);  		currentUsedPos += textAreaSize;  		DrawTickTextLine (e.Graphics' drawRect' _tickFrequency' _minimum' _maximum' this.ForeColor' this.Font' _orientation);  		//==========================================================================  	}  	if (_tickStyle == TickStyle.TopLeft || _tickStyle == TickStyle.Both) {  		//==========================================================================  		// Draw the 1st Tick Line.  		//==========================================================================  		drawRect = new RectangleF (workingRect.Left' currentUsedPos' workingRect.Width' _tickHeight);  		drawRect.Inflate (-_trackerSize.Width / 2' 0);  		currentUsedPos += _tickHeight + 1;  		DrawTickLine (e.Graphics' drawRect' _tickFrequency' _minimum' _maximum' _tickColor' _orientation);  		//==========================================================================  	}  	//==========================================================================  	// Caculate the Tracker's rectangle  	//==========================================================================  	float currentTrackerPos;  	if (_maximum == _minimum)  		currentTrackerPos = workingRect.Left;  	else  		currentTrackerPos = (workingRect.Width - _trackerSize.Width) * (_value - _minimum) / (_maximum - _minimum) + workingRect.Left;  	_trackerRect = new RectangleF (currentTrackerPos' currentUsedPos' _trackerSize.Width' _trackerSize.Height);  	// Remember this for drawing the Tracker later  	//_trackerRect.Inflate(0'-1);  	//==========================================================================  	// Draw the Track Line  	//==========================================================================  	drawRect = new RectangleF (workingRect.Left' currentUsedPos + _trackerSize.Height / 2 - _trackLineHeight / 2' workingRect.Width' _trackLineHeight);  	DrawTrackLine (e.Graphics' drawRect);  	currentUsedPos += _trackerSize.Height;  	//==========================================================================  	if (_tickStyle == TickStyle.BottomRight || _tickStyle == TickStyle.Both) {  		//==========================================================================  		// Draw the 2st Tick Line.  		//==========================================================================  		currentUsedPos += 1;  		drawRect = new RectangleF (workingRect.Left' currentUsedPos' workingRect.Width' _tickHeight);  		drawRect.Inflate (-_trackerSize.Width / 2' 0);  		currentUsedPos += _tickHeight;  		DrawTickLine (e.Graphics' drawRect' _tickFrequency' _minimum' _maximum' _tickColor' _orientation);  		//==========================================================================  	}  	if (_textTickStyle == TickStyle.BottomRight || _textTickStyle == TickStyle.Both) {  		//==========================================================================  		// Draw the 2st Text Line.  		//==========================================================================  		// Get Height of Text Area  		drawRect = new RectangleF (workingRect.Left' currentUsedPos' workingRect.Width' textAreaSize);  		drawRect.Inflate (-_trackerSize.Width / 2' 0);  		currentUsedPos += textAreaSize;  		DrawTickTextLine (e.Graphics' drawRect' _tickFrequency' _minimum' _maximum' this.ForeColor' this.Font' _orientation);  		//==========================================================================  	}  }  else//_orientation == Orientation.Vertical   {  	currentUsedPos = _indentWidth;  	//==========================================================================  	// Get Width of Text Area  	textAreaSize = e.Graphics.MeasureString (_maximum.ToString ()' this.Font).Width;  	if (_textTickStyle == TickStyle.TopLeft || _textTickStyle == TickStyle.Both) {  		//==========================================================================  		// Draw the 1st Text Line.  		//==========================================================================  		// Get Height of Text Area  		drawRect = new RectangleF (currentUsedPos' workingRect.Top' textAreaSize' workingRect.Height);  		drawRect.Inflate (0' -_trackerSize.Width / 2);  		currentUsedPos += textAreaSize;  		DrawTickTextLine (e.Graphics' drawRect' _tickFrequency' _minimum' _maximum' this.ForeColor' this.Font' _orientation);  		//==========================================================================  	}  	if (_tickStyle == TickStyle.TopLeft || _tickStyle == TickStyle.Both) {  		//==========================================================================  		// Draw the 1st Tick Line.  		//==========================================================================  		drawRect = new RectangleF (currentUsedPos' workingRect.Top' _tickHeight' workingRect.Height);  		drawRect.Inflate (0' -_trackerSize.Width / 2);  		currentUsedPos += _tickHeight + 1;  		DrawTickLine (e.Graphics' drawRect' _tickFrequency' _minimum' _maximum' _tickColor' _orientation);  		//==========================================================================  	}  	//==========================================================================  	// Caculate the Tracker's rectangle  	//==========================================================================  	float currentTrackerPos;  	if (_maximum == _minimum)  		currentTrackerPos = workingRect.Top;  	else  		currentTrackerPos = (workingRect.Height - _trackerSize.Width) * (_value - _minimum) / (_maximum - _minimum);  	_trackerRect = new RectangleF (currentUsedPos' workingRect.Bottom - currentTrackerPos - _trackerSize.Width' _trackerSize.Height' _trackerSize.Width);  	// Remember this for drawing the Tracker later  	//_trackerRect.Inflate(-1'0);  	rectTemp = _trackerRect;  	//Testing  	//==========================================================================  	// Draw the Track Line  	//==========================================================================  	drawRect = new RectangleF (currentUsedPos + _trackerSize.Height / 2 - _trackLineHeight / 2' workingRect.Top' _trackLineHeight' workingRect.Height);  	DrawTrackLine (e.Graphics' drawRect);  	currentUsedPos += _trackerSize.Height;  	//==========================================================================  	if (_tickStyle == TickStyle.BottomRight || _tickStyle == TickStyle.Both) {  		//==========================================================================  		// Draw the 2st Tick Line.  		//==========================================================================  		currentUsedPos += 1;  		drawRect = new RectangleF (currentUsedPos' workingRect.Top' _tickHeight' workingRect.Height);  		drawRect.Inflate (0' -_trackerSize.Width / 2);  		currentUsedPos += _tickHeight;  		DrawTickLine (e.Graphics' drawRect' _tickFrequency' _minimum' _maximum' _tickColor' _orientation);  		//==========================================================================  	}  	if (_textTickStyle == TickStyle.BottomRight || _textTickStyle == TickStyle.Both) {  		//==========================================================================  		// Draw the 2st Text Line.  		//==========================================================================  		// Get Height of Text Area  		drawRect = new RectangleF (currentUsedPos' workingRect.Top' textAreaSize' workingRect.Height);  		drawRect.Inflate (0' -_trackerSize.Width / 2);  		currentUsedPos += textAreaSize;  		DrawTickTextLine (e.Graphics' drawRect' _tickFrequency' _minimum' _maximum' this.ForeColor' this.Font' _orientation);  		//==========================================================================  	}  }  
Magic Number,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,OnPaint,The following statement contains a magic number: if (_orientation == Orientation.Horizontal) {  	currentUsedPos = _indentHeight;  	//==========================================================================  	// Get Height of Text Area  	textAreaSize = e.Graphics.MeasureString (_maximum.ToString ()' this.Font).Height;  	if (_textTickStyle == TickStyle.TopLeft || _textTickStyle == TickStyle.Both) {  		//==========================================================================  		// Draw the 1st Text Line.  		//==========================================================================  		drawRect = new RectangleF (workingRect.Left' currentUsedPos' workingRect.Width' textAreaSize);  		drawRect.Inflate (-_trackerSize.Width / 2' 0);  		currentUsedPos += textAreaSize;  		DrawTickTextLine (e.Graphics' drawRect' _tickFrequency' _minimum' _maximum' this.ForeColor' this.Font' _orientation);  		//==========================================================================  	}  	if (_tickStyle == TickStyle.TopLeft || _tickStyle == TickStyle.Both) {  		//==========================================================================  		// Draw the 1st Tick Line.  		//==========================================================================  		drawRect = new RectangleF (workingRect.Left' currentUsedPos' workingRect.Width' _tickHeight);  		drawRect.Inflate (-_trackerSize.Width / 2' 0);  		currentUsedPos += _tickHeight + 1;  		DrawTickLine (e.Graphics' drawRect' _tickFrequency' _minimum' _maximum' _tickColor' _orientation);  		//==========================================================================  	}  	//==========================================================================  	// Caculate the Tracker's rectangle  	//==========================================================================  	float currentTrackerPos;  	if (_maximum == _minimum)  		currentTrackerPos = workingRect.Left;  	else  		currentTrackerPos = (workingRect.Width - _trackerSize.Width) * (_value - _minimum) / (_maximum - _minimum) + workingRect.Left;  	_trackerRect = new RectangleF (currentTrackerPos' currentUsedPos' _trackerSize.Width' _trackerSize.Height);  	// Remember this for drawing the Tracker later  	//_trackerRect.Inflate(0'-1);  	//==========================================================================  	// Draw the Track Line  	//==========================================================================  	drawRect = new RectangleF (workingRect.Left' currentUsedPos + _trackerSize.Height / 2 - _trackLineHeight / 2' workingRect.Width' _trackLineHeight);  	DrawTrackLine (e.Graphics' drawRect);  	currentUsedPos += _trackerSize.Height;  	//==========================================================================  	if (_tickStyle == TickStyle.BottomRight || _tickStyle == TickStyle.Both) {  		//==========================================================================  		// Draw the 2st Tick Line.  		//==========================================================================  		currentUsedPos += 1;  		drawRect = new RectangleF (workingRect.Left' currentUsedPos' workingRect.Width' _tickHeight);  		drawRect.Inflate (-_trackerSize.Width / 2' 0);  		currentUsedPos += _tickHeight;  		DrawTickLine (e.Graphics' drawRect' _tickFrequency' _minimum' _maximum' _tickColor' _orientation);  		//==========================================================================  	}  	if (_textTickStyle == TickStyle.BottomRight || _textTickStyle == TickStyle.Both) {  		//==========================================================================  		// Draw the 2st Text Line.  		//==========================================================================  		// Get Height of Text Area  		drawRect = new RectangleF (workingRect.Left' currentUsedPos' workingRect.Width' textAreaSize);  		drawRect.Inflate (-_trackerSize.Width / 2' 0);  		currentUsedPos += textAreaSize;  		DrawTickTextLine (e.Graphics' drawRect' _tickFrequency' _minimum' _maximum' this.ForeColor' this.Font' _orientation);  		//==========================================================================  	}  }  else//_orientation == Orientation.Vertical   {  	currentUsedPos = _indentWidth;  	//==========================================================================  	// Get Width of Text Area  	textAreaSize = e.Graphics.MeasureString (_maximum.ToString ()' this.Font).Width;  	if (_textTickStyle == TickStyle.TopLeft || _textTickStyle == TickStyle.Both) {  		//==========================================================================  		// Draw the 1st Text Line.  		//==========================================================================  		// Get Height of Text Area  		drawRect = new RectangleF (currentUsedPos' workingRect.Top' textAreaSize' workingRect.Height);  		drawRect.Inflate (0' -_trackerSize.Width / 2);  		currentUsedPos += textAreaSize;  		DrawTickTextLine (e.Graphics' drawRect' _tickFrequency' _minimum' _maximum' this.ForeColor' this.Font' _orientation);  		//==========================================================================  	}  	if (_tickStyle == TickStyle.TopLeft || _tickStyle == TickStyle.Both) {  		//==========================================================================  		// Draw the 1st Tick Line.  		//==========================================================================  		drawRect = new RectangleF (currentUsedPos' workingRect.Top' _tickHeight' workingRect.Height);  		drawRect.Inflate (0' -_trackerSize.Width / 2);  		currentUsedPos += _tickHeight + 1;  		DrawTickLine (e.Graphics' drawRect' _tickFrequency' _minimum' _maximum' _tickColor' _orientation);  		//==========================================================================  	}  	//==========================================================================  	// Caculate the Tracker's rectangle  	//==========================================================================  	float currentTrackerPos;  	if (_maximum == _minimum)  		currentTrackerPos = workingRect.Top;  	else  		currentTrackerPos = (workingRect.Height - _trackerSize.Width) * (_value - _minimum) / (_maximum - _minimum);  	_trackerRect = new RectangleF (currentUsedPos' workingRect.Bottom - currentTrackerPos - _trackerSize.Width' _trackerSize.Height' _trackerSize.Width);  	// Remember this for drawing the Tracker later  	//_trackerRect.Inflate(-1'0);  	rectTemp = _trackerRect;  	//Testing  	//==========================================================================  	// Draw the Track Line  	//==========================================================================  	drawRect = new RectangleF (currentUsedPos + _trackerSize.Height / 2 - _trackLineHeight / 2' workingRect.Top' _trackLineHeight' workingRect.Height);  	DrawTrackLine (e.Graphics' drawRect);  	currentUsedPos += _trackerSize.Height;  	//==========================================================================  	if (_tickStyle == TickStyle.BottomRight || _tickStyle == TickStyle.Both) {  		//==========================================================================  		// Draw the 2st Tick Line.  		//==========================================================================  		currentUsedPos += 1;  		drawRect = new RectangleF (currentUsedPos' workingRect.Top' _tickHeight' workingRect.Height);  		drawRect.Inflate (0' -_trackerSize.Width / 2);  		currentUsedPos += _tickHeight;  		DrawTickLine (e.Graphics' drawRect' _tickFrequency' _minimum' _maximum' _tickColor' _orientation);  		//==========================================================================  	}  	if (_textTickStyle == TickStyle.BottomRight || _textTickStyle == TickStyle.Both) {  		//==========================================================================  		// Draw the 2st Text Line.  		//==========================================================================  		// Get Height of Text Area  		drawRect = new RectangleF (currentUsedPos' workingRect.Top' textAreaSize' workingRect.Height);  		drawRect.Inflate (0' -_trackerSize.Width / 2);  		currentUsedPos += textAreaSize;  		DrawTickTextLine (e.Graphics' drawRect' _tickFrequency' _minimum' _maximum' this.ForeColor' this.Font' _orientation);  		//==========================================================================  	}  }  
Magic Number,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,OnPaint,The following statement contains a magic number: if (_orientation == Orientation.Horizontal) {  	currentUsedPos = _indentHeight;  	//==========================================================================  	// Get Height of Text Area  	textAreaSize = e.Graphics.MeasureString (_maximum.ToString ()' this.Font).Height;  	if (_textTickStyle == TickStyle.TopLeft || _textTickStyle == TickStyle.Both) {  		//==========================================================================  		// Draw the 1st Text Line.  		//==========================================================================  		drawRect = new RectangleF (workingRect.Left' currentUsedPos' workingRect.Width' textAreaSize);  		drawRect.Inflate (-_trackerSize.Width / 2' 0);  		currentUsedPos += textAreaSize;  		DrawTickTextLine (e.Graphics' drawRect' _tickFrequency' _minimum' _maximum' this.ForeColor' this.Font' _orientation);  		//==========================================================================  	}  	if (_tickStyle == TickStyle.TopLeft || _tickStyle == TickStyle.Both) {  		//==========================================================================  		// Draw the 1st Tick Line.  		//==========================================================================  		drawRect = new RectangleF (workingRect.Left' currentUsedPos' workingRect.Width' _tickHeight);  		drawRect.Inflate (-_trackerSize.Width / 2' 0);  		currentUsedPos += _tickHeight + 1;  		DrawTickLine (e.Graphics' drawRect' _tickFrequency' _minimum' _maximum' _tickColor' _orientation);  		//==========================================================================  	}  	//==========================================================================  	// Caculate the Tracker's rectangle  	//==========================================================================  	float currentTrackerPos;  	if (_maximum == _minimum)  		currentTrackerPos = workingRect.Left;  	else  		currentTrackerPos = (workingRect.Width - _trackerSize.Width) * (_value - _minimum) / (_maximum - _minimum) + workingRect.Left;  	_trackerRect = new RectangleF (currentTrackerPos' currentUsedPos' _trackerSize.Width' _trackerSize.Height);  	// Remember this for drawing the Tracker later  	//_trackerRect.Inflate(0'-1);  	//==========================================================================  	// Draw the Track Line  	//==========================================================================  	drawRect = new RectangleF (workingRect.Left' currentUsedPos + _trackerSize.Height / 2 - _trackLineHeight / 2' workingRect.Width' _trackLineHeight);  	DrawTrackLine (e.Graphics' drawRect);  	currentUsedPos += _trackerSize.Height;  	//==========================================================================  	if (_tickStyle == TickStyle.BottomRight || _tickStyle == TickStyle.Both) {  		//==========================================================================  		// Draw the 2st Tick Line.  		//==========================================================================  		currentUsedPos += 1;  		drawRect = new RectangleF (workingRect.Left' currentUsedPos' workingRect.Width' _tickHeight);  		drawRect.Inflate (-_trackerSize.Width / 2' 0);  		currentUsedPos += _tickHeight;  		DrawTickLine (e.Graphics' drawRect' _tickFrequency' _minimum' _maximum' _tickColor' _orientation);  		//==========================================================================  	}  	if (_textTickStyle == TickStyle.BottomRight || _textTickStyle == TickStyle.Both) {  		//==========================================================================  		// Draw the 2st Text Line.  		//==========================================================================  		// Get Height of Text Area  		drawRect = new RectangleF (workingRect.Left' currentUsedPos' workingRect.Width' textAreaSize);  		drawRect.Inflate (-_trackerSize.Width / 2' 0);  		currentUsedPos += textAreaSize;  		DrawTickTextLine (e.Graphics' drawRect' _tickFrequency' _minimum' _maximum' this.ForeColor' this.Font' _orientation);  		//==========================================================================  	}  }  else//_orientation == Orientation.Vertical   {  	currentUsedPos = _indentWidth;  	//==========================================================================  	// Get Width of Text Area  	textAreaSize = e.Graphics.MeasureString (_maximum.ToString ()' this.Font).Width;  	if (_textTickStyle == TickStyle.TopLeft || _textTickStyle == TickStyle.Both) {  		//==========================================================================  		// Draw the 1st Text Line.  		//==========================================================================  		// Get Height of Text Area  		drawRect = new RectangleF (currentUsedPos' workingRect.Top' textAreaSize' workingRect.Height);  		drawRect.Inflate (0' -_trackerSize.Width / 2);  		currentUsedPos += textAreaSize;  		DrawTickTextLine (e.Graphics' drawRect' _tickFrequency' _minimum' _maximum' this.ForeColor' this.Font' _orientation);  		//==========================================================================  	}  	if (_tickStyle == TickStyle.TopLeft || _tickStyle == TickStyle.Both) {  		//==========================================================================  		// Draw the 1st Tick Line.  		//==========================================================================  		drawRect = new RectangleF (currentUsedPos' workingRect.Top' _tickHeight' workingRect.Height);  		drawRect.Inflate (0' -_trackerSize.Width / 2);  		currentUsedPos += _tickHeight + 1;  		DrawTickLine (e.Graphics' drawRect' _tickFrequency' _minimum' _maximum' _tickColor' _orientation);  		//==========================================================================  	}  	//==========================================================================  	// Caculate the Tracker's rectangle  	//==========================================================================  	float currentTrackerPos;  	if (_maximum == _minimum)  		currentTrackerPos = workingRect.Top;  	else  		currentTrackerPos = (workingRect.Height - _trackerSize.Width) * (_value - _minimum) / (_maximum - _minimum);  	_trackerRect = new RectangleF (currentUsedPos' workingRect.Bottom - currentTrackerPos - _trackerSize.Width' _trackerSize.Height' _trackerSize.Width);  	// Remember this for drawing the Tracker later  	//_trackerRect.Inflate(-1'0);  	rectTemp = _trackerRect;  	//Testing  	//==========================================================================  	// Draw the Track Line  	//==========================================================================  	drawRect = new RectangleF (currentUsedPos + _trackerSize.Height / 2 - _trackLineHeight / 2' workingRect.Top' _trackLineHeight' workingRect.Height);  	DrawTrackLine (e.Graphics' drawRect);  	currentUsedPos += _trackerSize.Height;  	//==========================================================================  	if (_tickStyle == TickStyle.BottomRight || _tickStyle == TickStyle.Both) {  		//==========================================================================  		// Draw the 2st Tick Line.  		//==========================================================================  		currentUsedPos += 1;  		drawRect = new RectangleF (currentUsedPos' workingRect.Top' _tickHeight' workingRect.Height);  		drawRect.Inflate (0' -_trackerSize.Width / 2);  		currentUsedPos += _tickHeight;  		DrawTickLine (e.Graphics' drawRect' _tickFrequency' _minimum' _maximum' _tickColor' _orientation);  		//==========================================================================  	}  	if (_textTickStyle == TickStyle.BottomRight || _textTickStyle == TickStyle.Both) {  		//==========================================================================  		// Draw the 2st Text Line.  		//==========================================================================  		// Get Height of Text Area  		drawRect = new RectangleF (currentUsedPos' workingRect.Top' textAreaSize' workingRect.Height);  		drawRect.Inflate (0' -_trackerSize.Width / 2);  		currentUsedPos += textAreaSize;  		DrawTickTextLine (e.Graphics' drawRect' _tickFrequency' _minimum' _maximum' this.ForeColor' this.Font' _orientation);  		//==========================================================================  	}  }  
Magic Number,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,OnPaint,The following statement contains a magic number: if (_orientation == Orientation.Horizontal) {  	currentUsedPos = _indentHeight;  	//==========================================================================  	// Get Height of Text Area  	textAreaSize = e.Graphics.MeasureString (_maximum.ToString ()' this.Font).Height;  	if (_textTickStyle == TickStyle.TopLeft || _textTickStyle == TickStyle.Both) {  		//==========================================================================  		// Draw the 1st Text Line.  		//==========================================================================  		drawRect = new RectangleF (workingRect.Left' currentUsedPos' workingRect.Width' textAreaSize);  		drawRect.Inflate (-_trackerSize.Width / 2' 0);  		currentUsedPos += textAreaSize;  		DrawTickTextLine (e.Graphics' drawRect' _tickFrequency' _minimum' _maximum' this.ForeColor' this.Font' _orientation);  		//==========================================================================  	}  	if (_tickStyle == TickStyle.TopLeft || _tickStyle == TickStyle.Both) {  		//==========================================================================  		// Draw the 1st Tick Line.  		//==========================================================================  		drawRect = new RectangleF (workingRect.Left' currentUsedPos' workingRect.Width' _tickHeight);  		drawRect.Inflate (-_trackerSize.Width / 2' 0);  		currentUsedPos += _tickHeight + 1;  		DrawTickLine (e.Graphics' drawRect' _tickFrequency' _minimum' _maximum' _tickColor' _orientation);  		//==========================================================================  	}  	//==========================================================================  	// Caculate the Tracker's rectangle  	//==========================================================================  	float currentTrackerPos;  	if (_maximum == _minimum)  		currentTrackerPos = workingRect.Left;  	else  		currentTrackerPos = (workingRect.Width - _trackerSize.Width) * (_value - _minimum) / (_maximum - _minimum) + workingRect.Left;  	_trackerRect = new RectangleF (currentTrackerPos' currentUsedPos' _trackerSize.Width' _trackerSize.Height);  	// Remember this for drawing the Tracker later  	//_trackerRect.Inflate(0'-1);  	//==========================================================================  	// Draw the Track Line  	//==========================================================================  	drawRect = new RectangleF (workingRect.Left' currentUsedPos + _trackerSize.Height / 2 - _trackLineHeight / 2' workingRect.Width' _trackLineHeight);  	DrawTrackLine (e.Graphics' drawRect);  	currentUsedPos += _trackerSize.Height;  	//==========================================================================  	if (_tickStyle == TickStyle.BottomRight || _tickStyle == TickStyle.Both) {  		//==========================================================================  		// Draw the 2st Tick Line.  		//==========================================================================  		currentUsedPos += 1;  		drawRect = new RectangleF (workingRect.Left' currentUsedPos' workingRect.Width' _tickHeight);  		drawRect.Inflate (-_trackerSize.Width / 2' 0);  		currentUsedPos += _tickHeight;  		DrawTickLine (e.Graphics' drawRect' _tickFrequency' _minimum' _maximum' _tickColor' _orientation);  		//==========================================================================  	}  	if (_textTickStyle == TickStyle.BottomRight || _textTickStyle == TickStyle.Both) {  		//==========================================================================  		// Draw the 2st Text Line.  		//==========================================================================  		// Get Height of Text Area  		drawRect = new RectangleF (workingRect.Left' currentUsedPos' workingRect.Width' textAreaSize);  		drawRect.Inflate (-_trackerSize.Width / 2' 0);  		currentUsedPos += textAreaSize;  		DrawTickTextLine (e.Graphics' drawRect' _tickFrequency' _minimum' _maximum' this.ForeColor' this.Font' _orientation);  		//==========================================================================  	}  }  else//_orientation == Orientation.Vertical   {  	currentUsedPos = _indentWidth;  	//==========================================================================  	// Get Width of Text Area  	textAreaSize = e.Graphics.MeasureString (_maximum.ToString ()' this.Font).Width;  	if (_textTickStyle == TickStyle.TopLeft || _textTickStyle == TickStyle.Both) {  		//==========================================================================  		// Draw the 1st Text Line.  		//==========================================================================  		// Get Height of Text Area  		drawRect = new RectangleF (currentUsedPos' workingRect.Top' textAreaSize' workingRect.Height);  		drawRect.Inflate (0' -_trackerSize.Width / 2);  		currentUsedPos += textAreaSize;  		DrawTickTextLine (e.Graphics' drawRect' _tickFrequency' _minimum' _maximum' this.ForeColor' this.Font' _orientation);  		//==========================================================================  	}  	if (_tickStyle == TickStyle.TopLeft || _tickStyle == TickStyle.Both) {  		//==========================================================================  		// Draw the 1st Tick Line.  		//==========================================================================  		drawRect = new RectangleF (currentUsedPos' workingRect.Top' _tickHeight' workingRect.Height);  		drawRect.Inflate (0' -_trackerSize.Width / 2);  		currentUsedPos += _tickHeight + 1;  		DrawTickLine (e.Graphics' drawRect' _tickFrequency' _minimum' _maximum' _tickColor' _orientation);  		//==========================================================================  	}  	//==========================================================================  	// Caculate the Tracker's rectangle  	//==========================================================================  	float currentTrackerPos;  	if (_maximum == _minimum)  		currentTrackerPos = workingRect.Top;  	else  		currentTrackerPos = (workingRect.Height - _trackerSize.Width) * (_value - _minimum) / (_maximum - _minimum);  	_trackerRect = new RectangleF (currentUsedPos' workingRect.Bottom - currentTrackerPos - _trackerSize.Width' _trackerSize.Height' _trackerSize.Width);  	// Remember this for drawing the Tracker later  	//_trackerRect.Inflate(-1'0);  	rectTemp = _trackerRect;  	//Testing  	//==========================================================================  	// Draw the Track Line  	//==========================================================================  	drawRect = new RectangleF (currentUsedPos + _trackerSize.Height / 2 - _trackLineHeight / 2' workingRect.Top' _trackLineHeight' workingRect.Height);  	DrawTrackLine (e.Graphics' drawRect);  	currentUsedPos += _trackerSize.Height;  	//==========================================================================  	if (_tickStyle == TickStyle.BottomRight || _tickStyle == TickStyle.Both) {  		//==========================================================================  		// Draw the 2st Tick Line.  		//==========================================================================  		currentUsedPos += 1;  		drawRect = new RectangleF (currentUsedPos' workingRect.Top' _tickHeight' workingRect.Height);  		drawRect.Inflate (0' -_trackerSize.Width / 2);  		currentUsedPos += _tickHeight;  		DrawTickLine (e.Graphics' drawRect' _tickFrequency' _minimum' _maximum' _tickColor' _orientation);  		//==========================================================================  	}  	if (_textTickStyle == TickStyle.BottomRight || _textTickStyle == TickStyle.Both) {  		//==========================================================================  		// Draw the 2st Text Line.  		//==========================================================================  		// Get Height of Text Area  		drawRect = new RectangleF (currentUsedPos' workingRect.Top' textAreaSize' workingRect.Height);  		drawRect.Inflate (0' -_trackerSize.Width / 2);  		currentUsedPos += textAreaSize;  		DrawTickTextLine (e.Graphics' drawRect' _tickFrequency' _minimum' _maximum' this.ForeColor' this.Font' _orientation);  		//==========================================================================  	}  }  
Magic Number,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,OnPaint,The following statement contains a magic number: if (_textTickStyle == TickStyle.TopLeft || _textTickStyle == TickStyle.Both) {  	//==========================================================================  	// Draw the 1st Text Line.  	//==========================================================================  	drawRect = new RectangleF (workingRect.Left' currentUsedPos' workingRect.Width' textAreaSize);  	drawRect.Inflate (-_trackerSize.Width / 2' 0);  	currentUsedPos += textAreaSize;  	DrawTickTextLine (e.Graphics' drawRect' _tickFrequency' _minimum' _maximum' this.ForeColor' this.Font' _orientation);  	//==========================================================================  }  
Magic Number,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,OnPaint,The following statement contains a magic number: drawRect.Inflate (-_trackerSize.Width / 2' 0);  
Magic Number,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,OnPaint,The following statement contains a magic number: if (_tickStyle == TickStyle.TopLeft || _tickStyle == TickStyle.Both) {  	//==========================================================================  	// Draw the 1st Tick Line.  	//==========================================================================  	drawRect = new RectangleF (workingRect.Left' currentUsedPos' workingRect.Width' _tickHeight);  	drawRect.Inflate (-_trackerSize.Width / 2' 0);  	currentUsedPos += _tickHeight + 1;  	DrawTickLine (e.Graphics' drawRect' _tickFrequency' _minimum' _maximum' _tickColor' _orientation);  	//==========================================================================  }  
Magic Number,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,OnPaint,The following statement contains a magic number: drawRect.Inflate (-_trackerSize.Width / 2' 0);  
Magic Number,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,OnPaint,The following statement contains a magic number: drawRect = new RectangleF (workingRect.Left' currentUsedPos + _trackerSize.Height / 2 - _trackLineHeight / 2' workingRect.Width' _trackLineHeight);  
Magic Number,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,OnPaint,The following statement contains a magic number: drawRect = new RectangleF (workingRect.Left' currentUsedPos + _trackerSize.Height / 2 - _trackLineHeight / 2' workingRect.Width' _trackLineHeight);  
Magic Number,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,OnPaint,The following statement contains a magic number: if (_tickStyle == TickStyle.BottomRight || _tickStyle == TickStyle.Both) {  	//==========================================================================  	// Draw the 2st Tick Line.  	//==========================================================================  	currentUsedPos += 1;  	drawRect = new RectangleF (workingRect.Left' currentUsedPos' workingRect.Width' _tickHeight);  	drawRect.Inflate (-_trackerSize.Width / 2' 0);  	currentUsedPos += _tickHeight;  	DrawTickLine (e.Graphics' drawRect' _tickFrequency' _minimum' _maximum' _tickColor' _orientation);  	//==========================================================================  }  
Magic Number,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,OnPaint,The following statement contains a magic number: drawRect.Inflate (-_trackerSize.Width / 2' 0);  
Magic Number,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,OnPaint,The following statement contains a magic number: if (_textTickStyle == TickStyle.BottomRight || _textTickStyle == TickStyle.Both) {  	//==========================================================================  	// Draw the 2st Text Line.  	//==========================================================================  	// Get Height of Text Area  	drawRect = new RectangleF (workingRect.Left' currentUsedPos' workingRect.Width' textAreaSize);  	drawRect.Inflate (-_trackerSize.Width / 2' 0);  	currentUsedPos += textAreaSize;  	DrawTickTextLine (e.Graphics' drawRect' _tickFrequency' _minimum' _maximum' this.ForeColor' this.Font' _orientation);  	//==========================================================================  }  
Magic Number,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,OnPaint,The following statement contains a magic number: drawRect.Inflate (-_trackerSize.Width / 2' 0);  
Magic Number,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,OnPaint,The following statement contains a magic number: if (_textTickStyle == TickStyle.TopLeft || _textTickStyle == TickStyle.Both) {  	//==========================================================================  	// Draw the 1st Text Line.  	//==========================================================================  	// Get Height of Text Area  	drawRect = new RectangleF (currentUsedPos' workingRect.Top' textAreaSize' workingRect.Height);  	drawRect.Inflate (0' -_trackerSize.Width / 2);  	currentUsedPos += textAreaSize;  	DrawTickTextLine (e.Graphics' drawRect' _tickFrequency' _minimum' _maximum' this.ForeColor' this.Font' _orientation);  	//==========================================================================  }  
Magic Number,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,OnPaint,The following statement contains a magic number: drawRect.Inflate (0' -_trackerSize.Width / 2);  
Magic Number,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,OnPaint,The following statement contains a magic number: if (_tickStyle == TickStyle.TopLeft || _tickStyle == TickStyle.Both) {  	//==========================================================================  	// Draw the 1st Tick Line.  	//==========================================================================  	drawRect = new RectangleF (currentUsedPos' workingRect.Top' _tickHeight' workingRect.Height);  	drawRect.Inflate (0' -_trackerSize.Width / 2);  	currentUsedPos += _tickHeight + 1;  	DrawTickLine (e.Graphics' drawRect' _tickFrequency' _minimum' _maximum' _tickColor' _orientation);  	//==========================================================================  }  
Magic Number,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,OnPaint,The following statement contains a magic number: drawRect.Inflate (0' -_trackerSize.Width / 2);  
Magic Number,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,OnPaint,The following statement contains a magic number: drawRect = new RectangleF (currentUsedPos + _trackerSize.Height / 2 - _trackLineHeight / 2' workingRect.Top' _trackLineHeight' workingRect.Height);  
Magic Number,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,OnPaint,The following statement contains a magic number: drawRect = new RectangleF (currentUsedPos + _trackerSize.Height / 2 - _trackLineHeight / 2' workingRect.Top' _trackLineHeight' workingRect.Height);  
Magic Number,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,OnPaint,The following statement contains a magic number: if (_tickStyle == TickStyle.BottomRight || _tickStyle == TickStyle.Both) {  	//==========================================================================  	// Draw the 2st Tick Line.  	//==========================================================================  	currentUsedPos += 1;  	drawRect = new RectangleF (currentUsedPos' workingRect.Top' _tickHeight' workingRect.Height);  	drawRect.Inflate (0' -_trackerSize.Width / 2);  	currentUsedPos += _tickHeight;  	DrawTickLine (e.Graphics' drawRect' _tickFrequency' _minimum' _maximum' _tickColor' _orientation);  	//==========================================================================  }  
Magic Number,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,OnPaint,The following statement contains a magic number: drawRect.Inflate (0' -_trackerSize.Width / 2);  
Magic Number,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,OnPaint,The following statement contains a magic number: if (_textTickStyle == TickStyle.BottomRight || _textTickStyle == TickStyle.Both) {  	//==========================================================================  	// Draw the 2st Text Line.  	//==========================================================================  	// Get Height of Text Area  	drawRect = new RectangleF (currentUsedPos' workingRect.Top' textAreaSize' workingRect.Height);  	drawRect.Inflate (0' -_trackerSize.Width / 2);  	currentUsedPos += textAreaSize;  	DrawTickTextLine (e.Graphics' drawRect' _tickFrequency' _minimum' _maximum' this.ForeColor' this.Font' _orientation);  	//==========================================================================  }  
Magic Number,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,OnPaint,The following statement contains a magic number: drawRect.Inflate (0' -_trackerSize.Width / 2);  
Magic Number,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,OnPaint,The following statement contains a magic number: if (this.Focused)  	ControlPaint.DrawFocusRectangle (e.Graphics' Rectangle.Inflate (this.ClientRectangle' -2' -2));  
Magic Number,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,OnPaint,The following statement contains a magic number: if (this.Focused)  	ControlPaint.DrawFocusRectangle (e.Graphics' Rectangle.Inflate (this.ClientRectangle' -2' -2));  
Magic Number,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,OnPaint,The following statement contains a magic number: ControlPaint.DrawFocusRectangle (e.Graphics' Rectangle.Inflate (this.ClientRectangle' -2' -2));  
Magic Number,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,OnPaint,The following statement contains a magic number: ControlPaint.DrawFocusRectangle (e.Graphics' Rectangle.Inflate (this.ClientRectangle' -2' -2));  
Magic Number,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,DrawTickTextLine,The following statement contains a magic number: if (_orientation == Orientation.Horizontal) {  	// Calculate tick's setting  	tickFrequencySize = drawRect.Width * tickFrequency / (maximum - minimum);  	//===============================================================  	// Draw each tick text  	for (int i = 0; i <= tickCount; i++) {  		text = Convert.ToString (_minimum + tickFrequency * i' 10);  		g.DrawString (text' font' brush' drawRect.Left + tickFrequencySize * i' drawRect.Top + drawRect.Height / 2' stringFormat);  	}  	// Draw last tick text at Maximum  	text = Convert.ToString (_maximum' 10);  	g.DrawString (text' font' brush' drawRect.Right' drawRect.Top + drawRect.Height / 2' stringFormat);  	//===============================================================  }  else//Orientation.Vertical   {  	// Calculate tick's setting  	tickFrequencySize = drawRect.Height * tickFrequency / (maximum - minimum);  	//===============================================================  	// Draw each tick text  	for (int i = 0; i <= tickCount; i++) {  		text = Convert.ToString (_minimum + tickFrequency * i' 10);  		g.DrawString (text' font' brush' drawRect.Left + drawRect.Width / 2' drawRect.Bottom - tickFrequencySize * i' stringFormat);  	}  	// Draw last tick text at Maximum  	text = Convert.ToString (_maximum' 10);  	g.DrawString (text' font' brush' drawRect.Left + drawRect.Width / 2' drawRect.Top' stringFormat);  	//===============================================================  }  
Magic Number,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,DrawTickTextLine,The following statement contains a magic number: if (_orientation == Orientation.Horizontal) {  	// Calculate tick's setting  	tickFrequencySize = drawRect.Width * tickFrequency / (maximum - minimum);  	//===============================================================  	// Draw each tick text  	for (int i = 0; i <= tickCount; i++) {  		text = Convert.ToString (_minimum + tickFrequency * i' 10);  		g.DrawString (text' font' brush' drawRect.Left + tickFrequencySize * i' drawRect.Top + drawRect.Height / 2' stringFormat);  	}  	// Draw last tick text at Maximum  	text = Convert.ToString (_maximum' 10);  	g.DrawString (text' font' brush' drawRect.Right' drawRect.Top + drawRect.Height / 2' stringFormat);  	//===============================================================  }  else//Orientation.Vertical   {  	// Calculate tick's setting  	tickFrequencySize = drawRect.Height * tickFrequency / (maximum - minimum);  	//===============================================================  	// Draw each tick text  	for (int i = 0; i <= tickCount; i++) {  		text = Convert.ToString (_minimum + tickFrequency * i' 10);  		g.DrawString (text' font' brush' drawRect.Left + drawRect.Width / 2' drawRect.Bottom - tickFrequencySize * i' stringFormat);  	}  	// Draw last tick text at Maximum  	text = Convert.ToString (_maximum' 10);  	g.DrawString (text' font' brush' drawRect.Left + drawRect.Width / 2' drawRect.Top' stringFormat);  	//===============================================================  }  
Magic Number,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,DrawTickTextLine,The following statement contains a magic number: if (_orientation == Orientation.Horizontal) {  	// Calculate tick's setting  	tickFrequencySize = drawRect.Width * tickFrequency / (maximum - minimum);  	//===============================================================  	// Draw each tick text  	for (int i = 0; i <= tickCount; i++) {  		text = Convert.ToString (_minimum + tickFrequency * i' 10);  		g.DrawString (text' font' brush' drawRect.Left + tickFrequencySize * i' drawRect.Top + drawRect.Height / 2' stringFormat);  	}  	// Draw last tick text at Maximum  	text = Convert.ToString (_maximum' 10);  	g.DrawString (text' font' brush' drawRect.Right' drawRect.Top + drawRect.Height / 2' stringFormat);  	//===============================================================  }  else//Orientation.Vertical   {  	// Calculate tick's setting  	tickFrequencySize = drawRect.Height * tickFrequency / (maximum - minimum);  	//===============================================================  	// Draw each tick text  	for (int i = 0; i <= tickCount; i++) {  		text = Convert.ToString (_minimum + tickFrequency * i' 10);  		g.DrawString (text' font' brush' drawRect.Left + drawRect.Width / 2' drawRect.Bottom - tickFrequencySize * i' stringFormat);  	}  	// Draw last tick text at Maximum  	text = Convert.ToString (_maximum' 10);  	g.DrawString (text' font' brush' drawRect.Left + drawRect.Width / 2' drawRect.Top' stringFormat);  	//===============================================================  }  
Magic Number,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,DrawTickTextLine,The following statement contains a magic number: if (_orientation == Orientation.Horizontal) {  	// Calculate tick's setting  	tickFrequencySize = drawRect.Width * tickFrequency / (maximum - minimum);  	//===============================================================  	// Draw each tick text  	for (int i = 0; i <= tickCount; i++) {  		text = Convert.ToString (_minimum + tickFrequency * i' 10);  		g.DrawString (text' font' brush' drawRect.Left + tickFrequencySize * i' drawRect.Top + drawRect.Height / 2' stringFormat);  	}  	// Draw last tick text at Maximum  	text = Convert.ToString (_maximum' 10);  	g.DrawString (text' font' brush' drawRect.Right' drawRect.Top + drawRect.Height / 2' stringFormat);  	//===============================================================  }  else//Orientation.Vertical   {  	// Calculate tick's setting  	tickFrequencySize = drawRect.Height * tickFrequency / (maximum - minimum);  	//===============================================================  	// Draw each tick text  	for (int i = 0; i <= tickCount; i++) {  		text = Convert.ToString (_minimum + tickFrequency * i' 10);  		g.DrawString (text' font' brush' drawRect.Left + drawRect.Width / 2' drawRect.Bottom - tickFrequencySize * i' stringFormat);  	}  	// Draw last tick text at Maximum  	text = Convert.ToString (_maximum' 10);  	g.DrawString (text' font' brush' drawRect.Left + drawRect.Width / 2' drawRect.Top' stringFormat);  	//===============================================================  }  
Magic Number,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,DrawTickTextLine,The following statement contains a magic number: if (_orientation == Orientation.Horizontal) {  	// Calculate tick's setting  	tickFrequencySize = drawRect.Width * tickFrequency / (maximum - minimum);  	//===============================================================  	// Draw each tick text  	for (int i = 0; i <= tickCount; i++) {  		text = Convert.ToString (_minimum + tickFrequency * i' 10);  		g.DrawString (text' font' brush' drawRect.Left + tickFrequencySize * i' drawRect.Top + drawRect.Height / 2' stringFormat);  	}  	// Draw last tick text at Maximum  	text = Convert.ToString (_maximum' 10);  	g.DrawString (text' font' brush' drawRect.Right' drawRect.Top + drawRect.Height / 2' stringFormat);  	//===============================================================  }  else//Orientation.Vertical   {  	// Calculate tick's setting  	tickFrequencySize = drawRect.Height * tickFrequency / (maximum - minimum);  	//===============================================================  	// Draw each tick text  	for (int i = 0; i <= tickCount; i++) {  		text = Convert.ToString (_minimum + tickFrequency * i' 10);  		g.DrawString (text' font' brush' drawRect.Left + drawRect.Width / 2' drawRect.Bottom - tickFrequencySize * i' stringFormat);  	}  	// Draw last tick text at Maximum  	text = Convert.ToString (_maximum' 10);  	g.DrawString (text' font' brush' drawRect.Left + drawRect.Width / 2' drawRect.Top' stringFormat);  	//===============================================================  }  
Magic Number,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,DrawTickTextLine,The following statement contains a magic number: if (_orientation == Orientation.Horizontal) {  	// Calculate tick's setting  	tickFrequencySize = drawRect.Width * tickFrequency / (maximum - minimum);  	//===============================================================  	// Draw each tick text  	for (int i = 0; i <= tickCount; i++) {  		text = Convert.ToString (_minimum + tickFrequency * i' 10);  		g.DrawString (text' font' brush' drawRect.Left + tickFrequencySize * i' drawRect.Top + drawRect.Height / 2' stringFormat);  	}  	// Draw last tick text at Maximum  	text = Convert.ToString (_maximum' 10);  	g.DrawString (text' font' brush' drawRect.Right' drawRect.Top + drawRect.Height / 2' stringFormat);  	//===============================================================  }  else//Orientation.Vertical   {  	// Calculate tick's setting  	tickFrequencySize = drawRect.Height * tickFrequency / (maximum - minimum);  	//===============================================================  	// Draw each tick text  	for (int i = 0; i <= tickCount; i++) {  		text = Convert.ToString (_minimum + tickFrequency * i' 10);  		g.DrawString (text' font' brush' drawRect.Left + drawRect.Width / 2' drawRect.Bottom - tickFrequencySize * i' stringFormat);  	}  	// Draw last tick text at Maximum  	text = Convert.ToString (_maximum' 10);  	g.DrawString (text' font' brush' drawRect.Left + drawRect.Width / 2' drawRect.Top' stringFormat);  	//===============================================================  }  
Magic Number,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,DrawTickTextLine,The following statement contains a magic number: if (_orientation == Orientation.Horizontal) {  	// Calculate tick's setting  	tickFrequencySize = drawRect.Width * tickFrequency / (maximum - minimum);  	//===============================================================  	// Draw each tick text  	for (int i = 0; i <= tickCount; i++) {  		text = Convert.ToString (_minimum + tickFrequency * i' 10);  		g.DrawString (text' font' brush' drawRect.Left + tickFrequencySize * i' drawRect.Top + drawRect.Height / 2' stringFormat);  	}  	// Draw last tick text at Maximum  	text = Convert.ToString (_maximum' 10);  	g.DrawString (text' font' brush' drawRect.Right' drawRect.Top + drawRect.Height / 2' stringFormat);  	//===============================================================  }  else//Orientation.Vertical   {  	// Calculate tick's setting  	tickFrequencySize = drawRect.Height * tickFrequency / (maximum - minimum);  	//===============================================================  	// Draw each tick text  	for (int i = 0; i <= tickCount; i++) {  		text = Convert.ToString (_minimum + tickFrequency * i' 10);  		g.DrawString (text' font' brush' drawRect.Left + drawRect.Width / 2' drawRect.Bottom - tickFrequencySize * i' stringFormat);  	}  	// Draw last tick text at Maximum  	text = Convert.ToString (_maximum' 10);  	g.DrawString (text' font' brush' drawRect.Left + drawRect.Width / 2' drawRect.Top' stringFormat);  	//===============================================================  }  
Magic Number,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,DrawTickTextLine,The following statement contains a magic number: if (_orientation == Orientation.Horizontal) {  	// Calculate tick's setting  	tickFrequencySize = drawRect.Width * tickFrequency / (maximum - minimum);  	//===============================================================  	// Draw each tick text  	for (int i = 0; i <= tickCount; i++) {  		text = Convert.ToString (_minimum + tickFrequency * i' 10);  		g.DrawString (text' font' brush' drawRect.Left + tickFrequencySize * i' drawRect.Top + drawRect.Height / 2' stringFormat);  	}  	// Draw last tick text at Maximum  	text = Convert.ToString (_maximum' 10);  	g.DrawString (text' font' brush' drawRect.Right' drawRect.Top + drawRect.Height / 2' stringFormat);  	//===============================================================  }  else//Orientation.Vertical   {  	// Calculate tick's setting  	tickFrequencySize = drawRect.Height * tickFrequency / (maximum - minimum);  	//===============================================================  	// Draw each tick text  	for (int i = 0; i <= tickCount; i++) {  		text = Convert.ToString (_minimum + tickFrequency * i' 10);  		g.DrawString (text' font' brush' drawRect.Left + drawRect.Width / 2' drawRect.Bottom - tickFrequencySize * i' stringFormat);  	}  	// Draw last tick text at Maximum  	text = Convert.ToString (_maximum' 10);  	g.DrawString (text' font' brush' drawRect.Left + drawRect.Width / 2' drawRect.Top' stringFormat);  	//===============================================================  }  
Magic Number,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,DrawTickTextLine,The following statement contains a magic number: for (int i = 0; i <= tickCount; i++) {  	text = Convert.ToString (_minimum + tickFrequency * i' 10);  	g.DrawString (text' font' brush' drawRect.Left + tickFrequencySize * i' drawRect.Top + drawRect.Height / 2' stringFormat);  }  
Magic Number,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,DrawTickTextLine,The following statement contains a magic number: for (int i = 0; i <= tickCount; i++) {  	text = Convert.ToString (_minimum + tickFrequency * i' 10);  	g.DrawString (text' font' brush' drawRect.Left + tickFrequencySize * i' drawRect.Top + drawRect.Height / 2' stringFormat);  }  
Magic Number,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,DrawTickTextLine,The following statement contains a magic number: text = Convert.ToString (_minimum + tickFrequency * i' 10);  
Magic Number,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,DrawTickTextLine,The following statement contains a magic number: g.DrawString (text' font' brush' drawRect.Left + tickFrequencySize * i' drawRect.Top + drawRect.Height / 2' stringFormat);  
Magic Number,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,DrawTickTextLine,The following statement contains a magic number: text = Convert.ToString (_maximum' 10);  
Magic Number,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,DrawTickTextLine,The following statement contains a magic number: g.DrawString (text' font' brush' drawRect.Right' drawRect.Top + drawRect.Height / 2' stringFormat);  
Magic Number,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,DrawTickTextLine,The following statement contains a magic number: for (int i = 0; i <= tickCount; i++) {  	text = Convert.ToString (_minimum + tickFrequency * i' 10);  	g.DrawString (text' font' brush' drawRect.Left + drawRect.Width / 2' drawRect.Bottom - tickFrequencySize * i' stringFormat);  }  
Magic Number,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,DrawTickTextLine,The following statement contains a magic number: for (int i = 0; i <= tickCount; i++) {  	text = Convert.ToString (_minimum + tickFrequency * i' 10);  	g.DrawString (text' font' brush' drawRect.Left + drawRect.Width / 2' drawRect.Bottom - tickFrequencySize * i' stringFormat);  }  
Magic Number,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,DrawTickTextLine,The following statement contains a magic number: text = Convert.ToString (_minimum + tickFrequency * i' 10);  
Magic Number,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,DrawTickTextLine,The following statement contains a magic number: g.DrawString (text' font' brush' drawRect.Left + drawRect.Width / 2' drawRect.Bottom - tickFrequencySize * i' stringFormat);  
Magic Number,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,DrawTickTextLine,The following statement contains a magic number: text = Convert.ToString (_maximum' 10);  
Magic Number,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,DrawTickTextLine,The following statement contains a magic number: g.DrawString (text' font' brush' drawRect.Left + drawRect.Width / 2' drawRect.Top' stringFormat);  
Magic Number,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,OnMouseDownSlider,The following statement contains a magic number: if (_trackerRect.Contains (currentPoint)) {  	if (!leftButtonDown) {  		leftButtonDown = true;  		this.Capture = true;  		switch (this._orientation) {  		case Orientation.Horizontal:  			mouseStartPos = currentPoint.X - _trackerRect.X;  			break;  		case Orientation.Vertical:  			mouseStartPos = currentPoint.Y - _trackerRect.Y;  			break;  		}  	}  }  else {  	switch (this._orientation) {  	case Orientation.Horizontal:  		if (currentPoint.X + _trackerSize.Width / 2 >= this.Width - _indentWidth)  			offsetValue = _maximum - _minimum;  		else if (currentPoint.X - _trackerSize.Width / 2 <= _indentWidth)  			offsetValue = 0;  		else  			offsetValue = (int)(((currentPoint.X - _indentWidth - _trackerSize.Width / 2) * (_maximum - _minimum)) / (this.Width - 2 * _indentWidth - _trackerSize.Width) + 0.5);  		break;  	case Orientation.Vertical:  		if (currentPoint.Y + _trackerSize.Width / 2 >= this.Height - _indentHeight)  			offsetValue = 0;  		else if (currentPoint.Y - _trackerSize.Width / 2 <= _indentHeight)  			offsetValue = _maximum - _minimum;  		else  			offsetValue = (int)(((this.Height - currentPoint.Y - _indentHeight - _trackerSize.Width / 2) * (_maximum - _minimum)) / (this.Height - 2 * _indentHeight - _trackerSize.Width) + 0.5);  		break;  	default:  		break;  	}  	oldValue = _value;  	_value = _minimum + offsetValue;  	this.Invalidate ();  	if (oldValue != _value) {  		OnScroll ();  		OnValueChanged (_value);  	}  }  
Magic Number,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,OnMouseDownSlider,The following statement contains a magic number: if (_trackerRect.Contains (currentPoint)) {  	if (!leftButtonDown) {  		leftButtonDown = true;  		this.Capture = true;  		switch (this._orientation) {  		case Orientation.Horizontal:  			mouseStartPos = currentPoint.X - _trackerRect.X;  			break;  		case Orientation.Vertical:  			mouseStartPos = currentPoint.Y - _trackerRect.Y;  			break;  		}  	}  }  else {  	switch (this._orientation) {  	case Orientation.Horizontal:  		if (currentPoint.X + _trackerSize.Width / 2 >= this.Width - _indentWidth)  			offsetValue = _maximum - _minimum;  		else if (currentPoint.X - _trackerSize.Width / 2 <= _indentWidth)  			offsetValue = 0;  		else  			offsetValue = (int)(((currentPoint.X - _indentWidth - _trackerSize.Width / 2) * (_maximum - _minimum)) / (this.Width - 2 * _indentWidth - _trackerSize.Width) + 0.5);  		break;  	case Orientation.Vertical:  		if (currentPoint.Y + _trackerSize.Width / 2 >= this.Height - _indentHeight)  			offsetValue = 0;  		else if (currentPoint.Y - _trackerSize.Width / 2 <= _indentHeight)  			offsetValue = _maximum - _minimum;  		else  			offsetValue = (int)(((this.Height - currentPoint.Y - _indentHeight - _trackerSize.Width / 2) * (_maximum - _minimum)) / (this.Height - 2 * _indentHeight - _trackerSize.Width) + 0.5);  		break;  	default:  		break;  	}  	oldValue = _value;  	_value = _minimum + offsetValue;  	this.Invalidate ();  	if (oldValue != _value) {  		OnScroll ();  		OnValueChanged (_value);  	}  }  
Magic Number,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,OnMouseDownSlider,The following statement contains a magic number: if (_trackerRect.Contains (currentPoint)) {  	if (!leftButtonDown) {  		leftButtonDown = true;  		this.Capture = true;  		switch (this._orientation) {  		case Orientation.Horizontal:  			mouseStartPos = currentPoint.X - _trackerRect.X;  			break;  		case Orientation.Vertical:  			mouseStartPos = currentPoint.Y - _trackerRect.Y;  			break;  		}  	}  }  else {  	switch (this._orientation) {  	case Orientation.Horizontal:  		if (currentPoint.X + _trackerSize.Width / 2 >= this.Width - _indentWidth)  			offsetValue = _maximum - _minimum;  		else if (currentPoint.X - _trackerSize.Width / 2 <= _indentWidth)  			offsetValue = 0;  		else  			offsetValue = (int)(((currentPoint.X - _indentWidth - _trackerSize.Width / 2) * (_maximum - _minimum)) / (this.Width - 2 * _indentWidth - _trackerSize.Width) + 0.5);  		break;  	case Orientation.Vertical:  		if (currentPoint.Y + _trackerSize.Width / 2 >= this.Height - _indentHeight)  			offsetValue = 0;  		else if (currentPoint.Y - _trackerSize.Width / 2 <= _indentHeight)  			offsetValue = _maximum - _minimum;  		else  			offsetValue = (int)(((this.Height - currentPoint.Y - _indentHeight - _trackerSize.Width / 2) * (_maximum - _minimum)) / (this.Height - 2 * _indentHeight - _trackerSize.Width) + 0.5);  		break;  	default:  		break;  	}  	oldValue = _value;  	_value = _minimum + offsetValue;  	this.Invalidate ();  	if (oldValue != _value) {  		OnScroll ();  		OnValueChanged (_value);  	}  }  
Magic Number,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,OnMouseDownSlider,The following statement contains a magic number: if (_trackerRect.Contains (currentPoint)) {  	if (!leftButtonDown) {  		leftButtonDown = true;  		this.Capture = true;  		switch (this._orientation) {  		case Orientation.Horizontal:  			mouseStartPos = currentPoint.X - _trackerRect.X;  			break;  		case Orientation.Vertical:  			mouseStartPos = currentPoint.Y - _trackerRect.Y;  			break;  		}  	}  }  else {  	switch (this._orientation) {  	case Orientation.Horizontal:  		if (currentPoint.X + _trackerSize.Width / 2 >= this.Width - _indentWidth)  			offsetValue = _maximum - _minimum;  		else if (currentPoint.X - _trackerSize.Width / 2 <= _indentWidth)  			offsetValue = 0;  		else  			offsetValue = (int)(((currentPoint.X - _indentWidth - _trackerSize.Width / 2) * (_maximum - _minimum)) / (this.Width - 2 * _indentWidth - _trackerSize.Width) + 0.5);  		break;  	case Orientation.Vertical:  		if (currentPoint.Y + _trackerSize.Width / 2 >= this.Height - _indentHeight)  			offsetValue = 0;  		else if (currentPoint.Y - _trackerSize.Width / 2 <= _indentHeight)  			offsetValue = _maximum - _minimum;  		else  			offsetValue = (int)(((this.Height - currentPoint.Y - _indentHeight - _trackerSize.Width / 2) * (_maximum - _minimum)) / (this.Height - 2 * _indentHeight - _trackerSize.Width) + 0.5);  		break;  	default:  		break;  	}  	oldValue = _value;  	_value = _minimum + offsetValue;  	this.Invalidate ();  	if (oldValue != _value) {  		OnScroll ();  		OnValueChanged (_value);  	}  }  
Magic Number,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,OnMouseDownSlider,The following statement contains a magic number: if (_trackerRect.Contains (currentPoint)) {  	if (!leftButtonDown) {  		leftButtonDown = true;  		this.Capture = true;  		switch (this._orientation) {  		case Orientation.Horizontal:  			mouseStartPos = currentPoint.X - _trackerRect.X;  			break;  		case Orientation.Vertical:  			mouseStartPos = currentPoint.Y - _trackerRect.Y;  			break;  		}  	}  }  else {  	switch (this._orientation) {  	case Orientation.Horizontal:  		if (currentPoint.X + _trackerSize.Width / 2 >= this.Width - _indentWidth)  			offsetValue = _maximum - _minimum;  		else if (currentPoint.X - _trackerSize.Width / 2 <= _indentWidth)  			offsetValue = 0;  		else  			offsetValue = (int)(((currentPoint.X - _indentWidth - _trackerSize.Width / 2) * (_maximum - _minimum)) / (this.Width - 2 * _indentWidth - _trackerSize.Width) + 0.5);  		break;  	case Orientation.Vertical:  		if (currentPoint.Y + _trackerSize.Width / 2 >= this.Height - _indentHeight)  			offsetValue = 0;  		else if (currentPoint.Y - _trackerSize.Width / 2 <= _indentHeight)  			offsetValue = _maximum - _minimum;  		else  			offsetValue = (int)(((this.Height - currentPoint.Y - _indentHeight - _trackerSize.Width / 2) * (_maximum - _minimum)) / (this.Height - 2 * _indentHeight - _trackerSize.Width) + 0.5);  		break;  	default:  		break;  	}  	oldValue = _value;  	_value = _minimum + offsetValue;  	this.Invalidate ();  	if (oldValue != _value) {  		OnScroll ();  		OnValueChanged (_value);  	}  }  
Magic Number,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,OnMouseDownSlider,The following statement contains a magic number: if (_trackerRect.Contains (currentPoint)) {  	if (!leftButtonDown) {  		leftButtonDown = true;  		this.Capture = true;  		switch (this._orientation) {  		case Orientation.Horizontal:  			mouseStartPos = currentPoint.X - _trackerRect.X;  			break;  		case Orientation.Vertical:  			mouseStartPos = currentPoint.Y - _trackerRect.Y;  			break;  		}  	}  }  else {  	switch (this._orientation) {  	case Orientation.Horizontal:  		if (currentPoint.X + _trackerSize.Width / 2 >= this.Width - _indentWidth)  			offsetValue = _maximum - _minimum;  		else if (currentPoint.X - _trackerSize.Width / 2 <= _indentWidth)  			offsetValue = 0;  		else  			offsetValue = (int)(((currentPoint.X - _indentWidth - _trackerSize.Width / 2) * (_maximum - _minimum)) / (this.Width - 2 * _indentWidth - _trackerSize.Width) + 0.5);  		break;  	case Orientation.Vertical:  		if (currentPoint.Y + _trackerSize.Width / 2 >= this.Height - _indentHeight)  			offsetValue = 0;  		else if (currentPoint.Y - _trackerSize.Width / 2 <= _indentHeight)  			offsetValue = _maximum - _minimum;  		else  			offsetValue = (int)(((this.Height - currentPoint.Y - _indentHeight - _trackerSize.Width / 2) * (_maximum - _minimum)) / (this.Height - 2 * _indentHeight - _trackerSize.Width) + 0.5);  		break;  	default:  		break;  	}  	oldValue = _value;  	_value = _minimum + offsetValue;  	this.Invalidate ();  	if (oldValue != _value) {  		OnScroll ();  		OnValueChanged (_value);  	}  }  
Magic Number,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,OnMouseDownSlider,The following statement contains a magic number: if (_trackerRect.Contains (currentPoint)) {  	if (!leftButtonDown) {  		leftButtonDown = true;  		this.Capture = true;  		switch (this._orientation) {  		case Orientation.Horizontal:  			mouseStartPos = currentPoint.X - _trackerRect.X;  			break;  		case Orientation.Vertical:  			mouseStartPos = currentPoint.Y - _trackerRect.Y;  			break;  		}  	}  }  else {  	switch (this._orientation) {  	case Orientation.Horizontal:  		if (currentPoint.X + _trackerSize.Width / 2 >= this.Width - _indentWidth)  			offsetValue = _maximum - _minimum;  		else if (currentPoint.X - _trackerSize.Width / 2 <= _indentWidth)  			offsetValue = 0;  		else  			offsetValue = (int)(((currentPoint.X - _indentWidth - _trackerSize.Width / 2) * (_maximum - _minimum)) / (this.Width - 2 * _indentWidth - _trackerSize.Width) + 0.5);  		break;  	case Orientation.Vertical:  		if (currentPoint.Y + _trackerSize.Width / 2 >= this.Height - _indentHeight)  			offsetValue = 0;  		else if (currentPoint.Y - _trackerSize.Width / 2 <= _indentHeight)  			offsetValue = _maximum - _minimum;  		else  			offsetValue = (int)(((this.Height - currentPoint.Y - _indentHeight - _trackerSize.Width / 2) * (_maximum - _minimum)) / (this.Height - 2 * _indentHeight - _trackerSize.Width) + 0.5);  		break;  	default:  		break;  	}  	oldValue = _value;  	_value = _minimum + offsetValue;  	this.Invalidate ();  	if (oldValue != _value) {  		OnScroll ();  		OnValueChanged (_value);  	}  }  
Magic Number,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,OnMouseDownSlider,The following statement contains a magic number: if (_trackerRect.Contains (currentPoint)) {  	if (!leftButtonDown) {  		leftButtonDown = true;  		this.Capture = true;  		switch (this._orientation) {  		case Orientation.Horizontal:  			mouseStartPos = currentPoint.X - _trackerRect.X;  			break;  		case Orientation.Vertical:  			mouseStartPos = currentPoint.Y - _trackerRect.Y;  			break;  		}  	}  }  else {  	switch (this._orientation) {  	case Orientation.Horizontal:  		if (currentPoint.X + _trackerSize.Width / 2 >= this.Width - _indentWidth)  			offsetValue = _maximum - _minimum;  		else if (currentPoint.X - _trackerSize.Width / 2 <= _indentWidth)  			offsetValue = 0;  		else  			offsetValue = (int)(((currentPoint.X - _indentWidth - _trackerSize.Width / 2) * (_maximum - _minimum)) / (this.Width - 2 * _indentWidth - _trackerSize.Width) + 0.5);  		break;  	case Orientation.Vertical:  		if (currentPoint.Y + _trackerSize.Width / 2 >= this.Height - _indentHeight)  			offsetValue = 0;  		else if (currentPoint.Y - _trackerSize.Width / 2 <= _indentHeight)  			offsetValue = _maximum - _minimum;  		else  			offsetValue = (int)(((this.Height - currentPoint.Y - _indentHeight - _trackerSize.Width / 2) * (_maximum - _minimum)) / (this.Height - 2 * _indentHeight - _trackerSize.Width) + 0.5);  		break;  	default:  		break;  	}  	oldValue = _value;  	_value = _minimum + offsetValue;  	this.Invalidate ();  	if (oldValue != _value) {  		OnScroll ();  		OnValueChanged (_value);  	}  }  
Magic Number,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,OnMouseDownSlider,The following statement contains a magic number: if (_trackerRect.Contains (currentPoint)) {  	if (!leftButtonDown) {  		leftButtonDown = true;  		this.Capture = true;  		switch (this._orientation) {  		case Orientation.Horizontal:  			mouseStartPos = currentPoint.X - _trackerRect.X;  			break;  		case Orientation.Vertical:  			mouseStartPos = currentPoint.Y - _trackerRect.Y;  			break;  		}  	}  }  else {  	switch (this._orientation) {  	case Orientation.Horizontal:  		if (currentPoint.X + _trackerSize.Width / 2 >= this.Width - _indentWidth)  			offsetValue = _maximum - _minimum;  		else if (currentPoint.X - _trackerSize.Width / 2 <= _indentWidth)  			offsetValue = 0;  		else  			offsetValue = (int)(((currentPoint.X - _indentWidth - _trackerSize.Width / 2) * (_maximum - _minimum)) / (this.Width - 2 * _indentWidth - _trackerSize.Width) + 0.5);  		break;  	case Orientation.Vertical:  		if (currentPoint.Y + _trackerSize.Width / 2 >= this.Height - _indentHeight)  			offsetValue = 0;  		else if (currentPoint.Y - _trackerSize.Width / 2 <= _indentHeight)  			offsetValue = _maximum - _minimum;  		else  			offsetValue = (int)(((this.Height - currentPoint.Y - _indentHeight - _trackerSize.Width / 2) * (_maximum - _minimum)) / (this.Height - 2 * _indentHeight - _trackerSize.Width) + 0.5);  		break;  	default:  		break;  	}  	oldValue = _value;  	_value = _minimum + offsetValue;  	this.Invalidate ();  	if (oldValue != _value) {  		OnScroll ();  		OnValueChanged (_value);  	}  }  
Magic Number,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,OnMouseDownSlider,The following statement contains a magic number: if (_trackerRect.Contains (currentPoint)) {  	if (!leftButtonDown) {  		leftButtonDown = true;  		this.Capture = true;  		switch (this._orientation) {  		case Orientation.Horizontal:  			mouseStartPos = currentPoint.X - _trackerRect.X;  			break;  		case Orientation.Vertical:  			mouseStartPos = currentPoint.Y - _trackerRect.Y;  			break;  		}  	}  }  else {  	switch (this._orientation) {  	case Orientation.Horizontal:  		if (currentPoint.X + _trackerSize.Width / 2 >= this.Width - _indentWidth)  			offsetValue = _maximum - _minimum;  		else if (currentPoint.X - _trackerSize.Width / 2 <= _indentWidth)  			offsetValue = 0;  		else  			offsetValue = (int)(((currentPoint.X - _indentWidth - _trackerSize.Width / 2) * (_maximum - _minimum)) / (this.Width - 2 * _indentWidth - _trackerSize.Width) + 0.5);  		break;  	case Orientation.Vertical:  		if (currentPoint.Y + _trackerSize.Width / 2 >= this.Height - _indentHeight)  			offsetValue = 0;  		else if (currentPoint.Y - _trackerSize.Width / 2 <= _indentHeight)  			offsetValue = _maximum - _minimum;  		else  			offsetValue = (int)(((this.Height - currentPoint.Y - _indentHeight - _trackerSize.Width / 2) * (_maximum - _minimum)) / (this.Height - 2 * _indentHeight - _trackerSize.Width) + 0.5);  		break;  	default:  		break;  	}  	oldValue = _value;  	_value = _minimum + offsetValue;  	this.Invalidate ();  	if (oldValue != _value) {  		OnScroll ();  		OnValueChanged (_value);  	}  }  
Magic Number,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,OnMouseDownSlider,The following statement contains a magic number: switch (this._orientation) {  case Orientation.Horizontal:  	if (currentPoint.X + _trackerSize.Width / 2 >= this.Width - _indentWidth)  		offsetValue = _maximum - _minimum;  	else if (currentPoint.X - _trackerSize.Width / 2 <= _indentWidth)  		offsetValue = 0;  	else  		offsetValue = (int)(((currentPoint.X - _indentWidth - _trackerSize.Width / 2) * (_maximum - _minimum)) / (this.Width - 2 * _indentWidth - _trackerSize.Width) + 0.5);  	break;  case Orientation.Vertical:  	if (currentPoint.Y + _trackerSize.Width / 2 >= this.Height - _indentHeight)  		offsetValue = 0;  	else if (currentPoint.Y - _trackerSize.Width / 2 <= _indentHeight)  		offsetValue = _maximum - _minimum;  	else  		offsetValue = (int)(((this.Height - currentPoint.Y - _indentHeight - _trackerSize.Width / 2) * (_maximum - _minimum)) / (this.Height - 2 * _indentHeight - _trackerSize.Width) + 0.5);  	break;  default:  	break;  }  
Magic Number,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,OnMouseDownSlider,The following statement contains a magic number: switch (this._orientation) {  case Orientation.Horizontal:  	if (currentPoint.X + _trackerSize.Width / 2 >= this.Width - _indentWidth)  		offsetValue = _maximum - _minimum;  	else if (currentPoint.X - _trackerSize.Width / 2 <= _indentWidth)  		offsetValue = 0;  	else  		offsetValue = (int)(((currentPoint.X - _indentWidth - _trackerSize.Width / 2) * (_maximum - _minimum)) / (this.Width - 2 * _indentWidth - _trackerSize.Width) + 0.5);  	break;  case Orientation.Vertical:  	if (currentPoint.Y + _trackerSize.Width / 2 >= this.Height - _indentHeight)  		offsetValue = 0;  	else if (currentPoint.Y - _trackerSize.Width / 2 <= _indentHeight)  		offsetValue = _maximum - _minimum;  	else  		offsetValue = (int)(((this.Height - currentPoint.Y - _indentHeight - _trackerSize.Width / 2) * (_maximum - _minimum)) / (this.Height - 2 * _indentHeight - _trackerSize.Width) + 0.5);  	break;  default:  	break;  }  
Magic Number,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,OnMouseDownSlider,The following statement contains a magic number: switch (this._orientation) {  case Orientation.Horizontal:  	if (currentPoint.X + _trackerSize.Width / 2 >= this.Width - _indentWidth)  		offsetValue = _maximum - _minimum;  	else if (currentPoint.X - _trackerSize.Width / 2 <= _indentWidth)  		offsetValue = 0;  	else  		offsetValue = (int)(((currentPoint.X - _indentWidth - _trackerSize.Width / 2) * (_maximum - _minimum)) / (this.Width - 2 * _indentWidth - _trackerSize.Width) + 0.5);  	break;  case Orientation.Vertical:  	if (currentPoint.Y + _trackerSize.Width / 2 >= this.Height - _indentHeight)  		offsetValue = 0;  	else if (currentPoint.Y - _trackerSize.Width / 2 <= _indentHeight)  		offsetValue = _maximum - _minimum;  	else  		offsetValue = (int)(((this.Height - currentPoint.Y - _indentHeight - _trackerSize.Width / 2) * (_maximum - _minimum)) / (this.Height - 2 * _indentHeight - _trackerSize.Width) + 0.5);  	break;  default:  	break;  }  
Magic Number,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,OnMouseDownSlider,The following statement contains a magic number: switch (this._orientation) {  case Orientation.Horizontal:  	if (currentPoint.X + _trackerSize.Width / 2 >= this.Width - _indentWidth)  		offsetValue = _maximum - _minimum;  	else if (currentPoint.X - _trackerSize.Width / 2 <= _indentWidth)  		offsetValue = 0;  	else  		offsetValue = (int)(((currentPoint.X - _indentWidth - _trackerSize.Width / 2) * (_maximum - _minimum)) / (this.Width - 2 * _indentWidth - _trackerSize.Width) + 0.5);  	break;  case Orientation.Vertical:  	if (currentPoint.Y + _trackerSize.Width / 2 >= this.Height - _indentHeight)  		offsetValue = 0;  	else if (currentPoint.Y - _trackerSize.Width / 2 <= _indentHeight)  		offsetValue = _maximum - _minimum;  	else  		offsetValue = (int)(((this.Height - currentPoint.Y - _indentHeight - _trackerSize.Width / 2) * (_maximum - _minimum)) / (this.Height - 2 * _indentHeight - _trackerSize.Width) + 0.5);  	break;  default:  	break;  }  
Magic Number,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,OnMouseDownSlider,The following statement contains a magic number: switch (this._orientation) {  case Orientation.Horizontal:  	if (currentPoint.X + _trackerSize.Width / 2 >= this.Width - _indentWidth)  		offsetValue = _maximum - _minimum;  	else if (currentPoint.X - _trackerSize.Width / 2 <= _indentWidth)  		offsetValue = 0;  	else  		offsetValue = (int)(((currentPoint.X - _indentWidth - _trackerSize.Width / 2) * (_maximum - _minimum)) / (this.Width - 2 * _indentWidth - _trackerSize.Width) + 0.5);  	break;  case Orientation.Vertical:  	if (currentPoint.Y + _trackerSize.Width / 2 >= this.Height - _indentHeight)  		offsetValue = 0;  	else if (currentPoint.Y - _trackerSize.Width / 2 <= _indentHeight)  		offsetValue = _maximum - _minimum;  	else  		offsetValue = (int)(((this.Height - currentPoint.Y - _indentHeight - _trackerSize.Width / 2) * (_maximum - _minimum)) / (this.Height - 2 * _indentHeight - _trackerSize.Width) + 0.5);  	break;  default:  	break;  }  
Magic Number,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,OnMouseDownSlider,The following statement contains a magic number: switch (this._orientation) {  case Orientation.Horizontal:  	if (currentPoint.X + _trackerSize.Width / 2 >= this.Width - _indentWidth)  		offsetValue = _maximum - _minimum;  	else if (currentPoint.X - _trackerSize.Width / 2 <= _indentWidth)  		offsetValue = 0;  	else  		offsetValue = (int)(((currentPoint.X - _indentWidth - _trackerSize.Width / 2) * (_maximum - _minimum)) / (this.Width - 2 * _indentWidth - _trackerSize.Width) + 0.5);  	break;  case Orientation.Vertical:  	if (currentPoint.Y + _trackerSize.Width / 2 >= this.Height - _indentHeight)  		offsetValue = 0;  	else if (currentPoint.Y - _trackerSize.Width / 2 <= _indentHeight)  		offsetValue = _maximum - _minimum;  	else  		offsetValue = (int)(((this.Height - currentPoint.Y - _indentHeight - _trackerSize.Width / 2) * (_maximum - _minimum)) / (this.Height - 2 * _indentHeight - _trackerSize.Width) + 0.5);  	break;  default:  	break;  }  
Magic Number,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,OnMouseDownSlider,The following statement contains a magic number: switch (this._orientation) {  case Orientation.Horizontal:  	if (currentPoint.X + _trackerSize.Width / 2 >= this.Width - _indentWidth)  		offsetValue = _maximum - _minimum;  	else if (currentPoint.X - _trackerSize.Width / 2 <= _indentWidth)  		offsetValue = 0;  	else  		offsetValue = (int)(((currentPoint.X - _indentWidth - _trackerSize.Width / 2) * (_maximum - _minimum)) / (this.Width - 2 * _indentWidth - _trackerSize.Width) + 0.5);  	break;  case Orientation.Vertical:  	if (currentPoint.Y + _trackerSize.Width / 2 >= this.Height - _indentHeight)  		offsetValue = 0;  	else if (currentPoint.Y - _trackerSize.Width / 2 <= _indentHeight)  		offsetValue = _maximum - _minimum;  	else  		offsetValue = (int)(((this.Height - currentPoint.Y - _indentHeight - _trackerSize.Width / 2) * (_maximum - _minimum)) / (this.Height - 2 * _indentHeight - _trackerSize.Width) + 0.5);  	break;  default:  	break;  }  
Magic Number,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,OnMouseDownSlider,The following statement contains a magic number: switch (this._orientation) {  case Orientation.Horizontal:  	if (currentPoint.X + _trackerSize.Width / 2 >= this.Width - _indentWidth)  		offsetValue = _maximum - _minimum;  	else if (currentPoint.X - _trackerSize.Width / 2 <= _indentWidth)  		offsetValue = 0;  	else  		offsetValue = (int)(((currentPoint.X - _indentWidth - _trackerSize.Width / 2) * (_maximum - _minimum)) / (this.Width - 2 * _indentWidth - _trackerSize.Width) + 0.5);  	break;  case Orientation.Vertical:  	if (currentPoint.Y + _trackerSize.Width / 2 >= this.Height - _indentHeight)  		offsetValue = 0;  	else if (currentPoint.Y - _trackerSize.Width / 2 <= _indentHeight)  		offsetValue = _maximum - _minimum;  	else  		offsetValue = (int)(((this.Height - currentPoint.Y - _indentHeight - _trackerSize.Width / 2) * (_maximum - _minimum)) / (this.Height - 2 * _indentHeight - _trackerSize.Width) + 0.5);  	break;  default:  	break;  }  
Magic Number,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,OnMouseDownSlider,The following statement contains a magic number: switch (this._orientation) {  case Orientation.Horizontal:  	if (currentPoint.X + _trackerSize.Width / 2 >= this.Width - _indentWidth)  		offsetValue = _maximum - _minimum;  	else if (currentPoint.X - _trackerSize.Width / 2 <= _indentWidth)  		offsetValue = 0;  	else  		offsetValue = (int)(((currentPoint.X - _indentWidth - _trackerSize.Width / 2) * (_maximum - _minimum)) / (this.Width - 2 * _indentWidth - _trackerSize.Width) + 0.5);  	break;  case Orientation.Vertical:  	if (currentPoint.Y + _trackerSize.Width / 2 >= this.Height - _indentHeight)  		offsetValue = 0;  	else if (currentPoint.Y - _trackerSize.Width / 2 <= _indentHeight)  		offsetValue = _maximum - _minimum;  	else  		offsetValue = (int)(((this.Height - currentPoint.Y - _indentHeight - _trackerSize.Width / 2) * (_maximum - _minimum)) / (this.Height - 2 * _indentHeight - _trackerSize.Width) + 0.5);  	break;  default:  	break;  }  
Magic Number,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,OnMouseDownSlider,The following statement contains a magic number: switch (this._orientation) {  case Orientation.Horizontal:  	if (currentPoint.X + _trackerSize.Width / 2 >= this.Width - _indentWidth)  		offsetValue = _maximum - _minimum;  	else if (currentPoint.X - _trackerSize.Width / 2 <= _indentWidth)  		offsetValue = 0;  	else  		offsetValue = (int)(((currentPoint.X - _indentWidth - _trackerSize.Width / 2) * (_maximum - _minimum)) / (this.Width - 2 * _indentWidth - _trackerSize.Width) + 0.5);  	break;  case Orientation.Vertical:  	if (currentPoint.Y + _trackerSize.Width / 2 >= this.Height - _indentHeight)  		offsetValue = 0;  	else if (currentPoint.Y - _trackerSize.Width / 2 <= _indentHeight)  		offsetValue = _maximum - _minimum;  	else  		offsetValue = (int)(((this.Height - currentPoint.Y - _indentHeight - _trackerSize.Width / 2) * (_maximum - _minimum)) / (this.Height - 2 * _indentHeight - _trackerSize.Width) + 0.5);  	break;  default:  	break;  }  
Magic Number,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,OnMouseDownSlider,The following statement contains a magic number: if (currentPoint.X + _trackerSize.Width / 2 >= this.Width - _indentWidth)  	offsetValue = _maximum - _minimum;  else if (currentPoint.X - _trackerSize.Width / 2 <= _indentWidth)  	offsetValue = 0;  else  	offsetValue = (int)(((currentPoint.X - _indentWidth - _trackerSize.Width / 2) * (_maximum - _minimum)) / (this.Width - 2 * _indentWidth - _trackerSize.Width) + 0.5);  
Magic Number,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,OnMouseDownSlider,The following statement contains a magic number: if (currentPoint.X + _trackerSize.Width / 2 >= this.Width - _indentWidth)  	offsetValue = _maximum - _minimum;  else if (currentPoint.X - _trackerSize.Width / 2 <= _indentWidth)  	offsetValue = 0;  else  	offsetValue = (int)(((currentPoint.X - _indentWidth - _trackerSize.Width / 2) * (_maximum - _minimum)) / (this.Width - 2 * _indentWidth - _trackerSize.Width) + 0.5);  
Magic Number,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,OnMouseDownSlider,The following statement contains a magic number: if (currentPoint.X + _trackerSize.Width / 2 >= this.Width - _indentWidth)  	offsetValue = _maximum - _minimum;  else if (currentPoint.X - _trackerSize.Width / 2 <= _indentWidth)  	offsetValue = 0;  else  	offsetValue = (int)(((currentPoint.X - _indentWidth - _trackerSize.Width / 2) * (_maximum - _minimum)) / (this.Width - 2 * _indentWidth - _trackerSize.Width) + 0.5);  
Magic Number,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,OnMouseDownSlider,The following statement contains a magic number: if (currentPoint.X + _trackerSize.Width / 2 >= this.Width - _indentWidth)  	offsetValue = _maximum - _minimum;  else if (currentPoint.X - _trackerSize.Width / 2 <= _indentWidth)  	offsetValue = 0;  else  	offsetValue = (int)(((currentPoint.X - _indentWidth - _trackerSize.Width / 2) * (_maximum - _minimum)) / (this.Width - 2 * _indentWidth - _trackerSize.Width) + 0.5);  
Magic Number,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,OnMouseDownSlider,The following statement contains a magic number: if (currentPoint.X + _trackerSize.Width / 2 >= this.Width - _indentWidth)  	offsetValue = _maximum - _minimum;  else if (currentPoint.X - _trackerSize.Width / 2 <= _indentWidth)  	offsetValue = 0;  else  	offsetValue = (int)(((currentPoint.X - _indentWidth - _trackerSize.Width / 2) * (_maximum - _minimum)) / (this.Width - 2 * _indentWidth - _trackerSize.Width) + 0.5);  
Magic Number,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,OnMouseDownSlider,The following statement contains a magic number: if (currentPoint.X - _trackerSize.Width / 2 <= _indentWidth)  	offsetValue = 0;  else  	offsetValue = (int)(((currentPoint.X - _indentWidth - _trackerSize.Width / 2) * (_maximum - _minimum)) / (this.Width - 2 * _indentWidth - _trackerSize.Width) + 0.5);  
Magic Number,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,OnMouseDownSlider,The following statement contains a magic number: if (currentPoint.X - _trackerSize.Width / 2 <= _indentWidth)  	offsetValue = 0;  else  	offsetValue = (int)(((currentPoint.X - _indentWidth - _trackerSize.Width / 2) * (_maximum - _minimum)) / (this.Width - 2 * _indentWidth - _trackerSize.Width) + 0.5);  
Magic Number,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,OnMouseDownSlider,The following statement contains a magic number: if (currentPoint.X - _trackerSize.Width / 2 <= _indentWidth)  	offsetValue = 0;  else  	offsetValue = (int)(((currentPoint.X - _indentWidth - _trackerSize.Width / 2) * (_maximum - _minimum)) / (this.Width - 2 * _indentWidth - _trackerSize.Width) + 0.5);  
Magic Number,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,OnMouseDownSlider,The following statement contains a magic number: if (currentPoint.X - _trackerSize.Width / 2 <= _indentWidth)  	offsetValue = 0;  else  	offsetValue = (int)(((currentPoint.X - _indentWidth - _trackerSize.Width / 2) * (_maximum - _minimum)) / (this.Width - 2 * _indentWidth - _trackerSize.Width) + 0.5);  
Magic Number,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,OnMouseDownSlider,The following statement contains a magic number: offsetValue = (int)(((currentPoint.X - _indentWidth - _trackerSize.Width / 2) * (_maximum - _minimum)) / (this.Width - 2 * _indentWidth - _trackerSize.Width) + 0.5);  
Magic Number,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,OnMouseDownSlider,The following statement contains a magic number: offsetValue = (int)(((currentPoint.X - _indentWidth - _trackerSize.Width / 2) * (_maximum - _minimum)) / (this.Width - 2 * _indentWidth - _trackerSize.Width) + 0.5);  
Magic Number,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,OnMouseDownSlider,The following statement contains a magic number: offsetValue = (int)(((currentPoint.X - _indentWidth - _trackerSize.Width / 2) * (_maximum - _minimum)) / (this.Width - 2 * _indentWidth - _trackerSize.Width) + 0.5);  
Magic Number,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,OnMouseDownSlider,The following statement contains a magic number: if (currentPoint.Y + _trackerSize.Width / 2 >= this.Height - _indentHeight)  	offsetValue = 0;  else if (currentPoint.Y - _trackerSize.Width / 2 <= _indentHeight)  	offsetValue = _maximum - _minimum;  else  	offsetValue = (int)(((this.Height - currentPoint.Y - _indentHeight - _trackerSize.Width / 2) * (_maximum - _minimum)) / (this.Height - 2 * _indentHeight - _trackerSize.Width) + 0.5);  
Magic Number,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,OnMouseDownSlider,The following statement contains a magic number: if (currentPoint.Y + _trackerSize.Width / 2 >= this.Height - _indentHeight)  	offsetValue = 0;  else if (currentPoint.Y - _trackerSize.Width / 2 <= _indentHeight)  	offsetValue = _maximum - _minimum;  else  	offsetValue = (int)(((this.Height - currentPoint.Y - _indentHeight - _trackerSize.Width / 2) * (_maximum - _minimum)) / (this.Height - 2 * _indentHeight - _trackerSize.Width) + 0.5);  
Magic Number,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,OnMouseDownSlider,The following statement contains a magic number: if (currentPoint.Y + _trackerSize.Width / 2 >= this.Height - _indentHeight)  	offsetValue = 0;  else if (currentPoint.Y - _trackerSize.Width / 2 <= _indentHeight)  	offsetValue = _maximum - _minimum;  else  	offsetValue = (int)(((this.Height - currentPoint.Y - _indentHeight - _trackerSize.Width / 2) * (_maximum - _minimum)) / (this.Height - 2 * _indentHeight - _trackerSize.Width) + 0.5);  
Magic Number,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,OnMouseDownSlider,The following statement contains a magic number: if (currentPoint.Y + _trackerSize.Width / 2 >= this.Height - _indentHeight)  	offsetValue = 0;  else if (currentPoint.Y - _trackerSize.Width / 2 <= _indentHeight)  	offsetValue = _maximum - _minimum;  else  	offsetValue = (int)(((this.Height - currentPoint.Y - _indentHeight - _trackerSize.Width / 2) * (_maximum - _minimum)) / (this.Height - 2 * _indentHeight - _trackerSize.Width) + 0.5);  
Magic Number,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,OnMouseDownSlider,The following statement contains a magic number: if (currentPoint.Y + _trackerSize.Width / 2 >= this.Height - _indentHeight)  	offsetValue = 0;  else if (currentPoint.Y - _trackerSize.Width / 2 <= _indentHeight)  	offsetValue = _maximum - _minimum;  else  	offsetValue = (int)(((this.Height - currentPoint.Y - _indentHeight - _trackerSize.Width / 2) * (_maximum - _minimum)) / (this.Height - 2 * _indentHeight - _trackerSize.Width) + 0.5);  
Magic Number,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,OnMouseDownSlider,The following statement contains a magic number: if (currentPoint.Y - _trackerSize.Width / 2 <= _indentHeight)  	offsetValue = _maximum - _minimum;  else  	offsetValue = (int)(((this.Height - currentPoint.Y - _indentHeight - _trackerSize.Width / 2) * (_maximum - _minimum)) / (this.Height - 2 * _indentHeight - _trackerSize.Width) + 0.5);  
Magic Number,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,OnMouseDownSlider,The following statement contains a magic number: if (currentPoint.Y - _trackerSize.Width / 2 <= _indentHeight)  	offsetValue = _maximum - _minimum;  else  	offsetValue = (int)(((this.Height - currentPoint.Y - _indentHeight - _trackerSize.Width / 2) * (_maximum - _minimum)) / (this.Height - 2 * _indentHeight - _trackerSize.Width) + 0.5);  
Magic Number,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,OnMouseDownSlider,The following statement contains a magic number: if (currentPoint.Y - _trackerSize.Width / 2 <= _indentHeight)  	offsetValue = _maximum - _minimum;  else  	offsetValue = (int)(((this.Height - currentPoint.Y - _indentHeight - _trackerSize.Width / 2) * (_maximum - _minimum)) / (this.Height - 2 * _indentHeight - _trackerSize.Width) + 0.5);  
Magic Number,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,OnMouseDownSlider,The following statement contains a magic number: if (currentPoint.Y - _trackerSize.Width / 2 <= _indentHeight)  	offsetValue = _maximum - _minimum;  else  	offsetValue = (int)(((this.Height - currentPoint.Y - _indentHeight - _trackerSize.Width / 2) * (_maximum - _minimum)) / (this.Height - 2 * _indentHeight - _trackerSize.Width) + 0.5);  
Magic Number,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,OnMouseDownSlider,The following statement contains a magic number: offsetValue = (int)(((this.Height - currentPoint.Y - _indentHeight - _trackerSize.Width / 2) * (_maximum - _minimum)) / (this.Height - 2 * _indentHeight - _trackerSize.Width) + 0.5);  
Magic Number,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,OnMouseDownSlider,The following statement contains a magic number: offsetValue = (int)(((this.Height - currentPoint.Y - _indentHeight - _trackerSize.Width / 2) * (_maximum - _minimum)) / (this.Height - 2 * _indentHeight - _trackerSize.Width) + 0.5);  
Magic Number,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,OnMouseDownSlider,The following statement contains a magic number: offsetValue = (int)(((this.Height - currentPoint.Y - _indentHeight - _trackerSize.Width / 2) * (_maximum - _minimum)) / (this.Height - 2 * _indentHeight - _trackerSize.Width) + 0.5);  
Magic Number,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,OnMouseMoveSlider,The following statement contains a magic number: if (leftButtonDown) {  	try {  		switch (this._orientation) {  		case Orientation.Horizontal:  			if ((currentPoint.X + _trackerSize.Width - mouseStartPos) >= this.Width - _indentWidth)  				offsetValue = _maximum - _minimum;  			else if (currentPoint.X - mouseStartPos <= _indentWidth)  				offsetValue = 0;  			else  				offsetValue = (int)(((currentPoint.X - mouseStartPos - _indentWidth) * (_maximum - _minimum)) / (this.Width - 2 * _indentWidth - _trackerSize.Width) + 0.5);  			break;  		case Orientation.Vertical:  			if (currentPoint.Y + _trackerSize.Width / 2 >= this.Height - _indentHeight)  				offsetValue = 0;  			else if (currentPoint.Y + _trackerSize.Width / 2 <= _indentHeight)  				offsetValue = _maximum - _minimum;  			else  				offsetValue = (int)(((this.Height - currentPoint.Y + _trackerSize.Width / 2 - mouseStartPos - _indentHeight) * (_maximum - _minimum)) / (this.Height - 2 * _indentHeight) + 0.5);  			break;  		}  	}  	catch (Exception) {  	}  	finally {  		oldValue = _value;  		_value = _minimum + offsetValue;  		this.Invalidate ();  		if (oldValue != _value) {  			OnScroll ();  			OnValueChanged (_value);  		}  	}  }  
Magic Number,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,OnMouseMoveSlider,The following statement contains a magic number: if (leftButtonDown) {  	try {  		switch (this._orientation) {  		case Orientation.Horizontal:  			if ((currentPoint.X + _trackerSize.Width - mouseStartPos) >= this.Width - _indentWidth)  				offsetValue = _maximum - _minimum;  			else if (currentPoint.X - mouseStartPos <= _indentWidth)  				offsetValue = 0;  			else  				offsetValue = (int)(((currentPoint.X - mouseStartPos - _indentWidth) * (_maximum - _minimum)) / (this.Width - 2 * _indentWidth - _trackerSize.Width) + 0.5);  			break;  		case Orientation.Vertical:  			if (currentPoint.Y + _trackerSize.Width / 2 >= this.Height - _indentHeight)  				offsetValue = 0;  			else if (currentPoint.Y + _trackerSize.Width / 2 <= _indentHeight)  				offsetValue = _maximum - _minimum;  			else  				offsetValue = (int)(((this.Height - currentPoint.Y + _trackerSize.Width / 2 - mouseStartPos - _indentHeight) * (_maximum - _minimum)) / (this.Height - 2 * _indentHeight) + 0.5);  			break;  		}  	}  	catch (Exception) {  	}  	finally {  		oldValue = _value;  		_value = _minimum + offsetValue;  		this.Invalidate ();  		if (oldValue != _value) {  			OnScroll ();  			OnValueChanged (_value);  		}  	}  }  
Magic Number,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,OnMouseMoveSlider,The following statement contains a magic number: if (leftButtonDown) {  	try {  		switch (this._orientation) {  		case Orientation.Horizontal:  			if ((currentPoint.X + _trackerSize.Width - mouseStartPos) >= this.Width - _indentWidth)  				offsetValue = _maximum - _minimum;  			else if (currentPoint.X - mouseStartPos <= _indentWidth)  				offsetValue = 0;  			else  				offsetValue = (int)(((currentPoint.X - mouseStartPos - _indentWidth) * (_maximum - _minimum)) / (this.Width - 2 * _indentWidth - _trackerSize.Width) + 0.5);  			break;  		case Orientation.Vertical:  			if (currentPoint.Y + _trackerSize.Width / 2 >= this.Height - _indentHeight)  				offsetValue = 0;  			else if (currentPoint.Y + _trackerSize.Width / 2 <= _indentHeight)  				offsetValue = _maximum - _minimum;  			else  				offsetValue = (int)(((this.Height - currentPoint.Y + _trackerSize.Width / 2 - mouseStartPos - _indentHeight) * (_maximum - _minimum)) / (this.Height - 2 * _indentHeight) + 0.5);  			break;  		}  	}  	catch (Exception) {  	}  	finally {  		oldValue = _value;  		_value = _minimum + offsetValue;  		this.Invalidate ();  		if (oldValue != _value) {  			OnScroll ();  			OnValueChanged (_value);  		}  	}  }  
Magic Number,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,OnMouseMoveSlider,The following statement contains a magic number: if (leftButtonDown) {  	try {  		switch (this._orientation) {  		case Orientation.Horizontal:  			if ((currentPoint.X + _trackerSize.Width - mouseStartPos) >= this.Width - _indentWidth)  				offsetValue = _maximum - _minimum;  			else if (currentPoint.X - mouseStartPos <= _indentWidth)  				offsetValue = 0;  			else  				offsetValue = (int)(((currentPoint.X - mouseStartPos - _indentWidth) * (_maximum - _minimum)) / (this.Width - 2 * _indentWidth - _trackerSize.Width) + 0.5);  			break;  		case Orientation.Vertical:  			if (currentPoint.Y + _trackerSize.Width / 2 >= this.Height - _indentHeight)  				offsetValue = 0;  			else if (currentPoint.Y + _trackerSize.Width / 2 <= _indentHeight)  				offsetValue = _maximum - _minimum;  			else  				offsetValue = (int)(((this.Height - currentPoint.Y + _trackerSize.Width / 2 - mouseStartPos - _indentHeight) * (_maximum - _minimum)) / (this.Height - 2 * _indentHeight) + 0.5);  			break;  		}  	}  	catch (Exception) {  	}  	finally {  		oldValue = _value;  		_value = _minimum + offsetValue;  		this.Invalidate ();  		if (oldValue != _value) {  			OnScroll ();  			OnValueChanged (_value);  		}  	}  }  
Magic Number,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,OnMouseMoveSlider,The following statement contains a magic number: if (leftButtonDown) {  	try {  		switch (this._orientation) {  		case Orientation.Horizontal:  			if ((currentPoint.X + _trackerSize.Width - mouseStartPos) >= this.Width - _indentWidth)  				offsetValue = _maximum - _minimum;  			else if (currentPoint.X - mouseStartPos <= _indentWidth)  				offsetValue = 0;  			else  				offsetValue = (int)(((currentPoint.X - mouseStartPos - _indentWidth) * (_maximum - _minimum)) / (this.Width - 2 * _indentWidth - _trackerSize.Width) + 0.5);  			break;  		case Orientation.Vertical:  			if (currentPoint.Y + _trackerSize.Width / 2 >= this.Height - _indentHeight)  				offsetValue = 0;  			else if (currentPoint.Y + _trackerSize.Width / 2 <= _indentHeight)  				offsetValue = _maximum - _minimum;  			else  				offsetValue = (int)(((this.Height - currentPoint.Y + _trackerSize.Width / 2 - mouseStartPos - _indentHeight) * (_maximum - _minimum)) / (this.Height - 2 * _indentHeight) + 0.5);  			break;  		}  	}  	catch (Exception) {  	}  	finally {  		oldValue = _value;  		_value = _minimum + offsetValue;  		this.Invalidate ();  		if (oldValue != _value) {  			OnScroll ();  			OnValueChanged (_value);  		}  	}  }  
Magic Number,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,OnMouseMoveSlider,The following statement contains a magic number: if (leftButtonDown) {  	try {  		switch (this._orientation) {  		case Orientation.Horizontal:  			if ((currentPoint.X + _trackerSize.Width - mouseStartPos) >= this.Width - _indentWidth)  				offsetValue = _maximum - _minimum;  			else if (currentPoint.X - mouseStartPos <= _indentWidth)  				offsetValue = 0;  			else  				offsetValue = (int)(((currentPoint.X - mouseStartPos - _indentWidth) * (_maximum - _minimum)) / (this.Width - 2 * _indentWidth - _trackerSize.Width) + 0.5);  			break;  		case Orientation.Vertical:  			if (currentPoint.Y + _trackerSize.Width / 2 >= this.Height - _indentHeight)  				offsetValue = 0;  			else if (currentPoint.Y + _trackerSize.Width / 2 <= _indentHeight)  				offsetValue = _maximum - _minimum;  			else  				offsetValue = (int)(((this.Height - currentPoint.Y + _trackerSize.Width / 2 - mouseStartPos - _indentHeight) * (_maximum - _minimum)) / (this.Height - 2 * _indentHeight) + 0.5);  			break;  		}  	}  	catch (Exception) {  	}  	finally {  		oldValue = _value;  		_value = _minimum + offsetValue;  		this.Invalidate ();  		if (oldValue != _value) {  			OnScroll ();  			OnValueChanged (_value);  		}  	}  }  
Magic Number,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,OnMouseMoveSlider,The following statement contains a magic number: if (leftButtonDown) {  	try {  		switch (this._orientation) {  		case Orientation.Horizontal:  			if ((currentPoint.X + _trackerSize.Width - mouseStartPos) >= this.Width - _indentWidth)  				offsetValue = _maximum - _minimum;  			else if (currentPoint.X - mouseStartPos <= _indentWidth)  				offsetValue = 0;  			else  				offsetValue = (int)(((currentPoint.X - mouseStartPos - _indentWidth) * (_maximum - _minimum)) / (this.Width - 2 * _indentWidth - _trackerSize.Width) + 0.5);  			break;  		case Orientation.Vertical:  			if (currentPoint.Y + _trackerSize.Width / 2 >= this.Height - _indentHeight)  				offsetValue = 0;  			else if (currentPoint.Y + _trackerSize.Width / 2 <= _indentHeight)  				offsetValue = _maximum - _minimum;  			else  				offsetValue = (int)(((this.Height - currentPoint.Y + _trackerSize.Width / 2 - mouseStartPos - _indentHeight) * (_maximum - _minimum)) / (this.Height - 2 * _indentHeight) + 0.5);  			break;  		}  	}  	catch (Exception) {  	}  	finally {  		oldValue = _value;  		_value = _minimum + offsetValue;  		this.Invalidate ();  		if (oldValue != _value) {  			OnScroll ();  			OnValueChanged (_value);  		}  	}  }  
Magic Number,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,OnMouseMoveSlider,The following statement contains a magic number: try {  	switch (this._orientation) {  	case Orientation.Horizontal:  		if ((currentPoint.X + _trackerSize.Width - mouseStartPos) >= this.Width - _indentWidth)  			offsetValue = _maximum - _minimum;  		else if (currentPoint.X - mouseStartPos <= _indentWidth)  			offsetValue = 0;  		else  			offsetValue = (int)(((currentPoint.X - mouseStartPos - _indentWidth) * (_maximum - _minimum)) / (this.Width - 2 * _indentWidth - _trackerSize.Width) + 0.5);  		break;  	case Orientation.Vertical:  		if (currentPoint.Y + _trackerSize.Width / 2 >= this.Height - _indentHeight)  			offsetValue = 0;  		else if (currentPoint.Y + _trackerSize.Width / 2 <= _indentHeight)  			offsetValue = _maximum - _minimum;  		else  			offsetValue = (int)(((this.Height - currentPoint.Y + _trackerSize.Width / 2 - mouseStartPos - _indentHeight) * (_maximum - _minimum)) / (this.Height - 2 * _indentHeight) + 0.5);  		break;  	}  }  catch (Exception) {  }  finally {  	oldValue = _value;  	_value = _minimum + offsetValue;  	this.Invalidate ();  	if (oldValue != _value) {  		OnScroll ();  		OnValueChanged (_value);  	}  }  
Magic Number,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,OnMouseMoveSlider,The following statement contains a magic number: try {  	switch (this._orientation) {  	case Orientation.Horizontal:  		if ((currentPoint.X + _trackerSize.Width - mouseStartPos) >= this.Width - _indentWidth)  			offsetValue = _maximum - _minimum;  		else if (currentPoint.X - mouseStartPos <= _indentWidth)  			offsetValue = 0;  		else  			offsetValue = (int)(((currentPoint.X - mouseStartPos - _indentWidth) * (_maximum - _minimum)) / (this.Width - 2 * _indentWidth - _trackerSize.Width) + 0.5);  		break;  	case Orientation.Vertical:  		if (currentPoint.Y + _trackerSize.Width / 2 >= this.Height - _indentHeight)  			offsetValue = 0;  		else if (currentPoint.Y + _trackerSize.Width / 2 <= _indentHeight)  			offsetValue = _maximum - _minimum;  		else  			offsetValue = (int)(((this.Height - currentPoint.Y + _trackerSize.Width / 2 - mouseStartPos - _indentHeight) * (_maximum - _minimum)) / (this.Height - 2 * _indentHeight) + 0.5);  		break;  	}  }  catch (Exception) {  }  finally {  	oldValue = _value;  	_value = _minimum + offsetValue;  	this.Invalidate ();  	if (oldValue != _value) {  		OnScroll ();  		OnValueChanged (_value);  	}  }  
Magic Number,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,OnMouseMoveSlider,The following statement contains a magic number: try {  	switch (this._orientation) {  	case Orientation.Horizontal:  		if ((currentPoint.X + _trackerSize.Width - mouseStartPos) >= this.Width - _indentWidth)  			offsetValue = _maximum - _minimum;  		else if (currentPoint.X - mouseStartPos <= _indentWidth)  			offsetValue = 0;  		else  			offsetValue = (int)(((currentPoint.X - mouseStartPos - _indentWidth) * (_maximum - _minimum)) / (this.Width - 2 * _indentWidth - _trackerSize.Width) + 0.5);  		break;  	case Orientation.Vertical:  		if (currentPoint.Y + _trackerSize.Width / 2 >= this.Height - _indentHeight)  			offsetValue = 0;  		else if (currentPoint.Y + _trackerSize.Width / 2 <= _indentHeight)  			offsetValue = _maximum - _minimum;  		else  			offsetValue = (int)(((this.Height - currentPoint.Y + _trackerSize.Width / 2 - mouseStartPos - _indentHeight) * (_maximum - _minimum)) / (this.Height - 2 * _indentHeight) + 0.5);  		break;  	}  }  catch (Exception) {  }  finally {  	oldValue = _value;  	_value = _minimum + offsetValue;  	this.Invalidate ();  	if (oldValue != _value) {  		OnScroll ();  		OnValueChanged (_value);  	}  }  
Magic Number,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,OnMouseMoveSlider,The following statement contains a magic number: try {  	switch (this._orientation) {  	case Orientation.Horizontal:  		if ((currentPoint.X + _trackerSize.Width - mouseStartPos) >= this.Width - _indentWidth)  			offsetValue = _maximum - _minimum;  		else if (currentPoint.X - mouseStartPos <= _indentWidth)  			offsetValue = 0;  		else  			offsetValue = (int)(((currentPoint.X - mouseStartPos - _indentWidth) * (_maximum - _minimum)) / (this.Width - 2 * _indentWidth - _trackerSize.Width) + 0.5);  		break;  	case Orientation.Vertical:  		if (currentPoint.Y + _trackerSize.Width / 2 >= this.Height - _indentHeight)  			offsetValue = 0;  		else if (currentPoint.Y + _trackerSize.Width / 2 <= _indentHeight)  			offsetValue = _maximum - _minimum;  		else  			offsetValue = (int)(((this.Height - currentPoint.Y + _trackerSize.Width / 2 - mouseStartPos - _indentHeight) * (_maximum - _minimum)) / (this.Height - 2 * _indentHeight) + 0.5);  		break;  	}  }  catch (Exception) {  }  finally {  	oldValue = _value;  	_value = _minimum + offsetValue;  	this.Invalidate ();  	if (oldValue != _value) {  		OnScroll ();  		OnValueChanged (_value);  	}  }  
Magic Number,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,OnMouseMoveSlider,The following statement contains a magic number: try {  	switch (this._orientation) {  	case Orientation.Horizontal:  		if ((currentPoint.X + _trackerSize.Width - mouseStartPos) >= this.Width - _indentWidth)  			offsetValue = _maximum - _minimum;  		else if (currentPoint.X - mouseStartPos <= _indentWidth)  			offsetValue = 0;  		else  			offsetValue = (int)(((currentPoint.X - mouseStartPos - _indentWidth) * (_maximum - _minimum)) / (this.Width - 2 * _indentWidth - _trackerSize.Width) + 0.5);  		break;  	case Orientation.Vertical:  		if (currentPoint.Y + _trackerSize.Width / 2 >= this.Height - _indentHeight)  			offsetValue = 0;  		else if (currentPoint.Y + _trackerSize.Width / 2 <= _indentHeight)  			offsetValue = _maximum - _minimum;  		else  			offsetValue = (int)(((this.Height - currentPoint.Y + _trackerSize.Width / 2 - mouseStartPos - _indentHeight) * (_maximum - _minimum)) / (this.Height - 2 * _indentHeight) + 0.5);  		break;  	}  }  catch (Exception) {  }  finally {  	oldValue = _value;  	_value = _minimum + offsetValue;  	this.Invalidate ();  	if (oldValue != _value) {  		OnScroll ();  		OnValueChanged (_value);  	}  }  
Magic Number,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,OnMouseMoveSlider,The following statement contains a magic number: try {  	switch (this._orientation) {  	case Orientation.Horizontal:  		if ((currentPoint.X + _trackerSize.Width - mouseStartPos) >= this.Width - _indentWidth)  			offsetValue = _maximum - _minimum;  		else if (currentPoint.X - mouseStartPos <= _indentWidth)  			offsetValue = 0;  		else  			offsetValue = (int)(((currentPoint.X - mouseStartPos - _indentWidth) * (_maximum - _minimum)) / (this.Width - 2 * _indentWidth - _trackerSize.Width) + 0.5);  		break;  	case Orientation.Vertical:  		if (currentPoint.Y + _trackerSize.Width / 2 >= this.Height - _indentHeight)  			offsetValue = 0;  		else if (currentPoint.Y + _trackerSize.Width / 2 <= _indentHeight)  			offsetValue = _maximum - _minimum;  		else  			offsetValue = (int)(((this.Height - currentPoint.Y + _trackerSize.Width / 2 - mouseStartPos - _indentHeight) * (_maximum - _minimum)) / (this.Height - 2 * _indentHeight) + 0.5);  		break;  	}  }  catch (Exception) {  }  finally {  	oldValue = _value;  	_value = _minimum + offsetValue;  	this.Invalidate ();  	if (oldValue != _value) {  		OnScroll ();  		OnValueChanged (_value);  	}  }  
Magic Number,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,OnMouseMoveSlider,The following statement contains a magic number: try {  	switch (this._orientation) {  	case Orientation.Horizontal:  		if ((currentPoint.X + _trackerSize.Width - mouseStartPos) >= this.Width - _indentWidth)  			offsetValue = _maximum - _minimum;  		else if (currentPoint.X - mouseStartPos <= _indentWidth)  			offsetValue = 0;  		else  			offsetValue = (int)(((currentPoint.X - mouseStartPos - _indentWidth) * (_maximum - _minimum)) / (this.Width - 2 * _indentWidth - _trackerSize.Width) + 0.5);  		break;  	case Orientation.Vertical:  		if (currentPoint.Y + _trackerSize.Width / 2 >= this.Height - _indentHeight)  			offsetValue = 0;  		else if (currentPoint.Y + _trackerSize.Width / 2 <= _indentHeight)  			offsetValue = _maximum - _minimum;  		else  			offsetValue = (int)(((this.Height - currentPoint.Y + _trackerSize.Width / 2 - mouseStartPos - _indentHeight) * (_maximum - _minimum)) / (this.Height - 2 * _indentHeight) + 0.5);  		break;  	}  }  catch (Exception) {  }  finally {  	oldValue = _value;  	_value = _minimum + offsetValue;  	this.Invalidate ();  	if (oldValue != _value) {  		OnScroll ();  		OnValueChanged (_value);  	}  }  
Magic Number,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,OnMouseMoveSlider,The following statement contains a magic number: switch (this._orientation) {  case Orientation.Horizontal:  	if ((currentPoint.X + _trackerSize.Width - mouseStartPos) >= this.Width - _indentWidth)  		offsetValue = _maximum - _minimum;  	else if (currentPoint.X - mouseStartPos <= _indentWidth)  		offsetValue = 0;  	else  		offsetValue = (int)(((currentPoint.X - mouseStartPos - _indentWidth) * (_maximum - _minimum)) / (this.Width - 2 * _indentWidth - _trackerSize.Width) + 0.5);  	break;  case Orientation.Vertical:  	if (currentPoint.Y + _trackerSize.Width / 2 >= this.Height - _indentHeight)  		offsetValue = 0;  	else if (currentPoint.Y + _trackerSize.Width / 2 <= _indentHeight)  		offsetValue = _maximum - _minimum;  	else  		offsetValue = (int)(((this.Height - currentPoint.Y + _trackerSize.Width / 2 - mouseStartPos - _indentHeight) * (_maximum - _minimum)) / (this.Height - 2 * _indentHeight) + 0.5);  	break;  }  
Magic Number,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,OnMouseMoveSlider,The following statement contains a magic number: switch (this._orientation) {  case Orientation.Horizontal:  	if ((currentPoint.X + _trackerSize.Width - mouseStartPos) >= this.Width - _indentWidth)  		offsetValue = _maximum - _minimum;  	else if (currentPoint.X - mouseStartPos <= _indentWidth)  		offsetValue = 0;  	else  		offsetValue = (int)(((currentPoint.X - mouseStartPos - _indentWidth) * (_maximum - _minimum)) / (this.Width - 2 * _indentWidth - _trackerSize.Width) + 0.5);  	break;  case Orientation.Vertical:  	if (currentPoint.Y + _trackerSize.Width / 2 >= this.Height - _indentHeight)  		offsetValue = 0;  	else if (currentPoint.Y + _trackerSize.Width / 2 <= _indentHeight)  		offsetValue = _maximum - _minimum;  	else  		offsetValue = (int)(((this.Height - currentPoint.Y + _trackerSize.Width / 2 - mouseStartPos - _indentHeight) * (_maximum - _minimum)) / (this.Height - 2 * _indentHeight) + 0.5);  	break;  }  
Magic Number,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,OnMouseMoveSlider,The following statement contains a magic number: switch (this._orientation) {  case Orientation.Horizontal:  	if ((currentPoint.X + _trackerSize.Width - mouseStartPos) >= this.Width - _indentWidth)  		offsetValue = _maximum - _minimum;  	else if (currentPoint.X - mouseStartPos <= _indentWidth)  		offsetValue = 0;  	else  		offsetValue = (int)(((currentPoint.X - mouseStartPos - _indentWidth) * (_maximum - _minimum)) / (this.Width - 2 * _indentWidth - _trackerSize.Width) + 0.5);  	break;  case Orientation.Vertical:  	if (currentPoint.Y + _trackerSize.Width / 2 >= this.Height - _indentHeight)  		offsetValue = 0;  	else if (currentPoint.Y + _trackerSize.Width / 2 <= _indentHeight)  		offsetValue = _maximum - _minimum;  	else  		offsetValue = (int)(((this.Height - currentPoint.Y + _trackerSize.Width / 2 - mouseStartPos - _indentHeight) * (_maximum - _minimum)) / (this.Height - 2 * _indentHeight) + 0.5);  	break;  }  
Magic Number,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,OnMouseMoveSlider,The following statement contains a magic number: switch (this._orientation) {  case Orientation.Horizontal:  	if ((currentPoint.X + _trackerSize.Width - mouseStartPos) >= this.Width - _indentWidth)  		offsetValue = _maximum - _minimum;  	else if (currentPoint.X - mouseStartPos <= _indentWidth)  		offsetValue = 0;  	else  		offsetValue = (int)(((currentPoint.X - mouseStartPos - _indentWidth) * (_maximum - _minimum)) / (this.Width - 2 * _indentWidth - _trackerSize.Width) + 0.5);  	break;  case Orientation.Vertical:  	if (currentPoint.Y + _trackerSize.Width / 2 >= this.Height - _indentHeight)  		offsetValue = 0;  	else if (currentPoint.Y + _trackerSize.Width / 2 <= _indentHeight)  		offsetValue = _maximum - _minimum;  	else  		offsetValue = (int)(((this.Height - currentPoint.Y + _trackerSize.Width / 2 - mouseStartPos - _indentHeight) * (_maximum - _minimum)) / (this.Height - 2 * _indentHeight) + 0.5);  	break;  }  
Magic Number,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,OnMouseMoveSlider,The following statement contains a magic number: switch (this._orientation) {  case Orientation.Horizontal:  	if ((currentPoint.X + _trackerSize.Width - mouseStartPos) >= this.Width - _indentWidth)  		offsetValue = _maximum - _minimum;  	else if (currentPoint.X - mouseStartPos <= _indentWidth)  		offsetValue = 0;  	else  		offsetValue = (int)(((currentPoint.X - mouseStartPos - _indentWidth) * (_maximum - _minimum)) / (this.Width - 2 * _indentWidth - _trackerSize.Width) + 0.5);  	break;  case Orientation.Vertical:  	if (currentPoint.Y + _trackerSize.Width / 2 >= this.Height - _indentHeight)  		offsetValue = 0;  	else if (currentPoint.Y + _trackerSize.Width / 2 <= _indentHeight)  		offsetValue = _maximum - _minimum;  	else  		offsetValue = (int)(((this.Height - currentPoint.Y + _trackerSize.Width / 2 - mouseStartPos - _indentHeight) * (_maximum - _minimum)) / (this.Height - 2 * _indentHeight) + 0.5);  	break;  }  
Magic Number,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,OnMouseMoveSlider,The following statement contains a magic number: switch (this._orientation) {  case Orientation.Horizontal:  	if ((currentPoint.X + _trackerSize.Width - mouseStartPos) >= this.Width - _indentWidth)  		offsetValue = _maximum - _minimum;  	else if (currentPoint.X - mouseStartPos <= _indentWidth)  		offsetValue = 0;  	else  		offsetValue = (int)(((currentPoint.X - mouseStartPos - _indentWidth) * (_maximum - _minimum)) / (this.Width - 2 * _indentWidth - _trackerSize.Width) + 0.5);  	break;  case Orientation.Vertical:  	if (currentPoint.Y + _trackerSize.Width / 2 >= this.Height - _indentHeight)  		offsetValue = 0;  	else if (currentPoint.Y + _trackerSize.Width / 2 <= _indentHeight)  		offsetValue = _maximum - _minimum;  	else  		offsetValue = (int)(((this.Height - currentPoint.Y + _trackerSize.Width / 2 - mouseStartPos - _indentHeight) * (_maximum - _minimum)) / (this.Height - 2 * _indentHeight) + 0.5);  	break;  }  
Magic Number,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,OnMouseMoveSlider,The following statement contains a magic number: switch (this._orientation) {  case Orientation.Horizontal:  	if ((currentPoint.X + _trackerSize.Width - mouseStartPos) >= this.Width - _indentWidth)  		offsetValue = _maximum - _minimum;  	else if (currentPoint.X - mouseStartPos <= _indentWidth)  		offsetValue = 0;  	else  		offsetValue = (int)(((currentPoint.X - mouseStartPos - _indentWidth) * (_maximum - _minimum)) / (this.Width - 2 * _indentWidth - _trackerSize.Width) + 0.5);  	break;  case Orientation.Vertical:  	if (currentPoint.Y + _trackerSize.Width / 2 >= this.Height - _indentHeight)  		offsetValue = 0;  	else if (currentPoint.Y + _trackerSize.Width / 2 <= _indentHeight)  		offsetValue = _maximum - _minimum;  	else  		offsetValue = (int)(((this.Height - currentPoint.Y + _trackerSize.Width / 2 - mouseStartPos - _indentHeight) * (_maximum - _minimum)) / (this.Height - 2 * _indentHeight) + 0.5);  	break;  }  
Magic Number,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,OnMouseMoveSlider,The following statement contains a magic number: if ((currentPoint.X + _trackerSize.Width - mouseStartPos) >= this.Width - _indentWidth)  	offsetValue = _maximum - _minimum;  else if (currentPoint.X - mouseStartPos <= _indentWidth)  	offsetValue = 0;  else  	offsetValue = (int)(((currentPoint.X - mouseStartPos - _indentWidth) * (_maximum - _minimum)) / (this.Width - 2 * _indentWidth - _trackerSize.Width) + 0.5);  
Magic Number,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,OnMouseMoveSlider,The following statement contains a magic number: if ((currentPoint.X + _trackerSize.Width - mouseStartPos) >= this.Width - _indentWidth)  	offsetValue = _maximum - _minimum;  else if (currentPoint.X - mouseStartPos <= _indentWidth)  	offsetValue = 0;  else  	offsetValue = (int)(((currentPoint.X - mouseStartPos - _indentWidth) * (_maximum - _minimum)) / (this.Width - 2 * _indentWidth - _trackerSize.Width) + 0.5);  
Magic Number,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,OnMouseMoveSlider,The following statement contains a magic number: if (currentPoint.X - mouseStartPos <= _indentWidth)  	offsetValue = 0;  else  	offsetValue = (int)(((currentPoint.X - mouseStartPos - _indentWidth) * (_maximum - _minimum)) / (this.Width - 2 * _indentWidth - _trackerSize.Width) + 0.5);  
Magic Number,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,OnMouseMoveSlider,The following statement contains a magic number: if (currentPoint.X - mouseStartPos <= _indentWidth)  	offsetValue = 0;  else  	offsetValue = (int)(((currentPoint.X - mouseStartPos - _indentWidth) * (_maximum - _minimum)) / (this.Width - 2 * _indentWidth - _trackerSize.Width) + 0.5);  
Magic Number,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,OnMouseMoveSlider,The following statement contains a magic number: offsetValue = (int)(((currentPoint.X - mouseStartPos - _indentWidth) * (_maximum - _minimum)) / (this.Width - 2 * _indentWidth - _trackerSize.Width) + 0.5);  
Magic Number,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,OnMouseMoveSlider,The following statement contains a magic number: offsetValue = (int)(((currentPoint.X - mouseStartPos - _indentWidth) * (_maximum - _minimum)) / (this.Width - 2 * _indentWidth - _trackerSize.Width) + 0.5);  
Magic Number,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,OnMouseMoveSlider,The following statement contains a magic number: if (currentPoint.Y + _trackerSize.Width / 2 >= this.Height - _indentHeight)  	offsetValue = 0;  else if (currentPoint.Y + _trackerSize.Width / 2 <= _indentHeight)  	offsetValue = _maximum - _minimum;  else  	offsetValue = (int)(((this.Height - currentPoint.Y + _trackerSize.Width / 2 - mouseStartPos - _indentHeight) * (_maximum - _minimum)) / (this.Height - 2 * _indentHeight) + 0.5);  
Magic Number,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,OnMouseMoveSlider,The following statement contains a magic number: if (currentPoint.Y + _trackerSize.Width / 2 >= this.Height - _indentHeight)  	offsetValue = 0;  else if (currentPoint.Y + _trackerSize.Width / 2 <= _indentHeight)  	offsetValue = _maximum - _minimum;  else  	offsetValue = (int)(((this.Height - currentPoint.Y + _trackerSize.Width / 2 - mouseStartPos - _indentHeight) * (_maximum - _minimum)) / (this.Height - 2 * _indentHeight) + 0.5);  
Magic Number,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,OnMouseMoveSlider,The following statement contains a magic number: if (currentPoint.Y + _trackerSize.Width / 2 >= this.Height - _indentHeight)  	offsetValue = 0;  else if (currentPoint.Y + _trackerSize.Width / 2 <= _indentHeight)  	offsetValue = _maximum - _minimum;  else  	offsetValue = (int)(((this.Height - currentPoint.Y + _trackerSize.Width / 2 - mouseStartPos - _indentHeight) * (_maximum - _minimum)) / (this.Height - 2 * _indentHeight) + 0.5);  
Magic Number,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,OnMouseMoveSlider,The following statement contains a magic number: if (currentPoint.Y + _trackerSize.Width / 2 >= this.Height - _indentHeight)  	offsetValue = 0;  else if (currentPoint.Y + _trackerSize.Width / 2 <= _indentHeight)  	offsetValue = _maximum - _minimum;  else  	offsetValue = (int)(((this.Height - currentPoint.Y + _trackerSize.Width / 2 - mouseStartPos - _indentHeight) * (_maximum - _minimum)) / (this.Height - 2 * _indentHeight) + 0.5);  
Magic Number,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,OnMouseMoveSlider,The following statement contains a magic number: if (currentPoint.Y + _trackerSize.Width / 2 >= this.Height - _indentHeight)  	offsetValue = 0;  else if (currentPoint.Y + _trackerSize.Width / 2 <= _indentHeight)  	offsetValue = _maximum - _minimum;  else  	offsetValue = (int)(((this.Height - currentPoint.Y + _trackerSize.Width / 2 - mouseStartPos - _indentHeight) * (_maximum - _minimum)) / (this.Height - 2 * _indentHeight) + 0.5);  
Magic Number,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,OnMouseMoveSlider,The following statement contains a magic number: if (currentPoint.Y + _trackerSize.Width / 2 <= _indentHeight)  	offsetValue = _maximum - _minimum;  else  	offsetValue = (int)(((this.Height - currentPoint.Y + _trackerSize.Width / 2 - mouseStartPos - _indentHeight) * (_maximum - _minimum)) / (this.Height - 2 * _indentHeight) + 0.5);  
Magic Number,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,OnMouseMoveSlider,The following statement contains a magic number: if (currentPoint.Y + _trackerSize.Width / 2 <= _indentHeight)  	offsetValue = _maximum - _minimum;  else  	offsetValue = (int)(((this.Height - currentPoint.Y + _trackerSize.Width / 2 - mouseStartPos - _indentHeight) * (_maximum - _minimum)) / (this.Height - 2 * _indentHeight) + 0.5);  
Magic Number,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,OnMouseMoveSlider,The following statement contains a magic number: if (currentPoint.Y + _trackerSize.Width / 2 <= _indentHeight)  	offsetValue = _maximum - _minimum;  else  	offsetValue = (int)(((this.Height - currentPoint.Y + _trackerSize.Width / 2 - mouseStartPos - _indentHeight) * (_maximum - _minimum)) / (this.Height - 2 * _indentHeight) + 0.5);  
Magic Number,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,OnMouseMoveSlider,The following statement contains a magic number: if (currentPoint.Y + _trackerSize.Width / 2 <= _indentHeight)  	offsetValue = _maximum - _minimum;  else  	offsetValue = (int)(((this.Height - currentPoint.Y + _trackerSize.Width / 2 - mouseStartPos - _indentHeight) * (_maximum - _minimum)) / (this.Height - 2 * _indentHeight) + 0.5);  
Magic Number,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,OnMouseMoveSlider,The following statement contains a magic number: offsetValue = (int)(((this.Height - currentPoint.Y + _trackerSize.Width / 2 - mouseStartPos - _indentHeight) * (_maximum - _minimum)) / (this.Height - 2 * _indentHeight) + 0.5);  
Magic Number,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,OnMouseMoveSlider,The following statement contains a magic number: offsetValue = (int)(((this.Height - currentPoint.Y + _trackerSize.Width / 2 - mouseStartPos - _indentHeight) * (_maximum - _minimum)) / (this.Height - 2 * _indentHeight) + 0.5);  
Magic Number,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,OnMouseMoveSlider,The following statement contains a magic number: offsetValue = (int)(((this.Height - currentPoint.Y + _trackerSize.Width / 2 - mouseStartPos - _indentHeight) * (_maximum - _minimum)) / (this.Height - 2 * _indentHeight) + 0.5);  
Magic Number,CRC.Controls,PlayerTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\PlayerTrackBar.cs,PlayerTrackBar,The following statement contains a magic number: this.MaxValue = 100;  
Magic Number,CRC.Controls,PlayerTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\PlayerTrackBar.cs,PlayerTrackBar,The following statement contains a magic number: this.Width = 200;  
Magic Number,CRC.Controls,PlayerTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\PlayerTrackBar.cs,DrawCircleTrack,The following statement contains a magic number: using (Pen emptyPen = new Pen (EmptyColor)) {  	g.FillEllipse (brush' ValueX' 2' 2 * BordHeight' 2 * BordHeight);  	g.DrawEllipse (emptyPen' ValueX' 2' 2 * BordHeight' 2 * BordHeight);  }  
Magic Number,CRC.Controls,PlayerTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\PlayerTrackBar.cs,DrawCircleTrack,The following statement contains a magic number: using (Pen emptyPen = new Pen (EmptyColor)) {  	g.FillEllipse (brush' ValueX' 2' 2 * BordHeight' 2 * BordHeight);  	g.DrawEllipse (emptyPen' ValueX' 2' 2 * BordHeight' 2 * BordHeight);  }  
Magic Number,CRC.Controls,PlayerTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\PlayerTrackBar.cs,DrawCircleTrack,The following statement contains a magic number: using (Pen emptyPen = new Pen (EmptyColor)) {  	g.FillEllipse (brush' ValueX' 2' 2 * BordHeight' 2 * BordHeight);  	g.DrawEllipse (emptyPen' ValueX' 2' 2 * BordHeight' 2 * BordHeight);  }  
Magic Number,CRC.Controls,PlayerTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\PlayerTrackBar.cs,DrawCircleTrack,The following statement contains a magic number: using (Pen emptyPen = new Pen (EmptyColor)) {  	g.FillEllipse (brush' ValueX' 2' 2 * BordHeight' 2 * BordHeight);  	g.DrawEllipse (emptyPen' ValueX' 2' 2 * BordHeight' 2 * BordHeight);  }  
Magic Number,CRC.Controls,PlayerTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\PlayerTrackBar.cs,DrawCircleTrack,The following statement contains a magic number: using (Pen emptyPen = new Pen (EmptyColor)) {  	g.FillEllipse (brush' ValueX' 2' 2 * BordHeight' 2 * BordHeight);  	g.DrawEllipse (emptyPen' ValueX' 2' 2 * BordHeight' 2 * BordHeight);  }  
Magic Number,CRC.Controls,PlayerTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\PlayerTrackBar.cs,DrawCircleTrack,The following statement contains a magic number: using (Pen emptyPen = new Pen (EmptyColor)) {  	g.FillEllipse (brush' ValueX' 2' 2 * BordHeight' 2 * BordHeight);  	g.DrawEllipse (emptyPen' ValueX' 2' 2 * BordHeight' 2 * BordHeight);  }  
Magic Number,CRC.Controls,PlayerTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\PlayerTrackBar.cs,DrawCircleTrack,The following statement contains a magic number: g.FillEllipse (brush' ValueX' 2' 2 * BordHeight' 2 * BordHeight);  
Magic Number,CRC.Controls,PlayerTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\PlayerTrackBar.cs,DrawCircleTrack,The following statement contains a magic number: g.FillEllipse (brush' ValueX' 2' 2 * BordHeight' 2 * BordHeight);  
Magic Number,CRC.Controls,PlayerTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\PlayerTrackBar.cs,DrawCircleTrack,The following statement contains a magic number: g.FillEllipse (brush' ValueX' 2' 2 * BordHeight' 2 * BordHeight);  
Magic Number,CRC.Controls,PlayerTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\PlayerTrackBar.cs,DrawCircleTrack,The following statement contains a magic number: g.DrawEllipse (emptyPen' ValueX' 2' 2 * BordHeight' 2 * BordHeight);  
Magic Number,CRC.Controls,PlayerTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\PlayerTrackBar.cs,DrawCircleTrack,The following statement contains a magic number: g.DrawEllipse (emptyPen' ValueX' 2' 2 * BordHeight' 2 * BordHeight);  
Magic Number,CRC.Controls,PlayerTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\PlayerTrackBar.cs,DrawCircleTrack,The following statement contains a magic number: g.DrawEllipse (emptyPen' ValueX' 2' 2 * BordHeight' 2 * BordHeight);  
Magic Number,CRC.Controls,PlayerTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\PlayerTrackBar.cs,DrawRectangles,The following statement contains a magic number: using (Pen emptyPen = new Pen (EmptyColor)) {  	g.FillRectangle (brush' ValueX + BordHeight / 2' 2' BordHeight' 2 * BordHeight);  	g.DrawRectangle (emptyPen' ValueX + BordHeight / 2' 2' BordHeight' 2 * BordHeight);  }  
Magic Number,CRC.Controls,PlayerTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\PlayerTrackBar.cs,DrawRectangles,The following statement contains a magic number: using (Pen emptyPen = new Pen (EmptyColor)) {  	g.FillRectangle (brush' ValueX + BordHeight / 2' 2' BordHeight' 2 * BordHeight);  	g.DrawRectangle (emptyPen' ValueX + BordHeight / 2' 2' BordHeight' 2 * BordHeight);  }  
Magic Number,CRC.Controls,PlayerTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\PlayerTrackBar.cs,DrawRectangles,The following statement contains a magic number: using (Pen emptyPen = new Pen (EmptyColor)) {  	g.FillRectangle (brush' ValueX + BordHeight / 2' 2' BordHeight' 2 * BordHeight);  	g.DrawRectangle (emptyPen' ValueX + BordHeight / 2' 2' BordHeight' 2 * BordHeight);  }  
Magic Number,CRC.Controls,PlayerTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\PlayerTrackBar.cs,DrawRectangles,The following statement contains a magic number: using (Pen emptyPen = new Pen (EmptyColor)) {  	g.FillRectangle (brush' ValueX + BordHeight / 2' 2' BordHeight' 2 * BordHeight);  	g.DrawRectangle (emptyPen' ValueX + BordHeight / 2' 2' BordHeight' 2 * BordHeight);  }  
Magic Number,CRC.Controls,PlayerTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\PlayerTrackBar.cs,DrawRectangles,The following statement contains a magic number: using (Pen emptyPen = new Pen (EmptyColor)) {  	g.FillRectangle (brush' ValueX + BordHeight / 2' 2' BordHeight' 2 * BordHeight);  	g.DrawRectangle (emptyPen' ValueX + BordHeight / 2' 2' BordHeight' 2 * BordHeight);  }  
Magic Number,CRC.Controls,PlayerTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\PlayerTrackBar.cs,DrawRectangles,The following statement contains a magic number: using (Pen emptyPen = new Pen (EmptyColor)) {  	g.FillRectangle (brush' ValueX + BordHeight / 2' 2' BordHeight' 2 * BordHeight);  	g.DrawRectangle (emptyPen' ValueX + BordHeight / 2' 2' BordHeight' 2 * BordHeight);  }  
Magic Number,CRC.Controls,PlayerTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\PlayerTrackBar.cs,DrawRectangles,The following statement contains a magic number: g.FillRectangle (brush' ValueX + BordHeight / 2' 2' BordHeight' 2 * BordHeight);  
Magic Number,CRC.Controls,PlayerTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\PlayerTrackBar.cs,DrawRectangles,The following statement contains a magic number: g.FillRectangle (brush' ValueX + BordHeight / 2' 2' BordHeight' 2 * BordHeight);  
Magic Number,CRC.Controls,PlayerTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\PlayerTrackBar.cs,DrawRectangles,The following statement contains a magic number: g.FillRectangle (brush' ValueX + BordHeight / 2' 2' BordHeight' 2 * BordHeight);  
Magic Number,CRC.Controls,PlayerTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\PlayerTrackBar.cs,DrawRectangles,The following statement contains a magic number: g.DrawRectangle (emptyPen' ValueX + BordHeight / 2' 2' BordHeight' 2 * BordHeight);  
Magic Number,CRC.Controls,PlayerTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\PlayerTrackBar.cs,DrawRectangles,The following statement contains a magic number: g.DrawRectangle (emptyPen' ValueX + BordHeight / 2' 2' BordHeight' 2 * BordHeight);  
Magic Number,CRC.Controls,PlayerTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\PlayerTrackBar.cs,DrawRectangles,The following statement contains a magic number: g.DrawRectangle (emptyPen' ValueX + BordHeight / 2' 2' BordHeight' 2 * BordHeight);  
Magic Number,CRC.Controls,PlayerTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\PlayerTrackBar.cs,OnPaint,The following statement contains a magic number: using (Bitmap bit = new Bitmap (this.Width' this.Height)) {  	using (Graphics g = Graphics.FromImage (bit)) {  		using (SolidBrush emptyBrush = new SolidBrush (EmptyColor)) {  			g.FillRectangle (emptyBrush' BordHeight' 2 + BordHeight / 2f' BorderLength' BordHeight);  		}  		using (SolidBrush valueBrush = new SolidBrush (FillColor)) {  			g.FillRectangle (valueBrush' BordHeight + 1f' 2 + BordHeight / 2f + 1f' ValueX - 2' BordHeight - 2);  			switch (Shape) {  			case TrackShape.Circle:  				DrawCircleTrack (g' valueBrush);  				break;  			case TrackShape.Rectanles:  				DrawRectangles (g' valueBrush);  				break;  			}  		}  	}  	e.Graphics.DrawImage (bit' 0' 0);  }  
Magic Number,CRC.Controls,PlayerTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\PlayerTrackBar.cs,OnPaint,The following statement contains a magic number: using (Bitmap bit = new Bitmap (this.Width' this.Height)) {  	using (Graphics g = Graphics.FromImage (bit)) {  		using (SolidBrush emptyBrush = new SolidBrush (EmptyColor)) {  			g.FillRectangle (emptyBrush' BordHeight' 2 + BordHeight / 2f' BorderLength' BordHeight);  		}  		using (SolidBrush valueBrush = new SolidBrush (FillColor)) {  			g.FillRectangle (valueBrush' BordHeight + 1f' 2 + BordHeight / 2f + 1f' ValueX - 2' BordHeight - 2);  			switch (Shape) {  			case TrackShape.Circle:  				DrawCircleTrack (g' valueBrush);  				break;  			case TrackShape.Rectanles:  				DrawRectangles (g' valueBrush);  				break;  			}  		}  	}  	e.Graphics.DrawImage (bit' 0' 0);  }  
Magic Number,CRC.Controls,PlayerTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\PlayerTrackBar.cs,OnPaint,The following statement contains a magic number: using (Bitmap bit = new Bitmap (this.Width' this.Height)) {  	using (Graphics g = Graphics.FromImage (bit)) {  		using (SolidBrush emptyBrush = new SolidBrush (EmptyColor)) {  			g.FillRectangle (emptyBrush' BordHeight' 2 + BordHeight / 2f' BorderLength' BordHeight);  		}  		using (SolidBrush valueBrush = new SolidBrush (FillColor)) {  			g.FillRectangle (valueBrush' BordHeight + 1f' 2 + BordHeight / 2f + 1f' ValueX - 2' BordHeight - 2);  			switch (Shape) {  			case TrackShape.Circle:  				DrawCircleTrack (g' valueBrush);  				break;  			case TrackShape.Rectanles:  				DrawRectangles (g' valueBrush);  				break;  			}  		}  	}  	e.Graphics.DrawImage (bit' 0' 0);  }  
Magic Number,CRC.Controls,PlayerTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\PlayerTrackBar.cs,OnPaint,The following statement contains a magic number: using (Bitmap bit = new Bitmap (this.Width' this.Height)) {  	using (Graphics g = Graphics.FromImage (bit)) {  		using (SolidBrush emptyBrush = new SolidBrush (EmptyColor)) {  			g.FillRectangle (emptyBrush' BordHeight' 2 + BordHeight / 2f' BorderLength' BordHeight);  		}  		using (SolidBrush valueBrush = new SolidBrush (FillColor)) {  			g.FillRectangle (valueBrush' BordHeight + 1f' 2 + BordHeight / 2f + 1f' ValueX - 2' BordHeight - 2);  			switch (Shape) {  			case TrackShape.Circle:  				DrawCircleTrack (g' valueBrush);  				break;  			case TrackShape.Rectanles:  				DrawRectangles (g' valueBrush);  				break;  			}  		}  	}  	e.Graphics.DrawImage (bit' 0' 0);  }  
Magic Number,CRC.Controls,PlayerTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\PlayerTrackBar.cs,OnPaint,The following statement contains a magic number: using (Graphics g = Graphics.FromImage (bit)) {  	using (SolidBrush emptyBrush = new SolidBrush (EmptyColor)) {  		g.FillRectangle (emptyBrush' BordHeight' 2 + BordHeight / 2f' BorderLength' BordHeight);  	}  	using (SolidBrush valueBrush = new SolidBrush (FillColor)) {  		g.FillRectangle (valueBrush' BordHeight + 1f' 2 + BordHeight / 2f + 1f' ValueX - 2' BordHeight - 2);  		switch (Shape) {  		case TrackShape.Circle:  			DrawCircleTrack (g' valueBrush);  			break;  		case TrackShape.Rectanles:  			DrawRectangles (g' valueBrush);  			break;  		}  	}  }  
Magic Number,CRC.Controls,PlayerTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\PlayerTrackBar.cs,OnPaint,The following statement contains a magic number: using (Graphics g = Graphics.FromImage (bit)) {  	using (SolidBrush emptyBrush = new SolidBrush (EmptyColor)) {  		g.FillRectangle (emptyBrush' BordHeight' 2 + BordHeight / 2f' BorderLength' BordHeight);  	}  	using (SolidBrush valueBrush = new SolidBrush (FillColor)) {  		g.FillRectangle (valueBrush' BordHeight + 1f' 2 + BordHeight / 2f + 1f' ValueX - 2' BordHeight - 2);  		switch (Shape) {  		case TrackShape.Circle:  			DrawCircleTrack (g' valueBrush);  			break;  		case TrackShape.Rectanles:  			DrawRectangles (g' valueBrush);  			break;  		}  	}  }  
Magic Number,CRC.Controls,PlayerTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\PlayerTrackBar.cs,OnPaint,The following statement contains a magic number: using (Graphics g = Graphics.FromImage (bit)) {  	using (SolidBrush emptyBrush = new SolidBrush (EmptyColor)) {  		g.FillRectangle (emptyBrush' BordHeight' 2 + BordHeight / 2f' BorderLength' BordHeight);  	}  	using (SolidBrush valueBrush = new SolidBrush (FillColor)) {  		g.FillRectangle (valueBrush' BordHeight + 1f' 2 + BordHeight / 2f + 1f' ValueX - 2' BordHeight - 2);  		switch (Shape) {  		case TrackShape.Circle:  			DrawCircleTrack (g' valueBrush);  			break;  		case TrackShape.Rectanles:  			DrawRectangles (g' valueBrush);  			break;  		}  	}  }  
Magic Number,CRC.Controls,PlayerTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\PlayerTrackBar.cs,OnPaint,The following statement contains a magic number: using (Graphics g = Graphics.FromImage (bit)) {  	using (SolidBrush emptyBrush = new SolidBrush (EmptyColor)) {  		g.FillRectangle (emptyBrush' BordHeight' 2 + BordHeight / 2f' BorderLength' BordHeight);  	}  	using (SolidBrush valueBrush = new SolidBrush (FillColor)) {  		g.FillRectangle (valueBrush' BordHeight + 1f' 2 + BordHeight / 2f + 1f' ValueX - 2' BordHeight - 2);  		switch (Shape) {  		case TrackShape.Circle:  			DrawCircleTrack (g' valueBrush);  			break;  		case TrackShape.Rectanles:  			DrawRectangles (g' valueBrush);  			break;  		}  	}  }  
Magic Number,CRC.Controls,PlayerTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\PlayerTrackBar.cs,OnPaint,The following statement contains a magic number: using (SolidBrush emptyBrush = new SolidBrush (EmptyColor)) {  	g.FillRectangle (emptyBrush' BordHeight' 2 + BordHeight / 2f' BorderLength' BordHeight);  }  
Magic Number,CRC.Controls,PlayerTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\PlayerTrackBar.cs,OnPaint,The following statement contains a magic number: g.FillRectangle (emptyBrush' BordHeight' 2 + BordHeight / 2f' BorderLength' BordHeight);  
Magic Number,CRC.Controls,PlayerTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\PlayerTrackBar.cs,OnPaint,The following statement contains a magic number: using (SolidBrush valueBrush = new SolidBrush (FillColor)) {  	g.FillRectangle (valueBrush' BordHeight + 1f' 2 + BordHeight / 2f + 1f' ValueX - 2' BordHeight - 2);  	switch (Shape) {  	case TrackShape.Circle:  		DrawCircleTrack (g' valueBrush);  		break;  	case TrackShape.Rectanles:  		DrawRectangles (g' valueBrush);  		break;  	}  }  
Magic Number,CRC.Controls,PlayerTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\PlayerTrackBar.cs,OnPaint,The following statement contains a magic number: using (SolidBrush valueBrush = new SolidBrush (FillColor)) {  	g.FillRectangle (valueBrush' BordHeight + 1f' 2 + BordHeight / 2f + 1f' ValueX - 2' BordHeight - 2);  	switch (Shape) {  	case TrackShape.Circle:  		DrawCircleTrack (g' valueBrush);  		break;  	case TrackShape.Rectanles:  		DrawRectangles (g' valueBrush);  		break;  	}  }  
Magic Number,CRC.Controls,PlayerTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\PlayerTrackBar.cs,OnPaint,The following statement contains a magic number: using (SolidBrush valueBrush = new SolidBrush (FillColor)) {  	g.FillRectangle (valueBrush' BordHeight + 1f' 2 + BordHeight / 2f + 1f' ValueX - 2' BordHeight - 2);  	switch (Shape) {  	case TrackShape.Circle:  		DrawCircleTrack (g' valueBrush);  		break;  	case TrackShape.Rectanles:  		DrawRectangles (g' valueBrush);  		break;  	}  }  
Magic Number,CRC.Controls,PlayerTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\PlayerTrackBar.cs,OnPaint,The following statement contains a magic number: g.FillRectangle (valueBrush' BordHeight + 1f' 2 + BordHeight / 2f + 1f' ValueX - 2' BordHeight - 2);  
Magic Number,CRC.Controls,PlayerTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\PlayerTrackBar.cs,OnPaint,The following statement contains a magic number: g.FillRectangle (valueBrush' BordHeight + 1f' 2 + BordHeight / 2f + 1f' ValueX - 2' BordHeight - 2);  
Magic Number,CRC.Controls,PlayerTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\PlayerTrackBar.cs,OnPaint,The following statement contains a magic number: g.FillRectangle (valueBrush' BordHeight + 1f' 2 + BordHeight / 2f + 1f' ValueX - 2' BordHeight - 2);  
Missing Default,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,OnMouseDownSlider,The following switch statement is missing a default case: switch (this._orientation) {  case Orientation.Horizontal:  	mouseStartPos = currentPoint.X - _trackerRect.X;  	break;  case Orientation.Vertical:  	mouseStartPos = currentPoint.Y - _trackerRect.Y;  	break;  }  
Missing Default,CRC.Controls,MacTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\MacTrackBar\MacTrackBar.cs,OnMouseMoveSlider,The following switch statement is missing a default case: switch (this._orientation) {  case Orientation.Horizontal:  	if ((currentPoint.X + _trackerSize.Width - mouseStartPos) >= this.Width - _indentWidth)  		offsetValue = _maximum - _minimum;  	else if (currentPoint.X - mouseStartPos <= _indentWidth)  		offsetValue = 0;  	else  		offsetValue = (int)(((currentPoint.X - mouseStartPos - _indentWidth) * (_maximum - _minimum)) / (this.Width - 2 * _indentWidth - _trackerSize.Width) + 0.5);  	break;  case Orientation.Vertical:  	if (currentPoint.Y + _trackerSize.Width / 2 >= this.Height - _indentHeight)  		offsetValue = 0;  	else if (currentPoint.Y + _trackerSize.Width / 2 <= _indentHeight)  		offsetValue = _maximum - _minimum;  	else  		offsetValue = (int)(((this.Height - currentPoint.Y + _trackerSize.Width / 2 - mouseStartPos - _indentHeight) * (_maximum - _minimum)) / (this.Height - 2 * _indentHeight) + 0.5);  	break;  }  
Missing Default,CRC.Controls,PlayerTrackBar,C:\repos\crcruicai_Library\UI\TrackBarLibrary\PlayerTrackBar.cs,OnPaint,The following switch statement is missing a default case: switch (Shape) {  case TrackShape.Circle:  	DrawCircleTrack (g' valueBrush);  	break;  case TrackShape.Rectanles:  	DrawRectangles (g' valueBrush);  	break;  }  
