Implementation smell,Namespace,Class,File,Method,Description
Long Method,StatLight.Console,ArgOptions,C:\repos\staxmanade_StatLight\src\Statlight.Console\ArgOptions.cs,GetOptions,The method has 106 lines of code.
Complex Method,Mono.Options,Option,C:\repos\staxmanade_StatLight\src\Statlight.Console\Tools\Mono.Options.cs,ParsePrototype,Cyclomatic complexity of the method is 9
Complex Method,Mono.Options,OptionSet,C:\repos\staxmanade_StatLight\src\Statlight.Console\Tools\Mono.Options.cs,WriteOptionPrototype,Cyclomatic complexity of the method is 8
Long Parameter List,Mono.Options,OptionSet,C:\repos\staxmanade_StatLight\src\Statlight.Console\Tools\Mono.Options.cs,GetOptionParts,The method has 5 parameters. Parameters: argument' flag' name' sep' value
Long Statement,StatLight.Console,ArgOptions,C:\repos\staxmanade_StatLight\src\Statlight.Console\ArgOptions.cs,GetOptions,The length of the statement  "            var msTestVersions = (from MicrosoftTestingFrameworkVersion version in Enum.GetValues(typeof(MicrosoftTestingFrameworkVersion)) " is 127.
Long Statement,StatLight.Console,ArgOptions,C:\repos\staxmanade_StatLight\src\Statlight.Console\ArgOptions.cs,GetOptions,The length of the statement  "                .Add("x|XapPath"' "Path to test xap file. (Can specify multiple -x={path1} -x={path2})"' v => _xapPaths.Add(v ?? string.Empty)' OptionValueType.Required) " is 153.
Long Statement,StatLight.Console,ArgOptions,C:\repos\staxmanade_StatLight\src\Statlight.Console\ArgOptions.cs,GetOptions,The length of the statement  "                .Add("e|ExtensionDllPath"' "Path to StatLight extension .dll. (Can specify multiple -e={path1} -e={path2})"' v => _extensionDllPaths.Add(v ?? string.Empty)) " is 156.
Long Statement,StatLight.Console,ArgOptions,C:\repos\staxmanade_StatLight\src\Statlight.Console\ArgOptions.cs,GetOptions,The length of the statement  "                .Add("t|TagFilters"' "The tag filter expression used to filter executed tests. (See Microsoft.Silverlight.Testing filter format for how to generate complicated filter expressions) Only available with MSTest."' v => TagFilters = v' OptionValueType.Optional) " is 256.
Long Statement,StatLight.Console,ArgOptions,C:\repos\staxmanade_StatLight\src\Statlight.Console\ArgOptions.cs,GetOptions,The length of the statement  "                .Add<string>("c|Continuous"' "Runs a single test run' and then monitors the xap for build changes and re-runs the tests automatically."' v => ContinuousIntegrationMode = true) " is 175.
Long Statement,StatLight.Console,ArgOptions,C:\repos\staxmanade_StatLight\src\Statlight.Console\ArgOptions.cs,GetOptions,The length of the statement  "                .Add("b|BrowserWindow"' "Sets the display visibility and/or size of the StatLight browser window. Leave blank to keep browser window hidden. Specify this flag to have the browser window shown with the default height/width. Or using the following pattern [M|m|n][HEIGHTxWIDTH] you can specify the window state [M|Maximized|m|Minimized|N|Normal][{HEIGHT}x{WIDTH}] to be able to specify a specific size. EX: -b:N800x600 a normal window with a width of 800 and height of 600."' " is 473.
Long Statement,StatLight.Console,ArgOptions,C:\repos\staxmanade_StatLight\src\Statlight.Console\ArgOptions.cs,GetOptions,The length of the statement  "                .Add("MethodsToTest"' "Semicolon seperated list of full method names to execute. EX: --methodsToTest=\"RootNamespace.ChildNamespace.ClassName.MethodUnderTest;RootNamespace.ChildNamespace.ClassName.Method2UnderTest;\""' v => " is 223.
Long Statement,StatLight.Console,ArgOptions,C:\repos\staxmanade_StatLight\src\Statlight.Console\ArgOptions.cs,GetOptions,The length of the statement  "                .Add("o|OverrideTestProvider"' "Allows you to override the default test provider of MSTest. Pass in one of the following [{0}]".FormatWith(typeof(UnitTestProviderType).FormatEnumString())' v => " is 193.
Long Statement,StatLight.Console,ArgOptions,C:\repos\staxmanade_StatLight\src\Statlight.Console\ArgOptions.cs,GetOptions,The length of the statement  "                            throw new StatLightException("Could not find an OverrideTestProvider defined as [{0}]. Please specify one of the following [{1}]".FormatWith(v' typeof(UnitTestProviderType).FormatEnumString())); " is 194.
Long Statement,StatLight.Console,ArgOptions,C:\repos\staxmanade_StatLight\src\Statlight.Console\ArgOptions.cs,GetOptions,The length of the statement  "                .Add("v|Version"' "(NOTE: YOU SHOULD NOT HAVE TO DO THIS) - Give a specific Microsoft.Silverlight.Testing build version. Pass in one of the following [{0}]. One example this may come in useful is if you have an assembly in your xap named similar to what StatLight is using to automatically detect the version. You can use this to override the 'figured out type'.".FormatWith(typeof(MicrosoftTestingFrameworkVersion).FormatEnumString())' v => " is 441.
Long Statement,StatLight.Console,ArgOptions,C:\repos\staxmanade_StatLight\src\Statlight.Console\ArgOptions.cs,GetOptions,The length of the statement  "                                throw new StatLightException("Could not find a version defined as [{0}]. Please specify one of the following [{1}]".FormatWith(v' typeof(MicrosoftTestingFrameworkVersion).FormatEnumString())); " is 192.
Long Statement,StatLight.Console,ArgOptions,C:\repos\staxmanade_StatLight\src\Statlight.Console\ArgOptions.cs,GetOptions,The length of the statement  "                .Add("ReportOutputFileType"' "Specify the type of report output when using the -r|--ReportOutputFile=[path]. Possible options [{0}]".FormatWith(typeof(ReportOutputFileType).FormatEnumString())' v => " is 198.
Long Statement,StatLight.Console,ArgOptions,C:\repos\staxmanade_StatLight\src\Statlight.Console\ArgOptions.cs,GetOptions,The length of the statement  "                .Add<string>("UseRemoteTestPage"' "You can specify a remotly hosted test page (that contains a StatLight remote runner) by specifying -x=http://localhost/pathToTestPage.html and the --UseRemoteTestPage flag to have StatLight spin up a browser to call the remote page."' v => UseRemoteTestPage = true) " is 300.
Long Statement,StatLight.Console,ArgOptions,C:\repos\staxmanade_StatLight\src\Statlight.Console\ArgOptions.cs,GetOptions,The length of the statement  "                .Add("WebBrowserType"' "If you have other browser installed' you can have StatLight use any of the following web browsers [{0}]".FormatWith(typeof(WebBrowserType).FormatEnumString())' v => " is 188.
Long Statement,StatLight.Console,ArgOptions,C:\repos\staxmanade_StatLight\src\Statlight.Console\ArgOptions.cs,GetOptions,The length of the statement  "                .Add("ForceBrowserStart"' "You may need use this option to give permission for StatLight to forcefully close external web browser processes before starting a test run."' v => ForceBrowserStart = true) " is 200.
Long Statement,StatLight.Console,ArgOptions,C:\repos\staxmanade_StatLight\src\Statlight.Console\ArgOptions.cs,GetOptions,The length of the statement  "                .Add("NumberOfBrowserHosts"' "Default is 1. Allows you to specify the number of browser windows to spread work across."' v => " is 125.
Long Statement,StatLight.Console,ArgOptions,C:\repos\staxmanade_StatLight\src\Statlight.Console\ArgOptions.cs,GetOptions,The length of the statement  "                .Add<string>("UsePhoneEmulator"' "If you have the windows phone SDK installed. Attempt this run with the emulator."' v => UsePhoneEmulator = true) " is 146.
Long Statement,StatLight.Console,ArgOptions,C:\repos\staxmanade_StatLight\src\Statlight.Console\ArgOptions.cs,GetOptions,The length of the statement  "                .Add("QueryString"' "Specify some QueryString that will be appended to the browser test page request. This can be helpful to setup a remote web service and pass in the url' or a port used. You can then access the querystring within silverlight HtmlPage.Document.QueryString[..]"' v => QueryString = v ?? String.Empty) " is 317.
Long Statement,StatLight.Console,ArgOptions,C:\repos\staxmanade_StatLight\src\Statlight.Console\ArgOptions.cs,GetOptions,The length of the statement  "                .Add<string>("teamcity"' "Changes the console output to generate the teamcity message spec."' v => OutputForTeamCity = true) " is 124.
Long Statement,StatLight.Console,ArgOptions,C:\repos\staxmanade_StatLight\src\Statlight.Console\ArgOptions.cs,GetOptions,The length of the statement  "                .Add<string>("MSGenericTestFormat"' "This option has been replaced. Use the --ReportOutputFileType:MSGenericTestFormat"' v => " is 125.
Long Statement,StatLight.Console,ArgOptions,C:\repos\staxmanade_StatLight\src\Statlight.Console\ArgOptions.cs,GetOptions,The length of the statement  "                        throw new StatLightException("THe --MSGenericTestFormat flag has been removed. You should now be using --ReportOutputFileType:{0}".FormatWith(ReportOutputFileType.MSGenericTest)); " is 179.
Long Statement,StatLight.Console,ArgOptions,C:\repos\staxmanade_StatLight\src\Statlight.Console\ArgOptions.cs,GetOptions,The length of the statement  "                .Add<string>("webserveronly"' "Starts up the StatLight web server without any browser. Useful when needing to attach Visual Studio Debugger to the browser and debug a test."' v => StartWebServerOnly = true) " is 206.
Long Statement,StatLight.Console,ArgOptions,C:\repos\staxmanade_StatLight\src\Statlight.Console\ArgOptions.cs,GetOptions,The length of the statement  "                .Add<string>("debug"' "Prints a verbose spattering of internal logging information. Useful when trying to understand possible issues or when reporting issues back to StatLight.CodePlex.com"' v => IsRequestingDebug = true) " is 221.
Long Statement,StatLight.Console,ArgOptions,C:\repos\staxmanade_StatLight\src\Statlight.Console\ArgOptions.cs,GetOptions,The length of the statement  "                .Add("OverrideSetting"' "Specify settings to overried at the command line. [EX: --OverrideSetting:MaxWaitTimeAllowedBeforeCommunicationErrorSent=00:00:20"' v => " is 160.
Long Statement,StatLight.Console,ArgOptions,C:\repos\staxmanade_StatLight\src\Statlight.Console\ArgOptions.cs,ParseEnum,The length of the statement  "                throw new StatLightException("Could not find an WebBrowserType defined as [{0}]. Please specify one of the following [{1}].".FormatWith(value' typeof(T).FormatEnumString())); " is 174.
Long Statement,StatLight.Console,ArgOptions,C:\repos\staxmanade_StatLight\src\Statlight.Console\ArgOptions.cs,ParseWindowGeometry,The length of the statement  "                    throw new StatLightException("Unknown browser state flag [{0}]. Try specifying either [M|m|N] for [Maximized|minimized|Normal]".FormatWith(stateFlag)); " is 151.
Long Statement,StatLight.Console,ArgOptions,C:\repos\staxmanade_StatLight\src\Statlight.Console\ArgOptions.cs,ParseWindowGeometry,The length of the statement  "                    throw new Exception("Width and height in geometry must be positive integers. (We parsed width[{0}] and height[{1}])".FormatWith(widthString' heightString)); " is 156.
Complex Conditional,StatLight.Console,ArgOptions,C:\repos\staxmanade_StatLight\src\Statlight.Console\ArgOptions.cs,ParseWindowGeometry,The conditional expression  "!int.TryParse(widthString' out width) || !int.TryParse(heightString' out height) || width < 1 || height < 1"  is complex.
Complex Conditional,Mono.Options,Option,C:\repos\staxmanade_StatLight\src\Statlight.Console\Tools\Mono.Options.cs,Option,The conditional expression  "Array.IndexOf(names' "<>") >= 0 &&  					((names.Length == 1 && this.type != OptionValueType.None) ||  					 (names.Length > 1 && this.MaxValueCount > 1))"  is complex.
Complex Conditional,Mono.Options,OptionSet,C:\repos\staxmanade_StatLight\src\Statlight.Console\Tools\Mono.Options.cs,ParseBool,The conditional expression  "n.Length >= 1 && (n[n.Length - 1] == '+' || n[n.Length - 1] == '-') &&  					Contains((rn = n.Substring(0' n.Length - 1)))"  is complex.
Magic Number,StatLight.Console,ArgOptions,C:\repos\staxmanade_StatLight\src\Statlight.Console\ArgOptions.cs,GetOptions,The following statement contains a magic number: return new OptionSet()                  .Add("x|XapPath"' "Path to test xap file. (Can specify multiple -x={path1} -x={path2})"' v => _xapPaths.Add(v ?? string.Empty)' OptionValueType.Required)                  .Add("e|ExtensionDllPath"' "Path to StatLight extension .dll. (Can specify multiple -e={path1} -e={path2})"' v => _extensionDllPaths.Add(v ?? string.Empty))                  .Add("d|Dll"' "Assembly to test."' v =>                      {                          if (!string.IsNullOrEmpty(v))                          {                              _dlls.Add(v);                          }                      })                  .Add("t|TagFilters"' "The tag filter expression used to filter executed tests. (See Microsoft.Silverlight.Testing filter format for how to generate complicated filter expressions) Only available with MSTest."' v => TagFilters = v' OptionValueType.Optional)                  .Add<string>("c|Continuous"' "Runs a single test run' and then monitors the xap for build changes and re-runs the tests automatically."' v => ContinuousIntegrationMode = true)                  .Add("b|BrowserWindow"' "Sets the display visibility and/or size of the StatLight browser window. Leave blank to keep browser window hidden. Specify this flag to have the browser window shown with the default height/width. Or using the following pattern [M|m|n][HEIGHTxWIDTH] you can specify the window state [M|Maximized|m|Minimized|N|Normal][{HEIGHT}x{WIDTH}] to be able to specify a specific size. EX: -b:N800x600 a normal window with a width of 800 and height of 600."'                      v => WindowGeometry = ParseWindowGeometry(v))                  .Add("MethodsToTest"' "Semicolon seperated list of full method names to execute. EX: --methodsToTest=\"RootNamespace.ChildNamespace.ClassName.MethodUnderTest;RootNamespace.ChildNamespace.ClassName.Method2UnderTest;\""' v =>                      {                          v = v ?? string.Empty;                          MethodsToTest = v.Split(';').Where(w => !string.IsNullOrEmpty(w)).ToCollection();                      })                  .Add("o|OverrideTestProvider"' "Allows you to override the default test provider of MSTest. Pass in one of the following [{0}]".FormatWith(typeof(UnitTestProviderType).FormatEnumString())' v =>                      {                          v = v ?? string.Empty;                          UnitTestProviderType? result = null;                            foreach (var typeName in Enum.GetNames(typeof(UnitTestProviderType)))                          {                              if (v.Is(typeName))                              {                                  result = (UnitTestProviderType)Enum.Parse(typeof(UnitTestProviderType)' typeName);                                  break;                              }                          }                            if (!result.HasValue)                          {                              throw new StatLightException("Could not find an OverrideTestProvider defined as [{0}]. Please specify one of the following [{1}]".FormatWith(v' typeof(UnitTestProviderType).FormatEnumString()));                          }                          UnitTestProviderType = result.Value;                      })                  .Add("v|Version"' "(NOTE: YOU SHOULD NOT HAVE TO DO THIS) - Give a specific Microsoft.Silverlight.Testing build version. Pass in one of the following [{0}]. One example this may come in useful is if you have an assembly in your xap named similar to what StatLight is using to automatically detect the version. You can use this to override the 'figured out type'.".FormatWith(typeof(MicrosoftTestingFrameworkVersion).FormatEnumString())' v =>                      {                          v = v ?? string.Empty;                            if (string.IsNullOrEmpty(v))                              MicrosoftTestingFrameworkVersion = null;                          else                          {                              var loweredV = v.ToLower();                              if (msTestVersions.ContainsKey(loweredV))                                  MicrosoftTestingFrameworkVersion = msTestVersions[loweredV];                              else                                  throw new StatLightException("Could not find a version defined as [{0}]. Please specify one of the following [{1}]".FormatWith(v' typeof(MicrosoftTestingFrameworkVersion).FormatEnumString()));                          }                      })                  .Add("r|ReportOutputFile"' "File path to write xml report."' v =>                      {                          v = v ?? string.Empty;                          if (Directory.Exists(Path.GetDirectoryName(v)))                              XmlReportOutputPath = v;                          else                              throw new DirectoryNotFoundException("Could not find directory in [{0}]".FormatWith(v));                      })                  .Add("ReportOutputFileType"' "Specify the type of report output when using the -r|--ReportOutputFile=[path]. Possible options [{0}]".FormatWith(typeof(ReportOutputFileType).FormatEnumString())' v =>                      {                          ReportOutputFileType = ParseEnum<ReportOutputFileType>(v);                      })                  .Add<string>("UseRemoteTestPage"' "You can specify a remotly hosted test page (that contains a StatLight remote runner) by specifying -x=http://localhost/pathToTestPage.html and the --UseRemoteTestPage flag to have StatLight spin up a browser to call the remote page."' v => UseRemoteTestPage = true)                  .Add("WebBrowserType"' "If you have other browser installed' you can have StatLight use any of the following web browsers [{0}]".FormatWith(typeof(WebBrowserType).FormatEnumString())' v =>                      {                          _webBrowserType = ParseEnum<WebBrowserType>(v);                      })                  .Add("ForceBrowserStart"' "You may need use this option to give permission for StatLight to forcefully close external web browser processes before starting a test run."' v => ForceBrowserStart = true)                  .Add("NumberOfBrowserHosts"' "Default is 1. Allows you to specify the number of browser windows to spread work across."' v =>                      {                          int value;                          v = v ?? string.Empty;                          if (int.TryParse(v' out value))                          {                              NumberOfBrowserHosts = value;                          }                          else                          {                              throw new StatLightException("Could not parse parameter [{0}] for numberofbrowsers into an integer.".FormatWith(v));                          }                      })                  .Add<string>("UsePhoneEmulator"' "If you have the windows phone SDK installed. Attempt this run with the emulator."' v => UsePhoneEmulator = true)                  .Add("QueryString"' "Specify some QueryString that will be appended to the browser test page request. This can be helpful to setup a remote web service and pass in the url' or a port used. You can then access the querystring within silverlight HtmlPage.Document.QueryString[..]"' v => QueryString = v ?? String.Empty)                  .Add<string>("teamcity"' "Changes the console output to generate the teamcity message spec."' v => OutputForTeamCity = true)                  .Add<string>("MSGenericTestFormat"' "This option has been replaced. Use the --ReportOutputFileType:MSGenericTestFormat"' v =>                      {                          throw new StatLightException("THe --MSGenericTestFormat flag has been removed. You should now be using --ReportOutputFileType:{0}".FormatWith(ReportOutputFileType.MSGenericTest));                      })                  .Add<string>("webserveronly"' "Starts up the StatLight web server without any browser. Useful when needing to attach Visual Studio Debugger to the browser and debug a test."' v => StartWebServerOnly = true)                  .Add<string>("debug"' "Prints a verbose spattering of internal logging information. Useful when trying to understand possible issues or when reporting issues back to StatLight.CodePlex.com"' v => IsRequestingDebug = true)                  .Add("OverrideSetting"' "Specify settings to overried at the command line. [EX: --OverrideSetting:MaxWaitTimeAllowedBeforeCommunicationErrorSent=00:00:20"' v =>                      {                          if (string.IsNullOrEmpty(v))                              return;                            var item = v.Split('=');                          if (item.Length != 2)                              throw new StatLightException("Invalid settings format specified");                            OverriddenSettings.Add(item[0]' item[1]);                      })                  .Add<string>("?|help"' "displays the help message"' v => ShowHelp = true)                  ;
Magic Number,StatLight.Console,ArgOptions,C:\repos\staxmanade_StatLight\src\Statlight.Console\ArgOptions.cs,ParseWindowGeometry,The following statement contains a magic number: if (matches.Groups.Count != 5)              {                  throw new StatLightException("If specifying the geometry it must be 'WIDTHxHEIGHT'");              }
Magic Number,StatLight.Console,ArgOptions,C:\repos\staxmanade_StatLight\src\Statlight.Console\ArgOptions.cs,ParseWindowGeometry,The following statement contains a magic number: var widthString = matches.Groups[3].Value;
Magic Number,StatLight.Console,ArgOptions,C:\repos\staxmanade_StatLight\src\Statlight.Console\ArgOptions.cs,ParseWindowGeometry,The following statement contains a magic number: var heightString = matches.Groups[4].Value;
Magic Number,Mono.Options,OptionSet,C:\repos\staxmanade_StatLight\src\Statlight.Console\Tools\Mono.Options.cs,Add,The following statement contains a magic number: Option p = new ActionOption(prototype' description' 2'  					delegate(OptionValueCollection v) { action(v[0]' v[1]); });
Magic Number,Mono.Options,OptionSet,C:\repos\staxmanade_StatLight\src\Statlight.Console\Tools\Mono.Options.cs,WriteOptionDescriptions,The following statement contains a magic number: foreach (Option p in this)  			{  				int written = 0;  				if (!WriteOptionPrototype(o' p' ref written))  					continue;    				if (written < OptionWidth)  					o.Write(new string(' '' OptionWidth - written));  				else  				{  					o.WriteLine();  					o.Write(new string(' '' OptionWidth));  				}    				List<string> lines = GetLines(localizer(GetDescription(p.Description)));  				o.WriteLine(lines[0]);  				string prefix = new string(' '' OptionWidth + 2);  				for (int i = 1; i < lines.Count; ++i)  				{  					o.Write(prefix);  					o.WriteLine(lines[i]);  				}  			}
Magic Number,Mono.Options,OptionSet,C:\repos\staxmanade_StatLight\src\Statlight.Console\Tools\Mono.Options.cs,GetLines,The following statement contains a magic number: int length = 80 - OptionWidth - 2;
Magic Number,Mono.Options,OptionSet,C:\repos\staxmanade_StatLight\src\Statlight.Console\Tools\Mono.Options.cs,GetLines,The following statement contains a magic number: int length = 80 - OptionWidth - 2;
Missing Default,Mono.Options,OptionSet,C:\repos\staxmanade_StatLight\src\Statlight.Console\Tools\Mono.Options.cs,Parse,The following switch statement is missing a default case: switch (p.OptionValueType)  				{  					case OptionValueType.None:  						c.OptionValues.Add(n);  						c.Option.Invoke(c);  						break;  					case OptionValueType.Optional:  					case OptionValueType.Required:  						ParseValue(v' c);  						break;  				}
Missing Default,Mono.Options,OptionSet,C:\repos\staxmanade_StatLight\src\Statlight.Console\Tools\Mono.Options.cs,GetLineEnd,The following switch statement is missing a default case: switch (description[i])  				{  					case ' ':  					case '\t':  					case '\v':  					case '-':  					case ''':  					case '.':  					case ';':  						sep = i;  						break;  					case '\n':  						return i;  				}
