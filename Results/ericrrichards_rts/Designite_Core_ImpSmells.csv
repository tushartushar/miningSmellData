Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Core,HeightMapEditorSelection,C:\repos\ericrrichards_rts\Core\HeightMapEditorSelection.cs,MoveRect,Cyclomatic complexity of the method is 14
Long Statement,Core,App,C:\repos\ericrrichards_rts\Core\App.cs,CreateDevice,The length of the statement  "	var vp = CreateFlags.Multithreaded | (caps.DeviceCaps.HasFlag (DeviceCaps.HWTransformAndLight) ? CreateFlags.HardwareVertexProcessing : CreateFlags.SoftwareVertexProcessing); " is 174.
Long Statement,Core,HeightMap,C:\repos\ericrrichards_rts\Core\HeightMap.cs,LoadFromFile,The length of the statement  "		HeightMapTexture = Texture.FromFile (_device' filename' _size.X' _size.Y' 1' Usage.Dynamic' Format.L8' Pool.Default' Filter.Default' Filter.Default' 0); " is 152.
Long Statement,Core,HeightMapRenderer,C:\repos\ericrrichards_rts\Core\HeightMapRenderer.cs,CreateParticles,The length of the statement  "		_vb = new VertexBuffer (_device' _hm.Size.X * _hm.Size.Y * Particle.Size' Usage.Dynamic | Usage.Points | Usage.WriteOnly' Particle.FVF' Pool.Default); " is 150.
Long Statement,Core,HeightMapRenderer,C:\repos\ericrrichards_rts\Core\HeightMapRenderer.cs,CreateParticles,The length of the statement  "					contains = x >= Editor.SelectionRect.Left && x <= Editor.SelectionRect.Right && y >= Editor.SelectionRect.Top && y <= Editor.SelectionRect.Bottom; " is 146.
Long Statement,Core,HeightMapRenderer,C:\repos\ericrrichards_rts\Core\HeightMapRenderer.cs,CreateParticles,The length of the statement  "					Color = (ShowSelection && contains) ? new Color4 (1.0f' 0' 0' 1.0f).ToArgb () : new Color4 (1.0f' red' green' 0.0f).ToArgb () " is 125.
Complex Conditional,Core,HeightMap,C:\repos\ericrrichards_rts\Core\HeightMap.cs,SmoothTerrain,The conditional expression  "x1 < 0 || x1 >= _size.X || y1 < 0 || y1 >= _size.Y"  is complex.
Magic Number,Core,App,C:\repos\ericrrichards_rts\Core\App.cs,Main,The following statement contains a magic number: if (Init (800' 600' true).IsFailure) {  	return;  }  
Magic Number,Core,App,C:\repos\ericrrichards_rts\Core\App.cs,Main,The following statement contains a magic number: if (Init (800' 600' true).IsFailure) {  	return;  }  
Magic Number,Core,App,C:\repos\ericrrichards_rts\Core\App.cs,CreateDevice,The following statement contains a magic number: if (caps.VertexShaderVersion < new Version (2' 0) || caps.PixelShaderVersion < new Version (2' 0)) {  	Debug.Print ("Warning - Your graphic card does not support vertex and pixel shaders version 2.0");  }  
Magic Number,Core,App,C:\repos\ericrrichards_rts\Core\App.cs,CreateDevice,The following statement contains a magic number: if (caps.VertexShaderVersion < new Version (2' 0) || caps.PixelShaderVersion < new Version (2' 0)) {  	Debug.Print ("Warning - Your graphic card does not support vertex and pixel shaders version 2.0");  }  
Magic Number,Core,HeightMap,C:\repos\ericrrichards_rts\Core\HeightMap.cs,CreateRandomHeightMap,The following statement contains a magic number: for (int y = 0; y < _size.Y; y++) {  	for (int x = 0; x < _size.X; x++) {  		var xf = (x / (float)_size.X) * noiseSize;  		var yf = (y / (float)_size.Y) * noiseSize;  		var total = 0.0f;  		for (int i = 0; i < octaves; i++) {  			var freq = MathF.Pow (2.0f' i);  			var amp = MathF.Pow (persistence' i);  			var tx = xf * freq;  			var ty = yf * freq;  			var txi = (int)tx;  			var tyi = (int)ty;  			var fracX = tx - txi;  			var fracY = ty - tyi;  			var v1 = MathF.Noise (txi + tyi * 57 + seed);  			var v2 = MathF.Noise (txi + 1 + tyi * 57 + seed);  			var v3 = MathF.Noise (txi + (tyi + 1) * 57 + seed);  			var v4 = MathF.Noise (txi + 1 + (tyi + 1) * 57 + seed);  			var i1 = MathF.CosInterpolate (v1' v2' fracX);  			var i2 = MathF.CosInterpolate (v3' v4' fracX);  			total += MathF.CosInterpolate (i1' i2' fracY) * amp;  		}  		var b = (int)(128 + total * 128.0f);  		if (b < 0)  			b = 0;  		if (b > 255)  			b = 255;  		dr.Data.Seek (y * dr.Pitch + x' SeekOrigin.Begin);  		dr.Data.Write ((byte)b);  		_heightMap [x + y * _size.X] = (b / 255.0f) * _maxHeight;  	}  }  
Magic Number,Core,HeightMap,C:\repos\ericrrichards_rts\Core\HeightMap.cs,CreateRandomHeightMap,The following statement contains a magic number: for (int y = 0; y < _size.Y; y++) {  	for (int x = 0; x < _size.X; x++) {  		var xf = (x / (float)_size.X) * noiseSize;  		var yf = (y / (float)_size.Y) * noiseSize;  		var total = 0.0f;  		for (int i = 0; i < octaves; i++) {  			var freq = MathF.Pow (2.0f' i);  			var amp = MathF.Pow (persistence' i);  			var tx = xf * freq;  			var ty = yf * freq;  			var txi = (int)tx;  			var tyi = (int)ty;  			var fracX = tx - txi;  			var fracY = ty - tyi;  			var v1 = MathF.Noise (txi + tyi * 57 + seed);  			var v2 = MathF.Noise (txi + 1 + tyi * 57 + seed);  			var v3 = MathF.Noise (txi + (tyi + 1) * 57 + seed);  			var v4 = MathF.Noise (txi + 1 + (tyi + 1) * 57 + seed);  			var i1 = MathF.CosInterpolate (v1' v2' fracX);  			var i2 = MathF.CosInterpolate (v3' v4' fracX);  			total += MathF.CosInterpolate (i1' i2' fracY) * amp;  		}  		var b = (int)(128 + total * 128.0f);  		if (b < 0)  			b = 0;  		if (b > 255)  			b = 255;  		dr.Data.Seek (y * dr.Pitch + x' SeekOrigin.Begin);  		dr.Data.Write ((byte)b);  		_heightMap [x + y * _size.X] = (b / 255.0f) * _maxHeight;  	}  }  
Magic Number,Core,HeightMap,C:\repos\ericrrichards_rts\Core\HeightMap.cs,CreateRandomHeightMap,The following statement contains a magic number: for (int y = 0; y < _size.Y; y++) {  	for (int x = 0; x < _size.X; x++) {  		var xf = (x / (float)_size.X) * noiseSize;  		var yf = (y / (float)_size.Y) * noiseSize;  		var total = 0.0f;  		for (int i = 0; i < octaves; i++) {  			var freq = MathF.Pow (2.0f' i);  			var amp = MathF.Pow (persistence' i);  			var tx = xf * freq;  			var ty = yf * freq;  			var txi = (int)tx;  			var tyi = (int)ty;  			var fracX = tx - txi;  			var fracY = ty - tyi;  			var v1 = MathF.Noise (txi + tyi * 57 + seed);  			var v2 = MathF.Noise (txi + 1 + tyi * 57 + seed);  			var v3 = MathF.Noise (txi + (tyi + 1) * 57 + seed);  			var v4 = MathF.Noise (txi + 1 + (tyi + 1) * 57 + seed);  			var i1 = MathF.CosInterpolate (v1' v2' fracX);  			var i2 = MathF.CosInterpolate (v3' v4' fracX);  			total += MathF.CosInterpolate (i1' i2' fracY) * amp;  		}  		var b = (int)(128 + total * 128.0f);  		if (b < 0)  			b = 0;  		if (b > 255)  			b = 255;  		dr.Data.Seek (y * dr.Pitch + x' SeekOrigin.Begin);  		dr.Data.Write ((byte)b);  		_heightMap [x + y * _size.X] = (b / 255.0f) * _maxHeight;  	}  }  
Magic Number,Core,HeightMap,C:\repos\ericrrichards_rts\Core\HeightMap.cs,CreateRandomHeightMap,The following statement contains a magic number: for (int y = 0; y < _size.Y; y++) {  	for (int x = 0; x < _size.X; x++) {  		var xf = (x / (float)_size.X) * noiseSize;  		var yf = (y / (float)_size.Y) * noiseSize;  		var total = 0.0f;  		for (int i = 0; i < octaves; i++) {  			var freq = MathF.Pow (2.0f' i);  			var amp = MathF.Pow (persistence' i);  			var tx = xf * freq;  			var ty = yf * freq;  			var txi = (int)tx;  			var tyi = (int)ty;  			var fracX = tx - txi;  			var fracY = ty - tyi;  			var v1 = MathF.Noise (txi + tyi * 57 + seed);  			var v2 = MathF.Noise (txi + 1 + tyi * 57 + seed);  			var v3 = MathF.Noise (txi + (tyi + 1) * 57 + seed);  			var v4 = MathF.Noise (txi + 1 + (tyi + 1) * 57 + seed);  			var i1 = MathF.CosInterpolate (v1' v2' fracX);  			var i2 = MathF.CosInterpolate (v3' v4' fracX);  			total += MathF.CosInterpolate (i1' i2' fracY) * amp;  		}  		var b = (int)(128 + total * 128.0f);  		if (b < 0)  			b = 0;  		if (b > 255)  			b = 255;  		dr.Data.Seek (y * dr.Pitch + x' SeekOrigin.Begin);  		dr.Data.Write ((byte)b);  		_heightMap [x + y * _size.X] = (b / 255.0f) * _maxHeight;  	}  }  
Magic Number,Core,HeightMap,C:\repos\ericrrichards_rts\Core\HeightMap.cs,CreateRandomHeightMap,The following statement contains a magic number: for (int y = 0; y < _size.Y; y++) {  	for (int x = 0; x < _size.X; x++) {  		var xf = (x / (float)_size.X) * noiseSize;  		var yf = (y / (float)_size.Y) * noiseSize;  		var total = 0.0f;  		for (int i = 0; i < octaves; i++) {  			var freq = MathF.Pow (2.0f' i);  			var amp = MathF.Pow (persistence' i);  			var tx = xf * freq;  			var ty = yf * freq;  			var txi = (int)tx;  			var tyi = (int)ty;  			var fracX = tx - txi;  			var fracY = ty - tyi;  			var v1 = MathF.Noise (txi + tyi * 57 + seed);  			var v2 = MathF.Noise (txi + 1 + tyi * 57 + seed);  			var v3 = MathF.Noise (txi + (tyi + 1) * 57 + seed);  			var v4 = MathF.Noise (txi + 1 + (tyi + 1) * 57 + seed);  			var i1 = MathF.CosInterpolate (v1' v2' fracX);  			var i2 = MathF.CosInterpolate (v3' v4' fracX);  			total += MathF.CosInterpolate (i1' i2' fracY) * amp;  		}  		var b = (int)(128 + total * 128.0f);  		if (b < 0)  			b = 0;  		if (b > 255)  			b = 255;  		dr.Data.Seek (y * dr.Pitch + x' SeekOrigin.Begin);  		dr.Data.Write ((byte)b);  		_heightMap [x + y * _size.X] = (b / 255.0f) * _maxHeight;  	}  }  
Magic Number,Core,HeightMap,C:\repos\ericrrichards_rts\Core\HeightMap.cs,CreateRandomHeightMap,The following statement contains a magic number: for (int y = 0; y < _size.Y; y++) {  	for (int x = 0; x < _size.X; x++) {  		var xf = (x / (float)_size.X) * noiseSize;  		var yf = (y / (float)_size.Y) * noiseSize;  		var total = 0.0f;  		for (int i = 0; i < octaves; i++) {  			var freq = MathF.Pow (2.0f' i);  			var amp = MathF.Pow (persistence' i);  			var tx = xf * freq;  			var ty = yf * freq;  			var txi = (int)tx;  			var tyi = (int)ty;  			var fracX = tx - txi;  			var fracY = ty - tyi;  			var v1 = MathF.Noise (txi + tyi * 57 + seed);  			var v2 = MathF.Noise (txi + 1 + tyi * 57 + seed);  			var v3 = MathF.Noise (txi + (tyi + 1) * 57 + seed);  			var v4 = MathF.Noise (txi + 1 + (tyi + 1) * 57 + seed);  			var i1 = MathF.CosInterpolate (v1' v2' fracX);  			var i2 = MathF.CosInterpolate (v3' v4' fracX);  			total += MathF.CosInterpolate (i1' i2' fracY) * amp;  		}  		var b = (int)(128 + total * 128.0f);  		if (b < 0)  			b = 0;  		if (b > 255)  			b = 255;  		dr.Data.Seek (y * dr.Pitch + x' SeekOrigin.Begin);  		dr.Data.Write ((byte)b);  		_heightMap [x + y * _size.X] = (b / 255.0f) * _maxHeight;  	}  }  
Magic Number,Core,HeightMap,C:\repos\ericrrichards_rts\Core\HeightMap.cs,CreateRandomHeightMap,The following statement contains a magic number: for (int y = 0; y < _size.Y; y++) {  	for (int x = 0; x < _size.X; x++) {  		var xf = (x / (float)_size.X) * noiseSize;  		var yf = (y / (float)_size.Y) * noiseSize;  		var total = 0.0f;  		for (int i = 0; i < octaves; i++) {  			var freq = MathF.Pow (2.0f' i);  			var amp = MathF.Pow (persistence' i);  			var tx = xf * freq;  			var ty = yf * freq;  			var txi = (int)tx;  			var tyi = (int)ty;  			var fracX = tx - txi;  			var fracY = ty - tyi;  			var v1 = MathF.Noise (txi + tyi * 57 + seed);  			var v2 = MathF.Noise (txi + 1 + tyi * 57 + seed);  			var v3 = MathF.Noise (txi + (tyi + 1) * 57 + seed);  			var v4 = MathF.Noise (txi + 1 + (tyi + 1) * 57 + seed);  			var i1 = MathF.CosInterpolate (v1' v2' fracX);  			var i2 = MathF.CosInterpolate (v3' v4' fracX);  			total += MathF.CosInterpolate (i1' i2' fracY) * amp;  		}  		var b = (int)(128 + total * 128.0f);  		if (b < 0)  			b = 0;  		if (b > 255)  			b = 255;  		dr.Data.Seek (y * dr.Pitch + x' SeekOrigin.Begin);  		dr.Data.Write ((byte)b);  		_heightMap [x + y * _size.X] = (b / 255.0f) * _maxHeight;  	}  }  
Magic Number,Core,HeightMap,C:\repos\ericrrichards_rts\Core\HeightMap.cs,CreateRandomHeightMap,The following statement contains a magic number: for (int x = 0; x < _size.X; x++) {  	var xf = (x / (float)_size.X) * noiseSize;  	var yf = (y / (float)_size.Y) * noiseSize;  	var total = 0.0f;  	for (int i = 0; i < octaves; i++) {  		var freq = MathF.Pow (2.0f' i);  		var amp = MathF.Pow (persistence' i);  		var tx = xf * freq;  		var ty = yf * freq;  		var txi = (int)tx;  		var tyi = (int)ty;  		var fracX = tx - txi;  		var fracY = ty - tyi;  		var v1 = MathF.Noise (txi + tyi * 57 + seed);  		var v2 = MathF.Noise (txi + 1 + tyi * 57 + seed);  		var v3 = MathF.Noise (txi + (tyi + 1) * 57 + seed);  		var v4 = MathF.Noise (txi + 1 + (tyi + 1) * 57 + seed);  		var i1 = MathF.CosInterpolate (v1' v2' fracX);  		var i2 = MathF.CosInterpolate (v3' v4' fracX);  		total += MathF.CosInterpolate (i1' i2' fracY) * amp;  	}  	var b = (int)(128 + total * 128.0f);  	if (b < 0)  		b = 0;  	if (b > 255)  		b = 255;  	dr.Data.Seek (y * dr.Pitch + x' SeekOrigin.Begin);  	dr.Data.Write ((byte)b);  	_heightMap [x + y * _size.X] = (b / 255.0f) * _maxHeight;  }  
Magic Number,Core,HeightMap,C:\repos\ericrrichards_rts\Core\HeightMap.cs,CreateRandomHeightMap,The following statement contains a magic number: for (int x = 0; x < _size.X; x++) {  	var xf = (x / (float)_size.X) * noiseSize;  	var yf = (y / (float)_size.Y) * noiseSize;  	var total = 0.0f;  	for (int i = 0; i < octaves; i++) {  		var freq = MathF.Pow (2.0f' i);  		var amp = MathF.Pow (persistence' i);  		var tx = xf * freq;  		var ty = yf * freq;  		var txi = (int)tx;  		var tyi = (int)ty;  		var fracX = tx - txi;  		var fracY = ty - tyi;  		var v1 = MathF.Noise (txi + tyi * 57 + seed);  		var v2 = MathF.Noise (txi + 1 + tyi * 57 + seed);  		var v3 = MathF.Noise (txi + (tyi + 1) * 57 + seed);  		var v4 = MathF.Noise (txi + 1 + (tyi + 1) * 57 + seed);  		var i1 = MathF.CosInterpolate (v1' v2' fracX);  		var i2 = MathF.CosInterpolate (v3' v4' fracX);  		total += MathF.CosInterpolate (i1' i2' fracY) * amp;  	}  	var b = (int)(128 + total * 128.0f);  	if (b < 0)  		b = 0;  	if (b > 255)  		b = 255;  	dr.Data.Seek (y * dr.Pitch + x' SeekOrigin.Begin);  	dr.Data.Write ((byte)b);  	_heightMap [x + y * _size.X] = (b / 255.0f) * _maxHeight;  }  
Magic Number,Core,HeightMap,C:\repos\ericrrichards_rts\Core\HeightMap.cs,CreateRandomHeightMap,The following statement contains a magic number: for (int x = 0; x < _size.X; x++) {  	var xf = (x / (float)_size.X) * noiseSize;  	var yf = (y / (float)_size.Y) * noiseSize;  	var total = 0.0f;  	for (int i = 0; i < octaves; i++) {  		var freq = MathF.Pow (2.0f' i);  		var amp = MathF.Pow (persistence' i);  		var tx = xf * freq;  		var ty = yf * freq;  		var txi = (int)tx;  		var tyi = (int)ty;  		var fracX = tx - txi;  		var fracY = ty - tyi;  		var v1 = MathF.Noise (txi + tyi * 57 + seed);  		var v2 = MathF.Noise (txi + 1 + tyi * 57 + seed);  		var v3 = MathF.Noise (txi + (tyi + 1) * 57 + seed);  		var v4 = MathF.Noise (txi + 1 + (tyi + 1) * 57 + seed);  		var i1 = MathF.CosInterpolate (v1' v2' fracX);  		var i2 = MathF.CosInterpolate (v3' v4' fracX);  		total += MathF.CosInterpolate (i1' i2' fracY) * amp;  	}  	var b = (int)(128 + total * 128.0f);  	if (b < 0)  		b = 0;  	if (b > 255)  		b = 255;  	dr.Data.Seek (y * dr.Pitch + x' SeekOrigin.Begin);  	dr.Data.Write ((byte)b);  	_heightMap [x + y * _size.X] = (b / 255.0f) * _maxHeight;  }  
Magic Number,Core,HeightMap,C:\repos\ericrrichards_rts\Core\HeightMap.cs,CreateRandomHeightMap,The following statement contains a magic number: for (int x = 0; x < _size.X; x++) {  	var xf = (x / (float)_size.X) * noiseSize;  	var yf = (y / (float)_size.Y) * noiseSize;  	var total = 0.0f;  	for (int i = 0; i < octaves; i++) {  		var freq = MathF.Pow (2.0f' i);  		var amp = MathF.Pow (persistence' i);  		var tx = xf * freq;  		var ty = yf * freq;  		var txi = (int)tx;  		var tyi = (int)ty;  		var fracX = tx - txi;  		var fracY = ty - tyi;  		var v1 = MathF.Noise (txi + tyi * 57 + seed);  		var v2 = MathF.Noise (txi + 1 + tyi * 57 + seed);  		var v3 = MathF.Noise (txi + (tyi + 1) * 57 + seed);  		var v4 = MathF.Noise (txi + 1 + (tyi + 1) * 57 + seed);  		var i1 = MathF.CosInterpolate (v1' v2' fracX);  		var i2 = MathF.CosInterpolate (v3' v4' fracX);  		total += MathF.CosInterpolate (i1' i2' fracY) * amp;  	}  	var b = (int)(128 + total * 128.0f);  	if (b < 0)  		b = 0;  	if (b > 255)  		b = 255;  	dr.Data.Seek (y * dr.Pitch + x' SeekOrigin.Begin);  	dr.Data.Write ((byte)b);  	_heightMap [x + y * _size.X] = (b / 255.0f) * _maxHeight;  }  
Magic Number,Core,HeightMap,C:\repos\ericrrichards_rts\Core\HeightMap.cs,CreateRandomHeightMap,The following statement contains a magic number: for (int x = 0; x < _size.X; x++) {  	var xf = (x / (float)_size.X) * noiseSize;  	var yf = (y / (float)_size.Y) * noiseSize;  	var total = 0.0f;  	for (int i = 0; i < octaves; i++) {  		var freq = MathF.Pow (2.0f' i);  		var amp = MathF.Pow (persistence' i);  		var tx = xf * freq;  		var ty = yf * freq;  		var txi = (int)tx;  		var tyi = (int)ty;  		var fracX = tx - txi;  		var fracY = ty - tyi;  		var v1 = MathF.Noise (txi + tyi * 57 + seed);  		var v2 = MathF.Noise (txi + 1 + tyi * 57 + seed);  		var v3 = MathF.Noise (txi + (tyi + 1) * 57 + seed);  		var v4 = MathF.Noise (txi + 1 + (tyi + 1) * 57 + seed);  		var i1 = MathF.CosInterpolate (v1' v2' fracX);  		var i2 = MathF.CosInterpolate (v3' v4' fracX);  		total += MathF.CosInterpolate (i1' i2' fracY) * amp;  	}  	var b = (int)(128 + total * 128.0f);  	if (b < 0)  		b = 0;  	if (b > 255)  		b = 255;  	dr.Data.Seek (y * dr.Pitch + x' SeekOrigin.Begin);  	dr.Data.Write ((byte)b);  	_heightMap [x + y * _size.X] = (b / 255.0f) * _maxHeight;  }  
Magic Number,Core,HeightMap,C:\repos\ericrrichards_rts\Core\HeightMap.cs,CreateRandomHeightMap,The following statement contains a magic number: for (int x = 0; x < _size.X; x++) {  	var xf = (x / (float)_size.X) * noiseSize;  	var yf = (y / (float)_size.Y) * noiseSize;  	var total = 0.0f;  	for (int i = 0; i < octaves; i++) {  		var freq = MathF.Pow (2.0f' i);  		var amp = MathF.Pow (persistence' i);  		var tx = xf * freq;  		var ty = yf * freq;  		var txi = (int)tx;  		var tyi = (int)ty;  		var fracX = tx - txi;  		var fracY = ty - tyi;  		var v1 = MathF.Noise (txi + tyi * 57 + seed);  		var v2 = MathF.Noise (txi + 1 + tyi * 57 + seed);  		var v3 = MathF.Noise (txi + (tyi + 1) * 57 + seed);  		var v4 = MathF.Noise (txi + 1 + (tyi + 1) * 57 + seed);  		var i1 = MathF.CosInterpolate (v1' v2' fracX);  		var i2 = MathF.CosInterpolate (v3' v4' fracX);  		total += MathF.CosInterpolate (i1' i2' fracY) * amp;  	}  	var b = (int)(128 + total * 128.0f);  	if (b < 0)  		b = 0;  	if (b > 255)  		b = 255;  	dr.Data.Seek (y * dr.Pitch + x' SeekOrigin.Begin);  	dr.Data.Write ((byte)b);  	_heightMap [x + y * _size.X] = (b / 255.0f) * _maxHeight;  }  
Magic Number,Core,HeightMap,C:\repos\ericrrichards_rts\Core\HeightMap.cs,CreateRandomHeightMap,The following statement contains a magic number: for (int x = 0; x < _size.X; x++) {  	var xf = (x / (float)_size.X) * noiseSize;  	var yf = (y / (float)_size.Y) * noiseSize;  	var total = 0.0f;  	for (int i = 0; i < octaves; i++) {  		var freq = MathF.Pow (2.0f' i);  		var amp = MathF.Pow (persistence' i);  		var tx = xf * freq;  		var ty = yf * freq;  		var txi = (int)tx;  		var tyi = (int)ty;  		var fracX = tx - txi;  		var fracY = ty - tyi;  		var v1 = MathF.Noise (txi + tyi * 57 + seed);  		var v2 = MathF.Noise (txi + 1 + tyi * 57 + seed);  		var v3 = MathF.Noise (txi + (tyi + 1) * 57 + seed);  		var v4 = MathF.Noise (txi + 1 + (tyi + 1) * 57 + seed);  		var i1 = MathF.CosInterpolate (v1' v2' fracX);  		var i2 = MathF.CosInterpolate (v3' v4' fracX);  		total += MathF.CosInterpolate (i1' i2' fracY) * amp;  	}  	var b = (int)(128 + total * 128.0f);  	if (b < 0)  		b = 0;  	if (b > 255)  		b = 255;  	dr.Data.Seek (y * dr.Pitch + x' SeekOrigin.Begin);  	dr.Data.Write ((byte)b);  	_heightMap [x + y * _size.X] = (b / 255.0f) * _maxHeight;  }  
Magic Number,Core,HeightMap,C:\repos\ericrrichards_rts\Core\HeightMap.cs,CreateRandomHeightMap,The following statement contains a magic number: for (int i = 0; i < octaves; i++) {  	var freq = MathF.Pow (2.0f' i);  	var amp = MathF.Pow (persistence' i);  	var tx = xf * freq;  	var ty = yf * freq;  	var txi = (int)tx;  	var tyi = (int)ty;  	var fracX = tx - txi;  	var fracY = ty - tyi;  	var v1 = MathF.Noise (txi + tyi * 57 + seed);  	var v2 = MathF.Noise (txi + 1 + tyi * 57 + seed);  	var v3 = MathF.Noise (txi + (tyi + 1) * 57 + seed);  	var v4 = MathF.Noise (txi + 1 + (tyi + 1) * 57 + seed);  	var i1 = MathF.CosInterpolate (v1' v2' fracX);  	var i2 = MathF.CosInterpolate (v3' v4' fracX);  	total += MathF.CosInterpolate (i1' i2' fracY) * amp;  }  
Magic Number,Core,HeightMap,C:\repos\ericrrichards_rts\Core\HeightMap.cs,CreateRandomHeightMap,The following statement contains a magic number: for (int i = 0; i < octaves; i++) {  	var freq = MathF.Pow (2.0f' i);  	var amp = MathF.Pow (persistence' i);  	var tx = xf * freq;  	var ty = yf * freq;  	var txi = (int)tx;  	var tyi = (int)ty;  	var fracX = tx - txi;  	var fracY = ty - tyi;  	var v1 = MathF.Noise (txi + tyi * 57 + seed);  	var v2 = MathF.Noise (txi + 1 + tyi * 57 + seed);  	var v3 = MathF.Noise (txi + (tyi + 1) * 57 + seed);  	var v4 = MathF.Noise (txi + 1 + (tyi + 1) * 57 + seed);  	var i1 = MathF.CosInterpolate (v1' v2' fracX);  	var i2 = MathF.CosInterpolate (v3' v4' fracX);  	total += MathF.CosInterpolate (i1' i2' fracY) * amp;  }  
Magic Number,Core,HeightMap,C:\repos\ericrrichards_rts\Core\HeightMap.cs,CreateRandomHeightMap,The following statement contains a magic number: for (int i = 0; i < octaves; i++) {  	var freq = MathF.Pow (2.0f' i);  	var amp = MathF.Pow (persistence' i);  	var tx = xf * freq;  	var ty = yf * freq;  	var txi = (int)tx;  	var tyi = (int)ty;  	var fracX = tx - txi;  	var fracY = ty - tyi;  	var v1 = MathF.Noise (txi + tyi * 57 + seed);  	var v2 = MathF.Noise (txi + 1 + tyi * 57 + seed);  	var v3 = MathF.Noise (txi + (tyi + 1) * 57 + seed);  	var v4 = MathF.Noise (txi + 1 + (tyi + 1) * 57 + seed);  	var i1 = MathF.CosInterpolate (v1' v2' fracX);  	var i2 = MathF.CosInterpolate (v3' v4' fracX);  	total += MathF.CosInterpolate (i1' i2' fracY) * amp;  }  
Magic Number,Core,HeightMap,C:\repos\ericrrichards_rts\Core\HeightMap.cs,CreateRandomHeightMap,The following statement contains a magic number: for (int i = 0; i < octaves; i++) {  	var freq = MathF.Pow (2.0f' i);  	var amp = MathF.Pow (persistence' i);  	var tx = xf * freq;  	var ty = yf * freq;  	var txi = (int)tx;  	var tyi = (int)ty;  	var fracX = tx - txi;  	var fracY = ty - tyi;  	var v1 = MathF.Noise (txi + tyi * 57 + seed);  	var v2 = MathF.Noise (txi + 1 + tyi * 57 + seed);  	var v3 = MathF.Noise (txi + (tyi + 1) * 57 + seed);  	var v4 = MathF.Noise (txi + 1 + (tyi + 1) * 57 + seed);  	var i1 = MathF.CosInterpolate (v1' v2' fracX);  	var i2 = MathF.CosInterpolate (v3' v4' fracX);  	total += MathF.CosInterpolate (i1' i2' fracY) * amp;  }  
Magic Number,Core,HeightMap,C:\repos\ericrrichards_rts\Core\HeightMap.cs,CreateRandomHeightMap,The following statement contains a magic number: if (b > 255)  	b = 255;  
Magic Number,Core,HeightMap,C:\repos\ericrrichards_rts\Core\HeightMap.cs,CreateRandomHeightMap,The following statement contains a magic number: if (b > 255)  	b = 255;  
Magic Number,Core,HeightMap,C:\repos\ericrrichards_rts\Core\HeightMap.cs,CreateRandomHeightMap,The following statement contains a magic number: b = 255;  
Magic Number,Core,HeightMap,C:\repos\ericrrichards_rts\Core\HeightMap.cs,SmoothTerrain,The following statement contains a magic number: Thread.Sleep (500);  
Magic Number,Core,HeightMapEditorSelection,C:\repos\ericrrichards_rts\Core\HeightMapEditorSelection.cs,HeightMapEditorSelection,The following statement contains a magic number: _selectRect = new Rectangle (hm.Size.X / 2 - 5' hm.Size.Y / 2 - 5' 10' 10);  
Magic Number,Core,HeightMapEditorSelection,C:\repos\ericrrichards_rts\Core\HeightMapEditorSelection.cs,HeightMapEditorSelection,The following statement contains a magic number: _selectRect = new Rectangle (hm.Size.X / 2 - 5' hm.Size.Y / 2 - 5' 10' 10);  
Magic Number,Core,HeightMapEditorSelection,C:\repos\ericrrichards_rts\Core\HeightMapEditorSelection.cs,HeightMapEditorSelection,The following statement contains a magic number: _selectRect = new Rectangle (hm.Size.X / 2 - 5' hm.Size.Y / 2 - 5' 10' 10);  
Magic Number,Core,HeightMapEditorSelection,C:\repos\ericrrichards_rts\Core\HeightMapEditorSelection.cs,HeightMapEditorSelection,The following statement contains a magic number: _selectRect = new Rectangle (hm.Size.X / 2 - 5' hm.Size.Y / 2 - 5' 10' 10);  
Magic Number,Core,HeightMapEditorSelection,C:\repos\ericrrichards_rts\Core\HeightMapEditorSelection.cs,HeightMapEditorSelection,The following statement contains a magic number: _selectRect = new Rectangle (hm.Size.X / 2 - 5' hm.Size.Y / 2 - 5' 10' 10);  
Magic Number,Core,HeightMapEditorSelection,C:\repos\ericrrichards_rts\Core\HeightMapEditorSelection.cs,HeightMapEditorSelection,The following statement contains a magic number: _selectRect = new Rectangle (hm.Size.X / 2 - 5' hm.Size.Y / 2 - 5' 10' 10);  
Magic Number,Core,HeightMapEditorSelection,C:\repos\ericrrichards_rts\Core\HeightMapEditorSelection.cs,MoveRect,The following statement contains a magic number: Thread.Sleep (100);  
Magic Number,Core,MathF,C:\repos\ericrrichards_rts\Core\MathF.cs,Noise,The following statement contains a magic number: x = (x << 13) ^ x;  
Magic Number,Core,MathF,C:\repos\ericrrichards_rts\Core\MathF.cs,Noise,The following statement contains a magic number: return (1.0f - ((x * (x * x * 15731 + 789221) + 1376312589) & 0x7fffffff) / 1073741824.0f);  
Magic Number,Core,MathF,C:\repos\ericrrichards_rts\Core\MathF.cs,Noise,The following statement contains a magic number: return (1.0f - ((x * (x * x * 15731 + 789221) + 1376312589) & 0x7fffffff) / 1073741824.0f);  
Magic Number,Core,MathF,C:\repos\ericrrichards_rts\Core\MathF.cs,Noise,The following statement contains a magic number: return (1.0f - ((x * (x * x * 15731 + 789221) + 1376312589) & 0x7fffffff) / 1073741824.0f);  
Magic Number,Core,Point,C:\repos\ericrrichards_rts\Core\Point.cs,GetHashCode,The following statement contains a magic number: unchecked {  	return (X * 397) ^ Y;  }  
Magic Number,Core,Point,C:\repos\ericrrichards_rts\Core\Point.cs,GetHashCode,The following statement contains a magic number: return (X * 397) ^ Y;  
