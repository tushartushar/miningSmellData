Implementation smell,Namespace,Class,File,Method,Description
Complex Method,AssemblyData,Utils,D:\research\architectureSmells\repos\0xd4d_de4dot\AssemblyData\Utils.cs,GetDelegateType,Cyclomatic complexity of the method is 42
Complex Method,AssemblyData.methodsrewriter,AssemblyResolver,D:\research\architectureSmells\repos\0xd4d_de4dot\AssemblyData\methodsrewriter\AssemblyResolver.cs,GetTypeResolver,Cyclomatic complexity of the method is 8
Complex Method,AssemblyData.methodsrewriter,CodeGenerator,D:\research\architectureSmells\repos\0xd4d_de4dot\AssemblyData\methodsrewriter\CodeGenerator.cs,UpdateExceptionHandlers,Cyclomatic complexity of the method is 8
Complex Method,AssemblyData.methodsrewriter,CodeGenerator,D:\research\architectureSmells\repos\0xd4d_de4dot\AssemblyData\methodsrewriter\CodeGenerator.cs,WriteSpecialInstr,Cyclomatic complexity of the method is 8
Complex Method,AssemblyData.methodsrewriter,CodeGenerator,D:\research\architectureSmells\repos\0xd4d_de4dot\AssemblyData\methodsrewriter\CodeGenerator.cs,WriteInstr,Cyclomatic complexity of the method is 18
Complex Method,AssemblyData.methodsrewriter,MethodsRewriter,D:\research\architectureSmells\repos\0xd4d_de4dot\AssemblyData\methodsrewriter\MethodsRewriter.cs,Update,Cyclomatic complexity of the method is 16
Complex Method,AssemblyData.methodsrewriter,Resolver,D:\research\architectureSmells\repos\0xd4d_de4dot\AssemblyData\methodsrewriter\Resolver.cs,FixType,Cyclomatic complexity of the method is 12
Long Statement,AssemblyData,GenericService,D:\research\architectureSmells\repos\0xd4d_de4dot\AssemblyData\GenericService.cs,GetCreateUserServiceMethod,The length of the statement  "			foreach (var method in createServiceType.GetMethods(BindingFlags.DeclaredOnly | BindingFlags.Static | BindingFlags.Public | BindingFlags.NonPublic)) { " is 150.
Long Statement,AssemblyData.methodsrewriter,AssemblyResolver,D:\research\architectureSmells\repos\0xd4d_de4dot\AssemblyData\methodsrewriter\AssemblyResolver.cs,InitGlobalFields,The length of the statement  "			var flags = BindingFlags.DeclaredOnly | BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Static | BindingFlags.Instance; " is 131.
Long Statement,AssemblyData.methodsrewriter,AssemblyResolver,D:\research\architectureSmells\repos\0xd4d_de4dot\AssemblyData\methodsrewriter\AssemblyResolver.cs,InitGlobalMethods,The length of the statement  "			var flags = BindingFlags.DeclaredOnly | BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Static | BindingFlags.Instance; " is 131.
Long Statement,AssemblyData.methodsrewriter,CodeGenerator,D:\research\architectureSmells\repos\0xd4d_de4dot\AssemblyData\methodsrewriter\CodeGenerator.cs,WriteSpecialInstr,The length of the statement  "				flags = BindingFlags.DeclaredOnly | BindingFlags.Instance | BindingFlags.Static | BindingFlags.NonPublic | BindingFlags.Public; " is 127.
Long Statement,AssemblyData.methodsrewriter,MethodsRewriter,D:\research\architectureSmells\repos\0xd4d_de4dot\AssemblyData\methodsrewriter\MethodsRewriter.cs,CreateDelegate,The length of the statement  "			var dm = new DynamicMethod(newMethodInfo.rewrittenMethodName' typeof(object)' new Type[] { GetType()' typeof(object[]) }' newMethodInfo.oldMethod.Module' true); " is 160.
Long Statement,AssemblyData.methodsrewriter,MethodsRewriter,D:\research\architectureSmells\repos\0xd4d_de4dot\AssemblyData\methodsrewriter\MethodsRewriter.cs,CreateDelegate,The length of the statement  "			ilg.Emit(ROpCodes.Call' GetType().GetMethod("RtGetDelegateInstance"' BindingFlags.DeclaredOnly | BindingFlags.NonPublic | BindingFlags.Instance)); " is 146.
Long Statement,AssemblyData.methodsrewriter,MethodsRewriter,D:\research\architectureSmells\repos\0xd4d_de4dot\AssemblyData\methodsrewriter\MethodsRewriter.cs,CreateMethod,The length of the statement  "			var newMethodInfo = new NewMethodInfo(realMethod' newMethodInfos.Count' GetDelegateMethodName(realMethod)' GetDelegateMethodName(realMethod)); " is 142.
Long Statement,AssemblyData.methodsrewriter,MethodsRewriter,D:\research\architectureSmells\repos\0xd4d_de4dot\AssemblyData\methodsrewriter\MethodsRewriter.cs,GetStackTraceStackFramesField,The length of the statement  "			return ResolverUtils.GetFieldThrow(typeof(StackTrace)' typeof(StackFrame[])' flags' "Could not find StackTrace's frames (StackFrame[]) field"); " is 143.
Long Statement,AssemblyData.methodsrewriter,MethodsRewriter,D:\research\architectureSmells\repos\0xd4d_de4dot\AssemblyData\methodsrewriter\MethodsRewriter.cs,GetStackFrameMethodField,The length of the statement  "			return ResolverUtils.GetFieldThrow(typeof(StackFrame)' typeof(MethodBase)' flags' "Could not find StackFrame's method (MethodBase) field"); " is 139.
Long Statement,AssemblyData.methodsrewriter,MModule,D:\research\architectureSmells\repos\0xd4d_de4dot\AssemblyData\methodsrewriter\MModule.cs,InitGlobalMethods,The length of the statement  "			var flags = BindingFlags.DeclaredOnly | BindingFlags.Instance | BindingFlags.Static | BindingFlags.Public | BindingFlags.NonPublic; " is 131.
Long Statement,AssemblyData.methodsrewriter,MModule,D:\research\architectureSmells\repos\0xd4d_de4dot\AssemblyData\methodsrewriter\MModule.cs,InitGlobalFields,The length of the statement  "			var flags = BindingFlags.DeclaredOnly | BindingFlags.Instance | BindingFlags.Static | BindingFlags.Public | BindingFlags.NonPublic; " is 131.
Long Statement,AssemblyData.methodsrewriter,MType,D:\research\architectureSmells\repos\0xd4d_de4dot\AssemblyData\methodsrewriter\MType.cs,InitMethods,The length of the statement  "			var flags = BindingFlags.DeclaredOnly | BindingFlags.Instance | BindingFlags.Static | BindingFlags.Public | BindingFlags.NonPublic; " is 131.
Long Statement,AssemblyData.methodsrewriter,MType,D:\research\architectureSmells\repos\0xd4d_de4dot\AssemblyData\methodsrewriter\MType.cs,InitFields,The length of the statement  "			var flags = BindingFlags.DeclaredOnly | BindingFlags.Instance | BindingFlags.Static | BindingFlags.Public | BindingFlags.NonPublic; " is 131.
Long Statement,AssemblyData.methodsrewriter,Resolver,D:\research\architectureSmells\repos\0xd4d_de4dot\AssemblyData\methodsrewriter\Resolver.cs,Resolve,The length of the statement  "			throw new ApplicationException($"Could not resolve field {fieldRef} ({fieldRef.MDToken.Raw:X8}) in assembly {resolver}"); " is 121.
Long Statement,AssemblyData.methodsrewriter,Resolver,D:\research\architectureSmells\repos\0xd4d_de4dot\AssemblyData\methodsrewriter\Resolver.cs,Resolve,The length of the statement  "			throw new ApplicationException($"Could not resolve method {methodRef} ({methodRef.MDToken.Raw:X8}) in assembly {resolver}"); " is 124.
Long Statement,AssemblyData.methodsrewriter,TypeInstanceResolver,D:\research\architectureSmells\repos\0xd4d_de4dot\AssemblyData\methodsrewriter\TypeInstanceResolver.cs,InitFields,The length of the statement  "			var flags = BindingFlags.DeclaredOnly | BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Static | BindingFlags.Instance; " is 131.
Long Statement,AssemblyData.methodsrewriter,TypeInstanceResolver,D:\research\architectureSmells\repos\0xd4d_de4dot\AssemblyData\methodsrewriter\TypeInstanceResolver.cs,InitMethods,The length of the statement  "			var flags = BindingFlags.DeclaredOnly | BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Static | BindingFlags.Instance; " is 131.
Empty Catch Block,AssemblyData,AssemblyResolver,D:\research\architectureSmells\repos\0xd4d_de4dot\AssemblyData\AssemblyResolver.cs,AssemblyResolve,The method has an empty catch block.
Empty Catch Block,AssemblyData,AssemblyResolver,D:\research\architectureSmells\repos\0xd4d_de4dot\AssemblyData\AssemblyResolver.cs,AssemblyResolve,The method has an empty catch block.
Empty Catch Block,AssemblyData,AssemblyResolver,D:\research\architectureSmells\repos\0xd4d_de4dot\AssemblyData\AssemblyResolver.cs,AssemblyResolve,The method has an empty catch block.
Empty Catch Block,AssemblyData,AssemblyResolver,D:\research\architectureSmells\repos\0xd4d_de4dot\AssemblyData\AssemblyResolver.cs,AssemblyResolve,The method has an empty catch block.
Empty Catch Block,AssemblyData,AssemblyResolver,D:\research\architectureSmells\repos\0xd4d_de4dot\AssemblyData\AssemblyResolver.cs,AssemblyResolve,The method has an empty catch block.
Empty Catch Block,AssemblyData,AssemblyResolver,D:\research\architectureSmells\repos\0xd4d_de4dot\AssemblyData\AssemblyResolver.cs,AssemblyResolve,The method has an empty catch block.
Empty Catch Block,AssemblyData,AssemblyResolver,D:\research\architectureSmells\repos\0xd4d_de4dot\AssemblyData\AssemblyResolver.cs,AddConfigFile,The method has an empty catch block.
Empty Catch Block,AssemblyData,AssemblyResolver,D:\research\architectureSmells\repos\0xd4d_de4dot\AssemblyData\AssemblyResolver.cs,AddConfigFile,The method has an empty catch block.
Magic Number,AssemblyData,Utils,D:\research\architectureSmells\repos\0xd4d_de4dot\AssemblyData\Utils.cs,GetDelegateType,The following statement contains a magic number: switch (types.Length) {  				case 0: return typeof(Action).MakeGenericType(types);  				case 1: return typeof(Action<>).MakeGenericType(types);  				case 2: return typeof(Action<'>).MakeGenericType(types);  				case 3: return typeof(Action<''>).MakeGenericType(types);  				case 4: return typeof(Action<'''>).MakeGenericType(types);  				case 5: return typeof(Action<''''>).MakeGenericType(types);  				case 6: return typeof(Action<'''''>).MakeGenericType(types);  				case 7: return typeof(Action<''''''>).MakeGenericType(types);  				case 8: return typeof(Action<'''''''>).MakeGenericType(types);  				case 9: return typeof(Action<''''''''>).MakeGenericType(types);  				case 10: return typeof(Action<'''''''''>).MakeGenericType(types);  				case 11: return typeof(Action<''''''''''>).MakeGenericType(types);  				case 12: return typeof(Action<'''''''''''>).MakeGenericType(types);  				case 13: return typeof(Action<''''''''''''>).MakeGenericType(types);  				case 14: return typeof(Action<'''''''''''''>).MakeGenericType(types);  				case 15: return typeof(Action<''''''''''''''>).MakeGenericType(types);  				case 16: return typeof(Action<'''''''''''''''>).MakeGenericType(types);  				case 17: return typeof(Action<''''''''''''''''>).MakeGenericType(types);  				case 18: return typeof(Action<'''''''''''''''''>).MakeGenericType(types);  				case 19: return typeof(Action<''''''''''''''''''>).MakeGenericType(types);  				default:  					throw new ApplicationException($"Too many delegate type arguments: {types.Length}");  				}
Magic Number,AssemblyData,Utils,D:\research\architectureSmells\repos\0xd4d_de4dot\AssemblyData\Utils.cs,GetDelegateType,The following statement contains a magic number: switch (types.Length) {  				case 0: return typeof(Action).MakeGenericType(types);  				case 1: return typeof(Action<>).MakeGenericType(types);  				case 2: return typeof(Action<'>).MakeGenericType(types);  				case 3: return typeof(Action<''>).MakeGenericType(types);  				case 4: return typeof(Action<'''>).MakeGenericType(types);  				case 5: return typeof(Action<''''>).MakeGenericType(types);  				case 6: return typeof(Action<'''''>).MakeGenericType(types);  				case 7: return typeof(Action<''''''>).MakeGenericType(types);  				case 8: return typeof(Action<'''''''>).MakeGenericType(types);  				case 9: return typeof(Action<''''''''>).MakeGenericType(types);  				case 10: return typeof(Action<'''''''''>).MakeGenericType(types);  				case 11: return typeof(Action<''''''''''>).MakeGenericType(types);  				case 12: return typeof(Action<'''''''''''>).MakeGenericType(types);  				case 13: return typeof(Action<''''''''''''>).MakeGenericType(types);  				case 14: return typeof(Action<'''''''''''''>).MakeGenericType(types);  				case 15: return typeof(Action<''''''''''''''>).MakeGenericType(types);  				case 16: return typeof(Action<'''''''''''''''>).MakeGenericType(types);  				case 17: return typeof(Action<''''''''''''''''>).MakeGenericType(types);  				case 18: return typeof(Action<'''''''''''''''''>).MakeGenericType(types);  				case 19: return typeof(Action<''''''''''''''''''>).MakeGenericType(types);  				default:  					throw new ApplicationException($"Too many delegate type arguments: {types.Length}");  				}
Magic Number,AssemblyData,Utils,D:\research\architectureSmells\repos\0xd4d_de4dot\AssemblyData\Utils.cs,GetDelegateType,The following statement contains a magic number: switch (types.Length) {  				case 0: return typeof(Action).MakeGenericType(types);  				case 1: return typeof(Action<>).MakeGenericType(types);  				case 2: return typeof(Action<'>).MakeGenericType(types);  				case 3: return typeof(Action<''>).MakeGenericType(types);  				case 4: return typeof(Action<'''>).MakeGenericType(types);  				case 5: return typeof(Action<''''>).MakeGenericType(types);  				case 6: return typeof(Action<'''''>).MakeGenericType(types);  				case 7: return typeof(Action<''''''>).MakeGenericType(types);  				case 8: return typeof(Action<'''''''>).MakeGenericType(types);  				case 9: return typeof(Action<''''''''>).MakeGenericType(types);  				case 10: return typeof(Action<'''''''''>).MakeGenericType(types);  				case 11: return typeof(Action<''''''''''>).MakeGenericType(types);  				case 12: return typeof(Action<'''''''''''>).MakeGenericType(types);  				case 13: return typeof(Action<''''''''''''>).MakeGenericType(types);  				case 14: return typeof(Action<'''''''''''''>).MakeGenericType(types);  				case 15: return typeof(Action<''''''''''''''>).MakeGenericType(types);  				case 16: return typeof(Action<'''''''''''''''>).MakeGenericType(types);  				case 17: return typeof(Action<''''''''''''''''>).MakeGenericType(types);  				case 18: return typeof(Action<'''''''''''''''''>).MakeGenericType(types);  				case 19: return typeof(Action<''''''''''''''''''>).MakeGenericType(types);  				default:  					throw new ApplicationException($"Too many delegate type arguments: {types.Length}");  				}
Magic Number,AssemblyData,Utils,D:\research\architectureSmells\repos\0xd4d_de4dot\AssemblyData\Utils.cs,GetDelegateType,The following statement contains a magic number: switch (types.Length) {  				case 0: return typeof(Action).MakeGenericType(types);  				case 1: return typeof(Action<>).MakeGenericType(types);  				case 2: return typeof(Action<'>).MakeGenericType(types);  				case 3: return typeof(Action<''>).MakeGenericType(types);  				case 4: return typeof(Action<'''>).MakeGenericType(types);  				case 5: return typeof(Action<''''>).MakeGenericType(types);  				case 6: return typeof(Action<'''''>).MakeGenericType(types);  				case 7: return typeof(Action<''''''>).MakeGenericType(types);  				case 8: return typeof(Action<'''''''>).MakeGenericType(types);  				case 9: return typeof(Action<''''''''>).MakeGenericType(types);  				case 10: return typeof(Action<'''''''''>).MakeGenericType(types);  				case 11: return typeof(Action<''''''''''>).MakeGenericType(types);  				case 12: return typeof(Action<'''''''''''>).MakeGenericType(types);  				case 13: return typeof(Action<''''''''''''>).MakeGenericType(types);  				case 14: return typeof(Action<'''''''''''''>).MakeGenericType(types);  				case 15: return typeof(Action<''''''''''''''>).MakeGenericType(types);  				case 16: return typeof(Action<'''''''''''''''>).MakeGenericType(types);  				case 17: return typeof(Action<''''''''''''''''>).MakeGenericType(types);  				case 18: return typeof(Action<'''''''''''''''''>).MakeGenericType(types);  				case 19: return typeof(Action<''''''''''''''''''>).MakeGenericType(types);  				default:  					throw new ApplicationException($"Too many delegate type arguments: {types.Length}");  				}
Magic Number,AssemblyData,Utils,D:\research\architectureSmells\repos\0xd4d_de4dot\AssemblyData\Utils.cs,GetDelegateType,The following statement contains a magic number: switch (types.Length) {  				case 0: return typeof(Action).MakeGenericType(types);  				case 1: return typeof(Action<>).MakeGenericType(types);  				case 2: return typeof(Action<'>).MakeGenericType(types);  				case 3: return typeof(Action<''>).MakeGenericType(types);  				case 4: return typeof(Action<'''>).MakeGenericType(types);  				case 5: return typeof(Action<''''>).MakeGenericType(types);  				case 6: return typeof(Action<'''''>).MakeGenericType(types);  				case 7: return typeof(Action<''''''>).MakeGenericType(types);  				case 8: return typeof(Action<'''''''>).MakeGenericType(types);  				case 9: return typeof(Action<''''''''>).MakeGenericType(types);  				case 10: return typeof(Action<'''''''''>).MakeGenericType(types);  				case 11: return typeof(Action<''''''''''>).MakeGenericType(types);  				case 12: return typeof(Action<'''''''''''>).MakeGenericType(types);  				case 13: return typeof(Action<''''''''''''>).MakeGenericType(types);  				case 14: return typeof(Action<'''''''''''''>).MakeGenericType(types);  				case 15: return typeof(Action<''''''''''''''>).MakeGenericType(types);  				case 16: return typeof(Action<'''''''''''''''>).MakeGenericType(types);  				case 17: return typeof(Action<''''''''''''''''>).MakeGenericType(types);  				case 18: return typeof(Action<'''''''''''''''''>).MakeGenericType(types);  				case 19: return typeof(Action<''''''''''''''''''>).MakeGenericType(types);  				default:  					throw new ApplicationException($"Too many delegate type arguments: {types.Length}");  				}
Magic Number,AssemblyData,Utils,D:\research\architectureSmells\repos\0xd4d_de4dot\AssemblyData\Utils.cs,GetDelegateType,The following statement contains a magic number: switch (types.Length) {  				case 0: return typeof(Action).MakeGenericType(types);  				case 1: return typeof(Action<>).MakeGenericType(types);  				case 2: return typeof(Action<'>).MakeGenericType(types);  				case 3: return typeof(Action<''>).MakeGenericType(types);  				case 4: return typeof(Action<'''>).MakeGenericType(types);  				case 5: return typeof(Action<''''>).MakeGenericType(types);  				case 6: return typeof(Action<'''''>).MakeGenericType(types);  				case 7: return typeof(Action<''''''>).MakeGenericType(types);  				case 8: return typeof(Action<'''''''>).MakeGenericType(types);  				case 9: return typeof(Action<''''''''>).MakeGenericType(types);  				case 10: return typeof(Action<'''''''''>).MakeGenericType(types);  				case 11: return typeof(Action<''''''''''>).MakeGenericType(types);  				case 12: return typeof(Action<'''''''''''>).MakeGenericType(types);  				case 13: return typeof(Action<''''''''''''>).MakeGenericType(types);  				case 14: return typeof(Action<'''''''''''''>).MakeGenericType(types);  				case 15: return typeof(Action<''''''''''''''>).MakeGenericType(types);  				case 16: return typeof(Action<'''''''''''''''>).MakeGenericType(types);  				case 17: return typeof(Action<''''''''''''''''>).MakeGenericType(types);  				case 18: return typeof(Action<'''''''''''''''''>).MakeGenericType(types);  				case 19: return typeof(Action<''''''''''''''''''>).MakeGenericType(types);  				default:  					throw new ApplicationException($"Too many delegate type arguments: {types.Length}");  				}
Magic Number,AssemblyData,Utils,D:\research\architectureSmells\repos\0xd4d_de4dot\AssemblyData\Utils.cs,GetDelegateType,The following statement contains a magic number: switch (types.Length) {  				case 0: return typeof(Action).MakeGenericType(types);  				case 1: return typeof(Action<>).MakeGenericType(types);  				case 2: return typeof(Action<'>).MakeGenericType(types);  				case 3: return typeof(Action<''>).MakeGenericType(types);  				case 4: return typeof(Action<'''>).MakeGenericType(types);  				case 5: return typeof(Action<''''>).MakeGenericType(types);  				case 6: return typeof(Action<'''''>).MakeGenericType(types);  				case 7: return typeof(Action<''''''>).MakeGenericType(types);  				case 8: return typeof(Action<'''''''>).MakeGenericType(types);  				case 9: return typeof(Action<''''''''>).MakeGenericType(types);  				case 10: return typeof(Action<'''''''''>).MakeGenericType(types);  				case 11: return typeof(Action<''''''''''>).MakeGenericType(types);  				case 12: return typeof(Action<'''''''''''>).MakeGenericType(types);  				case 13: return typeof(Action<''''''''''''>).MakeGenericType(types);  				case 14: return typeof(Action<'''''''''''''>).MakeGenericType(types);  				case 15: return typeof(Action<''''''''''''''>).MakeGenericType(types);  				case 16: return typeof(Action<'''''''''''''''>).MakeGenericType(types);  				case 17: return typeof(Action<''''''''''''''''>).MakeGenericType(types);  				case 18: return typeof(Action<'''''''''''''''''>).MakeGenericType(types);  				case 19: return typeof(Action<''''''''''''''''''>).MakeGenericType(types);  				default:  					throw new ApplicationException($"Too many delegate type arguments: {types.Length}");  				}
Magic Number,AssemblyData,Utils,D:\research\architectureSmells\repos\0xd4d_de4dot\AssemblyData\Utils.cs,GetDelegateType,The following statement contains a magic number: switch (types.Length) {  				case 0: return typeof(Action).MakeGenericType(types);  				case 1: return typeof(Action<>).MakeGenericType(types);  				case 2: return typeof(Action<'>).MakeGenericType(types);  				case 3: return typeof(Action<''>).MakeGenericType(types);  				case 4: return typeof(Action<'''>).MakeGenericType(types);  				case 5: return typeof(Action<''''>).MakeGenericType(types);  				case 6: return typeof(Action<'''''>).MakeGenericType(types);  				case 7: return typeof(Action<''''''>).MakeGenericType(types);  				case 8: return typeof(Action<'''''''>).MakeGenericType(types);  				case 9: return typeof(Action<''''''''>).MakeGenericType(types);  				case 10: return typeof(Action<'''''''''>).MakeGenericType(types);  				case 11: return typeof(Action<''''''''''>).MakeGenericType(types);  				case 12: return typeof(Action<'''''''''''>).MakeGenericType(types);  				case 13: return typeof(Action<''''''''''''>).MakeGenericType(types);  				case 14: return typeof(Action<'''''''''''''>).MakeGenericType(types);  				case 15: return typeof(Action<''''''''''''''>).MakeGenericType(types);  				case 16: return typeof(Action<'''''''''''''''>).MakeGenericType(types);  				case 17: return typeof(Action<''''''''''''''''>).MakeGenericType(types);  				case 18: return typeof(Action<'''''''''''''''''>).MakeGenericType(types);  				case 19: return typeof(Action<''''''''''''''''''>).MakeGenericType(types);  				default:  					throw new ApplicationException($"Too many delegate type arguments: {types.Length}");  				}
Magic Number,AssemblyData,Utils,D:\research\architectureSmells\repos\0xd4d_de4dot\AssemblyData\Utils.cs,GetDelegateType,The following statement contains a magic number: switch (types.Length) {  				case 0: return typeof(Action).MakeGenericType(types);  				case 1: return typeof(Action<>).MakeGenericType(types);  				case 2: return typeof(Action<'>).MakeGenericType(types);  				case 3: return typeof(Action<''>).MakeGenericType(types);  				case 4: return typeof(Action<'''>).MakeGenericType(types);  				case 5: return typeof(Action<''''>).MakeGenericType(types);  				case 6: return typeof(Action<'''''>).MakeGenericType(types);  				case 7: return typeof(Action<''''''>).MakeGenericType(types);  				case 8: return typeof(Action<'''''''>).MakeGenericType(types);  				case 9: return typeof(Action<''''''''>).MakeGenericType(types);  				case 10: return typeof(Action<'''''''''>).MakeGenericType(types);  				case 11: return typeof(Action<''''''''''>).MakeGenericType(types);  				case 12: return typeof(Action<'''''''''''>).MakeGenericType(types);  				case 13: return typeof(Action<''''''''''''>).MakeGenericType(types);  				case 14: return typeof(Action<'''''''''''''>).MakeGenericType(types);  				case 15: return typeof(Action<''''''''''''''>).MakeGenericType(types);  				case 16: return typeof(Action<'''''''''''''''>).MakeGenericType(types);  				case 17: return typeof(Action<''''''''''''''''>).MakeGenericType(types);  				case 18: return typeof(Action<'''''''''''''''''>).MakeGenericType(types);  				case 19: return typeof(Action<''''''''''''''''''>).MakeGenericType(types);  				default:  					throw new ApplicationException($"Too many delegate type arguments: {types.Length}");  				}
Magic Number,AssemblyData,Utils,D:\research\architectureSmells\repos\0xd4d_de4dot\AssemblyData\Utils.cs,GetDelegateType,The following statement contains a magic number: switch (types.Length) {  				case 0: return typeof(Action).MakeGenericType(types);  				case 1: return typeof(Action<>).MakeGenericType(types);  				case 2: return typeof(Action<'>).MakeGenericType(types);  				case 3: return typeof(Action<''>).MakeGenericType(types);  				case 4: return typeof(Action<'''>).MakeGenericType(types);  				case 5: return typeof(Action<''''>).MakeGenericType(types);  				case 6: return typeof(Action<'''''>).MakeGenericType(types);  				case 7: return typeof(Action<''''''>).MakeGenericType(types);  				case 8: return typeof(Action<'''''''>).MakeGenericType(types);  				case 9: return typeof(Action<''''''''>).MakeGenericType(types);  				case 10: return typeof(Action<'''''''''>).MakeGenericType(types);  				case 11: return typeof(Action<''''''''''>).MakeGenericType(types);  				case 12: return typeof(Action<'''''''''''>).MakeGenericType(types);  				case 13: return typeof(Action<''''''''''''>).MakeGenericType(types);  				case 14: return typeof(Action<'''''''''''''>).MakeGenericType(types);  				case 15: return typeof(Action<''''''''''''''>).MakeGenericType(types);  				case 16: return typeof(Action<'''''''''''''''>).MakeGenericType(types);  				case 17: return typeof(Action<''''''''''''''''>).MakeGenericType(types);  				case 18: return typeof(Action<'''''''''''''''''>).MakeGenericType(types);  				case 19: return typeof(Action<''''''''''''''''''>).MakeGenericType(types);  				default:  					throw new ApplicationException($"Too many delegate type arguments: {types.Length}");  				}
Magic Number,AssemblyData,Utils,D:\research\architectureSmells\repos\0xd4d_de4dot\AssemblyData\Utils.cs,GetDelegateType,The following statement contains a magic number: switch (types.Length) {  				case 0: return typeof(Action).MakeGenericType(types);  				case 1: return typeof(Action<>).MakeGenericType(types);  				case 2: return typeof(Action<'>).MakeGenericType(types);  				case 3: return typeof(Action<''>).MakeGenericType(types);  				case 4: return typeof(Action<'''>).MakeGenericType(types);  				case 5: return typeof(Action<''''>).MakeGenericType(types);  				case 6: return typeof(Action<'''''>).MakeGenericType(types);  				case 7: return typeof(Action<''''''>).MakeGenericType(types);  				case 8: return typeof(Action<'''''''>).MakeGenericType(types);  				case 9: return typeof(Action<''''''''>).MakeGenericType(types);  				case 10: return typeof(Action<'''''''''>).MakeGenericType(types);  				case 11: return typeof(Action<''''''''''>).MakeGenericType(types);  				case 12: return typeof(Action<'''''''''''>).MakeGenericType(types);  				case 13: return typeof(Action<''''''''''''>).MakeGenericType(types);  				case 14: return typeof(Action<'''''''''''''>).MakeGenericType(types);  				case 15: return typeof(Action<''''''''''''''>).MakeGenericType(types);  				case 16: return typeof(Action<'''''''''''''''>).MakeGenericType(types);  				case 17: return typeof(Action<''''''''''''''''>).MakeGenericType(types);  				case 18: return typeof(Action<'''''''''''''''''>).MakeGenericType(types);  				case 19: return typeof(Action<''''''''''''''''''>).MakeGenericType(types);  				default:  					throw new ApplicationException($"Too many delegate type arguments: {types.Length}");  				}
Magic Number,AssemblyData,Utils,D:\research\architectureSmells\repos\0xd4d_de4dot\AssemblyData\Utils.cs,GetDelegateType,The following statement contains a magic number: switch (types.Length) {  				case 0: return typeof(Action).MakeGenericType(types);  				case 1: return typeof(Action<>).MakeGenericType(types);  				case 2: return typeof(Action<'>).MakeGenericType(types);  				case 3: return typeof(Action<''>).MakeGenericType(types);  				case 4: return typeof(Action<'''>).MakeGenericType(types);  				case 5: return typeof(Action<''''>).MakeGenericType(types);  				case 6: return typeof(Action<'''''>).MakeGenericType(types);  				case 7: return typeof(Action<''''''>).MakeGenericType(types);  				case 8: return typeof(Action<'''''''>).MakeGenericType(types);  				case 9: return typeof(Action<''''''''>).MakeGenericType(types);  				case 10: return typeof(Action<'''''''''>).MakeGenericType(types);  				case 11: return typeof(Action<''''''''''>).MakeGenericType(types);  				case 12: return typeof(Action<'''''''''''>).MakeGenericType(types);  				case 13: return typeof(Action<''''''''''''>).MakeGenericType(types);  				case 14: return typeof(Action<'''''''''''''>).MakeGenericType(types);  				case 15: return typeof(Action<''''''''''''''>).MakeGenericType(types);  				case 16: return typeof(Action<'''''''''''''''>).MakeGenericType(types);  				case 17: return typeof(Action<''''''''''''''''>).MakeGenericType(types);  				case 18: return typeof(Action<'''''''''''''''''>).MakeGenericType(types);  				case 19: return typeof(Action<''''''''''''''''''>).MakeGenericType(types);  				default:  					throw new ApplicationException($"Too many delegate type arguments: {types.Length}");  				}
Magic Number,AssemblyData,Utils,D:\research\architectureSmells\repos\0xd4d_de4dot\AssemblyData\Utils.cs,GetDelegateType,The following statement contains a magic number: switch (types.Length) {  				case 0: return typeof(Action).MakeGenericType(types);  				case 1: return typeof(Action<>).MakeGenericType(types);  				case 2: return typeof(Action<'>).MakeGenericType(types);  				case 3: return typeof(Action<''>).MakeGenericType(types);  				case 4: return typeof(Action<'''>).MakeGenericType(types);  				case 5: return typeof(Action<''''>).MakeGenericType(types);  				case 6: return typeof(Action<'''''>).MakeGenericType(types);  				case 7: return typeof(Action<''''''>).MakeGenericType(types);  				case 8: return typeof(Action<'''''''>).MakeGenericType(types);  				case 9: return typeof(Action<''''''''>).MakeGenericType(types);  				case 10: return typeof(Action<'''''''''>).MakeGenericType(types);  				case 11: return typeof(Action<''''''''''>).MakeGenericType(types);  				case 12: return typeof(Action<'''''''''''>).MakeGenericType(types);  				case 13: return typeof(Action<''''''''''''>).MakeGenericType(types);  				case 14: return typeof(Action<'''''''''''''>).MakeGenericType(types);  				case 15: return typeof(Action<''''''''''''''>).MakeGenericType(types);  				case 16: return typeof(Action<'''''''''''''''>).MakeGenericType(types);  				case 17: return typeof(Action<''''''''''''''''>).MakeGenericType(types);  				case 18: return typeof(Action<'''''''''''''''''>).MakeGenericType(types);  				case 19: return typeof(Action<''''''''''''''''''>).MakeGenericType(types);  				default:  					throw new ApplicationException($"Too many delegate type arguments: {types.Length}");  				}
Magic Number,AssemblyData,Utils,D:\research\architectureSmells\repos\0xd4d_de4dot\AssemblyData\Utils.cs,GetDelegateType,The following statement contains a magic number: switch (types.Length) {  				case 0: return typeof(Action).MakeGenericType(types);  				case 1: return typeof(Action<>).MakeGenericType(types);  				case 2: return typeof(Action<'>).MakeGenericType(types);  				case 3: return typeof(Action<''>).MakeGenericType(types);  				case 4: return typeof(Action<'''>).MakeGenericType(types);  				case 5: return typeof(Action<''''>).MakeGenericType(types);  				case 6: return typeof(Action<'''''>).MakeGenericType(types);  				case 7: return typeof(Action<''''''>).MakeGenericType(types);  				case 8: return typeof(Action<'''''''>).MakeGenericType(types);  				case 9: return typeof(Action<''''''''>).MakeGenericType(types);  				case 10: return typeof(Action<'''''''''>).MakeGenericType(types);  				case 11: return typeof(Action<''''''''''>).MakeGenericType(types);  				case 12: return typeof(Action<'''''''''''>).MakeGenericType(types);  				case 13: return typeof(Action<''''''''''''>).MakeGenericType(types);  				case 14: return typeof(Action<'''''''''''''>).MakeGenericType(types);  				case 15: return typeof(Action<''''''''''''''>).MakeGenericType(types);  				case 16: return typeof(Action<'''''''''''''''>).MakeGenericType(types);  				case 17: return typeof(Action<''''''''''''''''>).MakeGenericType(types);  				case 18: return typeof(Action<'''''''''''''''''>).MakeGenericType(types);  				case 19: return typeof(Action<''''''''''''''''''>).MakeGenericType(types);  				default:  					throw new ApplicationException($"Too many delegate type arguments: {types.Length}");  				}
Magic Number,AssemblyData,Utils,D:\research\architectureSmells\repos\0xd4d_de4dot\AssemblyData\Utils.cs,GetDelegateType,The following statement contains a magic number: switch (types.Length) {  				case 0: return typeof(Action).MakeGenericType(types);  				case 1: return typeof(Action<>).MakeGenericType(types);  				case 2: return typeof(Action<'>).MakeGenericType(types);  				case 3: return typeof(Action<''>).MakeGenericType(types);  				case 4: return typeof(Action<'''>).MakeGenericType(types);  				case 5: return typeof(Action<''''>).MakeGenericType(types);  				case 6: return typeof(Action<'''''>).MakeGenericType(types);  				case 7: return typeof(Action<''''''>).MakeGenericType(types);  				case 8: return typeof(Action<'''''''>).MakeGenericType(types);  				case 9: return typeof(Action<''''''''>).MakeGenericType(types);  				case 10: return typeof(Action<'''''''''>).MakeGenericType(types);  				case 11: return typeof(Action<''''''''''>).MakeGenericType(types);  				case 12: return typeof(Action<'''''''''''>).MakeGenericType(types);  				case 13: return typeof(Action<''''''''''''>).MakeGenericType(types);  				case 14: return typeof(Action<'''''''''''''>).MakeGenericType(types);  				case 15: return typeof(Action<''''''''''''''>).MakeGenericType(types);  				case 16: return typeof(Action<'''''''''''''''>).MakeGenericType(types);  				case 17: return typeof(Action<''''''''''''''''>).MakeGenericType(types);  				case 18: return typeof(Action<'''''''''''''''''>).MakeGenericType(types);  				case 19: return typeof(Action<''''''''''''''''''>).MakeGenericType(types);  				default:  					throw new ApplicationException($"Too many delegate type arguments: {types.Length}");  				}
Magic Number,AssemblyData,Utils,D:\research\architectureSmells\repos\0xd4d_de4dot\AssemblyData\Utils.cs,GetDelegateType,The following statement contains a magic number: switch (types.Length) {  				case 0: return typeof(Action).MakeGenericType(types);  				case 1: return typeof(Action<>).MakeGenericType(types);  				case 2: return typeof(Action<'>).MakeGenericType(types);  				case 3: return typeof(Action<''>).MakeGenericType(types);  				case 4: return typeof(Action<'''>).MakeGenericType(types);  				case 5: return typeof(Action<''''>).MakeGenericType(types);  				case 6: return typeof(Action<'''''>).MakeGenericType(types);  				case 7: return typeof(Action<''''''>).MakeGenericType(types);  				case 8: return typeof(Action<'''''''>).MakeGenericType(types);  				case 9: return typeof(Action<''''''''>).MakeGenericType(types);  				case 10: return typeof(Action<'''''''''>).MakeGenericType(types);  				case 11: return typeof(Action<''''''''''>).MakeGenericType(types);  				case 12: return typeof(Action<'''''''''''>).MakeGenericType(types);  				case 13: return typeof(Action<''''''''''''>).MakeGenericType(types);  				case 14: return typeof(Action<'''''''''''''>).MakeGenericType(types);  				case 15: return typeof(Action<''''''''''''''>).MakeGenericType(types);  				case 16: return typeof(Action<'''''''''''''''>).MakeGenericType(types);  				case 17: return typeof(Action<''''''''''''''''>).MakeGenericType(types);  				case 18: return typeof(Action<'''''''''''''''''>).MakeGenericType(types);  				case 19: return typeof(Action<''''''''''''''''''>).MakeGenericType(types);  				default:  					throw new ApplicationException($"Too many delegate type arguments: {types.Length}");  				}
Magic Number,AssemblyData,Utils,D:\research\architectureSmells\repos\0xd4d_de4dot\AssemblyData\Utils.cs,GetDelegateType,The following statement contains a magic number: switch (types.Length) {  				case 0: return typeof(Action).MakeGenericType(types);  				case 1: return typeof(Action<>).MakeGenericType(types);  				case 2: return typeof(Action<'>).MakeGenericType(types);  				case 3: return typeof(Action<''>).MakeGenericType(types);  				case 4: return typeof(Action<'''>).MakeGenericType(types);  				case 5: return typeof(Action<''''>).MakeGenericType(types);  				case 6: return typeof(Action<'''''>).MakeGenericType(types);  				case 7: return typeof(Action<''''''>).MakeGenericType(types);  				case 8: return typeof(Action<'''''''>).MakeGenericType(types);  				case 9: return typeof(Action<''''''''>).MakeGenericType(types);  				case 10: return typeof(Action<'''''''''>).MakeGenericType(types);  				case 11: return typeof(Action<''''''''''>).MakeGenericType(types);  				case 12: return typeof(Action<'''''''''''>).MakeGenericType(types);  				case 13: return typeof(Action<''''''''''''>).MakeGenericType(types);  				case 14: return typeof(Action<'''''''''''''>).MakeGenericType(types);  				case 15: return typeof(Action<''''''''''''''>).MakeGenericType(types);  				case 16: return typeof(Action<'''''''''''''''>).MakeGenericType(types);  				case 17: return typeof(Action<''''''''''''''''>).MakeGenericType(types);  				case 18: return typeof(Action<'''''''''''''''''>).MakeGenericType(types);  				case 19: return typeof(Action<''''''''''''''''''>).MakeGenericType(types);  				default:  					throw new ApplicationException($"Too many delegate type arguments: {types.Length}");  				}
Magic Number,AssemblyData,Utils,D:\research\architectureSmells\repos\0xd4d_de4dot\AssemblyData\Utils.cs,GetDelegateType,The following statement contains a magic number: switch (types.Length) {  				case 0: return typeof(Action).MakeGenericType(types);  				case 1: return typeof(Action<>).MakeGenericType(types);  				case 2: return typeof(Action<'>).MakeGenericType(types);  				case 3: return typeof(Action<''>).MakeGenericType(types);  				case 4: return typeof(Action<'''>).MakeGenericType(types);  				case 5: return typeof(Action<''''>).MakeGenericType(types);  				case 6: return typeof(Action<'''''>).MakeGenericType(types);  				case 7: return typeof(Action<''''''>).MakeGenericType(types);  				case 8: return typeof(Action<'''''''>).MakeGenericType(types);  				case 9: return typeof(Action<''''''''>).MakeGenericType(types);  				case 10: return typeof(Action<'''''''''>).MakeGenericType(types);  				case 11: return typeof(Action<''''''''''>).MakeGenericType(types);  				case 12: return typeof(Action<'''''''''''>).MakeGenericType(types);  				case 13: return typeof(Action<''''''''''''>).MakeGenericType(types);  				case 14: return typeof(Action<'''''''''''''>).MakeGenericType(types);  				case 15: return typeof(Action<''''''''''''''>).MakeGenericType(types);  				case 16: return typeof(Action<'''''''''''''''>).MakeGenericType(types);  				case 17: return typeof(Action<''''''''''''''''>).MakeGenericType(types);  				case 18: return typeof(Action<'''''''''''''''''>).MakeGenericType(types);  				case 19: return typeof(Action<''''''''''''''''''>).MakeGenericType(types);  				default:  					throw new ApplicationException($"Too many delegate type arguments: {types.Length}");  				}
Magic Number,AssemblyData,Utils,D:\research\architectureSmells\repos\0xd4d_de4dot\AssemblyData\Utils.cs,RandomName,The following statement contains a magic number: sb.Append((char)((int)'A' + random.Next(26)));
Magic Number,AssemblyData,Utils,D:\research\architectureSmells\repos\0xd4d_de4dot\AssemblyData\Utils.cs,RandomName,The following statement contains a magic number: numLower = random.Next(1' 5);
Magic Number,AssemblyData.methodsrewriter,MethodsRewriter,D:\research\architectureSmells\repos\0xd4d_de4dot\AssemblyData\methodsrewriter\MethodsRewriter.cs,Update,The following statement contains a magic number: InsertCallOurMethod(block' i + 2' "static_RtFixStackTrace");
Magic Number,AssemblyData.methodsrewriter,MethodsRewriter,D:\research\architectureSmells\repos\0xd4d_de4dot\AssemblyData\methodsrewriter\MethodsRewriter.cs,Update,The following statement contains a magic number: i += 2;
Magic Number,AssemblyData.methodsrewriter,MethodsRewriter,D:\research\architectureSmells\repos\0xd4d_de4dot\AssemblyData\methodsrewriter\MethodsRewriter.cs,Update,The following statement contains a magic number: InsertCallOurMethod(block' i + 2' "static_RtGetAssembly_TypeArg");
Magic Number,AssemblyData.methodsrewriter,MethodsRewriter,D:\research\architectureSmells\repos\0xd4d_de4dot\AssemblyData\methodsrewriter\MethodsRewriter.cs,Update,The following statement contains a magic number: i += 2;
