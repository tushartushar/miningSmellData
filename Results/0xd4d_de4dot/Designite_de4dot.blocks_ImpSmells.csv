Implementation smell,Namespace,Class,File,Method,Description
Long Method,de4dot.blocks.cflow,ConstantsFolder,C:\repos\0xd4d_de4dot\de4dot.blocks\cflow\ConstantsFolder.cs,Deobfuscate,The method has 133 lines of code.
Long Method,de4dot.blocks.cflow,DeadCodeRemover,C:\repos\0xd4d_de4dot\de4dot.blocks\cflow\DeadCodeRemover.cs,OkInstructions,The method has 229 lines of code.
Long Method,de4dot.blocks.cflow,InstructionEmulator,C:\repos\0xd4d_de4dot\de4dot.blocks\cflow\InstructionEmulator.cs,Emulate,The method has 225 lines of code.
Complex Method,de4dot.blocks,Blocks,C:\repos\0xd4d_de4dot\de4dot.blocks\Blocks.cs,OptimizeLocals,Cyclomatic complexity of the method is 17
Complex Method,de4dot.blocks,Blocks,C:\repos\0xd4d_de4dot\de4dot.blocks\Blocks.cs,MergeNopBlocks,Cyclomatic complexity of the method is 12
Complex Method,de4dot.blocks,Sorter,C:\repos\0xd4d_de4dot\de4dot.blocks\BlocksSorter.cs,Sort,Cyclomatic complexity of the method is 10
Complex Method,de4dot.blocks,Sorter,C:\repos\0xd4d_de4dot\de4dot.blocks\BlocksSorter.cs,GetLoopStartBlock,Cyclomatic complexity of the method is 9
Complex Method,de4dot.blocks,DotNetUtils,C:\repos\0xd4d_de4dot\de4dot.blocks\DotNetUtils.cs,FindMethods,Cyclomatic complexity of the method is 8
Complex Method,de4dot.blocks,ScopeBlock,C:\repos\0xd4d_de4dot\de4dot.blocks\ScopeBlock.cs,RemoveDeadBlocks,Cyclomatic complexity of the method is 8
Complex Method,de4dot.blocks,ScopeBlock,C:\repos\0xd4d_de4dot\de4dot.blocks\ScopeBlock.cs,MergeBlocks,Cyclomatic complexity of the method is 8
Complex Method,de4dot.blocks,ScopeBlock,C:\repos\0xd4d_de4dot\de4dot.blocks\ScopeBlock.cs,RemoveAllDeadBlocks,Cyclomatic complexity of the method is 11
Complex Method,de4dot.blocks.cflow,AccessChecker,C:\repos\0xd4d_de4dot\de4dot.blocks\cflow\AccessChecker.cs,CanAccess,Cyclomatic complexity of the method is 8
Complex Method,de4dot.blocks.cflow,AccessChecker,C:\repos\0xd4d_de4dot\de4dot.blocks\cflow\AccessChecker.cs,GetTypeAccess,Cyclomatic complexity of the method is 13
Complex Method,de4dot.blocks.cflow,BlocksCflowDeobfuscator,C:\repos\0xd4d_de4dot\de4dot.blocks\cflow\BlocksCflowDeobfuscator.cs,FixDotfuscatorLoop,Cyclomatic complexity of the method is 12
Complex Method,de4dot.blocks.cflow,InstructionExpressionFinder,C:\repos\0xd4d_de4dot\de4dot.blocks\cflow\DeadCodeRemover.cs,Find,Cyclomatic complexity of the method is 11
Complex Method,de4dot.blocks.cflow,SwitchCflowDeobfuscator,C:\repos\0xd4d_de4dot\de4dot.blocks\cflow\SwitchCflowDeobfuscator.cs,Deobfuscate,Cyclomatic complexity of the method is 8
Complex Method,de4dot.blocks.cflow,SwitchCflowDeobfuscator,C:\repos\0xd4d_de4dot\de4dot.blocks\cflow\SwitchCflowDeobfuscator.cs,IsSwitchType2,Cyclomatic complexity of the method is 9
Complex Method,de4dot.blocks.cflow,SwitchCflowDeobfuscator,C:\repos\0xd4d_de4dot\de4dot.blocks\cflow\SwitchCflowDeobfuscator.cs,DeobfuscateType2,Cyclomatic complexity of the method is 8
Long Parameter List,de4dot.blocks,ExceptionInfo,C:\repos\0xd4d_de4dot\de4dot.blocks\CodeGenerator.cs,ExceptionInfo,The method has 7 parameters. Parameters: tryStart' tryEnd' filterStart' handlerStart' handlerEnd' catchType' handlerType
Long Parameter List,de4dot.blocks,DotNetUtils,C:\repos\0xd4d_de4dot\de4dot.blocks\DotNetUtils.cs,FindOrCreateTypeRef,The method has 5 parameters. Parameters: module' asmRef' ns' name' isValueType
Long Parameter List,de4dot.blocks.cflow,InstructionEmulator,C:\repos\0xd4d_de4dot\de4dot.blocks\cflow\InstructionEmulator.cs,Initialize,The method has 5 parameters. Parameters: method' methodParameters' methodLocals' initLocals' emulateFromFirstInstruction
Long Parameter List,de4dot.blocks.cflow,MethodCallInlinerBase,C:\repos\0xd4d_de4dot\de4dot.blocks\cflow\MethodCallInlinerBase.cs,InlineOtherMethod,The method has 5 parameters. Parameters: patchIndex' methodToInline' instr' instrIndex' popLastArgs
Long Parameter List,de4dot.blocks.cflow,MethodCallInlinerBase,C:\repos\0xd4d_de4dot\de4dot.blocks\cflow\MethodCallInlinerBase.cs,TryInlineOtherMethod,The method has 5 parameters. Parameters: patchIndex' methodToInline' instr' instrIndex' popLastArgs
Long Statement,de4dot.blocks,Blocks,C:\repos\0xd4d_de4dot\de4dot.blocks\Blocks.cs,OptimizeLocals,The length of the statement  "					info.block.Instructions[info.index] = new Instr(OptimizeLocalInstr(info.block.Instructions[info.index]' local' (uint)newIndex)); " is 128.
Long Statement,de4dot.blocks,Blocks,C:\repos\0xd4d_de4dot\de4dot.blocks\Blocks.cs,RepartitionBlocks,The length of the statement  "					Console.WriteLine("Null ref exception! Invalid metadata token in code? Method: {0:X8}: {1}"' method.MDToken.Raw' method.FullName); " is 130.
Long Statement,de4dot.blocks,CodeGenerator,C:\repos\0xd4d_de4dot\de4dot.blocks\CodeGenerator.cs,DoTryBlock,The length of the statement  "				exceptions.Add(new ExceptionInfo(tryStart' tryEnd' filterStart' handlerStart' handlerEnd' handlerBlock.CatchType' handlerBlock.HandlerType)); " is 141.
Long Statement,de4dot.blocks,DotNetUtils,C:\repos\0xd4d_de4dot\de4dot.blocks\DotNetUtils.cs,IsMethod,The length of the statement  "			return method != null && method.FullName == returnType + " " + method.DeclaringType.FullName + "::" + method.Name + parameters; " is 127.
Long Statement,de4dot.blocks,ForwardScanOrder,C:\repos\0xd4d_de4dot\de4dot.blocks\ForwardScanOrder.cs,CreateNewList,The length of the statement  "				throw new ApplicationException(string.Format("Too many/few blocks after sorting: {0} vs {1}"' newList.Count' sorted.Count)); " is 124.
Long Statement,de4dot.blocks,InstructionListParser,C:\repos\0xd4d_de4dot\de4dot.blocks\InstructionListParser.cs,GetSortedExceptionInfos,The length of the statement  "					throw new ApplicationException("Exception handler's try block does not start and end at the same place as the other one."); " is 123.
Long Statement,de4dot.blocks,StackTracePatcher,C:\repos\0xd4d_de4dot\de4dot.blocks\StackTracePatcher.cs,GetStackFrameMethodField,The length of the statement  "			return GetFieldThrow(typeof(StackFrame)' typeof(MethodBase)' flags' "Could not find StackFrame's method (MethodBase) field"); " is 125.
Long Statement,de4dot.blocks,StackTracePatcher,C:\repos\0xd4d_de4dot\de4dot.blocks\StackTracePatcher.cs,GetStackTraceStackFramesField,The length of the statement  "			return GetFieldThrow(typeof(StackTrace)' typeof(StackFrame[])' flags' "Could not find StackTrace's frames (StackFrame[]) field"); " is 129.
Long Statement,de4dot.blocks,StackTracePatcher,C:\repos\0xd4d_de4dot\de4dot.blocks\StackTracePatcher.cs,GetMethodsToSkipField,The length of the statement  "			return GetFieldThrow(typeof(StackTrace)' "m_iMethodsToSkip"' flags' "Could not find StackTrace's iMethodsToSkip field"); " is 120.
Long Statement,de4dot.blocks.cflow,SwitchCflowDeobfuscator,C:\repos\0xd4d_de4dot\de4dot.blocks\cflow\SwitchCflowDeobfuscator.cs,IsStLdlocBranch,The length of the statement  "				Instr.GetLocalVar(blocks.Locals' switchBlock.Instructions[0]) == Instr.GetLocalVar(blocks.Locals' switchBlock.Instructions[1]); " is 127.
Complex Conditional,de4dot.blocks,Block,C:\repos\0xd4d_de4dot\de4dot.blocks\Block.cs,RemoveLastBr,The conditional expression  "fallThrough != null || (LastInstr.Operand != null && (targets == null || targets.Count != 1))"  is complex.
Complex Conditional,de4dot.blocks,ExceptionInfo,C:\repos\0xd4d_de4dot\de4dot.blocks\CodeGenerator.cs,ExceptionInfo,The conditional expression  "tryStart > tryEnd || filterStart > handlerStart ||  					tryStart < 0 || tryEnd < 0 || filterStart < 0 || handlerStart < 0 || handlerEnd < 0"  is complex.
Complex Conditional,de4dot.blocks,ForwardScanOrder,C:\repos\0xd4d_de4dot\de4dot.blocks\ForwardScanOrder.cs,AddToNewList,The conditional expression  "blockInfo.stackStart == 0 || ReferenceEquals(bb' sorted[0]) ||  				block == null || block.Sources == null || IsInNewList(block.Sources)"  is complex.
Complex Conditional,de4dot.blocks,GenericArgsSubstitutor,C:\repos\0xd4d_de4dot\de4dot.blocks\GenericArgsSubstitutor.cs,Create,The conditional expression  "type == null || ((genericArgs == null || genericArgs.Count == 0) &&  				(genericMethodArgs == null || genericMethodArgs.Count == 0))"  is complex.
Complex Conditional,de4dot.blocks,GenericArgsSubstitutor,C:\repos\0xd4d_de4dot\de4dot.blocks\GenericArgsSubstitutor.cs,Create,The conditional expression  "(genericArgs == null || genericArgs.Count == 0) && (genericMethodArgs == null || genericMethodArgs.Count == 0)"  is complex.
Complex Conditional,de4dot.blocks.cflow,AccessChecker,C:\repos\0xd4d_de4dot\de4dot.blocks\cflow\AccessChecker.cs,CanAccess,The conditional expression  "mr.Name == "Get" || mr.Name == "Set" || mr.Name == "Address" || mr.Name == ".ctor""  is complex.
Complex Conditional,de4dot.blocks.cflow,BlocksCflowDeobfuscator,C:\repos\0xd4d_de4dot\de4dot.blocks\cflow\BlocksCflowDeobfuscator.cs,FixDotfuscatorLoop,The conditional expression  "instructions[4].OpCode.Code != Code.Blt && instructions[4].OpCode.Code != Code.Blt_S &&  					instructions[4].OpCode.Code != Code.Bgt && instructions[4].OpCode.Code != Code.Bgt_S"  is complex.
Empty Catch Block,de4dot.blocks.cflow,BlockDeobfuscator,C:\repos\0xd4d_de4dot\de4dot.blocks\cflow\BlockDeobfuscator.cs,Deobfuscate,The method has an empty catch block.
Empty Catch Block,de4dot.blocks.cflow,Int32Value,C:\repos\0xd4d_de4dot\de4dot.blocks\cflow\Int32Value.cs,Add_Ovf,The method has an empty catch block.
Empty Catch Block,de4dot.blocks.cflow,Int32Value,C:\repos\0xd4d_de4dot\de4dot.blocks\cflow\Int32Value.cs,Add_Ovf_Un,The method has an empty catch block.
Empty Catch Block,de4dot.blocks.cflow,Int32Value,C:\repos\0xd4d_de4dot\de4dot.blocks\cflow\Int32Value.cs,Sub_Ovf,The method has an empty catch block.
Empty Catch Block,de4dot.blocks.cflow,Int32Value,C:\repos\0xd4d_de4dot\de4dot.blocks\cflow\Int32Value.cs,Sub_Ovf_Un,The method has an empty catch block.
Empty Catch Block,de4dot.blocks.cflow,Int32Value,C:\repos\0xd4d_de4dot\de4dot.blocks\cflow\Int32Value.cs,Mul_Ovf,The method has an empty catch block.
Empty Catch Block,de4dot.blocks.cflow,Int32Value,C:\repos\0xd4d_de4dot\de4dot.blocks\cflow\Int32Value.cs,Mul_Ovf_Un,The method has an empty catch block.
Empty Catch Block,de4dot.blocks.cflow,Int64Value,C:\repos\0xd4d_de4dot\de4dot.blocks\cflow\Int64Value.cs,Add_Ovf,The method has an empty catch block.
Empty Catch Block,de4dot.blocks.cflow,Int64Value,C:\repos\0xd4d_de4dot\de4dot.blocks\cflow\Int64Value.cs,Add_Ovf_Un,The method has an empty catch block.
Empty Catch Block,de4dot.blocks.cflow,Int64Value,C:\repos\0xd4d_de4dot\de4dot.blocks\cflow\Int64Value.cs,Sub_Ovf,The method has an empty catch block.
Empty Catch Block,de4dot.blocks.cflow,Int64Value,C:\repos\0xd4d_de4dot\de4dot.blocks\cflow\Int64Value.cs,Sub_Ovf_Un,The method has an empty catch block.
Empty Catch Block,de4dot.blocks.cflow,Int64Value,C:\repos\0xd4d_de4dot\de4dot.blocks\cflow\Int64Value.cs,Mul_Ovf,The method has an empty catch block.
Empty Catch Block,de4dot.blocks.cflow,Int64Value,C:\repos\0xd4d_de4dot\de4dot.blocks\cflow\Int64Value.cs,Mul_Ovf_Un,The method has an empty catch block.
Magic Number,de4dot.blocks,Blocks,C:\repos\0xd4d_de4dot\de4dot.blocks\Blocks.cs,OptimizeLocalInstr,The following statement contains a magic number: switch (instr.OpCode.Code) {  			case Code.Ldloc:  			case Code.Ldloc_S:  			case Code.Ldloc_0:  			case Code.Ldloc_1:  			case Code.Ldloc_2:  			case Code.Ldloc_3:  				if (newIndex == 0)  					return OpCodes.Ldloc_0.ToInstruction();  				if (newIndex == 1)  					return OpCodes.Ldloc_1.ToInstruction();  				if (newIndex == 2)  					return OpCodes.Ldloc_2.ToInstruction();  				if (newIndex == 3)  					return OpCodes.Ldloc_3.ToInstruction();  				if (newIndex <= 0xFF)  					return OpCodes.Ldloc_S.ToInstruction(local);  				return OpCodes.Ldloc.ToInstruction(local);    			case Code.Stloc:  			case Code.Stloc_S:  			case Code.Stloc_0:  			case Code.Stloc_1:  			case Code.Stloc_2:  			case Code.Stloc_3:  				if (newIndex == 0)  					return OpCodes.Stloc_0.ToInstruction();  				if (newIndex == 1)  					return OpCodes.Stloc_1.ToInstruction();  				if (newIndex == 2)  					return OpCodes.Stloc_2.ToInstruction();  				if (newIndex == 3)  					return OpCodes.Stloc_3.ToInstruction();  				if (newIndex <= 0xFF)  					return OpCodes.Stloc_S.ToInstruction(local);  				return OpCodes.Stloc.ToInstruction(local);    			case Code.Ldloca_S:  			case Code.Ldloca:  				if (newIndex <= 0xFF)  					return OpCodes.Ldloca_S.ToInstruction(local);  				return OpCodes.Ldloca.ToInstruction(local);    			default:  				throw new ApplicationException("Invalid ld/st local instruction");  			}
Magic Number,de4dot.blocks,Blocks,C:\repos\0xd4d_de4dot\de4dot.blocks\Blocks.cs,OptimizeLocalInstr,The following statement contains a magic number: switch (instr.OpCode.Code) {  			case Code.Ldloc:  			case Code.Ldloc_S:  			case Code.Ldloc_0:  			case Code.Ldloc_1:  			case Code.Ldloc_2:  			case Code.Ldloc_3:  				if (newIndex == 0)  					return OpCodes.Ldloc_0.ToInstruction();  				if (newIndex == 1)  					return OpCodes.Ldloc_1.ToInstruction();  				if (newIndex == 2)  					return OpCodes.Ldloc_2.ToInstruction();  				if (newIndex == 3)  					return OpCodes.Ldloc_3.ToInstruction();  				if (newIndex <= 0xFF)  					return OpCodes.Ldloc_S.ToInstruction(local);  				return OpCodes.Ldloc.ToInstruction(local);    			case Code.Stloc:  			case Code.Stloc_S:  			case Code.Stloc_0:  			case Code.Stloc_1:  			case Code.Stloc_2:  			case Code.Stloc_3:  				if (newIndex == 0)  					return OpCodes.Stloc_0.ToInstruction();  				if (newIndex == 1)  					return OpCodes.Stloc_1.ToInstruction();  				if (newIndex == 2)  					return OpCodes.Stloc_2.ToInstruction();  				if (newIndex == 3)  					return OpCodes.Stloc_3.ToInstruction();  				if (newIndex <= 0xFF)  					return OpCodes.Stloc_S.ToInstruction(local);  				return OpCodes.Stloc.ToInstruction(local);    			case Code.Ldloca_S:  			case Code.Ldloca:  				if (newIndex <= 0xFF)  					return OpCodes.Ldloca_S.ToInstruction(local);  				return OpCodes.Ldloca.ToInstruction(local);    			default:  				throw new ApplicationException("Invalid ld/st local instruction");  			}
Magic Number,de4dot.blocks,Blocks,C:\repos\0xd4d_de4dot\de4dot.blocks\Blocks.cs,OptimizeLocalInstr,The following statement contains a magic number: switch (instr.OpCode.Code) {  			case Code.Ldloc:  			case Code.Ldloc_S:  			case Code.Ldloc_0:  			case Code.Ldloc_1:  			case Code.Ldloc_2:  			case Code.Ldloc_3:  				if (newIndex == 0)  					return OpCodes.Ldloc_0.ToInstruction();  				if (newIndex == 1)  					return OpCodes.Ldloc_1.ToInstruction();  				if (newIndex == 2)  					return OpCodes.Ldloc_2.ToInstruction();  				if (newIndex == 3)  					return OpCodes.Ldloc_3.ToInstruction();  				if (newIndex <= 0xFF)  					return OpCodes.Ldloc_S.ToInstruction(local);  				return OpCodes.Ldloc.ToInstruction(local);    			case Code.Stloc:  			case Code.Stloc_S:  			case Code.Stloc_0:  			case Code.Stloc_1:  			case Code.Stloc_2:  			case Code.Stloc_3:  				if (newIndex == 0)  					return OpCodes.Stloc_0.ToInstruction();  				if (newIndex == 1)  					return OpCodes.Stloc_1.ToInstruction();  				if (newIndex == 2)  					return OpCodes.Stloc_2.ToInstruction();  				if (newIndex == 3)  					return OpCodes.Stloc_3.ToInstruction();  				if (newIndex <= 0xFF)  					return OpCodes.Stloc_S.ToInstruction(local);  				return OpCodes.Stloc.ToInstruction(local);    			case Code.Ldloca_S:  			case Code.Ldloca:  				if (newIndex <= 0xFF)  					return OpCodes.Ldloca_S.ToInstruction(local);  				return OpCodes.Ldloca.ToInstruction(local);    			default:  				throw new ApplicationException("Invalid ld/st local instruction");  			}
Magic Number,de4dot.blocks,Blocks,C:\repos\0xd4d_de4dot\de4dot.blocks\Blocks.cs,OptimizeLocalInstr,The following statement contains a magic number: switch (instr.OpCode.Code) {  			case Code.Ldloc:  			case Code.Ldloc_S:  			case Code.Ldloc_0:  			case Code.Ldloc_1:  			case Code.Ldloc_2:  			case Code.Ldloc_3:  				if (newIndex == 0)  					return OpCodes.Ldloc_0.ToInstruction();  				if (newIndex == 1)  					return OpCodes.Ldloc_1.ToInstruction();  				if (newIndex == 2)  					return OpCodes.Ldloc_2.ToInstruction();  				if (newIndex == 3)  					return OpCodes.Ldloc_3.ToInstruction();  				if (newIndex <= 0xFF)  					return OpCodes.Ldloc_S.ToInstruction(local);  				return OpCodes.Ldloc.ToInstruction(local);    			case Code.Stloc:  			case Code.Stloc_S:  			case Code.Stloc_0:  			case Code.Stloc_1:  			case Code.Stloc_2:  			case Code.Stloc_3:  				if (newIndex == 0)  					return OpCodes.Stloc_0.ToInstruction();  				if (newIndex == 1)  					return OpCodes.Stloc_1.ToInstruction();  				if (newIndex == 2)  					return OpCodes.Stloc_2.ToInstruction();  				if (newIndex == 3)  					return OpCodes.Stloc_3.ToInstruction();  				if (newIndex <= 0xFF)  					return OpCodes.Stloc_S.ToInstruction(local);  				return OpCodes.Stloc.ToInstruction(local);    			case Code.Ldloca_S:  			case Code.Ldloca:  				if (newIndex <= 0xFF)  					return OpCodes.Ldloca_S.ToInstruction(local);  				return OpCodes.Ldloca.ToInstruction(local);    			default:  				throw new ApplicationException("Invalid ld/st local instruction");  			}
Magic Number,de4dot.blocks,Blocks,C:\repos\0xd4d_de4dot\de4dot.blocks\Blocks.cs,MergeNopBlocks,The following statement contains a magic number: for (int i = 0; i < 10; i++) {  				bool modified = false;    				foreach (var block in allBlocks) {  					Block nopBlockTarget;    					nopBlockTarget = GetNopBlockTarget(nopBlocks' block' block.FallThrough);  					if (nopBlockTarget != null) {  						block.SetNewFallThrough(nopBlockTarget);  						modified = true;  					}    					if (block.Targets != null) {  						for (int targetIndex = 0; targetIndex < block.Targets.Count; targetIndex++) {  							nopBlockTarget = GetNopBlockTarget(nopBlocks' block' block.Targets[targetIndex]);  							if (nopBlockTarget == null)  								continue;  							block.SetNewTarget(targetIndex' nopBlockTarget);  							modified = true;  						}  					}  				}    				if (!modified)  					break;  			}
Magic Number,de4dot.blocks,DotNetUtils,C:\repos\0xd4d_de4dot\de4dot.blocks\DotNetUtils.cs,GetDllName,The following statement contains a magic number: if (dll.EndsWith(".dll"' StringComparison.OrdinalIgnoreCase))  				return dll.Substring(0' dll.Length - 4);
Magic Number,de4dot.blocks,DotNetUtils,C:\repos\0xd4d_de4dot\de4dot.blocks\DotNetUtils.cs,GetInstruction,The following statement contains a magic number: for (int i = 0; i < 10; i++) {  				if (index < 0 || index >= instructions.Count)  					return null;  				var instr = instructions[index++];  				if (instr.OpCode.Code == Code.Nop)  					continue;  				if (instr.OpCode.OpCodeType == OpCodeType.Prefix)  					continue;  				if (instr == null || (instr.OpCode.Code != Code.Br && instr.OpCode.Code != Code.Br_S))  					return instr;  				instr = instr.Operand as Instruction;  				if (instr == null)  					return null;  				index = instructions.IndexOf(instr);  			}
Magic Number,de4dot.blocks,TypeDefDict<TValue>,C:\repos\0xd4d_de4dot\de4dot.blocks\MemberDefDict.cs,GetAccessibilityOrder,The following statement contains a magic number: return accessibilityOrder[(int)typeDef.Attributes & 7];
Magic Number,de4dot.blocks,FieldDefDictBase<TValue>,C:\repos\0xd4d_de4dot\de4dot.blocks\MemberDefDict.cs,GetAccessibilityOrder,The following statement contains a magic number: return accessibilityOrder[(int)fieldDef.Attributes & 7];
Magic Number,de4dot.blocks,MethodDefDictBase<TValue>,C:\repos\0xd4d_de4dot\de4dot.blocks\MemberDefDict.cs,GetAccessibilityOrder,The following statement contains a magic number: return accessibilityOrder[(int)methodDef.Attributes & 7];
Magic Number,de4dot.blocks.cflow,BlocksCflowDeobfuscator,C:\repos\0xd4d_de4dot\de4dot.blocks\cflow\BlocksCflowDeobfuscator.cs,FixDotfuscatorLoop,The following statement contains a magic number: foreach (var block in allBlocks) {  				if (block.Instructions.Count != 5)  					continue;  				var instructions = block.Instructions;  				if (instructions[0].OpCode.Code != Code.Dup)  					continue;  				if (instructions[1].OpCode.Code != Code.Dup)  					continue;  				if (!instructions[2].IsLdcI4())  					continue;  				if (instructions[3].OpCode.Code != Code.Sub && instructions[3].OpCode.Code != Code.Add)  					continue;  				if (instructions[4].OpCode.Code != Code.Blt && instructions[4].OpCode.Code != Code.Blt_S &&  					instructions[4].OpCode.Code != Code.Bgt && instructions[4].OpCode.Code != Code.Bgt_S)  					continue;  				if (block.Sources.Count != 2)  					continue;  				var prev = block.Sources[0];  				if (prev == block)  					prev = block.Sources[1];  				if (prev == null || !prev.LastInstr.IsLdcI4())  					continue;  				var next = block.FallThrough;  				if (next.FirstInstr.OpCode.Code != Code.Pop)  					continue;  				block.ReplaceLastInstrsWithBranch(5' next);  				modified = true;  			}
Magic Number,de4dot.blocks.cflow,BlocksCflowDeobfuscator,C:\repos\0xd4d_de4dot\de4dot.blocks\cflow\BlocksCflowDeobfuscator.cs,FixDotfuscatorLoop,The following statement contains a magic number: foreach (var block in allBlocks) {  				if (block.Instructions.Count != 5)  					continue;  				var instructions = block.Instructions;  				if (instructions[0].OpCode.Code != Code.Dup)  					continue;  				if (instructions[1].OpCode.Code != Code.Dup)  					continue;  				if (!instructions[2].IsLdcI4())  					continue;  				if (instructions[3].OpCode.Code != Code.Sub && instructions[3].OpCode.Code != Code.Add)  					continue;  				if (instructions[4].OpCode.Code != Code.Blt && instructions[4].OpCode.Code != Code.Blt_S &&  					instructions[4].OpCode.Code != Code.Bgt && instructions[4].OpCode.Code != Code.Bgt_S)  					continue;  				if (block.Sources.Count != 2)  					continue;  				var prev = block.Sources[0];  				if (prev == block)  					prev = block.Sources[1];  				if (prev == null || !prev.LastInstr.IsLdcI4())  					continue;  				var next = block.FallThrough;  				if (next.FirstInstr.OpCode.Code != Code.Pop)  					continue;  				block.ReplaceLastInstrsWithBranch(5' next);  				modified = true;  			}
Magic Number,de4dot.blocks.cflow,BlocksCflowDeobfuscator,C:\repos\0xd4d_de4dot\de4dot.blocks\cflow\BlocksCflowDeobfuscator.cs,FixDotfuscatorLoop,The following statement contains a magic number: foreach (var block in allBlocks) {  				if (block.Instructions.Count != 5)  					continue;  				var instructions = block.Instructions;  				if (instructions[0].OpCode.Code != Code.Dup)  					continue;  				if (instructions[1].OpCode.Code != Code.Dup)  					continue;  				if (!instructions[2].IsLdcI4())  					continue;  				if (instructions[3].OpCode.Code != Code.Sub && instructions[3].OpCode.Code != Code.Add)  					continue;  				if (instructions[4].OpCode.Code != Code.Blt && instructions[4].OpCode.Code != Code.Blt_S &&  					instructions[4].OpCode.Code != Code.Bgt && instructions[4].OpCode.Code != Code.Bgt_S)  					continue;  				if (block.Sources.Count != 2)  					continue;  				var prev = block.Sources[0];  				if (prev == block)  					prev = block.Sources[1];  				if (prev == null || !prev.LastInstr.IsLdcI4())  					continue;  				var next = block.FallThrough;  				if (next.FirstInstr.OpCode.Code != Code.Pop)  					continue;  				block.ReplaceLastInstrsWithBranch(5' next);  				modified = true;  			}
Magic Number,de4dot.blocks.cflow,BlocksCflowDeobfuscator,C:\repos\0xd4d_de4dot\de4dot.blocks\cflow\BlocksCflowDeobfuscator.cs,FixDotfuscatorLoop,The following statement contains a magic number: foreach (var block in allBlocks) {  				if (block.Instructions.Count != 5)  					continue;  				var instructions = block.Instructions;  				if (instructions[0].OpCode.Code != Code.Dup)  					continue;  				if (instructions[1].OpCode.Code != Code.Dup)  					continue;  				if (!instructions[2].IsLdcI4())  					continue;  				if (instructions[3].OpCode.Code != Code.Sub && instructions[3].OpCode.Code != Code.Add)  					continue;  				if (instructions[4].OpCode.Code != Code.Blt && instructions[4].OpCode.Code != Code.Blt_S &&  					instructions[4].OpCode.Code != Code.Bgt && instructions[4].OpCode.Code != Code.Bgt_S)  					continue;  				if (block.Sources.Count != 2)  					continue;  				var prev = block.Sources[0];  				if (prev == block)  					prev = block.Sources[1];  				if (prev == null || !prev.LastInstr.IsLdcI4())  					continue;  				var next = block.FallThrough;  				if (next.FirstInstr.OpCode.Code != Code.Pop)  					continue;  				block.ReplaceLastInstrsWithBranch(5' next);  				modified = true;  			}
Magic Number,de4dot.blocks.cflow,BlocksCflowDeobfuscator,C:\repos\0xd4d_de4dot\de4dot.blocks\cflow\BlocksCflowDeobfuscator.cs,FixDotfuscatorLoop,The following statement contains a magic number: foreach (var block in allBlocks) {  				if (block.Instructions.Count != 5)  					continue;  				var instructions = block.Instructions;  				if (instructions[0].OpCode.Code != Code.Dup)  					continue;  				if (instructions[1].OpCode.Code != Code.Dup)  					continue;  				if (!instructions[2].IsLdcI4())  					continue;  				if (instructions[3].OpCode.Code != Code.Sub && instructions[3].OpCode.Code != Code.Add)  					continue;  				if (instructions[4].OpCode.Code != Code.Blt && instructions[4].OpCode.Code != Code.Blt_S &&  					instructions[4].OpCode.Code != Code.Bgt && instructions[4].OpCode.Code != Code.Bgt_S)  					continue;  				if (block.Sources.Count != 2)  					continue;  				var prev = block.Sources[0];  				if (prev == block)  					prev = block.Sources[1];  				if (prev == null || !prev.LastInstr.IsLdcI4())  					continue;  				var next = block.FallThrough;  				if (next.FirstInstr.OpCode.Code != Code.Pop)  					continue;  				block.ReplaceLastInstrsWithBranch(5' next);  				modified = true;  			}
Magic Number,de4dot.blocks.cflow,BlocksCflowDeobfuscator,C:\repos\0xd4d_de4dot\de4dot.blocks\cflow\BlocksCflowDeobfuscator.cs,FixDotfuscatorLoop,The following statement contains a magic number: foreach (var block in allBlocks) {  				if (block.Instructions.Count != 5)  					continue;  				var instructions = block.Instructions;  				if (instructions[0].OpCode.Code != Code.Dup)  					continue;  				if (instructions[1].OpCode.Code != Code.Dup)  					continue;  				if (!instructions[2].IsLdcI4())  					continue;  				if (instructions[3].OpCode.Code != Code.Sub && instructions[3].OpCode.Code != Code.Add)  					continue;  				if (instructions[4].OpCode.Code != Code.Blt && instructions[4].OpCode.Code != Code.Blt_S &&  					instructions[4].OpCode.Code != Code.Bgt && instructions[4].OpCode.Code != Code.Bgt_S)  					continue;  				if (block.Sources.Count != 2)  					continue;  				var prev = block.Sources[0];  				if (prev == block)  					prev = block.Sources[1];  				if (prev == null || !prev.LastInstr.IsLdcI4())  					continue;  				var next = block.FallThrough;  				if (next.FirstInstr.OpCode.Code != Code.Pop)  					continue;  				block.ReplaceLastInstrsWithBranch(5' next);  				modified = true;  			}
Magic Number,de4dot.blocks.cflow,BlocksCflowDeobfuscator,C:\repos\0xd4d_de4dot\de4dot.blocks\cflow\BlocksCflowDeobfuscator.cs,FixDotfuscatorLoop,The following statement contains a magic number: foreach (var block in allBlocks) {  				if (block.Instructions.Count != 5)  					continue;  				var instructions = block.Instructions;  				if (instructions[0].OpCode.Code != Code.Dup)  					continue;  				if (instructions[1].OpCode.Code != Code.Dup)  					continue;  				if (!instructions[2].IsLdcI4())  					continue;  				if (instructions[3].OpCode.Code != Code.Sub && instructions[3].OpCode.Code != Code.Add)  					continue;  				if (instructions[4].OpCode.Code != Code.Blt && instructions[4].OpCode.Code != Code.Blt_S &&  					instructions[4].OpCode.Code != Code.Bgt && instructions[4].OpCode.Code != Code.Bgt_S)  					continue;  				if (block.Sources.Count != 2)  					continue;  				var prev = block.Sources[0];  				if (prev == block)  					prev = block.Sources[1];  				if (prev == null || !prev.LastInstr.IsLdcI4())  					continue;  				var next = block.FallThrough;  				if (next.FirstInstr.OpCode.Code != Code.Pop)  					continue;  				block.ReplaceLastInstrsWithBranch(5' next);  				modified = true;  			}
Magic Number,de4dot.blocks.cflow,BlocksCflowDeobfuscator,C:\repos\0xd4d_de4dot\de4dot.blocks\cflow\BlocksCflowDeobfuscator.cs,FixDotfuscatorLoop,The following statement contains a magic number: foreach (var block in allBlocks) {  				if (block.Instructions.Count != 5)  					continue;  				var instructions = block.Instructions;  				if (instructions[0].OpCode.Code != Code.Dup)  					continue;  				if (instructions[1].OpCode.Code != Code.Dup)  					continue;  				if (!instructions[2].IsLdcI4())  					continue;  				if (instructions[3].OpCode.Code != Code.Sub && instructions[3].OpCode.Code != Code.Add)  					continue;  				if (instructions[4].OpCode.Code != Code.Blt && instructions[4].OpCode.Code != Code.Blt_S &&  					instructions[4].OpCode.Code != Code.Bgt && instructions[4].OpCode.Code != Code.Bgt_S)  					continue;  				if (block.Sources.Count != 2)  					continue;  				var prev = block.Sources[0];  				if (prev == block)  					prev = block.Sources[1];  				if (prev == null || !prev.LastInstr.IsLdcI4())  					continue;  				var next = block.FallThrough;  				if (next.FirstInstr.OpCode.Code != Code.Pop)  					continue;  				block.ReplaceLastInstrsWithBranch(5' next);  				modified = true;  			}
Magic Number,de4dot.blocks.cflow,BlocksCflowDeobfuscator,C:\repos\0xd4d_de4dot\de4dot.blocks\cflow\BlocksCflowDeobfuscator.cs,FixDotfuscatorLoop,The following statement contains a magic number: foreach (var block in allBlocks) {  				if (block.Instructions.Count != 5)  					continue;  				var instructions = block.Instructions;  				if (instructions[0].OpCode.Code != Code.Dup)  					continue;  				if (instructions[1].OpCode.Code != Code.Dup)  					continue;  				if (!instructions[2].IsLdcI4())  					continue;  				if (instructions[3].OpCode.Code != Code.Sub && instructions[3].OpCode.Code != Code.Add)  					continue;  				if (instructions[4].OpCode.Code != Code.Blt && instructions[4].OpCode.Code != Code.Blt_S &&  					instructions[4].OpCode.Code != Code.Bgt && instructions[4].OpCode.Code != Code.Bgt_S)  					continue;  				if (block.Sources.Count != 2)  					continue;  				var prev = block.Sources[0];  				if (prev == block)  					prev = block.Sources[1];  				if (prev == null || !prev.LastInstr.IsLdcI4())  					continue;  				var next = block.FallThrough;  				if (next.FirstInstr.OpCode.Code != Code.Pop)  					continue;  				block.ReplaceLastInstrsWithBranch(5' next);  				modified = true;  			}
Magic Number,de4dot.blocks.cflow,BlocksCflowDeobfuscator,C:\repos\0xd4d_de4dot\de4dot.blocks\cflow\BlocksCflowDeobfuscator.cs,FixDotfuscatorLoop,The following statement contains a magic number: foreach (var block in allBlocks) {  				if (block.Instructions.Count != 5)  					continue;  				var instructions = block.Instructions;  				if (instructions[0].OpCode.Code != Code.Dup)  					continue;  				if (instructions[1].OpCode.Code != Code.Dup)  					continue;  				if (!instructions[2].IsLdcI4())  					continue;  				if (instructions[3].OpCode.Code != Code.Sub && instructions[3].OpCode.Code != Code.Add)  					continue;  				if (instructions[4].OpCode.Code != Code.Blt && instructions[4].OpCode.Code != Code.Blt_S &&  					instructions[4].OpCode.Code != Code.Bgt && instructions[4].OpCode.Code != Code.Bgt_S)  					continue;  				if (block.Sources.Count != 2)  					continue;  				var prev = block.Sources[0];  				if (prev == block)  					prev = block.Sources[1];  				if (prev == null || !prev.LastInstr.IsLdcI4())  					continue;  				var next = block.FallThrough;  				if (next.FirstInstr.OpCode.Code != Code.Pop)  					continue;  				block.ReplaceLastInstrsWithBranch(5' next);  				modified = true;  			}
Magic Number,de4dot.blocks.cflow,BranchEmulator,C:\repos\0xd4d_de4dot\de4dot.blocks\cflow\BranchEmulator.cs,Emulate_Beq,The following statement contains a magic number: if (val1.IsInt32() && val2.IsInt32())  				return EmulateBranch(2' Int32Value.CompareEq((Int32Value)val1' (Int32Value)val2));  			else if (val1.IsInt64() && val2.IsInt64())  				return EmulateBranch(2' Int64Value.CompareEq((Int64Value)val1' (Int64Value)val2));  			else if (val1.IsReal8() && val2.IsReal8())  				return EmulateBranch(2' Real8Value.CompareEq((Real8Value)val1' (Real8Value)val2));  			else if (val1.IsNull() && val2.IsNull())  				return EmulateBranch(2' true);  			else  				return false;
Magic Number,de4dot.blocks.cflow,BranchEmulator,C:\repos\0xd4d_de4dot\de4dot.blocks\cflow\BranchEmulator.cs,Emulate_Beq,The following statement contains a magic number: if (val1.IsInt32() && val2.IsInt32())  				return EmulateBranch(2' Int32Value.CompareEq((Int32Value)val1' (Int32Value)val2));  			else if (val1.IsInt64() && val2.IsInt64())  				return EmulateBranch(2' Int64Value.CompareEq((Int64Value)val1' (Int64Value)val2));  			else if (val1.IsReal8() && val2.IsReal8())  				return EmulateBranch(2' Real8Value.CompareEq((Real8Value)val1' (Real8Value)val2));  			else if (val1.IsNull() && val2.IsNull())  				return EmulateBranch(2' true);  			else  				return false;
Magic Number,de4dot.blocks.cflow,BranchEmulator,C:\repos\0xd4d_de4dot\de4dot.blocks\cflow\BranchEmulator.cs,Emulate_Beq,The following statement contains a magic number: if (val1.IsInt32() && val2.IsInt32())  				return EmulateBranch(2' Int32Value.CompareEq((Int32Value)val1' (Int32Value)val2));  			else if (val1.IsInt64() && val2.IsInt64())  				return EmulateBranch(2' Int64Value.CompareEq((Int64Value)val1' (Int64Value)val2));  			else if (val1.IsReal8() && val2.IsReal8())  				return EmulateBranch(2' Real8Value.CompareEq((Real8Value)val1' (Real8Value)val2));  			else if (val1.IsNull() && val2.IsNull())  				return EmulateBranch(2' true);  			else  				return false;
Magic Number,de4dot.blocks.cflow,BranchEmulator,C:\repos\0xd4d_de4dot\de4dot.blocks\cflow\BranchEmulator.cs,Emulate_Beq,The following statement contains a magic number: if (val1.IsInt32() && val2.IsInt32())  				return EmulateBranch(2' Int32Value.CompareEq((Int32Value)val1' (Int32Value)val2));  			else if (val1.IsInt64() && val2.IsInt64())  				return EmulateBranch(2' Int64Value.CompareEq((Int64Value)val1' (Int64Value)val2));  			else if (val1.IsReal8() && val2.IsReal8())  				return EmulateBranch(2' Real8Value.CompareEq((Real8Value)val1' (Real8Value)val2));  			else if (val1.IsNull() && val2.IsNull())  				return EmulateBranch(2' true);  			else  				return false;
Magic Number,de4dot.blocks.cflow,BranchEmulator,C:\repos\0xd4d_de4dot\de4dot.blocks\cflow\BranchEmulator.cs,Emulate_Bne_Un,The following statement contains a magic number: if (val1.IsInt32() && val2.IsInt32())  				return EmulateBranch(2' Int32Value.CompareNeq((Int32Value)val1' (Int32Value)val2));  			else if (val1.IsInt64() && val2.IsInt64())  				return EmulateBranch(2' Int64Value.CompareNeq((Int64Value)val1' (Int64Value)val2));  			else if (val1.IsReal8() && val2.IsReal8())  				return EmulateBranch(2' Real8Value.CompareNeq((Real8Value)val1' (Real8Value)val2));  			else if (val1.IsNull() && val2.IsNull())  				return EmulateBranch(2' false);  			else  				return false;
Magic Number,de4dot.blocks.cflow,BranchEmulator,C:\repos\0xd4d_de4dot\de4dot.blocks\cflow\BranchEmulator.cs,Emulate_Bne_Un,The following statement contains a magic number: if (val1.IsInt32() && val2.IsInt32())  				return EmulateBranch(2' Int32Value.CompareNeq((Int32Value)val1' (Int32Value)val2));  			else if (val1.IsInt64() && val2.IsInt64())  				return EmulateBranch(2' Int64Value.CompareNeq((Int64Value)val1' (Int64Value)val2));  			else if (val1.IsReal8() && val2.IsReal8())  				return EmulateBranch(2' Real8Value.CompareNeq((Real8Value)val1' (Real8Value)val2));  			else if (val1.IsNull() && val2.IsNull())  				return EmulateBranch(2' false);  			else  				return false;
Magic Number,de4dot.blocks.cflow,BranchEmulator,C:\repos\0xd4d_de4dot\de4dot.blocks\cflow\BranchEmulator.cs,Emulate_Bne_Un,The following statement contains a magic number: if (val1.IsInt32() && val2.IsInt32())  				return EmulateBranch(2' Int32Value.CompareNeq((Int32Value)val1' (Int32Value)val2));  			else if (val1.IsInt64() && val2.IsInt64())  				return EmulateBranch(2' Int64Value.CompareNeq((Int64Value)val1' (Int64Value)val2));  			else if (val1.IsReal8() && val2.IsReal8())  				return EmulateBranch(2' Real8Value.CompareNeq((Real8Value)val1' (Real8Value)val2));  			else if (val1.IsNull() && val2.IsNull())  				return EmulateBranch(2' false);  			else  				return false;
Magic Number,de4dot.blocks.cflow,BranchEmulator,C:\repos\0xd4d_de4dot\de4dot.blocks\cflow\BranchEmulator.cs,Emulate_Bne_Un,The following statement contains a magic number: if (val1.IsInt32() && val2.IsInt32())  				return EmulateBranch(2' Int32Value.CompareNeq((Int32Value)val1' (Int32Value)val2));  			else if (val1.IsInt64() && val2.IsInt64())  				return EmulateBranch(2' Int64Value.CompareNeq((Int64Value)val1' (Int64Value)val2));  			else if (val1.IsReal8() && val2.IsReal8())  				return EmulateBranch(2' Real8Value.CompareNeq((Real8Value)val1' (Real8Value)val2));  			else if (val1.IsNull() && val2.IsNull())  				return EmulateBranch(2' false);  			else  				return false;
Magic Number,de4dot.blocks.cflow,BranchEmulator,C:\repos\0xd4d_de4dot\de4dot.blocks\cflow\BranchEmulator.cs,Emulate_Bge,The following statement contains a magic number: if (val1.IsInt32() && val2.IsInt32())  				return EmulateBranch(2' Int32Value.CompareGe((Int32Value)val1' (Int32Value)val2));  			else if (val1.IsInt64() && val2.IsInt64())  				return EmulateBranch(2' Int64Value.CompareGe((Int64Value)val1' (Int64Value)val2));  			else if (val1.IsReal8() && val2.IsReal8())  				return EmulateBranch(2' Real8Value.CompareGe((Real8Value)val1' (Real8Value)val2));  			else  				return false;
Magic Number,de4dot.blocks.cflow,BranchEmulator,C:\repos\0xd4d_de4dot\de4dot.blocks\cflow\BranchEmulator.cs,Emulate_Bge,The following statement contains a magic number: if (val1.IsInt32() && val2.IsInt32())  				return EmulateBranch(2' Int32Value.CompareGe((Int32Value)val1' (Int32Value)val2));  			else if (val1.IsInt64() && val2.IsInt64())  				return EmulateBranch(2' Int64Value.CompareGe((Int64Value)val1' (Int64Value)val2));  			else if (val1.IsReal8() && val2.IsReal8())  				return EmulateBranch(2' Real8Value.CompareGe((Real8Value)val1' (Real8Value)val2));  			else  				return false;
Magic Number,de4dot.blocks.cflow,BranchEmulator,C:\repos\0xd4d_de4dot\de4dot.blocks\cflow\BranchEmulator.cs,Emulate_Bge,The following statement contains a magic number: if (val1.IsInt32() && val2.IsInt32())  				return EmulateBranch(2' Int32Value.CompareGe((Int32Value)val1' (Int32Value)val2));  			else if (val1.IsInt64() && val2.IsInt64())  				return EmulateBranch(2' Int64Value.CompareGe((Int64Value)val1' (Int64Value)val2));  			else if (val1.IsReal8() && val2.IsReal8())  				return EmulateBranch(2' Real8Value.CompareGe((Real8Value)val1' (Real8Value)val2));  			else  				return false;
Magic Number,de4dot.blocks.cflow,BranchEmulator,C:\repos\0xd4d_de4dot\de4dot.blocks\cflow\BranchEmulator.cs,Emulate_Bge_Un,The following statement contains a magic number: if (val1.IsInt32() && val2.IsInt32())  				return EmulateBranch(2' Int32Value.CompareGe_Un((Int32Value)val1' (Int32Value)val2));  			else if (val1.IsInt64() && val2.IsInt64())  				return EmulateBranch(2' Int64Value.CompareGe_Un((Int64Value)val1' (Int64Value)val2));  			else if (val1.IsReal8() && val2.IsReal8())  				return EmulateBranch(2' Real8Value.CompareGe_Un((Real8Value)val1' (Real8Value)val2));  			else  				return false;
Magic Number,de4dot.blocks.cflow,BranchEmulator,C:\repos\0xd4d_de4dot\de4dot.blocks\cflow\BranchEmulator.cs,Emulate_Bge_Un,The following statement contains a magic number: if (val1.IsInt32() && val2.IsInt32())  				return EmulateBranch(2' Int32Value.CompareGe_Un((Int32Value)val1' (Int32Value)val2));  			else if (val1.IsInt64() && val2.IsInt64())  				return EmulateBranch(2' Int64Value.CompareGe_Un((Int64Value)val1' (Int64Value)val2));  			else if (val1.IsReal8() && val2.IsReal8())  				return EmulateBranch(2' Real8Value.CompareGe_Un((Real8Value)val1' (Real8Value)val2));  			else  				return false;
Magic Number,de4dot.blocks.cflow,BranchEmulator,C:\repos\0xd4d_de4dot\de4dot.blocks\cflow\BranchEmulator.cs,Emulate_Bge_Un,The following statement contains a magic number: if (val1.IsInt32() && val2.IsInt32())  				return EmulateBranch(2' Int32Value.CompareGe_Un((Int32Value)val1' (Int32Value)val2));  			else if (val1.IsInt64() && val2.IsInt64())  				return EmulateBranch(2' Int64Value.CompareGe_Un((Int64Value)val1' (Int64Value)val2));  			else if (val1.IsReal8() && val2.IsReal8())  				return EmulateBranch(2' Real8Value.CompareGe_Un((Real8Value)val1' (Real8Value)val2));  			else  				return false;
Magic Number,de4dot.blocks.cflow,BranchEmulator,C:\repos\0xd4d_de4dot\de4dot.blocks\cflow\BranchEmulator.cs,Emulate_Bgt,The following statement contains a magic number: if (val1.IsInt32() && val2.IsInt32())  				return EmulateBranch(2' Int32Value.CompareGt((Int32Value)val1' (Int32Value)val2));  			else if (val1.IsInt64() && val2.IsInt64())  				return EmulateBranch(2' Int64Value.CompareGt((Int64Value)val1' (Int64Value)val2));  			else if (val1.IsReal8() && val2.IsReal8())  				return EmulateBranch(2' Real8Value.CompareGt((Real8Value)val1' (Real8Value)val2));  			else  				return false;
Magic Number,de4dot.blocks.cflow,BranchEmulator,C:\repos\0xd4d_de4dot\de4dot.blocks\cflow\BranchEmulator.cs,Emulate_Bgt,The following statement contains a magic number: if (val1.IsInt32() && val2.IsInt32())  				return EmulateBranch(2' Int32Value.CompareGt((Int32Value)val1' (Int32Value)val2));  			else if (val1.IsInt64() && val2.IsInt64())  				return EmulateBranch(2' Int64Value.CompareGt((Int64Value)val1' (Int64Value)val2));  			else if (val1.IsReal8() && val2.IsReal8())  				return EmulateBranch(2' Real8Value.CompareGt((Real8Value)val1' (Real8Value)val2));  			else  				return false;
Magic Number,de4dot.blocks.cflow,BranchEmulator,C:\repos\0xd4d_de4dot\de4dot.blocks\cflow\BranchEmulator.cs,Emulate_Bgt,The following statement contains a magic number: if (val1.IsInt32() && val2.IsInt32())  				return EmulateBranch(2' Int32Value.CompareGt((Int32Value)val1' (Int32Value)val2));  			else if (val1.IsInt64() && val2.IsInt64())  				return EmulateBranch(2' Int64Value.CompareGt((Int64Value)val1' (Int64Value)val2));  			else if (val1.IsReal8() && val2.IsReal8())  				return EmulateBranch(2' Real8Value.CompareGt((Real8Value)val1' (Real8Value)val2));  			else  				return false;
Magic Number,de4dot.blocks.cflow,BranchEmulator,C:\repos\0xd4d_de4dot\de4dot.blocks\cflow\BranchEmulator.cs,Emulate_Bgt_Un,The following statement contains a magic number: if (val1.IsInt32() && val2.IsInt32())  				return EmulateBranch(2' Int32Value.CompareGt_Un((Int32Value)val1' (Int32Value)val2));  			else if (val1.IsInt64() && val2.IsInt64())  				return EmulateBranch(2' Int64Value.CompareGt_Un((Int64Value)val1' (Int64Value)val2));  			else if (val1.IsReal8() && val2.IsReal8())  				return EmulateBranch(2' Real8Value.CompareGt_Un((Real8Value)val1' (Real8Value)val2));  			else  				return false;
Magic Number,de4dot.blocks.cflow,BranchEmulator,C:\repos\0xd4d_de4dot\de4dot.blocks\cflow\BranchEmulator.cs,Emulate_Bgt_Un,The following statement contains a magic number: if (val1.IsInt32() && val2.IsInt32())  				return EmulateBranch(2' Int32Value.CompareGt_Un((Int32Value)val1' (Int32Value)val2));  			else if (val1.IsInt64() && val2.IsInt64())  				return EmulateBranch(2' Int64Value.CompareGt_Un((Int64Value)val1' (Int64Value)val2));  			else if (val1.IsReal8() && val2.IsReal8())  				return EmulateBranch(2' Real8Value.CompareGt_Un((Real8Value)val1' (Real8Value)val2));  			else  				return false;
Magic Number,de4dot.blocks.cflow,BranchEmulator,C:\repos\0xd4d_de4dot\de4dot.blocks\cflow\BranchEmulator.cs,Emulate_Bgt_Un,The following statement contains a magic number: if (val1.IsInt32() && val2.IsInt32())  				return EmulateBranch(2' Int32Value.CompareGt_Un((Int32Value)val1' (Int32Value)val2));  			else if (val1.IsInt64() && val2.IsInt64())  				return EmulateBranch(2' Int64Value.CompareGt_Un((Int64Value)val1' (Int64Value)val2));  			else if (val1.IsReal8() && val2.IsReal8())  				return EmulateBranch(2' Real8Value.CompareGt_Un((Real8Value)val1' (Real8Value)val2));  			else  				return false;
Magic Number,de4dot.blocks.cflow,BranchEmulator,C:\repos\0xd4d_de4dot\de4dot.blocks\cflow\BranchEmulator.cs,Emulate_Ble,The following statement contains a magic number: if (val1.IsInt32() && val2.IsInt32())  				return EmulateBranch(2' Int32Value.CompareLe((Int32Value)val1' (Int32Value)val2));  			else if (val1.IsInt64() && val2.IsInt64())  				return EmulateBranch(2' Int64Value.CompareLe((Int64Value)val1' (Int64Value)val2));  			else if (val1.IsReal8() && val2.IsReal8())  				return EmulateBranch(2' Real8Value.CompareLe((Real8Value)val1' (Real8Value)val2));  			else  				return false;
Magic Number,de4dot.blocks.cflow,BranchEmulator,C:\repos\0xd4d_de4dot\de4dot.blocks\cflow\BranchEmulator.cs,Emulate_Ble,The following statement contains a magic number: if (val1.IsInt32() && val2.IsInt32())  				return EmulateBranch(2' Int32Value.CompareLe((Int32Value)val1' (Int32Value)val2));  			else if (val1.IsInt64() && val2.IsInt64())  				return EmulateBranch(2' Int64Value.CompareLe((Int64Value)val1' (Int64Value)val2));  			else if (val1.IsReal8() && val2.IsReal8())  				return EmulateBranch(2' Real8Value.CompareLe((Real8Value)val1' (Real8Value)val2));  			else  				return false;
Magic Number,de4dot.blocks.cflow,BranchEmulator,C:\repos\0xd4d_de4dot\de4dot.blocks\cflow\BranchEmulator.cs,Emulate_Ble,The following statement contains a magic number: if (val1.IsInt32() && val2.IsInt32())  				return EmulateBranch(2' Int32Value.CompareLe((Int32Value)val1' (Int32Value)val2));  			else if (val1.IsInt64() && val2.IsInt64())  				return EmulateBranch(2' Int64Value.CompareLe((Int64Value)val1' (Int64Value)val2));  			else if (val1.IsReal8() && val2.IsReal8())  				return EmulateBranch(2' Real8Value.CompareLe((Real8Value)val1' (Real8Value)val2));  			else  				return false;
Magic Number,de4dot.blocks.cflow,BranchEmulator,C:\repos\0xd4d_de4dot\de4dot.blocks\cflow\BranchEmulator.cs,Emulate_Ble_Un,The following statement contains a magic number: if (val1.IsInt32() && val2.IsInt32())  				return EmulateBranch(2' Int32Value.CompareLe_Un((Int32Value)val1' (Int32Value)val2));  			else if (val1.IsInt64() && val2.IsInt64())  				return EmulateBranch(2' Int64Value.CompareLe_Un((Int64Value)val1' (Int64Value)val2));  			else if (val1.IsReal8() && val2.IsReal8())  				return EmulateBranch(2' Real8Value.CompareLe_Un((Real8Value)val1' (Real8Value)val2));  			else  				return false;
Magic Number,de4dot.blocks.cflow,BranchEmulator,C:\repos\0xd4d_de4dot\de4dot.blocks\cflow\BranchEmulator.cs,Emulate_Ble_Un,The following statement contains a magic number: if (val1.IsInt32() && val2.IsInt32())  				return EmulateBranch(2' Int32Value.CompareLe_Un((Int32Value)val1' (Int32Value)val2));  			else if (val1.IsInt64() && val2.IsInt64())  				return EmulateBranch(2' Int64Value.CompareLe_Un((Int64Value)val1' (Int64Value)val2));  			else if (val1.IsReal8() && val2.IsReal8())  				return EmulateBranch(2' Real8Value.CompareLe_Un((Real8Value)val1' (Real8Value)val2));  			else  				return false;
Magic Number,de4dot.blocks.cflow,BranchEmulator,C:\repos\0xd4d_de4dot\de4dot.blocks\cflow\BranchEmulator.cs,Emulate_Ble_Un,The following statement contains a magic number: if (val1.IsInt32() && val2.IsInt32())  				return EmulateBranch(2' Int32Value.CompareLe_Un((Int32Value)val1' (Int32Value)val2));  			else if (val1.IsInt64() && val2.IsInt64())  				return EmulateBranch(2' Int64Value.CompareLe_Un((Int64Value)val1' (Int64Value)val2));  			else if (val1.IsReal8() && val2.IsReal8())  				return EmulateBranch(2' Real8Value.CompareLe_Un((Real8Value)val1' (Real8Value)val2));  			else  				return false;
Magic Number,de4dot.blocks.cflow,BranchEmulator,C:\repos\0xd4d_de4dot\de4dot.blocks\cflow\BranchEmulator.cs,Emulate_Blt,The following statement contains a magic number: if (val1.IsInt32() && val2.IsInt32())  				return EmulateBranch(2' Int32Value.CompareLt((Int32Value)val1' (Int32Value)val2));  			else if (val1.IsInt64() && val2.IsInt64())  				return EmulateBranch(2' Int64Value.CompareLt((Int64Value)val1' (Int64Value)val2));  			else if (val1.IsReal8() && val2.IsReal8())  				return EmulateBranch(2' Real8Value.CompareLt((Real8Value)val1' (Real8Value)val2));  			else  				return false;
Magic Number,de4dot.blocks.cflow,BranchEmulator,C:\repos\0xd4d_de4dot\de4dot.blocks\cflow\BranchEmulator.cs,Emulate_Blt,The following statement contains a magic number: if (val1.IsInt32() && val2.IsInt32())  				return EmulateBranch(2' Int32Value.CompareLt((Int32Value)val1' (Int32Value)val2));  			else if (val1.IsInt64() && val2.IsInt64())  				return EmulateBranch(2' Int64Value.CompareLt((Int64Value)val1' (Int64Value)val2));  			else if (val1.IsReal8() && val2.IsReal8())  				return EmulateBranch(2' Real8Value.CompareLt((Real8Value)val1' (Real8Value)val2));  			else  				return false;
Magic Number,de4dot.blocks.cflow,BranchEmulator,C:\repos\0xd4d_de4dot\de4dot.blocks\cflow\BranchEmulator.cs,Emulate_Blt,The following statement contains a magic number: if (val1.IsInt32() && val2.IsInt32())  				return EmulateBranch(2' Int32Value.CompareLt((Int32Value)val1' (Int32Value)val2));  			else if (val1.IsInt64() && val2.IsInt64())  				return EmulateBranch(2' Int64Value.CompareLt((Int64Value)val1' (Int64Value)val2));  			else if (val1.IsReal8() && val2.IsReal8())  				return EmulateBranch(2' Real8Value.CompareLt((Real8Value)val1' (Real8Value)val2));  			else  				return false;
Magic Number,de4dot.blocks.cflow,BranchEmulator,C:\repos\0xd4d_de4dot\de4dot.blocks\cflow\BranchEmulator.cs,Emulate_Blt_Un,The following statement contains a magic number: if (val1.IsInt32() && val2.IsInt32())  				return EmulateBranch(2' Int32Value.CompareLt_Un((Int32Value)val1' (Int32Value)val2));  			else if (val1.IsInt64() && val2.IsInt64())  				return EmulateBranch(2' Int64Value.CompareLt_Un((Int64Value)val1' (Int64Value)val2));  			else if (val1.IsReal8() && val2.IsReal8())  				return EmulateBranch(2' Real8Value.CompareLt_Un((Real8Value)val1' (Real8Value)val2));  			else  				return false;
Magic Number,de4dot.blocks.cflow,BranchEmulator,C:\repos\0xd4d_de4dot\de4dot.blocks\cflow\BranchEmulator.cs,Emulate_Blt_Un,The following statement contains a magic number: if (val1.IsInt32() && val2.IsInt32())  				return EmulateBranch(2' Int32Value.CompareLt_Un((Int32Value)val1' (Int32Value)val2));  			else if (val1.IsInt64() && val2.IsInt64())  				return EmulateBranch(2' Int64Value.CompareLt_Un((Int64Value)val1' (Int64Value)val2));  			else if (val1.IsReal8() && val2.IsReal8())  				return EmulateBranch(2' Real8Value.CompareLt_Un((Real8Value)val1' (Real8Value)val2));  			else  				return false;
Magic Number,de4dot.blocks.cflow,BranchEmulator,C:\repos\0xd4d_de4dot\de4dot.blocks\cflow\BranchEmulator.cs,Emulate_Blt_Un,The following statement contains a magic number: if (val1.IsInt32() && val2.IsInt32())  				return EmulateBranch(2' Int32Value.CompareLt_Un((Int32Value)val1' (Int32Value)val2));  			else if (val1.IsInt64() && val2.IsInt64())  				return EmulateBranch(2' Int64Value.CompareLt_Un((Int64Value)val1' (Int64Value)val2));  			else if (val1.IsReal8() && val2.IsReal8())  				return EmulateBranch(2' Real8Value.CompareLt_Un((Real8Value)val1' (Real8Value)val2));  			else  				return false;
Magic Number,de4dot.blocks.cflow,ConstantsFolder,C:\repos\0xd4d_de4dot\de4dot.blocks\cflow\ConstantsFolder.cs,Deobfuscate,The following statement contains a magic number: for (int i = 0; i < instrs.Count; i++) {  				var instr = instrs[i];    				switch (instr.OpCode.Code) {  				case Code.Ldarg:  				case Code.Ldarg_0:  				case Code.Ldarg_1:  				case Code.Ldarg_2:  				case Code.Ldarg_3:  				case Code.Ldarg_S:  					modified |= FixLoadInstruction(block' i' instructionEmulator.GetArg(instr.Instruction.GetParameter(args)));  					break;    				case Code.Ldloc:  				case Code.Ldloc_0:  				case Code.Ldloc_1:  				case Code.Ldloc_2:  				case Code.Ldloc_3:  				case Code.Ldloc_S:  					modified |= FixLoadInstruction(block' i' instructionEmulator.GetLocal(instr.Instruction.GetLocal(blocks.Locals)));  					break;    				case Code.Ldarga:  				case Code.Ldarga_S:  					instructionEmulator.MakeArgUnknown((Parameter)instr.Operand);  					break;    				case Code.Ldloca:  				case Code.Ldloca_S:  					instructionEmulator.MakeLocalUnknown((Local)instr.Operand);  					break;    				case Code.Add:  				case Code.Add_Ovf:  				case Code.Add_Ovf_Un:  				case Code.And:  				case Code.Ceq:  				case Code.Cgt:  				case Code.Cgt_Un:  				case Code.Clt:  				case Code.Clt_Un:  				case Code.Conv_I:  				case Code.Conv_I1:  				case Code.Conv_I2:  				case Code.Conv_I4:  				case Code.Conv_I8:  				case Code.Conv_Ovf_I:  				case Code.Conv_Ovf_I_Un:  				case Code.Conv_Ovf_I1:  				case Code.Conv_Ovf_I1_Un:  				case Code.Conv_Ovf_I2:  				case Code.Conv_Ovf_I2_Un:  				case Code.Conv_Ovf_I4:  				case Code.Conv_Ovf_I4_Un:  				case Code.Conv_Ovf_I8:  				case Code.Conv_Ovf_I8_Un:  				case Code.Conv_Ovf_U:  				case Code.Conv_Ovf_U_Un:  				case Code.Conv_Ovf_U1:  				case Code.Conv_Ovf_U1_Un:  				case Code.Conv_Ovf_U2:  				case Code.Conv_Ovf_U2_Un:  				case Code.Conv_Ovf_U4:  				case Code.Conv_Ovf_U4_Un:  				case Code.Conv_Ovf_U8:  				case Code.Conv_Ovf_U8_Un:  				case Code.Conv_R_Un:  				case Code.Conv_R4:  				case Code.Conv_R8:  				case Code.Conv_U:  				case Code.Conv_U1:  				case Code.Conv_U2:  				case Code.Conv_U4:  				case Code.Conv_U8:  				case Code.Div:  				case Code.Div_Un:  				case Code.Dup:  				case Code.Mul:  				case Code.Mul_Ovf:  				case Code.Mul_Ovf_Un:  				case Code.Neg:  				case Code.Not:  				case Code.Or:  				case Code.Rem:  				case Code.Rem_Un:  				case Code.Shl:  				case Code.Shr:  				case Code.Shr_Un:  				case Code.Sub:  				case Code.Sub_Ovf:  				case Code.Sub_Ovf_Un:  				case Code.Xor:  					if (DisableNewCode)  						break;  					if (i + 1 < instrs.Count && instrs[i + 1].OpCode.Code == Code.Pop)  						break;  					if (!VerifyValidArgs(instr.Instruction))  						break;  					instructionEmulator.Emulate(instr.Instruction);  					var tos = instructionEmulator.Peek();  					Instruction newInstr = null;  					if (tos.IsInt32()) {  						var val = (Int32Value)tos;  						if (val.AllBitsValid())  							newInstr = Instruction.CreateLdcI4(val.Value);  					}  					else if (tos.IsInt64()) {  						var val = (Int64Value)tos;  						if (val.AllBitsValid())  							newInstr = OpCodes.Ldc_I8.ToInstruction(val.Value);  					}  					else if (tos.IsReal8()) {  						var val = (Real8Value)tos;  						if (val.IsValid)  							newInstr = GetLoadRealInstruction(val.Value);  					}  					if (newInstr != null) {  						block.Insert(i + 1' Instruction.Create(OpCodes.Pop));  						block.Insert(i + 2' newInstr);  						i += 2;  						modified = true;  					}  					continue;  				}    				try {  					instructionEmulator.Emulate(instr.Instruction);  				}  				catch (NullReferenceException) {  					// Here if eg. invalid metadata token in a call instruction (operand is null)  					break;  				}  			}
Magic Number,de4dot.blocks.cflow,ConstantsFolder,C:\repos\0xd4d_de4dot\de4dot.blocks\cflow\ConstantsFolder.cs,Deobfuscate,The following statement contains a magic number: for (int i = 0; i < instrs.Count; i++) {  				var instr = instrs[i];    				switch (instr.OpCode.Code) {  				case Code.Ldarg:  				case Code.Ldarg_0:  				case Code.Ldarg_1:  				case Code.Ldarg_2:  				case Code.Ldarg_3:  				case Code.Ldarg_S:  					modified |= FixLoadInstruction(block' i' instructionEmulator.GetArg(instr.Instruction.GetParameter(args)));  					break;    				case Code.Ldloc:  				case Code.Ldloc_0:  				case Code.Ldloc_1:  				case Code.Ldloc_2:  				case Code.Ldloc_3:  				case Code.Ldloc_S:  					modified |= FixLoadInstruction(block' i' instructionEmulator.GetLocal(instr.Instruction.GetLocal(blocks.Locals)));  					break;    				case Code.Ldarga:  				case Code.Ldarga_S:  					instructionEmulator.MakeArgUnknown((Parameter)instr.Operand);  					break;    				case Code.Ldloca:  				case Code.Ldloca_S:  					instructionEmulator.MakeLocalUnknown((Local)instr.Operand);  					break;    				case Code.Add:  				case Code.Add_Ovf:  				case Code.Add_Ovf_Un:  				case Code.And:  				case Code.Ceq:  				case Code.Cgt:  				case Code.Cgt_Un:  				case Code.Clt:  				case Code.Clt_Un:  				case Code.Conv_I:  				case Code.Conv_I1:  				case Code.Conv_I2:  				case Code.Conv_I4:  				case Code.Conv_I8:  				case Code.Conv_Ovf_I:  				case Code.Conv_Ovf_I_Un:  				case Code.Conv_Ovf_I1:  				case Code.Conv_Ovf_I1_Un:  				case Code.Conv_Ovf_I2:  				case Code.Conv_Ovf_I2_Un:  				case Code.Conv_Ovf_I4:  				case Code.Conv_Ovf_I4_Un:  				case Code.Conv_Ovf_I8:  				case Code.Conv_Ovf_I8_Un:  				case Code.Conv_Ovf_U:  				case Code.Conv_Ovf_U_Un:  				case Code.Conv_Ovf_U1:  				case Code.Conv_Ovf_U1_Un:  				case Code.Conv_Ovf_U2:  				case Code.Conv_Ovf_U2_Un:  				case Code.Conv_Ovf_U4:  				case Code.Conv_Ovf_U4_Un:  				case Code.Conv_Ovf_U8:  				case Code.Conv_Ovf_U8_Un:  				case Code.Conv_R_Un:  				case Code.Conv_R4:  				case Code.Conv_R8:  				case Code.Conv_U:  				case Code.Conv_U1:  				case Code.Conv_U2:  				case Code.Conv_U4:  				case Code.Conv_U8:  				case Code.Div:  				case Code.Div_Un:  				case Code.Dup:  				case Code.Mul:  				case Code.Mul_Ovf:  				case Code.Mul_Ovf_Un:  				case Code.Neg:  				case Code.Not:  				case Code.Or:  				case Code.Rem:  				case Code.Rem_Un:  				case Code.Shl:  				case Code.Shr:  				case Code.Shr_Un:  				case Code.Sub:  				case Code.Sub_Ovf:  				case Code.Sub_Ovf_Un:  				case Code.Xor:  					if (DisableNewCode)  						break;  					if (i + 1 < instrs.Count && instrs[i + 1].OpCode.Code == Code.Pop)  						break;  					if (!VerifyValidArgs(instr.Instruction))  						break;  					instructionEmulator.Emulate(instr.Instruction);  					var tos = instructionEmulator.Peek();  					Instruction newInstr = null;  					if (tos.IsInt32()) {  						var val = (Int32Value)tos;  						if (val.AllBitsValid())  							newInstr = Instruction.CreateLdcI4(val.Value);  					}  					else if (tos.IsInt64()) {  						var val = (Int64Value)tos;  						if (val.AllBitsValid())  							newInstr = OpCodes.Ldc_I8.ToInstruction(val.Value);  					}  					else if (tos.IsReal8()) {  						var val = (Real8Value)tos;  						if (val.IsValid)  							newInstr = GetLoadRealInstruction(val.Value);  					}  					if (newInstr != null) {  						block.Insert(i + 1' Instruction.Create(OpCodes.Pop));  						block.Insert(i + 2' newInstr);  						i += 2;  						modified = true;  					}  					continue;  				}    				try {  					instructionEmulator.Emulate(instr.Instruction);  				}  				catch (NullReferenceException) {  					// Here if eg. invalid metadata token in a call instruction (operand is null)  					break;  				}  			}
Magic Number,de4dot.blocks.cflow,ConstantsFolder,C:\repos\0xd4d_de4dot\de4dot.blocks\cflow\ConstantsFolder.cs,VerifyValidArgs,The following statement contains a magic number: switch (pops) {  			case 0:  				return true;    			case 1:  				val1 = instructionEmulator.Pop();  				retVal = VerifyValidArg(val1);  				instructionEmulator.Push(val1);  				return retVal;    			case 2:  				val2 = instructionEmulator.Pop();  				val1 = instructionEmulator.Pop();  				retVal = VerifyValidArg(val2) && VerifyValidArg(val1);  				instructionEmulator.Push(val1);  				instructionEmulator.Push(val2);  				return retVal;  			}
Magic Number,de4dot.blocks.cflow,DupBlockCflowDeobfuscator,C:\repos\0xd4d_de4dot\de4dot.blocks\cflow\DupBlockDeobfuscator.cs,Deobfuscate,The following statement contains a magic number: if (block.Instructions.Count != 2)  				return false;
Magic Number,de4dot.blocks.cflow,InstructionEmulator,C:\repos\0xd4d_de4dot\de4dot.blocks\cflow\InstructionEmulator.cs,Emulate,The following statement contains a magic number: switch (instr.OpCode.Code) {  			case Code.Starg:  			case Code.Starg_S:	Emulate_Starg((Parameter)instr.Operand); break;  			case Code.Stloc:  			case Code.Stloc_S:	Emulate_Stloc((Local)instr.Operand); break;  			case Code.Stloc_0:	Emulate_Stloc(0); break;  			case Code.Stloc_1:	Emulate_Stloc(1); break;  			case Code.Stloc_2:	Emulate_Stloc(2); break;  			case Code.Stloc_3:	Emulate_Stloc(3); break;    			case Code.Ldarg:  			case Code.Ldarg_S:	valueStack.Push(GetArg((Parameter)instr.Operand)); break;  			case Code.Ldarg_0:	valueStack.Push(GetArg(0)); break;  			case Code.Ldarg_1:	valueStack.Push(GetArg(1)); break;  			case Code.Ldarg_2:	valueStack.Push(GetArg(2)); break;  			case Code.Ldarg_3:	valueStack.Push(GetArg(3)); break;  			case Code.Ldloc:  			case Code.Ldloc_S:	valueStack.Push(GetLocal((Local)instr.Operand)); break;  			case Code.Ldloc_0:	valueStack.Push(GetLocal(0)); break;  			case Code.Ldloc_1:	valueStack.Push(GetLocal(1)); break;  			case Code.Ldloc_2:	valueStack.Push(GetLocal(2)); break;  			case Code.Ldloc_3:	valueStack.Push(GetLocal(3)); break;    			case Code.Ldarga:  			case Code.Ldarga_S:	Emulate_Ldarga((Parameter)instr.Operand); break;  			case Code.Ldloca:  			case Code.Ldloca_S:	Emulate_Ldloca((Local)instr.Operand); break;    			case Code.Dup:		valueStack.CopyTop(); break;    			case Code.Ldc_I4:	valueStack.Push(new Int32Value((int)instr.Operand)); break;  			case Code.Ldc_I4_S:	valueStack.Push(new Int32Value((sbyte)instr.Operand)); break;  			case Code.Ldc_I8:	valueStack.Push(new Int64Value((long)instr.Operand)); break;  			case Code.Ldc_R4:	valueStack.Push(new Real8Value((float)instr.Operand)); break;  			case Code.Ldc_R8:	valueStack.Push(new Real8Value((double)instr.Operand)); break;  			case Code.Ldc_I4_0:	valueStack.Push(Int32Value.Zero); break;  			case Code.Ldc_I4_1:	valueStack.Push(Int32Value.One); break;  			case Code.Ldc_I4_2:	valueStack.Push(new Int32Value(2)); break;  			case Code.Ldc_I4_3:	valueStack.Push(new Int32Value(3)); break;  			case Code.Ldc_I4_4:	valueStack.Push(new Int32Value(4)); break;  			case Code.Ldc_I4_5:	valueStack.Push(new Int32Value(5)); break;  			case Code.Ldc_I4_6:	valueStack.Push(new Int32Value(6)); break;  			case Code.Ldc_I4_7:	valueStack.Push(new Int32Value(7)); break;  			case Code.Ldc_I4_8:	valueStack.Push(new Int32Value(8)); break;  			case Code.Ldc_I4_M1:valueStack.Push(new Int32Value(-1)); break;  			case Code.Ldnull:	valueStack.Push(NullValue.Instance); break;  			case Code.Ldstr:	valueStack.Push(new StringValue((string)instr.Operand)); break;  			case Code.Box:		valueStack.Push(new BoxedValue(valueStack.Pop())); break;    			case Code.Conv_U1:	Emulate_Conv_U1(instr); break;  			case Code.Conv_U2:	Emulate_Conv_U2(instr); break;  			case Code.Conv_U4:	Emulate_Conv_U4(instr); break;  			case Code.Conv_U8:	Emulate_Conv_U8(instr); break;  			case Code.Conv_I1:	Emulate_Conv_I1(instr); break;  			case Code.Conv_I2:	Emulate_Conv_I2(instr); break;  			case Code.Conv_I4:	Emulate_Conv_I4(instr); break;  			case Code.Conv_I8:	Emulate_Conv_I8(instr); break;  			case Code.Add:		Emulate_Add(instr); break;  			case Code.Sub:		Emulate_Sub(instr); break;  			case Code.Mul:		Emulate_Mul(instr); break;  			case Code.Div:		Emulate_Div(instr); break;  			case Code.Div_Un:	Emulate_Div_Un(instr); break;  			case Code.Rem:		Emulate_Rem(instr); break;  			case Code.Rem_Un:	Emulate_Rem_Un(instr); break;  			case Code.Neg:		Emulate_Neg(instr); break;  			case Code.And:		Emulate_And(instr); break;  			case Code.Or:		Emulate_Or(instr); break;  			case Code.Xor:		Emulate_Xor(instr); break;  			case Code.Not:		Emulate_Not(instr); break;  			case Code.Shl:		Emulate_Shl(instr); break;  			case Code.Shr:		Emulate_Shr(instr); break;  			case Code.Shr_Un:	Emulate_Shr_Un(instr); break;  			case Code.Ceq:		Emulate_Ceq(instr); break;  			case Code.Cgt:		Emulate_Cgt(instr); break;  			case Code.Cgt_Un:	Emulate_Cgt_Un(instr); break;  			case Code.Clt:		Emulate_Clt(instr); break;  			case Code.Clt_Un:	Emulate_Clt_Un(instr); break;  			case Code.Unbox_Any:Emulate_Unbox_Any(instr); break;    			case Code.Call:		Emulate_Call(instr); break;  			case Code.Callvirt:	Emulate_Callvirt(instr); break;    			case Code.Castclass: Emulate_Castclass(instr); break;  			case Code.Isinst:	Emulate_Isinst(instr); break;    			case Code.Add_Ovf:	Emulate_Add_Ovf(instr); break;  			case Code.Add_Ovf_Un: Emulate_Add_Ovf_Un(instr); break;  			case Code.Sub_Ovf:	Emulate_Sub_Ovf(instr); break;  			case Code.Sub_Ovf_Un: Emulate_Sub_Ovf_Un(instr); break;  			case Code.Mul_Ovf:	Emulate_Mul_Ovf(instr); break;  			case Code.Mul_Ovf_Un: Emulate_Mul_Ovf_Un(instr); break;    			case Code.Conv_Ovf_I1:		Emulate_Conv_Ovf_I1(instr); break;  			case Code.Conv_Ovf_I1_Un:	Emulate_Conv_Ovf_I1_Un(instr); break;  			case Code.Conv_Ovf_I2:		Emulate_Conv_Ovf_I2(instr); break;  			case Code.Conv_Ovf_I2_Un:	Emulate_Conv_Ovf_I2_Un(instr); break;  			case Code.Conv_Ovf_I4:		Emulate_Conv_Ovf_I4(instr); break;  			case Code.Conv_Ovf_I4_Un:	Emulate_Conv_Ovf_I4_Un(instr); break;  			case Code.Conv_Ovf_I8:		Emulate_Conv_Ovf_I8(instr); break;  			case Code.Conv_Ovf_I8_Un:	Emulate_Conv_Ovf_I8_Un(instr); break;  			case Code.Conv_Ovf_U1:		Emulate_Conv_Ovf_U1(instr); break;  			case Code.Conv_Ovf_U1_Un:	Emulate_Conv_Ovf_U1_Un(instr); break;  			case Code.Conv_Ovf_U2:		Emulate_Conv_Ovf_U2(instr); break;  			case Code.Conv_Ovf_U2_Un:	Emulate_Conv_Ovf_U2_Un(instr); break;  			case Code.Conv_Ovf_U4:		Emulate_Conv_Ovf_U4(instr); break;  			case Code.Conv_Ovf_U4_Un:	Emulate_Conv_Ovf_U4_Un(instr); break;  			case Code.Conv_Ovf_U8:		Emulate_Conv_Ovf_U8(instr); break;  			case Code.Conv_Ovf_U8_Un:	Emulate_Conv_Ovf_U8_Un(instr); break;    			case Code.Ldelem_I1: valueStack.Pop(2); valueStack.Push(Int32Value.CreateUnknown()); break;  			case Code.Ldelem_I2: valueStack.Pop(2); valueStack.Push(Int32Value.CreateUnknown()); break;  			case Code.Ldelem_I4: valueStack.Pop(2); valueStack.Push(Int32Value.CreateUnknown()); break;  			case Code.Ldelem_I8: valueStack.Pop(2); valueStack.Push(Int64Value.CreateUnknown()); break;  			case Code.Ldelem_U1: valueStack.Pop(2); valueStack.Push(Int32Value.CreateUnknownUInt8()); break;  			case Code.Ldelem_U2: valueStack.Pop(2); valueStack.Push(Int32Value.CreateUnknownUInt16()); break;  			case Code.Ldelem_U4: valueStack.Pop(2); valueStack.Push(Int32Value.CreateUnknown()); break;  			case Code.Ldelem:	 valueStack.Pop(2); valueStack.Push(GetUnknownValue(instr.Operand as ITypeDefOrRef)); break;    			case Code.Ldind_I1:	valueStack.Pop(); valueStack.Push(Int32Value.CreateUnknown()); break;  			case Code.Ldind_I2:	valueStack.Pop(); valueStack.Push(Int32Value.CreateUnknown()); break;  			case Code.Ldind_I4:	valueStack.Pop(); valueStack.Push(Int32Value.CreateUnknown()); break;  			case Code.Ldind_I8:	valueStack.Pop(); valueStack.Push(Int64Value.CreateUnknown()); break;  			case Code.Ldind_U1:	valueStack.Pop(); valueStack.Push(Int32Value.CreateUnknownUInt8()); break;  			case Code.Ldind_U2:	valueStack.Pop(); valueStack.Push(Int32Value.CreateUnknownUInt16()); break;  			case Code.Ldind_U4:	valueStack.Pop(); valueStack.Push(Int32Value.CreateUnknown()); break;    			case Code.Ldlen:	valueStack.Pop(); valueStack.Push(Int32Value.CreateUnknown()); break;  			case Code.Sizeof:	valueStack.Push(Int32Value.CreateUnknown()); break;    			case Code.Ldfld:	Emulate_Ldfld(instr); break;  			case Code.Ldsfld:	Emulate_Ldsfld(instr); break;    			case Code.Ldftn:	valueStack.Push(new ObjectValue(instr.Operand)); break;  			case Code.Ldsflda:	valueStack.Push(new ObjectValue(instr.Operand)); break;  			case Code.Ldtoken:	valueStack.Push(new ObjectValue(instr.Operand)); break;  			case Code.Ldvirtftn:valueStack.Pop(); valueStack.Push(new ObjectValue()); break;  			case Code.Ldflda:	valueStack.Pop(); valueStack.Push(new ObjectValue()); break;    			case Code.Unbox:    			case Code.Conv_R_Un:Emulate_Conv_R_Un(instr); break;  			case Code.Conv_R4:	Emulate_Conv_R4(instr); break;  			case Code.Conv_R8:	Emulate_Conv_R8(instr); break;    			case Code.Arglist:  			case Code.Beq:  			case Code.Beq_S:  			case Code.Bge:  			case Code.Bge_S:  			case Code.Bge_Un:  			case Code.Bge_Un_S:  			case Code.Bgt:  			case Code.Bgt_S:  			case Code.Bgt_Un:  			case Code.Bgt_Un_S:  			case Code.Ble:  			case Code.Ble_S:  			case Code.Ble_Un:  			case Code.Ble_Un_S:  			case Code.Blt:  			case Code.Blt_S:  			case Code.Blt_Un:  			case Code.Blt_Un_S:  			case Code.Bne_Un:  			case Code.Bne_Un_S:  			case Code.Brfalse:  			case Code.Brfalse_S:  			case Code.Brtrue:  			case Code.Brtrue_S:  			case Code.Br:  			case Code.Br_S:  			case Code.Break:  			case Code.Calli:  			case Code.Ckfinite:  			case Code.Constrained:  			case Code.Conv_I:  			case Code.Conv_Ovf_I:  			case Code.Conv_Ovf_I_Un:  			case Code.Conv_Ovf_U:  			case Code.Conv_Ovf_U_Un:  			case Code.Conv_U:  			case Code.Cpblk:  			case Code.Cpobj:  			case Code.Endfilter:  			case Code.Endfinally:  			case Code.Initblk:  			case Code.Initobj:  			case Code.Jmp:  			case Code.Ldelema:  			case Code.Ldelem_I:  			case Code.Ldelem_R4:  			case Code.Ldelem_R8:  			case Code.Ldelem_Ref:  			case Code.Ldind_I:  			case Code.Ldind_R4:  			case Code.Ldind_R8:  			case Code.Ldind_Ref:  			case Code.Ldobj:  			case Code.Leave:  			case Code.Leave_S:  			case Code.Localloc:  			case Code.Mkrefany:  			case Code.Newarr:  			case Code.Newobj:  			case Code.Nop:  			case Code.Pop:  			case Code.Readonly:  			case Code.Refanytype:  			case Code.Refanyval:  			case Code.Ret:  			case Code.Rethrow:  			case Code.Stelem:  			case Code.Stelem_I:  			case Code.Stelem_I1:  			case Code.Stelem_I2:  			case Code.Stelem_I4:  			case Code.Stelem_I8:  			case Code.Stelem_R4:  			case Code.Stelem_R8:  			case Code.Stelem_Ref:  			case Code.Stfld:  			case Code.Stind_I:  			case Code.Stind_I1:  			case Code.Stind_I2:  			case Code.Stind_I4:  			case Code.Stind_I8:  			case Code.Stind_R4:  			case Code.Stind_R8:  			case Code.Stind_Ref:  			case Code.Stobj:  			case Code.Stsfld:  			case Code.Switch:  			case Code.Tailcall:  			case Code.Throw:  			case Code.Unaligned:  			case Code.Volatile:  			default:  				UpdateStack(instr);  				break;  			}
Magic Number,de4dot.blocks.cflow,InstructionEmulator,C:\repos\0xd4d_de4dot\de4dot.blocks\cflow\InstructionEmulator.cs,Emulate,The following statement contains a magic number: switch (instr.OpCode.Code) {  			case Code.Starg:  			case Code.Starg_S:	Emulate_Starg((Parameter)instr.Operand); break;  			case Code.Stloc:  			case Code.Stloc_S:	Emulate_Stloc((Local)instr.Operand); break;  			case Code.Stloc_0:	Emulate_Stloc(0); break;  			case Code.Stloc_1:	Emulate_Stloc(1); break;  			case Code.Stloc_2:	Emulate_Stloc(2); break;  			case Code.Stloc_3:	Emulate_Stloc(3); break;    			case Code.Ldarg:  			case Code.Ldarg_S:	valueStack.Push(GetArg((Parameter)instr.Operand)); break;  			case Code.Ldarg_0:	valueStack.Push(GetArg(0)); break;  			case Code.Ldarg_1:	valueStack.Push(GetArg(1)); break;  			case Code.Ldarg_2:	valueStack.Push(GetArg(2)); break;  			case Code.Ldarg_3:	valueStack.Push(GetArg(3)); break;  			case Code.Ldloc:  			case Code.Ldloc_S:	valueStack.Push(GetLocal((Local)instr.Operand)); break;  			case Code.Ldloc_0:	valueStack.Push(GetLocal(0)); break;  			case Code.Ldloc_1:	valueStack.Push(GetLocal(1)); break;  			case Code.Ldloc_2:	valueStack.Push(GetLocal(2)); break;  			case Code.Ldloc_3:	valueStack.Push(GetLocal(3)); break;    			case Code.Ldarga:  			case Code.Ldarga_S:	Emulate_Ldarga((Parameter)instr.Operand); break;  			case Code.Ldloca:  			case Code.Ldloca_S:	Emulate_Ldloca((Local)instr.Operand); break;    			case Code.Dup:		valueStack.CopyTop(); break;    			case Code.Ldc_I4:	valueStack.Push(new Int32Value((int)instr.Operand)); break;  			case Code.Ldc_I4_S:	valueStack.Push(new Int32Value((sbyte)instr.Operand)); break;  			case Code.Ldc_I8:	valueStack.Push(new Int64Value((long)instr.Operand)); break;  			case Code.Ldc_R4:	valueStack.Push(new Real8Value((float)instr.Operand)); break;  			case Code.Ldc_R8:	valueStack.Push(new Real8Value((double)instr.Operand)); break;  			case Code.Ldc_I4_0:	valueStack.Push(Int32Value.Zero); break;  			case Code.Ldc_I4_1:	valueStack.Push(Int32Value.One); break;  			case Code.Ldc_I4_2:	valueStack.Push(new Int32Value(2)); break;  			case Code.Ldc_I4_3:	valueStack.Push(new Int32Value(3)); break;  			case Code.Ldc_I4_4:	valueStack.Push(new Int32Value(4)); break;  			case Code.Ldc_I4_5:	valueStack.Push(new Int32Value(5)); break;  			case Code.Ldc_I4_6:	valueStack.Push(new Int32Value(6)); break;  			case Code.Ldc_I4_7:	valueStack.Push(new Int32Value(7)); break;  			case Code.Ldc_I4_8:	valueStack.Push(new Int32Value(8)); break;  			case Code.Ldc_I4_M1:valueStack.Push(new Int32Value(-1)); break;  			case Code.Ldnull:	valueStack.Push(NullValue.Instance); break;  			case Code.Ldstr:	valueStack.Push(new StringValue((string)instr.Operand)); break;  			case Code.Box:		valueStack.Push(new BoxedValue(valueStack.Pop())); break;    			case Code.Conv_U1:	Emulate_Conv_U1(instr); break;  			case Code.Conv_U2:	Emulate_Conv_U2(instr); break;  			case Code.Conv_U4:	Emulate_Conv_U4(instr); break;  			case Code.Conv_U8:	Emulate_Conv_U8(instr); break;  			case Code.Conv_I1:	Emulate_Conv_I1(instr); break;  			case Code.Conv_I2:	Emulate_Conv_I2(instr); break;  			case Code.Conv_I4:	Emulate_Conv_I4(instr); break;  			case Code.Conv_I8:	Emulate_Conv_I8(instr); break;  			case Code.Add:		Emulate_Add(instr); break;  			case Code.Sub:		Emulate_Sub(instr); break;  			case Code.Mul:		Emulate_Mul(instr); break;  			case Code.Div:		Emulate_Div(instr); break;  			case Code.Div_Un:	Emulate_Div_Un(instr); break;  			case Code.Rem:		Emulate_Rem(instr); break;  			case Code.Rem_Un:	Emulate_Rem_Un(instr); break;  			case Code.Neg:		Emulate_Neg(instr); break;  			case Code.And:		Emulate_And(instr); break;  			case Code.Or:		Emulate_Or(instr); break;  			case Code.Xor:		Emulate_Xor(instr); break;  			case Code.Not:		Emulate_Not(instr); break;  			case Code.Shl:		Emulate_Shl(instr); break;  			case Code.Shr:		Emulate_Shr(instr); break;  			case Code.Shr_Un:	Emulate_Shr_Un(instr); break;  			case Code.Ceq:		Emulate_Ceq(instr); break;  			case Code.Cgt:		Emulate_Cgt(instr); break;  			case Code.Cgt_Un:	Emulate_Cgt_Un(instr); break;  			case Code.Clt:		Emulate_Clt(instr); break;  			case Code.Clt_Un:	Emulate_Clt_Un(instr); break;  			case Code.Unbox_Any:Emulate_Unbox_Any(instr); break;    			case Code.Call:		Emulate_Call(instr); break;  			case Code.Callvirt:	Emulate_Callvirt(instr); break;    			case Code.Castclass: Emulate_Castclass(instr); break;  			case Code.Isinst:	Emulate_Isinst(instr); break;    			case Code.Add_Ovf:	Emulate_Add_Ovf(instr); break;  			case Code.Add_Ovf_Un: Emulate_Add_Ovf_Un(instr); break;  			case Code.Sub_Ovf:	Emulate_Sub_Ovf(instr); break;  			case Code.Sub_Ovf_Un: Emulate_Sub_Ovf_Un(instr); break;  			case Code.Mul_Ovf:	Emulate_Mul_Ovf(instr); break;  			case Code.Mul_Ovf_Un: Emulate_Mul_Ovf_Un(instr); break;    			case Code.Conv_Ovf_I1:		Emulate_Conv_Ovf_I1(instr); break;  			case Code.Conv_Ovf_I1_Un:	Emulate_Conv_Ovf_I1_Un(instr); break;  			case Code.Conv_Ovf_I2:		Emulate_Conv_Ovf_I2(instr); break;  			case Code.Conv_Ovf_I2_Un:	Emulate_Conv_Ovf_I2_Un(instr); break;  			case Code.Conv_Ovf_I4:		Emulate_Conv_Ovf_I4(instr); break;  			case Code.Conv_Ovf_I4_Un:	Emulate_Conv_Ovf_I4_Un(instr); break;  			case Code.Conv_Ovf_I8:		Emulate_Conv_Ovf_I8(instr); break;  			case Code.Conv_Ovf_I8_Un:	Emulate_Conv_Ovf_I8_Un(instr); break;  			case Code.Conv_Ovf_U1:		Emulate_Conv_Ovf_U1(instr); break;  			case Code.Conv_Ovf_U1_Un:	Emulate_Conv_Ovf_U1_Un(instr); break;  			case Code.Conv_Ovf_U2:		Emulate_Conv_Ovf_U2(instr); break;  			case Code.Conv_Ovf_U2_Un:	Emulate_Conv_Ovf_U2_Un(instr); break;  			case Code.Conv_Ovf_U4:		Emulate_Conv_Ovf_U4(instr); break;  			case Code.Conv_Ovf_U4_Un:	Emulate_Conv_Ovf_U4_Un(instr); break;  			case Code.Conv_Ovf_U8:		Emulate_Conv_Ovf_U8(instr); break;  			case Code.Conv_Ovf_U8_Un:	Emulate_Conv_Ovf_U8_Un(instr); break;    			case Code.Ldelem_I1: valueStack.Pop(2); valueStack.Push(Int32Value.CreateUnknown()); break;  			case Code.Ldelem_I2: valueStack.Pop(2); valueStack.Push(Int32Value.CreateUnknown()); break;  			case Code.Ldelem_I4: valueStack.Pop(2); valueStack.Push(Int32Value.CreateUnknown()); break;  			case Code.Ldelem_I8: valueStack.Pop(2); valueStack.Push(Int64Value.CreateUnknown()); break;  			case Code.Ldelem_U1: valueStack.Pop(2); valueStack.Push(Int32Value.CreateUnknownUInt8()); break;  			case Code.Ldelem_U2: valueStack.Pop(2); valueStack.Push(Int32Value.CreateUnknownUInt16()); break;  			case Code.Ldelem_U4: valueStack.Pop(2); valueStack.Push(Int32Value.CreateUnknown()); break;  			case Code.Ldelem:	 valueStack.Pop(2); valueStack.Push(GetUnknownValue(instr.Operand as ITypeDefOrRef)); break;    			case Code.Ldind_I1:	valueStack.Pop(); valueStack.Push(Int32Value.CreateUnknown()); break;  			case Code.Ldind_I2:	valueStack.Pop(); valueStack.Push(Int32Value.CreateUnknown()); break;  			case Code.Ldind_I4:	valueStack.Pop(); valueStack.Push(Int32Value.CreateUnknown()); break;  			case Code.Ldind_I8:	valueStack.Pop(); valueStack.Push(Int64Value.CreateUnknown()); break;  			case Code.Ldind_U1:	valueStack.Pop(); valueStack.Push(Int32Value.CreateUnknownUInt8()); break;  			case Code.Ldind_U2:	valueStack.Pop(); valueStack.Push(Int32Value.CreateUnknownUInt16()); break;  			case Code.Ldind_U4:	valueStack.Pop(); valueStack.Push(Int32Value.CreateUnknown()); break;    			case Code.Ldlen:	valueStack.Pop(); valueStack.Push(Int32Value.CreateUnknown()); break;  			case Code.Sizeof:	valueStack.Push(Int32Value.CreateUnknown()); break;    			case Code.Ldfld:	Emulate_Ldfld(instr); break;  			case Code.Ldsfld:	Emulate_Ldsfld(instr); break;    			case Code.Ldftn:	valueStack.Push(new ObjectValue(instr.Operand)); break;  			case Code.Ldsflda:	valueStack.Push(new ObjectValue(instr.Operand)); break;  			case Code.Ldtoken:	valueStack.Push(new ObjectValue(instr.Operand)); break;  			case Code.Ldvirtftn:valueStack.Pop(); valueStack.Push(new ObjectValue()); break;  			case Code.Ldflda:	valueStack.Pop(); valueStack.Push(new ObjectValue()); break;    			case Code.Unbox:    			case Code.Conv_R_Un:Emulate_Conv_R_Un(instr); break;  			case Code.Conv_R4:	Emulate_Conv_R4(instr); break;  			case Code.Conv_R8:	Emulate_Conv_R8(instr); break;    			case Code.Arglist:  			case Code.Beq:  			case Code.Beq_S:  			case Code.Bge:  			case Code.Bge_S:  			case Code.Bge_Un:  			case Code.Bge_Un_S:  			case Code.Bgt:  			case Code.Bgt_S:  			case Code.Bgt_Un:  			case Code.Bgt_Un_S:  			case Code.Ble:  			case Code.Ble_S:  			case Code.Ble_Un:  			case Code.Ble_Un_S:  			case Code.Blt:  			case Code.Blt_S:  			case Code.Blt_Un:  			case Code.Blt_Un_S:  			case Code.Bne_Un:  			case Code.Bne_Un_S:  			case Code.Brfalse:  			case Code.Brfalse_S:  			case Code.Brtrue:  			case Code.Brtrue_S:  			case Code.Br:  			case Code.Br_S:  			case Code.Break:  			case Code.Calli:  			case Code.Ckfinite:  			case Code.Constrained:  			case Code.Conv_I:  			case Code.Conv_Ovf_I:  			case Code.Conv_Ovf_I_Un:  			case Code.Conv_Ovf_U:  			case Code.Conv_Ovf_U_Un:  			case Code.Conv_U:  			case Code.Cpblk:  			case Code.Cpobj:  			case Code.Endfilter:  			case Code.Endfinally:  			case Code.Initblk:  			case Code.Initobj:  			case Code.Jmp:  			case Code.Ldelema:  			case Code.Ldelem_I:  			case Code.Ldelem_R4:  			case Code.Ldelem_R8:  			case Code.Ldelem_Ref:  			case Code.Ldind_I:  			case Code.Ldind_R4:  			case Code.Ldind_R8:  			case Code.Ldind_Ref:  			case Code.Ldobj:  			case Code.Leave:  			case Code.Leave_S:  			case Code.Localloc:  			case Code.Mkrefany:  			case Code.Newarr:  			case Code.Newobj:  			case Code.Nop:  			case Code.Pop:  			case Code.Readonly:  			case Code.Refanytype:  			case Code.Refanyval:  			case Code.Ret:  			case Code.Rethrow:  			case Code.Stelem:  			case Code.Stelem_I:  			case Code.Stelem_I1:  			case Code.Stelem_I2:  			case Code.Stelem_I4:  			case Code.Stelem_I8:  			case Code.Stelem_R4:  			case Code.Stelem_R8:  			case Code.Stelem_Ref:  			case Code.Stfld:  			case Code.Stind_I:  			case Code.Stind_I1:  			case Code.Stind_I2:  			case Code.Stind_I4:  			case Code.Stind_I8:  			case Code.Stind_R4:  			case Code.Stind_R8:  			case Code.Stind_Ref:  			case Code.Stobj:  			case Code.Stsfld:  			case Code.Switch:  			case Code.Tailcall:  			case Code.Throw:  			case Code.Unaligned:  			case Code.Volatile:  			default:  				UpdateStack(instr);  				break;  			}
Magic Number,de4dot.blocks.cflow,InstructionEmulator,C:\repos\0xd4d_de4dot\de4dot.blocks\cflow\InstructionEmulator.cs,Emulate,The following statement contains a magic number: switch (instr.OpCode.Code) {  			case Code.Starg:  			case Code.Starg_S:	Emulate_Starg((Parameter)instr.Operand); break;  			case Code.Stloc:  			case Code.Stloc_S:	Emulate_Stloc((Local)instr.Operand); break;  			case Code.Stloc_0:	Emulate_Stloc(0); break;  			case Code.Stloc_1:	Emulate_Stloc(1); break;  			case Code.Stloc_2:	Emulate_Stloc(2); break;  			case Code.Stloc_3:	Emulate_Stloc(3); break;    			case Code.Ldarg:  			case Code.Ldarg_S:	valueStack.Push(GetArg((Parameter)instr.Operand)); break;  			case Code.Ldarg_0:	valueStack.Push(GetArg(0)); break;  			case Code.Ldarg_1:	valueStack.Push(GetArg(1)); break;  			case Code.Ldarg_2:	valueStack.Push(GetArg(2)); break;  			case Code.Ldarg_3:	valueStack.Push(GetArg(3)); break;  			case Code.Ldloc:  			case Code.Ldloc_S:	valueStack.Push(GetLocal((Local)instr.Operand)); break;  			case Code.Ldloc_0:	valueStack.Push(GetLocal(0)); break;  			case Code.Ldloc_1:	valueStack.Push(GetLocal(1)); break;  			case Code.Ldloc_2:	valueStack.Push(GetLocal(2)); break;  			case Code.Ldloc_3:	valueStack.Push(GetLocal(3)); break;    			case Code.Ldarga:  			case Code.Ldarga_S:	Emulate_Ldarga((Parameter)instr.Operand); break;  			case Code.Ldloca:  			case Code.Ldloca_S:	Emulate_Ldloca((Local)instr.Operand); break;    			case Code.Dup:		valueStack.CopyTop(); break;    			case Code.Ldc_I4:	valueStack.Push(new Int32Value((int)instr.Operand)); break;  			case Code.Ldc_I4_S:	valueStack.Push(new Int32Value((sbyte)instr.Operand)); break;  			case Code.Ldc_I8:	valueStack.Push(new Int64Value((long)instr.Operand)); break;  			case Code.Ldc_R4:	valueStack.Push(new Real8Value((float)instr.Operand)); break;  			case Code.Ldc_R8:	valueStack.Push(new Real8Value((double)instr.Operand)); break;  			case Code.Ldc_I4_0:	valueStack.Push(Int32Value.Zero); break;  			case Code.Ldc_I4_1:	valueStack.Push(Int32Value.One); break;  			case Code.Ldc_I4_2:	valueStack.Push(new Int32Value(2)); break;  			case Code.Ldc_I4_3:	valueStack.Push(new Int32Value(3)); break;  			case Code.Ldc_I4_4:	valueStack.Push(new Int32Value(4)); break;  			case Code.Ldc_I4_5:	valueStack.Push(new Int32Value(5)); break;  			case Code.Ldc_I4_6:	valueStack.Push(new Int32Value(6)); break;  			case Code.Ldc_I4_7:	valueStack.Push(new Int32Value(7)); break;  			case Code.Ldc_I4_8:	valueStack.Push(new Int32Value(8)); break;  			case Code.Ldc_I4_M1:valueStack.Push(new Int32Value(-1)); break;  			case Code.Ldnull:	valueStack.Push(NullValue.Instance); break;  			case Code.Ldstr:	valueStack.Push(new StringValue((string)instr.Operand)); break;  			case Code.Box:		valueStack.Push(new BoxedValue(valueStack.Pop())); break;    			case Code.Conv_U1:	Emulate_Conv_U1(instr); break;  			case Code.Conv_U2:	Emulate_Conv_U2(instr); break;  			case Code.Conv_U4:	Emulate_Conv_U4(instr); break;  			case Code.Conv_U8:	Emulate_Conv_U8(instr); break;  			case Code.Conv_I1:	Emulate_Conv_I1(instr); break;  			case Code.Conv_I2:	Emulate_Conv_I2(instr); break;  			case Code.Conv_I4:	Emulate_Conv_I4(instr); break;  			case Code.Conv_I8:	Emulate_Conv_I8(instr); break;  			case Code.Add:		Emulate_Add(instr); break;  			case Code.Sub:		Emulate_Sub(instr); break;  			case Code.Mul:		Emulate_Mul(instr); break;  			case Code.Div:		Emulate_Div(instr); break;  			case Code.Div_Un:	Emulate_Div_Un(instr); break;  			case Code.Rem:		Emulate_Rem(instr); break;  			case Code.Rem_Un:	Emulate_Rem_Un(instr); break;  			case Code.Neg:		Emulate_Neg(instr); break;  			case Code.And:		Emulate_And(instr); break;  			case Code.Or:		Emulate_Or(instr); break;  			case Code.Xor:		Emulate_Xor(instr); break;  			case Code.Not:		Emulate_Not(instr); break;  			case Code.Shl:		Emulate_Shl(instr); break;  			case Code.Shr:		Emulate_Shr(instr); break;  			case Code.Shr_Un:	Emulate_Shr_Un(instr); break;  			case Code.Ceq:		Emulate_Ceq(instr); break;  			case Code.Cgt:		Emulate_Cgt(instr); break;  			case Code.Cgt_Un:	Emulate_Cgt_Un(instr); break;  			case Code.Clt:		Emulate_Clt(instr); break;  			case Code.Clt_Un:	Emulate_Clt_Un(instr); break;  			case Code.Unbox_Any:Emulate_Unbox_Any(instr); break;    			case Code.Call:		Emulate_Call(instr); break;  			case Code.Callvirt:	Emulate_Callvirt(instr); break;    			case Code.Castclass: Emulate_Castclass(instr); break;  			case Code.Isinst:	Emulate_Isinst(instr); break;    			case Code.Add_Ovf:	Emulate_Add_Ovf(instr); break;  			case Code.Add_Ovf_Un: Emulate_Add_Ovf_Un(instr); break;  			case Code.Sub_Ovf:	Emulate_Sub_Ovf(instr); break;  			case Code.Sub_Ovf_Un: Emulate_Sub_Ovf_Un(instr); break;  			case Code.Mul_Ovf:	Emulate_Mul_Ovf(instr); break;  			case Code.Mul_Ovf_Un: Emulate_Mul_Ovf_Un(instr); break;    			case Code.Conv_Ovf_I1:		Emulate_Conv_Ovf_I1(instr); break;  			case Code.Conv_Ovf_I1_Un:	Emulate_Conv_Ovf_I1_Un(instr); break;  			case Code.Conv_Ovf_I2:		Emulate_Conv_Ovf_I2(instr); break;  			case Code.Conv_Ovf_I2_Un:	Emulate_Conv_Ovf_I2_Un(instr); break;  			case Code.Conv_Ovf_I4:		Emulate_Conv_Ovf_I4(instr); break;  			case Code.Conv_Ovf_I4_Un:	Emulate_Conv_Ovf_I4_Un(instr); break;  			case Code.Conv_Ovf_I8:		Emulate_Conv_Ovf_I8(instr); break;  			case Code.Conv_Ovf_I8_Un:	Emulate_Conv_Ovf_I8_Un(instr); break;  			case Code.Conv_Ovf_U1:		Emulate_Conv_Ovf_U1(instr); break;  			case Code.Conv_Ovf_U1_Un:	Emulate_Conv_Ovf_U1_Un(instr); break;  			case Code.Conv_Ovf_U2:		Emulate_Conv_Ovf_U2(instr); break;  			case Code.Conv_Ovf_U2_Un:	Emulate_Conv_Ovf_U2_Un(instr); break;  			case Code.Conv_Ovf_U4:		Emulate_Conv_Ovf_U4(instr); break;  			case Code.Conv_Ovf_U4_Un:	Emulate_Conv_Ovf_U4_Un(instr); break;  			case Code.Conv_Ovf_U8:		Emulate_Conv_Ovf_U8(instr); break;  			case Code.Conv_Ovf_U8_Un:	Emulate_Conv_Ovf_U8_Un(instr); break;    			case Code.Ldelem_I1: valueStack.Pop(2); valueStack.Push(Int32Value.CreateUnknown()); break;  			case Code.Ldelem_I2: valueStack.Pop(2); valueStack.Push(Int32Value.CreateUnknown()); break;  			case Code.Ldelem_I4: valueStack.Pop(2); valueStack.Push(Int32Value.CreateUnknown()); break;  			case Code.Ldelem_I8: valueStack.Pop(2); valueStack.Push(Int64Value.CreateUnknown()); break;  			case Code.Ldelem_U1: valueStack.Pop(2); valueStack.Push(Int32Value.CreateUnknownUInt8()); break;  			case Code.Ldelem_U2: valueStack.Pop(2); valueStack.Push(Int32Value.CreateUnknownUInt16()); break;  			case Code.Ldelem_U4: valueStack.Pop(2); valueStack.Push(Int32Value.CreateUnknown()); break;  			case Code.Ldelem:	 valueStack.Pop(2); valueStack.Push(GetUnknownValue(instr.Operand as ITypeDefOrRef)); break;    			case Code.Ldind_I1:	valueStack.Pop(); valueStack.Push(Int32Value.CreateUnknown()); break;  			case Code.Ldind_I2:	valueStack.Pop(); valueStack.Push(Int32Value.CreateUnknown()); break;  			case Code.Ldind_I4:	valueStack.Pop(); valueStack.Push(Int32Value.CreateUnknown()); break;  			case Code.Ldind_I8:	valueStack.Pop(); valueStack.Push(Int64Value.CreateUnknown()); break;  			case Code.Ldind_U1:	valueStack.Pop(); valueStack.Push(Int32Value.CreateUnknownUInt8()); break;  			case Code.Ldind_U2:	valueStack.Pop(); valueStack.Push(Int32Value.CreateUnknownUInt16()); break;  			case Code.Ldind_U4:	valueStack.Pop(); valueStack.Push(Int32Value.CreateUnknown()); break;    			case Code.Ldlen:	valueStack.Pop(); valueStack.Push(Int32Value.CreateUnknown()); break;  			case Code.Sizeof:	valueStack.Push(Int32Value.CreateUnknown()); break;    			case Code.Ldfld:	Emulate_Ldfld(instr); break;  			case Code.Ldsfld:	Emulate_Ldsfld(instr); break;    			case Code.Ldftn:	valueStack.Push(new ObjectValue(instr.Operand)); break;  			case Code.Ldsflda:	valueStack.Push(new ObjectValue(instr.Operand)); break;  			case Code.Ldtoken:	valueStack.Push(new ObjectValue(instr.Operand)); break;  			case Code.Ldvirtftn:valueStack.Pop(); valueStack.Push(new ObjectValue()); break;  			case Code.Ldflda:	valueStack.Pop(); valueStack.Push(new ObjectValue()); break;    			case Code.Unbox:    			case Code.Conv_R_Un:Emulate_Conv_R_Un(instr); break;  			case Code.Conv_R4:	Emulate_Conv_R4(instr); break;  			case Code.Conv_R8:	Emulate_Conv_R8(instr); break;    			case Code.Arglist:  			case Code.Beq:  			case Code.Beq_S:  			case Code.Bge:  			case Code.Bge_S:  			case Code.Bge_Un:  			case Code.Bge_Un_S:  			case Code.Bgt:  			case Code.Bgt_S:  			case Code.Bgt_Un:  			case Code.Bgt_Un_S:  			case Code.Ble:  			case Code.Ble_S:  			case Code.Ble_Un:  			case Code.Ble_Un_S:  			case Code.Blt:  			case Code.Blt_S:  			case Code.Blt_Un:  			case Code.Blt_Un_S:  			case Code.Bne_Un:  			case Code.Bne_Un_S:  			case Code.Brfalse:  			case Code.Brfalse_S:  			case Code.Brtrue:  			case Code.Brtrue_S:  			case Code.Br:  			case Code.Br_S:  			case Code.Break:  			case Code.Calli:  			case Code.Ckfinite:  			case Code.Constrained:  			case Code.Conv_I:  			case Code.Conv_Ovf_I:  			case Code.Conv_Ovf_I_Un:  			case Code.Conv_Ovf_U:  			case Code.Conv_Ovf_U_Un:  			case Code.Conv_U:  			case Code.Cpblk:  			case Code.Cpobj:  			case Code.Endfilter:  			case Code.Endfinally:  			case Code.Initblk:  			case Code.Initobj:  			case Code.Jmp:  			case Code.Ldelema:  			case Code.Ldelem_I:  			case Code.Ldelem_R4:  			case Code.Ldelem_R8:  			case Code.Ldelem_Ref:  			case Code.Ldind_I:  			case Code.Ldind_R4:  			case Code.Ldind_R8:  			case Code.Ldind_Ref:  			case Code.Ldobj:  			case Code.Leave:  			case Code.Leave_S:  			case Code.Localloc:  			case Code.Mkrefany:  			case Code.Newarr:  			case Code.Newobj:  			case Code.Nop:  			case Code.Pop:  			case Code.Readonly:  			case Code.Refanytype:  			case Code.Refanyval:  			case Code.Ret:  			case Code.Rethrow:  			case Code.Stelem:  			case Code.Stelem_I:  			case Code.Stelem_I1:  			case Code.Stelem_I2:  			case Code.Stelem_I4:  			case Code.Stelem_I8:  			case Code.Stelem_R4:  			case Code.Stelem_R8:  			case Code.Stelem_Ref:  			case Code.Stfld:  			case Code.Stind_I:  			case Code.Stind_I1:  			case Code.Stind_I2:  			case Code.Stind_I4:  			case Code.Stind_I8:  			case Code.Stind_R4:  			case Code.Stind_R8:  			case Code.Stind_Ref:  			case Code.Stobj:  			case Code.Stsfld:  			case Code.Switch:  			case Code.Tailcall:  			case Code.Throw:  			case Code.Unaligned:  			case Code.Volatile:  			default:  				UpdateStack(instr);  				break;  			}
Magic Number,de4dot.blocks.cflow,InstructionEmulator,C:\repos\0xd4d_de4dot\de4dot.blocks\cflow\InstructionEmulator.cs,Emulate,The following statement contains a magic number: switch (instr.OpCode.Code) {  			case Code.Starg:  			case Code.Starg_S:	Emulate_Starg((Parameter)instr.Operand); break;  			case Code.Stloc:  			case Code.Stloc_S:	Emulate_Stloc((Local)instr.Operand); break;  			case Code.Stloc_0:	Emulate_Stloc(0); break;  			case Code.Stloc_1:	Emulate_Stloc(1); break;  			case Code.Stloc_2:	Emulate_Stloc(2); break;  			case Code.Stloc_3:	Emulate_Stloc(3); break;    			case Code.Ldarg:  			case Code.Ldarg_S:	valueStack.Push(GetArg((Parameter)instr.Operand)); break;  			case Code.Ldarg_0:	valueStack.Push(GetArg(0)); break;  			case Code.Ldarg_1:	valueStack.Push(GetArg(1)); break;  			case Code.Ldarg_2:	valueStack.Push(GetArg(2)); break;  			case Code.Ldarg_3:	valueStack.Push(GetArg(3)); break;  			case Code.Ldloc:  			case Code.Ldloc_S:	valueStack.Push(GetLocal((Local)instr.Operand)); break;  			case Code.Ldloc_0:	valueStack.Push(GetLocal(0)); break;  			case Code.Ldloc_1:	valueStack.Push(GetLocal(1)); break;  			case Code.Ldloc_2:	valueStack.Push(GetLocal(2)); break;  			case Code.Ldloc_3:	valueStack.Push(GetLocal(3)); break;    			case Code.Ldarga:  			case Code.Ldarga_S:	Emulate_Ldarga((Parameter)instr.Operand); break;  			case Code.Ldloca:  			case Code.Ldloca_S:	Emulate_Ldloca((Local)instr.Operand); break;    			case Code.Dup:		valueStack.CopyTop(); break;    			case Code.Ldc_I4:	valueStack.Push(new Int32Value((int)instr.Operand)); break;  			case Code.Ldc_I4_S:	valueStack.Push(new Int32Value((sbyte)instr.Operand)); break;  			case Code.Ldc_I8:	valueStack.Push(new Int64Value((long)instr.Operand)); break;  			case Code.Ldc_R4:	valueStack.Push(new Real8Value((float)instr.Operand)); break;  			case Code.Ldc_R8:	valueStack.Push(new Real8Value((double)instr.Operand)); break;  			case Code.Ldc_I4_0:	valueStack.Push(Int32Value.Zero); break;  			case Code.Ldc_I4_1:	valueStack.Push(Int32Value.One); break;  			case Code.Ldc_I4_2:	valueStack.Push(new Int32Value(2)); break;  			case Code.Ldc_I4_3:	valueStack.Push(new Int32Value(3)); break;  			case Code.Ldc_I4_4:	valueStack.Push(new Int32Value(4)); break;  			case Code.Ldc_I4_5:	valueStack.Push(new Int32Value(5)); break;  			case Code.Ldc_I4_6:	valueStack.Push(new Int32Value(6)); break;  			case Code.Ldc_I4_7:	valueStack.Push(new Int32Value(7)); break;  			case Code.Ldc_I4_8:	valueStack.Push(new Int32Value(8)); break;  			case Code.Ldc_I4_M1:valueStack.Push(new Int32Value(-1)); break;  			case Code.Ldnull:	valueStack.Push(NullValue.Instance); break;  			case Code.Ldstr:	valueStack.Push(new StringValue((string)instr.Operand)); break;  			case Code.Box:		valueStack.Push(new BoxedValue(valueStack.Pop())); break;    			case Code.Conv_U1:	Emulate_Conv_U1(instr); break;  			case Code.Conv_U2:	Emulate_Conv_U2(instr); break;  			case Code.Conv_U4:	Emulate_Conv_U4(instr); break;  			case Code.Conv_U8:	Emulate_Conv_U8(instr); break;  			case Code.Conv_I1:	Emulate_Conv_I1(instr); break;  			case Code.Conv_I2:	Emulate_Conv_I2(instr); break;  			case Code.Conv_I4:	Emulate_Conv_I4(instr); break;  			case Code.Conv_I8:	Emulate_Conv_I8(instr); break;  			case Code.Add:		Emulate_Add(instr); break;  			case Code.Sub:		Emulate_Sub(instr); break;  			case Code.Mul:		Emulate_Mul(instr); break;  			case Code.Div:		Emulate_Div(instr); break;  			case Code.Div_Un:	Emulate_Div_Un(instr); break;  			case Code.Rem:		Emulate_Rem(instr); break;  			case Code.Rem_Un:	Emulate_Rem_Un(instr); break;  			case Code.Neg:		Emulate_Neg(instr); break;  			case Code.And:		Emulate_And(instr); break;  			case Code.Or:		Emulate_Or(instr); break;  			case Code.Xor:		Emulate_Xor(instr); break;  			case Code.Not:		Emulate_Not(instr); break;  			case Code.Shl:		Emulate_Shl(instr); break;  			case Code.Shr:		Emulate_Shr(instr); break;  			case Code.Shr_Un:	Emulate_Shr_Un(instr); break;  			case Code.Ceq:		Emulate_Ceq(instr); break;  			case Code.Cgt:		Emulate_Cgt(instr); break;  			case Code.Cgt_Un:	Emulate_Cgt_Un(instr); break;  			case Code.Clt:		Emulate_Clt(instr); break;  			case Code.Clt_Un:	Emulate_Clt_Un(instr); break;  			case Code.Unbox_Any:Emulate_Unbox_Any(instr); break;    			case Code.Call:		Emulate_Call(instr); break;  			case Code.Callvirt:	Emulate_Callvirt(instr); break;    			case Code.Castclass: Emulate_Castclass(instr); break;  			case Code.Isinst:	Emulate_Isinst(instr); break;    			case Code.Add_Ovf:	Emulate_Add_Ovf(instr); break;  			case Code.Add_Ovf_Un: Emulate_Add_Ovf_Un(instr); break;  			case Code.Sub_Ovf:	Emulate_Sub_Ovf(instr); break;  			case Code.Sub_Ovf_Un: Emulate_Sub_Ovf_Un(instr); break;  			case Code.Mul_Ovf:	Emulate_Mul_Ovf(instr); break;  			case Code.Mul_Ovf_Un: Emulate_Mul_Ovf_Un(instr); break;    			case Code.Conv_Ovf_I1:		Emulate_Conv_Ovf_I1(instr); break;  			case Code.Conv_Ovf_I1_Un:	Emulate_Conv_Ovf_I1_Un(instr); break;  			case Code.Conv_Ovf_I2:		Emulate_Conv_Ovf_I2(instr); break;  			case Code.Conv_Ovf_I2_Un:	Emulate_Conv_Ovf_I2_Un(instr); break;  			case Code.Conv_Ovf_I4:		Emulate_Conv_Ovf_I4(instr); break;  			case Code.Conv_Ovf_I4_Un:	Emulate_Conv_Ovf_I4_Un(instr); break;  			case Code.Conv_Ovf_I8:		Emulate_Conv_Ovf_I8(instr); break;  			case Code.Conv_Ovf_I8_Un:	Emulate_Conv_Ovf_I8_Un(instr); break;  			case Code.Conv_Ovf_U1:		Emulate_Conv_Ovf_U1(instr); break;  			case Code.Conv_Ovf_U1_Un:	Emulate_Conv_Ovf_U1_Un(instr); break;  			case Code.Conv_Ovf_U2:		Emulate_Conv_Ovf_U2(instr); break;  			case Code.Conv_Ovf_U2_Un:	Emulate_Conv_Ovf_U2_Un(instr); break;  			case Code.Conv_Ovf_U4:		Emulate_Conv_Ovf_U4(instr); break;  			case Code.Conv_Ovf_U4_Un:	Emulate_Conv_Ovf_U4_Un(instr); break;  			case Code.Conv_Ovf_U8:		Emulate_Conv_Ovf_U8(instr); break;  			case Code.Conv_Ovf_U8_Un:	Emulate_Conv_Ovf_U8_Un(instr); break;    			case Code.Ldelem_I1: valueStack.Pop(2); valueStack.Push(Int32Value.CreateUnknown()); break;  			case Code.Ldelem_I2: valueStack.Pop(2); valueStack.Push(Int32Value.CreateUnknown()); break;  			case Code.Ldelem_I4: valueStack.Pop(2); valueStack.Push(Int32Value.CreateUnknown()); break;  			case Code.Ldelem_I8: valueStack.Pop(2); valueStack.Push(Int64Value.CreateUnknown()); break;  			case Code.Ldelem_U1: valueStack.Pop(2); valueStack.Push(Int32Value.CreateUnknownUInt8()); break;  			case Code.Ldelem_U2: valueStack.Pop(2); valueStack.Push(Int32Value.CreateUnknownUInt16()); break;  			case Code.Ldelem_U4: valueStack.Pop(2); valueStack.Push(Int32Value.CreateUnknown()); break;  			case Code.Ldelem:	 valueStack.Pop(2); valueStack.Push(GetUnknownValue(instr.Operand as ITypeDefOrRef)); break;    			case Code.Ldind_I1:	valueStack.Pop(); valueStack.Push(Int32Value.CreateUnknown()); break;  			case Code.Ldind_I2:	valueStack.Pop(); valueStack.Push(Int32Value.CreateUnknown()); break;  			case Code.Ldind_I4:	valueStack.Pop(); valueStack.Push(Int32Value.CreateUnknown()); break;  			case Code.Ldind_I8:	valueStack.Pop(); valueStack.Push(Int64Value.CreateUnknown()); break;  			case Code.Ldind_U1:	valueStack.Pop(); valueStack.Push(Int32Value.CreateUnknownUInt8()); break;  			case Code.Ldind_U2:	valueStack.Pop(); valueStack.Push(Int32Value.CreateUnknownUInt16()); break;  			case Code.Ldind_U4:	valueStack.Pop(); valueStack.Push(Int32Value.CreateUnknown()); break;    			case Code.Ldlen:	valueStack.Pop(); valueStack.Push(Int32Value.CreateUnknown()); break;  			case Code.Sizeof:	valueStack.Push(Int32Value.CreateUnknown()); break;    			case Code.Ldfld:	Emulate_Ldfld(instr); break;  			case Code.Ldsfld:	Emulate_Ldsfld(instr); break;    			case Code.Ldftn:	valueStack.Push(new ObjectValue(instr.Operand)); break;  			case Code.Ldsflda:	valueStack.Push(new ObjectValue(instr.Operand)); break;  			case Code.Ldtoken:	valueStack.Push(new ObjectValue(instr.Operand)); break;  			case Code.Ldvirtftn:valueStack.Pop(); valueStack.Push(new ObjectValue()); break;  			case Code.Ldflda:	valueStack.Pop(); valueStack.Push(new ObjectValue()); break;    			case Code.Unbox:    			case Code.Conv_R_Un:Emulate_Conv_R_Un(instr); break;  			case Code.Conv_R4:	Emulate_Conv_R4(instr); break;  			case Code.Conv_R8:	Emulate_Conv_R8(instr); break;    			case Code.Arglist:  			case Code.Beq:  			case Code.Beq_S:  			case Code.Bge:  			case Code.Bge_S:  			case Code.Bge_Un:  			case Code.Bge_Un_S:  			case Code.Bgt:  			case Code.Bgt_S:  			case Code.Bgt_Un:  			case Code.Bgt_Un_S:  			case Code.Ble:  			case Code.Ble_S:  			case Code.Ble_Un:  			case Code.Ble_Un_S:  			case Code.Blt:  			case Code.Blt_S:  			case Code.Blt_Un:  			case Code.Blt_Un_S:  			case Code.Bne_Un:  			case Code.Bne_Un_S:  			case Code.Brfalse:  			case Code.Brfalse_S:  			case Code.Brtrue:  			case Code.Brtrue_S:  			case Code.Br:  			case Code.Br_S:  			case Code.Break:  			case Code.Calli:  			case Code.Ckfinite:  			case Code.Constrained:  			case Code.Conv_I:  			case Code.Conv_Ovf_I:  			case Code.Conv_Ovf_I_Un:  			case Code.Conv_Ovf_U:  			case Code.Conv_Ovf_U_Un:  			case Code.Conv_U:  			case Code.Cpblk:  			case Code.Cpobj:  			case Code.Endfilter:  			case Code.Endfinally:  			case Code.Initblk:  			case Code.Initobj:  			case Code.Jmp:  			case Code.Ldelema:  			case Code.Ldelem_I:  			case Code.Ldelem_R4:  			case Code.Ldelem_R8:  			case Code.Ldelem_Ref:  			case Code.Ldind_I:  			case Code.Ldind_R4:  			case Code.Ldind_R8:  			case Code.Ldind_Ref:  			case Code.Ldobj:  			case Code.Leave:  			case Code.Leave_S:  			case Code.Localloc:  			case Code.Mkrefany:  			case Code.Newarr:  			case Code.Newobj:  			case Code.Nop:  			case Code.Pop:  			case Code.Readonly:  			case Code.Refanytype:  			case Code.Refanyval:  			case Code.Ret:  			case Code.Rethrow:  			case Code.Stelem:  			case Code.Stelem_I:  			case Code.Stelem_I1:  			case Code.Stelem_I2:  			case Code.Stelem_I4:  			case Code.Stelem_I8:  			case Code.Stelem_R4:  			case Code.Stelem_R8:  			case Code.Stelem_Ref:  			case Code.Stfld:  			case Code.Stind_I:  			case Code.Stind_I1:  			case Code.Stind_I2:  			case Code.Stind_I4:  			case Code.Stind_I8:  			case Code.Stind_R4:  			case Code.Stind_R8:  			case Code.Stind_Ref:  			case Code.Stobj:  			case Code.Stsfld:  			case Code.Switch:  			case Code.Tailcall:  			case Code.Throw:  			case Code.Unaligned:  			case Code.Volatile:  			default:  				UpdateStack(instr);  				break;  			}
Magic Number,de4dot.blocks.cflow,InstructionEmulator,C:\repos\0xd4d_de4dot\de4dot.blocks\cflow\InstructionEmulator.cs,Emulate,The following statement contains a magic number: switch (instr.OpCode.Code) {  			case Code.Starg:  			case Code.Starg_S:	Emulate_Starg((Parameter)instr.Operand); break;  			case Code.Stloc:  			case Code.Stloc_S:	Emulate_Stloc((Local)instr.Operand); break;  			case Code.Stloc_0:	Emulate_Stloc(0); break;  			case Code.Stloc_1:	Emulate_Stloc(1); break;  			case Code.Stloc_2:	Emulate_Stloc(2); break;  			case Code.Stloc_3:	Emulate_Stloc(3); break;    			case Code.Ldarg:  			case Code.Ldarg_S:	valueStack.Push(GetArg((Parameter)instr.Operand)); break;  			case Code.Ldarg_0:	valueStack.Push(GetArg(0)); break;  			case Code.Ldarg_1:	valueStack.Push(GetArg(1)); break;  			case Code.Ldarg_2:	valueStack.Push(GetArg(2)); break;  			case Code.Ldarg_3:	valueStack.Push(GetArg(3)); break;  			case Code.Ldloc:  			case Code.Ldloc_S:	valueStack.Push(GetLocal((Local)instr.Operand)); break;  			case Code.Ldloc_0:	valueStack.Push(GetLocal(0)); break;  			case Code.Ldloc_1:	valueStack.Push(GetLocal(1)); break;  			case Code.Ldloc_2:	valueStack.Push(GetLocal(2)); break;  			case Code.Ldloc_3:	valueStack.Push(GetLocal(3)); break;    			case Code.Ldarga:  			case Code.Ldarga_S:	Emulate_Ldarga((Parameter)instr.Operand); break;  			case Code.Ldloca:  			case Code.Ldloca_S:	Emulate_Ldloca((Local)instr.Operand); break;    			case Code.Dup:		valueStack.CopyTop(); break;    			case Code.Ldc_I4:	valueStack.Push(new Int32Value((int)instr.Operand)); break;  			case Code.Ldc_I4_S:	valueStack.Push(new Int32Value((sbyte)instr.Operand)); break;  			case Code.Ldc_I8:	valueStack.Push(new Int64Value((long)instr.Operand)); break;  			case Code.Ldc_R4:	valueStack.Push(new Real8Value((float)instr.Operand)); break;  			case Code.Ldc_R8:	valueStack.Push(new Real8Value((double)instr.Operand)); break;  			case Code.Ldc_I4_0:	valueStack.Push(Int32Value.Zero); break;  			case Code.Ldc_I4_1:	valueStack.Push(Int32Value.One); break;  			case Code.Ldc_I4_2:	valueStack.Push(new Int32Value(2)); break;  			case Code.Ldc_I4_3:	valueStack.Push(new Int32Value(3)); break;  			case Code.Ldc_I4_4:	valueStack.Push(new Int32Value(4)); break;  			case Code.Ldc_I4_5:	valueStack.Push(new Int32Value(5)); break;  			case Code.Ldc_I4_6:	valueStack.Push(new Int32Value(6)); break;  			case Code.Ldc_I4_7:	valueStack.Push(new Int32Value(7)); break;  			case Code.Ldc_I4_8:	valueStack.Push(new Int32Value(8)); break;  			case Code.Ldc_I4_M1:valueStack.Push(new Int32Value(-1)); break;  			case Code.Ldnull:	valueStack.Push(NullValue.Instance); break;  			case Code.Ldstr:	valueStack.Push(new StringValue((string)instr.Operand)); break;  			case Code.Box:		valueStack.Push(new BoxedValue(valueStack.Pop())); break;    			case Code.Conv_U1:	Emulate_Conv_U1(instr); break;  			case Code.Conv_U2:	Emulate_Conv_U2(instr); break;  			case Code.Conv_U4:	Emulate_Conv_U4(instr); break;  			case Code.Conv_U8:	Emulate_Conv_U8(instr); break;  			case Code.Conv_I1:	Emulate_Conv_I1(instr); break;  			case Code.Conv_I2:	Emulate_Conv_I2(instr); break;  			case Code.Conv_I4:	Emulate_Conv_I4(instr); break;  			case Code.Conv_I8:	Emulate_Conv_I8(instr); break;  			case Code.Add:		Emulate_Add(instr); break;  			case Code.Sub:		Emulate_Sub(instr); break;  			case Code.Mul:		Emulate_Mul(instr); break;  			case Code.Div:		Emulate_Div(instr); break;  			case Code.Div_Un:	Emulate_Div_Un(instr); break;  			case Code.Rem:		Emulate_Rem(instr); break;  			case Code.Rem_Un:	Emulate_Rem_Un(instr); break;  			case Code.Neg:		Emulate_Neg(instr); break;  			case Code.And:		Emulate_And(instr); break;  			case Code.Or:		Emulate_Or(instr); break;  			case Code.Xor:		Emulate_Xor(instr); break;  			case Code.Not:		Emulate_Not(instr); break;  			case Code.Shl:		Emulate_Shl(instr); break;  			case Code.Shr:		Emulate_Shr(instr); break;  			case Code.Shr_Un:	Emulate_Shr_Un(instr); break;  			case Code.Ceq:		Emulate_Ceq(instr); break;  			case Code.Cgt:		Emulate_Cgt(instr); break;  			case Code.Cgt_Un:	Emulate_Cgt_Un(instr); break;  			case Code.Clt:		Emulate_Clt(instr); break;  			case Code.Clt_Un:	Emulate_Clt_Un(instr); break;  			case Code.Unbox_Any:Emulate_Unbox_Any(instr); break;    			case Code.Call:		Emulate_Call(instr); break;  			case Code.Callvirt:	Emulate_Callvirt(instr); break;    			case Code.Castclass: Emulate_Castclass(instr); break;  			case Code.Isinst:	Emulate_Isinst(instr); break;    			case Code.Add_Ovf:	Emulate_Add_Ovf(instr); break;  			case Code.Add_Ovf_Un: Emulate_Add_Ovf_Un(instr); break;  			case Code.Sub_Ovf:	Emulate_Sub_Ovf(instr); break;  			case Code.Sub_Ovf_Un: Emulate_Sub_Ovf_Un(instr); break;  			case Code.Mul_Ovf:	Emulate_Mul_Ovf(instr); break;  			case Code.Mul_Ovf_Un: Emulate_Mul_Ovf_Un(instr); break;    			case Code.Conv_Ovf_I1:		Emulate_Conv_Ovf_I1(instr); break;  			case Code.Conv_Ovf_I1_Un:	Emulate_Conv_Ovf_I1_Un(instr); break;  			case Code.Conv_Ovf_I2:		Emulate_Conv_Ovf_I2(instr); break;  			case Code.Conv_Ovf_I2_Un:	Emulate_Conv_Ovf_I2_Un(instr); break;  			case Code.Conv_Ovf_I4:		Emulate_Conv_Ovf_I4(instr); break;  			case Code.Conv_Ovf_I4_Un:	Emulate_Conv_Ovf_I4_Un(instr); break;  			case Code.Conv_Ovf_I8:		Emulate_Conv_Ovf_I8(instr); break;  			case Code.Conv_Ovf_I8_Un:	Emulate_Conv_Ovf_I8_Un(instr); break;  			case Code.Conv_Ovf_U1:		Emulate_Conv_Ovf_U1(instr); break;  			case Code.Conv_Ovf_U1_Un:	Emulate_Conv_Ovf_U1_Un(instr); break;  			case Code.Conv_Ovf_U2:		Emulate_Conv_Ovf_U2(instr); break;  			case Code.Conv_Ovf_U2_Un:	Emulate_Conv_Ovf_U2_Un(instr); break;  			case Code.Conv_Ovf_U4:		Emulate_Conv_Ovf_U4(instr); break;  			case Code.Conv_Ovf_U4_Un:	Emulate_Conv_Ovf_U4_Un(instr); break;  			case Code.Conv_Ovf_U8:		Emulate_Conv_Ovf_U8(instr); break;  			case Code.Conv_Ovf_U8_Un:	Emulate_Conv_Ovf_U8_Un(instr); break;    			case Code.Ldelem_I1: valueStack.Pop(2); valueStack.Push(Int32Value.CreateUnknown()); break;  			case Code.Ldelem_I2: valueStack.Pop(2); valueStack.Push(Int32Value.CreateUnknown()); break;  			case Code.Ldelem_I4: valueStack.Pop(2); valueStack.Push(Int32Value.CreateUnknown()); break;  			case Code.Ldelem_I8: valueStack.Pop(2); valueStack.Push(Int64Value.CreateUnknown()); break;  			case Code.Ldelem_U1: valueStack.Pop(2); valueStack.Push(Int32Value.CreateUnknownUInt8()); break;  			case Code.Ldelem_U2: valueStack.Pop(2); valueStack.Push(Int32Value.CreateUnknownUInt16()); break;  			case Code.Ldelem_U4: valueStack.Pop(2); valueStack.Push(Int32Value.CreateUnknown()); break;  			case Code.Ldelem:	 valueStack.Pop(2); valueStack.Push(GetUnknownValue(instr.Operand as ITypeDefOrRef)); break;    			case Code.Ldind_I1:	valueStack.Pop(); valueStack.Push(Int32Value.CreateUnknown()); break;  			case Code.Ldind_I2:	valueStack.Pop(); valueStack.Push(Int32Value.CreateUnknown()); break;  			case Code.Ldind_I4:	valueStack.Pop(); valueStack.Push(Int32Value.CreateUnknown()); break;  			case Code.Ldind_I8:	valueStack.Pop(); valueStack.Push(Int64Value.CreateUnknown()); break;  			case Code.Ldind_U1:	valueStack.Pop(); valueStack.Push(Int32Value.CreateUnknownUInt8()); break;  			case Code.Ldind_U2:	valueStack.Pop(); valueStack.Push(Int32Value.CreateUnknownUInt16()); break;  			case Code.Ldind_U4:	valueStack.Pop(); valueStack.Push(Int32Value.CreateUnknown()); break;    			case Code.Ldlen:	valueStack.Pop(); valueStack.Push(Int32Value.CreateUnknown()); break;  			case Code.Sizeof:	valueStack.Push(Int32Value.CreateUnknown()); break;    			case Code.Ldfld:	Emulate_Ldfld(instr); break;  			case Code.Ldsfld:	Emulate_Ldsfld(instr); break;    			case Code.Ldftn:	valueStack.Push(new ObjectValue(instr.Operand)); break;  			case Code.Ldsflda:	valueStack.Push(new ObjectValue(instr.Operand)); break;  			case Code.Ldtoken:	valueStack.Push(new ObjectValue(instr.Operand)); break;  			case Code.Ldvirtftn:valueStack.Pop(); valueStack.Push(new ObjectValue()); break;  			case Code.Ldflda:	valueStack.Pop(); valueStack.Push(new ObjectValue()); break;    			case Code.Unbox:    			case Code.Conv_R_Un:Emulate_Conv_R_Un(instr); break;  			case Code.Conv_R4:	Emulate_Conv_R4(instr); break;  			case Code.Conv_R8:	Emulate_Conv_R8(instr); break;    			case Code.Arglist:  			case Code.Beq:  			case Code.Beq_S:  			case Code.Bge:  			case Code.Bge_S:  			case Code.Bge_Un:  			case Code.Bge_Un_S:  			case Code.Bgt:  			case Code.Bgt_S:  			case Code.Bgt_Un:  			case Code.Bgt_Un_S:  			case Code.Ble:  			case Code.Ble_S:  			case Code.Ble_Un:  			case Code.Ble_Un_S:  			case Code.Blt:  			case Code.Blt_S:  			case Code.Blt_Un:  			case Code.Blt_Un_S:  			case Code.Bne_Un:  			case Code.Bne_Un_S:  			case Code.Brfalse:  			case Code.Brfalse_S:  			case Code.Brtrue:  			case Code.Brtrue_S:  			case Code.Br:  			case Code.Br_S:  			case Code.Break:  			case Code.Calli:  			case Code.Ckfinite:  			case Code.Constrained:  			case Code.Conv_I:  			case Code.Conv_Ovf_I:  			case Code.Conv_Ovf_I_Un:  			case Code.Conv_Ovf_U:  			case Code.Conv_Ovf_U_Un:  			case Code.Conv_U:  			case Code.Cpblk:  			case Code.Cpobj:  			case Code.Endfilter:  			case Code.Endfinally:  			case Code.Initblk:  			case Code.Initobj:  			case Code.Jmp:  			case Code.Ldelema:  			case Code.Ldelem_I:  			case Code.Ldelem_R4:  			case Code.Ldelem_R8:  			case Code.Ldelem_Ref:  			case Code.Ldind_I:  			case Code.Ldind_R4:  			case Code.Ldind_R8:  			case Code.Ldind_Ref:  			case Code.Ldobj:  			case Code.Leave:  			case Code.Leave_S:  			case Code.Localloc:  			case Code.Mkrefany:  			case Code.Newarr:  			case Code.Newobj:  			case Code.Nop:  			case Code.Pop:  			case Code.Readonly:  			case Code.Refanytype:  			case Code.Refanyval:  			case Code.Ret:  			case Code.Rethrow:  			case Code.Stelem:  			case Code.Stelem_I:  			case Code.Stelem_I1:  			case Code.Stelem_I2:  			case Code.Stelem_I4:  			case Code.Stelem_I8:  			case Code.Stelem_R4:  			case Code.Stelem_R8:  			case Code.Stelem_Ref:  			case Code.Stfld:  			case Code.Stind_I:  			case Code.Stind_I1:  			case Code.Stind_I2:  			case Code.Stind_I4:  			case Code.Stind_I8:  			case Code.Stind_R4:  			case Code.Stind_R8:  			case Code.Stind_Ref:  			case Code.Stobj:  			case Code.Stsfld:  			case Code.Switch:  			case Code.Tailcall:  			case Code.Throw:  			case Code.Unaligned:  			case Code.Volatile:  			default:  				UpdateStack(instr);  				break;  			}
Magic Number,de4dot.blocks.cflow,InstructionEmulator,C:\repos\0xd4d_de4dot\de4dot.blocks\cflow\InstructionEmulator.cs,Emulate,The following statement contains a magic number: switch (instr.OpCode.Code) {  			case Code.Starg:  			case Code.Starg_S:	Emulate_Starg((Parameter)instr.Operand); break;  			case Code.Stloc:  			case Code.Stloc_S:	Emulate_Stloc((Local)instr.Operand); break;  			case Code.Stloc_0:	Emulate_Stloc(0); break;  			case Code.Stloc_1:	Emulate_Stloc(1); break;  			case Code.Stloc_2:	Emulate_Stloc(2); break;  			case Code.Stloc_3:	Emulate_Stloc(3); break;    			case Code.Ldarg:  			case Code.Ldarg_S:	valueStack.Push(GetArg((Parameter)instr.Operand)); break;  			case Code.Ldarg_0:	valueStack.Push(GetArg(0)); break;  			case Code.Ldarg_1:	valueStack.Push(GetArg(1)); break;  			case Code.Ldarg_2:	valueStack.Push(GetArg(2)); break;  			case Code.Ldarg_3:	valueStack.Push(GetArg(3)); break;  			case Code.Ldloc:  			case Code.Ldloc_S:	valueStack.Push(GetLocal((Local)instr.Operand)); break;  			case Code.Ldloc_0:	valueStack.Push(GetLocal(0)); break;  			case Code.Ldloc_1:	valueStack.Push(GetLocal(1)); break;  			case Code.Ldloc_2:	valueStack.Push(GetLocal(2)); break;  			case Code.Ldloc_3:	valueStack.Push(GetLocal(3)); break;    			case Code.Ldarga:  			case Code.Ldarga_S:	Emulate_Ldarga((Parameter)instr.Operand); break;  			case Code.Ldloca:  			case Code.Ldloca_S:	Emulate_Ldloca((Local)instr.Operand); break;    			case Code.Dup:		valueStack.CopyTop(); break;    			case Code.Ldc_I4:	valueStack.Push(new Int32Value((int)instr.Operand)); break;  			case Code.Ldc_I4_S:	valueStack.Push(new Int32Value((sbyte)instr.Operand)); break;  			case Code.Ldc_I8:	valueStack.Push(new Int64Value((long)instr.Operand)); break;  			case Code.Ldc_R4:	valueStack.Push(new Real8Value((float)instr.Operand)); break;  			case Code.Ldc_R8:	valueStack.Push(new Real8Value((double)instr.Operand)); break;  			case Code.Ldc_I4_0:	valueStack.Push(Int32Value.Zero); break;  			case Code.Ldc_I4_1:	valueStack.Push(Int32Value.One); break;  			case Code.Ldc_I4_2:	valueStack.Push(new Int32Value(2)); break;  			case Code.Ldc_I4_3:	valueStack.Push(new Int32Value(3)); break;  			case Code.Ldc_I4_4:	valueStack.Push(new Int32Value(4)); break;  			case Code.Ldc_I4_5:	valueStack.Push(new Int32Value(5)); break;  			case Code.Ldc_I4_6:	valueStack.Push(new Int32Value(6)); break;  			case Code.Ldc_I4_7:	valueStack.Push(new Int32Value(7)); break;  			case Code.Ldc_I4_8:	valueStack.Push(new Int32Value(8)); break;  			case Code.Ldc_I4_M1:valueStack.Push(new Int32Value(-1)); break;  			case Code.Ldnull:	valueStack.Push(NullValue.Instance); break;  			case Code.Ldstr:	valueStack.Push(new StringValue((string)instr.Operand)); break;  			case Code.Box:		valueStack.Push(new BoxedValue(valueStack.Pop())); break;    			case Code.Conv_U1:	Emulate_Conv_U1(instr); break;  			case Code.Conv_U2:	Emulate_Conv_U2(instr); break;  			case Code.Conv_U4:	Emulate_Conv_U4(instr); break;  			case Code.Conv_U8:	Emulate_Conv_U8(instr); break;  			case Code.Conv_I1:	Emulate_Conv_I1(instr); break;  			case Code.Conv_I2:	Emulate_Conv_I2(instr); break;  			case Code.Conv_I4:	Emulate_Conv_I4(instr); break;  			case Code.Conv_I8:	Emulate_Conv_I8(instr); break;  			case Code.Add:		Emulate_Add(instr); break;  			case Code.Sub:		Emulate_Sub(instr); break;  			case Code.Mul:		Emulate_Mul(instr); break;  			case Code.Div:		Emulate_Div(instr); break;  			case Code.Div_Un:	Emulate_Div_Un(instr); break;  			case Code.Rem:		Emulate_Rem(instr); break;  			case Code.Rem_Un:	Emulate_Rem_Un(instr); break;  			case Code.Neg:		Emulate_Neg(instr); break;  			case Code.And:		Emulate_And(instr); break;  			case Code.Or:		Emulate_Or(instr); break;  			case Code.Xor:		Emulate_Xor(instr); break;  			case Code.Not:		Emulate_Not(instr); break;  			case Code.Shl:		Emulate_Shl(instr); break;  			case Code.Shr:		Emulate_Shr(instr); break;  			case Code.Shr_Un:	Emulate_Shr_Un(instr); break;  			case Code.Ceq:		Emulate_Ceq(instr); break;  			case Code.Cgt:		Emulate_Cgt(instr); break;  			case Code.Cgt_Un:	Emulate_Cgt_Un(instr); break;  			case Code.Clt:		Emulate_Clt(instr); break;  			case Code.Clt_Un:	Emulate_Clt_Un(instr); break;  			case Code.Unbox_Any:Emulate_Unbox_Any(instr); break;    			case Code.Call:		Emulate_Call(instr); break;  			case Code.Callvirt:	Emulate_Callvirt(instr); break;    			case Code.Castclass: Emulate_Castclass(instr); break;  			case Code.Isinst:	Emulate_Isinst(instr); break;    			case Code.Add_Ovf:	Emulate_Add_Ovf(instr); break;  			case Code.Add_Ovf_Un: Emulate_Add_Ovf_Un(instr); break;  			case Code.Sub_Ovf:	Emulate_Sub_Ovf(instr); break;  			case Code.Sub_Ovf_Un: Emulate_Sub_Ovf_Un(instr); break;  			case Code.Mul_Ovf:	Emulate_Mul_Ovf(instr); break;  			case Code.Mul_Ovf_Un: Emulate_Mul_Ovf_Un(instr); break;    			case Code.Conv_Ovf_I1:		Emulate_Conv_Ovf_I1(instr); break;  			case Code.Conv_Ovf_I1_Un:	Emulate_Conv_Ovf_I1_Un(instr); break;  			case Code.Conv_Ovf_I2:		Emulate_Conv_Ovf_I2(instr); break;  			case Code.Conv_Ovf_I2_Un:	Emulate_Conv_Ovf_I2_Un(instr); break;  			case Code.Conv_Ovf_I4:		Emulate_Conv_Ovf_I4(instr); break;  			case Code.Conv_Ovf_I4_Un:	Emulate_Conv_Ovf_I4_Un(instr); break;  			case Code.Conv_Ovf_I8:		Emulate_Conv_Ovf_I8(instr); break;  			case Code.Conv_Ovf_I8_Un:	Emulate_Conv_Ovf_I8_Un(instr); break;  			case Code.Conv_Ovf_U1:		Emulate_Conv_Ovf_U1(instr); break;  			case Code.Conv_Ovf_U1_Un:	Emulate_Conv_Ovf_U1_Un(instr); break;  			case Code.Conv_Ovf_U2:		Emulate_Conv_Ovf_U2(instr); break;  			case Code.Conv_Ovf_U2_Un:	Emulate_Conv_Ovf_U2_Un(instr); break;  			case Code.Conv_Ovf_U4:		Emulate_Conv_Ovf_U4(instr); break;  			case Code.Conv_Ovf_U4_Un:	Emulate_Conv_Ovf_U4_Un(instr); break;  			case Code.Conv_Ovf_U8:		Emulate_Conv_Ovf_U8(instr); break;  			case Code.Conv_Ovf_U8_Un:	Emulate_Conv_Ovf_U8_Un(instr); break;    			case Code.Ldelem_I1: valueStack.Pop(2); valueStack.Push(Int32Value.CreateUnknown()); break;  			case Code.Ldelem_I2: valueStack.Pop(2); valueStack.Push(Int32Value.CreateUnknown()); break;  			case Code.Ldelem_I4: valueStack.Pop(2); valueStack.Push(Int32Value.CreateUnknown()); break;  			case Code.Ldelem_I8: valueStack.Pop(2); valueStack.Push(Int64Value.CreateUnknown()); break;  			case Code.Ldelem_U1: valueStack.Pop(2); valueStack.Push(Int32Value.CreateUnknownUInt8()); break;  			case Code.Ldelem_U2: valueStack.Pop(2); valueStack.Push(Int32Value.CreateUnknownUInt16()); break;  			case Code.Ldelem_U4: valueStack.Pop(2); valueStack.Push(Int32Value.CreateUnknown()); break;  			case Code.Ldelem:	 valueStack.Pop(2); valueStack.Push(GetUnknownValue(instr.Operand as ITypeDefOrRef)); break;    			case Code.Ldind_I1:	valueStack.Pop(); valueStack.Push(Int32Value.CreateUnknown()); break;  			case Code.Ldind_I2:	valueStack.Pop(); valueStack.Push(Int32Value.CreateUnknown()); break;  			case Code.Ldind_I4:	valueStack.Pop(); valueStack.Push(Int32Value.CreateUnknown()); break;  			case Code.Ldind_I8:	valueStack.Pop(); valueStack.Push(Int64Value.CreateUnknown()); break;  			case Code.Ldind_U1:	valueStack.Pop(); valueStack.Push(Int32Value.CreateUnknownUInt8()); break;  			case Code.Ldind_U2:	valueStack.Pop(); valueStack.Push(Int32Value.CreateUnknownUInt16()); break;  			case Code.Ldind_U4:	valueStack.Pop(); valueStack.Push(Int32Value.CreateUnknown()); break;    			case Code.Ldlen:	valueStack.Pop(); valueStack.Push(Int32Value.CreateUnknown()); break;  			case Code.Sizeof:	valueStack.Push(Int32Value.CreateUnknown()); break;    			case Code.Ldfld:	Emulate_Ldfld(instr); break;  			case Code.Ldsfld:	Emulate_Ldsfld(instr); break;    			case Code.Ldftn:	valueStack.Push(new ObjectValue(instr.Operand)); break;  			case Code.Ldsflda:	valueStack.Push(new ObjectValue(instr.Operand)); break;  			case Code.Ldtoken:	valueStack.Push(new ObjectValue(instr.Operand)); break;  			case Code.Ldvirtftn:valueStack.Pop(); valueStack.Push(new ObjectValue()); break;  			case Code.Ldflda:	valueStack.Pop(); valueStack.Push(new ObjectValue()); break;    			case Code.Unbox:    			case Code.Conv_R_Un:Emulate_Conv_R_Un(instr); break;  			case Code.Conv_R4:	Emulate_Conv_R4(instr); break;  			case Code.Conv_R8:	Emulate_Conv_R8(instr); break;    			case Code.Arglist:  			case Code.Beq:  			case Code.Beq_S:  			case Code.Bge:  			case Code.Bge_S:  			case Code.Bge_Un:  			case Code.Bge_Un_S:  			case Code.Bgt:  			case Code.Bgt_S:  			case Code.Bgt_Un:  			case Code.Bgt_Un_S:  			case Code.Ble:  			case Code.Ble_S:  			case Code.Ble_Un:  			case Code.Ble_Un_S:  			case Code.Blt:  			case Code.Blt_S:  			case Code.Blt_Un:  			case Code.Blt_Un_S:  			case Code.Bne_Un:  			case Code.Bne_Un_S:  			case Code.Brfalse:  			case Code.Brfalse_S:  			case Code.Brtrue:  			case Code.Brtrue_S:  			case Code.Br:  			case Code.Br_S:  			case Code.Break:  			case Code.Calli:  			case Code.Ckfinite:  			case Code.Constrained:  			case Code.Conv_I:  			case Code.Conv_Ovf_I:  			case Code.Conv_Ovf_I_Un:  			case Code.Conv_Ovf_U:  			case Code.Conv_Ovf_U_Un:  			case Code.Conv_U:  			case Code.Cpblk:  			case Code.Cpobj:  			case Code.Endfilter:  			case Code.Endfinally:  			case Code.Initblk:  			case Code.Initobj:  			case Code.Jmp:  			case Code.Ldelema:  			case Code.Ldelem_I:  			case Code.Ldelem_R4:  			case Code.Ldelem_R8:  			case Code.Ldelem_Ref:  			case Code.Ldind_I:  			case Code.Ldind_R4:  			case Code.Ldind_R8:  			case Code.Ldind_Ref:  			case Code.Ldobj:  			case Code.Leave:  			case Code.Leave_S:  			case Code.Localloc:  			case Code.Mkrefany:  			case Code.Newarr:  			case Code.Newobj:  			case Code.Nop:  			case Code.Pop:  			case Code.Readonly:  			case Code.Refanytype:  			case Code.Refanyval:  			case Code.Ret:  			case Code.Rethrow:  			case Code.Stelem:  			case Code.Stelem_I:  			case Code.Stelem_I1:  			case Code.Stelem_I2:  			case Code.Stelem_I4:  			case Code.Stelem_I8:  			case Code.Stelem_R4:  			case Code.Stelem_R8:  			case Code.Stelem_Ref:  			case Code.Stfld:  			case Code.Stind_I:  			case Code.Stind_I1:  			case Code.Stind_I2:  			case Code.Stind_I4:  			case Code.Stind_I8:  			case Code.Stind_R4:  			case Code.Stind_R8:  			case Code.Stind_Ref:  			case Code.Stobj:  			case Code.Stsfld:  			case Code.Switch:  			case Code.Tailcall:  			case Code.Throw:  			case Code.Unaligned:  			case Code.Volatile:  			default:  				UpdateStack(instr);  				break;  			}
Magic Number,de4dot.blocks.cflow,InstructionEmulator,C:\repos\0xd4d_de4dot\de4dot.blocks\cflow\InstructionEmulator.cs,Emulate,The following statement contains a magic number: switch (instr.OpCode.Code) {  			case Code.Starg:  			case Code.Starg_S:	Emulate_Starg((Parameter)instr.Operand); break;  			case Code.Stloc:  			case Code.Stloc_S:	Emulate_Stloc((Local)instr.Operand); break;  			case Code.Stloc_0:	Emulate_Stloc(0); break;  			case Code.Stloc_1:	Emulate_Stloc(1); break;  			case Code.Stloc_2:	Emulate_Stloc(2); break;  			case Code.Stloc_3:	Emulate_Stloc(3); break;    			case Code.Ldarg:  			case Code.Ldarg_S:	valueStack.Push(GetArg((Parameter)instr.Operand)); break;  			case Code.Ldarg_0:	valueStack.Push(GetArg(0)); break;  			case Code.Ldarg_1:	valueStack.Push(GetArg(1)); break;  			case Code.Ldarg_2:	valueStack.Push(GetArg(2)); break;  			case Code.Ldarg_3:	valueStack.Push(GetArg(3)); break;  			case Code.Ldloc:  			case Code.Ldloc_S:	valueStack.Push(GetLocal((Local)instr.Operand)); break;  			case Code.Ldloc_0:	valueStack.Push(GetLocal(0)); break;  			case Code.Ldloc_1:	valueStack.Push(GetLocal(1)); break;  			case Code.Ldloc_2:	valueStack.Push(GetLocal(2)); break;  			case Code.Ldloc_3:	valueStack.Push(GetLocal(3)); break;    			case Code.Ldarga:  			case Code.Ldarga_S:	Emulate_Ldarga((Parameter)instr.Operand); break;  			case Code.Ldloca:  			case Code.Ldloca_S:	Emulate_Ldloca((Local)instr.Operand); break;    			case Code.Dup:		valueStack.CopyTop(); break;    			case Code.Ldc_I4:	valueStack.Push(new Int32Value((int)instr.Operand)); break;  			case Code.Ldc_I4_S:	valueStack.Push(new Int32Value((sbyte)instr.Operand)); break;  			case Code.Ldc_I8:	valueStack.Push(new Int64Value((long)instr.Operand)); break;  			case Code.Ldc_R4:	valueStack.Push(new Real8Value((float)instr.Operand)); break;  			case Code.Ldc_R8:	valueStack.Push(new Real8Value((double)instr.Operand)); break;  			case Code.Ldc_I4_0:	valueStack.Push(Int32Value.Zero); break;  			case Code.Ldc_I4_1:	valueStack.Push(Int32Value.One); break;  			case Code.Ldc_I4_2:	valueStack.Push(new Int32Value(2)); break;  			case Code.Ldc_I4_3:	valueStack.Push(new Int32Value(3)); break;  			case Code.Ldc_I4_4:	valueStack.Push(new Int32Value(4)); break;  			case Code.Ldc_I4_5:	valueStack.Push(new Int32Value(5)); break;  			case Code.Ldc_I4_6:	valueStack.Push(new Int32Value(6)); break;  			case Code.Ldc_I4_7:	valueStack.Push(new Int32Value(7)); break;  			case Code.Ldc_I4_8:	valueStack.Push(new Int32Value(8)); break;  			case Code.Ldc_I4_M1:valueStack.Push(new Int32Value(-1)); break;  			case Code.Ldnull:	valueStack.Push(NullValue.Instance); break;  			case Code.Ldstr:	valueStack.Push(new StringValue((string)instr.Operand)); break;  			case Code.Box:		valueStack.Push(new BoxedValue(valueStack.Pop())); break;    			case Code.Conv_U1:	Emulate_Conv_U1(instr); break;  			case Code.Conv_U2:	Emulate_Conv_U2(instr); break;  			case Code.Conv_U4:	Emulate_Conv_U4(instr); break;  			case Code.Conv_U8:	Emulate_Conv_U8(instr); break;  			case Code.Conv_I1:	Emulate_Conv_I1(instr); break;  			case Code.Conv_I2:	Emulate_Conv_I2(instr); break;  			case Code.Conv_I4:	Emulate_Conv_I4(instr); break;  			case Code.Conv_I8:	Emulate_Conv_I8(instr); break;  			case Code.Add:		Emulate_Add(instr); break;  			case Code.Sub:		Emulate_Sub(instr); break;  			case Code.Mul:		Emulate_Mul(instr); break;  			case Code.Div:		Emulate_Div(instr); break;  			case Code.Div_Un:	Emulate_Div_Un(instr); break;  			case Code.Rem:		Emulate_Rem(instr); break;  			case Code.Rem_Un:	Emulate_Rem_Un(instr); break;  			case Code.Neg:		Emulate_Neg(instr); break;  			case Code.And:		Emulate_And(instr); break;  			case Code.Or:		Emulate_Or(instr); break;  			case Code.Xor:		Emulate_Xor(instr); break;  			case Code.Not:		Emulate_Not(instr); break;  			case Code.Shl:		Emulate_Shl(instr); break;  			case Code.Shr:		Emulate_Shr(instr); break;  			case Code.Shr_Un:	Emulate_Shr_Un(instr); break;  			case Code.Ceq:		Emulate_Ceq(instr); break;  			case Code.Cgt:		Emulate_Cgt(instr); break;  			case Code.Cgt_Un:	Emulate_Cgt_Un(instr); break;  			case Code.Clt:		Emulate_Clt(instr); break;  			case Code.Clt_Un:	Emulate_Clt_Un(instr); break;  			case Code.Unbox_Any:Emulate_Unbox_Any(instr); break;    			case Code.Call:		Emulate_Call(instr); break;  			case Code.Callvirt:	Emulate_Callvirt(instr); break;    			case Code.Castclass: Emulate_Castclass(instr); break;  			case Code.Isinst:	Emulate_Isinst(instr); break;    			case Code.Add_Ovf:	Emulate_Add_Ovf(instr); break;  			case Code.Add_Ovf_Un: Emulate_Add_Ovf_Un(instr); break;  			case Code.Sub_Ovf:	Emulate_Sub_Ovf(instr); break;  			case Code.Sub_Ovf_Un: Emulate_Sub_Ovf_Un(instr); break;  			case Code.Mul_Ovf:	Emulate_Mul_Ovf(instr); break;  			case Code.Mul_Ovf_Un: Emulate_Mul_Ovf_Un(instr); break;    			case Code.Conv_Ovf_I1:		Emulate_Conv_Ovf_I1(instr); break;  			case Code.Conv_Ovf_I1_Un:	Emulate_Conv_Ovf_I1_Un(instr); break;  			case Code.Conv_Ovf_I2:		Emulate_Conv_Ovf_I2(instr); break;  			case Code.Conv_Ovf_I2_Un:	Emulate_Conv_Ovf_I2_Un(instr); break;  			case Code.Conv_Ovf_I4:		Emulate_Conv_Ovf_I4(instr); break;  			case Code.Conv_Ovf_I4_Un:	Emulate_Conv_Ovf_I4_Un(instr); break;  			case Code.Conv_Ovf_I8:		Emulate_Conv_Ovf_I8(instr); break;  			case Code.Conv_Ovf_I8_Un:	Emulate_Conv_Ovf_I8_Un(instr); break;  			case Code.Conv_Ovf_U1:		Emulate_Conv_Ovf_U1(instr); break;  			case Code.Conv_Ovf_U1_Un:	Emulate_Conv_Ovf_U1_Un(instr); break;  			case Code.Conv_Ovf_U2:		Emulate_Conv_Ovf_U2(instr); break;  			case Code.Conv_Ovf_U2_Un:	Emulate_Conv_Ovf_U2_Un(instr); break;  			case Code.Conv_Ovf_U4:		Emulate_Conv_Ovf_U4(instr); break;  			case Code.Conv_Ovf_U4_Un:	Emulate_Conv_Ovf_U4_Un(instr); break;  			case Code.Conv_Ovf_U8:		Emulate_Conv_Ovf_U8(instr); break;  			case Code.Conv_Ovf_U8_Un:	Emulate_Conv_Ovf_U8_Un(instr); break;    			case Code.Ldelem_I1: valueStack.Pop(2); valueStack.Push(Int32Value.CreateUnknown()); break;  			case Code.Ldelem_I2: valueStack.Pop(2); valueStack.Push(Int32Value.CreateUnknown()); break;  			case Code.Ldelem_I4: valueStack.Pop(2); valueStack.Push(Int32Value.CreateUnknown()); break;  			case Code.Ldelem_I8: valueStack.Pop(2); valueStack.Push(Int64Value.CreateUnknown()); break;  			case Code.Ldelem_U1: valueStack.Pop(2); valueStack.Push(Int32Value.CreateUnknownUInt8()); break;  			case Code.Ldelem_U2: valueStack.Pop(2); valueStack.Push(Int32Value.CreateUnknownUInt16()); break;  			case Code.Ldelem_U4: valueStack.Pop(2); valueStack.Push(Int32Value.CreateUnknown()); break;  			case Code.Ldelem:	 valueStack.Pop(2); valueStack.Push(GetUnknownValue(instr.Operand as ITypeDefOrRef)); break;    			case Code.Ldind_I1:	valueStack.Pop(); valueStack.Push(Int32Value.CreateUnknown()); break;  			case Code.Ldind_I2:	valueStack.Pop(); valueStack.Push(Int32Value.CreateUnknown()); break;  			case Code.Ldind_I4:	valueStack.Pop(); valueStack.Push(Int32Value.CreateUnknown()); break;  			case Code.Ldind_I8:	valueStack.Pop(); valueStack.Push(Int64Value.CreateUnknown()); break;  			case Code.Ldind_U1:	valueStack.Pop(); valueStack.Push(Int32Value.CreateUnknownUInt8()); break;  			case Code.Ldind_U2:	valueStack.Pop(); valueStack.Push(Int32Value.CreateUnknownUInt16()); break;  			case Code.Ldind_U4:	valueStack.Pop(); valueStack.Push(Int32Value.CreateUnknown()); break;    			case Code.Ldlen:	valueStack.Pop(); valueStack.Push(Int32Value.CreateUnknown()); break;  			case Code.Sizeof:	valueStack.Push(Int32Value.CreateUnknown()); break;    			case Code.Ldfld:	Emulate_Ldfld(instr); break;  			case Code.Ldsfld:	Emulate_Ldsfld(instr); break;    			case Code.Ldftn:	valueStack.Push(new ObjectValue(instr.Operand)); break;  			case Code.Ldsflda:	valueStack.Push(new ObjectValue(instr.Operand)); break;  			case Code.Ldtoken:	valueStack.Push(new ObjectValue(instr.Operand)); break;  			case Code.Ldvirtftn:valueStack.Pop(); valueStack.Push(new ObjectValue()); break;  			case Code.Ldflda:	valueStack.Pop(); valueStack.Push(new ObjectValue()); break;    			case Code.Unbox:    			case Code.Conv_R_Un:Emulate_Conv_R_Un(instr); break;  			case Code.Conv_R4:	Emulate_Conv_R4(instr); break;  			case Code.Conv_R8:	Emulate_Conv_R8(instr); break;    			case Code.Arglist:  			case Code.Beq:  			case Code.Beq_S:  			case Code.Bge:  			case Code.Bge_S:  			case Code.Bge_Un:  			case Code.Bge_Un_S:  			case Code.Bgt:  			case Code.Bgt_S:  			case Code.Bgt_Un:  			case Code.Bgt_Un_S:  			case Code.Ble:  			case Code.Ble_S:  			case Code.Ble_Un:  			case Code.Ble_Un_S:  			case Code.Blt:  			case Code.Blt_S:  			case Code.Blt_Un:  			case Code.Blt_Un_S:  			case Code.Bne_Un:  			case Code.Bne_Un_S:  			case Code.Brfalse:  			case Code.Brfalse_S:  			case Code.Brtrue:  			case Code.Brtrue_S:  			case Code.Br:  			case Code.Br_S:  			case Code.Break:  			case Code.Calli:  			case Code.Ckfinite:  			case Code.Constrained:  			case Code.Conv_I:  			case Code.Conv_Ovf_I:  			case Code.Conv_Ovf_I_Un:  			case Code.Conv_Ovf_U:  			case Code.Conv_Ovf_U_Un:  			case Code.Conv_U:  			case Code.Cpblk:  			case Code.Cpobj:  			case Code.Endfilter:  			case Code.Endfinally:  			case Code.Initblk:  			case Code.Initobj:  			case Code.Jmp:  			case Code.Ldelema:  			case Code.Ldelem_I:  			case Code.Ldelem_R4:  			case Code.Ldelem_R8:  			case Code.Ldelem_Ref:  			case Code.Ldind_I:  			case Code.Ldind_R4:  			case Code.Ldind_R8:  			case Code.Ldind_Ref:  			case Code.Ldobj:  			case Code.Leave:  			case Code.Leave_S:  			case Code.Localloc:  			case Code.Mkrefany:  			case Code.Newarr:  			case Code.Newobj:  			case Code.Nop:  			case Code.Pop:  			case Code.Readonly:  			case Code.Refanytype:  			case Code.Refanyval:  			case Code.Ret:  			case Code.Rethrow:  			case Code.Stelem:  			case Code.Stelem_I:  			case Code.Stelem_I1:  			case Code.Stelem_I2:  			case Code.Stelem_I4:  			case Code.Stelem_I8:  			case Code.Stelem_R4:  			case Code.Stelem_R8:  			case Code.Stelem_Ref:  			case Code.Stfld:  			case Code.Stind_I:  			case Code.Stind_I1:  			case Code.Stind_I2:  			case Code.Stind_I4:  			case Code.Stind_I8:  			case Code.Stind_R4:  			case Code.Stind_R8:  			case Code.Stind_Ref:  			case Code.Stobj:  			case Code.Stsfld:  			case Code.Switch:  			case Code.Tailcall:  			case Code.Throw:  			case Code.Unaligned:  			case Code.Volatile:  			default:  				UpdateStack(instr);  				break;  			}
Magic Number,de4dot.blocks.cflow,InstructionEmulator,C:\repos\0xd4d_de4dot\de4dot.blocks\cflow\InstructionEmulator.cs,Emulate,The following statement contains a magic number: switch (instr.OpCode.Code) {  			case Code.Starg:  			case Code.Starg_S:	Emulate_Starg((Parameter)instr.Operand); break;  			case Code.Stloc:  			case Code.Stloc_S:	Emulate_Stloc((Local)instr.Operand); break;  			case Code.Stloc_0:	Emulate_Stloc(0); break;  			case Code.Stloc_1:	Emulate_Stloc(1); break;  			case Code.Stloc_2:	Emulate_Stloc(2); break;  			case Code.Stloc_3:	Emulate_Stloc(3); break;    			case Code.Ldarg:  			case Code.Ldarg_S:	valueStack.Push(GetArg((Parameter)instr.Operand)); break;  			case Code.Ldarg_0:	valueStack.Push(GetArg(0)); break;  			case Code.Ldarg_1:	valueStack.Push(GetArg(1)); break;  			case Code.Ldarg_2:	valueStack.Push(GetArg(2)); break;  			case Code.Ldarg_3:	valueStack.Push(GetArg(3)); break;  			case Code.Ldloc:  			case Code.Ldloc_S:	valueStack.Push(GetLocal((Local)instr.Operand)); break;  			case Code.Ldloc_0:	valueStack.Push(GetLocal(0)); break;  			case Code.Ldloc_1:	valueStack.Push(GetLocal(1)); break;  			case Code.Ldloc_2:	valueStack.Push(GetLocal(2)); break;  			case Code.Ldloc_3:	valueStack.Push(GetLocal(3)); break;    			case Code.Ldarga:  			case Code.Ldarga_S:	Emulate_Ldarga((Parameter)instr.Operand); break;  			case Code.Ldloca:  			case Code.Ldloca_S:	Emulate_Ldloca((Local)instr.Operand); break;    			case Code.Dup:		valueStack.CopyTop(); break;    			case Code.Ldc_I4:	valueStack.Push(new Int32Value((int)instr.Operand)); break;  			case Code.Ldc_I4_S:	valueStack.Push(new Int32Value((sbyte)instr.Operand)); break;  			case Code.Ldc_I8:	valueStack.Push(new Int64Value((long)instr.Operand)); break;  			case Code.Ldc_R4:	valueStack.Push(new Real8Value((float)instr.Operand)); break;  			case Code.Ldc_R8:	valueStack.Push(new Real8Value((double)instr.Operand)); break;  			case Code.Ldc_I4_0:	valueStack.Push(Int32Value.Zero); break;  			case Code.Ldc_I4_1:	valueStack.Push(Int32Value.One); break;  			case Code.Ldc_I4_2:	valueStack.Push(new Int32Value(2)); break;  			case Code.Ldc_I4_3:	valueStack.Push(new Int32Value(3)); break;  			case Code.Ldc_I4_4:	valueStack.Push(new Int32Value(4)); break;  			case Code.Ldc_I4_5:	valueStack.Push(new Int32Value(5)); break;  			case Code.Ldc_I4_6:	valueStack.Push(new Int32Value(6)); break;  			case Code.Ldc_I4_7:	valueStack.Push(new Int32Value(7)); break;  			case Code.Ldc_I4_8:	valueStack.Push(new Int32Value(8)); break;  			case Code.Ldc_I4_M1:valueStack.Push(new Int32Value(-1)); break;  			case Code.Ldnull:	valueStack.Push(NullValue.Instance); break;  			case Code.Ldstr:	valueStack.Push(new StringValue((string)instr.Operand)); break;  			case Code.Box:		valueStack.Push(new BoxedValue(valueStack.Pop())); break;    			case Code.Conv_U1:	Emulate_Conv_U1(instr); break;  			case Code.Conv_U2:	Emulate_Conv_U2(instr); break;  			case Code.Conv_U4:	Emulate_Conv_U4(instr); break;  			case Code.Conv_U8:	Emulate_Conv_U8(instr); break;  			case Code.Conv_I1:	Emulate_Conv_I1(instr); break;  			case Code.Conv_I2:	Emulate_Conv_I2(instr); break;  			case Code.Conv_I4:	Emulate_Conv_I4(instr); break;  			case Code.Conv_I8:	Emulate_Conv_I8(instr); break;  			case Code.Add:		Emulate_Add(instr); break;  			case Code.Sub:		Emulate_Sub(instr); break;  			case Code.Mul:		Emulate_Mul(instr); break;  			case Code.Div:		Emulate_Div(instr); break;  			case Code.Div_Un:	Emulate_Div_Un(instr); break;  			case Code.Rem:		Emulate_Rem(instr); break;  			case Code.Rem_Un:	Emulate_Rem_Un(instr); break;  			case Code.Neg:		Emulate_Neg(instr); break;  			case Code.And:		Emulate_And(instr); break;  			case Code.Or:		Emulate_Or(instr); break;  			case Code.Xor:		Emulate_Xor(instr); break;  			case Code.Not:		Emulate_Not(instr); break;  			case Code.Shl:		Emulate_Shl(instr); break;  			case Code.Shr:		Emulate_Shr(instr); break;  			case Code.Shr_Un:	Emulate_Shr_Un(instr); break;  			case Code.Ceq:		Emulate_Ceq(instr); break;  			case Code.Cgt:		Emulate_Cgt(instr); break;  			case Code.Cgt_Un:	Emulate_Cgt_Un(instr); break;  			case Code.Clt:		Emulate_Clt(instr); break;  			case Code.Clt_Un:	Emulate_Clt_Un(instr); break;  			case Code.Unbox_Any:Emulate_Unbox_Any(instr); break;    			case Code.Call:		Emulate_Call(instr); break;  			case Code.Callvirt:	Emulate_Callvirt(instr); break;    			case Code.Castclass: Emulate_Castclass(instr); break;  			case Code.Isinst:	Emulate_Isinst(instr); break;    			case Code.Add_Ovf:	Emulate_Add_Ovf(instr); break;  			case Code.Add_Ovf_Un: Emulate_Add_Ovf_Un(instr); break;  			case Code.Sub_Ovf:	Emulate_Sub_Ovf(instr); break;  			case Code.Sub_Ovf_Un: Emulate_Sub_Ovf_Un(instr); break;  			case Code.Mul_Ovf:	Emulate_Mul_Ovf(instr); break;  			case Code.Mul_Ovf_Un: Emulate_Mul_Ovf_Un(instr); break;    			case Code.Conv_Ovf_I1:		Emulate_Conv_Ovf_I1(instr); break;  			case Code.Conv_Ovf_I1_Un:	Emulate_Conv_Ovf_I1_Un(instr); break;  			case Code.Conv_Ovf_I2:		Emulate_Conv_Ovf_I2(instr); break;  			case Code.Conv_Ovf_I2_Un:	Emulate_Conv_Ovf_I2_Un(instr); break;  			case Code.Conv_Ovf_I4:		Emulate_Conv_Ovf_I4(instr); break;  			case Code.Conv_Ovf_I4_Un:	Emulate_Conv_Ovf_I4_Un(instr); break;  			case Code.Conv_Ovf_I8:		Emulate_Conv_Ovf_I8(instr); break;  			case Code.Conv_Ovf_I8_Un:	Emulate_Conv_Ovf_I8_Un(instr); break;  			case Code.Conv_Ovf_U1:		Emulate_Conv_Ovf_U1(instr); break;  			case Code.Conv_Ovf_U1_Un:	Emulate_Conv_Ovf_U1_Un(instr); break;  			case Code.Conv_Ovf_U2:		Emulate_Conv_Ovf_U2(instr); break;  			case Code.Conv_Ovf_U2_Un:	Emulate_Conv_Ovf_U2_Un(instr); break;  			case Code.Conv_Ovf_U4:		Emulate_Conv_Ovf_U4(instr); break;  			case Code.Conv_Ovf_U4_Un:	Emulate_Conv_Ovf_U4_Un(instr); break;  			case Code.Conv_Ovf_U8:		Emulate_Conv_Ovf_U8(instr); break;  			case Code.Conv_Ovf_U8_Un:	Emulate_Conv_Ovf_U8_Un(instr); break;    			case Code.Ldelem_I1: valueStack.Pop(2); valueStack.Push(Int32Value.CreateUnknown()); break;  			case Code.Ldelem_I2: valueStack.Pop(2); valueStack.Push(Int32Value.CreateUnknown()); break;  			case Code.Ldelem_I4: valueStack.Pop(2); valueStack.Push(Int32Value.CreateUnknown()); break;  			case Code.Ldelem_I8: valueStack.Pop(2); valueStack.Push(Int64Value.CreateUnknown()); break;  			case Code.Ldelem_U1: valueStack.Pop(2); valueStack.Push(Int32Value.CreateUnknownUInt8()); break;  			case Code.Ldelem_U2: valueStack.Pop(2); valueStack.Push(Int32Value.CreateUnknownUInt16()); break;  			case Code.Ldelem_U4: valueStack.Pop(2); valueStack.Push(Int32Value.CreateUnknown()); break;  			case Code.Ldelem:	 valueStack.Pop(2); valueStack.Push(GetUnknownValue(instr.Operand as ITypeDefOrRef)); break;    			case Code.Ldind_I1:	valueStack.Pop(); valueStack.Push(Int32Value.CreateUnknown()); break;  			case Code.Ldind_I2:	valueStack.Pop(); valueStack.Push(Int32Value.CreateUnknown()); break;  			case Code.Ldind_I4:	valueStack.Pop(); valueStack.Push(Int32Value.CreateUnknown()); break;  			case Code.Ldind_I8:	valueStack.Pop(); valueStack.Push(Int64Value.CreateUnknown()); break;  			case Code.Ldind_U1:	valueStack.Pop(); valueStack.Push(Int32Value.CreateUnknownUInt8()); break;  			case Code.Ldind_U2:	valueStack.Pop(); valueStack.Push(Int32Value.CreateUnknownUInt16()); break;  			case Code.Ldind_U4:	valueStack.Pop(); valueStack.Push(Int32Value.CreateUnknown()); break;    			case Code.Ldlen:	valueStack.Pop(); valueStack.Push(Int32Value.CreateUnknown()); break;  			case Code.Sizeof:	valueStack.Push(Int32Value.CreateUnknown()); break;    			case Code.Ldfld:	Emulate_Ldfld(instr); break;  			case Code.Ldsfld:	Emulate_Ldsfld(instr); break;    			case Code.Ldftn:	valueStack.Push(new ObjectValue(instr.Operand)); break;  			case Code.Ldsflda:	valueStack.Push(new ObjectValue(instr.Operand)); break;  			case Code.Ldtoken:	valueStack.Push(new ObjectValue(instr.Operand)); break;  			case Code.Ldvirtftn:valueStack.Pop(); valueStack.Push(new ObjectValue()); break;  			case Code.Ldflda:	valueStack.Pop(); valueStack.Push(new ObjectValue()); break;    			case Code.Unbox:    			case Code.Conv_R_Un:Emulate_Conv_R_Un(instr); break;  			case Code.Conv_R4:	Emulate_Conv_R4(instr); break;  			case Code.Conv_R8:	Emulate_Conv_R8(instr); break;    			case Code.Arglist:  			case Code.Beq:  			case Code.Beq_S:  			case Code.Bge:  			case Code.Bge_S:  			case Code.Bge_Un:  			case Code.Bge_Un_S:  			case Code.Bgt:  			case Code.Bgt_S:  			case Code.Bgt_Un:  			case Code.Bgt_Un_S:  			case Code.Ble:  			case Code.Ble_S:  			case Code.Ble_Un:  			case Code.Ble_Un_S:  			case Code.Blt:  			case Code.Blt_S:  			case Code.Blt_Un:  			case Code.Blt_Un_S:  			case Code.Bne_Un:  			case Code.Bne_Un_S:  			case Code.Brfalse:  			case Code.Brfalse_S:  			case Code.Brtrue:  			case Code.Brtrue_S:  			case Code.Br:  			case Code.Br_S:  			case Code.Break:  			case Code.Calli:  			case Code.Ckfinite:  			case Code.Constrained:  			case Code.Conv_I:  			case Code.Conv_Ovf_I:  			case Code.Conv_Ovf_I_Un:  			case Code.Conv_Ovf_U:  			case Code.Conv_Ovf_U_Un:  			case Code.Conv_U:  			case Code.Cpblk:  			case Code.Cpobj:  			case Code.Endfilter:  			case Code.Endfinally:  			case Code.Initblk:  			case Code.Initobj:  			case Code.Jmp:  			case Code.Ldelema:  			case Code.Ldelem_I:  			case Code.Ldelem_R4:  			case Code.Ldelem_R8:  			case Code.Ldelem_Ref:  			case Code.Ldind_I:  			case Code.Ldind_R4:  			case Code.Ldind_R8:  			case Code.Ldind_Ref:  			case Code.Ldobj:  			case Code.Leave:  			case Code.Leave_S:  			case Code.Localloc:  			case Code.Mkrefany:  			case Code.Newarr:  			case Code.Newobj:  			case Code.Nop:  			case Code.Pop:  			case Code.Readonly:  			case Code.Refanytype:  			case Code.Refanyval:  			case Code.Ret:  			case Code.Rethrow:  			case Code.Stelem:  			case Code.Stelem_I:  			case Code.Stelem_I1:  			case Code.Stelem_I2:  			case Code.Stelem_I4:  			case Code.Stelem_I8:  			case Code.Stelem_R4:  			case Code.Stelem_R8:  			case Code.Stelem_Ref:  			case Code.Stfld:  			case Code.Stind_I:  			case Code.Stind_I1:  			case Code.Stind_I2:  			case Code.Stind_I4:  			case Code.Stind_I8:  			case Code.Stind_R4:  			case Code.Stind_R8:  			case Code.Stind_Ref:  			case Code.Stobj:  			case Code.Stsfld:  			case Code.Switch:  			case Code.Tailcall:  			case Code.Throw:  			case Code.Unaligned:  			case Code.Volatile:  			default:  				UpdateStack(instr);  				break;  			}
Magic Number,de4dot.blocks.cflow,InstructionEmulator,C:\repos\0xd4d_de4dot\de4dot.blocks\cflow\InstructionEmulator.cs,Emulate,The following statement contains a magic number: switch (instr.OpCode.Code) {  			case Code.Starg:  			case Code.Starg_S:	Emulate_Starg((Parameter)instr.Operand); break;  			case Code.Stloc:  			case Code.Stloc_S:	Emulate_Stloc((Local)instr.Operand); break;  			case Code.Stloc_0:	Emulate_Stloc(0); break;  			case Code.Stloc_1:	Emulate_Stloc(1); break;  			case Code.Stloc_2:	Emulate_Stloc(2); break;  			case Code.Stloc_3:	Emulate_Stloc(3); break;    			case Code.Ldarg:  			case Code.Ldarg_S:	valueStack.Push(GetArg((Parameter)instr.Operand)); break;  			case Code.Ldarg_0:	valueStack.Push(GetArg(0)); break;  			case Code.Ldarg_1:	valueStack.Push(GetArg(1)); break;  			case Code.Ldarg_2:	valueStack.Push(GetArg(2)); break;  			case Code.Ldarg_3:	valueStack.Push(GetArg(3)); break;  			case Code.Ldloc:  			case Code.Ldloc_S:	valueStack.Push(GetLocal((Local)instr.Operand)); break;  			case Code.Ldloc_0:	valueStack.Push(GetLocal(0)); break;  			case Code.Ldloc_1:	valueStack.Push(GetLocal(1)); break;  			case Code.Ldloc_2:	valueStack.Push(GetLocal(2)); break;  			case Code.Ldloc_3:	valueStack.Push(GetLocal(3)); break;    			case Code.Ldarga:  			case Code.Ldarga_S:	Emulate_Ldarga((Parameter)instr.Operand); break;  			case Code.Ldloca:  			case Code.Ldloca_S:	Emulate_Ldloca((Local)instr.Operand); break;    			case Code.Dup:		valueStack.CopyTop(); break;    			case Code.Ldc_I4:	valueStack.Push(new Int32Value((int)instr.Operand)); break;  			case Code.Ldc_I4_S:	valueStack.Push(new Int32Value((sbyte)instr.Operand)); break;  			case Code.Ldc_I8:	valueStack.Push(new Int64Value((long)instr.Operand)); break;  			case Code.Ldc_R4:	valueStack.Push(new Real8Value((float)instr.Operand)); break;  			case Code.Ldc_R8:	valueStack.Push(new Real8Value((double)instr.Operand)); break;  			case Code.Ldc_I4_0:	valueStack.Push(Int32Value.Zero); break;  			case Code.Ldc_I4_1:	valueStack.Push(Int32Value.One); break;  			case Code.Ldc_I4_2:	valueStack.Push(new Int32Value(2)); break;  			case Code.Ldc_I4_3:	valueStack.Push(new Int32Value(3)); break;  			case Code.Ldc_I4_4:	valueStack.Push(new Int32Value(4)); break;  			case Code.Ldc_I4_5:	valueStack.Push(new Int32Value(5)); break;  			case Code.Ldc_I4_6:	valueStack.Push(new Int32Value(6)); break;  			case Code.Ldc_I4_7:	valueStack.Push(new Int32Value(7)); break;  			case Code.Ldc_I4_8:	valueStack.Push(new Int32Value(8)); break;  			case Code.Ldc_I4_M1:valueStack.Push(new Int32Value(-1)); break;  			case Code.Ldnull:	valueStack.Push(NullValue.Instance); break;  			case Code.Ldstr:	valueStack.Push(new StringValue((string)instr.Operand)); break;  			case Code.Box:		valueStack.Push(new BoxedValue(valueStack.Pop())); break;    			case Code.Conv_U1:	Emulate_Conv_U1(instr); break;  			case Code.Conv_U2:	Emulate_Conv_U2(instr); break;  			case Code.Conv_U4:	Emulate_Conv_U4(instr); break;  			case Code.Conv_U8:	Emulate_Conv_U8(instr); break;  			case Code.Conv_I1:	Emulate_Conv_I1(instr); break;  			case Code.Conv_I2:	Emulate_Conv_I2(instr); break;  			case Code.Conv_I4:	Emulate_Conv_I4(instr); break;  			case Code.Conv_I8:	Emulate_Conv_I8(instr); break;  			case Code.Add:		Emulate_Add(instr); break;  			case Code.Sub:		Emulate_Sub(instr); break;  			case Code.Mul:		Emulate_Mul(instr); break;  			case Code.Div:		Emulate_Div(instr); break;  			case Code.Div_Un:	Emulate_Div_Un(instr); break;  			case Code.Rem:		Emulate_Rem(instr); break;  			case Code.Rem_Un:	Emulate_Rem_Un(instr); break;  			case Code.Neg:		Emulate_Neg(instr); break;  			case Code.And:		Emulate_And(instr); break;  			case Code.Or:		Emulate_Or(instr); break;  			case Code.Xor:		Emulate_Xor(instr); break;  			case Code.Not:		Emulate_Not(instr); break;  			case Code.Shl:		Emulate_Shl(instr); break;  			case Code.Shr:		Emulate_Shr(instr); break;  			case Code.Shr_Un:	Emulate_Shr_Un(instr); break;  			case Code.Ceq:		Emulate_Ceq(instr); break;  			case Code.Cgt:		Emulate_Cgt(instr); break;  			case Code.Cgt_Un:	Emulate_Cgt_Un(instr); break;  			case Code.Clt:		Emulate_Clt(instr); break;  			case Code.Clt_Un:	Emulate_Clt_Un(instr); break;  			case Code.Unbox_Any:Emulate_Unbox_Any(instr); break;    			case Code.Call:		Emulate_Call(instr); break;  			case Code.Callvirt:	Emulate_Callvirt(instr); break;    			case Code.Castclass: Emulate_Castclass(instr); break;  			case Code.Isinst:	Emulate_Isinst(instr); break;    			case Code.Add_Ovf:	Emulate_Add_Ovf(instr); break;  			case Code.Add_Ovf_Un: Emulate_Add_Ovf_Un(instr); break;  			case Code.Sub_Ovf:	Emulate_Sub_Ovf(instr); break;  			case Code.Sub_Ovf_Un: Emulate_Sub_Ovf_Un(instr); break;  			case Code.Mul_Ovf:	Emulate_Mul_Ovf(instr); break;  			case Code.Mul_Ovf_Un: Emulate_Mul_Ovf_Un(instr); break;    			case Code.Conv_Ovf_I1:		Emulate_Conv_Ovf_I1(instr); break;  			case Code.Conv_Ovf_I1_Un:	Emulate_Conv_Ovf_I1_Un(instr); break;  			case Code.Conv_Ovf_I2:		Emulate_Conv_Ovf_I2(instr); break;  			case Code.Conv_Ovf_I2_Un:	Emulate_Conv_Ovf_I2_Un(instr); break;  			case Code.Conv_Ovf_I4:		Emulate_Conv_Ovf_I4(instr); break;  			case Code.Conv_Ovf_I4_Un:	Emulate_Conv_Ovf_I4_Un(instr); break;  			case Code.Conv_Ovf_I8:		Emulate_Conv_Ovf_I8(instr); break;  			case Code.Conv_Ovf_I8_Un:	Emulate_Conv_Ovf_I8_Un(instr); break;  			case Code.Conv_Ovf_U1:		Emulate_Conv_Ovf_U1(instr); break;  			case Code.Conv_Ovf_U1_Un:	Emulate_Conv_Ovf_U1_Un(instr); break;  			case Code.Conv_Ovf_U2:		Emulate_Conv_Ovf_U2(instr); break;  			case Code.Conv_Ovf_U2_Un:	Emulate_Conv_Ovf_U2_Un(instr); break;  			case Code.Conv_Ovf_U4:		Emulate_Conv_Ovf_U4(instr); break;  			case Code.Conv_Ovf_U4_Un:	Emulate_Conv_Ovf_U4_Un(instr); break;  			case Code.Conv_Ovf_U8:		Emulate_Conv_Ovf_U8(instr); break;  			case Code.Conv_Ovf_U8_Un:	Emulate_Conv_Ovf_U8_Un(instr); break;    			case Code.Ldelem_I1: valueStack.Pop(2); valueStack.Push(Int32Value.CreateUnknown()); break;  			case Code.Ldelem_I2: valueStack.Pop(2); valueStack.Push(Int32Value.CreateUnknown()); break;  			case Code.Ldelem_I4: valueStack.Pop(2); valueStack.Push(Int32Value.CreateUnknown()); break;  			case Code.Ldelem_I8: valueStack.Pop(2); valueStack.Push(Int64Value.CreateUnknown()); break;  			case Code.Ldelem_U1: valueStack.Pop(2); valueStack.Push(Int32Value.CreateUnknownUInt8()); break;  			case Code.Ldelem_U2: valueStack.Pop(2); valueStack.Push(Int32Value.CreateUnknownUInt16()); break;  			case Code.Ldelem_U4: valueStack.Pop(2); valueStack.Push(Int32Value.CreateUnknown()); break;  			case Code.Ldelem:	 valueStack.Pop(2); valueStack.Push(GetUnknownValue(instr.Operand as ITypeDefOrRef)); break;    			case Code.Ldind_I1:	valueStack.Pop(); valueStack.Push(Int32Value.CreateUnknown()); break;  			case Code.Ldind_I2:	valueStack.Pop(); valueStack.Push(Int32Value.CreateUnknown()); break;  			case Code.Ldind_I4:	valueStack.Pop(); valueStack.Push(Int32Value.CreateUnknown()); break;  			case Code.Ldind_I8:	valueStack.Pop(); valueStack.Push(Int64Value.CreateUnknown()); break;  			case Code.Ldind_U1:	valueStack.Pop(); valueStack.Push(Int32Value.CreateUnknownUInt8()); break;  			case Code.Ldind_U2:	valueStack.Pop(); valueStack.Push(Int32Value.CreateUnknownUInt16()); break;  			case Code.Ldind_U4:	valueStack.Pop(); valueStack.Push(Int32Value.CreateUnknown()); break;    			case Code.Ldlen:	valueStack.Pop(); valueStack.Push(Int32Value.CreateUnknown()); break;  			case Code.Sizeof:	valueStack.Push(Int32Value.CreateUnknown()); break;    			case Code.Ldfld:	Emulate_Ldfld(instr); break;  			case Code.Ldsfld:	Emulate_Ldsfld(instr); break;    			case Code.Ldftn:	valueStack.Push(new ObjectValue(instr.Operand)); break;  			case Code.Ldsflda:	valueStack.Push(new ObjectValue(instr.Operand)); break;  			case Code.Ldtoken:	valueStack.Push(new ObjectValue(instr.Operand)); break;  			case Code.Ldvirtftn:valueStack.Pop(); valueStack.Push(new ObjectValue()); break;  			case Code.Ldflda:	valueStack.Pop(); valueStack.Push(new ObjectValue()); break;    			case Code.Unbox:    			case Code.Conv_R_Un:Emulate_Conv_R_Un(instr); break;  			case Code.Conv_R4:	Emulate_Conv_R4(instr); break;  			case Code.Conv_R8:	Emulate_Conv_R8(instr); break;    			case Code.Arglist:  			case Code.Beq:  			case Code.Beq_S:  			case Code.Bge:  			case Code.Bge_S:  			case Code.Bge_Un:  			case Code.Bge_Un_S:  			case Code.Bgt:  			case Code.Bgt_S:  			case Code.Bgt_Un:  			case Code.Bgt_Un_S:  			case Code.Ble:  			case Code.Ble_S:  			case Code.Ble_Un:  			case Code.Ble_Un_S:  			case Code.Blt:  			case Code.Blt_S:  			case Code.Blt_Un:  			case Code.Blt_Un_S:  			case Code.Bne_Un:  			case Code.Bne_Un_S:  			case Code.Brfalse:  			case Code.Brfalse_S:  			case Code.Brtrue:  			case Code.Brtrue_S:  			case Code.Br:  			case Code.Br_S:  			case Code.Break:  			case Code.Calli:  			case Code.Ckfinite:  			case Code.Constrained:  			case Code.Conv_I:  			case Code.Conv_Ovf_I:  			case Code.Conv_Ovf_I_Un:  			case Code.Conv_Ovf_U:  			case Code.Conv_Ovf_U_Un:  			case Code.Conv_U:  			case Code.Cpblk:  			case Code.Cpobj:  			case Code.Endfilter:  			case Code.Endfinally:  			case Code.Initblk:  			case Code.Initobj:  			case Code.Jmp:  			case Code.Ldelema:  			case Code.Ldelem_I:  			case Code.Ldelem_R4:  			case Code.Ldelem_R8:  			case Code.Ldelem_Ref:  			case Code.Ldind_I:  			case Code.Ldind_R4:  			case Code.Ldind_R8:  			case Code.Ldind_Ref:  			case Code.Ldobj:  			case Code.Leave:  			case Code.Leave_S:  			case Code.Localloc:  			case Code.Mkrefany:  			case Code.Newarr:  			case Code.Newobj:  			case Code.Nop:  			case Code.Pop:  			case Code.Readonly:  			case Code.Refanytype:  			case Code.Refanyval:  			case Code.Ret:  			case Code.Rethrow:  			case Code.Stelem:  			case Code.Stelem_I:  			case Code.Stelem_I1:  			case Code.Stelem_I2:  			case Code.Stelem_I4:  			case Code.Stelem_I8:  			case Code.Stelem_R4:  			case Code.Stelem_R8:  			case Code.Stelem_Ref:  			case Code.Stfld:  			case Code.Stind_I:  			case Code.Stind_I1:  			case Code.Stind_I2:  			case Code.Stind_I4:  			case Code.Stind_I8:  			case Code.Stind_R4:  			case Code.Stind_R8:  			case Code.Stind_Ref:  			case Code.Stobj:  			case Code.Stsfld:  			case Code.Switch:  			case Code.Tailcall:  			case Code.Throw:  			case Code.Unaligned:  			case Code.Volatile:  			default:  				UpdateStack(instr);  				break;  			}
Magic Number,de4dot.blocks.cflow,InstructionEmulator,C:\repos\0xd4d_de4dot\de4dot.blocks\cflow\InstructionEmulator.cs,Emulate,The following statement contains a magic number: switch (instr.OpCode.Code) {  			case Code.Starg:  			case Code.Starg_S:	Emulate_Starg((Parameter)instr.Operand); break;  			case Code.Stloc:  			case Code.Stloc_S:	Emulate_Stloc((Local)instr.Operand); break;  			case Code.Stloc_0:	Emulate_Stloc(0); break;  			case Code.Stloc_1:	Emulate_Stloc(1); break;  			case Code.Stloc_2:	Emulate_Stloc(2); break;  			case Code.Stloc_3:	Emulate_Stloc(3); break;    			case Code.Ldarg:  			case Code.Ldarg_S:	valueStack.Push(GetArg((Parameter)instr.Operand)); break;  			case Code.Ldarg_0:	valueStack.Push(GetArg(0)); break;  			case Code.Ldarg_1:	valueStack.Push(GetArg(1)); break;  			case Code.Ldarg_2:	valueStack.Push(GetArg(2)); break;  			case Code.Ldarg_3:	valueStack.Push(GetArg(3)); break;  			case Code.Ldloc:  			case Code.Ldloc_S:	valueStack.Push(GetLocal((Local)instr.Operand)); break;  			case Code.Ldloc_0:	valueStack.Push(GetLocal(0)); break;  			case Code.Ldloc_1:	valueStack.Push(GetLocal(1)); break;  			case Code.Ldloc_2:	valueStack.Push(GetLocal(2)); break;  			case Code.Ldloc_3:	valueStack.Push(GetLocal(3)); break;    			case Code.Ldarga:  			case Code.Ldarga_S:	Emulate_Ldarga((Parameter)instr.Operand); break;  			case Code.Ldloca:  			case Code.Ldloca_S:	Emulate_Ldloca((Local)instr.Operand); break;    			case Code.Dup:		valueStack.CopyTop(); break;    			case Code.Ldc_I4:	valueStack.Push(new Int32Value((int)instr.Operand)); break;  			case Code.Ldc_I4_S:	valueStack.Push(new Int32Value((sbyte)instr.Operand)); break;  			case Code.Ldc_I8:	valueStack.Push(new Int64Value((long)instr.Operand)); break;  			case Code.Ldc_R4:	valueStack.Push(new Real8Value((float)instr.Operand)); break;  			case Code.Ldc_R8:	valueStack.Push(new Real8Value((double)instr.Operand)); break;  			case Code.Ldc_I4_0:	valueStack.Push(Int32Value.Zero); break;  			case Code.Ldc_I4_1:	valueStack.Push(Int32Value.One); break;  			case Code.Ldc_I4_2:	valueStack.Push(new Int32Value(2)); break;  			case Code.Ldc_I4_3:	valueStack.Push(new Int32Value(3)); break;  			case Code.Ldc_I4_4:	valueStack.Push(new Int32Value(4)); break;  			case Code.Ldc_I4_5:	valueStack.Push(new Int32Value(5)); break;  			case Code.Ldc_I4_6:	valueStack.Push(new Int32Value(6)); break;  			case Code.Ldc_I4_7:	valueStack.Push(new Int32Value(7)); break;  			case Code.Ldc_I4_8:	valueStack.Push(new Int32Value(8)); break;  			case Code.Ldc_I4_M1:valueStack.Push(new Int32Value(-1)); break;  			case Code.Ldnull:	valueStack.Push(NullValue.Instance); break;  			case Code.Ldstr:	valueStack.Push(new StringValue((string)instr.Operand)); break;  			case Code.Box:		valueStack.Push(new BoxedValue(valueStack.Pop())); break;    			case Code.Conv_U1:	Emulate_Conv_U1(instr); break;  			case Code.Conv_U2:	Emulate_Conv_U2(instr); break;  			case Code.Conv_U4:	Emulate_Conv_U4(instr); break;  			case Code.Conv_U8:	Emulate_Conv_U8(instr); break;  			case Code.Conv_I1:	Emulate_Conv_I1(instr); break;  			case Code.Conv_I2:	Emulate_Conv_I2(instr); break;  			case Code.Conv_I4:	Emulate_Conv_I4(instr); break;  			case Code.Conv_I8:	Emulate_Conv_I8(instr); break;  			case Code.Add:		Emulate_Add(instr); break;  			case Code.Sub:		Emulate_Sub(instr); break;  			case Code.Mul:		Emulate_Mul(instr); break;  			case Code.Div:		Emulate_Div(instr); break;  			case Code.Div_Un:	Emulate_Div_Un(instr); break;  			case Code.Rem:		Emulate_Rem(instr); break;  			case Code.Rem_Un:	Emulate_Rem_Un(instr); break;  			case Code.Neg:		Emulate_Neg(instr); break;  			case Code.And:		Emulate_And(instr); break;  			case Code.Or:		Emulate_Or(instr); break;  			case Code.Xor:		Emulate_Xor(instr); break;  			case Code.Not:		Emulate_Not(instr); break;  			case Code.Shl:		Emulate_Shl(instr); break;  			case Code.Shr:		Emulate_Shr(instr); break;  			case Code.Shr_Un:	Emulate_Shr_Un(instr); break;  			case Code.Ceq:		Emulate_Ceq(instr); break;  			case Code.Cgt:		Emulate_Cgt(instr); break;  			case Code.Cgt_Un:	Emulate_Cgt_Un(instr); break;  			case Code.Clt:		Emulate_Clt(instr); break;  			case Code.Clt_Un:	Emulate_Clt_Un(instr); break;  			case Code.Unbox_Any:Emulate_Unbox_Any(instr); break;    			case Code.Call:		Emulate_Call(instr); break;  			case Code.Callvirt:	Emulate_Callvirt(instr); break;    			case Code.Castclass: Emulate_Castclass(instr); break;  			case Code.Isinst:	Emulate_Isinst(instr); break;    			case Code.Add_Ovf:	Emulate_Add_Ovf(instr); break;  			case Code.Add_Ovf_Un: Emulate_Add_Ovf_Un(instr); break;  			case Code.Sub_Ovf:	Emulate_Sub_Ovf(instr); break;  			case Code.Sub_Ovf_Un: Emulate_Sub_Ovf_Un(instr); break;  			case Code.Mul_Ovf:	Emulate_Mul_Ovf(instr); break;  			case Code.Mul_Ovf_Un: Emulate_Mul_Ovf_Un(instr); break;    			case Code.Conv_Ovf_I1:		Emulate_Conv_Ovf_I1(instr); break;  			case Code.Conv_Ovf_I1_Un:	Emulate_Conv_Ovf_I1_Un(instr); break;  			case Code.Conv_Ovf_I2:		Emulate_Conv_Ovf_I2(instr); break;  			case Code.Conv_Ovf_I2_Un:	Emulate_Conv_Ovf_I2_Un(instr); break;  			case Code.Conv_Ovf_I4:		Emulate_Conv_Ovf_I4(instr); break;  			case Code.Conv_Ovf_I4_Un:	Emulate_Conv_Ovf_I4_Un(instr); break;  			case Code.Conv_Ovf_I8:		Emulate_Conv_Ovf_I8(instr); break;  			case Code.Conv_Ovf_I8_Un:	Emulate_Conv_Ovf_I8_Un(instr); break;  			case Code.Conv_Ovf_U1:		Emulate_Conv_Ovf_U1(instr); break;  			case Code.Conv_Ovf_U1_Un:	Emulate_Conv_Ovf_U1_Un(instr); break;  			case Code.Conv_Ovf_U2:		Emulate_Conv_Ovf_U2(instr); break;  			case Code.Conv_Ovf_U2_Un:	Emulate_Conv_Ovf_U2_Un(instr); break;  			case Code.Conv_Ovf_U4:		Emulate_Conv_Ovf_U4(instr); break;  			case Code.Conv_Ovf_U4_Un:	Emulate_Conv_Ovf_U4_Un(instr); break;  			case Code.Conv_Ovf_U8:		Emulate_Conv_Ovf_U8(instr); break;  			case Code.Conv_Ovf_U8_Un:	Emulate_Conv_Ovf_U8_Un(instr); break;    			case Code.Ldelem_I1: valueStack.Pop(2); valueStack.Push(Int32Value.CreateUnknown()); break;  			case Code.Ldelem_I2: valueStack.Pop(2); valueStack.Push(Int32Value.CreateUnknown()); break;  			case Code.Ldelem_I4: valueStack.Pop(2); valueStack.Push(Int32Value.CreateUnknown()); break;  			case Code.Ldelem_I8: valueStack.Pop(2); valueStack.Push(Int64Value.CreateUnknown()); break;  			case Code.Ldelem_U1: valueStack.Pop(2); valueStack.Push(Int32Value.CreateUnknownUInt8()); break;  			case Code.Ldelem_U2: valueStack.Pop(2); valueStack.Push(Int32Value.CreateUnknownUInt16()); break;  			case Code.Ldelem_U4: valueStack.Pop(2); valueStack.Push(Int32Value.CreateUnknown()); break;  			case Code.Ldelem:	 valueStack.Pop(2); valueStack.Push(GetUnknownValue(instr.Operand as ITypeDefOrRef)); break;    			case Code.Ldind_I1:	valueStack.Pop(); valueStack.Push(Int32Value.CreateUnknown()); break;  			case Code.Ldind_I2:	valueStack.Pop(); valueStack.Push(Int32Value.CreateUnknown()); break;  			case Code.Ldind_I4:	valueStack.Pop(); valueStack.Push(Int32Value.CreateUnknown()); break;  			case Code.Ldind_I8:	valueStack.Pop(); valueStack.Push(Int64Value.CreateUnknown()); break;  			case Code.Ldind_U1:	valueStack.Pop(); valueStack.Push(Int32Value.CreateUnknownUInt8()); break;  			case Code.Ldind_U2:	valueStack.Pop(); valueStack.Push(Int32Value.CreateUnknownUInt16()); break;  			case Code.Ldind_U4:	valueStack.Pop(); valueStack.Push(Int32Value.CreateUnknown()); break;    			case Code.Ldlen:	valueStack.Pop(); valueStack.Push(Int32Value.CreateUnknown()); break;  			case Code.Sizeof:	valueStack.Push(Int32Value.CreateUnknown()); break;    			case Code.Ldfld:	Emulate_Ldfld(instr); break;  			case Code.Ldsfld:	Emulate_Ldsfld(instr); break;    			case Code.Ldftn:	valueStack.Push(new ObjectValue(instr.Operand)); break;  			case Code.Ldsflda:	valueStack.Push(new ObjectValue(instr.Operand)); break;  			case Code.Ldtoken:	valueStack.Push(new ObjectValue(instr.Operand)); break;  			case Code.Ldvirtftn:valueStack.Pop(); valueStack.Push(new ObjectValue()); break;  			case Code.Ldflda:	valueStack.Pop(); valueStack.Push(new ObjectValue()); break;    			case Code.Unbox:    			case Code.Conv_R_Un:Emulate_Conv_R_Un(instr); break;  			case Code.Conv_R4:	Emulate_Conv_R4(instr); break;  			case Code.Conv_R8:	Emulate_Conv_R8(instr); break;    			case Code.Arglist:  			case Code.Beq:  			case Code.Beq_S:  			case Code.Bge:  			case Code.Bge_S:  			case Code.Bge_Un:  			case Code.Bge_Un_S:  			case Code.Bgt:  			case Code.Bgt_S:  			case Code.Bgt_Un:  			case Code.Bgt_Un_S:  			case Code.Ble:  			case Code.Ble_S:  			case Code.Ble_Un:  			case Code.Ble_Un_S:  			case Code.Blt:  			case Code.Blt_S:  			case Code.Blt_Un:  			case Code.Blt_Un_S:  			case Code.Bne_Un:  			case Code.Bne_Un_S:  			case Code.Brfalse:  			case Code.Brfalse_S:  			case Code.Brtrue:  			case Code.Brtrue_S:  			case Code.Br:  			case Code.Br_S:  			case Code.Break:  			case Code.Calli:  			case Code.Ckfinite:  			case Code.Constrained:  			case Code.Conv_I:  			case Code.Conv_Ovf_I:  			case Code.Conv_Ovf_I_Un:  			case Code.Conv_Ovf_U:  			case Code.Conv_Ovf_U_Un:  			case Code.Conv_U:  			case Code.Cpblk:  			case Code.Cpobj:  			case Code.Endfilter:  			case Code.Endfinally:  			case Code.Initblk:  			case Code.Initobj:  			case Code.Jmp:  			case Code.Ldelema:  			case Code.Ldelem_I:  			case Code.Ldelem_R4:  			case Code.Ldelem_R8:  			case Code.Ldelem_Ref:  			case Code.Ldind_I:  			case Code.Ldind_R4:  			case Code.Ldind_R8:  			case Code.Ldind_Ref:  			case Code.Ldobj:  			case Code.Leave:  			case Code.Leave_S:  			case Code.Localloc:  			case Code.Mkrefany:  			case Code.Newarr:  			case Code.Newobj:  			case Code.Nop:  			case Code.Pop:  			case Code.Readonly:  			case Code.Refanytype:  			case Code.Refanyval:  			case Code.Ret:  			case Code.Rethrow:  			case Code.Stelem:  			case Code.Stelem_I:  			case Code.Stelem_I1:  			case Code.Stelem_I2:  			case Code.Stelem_I4:  			case Code.Stelem_I8:  			case Code.Stelem_R4:  			case Code.Stelem_R8:  			case Code.Stelem_Ref:  			case Code.Stfld:  			case Code.Stind_I:  			case Code.Stind_I1:  			case Code.Stind_I2:  			case Code.Stind_I4:  			case Code.Stind_I8:  			case Code.Stind_R4:  			case Code.Stind_R8:  			case Code.Stind_Ref:  			case Code.Stobj:  			case Code.Stsfld:  			case Code.Switch:  			case Code.Tailcall:  			case Code.Throw:  			case Code.Unaligned:  			case Code.Volatile:  			default:  				UpdateStack(instr);  				break;  			}
Magic Number,de4dot.blocks.cflow,InstructionEmulator,C:\repos\0xd4d_de4dot\de4dot.blocks\cflow\InstructionEmulator.cs,Emulate,The following statement contains a magic number: switch (instr.OpCode.Code) {  			case Code.Starg:  			case Code.Starg_S:	Emulate_Starg((Parameter)instr.Operand); break;  			case Code.Stloc:  			case Code.Stloc_S:	Emulate_Stloc((Local)instr.Operand); break;  			case Code.Stloc_0:	Emulate_Stloc(0); break;  			case Code.Stloc_1:	Emulate_Stloc(1); break;  			case Code.Stloc_2:	Emulate_Stloc(2); break;  			case Code.Stloc_3:	Emulate_Stloc(3); break;    			case Code.Ldarg:  			case Code.Ldarg_S:	valueStack.Push(GetArg((Parameter)instr.Operand)); break;  			case Code.Ldarg_0:	valueStack.Push(GetArg(0)); break;  			case Code.Ldarg_1:	valueStack.Push(GetArg(1)); break;  			case Code.Ldarg_2:	valueStack.Push(GetArg(2)); break;  			case Code.Ldarg_3:	valueStack.Push(GetArg(3)); break;  			case Code.Ldloc:  			case Code.Ldloc_S:	valueStack.Push(GetLocal((Local)instr.Operand)); break;  			case Code.Ldloc_0:	valueStack.Push(GetLocal(0)); break;  			case Code.Ldloc_1:	valueStack.Push(GetLocal(1)); break;  			case Code.Ldloc_2:	valueStack.Push(GetLocal(2)); break;  			case Code.Ldloc_3:	valueStack.Push(GetLocal(3)); break;    			case Code.Ldarga:  			case Code.Ldarga_S:	Emulate_Ldarga((Parameter)instr.Operand); break;  			case Code.Ldloca:  			case Code.Ldloca_S:	Emulate_Ldloca((Local)instr.Operand); break;    			case Code.Dup:		valueStack.CopyTop(); break;    			case Code.Ldc_I4:	valueStack.Push(new Int32Value((int)instr.Operand)); break;  			case Code.Ldc_I4_S:	valueStack.Push(new Int32Value((sbyte)instr.Operand)); break;  			case Code.Ldc_I8:	valueStack.Push(new Int64Value((long)instr.Operand)); break;  			case Code.Ldc_R4:	valueStack.Push(new Real8Value((float)instr.Operand)); break;  			case Code.Ldc_R8:	valueStack.Push(new Real8Value((double)instr.Operand)); break;  			case Code.Ldc_I4_0:	valueStack.Push(Int32Value.Zero); break;  			case Code.Ldc_I4_1:	valueStack.Push(Int32Value.One); break;  			case Code.Ldc_I4_2:	valueStack.Push(new Int32Value(2)); break;  			case Code.Ldc_I4_3:	valueStack.Push(new Int32Value(3)); break;  			case Code.Ldc_I4_4:	valueStack.Push(new Int32Value(4)); break;  			case Code.Ldc_I4_5:	valueStack.Push(new Int32Value(5)); break;  			case Code.Ldc_I4_6:	valueStack.Push(new Int32Value(6)); break;  			case Code.Ldc_I4_7:	valueStack.Push(new Int32Value(7)); break;  			case Code.Ldc_I4_8:	valueStack.Push(new Int32Value(8)); break;  			case Code.Ldc_I4_M1:valueStack.Push(new Int32Value(-1)); break;  			case Code.Ldnull:	valueStack.Push(NullValue.Instance); break;  			case Code.Ldstr:	valueStack.Push(new StringValue((string)instr.Operand)); break;  			case Code.Box:		valueStack.Push(new BoxedValue(valueStack.Pop())); break;    			case Code.Conv_U1:	Emulate_Conv_U1(instr); break;  			case Code.Conv_U2:	Emulate_Conv_U2(instr); break;  			case Code.Conv_U4:	Emulate_Conv_U4(instr); break;  			case Code.Conv_U8:	Emulate_Conv_U8(instr); break;  			case Code.Conv_I1:	Emulate_Conv_I1(instr); break;  			case Code.Conv_I2:	Emulate_Conv_I2(instr); break;  			case Code.Conv_I4:	Emulate_Conv_I4(instr); break;  			case Code.Conv_I8:	Emulate_Conv_I8(instr); break;  			case Code.Add:		Emulate_Add(instr); break;  			case Code.Sub:		Emulate_Sub(instr); break;  			case Code.Mul:		Emulate_Mul(instr); break;  			case Code.Div:		Emulate_Div(instr); break;  			case Code.Div_Un:	Emulate_Div_Un(instr); break;  			case Code.Rem:		Emulate_Rem(instr); break;  			case Code.Rem_Un:	Emulate_Rem_Un(instr); break;  			case Code.Neg:		Emulate_Neg(instr); break;  			case Code.And:		Emulate_And(instr); break;  			case Code.Or:		Emulate_Or(instr); break;  			case Code.Xor:		Emulate_Xor(instr); break;  			case Code.Not:		Emulate_Not(instr); break;  			case Code.Shl:		Emulate_Shl(instr); break;  			case Code.Shr:		Emulate_Shr(instr); break;  			case Code.Shr_Un:	Emulate_Shr_Un(instr); break;  			case Code.Ceq:		Emulate_Ceq(instr); break;  			case Code.Cgt:		Emulate_Cgt(instr); break;  			case Code.Cgt_Un:	Emulate_Cgt_Un(instr); break;  			case Code.Clt:		Emulate_Clt(instr); break;  			case Code.Clt_Un:	Emulate_Clt_Un(instr); break;  			case Code.Unbox_Any:Emulate_Unbox_Any(instr); break;    			case Code.Call:		Emulate_Call(instr); break;  			case Code.Callvirt:	Emulate_Callvirt(instr); break;    			case Code.Castclass: Emulate_Castclass(instr); break;  			case Code.Isinst:	Emulate_Isinst(instr); break;    			case Code.Add_Ovf:	Emulate_Add_Ovf(instr); break;  			case Code.Add_Ovf_Un: Emulate_Add_Ovf_Un(instr); break;  			case Code.Sub_Ovf:	Emulate_Sub_Ovf(instr); break;  			case Code.Sub_Ovf_Un: Emulate_Sub_Ovf_Un(instr); break;  			case Code.Mul_Ovf:	Emulate_Mul_Ovf(instr); break;  			case Code.Mul_Ovf_Un: Emulate_Mul_Ovf_Un(instr); break;    			case Code.Conv_Ovf_I1:		Emulate_Conv_Ovf_I1(instr); break;  			case Code.Conv_Ovf_I1_Un:	Emulate_Conv_Ovf_I1_Un(instr); break;  			case Code.Conv_Ovf_I2:		Emulate_Conv_Ovf_I2(instr); break;  			case Code.Conv_Ovf_I2_Un:	Emulate_Conv_Ovf_I2_Un(instr); break;  			case Code.Conv_Ovf_I4:		Emulate_Conv_Ovf_I4(instr); break;  			case Code.Conv_Ovf_I4_Un:	Emulate_Conv_Ovf_I4_Un(instr); break;  			case Code.Conv_Ovf_I8:		Emulate_Conv_Ovf_I8(instr); break;  			case Code.Conv_Ovf_I8_Un:	Emulate_Conv_Ovf_I8_Un(instr); break;  			case Code.Conv_Ovf_U1:		Emulate_Conv_Ovf_U1(instr); break;  			case Code.Conv_Ovf_U1_Un:	Emulate_Conv_Ovf_U1_Un(instr); break;  			case Code.Conv_Ovf_U2:		Emulate_Conv_Ovf_U2(instr); break;  			case Code.Conv_Ovf_U2_Un:	Emulate_Conv_Ovf_U2_Un(instr); break;  			case Code.Conv_Ovf_U4:		Emulate_Conv_Ovf_U4(instr); break;  			case Code.Conv_Ovf_U4_Un:	Emulate_Conv_Ovf_U4_Un(instr); break;  			case Code.Conv_Ovf_U8:		Emulate_Conv_Ovf_U8(instr); break;  			case Code.Conv_Ovf_U8_Un:	Emulate_Conv_Ovf_U8_Un(instr); break;    			case Code.Ldelem_I1: valueStack.Pop(2); valueStack.Push(Int32Value.CreateUnknown()); break;  			case Code.Ldelem_I2: valueStack.Pop(2); valueStack.Push(Int32Value.CreateUnknown()); break;  			case Code.Ldelem_I4: valueStack.Pop(2); valueStack.Push(Int32Value.CreateUnknown()); break;  			case Code.Ldelem_I8: valueStack.Pop(2); valueStack.Push(Int64Value.CreateUnknown()); break;  			case Code.Ldelem_U1: valueStack.Pop(2); valueStack.Push(Int32Value.CreateUnknownUInt8()); break;  			case Code.Ldelem_U2: valueStack.Pop(2); valueStack.Push(Int32Value.CreateUnknownUInt16()); break;  			case Code.Ldelem_U4: valueStack.Pop(2); valueStack.Push(Int32Value.CreateUnknown()); break;  			case Code.Ldelem:	 valueStack.Pop(2); valueStack.Push(GetUnknownValue(instr.Operand as ITypeDefOrRef)); break;    			case Code.Ldind_I1:	valueStack.Pop(); valueStack.Push(Int32Value.CreateUnknown()); break;  			case Code.Ldind_I2:	valueStack.Pop(); valueStack.Push(Int32Value.CreateUnknown()); break;  			case Code.Ldind_I4:	valueStack.Pop(); valueStack.Push(Int32Value.CreateUnknown()); break;  			case Code.Ldind_I8:	valueStack.Pop(); valueStack.Push(Int64Value.CreateUnknown()); break;  			case Code.Ldind_U1:	valueStack.Pop(); valueStack.Push(Int32Value.CreateUnknownUInt8()); break;  			case Code.Ldind_U2:	valueStack.Pop(); valueStack.Push(Int32Value.CreateUnknownUInt16()); break;  			case Code.Ldind_U4:	valueStack.Pop(); valueStack.Push(Int32Value.CreateUnknown()); break;    			case Code.Ldlen:	valueStack.Pop(); valueStack.Push(Int32Value.CreateUnknown()); break;  			case Code.Sizeof:	valueStack.Push(Int32Value.CreateUnknown()); break;    			case Code.Ldfld:	Emulate_Ldfld(instr); break;  			case Code.Ldsfld:	Emulate_Ldsfld(instr); break;    			case Code.Ldftn:	valueStack.Push(new ObjectValue(instr.Operand)); break;  			case Code.Ldsflda:	valueStack.Push(new ObjectValue(instr.Operand)); break;  			case Code.Ldtoken:	valueStack.Push(new ObjectValue(instr.Operand)); break;  			case Code.Ldvirtftn:valueStack.Pop(); valueStack.Push(new ObjectValue()); break;  			case Code.Ldflda:	valueStack.Pop(); valueStack.Push(new ObjectValue()); break;    			case Code.Unbox:    			case Code.Conv_R_Un:Emulate_Conv_R_Un(instr); break;  			case Code.Conv_R4:	Emulate_Conv_R4(instr); break;  			case Code.Conv_R8:	Emulate_Conv_R8(instr); break;    			case Code.Arglist:  			case Code.Beq:  			case Code.Beq_S:  			case Code.Bge:  			case Code.Bge_S:  			case Code.Bge_Un:  			case Code.Bge_Un_S:  			case Code.Bgt:  			case Code.Bgt_S:  			case Code.Bgt_Un:  			case Code.Bgt_Un_S:  			case Code.Ble:  			case Code.Ble_S:  			case Code.Ble_Un:  			case Code.Ble_Un_S:  			case Code.Blt:  			case Code.Blt_S:  			case Code.Blt_Un:  			case Code.Blt_Un_S:  			case Code.Bne_Un:  			case Code.Bne_Un_S:  			case Code.Brfalse:  			case Code.Brfalse_S:  			case Code.Brtrue:  			case Code.Brtrue_S:  			case Code.Br:  			case Code.Br_S:  			case Code.Break:  			case Code.Calli:  			case Code.Ckfinite:  			case Code.Constrained:  			case Code.Conv_I:  			case Code.Conv_Ovf_I:  			case Code.Conv_Ovf_I_Un:  			case Code.Conv_Ovf_U:  			case Code.Conv_Ovf_U_Un:  			case Code.Conv_U:  			case Code.Cpblk:  			case Code.Cpobj:  			case Code.Endfilter:  			case Code.Endfinally:  			case Code.Initblk:  			case Code.Initobj:  			case Code.Jmp:  			case Code.Ldelema:  			case Code.Ldelem_I:  			case Code.Ldelem_R4:  			case Code.Ldelem_R8:  			case Code.Ldelem_Ref:  			case Code.Ldind_I:  			case Code.Ldind_R4:  			case Code.Ldind_R8:  			case Code.Ldind_Ref:  			case Code.Ldobj:  			case Code.Leave:  			case Code.Leave_S:  			case Code.Localloc:  			case Code.Mkrefany:  			case Code.Newarr:  			case Code.Newobj:  			case Code.Nop:  			case Code.Pop:  			case Code.Readonly:  			case Code.Refanytype:  			case Code.Refanyval:  			case Code.Ret:  			case Code.Rethrow:  			case Code.Stelem:  			case Code.Stelem_I:  			case Code.Stelem_I1:  			case Code.Stelem_I2:  			case Code.Stelem_I4:  			case Code.Stelem_I8:  			case Code.Stelem_R4:  			case Code.Stelem_R8:  			case Code.Stelem_Ref:  			case Code.Stfld:  			case Code.Stind_I:  			case Code.Stind_I1:  			case Code.Stind_I2:  			case Code.Stind_I4:  			case Code.Stind_I8:  			case Code.Stind_R4:  			case Code.Stind_R8:  			case Code.Stind_Ref:  			case Code.Stobj:  			case Code.Stsfld:  			case Code.Switch:  			case Code.Tailcall:  			case Code.Throw:  			case Code.Unaligned:  			case Code.Volatile:  			default:  				UpdateStack(instr);  				break;  			}
Magic Number,de4dot.blocks.cflow,InstructionEmulator,C:\repos\0xd4d_de4dot\de4dot.blocks\cflow\InstructionEmulator.cs,Emulate,The following statement contains a magic number: switch (instr.OpCode.Code) {  			case Code.Starg:  			case Code.Starg_S:	Emulate_Starg((Parameter)instr.Operand); break;  			case Code.Stloc:  			case Code.Stloc_S:	Emulate_Stloc((Local)instr.Operand); break;  			case Code.Stloc_0:	Emulate_Stloc(0); break;  			case Code.Stloc_1:	Emulate_Stloc(1); break;  			case Code.Stloc_2:	Emulate_Stloc(2); break;  			case Code.Stloc_3:	Emulate_Stloc(3); break;    			case Code.Ldarg:  			case Code.Ldarg_S:	valueStack.Push(GetArg((Parameter)instr.Operand)); break;  			case Code.Ldarg_0:	valueStack.Push(GetArg(0)); break;  			case Code.Ldarg_1:	valueStack.Push(GetArg(1)); break;  			case Code.Ldarg_2:	valueStack.Push(GetArg(2)); break;  			case Code.Ldarg_3:	valueStack.Push(GetArg(3)); break;  			case Code.Ldloc:  			case Code.Ldloc_S:	valueStack.Push(GetLocal((Local)instr.Operand)); break;  			case Code.Ldloc_0:	valueStack.Push(GetLocal(0)); break;  			case Code.Ldloc_1:	valueStack.Push(GetLocal(1)); break;  			case Code.Ldloc_2:	valueStack.Push(GetLocal(2)); break;  			case Code.Ldloc_3:	valueStack.Push(GetLocal(3)); break;    			case Code.Ldarga:  			case Code.Ldarga_S:	Emulate_Ldarga((Parameter)instr.Operand); break;  			case Code.Ldloca:  			case Code.Ldloca_S:	Emulate_Ldloca((Local)instr.Operand); break;    			case Code.Dup:		valueStack.CopyTop(); break;    			case Code.Ldc_I4:	valueStack.Push(new Int32Value((int)instr.Operand)); break;  			case Code.Ldc_I4_S:	valueStack.Push(new Int32Value((sbyte)instr.Operand)); break;  			case Code.Ldc_I8:	valueStack.Push(new Int64Value((long)instr.Operand)); break;  			case Code.Ldc_R4:	valueStack.Push(new Real8Value((float)instr.Operand)); break;  			case Code.Ldc_R8:	valueStack.Push(new Real8Value((double)instr.Operand)); break;  			case Code.Ldc_I4_0:	valueStack.Push(Int32Value.Zero); break;  			case Code.Ldc_I4_1:	valueStack.Push(Int32Value.One); break;  			case Code.Ldc_I4_2:	valueStack.Push(new Int32Value(2)); break;  			case Code.Ldc_I4_3:	valueStack.Push(new Int32Value(3)); break;  			case Code.Ldc_I4_4:	valueStack.Push(new Int32Value(4)); break;  			case Code.Ldc_I4_5:	valueStack.Push(new Int32Value(5)); break;  			case Code.Ldc_I4_6:	valueStack.Push(new Int32Value(6)); break;  			case Code.Ldc_I4_7:	valueStack.Push(new Int32Value(7)); break;  			case Code.Ldc_I4_8:	valueStack.Push(new Int32Value(8)); break;  			case Code.Ldc_I4_M1:valueStack.Push(new Int32Value(-1)); break;  			case Code.Ldnull:	valueStack.Push(NullValue.Instance); break;  			case Code.Ldstr:	valueStack.Push(new StringValue((string)instr.Operand)); break;  			case Code.Box:		valueStack.Push(new BoxedValue(valueStack.Pop())); break;    			case Code.Conv_U1:	Emulate_Conv_U1(instr); break;  			case Code.Conv_U2:	Emulate_Conv_U2(instr); break;  			case Code.Conv_U4:	Emulate_Conv_U4(instr); break;  			case Code.Conv_U8:	Emulate_Conv_U8(instr); break;  			case Code.Conv_I1:	Emulate_Conv_I1(instr); break;  			case Code.Conv_I2:	Emulate_Conv_I2(instr); break;  			case Code.Conv_I4:	Emulate_Conv_I4(instr); break;  			case Code.Conv_I8:	Emulate_Conv_I8(instr); break;  			case Code.Add:		Emulate_Add(instr); break;  			case Code.Sub:		Emulate_Sub(instr); break;  			case Code.Mul:		Emulate_Mul(instr); break;  			case Code.Div:		Emulate_Div(instr); break;  			case Code.Div_Un:	Emulate_Div_Un(instr); break;  			case Code.Rem:		Emulate_Rem(instr); break;  			case Code.Rem_Un:	Emulate_Rem_Un(instr); break;  			case Code.Neg:		Emulate_Neg(instr); break;  			case Code.And:		Emulate_And(instr); break;  			case Code.Or:		Emulate_Or(instr); break;  			case Code.Xor:		Emulate_Xor(instr); break;  			case Code.Not:		Emulate_Not(instr); break;  			case Code.Shl:		Emulate_Shl(instr); break;  			case Code.Shr:		Emulate_Shr(instr); break;  			case Code.Shr_Un:	Emulate_Shr_Un(instr); break;  			case Code.Ceq:		Emulate_Ceq(instr); break;  			case Code.Cgt:		Emulate_Cgt(instr); break;  			case Code.Cgt_Un:	Emulate_Cgt_Un(instr); break;  			case Code.Clt:		Emulate_Clt(instr); break;  			case Code.Clt_Un:	Emulate_Clt_Un(instr); break;  			case Code.Unbox_Any:Emulate_Unbox_Any(instr); break;    			case Code.Call:		Emulate_Call(instr); break;  			case Code.Callvirt:	Emulate_Callvirt(instr); break;    			case Code.Castclass: Emulate_Castclass(instr); break;  			case Code.Isinst:	Emulate_Isinst(instr); break;    			case Code.Add_Ovf:	Emulate_Add_Ovf(instr); break;  			case Code.Add_Ovf_Un: Emulate_Add_Ovf_Un(instr); break;  			case Code.Sub_Ovf:	Emulate_Sub_Ovf(instr); break;  			case Code.Sub_Ovf_Un: Emulate_Sub_Ovf_Un(instr); break;  			case Code.Mul_Ovf:	Emulate_Mul_Ovf(instr); break;  			case Code.Mul_Ovf_Un: Emulate_Mul_Ovf_Un(instr); break;    			case Code.Conv_Ovf_I1:		Emulate_Conv_Ovf_I1(instr); break;  			case Code.Conv_Ovf_I1_Un:	Emulate_Conv_Ovf_I1_Un(instr); break;  			case Code.Conv_Ovf_I2:		Emulate_Conv_Ovf_I2(instr); break;  			case Code.Conv_Ovf_I2_Un:	Emulate_Conv_Ovf_I2_Un(instr); break;  			case Code.Conv_Ovf_I4:		Emulate_Conv_Ovf_I4(instr); break;  			case Code.Conv_Ovf_I4_Un:	Emulate_Conv_Ovf_I4_Un(instr); break;  			case Code.Conv_Ovf_I8:		Emulate_Conv_Ovf_I8(instr); break;  			case Code.Conv_Ovf_I8_Un:	Emulate_Conv_Ovf_I8_Un(instr); break;  			case Code.Conv_Ovf_U1:		Emulate_Conv_Ovf_U1(instr); break;  			case Code.Conv_Ovf_U1_Un:	Emulate_Conv_Ovf_U1_Un(instr); break;  			case Code.Conv_Ovf_U2:		Emulate_Conv_Ovf_U2(instr); break;  			case Code.Conv_Ovf_U2_Un:	Emulate_Conv_Ovf_U2_Un(instr); break;  			case Code.Conv_Ovf_U4:		Emulate_Conv_Ovf_U4(instr); break;  			case Code.Conv_Ovf_U4_Un:	Emulate_Conv_Ovf_U4_Un(instr); break;  			case Code.Conv_Ovf_U8:		Emulate_Conv_Ovf_U8(instr); break;  			case Code.Conv_Ovf_U8_Un:	Emulate_Conv_Ovf_U8_Un(instr); break;    			case Code.Ldelem_I1: valueStack.Pop(2); valueStack.Push(Int32Value.CreateUnknown()); break;  			case Code.Ldelem_I2: valueStack.Pop(2); valueStack.Push(Int32Value.CreateUnknown()); break;  			case Code.Ldelem_I4: valueStack.Pop(2); valueStack.Push(Int32Value.CreateUnknown()); break;  			case Code.Ldelem_I8: valueStack.Pop(2); valueStack.Push(Int64Value.CreateUnknown()); break;  			case Code.Ldelem_U1: valueStack.Pop(2); valueStack.Push(Int32Value.CreateUnknownUInt8()); break;  			case Code.Ldelem_U2: valueStack.Pop(2); valueStack.Push(Int32Value.CreateUnknownUInt16()); break;  			case Code.Ldelem_U4: valueStack.Pop(2); valueStack.Push(Int32Value.CreateUnknown()); break;  			case Code.Ldelem:	 valueStack.Pop(2); valueStack.Push(GetUnknownValue(instr.Operand as ITypeDefOrRef)); break;    			case Code.Ldind_I1:	valueStack.Pop(); valueStack.Push(Int32Value.CreateUnknown()); break;  			case Code.Ldind_I2:	valueStack.Pop(); valueStack.Push(Int32Value.CreateUnknown()); break;  			case Code.Ldind_I4:	valueStack.Pop(); valueStack.Push(Int32Value.CreateUnknown()); break;  			case Code.Ldind_I8:	valueStack.Pop(); valueStack.Push(Int64Value.CreateUnknown()); break;  			case Code.Ldind_U1:	valueStack.Pop(); valueStack.Push(Int32Value.CreateUnknownUInt8()); break;  			case Code.Ldind_U2:	valueStack.Pop(); valueStack.Push(Int32Value.CreateUnknownUInt16()); break;  			case Code.Ldind_U4:	valueStack.Pop(); valueStack.Push(Int32Value.CreateUnknown()); break;    			case Code.Ldlen:	valueStack.Pop(); valueStack.Push(Int32Value.CreateUnknown()); break;  			case Code.Sizeof:	valueStack.Push(Int32Value.CreateUnknown()); break;    			case Code.Ldfld:	Emulate_Ldfld(instr); break;  			case Code.Ldsfld:	Emulate_Ldsfld(instr); break;    			case Code.Ldftn:	valueStack.Push(new ObjectValue(instr.Operand)); break;  			case Code.Ldsflda:	valueStack.Push(new ObjectValue(instr.Operand)); break;  			case Code.Ldtoken:	valueStack.Push(new ObjectValue(instr.Operand)); break;  			case Code.Ldvirtftn:valueStack.Pop(); valueStack.Push(new ObjectValue()); break;  			case Code.Ldflda:	valueStack.Pop(); valueStack.Push(new ObjectValue()); break;    			case Code.Unbox:    			case Code.Conv_R_Un:Emulate_Conv_R_Un(instr); break;  			case Code.Conv_R4:	Emulate_Conv_R4(instr); break;  			case Code.Conv_R8:	Emulate_Conv_R8(instr); break;    			case Code.Arglist:  			case Code.Beq:  			case Code.Beq_S:  			case Code.Bge:  			case Code.Bge_S:  			case Code.Bge_Un:  			case Code.Bge_Un_S:  			case Code.Bgt:  			case Code.Bgt_S:  			case Code.Bgt_Un:  			case Code.Bgt_Un_S:  			case Code.Ble:  			case Code.Ble_S:  			case Code.Ble_Un:  			case Code.Ble_Un_S:  			case Code.Blt:  			case Code.Blt_S:  			case Code.Blt_Un:  			case Code.Blt_Un_S:  			case Code.Bne_Un:  			case Code.Bne_Un_S:  			case Code.Brfalse:  			case Code.Brfalse_S:  			case Code.Brtrue:  			case Code.Brtrue_S:  			case Code.Br:  			case Code.Br_S:  			case Code.Break:  			case Code.Calli:  			case Code.Ckfinite:  			case Code.Constrained:  			case Code.Conv_I:  			case Code.Conv_Ovf_I:  			case Code.Conv_Ovf_I_Un:  			case Code.Conv_Ovf_U:  			case Code.Conv_Ovf_U_Un:  			case Code.Conv_U:  			case Code.Cpblk:  			case Code.Cpobj:  			case Code.Endfilter:  			case Code.Endfinally:  			case Code.Initblk:  			case Code.Initobj:  			case Code.Jmp:  			case Code.Ldelema:  			case Code.Ldelem_I:  			case Code.Ldelem_R4:  			case Code.Ldelem_R8:  			case Code.Ldelem_Ref:  			case Code.Ldind_I:  			case Code.Ldind_R4:  			case Code.Ldind_R8:  			case Code.Ldind_Ref:  			case Code.Ldobj:  			case Code.Leave:  			case Code.Leave_S:  			case Code.Localloc:  			case Code.Mkrefany:  			case Code.Newarr:  			case Code.Newobj:  			case Code.Nop:  			case Code.Pop:  			case Code.Readonly:  			case Code.Refanytype:  			case Code.Refanyval:  			case Code.Ret:  			case Code.Rethrow:  			case Code.Stelem:  			case Code.Stelem_I:  			case Code.Stelem_I1:  			case Code.Stelem_I2:  			case Code.Stelem_I4:  			case Code.Stelem_I8:  			case Code.Stelem_R4:  			case Code.Stelem_R8:  			case Code.Stelem_Ref:  			case Code.Stfld:  			case Code.Stind_I:  			case Code.Stind_I1:  			case Code.Stind_I2:  			case Code.Stind_I4:  			case Code.Stind_I8:  			case Code.Stind_R4:  			case Code.Stind_R8:  			case Code.Stind_Ref:  			case Code.Stobj:  			case Code.Stsfld:  			case Code.Switch:  			case Code.Tailcall:  			case Code.Throw:  			case Code.Unaligned:  			case Code.Volatile:  			default:  				UpdateStack(instr);  				break;  			}
Magic Number,de4dot.blocks.cflow,InstructionEmulator,C:\repos\0xd4d_de4dot\de4dot.blocks\cflow\InstructionEmulator.cs,Emulate,The following statement contains a magic number: switch (instr.OpCode.Code) {  			case Code.Starg:  			case Code.Starg_S:	Emulate_Starg((Parameter)instr.Operand); break;  			case Code.Stloc:  			case Code.Stloc_S:	Emulate_Stloc((Local)instr.Operand); break;  			case Code.Stloc_0:	Emulate_Stloc(0); break;  			case Code.Stloc_1:	Emulate_Stloc(1); break;  			case Code.Stloc_2:	Emulate_Stloc(2); break;  			case Code.Stloc_3:	Emulate_Stloc(3); break;    			case Code.Ldarg:  			case Code.Ldarg_S:	valueStack.Push(GetArg((Parameter)instr.Operand)); break;  			case Code.Ldarg_0:	valueStack.Push(GetArg(0)); break;  			case Code.Ldarg_1:	valueStack.Push(GetArg(1)); break;  			case Code.Ldarg_2:	valueStack.Push(GetArg(2)); break;  			case Code.Ldarg_3:	valueStack.Push(GetArg(3)); break;  			case Code.Ldloc:  			case Code.Ldloc_S:	valueStack.Push(GetLocal((Local)instr.Operand)); break;  			case Code.Ldloc_0:	valueStack.Push(GetLocal(0)); break;  			case Code.Ldloc_1:	valueStack.Push(GetLocal(1)); break;  			case Code.Ldloc_2:	valueStack.Push(GetLocal(2)); break;  			case Code.Ldloc_3:	valueStack.Push(GetLocal(3)); break;    			case Code.Ldarga:  			case Code.Ldarga_S:	Emulate_Ldarga((Parameter)instr.Operand); break;  			case Code.Ldloca:  			case Code.Ldloca_S:	Emulate_Ldloca((Local)instr.Operand); break;    			case Code.Dup:		valueStack.CopyTop(); break;    			case Code.Ldc_I4:	valueStack.Push(new Int32Value((int)instr.Operand)); break;  			case Code.Ldc_I4_S:	valueStack.Push(new Int32Value((sbyte)instr.Operand)); break;  			case Code.Ldc_I8:	valueStack.Push(new Int64Value((long)instr.Operand)); break;  			case Code.Ldc_R4:	valueStack.Push(new Real8Value((float)instr.Operand)); break;  			case Code.Ldc_R8:	valueStack.Push(new Real8Value((double)instr.Operand)); break;  			case Code.Ldc_I4_0:	valueStack.Push(Int32Value.Zero); break;  			case Code.Ldc_I4_1:	valueStack.Push(Int32Value.One); break;  			case Code.Ldc_I4_2:	valueStack.Push(new Int32Value(2)); break;  			case Code.Ldc_I4_3:	valueStack.Push(new Int32Value(3)); break;  			case Code.Ldc_I4_4:	valueStack.Push(new Int32Value(4)); break;  			case Code.Ldc_I4_5:	valueStack.Push(new Int32Value(5)); break;  			case Code.Ldc_I4_6:	valueStack.Push(new Int32Value(6)); break;  			case Code.Ldc_I4_7:	valueStack.Push(new Int32Value(7)); break;  			case Code.Ldc_I4_8:	valueStack.Push(new Int32Value(8)); break;  			case Code.Ldc_I4_M1:valueStack.Push(new Int32Value(-1)); break;  			case Code.Ldnull:	valueStack.Push(NullValue.Instance); break;  			case Code.Ldstr:	valueStack.Push(new StringValue((string)instr.Operand)); break;  			case Code.Box:		valueStack.Push(new BoxedValue(valueStack.Pop())); break;    			case Code.Conv_U1:	Emulate_Conv_U1(instr); break;  			case Code.Conv_U2:	Emulate_Conv_U2(instr); break;  			case Code.Conv_U4:	Emulate_Conv_U4(instr); break;  			case Code.Conv_U8:	Emulate_Conv_U8(instr); break;  			case Code.Conv_I1:	Emulate_Conv_I1(instr); break;  			case Code.Conv_I2:	Emulate_Conv_I2(instr); break;  			case Code.Conv_I4:	Emulate_Conv_I4(instr); break;  			case Code.Conv_I8:	Emulate_Conv_I8(instr); break;  			case Code.Add:		Emulate_Add(instr); break;  			case Code.Sub:		Emulate_Sub(instr); break;  			case Code.Mul:		Emulate_Mul(instr); break;  			case Code.Div:		Emulate_Div(instr); break;  			case Code.Div_Un:	Emulate_Div_Un(instr); break;  			case Code.Rem:		Emulate_Rem(instr); break;  			case Code.Rem_Un:	Emulate_Rem_Un(instr); break;  			case Code.Neg:		Emulate_Neg(instr); break;  			case Code.And:		Emulate_And(instr); break;  			case Code.Or:		Emulate_Or(instr); break;  			case Code.Xor:		Emulate_Xor(instr); break;  			case Code.Not:		Emulate_Not(instr); break;  			case Code.Shl:		Emulate_Shl(instr); break;  			case Code.Shr:		Emulate_Shr(instr); break;  			case Code.Shr_Un:	Emulate_Shr_Un(instr); break;  			case Code.Ceq:		Emulate_Ceq(instr); break;  			case Code.Cgt:		Emulate_Cgt(instr); break;  			case Code.Cgt_Un:	Emulate_Cgt_Un(instr); break;  			case Code.Clt:		Emulate_Clt(instr); break;  			case Code.Clt_Un:	Emulate_Clt_Un(instr); break;  			case Code.Unbox_Any:Emulate_Unbox_Any(instr); break;    			case Code.Call:		Emulate_Call(instr); break;  			case Code.Callvirt:	Emulate_Callvirt(instr); break;    			case Code.Castclass: Emulate_Castclass(instr); break;  			case Code.Isinst:	Emulate_Isinst(instr); break;    			case Code.Add_Ovf:	Emulate_Add_Ovf(instr); break;  			case Code.Add_Ovf_Un: Emulate_Add_Ovf_Un(instr); break;  			case Code.Sub_Ovf:	Emulate_Sub_Ovf(instr); break;  			case Code.Sub_Ovf_Un: Emulate_Sub_Ovf_Un(instr); break;  			case Code.Mul_Ovf:	Emulate_Mul_Ovf(instr); break;  			case Code.Mul_Ovf_Un: Emulate_Mul_Ovf_Un(instr); break;    			case Code.Conv_Ovf_I1:		Emulate_Conv_Ovf_I1(instr); break;  			case Code.Conv_Ovf_I1_Un:	Emulate_Conv_Ovf_I1_Un(instr); break;  			case Code.Conv_Ovf_I2:		Emulate_Conv_Ovf_I2(instr); break;  			case Code.Conv_Ovf_I2_Un:	Emulate_Conv_Ovf_I2_Un(instr); break;  			case Code.Conv_Ovf_I4:		Emulate_Conv_Ovf_I4(instr); break;  			case Code.Conv_Ovf_I4_Un:	Emulate_Conv_Ovf_I4_Un(instr); break;  			case Code.Conv_Ovf_I8:		Emulate_Conv_Ovf_I8(instr); break;  			case Code.Conv_Ovf_I8_Un:	Emulate_Conv_Ovf_I8_Un(instr); break;  			case Code.Conv_Ovf_U1:		Emulate_Conv_Ovf_U1(instr); break;  			case Code.Conv_Ovf_U1_Un:	Emulate_Conv_Ovf_U1_Un(instr); break;  			case Code.Conv_Ovf_U2:		Emulate_Conv_Ovf_U2(instr); break;  			case Code.Conv_Ovf_U2_Un:	Emulate_Conv_Ovf_U2_Un(instr); break;  			case Code.Conv_Ovf_U4:		Emulate_Conv_Ovf_U4(instr); break;  			case Code.Conv_Ovf_U4_Un:	Emulate_Conv_Ovf_U4_Un(instr); break;  			case Code.Conv_Ovf_U8:		Emulate_Conv_Ovf_U8(instr); break;  			case Code.Conv_Ovf_U8_Un:	Emulate_Conv_Ovf_U8_Un(instr); break;    			case Code.Ldelem_I1: valueStack.Pop(2); valueStack.Push(Int32Value.CreateUnknown()); break;  			case Code.Ldelem_I2: valueStack.Pop(2); valueStack.Push(Int32Value.CreateUnknown()); break;  			case Code.Ldelem_I4: valueStack.Pop(2); valueStack.Push(Int32Value.CreateUnknown()); break;  			case Code.Ldelem_I8: valueStack.Pop(2); valueStack.Push(Int64Value.CreateUnknown()); break;  			case Code.Ldelem_U1: valueStack.Pop(2); valueStack.Push(Int32Value.CreateUnknownUInt8()); break;  			case Code.Ldelem_U2: valueStack.Pop(2); valueStack.Push(Int32Value.CreateUnknownUInt16()); break;  			case Code.Ldelem_U4: valueStack.Pop(2); valueStack.Push(Int32Value.CreateUnknown()); break;  			case Code.Ldelem:	 valueStack.Pop(2); valueStack.Push(GetUnknownValue(instr.Operand as ITypeDefOrRef)); break;    			case Code.Ldind_I1:	valueStack.Pop(); valueStack.Push(Int32Value.CreateUnknown()); break;  			case Code.Ldind_I2:	valueStack.Pop(); valueStack.Push(Int32Value.CreateUnknown()); break;  			case Code.Ldind_I4:	valueStack.Pop(); valueStack.Push(Int32Value.CreateUnknown()); break;  			case Code.Ldind_I8:	valueStack.Pop(); valueStack.Push(Int64Value.CreateUnknown()); break;  			case Code.Ldind_U1:	valueStack.Pop(); valueStack.Push(Int32Value.CreateUnknownUInt8()); break;  			case Code.Ldind_U2:	valueStack.Pop(); valueStack.Push(Int32Value.CreateUnknownUInt16()); break;  			case Code.Ldind_U4:	valueStack.Pop(); valueStack.Push(Int32Value.CreateUnknown()); break;    			case Code.Ldlen:	valueStack.Pop(); valueStack.Push(Int32Value.CreateUnknown()); break;  			case Code.Sizeof:	valueStack.Push(Int32Value.CreateUnknown()); break;    			case Code.Ldfld:	Emulate_Ldfld(instr); break;  			case Code.Ldsfld:	Emulate_Ldsfld(instr); break;    			case Code.Ldftn:	valueStack.Push(new ObjectValue(instr.Operand)); break;  			case Code.Ldsflda:	valueStack.Push(new ObjectValue(instr.Operand)); break;  			case Code.Ldtoken:	valueStack.Push(new ObjectValue(instr.Operand)); break;  			case Code.Ldvirtftn:valueStack.Pop(); valueStack.Push(new ObjectValue()); break;  			case Code.Ldflda:	valueStack.Pop(); valueStack.Push(new ObjectValue()); break;    			case Code.Unbox:    			case Code.Conv_R_Un:Emulate_Conv_R_Un(instr); break;  			case Code.Conv_R4:	Emulate_Conv_R4(instr); break;  			case Code.Conv_R8:	Emulate_Conv_R8(instr); break;    			case Code.Arglist:  			case Code.Beq:  			case Code.Beq_S:  			case Code.Bge:  			case Code.Bge_S:  			case Code.Bge_Un:  			case Code.Bge_Un_S:  			case Code.Bgt:  			case Code.Bgt_S:  			case Code.Bgt_Un:  			case Code.Bgt_Un_S:  			case Code.Ble:  			case Code.Ble_S:  			case Code.Ble_Un:  			case Code.Ble_Un_S:  			case Code.Blt:  			case Code.Blt_S:  			case Code.Blt_Un:  			case Code.Blt_Un_S:  			case Code.Bne_Un:  			case Code.Bne_Un_S:  			case Code.Brfalse:  			case Code.Brfalse_S:  			case Code.Brtrue:  			case Code.Brtrue_S:  			case Code.Br:  			case Code.Br_S:  			case Code.Break:  			case Code.Calli:  			case Code.Ckfinite:  			case Code.Constrained:  			case Code.Conv_I:  			case Code.Conv_Ovf_I:  			case Code.Conv_Ovf_I_Un:  			case Code.Conv_Ovf_U:  			case Code.Conv_Ovf_U_Un:  			case Code.Conv_U:  			case Code.Cpblk:  			case Code.Cpobj:  			case Code.Endfilter:  			case Code.Endfinally:  			case Code.Initblk:  			case Code.Initobj:  			case Code.Jmp:  			case Code.Ldelema:  			case Code.Ldelem_I:  			case Code.Ldelem_R4:  			case Code.Ldelem_R8:  			case Code.Ldelem_Ref:  			case Code.Ldind_I:  			case Code.Ldind_R4:  			case Code.Ldind_R8:  			case Code.Ldind_Ref:  			case Code.Ldobj:  			case Code.Leave:  			case Code.Leave_S:  			case Code.Localloc:  			case Code.Mkrefany:  			case Code.Newarr:  			case Code.Newobj:  			case Code.Nop:  			case Code.Pop:  			case Code.Readonly:  			case Code.Refanytype:  			case Code.Refanyval:  			case Code.Ret:  			case Code.Rethrow:  			case Code.Stelem:  			case Code.Stelem_I:  			case Code.Stelem_I1:  			case Code.Stelem_I2:  			case Code.Stelem_I4:  			case Code.Stelem_I8:  			case Code.Stelem_R4:  			case Code.Stelem_R8:  			case Code.Stelem_Ref:  			case Code.Stfld:  			case Code.Stind_I:  			case Code.Stind_I1:  			case Code.Stind_I2:  			case Code.Stind_I4:  			case Code.Stind_I8:  			case Code.Stind_R4:  			case Code.Stind_R8:  			case Code.Stind_Ref:  			case Code.Stobj:  			case Code.Stsfld:  			case Code.Switch:  			case Code.Tailcall:  			case Code.Throw:  			case Code.Unaligned:  			case Code.Volatile:  			default:  				UpdateStack(instr);  				break;  			}
Magic Number,de4dot.blocks.cflow,InstructionEmulator,C:\repos\0xd4d_de4dot\de4dot.blocks\cflow\InstructionEmulator.cs,Emulate,The following statement contains a magic number: switch (instr.OpCode.Code) {  			case Code.Starg:  			case Code.Starg_S:	Emulate_Starg((Parameter)instr.Operand); break;  			case Code.Stloc:  			case Code.Stloc_S:	Emulate_Stloc((Local)instr.Operand); break;  			case Code.Stloc_0:	Emulate_Stloc(0); break;  			case Code.Stloc_1:	Emulate_Stloc(1); break;  			case Code.Stloc_2:	Emulate_Stloc(2); break;  			case Code.Stloc_3:	Emulate_Stloc(3); break;    			case Code.Ldarg:  			case Code.Ldarg_S:	valueStack.Push(GetArg((Parameter)instr.Operand)); break;  			case Code.Ldarg_0:	valueStack.Push(GetArg(0)); break;  			case Code.Ldarg_1:	valueStack.Push(GetArg(1)); break;  			case Code.Ldarg_2:	valueStack.Push(GetArg(2)); break;  			case Code.Ldarg_3:	valueStack.Push(GetArg(3)); break;  			case Code.Ldloc:  			case Code.Ldloc_S:	valueStack.Push(GetLocal((Local)instr.Operand)); break;  			case Code.Ldloc_0:	valueStack.Push(GetLocal(0)); break;  			case Code.Ldloc_1:	valueStack.Push(GetLocal(1)); break;  			case Code.Ldloc_2:	valueStack.Push(GetLocal(2)); break;  			case Code.Ldloc_3:	valueStack.Push(GetLocal(3)); break;    			case Code.Ldarga:  			case Code.Ldarga_S:	Emulate_Ldarga((Parameter)instr.Operand); break;  			case Code.Ldloca:  			case Code.Ldloca_S:	Emulate_Ldloca((Local)instr.Operand); break;    			case Code.Dup:		valueStack.CopyTop(); break;    			case Code.Ldc_I4:	valueStack.Push(new Int32Value((int)instr.Operand)); break;  			case Code.Ldc_I4_S:	valueStack.Push(new Int32Value((sbyte)instr.Operand)); break;  			case Code.Ldc_I8:	valueStack.Push(new Int64Value((long)instr.Operand)); break;  			case Code.Ldc_R4:	valueStack.Push(new Real8Value((float)instr.Operand)); break;  			case Code.Ldc_R8:	valueStack.Push(new Real8Value((double)instr.Operand)); break;  			case Code.Ldc_I4_0:	valueStack.Push(Int32Value.Zero); break;  			case Code.Ldc_I4_1:	valueStack.Push(Int32Value.One); break;  			case Code.Ldc_I4_2:	valueStack.Push(new Int32Value(2)); break;  			case Code.Ldc_I4_3:	valueStack.Push(new Int32Value(3)); break;  			case Code.Ldc_I4_4:	valueStack.Push(new Int32Value(4)); break;  			case Code.Ldc_I4_5:	valueStack.Push(new Int32Value(5)); break;  			case Code.Ldc_I4_6:	valueStack.Push(new Int32Value(6)); break;  			case Code.Ldc_I4_7:	valueStack.Push(new Int32Value(7)); break;  			case Code.Ldc_I4_8:	valueStack.Push(new Int32Value(8)); break;  			case Code.Ldc_I4_M1:valueStack.Push(new Int32Value(-1)); break;  			case Code.Ldnull:	valueStack.Push(NullValue.Instance); break;  			case Code.Ldstr:	valueStack.Push(new StringValue((string)instr.Operand)); break;  			case Code.Box:		valueStack.Push(new BoxedValue(valueStack.Pop())); break;    			case Code.Conv_U1:	Emulate_Conv_U1(instr); break;  			case Code.Conv_U2:	Emulate_Conv_U2(instr); break;  			case Code.Conv_U4:	Emulate_Conv_U4(instr); break;  			case Code.Conv_U8:	Emulate_Conv_U8(instr); break;  			case Code.Conv_I1:	Emulate_Conv_I1(instr); break;  			case Code.Conv_I2:	Emulate_Conv_I2(instr); break;  			case Code.Conv_I4:	Emulate_Conv_I4(instr); break;  			case Code.Conv_I8:	Emulate_Conv_I8(instr); break;  			case Code.Add:		Emulate_Add(instr); break;  			case Code.Sub:		Emulate_Sub(instr); break;  			case Code.Mul:		Emulate_Mul(instr); break;  			case Code.Div:		Emulate_Div(instr); break;  			case Code.Div_Un:	Emulate_Div_Un(instr); break;  			case Code.Rem:		Emulate_Rem(instr); break;  			case Code.Rem_Un:	Emulate_Rem_Un(instr); break;  			case Code.Neg:		Emulate_Neg(instr); break;  			case Code.And:		Emulate_And(instr); break;  			case Code.Or:		Emulate_Or(instr); break;  			case Code.Xor:		Emulate_Xor(instr); break;  			case Code.Not:		Emulate_Not(instr); break;  			case Code.Shl:		Emulate_Shl(instr); break;  			case Code.Shr:		Emulate_Shr(instr); break;  			case Code.Shr_Un:	Emulate_Shr_Un(instr); break;  			case Code.Ceq:		Emulate_Ceq(instr); break;  			case Code.Cgt:		Emulate_Cgt(instr); break;  			case Code.Cgt_Un:	Emulate_Cgt_Un(instr); break;  			case Code.Clt:		Emulate_Clt(instr); break;  			case Code.Clt_Un:	Emulate_Clt_Un(instr); break;  			case Code.Unbox_Any:Emulate_Unbox_Any(instr); break;    			case Code.Call:		Emulate_Call(instr); break;  			case Code.Callvirt:	Emulate_Callvirt(instr); break;    			case Code.Castclass: Emulate_Castclass(instr); break;  			case Code.Isinst:	Emulate_Isinst(instr); break;    			case Code.Add_Ovf:	Emulate_Add_Ovf(instr); break;  			case Code.Add_Ovf_Un: Emulate_Add_Ovf_Un(instr); break;  			case Code.Sub_Ovf:	Emulate_Sub_Ovf(instr); break;  			case Code.Sub_Ovf_Un: Emulate_Sub_Ovf_Un(instr); break;  			case Code.Mul_Ovf:	Emulate_Mul_Ovf(instr); break;  			case Code.Mul_Ovf_Un: Emulate_Mul_Ovf_Un(instr); break;    			case Code.Conv_Ovf_I1:		Emulate_Conv_Ovf_I1(instr); break;  			case Code.Conv_Ovf_I1_Un:	Emulate_Conv_Ovf_I1_Un(instr); break;  			case Code.Conv_Ovf_I2:		Emulate_Conv_Ovf_I2(instr); break;  			case Code.Conv_Ovf_I2_Un:	Emulate_Conv_Ovf_I2_Un(instr); break;  			case Code.Conv_Ovf_I4:		Emulate_Conv_Ovf_I4(instr); break;  			case Code.Conv_Ovf_I4_Un:	Emulate_Conv_Ovf_I4_Un(instr); break;  			case Code.Conv_Ovf_I8:		Emulate_Conv_Ovf_I8(instr); break;  			case Code.Conv_Ovf_I8_Un:	Emulate_Conv_Ovf_I8_Un(instr); break;  			case Code.Conv_Ovf_U1:		Emulate_Conv_Ovf_U1(instr); break;  			case Code.Conv_Ovf_U1_Un:	Emulate_Conv_Ovf_U1_Un(instr); break;  			case Code.Conv_Ovf_U2:		Emulate_Conv_Ovf_U2(instr); break;  			case Code.Conv_Ovf_U2_Un:	Emulate_Conv_Ovf_U2_Un(instr); break;  			case Code.Conv_Ovf_U4:		Emulate_Conv_Ovf_U4(instr); break;  			case Code.Conv_Ovf_U4_Un:	Emulate_Conv_Ovf_U4_Un(instr); break;  			case Code.Conv_Ovf_U8:		Emulate_Conv_Ovf_U8(instr); break;  			case Code.Conv_Ovf_U8_Un:	Emulate_Conv_Ovf_U8_Un(instr); break;    			case Code.Ldelem_I1: valueStack.Pop(2); valueStack.Push(Int32Value.CreateUnknown()); break;  			case Code.Ldelem_I2: valueStack.Pop(2); valueStack.Push(Int32Value.CreateUnknown()); break;  			case Code.Ldelem_I4: valueStack.Pop(2); valueStack.Push(Int32Value.CreateUnknown()); break;  			case Code.Ldelem_I8: valueStack.Pop(2); valueStack.Push(Int64Value.CreateUnknown()); break;  			case Code.Ldelem_U1: valueStack.Pop(2); valueStack.Push(Int32Value.CreateUnknownUInt8()); break;  			case Code.Ldelem_U2: valueStack.Pop(2); valueStack.Push(Int32Value.CreateUnknownUInt16()); break;  			case Code.Ldelem_U4: valueStack.Pop(2); valueStack.Push(Int32Value.CreateUnknown()); break;  			case Code.Ldelem:	 valueStack.Pop(2); valueStack.Push(GetUnknownValue(instr.Operand as ITypeDefOrRef)); break;    			case Code.Ldind_I1:	valueStack.Pop(); valueStack.Push(Int32Value.CreateUnknown()); break;  			case Code.Ldind_I2:	valueStack.Pop(); valueStack.Push(Int32Value.CreateUnknown()); break;  			case Code.Ldind_I4:	valueStack.Pop(); valueStack.Push(Int32Value.CreateUnknown()); break;  			case Code.Ldind_I8:	valueStack.Pop(); valueStack.Push(Int64Value.CreateUnknown()); break;  			case Code.Ldind_U1:	valueStack.Pop(); valueStack.Push(Int32Value.CreateUnknownUInt8()); break;  			case Code.Ldind_U2:	valueStack.Pop(); valueStack.Push(Int32Value.CreateUnknownUInt16()); break;  			case Code.Ldind_U4:	valueStack.Pop(); valueStack.Push(Int32Value.CreateUnknown()); break;    			case Code.Ldlen:	valueStack.Pop(); valueStack.Push(Int32Value.CreateUnknown()); break;  			case Code.Sizeof:	valueStack.Push(Int32Value.CreateUnknown()); break;    			case Code.Ldfld:	Emulate_Ldfld(instr); break;  			case Code.Ldsfld:	Emulate_Ldsfld(instr); break;    			case Code.Ldftn:	valueStack.Push(new ObjectValue(instr.Operand)); break;  			case Code.Ldsflda:	valueStack.Push(new ObjectValue(instr.Operand)); break;  			case Code.Ldtoken:	valueStack.Push(new ObjectValue(instr.Operand)); break;  			case Code.Ldvirtftn:valueStack.Pop(); valueStack.Push(new ObjectValue()); break;  			case Code.Ldflda:	valueStack.Pop(); valueStack.Push(new ObjectValue()); break;    			case Code.Unbox:    			case Code.Conv_R_Un:Emulate_Conv_R_Un(instr); break;  			case Code.Conv_R4:	Emulate_Conv_R4(instr); break;  			case Code.Conv_R8:	Emulate_Conv_R8(instr); break;    			case Code.Arglist:  			case Code.Beq:  			case Code.Beq_S:  			case Code.Bge:  			case Code.Bge_S:  			case Code.Bge_Un:  			case Code.Bge_Un_S:  			case Code.Bgt:  			case Code.Bgt_S:  			case Code.Bgt_Un:  			case Code.Bgt_Un_S:  			case Code.Ble:  			case Code.Ble_S:  			case Code.Ble_Un:  			case Code.Ble_Un_S:  			case Code.Blt:  			case Code.Blt_S:  			case Code.Blt_Un:  			case Code.Blt_Un_S:  			case Code.Bne_Un:  			case Code.Bne_Un_S:  			case Code.Brfalse:  			case Code.Brfalse_S:  			case Code.Brtrue:  			case Code.Brtrue_S:  			case Code.Br:  			case Code.Br_S:  			case Code.Break:  			case Code.Calli:  			case Code.Ckfinite:  			case Code.Constrained:  			case Code.Conv_I:  			case Code.Conv_Ovf_I:  			case Code.Conv_Ovf_I_Un:  			case Code.Conv_Ovf_U:  			case Code.Conv_Ovf_U_Un:  			case Code.Conv_U:  			case Code.Cpblk:  			case Code.Cpobj:  			case Code.Endfilter:  			case Code.Endfinally:  			case Code.Initblk:  			case Code.Initobj:  			case Code.Jmp:  			case Code.Ldelema:  			case Code.Ldelem_I:  			case Code.Ldelem_R4:  			case Code.Ldelem_R8:  			case Code.Ldelem_Ref:  			case Code.Ldind_I:  			case Code.Ldind_R4:  			case Code.Ldind_R8:  			case Code.Ldind_Ref:  			case Code.Ldobj:  			case Code.Leave:  			case Code.Leave_S:  			case Code.Localloc:  			case Code.Mkrefany:  			case Code.Newarr:  			case Code.Newobj:  			case Code.Nop:  			case Code.Pop:  			case Code.Readonly:  			case Code.Refanytype:  			case Code.Refanyval:  			case Code.Ret:  			case Code.Rethrow:  			case Code.Stelem:  			case Code.Stelem_I:  			case Code.Stelem_I1:  			case Code.Stelem_I2:  			case Code.Stelem_I4:  			case Code.Stelem_I8:  			case Code.Stelem_R4:  			case Code.Stelem_R8:  			case Code.Stelem_Ref:  			case Code.Stfld:  			case Code.Stind_I:  			case Code.Stind_I1:  			case Code.Stind_I2:  			case Code.Stind_I4:  			case Code.Stind_I8:  			case Code.Stind_R4:  			case Code.Stind_R8:  			case Code.Stind_Ref:  			case Code.Stobj:  			case Code.Stsfld:  			case Code.Switch:  			case Code.Tailcall:  			case Code.Throw:  			case Code.Unaligned:  			case Code.Volatile:  			default:  				UpdateStack(instr);  				break;  			}
Magic Number,de4dot.blocks.cflow,InstructionEmulator,C:\repos\0xd4d_de4dot\de4dot.blocks\cflow\InstructionEmulator.cs,Emulate,The following statement contains a magic number: switch (instr.OpCode.Code) {  			case Code.Starg:  			case Code.Starg_S:	Emulate_Starg((Parameter)instr.Operand); break;  			case Code.Stloc:  			case Code.Stloc_S:	Emulate_Stloc((Local)instr.Operand); break;  			case Code.Stloc_0:	Emulate_Stloc(0); break;  			case Code.Stloc_1:	Emulate_Stloc(1); break;  			case Code.Stloc_2:	Emulate_Stloc(2); break;  			case Code.Stloc_3:	Emulate_Stloc(3); break;    			case Code.Ldarg:  			case Code.Ldarg_S:	valueStack.Push(GetArg((Parameter)instr.Operand)); break;  			case Code.Ldarg_0:	valueStack.Push(GetArg(0)); break;  			case Code.Ldarg_1:	valueStack.Push(GetArg(1)); break;  			case Code.Ldarg_2:	valueStack.Push(GetArg(2)); break;  			case Code.Ldarg_3:	valueStack.Push(GetArg(3)); break;  			case Code.Ldloc:  			case Code.Ldloc_S:	valueStack.Push(GetLocal((Local)instr.Operand)); break;  			case Code.Ldloc_0:	valueStack.Push(GetLocal(0)); break;  			case Code.Ldloc_1:	valueStack.Push(GetLocal(1)); break;  			case Code.Ldloc_2:	valueStack.Push(GetLocal(2)); break;  			case Code.Ldloc_3:	valueStack.Push(GetLocal(3)); break;    			case Code.Ldarga:  			case Code.Ldarga_S:	Emulate_Ldarga((Parameter)instr.Operand); break;  			case Code.Ldloca:  			case Code.Ldloca_S:	Emulate_Ldloca((Local)instr.Operand); break;    			case Code.Dup:		valueStack.CopyTop(); break;    			case Code.Ldc_I4:	valueStack.Push(new Int32Value((int)instr.Operand)); break;  			case Code.Ldc_I4_S:	valueStack.Push(new Int32Value((sbyte)instr.Operand)); break;  			case Code.Ldc_I8:	valueStack.Push(new Int64Value((long)instr.Operand)); break;  			case Code.Ldc_R4:	valueStack.Push(new Real8Value((float)instr.Operand)); break;  			case Code.Ldc_R8:	valueStack.Push(new Real8Value((double)instr.Operand)); break;  			case Code.Ldc_I4_0:	valueStack.Push(Int32Value.Zero); break;  			case Code.Ldc_I4_1:	valueStack.Push(Int32Value.One); break;  			case Code.Ldc_I4_2:	valueStack.Push(new Int32Value(2)); break;  			case Code.Ldc_I4_3:	valueStack.Push(new Int32Value(3)); break;  			case Code.Ldc_I4_4:	valueStack.Push(new Int32Value(4)); break;  			case Code.Ldc_I4_5:	valueStack.Push(new Int32Value(5)); break;  			case Code.Ldc_I4_6:	valueStack.Push(new Int32Value(6)); break;  			case Code.Ldc_I4_7:	valueStack.Push(new Int32Value(7)); break;  			case Code.Ldc_I4_8:	valueStack.Push(new Int32Value(8)); break;  			case Code.Ldc_I4_M1:valueStack.Push(new Int32Value(-1)); break;  			case Code.Ldnull:	valueStack.Push(NullValue.Instance); break;  			case Code.Ldstr:	valueStack.Push(new StringValue((string)instr.Operand)); break;  			case Code.Box:		valueStack.Push(new BoxedValue(valueStack.Pop())); break;    			case Code.Conv_U1:	Emulate_Conv_U1(instr); break;  			case Code.Conv_U2:	Emulate_Conv_U2(instr); break;  			case Code.Conv_U4:	Emulate_Conv_U4(instr); break;  			case Code.Conv_U8:	Emulate_Conv_U8(instr); break;  			case Code.Conv_I1:	Emulate_Conv_I1(instr); break;  			case Code.Conv_I2:	Emulate_Conv_I2(instr); break;  			case Code.Conv_I4:	Emulate_Conv_I4(instr); break;  			case Code.Conv_I8:	Emulate_Conv_I8(instr); break;  			case Code.Add:		Emulate_Add(instr); break;  			case Code.Sub:		Emulate_Sub(instr); break;  			case Code.Mul:		Emulate_Mul(instr); break;  			case Code.Div:		Emulate_Div(instr); break;  			case Code.Div_Un:	Emulate_Div_Un(instr); break;  			case Code.Rem:		Emulate_Rem(instr); break;  			case Code.Rem_Un:	Emulate_Rem_Un(instr); break;  			case Code.Neg:		Emulate_Neg(instr); break;  			case Code.And:		Emulate_And(instr); break;  			case Code.Or:		Emulate_Or(instr); break;  			case Code.Xor:		Emulate_Xor(instr); break;  			case Code.Not:		Emulate_Not(instr); break;  			case Code.Shl:		Emulate_Shl(instr); break;  			case Code.Shr:		Emulate_Shr(instr); break;  			case Code.Shr_Un:	Emulate_Shr_Un(instr); break;  			case Code.Ceq:		Emulate_Ceq(instr); break;  			case Code.Cgt:		Emulate_Cgt(instr); break;  			case Code.Cgt_Un:	Emulate_Cgt_Un(instr); break;  			case Code.Clt:		Emulate_Clt(instr); break;  			case Code.Clt_Un:	Emulate_Clt_Un(instr); break;  			case Code.Unbox_Any:Emulate_Unbox_Any(instr); break;    			case Code.Call:		Emulate_Call(instr); break;  			case Code.Callvirt:	Emulate_Callvirt(instr); break;    			case Code.Castclass: Emulate_Castclass(instr); break;  			case Code.Isinst:	Emulate_Isinst(instr); break;    			case Code.Add_Ovf:	Emulate_Add_Ovf(instr); break;  			case Code.Add_Ovf_Un: Emulate_Add_Ovf_Un(instr); break;  			case Code.Sub_Ovf:	Emulate_Sub_Ovf(instr); break;  			case Code.Sub_Ovf_Un: Emulate_Sub_Ovf_Un(instr); break;  			case Code.Mul_Ovf:	Emulate_Mul_Ovf(instr); break;  			case Code.Mul_Ovf_Un: Emulate_Mul_Ovf_Un(instr); break;    			case Code.Conv_Ovf_I1:		Emulate_Conv_Ovf_I1(instr); break;  			case Code.Conv_Ovf_I1_Un:	Emulate_Conv_Ovf_I1_Un(instr); break;  			case Code.Conv_Ovf_I2:		Emulate_Conv_Ovf_I2(instr); break;  			case Code.Conv_Ovf_I2_Un:	Emulate_Conv_Ovf_I2_Un(instr); break;  			case Code.Conv_Ovf_I4:		Emulate_Conv_Ovf_I4(instr); break;  			case Code.Conv_Ovf_I4_Un:	Emulate_Conv_Ovf_I4_Un(instr); break;  			case Code.Conv_Ovf_I8:		Emulate_Conv_Ovf_I8(instr); break;  			case Code.Conv_Ovf_I8_Un:	Emulate_Conv_Ovf_I8_Un(instr); break;  			case Code.Conv_Ovf_U1:		Emulate_Conv_Ovf_U1(instr); break;  			case Code.Conv_Ovf_U1_Un:	Emulate_Conv_Ovf_U1_Un(instr); break;  			case Code.Conv_Ovf_U2:		Emulate_Conv_Ovf_U2(instr); break;  			case Code.Conv_Ovf_U2_Un:	Emulate_Conv_Ovf_U2_Un(instr); break;  			case Code.Conv_Ovf_U4:		Emulate_Conv_Ovf_U4(instr); break;  			case Code.Conv_Ovf_U4_Un:	Emulate_Conv_Ovf_U4_Un(instr); break;  			case Code.Conv_Ovf_U8:		Emulate_Conv_Ovf_U8(instr); break;  			case Code.Conv_Ovf_U8_Un:	Emulate_Conv_Ovf_U8_Un(instr); break;    			case Code.Ldelem_I1: valueStack.Pop(2); valueStack.Push(Int32Value.CreateUnknown()); break;  			case Code.Ldelem_I2: valueStack.Pop(2); valueStack.Push(Int32Value.CreateUnknown()); break;  			case Code.Ldelem_I4: valueStack.Pop(2); valueStack.Push(Int32Value.CreateUnknown()); break;  			case Code.Ldelem_I8: valueStack.Pop(2); valueStack.Push(Int64Value.CreateUnknown()); break;  			case Code.Ldelem_U1: valueStack.Pop(2); valueStack.Push(Int32Value.CreateUnknownUInt8()); break;  			case Code.Ldelem_U2: valueStack.Pop(2); valueStack.Push(Int32Value.CreateUnknownUInt16()); break;  			case Code.Ldelem_U4: valueStack.Pop(2); valueStack.Push(Int32Value.CreateUnknown()); break;  			case Code.Ldelem:	 valueStack.Pop(2); valueStack.Push(GetUnknownValue(instr.Operand as ITypeDefOrRef)); break;    			case Code.Ldind_I1:	valueStack.Pop(); valueStack.Push(Int32Value.CreateUnknown()); break;  			case Code.Ldind_I2:	valueStack.Pop(); valueStack.Push(Int32Value.CreateUnknown()); break;  			case Code.Ldind_I4:	valueStack.Pop(); valueStack.Push(Int32Value.CreateUnknown()); break;  			case Code.Ldind_I8:	valueStack.Pop(); valueStack.Push(Int64Value.CreateUnknown()); break;  			case Code.Ldind_U1:	valueStack.Pop(); valueStack.Push(Int32Value.CreateUnknownUInt8()); break;  			case Code.Ldind_U2:	valueStack.Pop(); valueStack.Push(Int32Value.CreateUnknownUInt16()); break;  			case Code.Ldind_U4:	valueStack.Pop(); valueStack.Push(Int32Value.CreateUnknown()); break;    			case Code.Ldlen:	valueStack.Pop(); valueStack.Push(Int32Value.CreateUnknown()); break;  			case Code.Sizeof:	valueStack.Push(Int32Value.CreateUnknown()); break;    			case Code.Ldfld:	Emulate_Ldfld(instr); break;  			case Code.Ldsfld:	Emulate_Ldsfld(instr); break;    			case Code.Ldftn:	valueStack.Push(new ObjectValue(instr.Operand)); break;  			case Code.Ldsflda:	valueStack.Push(new ObjectValue(instr.Operand)); break;  			case Code.Ldtoken:	valueStack.Push(new ObjectValue(instr.Operand)); break;  			case Code.Ldvirtftn:valueStack.Pop(); valueStack.Push(new ObjectValue()); break;  			case Code.Ldflda:	valueStack.Pop(); valueStack.Push(new ObjectValue()); break;    			case Code.Unbox:    			case Code.Conv_R_Un:Emulate_Conv_R_Un(instr); break;  			case Code.Conv_R4:	Emulate_Conv_R4(instr); break;  			case Code.Conv_R8:	Emulate_Conv_R8(instr); break;    			case Code.Arglist:  			case Code.Beq:  			case Code.Beq_S:  			case Code.Bge:  			case Code.Bge_S:  			case Code.Bge_Un:  			case Code.Bge_Un_S:  			case Code.Bgt:  			case Code.Bgt_S:  			case Code.Bgt_Un:  			case Code.Bgt_Un_S:  			case Code.Ble:  			case Code.Ble_S:  			case Code.Ble_Un:  			case Code.Ble_Un_S:  			case Code.Blt:  			case Code.Blt_S:  			case Code.Blt_Un:  			case Code.Blt_Un_S:  			case Code.Bne_Un:  			case Code.Bne_Un_S:  			case Code.Brfalse:  			case Code.Brfalse_S:  			case Code.Brtrue:  			case Code.Brtrue_S:  			case Code.Br:  			case Code.Br_S:  			case Code.Break:  			case Code.Calli:  			case Code.Ckfinite:  			case Code.Constrained:  			case Code.Conv_I:  			case Code.Conv_Ovf_I:  			case Code.Conv_Ovf_I_Un:  			case Code.Conv_Ovf_U:  			case Code.Conv_Ovf_U_Un:  			case Code.Conv_U:  			case Code.Cpblk:  			case Code.Cpobj:  			case Code.Endfilter:  			case Code.Endfinally:  			case Code.Initblk:  			case Code.Initobj:  			case Code.Jmp:  			case Code.Ldelema:  			case Code.Ldelem_I:  			case Code.Ldelem_R4:  			case Code.Ldelem_R8:  			case Code.Ldelem_Ref:  			case Code.Ldind_I:  			case Code.Ldind_R4:  			case Code.Ldind_R8:  			case Code.Ldind_Ref:  			case Code.Ldobj:  			case Code.Leave:  			case Code.Leave_S:  			case Code.Localloc:  			case Code.Mkrefany:  			case Code.Newarr:  			case Code.Newobj:  			case Code.Nop:  			case Code.Pop:  			case Code.Readonly:  			case Code.Refanytype:  			case Code.Refanyval:  			case Code.Ret:  			case Code.Rethrow:  			case Code.Stelem:  			case Code.Stelem_I:  			case Code.Stelem_I1:  			case Code.Stelem_I2:  			case Code.Stelem_I4:  			case Code.Stelem_I8:  			case Code.Stelem_R4:  			case Code.Stelem_R8:  			case Code.Stelem_Ref:  			case Code.Stfld:  			case Code.Stind_I:  			case Code.Stind_I1:  			case Code.Stind_I2:  			case Code.Stind_I4:  			case Code.Stind_I8:  			case Code.Stind_R4:  			case Code.Stind_R8:  			case Code.Stind_Ref:  			case Code.Stobj:  			case Code.Stsfld:  			case Code.Switch:  			case Code.Tailcall:  			case Code.Throw:  			case Code.Unaligned:  			case Code.Volatile:  			default:  				UpdateStack(instr);  				break;  			}
Magic Number,de4dot.blocks.cflow,InstructionEmulator,C:\repos\0xd4d_de4dot\de4dot.blocks\cflow\InstructionEmulator.cs,Emulate,The following statement contains a magic number: switch (instr.OpCode.Code) {  			case Code.Starg:  			case Code.Starg_S:	Emulate_Starg((Parameter)instr.Operand); break;  			case Code.Stloc:  			case Code.Stloc_S:	Emulate_Stloc((Local)instr.Operand); break;  			case Code.Stloc_0:	Emulate_Stloc(0); break;  			case Code.Stloc_1:	Emulate_Stloc(1); break;  			case Code.Stloc_2:	Emulate_Stloc(2); break;  			case Code.Stloc_3:	Emulate_Stloc(3); break;    			case Code.Ldarg:  			case Code.Ldarg_S:	valueStack.Push(GetArg((Parameter)instr.Operand)); break;  			case Code.Ldarg_0:	valueStack.Push(GetArg(0)); break;  			case Code.Ldarg_1:	valueStack.Push(GetArg(1)); break;  			case Code.Ldarg_2:	valueStack.Push(GetArg(2)); break;  			case Code.Ldarg_3:	valueStack.Push(GetArg(3)); break;  			case Code.Ldloc:  			case Code.Ldloc_S:	valueStack.Push(GetLocal((Local)instr.Operand)); break;  			case Code.Ldloc_0:	valueStack.Push(GetLocal(0)); break;  			case Code.Ldloc_1:	valueStack.Push(GetLocal(1)); break;  			case Code.Ldloc_2:	valueStack.Push(GetLocal(2)); break;  			case Code.Ldloc_3:	valueStack.Push(GetLocal(3)); break;    			case Code.Ldarga:  			case Code.Ldarga_S:	Emulate_Ldarga((Parameter)instr.Operand); break;  			case Code.Ldloca:  			case Code.Ldloca_S:	Emulate_Ldloca((Local)instr.Operand); break;    			case Code.Dup:		valueStack.CopyTop(); break;    			case Code.Ldc_I4:	valueStack.Push(new Int32Value((int)instr.Operand)); break;  			case Code.Ldc_I4_S:	valueStack.Push(new Int32Value((sbyte)instr.Operand)); break;  			case Code.Ldc_I8:	valueStack.Push(new Int64Value((long)instr.Operand)); break;  			case Code.Ldc_R4:	valueStack.Push(new Real8Value((float)instr.Operand)); break;  			case Code.Ldc_R8:	valueStack.Push(new Real8Value((double)instr.Operand)); break;  			case Code.Ldc_I4_0:	valueStack.Push(Int32Value.Zero); break;  			case Code.Ldc_I4_1:	valueStack.Push(Int32Value.One); break;  			case Code.Ldc_I4_2:	valueStack.Push(new Int32Value(2)); break;  			case Code.Ldc_I4_3:	valueStack.Push(new Int32Value(3)); break;  			case Code.Ldc_I4_4:	valueStack.Push(new Int32Value(4)); break;  			case Code.Ldc_I4_5:	valueStack.Push(new Int32Value(5)); break;  			case Code.Ldc_I4_6:	valueStack.Push(new Int32Value(6)); break;  			case Code.Ldc_I4_7:	valueStack.Push(new Int32Value(7)); break;  			case Code.Ldc_I4_8:	valueStack.Push(new Int32Value(8)); break;  			case Code.Ldc_I4_M1:valueStack.Push(new Int32Value(-1)); break;  			case Code.Ldnull:	valueStack.Push(NullValue.Instance); break;  			case Code.Ldstr:	valueStack.Push(new StringValue((string)instr.Operand)); break;  			case Code.Box:		valueStack.Push(new BoxedValue(valueStack.Pop())); break;    			case Code.Conv_U1:	Emulate_Conv_U1(instr); break;  			case Code.Conv_U2:	Emulate_Conv_U2(instr); break;  			case Code.Conv_U4:	Emulate_Conv_U4(instr); break;  			case Code.Conv_U8:	Emulate_Conv_U8(instr); break;  			case Code.Conv_I1:	Emulate_Conv_I1(instr); break;  			case Code.Conv_I2:	Emulate_Conv_I2(instr); break;  			case Code.Conv_I4:	Emulate_Conv_I4(instr); break;  			case Code.Conv_I8:	Emulate_Conv_I8(instr); break;  			case Code.Add:		Emulate_Add(instr); break;  			case Code.Sub:		Emulate_Sub(instr); break;  			case Code.Mul:		Emulate_Mul(instr); break;  			case Code.Div:		Emulate_Div(instr); break;  			case Code.Div_Un:	Emulate_Div_Un(instr); break;  			case Code.Rem:		Emulate_Rem(instr); break;  			case Code.Rem_Un:	Emulate_Rem_Un(instr); break;  			case Code.Neg:		Emulate_Neg(instr); break;  			case Code.And:		Emulate_And(instr); break;  			case Code.Or:		Emulate_Or(instr); break;  			case Code.Xor:		Emulate_Xor(instr); break;  			case Code.Not:		Emulate_Not(instr); break;  			case Code.Shl:		Emulate_Shl(instr); break;  			case Code.Shr:		Emulate_Shr(instr); break;  			case Code.Shr_Un:	Emulate_Shr_Un(instr); break;  			case Code.Ceq:		Emulate_Ceq(instr); break;  			case Code.Cgt:		Emulate_Cgt(instr); break;  			case Code.Cgt_Un:	Emulate_Cgt_Un(instr); break;  			case Code.Clt:		Emulate_Clt(instr); break;  			case Code.Clt_Un:	Emulate_Clt_Un(instr); break;  			case Code.Unbox_Any:Emulate_Unbox_Any(instr); break;    			case Code.Call:		Emulate_Call(instr); break;  			case Code.Callvirt:	Emulate_Callvirt(instr); break;    			case Code.Castclass: Emulate_Castclass(instr); break;  			case Code.Isinst:	Emulate_Isinst(instr); break;    			case Code.Add_Ovf:	Emulate_Add_Ovf(instr); break;  			case Code.Add_Ovf_Un: Emulate_Add_Ovf_Un(instr); break;  			case Code.Sub_Ovf:	Emulate_Sub_Ovf(instr); break;  			case Code.Sub_Ovf_Un: Emulate_Sub_Ovf_Un(instr); break;  			case Code.Mul_Ovf:	Emulate_Mul_Ovf(instr); break;  			case Code.Mul_Ovf_Un: Emulate_Mul_Ovf_Un(instr); break;    			case Code.Conv_Ovf_I1:		Emulate_Conv_Ovf_I1(instr); break;  			case Code.Conv_Ovf_I1_Un:	Emulate_Conv_Ovf_I1_Un(instr); break;  			case Code.Conv_Ovf_I2:		Emulate_Conv_Ovf_I2(instr); break;  			case Code.Conv_Ovf_I2_Un:	Emulate_Conv_Ovf_I2_Un(instr); break;  			case Code.Conv_Ovf_I4:		Emulate_Conv_Ovf_I4(instr); break;  			case Code.Conv_Ovf_I4_Un:	Emulate_Conv_Ovf_I4_Un(instr); break;  			case Code.Conv_Ovf_I8:		Emulate_Conv_Ovf_I8(instr); break;  			case Code.Conv_Ovf_I8_Un:	Emulate_Conv_Ovf_I8_Un(instr); break;  			case Code.Conv_Ovf_U1:		Emulate_Conv_Ovf_U1(instr); break;  			case Code.Conv_Ovf_U1_Un:	Emulate_Conv_Ovf_U1_Un(instr); break;  			case Code.Conv_Ovf_U2:		Emulate_Conv_Ovf_U2(instr); break;  			case Code.Conv_Ovf_U2_Un:	Emulate_Conv_Ovf_U2_Un(instr); break;  			case Code.Conv_Ovf_U4:		Emulate_Conv_Ovf_U4(instr); break;  			case Code.Conv_Ovf_U4_Un:	Emulate_Conv_Ovf_U4_Un(instr); break;  			case Code.Conv_Ovf_U8:		Emulate_Conv_Ovf_U8(instr); break;  			case Code.Conv_Ovf_U8_Un:	Emulate_Conv_Ovf_U8_Un(instr); break;    			case Code.Ldelem_I1: valueStack.Pop(2); valueStack.Push(Int32Value.CreateUnknown()); break;  			case Code.Ldelem_I2: valueStack.Pop(2); valueStack.Push(Int32Value.CreateUnknown()); break;  			case Code.Ldelem_I4: valueStack.Pop(2); valueStack.Push(Int32Value.CreateUnknown()); break;  			case Code.Ldelem_I8: valueStack.Pop(2); valueStack.Push(Int64Value.CreateUnknown()); break;  			case Code.Ldelem_U1: valueStack.Pop(2); valueStack.Push(Int32Value.CreateUnknownUInt8()); break;  			case Code.Ldelem_U2: valueStack.Pop(2); valueStack.Push(Int32Value.CreateUnknownUInt16()); break;  			case Code.Ldelem_U4: valueStack.Pop(2); valueStack.Push(Int32Value.CreateUnknown()); break;  			case Code.Ldelem:	 valueStack.Pop(2); valueStack.Push(GetUnknownValue(instr.Operand as ITypeDefOrRef)); break;    			case Code.Ldind_I1:	valueStack.Pop(); valueStack.Push(Int32Value.CreateUnknown()); break;  			case Code.Ldind_I2:	valueStack.Pop(); valueStack.Push(Int32Value.CreateUnknown()); break;  			case Code.Ldind_I4:	valueStack.Pop(); valueStack.Push(Int32Value.CreateUnknown()); break;  			case Code.Ldind_I8:	valueStack.Pop(); valueStack.Push(Int64Value.CreateUnknown()); break;  			case Code.Ldind_U1:	valueStack.Pop(); valueStack.Push(Int32Value.CreateUnknownUInt8()); break;  			case Code.Ldind_U2:	valueStack.Pop(); valueStack.Push(Int32Value.CreateUnknownUInt16()); break;  			case Code.Ldind_U4:	valueStack.Pop(); valueStack.Push(Int32Value.CreateUnknown()); break;    			case Code.Ldlen:	valueStack.Pop(); valueStack.Push(Int32Value.CreateUnknown()); break;  			case Code.Sizeof:	valueStack.Push(Int32Value.CreateUnknown()); break;    			case Code.Ldfld:	Emulate_Ldfld(instr); break;  			case Code.Ldsfld:	Emulate_Ldsfld(instr); break;    			case Code.Ldftn:	valueStack.Push(new ObjectValue(instr.Operand)); break;  			case Code.Ldsflda:	valueStack.Push(new ObjectValue(instr.Operand)); break;  			case Code.Ldtoken:	valueStack.Push(new ObjectValue(instr.Operand)); break;  			case Code.Ldvirtftn:valueStack.Pop(); valueStack.Push(new ObjectValue()); break;  			case Code.Ldflda:	valueStack.Pop(); valueStack.Push(new ObjectValue()); break;    			case Code.Unbox:    			case Code.Conv_R_Un:Emulate_Conv_R_Un(instr); break;  			case Code.Conv_R4:	Emulate_Conv_R4(instr); break;  			case Code.Conv_R8:	Emulate_Conv_R8(instr); break;    			case Code.Arglist:  			case Code.Beq:  			case Code.Beq_S:  			case Code.Bge:  			case Code.Bge_S:  			case Code.Bge_Un:  			case Code.Bge_Un_S:  			case Code.Bgt:  			case Code.Bgt_S:  			case Code.Bgt_Un:  			case Code.Bgt_Un_S:  			case Code.Ble:  			case Code.Ble_S:  			case Code.Ble_Un:  			case Code.Ble_Un_S:  			case Code.Blt:  			case Code.Blt_S:  			case Code.Blt_Un:  			case Code.Blt_Un_S:  			case Code.Bne_Un:  			case Code.Bne_Un_S:  			case Code.Brfalse:  			case Code.Brfalse_S:  			case Code.Brtrue:  			case Code.Brtrue_S:  			case Code.Br:  			case Code.Br_S:  			case Code.Break:  			case Code.Calli:  			case Code.Ckfinite:  			case Code.Constrained:  			case Code.Conv_I:  			case Code.Conv_Ovf_I:  			case Code.Conv_Ovf_I_Un:  			case Code.Conv_Ovf_U:  			case Code.Conv_Ovf_U_Un:  			case Code.Conv_U:  			case Code.Cpblk:  			case Code.Cpobj:  			case Code.Endfilter:  			case Code.Endfinally:  			case Code.Initblk:  			case Code.Initobj:  			case Code.Jmp:  			case Code.Ldelema:  			case Code.Ldelem_I:  			case Code.Ldelem_R4:  			case Code.Ldelem_R8:  			case Code.Ldelem_Ref:  			case Code.Ldind_I:  			case Code.Ldind_R4:  			case Code.Ldind_R8:  			case Code.Ldind_Ref:  			case Code.Ldobj:  			case Code.Leave:  			case Code.Leave_S:  			case Code.Localloc:  			case Code.Mkrefany:  			case Code.Newarr:  			case Code.Newobj:  			case Code.Nop:  			case Code.Pop:  			case Code.Readonly:  			case Code.Refanytype:  			case Code.Refanyval:  			case Code.Ret:  			case Code.Rethrow:  			case Code.Stelem:  			case Code.Stelem_I:  			case Code.Stelem_I1:  			case Code.Stelem_I2:  			case Code.Stelem_I4:  			case Code.Stelem_I8:  			case Code.Stelem_R4:  			case Code.Stelem_R8:  			case Code.Stelem_Ref:  			case Code.Stfld:  			case Code.Stind_I:  			case Code.Stind_I1:  			case Code.Stind_I2:  			case Code.Stind_I4:  			case Code.Stind_I8:  			case Code.Stind_R4:  			case Code.Stind_R8:  			case Code.Stind_Ref:  			case Code.Stobj:  			case Code.Stsfld:  			case Code.Switch:  			case Code.Tailcall:  			case Code.Throw:  			case Code.Unaligned:  			case Code.Volatile:  			default:  				UpdateStack(instr);  				break;  			}
Magic Number,de4dot.blocks.cflow,InstructionEmulator,C:\repos\0xd4d_de4dot\de4dot.blocks\cflow\InstructionEmulator.cs,Emulate,The following statement contains a magic number: switch (instr.OpCode.Code) {  			case Code.Starg:  			case Code.Starg_S:	Emulate_Starg((Parameter)instr.Operand); break;  			case Code.Stloc:  			case Code.Stloc_S:	Emulate_Stloc((Local)instr.Operand); break;  			case Code.Stloc_0:	Emulate_Stloc(0); break;  			case Code.Stloc_1:	Emulate_Stloc(1); break;  			case Code.Stloc_2:	Emulate_Stloc(2); break;  			case Code.Stloc_3:	Emulate_Stloc(3); break;    			case Code.Ldarg:  			case Code.Ldarg_S:	valueStack.Push(GetArg((Parameter)instr.Operand)); break;  			case Code.Ldarg_0:	valueStack.Push(GetArg(0)); break;  			case Code.Ldarg_1:	valueStack.Push(GetArg(1)); break;  			case Code.Ldarg_2:	valueStack.Push(GetArg(2)); break;  			case Code.Ldarg_3:	valueStack.Push(GetArg(3)); break;  			case Code.Ldloc:  			case Code.Ldloc_S:	valueStack.Push(GetLocal((Local)instr.Operand)); break;  			case Code.Ldloc_0:	valueStack.Push(GetLocal(0)); break;  			case Code.Ldloc_1:	valueStack.Push(GetLocal(1)); break;  			case Code.Ldloc_2:	valueStack.Push(GetLocal(2)); break;  			case Code.Ldloc_3:	valueStack.Push(GetLocal(3)); break;    			case Code.Ldarga:  			case Code.Ldarga_S:	Emulate_Ldarga((Parameter)instr.Operand); break;  			case Code.Ldloca:  			case Code.Ldloca_S:	Emulate_Ldloca((Local)instr.Operand); break;    			case Code.Dup:		valueStack.CopyTop(); break;    			case Code.Ldc_I4:	valueStack.Push(new Int32Value((int)instr.Operand)); break;  			case Code.Ldc_I4_S:	valueStack.Push(new Int32Value((sbyte)instr.Operand)); break;  			case Code.Ldc_I8:	valueStack.Push(new Int64Value((long)instr.Operand)); break;  			case Code.Ldc_R4:	valueStack.Push(new Real8Value((float)instr.Operand)); break;  			case Code.Ldc_R8:	valueStack.Push(new Real8Value((double)instr.Operand)); break;  			case Code.Ldc_I4_0:	valueStack.Push(Int32Value.Zero); break;  			case Code.Ldc_I4_1:	valueStack.Push(Int32Value.One); break;  			case Code.Ldc_I4_2:	valueStack.Push(new Int32Value(2)); break;  			case Code.Ldc_I4_3:	valueStack.Push(new Int32Value(3)); break;  			case Code.Ldc_I4_4:	valueStack.Push(new Int32Value(4)); break;  			case Code.Ldc_I4_5:	valueStack.Push(new Int32Value(5)); break;  			case Code.Ldc_I4_6:	valueStack.Push(new Int32Value(6)); break;  			case Code.Ldc_I4_7:	valueStack.Push(new Int32Value(7)); break;  			case Code.Ldc_I4_8:	valueStack.Push(new Int32Value(8)); break;  			case Code.Ldc_I4_M1:valueStack.Push(new Int32Value(-1)); break;  			case Code.Ldnull:	valueStack.Push(NullValue.Instance); break;  			case Code.Ldstr:	valueStack.Push(new StringValue((string)instr.Operand)); break;  			case Code.Box:		valueStack.Push(new BoxedValue(valueStack.Pop())); break;    			case Code.Conv_U1:	Emulate_Conv_U1(instr); break;  			case Code.Conv_U2:	Emulate_Conv_U2(instr); break;  			case Code.Conv_U4:	Emulate_Conv_U4(instr); break;  			case Code.Conv_U8:	Emulate_Conv_U8(instr); break;  			case Code.Conv_I1:	Emulate_Conv_I1(instr); break;  			case Code.Conv_I2:	Emulate_Conv_I2(instr); break;  			case Code.Conv_I4:	Emulate_Conv_I4(instr); break;  			case Code.Conv_I8:	Emulate_Conv_I8(instr); break;  			case Code.Add:		Emulate_Add(instr); break;  			case Code.Sub:		Emulate_Sub(instr); break;  			case Code.Mul:		Emulate_Mul(instr); break;  			case Code.Div:		Emulate_Div(instr); break;  			case Code.Div_Un:	Emulate_Div_Un(instr); break;  			case Code.Rem:		Emulate_Rem(instr); break;  			case Code.Rem_Un:	Emulate_Rem_Un(instr); break;  			case Code.Neg:		Emulate_Neg(instr); break;  			case Code.And:		Emulate_And(instr); break;  			case Code.Or:		Emulate_Or(instr); break;  			case Code.Xor:		Emulate_Xor(instr); break;  			case Code.Not:		Emulate_Not(instr); break;  			case Code.Shl:		Emulate_Shl(instr); break;  			case Code.Shr:		Emulate_Shr(instr); break;  			case Code.Shr_Un:	Emulate_Shr_Un(instr); break;  			case Code.Ceq:		Emulate_Ceq(instr); break;  			case Code.Cgt:		Emulate_Cgt(instr); break;  			case Code.Cgt_Un:	Emulate_Cgt_Un(instr); break;  			case Code.Clt:		Emulate_Clt(instr); break;  			case Code.Clt_Un:	Emulate_Clt_Un(instr); break;  			case Code.Unbox_Any:Emulate_Unbox_Any(instr); break;    			case Code.Call:		Emulate_Call(instr); break;  			case Code.Callvirt:	Emulate_Callvirt(instr); break;    			case Code.Castclass: Emulate_Castclass(instr); break;  			case Code.Isinst:	Emulate_Isinst(instr); break;    			case Code.Add_Ovf:	Emulate_Add_Ovf(instr); break;  			case Code.Add_Ovf_Un: Emulate_Add_Ovf_Un(instr); break;  			case Code.Sub_Ovf:	Emulate_Sub_Ovf(instr); break;  			case Code.Sub_Ovf_Un: Emulate_Sub_Ovf_Un(instr); break;  			case Code.Mul_Ovf:	Emulate_Mul_Ovf(instr); break;  			case Code.Mul_Ovf_Un: Emulate_Mul_Ovf_Un(instr); break;    			case Code.Conv_Ovf_I1:		Emulate_Conv_Ovf_I1(instr); break;  			case Code.Conv_Ovf_I1_Un:	Emulate_Conv_Ovf_I1_Un(instr); break;  			case Code.Conv_Ovf_I2:		Emulate_Conv_Ovf_I2(instr); break;  			case Code.Conv_Ovf_I2_Un:	Emulate_Conv_Ovf_I2_Un(instr); break;  			case Code.Conv_Ovf_I4:		Emulate_Conv_Ovf_I4(instr); break;  			case Code.Conv_Ovf_I4_Un:	Emulate_Conv_Ovf_I4_Un(instr); break;  			case Code.Conv_Ovf_I8:		Emulate_Conv_Ovf_I8(instr); break;  			case Code.Conv_Ovf_I8_Un:	Emulate_Conv_Ovf_I8_Un(instr); break;  			case Code.Conv_Ovf_U1:		Emulate_Conv_Ovf_U1(instr); break;  			case Code.Conv_Ovf_U1_Un:	Emulate_Conv_Ovf_U1_Un(instr); break;  			case Code.Conv_Ovf_U2:		Emulate_Conv_Ovf_U2(instr); break;  			case Code.Conv_Ovf_U2_Un:	Emulate_Conv_Ovf_U2_Un(instr); break;  			case Code.Conv_Ovf_U4:		Emulate_Conv_Ovf_U4(instr); break;  			case Code.Conv_Ovf_U4_Un:	Emulate_Conv_Ovf_U4_Un(instr); break;  			case Code.Conv_Ovf_U8:		Emulate_Conv_Ovf_U8(instr); break;  			case Code.Conv_Ovf_U8_Un:	Emulate_Conv_Ovf_U8_Un(instr); break;    			case Code.Ldelem_I1: valueStack.Pop(2); valueStack.Push(Int32Value.CreateUnknown()); break;  			case Code.Ldelem_I2: valueStack.Pop(2); valueStack.Push(Int32Value.CreateUnknown()); break;  			case Code.Ldelem_I4: valueStack.Pop(2); valueStack.Push(Int32Value.CreateUnknown()); break;  			case Code.Ldelem_I8: valueStack.Pop(2); valueStack.Push(Int64Value.CreateUnknown()); break;  			case Code.Ldelem_U1: valueStack.Pop(2); valueStack.Push(Int32Value.CreateUnknownUInt8()); break;  			case Code.Ldelem_U2: valueStack.Pop(2); valueStack.Push(Int32Value.CreateUnknownUInt16()); break;  			case Code.Ldelem_U4: valueStack.Pop(2); valueStack.Push(Int32Value.CreateUnknown()); break;  			case Code.Ldelem:	 valueStack.Pop(2); valueStack.Push(GetUnknownValue(instr.Operand as ITypeDefOrRef)); break;    			case Code.Ldind_I1:	valueStack.Pop(); valueStack.Push(Int32Value.CreateUnknown()); break;  			case Code.Ldind_I2:	valueStack.Pop(); valueStack.Push(Int32Value.CreateUnknown()); break;  			case Code.Ldind_I4:	valueStack.Pop(); valueStack.Push(Int32Value.CreateUnknown()); break;  			case Code.Ldind_I8:	valueStack.Pop(); valueStack.Push(Int64Value.CreateUnknown()); break;  			case Code.Ldind_U1:	valueStack.Pop(); valueStack.Push(Int32Value.CreateUnknownUInt8()); break;  			case Code.Ldind_U2:	valueStack.Pop(); valueStack.Push(Int32Value.CreateUnknownUInt16()); break;  			case Code.Ldind_U4:	valueStack.Pop(); valueStack.Push(Int32Value.CreateUnknown()); break;    			case Code.Ldlen:	valueStack.Pop(); valueStack.Push(Int32Value.CreateUnknown()); break;  			case Code.Sizeof:	valueStack.Push(Int32Value.CreateUnknown()); break;    			case Code.Ldfld:	Emulate_Ldfld(instr); break;  			case Code.Ldsfld:	Emulate_Ldsfld(instr); break;    			case Code.Ldftn:	valueStack.Push(new ObjectValue(instr.Operand)); break;  			case Code.Ldsflda:	valueStack.Push(new ObjectValue(instr.Operand)); break;  			case Code.Ldtoken:	valueStack.Push(new ObjectValue(instr.Operand)); break;  			case Code.Ldvirtftn:valueStack.Pop(); valueStack.Push(new ObjectValue()); break;  			case Code.Ldflda:	valueStack.Pop(); valueStack.Push(new ObjectValue()); break;    			case Code.Unbox:    			case Code.Conv_R_Un:Emulate_Conv_R_Un(instr); break;  			case Code.Conv_R4:	Emulate_Conv_R4(instr); break;  			case Code.Conv_R8:	Emulate_Conv_R8(instr); break;    			case Code.Arglist:  			case Code.Beq:  			case Code.Beq_S:  			case Code.Bge:  			case Code.Bge_S:  			case Code.Bge_Un:  			case Code.Bge_Un_S:  			case Code.Bgt:  			case Code.Bgt_S:  			case Code.Bgt_Un:  			case Code.Bgt_Un_S:  			case Code.Ble:  			case Code.Ble_S:  			case Code.Ble_Un:  			case Code.Ble_Un_S:  			case Code.Blt:  			case Code.Blt_S:  			case Code.Blt_Un:  			case Code.Blt_Un_S:  			case Code.Bne_Un:  			case Code.Bne_Un_S:  			case Code.Brfalse:  			case Code.Brfalse_S:  			case Code.Brtrue:  			case Code.Brtrue_S:  			case Code.Br:  			case Code.Br_S:  			case Code.Break:  			case Code.Calli:  			case Code.Ckfinite:  			case Code.Constrained:  			case Code.Conv_I:  			case Code.Conv_Ovf_I:  			case Code.Conv_Ovf_I_Un:  			case Code.Conv_Ovf_U:  			case Code.Conv_Ovf_U_Un:  			case Code.Conv_U:  			case Code.Cpblk:  			case Code.Cpobj:  			case Code.Endfilter:  			case Code.Endfinally:  			case Code.Initblk:  			case Code.Initobj:  			case Code.Jmp:  			case Code.Ldelema:  			case Code.Ldelem_I:  			case Code.Ldelem_R4:  			case Code.Ldelem_R8:  			case Code.Ldelem_Ref:  			case Code.Ldind_I:  			case Code.Ldind_R4:  			case Code.Ldind_R8:  			case Code.Ldind_Ref:  			case Code.Ldobj:  			case Code.Leave:  			case Code.Leave_S:  			case Code.Localloc:  			case Code.Mkrefany:  			case Code.Newarr:  			case Code.Newobj:  			case Code.Nop:  			case Code.Pop:  			case Code.Readonly:  			case Code.Refanytype:  			case Code.Refanyval:  			case Code.Ret:  			case Code.Rethrow:  			case Code.Stelem:  			case Code.Stelem_I:  			case Code.Stelem_I1:  			case Code.Stelem_I2:  			case Code.Stelem_I4:  			case Code.Stelem_I8:  			case Code.Stelem_R4:  			case Code.Stelem_R8:  			case Code.Stelem_Ref:  			case Code.Stfld:  			case Code.Stind_I:  			case Code.Stind_I1:  			case Code.Stind_I2:  			case Code.Stind_I4:  			case Code.Stind_I8:  			case Code.Stind_R4:  			case Code.Stind_R8:  			case Code.Stind_Ref:  			case Code.Stobj:  			case Code.Stsfld:  			case Code.Switch:  			case Code.Tailcall:  			case Code.Throw:  			case Code.Unaligned:  			case Code.Volatile:  			default:  				UpdateStack(instr);  				break;  			}
Magic Number,de4dot.blocks.cflow,InstructionEmulator,C:\repos\0xd4d_de4dot\de4dot.blocks\cflow\InstructionEmulator.cs,Emulate,The following statement contains a magic number: switch (instr.OpCode.Code) {  			case Code.Starg:  			case Code.Starg_S:	Emulate_Starg((Parameter)instr.Operand); break;  			case Code.Stloc:  			case Code.Stloc_S:	Emulate_Stloc((Local)instr.Operand); break;  			case Code.Stloc_0:	Emulate_Stloc(0); break;  			case Code.Stloc_1:	Emulate_Stloc(1); break;  			case Code.Stloc_2:	Emulate_Stloc(2); break;  			case Code.Stloc_3:	Emulate_Stloc(3); break;    			case Code.Ldarg:  			case Code.Ldarg_S:	valueStack.Push(GetArg((Parameter)instr.Operand)); break;  			case Code.Ldarg_0:	valueStack.Push(GetArg(0)); break;  			case Code.Ldarg_1:	valueStack.Push(GetArg(1)); break;  			case Code.Ldarg_2:	valueStack.Push(GetArg(2)); break;  			case Code.Ldarg_3:	valueStack.Push(GetArg(3)); break;  			case Code.Ldloc:  			case Code.Ldloc_S:	valueStack.Push(GetLocal((Local)instr.Operand)); break;  			case Code.Ldloc_0:	valueStack.Push(GetLocal(0)); break;  			case Code.Ldloc_1:	valueStack.Push(GetLocal(1)); break;  			case Code.Ldloc_2:	valueStack.Push(GetLocal(2)); break;  			case Code.Ldloc_3:	valueStack.Push(GetLocal(3)); break;    			case Code.Ldarga:  			case Code.Ldarga_S:	Emulate_Ldarga((Parameter)instr.Operand); break;  			case Code.Ldloca:  			case Code.Ldloca_S:	Emulate_Ldloca((Local)instr.Operand); break;    			case Code.Dup:		valueStack.CopyTop(); break;    			case Code.Ldc_I4:	valueStack.Push(new Int32Value((int)instr.Operand)); break;  			case Code.Ldc_I4_S:	valueStack.Push(new Int32Value((sbyte)instr.Operand)); break;  			case Code.Ldc_I8:	valueStack.Push(new Int64Value((long)instr.Operand)); break;  			case Code.Ldc_R4:	valueStack.Push(new Real8Value((float)instr.Operand)); break;  			case Code.Ldc_R8:	valueStack.Push(new Real8Value((double)instr.Operand)); break;  			case Code.Ldc_I4_0:	valueStack.Push(Int32Value.Zero); break;  			case Code.Ldc_I4_1:	valueStack.Push(Int32Value.One); break;  			case Code.Ldc_I4_2:	valueStack.Push(new Int32Value(2)); break;  			case Code.Ldc_I4_3:	valueStack.Push(new Int32Value(3)); break;  			case Code.Ldc_I4_4:	valueStack.Push(new Int32Value(4)); break;  			case Code.Ldc_I4_5:	valueStack.Push(new Int32Value(5)); break;  			case Code.Ldc_I4_6:	valueStack.Push(new Int32Value(6)); break;  			case Code.Ldc_I4_7:	valueStack.Push(new Int32Value(7)); break;  			case Code.Ldc_I4_8:	valueStack.Push(new Int32Value(8)); break;  			case Code.Ldc_I4_M1:valueStack.Push(new Int32Value(-1)); break;  			case Code.Ldnull:	valueStack.Push(NullValue.Instance); break;  			case Code.Ldstr:	valueStack.Push(new StringValue((string)instr.Operand)); break;  			case Code.Box:		valueStack.Push(new BoxedValue(valueStack.Pop())); break;    			case Code.Conv_U1:	Emulate_Conv_U1(instr); break;  			case Code.Conv_U2:	Emulate_Conv_U2(instr); break;  			case Code.Conv_U4:	Emulate_Conv_U4(instr); break;  			case Code.Conv_U8:	Emulate_Conv_U8(instr); break;  			case Code.Conv_I1:	Emulate_Conv_I1(instr); break;  			case Code.Conv_I2:	Emulate_Conv_I2(instr); break;  			case Code.Conv_I4:	Emulate_Conv_I4(instr); break;  			case Code.Conv_I8:	Emulate_Conv_I8(instr); break;  			case Code.Add:		Emulate_Add(instr); break;  			case Code.Sub:		Emulate_Sub(instr); break;  			case Code.Mul:		Emulate_Mul(instr); break;  			case Code.Div:		Emulate_Div(instr); break;  			case Code.Div_Un:	Emulate_Div_Un(instr); break;  			case Code.Rem:		Emulate_Rem(instr); break;  			case Code.Rem_Un:	Emulate_Rem_Un(instr); break;  			case Code.Neg:		Emulate_Neg(instr); break;  			case Code.And:		Emulate_And(instr); break;  			case Code.Or:		Emulate_Or(instr); break;  			case Code.Xor:		Emulate_Xor(instr); break;  			case Code.Not:		Emulate_Not(instr); break;  			case Code.Shl:		Emulate_Shl(instr); break;  			case Code.Shr:		Emulate_Shr(instr); break;  			case Code.Shr_Un:	Emulate_Shr_Un(instr); break;  			case Code.Ceq:		Emulate_Ceq(instr); break;  			case Code.Cgt:		Emulate_Cgt(instr); break;  			case Code.Cgt_Un:	Emulate_Cgt_Un(instr); break;  			case Code.Clt:		Emulate_Clt(instr); break;  			case Code.Clt_Un:	Emulate_Clt_Un(instr); break;  			case Code.Unbox_Any:Emulate_Unbox_Any(instr); break;    			case Code.Call:		Emulate_Call(instr); break;  			case Code.Callvirt:	Emulate_Callvirt(instr); break;    			case Code.Castclass: Emulate_Castclass(instr); break;  			case Code.Isinst:	Emulate_Isinst(instr); break;    			case Code.Add_Ovf:	Emulate_Add_Ovf(instr); break;  			case Code.Add_Ovf_Un: Emulate_Add_Ovf_Un(instr); break;  			case Code.Sub_Ovf:	Emulate_Sub_Ovf(instr); break;  			case Code.Sub_Ovf_Un: Emulate_Sub_Ovf_Un(instr); break;  			case Code.Mul_Ovf:	Emulate_Mul_Ovf(instr); break;  			case Code.Mul_Ovf_Un: Emulate_Mul_Ovf_Un(instr); break;    			case Code.Conv_Ovf_I1:		Emulate_Conv_Ovf_I1(instr); break;  			case Code.Conv_Ovf_I1_Un:	Emulate_Conv_Ovf_I1_Un(instr); break;  			case Code.Conv_Ovf_I2:		Emulate_Conv_Ovf_I2(instr); break;  			case Code.Conv_Ovf_I2_Un:	Emulate_Conv_Ovf_I2_Un(instr); break;  			case Code.Conv_Ovf_I4:		Emulate_Conv_Ovf_I4(instr); break;  			case Code.Conv_Ovf_I4_Un:	Emulate_Conv_Ovf_I4_Un(instr); break;  			case Code.Conv_Ovf_I8:		Emulate_Conv_Ovf_I8(instr); break;  			case Code.Conv_Ovf_I8_Un:	Emulate_Conv_Ovf_I8_Un(instr); break;  			case Code.Conv_Ovf_U1:		Emulate_Conv_Ovf_U1(instr); break;  			case Code.Conv_Ovf_U1_Un:	Emulate_Conv_Ovf_U1_Un(instr); break;  			case Code.Conv_Ovf_U2:		Emulate_Conv_Ovf_U2(instr); break;  			case Code.Conv_Ovf_U2_Un:	Emulate_Conv_Ovf_U2_Un(instr); break;  			case Code.Conv_Ovf_U4:		Emulate_Conv_Ovf_U4(instr); break;  			case Code.Conv_Ovf_U4_Un:	Emulate_Conv_Ovf_U4_Un(instr); break;  			case Code.Conv_Ovf_U8:		Emulate_Conv_Ovf_U8(instr); break;  			case Code.Conv_Ovf_U8_Un:	Emulate_Conv_Ovf_U8_Un(instr); break;    			case Code.Ldelem_I1: valueStack.Pop(2); valueStack.Push(Int32Value.CreateUnknown()); break;  			case Code.Ldelem_I2: valueStack.Pop(2); valueStack.Push(Int32Value.CreateUnknown()); break;  			case Code.Ldelem_I4: valueStack.Pop(2); valueStack.Push(Int32Value.CreateUnknown()); break;  			case Code.Ldelem_I8: valueStack.Pop(2); valueStack.Push(Int64Value.CreateUnknown()); break;  			case Code.Ldelem_U1: valueStack.Pop(2); valueStack.Push(Int32Value.CreateUnknownUInt8()); break;  			case Code.Ldelem_U2: valueStack.Pop(2); valueStack.Push(Int32Value.CreateUnknownUInt16()); break;  			case Code.Ldelem_U4: valueStack.Pop(2); valueStack.Push(Int32Value.CreateUnknown()); break;  			case Code.Ldelem:	 valueStack.Pop(2); valueStack.Push(GetUnknownValue(instr.Operand as ITypeDefOrRef)); break;    			case Code.Ldind_I1:	valueStack.Pop(); valueStack.Push(Int32Value.CreateUnknown()); break;  			case Code.Ldind_I2:	valueStack.Pop(); valueStack.Push(Int32Value.CreateUnknown()); break;  			case Code.Ldind_I4:	valueStack.Pop(); valueStack.Push(Int32Value.CreateUnknown()); break;  			case Code.Ldind_I8:	valueStack.Pop(); valueStack.Push(Int64Value.CreateUnknown()); break;  			case Code.Ldind_U1:	valueStack.Pop(); valueStack.Push(Int32Value.CreateUnknownUInt8()); break;  			case Code.Ldind_U2:	valueStack.Pop(); valueStack.Push(Int32Value.CreateUnknownUInt16()); break;  			case Code.Ldind_U4:	valueStack.Pop(); valueStack.Push(Int32Value.CreateUnknown()); break;    			case Code.Ldlen:	valueStack.Pop(); valueStack.Push(Int32Value.CreateUnknown()); break;  			case Code.Sizeof:	valueStack.Push(Int32Value.CreateUnknown()); break;    			case Code.Ldfld:	Emulate_Ldfld(instr); break;  			case Code.Ldsfld:	Emulate_Ldsfld(instr); break;    			case Code.Ldftn:	valueStack.Push(new ObjectValue(instr.Operand)); break;  			case Code.Ldsflda:	valueStack.Push(new ObjectValue(instr.Operand)); break;  			case Code.Ldtoken:	valueStack.Push(new ObjectValue(instr.Operand)); break;  			case Code.Ldvirtftn:valueStack.Pop(); valueStack.Push(new ObjectValue()); break;  			case Code.Ldflda:	valueStack.Pop(); valueStack.Push(new ObjectValue()); break;    			case Code.Unbox:    			case Code.Conv_R_Un:Emulate_Conv_R_Un(instr); break;  			case Code.Conv_R4:	Emulate_Conv_R4(instr); break;  			case Code.Conv_R8:	Emulate_Conv_R8(instr); break;    			case Code.Arglist:  			case Code.Beq:  			case Code.Beq_S:  			case Code.Bge:  			case Code.Bge_S:  			case Code.Bge_Un:  			case Code.Bge_Un_S:  			case Code.Bgt:  			case Code.Bgt_S:  			case Code.Bgt_Un:  			case Code.Bgt_Un_S:  			case Code.Ble:  			case Code.Ble_S:  			case Code.Ble_Un:  			case Code.Ble_Un_S:  			case Code.Blt:  			case Code.Blt_S:  			case Code.Blt_Un:  			case Code.Blt_Un_S:  			case Code.Bne_Un:  			case Code.Bne_Un_S:  			case Code.Brfalse:  			case Code.Brfalse_S:  			case Code.Brtrue:  			case Code.Brtrue_S:  			case Code.Br:  			case Code.Br_S:  			case Code.Break:  			case Code.Calli:  			case Code.Ckfinite:  			case Code.Constrained:  			case Code.Conv_I:  			case Code.Conv_Ovf_I:  			case Code.Conv_Ovf_I_Un:  			case Code.Conv_Ovf_U:  			case Code.Conv_Ovf_U_Un:  			case Code.Conv_U:  			case Code.Cpblk:  			case Code.Cpobj:  			case Code.Endfilter:  			case Code.Endfinally:  			case Code.Initblk:  			case Code.Initobj:  			case Code.Jmp:  			case Code.Ldelema:  			case Code.Ldelem_I:  			case Code.Ldelem_R4:  			case Code.Ldelem_R8:  			case Code.Ldelem_Ref:  			case Code.Ldind_I:  			case Code.Ldind_R4:  			case Code.Ldind_R8:  			case Code.Ldind_Ref:  			case Code.Ldobj:  			case Code.Leave:  			case Code.Leave_S:  			case Code.Localloc:  			case Code.Mkrefany:  			case Code.Newarr:  			case Code.Newobj:  			case Code.Nop:  			case Code.Pop:  			case Code.Readonly:  			case Code.Refanytype:  			case Code.Refanyval:  			case Code.Ret:  			case Code.Rethrow:  			case Code.Stelem:  			case Code.Stelem_I:  			case Code.Stelem_I1:  			case Code.Stelem_I2:  			case Code.Stelem_I4:  			case Code.Stelem_I8:  			case Code.Stelem_R4:  			case Code.Stelem_R8:  			case Code.Stelem_Ref:  			case Code.Stfld:  			case Code.Stind_I:  			case Code.Stind_I1:  			case Code.Stind_I2:  			case Code.Stind_I4:  			case Code.Stind_I8:  			case Code.Stind_R4:  			case Code.Stind_R8:  			case Code.Stind_Ref:  			case Code.Stobj:  			case Code.Stsfld:  			case Code.Switch:  			case Code.Tailcall:  			case Code.Throw:  			case Code.Unaligned:  			case Code.Volatile:  			default:  				UpdateStack(instr);  				break;  			}
Magic Number,de4dot.blocks.cflow,InstructionEmulator,C:\repos\0xd4d_de4dot\de4dot.blocks\cflow\InstructionEmulator.cs,Emulate,The following statement contains a magic number: switch (instr.OpCode.Code) {  			case Code.Starg:  			case Code.Starg_S:	Emulate_Starg((Parameter)instr.Operand); break;  			case Code.Stloc:  			case Code.Stloc_S:	Emulate_Stloc((Local)instr.Operand); break;  			case Code.Stloc_0:	Emulate_Stloc(0); break;  			case Code.Stloc_1:	Emulate_Stloc(1); break;  			case Code.Stloc_2:	Emulate_Stloc(2); break;  			case Code.Stloc_3:	Emulate_Stloc(3); break;    			case Code.Ldarg:  			case Code.Ldarg_S:	valueStack.Push(GetArg((Parameter)instr.Operand)); break;  			case Code.Ldarg_0:	valueStack.Push(GetArg(0)); break;  			case Code.Ldarg_1:	valueStack.Push(GetArg(1)); break;  			case Code.Ldarg_2:	valueStack.Push(GetArg(2)); break;  			case Code.Ldarg_3:	valueStack.Push(GetArg(3)); break;  			case Code.Ldloc:  			case Code.Ldloc_S:	valueStack.Push(GetLocal((Local)instr.Operand)); break;  			case Code.Ldloc_0:	valueStack.Push(GetLocal(0)); break;  			case Code.Ldloc_1:	valueStack.Push(GetLocal(1)); break;  			case Code.Ldloc_2:	valueStack.Push(GetLocal(2)); break;  			case Code.Ldloc_3:	valueStack.Push(GetLocal(3)); break;    			case Code.Ldarga:  			case Code.Ldarga_S:	Emulate_Ldarga((Parameter)instr.Operand); break;  			case Code.Ldloca:  			case Code.Ldloca_S:	Emulate_Ldloca((Local)instr.Operand); break;    			case Code.Dup:		valueStack.CopyTop(); break;    			case Code.Ldc_I4:	valueStack.Push(new Int32Value((int)instr.Operand)); break;  			case Code.Ldc_I4_S:	valueStack.Push(new Int32Value((sbyte)instr.Operand)); break;  			case Code.Ldc_I8:	valueStack.Push(new Int64Value((long)instr.Operand)); break;  			case Code.Ldc_R4:	valueStack.Push(new Real8Value((float)instr.Operand)); break;  			case Code.Ldc_R8:	valueStack.Push(new Real8Value((double)instr.Operand)); break;  			case Code.Ldc_I4_0:	valueStack.Push(Int32Value.Zero); break;  			case Code.Ldc_I4_1:	valueStack.Push(Int32Value.One); break;  			case Code.Ldc_I4_2:	valueStack.Push(new Int32Value(2)); break;  			case Code.Ldc_I4_3:	valueStack.Push(new Int32Value(3)); break;  			case Code.Ldc_I4_4:	valueStack.Push(new Int32Value(4)); break;  			case Code.Ldc_I4_5:	valueStack.Push(new Int32Value(5)); break;  			case Code.Ldc_I4_6:	valueStack.Push(new Int32Value(6)); break;  			case Code.Ldc_I4_7:	valueStack.Push(new Int32Value(7)); break;  			case Code.Ldc_I4_8:	valueStack.Push(new Int32Value(8)); break;  			case Code.Ldc_I4_M1:valueStack.Push(new Int32Value(-1)); break;  			case Code.Ldnull:	valueStack.Push(NullValue.Instance); break;  			case Code.Ldstr:	valueStack.Push(new StringValue((string)instr.Operand)); break;  			case Code.Box:		valueStack.Push(new BoxedValue(valueStack.Pop())); break;    			case Code.Conv_U1:	Emulate_Conv_U1(instr); break;  			case Code.Conv_U2:	Emulate_Conv_U2(instr); break;  			case Code.Conv_U4:	Emulate_Conv_U4(instr); break;  			case Code.Conv_U8:	Emulate_Conv_U8(instr); break;  			case Code.Conv_I1:	Emulate_Conv_I1(instr); break;  			case Code.Conv_I2:	Emulate_Conv_I2(instr); break;  			case Code.Conv_I4:	Emulate_Conv_I4(instr); break;  			case Code.Conv_I8:	Emulate_Conv_I8(instr); break;  			case Code.Add:		Emulate_Add(instr); break;  			case Code.Sub:		Emulate_Sub(instr); break;  			case Code.Mul:		Emulate_Mul(instr); break;  			case Code.Div:		Emulate_Div(instr); break;  			case Code.Div_Un:	Emulate_Div_Un(instr); break;  			case Code.Rem:		Emulate_Rem(instr); break;  			case Code.Rem_Un:	Emulate_Rem_Un(instr); break;  			case Code.Neg:		Emulate_Neg(instr); break;  			case Code.And:		Emulate_And(instr); break;  			case Code.Or:		Emulate_Or(instr); break;  			case Code.Xor:		Emulate_Xor(instr); break;  			case Code.Not:		Emulate_Not(instr); break;  			case Code.Shl:		Emulate_Shl(instr); break;  			case Code.Shr:		Emulate_Shr(instr); break;  			case Code.Shr_Un:	Emulate_Shr_Un(instr); break;  			case Code.Ceq:		Emulate_Ceq(instr); break;  			case Code.Cgt:		Emulate_Cgt(instr); break;  			case Code.Cgt_Un:	Emulate_Cgt_Un(instr); break;  			case Code.Clt:		Emulate_Clt(instr); break;  			case Code.Clt_Un:	Emulate_Clt_Un(instr); break;  			case Code.Unbox_Any:Emulate_Unbox_Any(instr); break;    			case Code.Call:		Emulate_Call(instr); break;  			case Code.Callvirt:	Emulate_Callvirt(instr); break;    			case Code.Castclass: Emulate_Castclass(instr); break;  			case Code.Isinst:	Emulate_Isinst(instr); break;    			case Code.Add_Ovf:	Emulate_Add_Ovf(instr); break;  			case Code.Add_Ovf_Un: Emulate_Add_Ovf_Un(instr); break;  			case Code.Sub_Ovf:	Emulate_Sub_Ovf(instr); break;  			case Code.Sub_Ovf_Un: Emulate_Sub_Ovf_Un(instr); break;  			case Code.Mul_Ovf:	Emulate_Mul_Ovf(instr); break;  			case Code.Mul_Ovf_Un: Emulate_Mul_Ovf_Un(instr); break;    			case Code.Conv_Ovf_I1:		Emulate_Conv_Ovf_I1(instr); break;  			case Code.Conv_Ovf_I1_Un:	Emulate_Conv_Ovf_I1_Un(instr); break;  			case Code.Conv_Ovf_I2:		Emulate_Conv_Ovf_I2(instr); break;  			case Code.Conv_Ovf_I2_Un:	Emulate_Conv_Ovf_I2_Un(instr); break;  			case Code.Conv_Ovf_I4:		Emulate_Conv_Ovf_I4(instr); break;  			case Code.Conv_Ovf_I4_Un:	Emulate_Conv_Ovf_I4_Un(instr); break;  			case Code.Conv_Ovf_I8:		Emulate_Conv_Ovf_I8(instr); break;  			case Code.Conv_Ovf_I8_Un:	Emulate_Conv_Ovf_I8_Un(instr); break;  			case Code.Conv_Ovf_U1:		Emulate_Conv_Ovf_U1(instr); break;  			case Code.Conv_Ovf_U1_Un:	Emulate_Conv_Ovf_U1_Un(instr); break;  			case Code.Conv_Ovf_U2:		Emulate_Conv_Ovf_U2(instr); break;  			case Code.Conv_Ovf_U2_Un:	Emulate_Conv_Ovf_U2_Un(instr); break;  			case Code.Conv_Ovf_U4:		Emulate_Conv_Ovf_U4(instr); break;  			case Code.Conv_Ovf_U4_Un:	Emulate_Conv_Ovf_U4_Un(instr); break;  			case Code.Conv_Ovf_U8:		Emulate_Conv_Ovf_U8(instr); break;  			case Code.Conv_Ovf_U8_Un:	Emulate_Conv_Ovf_U8_Un(instr); break;    			case Code.Ldelem_I1: valueStack.Pop(2); valueStack.Push(Int32Value.CreateUnknown()); break;  			case Code.Ldelem_I2: valueStack.Pop(2); valueStack.Push(Int32Value.CreateUnknown()); break;  			case Code.Ldelem_I4: valueStack.Pop(2); valueStack.Push(Int32Value.CreateUnknown()); break;  			case Code.Ldelem_I8: valueStack.Pop(2); valueStack.Push(Int64Value.CreateUnknown()); break;  			case Code.Ldelem_U1: valueStack.Pop(2); valueStack.Push(Int32Value.CreateUnknownUInt8()); break;  			case Code.Ldelem_U2: valueStack.Pop(2); valueStack.Push(Int32Value.CreateUnknownUInt16()); break;  			case Code.Ldelem_U4: valueStack.Pop(2); valueStack.Push(Int32Value.CreateUnknown()); break;  			case Code.Ldelem:	 valueStack.Pop(2); valueStack.Push(GetUnknownValue(instr.Operand as ITypeDefOrRef)); break;    			case Code.Ldind_I1:	valueStack.Pop(); valueStack.Push(Int32Value.CreateUnknown()); break;  			case Code.Ldind_I2:	valueStack.Pop(); valueStack.Push(Int32Value.CreateUnknown()); break;  			case Code.Ldind_I4:	valueStack.Pop(); valueStack.Push(Int32Value.CreateUnknown()); break;  			case Code.Ldind_I8:	valueStack.Pop(); valueStack.Push(Int64Value.CreateUnknown()); break;  			case Code.Ldind_U1:	valueStack.Pop(); valueStack.Push(Int32Value.CreateUnknownUInt8()); break;  			case Code.Ldind_U2:	valueStack.Pop(); valueStack.Push(Int32Value.CreateUnknownUInt16()); break;  			case Code.Ldind_U4:	valueStack.Pop(); valueStack.Push(Int32Value.CreateUnknown()); break;    			case Code.Ldlen:	valueStack.Pop(); valueStack.Push(Int32Value.CreateUnknown()); break;  			case Code.Sizeof:	valueStack.Push(Int32Value.CreateUnknown()); break;    			case Code.Ldfld:	Emulate_Ldfld(instr); break;  			case Code.Ldsfld:	Emulate_Ldsfld(instr); break;    			case Code.Ldftn:	valueStack.Push(new ObjectValue(instr.Operand)); break;  			case Code.Ldsflda:	valueStack.Push(new ObjectValue(instr.Operand)); break;  			case Code.Ldtoken:	valueStack.Push(new ObjectValue(instr.Operand)); break;  			case Code.Ldvirtftn:valueStack.Pop(); valueStack.Push(new ObjectValue()); break;  			case Code.Ldflda:	valueStack.Pop(); valueStack.Push(new ObjectValue()); break;    			case Code.Unbox:    			case Code.Conv_R_Un:Emulate_Conv_R_Un(instr); break;  			case Code.Conv_R4:	Emulate_Conv_R4(instr); break;  			case Code.Conv_R8:	Emulate_Conv_R8(instr); break;    			case Code.Arglist:  			case Code.Beq:  			case Code.Beq_S:  			case Code.Bge:  			case Code.Bge_S:  			case Code.Bge_Un:  			case Code.Bge_Un_S:  			case Code.Bgt:  			case Code.Bgt_S:  			case Code.Bgt_Un:  			case Code.Bgt_Un_S:  			case Code.Ble:  			case Code.Ble_S:  			case Code.Ble_Un:  			case Code.Ble_Un_S:  			case Code.Blt:  			case Code.Blt_S:  			case Code.Blt_Un:  			case Code.Blt_Un_S:  			case Code.Bne_Un:  			case Code.Bne_Un_S:  			case Code.Brfalse:  			case Code.Brfalse_S:  			case Code.Brtrue:  			case Code.Brtrue_S:  			case Code.Br:  			case Code.Br_S:  			case Code.Break:  			case Code.Calli:  			case Code.Ckfinite:  			case Code.Constrained:  			case Code.Conv_I:  			case Code.Conv_Ovf_I:  			case Code.Conv_Ovf_I_Un:  			case Code.Conv_Ovf_U:  			case Code.Conv_Ovf_U_Un:  			case Code.Conv_U:  			case Code.Cpblk:  			case Code.Cpobj:  			case Code.Endfilter:  			case Code.Endfinally:  			case Code.Initblk:  			case Code.Initobj:  			case Code.Jmp:  			case Code.Ldelema:  			case Code.Ldelem_I:  			case Code.Ldelem_R4:  			case Code.Ldelem_R8:  			case Code.Ldelem_Ref:  			case Code.Ldind_I:  			case Code.Ldind_R4:  			case Code.Ldind_R8:  			case Code.Ldind_Ref:  			case Code.Ldobj:  			case Code.Leave:  			case Code.Leave_S:  			case Code.Localloc:  			case Code.Mkrefany:  			case Code.Newarr:  			case Code.Newobj:  			case Code.Nop:  			case Code.Pop:  			case Code.Readonly:  			case Code.Refanytype:  			case Code.Refanyval:  			case Code.Ret:  			case Code.Rethrow:  			case Code.Stelem:  			case Code.Stelem_I:  			case Code.Stelem_I1:  			case Code.Stelem_I2:  			case Code.Stelem_I4:  			case Code.Stelem_I8:  			case Code.Stelem_R4:  			case Code.Stelem_R8:  			case Code.Stelem_Ref:  			case Code.Stfld:  			case Code.Stind_I:  			case Code.Stind_I1:  			case Code.Stind_I2:  			case Code.Stind_I4:  			case Code.Stind_I8:  			case Code.Stind_R4:  			case Code.Stind_R8:  			case Code.Stind_Ref:  			case Code.Stobj:  			case Code.Stsfld:  			case Code.Switch:  			case Code.Tailcall:  			case Code.Throw:  			case Code.Unaligned:  			case Code.Volatile:  			default:  				UpdateStack(instr);  				break;  			}
Magic Number,de4dot.blocks.cflow,InstructionEmulator,C:\repos\0xd4d_de4dot\de4dot.blocks\cflow\InstructionEmulator.cs,Emulate,The following statement contains a magic number: switch (instr.OpCode.Code) {  			case Code.Starg:  			case Code.Starg_S:	Emulate_Starg((Parameter)instr.Operand); break;  			case Code.Stloc:  			case Code.Stloc_S:	Emulate_Stloc((Local)instr.Operand); break;  			case Code.Stloc_0:	Emulate_Stloc(0); break;  			case Code.Stloc_1:	Emulate_Stloc(1); break;  			case Code.Stloc_2:	Emulate_Stloc(2); break;  			case Code.Stloc_3:	Emulate_Stloc(3); break;    			case Code.Ldarg:  			case Code.Ldarg_S:	valueStack.Push(GetArg((Parameter)instr.Operand)); break;  			case Code.Ldarg_0:	valueStack.Push(GetArg(0)); break;  			case Code.Ldarg_1:	valueStack.Push(GetArg(1)); break;  			case Code.Ldarg_2:	valueStack.Push(GetArg(2)); break;  			case Code.Ldarg_3:	valueStack.Push(GetArg(3)); break;  			case Code.Ldloc:  			case Code.Ldloc_S:	valueStack.Push(GetLocal((Local)instr.Operand)); break;  			case Code.Ldloc_0:	valueStack.Push(GetLocal(0)); break;  			case Code.Ldloc_1:	valueStack.Push(GetLocal(1)); break;  			case Code.Ldloc_2:	valueStack.Push(GetLocal(2)); break;  			case Code.Ldloc_3:	valueStack.Push(GetLocal(3)); break;    			case Code.Ldarga:  			case Code.Ldarga_S:	Emulate_Ldarga((Parameter)instr.Operand); break;  			case Code.Ldloca:  			case Code.Ldloca_S:	Emulate_Ldloca((Local)instr.Operand); break;    			case Code.Dup:		valueStack.CopyTop(); break;    			case Code.Ldc_I4:	valueStack.Push(new Int32Value((int)instr.Operand)); break;  			case Code.Ldc_I4_S:	valueStack.Push(new Int32Value((sbyte)instr.Operand)); break;  			case Code.Ldc_I8:	valueStack.Push(new Int64Value((long)instr.Operand)); break;  			case Code.Ldc_R4:	valueStack.Push(new Real8Value((float)instr.Operand)); break;  			case Code.Ldc_R8:	valueStack.Push(new Real8Value((double)instr.Operand)); break;  			case Code.Ldc_I4_0:	valueStack.Push(Int32Value.Zero); break;  			case Code.Ldc_I4_1:	valueStack.Push(Int32Value.One); break;  			case Code.Ldc_I4_2:	valueStack.Push(new Int32Value(2)); break;  			case Code.Ldc_I4_3:	valueStack.Push(new Int32Value(3)); break;  			case Code.Ldc_I4_4:	valueStack.Push(new Int32Value(4)); break;  			case Code.Ldc_I4_5:	valueStack.Push(new Int32Value(5)); break;  			case Code.Ldc_I4_6:	valueStack.Push(new Int32Value(6)); break;  			case Code.Ldc_I4_7:	valueStack.Push(new Int32Value(7)); break;  			case Code.Ldc_I4_8:	valueStack.Push(new Int32Value(8)); break;  			case Code.Ldc_I4_M1:valueStack.Push(new Int32Value(-1)); break;  			case Code.Ldnull:	valueStack.Push(NullValue.Instance); break;  			case Code.Ldstr:	valueStack.Push(new StringValue((string)instr.Operand)); break;  			case Code.Box:		valueStack.Push(new BoxedValue(valueStack.Pop())); break;    			case Code.Conv_U1:	Emulate_Conv_U1(instr); break;  			case Code.Conv_U2:	Emulate_Conv_U2(instr); break;  			case Code.Conv_U4:	Emulate_Conv_U4(instr); break;  			case Code.Conv_U8:	Emulate_Conv_U8(instr); break;  			case Code.Conv_I1:	Emulate_Conv_I1(instr); break;  			case Code.Conv_I2:	Emulate_Conv_I2(instr); break;  			case Code.Conv_I4:	Emulate_Conv_I4(instr); break;  			case Code.Conv_I8:	Emulate_Conv_I8(instr); break;  			case Code.Add:		Emulate_Add(instr); break;  			case Code.Sub:		Emulate_Sub(instr); break;  			case Code.Mul:		Emulate_Mul(instr); break;  			case Code.Div:		Emulate_Div(instr); break;  			case Code.Div_Un:	Emulate_Div_Un(instr); break;  			case Code.Rem:		Emulate_Rem(instr); break;  			case Code.Rem_Un:	Emulate_Rem_Un(instr); break;  			case Code.Neg:		Emulate_Neg(instr); break;  			case Code.And:		Emulate_And(instr); break;  			case Code.Or:		Emulate_Or(instr); break;  			case Code.Xor:		Emulate_Xor(instr); break;  			case Code.Not:		Emulate_Not(instr); break;  			case Code.Shl:		Emulate_Shl(instr); break;  			case Code.Shr:		Emulate_Shr(instr); break;  			case Code.Shr_Un:	Emulate_Shr_Un(instr); break;  			case Code.Ceq:		Emulate_Ceq(instr); break;  			case Code.Cgt:		Emulate_Cgt(instr); break;  			case Code.Cgt_Un:	Emulate_Cgt_Un(instr); break;  			case Code.Clt:		Emulate_Clt(instr); break;  			case Code.Clt_Un:	Emulate_Clt_Un(instr); break;  			case Code.Unbox_Any:Emulate_Unbox_Any(instr); break;    			case Code.Call:		Emulate_Call(instr); break;  			case Code.Callvirt:	Emulate_Callvirt(instr); break;    			case Code.Castclass: Emulate_Castclass(instr); break;  			case Code.Isinst:	Emulate_Isinst(instr); break;    			case Code.Add_Ovf:	Emulate_Add_Ovf(instr); break;  			case Code.Add_Ovf_Un: Emulate_Add_Ovf_Un(instr); break;  			case Code.Sub_Ovf:	Emulate_Sub_Ovf(instr); break;  			case Code.Sub_Ovf_Un: Emulate_Sub_Ovf_Un(instr); break;  			case Code.Mul_Ovf:	Emulate_Mul_Ovf(instr); break;  			case Code.Mul_Ovf_Un: Emulate_Mul_Ovf_Un(instr); break;    			case Code.Conv_Ovf_I1:		Emulate_Conv_Ovf_I1(instr); break;  			case Code.Conv_Ovf_I1_Un:	Emulate_Conv_Ovf_I1_Un(instr); break;  			case Code.Conv_Ovf_I2:		Emulate_Conv_Ovf_I2(instr); break;  			case Code.Conv_Ovf_I2_Un:	Emulate_Conv_Ovf_I2_Un(instr); break;  			case Code.Conv_Ovf_I4:		Emulate_Conv_Ovf_I4(instr); break;  			case Code.Conv_Ovf_I4_Un:	Emulate_Conv_Ovf_I4_Un(instr); break;  			case Code.Conv_Ovf_I8:		Emulate_Conv_Ovf_I8(instr); break;  			case Code.Conv_Ovf_I8_Un:	Emulate_Conv_Ovf_I8_Un(instr); break;  			case Code.Conv_Ovf_U1:		Emulate_Conv_Ovf_U1(instr); break;  			case Code.Conv_Ovf_U1_Un:	Emulate_Conv_Ovf_U1_Un(instr); break;  			case Code.Conv_Ovf_U2:		Emulate_Conv_Ovf_U2(instr); break;  			case Code.Conv_Ovf_U2_Un:	Emulate_Conv_Ovf_U2_Un(instr); break;  			case Code.Conv_Ovf_U4:		Emulate_Conv_Ovf_U4(instr); break;  			case Code.Conv_Ovf_U4_Un:	Emulate_Conv_Ovf_U4_Un(instr); break;  			case Code.Conv_Ovf_U8:		Emulate_Conv_Ovf_U8(instr); break;  			case Code.Conv_Ovf_U8_Un:	Emulate_Conv_Ovf_U8_Un(instr); break;    			case Code.Ldelem_I1: valueStack.Pop(2); valueStack.Push(Int32Value.CreateUnknown()); break;  			case Code.Ldelem_I2: valueStack.Pop(2); valueStack.Push(Int32Value.CreateUnknown()); break;  			case Code.Ldelem_I4: valueStack.Pop(2); valueStack.Push(Int32Value.CreateUnknown()); break;  			case Code.Ldelem_I8: valueStack.Pop(2); valueStack.Push(Int64Value.CreateUnknown()); break;  			case Code.Ldelem_U1: valueStack.Pop(2); valueStack.Push(Int32Value.CreateUnknownUInt8()); break;  			case Code.Ldelem_U2: valueStack.Pop(2); valueStack.Push(Int32Value.CreateUnknownUInt16()); break;  			case Code.Ldelem_U4: valueStack.Pop(2); valueStack.Push(Int32Value.CreateUnknown()); break;  			case Code.Ldelem:	 valueStack.Pop(2); valueStack.Push(GetUnknownValue(instr.Operand as ITypeDefOrRef)); break;    			case Code.Ldind_I1:	valueStack.Pop(); valueStack.Push(Int32Value.CreateUnknown()); break;  			case Code.Ldind_I2:	valueStack.Pop(); valueStack.Push(Int32Value.CreateUnknown()); break;  			case Code.Ldind_I4:	valueStack.Pop(); valueStack.Push(Int32Value.CreateUnknown()); break;  			case Code.Ldind_I8:	valueStack.Pop(); valueStack.Push(Int64Value.CreateUnknown()); break;  			case Code.Ldind_U1:	valueStack.Pop(); valueStack.Push(Int32Value.CreateUnknownUInt8()); break;  			case Code.Ldind_U2:	valueStack.Pop(); valueStack.Push(Int32Value.CreateUnknownUInt16()); break;  			case Code.Ldind_U4:	valueStack.Pop(); valueStack.Push(Int32Value.CreateUnknown()); break;    			case Code.Ldlen:	valueStack.Pop(); valueStack.Push(Int32Value.CreateUnknown()); break;  			case Code.Sizeof:	valueStack.Push(Int32Value.CreateUnknown()); break;    			case Code.Ldfld:	Emulate_Ldfld(instr); break;  			case Code.Ldsfld:	Emulate_Ldsfld(instr); break;    			case Code.Ldftn:	valueStack.Push(new ObjectValue(instr.Operand)); break;  			case Code.Ldsflda:	valueStack.Push(new ObjectValue(instr.Operand)); break;  			case Code.Ldtoken:	valueStack.Push(new ObjectValue(instr.Operand)); break;  			case Code.Ldvirtftn:valueStack.Pop(); valueStack.Push(new ObjectValue()); break;  			case Code.Ldflda:	valueStack.Pop(); valueStack.Push(new ObjectValue()); break;    			case Code.Unbox:    			case Code.Conv_R_Un:Emulate_Conv_R_Un(instr); break;  			case Code.Conv_R4:	Emulate_Conv_R4(instr); break;  			case Code.Conv_R8:	Emulate_Conv_R8(instr); break;    			case Code.Arglist:  			case Code.Beq:  			case Code.Beq_S:  			case Code.Bge:  			case Code.Bge_S:  			case Code.Bge_Un:  			case Code.Bge_Un_S:  			case Code.Bgt:  			case Code.Bgt_S:  			case Code.Bgt_Un:  			case Code.Bgt_Un_S:  			case Code.Ble:  			case Code.Ble_S:  			case Code.Ble_Un:  			case Code.Ble_Un_S:  			case Code.Blt:  			case Code.Blt_S:  			case Code.Blt_Un:  			case Code.Blt_Un_S:  			case Code.Bne_Un:  			case Code.Bne_Un_S:  			case Code.Brfalse:  			case Code.Brfalse_S:  			case Code.Brtrue:  			case Code.Brtrue_S:  			case Code.Br:  			case Code.Br_S:  			case Code.Break:  			case Code.Calli:  			case Code.Ckfinite:  			case Code.Constrained:  			case Code.Conv_I:  			case Code.Conv_Ovf_I:  			case Code.Conv_Ovf_I_Un:  			case Code.Conv_Ovf_U:  			case Code.Conv_Ovf_U_Un:  			case Code.Conv_U:  			case Code.Cpblk:  			case Code.Cpobj:  			case Code.Endfilter:  			case Code.Endfinally:  			case Code.Initblk:  			case Code.Initobj:  			case Code.Jmp:  			case Code.Ldelema:  			case Code.Ldelem_I:  			case Code.Ldelem_R4:  			case Code.Ldelem_R8:  			case Code.Ldelem_Ref:  			case Code.Ldind_I:  			case Code.Ldind_R4:  			case Code.Ldind_R8:  			case Code.Ldind_Ref:  			case Code.Ldobj:  			case Code.Leave:  			case Code.Leave_S:  			case Code.Localloc:  			case Code.Mkrefany:  			case Code.Newarr:  			case Code.Newobj:  			case Code.Nop:  			case Code.Pop:  			case Code.Readonly:  			case Code.Refanytype:  			case Code.Refanyval:  			case Code.Ret:  			case Code.Rethrow:  			case Code.Stelem:  			case Code.Stelem_I:  			case Code.Stelem_I1:  			case Code.Stelem_I2:  			case Code.Stelem_I4:  			case Code.Stelem_I8:  			case Code.Stelem_R4:  			case Code.Stelem_R8:  			case Code.Stelem_Ref:  			case Code.Stfld:  			case Code.Stind_I:  			case Code.Stind_I1:  			case Code.Stind_I2:  			case Code.Stind_I4:  			case Code.Stind_I8:  			case Code.Stind_R4:  			case Code.Stind_R8:  			case Code.Stind_Ref:  			case Code.Stobj:  			case Code.Stsfld:  			case Code.Switch:  			case Code.Tailcall:  			case Code.Throw:  			case Code.Unaligned:  			case Code.Volatile:  			default:  				UpdateStack(instr);  				break;  			}
Magic Number,de4dot.blocks.cflow,InstructionEmulator,C:\repos\0xd4d_de4dot\de4dot.blocks\cflow\InstructionEmulator.cs,Emulate,The following statement contains a magic number: switch (instr.OpCode.Code) {  			case Code.Starg:  			case Code.Starg_S:	Emulate_Starg((Parameter)instr.Operand); break;  			case Code.Stloc:  			case Code.Stloc_S:	Emulate_Stloc((Local)instr.Operand); break;  			case Code.Stloc_0:	Emulate_Stloc(0); break;  			case Code.Stloc_1:	Emulate_Stloc(1); break;  			case Code.Stloc_2:	Emulate_Stloc(2); break;  			case Code.Stloc_3:	Emulate_Stloc(3); break;    			case Code.Ldarg:  			case Code.Ldarg_S:	valueStack.Push(GetArg((Parameter)instr.Operand)); break;  			case Code.Ldarg_0:	valueStack.Push(GetArg(0)); break;  			case Code.Ldarg_1:	valueStack.Push(GetArg(1)); break;  			case Code.Ldarg_2:	valueStack.Push(GetArg(2)); break;  			case Code.Ldarg_3:	valueStack.Push(GetArg(3)); break;  			case Code.Ldloc:  			case Code.Ldloc_S:	valueStack.Push(GetLocal((Local)instr.Operand)); break;  			case Code.Ldloc_0:	valueStack.Push(GetLocal(0)); break;  			case Code.Ldloc_1:	valueStack.Push(GetLocal(1)); break;  			case Code.Ldloc_2:	valueStack.Push(GetLocal(2)); break;  			case Code.Ldloc_3:	valueStack.Push(GetLocal(3)); break;    			case Code.Ldarga:  			case Code.Ldarga_S:	Emulate_Ldarga((Parameter)instr.Operand); break;  			case Code.Ldloca:  			case Code.Ldloca_S:	Emulate_Ldloca((Local)instr.Operand); break;    			case Code.Dup:		valueStack.CopyTop(); break;    			case Code.Ldc_I4:	valueStack.Push(new Int32Value((int)instr.Operand)); break;  			case Code.Ldc_I4_S:	valueStack.Push(new Int32Value((sbyte)instr.Operand)); break;  			case Code.Ldc_I8:	valueStack.Push(new Int64Value((long)instr.Operand)); break;  			case Code.Ldc_R4:	valueStack.Push(new Real8Value((float)instr.Operand)); break;  			case Code.Ldc_R8:	valueStack.Push(new Real8Value((double)instr.Operand)); break;  			case Code.Ldc_I4_0:	valueStack.Push(Int32Value.Zero); break;  			case Code.Ldc_I4_1:	valueStack.Push(Int32Value.One); break;  			case Code.Ldc_I4_2:	valueStack.Push(new Int32Value(2)); break;  			case Code.Ldc_I4_3:	valueStack.Push(new Int32Value(3)); break;  			case Code.Ldc_I4_4:	valueStack.Push(new Int32Value(4)); break;  			case Code.Ldc_I4_5:	valueStack.Push(new Int32Value(5)); break;  			case Code.Ldc_I4_6:	valueStack.Push(new Int32Value(6)); break;  			case Code.Ldc_I4_7:	valueStack.Push(new Int32Value(7)); break;  			case Code.Ldc_I4_8:	valueStack.Push(new Int32Value(8)); break;  			case Code.Ldc_I4_M1:valueStack.Push(new Int32Value(-1)); break;  			case Code.Ldnull:	valueStack.Push(NullValue.Instance); break;  			case Code.Ldstr:	valueStack.Push(new StringValue((string)instr.Operand)); break;  			case Code.Box:		valueStack.Push(new BoxedValue(valueStack.Pop())); break;    			case Code.Conv_U1:	Emulate_Conv_U1(instr); break;  			case Code.Conv_U2:	Emulate_Conv_U2(instr); break;  			case Code.Conv_U4:	Emulate_Conv_U4(instr); break;  			case Code.Conv_U8:	Emulate_Conv_U8(instr); break;  			case Code.Conv_I1:	Emulate_Conv_I1(instr); break;  			case Code.Conv_I2:	Emulate_Conv_I2(instr); break;  			case Code.Conv_I4:	Emulate_Conv_I4(instr); break;  			case Code.Conv_I8:	Emulate_Conv_I8(instr); break;  			case Code.Add:		Emulate_Add(instr); break;  			case Code.Sub:		Emulate_Sub(instr); break;  			case Code.Mul:		Emulate_Mul(instr); break;  			case Code.Div:		Emulate_Div(instr); break;  			case Code.Div_Un:	Emulate_Div_Un(instr); break;  			case Code.Rem:		Emulate_Rem(instr); break;  			case Code.Rem_Un:	Emulate_Rem_Un(instr); break;  			case Code.Neg:		Emulate_Neg(instr); break;  			case Code.And:		Emulate_And(instr); break;  			case Code.Or:		Emulate_Or(instr); break;  			case Code.Xor:		Emulate_Xor(instr); break;  			case Code.Not:		Emulate_Not(instr); break;  			case Code.Shl:		Emulate_Shl(instr); break;  			case Code.Shr:		Emulate_Shr(instr); break;  			case Code.Shr_Un:	Emulate_Shr_Un(instr); break;  			case Code.Ceq:		Emulate_Ceq(instr); break;  			case Code.Cgt:		Emulate_Cgt(instr); break;  			case Code.Cgt_Un:	Emulate_Cgt_Un(instr); break;  			case Code.Clt:		Emulate_Clt(instr); break;  			case Code.Clt_Un:	Emulate_Clt_Un(instr); break;  			case Code.Unbox_Any:Emulate_Unbox_Any(instr); break;    			case Code.Call:		Emulate_Call(instr); break;  			case Code.Callvirt:	Emulate_Callvirt(instr); break;    			case Code.Castclass: Emulate_Castclass(instr); break;  			case Code.Isinst:	Emulate_Isinst(instr); break;    			case Code.Add_Ovf:	Emulate_Add_Ovf(instr); break;  			case Code.Add_Ovf_Un: Emulate_Add_Ovf_Un(instr); break;  			case Code.Sub_Ovf:	Emulate_Sub_Ovf(instr); break;  			case Code.Sub_Ovf_Un: Emulate_Sub_Ovf_Un(instr); break;  			case Code.Mul_Ovf:	Emulate_Mul_Ovf(instr); break;  			case Code.Mul_Ovf_Un: Emulate_Mul_Ovf_Un(instr); break;    			case Code.Conv_Ovf_I1:		Emulate_Conv_Ovf_I1(instr); break;  			case Code.Conv_Ovf_I1_Un:	Emulate_Conv_Ovf_I1_Un(instr); break;  			case Code.Conv_Ovf_I2:		Emulate_Conv_Ovf_I2(instr); break;  			case Code.Conv_Ovf_I2_Un:	Emulate_Conv_Ovf_I2_Un(instr); break;  			case Code.Conv_Ovf_I4:		Emulate_Conv_Ovf_I4(instr); break;  			case Code.Conv_Ovf_I4_Un:	Emulate_Conv_Ovf_I4_Un(instr); break;  			case Code.Conv_Ovf_I8:		Emulate_Conv_Ovf_I8(instr); break;  			case Code.Conv_Ovf_I8_Un:	Emulate_Conv_Ovf_I8_Un(instr); break;  			case Code.Conv_Ovf_U1:		Emulate_Conv_Ovf_U1(instr); break;  			case Code.Conv_Ovf_U1_Un:	Emulate_Conv_Ovf_U1_Un(instr); break;  			case Code.Conv_Ovf_U2:		Emulate_Conv_Ovf_U2(instr); break;  			case Code.Conv_Ovf_U2_Un:	Emulate_Conv_Ovf_U2_Un(instr); break;  			case Code.Conv_Ovf_U4:		Emulate_Conv_Ovf_U4(instr); break;  			case Code.Conv_Ovf_U4_Un:	Emulate_Conv_Ovf_U4_Un(instr); break;  			case Code.Conv_Ovf_U8:		Emulate_Conv_Ovf_U8(instr); break;  			case Code.Conv_Ovf_U8_Un:	Emulate_Conv_Ovf_U8_Un(instr); break;    			case Code.Ldelem_I1: valueStack.Pop(2); valueStack.Push(Int32Value.CreateUnknown()); break;  			case Code.Ldelem_I2: valueStack.Pop(2); valueStack.Push(Int32Value.CreateUnknown()); break;  			case Code.Ldelem_I4: valueStack.Pop(2); valueStack.Push(Int32Value.CreateUnknown()); break;  			case Code.Ldelem_I8: valueStack.Pop(2); valueStack.Push(Int64Value.CreateUnknown()); break;  			case Code.Ldelem_U1: valueStack.Pop(2); valueStack.Push(Int32Value.CreateUnknownUInt8()); break;  			case Code.Ldelem_U2: valueStack.Pop(2); valueStack.Push(Int32Value.CreateUnknownUInt16()); break;  			case Code.Ldelem_U4: valueStack.Pop(2); valueStack.Push(Int32Value.CreateUnknown()); break;  			case Code.Ldelem:	 valueStack.Pop(2); valueStack.Push(GetUnknownValue(instr.Operand as ITypeDefOrRef)); break;    			case Code.Ldind_I1:	valueStack.Pop(); valueStack.Push(Int32Value.CreateUnknown()); break;  			case Code.Ldind_I2:	valueStack.Pop(); valueStack.Push(Int32Value.CreateUnknown()); break;  			case Code.Ldind_I4:	valueStack.Pop(); valueStack.Push(Int32Value.CreateUnknown()); break;  			case Code.Ldind_I8:	valueStack.Pop(); valueStack.Push(Int64Value.CreateUnknown()); break;  			case Code.Ldind_U1:	valueStack.Pop(); valueStack.Push(Int32Value.CreateUnknownUInt8()); break;  			case Code.Ldind_U2:	valueStack.Pop(); valueStack.Push(Int32Value.CreateUnknownUInt16()); break;  			case Code.Ldind_U4:	valueStack.Pop(); valueStack.Push(Int32Value.CreateUnknown()); break;    			case Code.Ldlen:	valueStack.Pop(); valueStack.Push(Int32Value.CreateUnknown()); break;  			case Code.Sizeof:	valueStack.Push(Int32Value.CreateUnknown()); break;    			case Code.Ldfld:	Emulate_Ldfld(instr); break;  			case Code.Ldsfld:	Emulate_Ldsfld(instr); break;    			case Code.Ldftn:	valueStack.Push(new ObjectValue(instr.Operand)); break;  			case Code.Ldsflda:	valueStack.Push(new ObjectValue(instr.Operand)); break;  			case Code.Ldtoken:	valueStack.Push(new ObjectValue(instr.Operand)); break;  			case Code.Ldvirtftn:valueStack.Pop(); valueStack.Push(new ObjectValue()); break;  			case Code.Ldflda:	valueStack.Pop(); valueStack.Push(new ObjectValue()); break;    			case Code.Unbox:    			case Code.Conv_R_Un:Emulate_Conv_R_Un(instr); break;  			case Code.Conv_R4:	Emulate_Conv_R4(instr); break;  			case Code.Conv_R8:	Emulate_Conv_R8(instr); break;    			case Code.Arglist:  			case Code.Beq:  			case Code.Beq_S:  			case Code.Bge:  			case Code.Bge_S:  			case Code.Bge_Un:  			case Code.Bge_Un_S:  			case Code.Bgt:  			case Code.Bgt_S:  			case Code.Bgt_Un:  			case Code.Bgt_Un_S:  			case Code.Ble:  			case Code.Ble_S:  			case Code.Ble_Un:  			case Code.Ble_Un_S:  			case Code.Blt:  			case Code.Blt_S:  			case Code.Blt_Un:  			case Code.Blt_Un_S:  			case Code.Bne_Un:  			case Code.Bne_Un_S:  			case Code.Brfalse:  			case Code.Brfalse_S:  			case Code.Brtrue:  			case Code.Brtrue_S:  			case Code.Br:  			case Code.Br_S:  			case Code.Break:  			case Code.Calli:  			case Code.Ckfinite:  			case Code.Constrained:  			case Code.Conv_I:  			case Code.Conv_Ovf_I:  			case Code.Conv_Ovf_I_Un:  			case Code.Conv_Ovf_U:  			case Code.Conv_Ovf_U_Un:  			case Code.Conv_U:  			case Code.Cpblk:  			case Code.Cpobj:  			case Code.Endfilter:  			case Code.Endfinally:  			case Code.Initblk:  			case Code.Initobj:  			case Code.Jmp:  			case Code.Ldelema:  			case Code.Ldelem_I:  			case Code.Ldelem_R4:  			case Code.Ldelem_R8:  			case Code.Ldelem_Ref:  			case Code.Ldind_I:  			case Code.Ldind_R4:  			case Code.Ldind_R8:  			case Code.Ldind_Ref:  			case Code.Ldobj:  			case Code.Leave:  			case Code.Leave_S:  			case Code.Localloc:  			case Code.Mkrefany:  			case Code.Newarr:  			case Code.Newobj:  			case Code.Nop:  			case Code.Pop:  			case Code.Readonly:  			case Code.Refanytype:  			case Code.Refanyval:  			case Code.Ret:  			case Code.Rethrow:  			case Code.Stelem:  			case Code.Stelem_I:  			case Code.Stelem_I1:  			case Code.Stelem_I2:  			case Code.Stelem_I4:  			case Code.Stelem_I8:  			case Code.Stelem_R4:  			case Code.Stelem_R8:  			case Code.Stelem_Ref:  			case Code.Stfld:  			case Code.Stind_I:  			case Code.Stind_I1:  			case Code.Stind_I2:  			case Code.Stind_I4:  			case Code.Stind_I8:  			case Code.Stind_R4:  			case Code.Stind_R8:  			case Code.Stind_Ref:  			case Code.Stobj:  			case Code.Stsfld:  			case Code.Switch:  			case Code.Tailcall:  			case Code.Throw:  			case Code.Unaligned:  			case Code.Volatile:  			default:  				UpdateStack(instr);  				break;  			}
Magic Number,de4dot.blocks.cflow,Int32Value,C:\repos\0xd4d_de4dot\de4dot.blocks\cflow\Int32Value.cs,CreateUnknownUInt8,The following statement contains a magic number: return new Int32Value(0' NO_UNKNOWN_BITS << 8);
Magic Number,de4dot.blocks.cflow,Int32Value,C:\repos\0xd4d_de4dot\de4dot.blocks\cflow\Int32Value.cs,CreateUnknownUInt16,The following statement contains a magic number: return new Int32Value(0' NO_UNKNOWN_BITS << 16);
Magic Number,de4dot.blocks.cflow,Int32Value,C:\repos\0xd4d_de4dot\de4dot.blocks\cflow\Int32Value.cs,Conv_U1,The following statement contains a magic number: validMask |= NO_UNKNOWN_BITS << 8;
Magic Number,de4dot.blocks.cflow,Int32Value,C:\repos\0xd4d_de4dot\de4dot.blocks\cflow\Int32Value.cs,Conv_I1,The following statement contains a magic number: if (IsBitValid(validMask' 7))  				validMask |= NO_UNKNOWN_BITS << 8;  			else  				validMask &= ~(NO_UNKNOWN_BITS << 8);
Magic Number,de4dot.blocks.cflow,Int32Value,C:\repos\0xd4d_de4dot\de4dot.blocks\cflow\Int32Value.cs,Conv_I1,The following statement contains a magic number: if (IsBitValid(validMask' 7))  				validMask |= NO_UNKNOWN_BITS << 8;  			else  				validMask &= ~(NO_UNKNOWN_BITS << 8);
Magic Number,de4dot.blocks.cflow,Int32Value,C:\repos\0xd4d_de4dot\de4dot.blocks\cflow\Int32Value.cs,Conv_I1,The following statement contains a magic number: if (IsBitValid(validMask' 7))  				validMask |= NO_UNKNOWN_BITS << 8;  			else  				validMask &= ~(NO_UNKNOWN_BITS << 8);
Magic Number,de4dot.blocks.cflow,Int32Value,C:\repos\0xd4d_de4dot\de4dot.blocks\cflow\Int32Value.cs,Conv_U2,The following statement contains a magic number: validMask |= NO_UNKNOWN_BITS << 16;
Magic Number,de4dot.blocks.cflow,Int32Value,C:\repos\0xd4d_de4dot\de4dot.blocks\cflow\Int32Value.cs,Conv_I2,The following statement contains a magic number: if (IsBitValid(validMask' 15))  				validMask |= NO_UNKNOWN_BITS << 16;  			else  				validMask &= ~(NO_UNKNOWN_BITS << 16);
Magic Number,de4dot.blocks.cflow,Int32Value,C:\repos\0xd4d_de4dot\de4dot.blocks\cflow\Int32Value.cs,Conv_I2,The following statement contains a magic number: if (IsBitValid(validMask' 15))  				validMask |= NO_UNKNOWN_BITS << 16;  			else  				validMask &= ~(NO_UNKNOWN_BITS << 16);
Magic Number,de4dot.blocks.cflow,Int32Value,C:\repos\0xd4d_de4dot\de4dot.blocks\cflow\Int32Value.cs,Conv_I2,The following statement contains a magic number: if (IsBitValid(validMask' 15))  				validMask |= NO_UNKNOWN_BITS << 16;  			else  				validMask &= ~(NO_UNKNOWN_BITS << 16);
Magic Number,de4dot.blocks.cflow,Int32Value,C:\repos\0xd4d_de4dot\de4dot.blocks\cflow\Int32Value.cs,Conv_Ovf_I1,The following statement contains a magic number: if (!a.AreBitsValid(NO_UNKNOWN_BITS << 7) ||  				!a.CheckSign(NO_UNKNOWN_BITS << 7))  				return CreateUnknown();
Magic Number,de4dot.blocks.cflow,Int32Value,C:\repos\0xd4d_de4dot\de4dot.blocks\cflow\Int32Value.cs,Conv_Ovf_I1,The following statement contains a magic number: if (!a.AreBitsValid(NO_UNKNOWN_BITS << 7) ||  				!a.CheckSign(NO_UNKNOWN_BITS << 7))  				return CreateUnknown();
Magic Number,de4dot.blocks.cflow,Int32Value,C:\repos\0xd4d_de4dot\de4dot.blocks\cflow\Int32Value.cs,Conv_Ovf_I1_Un,The following statement contains a magic number: if (!a.AreBitsValid(NO_UNKNOWN_BITS << 7) ||  				(uint)a.Value > sbyte.MaxValue)  				return CreateUnknown();
Magic Number,de4dot.blocks.cflow,Int32Value,C:\repos\0xd4d_de4dot\de4dot.blocks\cflow\Int32Value.cs,Conv_Ovf_I2,The following statement contains a magic number: if (!a.AreBitsValid(NO_UNKNOWN_BITS << 15) ||  				!a.CheckSign(NO_UNKNOWN_BITS << 15))  				return CreateUnknown();
Magic Number,de4dot.blocks.cflow,Int32Value,C:\repos\0xd4d_de4dot\de4dot.blocks\cflow\Int32Value.cs,Conv_Ovf_I2,The following statement contains a magic number: if (!a.AreBitsValid(NO_UNKNOWN_BITS << 15) ||  				!a.CheckSign(NO_UNKNOWN_BITS << 15))  				return CreateUnknown();
Magic Number,de4dot.blocks.cflow,Int32Value,C:\repos\0xd4d_de4dot\de4dot.blocks\cflow\Int32Value.cs,Conv_Ovf_I2_Un,The following statement contains a magic number: if (!a.AreBitsValid(NO_UNKNOWN_BITS << 15) ||  				(uint)a.Value > short.MaxValue)  				return CreateUnknown();
Magic Number,de4dot.blocks.cflow,Int32Value,C:\repos\0xd4d_de4dot\de4dot.blocks\cflow\Int32Value.cs,Conv_Ovf_I4_Un,The following statement contains a magic number: if (!IsBitValid(a.ValidMask' 31) || a.Value < 0)  				return CreateUnknown();
Magic Number,de4dot.blocks.cflow,Int32Value,C:\repos\0xd4d_de4dot\de4dot.blocks\cflow\Int32Value.cs,Conv_Ovf_I8,The following statement contains a magic number: if (IsBitValid(a.ValidMask' 31))  				validMask |= Int64Value.NO_UNKNOWN_BITS << 32;
Magic Number,de4dot.blocks.cflow,Int32Value,C:\repos\0xd4d_de4dot\de4dot.blocks\cflow\Int32Value.cs,Conv_Ovf_I8,The following statement contains a magic number: if (IsBitValid(a.ValidMask' 31))  				validMask |= Int64Value.NO_UNKNOWN_BITS << 32;
Magic Number,de4dot.blocks.cflow,Int32Value,C:\repos\0xd4d_de4dot\de4dot.blocks\cflow\Int32Value.cs,Conv_Ovf_I8_Un,The following statement contains a magic number: return new Int64Value((long)(uint)a.Value' a.ValidMask | (Int64Value.NO_UNKNOWN_BITS << 32));
Magic Number,de4dot.blocks.cflow,Int32Value,C:\repos\0xd4d_de4dot\de4dot.blocks\cflow\Int32Value.cs,Conv_Ovf_U1,The following statement contains a magic number: if (!a.AreBitsValid(NO_UNKNOWN_BITS << 7) ||  				a.Value < 0 || a.Value > byte.MaxValue)  				return CreateUnknownUInt8();
Magic Number,de4dot.blocks.cflow,Int32Value,C:\repos\0xd4d_de4dot\de4dot.blocks\cflow\Int32Value.cs,Conv_Ovf_U1_Un,The following statement contains a magic number: if (!a.AreBitsValid(NO_UNKNOWN_BITS << 8) ||  				(uint)a.Value > byte.MaxValue)  				return CreateUnknownUInt8();
Magic Number,de4dot.blocks.cflow,Int32Value,C:\repos\0xd4d_de4dot\de4dot.blocks\cflow\Int32Value.cs,Conv_Ovf_U2,The following statement contains a magic number: if (!a.AreBitsValid(NO_UNKNOWN_BITS << 15) ||  				a.Value < 0 || a.Value > ushort.MaxValue)  				return CreateUnknownUInt16();
Magic Number,de4dot.blocks.cflow,Int32Value,C:\repos\0xd4d_de4dot\de4dot.blocks\cflow\Int32Value.cs,Conv_Ovf_U2_Un,The following statement contains a magic number: if (!a.AreBitsValid(NO_UNKNOWN_BITS << 16) ||  				(uint)a.Value > ushort.MaxValue)  				return CreateUnknownUInt16();
Magic Number,de4dot.blocks.cflow,Int32Value,C:\repos\0xd4d_de4dot\de4dot.blocks\cflow\Int32Value.cs,Conv_Ovf_U4,The following statement contains a magic number: if (!IsBitValid(a.ValidMask' 31) || a.Value < 0)  				return CreateUnknown();
Magic Number,de4dot.blocks.cflow,Int32Value,C:\repos\0xd4d_de4dot\de4dot.blocks\cflow\Int32Value.cs,Conv_Ovf_U8,The following statement contains a magic number: if (!IsBitValid(a.ValidMask' 31) || a.Value < 0)  				return Int64Value.CreateUnknown();
Magic Number,de4dot.blocks.cflow,Int32Value,C:\repos\0xd4d_de4dot\de4dot.blocks\cflow\Int32Value.cs,Conv_Ovf_U8,The following statement contains a magic number: return new Int64Value(a.Value' (ulong)a.ValidMask | (Int64Value.NO_UNKNOWN_BITS << 32));
Magic Number,de4dot.blocks.cflow,Int32Value,C:\repos\0xd4d_de4dot\de4dot.blocks\cflow\Int32Value.cs,Conv_Ovf_U8_Un,The following statement contains a magic number: return new Int64Value((long)(uint)a.Value' a.ValidMask | (Int64Value.NO_UNKNOWN_BITS << 32));
Magic Number,de4dot.blocks.cflow,Int32Value,C:\repos\0xd4d_de4dot\de4dot.blocks\cflow\Int32Value.cs,Shl,The following statement contains a magic number: if (b.Value < 0 || b.Value >= sizeof(int) * 8)  				return CreateUnknown();
Magic Number,de4dot.blocks.cflow,Int32Value,C:\repos\0xd4d_de4dot\de4dot.blocks\cflow\Int32Value.cs,Shl,The following statement contains a magic number: uint validMask = (a.ValidMask << shift) | (uint.MaxValue >> (sizeof(int) * 8 - shift));
Magic Number,de4dot.blocks.cflow,Int32Value,C:\repos\0xd4d_de4dot\de4dot.blocks\cflow\Int32Value.cs,Shr,The following statement contains a magic number: if (b.Value < 0 || b.Value >= sizeof(int) * 8)  				return CreateUnknown();
Magic Number,de4dot.blocks.cflow,Int32Value,C:\repos\0xd4d_de4dot\de4dot.blocks\cflow\Int32Value.cs,Shr,The following statement contains a magic number: if (a.IsBitValid(sizeof(int) * 8 - 1))  				validMask |= (uint.MaxValue << (sizeof(int) * 8 - shift));
Magic Number,de4dot.blocks.cflow,Int32Value,C:\repos\0xd4d_de4dot\de4dot.blocks\cflow\Int32Value.cs,Shr,The following statement contains a magic number: if (a.IsBitValid(sizeof(int) * 8 - 1))  				validMask |= (uint.MaxValue << (sizeof(int) * 8 - shift));
Magic Number,de4dot.blocks.cflow,Int32Value,C:\repos\0xd4d_de4dot\de4dot.blocks\cflow\Int32Value.cs,Shr_Un,The following statement contains a magic number: if (b.Value < 0 || b.Value >= sizeof(int) * 8)  				return CreateUnknown();
Magic Number,de4dot.blocks.cflow,Int32Value,C:\repos\0xd4d_de4dot\de4dot.blocks\cflow\Int32Value.cs,Shr_Un,The following statement contains a magic number: uint validMask = (a.ValidMask >> shift) | (uint.MaxValue << (sizeof(int) * 8 - shift));
Magic Number,de4dot.blocks.cflow,Int64Value,C:\repos\0xd4d_de4dot\de4dot.blocks\cflow\Int64Value.cs,Conv_U8,The following statement contains a magic number: ulong validMask = a.ValidMask | (NO_UNKNOWN_BITS << 32);
Magic Number,de4dot.blocks.cflow,Int64Value,C:\repos\0xd4d_de4dot\de4dot.blocks\cflow\Int64Value.cs,Conv_I8,The following statement contains a magic number: if (IsBitValid(validMask' 31))  				validMask |= NO_UNKNOWN_BITS << 32;  			else  				validMask &= ~(NO_UNKNOWN_BITS << 32);
Magic Number,de4dot.blocks.cflow,Int64Value,C:\repos\0xd4d_de4dot\de4dot.blocks\cflow\Int64Value.cs,Conv_I8,The following statement contains a magic number: if (IsBitValid(validMask' 31))  				validMask |= NO_UNKNOWN_BITS << 32;  			else  				validMask &= ~(NO_UNKNOWN_BITS << 32);
Magic Number,de4dot.blocks.cflow,Int64Value,C:\repos\0xd4d_de4dot\de4dot.blocks\cflow\Int64Value.cs,Conv_I8,The following statement contains a magic number: if (IsBitValid(validMask' 31))  				validMask |= NO_UNKNOWN_BITS << 32;  			else  				validMask &= ~(NO_UNKNOWN_BITS << 32);
Magic Number,de4dot.blocks.cflow,Int64Value,C:\repos\0xd4d_de4dot\de4dot.blocks\cflow\Int64Value.cs,Conv_Ovf_I1,The following statement contains a magic number: if (!a.AreBitsValid(NO_UNKNOWN_BITS << 7) ||  				!a.CheckSign(NO_UNKNOWN_BITS << 7))  				return Int32Value.CreateUnknown();
Magic Number,de4dot.blocks.cflow,Int64Value,C:\repos\0xd4d_de4dot\de4dot.blocks\cflow\Int64Value.cs,Conv_Ovf_I1,The following statement contains a magic number: if (!a.AreBitsValid(NO_UNKNOWN_BITS << 7) ||  				!a.CheckSign(NO_UNKNOWN_BITS << 7))  				return Int32Value.CreateUnknown();
Magic Number,de4dot.blocks.cflow,Int64Value,C:\repos\0xd4d_de4dot\de4dot.blocks\cflow\Int64Value.cs,Conv_Ovf_I1_Un,The following statement contains a magic number: if (!a.AreBitsValid(NO_UNKNOWN_BITS << 7) ||  				(ulong)a.Value > (ulong)sbyte.MaxValue)  				return Int32Value.CreateUnknown();
Magic Number,de4dot.blocks.cflow,Int64Value,C:\repos\0xd4d_de4dot\de4dot.blocks\cflow\Int64Value.cs,Conv_Ovf_I2,The following statement contains a magic number: if (!a.AreBitsValid(NO_UNKNOWN_BITS << 15) ||  				!a.CheckSign(NO_UNKNOWN_BITS << 15))  				return Int32Value.CreateUnknown();
Magic Number,de4dot.blocks.cflow,Int64Value,C:\repos\0xd4d_de4dot\de4dot.blocks\cflow\Int64Value.cs,Conv_Ovf_I2,The following statement contains a magic number: if (!a.AreBitsValid(NO_UNKNOWN_BITS << 15) ||  				!a.CheckSign(NO_UNKNOWN_BITS << 15))  				return Int32Value.CreateUnknown();
Magic Number,de4dot.blocks.cflow,Int64Value,C:\repos\0xd4d_de4dot\de4dot.blocks\cflow\Int64Value.cs,Conv_Ovf_I2_Un,The following statement contains a magic number: if (!a.AreBitsValid(NO_UNKNOWN_BITS << 15) ||  				(ulong)a.Value > (ulong)short.MaxValue)  				return Int32Value.CreateUnknown();
Magic Number,de4dot.blocks.cflow,Int64Value,C:\repos\0xd4d_de4dot\de4dot.blocks\cflow\Int64Value.cs,Conv_Ovf_I4,The following statement contains a magic number: if (!a.AreBitsValid(NO_UNKNOWN_BITS << 31) ||  				!a.CheckSign(NO_UNKNOWN_BITS << 31))  				return Int32Value.CreateUnknown();
Magic Number,de4dot.blocks.cflow,Int64Value,C:\repos\0xd4d_de4dot\de4dot.blocks\cflow\Int64Value.cs,Conv_Ovf_I4,The following statement contains a magic number: if (!a.AreBitsValid(NO_UNKNOWN_BITS << 31) ||  				!a.CheckSign(NO_UNKNOWN_BITS << 31))  				return Int32Value.CreateUnknown();
Magic Number,de4dot.blocks.cflow,Int64Value,C:\repos\0xd4d_de4dot\de4dot.blocks\cflow\Int64Value.cs,Conv_Ovf_I4_Un,The following statement contains a magic number: if (!a.AreBitsValid(NO_UNKNOWN_BITS << 31) ||  				(ulong)a.Value > (ulong)int.MaxValue)  				return Int32Value.CreateUnknown();
Magic Number,de4dot.blocks.cflow,Int64Value,C:\repos\0xd4d_de4dot\de4dot.blocks\cflow\Int64Value.cs,Conv_Ovf_I8_Un,The following statement contains a magic number: if (!IsBitValid(a.ValidMask' 63) || a.Value < 0)  				return CreateUnknown();
Magic Number,de4dot.blocks.cflow,Int64Value,C:\repos\0xd4d_de4dot\de4dot.blocks\cflow\Int64Value.cs,Conv_Ovf_U1,The following statement contains a magic number: if (!a.AreBitsValid(NO_UNKNOWN_BITS << 7) ||  				a.Value < 0 || a.Value > byte.MaxValue)  				return Int32Value.CreateUnknownUInt8();
Magic Number,de4dot.blocks.cflow,Int64Value,C:\repos\0xd4d_de4dot\de4dot.blocks\cflow\Int64Value.cs,Conv_Ovf_U1_Un,The following statement contains a magic number: if (!a.AreBitsValid(NO_UNKNOWN_BITS << 8) ||  				(ulong)a.Value > byte.MaxValue)  				return Int32Value.CreateUnknownUInt8();
Magic Number,de4dot.blocks.cflow,Int64Value,C:\repos\0xd4d_de4dot\de4dot.blocks\cflow\Int64Value.cs,Conv_Ovf_U2,The following statement contains a magic number: if (!a.AreBitsValid(NO_UNKNOWN_BITS << 15) ||  				a.Value < 0 || a.Value > ushort.MaxValue)  				return Int32Value.CreateUnknownUInt16();
Magic Number,de4dot.blocks.cflow,Int64Value,C:\repos\0xd4d_de4dot\de4dot.blocks\cflow\Int64Value.cs,Conv_Ovf_U2_Un,The following statement contains a magic number: if (!a.AreBitsValid(NO_UNKNOWN_BITS << 16) ||  				(ulong)a.Value > ushort.MaxValue)  				return Int32Value.CreateUnknownUInt16();
Magic Number,de4dot.blocks.cflow,Int64Value,C:\repos\0xd4d_de4dot\de4dot.blocks\cflow\Int64Value.cs,Conv_Ovf_U4,The following statement contains a magic number: if (!a.AreBitsValid(NO_UNKNOWN_BITS << 31) ||  				a.Value < 0 || a.Value > uint.MaxValue)  				return Int32Value.CreateUnknown();
Magic Number,de4dot.blocks.cflow,Int64Value,C:\repos\0xd4d_de4dot\de4dot.blocks\cflow\Int64Value.cs,Conv_Ovf_U4_Un,The following statement contains a magic number: if (!a.AreBitsValid(NO_UNKNOWN_BITS << 32) ||  				(ulong)a.Value > uint.MaxValue)  				return Int32Value.CreateUnknown();
Magic Number,de4dot.blocks.cflow,Int64Value,C:\repos\0xd4d_de4dot\de4dot.blocks\cflow\Int64Value.cs,Conv_Ovf_U8,The following statement contains a magic number: if (!IsBitValid(a.ValidMask' 63) || a.Value < 0)  				return CreateUnknown();
Magic Number,de4dot.blocks.cflow,Int64Value,C:\repos\0xd4d_de4dot\de4dot.blocks\cflow\Int64Value.cs,Shl,The following statement contains a magic number: if (b.Value < 0 || b.Value >= sizeof(long) * 8)  				return CreateUnknown();
Magic Number,de4dot.blocks.cflow,Int64Value,C:\repos\0xd4d_de4dot\de4dot.blocks\cflow\Int64Value.cs,Shl,The following statement contains a magic number: ulong validMask = (a.ValidMask << shift) | (ulong.MaxValue >> (sizeof(long) * 8 - shift));
Magic Number,de4dot.blocks.cflow,Int64Value,C:\repos\0xd4d_de4dot\de4dot.blocks\cflow\Int64Value.cs,Shr,The following statement contains a magic number: if (b.Value < 0 || b.Value >= sizeof(long) * 8)  				return CreateUnknown();
Magic Number,de4dot.blocks.cflow,Int64Value,C:\repos\0xd4d_de4dot\de4dot.blocks\cflow\Int64Value.cs,Shr,The following statement contains a magic number: if (a.IsBitValid(sizeof(long) * 8 - 1))  				validMask |= (ulong.MaxValue << (sizeof(long) * 8 - shift));
Magic Number,de4dot.blocks.cflow,Int64Value,C:\repos\0xd4d_de4dot\de4dot.blocks\cflow\Int64Value.cs,Shr,The following statement contains a magic number: if (a.IsBitValid(sizeof(long) * 8 - 1))  				validMask |= (ulong.MaxValue << (sizeof(long) * 8 - shift));
Magic Number,de4dot.blocks.cflow,Int64Value,C:\repos\0xd4d_de4dot\de4dot.blocks\cflow\Int64Value.cs,Shr_Un,The following statement contains a magic number: if (b.Value < 0 || b.Value >= sizeof(long) * 8)  				return CreateUnknown();
Magic Number,de4dot.blocks.cflow,Int64Value,C:\repos\0xd4d_de4dot\de4dot.blocks\cflow\Int64Value.cs,Shr_Un,The following statement contains a magic number: ulong validMask = (a.ValidMask >> shift) | (ulong.MaxValue << (sizeof(long) * 8 - shift));
Magic Number,de4dot.blocks.cflow,SwitchCflowDeobfuscator,C:\repos\0xd4d_de4dot\de4dot.blocks\cflow\SwitchCflowDeobfuscator.cs,IsStLdlocBranch,The following statement contains a magic number: int numInstrs = 2 + (isSwitch ? 1 : 0);
Magic Number,de4dot.blocks.cflow,ValueStack,C:\repos\0xd4d_de4dot\de4dot.blocks\cflow\ValueStack.cs,ToString,The following statement contains a magic number: const int maxValues = 5;
Missing Default,de4dot.blocks,DotNetUtils,C:\repos\0xd4d_de4dot\de4dot.blocks\DotNetUtils.cs,GetFrameworkType,The following switch statement is missing a default case: switch (BitConverter.ToString(modRef.PublicKeyOrToken.Data).Replace("-"' "").ToLowerInvariant()) {  				case "b77a5c561934e089":  					return FrameworkType.Desktop;  				case "7cec85d7bea7798e":  					return FrameworkType.Silverlight;  				case "969db8053d3322ac":  					return FrameworkType.CompactFramework;  				case "1c9e259686f921e0":  					return FrameworkType.XNA;  				case "e92a8b81eba7ceb7":  					return FrameworkType.Zune;  				}
Missing Default,de4dot.blocks,InstructionListParser,C:\repos\0xd4d_de4dot\de4dot.blocks\InstructionListParser.cs,CreateBranches,The following switch statement is missing a default case: switch (instr.OpCode.Code) {  					case Code.Endfilter:  					case Code.Endfinally:  					case Code.Jmp:  					case Code.Ret:  					case Code.Rethrow:  					case Code.Throw:  						targets = new List<int>();  						break;  					}
Missing Default,de4dot.blocks,InstructionListParser,C:\repos\0xd4d_de4dot\de4dot.blocks\InstructionListParser.cs,FixBranchTargets,The following switch statement is missing a default case: switch (lastInstr.OpCode.OperandType) {  				case OperandType.ShortInlineBrTarget:  				case OperandType.InlineBrTarget:  					var targetInstr = lastInstr.Operand as Instruction;  					if (targetInstr != null)  						block.Targets = new List<Block> { instrToBlock[instrToIndex[targetInstr]] };  					break;    				case OperandType.InlineSwitch:  					var switchTargets = (Instruction[])lastInstr.Operand;  					var newSwitchTargets = new List<Block>();  					block.Targets = newSwitchTargets;  					foreach (var target in switchTargets) {  						if (target != null)  							newSwitchTargets.Add(instrToBlock[instrToIndex[target]]);  					}  					break;  				}
Missing Default,de4dot.blocks,ScopeAndTokenKey,C:\repos\0xd4d_de4dot\de4dot.blocks\MemberDefDict.cs,GetAssemblyName,The following switch statement is missing a default case: switch (a.ScopeType) {  			case ScopeType.AssemblyRef:  				return ((AssemblyRef)a).Name.String;  			case ScopeType.ModuleDef:  				var asm = ((ModuleDef)a).Assembly;  				if (asm != null)  					return asm.Name.String;  				break;  			}
Missing Default,de4dot.blocks.cflow,ConstantsFolder,C:\repos\0xd4d_de4dot\de4dot.blocks\cflow\ConstantsFolder.cs,Deobfuscate,The following switch statement is missing a default case: switch (instr.OpCode.Code) {  				case Code.Ldarg:  				case Code.Ldarg_0:  				case Code.Ldarg_1:  				case Code.Ldarg_2:  				case Code.Ldarg_3:  				case Code.Ldarg_S:  					modified |= FixLoadInstruction(block' i' instructionEmulator.GetArg(instr.Instruction.GetParameter(args)));  					break;    				case Code.Ldloc:  				case Code.Ldloc_0:  				case Code.Ldloc_1:  				case Code.Ldloc_2:  				case Code.Ldloc_3:  				case Code.Ldloc_S:  					modified |= FixLoadInstruction(block' i' instructionEmulator.GetLocal(instr.Instruction.GetLocal(blocks.Locals)));  					break;    				case Code.Ldarga:  				case Code.Ldarga_S:  					instructionEmulator.MakeArgUnknown((Parameter)instr.Operand);  					break;    				case Code.Ldloca:  				case Code.Ldloca_S:  					instructionEmulator.MakeLocalUnknown((Local)instr.Operand);  					break;    				case Code.Add:  				case Code.Add_Ovf:  				case Code.Add_Ovf_Un:  				case Code.And:  				case Code.Ceq:  				case Code.Cgt:  				case Code.Cgt_Un:  				case Code.Clt:  				case Code.Clt_Un:  				case Code.Conv_I:  				case Code.Conv_I1:  				case Code.Conv_I2:  				case Code.Conv_I4:  				case Code.Conv_I8:  				case Code.Conv_Ovf_I:  				case Code.Conv_Ovf_I_Un:  				case Code.Conv_Ovf_I1:  				case Code.Conv_Ovf_I1_Un:  				case Code.Conv_Ovf_I2:  				case Code.Conv_Ovf_I2_Un:  				case Code.Conv_Ovf_I4:  				case Code.Conv_Ovf_I4_Un:  				case Code.Conv_Ovf_I8:  				case Code.Conv_Ovf_I8_Un:  				case Code.Conv_Ovf_U:  				case Code.Conv_Ovf_U_Un:  				case Code.Conv_Ovf_U1:  				case Code.Conv_Ovf_U1_Un:  				case Code.Conv_Ovf_U2:  				case Code.Conv_Ovf_U2_Un:  				case Code.Conv_Ovf_U4:  				case Code.Conv_Ovf_U4_Un:  				case Code.Conv_Ovf_U8:  				case Code.Conv_Ovf_U8_Un:  				case Code.Conv_R_Un:  				case Code.Conv_R4:  				case Code.Conv_R8:  				case Code.Conv_U:  				case Code.Conv_U1:  				case Code.Conv_U2:  				case Code.Conv_U4:  				case Code.Conv_U8:  				case Code.Div:  				case Code.Div_Un:  				case Code.Dup:  				case Code.Mul:  				case Code.Mul_Ovf:  				case Code.Mul_Ovf_Un:  				case Code.Neg:  				case Code.Not:  				case Code.Or:  				case Code.Rem:  				case Code.Rem_Un:  				case Code.Shl:  				case Code.Shr:  				case Code.Shr_Un:  				case Code.Sub:  				case Code.Sub_Ovf:  				case Code.Sub_Ovf_Un:  				case Code.Xor:  					if (DisableNewCode)  						break;  					if (i + 1 < instrs.Count && instrs[i + 1].OpCode.Code == Code.Pop)  						break;  					if (!VerifyValidArgs(instr.Instruction))  						break;  					instructionEmulator.Emulate(instr.Instruction);  					var tos = instructionEmulator.Peek();  					Instruction newInstr = null;  					if (tos.IsInt32()) {  						var val = (Int32Value)tos;  						if (val.AllBitsValid())  							newInstr = Instruction.CreateLdcI4(val.Value);  					}  					else if (tos.IsInt64()) {  						var val = (Int64Value)tos;  						if (val.AllBitsValid())  							newInstr = OpCodes.Ldc_I8.ToInstruction(val.Value);  					}  					else if (tos.IsReal8()) {  						var val = (Real8Value)tos;  						if (val.IsValid)  							newInstr = GetLoadRealInstruction(val.Value);  					}  					if (newInstr != null) {  						block.Insert(i + 1' Instruction.Create(OpCodes.Pop));  						block.Insert(i + 2' newInstr);  						i += 2;  						modified = true;  					}  					continue;  				}
Missing Default,de4dot.blocks.cflow,ConstantsFolder,C:\repos\0xd4d_de4dot\de4dot.blocks\cflow\ConstantsFolder.cs,VerifyValidArgs,The following switch statement is missing a default case: switch (pops) {  			case 0:  				return true;    			case 1:  				val1 = instructionEmulator.Pop();  				retVal = VerifyValidArg(val1);  				instructionEmulator.Push(val1);  				return retVal;    			case 2:  				val2 = instructionEmulator.Pop();  				val1 = instructionEmulator.Pop();  				retVal = VerifyValidArg(val2) && VerifyValidArg(val1);  				instructionEmulator.Push(val1);  				instructionEmulator.Push(val2);  				return retVal;  			}
Missing Default,de4dot.blocks.cflow,InstructionEmulator,C:\repos\0xd4d_de4dot\de4dot.blocks\cflow\InstructionEmulator.cs,GetUnknownValue,The following switch statement is missing a default case: switch (type.ElementType) {  			case ElementType.Boolean: return Int32Value.CreateUnknownBool();  			case ElementType.I1: return Int32Value.CreateUnknown();  			case ElementType.U1: return Int32Value.CreateUnknownUInt8();  			case ElementType.I2: return Int32Value.CreateUnknown();  			case ElementType.U2: return Int32Value.CreateUnknownUInt16();  			case ElementType.I4: return Int32Value.CreateUnknown();  			case ElementType.U4: return Int32Value.CreateUnknown();  			case ElementType.I8: return Int64Value.CreateUnknown();  			case ElementType.U8: return Int64Value.CreateUnknown();  			}
Missing Default,de4dot.blocks.cflow,InstructionEmulator,C:\repos\0xd4d_de4dot\de4dot.blocks\cflow\InstructionEmulator.cs,GetDefaultValue,The following switch statement is missing a default case: switch (type.ElementType) {  			case ElementType.Boolean:  			case ElementType.I1:  			case ElementType.U1:  			case ElementType.I2:  			case ElementType.U2:  			case ElementType.I4:  			case ElementType.U4:  				return Int32Value.Zero;  			case ElementType.I8:  			case ElementType.U8:  				return Int64Value.Zero;  			}
Missing Default,de4dot.blocks.cflow,InstructionEmulator,C:\repos\0xd4d_de4dot\de4dot.blocks\cflow\InstructionEmulator.cs,TruncateValue,The following switch statement is missing a default case: switch (type.ElementType) {  			case ElementType.Boolean:  				if (value.IsInt32())  					return ((Int32Value)value).ToBoolean();  				return Int32Value.CreateUnknownBool();    			case ElementType.I1:  				if (value.IsInt32())  					return ((Int32Value)value).ToInt8();  				return Int32Value.CreateUnknown();    			case ElementType.U1:  				if (value.IsInt32())  					return ((Int32Value)value).ToUInt8();  				return Int32Value.CreateUnknownUInt8();    			case ElementType.I2:  				if (value.IsInt32())  					return ((Int32Value)value).ToInt16();  				return Int32Value.CreateUnknown();    			case ElementType.U2:  				if (value.IsInt32())  					return ((Int32Value)value).ToUInt16();  				return Int32Value.CreateUnknownUInt16();    			case ElementType.I4:  			case ElementType.U4:  				if (value.IsInt32())  					return value;  				return Int32Value.CreateUnknown();    			case ElementType.I8:  			case ElementType.U8:  				if (value.IsInt64())  					return value;  				return Int64Value.CreateUnknown();    			case ElementType.R4:  				if (value.IsReal8())  					return ((Real8Value)value).ToSingle();  				return new UnknownValue();    			case ElementType.R8:  				if (value.IsReal8())  					return value;  				return new UnknownValue();  			}
