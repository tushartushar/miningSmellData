Implementation smell,Namespace,Class,File,Method,Description
Long Method,SevenZip.Compression.LZMA,Decoder,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\7zip\Compress\LZMA\LzmaDecoder.cs,Code,The method has 114 lines of code.
Long Method,de4dot.code,TheAssemblyResolver,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\AssemblyResolver.cs,AddOtherAssemblySearchPaths,The method has 104 lines of code.
Long Method,de4dot.code.deobfuscators,ConstantsReader,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\ConstantsReader.cs,GetInt32,The method has 158 lines of code.
Long Method,de4dot.code.deobfuscators,ConstantsReader,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\ConstantsReader.cs,GetInt64,The method has 157 lines of code.
Long Method,de4dot.code.deobfuscators,ConstantsReader,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\ConstantsReader.cs,GetDouble,The method has 104 lines of code.
Long Method,de4dot.code.deobfuscators,MethodStack,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MethodStack.cs,GetLoadedType,The method has 121 lines of code.
Long Method,de4dot.code.deobfuscators,TypesRestorerBase,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\TypesRestorer.cs,DeobfuscateMethod,The method has 145 lines of code.
Long Method,de4dot.code.deobfuscators.Babel_NET,BabelMethodCallInliner,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Babel_NET\BabelMethodCallInliner.cs,GetNewValue,The method has 104 lines of code.
Long Method,de4dot.code.deobfuscators.Confuser,ProxyCallFixer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ProxyCallFixer.cs,GetRevisionRange,The method has 101 lines of code.
Long Method,de4dot.code.deobfuscators.DeepSea,DsMethodCallInliner,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\DeepSea\DsMethodCallInliner.cs,EmulateInstructions,The method has 127 lines of code.
Long Method,de4dot.code.deobfuscators.dotNET_Reactor.v4,Deobfuscator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\dotNET_Reactor\v4\Deobfuscator.cs,DetectVersion,The method has 123 lines of code.
Long Method,de4dot.code.deobfuscators.dotNET_Reactor.v4,MethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\dotNET_Reactor\v4\MethodsDecrypter.cs,Decrypt,The method has 114 lines of code.
Long Method,de4dot.code.deobfuscators.Eazfuscator_NET,VersionDetector,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\VersionDetector.cs,Detect,The method has 773 lines of code.
Long Method,de4dot.code.deobfuscators.MPRESS,Lzmat,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MPRESS\Lzmat.cs,Decompress,The method has 130 lines of code.
Long Method,de4dot.code.deobfuscators.SmartAssembly,TamperProtectionRemover,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\SmartAssembly\TamperProtectionRemover.cs,FindFirstBlocks,The method has 177 lines of code.
Long Method,de4dot.code.renamer.asmmodules,MTypeDef,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\renamer\asmmodules\TypeDef.cs,InitializeInterfaceMethods,The method has 129 lines of code.
Long Method,ICSharpCode.SharpZipLib.Zip.Compression,Inflater,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\SharpZipLib\Zip\Compression\Inflater.cs,DecodeHuffman,The method has 103 lines of code.
Long Method,ICSharpCode.SharpZipLib.Zip.Compression,InflaterDynHeader,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\SharpZipLib\Zip\Compression\InflaterDynHeader.cs,Decode,The method has 116 lines of code.
Complex Method,SevenZip.Compression.LZMA,Decoder,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\7zip\Compress\LZMA\LzmaDecoder.cs,Code,Cyclomatic complexity of the method is 15
Complex Method,de4dot.code,MethodPrinter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\MethodPrinter.cs,GetOperandString,Cyclomatic complexity of the method is 8
Complex Method,de4dot.code,VariableValues,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\MethodReturnValueInliner.cs,GetValue,Cyclomatic complexity of the method is 17
Complex Method,de4dot.code,MethodReturnValueInliner,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\MethodReturnValueInliner.cs,FixIntArg,Cyclomatic complexity of the method is 10
Complex Method,de4dot.code,MethodReturnValueInliner,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\MethodReturnValueInliner.cs,GetArg,Cyclomatic complexity of the method is 22
Complex Method,de4dot.code,ObfuscatedFile,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\ObfuscatedFile.cs,FindMethodTokens,Cyclomatic complexity of the method is 12
Complex Method,de4dot.code,ObfuscatedFile,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\ObfuscatedFile.cs,SplitMethodDesc,Cyclomatic complexity of the method is 11
Complex Method,de4dot.code,ObfuscatedFile,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\ObfuscatedFile.cs,DeobfuscateMethods,Cyclomatic complexity of the method is 8
Complex Method,de4dot.code,ObfuscatedFile,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\ObfuscatedFile.cs,Deobfuscate,Cyclomatic complexity of the method is 9
Complex Method,de4dot.code,PrintNewTokens,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\PrintNewTokens.cs,PrintTokens,Cyclomatic complexity of the method is 12
Complex Method,de4dot.code,StringInlinerBase,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\StringInliner.cs,InlineReturnValues,Cyclomatic complexity of the method is 8
Complex Method,de4dot.code,Utils,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\Utils.cs,ToCsharpString,Cyclomatic complexity of the method is 11
Complex Method,de4dot.code.deobfuscators.Agile_NET,Deobfuscator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\Deobfuscator.cs,DeobfuscateBegin,Cyclomatic complexity of the method is 9
Complex Method,de4dot.code.deobfuscators.Agile_NET,Deobfuscator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\Deobfuscator.cs,DeobfuscateEnd,Cyclomatic complexity of the method is 11
Complex Method,de4dot.code.deobfuscators.Agile_NET,ResourceDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\ResourceDecrypter.cs,FindResourceType,Cyclomatic complexity of the method is 8
Complex Method,de4dot.code.deobfuscators.Agile_NET,StackFrameHelper,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\StackFrameHelper.cs,Find,Cyclomatic complexity of the method is 9
Complex Method,de4dot.code.deobfuscators.Agile_NET,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\StringDecrypter.cs,Initialize,Cyclomatic complexity of the method is 8
Complex Method,de4dot.code.deobfuscators.Agile_NET,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\StringDecrypter.cs,GetKeyArrayField,Cyclomatic complexity of the method is 8
Complex Method,de4dot.code.deobfuscators.Agile_NET,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\StringDecrypter.cs,FindStringDecrypters,Cyclomatic complexity of the method is 10
Complex Method,de4dot.code.deobfuscators.Agile_NET,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\StringDecrypter.cs,Deobfuscate,Cyclomatic complexity of the method is 10
Complex Method,de4dot.code.deobfuscators.Agile_NET.vm,CilOperandInstructionRestorer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\CilOperandInstructionRestorer.cs,Restore,Cyclomatic complexity of the method is 38
Complex Method,de4dot.code.deobfuscators.Agile_NET.vm,CilOperandInstructionRestorer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\CilOperandInstructionRestorer.cs,IsValidType,Cyclomatic complexity of the method is 10
Complex Method,de4dot.code.deobfuscators.Agile_NET.vm,CsvmToCilMethodConverterBase,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\CsvmToCilMethodConverterBase.cs,UpdateLocalInstruction,Cyclomatic complexity of the method is 15
Complex Method,de4dot.code.deobfuscators.Agile_NET.vm,CsvmToCilMethodConverterBase,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\CsvmToCilMethodConverterBase.cs,UpdateArgInstruction,Cyclomatic complexity of the method is 11
Complex Method,de4dot.code.deobfuscators.Agile_NET.vm,CsvmToCilMethodConverterBase,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\CsvmToCilMethodConverterBase.cs,ReadTypeRef,Cyclomatic complexity of the method is 22
Complex Method,de4dot.code.deobfuscators.Agile_NET.vm,CsvmToCilMethodConverterBase,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\CsvmToCilMethodConverterBase.cs,RestoreConstrainedPrefix,Cyclomatic complexity of the method is 8
Complex Method,de4dot.code.deobfuscators.Agile_NET.vm.v1,OpCodeHandler,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\v1\OpCodeHandler.cs,Detect,Cyclomatic complexity of the method is 10
Complex Method,de4dot.code.deobfuscators.Agile_NET.vm.v1,OpCodeHandlers,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\v1\OpCodeHandler.cs,arithmetic_read,Cyclomatic complexity of the method is 14
Complex Method,de4dot.code.deobfuscators.Agile_NET.vm.v1,OpCodeHandlers,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\v1\OpCodeHandler.cs,compare_read,Cyclomatic complexity of the method is 20
Complex Method,de4dot.code.deobfuscators.Agile_NET.vm.v1,UnknownHandlerInfo,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\v1\UnknownHandlerInfo.cs,FindOverrideMethods,Cyclomatic complexity of the method is 9
Complex Method,de4dot.code.deobfuscators.Agile_NET.vm.v1,VmOpCodeHandlerDetector,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\v1\VmOpCodeHandlerDetector.cs,IsStackType,Cyclomatic complexity of the method is 12
Complex Method,de4dot.code.deobfuscators.Agile_NET.vm.v2,CompositeHandlerDetector,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\v2\CompositeHandlerDetector.cs,Matches,Cyclomatic complexity of the method is 19
Complex Method,de4dot.code.deobfuscators.Agile_NET.vm.v2,CsvmInfo,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\v2\CsvmInfo.cs,FindLogicalOpMethod,Cyclomatic complexity of the method is 13
Complex Method,de4dot.code.deobfuscators.Agile_NET.vm.v2,CsvmInfo,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\v2\CsvmInfo.cs,FindLogicalOpMethod,Cyclomatic complexity of the method is 11
Complex Method,de4dot.code.deobfuscators.Agile_NET.vm.v2,CsvmInfo,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\v2\CsvmInfo.cs,FindCompareMethod,Cyclomatic complexity of the method is 15
Complex Method,de4dot.code.deobfuscators.Agile_NET.vm.v2,CsvmInfo,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\v2\CsvmInfo.cs,FindCompareEq,Cyclomatic complexity of the method is 11
Complex Method,de4dot.code.deobfuscators.Agile_NET.vm.v2,CsvmInfo,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\v2\CsvmInfo.cs,FindCompareEqz,Cyclomatic complexity of the method is 10
Complex Method,de4dot.code.deobfuscators.Agile_NET.vm.v2,CsvmInfo,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\v2\CsvmInfo.cs,FindArithmeticOpUn,Cyclomatic complexity of the method is 14
Complex Method,de4dot.code.deobfuscators.Agile_NET.vm.v2,CsvmInfo,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\v2\CsvmInfo.cs,FindArithmeticDivOrRemUn,Cyclomatic complexity of the method is 12
Complex Method,de4dot.code.deobfuscators.Agile_NET.vm.v2,CsvmInfo,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\v2\CsvmInfo.cs,FindArithmeticOther,Cyclomatic complexity of the method is 11
Complex Method,de4dot.code.deobfuscators.Agile_NET.vm.v2,CsvmInfo,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\v2\CsvmInfo.cs,IsUnsaryMethod,Cyclomatic complexity of the method is 10
Complex Method,de4dot.code.deobfuscators.Agile_NET.vm.v2,OpCodeHandlerInfo,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\v2\OpCodeHandlerInfo.cs,GetHandlerName,Cyclomatic complexity of the method is 79
Complex Method,de4dot.code.deobfuscators.Agile_NET.vm.v2,SigCreator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\v2\SigCreator.cs,Create,Cyclomatic complexity of the method is 8
Complex Method,de4dot.code.deobfuscators.Agile_NET.vm.v2,SigCreator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\v2\SigCreator.cs,CalculateHash,Cyclomatic complexity of the method is 27
Complex Method,de4dot.code.deobfuscators.Agile_NET.vm.v2,SigCreator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\v2\SigCreator.cs,Hash,Cyclomatic complexity of the method is 11
Complex Method,de4dot.code.deobfuscators.Agile_NET.vm.v2,SigCreator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\v2\SigCreator.cs,Hash,Cyclomatic complexity of the method is 13
Complex Method,de4dot.code.deobfuscators.Agile_NET.vm.v2,VmOpCodeHandlerDetector,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\v2\VmOpCodeHandlerDetector.cs,GetReadAndExecMethods,Cyclomatic complexity of the method is 9
Complex Method,de4dot.code.deobfuscators,ArrayFinder,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\ArrayFinder.cs,GetInitializedArray,Cyclomatic complexity of the method is 9
Complex Method,de4dot.code.deobfuscators,ConstantsReader,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\ConstantsReader.cs,GetInt32,Cyclomatic complexity of the method is 42
Complex Method,de4dot.code.deobfuscators,ConstantsReader,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\ConstantsReader.cs,GetInt64,Cyclomatic complexity of the method is 46
Complex Method,de4dot.code.deobfuscators,ConstantsReader,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\ConstantsReader.cs,GetDouble,Cyclomatic complexity of the method is 27
Complex Method,de4dot.code.deobfuscators,DeobfuscatorBase,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\DeobfuscatorBase.cs,IsTypeCalled,Cyclomatic complexity of the method is 11
Complex Method,de4dot.code.deobfuscators,DeobUtils,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\DeobUtils.cs,GetInitCctors,Cyclomatic complexity of the method is 8
Complex Method,de4dot.code.deobfuscators,ExceptionLoggerRemover,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\ExceptionLoggerRemover.cs,Find,Cyclomatic complexity of the method is 13
Complex Method,de4dot.code.deobfuscators,InlinedMethodsFinder,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\InlinedMethodsFinder.cs,Find,Cyclomatic complexity of the method is 13
Complex Method,de4dot.code.deobfuscators,MethodBodyParser,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MethodBodyParser.cs,ParseMethodBody2,Cyclomatic complexity of the method is 8
Complex Method,de4dot.code.deobfuscators,MethodStack,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MethodStack.cs,GetPushedArgInstructions,Cyclomatic complexity of the method is 12
Complex Method,de4dot.code.deobfuscators,MethodStack,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MethodStack.cs,GetLoadedType,Cyclomatic complexity of the method is 26
Complex Method,de4dot.code.deobfuscators,ProxyCallFixer1,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\ProxyCallFixerBase.cs,Find,Cyclomatic complexity of the method is 9
Complex Method,de4dot.code.deobfuscators,ProxyCallFixer1,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\ProxyCallFixerBase.cs,FindProxyCall,Cyclomatic complexity of the method is 14
Complex Method,de4dot.code.deobfuscators,ProxyCallFixer2,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\ProxyCallFixerBase.cs,Find2,Cyclomatic complexity of the method is 8
Complex Method,de4dot.code.deobfuscators,QuickLZBase,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\QuickLZ.cs,Decompress,Cyclomatic complexity of the method is 15
Complex Method,de4dot.code.deobfuscators,RandomNameChecker,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\RandomNameChecker.cs,IsNonRandom,Cyclomatic complexity of the method is 14
Complex Method,de4dot.code.deobfuscators,RandomNameChecker,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\RandomNameChecker.cs,IsRandom,Cyclomatic complexity of the method is 10
Complex Method,de4dot.code.deobfuscators,RandomNameChecker,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\RandomNameChecker.cs,GetTypeWords,Cyclomatic complexity of the method is 10
Complex Method,de4dot.code.deobfuscators,TypesRestorerBase,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\TypesRestorer.cs,DeobfuscateMethod,Cyclomatic complexity of the method is 25
Complex Method,de4dot.code.deobfuscators,TypesRestorerBase,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\TypesRestorer.cs,DeobfuscateFields,Cyclomatic complexity of the method is 21
Complex Method,de4dot.code.deobfuscators,TypesRestorerBase,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\TypesRestorer.cs,IsValidType,Cyclomatic complexity of the method is 10
Complex Method,de4dot.code.deobfuscators,UnusedMethodsFinder,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\UnusedMethodsFinder.cs,Check,Cyclomatic complexity of the method is 8
Complex Method,de4dot.code.deobfuscators.Babel_NET,BabelMethodCallInliner,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Babel_NET\BabelMethodCallInliner.cs,GetNewValue,Cyclomatic complexity of the method is 11
Complex Method,de4dot.code.deobfuscators.Babel_NET,BabelUtils,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Babel_NET\BabelUtils.cs,FindRegisterMethod,Cyclomatic complexity of the method is 11
Complex Method,de4dot.code.deobfuscators.Babel_NET,ConstantsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Babel_NET\ConstantsDecrypter.cs,IsConstantDecrypter,Cyclomatic complexity of the method is 9
Complex Method,de4dot.code.deobfuscators.Babel_NET,ConstantsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Babel_NET\ConstantsDecrypter.cs,Deobfuscate,Cyclomatic complexity of the method is 18
Complex Method,de4dot.code.deobfuscators.Babel_NET,ImageReader,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Babel_NET\ImageReader.cs,CompareMethod,Cyclomatic complexity of the method is 8
Complex Method,de4dot.code.deobfuscators.Babel_NET,ImageReader,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Babel_NET\ImageReader.cs,InitializeTypeRefs,Cyclomatic complexity of the method is 10
Complex Method,de4dot.code.deobfuscators.Babel_NET,ProxyCallFixer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Babel_NET\ProxyCallFixer.cs,CheckCctor,Cyclomatic complexity of the method is 8
Complex Method,de4dot.code.deobfuscators.Babel_NET,ProxyCallFixer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Babel_NET\ProxyCallFixer.cs,FindDelegateCreator,Cyclomatic complexity of the method is 8
Complex Method,de4dot.code.deobfuscators.Babel_NET,ResourceResolver,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Babel_NET\ResourceResolver.cs,InitXorKeys,Cyclomatic complexity of the method is 8
Complex Method,de4dot.code.deobfuscators.Babel_NET,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Babel_NET\StringDecrypter.cs,CheckDecryptMethodBabel2x,Cyclomatic complexity of the method is 12
Complex Method,de4dot.code.deobfuscators.Babel_NET,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Babel_NET\StringDecrypter.cs,CheckNested,Cyclomatic complexity of the method is 15
Complex Method,de4dot.code.deobfuscators.Babel_NET,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Babel_NET\StringDecrypter.cs,GetOffsetMagic,Cyclomatic complexity of the method is 11
Complex Method,de4dot.code.deobfuscators.Babel_NET,ReflectionToDNLibMethodCreator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Babel_NET\StringDecrypter.cs,Create,Cyclomatic complexity of the method is 16
Complex Method,de4dot.code.deobfuscators.CodeVeil,AssemblyResolver,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CodeVeil\AssemblyResolver.cs,FindBundleType,Cyclomatic complexity of the method is 8
Complex Method,de4dot.code.deobfuscators.CodeVeil,AssemblyResolver,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CodeVeil\AssemblyResolver.cs,FindAssemblyManagerType,Cyclomatic complexity of the method is 9
Complex Method,de4dot.code.deobfuscators.CodeVeil,AssemblyResolver,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CodeVeil\AssemblyResolver.cs,FindXmlParserType,Cyclomatic complexity of the method is 10
Complex Method,de4dot.code.deobfuscators.CodeVeil,AssemblyResolver,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CodeVeil\AssemblyResolver.cs,FindStreamProviderType,Cyclomatic complexity of the method is 10
Complex Method,de4dot.code.deobfuscators.CodeVeil,Deobfuscator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CodeVeil\Deobfuscator.cs,DeobfuscateEnd,Cyclomatic complexity of the method is 8
Complex Method,de4dot.code.deobfuscators.CodeVeil,MainType,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CodeVeil\MainType.cs,Find,Cyclomatic complexity of the method is 8
Complex Method,de4dot.code.deobfuscators.CodeVeil,MainType,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CodeVeil\MainType.cs,CheckInitMethod,Cyclomatic complexity of the method is 9
Complex Method,de4dot.code.deobfuscators.CodeVeil,MainType,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CodeVeil\MainType.cs,RemoveInitCall,Cyclomatic complexity of the method is 10
Complex Method,de4dot.code.deobfuscators.CodeVeil,MethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CodeVeil\MethodsDecrypter.cs,FindMethodsData,Cyclomatic complexity of the method is 8
Complex Method,de4dot.code.deobfuscators.CodeVeil,ProxyCallFixer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CodeVeil\ProxyCallFixer.cs,FindOtherTypes,Cyclomatic complexity of the method is 8
Complex Method,de4dot.code.deobfuscators.CodeVeil,ResourceConverter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CodeVeil\ResourceConverter.cs,Convert,Cyclomatic complexity of the method is 22
Complex Method,de4dot.code.deobfuscators.CodeVeil,ResourceDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CodeVeil\ResourceDecrypter.cs,FindResourceEnumerator,Cyclomatic complexity of the method is 10
Complex Method,de4dot.code.deobfuscators.CodeVeil,ResourceDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CodeVeil\ResourceDecrypter.cs,FindEncryptedResourceStreamType,Cyclomatic complexity of the method is 8
Complex Method,de4dot.code.deobfuscators.CodeVeil,ResourceReader,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CodeVeil\ResourceReader.cs,Read,Cyclomatic complexity of the method is 13
Complex Method,de4dot.code.deobfuscators.CodeVeil,TamperDetection,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CodeVeil\TamperDetection.cs,IsTamperDetectionClass,Cyclomatic complexity of the method is 10
Complex Method,de4dot.code.deobfuscators.CodeVeil,TamperDetection,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CodeVeil\TamperDetection.cs,CallsMainTypeTamperCheckMethod,Cyclomatic complexity of the method is 8
Complex Method,de4dot.code.deobfuscators.CodeWall,AssemblyDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CodeWall\AssemblyDecrypter.cs,GetResource,Cyclomatic complexity of the method is 8
Complex Method,de4dot.code.deobfuscators.CodeWall,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CodeWall\StringDecrypter.cs,CheckMethodsV36,Cyclomatic complexity of the method is 8
Complex Method,de4dot.code.deobfuscators.Confuser,AntiDebugger,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\AntiDebugger.cs,CheckMethod,Cyclomatic complexity of the method is 8
Complex Method,de4dot.code.deobfuscators.Confuser,AntiDebugger,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\AntiDebugger.cs,CheckMethod_normal,Cyclomatic complexity of the method is 25
Complex Method,de4dot.code.deobfuscators.Confuser,AntiDebugger,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\AntiDebugger.cs,CheckMethod_safe,Cyclomatic complexity of the method is 16
Complex Method,de4dot.code.deobfuscators.Confuser,AntiDebugger,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\AntiDebugger.cs,GetRevisionRange,Cyclomatic complexity of the method is 14
Complex Method,de4dot.code.deobfuscators.Confuser,AntiDumping,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\AntiDumping.cs,CheckMethod,Cyclomatic complexity of the method is 9
Complex Method,de4dot.code.deobfuscators.Confuser,AntiDumping,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\AntiDumping.cs,CheckType_v14_r58852,Cyclomatic complexity of the method is 16
Complex Method,de4dot.code.deobfuscators.Confuser,AntiDumping,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\AntiDumping.cs,IsRev75725,Cyclomatic complexity of the method is 14
Complex Method,de4dot.code.deobfuscators.Confuser,AntiDumping,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\AntiDumping.cs,GetRevisionRange,Cyclomatic complexity of the method is 9
Complex Method,de4dot.code.deobfuscators.Confuser,ConfuserUtils,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConfuserUtils.cs,RemoveResolveHandlerCode,Cyclomatic complexity of the method is 12
Complex Method,de4dot.code.deobfuscators.Confuser,ConstantsDecrypterBase,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsDecrypterBase.cs,GetDynamicLocal_v17_r73740,Cyclomatic complexity of the method is 8
Complex Method,de4dot.code.deobfuscators.Confuser,ConstantsDecrypterBase,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsDecrypterBase.cs,GetDynamicEndIndex_v17_r73740,Cyclomatic complexity of the method is 11
Complex Method,de4dot.code.deobfuscators.Confuser,ConstantsDecrypterBase,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsDecrypterBase.cs,GetDynamicEndIndex_v17_r74788,Cyclomatic complexity of the method is 14
Complex Method,de4dot.code.deobfuscators.Confuser,DecrypterInfo,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsDecrypterBase.cs,FindKey0,Cyclomatic complexity of the method is 8
Complex Method,de4dot.code.deobfuscators.Confuser,ConstantsDecrypterV15,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsDecrypterV15.cs,Find,Cyclomatic complexity of the method is 18
Complex Method,de4dot.code.deobfuscators.Confuser,ConstantsDecrypterV15,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsDecrypterV15.cs,DecryptConstant,Cyclomatic complexity of the method is 13
Complex Method,de4dot.code.deobfuscators.Confuser,ConstantsDecrypterV15,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsDecrypterV15.cs,GetRevisionRange,Cyclomatic complexity of the method is 11
Complex Method,de4dot.code.deobfuscators.Confuser,ConstantsDecrypterV17,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsDecrypterV17.cs,Find,Cyclomatic complexity of the method is 11
Complex Method,de4dot.code.deobfuscators.Confuser,ConstantsDecrypterV17,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsDecrypterV17.cs,DecryptConstant,Cyclomatic complexity of the method is 16
Complex Method,de4dot.code.deobfuscators.Confuser,DecrypterInfoV17,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsDecrypterV17.cs,FindKey1_v17,Cyclomatic complexity of the method is 8
Complex Method,de4dot.code.deobfuscators.Confuser,DecrypterInfoV17,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsDecrypterV17.cs,FindKey4_normal,Cyclomatic complexity of the method is 8
Complex Method,de4dot.code.deobfuscators.Confuser,ConstantsDecrypterV18,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsDecrypterV18.cs,Find,Cyclomatic complexity of the method is 13
Complex Method,de4dot.code.deobfuscators.Confuser,ConstantsDecrypterV18,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsDecrypterV18.cs,IsDecryptMethodSignature,Cyclomatic complexity of the method is 9
Complex Method,de4dot.code.deobfuscators.Confuser,ConstantsDecrypterV18,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsDecrypterV18.cs,FindLKeys_v18_r75367,Cyclomatic complexity of the method is 13
Complex Method,de4dot.code.deobfuscators.Confuser,ConstantsDecrypterV18,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsDecrypterV18.cs,FindLKeys_v18_r75369,Cyclomatic complexity of the method is 11
Complex Method,de4dot.code.deobfuscators.Confuser,ConstantsDecrypterV18,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsDecrypterV18.cs,GetRevisionRange,Cyclomatic complexity of the method is 8
Complex Method,de4dot.code.deobfuscators.Confuser,ConstantsFolder,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsFolder.cs,Deobfuscate,Cyclomatic complexity of the method is 19
Complex Method,de4dot.code.deobfuscators.Confuser,Deobfuscator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\Deobfuscator.cs,GetDecryptedModule,Cyclomatic complexity of the method is 10
Complex Method,de4dot.code.deobfuscators.Confuser,Deobfuscator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\Deobfuscator.cs,ModuleReloaded,Cyclomatic complexity of the method is 8
Complex Method,de4dot.code.deobfuscators.Confuser,Deobfuscator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\Deobfuscator.cs,GetStringDecrypterMethods,Cyclomatic complexity of the method is 8
Complex Method,de4dot.code.deobfuscators.Confuser,JitMethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\JitMethodsDecrypter.cs,CheckType,Cyclomatic complexity of the method is 18
Complex Method,de4dot.code.deobfuscators.Confuser,JitMethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\JitMethodsDecrypter.cs,FindCompileMethod,Cyclomatic complexity of the method is 9
Complex Method,de4dot.code.deobfuscators.Confuser,JitMethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\JitMethodsDecrypter.cs,FindHookConstructStr,Cyclomatic complexity of the method is 10
Complex Method,de4dot.code.deobfuscators.Confuser,JitMethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\JitMethodsDecrypter.cs,InitializeKeys,Cyclomatic complexity of the method is 11
Complex Method,de4dot.code.deobfuscators.Confuser,JitMethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\JitMethodsDecrypter.cs,InitializeKeys_v18_r75402,Cyclomatic complexity of the method is 8
Complex Method,de4dot.code.deobfuscators.Confuser,JitMethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\JitMethodsDecrypter.cs,InitializeMethodDataIndexes,Cyclomatic complexity of the method is 11
Complex Method,de4dot.code.deobfuscators.Confuser,JitMethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\JitMethodsDecrypter.cs,Decrypt,Cyclomatic complexity of the method is 12
Complex Method,de4dot.code.deobfuscators.Confuser,JitMethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\JitMethodsDecrypter.cs,Decrypt,Cyclomatic complexity of the method is 9
Complex Method,de4dot.code.deobfuscators.Confuser,JitMethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\JitMethodsDecrypter.cs,GetRevisionRange,Cyclomatic complexity of the method is 12
Complex Method,de4dot.code.deobfuscators.Confuser,MemoryMethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\MemoryMethodsDecrypter.cs,CheckType,Cyclomatic complexity of the method is 16
Complex Method,de4dot.code.deobfuscators.Confuser,MemoryMethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\MemoryMethodsDecrypter.cs,InitializeKeys_v17_r73605,Cyclomatic complexity of the method is 8
Complex Method,de4dot.code.deobfuscators.Confuser,MemoryMethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\MemoryMethodsDecrypter.cs,FindKey4,Cyclomatic complexity of the method is 11
Complex Method,de4dot.code.deobfuscators.Confuser,MemoryMethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\MemoryMethodsDecrypter.cs,FindKey5,Cyclomatic complexity of the method is 11
Complex Method,de4dot.code.deobfuscators.Confuser,MemoryMethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\MemoryMethodsDecrypter.cs,Decrypt,Cyclomatic complexity of the method is 12
Complex Method,de4dot.code.deobfuscators.Confuser,MemoryMethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\MemoryMethodsDecrypter.cs,GetRevisionRange,Cyclomatic complexity of the method is 12
Complex Method,de4dot.code.deobfuscators.Confuser,MethodsDecrypterBase,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\MethodsDecrypterBase.cs,FindKey0_v16_r71742,Cyclomatic complexity of the method is 9
Complex Method,de4dot.code.deobfuscators.Confuser,MethodsDecrypterBase,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\MethodsDecrypterBase.cs,FindKey0_v14_r58564,Cyclomatic complexity of the method is 9
Complex Method,de4dot.code.deobfuscators.Confuser,MethodsDecrypterBase,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\MethodsDecrypterBase.cs,FindKey1,Cyclomatic complexity of the method is 11
Complex Method,de4dot.code.deobfuscators.Confuser,MethodsDecrypterBase,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\MethodsDecrypterBase.cs,FindKey2OrKey3,Cyclomatic complexity of the method is 9
Complex Method,de4dot.code.deobfuscators.Confuser,MethodsDecrypterBase,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\MethodsDecrypterBase.cs,FindKey6,Cyclomatic complexity of the method is 8
Complex Method,de4dot.code.deobfuscators.Confuser,ProxyCallFixer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ProxyCallFixer.cs,CheckCctor,Cyclomatic complexity of the method is 8
Complex Method,de4dot.code.deobfuscators.Confuser,ProxyCallFixer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ProxyCallFixer.cs,GetCallInfo,Cyclomatic complexity of the method is 12
Complex Method,de4dot.code.deobfuscators.Confuser,ProxyCallFixer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ProxyCallFixer.cs,FindDelegateCreator,Cyclomatic complexity of the method is 33
Complex Method,de4dot.code.deobfuscators.Confuser,ProxyCallFixer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ProxyCallFixer.cs,IsMethodCreator_v14_r58802,Cyclomatic complexity of the method is 8
Complex Method,de4dot.code.deobfuscators.Confuser,ProxyCallFixer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ProxyCallFixer.cs,FindMagic_v19_r76101,Cyclomatic complexity of the method is 10
Complex Method,de4dot.code.deobfuscators.Confuser,ProxyCallFixer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ProxyCallFixer.cs,FindNativeMethod_v19_r76101,Cyclomatic complexity of the method is 10
Complex Method,de4dot.code.deobfuscators.Confuser,ProxyCallFixer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ProxyCallFixer.cs,Find,Cyclomatic complexity of the method is 12
Complex Method,de4dot.code.deobfuscators.Confuser,ProxyCallFixer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ProxyCallFixer.cs,CreateDelegateInitInfos_v10_r42915,Cyclomatic complexity of the method is 9
Complex Method,de4dot.code.deobfuscators.Confuser,ProxyCallFixer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ProxyCallFixer.cs,GetDelegateField,Cyclomatic complexity of the method is 8
Complex Method,de4dot.code.deobfuscators.Confuser,ProxyCallFixer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ProxyCallFixer.cs,GetRevisionRange,Cyclomatic complexity of the method is 23
Complex Method,de4dot.code.deobfuscators.Confuser,ResourceDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ResourceDecrypter.cs,CheckMethod,Cyclomatic complexity of the method is 14
Complex Method,de4dot.code.deobfuscators.Confuser,ResourceDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ResourceDecrypter.cs,GetHandler,Cyclomatic complexity of the method is 8
Complex Method,de4dot.code.deobfuscators.Confuser,ResourceDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ResourceDecrypter.cs,FindKey0_v18_r75369,Cyclomatic complexity of the method is 8
Complex Method,de4dot.code.deobfuscators.Confuser,ResourceDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ResourceDecrypter.cs,FindKey0Key1_v14_r55802,Cyclomatic complexity of the method is 8
Complex Method,de4dot.code.deobfuscators.Confuser,ResourceDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ResourceDecrypter.cs,GetRevisionRange,Cyclomatic complexity of the method is 8
Complex Method,de4dot.code.deobfuscators.Confuser,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\StringDecrypter.cs,Find,Cyclomatic complexity of the method is 17
Complex Method,de4dot.code.deobfuscators.Confuser,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\StringDecrypter.cs,FindMagic1,Cyclomatic complexity of the method is 8
Complex Method,de4dot.code.deobfuscators.Confuser,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\StringDecrypter.cs,FindMagic2,Cyclomatic complexity of the method is 8
Complex Method,de4dot.code.deobfuscators.Confuser,Decrypter_v11_r49299,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\StringDecrypter.cs,FindEndIndex,Cyclomatic complexity of the method is 8
Complex Method,de4dot.code.deobfuscators.Confuser,Unpacker,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\Unpacker.cs,Find,Cyclomatic complexity of the method is 25
Complex Method,de4dot.code.deobfuscators.Confuser,Unpacker,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\Unpacker.cs,Decrypt,Cyclomatic complexity of the method is 15
Complex Method,de4dot.code.deobfuscators.Confuser,Unpacker,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\Unpacker.cs,GetRevisionRange,Cyclomatic complexity of the method is 16
Complex Method,de4dot.code.deobfuscators.Confuser,VersionDetector,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\VersionDetector.cs,SetVersion,Cyclomatic complexity of the method is 8
Complex Method,de4dot.code.deobfuscators.Confuser,X86Emulator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\x86Emulator.cs,Emulate,Cyclomatic complexity of the method is 8
Complex Method,de4dot.code.deobfuscators.Confuser,X86Emulator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\x86Emulator.cs,Decode,Cyclomatic complexity of the method is 14
Complex Method,de4dot.code.deobfuscators.CryptoObfuscator,ConstantsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CryptoObfuscator\ConstantsDecrypter.cs,Deobfuscate,Cyclomatic complexity of the method is 12
Complex Method,de4dot.code.deobfuscators.CryptoObfuscator,CoUtils,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CryptoObfuscator\CoUtils.cs,DecryptResourceName,Cyclomatic complexity of the method is 11
Complex Method,de4dot.code.deobfuscators.CryptoObfuscator,InlinedMethodTypes,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CryptoObfuscator\InlinedMethodTypes.cs,IsValidType,Cyclomatic complexity of the method is 9
Complex Method,de4dot.code.deobfuscators.CryptoObfuscator,LdnullFixer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CryptoObfuscator\LdnullFixer.cs,FindFieldTypes,Cyclomatic complexity of the method is 9
Complex Method,de4dot.code.deobfuscators.CryptoObfuscator,LdnullFixer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CryptoObfuscator\LdnullFixer.cs,FindFieldTypes,Cyclomatic complexity of the method is 10
Complex Method,de4dot.code.deobfuscators.CryptoObfuscator,LdnullFixer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CryptoObfuscator\LdnullFixer.cs,Restore,Cyclomatic complexity of the method is 8
Complex Method,de4dot.code.deobfuscators.CryptoObfuscator,MethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CryptoObfuscator\MethodsDecrypter.cs,GetTokens,Cyclomatic complexity of the method is 9
Complex Method,de4dot.code.deobfuscators.CryptoObfuscator,ProxyCallFixer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CryptoObfuscator\ProxyCallFixer.cs,GetProxyCreateMethod,Cyclomatic complexity of the method is 8
Complex Method,de4dot.code.deobfuscators.CryptoObfuscator,ProxyCallFixer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CryptoObfuscator\ProxyCallFixer.cs,GetProxyCreatorType,Cyclomatic complexity of the method is 9
Complex Method,de4dot.code.deobfuscators.CryptoObfuscator,ResourceDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CryptoObfuscator\ResourceDecrypter.cs,FindDesktopOrCompactFrameworkV1,Cyclomatic complexity of the method is 11
Complex Method,de4dot.code.deobfuscators.CryptoObfuscator,ResourceDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CryptoObfuscator\ResourceDecrypter.cs,UpdateFlags,Cyclomatic complexity of the method is 15
Complex Method,de4dot.code.deobfuscators.CryptoObfuscator,ResourceDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CryptoObfuscator\ResourceDecrypter.cs,GetDecrypterMethods,Cyclomatic complexity of the method is 14
Complex Method,de4dot.code.deobfuscators.CryptoObfuscator,ResourceDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CryptoObfuscator\ResourceDecrypter.cs,Decrypt,Cyclomatic complexity of the method is 14
Complex Method,de4dot.code.deobfuscators.CryptoObfuscator,ResourceResolver,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CryptoObfuscator\ResourceResolver.cs,CheckSetupMethod,Cyclomatic complexity of the method is 8
Complex Method,de4dot.code.deobfuscators.CryptoObfuscator,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CryptoObfuscator\StringDecrypter.cs,FindStringDecrypterType,Cyclomatic complexity of the method is 11
Complex Method,de4dot.code.deobfuscators.CryptoObfuscator,TamperDetection,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CryptoObfuscator\TamperDetection.cs,FindSilverlight,Cyclomatic complexity of the method is 9
Complex Method,de4dot.code.deobfuscators.DeepSea,ArrayBlockDeobfuscator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\DeepSea\ArrayBlockDeobfuscator.cs,Deobfuscate3,Cyclomatic complexity of the method is 8
Complex Method,de4dot.code.deobfuscators.DeepSea,ArrayBlockState,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\DeepSea\ArrayBlockState.cs,InitializeArrays2,Cyclomatic complexity of the method is 9
Complex Method,de4dot.code.deobfuscators.DeepSea,ArrayBlockState,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\DeepSea\ArrayBlockState.cs,RemoveInitCode,Cyclomatic complexity of the method is 12
Complex Method,de4dot.code.deobfuscators.DeepSea,ArrayBlockState,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\DeepSea\ArrayBlockState.cs,FindFieldsToKeep,Cyclomatic complexity of the method is 8
Complex Method,de4dot.code.deobfuscators.DeepSea,AssemblyResolver,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\DeepSea\AssemblyResolver.cs,CheckHandlerV4,Cyclomatic complexity of the method is 10
Complex Method,de4dot.code.deobfuscators.DeepSea,AssemblyResolver,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\DeepSea\AssemblyResolver.cs,CheckHandlerV404_41,Cyclomatic complexity of the method is 13
Complex Method,de4dot.code.deobfuscators.DeepSea,CastDeobfuscator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\DeepSea\CastDeobfuscator.cs,Deobfuscate,Cyclomatic complexity of the method is 23
Complex Method,de4dot.code.deobfuscators.DeepSea,DsMethodCallInliner,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\DeepSea\DsMethodCallInliner.cs,InlineMethod,Cyclomatic complexity of the method is 8
Complex Method,de4dot.code.deobfuscators.DeepSea,DsMethodCallInliner,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\DeepSea\DsMethodCallInliner.cs,EmulateInstructions,Cyclomatic complexity of the method is 18
Complex Method,de4dot.code.deobfuscators.DeepSea,DsMethodCallInliner,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\DeepSea\DsMethodCallInliner.cs,CanInline,Cyclomatic complexity of the method is 10
Complex Method,de4dot.code.deobfuscators.DeepSea,DsUtils,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\DeepSea\DsUtils.cs,GetArgValue,Cyclomatic complexity of the method is 15
Complex Method,de4dot.code.deobfuscators.DeepSea,FieldsRestorer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\DeepSea\FieldsRestorer.cs,GetMovedTypes,Cyclomatic complexity of the method is 20
Complex Method,de4dot.code.deobfuscators.DeepSea,FieldsRestorer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\DeepSea\FieldsRestorer.cs,GetPossibleFields,Cyclomatic complexity of the method is 8
Complex Method,de4dot.code.deobfuscators.DeepSea,FieldsRestorer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\DeepSea\FieldsRestorer.cs,CheckMethods,Cyclomatic complexity of the method is 8
Complex Method,de4dot.code.deobfuscators.DeepSea,FieldsRestorer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\DeepSea\FieldsRestorer.cs,FixFieldCtorCalls,Cyclomatic complexity of the method is 8
Complex Method,de4dot.code.deobfuscators.DeepSea,ResourceResolver,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\DeepSea\ResourceResolver.cs,GetMagicArgIndex41Retail,Cyclomatic complexity of the method is 8
Complex Method,de4dot.code.deobfuscators.DeepSea,ResourceResolver,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\DeepSea\ResourceResolver.cs,CheckHandlerV40,Cyclomatic complexity of the method is 14
Complex Method,de4dot.code.deobfuscators.DeepSea,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\DeepSea\StringDecrypter.cs,FindKey,Cyclomatic complexity of the method is 9
Complex Method,de4dot.code.deobfuscators.DeepSea,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\DeepSea\StringDecrypter.cs,Find,Cyclomatic complexity of the method is 10
Complex Method,de4dot.code.deobfuscators.DeepSea,DecrypterInfo41,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\DeepSea\StringDecrypter.cs,FindKeyShift,Cyclomatic complexity of the method is 8
Complex Method,de4dot.code.deobfuscators.DeepSea,DecrypterInfo40,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\DeepSea\StringDecrypter.cs,FindFields,Cyclomatic complexity of the method is 10
Complex Method,de4dot.code.deobfuscators.DeepSea,DecrypterInfo13,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\DeepSea\StringDecrypter.cs,FindFields,Cyclomatic complexity of the method is 9
Complex Method,de4dot.code.deobfuscators.Dotfuscator,CflowDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Dotfuscator\CflowDecrypter.cs,CleanMethod,Cyclomatic complexity of the method is 9
Complex Method,de4dot.code.deobfuscators.Dotfuscator,CflowDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Dotfuscator\CflowDecrypter.cs,GetFixIndexs,Cyclomatic complexity of the method is 9
Complex Method,de4dot.code.deobfuscators.Dotfuscator,StringBuilderDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Dotfuscator\StringBuilderDecrypter.cs,GetStringBuilderFixIndexs,Cyclomatic complexity of the method is 12
Complex Method,de4dot.code.deobfuscators.Dotfuscator,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Dotfuscator\StringDecrypter.cs,FindStringDecrypterMethods,Cyclomatic complexity of the method is 15
Complex Method,de4dot.code.deobfuscators.dotNET_Reactor.v3,AntiStrongName,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\dotNET_Reactor\v3\AntiStrongName.cs,Remove,Cyclomatic complexity of the method is 30
Complex Method,de4dot.code.deobfuscators.dotNET_Reactor.v3,LibAssemblyResolver,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\dotNET_Reactor\v3\LibAssemblyResolver.cs,CheckInitMethod,Cyclomatic complexity of the method is 11
Complex Method,de4dot.code.deobfuscators.dotNET_Reactor.v3,MemoryPatcher,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\dotNET_Reactor\v3\MemoryPatcher.cs,GetPatchInfo,Cyclomatic complexity of the method is 8
Complex Method,de4dot.code.deobfuscators.dotNET_Reactor.v4,AntiStrongName,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\dotNET_Reactor\v4\AntiStrongName.cs,CheckType,Cyclomatic complexity of the method is 8
Complex Method,de4dot.code.deobfuscators.dotNET_Reactor.v4,AntiStrongName,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\dotNET_Reactor\v4\AntiStrongName.cs,Remove,Cyclomatic complexity of the method is 8
Complex Method,de4dot.code.deobfuscators.dotNET_Reactor.v4,AntiStrongName,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\dotNET_Reactor\v4\AntiStrongName.cs,FindBlock,Cyclomatic complexity of the method is 15
Complex Method,de4dot.code.deobfuscators.dotNET_Reactor.v4,AssemblyResolver,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\dotNET_Reactor\v4\AssemblyResolver.cs,CheckMethod,Cyclomatic complexity of the method is 11
Complex Method,de4dot.code.deobfuscators.dotNET_Reactor.v4,Deobfuscator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\dotNET_Reactor\v4\Deobfuscator.cs,DetectVersion,Cyclomatic complexity of the method is 26
Complex Method,de4dot.code.deobfuscators.dotNET_Reactor.v4,Deobfuscator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\dotNET_Reactor\v4\Deobfuscator.cs,DeobfuscateBegin,Cyclomatic complexity of the method is 19
Complex Method,de4dot.code.deobfuscators.dotNET_Reactor.v4,EmptyClass,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\dotNET_Reactor\v4\EmptyClass.cs,Initialize,Cyclomatic complexity of the method is 10
Complex Method,de4dot.code.deobfuscators.dotNET_Reactor.v4,EmptyClass,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\dotNET_Reactor\v4\EmptyClass.cs,IsEmptyClass,Cyclomatic complexity of the method is 12
Complex Method,de4dot.code.deobfuscators.dotNET_Reactor.v4,EncryptedResource,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\dotNET_Reactor\v4\EncryptedResource.cs,Initialize,Cyclomatic complexity of the method is 11
Complex Method,de4dot.code.deobfuscators.dotNET_Reactor.v4,DecrypterV2,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\dotNET_Reactor\v4\EncryptedResource.cs,FindStartEnd,Cyclomatic complexity of the method is 13
Complex Method,de4dot.code.deobfuscators.dotNET_Reactor.v4,DecrypterV2,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\dotNET_Reactor\v4\EncryptedResource.cs,FindStart,Cyclomatic complexity of the method is 13
Complex Method,de4dot.code.deobfuscators.dotNET_Reactor.v4,MetadataTokenObfuscator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\dotNET_Reactor\v4\MetadataTokenObfuscator.cs,Find,Cyclomatic complexity of the method is 11
Complex Method,de4dot.code.deobfuscators.dotNET_Reactor.v4,MetadataTokenObfuscator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\dotNET_Reactor\v4\MetadataTokenObfuscator.cs,Deobfuscate,Cyclomatic complexity of the method is 10
Complex Method,de4dot.code.deobfuscators.dotNET_Reactor.v4,MethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\dotNET_Reactor\v4\MethodsDecrypter.cs,Find,Cyclomatic complexity of the method is 10
Complex Method,de4dot.code.deobfuscators.dotNET_Reactor.v4,MethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\dotNET_Reactor\v4\MethodsDecrypter.cs,Decrypt,Cyclomatic complexity of the method is 18
Complex Method,de4dot.code.deobfuscators.dotNET_Reactor.v4,MethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\dotNET_Reactor\v4\MethodsDecrypter.cs,IsNewer45Decryption,Cyclomatic complexity of the method is 9
Complex Method,de4dot.code.deobfuscators.dotNET_Reactor.v4,NativeFileDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\dotNET_Reactor\v4\NativeFileDecrypter.cs,NativeFileDecrypter,Cyclomatic complexity of the method is 14
Complex Method,de4dot.code.deobfuscators.dotNET_Reactor.v4,NativeImageUnpacker,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\dotNET_Reactor\v4\NativeImageUnpacker.cs,Unpack,Cyclomatic complexity of the method is 8
Complex Method,de4dot.code.deobfuscators.dotNET_Reactor.v4,ResourceResolver,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\dotNET_Reactor\v4\ResourceResolver.cs,Find,Cyclomatic complexity of the method is 8
Complex Method,de4dot.code.deobfuscators.dotNET_Reactor.v4,ResourceResolver,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\dotNET_Reactor\v4\ResourceResolver.cs,FindInitMethod,Cyclomatic complexity of the method is 13
Complex Method,de4dot.code.deobfuscators.dotNET_Reactor.v4,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\dotNET_Reactor\v4\StringDecrypter.cs,Find,Cyclomatic complexity of the method is 11
Complex Method,de4dot.code.deobfuscators.dotNET_Reactor.v4,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\dotNET_Reactor\v4\StringDecrypter.cs,FindKeyIv,Cyclomatic complexity of the method is 12
Complex Method,de4dot.code.deobfuscators.Eazfuscator_NET,AssemblyResolver,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\AssemblyResolver.cs,CheckCalledMethods,Cyclomatic complexity of the method is 9
Complex Method,de4dot.code.deobfuscators.Eazfuscator_NET,ResourceMethodsRestorer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\ResourceMethodsRestorer.cs,Find,Cyclomatic complexity of the method is 8
Complex Method,de4dot.code.deobfuscators.Eazfuscator_NET,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\StringDecrypter.cs,Find,Cyclomatic complexity of the method is 8
Complex Method,de4dot.code.deobfuscators.Eazfuscator_NET,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\StringDecrypter.cs,FindConstants,Cyclomatic complexity of the method is 17
Complex Method,de4dot.code.deobfuscators.Eazfuscator_NET,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\StringDecrypter.cs,FindFlags2,Cyclomatic complexity of the method is 9
Complex Method,de4dot.code.deobfuscators.Eazfuscator_NET,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\StringDecrypter.cs,GetFlagsLocalOld,Cyclomatic complexity of the method is 8
Complex Method,de4dot.code.deobfuscators.Eazfuscator_NET,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\StringDecrypter.cs,Decrypt,Cyclomatic complexity of the method is 11
Complex Method,de4dot.code.deobfuscators.Eazfuscator_NET,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\StringDecrypter.cs,FindResourceFromStringBuilder,Cyclomatic complexity of the method is 9
Complex Method,de4dot.code.deobfuscators.Eazfuscator_NET,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\StringDecrypter.cs,FindShiftInts,Cyclomatic complexity of the method is 10
Complex Method,de4dot.code.deobfuscators.Eazfuscator_NET,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\StringDecrypter.cs,FindInts,Cyclomatic complexity of the method is 15
Complex Method,de4dot.code.deobfuscators.Eazfuscator_NET,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\StringDecrypter.cs,EmulateDynocodeOld,Cyclomatic complexity of the method is 14
Complex Method,de4dot.code.deobfuscators.Eazfuscator_NET,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\StringDecrypter.cs,EmulateDynocodeNew,Cyclomatic complexity of the method is 14
Complex Method,de4dot.code.deobfuscators.Eazfuscator_NET,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\StringDecrypter.cs,FindInitIntsIndex,Cyclomatic complexity of the method is 8
Complex Method,de4dot.code.deobfuscators.Eazfuscator_NET,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\StringDecrypter.cs,FindIntsCctor,Cyclomatic complexity of the method is 9
Complex Method,de4dot.code.deobfuscators.Eazfuscator_NET,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\StringDecrypter.cs,FindInt3New,Cyclomatic complexity of the method is 9
Complex Method,de4dot.code.deobfuscators.Eazfuscator_NET,VersionDetector,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\VersionDetector.cs,Detect,Cyclomatic complexity of the method is 28
Complex Method,de4dot.code.deobfuscators.Eazfuscator_NET,VersionDetector,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\VersionDetector.cs,GetNestedType,Cyclomatic complexity of the method is 11
Complex Method,de4dot.code.deobfuscators.Goliath_NET,DecrypterBase,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Goliath_NET\DecrypterBase.cs,Initialize,Cyclomatic complexity of the method is 15
Complex Method,de4dot.code.deobfuscators.Goliath_NET,DecrypterBase,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Goliath_NET\DecrypterBase.cs,GetDecrypterInfo,Cyclomatic complexity of the method is 8
Complex Method,de4dot.code.deobfuscators.Goliath_NET,DecrypterBase,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Goliath_NET\DecrypterBase.cs,FindDelegateInitType,Cyclomatic complexity of the method is 8
Complex Method,de4dot.code.deobfuscators.Goliath_NET,Deobfuscator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Goliath_NET\Deobfuscator.cs,DeobfuscateBegin,Cyclomatic complexity of the method is 8
Complex Method,de4dot.code.deobfuscators.Goliath_NET,LocalsRestorer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Goliath_NET\LocalsRestorer.cs,Initialize,Cyclomatic complexity of the method is 9
Complex Method,de4dot.code.deobfuscators.Goliath_NET,LocalsRestorer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Goliath_NET\LocalsRestorer.cs,Deobfuscate,Cyclomatic complexity of the method is 17
Complex Method,de4dot.code.deobfuscators.Goliath_NET,ProxyCallFixer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Goliath_NET\ProxyCallFixer.cs,CheckProxyMethod,Cyclomatic complexity of the method is 22
Complex Method,de4dot.code.deobfuscators.Goliath_NET,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Goliath_NET\StringDecrypter.cs,CheckDecrypterType,Cyclomatic complexity of the method is 11
Complex Method,de4dot.code.deobfuscators.Goliath_NET,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Goliath_NET\StringDecrypter.cs,Deobfuscate,Cyclomatic complexity of the method is 8
Complex Method,de4dot.code.deobfuscators.Goliath_NET,StrongNameChecker,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Goliath_NET\StrongNameChecker.cs,Deobfuscate,Cyclomatic complexity of the method is 9
Complex Method,de4dot.code.deobfuscators.ILProtector,DecrypterBase,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\ILProtector\DynamicMethodsDecrypter.cs,Decompress,Cyclomatic complexity of the method is 8
Complex Method,de4dot.code.deobfuscators.ILProtector,MainType,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\ILProtector\MainType.cs,CheckMethod,Cyclomatic complexity of the method is 8
Complex Method,de4dot.code.deobfuscators.ILProtector,MethodReader,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\ILProtector\MethodReader.cs,ReadType,Cyclomatic complexity of the method is 28
Complex Method,de4dot.code.deobfuscators.MaxtoCode,Deobfuscator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MaxtoCode\Deobfuscator.cs,RemoveDuplicateEmbeddedResources,Cyclomatic complexity of the method is 12
Complex Method,de4dot.code.deobfuscators.MaxtoCode,MethodInfos,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MaxtoCode\MethodsDecrypter.cs,InitializeDecrypter,Cyclomatic complexity of the method is 9
Complex Method,de4dot.code.deobfuscators.MaxtoCode,MethodInfos,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MaxtoCode\MethodsDecrypter.cs,GetRuntimeTimeStamp,Cyclomatic complexity of the method is 8
Complex Method,de4dot.code.deobfuscators.MaxtoCode,MethodInfos,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MaxtoCode\MethodsDecrypter.cs,InitializeInfos2,Cyclomatic complexity of the method is 8
Complex Method,de4dot.code.deobfuscators.MaxtoCode,MethodInfos,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MaxtoCode\MethodsDecrypter.cs,InitializeInfos2,Cyclomatic complexity of the method is 9
Complex Method,de4dot.code.deobfuscators.MaxtoCode,MethodInfos,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MaxtoCode\MethodsDecrypter.cs,Decrypt9,Cyclomatic complexity of the method is 8
Complex Method,de4dot.code.deobfuscators.MPRESS,Deobfuscator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MPRESS\Deobfuscator.cs,DetectVersion,Cyclomatic complexity of the method is 11
Complex Method,de4dot.code.deobfuscators.MPRESS,Lzmat,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MPRESS\Lzmat.cs,Decompress,Cyclomatic complexity of the method is 21
Complex Method,de4dot.code.deobfuscators.MPRESS,Lzmat,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MPRESS\Lzmat.cs,Lzmat_old,Cyclomatic complexity of the method is 12
Complex Method,de4dot.code.deobfuscators.Rummage,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Rummage\StringDecrypter.cs,GetStringInfo,Cyclomatic complexity of the method is 8
Complex Method,de4dot.code.deobfuscators.Rummage,DecrypterV21,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Rummage\StringDecrypter.cs,GetDispl,Cyclomatic complexity of the method is 9
Complex Method,de4dot.code.deobfuscators.Rummage,DecrypterV21,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Rummage\StringDecrypter.cs,InitializeBaseOffs,Cyclomatic complexity of the method is 8
Complex Method,de4dot.code.deobfuscators.Skater_NET,EnumClassFinder,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Skater_NET\EnumClassFinder.cs,Find,Cyclomatic complexity of the method is 8
Complex Method,de4dot.code.deobfuscators.Skater_NET,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Skater_NET\StringDecrypter.cs,Initialize,Cyclomatic complexity of the method is 11
Complex Method,de4dot.code.deobfuscators.Skater_NET,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Skater_NET\StringDecrypter.cs,Deobfuscate,Cyclomatic complexity of the method is 10
Complex Method,de4dot.code.deobfuscators.SmartAssembly,AutomatedErrorReportingFinder,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\SmartAssembly\AutomatedErrorReportingFinder.cs,CheckMethod,Cyclomatic complexity of the method is 9
Complex Method,de4dot.code.deobfuscators.SmartAssembly,AutomatedErrorReportingFinder,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\SmartAssembly\AutomatedErrorReportingFinder.cs,IsExceptionLoggerMethod,Cyclomatic complexity of the method is 16
Complex Method,de4dot.code.deobfuscators.SmartAssembly,Deobfuscator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\SmartAssembly\Deobfuscator.cs,GetTypeIdAttribute,Cyclomatic complexity of the method is 11
Complex Method,de4dot.code.deobfuscators.SmartAssembly,Deobfuscator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\SmartAssembly\Deobfuscator.cs,InitStringDecrypterInfos,Cyclomatic complexity of the method is 11
Complex Method,de4dot.code.deobfuscators.SmartAssembly,ProxyCallFixer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\SmartAssembly\ProxyCallFixer.cs,CheckCctor,Cyclomatic complexity of the method is 8
Complex Method,de4dot.code.deobfuscators.SmartAssembly,ResolverInfoBase,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\SmartAssembly\ResolverInfoBase.cs,CheckAttachAppMethod,Cyclomatic complexity of the method is 12
Complex Method,de4dot.code.deobfuscators.SmartAssembly,ResolverInfoBase,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\SmartAssembly\ResolverInfoBase.cs,GetResolverHandlers,Cyclomatic complexity of the method is 8
Complex Method,de4dot.code.deobfuscators.SmartAssembly,ResourceDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\SmartAssembly\ResourceDecrypter.cs,Decrypt,Cyclomatic complexity of the method is 12
Complex Method,de4dot.code.deobfuscators.SmartAssembly,ResourceDecrypterInfo,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\SmartAssembly\ResourceDecrypterInfo.cs,Initialize,Cyclomatic complexity of the method is 11
Complex Method,de4dot.code.deobfuscators.SmartAssembly,StringDecrypterInfo,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\SmartAssembly\StringDecrypterInfo.cs,Initialize,Cyclomatic complexity of the method is 14
Complex Method,de4dot.code.deobfuscators.SmartAssembly,StringDecrypterInfo,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\SmartAssembly\StringDecrypterInfo.cs,FindSimpleZipTypeMethod,Cyclomatic complexity of the method is 9
Complex Method,de4dot.code.deobfuscators.SmartAssembly,StringDecrypterInfo,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\SmartAssembly\StringDecrypterInfo.cs,RemoveInitCode_v2,Cyclomatic complexity of the method is 9
Complex Method,de4dot.code.deobfuscators.SmartAssembly,TamperProtectionRemover,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\SmartAssembly\TamperProtectionRemover.cs,FindFirstBlocks,Cyclomatic complexity of the method is 28
Complex Method,de4dot.code.deobfuscators.Spices_Net,ResourceNamesRestorer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Spices_Net\ResourceNamesRestorer.cs,RenameResources,Cyclomatic complexity of the method is 13
Complex Method,de4dot.code.deobfuscators.Spices_Net,ResourceNamesRestorer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Spices_Net\ResourceNamesRestorer.cs,Deobfuscate,Cyclomatic complexity of the method is 8
Complex Method,de4dot.code.deobfuscators.Spices_Net,SpicesMethodCallInliner,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Spices_Net\SpicesMethodCallInliner.cs,RestoreMethodBodies,Cyclomatic complexity of the method is 12
Complex Method,de4dot.code.deobfuscators.Spices_Net,SpicesMethodCallInliner,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Spices_Net\SpicesMethodCallInliner.cs,CheckRestoreBody,Cyclomatic complexity of the method is 9
Complex Method,de4dot.code.deobfuscators.Spices_Net,SpicesMethodCallInliner,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Spices_Net\SpicesMethodCallInliner.cs,CheckMethodsType,Cyclomatic complexity of the method is 9
Complex Method,de4dot.code.deobfuscators.Spices_Net,SpicesMethodCallInliner,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Spices_Net\SpicesMethodCallInliner.cs,CheckMethods,Cyclomatic complexity of the method is 8
Complex Method,de4dot.code.deobfuscators.Spices_Net,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Spices_Net\StringDecrypter.cs,Find,Cyclomatic complexity of the method is 11
Complex Method,de4dot.code.deobfuscators.Spices_Net,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Spices_Net\StringDecrypter.cs,GetStringDataFlags,Cyclomatic complexity of the method is 9
Complex Method,de4dot.code.deobfuscators.Spices_Net,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Spices_Net\StringDecrypter.cs,CallsDecompressor,Cyclomatic complexity of the method is 11
Complex Method,de4dot.code.deobfuscators.Spices_Net,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Spices_Net\StringDecrypter.cs,Initialize,Cyclomatic complexity of the method is 8
Complex Method,de4dot.code.deobfuscators.Xenocode,Deobfuscator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Xenocode\Deobfuscator.cs,IsTypeWithThousandsOfMethods,Cyclomatic complexity of the method is 11
Complex Method,de4dot.code.deobfuscators.Xenocode,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Xenocode\StringDecrypter.cs,Find,Cyclomatic complexity of the method is 12
Complex Method,de4dot.code.renamer.asmmodules,Module,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\renamer\asmmodules\Module.cs,ResolveAllRefs,Cyclomatic complexity of the method is 15
Complex Method,de4dot.code.renamer.asmmodules,Modules,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\renamer\asmmodules\Modules.cs,InitAllTypes,Cyclomatic complexity of the method is 16
Complex Method,de4dot.code.renamer.asmmodules,Modules,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\renamer\asmmodules\Modules.cs,ResolveOther,Cyclomatic complexity of the method is 10
Complex Method,de4dot.code.renamer.asmmodules,Modules,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\renamer\asmmodules\Modules.cs,FindModules,Cyclomatic complexity of the method is 13
Complex Method,de4dot.code.renamer.asmmodules,AssemblyKeyDictionary<T>,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\renamer\asmmodules\Modules.cs,TryGetSimilarValue,Cyclomatic complexity of the method is 11
Complex Method,de4dot.code.renamer.asmmodules,MTypeDef,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\renamer\asmmodules\TypeDef.cs,AddMembers,Cyclomatic complexity of the method is 16
Complex Method,de4dot.code.renamer.asmmodules,MTypeDef,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\renamer\asmmodules\TypeDef.cs,InitializeInterfaceMethods,Cyclomatic complexity of the method is 34
Complex Method,de4dot.code.renamer.asmmodules,MTypeDef,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\renamer\asmmodules\TypeDef.cs,InstantiateVirtualMembers,Cyclomatic complexity of the method is 9
Complex Method,de4dot.code.renamer,MemberInfos,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\renamer\MemberInfos.cs,Initialize,Cyclomatic complexity of the method is 9
Complex Method,de4dot.code.renamer,TypeNameCreator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\renamer\NameCreators.cs,GetNameCreator,Cyclomatic complexity of the method is 9
Complex Method,de4dot.code.renamer,Renamer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\renamer\Renamer.cs,RemoveUselessOverrides,Cyclomatic complexity of the method is 8
Complex Method,de4dot.code.renamer,Renamer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\renamer\Renamer.cs,RemoveOneClassNamespaces,Cyclomatic complexity of the method is 9
Complex Method,de4dot.code.renamer,Renamer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\renamer\Renamer.cs,RenameMethods2,Cyclomatic complexity of the method is 13
Complex Method,de4dot.code.renamer,Renamer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\renamer\Renamer.cs,RenameMemberRefs,Cyclomatic complexity of the method is 8
Complex Method,de4dot.code.renamer,Renamer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\renamer\Renamer.cs,ResetVirtualPropertyNames,Cyclomatic complexity of the method is 10
Complex Method,de4dot.code.renamer,Renamer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\renamer\Renamer.cs,ResetVirtualEventNames,Cyclomatic complexity of the method is 10
Complex Method,de4dot.code.renamer,Renamer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\renamer\Renamer.cs,RestoreVirtualProperties,Cyclomatic complexity of the method is 9
Complex Method,de4dot.code.renamer,Renamer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\renamer\Renamer.cs,RestorePropertiesFromNames2,Cyclomatic complexity of the method is 15
Complex Method,de4dot.code.renamer,Renamer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\renamer\Renamer.cs,CreatePropertyGetter,Cyclomatic complexity of the method is 8
Complex Method,de4dot.code.renamer,Renamer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\renamer\Renamer.cs,CreatePropertySetter,Cyclomatic complexity of the method is 8
Complex Method,de4dot.code.renamer,Renamer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\renamer\Renamer.cs,RestoreVirtualEvents,Cyclomatic complexity of the method is 9
Complex Method,de4dot.code.renamer,Renamer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\renamer\Renamer.cs,RestoreEventsFromNames2,Cyclomatic complexity of the method is 15
Complex Method,de4dot.code.renamer,Renamer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\renamer\Renamer.cs,PrepareRenameMemberDefs,Cyclomatic complexity of the method is 9
Complex Method,de4dot.code.renamer,Renamer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\renamer\Renamer.cs,RestoreMethodArgs,Cyclomatic complexity of the method is 8
Complex Method,de4dot.code.renamer,Renamer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\renamer\Renamer.cs,GetValidArgNames,Cyclomatic complexity of the method is 10
Complex Method,de4dot.code.renamer,Renamer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\renamer\Renamer.cs,PrepareRenameEvent,Cyclomatic complexity of the method is 14
Complex Method,de4dot.code.renamer,Renamer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\renamer\Renamer.cs,PrepareRenameProperty,Cyclomatic complexity of the method is 13
Complex Method,de4dot.code.renamer,Renamer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\renamer\Renamer.cs,PrepareRenameVirtualMethods,Cyclomatic complexity of the method is 9
Complex Method,de4dot.code.renamer,GroupHelper,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\renamer\Renamer.cs,Visit,Cyclomatic complexity of the method is 8
Complex Method,de4dot.code.renamer,ResourceKeysRenamer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\renamer\ResourceKeysRenamer.cs,GetResourceName,Cyclomatic complexity of the method is 8
Complex Method,de4dot.code.renamer,ResourceKeysRenamer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\renamer\ResourceKeysRenamer.cs,Rename,Cyclomatic complexity of the method is 14
Complex Method,de4dot.code.renamer,ResourceRenamer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\renamer\ResourceRenamer.cs,RenameResourceNamesInCode,Cyclomatic complexity of the method is 10
Complex Method,de4dot.code.renamer,TypeInfo,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\renamer\TypeInfo.cs,PrepareRenameTypes,Cyclomatic complexity of the method is 10
Complex Method,de4dot.code.renamer,TypeInfo,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\renamer\TypeInfo.cs,PrepareRenameFields,Cyclomatic complexity of the method is 10
Complex Method,de4dot.code.renamer,TypeInfo,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\renamer\TypeInfo.cs,PrepareRenameMethodArgs,Cyclomatic complexity of the method is 14
Complex Method,de4dot.code.renamer,TypeInfo,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\renamer\TypeInfo.cs,RenameMethod,Cyclomatic complexity of the method is 8
Complex Method,de4dot.code.renamer,TypeInfo,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\renamer\TypeInfo.cs,InitializeWindowsFormsFieldsAndProps,Cyclomatic complexity of the method is 19
Complex Method,de4dot.code.renamer,TypeInfo,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\renamer\TypeInfo.cs,GetFieldRef,Cyclomatic complexity of the method is 9
Complex Method,de4dot.code.renamer,TypeInfo,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\renamer\TypeInfo.cs,GetVbHandler,Cyclomatic complexity of the method is 23
Complex Method,de4dot.code.renamer,TypeInfo,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\renamer\TypeInfo.cs,InitFieldEventHandlers,Cyclomatic complexity of the method is 21
Complex Method,de4dot.code.renamer,TypeInfo,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\renamer\TypeInfo.cs,InitTypeEventHandlers,Cyclomatic complexity of the method is 18
Complex Method,de4dot.code.renamer,TypeInfo,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\renamer\TypeInfo.cs,FindWindowsFormsClassName,Cyclomatic complexity of the method is 10
Complex Method,de4dot.code.renamer,TypeNames,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\renamer\TypeNames.cs,Create,Cyclomatic complexity of the method is 9
Complex Method,ICSharpCode.SharpZipLib.Checksums,Adler32,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\SharpZipLib\Checksums\Adler32.cs,Update,Cyclomatic complexity of the method is 9
Complex Method,ICSharpCode.SharpZipLib.Zip.Compression,Inflater,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\SharpZipLib\Zip\Compression\Inflater.cs,DecodeHuffman,Cyclomatic complexity of the method is 15
Complex Method,ICSharpCode.SharpZipLib.Zip.Compression,Inflater,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\SharpZipLib\Zip\Compression\Inflater.cs,Decode,Cyclomatic complexity of the method is 19
Complex Method,ICSharpCode.SharpZipLib.Zip.Compression,InflaterHuffmanTree,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\SharpZipLib\Zip\Compression\InflaterHuffmanTree.cs,BuildTree,Cyclomatic complexity of the method is 10
Long Parameter List,SevenZip.Compression.LZMA,Decoder,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\7zip\Compress\LZMA\LzmaDecoder.cs,Code,The method has 5 parameters. Parameters: inStream' outStream' inSize' outSize' progress
Long Parameter List,SevenZip,ICoder,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\7zip\ICoder.cs,Code,The method has 5 parameters. Parameters: inStream' outStream' inSize' outSize' progress
Long Parameter List,de4dot.code,DumpedMethodsRestorer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\DumpedMethodsRestorer.cs,GetMethodBody,The method has 5 parameters. Parameters: rid' rva' parameters' gpContext' methodBody
Long Parameter List,de4dot.code,Logger,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\Logger.cs,Log,The method has 5 parameters. Parameters: canIgnore' sender' loggerEvent' format' args
Long Parameter List,de4dot.code,ObfuscatedFile,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\ObfuscatedFile.cs,Deobfuscate,The method has 5 parameters. Parameters: method' cflowDeobfuscator' methodPrinter' isVerbose' isVV
Long Parameter List,de4dot.code,OneArgOption,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\Option.cs,OneArgOption,The method has 5 parameters. Parameters: shortName' longName' description' typeName' action
Long Parameter List,de4dot.code.deobfuscators.Agile_NET.vm.v2,CsvmInfo,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\v2\CsvmInfo.cs,FindLogicalOpMethod,The method has 5 parameters. Parameters: type' e1' e2' e3' code
Long Parameter List,de4dot.code.deobfuscators,DeobUtils,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\DeobUtils.cs,DesDecrypt,The method has 5 parameters. Parameters: data' start' len' key' iv
Long Parameter List,de4dot.code.deobfuscators,InitializedDataCreator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\InitializedDataCreator.cs,AddInitializeArrayCode,The method has 5 parameters. Parameters: block' start' numToRemove' elementType' data
Long Parameter List,de4dot.code.deobfuscators,MemberRefBuilder,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MemberReferenceBuilder.cs,Method,The method has 5 parameters. Parameters: isInstance' name' declaringType' returnType' args
Long Parameter List,de4dot.code.deobfuscators,MethodStack,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MethodStack.cs,GetLoadedType,The method has 5 parameters. Parameters: method' instructions' instrIndex' argIndexFromEnd' wasNewobj
Long Parameter List,de4dot.code.deobfuscators,ProxyCallFixer1,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\ProxyCallFixerBase.cs,FindProxyCall,The method has 5 parameters. Parameters: di' block' index' visited' stack
Long Parameter List,de4dot.code.deobfuscators,QuickLZBase,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\QuickLZ.cs,Copy,The method has 5 parameters. Parameters: src' srcIndex' dst' dstIndex' size
Long Parameter List,de4dot.code.deobfuscators,TypesRestorerBase,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\TypesRestorer.cs,GetLoadedType,The method has 5 parameters. Parameters: gpp' method' instructions' instrIndex' wasNewobj
Long Parameter List,de4dot.code.deobfuscators.CodeFort,TypeInfo,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CodeFort\AssemblyData.cs,TypeInfo,The method has 5 parameters. Parameters: baseType' name' dcNamespace' dcName' fieldInfos
Long Parameter List,de4dot.code.deobfuscators.CodeFort,AssemblyInfo,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CodeFort\AssemblyDecrypter.cs,AssemblyInfo,The method has 5 parameters. Parameters: data' resource' asmFullName' asmSimpleName' extension
Long Parameter List,de4dot.code.deobfuscators.CodeVeil,MethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CodeVeil\MethodsDecrypter.cs,Compare,The method has 5 parameters. Parameters: a1' i1' a2' i2' len
Long Parameter List,de4dot.code.deobfuscators.CodeWall,AssemblyInfo,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CodeWall\AssemblyDecrypter.cs,AssemblyInfo,The method has 5 parameters. Parameters: data' extension' assemblyFullName' assemblySimpleName' isEntryPointAssembly
Long Parameter List,de4dot.code.deobfuscators.Confuser,ConfuserUtils,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConfuserUtils.cs,DecryptCompressedInt32Data,The method has 5 parameters. Parameters: constReader' exprStart' exprEnd' reader' decrypted
Long Parameter List,de4dot.code.deobfuscators.Confuser,ConstantsDecrypterBase,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsDecrypterBase.cs,DecryptConstant_v17_r73740_dynamic,The method has 5 parameters. Parameters: info' encrypted' offs' key1' key2
Long Parameter List,de4dot.code.deobfuscators.Confuser,ConstantsDecrypterBase,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsDecrypterBase.cs,DecryptConstant_v17_r73764_native,The method has 5 parameters. Parameters: info' encrypted' offs' key1' key2
Long Parameter List,de4dot.code.deobfuscators.Confuser,DecryptMethodData,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\JitMethodsDecrypter.cs,Decrypt,The method has 6 parameters. Parameters: fileData' offset' k1' size' methodData' codeData
Long Parameter List,de4dot.code.deobfuscators.Confuser,DecryptMethodData_v17_r73477,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\JitMethodsDecrypter.cs,Decrypt,The method has 6 parameters. Parameters: fileData' offset' k1' size' methodData' codeData
Long Parameter List,de4dot.code.deobfuscators.Confuser,DecryptMethodData_v17_r73479,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\JitMethodsDecrypter.cs,Decrypt,The method has 6 parameters. Parameters: fileData' offset' k1' size' methodData' codeData
Long Parameter List,de4dot.code.deobfuscators.Confuser,DecryptMethodData_v18_r75402,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\JitMethodsDecrypter.cs,Decrypt,The method has 6 parameters. Parameters: fileData' offset' k1' size' methodData' codeData
Long Parameter List,de4dot.code.deobfuscators.Confuser,ProxyCallFixer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ProxyCallFixer.cs,Extract_v17_r73740,The method has 5 parameters. Parameters: creatorInfo' nameInfo' arg' table' isCallvirt
Long Parameter List,de4dot.code.deobfuscators.Confuser,ProxyCallFixer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ProxyCallFixer.cs,GetCallInfo_v18_r75367,The method has 5 parameters. Parameters: info' creatorInfo' calledMethod' callOpcode' getRid
Long Parameter List,de4dot.code.deobfuscators.Confuser,ProxyCreatorInfo,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ProxyCallFixer.cs,ProxyCreatorInfo,The method has 6 parameters. Parameters: creatorMethod' proxyCreatorType' version' magic' nativeMethod' callvirtChar
Long Parameter List,de4dot.code.deobfuscators.CryptoObfuscator,ArrayInfo,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CryptoObfuscator\ConstantsDecrypter.cs,ArrayInfo,The method has 5 parameters. Parameters: start' len' arrayType' arySize' index
Long Parameter List,de4dot.code.deobfuscators.DeepSea,AssemblyInfo,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\DeepSea\AssemblyResolver.cs,AssemblyInfo,The method has 5 parameters. Parameters: data' fullName' simpleName' extension' resource
Long Parameter List,de4dot.code.deobfuscators.DeepSea,DecrypterInfo41,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\DeepSea\StringDecrypter.cs,DecryptRetail,The method has 7 parameters. Parameters: magic2' magic3' keyCharOffs' cachedIndexOffs' flagsOffset' flag' keyDispl
Long Parameter List,de4dot.code.deobfuscators.dotNET_Reactor.v4,MethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\dotNET_Reactor\v4\MethodsDecrypter.cs,Decrypt,The method has 5 parameters. Parameters: peImage' simpleDeobfuscator' dumpedMethods' tokenToNativeCode' unpackedNativeFile
Long Parameter List,de4dot.code.deobfuscators.Eazfuscator_NET,AssemblyResolver,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\AssemblyResolver.cs,GetTheOnlyMethod,The method has 5 parameters. Parameters: type' typeName' methodName' returnType' parameters
Long Parameter List,de4dot.code.deobfuscators.Eazfuscator_NET,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\StringDecrypter.cs,GetIndexOfCall,The method has 5 parameters. Parameters: instrs' startIndex' endIndex' returnType' parameters
Long Parameter List,de4dot.code.deobfuscators.ILProtector,DecrypterBase,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\ILProtector\DynamicMethodsDecrypter.cs,Copy,The method has 5 parameters. Parameters: src' srcIndex' dst' dstIndex' size
Long Parameter List,de4dot.code.deobfuscators.ILProtector,DecrypterV2_0_12_3,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\ILProtector\DynamicMethodsDecrypter.cs,DecryptCallback,The method has 5 parameters. Parameters: a' pMethodCode' methodSize' methodId' e
Long Parameter List,de4dot.code.deobfuscators.ILProtector,DecrypterV2_0_13_0_Base,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\ILProtector\DynamicMethodsDecrypter.cs,DecryptCallback,The method has 5 parameters. Parameters: a' pMethodCode' methodSize' methodId' e
Long Parameter List,de4dot.code.deobfuscators.MaxtoCode,MethodInfos,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MaxtoCode\MethodsDecrypter.cs,MethodInfos,The method has 5 parameters. Parameters: module' mainType' peImage' peHeader' mcKey
Long Parameter List,de4dot.code.deobfuscators.MaxtoCode,MethodInfos,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MaxtoCode\MethodsDecrypter.cs,Decrypt,The method has 5 parameters. Parameters: decrypter' type' dataOffset' encryptedSize' realSize
Long Parameter List,de4dot.code.deobfuscators.MPRESS,Lzmat,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MPRESS\Lzmat.cs,Lzmat_old,The method has 6 parameters. Parameters: outBuf' outIndex' outLen' inBuf' inIndex' inLen
Long Parameter List,de4dot.code.renamer,Renamer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\renamer\Renamer.cs,CreateProperty,The method has 5 parameters. Parameters: ownerType' name' propType' getter' setter
Long Identifier,SevenZip.Compression.LZMA,Base,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\7zip\Compress\LZMA\LzmaBase.cs,,The length of the parameter kNumLitPosStatesBitsEncodingMax is 31.
Long Identifier,de4dot.code.deobfuscators,DeobfuscatorBase,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\DeobfuscatorBase.cs,,The length of the parameter DEFAULT_ASIAN_VALID_NAME_REGEX is 30.
Long Identifier,de4dot.code.deobfuscators.CodeVeil,ResourceDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CodeVeil\ResourceDecrypter.cs,FindManifestResourceStreamMethods,The length of the parameter getManifestResourceStreamMethodTmp1 is 35.
Long Identifier,de4dot.code.deobfuscators.CodeVeil,ResourceDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CodeVeil\ResourceDecrypter.cs,FindManifestResourceStreamMethods,The length of the parameter getManifestResourceStreamMethodTmp2 is 35.
Long Identifier,de4dot.code.deobfuscators.CodeVeil,ResourceDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CodeVeil\ResourceDecrypter.cs,,The length of the parameter encryptedResourceSet_GetDefaultReader is 37.
Long Identifier,de4dot.code.deobfuscators.CodeVeil,ResourceDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CodeVeil\ResourceDecrypter.cs,,The length of the parameter encryptedResourceReaderTypeDict is 31.
Long Identifier,de4dot.code.deobfuscators.CodeVeil,ResourceDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CodeVeil\ResourceDecrypter.cs,,The length of the parameter encryptedResourceReaderType_fields is 34.
Long Identifier,de4dot.code.deobfuscators.CodeVeil,ResourceDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CodeVeil\ResourceDecrypter.cs,,The length of the parameter encryptedResourceStreamType_fields is 34.
Long Identifier,de4dot.code.deobfuscators.Confuser,Deobfuscator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\Deobfuscator.cs,,The length of the parameter hasInitializedConstantsDecrypter is 32.
Long Identifier,de4dot.code.deobfuscators.Confuser,Deobfuscator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\Deobfuscator.cs,,The length of the parameter hasInitializedConstantsDecrypter15 is 34.
Long Identifier,de4dot.code.deobfuscators.Confuser,Deobfuscator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\Deobfuscator.cs,,The length of the parameter hasInitializedConstantsDecrypter17 is 34.
Long Identifier,de4dot.code.deobfuscators.CryptoObfuscator,Deobfuscator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CryptoObfuscator\Deobfuscator.cs,,The length of the parameter foundCryptoObfuscatorAttribute is 30.
Long Identifier,de4dot.code.deobfuscators.dotNET_Reactor.v4,Deobfuscator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\dotNET_Reactor\v4\Deobfuscator.cs,DetectVersion,The length of the parameter compileMethodHasConstant_0x70000000 is 35.
Long Identifier,de4dot.code.deobfuscators.Eazfuscator_NET,AssemblyResolver,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\AssemblyResolver.cs,FindCodeDomMethods,The length of the parameter CompileAssemblyFromSourceBatch2 is 31.
Long Identifier,de4dot.code.deobfuscators.Eazfuscator_NET,AssemblyResolver,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\AssemblyResolver.cs,,The length of the parameter codeCompilerMethodCallRestorer is 30.
Long Identifier,de4dot.code.deobfuscators.Eazfuscator_NET,ResourceMethodsRestorer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\ResourceMethodsRestorer.cs,,The length of the parameter getManifestResourceStreamTypeResource is 37.
Long Identifier,de4dot.code.deobfuscators.ILProtector,DynamicMethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\ILProtector\DynamicMethodsDecrypter.cs,,The length of the parameter methodReaderHasDelegateTypeFlag is 31.
Long Identifier,de4dot.code.deobfuscators.ILProtector,DecrypterV2_0_12_0,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\ILProtector\DynamicMethodsDecrypter.cs,,The length of the parameter getCallerMethodAsILByteArrayDelegate is 36.
Long Identifier,de4dot.code.deobfuscators.ILProtector,DecrypterV2_0_12_3,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\ILProtector\DynamicMethodsDecrypter.cs,,The length of the parameter getCallerMethodAsILByteArrayDelegate is 36.
Long Identifier,de4dot.code.deobfuscators.ILProtector,DecrypterV2_0_13_0_Base,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\ILProtector\DynamicMethodsDecrypter.cs,,The length of the parameter getCallerMethodAsILByteArrayDelegate is 36.
Long Identifier,de4dot.code.renamer.asmmodules,MTypeDef,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\renamer\asmmodules\TypeDef.cs,,The length of the parameter initializeVirtualMembersCalled is 30.
Long Statement,de4dot.code,DumpedMethodsRestorer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\DumpedMethodsRestorer.cs,GetMethodBody,The length of the statement  "			methodBody = MethodBodyReader.CreateCilBody(module' dm.code' dm.extraSections' parameters' dm.mhFlags' dm.mhMaxStack' dm.mhCodeSize' dm.mhLocalVarSigTok' gpContext); " is 165.
Long Statement,de4dot.code,MethodPrinter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\MethodPrinter.cs,Print,The length of the statement  "					Logger.Log(loggerEvent' "{0'-9} {1} // {2:X8}"' instrString' Utils.RemoveNewlines(operandString)' memberRef.MDToken.ToUInt32()); " is 128.
Long Statement,de4dot.code,ObfuscatedFile,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\ObfuscatedFile.cs,GetDefaultNewFilename,The length of the statement  "			string newFilename = Path.GetFileNameWithoutExtension(options.Filename) + "-cleaned" + Path.GetExtension(options.Filename); " is 123.
Long Statement,de4dot.code,ObfuscatedFile,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\ObfuscatedFile.cs,UnpackNativeImage,The length of the statement  "						Logger.w("Could not load unpacked data. File: {0}' deobfuscator: {0}"' peImage.Filename ?? "(unknown filename)"' deob.TypeLong); " is 128.
Long Statement,de4dot.code,ObfuscatedFile,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\ObfuscatedFile.cs,FindMethodTokens,The length of the statement  "					if (method.MethodSig.GetRetType().GetElementType() != ElementType.String && method.MethodSig.GetRetType().GetElementType() != ElementType.Object) " is 145.
Long Statement,de4dot.code,ObfuscatedFile,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\ObfuscatedFile.cs,FindMethodTokens,The length of the statement  "					Logger.v("Adding string decrypter; token: {0:X8}' method: {1}"' method.MDToken.ToInt32()' Utils.RemoveNewlines(method.FullName)); " is 129.
Long Statement,de4dot.code.deobfuscators.Agile_NET,Deobfuscator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\Deobfuscator.cs,FindCliSecureAttribute,The length of the statement  "				if (Utils.StartsWith(type.FullName' "SecureTeam.Attributes.ObfuscatedByCliSecureAttribute"' StringComparison.Ordinal)) { " is 120.
Long Statement,de4dot.code.deobfuscators.Agile_NET,Deobfuscator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\Deobfuscator.cs,FindCliSecureAttribute,The length of the statement  "				else if (Utils.StartsWith(type.FullName' "SecureTeam.Attributes.ObfuscatedByAgileDotNetAttribute"' StringComparison.Ordinal)) { " is 127.
Long Statement,de4dot.code.deobfuscators.Agile_NET,MethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\MethodsDecrypter.cs,IsOldHeader,The length of the statement  "			if ((uint)methodDefTable.StartOffset - peImage.RvaToOffset((uint)peImage.Cor20Header.Metadata.VirtualAddress) != codeHeader.methodDefTableOffset) " is 145.
Long Statement,de4dot.code.deobfuscators.Agile_NET,ResourceDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\ResourceDecrypter.cs,FindResourceType,The length of the statement  "				var resolveHandler = DotNetUtils.GetMethod(type' "System.Reflection.Assembly"' "(System.Object'System.ResolveEventArgs)"); " is 122.
Long Statement,de4dot.code.deobfuscators.Agile_NET.vm.v1,Csvm,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\v1\Csvm.cs,GetVmOpCodeHandlerDetector,The length of the statement  "				deobfuscatorContext.SetData(dataKey' dict = new Dictionary<string' VmOpCodeHandlerDetector>(StringComparer.OrdinalIgnoreCase)); " is 127.
Long Statement,de4dot.code.deobfuscators.Agile_NET.vm.v2,Csvm,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\v2\Csvm.cs,GetVmOpCodeHandlerDetector,The length of the statement  "				deobfuscatorContext.SetData(dataKey' dict = new Dictionary<string' VmOpCodeHandlerDetector>(StringComparer.OrdinalIgnoreCase)); " is 127.
Long Statement,de4dot.code.deobfuscators,Blowfish,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Blowfish.cs,Encrypt,The length of the statement  "				xr ^= ((S[0 * 256 + (xl >> 24)] + S[1 * 256 + (byte)(xl >> 16)]) ^ S[2 * 256 + (byte)(xl >> 8)]) + S[3 * 256 + (byte)xl]; " is 121.
Long Statement,de4dot.code.deobfuscators,Blowfish,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Blowfish.cs,Decrypt,The length of the statement  "				xr ^= ((S[0 * 256 + (xl >> 24)] + S[1 * 256 + (byte)(xl >> 16)]) ^ S[2 * 256 + (byte)(xl >> 8)]) + S[3 * 256 + (byte)xl]; " is 121.
Long Statement,de4dot.code.deobfuscators,InitializedDataCreator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\InitializedDataCreator.cs,CreateInitializeArrayMethod,The length of the statement  "				var runtimeHelpersType = DotNetUtils.FindOrCreateTypeRef(module' module.CorLibTypes.AssemblyRef' "System.Runtime.CompilerServices"' "RuntimeHelpers"' false); " is 157.
Long Statement,de4dot.code.deobfuscators,InitializedDataCreator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\InitializedDataCreator.cs,CreateInitializeArrayMethod,The length of the statement  "				var systemArrayType = DotNetUtils.FindOrCreateTypeRef(module' module.CorLibTypes.AssemblyRef' "System"' "Array"' false); " is 120.
Long Statement,de4dot.code.deobfuscators,InitializedDataCreator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\InitializedDataCreator.cs,CreateInitializeArrayMethod,The length of the statement  "				var runtimeFieldHandleType = DotNetUtils.FindOrCreateTypeRef(module' module.CorLibTypes.AssemblyRef' "System"' "RuntimeFieldHandle"' true); " is 139.
Long Statement,de4dot.code.deobfuscators,InitializedDataCreator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\InitializedDataCreator.cs,CreateInitializeArrayMethod,The length of the statement  "				initializeArrayMethod = module.UpdateRowId(new MemberRefUser(module' "InitializeArray"' methodSig' runtimeHelpersType.TypeDefOrRef)); " is 133.
Long Statement,de4dot.code.deobfuscators,InitializedDataCreator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\InitializedDataCreator.cs,AddInitializeArrayCode,The length of the statement  "			block.Replace(index++' numToRemove' Instruction.CreateLdcI4(data.Length / elementType.ToTypeSig().ElementType.GetPrimitiveSize())); " is 131.
Long Statement,de4dot.code.deobfuscators,InitializedDataCreator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\InitializedDataCreator.cs,CreateOurType,The length of the statement  "			ourType = new TypeDefUser(""' $"<PrivateImplementationDetails>{GetModuleId()}"' module.CorLibTypes.Object.TypeDefOrRef); " is 120.
Long Statement,de4dot.code.deobfuscators,MethodCallRestorerBase,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MethodCallRestorerBase.cs,CreateGetManifestResourceStream1,The length of the statement  "			var newMethod = builder.InstanceMethod("GetManifestResourceStream"' assemblyType.TypeDefOrRef' streamType' builder.String); " is 123.
Long Statement,de4dot.code.deobfuscators,MethodCallRestorerBase,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MethodCallRestorerBase.cs,CreateGetManifestResourceStream2,The length of the statement  "			var newMethod = builder.InstanceMethod("GetManifestResourceStream"' assemblyType.TypeDefOrRef' streamType' typeType' builder.String); " is 133.
Long Statement,de4dot.code.deobfuscators,MyPEImage,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MyPEImage.cs,FindSection,The length of the statement  "				if (section.VirtualAddress <= rva && rva < section.VirtualAddress + Math.Max(section.VirtualSize' section.SizeOfRawData)) " is 121.
Long Statement,de4dot.code.deobfuscators,ProxyCallFixer1,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\ProxyCallFixerBase.cs,FixBrokenCalls,The length of the statement  "					Logger.w("Holy obfuscator bugs' Batman! Found a proxy delegate call with no instance push in {0:X8}. Replacing it with a throw..."' obfuscatedMethod.MDToken.ToInt32()); " is 168.
Long Statement,de4dot.code.deobfuscators,TypesRestorerBase,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\TypesRestorer.cs,RestoreFieldTypes,The length of the statement  "				Logger.v("Field {0:X8}: type {1} ({2:X8})"' updatedField.token' Utils.RemoveNewlines(updatedField.newFieldType.FullName)' updatedField.newFieldType.MDToken.ToInt32()); " is 167.
Long Statement,de4dot.code.deobfuscators,TypesRestorerBase,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\TypesRestorer.cs,DeobfuscateMethod,The length of the statement  "							AddMethodArgType(method' GetParameter(methodParams' ldInstr)' DotNetUtils.GetArg(calledMethodParams' calledMethodParamIndex)); " is 126.
Long Statement,de4dot.code.deobfuscators,TypesRestorerBase,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\TypesRestorer.cs,DeobfuscateFields,The length of the statement  "						calledMethodArgs = DotNetUtils.ReplaceGenericParameters(calledMethodDefOrRef.DeclaringType.TryGetGenericInstSig()' calledMethodSpec' calledMethodArgs); " is 151.
Long Statement,de4dot.code.deobfuscators.Babel_NET,ConstantsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Babel_NET\ConstantsDecrypter.cs,Deobfuscate,The length of the statement  "					initializedDataCreator.AddInitializeArrayCode(block' info.start' info.len' info.arrayType.Next.ToTypeDefOrRef()' decrypted); " is 124.
Long Statement,de4dot.code.deobfuscators.Babel_NET,Deobfuscator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Babel_NET\Deobfuscator.cs,ScanForObfuscator,The length of the statement  "			methodsDecrypter = new MethodsDecrypter(module' resourceDecrypterCreator.Create()' DeobfuscatedFile.DeobfuscatorContext); " is 121.
Long Statement,de4dot.code.deobfuscators.Babel_NET,Deobfuscator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Babel_NET\Deobfuscator.cs,CheckVersion,The length of the statement  "			if (versionField != null && versionField.IsLiteral && versionField.Constant != null && versionField.Constant.Value is string) { " is 127.
Long Statement,de4dot.code.deobfuscators.Babel_NET,Deobfuscator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Babel_NET\Deobfuscator.cs,DeobfuscateBegin,The length of the statement  "				int32ValueInliner.Add(constantsDecrypter.Int32Decrypter' (method' gim' args) => constantsDecrypter.DecryptInt32((int)args[0])); " is 127.
Long Statement,de4dot.code.deobfuscators.Babel_NET,Deobfuscator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Babel_NET\Deobfuscator.cs,DeobfuscateBegin,The length of the statement  "				int64ValueInliner.Add(constantsDecrypter.Int64Decrypter' (method' gim' args) => constantsDecrypter.DecryptInt64((int)args[0])); " is 127.
Long Statement,de4dot.code.deobfuscators.Babel_NET,Deobfuscator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Babel_NET\Deobfuscator.cs,DeobfuscateBegin,The length of the statement  "				singleValueInliner.Add(constantsDecrypter.SingleDecrypter' (method' gim' args) => constantsDecrypter.DecryptSingle((int)args[0])); " is 130.
Long Statement,de4dot.code.deobfuscators.Babel_NET,Deobfuscator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Babel_NET\Deobfuscator.cs,DeobfuscateBegin,The length of the statement  "				doubleValueInliner.Add(constantsDecrypter.DoubleDecrypter' (method' gim' args) => constantsDecrypter.DecryptDouble((int)args[0])); " is 130.
Long Statement,de4dot.code.deobfuscators.Babel_NET,ImageReader,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Babel_NET\ImageReader.cs,ReadFieldRef,The length of the statement  "				throw new ApplicationException($"Couldn't find one field named '{name}' in type {Utils.RemoveNewlines(declaringType)}"); " is 120.
Long Statement,de4dot.code.deobfuscators.Babel_NET,ImageReader,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Babel_NET\ImageReader.cs,ReadMethodRef,The length of the statement  "				throw new ApplicationException($"Could not find method '{Utils.RemoveNewlines(babelMethodRef.Name)}' in type '{Utils.RemoveNewlines(babelMethodRef.DeclaringType)}'"); " is 166.
Long Statement,de4dot.code.deobfuscators.Babel_NET,ImageReader,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Babel_NET\ImageReader.cs,ReadMethodRef,The length of the statement  "			var mr = new MemberRefUser(module' method.Name' method.MethodSig.Clone()' babelMethodRef.DeclaringType.ToTypeDefOrRef()); " is 121.
Long Statement,de4dot.code.deobfuscators.Babel_NET,ImageReader,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Babel_NET\ImageReader.cs,GetMethodRef,The length of the statement  "				throw new ApplicationException($"Couldn't find one method named '{babelMethodRef.Name}' in type {Utils.RemoveNewlines(declaringType)}"); " is 136.
Long Statement,de4dot.code.deobfuscators.Babel_NET,ProxyCallFixer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Babel_NET\ProxyCallFixer.cs,CheckCctor,The length of the statement  "				var instrs = DotNetUtils.GetInstructions(instructions' i' OpCodes.Ldtoken' OpCodes.Ldc_I4' OpCodes.Ldc_I4' OpCodes.Ldtoken' OpCodes.Call); " is 138.
Long Statement,de4dot.code.deobfuscators.Babel_NET,ProxyCallFixer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Babel_NET\ProxyCallFixer.cs,CheckCctor,The length of the statement  "				else if ((instrs = DotNetUtils.GetInstructions(instructions' i' OpCodes.Ldtoken' OpCodes.Ldc_I4' OpCodes.Ldtoken' OpCodes.Call)) != null) { " is 139.
Long Statement,de4dot.code.deobfuscators.Babel_NET,ProxyCallFixer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Babel_NET\ProxyCallFixer.cs,FindDelegateCreator,The length of the statement  "					if (!DotNetUtils.IsMethod(method' "System.Void"' "(System.RuntimeTypeHandle'System.Int32'System.RuntimeFieldHandle)") && " is 120.
Long Statement,de4dot.code.deobfuscators.Babel_NET,ProxyCallFixer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Babel_NET\ProxyCallFixer.cs,FindDelegateCreator,The length of the statement  "						!DotNetUtils.IsMethod(method' "System.Void"' "(System.RuntimeTypeHandle'System.Int32'System.Int32'System.RuntimeFieldHandle)")) " is 127.
Long Statement,de4dot.code.deobfuscators.Babel_NET,ProxyCallFixer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Babel_NET\ProxyCallFixer.cs,GetProxyCreatorType,The length of the statement  "				if (DotNetUtils.IsMethod(calledMethod' "System.Void"' "(System.Reflection.FieldInfo'System.Type'System.Reflection.MethodInfo)")) " is 128.
Long Statement,de4dot.code.deobfuscators.Babel_NET,ProxyCallFixer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Babel_NET\ProxyCallFixer.cs,GetProxyCreatorType,The length of the statement  "				if (DotNetUtils.IsMethod(calledMethod' "System.Void"' "(System.Reflection.FieldInfo'System.Type'System.Reflection.ConstructorInfo)")) " is 133.
Long Statement,de4dot.code.deobfuscators.Babel_NET,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Babel_NET\StringDecrypter.cs,CheckNested,The length of the statement  "				var decrypterBuilderMethod = DotNetUtils.GetMethod(nested' "System.Reflection.Emit.MethodBuilder"' "(System.Reflection.Emit.TypeBuilder)"); " is 139.
Long Statement,de4dot.code.deobfuscators.Babel_NET,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Babel_NET\StringDecrypter.cs,GetOffsetMagic,The length of the statement  "				if (calledMethod.FullName != "System.Void System.Reflection.Emit.ILGenerator::Emit(System.Reflection.Emit.OpCode'System.Int32)") " is 128.
Long Statement,de4dot.code.deobfuscators.Babel_NET,ReflectionToDNLibMethodCreator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Babel_NET\StringDecrypter.cs,DoCall,The length of the statement  "				else if (sig != null && sig.HasThis && calledMethod.DeclaringType.FullName == "System.Reflection.Emit.ILGenerator" && calledMethod.Name == "Emit") { " is 148.
Long Statement,de4dot.code.deobfuscators.CodeFort,AssemblyDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CodeFort\AssemblyDecrypter.cs,CheckType,The length of the statement  "			if (DotNetUtils.GetMethod(type' "System.Byte[]"' "(System.Byte[]'System.String'System.String'System.Int32'System.String'System.Int32)") == null) " is 144.
Long Statement,de4dot.code.deobfuscators.CodeFort,AssemblyDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CodeFort\AssemblyDecrypter.cs,Decrypt,The length of the statement  "			var key = new Rfc2898DeriveBytes(password.passphrase' Encoding.UTF8.GetBytes(password.salt)' iterations).GetBytes(numBits / 8); " is 127.
Long Statement,de4dot.code.deobfuscators.CodeFort,AssemblyDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CodeFort\AssemblyDecrypter.cs,GetAssemblyInfos,The length of the statement  "				infos.Add(new AssemblyInfo(asmData' resource' mod.Assembly.FullName' mod.Assembly.Name.String' DeobUtils.GetExtension(mod.Kind))); " is 130.
Long Statement,de4dot.code.deobfuscators.CodeFort,ProxyCallFixer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CodeFort\ProxyCallFixer.cs,CheckMethods,The length of the statement  "				if (DotNetUtils.IsMethod(method' "System.MulticastDelegate"' "(System.Type'System.Reflection.MethodInfo'System.Int32)")) " is 120.
Long Statement,de4dot.code.deobfuscators.CodeVeil,ResourceConverter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CodeVeil\ResourceConverter.cs,Convert,The length of the statement  "				resourceData = new CharArrayResourceData(dataCreator.CreateUserResourceType(CharArrayResourceData.ReflectionTypeName)' DataReaderUtils.ReadChars(ref reader' info.length)); " is 171.
Long Statement,de4dot.code.deobfuscators.CodeVeil,ResourceConverter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CodeVeil\ResourceConverter.cs,Convert,The length of the statement  "				resourceData = new IconResourceData(dataCreator.CreateUserResourceType(IconResourceData.ReflectionTypeName)' reader.ReadBytes(info.length)); " is 140.
Long Statement,de4dot.code.deobfuscators.CodeVeil,ResourceConverter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CodeVeil\ResourceConverter.cs,Convert,The length of the statement  "				resourceData = new ImageResourceData(dataCreator.CreateUserResourceType(ImageResourceData.ReflectionTypeName)' reader.ReadBytes(info.length)); " is 142.
Long Statement,de4dot.code.deobfuscators.CodeVeil,ResourceDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CodeVeil\ResourceDecrypter.cs,FindEncryptedResourceStreamType,The length of the statement  "				if (!FindManifestResourceStreamMethods(type' out var getManifestResourceStreamMethodTmp1' out var getManifestResourceStreamMethodTmp2)) " is 135.
Long Statement,de4dot.code.deobfuscators.CodeVeil,ResourceDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CodeVeil\ResourceDecrypter.cs,FindXxteaMethod,The length of the statement  "				else if (DotNetUtils.IsMethod(method' "System.Void"' "(System.UInt32[]'System.UInt32[]'System.UInt32'System.UInt32'System.UInt32'System.UInt32'System.UInt32'System.UInt32'System.UInt32'System.UInt32'System.UInt32)")) { " is 218.
Long Statement,de4dot.code.deobfuscators.CodeVeil,TamperDetection,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CodeVeil\TamperDetection.cs,CallsMainTypeTamperCheckMethod,The length of the statement  "				var instrs = DotNetUtils.GetInstructions(instructions' i' OpCodes.Ldtoken' OpCodes.Call' OpCodes.Call' OpCodes.Ldc_I8' OpCodes.Call); " is 133.
Long Statement,de4dot.code.deobfuscators.CodeWall,AssemblyDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CodeWall\AssemblyDecrypter.cs,GetMainResourceKey,The length of the statement  "				return BitConverter.ToString(new MD5CryptoServiceProvider().ComputeHash(new ASCIIEncoding().GetBytes(keyInfo))).Replace("-"' ""); " is 129.
Long Statement,de4dot.code.deobfuscators.CodeWall,AssemblyDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CodeWall\AssemblyDecrypter.cs,DecryptAllAssemblies,The length of the statement  "				assemblyInfos.Add(new AssemblyInfo(assemblyData' DeobUtils.GetExtension(theModule.Kind)' theModule.Assembly.FullName' theModule.Assembly.Name.String' isMain)); " is 159.
Long Statement,de4dot.code.deobfuscators.CodeWall,Deobfuscator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CodeWall\Deobfuscator.cs,InitializeStringDecrypter,The length of the statement  "				staticStringInliner.Add(info.Method' (method' gim' args) => stringDecrypter.Decrypt(method' (int)args[0]' (int)args[1]' (int)args[2])); " is 135.
Long Statement,de4dot.code.deobfuscators.Confuser,AntiDebugger,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\AntiDebugger.cs,GetAntiDebugMethod,The length of the statement  "				if (!DotNetUtils.IsMethod(method' "System.Void"' "()") && !DotNetUtils.IsMethod(method' "System.Void"' "(System.Object)")) " is 122.
Long Statement,de4dot.code.deobfuscators.Confuser,AntiDebugger,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\AntiDebugger.cs,CheckMethod_normal,The length of the statement  "			if (DotNetUtils.CallsMethod(initMethod' "System.Void System.Threading.Thread::.ctor(System.Threading.ParameterizedThreadStart)")) { " is 131.
Long Statement,de4dot.code.deobfuscators.Confuser,AntiDebugger,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\AntiDebugger.cs,CheckMethod_normal,The length of the statement  "				int failFastCalls = ConfuserUtils.CountCalls(antiDebugMethod' "System.Void System.Environment::FailFast(System.String)"); " is 121.
Long Statement,de4dot.code.deobfuscators.Confuser,AntiDebugger,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\AntiDebugger.cs,CheckMethod_normal,The length of the statement  "				if (!DotNetUtils.CallsMethod(antiDebugMethod' "System.Void System.Threading.Thread::.ctor(System.Threading.ParameterizedThreadStart)")) { " is 137.
Long Statement,de4dot.code.deobfuscators.Confuser,AntiDebugger,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\AntiDebugger.cs,CheckMethod_normal,The length of the statement  "			else if (!DotNetUtils.CallsMethod(initMethod' "System.Void System.Threading.ThreadStart::.ctor(System.Object'System.IntPtr)")) { " is 128.
Long Statement,de4dot.code.deobfuscators.Confuser,AntiDebugger,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\AntiDebugger.cs,CheckMethod_safe,The length of the statement  "				if (!DotNetUtils.CallsMethod(initMethod' "System.Void System.Threading.Thread::.ctor(System.Threading.ParameterizedThreadStart)")) " is 130.
Long Statement,de4dot.code.deobfuscators.Confuser,AntiDebugger,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\AntiDebugger.cs,CheckMethod_safe,The length of the statement  "				int failFastCalls = ConfuserUtils.CountCalls(antiDebugMethod' "System.Void System.Environment::FailFast(System.String)"); " is 121.
Long Statement,de4dot.code.deobfuscators.Confuser,AntiDebugger,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\AntiDebugger.cs,CheckMethod_safe,The length of the statement  "					if (!DotNetUtils.CallsMethod(antiDebugMethod' "System.Void System.Threading.Thread::.ctor(System.Threading.ParameterizedThreadStart)")) " is 135.
Long Statement,de4dot.code.deobfuscators.Confuser,AntiDumping,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\AntiDumping.cs,CheckMethod,The length of the statement  "				simpleDeobfuscator.Deobfuscate(calledMethod' SimpleDeobfuscatorFlags.Force | SimpleDeobfuscatorFlags.DisableConstantsFolderExtraInstrs); " is 136.
Long Statement,de4dot.code.deobfuscators.Confuser,AntiDumping,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\AntiDumping.cs,CheckType_v14_r58564,The length of the statement  "			if (!DotNetUtils.CallsMethod(initMethod' "System.IntPtr System.Runtime.InteropServices.Marshal::GetHINSTANCE(System.Reflection.Module)")) " is 137.
Long Statement,de4dot.code.deobfuscators.Confuser,AntiDumping,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\AntiDumping.cs,CheckType_v14_r58852,The length of the statement  "			if (!DotNetUtils.CallsMethod(initMethod' "System.IntPtr System.Runtime.InteropServices.Marshal::GetHINSTANCE(System.Reflection.Module)")) " is 137.
Long Statement,de4dot.code.deobfuscators.Confuser,ConstantsDecrypterBase,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsDecrypterBase.cs,DecryptConstant_v17_r73764_native,The length of the statement  "				return Decrypt(encrypted' key1' (magic' i) => (byte)(x86Emu.Emulate((uint)nativeMethod.RVA' magic) ^ key2[i % key2.Length])); " is 125.
Long Statement,de4dot.code.deobfuscators.Confuser,DecrypterInfo,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsDecrypterBase.cs,FindKey1,The length of the statement  "					int index = ConfuserUtils.FindCallMethod(instrs' i' Code.Callvirt' "System.Int32 System.Reflection.MemberInfo::get_MetadataToken()"); " is 133.
Long Statement,de4dot.code.deobfuscators.Confuser,DecrypterInfo,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsDecrypterBase.cs,InitializeTypeCodes,The length of the statement  "				if (!FindTypeCode(allBlocks' out doubleType' Code.Call' "System.Double System.BitConverter::ToDouble(System.Byte[]'System.Int32)")) " is 131.
Long Statement,de4dot.code.deobfuscators.Confuser,DecrypterInfo,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsDecrypterBase.cs,InitializeTypeCodes,The length of the statement  "				if (!FindTypeCode(allBlocks' out singleType' Code.Call' "System.Single System.BitConverter::ToSingle(System.Byte[]'System.Int32)")) " is 131.
Long Statement,de4dot.code.deobfuscators.Confuser,DecrypterInfo,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsDecrypterBase.cs,InitializeTypeCodes,The length of the statement  "				if (!FindTypeCode(allBlocks' out int32Type' Code.Call' "System.Int32 System.BitConverter::ToInt32(System.Byte[]'System.Int32)")) " is 128.
Long Statement,de4dot.code.deobfuscators.Confuser,DecrypterInfo,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsDecrypterBase.cs,InitializeTypeCodes,The length of the statement  "				if (!FindTypeCode(allBlocks' out int64Type' Code.Call' "System.Int64 System.BitConverter::ToInt64(System.Byte[]'System.Int32)")) " is 128.
Long Statement,de4dot.code.deobfuscators.Confuser,DecrypterInfo,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsDecrypterBase.cs,InitializeTypeCodes,The length of the statement  "				if (!FindTypeCode(allBlocks' out stringType' Code.Callvirt' "System.String System.Text.Encoding::GetString(System.Byte[])") && " is 126.
Long Statement,de4dot.code.deobfuscators.Confuser,DecrypterInfo,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsDecrypterBase.cs,InitializeTypeCodes,The length of the statement  "					!FindTypeCode(allBlocks' out stringType' Code.Callvirt' "System.String System.Text.Encoding::GetString(System.Byte[]'System.Int32'System.Int32)")) " is 146.
Long Statement,de4dot.code.deobfuscators.Confuser,ConstantsDecrypterUtils,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsDecrypterUtils.cs,FindDictField,The length of the statement  "				if (ctor == null || ctor.FullName != "System.Void System.Collections.Generic.Dictionary`2<System.UInt32'System.Object>::.ctor()") " is 129.
Long Statement,de4dot.code.deobfuscators.Confuser,ConstantsDecrypterV15,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsDecrypterV15.cs,Find,The length of the statement  "					else if (DotNetUtils.CallsMethod(method' "System.String System.Text.Encoding::GetString(System.Byte[]'System.Int32'System.Int32)")) { " is 133.
Long Statement,de4dot.code.deobfuscators.Confuser,ConstantsDecrypterV17,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsDecrypterV17.cs,Find,The length of the statement  "			simpleDeobfuscator.Deobfuscate(cctor' SimpleDeobfuscatorFlags.Force | SimpleDeobfuscatorFlags.DisableConstantsFolderExtraInstrs); " is 129.
Long Statement,de4dot.code.deobfuscators.Confuser,ConstantsDecrypterV17,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsDecrypterV17.cs,Find,The length of the statement  "					InitVersion(method' ConfuserVersion.v17_r75056_normal' ConfuserVersion.v17_r75056_dynamic' ConfuserVersion.v17_r75056_native); " is 126.
Long Statement,de4dot.code.deobfuscators.Confuser,ConstantsDecrypterV17,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsDecrypterV17.cs,Find,The length of the statement  "					InitVersion(method' ConfuserVersion.v18_r75257_normal' ConfuserVersion.v18_r75257_dynamic' ConfuserVersion.v18_r75257_native); " is 126.
Long Statement,de4dot.code.deobfuscators.Confuser,ConstantsDecrypterV17,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsDecrypterV17.cs,Find,The length of the statement  "				InitVersion(method' ConfuserVersion.v17_r74816_normal' ConfuserVersion.v17_r74816_dynamic' ConfuserVersion.v17_r74816_native); " is 126.
Long Statement,de4dot.code.deobfuscators.Confuser,ConstantsDecrypterV17,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsDecrypterV17.cs,Find,The length of the statement  "			else if (DotNetUtils.CallsMethod(method' "System.Reflection.Module System.Reflection.Assembly::GetModule(System.String)")) " is 122.
Long Statement,de4dot.code.deobfuscators.Confuser,ConstantsDecrypterV17,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsDecrypterV17.cs,Find,The length of the statement  "				InitVersion(method' ConfuserVersion.v17_r74788_normal' ConfuserVersion.v17_r74788_dynamic' ConfuserVersion.v17_r74788_native); " is 126.
Long Statement,de4dot.code.deobfuscators.Confuser,ConstantsDecrypterV17,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsDecrypterV17.cs,Find,The length of the statement  "				InitVersion(method' ConfuserVersion.v17_r74708_normal' ConfuserVersion.v17_r74708_dynamic' ConfuserVersion.v17_r74708_native); " is 126.
Long Statement,de4dot.code.deobfuscators.Confuser,ConstantsDecrypterV17,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsDecrypterV17.cs,DecryptData,The length of the statement  "			uint offs = info.CalcHash(info2.decryptMethod.MDToken.ToUInt32() ^ (info2.decryptMethod.DeclaringType.MDToken.ToUInt32() * (uint)args[0])) ^ (uint)args[1]; " is 155.
Long Statement,de4dot.code.deobfuscators.Confuser,DecrypterInfoV17,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsDecrypterV17.cs,FindKey5_v17_r74788,The length of the statement  "					i = ConfuserUtils.FindCallMethod(instrs' i' Code.Callvirt' "System.Reflection.Module System.Reflection.Assembly::GetModule(System.String)"); " is 140.
Long Statement,de4dot.code.deobfuscators.Confuser,ConstantsDecrypterV18,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsDecrypterV18.cs,Find,The length of the statement  "			simpleDeobfuscator.Deobfuscate(cctor' SimpleDeobfuscatorFlags.Force | SimpleDeobfuscatorFlags.DisableConstantsFolderExtraInstrs); " is 129.
Long Statement,de4dot.code.deobfuscators.Confuser,ConstantsDecrypterV18,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsDecrypterV18.cs,Find,The length of the statement  "				InitVersion(cctor' ConfuserVersion.v18_r75367_normal' ConfuserVersion.v18_r75367_dynamic' ConfuserVersion.v18_r75367_native); " is 125.
Long Statement,de4dot.code.deobfuscators.Confuser,ConstantsDecrypterV18,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsDecrypterV18.cs,Find,The length of the statement  "					InitVersion(cctor' ConfuserVersion.v18_r75369_normal' ConfuserVersion.v18_r75369_dynamic' ConfuserVersion.v18_r75369_native); " is 125.
Long Statement,de4dot.code.deobfuscators.Confuser,ConstantsDecrypterV18,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsDecrypterV18.cs,Find,The length of the statement  "					InitVersion(cctor' ConfuserVersion.v19_r77172_normal' ConfuserVersion.v19_r77172_dynamic' ConfuserVersion.v19_r77172_native); " is 125.
Long Statement,de4dot.code.deobfuscators.Confuser,ConstantsDecrypterV18,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsDecrypterV18.cs,Find,The length of the statement  "					InitVersion(cctor' ConfuserVersion.v19_r78363_normal' ConfuserVersion.v19_r78363_dynamic' ConfuserVersion.v19_r78363_native); " is 125.
Long Statement,de4dot.code.deobfuscators.Confuser,ConstantsDecrypterV18,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsDecrypterV18.cs,Find,The length of the statement  "					int index1 = ConfuserUtils.FindCallMethod(cctor.Body.Instructions' 0' Code.Callvirt' "System.Reflection.Module System.Reflection.MemberInfo::get_Module()"); " is 156.
Long Statement,de4dot.code.deobfuscators.Confuser,ConstantsDecrypterV18,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsDecrypterV18.cs,Find,The length of the statement  "					int index2 = ConfuserUtils.FindCallMethod(cctor.Body.Instructions' 0' Code.Callvirt' "System.Int32 System.Reflection.MemberInfo::get_MetadataToken()"); " is 151.
Long Statement,de4dot.code.deobfuscators.Confuser,ConstantsDecrypterV18,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsDecrypterV18.cs,Find,The length of the statement  "						InitVersion(cctor' ConfuserVersion.v19_r78056_normal' ConfuserVersion.v19_r78056_dynamic' ConfuserVersion.v19_r78056_native); " is 125.
Long Statement,de4dot.code.deobfuscators.Confuser,ConstantsDecrypterV18,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsDecrypterV18.cs,Find,The length of the statement  "						InitVersion(cctor' ConfuserVersion.v19_r79630_normal' ConfuserVersion.v19_r79630_dynamic' ConfuserVersion.v19_r79630_native); " is 125.
Long Statement,de4dot.code.deobfuscators.Confuser,ConstantsDecrypterV18,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsDecrypterV18.cs,FindKey0,The length of the statement  "				int index = ConfuserUtils.FindCallMethod(instrs' i' Code.Call' "System.Text.Encoding System.Text.Encoding::get_UTF8()"); " is 120.
Long Statement,de4dot.code.deobfuscators.Confuser,ConstantsDecrypterV18,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsDecrypterV18.cs,FindKey0,The length of the statement  "				int index2 = ConfuserUtils.FindCallMethod(instrs' i' Code.Call' "System.Byte[] System.BitConverter::GetBytes(System.Int32)"); " is 125.
Long Statement,de4dot.code.deobfuscators.Confuser,ConstantsDecrypterV18,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsDecrypterV18.cs,FindKey0d,The length of the statement  "				int index = ConfuserUtils.FindCallMethod(instrs' i' Code.Callvirt' "System.Reflection.Module System.Reflection.MemberInfo::get_Module()"); " is 138.
Long Statement,de4dot.code.deobfuscators.Confuser,ConstantsDecrypterV18,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsDecrypterV18.cs,FindKey0d,The length of the statement  "				int index2 = ConfuserUtils.FindCallMethod(instrs' i' Code.Callvirt' "System.Int32 System.Reflection.MemberInfo::get_MetadataToken()"); " is 134.
Long Statement,de4dot.code.deobfuscators.Confuser,ConstantsDecrypterV18,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsDecrypterV18.cs,FindKey0d_v18_r75367,The length of the statement  "				int index = ConfuserUtils.FindCallMethod(instrs' i' Code.Callvirt' "System.Int32 System.Reflection.MemberInfo::get_MetadataToken()"); " is 133.
Long Statement,de4dot.code.deobfuscators.Confuser,ConstantsDecrypterV18,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsDecrypterV18.cs,FindKey0d_v18_r75367,The length of the statement  "				int index2 = ConfuserUtils.FindCallMethod(instrs' index' Code.Call' "System.Byte[] System.BitConverter::GetBytes(System.Int32)"); " is 129.
Long Statement,de4dot.code.deobfuscators.Confuser,ConstantsFolder,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsFolder.cs,Deobfuscate,The length of the statement  "						newInstr = Instruction.CreateLdcI4(instr.OpCode.Code == Code.Ldc_R4 ? (sbyte)(float)instr.Operand : (sbyte)(double)instr.Operand); " is 130.
Long Statement,de4dot.code.deobfuscators.Confuser,ConstantsFolder,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsFolder.cs,Deobfuscate,The length of the statement  "						newInstr = Instruction.CreateLdcI4(instr.OpCode.Code == Code.Ldc_R4 ? (byte)(float)instr.Operand : (byte)(double)instr.Operand); " is 128.
Long Statement,de4dot.code.deobfuscators.Confuser,ConstantsFolder,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsFolder.cs,Deobfuscate,The length of the statement  "						newInstr = Instruction.CreateLdcI4(instr.OpCode.Code == Code.Ldc_R4 ? (short)(float)instr.Operand : (short)(double)instr.Operand); " is 130.
Long Statement,de4dot.code.deobfuscators.Confuser,ConstantsFolder,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsFolder.cs,Deobfuscate,The length of the statement  "						newInstr = Instruction.CreateLdcI4(instr.OpCode.Code == Code.Ldc_R4 ? (ushort)(float)instr.Operand : (ushort)(double)instr.Operand); " is 132.
Long Statement,de4dot.code.deobfuscators.Confuser,ConstantsFolder,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsFolder.cs,Deobfuscate,The length of the statement  "						newInstr = Instruction.CreateLdcI4(instr.OpCode.Code == Code.Ldc_R4 ? (int)(float)instr.Operand : (int)(double)instr.Operand); " is 126.
Long Statement,de4dot.code.deobfuscators.Confuser,ConstantsFolder,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsFolder.cs,Deobfuscate,The length of the statement  "						newInstr = Instruction.CreateLdcI4(instr.OpCode.Code == Code.Ldc_R4 ? (int)(uint)(float)instr.Operand : (int)(uint)(double)instr.Operand); " is 138.
Long Statement,de4dot.code.deobfuscators.Confuser,ConstantsFolder,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsFolder.cs,Deobfuscate,The length of the statement  "						newInstr = Instruction.Create(OpCodes.Ldc_I8' instr.OpCode.Code == Code.Ldc_R4 ? (long)(float)instr.Operand : (long)(double)instr.Operand); " is 139.
Long Statement,de4dot.code.deobfuscators.Confuser,ConstantsFolder,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsFolder.cs,Deobfuscate,The length of the statement  "						newInstr = Instruction.Create(OpCodes.Ldc_I8' instr.OpCode.Code == Code.Ldc_R4 ? (ulong)(float)instr.Operand : (ulong)(double)instr.Operand); " is 141.
Long Statement,de4dot.code.deobfuscators.Confuser,Deobfuscator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\Deobfuscator.cs,InitializeStringDecrypter,The length of the statement  "			staticStringInliner.Add(stringDecrypter.Method' (method' gim' args) => stringDecrypter.Decrypt(staticStringInliner.Method' (int)args[0])); " is 138.
Long Statement,de4dot.code.deobfuscators.Confuser,Deobfuscator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\Deobfuscator.cs,InitializeConstantsDecrypterV18,The length of the statement  "				staticStringInliner.Add(info.method' (method' gim' args) => constantsDecrypterV18.DecryptString(method' gim' (uint)args[0]' (ulong)args[1])); " is 141.
Long Statement,de4dot.code.deobfuscators.Confuser,Deobfuscator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\Deobfuscator.cs,InitializeConstantsDecrypterV18,The length of the statement  "				int32ValueInliner.Add(info.method' (method' gim' args) => constantsDecrypterV18.DecryptInt32(method' gim' (uint)args[0]' (ulong)args[1])); " is 138.
Long Statement,de4dot.code.deobfuscators.Confuser,Deobfuscator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\Deobfuscator.cs,InitializeConstantsDecrypterV18,The length of the statement  "				int64ValueInliner.Add(info.method' (method' gim' args) => constantsDecrypterV18.DecryptInt64(method' gim' (uint)args[0]' (ulong)args[1])); " is 138.
Long Statement,de4dot.code.deobfuscators.Confuser,Deobfuscator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\Deobfuscator.cs,InitializeConstantsDecrypterV18,The length of the statement  "				singleValueInliner.Add(info.method' (method' gim' args) => constantsDecrypterV18.DecryptSingle(method' gim' (uint)args[0]' (ulong)args[1])); " is 140.
Long Statement,de4dot.code.deobfuscators.Confuser,Deobfuscator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\Deobfuscator.cs,InitializeConstantsDecrypterV18,The length of the statement  "				doubleValueInliner.Add(info.method' (method' gim' args) => constantsDecrypterV18.DecryptDouble(method' gim' (uint)args[0]' (ulong)args[1])); " is 140.
Long Statement,de4dot.code.deobfuscators.Confuser,Deobfuscator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\Deobfuscator.cs,Initialize,The length of the statement  "				staticStringInliner.Add(info.decryptMethod' (method' gim' args) => constDecrypter.DecryptString(staticStringInliner.Method' method' args)); " is 139.
Long Statement,de4dot.code.deobfuscators.Confuser,Deobfuscator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\Deobfuscator.cs,Initialize,The length of the statement  "				int32ValueInliner.Add(info.decryptMethod' (method' gim' args) => constDecrypter.DecryptInt32(int32ValueInliner.Method' method' args)); " is 134.
Long Statement,de4dot.code.deobfuscators.Confuser,Deobfuscator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\Deobfuscator.cs,Initialize,The length of the statement  "				int64ValueInliner.Add(info.decryptMethod' (method' gim' args) => constDecrypter.DecryptInt64(int64ValueInliner.Method' method' args)); " is 134.
Long Statement,de4dot.code.deobfuscators.Confuser,Deobfuscator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\Deobfuscator.cs,Initialize,The length of the statement  "				singleValueInliner.Add(info.decryptMethod' (method' gim' args) => constDecrypter.DecryptSingle(singleValueInliner.Method' method' args)); " is 137.
Long Statement,de4dot.code.deobfuscators.Confuser,Deobfuscator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\Deobfuscator.cs,Initialize,The length of the statement  "				doubleValueInliner.Add(info.decryptMethod' (method' gim' args) => constDecrypter.DecryptDouble(doubleValueInliner.Method' method' args)); " is 137.
Long Statement,de4dot.code.deobfuscators.Confuser,JitMethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\JitMethodsDecrypter.cs,CheckType,The length of the statement  "					if (DotNetUtils.CallsMethod(decryptMethod' "System.Security.Cryptography.Rijndael System.Security.Cryptography.Rijndael::Create()")) " is 132.
Long Statement,de4dot.code.deobfuscators.Confuser,JitMethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\JitMethodsDecrypter.cs,CheckType,The length of the statement  "				else if (DotNetUtils.CallsMethod(decryptMethod' "System.Security.Cryptography.Rijndael System.Security.Cryptography.Rijndael::Create()")) " is 137.
Long Statement,de4dot.code.deobfuscators.Confuser,JitMethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\JitMethodsDecrypter.cs,FindKey4,The length of the statement  "				index = ConfuserUtils.FindCallMethod(instrs' index' Code.Call' "System.Void System.Runtime.InteropServices.Marshal::Copy(System.Byte[]'System.Int32'System.IntPtr'System.Int32)"); " is 178.
Long Statement,de4dot.code.deobfuscators.Confuser,JitMethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\JitMethodsDecrypter.cs,InitializeMethodDataIndexes_v17_r73477,The length of the statement  "			var methodDataType = FindFirstThreeIndexes(method' out methodDataIndexes.maxStack' out methodDataIndexes.ehs' out methodDataIndexes.options); " is 141.
Long Statement,de4dot.code.deobfuscators.Confuser,MemoryMethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\MemoryMethodsDecrypter.cs,CheckType,The length of the statement  "			bool callsFileStreamCtor = DotNetUtils.CallsMethod(initMethod' "System.Void System.IO.FileStream::.ctor(System.String'System.IO.FileMode'System.IO.FileAccess'System.IO.FileShare)"); " is 181.
Long Statement,de4dot.code.deobfuscators.Confuser,MemoryMethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\MemoryMethodsDecrypter.cs,CheckType,The length of the statement  "				int calls = ConfuserUtils.CountCalls(initMethod' "System.Void System.Buffer::BlockCopy(System.Array'System.Int32'System.Array'System.Int32'System.Int32)"); " is 155.
Long Statement,de4dot.code.deobfuscators.Confuser,MemoryMethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\MemoryMethodsDecrypter.cs,CheckType,The length of the statement  "			else if (DotNetUtils.CallsMethod(decryptMethod' "System.Security.Cryptography.Rijndael System.Security.Cryptography.Rijndael::Create()")) " is 137.
Long Statement,de4dot.code.deobfuscators.Confuser,MemoryMethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\MemoryMethodsDecrypter.cs,FindKey5,The length of the statement  "				int index2 = ConfuserUtils.FindCallMethod(instrs' i' Code.Callvirt' "System.Int32 System.IO.BinaryReader::ReadInt32()"); " is 120.
Long Statement,de4dot.code.deobfuscators.Confuser,MethodsDecrypterBase,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\MethodsDecrypterBase.cs,CheckCallvirtReadUInt32,The length of the statement  "			if (!ConfuserUtils.IsCallMethod(instrs[index + 1]' Code.Callvirt' "System.UInt32 System.IO.BinaryReader::ReadUInt32()")) " is 120.
Long Statement,de4dot.code.deobfuscators.Confuser,MethodsDecrypterBase,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\MethodsDecrypterBase.cs,FindKey2OrKey3,The length of the statement  "			if (!ConfuserUtils.IsCallMethod(instrs[i++]' Code.Callvirt' "System.Byte[] System.IO.BinaryReader::ReadBytes(System.Int32)")) " is 125.
Long Statement,de4dot.code.deobfuscators.Confuser,ProxyCallFixer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ProxyCallFixer.cs,GetCallInfo_v10_r48717,The length of the statement  "			uint token = BitConverter.ToUInt32(Encoding.Unicode.GetBytes(info.field.Name.String.ToCharArray()' offs' 2)' 0) ^ creatorInfo.magic; " is 132.
Long Statement,de4dot.code.deobfuscators.Confuser,ProxyCallFixer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ProxyCallFixer.cs,FindDelegateCreator,The length of the statement  "					else if (proxyType != ProxyCreatorType.CallOrCallvirt || !HasFieldReference(method' "System.Reflection.Emit.OpCode System.Reflection.Emit.OpCodes::Castclass")) " is 159.
Long Statement,de4dot.code.deobfuscators.Confuser,ProxyCallFixer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ProxyCallFixer.cs,FindDelegateCreator,The length of the statement  "					else if (proxyType == ProxyCreatorType.CallOrCallvirt && DotNetUtils.CallsMethod(method' "System.Void System.Reflection.Emit.DynamicMethod::.ctor(System.String'System.Type'System.Type[]'System.Boolean)")) " is 204.
Long Statement,de4dot.code.deobfuscators.Confuser,ProxyCallFixer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ProxyCallFixer.cs,FindDelegateCreator,The length of the statement  "					DotNetUtils.CallsMethod(method' "System.Reflection.MethodBase System.Reflection.Module::ResolveMethod(System.Int32)")) { " is 120.
Long Statement,de4dot.code.deobfuscators.Confuser,ProxyCallFixer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ProxyCallFixer.cs,FindDelegateCreator,The length of the statement  "						theVersion = proxyType != ProxyCreatorType.CallOrCallvirt || callvirtChar == 9 ? ConfuserVersion.v18_r75367_native : ConfuserVersion.v18_r75369_native; " is 151.
Long Statement,de4dot.code.deobfuscators.Confuser,ProxyCallFixer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ProxyCallFixer.cs,FindDelegateCreator,The length of the statement  "						theVersion = proxyType != ProxyCreatorType.CallOrCallvirt || callvirtChar == 9 ? ConfuserVersion.v18_r75367_normal : ConfuserVersion.v18_r75369_normal; " is 151.
Long Statement,de4dot.code.deobfuscators.Confuser,ProxyCallFixer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ProxyCallFixer.cs,FindDelegateCreator,The length of the statement  "						if (proxyType == ProxyCreatorType.CallOrCallvirt && !DotNetUtils.CallsMethod(method' "System.Int32 System.String::get_Length()")) " is 129.
Long Statement,de4dot.code.deobfuscators.Confuser,ProxyCallFixer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ProxyCallFixer.cs,FindDelegateCreator,The length of the statement  "						int numCalls = ConfuserUtils.CountCalls(method' "System.Byte[] System.Text.Encoding::GetBytes(System.Char[]'System.Int32'System.Int32)"); " is 137.
Long Statement,de4dot.code.deobfuscators.Confuser,ProxyCallFixer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ProxyCallFixer.cs,FindDelegateCreator,The length of the statement  "						if (!DotNetUtils.CallsMethod(method' "System.Reflection.Assembly System.Reflection.Assembly::Load(System.Reflection.AssemblyName)")) " is 132.
Long Statement,de4dot.code.deobfuscators.Confuser,ProxyCallFixer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ProxyCallFixer.cs,FindDelegateCreator,The length of the statement  "						if (DotNetUtils.CallsMethod(method' "System.Void System.Runtime.CompilerServices.RuntimeHelpers::RunClassConstructor(System.RuntimeTypeHandle)")) " is 145.
Long Statement,de4dot.code.deobfuscators.Confuser,ProxyCallFixer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ProxyCallFixer.cs,GetFieldNameIndex,The length of the statement  "				i = ConfuserUtils.FindCallMethod(instrs' i' Code.Callvirt' "System.Byte[] System.Text.Encoding::GetBytes(System.Char[]'System.Int32'System.Int32)"); " is 148.
Long Statement,de4dot.code.deobfuscators.Confuser,ProxyCallFixer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ProxyCallFixer.cs,FindMagic_v18_r75367,The length of the statement  "				i = ConfuserUtils.FindCallMethod(instrs' i' Code.Callvirt' "System.Reflection.Module System.Reflection.MemberInfo::get_Module()"); " is 130.
Long Statement,de4dot.code.deobfuscators.Confuser,ProxyCallFixer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ProxyCallFixer.cs,FindNativeMethod_v18_r75367,The length of the statement  "				i = ConfuserUtils.FindCallMethod(instrs' i' Code.Callvirt' "System.Reflection.Module System.Reflection.MemberInfo::get_Module()"); " is 130.
Long Statement,de4dot.code.deobfuscators.Confuser,ProxyCallFixer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ProxyCallFixer.cs,FindMagic_v17_r73740,The length of the statement  "				int index = ConfuserUtils.FindCallMethod(instrs' i' Code.Call' "System.Int32 System.BitConverter::ToInt32(System.Byte[]'System.Int32)"); " is 136.
Long Statement,de4dot.code.deobfuscators.Confuser,ProxyCallFixer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ProxyCallFixer.cs,FindNativeMethod_v17_r73740,The length of the statement  "				int index = ConfuserUtils.FindCallMethod(instrs' i' Code.Call' "System.Int32 System.BitConverter::ToInt32(System.Byte[]'System.Int32)"); " is 136.
Long Statement,de4dot.code.deobfuscators.Confuser,ProxyCallFixer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ProxyCallFixer.cs,Is_v17_r73740,The length of the statement  "				int index = ConfuserUtils.FindCallMethod(instrs' i' Code.Callvirt' "System.Reflection.MethodBase System.Reflection.Module::ResolveMethod(System.Int32)"); " is 153.
Long Statement,de4dot.code.deobfuscators.Confuser,ProxyCallFixer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ProxyCallFixer.cs,FindMagic_v14_r58564,The length of the statement  "				int index = ConfuserUtils.FindCallMethod(instrs' i' Code.Call' "System.Int32 System.BitConverter::ToInt32(System.Byte[]'System.Int32)"); " is 136.
Long Statement,de4dot.code.deobfuscators.Confuser,ProxyCallFixer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ProxyCallFixer.cs,FindMagic_v14_r58564,The length of the statement  "				int index2 = ConfuserUtils.FindCallMethod(instrs' i' Code.Callvirt' "System.Reflection.MethodBase System.Reflection.Module::ResolveMethod(System.Int32)"); " is 154.
Long Statement,de4dot.code.deobfuscators.Confuser,ProxyCallFixer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ProxyCallFixer.cs,FindCallvirtChar,The length of the statement  "				index = ConfuserUtils.FindCallMethod(instrs' index' Code.Callvirt' "System.Char System.String::get_Chars(System.Int32)"); " is 121.
Long Statement,de4dot.code.deobfuscators.Confuser,ResourceDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ResourceDecrypter.cs,CheckMethod,The length of the statement  "			simpleDeobfuscator.Deobfuscate(method' SimpleDeobfuscatorFlags.Force | SimpleDeobfuscatorFlags.DisableConstantsFolderExtraInstrs); " is 130.
Long Statement,de4dot.code.deobfuscators.Confuser,ResourceDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ResourceDecrypter.cs,CheckMethod,The length of the statement  "			simpleDeobfuscator.Deobfuscate(tmpHandler' SimpleDeobfuscatorFlags.Force | SimpleDeobfuscatorFlags.DisableConstantsFolderExtraInstrs); " is 134.
Long Statement,de4dot.code.deobfuscators.Confuser,ResourceDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ResourceDecrypter.cs,CheckMethod,The length of the statement  "				if (!DotNetUtils.CallsMethod(tmpHandler' "System.Void System.Buffer::BlockCopy(System.Array'System.Int32'System.Array'System.Int32'System.Int32)")) { " is 149.
Long Statement,de4dot.code.deobfuscators.Confuser,ResourceDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ResourceDecrypter.cs,FindKey0_v18_r75367,The length of the statement  "				i = ConfuserUtils.FindCallMethod(instrs' i' Code.Callvirt' "System.Int32 System.IO.Stream::Read(System.Byte[]'System.Int32'System.Int32)"); " is 139.
Long Statement,de4dot.code.deobfuscators.Confuser,ResourceDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ResourceDecrypter.cs,FindKey0_v18_r75369,The length of the statement  "				index = ConfuserUtils.FindCallMethod(instrs' index' Code.Callvirt' "System.Int32 System.IO.Stream::Read(System.Byte[]'System.Int32'System.Int32)"); " is 147.
Long Statement,de4dot.code.deobfuscators.Confuser,ResourceDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ResourceDecrypter.cs,FindKey0_v17_r73404,The length of the statement  "				int index = ConfuserUtils.FindCallMethod(instrs' i' Code.Callvirt' "System.Byte[] System.IO.BinaryReader::ReadBytes(System.Int32)"); " is 132.
Long Statement,de4dot.code.deobfuscators.Confuser,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\StringDecrypter.cs,FindMagic1,The length of the statement  "				int index = ConfuserUtils.FindCallMethod(instrs' i' Code.Callvirt' "System.Byte[] System.IO.BinaryReader::ReadBytes(System.Int32)"); " is 132.
Long Statement,de4dot.code.deobfuscators.Confuser,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\StringDecrypter.cs,FindMagic2,The length of the statement  "				int index = ConfuserUtils.FindCallMethod(instrs' i' Code.Callvirt' "System.UInt32 System.IO.BinaryReader::ReadUInt32()"); " is 121.
Long Statement,de4dot.code.deobfuscators.Confuser,Decrypter_v10_r48832,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\StringDecrypter.cs,Decrypt,The length of the statement  "				int polyIndex = ConfuserUtils.FindCallMethod(instrs' 0' Code.Callvirt' "System.Int64 System.IO.BinaryReader::ReadInt64()"); " is 123.
Long Statement,de4dot.code.deobfuscators.Confuser,Unpacker,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\Unpacker.cs,FindEntryPointToken,The length of the statement  "			var modPowMethod = DotNetUtils.GetMethod(cctor.DeclaringType' "System.UInt64"' "(System.UInt64'System.UInt64'System.UInt64)"); " is 126.
Long Statement,de4dot.code.deobfuscators.CryptoObfuscator,AssemblyResolver,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CryptoObfuscator\AssemblyResolver.cs,CheckInitMethod,The length of the statement  "				if (methodRef == null || methodRef.FullName != "System.Void System.ResolveEventHandler::.ctor(System.Object'System.IntPtr)") " is 124.
Long Statement,de4dot.code.deobfuscators.CryptoObfuscator,CoUtils,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CryptoObfuscator\CoUtils.cs,GetResource,The length of the statement  "					resource = DotNetUtils.GetResource(module' Encoding.UTF8.GetString(Convert.FromBase64String(name))) as EmbeddedResource; " is 120.
Long Statement,de4dot.code.deobfuscators.CryptoObfuscator,Deobfuscator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CryptoObfuscator\Deobfuscator.cs,ScanForObfuscator,The length of the statement  "			foundObfuscatorUserString = Utils.StartsWith(module.ReadUserString(0x70000001)' "\u0011\"3D9B94A98B-76A8-4810-B1A0-4BE7C4F9C98D"' StringComparison.Ordinal); " is 156.
Long Statement,de4dot.code.deobfuscators.CryptoObfuscator,Deobfuscator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CryptoObfuscator\Deobfuscator.cs,DeobfuscateBegin,The length of the statement  "				int32ValueInliner.Add(constantsDecrypter.Int32Decrypter' (method' gim' args) => constantsDecrypter.DecryptInt32((int)args[0])); " is 127.
Long Statement,de4dot.code.deobfuscators.CryptoObfuscator,Deobfuscator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CryptoObfuscator\Deobfuscator.cs,DeobfuscateBegin,The length of the statement  "				int64ValueInliner.Add(constantsDecrypter.Int64Decrypter' (method' gim' args) => constantsDecrypter.DecryptInt64((int)args[0])); " is 127.
Long Statement,de4dot.code.deobfuscators.CryptoObfuscator,Deobfuscator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CryptoObfuscator\Deobfuscator.cs,DeobfuscateBegin,The length of the statement  "				singleValueInliner.Add(constantsDecrypter.SingleDecrypter' (method' gim' args) => constantsDecrypter.DecryptSingle((int)args[0])); " is 130.
Long Statement,de4dot.code.deobfuscators.CryptoObfuscator,Deobfuscator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CryptoObfuscator\Deobfuscator.cs,DeobfuscateBegin,The length of the statement  "				doubleValueInliner.Add(constantsDecrypter.DoubleDecrypter' (method' gim' args) => constantsDecrypter.DecryptDouble((int)args[0])); " is 130.
Long Statement,de4dot.code.deobfuscators.CryptoObfuscator,Deobfuscator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CryptoObfuscator\Deobfuscator.cs,DumpEmbeddedFile,The length of the statement  "			DeobfuscatedFile.CreateAssemblyFile(resourceDecrypter.Decrypt(resource.CreateReader().AsStream())' Utils.GetAssemblySimpleName(assemblyName)' extension); " is 153.
Long Statement,de4dot.code.deobfuscators.CryptoObfuscator,ProxyCallFixer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CryptoObfuscator\ProxyCallFixer.cs,CheckCctor,The length of the statement  "				var instrs = DotNetUtils.GetInstructions(instructions' i' OpCodes.Ldc_I4' OpCodes.Ldc_I4' OpCodes.Ldc_I4' OpCodes.Call); " is 120.
Long Statement,de4dot.code.deobfuscators.CryptoObfuscator,ResourceDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CryptoObfuscator\ResourceDecrypter.cs,FindDesktopOrCompactFrameworkV1,The length of the statement  "					if (!DotNetUtils.CallsMethod(method' "System.Void"' "(System.Array'System.Int32'System.Array'System.Int32'System.Int32)")) " is 122.
Long Statement,de4dot.code.deobfuscators.CryptoObfuscator,ResourceResolver,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CryptoObfuscator\ResourceResolver.cs,MergeResources,The length of the statement  "			DeobUtils.DecryptAndAddResources(module' resource.Name.String' () => resourceDecrypter.Decrypt(resource.CreateReader().AsStream())); " is 132.
Long Statement,de4dot.code.deobfuscators.CryptoObfuscator,ResourceResolver,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CryptoObfuscator\ResourceResolver.cs,CheckSetupMethod,The length of the statement  "				if (methodRef == null || methodRef.FullName != "System.Void System.ResolveEventHandler::.ctor(System.Object'System.IntPtr)") " is 124.
Long Statement,de4dot.code.deobfuscators.DeepSea,ArrayBlockState,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\DeepSea\ArrayBlockState.cs,InitializeArrays2,The length of the statement  "				var instrs = DotNetUtils.GetInstructions(instructions' i' OpCodes.Newarr' OpCodes.Dup' OpCodes.Ldtoken' OpCodes.Call' OpCodes.Stsfld); " is 134.
Long Statement,de4dot.code.deobfuscators.DeepSea,ArrayBlockState,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\DeepSea\ArrayBlockState.cs,InitializeArrays2,The length of the statement  "				if (calledMethod == null || calledMethod.FullName != "System.Void System.Runtime.CompilerServices.RuntimeHelpers::InitializeArray(System.Array'System.RuntimeFieldHandle)") " is 171.
Long Statement,de4dot.code.deobfuscators.DeepSea,ArrayBlockState,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\DeepSea\ArrayBlockState.cs,RemoveInitCode,The length of the statement  "					if (calledMethod == null || calledMethod.FullName != "System.Void System.Runtime.CompilerServices.RuntimeHelpers::InitializeArray(System.Array'System.RuntimeFieldHandle)") " is 171.
Long Statement,de4dot.code.deobfuscators.DeepSea,AssemblyResolver,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\DeepSea\AssemblyResolver.cs,CheckHandlerV4,The length of the statement  "				if (!DotNetUtils.IsMethod(decryptMethodTmp' "System.Reflection.Assembly"' "(System.RuntimeFieldHandle'System.Int32'System.Int32)")) " is 131.
Long Statement,de4dot.code.deobfuscators.DeepSea,CastDeobfuscator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\DeepSea\CastDeobfuscator.cs,Deobfuscate,The length of the statement  "							AddCast(block' castIndex' i + 1' instr.Instruction.GetArgumentType(blocks.Method.MethodSig' blocks.Method.DeclaringType)); " is 122.
Long Statement,de4dot.code.deobfuscators.DeepSea,FieldsRestorer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\DeepSea\FieldsRestorer.cs,Initialize,The length of the statement  "						var newField = module.UpdateRowId(new FieldDefUser(structField.Name' structField.FieldSig.Clone()' structField.Attributes)); " is 124.
Long Statement,de4dot.code.deobfuscators.DeepSea,FieldsRestorer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\DeepSea\FieldsRestorer.cs,CheckMethods,The length of the statement  "				if (type.BaseType != null && type.BaseType.FullName == "System.Object" && method.Name == ".ctor" && method.MethodSig.GetParamCount() == 0) " is 138.
Long Statement,de4dot.code.deobfuscators.DeepSea,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\DeepSea\StringDecrypter.cs,RemoveInitializeArrayCall,The length of the statement  "				if (calledMethod.ToString() != "System.Void System.Runtime.CompilerServices.RuntimeHelpers::InitializeArray(System.Array'System.RuntimeFieldHandle)") " is 149.
Long Statement,de4dot.code.deobfuscators.DeepSea,DecrypterInfo41,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\DeepSea\StringDecrypter.cs,GetArrayInfo,The length of the statement  "					var instrs = DotNetUtils.GetInstructions(instructions' i' OpCodes.Newarr' OpCodes.Dup' OpCodes.Ldtoken' OpCodes.Call' OpCodes.Stsfld); " is 134.
Long Statement,de4dot.code.deobfuscators.DeepSea,DecrypterInfo40,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\DeepSea\StringDecrypter.cs,FindEncryptedStrings,The length of the statement  "					var instrs = DotNetUtils.GetInstructions(initMethod.Body.Instructions' i' OpCodes.Ldtoken' OpCodes.Call' OpCodes.Stsfld); " is 121.
Long Statement,de4dot.code.deobfuscators.Dotfuscator,Deobfuscator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Dotfuscator\Deobfuscator.cs,DeobfuscateBegin,The length of the statement  "				staticStringInliner.Add(info.method' (method' gim' args) => stringDecrypter.Decrypt(method' (string)args[0]' (int)args[1])); " is 124.
Long Statement,de4dot.code.deobfuscators.Dotfuscator,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Dotfuscator\StringDecrypter.cs,FindStringDecrypterMethods,The length of the statement  "			foreach (var method in DotNetUtils.FindMethods(type.Methods' "System.String"' new string[] { "System.String"' "System.Int32" })) { " is 130.
Long Statement,de4dot.code.deobfuscators.dotNET_Reactor.v4,Deobfuscator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\dotNET_Reactor\v4\Deobfuscator.cs,DetectVersion,The length of the statement  "				bool callsReverse = DotNetUtils.CallsMethod(methodsDecrypter.Method' "System.Void System.Array::Reverse(System.Array)"); " is 120.
Long Statement,de4dot.code.deobfuscators.dotNET_Reactor.v4,Deobfuscator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\dotNET_Reactor\v4\Deobfuscator.cs,DetectVersion,The length of the statement  "				bool hasSymmetricAlgorithm = new LocalTypes(methodsDecrypter.Method).Exists("System.Security.Cryptography.SymmetricAlgorithm"); " is 127.
Long Statement,de4dot.code.deobfuscators.dotNET_Reactor.v4,EncryptedResource,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\dotNET_Reactor\v4\EncryptedResource.cs,SetNewResource,The length of the statement  "			var newResource = new EmbeddedResource(encryptedDataResource.Name' dataReaderFactory' 0' (uint)data.Length' encryptedDataResource.Attributes); " is 142.
Long Statement,de4dot.code.deobfuscators.dotNET_Reactor.v4,DecrypterV1,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\dotNET_Reactor\v4\EncryptedResource.cs,CouldBeResourceDecrypter,The length of the statement  "					if (localTypes.Exists("System.UInt64") || (localTypes.Exists("System.UInt32") && !localTypes.Exists("System.Reflection.Assembly"))) " is 131.
Long Statement,de4dot.code.deobfuscators.dotNET_Reactor.v4,MethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\dotNET_Reactor\v4\MethodsDecrypter.cs,EncryptNativeMethods,The length of the statement  "				Logger.v("Native method {0:X8}' code RVA {1:X8}"' new MDToken(Table.Method' moduleWriter.Metadata.GetRid(method)).Raw' codeRva); " is 128.
Long Statement,de4dot.code.deobfuscators.dotNET_Reactor.v4,MethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\dotNET_Reactor\v4\MethodsDecrypter.cs,GetCompileMethodType,The length of the statement  "			if (DotNetUtils.IsMethod(method' "System.UInt32"' "(System.UInt64&'System.IntPtr'System.IntPtr'System.UInt32'System.IntPtr&'System.UInt32&)")) " is 142.
Long Statement,de4dot.code.deobfuscators.dotNET_Reactor.v4,MethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\dotNET_Reactor\v4\MethodsDecrypter.cs,GetCompileMethodType,The length of the statement  "			if (DotNetUtils.IsMethod(method' "System.UInt32"' "(System.IntPtr'System.IntPtr'System.IntPtr'System.UInt32'System.IntPtr'System.UInt32&)")) " is 140.
Long Statement,de4dot.code.deobfuscators.Eazfuscator_NET,AssemblyResolver,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\AssemblyResolver.cs,FindCodeDomMethods,The length of the statement  "				var CompileAssemblyFromDom1         = GetTheOnlyMethod(nestedType' "System.CodeDom.Compiler.CodeDomProvider"' "CompileAssemblyFromDom"' "System.CodeDom.Compiler.CompilerResults"' "System.CodeDom.Compiler.CompilerParameters'System.CodeDom.CodeCompileUnit[]"); " is 258.
Long Statement,de4dot.code.deobfuscators.Eazfuscator_NET,AssemblyResolver,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\AssemblyResolver.cs,FindCodeDomMethods,The length of the statement  "				var CompileAssemblyFromFile1        = GetTheOnlyMethod(nestedType' "System.CodeDom.Compiler.CodeDomProvider"' "CompileAssemblyFromFile"' "System.CodeDom.Compiler.CompilerResults"' "System.CodeDom.Compiler.CompilerParameters'System.String[]"); " is 242.
Long Statement,de4dot.code.deobfuscators.Eazfuscator_NET,AssemblyResolver,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\AssemblyResolver.cs,FindCodeDomMethods,The length of the statement  "				var CompileAssemblyFromSource1      = GetTheOnlyMethod(nestedType' "System.CodeDom.Compiler.CodeDomProvider"' "CompileAssemblyFromSource"' "System.CodeDom.Compiler.CompilerResults"' "System.CodeDom.Compiler.CompilerParameters'System.String[]"); " is 244.
Long Statement,de4dot.code.deobfuscators.Eazfuscator_NET,AssemblyResolver,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\AssemblyResolver.cs,FindCodeDomMethods,The length of the statement  "				var CompileAssemblyFromDom2         = GetTheOnlyMethod(nestedType' "System.CodeDom.Compiler.ICodeCompiler"' "CompileAssemblyFromDom"' "System.CodeDom.Compiler.CompilerResults"' "System.CodeDom.Compiler.CompilerParameters'System.CodeDom.CodeCompileUnit"); " is 254.
Long Statement,de4dot.code.deobfuscators.Eazfuscator_NET,AssemblyResolver,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\AssemblyResolver.cs,FindCodeDomMethods,The length of the statement  "				var CompileAssemblyFromDomBatch2    = GetTheOnlyMethod(nestedType' "System.CodeDom.Compiler.ICodeCompiler"' "CompileAssemblyFromDomBatch"' "System.CodeDom.Compiler.CompilerResults"' "System.CodeDom.Compiler.CompilerParameters'System.CodeDom.CodeCompileUnit[]"); " is 261.
Long Statement,de4dot.code.deobfuscators.Eazfuscator_NET,AssemblyResolver,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\AssemblyResolver.cs,FindCodeDomMethods,The length of the statement  "				var CompileAssemblyFromFile2        = GetTheOnlyMethod(nestedType' "System.CodeDom.Compiler.ICodeCompiler"' "CompileAssemblyFromFile"' "System.CodeDom.Compiler.CompilerResults"' "System.CodeDom.Compiler.CompilerParameters'System.String"); " is 238.
Long Statement,de4dot.code.deobfuscators.Eazfuscator_NET,AssemblyResolver,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\AssemblyResolver.cs,FindCodeDomMethods,The length of the statement  "				var CompileAssemblyFromFileBatch2   = GetTheOnlyMethod(nestedType' "System.CodeDom.Compiler.ICodeCompiler"' "CompileAssemblyFromFileBatch"' "System.CodeDom.Compiler.CompilerResults"' "System.CodeDom.Compiler.CompilerParameters'System.String[]"); " is 245.
Long Statement,de4dot.code.deobfuscators.Eazfuscator_NET,AssemblyResolver,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\AssemblyResolver.cs,FindCodeDomMethods,The length of the statement  "				var CompileAssemblyFromSource2      = GetTheOnlyMethod(nestedType' "System.CodeDom.Compiler.ICodeCompiler"' "CompileAssemblyFromSource"' "System.CodeDom.Compiler.CompilerResults"' "System.CodeDom.Compiler.CompilerParameters'System.String"); " is 240.
Long Statement,de4dot.code.deobfuscators.Eazfuscator_NET,AssemblyResolver,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\AssemblyResolver.cs,FindCodeDomMethods,The length of the statement  "				var CompileAssemblyFromSourceBatch2 = GetTheOnlyMethod(nestedType' "System.CodeDom.Compiler.ICodeCompiler"' "CompileAssemblyFromSourceBatch"' "System.CodeDom.Compiler.CompilerResults"' "System.CodeDom.Compiler.CompilerParameters'System.String[]"); " is 247.
Long Statement,de4dot.code.deobfuscators.Eazfuscator_NET,CodeCompilerMethodCallRestorer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\CodeCompilerMethodCallRestorer.cs,Add_CodeDomProvider_CompileAssemblyFromDom,The length of the statement  "			Add(oldMethod' builder.InstanceMethod("CompileAssemblyFromDom"' CodeDomProvider' CompilerResults' CompilerParameters' CodeCompileUnitArray)); " is 141.
Long Statement,de4dot.code.deobfuscators.Eazfuscator_NET,CodeCompilerMethodCallRestorer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\CodeCompilerMethodCallRestorer.cs,Add_CodeDomProvider_CompileAssemblyFromFile,The length of the statement  "			Add(oldMethod' builder.InstanceMethod("CompileAssemblyFromFile"' CodeDomProvider' CompilerResults' CompilerParameters' StringArray)); " is 133.
Long Statement,de4dot.code.deobfuscators.Eazfuscator_NET,CodeCompilerMethodCallRestorer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\CodeCompilerMethodCallRestorer.cs,Add_CodeDomProvider_CompileAssemblyFromSource,The length of the statement  "			Add(oldMethod' builder.InstanceMethod("CompileAssemblyFromSource"' CodeDomProvider' CompilerResults' CompilerParameters' StringArray)); " is 135.
Long Statement,de4dot.code.deobfuscators.Eazfuscator_NET,CodeCompilerMethodCallRestorer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\CodeCompilerMethodCallRestorer.cs,Add_ICodeCompiler_CompileAssemblyFromDom,The length of the statement  "			Add(oldMethod' builder.InstanceMethod("CompileAssemblyFromDom"' ICodeCompiler' CompilerResults' CompilerParameters' CodeCompileUnit)); " is 134.
Long Statement,de4dot.code.deobfuscators.Eazfuscator_NET,CodeCompilerMethodCallRestorer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\CodeCompilerMethodCallRestorer.cs,Add_ICodeCompiler_CompileAssemblyFromDomBatch,The length of the statement  "			Add(oldMethod' builder.InstanceMethod("CompileAssemblyFromDomBatch"' ICodeCompiler' CompilerResults' CompilerParameters' CodeCompileUnitArray)); " is 144.
Long Statement,de4dot.code.deobfuscators.Eazfuscator_NET,CodeCompilerMethodCallRestorer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\CodeCompilerMethodCallRestorer.cs,Add_ICodeCompiler_CompileAssemblyFromFile,The length of the statement  "			Add(oldMethod' builder.InstanceMethod("CompileAssemblyFromFile"' ICodeCompiler' CompilerResults' CompilerParameters' builder.String)); " is 134.
Long Statement,de4dot.code.deobfuscators.Eazfuscator_NET,CodeCompilerMethodCallRestorer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\CodeCompilerMethodCallRestorer.cs,Add_ICodeCompiler_CompileAssemblyFromFileBatch,The length of the statement  "			Add(oldMethod' builder.InstanceMethod("CompileAssemblyFromFileBatch"' ICodeCompiler' CompilerResults' CompilerParameters' StringArray)); " is 136.
Long Statement,de4dot.code.deobfuscators.Eazfuscator_NET,CodeCompilerMethodCallRestorer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\CodeCompilerMethodCallRestorer.cs,Add_ICodeCompiler_CompileAssemblyFromSource,The length of the statement  "			Add(oldMethod' builder.InstanceMethod("CompileAssemblyFromSource"' ICodeCompiler' CompilerResults' CompilerParameters' builder.String)); " is 136.
Long Statement,de4dot.code.deobfuscators.Eazfuscator_NET,CodeCompilerMethodCallRestorer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\CodeCompilerMethodCallRestorer.cs,Add_ICodeCompiler_CompileAssemblyFromSourceBatch,The length of the statement  "			Add(oldMethod' builder.InstanceMethod("CompileAssemblyFromSourceBatch"' ICodeCompiler' CompilerResults' CompilerParameters' StringArray)); " is 138.
Long Statement,de4dot.code.deobfuscators.Eazfuscator_NET,Deobfuscator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\Deobfuscator.cs,StringDecrypterBugWorkaround,The length of the statement  "			var newType = module.UpdateRowId(new TypeDefUser(Guid.NewGuid().ToString("B")' module.CorLibTypes.Object.TypeDefOrRef)); " is 120.
Long Statement,de4dot.code.deobfuscators.Eazfuscator_NET,Deobfuscator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\Deobfuscator.cs,StringDecrypterBugWorkaround,The length of the statement  "			var newMethod = module.UpdateRowId(new MethodDefUser("x"' MethodSig.CreateStatic(module.CorLibTypes.Void)' 0' MethodAttributes.Static | MethodAttributes.HideBySig)); " is 165.
Long Statement,de4dot.code.deobfuscators.Eazfuscator_NET,DynocodeService,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\DynocodeService.cs,CreateEnumerator,The length of the statement  "			foreach (var method in ienumerable.GetType().GetMethods(BindingFlags.DeclaredOnly | BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic)) { " is 156.
Long Statement,de4dot.code.deobfuscators.Eazfuscator_NET,DynocodeService,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\DynocodeService.cs,FindEnumeratorMethods,The length of the statement  "			foreach (var method in ienumerable.GetType().GetMethods(BindingFlags.DeclaredOnly | BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic)) { " is 156.
Long Statement,de4dot.code.deobfuscators.Eazfuscator_NET,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\StringDecrypter.cs,CheckDecrypterMethod,The length of the statement  "			if (!(DotNetUtils.IsMethod(method' "System.String"' "(System.Int32)") || DotNetUtils.IsMethod(method' "System.String"' "(System.Int32'System.Boolean)"))) " is 153.
Long Statement,de4dot.code.deobfuscators.Eazfuscator_NET,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\StringDecrypter.cs,CheckDecrypterMethod,The length of the statement  "				if (instr.Operand is IMethod calledMethod && calledMethod.FullName == "System.IO.Stream System.Reflection.Assembly::GetManifestResourceStream(System.String)") " is 158.
Long Statement,de4dot.code.deobfuscators.Eazfuscator_NET,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\StringDecrypter.cs,FindResourceFromStringBuilder,The length of the statement  "			int endIndex = EfUtils.FindOpCodeIndex(method' startIndex' Code.Call' "System.String System.Text.StringBuilder::ToString()"); " is 125.
Long Statement,de4dot.code.deobfuscators.Eazfuscator_NET,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\StringDecrypter.cs,FindResourceFromStringBuilder,The length of the statement  "				if (instr.OpCode.Code == Code.Call && instr.Operand.ToString() == "System.Text.StringBuilder System.Text.StringBuilder::Append(System.Char)") { " is 143.
Long Statement,de4dot.code.deobfuscators.Eazfuscator_NET,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\StringDecrypter.cs,FindInts,The length of the statement  "					if (field == null || field.DeclaringType != stringMethod.DeclaringType || field.FieldType.GetElementType() != ElementType.I4) " is 125.
Long Statement,de4dot.code.deobfuscators.Eazfuscator_NET,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\StringDecrypter.cs,FindInts,The length of the statement  "					if (field == null || field.DeclaringType != stringMethod.DeclaringType || field.FieldType.GetElementType() != ElementType.I4) " is 125.
Long Statement,de4dot.code.deobfuscators.Goliath_NET,ArrayValueInliner,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Goliath_NET\ArrayValueInliner.cs,InlineReturnValues,The length of the statement  "				initializedDataCreator.AddInitializeArrayCode(block' callResult.callStartIndex' num' module.CorLibTypes.Byte.TypeDefOrRef' arrayData); " is 134.
Long Statement,de4dot.code.deobfuscators.Goliath_NET,DecrypterBase,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Goliath_NET\DecrypterBase.cs,Decrypt,The length of the statement  "				decryptedData[i] = (byte)(encryptedData[KEY_LEN + i] ^ encryptedData[(encryptedData[j] + encryptedData[ki]) % (KEY_LEN - 1)]); " is 126.
Long Statement,de4dot.code.deobfuscators.ILProtector,DynamicMethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\ILProtector\DynamicMethodsDecrypter.cs,FindDelegateFieldV2_0_8_0,The length of the statement  "			return FindDelegateField(mainType' "System.Boolean"' $"(System.Int32'System.Int32'System.Int32'System.Int32'{type.FullName}'System.Delegate&)"); " is 144.
Long Statement,de4dot.code.deobfuscators.ILProtector,DynamicMethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\ILProtector\DynamicMethodsDecrypter.cs,FindDelegateFieldV2_0_8_5,The length of the statement  "			return FindDelegateField(mainType' "System.Boolean"' $"(System.Int32'System.Int32'System.Int32'System.Int32'System.Diagnostics.StackTrace'{type.FullName}'System.Delegate&)"); " is 174.
Long Statement,de4dot.code.deobfuscators.ILProtector,DynamicMethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\ILProtector\DynamicMethodsDecrypter.cs,FindDelegateFieldV2_0_9_0,The length of the statement  "			return FindDelegateField(mainType' "System.Boolean"' $"(System.Int32'System.Int32'System.Int32'System.Int32'System.Diagnostics.StackTrace'{type.FullName})"); " is 157.
Long Statement,de4dot.code.deobfuscators.ILProtector,DecrypterBase,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\ILProtector\DynamicMethodsDecrypter.cs,GetNativeAddressOfDelegate,The length of the statement  "				var field = typeof(Delegate).GetField("_methodPtrAux"' BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic); " is 125.
Long Statement,de4dot.code.deobfuscators.ILProtector,DecrypterV2_0_0_0,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\ILProtector\DynamicMethodsDecrypter.cs,Decrypt,The length of the statement  "				if (!decryptMethod(Environment.Version.Major' appDomainId' asmHashCode' methodId' out var pMethodCode' out int methodSize)) " is 123.
Long Statement,de4dot.code.deobfuscators.ILProtector,DecrypterV2_0_8_0,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\ILProtector\DynamicMethodsDecrypter.cs,Decrypt,The length of the statement  "				if (!decryptMethod(Environment.Version.Major' appDomainId' asmHashCode' methodId' MyDecryptCallback' out var createdDelegate)) " is 126.
Long Statement,de4dot.code.deobfuscators.ILProtector,DecrypterV2_0_8_5,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\ILProtector\DynamicMethodsDecrypter.cs,Decrypt,The length of the statement  "				if (!decryptMethod(Environment.Version.Major' appDomainId' asmHashCode' methodId' new StackTrace()' MyDecryptCallback' out var createdDelegate) && " is 146.
Long Statement,de4dot.code.deobfuscators.ILProtector,DecrypterV2_0_13_0,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\ILProtector\DynamicMethodsDecrypter.cs,InitCode,The length of the statement  "					var del = (InitCode32Delegate)Marshal.GetDelegateForFunctionPointer(CodeAllocator.Allocate(initCode_x86)' typeof(InitCode32Delegate)); " is 134.
Long Statement,de4dot.code.deobfuscators.ILProtector,DecrypterV2_0_13_0,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\ILProtector\DynamicMethodsDecrypter.cs,InitCode,The length of the statement  "					var del = (InitCode64Delegate)Marshal.GetDelegateForFunctionPointer(new IntPtr(ba + 0x00014CF0)' typeof(InitCode64Delegate)); " is 125.
Long Statement,de4dot.code.deobfuscators.ILProtector,DynamicMethodsRestorer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\ILProtector\DynamicMethodsRestorer.cs,DecryptInternal,The length of the statement  "				decryptedData = client.GenericService.SendMessage(DynamicMethodsDecrypterService.MSG_DECRYPT_METHODS' new object[] { GetMethodIds() }) as IList<DecryptedMethodInfo>; " is 165.
Long Statement,de4dot.code.deobfuscators.ILProtector,DynamicMethodsRestorer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\ILProtector\DynamicMethodsRestorer.cs,DecryptInternal,The length of the statement  "				MethodReaderHasDelegateTypeFlag = (bool)client.GenericService.SendMessage(DynamicMethodsDecrypterService.MSG_HAS_DELEGATE_TYPE_FLAG' new object[0]); " is 148.
Long Statement,de4dot.code.deobfuscators.MaxtoCode,MethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MaxtoCode\MethodsDecrypter.cs,DecryptMethods,The length of the statement  "			var methodInfos = new MethodInfos(module' decrypterInfo.mainType' peImage' decrypterInfo.peHeader' decrypterInfo.mcKey); " is 120.
Long Statement,de4dot.code.deobfuscators.MaxtoCode,MethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MaxtoCode\MethodsDecrypter.cs,DecryptStrings,The length of the statement  "					Logger.v("Decrypted string: {0}"' Utils.ToCsharpString(Encoding.Unicode.GetString(fileData' usHeapOffsetString' stringDataLength - 1))); " is 136.
Long Statement,de4dot.code.deobfuscators.MaxtoCode,MethodInfos,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MaxtoCode\MethodsDecrypter.cs,InitializeDecrypter,The length of the statement  "					decrypters.Add(new Decrypter(new DecryptFunc[] { Decrypt1_v1' Decrypt4_v1' Decrypt2_v1' Decrypt3_v1' Decrypt5' Decrypt6' Decrypt7 }' new uint[] { 0x462FA2D2 })); " is 161.
Long Statement,de4dot.code.deobfuscators.MaxtoCode,MethodInfos,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MaxtoCode\MethodsDecrypter.cs,InitializeDecrypter,The length of the statement  "					decrypters.Add(new Decrypter(new DecryptFunc[] { Decrypt4_v1' Decrypt1_v1' Decrypt2_v1' Decrypt3_v1' Decrypt5' Decrypt6' Decrypt7 }' new uint[] { 0x471299D3 })); " is 161.
Long Statement,de4dot.code.deobfuscators.MaxtoCode,MethodInfos,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MaxtoCode\MethodsDecrypter.cs,InitializeDecrypter,The length of the statement  "				case EncryptionVersion.V2: decrypters.Add(new Decrypter(new DecryptFunc[] { Decrypt3_v1' Decrypt2_v1' Decrypt1_v1' Decrypt4_v1' Decrypt5' Decrypt6' Decrypt7 }' new uint[] { 0x482384FB' 0x4A5EEC64' 0x4BD6F703' 0x4C6220EC' 0x4C622357' 0x4C6E4605' 0x4D0E220D' 0x4DC2FC75' 0x4DC2FE0C' 0x4DFA3D5D })); break; " is 303.
Long Statement,de4dot.code.deobfuscators.MaxtoCode,MethodInfos,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MaxtoCode\MethodsDecrypter.cs,InitializeDecrypter,The length of the statement  "				case EncryptionVersion.V3: decrypters.Add(new Decrypter(new DecryptFunc[] { Decrypt1_v1' Decrypt2_v1' Decrypt3_v1' Decrypt4_v1' Decrypt5' Decrypt6' Decrypt7 }' new uint[] { 0x4ECF2195' 0x4ED76740' 0x4EE1FAD1 })); break; " is 219.
Long Statement,de4dot.code.deobfuscators.MaxtoCode,MethodInfos,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MaxtoCode\MethodsDecrypter.cs,InitializeDecrypter,The length of the statement  "				case EncryptionVersion.V4: decrypters.Add(new Decrypter(new DecryptFunc[] { Decrypt2_v1' Decrypt1_v1' Decrypt3_v1' Decrypt4_v1' Decrypt5' Decrypt6' Decrypt7 }' new uint[] { 0x4F832868' 0x4F8C86BE' 0x4F9447DB' 0x4FDEF2FF })); break; " is 231.
Long Statement,de4dot.code.deobfuscators.MaxtoCode,MethodInfos,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MaxtoCode\MethodsDecrypter.cs,InitializeDecrypter,The length of the statement  "					decrypters.Add(new Decrypter(new DecryptFunc[] { Decrypt4_v1' Decrypt2_v1' Decrypt3_v1' Decrypt1_v1' Decrypt5' Decrypt6' Decrypt7 }' new uint[] { 0x4F8E262C' 0x4F966B0B' 0x4FAB3CCF })); " is 185.
Long Statement,de4dot.code.deobfuscators.MaxtoCode,MethodInfos,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MaxtoCode\MethodsDecrypter.cs,InitializeDecrypter,The length of the statement  "					decrypters.Add(new Decrypter(new DecryptFunc[] { Decrypt4_v2' Decrypt2_v2' Decrypt3_v2' Decrypt1_v2' Decrypt6' Decrypt7' Decrypt5 }' new uint[] { 0x4FC7459E' 0x4FCEBD7B })); " is 173.
Long Statement,de4dot.code.deobfuscators.MaxtoCode,MethodInfos,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MaxtoCode\MethodsDecrypter.cs,InitializeDecrypter,The length of the statement  "					decrypters.Add(new Decrypter(new DecryptFunc[] { Decrypt4_v3' Decrypt2_v3' Decrypt3_v3' Decrypt1_v3' Decrypt6' Decrypt7' Decrypt5 }' new uint[] { 0x4FBE81DE })); " is 161.
Long Statement,de4dot.code.deobfuscators.MaxtoCode,MethodInfos,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MaxtoCode\MethodsDecrypter.cs,InitializeDecrypter,The length of the statement  "				case EncryptionVersion.V6: decrypters.Add(new Decrypter(new DecryptFunc[] { Decrypt4_v4' Decrypt2_v4' Decrypt3_v4' Decrypt1_v4' Decrypt6' Decrypt7' Decrypt5 }' new uint[] { 0x50A0963C })); break; " is 195.
Long Statement,de4dot.code.deobfuscators.MaxtoCode,MethodInfos,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MaxtoCode\MethodsDecrypter.cs,InitializeDecrypter,The length of the statement  "				case EncryptionVersion.V7: decrypters.Add(new Decrypter(new DecryptFunc[] { Decrypt4_v5' Decrypt2_v5' Decrypt3_v5' Decrypt1_v5' Decrypt6' Decrypt8_v5' Decrypt9_v5' Decrypt7' Decrypt5 }' new uint[] { 0x50D367A5 })); break; " is 221.
Long Statement,de4dot.code.deobfuscators.MaxtoCode,MethodInfos,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MaxtoCode\MethodsDecrypter.cs,InitializeDecrypter,The length of the statement  "					decrypters.Add(new Decrypter(new DecryptFunc[] { Decrypt4_v6' Decrypt2_v2' Decrypt3_v6' Decrypt1_v6' Decrypt6' Decrypt8_v6' Decrypt9_v6' Decrypt7' Decrypt10' Decrypt5 }' new uint[] { 0x5166DB4F' 0x51927495 })); " is 210.
Long Statement,de4dot.code.deobfuscators.MaxtoCode,MethodInfos,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MaxtoCode\MethodsDecrypter.cs,InitializeDecrypter,The length of the statement  "					decrypters.Add(new Decrypter(new DecryptFunc[] { Decrypt4_v7' Decrypt2_v2' Decrypt3_v6' Decrypt1_v7' Decrypt6' Decrypt8_v7' Decrypt9_v7' Decrypt7' Decrypt5 }' new uint[] { 0x51413D68 })); " is 187.
Long Statement,de4dot.code.deobfuscators.MaxtoCode,MethodInfos,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MaxtoCode\MethodsDecrypter.cs,InitializeDecrypter,The length of the statement  "					decrypters.Add(new Decrypter(new DecryptFunc[] { Decrypt4_v7' Decrypt2_v2' Decrypt3_v6' Decrypt1_v7' Decrypt6' Decrypt8_v8' Decrypt9_v8' Decrypt7' Decrypt5 }' new uint[] { 0x513D7124' 0x51413BD8 })); " is 199.
Long Statement,de4dot.code.deobfuscators.MaxtoCode,MethodInfos,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MaxtoCode\MethodsDecrypter.cs,InitializeDecrypter,The length of the statement  "					decrypters.Add(new Decrypter(new DecryptFunc[] { Decrypt4_v5' Decrypt2_v2' Decrypt3_v6' Decrypt1_v9' Decrypt6' Decrypt8_v8' Decrypt9_v9' Decrypt7' Decrypt5 }' new uint[] { 0x513D4492' 0x5113E277 })); " is 199.
Long Statement,de4dot.code.deobfuscators.MaxtoCode,MethodInfos,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MaxtoCode\MethodsDecrypter.cs,InitializeDecrypter,The length of the statement  "					decrypters.Add(new Decrypter(new DecryptFunc[] { Decrypt3_v6' Decrypt2_v2' Decrypt4_v8' Decrypt1_v10' Decrypt8_v9' Decrypt9_v10' Decrypt6' Decrypt7' Decrypt5 }' new uint[] { 0x526BDD12 })); " is 189.
Long Statement,de4dot.code.deobfuscators.MaxtoCode,MethodInfos,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MaxtoCode\MethodsDecrypter.cs,InitializeDecrypter,The length of the statement  "					decrypters.Add(new Decrypter(new DecryptFunc[] { Decrypt1_v10' Decrypt4_v8' Decrypt2_v2' Decrypt3_v6' Decrypt6' Decrypt8_v9' Decrypt9_v10' Decrypt7' Decrypt5 }' new uint[] { 0x526BC020 })); " is 189.
Long Statement,de4dot.code.deobfuscators.MaxtoCode,MethodInfos,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MaxtoCode\MethodsDecrypter.cs,InitializeDecrypter,The length of the statement  "					decrypters.Add(new Decrypter(new DecryptFunc[] { Decrypt3_v7' Decrypt2_v6' Decrypt4_v9' Decrypt1_v11' Decrypt8_v10' Decrypt11_v1' Decrypt6' Decrypt7' Decrypt5 }' new uint[] { 0x5296E242' 0x52B3043C })); " is 202.
Long Statement,de4dot.code.deobfuscators.MaxtoCode,MethodInfos,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MaxtoCode\MethodsDecrypter.cs,InitializeDecrypter,The length of the statement  "					decrypters.Add(new Decrypter(new DecryptFunc[] { Decrypt4_v10' Decrypt1_v12' Decrypt3_v8' Decrypt2_v7' Decrypt6' Decrypt8_v11' Decrypt9_v11' Decrypt7' Decrypt5 }' new uint[] { 0x531729C4 })); " is 191.
Long Statement,de4dot.code.deobfuscators.MaxtoCode,MethodInfos,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MaxtoCode\MethodsDecrypter.cs,InitializeDecrypter,The length of the statement  "					decrypters.Add(new Decrypter(new DecryptFunc[] { Decrypt1_v13' Decrypt4_v11' Decrypt2_v8' Decrypt3_v9' Decrypt6' Decrypt8_v11' Decrypt9_v12' Decrypt7' Decrypt5 }' new uint[] { 0x52B2B2A3 })); " is 191.
Long Statement,de4dot.code.deobfuscators.MaxtoCode,MethodInfos,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MaxtoCode\MethodsDecrypter.cs,InitializeDecrypter,The length of the statement  "					decrypters.Add(new Decrypter(new DecryptFunc[] { Decrypt2_v9' Decrypt3_v10' Decrypt1_v10' Decrypt4_v12' Decrypt8_v12' Decrypt9_v13' Decrypt6' Decrypt7' Decrypt5 }' new uint[] { 0x53172907 })); " is 192.
Long Statement,de4dot.code.deobfuscators.MaxtoCode,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MaxtoCode\StringDecrypter.cs,FindDecryptMethod,The length of the statement  "				if (!DotNetUtils.CallsMethod(method' "System.String System.Runtime.InteropServices.Marshal::PtrToStringAnsi(System.IntPtr)")) " is 125.
Long Statement,de4dot.code.deobfuscators.Rummage,DecrypterBaseV11,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Rummage\StringDecrypter.cs,Initialize,The length of the statement  "				reader = new BinaryReader(new FileStream(decrypterMethod.DeclaringType.Module.Location' FileMode.Open' FileAccess.Read' FileShare.Read)); " is 137.
Long Statement,de4dot.code.deobfuscators.SmartAssembly,AssemblyResolverInfo,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\SmartAssembly\AssemblyResolverInfo.cs,CheckResolverType,The length of the statement  "				DotNetUtils.FindFieldType(type' "System.Collections.Generic.Dictionary`2<System.String'System.Reflection.Assembly>"' true) != null) " is 131.
Long Statement,de4dot.code.deobfuscators.SmartAssembly,ResolverInfoBase,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\SmartAssembly\ResolverInfoBase.cs,GetResolverHandlers,The length of the statement  "				var instrs = DotNetUtils.GetInstructions(instructions' i' OpCodes.Call' OpCodes.Ldnull' OpCodes.Ldftn' OpCodes.Newobj' OpCodes.Callvirt); " is 137.
Long Statement,de4dot.code.deobfuscators.SmartAssembly,StringDecrypterInfo,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\SmartAssembly\StringDecrypterInfo.cs,FindDecrypterMethod,The length of the statement  "			var methods = new List<MethodDef>(DotNetUtils.FindMethods(stringsEncodingClass.Methods' "System.String"' new string[] { "System.Int32" })); " is 139.
Long Statement,de4dot.code.deobfuscators.SmartAssembly,TamperProtectionRemover,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\SmartAssembly\TamperProtectionRemover.cs,FindFirstBlocks,The length of the statement  "			18	003B	call	bool LiquidTechnologies.Licensing.ClientLicenseManager2::StrongNameSignatureVerificationEx(string' bool' bool&) " is 124.
Long Statement,de4dot.code.deobfuscators.SmartAssembly,TamperProtectionRemover,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\SmartAssembly\TamperProtectionRemover.cs,FindFirstBlocks,The length of the statement  "			int start = FindCallMethod(block' index' true' (calledMethod) => calledMethod.ToString() == "System.Reflection.Assembly System.Reflection.Assembly::GetExecutingAssembly()"); " is 173.
Long Statement,de4dot.code.deobfuscators.SmartAssembly,TamperProtectionRemover,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\SmartAssembly\TamperProtectionRemover.cs,FindFirstBlocks,The length of the statement  "			index = FindCallMethod(block' index' false' (calledMethod) => calledMethod.ToString() == "System.String System.Reflection.Assembly::get_Location()"); " is 149.
Long Statement,de4dot.code.deobfuscators.SmartAssembly,TamperProtectionRemover,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\SmartAssembly\TamperProtectionRemover.cs,FindFirstBlocks,The length of the statement  "				index = FindCallMethod(block' index' false' (calledMethod) => calledMethod.ToString() == "System.String System.Reflection.Assembly::get_CodeBase()"); " is 149.
Long Statement,de4dot.code.deobfuscators.SmartAssembly,TamperProtectionRemover,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\SmartAssembly\TamperProtectionRemover.cs,FindFirstBlocks,The length of the statement  "				index = FindCallMethod(block' index' false' (calledMethod) => calledMethod.ToString() == "System.String System.String::Replace(System.String'System.String)"); " is 158.
Long Statement,de4dot.code.deobfuscators.SmartAssembly,TamperProtectionRemover,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\SmartAssembly\TamperProtectionRemover.cs,FindFirstBlocks,The length of the statement  "				index = FindCallMethod(block' index' false' (calledMethod) => calledMethod.ToString() == "System.String System.String::Replace(System.String'System.String)"); " is 158.
Long Statement,de4dot.code.deobfuscators.SmartAssembly,TamperProtectionRemover,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\SmartAssembly\TamperProtectionRemover.cs,FindFirstBlocks,The length of the statement  "				index = FindCallMethod(block' index' false' (calledMethod) => calledMethod.ToString() == "System.String System.Uri::get_LocalPath()"); " is 134.
Long Statement,de4dot.code.deobfuscators.SmartAssembly,TamperProtectionRemover,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\SmartAssembly\TamperProtectionRemover.cs,RemoveTamperProtection,The length of the statement  "					Logger.w("Could not remove tamper protection code: {0} ({1:X8})"' Utils.RemoveNewlines(blocks.Method)' blocks.Method.MDToken.ToUInt32()); " is 137.
Long Statement,de4dot.code.deobfuscators.Spices_Net,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Spices_Net\StringDecrypter.cs,CheckCctor,The length of the statement  "				var instrs = DotNetUtils.GetInstructions(instructions' i + 1' OpCodes.Newarr' OpCodes.Dup' OpCodes.Ldtoken' OpCodes.Call); " is 122.
Long Statement,de4dot.code.deobfuscators.Xenocode,Deobfuscator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Xenocode\Deobfuscator.cs,DeobfuscateBegin,The length of the statement  "			staticStringInliner.Add(stringDecrypter.Method' (method' gim' args) => stringDecrypter.Decrypt((string)args[0]' (int)args[1])); " is 127.
Long Statement,de4dot.code.renamer.asmmodules,MTypeDef,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\renamer\asmmodules\TypeDef.cs,InstantiateVirtualMembers,The length of the statement  "					virtualMethodInstances.InitializeFrom(baseType.typeDef.virtualMethodInstances' baseType.typeRef.TryGetGenericInstSig()); " is 120.
Long Statement,de4dot.code.renamer,Renamer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\renamer\Renamer.cs,RenameGenericParams2,The length of the statement  "					Logger.v("GenParam: {0} => {1}"' Utils.RemoveNewlines(info.oldFullName)' Utils.RemoveNewlines(param.GenericParam.FullName)); " is 124.
Long Statement,de4dot.code.renamer,Renamer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\renamer\Renamer.cs,RenameMethods2,The length of the statement  "						Logger.v("Name: {0} => {1}"' Utils.RemoveNewlines(methodInfo.oldFullName)' Utils.RemoveNewlines(methodDef.MethodDef.FullName)); " is 127.
Long Statement,de4dot.code.renamer,Renamer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\renamer\Renamer.cs,RenameMethods2,The length of the statement  "								Logger.v("Param ({0}/{1}): {2} => {3}"' param.ParameterDef.MethodSigIndex + 1' methodDef.MethodDef.MethodSig.GetParamCount()' Utils.RemoveNewlines(paramInfo.oldName)' Utils.RemoveNewlines(paramInfo.newName)); " is 208.
Long Statement,de4dot.code.renamer,Renamer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\renamer\Renamer.cs,PrepareRenameMemberDefs,The length of the statement  "				else if (group.HasGetterOrSetterPropertyMethod() && GetPropertyMethodType(group.Methods[0]) != PropertyMethodType.Other) " is 120.
Long Statement,de4dot.code.renamer,Renamer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\renamer\Renamer.cs,PrepareRenameProperty,The length of the statement  "				newPropName = GetAvailableName(propPrefix' trySameName' group' (group2' newName) => IsPropertyAvailable(group2' newName)); " is 122.
Long Statement,de4dot.code.renamer,Renamer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\renamer\Renamer.cs,PrepareRenameEntryPoints,The length of the statement  "					Logger.w($"Could not find entry point. Module: {module.ModuleDefMD.Location}' Method: {Utils.RemoveNewlines(entryPoint)}"); " is 123.
Long Statement,de4dot.code.renamer,ResourceKeysRenamer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\renamer\ResourceKeysRenamer.cs,Rename,The length of the statement  "					case "System.IO.UnmanagedMemoryStream System.Resources.ResourceManager::GetStream(System.String'System.Globalization.CultureInfo)": " is 131.
Long Statement,de4dot.code.renamer,ResourceKeysRenamer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\renamer\ResourceKeysRenamer.cs,Rename,The length of the statement  "					Logger.v("Renamed resource key {0} => {1}"' Utils.ToCsharpString(info.element.Name)' Utils.ToCsharpString(info.newName)); " is 121.
Long Statement,de4dot.code.renamer,ResourceRenamer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\renamer\ResourceRenamer.cs,RenameResourceNamesInCode,The length of the statement  "						Logger.v("Possible resource name in code: '{0}' => '{1}' in method {2}"' Utils.RemoveNewlines(codeString)' newName' Utils.RemoveNewlines(method)); " is 146.
Long Statement,de4dot.code.renamer,ResourceRenamer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\renamer\ResourceRenamer.cs,RenameResourceNamesInCode,The length of the statement  "						Logger.v("Renamed resource string in code: '{0}' => '{1}' ({2})"' Utils.RemoveNewlines(codeString)' newName' Utils.RemoveNewlines(method)); " is 139.
Long Statement,de4dot.code.renamer,ResourceRenamer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\renamer\ResourceRenamer.cs,IsCallingResourceManagerCtor,The length of the statement  "				if (newobj.Operand.ToString() != "System.Void System.Resources.ResourceManager::.ctor(System.String'System.Reflection.Assembly)") " is 129.
Complex Conditional,de4dot.code.deobfuscators.Agile_NET,StackFrameHelper,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\StackFrameHelper.cs,Find,The conditional expression  "sig != null && method.IsStatic && method.HasBody &&  						sig.Params.Count == 2 && !method.HasGenericParameters &&  						!DotNetUtils.HasReturnValue(method) &&  						sig.Params[0].GetFullName() == "System.Exception" &&  						sig.Params[1].GetFullName() == "System.Object[]""  is complex.
Complex Conditional,de4dot.code.deobfuscators.Agile_NET.vm.v2,CsvmInfo,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\v2\CsvmInfo.cs,FindLocalOpsMethods,The conditional expression  "LogicalOpShrUn != null && LogicalOpShl != null &&  					LogicalOpShr != null && LogicalOpAnd != null &&  					LogicalOpXor != null && LogicalOpOr != null"  is complex.
Complex Conditional,de4dot.code.deobfuscators.Agile_NET.vm.v2,CsvmInfo,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\v2\CsvmInfo.cs,FindComparerMethods,The conditional expression  "CompareLt != null && CompareLte != null &&  					CompareGt != null && CompareGte != null &&  					CompareEq != null && CompareEqz != null"  is complex.
Complex Conditional,de4dot.code.deobfuscators.Agile_NET.vm.v2,CsvmInfo,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\v2\CsvmInfo.cs,FindArithmeticMethods,The conditional expression  "ArithmeticSubOvfUn != null && ArithmeticMulOvfUn != null &&  					ArithmeticRemUn != null && ArithmeticRem != null &&  					ArithmeticDivUn != null && ArithmeticDiv != null &&  					ArithmeticMul != null && ArithmeticMulOvf != null &&  					ArithmeticSub != null && ArithmeticSubOvf != null &&  					ArithmeticAddOvfUn != null && ArithmeticAddOvf != null &&  					ArithmeticAdd != null"  is complex.
Complex Conditional,de4dot.code.deobfuscators.Babel_NET,Deobfuscator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Babel_NET\Deobfuscator.cs,CheckVersion,The conditional expression  "versionField != null && versionField.IsLiteral && versionField.Constant != null && versionField.Constant.Value is string"  is complex.
Complex Conditional,de4dot.code.deobfuscators.Babel_NET,ReflectionToDNLibMethodCreator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Babel_NET\StringDecrypter.cs,DoCall,The conditional expression  "sig != null && sig.HasThis && calledMethod.DeclaringType.FullName == "System.Reflection.Emit.ILGenerator" && calledMethod.Name == "Emit""  is complex.
Complex Conditional,de4dot.code.deobfuscators.CodeVeil,Deobfuscator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CodeVeil\Deobfuscator.cs,DeobfuscateEnd,The conditional expression  "!type.HasNestedTypes && !type.HasProperties && !type.HasEvents && !type.HasFields"  is complex.
Complex Conditional,de4dot.code.deobfuscators.Confuser,ConstantsDecrypterV15,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsDecrypterV15.cs,DecryptData,The conditional expression  "typeCode != info.int32Type && typeCode != info.int64Type &&  				typeCode != info.singleType && typeCode != info.doubleType &&  				typeCode != info.stringType"  is complex.
Complex Conditional,de4dot.code.deobfuscators.Confuser,ConstantsDecrypterV17,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsDecrypterV17.cs,DecryptData,The conditional expression  "typeCode != info.int32Type && typeCode != info.int64Type &&  				typeCode != info.singleType && typeCode != info.doubleType &&  				typeCode != info.stringType"  is complex.
Complex Conditional,de4dot.code.deobfuscators.Confuser,ProxyCallFixer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ProxyCallFixer.cs,GetCallInfo_v10_r48717,The conditional expression  "table != 0 && table != 6 && table != 0x0A && table != 0x2B"  is complex.
Complex Conditional,de4dot.code.deobfuscators.Confuser,Unpacker,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\Unpacker.cs,UnpackMainAssembly,The conditional expression  "createAssembly && asm != null && entryPointToken != 0 && info.kind == ModuleKind.NetModule"  is complex.
Complex Conditional,de4dot.code.deobfuscators.CryptoObfuscator,AntiDebugger,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CryptoObfuscator\AntiDebugger.cs,Find,The conditional expression  "!ContainsString(method' "debugger is activ") &&  					!ContainsString(method' "debugger is running") &&  					!ContainsString(method' "Debugger detected") &&  					!ContainsString(method' "Debugger was detected") &&  					!ContainsString(method' "{0} was detected") &&  					!ContainsString(method' "run under") &&  					!ContainsString(method' "run with") &&  					!ContainsString(method' "started under") &&  					!ContainsString(method' "{0} detected") &&  					!ContainsString(method' "{0} was found - this software cannot be executed") &&  					!ContainsString(method' "{0} found")"  is complex.
Complex Conditional,de4dot.code.deobfuscators.DeepSea,DsMethodCallInliner,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\DeepSea\DsMethodCallInliner.cs,EmulateInstructions,The conditional expression  "!foundOpCodes.ContainsKey(Code.Brtrue) && !foundOpCodes.ContainsKey(Code.Brtrue_S) &&  					!foundOpCodes.ContainsKey(Code.Brfalse) && !foundOpCodes.ContainsKey(Code.Brfalse_S)"  is complex.
Complex Conditional,de4dot.code.deobfuscators.DeepSea,FieldsRestorer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\DeepSea\FieldsRestorer.cs,CheckMethods,The conditional expression  "type.BaseType != null && type.BaseType.FullName == "System.Object" && method.Name == ".ctor" && method.MethodSig.GetParamCount() == 0"  is complex.
Complex Conditional,de4dot.code.deobfuscators.Dotfuscator,StringBuilderDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Dotfuscator\StringBuilderDecrypter.cs,GetStringBuilderFixIndexs,The conditional expression  "insNoNops[i - 1].IsLdcI4() &&  					insNoNops[i].OpCode == OpCodes.Newarr &&  					insNoNops[i].Operand is TypeRef typeRef &&  					typeRef.FullName == typeof(Int32).FullName"  is complex.
Complex Conditional,de4dot.code.deobfuscators.Dotfuscator,StringBuilderDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Dotfuscator\StringBuilderDecrypter.cs,GetStringBuilderFixIndexs,The conditional expression  "i + 6 < insNoNops.Count &&  							insNoNops[i + 6].OpCode == OpCodes.Newobj &&  							insNoNops[i + 6].Operand is MemberRef memberRef &&  							memberRef.GetDeclaringTypeFullName() == typeof(StringBuilder).FullName &&  							memberRef.Name == ".ctor" &&  							insNoNops[i + 3].IsLdcI4()"  is complex.
Complex Conditional,de4dot.code.deobfuscators.Dotfuscator,StringBuilderDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Dotfuscator\StringBuilderDecrypter.cs,GetStringBuilderFixIndexs,The conditional expression  "i + 10 < insNoNops.Count &&  							insNoNops[i + 10].OpCode == OpCodes.Newobj &&  							insNoNops[i + 10].Operand is MemberRef memberRef &&  							memberRef.GetDeclaringTypeFullName() == typeof(StringBuilder).FullName &&  							memberRef.Name == ".ctor" &&  							insNoNops[i + 3].IsLdcI4() &&  							insNoNops[i + 7].IsLdcI4()"  is complex.
Complex Conditional,de4dot.code.deobfuscators.Dotfuscator,StringBuilderDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Dotfuscator\StringBuilderDecrypter.cs,GetStringBuilderFixIndexs,The conditional expression  "i + 5 < insNoNops.Count &&  							insNoNops[i + 2].OpCode == OpCodes.Ldtoken &&  							insNoNops[i + 2].Operand is FieldDef fieldDef &&  							fieldDef.InitialValue != null &&  							fieldDef.InitialValue.Length / 4 == arrLength &&  							insNoNops[i + 5].OpCode == OpCodes.Newobj &&  							insNoNops[i + 5].Operand is MemberRef memberRef &&  							memberRef.GetDeclaringTypeFullName() == typeof(StringBuilder).FullName &&  							memberRef.Name == ".ctor""  is complex.
Complex Conditional,de4dot.code.deobfuscators.dotNET_Reactor.v3,ApplicationModeUnpacker,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\dotNET_Reactor\v3\ApplicationModeUnpacker.cs,Unpack2,The conditional expression  "clrVerMajor <= 0 || clrVerMajor >= 20 || clrVerMinor >= 20 || clrVerBuild >= 1000000"  is complex.
Complex Conditional,de4dot.code.deobfuscators.Eazfuscator_NET,AssemblyResolver,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\AssemblyResolver.cs,FindCodeDomMethods,The conditional expression  "CompileAssemblyFromDom1 == null && CompileAssemblyFromFile1 == null &&  					CompileAssemblyFromSource1 == null && CompileAssemblyFromDom2 == null &&  					CompileAssemblyFromDomBatch2 == null && CompileAssemblyFromFile2 == null &&  					CompileAssemblyFromFileBatch2 == null && CompileAssemblyFromSource2 == null &&  					CompileAssemblyFromSourceBatch2 == null"  is complex.
Complex Conditional,de4dot.code.deobfuscators.Eazfuscator_NET,ResourceMethodsRestorer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\ResourceMethodsRestorer.cs,Find,The conditional expression  "getStream2 == null && getNames == null && getRefAsms == null &&  					bitmapCtor == null && iconCtor == null"  is complex.
Complex Conditional,de4dot.code.deobfuscators.Eazfuscator_NET,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\StringDecrypter.cs,GetRealDecrypterMethod,The conditional expression  "method.MDToken != helper.MDToken &&  					method.IsAssembly &&  					method.Parameters.Count >= 1 &&  					method.Parameters[0].Type == helper.Parameters[0].Type"  is complex.
Complex Conditional,de4dot.code.deobfuscators.Eazfuscator_NET,StreamHelperType,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\StringDecrypter.cs,StreamHelperType,The conditional expression  "method.IsStatic || method.Body == null || method.IsPrivate || method.GenericParameters.Count > 0"  is complex.
Complex Conditional,de4dot.code.deobfuscators.Eazfuscator_NET,VersionDetector,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\VersionDetector.cs,Detect,The conditional expression  "otherMethods.Count == 0 &&  				decryptStringType.NestedTypes.Count == 0 &&  				!hasConstantM2 &&  				!decryptStringMethod.IsNoInlining &&  				decryptStringMethod.IsPublic &&  				decryptStringMethod.IsSynchronized &&  				decryptStringMethod.Body.MaxStack >= 35 &&  				decryptStringMethod.Body.MaxStack <= 50 &&  				decryptStringMethod.Body.ExceptionHandlers.Count == 0 &&  				new LocalTypes(decryptStringMethod).Exactly(locals11) &&  				CheckTypeFields(fields11)"  is complex.
Complex Conditional,de4dot.code.deobfuscators.Eazfuscator_NET,VersionDetector,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\VersionDetector.cs,Detect,The conditional expression  "otherMethods.Count == 0 &&  				decryptStringType.NestedTypes.Count == 0 &&  				!hasConstantM2 &&  				!decryptStringMethod.IsNoInlining &&  				decryptStringMethod.IsPublic &&  				decryptStringMethod.IsSynchronized &&  				decryptStringMethod.Body.MaxStack >= 35 &&  				decryptStringMethod.Body.MaxStack <= 50 &&  				decryptStringMethod.Body.ExceptionHandlers.Count == 0 &&  				new LocalTypes(decryptStringMethod).Exactly(locals13) &&  				CheckTypeFields(fields13)"  is complex.
Complex Conditional,de4dot.code.deobfuscators.Eazfuscator_NET,VersionDetector,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\VersionDetector.cs,Detect,The conditional expression  "otherMethods.Count == 0 &&  				decryptStringType.NestedTypes.Count == 0 &&  				!hasConstantM2 &&  				!decryptStringMethod.IsNoInlining &&  				decryptStringMethod.IsPublic &&  				decryptStringMethod.IsSynchronized &&  				decryptStringMethod.Body.MaxStack >= 150 &&  				decryptStringMethod.Body.MaxStack <= 200 &&  				decryptStringMethod.Body.ExceptionHandlers.Count == 0 &&  				new LocalTypes(decryptStringMethod).Exactly(locals14) &&  				CheckTypeFields(fields14)"  is complex.
Complex Conditional,de4dot.code.deobfuscators.Eazfuscator_NET,VersionDetector,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\VersionDetector.cs,Detect,The conditional expression  "otherMethods.Count == 0 &&  				decryptStringType.NestedTypes.Count == 0 &&  				!hasConstantM2 &&  				!decryptStringMethod.IsNoInlining &&  				decryptStringMethod.IsPublic &&  				decryptStringMethod.IsSynchronized &&  				decryptStringMethod.Body.MaxStack >= 1 &&  				decryptStringMethod.Body.MaxStack <= 8 &&  				decryptStringMethod.Body.ExceptionHandlers.Count == 0 &&  				new LocalTypes(decryptStringMethod).Exactly(locals24) &&  				CheckTypeFields(fields24)"  is complex.
Complex Conditional,de4dot.code.deobfuscators.Eazfuscator_NET,VersionDetector,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\VersionDetector.cs,Detect,The conditional expression  "otherMethods.Count == 0 &&  				decryptStringType.NestedTypes.Count == 0 &&  				!hasConstantM2 &&  				!decryptStringMethod.IsNoInlining &&  				decryptStringMethod.IsPublic &&  				!decryptStringMethod.IsSynchronized &&  				decryptStringMethod.Body.MaxStack >= 1 &&  				decryptStringMethod.Body.MaxStack <= 8 &&  				decryptStringMethod.Body.ExceptionHandlers.Count == 1 &&  				new LocalTypes(decryptStringMethod).Exactly(locals26) &&  				CheckTypeFields(fields26)"  is complex.
Complex Conditional,de4dot.code.deobfuscators.Eazfuscator_NET,VersionDetector,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\VersionDetector.cs,Detect,The conditional expression  "otherMethods.Count == 0 &&  				decryptStringType.NestedTypes.Count == 0 &&  				!hasConstantM2 &&  				decryptStringMethod.IsNoInlining &&  				decryptStringMethod.IsPublic &&  				!decryptStringMethod.IsSynchronized &&  				decryptStringMethod.Body.MaxStack >= 1 &&  				decryptStringMethod.Body.MaxStack <= 8 &&  				decryptStringMethod.Body.ExceptionHandlers.Count == 1 &&  				new LocalTypes(decryptStringMethod).Exactly(locals27) &&  				CheckTypeFields(fields27)"  is complex.
Complex Conditional,de4dot.code.deobfuscators.Eazfuscator_NET,VersionDetector,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\VersionDetector.cs,Detect,The conditional expression  "otherMethods.Count == 0 &&  				decryptStringType.NestedTypes.Count == 0 &&  				!hasConstantM2 &&  				decryptStringMethod.IsNoInlining &&  				decryptStringMethod.IsAssembly &&  				!decryptStringMethod.IsSynchronized &&  				decryptStringMethod.Body.MaxStack >= 1 &&  				decryptStringMethod.Body.MaxStack <= 8 &&  				decryptStringMethod.Body.ExceptionHandlers.Count == 1 &&  				new LocalTypes(decryptStringMethod).Exactly(locals28) &&  				CheckTypeFields(fields28)"  is complex.
Complex Conditional,de4dot.code.deobfuscators.Eazfuscator_NET,VersionDetector,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\VersionDetector.cs,Detect,The conditional expression  "otherMethods.Count == 0 &&  				decryptStringType.NestedTypes.Count == 0 &&  				!hasConstantM2 &&  				decryptStringMethod.IsNoInlining &&  				decryptStringMethod.IsAssembly &&  				!decryptStringMethod.IsSynchronized &&  				decryptStringMethod.Body.MaxStack >= 1 &&  				decryptStringMethod.Body.MaxStack <= 8 &&  				(decryptStringMethod.Body.ExceptionHandlers.Count == 1 || decryptStringMethod.Body.ExceptionHandlers.Count == 2) &&  				new LocalTypes(decryptStringMethod).Exactly(locals29) &&  				CheckTypeFields(fields29)"  is complex.
Complex Conditional,de4dot.code.deobfuscators.Eazfuscator_NET,VersionDetector,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\VersionDetector.cs,Detect,The conditional expression  "otherMethods.Count == 1 &&  				decryptStringType.NestedTypes.Count == 0 &&  				DotNetUtils.IsMethod(otherMethods[0]' "System.Int32"' "(System.Byte[]'System.Int32'System.Byte[])") &&  				otherMethods[0].IsPrivate &&  				otherMethods[0].IsStatic &&  				new LocalTypes(otherMethods[0]).Exactly(olocals30) &&  				!hasConstantM2 &&  				decryptStringMethod.IsNoInlining &&  				decryptStringMethod.IsAssembly &&  				!decryptStringMethod.IsSynchronized &&  				decryptStringMethod.Body.MaxStack >= 1 &&  				decryptStringMethod.Body.MaxStack <= 8 &&  				(decryptStringMethod.Body.ExceptionHandlers.Count == 1 || decryptStringMethod.Body.ExceptionHandlers.Count == 2) &&  				new LocalTypes(decryptStringMethod).Exactly(locals30) &&  				CheckTypeFields(fields30)"  is complex.
Complex Conditional,de4dot.code.deobfuscators.Eazfuscator_NET,VersionDetector,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\VersionDetector.cs,Detect,The conditional expression  "otherMethods.Count == 1 &&  				decryptStringType.NestedTypes.Count == 0 &&  				DotNetUtils.IsMethod(otherMethods[0]' "System.Int32"' "(System.Byte[]'System.Int32'System.Byte[])") &&  				otherMethods[0].IsPrivate &&  				otherMethods[0].IsStatic &&  				new LocalTypes(otherMethods[0]).Exactly(olocals31) &&  				hasConstantM2 &&  				decryptStringMethod.IsNoInlining &&  				decryptStringMethod.IsAssembly &&  				!decryptStringMethod.IsSynchronized &&  				decryptStringMethod.Body.MaxStack >= 1 &&  				decryptStringMethod.Body.MaxStack <= 8 &&  				(decryptStringMethod.Body.ExceptionHandlers.Count == 1 || decryptStringMethod.Body.ExceptionHandlers.Count == 2) &&  				new LocalTypes(decryptStringMethod).Exactly(locals31) &&  				CheckTypeFields(fields31)"  is complex.
Complex Conditional,de4dot.code.deobfuscators.Eazfuscator_NET,VersionDetector,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\VersionDetector.cs,Detect,The conditional expression  "otherMethods.Count == 1 &&  				decryptStringType.NestedTypes.Count == 0 &&  				DotNetUtils.IsMethod(otherMethods[0]' "System.Void"' "(System.Byte[]'System.Int32'System.Byte[])") &&  				otherMethods[0].IsPrivate &&  				otherMethods[0].IsStatic &&  				new LocalTypes(otherMethods[0]).Exactly(olocals32) &&  				hasConstantM2 &&  				decryptStringMethod.IsNoInlining &&  				decryptStringMethod.IsAssembly &&  				!decryptStringMethod.IsSynchronized &&  				decryptStringMethod.Body.MaxStack >= 1 &&  				decryptStringMethod.Body.MaxStack <= 8 &&  				(decryptStringMethod.Body.ExceptionHandlers.Count == 1 || decryptStringMethod.Body.ExceptionHandlers.Count == 2) &&  				new LocalTypes(decryptStringMethod).Exactly(locals32) &&  				CheckTypeFields(fields32)"  is complex.
Complex Conditional,de4dot.code.deobfuscators.Eazfuscator_NET,VersionDetector,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\VersionDetector.cs,Detect,The conditional expression  "otherMethods.Count == 1 &&  					decryptStringType.NestedTypes.Count == 1 &&  					DotNetUtils.IsMethod(otherMethods[0]' "System.Void"' "(System.Byte[]'System.Int32'System.Byte[])") &&  					otherMethods[0].IsPrivate &&  					otherMethods[0].IsStatic &&  					new LocalTypes(otherMethods[0]).Exactly(olocals33) &&  					hasConstantM2 &&  					decryptStringMethod.IsNoInlining &&  					decryptStringMethod.IsAssembly &&  					!decryptStringMethod.IsSynchronized &&  					decryptStringMethod.Body.MaxStack >= 1 &&  					decryptStringMethod.Body.MaxStack <= 8 &&  					(decryptStringMethod.Body.ExceptionHandlers.Count == 1 || decryptStringMethod.Body.ExceptionHandlers.Count == 2) &&  					new LocalTypes(decryptStringMethod).Exactly(locals33) &&  					CheckTypeFields(fields33)"  is complex.
Complex Conditional,de4dot.code.deobfuscators.Eazfuscator_NET,VersionDetector,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\VersionDetector.cs,Detect,The conditional expression  "otherMethods.Count == 1 &&  					decryptStringType.NestedTypes.Count == 3 &&  					DotNetUtils.IsMethod(otherMethods[0]' "System.Void"' "(System.Byte[]'System.Int32'System.Byte[])") &&  					otherMethods[0].IsPrivate &&  					otherMethods[0].IsStatic &&  					new LocalTypes(otherMethods[0]).Exactly(olocals33) &&  					decryptStringMethod.IsNoInlining &&  					decryptStringMethod.IsAssembly &&  					!decryptStringMethod.IsSynchronized &&  					decryptStringMethod.Body.MaxStack >= 1 &&  					decryptStringMethod.Body.MaxStack <= 8 &&  					(decryptStringMethod.Body.ExceptionHandlers.Count == 1 || decryptStringMethod.Body.ExceptionHandlers.Count == 2) &&  					new LocalTypes(decryptStringMethod).Exactly(locals33) &&  					CheckTypeFields(fields33)"  is complex.
Complex Conditional,de4dot.code.deobfuscators.Eazfuscator_NET,VersionDetector,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\VersionDetector.cs,Detect,The conditional expression  "otherMethods.Count == 1 &&  					decryptStringType.NestedTypes.Count == 3 &&  					DotNetUtils.IsMethod(otherMethods[0]' "System.Void"' "(System.Byte[]'System.Int32'System.Byte[])") &&  					otherMethods[0].IsPrivate &&  					otherMethods[0].IsStatic &&  					new LocalTypes(otherMethods[0]).Exactly(olocals33_149) &&  					decryptStringMethod.IsNoInlining &&  					decryptStringMethod.IsAssembly &&  					!decryptStringMethod.IsSynchronized &&  					decryptStringMethod.Body.MaxStack >= 1 &&  					decryptStringMethod.Body.MaxStack <= 8 &&  					(decryptStringMethod.Body.ExceptionHandlers.Count == 1 || decryptStringMethod.Body.ExceptionHandlers.Count == 2) &&  					new LocalTypes(decryptStringMethod).Exactly(locals33_149) &&  					CheckTypeFields2(fields33_149)"  is complex.
Complex Conditional,de4dot.code.deobfuscators.Eazfuscator_NET,VersionDetector,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\VersionDetector.cs,Detect,The conditional expression  "otherMethods.Count == 1 &&  					decryptStringType.NestedTypes.Count == 3 &&  					DotNetUtils.IsMethod(otherMethods[0]' "System.Void"' "(System.Byte[]'System.Int32'System.Byte[])") &&  					otherMethods[0].IsPrivate &&  					otherMethods[0].IsStatic &&  					new LocalTypes(otherMethods[0]).Exactly(olocals35) &&  					decryptStringMethod.IsNoInlining &&  					decryptStringMethod.IsAssembly &&  					!decryptStringMethod.IsSynchronized &&  					decryptStringMethod.Body.MaxStack >= 1 &&  					decryptStringMethod.Body.MaxStack <= 8 &&  					decryptStringMethod.Body.ExceptionHandlers.Count >= 2 &&  					new LocalTypes(decryptStringMethod).All(locals35) &&  					CheckTypeFields2(fields35)"  is complex.
Complex Conditional,de4dot.code.deobfuscators.Eazfuscator_NET,VersionDetector,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\VersionDetector.cs,Detect,The conditional expression  "otherMethods.Count == 1 &&  					decryptStringType.NestedTypes.Count == 3 &&  					DotNetUtils.IsMethod(otherMethods[0]' "System.Void"' "(System.Byte[]'System.Int32'System.Byte[])") &&  					otherMethods[0].IsPrivate &&  					otherMethods[0].IsStatic &&  					new LocalTypes(otherMethods[0]).Exactly(olocals43) &&  					decryptStringMethod.IsNoInlining &&  					decryptStringMethod.IsAssembly &&  					!decryptStringMethod.IsSynchronized &&  					decryptStringMethod.Body.MaxStack >= 1 &&  					decryptStringMethod.Body.MaxStack <= 8 &&  					decryptStringMethod.Body.ExceptionHandlers.Count >= 2 &&  					new LocalTypes(decryptStringMethod).All(locals43) &&  					CheckTypeFields2(fields43)"  is complex.
Complex Conditional,de4dot.code.deobfuscators.Eazfuscator_NET,VersionDetector,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\VersionDetector.cs,Detect,The conditional expression  "stringDecrypter.HasRealMethod &&  					otherMethods.Count == 2 &&  					otherMethod50 != null &&  					decryptStringType.NestedTypes.Count == 3 &&  					otherMethod50.IsPrivate &&  					otherMethod50.IsStatic &&  					decryptStringMethod.IsNoInlining &&  					decryptStringMethod.IsAssembly &&  					!decryptStringMethod.IsSynchronized &&  					decryptStringMethod.Body.MaxStack >= 1 &&  					decryptStringMethod.Body.MaxStack <= 8 &&  					decryptStringMethod.Body.ExceptionHandlers.Count == 1 &&  					new LocalTypes(decryptStringMethod).All(locals50) &&  					CheckTypeFields2(fields50)"  is complex.
Complex Conditional,de4dot.code.deobfuscators.Eazfuscator_NET,VersionDetector,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\VersionDetector.cs,Detect,The conditional expression  "stringDecrypter.HasRealMethod &&  				    otherMethods.Count == 5 &&  				    otherMethod50 != null &&  				    decryptStringType.NestedTypes.Count == 3 &&  				    otherMethod50.IsPrivate &&  				    otherMethod50.IsStatic &&  				    decryptStringMethod.IsNoInlining &&  				    decryptStringMethod.IsAssembly &&  				    !decryptStringMethod.IsSynchronized &&  				    decryptStringMethod.Body.MaxStack >= 1 &&  				    decryptStringMethod.Body.MaxStack <= 8 &&  				    decryptStringMethod.Body.ExceptionHandlers.Count == 1"  is complex.
Complex Conditional,de4dot.code.deobfuscators.SmartAssembly,Deobfuscator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\SmartAssembly\Deobfuscator.cs,HasEmptyClassesInEveryNamespace,The conditional expression  "type.Name != "" || type.IsPublic || type.HasFields || type.HasMethods || type.HasProperties || type.HasEvents"  is complex.
Complex Conditional,de4dot.code.deobfuscators.Spices_Net,SpicesMethodCallInliner,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Spices_Net\SpicesMethodCallInliner.cs,CheckMethodsType,The conditional expression  "type.HasProperties || type.HasEvents || type.HasFields || type.HasNestedTypes"  is complex.
Complex Conditional,de4dot.code.renamer,TypeInfo,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\renamer\TypeInfo.cs,PrepareRenameMethodArgs,The conditional expression  "(methodDef.Property != null && methodDef == methodDef.Property.SetMethod) ||  				(methodDef.Event != null && (methodDef == methodDef.Event.AddMethod || methodDef == methodDef.Event.RemoveMethod))"  is complex.
Virtual Method Call from Constructor,de4dot.code.deobfuscators.ILProtector,DecrypterV2_0_13_0_Base,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\ILProtector\DynamicMethodsDecrypter.cs,DecrypterV2_0_13_0_Base,The constructor "DecrypterV2_0_13_0_Base" calls a virtual method "InitCode".
Virtual Method Call from Constructor,de4dot.code.renamer,TypeNameCreator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\renamer\NameCreators.cs,TypeNameCreator,The constructor "TypeNameCreator" calls a virtual method "CreateNameCreator".
Virtual Method Call from Constructor,de4dot.code.renamer,TypeNameCreator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\renamer\NameCreators.cs,TypeNameCreator,The constructor "TypeNameCreator" calls a virtual method "CreateNameCreator".
Virtual Method Call from Constructor,de4dot.code.renamer,TypeNameCreator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\renamer\NameCreators.cs,TypeNameCreator,The constructor "TypeNameCreator" calls a virtual method "CreateNameCreator".
Virtual Method Call from Constructor,de4dot.code.renamer,TypeNameCreator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\renamer\NameCreators.cs,TypeNameCreator,The constructor "TypeNameCreator" calls a virtual method "CreateNameCreator".
Virtual Method Call from Constructor,de4dot.code.renamer,TypeNameCreator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\renamer\NameCreators.cs,TypeNameCreator,The constructor "TypeNameCreator" calls a virtual method "CreateNameCreator".
Virtual Method Call from Constructor,de4dot.code.renamer,TypeNameCreator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\renamer\NameCreators.cs,TypeNameCreator,The constructor "TypeNameCreator" calls a virtual method "CreateNameCreator".
Virtual Method Call from Constructor,de4dot.code.renamer,TypeNameCreator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\renamer\NameCreators.cs,TypeNameCreator,The constructor "TypeNameCreator" calls a virtual method "CreateNameCreator".
Empty Catch Block,de4dot.code.AssemblyClient,AssemblyClient,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\AssemblyClient\AssemblyClient.cs,WaitConnected,The method has an empty catch block.
Empty Catch Block,de4dot.code.AssemblyClient,AssemblyClient,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\AssemblyClient\AssemblyClient.cs,Dispose,The method has an empty catch block.
Empty Catch Block,de4dot.code.AssemblyClient,AssemblyClient,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\AssemblyClient\AssemblyClient.cs,Dispose,The method has an empty catch block.
Empty Catch Block,de4dot.code,TheAssemblyResolver,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\AssemblyResolver.cs,AddSilverlightDirs,The method has an empty catch block.
Empty Catch Block,de4dot.code,ObfuscatedFile,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\ObfuscatedFile.cs,UnpackNativeImage,The method has an empty catch block.
Empty Catch Block,de4dot.code.deobfuscators.Agile_NET,MethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\MethodsDecrypter.cs,Decrypt2,The method has an empty catch block.
Empty Catch Block,de4dot.code.deobfuscators.Agile_NET,MethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\MethodsDecrypter.cs,Detect,The method has an empty catch block.
Empty Catch Block,de4dot.code.deobfuscators.Agile_NET,MethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\MethodsDecrypter.cs,Detect,The method has an empty catch block.
Empty Catch Block,de4dot.code.deobfuscators,MethodStack,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MethodStack.cs,GetPushedArgInstructions,The method has an empty catch block.
Empty Catch Block,de4dot.code.deobfuscators.Babel_NET,MethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Babel_NET\MethodsDecrypter.cs,GetFile,The method has an empty catch block.
Empty Catch Block,de4dot.code.deobfuscators.Confuser,Deobfuscator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\Deobfuscator.cs,ScanForObfuscator,The method has an empty catch block.
Empty Catch Block,de4dot.code.deobfuscators.Confuser,Deobfuscator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\Deobfuscator.cs,ModuleReloaded,The method has an empty catch block.
Empty Catch Block,de4dot.code.deobfuscators.Confuser,Unpacker,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\Unpacker.cs,GetEmbeddedAssemblyInfos,The method has an empty catch block.
Empty Catch Block,de4dot.code.deobfuscators.CryptoObfuscator,CoUtils,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CryptoObfuscator\CoUtils.cs,GetResource,The method has an empty catch block.
Empty Catch Block,de4dot.code.deobfuscators.CryptoObfuscator,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CryptoObfuscator\StringDecrypter.cs,GetResourceName,The method has an empty catch block.
Empty Catch Block,de4dot.code.deobfuscators.dotNET_Reactor.v3,ApplicationModeUnpacker,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\dotNET_Reactor\v3\ApplicationModeUnpacker.cs,Unpack,The method has an empty catch block.
Empty Catch Block,de4dot.code.deobfuscators.Eazfuscator_NET,AssemblyResolver,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\AssemblyResolver.cs,InitializeNameAndExtension,The method has an empty catch block.
Empty Catch Block,de4dot.code.deobfuscators.ILProtector,DecrypterBase,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\ILProtector\DynamicMethodsDecrypter.cs,PatchRuntime,The method has an empty catch block.
Empty Catch Block,de4dot.code.deobfuscators.ILProtector,RuntimeFileInfo,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\ILProtector\RuntimeFileInfo.cs,GetVersion2,The method has an empty catch block.
Empty Catch Block,de4dot.code.deobfuscators.ILProtector,RuntimeFileInfo,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\ILProtector\RuntimeFileInfo.cs,GetHash,The method has an empty catch block.
Empty Catch Block,de4dot.code.deobfuscators.ILProtector,DecrypterV106,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\ILProtector\StaticMethodsDecrypter.cs,GetMethodsData,The method has an empty catch block.
Empty Catch Block,de4dot.code.deobfuscators.ILProtector,DecrypterV106,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\ILProtector\StaticMethodsDecrypter.cs,GetMethodsData,The method has an empty catch block.
Empty Catch Block,de4dot.code.deobfuscators.MaxtoCode,MethodInfos,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MaxtoCode\MethodsDecrypter.cs,GetRuntimeTimeStamp,The method has an empty catch block.
Empty Catch Block,de4dot.code.deobfuscators.MaxtoCode,MethodInfos,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MaxtoCode\MethodsDecrypter.cs,GetRuntimeTimeStamp,The method has an empty catch block.
Empty Catch Block,de4dot.code.deobfuscators.MaxtoCode,MethodInfos,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MaxtoCode\MethodsDecrypter.cs,InitializeInfos2,The method has an empty catch block.
Empty Catch Block,de4dot.code.deobfuscators.MaxtoCode,MethodInfos,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MaxtoCode\MethodsDecrypter.cs,InitializeInfos2,The method has an empty catch block.
Empty Catch Block,de4dot.code.renamer,Renamer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\renamer\Renamer.cs,HasXamlFiles,The method has an empty catch block.
Magic Number,SevenZip.Compression.LZMA,State,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\7zip\Compress\LZMA\LzmaBase.cs,UpdateChar,The following statement contains a magic number: Index < 4
Magic Number,SevenZip.Compression.LZMA,State,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\7zip\Compress\LZMA\LzmaBase.cs,UpdateMatch,The following statement contains a magic number: Index = (uint)(Index < 7 ? 7 : 10);
Magic Number,SevenZip.Compression.LZMA,State,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\7zip\Compress\LZMA\LzmaBase.cs,UpdateMatch,The following statement contains a magic number: Index = (uint)(Index < 7 ? 7 : 10);
Magic Number,SevenZip.Compression.LZMA,State,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\7zip\Compress\LZMA\LzmaBase.cs,UpdateMatch,The following statement contains a magic number: Index = (uint)(Index < 7 ? 7 : 10);
Magic Number,SevenZip.Compression.LZMA,State,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\7zip\Compress\LZMA\LzmaBase.cs,UpdateRep,The following statement contains a magic number: Index = (uint)(Index < 7 ? 8 : 11);
Magic Number,SevenZip.Compression.LZMA,State,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\7zip\Compress\LZMA\LzmaBase.cs,UpdateRep,The following statement contains a magic number: Index = (uint)(Index < 7 ? 8 : 11);
Magic Number,SevenZip.Compression.LZMA,State,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\7zip\Compress\LZMA\LzmaBase.cs,UpdateRep,The following statement contains a magic number: Index = (uint)(Index < 7 ? 8 : 11);
Magic Number,SevenZip.Compression.LZMA,State,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\7zip\Compress\LZMA\LzmaBase.cs,UpdateShortRep,The following statement contains a magic number: Index = (uint)(Index < 7 ? 9 : 11);
Magic Number,SevenZip.Compression.LZMA,State,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\7zip\Compress\LZMA\LzmaBase.cs,UpdateShortRep,The following statement contains a magic number: Index = (uint)(Index < 7 ? 9 : 11);
Magic Number,SevenZip.Compression.LZMA,State,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\7zip\Compress\LZMA\LzmaBase.cs,UpdateShortRep,The following statement contains a magic number: Index = (uint)(Index < 7 ? 9 : 11);
Magic Number,SevenZip.Compression.LZMA,State,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\7zip\Compress\LZMA\LzmaBase.cs,IsCharState,The following statement contains a magic number: return Index < 7;
Magic Number,SevenZip.Compression.LZMA,Decoder,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\7zip\Compress\LZMA\LzmaDecoder.cs,SetDictionarySize,The following statement contains a magic number: uint blockSize = Math.Max(m_DictionarySizeCheck' (1 << 12));
Magic Number,SevenZip.Compression.LZMA,Decoder,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\7zip\Compress\LZMA\LzmaDecoder.cs,SetLiteralProperties,The following statement contains a magic number: lp > 8
Magic Number,SevenZip.Compression.LZMA,Decoder,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\7zip\Compress\LZMA\LzmaDecoder.cs,SetLiteralProperties,The following statement contains a magic number: lc > 8
Magic Number,SevenZip.Compression.LZMA,Decoder,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\7zip\Compress\LZMA\LzmaDecoder.cs,SetDecoderProperties,The following statement contains a magic number: properties.Length < 5
Magic Number,SevenZip.Compression.LZMA,Decoder,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\7zip\Compress\LZMA\LzmaDecoder.cs,SetDecoderProperties,The following statement contains a magic number: int lc = properties[0] % 9;
Magic Number,SevenZip.Compression.LZMA,Decoder,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\7zip\Compress\LZMA\LzmaDecoder.cs,SetDecoderProperties,The following statement contains a magic number: int remainder = properties[0] / 9;
Magic Number,SevenZip.Compression.LZMA,Decoder,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\7zip\Compress\LZMA\LzmaDecoder.cs,SetDecoderProperties,The following statement contains a magic number: int lp = remainder % 5;
Magic Number,SevenZip.Compression.LZMA,Decoder,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\7zip\Compress\LZMA\LzmaDecoder.cs,SetDecoderProperties,The following statement contains a magic number: int pb = remainder / 5;
Magic Number,SevenZip.Compression.LZMA,Decoder,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\7zip\Compress\LZMA\LzmaDecoder.cs,SetDecoderProperties,The following statement contains a magic number: dictionarySize += ((UInt32)(properties[1 + i])) << (i * 8);
Magic Number,SevenZip.Compression.LZMA,Decoder,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\7zip\Compress\LZMA\LzmaDecoder.cs,SetDecoderProperties,The following statement contains a magic number: i < 4
Magic Number,SevenZip.Compression.LZMA,LiteralDecoder,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\7zip\Compress\LZMA\LzmaDecoder.cs,GetState,The following statement contains a magic number: return ((pos & m_PosMask) << m_NumPrevBits) + (uint)(prevByte >> (8 - m_NumPrevBits));
Magic Number,SevenZip.Compression.LZMA,Decoder2,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\7zip\Compress\LZMA\LzmaDecoder.cs,DecodeWithMatchByte,The following statement contains a magic number: uint matchBit = (uint)(matchByte >> 7) & 1;
Magic Number,SevenZip.Compression.LZMA,Decoder2,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\7zip\Compress\LZMA\LzmaDecoder.cs,DecodeWithMatchByte,The following statement contains a magic number: uint bit = m_Decoders[((1 + matchBit) << 8) + symbol].Decode(rangeDecoder);
Magic Number,SevenZip.Compression.RangeCoder,Decoder,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\7zip\Compress\RangeCoder\RangeCoder.cs,Init,The following statement contains a magic number: Code = (Code << 8) | (byte)Stream.ReadByte();
Magic Number,SevenZip.Compression.RangeCoder,Decoder,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\7zip\Compress\RangeCoder\RangeCoder.cs,Init,The following statement contains a magic number: i < 5
Magic Number,SevenZip.Compression.RangeCoder,Decoder,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\7zip\Compress\RangeCoder\RangeCoder.cs,Normalize,The following statement contains a magic number: Code = (Code << 8) | (byte)Stream.ReadByte();
Magic Number,SevenZip.Compression.RangeCoder,Decoder,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\7zip\Compress\RangeCoder\RangeCoder.cs,Normalize,The following statement contains a magic number: Range <<= 8;
Magic Number,SevenZip.Compression.RangeCoder,Decoder,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\7zip\Compress\RangeCoder\RangeCoder.cs,Normalize2,The following statement contains a magic number: Code = (Code << 8) | (byte)Stream.ReadByte();
Magic Number,SevenZip.Compression.RangeCoder,Decoder,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\7zip\Compress\RangeCoder\RangeCoder.cs,Normalize2,The following statement contains a magic number: Range <<= 8;
Magic Number,SevenZip.Compression.RangeCoder,Decoder,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\7zip\Compress\RangeCoder\RangeCoder.cs,DecodeDirectBits,The following statement contains a magic number: uint t = (code - range) >> 31;
Magic Number,SevenZip.Compression.RangeCoder,Decoder,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\7zip\Compress\RangeCoder\RangeCoder.cs,DecodeDirectBits,The following statement contains a magic number: code = (code << 8) | (byte)Stream.ReadByte();
Magic Number,SevenZip.Compression.RangeCoder,Decoder,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\7zip\Compress\RangeCoder\RangeCoder.cs,DecodeDirectBits,The following statement contains a magic number: range <<= 8;
Magic Number,SevenZip.Compression.RangeCoder,BitDecoder,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\7zip\Compress\RangeCoder\RangeCoderBit.cs,Decode,The following statement contains a magic number: rangeDecoder.Code = (rangeDecoder.Code << 8) | (byte)rangeDecoder.Stream.ReadByte();
Magic Number,SevenZip.Compression.RangeCoder,BitDecoder,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\7zip\Compress\RangeCoder\RangeCoderBit.cs,Decode,The following statement contains a magic number: rangeDecoder.Range <<= 8;
Magic Number,de4dot.code.AssemblyClient,AssemblyClient,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\AssemblyClient\AssemblyClient.cs,WaitConnected,The following statement contains a magic number: Thread.Sleep(20);
Magic Number,de4dot.code.AssemblyClient,NewProcessAssemblyClientFactory,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\AssemblyClient\AssemblyClientFactory.cs,GetServerClrVersion,The following statement contains a magic number: switch (module.GetPointerSize()) {  			default:  			case 4:  				if (module.IsClr40)  					return ServerClrVersion.CLR_v40_x86;  				return ServerClrVersion.CLR_v20_x86;    			case 8:  				if (module.IsClr40)  					return ServerClrVersion.CLR_v40_x64;  				return ServerClrVersion.CLR_v20_x64;  			}
Magic Number,de4dot.code.AssemblyClient,NewProcessAssemblyClientFactory,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\AssemblyClient\AssemblyClientFactory.cs,GetServerClrVersion,The following statement contains a magic number: switch (module.GetPointerSize()) {  			default:  			case 4:  				if (module.IsClr40)  					return ServerClrVersion.CLR_v40_x86;  				return ServerClrVersion.CLR_v20_x86;    			case 8:  				if (module.IsClr40)  					return ServerClrVersion.CLR_v40_x64;  				return ServerClrVersion.CLR_v20_x64;  			}
Magic Number,de4dot.code,VariableValues,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\MethodReturnValueInliner.cs,GetValue,The following statement contains a magic number: switch (instr.OpCode.Code) {  				case Code.Ldc_I4:  				case Code.Ldc_I8:  				case Code.Ldc_R4:  				case Code.Ldc_R8:  				case Code.Ldstr:  					obj = instr.Operand;  					return true;  				case Code.Ldc_I4_S:  					obj = (int)(sbyte)instr.Operand;  					return true;    				case Code.Ldc_I4_0: obj = 0; return true;  				case Code.Ldc_I4_1: obj = 1; return true;  				case Code.Ldc_I4_2: obj = 2; return true;  				case Code.Ldc_I4_3: obj = 3; return true;  				case Code.Ldc_I4_4: obj = 4; return true;  				case Code.Ldc_I4_5: obj = 5; return true;  				case Code.Ldc_I4_6: obj = 6; return true;  				case Code.Ldc_I4_7: obj = 7; return true;  				case Code.Ldc_I4_8: obj = 8; return true;  				case Code.Ldc_I4_M1:obj = -1; return true;  				case Code.Ldnull:	obj = null; return true;    				default:  					obj = null;  					return false;  				}
Magic Number,de4dot.code,VariableValues,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\MethodReturnValueInliner.cs,GetValue,The following statement contains a magic number: switch (instr.OpCode.Code) {  				case Code.Ldc_I4:  				case Code.Ldc_I8:  				case Code.Ldc_R4:  				case Code.Ldc_R8:  				case Code.Ldstr:  					obj = instr.Operand;  					return true;  				case Code.Ldc_I4_S:  					obj = (int)(sbyte)instr.Operand;  					return true;    				case Code.Ldc_I4_0: obj = 0; return true;  				case Code.Ldc_I4_1: obj = 1; return true;  				case Code.Ldc_I4_2: obj = 2; return true;  				case Code.Ldc_I4_3: obj = 3; return true;  				case Code.Ldc_I4_4: obj = 4; return true;  				case Code.Ldc_I4_5: obj = 5; return true;  				case Code.Ldc_I4_6: obj = 6; return true;  				case Code.Ldc_I4_7: obj = 7; return true;  				case Code.Ldc_I4_8: obj = 8; return true;  				case Code.Ldc_I4_M1:obj = -1; return true;  				case Code.Ldnull:	obj = null; return true;    				default:  					obj = null;  					return false;  				}
Magic Number,de4dot.code,VariableValues,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\MethodReturnValueInliner.cs,GetValue,The following statement contains a magic number: switch (instr.OpCode.Code) {  				case Code.Ldc_I4:  				case Code.Ldc_I8:  				case Code.Ldc_R4:  				case Code.Ldc_R8:  				case Code.Ldstr:  					obj = instr.Operand;  					return true;  				case Code.Ldc_I4_S:  					obj = (int)(sbyte)instr.Operand;  					return true;    				case Code.Ldc_I4_0: obj = 0; return true;  				case Code.Ldc_I4_1: obj = 1; return true;  				case Code.Ldc_I4_2: obj = 2; return true;  				case Code.Ldc_I4_3: obj = 3; return true;  				case Code.Ldc_I4_4: obj = 4; return true;  				case Code.Ldc_I4_5: obj = 5; return true;  				case Code.Ldc_I4_6: obj = 6; return true;  				case Code.Ldc_I4_7: obj = 7; return true;  				case Code.Ldc_I4_8: obj = 8; return true;  				case Code.Ldc_I4_M1:obj = -1; return true;  				case Code.Ldnull:	obj = null; return true;    				default:  					obj = null;  					return false;  				}
Magic Number,de4dot.code,VariableValues,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\MethodReturnValueInliner.cs,GetValue,The following statement contains a magic number: switch (instr.OpCode.Code) {  				case Code.Ldc_I4:  				case Code.Ldc_I8:  				case Code.Ldc_R4:  				case Code.Ldc_R8:  				case Code.Ldstr:  					obj = instr.Operand;  					return true;  				case Code.Ldc_I4_S:  					obj = (int)(sbyte)instr.Operand;  					return true;    				case Code.Ldc_I4_0: obj = 0; return true;  				case Code.Ldc_I4_1: obj = 1; return true;  				case Code.Ldc_I4_2: obj = 2; return true;  				case Code.Ldc_I4_3: obj = 3; return true;  				case Code.Ldc_I4_4: obj = 4; return true;  				case Code.Ldc_I4_5: obj = 5; return true;  				case Code.Ldc_I4_6: obj = 6; return true;  				case Code.Ldc_I4_7: obj = 7; return true;  				case Code.Ldc_I4_8: obj = 8; return true;  				case Code.Ldc_I4_M1:obj = -1; return true;  				case Code.Ldnull:	obj = null; return true;    				default:  					obj = null;  					return false;  				}
Magic Number,de4dot.code,VariableValues,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\MethodReturnValueInliner.cs,GetValue,The following statement contains a magic number: switch (instr.OpCode.Code) {  				case Code.Ldc_I4:  				case Code.Ldc_I8:  				case Code.Ldc_R4:  				case Code.Ldc_R8:  				case Code.Ldstr:  					obj = instr.Operand;  					return true;  				case Code.Ldc_I4_S:  					obj = (int)(sbyte)instr.Operand;  					return true;    				case Code.Ldc_I4_0: obj = 0; return true;  				case Code.Ldc_I4_1: obj = 1; return true;  				case Code.Ldc_I4_2: obj = 2; return true;  				case Code.Ldc_I4_3: obj = 3; return true;  				case Code.Ldc_I4_4: obj = 4; return true;  				case Code.Ldc_I4_5: obj = 5; return true;  				case Code.Ldc_I4_6: obj = 6; return true;  				case Code.Ldc_I4_7: obj = 7; return true;  				case Code.Ldc_I4_8: obj = 8; return true;  				case Code.Ldc_I4_M1:obj = -1; return true;  				case Code.Ldnull:	obj = null; return true;    				default:  					obj = null;  					return false;  				}
Magic Number,de4dot.code,VariableValues,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\MethodReturnValueInliner.cs,GetValue,The following statement contains a magic number: switch (instr.OpCode.Code) {  				case Code.Ldc_I4:  				case Code.Ldc_I8:  				case Code.Ldc_R4:  				case Code.Ldc_R8:  				case Code.Ldstr:  					obj = instr.Operand;  					return true;  				case Code.Ldc_I4_S:  					obj = (int)(sbyte)instr.Operand;  					return true;    				case Code.Ldc_I4_0: obj = 0; return true;  				case Code.Ldc_I4_1: obj = 1; return true;  				case Code.Ldc_I4_2: obj = 2; return true;  				case Code.Ldc_I4_3: obj = 3; return true;  				case Code.Ldc_I4_4: obj = 4; return true;  				case Code.Ldc_I4_5: obj = 5; return true;  				case Code.Ldc_I4_6: obj = 6; return true;  				case Code.Ldc_I4_7: obj = 7; return true;  				case Code.Ldc_I4_8: obj = 8; return true;  				case Code.Ldc_I4_M1:obj = -1; return true;  				case Code.Ldnull:	obj = null; return true;    				default:  					obj = null;  					return false;  				}
Magic Number,de4dot.code,VariableValues,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\MethodReturnValueInliner.cs,GetValue,The following statement contains a magic number: switch (instr.OpCode.Code) {  				case Code.Ldc_I4:  				case Code.Ldc_I8:  				case Code.Ldc_R4:  				case Code.Ldc_R8:  				case Code.Ldstr:  					obj = instr.Operand;  					return true;  				case Code.Ldc_I4_S:  					obj = (int)(sbyte)instr.Operand;  					return true;    				case Code.Ldc_I4_0: obj = 0; return true;  				case Code.Ldc_I4_1: obj = 1; return true;  				case Code.Ldc_I4_2: obj = 2; return true;  				case Code.Ldc_I4_3: obj = 3; return true;  				case Code.Ldc_I4_4: obj = 4; return true;  				case Code.Ldc_I4_5: obj = 5; return true;  				case Code.Ldc_I4_6: obj = 6; return true;  				case Code.Ldc_I4_7: obj = 7; return true;  				case Code.Ldc_I4_8: obj = 8; return true;  				case Code.Ldc_I4_M1:obj = -1; return true;  				case Code.Ldnull:	obj = null; return true;    				default:  					obj = null;  					return false;  				}
Magic Number,de4dot.code,MethodReturnValueInliner,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\MethodReturnValueInliner.cs,GetArg,The following statement contains a magic number: switch (instr.OpCode.Code) {  				case Code.Ldc_I4:  				case Code.Ldc_I8:  				case Code.Ldc_R4:  				case Code.Ldc_R8:  				case Code.Ldstr:  					arg = instr.Operand;  					break;  				case Code.Ldc_I4_S:  					arg = (int)(sbyte)instr.Operand;  					break;    				case Code.Ldc_I4_0: arg = 0; break;  				case Code.Ldc_I4_1: arg = 1; break;  				case Code.Ldc_I4_2: arg = 2; break;  				case Code.Ldc_I4_3: arg = 3; break;  				case Code.Ldc_I4_4: arg = 4; break;  				case Code.Ldc_I4_5: arg = 5; break;  				case Code.Ldc_I4_6: arg = 6; break;  				case Code.Ldc_I4_7: arg = 7; break;  				case Code.Ldc_I4_8: arg = 8; break;  				case Code.Ldc_I4_M1:arg = -1; break;  				case Code.Ldnull:	arg = null; break;    				case Code.Nop:  					continue;    				case Code.Ldloc:  				case Code.Ldloc_S:  				case Code.Ldloc_0:  				case Code.Ldloc_1:  				case Code.Ldloc_2:  				case Code.Ldloc_3:  					GetLocalVariableValue(instr.Instruction.GetLocal(theMethod.Body.Variables)' out arg);  					break;    				case Code.Ldfld:  				case Code.Ldsfld:  					arg = instr.Operand;  					break;    				default:  					int pushes' pops;  					instr.Instruction.CalculateStackUsage(false' out pushes' out pops);  					if (!useUnknownArgs || pushes != 1) {  						Logger.w("Could not find all arguments to method {0} ({1:X8})' instr: {2}"'  									Utils.RemoveNewlines(method)'  									method.MDToken.ToInt32()'  									instr);  						errors++;  						return false;  					}    					for (int i = 0; i < pops; i++) {  						if (!GetArg(method' block' ref arg' ref instrIndex))  							return false;  					}  					arg = null;  					break;  				}
Magic Number,de4dot.code,MethodReturnValueInliner,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\MethodReturnValueInliner.cs,GetArg,The following statement contains a magic number: switch (instr.OpCode.Code) {  				case Code.Ldc_I4:  				case Code.Ldc_I8:  				case Code.Ldc_R4:  				case Code.Ldc_R8:  				case Code.Ldstr:  					arg = instr.Operand;  					break;  				case Code.Ldc_I4_S:  					arg = (int)(sbyte)instr.Operand;  					break;    				case Code.Ldc_I4_0: arg = 0; break;  				case Code.Ldc_I4_1: arg = 1; break;  				case Code.Ldc_I4_2: arg = 2; break;  				case Code.Ldc_I4_3: arg = 3; break;  				case Code.Ldc_I4_4: arg = 4; break;  				case Code.Ldc_I4_5: arg = 5; break;  				case Code.Ldc_I4_6: arg = 6; break;  				case Code.Ldc_I4_7: arg = 7; break;  				case Code.Ldc_I4_8: arg = 8; break;  				case Code.Ldc_I4_M1:arg = -1; break;  				case Code.Ldnull:	arg = null; break;    				case Code.Nop:  					continue;    				case Code.Ldloc:  				case Code.Ldloc_S:  				case Code.Ldloc_0:  				case Code.Ldloc_1:  				case Code.Ldloc_2:  				case Code.Ldloc_3:  					GetLocalVariableValue(instr.Instruction.GetLocal(theMethod.Body.Variables)' out arg);  					break;    				case Code.Ldfld:  				case Code.Ldsfld:  					arg = instr.Operand;  					break;    				default:  					int pushes' pops;  					instr.Instruction.CalculateStackUsage(false' out pushes' out pops);  					if (!useUnknownArgs || pushes != 1) {  						Logger.w("Could not find all arguments to method {0} ({1:X8})' instr: {2}"'  									Utils.RemoveNewlines(method)'  									method.MDToken.ToInt32()'  									instr);  						errors++;  						return false;  					}    					for (int i = 0; i < pops; i++) {  						if (!GetArg(method' block' ref arg' ref instrIndex))  							return false;  					}  					arg = null;  					break;  				}
Magic Number,de4dot.code,MethodReturnValueInliner,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\MethodReturnValueInliner.cs,GetArg,The following statement contains a magic number: switch (instr.OpCode.Code) {  				case Code.Ldc_I4:  				case Code.Ldc_I8:  				case Code.Ldc_R4:  				case Code.Ldc_R8:  				case Code.Ldstr:  					arg = instr.Operand;  					break;  				case Code.Ldc_I4_S:  					arg = (int)(sbyte)instr.Operand;  					break;    				case Code.Ldc_I4_0: arg = 0; break;  				case Code.Ldc_I4_1: arg = 1; break;  				case Code.Ldc_I4_2: arg = 2; break;  				case Code.Ldc_I4_3: arg = 3; break;  				case Code.Ldc_I4_4: arg = 4; break;  				case Code.Ldc_I4_5: arg = 5; break;  				case Code.Ldc_I4_6: arg = 6; break;  				case Code.Ldc_I4_7: arg = 7; break;  				case Code.Ldc_I4_8: arg = 8; break;  				case Code.Ldc_I4_M1:arg = -1; break;  				case Code.Ldnull:	arg = null; break;    				case Code.Nop:  					continue;    				case Code.Ldloc:  				case Code.Ldloc_S:  				case Code.Ldloc_0:  				case Code.Ldloc_1:  				case Code.Ldloc_2:  				case Code.Ldloc_3:  					GetLocalVariableValue(instr.Instruction.GetLocal(theMethod.Body.Variables)' out arg);  					break;    				case Code.Ldfld:  				case Code.Ldsfld:  					arg = instr.Operand;  					break;    				default:  					int pushes' pops;  					instr.Instruction.CalculateStackUsage(false' out pushes' out pops);  					if (!useUnknownArgs || pushes != 1) {  						Logger.w("Could not find all arguments to method {0} ({1:X8})' instr: {2}"'  									Utils.RemoveNewlines(method)'  									method.MDToken.ToInt32()'  									instr);  						errors++;  						return false;  					}    					for (int i = 0; i < pops; i++) {  						if (!GetArg(method' block' ref arg' ref instrIndex))  							return false;  					}  					arg = null;  					break;  				}
Magic Number,de4dot.code,MethodReturnValueInliner,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\MethodReturnValueInliner.cs,GetArg,The following statement contains a magic number: switch (instr.OpCode.Code) {  				case Code.Ldc_I4:  				case Code.Ldc_I8:  				case Code.Ldc_R4:  				case Code.Ldc_R8:  				case Code.Ldstr:  					arg = instr.Operand;  					break;  				case Code.Ldc_I4_S:  					arg = (int)(sbyte)instr.Operand;  					break;    				case Code.Ldc_I4_0: arg = 0; break;  				case Code.Ldc_I4_1: arg = 1; break;  				case Code.Ldc_I4_2: arg = 2; break;  				case Code.Ldc_I4_3: arg = 3; break;  				case Code.Ldc_I4_4: arg = 4; break;  				case Code.Ldc_I4_5: arg = 5; break;  				case Code.Ldc_I4_6: arg = 6; break;  				case Code.Ldc_I4_7: arg = 7; break;  				case Code.Ldc_I4_8: arg = 8; break;  				case Code.Ldc_I4_M1:arg = -1; break;  				case Code.Ldnull:	arg = null; break;    				case Code.Nop:  					continue;    				case Code.Ldloc:  				case Code.Ldloc_S:  				case Code.Ldloc_0:  				case Code.Ldloc_1:  				case Code.Ldloc_2:  				case Code.Ldloc_3:  					GetLocalVariableValue(instr.Instruction.GetLocal(theMethod.Body.Variables)' out arg);  					break;    				case Code.Ldfld:  				case Code.Ldsfld:  					arg = instr.Operand;  					break;    				default:  					int pushes' pops;  					instr.Instruction.CalculateStackUsage(false' out pushes' out pops);  					if (!useUnknownArgs || pushes != 1) {  						Logger.w("Could not find all arguments to method {0} ({1:X8})' instr: {2}"'  									Utils.RemoveNewlines(method)'  									method.MDToken.ToInt32()'  									instr);  						errors++;  						return false;  					}    					for (int i = 0; i < pops; i++) {  						if (!GetArg(method' block' ref arg' ref instrIndex))  							return false;  					}  					arg = null;  					break;  				}
Magic Number,de4dot.code,MethodReturnValueInliner,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\MethodReturnValueInliner.cs,GetArg,The following statement contains a magic number: switch (instr.OpCode.Code) {  				case Code.Ldc_I4:  				case Code.Ldc_I8:  				case Code.Ldc_R4:  				case Code.Ldc_R8:  				case Code.Ldstr:  					arg = instr.Operand;  					break;  				case Code.Ldc_I4_S:  					arg = (int)(sbyte)instr.Operand;  					break;    				case Code.Ldc_I4_0: arg = 0; break;  				case Code.Ldc_I4_1: arg = 1; break;  				case Code.Ldc_I4_2: arg = 2; break;  				case Code.Ldc_I4_3: arg = 3; break;  				case Code.Ldc_I4_4: arg = 4; break;  				case Code.Ldc_I4_5: arg = 5; break;  				case Code.Ldc_I4_6: arg = 6; break;  				case Code.Ldc_I4_7: arg = 7; break;  				case Code.Ldc_I4_8: arg = 8; break;  				case Code.Ldc_I4_M1:arg = -1; break;  				case Code.Ldnull:	arg = null; break;    				case Code.Nop:  					continue;    				case Code.Ldloc:  				case Code.Ldloc_S:  				case Code.Ldloc_0:  				case Code.Ldloc_1:  				case Code.Ldloc_2:  				case Code.Ldloc_3:  					GetLocalVariableValue(instr.Instruction.GetLocal(theMethod.Body.Variables)' out arg);  					break;    				case Code.Ldfld:  				case Code.Ldsfld:  					arg = instr.Operand;  					break;    				default:  					int pushes' pops;  					instr.Instruction.CalculateStackUsage(false' out pushes' out pops);  					if (!useUnknownArgs || pushes != 1) {  						Logger.w("Could not find all arguments to method {0} ({1:X8})' instr: {2}"'  									Utils.RemoveNewlines(method)'  									method.MDToken.ToInt32()'  									instr);  						errors++;  						return false;  					}    					for (int i = 0; i < pops; i++) {  						if (!GetArg(method' block' ref arg' ref instrIndex))  							return false;  					}  					arg = null;  					break;  				}
Magic Number,de4dot.code,MethodReturnValueInliner,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\MethodReturnValueInliner.cs,GetArg,The following statement contains a magic number: switch (instr.OpCode.Code) {  				case Code.Ldc_I4:  				case Code.Ldc_I8:  				case Code.Ldc_R4:  				case Code.Ldc_R8:  				case Code.Ldstr:  					arg = instr.Operand;  					break;  				case Code.Ldc_I4_S:  					arg = (int)(sbyte)instr.Operand;  					break;    				case Code.Ldc_I4_0: arg = 0; break;  				case Code.Ldc_I4_1: arg = 1; break;  				case Code.Ldc_I4_2: arg = 2; break;  				case Code.Ldc_I4_3: arg = 3; break;  				case Code.Ldc_I4_4: arg = 4; break;  				case Code.Ldc_I4_5: arg = 5; break;  				case Code.Ldc_I4_6: arg = 6; break;  				case Code.Ldc_I4_7: arg = 7; break;  				case Code.Ldc_I4_8: arg = 8; break;  				case Code.Ldc_I4_M1:arg = -1; break;  				case Code.Ldnull:	arg = null; break;    				case Code.Nop:  					continue;    				case Code.Ldloc:  				case Code.Ldloc_S:  				case Code.Ldloc_0:  				case Code.Ldloc_1:  				case Code.Ldloc_2:  				case Code.Ldloc_3:  					GetLocalVariableValue(instr.Instruction.GetLocal(theMethod.Body.Variables)' out arg);  					break;    				case Code.Ldfld:  				case Code.Ldsfld:  					arg = instr.Operand;  					break;    				default:  					int pushes' pops;  					instr.Instruction.CalculateStackUsage(false' out pushes' out pops);  					if (!useUnknownArgs || pushes != 1) {  						Logger.w("Could not find all arguments to method {0} ({1:X8})' instr: {2}"'  									Utils.RemoveNewlines(method)'  									method.MDToken.ToInt32()'  									instr);  						errors++;  						return false;  					}    					for (int i = 0; i < pops; i++) {  						if (!GetArg(method' block' ref arg' ref instrIndex))  							return false;  					}  					arg = null;  					break;  				}
Magic Number,de4dot.code,MethodReturnValueInliner,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\MethodReturnValueInliner.cs,GetArg,The following statement contains a magic number: switch (instr.OpCode.Code) {  				case Code.Ldc_I4:  				case Code.Ldc_I8:  				case Code.Ldc_R4:  				case Code.Ldc_R8:  				case Code.Ldstr:  					arg = instr.Operand;  					break;  				case Code.Ldc_I4_S:  					arg = (int)(sbyte)instr.Operand;  					break;    				case Code.Ldc_I4_0: arg = 0; break;  				case Code.Ldc_I4_1: arg = 1; break;  				case Code.Ldc_I4_2: arg = 2; break;  				case Code.Ldc_I4_3: arg = 3; break;  				case Code.Ldc_I4_4: arg = 4; break;  				case Code.Ldc_I4_5: arg = 5; break;  				case Code.Ldc_I4_6: arg = 6; break;  				case Code.Ldc_I4_7: arg = 7; break;  				case Code.Ldc_I4_8: arg = 8; break;  				case Code.Ldc_I4_M1:arg = -1; break;  				case Code.Ldnull:	arg = null; break;    				case Code.Nop:  					continue;    				case Code.Ldloc:  				case Code.Ldloc_S:  				case Code.Ldloc_0:  				case Code.Ldloc_1:  				case Code.Ldloc_2:  				case Code.Ldloc_3:  					GetLocalVariableValue(instr.Instruction.GetLocal(theMethod.Body.Variables)' out arg);  					break;    				case Code.Ldfld:  				case Code.Ldsfld:  					arg = instr.Operand;  					break;    				default:  					int pushes' pops;  					instr.Instruction.CalculateStackUsage(false' out pushes' out pops);  					if (!useUnknownArgs || pushes != 1) {  						Logger.w("Could not find all arguments to method {0} ({1:X8})' instr: {2}"'  									Utils.RemoveNewlines(method)'  									method.MDToken.ToInt32()'  									instr);  						errors++;  						return false;  					}    					for (int i = 0; i < pops; i++) {  						if (!GetArg(method' block' ref arg' ref instrIndex))  							return false;  					}  					arg = null;  					break;  				}
Magic Number,de4dot.code,ObfuscatedFile,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\ObfuscatedFile.cs,GetMethodTokens,The following statement contains a magic number: tokenStr = tokenStr.Substring(2);
Magic Number,de4dot.code,ObfuscatedFile,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\ObfuscatedFile.cs,SplitMethodDesc,The following statement contains a magic number: remaining = remaining.Substring(index + 2);
Magic Number,de4dot.code,Utils,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\Utils.cs,ToCsharpString,The following statement contains a magic number: var sb = new StringBuilder(s.Length + 2);
Magic Number,de4dot.code,Utils,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\Utils.cs,ShellEscape,The following statement contains a magic number: var sb = new StringBuilder(s.Length + 2);
Magic Number,de4dot.code,Utils,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\Utils.cs,RandomName,The following statement contains a magic number: sb.Append((char)((int)'A' + random.Next(26)));
Magic Number,de4dot.code,Utils,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\Utils.cs,RandomName,The following statement contains a magic number: numLower = random.Next(1' 5);
Magic Number,de4dot.code.deobfuscators.Agile_NET,CliSecureRtType,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\CliSecureRtType.cs,Find2,The following statement contains a magic number: DeobUtils.GetInitCctors(module' 3)
Magic Number,de4dot.code.deobfuscators.Agile_NET,CliSecureRtType,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\CliSecureRtType.cs,Find3,The following statement contains a magic number: type.Fields.Count < 1 || type.Fields.Count > 2
Magic Number,de4dot.code.deobfuscators.Agile_NET,CliSecureRtType,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\CliSecureRtType.cs,Find3,The following statement contains a magic number: type.Methods.Count != 2
Magic Number,de4dot.code.deobfuscators.Agile_NET,CsBlowfish,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\CsBlowfish.cs,Encrypt,The following statement contains a magic number: xl = (xl >> 24) ^ xr;
Magic Number,de4dot.code.deobfuscators.Agile_NET,CsBlowfish,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\CsBlowfish.cs,Encrypt,The following statement contains a magic number: i < 16
Magic Number,de4dot.code.deobfuscators.Agile_NET,CsBlowfish,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\CsBlowfish.cs,Encrypt,The following statement contains a magic number: rxr = xl ^ P[16];
Magic Number,de4dot.code.deobfuscators.Agile_NET,CsBlowfish,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\CsBlowfish.cs,Encrypt,The following statement contains a magic number: rxl = xr ^ P[17];
Magic Number,de4dot.code.deobfuscators.Agile_NET,CsBlowfish,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\CsBlowfish.cs,Decrypt,The following statement contains a magic number: xl = (xl >> 24) ^ xr;
Magic Number,de4dot.code.deobfuscators.Agile_NET,CsBlowfish,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\CsBlowfish.cs,Decrypt,The following statement contains a magic number: i >= 2
Magic Number,de4dot.code.deobfuscators.Agile_NET,Deobfuscator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\Deobfuscator.cs,UnpackNativeFile1,The following statement contains a magic number: const int dataDirNum = 6;
Magic Number,de4dot.code.deobfuscators.Agile_NET,Deobfuscator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\Deobfuscator.cs,UnpackNativeFile1,The following statement contains a magic number: const int dotNetDirNum = 14;
Magic Number,de4dot.code.deobfuscators.Agile_NET,Deobfuscator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\Deobfuscator.cs,UnpackNativeFile1,The following statement contains a magic number: int dataDir = (int)dataDirBaseOffset + dataDirNum * 8;
Magic Number,de4dot.code.deobfuscators.Agile_NET,Deobfuscator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\Deobfuscator.cs,UnpackNativeFile1,The following statement contains a magic number: int dotNetDir = (int)dataDirBaseOffset + dotNetDirNum * 8;
Magic Number,de4dot.code.deobfuscators.Agile_NET,Deobfuscator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\Deobfuscator.cs,UnpackNativeFile1,The following statement contains a magic number: WriteUInt32(fileData' dotNetDir + 4' BitConverter.ToUInt32(fileData' dataDir + 4));
Magic Number,de4dot.code.deobfuscators.Agile_NET,Deobfuscator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\Deobfuscator.cs,UnpackNativeFile1,The following statement contains a magic number: WriteUInt32(fileData' dotNetDir + 4' BitConverter.ToUInt32(fileData' dataDir + 4));
Magic Number,de4dot.code.deobfuscators.Agile_NET,Deobfuscator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\Deobfuscator.cs,UnpackNativeFile1,The following statement contains a magic number: WriteUInt32(fileData' dataDir + 4' 0);
Magic Number,de4dot.code.deobfuscators.Agile_NET,Deobfuscator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\Deobfuscator.cs,UnpackNativeFile2,The following statement contains a magic number: var data = peImage.FindWin32ResourceData("ASSEMBLY"' 101' 0);
Magic Number,de4dot.code.deobfuscators.Agile_NET,Deobfuscator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\Deobfuscator.cs,WriteUInt32,The following statement contains a magic number: data[offset + 1] = (byte)(value >> 8);
Magic Number,de4dot.code.deobfuscators.Agile_NET,Deobfuscator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\Deobfuscator.cs,WriteUInt32,The following statement contains a magic number: data[offset + 2] = (byte)(value >> 16);
Magic Number,de4dot.code.deobfuscators.Agile_NET,Deobfuscator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\Deobfuscator.cs,WriteUInt32,The following statement contains a magic number: data[offset + 2] = (byte)(value >> 16);
Magic Number,de4dot.code.deobfuscators.Agile_NET,Deobfuscator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\Deobfuscator.cs,WriteUInt32,The following statement contains a magic number: data[offset + 3] = (byte)(value >> 24);
Magic Number,de4dot.code.deobfuscators.Agile_NET,Deobfuscator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\Deobfuscator.cs,WriteUInt32,The following statement contains a magic number: data[offset + 3] = (byte)(value >> 24);
Magic Number,de4dot.code.deobfuscators.Agile_NET,Deobfuscator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\Deobfuscator.cs,DetectInternal,The following statement contains a magic number: val += 100 + 10 * (sum - 1);
Magic Number,de4dot.code.deobfuscators.Agile_NET,Deobfuscator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\Deobfuscator.cs,DetectInternal,The following statement contains a magic number: val += 100 + 10 * (sum - 1);
Magic Number,de4dot.code.deobfuscators.Agile_NET,Deobfuscator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\Deobfuscator.cs,DetectInternal,The following statement contains a magic number: val += 10;
Magic Number,de4dot.code.deobfuscators.Agile_NET,MethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\MethodsDecrypter.cs,GetModuleCctorBytes,The following statement contains a magic number: var moduleCctorBytes = new byte[6];
Magic Number,de4dot.code.deobfuscators.Agile_NET,MethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\MethodsDecrypter.cs,GetModuleCctorBytes,The following statement contains a magic number: moduleCctorBytes[2] = (byte)(initToken >> 8);
Magic Number,de4dot.code.deobfuscators.Agile_NET,MethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\MethodsDecrypter.cs,GetModuleCctorBytes,The following statement contains a magic number: moduleCctorBytes[2] = (byte)(initToken >> 8);
Magic Number,de4dot.code.deobfuscators.Agile_NET,MethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\MethodsDecrypter.cs,GetModuleCctorBytes,The following statement contains a magic number: moduleCctorBytes[3] = (byte)(initToken >> 16);
Magic Number,de4dot.code.deobfuscators.Agile_NET,MethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\MethodsDecrypter.cs,GetModuleCctorBytes,The following statement contains a magic number: moduleCctorBytes[3] = (byte)(initToken >> 16);
Magic Number,de4dot.code.deobfuscators.Agile_NET,MethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\MethodsDecrypter.cs,GetModuleCctorBytes,The following statement contains a magic number: moduleCctorBytes[4] = (byte)(initToken >> 24);
Magic Number,de4dot.code.deobfuscators.Agile_NET,MethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\MethodsDecrypter.cs,GetModuleCctorBytes,The following statement contains a magic number: moduleCctorBytes[4] = (byte)(initToken >> 24);
Magic Number,de4dot.code.deobfuscators.Agile_NET,MethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\MethodsDecrypter.cs,GetModuleCctorBytes,The following statement contains a magic number: moduleCctorBytes[5] = 0x2A;
Magic Number,de4dot.code.deobfuscators.Agile_NET,MethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\MethodsDecrypter.cs,ReadCodeHeader,The following statement contains a magic number: codeHeader.signature = peImage.OffsetReadBytes(offset' 16);
Magic Number,de4dot.code.deobfuscators.Agile_NET,MethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\MethodsDecrypter.cs,ReadCodeHeader,The following statement contains a magic number: codeHeader.decryptionKey = peImage.OffsetReadBytes(offset + 0x10' 16);
Magic Number,de4dot.code.deobfuscators.Agile_NET,MethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\MethodsDecrypter.cs,Detect,The following statement contains a magic number: IsValidSignature(peImage.OffsetReadBytes(codeHeaderOffset' 16))
Magic Number,de4dot.code.deobfuscators.Agile_NET,MethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\MethodsDecrypter.cs,Detect,The following statement contains a magic number: codeHeaderOffset != 0 && IsValidSignature(peImage.OffsetReadBytes(codeHeaderOffset' 16))
Magic Number,de4dot.code.deobfuscators.Agile_NET,Decrypter45,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\MethodsDecrypter.cs,Decrypt,The following statement contains a magic number: b ^= codeHeader.decryptionKey[(methodInfo.codeOffs - 0x28 + i) % 16];
Magic Number,de4dot.code.deobfuscators.Agile_NET,Decrypter5,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\MethodsDecrypter.cs,Decrypt,The following statement contains a magic number: b ^= codeHeader.decryptionKey[(methodInfo.codeOffs - codeHeaderSize + i) % 16];
Magic Number,de4dot.code.deobfuscators.Agile_NET,Decrypter5,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\MethodsDecrypter.cs,Decrypt,The following statement contains a magic number: b ^= codeHeader.decryptionKey[(methodInfo.codeOffs - codeHeaderSize + i + 7) % 16];
Magic Number,de4dot.code.deobfuscators.Agile_NET,Decrypter5,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\MethodsDecrypter.cs,Decrypt,The following statement contains a magic number: b ^= codeHeader.decryptionKey[(methodInfo.codeOffs - codeHeaderSize + i + 7) % 16];
Magic Number,de4dot.code.deobfuscators.Agile_NET,ProDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\MethodsDecrypter.cs,ProDecrypter,The following statement contains a magic number: key[i] = ReadUInt32_be(codeHeader.decryptionKey' i * 4);
Magic Number,de4dot.code.deobfuscators.Agile_NET,ProDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\MethodsDecrypter.cs,ProDecrypter,The following statement contains a magic number: i < 4
Magic Number,de4dot.code.deobfuscators.Agile_NET,ProDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\MethodsDecrypter.cs,Decrypt,The following statement contains a magic number: int numQwords = (int)(methodInfo.codeSize / 8);
Magic Number,de4dot.code.deobfuscators.Agile_NET,ProDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\MethodsDecrypter.cs,Decrypt,The following statement contains a magic number: int offset = i * 8;
Magic Number,de4dot.code.deobfuscators.Agile_NET,ProDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\MethodsDecrypter.cs,Decrypt,The following statement contains a magic number: uint q1 = ReadUInt32_be(data' offset + 4);
Magic Number,de4dot.code.deobfuscators.Agile_NET,ProDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\MethodsDecrypter.cs,Decrypt,The following statement contains a magic number: q1 -= ((q0 << 4) + key[2]) ^ (val + q0) ^ ((q0 >> 5) + key[3]);
Magic Number,de4dot.code.deobfuscators.Agile_NET,ProDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\MethodsDecrypter.cs,Decrypt,The following statement contains a magic number: q1 -= ((q0 << 4) + key[2]) ^ (val + q0) ^ ((q0 >> 5) + key[3]);
Magic Number,de4dot.code.deobfuscators.Agile_NET,ProDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\MethodsDecrypter.cs,Decrypt,The following statement contains a magic number: q1 -= ((q0 << 4) + key[2]) ^ (val + q0) ^ ((q0 >> 5) + key[3]);
Magic Number,de4dot.code.deobfuscators.Agile_NET,ProDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\MethodsDecrypter.cs,Decrypt,The following statement contains a magic number: q1 -= ((q0 << 4) + key[2]) ^ (val + q0) ^ ((q0 >> 5) + key[3]);
Magic Number,de4dot.code.deobfuscators.Agile_NET,ProDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\MethodsDecrypter.cs,Decrypt,The following statement contains a magic number: q0 -= ((q1 << 4) + key[0]) ^ (val + q1) ^ ((q1 >> 5) + key[1]);
Magic Number,de4dot.code.deobfuscators.Agile_NET,ProDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\MethodsDecrypter.cs,Decrypt,The following statement contains a magic number: q0 -= ((q1 << 4) + key[0]) ^ (val + q1) ^ ((q1 >> 5) + key[1]);
Magic Number,de4dot.code.deobfuscators.Agile_NET,ProDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\MethodsDecrypter.cs,Decrypt,The following statement contains a magic number: j < 32
Magic Number,de4dot.code.deobfuscators.Agile_NET,ProDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\MethodsDecrypter.cs,Decrypt,The following statement contains a magic number: WriteUInt32_be(data' offset + 4' q1);
Magic Number,de4dot.code.deobfuscators.Agile_NET,ProDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\MethodsDecrypter.cs,WriteUInt32_be,The following statement contains a magic number: data[offset] = (byte)(value >> 24);
Magic Number,de4dot.code.deobfuscators.Agile_NET,ProDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\MethodsDecrypter.cs,WriteUInt32_be,The following statement contains a magic number: data[offset + 1] = (byte)(value >> 16);
Magic Number,de4dot.code.deobfuscators.Agile_NET,ProDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\MethodsDecrypter.cs,WriteUInt32_be,The following statement contains a magic number: data[offset + 2] = (byte)(value >> 8);
Magic Number,de4dot.code.deobfuscators.Agile_NET,ProDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\MethodsDecrypter.cs,WriteUInt32_be,The following statement contains a magic number: data[offset + 2] = (byte)(value >> 8);
Magic Number,de4dot.code.deobfuscators.Agile_NET,ProDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\MethodsDecrypter.cs,WriteUInt32_be,The following statement contains a magic number: data[offset + 3] = (byte)value;
Magic Number,de4dot.code.deobfuscators.Agile_NET,CsHeaderBase,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\MethodsDecrypter.cs,GetMethodInfos2,The following statement contains a magic number: uint codeSize = methodsDecrypter.peImage.OffsetReadUInt32(offset + 4);
Magic Number,de4dot.code.deobfuscators.Agile_NET,CsHeaderBase,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\MethodsDecrypter.cs,GetMethodInfos4,The following statement contains a magic number: uint codeSize = methodsDecrypter.peImage.OffsetReadUInt32(offset + 4);
Magic Number,de4dot.code.deobfuscators.Agile_NET,CsHeaderBase,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\MethodsDecrypter.cs,GetMethodInfos4,The following statement contains a magic number: uint flags = methodsDecrypter.peImage.OffsetReadUInt32(offset + 8);
Magic Number,de4dot.code.deobfuscators.Agile_NET,CsHeaderBase,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\MethodsDecrypter.cs,GetMethodInfos4,The following statement contains a magic number: uint localVarSigTok = methodsDecrypter.peImage.OffsetReadUInt32(offset + 12);
Magic Number,de4dot.code.deobfuscators.Agile_NET,CsHeader5,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\MethodsDecrypter.cs,PatchMethodTable,The following statement contains a magic number: methodsDecrypter.peImage.WriteUInt32(rva + 8' methodInfo.localVarSigTok);
Magic Number,de4dot.code.deobfuscators.Agile_NET,ProxyCallFixer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\ProxyCallFixer.cs,CheckCctor,The following statement contains a magic number: instrs.Count != 3
Magic Number,de4dot.code.deobfuscators.Agile_NET,ProxyCallFixer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\ProxyCallFixer.cs,CheckCctor,The following statement contains a magic number: instrs[2].OpCode != OpCodes.Ret
Magic Number,de4dot.code.deobfuscators.Agile_NET,StackFrameHelper,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\StackFrameHelper.cs,Find,The following statement contains a magic number: type.Methods.Count > 3
Magic Number,de4dot.code.deobfuscators.Agile_NET,StackFrameHelper,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\StackFrameHelper.cs,Find,The following statement contains a magic number: sig != null && method.IsStatic && method.HasBody &&  						sig.Params.Count == 2 && !method.HasGenericParameters &&  						!DotNetUtils.HasReturnValue(method) &&  						sig.Params[0].GetFullName() == "System.Exception" &&  						sig.Params[1].GetFullName() == "System.Object[]"
Magic Number,de4dot.code.deobfuscators.Agile_NET,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\StringDecrypter.cs,Deobfuscate,The following statement contains a magic number: block.Remove(i' 2);
Magic Number,de4dot.code.deobfuscators.Agile_NET.vm,CilOperandInstructionRestorer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\CilOperandInstructionRestorer.cs,Restore,The following statement contains a magic number: switch (instr.OpCode.Code) {  				case Code.Ldelem:  					arrayType = MethodStack.GetLoadedType(method' instrs' i' 1) as SZArraySig;  					if (arrayType == null)  						break;  					operandTypeTmp = arrayType.Next;  					if (operandTypeTmp == null)  						newOpCode = OpCodes.Ldelem_Ref;  					else {  						switch (operandTypeTmp.ElementType) {  						case ElementType.Boolean: newOpCode = OpCodes.Ldelem_I1; break;  						case ElementType.Char: newOpCode = OpCodes.Ldelem_U2; break;  						case ElementType.I:  newOpCode = OpCodes.Ldelem_I; break;  						case ElementType.I1: newOpCode = OpCodes.Ldelem_I1; break;  						case ElementType.I2: newOpCode = OpCodes.Ldelem_I2; break;  						case ElementType.I4: newOpCode = OpCodes.Ldelem_I4; break;  						case ElementType.I8: newOpCode = OpCodes.Ldelem_I8; break;  						case ElementType.U:  newOpCode = OpCodes.Ldelem_I; break;  						case ElementType.U1: newOpCode = OpCodes.Ldelem_U1; break;  						case ElementType.U2: newOpCode = OpCodes.Ldelem_U2; break;  						case ElementType.U4: newOpCode = OpCodes.Ldelem_U4; break;  						case ElementType.U8: newOpCode = OpCodes.Ldelem_I8; break;  						case ElementType.R4: newOpCode = OpCodes.Ldelem_R4; break;  						case ElementType.R8: newOpCode = OpCodes.Ldelem_R8; break;  						default:             newOpCode = OpCodes.Ldelem_Ref; break;  						//TODO: Ldelem  						}  					}  					break;    				case Code.Stelem:  					arrayType = MethodStack.GetLoadedType(method' instrs' i' 2) as SZArraySig;  					if (arrayType == null)  						break;  					operandTypeTmp = arrayType.Next;  					if (operandTypeTmp == null)  						newOpCode = OpCodes.Stelem_Ref;  					else {  						switch (operandTypeTmp.ElementType) {  						case ElementType.U:  						case ElementType.I:  newOpCode = OpCodes.Stelem_I; break;  						case ElementType.Boolean:  						case ElementType.U1:  						case ElementType.I1: newOpCode = OpCodes.Stelem_I1; break;  						case ElementType.Char:  						case ElementType.U2:  						case ElementType.I2: newOpCode = OpCodes.Stelem_I2; break;  						case ElementType.U4:  						case ElementType.I4: newOpCode = OpCodes.Stelem_I4; break;  						case ElementType.U8:  						case ElementType.I8: newOpCode = OpCodes.Stelem_I8; break;  						case ElementType.R4: newOpCode = OpCodes.Stelem_R4; break;  						case ElementType.R8: newOpCode = OpCodes.Stelem_R8; break;  						default: newOpCode = OpCodes.Stelem_Ref; break;  						//TODO: Stelem  						}  					}  					break;    				case Code.Ldelema:  					arrayType = MethodStack.GetLoadedType(method' instrs' i' 1) as SZArraySig;  					if (arrayType == null)  						break;  					operandType = arrayType.Next;  					break;    				case Code.Ldobj:  					operandType = GetPtrElementType(MethodStack.GetLoadedType(method' instrs' i' 0));  					break;    				case Code.Stobj:  					operandType = MethodStack.GetLoadedType(method' instrs' i' 0);  					if (!IsValidType(operandType))  						operandType = GetPtrElementType(MethodStack.GetLoadedType(method' instrs' i' 1));  					break;    				default:  					continue;  				}
Magic Number,de4dot.code.deobfuscators.Agile_NET.vm,CsvmDataReader,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\CsvmDataReader.cs,Read,The following statement contains a magic number: csvmMethod.Guid = new Guid(reader.ReadBytes(16));
Magic Number,de4dot.code.deobfuscators.Agile_NET.vm,CsvmToCilMethodConverterBase,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\CsvmToCilMethodConverterBase.cs,UpdateLocalInstruction,The following statement contains a magic number: switch (instr.OpCode.Code) {  			case Code.Ldloc_S:  			case Code.Ldloc:  				if (index == 0)  					opcode = OpCodes.Ldloc_0;  				else if (index == 1)  					opcode = OpCodes.Ldloc_1;  				else if (index == 2)  					opcode = OpCodes.Ldloc_2;  				else if (index == 3)  					opcode = OpCodes.Ldloc_3;  				else if (byte.MinValue <= index && index <= byte.MaxValue) {  					opcode = OpCodes.Ldloc_S;  					operand = local;  				}  				else {  					opcode = OpCodes.Ldloc;  					operand = local;  				}  				break;    			case Code.Stloc:  			case Code.Stloc_S:  				if (index == 0)  					opcode = OpCodes.Stloc_0;  				else if (index == 1)  					opcode = OpCodes.Stloc_1;  				else if (index == 2)  					opcode = OpCodes.Stloc_2;  				else if (index == 3)  					opcode = OpCodes.Stloc_3;  				else if (byte.MinValue <= index && index <= byte.MaxValue) {  					opcode = OpCodes.Stloc_S;  					operand = local;  				}  				else {  					opcode = OpCodes.Stloc;  					operand = local;  				}  				break;    			case Code.Ldloca:  			case Code.Ldloca_S:  				if (byte.MinValue <= index && index <= byte.MaxValue) {  					opcode = OpCodes.Ldloca_S;  					operand = local;  				}  				else {  					opcode = OpCodes.Ldloca;  					operand = local;  				}  				break;    			default:  				throw new ApplicationException("Invalid opcode");  			}
Magic Number,de4dot.code.deobfuscators.Agile_NET.vm,CsvmToCilMethodConverterBase,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\CsvmToCilMethodConverterBase.cs,UpdateLocalInstruction,The following statement contains a magic number: switch (instr.OpCode.Code) {  			case Code.Ldloc_S:  			case Code.Ldloc:  				if (index == 0)  					opcode = OpCodes.Ldloc_0;  				else if (index == 1)  					opcode = OpCodes.Ldloc_1;  				else if (index == 2)  					opcode = OpCodes.Ldloc_2;  				else if (index == 3)  					opcode = OpCodes.Ldloc_3;  				else if (byte.MinValue <= index && index <= byte.MaxValue) {  					opcode = OpCodes.Ldloc_S;  					operand = local;  				}  				else {  					opcode = OpCodes.Ldloc;  					operand = local;  				}  				break;    			case Code.Stloc:  			case Code.Stloc_S:  				if (index == 0)  					opcode = OpCodes.Stloc_0;  				else if (index == 1)  					opcode = OpCodes.Stloc_1;  				else if (index == 2)  					opcode = OpCodes.Stloc_2;  				else if (index == 3)  					opcode = OpCodes.Stloc_3;  				else if (byte.MinValue <= index && index <= byte.MaxValue) {  					opcode = OpCodes.Stloc_S;  					operand = local;  				}  				else {  					opcode = OpCodes.Stloc;  					operand = local;  				}  				break;    			case Code.Ldloca:  			case Code.Ldloca_S:  				if (byte.MinValue <= index && index <= byte.MaxValue) {  					opcode = OpCodes.Ldloca_S;  					operand = local;  				}  				else {  					opcode = OpCodes.Ldloca;  					operand = local;  				}  				break;    			default:  				throw new ApplicationException("Invalid opcode");  			}
Magic Number,de4dot.code.deobfuscators.Agile_NET.vm,CsvmToCilMethodConverterBase,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\CsvmToCilMethodConverterBase.cs,UpdateLocalInstruction,The following statement contains a magic number: switch (instr.OpCode.Code) {  			case Code.Ldloc_S:  			case Code.Ldloc:  				if (index == 0)  					opcode = OpCodes.Ldloc_0;  				else if (index == 1)  					opcode = OpCodes.Ldloc_1;  				else if (index == 2)  					opcode = OpCodes.Ldloc_2;  				else if (index == 3)  					opcode = OpCodes.Ldloc_3;  				else if (byte.MinValue <= index && index <= byte.MaxValue) {  					opcode = OpCodes.Ldloc_S;  					operand = local;  				}  				else {  					opcode = OpCodes.Ldloc;  					operand = local;  				}  				break;    			case Code.Stloc:  			case Code.Stloc_S:  				if (index == 0)  					opcode = OpCodes.Stloc_0;  				else if (index == 1)  					opcode = OpCodes.Stloc_1;  				else if (index == 2)  					opcode = OpCodes.Stloc_2;  				else if (index == 3)  					opcode = OpCodes.Stloc_3;  				else if (byte.MinValue <= index && index <= byte.MaxValue) {  					opcode = OpCodes.Stloc_S;  					operand = local;  				}  				else {  					opcode = OpCodes.Stloc;  					operand = local;  				}  				break;    			case Code.Ldloca:  			case Code.Ldloca_S:  				if (byte.MinValue <= index && index <= byte.MaxValue) {  					opcode = OpCodes.Ldloca_S;  					operand = local;  				}  				else {  					opcode = OpCodes.Ldloca;  					operand = local;  				}  				break;    			default:  				throw new ApplicationException("Invalid opcode");  			}
Magic Number,de4dot.code.deobfuscators.Agile_NET.vm,CsvmToCilMethodConverterBase,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\CsvmToCilMethodConverterBase.cs,UpdateLocalInstruction,The following statement contains a magic number: switch (instr.OpCode.Code) {  			case Code.Ldloc_S:  			case Code.Ldloc:  				if (index == 0)  					opcode = OpCodes.Ldloc_0;  				else if (index == 1)  					opcode = OpCodes.Ldloc_1;  				else if (index == 2)  					opcode = OpCodes.Ldloc_2;  				else if (index == 3)  					opcode = OpCodes.Ldloc_3;  				else if (byte.MinValue <= index && index <= byte.MaxValue) {  					opcode = OpCodes.Ldloc_S;  					operand = local;  				}  				else {  					opcode = OpCodes.Ldloc;  					operand = local;  				}  				break;    			case Code.Stloc:  			case Code.Stloc_S:  				if (index == 0)  					opcode = OpCodes.Stloc_0;  				else if (index == 1)  					opcode = OpCodes.Stloc_1;  				else if (index == 2)  					opcode = OpCodes.Stloc_2;  				else if (index == 3)  					opcode = OpCodes.Stloc_3;  				else if (byte.MinValue <= index && index <= byte.MaxValue) {  					opcode = OpCodes.Stloc_S;  					operand = local;  				}  				else {  					opcode = OpCodes.Stloc;  					operand = local;  				}  				break;    			case Code.Ldloca:  			case Code.Ldloca_S:  				if (byte.MinValue <= index && index <= byte.MaxValue) {  					opcode = OpCodes.Ldloca_S;  					operand = local;  				}  				else {  					opcode = OpCodes.Ldloca;  					operand = local;  				}  				break;    			default:  				throw new ApplicationException("Invalid opcode");  			}
Magic Number,de4dot.code.deobfuscators.Agile_NET.vm,CsvmToCilMethodConverterBase,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\CsvmToCilMethodConverterBase.cs,UpdateArgInstruction,The following statement contains a magic number: switch (instr.OpCode.Code) {  			case Code.Ldarg:  			case Code.Ldarg_S:  				if (index == 0) {  					instr.OpCode = OpCodes.Ldarg_0;  					instr.Operand = null;  				}  				else if (index == 1) {  					instr.OpCode = OpCodes.Ldarg_1;  					instr.Operand = null;  				}  				else if (index == 2) {  					instr.OpCode = OpCodes.Ldarg_2;  					instr.Operand = null;  				}  				else if (index == 3) {  					instr.OpCode = OpCodes.Ldarg_3;  					instr.Operand = null;  				}  				else if (byte.MinValue <= index && index <= byte.MaxValue) {  					instr.OpCode = OpCodes.Ldarg_S;  					instr.Operand = arg;  				}  				else {  					instr.OpCode = OpCodes.Ldarg;  					instr.Operand = arg;  				}  				break;    			case Code.Starg:  			case Code.Starg_S:  				if (byte.MinValue <= index && index <= byte.MaxValue) {  					instr.OpCode = OpCodes.Starg_S;  					instr.Operand = arg;  				}  				else {  					instr.OpCode = OpCodes.Starg;  					instr.Operand = arg;  				}  				break;    			case Code.Ldarga:  			case Code.Ldarga_S:  				if (byte.MinValue <= index && index <= byte.MaxValue) {  					instr.OpCode = OpCodes.Ldarga_S;  					instr.Operand = arg;  				}  				else {  					instr.OpCode = OpCodes.Ldarga;  					instr.Operand = arg;  				}  				break;    			default:  				throw new ApplicationException("Invalid opcode");  			}
Magic Number,de4dot.code.deobfuscators.Agile_NET.vm,CsvmToCilMethodConverterBase,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\CsvmToCilMethodConverterBase.cs,UpdateArgInstruction,The following statement contains a magic number: switch (instr.OpCode.Code) {  			case Code.Ldarg:  			case Code.Ldarg_S:  				if (index == 0) {  					instr.OpCode = OpCodes.Ldarg_0;  					instr.Operand = null;  				}  				else if (index == 1) {  					instr.OpCode = OpCodes.Ldarg_1;  					instr.Operand = null;  				}  				else if (index == 2) {  					instr.OpCode = OpCodes.Ldarg_2;  					instr.Operand = null;  				}  				else if (index == 3) {  					instr.OpCode = OpCodes.Ldarg_3;  					instr.Operand = null;  				}  				else if (byte.MinValue <= index && index <= byte.MaxValue) {  					instr.OpCode = OpCodes.Ldarg_S;  					instr.Operand = arg;  				}  				else {  					instr.OpCode = OpCodes.Ldarg;  					instr.Operand = arg;  				}  				break;    			case Code.Starg:  			case Code.Starg_S:  				if (byte.MinValue <= index && index <= byte.MaxValue) {  					instr.OpCode = OpCodes.Starg_S;  					instr.Operand = arg;  				}  				else {  					instr.OpCode = OpCodes.Starg;  					instr.Operand = arg;  				}  				break;    			case Code.Ldarga:  			case Code.Ldarga_S:  				if (byte.MinValue <= index && index <= byte.MaxValue) {  					instr.OpCode = OpCodes.Ldarga_S;  					instr.Operand = arg;  				}  				else {  					instr.OpCode = OpCodes.Ldarga;  					instr.Operand = arg;  				}  				break;    			default:  				throw new ApplicationException("Invalid opcode");  			}
Magic Number,de4dot.code.deobfuscators.Agile_NET.vm,CsvmToCilMethodConverterBase,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\CsvmToCilMethodConverterBase.cs,GetInstructionSize,The following statement contains a magic number: return 5;
Magic Number,de4dot.code.deobfuscators.Agile_NET.vm,CsvmToCilMethodConverterBase,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\CsvmToCilMethodConverterBase.cs,GetInstructionSize,The following statement contains a magic number: return instr.OpCode.Size + (op.TargetDisplacements.Length + 1) * 4;
Magic Number,de4dot.code.deobfuscators.Agile_NET.vm.v1,Csvm,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\v1\Csvm.cs,FindVmAssemblyRef,The following statement contains a magic number: sig.Params.Count != 2
Magic Number,de4dot.code.deobfuscators.Agile_NET.vm.v1,OpCodeHandlers,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\v1\OpCodeHandler.cs,arithmetic_read,The following statement contains a magic number: switch (reader.ReadByte()) {  			case 0: return OpCodes.Add.ToInstruction();  			case 1: return OpCodes.Add_Ovf.ToInstruction();  			case 2: return OpCodes.Add_Ovf_Un.ToInstruction();  			case 3: return OpCodes.Sub.ToInstruction();  			case 4: return OpCodes.Sub_Ovf.ToInstruction();  			case 5: return OpCodes.Sub_Ovf_Un.ToInstruction();  			case 6: return OpCodes.Mul.ToInstruction();  			case 7: return OpCodes.Mul_Ovf.ToInstruction();  			case 8: return OpCodes.Mul_Ovf_Un.ToInstruction();  			case 9: return OpCodes.Div.ToInstruction();  			case 10: return OpCodes.Div_Un.ToInstruction();  			case 11: return OpCodes.Rem.ToInstruction();  			case 12: return OpCodes.Rem_Un.ToInstruction();  			default: throw new ApplicationException("Invalid opcode");  			}
Magic Number,de4dot.code.deobfuscators.Agile_NET.vm.v1,OpCodeHandlers,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\v1\OpCodeHandler.cs,arithmetic_read,The following statement contains a magic number: switch (reader.ReadByte()) {  			case 0: return OpCodes.Add.ToInstruction();  			case 1: return OpCodes.Add_Ovf.ToInstruction();  			case 2: return OpCodes.Add_Ovf_Un.ToInstruction();  			case 3: return OpCodes.Sub.ToInstruction();  			case 4: return OpCodes.Sub_Ovf.ToInstruction();  			case 5: return OpCodes.Sub_Ovf_Un.ToInstruction();  			case 6: return OpCodes.Mul.ToInstruction();  			case 7: return OpCodes.Mul_Ovf.ToInstruction();  			case 8: return OpCodes.Mul_Ovf_Un.ToInstruction();  			case 9: return OpCodes.Div.ToInstruction();  			case 10: return OpCodes.Div_Un.ToInstruction();  			case 11: return OpCodes.Rem.ToInstruction();  			case 12: return OpCodes.Rem_Un.ToInstruction();  			default: throw new ApplicationException("Invalid opcode");  			}
Magic Number,de4dot.code.deobfuscators.Agile_NET.vm.v1,OpCodeHandlers,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\v1\OpCodeHandler.cs,arithmetic_read,The following statement contains a magic number: switch (reader.ReadByte()) {  			case 0: return OpCodes.Add.ToInstruction();  			case 1: return OpCodes.Add_Ovf.ToInstruction();  			case 2: return OpCodes.Add_Ovf_Un.ToInstruction();  			case 3: return OpCodes.Sub.ToInstruction();  			case 4: return OpCodes.Sub_Ovf.ToInstruction();  			case 5: return OpCodes.Sub_Ovf_Un.ToInstruction();  			case 6: return OpCodes.Mul.ToInstruction();  			case 7: return OpCodes.Mul_Ovf.ToInstruction();  			case 8: return OpCodes.Mul_Ovf_Un.ToInstruction();  			case 9: return OpCodes.Div.ToInstruction();  			case 10: return OpCodes.Div_Un.ToInstruction();  			case 11: return OpCodes.Rem.ToInstruction();  			case 12: return OpCodes.Rem_Un.ToInstruction();  			default: throw new ApplicationException("Invalid opcode");  			}
Magic Number,de4dot.code.deobfuscators.Agile_NET.vm.v1,OpCodeHandlers,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\v1\OpCodeHandler.cs,arithmetic_read,The following statement contains a magic number: switch (reader.ReadByte()) {  			case 0: return OpCodes.Add.ToInstruction();  			case 1: return OpCodes.Add_Ovf.ToInstruction();  			case 2: return OpCodes.Add_Ovf_Un.ToInstruction();  			case 3: return OpCodes.Sub.ToInstruction();  			case 4: return OpCodes.Sub_Ovf.ToInstruction();  			case 5: return OpCodes.Sub_Ovf_Un.ToInstruction();  			case 6: return OpCodes.Mul.ToInstruction();  			case 7: return OpCodes.Mul_Ovf.ToInstruction();  			case 8: return OpCodes.Mul_Ovf_Un.ToInstruction();  			case 9: return OpCodes.Div.ToInstruction();  			case 10: return OpCodes.Div_Un.ToInstruction();  			case 11: return OpCodes.Rem.ToInstruction();  			case 12: return OpCodes.Rem_Un.ToInstruction();  			default: throw new ApplicationException("Invalid opcode");  			}
Magic Number,de4dot.code.deobfuscators.Agile_NET.vm.v1,OpCodeHandlers,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\v1\OpCodeHandler.cs,arithmetic_read,The following statement contains a magic number: switch (reader.ReadByte()) {  			case 0: return OpCodes.Add.ToInstruction();  			case 1: return OpCodes.Add_Ovf.ToInstruction();  			case 2: return OpCodes.Add_Ovf_Un.ToInstruction();  			case 3: return OpCodes.Sub.ToInstruction();  			case 4: return OpCodes.Sub_Ovf.ToInstruction();  			case 5: return OpCodes.Sub_Ovf_Un.ToInstruction();  			case 6: return OpCodes.Mul.ToInstruction();  			case 7: return OpCodes.Mul_Ovf.ToInstruction();  			case 8: return OpCodes.Mul_Ovf_Un.ToInstruction();  			case 9: return OpCodes.Div.ToInstruction();  			case 10: return OpCodes.Div_Un.ToInstruction();  			case 11: return OpCodes.Rem.ToInstruction();  			case 12: return OpCodes.Rem_Un.ToInstruction();  			default: throw new ApplicationException("Invalid opcode");  			}
Magic Number,de4dot.code.deobfuscators.Agile_NET.vm.v1,OpCodeHandlers,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\v1\OpCodeHandler.cs,arithmetic_read,The following statement contains a magic number: switch (reader.ReadByte()) {  			case 0: return OpCodes.Add.ToInstruction();  			case 1: return OpCodes.Add_Ovf.ToInstruction();  			case 2: return OpCodes.Add_Ovf_Un.ToInstruction();  			case 3: return OpCodes.Sub.ToInstruction();  			case 4: return OpCodes.Sub_Ovf.ToInstruction();  			case 5: return OpCodes.Sub_Ovf_Un.ToInstruction();  			case 6: return OpCodes.Mul.ToInstruction();  			case 7: return OpCodes.Mul_Ovf.ToInstruction();  			case 8: return OpCodes.Mul_Ovf_Un.ToInstruction();  			case 9: return OpCodes.Div.ToInstruction();  			case 10: return OpCodes.Div_Un.ToInstruction();  			case 11: return OpCodes.Rem.ToInstruction();  			case 12: return OpCodes.Rem_Un.ToInstruction();  			default: throw new ApplicationException("Invalid opcode");  			}
Magic Number,de4dot.code.deobfuscators.Agile_NET.vm.v1,OpCodeHandlers,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\v1\OpCodeHandler.cs,arithmetic_read,The following statement contains a magic number: switch (reader.ReadByte()) {  			case 0: return OpCodes.Add.ToInstruction();  			case 1: return OpCodes.Add_Ovf.ToInstruction();  			case 2: return OpCodes.Add_Ovf_Un.ToInstruction();  			case 3: return OpCodes.Sub.ToInstruction();  			case 4: return OpCodes.Sub_Ovf.ToInstruction();  			case 5: return OpCodes.Sub_Ovf_Un.ToInstruction();  			case 6: return OpCodes.Mul.ToInstruction();  			case 7: return OpCodes.Mul_Ovf.ToInstruction();  			case 8: return OpCodes.Mul_Ovf_Un.ToInstruction();  			case 9: return OpCodes.Div.ToInstruction();  			case 10: return OpCodes.Div_Un.ToInstruction();  			case 11: return OpCodes.Rem.ToInstruction();  			case 12: return OpCodes.Rem_Un.ToInstruction();  			default: throw new ApplicationException("Invalid opcode");  			}
Magic Number,de4dot.code.deobfuscators.Agile_NET.vm.v1,OpCodeHandlers,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\v1\OpCodeHandler.cs,arithmetic_read,The following statement contains a magic number: switch (reader.ReadByte()) {  			case 0: return OpCodes.Add.ToInstruction();  			case 1: return OpCodes.Add_Ovf.ToInstruction();  			case 2: return OpCodes.Add_Ovf_Un.ToInstruction();  			case 3: return OpCodes.Sub.ToInstruction();  			case 4: return OpCodes.Sub_Ovf.ToInstruction();  			case 5: return OpCodes.Sub_Ovf_Un.ToInstruction();  			case 6: return OpCodes.Mul.ToInstruction();  			case 7: return OpCodes.Mul_Ovf.ToInstruction();  			case 8: return OpCodes.Mul_Ovf_Un.ToInstruction();  			case 9: return OpCodes.Div.ToInstruction();  			case 10: return OpCodes.Div_Un.ToInstruction();  			case 11: return OpCodes.Rem.ToInstruction();  			case 12: return OpCodes.Rem_Un.ToInstruction();  			default: throw new ApplicationException("Invalid opcode");  			}
Magic Number,de4dot.code.deobfuscators.Agile_NET.vm.v1,OpCodeHandlers,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\v1\OpCodeHandler.cs,arithmetic_read,The following statement contains a magic number: switch (reader.ReadByte()) {  			case 0: return OpCodes.Add.ToInstruction();  			case 1: return OpCodes.Add_Ovf.ToInstruction();  			case 2: return OpCodes.Add_Ovf_Un.ToInstruction();  			case 3: return OpCodes.Sub.ToInstruction();  			case 4: return OpCodes.Sub_Ovf.ToInstruction();  			case 5: return OpCodes.Sub_Ovf_Un.ToInstruction();  			case 6: return OpCodes.Mul.ToInstruction();  			case 7: return OpCodes.Mul_Ovf.ToInstruction();  			case 8: return OpCodes.Mul_Ovf_Un.ToInstruction();  			case 9: return OpCodes.Div.ToInstruction();  			case 10: return OpCodes.Div_Un.ToInstruction();  			case 11: return OpCodes.Rem.ToInstruction();  			case 12: return OpCodes.Rem_Un.ToInstruction();  			default: throw new ApplicationException("Invalid opcode");  			}
Magic Number,de4dot.code.deobfuscators.Agile_NET.vm.v1,OpCodeHandlers,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\v1\OpCodeHandler.cs,arithmetic_read,The following statement contains a magic number: switch (reader.ReadByte()) {  			case 0: return OpCodes.Add.ToInstruction();  			case 1: return OpCodes.Add_Ovf.ToInstruction();  			case 2: return OpCodes.Add_Ovf_Un.ToInstruction();  			case 3: return OpCodes.Sub.ToInstruction();  			case 4: return OpCodes.Sub_Ovf.ToInstruction();  			case 5: return OpCodes.Sub_Ovf_Un.ToInstruction();  			case 6: return OpCodes.Mul.ToInstruction();  			case 7: return OpCodes.Mul_Ovf.ToInstruction();  			case 8: return OpCodes.Mul_Ovf_Un.ToInstruction();  			case 9: return OpCodes.Div.ToInstruction();  			case 10: return OpCodes.Div_Un.ToInstruction();  			case 11: return OpCodes.Rem.ToInstruction();  			case 12: return OpCodes.Rem_Un.ToInstruction();  			default: throw new ApplicationException("Invalid opcode");  			}
Magic Number,de4dot.code.deobfuscators.Agile_NET.vm.v1,OpCodeHandlers,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\v1\OpCodeHandler.cs,arithmetic_read,The following statement contains a magic number: switch (reader.ReadByte()) {  			case 0: return OpCodes.Add.ToInstruction();  			case 1: return OpCodes.Add_Ovf.ToInstruction();  			case 2: return OpCodes.Add_Ovf_Un.ToInstruction();  			case 3: return OpCodes.Sub.ToInstruction();  			case 4: return OpCodes.Sub_Ovf.ToInstruction();  			case 5: return OpCodes.Sub_Ovf_Un.ToInstruction();  			case 6: return OpCodes.Mul.ToInstruction();  			case 7: return OpCodes.Mul_Ovf.ToInstruction();  			case 8: return OpCodes.Mul_Ovf_Un.ToInstruction();  			case 9: return OpCodes.Div.ToInstruction();  			case 10: return OpCodes.Div_Un.ToInstruction();  			case 11: return OpCodes.Rem.ToInstruction();  			case 12: return OpCodes.Rem_Un.ToInstruction();  			default: throw new ApplicationException("Invalid opcode");  			}
Magic Number,de4dot.code.deobfuscators.Agile_NET.vm.v1,OpCodeHandlers,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\v1\OpCodeHandler.cs,call_read,The following statement contains a magic number: switch (reader.ReadByte()) {  			case 0: instr.OpCode = OpCodes.Newobj; break;  			case 1: instr.OpCode = OpCodes.Call; break;  			case 2: instr.OpCode = OpCodes.Callvirt; break;  			default: throw new ApplicationException("Invalid opcode");  			}
Magic Number,de4dot.code.deobfuscators.Agile_NET.vm.v1,OpCodeHandlers,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\v1\OpCodeHandler.cs,compare_read,The following statement contains a magic number: switch (type) {  			case 0: instr.OpCode = OpCodes.Br; break;  			case 1: instr.OpCode = OpCodes.Brtrue; break;  			case 2: instr.OpCode = OpCodes.Brfalse; break;  			case 3: instr.OpCode = OpCodes.Beq; break;  			case 4: instr.OpCode = OpCodes.Bge; break;  			case 5: instr.OpCode = OpCodes.Bgt; break;  			case 6: instr.OpCode = OpCodes.Ble; break;  			case 7: instr.OpCode = OpCodes.Blt; break;  			case 8: instr.OpCode = OpCodes.Bne_Un; break;  			case 9: instr.OpCode = OpCodes.Bge_Un; break;  			case 10: instr.OpCode = OpCodes.Bgt_Un; break;  			case 11: instr.OpCode = OpCodes.Ble_Un; break;  			case 12: instr.OpCode = OpCodes.Blt_Un; break;  			case 13: instr.OpCode = OpCodes.Ceq; break;  			case 14: instr.OpCode = OpCodes.Cgt; break;  			case 15: instr.OpCode = OpCodes.Clt; break;  			case 16: instr.OpCode = OpCodes.Cgt_Un; break;  			case 17: instr.OpCode = OpCodes.Clt_Un; break;  			default: throw new ApplicationException("Invalid opcode");  			}
Magic Number,de4dot.code.deobfuscators.Agile_NET.vm.v1,OpCodeHandlers,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\v1\OpCodeHandler.cs,compare_read,The following statement contains a magic number: switch (type) {  			case 0: instr.OpCode = OpCodes.Br; break;  			case 1: instr.OpCode = OpCodes.Brtrue; break;  			case 2: instr.OpCode = OpCodes.Brfalse; break;  			case 3: instr.OpCode = OpCodes.Beq; break;  			case 4: instr.OpCode = OpCodes.Bge; break;  			case 5: instr.OpCode = OpCodes.Bgt; break;  			case 6: instr.OpCode = OpCodes.Ble; break;  			case 7: instr.OpCode = OpCodes.Blt; break;  			case 8: instr.OpCode = OpCodes.Bne_Un; break;  			case 9: instr.OpCode = OpCodes.Bge_Un; break;  			case 10: instr.OpCode = OpCodes.Bgt_Un; break;  			case 11: instr.OpCode = OpCodes.Ble_Un; break;  			case 12: instr.OpCode = OpCodes.Blt_Un; break;  			case 13: instr.OpCode = OpCodes.Ceq; break;  			case 14: instr.OpCode = OpCodes.Cgt; break;  			case 15: instr.OpCode = OpCodes.Clt; break;  			case 16: instr.OpCode = OpCodes.Cgt_Un; break;  			case 17: instr.OpCode = OpCodes.Clt_Un; break;  			default: throw new ApplicationException("Invalid opcode");  			}
Magic Number,de4dot.code.deobfuscators.Agile_NET.vm.v1,OpCodeHandlers,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\v1\OpCodeHandler.cs,compare_read,The following statement contains a magic number: switch (type) {  			case 0: instr.OpCode = OpCodes.Br; break;  			case 1: instr.OpCode = OpCodes.Brtrue; break;  			case 2: instr.OpCode = OpCodes.Brfalse; break;  			case 3: instr.OpCode = OpCodes.Beq; break;  			case 4: instr.OpCode = OpCodes.Bge; break;  			case 5: instr.OpCode = OpCodes.Bgt; break;  			case 6: instr.OpCode = OpCodes.Ble; break;  			case 7: instr.OpCode = OpCodes.Blt; break;  			case 8: instr.OpCode = OpCodes.Bne_Un; break;  			case 9: instr.OpCode = OpCodes.Bge_Un; break;  			case 10: instr.OpCode = OpCodes.Bgt_Un; break;  			case 11: instr.OpCode = OpCodes.Ble_Un; break;  			case 12: instr.OpCode = OpCodes.Blt_Un; break;  			case 13: instr.OpCode = OpCodes.Ceq; break;  			case 14: instr.OpCode = OpCodes.Cgt; break;  			case 15: instr.OpCode = OpCodes.Clt; break;  			case 16: instr.OpCode = OpCodes.Cgt_Un; break;  			case 17: instr.OpCode = OpCodes.Clt_Un; break;  			default: throw new ApplicationException("Invalid opcode");  			}
Magic Number,de4dot.code.deobfuscators.Agile_NET.vm.v1,OpCodeHandlers,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\v1\OpCodeHandler.cs,compare_read,The following statement contains a magic number: switch (type) {  			case 0: instr.OpCode = OpCodes.Br; break;  			case 1: instr.OpCode = OpCodes.Brtrue; break;  			case 2: instr.OpCode = OpCodes.Brfalse; break;  			case 3: instr.OpCode = OpCodes.Beq; break;  			case 4: instr.OpCode = OpCodes.Bge; break;  			case 5: instr.OpCode = OpCodes.Bgt; break;  			case 6: instr.OpCode = OpCodes.Ble; break;  			case 7: instr.OpCode = OpCodes.Blt; break;  			case 8: instr.OpCode = OpCodes.Bne_Un; break;  			case 9: instr.OpCode = OpCodes.Bge_Un; break;  			case 10: instr.OpCode = OpCodes.Bgt_Un; break;  			case 11: instr.OpCode = OpCodes.Ble_Un; break;  			case 12: instr.OpCode = OpCodes.Blt_Un; break;  			case 13: instr.OpCode = OpCodes.Ceq; break;  			case 14: instr.OpCode = OpCodes.Cgt; break;  			case 15: instr.OpCode = OpCodes.Clt; break;  			case 16: instr.OpCode = OpCodes.Cgt_Un; break;  			case 17: instr.OpCode = OpCodes.Clt_Un; break;  			default: throw new ApplicationException("Invalid opcode");  			}
Magic Number,de4dot.code.deobfuscators.Agile_NET.vm.v1,OpCodeHandlers,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\v1\OpCodeHandler.cs,compare_read,The following statement contains a magic number: switch (type) {  			case 0: instr.OpCode = OpCodes.Br; break;  			case 1: instr.OpCode = OpCodes.Brtrue; break;  			case 2: instr.OpCode = OpCodes.Brfalse; break;  			case 3: instr.OpCode = OpCodes.Beq; break;  			case 4: instr.OpCode = OpCodes.Bge; break;  			case 5: instr.OpCode = OpCodes.Bgt; break;  			case 6: instr.OpCode = OpCodes.Ble; break;  			case 7: instr.OpCode = OpCodes.Blt; break;  			case 8: instr.OpCode = OpCodes.Bne_Un; break;  			case 9: instr.OpCode = OpCodes.Bge_Un; break;  			case 10: instr.OpCode = OpCodes.Bgt_Un; break;  			case 11: instr.OpCode = OpCodes.Ble_Un; break;  			case 12: instr.OpCode = OpCodes.Blt_Un; break;  			case 13: instr.OpCode = OpCodes.Ceq; break;  			case 14: instr.OpCode = OpCodes.Cgt; break;  			case 15: instr.OpCode = OpCodes.Clt; break;  			case 16: instr.OpCode = OpCodes.Cgt_Un; break;  			case 17: instr.OpCode = OpCodes.Clt_Un; break;  			default: throw new ApplicationException("Invalid opcode");  			}
Magic Number,de4dot.code.deobfuscators.Agile_NET.vm.v1,OpCodeHandlers,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\v1\OpCodeHandler.cs,compare_read,The following statement contains a magic number: switch (type) {  			case 0: instr.OpCode = OpCodes.Br; break;  			case 1: instr.OpCode = OpCodes.Brtrue; break;  			case 2: instr.OpCode = OpCodes.Brfalse; break;  			case 3: instr.OpCode = OpCodes.Beq; break;  			case 4: instr.OpCode = OpCodes.Bge; break;  			case 5: instr.OpCode = OpCodes.Bgt; break;  			case 6: instr.OpCode = OpCodes.Ble; break;  			case 7: instr.OpCode = OpCodes.Blt; break;  			case 8: instr.OpCode = OpCodes.Bne_Un; break;  			case 9: instr.OpCode = OpCodes.Bge_Un; break;  			case 10: instr.OpCode = OpCodes.Bgt_Un; break;  			case 11: instr.OpCode = OpCodes.Ble_Un; break;  			case 12: instr.OpCode = OpCodes.Blt_Un; break;  			case 13: instr.OpCode = OpCodes.Ceq; break;  			case 14: instr.OpCode = OpCodes.Cgt; break;  			case 15: instr.OpCode = OpCodes.Clt; break;  			case 16: instr.OpCode = OpCodes.Cgt_Un; break;  			case 17: instr.OpCode = OpCodes.Clt_Un; break;  			default: throw new ApplicationException("Invalid opcode");  			}
Magic Number,de4dot.code.deobfuscators.Agile_NET.vm.v1,OpCodeHandlers,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\v1\OpCodeHandler.cs,compare_read,The following statement contains a magic number: switch (type) {  			case 0: instr.OpCode = OpCodes.Br; break;  			case 1: instr.OpCode = OpCodes.Brtrue; break;  			case 2: instr.OpCode = OpCodes.Brfalse; break;  			case 3: instr.OpCode = OpCodes.Beq; break;  			case 4: instr.OpCode = OpCodes.Bge; break;  			case 5: instr.OpCode = OpCodes.Bgt; break;  			case 6: instr.OpCode = OpCodes.Ble; break;  			case 7: instr.OpCode = OpCodes.Blt; break;  			case 8: instr.OpCode = OpCodes.Bne_Un; break;  			case 9: instr.OpCode = OpCodes.Bge_Un; break;  			case 10: instr.OpCode = OpCodes.Bgt_Un; break;  			case 11: instr.OpCode = OpCodes.Ble_Un; break;  			case 12: instr.OpCode = OpCodes.Blt_Un; break;  			case 13: instr.OpCode = OpCodes.Ceq; break;  			case 14: instr.OpCode = OpCodes.Cgt; break;  			case 15: instr.OpCode = OpCodes.Clt; break;  			case 16: instr.OpCode = OpCodes.Cgt_Un; break;  			case 17: instr.OpCode = OpCodes.Clt_Un; break;  			default: throw new ApplicationException("Invalid opcode");  			}
Magic Number,de4dot.code.deobfuscators.Agile_NET.vm.v1,OpCodeHandlers,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\v1\OpCodeHandler.cs,compare_read,The following statement contains a magic number: switch (type) {  			case 0: instr.OpCode = OpCodes.Br; break;  			case 1: instr.OpCode = OpCodes.Brtrue; break;  			case 2: instr.OpCode = OpCodes.Brfalse; break;  			case 3: instr.OpCode = OpCodes.Beq; break;  			case 4: instr.OpCode = OpCodes.Bge; break;  			case 5: instr.OpCode = OpCodes.Bgt; break;  			case 6: instr.OpCode = OpCodes.Ble; break;  			case 7: instr.OpCode = OpCodes.Blt; break;  			case 8: instr.OpCode = OpCodes.Bne_Un; break;  			case 9: instr.OpCode = OpCodes.Bge_Un; break;  			case 10: instr.OpCode = OpCodes.Bgt_Un; break;  			case 11: instr.OpCode = OpCodes.Ble_Un; break;  			case 12: instr.OpCode = OpCodes.Blt_Un; break;  			case 13: instr.OpCode = OpCodes.Ceq; break;  			case 14: instr.OpCode = OpCodes.Cgt; break;  			case 15: instr.OpCode = OpCodes.Clt; break;  			case 16: instr.OpCode = OpCodes.Cgt_Un; break;  			case 17: instr.OpCode = OpCodes.Clt_Un; break;  			default: throw new ApplicationException("Invalid opcode");  			}
Magic Number,de4dot.code.deobfuscators.Agile_NET.vm.v1,OpCodeHandlers,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\v1\OpCodeHandler.cs,compare_read,The following statement contains a magic number: switch (type) {  			case 0: instr.OpCode = OpCodes.Br; break;  			case 1: instr.OpCode = OpCodes.Brtrue; break;  			case 2: instr.OpCode = OpCodes.Brfalse; break;  			case 3: instr.OpCode = OpCodes.Beq; break;  			case 4: instr.OpCode = OpCodes.Bge; break;  			case 5: instr.OpCode = OpCodes.Bgt; break;  			case 6: instr.OpCode = OpCodes.Ble; break;  			case 7: instr.OpCode = OpCodes.Blt; break;  			case 8: instr.OpCode = OpCodes.Bne_Un; break;  			case 9: instr.OpCode = OpCodes.Bge_Un; break;  			case 10: instr.OpCode = OpCodes.Bgt_Un; break;  			case 11: instr.OpCode = OpCodes.Ble_Un; break;  			case 12: instr.OpCode = OpCodes.Blt_Un; break;  			case 13: instr.OpCode = OpCodes.Ceq; break;  			case 14: instr.OpCode = OpCodes.Cgt; break;  			case 15: instr.OpCode = OpCodes.Clt; break;  			case 16: instr.OpCode = OpCodes.Cgt_Un; break;  			case 17: instr.OpCode = OpCodes.Clt_Un; break;  			default: throw new ApplicationException("Invalid opcode");  			}
Magic Number,de4dot.code.deobfuscators.Agile_NET.vm.v1,OpCodeHandlers,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\v1\OpCodeHandler.cs,compare_read,The following statement contains a magic number: switch (type) {  			case 0: instr.OpCode = OpCodes.Br; break;  			case 1: instr.OpCode = OpCodes.Brtrue; break;  			case 2: instr.OpCode = OpCodes.Brfalse; break;  			case 3: instr.OpCode = OpCodes.Beq; break;  			case 4: instr.OpCode = OpCodes.Bge; break;  			case 5: instr.OpCode = OpCodes.Bgt; break;  			case 6: instr.OpCode = OpCodes.Ble; break;  			case 7: instr.OpCode = OpCodes.Blt; break;  			case 8: instr.OpCode = OpCodes.Bne_Un; break;  			case 9: instr.OpCode = OpCodes.Bge_Un; break;  			case 10: instr.OpCode = OpCodes.Bgt_Un; break;  			case 11: instr.OpCode = OpCodes.Ble_Un; break;  			case 12: instr.OpCode = OpCodes.Blt_Un; break;  			case 13: instr.OpCode = OpCodes.Ceq; break;  			case 14: instr.OpCode = OpCodes.Cgt; break;  			case 15: instr.OpCode = OpCodes.Clt; break;  			case 16: instr.OpCode = OpCodes.Cgt_Un; break;  			case 17: instr.OpCode = OpCodes.Clt_Un; break;  			default: throw new ApplicationException("Invalid opcode");  			}
Magic Number,de4dot.code.deobfuscators.Agile_NET.vm.v1,OpCodeHandlers,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\v1\OpCodeHandler.cs,compare_read,The following statement contains a magic number: switch (type) {  			case 0: instr.OpCode = OpCodes.Br; break;  			case 1: instr.OpCode = OpCodes.Brtrue; break;  			case 2: instr.OpCode = OpCodes.Brfalse; break;  			case 3: instr.OpCode = OpCodes.Beq; break;  			case 4: instr.OpCode = OpCodes.Bge; break;  			case 5: instr.OpCode = OpCodes.Bgt; break;  			case 6: instr.OpCode = OpCodes.Ble; break;  			case 7: instr.OpCode = OpCodes.Blt; break;  			case 8: instr.OpCode = OpCodes.Bne_Un; break;  			case 9: instr.OpCode = OpCodes.Bge_Un; break;  			case 10: instr.OpCode = OpCodes.Bgt_Un; break;  			case 11: instr.OpCode = OpCodes.Ble_Un; break;  			case 12: instr.OpCode = OpCodes.Blt_Un; break;  			case 13: instr.OpCode = OpCodes.Ceq; break;  			case 14: instr.OpCode = OpCodes.Cgt; break;  			case 15: instr.OpCode = OpCodes.Clt; break;  			case 16: instr.OpCode = OpCodes.Cgt_Un; break;  			case 17: instr.OpCode = OpCodes.Clt_Un; break;  			default: throw new ApplicationException("Invalid opcode");  			}
Magic Number,de4dot.code.deobfuscators.Agile_NET.vm.v1,OpCodeHandlers,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\v1\OpCodeHandler.cs,compare_read,The following statement contains a magic number: switch (type) {  			case 0: instr.OpCode = OpCodes.Br; break;  			case 1: instr.OpCode = OpCodes.Brtrue; break;  			case 2: instr.OpCode = OpCodes.Brfalse; break;  			case 3: instr.OpCode = OpCodes.Beq; break;  			case 4: instr.OpCode = OpCodes.Bge; break;  			case 5: instr.OpCode = OpCodes.Bgt; break;  			case 6: instr.OpCode = OpCodes.Ble; break;  			case 7: instr.OpCode = OpCodes.Blt; break;  			case 8: instr.OpCode = OpCodes.Bne_Un; break;  			case 9: instr.OpCode = OpCodes.Bge_Un; break;  			case 10: instr.OpCode = OpCodes.Bgt_Un; break;  			case 11: instr.OpCode = OpCodes.Ble_Un; break;  			case 12: instr.OpCode = OpCodes.Blt_Un; break;  			case 13: instr.OpCode = OpCodes.Ceq; break;  			case 14: instr.OpCode = OpCodes.Cgt; break;  			case 15: instr.OpCode = OpCodes.Clt; break;  			case 16: instr.OpCode = OpCodes.Cgt_Un; break;  			case 17: instr.OpCode = OpCodes.Clt_Un; break;  			default: throw new ApplicationException("Invalid opcode");  			}
Magic Number,de4dot.code.deobfuscators.Agile_NET.vm.v1,OpCodeHandlers,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\v1\OpCodeHandler.cs,compare_read,The following statement contains a magic number: switch (type) {  			case 0: instr.OpCode = OpCodes.Br; break;  			case 1: instr.OpCode = OpCodes.Brtrue; break;  			case 2: instr.OpCode = OpCodes.Brfalse; break;  			case 3: instr.OpCode = OpCodes.Beq; break;  			case 4: instr.OpCode = OpCodes.Bge; break;  			case 5: instr.OpCode = OpCodes.Bgt; break;  			case 6: instr.OpCode = OpCodes.Ble; break;  			case 7: instr.OpCode = OpCodes.Blt; break;  			case 8: instr.OpCode = OpCodes.Bne_Un; break;  			case 9: instr.OpCode = OpCodes.Bge_Un; break;  			case 10: instr.OpCode = OpCodes.Bgt_Un; break;  			case 11: instr.OpCode = OpCodes.Ble_Un; break;  			case 12: instr.OpCode = OpCodes.Blt_Un; break;  			case 13: instr.OpCode = OpCodes.Ceq; break;  			case 14: instr.OpCode = OpCodes.Cgt; break;  			case 15: instr.OpCode = OpCodes.Clt; break;  			case 16: instr.OpCode = OpCodes.Cgt_Un; break;  			case 17: instr.OpCode = OpCodes.Clt_Un; break;  			default: throw new ApplicationException("Invalid opcode");  			}
Magic Number,de4dot.code.deobfuscators.Agile_NET.vm.v1,OpCodeHandlers,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\v1\OpCodeHandler.cs,compare_read,The following statement contains a magic number: switch (type) {  			case 0: instr.OpCode = OpCodes.Br; break;  			case 1: instr.OpCode = OpCodes.Brtrue; break;  			case 2: instr.OpCode = OpCodes.Brfalse; break;  			case 3: instr.OpCode = OpCodes.Beq; break;  			case 4: instr.OpCode = OpCodes.Bge; break;  			case 5: instr.OpCode = OpCodes.Bgt; break;  			case 6: instr.OpCode = OpCodes.Ble; break;  			case 7: instr.OpCode = OpCodes.Blt; break;  			case 8: instr.OpCode = OpCodes.Bne_Un; break;  			case 9: instr.OpCode = OpCodes.Bge_Un; break;  			case 10: instr.OpCode = OpCodes.Bgt_Un; break;  			case 11: instr.OpCode = OpCodes.Ble_Un; break;  			case 12: instr.OpCode = OpCodes.Blt_Un; break;  			case 13: instr.OpCode = OpCodes.Ceq; break;  			case 14: instr.OpCode = OpCodes.Cgt; break;  			case 15: instr.OpCode = OpCodes.Clt; break;  			case 16: instr.OpCode = OpCodes.Cgt_Un; break;  			case 17: instr.OpCode = OpCodes.Clt_Un; break;  			default: throw new ApplicationException("Invalid opcode");  			}
Magic Number,de4dot.code.deobfuscators.Agile_NET.vm.v1,OpCodeHandlers,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\v1\OpCodeHandler.cs,compare_read,The following statement contains a magic number: switch (type) {  			case 0: instr.OpCode = OpCodes.Br; break;  			case 1: instr.OpCode = OpCodes.Brtrue; break;  			case 2: instr.OpCode = OpCodes.Brfalse; break;  			case 3: instr.OpCode = OpCodes.Beq; break;  			case 4: instr.OpCode = OpCodes.Bge; break;  			case 5: instr.OpCode = OpCodes.Bgt; break;  			case 6: instr.OpCode = OpCodes.Ble; break;  			case 7: instr.OpCode = OpCodes.Blt; break;  			case 8: instr.OpCode = OpCodes.Bne_Un; break;  			case 9: instr.OpCode = OpCodes.Bge_Un; break;  			case 10: instr.OpCode = OpCodes.Bgt_Un; break;  			case 11: instr.OpCode = OpCodes.Ble_Un; break;  			case 12: instr.OpCode = OpCodes.Blt_Un; break;  			case 13: instr.OpCode = OpCodes.Ceq; break;  			case 14: instr.OpCode = OpCodes.Cgt; break;  			case 15: instr.OpCode = OpCodes.Clt; break;  			case 16: instr.OpCode = OpCodes.Cgt_Un; break;  			case 17: instr.OpCode = OpCodes.Clt_Un; break;  			default: throw new ApplicationException("Invalid opcode");  			}
Magic Number,de4dot.code.deobfuscators.Agile_NET.vm.v1,OpCodeHandlers,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\v1\OpCodeHandler.cs,compare_read,The following statement contains a magic number: switch (type) {  			case 0: instr.OpCode = OpCodes.Br; break;  			case 1: instr.OpCode = OpCodes.Brtrue; break;  			case 2: instr.OpCode = OpCodes.Brfalse; break;  			case 3: instr.OpCode = OpCodes.Beq; break;  			case 4: instr.OpCode = OpCodes.Bge; break;  			case 5: instr.OpCode = OpCodes.Bgt; break;  			case 6: instr.OpCode = OpCodes.Ble; break;  			case 7: instr.OpCode = OpCodes.Blt; break;  			case 8: instr.OpCode = OpCodes.Bne_Un; break;  			case 9: instr.OpCode = OpCodes.Bge_Un; break;  			case 10: instr.OpCode = OpCodes.Bgt_Un; break;  			case 11: instr.OpCode = OpCodes.Ble_Un; break;  			case 12: instr.OpCode = OpCodes.Blt_Un; break;  			case 13: instr.OpCode = OpCodes.Ceq; break;  			case 14: instr.OpCode = OpCodes.Cgt; break;  			case 15: instr.OpCode = OpCodes.Clt; break;  			case 16: instr.OpCode = OpCodes.Cgt_Un; break;  			case 17: instr.OpCode = OpCodes.Clt_Un; break;  			default: throw new ApplicationException("Invalid opcode");  			}
Magic Number,de4dot.code.deobfuscators.Agile_NET.vm.v1,OpCodeHandlers,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\v1\OpCodeHandler.cs,compare_read,The following statement contains a magic number: type < 13
Magic Number,de4dot.code.deobfuscators.Agile_NET.vm.v1,OpCodeHandlers,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\v1\OpCodeHandler.cs,ldfld_read,The following statement contains a magic number: switch (b) {  			case 0: return new Instruction(null' new FieldInstructionOperand(OpCodes.Ldsfld' OpCodes.Ldfld' field));  			case 1: return new Instruction(null' new FieldInstructionOperand(OpCodes.Ldsflda' OpCodes.Ldflda' field));  			case 2: return new Instruction(null' new FieldInstructionOperand(OpCodes.Stsfld' OpCodes.Stfld' field));  			default: throw new ApplicationException("Invalid opcode");  			}
Magic Number,de4dot.code.deobfuscators.Agile_NET.vm.v1,OpCodeHandlers,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\v1\OpCodeHandler.cs,logical_read,The following statement contains a magic number: switch (reader.ReadByte()) {  			case 0: return OpCodes.And.ToInstruction();  			case 1: return OpCodes.Or.ToInstruction();  			case 2: return OpCodes.Xor.ToInstruction();  			case 3: return OpCodes.Shl.ToInstruction();  			case 4: return OpCodes.Shr.ToInstruction();  			case 5: return OpCodes.Shr_Un.ToInstruction();  			default: throw new ApplicationException("Invalid opcode");  			}
Magic Number,de4dot.code.deobfuscators.Agile_NET.vm.v1,OpCodeHandlers,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\v1\OpCodeHandler.cs,logical_read,The following statement contains a magic number: switch (reader.ReadByte()) {  			case 0: return OpCodes.And.ToInstruction();  			case 1: return OpCodes.Or.ToInstruction();  			case 2: return OpCodes.Xor.ToInstruction();  			case 3: return OpCodes.Shl.ToInstruction();  			case 4: return OpCodes.Shr.ToInstruction();  			case 5: return OpCodes.Shr_Un.ToInstruction();  			default: throw new ApplicationException("Invalid opcode");  			}
Magic Number,de4dot.code.deobfuscators.Agile_NET.vm.v1,OpCodeHandlers,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\v1\OpCodeHandler.cs,logical_read,The following statement contains a magic number: switch (reader.ReadByte()) {  			case 0: return OpCodes.And.ToInstruction();  			case 1: return OpCodes.Or.ToInstruction();  			case 2: return OpCodes.Xor.ToInstruction();  			case 3: return OpCodes.Shl.ToInstruction();  			case 4: return OpCodes.Shr.ToInstruction();  			case 5: return OpCodes.Shr_Un.ToInstruction();  			default: throw new ApplicationException("Invalid opcode");  			}
Magic Number,de4dot.code.deobfuscators.Agile_NET.vm.v1,OpCodeHandlers,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\v1\OpCodeHandler.cs,logical_read,The following statement contains a magic number: switch (reader.ReadByte()) {  			case 0: return OpCodes.And.ToInstruction();  			case 1: return OpCodes.Or.ToInstruction();  			case 2: return OpCodes.Xor.ToInstruction();  			case 3: return OpCodes.Shl.ToInstruction();  			case 4: return OpCodes.Shr.ToInstruction();  			case 5: return OpCodes.Shr_Un.ToInstruction();  			default: throw new ApplicationException("Invalid opcode");  			}
Magic Number,de4dot.code.deobfuscators.Agile_NET.vm.v1,VmOpCodeHandlerDetector,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\v1\VmOpCodeHandlerDetector.cs,IsStackType,The following statement contains a magic number: type.Fields.Count != 2
Magic Number,de4dot.code.deobfuscators.Agile_NET.vm.v1,VmOpCodeHandlerDetector,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\v1\VmOpCodeHandlerDetector.cs,IsStackType,The following statement contains a magic number: type.Interfaces.Count != 2
Magic Number,de4dot.code.deobfuscators.Agile_NET.vm.v1,VmOpCodeHandlerDetector,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\v1\VmOpCodeHandlerDetector.cs,IsStackType,The following statement contains a magic number: stackValueTypes != 2 || int32Types != 2 || objectTypes != 1
Magic Number,de4dot.code.deobfuscators.Agile_NET.vm.v1,VmOpCodeHandlerDetector,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\v1\VmOpCodeHandlerDetector.cs,IsStackType,The following statement contains a magic number: stackValueTypes != 2 || int32Types != 2 || objectTypes != 1
Magic Number,de4dot.code.deobfuscators.Agile_NET.vm.v1,VmOpCodeHandlerDetector,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\v1\VmOpCodeHandlerDetector.cs,FindVmHandlerTypes,The following statement contains a magic number: handlers.Count != 31
Magic Number,de4dot.code.deobfuscators.Agile_NET.vm.v2,Csvm,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\v2\Csvm.cs,FindVmAssemblyRef,The following statement contains a magic number: sig.Params.Count != 2
Magic Number,de4dot.code.deobfuscators.Agile_NET.vm.v2,CsvmInfo,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\v2\CsvmInfo.cs,FindVmHandlerBase,The following statement contains a magic number: CountVirtual(type) != 2
Magic Number,de4dot.code.deobfuscators.Agile_NET.vm.v2,CsvmInfo,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\v2\CsvmInfo.cs,FindLocalOpsMethods,The following statement contains a magic number: type.Methods.Count != 6 && type.Methods.Count != 7
Magic Number,de4dot.code.deobfuscators.Agile_NET.vm.v2,CsvmInfo,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\v2\CsvmInfo.cs,FindLocalOpsMethods,The following statement contains a magic number: type.Methods.Count != 6 && type.Methods.Count != 7
Magic Number,de4dot.code.deobfuscators.Agile_NET.vm.v2,CsvmInfo,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\v2\CsvmInfo.cs,FindLogicalOpMethod,The following statement contains a magic number: var ldarg1 = instrs[i + 2];
Magic Number,de4dot.code.deobfuscators.Agile_NET.vm.v2,CsvmInfo,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\v2\CsvmInfo.cs,FindLogicalOpMethod,The following statement contains a magic number: !CheckUnboxAny(instrs[i + 3]' e2)
Magic Number,de4dot.code.deobfuscators.Agile_NET.vm.v2,CsvmInfo,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\v2\CsvmInfo.cs,FindLogicalOpMethod,The following statement contains a magic number: var ldci4 = instrs[i + 4];
Magic Number,de4dot.code.deobfuscators.Agile_NET.vm.v2,CsvmInfo,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\v2\CsvmInfo.cs,FindLogicalOpMethod,The following statement contains a magic number: instrs[i + 5].OpCode.Code != Code.And
Magic Number,de4dot.code.deobfuscators.Agile_NET.vm.v2,CsvmInfo,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\v2\CsvmInfo.cs,FindLogicalOpMethod,The following statement contains a magic number: instrs[i + 6].OpCode.Code != code
Magic Number,de4dot.code.deobfuscators.Agile_NET.vm.v2,CsvmInfo,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\v2\CsvmInfo.cs,FindLogicalOpMethod,The following statement contains a magic number: !CheckBox(instrs[i + 7]' e3)
Magic Number,de4dot.code.deobfuscators.Agile_NET.vm.v2,CsvmInfo,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\v2\CsvmInfo.cs,FindLogicalOpMethod,The following statement contains a magic number: i < instrs.Count - 7
Magic Number,de4dot.code.deobfuscators.Agile_NET.vm.v2,CsvmInfo,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\v2\CsvmInfo.cs,FindLogicalOpMethod,The following statement contains a magic number: var ldarg1 = instrs[i + 2];
Magic Number,de4dot.code.deobfuscators.Agile_NET.vm.v2,CsvmInfo,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\v2\CsvmInfo.cs,FindLogicalOpMethod,The following statement contains a magic number: !CheckUnboxAny(instrs[i + 3]' ElementType.I4)
Magic Number,de4dot.code.deobfuscators.Agile_NET.vm.v2,CsvmInfo,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\v2\CsvmInfo.cs,FindLogicalOpMethod,The following statement contains a magic number: instrs[i + 4].OpCode.Code != code
Magic Number,de4dot.code.deobfuscators.Agile_NET.vm.v2,CsvmInfo,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\v2\CsvmInfo.cs,FindLogicalOpMethod,The following statement contains a magic number: !CheckBox(instrs[i + 5]' ElementType.I4)
Magic Number,de4dot.code.deobfuscators.Agile_NET.vm.v2,CsvmInfo,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\v2\CsvmInfo.cs,FindLogicalOpMethod,The following statement contains a magic number: i < instrs.Count - 5
Magic Number,de4dot.code.deobfuscators.Agile_NET.vm.v2,CsvmInfo,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\v2\CsvmInfo.cs,FindComparerMethods,The following statement contains a magic number: type.Methods.Count != 9
Magic Number,de4dot.code.deobfuscators.Agile_NET.vm.v2,CsvmInfo,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\v2\CsvmInfo.cs,FindCompareMethod,The following statement contains a magic number: int end = instrs.Count - 6;
Magic Number,de4dot.code.deobfuscators.Agile_NET.vm.v2,CsvmInfo,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\v2\CsvmInfo.cs,FindCompareMethod,The following statement contains a magic number: end -= 2;
Magic Number,de4dot.code.deobfuscators.Agile_NET.vm.v2,CsvmInfo,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\v2\CsvmInfo.cs,CheckCompareMethodSig,The following statement contains a magic number: sig == null || sig.GetParamCount() != 3
Magic Number,de4dot.code.deobfuscators.Agile_NET.vm.v2,CsvmInfo,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\v2\CsvmInfo.cs,CheckCompareMethodSig,The following statement contains a magic number: var arg2 = sig.Params[2] as ValueTypeSig;
Magic Number,de4dot.code.deobfuscators.Agile_NET.vm.v2,CsvmInfo,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\v2\CsvmInfo.cs,FindCompareEq,The following statement contains a magic number: var ldarg1 = instrs[i + 2];
Magic Number,de4dot.code.deobfuscators.Agile_NET.vm.v2,CsvmInfo,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\v2\CsvmInfo.cs,FindCompareEq,The following statement contains a magic number: !CheckUnboxAny(instrs[i + 3]' ElementType.I4)
Magic Number,de4dot.code.deobfuscators.Agile_NET.vm.v2,CsvmInfo,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\v2\CsvmInfo.cs,FindCompareEq,The following statement contains a magic number: instrs[i + 4].OpCode.Code != Code.Ceq
Magic Number,de4dot.code.deobfuscators.Agile_NET.vm.v2,CsvmInfo,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\v2\CsvmInfo.cs,FindCompareEq,The following statement contains a magic number: !instrs[i + 5].IsStloc()
Magic Number,de4dot.code.deobfuscators.Agile_NET.vm.v2,CsvmInfo,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\v2\CsvmInfo.cs,FindCompareEq,The following statement contains a magic number: i < instrs.Count - 5
Magic Number,de4dot.code.deobfuscators.Agile_NET.vm.v2,CsvmInfo,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\v2\CsvmInfo.cs,FindCompareEqz,The following statement contains a magic number: var ldci4 = instrs[i + 2];
Magic Number,de4dot.code.deobfuscators.Agile_NET.vm.v2,CsvmInfo,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\v2\CsvmInfo.cs,FindCompareEqz,The following statement contains a magic number: instrs[i + 3].OpCode.Code != Code.Ceq
Magic Number,de4dot.code.deobfuscators.Agile_NET.vm.v2,CsvmInfo,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\v2\CsvmInfo.cs,FindCompareEqz,The following statement contains a magic number: !instrs[i + 4].IsStloc()
Magic Number,de4dot.code.deobfuscators.Agile_NET.vm.v2,CsvmInfo,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\v2\CsvmInfo.cs,FindCompareEqz,The following statement contains a magic number: i < instrs.Count - 4
Magic Number,de4dot.code.deobfuscators.Agile_NET.vm.v2,CsvmInfo,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\v2\CsvmInfo.cs,FindArithmeticMethods,The following statement contains a magic number: type.Methods.Count != 15
Magic Number,de4dot.code.deobfuscators.Agile_NET.vm.v2,CsvmInfo,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\v2\CsvmInfo.cs,FindArithmeticOpUn,The following statement contains a magic number: instrs[i + 2].OpCode.Code != Code.Conv_Ovf_U4
Magic Number,de4dot.code.deobfuscators.Agile_NET.vm.v2,CsvmInfo,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\v2\CsvmInfo.cs,FindArithmeticOpUn,The following statement contains a magic number: var ldarg1 = instrs[i + 3];
Magic Number,de4dot.code.deobfuscators.Agile_NET.vm.v2,CsvmInfo,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\v2\CsvmInfo.cs,FindArithmeticOpUn,The following statement contains a magic number: !CheckCallvirt(instrs[i + 4]' "System.Int32"' "()")
Magic Number,de4dot.code.deobfuscators.Agile_NET.vm.v2,CsvmInfo,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\v2\CsvmInfo.cs,FindArithmeticOpUn,The following statement contains a magic number: instrs[i + 5].OpCode.Code != Code.Conv_Ovf_U4
Magic Number,de4dot.code.deobfuscators.Agile_NET.vm.v2,CsvmInfo,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\v2\CsvmInfo.cs,FindArithmeticOpUn,The following statement contains a magic number: instrs[i + 6].OpCode.Code != code
Magic Number,de4dot.code.deobfuscators.Agile_NET.vm.v2,CsvmInfo,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\v2\CsvmInfo.cs,FindArithmeticOpUn,The following statement contains a magic number: !CheckBox(instrs[i + 7]' ElementType.U4)
Magic Number,de4dot.code.deobfuscators.Agile_NET.vm.v2,CsvmInfo,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\v2\CsvmInfo.cs,FindArithmeticOpUn,The following statement contains a magic number: !instrs[i + 8].IsStloc()
Magic Number,de4dot.code.deobfuscators.Agile_NET.vm.v2,CsvmInfo,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\v2\CsvmInfo.cs,FindArithmeticOpUn,The following statement contains a magic number: i < instrs.Count - 8
Magic Number,de4dot.code.deobfuscators.Agile_NET.vm.v2,CsvmInfo,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\v2\CsvmInfo.cs,FindArithmeticDivOrRemUn,The following statement contains a magic number: var ldarg1 = instrs[i + 2];
Magic Number,de4dot.code.deobfuscators.Agile_NET.vm.v2,CsvmInfo,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\v2\CsvmInfo.cs,FindArithmeticDivOrRemUn,The following statement contains a magic number: !CheckCallvirt(instrs[i + 3]' "System.Int32"' "()")
Magic Number,de4dot.code.deobfuscators.Agile_NET.vm.v2,CsvmInfo,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\v2\CsvmInfo.cs,FindArithmeticDivOrRemUn,The following statement contains a magic number: instrs[i + 4].OpCode.Code != code
Magic Number,de4dot.code.deobfuscators.Agile_NET.vm.v2,CsvmInfo,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\v2\CsvmInfo.cs,FindArithmeticDivOrRemUn,The following statement contains a magic number: !CheckBox(instrs[i + 5]' ElementType.U4)
Magic Number,de4dot.code.deobfuscators.Agile_NET.vm.v2,CsvmInfo,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\v2\CsvmInfo.cs,FindArithmeticDivOrRemUn,The following statement contains a magic number: !instrs[i + 6].IsStloc()
Magic Number,de4dot.code.deobfuscators.Agile_NET.vm.v2,CsvmInfo,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\v2\CsvmInfo.cs,FindArithmeticDivOrRemUn,The following statement contains a magic number: i < instrs.Count - 7
Magic Number,de4dot.code.deobfuscators.Agile_NET.vm.v2,CsvmInfo,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\v2\CsvmInfo.cs,FindArithmeticOther,The following statement contains a magic number: var ldarg1 = instrs[i + 2];
Magic Number,de4dot.code.deobfuscators.Agile_NET.vm.v2,CsvmInfo,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\v2\CsvmInfo.cs,FindArithmeticOther,The following statement contains a magic number: !CheckUnboxAny(instrs[i + 3]' ElementType.I4)
Magic Number,de4dot.code.deobfuscators.Agile_NET.vm.v2,CsvmInfo,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\v2\CsvmInfo.cs,FindArithmeticOther,The following statement contains a magic number: instrs[i + 4].OpCode.Code != code
Magic Number,de4dot.code.deobfuscators.Agile_NET.vm.v2,CsvmInfo,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\v2\CsvmInfo.cs,FindArithmeticOther,The following statement contains a magic number: !CheckBox(instrs[i + 5]' ElementType.I4)
Magic Number,de4dot.code.deobfuscators.Agile_NET.vm.v2,CsvmInfo,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\v2\CsvmInfo.cs,FindArithmeticOther,The following statement contains a magic number: i < instrs.Count - 6
Magic Number,de4dot.code.deobfuscators.Agile_NET.vm.v2,CsvmInfo,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\v2\CsvmInfo.cs,FindUnaryOpMethod1,The following statement contains a magic number: type.Methods.Count != 4
Magic Number,de4dot.code.deobfuscators.Agile_NET.vm.v2,CsvmInfo,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\v2\CsvmInfo.cs,FindUnaryOpMethod2,The following statement contains a magic number: type.Methods.Count != 3
Magic Number,de4dot.code.deobfuscators.Agile_NET.vm.v2,CsvmInfo,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\v2\CsvmInfo.cs,IsUnsaryMethod,The following statement contains a magic number: instrs[i + 2].OpCode.Code != code
Magic Number,de4dot.code.deobfuscators.Agile_NET.vm.v2,CsvmInfo,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\v2\CsvmInfo.cs,IsUnsaryMethod,The following statement contains a magic number: !CheckBox(instrs[i + 3]' ElementType.I4)
Magic Number,de4dot.code.deobfuscators.Agile_NET.vm.v2,CsvmInfo,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\v2\CsvmInfo.cs,IsUnsaryMethod,The following statement contains a magic number: !instrs[i + 4].IsStloc()
Magic Number,de4dot.code.deobfuscators.Agile_NET.vm.v2,CsvmInfo,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\v2\CsvmInfo.cs,IsUnsaryMethod,The following statement contains a magic number: i < instrs.Count - 4
Magic Number,de4dot.code.deobfuscators.Agile_NET.vm.v2,CsvmInfo,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\v2\CsvmInfo.cs,FindArgsLocals,The following statement contains a magic number: return FindArgsLocals(ctor' 1' out ArgsGet' out ArgsSet) &&  				FindArgsLocals(ctor' 2' out LocalsGet' out LocalsSet);
Magic Number,de4dot.code.deobfuscators.Agile_NET.vm.v2,CsvmInfo,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\v2\CsvmInfo.cs,FindVmState,The following statement contains a magic number: method.Parameters.Count != 2
Magic Number,de4dot.code.deobfuscators.Agile_NET.vm.v2,SigCreator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\v2\SigCreator.cs,CalculateHash,The following statement contains a magic number: switch (instr.OpCode.Code) {  			case Code.Beq:  			case Code.Beq_S:  				return GetHash(BASE_INDEX + 0);    			case Code.Bge:  			case Code.Bge_S:  				return GetHash(BASE_INDEX + 1);    			case Code.Bge_Un:  			case Code.Bge_Un_S:  				return GetHash(BASE_INDEX + 2);    			case Code.Bgt:  			case Code.Bgt_S:  				return GetHash(BASE_INDEX + 3);    			case Code.Bgt_Un:  			case Code.Bgt_Un_S:  				return GetHash(BASE_INDEX + 4);    			case Code.Ble:  			case Code.Ble_S:  				return GetHash(BASE_INDEX + 5);    			case Code.Ble_Un:  			case Code.Ble_Un_S:  				return GetHash(BASE_INDEX + 6);    			case Code.Blt:  			case Code.Blt_S:  				return GetHash(BASE_INDEX + 7);    			case Code.Blt_Un:  			case Code.Blt_Un_S:  				return GetHash(BASE_INDEX + 8);    			case Code.Bne_Un:  			case Code.Bne_Un_S:  				return GetHash(BASE_INDEX + 9);    			case Code.Brfalse:  			case Code.Brfalse_S:  				return GetHash(BASE_INDEX + 10);    			case Code.Brtrue:  			case Code.Brtrue_S:  				return GetHash(BASE_INDEX + 11);    			case Code.Switch:  				return GetHash(BASE_INDEX + 12);    			case Code.Ceq:  				return GetHash(BASE_INDEX + 13);    			case Code.Cgt:  				return GetHash(BASE_INDEX + 14);    			case Code.Cgt_Un:  				return GetHash(BASE_INDEX + 15);    			case Code.Clt:  				return GetHash(BASE_INDEX + 16);    			case Code.Clt_Un:  				return GetHash(BASE_INDEX + 17);    			case Code.Ldc_I4:  			case Code.Ldc_I4_0:  			case Code.Ldc_I4_1:  			case Code.Ldc_I4_2:  			case Code.Ldc_I4_3:  			case Code.Ldc_I4_4:  			case Code.Ldc_I4_5:  			case Code.Ldc_I4_6:  			case Code.Ldc_I4_7:  			case Code.Ldc_I4_8:  			case Code.Ldc_I4_M1:  			case Code.Ldc_I4_S:  				return GetHash(instr.GetLdcI4Value());    			case Code.Ldstr:  				return GetHash(instr.Operand as string);    			case Code.Rethrow:  				return GetHash(BASE_INDEX + 18);    			case Code.Throw:  				return GetHash(BASE_INDEX + 19);    			case Code.Call:  			case Code.Callvirt:  				Hash(instr.Operand);  				return (BlockElementHash)hasher.GetHash();    			case Code.Ldfld:  				var field = instr.Operand as FieldDef;  				if (!IsTypeField(field))  					return null;  				if (index + 1 >= instrs.Count || !instrs[index + 1].IsLdcI4())  					return null;  				index++;  				return GetHash(GetFieldId(field));    			default:  				break;  			}
Magic Number,de4dot.code.deobfuscators.Agile_NET.vm.v2,SigCreator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\v2\SigCreator.cs,CalculateHash,The following statement contains a magic number: switch (instr.OpCode.Code) {  			case Code.Beq:  			case Code.Beq_S:  				return GetHash(BASE_INDEX + 0);    			case Code.Bge:  			case Code.Bge_S:  				return GetHash(BASE_INDEX + 1);    			case Code.Bge_Un:  			case Code.Bge_Un_S:  				return GetHash(BASE_INDEX + 2);    			case Code.Bgt:  			case Code.Bgt_S:  				return GetHash(BASE_INDEX + 3);    			case Code.Bgt_Un:  			case Code.Bgt_Un_S:  				return GetHash(BASE_INDEX + 4);    			case Code.Ble:  			case Code.Ble_S:  				return GetHash(BASE_INDEX + 5);    			case Code.Ble_Un:  			case Code.Ble_Un_S:  				return GetHash(BASE_INDEX + 6);    			case Code.Blt:  			case Code.Blt_S:  				return GetHash(BASE_INDEX + 7);    			case Code.Blt_Un:  			case Code.Blt_Un_S:  				return GetHash(BASE_INDEX + 8);    			case Code.Bne_Un:  			case Code.Bne_Un_S:  				return GetHash(BASE_INDEX + 9);    			case Code.Brfalse:  			case Code.Brfalse_S:  				return GetHash(BASE_INDEX + 10);    			case Code.Brtrue:  			case Code.Brtrue_S:  				return GetHash(BASE_INDEX + 11);    			case Code.Switch:  				return GetHash(BASE_INDEX + 12);    			case Code.Ceq:  				return GetHash(BASE_INDEX + 13);    			case Code.Cgt:  				return GetHash(BASE_INDEX + 14);    			case Code.Cgt_Un:  				return GetHash(BASE_INDEX + 15);    			case Code.Clt:  				return GetHash(BASE_INDEX + 16);    			case Code.Clt_Un:  				return GetHash(BASE_INDEX + 17);    			case Code.Ldc_I4:  			case Code.Ldc_I4_0:  			case Code.Ldc_I4_1:  			case Code.Ldc_I4_2:  			case Code.Ldc_I4_3:  			case Code.Ldc_I4_4:  			case Code.Ldc_I4_5:  			case Code.Ldc_I4_6:  			case Code.Ldc_I4_7:  			case Code.Ldc_I4_8:  			case Code.Ldc_I4_M1:  			case Code.Ldc_I4_S:  				return GetHash(instr.GetLdcI4Value());    			case Code.Ldstr:  				return GetHash(instr.Operand as string);    			case Code.Rethrow:  				return GetHash(BASE_INDEX + 18);    			case Code.Throw:  				return GetHash(BASE_INDEX + 19);    			case Code.Call:  			case Code.Callvirt:  				Hash(instr.Operand);  				return (BlockElementHash)hasher.GetHash();    			case Code.Ldfld:  				var field = instr.Operand as FieldDef;  				if (!IsTypeField(field))  					return null;  				if (index + 1 >= instrs.Count || !instrs[index + 1].IsLdcI4())  					return null;  				index++;  				return GetHash(GetFieldId(field));    			default:  				break;  			}
Magic Number,de4dot.code.deobfuscators.Agile_NET.vm.v2,SigCreator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\v2\SigCreator.cs,CalculateHash,The following statement contains a magic number: switch (instr.OpCode.Code) {  			case Code.Beq:  			case Code.Beq_S:  				return GetHash(BASE_INDEX + 0);    			case Code.Bge:  			case Code.Bge_S:  				return GetHash(BASE_INDEX + 1);    			case Code.Bge_Un:  			case Code.Bge_Un_S:  				return GetHash(BASE_INDEX + 2);    			case Code.Bgt:  			case Code.Bgt_S:  				return GetHash(BASE_INDEX + 3);    			case Code.Bgt_Un:  			case Code.Bgt_Un_S:  				return GetHash(BASE_INDEX + 4);    			case Code.Ble:  			case Code.Ble_S:  				return GetHash(BASE_INDEX + 5);    			case Code.Ble_Un:  			case Code.Ble_Un_S:  				return GetHash(BASE_INDEX + 6);    			case Code.Blt:  			case Code.Blt_S:  				return GetHash(BASE_INDEX + 7);    			case Code.Blt_Un:  			case Code.Blt_Un_S:  				return GetHash(BASE_INDEX + 8);    			case Code.Bne_Un:  			case Code.Bne_Un_S:  				return GetHash(BASE_INDEX + 9);    			case Code.Brfalse:  			case Code.Brfalse_S:  				return GetHash(BASE_INDEX + 10);    			case Code.Brtrue:  			case Code.Brtrue_S:  				return GetHash(BASE_INDEX + 11);    			case Code.Switch:  				return GetHash(BASE_INDEX + 12);    			case Code.Ceq:  				return GetHash(BASE_INDEX + 13);    			case Code.Cgt:  				return GetHash(BASE_INDEX + 14);    			case Code.Cgt_Un:  				return GetHash(BASE_INDEX + 15);    			case Code.Clt:  				return GetHash(BASE_INDEX + 16);    			case Code.Clt_Un:  				return GetHash(BASE_INDEX + 17);    			case Code.Ldc_I4:  			case Code.Ldc_I4_0:  			case Code.Ldc_I4_1:  			case Code.Ldc_I4_2:  			case Code.Ldc_I4_3:  			case Code.Ldc_I4_4:  			case Code.Ldc_I4_5:  			case Code.Ldc_I4_6:  			case Code.Ldc_I4_7:  			case Code.Ldc_I4_8:  			case Code.Ldc_I4_M1:  			case Code.Ldc_I4_S:  				return GetHash(instr.GetLdcI4Value());    			case Code.Ldstr:  				return GetHash(instr.Operand as string);    			case Code.Rethrow:  				return GetHash(BASE_INDEX + 18);    			case Code.Throw:  				return GetHash(BASE_INDEX + 19);    			case Code.Call:  			case Code.Callvirt:  				Hash(instr.Operand);  				return (BlockElementHash)hasher.GetHash();    			case Code.Ldfld:  				var field = instr.Operand as FieldDef;  				if (!IsTypeField(field))  					return null;  				if (index + 1 >= instrs.Count || !instrs[index + 1].IsLdcI4())  					return null;  				index++;  				return GetHash(GetFieldId(field));    			default:  				break;  			}
Magic Number,de4dot.code.deobfuscators.Agile_NET.vm.v2,SigCreator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\v2\SigCreator.cs,CalculateHash,The following statement contains a magic number: switch (instr.OpCode.Code) {  			case Code.Beq:  			case Code.Beq_S:  				return GetHash(BASE_INDEX + 0);    			case Code.Bge:  			case Code.Bge_S:  				return GetHash(BASE_INDEX + 1);    			case Code.Bge_Un:  			case Code.Bge_Un_S:  				return GetHash(BASE_INDEX + 2);    			case Code.Bgt:  			case Code.Bgt_S:  				return GetHash(BASE_INDEX + 3);    			case Code.Bgt_Un:  			case Code.Bgt_Un_S:  				return GetHash(BASE_INDEX + 4);    			case Code.Ble:  			case Code.Ble_S:  				return GetHash(BASE_INDEX + 5);    			case Code.Ble_Un:  			case Code.Ble_Un_S:  				return GetHash(BASE_INDEX + 6);    			case Code.Blt:  			case Code.Blt_S:  				return GetHash(BASE_INDEX + 7);    			case Code.Blt_Un:  			case Code.Blt_Un_S:  				return GetHash(BASE_INDEX + 8);    			case Code.Bne_Un:  			case Code.Bne_Un_S:  				return GetHash(BASE_INDEX + 9);    			case Code.Brfalse:  			case Code.Brfalse_S:  				return GetHash(BASE_INDEX + 10);    			case Code.Brtrue:  			case Code.Brtrue_S:  				return GetHash(BASE_INDEX + 11);    			case Code.Switch:  				return GetHash(BASE_INDEX + 12);    			case Code.Ceq:  				return GetHash(BASE_INDEX + 13);    			case Code.Cgt:  				return GetHash(BASE_INDEX + 14);    			case Code.Cgt_Un:  				return GetHash(BASE_INDEX + 15);    			case Code.Clt:  				return GetHash(BASE_INDEX + 16);    			case Code.Clt_Un:  				return GetHash(BASE_INDEX + 17);    			case Code.Ldc_I4:  			case Code.Ldc_I4_0:  			case Code.Ldc_I4_1:  			case Code.Ldc_I4_2:  			case Code.Ldc_I4_3:  			case Code.Ldc_I4_4:  			case Code.Ldc_I4_5:  			case Code.Ldc_I4_6:  			case Code.Ldc_I4_7:  			case Code.Ldc_I4_8:  			case Code.Ldc_I4_M1:  			case Code.Ldc_I4_S:  				return GetHash(instr.GetLdcI4Value());    			case Code.Ldstr:  				return GetHash(instr.Operand as string);    			case Code.Rethrow:  				return GetHash(BASE_INDEX + 18);    			case Code.Throw:  				return GetHash(BASE_INDEX + 19);    			case Code.Call:  			case Code.Callvirt:  				Hash(instr.Operand);  				return (BlockElementHash)hasher.GetHash();    			case Code.Ldfld:  				var field = instr.Operand as FieldDef;  				if (!IsTypeField(field))  					return null;  				if (index + 1 >= instrs.Count || !instrs[index + 1].IsLdcI4())  					return null;  				index++;  				return GetHash(GetFieldId(field));    			default:  				break;  			}
Magic Number,de4dot.code.deobfuscators.Agile_NET.vm.v2,SigCreator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\v2\SigCreator.cs,CalculateHash,The following statement contains a magic number: switch (instr.OpCode.Code) {  			case Code.Beq:  			case Code.Beq_S:  				return GetHash(BASE_INDEX + 0);    			case Code.Bge:  			case Code.Bge_S:  				return GetHash(BASE_INDEX + 1);    			case Code.Bge_Un:  			case Code.Bge_Un_S:  				return GetHash(BASE_INDEX + 2);    			case Code.Bgt:  			case Code.Bgt_S:  				return GetHash(BASE_INDEX + 3);    			case Code.Bgt_Un:  			case Code.Bgt_Un_S:  				return GetHash(BASE_INDEX + 4);    			case Code.Ble:  			case Code.Ble_S:  				return GetHash(BASE_INDEX + 5);    			case Code.Ble_Un:  			case Code.Ble_Un_S:  				return GetHash(BASE_INDEX + 6);    			case Code.Blt:  			case Code.Blt_S:  				return GetHash(BASE_INDEX + 7);    			case Code.Blt_Un:  			case Code.Blt_Un_S:  				return GetHash(BASE_INDEX + 8);    			case Code.Bne_Un:  			case Code.Bne_Un_S:  				return GetHash(BASE_INDEX + 9);    			case Code.Brfalse:  			case Code.Brfalse_S:  				return GetHash(BASE_INDEX + 10);    			case Code.Brtrue:  			case Code.Brtrue_S:  				return GetHash(BASE_INDEX + 11);    			case Code.Switch:  				return GetHash(BASE_INDEX + 12);    			case Code.Ceq:  				return GetHash(BASE_INDEX + 13);    			case Code.Cgt:  				return GetHash(BASE_INDEX + 14);    			case Code.Cgt_Un:  				return GetHash(BASE_INDEX + 15);    			case Code.Clt:  				return GetHash(BASE_INDEX + 16);    			case Code.Clt_Un:  				return GetHash(BASE_INDEX + 17);    			case Code.Ldc_I4:  			case Code.Ldc_I4_0:  			case Code.Ldc_I4_1:  			case Code.Ldc_I4_2:  			case Code.Ldc_I4_3:  			case Code.Ldc_I4_4:  			case Code.Ldc_I4_5:  			case Code.Ldc_I4_6:  			case Code.Ldc_I4_7:  			case Code.Ldc_I4_8:  			case Code.Ldc_I4_M1:  			case Code.Ldc_I4_S:  				return GetHash(instr.GetLdcI4Value());    			case Code.Ldstr:  				return GetHash(instr.Operand as string);    			case Code.Rethrow:  				return GetHash(BASE_INDEX + 18);    			case Code.Throw:  				return GetHash(BASE_INDEX + 19);    			case Code.Call:  			case Code.Callvirt:  				Hash(instr.Operand);  				return (BlockElementHash)hasher.GetHash();    			case Code.Ldfld:  				var field = instr.Operand as FieldDef;  				if (!IsTypeField(field))  					return null;  				if (index + 1 >= instrs.Count || !instrs[index + 1].IsLdcI4())  					return null;  				index++;  				return GetHash(GetFieldId(field));    			default:  				break;  			}
Magic Number,de4dot.code.deobfuscators.Agile_NET.vm.v2,SigCreator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\v2\SigCreator.cs,CalculateHash,The following statement contains a magic number: switch (instr.OpCode.Code) {  			case Code.Beq:  			case Code.Beq_S:  				return GetHash(BASE_INDEX + 0);    			case Code.Bge:  			case Code.Bge_S:  				return GetHash(BASE_INDEX + 1);    			case Code.Bge_Un:  			case Code.Bge_Un_S:  				return GetHash(BASE_INDEX + 2);    			case Code.Bgt:  			case Code.Bgt_S:  				return GetHash(BASE_INDEX + 3);    			case Code.Bgt_Un:  			case Code.Bgt_Un_S:  				return GetHash(BASE_INDEX + 4);    			case Code.Ble:  			case Code.Ble_S:  				return GetHash(BASE_INDEX + 5);    			case Code.Ble_Un:  			case Code.Ble_Un_S:  				return GetHash(BASE_INDEX + 6);    			case Code.Blt:  			case Code.Blt_S:  				return GetHash(BASE_INDEX + 7);    			case Code.Blt_Un:  			case Code.Blt_Un_S:  				return GetHash(BASE_INDEX + 8);    			case Code.Bne_Un:  			case Code.Bne_Un_S:  				return GetHash(BASE_INDEX + 9);    			case Code.Brfalse:  			case Code.Brfalse_S:  				return GetHash(BASE_INDEX + 10);    			case Code.Brtrue:  			case Code.Brtrue_S:  				return GetHash(BASE_INDEX + 11);    			case Code.Switch:  				return GetHash(BASE_INDEX + 12);    			case Code.Ceq:  				return GetHash(BASE_INDEX + 13);    			case Code.Cgt:  				return GetHash(BASE_INDEX + 14);    			case Code.Cgt_Un:  				return GetHash(BASE_INDEX + 15);    			case Code.Clt:  				return GetHash(BASE_INDEX + 16);    			case Code.Clt_Un:  				return GetHash(BASE_INDEX + 17);    			case Code.Ldc_I4:  			case Code.Ldc_I4_0:  			case Code.Ldc_I4_1:  			case Code.Ldc_I4_2:  			case Code.Ldc_I4_3:  			case Code.Ldc_I4_4:  			case Code.Ldc_I4_5:  			case Code.Ldc_I4_6:  			case Code.Ldc_I4_7:  			case Code.Ldc_I4_8:  			case Code.Ldc_I4_M1:  			case Code.Ldc_I4_S:  				return GetHash(instr.GetLdcI4Value());    			case Code.Ldstr:  				return GetHash(instr.Operand as string);    			case Code.Rethrow:  				return GetHash(BASE_INDEX + 18);    			case Code.Throw:  				return GetHash(BASE_INDEX + 19);    			case Code.Call:  			case Code.Callvirt:  				Hash(instr.Operand);  				return (BlockElementHash)hasher.GetHash();    			case Code.Ldfld:  				var field = instr.Operand as FieldDef;  				if (!IsTypeField(field))  					return null;  				if (index + 1 >= instrs.Count || !instrs[index + 1].IsLdcI4())  					return null;  				index++;  				return GetHash(GetFieldId(field));    			default:  				break;  			}
Magic Number,de4dot.code.deobfuscators.Agile_NET.vm.v2,SigCreator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\v2\SigCreator.cs,CalculateHash,The following statement contains a magic number: switch (instr.OpCode.Code) {  			case Code.Beq:  			case Code.Beq_S:  				return GetHash(BASE_INDEX + 0);    			case Code.Bge:  			case Code.Bge_S:  				return GetHash(BASE_INDEX + 1);    			case Code.Bge_Un:  			case Code.Bge_Un_S:  				return GetHash(BASE_INDEX + 2);    			case Code.Bgt:  			case Code.Bgt_S:  				return GetHash(BASE_INDEX + 3);    			case Code.Bgt_Un:  			case Code.Bgt_Un_S:  				return GetHash(BASE_INDEX + 4);    			case Code.Ble:  			case Code.Ble_S:  				return GetHash(BASE_INDEX + 5);    			case Code.Ble_Un:  			case Code.Ble_Un_S:  				return GetHash(BASE_INDEX + 6);    			case Code.Blt:  			case Code.Blt_S:  				return GetHash(BASE_INDEX + 7);    			case Code.Blt_Un:  			case Code.Blt_Un_S:  				return GetHash(BASE_INDEX + 8);    			case Code.Bne_Un:  			case Code.Bne_Un_S:  				return GetHash(BASE_INDEX + 9);    			case Code.Brfalse:  			case Code.Brfalse_S:  				return GetHash(BASE_INDEX + 10);    			case Code.Brtrue:  			case Code.Brtrue_S:  				return GetHash(BASE_INDEX + 11);    			case Code.Switch:  				return GetHash(BASE_INDEX + 12);    			case Code.Ceq:  				return GetHash(BASE_INDEX + 13);    			case Code.Cgt:  				return GetHash(BASE_INDEX + 14);    			case Code.Cgt_Un:  				return GetHash(BASE_INDEX + 15);    			case Code.Clt:  				return GetHash(BASE_INDEX + 16);    			case Code.Clt_Un:  				return GetHash(BASE_INDEX + 17);    			case Code.Ldc_I4:  			case Code.Ldc_I4_0:  			case Code.Ldc_I4_1:  			case Code.Ldc_I4_2:  			case Code.Ldc_I4_3:  			case Code.Ldc_I4_4:  			case Code.Ldc_I4_5:  			case Code.Ldc_I4_6:  			case Code.Ldc_I4_7:  			case Code.Ldc_I4_8:  			case Code.Ldc_I4_M1:  			case Code.Ldc_I4_S:  				return GetHash(instr.GetLdcI4Value());    			case Code.Ldstr:  				return GetHash(instr.Operand as string);    			case Code.Rethrow:  				return GetHash(BASE_INDEX + 18);    			case Code.Throw:  				return GetHash(BASE_INDEX + 19);    			case Code.Call:  			case Code.Callvirt:  				Hash(instr.Operand);  				return (BlockElementHash)hasher.GetHash();    			case Code.Ldfld:  				var field = instr.Operand as FieldDef;  				if (!IsTypeField(field))  					return null;  				if (index + 1 >= instrs.Count || !instrs[index + 1].IsLdcI4())  					return null;  				index++;  				return GetHash(GetFieldId(field));    			default:  				break;  			}
Magic Number,de4dot.code.deobfuscators.Agile_NET.vm.v2,SigCreator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\v2\SigCreator.cs,CalculateHash,The following statement contains a magic number: switch (instr.OpCode.Code) {  			case Code.Beq:  			case Code.Beq_S:  				return GetHash(BASE_INDEX + 0);    			case Code.Bge:  			case Code.Bge_S:  				return GetHash(BASE_INDEX + 1);    			case Code.Bge_Un:  			case Code.Bge_Un_S:  				return GetHash(BASE_INDEX + 2);    			case Code.Bgt:  			case Code.Bgt_S:  				return GetHash(BASE_INDEX + 3);    			case Code.Bgt_Un:  			case Code.Bgt_Un_S:  				return GetHash(BASE_INDEX + 4);    			case Code.Ble:  			case Code.Ble_S:  				return GetHash(BASE_INDEX + 5);    			case Code.Ble_Un:  			case Code.Ble_Un_S:  				return GetHash(BASE_INDEX + 6);    			case Code.Blt:  			case Code.Blt_S:  				return GetHash(BASE_INDEX + 7);    			case Code.Blt_Un:  			case Code.Blt_Un_S:  				return GetHash(BASE_INDEX + 8);    			case Code.Bne_Un:  			case Code.Bne_Un_S:  				return GetHash(BASE_INDEX + 9);    			case Code.Brfalse:  			case Code.Brfalse_S:  				return GetHash(BASE_INDEX + 10);    			case Code.Brtrue:  			case Code.Brtrue_S:  				return GetHash(BASE_INDEX + 11);    			case Code.Switch:  				return GetHash(BASE_INDEX + 12);    			case Code.Ceq:  				return GetHash(BASE_INDEX + 13);    			case Code.Cgt:  				return GetHash(BASE_INDEX + 14);    			case Code.Cgt_Un:  				return GetHash(BASE_INDEX + 15);    			case Code.Clt:  				return GetHash(BASE_INDEX + 16);    			case Code.Clt_Un:  				return GetHash(BASE_INDEX + 17);    			case Code.Ldc_I4:  			case Code.Ldc_I4_0:  			case Code.Ldc_I4_1:  			case Code.Ldc_I4_2:  			case Code.Ldc_I4_3:  			case Code.Ldc_I4_4:  			case Code.Ldc_I4_5:  			case Code.Ldc_I4_6:  			case Code.Ldc_I4_7:  			case Code.Ldc_I4_8:  			case Code.Ldc_I4_M1:  			case Code.Ldc_I4_S:  				return GetHash(instr.GetLdcI4Value());    			case Code.Ldstr:  				return GetHash(instr.Operand as string);    			case Code.Rethrow:  				return GetHash(BASE_INDEX + 18);    			case Code.Throw:  				return GetHash(BASE_INDEX + 19);    			case Code.Call:  			case Code.Callvirt:  				Hash(instr.Operand);  				return (BlockElementHash)hasher.GetHash();    			case Code.Ldfld:  				var field = instr.Operand as FieldDef;  				if (!IsTypeField(field))  					return null;  				if (index + 1 >= instrs.Count || !instrs[index + 1].IsLdcI4())  					return null;  				index++;  				return GetHash(GetFieldId(field));    			default:  				break;  			}
Magic Number,de4dot.code.deobfuscators.Agile_NET.vm.v2,SigCreator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\v2\SigCreator.cs,CalculateHash,The following statement contains a magic number: switch (instr.OpCode.Code) {  			case Code.Beq:  			case Code.Beq_S:  				return GetHash(BASE_INDEX + 0);    			case Code.Bge:  			case Code.Bge_S:  				return GetHash(BASE_INDEX + 1);    			case Code.Bge_Un:  			case Code.Bge_Un_S:  				return GetHash(BASE_INDEX + 2);    			case Code.Bgt:  			case Code.Bgt_S:  				return GetHash(BASE_INDEX + 3);    			case Code.Bgt_Un:  			case Code.Bgt_Un_S:  				return GetHash(BASE_INDEX + 4);    			case Code.Ble:  			case Code.Ble_S:  				return GetHash(BASE_INDEX + 5);    			case Code.Ble_Un:  			case Code.Ble_Un_S:  				return GetHash(BASE_INDEX + 6);    			case Code.Blt:  			case Code.Blt_S:  				return GetHash(BASE_INDEX + 7);    			case Code.Blt_Un:  			case Code.Blt_Un_S:  				return GetHash(BASE_INDEX + 8);    			case Code.Bne_Un:  			case Code.Bne_Un_S:  				return GetHash(BASE_INDEX + 9);    			case Code.Brfalse:  			case Code.Brfalse_S:  				return GetHash(BASE_INDEX + 10);    			case Code.Brtrue:  			case Code.Brtrue_S:  				return GetHash(BASE_INDEX + 11);    			case Code.Switch:  				return GetHash(BASE_INDEX + 12);    			case Code.Ceq:  				return GetHash(BASE_INDEX + 13);    			case Code.Cgt:  				return GetHash(BASE_INDEX + 14);    			case Code.Cgt_Un:  				return GetHash(BASE_INDEX + 15);    			case Code.Clt:  				return GetHash(BASE_INDEX + 16);    			case Code.Clt_Un:  				return GetHash(BASE_INDEX + 17);    			case Code.Ldc_I4:  			case Code.Ldc_I4_0:  			case Code.Ldc_I4_1:  			case Code.Ldc_I4_2:  			case Code.Ldc_I4_3:  			case Code.Ldc_I4_4:  			case Code.Ldc_I4_5:  			case Code.Ldc_I4_6:  			case Code.Ldc_I4_7:  			case Code.Ldc_I4_8:  			case Code.Ldc_I4_M1:  			case Code.Ldc_I4_S:  				return GetHash(instr.GetLdcI4Value());    			case Code.Ldstr:  				return GetHash(instr.Operand as string);    			case Code.Rethrow:  				return GetHash(BASE_INDEX + 18);    			case Code.Throw:  				return GetHash(BASE_INDEX + 19);    			case Code.Call:  			case Code.Callvirt:  				Hash(instr.Operand);  				return (BlockElementHash)hasher.GetHash();    			case Code.Ldfld:  				var field = instr.Operand as FieldDef;  				if (!IsTypeField(field))  					return null;  				if (index + 1 >= instrs.Count || !instrs[index + 1].IsLdcI4())  					return null;  				index++;  				return GetHash(GetFieldId(field));    			default:  				break;  			}
Magic Number,de4dot.code.deobfuscators.Agile_NET.vm.v2,SigCreator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\v2\SigCreator.cs,CalculateHash,The following statement contains a magic number: switch (instr.OpCode.Code) {  			case Code.Beq:  			case Code.Beq_S:  				return GetHash(BASE_INDEX + 0);    			case Code.Bge:  			case Code.Bge_S:  				return GetHash(BASE_INDEX + 1);    			case Code.Bge_Un:  			case Code.Bge_Un_S:  				return GetHash(BASE_INDEX + 2);    			case Code.Bgt:  			case Code.Bgt_S:  				return GetHash(BASE_INDEX + 3);    			case Code.Bgt_Un:  			case Code.Bgt_Un_S:  				return GetHash(BASE_INDEX + 4);    			case Code.Ble:  			case Code.Ble_S:  				return GetHash(BASE_INDEX + 5);    			case Code.Ble_Un:  			case Code.Ble_Un_S:  				return GetHash(BASE_INDEX + 6);    			case Code.Blt:  			case Code.Blt_S:  				return GetHash(BASE_INDEX + 7);    			case Code.Blt_Un:  			case Code.Blt_Un_S:  				return GetHash(BASE_INDEX + 8);    			case Code.Bne_Un:  			case Code.Bne_Un_S:  				return GetHash(BASE_INDEX + 9);    			case Code.Brfalse:  			case Code.Brfalse_S:  				return GetHash(BASE_INDEX + 10);    			case Code.Brtrue:  			case Code.Brtrue_S:  				return GetHash(BASE_INDEX + 11);    			case Code.Switch:  				return GetHash(BASE_INDEX + 12);    			case Code.Ceq:  				return GetHash(BASE_INDEX + 13);    			case Code.Cgt:  				return GetHash(BASE_INDEX + 14);    			case Code.Cgt_Un:  				return GetHash(BASE_INDEX + 15);    			case Code.Clt:  				return GetHash(BASE_INDEX + 16);    			case Code.Clt_Un:  				return GetHash(BASE_INDEX + 17);    			case Code.Ldc_I4:  			case Code.Ldc_I4_0:  			case Code.Ldc_I4_1:  			case Code.Ldc_I4_2:  			case Code.Ldc_I4_3:  			case Code.Ldc_I4_4:  			case Code.Ldc_I4_5:  			case Code.Ldc_I4_6:  			case Code.Ldc_I4_7:  			case Code.Ldc_I4_8:  			case Code.Ldc_I4_M1:  			case Code.Ldc_I4_S:  				return GetHash(instr.GetLdcI4Value());    			case Code.Ldstr:  				return GetHash(instr.Operand as string);    			case Code.Rethrow:  				return GetHash(BASE_INDEX + 18);    			case Code.Throw:  				return GetHash(BASE_INDEX + 19);    			case Code.Call:  			case Code.Callvirt:  				Hash(instr.Operand);  				return (BlockElementHash)hasher.GetHash();    			case Code.Ldfld:  				var field = instr.Operand as FieldDef;  				if (!IsTypeField(field))  					return null;  				if (index + 1 >= instrs.Count || !instrs[index + 1].IsLdcI4())  					return null;  				index++;  				return GetHash(GetFieldId(field));    			default:  				break;  			}
Magic Number,de4dot.code.deobfuscators.Agile_NET.vm.v2,SigCreator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\v2\SigCreator.cs,CalculateHash,The following statement contains a magic number: switch (instr.OpCode.Code) {  			case Code.Beq:  			case Code.Beq_S:  				return GetHash(BASE_INDEX + 0);    			case Code.Bge:  			case Code.Bge_S:  				return GetHash(BASE_INDEX + 1);    			case Code.Bge_Un:  			case Code.Bge_Un_S:  				return GetHash(BASE_INDEX + 2);    			case Code.Bgt:  			case Code.Bgt_S:  				return GetHash(BASE_INDEX + 3);    			case Code.Bgt_Un:  			case Code.Bgt_Un_S:  				return GetHash(BASE_INDEX + 4);    			case Code.Ble:  			case Code.Ble_S:  				return GetHash(BASE_INDEX + 5);    			case Code.Ble_Un:  			case Code.Ble_Un_S:  				return GetHash(BASE_INDEX + 6);    			case Code.Blt:  			case Code.Blt_S:  				return GetHash(BASE_INDEX + 7);    			case Code.Blt_Un:  			case Code.Blt_Un_S:  				return GetHash(BASE_INDEX + 8);    			case Code.Bne_Un:  			case Code.Bne_Un_S:  				return GetHash(BASE_INDEX + 9);    			case Code.Brfalse:  			case Code.Brfalse_S:  				return GetHash(BASE_INDEX + 10);    			case Code.Brtrue:  			case Code.Brtrue_S:  				return GetHash(BASE_INDEX + 11);    			case Code.Switch:  				return GetHash(BASE_INDEX + 12);    			case Code.Ceq:  				return GetHash(BASE_INDEX + 13);    			case Code.Cgt:  				return GetHash(BASE_INDEX + 14);    			case Code.Cgt_Un:  				return GetHash(BASE_INDEX + 15);    			case Code.Clt:  				return GetHash(BASE_INDEX + 16);    			case Code.Clt_Un:  				return GetHash(BASE_INDEX + 17);    			case Code.Ldc_I4:  			case Code.Ldc_I4_0:  			case Code.Ldc_I4_1:  			case Code.Ldc_I4_2:  			case Code.Ldc_I4_3:  			case Code.Ldc_I4_4:  			case Code.Ldc_I4_5:  			case Code.Ldc_I4_6:  			case Code.Ldc_I4_7:  			case Code.Ldc_I4_8:  			case Code.Ldc_I4_M1:  			case Code.Ldc_I4_S:  				return GetHash(instr.GetLdcI4Value());    			case Code.Ldstr:  				return GetHash(instr.Operand as string);    			case Code.Rethrow:  				return GetHash(BASE_INDEX + 18);    			case Code.Throw:  				return GetHash(BASE_INDEX + 19);    			case Code.Call:  			case Code.Callvirt:  				Hash(instr.Operand);  				return (BlockElementHash)hasher.GetHash();    			case Code.Ldfld:  				var field = instr.Operand as FieldDef;  				if (!IsTypeField(field))  					return null;  				if (index + 1 >= instrs.Count || !instrs[index + 1].IsLdcI4())  					return null;  				index++;  				return GetHash(GetFieldId(field));    			default:  				break;  			}
Magic Number,de4dot.code.deobfuscators.Agile_NET.vm.v2,SigCreator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\v2\SigCreator.cs,CalculateHash,The following statement contains a magic number: switch (instr.OpCode.Code) {  			case Code.Beq:  			case Code.Beq_S:  				return GetHash(BASE_INDEX + 0);    			case Code.Bge:  			case Code.Bge_S:  				return GetHash(BASE_INDEX + 1);    			case Code.Bge_Un:  			case Code.Bge_Un_S:  				return GetHash(BASE_INDEX + 2);    			case Code.Bgt:  			case Code.Bgt_S:  				return GetHash(BASE_INDEX + 3);    			case Code.Bgt_Un:  			case Code.Bgt_Un_S:  				return GetHash(BASE_INDEX + 4);    			case Code.Ble:  			case Code.Ble_S:  				return GetHash(BASE_INDEX + 5);    			case Code.Ble_Un:  			case Code.Ble_Un_S:  				return GetHash(BASE_INDEX + 6);    			case Code.Blt:  			case Code.Blt_S:  				return GetHash(BASE_INDEX + 7);    			case Code.Blt_Un:  			case Code.Blt_Un_S:  				return GetHash(BASE_INDEX + 8);    			case Code.Bne_Un:  			case Code.Bne_Un_S:  				return GetHash(BASE_INDEX + 9);    			case Code.Brfalse:  			case Code.Brfalse_S:  				return GetHash(BASE_INDEX + 10);    			case Code.Brtrue:  			case Code.Brtrue_S:  				return GetHash(BASE_INDEX + 11);    			case Code.Switch:  				return GetHash(BASE_INDEX + 12);    			case Code.Ceq:  				return GetHash(BASE_INDEX + 13);    			case Code.Cgt:  				return GetHash(BASE_INDEX + 14);    			case Code.Cgt_Un:  				return GetHash(BASE_INDEX + 15);    			case Code.Clt:  				return GetHash(BASE_INDEX + 16);    			case Code.Clt_Un:  				return GetHash(BASE_INDEX + 17);    			case Code.Ldc_I4:  			case Code.Ldc_I4_0:  			case Code.Ldc_I4_1:  			case Code.Ldc_I4_2:  			case Code.Ldc_I4_3:  			case Code.Ldc_I4_4:  			case Code.Ldc_I4_5:  			case Code.Ldc_I4_6:  			case Code.Ldc_I4_7:  			case Code.Ldc_I4_8:  			case Code.Ldc_I4_M1:  			case Code.Ldc_I4_S:  				return GetHash(instr.GetLdcI4Value());    			case Code.Ldstr:  				return GetHash(instr.Operand as string);    			case Code.Rethrow:  				return GetHash(BASE_INDEX + 18);    			case Code.Throw:  				return GetHash(BASE_INDEX + 19);    			case Code.Call:  			case Code.Callvirt:  				Hash(instr.Operand);  				return (BlockElementHash)hasher.GetHash();    			case Code.Ldfld:  				var field = instr.Operand as FieldDef;  				if (!IsTypeField(field))  					return null;  				if (index + 1 >= instrs.Count || !instrs[index + 1].IsLdcI4())  					return null;  				index++;  				return GetHash(GetFieldId(field));    			default:  				break;  			}
Magic Number,de4dot.code.deobfuscators.Agile_NET.vm.v2,SigCreator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\v2\SigCreator.cs,CalculateHash,The following statement contains a magic number: switch (instr.OpCode.Code) {  			case Code.Beq:  			case Code.Beq_S:  				return GetHash(BASE_INDEX + 0);    			case Code.Bge:  			case Code.Bge_S:  				return GetHash(BASE_INDEX + 1);    			case Code.Bge_Un:  			case Code.Bge_Un_S:  				return GetHash(BASE_INDEX + 2);    			case Code.Bgt:  			case Code.Bgt_S:  				return GetHash(BASE_INDEX + 3);    			case Code.Bgt_Un:  			case Code.Bgt_Un_S:  				return GetHash(BASE_INDEX + 4);    			case Code.Ble:  			case Code.Ble_S:  				return GetHash(BASE_INDEX + 5);    			case Code.Ble_Un:  			case Code.Ble_Un_S:  				return GetHash(BASE_INDEX + 6);    			case Code.Blt:  			case Code.Blt_S:  				return GetHash(BASE_INDEX + 7);    			case Code.Blt_Un:  			case Code.Blt_Un_S:  				return GetHash(BASE_INDEX + 8);    			case Code.Bne_Un:  			case Code.Bne_Un_S:  				return GetHash(BASE_INDEX + 9);    			case Code.Brfalse:  			case Code.Brfalse_S:  				return GetHash(BASE_INDEX + 10);    			case Code.Brtrue:  			case Code.Brtrue_S:  				return GetHash(BASE_INDEX + 11);    			case Code.Switch:  				return GetHash(BASE_INDEX + 12);    			case Code.Ceq:  				return GetHash(BASE_INDEX + 13);    			case Code.Cgt:  				return GetHash(BASE_INDEX + 14);    			case Code.Cgt_Un:  				return GetHash(BASE_INDEX + 15);    			case Code.Clt:  				return GetHash(BASE_INDEX + 16);    			case Code.Clt_Un:  				return GetHash(BASE_INDEX + 17);    			case Code.Ldc_I4:  			case Code.Ldc_I4_0:  			case Code.Ldc_I4_1:  			case Code.Ldc_I4_2:  			case Code.Ldc_I4_3:  			case Code.Ldc_I4_4:  			case Code.Ldc_I4_5:  			case Code.Ldc_I4_6:  			case Code.Ldc_I4_7:  			case Code.Ldc_I4_8:  			case Code.Ldc_I4_M1:  			case Code.Ldc_I4_S:  				return GetHash(instr.GetLdcI4Value());    			case Code.Ldstr:  				return GetHash(instr.Operand as string);    			case Code.Rethrow:  				return GetHash(BASE_INDEX + 18);    			case Code.Throw:  				return GetHash(BASE_INDEX + 19);    			case Code.Call:  			case Code.Callvirt:  				Hash(instr.Operand);  				return (BlockElementHash)hasher.GetHash();    			case Code.Ldfld:  				var field = instr.Operand as FieldDef;  				if (!IsTypeField(field))  					return null;  				if (index + 1 >= instrs.Count || !instrs[index + 1].IsLdcI4())  					return null;  				index++;  				return GetHash(GetFieldId(field));    			default:  				break;  			}
Magic Number,de4dot.code.deobfuscators.Agile_NET.vm.v2,SigCreator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\v2\SigCreator.cs,CalculateHash,The following statement contains a magic number: switch (instr.OpCode.Code) {  			case Code.Beq:  			case Code.Beq_S:  				return GetHash(BASE_INDEX + 0);    			case Code.Bge:  			case Code.Bge_S:  				return GetHash(BASE_INDEX + 1);    			case Code.Bge_Un:  			case Code.Bge_Un_S:  				return GetHash(BASE_INDEX + 2);    			case Code.Bgt:  			case Code.Bgt_S:  				return GetHash(BASE_INDEX + 3);    			case Code.Bgt_Un:  			case Code.Bgt_Un_S:  				return GetHash(BASE_INDEX + 4);    			case Code.Ble:  			case Code.Ble_S:  				return GetHash(BASE_INDEX + 5);    			case Code.Ble_Un:  			case Code.Ble_Un_S:  				return GetHash(BASE_INDEX + 6);    			case Code.Blt:  			case Code.Blt_S:  				return GetHash(BASE_INDEX + 7);    			case Code.Blt_Un:  			case Code.Blt_Un_S:  				return GetHash(BASE_INDEX + 8);    			case Code.Bne_Un:  			case Code.Bne_Un_S:  				return GetHash(BASE_INDEX + 9);    			case Code.Brfalse:  			case Code.Brfalse_S:  				return GetHash(BASE_INDEX + 10);    			case Code.Brtrue:  			case Code.Brtrue_S:  				return GetHash(BASE_INDEX + 11);    			case Code.Switch:  				return GetHash(BASE_INDEX + 12);    			case Code.Ceq:  				return GetHash(BASE_INDEX + 13);    			case Code.Cgt:  				return GetHash(BASE_INDEX + 14);    			case Code.Cgt_Un:  				return GetHash(BASE_INDEX + 15);    			case Code.Clt:  				return GetHash(BASE_INDEX + 16);    			case Code.Clt_Un:  				return GetHash(BASE_INDEX + 17);    			case Code.Ldc_I4:  			case Code.Ldc_I4_0:  			case Code.Ldc_I4_1:  			case Code.Ldc_I4_2:  			case Code.Ldc_I4_3:  			case Code.Ldc_I4_4:  			case Code.Ldc_I4_5:  			case Code.Ldc_I4_6:  			case Code.Ldc_I4_7:  			case Code.Ldc_I4_8:  			case Code.Ldc_I4_M1:  			case Code.Ldc_I4_S:  				return GetHash(instr.GetLdcI4Value());    			case Code.Ldstr:  				return GetHash(instr.Operand as string);    			case Code.Rethrow:  				return GetHash(BASE_INDEX + 18);    			case Code.Throw:  				return GetHash(BASE_INDEX + 19);    			case Code.Call:  			case Code.Callvirt:  				Hash(instr.Operand);  				return (BlockElementHash)hasher.GetHash();    			case Code.Ldfld:  				var field = instr.Operand as FieldDef;  				if (!IsTypeField(field))  					return null;  				if (index + 1 >= instrs.Count || !instrs[index + 1].IsLdcI4())  					return null;  				index++;  				return GetHash(GetFieldId(field));    			default:  				break;  			}
Magic Number,de4dot.code.deobfuscators.Agile_NET.vm.v2,SigCreator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\v2\SigCreator.cs,CalculateHash,The following statement contains a magic number: switch (instr.OpCode.Code) {  			case Code.Beq:  			case Code.Beq_S:  				return GetHash(BASE_INDEX + 0);    			case Code.Bge:  			case Code.Bge_S:  				return GetHash(BASE_INDEX + 1);    			case Code.Bge_Un:  			case Code.Bge_Un_S:  				return GetHash(BASE_INDEX + 2);    			case Code.Bgt:  			case Code.Bgt_S:  				return GetHash(BASE_INDEX + 3);    			case Code.Bgt_Un:  			case Code.Bgt_Un_S:  				return GetHash(BASE_INDEX + 4);    			case Code.Ble:  			case Code.Ble_S:  				return GetHash(BASE_INDEX + 5);    			case Code.Ble_Un:  			case Code.Ble_Un_S:  				return GetHash(BASE_INDEX + 6);    			case Code.Blt:  			case Code.Blt_S:  				return GetHash(BASE_INDEX + 7);    			case Code.Blt_Un:  			case Code.Blt_Un_S:  				return GetHash(BASE_INDEX + 8);    			case Code.Bne_Un:  			case Code.Bne_Un_S:  				return GetHash(BASE_INDEX + 9);    			case Code.Brfalse:  			case Code.Brfalse_S:  				return GetHash(BASE_INDEX + 10);    			case Code.Brtrue:  			case Code.Brtrue_S:  				return GetHash(BASE_INDEX + 11);    			case Code.Switch:  				return GetHash(BASE_INDEX + 12);    			case Code.Ceq:  				return GetHash(BASE_INDEX + 13);    			case Code.Cgt:  				return GetHash(BASE_INDEX + 14);    			case Code.Cgt_Un:  				return GetHash(BASE_INDEX + 15);    			case Code.Clt:  				return GetHash(BASE_INDEX + 16);    			case Code.Clt_Un:  				return GetHash(BASE_INDEX + 17);    			case Code.Ldc_I4:  			case Code.Ldc_I4_0:  			case Code.Ldc_I4_1:  			case Code.Ldc_I4_2:  			case Code.Ldc_I4_3:  			case Code.Ldc_I4_4:  			case Code.Ldc_I4_5:  			case Code.Ldc_I4_6:  			case Code.Ldc_I4_7:  			case Code.Ldc_I4_8:  			case Code.Ldc_I4_M1:  			case Code.Ldc_I4_S:  				return GetHash(instr.GetLdcI4Value());    			case Code.Ldstr:  				return GetHash(instr.Operand as string);    			case Code.Rethrow:  				return GetHash(BASE_INDEX + 18);    			case Code.Throw:  				return GetHash(BASE_INDEX + 19);    			case Code.Call:  			case Code.Callvirt:  				Hash(instr.Operand);  				return (BlockElementHash)hasher.GetHash();    			case Code.Ldfld:  				var field = instr.Operand as FieldDef;  				if (!IsTypeField(field))  					return null;  				if (index + 1 >= instrs.Count || !instrs[index + 1].IsLdcI4())  					return null;  				index++;  				return GetHash(GetFieldId(field));    			default:  				break;  			}
Magic Number,de4dot.code.deobfuscators.Agile_NET.vm.v2,SigCreator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\v2\SigCreator.cs,CalculateHash,The following statement contains a magic number: switch (instr.OpCode.Code) {  			case Code.Beq:  			case Code.Beq_S:  				return GetHash(BASE_INDEX + 0);    			case Code.Bge:  			case Code.Bge_S:  				return GetHash(BASE_INDEX + 1);    			case Code.Bge_Un:  			case Code.Bge_Un_S:  				return GetHash(BASE_INDEX + 2);    			case Code.Bgt:  			case Code.Bgt_S:  				return GetHash(BASE_INDEX + 3);    			case Code.Bgt_Un:  			case Code.Bgt_Un_S:  				return GetHash(BASE_INDEX + 4);    			case Code.Ble:  			case Code.Ble_S:  				return GetHash(BASE_INDEX + 5);    			case Code.Ble_Un:  			case Code.Ble_Un_S:  				return GetHash(BASE_INDEX + 6);    			case Code.Blt:  			case Code.Blt_S:  				return GetHash(BASE_INDEX + 7);    			case Code.Blt_Un:  			case Code.Blt_Un_S:  				return GetHash(BASE_INDEX + 8);    			case Code.Bne_Un:  			case Code.Bne_Un_S:  				return GetHash(BASE_INDEX + 9);    			case Code.Brfalse:  			case Code.Brfalse_S:  				return GetHash(BASE_INDEX + 10);    			case Code.Brtrue:  			case Code.Brtrue_S:  				return GetHash(BASE_INDEX + 11);    			case Code.Switch:  				return GetHash(BASE_INDEX + 12);    			case Code.Ceq:  				return GetHash(BASE_INDEX + 13);    			case Code.Cgt:  				return GetHash(BASE_INDEX + 14);    			case Code.Cgt_Un:  				return GetHash(BASE_INDEX + 15);    			case Code.Clt:  				return GetHash(BASE_INDEX + 16);    			case Code.Clt_Un:  				return GetHash(BASE_INDEX + 17);    			case Code.Ldc_I4:  			case Code.Ldc_I4_0:  			case Code.Ldc_I4_1:  			case Code.Ldc_I4_2:  			case Code.Ldc_I4_3:  			case Code.Ldc_I4_4:  			case Code.Ldc_I4_5:  			case Code.Ldc_I4_6:  			case Code.Ldc_I4_7:  			case Code.Ldc_I4_8:  			case Code.Ldc_I4_M1:  			case Code.Ldc_I4_S:  				return GetHash(instr.GetLdcI4Value());    			case Code.Ldstr:  				return GetHash(instr.Operand as string);    			case Code.Rethrow:  				return GetHash(BASE_INDEX + 18);    			case Code.Throw:  				return GetHash(BASE_INDEX + 19);    			case Code.Call:  			case Code.Callvirt:  				Hash(instr.Operand);  				return (BlockElementHash)hasher.GetHash();    			case Code.Ldfld:  				var field = instr.Operand as FieldDef;  				if (!IsTypeField(field))  					return null;  				if (index + 1 >= instrs.Count || !instrs[index + 1].IsLdcI4())  					return null;  				index++;  				return GetHash(GetFieldId(field));    			default:  				break;  			}
Magic Number,de4dot.code.deobfuscators.Agile_NET.vm.v2,SigCreator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\v2\SigCreator.cs,CalculateHash,The following statement contains a magic number: switch (instr.OpCode.Code) {  			case Code.Beq:  			case Code.Beq_S:  				return GetHash(BASE_INDEX + 0);    			case Code.Bge:  			case Code.Bge_S:  				return GetHash(BASE_INDEX + 1);    			case Code.Bge_Un:  			case Code.Bge_Un_S:  				return GetHash(BASE_INDEX + 2);    			case Code.Bgt:  			case Code.Bgt_S:  				return GetHash(BASE_INDEX + 3);    			case Code.Bgt_Un:  			case Code.Bgt_Un_S:  				return GetHash(BASE_INDEX + 4);    			case Code.Ble:  			case Code.Ble_S:  				return GetHash(BASE_INDEX + 5);    			case Code.Ble_Un:  			case Code.Ble_Un_S:  				return GetHash(BASE_INDEX + 6);    			case Code.Blt:  			case Code.Blt_S:  				return GetHash(BASE_INDEX + 7);    			case Code.Blt_Un:  			case Code.Blt_Un_S:  				return GetHash(BASE_INDEX + 8);    			case Code.Bne_Un:  			case Code.Bne_Un_S:  				return GetHash(BASE_INDEX + 9);    			case Code.Brfalse:  			case Code.Brfalse_S:  				return GetHash(BASE_INDEX + 10);    			case Code.Brtrue:  			case Code.Brtrue_S:  				return GetHash(BASE_INDEX + 11);    			case Code.Switch:  				return GetHash(BASE_INDEX + 12);    			case Code.Ceq:  				return GetHash(BASE_INDEX + 13);    			case Code.Cgt:  				return GetHash(BASE_INDEX + 14);    			case Code.Cgt_Un:  				return GetHash(BASE_INDEX + 15);    			case Code.Clt:  				return GetHash(BASE_INDEX + 16);    			case Code.Clt_Un:  				return GetHash(BASE_INDEX + 17);    			case Code.Ldc_I4:  			case Code.Ldc_I4_0:  			case Code.Ldc_I4_1:  			case Code.Ldc_I4_2:  			case Code.Ldc_I4_3:  			case Code.Ldc_I4_4:  			case Code.Ldc_I4_5:  			case Code.Ldc_I4_6:  			case Code.Ldc_I4_7:  			case Code.Ldc_I4_8:  			case Code.Ldc_I4_M1:  			case Code.Ldc_I4_S:  				return GetHash(instr.GetLdcI4Value());    			case Code.Ldstr:  				return GetHash(instr.Operand as string);    			case Code.Rethrow:  				return GetHash(BASE_INDEX + 18);    			case Code.Throw:  				return GetHash(BASE_INDEX + 19);    			case Code.Call:  			case Code.Callvirt:  				Hash(instr.Operand);  				return (BlockElementHash)hasher.GetHash();    			case Code.Ldfld:  				var field = instr.Operand as FieldDef;  				if (!IsTypeField(field))  					return null;  				if (index + 1 >= instrs.Count || !instrs[index + 1].IsLdcI4())  					return null;  				index++;  				return GetHash(GetFieldId(field));    			default:  				break;  			}
Magic Number,de4dot.code.deobfuscators.Agile_NET.vm.v2,SigCreator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\v2\SigCreator.cs,CalculateHash,The following statement contains a magic number: switch (instr.OpCode.Code) {  			case Code.Beq:  			case Code.Beq_S:  				return GetHash(BASE_INDEX + 0);    			case Code.Bge:  			case Code.Bge_S:  				return GetHash(BASE_INDEX + 1);    			case Code.Bge_Un:  			case Code.Bge_Un_S:  				return GetHash(BASE_INDEX + 2);    			case Code.Bgt:  			case Code.Bgt_S:  				return GetHash(BASE_INDEX + 3);    			case Code.Bgt_Un:  			case Code.Bgt_Un_S:  				return GetHash(BASE_INDEX + 4);    			case Code.Ble:  			case Code.Ble_S:  				return GetHash(BASE_INDEX + 5);    			case Code.Ble_Un:  			case Code.Ble_Un_S:  				return GetHash(BASE_INDEX + 6);    			case Code.Blt:  			case Code.Blt_S:  				return GetHash(BASE_INDEX + 7);    			case Code.Blt_Un:  			case Code.Blt_Un_S:  				return GetHash(BASE_INDEX + 8);    			case Code.Bne_Un:  			case Code.Bne_Un_S:  				return GetHash(BASE_INDEX + 9);    			case Code.Brfalse:  			case Code.Brfalse_S:  				return GetHash(BASE_INDEX + 10);    			case Code.Brtrue:  			case Code.Brtrue_S:  				return GetHash(BASE_INDEX + 11);    			case Code.Switch:  				return GetHash(BASE_INDEX + 12);    			case Code.Ceq:  				return GetHash(BASE_INDEX + 13);    			case Code.Cgt:  				return GetHash(BASE_INDEX + 14);    			case Code.Cgt_Un:  				return GetHash(BASE_INDEX + 15);    			case Code.Clt:  				return GetHash(BASE_INDEX + 16);    			case Code.Clt_Un:  				return GetHash(BASE_INDEX + 17);    			case Code.Ldc_I4:  			case Code.Ldc_I4_0:  			case Code.Ldc_I4_1:  			case Code.Ldc_I4_2:  			case Code.Ldc_I4_3:  			case Code.Ldc_I4_4:  			case Code.Ldc_I4_5:  			case Code.Ldc_I4_6:  			case Code.Ldc_I4_7:  			case Code.Ldc_I4_8:  			case Code.Ldc_I4_M1:  			case Code.Ldc_I4_S:  				return GetHash(instr.GetLdcI4Value());    			case Code.Ldstr:  				return GetHash(instr.Operand as string);    			case Code.Rethrow:  				return GetHash(BASE_INDEX + 18);    			case Code.Throw:  				return GetHash(BASE_INDEX + 19);    			case Code.Call:  			case Code.Callvirt:  				Hash(instr.Operand);  				return (BlockElementHash)hasher.GetHash();    			case Code.Ldfld:  				var field = instr.Operand as FieldDef;  				if (!IsTypeField(field))  					return null;  				if (index + 1 >= instrs.Count || !instrs[index + 1].IsLdcI4())  					return null;  				index++;  				return GetHash(GetFieldId(field));    			default:  				break;  			}
Magic Number,de4dot.code.deobfuscators.Agile_NET.vm.v2,SigCreator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\v2\SigCreator.cs,GetFieldId,The following statement contains a magic number: i < 100
Magic Number,de4dot.code.deobfuscators.Agile_NET.vm.v2,SigCreator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\v2\SigCreator.cs,Hash,The following statement contains a magic number: level++ > 20
Magic Number,de4dot.code.deobfuscators.Agile_NET.vm.v2,SigCreator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\v2\SigCreator.cs,IsFromNonObfuscatedAssembly,The following statement contains a magic number: i < 100
Magic Number,de4dot.code.deobfuscators.Agile_NET.vm.v2,VmOpCodeHandlerDetector,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\v2\VmOpCodeHandlerDetector.cs,CreateSigCreator,The following statement contains a magic number: creator.AddId(csvmInfo.LogicalOpShl' 2);
Magic Number,de4dot.code.deobfuscators.Agile_NET.vm.v2,VmOpCodeHandlerDetector,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\v2\VmOpCodeHandlerDetector.cs,CreateSigCreator,The following statement contains a magic number: creator.AddId(csvmInfo.LogicalOpShr' 3);
Magic Number,de4dot.code.deobfuscators.Agile_NET.vm.v2,VmOpCodeHandlerDetector,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\v2\VmOpCodeHandlerDetector.cs,CreateSigCreator,The following statement contains a magic number: creator.AddId(csvmInfo.LogicalOpAnd' 4);
Magic Number,de4dot.code.deobfuscators.Agile_NET.vm.v2,VmOpCodeHandlerDetector,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\v2\VmOpCodeHandlerDetector.cs,CreateSigCreator,The following statement contains a magic number: creator.AddId(csvmInfo.LogicalOpXor' 5);
Magic Number,de4dot.code.deobfuscators.Agile_NET.vm.v2,VmOpCodeHandlerDetector,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\v2\VmOpCodeHandlerDetector.cs,CreateSigCreator,The following statement contains a magic number: creator.AddId(csvmInfo.LogicalOpOr' 6);
Magic Number,de4dot.code.deobfuscators.Agile_NET.vm.v2,VmOpCodeHandlerDetector,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\v2\VmOpCodeHandlerDetector.cs,CreateSigCreator,The following statement contains a magic number: creator.AddId(csvmInfo.CompareLt' 7);
Magic Number,de4dot.code.deobfuscators.Agile_NET.vm.v2,VmOpCodeHandlerDetector,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\v2\VmOpCodeHandlerDetector.cs,CreateSigCreator,The following statement contains a magic number: creator.AddId(csvmInfo.CompareLte' 8);
Magic Number,de4dot.code.deobfuscators.Agile_NET.vm.v2,VmOpCodeHandlerDetector,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\v2\VmOpCodeHandlerDetector.cs,CreateSigCreator,The following statement contains a magic number: creator.AddId(csvmInfo.CompareGt' 9);
Magic Number,de4dot.code.deobfuscators.Agile_NET.vm.v2,VmOpCodeHandlerDetector,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\v2\VmOpCodeHandlerDetector.cs,CreateSigCreator,The following statement contains a magic number: creator.AddId(csvmInfo.CompareGte' 10);
Magic Number,de4dot.code.deobfuscators.Agile_NET.vm.v2,VmOpCodeHandlerDetector,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\v2\VmOpCodeHandlerDetector.cs,CreateSigCreator,The following statement contains a magic number: creator.AddId(csvmInfo.CompareEq' 11);
Magic Number,de4dot.code.deobfuscators.Agile_NET.vm.v2,VmOpCodeHandlerDetector,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\v2\VmOpCodeHandlerDetector.cs,CreateSigCreator,The following statement contains a magic number: creator.AddId(csvmInfo.CompareEqz' 12);
Magic Number,de4dot.code.deobfuscators.Agile_NET.vm.v2,VmOpCodeHandlerDetector,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\v2\VmOpCodeHandlerDetector.cs,CreateSigCreator,The following statement contains a magic number: creator.AddId(csvmInfo.ArithmeticSubOvfUn' 13);
Magic Number,de4dot.code.deobfuscators.Agile_NET.vm.v2,VmOpCodeHandlerDetector,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\v2\VmOpCodeHandlerDetector.cs,CreateSigCreator,The following statement contains a magic number: creator.AddId(csvmInfo.ArithmeticMulOvfUn' 14);
Magic Number,de4dot.code.deobfuscators.Agile_NET.vm.v2,VmOpCodeHandlerDetector,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\v2\VmOpCodeHandlerDetector.cs,CreateSigCreator,The following statement contains a magic number: creator.AddId(csvmInfo.ArithmeticRemUn' 15);
Magic Number,de4dot.code.deobfuscators.Agile_NET.vm.v2,VmOpCodeHandlerDetector,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\v2\VmOpCodeHandlerDetector.cs,CreateSigCreator,The following statement contains a magic number: creator.AddId(csvmInfo.ArithmeticRem' 16);
Magic Number,de4dot.code.deobfuscators.Agile_NET.vm.v2,VmOpCodeHandlerDetector,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\v2\VmOpCodeHandlerDetector.cs,CreateSigCreator,The following statement contains a magic number: creator.AddId(csvmInfo.ArithmeticDivUn' 17);
Magic Number,de4dot.code.deobfuscators.Agile_NET.vm.v2,VmOpCodeHandlerDetector,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\v2\VmOpCodeHandlerDetector.cs,CreateSigCreator,The following statement contains a magic number: creator.AddId(csvmInfo.ArithmeticDiv' 18);
Magic Number,de4dot.code.deobfuscators.Agile_NET.vm.v2,VmOpCodeHandlerDetector,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\v2\VmOpCodeHandlerDetector.cs,CreateSigCreator,The following statement contains a magic number: creator.AddId(csvmInfo.ArithmeticMul' 19);
Magic Number,de4dot.code.deobfuscators.Agile_NET.vm.v2,VmOpCodeHandlerDetector,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\v2\VmOpCodeHandlerDetector.cs,CreateSigCreator,The following statement contains a magic number: creator.AddId(csvmInfo.ArithmeticMulOvf' 20);
Magic Number,de4dot.code.deobfuscators.Agile_NET.vm.v2,VmOpCodeHandlerDetector,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\v2\VmOpCodeHandlerDetector.cs,CreateSigCreator,The following statement contains a magic number: creator.AddId(csvmInfo.ArithmeticSub' 21);
Magic Number,de4dot.code.deobfuscators.Agile_NET.vm.v2,VmOpCodeHandlerDetector,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\v2\VmOpCodeHandlerDetector.cs,CreateSigCreator,The following statement contains a magic number: creator.AddId(csvmInfo.ArithmeticSubOvf' 22);
Magic Number,de4dot.code.deobfuscators.Agile_NET.vm.v2,VmOpCodeHandlerDetector,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\v2\VmOpCodeHandlerDetector.cs,CreateSigCreator,The following statement contains a magic number: creator.AddId(csvmInfo.ArithmeticAddOvfUn' 23);
Magic Number,de4dot.code.deobfuscators.Agile_NET.vm.v2,VmOpCodeHandlerDetector,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\v2\VmOpCodeHandlerDetector.cs,CreateSigCreator,The following statement contains a magic number: creator.AddId(csvmInfo.ArithmeticAddOvf' 24);
Magic Number,de4dot.code.deobfuscators.Agile_NET.vm.v2,VmOpCodeHandlerDetector,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\v2\VmOpCodeHandlerDetector.cs,CreateSigCreator,The following statement contains a magic number: creator.AddId(csvmInfo.ArithmeticAdd' 25);
Magic Number,de4dot.code.deobfuscators.Agile_NET.vm.v2,VmOpCodeHandlerDetector,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\v2\VmOpCodeHandlerDetector.cs,CreateSigCreator,The following statement contains a magic number: creator.AddId(csvmInfo.UnaryNot' 26);
Magic Number,de4dot.code.deobfuscators.Agile_NET.vm.v2,VmOpCodeHandlerDetector,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\v2\VmOpCodeHandlerDetector.cs,CreateSigCreator,The following statement contains a magic number: creator.AddId(csvmInfo.UnaryNeg' 27);
Magic Number,de4dot.code.deobfuscators.Agile_NET.vm.v2,VmOpCodeHandlerDetector,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\v2\VmOpCodeHandlerDetector.cs,CreateSigCreator,The following statement contains a magic number: creator.AddId(csvmInfo.ArgsGet' 28);
Magic Number,de4dot.code.deobfuscators.Agile_NET.vm.v2,VmOpCodeHandlerDetector,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\v2\VmOpCodeHandlerDetector.cs,CreateSigCreator,The following statement contains a magic number: creator.AddId(csvmInfo.ArgsSet' 29);
Magic Number,de4dot.code.deobfuscators.Agile_NET.vm.v2,VmOpCodeHandlerDetector,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\v2\VmOpCodeHandlerDetector.cs,CreateSigCreator,The following statement contains a magic number: creator.AddId(csvmInfo.LocalsGet' 30);
Magic Number,de4dot.code.deobfuscators.Agile_NET.vm.v2,VmOpCodeHandlerDetector,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\v2\VmOpCodeHandlerDetector.cs,CreateSigCreator,The following statement contains a magic number: creator.AddId(csvmInfo.LocalsSet' 31);
Magic Number,de4dot.code.deobfuscators.Agile_NET.vm.v2,VmOpCodeHandlerDetector,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\v2\VmOpCodeHandlerDetector.cs,CreateSigCreator,The following statement contains a magic number: AddTypeId(creator' csvmInfo.LogicalOpShrUn' 32);
Magic Number,de4dot.code.deobfuscators.Agile_NET.vm.v2,VmOpCodeHandlerDetector,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\v2\VmOpCodeHandlerDetector.cs,CreateSigCreator,The following statement contains a magic number: AddTypeId(creator' csvmInfo.CompareLt' 33);
Magic Number,de4dot.code.deobfuscators.Agile_NET.vm.v2,VmOpCodeHandlerDetector,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\v2\VmOpCodeHandlerDetector.cs,CreateSigCreator,The following statement contains a magic number: AddTypeId(creator' csvmInfo.ArithmeticSubOvfUn' 34);
Magic Number,de4dot.code.deobfuscators.Agile_NET.vm.v2,VmOpCodeHandlerDetector,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\v2\VmOpCodeHandlerDetector.cs,CreateSigCreator,The following statement contains a magic number: AddTypeId(creator' csvmInfo.UnaryNot' 35);
Magic Number,de4dot.code.deobfuscators.Agile_NET.vm.v2,VmOpCodeHandlerDetector,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Agile_NET\vm\v2\VmOpCodeHandlerDetector.cs,CreateSigCreator,The following statement contains a magic number: AddTypeId(creator' csvmInfo.ArgsGet' 36);
Magic Number,de4dot.code.deobfuscators,ArrayFinder,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\ArrayFinder.cs,GetArray,The following statement contains a magic number: index = i - 3;
Magic Number,de4dot.code.deobfuscators,ArrayFinder,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\ArrayFinder.cs,GetArray,The following statement contains a magic number: i < instrs.Count - 2
Magic Number,de4dot.code.deobfuscators,ArrayFinder,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\ArrayFinder.cs,GetInitializedArray,The following statement contains a magic number: switch (instr.OpCode.Code) {  				case Code.Newarr:  				case Code.Newobj:  					goto done;    				case Code.Stloc:  				case Code.Stloc_S:  				case Code.Stloc_0:  				case Code.Stloc_1:  				case Code.Stloc_2:  				case Code.Stloc_3:  				case Code.Starg:  				case Code.Starg_S:  				case Code.Stsfld:  				case Code.Stfld:  					if (emulator.Peek() == theArray && i != newarrIndex + 1 && i != newarrIndex + 2)  						goto done;  					break;  				}
Magic Number,de4dot.code.deobfuscators,Blowfish,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Blowfish.cs,Initialize,The following statement contains a magic number: P[i] = Pboxes[i] ^ (((uint)key[ki++ % kl] << 24) | ((uint)key[ki++ % kl] << 16) |  							((uint)key[ki++ % kl] << 8) | key[ki++ % kl]);
Magic Number,de4dot.code.deobfuscators,Blowfish,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Blowfish.cs,Initialize,The following statement contains a magic number: P[i] = Pboxes[i] ^ (((uint)key[ki++ % kl] << 24) | ((uint)key[ki++ % kl] << 16) |  							((uint)key[ki++ % kl] << 8) | key[ki++ % kl]);
Magic Number,de4dot.code.deobfuscators,Blowfish,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Blowfish.cs,Initialize,The following statement contains a magic number: P[i] = Pboxes[i] ^ (((uint)key[ki++ % kl] << 24) | ((uint)key[ki++ % kl] << 16) |  							((uint)key[ki++ % kl] << 8) | key[ki++ % kl]);
Magic Number,de4dot.code.deobfuscators,Blowfish,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Blowfish.cs,Initialize,The following statement contains a magic number: i < 18
Magic Number,de4dot.code.deobfuscators,Blowfish,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Blowfish.cs,Initialize,The following statement contains a magic number: i < 18
Magic Number,de4dot.code.deobfuscators,Blowfish,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Blowfish.cs,Initialize,The following statement contains a magic number: i < 1024
Magic Number,de4dot.code.deobfuscators,Blowfish,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Blowfish.cs,Encrypt_LE,The following statement contains a magic number: uint xr = BitConverter.ToUInt32(data' i + 4);
Magic Number,de4dot.code.deobfuscators,Blowfish,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Blowfish.cs,Encrypt_LE,The following statement contains a magic number: data[i + 1] = (byte)(xl >> 8);
Magic Number,de4dot.code.deobfuscators,Blowfish,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Blowfish.cs,Encrypt_LE,The following statement contains a magic number: data[i + 2] = (byte)(xl >> 16);
Magic Number,de4dot.code.deobfuscators,Blowfish,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Blowfish.cs,Encrypt_LE,The following statement contains a magic number: data[i + 2] = (byte)(xl >> 16);
Magic Number,de4dot.code.deobfuscators,Blowfish,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Blowfish.cs,Encrypt_LE,The following statement contains a magic number: data[i + 3] = (byte)(xl >> 24);
Magic Number,de4dot.code.deobfuscators,Blowfish,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Blowfish.cs,Encrypt_LE,The following statement contains a magic number: data[i + 3] = (byte)(xl >> 24);
Magic Number,de4dot.code.deobfuscators,Blowfish,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Blowfish.cs,Encrypt_LE,The following statement contains a magic number: data[i + 4] = (byte)xr;
Magic Number,de4dot.code.deobfuscators,Blowfish,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Blowfish.cs,Encrypt_LE,The following statement contains a magic number: data[i + 5] = (byte)(xr >> 8);
Magic Number,de4dot.code.deobfuscators,Blowfish,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Blowfish.cs,Encrypt_LE,The following statement contains a magic number: data[i + 5] = (byte)(xr >> 8);
Magic Number,de4dot.code.deobfuscators,Blowfish,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Blowfish.cs,Encrypt_LE,The following statement contains a magic number: data[i + 6] = (byte)(xr >> 16);
Magic Number,de4dot.code.deobfuscators,Blowfish,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Blowfish.cs,Encrypt_LE,The following statement contains a magic number: data[i + 6] = (byte)(xr >> 16);
Magic Number,de4dot.code.deobfuscators,Blowfish,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Blowfish.cs,Encrypt_LE,The following statement contains a magic number: data[i + 7] = (byte)(xr >> 24);
Magic Number,de4dot.code.deobfuscators,Blowfish,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Blowfish.cs,Encrypt_LE,The following statement contains a magic number: data[i + 7] = (byte)(xr >> 24);
Magic Number,de4dot.code.deobfuscators,Blowfish,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Blowfish.cs,Encrypt_LE,The following statement contains a magic number: i + 8 <= data.Length
Magic Number,de4dot.code.deobfuscators,Blowfish,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Blowfish.cs,Encrypt,The following statement contains a magic number: uint xl = (uint)((data[i] << 24) | (data[i + 1] << 16) | (data[i + 2] << 8) | data[i + 3]);
Magic Number,de4dot.code.deobfuscators,Blowfish,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Blowfish.cs,Encrypt,The following statement contains a magic number: uint xl = (uint)((data[i] << 24) | (data[i + 1] << 16) | (data[i + 2] << 8) | data[i + 3]);
Magic Number,de4dot.code.deobfuscators,Blowfish,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Blowfish.cs,Encrypt,The following statement contains a magic number: uint xl = (uint)((data[i] << 24) | (data[i + 1] << 16) | (data[i + 2] << 8) | data[i + 3]);
Magic Number,de4dot.code.deobfuscators,Blowfish,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Blowfish.cs,Encrypt,The following statement contains a magic number: uint xl = (uint)((data[i] << 24) | (data[i + 1] << 16) | (data[i + 2] << 8) | data[i + 3]);
Magic Number,de4dot.code.deobfuscators,Blowfish,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Blowfish.cs,Encrypt,The following statement contains a magic number: uint xl = (uint)((data[i] << 24) | (data[i + 1] << 16) | (data[i + 2] << 8) | data[i + 3]);
Magic Number,de4dot.code.deobfuscators,Blowfish,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Blowfish.cs,Encrypt,The following statement contains a magic number: uint xr = (uint)((data[i + 4] << 24) | (data[i + 5] << 16) | (data[i + 6] << 8) | data[i + 7]);
Magic Number,de4dot.code.deobfuscators,Blowfish,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Blowfish.cs,Encrypt,The following statement contains a magic number: uint xr = (uint)((data[i + 4] << 24) | (data[i + 5] << 16) | (data[i + 6] << 8) | data[i + 7]);
Magic Number,de4dot.code.deobfuscators,Blowfish,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Blowfish.cs,Encrypt,The following statement contains a magic number: uint xr = (uint)((data[i + 4] << 24) | (data[i + 5] << 16) | (data[i + 6] << 8) | data[i + 7]);
Magic Number,de4dot.code.deobfuscators,Blowfish,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Blowfish.cs,Encrypt,The following statement contains a magic number: uint xr = (uint)((data[i + 4] << 24) | (data[i + 5] << 16) | (data[i + 6] << 8) | data[i + 7]);
Magic Number,de4dot.code.deobfuscators,Blowfish,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Blowfish.cs,Encrypt,The following statement contains a magic number: uint xr = (uint)((data[i + 4] << 24) | (data[i + 5] << 16) | (data[i + 6] << 8) | data[i + 7]);
Magic Number,de4dot.code.deobfuscators,Blowfish,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Blowfish.cs,Encrypt,The following statement contains a magic number: uint xr = (uint)((data[i + 4] << 24) | (data[i + 5] << 16) | (data[i + 6] << 8) | data[i + 7]);
Magic Number,de4dot.code.deobfuscators,Blowfish,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Blowfish.cs,Encrypt,The following statement contains a magic number: uint xr = (uint)((data[i + 4] << 24) | (data[i + 5] << 16) | (data[i + 6] << 8) | data[i + 7]);
Magic Number,de4dot.code.deobfuscators,Blowfish,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Blowfish.cs,Encrypt,The following statement contains a magic number: data[i] = (byte)(xl >> 24);
Magic Number,de4dot.code.deobfuscators,Blowfish,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Blowfish.cs,Encrypt,The following statement contains a magic number: data[i + 1] = (byte)(xl >> 16);
Magic Number,de4dot.code.deobfuscators,Blowfish,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Blowfish.cs,Encrypt,The following statement contains a magic number: data[i + 2] = (byte)(xl >> 8);
Magic Number,de4dot.code.deobfuscators,Blowfish,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Blowfish.cs,Encrypt,The following statement contains a magic number: data[i + 2] = (byte)(xl >> 8);
Magic Number,de4dot.code.deobfuscators,Blowfish,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Blowfish.cs,Encrypt,The following statement contains a magic number: data[i + 3] = (byte)xl;
Magic Number,de4dot.code.deobfuscators,Blowfish,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Blowfish.cs,Encrypt,The following statement contains a magic number: data[i + 4] = (byte)(xr >> 24);
Magic Number,de4dot.code.deobfuscators,Blowfish,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Blowfish.cs,Encrypt,The following statement contains a magic number: data[i + 4] = (byte)(xr >> 24);
Magic Number,de4dot.code.deobfuscators,Blowfish,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Blowfish.cs,Encrypt,The following statement contains a magic number: data[i + 5] = (byte)(xr >> 16);
Magic Number,de4dot.code.deobfuscators,Blowfish,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Blowfish.cs,Encrypt,The following statement contains a magic number: data[i + 5] = (byte)(xr >> 16);
Magic Number,de4dot.code.deobfuscators,Blowfish,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Blowfish.cs,Encrypt,The following statement contains a magic number: data[i + 6] = (byte)(xr >> 8);
Magic Number,de4dot.code.deobfuscators,Blowfish,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Blowfish.cs,Encrypt,The following statement contains a magic number: data[i + 6] = (byte)(xr >> 8);
Magic Number,de4dot.code.deobfuscators,Blowfish,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Blowfish.cs,Encrypt,The following statement contains a magic number: data[i + 7] = (byte)xr;
Magic Number,de4dot.code.deobfuscators,Blowfish,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Blowfish.cs,Encrypt,The following statement contains a magic number: i + 8 <= data.Length
Magic Number,de4dot.code.deobfuscators,Blowfish,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Blowfish.cs,Encrypt,The following statement contains a magic number: xr ^= ((S[0 * 256 + (xl >> 24)] + S[1 * 256 + (byte)(xl >> 16)]) ^ S[2 * 256 + (byte)(xl >> 8)]) + S[3 * 256 + (byte)xl];
Magic Number,de4dot.code.deobfuscators,Blowfish,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Blowfish.cs,Encrypt,The following statement contains a magic number: xr ^= ((S[0 * 256 + (xl >> 24)] + S[1 * 256 + (byte)(xl >> 16)]) ^ S[2 * 256 + (byte)(xl >> 8)]) + S[3 * 256 + (byte)xl];
Magic Number,de4dot.code.deobfuscators,Blowfish,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Blowfish.cs,Encrypt,The following statement contains a magic number: xr ^= ((S[0 * 256 + (xl >> 24)] + S[1 * 256 + (byte)(xl >> 16)]) ^ S[2 * 256 + (byte)(xl >> 8)]) + S[3 * 256 + (byte)xl];
Magic Number,de4dot.code.deobfuscators,Blowfish,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Blowfish.cs,Encrypt,The following statement contains a magic number: xr ^= ((S[0 * 256 + (xl >> 24)] + S[1 * 256 + (byte)(xl >> 16)]) ^ S[2 * 256 + (byte)(xl >> 8)]) + S[3 * 256 + (byte)xl];
Magic Number,de4dot.code.deobfuscators,Blowfish,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Blowfish.cs,Encrypt,The following statement contains a magic number: xr ^= ((S[0 * 256 + (xl >> 24)] + S[1 * 256 + (byte)(xl >> 16)]) ^ S[2 * 256 + (byte)(xl >> 8)]) + S[3 * 256 + (byte)xl];
Magic Number,de4dot.code.deobfuscators,Blowfish,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Blowfish.cs,Encrypt,The following statement contains a magic number: xr ^= ((S[0 * 256 + (xl >> 24)] + S[1 * 256 + (byte)(xl >> 16)]) ^ S[2 * 256 + (byte)(xl >> 8)]) + S[3 * 256 + (byte)xl];
Magic Number,de4dot.code.deobfuscators,Blowfish,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Blowfish.cs,Encrypt,The following statement contains a magic number: xr ^= ((S[0 * 256 + (xl >> 24)] + S[1 * 256 + (byte)(xl >> 16)]) ^ S[2 * 256 + (byte)(xl >> 8)]) + S[3 * 256 + (byte)xl];
Magic Number,de4dot.code.deobfuscators,Blowfish,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Blowfish.cs,Encrypt,The following statement contains a magic number: xr ^= ((S[0 * 256 + (xl >> 24)] + S[1 * 256 + (byte)(xl >> 16)]) ^ S[2 * 256 + (byte)(xl >> 8)]) + S[3 * 256 + (byte)xl];
Magic Number,de4dot.code.deobfuscators,Blowfish,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Blowfish.cs,Encrypt,The following statement contains a magic number: xr ^= ((S[0 * 256 + (xl >> 24)] + S[1 * 256 + (byte)(xl >> 16)]) ^ S[2 * 256 + (byte)(xl >> 8)]) + S[3 * 256 + (byte)xl];
Magic Number,de4dot.code.deobfuscators,Blowfish,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Blowfish.cs,Encrypt,The following statement contains a magic number: i < 16
Magic Number,de4dot.code.deobfuscators,Blowfish,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Blowfish.cs,Encrypt,The following statement contains a magic number: rxr = xl ^ P[16];
Magic Number,de4dot.code.deobfuscators,Blowfish,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Blowfish.cs,Encrypt,The following statement contains a magic number: rxl = xr ^ P[17];
Magic Number,de4dot.code.deobfuscators,Blowfish,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Blowfish.cs,Decrypt_LE,The following statement contains a magic number: uint xr = BitConverter.ToUInt32(data' i + 4);
Magic Number,de4dot.code.deobfuscators,Blowfish,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Blowfish.cs,Decrypt_LE,The following statement contains a magic number: data[i + 1] = (byte)(xl >> 8);
Magic Number,de4dot.code.deobfuscators,Blowfish,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Blowfish.cs,Decrypt_LE,The following statement contains a magic number: data[i + 2] = (byte)(xl >> 16);
Magic Number,de4dot.code.deobfuscators,Blowfish,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Blowfish.cs,Decrypt_LE,The following statement contains a magic number: data[i + 2] = (byte)(xl >> 16);
Magic Number,de4dot.code.deobfuscators,Blowfish,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Blowfish.cs,Decrypt_LE,The following statement contains a magic number: data[i + 3] = (byte)(xl >> 24);
Magic Number,de4dot.code.deobfuscators,Blowfish,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Blowfish.cs,Decrypt_LE,The following statement contains a magic number: data[i + 3] = (byte)(xl >> 24);
Magic Number,de4dot.code.deobfuscators,Blowfish,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Blowfish.cs,Decrypt_LE,The following statement contains a magic number: data[i + 4] = (byte)xr;
Magic Number,de4dot.code.deobfuscators,Blowfish,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Blowfish.cs,Decrypt_LE,The following statement contains a magic number: data[i + 5] = (byte)(xr >> 8);
Magic Number,de4dot.code.deobfuscators,Blowfish,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Blowfish.cs,Decrypt_LE,The following statement contains a magic number: data[i + 5] = (byte)(xr >> 8);
Magic Number,de4dot.code.deobfuscators,Blowfish,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Blowfish.cs,Decrypt_LE,The following statement contains a magic number: data[i + 6] = (byte)(xr >> 16);
Magic Number,de4dot.code.deobfuscators,Blowfish,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Blowfish.cs,Decrypt_LE,The following statement contains a magic number: data[i + 6] = (byte)(xr >> 16);
Magic Number,de4dot.code.deobfuscators,Blowfish,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Blowfish.cs,Decrypt_LE,The following statement contains a magic number: data[i + 7] = (byte)(xr >> 24);
Magic Number,de4dot.code.deobfuscators,Blowfish,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Blowfish.cs,Decrypt_LE,The following statement contains a magic number: data[i + 7] = (byte)(xr >> 24);
Magic Number,de4dot.code.deobfuscators,Blowfish,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Blowfish.cs,Decrypt_LE,The following statement contains a magic number: i + 8 <= data.Length
Magic Number,de4dot.code.deobfuscators,Blowfish,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Blowfish.cs,Decrypt,The following statement contains a magic number: uint xl = (uint)((data[i] << 24) | (data[i + 1] << 16) | (data[i + 2] << 8) | data[i + 3]);
Magic Number,de4dot.code.deobfuscators,Blowfish,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Blowfish.cs,Decrypt,The following statement contains a magic number: uint xl = (uint)((data[i] << 24) | (data[i + 1] << 16) | (data[i + 2] << 8) | data[i + 3]);
Magic Number,de4dot.code.deobfuscators,Blowfish,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Blowfish.cs,Decrypt,The following statement contains a magic number: uint xl = (uint)((data[i] << 24) | (data[i + 1] << 16) | (data[i + 2] << 8) | data[i + 3]);
Magic Number,de4dot.code.deobfuscators,Blowfish,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Blowfish.cs,Decrypt,The following statement contains a magic number: uint xl = (uint)((data[i] << 24) | (data[i + 1] << 16) | (data[i + 2] << 8) | data[i + 3]);
Magic Number,de4dot.code.deobfuscators,Blowfish,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Blowfish.cs,Decrypt,The following statement contains a magic number: uint xl = (uint)((data[i] << 24) | (data[i + 1] << 16) | (data[i + 2] << 8) | data[i + 3]);
Magic Number,de4dot.code.deobfuscators,Blowfish,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Blowfish.cs,Decrypt,The following statement contains a magic number: uint xr = (uint)((data[i + 4] << 24) | (data[i + 5] << 16) | (data[i + 6] << 8) | data[i + 7]);
Magic Number,de4dot.code.deobfuscators,Blowfish,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Blowfish.cs,Decrypt,The following statement contains a magic number: uint xr = (uint)((data[i + 4] << 24) | (data[i + 5] << 16) | (data[i + 6] << 8) | data[i + 7]);
Magic Number,de4dot.code.deobfuscators,Blowfish,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Blowfish.cs,Decrypt,The following statement contains a magic number: uint xr = (uint)((data[i + 4] << 24) | (data[i + 5] << 16) | (data[i + 6] << 8) | data[i + 7]);
Magic Number,de4dot.code.deobfuscators,Blowfish,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Blowfish.cs,Decrypt,The following statement contains a magic number: uint xr = (uint)((data[i + 4] << 24) | (data[i + 5] << 16) | (data[i + 6] << 8) | data[i + 7]);
Magic Number,de4dot.code.deobfuscators,Blowfish,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Blowfish.cs,Decrypt,The following statement contains a magic number: uint xr = (uint)((data[i + 4] << 24) | (data[i + 5] << 16) | (data[i + 6] << 8) | data[i + 7]);
Magic Number,de4dot.code.deobfuscators,Blowfish,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Blowfish.cs,Decrypt,The following statement contains a magic number: uint xr = (uint)((data[i + 4] << 24) | (data[i + 5] << 16) | (data[i + 6] << 8) | data[i + 7]);
Magic Number,de4dot.code.deobfuscators,Blowfish,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Blowfish.cs,Decrypt,The following statement contains a magic number: uint xr = (uint)((data[i + 4] << 24) | (data[i + 5] << 16) | (data[i + 6] << 8) | data[i + 7]);
Magic Number,de4dot.code.deobfuscators,Blowfish,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Blowfish.cs,Decrypt,The following statement contains a magic number: data[i] = (byte)(xl >> 24);
Magic Number,de4dot.code.deobfuscators,Blowfish,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Blowfish.cs,Decrypt,The following statement contains a magic number: data[i + 1] = (byte)(xl >> 16);
Magic Number,de4dot.code.deobfuscators,Blowfish,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Blowfish.cs,Decrypt,The following statement contains a magic number: data[i + 2] = (byte)(xl >> 8);
Magic Number,de4dot.code.deobfuscators,Blowfish,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Blowfish.cs,Decrypt,The following statement contains a magic number: data[i + 2] = (byte)(xl >> 8);
Magic Number,de4dot.code.deobfuscators,Blowfish,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Blowfish.cs,Decrypt,The following statement contains a magic number: data[i + 3] = (byte)xl;
Magic Number,de4dot.code.deobfuscators,Blowfish,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Blowfish.cs,Decrypt,The following statement contains a magic number: data[i + 4] = (byte)(xr >> 24);
Magic Number,de4dot.code.deobfuscators,Blowfish,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Blowfish.cs,Decrypt,The following statement contains a magic number: data[i + 4] = (byte)(xr >> 24);
Magic Number,de4dot.code.deobfuscators,Blowfish,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Blowfish.cs,Decrypt,The following statement contains a magic number: data[i + 5] = (byte)(xr >> 16);
Magic Number,de4dot.code.deobfuscators,Blowfish,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Blowfish.cs,Decrypt,The following statement contains a magic number: data[i + 5] = (byte)(xr >> 16);
Magic Number,de4dot.code.deobfuscators,Blowfish,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Blowfish.cs,Decrypt,The following statement contains a magic number: data[i + 6] = (byte)(xr >> 8);
Magic Number,de4dot.code.deobfuscators,Blowfish,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Blowfish.cs,Decrypt,The following statement contains a magic number: data[i + 6] = (byte)(xr >> 8);
Magic Number,de4dot.code.deobfuscators,Blowfish,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Blowfish.cs,Decrypt,The following statement contains a magic number: data[i + 7] = (byte)xr;
Magic Number,de4dot.code.deobfuscators,Blowfish,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Blowfish.cs,Decrypt,The following statement contains a magic number: i + 8 <= data.Length
Magic Number,de4dot.code.deobfuscators,Blowfish,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Blowfish.cs,Decrypt,The following statement contains a magic number: xr ^= ((S[0 * 256 + (xl >> 24)] + S[1 * 256 + (byte)(xl >> 16)]) ^ S[2 * 256 + (byte)(xl >> 8)]) + S[3 * 256 + (byte)xl];
Magic Number,de4dot.code.deobfuscators,Blowfish,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Blowfish.cs,Decrypt,The following statement contains a magic number: xr ^= ((S[0 * 256 + (xl >> 24)] + S[1 * 256 + (byte)(xl >> 16)]) ^ S[2 * 256 + (byte)(xl >> 8)]) + S[3 * 256 + (byte)xl];
Magic Number,de4dot.code.deobfuscators,Blowfish,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Blowfish.cs,Decrypt,The following statement contains a magic number: xr ^= ((S[0 * 256 + (xl >> 24)] + S[1 * 256 + (byte)(xl >> 16)]) ^ S[2 * 256 + (byte)(xl >> 8)]) + S[3 * 256 + (byte)xl];
Magic Number,de4dot.code.deobfuscators,Blowfish,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Blowfish.cs,Decrypt,The following statement contains a magic number: xr ^= ((S[0 * 256 + (xl >> 24)] + S[1 * 256 + (byte)(xl >> 16)]) ^ S[2 * 256 + (byte)(xl >> 8)]) + S[3 * 256 + (byte)xl];
Magic Number,de4dot.code.deobfuscators,Blowfish,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Blowfish.cs,Decrypt,The following statement contains a magic number: xr ^= ((S[0 * 256 + (xl >> 24)] + S[1 * 256 + (byte)(xl >> 16)]) ^ S[2 * 256 + (byte)(xl >> 8)]) + S[3 * 256 + (byte)xl];
Magic Number,de4dot.code.deobfuscators,Blowfish,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Blowfish.cs,Decrypt,The following statement contains a magic number: xr ^= ((S[0 * 256 + (xl >> 24)] + S[1 * 256 + (byte)(xl >> 16)]) ^ S[2 * 256 + (byte)(xl >> 8)]) + S[3 * 256 + (byte)xl];
Magic Number,de4dot.code.deobfuscators,Blowfish,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Blowfish.cs,Decrypt,The following statement contains a magic number: xr ^= ((S[0 * 256 + (xl >> 24)] + S[1 * 256 + (byte)(xl >> 16)]) ^ S[2 * 256 + (byte)(xl >> 8)]) + S[3 * 256 + (byte)xl];
Magic Number,de4dot.code.deobfuscators,Blowfish,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Blowfish.cs,Decrypt,The following statement contains a magic number: xr ^= ((S[0 * 256 + (xl >> 24)] + S[1 * 256 + (byte)(xl >> 16)]) ^ S[2 * 256 + (byte)(xl >> 8)]) + S[3 * 256 + (byte)xl];
Magic Number,de4dot.code.deobfuscators,Blowfish,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Blowfish.cs,Decrypt,The following statement contains a magic number: xr ^= ((S[0 * 256 + (xl >> 24)] + S[1 * 256 + (byte)(xl >> 16)]) ^ S[2 * 256 + (byte)(xl >> 8)]) + S[3 * 256 + (byte)xl];
Magic Number,de4dot.code.deobfuscators,Blowfish,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Blowfish.cs,Decrypt,The following statement contains a magic number: i >= 2
Magic Number,de4dot.code.deobfuscators,ConstantsReader,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\ConstantsReader.cs,GetInt32,The following statement contains a magic number: switch (instr.OpCode.Code) {  				case Code.Conv_I1:  					if (!emulateConvInstrs || stack.Count < 1)  						goto done;  					stack.Push(new ConstantInfo<int>(index' (sbyte)stack.Pop().constant));  					break;    				case Code.Conv_U1:  					if (!emulateConvInstrs || stack.Count < 1)  						goto done;  					stack.Push(new ConstantInfo<int>(index' (byte)stack.Pop().constant));  					break;    				case Code.Conv_I2:  					if (!emulateConvInstrs || stack.Count < 1)  						goto done;  					stack.Push(new ConstantInfo<int>(index' (short)stack.Pop().constant));  					break;    				case Code.Conv_U2:  					if (!emulateConvInstrs || stack.Count < 1)  						goto done;  					stack.Push(new ConstantInfo<int>(index' (ushort)stack.Pop().constant));  					break;    				case Code.Conv_I4:  				case Code.Conv_U4:  					if (!emulateConvInstrs || stack.Count < 1)  						goto done;  					stack.Push(new ConstantInfo<int>(index' stack.Pop().constant));  					break;    				case Code.Not:  					if (stack.Count < 1)  						goto done;  					stack.Push(new ConstantInfo<int>(index' ~stack.Pop().constant));  					break;    				case Code.Neg:  					if (stack.Count < 1)  						goto done;  					stack.Push(new ConstantInfo<int>(index' -stack.Pop().constant));  					break;    				case Code.Ldloc:  				case Code.Ldloc_S:  				case Code.Ldloc_0:  				case Code.Ldloc_1:  				case Code.Ldloc_2:  				case Code.Ldloc_3:  					if (!GetLocalConstantInt32(instr' out op1))  						goto done;  					stack.Push(new ConstantInfo<int>(index' op1));  					break;    				case Code.Ldarg:  				case Code.Ldarg_S:  				case Code.Ldarg_0:  				case Code.Ldarg_1:  				case Code.Ldarg_2:  				case Code.Ldarg_3:  					if (!GetArgConstantInt32(instr' out op1))  						goto done;  					stack.Push(new ConstantInfo<int>(index' op1));  					break;    				case Code.Ldc_I4:  				case Code.Ldc_I4_S:  				case Code.Ldc_I4_0:  				case Code.Ldc_I4_1:  				case Code.Ldc_I4_2:  				case Code.Ldc_I4_3:  				case Code.Ldc_I4_4:  				case Code.Ldc_I4_5:  				case Code.Ldc_I4_6:  				case Code.Ldc_I4_7:  				case Code.Ldc_I4_8:  				case Code.Ldc_I4_M1:  					stack.Push(new ConstantInfo<int>(index' instr.GetLdcI4Value()));  					break;    				case Code.Add:  					if (stack.Count < 2)  						goto done;  					info2 = stack.Pop();  					info1 = stack.Pop();  					stack.Push(new ConstantInfo<int>(index' info1.constant + info2.constant));  					break;    				case Code.Sub:  					if (stack.Count < 2)  						goto done;  					info2 = stack.Pop();  					info1 = stack.Pop();  					stack.Push(new ConstantInfo<int>(index' info1.constant - info2.constant));  					break;    				case Code.Xor:  					if (stack.Count < 2)  						goto done;  					info2 = stack.Pop();  					info1 = stack.Pop();  					stack.Push(new ConstantInfo<int>(index' info1.constant ^ info2.constant));  					break;    				case Code.Or:  					if (stack.Count < 2)  						goto done;  					info2 = stack.Pop();  					info1 = stack.Pop();  					stack.Push(new ConstantInfo<int>(index' info1.constant | info2.constant));  					break;    				case Code.And:  					if (stack.Count < 2)  						goto done;  					info2 = stack.Pop();  					info1 = stack.Pop();  					stack.Push(new ConstantInfo<int>(index' info1.constant & info2.constant));  					break;    				case Code.Mul:  					if (stack.Count < 2)  						goto done;  					info2 = stack.Pop();  					info1 = stack.Pop();  					stack.Push(new ConstantInfo<int>(index' info1.constant * info2.constant));  					break;    				case Code.Div:  					if (stack.Count < 2)  						goto done;  					info2 = stack.Pop();  					if (info2.constant == 0)  						goto done;  					info1 = stack.Pop();  					stack.Push(new ConstantInfo<int>(index' info1.constant / info2.constant));  					break;    				case Code.Div_Un:  					if (stack.Count < 2)  						goto done;  					info2 = stack.Pop();  					if (info2.constant == 0)  						goto done;  					info1 = stack.Pop();  					stack.Push(new ConstantInfo<int>(index' (int)((uint)info1.constant / (uint)info2.constant)));  					break;    				default:  					goto done;  				}
Magic Number,de4dot.code.deobfuscators,ConstantsReader,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\ConstantsReader.cs,GetInt32,The following statement contains a magic number: switch (instr.OpCode.Code) {  				case Code.Conv_I1:  					if (!emulateConvInstrs || stack.Count < 1)  						goto done;  					stack.Push(new ConstantInfo<int>(index' (sbyte)stack.Pop().constant));  					break;    				case Code.Conv_U1:  					if (!emulateConvInstrs || stack.Count < 1)  						goto done;  					stack.Push(new ConstantInfo<int>(index' (byte)stack.Pop().constant));  					break;    				case Code.Conv_I2:  					if (!emulateConvInstrs || stack.Count < 1)  						goto done;  					stack.Push(new ConstantInfo<int>(index' (short)stack.Pop().constant));  					break;    				case Code.Conv_U2:  					if (!emulateConvInstrs || stack.Count < 1)  						goto done;  					stack.Push(new ConstantInfo<int>(index' (ushort)stack.Pop().constant));  					break;    				case Code.Conv_I4:  				case Code.Conv_U4:  					if (!emulateConvInstrs || stack.Count < 1)  						goto done;  					stack.Push(new ConstantInfo<int>(index' stack.Pop().constant));  					break;    				case Code.Not:  					if (stack.Count < 1)  						goto done;  					stack.Push(new ConstantInfo<int>(index' ~stack.Pop().constant));  					break;    				case Code.Neg:  					if (stack.Count < 1)  						goto done;  					stack.Push(new ConstantInfo<int>(index' -stack.Pop().constant));  					break;    				case Code.Ldloc:  				case Code.Ldloc_S:  				case Code.Ldloc_0:  				case Code.Ldloc_1:  				case Code.Ldloc_2:  				case Code.Ldloc_3:  					if (!GetLocalConstantInt32(instr' out op1))  						goto done;  					stack.Push(new ConstantInfo<int>(index' op1));  					break;    				case Code.Ldarg:  				case Code.Ldarg_S:  				case Code.Ldarg_0:  				case Code.Ldarg_1:  				case Code.Ldarg_2:  				case Code.Ldarg_3:  					if (!GetArgConstantInt32(instr' out op1))  						goto done;  					stack.Push(new ConstantInfo<int>(index' op1));  					break;    				case Code.Ldc_I4:  				case Code.Ldc_I4_S:  				case Code.Ldc_I4_0:  				case Code.Ldc_I4_1:  				case Code.Ldc_I4_2:  				case Code.Ldc_I4_3:  				case Code.Ldc_I4_4:  				case Code.Ldc_I4_5:  				case Code.Ldc_I4_6:  				case Code.Ldc_I4_7:  				case Code.Ldc_I4_8:  				case Code.Ldc_I4_M1:  					stack.Push(new ConstantInfo<int>(index' instr.GetLdcI4Value()));  					break;    				case Code.Add:  					if (stack.Count < 2)  						goto done;  					info2 = stack.Pop();  					info1 = stack.Pop();  					stack.Push(new ConstantInfo<int>(index' info1.constant + info2.constant));  					break;    				case Code.Sub:  					if (stack.Count < 2)  						goto done;  					info2 = stack.Pop();  					info1 = stack.Pop();  					stack.Push(new ConstantInfo<int>(index' info1.constant - info2.constant));  					break;    				case Code.Xor:  					if (stack.Count < 2)  						goto done;  					info2 = stack.Pop();  					info1 = stack.Pop();  					stack.Push(new ConstantInfo<int>(index' info1.constant ^ info2.constant));  					break;    				case Code.Or:  					if (stack.Count < 2)  						goto done;  					info2 = stack.Pop();  					info1 = stack.Pop();  					stack.Push(new ConstantInfo<int>(index' info1.constant | info2.constant));  					break;    				case Code.And:  					if (stack.Count < 2)  						goto done;  					info2 = stack.Pop();  					info1 = stack.Pop();  					stack.Push(new ConstantInfo<int>(index' info1.constant & info2.constant));  					break;    				case Code.Mul:  					if (stack.Count < 2)  						goto done;  					info2 = stack.Pop();  					info1 = stack.Pop();  					stack.Push(new ConstantInfo<int>(index' info1.constant * info2.constant));  					break;    				case Code.Div:  					if (stack.Count < 2)  						goto done;  					info2 = stack.Pop();  					if (info2.constant == 0)  						goto done;  					info1 = stack.Pop();  					stack.Push(new ConstantInfo<int>(index' info1.constant / info2.constant));  					break;    				case Code.Div_Un:  					if (stack.Count < 2)  						goto done;  					info2 = stack.Pop();  					if (info2.constant == 0)  						goto done;  					info1 = stack.Pop();  					stack.Push(new ConstantInfo<int>(index' (int)((uint)info1.constant / (uint)info2.constant)));  					break;    				default:  					goto done;  				}
Magic Number,de4dot.code.deobfuscators,ConstantsReader,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\ConstantsReader.cs,GetInt32,The following statement contains a magic number: switch (instr.OpCode.Code) {  				case Code.Conv_I1:  					if (!emulateConvInstrs || stack.Count < 1)  						goto done;  					stack.Push(new ConstantInfo<int>(index' (sbyte)stack.Pop().constant));  					break;    				case Code.Conv_U1:  					if (!emulateConvInstrs || stack.Count < 1)  						goto done;  					stack.Push(new ConstantInfo<int>(index' (byte)stack.Pop().constant));  					break;    				case Code.Conv_I2:  					if (!emulateConvInstrs || stack.Count < 1)  						goto done;  					stack.Push(new ConstantInfo<int>(index' (short)stack.Pop().constant));  					break;    				case Code.Conv_U2:  					if (!emulateConvInstrs || stack.Count < 1)  						goto done;  					stack.Push(new ConstantInfo<int>(index' (ushort)stack.Pop().constant));  					break;    				case Code.Conv_I4:  				case Code.Conv_U4:  					if (!emulateConvInstrs || stack.Count < 1)  						goto done;  					stack.Push(new ConstantInfo<int>(index' stack.Pop().constant));  					break;    				case Code.Not:  					if (stack.Count < 1)  						goto done;  					stack.Push(new ConstantInfo<int>(index' ~stack.Pop().constant));  					break;    				case Code.Neg:  					if (stack.Count < 1)  						goto done;  					stack.Push(new ConstantInfo<int>(index' -stack.Pop().constant));  					break;    				case Code.Ldloc:  				case Code.Ldloc_S:  				case Code.Ldloc_0:  				case Code.Ldloc_1:  				case Code.Ldloc_2:  				case Code.Ldloc_3:  					if (!GetLocalConstantInt32(instr' out op1))  						goto done;  					stack.Push(new ConstantInfo<int>(index' op1));  					break;    				case Code.Ldarg:  				case Code.Ldarg_S:  				case Code.Ldarg_0:  				case Code.Ldarg_1:  				case Code.Ldarg_2:  				case Code.Ldarg_3:  					if (!GetArgConstantInt32(instr' out op1))  						goto done;  					stack.Push(new ConstantInfo<int>(index' op1));  					break;    				case Code.Ldc_I4:  				case Code.Ldc_I4_S:  				case Code.Ldc_I4_0:  				case Code.Ldc_I4_1:  				case Code.Ldc_I4_2:  				case Code.Ldc_I4_3:  				case Code.Ldc_I4_4:  				case Code.Ldc_I4_5:  				case Code.Ldc_I4_6:  				case Code.Ldc_I4_7:  				case Code.Ldc_I4_8:  				case Code.Ldc_I4_M1:  					stack.Push(new ConstantInfo<int>(index' instr.GetLdcI4Value()));  					break;    				case Code.Add:  					if (stack.Count < 2)  						goto done;  					info2 = stack.Pop();  					info1 = stack.Pop();  					stack.Push(new ConstantInfo<int>(index' info1.constant + info2.constant));  					break;    				case Code.Sub:  					if (stack.Count < 2)  						goto done;  					info2 = stack.Pop();  					info1 = stack.Pop();  					stack.Push(new ConstantInfo<int>(index' info1.constant - info2.constant));  					break;    				case Code.Xor:  					if (stack.Count < 2)  						goto done;  					info2 = stack.Pop();  					info1 = stack.Pop();  					stack.Push(new ConstantInfo<int>(index' info1.constant ^ info2.constant));  					break;    				case Code.Or:  					if (stack.Count < 2)  						goto done;  					info2 = stack.Pop();  					info1 = stack.Pop();  					stack.Push(new ConstantInfo<int>(index' info1.constant | info2.constant));  					break;    				case Code.And:  					if (stack.Count < 2)  						goto done;  					info2 = stack.Pop();  					info1 = stack.Pop();  					stack.Push(new ConstantInfo<int>(index' info1.constant & info2.constant));  					break;    				case Code.Mul:  					if (stack.Count < 2)  						goto done;  					info2 = stack.Pop();  					info1 = stack.Pop();  					stack.Push(new ConstantInfo<int>(index' info1.constant * info2.constant));  					break;    				case Code.Div:  					if (stack.Count < 2)  						goto done;  					info2 = stack.Pop();  					if (info2.constant == 0)  						goto done;  					info1 = stack.Pop();  					stack.Push(new ConstantInfo<int>(index' info1.constant / info2.constant));  					break;    				case Code.Div_Un:  					if (stack.Count < 2)  						goto done;  					info2 = stack.Pop();  					if (info2.constant == 0)  						goto done;  					info1 = stack.Pop();  					stack.Push(new ConstantInfo<int>(index' (int)((uint)info1.constant / (uint)info2.constant)));  					break;    				default:  					goto done;  				}
Magic Number,de4dot.code.deobfuscators,ConstantsReader,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\ConstantsReader.cs,GetInt32,The following statement contains a magic number: switch (instr.OpCode.Code) {  				case Code.Conv_I1:  					if (!emulateConvInstrs || stack.Count < 1)  						goto done;  					stack.Push(new ConstantInfo<int>(index' (sbyte)stack.Pop().constant));  					break;    				case Code.Conv_U1:  					if (!emulateConvInstrs || stack.Count < 1)  						goto done;  					stack.Push(new ConstantInfo<int>(index' (byte)stack.Pop().constant));  					break;    				case Code.Conv_I2:  					if (!emulateConvInstrs || stack.Count < 1)  						goto done;  					stack.Push(new ConstantInfo<int>(index' (short)stack.Pop().constant));  					break;    				case Code.Conv_U2:  					if (!emulateConvInstrs || stack.Count < 1)  						goto done;  					stack.Push(new ConstantInfo<int>(index' (ushort)stack.Pop().constant));  					break;    				case Code.Conv_I4:  				case Code.Conv_U4:  					if (!emulateConvInstrs || stack.Count < 1)  						goto done;  					stack.Push(new ConstantInfo<int>(index' stack.Pop().constant));  					break;    				case Code.Not:  					if (stack.Count < 1)  						goto done;  					stack.Push(new ConstantInfo<int>(index' ~stack.Pop().constant));  					break;    				case Code.Neg:  					if (stack.Count < 1)  						goto done;  					stack.Push(new ConstantInfo<int>(index' -stack.Pop().constant));  					break;    				case Code.Ldloc:  				case Code.Ldloc_S:  				case Code.Ldloc_0:  				case Code.Ldloc_1:  				case Code.Ldloc_2:  				case Code.Ldloc_3:  					if (!GetLocalConstantInt32(instr' out op1))  						goto done;  					stack.Push(new ConstantInfo<int>(index' op1));  					break;    				case Code.Ldarg:  				case Code.Ldarg_S:  				case Code.Ldarg_0:  				case Code.Ldarg_1:  				case Code.Ldarg_2:  				case Code.Ldarg_3:  					if (!GetArgConstantInt32(instr' out op1))  						goto done;  					stack.Push(new ConstantInfo<int>(index' op1));  					break;    				case Code.Ldc_I4:  				case Code.Ldc_I4_S:  				case Code.Ldc_I4_0:  				case Code.Ldc_I4_1:  				case Code.Ldc_I4_2:  				case Code.Ldc_I4_3:  				case Code.Ldc_I4_4:  				case Code.Ldc_I4_5:  				case Code.Ldc_I4_6:  				case Code.Ldc_I4_7:  				case Code.Ldc_I4_8:  				case Code.Ldc_I4_M1:  					stack.Push(new ConstantInfo<int>(index' instr.GetLdcI4Value()));  					break;    				case Code.Add:  					if (stack.Count < 2)  						goto done;  					info2 = stack.Pop();  					info1 = stack.Pop();  					stack.Push(new ConstantInfo<int>(index' info1.constant + info2.constant));  					break;    				case Code.Sub:  					if (stack.Count < 2)  						goto done;  					info2 = stack.Pop();  					info1 = stack.Pop();  					stack.Push(new ConstantInfo<int>(index' info1.constant - info2.constant));  					break;    				case Code.Xor:  					if (stack.Count < 2)  						goto done;  					info2 = stack.Pop();  					info1 = stack.Pop();  					stack.Push(new ConstantInfo<int>(index' info1.constant ^ info2.constant));  					break;    				case Code.Or:  					if (stack.Count < 2)  						goto done;  					info2 = stack.Pop();  					info1 = stack.Pop();  					stack.Push(new ConstantInfo<int>(index' info1.constant | info2.constant));  					break;    				case Code.And:  					if (stack.Count < 2)  						goto done;  					info2 = stack.Pop();  					info1 = stack.Pop();  					stack.Push(new ConstantInfo<int>(index' info1.constant & info2.constant));  					break;    				case Code.Mul:  					if (stack.Count < 2)  						goto done;  					info2 = stack.Pop();  					info1 = stack.Pop();  					stack.Push(new ConstantInfo<int>(index' info1.constant * info2.constant));  					break;    				case Code.Div:  					if (stack.Count < 2)  						goto done;  					info2 = stack.Pop();  					if (info2.constant == 0)  						goto done;  					info1 = stack.Pop();  					stack.Push(new ConstantInfo<int>(index' info1.constant / info2.constant));  					break;    				case Code.Div_Un:  					if (stack.Count < 2)  						goto done;  					info2 = stack.Pop();  					if (info2.constant == 0)  						goto done;  					info1 = stack.Pop();  					stack.Push(new ConstantInfo<int>(index' (int)((uint)info1.constant / (uint)info2.constant)));  					break;    				default:  					goto done;  				}
Magic Number,de4dot.code.deobfuscators,ConstantsReader,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\ConstantsReader.cs,GetInt32,The following statement contains a magic number: switch (instr.OpCode.Code) {  				case Code.Conv_I1:  					if (!emulateConvInstrs || stack.Count < 1)  						goto done;  					stack.Push(new ConstantInfo<int>(index' (sbyte)stack.Pop().constant));  					break;    				case Code.Conv_U1:  					if (!emulateConvInstrs || stack.Count < 1)  						goto done;  					stack.Push(new ConstantInfo<int>(index' (byte)stack.Pop().constant));  					break;    				case Code.Conv_I2:  					if (!emulateConvInstrs || stack.Count < 1)  						goto done;  					stack.Push(new ConstantInfo<int>(index' (short)stack.Pop().constant));  					break;    				case Code.Conv_U2:  					if (!emulateConvInstrs || stack.Count < 1)  						goto done;  					stack.Push(new ConstantInfo<int>(index' (ushort)stack.Pop().constant));  					break;    				case Code.Conv_I4:  				case Code.Conv_U4:  					if (!emulateConvInstrs || stack.Count < 1)  						goto done;  					stack.Push(new ConstantInfo<int>(index' stack.Pop().constant));  					break;    				case Code.Not:  					if (stack.Count < 1)  						goto done;  					stack.Push(new ConstantInfo<int>(index' ~stack.Pop().constant));  					break;    				case Code.Neg:  					if (stack.Count < 1)  						goto done;  					stack.Push(new ConstantInfo<int>(index' -stack.Pop().constant));  					break;    				case Code.Ldloc:  				case Code.Ldloc_S:  				case Code.Ldloc_0:  				case Code.Ldloc_1:  				case Code.Ldloc_2:  				case Code.Ldloc_3:  					if (!GetLocalConstantInt32(instr' out op1))  						goto done;  					stack.Push(new ConstantInfo<int>(index' op1));  					break;    				case Code.Ldarg:  				case Code.Ldarg_S:  				case Code.Ldarg_0:  				case Code.Ldarg_1:  				case Code.Ldarg_2:  				case Code.Ldarg_3:  					if (!GetArgConstantInt32(instr' out op1))  						goto done;  					stack.Push(new ConstantInfo<int>(index' op1));  					break;    				case Code.Ldc_I4:  				case Code.Ldc_I4_S:  				case Code.Ldc_I4_0:  				case Code.Ldc_I4_1:  				case Code.Ldc_I4_2:  				case Code.Ldc_I4_3:  				case Code.Ldc_I4_4:  				case Code.Ldc_I4_5:  				case Code.Ldc_I4_6:  				case Code.Ldc_I4_7:  				case Code.Ldc_I4_8:  				case Code.Ldc_I4_M1:  					stack.Push(new ConstantInfo<int>(index' instr.GetLdcI4Value()));  					break;    				case Code.Add:  					if (stack.Count < 2)  						goto done;  					info2 = stack.Pop();  					info1 = stack.Pop();  					stack.Push(new ConstantInfo<int>(index' info1.constant + info2.constant));  					break;    				case Code.Sub:  					if (stack.Count < 2)  						goto done;  					info2 = stack.Pop();  					info1 = stack.Pop();  					stack.Push(new ConstantInfo<int>(index' info1.constant - info2.constant));  					break;    				case Code.Xor:  					if (stack.Count < 2)  						goto done;  					info2 = stack.Pop();  					info1 = stack.Pop();  					stack.Push(new ConstantInfo<int>(index' info1.constant ^ info2.constant));  					break;    				case Code.Or:  					if (stack.Count < 2)  						goto done;  					info2 = stack.Pop();  					info1 = stack.Pop();  					stack.Push(new ConstantInfo<int>(index' info1.constant | info2.constant));  					break;    				case Code.And:  					if (stack.Count < 2)  						goto done;  					info2 = stack.Pop();  					info1 = stack.Pop();  					stack.Push(new ConstantInfo<int>(index' info1.constant & info2.constant));  					break;    				case Code.Mul:  					if (stack.Count < 2)  						goto done;  					info2 = stack.Pop();  					info1 = stack.Pop();  					stack.Push(new ConstantInfo<int>(index' info1.constant * info2.constant));  					break;    				case Code.Div:  					if (stack.Count < 2)  						goto done;  					info2 = stack.Pop();  					if (info2.constant == 0)  						goto done;  					info1 = stack.Pop();  					stack.Push(new ConstantInfo<int>(index' info1.constant / info2.constant));  					break;    				case Code.Div_Un:  					if (stack.Count < 2)  						goto done;  					info2 = stack.Pop();  					if (info2.constant == 0)  						goto done;  					info1 = stack.Pop();  					stack.Push(new ConstantInfo<int>(index' (int)((uint)info1.constant / (uint)info2.constant)));  					break;    				default:  					goto done;  				}
Magic Number,de4dot.code.deobfuscators,ConstantsReader,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\ConstantsReader.cs,GetInt32,The following statement contains a magic number: switch (instr.OpCode.Code) {  				case Code.Conv_I1:  					if (!emulateConvInstrs || stack.Count < 1)  						goto done;  					stack.Push(new ConstantInfo<int>(index' (sbyte)stack.Pop().constant));  					break;    				case Code.Conv_U1:  					if (!emulateConvInstrs || stack.Count < 1)  						goto done;  					stack.Push(new ConstantInfo<int>(index' (byte)stack.Pop().constant));  					break;    				case Code.Conv_I2:  					if (!emulateConvInstrs || stack.Count < 1)  						goto done;  					stack.Push(new ConstantInfo<int>(index' (short)stack.Pop().constant));  					break;    				case Code.Conv_U2:  					if (!emulateConvInstrs || stack.Count < 1)  						goto done;  					stack.Push(new ConstantInfo<int>(index' (ushort)stack.Pop().constant));  					break;    				case Code.Conv_I4:  				case Code.Conv_U4:  					if (!emulateConvInstrs || stack.Count < 1)  						goto done;  					stack.Push(new ConstantInfo<int>(index' stack.Pop().constant));  					break;    				case Code.Not:  					if (stack.Count < 1)  						goto done;  					stack.Push(new ConstantInfo<int>(index' ~stack.Pop().constant));  					break;    				case Code.Neg:  					if (stack.Count < 1)  						goto done;  					stack.Push(new ConstantInfo<int>(index' -stack.Pop().constant));  					break;    				case Code.Ldloc:  				case Code.Ldloc_S:  				case Code.Ldloc_0:  				case Code.Ldloc_1:  				case Code.Ldloc_2:  				case Code.Ldloc_3:  					if (!GetLocalConstantInt32(instr' out op1))  						goto done;  					stack.Push(new ConstantInfo<int>(index' op1));  					break;    				case Code.Ldarg:  				case Code.Ldarg_S:  				case Code.Ldarg_0:  				case Code.Ldarg_1:  				case Code.Ldarg_2:  				case Code.Ldarg_3:  					if (!GetArgConstantInt32(instr' out op1))  						goto done;  					stack.Push(new ConstantInfo<int>(index' op1));  					break;    				case Code.Ldc_I4:  				case Code.Ldc_I4_S:  				case Code.Ldc_I4_0:  				case Code.Ldc_I4_1:  				case Code.Ldc_I4_2:  				case Code.Ldc_I4_3:  				case Code.Ldc_I4_4:  				case Code.Ldc_I4_5:  				case Code.Ldc_I4_6:  				case Code.Ldc_I4_7:  				case Code.Ldc_I4_8:  				case Code.Ldc_I4_M1:  					stack.Push(new ConstantInfo<int>(index' instr.GetLdcI4Value()));  					break;    				case Code.Add:  					if (stack.Count < 2)  						goto done;  					info2 = stack.Pop();  					info1 = stack.Pop();  					stack.Push(new ConstantInfo<int>(index' info1.constant + info2.constant));  					break;    				case Code.Sub:  					if (stack.Count < 2)  						goto done;  					info2 = stack.Pop();  					info1 = stack.Pop();  					stack.Push(new ConstantInfo<int>(index' info1.constant - info2.constant));  					break;    				case Code.Xor:  					if (stack.Count < 2)  						goto done;  					info2 = stack.Pop();  					info1 = stack.Pop();  					stack.Push(new ConstantInfo<int>(index' info1.constant ^ info2.constant));  					break;    				case Code.Or:  					if (stack.Count < 2)  						goto done;  					info2 = stack.Pop();  					info1 = stack.Pop();  					stack.Push(new ConstantInfo<int>(index' info1.constant | info2.constant));  					break;    				case Code.And:  					if (stack.Count < 2)  						goto done;  					info2 = stack.Pop();  					info1 = stack.Pop();  					stack.Push(new ConstantInfo<int>(index' info1.constant & info2.constant));  					break;    				case Code.Mul:  					if (stack.Count < 2)  						goto done;  					info2 = stack.Pop();  					info1 = stack.Pop();  					stack.Push(new ConstantInfo<int>(index' info1.constant * info2.constant));  					break;    				case Code.Div:  					if (stack.Count < 2)  						goto done;  					info2 = stack.Pop();  					if (info2.constant == 0)  						goto done;  					info1 = stack.Pop();  					stack.Push(new ConstantInfo<int>(index' info1.constant / info2.constant));  					break;    				case Code.Div_Un:  					if (stack.Count < 2)  						goto done;  					info2 = stack.Pop();  					if (info2.constant == 0)  						goto done;  					info1 = stack.Pop();  					stack.Push(new ConstantInfo<int>(index' (int)((uint)info1.constant / (uint)info2.constant)));  					break;    				default:  					goto done;  				}
Magic Number,de4dot.code.deobfuscators,ConstantsReader,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\ConstantsReader.cs,GetInt32,The following statement contains a magic number: switch (instr.OpCode.Code) {  				case Code.Conv_I1:  					if (!emulateConvInstrs || stack.Count < 1)  						goto done;  					stack.Push(new ConstantInfo<int>(index' (sbyte)stack.Pop().constant));  					break;    				case Code.Conv_U1:  					if (!emulateConvInstrs || stack.Count < 1)  						goto done;  					stack.Push(new ConstantInfo<int>(index' (byte)stack.Pop().constant));  					break;    				case Code.Conv_I2:  					if (!emulateConvInstrs || stack.Count < 1)  						goto done;  					stack.Push(new ConstantInfo<int>(index' (short)stack.Pop().constant));  					break;    				case Code.Conv_U2:  					if (!emulateConvInstrs || stack.Count < 1)  						goto done;  					stack.Push(new ConstantInfo<int>(index' (ushort)stack.Pop().constant));  					break;    				case Code.Conv_I4:  				case Code.Conv_U4:  					if (!emulateConvInstrs || stack.Count < 1)  						goto done;  					stack.Push(new ConstantInfo<int>(index' stack.Pop().constant));  					break;    				case Code.Not:  					if (stack.Count < 1)  						goto done;  					stack.Push(new ConstantInfo<int>(index' ~stack.Pop().constant));  					break;    				case Code.Neg:  					if (stack.Count < 1)  						goto done;  					stack.Push(new ConstantInfo<int>(index' -stack.Pop().constant));  					break;    				case Code.Ldloc:  				case Code.Ldloc_S:  				case Code.Ldloc_0:  				case Code.Ldloc_1:  				case Code.Ldloc_2:  				case Code.Ldloc_3:  					if (!GetLocalConstantInt32(instr' out op1))  						goto done;  					stack.Push(new ConstantInfo<int>(index' op1));  					break;    				case Code.Ldarg:  				case Code.Ldarg_S:  				case Code.Ldarg_0:  				case Code.Ldarg_1:  				case Code.Ldarg_2:  				case Code.Ldarg_3:  					if (!GetArgConstantInt32(instr' out op1))  						goto done;  					stack.Push(new ConstantInfo<int>(index' op1));  					break;    				case Code.Ldc_I4:  				case Code.Ldc_I4_S:  				case Code.Ldc_I4_0:  				case Code.Ldc_I4_1:  				case Code.Ldc_I4_2:  				case Code.Ldc_I4_3:  				case Code.Ldc_I4_4:  				case Code.Ldc_I4_5:  				case Code.Ldc_I4_6:  				case Code.Ldc_I4_7:  				case Code.Ldc_I4_8:  				case Code.Ldc_I4_M1:  					stack.Push(new ConstantInfo<int>(index' instr.GetLdcI4Value()));  					break;    				case Code.Add:  					if (stack.Count < 2)  						goto done;  					info2 = stack.Pop();  					info1 = stack.Pop();  					stack.Push(new ConstantInfo<int>(index' info1.constant + info2.constant));  					break;    				case Code.Sub:  					if (stack.Count < 2)  						goto done;  					info2 = stack.Pop();  					info1 = stack.Pop();  					stack.Push(new ConstantInfo<int>(index' info1.constant - info2.constant));  					break;    				case Code.Xor:  					if (stack.Count < 2)  						goto done;  					info2 = stack.Pop();  					info1 = stack.Pop();  					stack.Push(new ConstantInfo<int>(index' info1.constant ^ info2.constant));  					break;    				case Code.Or:  					if (stack.Count < 2)  						goto done;  					info2 = stack.Pop();  					info1 = stack.Pop();  					stack.Push(new ConstantInfo<int>(index' info1.constant | info2.constant));  					break;    				case Code.And:  					if (stack.Count < 2)  						goto done;  					info2 = stack.Pop();  					info1 = stack.Pop();  					stack.Push(new ConstantInfo<int>(index' info1.constant & info2.constant));  					break;    				case Code.Mul:  					if (stack.Count < 2)  						goto done;  					info2 = stack.Pop();  					info1 = stack.Pop();  					stack.Push(new ConstantInfo<int>(index' info1.constant * info2.constant));  					break;    				case Code.Div:  					if (stack.Count < 2)  						goto done;  					info2 = stack.Pop();  					if (info2.constant == 0)  						goto done;  					info1 = stack.Pop();  					stack.Push(new ConstantInfo<int>(index' info1.constant / info2.constant));  					break;    				case Code.Div_Un:  					if (stack.Count < 2)  						goto done;  					info2 = stack.Pop();  					if (info2.constant == 0)  						goto done;  					info1 = stack.Pop();  					stack.Push(new ConstantInfo<int>(index' (int)((uint)info1.constant / (uint)info2.constant)));  					break;    				default:  					goto done;  				}
Magic Number,de4dot.code.deobfuscators,ConstantsReader,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\ConstantsReader.cs,GetInt32,The following statement contains a magic number: switch (instr.OpCode.Code) {  				case Code.Conv_I1:  					if (!emulateConvInstrs || stack.Count < 1)  						goto done;  					stack.Push(new ConstantInfo<int>(index' (sbyte)stack.Pop().constant));  					break;    				case Code.Conv_U1:  					if (!emulateConvInstrs || stack.Count < 1)  						goto done;  					stack.Push(new ConstantInfo<int>(index' (byte)stack.Pop().constant));  					break;    				case Code.Conv_I2:  					if (!emulateConvInstrs || stack.Count < 1)  						goto done;  					stack.Push(new ConstantInfo<int>(index' (short)stack.Pop().constant));  					break;    				case Code.Conv_U2:  					if (!emulateConvInstrs || stack.Count < 1)  						goto done;  					stack.Push(new ConstantInfo<int>(index' (ushort)stack.Pop().constant));  					break;    				case Code.Conv_I4:  				case Code.Conv_U4:  					if (!emulateConvInstrs || stack.Count < 1)  						goto done;  					stack.Push(new ConstantInfo<int>(index' stack.Pop().constant));  					break;    				case Code.Not:  					if (stack.Count < 1)  						goto done;  					stack.Push(new ConstantInfo<int>(index' ~stack.Pop().constant));  					break;    				case Code.Neg:  					if (stack.Count < 1)  						goto done;  					stack.Push(new ConstantInfo<int>(index' -stack.Pop().constant));  					break;    				case Code.Ldloc:  				case Code.Ldloc_S:  				case Code.Ldloc_0:  				case Code.Ldloc_1:  				case Code.Ldloc_2:  				case Code.Ldloc_3:  					if (!GetLocalConstantInt32(instr' out op1))  						goto done;  					stack.Push(new ConstantInfo<int>(index' op1));  					break;    				case Code.Ldarg:  				case Code.Ldarg_S:  				case Code.Ldarg_0:  				case Code.Ldarg_1:  				case Code.Ldarg_2:  				case Code.Ldarg_3:  					if (!GetArgConstantInt32(instr' out op1))  						goto done;  					stack.Push(new ConstantInfo<int>(index' op1));  					break;    				case Code.Ldc_I4:  				case Code.Ldc_I4_S:  				case Code.Ldc_I4_0:  				case Code.Ldc_I4_1:  				case Code.Ldc_I4_2:  				case Code.Ldc_I4_3:  				case Code.Ldc_I4_4:  				case Code.Ldc_I4_5:  				case Code.Ldc_I4_6:  				case Code.Ldc_I4_7:  				case Code.Ldc_I4_8:  				case Code.Ldc_I4_M1:  					stack.Push(new ConstantInfo<int>(index' instr.GetLdcI4Value()));  					break;    				case Code.Add:  					if (stack.Count < 2)  						goto done;  					info2 = stack.Pop();  					info1 = stack.Pop();  					stack.Push(new ConstantInfo<int>(index' info1.constant + info2.constant));  					break;    				case Code.Sub:  					if (stack.Count < 2)  						goto done;  					info2 = stack.Pop();  					info1 = stack.Pop();  					stack.Push(new ConstantInfo<int>(index' info1.constant - info2.constant));  					break;    				case Code.Xor:  					if (stack.Count < 2)  						goto done;  					info2 = stack.Pop();  					info1 = stack.Pop();  					stack.Push(new ConstantInfo<int>(index' info1.constant ^ info2.constant));  					break;    				case Code.Or:  					if (stack.Count < 2)  						goto done;  					info2 = stack.Pop();  					info1 = stack.Pop();  					stack.Push(new ConstantInfo<int>(index' info1.constant | info2.constant));  					break;    				case Code.And:  					if (stack.Count < 2)  						goto done;  					info2 = stack.Pop();  					info1 = stack.Pop();  					stack.Push(new ConstantInfo<int>(index' info1.constant & info2.constant));  					break;    				case Code.Mul:  					if (stack.Count < 2)  						goto done;  					info2 = stack.Pop();  					info1 = stack.Pop();  					stack.Push(new ConstantInfo<int>(index' info1.constant * info2.constant));  					break;    				case Code.Div:  					if (stack.Count < 2)  						goto done;  					info2 = stack.Pop();  					if (info2.constant == 0)  						goto done;  					info1 = stack.Pop();  					stack.Push(new ConstantInfo<int>(index' info1.constant / info2.constant));  					break;    				case Code.Div_Un:  					if (stack.Count < 2)  						goto done;  					info2 = stack.Pop();  					if (info2.constant == 0)  						goto done;  					info1 = stack.Pop();  					stack.Push(new ConstantInfo<int>(index' (int)((uint)info1.constant / (uint)info2.constant)));  					break;    				default:  					goto done;  				}
Magic Number,de4dot.code.deobfuscators,ConstantsReader,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\ConstantsReader.cs,GetInt64,The following statement contains a magic number: switch (instr.OpCode.Code) {  				case Code.Conv_I1:  					if (!emulateConvInstrs || stack.Count < 1)  						goto done;  					stack.Push(new ConstantInfo<long>(index' (sbyte)stack.Pop().constant));  					break;    				case Code.Conv_U1:  					if (!emulateConvInstrs || stack.Count < 1)  						goto done;  					stack.Push(new ConstantInfo<long>(index' (byte)stack.Pop().constant));  					break;    				case Code.Conv_I2:  					if (!emulateConvInstrs || stack.Count < 1)  						goto done;  					stack.Push(new ConstantInfo<long>(index' (short)stack.Pop().constant));  					break;    				case Code.Conv_U2:  					if (!emulateConvInstrs || stack.Count < 1)  						goto done;  					stack.Push(new ConstantInfo<long>(index' (ushort)stack.Pop().constant));  					break;    				case Code.Conv_I4:  					if (!emulateConvInstrs || stack.Count < 1)  						goto done;  					stack.Push(new ConstantInfo<long>(index' (int)stack.Pop().constant));  					break;    				case Code.Conv_U4:  					if (!emulateConvInstrs || stack.Count < 1)  						goto done;  					stack.Push(new ConstantInfo<long>(index' (uint)stack.Pop().constant));  					break;    				case Code.Conv_I8:  				case Code.Conv_U8:  					if (!emulateConvInstrs || stack.Count < 1)  						goto done;  					stack.Push(new ConstantInfo<long>(index' stack.Pop().constant));  					break;    				case Code.Not:  					if (stack.Count < 1)  						goto done;  					stack.Push(new ConstantInfo<long>(index' ~stack.Pop().constant));  					break;    				case Code.Neg:  					if (stack.Count < 1)  						goto done;  					stack.Push(new ConstantInfo<long>(index' -stack.Pop().constant));  					break;    				case Code.Ldloc:  				case Code.Ldloc_S:  				case Code.Ldloc_0:  				case Code.Ldloc_1:  				case Code.Ldloc_2:  				case Code.Ldloc_3:  					if (!GetLocalConstantInt64(instr' out op1))  						goto done;  					stack.Push(new ConstantInfo<long>(index' op1));  					break;    				case Code.Ldarg:  				case Code.Ldarg_S:  				case Code.Ldarg_0:  				case Code.Ldarg_1:  				case Code.Ldarg_2:  				case Code.Ldarg_3:  					if (!GetArgConstantInt64(instr' out op1))  						goto done;  					stack.Push(new ConstantInfo<long>(index' op1));  					break;    				case Code.Ldc_I8:  					stack.Push(new ConstantInfo<long>(index' (long)instr.Operand));  					break;    				case Code.Add:  					if (stack.Count < 2)  						goto done;  					info2 = stack.Pop();  					info1 = stack.Pop();  					stack.Push(new ConstantInfo<long>(index' info1.constant + info2.constant));  					break;    				case Code.Sub:  					if (stack.Count < 2)  						goto done;  					info2 = stack.Pop();  					info1 = stack.Pop();  					stack.Push(new ConstantInfo<long>(index' info1.constant - info2.constant));  					break;    				case Code.Xor:  					if (stack.Count < 2)  						goto done;  					info2 = stack.Pop();  					info1 = stack.Pop();  					stack.Push(new ConstantInfo<long>(index' info1.constant ^ info2.constant));  					break;    				case Code.Or:  					if (stack.Count < 2)  						goto done;  					info2 = stack.Pop();  					info1 = stack.Pop();  					stack.Push(new ConstantInfo<long>(index' info1.constant | info2.constant));  					break;    				case Code.And:  					if (stack.Count < 2)  						goto done;  					info2 = stack.Pop();  					info1 = stack.Pop();  					stack.Push(new ConstantInfo<long>(index' info1.constant & info2.constant));  					break;    				case Code.Mul:  					if (stack.Count < 2)  						goto done;  					info2 = stack.Pop();  					info1 = stack.Pop();  					stack.Push(new ConstantInfo<long>(index' info1.constant * info2.constant));  					break;    				case Code.Div:  					if (stack.Count < 2)  						goto done;  					info2 = stack.Pop();  					if (info2.constant == 0)  						goto done;  					info1 = stack.Pop();  					stack.Push(new ConstantInfo<long>(index' info1.constant / info2.constant));  					break;    				case Code.Div_Un:  					if (stack.Count < 2)  						goto done;  					info2 = stack.Pop();  					if (info2.constant == 0)  						goto done;  					info1 = stack.Pop();  					stack.Push(new ConstantInfo<long>(index' (int)((uint)info1.constant / (uint)info2.constant)));  					break;    				default:  					goto done;  				}
Magic Number,de4dot.code.deobfuscators,ConstantsReader,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\ConstantsReader.cs,GetInt64,The following statement contains a magic number: switch (instr.OpCode.Code) {  				case Code.Conv_I1:  					if (!emulateConvInstrs || stack.Count < 1)  						goto done;  					stack.Push(new ConstantInfo<long>(index' (sbyte)stack.Pop().constant));  					break;    				case Code.Conv_U1:  					if (!emulateConvInstrs || stack.Count < 1)  						goto done;  					stack.Push(new ConstantInfo<long>(index' (byte)stack.Pop().constant));  					break;    				case Code.Conv_I2:  					if (!emulateConvInstrs || stack.Count < 1)  						goto done;  					stack.Push(new ConstantInfo<long>(index' (short)stack.Pop().constant));  					break;    				case Code.Conv_U2:  					if (!emulateConvInstrs || stack.Count < 1)  						goto done;  					stack.Push(new ConstantInfo<long>(index' (ushort)stack.Pop().constant));  					break;    				case Code.Conv_I4:  					if (!emulateConvInstrs || stack.Count < 1)  						goto done;  					stack.Push(new ConstantInfo<long>(index' (int)stack.Pop().constant));  					break;    				case Code.Conv_U4:  					if (!emulateConvInstrs || stack.Count < 1)  						goto done;  					stack.Push(new ConstantInfo<long>(index' (uint)stack.Pop().constant));  					break;    				case Code.Conv_I8:  				case Code.Conv_U8:  					if (!emulateConvInstrs || stack.Count < 1)  						goto done;  					stack.Push(new ConstantInfo<long>(index' stack.Pop().constant));  					break;    				case Code.Not:  					if (stack.Count < 1)  						goto done;  					stack.Push(new ConstantInfo<long>(index' ~stack.Pop().constant));  					break;    				case Code.Neg:  					if (stack.Count < 1)  						goto done;  					stack.Push(new ConstantInfo<long>(index' -stack.Pop().constant));  					break;    				case Code.Ldloc:  				case Code.Ldloc_S:  				case Code.Ldloc_0:  				case Code.Ldloc_1:  				case Code.Ldloc_2:  				case Code.Ldloc_3:  					if (!GetLocalConstantInt64(instr' out op1))  						goto done;  					stack.Push(new ConstantInfo<long>(index' op1));  					break;    				case Code.Ldarg:  				case Code.Ldarg_S:  				case Code.Ldarg_0:  				case Code.Ldarg_1:  				case Code.Ldarg_2:  				case Code.Ldarg_3:  					if (!GetArgConstantInt64(instr' out op1))  						goto done;  					stack.Push(new ConstantInfo<long>(index' op1));  					break;    				case Code.Ldc_I8:  					stack.Push(new ConstantInfo<long>(index' (long)instr.Operand));  					break;    				case Code.Add:  					if (stack.Count < 2)  						goto done;  					info2 = stack.Pop();  					info1 = stack.Pop();  					stack.Push(new ConstantInfo<long>(index' info1.constant + info2.constant));  					break;    				case Code.Sub:  					if (stack.Count < 2)  						goto done;  					info2 = stack.Pop();  					info1 = stack.Pop();  					stack.Push(new ConstantInfo<long>(index' info1.constant - info2.constant));  					break;    				case Code.Xor:  					if (stack.Count < 2)  						goto done;  					info2 = stack.Pop();  					info1 = stack.Pop();  					stack.Push(new ConstantInfo<long>(index' info1.constant ^ info2.constant));  					break;    				case Code.Or:  					if (stack.Count < 2)  						goto done;  					info2 = stack.Pop();  					info1 = stack.Pop();  					stack.Push(new ConstantInfo<long>(index' info1.constant | info2.constant));  					break;    				case Code.And:  					if (stack.Count < 2)  						goto done;  					info2 = stack.Pop();  					info1 = stack.Pop();  					stack.Push(new ConstantInfo<long>(index' info1.constant & info2.constant));  					break;    				case Code.Mul:  					if (stack.Count < 2)  						goto done;  					info2 = stack.Pop();  					info1 = stack.Pop();  					stack.Push(new ConstantInfo<long>(index' info1.constant * info2.constant));  					break;    				case Code.Div:  					if (stack.Count < 2)  						goto done;  					info2 = stack.Pop();  					if (info2.constant == 0)  						goto done;  					info1 = stack.Pop();  					stack.Push(new ConstantInfo<long>(index' info1.constant / info2.constant));  					break;    				case Code.Div_Un:  					if (stack.Count < 2)  						goto done;  					info2 = stack.Pop();  					if (info2.constant == 0)  						goto done;  					info1 = stack.Pop();  					stack.Push(new ConstantInfo<long>(index' (int)((uint)info1.constant / (uint)info2.constant)));  					break;    				default:  					goto done;  				}
Magic Number,de4dot.code.deobfuscators,ConstantsReader,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\ConstantsReader.cs,GetInt64,The following statement contains a magic number: switch (instr.OpCode.Code) {  				case Code.Conv_I1:  					if (!emulateConvInstrs || stack.Count < 1)  						goto done;  					stack.Push(new ConstantInfo<long>(index' (sbyte)stack.Pop().constant));  					break;    				case Code.Conv_U1:  					if (!emulateConvInstrs || stack.Count < 1)  						goto done;  					stack.Push(new ConstantInfo<long>(index' (byte)stack.Pop().constant));  					break;    				case Code.Conv_I2:  					if (!emulateConvInstrs || stack.Count < 1)  						goto done;  					stack.Push(new ConstantInfo<long>(index' (short)stack.Pop().constant));  					break;    				case Code.Conv_U2:  					if (!emulateConvInstrs || stack.Count < 1)  						goto done;  					stack.Push(new ConstantInfo<long>(index' (ushort)stack.Pop().constant));  					break;    				case Code.Conv_I4:  					if (!emulateConvInstrs || stack.Count < 1)  						goto done;  					stack.Push(new ConstantInfo<long>(index' (int)stack.Pop().constant));  					break;    				case Code.Conv_U4:  					if (!emulateConvInstrs || stack.Count < 1)  						goto done;  					stack.Push(new ConstantInfo<long>(index' (uint)stack.Pop().constant));  					break;    				case Code.Conv_I8:  				case Code.Conv_U8:  					if (!emulateConvInstrs || stack.Count < 1)  						goto done;  					stack.Push(new ConstantInfo<long>(index' stack.Pop().constant));  					break;    				case Code.Not:  					if (stack.Count < 1)  						goto done;  					stack.Push(new ConstantInfo<long>(index' ~stack.Pop().constant));  					break;    				case Code.Neg:  					if (stack.Count < 1)  						goto done;  					stack.Push(new ConstantInfo<long>(index' -stack.Pop().constant));  					break;    				case Code.Ldloc:  				case Code.Ldloc_S:  				case Code.Ldloc_0:  				case Code.Ldloc_1:  				case Code.Ldloc_2:  				case Code.Ldloc_3:  					if (!GetLocalConstantInt64(instr' out op1))  						goto done;  					stack.Push(new ConstantInfo<long>(index' op1));  					break;    				case Code.Ldarg:  				case Code.Ldarg_S:  				case Code.Ldarg_0:  				case Code.Ldarg_1:  				case Code.Ldarg_2:  				case Code.Ldarg_3:  					if (!GetArgConstantInt64(instr' out op1))  						goto done;  					stack.Push(new ConstantInfo<long>(index' op1));  					break;    				case Code.Ldc_I8:  					stack.Push(new ConstantInfo<long>(index' (long)instr.Operand));  					break;    				case Code.Add:  					if (stack.Count < 2)  						goto done;  					info2 = stack.Pop();  					info1 = stack.Pop();  					stack.Push(new ConstantInfo<long>(index' info1.constant + info2.constant));  					break;    				case Code.Sub:  					if (stack.Count < 2)  						goto done;  					info2 = stack.Pop();  					info1 = stack.Pop();  					stack.Push(new ConstantInfo<long>(index' info1.constant - info2.constant));  					break;    				case Code.Xor:  					if (stack.Count < 2)  						goto done;  					info2 = stack.Pop();  					info1 = stack.Pop();  					stack.Push(new ConstantInfo<long>(index' info1.constant ^ info2.constant));  					break;    				case Code.Or:  					if (stack.Count < 2)  						goto done;  					info2 = stack.Pop();  					info1 = stack.Pop();  					stack.Push(new ConstantInfo<long>(index' info1.constant | info2.constant));  					break;    				case Code.And:  					if (stack.Count < 2)  						goto done;  					info2 = stack.Pop();  					info1 = stack.Pop();  					stack.Push(new ConstantInfo<long>(index' info1.constant & info2.constant));  					break;    				case Code.Mul:  					if (stack.Count < 2)  						goto done;  					info2 = stack.Pop();  					info1 = stack.Pop();  					stack.Push(new ConstantInfo<long>(index' info1.constant * info2.constant));  					break;    				case Code.Div:  					if (stack.Count < 2)  						goto done;  					info2 = stack.Pop();  					if (info2.constant == 0)  						goto done;  					info1 = stack.Pop();  					stack.Push(new ConstantInfo<long>(index' info1.constant / info2.constant));  					break;    				case Code.Div_Un:  					if (stack.Count < 2)  						goto done;  					info2 = stack.Pop();  					if (info2.constant == 0)  						goto done;  					info1 = stack.Pop();  					stack.Push(new ConstantInfo<long>(index' (int)((uint)info1.constant / (uint)info2.constant)));  					break;    				default:  					goto done;  				}
Magic Number,de4dot.code.deobfuscators,ConstantsReader,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\ConstantsReader.cs,GetInt64,The following statement contains a magic number: switch (instr.OpCode.Code) {  				case Code.Conv_I1:  					if (!emulateConvInstrs || stack.Count < 1)  						goto done;  					stack.Push(new ConstantInfo<long>(index' (sbyte)stack.Pop().constant));  					break;    				case Code.Conv_U1:  					if (!emulateConvInstrs || stack.Count < 1)  						goto done;  					stack.Push(new ConstantInfo<long>(index' (byte)stack.Pop().constant));  					break;    				case Code.Conv_I2:  					if (!emulateConvInstrs || stack.Count < 1)  						goto done;  					stack.Push(new ConstantInfo<long>(index' (short)stack.Pop().constant));  					break;    				case Code.Conv_U2:  					if (!emulateConvInstrs || stack.Count < 1)  						goto done;  					stack.Push(new ConstantInfo<long>(index' (ushort)stack.Pop().constant));  					break;    				case Code.Conv_I4:  					if (!emulateConvInstrs || stack.Count < 1)  						goto done;  					stack.Push(new ConstantInfo<long>(index' (int)stack.Pop().constant));  					break;    				case Code.Conv_U4:  					if (!emulateConvInstrs || stack.Count < 1)  						goto done;  					stack.Push(new ConstantInfo<long>(index' (uint)stack.Pop().constant));  					break;    				case Code.Conv_I8:  				case Code.Conv_U8:  					if (!emulateConvInstrs || stack.Count < 1)  						goto done;  					stack.Push(new ConstantInfo<long>(index' stack.Pop().constant));  					break;    				case Code.Not:  					if (stack.Count < 1)  						goto done;  					stack.Push(new ConstantInfo<long>(index' ~stack.Pop().constant));  					break;    				case Code.Neg:  					if (stack.Count < 1)  						goto done;  					stack.Push(new ConstantInfo<long>(index' -stack.Pop().constant));  					break;    				case Code.Ldloc:  				case Code.Ldloc_S:  				case Code.Ldloc_0:  				case Code.Ldloc_1:  				case Code.Ldloc_2:  				case Code.Ldloc_3:  					if (!GetLocalConstantInt64(instr' out op1))  						goto done;  					stack.Push(new ConstantInfo<long>(index' op1));  					break;    				case Code.Ldarg:  				case Code.Ldarg_S:  				case Code.Ldarg_0:  				case Code.Ldarg_1:  				case Code.Ldarg_2:  				case Code.Ldarg_3:  					if (!GetArgConstantInt64(instr' out op1))  						goto done;  					stack.Push(new ConstantInfo<long>(index' op1));  					break;    				case Code.Ldc_I8:  					stack.Push(new ConstantInfo<long>(index' (long)instr.Operand));  					break;    				case Code.Add:  					if (stack.Count < 2)  						goto done;  					info2 = stack.Pop();  					info1 = stack.Pop();  					stack.Push(new ConstantInfo<long>(index' info1.constant + info2.constant));  					break;    				case Code.Sub:  					if (stack.Count < 2)  						goto done;  					info2 = stack.Pop();  					info1 = stack.Pop();  					stack.Push(new ConstantInfo<long>(index' info1.constant - info2.constant));  					break;    				case Code.Xor:  					if (stack.Count < 2)  						goto done;  					info2 = stack.Pop();  					info1 = stack.Pop();  					stack.Push(new ConstantInfo<long>(index' info1.constant ^ info2.constant));  					break;    				case Code.Or:  					if (stack.Count < 2)  						goto done;  					info2 = stack.Pop();  					info1 = stack.Pop();  					stack.Push(new ConstantInfo<long>(index' info1.constant | info2.constant));  					break;    				case Code.And:  					if (stack.Count < 2)  						goto done;  					info2 = stack.Pop();  					info1 = stack.Pop();  					stack.Push(new ConstantInfo<long>(index' info1.constant & info2.constant));  					break;    				case Code.Mul:  					if (stack.Count < 2)  						goto done;  					info2 = stack.Pop();  					info1 = stack.Pop();  					stack.Push(new ConstantInfo<long>(index' info1.constant * info2.constant));  					break;    				case Code.Div:  					if (stack.Count < 2)  						goto done;  					info2 = stack.Pop();  					if (info2.constant == 0)  						goto done;  					info1 = stack.Pop();  					stack.Push(new ConstantInfo<long>(index' info1.constant / info2.constant));  					break;    				case Code.Div_Un:  					if (stack.Count < 2)  						goto done;  					info2 = stack.Pop();  					if (info2.constant == 0)  						goto done;  					info1 = stack.Pop();  					stack.Push(new ConstantInfo<long>(index' (int)((uint)info1.constant / (uint)info2.constant)));  					break;    				default:  					goto done;  				}
Magic Number,de4dot.code.deobfuscators,ConstantsReader,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\ConstantsReader.cs,GetInt64,The following statement contains a magic number: switch (instr.OpCode.Code) {  				case Code.Conv_I1:  					if (!emulateConvInstrs || stack.Count < 1)  						goto done;  					stack.Push(new ConstantInfo<long>(index' (sbyte)stack.Pop().constant));  					break;    				case Code.Conv_U1:  					if (!emulateConvInstrs || stack.Count < 1)  						goto done;  					stack.Push(new ConstantInfo<long>(index' (byte)stack.Pop().constant));  					break;    				case Code.Conv_I2:  					if (!emulateConvInstrs || stack.Count < 1)  						goto done;  					stack.Push(new ConstantInfo<long>(index' (short)stack.Pop().constant));  					break;    				case Code.Conv_U2:  					if (!emulateConvInstrs || stack.Count < 1)  						goto done;  					stack.Push(new ConstantInfo<long>(index' (ushort)stack.Pop().constant));  					break;    				case Code.Conv_I4:  					if (!emulateConvInstrs || stack.Count < 1)  						goto done;  					stack.Push(new ConstantInfo<long>(index' (int)stack.Pop().constant));  					break;    				case Code.Conv_U4:  					if (!emulateConvInstrs || stack.Count < 1)  						goto done;  					stack.Push(new ConstantInfo<long>(index' (uint)stack.Pop().constant));  					break;    				case Code.Conv_I8:  				case Code.Conv_U8:  					if (!emulateConvInstrs || stack.Count < 1)  						goto done;  					stack.Push(new ConstantInfo<long>(index' stack.Pop().constant));  					break;    				case Code.Not:  					if (stack.Count < 1)  						goto done;  					stack.Push(new ConstantInfo<long>(index' ~stack.Pop().constant));  					break;    				case Code.Neg:  					if (stack.Count < 1)  						goto done;  					stack.Push(new ConstantInfo<long>(index' -stack.Pop().constant));  					break;    				case Code.Ldloc:  				case Code.Ldloc_S:  				case Code.Ldloc_0:  				case Code.Ldloc_1:  				case Code.Ldloc_2:  				case Code.Ldloc_3:  					if (!GetLocalConstantInt64(instr' out op1))  						goto done;  					stack.Push(new ConstantInfo<long>(index' op1));  					break;    				case Code.Ldarg:  				case Code.Ldarg_S:  				case Code.Ldarg_0:  				case Code.Ldarg_1:  				case Code.Ldarg_2:  				case Code.Ldarg_3:  					if (!GetArgConstantInt64(instr' out op1))  						goto done;  					stack.Push(new ConstantInfo<long>(index' op1));  					break;    				case Code.Ldc_I8:  					stack.Push(new ConstantInfo<long>(index' (long)instr.Operand));  					break;    				case Code.Add:  					if (stack.Count < 2)  						goto done;  					info2 = stack.Pop();  					info1 = stack.Pop();  					stack.Push(new ConstantInfo<long>(index' info1.constant + info2.constant));  					break;    				case Code.Sub:  					if (stack.Count < 2)  						goto done;  					info2 = stack.Pop();  					info1 = stack.Pop();  					stack.Push(new ConstantInfo<long>(index' info1.constant - info2.constant));  					break;    				case Code.Xor:  					if (stack.Count < 2)  						goto done;  					info2 = stack.Pop();  					info1 = stack.Pop();  					stack.Push(new ConstantInfo<long>(index' info1.constant ^ info2.constant));  					break;    				case Code.Or:  					if (stack.Count < 2)  						goto done;  					info2 = stack.Pop();  					info1 = stack.Pop();  					stack.Push(new ConstantInfo<long>(index' info1.constant | info2.constant));  					break;    				case Code.And:  					if (stack.Count < 2)  						goto done;  					info2 = stack.Pop();  					info1 = stack.Pop();  					stack.Push(new ConstantInfo<long>(index' info1.constant & info2.constant));  					break;    				case Code.Mul:  					if (stack.Count < 2)  						goto done;  					info2 = stack.Pop();  					info1 = stack.Pop();  					stack.Push(new ConstantInfo<long>(index' info1.constant * info2.constant));  					break;    				case Code.Div:  					if (stack.Count < 2)  						goto done;  					info2 = stack.Pop();  					if (info2.constant == 0)  						goto done;  					info1 = stack.Pop();  					stack.Push(new ConstantInfo<long>(index' info1.constant / info2.constant));  					break;    				case Code.Div_Un:  					if (stack.Count < 2)  						goto done;  					info2 = stack.Pop();  					if (info2.constant == 0)  						goto done;  					info1 = stack.Pop();  					stack.Push(new ConstantInfo<long>(index' (int)((uint)info1.constant / (uint)info2.constant)));  					break;    				default:  					goto done;  				}
Magic Number,de4dot.code.deobfuscators,ConstantsReader,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\ConstantsReader.cs,GetInt64,The following statement contains a magic number: switch (instr.OpCode.Code) {  				case Code.Conv_I1:  					if (!emulateConvInstrs || stack.Count < 1)  						goto done;  					stack.Push(new ConstantInfo<long>(index' (sbyte)stack.Pop().constant));  					break;    				case Code.Conv_U1:  					if (!emulateConvInstrs || stack.Count < 1)  						goto done;  					stack.Push(new ConstantInfo<long>(index' (byte)stack.Pop().constant));  					break;    				case Code.Conv_I2:  					if (!emulateConvInstrs || stack.Count < 1)  						goto done;  					stack.Push(new ConstantInfo<long>(index' (short)stack.Pop().constant));  					break;    				case Code.Conv_U2:  					if (!emulateConvInstrs || stack.Count < 1)  						goto done;  					stack.Push(new ConstantInfo<long>(index' (ushort)stack.Pop().constant));  					break;    				case Code.Conv_I4:  					if (!emulateConvInstrs || stack.Count < 1)  						goto done;  					stack.Push(new ConstantInfo<long>(index' (int)stack.Pop().constant));  					break;    				case Code.Conv_U4:  					if (!emulateConvInstrs || stack.Count < 1)  						goto done;  					stack.Push(new ConstantInfo<long>(index' (uint)stack.Pop().constant));  					break;    				case Code.Conv_I8:  				case Code.Conv_U8:  					if (!emulateConvInstrs || stack.Count < 1)  						goto done;  					stack.Push(new ConstantInfo<long>(index' stack.Pop().constant));  					break;    				case Code.Not:  					if (stack.Count < 1)  						goto done;  					stack.Push(new ConstantInfo<long>(index' ~stack.Pop().constant));  					break;    				case Code.Neg:  					if (stack.Count < 1)  						goto done;  					stack.Push(new ConstantInfo<long>(index' -stack.Pop().constant));  					break;    				case Code.Ldloc:  				case Code.Ldloc_S:  				case Code.Ldloc_0:  				case Code.Ldloc_1:  				case Code.Ldloc_2:  				case Code.Ldloc_3:  					if (!GetLocalConstantInt64(instr' out op1))  						goto done;  					stack.Push(new ConstantInfo<long>(index' op1));  					break;    				case Code.Ldarg:  				case Code.Ldarg_S:  				case Code.Ldarg_0:  				case Code.Ldarg_1:  				case Code.Ldarg_2:  				case Code.Ldarg_3:  					if (!GetArgConstantInt64(instr' out op1))  						goto done;  					stack.Push(new ConstantInfo<long>(index' op1));  					break;    				case Code.Ldc_I8:  					stack.Push(new ConstantInfo<long>(index' (long)instr.Operand));  					break;    				case Code.Add:  					if (stack.Count < 2)  						goto done;  					info2 = stack.Pop();  					info1 = stack.Pop();  					stack.Push(new ConstantInfo<long>(index' info1.constant + info2.constant));  					break;    				case Code.Sub:  					if (stack.Count < 2)  						goto done;  					info2 = stack.Pop();  					info1 = stack.Pop();  					stack.Push(new ConstantInfo<long>(index' info1.constant - info2.constant));  					break;    				case Code.Xor:  					if (stack.Count < 2)  						goto done;  					info2 = stack.Pop();  					info1 = stack.Pop();  					stack.Push(new ConstantInfo<long>(index' info1.constant ^ info2.constant));  					break;    				case Code.Or:  					if (stack.Count < 2)  						goto done;  					info2 = stack.Pop();  					info1 = stack.Pop();  					stack.Push(new ConstantInfo<long>(index' info1.constant | info2.constant));  					break;    				case Code.And:  					if (stack.Count < 2)  						goto done;  					info2 = stack.Pop();  					info1 = stack.Pop();  					stack.Push(new ConstantInfo<long>(index' info1.constant & info2.constant));  					break;    				case Code.Mul:  					if (stack.Count < 2)  						goto done;  					info2 = stack.Pop();  					info1 = stack.Pop();  					stack.Push(new ConstantInfo<long>(index' info1.constant * info2.constant));  					break;    				case Code.Div:  					if (stack.Count < 2)  						goto done;  					info2 = stack.Pop();  					if (info2.constant == 0)  						goto done;  					info1 = stack.Pop();  					stack.Push(new ConstantInfo<long>(index' info1.constant / info2.constant));  					break;    				case Code.Div_Un:  					if (stack.Count < 2)  						goto done;  					info2 = stack.Pop();  					if (info2.constant == 0)  						goto done;  					info1 = stack.Pop();  					stack.Push(new ConstantInfo<long>(index' (int)((uint)info1.constant / (uint)info2.constant)));  					break;    				default:  					goto done;  				}
Magic Number,de4dot.code.deobfuscators,ConstantsReader,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\ConstantsReader.cs,GetInt64,The following statement contains a magic number: switch (instr.OpCode.Code) {  				case Code.Conv_I1:  					if (!emulateConvInstrs || stack.Count < 1)  						goto done;  					stack.Push(new ConstantInfo<long>(index' (sbyte)stack.Pop().constant));  					break;    				case Code.Conv_U1:  					if (!emulateConvInstrs || stack.Count < 1)  						goto done;  					stack.Push(new ConstantInfo<long>(index' (byte)stack.Pop().constant));  					break;    				case Code.Conv_I2:  					if (!emulateConvInstrs || stack.Count < 1)  						goto done;  					stack.Push(new ConstantInfo<long>(index' (short)stack.Pop().constant));  					break;    				case Code.Conv_U2:  					if (!emulateConvInstrs || stack.Count < 1)  						goto done;  					stack.Push(new ConstantInfo<long>(index' (ushort)stack.Pop().constant));  					break;    				case Code.Conv_I4:  					if (!emulateConvInstrs || stack.Count < 1)  						goto done;  					stack.Push(new ConstantInfo<long>(index' (int)stack.Pop().constant));  					break;    				case Code.Conv_U4:  					if (!emulateConvInstrs || stack.Count < 1)  						goto done;  					stack.Push(new ConstantInfo<long>(index' (uint)stack.Pop().constant));  					break;    				case Code.Conv_I8:  				case Code.Conv_U8:  					if (!emulateConvInstrs || stack.Count < 1)  						goto done;  					stack.Push(new ConstantInfo<long>(index' stack.Pop().constant));  					break;    				case Code.Not:  					if (stack.Count < 1)  						goto done;  					stack.Push(new ConstantInfo<long>(index' ~stack.Pop().constant));  					break;    				case Code.Neg:  					if (stack.Count < 1)  						goto done;  					stack.Push(new ConstantInfo<long>(index' -stack.Pop().constant));  					break;    				case Code.Ldloc:  				case Code.Ldloc_S:  				case Code.Ldloc_0:  				case Code.Ldloc_1:  				case Code.Ldloc_2:  				case Code.Ldloc_3:  					if (!GetLocalConstantInt64(instr' out op1))  						goto done;  					stack.Push(new ConstantInfo<long>(index' op1));  					break;    				case Code.Ldarg:  				case Code.Ldarg_S:  				case Code.Ldarg_0:  				case Code.Ldarg_1:  				case Code.Ldarg_2:  				case Code.Ldarg_3:  					if (!GetArgConstantInt64(instr' out op1))  						goto done;  					stack.Push(new ConstantInfo<long>(index' op1));  					break;    				case Code.Ldc_I8:  					stack.Push(new ConstantInfo<long>(index' (long)instr.Operand));  					break;    				case Code.Add:  					if (stack.Count < 2)  						goto done;  					info2 = stack.Pop();  					info1 = stack.Pop();  					stack.Push(new ConstantInfo<long>(index' info1.constant + info2.constant));  					break;    				case Code.Sub:  					if (stack.Count < 2)  						goto done;  					info2 = stack.Pop();  					info1 = stack.Pop();  					stack.Push(new ConstantInfo<long>(index' info1.constant - info2.constant));  					break;    				case Code.Xor:  					if (stack.Count < 2)  						goto done;  					info2 = stack.Pop();  					info1 = stack.Pop();  					stack.Push(new ConstantInfo<long>(index' info1.constant ^ info2.constant));  					break;    				case Code.Or:  					if (stack.Count < 2)  						goto done;  					info2 = stack.Pop();  					info1 = stack.Pop();  					stack.Push(new ConstantInfo<long>(index' info1.constant | info2.constant));  					break;    				case Code.And:  					if (stack.Count < 2)  						goto done;  					info2 = stack.Pop();  					info1 = stack.Pop();  					stack.Push(new ConstantInfo<long>(index' info1.constant & info2.constant));  					break;    				case Code.Mul:  					if (stack.Count < 2)  						goto done;  					info2 = stack.Pop();  					info1 = stack.Pop();  					stack.Push(new ConstantInfo<long>(index' info1.constant * info2.constant));  					break;    				case Code.Div:  					if (stack.Count < 2)  						goto done;  					info2 = stack.Pop();  					if (info2.constant == 0)  						goto done;  					info1 = stack.Pop();  					stack.Push(new ConstantInfo<long>(index' info1.constant / info2.constant));  					break;    				case Code.Div_Un:  					if (stack.Count < 2)  						goto done;  					info2 = stack.Pop();  					if (info2.constant == 0)  						goto done;  					info1 = stack.Pop();  					stack.Push(new ConstantInfo<long>(index' (int)((uint)info1.constant / (uint)info2.constant)));  					break;    				default:  					goto done;  				}
Magic Number,de4dot.code.deobfuscators,ConstantsReader,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\ConstantsReader.cs,GetInt64,The following statement contains a magic number: switch (instr.OpCode.Code) {  				case Code.Conv_I1:  					if (!emulateConvInstrs || stack.Count < 1)  						goto done;  					stack.Push(new ConstantInfo<long>(index' (sbyte)stack.Pop().constant));  					break;    				case Code.Conv_U1:  					if (!emulateConvInstrs || stack.Count < 1)  						goto done;  					stack.Push(new ConstantInfo<long>(index' (byte)stack.Pop().constant));  					break;    				case Code.Conv_I2:  					if (!emulateConvInstrs || stack.Count < 1)  						goto done;  					stack.Push(new ConstantInfo<long>(index' (short)stack.Pop().constant));  					break;    				case Code.Conv_U2:  					if (!emulateConvInstrs || stack.Count < 1)  						goto done;  					stack.Push(new ConstantInfo<long>(index' (ushort)stack.Pop().constant));  					break;    				case Code.Conv_I4:  					if (!emulateConvInstrs || stack.Count < 1)  						goto done;  					stack.Push(new ConstantInfo<long>(index' (int)stack.Pop().constant));  					break;    				case Code.Conv_U4:  					if (!emulateConvInstrs || stack.Count < 1)  						goto done;  					stack.Push(new ConstantInfo<long>(index' (uint)stack.Pop().constant));  					break;    				case Code.Conv_I8:  				case Code.Conv_U8:  					if (!emulateConvInstrs || stack.Count < 1)  						goto done;  					stack.Push(new ConstantInfo<long>(index' stack.Pop().constant));  					break;    				case Code.Not:  					if (stack.Count < 1)  						goto done;  					stack.Push(new ConstantInfo<long>(index' ~stack.Pop().constant));  					break;    				case Code.Neg:  					if (stack.Count < 1)  						goto done;  					stack.Push(new ConstantInfo<long>(index' -stack.Pop().constant));  					break;    				case Code.Ldloc:  				case Code.Ldloc_S:  				case Code.Ldloc_0:  				case Code.Ldloc_1:  				case Code.Ldloc_2:  				case Code.Ldloc_3:  					if (!GetLocalConstantInt64(instr' out op1))  						goto done;  					stack.Push(new ConstantInfo<long>(index' op1));  					break;    				case Code.Ldarg:  				case Code.Ldarg_S:  				case Code.Ldarg_0:  				case Code.Ldarg_1:  				case Code.Ldarg_2:  				case Code.Ldarg_3:  					if (!GetArgConstantInt64(instr' out op1))  						goto done;  					stack.Push(new ConstantInfo<long>(index' op1));  					break;    				case Code.Ldc_I8:  					stack.Push(new ConstantInfo<long>(index' (long)instr.Operand));  					break;    				case Code.Add:  					if (stack.Count < 2)  						goto done;  					info2 = stack.Pop();  					info1 = stack.Pop();  					stack.Push(new ConstantInfo<long>(index' info1.constant + info2.constant));  					break;    				case Code.Sub:  					if (stack.Count < 2)  						goto done;  					info2 = stack.Pop();  					info1 = stack.Pop();  					stack.Push(new ConstantInfo<long>(index' info1.constant - info2.constant));  					break;    				case Code.Xor:  					if (stack.Count < 2)  						goto done;  					info2 = stack.Pop();  					info1 = stack.Pop();  					stack.Push(new ConstantInfo<long>(index' info1.constant ^ info2.constant));  					break;    				case Code.Or:  					if (stack.Count < 2)  						goto done;  					info2 = stack.Pop();  					info1 = stack.Pop();  					stack.Push(new ConstantInfo<long>(index' info1.constant | info2.constant));  					break;    				case Code.And:  					if (stack.Count < 2)  						goto done;  					info2 = stack.Pop();  					info1 = stack.Pop();  					stack.Push(new ConstantInfo<long>(index' info1.constant & info2.constant));  					break;    				case Code.Mul:  					if (stack.Count < 2)  						goto done;  					info2 = stack.Pop();  					info1 = stack.Pop();  					stack.Push(new ConstantInfo<long>(index' info1.constant * info2.constant));  					break;    				case Code.Div:  					if (stack.Count < 2)  						goto done;  					info2 = stack.Pop();  					if (info2.constant == 0)  						goto done;  					info1 = stack.Pop();  					stack.Push(new ConstantInfo<long>(index' info1.constant / info2.constant));  					break;    				case Code.Div_Un:  					if (stack.Count < 2)  						goto done;  					info2 = stack.Pop();  					if (info2.constant == 0)  						goto done;  					info1 = stack.Pop();  					stack.Push(new ConstantInfo<long>(index' (int)((uint)info1.constant / (uint)info2.constant)));  					break;    				default:  					goto done;  				}
Magic Number,de4dot.code.deobfuscators,ConstantsReader,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\ConstantsReader.cs,GetDouble,The following statement contains a magic number: switch (instr.OpCode.Code) {  				case Code.Conv_R4:  					if (!emulateConvInstrs || stack.Count < 1)  						goto done;  					stack.Push(new ConstantInfo<double>(index' (float)stack.Pop().constant));  					break;    				case Code.Conv_R8:  					if (!emulateConvInstrs || stack.Count < 1)  						goto done;  					stack.Push(new ConstantInfo<double>(index' stack.Pop().constant));  					break;    				case Code.Neg:  					if (stack.Count < 1)  						goto done;  					stack.Push(new ConstantInfo<double>(index' -stack.Pop().constant));  					break;    				case Code.Ldloc:  				case Code.Ldloc_S:  				case Code.Ldloc_0:  				case Code.Ldloc_1:  				case Code.Ldloc_2:  				case Code.Ldloc_3:  					if (!GetLocalConstantDouble(instr' out op1))  						goto done;  					stack.Push(new ConstantInfo<double>(index' op1));  					break;    				case Code.Ldarg:  				case Code.Ldarg_S:  				case Code.Ldarg_0:  				case Code.Ldarg_1:  				case Code.Ldarg_2:  				case Code.Ldarg_3:  					if (!GetArgConstantDouble(instr' out op1))  						goto done;  					stack.Push(new ConstantInfo<double>(index' op1));  					break;    				case Code.Ldc_R4:  					stack.Push(new ConstantInfo<double>(index' (float)instr.Operand));  					break;    				case Code.Ldc_R8:  					stack.Push(new ConstantInfo<double>(index' (double)instr.Operand));  					break;    				case Code.Add:  					if (stack.Count < 2)  						goto done;  					info2 = stack.Pop();  					info1 = stack.Pop();  					stack.Push(new ConstantInfo<double>(index' info1.constant + info2.constant));  					break;    				case Code.Sub:  					if (stack.Count < 2)  						goto done;  					info2 = stack.Pop();  					info1 = stack.Pop();  					stack.Push(new ConstantInfo<double>(index' info1.constant - info2.constant));  					break;    				case Code.Mul:  					if (stack.Count < 2)  						goto done;  					info2 = stack.Pop();  					info1 = stack.Pop();  					stack.Push(new ConstantInfo<double>(index' info1.constant * info2.constant));  					break;    				case Code.Div:  					if (stack.Count < 2)  						goto done;  					info2 = stack.Pop();  					info1 = stack.Pop();  					stack.Push(new ConstantInfo<double>(index' info1.constant / info2.constant));  					break;    				case Code.Div_Un:  					if (stack.Count < 2)  						goto done;  					info2 = stack.Pop();  					info1 = stack.Pop();  					stack.Push(new ConstantInfo<double>(index' (int)((uint)info1.constant / (uint)info2.constant)));  					break;    				default:  					goto done;  				}
Magic Number,de4dot.code.deobfuscators,ConstantsReader,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\ConstantsReader.cs,GetDouble,The following statement contains a magic number: switch (instr.OpCode.Code) {  				case Code.Conv_R4:  					if (!emulateConvInstrs || stack.Count < 1)  						goto done;  					stack.Push(new ConstantInfo<double>(index' (float)stack.Pop().constant));  					break;    				case Code.Conv_R8:  					if (!emulateConvInstrs || stack.Count < 1)  						goto done;  					stack.Push(new ConstantInfo<double>(index' stack.Pop().constant));  					break;    				case Code.Neg:  					if (stack.Count < 1)  						goto done;  					stack.Push(new ConstantInfo<double>(index' -stack.Pop().constant));  					break;    				case Code.Ldloc:  				case Code.Ldloc_S:  				case Code.Ldloc_0:  				case Code.Ldloc_1:  				case Code.Ldloc_2:  				case Code.Ldloc_3:  					if (!GetLocalConstantDouble(instr' out op1))  						goto done;  					stack.Push(new ConstantInfo<double>(index' op1));  					break;    				case Code.Ldarg:  				case Code.Ldarg_S:  				case Code.Ldarg_0:  				case Code.Ldarg_1:  				case Code.Ldarg_2:  				case Code.Ldarg_3:  					if (!GetArgConstantDouble(instr' out op1))  						goto done;  					stack.Push(new ConstantInfo<double>(index' op1));  					break;    				case Code.Ldc_R4:  					stack.Push(new ConstantInfo<double>(index' (float)instr.Operand));  					break;    				case Code.Ldc_R8:  					stack.Push(new ConstantInfo<double>(index' (double)instr.Operand));  					break;    				case Code.Add:  					if (stack.Count < 2)  						goto done;  					info2 = stack.Pop();  					info1 = stack.Pop();  					stack.Push(new ConstantInfo<double>(index' info1.constant + info2.constant));  					break;    				case Code.Sub:  					if (stack.Count < 2)  						goto done;  					info2 = stack.Pop();  					info1 = stack.Pop();  					stack.Push(new ConstantInfo<double>(index' info1.constant - info2.constant));  					break;    				case Code.Mul:  					if (stack.Count < 2)  						goto done;  					info2 = stack.Pop();  					info1 = stack.Pop();  					stack.Push(new ConstantInfo<double>(index' info1.constant * info2.constant));  					break;    				case Code.Div:  					if (stack.Count < 2)  						goto done;  					info2 = stack.Pop();  					info1 = stack.Pop();  					stack.Push(new ConstantInfo<double>(index' info1.constant / info2.constant));  					break;    				case Code.Div_Un:  					if (stack.Count < 2)  						goto done;  					info2 = stack.Pop();  					info1 = stack.Pop();  					stack.Push(new ConstantInfo<double>(index' (int)((uint)info1.constant / (uint)info2.constant)));  					break;    				default:  					goto done;  				}
Magic Number,de4dot.code.deobfuscators,ConstantsReader,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\ConstantsReader.cs,GetDouble,The following statement contains a magic number: switch (instr.OpCode.Code) {  				case Code.Conv_R4:  					if (!emulateConvInstrs || stack.Count < 1)  						goto done;  					stack.Push(new ConstantInfo<double>(index' (float)stack.Pop().constant));  					break;    				case Code.Conv_R8:  					if (!emulateConvInstrs || stack.Count < 1)  						goto done;  					stack.Push(new ConstantInfo<double>(index' stack.Pop().constant));  					break;    				case Code.Neg:  					if (stack.Count < 1)  						goto done;  					stack.Push(new ConstantInfo<double>(index' -stack.Pop().constant));  					break;    				case Code.Ldloc:  				case Code.Ldloc_S:  				case Code.Ldloc_0:  				case Code.Ldloc_1:  				case Code.Ldloc_2:  				case Code.Ldloc_3:  					if (!GetLocalConstantDouble(instr' out op1))  						goto done;  					stack.Push(new ConstantInfo<double>(index' op1));  					break;    				case Code.Ldarg:  				case Code.Ldarg_S:  				case Code.Ldarg_0:  				case Code.Ldarg_1:  				case Code.Ldarg_2:  				case Code.Ldarg_3:  					if (!GetArgConstantDouble(instr' out op1))  						goto done;  					stack.Push(new ConstantInfo<double>(index' op1));  					break;    				case Code.Ldc_R4:  					stack.Push(new ConstantInfo<double>(index' (float)instr.Operand));  					break;    				case Code.Ldc_R8:  					stack.Push(new ConstantInfo<double>(index' (double)instr.Operand));  					break;    				case Code.Add:  					if (stack.Count < 2)  						goto done;  					info2 = stack.Pop();  					info1 = stack.Pop();  					stack.Push(new ConstantInfo<double>(index' info1.constant + info2.constant));  					break;    				case Code.Sub:  					if (stack.Count < 2)  						goto done;  					info2 = stack.Pop();  					info1 = stack.Pop();  					stack.Push(new ConstantInfo<double>(index' info1.constant - info2.constant));  					break;    				case Code.Mul:  					if (stack.Count < 2)  						goto done;  					info2 = stack.Pop();  					info1 = stack.Pop();  					stack.Push(new ConstantInfo<double>(index' info1.constant * info2.constant));  					break;    				case Code.Div:  					if (stack.Count < 2)  						goto done;  					info2 = stack.Pop();  					info1 = stack.Pop();  					stack.Push(new ConstantInfo<double>(index' info1.constant / info2.constant));  					break;    				case Code.Div_Un:  					if (stack.Count < 2)  						goto done;  					info2 = stack.Pop();  					info1 = stack.Pop();  					stack.Push(new ConstantInfo<double>(index' (int)((uint)info1.constant / (uint)info2.constant)));  					break;    				default:  					goto done;  				}
Magic Number,de4dot.code.deobfuscators,ConstantsReader,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\ConstantsReader.cs,GetDouble,The following statement contains a magic number: switch (instr.OpCode.Code) {  				case Code.Conv_R4:  					if (!emulateConvInstrs || stack.Count < 1)  						goto done;  					stack.Push(new ConstantInfo<double>(index' (float)stack.Pop().constant));  					break;    				case Code.Conv_R8:  					if (!emulateConvInstrs || stack.Count < 1)  						goto done;  					stack.Push(new ConstantInfo<double>(index' stack.Pop().constant));  					break;    				case Code.Neg:  					if (stack.Count < 1)  						goto done;  					stack.Push(new ConstantInfo<double>(index' -stack.Pop().constant));  					break;    				case Code.Ldloc:  				case Code.Ldloc_S:  				case Code.Ldloc_0:  				case Code.Ldloc_1:  				case Code.Ldloc_2:  				case Code.Ldloc_3:  					if (!GetLocalConstantDouble(instr' out op1))  						goto done;  					stack.Push(new ConstantInfo<double>(index' op1));  					break;    				case Code.Ldarg:  				case Code.Ldarg_S:  				case Code.Ldarg_0:  				case Code.Ldarg_1:  				case Code.Ldarg_2:  				case Code.Ldarg_3:  					if (!GetArgConstantDouble(instr' out op1))  						goto done;  					stack.Push(new ConstantInfo<double>(index' op1));  					break;    				case Code.Ldc_R4:  					stack.Push(new ConstantInfo<double>(index' (float)instr.Operand));  					break;    				case Code.Ldc_R8:  					stack.Push(new ConstantInfo<double>(index' (double)instr.Operand));  					break;    				case Code.Add:  					if (stack.Count < 2)  						goto done;  					info2 = stack.Pop();  					info1 = stack.Pop();  					stack.Push(new ConstantInfo<double>(index' info1.constant + info2.constant));  					break;    				case Code.Sub:  					if (stack.Count < 2)  						goto done;  					info2 = stack.Pop();  					info1 = stack.Pop();  					stack.Push(new ConstantInfo<double>(index' info1.constant - info2.constant));  					break;    				case Code.Mul:  					if (stack.Count < 2)  						goto done;  					info2 = stack.Pop();  					info1 = stack.Pop();  					stack.Push(new ConstantInfo<double>(index' info1.constant * info2.constant));  					break;    				case Code.Div:  					if (stack.Count < 2)  						goto done;  					info2 = stack.Pop();  					info1 = stack.Pop();  					stack.Push(new ConstantInfo<double>(index' info1.constant / info2.constant));  					break;    				case Code.Div_Un:  					if (stack.Count < 2)  						goto done;  					info2 = stack.Pop();  					info1 = stack.Pop();  					stack.Push(new ConstantInfo<double>(index' (int)((uint)info1.constant / (uint)info2.constant)));  					break;    				default:  					goto done;  				}
Magic Number,de4dot.code.deobfuscators,ConstantsReader,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\ConstantsReader.cs,GetDouble,The following statement contains a magic number: switch (instr.OpCode.Code) {  				case Code.Conv_R4:  					if (!emulateConvInstrs || stack.Count < 1)  						goto done;  					stack.Push(new ConstantInfo<double>(index' (float)stack.Pop().constant));  					break;    				case Code.Conv_R8:  					if (!emulateConvInstrs || stack.Count < 1)  						goto done;  					stack.Push(new ConstantInfo<double>(index' stack.Pop().constant));  					break;    				case Code.Neg:  					if (stack.Count < 1)  						goto done;  					stack.Push(new ConstantInfo<double>(index' -stack.Pop().constant));  					break;    				case Code.Ldloc:  				case Code.Ldloc_S:  				case Code.Ldloc_0:  				case Code.Ldloc_1:  				case Code.Ldloc_2:  				case Code.Ldloc_3:  					if (!GetLocalConstantDouble(instr' out op1))  						goto done;  					stack.Push(new ConstantInfo<double>(index' op1));  					break;    				case Code.Ldarg:  				case Code.Ldarg_S:  				case Code.Ldarg_0:  				case Code.Ldarg_1:  				case Code.Ldarg_2:  				case Code.Ldarg_3:  					if (!GetArgConstantDouble(instr' out op1))  						goto done;  					stack.Push(new ConstantInfo<double>(index' op1));  					break;    				case Code.Ldc_R4:  					stack.Push(new ConstantInfo<double>(index' (float)instr.Operand));  					break;    				case Code.Ldc_R8:  					stack.Push(new ConstantInfo<double>(index' (double)instr.Operand));  					break;    				case Code.Add:  					if (stack.Count < 2)  						goto done;  					info2 = stack.Pop();  					info1 = stack.Pop();  					stack.Push(new ConstantInfo<double>(index' info1.constant + info2.constant));  					break;    				case Code.Sub:  					if (stack.Count < 2)  						goto done;  					info2 = stack.Pop();  					info1 = stack.Pop();  					stack.Push(new ConstantInfo<double>(index' info1.constant - info2.constant));  					break;    				case Code.Mul:  					if (stack.Count < 2)  						goto done;  					info2 = stack.Pop();  					info1 = stack.Pop();  					stack.Push(new ConstantInfo<double>(index' info1.constant * info2.constant));  					break;    				case Code.Div:  					if (stack.Count < 2)  						goto done;  					info2 = stack.Pop();  					info1 = stack.Pop();  					stack.Push(new ConstantInfo<double>(index' info1.constant / info2.constant));  					break;    				case Code.Div_Un:  					if (stack.Count < 2)  						goto done;  					info2 = stack.Pop();  					info1 = stack.Pop();  					stack.Push(new ConstantInfo<double>(index' (int)((uint)info1.constant / (uint)info2.constant)));  					break;    				default:  					goto done;  				}
Magic Number,de4dot.code.deobfuscators,CRC32,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CRC32.cs,Hash,The following statement contains a magic number: checkSum = (checkSum >> 8) ^ table[i];
Magic Number,de4dot.code.deobfuscators,CRC32,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CRC32.cs,Hash,The following statement contains a magic number: checkSum = (checkSum >> 8) ^ table[i];
Magic Number,de4dot.code.deobfuscators,CRC32,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CRC32.cs,Hash,The following statement contains a magic number: checkSum = (checkSum >> 8) ^ table[i];
Magic Number,de4dot.code.deobfuscators,CRC32,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CRC32.cs,Hash,The following statement contains a magic number: checkSum = (checkSum >> 8) ^ table[i];
Magic Number,de4dot.code.deobfuscators,CRC32,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CRC32.cs,Hash,The following statement contains a magic number: i = (byte)(checkSum ^ (byte)(a >> 8));
Magic Number,de4dot.code.deobfuscators,CRC32,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CRC32.cs,Hash,The following statement contains a magic number: checkSum = (checkSum >> 8) ^ table[i];
Magic Number,de4dot.code.deobfuscators,CRC32,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CRC32.cs,Hash,The following statement contains a magic number: checkSum = (checkSum >> 8) ^ table[i];
Magic Number,de4dot.code.deobfuscators,CRC32,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CRC32.cs,Hash,The following statement contains a magic number: i = (byte)(checkSum ^ (byte)(a >> 8));
Magic Number,de4dot.code.deobfuscators,CRC32,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CRC32.cs,Hash,The following statement contains a magic number: checkSum = (checkSum >> 8) ^ table[i];
Magic Number,de4dot.code.deobfuscators,CRC32,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CRC32.cs,Hash,The following statement contains a magic number: checkSum = (checkSum >> 8) ^ table[i];
Magic Number,de4dot.code.deobfuscators,CRC32,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CRC32.cs,Hash,The following statement contains a magic number: i = (byte)(checkSum ^ (byte)(a >> 8));
Magic Number,de4dot.code.deobfuscators,CRC32,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CRC32.cs,Hash,The following statement contains a magic number: checkSum = (checkSum >> 8) ^ table[i];
Magic Number,de4dot.code.deobfuscators,CRC32,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CRC32.cs,Hash,The following statement contains a magic number: i = (byte)(checkSum ^ (byte)(a >> 16));
Magic Number,de4dot.code.deobfuscators,CRC32,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CRC32.cs,Hash,The following statement contains a magic number: checkSum = (checkSum >> 8) ^ table[i];
Magic Number,de4dot.code.deobfuscators,CRC32,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CRC32.cs,Hash,The following statement contains a magic number: i = (byte)(checkSum ^ (byte)(a >> 24));
Magic Number,de4dot.code.deobfuscators,CRC32,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CRC32.cs,Hash,The following statement contains a magic number: checkSum = (checkSum >> 8) ^ table[i];
Magic Number,de4dot.code.deobfuscators,CRC32,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CRC32.cs,Hash,The following statement contains a magic number: checkSum = (checkSum >> 8) ^ table[i];
Magic Number,de4dot.code.deobfuscators,CRC32,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CRC32.cs,Hash,The following statement contains a magic number: i = (byte)(checkSum ^ (byte)(a >> 8));
Magic Number,de4dot.code.deobfuscators,CRC32,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CRC32.cs,Hash,The following statement contains a magic number: checkSum = (checkSum >> 8) ^ table[i];
Magic Number,de4dot.code.deobfuscators,CRC32,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CRC32.cs,Hash,The following statement contains a magic number: i = (byte)(checkSum ^ (byte)(a >> 16));
Magic Number,de4dot.code.deobfuscators,CRC32,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CRC32.cs,Hash,The following statement contains a magic number: checkSum = (checkSum >> 8) ^ table[i];
Magic Number,de4dot.code.deobfuscators,CRC32,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CRC32.cs,Hash,The following statement contains a magic number: i = (byte)(checkSum ^ (byte)(a >> 24));
Magic Number,de4dot.code.deobfuscators,CRC32,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CRC32.cs,Hash,The following statement contains a magic number: checkSum = (checkSum >> 8) ^ table[i];
Magic Number,de4dot.code.deobfuscators,CRC32,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CRC32.cs,Hash,The following statement contains a magic number: checkSum = (checkSum >> 8) ^ table[i];
Magic Number,de4dot.code.deobfuscators,CRC32,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CRC32.cs,Hash,The following statement contains a magic number: i = (byte)(checkSum ^ (byte)(a >> 8));
Magic Number,de4dot.code.deobfuscators,CRC32,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CRC32.cs,Hash,The following statement contains a magic number: checkSum = (checkSum >> 8) ^ table[i];
Magic Number,de4dot.code.deobfuscators,CRC32,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CRC32.cs,Hash,The following statement contains a magic number: i = (byte)(checkSum ^ (byte)(a >> 16));
Magic Number,de4dot.code.deobfuscators,CRC32,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CRC32.cs,Hash,The following statement contains a magic number: checkSum = (checkSum >> 8) ^ table[i];
Magic Number,de4dot.code.deobfuscators,CRC32,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CRC32.cs,Hash,The following statement contains a magic number: i = (byte)(checkSum ^ (byte)(a >> 24));
Magic Number,de4dot.code.deobfuscators,CRC32,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CRC32.cs,Hash,The following statement contains a magic number: checkSum = (checkSum >> 8) ^ table[i];
Magic Number,de4dot.code.deobfuscators,CRC32,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CRC32.cs,Hash,The following statement contains a magic number: i = (byte)(checkSum ^ (byte)(a >> 32));
Magic Number,de4dot.code.deobfuscators,CRC32,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CRC32.cs,Hash,The following statement contains a magic number: checkSum = (checkSum >> 8) ^ table[i];
Magic Number,de4dot.code.deobfuscators,CRC32,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CRC32.cs,Hash,The following statement contains a magic number: i = (byte)(checkSum ^ (byte)(a >> 40));
Magic Number,de4dot.code.deobfuscators,CRC32,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CRC32.cs,Hash,The following statement contains a magic number: checkSum = (checkSum >> 8) ^ table[i];
Magic Number,de4dot.code.deobfuscators,CRC32,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CRC32.cs,Hash,The following statement contains a magic number: i = (byte)(checkSum ^ (byte)(a >> 48));
Magic Number,de4dot.code.deobfuscators,CRC32,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CRC32.cs,Hash,The following statement contains a magic number: checkSum = (checkSum >> 8) ^ table[i];
Magic Number,de4dot.code.deobfuscators,CRC32,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CRC32.cs,Hash,The following statement contains a magic number: i = (byte)(checkSum ^ (byte)(a >> 56));
Magic Number,de4dot.code.deobfuscators,CRC32,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CRC32.cs,Hash,The following statement contains a magic number: checkSum = (checkSum >> 8) ^ table[i];
Magic Number,de4dot.code.deobfuscators,CRC32,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CRC32.cs,Hash,The following statement contains a magic number: checkSum = (checkSum >> 8) ^ table[i];
Magic Number,de4dot.code.deobfuscators,CRC32,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CRC32.cs,Hash,The following statement contains a magic number: i = (byte)(checkSum ^ (byte)(a >> 8));
Magic Number,de4dot.code.deobfuscators,CRC32,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CRC32.cs,Hash,The following statement contains a magic number: checkSum = (checkSum >> 8) ^ table[i];
Magic Number,de4dot.code.deobfuscators,CRC32,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CRC32.cs,Hash,The following statement contains a magic number: i = (byte)(checkSum ^ (byte)(a >> 16));
Magic Number,de4dot.code.deobfuscators,CRC32,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CRC32.cs,Hash,The following statement contains a magic number: checkSum = (checkSum >> 8) ^ table[i];
Magic Number,de4dot.code.deobfuscators,CRC32,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CRC32.cs,Hash,The following statement contains a magic number: i = (byte)(checkSum ^ (byte)(a >> 24));
Magic Number,de4dot.code.deobfuscators,CRC32,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CRC32.cs,Hash,The following statement contains a magic number: checkSum = (checkSum >> 8) ^ table[i];
Magic Number,de4dot.code.deobfuscators,CRC32,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CRC32.cs,Hash,The following statement contains a magic number: i = (byte)(checkSum ^ (byte)(a >> 32));
Magic Number,de4dot.code.deobfuscators,CRC32,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CRC32.cs,Hash,The following statement contains a magic number: checkSum = (checkSum >> 8) ^ table[i];
Magic Number,de4dot.code.deobfuscators,CRC32,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CRC32.cs,Hash,The following statement contains a magic number: i = (byte)(checkSum ^ (byte)(a >> 40));
Magic Number,de4dot.code.deobfuscators,CRC32,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CRC32.cs,Hash,The following statement contains a magic number: checkSum = (checkSum >> 8) ^ table[i];
Magic Number,de4dot.code.deobfuscators,CRC32,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CRC32.cs,Hash,The following statement contains a magic number: i = (byte)(checkSum ^ (byte)(a >> 48));
Magic Number,de4dot.code.deobfuscators,CRC32,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CRC32.cs,Hash,The following statement contains a magic number: checkSum = (checkSum >> 8) ^ table[i];
Magic Number,de4dot.code.deobfuscators,CRC32,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CRC32.cs,Hash,The following statement contains a magic number: i = (byte)(checkSum ^ (byte)(a >> 56));
Magic Number,de4dot.code.deobfuscators,CRC32,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CRC32.cs,Hash,The following statement contains a magic number: checkSum = (checkSum >> 8) ^ table[i];
Magic Number,de4dot.code.deobfuscators,CRC32,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CRC32.cs,CheckSum,The following statement contains a magic number: cs = (cs >> 8) ^ table[i];
Magic Number,de4dot.code.deobfuscators,DeobfuscatorBase,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\DeobfuscatorBase.cs,IsFatHeader,The following statement contains a magic number: body.InitLocals || body.MaxStack > 8
Magic Number,de4dot.code.deobfuscators,DeobfuscatorBase,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\DeobfuscatorBase.cs,IsFatHeader,The following statement contains a magic number: GetCodeSize(method) > 63
Magic Number,de4dot.code.deobfuscators,DeobUtils,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\DeobUtils.cs,XxteaDecrypt,The following statement contains a magic number: uint rounds = (uint)(6 + 52 / n);
Magic Number,de4dot.code.deobfuscators,DeobUtils,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\DeobUtils.cs,XxteaDecrypt,The following statement contains a magic number: uint rounds = (uint)(6 + 52 / n);
Magic Number,de4dot.code.deobfuscators,DeobUtils,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\DeobUtils.cs,XxteaDecrypt,The following statement contains a magic number: int e = (int)((sum >> 2) & 3);
Magic Number,de4dot.code.deobfuscators,DeobUtils,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\DeobUtils.cs,XxteaDecrypt,The following statement contains a magic number: int e = (int)((sum >> 2) & 3);
Magic Number,de4dot.code.deobfuscators,DeobUtils,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\DeobUtils.cs,XxteaDecrypt,The following statement contains a magic number: y = v[p] -= (((z >> 5 ^ y << 2) + (y >> 3 ^ z << 4)) ^ ((sum ^ y) + (key[(p & 3) ^ e] ^ z)));
Magic Number,de4dot.code.deobfuscators,DeobUtils,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\DeobUtils.cs,XxteaDecrypt,The following statement contains a magic number: y = v[p] -= (((z >> 5 ^ y << 2) + (y >> 3 ^ z << 4)) ^ ((sum ^ y) + (key[(p & 3) ^ e] ^ z)));
Magic Number,de4dot.code.deobfuscators,DeobUtils,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\DeobUtils.cs,XxteaDecrypt,The following statement contains a magic number: y = v[p] -= (((z >> 5 ^ y << 2) + (y >> 3 ^ z << 4)) ^ ((sum ^ y) + (key[(p & 3) ^ e] ^ z)));
Magic Number,de4dot.code.deobfuscators,DeobUtils,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\DeobUtils.cs,XxteaDecrypt,The following statement contains a magic number: y = v[p] -= (((z >> 5 ^ y << 2) + (y >> 3 ^ z << 4)) ^ ((sum ^ y) + (key[(p & 3) ^ e] ^ z)));
Magic Number,de4dot.code.deobfuscators,DeobUtils,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\DeobUtils.cs,XxteaDecrypt,The following statement contains a magic number: y = v[p] -= (((z >> 5 ^ y << 2) + (y >> 3 ^ z << 4)) ^ ((sum ^ y) + (key[(p & 3) ^ e] ^ z)));
Magic Number,de4dot.code.deobfuscators,DeobUtils,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\DeobUtils.cs,XxteaDecrypt,The following statement contains a magic number: y = v[0] -= (((z >> 5 ^ y << 2) + (y >> 3 ^ z << 4)) ^ ((sum ^ y) + (key[(p & 3) ^ e] ^ z)));
Magic Number,de4dot.code.deobfuscators,DeobUtils,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\DeobUtils.cs,XxteaDecrypt,The following statement contains a magic number: y = v[0] -= (((z >> 5 ^ y << 2) + (y >> 3 ^ z << 4)) ^ ((sum ^ y) + (key[(p & 3) ^ e] ^ z)));
Magic Number,de4dot.code.deobfuscators,DeobUtils,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\DeobUtils.cs,XxteaDecrypt,The following statement contains a magic number: y = v[0] -= (((z >> 5 ^ y << 2) + (y >> 3 ^ z << 4)) ^ ((sum ^ y) + (key[(p & 3) ^ e] ^ z)));
Magic Number,de4dot.code.deobfuscators,DeobUtils,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\DeobUtils.cs,XxteaDecrypt,The following statement contains a magic number: y = v[0] -= (((z >> 5 ^ y << 2) + (y >> 3 ^ z << 4)) ^ ((sum ^ y) + (key[(p & 3) ^ e] ^ z)));
Magic Number,de4dot.code.deobfuscators,DeobUtils,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\DeobUtils.cs,XxteaDecrypt,The following statement contains a magic number: y = v[0] -= (((z >> 5 ^ y << 2) + (y >> 3 ^ z << 4)) ^ ((sum ^ y) + (key[(p & 3) ^ e] ^ z)));
Magic Number,de4dot.code.deobfuscators,DeobUtils,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\DeobUtils.cs,XteaDecrypt,The following statement contains a magic number: v1 -= (((v0 << 4) ^ (v0 >> 5)) + v0) ^ (sum + key[(sum >> 11) & 3]);
Magic Number,de4dot.code.deobfuscators,DeobUtils,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\DeobUtils.cs,XteaDecrypt,The following statement contains a magic number: v1 -= (((v0 << 4) ^ (v0 >> 5)) + v0) ^ (sum + key[(sum >> 11) & 3]);
Magic Number,de4dot.code.deobfuscators,DeobUtils,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\DeobUtils.cs,XteaDecrypt,The following statement contains a magic number: v1 -= (((v0 << 4) ^ (v0 >> 5)) + v0) ^ (sum + key[(sum >> 11) & 3]);
Magic Number,de4dot.code.deobfuscators,DeobUtils,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\DeobUtils.cs,XteaDecrypt,The following statement contains a magic number: v1 -= (((v0 << 4) ^ (v0 >> 5)) + v0) ^ (sum + key[(sum >> 11) & 3]);
Magic Number,de4dot.code.deobfuscators,DeobUtils,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\DeobUtils.cs,XteaDecrypt,The following statement contains a magic number: v0 -= (((v1 << 4) ^ (v1 >> 5)) + v1) ^ (sum + key[sum & 3]);
Magic Number,de4dot.code.deobfuscators,DeobUtils,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\DeobUtils.cs,XteaDecrypt,The following statement contains a magic number: v0 -= (((v1 << 4) ^ (v1 >> 5)) + v1) ^ (sum + key[sum & 3]);
Magic Number,de4dot.code.deobfuscators,DeobUtils,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\DeobUtils.cs,XteaDecrypt,The following statement contains a magic number: v0 -= (((v1 << 4) ^ (v1 >> 5)) + v1) ^ (sum + key[sum & 3]);
Magic Number,de4dot.code.deobfuscators,DeobUtils,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\DeobUtils.cs,ReadVariableLengthInt32,The following statement contains a magic number: return (((int)b & 0x3F) << 8) + data[index++];
Magic Number,de4dot.code.deobfuscators,DeobUtils,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\DeobUtils.cs,ReadVariableLengthInt32,The following statement contains a magic number: return (((int)b & 0x1F) << 24) +  					((int)data[index++] << 16) +  					((int)data[index++] << 8) +  					data[index++];
Magic Number,de4dot.code.deobfuscators,DeobUtils,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\DeobUtils.cs,ReadVariableLengthInt32,The following statement contains a magic number: return (((int)b & 0x1F) << 24) +  					((int)data[index++] << 16) +  					((int)data[index++] << 8) +  					data[index++];
Magic Number,de4dot.code.deobfuscators,DeobUtils,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\DeobUtils.cs,ReadVariableLengthInt32,The following statement contains a magic number: return (((int)b & 0x1F) << 24) +  					((int)data[index++] << 16) +  					((int)data[index++] << 8) +  					data[index++];
Magic Number,de4dot.code.deobfuscators,InitializedDataCreator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\InitializedDataCreator.cs,GetModuleId,The following statement contains a magic number: var guid = new Guid(BitConverter.ToInt32(hash' 0)'  								BitConverter.ToInt16(hash' 4)'  								BitConverter.ToInt16(hash' 6)'  								hash[8]' hash[9]' hash[10]' hash[11]'  								hash[12]' hash[13]' hash[14]' hash[15]);
Magic Number,de4dot.code.deobfuscators,InitializedDataCreator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\InitializedDataCreator.cs,GetModuleId,The following statement contains a magic number: var guid = new Guid(BitConverter.ToInt32(hash' 0)'  								BitConverter.ToInt16(hash' 4)'  								BitConverter.ToInt16(hash' 6)'  								hash[8]' hash[9]' hash[10]' hash[11]'  								hash[12]' hash[13]' hash[14]' hash[15]);
Magic Number,de4dot.code.deobfuscators,InitializedDataCreator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\InitializedDataCreator.cs,GetModuleId,The following statement contains a magic number: var guid = new Guid(BitConverter.ToInt32(hash' 0)'  								BitConverter.ToInt16(hash' 4)'  								BitConverter.ToInt16(hash' 6)'  								hash[8]' hash[9]' hash[10]' hash[11]'  								hash[12]' hash[13]' hash[14]' hash[15]);
Magic Number,de4dot.code.deobfuscators,InitializedDataCreator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\InitializedDataCreator.cs,GetModuleId,The following statement contains a magic number: var guid = new Guid(BitConverter.ToInt32(hash' 0)'  								BitConverter.ToInt16(hash' 4)'  								BitConverter.ToInt16(hash' 6)'  								hash[8]' hash[9]' hash[10]' hash[11]'  								hash[12]' hash[13]' hash[14]' hash[15]);
Magic Number,de4dot.code.deobfuscators,InitializedDataCreator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\InitializedDataCreator.cs,GetModuleId,The following statement contains a magic number: var guid = new Guid(BitConverter.ToInt32(hash' 0)'  								BitConverter.ToInt16(hash' 4)'  								BitConverter.ToInt16(hash' 6)'  								hash[8]' hash[9]' hash[10]' hash[11]'  								hash[12]' hash[13]' hash[14]' hash[15]);
Magic Number,de4dot.code.deobfuscators,InitializedDataCreator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\InitializedDataCreator.cs,GetModuleId,The following statement contains a magic number: var guid = new Guid(BitConverter.ToInt32(hash' 0)'  								BitConverter.ToInt16(hash' 4)'  								BitConverter.ToInt16(hash' 6)'  								hash[8]' hash[9]' hash[10]' hash[11]'  								hash[12]' hash[13]' hash[14]' hash[15]);
Magic Number,de4dot.code.deobfuscators,InitializedDataCreator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\InitializedDataCreator.cs,GetModuleId,The following statement contains a magic number: var guid = new Guid(BitConverter.ToInt32(hash' 0)'  								BitConverter.ToInt16(hash' 4)'  								BitConverter.ToInt16(hash' 6)'  								hash[8]' hash[9]' hash[10]' hash[11]'  								hash[12]' hash[13]' hash[14]' hash[15]);
Magic Number,de4dot.code.deobfuscators,InitializedDataCreator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\InitializedDataCreator.cs,GetModuleId,The following statement contains a magic number: var guid = new Guid(BitConverter.ToInt32(hash' 0)'  								BitConverter.ToInt16(hash' 4)'  								BitConverter.ToInt16(hash' 6)'  								hash[8]' hash[9]' hash[10]' hash[11]'  								hash[12]' hash[13]' hash[14]' hash[15]);
Magic Number,de4dot.code.deobfuscators,InitializedDataCreator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\InitializedDataCreator.cs,GetModuleId,The following statement contains a magic number: var guid = new Guid(BitConverter.ToInt32(hash' 0)'  								BitConverter.ToInt16(hash' 4)'  								BitConverter.ToInt16(hash' 6)'  								hash[8]' hash[9]' hash[10]' hash[11]'  								hash[12]' hash[13]' hash[14]' hash[15]);
Magic Number,de4dot.code.deobfuscators,InitializedDataCreator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\InitializedDataCreator.cs,GetModuleId,The following statement contains a magic number: var guid = new Guid(BitConverter.ToInt32(hash' 0)'  								BitConverter.ToInt16(hash' 4)'  								BitConverter.ToInt16(hash' 6)'  								hash[8]' hash[9]' hash[10]' hash[11]'  								hash[12]' hash[13]' hash[14]' hash[15]);
Magic Number,de4dot.code.deobfuscators,InlinedMethodsFinder,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\InlinedMethodsFinder.cs,Find,The following statement contains a magic number: instrs.Count < 2
Magic Number,de4dot.code.deobfuscators,MethodBodyParser,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MethodBodyParser.cs,ParseMethodBody2,The following statement contains a magic number: mbHeader.flags = 2;
Magic Number,de4dot.code.deobfuscators,MethodBodyParser,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MethodBodyParser.cs,ParseMethodBody2,The following statement contains a magic number: mbHeader.maxStack = 8;
Magic Number,de4dot.code.deobfuscators,MethodBodyParser,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MethodBodyParser.cs,ParseMethodBody2,The following statement contains a magic number: mbHeader.codeSize = (uint)(reader.ReadByte() >> 2);
Magic Number,de4dot.code.deobfuscators,MethodBodyParser,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MethodBodyParser.cs,ParseMethodBody2,The following statement contains a magic number: (b & 3) == 2
Magic Number,de4dot.code.deobfuscators,MethodBodyParser,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MethodBodyParser.cs,ParseMethodBody2,The following statement contains a magic number: (b & 3) == 2
Magic Number,de4dot.code.deobfuscators,MethodBodyParser,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MethodBodyParser.cs,ParseMethodBody2,The following statement contains a magic number: (mbHeader.flags & 8) != 0
Magic Number,de4dot.code.deobfuscators,MethodBodyParser,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MethodBodyParser.cs,ReadExtraSections2,The following statement contains a magic number: Align(ref reader' 4);
Magic Number,de4dot.code.deobfuscators,MethodBodyParser,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MethodBodyParser.cs,ParseSection,The following statement contains a magic number: Align(ref reader' 4);
Magic Number,de4dot.code.deobfuscators,MethodBodyParser,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MethodBodyParser.cs,ParseSection,The following statement contains a magic number: int num = (int)(reader.ReadUInt32() >> 8) / 24;
Magic Number,de4dot.code.deobfuscators,MethodBodyParser,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MethodBodyParser.cs,ParseSection,The following statement contains a magic number: int num = (int)(reader.ReadUInt32() >> 8) / 24;
Magic Number,de4dot.code.deobfuscators,MethodBodyParser,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MethodBodyParser.cs,ParseSection,The following statement contains a magic number: reader.Position += (uint)num * 24;
Magic Number,de4dot.code.deobfuscators,MethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MethodsDecrypter.cs,Decrypt,The following statement contains a magic number: i < 5
Magic Number,de4dot.code.deobfuscators,MyPEImage,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MyPEImage.cs,OffsetWriteUInt32,The following statement contains a magic number: peImageData[offset + 1] = (byte)(val >> 8);
Magic Number,de4dot.code.deobfuscators,MyPEImage,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MyPEImage.cs,OffsetWriteUInt32,The following statement contains a magic number: peImageData[offset + 2] = (byte)(val >> 16);
Magic Number,de4dot.code.deobfuscators,MyPEImage,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MyPEImage.cs,OffsetWriteUInt32,The following statement contains a magic number: peImageData[offset + 2] = (byte)(val >> 16);
Magic Number,de4dot.code.deobfuscators,MyPEImage,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MyPEImage.cs,OffsetWriteUInt32,The following statement contains a magic number: peImageData[offset + 3] = (byte)(val >> 24);
Magic Number,de4dot.code.deobfuscators,MyPEImage,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MyPEImage.cs,OffsetWriteUInt32,The following statement contains a magic number: peImageData[offset + 3] = (byte)(val >> 24);
Magic Number,de4dot.code.deobfuscators,MyPEImage,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MyPEImage.cs,OffsetWriteUInt16,The following statement contains a magic number: peImageData[offset + 1] = (byte)(val >> 8);
Magic Number,de4dot.code.deobfuscators,ProxyCallFixerBase,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\ProxyCallFixerBase.cs,Deobfuscate,The following statement contains a magic number: int loops = ProxyCallIsObfuscated ? 50 : 1;
Magic Number,de4dot.code.deobfuscators,QuickLZBase,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\QuickLZ.cs,Decompress,The following statement contains a magic number: inIndex += 4;
Magic Number,de4dot.code.deobfuscators,QuickLZBase,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\QuickLZ.cs,Decompress,The following statement contains a magic number: count = (val2 & 0xFF) >> 2;
Magic Number,de4dot.code.deobfuscators,QuickLZBase,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\QuickLZ.cs,Decompress,The following statement contains a magic number: Copy(outData' (int)(outIndex - count)' outData' outIndex' 3);
Magic Number,de4dot.code.deobfuscators,QuickLZBase,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\QuickLZ.cs,Decompress,The following statement contains a magic number: outIndex += 3;
Magic Number,de4dot.code.deobfuscators,QuickLZBase,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\QuickLZ.cs,Decompress,The following statement contains a magic number: (val2 & 3) == 0
Magic Number,de4dot.code.deobfuscators,QuickLZBase,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\QuickLZ.cs,Decompress,The following statement contains a magic number: inIndex += 4;
Magic Number,de4dot.code.deobfuscators,QuickLZ,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\QuickLZ.cs,IsCompressed,The following statement contains a magic number: data.Length < 4
Magic Number,de4dot.code.deobfuscators,QuickLZ,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\QuickLZ.cs,Decompress,The following statement contains a magic number: BitConverter.ToInt32(inData' 4);
Magic Number,de4dot.code.deobfuscators,QuickLZ,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\QuickLZ.cs,Decompress,The following statement contains a magic number: int compressedLength = BitConverter.ToInt32(inData' 8);
Magic Number,de4dot.code.deobfuscators,QuickLZ,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\QuickLZ.cs,Decompress,The following statement contains a magic number: int decompressedLength = BitConverter.ToInt32(inData' 12);
Magic Number,de4dot.code.deobfuscators,QuickLZ,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\QuickLZ.cs,Decompress,The following statement contains a magic number: bool isDataCompressed = BitConverter.ToInt32(inData' 16) == 1;
Magic Number,de4dot.code.deobfuscators,QuickLZ,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\QuickLZ.cs,Decompress,The following statement contains a magic number: int headerLength = 32;
Magic Number,de4dot.code.deobfuscators,QuickLZ,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\QuickLZ.cs,Decompress,The following statement contains a magic number: BitConverter.ToInt32(inData' 0) != sig || BitConverter.ToInt32(inData' compressedLength - 4) != sig
Magic Number,de4dot.code.deobfuscators,RandomNameChecker,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\RandomNameChecker.cs,IsNonRandom,The following statement contains a magic number: name.Length < 5
Magic Number,de4dot.code.deobfuscators,RandomNameChecker,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\RandomNameChecker.cs,IsNonRandom,The following statement contains a magic number: switch (words.Count) {  			case 1:  				return vowels == words.Count;  			case 2:  			case 3:  				return vowels >= 1;  			case 4:  			case 5:  				return vowels >= 2;  			case 6:  				return vowels >= 3;  			case 7:  				return vowels >= 4;  			default:  				return vowels >= words.Count - 4;  			}
Magic Number,de4dot.code.deobfuscators,RandomNameChecker,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\RandomNameChecker.cs,IsNonRandom,The following statement contains a magic number: switch (words.Count) {  			case 1:  				return vowels == words.Count;  			case 2:  			case 3:  				return vowels >= 1;  			case 4:  			case 5:  				return vowels >= 2;  			case 6:  				return vowels >= 3;  			case 7:  				return vowels >= 4;  			default:  				return vowels >= words.Count - 4;  			}
Magic Number,de4dot.code.deobfuscators,RandomNameChecker,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\RandomNameChecker.cs,IsNonRandom,The following statement contains a magic number: switch (words.Count) {  			case 1:  				return vowels == words.Count;  			case 2:  			case 3:  				return vowels >= 1;  			case 4:  			case 5:  				return vowels >= 2;  			case 6:  				return vowels >= 3;  			case 7:  				return vowels >= 4;  			default:  				return vowels >= words.Count - 4;  			}
Magic Number,de4dot.code.deobfuscators,RandomNameChecker,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\RandomNameChecker.cs,IsNonRandom,The following statement contains a magic number: switch (words.Count) {  			case 1:  				return vowels == words.Count;  			case 2:  			case 3:  				return vowels >= 1;  			case 4:  			case 5:  				return vowels >= 2;  			case 6:  				return vowels >= 3;  			case 7:  				return vowels >= 4;  			default:  				return vowels >= words.Count - 4;  			}
Magic Number,de4dot.code.deobfuscators,RandomNameChecker,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\RandomNameChecker.cs,IsNonRandom,The following statement contains a magic number: switch (words.Count) {  			case 1:  				return vowels == words.Count;  			case 2:  			case 3:  				return vowels >= 1;  			case 4:  			case 5:  				return vowels >= 2;  			case 6:  				return vowels >= 3;  			case 7:  				return vowels >= 4;  			default:  				return vowels >= words.Count - 4;  			}
Magic Number,de4dot.code.deobfuscators,RandomNameChecker,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\RandomNameChecker.cs,IsNonRandom,The following statement contains a magic number: switch (words.Count) {  			case 1:  				return vowels == words.Count;  			case 2:  			case 3:  				return vowels >= 1;  			case 4:  			case 5:  				return vowels >= 2;  			case 6:  				return vowels >= 3;  			case 7:  				return vowels >= 4;  			default:  				return vowels >= words.Count - 4;  			}
Magic Number,de4dot.code.deobfuscators,RandomNameChecker,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\RandomNameChecker.cs,IsNonRandom,The following statement contains a magic number: switch (words.Count) {  			case 1:  				return vowels == words.Count;  			case 2:  			case 3:  				return vowels >= 1;  			case 4:  			case 5:  				return vowels >= 2;  			case 6:  				return vowels >= 3;  			case 7:  				return vowels >= 4;  			default:  				return vowels >= words.Count - 4;  			}
Magic Number,de4dot.code.deobfuscators,RandomNameChecker,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\RandomNameChecker.cs,IsNonRandom,The following statement contains a magic number: switch (words.Count) {  			case 1:  				return vowels == words.Count;  			case 2:  			case 3:  				return vowels >= 1;  			case 4:  			case 5:  				return vowels >= 2;  			case 6:  				return vowels >= 3;  			case 7:  				return vowels >= 4;  			default:  				return vowels >= words.Count - 4;  			}
Magic Number,de4dot.code.deobfuscators,RandomNameChecker,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\RandomNameChecker.cs,IsNonRandom,The following statement contains a magic number: switch (words.Count) {  			case 1:  				return vowels == words.Count;  			case 2:  			case 3:  				return vowels >= 1;  			case 4:  			case 5:  				return vowels >= 2;  			case 6:  				return vowels >= 3;  			case 7:  				return vowels >= 4;  			default:  				return vowels >= words.Count - 4;  			}
Magic Number,de4dot.code.deobfuscators,RandomNameChecker,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\RandomNameChecker.cs,IsNonRandom,The following statement contains a magic number: switch (words.Count) {  			case 1:  				return vowels == words.Count;  			case 2:  			case 3:  				return vowels >= 1;  			case 4:  			case 5:  				return vowels >= 2;  			case 6:  				return vowels >= 3;  			case 7:  				return vowels >= 4;  			default:  				return vowels >= words.Count - 4;  			}
Magic Number,de4dot.code.deobfuscators,RandomNameChecker,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\RandomNameChecker.cs,IsRandom,The following statement contains a magic number: len < 5
Magic Number,de4dot.code.deobfuscators,RandomNameChecker,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\RandomNameChecker.cs,IsRandom,The following statement contains a magic number: CountNumbers(typeWords' 2)
Magic Number,de4dot.code.deobfuscators,RandomNameChecker,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\RandomNameChecker.cs,IsRandom,The following statement contains a magic number: upper >= 3
Magic Number,de4dot.code.deobfuscators,RandomNameChecker,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\RandomNameChecker.cs,IsRandom,The following statement contains a magic number: bool hasTwoUpperWords = upper == 2;
Magic Number,de4dot.code.deobfuscators,RandomNameChecker,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\RandomNameChecker.cs,IsRandom,The following statement contains a magic number: IsDigit(typeWords[i - 1][0]) && IsLower(typeWords[i - 2][0]) && IsLower(typeWords[i][0])
Magic Number,de4dot.code.deobfuscators,RandomNameChecker,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\RandomNameChecker.cs,IsRandom,The following statement contains a magic number: IsLower(name[len - 3]) && IsUpper(name[len - 2]) && IsDigit(name[len - 1])
Magic Number,de4dot.code.deobfuscators,RandomNameChecker,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\RandomNameChecker.cs,IsRandom,The following statement contains a magic number: IsLower(name[len - 3]) && IsUpper(name[len - 2]) && IsDigit(name[len - 1])
Magic Number,de4dot.code.deobfuscators,TypesRestorerBase,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\TypesRestorer.cs,DeobfuscateLoop,The following statement contains a magic number: i < 10
Magic Number,de4dot.code.deobfuscators,TypesRestorerBase,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\TypesRestorer.cs,DeobfuscateMethod,The following statement contains a magic number: switch (instr.OpCode.Code) {  				case Code.Ret:  					if (!fixReturnType)  						break;  					bool wasNewobj;  					var type = GetLoadedType(method' method' instructions' i' out wasNewobj);  					if (type == null)  						break;  					methodReturnInfo.Add(type);  					break;    				case Code.Call:  				case Code.Calli:  				case Code.Callvirt:  				case Code.Newobj:  					pushedArgs = MethodStack.GetPushedArgInstructions(instructions' i);  					var calledMethod = instr.Operand as IMethod;  					if (calledMethod == null)  						break;  					var calledMethodParams = DotNetUtils.GetArgs(calledMethod);  					for (int j = 0; j < pushedArgs.NumValidArgs; j++) {  						int calledMethodParamIndex = calledMethodParams.Count - j - 1;  						var ldInstr = pushedArgs.GetEnd(j);  						switch (ldInstr.OpCode.Code) {  						case Code.Ldarg:  						case Code.Ldarg_S:  						case Code.Ldarg_0:  						case Code.Ldarg_1:  						case Code.Ldarg_2:  						case Code.Ldarg_3:  							AddMethodArgType(method' GetParameter(methodParams' ldInstr)' DotNetUtils.GetArg(calledMethodParams' calledMethodParamIndex));  							break;    						default:  							break;  						}  					}  					break;    				case Code.Castclass:  					pushedArgs = MethodStack.GetPushedArgInstructions(instructions' i);  					if (pushedArgs.NumValidArgs < 1)  						break;  					AddMethodArgType(method' GetParameter(methodParams' pushedArgs.GetEnd(0))' instr.Operand as ITypeDefOrRef);  					break;    				case Code.Stloc:  				case Code.Stloc_S:  				case Code.Stloc_0:  				case Code.Stloc_1:  				case Code.Stloc_2:  				case Code.Stloc_3:  					pushedArgs = MethodStack.GetPushedArgInstructions(instructions' i);  					if (pushedArgs.NumValidArgs < 1)  						break;  					AddMethodArgType(method' GetParameter(methodParams' pushedArgs.GetEnd(0))' instr.GetLocal(method.Body.Variables));  					break;    				case Code.Stsfld:  					pushedArgs = MethodStack.GetPushedArgInstructions(instructions' i);  					if (pushedArgs.NumValidArgs < 1)  						break;  					AddMethodArgType(method' GetParameter(methodParams' pushedArgs.GetEnd(0))' instr.Operand as IField);  					break;    				case Code.Stfld:  					pushedArgs = MethodStack.GetPushedArgInstructions(instructions' i);  					if (pushedArgs.NumValidArgs >= 1) {  						var field = instr.Operand as IField;  						AddMethodArgType(method' GetParameter(methodParams' pushedArgs.GetEnd(0))' field);  						if (pushedArgs.NumValidArgs >= 2 && field != null)  							AddMethodArgType(method' GetParameter(methodParams' pushedArgs.GetEnd(1))' field.DeclaringType);  					}  					break;    				case Code.Ldfld:  				case Code.Ldflda:  					pushedArgs = MethodStack.GetPushedArgInstructions(instructions' i);  					if (pushedArgs.NumValidArgs < 1)  						break;  					AddMethodArgType(method' GetParameter(methodParams' pushedArgs.GetEnd(0))' instr.Operand as IField);  					break;    				//TODO: For better results' these should be checked:  				case Code.Starg:  				case Code.Starg_S:    				case Code.Ldelema:  				case Code.Ldelem:  				case Code.Ldelem_I:  				case Code.Ldelem_I1:  				case Code.Ldelem_I2:  				case Code.Ldelem_I4:  				case Code.Ldelem_I8:  				case Code.Ldelem_R4:  				case Code.Ldelem_R8:  				case Code.Ldelem_Ref:  				case Code.Ldelem_U1:  				case Code.Ldelem_U2:  				case Code.Ldelem_U4:    				case Code.Ldind_I:  				case Code.Ldind_I1:  				case Code.Ldind_I2:  				case Code.Ldind_I4:  				case Code.Ldind_I8:  				case Code.Ldind_R4:  				case Code.Ldind_R8:  				case Code.Ldind_Ref:  				case Code.Ldind_U1:  				case Code.Ldind_U2:  				case Code.Ldind_U4:    				case Code.Ldobj:    				case Code.Stelem:  				case Code.Stelem_I:  				case Code.Stelem_I1:  				case Code.Stelem_I2:  				case Code.Stelem_I4:  				case Code.Stelem_I8:  				case Code.Stelem_R4:  				case Code.Stelem_R8:  				case Code.Stelem_Ref:    				case Code.Stind_I:  				case Code.Stind_I1:  				case Code.Stind_I2:  				case Code.Stind_I4:  				case Code.Stind_I8:  				case Code.Stind_R4:  				case Code.Stind_R8:  				case Code.Stind_Ref:    				case Code.Stobj:  				default:  					break;  				}
Magic Number,de4dot.code.deobfuscators.Babel_NET,BabelInflater,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Babel_NET\BabelInflater.cs,ReadHeader,The following statement contains a magic number: const int numBits = 4;
Magic Number,de4dot.code.deobfuscators.Babel_NET,BabelInflater,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Babel_NET\BabelInflater.cs,ReadHeader,The following statement contains a magic number: switch (type >> 1) {  			case 1: blockType = STORED_BLOCK; break;  			case 5: blockType = STATIC_TREES; break;  			case 6: blockType = DYN_TREES; break;  			default: throw new SharpZipBaseException("Unknown block type: " + type);  			}
Magic Number,de4dot.code.deobfuscators.Babel_NET,BabelInflater,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Babel_NET\BabelInflater.cs,ReadHeader,The following statement contains a magic number: switch (type >> 1) {  			case 1: blockType = STORED_BLOCK; break;  			case 5: blockType = STATIC_TREES; break;  			case 6: blockType = DYN_TREES; break;  			default: throw new SharpZipBaseException("Unknown block type: " + type);  			}
Magic Number,de4dot.code.deobfuscators.Babel_NET,BabelInflater,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Babel_NET\BabelInflater.cs,DecodeStoredLength,The following statement contains a magic number: (uncomprLen = input.PeekBits(16)) < 0
Magic Number,de4dot.code.deobfuscators.Babel_NET,BabelInflater,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Babel_NET\BabelInflater.cs,DecodeStoredLength,The following statement contains a magic number: input.DropBits(16);
Magic Number,de4dot.code.deobfuscators.Babel_NET,BabelMethodCallInliner,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Babel_NET\BabelMethodCallInliner.cs,GetNewValue,The following statement contains a magic number: counter++ >= 50
Magic Number,de4dot.code.deobfuscators.Babel_NET,BabelUtils,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Babel_NET\BabelUtils.cs,GetXorKey2,The following statement contains a magic number: instrs[i + 2].OpCode.Code != Code.Xor
Magic Number,de4dot.code.deobfuscators.Babel_NET,BabelUtils,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Babel_NET\BabelUtils.cs,GetXorKey2,The following statement contains a magic number: i < instrs.Count - 2
Magic Number,de4dot.code.deobfuscators.Babel_NET,ConstantsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Babel_NET\ConstantsDecrypter.cs,Deobfuscate,The following statement contains a magic number: i < instrs.Count - 6
Magic Number,de4dot.code.deobfuscators.Babel_NET,Deobfuscator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Babel_NET\Deobfuscator.cs,DetectInternal,The following statement contains a magic number: val += 100 + 10 * (sum - 1);
Magic Number,de4dot.code.deobfuscators.Babel_NET,Deobfuscator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Babel_NET\Deobfuscator.cs,DetectInternal,The following statement contains a magic number: val += 100 + 10 * (sum - 1);
Magic Number,de4dot.code.deobfuscators.Babel_NET,Deobfuscator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Babel_NET\Deobfuscator.cs,DetectInternal,The following statement contains a magic number: val += 10;
Magic Number,de4dot.code.deobfuscators.Babel_NET,Deobfuscator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Babel_NET\Deobfuscator.cs,CheckVersion,The following statement contains a magic number: val.Groups.Count < 2
Magic Number,de4dot.code.deobfuscators.Babel_NET,ImageReader,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Babel_NET\ImageReader.cs,Initialize,The following statement contains a magic number: uint pos = (uint)metadataOffset + 4;
Magic Number,de4dot.code.deobfuscators.Babel_NET,ImageReader,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Babel_NET\ImageReader.cs,GetMetadataOffset,The following statement contains a magic number: reader.Position = reader.Length - 4;
Magic Number,de4dot.code.deobfuscators.Babel_NET,ImageReader,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Babel_NET\ImageReader.cs,GetMetadataOffset,The following statement contains a magic number: return (int)reader.Position - 4;
Magic Number,de4dot.code.deobfuscators.Babel_NET,ImageReader,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Babel_NET\ImageReader.cs,GetMetadataOffset,The following statement contains a magic number: reader.Position -= 8;
Magic Number,de4dot.code.deobfuscators.Babel_NET,ImageReader,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Babel_NET\ImageReader.cs,GetMetadataOffset,The following statement contains a magic number: i < 30
Magic Number,de4dot.code.deobfuscators.Babel_NET,InflaterCreator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Babel_NET\InflaterCreator.cs,GetMagic,The following statement contains a magic number: !ldci4_1.IsLdcI4() || ldci4_1.GetLdcI4Value() != 16
Magic Number,de4dot.code.deobfuscators.Babel_NET,InflaterCreator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Babel_NET\InflaterCreator.cs,GetMagic,The following statement contains a magic number: var ldci4_2 = instrs[i + 2];
Magic Number,de4dot.code.deobfuscators.Babel_NET,InflaterCreator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Babel_NET\InflaterCreator.cs,GetMagic,The following statement contains a magic number: instrs[i + 3].OpCode.Code != Code.Xor
Magic Number,de4dot.code.deobfuscators.Babel_NET,InflaterCreator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Babel_NET\InflaterCreator.cs,GetMagic,The following statement contains a magic number: i < instrs.Count - 3
Magic Number,de4dot.code.deobfuscators.Babel_NET,MethodBodyReader,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Babel_NET\MethodBodyReader.cs,ReadInlineTok,The following statement contains a magic number: switch (imageReader.reader.ReadByte()) {  			case 0: res = imageReader.ReadTypeSig().ToTypeDefOrRef(); break;  			case 1: res = imageReader.ReadFieldRef(); break;  			case 2: res = imageReader.ReadMethodRef(); break;  			default: throw new ApplicationException("Unknown token type");  			}
Magic Number,de4dot.code.deobfuscators.Babel_NET,ProxyCallFixer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Babel_NET\ProxyCallFixer.cs,CheckCctor,The following statement contains a magic number: declaringTypeToken = instrs[2].GetLdcI4Value();
Magic Number,de4dot.code.deobfuscators.Babel_NET,ProxyCallFixer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Babel_NET\ProxyCallFixer.cs,CheckCctor,The following statement contains a magic number: delegateField = instrs[3].Operand as IField;
Magic Number,de4dot.code.deobfuscators.Babel_NET,ProxyCallFixer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Babel_NET\ProxyCallFixer.cs,CheckCctor,The following statement contains a magic number: createMethod = instrs[4].Operand as IMethod;
Magic Number,de4dot.code.deobfuscators.Babel_NET,ResourceDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Babel_NET\ResourceDecrypter.cs,CreateDecrypter,The following statement contains a magic number: decryptMethod != null && DeobUtils.HasInteger(decryptMethod' 6)
Magic Number,de4dot.code.deobfuscators.Babel_NET,Decrypter2,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Babel_NET\ResourceDecrypter.cs,GetHeaderData,The following statement contains a magic number: Array.Copy(encryptedData' index + 2' headerData' 0' headerData.Length);
Magic Number,de4dot.code.deobfuscators.Babel_NET,Decrypter2,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Babel_NET\ResourceDecrypter.cs,GetHeaderData,The following statement contains a magic number: index += headerData.Length + 2;
Magic Number,de4dot.code.deobfuscators.Babel_NET,Decrypter2,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Babel_NET\ResourceDecrypter.cs,GetHeaderData,The following statement contains a magic number: var key = new byte[8];
Magic Number,de4dot.code.deobfuscators.Babel_NET,Decrypter2,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Babel_NET\ResourceDecrypter.cs,GetKeyIv,The following statement contains a magic number: headerData[(int)reader.BaseStream.Position] != 8
Magic Number,de4dot.code.deobfuscators.Babel_NET,Decrypter2,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Babel_NET\ResourceDecrypter.cs,GetKeyIv,The following statement contains a magic number: headerData[(int)reader.BaseStream.Position] != 8
Magic Number,de4dot.code.deobfuscators.Babel_NET,Decrypter3,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Babel_NET\ResourceDecrypter.cs,GetHeaderData,The following statement contains a magic number: Array.Copy(encryptedData' index + 2' headerData' 0' headerData.Length);
Magic Number,de4dot.code.deobfuscators.Babel_NET,Decrypter3,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Babel_NET\ResourceDecrypter.cs,GetHeaderData,The following statement contains a magic number: index += headerData.Length + 2;
Magic Number,de4dot.code.deobfuscators.Babel_NET,Decrypter3,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Babel_NET\ResourceDecrypter.cs,GetHeaderData,The following statement contains a magic number: var key = new byte[6];
Magic Number,de4dot.code.deobfuscators.Babel_NET,ResourceResolver,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Babel_NET\ResourceResolver.cs,InitXorKeys,The following statement contains a magic number: instrs[i + 2].OpCode.Code != Code.Xor
Magic Number,de4dot.code.deobfuscators.Babel_NET,ResourceResolver,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Babel_NET\ResourceResolver.cs,InitXorKeys,The following statement contains a magic number: ints.Count == 2
Magic Number,de4dot.code.deobfuscators.Babel_NET,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Babel_NET\StringDecrypter.cs,CheckDecrypterType,The following statement contains a magic number: type.NestedTypes.Count > 2
Magic Number,de4dot.code.deobfuscators.Babel_NET,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Babel_NET\StringDecrypter.cs,CheckNested,The following statement contains a magic number: nested.Fields.Count == 1 || nested.Fields.Count == 3
Magic Number,de4dot.code.deobfuscators.Babel_NET,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Babel_NET\StringDecrypter.cs,GetOffsetMagic,The following statement contains a magic number: i < instrs.Count - 4
Magic Number,de4dot.code.deobfuscators.Babel_NET,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Babel_NET\StringDecrypter.cs,CheckFields,The following statement contains a magic number: type.Fields.Count != 2
Magic Number,de4dot.code.deobfuscators.CodeFort,AssemblyDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CodeFort\AssemblyDecrypter.cs,CheckCalledMethods,The following statement contains a magic number: calls != 2
Magic Number,de4dot.code.deobfuscators.CodeFort,AssemblyDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CodeFort\AssemblyDecrypter.cs,Decrypt,The following statement contains a magic number: const int iterations = 2;
Magic Number,de4dot.code.deobfuscators.CodeFort,AssemblyDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CodeFort\AssemblyDecrypter.cs,Decrypt,The following statement contains a magic number: var key = new Rfc2898DeriveBytes(password.passphrase' Encoding.UTF8.GetBytes(password.salt)' iterations).GetBytes(numBits / 8);
Magic Number,de4dot.code.deobfuscators.CodeFort,AssemblyDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CodeFort\AssemblyDecrypter.cs,GetEmbedPassword,The following statement contains a magic number: i < instrs.Count - 3
Magic Number,de4dot.code.deobfuscators.CodeFort,Deobfuscator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CodeFort\Deobfuscator.cs,DetectInternal,The following statement contains a magic number: val += 100 + 10 * (sum - 1);
Magic Number,de4dot.code.deobfuscators.CodeFort,Deobfuscator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CodeFort\Deobfuscator.cs,DetectInternal,The following statement contains a magic number: val += 100 + 10 * (sum - 1);
Magic Number,de4dot.code.deobfuscators.CodeFort,PasswordFinder,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CodeFort\PasswordFinder.cs,FindEmbedPassword,The following statement contains a magic number: i < instrs.Count - 3
Magic Number,de4dot.code.deobfuscators.CodeFort,ProxyCallFixer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CodeFort\ProxyCallFixer.cs,CheckMethods,The following statement contains a magic number: type.Methods.Count != 3
Magic Number,de4dot.code.deobfuscators.CodeFort,ProxyCallFixer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CodeFort\ProxyCallFixer.cs,CheckCctor,The following statement contains a magic number: instrs.Count != 3
Magic Number,de4dot.code.deobfuscators.CodeFort,ProxyCallFixer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CodeFort\ProxyCallFixer.cs,GetCallInfo,The following statement contains a magic number: rid = (rid << 4) + (uint)HexToInt((char)((byte)c + 0x2F));
Magic Number,de4dot.code.deobfuscators.CodeFort,ProxyCallFixer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CodeFort\ProxyCallFixer.cs,HexToInt,The following statement contains a magic number: return c - 'a' + 10;
Magic Number,de4dot.code.deobfuscators.CodeFort,ProxyCallFixer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CodeFort\ProxyCallFixer.cs,HexToInt,The following statement contains a magic number: return c - 'A' + 10;
Magic Number,de4dot.code.deobfuscators.CodeFort,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CodeFort\StringDecrypter.cs,CheckMethods,The following statement contains a magic number: !HasDouble(method' 3992.0)
Magic Number,de4dot.code.deobfuscators.CodeVeil,AssemblyResolver,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CodeVeil\AssemblyResolver.cs,FindBundleType,The following statement contains a magic number: type.Fields.Count != 2
Magic Number,de4dot.code.deobfuscators.CodeVeil,AssemblyResolver,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CodeVeil\AssemblyResolver.cs,FindAssemblyManagerType,The following statement contains a magic number: type.Fields.Count != 2
Magic Number,de4dot.code.deobfuscators.CodeVeil,AssemblyResolver,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CodeVeil\AssemblyResolver.cs,FindAssemblyManagerType,The following statement contains a magic number: sig == null || sig.Params.Count != 2
Magic Number,de4dot.code.deobfuscators.CodeVeil,DataReaderUtils,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CodeVeil\DataReaderUtils.cs,ReadChar,The following statement contains a magic number: byte[] bytes = new byte[2];
Magic Number,de4dot.code.deobfuscators.CodeVeil,DataReaderUtils,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CodeVeil\DataReaderUtils.cs,ReadChar,The following statement contains a magic number: int x = decoder.GetChars(bytes' 0' twoBytes ? 2 : 1' chars' 0);
Magic Number,de4dot.code.deobfuscators.CodeVeil,Deobfuscator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CodeVeil\Deobfuscator.cs,DetectInternal,The following statement contains a magic number: val += 100 + 10 * (sum - 1);
Magic Number,de4dot.code.deobfuscators.CodeVeil,Deobfuscator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CodeVeil\Deobfuscator.cs,DetectInternal,The following statement contains a magic number: val += 100 + 10 * (sum - 1);
Magic Number,de4dot.code.deobfuscators.CodeVeil,ErexResourceReader,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CodeVeil\ErexResourceReader.cs,Decrypt,The following statement contains a magic number: bool isDeflated = (flags & 2) != 0;
Magic Number,de4dot.code.deobfuscators.CodeVeil,ErexResourceReader,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CodeVeil\ErexResourceReader.cs,Decrypt,The following statement contains a magic number: var block = new uint[4];
Magic Number,de4dot.code.deobfuscators.CodeVeil,ErexResourceReader,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CodeVeil\ErexResourceReader.cs,Decrypt,The following statement contains a magic number: var decrypted = new byte[16];
Magic Number,de4dot.code.deobfuscators.CodeVeil,ErexResourceReader,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CodeVeil\ErexResourceReader.cs,Decrypt,The following statement contains a magic number: block[2] = reader.ReadUInt32();
Magic Number,de4dot.code.deobfuscators.CodeVeil,ErexResourceReader,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CodeVeil\ErexResourceReader.cs,Decrypt,The following statement contains a magic number: block[3] = reader.ReadUInt32();
Magic Number,de4dot.code.deobfuscators.CodeVeil,MainType,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CodeVeil\MainType.cs,Find,The following statement contains a magic number: var call = instrs[i + 2];
Magic Number,de4dot.code.deobfuscators.CodeVeil,MainType,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CodeVeil\MainType.cs,Find,The following statement contains a magic number: i < instrs.Count - 2
Magic Number,de4dot.code.deobfuscators.CodeVeil,MainType,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CodeVeil\MainType.cs,CheckMethodsType,The following statement contains a magic number: fields.Count < 2
Magic Number,de4dot.code.deobfuscators.CodeVeil,MainType,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CodeVeil\MainType.cs,RemoveInitCall,The following statement contains a magic number: var call = instrs[i + 2];
Magic Number,de4dot.code.deobfuscators.CodeVeil,MainType,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CodeVeil\MainType.cs,RemoveInitCall,The following statement contains a magic number: block.Remove(i' 3);
Magic Number,de4dot.code.deobfuscators.CodeVeil,MainType,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CodeVeil\MainType.cs,RemoveInitCall,The following statement contains a magic number: i < instrs.Count - 2
Magic Number,de4dot.code.deobfuscators.CodeVeil,MethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CodeVeil\MethodsDecrypter.cs,CreateDumpedMethods,The following statement contains a magic number: b != 2
Magic Number,de4dot.code.deobfuscators.CodeVeil,MethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CodeVeil\MethodsDecrypter.cs,CreateDumpedMethods,The following statement contains a magic number: dm.mhFlags = 2;
Magic Number,de4dot.code.deobfuscators.CodeVeil,MethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CodeVeil\MethodsDecrypter.cs,CreateDumpedMethods,The following statement contains a magic number: dm.mhMaxStack = 8;
Magic Number,de4dot.code.deobfuscators.CodeVeil,MethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CodeVeil\MethodsDecrypter.cs,CreateDumpedMethods,The following statement contains a magic number: (b & 3) == 2
Magic Number,de4dot.code.deobfuscators.CodeVeil,MethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CodeVeil\MethodsDecrypter.cs,CreateDumpedMethods,The following statement contains a magic number: (b & 3) == 2
Magic Number,de4dot.code.deobfuscators.CodeVeil,MethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CodeVeil\MethodsDecrypter.cs,FindMethodsData,The following statement contains a magic number: const int RVA_EXECUTIVE_OFFSET = 1 * 4;
Magic Number,de4dot.code.deobfuscators.CodeVeil,MethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CodeVeil\MethodsDecrypter.cs,FindMethodsData,The following statement contains a magic number: const int ENC_CODE_OFFSET = 6 * 4;
Magic Number,de4dot.code.deobfuscators.CodeVeil,MethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CodeVeil\MethodsDecrypter.cs,FindMethodsData,The following statement contains a magic number: const int ENC_CODE_OFFSET = 6 * 4;
Magic Number,de4dot.code.deobfuscators.CodeVeil,MethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CodeVeil\MethodsDecrypter.cs,FindMethodsData,The following statement contains a magic number: offset += 2;
Magic Number,de4dot.code.deobfuscators.CodeVeil,MethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CodeVeil\MethodsDecrypter.cs,FindMethodsData,The following statement contains a magic number: offset + ENC_CODE_OFFSET + 4 > lastOffset
Magic Number,de4dot.code.deobfuscators.CodeVeil,Decrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CodeVeil\MethodsDecrypter.cs,Decrypt,The following statement contains a magic number: (dm.mhFlags & 8) != 0
Magic Number,de4dot.code.deobfuscators.CodeVeil,DecrypterV5,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CodeVeil\MethodsDecrypter.cs,Initialize,The following statement contains a magic number: var newMethodsData = new byte[data.Length - 4];
Magic Number,de4dot.code.deobfuscators.CodeVeil,DecrypterV5,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CodeVeil\MethodsDecrypter.cs,Initialize,The following statement contains a magic number: Array.Copy(data' 4' newMethodsData' 0' newMethodsData.Length);
Magic Number,de4dot.code.deobfuscators.CodeVeil,DecrypterV5,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CodeVeil\MethodsDecrypter.cs,DecryptCode,The following statement contains a magic number: j < 4 && i + j < code.Length
Magic Number,de4dot.code.deobfuscators.CodeVeil,ProxyCallFixer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CodeVeil\ProxyCallFixer.cs,GetCallInfo,The following statement contains a magic number: int methodToken = 0x06000000 + ((flags & 0x3F) << 24) + (int)reader.ReadCompressedUInt32();
Magic Number,de4dot.code.deobfuscators.CodeVeil,ProxyCallFixer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CodeVeil\ProxyCallFixer.cs,FindOtherTypes,The following statement contains a magic number: sig == null || sig.Params.Count != 4
Magic Number,de4dot.code.deobfuscators.CodeVeil,ProxyCallFixer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CodeVeil\ProxyCallFixer.cs,FindOtherTypes,The following statement contains a magic number: sig.Params[2].GetFullName() != "System.Type[]"
Magic Number,de4dot.code.deobfuscators.CodeVeil,ProxyCallFixer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CodeVeil\ProxyCallFixer.cs,FindOtherTypes,The following statement contains a magic number: var ilgType = sig.Params[3].TryGetTypeDef();
Magic Number,de4dot.code.deobfuscators.CodeVeil,ResourceConverter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CodeVeil\ResourceConverter.cs,Convert,The following statement contains a magic number: switch (type) {  			case 1:		// bool  				resourceData = dataCreator.Create(reader.ReadBoolean());  				break;    			case 2:		// byte  				resourceData = dataCreator.Create(reader.ReadByte());  				break;    			case 3:		// byte[]  				resourceData = dataCreator.Create(reader.ReadBytes(info.length));  				break;    			case 4:		// char[]  				resourceData = new CharArrayResourceData(dataCreator.CreateUserResourceType(CharArrayResourceData.ReflectionTypeName)' DataReaderUtils.ReadChars(ref reader' info.length));  				break;    			case 5:		// sbyte  				resourceData = dataCreator.Create(reader.ReadSByte());  				break;    			case 6:		// char  				resourceData = dataCreator.Create(DataReaderUtils.ReadChar(ref reader));  				break;    			case 7:		// decimal  				resourceData = dataCreator.Create(reader.ReadDecimal());  				break;    			case 8:		// double  				resourceData = dataCreator.Create(reader.ReadDouble());  				break;    			case 9:		// short  				resourceData = dataCreator.Create(reader.ReadInt16());  				break;    			case 10:	// int  				resourceData = dataCreator.Create(reader.ReadInt32());  				break;    			case 11:	// long  				resourceData = dataCreator.Create(reader.ReadInt64());  				break;    			case 12:	// float  				resourceData = dataCreator.Create(reader.ReadSingle());  				break;    			case 13:	// string  				resourceData = dataCreator.Create(reader.ReadSerializedString());  				break;    			case 14:	// ushort  				resourceData = dataCreator.Create(reader.ReadUInt16());  				break;    			case 15:	// uint  				resourceData = dataCreator.Create(reader.ReadUInt32());  				break;    			case 16:	// ulong  				resourceData = dataCreator.Create(reader.ReadUInt64());  				break;    			case 17:	// DateTime  				resourceData = dataCreator.Create(DateTime.FromBinary(reader.ReadInt64()));  				break;    			case 18:	// TimeSpan  				resourceData = dataCreator.Create(TimeSpan.FromTicks(reader.ReadInt64()));  				break;    			case 19:	// Icon  				resourceData = new IconResourceData(dataCreator.CreateUserResourceType(IconResourceData.ReflectionTypeName)' reader.ReadBytes(info.length));  				break;    			case 20:	// Image  				resourceData = new ImageResourceData(dataCreator.CreateUserResourceType(ImageResourceData.ReflectionTypeName)' reader.ReadBytes(info.length));  				break;    			case 31:	// binary  				resourceData = dataCreator.CreateSerialized(reader.ReadBytes(info.length));  				break;    			case 21:	// Point (CV doesn't restore this type)  			default:  				throw new Exception("Unknown type");  			}
Magic Number,de4dot.code.deobfuscators.CodeVeil,ResourceConverter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CodeVeil\ResourceConverter.cs,Convert,The following statement contains a magic number: switch (type) {  			case 1:		// bool  				resourceData = dataCreator.Create(reader.ReadBoolean());  				break;    			case 2:		// byte  				resourceData = dataCreator.Create(reader.ReadByte());  				break;    			case 3:		// byte[]  				resourceData = dataCreator.Create(reader.ReadBytes(info.length));  				break;    			case 4:		// char[]  				resourceData = new CharArrayResourceData(dataCreator.CreateUserResourceType(CharArrayResourceData.ReflectionTypeName)' DataReaderUtils.ReadChars(ref reader' info.length));  				break;    			case 5:		// sbyte  				resourceData = dataCreator.Create(reader.ReadSByte());  				break;    			case 6:		// char  				resourceData = dataCreator.Create(DataReaderUtils.ReadChar(ref reader));  				break;    			case 7:		// decimal  				resourceData = dataCreator.Create(reader.ReadDecimal());  				break;    			case 8:		// double  				resourceData = dataCreator.Create(reader.ReadDouble());  				break;    			case 9:		// short  				resourceData = dataCreator.Create(reader.ReadInt16());  				break;    			case 10:	// int  				resourceData = dataCreator.Create(reader.ReadInt32());  				break;    			case 11:	// long  				resourceData = dataCreator.Create(reader.ReadInt64());  				break;    			case 12:	// float  				resourceData = dataCreator.Create(reader.ReadSingle());  				break;    			case 13:	// string  				resourceData = dataCreator.Create(reader.ReadSerializedString());  				break;    			case 14:	// ushort  				resourceData = dataCreator.Create(reader.ReadUInt16());  				break;    			case 15:	// uint  				resourceData = dataCreator.Create(reader.ReadUInt32());  				break;    			case 16:	// ulong  				resourceData = dataCreator.Create(reader.ReadUInt64());  				break;    			case 17:	// DateTime  				resourceData = dataCreator.Create(DateTime.FromBinary(reader.ReadInt64()));  				break;    			case 18:	// TimeSpan  				resourceData = dataCreator.Create(TimeSpan.FromTicks(reader.ReadInt64()));  				break;    			case 19:	// Icon  				resourceData = new IconResourceData(dataCreator.CreateUserResourceType(IconResourceData.ReflectionTypeName)' reader.ReadBytes(info.length));  				break;    			case 20:	// Image  				resourceData = new ImageResourceData(dataCreator.CreateUserResourceType(ImageResourceData.ReflectionTypeName)' reader.ReadBytes(info.length));  				break;    			case 31:	// binary  				resourceData = dataCreator.CreateSerialized(reader.ReadBytes(info.length));  				break;    			case 21:	// Point (CV doesn't restore this type)  			default:  				throw new Exception("Unknown type");  			}
Magic Number,de4dot.code.deobfuscators.CodeVeil,ResourceConverter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CodeVeil\ResourceConverter.cs,Convert,The following statement contains a magic number: switch (type) {  			case 1:		// bool  				resourceData = dataCreator.Create(reader.ReadBoolean());  				break;    			case 2:		// byte  				resourceData = dataCreator.Create(reader.ReadByte());  				break;    			case 3:		// byte[]  				resourceData = dataCreator.Create(reader.ReadBytes(info.length));  				break;    			case 4:		// char[]  				resourceData = new CharArrayResourceData(dataCreator.CreateUserResourceType(CharArrayResourceData.ReflectionTypeName)' DataReaderUtils.ReadChars(ref reader' info.length));  				break;    			case 5:		// sbyte  				resourceData = dataCreator.Create(reader.ReadSByte());  				break;    			case 6:		// char  				resourceData = dataCreator.Create(DataReaderUtils.ReadChar(ref reader));  				break;    			case 7:		// decimal  				resourceData = dataCreator.Create(reader.ReadDecimal());  				break;    			case 8:		// double  				resourceData = dataCreator.Create(reader.ReadDouble());  				break;    			case 9:		// short  				resourceData = dataCreator.Create(reader.ReadInt16());  				break;    			case 10:	// int  				resourceData = dataCreator.Create(reader.ReadInt32());  				break;    			case 11:	// long  				resourceData = dataCreator.Create(reader.ReadInt64());  				break;    			case 12:	// float  				resourceData = dataCreator.Create(reader.ReadSingle());  				break;    			case 13:	// string  				resourceData = dataCreator.Create(reader.ReadSerializedString());  				break;    			case 14:	// ushort  				resourceData = dataCreator.Create(reader.ReadUInt16());  				break;    			case 15:	// uint  				resourceData = dataCreator.Create(reader.ReadUInt32());  				break;    			case 16:	// ulong  				resourceData = dataCreator.Create(reader.ReadUInt64());  				break;    			case 17:	// DateTime  				resourceData = dataCreator.Create(DateTime.FromBinary(reader.ReadInt64()));  				break;    			case 18:	// TimeSpan  				resourceData = dataCreator.Create(TimeSpan.FromTicks(reader.ReadInt64()));  				break;    			case 19:	// Icon  				resourceData = new IconResourceData(dataCreator.CreateUserResourceType(IconResourceData.ReflectionTypeName)' reader.ReadBytes(info.length));  				break;    			case 20:	// Image  				resourceData = new ImageResourceData(dataCreator.CreateUserResourceType(ImageResourceData.ReflectionTypeName)' reader.ReadBytes(info.length));  				break;    			case 31:	// binary  				resourceData = dataCreator.CreateSerialized(reader.ReadBytes(info.length));  				break;    			case 21:	// Point (CV doesn't restore this type)  			default:  				throw new Exception("Unknown type");  			}
Magic Number,de4dot.code.deobfuscators.CodeVeil,ResourceConverter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CodeVeil\ResourceConverter.cs,Convert,The following statement contains a magic number: switch (type) {  			case 1:		// bool  				resourceData = dataCreator.Create(reader.ReadBoolean());  				break;    			case 2:		// byte  				resourceData = dataCreator.Create(reader.ReadByte());  				break;    			case 3:		// byte[]  				resourceData = dataCreator.Create(reader.ReadBytes(info.length));  				break;    			case 4:		// char[]  				resourceData = new CharArrayResourceData(dataCreator.CreateUserResourceType(CharArrayResourceData.ReflectionTypeName)' DataReaderUtils.ReadChars(ref reader' info.length));  				break;    			case 5:		// sbyte  				resourceData = dataCreator.Create(reader.ReadSByte());  				break;    			case 6:		// char  				resourceData = dataCreator.Create(DataReaderUtils.ReadChar(ref reader));  				break;    			case 7:		// decimal  				resourceData = dataCreator.Create(reader.ReadDecimal());  				break;    			case 8:		// double  				resourceData = dataCreator.Create(reader.ReadDouble());  				break;    			case 9:		// short  				resourceData = dataCreator.Create(reader.ReadInt16());  				break;    			case 10:	// int  				resourceData = dataCreator.Create(reader.ReadInt32());  				break;    			case 11:	// long  				resourceData = dataCreator.Create(reader.ReadInt64());  				break;    			case 12:	// float  				resourceData = dataCreator.Create(reader.ReadSingle());  				break;    			case 13:	// string  				resourceData = dataCreator.Create(reader.ReadSerializedString());  				break;    			case 14:	// ushort  				resourceData = dataCreator.Create(reader.ReadUInt16());  				break;    			case 15:	// uint  				resourceData = dataCreator.Create(reader.ReadUInt32());  				break;    			case 16:	// ulong  				resourceData = dataCreator.Create(reader.ReadUInt64());  				break;    			case 17:	// DateTime  				resourceData = dataCreator.Create(DateTime.FromBinary(reader.ReadInt64()));  				break;    			case 18:	// TimeSpan  				resourceData = dataCreator.Create(TimeSpan.FromTicks(reader.ReadInt64()));  				break;    			case 19:	// Icon  				resourceData = new IconResourceData(dataCreator.CreateUserResourceType(IconResourceData.ReflectionTypeName)' reader.ReadBytes(info.length));  				break;    			case 20:	// Image  				resourceData = new ImageResourceData(dataCreator.CreateUserResourceType(ImageResourceData.ReflectionTypeName)' reader.ReadBytes(info.length));  				break;    			case 31:	// binary  				resourceData = dataCreator.CreateSerialized(reader.ReadBytes(info.length));  				break;    			case 21:	// Point (CV doesn't restore this type)  			default:  				throw new Exception("Unknown type");  			}
Magic Number,de4dot.code.deobfuscators.CodeVeil,ResourceConverter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CodeVeil\ResourceConverter.cs,Convert,The following statement contains a magic number: switch (type) {  			case 1:		// bool  				resourceData = dataCreator.Create(reader.ReadBoolean());  				break;    			case 2:		// byte  				resourceData = dataCreator.Create(reader.ReadByte());  				break;    			case 3:		// byte[]  				resourceData = dataCreator.Create(reader.ReadBytes(info.length));  				break;    			case 4:		// char[]  				resourceData = new CharArrayResourceData(dataCreator.CreateUserResourceType(CharArrayResourceData.ReflectionTypeName)' DataReaderUtils.ReadChars(ref reader' info.length));  				break;    			case 5:		// sbyte  				resourceData = dataCreator.Create(reader.ReadSByte());  				break;    			case 6:		// char  				resourceData = dataCreator.Create(DataReaderUtils.ReadChar(ref reader));  				break;    			case 7:		// decimal  				resourceData = dataCreator.Create(reader.ReadDecimal());  				break;    			case 8:		// double  				resourceData = dataCreator.Create(reader.ReadDouble());  				break;    			case 9:		// short  				resourceData = dataCreator.Create(reader.ReadInt16());  				break;    			case 10:	// int  				resourceData = dataCreator.Create(reader.ReadInt32());  				break;    			case 11:	// long  				resourceData = dataCreator.Create(reader.ReadInt64());  				break;    			case 12:	// float  				resourceData = dataCreator.Create(reader.ReadSingle());  				break;    			case 13:	// string  				resourceData = dataCreator.Create(reader.ReadSerializedString());  				break;    			case 14:	// ushort  				resourceData = dataCreator.Create(reader.ReadUInt16());  				break;    			case 15:	// uint  				resourceData = dataCreator.Create(reader.ReadUInt32());  				break;    			case 16:	// ulong  				resourceData = dataCreator.Create(reader.ReadUInt64());  				break;    			case 17:	// DateTime  				resourceData = dataCreator.Create(DateTime.FromBinary(reader.ReadInt64()));  				break;    			case 18:	// TimeSpan  				resourceData = dataCreator.Create(TimeSpan.FromTicks(reader.ReadInt64()));  				break;    			case 19:	// Icon  				resourceData = new IconResourceData(dataCreator.CreateUserResourceType(IconResourceData.ReflectionTypeName)' reader.ReadBytes(info.length));  				break;    			case 20:	// Image  				resourceData = new ImageResourceData(dataCreator.CreateUserResourceType(ImageResourceData.ReflectionTypeName)' reader.ReadBytes(info.length));  				break;    			case 31:	// binary  				resourceData = dataCreator.CreateSerialized(reader.ReadBytes(info.length));  				break;    			case 21:	// Point (CV doesn't restore this type)  			default:  				throw new Exception("Unknown type");  			}
Magic Number,de4dot.code.deobfuscators.CodeVeil,ResourceConverter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CodeVeil\ResourceConverter.cs,Convert,The following statement contains a magic number: switch (type) {  			case 1:		// bool  				resourceData = dataCreator.Create(reader.ReadBoolean());  				break;    			case 2:		// byte  				resourceData = dataCreator.Create(reader.ReadByte());  				break;    			case 3:		// byte[]  				resourceData = dataCreator.Create(reader.ReadBytes(info.length));  				break;    			case 4:		// char[]  				resourceData = new CharArrayResourceData(dataCreator.CreateUserResourceType(CharArrayResourceData.ReflectionTypeName)' DataReaderUtils.ReadChars(ref reader' info.length));  				break;    			case 5:		// sbyte  				resourceData = dataCreator.Create(reader.ReadSByte());  				break;    			case 6:		// char  				resourceData = dataCreator.Create(DataReaderUtils.ReadChar(ref reader));  				break;    			case 7:		// decimal  				resourceData = dataCreator.Create(reader.ReadDecimal());  				break;    			case 8:		// double  				resourceData = dataCreator.Create(reader.ReadDouble());  				break;    			case 9:		// short  				resourceData = dataCreator.Create(reader.ReadInt16());  				break;    			case 10:	// int  				resourceData = dataCreator.Create(reader.ReadInt32());  				break;    			case 11:	// long  				resourceData = dataCreator.Create(reader.ReadInt64());  				break;    			case 12:	// float  				resourceData = dataCreator.Create(reader.ReadSingle());  				break;    			case 13:	// string  				resourceData = dataCreator.Create(reader.ReadSerializedString());  				break;    			case 14:	// ushort  				resourceData = dataCreator.Create(reader.ReadUInt16());  				break;    			case 15:	// uint  				resourceData = dataCreator.Create(reader.ReadUInt32());  				break;    			case 16:	// ulong  				resourceData = dataCreator.Create(reader.ReadUInt64());  				break;    			case 17:	// DateTime  				resourceData = dataCreator.Create(DateTime.FromBinary(reader.ReadInt64()));  				break;    			case 18:	// TimeSpan  				resourceData = dataCreator.Create(TimeSpan.FromTicks(reader.ReadInt64()));  				break;    			case 19:	// Icon  				resourceData = new IconResourceData(dataCreator.CreateUserResourceType(IconResourceData.ReflectionTypeName)' reader.ReadBytes(info.length));  				break;    			case 20:	// Image  				resourceData = new ImageResourceData(dataCreator.CreateUserResourceType(ImageResourceData.ReflectionTypeName)' reader.ReadBytes(info.length));  				break;    			case 31:	// binary  				resourceData = dataCreator.CreateSerialized(reader.ReadBytes(info.length));  				break;    			case 21:	// Point (CV doesn't restore this type)  			default:  				throw new Exception("Unknown type");  			}
Magic Number,de4dot.code.deobfuscators.CodeVeil,ResourceConverter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CodeVeil\ResourceConverter.cs,Convert,The following statement contains a magic number: switch (type) {  			case 1:		// bool  				resourceData = dataCreator.Create(reader.ReadBoolean());  				break;    			case 2:		// byte  				resourceData = dataCreator.Create(reader.ReadByte());  				break;    			case 3:		// byte[]  				resourceData = dataCreator.Create(reader.ReadBytes(info.length));  				break;    			case 4:		// char[]  				resourceData = new CharArrayResourceData(dataCreator.CreateUserResourceType(CharArrayResourceData.ReflectionTypeName)' DataReaderUtils.ReadChars(ref reader' info.length));  				break;    			case 5:		// sbyte  				resourceData = dataCreator.Create(reader.ReadSByte());  				break;    			case 6:		// char  				resourceData = dataCreator.Create(DataReaderUtils.ReadChar(ref reader));  				break;    			case 7:		// decimal  				resourceData = dataCreator.Create(reader.ReadDecimal());  				break;    			case 8:		// double  				resourceData = dataCreator.Create(reader.ReadDouble());  				break;    			case 9:		// short  				resourceData = dataCreator.Create(reader.ReadInt16());  				break;    			case 10:	// int  				resourceData = dataCreator.Create(reader.ReadInt32());  				break;    			case 11:	// long  				resourceData = dataCreator.Create(reader.ReadInt64());  				break;    			case 12:	// float  				resourceData = dataCreator.Create(reader.ReadSingle());  				break;    			case 13:	// string  				resourceData = dataCreator.Create(reader.ReadSerializedString());  				break;    			case 14:	// ushort  				resourceData = dataCreator.Create(reader.ReadUInt16());  				break;    			case 15:	// uint  				resourceData = dataCreator.Create(reader.ReadUInt32());  				break;    			case 16:	// ulong  				resourceData = dataCreator.Create(reader.ReadUInt64());  				break;    			case 17:	// DateTime  				resourceData = dataCreator.Create(DateTime.FromBinary(reader.ReadInt64()));  				break;    			case 18:	// TimeSpan  				resourceData = dataCreator.Create(TimeSpan.FromTicks(reader.ReadInt64()));  				break;    			case 19:	// Icon  				resourceData = new IconResourceData(dataCreator.CreateUserResourceType(IconResourceData.ReflectionTypeName)' reader.ReadBytes(info.length));  				break;    			case 20:	// Image  				resourceData = new ImageResourceData(dataCreator.CreateUserResourceType(ImageResourceData.ReflectionTypeName)' reader.ReadBytes(info.length));  				break;    			case 31:	// binary  				resourceData = dataCreator.CreateSerialized(reader.ReadBytes(info.length));  				break;    			case 21:	// Point (CV doesn't restore this type)  			default:  				throw new Exception("Unknown type");  			}
Magic Number,de4dot.code.deobfuscators.CodeVeil,ResourceConverter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CodeVeil\ResourceConverter.cs,Convert,The following statement contains a magic number: switch (type) {  			case 1:		// bool  				resourceData = dataCreator.Create(reader.ReadBoolean());  				break;    			case 2:		// byte  				resourceData = dataCreator.Create(reader.ReadByte());  				break;    			case 3:		// byte[]  				resourceData = dataCreator.Create(reader.ReadBytes(info.length));  				break;    			case 4:		// char[]  				resourceData = new CharArrayResourceData(dataCreator.CreateUserResourceType(CharArrayResourceData.ReflectionTypeName)' DataReaderUtils.ReadChars(ref reader' info.length));  				break;    			case 5:		// sbyte  				resourceData = dataCreator.Create(reader.ReadSByte());  				break;    			case 6:		// char  				resourceData = dataCreator.Create(DataReaderUtils.ReadChar(ref reader));  				break;    			case 7:		// decimal  				resourceData = dataCreator.Create(reader.ReadDecimal());  				break;    			case 8:		// double  				resourceData = dataCreator.Create(reader.ReadDouble());  				break;    			case 9:		// short  				resourceData = dataCreator.Create(reader.ReadInt16());  				break;    			case 10:	// int  				resourceData = dataCreator.Create(reader.ReadInt32());  				break;    			case 11:	// long  				resourceData = dataCreator.Create(reader.ReadInt64());  				break;    			case 12:	// float  				resourceData = dataCreator.Create(reader.ReadSingle());  				break;    			case 13:	// string  				resourceData = dataCreator.Create(reader.ReadSerializedString());  				break;    			case 14:	// ushort  				resourceData = dataCreator.Create(reader.ReadUInt16());  				break;    			case 15:	// uint  				resourceData = dataCreator.Create(reader.ReadUInt32());  				break;    			case 16:	// ulong  				resourceData = dataCreator.Create(reader.ReadUInt64());  				break;    			case 17:	// DateTime  				resourceData = dataCreator.Create(DateTime.FromBinary(reader.ReadInt64()));  				break;    			case 18:	// TimeSpan  				resourceData = dataCreator.Create(TimeSpan.FromTicks(reader.ReadInt64()));  				break;    			case 19:	// Icon  				resourceData = new IconResourceData(dataCreator.CreateUserResourceType(IconResourceData.ReflectionTypeName)' reader.ReadBytes(info.length));  				break;    			case 20:	// Image  				resourceData = new ImageResourceData(dataCreator.CreateUserResourceType(ImageResourceData.ReflectionTypeName)' reader.ReadBytes(info.length));  				break;    			case 31:	// binary  				resourceData = dataCreator.CreateSerialized(reader.ReadBytes(info.length));  				break;    			case 21:	// Point (CV doesn't restore this type)  			default:  				throw new Exception("Unknown type");  			}
Magic Number,de4dot.code.deobfuscators.CodeVeil,ResourceConverter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CodeVeil\ResourceConverter.cs,Convert,The following statement contains a magic number: switch (type) {  			case 1:		// bool  				resourceData = dataCreator.Create(reader.ReadBoolean());  				break;    			case 2:		// byte  				resourceData = dataCreator.Create(reader.ReadByte());  				break;    			case 3:		// byte[]  				resourceData = dataCreator.Create(reader.ReadBytes(info.length));  				break;    			case 4:		// char[]  				resourceData = new CharArrayResourceData(dataCreator.CreateUserResourceType(CharArrayResourceData.ReflectionTypeName)' DataReaderUtils.ReadChars(ref reader' info.length));  				break;    			case 5:		// sbyte  				resourceData = dataCreator.Create(reader.ReadSByte());  				break;    			case 6:		// char  				resourceData = dataCreator.Create(DataReaderUtils.ReadChar(ref reader));  				break;    			case 7:		// decimal  				resourceData = dataCreator.Create(reader.ReadDecimal());  				break;    			case 8:		// double  				resourceData = dataCreator.Create(reader.ReadDouble());  				break;    			case 9:		// short  				resourceData = dataCreator.Create(reader.ReadInt16());  				break;    			case 10:	// int  				resourceData = dataCreator.Create(reader.ReadInt32());  				break;    			case 11:	// long  				resourceData = dataCreator.Create(reader.ReadInt64());  				break;    			case 12:	// float  				resourceData = dataCreator.Create(reader.ReadSingle());  				break;    			case 13:	// string  				resourceData = dataCreator.Create(reader.ReadSerializedString());  				break;    			case 14:	// ushort  				resourceData = dataCreator.Create(reader.ReadUInt16());  				break;    			case 15:	// uint  				resourceData = dataCreator.Create(reader.ReadUInt32());  				break;    			case 16:	// ulong  				resourceData = dataCreator.Create(reader.ReadUInt64());  				break;    			case 17:	// DateTime  				resourceData = dataCreator.Create(DateTime.FromBinary(reader.ReadInt64()));  				break;    			case 18:	// TimeSpan  				resourceData = dataCreator.Create(TimeSpan.FromTicks(reader.ReadInt64()));  				break;    			case 19:	// Icon  				resourceData = new IconResourceData(dataCreator.CreateUserResourceType(IconResourceData.ReflectionTypeName)' reader.ReadBytes(info.length));  				break;    			case 20:	// Image  				resourceData = new ImageResourceData(dataCreator.CreateUserResourceType(ImageResourceData.ReflectionTypeName)' reader.ReadBytes(info.length));  				break;    			case 31:	// binary  				resourceData = dataCreator.CreateSerialized(reader.ReadBytes(info.length));  				break;    			case 21:	// Point (CV doesn't restore this type)  			default:  				throw new Exception("Unknown type");  			}
Magic Number,de4dot.code.deobfuscators.CodeVeil,ResourceConverter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CodeVeil\ResourceConverter.cs,Convert,The following statement contains a magic number: switch (type) {  			case 1:		// bool  				resourceData = dataCreator.Create(reader.ReadBoolean());  				break;    			case 2:		// byte  				resourceData = dataCreator.Create(reader.ReadByte());  				break;    			case 3:		// byte[]  				resourceData = dataCreator.Create(reader.ReadBytes(info.length));  				break;    			case 4:		// char[]  				resourceData = new CharArrayResourceData(dataCreator.CreateUserResourceType(CharArrayResourceData.ReflectionTypeName)' DataReaderUtils.ReadChars(ref reader' info.length));  				break;    			case 5:		// sbyte  				resourceData = dataCreator.Create(reader.ReadSByte());  				break;    			case 6:		// char  				resourceData = dataCreator.Create(DataReaderUtils.ReadChar(ref reader));  				break;    			case 7:		// decimal  				resourceData = dataCreator.Create(reader.ReadDecimal());  				break;    			case 8:		// double  				resourceData = dataCreator.Create(reader.ReadDouble());  				break;    			case 9:		// short  				resourceData = dataCreator.Create(reader.ReadInt16());  				break;    			case 10:	// int  				resourceData = dataCreator.Create(reader.ReadInt32());  				break;    			case 11:	// long  				resourceData = dataCreator.Create(reader.ReadInt64());  				break;    			case 12:	// float  				resourceData = dataCreator.Create(reader.ReadSingle());  				break;    			case 13:	// string  				resourceData = dataCreator.Create(reader.ReadSerializedString());  				break;    			case 14:	// ushort  				resourceData = dataCreator.Create(reader.ReadUInt16());  				break;    			case 15:	// uint  				resourceData = dataCreator.Create(reader.ReadUInt32());  				break;    			case 16:	// ulong  				resourceData = dataCreator.Create(reader.ReadUInt64());  				break;    			case 17:	// DateTime  				resourceData = dataCreator.Create(DateTime.FromBinary(reader.ReadInt64()));  				break;    			case 18:	// TimeSpan  				resourceData = dataCreator.Create(TimeSpan.FromTicks(reader.ReadInt64()));  				break;    			case 19:	// Icon  				resourceData = new IconResourceData(dataCreator.CreateUserResourceType(IconResourceData.ReflectionTypeName)' reader.ReadBytes(info.length));  				break;    			case 20:	// Image  				resourceData = new ImageResourceData(dataCreator.CreateUserResourceType(ImageResourceData.ReflectionTypeName)' reader.ReadBytes(info.length));  				break;    			case 31:	// binary  				resourceData = dataCreator.CreateSerialized(reader.ReadBytes(info.length));  				break;    			case 21:	// Point (CV doesn't restore this type)  			default:  				throw new Exception("Unknown type");  			}
Magic Number,de4dot.code.deobfuscators.CodeVeil,ResourceConverter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CodeVeil\ResourceConverter.cs,Convert,The following statement contains a magic number: switch (type) {  			case 1:		// bool  				resourceData = dataCreator.Create(reader.ReadBoolean());  				break;    			case 2:		// byte  				resourceData = dataCreator.Create(reader.ReadByte());  				break;    			case 3:		// byte[]  				resourceData = dataCreator.Create(reader.ReadBytes(info.length));  				break;    			case 4:		// char[]  				resourceData = new CharArrayResourceData(dataCreator.CreateUserResourceType(CharArrayResourceData.ReflectionTypeName)' DataReaderUtils.ReadChars(ref reader' info.length));  				break;    			case 5:		// sbyte  				resourceData = dataCreator.Create(reader.ReadSByte());  				break;    			case 6:		// char  				resourceData = dataCreator.Create(DataReaderUtils.ReadChar(ref reader));  				break;    			case 7:		// decimal  				resourceData = dataCreator.Create(reader.ReadDecimal());  				break;    			case 8:		// double  				resourceData = dataCreator.Create(reader.ReadDouble());  				break;    			case 9:		// short  				resourceData = dataCreator.Create(reader.ReadInt16());  				break;    			case 10:	// int  				resourceData = dataCreator.Create(reader.ReadInt32());  				break;    			case 11:	// long  				resourceData = dataCreator.Create(reader.ReadInt64());  				break;    			case 12:	// float  				resourceData = dataCreator.Create(reader.ReadSingle());  				break;    			case 13:	// string  				resourceData = dataCreator.Create(reader.ReadSerializedString());  				break;    			case 14:	// ushort  				resourceData = dataCreator.Create(reader.ReadUInt16());  				break;    			case 15:	// uint  				resourceData = dataCreator.Create(reader.ReadUInt32());  				break;    			case 16:	// ulong  				resourceData = dataCreator.Create(reader.ReadUInt64());  				break;    			case 17:	// DateTime  				resourceData = dataCreator.Create(DateTime.FromBinary(reader.ReadInt64()));  				break;    			case 18:	// TimeSpan  				resourceData = dataCreator.Create(TimeSpan.FromTicks(reader.ReadInt64()));  				break;    			case 19:	// Icon  				resourceData = new IconResourceData(dataCreator.CreateUserResourceType(IconResourceData.ReflectionTypeName)' reader.ReadBytes(info.length));  				break;    			case 20:	// Image  				resourceData = new ImageResourceData(dataCreator.CreateUserResourceType(ImageResourceData.ReflectionTypeName)' reader.ReadBytes(info.length));  				break;    			case 31:	// binary  				resourceData = dataCreator.CreateSerialized(reader.ReadBytes(info.length));  				break;    			case 21:	// Point (CV doesn't restore this type)  			default:  				throw new Exception("Unknown type");  			}
Magic Number,de4dot.code.deobfuscators.CodeVeil,ResourceConverter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CodeVeil\ResourceConverter.cs,Convert,The following statement contains a magic number: switch (type) {  			case 1:		// bool  				resourceData = dataCreator.Create(reader.ReadBoolean());  				break;    			case 2:		// byte  				resourceData = dataCreator.Create(reader.ReadByte());  				break;    			case 3:		// byte[]  				resourceData = dataCreator.Create(reader.ReadBytes(info.length));  				break;    			case 4:		// char[]  				resourceData = new CharArrayResourceData(dataCreator.CreateUserResourceType(CharArrayResourceData.ReflectionTypeName)' DataReaderUtils.ReadChars(ref reader' info.length));  				break;    			case 5:		// sbyte  				resourceData = dataCreator.Create(reader.ReadSByte());  				break;    			case 6:		// char  				resourceData = dataCreator.Create(DataReaderUtils.ReadChar(ref reader));  				break;    			case 7:		// decimal  				resourceData = dataCreator.Create(reader.ReadDecimal());  				break;    			case 8:		// double  				resourceData = dataCreator.Create(reader.ReadDouble());  				break;    			case 9:		// short  				resourceData = dataCreator.Create(reader.ReadInt16());  				break;    			case 10:	// int  				resourceData = dataCreator.Create(reader.ReadInt32());  				break;    			case 11:	// long  				resourceData = dataCreator.Create(reader.ReadInt64());  				break;    			case 12:	// float  				resourceData = dataCreator.Create(reader.ReadSingle());  				break;    			case 13:	// string  				resourceData = dataCreator.Create(reader.ReadSerializedString());  				break;    			case 14:	// ushort  				resourceData = dataCreator.Create(reader.ReadUInt16());  				break;    			case 15:	// uint  				resourceData = dataCreator.Create(reader.ReadUInt32());  				break;    			case 16:	// ulong  				resourceData = dataCreator.Create(reader.ReadUInt64());  				break;    			case 17:	// DateTime  				resourceData = dataCreator.Create(DateTime.FromBinary(reader.ReadInt64()));  				break;    			case 18:	// TimeSpan  				resourceData = dataCreator.Create(TimeSpan.FromTicks(reader.ReadInt64()));  				break;    			case 19:	// Icon  				resourceData = new IconResourceData(dataCreator.CreateUserResourceType(IconResourceData.ReflectionTypeName)' reader.ReadBytes(info.length));  				break;    			case 20:	// Image  				resourceData = new ImageResourceData(dataCreator.CreateUserResourceType(ImageResourceData.ReflectionTypeName)' reader.ReadBytes(info.length));  				break;    			case 31:	// binary  				resourceData = dataCreator.CreateSerialized(reader.ReadBytes(info.length));  				break;    			case 21:	// Point (CV doesn't restore this type)  			default:  				throw new Exception("Unknown type");  			}
Magic Number,de4dot.code.deobfuscators.CodeVeil,ResourceConverter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CodeVeil\ResourceConverter.cs,Convert,The following statement contains a magic number: switch (type) {  			case 1:		// bool  				resourceData = dataCreator.Create(reader.ReadBoolean());  				break;    			case 2:		// byte  				resourceData = dataCreator.Create(reader.ReadByte());  				break;    			case 3:		// byte[]  				resourceData = dataCreator.Create(reader.ReadBytes(info.length));  				break;    			case 4:		// char[]  				resourceData = new CharArrayResourceData(dataCreator.CreateUserResourceType(CharArrayResourceData.ReflectionTypeName)' DataReaderUtils.ReadChars(ref reader' info.length));  				break;    			case 5:		// sbyte  				resourceData = dataCreator.Create(reader.ReadSByte());  				break;    			case 6:		// char  				resourceData = dataCreator.Create(DataReaderUtils.ReadChar(ref reader));  				break;    			case 7:		// decimal  				resourceData = dataCreator.Create(reader.ReadDecimal());  				break;    			case 8:		// double  				resourceData = dataCreator.Create(reader.ReadDouble());  				break;    			case 9:		// short  				resourceData = dataCreator.Create(reader.ReadInt16());  				break;    			case 10:	// int  				resourceData = dataCreator.Create(reader.ReadInt32());  				break;    			case 11:	// long  				resourceData = dataCreator.Create(reader.ReadInt64());  				break;    			case 12:	// float  				resourceData = dataCreator.Create(reader.ReadSingle());  				break;    			case 13:	// string  				resourceData = dataCreator.Create(reader.ReadSerializedString());  				break;    			case 14:	// ushort  				resourceData = dataCreator.Create(reader.ReadUInt16());  				break;    			case 15:	// uint  				resourceData = dataCreator.Create(reader.ReadUInt32());  				break;    			case 16:	// ulong  				resourceData = dataCreator.Create(reader.ReadUInt64());  				break;    			case 17:	// DateTime  				resourceData = dataCreator.Create(DateTime.FromBinary(reader.ReadInt64()));  				break;    			case 18:	// TimeSpan  				resourceData = dataCreator.Create(TimeSpan.FromTicks(reader.ReadInt64()));  				break;    			case 19:	// Icon  				resourceData = new IconResourceData(dataCreator.CreateUserResourceType(IconResourceData.ReflectionTypeName)' reader.ReadBytes(info.length));  				break;    			case 20:	// Image  				resourceData = new ImageResourceData(dataCreator.CreateUserResourceType(ImageResourceData.ReflectionTypeName)' reader.ReadBytes(info.length));  				break;    			case 31:	// binary  				resourceData = dataCreator.CreateSerialized(reader.ReadBytes(info.length));  				break;    			case 21:	// Point (CV doesn't restore this type)  			default:  				throw new Exception("Unknown type");  			}
Magic Number,de4dot.code.deobfuscators.CodeVeil,ResourceConverter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CodeVeil\ResourceConverter.cs,Convert,The following statement contains a magic number: switch (type) {  			case 1:		// bool  				resourceData = dataCreator.Create(reader.ReadBoolean());  				break;    			case 2:		// byte  				resourceData = dataCreator.Create(reader.ReadByte());  				break;    			case 3:		// byte[]  				resourceData = dataCreator.Create(reader.ReadBytes(info.length));  				break;    			case 4:		// char[]  				resourceData = new CharArrayResourceData(dataCreator.CreateUserResourceType(CharArrayResourceData.ReflectionTypeName)' DataReaderUtils.ReadChars(ref reader' info.length));  				break;    			case 5:		// sbyte  				resourceData = dataCreator.Create(reader.ReadSByte());  				break;    			case 6:		// char  				resourceData = dataCreator.Create(DataReaderUtils.ReadChar(ref reader));  				break;    			case 7:		// decimal  				resourceData = dataCreator.Create(reader.ReadDecimal());  				break;    			case 8:		// double  				resourceData = dataCreator.Create(reader.ReadDouble());  				break;    			case 9:		// short  				resourceData = dataCreator.Create(reader.ReadInt16());  				break;    			case 10:	// int  				resourceData = dataCreator.Create(reader.ReadInt32());  				break;    			case 11:	// long  				resourceData = dataCreator.Create(reader.ReadInt64());  				break;    			case 12:	// float  				resourceData = dataCreator.Create(reader.ReadSingle());  				break;    			case 13:	// string  				resourceData = dataCreator.Create(reader.ReadSerializedString());  				break;    			case 14:	// ushort  				resourceData = dataCreator.Create(reader.ReadUInt16());  				break;    			case 15:	// uint  				resourceData = dataCreator.Create(reader.ReadUInt32());  				break;    			case 16:	// ulong  				resourceData = dataCreator.Create(reader.ReadUInt64());  				break;    			case 17:	// DateTime  				resourceData = dataCreator.Create(DateTime.FromBinary(reader.ReadInt64()));  				break;    			case 18:	// TimeSpan  				resourceData = dataCreator.Create(TimeSpan.FromTicks(reader.ReadInt64()));  				break;    			case 19:	// Icon  				resourceData = new IconResourceData(dataCreator.CreateUserResourceType(IconResourceData.ReflectionTypeName)' reader.ReadBytes(info.length));  				break;    			case 20:	// Image  				resourceData = new ImageResourceData(dataCreator.CreateUserResourceType(ImageResourceData.ReflectionTypeName)' reader.ReadBytes(info.length));  				break;    			case 31:	// binary  				resourceData = dataCreator.CreateSerialized(reader.ReadBytes(info.length));  				break;    			case 21:	// Point (CV doesn't restore this type)  			default:  				throw new Exception("Unknown type");  			}
Magic Number,de4dot.code.deobfuscators.CodeVeil,ResourceConverter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CodeVeil\ResourceConverter.cs,Convert,The following statement contains a magic number: switch (type) {  			case 1:		// bool  				resourceData = dataCreator.Create(reader.ReadBoolean());  				break;    			case 2:		// byte  				resourceData = dataCreator.Create(reader.ReadByte());  				break;    			case 3:		// byte[]  				resourceData = dataCreator.Create(reader.ReadBytes(info.length));  				break;    			case 4:		// char[]  				resourceData = new CharArrayResourceData(dataCreator.CreateUserResourceType(CharArrayResourceData.ReflectionTypeName)' DataReaderUtils.ReadChars(ref reader' info.length));  				break;    			case 5:		// sbyte  				resourceData = dataCreator.Create(reader.ReadSByte());  				break;    			case 6:		// char  				resourceData = dataCreator.Create(DataReaderUtils.ReadChar(ref reader));  				break;    			case 7:		// decimal  				resourceData = dataCreator.Create(reader.ReadDecimal());  				break;    			case 8:		// double  				resourceData = dataCreator.Create(reader.ReadDouble());  				break;    			case 9:		// short  				resourceData = dataCreator.Create(reader.ReadInt16());  				break;    			case 10:	// int  				resourceData = dataCreator.Create(reader.ReadInt32());  				break;    			case 11:	// long  				resourceData = dataCreator.Create(reader.ReadInt64());  				break;    			case 12:	// float  				resourceData = dataCreator.Create(reader.ReadSingle());  				break;    			case 13:	// string  				resourceData = dataCreator.Create(reader.ReadSerializedString());  				break;    			case 14:	// ushort  				resourceData = dataCreator.Create(reader.ReadUInt16());  				break;    			case 15:	// uint  				resourceData = dataCreator.Create(reader.ReadUInt32());  				break;    			case 16:	// ulong  				resourceData = dataCreator.Create(reader.ReadUInt64());  				break;    			case 17:	// DateTime  				resourceData = dataCreator.Create(DateTime.FromBinary(reader.ReadInt64()));  				break;    			case 18:	// TimeSpan  				resourceData = dataCreator.Create(TimeSpan.FromTicks(reader.ReadInt64()));  				break;    			case 19:	// Icon  				resourceData = new IconResourceData(dataCreator.CreateUserResourceType(IconResourceData.ReflectionTypeName)' reader.ReadBytes(info.length));  				break;    			case 20:	// Image  				resourceData = new ImageResourceData(dataCreator.CreateUserResourceType(ImageResourceData.ReflectionTypeName)' reader.ReadBytes(info.length));  				break;    			case 31:	// binary  				resourceData = dataCreator.CreateSerialized(reader.ReadBytes(info.length));  				break;    			case 21:	// Point (CV doesn't restore this type)  			default:  				throw new Exception("Unknown type");  			}
Magic Number,de4dot.code.deobfuscators.CodeVeil,ResourceConverter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CodeVeil\ResourceConverter.cs,Convert,The following statement contains a magic number: switch (type) {  			case 1:		// bool  				resourceData = dataCreator.Create(reader.ReadBoolean());  				break;    			case 2:		// byte  				resourceData = dataCreator.Create(reader.ReadByte());  				break;    			case 3:		// byte[]  				resourceData = dataCreator.Create(reader.ReadBytes(info.length));  				break;    			case 4:		// char[]  				resourceData = new CharArrayResourceData(dataCreator.CreateUserResourceType(CharArrayResourceData.ReflectionTypeName)' DataReaderUtils.ReadChars(ref reader' info.length));  				break;    			case 5:		// sbyte  				resourceData = dataCreator.Create(reader.ReadSByte());  				break;    			case 6:		// char  				resourceData = dataCreator.Create(DataReaderUtils.ReadChar(ref reader));  				break;    			case 7:		// decimal  				resourceData = dataCreator.Create(reader.ReadDecimal());  				break;    			case 8:		// double  				resourceData = dataCreator.Create(reader.ReadDouble());  				break;    			case 9:		// short  				resourceData = dataCreator.Create(reader.ReadInt16());  				break;    			case 10:	// int  				resourceData = dataCreator.Create(reader.ReadInt32());  				break;    			case 11:	// long  				resourceData = dataCreator.Create(reader.ReadInt64());  				break;    			case 12:	// float  				resourceData = dataCreator.Create(reader.ReadSingle());  				break;    			case 13:	// string  				resourceData = dataCreator.Create(reader.ReadSerializedString());  				break;    			case 14:	// ushort  				resourceData = dataCreator.Create(reader.ReadUInt16());  				break;    			case 15:	// uint  				resourceData = dataCreator.Create(reader.ReadUInt32());  				break;    			case 16:	// ulong  				resourceData = dataCreator.Create(reader.ReadUInt64());  				break;    			case 17:	// DateTime  				resourceData = dataCreator.Create(DateTime.FromBinary(reader.ReadInt64()));  				break;    			case 18:	// TimeSpan  				resourceData = dataCreator.Create(TimeSpan.FromTicks(reader.ReadInt64()));  				break;    			case 19:	// Icon  				resourceData = new IconResourceData(dataCreator.CreateUserResourceType(IconResourceData.ReflectionTypeName)' reader.ReadBytes(info.length));  				break;    			case 20:	// Image  				resourceData = new ImageResourceData(dataCreator.CreateUserResourceType(ImageResourceData.ReflectionTypeName)' reader.ReadBytes(info.length));  				break;    			case 31:	// binary  				resourceData = dataCreator.CreateSerialized(reader.ReadBytes(info.length));  				break;    			case 21:	// Point (CV doesn't restore this type)  			default:  				throw new Exception("Unknown type");  			}
Magic Number,de4dot.code.deobfuscators.CodeVeil,ResourceConverter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CodeVeil\ResourceConverter.cs,Convert,The following statement contains a magic number: switch (type) {  			case 1:		// bool  				resourceData = dataCreator.Create(reader.ReadBoolean());  				break;    			case 2:		// byte  				resourceData = dataCreator.Create(reader.ReadByte());  				break;    			case 3:		// byte[]  				resourceData = dataCreator.Create(reader.ReadBytes(info.length));  				break;    			case 4:		// char[]  				resourceData = new CharArrayResourceData(dataCreator.CreateUserResourceType(CharArrayResourceData.ReflectionTypeName)' DataReaderUtils.ReadChars(ref reader' info.length));  				break;    			case 5:		// sbyte  				resourceData = dataCreator.Create(reader.ReadSByte());  				break;    			case 6:		// char  				resourceData = dataCreator.Create(DataReaderUtils.ReadChar(ref reader));  				break;    			case 7:		// decimal  				resourceData = dataCreator.Create(reader.ReadDecimal());  				break;    			case 8:		// double  				resourceData = dataCreator.Create(reader.ReadDouble());  				break;    			case 9:		// short  				resourceData = dataCreator.Create(reader.ReadInt16());  				break;    			case 10:	// int  				resourceData = dataCreator.Create(reader.ReadInt32());  				break;    			case 11:	// long  				resourceData = dataCreator.Create(reader.ReadInt64());  				break;    			case 12:	// float  				resourceData = dataCreator.Create(reader.ReadSingle());  				break;    			case 13:	// string  				resourceData = dataCreator.Create(reader.ReadSerializedString());  				break;    			case 14:	// ushort  				resourceData = dataCreator.Create(reader.ReadUInt16());  				break;    			case 15:	// uint  				resourceData = dataCreator.Create(reader.ReadUInt32());  				break;    			case 16:	// ulong  				resourceData = dataCreator.Create(reader.ReadUInt64());  				break;    			case 17:	// DateTime  				resourceData = dataCreator.Create(DateTime.FromBinary(reader.ReadInt64()));  				break;    			case 18:	// TimeSpan  				resourceData = dataCreator.Create(TimeSpan.FromTicks(reader.ReadInt64()));  				break;    			case 19:	// Icon  				resourceData = new IconResourceData(dataCreator.CreateUserResourceType(IconResourceData.ReflectionTypeName)' reader.ReadBytes(info.length));  				break;    			case 20:	// Image  				resourceData = new ImageResourceData(dataCreator.CreateUserResourceType(ImageResourceData.ReflectionTypeName)' reader.ReadBytes(info.length));  				break;    			case 31:	// binary  				resourceData = dataCreator.CreateSerialized(reader.ReadBytes(info.length));  				break;    			case 21:	// Point (CV doesn't restore this type)  			default:  				throw new Exception("Unknown type");  			}
Magic Number,de4dot.code.deobfuscators.CodeVeil,ResourceConverter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CodeVeil\ResourceConverter.cs,Convert,The following statement contains a magic number: switch (type) {  			case 1:		// bool  				resourceData = dataCreator.Create(reader.ReadBoolean());  				break;    			case 2:		// byte  				resourceData = dataCreator.Create(reader.ReadByte());  				break;    			case 3:		// byte[]  				resourceData = dataCreator.Create(reader.ReadBytes(info.length));  				break;    			case 4:		// char[]  				resourceData = new CharArrayResourceData(dataCreator.CreateUserResourceType(CharArrayResourceData.ReflectionTypeName)' DataReaderUtils.ReadChars(ref reader' info.length));  				break;    			case 5:		// sbyte  				resourceData = dataCreator.Create(reader.ReadSByte());  				break;    			case 6:		// char  				resourceData = dataCreator.Create(DataReaderUtils.ReadChar(ref reader));  				break;    			case 7:		// decimal  				resourceData = dataCreator.Create(reader.ReadDecimal());  				break;    			case 8:		// double  				resourceData = dataCreator.Create(reader.ReadDouble());  				break;    			case 9:		// short  				resourceData = dataCreator.Create(reader.ReadInt16());  				break;    			case 10:	// int  				resourceData = dataCreator.Create(reader.ReadInt32());  				break;    			case 11:	// long  				resourceData = dataCreator.Create(reader.ReadInt64());  				break;    			case 12:	// float  				resourceData = dataCreator.Create(reader.ReadSingle());  				break;    			case 13:	// string  				resourceData = dataCreator.Create(reader.ReadSerializedString());  				break;    			case 14:	// ushort  				resourceData = dataCreator.Create(reader.ReadUInt16());  				break;    			case 15:	// uint  				resourceData = dataCreator.Create(reader.ReadUInt32());  				break;    			case 16:	// ulong  				resourceData = dataCreator.Create(reader.ReadUInt64());  				break;    			case 17:	// DateTime  				resourceData = dataCreator.Create(DateTime.FromBinary(reader.ReadInt64()));  				break;    			case 18:	// TimeSpan  				resourceData = dataCreator.Create(TimeSpan.FromTicks(reader.ReadInt64()));  				break;    			case 19:	// Icon  				resourceData = new IconResourceData(dataCreator.CreateUserResourceType(IconResourceData.ReflectionTypeName)' reader.ReadBytes(info.length));  				break;    			case 20:	// Image  				resourceData = new ImageResourceData(dataCreator.CreateUserResourceType(ImageResourceData.ReflectionTypeName)' reader.ReadBytes(info.length));  				break;    			case 31:	// binary  				resourceData = dataCreator.CreateSerialized(reader.ReadBytes(info.length));  				break;    			case 21:	// Point (CV doesn't restore this type)  			default:  				throw new Exception("Unknown type");  			}
Magic Number,de4dot.code.deobfuscators.CodeVeil,ResourceConverter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CodeVeil\ResourceConverter.cs,Convert,The following statement contains a magic number: switch (type) {  			case 1:		// bool  				resourceData = dataCreator.Create(reader.ReadBoolean());  				break;    			case 2:		// byte  				resourceData = dataCreator.Create(reader.ReadByte());  				break;    			case 3:		// byte[]  				resourceData = dataCreator.Create(reader.ReadBytes(info.length));  				break;    			case 4:		// char[]  				resourceData = new CharArrayResourceData(dataCreator.CreateUserResourceType(CharArrayResourceData.ReflectionTypeName)' DataReaderUtils.ReadChars(ref reader' info.length));  				break;    			case 5:		// sbyte  				resourceData = dataCreator.Create(reader.ReadSByte());  				break;    			case 6:		// char  				resourceData = dataCreator.Create(DataReaderUtils.ReadChar(ref reader));  				break;    			case 7:		// decimal  				resourceData = dataCreator.Create(reader.ReadDecimal());  				break;    			case 8:		// double  				resourceData = dataCreator.Create(reader.ReadDouble());  				break;    			case 9:		// short  				resourceData = dataCreator.Create(reader.ReadInt16());  				break;    			case 10:	// int  				resourceData = dataCreator.Create(reader.ReadInt32());  				break;    			case 11:	// long  				resourceData = dataCreator.Create(reader.ReadInt64());  				break;    			case 12:	// float  				resourceData = dataCreator.Create(reader.ReadSingle());  				break;    			case 13:	// string  				resourceData = dataCreator.Create(reader.ReadSerializedString());  				break;    			case 14:	// ushort  				resourceData = dataCreator.Create(reader.ReadUInt16());  				break;    			case 15:	// uint  				resourceData = dataCreator.Create(reader.ReadUInt32());  				break;    			case 16:	// ulong  				resourceData = dataCreator.Create(reader.ReadUInt64());  				break;    			case 17:	// DateTime  				resourceData = dataCreator.Create(DateTime.FromBinary(reader.ReadInt64()));  				break;    			case 18:	// TimeSpan  				resourceData = dataCreator.Create(TimeSpan.FromTicks(reader.ReadInt64()));  				break;    			case 19:	// Icon  				resourceData = new IconResourceData(dataCreator.CreateUserResourceType(IconResourceData.ReflectionTypeName)' reader.ReadBytes(info.length));  				break;    			case 20:	// Image  				resourceData = new ImageResourceData(dataCreator.CreateUserResourceType(ImageResourceData.ReflectionTypeName)' reader.ReadBytes(info.length));  				break;    			case 31:	// binary  				resourceData = dataCreator.CreateSerialized(reader.ReadBytes(info.length));  				break;    			case 21:	// Point (CV doesn't restore this type)  			default:  				throw new Exception("Unknown type");  			}
Magic Number,de4dot.code.deobfuscators.CodeVeil,ResourceConverter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CodeVeil\ResourceConverter.cs,Convert,The following statement contains a magic number: switch (type) {  			case 1:		// bool  				resourceData = dataCreator.Create(reader.ReadBoolean());  				break;    			case 2:		// byte  				resourceData = dataCreator.Create(reader.ReadByte());  				break;    			case 3:		// byte[]  				resourceData = dataCreator.Create(reader.ReadBytes(info.length));  				break;    			case 4:		// char[]  				resourceData = new CharArrayResourceData(dataCreator.CreateUserResourceType(CharArrayResourceData.ReflectionTypeName)' DataReaderUtils.ReadChars(ref reader' info.length));  				break;    			case 5:		// sbyte  				resourceData = dataCreator.Create(reader.ReadSByte());  				break;    			case 6:		// char  				resourceData = dataCreator.Create(DataReaderUtils.ReadChar(ref reader));  				break;    			case 7:		// decimal  				resourceData = dataCreator.Create(reader.ReadDecimal());  				break;    			case 8:		// double  				resourceData = dataCreator.Create(reader.ReadDouble());  				break;    			case 9:		// short  				resourceData = dataCreator.Create(reader.ReadInt16());  				break;    			case 10:	// int  				resourceData = dataCreator.Create(reader.ReadInt32());  				break;    			case 11:	// long  				resourceData = dataCreator.Create(reader.ReadInt64());  				break;    			case 12:	// float  				resourceData = dataCreator.Create(reader.ReadSingle());  				break;    			case 13:	// string  				resourceData = dataCreator.Create(reader.ReadSerializedString());  				break;    			case 14:	// ushort  				resourceData = dataCreator.Create(reader.ReadUInt16());  				break;    			case 15:	// uint  				resourceData = dataCreator.Create(reader.ReadUInt32());  				break;    			case 16:	// ulong  				resourceData = dataCreator.Create(reader.ReadUInt64());  				break;    			case 17:	// DateTime  				resourceData = dataCreator.Create(DateTime.FromBinary(reader.ReadInt64()));  				break;    			case 18:	// TimeSpan  				resourceData = dataCreator.Create(TimeSpan.FromTicks(reader.ReadInt64()));  				break;    			case 19:	// Icon  				resourceData = new IconResourceData(dataCreator.CreateUserResourceType(IconResourceData.ReflectionTypeName)' reader.ReadBytes(info.length));  				break;    			case 20:	// Image  				resourceData = new ImageResourceData(dataCreator.CreateUserResourceType(ImageResourceData.ReflectionTypeName)' reader.ReadBytes(info.length));  				break;    			case 31:	// binary  				resourceData = dataCreator.CreateSerialized(reader.ReadBytes(info.length));  				break;    			case 21:	// Point (CV doesn't restore this type)  			default:  				throw new Exception("Unknown type");  			}
Magic Number,de4dot.code.deobfuscators.CodeVeil,ResourceConverter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CodeVeil\ResourceConverter.cs,Convert,The following statement contains a magic number: switch (type) {  			case 1:		// bool  				resourceData = dataCreator.Create(reader.ReadBoolean());  				break;    			case 2:		// byte  				resourceData = dataCreator.Create(reader.ReadByte());  				break;    			case 3:		// byte[]  				resourceData = dataCreator.Create(reader.ReadBytes(info.length));  				break;    			case 4:		// char[]  				resourceData = new CharArrayResourceData(dataCreator.CreateUserResourceType(CharArrayResourceData.ReflectionTypeName)' DataReaderUtils.ReadChars(ref reader' info.length));  				break;    			case 5:		// sbyte  				resourceData = dataCreator.Create(reader.ReadSByte());  				break;    			case 6:		// char  				resourceData = dataCreator.Create(DataReaderUtils.ReadChar(ref reader));  				break;    			case 7:		// decimal  				resourceData = dataCreator.Create(reader.ReadDecimal());  				break;    			case 8:		// double  				resourceData = dataCreator.Create(reader.ReadDouble());  				break;    			case 9:		// short  				resourceData = dataCreator.Create(reader.ReadInt16());  				break;    			case 10:	// int  				resourceData = dataCreator.Create(reader.ReadInt32());  				break;    			case 11:	// long  				resourceData = dataCreator.Create(reader.ReadInt64());  				break;    			case 12:	// float  				resourceData = dataCreator.Create(reader.ReadSingle());  				break;    			case 13:	// string  				resourceData = dataCreator.Create(reader.ReadSerializedString());  				break;    			case 14:	// ushort  				resourceData = dataCreator.Create(reader.ReadUInt16());  				break;    			case 15:	// uint  				resourceData = dataCreator.Create(reader.ReadUInt32());  				break;    			case 16:	// ulong  				resourceData = dataCreator.Create(reader.ReadUInt64());  				break;    			case 17:	// DateTime  				resourceData = dataCreator.Create(DateTime.FromBinary(reader.ReadInt64()));  				break;    			case 18:	// TimeSpan  				resourceData = dataCreator.Create(TimeSpan.FromTicks(reader.ReadInt64()));  				break;    			case 19:	// Icon  				resourceData = new IconResourceData(dataCreator.CreateUserResourceType(IconResourceData.ReflectionTypeName)' reader.ReadBytes(info.length));  				break;    			case 20:	// Image  				resourceData = new ImageResourceData(dataCreator.CreateUserResourceType(ImageResourceData.ReflectionTypeName)' reader.ReadBytes(info.length));  				break;    			case 31:	// binary  				resourceData = dataCreator.CreateSerialized(reader.ReadBytes(info.length));  				break;    			case 21:	// Point (CV doesn't restore this type)  			default:  				throw new Exception("Unknown type");  			}
Magic Number,de4dot.code.deobfuscators.CodeVeil,ResourceDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CodeVeil\ResourceDecrypter.cs,FindResourceFlags,The following statement contains a magic number: sig == null || sig.Params.Count != 4
Magic Number,de4dot.code.deobfuscators.CodeVeil,ResourceDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CodeVeil\ResourceDecrypter.cs,FindResourceFlags,The following statement contains a magic number: var type = sig.Params[2].TryGetTypeDef();
Magic Number,de4dot.code.deobfuscators.CodeVeil,ResourceDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CodeVeil\ResourceDecrypter.cs,FindResType,The following statement contains a magic number: sig == null || sig.Params.Count != 4
Magic Number,de4dot.code.deobfuscators.CodeVeil,ResourceDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CodeVeil\ResourceDecrypter.cs,GetDlxResDict,The following statement contains a magic number: fieldType.GenericArguments.Count != 2
Magic Number,de4dot.code.deobfuscators.CodeVeil,ResourceDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CodeVeil\ResourceDecrypter.cs,FindXxteaMethod,The following statement contains a magic number: !DeobUtils.HasInteger(method' 52)
Magic Number,de4dot.code.deobfuscators.CodeVeil,ResourceReader,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CodeVeil\ResourceReader.cs,Read,The following statement contains a magic number: bool encrypted = (flags & 2) != 0;
Magic Number,de4dot.code.deobfuscators.CodeVeil,ResourceReader,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CodeVeil\ResourceReader.cs,Read,The following statement contains a magic number: var key = new uint[4];
Magic Number,de4dot.code.deobfuscators.CodeVeil,ResourceReader,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CodeVeil\ResourceReader.cs,Read,The following statement contains a magic number: key[2] = dataReader.ReadUInt32();
Magic Number,de4dot.code.deobfuscators.CodeVeil,ResourceReader,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CodeVeil\ResourceReader.cs,Read,The following statement contains a magic number: key[3] = dataReader.ReadUInt32();
Magic Number,de4dot.code.deobfuscators.CodeVeil,ResourceReader,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CodeVeil\ResourceReader.cs,Read,The following statement contains a magic number: byte[] decryptedData = new byte[encryptedData.Length * 4];
Magic Number,de4dot.code.deobfuscators.CodeVeil,ResourceReader,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CodeVeil\ResourceReader.cs,Rol3,The following statement contains a magic number: return (char)((s << 3) | (s >> (16 - 3)));
Magic Number,de4dot.code.deobfuscators.CodeVeil,ResourceReader,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CodeVeil\ResourceReader.cs,Rol3,The following statement contains a magic number: return (char)((s << 3) | (s >> (16 - 3)));
Magic Number,de4dot.code.deobfuscators.CodeVeil,ResourceReader,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CodeVeil\ResourceReader.cs,Rol3,The following statement contains a magic number: return (char)((s << 3) | (s >> (16 - 3)));
Magic Number,de4dot.code.deobfuscators.CodeVeil,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CodeVeil\StringDecrypter.cs,CheckFields,The following statement contains a magic number: data == null || data.Length == 0 || data.Length % 4 != 0
Magic Number,de4dot.code.deobfuscators.CodeVeil,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CodeVeil\StringDecrypter.cs,GetKey,The following statement contains a magic number: ldci4.GetLdcI4Value() != 4
Magic Number,de4dot.code.deobfuscators.CodeVeil,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CodeVeil\StringDecrypter.cs,GetKey,The following statement contains a magic number: var key = ArrayFinder.GetInitializedUInt32Array(4' method' ref i);
Magic Number,de4dot.code.deobfuscators.CodeVeil,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CodeVeil\StringDecrypter.cs,DecryptStrings,The following statement contains a magic number: var encryptedData = new uint[data.Length / 4];
Magic Number,de4dot.code.deobfuscators.CodeVeil,TamperDetection,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CodeVeil\TamperDetection.cs,CallsMainTypeTamperCheckMethod,The following statement contains a magic number: !CheckInvokeCall(instrs[2]' "System.Reflection.Assembly"' "(System.Object)")
Magic Number,de4dot.code.deobfuscators.CodeVeil,TamperDetection,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CodeVeil\TamperDetection.cs,CallsMainTypeTamperCheckMethod,The following statement contains a magic number: !CheckInvokeCall(instrs[4]' "System.Void"' "(System.Reflection.Assembly'System.UInt64)")
Magic Number,de4dot.code.deobfuscators.CodeWall,AssemblyDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CodeWall\AssemblyDecrypter.cs,Decrypt,The following statement contains a magic number: return DeobUtils.Inflate(DeobUtils.AesDecrypt(encrypted' keyGenerator.GetBytes(32)' keyGenerator.GetBytes(16))' false);
Magic Number,de4dot.code.deobfuscators.CodeWall,AssemblyDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CodeWall\AssemblyDecrypter.cs,Decrypt,The following statement contains a magic number: return DeobUtils.Inflate(DeobUtils.AesDecrypt(encrypted' keyGenerator.GetBytes(32)' keyGenerator.GetBytes(16))' false);
Magic Number,de4dot.code.deobfuscators.CodeWall,Deobfuscator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CodeWall\Deobfuscator.cs,DetectInternal,The following statement contains a magic number: val += 100 + 10 * (sum - 1);
Magic Number,de4dot.code.deobfuscators.CodeWall,Deobfuscator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CodeWall\Deobfuscator.cs,DetectInternal,The following statement contains a magic number: val += 100 + 10 * (sum - 1);
Magic Number,de4dot.code.deobfuscators.CodeWall,Deobfuscator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CodeWall\Deobfuscator.cs,DetectInternal,The following statement contains a magic number: val += 50;
Magic Number,de4dot.code.deobfuscators.CodeWall,Deobfuscator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CodeWall\Deobfuscator.cs,InitializeStringDecrypter,The following statement contains a magic number: staticStringInliner.Add(info.Method' (method' gim' args) => stringDecrypter.Decrypt(method' (int)args[0]' (int)args[1]' (int)args[2]));
Magic Number,de4dot.code.deobfuscators.CodeWall,MethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CodeWall\MethodsDecrypter.cs,Find,The following statement contains a magic number: DeobUtils.GetInitCctors(module' 3)
Magic Number,de4dot.code.deobfuscators.CodeWall,MethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CodeWall\MethodsDecrypter.cs,Decrypt,The following statement contains a magic number: dm.code.Length < 6 || dm.code[0] != 0x2A || dm.code[1] != 0x2A
Magic Number,de4dot.code.deobfuscators.CodeWall,MethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CodeWall\MethodsDecrypter.cs,Decrypt,The following statement contains a magic number: int seed = BitConverter.ToInt32(dm.code' 2);
Magic Number,de4dot.code.deobfuscators.CodeWall,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CodeWall\StringDecrypter.cs,CheckMethodsV30,The following statement contains a magic number: type.Methods.Count < 1 || type.Methods.Count > 2
Magic Number,de4dot.code.deobfuscators.CodeWall,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CodeWall\StringDecrypter.cs,CheckMethodsV36,The following statement contains a magic number: type.Methods.Count != 2
Magic Number,de4dot.code.deobfuscators.CodeWall,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CodeWall\StringDecrypter.cs,FindMagic1,The following statement contains a magic number: instrs[i + 2].OpCode.Code != Code.Xor
Magic Number,de4dot.code.deobfuscators.CodeWall,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CodeWall\StringDecrypter.cs,FindMagic1,The following statement contains a magic number: i < instrs.Count - 2
Magic Number,de4dot.code.deobfuscators.CodeWall,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CodeWall\StringDecrypter.cs,FindMagic2,The following statement contains a magic number: instrs[i + 2].OpCode.Code != Code.Xor
Magic Number,de4dot.code.deobfuscators.CodeWall,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CodeWall\StringDecrypter.cs,FindMagic2,The following statement contains a magic number: i < instrs.Count - 2
Magic Number,de4dot.code.deobfuscators.CodeWall,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CodeWall\StringDecrypter.cs,FindMagic3,The following statement contains a magic number: !ldarg.IsLdarg() || ldarg.GetParameterIndex() != 2
Magic Number,de4dot.code.deobfuscators.CodeWall,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CodeWall\StringDecrypter.cs,FindMagic3,The following statement contains a magic number: instrs[i + 2].OpCode.Code != Code.Xor
Magic Number,de4dot.code.deobfuscators.CodeWall,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CodeWall\StringDecrypter.cs,FindMagic3,The following statement contains a magic number: i < instrs.Count - 2
Magic Number,de4dot.code.deobfuscators.CodeWall.randomc,CRandomMersenne,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CodeWall\randomc\CRandomMersenne.cs,Init0,The following statement contains a magic number: const uint factor = 1812433253;
Magic Number,de4dot.code.deobfuscators.CodeWall.randomc,CRandomMersenne,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CodeWall\randomc\CRandomMersenne.cs,Init0,The following statement contains a magic number: mt[mti] = (factor * (mt[mti - 1] ^ (mt[mti - 1] >> 30)) + (uint)mti);
Magic Number,de4dot.code.deobfuscators.CodeWall.randomc,CRandomMersenne,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CodeWall\randomc\CRandomMersenne.cs,RandomInit,The following statement contains a magic number: i < 37
Magic Number,de4dot.code.deobfuscators.CodeWall.randomc,CRandomMother,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CodeWall\randomc\CRandomMother.cs,RandomInit,The following statement contains a magic number: s = s * 29943829 - 1;
Magic Number,de4dot.code.deobfuscators.CodeWall.randomc,CRandomMother,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CodeWall\randomc\CRandomMother.cs,RandomInit,The following statement contains a magic number: i < 5
Magic Number,de4dot.code.deobfuscators.CodeWall.randomc,CRandomMother,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CodeWall\randomc\CRandomMother.cs,RandomInit,The following statement contains a magic number: i < 19
Magic Number,de4dot.code.deobfuscators.CodeWall.randomc,CRandomMother,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CodeWall\randomc\CRandomMother.cs,BRandom,The following statement contains a magic number: sum = (ulong)2111111111UL * (ulong)x[3] +  			   (ulong)1492 * (ulong)(x[2]) +  			   (ulong)1776 * (ulong)(x[1]) +  			   (ulong)5115 * (ulong)(x[0]) +  			   (ulong)x[4];
Magic Number,de4dot.code.deobfuscators.CodeWall.randomc,CRandomMother,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CodeWall\randomc\CRandomMother.cs,BRandom,The following statement contains a magic number: sum = (ulong)2111111111UL * (ulong)x[3] +  			   (ulong)1492 * (ulong)(x[2]) +  			   (ulong)1776 * (ulong)(x[1]) +  			   (ulong)5115 * (ulong)(x[0]) +  			   (ulong)x[4];
Magic Number,de4dot.code.deobfuscators.CodeWall.randomc,CRandomMother,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CodeWall\randomc\CRandomMother.cs,BRandom,The following statement contains a magic number: sum = (ulong)2111111111UL * (ulong)x[3] +  			   (ulong)1492 * (ulong)(x[2]) +  			   (ulong)1776 * (ulong)(x[1]) +  			   (ulong)5115 * (ulong)(x[0]) +  			   (ulong)x[4];
Magic Number,de4dot.code.deobfuscators.CodeWall.randomc,CRandomMother,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CodeWall\randomc\CRandomMother.cs,BRandom,The following statement contains a magic number: sum = (ulong)2111111111UL * (ulong)x[3] +  			   (ulong)1492 * (ulong)(x[2]) +  			   (ulong)1776 * (ulong)(x[1]) +  			   (ulong)5115 * (ulong)(x[0]) +  			   (ulong)x[4];
Magic Number,de4dot.code.deobfuscators.CodeWall.randomc,CRandomMother,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CodeWall\randomc\CRandomMother.cs,BRandom,The following statement contains a magic number: sum = (ulong)2111111111UL * (ulong)x[3] +  			   (ulong)1492 * (ulong)(x[2]) +  			   (ulong)1776 * (ulong)(x[1]) +  			   (ulong)5115 * (ulong)(x[0]) +  			   (ulong)x[4];
Magic Number,de4dot.code.deobfuscators.CodeWall.randomc,CRandomMother,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CodeWall\randomc\CRandomMother.cs,BRandom,The following statement contains a magic number: sum = (ulong)2111111111UL * (ulong)x[3] +  			   (ulong)1492 * (ulong)(x[2]) +  			   (ulong)1776 * (ulong)(x[1]) +  			   (ulong)5115 * (ulong)(x[0]) +  			   (ulong)x[4];
Magic Number,de4dot.code.deobfuscators.CodeWall.randomc,CRandomMother,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CodeWall\randomc\CRandomMother.cs,BRandom,The following statement contains a magic number: sum = (ulong)2111111111UL * (ulong)x[3] +  			   (ulong)1492 * (ulong)(x[2]) +  			   (ulong)1776 * (ulong)(x[1]) +  			   (ulong)5115 * (ulong)(x[0]) +  			   (ulong)x[4];
Magic Number,de4dot.code.deobfuscators.CodeWall.randomc,CRandomMother,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CodeWall\randomc\CRandomMother.cs,BRandom,The following statement contains a magic number: x[3] = x[2];
Magic Number,de4dot.code.deobfuscators.CodeWall.randomc,CRandomMother,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CodeWall\randomc\CRandomMother.cs,BRandom,The following statement contains a magic number: x[3] = x[2];
Magic Number,de4dot.code.deobfuscators.CodeWall.randomc,CRandomMother,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CodeWall\randomc\CRandomMother.cs,BRandom,The following statement contains a magic number: x[2] = x[1];
Magic Number,de4dot.code.deobfuscators.CodeWall.randomc,CRandomMother,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CodeWall\randomc\CRandomMother.cs,BRandom,The following statement contains a magic number: x[4] = (uint)(sum >> 32);
Magic Number,de4dot.code.deobfuscators.CodeWall.randomc,CRandomMother,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CodeWall\randomc\CRandomMother.cs,BRandom,The following statement contains a magic number: x[4] = (uint)(sum >> 32);
Magic Number,de4dot.code.deobfuscators.Confuser,AntiDebugger,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\AntiDebugger.cs,CheckMethod_normal,The following statement contains a magic number: failFastCalls != 6 && failFastCalls != 8
Magic Number,de4dot.code.deobfuscators.Confuser,AntiDebugger,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\AntiDebugger.cs,CheckMethod_normal,The following statement contains a magic number: failFastCalls != 6 && failFastCalls != 8
Magic Number,de4dot.code.deobfuscators.Confuser,AntiDebugger,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\AntiDebugger.cs,CheckMethod_normal,The following statement contains a magic number: ConfuserUtils.CountCalls(antiDebugMethod' ntQueryInformationProcess) != 2
Magic Number,de4dot.code.deobfuscators.Confuser,AntiDebugger,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\AntiDebugger.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v14_r57588_safe:  				minRev = 57588;  				maxRev = 60787;  				return true;    			case ConfuserVersion.v16_r61954_safe:  				minRev = 61954;  				maxRev = 73791;  				return true;    			case ConfuserVersion.v17_r73822_safe:  				minRev = 73822;  				maxRev = 73822;  				return true;    			case ConfuserVersion.v17_r74021_safe:  				minRev = 74021;  				maxRev = 76101;  				return true;    			case ConfuserVersion.v19_r76119_safe:  				minRev = 76119;  				maxRev = 78342;  				return true;    			case ConfuserVersion.v19_r78363_safe:  				minRev = 78363;  				maxRev = int.MaxValue;  				return true;    			case ConfuserVersion.v14_r57588_normal:  				minRev = 57588;  				maxRev = 60408;  				return true;    			case ConfuserVersion.v14_r60785_normal:  				minRev = 60785;  				maxRev = 60787;  				return true;    			case ConfuserVersion.v16_r61954_normal:  				minRev = 61954;  				maxRev = 73791;  				return true;    			case ConfuserVersion.v17_r73822_normal:  				minRev = 73822;  				maxRev = 73822;  				return true;    			case ConfuserVersion.v17_r74021_normal:  				minRev = 74021;  				maxRev = 78342;  				return true;    			case ConfuserVersion.v19_r78363_normal:  				minRev = 78363;  				maxRev = int.MaxValue;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,AntiDebugger,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\AntiDebugger.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v14_r57588_safe:  				minRev = 57588;  				maxRev = 60787;  				return true;    			case ConfuserVersion.v16_r61954_safe:  				minRev = 61954;  				maxRev = 73791;  				return true;    			case ConfuserVersion.v17_r73822_safe:  				minRev = 73822;  				maxRev = 73822;  				return true;    			case ConfuserVersion.v17_r74021_safe:  				minRev = 74021;  				maxRev = 76101;  				return true;    			case ConfuserVersion.v19_r76119_safe:  				minRev = 76119;  				maxRev = 78342;  				return true;    			case ConfuserVersion.v19_r78363_safe:  				minRev = 78363;  				maxRev = int.MaxValue;  				return true;    			case ConfuserVersion.v14_r57588_normal:  				minRev = 57588;  				maxRev = 60408;  				return true;    			case ConfuserVersion.v14_r60785_normal:  				minRev = 60785;  				maxRev = 60787;  				return true;    			case ConfuserVersion.v16_r61954_normal:  				minRev = 61954;  				maxRev = 73791;  				return true;    			case ConfuserVersion.v17_r73822_normal:  				minRev = 73822;  				maxRev = 73822;  				return true;    			case ConfuserVersion.v17_r74021_normal:  				minRev = 74021;  				maxRev = 78342;  				return true;    			case ConfuserVersion.v19_r78363_normal:  				minRev = 78363;  				maxRev = int.MaxValue;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,AntiDebugger,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\AntiDebugger.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v14_r57588_safe:  				minRev = 57588;  				maxRev = 60787;  				return true;    			case ConfuserVersion.v16_r61954_safe:  				minRev = 61954;  				maxRev = 73791;  				return true;    			case ConfuserVersion.v17_r73822_safe:  				minRev = 73822;  				maxRev = 73822;  				return true;    			case ConfuserVersion.v17_r74021_safe:  				minRev = 74021;  				maxRev = 76101;  				return true;    			case ConfuserVersion.v19_r76119_safe:  				minRev = 76119;  				maxRev = 78342;  				return true;    			case ConfuserVersion.v19_r78363_safe:  				minRev = 78363;  				maxRev = int.MaxValue;  				return true;    			case ConfuserVersion.v14_r57588_normal:  				minRev = 57588;  				maxRev = 60408;  				return true;    			case ConfuserVersion.v14_r60785_normal:  				minRev = 60785;  				maxRev = 60787;  				return true;    			case ConfuserVersion.v16_r61954_normal:  				minRev = 61954;  				maxRev = 73791;  				return true;    			case ConfuserVersion.v17_r73822_normal:  				minRev = 73822;  				maxRev = 73822;  				return true;    			case ConfuserVersion.v17_r74021_normal:  				minRev = 74021;  				maxRev = 78342;  				return true;    			case ConfuserVersion.v19_r78363_normal:  				minRev = 78363;  				maxRev = int.MaxValue;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,AntiDebugger,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\AntiDebugger.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v14_r57588_safe:  				minRev = 57588;  				maxRev = 60787;  				return true;    			case ConfuserVersion.v16_r61954_safe:  				minRev = 61954;  				maxRev = 73791;  				return true;    			case ConfuserVersion.v17_r73822_safe:  				minRev = 73822;  				maxRev = 73822;  				return true;    			case ConfuserVersion.v17_r74021_safe:  				minRev = 74021;  				maxRev = 76101;  				return true;    			case ConfuserVersion.v19_r76119_safe:  				minRev = 76119;  				maxRev = 78342;  				return true;    			case ConfuserVersion.v19_r78363_safe:  				minRev = 78363;  				maxRev = int.MaxValue;  				return true;    			case ConfuserVersion.v14_r57588_normal:  				minRev = 57588;  				maxRev = 60408;  				return true;    			case ConfuserVersion.v14_r60785_normal:  				minRev = 60785;  				maxRev = 60787;  				return true;    			case ConfuserVersion.v16_r61954_normal:  				minRev = 61954;  				maxRev = 73791;  				return true;    			case ConfuserVersion.v17_r73822_normal:  				minRev = 73822;  				maxRev = 73822;  				return true;    			case ConfuserVersion.v17_r74021_normal:  				minRev = 74021;  				maxRev = 78342;  				return true;    			case ConfuserVersion.v19_r78363_normal:  				minRev = 78363;  				maxRev = int.MaxValue;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,AntiDebugger,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\AntiDebugger.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v14_r57588_safe:  				minRev = 57588;  				maxRev = 60787;  				return true;    			case ConfuserVersion.v16_r61954_safe:  				minRev = 61954;  				maxRev = 73791;  				return true;    			case ConfuserVersion.v17_r73822_safe:  				minRev = 73822;  				maxRev = 73822;  				return true;    			case ConfuserVersion.v17_r74021_safe:  				minRev = 74021;  				maxRev = 76101;  				return true;    			case ConfuserVersion.v19_r76119_safe:  				minRev = 76119;  				maxRev = 78342;  				return true;    			case ConfuserVersion.v19_r78363_safe:  				minRev = 78363;  				maxRev = int.MaxValue;  				return true;    			case ConfuserVersion.v14_r57588_normal:  				minRev = 57588;  				maxRev = 60408;  				return true;    			case ConfuserVersion.v14_r60785_normal:  				minRev = 60785;  				maxRev = 60787;  				return true;    			case ConfuserVersion.v16_r61954_normal:  				minRev = 61954;  				maxRev = 73791;  				return true;    			case ConfuserVersion.v17_r73822_normal:  				minRev = 73822;  				maxRev = 73822;  				return true;    			case ConfuserVersion.v17_r74021_normal:  				minRev = 74021;  				maxRev = 78342;  				return true;    			case ConfuserVersion.v19_r78363_normal:  				minRev = 78363;  				maxRev = int.MaxValue;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,AntiDebugger,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\AntiDebugger.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v14_r57588_safe:  				minRev = 57588;  				maxRev = 60787;  				return true;    			case ConfuserVersion.v16_r61954_safe:  				minRev = 61954;  				maxRev = 73791;  				return true;    			case ConfuserVersion.v17_r73822_safe:  				minRev = 73822;  				maxRev = 73822;  				return true;    			case ConfuserVersion.v17_r74021_safe:  				minRev = 74021;  				maxRev = 76101;  				return true;    			case ConfuserVersion.v19_r76119_safe:  				minRev = 76119;  				maxRev = 78342;  				return true;    			case ConfuserVersion.v19_r78363_safe:  				minRev = 78363;  				maxRev = int.MaxValue;  				return true;    			case ConfuserVersion.v14_r57588_normal:  				minRev = 57588;  				maxRev = 60408;  				return true;    			case ConfuserVersion.v14_r60785_normal:  				minRev = 60785;  				maxRev = 60787;  				return true;    			case ConfuserVersion.v16_r61954_normal:  				minRev = 61954;  				maxRev = 73791;  				return true;    			case ConfuserVersion.v17_r73822_normal:  				minRev = 73822;  				maxRev = 73822;  				return true;    			case ConfuserVersion.v17_r74021_normal:  				minRev = 74021;  				maxRev = 78342;  				return true;    			case ConfuserVersion.v19_r78363_normal:  				minRev = 78363;  				maxRev = int.MaxValue;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,AntiDebugger,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\AntiDebugger.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v14_r57588_safe:  				minRev = 57588;  				maxRev = 60787;  				return true;    			case ConfuserVersion.v16_r61954_safe:  				minRev = 61954;  				maxRev = 73791;  				return true;    			case ConfuserVersion.v17_r73822_safe:  				minRev = 73822;  				maxRev = 73822;  				return true;    			case ConfuserVersion.v17_r74021_safe:  				minRev = 74021;  				maxRev = 76101;  				return true;    			case ConfuserVersion.v19_r76119_safe:  				minRev = 76119;  				maxRev = 78342;  				return true;    			case ConfuserVersion.v19_r78363_safe:  				minRev = 78363;  				maxRev = int.MaxValue;  				return true;    			case ConfuserVersion.v14_r57588_normal:  				minRev = 57588;  				maxRev = 60408;  				return true;    			case ConfuserVersion.v14_r60785_normal:  				minRev = 60785;  				maxRev = 60787;  				return true;    			case ConfuserVersion.v16_r61954_normal:  				minRev = 61954;  				maxRev = 73791;  				return true;    			case ConfuserVersion.v17_r73822_normal:  				minRev = 73822;  				maxRev = 73822;  				return true;    			case ConfuserVersion.v17_r74021_normal:  				minRev = 74021;  				maxRev = 78342;  				return true;    			case ConfuserVersion.v19_r78363_normal:  				minRev = 78363;  				maxRev = int.MaxValue;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,AntiDebugger,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\AntiDebugger.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v14_r57588_safe:  				minRev = 57588;  				maxRev = 60787;  				return true;    			case ConfuserVersion.v16_r61954_safe:  				minRev = 61954;  				maxRev = 73791;  				return true;    			case ConfuserVersion.v17_r73822_safe:  				minRev = 73822;  				maxRev = 73822;  				return true;    			case ConfuserVersion.v17_r74021_safe:  				minRev = 74021;  				maxRev = 76101;  				return true;    			case ConfuserVersion.v19_r76119_safe:  				minRev = 76119;  				maxRev = 78342;  				return true;    			case ConfuserVersion.v19_r78363_safe:  				minRev = 78363;  				maxRev = int.MaxValue;  				return true;    			case ConfuserVersion.v14_r57588_normal:  				minRev = 57588;  				maxRev = 60408;  				return true;    			case ConfuserVersion.v14_r60785_normal:  				minRev = 60785;  				maxRev = 60787;  				return true;    			case ConfuserVersion.v16_r61954_normal:  				minRev = 61954;  				maxRev = 73791;  				return true;    			case ConfuserVersion.v17_r73822_normal:  				minRev = 73822;  				maxRev = 73822;  				return true;    			case ConfuserVersion.v17_r74021_normal:  				minRev = 74021;  				maxRev = 78342;  				return true;    			case ConfuserVersion.v19_r78363_normal:  				minRev = 78363;  				maxRev = int.MaxValue;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,AntiDebugger,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\AntiDebugger.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v14_r57588_safe:  				minRev = 57588;  				maxRev = 60787;  				return true;    			case ConfuserVersion.v16_r61954_safe:  				minRev = 61954;  				maxRev = 73791;  				return true;    			case ConfuserVersion.v17_r73822_safe:  				minRev = 73822;  				maxRev = 73822;  				return true;    			case ConfuserVersion.v17_r74021_safe:  				minRev = 74021;  				maxRev = 76101;  				return true;    			case ConfuserVersion.v19_r76119_safe:  				minRev = 76119;  				maxRev = 78342;  				return true;    			case ConfuserVersion.v19_r78363_safe:  				minRev = 78363;  				maxRev = int.MaxValue;  				return true;    			case ConfuserVersion.v14_r57588_normal:  				minRev = 57588;  				maxRev = 60408;  				return true;    			case ConfuserVersion.v14_r60785_normal:  				minRev = 60785;  				maxRev = 60787;  				return true;    			case ConfuserVersion.v16_r61954_normal:  				minRev = 61954;  				maxRev = 73791;  				return true;    			case ConfuserVersion.v17_r73822_normal:  				minRev = 73822;  				maxRev = 73822;  				return true;    			case ConfuserVersion.v17_r74021_normal:  				minRev = 74021;  				maxRev = 78342;  				return true;    			case ConfuserVersion.v19_r78363_normal:  				minRev = 78363;  				maxRev = int.MaxValue;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,AntiDebugger,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\AntiDebugger.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v14_r57588_safe:  				minRev = 57588;  				maxRev = 60787;  				return true;    			case ConfuserVersion.v16_r61954_safe:  				minRev = 61954;  				maxRev = 73791;  				return true;    			case ConfuserVersion.v17_r73822_safe:  				minRev = 73822;  				maxRev = 73822;  				return true;    			case ConfuserVersion.v17_r74021_safe:  				minRev = 74021;  				maxRev = 76101;  				return true;    			case ConfuserVersion.v19_r76119_safe:  				minRev = 76119;  				maxRev = 78342;  				return true;    			case ConfuserVersion.v19_r78363_safe:  				minRev = 78363;  				maxRev = int.MaxValue;  				return true;    			case ConfuserVersion.v14_r57588_normal:  				minRev = 57588;  				maxRev = 60408;  				return true;    			case ConfuserVersion.v14_r60785_normal:  				minRev = 60785;  				maxRev = 60787;  				return true;    			case ConfuserVersion.v16_r61954_normal:  				minRev = 61954;  				maxRev = 73791;  				return true;    			case ConfuserVersion.v17_r73822_normal:  				minRev = 73822;  				maxRev = 73822;  				return true;    			case ConfuserVersion.v17_r74021_normal:  				minRev = 74021;  				maxRev = 78342;  				return true;    			case ConfuserVersion.v19_r78363_normal:  				minRev = 78363;  				maxRev = int.MaxValue;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,AntiDebugger,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\AntiDebugger.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v14_r57588_safe:  				minRev = 57588;  				maxRev = 60787;  				return true;    			case ConfuserVersion.v16_r61954_safe:  				minRev = 61954;  				maxRev = 73791;  				return true;    			case ConfuserVersion.v17_r73822_safe:  				minRev = 73822;  				maxRev = 73822;  				return true;    			case ConfuserVersion.v17_r74021_safe:  				minRev = 74021;  				maxRev = 76101;  				return true;    			case ConfuserVersion.v19_r76119_safe:  				minRev = 76119;  				maxRev = 78342;  				return true;    			case ConfuserVersion.v19_r78363_safe:  				minRev = 78363;  				maxRev = int.MaxValue;  				return true;    			case ConfuserVersion.v14_r57588_normal:  				minRev = 57588;  				maxRev = 60408;  				return true;    			case ConfuserVersion.v14_r60785_normal:  				minRev = 60785;  				maxRev = 60787;  				return true;    			case ConfuserVersion.v16_r61954_normal:  				minRev = 61954;  				maxRev = 73791;  				return true;    			case ConfuserVersion.v17_r73822_normal:  				minRev = 73822;  				maxRev = 73822;  				return true;    			case ConfuserVersion.v17_r74021_normal:  				minRev = 74021;  				maxRev = 78342;  				return true;    			case ConfuserVersion.v19_r78363_normal:  				minRev = 78363;  				maxRev = int.MaxValue;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,AntiDebugger,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\AntiDebugger.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v14_r57588_safe:  				minRev = 57588;  				maxRev = 60787;  				return true;    			case ConfuserVersion.v16_r61954_safe:  				minRev = 61954;  				maxRev = 73791;  				return true;    			case ConfuserVersion.v17_r73822_safe:  				minRev = 73822;  				maxRev = 73822;  				return true;    			case ConfuserVersion.v17_r74021_safe:  				minRev = 74021;  				maxRev = 76101;  				return true;    			case ConfuserVersion.v19_r76119_safe:  				minRev = 76119;  				maxRev = 78342;  				return true;    			case ConfuserVersion.v19_r78363_safe:  				minRev = 78363;  				maxRev = int.MaxValue;  				return true;    			case ConfuserVersion.v14_r57588_normal:  				minRev = 57588;  				maxRev = 60408;  				return true;    			case ConfuserVersion.v14_r60785_normal:  				minRev = 60785;  				maxRev = 60787;  				return true;    			case ConfuserVersion.v16_r61954_normal:  				minRev = 61954;  				maxRev = 73791;  				return true;    			case ConfuserVersion.v17_r73822_normal:  				minRev = 73822;  				maxRev = 73822;  				return true;    			case ConfuserVersion.v17_r74021_normal:  				minRev = 74021;  				maxRev = 78342;  				return true;    			case ConfuserVersion.v19_r78363_normal:  				minRev = 78363;  				maxRev = int.MaxValue;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,AntiDebugger,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\AntiDebugger.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v14_r57588_safe:  				minRev = 57588;  				maxRev = 60787;  				return true;    			case ConfuserVersion.v16_r61954_safe:  				minRev = 61954;  				maxRev = 73791;  				return true;    			case ConfuserVersion.v17_r73822_safe:  				minRev = 73822;  				maxRev = 73822;  				return true;    			case ConfuserVersion.v17_r74021_safe:  				minRev = 74021;  				maxRev = 76101;  				return true;    			case ConfuserVersion.v19_r76119_safe:  				minRev = 76119;  				maxRev = 78342;  				return true;    			case ConfuserVersion.v19_r78363_safe:  				minRev = 78363;  				maxRev = int.MaxValue;  				return true;    			case ConfuserVersion.v14_r57588_normal:  				minRev = 57588;  				maxRev = 60408;  				return true;    			case ConfuserVersion.v14_r60785_normal:  				minRev = 60785;  				maxRev = 60787;  				return true;    			case ConfuserVersion.v16_r61954_normal:  				minRev = 61954;  				maxRev = 73791;  				return true;    			case ConfuserVersion.v17_r73822_normal:  				minRev = 73822;  				maxRev = 73822;  				return true;    			case ConfuserVersion.v17_r74021_normal:  				minRev = 74021;  				maxRev = 78342;  				return true;    			case ConfuserVersion.v19_r78363_normal:  				minRev = 78363;  				maxRev = int.MaxValue;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,AntiDebugger,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\AntiDebugger.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v14_r57588_safe:  				minRev = 57588;  				maxRev = 60787;  				return true;    			case ConfuserVersion.v16_r61954_safe:  				minRev = 61954;  				maxRev = 73791;  				return true;    			case ConfuserVersion.v17_r73822_safe:  				minRev = 73822;  				maxRev = 73822;  				return true;    			case ConfuserVersion.v17_r74021_safe:  				minRev = 74021;  				maxRev = 76101;  				return true;    			case ConfuserVersion.v19_r76119_safe:  				minRev = 76119;  				maxRev = 78342;  				return true;    			case ConfuserVersion.v19_r78363_safe:  				minRev = 78363;  				maxRev = int.MaxValue;  				return true;    			case ConfuserVersion.v14_r57588_normal:  				minRev = 57588;  				maxRev = 60408;  				return true;    			case ConfuserVersion.v14_r60785_normal:  				minRev = 60785;  				maxRev = 60787;  				return true;    			case ConfuserVersion.v16_r61954_normal:  				minRev = 61954;  				maxRev = 73791;  				return true;    			case ConfuserVersion.v17_r73822_normal:  				minRev = 73822;  				maxRev = 73822;  				return true;    			case ConfuserVersion.v17_r74021_normal:  				minRev = 74021;  				maxRev = 78342;  				return true;    			case ConfuserVersion.v19_r78363_normal:  				minRev = 78363;  				maxRev = int.MaxValue;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,AntiDebugger,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\AntiDebugger.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v14_r57588_safe:  				minRev = 57588;  				maxRev = 60787;  				return true;    			case ConfuserVersion.v16_r61954_safe:  				minRev = 61954;  				maxRev = 73791;  				return true;    			case ConfuserVersion.v17_r73822_safe:  				minRev = 73822;  				maxRev = 73822;  				return true;    			case ConfuserVersion.v17_r74021_safe:  				minRev = 74021;  				maxRev = 76101;  				return true;    			case ConfuserVersion.v19_r76119_safe:  				minRev = 76119;  				maxRev = 78342;  				return true;    			case ConfuserVersion.v19_r78363_safe:  				minRev = 78363;  				maxRev = int.MaxValue;  				return true;    			case ConfuserVersion.v14_r57588_normal:  				minRev = 57588;  				maxRev = 60408;  				return true;    			case ConfuserVersion.v14_r60785_normal:  				minRev = 60785;  				maxRev = 60787;  				return true;    			case ConfuserVersion.v16_r61954_normal:  				minRev = 61954;  				maxRev = 73791;  				return true;    			case ConfuserVersion.v17_r73822_normal:  				minRev = 73822;  				maxRev = 73822;  				return true;    			case ConfuserVersion.v17_r74021_normal:  				minRev = 74021;  				maxRev = 78342;  				return true;    			case ConfuserVersion.v19_r78363_normal:  				minRev = 78363;  				maxRev = int.MaxValue;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,AntiDebugger,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\AntiDebugger.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v14_r57588_safe:  				minRev = 57588;  				maxRev = 60787;  				return true;    			case ConfuserVersion.v16_r61954_safe:  				minRev = 61954;  				maxRev = 73791;  				return true;    			case ConfuserVersion.v17_r73822_safe:  				minRev = 73822;  				maxRev = 73822;  				return true;    			case ConfuserVersion.v17_r74021_safe:  				minRev = 74021;  				maxRev = 76101;  				return true;    			case ConfuserVersion.v19_r76119_safe:  				minRev = 76119;  				maxRev = 78342;  				return true;    			case ConfuserVersion.v19_r78363_safe:  				minRev = 78363;  				maxRev = int.MaxValue;  				return true;    			case ConfuserVersion.v14_r57588_normal:  				minRev = 57588;  				maxRev = 60408;  				return true;    			case ConfuserVersion.v14_r60785_normal:  				minRev = 60785;  				maxRev = 60787;  				return true;    			case ConfuserVersion.v16_r61954_normal:  				minRev = 61954;  				maxRev = 73791;  				return true;    			case ConfuserVersion.v17_r73822_normal:  				minRev = 73822;  				maxRev = 73822;  				return true;    			case ConfuserVersion.v17_r74021_normal:  				minRev = 74021;  				maxRev = 78342;  				return true;    			case ConfuserVersion.v19_r78363_normal:  				minRev = 78363;  				maxRev = int.MaxValue;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,AntiDebugger,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\AntiDebugger.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v14_r57588_safe:  				minRev = 57588;  				maxRev = 60787;  				return true;    			case ConfuserVersion.v16_r61954_safe:  				minRev = 61954;  				maxRev = 73791;  				return true;    			case ConfuserVersion.v17_r73822_safe:  				minRev = 73822;  				maxRev = 73822;  				return true;    			case ConfuserVersion.v17_r74021_safe:  				minRev = 74021;  				maxRev = 76101;  				return true;    			case ConfuserVersion.v19_r76119_safe:  				minRev = 76119;  				maxRev = 78342;  				return true;    			case ConfuserVersion.v19_r78363_safe:  				minRev = 78363;  				maxRev = int.MaxValue;  				return true;    			case ConfuserVersion.v14_r57588_normal:  				minRev = 57588;  				maxRev = 60408;  				return true;    			case ConfuserVersion.v14_r60785_normal:  				minRev = 60785;  				maxRev = 60787;  				return true;    			case ConfuserVersion.v16_r61954_normal:  				minRev = 61954;  				maxRev = 73791;  				return true;    			case ConfuserVersion.v17_r73822_normal:  				minRev = 73822;  				maxRev = 73822;  				return true;    			case ConfuserVersion.v17_r74021_normal:  				minRev = 74021;  				maxRev = 78342;  				return true;    			case ConfuserVersion.v19_r78363_normal:  				minRev = 78363;  				maxRev = int.MaxValue;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,AntiDebugger,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\AntiDebugger.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v14_r57588_safe:  				minRev = 57588;  				maxRev = 60787;  				return true;    			case ConfuserVersion.v16_r61954_safe:  				minRev = 61954;  				maxRev = 73791;  				return true;    			case ConfuserVersion.v17_r73822_safe:  				minRev = 73822;  				maxRev = 73822;  				return true;    			case ConfuserVersion.v17_r74021_safe:  				minRev = 74021;  				maxRev = 76101;  				return true;    			case ConfuserVersion.v19_r76119_safe:  				minRev = 76119;  				maxRev = 78342;  				return true;    			case ConfuserVersion.v19_r78363_safe:  				minRev = 78363;  				maxRev = int.MaxValue;  				return true;    			case ConfuserVersion.v14_r57588_normal:  				minRev = 57588;  				maxRev = 60408;  				return true;    			case ConfuserVersion.v14_r60785_normal:  				minRev = 60785;  				maxRev = 60787;  				return true;    			case ConfuserVersion.v16_r61954_normal:  				minRev = 61954;  				maxRev = 73791;  				return true;    			case ConfuserVersion.v17_r73822_normal:  				minRev = 73822;  				maxRev = 73822;  				return true;    			case ConfuserVersion.v17_r74021_normal:  				minRev = 74021;  				maxRev = 78342;  				return true;    			case ConfuserVersion.v19_r78363_normal:  				minRev = 78363;  				maxRev = int.MaxValue;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,AntiDebugger,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\AntiDebugger.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v14_r57588_safe:  				minRev = 57588;  				maxRev = 60787;  				return true;    			case ConfuserVersion.v16_r61954_safe:  				minRev = 61954;  				maxRev = 73791;  				return true;    			case ConfuserVersion.v17_r73822_safe:  				minRev = 73822;  				maxRev = 73822;  				return true;    			case ConfuserVersion.v17_r74021_safe:  				minRev = 74021;  				maxRev = 76101;  				return true;    			case ConfuserVersion.v19_r76119_safe:  				minRev = 76119;  				maxRev = 78342;  				return true;    			case ConfuserVersion.v19_r78363_safe:  				minRev = 78363;  				maxRev = int.MaxValue;  				return true;    			case ConfuserVersion.v14_r57588_normal:  				minRev = 57588;  				maxRev = 60408;  				return true;    			case ConfuserVersion.v14_r60785_normal:  				minRev = 60785;  				maxRev = 60787;  				return true;    			case ConfuserVersion.v16_r61954_normal:  				minRev = 61954;  				maxRev = 73791;  				return true;    			case ConfuserVersion.v17_r73822_normal:  				minRev = 73822;  				maxRev = 73822;  				return true;    			case ConfuserVersion.v17_r74021_normal:  				minRev = 74021;  				maxRev = 78342;  				return true;    			case ConfuserVersion.v19_r78363_normal:  				minRev = 78363;  				maxRev = int.MaxValue;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,AntiDebugger,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\AntiDebugger.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v14_r57588_safe:  				minRev = 57588;  				maxRev = 60787;  				return true;    			case ConfuserVersion.v16_r61954_safe:  				minRev = 61954;  				maxRev = 73791;  				return true;    			case ConfuserVersion.v17_r73822_safe:  				minRev = 73822;  				maxRev = 73822;  				return true;    			case ConfuserVersion.v17_r74021_safe:  				minRev = 74021;  				maxRev = 76101;  				return true;    			case ConfuserVersion.v19_r76119_safe:  				minRev = 76119;  				maxRev = 78342;  				return true;    			case ConfuserVersion.v19_r78363_safe:  				minRev = 78363;  				maxRev = int.MaxValue;  				return true;    			case ConfuserVersion.v14_r57588_normal:  				minRev = 57588;  				maxRev = 60408;  				return true;    			case ConfuserVersion.v14_r60785_normal:  				minRev = 60785;  				maxRev = 60787;  				return true;    			case ConfuserVersion.v16_r61954_normal:  				minRev = 61954;  				maxRev = 73791;  				return true;    			case ConfuserVersion.v17_r73822_normal:  				minRev = 73822;  				maxRev = 73822;  				return true;    			case ConfuserVersion.v17_r74021_normal:  				minRev = 74021;  				maxRev = 78342;  				return true;    			case ConfuserVersion.v19_r78363_normal:  				minRev = 78363;  				maxRev = int.MaxValue;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,AntiDebugger,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\AntiDebugger.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v14_r57588_safe:  				minRev = 57588;  				maxRev = 60787;  				return true;    			case ConfuserVersion.v16_r61954_safe:  				minRev = 61954;  				maxRev = 73791;  				return true;    			case ConfuserVersion.v17_r73822_safe:  				minRev = 73822;  				maxRev = 73822;  				return true;    			case ConfuserVersion.v17_r74021_safe:  				minRev = 74021;  				maxRev = 76101;  				return true;    			case ConfuserVersion.v19_r76119_safe:  				minRev = 76119;  				maxRev = 78342;  				return true;    			case ConfuserVersion.v19_r78363_safe:  				minRev = 78363;  				maxRev = int.MaxValue;  				return true;    			case ConfuserVersion.v14_r57588_normal:  				minRev = 57588;  				maxRev = 60408;  				return true;    			case ConfuserVersion.v14_r60785_normal:  				minRev = 60785;  				maxRev = 60787;  				return true;    			case ConfuserVersion.v16_r61954_normal:  				minRev = 61954;  				maxRev = 73791;  				return true;    			case ConfuserVersion.v17_r73822_normal:  				minRev = 73822;  				maxRev = 73822;  				return true;    			case ConfuserVersion.v17_r74021_normal:  				minRev = 74021;  				maxRev = 78342;  				return true;    			case ConfuserVersion.v19_r78363_normal:  				minRev = 78363;  				maxRev = int.MaxValue;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,AntiDebugger,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\AntiDebugger.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v14_r57588_safe:  				minRev = 57588;  				maxRev = 60787;  				return true;    			case ConfuserVersion.v16_r61954_safe:  				minRev = 61954;  				maxRev = 73791;  				return true;    			case ConfuserVersion.v17_r73822_safe:  				minRev = 73822;  				maxRev = 73822;  				return true;    			case ConfuserVersion.v17_r74021_safe:  				minRev = 74021;  				maxRev = 76101;  				return true;    			case ConfuserVersion.v19_r76119_safe:  				minRev = 76119;  				maxRev = 78342;  				return true;    			case ConfuserVersion.v19_r78363_safe:  				minRev = 78363;  				maxRev = int.MaxValue;  				return true;    			case ConfuserVersion.v14_r57588_normal:  				minRev = 57588;  				maxRev = 60408;  				return true;    			case ConfuserVersion.v14_r60785_normal:  				minRev = 60785;  				maxRev = 60787;  				return true;    			case ConfuserVersion.v16_r61954_normal:  				minRev = 61954;  				maxRev = 73791;  				return true;    			case ConfuserVersion.v17_r73822_normal:  				minRev = 73822;  				maxRev = 73822;  				return true;    			case ConfuserVersion.v17_r74021_normal:  				minRev = 74021;  				maxRev = 78342;  				return true;    			case ConfuserVersion.v19_r78363_normal:  				minRev = 78363;  				maxRev = int.MaxValue;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,AntiDumping,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\AntiDumping.cs,CheckType_v14_r58564,The following statement contains a magic number: ConfuserUtils.CountCalls(initMethod' virtualProtect) != 3
Magic Number,de4dot.code.deobfuscators.Confuser,AntiDumping,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\AntiDumping.cs,CheckType_v14_r58564,The following statement contains a magic number: !DeobUtils.HasInteger(initMethod' 224)
Magic Number,de4dot.code.deobfuscators.Confuser,AntiDumping,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\AntiDumping.cs,CheckType_v14_r58564,The following statement contains a magic number: !DeobUtils.HasInteger(initMethod' 240)
Magic Number,de4dot.code.deobfuscators.Confuser,AntiDumping,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\AntiDumping.cs,CheckType_v14_r58564,The following statement contains a magic number: !DeobUtils.HasInteger(initMethod' 267)
Magic Number,de4dot.code.deobfuscators.Confuser,AntiDumping,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\AntiDumping.cs,CheckType_v14_r58852,The following statement contains a magic number: virtualProtectCalls != 14 && virtualProtectCalls != 16
Magic Number,de4dot.code.deobfuscators.Confuser,AntiDumping,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\AntiDumping.cs,CheckType_v14_r58852,The following statement contains a magic number: virtualProtectCalls != 14 && virtualProtectCalls != 16
Magic Number,de4dot.code.deobfuscators.Confuser,AntiDumping,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\AntiDumping.cs,IsRev75725,The following statement contains a magic number: !instrs[i].IsLdcI4() || instrs[i].GetLdcI4Value() != 8
Magic Number,de4dot.code.deobfuscators.Confuser,AntiDumping,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\AntiDumping.cs,IsRev75725,The following statement contains a magic number: !instrs[i + 1].IsLdcI4() || instrs[i + 1].GetLdcI4Value() != 64
Magic Number,de4dot.code.deobfuscators.Confuser,AntiDumping,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\AntiDumping.cs,IsRev75725,The following statement contains a magic number: instrs[i + 2].OpCode.Code != Code.Ldloca && instrs[i + 2].OpCode.Code != Code.Ldloca_S
Magic Number,de4dot.code.deobfuscators.Confuser,AntiDumping,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\AntiDumping.cs,IsRev75725,The following statement contains a magic number: instrs[i + 2].OpCode.Code != Code.Ldloca && instrs[i + 2].OpCode.Code != Code.Ldloca_S
Magic Number,de4dot.code.deobfuscators.Confuser,AntiDumping,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\AntiDumping.cs,IsRev75725,The following statement contains a magic number: var call = instrs[i + 3];
Magic Number,de4dot.code.deobfuscators.Confuser,AntiDumping,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\AntiDumping.cs,IsRev75725,The following statement contains a magic number: instrs[i + 4].OpCode.Code != Code.Pop
Magic Number,de4dot.code.deobfuscators.Confuser,AntiDumping,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\AntiDumping.cs,IsRev75725,The following statement contains a magic number: var ldloc = instrs[i + 5];
Magic Number,de4dot.code.deobfuscators.Confuser,AntiDumping,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\AntiDumping.cs,IsRev75725,The following statement contains a magic number: !instrs[i + 6].IsLdcI4() || instrs[i + 6].GetLdcI4Value() != 0
Magic Number,de4dot.code.deobfuscators.Confuser,AntiDumping,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\AntiDumping.cs,IsRev75725,The following statement contains a magic number: !instrs[i + 6].IsLdcI4() || instrs[i + 6].GetLdcI4Value() != 0
Magic Number,de4dot.code.deobfuscators.Confuser,AntiDumping,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\AntiDumping.cs,IsRev75725,The following statement contains a magic number: instrs[i + 7].OpCode.Code != Code.Stind_I4
Magic Number,de4dot.code.deobfuscators.Confuser,AntiDumping,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\AntiDumping.cs,IsRev75725,The following statement contains a magic number: ldloc = instrs[i + 8];
Magic Number,de4dot.code.deobfuscators.Confuser,AntiDumping,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\AntiDumping.cs,IsRev75725,The following statement contains a magic number: !instrs[i + 9].IsLdcI4() || instrs[i + 9].GetLdcI4Value() != 4
Magic Number,de4dot.code.deobfuscators.Confuser,AntiDumping,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\AntiDumping.cs,IsRev75725,The following statement contains a magic number: !instrs[i + 9].IsLdcI4() || instrs[i + 9].GetLdcI4Value() != 4
Magic Number,de4dot.code.deobfuscators.Confuser,AntiDumping,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\AntiDumping.cs,IsRev75725,The following statement contains a magic number: !instrs[i + 9].IsLdcI4() || instrs[i + 9].GetLdcI4Value() != 4
Magic Number,de4dot.code.deobfuscators.Confuser,AntiDumping,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\AntiDumping.cs,IsRev75725,The following statement contains a magic number: i < instrs.Count - 9
Magic Number,de4dot.code.deobfuscators.Confuser,AntiDumping,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\AntiDumping.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v14_r58564:  				minRev = 58564;  				maxRev = 58817;  				return true;    			case ConfuserVersion.v14_r58852:  				minRev = 58852;  				maxRev = 67058;  				return true;    			case ConfuserVersion.v16_r69339:  				minRev = 69339;  				maxRev = 74637;  				return true;    			case ConfuserVersion.v17_r74708:  				minRev = 74708;  				maxRev = 75184;  				return true;    			case ConfuserVersion.v18_r75257:  				minRev = 75257;  				maxRev = 75720;  				return true;    			case ConfuserVersion.v19_r75725:  				minRev = 75725;  				maxRev = 76163;  				return true;    			case ConfuserVersion.v19_r76186:  				minRev = 76186;  				maxRev = int.MaxValue;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,AntiDumping,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\AntiDumping.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v14_r58564:  				minRev = 58564;  				maxRev = 58817;  				return true;    			case ConfuserVersion.v14_r58852:  				minRev = 58852;  				maxRev = 67058;  				return true;    			case ConfuserVersion.v16_r69339:  				minRev = 69339;  				maxRev = 74637;  				return true;    			case ConfuserVersion.v17_r74708:  				minRev = 74708;  				maxRev = 75184;  				return true;    			case ConfuserVersion.v18_r75257:  				minRev = 75257;  				maxRev = 75720;  				return true;    			case ConfuserVersion.v19_r75725:  				minRev = 75725;  				maxRev = 76163;  				return true;    			case ConfuserVersion.v19_r76186:  				minRev = 76186;  				maxRev = int.MaxValue;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,AntiDumping,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\AntiDumping.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v14_r58564:  				minRev = 58564;  				maxRev = 58817;  				return true;    			case ConfuserVersion.v14_r58852:  				minRev = 58852;  				maxRev = 67058;  				return true;    			case ConfuserVersion.v16_r69339:  				minRev = 69339;  				maxRev = 74637;  				return true;    			case ConfuserVersion.v17_r74708:  				minRev = 74708;  				maxRev = 75184;  				return true;    			case ConfuserVersion.v18_r75257:  				minRev = 75257;  				maxRev = 75720;  				return true;    			case ConfuserVersion.v19_r75725:  				minRev = 75725;  				maxRev = 76163;  				return true;    			case ConfuserVersion.v19_r76186:  				minRev = 76186;  				maxRev = int.MaxValue;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,AntiDumping,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\AntiDumping.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v14_r58564:  				minRev = 58564;  				maxRev = 58817;  				return true;    			case ConfuserVersion.v14_r58852:  				minRev = 58852;  				maxRev = 67058;  				return true;    			case ConfuserVersion.v16_r69339:  				minRev = 69339;  				maxRev = 74637;  				return true;    			case ConfuserVersion.v17_r74708:  				minRev = 74708;  				maxRev = 75184;  				return true;    			case ConfuserVersion.v18_r75257:  				minRev = 75257;  				maxRev = 75720;  				return true;    			case ConfuserVersion.v19_r75725:  				minRev = 75725;  				maxRev = 76163;  				return true;    			case ConfuserVersion.v19_r76186:  				minRev = 76186;  				maxRev = int.MaxValue;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,AntiDumping,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\AntiDumping.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v14_r58564:  				minRev = 58564;  				maxRev = 58817;  				return true;    			case ConfuserVersion.v14_r58852:  				minRev = 58852;  				maxRev = 67058;  				return true;    			case ConfuserVersion.v16_r69339:  				minRev = 69339;  				maxRev = 74637;  				return true;    			case ConfuserVersion.v17_r74708:  				minRev = 74708;  				maxRev = 75184;  				return true;    			case ConfuserVersion.v18_r75257:  				minRev = 75257;  				maxRev = 75720;  				return true;    			case ConfuserVersion.v19_r75725:  				minRev = 75725;  				maxRev = 76163;  				return true;    			case ConfuserVersion.v19_r76186:  				minRev = 76186;  				maxRev = int.MaxValue;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,AntiDumping,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\AntiDumping.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v14_r58564:  				minRev = 58564;  				maxRev = 58817;  				return true;    			case ConfuserVersion.v14_r58852:  				minRev = 58852;  				maxRev = 67058;  				return true;    			case ConfuserVersion.v16_r69339:  				minRev = 69339;  				maxRev = 74637;  				return true;    			case ConfuserVersion.v17_r74708:  				minRev = 74708;  				maxRev = 75184;  				return true;    			case ConfuserVersion.v18_r75257:  				minRev = 75257;  				maxRev = 75720;  				return true;    			case ConfuserVersion.v19_r75725:  				minRev = 75725;  				maxRev = 76163;  				return true;    			case ConfuserVersion.v19_r76186:  				minRev = 76186;  				maxRev = int.MaxValue;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,AntiDumping,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\AntiDumping.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v14_r58564:  				minRev = 58564;  				maxRev = 58817;  				return true;    			case ConfuserVersion.v14_r58852:  				minRev = 58852;  				maxRev = 67058;  				return true;    			case ConfuserVersion.v16_r69339:  				minRev = 69339;  				maxRev = 74637;  				return true;    			case ConfuserVersion.v17_r74708:  				minRev = 74708;  				maxRev = 75184;  				return true;    			case ConfuserVersion.v18_r75257:  				minRev = 75257;  				maxRev = 75720;  				return true;    			case ConfuserVersion.v19_r75725:  				minRev = 75725;  				maxRev = 76163;  				return true;    			case ConfuserVersion.v19_r76186:  				minRev = 76186;  				maxRev = int.MaxValue;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,AntiDumping,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\AntiDumping.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v14_r58564:  				minRev = 58564;  				maxRev = 58817;  				return true;    			case ConfuserVersion.v14_r58852:  				minRev = 58852;  				maxRev = 67058;  				return true;    			case ConfuserVersion.v16_r69339:  				minRev = 69339;  				maxRev = 74637;  				return true;    			case ConfuserVersion.v17_r74708:  				minRev = 74708;  				maxRev = 75184;  				return true;    			case ConfuserVersion.v18_r75257:  				minRev = 75257;  				maxRev = 75720;  				return true;    			case ConfuserVersion.v19_r75725:  				minRev = 75725;  				maxRev = 76163;  				return true;    			case ConfuserVersion.v19_r76186:  				minRev = 76186;  				maxRev = int.MaxValue;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,AntiDumping,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\AntiDumping.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v14_r58564:  				minRev = 58564;  				maxRev = 58817;  				return true;    			case ConfuserVersion.v14_r58852:  				minRev = 58852;  				maxRev = 67058;  				return true;    			case ConfuserVersion.v16_r69339:  				minRev = 69339;  				maxRev = 74637;  				return true;    			case ConfuserVersion.v17_r74708:  				minRev = 74708;  				maxRev = 75184;  				return true;    			case ConfuserVersion.v18_r75257:  				minRev = 75257;  				maxRev = 75720;  				return true;    			case ConfuserVersion.v19_r75725:  				minRev = 75725;  				maxRev = 76163;  				return true;    			case ConfuserVersion.v19_r76186:  				minRev = 76186;  				maxRev = int.MaxValue;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,AntiDumping,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\AntiDumping.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v14_r58564:  				minRev = 58564;  				maxRev = 58817;  				return true;    			case ConfuserVersion.v14_r58852:  				minRev = 58852;  				maxRev = 67058;  				return true;    			case ConfuserVersion.v16_r69339:  				minRev = 69339;  				maxRev = 74637;  				return true;    			case ConfuserVersion.v17_r74708:  				minRev = 74708;  				maxRev = 75184;  				return true;    			case ConfuserVersion.v18_r75257:  				minRev = 75257;  				maxRev = 75720;  				return true;    			case ConfuserVersion.v19_r75725:  				minRev = 75725;  				maxRev = 76163;  				return true;    			case ConfuserVersion.v19_r76186:  				minRev = 76186;  				maxRev = int.MaxValue;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,AntiDumping,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\AntiDumping.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v14_r58564:  				minRev = 58564;  				maxRev = 58817;  				return true;    			case ConfuserVersion.v14_r58852:  				minRev = 58852;  				maxRev = 67058;  				return true;    			case ConfuserVersion.v16_r69339:  				minRev = 69339;  				maxRev = 74637;  				return true;    			case ConfuserVersion.v17_r74708:  				minRev = 74708;  				maxRev = 75184;  				return true;    			case ConfuserVersion.v18_r75257:  				minRev = 75257;  				maxRev = 75720;  				return true;    			case ConfuserVersion.v19_r75725:  				minRev = 75725;  				maxRev = 76163;  				return true;    			case ConfuserVersion.v19_r76186:  				minRev = 76186;  				maxRev = int.MaxValue;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,AntiDumping,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\AntiDumping.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v14_r58564:  				minRev = 58564;  				maxRev = 58817;  				return true;    			case ConfuserVersion.v14_r58852:  				minRev = 58852;  				maxRev = 67058;  				return true;    			case ConfuserVersion.v16_r69339:  				minRev = 69339;  				maxRev = 74637;  				return true;    			case ConfuserVersion.v17_r74708:  				minRev = 74708;  				maxRev = 75184;  				return true;    			case ConfuserVersion.v18_r75257:  				minRev = 75257;  				maxRev = 75720;  				return true;    			case ConfuserVersion.v19_r75725:  				minRev = 75725;  				maxRev = 76163;  				return true;    			case ConfuserVersion.v19_r76186:  				minRev = 76186;  				maxRev = int.MaxValue;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,AntiDumping,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\AntiDumping.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v14_r58564:  				minRev = 58564;  				maxRev = 58817;  				return true;    			case ConfuserVersion.v14_r58852:  				minRev = 58852;  				maxRev = 67058;  				return true;    			case ConfuserVersion.v16_r69339:  				minRev = 69339;  				maxRev = 74637;  				return true;    			case ConfuserVersion.v17_r74708:  				minRev = 74708;  				maxRev = 75184;  				return true;    			case ConfuserVersion.v18_r75257:  				minRev = 75257;  				maxRev = 75720;  				return true;    			case ConfuserVersion.v19_r75725:  				minRev = 75725;  				maxRev = 76163;  				return true;    			case ConfuserVersion.v19_r76186:  				minRev = 76186;  				maxRev = int.MaxValue;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,ConfuserUtils,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConfuserUtils.cs,RemoveResolveHandlerCode,The following statement contains a magic number: var ldftn = instrs[i + 2];
Magic Number,de4dot.code.deobfuscators.Confuser,ConfuserUtils,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConfuserUtils.cs,RemoveResolveHandlerCode,The following statement contains a magic number: var newobj = instrs[i + 3];
Magic Number,de4dot.code.deobfuscators.Confuser,ConfuserUtils,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConfuserUtils.cs,RemoveResolveHandlerCode,The following statement contains a magic number: var callvirt = instrs[i + 4];
Magic Number,de4dot.code.deobfuscators.Confuser,ConfuserUtils,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConfuserUtils.cs,RemoveResolveHandlerCode,The following statement contains a magic number: block.Remove(i' 5);
Magic Number,de4dot.code.deobfuscators.Confuser,ConfuserUtils,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConfuserUtils.cs,RemoveResolveHandlerCode,The following statement contains a magic number: i < instrs.Count - 4
Magic Number,de4dot.code.deobfuscators.Confuser,ConfuserUtils,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConfuserUtils.cs,Decrypt,The following statement contains a magic number: ushort _m = (ushort)(seed >> 16);
Magic Number,de4dot.code.deobfuscators.Confuser,ConfuserUtils,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConfuserUtils.cs,SevenZipDecompress,The following statement contains a magic number: var props = reader.ReadBytes(5);
Magic Number,de4dot.code.deobfuscators.Confuser,ConfuserUtils,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConfuserUtils.cs,SevenZipDecompress,The following statement contains a magic number: long compressedSize = data.Length - props.Length - 8;
Magic Number,de4dot.code.deobfuscators.Confuser,ConfuserUtils,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConfuserUtils.cs,IsLzmaType,The following statement contains a magic number: type.NestedTypes.Count != 6
Magic Number,de4dot.code.deobfuscators.Confuser,ConstantsDecrypterBase,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsDecrypterBase.cs,GetDynamicLocal_v17_r73740,The following statement contains a magic number: i < 0 || i + 5 >= instrs.Count
Magic Number,de4dot.code.deobfuscators.Confuser,ConstantsDecrypterBase,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsDecrypterBase.cs,GetDynamicLocal_v17_r73740,The following statement contains a magic number: var ldloc = instrs[i + 2];
Magic Number,de4dot.code.deobfuscators.Confuser,ConstantsDecrypterBase,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsDecrypterBase.cs,GetDynamicLocal_v17_r73740,The following statement contains a magic number: !instrs[i + 3].IsLdloc()
Magic Number,de4dot.code.deobfuscators.Confuser,ConstantsDecrypterBase,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsDecrypterBase.cs,GetDynamicLocal_v17_r73740,The following statement contains a magic number: var ldci4 = instrs[i + 4];
Magic Number,de4dot.code.deobfuscators.Confuser,ConstantsDecrypterBase,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsDecrypterBase.cs,GetDynamicLocal_v17_r73740,The following statement contains a magic number: instrs[i + 5].OpCode.Code != Code.And
Magic Number,de4dot.code.deobfuscators.Confuser,ConstantsDecrypterBase,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsDecrypterBase.cs,GetDynamicEndIndex_v17_r73740,The following statement contains a magic number: i + 7 >= instrs.Count
Magic Number,de4dot.code.deobfuscators.Confuser,ConstantsDecrypterBase,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsDecrypterBase.cs,GetDynamicEndIndex_v17_r73740,The following statement contains a magic number: i < instrs.Count - 5
Magic Number,de4dot.code.deobfuscators.Confuser,ConstantsDecrypterBase,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsDecrypterBase.cs,GetDynamicEndIndex_v17_r74788,The following statement contains a magic number: !instrs[i + 2].IsLdloc()
Magic Number,de4dot.code.deobfuscators.Confuser,ConstantsDecrypterBase,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsDecrypterBase.cs,GetDynamicEndIndex_v17_r74788,The following statement contains a magic number: !instrs[i + 3].IsLdloc()
Magic Number,de4dot.code.deobfuscators.Confuser,ConstantsDecrypterBase,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsDecrypterBase.cs,GetDynamicEndIndex_v17_r74788,The following statement contains a magic number: !instrs[i + 4].IsLdloc()
Magic Number,de4dot.code.deobfuscators.Confuser,ConstantsDecrypterBase,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsDecrypterBase.cs,GetDynamicEndIndex_v17_r74788,The following statement contains a magic number: !instrs[i + 5].IsLdloc()
Magic Number,de4dot.code.deobfuscators.Confuser,ConstantsDecrypterBase,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsDecrypterBase.cs,GetDynamicEndIndex_v17_r74788,The following statement contains a magic number: var ldci4 = instrs[i + 6];
Magic Number,de4dot.code.deobfuscators.Confuser,ConstantsDecrypterBase,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsDecrypterBase.cs,GetDynamicEndIndex_v17_r74788,The following statement contains a magic number: !ldci4.IsLdcI4() || (ldci4.GetLdcI4Value() != 8 && ldci4.GetLdcI4Value() != 16)
Magic Number,de4dot.code.deobfuscators.Confuser,ConstantsDecrypterBase,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsDecrypterBase.cs,GetDynamicEndIndex_v17_r74788,The following statement contains a magic number: !ldci4.IsLdcI4() || (ldci4.GetLdcI4Value() != 8 && ldci4.GetLdcI4Value() != 16)
Magic Number,de4dot.code.deobfuscators.Confuser,ConstantsDecrypterBase,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsDecrypterBase.cs,GetDynamicEndIndex_v17_r74788,The following statement contains a magic number: instrs[i + 7].OpCode.Code != Code.Rem
Magic Number,de4dot.code.deobfuscators.Confuser,ConstantsDecrypterBase,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsDecrypterBase.cs,GetDynamicEndIndex_v17_r74788,The following statement contains a magic number: instrs[i + 8].OpCode.Code != Code.Ldelem_U1
Magic Number,de4dot.code.deobfuscators.Confuser,ConstantsDecrypterBase,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsDecrypterBase.cs,GetDynamicEndIndex_v17_r74788,The following statement contains a magic number: instrs[i + 9].OpCode.Code != Code.Xor
Magic Number,de4dot.code.deobfuscators.Confuser,ConstantsDecrypterBase,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsDecrypterBase.cs,GetDynamicEndIndex_v17_r74788,The following statement contains a magic number: instrs[i + 10].OpCode.Code != Code.Conv_U1
Magic Number,de4dot.code.deobfuscators.Confuser,ConstantsDecrypterBase,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsDecrypterBase.cs,GetDynamicEndIndex_v17_r74788,The following statement contains a magic number: instrs[i + 11].OpCode.Code != Code.Stelem_I1
Magic Number,de4dot.code.deobfuscators.Confuser,ConstantsDecrypterBase,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsDecrypterBase.cs,GetDynamicEndIndex_v17_r74788,The following statement contains a magic number: i < instrs.Count - 11
Magic Number,de4dot.code.deobfuscators.Confuser,ConstantsDecrypterBase,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsDecrypterBase.cs,DecryptInt32,The following statement contains a magic number: data.Length != 4
Magic Number,de4dot.code.deobfuscators.Confuser,ConstantsDecrypterBase,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsDecrypterBase.cs,DecryptInt64,The following statement contains a magic number: data.Length != 8
Magic Number,de4dot.code.deobfuscators.Confuser,ConstantsDecrypterBase,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsDecrypterBase.cs,DecryptSingle,The following statement contains a magic number: data.Length != 4
Magic Number,de4dot.code.deobfuscators.Confuser,ConstantsDecrypterBase,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsDecrypterBase.cs,DecryptDouble,The following statement contains a magic number: data.Length != 8
Magic Number,de4dot.code.deobfuscators.Confuser,DecrypterInfo,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsDecrypterBase.cs,FindKey0,The following statement contains a magic number: var ldci4 = instrs[i + 2];
Magic Number,de4dot.code.deobfuscators.Confuser,DecrypterInfo,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsDecrypterBase.cs,FindKey0,The following statement contains a magic number: instrs[i + 3].OpCode.Code != Code.Xor
Magic Number,de4dot.code.deobfuscators.Confuser,DecrypterInfo,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsDecrypterBase.cs,FindKey0,The following statement contains a magic number: instrs[i + 4].OpCode.Code != Code.Add
Magic Number,de4dot.code.deobfuscators.Confuser,DecrypterInfo,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsDecrypterBase.cs,FindKey0,The following statement contains a magic number: !instrs[i + 5].IsStloc()
Magic Number,de4dot.code.deobfuscators.Confuser,DecrypterInfo,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsDecrypterBase.cs,FindKey0,The following statement contains a magic number: i < instrs.Count - 5
Magic Number,de4dot.code.deobfuscators.Confuser,DecrypterInfo,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsDecrypterBase.cs,FindKey1,The following statement contains a magic number: index + 2 > instrs.Count
Magic Number,de4dot.code.deobfuscators.Confuser,DecrypterInfo,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsDecrypterBase.cs,FindKey1,The following statement contains a magic number: var ldci4 = instrs[index + 2];
Magic Number,de4dot.code.deobfuscators.Confuser,DecrypterInfo,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsDecrypterBase.cs,FindKey2Key3,The following statement contains a magic number: var ldci4_2 = instrs[i + 2];
Magic Number,de4dot.code.deobfuscators.Confuser,DecrypterInfo,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsDecrypterBase.cs,FindKey2Key3,The following statement contains a magic number: !instrs[i + 3].IsStloc()
Magic Number,de4dot.code.deobfuscators.Confuser,DecrypterInfo,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsDecrypterBase.cs,FindKey2Key3,The following statement contains a magic number: i < instrs.Count - 3
Magic Number,de4dot.code.deobfuscators.Confuser,DecrypterInfo,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsDecrypterBase.cs,FindTypeCode,The following statement contains a magic number: numCeq != 0 && numCeq != 2
Magic Number,de4dot.code.deobfuscators.Confuser,DecrypterInfo,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsDecrypterBase.cs,CalcHash,The following statement contains a magic number: h0 = (h0 << 8) | (h0 >> 24);
Magic Number,de4dot.code.deobfuscators.Confuser,DecrypterInfo,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsDecrypterBase.cs,CalcHash,The following statement contains a magic number: h0 = (h0 << 8) | (h0 >> 24);
Magic Number,de4dot.code.deobfuscators.Confuser,DecrypterInfo,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsDecrypterBase.cs,CalcHash,The following statement contains a magic number: h1 |= ((byte)(h0 >> 8) & (h0 >> 16)) ^ (byte)~h0;
Magic Number,de4dot.code.deobfuscators.Confuser,DecrypterInfo,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsDecrypterBase.cs,CalcHash,The following statement contains a magic number: h1 |= ((byte)(h0 >> 8) & (h0 >> 16)) ^ (byte)~h0;
Magic Number,de4dot.code.deobfuscators.Confuser,DecrypterInfo,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsDecrypterBase.cs,CalcHash,The following statement contains a magic number: n >= 0 && n < 16
Magic Number,de4dot.code.deobfuscators.Confuser,DecrypterInfo,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsDecrypterBase.cs,CalcHash,The following statement contains a magic number: i <= 64
Magic Number,de4dot.code.deobfuscators.Confuser,DecrypterInfo,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsDecrypterBase.cs,Decrypt,The following statement contains a magic number: int offset = (int)(info >> 32);
Magic Number,de4dot.code.deobfuscators.Confuser,DecrypterInfo,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsDecrypterBase.cs,Decrypt,The following statement contains a magic number: decrypted[i] = (byte)(constantsDecrypter.constants[offset + i] ^ key[(offset + i) & 3]);
Magic Number,de4dot.code.deobfuscators.Confuser,DecrypterInfo,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsDecrypterBase.cs,Hash1,The following statement contains a magic number: ulong hash = 14695981039346656037UL;
Magic Number,de4dot.code.deobfuscators.Confuser,DecrypterInfo,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsDecrypterBase.cs,Hash1,The following statement contains a magic number: hash *= 1099511628211UL;
Magic Number,de4dot.code.deobfuscators.Confuser,DecrypterInfo,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsDecrypterBase.cs,Hash1,The following statement contains a magic number: h0 >>= 8;
Magic Number,de4dot.code.deobfuscators.Confuser,ConstantsDecrypterV15,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsDecrypterV15.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v15_r60785_normal:  				minRev = 60785;  				maxRev = 72989;  				return true;    			case ConfuserVersion.v17_r73404_normal:  				minRev = 73404;  				maxRev = 73791;  				return true;    			case ConfuserVersion.v17_r73822_normal:  				minRev = 73822;  				maxRev = 74637;  				return true;    			case ConfuserVersion.v15_r60785_dynamic:  				minRev = 60785;  				maxRev = 72868;  				return true;    			case ConfuserVersion.v17_r72989_dynamic:  				minRev = 72989;  				maxRev = 73605;  				return true;    			case ConfuserVersion.v17_r73740_dynamic:  				minRev = 73740;  				maxRev = 73740;  				return true;    			case ConfuserVersion.v17_r73764_dynamic:  			case ConfuserVersion.v17_r73764_native:  				minRev = 73764;  				maxRev = 73791;  				return true;    			case ConfuserVersion.v17_r73822_dynamic:  			case ConfuserVersion.v17_r73822_native:  				minRev = 73822;  				maxRev = 73822;  				return true;    			case ConfuserVersion.v17_r74021_dynamic:  			case ConfuserVersion.v17_r74021_native:  				minRev = 74021;  				maxRev = 74637;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,ConstantsDecrypterV15,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsDecrypterV15.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v15_r60785_normal:  				minRev = 60785;  				maxRev = 72989;  				return true;    			case ConfuserVersion.v17_r73404_normal:  				minRev = 73404;  				maxRev = 73791;  				return true;    			case ConfuserVersion.v17_r73822_normal:  				minRev = 73822;  				maxRev = 74637;  				return true;    			case ConfuserVersion.v15_r60785_dynamic:  				minRev = 60785;  				maxRev = 72868;  				return true;    			case ConfuserVersion.v17_r72989_dynamic:  				minRev = 72989;  				maxRev = 73605;  				return true;    			case ConfuserVersion.v17_r73740_dynamic:  				minRev = 73740;  				maxRev = 73740;  				return true;    			case ConfuserVersion.v17_r73764_dynamic:  			case ConfuserVersion.v17_r73764_native:  				minRev = 73764;  				maxRev = 73791;  				return true;    			case ConfuserVersion.v17_r73822_dynamic:  			case ConfuserVersion.v17_r73822_native:  				minRev = 73822;  				maxRev = 73822;  				return true;    			case ConfuserVersion.v17_r74021_dynamic:  			case ConfuserVersion.v17_r74021_native:  				minRev = 74021;  				maxRev = 74637;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,ConstantsDecrypterV15,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsDecrypterV15.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v15_r60785_normal:  				minRev = 60785;  				maxRev = 72989;  				return true;    			case ConfuserVersion.v17_r73404_normal:  				minRev = 73404;  				maxRev = 73791;  				return true;    			case ConfuserVersion.v17_r73822_normal:  				minRev = 73822;  				maxRev = 74637;  				return true;    			case ConfuserVersion.v15_r60785_dynamic:  				minRev = 60785;  				maxRev = 72868;  				return true;    			case ConfuserVersion.v17_r72989_dynamic:  				minRev = 72989;  				maxRev = 73605;  				return true;    			case ConfuserVersion.v17_r73740_dynamic:  				minRev = 73740;  				maxRev = 73740;  				return true;    			case ConfuserVersion.v17_r73764_dynamic:  			case ConfuserVersion.v17_r73764_native:  				minRev = 73764;  				maxRev = 73791;  				return true;    			case ConfuserVersion.v17_r73822_dynamic:  			case ConfuserVersion.v17_r73822_native:  				minRev = 73822;  				maxRev = 73822;  				return true;    			case ConfuserVersion.v17_r74021_dynamic:  			case ConfuserVersion.v17_r74021_native:  				minRev = 74021;  				maxRev = 74637;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,ConstantsDecrypterV15,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsDecrypterV15.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v15_r60785_normal:  				minRev = 60785;  				maxRev = 72989;  				return true;    			case ConfuserVersion.v17_r73404_normal:  				minRev = 73404;  				maxRev = 73791;  				return true;    			case ConfuserVersion.v17_r73822_normal:  				minRev = 73822;  				maxRev = 74637;  				return true;    			case ConfuserVersion.v15_r60785_dynamic:  				minRev = 60785;  				maxRev = 72868;  				return true;    			case ConfuserVersion.v17_r72989_dynamic:  				minRev = 72989;  				maxRev = 73605;  				return true;    			case ConfuserVersion.v17_r73740_dynamic:  				minRev = 73740;  				maxRev = 73740;  				return true;    			case ConfuserVersion.v17_r73764_dynamic:  			case ConfuserVersion.v17_r73764_native:  				minRev = 73764;  				maxRev = 73791;  				return true;    			case ConfuserVersion.v17_r73822_dynamic:  			case ConfuserVersion.v17_r73822_native:  				minRev = 73822;  				maxRev = 73822;  				return true;    			case ConfuserVersion.v17_r74021_dynamic:  			case ConfuserVersion.v17_r74021_native:  				minRev = 74021;  				maxRev = 74637;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,ConstantsDecrypterV15,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsDecrypterV15.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v15_r60785_normal:  				minRev = 60785;  				maxRev = 72989;  				return true;    			case ConfuserVersion.v17_r73404_normal:  				minRev = 73404;  				maxRev = 73791;  				return true;    			case ConfuserVersion.v17_r73822_normal:  				minRev = 73822;  				maxRev = 74637;  				return true;    			case ConfuserVersion.v15_r60785_dynamic:  				minRev = 60785;  				maxRev = 72868;  				return true;    			case ConfuserVersion.v17_r72989_dynamic:  				minRev = 72989;  				maxRev = 73605;  				return true;    			case ConfuserVersion.v17_r73740_dynamic:  				minRev = 73740;  				maxRev = 73740;  				return true;    			case ConfuserVersion.v17_r73764_dynamic:  			case ConfuserVersion.v17_r73764_native:  				minRev = 73764;  				maxRev = 73791;  				return true;    			case ConfuserVersion.v17_r73822_dynamic:  			case ConfuserVersion.v17_r73822_native:  				minRev = 73822;  				maxRev = 73822;  				return true;    			case ConfuserVersion.v17_r74021_dynamic:  			case ConfuserVersion.v17_r74021_native:  				minRev = 74021;  				maxRev = 74637;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,ConstantsDecrypterV15,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsDecrypterV15.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v15_r60785_normal:  				minRev = 60785;  				maxRev = 72989;  				return true;    			case ConfuserVersion.v17_r73404_normal:  				minRev = 73404;  				maxRev = 73791;  				return true;    			case ConfuserVersion.v17_r73822_normal:  				minRev = 73822;  				maxRev = 74637;  				return true;    			case ConfuserVersion.v15_r60785_dynamic:  				minRev = 60785;  				maxRev = 72868;  				return true;    			case ConfuserVersion.v17_r72989_dynamic:  				minRev = 72989;  				maxRev = 73605;  				return true;    			case ConfuserVersion.v17_r73740_dynamic:  				minRev = 73740;  				maxRev = 73740;  				return true;    			case ConfuserVersion.v17_r73764_dynamic:  			case ConfuserVersion.v17_r73764_native:  				minRev = 73764;  				maxRev = 73791;  				return true;    			case ConfuserVersion.v17_r73822_dynamic:  			case ConfuserVersion.v17_r73822_native:  				minRev = 73822;  				maxRev = 73822;  				return true;    			case ConfuserVersion.v17_r74021_dynamic:  			case ConfuserVersion.v17_r74021_native:  				minRev = 74021;  				maxRev = 74637;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,ConstantsDecrypterV15,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsDecrypterV15.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v15_r60785_normal:  				minRev = 60785;  				maxRev = 72989;  				return true;    			case ConfuserVersion.v17_r73404_normal:  				minRev = 73404;  				maxRev = 73791;  				return true;    			case ConfuserVersion.v17_r73822_normal:  				minRev = 73822;  				maxRev = 74637;  				return true;    			case ConfuserVersion.v15_r60785_dynamic:  				minRev = 60785;  				maxRev = 72868;  				return true;    			case ConfuserVersion.v17_r72989_dynamic:  				minRev = 72989;  				maxRev = 73605;  				return true;    			case ConfuserVersion.v17_r73740_dynamic:  				minRev = 73740;  				maxRev = 73740;  				return true;    			case ConfuserVersion.v17_r73764_dynamic:  			case ConfuserVersion.v17_r73764_native:  				minRev = 73764;  				maxRev = 73791;  				return true;    			case ConfuserVersion.v17_r73822_dynamic:  			case ConfuserVersion.v17_r73822_native:  				minRev = 73822;  				maxRev = 73822;  				return true;    			case ConfuserVersion.v17_r74021_dynamic:  			case ConfuserVersion.v17_r74021_native:  				minRev = 74021;  				maxRev = 74637;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,ConstantsDecrypterV15,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsDecrypterV15.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v15_r60785_normal:  				minRev = 60785;  				maxRev = 72989;  				return true;    			case ConfuserVersion.v17_r73404_normal:  				minRev = 73404;  				maxRev = 73791;  				return true;    			case ConfuserVersion.v17_r73822_normal:  				minRev = 73822;  				maxRev = 74637;  				return true;    			case ConfuserVersion.v15_r60785_dynamic:  				minRev = 60785;  				maxRev = 72868;  				return true;    			case ConfuserVersion.v17_r72989_dynamic:  				minRev = 72989;  				maxRev = 73605;  				return true;    			case ConfuserVersion.v17_r73740_dynamic:  				minRev = 73740;  				maxRev = 73740;  				return true;    			case ConfuserVersion.v17_r73764_dynamic:  			case ConfuserVersion.v17_r73764_native:  				minRev = 73764;  				maxRev = 73791;  				return true;    			case ConfuserVersion.v17_r73822_dynamic:  			case ConfuserVersion.v17_r73822_native:  				minRev = 73822;  				maxRev = 73822;  				return true;    			case ConfuserVersion.v17_r74021_dynamic:  			case ConfuserVersion.v17_r74021_native:  				minRev = 74021;  				maxRev = 74637;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,ConstantsDecrypterV15,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsDecrypterV15.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v15_r60785_normal:  				minRev = 60785;  				maxRev = 72989;  				return true;    			case ConfuserVersion.v17_r73404_normal:  				minRev = 73404;  				maxRev = 73791;  				return true;    			case ConfuserVersion.v17_r73822_normal:  				minRev = 73822;  				maxRev = 74637;  				return true;    			case ConfuserVersion.v15_r60785_dynamic:  				minRev = 60785;  				maxRev = 72868;  				return true;    			case ConfuserVersion.v17_r72989_dynamic:  				minRev = 72989;  				maxRev = 73605;  				return true;    			case ConfuserVersion.v17_r73740_dynamic:  				minRev = 73740;  				maxRev = 73740;  				return true;    			case ConfuserVersion.v17_r73764_dynamic:  			case ConfuserVersion.v17_r73764_native:  				minRev = 73764;  				maxRev = 73791;  				return true;    			case ConfuserVersion.v17_r73822_dynamic:  			case ConfuserVersion.v17_r73822_native:  				minRev = 73822;  				maxRev = 73822;  				return true;    			case ConfuserVersion.v17_r74021_dynamic:  			case ConfuserVersion.v17_r74021_native:  				minRev = 74021;  				maxRev = 74637;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,ConstantsDecrypterV15,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsDecrypterV15.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v15_r60785_normal:  				minRev = 60785;  				maxRev = 72989;  				return true;    			case ConfuserVersion.v17_r73404_normal:  				minRev = 73404;  				maxRev = 73791;  				return true;    			case ConfuserVersion.v17_r73822_normal:  				minRev = 73822;  				maxRev = 74637;  				return true;    			case ConfuserVersion.v15_r60785_dynamic:  				minRev = 60785;  				maxRev = 72868;  				return true;    			case ConfuserVersion.v17_r72989_dynamic:  				minRev = 72989;  				maxRev = 73605;  				return true;    			case ConfuserVersion.v17_r73740_dynamic:  				minRev = 73740;  				maxRev = 73740;  				return true;    			case ConfuserVersion.v17_r73764_dynamic:  			case ConfuserVersion.v17_r73764_native:  				minRev = 73764;  				maxRev = 73791;  				return true;    			case ConfuserVersion.v17_r73822_dynamic:  			case ConfuserVersion.v17_r73822_native:  				minRev = 73822;  				maxRev = 73822;  				return true;    			case ConfuserVersion.v17_r74021_dynamic:  			case ConfuserVersion.v17_r74021_native:  				minRev = 74021;  				maxRev = 74637;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,ConstantsDecrypterV15,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsDecrypterV15.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v15_r60785_normal:  				minRev = 60785;  				maxRev = 72989;  				return true;    			case ConfuserVersion.v17_r73404_normal:  				minRev = 73404;  				maxRev = 73791;  				return true;    			case ConfuserVersion.v17_r73822_normal:  				minRev = 73822;  				maxRev = 74637;  				return true;    			case ConfuserVersion.v15_r60785_dynamic:  				minRev = 60785;  				maxRev = 72868;  				return true;    			case ConfuserVersion.v17_r72989_dynamic:  				minRev = 72989;  				maxRev = 73605;  				return true;    			case ConfuserVersion.v17_r73740_dynamic:  				minRev = 73740;  				maxRev = 73740;  				return true;    			case ConfuserVersion.v17_r73764_dynamic:  			case ConfuserVersion.v17_r73764_native:  				minRev = 73764;  				maxRev = 73791;  				return true;    			case ConfuserVersion.v17_r73822_dynamic:  			case ConfuserVersion.v17_r73822_native:  				minRev = 73822;  				maxRev = 73822;  				return true;    			case ConfuserVersion.v17_r74021_dynamic:  			case ConfuserVersion.v17_r74021_native:  				minRev = 74021;  				maxRev = 74637;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,ConstantsDecrypterV15,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsDecrypterV15.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v15_r60785_normal:  				minRev = 60785;  				maxRev = 72989;  				return true;    			case ConfuserVersion.v17_r73404_normal:  				minRev = 73404;  				maxRev = 73791;  				return true;    			case ConfuserVersion.v17_r73822_normal:  				minRev = 73822;  				maxRev = 74637;  				return true;    			case ConfuserVersion.v15_r60785_dynamic:  				minRev = 60785;  				maxRev = 72868;  				return true;    			case ConfuserVersion.v17_r72989_dynamic:  				minRev = 72989;  				maxRev = 73605;  				return true;    			case ConfuserVersion.v17_r73740_dynamic:  				minRev = 73740;  				maxRev = 73740;  				return true;    			case ConfuserVersion.v17_r73764_dynamic:  			case ConfuserVersion.v17_r73764_native:  				minRev = 73764;  				maxRev = 73791;  				return true;    			case ConfuserVersion.v17_r73822_dynamic:  			case ConfuserVersion.v17_r73822_native:  				minRev = 73822;  				maxRev = 73822;  				return true;    			case ConfuserVersion.v17_r74021_dynamic:  			case ConfuserVersion.v17_r74021_native:  				minRev = 74021;  				maxRev = 74637;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,ConstantsDecrypterV15,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsDecrypterV15.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v15_r60785_normal:  				minRev = 60785;  				maxRev = 72989;  				return true;    			case ConfuserVersion.v17_r73404_normal:  				minRev = 73404;  				maxRev = 73791;  				return true;    			case ConfuserVersion.v17_r73822_normal:  				minRev = 73822;  				maxRev = 74637;  				return true;    			case ConfuserVersion.v15_r60785_dynamic:  				minRev = 60785;  				maxRev = 72868;  				return true;    			case ConfuserVersion.v17_r72989_dynamic:  				minRev = 72989;  				maxRev = 73605;  				return true;    			case ConfuserVersion.v17_r73740_dynamic:  				minRev = 73740;  				maxRev = 73740;  				return true;    			case ConfuserVersion.v17_r73764_dynamic:  			case ConfuserVersion.v17_r73764_native:  				minRev = 73764;  				maxRev = 73791;  				return true;    			case ConfuserVersion.v17_r73822_dynamic:  			case ConfuserVersion.v17_r73822_native:  				minRev = 73822;  				maxRev = 73822;  				return true;    			case ConfuserVersion.v17_r74021_dynamic:  			case ConfuserVersion.v17_r74021_native:  				minRev = 74021;  				maxRev = 74637;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,ConstantsDecrypterV15,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsDecrypterV15.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v15_r60785_normal:  				minRev = 60785;  				maxRev = 72989;  				return true;    			case ConfuserVersion.v17_r73404_normal:  				minRev = 73404;  				maxRev = 73791;  				return true;    			case ConfuserVersion.v17_r73822_normal:  				minRev = 73822;  				maxRev = 74637;  				return true;    			case ConfuserVersion.v15_r60785_dynamic:  				minRev = 60785;  				maxRev = 72868;  				return true;    			case ConfuserVersion.v17_r72989_dynamic:  				minRev = 72989;  				maxRev = 73605;  				return true;    			case ConfuserVersion.v17_r73740_dynamic:  				minRev = 73740;  				maxRev = 73740;  				return true;    			case ConfuserVersion.v17_r73764_dynamic:  			case ConfuserVersion.v17_r73764_native:  				minRev = 73764;  				maxRev = 73791;  				return true;    			case ConfuserVersion.v17_r73822_dynamic:  			case ConfuserVersion.v17_r73822_native:  				minRev = 73822;  				maxRev = 73822;  				return true;    			case ConfuserVersion.v17_r74021_dynamic:  			case ConfuserVersion.v17_r74021_native:  				minRev = 74021;  				maxRev = 74637;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,ConstantsDecrypterV15,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsDecrypterV15.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v15_r60785_normal:  				minRev = 60785;  				maxRev = 72989;  				return true;    			case ConfuserVersion.v17_r73404_normal:  				minRev = 73404;  				maxRev = 73791;  				return true;    			case ConfuserVersion.v17_r73822_normal:  				minRev = 73822;  				maxRev = 74637;  				return true;    			case ConfuserVersion.v15_r60785_dynamic:  				minRev = 60785;  				maxRev = 72868;  				return true;    			case ConfuserVersion.v17_r72989_dynamic:  				minRev = 72989;  				maxRev = 73605;  				return true;    			case ConfuserVersion.v17_r73740_dynamic:  				minRev = 73740;  				maxRev = 73740;  				return true;    			case ConfuserVersion.v17_r73764_dynamic:  			case ConfuserVersion.v17_r73764_native:  				minRev = 73764;  				maxRev = 73791;  				return true;    			case ConfuserVersion.v17_r73822_dynamic:  			case ConfuserVersion.v17_r73822_native:  				minRev = 73822;  				maxRev = 73822;  				return true;    			case ConfuserVersion.v17_r74021_dynamic:  			case ConfuserVersion.v17_r74021_native:  				minRev = 74021;  				maxRev = 74637;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,ConstantsDecrypterV15,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsDecrypterV15.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v15_r60785_normal:  				minRev = 60785;  				maxRev = 72989;  				return true;    			case ConfuserVersion.v17_r73404_normal:  				minRev = 73404;  				maxRev = 73791;  				return true;    			case ConfuserVersion.v17_r73822_normal:  				minRev = 73822;  				maxRev = 74637;  				return true;    			case ConfuserVersion.v15_r60785_dynamic:  				minRev = 60785;  				maxRev = 72868;  				return true;    			case ConfuserVersion.v17_r72989_dynamic:  				minRev = 72989;  				maxRev = 73605;  				return true;    			case ConfuserVersion.v17_r73740_dynamic:  				minRev = 73740;  				maxRev = 73740;  				return true;    			case ConfuserVersion.v17_r73764_dynamic:  			case ConfuserVersion.v17_r73764_native:  				minRev = 73764;  				maxRev = 73791;  				return true;    			case ConfuserVersion.v17_r73822_dynamic:  			case ConfuserVersion.v17_r73822_native:  				minRev = 73822;  				maxRev = 73822;  				return true;    			case ConfuserVersion.v17_r74021_dynamic:  			case ConfuserVersion.v17_r74021_native:  				minRev = 74021;  				maxRev = 74637;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,ConstantsDecrypterV15,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsDecrypterV15.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v15_r60785_normal:  				minRev = 60785;  				maxRev = 72989;  				return true;    			case ConfuserVersion.v17_r73404_normal:  				minRev = 73404;  				maxRev = 73791;  				return true;    			case ConfuserVersion.v17_r73822_normal:  				minRev = 73822;  				maxRev = 74637;  				return true;    			case ConfuserVersion.v15_r60785_dynamic:  				minRev = 60785;  				maxRev = 72868;  				return true;    			case ConfuserVersion.v17_r72989_dynamic:  				minRev = 72989;  				maxRev = 73605;  				return true;    			case ConfuserVersion.v17_r73740_dynamic:  				minRev = 73740;  				maxRev = 73740;  				return true;    			case ConfuserVersion.v17_r73764_dynamic:  			case ConfuserVersion.v17_r73764_native:  				minRev = 73764;  				maxRev = 73791;  				return true;    			case ConfuserVersion.v17_r73822_dynamic:  			case ConfuserVersion.v17_r73822_native:  				minRev = 73822;  				maxRev = 73822;  				return true;    			case ConfuserVersion.v17_r74021_dynamic:  			case ConfuserVersion.v17_r74021_native:  				minRev = 74021;  				maxRev = 74637;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,ConstantsDecrypterV15,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsDecrypterV15.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v15_r60785_normal:  				minRev = 60785;  				maxRev = 72989;  				return true;    			case ConfuserVersion.v17_r73404_normal:  				minRev = 73404;  				maxRev = 73791;  				return true;    			case ConfuserVersion.v17_r73822_normal:  				minRev = 73822;  				maxRev = 74637;  				return true;    			case ConfuserVersion.v15_r60785_dynamic:  				minRev = 60785;  				maxRev = 72868;  				return true;    			case ConfuserVersion.v17_r72989_dynamic:  				minRev = 72989;  				maxRev = 73605;  				return true;    			case ConfuserVersion.v17_r73740_dynamic:  				minRev = 73740;  				maxRev = 73740;  				return true;    			case ConfuserVersion.v17_r73764_dynamic:  			case ConfuserVersion.v17_r73764_native:  				minRev = 73764;  				maxRev = 73791;  				return true;    			case ConfuserVersion.v17_r73822_dynamic:  			case ConfuserVersion.v17_r73822_native:  				minRev = 73822;  				maxRev = 73822;  				return true;    			case ConfuserVersion.v17_r74021_dynamic:  			case ConfuserVersion.v17_r74021_native:  				minRev = 74021;  				maxRev = 74637;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,ConstantsDecrypterV17,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsDecrypterV17.cs,Find,The following statement contains a magic number: keyArraySize == 8
Magic Number,de4dot.code.deobfuscators.Confuser,ConstantsDecrypterV17,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsDecrypterV17.cs,GetKeyArraySize,The following statement contains a magic number: var ldci4 = instrs[i + 2];
Magic Number,de4dot.code.deobfuscators.Confuser,ConstantsDecrypterV17,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsDecrypterV17.cs,GetKeyArraySize,The following statement contains a magic number: instrs[i + 3].OpCode.Code != Code.Rem
Magic Number,de4dot.code.deobfuscators.Confuser,ConstantsDecrypterV17,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsDecrypterV17.cs,GetKeyArraySize,The following statement contains a magic number: instrs[i + 4].OpCode.Code != Code.Ldelem_U1
Magic Number,de4dot.code.deobfuscators.Confuser,ConstantsDecrypterV17,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsDecrypterV17.cs,GetKeyArraySize,The following statement contains a magic number: i < instrs.Count - 4
Magic Number,de4dot.code.deobfuscators.Confuser,ConstantsDecrypterV17,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsDecrypterV17.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v17_r74708_normal:  			case ConfuserVersion.v17_r74708_dynamic:  			case ConfuserVersion.v17_r74708_native:  				minRev = 74708;  				maxRev = 74708;  				return true;    			case ConfuserVersion.v17_r74788_normal:  			case ConfuserVersion.v17_r74788_dynamic:  			case ConfuserVersion.v17_r74788_native:  				minRev = 74788;  				maxRev = 74788;  				return true;    			case ConfuserVersion.v17_r74816_normal:  			case ConfuserVersion.v17_r74816_dynamic:  			case ConfuserVersion.v17_r74816_native:  				minRev = 74816;  				maxRev = 74852;  				return true;    			case ConfuserVersion.v17_r75056_normal:  			case ConfuserVersion.v17_r75056_dynamic:  			case ConfuserVersion.v17_r75056_native:  				minRev = 75056;  				maxRev = 75184;  				return true;    			case ConfuserVersion.v18_r75257_normal:  			case ConfuserVersion.v18_r75257_dynamic:  			case ConfuserVersion.v18_r75257_native:  				minRev = 75257;  				maxRev = 75349;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,ConstantsDecrypterV17,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsDecrypterV17.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v17_r74708_normal:  			case ConfuserVersion.v17_r74708_dynamic:  			case ConfuserVersion.v17_r74708_native:  				minRev = 74708;  				maxRev = 74708;  				return true;    			case ConfuserVersion.v17_r74788_normal:  			case ConfuserVersion.v17_r74788_dynamic:  			case ConfuserVersion.v17_r74788_native:  				minRev = 74788;  				maxRev = 74788;  				return true;    			case ConfuserVersion.v17_r74816_normal:  			case ConfuserVersion.v17_r74816_dynamic:  			case ConfuserVersion.v17_r74816_native:  				minRev = 74816;  				maxRev = 74852;  				return true;    			case ConfuserVersion.v17_r75056_normal:  			case ConfuserVersion.v17_r75056_dynamic:  			case ConfuserVersion.v17_r75056_native:  				minRev = 75056;  				maxRev = 75184;  				return true;    			case ConfuserVersion.v18_r75257_normal:  			case ConfuserVersion.v18_r75257_dynamic:  			case ConfuserVersion.v18_r75257_native:  				minRev = 75257;  				maxRev = 75349;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,ConstantsDecrypterV17,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsDecrypterV17.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v17_r74708_normal:  			case ConfuserVersion.v17_r74708_dynamic:  			case ConfuserVersion.v17_r74708_native:  				minRev = 74708;  				maxRev = 74708;  				return true;    			case ConfuserVersion.v17_r74788_normal:  			case ConfuserVersion.v17_r74788_dynamic:  			case ConfuserVersion.v17_r74788_native:  				minRev = 74788;  				maxRev = 74788;  				return true;    			case ConfuserVersion.v17_r74816_normal:  			case ConfuserVersion.v17_r74816_dynamic:  			case ConfuserVersion.v17_r74816_native:  				minRev = 74816;  				maxRev = 74852;  				return true;    			case ConfuserVersion.v17_r75056_normal:  			case ConfuserVersion.v17_r75056_dynamic:  			case ConfuserVersion.v17_r75056_native:  				minRev = 75056;  				maxRev = 75184;  				return true;    			case ConfuserVersion.v18_r75257_normal:  			case ConfuserVersion.v18_r75257_dynamic:  			case ConfuserVersion.v18_r75257_native:  				minRev = 75257;  				maxRev = 75349;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,ConstantsDecrypterV17,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsDecrypterV17.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v17_r74708_normal:  			case ConfuserVersion.v17_r74708_dynamic:  			case ConfuserVersion.v17_r74708_native:  				minRev = 74708;  				maxRev = 74708;  				return true;    			case ConfuserVersion.v17_r74788_normal:  			case ConfuserVersion.v17_r74788_dynamic:  			case ConfuserVersion.v17_r74788_native:  				minRev = 74788;  				maxRev = 74788;  				return true;    			case ConfuserVersion.v17_r74816_normal:  			case ConfuserVersion.v17_r74816_dynamic:  			case ConfuserVersion.v17_r74816_native:  				minRev = 74816;  				maxRev = 74852;  				return true;    			case ConfuserVersion.v17_r75056_normal:  			case ConfuserVersion.v17_r75056_dynamic:  			case ConfuserVersion.v17_r75056_native:  				minRev = 75056;  				maxRev = 75184;  				return true;    			case ConfuserVersion.v18_r75257_normal:  			case ConfuserVersion.v18_r75257_dynamic:  			case ConfuserVersion.v18_r75257_native:  				minRev = 75257;  				maxRev = 75349;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,ConstantsDecrypterV17,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsDecrypterV17.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v17_r74708_normal:  			case ConfuserVersion.v17_r74708_dynamic:  			case ConfuserVersion.v17_r74708_native:  				minRev = 74708;  				maxRev = 74708;  				return true;    			case ConfuserVersion.v17_r74788_normal:  			case ConfuserVersion.v17_r74788_dynamic:  			case ConfuserVersion.v17_r74788_native:  				minRev = 74788;  				maxRev = 74788;  				return true;    			case ConfuserVersion.v17_r74816_normal:  			case ConfuserVersion.v17_r74816_dynamic:  			case ConfuserVersion.v17_r74816_native:  				minRev = 74816;  				maxRev = 74852;  				return true;    			case ConfuserVersion.v17_r75056_normal:  			case ConfuserVersion.v17_r75056_dynamic:  			case ConfuserVersion.v17_r75056_native:  				minRev = 75056;  				maxRev = 75184;  				return true;    			case ConfuserVersion.v18_r75257_normal:  			case ConfuserVersion.v18_r75257_dynamic:  			case ConfuserVersion.v18_r75257_native:  				minRev = 75257;  				maxRev = 75349;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,ConstantsDecrypterV17,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsDecrypterV17.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v17_r74708_normal:  			case ConfuserVersion.v17_r74708_dynamic:  			case ConfuserVersion.v17_r74708_native:  				minRev = 74708;  				maxRev = 74708;  				return true;    			case ConfuserVersion.v17_r74788_normal:  			case ConfuserVersion.v17_r74788_dynamic:  			case ConfuserVersion.v17_r74788_native:  				minRev = 74788;  				maxRev = 74788;  				return true;    			case ConfuserVersion.v17_r74816_normal:  			case ConfuserVersion.v17_r74816_dynamic:  			case ConfuserVersion.v17_r74816_native:  				minRev = 74816;  				maxRev = 74852;  				return true;    			case ConfuserVersion.v17_r75056_normal:  			case ConfuserVersion.v17_r75056_dynamic:  			case ConfuserVersion.v17_r75056_native:  				minRev = 75056;  				maxRev = 75184;  				return true;    			case ConfuserVersion.v18_r75257_normal:  			case ConfuserVersion.v18_r75257_dynamic:  			case ConfuserVersion.v18_r75257_native:  				minRev = 75257;  				maxRev = 75349;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,ConstantsDecrypterV17,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsDecrypterV17.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v17_r74708_normal:  			case ConfuserVersion.v17_r74708_dynamic:  			case ConfuserVersion.v17_r74708_native:  				minRev = 74708;  				maxRev = 74708;  				return true;    			case ConfuserVersion.v17_r74788_normal:  			case ConfuserVersion.v17_r74788_dynamic:  			case ConfuserVersion.v17_r74788_native:  				minRev = 74788;  				maxRev = 74788;  				return true;    			case ConfuserVersion.v17_r74816_normal:  			case ConfuserVersion.v17_r74816_dynamic:  			case ConfuserVersion.v17_r74816_native:  				minRev = 74816;  				maxRev = 74852;  				return true;    			case ConfuserVersion.v17_r75056_normal:  			case ConfuserVersion.v17_r75056_dynamic:  			case ConfuserVersion.v17_r75056_native:  				minRev = 75056;  				maxRev = 75184;  				return true;    			case ConfuserVersion.v18_r75257_normal:  			case ConfuserVersion.v18_r75257_dynamic:  			case ConfuserVersion.v18_r75257_native:  				minRev = 75257;  				maxRev = 75349;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,ConstantsDecrypterV17,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsDecrypterV17.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v17_r74708_normal:  			case ConfuserVersion.v17_r74708_dynamic:  			case ConfuserVersion.v17_r74708_native:  				minRev = 74708;  				maxRev = 74708;  				return true;    			case ConfuserVersion.v17_r74788_normal:  			case ConfuserVersion.v17_r74788_dynamic:  			case ConfuserVersion.v17_r74788_native:  				minRev = 74788;  				maxRev = 74788;  				return true;    			case ConfuserVersion.v17_r74816_normal:  			case ConfuserVersion.v17_r74816_dynamic:  			case ConfuserVersion.v17_r74816_native:  				minRev = 74816;  				maxRev = 74852;  				return true;    			case ConfuserVersion.v17_r75056_normal:  			case ConfuserVersion.v17_r75056_dynamic:  			case ConfuserVersion.v17_r75056_native:  				minRev = 75056;  				maxRev = 75184;  				return true;    			case ConfuserVersion.v18_r75257_normal:  			case ConfuserVersion.v18_r75257_dynamic:  			case ConfuserVersion.v18_r75257_native:  				minRev = 75257;  				maxRev = 75349;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,ConstantsDecrypterV17,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsDecrypterV17.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v17_r74708_normal:  			case ConfuserVersion.v17_r74708_dynamic:  			case ConfuserVersion.v17_r74708_native:  				minRev = 74708;  				maxRev = 74708;  				return true;    			case ConfuserVersion.v17_r74788_normal:  			case ConfuserVersion.v17_r74788_dynamic:  			case ConfuserVersion.v17_r74788_native:  				minRev = 74788;  				maxRev = 74788;  				return true;    			case ConfuserVersion.v17_r74816_normal:  			case ConfuserVersion.v17_r74816_dynamic:  			case ConfuserVersion.v17_r74816_native:  				minRev = 74816;  				maxRev = 74852;  				return true;    			case ConfuserVersion.v17_r75056_normal:  			case ConfuserVersion.v17_r75056_dynamic:  			case ConfuserVersion.v17_r75056_native:  				minRev = 75056;  				maxRev = 75184;  				return true;    			case ConfuserVersion.v18_r75257_normal:  			case ConfuserVersion.v18_r75257_dynamic:  			case ConfuserVersion.v18_r75257_native:  				minRev = 75257;  				maxRev = 75349;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,ConstantsDecrypterV17,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsDecrypterV17.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v17_r74708_normal:  			case ConfuserVersion.v17_r74708_dynamic:  			case ConfuserVersion.v17_r74708_native:  				minRev = 74708;  				maxRev = 74708;  				return true;    			case ConfuserVersion.v17_r74788_normal:  			case ConfuserVersion.v17_r74788_dynamic:  			case ConfuserVersion.v17_r74788_native:  				minRev = 74788;  				maxRev = 74788;  				return true;    			case ConfuserVersion.v17_r74816_normal:  			case ConfuserVersion.v17_r74816_dynamic:  			case ConfuserVersion.v17_r74816_native:  				minRev = 74816;  				maxRev = 74852;  				return true;    			case ConfuserVersion.v17_r75056_normal:  			case ConfuserVersion.v17_r75056_dynamic:  			case ConfuserVersion.v17_r75056_native:  				minRev = 75056;  				maxRev = 75184;  				return true;    			case ConfuserVersion.v18_r75257_normal:  			case ConfuserVersion.v18_r75257_dynamic:  			case ConfuserVersion.v18_r75257_native:  				minRev = 75257;  				maxRev = 75349;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,DecrypterInfoV17,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsDecrypterV17.cs,FindKey1_v17,The following statement contains a magic number: var ldcloc = instrs[i + 2];
Magic Number,de4dot.code.deobfuscators.Confuser,DecrypterInfoV17,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsDecrypterV17.cs,FindKey1_v17,The following statement contains a magic number: instrs[i + 3].OpCode.Code != Code.Xor
Magic Number,de4dot.code.deobfuscators.Confuser,DecrypterInfoV17,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsDecrypterV17.cs,FindKey1_v17,The following statement contains a magic number: !instrs[i + 4].IsStloc()
Magic Number,de4dot.code.deobfuscators.Confuser,DecrypterInfoV17,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsDecrypterV17.cs,FindKey1_v17,The following statement contains a magic number: i < instrs.Count - 4
Magic Number,de4dot.code.deobfuscators.Confuser,DecrypterInfoV17,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsDecrypterV17.cs,FindKey4_normal,The following statement contains a magic number: instrs[i + 2].OpCode.Code != Code.Add
Magic Number,de4dot.code.deobfuscators.Confuser,DecrypterInfoV17,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsDecrypterV17.cs,FindKey4_normal,The following statement contains a magic number: var ldci4 = instrs[i + 3];
Magic Number,de4dot.code.deobfuscators.Confuser,DecrypterInfoV17,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsDecrypterV17.cs,FindKey4_normal,The following statement contains a magic number: instrs[i + 4].OpCode.Code != Code.Mul
Magic Number,de4dot.code.deobfuscators.Confuser,DecrypterInfoV17,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsDecrypterV17.cs,FindKey4_normal,The following statement contains a magic number: !instrs[i + 5].IsStloc()
Magic Number,de4dot.code.deobfuscators.Confuser,DecrypterInfoV17,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsDecrypterV17.cs,FindKey4_normal,The following statement contains a magic number: i < instrs.Count - 5
Magic Number,de4dot.code.deobfuscators.Confuser,ConstantsDecrypterV18,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsDecrypterV18.cs,FindKey0,The following statement contains a magic number: index2 - index != 2
Magic Number,de4dot.code.deobfuscators.Confuser,ConstantsDecrypterV18,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsDecrypterV18.cs,FindKey0d,The following statement contains a magic number: switch (index2 - index) {  				case 3:  					// rev <= r79440  					ldci4Index = index + 1;  					break;    				case -4:  					// rev >= r79630  					ldci4Index = index2 - 2;  					break;    				default:  					continue;  				}
Magic Number,de4dot.code.deobfuscators.Confuser,ConstantsDecrypterV18,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsDecrypterV18.cs,FindKey0d,The following statement contains a magic number: switch (index2 - index) {  				case 3:  					// rev <= r79440  					ldci4Index = index + 1;  					break;    				case -4:  					// rev >= r79630  					ldci4Index = index2 - 2;  					break;    				default:  					continue;  				}
Magic Number,de4dot.code.deobfuscators.Confuser,ConstantsDecrypterV18,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsDecrypterV18.cs,FindKey0d,The following statement contains a magic number: switch (index2 - index) {  				case 3:  					// rev <= r79440  					ldci4Index = index + 1;  					break;    				case -4:  					// rev >= r79630  					ldci4Index = index2 - 2;  					break;    				default:  					continue;  				}
Magic Number,de4dot.code.deobfuscators.Confuser,ConstantsDecrypterV18,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsDecrypterV18.cs,IsDecryptMethodSignature,The following statement contains a magic number: sig.Params.Count != 2
Magic Number,de4dot.code.deobfuscators.Confuser,ConstantsDecrypterV18,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsDecrypterV18.cs,FindLKeys_v18_r75367,The following statement contains a magic number: instrs[i + 2].OpCode.Code != Code.Xor
Magic Number,de4dot.code.deobfuscators.Confuser,ConstantsDecrypterV18,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsDecrypterV18.cs,FindLKeys_v18_r75367,The following statement contains a magic number: instrs[i + 3].OpCode.Code != Code.Conv_U8
Magic Number,de4dot.code.deobfuscators.Confuser,ConstantsDecrypterV18,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsDecrypterV18.cs,FindLKeys_v18_r75367,The following statement contains a magic number: !instrs[i + 4].IsStloc()
Magic Number,de4dot.code.deobfuscators.Confuser,ConstantsDecrypterV18,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsDecrypterV18.cs,FindLKeys_v18_r75367,The following statement contains a magic number: var ldci4_2 = instrs[i + 5];
Magic Number,de4dot.code.deobfuscators.Confuser,ConstantsDecrypterV18,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsDecrypterV18.cs,FindLKeys_v18_r75367,The following statement contains a magic number: instrs[i + 6].OpCode.Code != Code.Conv_I8
Magic Number,de4dot.code.deobfuscators.Confuser,ConstantsDecrypterV18,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsDecrypterV18.cs,FindLKeys_v18_r75367,The following statement contains a magic number: !instrs[i + 7].IsStloc()
Magic Number,de4dot.code.deobfuscators.Confuser,ConstantsDecrypterV18,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsDecrypterV18.cs,FindLKeys_v18_r75367,The following statement contains a magic number: var ldci4_3 = instrs[i + 8];
Magic Number,de4dot.code.deobfuscators.Confuser,ConstantsDecrypterV18,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsDecrypterV18.cs,FindLKeys_v18_r75367,The following statement contains a magic number: instrs[i + 9].OpCode.Code != Code.Conv_I8
Magic Number,de4dot.code.deobfuscators.Confuser,ConstantsDecrypterV18,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsDecrypterV18.cs,FindLKeys_v18_r75367,The following statement contains a magic number: !instrs[i + 10].IsStloc()
Magic Number,de4dot.code.deobfuscators.Confuser,ConstantsDecrypterV18,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsDecrypterV18.cs,FindLKeys_v18_r75367,The following statement contains a magic number: i < instrs.Count - 10
Magic Number,de4dot.code.deobfuscators.Confuser,ConstantsDecrypterV18,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsDecrypterV18.cs,FindKey0_v18_r75367,The following statement contains a magic number: instrs[i + 2].OpCode.Code != Code.Conv_I8
Magic Number,de4dot.code.deobfuscators.Confuser,ConstantsDecrypterV18,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsDecrypterV18.cs,FindKey0_v18_r75367,The following statement contains a magic number: instrs[i + 3].OpCode.Code != Code.Mul
Magic Number,de4dot.code.deobfuscators.Confuser,ConstantsDecrypterV18,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsDecrypterV18.cs,FindKey0_v18_r75367,The following statement contains a magic number: instrs[i + 4].OpCode.Code != Code.Add
Magic Number,de4dot.code.deobfuscators.Confuser,ConstantsDecrypterV18,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsDecrypterV18.cs,FindKey0_v18_r75367,The following statement contains a magic number: i < instrs.Count - 4
Magic Number,de4dot.code.deobfuscators.Confuser,ConstantsDecrypterV18,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsDecrypterV18.cs,FindKey0d_v18_r75367,The following statement contains a magic number: index2 - index != 3
Magic Number,de4dot.code.deobfuscators.Confuser,ConstantsDecrypterV18,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsDecrypterV18.cs,FindKey0d_v18_r75367,The following statement contains a magic number: instrs[index + 2].OpCode.Code != Code.Xor
Magic Number,de4dot.code.deobfuscators.Confuser,ConstantsDecrypterV18,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsDecrypterV18.cs,FindLKeys_v18_r75369,The following statement contains a magic number: instrs[i + 2].OpCode.Code != Code.Conv_U8
Magic Number,de4dot.code.deobfuscators.Confuser,ConstantsDecrypterV18,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsDecrypterV18.cs,FindLKeys_v18_r75369,The following statement contains a magic number: instrs[i + 3].OpCode.Code != Code.Mul
Magic Number,de4dot.code.deobfuscators.Confuser,ConstantsDecrypterV18,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsDecrypterV18.cs,FindLKeys_v18_r75369,The following statement contains a magic number: !instrs[i + 4].IsStloc()
Magic Number,de4dot.code.deobfuscators.Confuser,ConstantsDecrypterV18,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsDecrypterV18.cs,FindLKeys_v18_r75369,The following statement contains a magic number: var ldci8_2 = instrs[i + 5];
Magic Number,de4dot.code.deobfuscators.Confuser,ConstantsDecrypterV18,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsDecrypterV18.cs,FindLKeys_v18_r75369,The following statement contains a magic number: !instrs[i + 6].IsStloc()
Magic Number,de4dot.code.deobfuscators.Confuser,ConstantsDecrypterV18,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsDecrypterV18.cs,FindLKeys_v18_r75369,The following statement contains a magic number: var ldci8_3 = instrs[i + 7];
Magic Number,de4dot.code.deobfuscators.Confuser,ConstantsDecrypterV18,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsDecrypterV18.cs,FindLKeys_v18_r75369,The following statement contains a magic number: !instrs[i + 8].IsStloc()
Magic Number,de4dot.code.deobfuscators.Confuser,ConstantsDecrypterV18,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsDecrypterV18.cs,FindLKeys_v18_r75369,The following statement contains a magic number: i < instrs.Count - 8
Magic Number,de4dot.code.deobfuscators.Confuser,ConstantsDecrypterV18,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsDecrypterV18.cs,FindKey0_v18_r75369,The following statement contains a magic number: var ldci4 = instrs[i + 2];
Magic Number,de4dot.code.deobfuscators.Confuser,ConstantsDecrypterV18,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsDecrypterV18.cs,FindKey0_v18_r75369,The following statement contains a magic number: instrs[i + 3].OpCode.Code != Code.Conv_U8
Magic Number,de4dot.code.deobfuscators.Confuser,ConstantsDecrypterV18,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsDecrypterV18.cs,FindKey0_v18_r75369,The following statement contains a magic number: instrs[i + 4].OpCode.Code != Code.Mul
Magic Number,de4dot.code.deobfuscators.Confuser,ConstantsDecrypterV18,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsDecrypterV18.cs,FindKey0_v18_r75369,The following statement contains a magic number: i < instrs.Count - 4
Magic Number,de4dot.code.deobfuscators.Confuser,ConstantsDecrypterV18,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsDecrypterV18.cs,DecryptResource_v18_r75367_normal,The following statement contains a magic number: var decrypted = ConfuserUtils.Decrypt(BitConverter.ToUInt32(key' 12) * (uint)key0' encrypted);
Magic Number,de4dot.code.deobfuscators.Confuser,ConstantsDecrypterV18,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsDecrypterV18.cs,GetDynamicLocal,The following statement contains a magic number: int index = i - 2;
Magic Number,de4dot.code.deobfuscators.Confuser,ConstantsDecrypterV18,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsDecrypterV18.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v18_r75367_normal:  			case ConfuserVersion.v18_r75367_dynamic:  			case ConfuserVersion.v18_r75367_native:  				minRev = 75367;  				maxRev = 75367;  				return true;    			case ConfuserVersion.v18_r75369_normal:  			case ConfuserVersion.v18_r75369_dynamic:  			case ConfuserVersion.v18_r75369_native:  				minRev = 75369;  				maxRev = 77124;  				return true;    			case ConfuserVersion.v19_r77172_normal:  			case ConfuserVersion.v19_r77172_dynamic:  			case ConfuserVersion.v19_r77172_native:  				minRev = 77172;  				maxRev = 77501;  				return true;    			case ConfuserVersion.v19_r78056_normal:  			case ConfuserVersion.v19_r78056_dynamic:  			case ConfuserVersion.v19_r78056_native:  				minRev = 78056;  				// r78964 removed code that made it impossible to differentiate it from this  				// version. All we know is that it can't be r78363-r78963.  				maxRev = 79440;  				return true;    			case ConfuserVersion.v19_r78363_normal:  			case ConfuserVersion.v19_r78363_dynamic:  			case ConfuserVersion.v19_r78363_native:  				minRev = 78363;  				maxRev = 78963;  				return true;    			case ConfuserVersion.v19_r79630_normal:  			case ConfuserVersion.v19_r79630_dynamic:  			case ConfuserVersion.v19_r79630_native:  				minRev = 79630;  				maxRev = int.MaxValue;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,ConstantsDecrypterV18,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsDecrypterV18.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v18_r75367_normal:  			case ConfuserVersion.v18_r75367_dynamic:  			case ConfuserVersion.v18_r75367_native:  				minRev = 75367;  				maxRev = 75367;  				return true;    			case ConfuserVersion.v18_r75369_normal:  			case ConfuserVersion.v18_r75369_dynamic:  			case ConfuserVersion.v18_r75369_native:  				minRev = 75369;  				maxRev = 77124;  				return true;    			case ConfuserVersion.v19_r77172_normal:  			case ConfuserVersion.v19_r77172_dynamic:  			case ConfuserVersion.v19_r77172_native:  				minRev = 77172;  				maxRev = 77501;  				return true;    			case ConfuserVersion.v19_r78056_normal:  			case ConfuserVersion.v19_r78056_dynamic:  			case ConfuserVersion.v19_r78056_native:  				minRev = 78056;  				// r78964 removed code that made it impossible to differentiate it from this  				// version. All we know is that it can't be r78363-r78963.  				maxRev = 79440;  				return true;    			case ConfuserVersion.v19_r78363_normal:  			case ConfuserVersion.v19_r78363_dynamic:  			case ConfuserVersion.v19_r78363_native:  				minRev = 78363;  				maxRev = 78963;  				return true;    			case ConfuserVersion.v19_r79630_normal:  			case ConfuserVersion.v19_r79630_dynamic:  			case ConfuserVersion.v19_r79630_native:  				minRev = 79630;  				maxRev = int.MaxValue;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,ConstantsDecrypterV18,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsDecrypterV18.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v18_r75367_normal:  			case ConfuserVersion.v18_r75367_dynamic:  			case ConfuserVersion.v18_r75367_native:  				minRev = 75367;  				maxRev = 75367;  				return true;    			case ConfuserVersion.v18_r75369_normal:  			case ConfuserVersion.v18_r75369_dynamic:  			case ConfuserVersion.v18_r75369_native:  				minRev = 75369;  				maxRev = 77124;  				return true;    			case ConfuserVersion.v19_r77172_normal:  			case ConfuserVersion.v19_r77172_dynamic:  			case ConfuserVersion.v19_r77172_native:  				minRev = 77172;  				maxRev = 77501;  				return true;    			case ConfuserVersion.v19_r78056_normal:  			case ConfuserVersion.v19_r78056_dynamic:  			case ConfuserVersion.v19_r78056_native:  				minRev = 78056;  				// r78964 removed code that made it impossible to differentiate it from this  				// version. All we know is that it can't be r78363-r78963.  				maxRev = 79440;  				return true;    			case ConfuserVersion.v19_r78363_normal:  			case ConfuserVersion.v19_r78363_dynamic:  			case ConfuserVersion.v19_r78363_native:  				minRev = 78363;  				maxRev = 78963;  				return true;    			case ConfuserVersion.v19_r79630_normal:  			case ConfuserVersion.v19_r79630_dynamic:  			case ConfuserVersion.v19_r79630_native:  				minRev = 79630;  				maxRev = int.MaxValue;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,ConstantsDecrypterV18,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsDecrypterV18.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v18_r75367_normal:  			case ConfuserVersion.v18_r75367_dynamic:  			case ConfuserVersion.v18_r75367_native:  				minRev = 75367;  				maxRev = 75367;  				return true;    			case ConfuserVersion.v18_r75369_normal:  			case ConfuserVersion.v18_r75369_dynamic:  			case ConfuserVersion.v18_r75369_native:  				minRev = 75369;  				maxRev = 77124;  				return true;    			case ConfuserVersion.v19_r77172_normal:  			case ConfuserVersion.v19_r77172_dynamic:  			case ConfuserVersion.v19_r77172_native:  				minRev = 77172;  				maxRev = 77501;  				return true;    			case ConfuserVersion.v19_r78056_normal:  			case ConfuserVersion.v19_r78056_dynamic:  			case ConfuserVersion.v19_r78056_native:  				minRev = 78056;  				// r78964 removed code that made it impossible to differentiate it from this  				// version. All we know is that it can't be r78363-r78963.  				maxRev = 79440;  				return true;    			case ConfuserVersion.v19_r78363_normal:  			case ConfuserVersion.v19_r78363_dynamic:  			case ConfuserVersion.v19_r78363_native:  				minRev = 78363;  				maxRev = 78963;  				return true;    			case ConfuserVersion.v19_r79630_normal:  			case ConfuserVersion.v19_r79630_dynamic:  			case ConfuserVersion.v19_r79630_native:  				minRev = 79630;  				maxRev = int.MaxValue;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,ConstantsDecrypterV18,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsDecrypterV18.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v18_r75367_normal:  			case ConfuserVersion.v18_r75367_dynamic:  			case ConfuserVersion.v18_r75367_native:  				minRev = 75367;  				maxRev = 75367;  				return true;    			case ConfuserVersion.v18_r75369_normal:  			case ConfuserVersion.v18_r75369_dynamic:  			case ConfuserVersion.v18_r75369_native:  				minRev = 75369;  				maxRev = 77124;  				return true;    			case ConfuserVersion.v19_r77172_normal:  			case ConfuserVersion.v19_r77172_dynamic:  			case ConfuserVersion.v19_r77172_native:  				minRev = 77172;  				maxRev = 77501;  				return true;    			case ConfuserVersion.v19_r78056_normal:  			case ConfuserVersion.v19_r78056_dynamic:  			case ConfuserVersion.v19_r78056_native:  				minRev = 78056;  				// r78964 removed code that made it impossible to differentiate it from this  				// version. All we know is that it can't be r78363-r78963.  				maxRev = 79440;  				return true;    			case ConfuserVersion.v19_r78363_normal:  			case ConfuserVersion.v19_r78363_dynamic:  			case ConfuserVersion.v19_r78363_native:  				minRev = 78363;  				maxRev = 78963;  				return true;    			case ConfuserVersion.v19_r79630_normal:  			case ConfuserVersion.v19_r79630_dynamic:  			case ConfuserVersion.v19_r79630_native:  				minRev = 79630;  				maxRev = int.MaxValue;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,ConstantsDecrypterV18,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsDecrypterV18.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v18_r75367_normal:  			case ConfuserVersion.v18_r75367_dynamic:  			case ConfuserVersion.v18_r75367_native:  				minRev = 75367;  				maxRev = 75367;  				return true;    			case ConfuserVersion.v18_r75369_normal:  			case ConfuserVersion.v18_r75369_dynamic:  			case ConfuserVersion.v18_r75369_native:  				minRev = 75369;  				maxRev = 77124;  				return true;    			case ConfuserVersion.v19_r77172_normal:  			case ConfuserVersion.v19_r77172_dynamic:  			case ConfuserVersion.v19_r77172_native:  				minRev = 77172;  				maxRev = 77501;  				return true;    			case ConfuserVersion.v19_r78056_normal:  			case ConfuserVersion.v19_r78056_dynamic:  			case ConfuserVersion.v19_r78056_native:  				minRev = 78056;  				// r78964 removed code that made it impossible to differentiate it from this  				// version. All we know is that it can't be r78363-r78963.  				maxRev = 79440;  				return true;    			case ConfuserVersion.v19_r78363_normal:  			case ConfuserVersion.v19_r78363_dynamic:  			case ConfuserVersion.v19_r78363_native:  				minRev = 78363;  				maxRev = 78963;  				return true;    			case ConfuserVersion.v19_r79630_normal:  			case ConfuserVersion.v19_r79630_dynamic:  			case ConfuserVersion.v19_r79630_native:  				minRev = 79630;  				maxRev = int.MaxValue;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,ConstantsDecrypterV18,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsDecrypterV18.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v18_r75367_normal:  			case ConfuserVersion.v18_r75367_dynamic:  			case ConfuserVersion.v18_r75367_native:  				minRev = 75367;  				maxRev = 75367;  				return true;    			case ConfuserVersion.v18_r75369_normal:  			case ConfuserVersion.v18_r75369_dynamic:  			case ConfuserVersion.v18_r75369_native:  				minRev = 75369;  				maxRev = 77124;  				return true;    			case ConfuserVersion.v19_r77172_normal:  			case ConfuserVersion.v19_r77172_dynamic:  			case ConfuserVersion.v19_r77172_native:  				minRev = 77172;  				maxRev = 77501;  				return true;    			case ConfuserVersion.v19_r78056_normal:  			case ConfuserVersion.v19_r78056_dynamic:  			case ConfuserVersion.v19_r78056_native:  				minRev = 78056;  				// r78964 removed code that made it impossible to differentiate it from this  				// version. All we know is that it can't be r78363-r78963.  				maxRev = 79440;  				return true;    			case ConfuserVersion.v19_r78363_normal:  			case ConfuserVersion.v19_r78363_dynamic:  			case ConfuserVersion.v19_r78363_native:  				minRev = 78363;  				maxRev = 78963;  				return true;    			case ConfuserVersion.v19_r79630_normal:  			case ConfuserVersion.v19_r79630_dynamic:  			case ConfuserVersion.v19_r79630_native:  				minRev = 79630;  				maxRev = int.MaxValue;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,ConstantsDecrypterV18,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsDecrypterV18.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v18_r75367_normal:  			case ConfuserVersion.v18_r75367_dynamic:  			case ConfuserVersion.v18_r75367_native:  				minRev = 75367;  				maxRev = 75367;  				return true;    			case ConfuserVersion.v18_r75369_normal:  			case ConfuserVersion.v18_r75369_dynamic:  			case ConfuserVersion.v18_r75369_native:  				minRev = 75369;  				maxRev = 77124;  				return true;    			case ConfuserVersion.v19_r77172_normal:  			case ConfuserVersion.v19_r77172_dynamic:  			case ConfuserVersion.v19_r77172_native:  				minRev = 77172;  				maxRev = 77501;  				return true;    			case ConfuserVersion.v19_r78056_normal:  			case ConfuserVersion.v19_r78056_dynamic:  			case ConfuserVersion.v19_r78056_native:  				minRev = 78056;  				// r78964 removed code that made it impossible to differentiate it from this  				// version. All we know is that it can't be r78363-r78963.  				maxRev = 79440;  				return true;    			case ConfuserVersion.v19_r78363_normal:  			case ConfuserVersion.v19_r78363_dynamic:  			case ConfuserVersion.v19_r78363_native:  				minRev = 78363;  				maxRev = 78963;  				return true;    			case ConfuserVersion.v19_r79630_normal:  			case ConfuserVersion.v19_r79630_dynamic:  			case ConfuserVersion.v19_r79630_native:  				minRev = 79630;  				maxRev = int.MaxValue;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,ConstantsDecrypterV18,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsDecrypterV18.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v18_r75367_normal:  			case ConfuserVersion.v18_r75367_dynamic:  			case ConfuserVersion.v18_r75367_native:  				minRev = 75367;  				maxRev = 75367;  				return true;    			case ConfuserVersion.v18_r75369_normal:  			case ConfuserVersion.v18_r75369_dynamic:  			case ConfuserVersion.v18_r75369_native:  				minRev = 75369;  				maxRev = 77124;  				return true;    			case ConfuserVersion.v19_r77172_normal:  			case ConfuserVersion.v19_r77172_dynamic:  			case ConfuserVersion.v19_r77172_native:  				minRev = 77172;  				maxRev = 77501;  				return true;    			case ConfuserVersion.v19_r78056_normal:  			case ConfuserVersion.v19_r78056_dynamic:  			case ConfuserVersion.v19_r78056_native:  				minRev = 78056;  				// r78964 removed code that made it impossible to differentiate it from this  				// version. All we know is that it can't be r78363-r78963.  				maxRev = 79440;  				return true;    			case ConfuserVersion.v19_r78363_normal:  			case ConfuserVersion.v19_r78363_dynamic:  			case ConfuserVersion.v19_r78363_native:  				minRev = 78363;  				maxRev = 78963;  				return true;    			case ConfuserVersion.v19_r79630_normal:  			case ConfuserVersion.v19_r79630_dynamic:  			case ConfuserVersion.v19_r79630_native:  				minRev = 79630;  				maxRev = int.MaxValue;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,ConstantsDecrypterV18,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsDecrypterV18.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v18_r75367_normal:  			case ConfuserVersion.v18_r75367_dynamic:  			case ConfuserVersion.v18_r75367_native:  				minRev = 75367;  				maxRev = 75367;  				return true;    			case ConfuserVersion.v18_r75369_normal:  			case ConfuserVersion.v18_r75369_dynamic:  			case ConfuserVersion.v18_r75369_native:  				minRev = 75369;  				maxRev = 77124;  				return true;    			case ConfuserVersion.v19_r77172_normal:  			case ConfuserVersion.v19_r77172_dynamic:  			case ConfuserVersion.v19_r77172_native:  				minRev = 77172;  				maxRev = 77501;  				return true;    			case ConfuserVersion.v19_r78056_normal:  			case ConfuserVersion.v19_r78056_dynamic:  			case ConfuserVersion.v19_r78056_native:  				minRev = 78056;  				// r78964 removed code that made it impossible to differentiate it from this  				// version. All we know is that it can't be r78363-r78963.  				maxRev = 79440;  				return true;    			case ConfuserVersion.v19_r78363_normal:  			case ConfuserVersion.v19_r78363_dynamic:  			case ConfuserVersion.v19_r78363_native:  				minRev = 78363;  				maxRev = 78963;  				return true;    			case ConfuserVersion.v19_r79630_normal:  			case ConfuserVersion.v19_r79630_dynamic:  			case ConfuserVersion.v19_r79630_native:  				minRev = 79630;  				maxRev = int.MaxValue;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,ConstantsDecrypterV18,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsDecrypterV18.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v18_r75367_normal:  			case ConfuserVersion.v18_r75367_dynamic:  			case ConfuserVersion.v18_r75367_native:  				minRev = 75367;  				maxRev = 75367;  				return true;    			case ConfuserVersion.v18_r75369_normal:  			case ConfuserVersion.v18_r75369_dynamic:  			case ConfuserVersion.v18_r75369_native:  				minRev = 75369;  				maxRev = 77124;  				return true;    			case ConfuserVersion.v19_r77172_normal:  			case ConfuserVersion.v19_r77172_dynamic:  			case ConfuserVersion.v19_r77172_native:  				minRev = 77172;  				maxRev = 77501;  				return true;    			case ConfuserVersion.v19_r78056_normal:  			case ConfuserVersion.v19_r78056_dynamic:  			case ConfuserVersion.v19_r78056_native:  				minRev = 78056;  				// r78964 removed code that made it impossible to differentiate it from this  				// version. All we know is that it can't be r78363-r78963.  				maxRev = 79440;  				return true;    			case ConfuserVersion.v19_r78363_normal:  			case ConfuserVersion.v19_r78363_dynamic:  			case ConfuserVersion.v19_r78363_native:  				minRev = 78363;  				maxRev = 78963;  				return true;    			case ConfuserVersion.v19_r79630_normal:  			case ConfuserVersion.v19_r79630_dynamic:  			case ConfuserVersion.v19_r79630_native:  				minRev = 79630;  				maxRev = int.MaxValue;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,ConstantsFolder,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ConstantsFolder.cs,Deobfuscate,The following statement contains a magic number: block.Replace(i' 2' newInstr);
Magic Number,de4dot.code.deobfuscators.Confuser,Deobfuscator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\Deobfuscator.cs,DetectInternal,The following statement contains a magic number: val += 100 + 10 * (sum - 1);
Magic Number,de4dot.code.deobfuscators.Confuser,Deobfuscator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\Deobfuscator.cs,DetectInternal,The following statement contains a magic number: val += 100 + 10 * (sum - 1);
Magic Number,de4dot.code.deobfuscators.Confuser,Deobfuscator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\Deobfuscator.cs,SetConfuserVersion,The following statement contains a magic number: val.Groups.Count < 5
Magic Number,de4dot.code.deobfuscators.Confuser,Deobfuscator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\Deobfuscator.cs,SetConfuserVersion,The following statement contains a magic number: approxVersion = new Version(int.Parse(val.Groups[1].ToString())'  										int.Parse(val.Groups[2].ToString())'  										int.Parse(val.Groups[3].ToString())'  										int.Parse(val.Groups[4].ToString()));
Magic Number,de4dot.code.deobfuscators.Confuser,Deobfuscator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\Deobfuscator.cs,SetConfuserVersion,The following statement contains a magic number: approxVersion = new Version(int.Parse(val.Groups[1].ToString())'  										int.Parse(val.Groups[2].ToString())'  										int.Parse(val.Groups[3].ToString())'  										int.Parse(val.Groups[4].ToString()));
Magic Number,de4dot.code.deobfuscators.Confuser,Deobfuscator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\Deobfuscator.cs,SetConfuserVersion,The following statement contains a magic number: approxVersion = new Version(int.Parse(val.Groups[1].ToString())'  										int.Parse(val.Groups[2].ToString())'  										int.Parse(val.Groups[3].ToString())'  										int.Parse(val.Groups[4].ToString()));
Magic Number,de4dot.code.deobfuscators.Confuser,JitMethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\JitMethodsDecrypter.cs,CheckType,The following statement contains a magic number: switch (type.NestedTypes.Count) {  			case 35:  				if (type.Fields.Count == 9)  					theVersion = ConfuserVersion.v17_r73404;  				else if (type.Fields.Count == 10)  					theVersion = ConfuserVersion.v17_r73430;  				else  					return false;  				break;    			case 38:  				switch (CountInt32s(compileMethod' 0xFF)) {  				case 2: theVersion = ConfuserVersion.v17_r73477; break;  				case 4: theVersion = ConfuserVersion.v17_r73479; break;  				default: return false;  				}  				break;    			case 39:  				if (!DotNetUtils.CallsMethod(initMethod' "System.Void System.Console::WriteLine(System.Char)")) {  					if (DotNetUtils.CallsMethod(decryptMethod' "System.Security.Cryptography.Rijndael System.Security.Cryptography.Rijndael::Create()"))  						theVersion = ConfuserVersion.v17_r74021;  					else  						theVersion = ConfuserVersion.v18_r75291;  				}  				else if (DotNetUtils.CallsMethod(decryptMethod' "System.Security.Cryptography.Rijndael System.Security.Cryptography.Rijndael::Create()"))  					theVersion = ConfuserVersion.v18_r75257;  				else  					theVersion = ConfuserVersion.v18_r75288;  				break;    			case 27:  				if (DotNetUtils.CallsMethod(initMethod' "System.Int32 System.String::get_Length()"))  					theVersion = ConfuserVersion.v18_r75402;  				else  					theVersion = ConfuserVersion.v19_r75725;  				break;    			default:  				return false;  			}
Magic Number,de4dot.code.deobfuscators.Confuser,JitMethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\JitMethodsDecrypter.cs,CheckType,The following statement contains a magic number: switch (type.NestedTypes.Count) {  			case 35:  				if (type.Fields.Count == 9)  					theVersion = ConfuserVersion.v17_r73404;  				else if (type.Fields.Count == 10)  					theVersion = ConfuserVersion.v17_r73430;  				else  					return false;  				break;    			case 38:  				switch (CountInt32s(compileMethod' 0xFF)) {  				case 2: theVersion = ConfuserVersion.v17_r73477; break;  				case 4: theVersion = ConfuserVersion.v17_r73479; break;  				default: return false;  				}  				break;    			case 39:  				if (!DotNetUtils.CallsMethod(initMethod' "System.Void System.Console::WriteLine(System.Char)")) {  					if (DotNetUtils.CallsMethod(decryptMethod' "System.Security.Cryptography.Rijndael System.Security.Cryptography.Rijndael::Create()"))  						theVersion = ConfuserVersion.v17_r74021;  					else  						theVersion = ConfuserVersion.v18_r75291;  				}  				else if (DotNetUtils.CallsMethod(decryptMethod' "System.Security.Cryptography.Rijndael System.Security.Cryptography.Rijndael::Create()"))  					theVersion = ConfuserVersion.v18_r75257;  				else  					theVersion = ConfuserVersion.v18_r75288;  				break;    			case 27:  				if (DotNetUtils.CallsMethod(initMethod' "System.Int32 System.String::get_Length()"))  					theVersion = ConfuserVersion.v18_r75402;  				else  					theVersion = ConfuserVersion.v19_r75725;  				break;    			default:  				return false;  			}
Magic Number,de4dot.code.deobfuscators.Confuser,JitMethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\JitMethodsDecrypter.cs,CheckType,The following statement contains a magic number: switch (type.NestedTypes.Count) {  			case 35:  				if (type.Fields.Count == 9)  					theVersion = ConfuserVersion.v17_r73404;  				else if (type.Fields.Count == 10)  					theVersion = ConfuserVersion.v17_r73430;  				else  					return false;  				break;    			case 38:  				switch (CountInt32s(compileMethod' 0xFF)) {  				case 2: theVersion = ConfuserVersion.v17_r73477; break;  				case 4: theVersion = ConfuserVersion.v17_r73479; break;  				default: return false;  				}  				break;    			case 39:  				if (!DotNetUtils.CallsMethod(initMethod' "System.Void System.Console::WriteLine(System.Char)")) {  					if (DotNetUtils.CallsMethod(decryptMethod' "System.Security.Cryptography.Rijndael System.Security.Cryptography.Rijndael::Create()"))  						theVersion = ConfuserVersion.v17_r74021;  					else  						theVersion = ConfuserVersion.v18_r75291;  				}  				else if (DotNetUtils.CallsMethod(decryptMethod' "System.Security.Cryptography.Rijndael System.Security.Cryptography.Rijndael::Create()"))  					theVersion = ConfuserVersion.v18_r75257;  				else  					theVersion = ConfuserVersion.v18_r75288;  				break;    			case 27:  				if (DotNetUtils.CallsMethod(initMethod' "System.Int32 System.String::get_Length()"))  					theVersion = ConfuserVersion.v18_r75402;  				else  					theVersion = ConfuserVersion.v19_r75725;  				break;    			default:  				return false;  			}
Magic Number,de4dot.code.deobfuscators.Confuser,JitMethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\JitMethodsDecrypter.cs,CheckType,The following statement contains a magic number: switch (type.NestedTypes.Count) {  			case 35:  				if (type.Fields.Count == 9)  					theVersion = ConfuserVersion.v17_r73404;  				else if (type.Fields.Count == 10)  					theVersion = ConfuserVersion.v17_r73430;  				else  					return false;  				break;    			case 38:  				switch (CountInt32s(compileMethod' 0xFF)) {  				case 2: theVersion = ConfuserVersion.v17_r73477; break;  				case 4: theVersion = ConfuserVersion.v17_r73479; break;  				default: return false;  				}  				break;    			case 39:  				if (!DotNetUtils.CallsMethod(initMethod' "System.Void System.Console::WriteLine(System.Char)")) {  					if (DotNetUtils.CallsMethod(decryptMethod' "System.Security.Cryptography.Rijndael System.Security.Cryptography.Rijndael::Create()"))  						theVersion = ConfuserVersion.v17_r74021;  					else  						theVersion = ConfuserVersion.v18_r75291;  				}  				else if (DotNetUtils.CallsMethod(decryptMethod' "System.Security.Cryptography.Rijndael System.Security.Cryptography.Rijndael::Create()"))  					theVersion = ConfuserVersion.v18_r75257;  				else  					theVersion = ConfuserVersion.v18_r75288;  				break;    			case 27:  				if (DotNetUtils.CallsMethod(initMethod' "System.Int32 System.String::get_Length()"))  					theVersion = ConfuserVersion.v18_r75402;  				else  					theVersion = ConfuserVersion.v19_r75725;  				break;    			default:  				return false;  			}
Magic Number,de4dot.code.deobfuscators.Confuser,JitMethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\JitMethodsDecrypter.cs,CheckType,The following statement contains a magic number: switch (type.NestedTypes.Count) {  			case 35:  				if (type.Fields.Count == 9)  					theVersion = ConfuserVersion.v17_r73404;  				else if (type.Fields.Count == 10)  					theVersion = ConfuserVersion.v17_r73430;  				else  					return false;  				break;    			case 38:  				switch (CountInt32s(compileMethod' 0xFF)) {  				case 2: theVersion = ConfuserVersion.v17_r73477; break;  				case 4: theVersion = ConfuserVersion.v17_r73479; break;  				default: return false;  				}  				break;    			case 39:  				if (!DotNetUtils.CallsMethod(initMethod' "System.Void System.Console::WriteLine(System.Char)")) {  					if (DotNetUtils.CallsMethod(decryptMethod' "System.Security.Cryptography.Rijndael System.Security.Cryptography.Rijndael::Create()"))  						theVersion = ConfuserVersion.v17_r74021;  					else  						theVersion = ConfuserVersion.v18_r75291;  				}  				else if (DotNetUtils.CallsMethod(decryptMethod' "System.Security.Cryptography.Rijndael System.Security.Cryptography.Rijndael::Create()"))  					theVersion = ConfuserVersion.v18_r75257;  				else  					theVersion = ConfuserVersion.v18_r75288;  				break;    			case 27:  				if (DotNetUtils.CallsMethod(initMethod' "System.Int32 System.String::get_Length()"))  					theVersion = ConfuserVersion.v18_r75402;  				else  					theVersion = ConfuserVersion.v19_r75725;  				break;    			default:  				return false;  			}
Magic Number,de4dot.code.deobfuscators.Confuser,JitMethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\JitMethodsDecrypter.cs,CheckType,The following statement contains a magic number: switch (type.NestedTypes.Count) {  			case 35:  				if (type.Fields.Count == 9)  					theVersion = ConfuserVersion.v17_r73404;  				else if (type.Fields.Count == 10)  					theVersion = ConfuserVersion.v17_r73430;  				else  					return false;  				break;    			case 38:  				switch (CountInt32s(compileMethod' 0xFF)) {  				case 2: theVersion = ConfuserVersion.v17_r73477; break;  				case 4: theVersion = ConfuserVersion.v17_r73479; break;  				default: return false;  				}  				break;    			case 39:  				if (!DotNetUtils.CallsMethod(initMethod' "System.Void System.Console::WriteLine(System.Char)")) {  					if (DotNetUtils.CallsMethod(decryptMethod' "System.Security.Cryptography.Rijndael System.Security.Cryptography.Rijndael::Create()"))  						theVersion = ConfuserVersion.v17_r74021;  					else  						theVersion = ConfuserVersion.v18_r75291;  				}  				else if (DotNetUtils.CallsMethod(decryptMethod' "System.Security.Cryptography.Rijndael System.Security.Cryptography.Rijndael::Create()"))  					theVersion = ConfuserVersion.v18_r75257;  				else  					theVersion = ConfuserVersion.v18_r75288;  				break;    			case 27:  				if (DotNetUtils.CallsMethod(initMethod' "System.Int32 System.String::get_Length()"))  					theVersion = ConfuserVersion.v18_r75402;  				else  					theVersion = ConfuserVersion.v19_r75725;  				break;    			default:  				return false;  			}
Magic Number,de4dot.code.deobfuscators.Confuser,JitMethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\JitMethodsDecrypter.cs,CheckType,The following statement contains a magic number: switch (type.NestedTypes.Count) {  			case 35:  				if (type.Fields.Count == 9)  					theVersion = ConfuserVersion.v17_r73404;  				else if (type.Fields.Count == 10)  					theVersion = ConfuserVersion.v17_r73430;  				else  					return false;  				break;    			case 38:  				switch (CountInt32s(compileMethod' 0xFF)) {  				case 2: theVersion = ConfuserVersion.v17_r73477; break;  				case 4: theVersion = ConfuserVersion.v17_r73479; break;  				default: return false;  				}  				break;    			case 39:  				if (!DotNetUtils.CallsMethod(initMethod' "System.Void System.Console::WriteLine(System.Char)")) {  					if (DotNetUtils.CallsMethod(decryptMethod' "System.Security.Cryptography.Rijndael System.Security.Cryptography.Rijndael::Create()"))  						theVersion = ConfuserVersion.v17_r74021;  					else  						theVersion = ConfuserVersion.v18_r75291;  				}  				else if (DotNetUtils.CallsMethod(decryptMethod' "System.Security.Cryptography.Rijndael System.Security.Cryptography.Rijndael::Create()"))  					theVersion = ConfuserVersion.v18_r75257;  				else  					theVersion = ConfuserVersion.v18_r75288;  				break;    			case 27:  				if (DotNetUtils.CallsMethod(initMethod' "System.Int32 System.String::get_Length()"))  					theVersion = ConfuserVersion.v18_r75402;  				else  					theVersion = ConfuserVersion.v19_r75725;  				break;    			default:  				return false;  			}
Magic Number,de4dot.code.deobfuscators.Confuser,JitMethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\JitMethodsDecrypter.cs,CheckType,The following statement contains a magic number: switch (type.NestedTypes.Count) {  			case 35:  				if (type.Fields.Count == 9)  					theVersion = ConfuserVersion.v17_r73404;  				else if (type.Fields.Count == 10)  					theVersion = ConfuserVersion.v17_r73430;  				else  					return false;  				break;    			case 38:  				switch (CountInt32s(compileMethod' 0xFF)) {  				case 2: theVersion = ConfuserVersion.v17_r73477; break;  				case 4: theVersion = ConfuserVersion.v17_r73479; break;  				default: return false;  				}  				break;    			case 39:  				if (!DotNetUtils.CallsMethod(initMethod' "System.Void System.Console::WriteLine(System.Char)")) {  					if (DotNetUtils.CallsMethod(decryptMethod' "System.Security.Cryptography.Rijndael System.Security.Cryptography.Rijndael::Create()"))  						theVersion = ConfuserVersion.v17_r74021;  					else  						theVersion = ConfuserVersion.v18_r75291;  				}  				else if (DotNetUtils.CallsMethod(decryptMethod' "System.Security.Cryptography.Rijndael System.Security.Cryptography.Rijndael::Create()"))  					theVersion = ConfuserVersion.v18_r75257;  				else  					theVersion = ConfuserVersion.v18_r75288;  				break;    			case 27:  				if (DotNetUtils.CallsMethod(initMethod' "System.Int32 System.String::get_Length()"))  					theVersion = ConfuserVersion.v18_r75402;  				else  					theVersion = ConfuserVersion.v19_r75725;  				break;    			default:  				return false;  			}
Magic Number,de4dot.code.deobfuscators.Confuser,JitMethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\JitMethodsDecrypter.cs,FindCompileMethod,The following statement contains a magic number: sig == null || sig.Params.Count != 6
Magic Number,de4dot.code.deobfuscators.Confuser,JitMethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\JitMethodsDecrypter.cs,FindCompileMethod,The following statement contains a magic number: sig.Params[3].GetElementType() != ElementType.U4
Magic Number,de4dot.code.deobfuscators.Confuser,JitMethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\JitMethodsDecrypter.cs,FindCompileMethod,The following statement contains a magic number: sig.Params[4].GetFullName() != "System.Byte**"
Magic Number,de4dot.code.deobfuscators.Confuser,JitMethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\JitMethodsDecrypter.cs,FindCompileMethod,The following statement contains a magic number: sig.Params[5].GetFullName() != "System.UInt32*"
Magic Number,de4dot.code.deobfuscators.Confuser,JitMethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\JitMethodsDecrypter.cs,FindHookConstructStr,The following statement contains a magic number: nested.Fields.Count != 8 && nested.Fields.Count != 10
Magic Number,de4dot.code.deobfuscators.Confuser,JitMethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\JitMethodsDecrypter.cs,FindHookConstructStr,The following statement contains a magic number: nested.Fields.Count != 8 && nested.Fields.Count != 10
Magic Number,de4dot.code.deobfuscators.Confuser,JitMethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\JitMethodsDecrypter.cs,FindHookConstructStr,The following statement contains a magic number: sig == null || sig.Params.Count != 4
Magic Number,de4dot.code.deobfuscators.Confuser,JitMethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\JitMethodsDecrypter.cs,FindHookConstructStr,The following statement contains a magic number: sig.Params[2].GetElementType() != ElementType.U4
Magic Number,de4dot.code.deobfuscators.Confuser,JitMethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\JitMethodsDecrypter.cs,FindHookConstructStr,The following statement contains a magic number: sig.Params[3].GetElementType() != ElementType.I && sig.Params[3].GetFullName() != "System.IntPtr&"
Magic Number,de4dot.code.deobfuscators.Confuser,JitMethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\JitMethodsDecrypter.cs,FindHookConstructStr,The following statement contains a magic number: sig.Params[3].GetElementType() != ElementType.I && sig.Params[3].GetFullName() != "System.IntPtr&"
Magic Number,de4dot.code.deobfuscators.Confuser,JitMethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\JitMethodsDecrypter.cs,FindKey4,The following statement contains a magic number: index + 2 >= instrs.Count
Magic Number,de4dot.code.deobfuscators.Confuser,JitMethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\JitMethodsDecrypter.cs,FindKey4,The following statement contains a magic number: var ldci4 = instrs[index + 2];
Magic Number,de4dot.code.deobfuscators.Confuser,JitMethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\JitMethodsDecrypter.cs,FindKey5,The following statement contains a magic number: !ldci4_8.IsLdcI4() || ldci4_8.GetLdcI4Value() != 8
Magic Number,de4dot.code.deobfuscators.Confuser,JitMethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\JitMethodsDecrypter.cs,FindKey5,The following statement contains a magic number: i + 4 < instrs.Count
Magic Number,de4dot.code.deobfuscators.Confuser,JitMethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\JitMethodsDecrypter.cs,Decrypt_v17_r73404,The following statement contains a magic number: int key = BitConverter.ToInt32(fileData' (int)bodyOffset + 6);
Magic Number,de4dot.code.deobfuscators.Confuser,JitMethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\JitMethodsDecrypter.cs,Decrypt_v17_r73404,The following statement contains a magic number: int mdOffs = BitConverter.ToInt32(fileData' (int)bodyOffset + 2) ^ key;
Magic Number,de4dot.code.deobfuscators.Confuser,JitMethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\JitMethodsDecrypter.cs,Decrypt_v17_r73404,The following statement contains a magic number: int len = BitConverter.ToInt32(fileData' (int)bodyOffset + 11) ^ ~key;
Magic Number,de4dot.code.deobfuscators.Confuser,JitMethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\JitMethodsDecrypter.cs,Decrypt_v17_r73404,The following statement contains a magic number: var codeData = DecryptMethodData_v17_r73404(methodsData' mdOffs + 2' (uint)key' len);
Magic Number,de4dot.code.deobfuscators.Confuser,JitMethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\JitMethodsDecrypter.cs,Decrypt,The following statement contains a magic number: int key = BitConverter.ToInt32(fileData' (int)bodyOffset + 6);
Magic Number,de4dot.code.deobfuscators.Confuser,JitMethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\JitMethodsDecrypter.cs,Decrypt,The following statement contains a magic number: int mdOffs = BitConverter.ToInt32(fileData' (int)bodyOffset + 2) ^ key;
Magic Number,de4dot.code.deobfuscators.Confuser,JitMethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\JitMethodsDecrypter.cs,Decrypt,The following statement contains a magic number: int len = BitConverter.ToInt32(fileData' (int)bodyOffset + 11) ^ ~key;
Magic Number,de4dot.code.deobfuscators.Confuser,JitMethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\JitMethodsDecrypter.cs,Decrypt,The following statement contains a magic number: int methodDataOffset = mdOffs + 2;
Magic Number,de4dot.code.deobfuscators.Confuser,JitMethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\JitMethodsDecrypter.cs,Decrypt,The following statement contains a magic number: dm.mhLocalVarSigTok != 0 && (dm.mhLocalVarSigTok >> 24) != 0x11
Magic Number,de4dot.code.deobfuscators.Confuser,JitMethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\JitMethodsDecrypter.cs,Decrypt,The following statement contains a magic number: dm.mhFlags |= 8;
Magic Number,de4dot.code.deobfuscators.Confuser,JitMethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\JitMethodsDecrypter.cs,Decrypt,The following statement contains a magic number: bool isTiny = dm.code.Length <= 0x3F &&  							dm.mhLocalVarSigTok == 0 &&  							dm.extraSections == null &&  							dm.mhMaxStack == 8;
Magic Number,de4dot.code.deobfuscators.Confuser,JitMethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\JitMethodsDecrypter.cs,ReadExceptionHandlers,The following statement contains a magic number: ulong header64 = (((ulong)numExceptions * 24) << 8) | 0x41;
Magic Number,de4dot.code.deobfuscators.Confuser,JitMethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\JitMethodsDecrypter.cs,ReadExceptionHandlers,The following statement contains a magic number: ulong header64 = (((ulong)numExceptions * 24) << 8) | 0x41;
Magic Number,de4dot.code.deobfuscators.Confuser,JitMethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\JitMethodsDecrypter.cs,DecryptMethodData_v17_r73404,The following statement contains a magic number: data[i] = (byte)(fileData[offset + i] ^ kbytes[i & 3]);
Magic Number,de4dot.code.deobfuscators.Confuser,JitMethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\JitMethodsDecrypter.cs,ReadUserString,The following statement contains a magic number: reader.Position = (token & ~0xFF800000) + 2;
Magic Number,de4dot.code.deobfuscators.Confuser,JitMethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\JitMethodsDecrypter.cs,ReadUserString,The following statement contains a magic number: int chars = len / 2;
Magic Number,de4dot.code.deobfuscators.Confuser,JitMethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\JitMethodsDecrypter.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v17_r73404:  				minRev = 73404;  				maxRev = 73404;  				return true;    			case ConfuserVersion.v17_r73430:  				minRev = 73430;  				maxRev = 73430;  				return true;    			case ConfuserVersion.v17_r73477:  				minRev = 73477;  				maxRev = 73477;  				return true;    			case ConfuserVersion.v17_r73479:  				minRev = 73479;  				maxRev = 73822;  				return true;    			case ConfuserVersion.v17_r74021:  				minRev = 74021;  				maxRev = 75184;  				return true;    			case ConfuserVersion.v18_r75257:  				minRev = 75257;  				maxRev = 75267;  				return true;    			case ConfuserVersion.v18_r75288:  				minRev = 75288;  				maxRev = 75288;  				return true;    			case ConfuserVersion.v18_r75291:  				minRev = 75291;  				maxRev = 75369;  				return true;    			case ConfuserVersion.v18_r75402:  				minRev = 75402;  				maxRev = 75720;  				return true;    			case ConfuserVersion.v19_r75725:  				minRev = 75725;  				maxRev = int.MaxValue;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,JitMethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\JitMethodsDecrypter.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v17_r73404:  				minRev = 73404;  				maxRev = 73404;  				return true;    			case ConfuserVersion.v17_r73430:  				minRev = 73430;  				maxRev = 73430;  				return true;    			case ConfuserVersion.v17_r73477:  				minRev = 73477;  				maxRev = 73477;  				return true;    			case ConfuserVersion.v17_r73479:  				minRev = 73479;  				maxRev = 73822;  				return true;    			case ConfuserVersion.v17_r74021:  				minRev = 74021;  				maxRev = 75184;  				return true;    			case ConfuserVersion.v18_r75257:  				minRev = 75257;  				maxRev = 75267;  				return true;    			case ConfuserVersion.v18_r75288:  				minRev = 75288;  				maxRev = 75288;  				return true;    			case ConfuserVersion.v18_r75291:  				minRev = 75291;  				maxRev = 75369;  				return true;    			case ConfuserVersion.v18_r75402:  				minRev = 75402;  				maxRev = 75720;  				return true;    			case ConfuserVersion.v19_r75725:  				minRev = 75725;  				maxRev = int.MaxValue;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,JitMethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\JitMethodsDecrypter.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v17_r73404:  				minRev = 73404;  				maxRev = 73404;  				return true;    			case ConfuserVersion.v17_r73430:  				minRev = 73430;  				maxRev = 73430;  				return true;    			case ConfuserVersion.v17_r73477:  				minRev = 73477;  				maxRev = 73477;  				return true;    			case ConfuserVersion.v17_r73479:  				minRev = 73479;  				maxRev = 73822;  				return true;    			case ConfuserVersion.v17_r74021:  				minRev = 74021;  				maxRev = 75184;  				return true;    			case ConfuserVersion.v18_r75257:  				minRev = 75257;  				maxRev = 75267;  				return true;    			case ConfuserVersion.v18_r75288:  				minRev = 75288;  				maxRev = 75288;  				return true;    			case ConfuserVersion.v18_r75291:  				minRev = 75291;  				maxRev = 75369;  				return true;    			case ConfuserVersion.v18_r75402:  				minRev = 75402;  				maxRev = 75720;  				return true;    			case ConfuserVersion.v19_r75725:  				minRev = 75725;  				maxRev = int.MaxValue;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,JitMethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\JitMethodsDecrypter.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v17_r73404:  				minRev = 73404;  				maxRev = 73404;  				return true;    			case ConfuserVersion.v17_r73430:  				minRev = 73430;  				maxRev = 73430;  				return true;    			case ConfuserVersion.v17_r73477:  				minRev = 73477;  				maxRev = 73477;  				return true;    			case ConfuserVersion.v17_r73479:  				minRev = 73479;  				maxRev = 73822;  				return true;    			case ConfuserVersion.v17_r74021:  				minRev = 74021;  				maxRev = 75184;  				return true;    			case ConfuserVersion.v18_r75257:  				minRev = 75257;  				maxRev = 75267;  				return true;    			case ConfuserVersion.v18_r75288:  				minRev = 75288;  				maxRev = 75288;  				return true;    			case ConfuserVersion.v18_r75291:  				minRev = 75291;  				maxRev = 75369;  				return true;    			case ConfuserVersion.v18_r75402:  				minRev = 75402;  				maxRev = 75720;  				return true;    			case ConfuserVersion.v19_r75725:  				minRev = 75725;  				maxRev = int.MaxValue;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,JitMethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\JitMethodsDecrypter.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v17_r73404:  				minRev = 73404;  				maxRev = 73404;  				return true;    			case ConfuserVersion.v17_r73430:  				minRev = 73430;  				maxRev = 73430;  				return true;    			case ConfuserVersion.v17_r73477:  				minRev = 73477;  				maxRev = 73477;  				return true;    			case ConfuserVersion.v17_r73479:  				minRev = 73479;  				maxRev = 73822;  				return true;    			case ConfuserVersion.v17_r74021:  				minRev = 74021;  				maxRev = 75184;  				return true;    			case ConfuserVersion.v18_r75257:  				minRev = 75257;  				maxRev = 75267;  				return true;    			case ConfuserVersion.v18_r75288:  				minRev = 75288;  				maxRev = 75288;  				return true;    			case ConfuserVersion.v18_r75291:  				minRev = 75291;  				maxRev = 75369;  				return true;    			case ConfuserVersion.v18_r75402:  				minRev = 75402;  				maxRev = 75720;  				return true;    			case ConfuserVersion.v19_r75725:  				minRev = 75725;  				maxRev = int.MaxValue;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,JitMethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\JitMethodsDecrypter.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v17_r73404:  				minRev = 73404;  				maxRev = 73404;  				return true;    			case ConfuserVersion.v17_r73430:  				minRev = 73430;  				maxRev = 73430;  				return true;    			case ConfuserVersion.v17_r73477:  				minRev = 73477;  				maxRev = 73477;  				return true;    			case ConfuserVersion.v17_r73479:  				minRev = 73479;  				maxRev = 73822;  				return true;    			case ConfuserVersion.v17_r74021:  				minRev = 74021;  				maxRev = 75184;  				return true;    			case ConfuserVersion.v18_r75257:  				minRev = 75257;  				maxRev = 75267;  				return true;    			case ConfuserVersion.v18_r75288:  				minRev = 75288;  				maxRev = 75288;  				return true;    			case ConfuserVersion.v18_r75291:  				minRev = 75291;  				maxRev = 75369;  				return true;    			case ConfuserVersion.v18_r75402:  				minRev = 75402;  				maxRev = 75720;  				return true;    			case ConfuserVersion.v19_r75725:  				minRev = 75725;  				maxRev = int.MaxValue;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,JitMethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\JitMethodsDecrypter.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v17_r73404:  				minRev = 73404;  				maxRev = 73404;  				return true;    			case ConfuserVersion.v17_r73430:  				minRev = 73430;  				maxRev = 73430;  				return true;    			case ConfuserVersion.v17_r73477:  				minRev = 73477;  				maxRev = 73477;  				return true;    			case ConfuserVersion.v17_r73479:  				minRev = 73479;  				maxRev = 73822;  				return true;    			case ConfuserVersion.v17_r74021:  				minRev = 74021;  				maxRev = 75184;  				return true;    			case ConfuserVersion.v18_r75257:  				minRev = 75257;  				maxRev = 75267;  				return true;    			case ConfuserVersion.v18_r75288:  				minRev = 75288;  				maxRev = 75288;  				return true;    			case ConfuserVersion.v18_r75291:  				minRev = 75291;  				maxRev = 75369;  				return true;    			case ConfuserVersion.v18_r75402:  				minRev = 75402;  				maxRev = 75720;  				return true;    			case ConfuserVersion.v19_r75725:  				minRev = 75725;  				maxRev = int.MaxValue;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,JitMethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\JitMethodsDecrypter.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v17_r73404:  				minRev = 73404;  				maxRev = 73404;  				return true;    			case ConfuserVersion.v17_r73430:  				minRev = 73430;  				maxRev = 73430;  				return true;    			case ConfuserVersion.v17_r73477:  				minRev = 73477;  				maxRev = 73477;  				return true;    			case ConfuserVersion.v17_r73479:  				minRev = 73479;  				maxRev = 73822;  				return true;    			case ConfuserVersion.v17_r74021:  				minRev = 74021;  				maxRev = 75184;  				return true;    			case ConfuserVersion.v18_r75257:  				minRev = 75257;  				maxRev = 75267;  				return true;    			case ConfuserVersion.v18_r75288:  				minRev = 75288;  				maxRev = 75288;  				return true;    			case ConfuserVersion.v18_r75291:  				minRev = 75291;  				maxRev = 75369;  				return true;    			case ConfuserVersion.v18_r75402:  				minRev = 75402;  				maxRev = 75720;  				return true;    			case ConfuserVersion.v19_r75725:  				minRev = 75725;  				maxRev = int.MaxValue;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,JitMethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\JitMethodsDecrypter.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v17_r73404:  				minRev = 73404;  				maxRev = 73404;  				return true;    			case ConfuserVersion.v17_r73430:  				minRev = 73430;  				maxRev = 73430;  				return true;    			case ConfuserVersion.v17_r73477:  				minRev = 73477;  				maxRev = 73477;  				return true;    			case ConfuserVersion.v17_r73479:  				minRev = 73479;  				maxRev = 73822;  				return true;    			case ConfuserVersion.v17_r74021:  				minRev = 74021;  				maxRev = 75184;  				return true;    			case ConfuserVersion.v18_r75257:  				minRev = 75257;  				maxRev = 75267;  				return true;    			case ConfuserVersion.v18_r75288:  				minRev = 75288;  				maxRev = 75288;  				return true;    			case ConfuserVersion.v18_r75291:  				minRev = 75291;  				maxRev = 75369;  				return true;    			case ConfuserVersion.v18_r75402:  				minRev = 75402;  				maxRev = 75720;  				return true;    			case ConfuserVersion.v19_r75725:  				minRev = 75725;  				maxRev = int.MaxValue;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,JitMethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\JitMethodsDecrypter.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v17_r73404:  				minRev = 73404;  				maxRev = 73404;  				return true;    			case ConfuserVersion.v17_r73430:  				minRev = 73430;  				maxRev = 73430;  				return true;    			case ConfuserVersion.v17_r73477:  				minRev = 73477;  				maxRev = 73477;  				return true;    			case ConfuserVersion.v17_r73479:  				minRev = 73479;  				maxRev = 73822;  				return true;    			case ConfuserVersion.v17_r74021:  				minRev = 74021;  				maxRev = 75184;  				return true;    			case ConfuserVersion.v18_r75257:  				minRev = 75257;  				maxRev = 75267;  				return true;    			case ConfuserVersion.v18_r75288:  				minRev = 75288;  				maxRev = 75288;  				return true;    			case ConfuserVersion.v18_r75291:  				minRev = 75291;  				maxRev = 75369;  				return true;    			case ConfuserVersion.v18_r75402:  				minRev = 75402;  				maxRev = 75720;  				return true;    			case ConfuserVersion.v19_r75725:  				minRev = 75725;  				maxRev = int.MaxValue;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,JitMethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\JitMethodsDecrypter.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v17_r73404:  				minRev = 73404;  				maxRev = 73404;  				return true;    			case ConfuserVersion.v17_r73430:  				minRev = 73430;  				maxRev = 73430;  				return true;    			case ConfuserVersion.v17_r73477:  				minRev = 73477;  				maxRev = 73477;  				return true;    			case ConfuserVersion.v17_r73479:  				minRev = 73479;  				maxRev = 73822;  				return true;    			case ConfuserVersion.v17_r74021:  				minRev = 74021;  				maxRev = 75184;  				return true;    			case ConfuserVersion.v18_r75257:  				minRev = 75257;  				maxRev = 75267;  				return true;    			case ConfuserVersion.v18_r75288:  				minRev = 75288;  				maxRev = 75288;  				return true;    			case ConfuserVersion.v18_r75291:  				minRev = 75291;  				maxRev = 75369;  				return true;    			case ConfuserVersion.v18_r75402:  				minRev = 75402;  				maxRev = 75720;  				return true;    			case ConfuserVersion.v19_r75725:  				minRev = 75725;  				maxRev = int.MaxValue;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,JitMethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\JitMethodsDecrypter.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v17_r73404:  				minRev = 73404;  				maxRev = 73404;  				return true;    			case ConfuserVersion.v17_r73430:  				minRev = 73430;  				maxRev = 73430;  				return true;    			case ConfuserVersion.v17_r73477:  				minRev = 73477;  				maxRev = 73477;  				return true;    			case ConfuserVersion.v17_r73479:  				minRev = 73479;  				maxRev = 73822;  				return true;    			case ConfuserVersion.v17_r74021:  				minRev = 74021;  				maxRev = 75184;  				return true;    			case ConfuserVersion.v18_r75257:  				minRev = 75257;  				maxRev = 75267;  				return true;    			case ConfuserVersion.v18_r75288:  				minRev = 75288;  				maxRev = 75288;  				return true;    			case ConfuserVersion.v18_r75291:  				minRev = 75291;  				maxRev = 75369;  				return true;    			case ConfuserVersion.v18_r75402:  				minRev = 75402;  				maxRev = 75720;  				return true;    			case ConfuserVersion.v19_r75725:  				minRev = 75725;  				maxRev = int.MaxValue;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,JitMethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\JitMethodsDecrypter.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v17_r73404:  				minRev = 73404;  				maxRev = 73404;  				return true;    			case ConfuserVersion.v17_r73430:  				minRev = 73430;  				maxRev = 73430;  				return true;    			case ConfuserVersion.v17_r73477:  				minRev = 73477;  				maxRev = 73477;  				return true;    			case ConfuserVersion.v17_r73479:  				minRev = 73479;  				maxRev = 73822;  				return true;    			case ConfuserVersion.v17_r74021:  				minRev = 74021;  				maxRev = 75184;  				return true;    			case ConfuserVersion.v18_r75257:  				minRev = 75257;  				maxRev = 75267;  				return true;    			case ConfuserVersion.v18_r75288:  				minRev = 75288;  				maxRev = 75288;  				return true;    			case ConfuserVersion.v18_r75291:  				minRev = 75291;  				maxRev = 75369;  				return true;    			case ConfuserVersion.v18_r75402:  				minRev = 75402;  				maxRev = 75720;  				return true;    			case ConfuserVersion.v19_r75725:  				minRev = 75725;  				maxRev = int.MaxValue;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,JitMethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\JitMethodsDecrypter.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v17_r73404:  				minRev = 73404;  				maxRev = 73404;  				return true;    			case ConfuserVersion.v17_r73430:  				minRev = 73430;  				maxRev = 73430;  				return true;    			case ConfuserVersion.v17_r73477:  				minRev = 73477;  				maxRev = 73477;  				return true;    			case ConfuserVersion.v17_r73479:  				minRev = 73479;  				maxRev = 73822;  				return true;    			case ConfuserVersion.v17_r74021:  				minRev = 74021;  				maxRev = 75184;  				return true;    			case ConfuserVersion.v18_r75257:  				minRev = 75257;  				maxRev = 75267;  				return true;    			case ConfuserVersion.v18_r75288:  				minRev = 75288;  				maxRev = 75288;  				return true;    			case ConfuserVersion.v18_r75291:  				minRev = 75291;  				maxRev = 75369;  				return true;    			case ConfuserVersion.v18_r75402:  				minRev = 75402;  				maxRev = 75720;  				return true;    			case ConfuserVersion.v19_r75725:  				minRev = 75725;  				maxRev = int.MaxValue;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,JitMethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\JitMethodsDecrypter.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v17_r73404:  				minRev = 73404;  				maxRev = 73404;  				return true;    			case ConfuserVersion.v17_r73430:  				minRev = 73430;  				maxRev = 73430;  				return true;    			case ConfuserVersion.v17_r73477:  				minRev = 73477;  				maxRev = 73477;  				return true;    			case ConfuserVersion.v17_r73479:  				minRev = 73479;  				maxRev = 73822;  				return true;    			case ConfuserVersion.v17_r74021:  				minRev = 74021;  				maxRev = 75184;  				return true;    			case ConfuserVersion.v18_r75257:  				minRev = 75257;  				maxRev = 75267;  				return true;    			case ConfuserVersion.v18_r75288:  				minRev = 75288;  				maxRev = 75288;  				return true;    			case ConfuserVersion.v18_r75291:  				minRev = 75291;  				maxRev = 75369;  				return true;    			case ConfuserVersion.v18_r75402:  				minRev = 75402;  				maxRev = 75720;  				return true;    			case ConfuserVersion.v19_r75725:  				minRev = 75725;  				maxRev = int.MaxValue;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,JitMethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\JitMethodsDecrypter.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v17_r73404:  				minRev = 73404;  				maxRev = 73404;  				return true;    			case ConfuserVersion.v17_r73430:  				minRev = 73430;  				maxRev = 73430;  				return true;    			case ConfuserVersion.v17_r73477:  				minRev = 73477;  				maxRev = 73477;  				return true;    			case ConfuserVersion.v17_r73479:  				minRev = 73479;  				maxRev = 73822;  				return true;    			case ConfuserVersion.v17_r74021:  				minRev = 74021;  				maxRev = 75184;  				return true;    			case ConfuserVersion.v18_r75257:  				minRev = 75257;  				maxRev = 75267;  				return true;    			case ConfuserVersion.v18_r75288:  				minRev = 75288;  				maxRev = 75288;  				return true;    			case ConfuserVersion.v18_r75291:  				minRev = 75291;  				maxRev = 75369;  				return true;    			case ConfuserVersion.v18_r75402:  				minRev = 75402;  				maxRev = 75720;  				return true;    			case ConfuserVersion.v19_r75725:  				minRev = 75725;  				maxRev = int.MaxValue;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,JitMethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\JitMethodsDecrypter.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v17_r73404:  				minRev = 73404;  				maxRev = 73404;  				return true;    			case ConfuserVersion.v17_r73430:  				minRev = 73430;  				maxRev = 73430;  				return true;    			case ConfuserVersion.v17_r73477:  				minRev = 73477;  				maxRev = 73477;  				return true;    			case ConfuserVersion.v17_r73479:  				minRev = 73479;  				maxRev = 73822;  				return true;    			case ConfuserVersion.v17_r74021:  				minRev = 74021;  				maxRev = 75184;  				return true;    			case ConfuserVersion.v18_r75257:  				minRev = 75257;  				maxRev = 75267;  				return true;    			case ConfuserVersion.v18_r75288:  				minRev = 75288;  				maxRev = 75288;  				return true;    			case ConfuserVersion.v18_r75291:  				minRev = 75291;  				maxRev = 75369;  				return true;    			case ConfuserVersion.v18_r75402:  				minRev = 75402;  				maxRev = 75720;  				return true;    			case ConfuserVersion.v19_r75725:  				minRev = 75725;  				maxRev = int.MaxValue;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,JitMethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\JitMethodsDecrypter.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v17_r73404:  				minRev = 73404;  				maxRev = 73404;  				return true;    			case ConfuserVersion.v17_r73430:  				minRev = 73430;  				maxRev = 73430;  				return true;    			case ConfuserVersion.v17_r73477:  				minRev = 73477;  				maxRev = 73477;  				return true;    			case ConfuserVersion.v17_r73479:  				minRev = 73479;  				maxRev = 73822;  				return true;    			case ConfuserVersion.v17_r74021:  				minRev = 74021;  				maxRev = 75184;  				return true;    			case ConfuserVersion.v18_r75257:  				minRev = 75257;  				maxRev = 75267;  				return true;    			case ConfuserVersion.v18_r75288:  				minRev = 75288;  				maxRev = 75288;  				return true;    			case ConfuserVersion.v18_r75291:  				minRev = 75291;  				maxRev = 75369;  				return true;    			case ConfuserVersion.v18_r75402:  				minRev = 75402;  				maxRev = 75720;  				return true;    			case ConfuserVersion.v19_r75725:  				minRev = 75725;  				maxRev = int.MaxValue;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,JitMethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\JitMethodsDecrypter.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v17_r73404:  				minRev = 73404;  				maxRev = 73404;  				return true;    			case ConfuserVersion.v17_r73430:  				minRev = 73430;  				maxRev = 73430;  				return true;    			case ConfuserVersion.v17_r73477:  				minRev = 73477;  				maxRev = 73477;  				return true;    			case ConfuserVersion.v17_r73479:  				minRev = 73479;  				maxRev = 73822;  				return true;    			case ConfuserVersion.v17_r74021:  				minRev = 74021;  				maxRev = 75184;  				return true;    			case ConfuserVersion.v18_r75257:  				minRev = 75257;  				maxRev = 75267;  				return true;    			case ConfuserVersion.v18_r75288:  				minRev = 75288;  				maxRev = 75288;  				return true;    			case ConfuserVersion.v18_r75291:  				minRev = 75291;  				maxRev = 75369;  				return true;    			case ConfuserVersion.v18_r75402:  				minRev = 75402;  				maxRev = 75720;  				return true;    			case ConfuserVersion.v19_r75725:  				minRev = 75725;  				maxRev = int.MaxValue;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,DecryptMethodData_v17_r73477,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\JitMethodsDecrypter.cs,Decrypt,The following statement contains a magic number: data[i] ^= key[i & 3];
Magic Number,de4dot.code.deobfuscators.Confuser,DecryptMethodData_v17_r73477,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\JitMethodsDecrypter.cs,Decrypt,The following statement contains a magic number: methodData = new uint[5];
Magic Number,de4dot.code.deobfuscators.Confuser,DecryptMethodData_v17_r73477,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\JitMethodsDecrypter.cs,Decrypt,The following statement contains a magic number: Buffer.BlockCopy(data' 0' methodData' 0' 20);
Magic Number,de4dot.code.deobfuscators.Confuser,DecryptMethodData_v17_r73477,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\JitMethodsDecrypter.cs,Decrypt,The following statement contains a magic number: codeData = new byte[size - 20];
Magic Number,de4dot.code.deobfuscators.Confuser,DecryptMethodData_v17_r73477,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\JitMethodsDecrypter.cs,Decrypt,The following statement contains a magic number: Array.Copy(data' 20' codeData' 0' codeData.Length);
Magic Number,de4dot.code.deobfuscators.Confuser,DecryptMethodData_v17_r73479,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\JitMethodsDecrypter.cs,Decrypt,The following statement contains a magic number: methodData = new uint[5];
Magic Number,de4dot.code.deobfuscators.Confuser,DecryptMethodData_v17_r73479,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\JitMethodsDecrypter.cs,Decrypt,The following statement contains a magic number: Buffer.BlockCopy(data' 0' methodData' 0' 20);
Magic Number,de4dot.code.deobfuscators.Confuser,DecryptMethodData_v17_r73479,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\JitMethodsDecrypter.cs,Decrypt,The following statement contains a magic number: codeData = new byte[size - 20];
Magic Number,de4dot.code.deobfuscators.Confuser,DecryptMethodData_v17_r73479,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\JitMethodsDecrypter.cs,Decrypt,The following statement contains a magic number: Array.Copy(data' 20' codeData' 0' codeData.Length);
Magic Number,de4dot.code.deobfuscators.Confuser,DecryptMethodData_v18_r75402,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\JitMethodsDecrypter.cs,Decrypt,The following statement contains a magic number: methodData = new uint[5];
Magic Number,de4dot.code.deobfuscators.Confuser,DecryptMethodData_v18_r75402,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\JitMethodsDecrypter.cs,Decrypt,The following statement contains a magic number: Buffer.BlockCopy(data' 0' methodData' 0' 20);
Magic Number,de4dot.code.deobfuscators.Confuser,DecryptMethodData_v18_r75402,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\JitMethodsDecrypter.cs,Decrypt,The following statement contains a magic number: codeData = new byte[size - 20];
Magic Number,de4dot.code.deobfuscators.Confuser,DecryptMethodData_v18_r75402,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\JitMethodsDecrypter.cs,Decrypt,The following statement contains a magic number: Array.Copy(data' 20' codeData' 0' codeData.Length);
Magic Number,de4dot.code.deobfuscators.Confuser,MemoryMethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\MemoryMethodsDecrypter.cs,CheckType,The following statement contains a magic number: type.Methods.Count != 3
Magic Number,de4dot.code.deobfuscators.Confuser,MemoryMethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\MemoryMethodsDecrypter.cs,FindKey4,The following statement contains a magic number: instrs[i-2].OpCode.Code == Code.Pop
Magic Number,de4dot.code.deobfuscators.Confuser,MemoryMethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\MemoryMethodsDecrypter.cs,FindKey4,The following statement contains a magic number: i >= 2
Magic Number,de4dot.code.deobfuscators.Confuser,MemoryMethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\MemoryMethodsDecrypter.cs,FindKey4,The following statement contains a magic number: i + 4 >= instrs.Count
Magic Number,de4dot.code.deobfuscators.Confuser,MemoryMethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\MemoryMethodsDecrypter.cs,FindKey4,The following statement contains a magic number: instrs[i + 2].OpCode.Code != Code.Xor
Magic Number,de4dot.code.deobfuscators.Confuser,MemoryMethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\MemoryMethodsDecrypter.cs,FindKey4,The following statement contains a magic number: var stloc = instrs[i + 3];
Magic Number,de4dot.code.deobfuscators.Confuser,MemoryMethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\MemoryMethodsDecrypter.cs,FindKey4,The following statement contains a magic number: var ldloc = instrs[i + 4];
Magic Number,de4dot.code.deobfuscators.Confuser,MemoryMethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\MemoryMethodsDecrypter.cs,FindKey5,The following statement contains a magic number: index2 - i != 6
Magic Number,de4dot.code.deobfuscators.Confuser,MemoryMethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\MemoryMethodsDecrypter.cs,FindKey5,The following statement contains a magic number: instrs[i + 2].OpCode.Code != Code.Xor
Magic Number,de4dot.code.deobfuscators.Confuser,MemoryMethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\MemoryMethodsDecrypter.cs,FindKey5,The following statement contains a magic number: var stloc = instrs[i + 3];
Magic Number,de4dot.code.deobfuscators.Confuser,MemoryMethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\MemoryMethodsDecrypter.cs,FindKey5,The following statement contains a magic number: var ldloc = instrs[i + 4];
Magic Number,de4dot.code.deobfuscators.Confuser,MemoryMethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\MemoryMethodsDecrypter.cs,FindKey5,The following statement contains a magic number: !instrs[i + 5].IsLdloc()
Magic Number,de4dot.code.deobfuscators.Confuser,MemoryMethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\MemoryMethodsDecrypter.cs,DecryptMethodsData_v14_r57884,The following statement contains a magic number: Array.Clear(md5SumData' csOffs' 4);
Magic Number,de4dot.code.deobfuscators.Confuser,MemoryMethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\MemoryMethodsDecrypter.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v14_r57884:  				minRev = 57884;  				maxRev = 57884;  				return true;    			case ConfuserVersion.v14_r58004:  				minRev = 58004;  				maxRev = 58446;  				return true;    			case ConfuserVersion.v14_r58564:  				minRev = 58564;  				maxRev = 58817;  				return true;    			case ConfuserVersion.v14_r58852:  				minRev = 58852;  				maxRev = 58919;  				return true;    			case ConfuserVersion.v15_r59014:  				minRev = 59014;  				maxRev = 70489;  				return true;    			case ConfuserVersion.v16_r71742:  				minRev = 71742;  				maxRev = 72868;  				return true;    			case ConfuserVersion.v17_r72989:  				minRev = 72989;  				maxRev = 72989;  				return true;    			case ConfuserVersion.v17_r73605:  				minRev = 73605;  				maxRev = 75267;  				return true;    			case ConfuserVersion.v18_r75288:  				minRev = 75288;  				maxRev = 75720;  				return true;    			case ConfuserVersion.v19_r75725:  				minRev = 75725;  				maxRev = int.MaxValue;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,MemoryMethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\MemoryMethodsDecrypter.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v14_r57884:  				minRev = 57884;  				maxRev = 57884;  				return true;    			case ConfuserVersion.v14_r58004:  				minRev = 58004;  				maxRev = 58446;  				return true;    			case ConfuserVersion.v14_r58564:  				minRev = 58564;  				maxRev = 58817;  				return true;    			case ConfuserVersion.v14_r58852:  				minRev = 58852;  				maxRev = 58919;  				return true;    			case ConfuserVersion.v15_r59014:  				minRev = 59014;  				maxRev = 70489;  				return true;    			case ConfuserVersion.v16_r71742:  				minRev = 71742;  				maxRev = 72868;  				return true;    			case ConfuserVersion.v17_r72989:  				minRev = 72989;  				maxRev = 72989;  				return true;    			case ConfuserVersion.v17_r73605:  				minRev = 73605;  				maxRev = 75267;  				return true;    			case ConfuserVersion.v18_r75288:  				minRev = 75288;  				maxRev = 75720;  				return true;    			case ConfuserVersion.v19_r75725:  				minRev = 75725;  				maxRev = int.MaxValue;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,MemoryMethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\MemoryMethodsDecrypter.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v14_r57884:  				minRev = 57884;  				maxRev = 57884;  				return true;    			case ConfuserVersion.v14_r58004:  				minRev = 58004;  				maxRev = 58446;  				return true;    			case ConfuserVersion.v14_r58564:  				minRev = 58564;  				maxRev = 58817;  				return true;    			case ConfuserVersion.v14_r58852:  				minRev = 58852;  				maxRev = 58919;  				return true;    			case ConfuserVersion.v15_r59014:  				minRev = 59014;  				maxRev = 70489;  				return true;    			case ConfuserVersion.v16_r71742:  				minRev = 71742;  				maxRev = 72868;  				return true;    			case ConfuserVersion.v17_r72989:  				minRev = 72989;  				maxRev = 72989;  				return true;    			case ConfuserVersion.v17_r73605:  				minRev = 73605;  				maxRev = 75267;  				return true;    			case ConfuserVersion.v18_r75288:  				minRev = 75288;  				maxRev = 75720;  				return true;    			case ConfuserVersion.v19_r75725:  				minRev = 75725;  				maxRev = int.MaxValue;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,MemoryMethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\MemoryMethodsDecrypter.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v14_r57884:  				minRev = 57884;  				maxRev = 57884;  				return true;    			case ConfuserVersion.v14_r58004:  				minRev = 58004;  				maxRev = 58446;  				return true;    			case ConfuserVersion.v14_r58564:  				minRev = 58564;  				maxRev = 58817;  				return true;    			case ConfuserVersion.v14_r58852:  				minRev = 58852;  				maxRev = 58919;  				return true;    			case ConfuserVersion.v15_r59014:  				minRev = 59014;  				maxRev = 70489;  				return true;    			case ConfuserVersion.v16_r71742:  				minRev = 71742;  				maxRev = 72868;  				return true;    			case ConfuserVersion.v17_r72989:  				minRev = 72989;  				maxRev = 72989;  				return true;    			case ConfuserVersion.v17_r73605:  				minRev = 73605;  				maxRev = 75267;  				return true;    			case ConfuserVersion.v18_r75288:  				minRev = 75288;  				maxRev = 75720;  				return true;    			case ConfuserVersion.v19_r75725:  				minRev = 75725;  				maxRev = int.MaxValue;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,MemoryMethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\MemoryMethodsDecrypter.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v14_r57884:  				minRev = 57884;  				maxRev = 57884;  				return true;    			case ConfuserVersion.v14_r58004:  				minRev = 58004;  				maxRev = 58446;  				return true;    			case ConfuserVersion.v14_r58564:  				minRev = 58564;  				maxRev = 58817;  				return true;    			case ConfuserVersion.v14_r58852:  				minRev = 58852;  				maxRev = 58919;  				return true;    			case ConfuserVersion.v15_r59014:  				minRev = 59014;  				maxRev = 70489;  				return true;    			case ConfuserVersion.v16_r71742:  				minRev = 71742;  				maxRev = 72868;  				return true;    			case ConfuserVersion.v17_r72989:  				minRev = 72989;  				maxRev = 72989;  				return true;    			case ConfuserVersion.v17_r73605:  				minRev = 73605;  				maxRev = 75267;  				return true;    			case ConfuserVersion.v18_r75288:  				minRev = 75288;  				maxRev = 75720;  				return true;    			case ConfuserVersion.v19_r75725:  				minRev = 75725;  				maxRev = int.MaxValue;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,MemoryMethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\MemoryMethodsDecrypter.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v14_r57884:  				minRev = 57884;  				maxRev = 57884;  				return true;    			case ConfuserVersion.v14_r58004:  				minRev = 58004;  				maxRev = 58446;  				return true;    			case ConfuserVersion.v14_r58564:  				minRev = 58564;  				maxRev = 58817;  				return true;    			case ConfuserVersion.v14_r58852:  				minRev = 58852;  				maxRev = 58919;  				return true;    			case ConfuserVersion.v15_r59014:  				minRev = 59014;  				maxRev = 70489;  				return true;    			case ConfuserVersion.v16_r71742:  				minRev = 71742;  				maxRev = 72868;  				return true;    			case ConfuserVersion.v17_r72989:  				minRev = 72989;  				maxRev = 72989;  				return true;    			case ConfuserVersion.v17_r73605:  				minRev = 73605;  				maxRev = 75267;  				return true;    			case ConfuserVersion.v18_r75288:  				minRev = 75288;  				maxRev = 75720;  				return true;    			case ConfuserVersion.v19_r75725:  				minRev = 75725;  				maxRev = int.MaxValue;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,MemoryMethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\MemoryMethodsDecrypter.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v14_r57884:  				minRev = 57884;  				maxRev = 57884;  				return true;    			case ConfuserVersion.v14_r58004:  				minRev = 58004;  				maxRev = 58446;  				return true;    			case ConfuserVersion.v14_r58564:  				minRev = 58564;  				maxRev = 58817;  				return true;    			case ConfuserVersion.v14_r58852:  				minRev = 58852;  				maxRev = 58919;  				return true;    			case ConfuserVersion.v15_r59014:  				minRev = 59014;  				maxRev = 70489;  				return true;    			case ConfuserVersion.v16_r71742:  				minRev = 71742;  				maxRev = 72868;  				return true;    			case ConfuserVersion.v17_r72989:  				minRev = 72989;  				maxRev = 72989;  				return true;    			case ConfuserVersion.v17_r73605:  				minRev = 73605;  				maxRev = 75267;  				return true;    			case ConfuserVersion.v18_r75288:  				minRev = 75288;  				maxRev = 75720;  				return true;    			case ConfuserVersion.v19_r75725:  				minRev = 75725;  				maxRev = int.MaxValue;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,MemoryMethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\MemoryMethodsDecrypter.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v14_r57884:  				minRev = 57884;  				maxRev = 57884;  				return true;    			case ConfuserVersion.v14_r58004:  				minRev = 58004;  				maxRev = 58446;  				return true;    			case ConfuserVersion.v14_r58564:  				minRev = 58564;  				maxRev = 58817;  				return true;    			case ConfuserVersion.v14_r58852:  				minRev = 58852;  				maxRev = 58919;  				return true;    			case ConfuserVersion.v15_r59014:  				minRev = 59014;  				maxRev = 70489;  				return true;    			case ConfuserVersion.v16_r71742:  				minRev = 71742;  				maxRev = 72868;  				return true;    			case ConfuserVersion.v17_r72989:  				minRev = 72989;  				maxRev = 72989;  				return true;    			case ConfuserVersion.v17_r73605:  				minRev = 73605;  				maxRev = 75267;  				return true;    			case ConfuserVersion.v18_r75288:  				minRev = 75288;  				maxRev = 75720;  				return true;    			case ConfuserVersion.v19_r75725:  				minRev = 75725;  				maxRev = int.MaxValue;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,MemoryMethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\MemoryMethodsDecrypter.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v14_r57884:  				minRev = 57884;  				maxRev = 57884;  				return true;    			case ConfuserVersion.v14_r58004:  				minRev = 58004;  				maxRev = 58446;  				return true;    			case ConfuserVersion.v14_r58564:  				minRev = 58564;  				maxRev = 58817;  				return true;    			case ConfuserVersion.v14_r58852:  				minRev = 58852;  				maxRev = 58919;  				return true;    			case ConfuserVersion.v15_r59014:  				minRev = 59014;  				maxRev = 70489;  				return true;    			case ConfuserVersion.v16_r71742:  				minRev = 71742;  				maxRev = 72868;  				return true;    			case ConfuserVersion.v17_r72989:  				minRev = 72989;  				maxRev = 72989;  				return true;    			case ConfuserVersion.v17_r73605:  				minRev = 73605;  				maxRev = 75267;  				return true;    			case ConfuserVersion.v18_r75288:  				minRev = 75288;  				maxRev = 75720;  				return true;    			case ConfuserVersion.v19_r75725:  				minRev = 75725;  				maxRev = int.MaxValue;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,MemoryMethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\MemoryMethodsDecrypter.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v14_r57884:  				minRev = 57884;  				maxRev = 57884;  				return true;    			case ConfuserVersion.v14_r58004:  				minRev = 58004;  				maxRev = 58446;  				return true;    			case ConfuserVersion.v14_r58564:  				minRev = 58564;  				maxRev = 58817;  				return true;    			case ConfuserVersion.v14_r58852:  				minRev = 58852;  				maxRev = 58919;  				return true;    			case ConfuserVersion.v15_r59014:  				minRev = 59014;  				maxRev = 70489;  				return true;    			case ConfuserVersion.v16_r71742:  				minRev = 71742;  				maxRev = 72868;  				return true;    			case ConfuserVersion.v17_r72989:  				minRev = 72989;  				maxRev = 72989;  				return true;    			case ConfuserVersion.v17_r73605:  				minRev = 73605;  				maxRev = 75267;  				return true;    			case ConfuserVersion.v18_r75288:  				minRev = 75288;  				maxRev = 75720;  				return true;    			case ConfuserVersion.v19_r75725:  				minRev = 75725;  				maxRev = int.MaxValue;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,MemoryMethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\MemoryMethodsDecrypter.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v14_r57884:  				minRev = 57884;  				maxRev = 57884;  				return true;    			case ConfuserVersion.v14_r58004:  				minRev = 58004;  				maxRev = 58446;  				return true;    			case ConfuserVersion.v14_r58564:  				minRev = 58564;  				maxRev = 58817;  				return true;    			case ConfuserVersion.v14_r58852:  				minRev = 58852;  				maxRev = 58919;  				return true;    			case ConfuserVersion.v15_r59014:  				minRev = 59014;  				maxRev = 70489;  				return true;    			case ConfuserVersion.v16_r71742:  				minRev = 71742;  				maxRev = 72868;  				return true;    			case ConfuserVersion.v17_r72989:  				minRev = 72989;  				maxRev = 72989;  				return true;    			case ConfuserVersion.v17_r73605:  				minRev = 73605;  				maxRev = 75267;  				return true;    			case ConfuserVersion.v18_r75288:  				minRev = 75288;  				maxRev = 75720;  				return true;    			case ConfuserVersion.v19_r75725:  				minRev = 75725;  				maxRev = int.MaxValue;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,MemoryMethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\MemoryMethodsDecrypter.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v14_r57884:  				minRev = 57884;  				maxRev = 57884;  				return true;    			case ConfuserVersion.v14_r58004:  				minRev = 58004;  				maxRev = 58446;  				return true;    			case ConfuserVersion.v14_r58564:  				minRev = 58564;  				maxRev = 58817;  				return true;    			case ConfuserVersion.v14_r58852:  				minRev = 58852;  				maxRev = 58919;  				return true;    			case ConfuserVersion.v15_r59014:  				minRev = 59014;  				maxRev = 70489;  				return true;    			case ConfuserVersion.v16_r71742:  				minRev = 71742;  				maxRev = 72868;  				return true;    			case ConfuserVersion.v17_r72989:  				minRev = 72989;  				maxRev = 72989;  				return true;    			case ConfuserVersion.v17_r73605:  				minRev = 73605;  				maxRev = 75267;  				return true;    			case ConfuserVersion.v18_r75288:  				minRev = 75288;  				maxRev = 75720;  				return true;    			case ConfuserVersion.v19_r75725:  				minRev = 75725;  				maxRev = int.MaxValue;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,MemoryMethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\MemoryMethodsDecrypter.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v14_r57884:  				minRev = 57884;  				maxRev = 57884;  				return true;    			case ConfuserVersion.v14_r58004:  				minRev = 58004;  				maxRev = 58446;  				return true;    			case ConfuserVersion.v14_r58564:  				minRev = 58564;  				maxRev = 58817;  				return true;    			case ConfuserVersion.v14_r58852:  				minRev = 58852;  				maxRev = 58919;  				return true;    			case ConfuserVersion.v15_r59014:  				minRev = 59014;  				maxRev = 70489;  				return true;    			case ConfuserVersion.v16_r71742:  				minRev = 71742;  				maxRev = 72868;  				return true;    			case ConfuserVersion.v17_r72989:  				minRev = 72989;  				maxRev = 72989;  				return true;    			case ConfuserVersion.v17_r73605:  				minRev = 73605;  				maxRev = 75267;  				return true;    			case ConfuserVersion.v18_r75288:  				minRev = 75288;  				maxRev = 75720;  				return true;    			case ConfuserVersion.v19_r75725:  				minRev = 75725;  				maxRev = int.MaxValue;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,MemoryMethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\MemoryMethodsDecrypter.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v14_r57884:  				minRev = 57884;  				maxRev = 57884;  				return true;    			case ConfuserVersion.v14_r58004:  				minRev = 58004;  				maxRev = 58446;  				return true;    			case ConfuserVersion.v14_r58564:  				minRev = 58564;  				maxRev = 58817;  				return true;    			case ConfuserVersion.v14_r58852:  				minRev = 58852;  				maxRev = 58919;  				return true;    			case ConfuserVersion.v15_r59014:  				minRev = 59014;  				maxRev = 70489;  				return true;    			case ConfuserVersion.v16_r71742:  				minRev = 71742;  				maxRev = 72868;  				return true;    			case ConfuserVersion.v17_r72989:  				minRev = 72989;  				maxRev = 72989;  				return true;    			case ConfuserVersion.v17_r73605:  				minRev = 73605;  				maxRev = 75267;  				return true;    			case ConfuserVersion.v18_r75288:  				minRev = 75288;  				maxRev = 75720;  				return true;    			case ConfuserVersion.v19_r75725:  				minRev = 75725;  				maxRev = int.MaxValue;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,MemoryMethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\MemoryMethodsDecrypter.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v14_r57884:  				minRev = 57884;  				maxRev = 57884;  				return true;    			case ConfuserVersion.v14_r58004:  				minRev = 58004;  				maxRev = 58446;  				return true;    			case ConfuserVersion.v14_r58564:  				minRev = 58564;  				maxRev = 58817;  				return true;    			case ConfuserVersion.v14_r58852:  				minRev = 58852;  				maxRev = 58919;  				return true;    			case ConfuserVersion.v15_r59014:  				minRev = 59014;  				maxRev = 70489;  				return true;    			case ConfuserVersion.v16_r71742:  				minRev = 71742;  				maxRev = 72868;  				return true;    			case ConfuserVersion.v17_r72989:  				minRev = 72989;  				maxRev = 72989;  				return true;    			case ConfuserVersion.v17_r73605:  				minRev = 73605;  				maxRev = 75267;  				return true;    			case ConfuserVersion.v18_r75288:  				minRev = 75288;  				maxRev = 75720;  				return true;    			case ConfuserVersion.v19_r75725:  				minRev = 75725;  				maxRev = int.MaxValue;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,MemoryMethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\MemoryMethodsDecrypter.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v14_r57884:  				minRev = 57884;  				maxRev = 57884;  				return true;    			case ConfuserVersion.v14_r58004:  				minRev = 58004;  				maxRev = 58446;  				return true;    			case ConfuserVersion.v14_r58564:  				minRev = 58564;  				maxRev = 58817;  				return true;    			case ConfuserVersion.v14_r58852:  				minRev = 58852;  				maxRev = 58919;  				return true;    			case ConfuserVersion.v15_r59014:  				minRev = 59014;  				maxRev = 70489;  				return true;    			case ConfuserVersion.v16_r71742:  				minRev = 71742;  				maxRev = 72868;  				return true;    			case ConfuserVersion.v17_r72989:  				minRev = 72989;  				maxRev = 72989;  				return true;    			case ConfuserVersion.v17_r73605:  				minRev = 73605;  				maxRev = 75267;  				return true;    			case ConfuserVersion.v18_r75288:  				minRev = 75288;  				maxRev = 75720;  				return true;    			case ConfuserVersion.v19_r75725:  				minRev = 75725;  				maxRev = int.MaxValue;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,MemoryMethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\MemoryMethodsDecrypter.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v14_r57884:  				minRev = 57884;  				maxRev = 57884;  				return true;    			case ConfuserVersion.v14_r58004:  				minRev = 58004;  				maxRev = 58446;  				return true;    			case ConfuserVersion.v14_r58564:  				minRev = 58564;  				maxRev = 58817;  				return true;    			case ConfuserVersion.v14_r58852:  				minRev = 58852;  				maxRev = 58919;  				return true;    			case ConfuserVersion.v15_r59014:  				minRev = 59014;  				maxRev = 70489;  				return true;    			case ConfuserVersion.v16_r71742:  				minRev = 71742;  				maxRev = 72868;  				return true;    			case ConfuserVersion.v17_r72989:  				minRev = 72989;  				maxRev = 72989;  				return true;    			case ConfuserVersion.v17_r73605:  				minRev = 73605;  				maxRev = 75267;  				return true;    			case ConfuserVersion.v18_r75288:  				minRev = 75288;  				maxRev = 75720;  				return true;    			case ConfuserVersion.v19_r75725:  				minRev = 75725;  				maxRev = int.MaxValue;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,MemoryMethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\MemoryMethodsDecrypter.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v14_r57884:  				minRev = 57884;  				maxRev = 57884;  				return true;    			case ConfuserVersion.v14_r58004:  				minRev = 58004;  				maxRev = 58446;  				return true;    			case ConfuserVersion.v14_r58564:  				minRev = 58564;  				maxRev = 58817;  				return true;    			case ConfuserVersion.v14_r58852:  				minRev = 58852;  				maxRev = 58919;  				return true;    			case ConfuserVersion.v15_r59014:  				minRev = 59014;  				maxRev = 70489;  				return true;    			case ConfuserVersion.v16_r71742:  				minRev = 71742;  				maxRev = 72868;  				return true;    			case ConfuserVersion.v17_r72989:  				minRev = 72989;  				maxRev = 72989;  				return true;    			case ConfuserVersion.v17_r73605:  				minRev = 73605;  				maxRev = 75267;  				return true;    			case ConfuserVersion.v18_r75288:  				minRev = 75288;  				maxRev = 75720;  				return true;    			case ConfuserVersion.v19_r75725:  				minRev = 75725;  				maxRev = int.MaxValue;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,MemoryMethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\MemoryMethodsDecrypter.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v14_r57884:  				minRev = 57884;  				maxRev = 57884;  				return true;    			case ConfuserVersion.v14_r58004:  				minRev = 58004;  				maxRev = 58446;  				return true;    			case ConfuserVersion.v14_r58564:  				minRev = 58564;  				maxRev = 58817;  				return true;    			case ConfuserVersion.v14_r58852:  				minRev = 58852;  				maxRev = 58919;  				return true;    			case ConfuserVersion.v15_r59014:  				minRev = 59014;  				maxRev = 70489;  				return true;    			case ConfuserVersion.v16_r71742:  				minRev = 71742;  				maxRev = 72868;  				return true;    			case ConfuserVersion.v17_r72989:  				minRev = 72989;  				maxRev = 72989;  				return true;    			case ConfuserVersion.v17_r73605:  				minRev = 73605;  				maxRev = 75267;  				return true;    			case ConfuserVersion.v18_r75288:  				minRev = 75288;  				maxRev = 75720;  				return true;    			case ConfuserVersion.v19_r75725:  				minRev = 75725;  				maxRev = int.MaxValue;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,MethodsDecrypterBase,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\MethodsDecrypterBase.cs,FindKey0_v16_r71742,The following statement contains a magic number: i + 5 < instrs.Count
Magic Number,de4dot.code.deobfuscators.Confuser,MethodsDecrypterBase,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\MethodsDecrypterBase.cs,FindKey0_v14_r58564,The following statement contains a magic number: i + 5 < instrs.Count
Magic Number,de4dot.code.deobfuscators.Confuser,MethodsDecrypterBase,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\MethodsDecrypterBase.cs,CheckCallvirtReadUInt32,The following statement contains a magic number: index + 2 >= instrs.Count
Magic Number,de4dot.code.deobfuscators.Confuser,MethodsDecrypterBase,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\MethodsDecrypterBase.cs,CheckCallvirtReadUInt32,The following statement contains a magic number: !instrs[index + 2].IsStloc() && instrs[index + 2].OpCode.Code != Code.Pop
Magic Number,de4dot.code.deobfuscators.Confuser,MethodsDecrypterBase,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\MethodsDecrypterBase.cs,CheckCallvirtReadUInt32,The following statement contains a magic number: !instrs[index + 2].IsStloc() && instrs[index + 2].OpCode.Code != Code.Pop
Magic Number,de4dot.code.deobfuscators.Confuser,MethodsDecrypterBase,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\MethodsDecrypterBase.cs,CheckCallvirtReadUInt32,The following statement contains a magic number: index += 3;
Magic Number,de4dot.code.deobfuscators.Confuser,MethodsDecrypterBase,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\MethodsDecrypterBase.cs,FindKey2OrKey3,The following statement contains a magic number: index + 6 >= instrs.Count
Magic Number,de4dot.code.deobfuscators.Confuser,MethodsDecrypterBase,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\MethodsDecrypterBase.cs,FindKey6,The following statement contains a magic number: i + 4 < instrs.Count
Magic Number,de4dot.code.deobfuscators.Confuser,MethodsDecrypterBase,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\MethodsDecrypterBase.cs,CalcChecksum,The following statement contains a magic number: return BitConverter.ToUInt64(sum' 0) ^ BitConverter.ToUInt64(sum' 8);
Magic Number,de4dot.code.deobfuscators.Confuser,MethodsDecrypterBase,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\MethodsDecrypterBase.cs,Decrypt,The following statement contains a magic number: j < 64 && i + j < decrypted.Length
Magic Number,de4dot.code.deobfuscators.Confuser,ProxyCallFixer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ProxyCallFixer.cs,GetCallInfo_v10_r48717,The following statement contains a magic number: int offs = creatorInfo.proxyCreatorType == ProxyCreatorType.CallOrCallvirt ? 2 : 1;
Magic Number,de4dot.code.deobfuscators.Confuser,ProxyCallFixer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ProxyCallFixer.cs,GetCallInfo_v10_r48717,The following statement contains a magic number: offs + 2 > info.field.Name.String.Length
Magic Number,de4dot.code.deobfuscators.Confuser,ProxyCallFixer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ProxyCallFixer.cs,GetCallInfo_v10_r48717,The following statement contains a magic number: uint token = BitConverter.ToUInt32(Encoding.Unicode.GetBytes(info.field.Name.String.ToCharArray()' offs' 2)' 0) ^ creatorInfo.magic;
Magic Number,de4dot.code.deobfuscators.Confuser,ProxyCallFixer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ProxyCallFixer.cs,GetCallInfo_v10_r48717,The following statement contains a magic number: uint table = token >> 24;
Magic Number,de4dot.code.deobfuscators.Confuser,ProxyCallFixer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ProxyCallFixer.cs,GetCallInfo_v10_r48717,The following statement contains a magic number: table != 0 && table != 6 && table != 0x0A && table != 0x2B
Magic Number,de4dot.code.deobfuscators.Confuser,ProxyCallFixer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ProxyCallFixer.cs,GetCallInfo_v14_r58857,The following statement contains a magic number: uint table = token >> 24;
Magic Number,de4dot.code.deobfuscators.Confuser,ProxyCallFixer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ProxyCallFixer.cs,GetCallInfo_v14_r58857,The following statement contains a magic number: table != 6 && table != 0x0A && table != 0x2B
Magic Number,de4dot.code.deobfuscators.Confuser,ProxyCallFixer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ProxyCallFixer.cs,Extract_v17_r73740,The following statement contains a magic number: switch (creatorInfo.proxyCreatorType) {  			case ProxyCreatorType.CallOrCallvirt:  				arg = BitConverter.ToUInt32(nameInfo' 1);  				table = (uint)(nameInfo[0] & 0x7F) << 24;  				isCallvirt = (nameInfo[0] & 0x80) != 0;  				break;    			case ProxyCreatorType.Newobj:  				arg = BitConverter.ToUInt32(nameInfo' 0);  				table = (uint)nameInfo[4] << 24;  				isCallvirt = false;  				break;    			default:  				throw new ApplicationException("Invalid creator type");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,ProxyCallFixer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ProxyCallFixer.cs,Extract_v17_r73740,The following statement contains a magic number: switch (creatorInfo.proxyCreatorType) {  			case ProxyCreatorType.CallOrCallvirt:  				arg = BitConverter.ToUInt32(nameInfo' 1);  				table = (uint)(nameInfo[0] & 0x7F) << 24;  				isCallvirt = (nameInfo[0] & 0x80) != 0;  				break;    			case ProxyCreatorType.Newobj:  				arg = BitConverter.ToUInt32(nameInfo' 0);  				table = (uint)nameInfo[4] << 24;  				isCallvirt = false;  				break;    			default:  				throw new ApplicationException("Invalid creator type");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,ProxyCallFixer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ProxyCallFixer.cs,Extract_v17_r73740,The following statement contains a magic number: switch (creatorInfo.proxyCreatorType) {  			case ProxyCreatorType.CallOrCallvirt:  				arg = BitConverter.ToUInt32(nameInfo' 1);  				table = (uint)(nameInfo[0] & 0x7F) << 24;  				isCallvirt = (nameInfo[0] & 0x80) != 0;  				break;    			case ProxyCreatorType.Newobj:  				arg = BitConverter.ToUInt32(nameInfo' 0);  				table = (uint)nameInfo[4] << 24;  				isCallvirt = false;  				break;    			default:  				throw new ApplicationException("Invalid creator type");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,ProxyCallFixer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ProxyCallFixer.cs,GetCallInfo_v18_r75367,The following statement contains a magic number: uint magic = (uint)((sig[len - 2] << 24) | (sig[len - 3] << 16) | (sig[len - 5] << 8) | sig[len - 6]);
Magic Number,de4dot.code.deobfuscators.Confuser,ProxyCallFixer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ProxyCallFixer.cs,GetCallInfo_v18_r75367,The following statement contains a magic number: uint magic = (uint)((sig[len - 2] << 24) | (sig[len - 3] << 16) | (sig[len - 5] << 8) | sig[len - 6]);
Magic Number,de4dot.code.deobfuscators.Confuser,ProxyCallFixer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ProxyCallFixer.cs,GetCallInfo_v18_r75367,The following statement contains a magic number: uint magic = (uint)((sig[len - 2] << 24) | (sig[len - 3] << 16) | (sig[len - 5] << 8) | sig[len - 6]);
Magic Number,de4dot.code.deobfuscators.Confuser,ProxyCallFixer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ProxyCallFixer.cs,GetCallInfo_v18_r75367,The following statement contains a magic number: uint magic = (uint)((sig[len - 2] << 24) | (sig[len - 3] << 16) | (sig[len - 5] << 8) | sig[len - 6]);
Magic Number,de4dot.code.deobfuscators.Confuser,ProxyCallFixer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ProxyCallFixer.cs,GetCallInfo_v18_r75367,The following statement contains a magic number: uint magic = (uint)((sig[len - 2] << 24) | (sig[len - 3] << 16) | (sig[len - 5] << 8) | sig[len - 6]);
Magic Number,de4dot.code.deobfuscators.Confuser,ProxyCallFixer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ProxyCallFixer.cs,GetCallInfo_v18_r75367,The following statement contains a magic number: uint magic = (uint)((sig[len - 2] << 24) | (sig[len - 3] << 16) | (sig[len - 5] << 8) | sig[len - 6]);
Magic Number,de4dot.code.deobfuscators.Confuser,ProxyCallFixer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ProxyCallFixer.cs,GetCallInfo_v18_r75367,The following statement contains a magic number: uint magic = (uint)((sig[len - 2] << 24) | (sig[len - 3] << 16) | (sig[len - 5] << 8) | sig[len - 6]);
Magic Number,de4dot.code.deobfuscators.Confuser,ProxyCallFixer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ProxyCallFixer.cs,GetCallInfo_v18_r75367,The following statement contains a magic number: int token = (sig[len - 7] << 24) | (int)rid;
Magic Number,de4dot.code.deobfuscators.Confuser,ProxyCallFixer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ProxyCallFixer.cs,GetCallInfo_v18_r75367,The following statement contains a magic number: int token = (sig[len - 7] << 24) | (int)rid;
Magic Number,de4dot.code.deobfuscators.Confuser,ProxyCallFixer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ProxyCallFixer.cs,GetCallInfo_v18_r75367,The following statement contains a magic number: uint table = (uint)token >> 24;
Magic Number,de4dot.code.deobfuscators.Confuser,ProxyCallFixer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ProxyCallFixer.cs,GetCallInfo_v18_r75367,The following statement contains a magic number: table != 6 && table != 0x0A && table != 0x2B
Magic Number,de4dot.code.deobfuscators.Confuser,ProxyCallFixer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ProxyCallFixer.cs,ReadAssemblyNameReference,The following statement contains a magic number: byte[] pkt = reader.ReadBoolean() ? reader.ReadBytes(8) : null;
Magic Number,de4dot.code.deobfuscators.Confuser,ProxyCallFixer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ProxyCallFixer.cs,IsMethodCreator_v14_r58802,The following statement contains a magic number: switch (proxyType) {  			case ProxyCreatorType.Newobj:  				if (index == 1)  					return false;  				if (index == 0)  					return true;  				break;    			case ProxyCreatorType.CallOrCallvirt:  				if (index == 2)  					return false;  				if (index == 1)  					return true;  				break;    			default: throw new ApplicationException("Invalid proxy creator type");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,ProxyCallFixer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ProxyCallFixer.cs,GetFieldNameIndex,The following statement contains a magic number: i < 2
Magic Number,de4dot.code.deobfuscators.Confuser,ProxyCallFixer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ProxyCallFixer.cs,GetFieldNameIndex,The following statement contains a magic number: var ldci4 = instrs[i - 2];
Magic Number,de4dot.code.deobfuscators.Confuser,ProxyCallFixer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ProxyCallFixer.cs,FindMagic_v19_r76101,The following statement contains a magic number: !ldci4_1.IsLdcI4() || ldci4_1.GetLdcI4Value() != 24
Magic Number,de4dot.code.deobfuscators.Confuser,ProxyCallFixer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ProxyCallFixer.cs,FindMagic_v19_r76101,The following statement contains a magic number: instrs[i + 2].OpCode.Code != Code.Or
Magic Number,de4dot.code.deobfuscators.Confuser,ProxyCallFixer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ProxyCallFixer.cs,FindMagic_v19_r76101,The following statement contains a magic number: !instrs[i + 3].IsStloc()
Magic Number,de4dot.code.deobfuscators.Confuser,ProxyCallFixer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ProxyCallFixer.cs,FindMagic_v19_r76101,The following statement contains a magic number: !instrs[i + 4].IsLdloc()
Magic Number,de4dot.code.deobfuscators.Confuser,ProxyCallFixer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ProxyCallFixer.cs,FindMagic_v19_r76101,The following statement contains a magic number: !instrs[i + 5].IsLdloc()
Magic Number,de4dot.code.deobfuscators.Confuser,ProxyCallFixer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ProxyCallFixer.cs,FindMagic_v19_r76101,The following statement contains a magic number: var ldci4_2 = instrs[i + 6];
Magic Number,de4dot.code.deobfuscators.Confuser,ProxyCallFixer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ProxyCallFixer.cs,FindMagic_v19_r76101,The following statement contains a magic number: instrs[i + 7].OpCode.Code != Code.Xor
Magic Number,de4dot.code.deobfuscators.Confuser,ProxyCallFixer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ProxyCallFixer.cs,FindMagic_v19_r76101,The following statement contains a magic number: i < instrs.Count - 7
Magic Number,de4dot.code.deobfuscators.Confuser,ProxyCallFixer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ProxyCallFixer.cs,FindNativeMethod_v19_r76101,The following statement contains a magic number: !ldci4.IsLdcI4() || ldci4.GetLdcI4Value() != 24
Magic Number,de4dot.code.deobfuscators.Confuser,ProxyCallFixer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ProxyCallFixer.cs,FindNativeMethod_v19_r76101,The following statement contains a magic number: instrs[i + 2].OpCode.Code != Code.Or
Magic Number,de4dot.code.deobfuscators.Confuser,ProxyCallFixer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ProxyCallFixer.cs,FindNativeMethod_v19_r76101,The following statement contains a magic number: !instrs[i + 3].IsStloc()
Magic Number,de4dot.code.deobfuscators.Confuser,ProxyCallFixer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ProxyCallFixer.cs,FindNativeMethod_v19_r76101,The following statement contains a magic number: !instrs[i + 4].IsLdloc()
Magic Number,de4dot.code.deobfuscators.Confuser,ProxyCallFixer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ProxyCallFixer.cs,FindNativeMethod_v19_r76101,The following statement contains a magic number: !instrs[i + 5].IsLdloc()
Magic Number,de4dot.code.deobfuscators.Confuser,ProxyCallFixer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ProxyCallFixer.cs,FindNativeMethod_v19_r76101,The following statement contains a magic number: var call = instrs[i + 6];
Magic Number,de4dot.code.deobfuscators.Confuser,ProxyCallFixer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ProxyCallFixer.cs,FindNativeMethod_v19_r76101,The following statement contains a magic number: i < instrs.Count - 6
Magic Number,de4dot.code.deobfuscators.Confuser,ProxyCallFixer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ProxyCallFixer.cs,FindMagic_v18_r75367,The following statement contains a magic number: i < 0 || i + 3 >= instrs.Count
Magic Number,de4dot.code.deobfuscators.Confuser,ProxyCallFixer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ProxyCallFixer.cs,FindMagic_v18_r75367,The following statement contains a magic number: var ldci4 = instrs[i + 2];
Magic Number,de4dot.code.deobfuscators.Confuser,ProxyCallFixer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ProxyCallFixer.cs,FindMagic_v18_r75367,The following statement contains a magic number: instrs[i+3].OpCode.Code != Code.Xor
Magic Number,de4dot.code.deobfuscators.Confuser,ProxyCallFixer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ProxyCallFixer.cs,FindNativeMethod_v18_r75367,The following statement contains a magic number: i < 0 || i + 2 >= instrs.Count
Magic Number,de4dot.code.deobfuscators.Confuser,ProxyCallFixer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ProxyCallFixer.cs,FindNativeMethod_v18_r75367,The following statement contains a magic number: var call = instrs[i + 2];
Magic Number,de4dot.code.deobfuscators.Confuser,ProxyCallFixer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ProxyCallFixer.cs,FindMagic_v17_r73740,The following statement contains a magic number: index < 1 || index + 2 >= instrs.Count
Magic Number,de4dot.code.deobfuscators.Confuser,ProxyCallFixer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ProxyCallFixer.cs,FindMagic_v17_r73740,The following statement contains a magic number: instrs[index + 2].OpCode.Code != Code.Xor
Magic Number,de4dot.code.deobfuscators.Confuser,ProxyCallFixer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ProxyCallFixer.cs,Is_v17_r73740,The following statement contains a magic number: index < 3
Magic Number,de4dot.code.deobfuscators.Confuser,ProxyCallFixer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ProxyCallFixer.cs,Is_v17_r73740,The following statement contains a magic number: index -= 3;
Magic Number,de4dot.code.deobfuscators.Confuser,ProxyCallFixer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ProxyCallFixer.cs,Is_v17_r73740,The following statement contains a magic number: !ldci4.IsLdcI4() || ldci4.GetLdcI4Value() != 24
Magic Number,de4dot.code.deobfuscators.Confuser,ProxyCallFixer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ProxyCallFixer.cs,Is_v17_r73740,The following statement contains a magic number: instrs[index + 2].OpCode.Code != Code.Or
Magic Number,de4dot.code.deobfuscators.Confuser,ProxyCallFixer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ProxyCallFixer.cs,FindMagic_v14_r58564,The following statement contains a magic number: index2 < 0 || index2 - index != 3
Magic Number,de4dot.code.deobfuscators.Confuser,ProxyCallFixer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ProxyCallFixer.cs,FindMagic_v14_r58564,The following statement contains a magic number: instrs[index + 2].OpCode.Code != Code.Xor
Magic Number,de4dot.code.deobfuscators.Confuser,ProxyCallFixer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ProxyCallFixer.cs,GetProxyCreatorType,The following statement contains a magic number: version = 2;
Magic Number,de4dot.code.deobfuscators.Confuser,ProxyCallFixer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ProxyCallFixer.cs,CheckCtorProxyTypeV2,The following statement contains a magic number: !ldci4.IsLdcI4() || ldci4.GetLdcI4Value() != 2
Magic Number,de4dot.code.deobfuscators.Confuser,ProxyCallFixer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ProxyCallFixer.cs,CheckCtorProxyTypeV2,The following statement contains a magic number: ldci4 = instrs[i + 2];
Magic Number,de4dot.code.deobfuscators.Confuser,ProxyCallFixer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ProxyCallFixer.cs,CheckCtorProxyTypeV2,The following statement contains a magic number: instrs[i + 3].OpCode.Code != Code.Stelem_I1
Magic Number,de4dot.code.deobfuscators.Confuser,ProxyCallFixer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ProxyCallFixer.cs,CheckCtorProxyTypeV2,The following statement contains a magic number: i < instrs.Count - 3
Magic Number,de4dot.code.deobfuscators.Confuser,ProxyCallFixer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ProxyCallFixer.cs,CheckCtorProxyType_v19_r78963,The following statement contains a magic number: instrs[i + 2].OpCode.Code != Code.Stelem_I1
Magic Number,de4dot.code.deobfuscators.Confuser,ProxyCallFixer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ProxyCallFixer.cs,CheckCtorProxyType_v19_r78963,The following statement contains a magic number: i < instrs.Count - 2
Magic Number,de4dot.code.deobfuscators.Confuser,ProxyCallFixer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ProxyCallFixer.cs,CreateDelegateInitInfos_v10_r42915,The following statement contains a magic number: var call = instrs[i + 2];
Magic Number,de4dot.code.deobfuscators.Confuser,ProxyCallFixer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ProxyCallFixer.cs,CreateDelegateInitInfos_v10_r42915,The following statement contains a magic number: i += 2;
Magic Number,de4dot.code.deobfuscators.Confuser,ProxyCallFixer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ProxyCallFixer.cs,CreateDelegateInitInfos_v10_r42915,The following statement contains a magic number: i < instrs.Count - 2
Magic Number,de4dot.code.deobfuscators.Confuser,ProxyCallFixer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ProxyCallFixer.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v10_r42915:  				minRev = 42915;  				maxRev = 42917;  				return true;    			case ConfuserVersion.v10_r42919:  				minRev = 42919;  				maxRev = 48509;  				return true;    			case ConfuserVersion.v10_r48717:  				minRev = 48717;  				maxRev = 54431;  				return true;    			case ConfuserVersion.v11_r50378:  				minRev = 50378;  				maxRev = 54431;  				return true;    			case ConfuserVersion.v12_r54564:  				minRev = 54564;  				maxRev = 54574;  				return true;    			case ConfuserVersion.v13_r55346:  				minRev = 55346;  				maxRev = 55346;  				return true;    			case ConfuserVersion.v13_r55604:  				minRev = 55604;  				maxRev = 58446;  				return true;    			case ConfuserVersion.v14_r58564:  				minRev = 58564;  				maxRev = 58741;  				return true;    			case ConfuserVersion.v14_r58802:  				minRev = 58802;  				maxRev = 58852;  				return true;    			case ConfuserVersion.v14_r58857:  				minRev = 58857;  				maxRev = 73477;  				return true;    			case ConfuserVersion.v16_r66631:  				minRev = 66631;  				maxRev = 69666;  				return true;    			case ConfuserVersion.v16_r70489:  				minRev = 70489;  				maxRev = 73477;  				return true;    			case ConfuserVersion.v17_r73479:  				minRev = 73479;  				maxRev = 73605;  				return true;    			case ConfuserVersion.v17_r73740_normal:  			case ConfuserVersion.v17_r73740_native:  				minRev = 73740;  				maxRev = 74637;  				return true;    			case ConfuserVersion.v17_r74708_normal:  			case ConfuserVersion.v17_r74708_native:  				minRev = 74708;  				maxRev = 75349;  				return true;    			case ConfuserVersion.v18_r75367_normal:  			case ConfuserVersion.v18_r75367_native:  				minRev = 75367;  				maxRev = 75926;  				return true;    			case ConfuserVersion.v18_r75369_normal:  			case ConfuserVersion.v18_r75369_native:  				minRev = 75369;  				maxRev = 75926;  				return true;    			case ConfuserVersion.v19_r76101_normal:  			case ConfuserVersion.v19_r76101_native:  				minRev = 76101;  				maxRev = 78342;  				return true;    			case ConfuserVersion.v19_r78363_normal:  			case ConfuserVersion.v19_r78363_native:  				minRev = 78363;  				// We can only detect the r78963 version if a method ctor proxy is used.  				// If it's not used' then maxRev must be the same maxRev as in the next case.  				// If a method ctor proxy is found' then we know that rev <= 78962.  				if (foundNewobjProxy)  					maxRev = 78962;  				else  					maxRev = int.MaxValue;  				return true;    			case ConfuserVersion.v19_r78963_normal_Newobj:  			case ConfuserVersion.v19_r78963_native_Newobj:  				minRev = 78963;  				maxRev = int.MaxValue;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,ProxyCallFixer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ProxyCallFixer.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v10_r42915:  				minRev = 42915;  				maxRev = 42917;  				return true;    			case ConfuserVersion.v10_r42919:  				minRev = 42919;  				maxRev = 48509;  				return true;    			case ConfuserVersion.v10_r48717:  				minRev = 48717;  				maxRev = 54431;  				return true;    			case ConfuserVersion.v11_r50378:  				minRev = 50378;  				maxRev = 54431;  				return true;    			case ConfuserVersion.v12_r54564:  				minRev = 54564;  				maxRev = 54574;  				return true;    			case ConfuserVersion.v13_r55346:  				minRev = 55346;  				maxRev = 55346;  				return true;    			case ConfuserVersion.v13_r55604:  				minRev = 55604;  				maxRev = 58446;  				return true;    			case ConfuserVersion.v14_r58564:  				minRev = 58564;  				maxRev = 58741;  				return true;    			case ConfuserVersion.v14_r58802:  				minRev = 58802;  				maxRev = 58852;  				return true;    			case ConfuserVersion.v14_r58857:  				minRev = 58857;  				maxRev = 73477;  				return true;    			case ConfuserVersion.v16_r66631:  				minRev = 66631;  				maxRev = 69666;  				return true;    			case ConfuserVersion.v16_r70489:  				minRev = 70489;  				maxRev = 73477;  				return true;    			case ConfuserVersion.v17_r73479:  				minRev = 73479;  				maxRev = 73605;  				return true;    			case ConfuserVersion.v17_r73740_normal:  			case ConfuserVersion.v17_r73740_native:  				minRev = 73740;  				maxRev = 74637;  				return true;    			case ConfuserVersion.v17_r74708_normal:  			case ConfuserVersion.v17_r74708_native:  				minRev = 74708;  				maxRev = 75349;  				return true;    			case ConfuserVersion.v18_r75367_normal:  			case ConfuserVersion.v18_r75367_native:  				minRev = 75367;  				maxRev = 75926;  				return true;    			case ConfuserVersion.v18_r75369_normal:  			case ConfuserVersion.v18_r75369_native:  				minRev = 75369;  				maxRev = 75926;  				return true;    			case ConfuserVersion.v19_r76101_normal:  			case ConfuserVersion.v19_r76101_native:  				minRev = 76101;  				maxRev = 78342;  				return true;    			case ConfuserVersion.v19_r78363_normal:  			case ConfuserVersion.v19_r78363_native:  				minRev = 78363;  				// We can only detect the r78963 version if a method ctor proxy is used.  				// If it's not used' then maxRev must be the same maxRev as in the next case.  				// If a method ctor proxy is found' then we know that rev <= 78962.  				if (foundNewobjProxy)  					maxRev = 78962;  				else  					maxRev = int.MaxValue;  				return true;    			case ConfuserVersion.v19_r78963_normal_Newobj:  			case ConfuserVersion.v19_r78963_native_Newobj:  				minRev = 78963;  				maxRev = int.MaxValue;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,ProxyCallFixer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ProxyCallFixer.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v10_r42915:  				minRev = 42915;  				maxRev = 42917;  				return true;    			case ConfuserVersion.v10_r42919:  				minRev = 42919;  				maxRev = 48509;  				return true;    			case ConfuserVersion.v10_r48717:  				minRev = 48717;  				maxRev = 54431;  				return true;    			case ConfuserVersion.v11_r50378:  				minRev = 50378;  				maxRev = 54431;  				return true;    			case ConfuserVersion.v12_r54564:  				minRev = 54564;  				maxRev = 54574;  				return true;    			case ConfuserVersion.v13_r55346:  				minRev = 55346;  				maxRev = 55346;  				return true;    			case ConfuserVersion.v13_r55604:  				minRev = 55604;  				maxRev = 58446;  				return true;    			case ConfuserVersion.v14_r58564:  				minRev = 58564;  				maxRev = 58741;  				return true;    			case ConfuserVersion.v14_r58802:  				minRev = 58802;  				maxRev = 58852;  				return true;    			case ConfuserVersion.v14_r58857:  				minRev = 58857;  				maxRev = 73477;  				return true;    			case ConfuserVersion.v16_r66631:  				minRev = 66631;  				maxRev = 69666;  				return true;    			case ConfuserVersion.v16_r70489:  				minRev = 70489;  				maxRev = 73477;  				return true;    			case ConfuserVersion.v17_r73479:  				minRev = 73479;  				maxRev = 73605;  				return true;    			case ConfuserVersion.v17_r73740_normal:  			case ConfuserVersion.v17_r73740_native:  				minRev = 73740;  				maxRev = 74637;  				return true;    			case ConfuserVersion.v17_r74708_normal:  			case ConfuserVersion.v17_r74708_native:  				minRev = 74708;  				maxRev = 75349;  				return true;    			case ConfuserVersion.v18_r75367_normal:  			case ConfuserVersion.v18_r75367_native:  				minRev = 75367;  				maxRev = 75926;  				return true;    			case ConfuserVersion.v18_r75369_normal:  			case ConfuserVersion.v18_r75369_native:  				minRev = 75369;  				maxRev = 75926;  				return true;    			case ConfuserVersion.v19_r76101_normal:  			case ConfuserVersion.v19_r76101_native:  				minRev = 76101;  				maxRev = 78342;  				return true;    			case ConfuserVersion.v19_r78363_normal:  			case ConfuserVersion.v19_r78363_native:  				minRev = 78363;  				// We can only detect the r78963 version if a method ctor proxy is used.  				// If it's not used' then maxRev must be the same maxRev as in the next case.  				// If a method ctor proxy is found' then we know that rev <= 78962.  				if (foundNewobjProxy)  					maxRev = 78962;  				else  					maxRev = int.MaxValue;  				return true;    			case ConfuserVersion.v19_r78963_normal_Newobj:  			case ConfuserVersion.v19_r78963_native_Newobj:  				minRev = 78963;  				maxRev = int.MaxValue;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,ProxyCallFixer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ProxyCallFixer.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v10_r42915:  				minRev = 42915;  				maxRev = 42917;  				return true;    			case ConfuserVersion.v10_r42919:  				minRev = 42919;  				maxRev = 48509;  				return true;    			case ConfuserVersion.v10_r48717:  				minRev = 48717;  				maxRev = 54431;  				return true;    			case ConfuserVersion.v11_r50378:  				minRev = 50378;  				maxRev = 54431;  				return true;    			case ConfuserVersion.v12_r54564:  				minRev = 54564;  				maxRev = 54574;  				return true;    			case ConfuserVersion.v13_r55346:  				minRev = 55346;  				maxRev = 55346;  				return true;    			case ConfuserVersion.v13_r55604:  				minRev = 55604;  				maxRev = 58446;  				return true;    			case ConfuserVersion.v14_r58564:  				minRev = 58564;  				maxRev = 58741;  				return true;    			case ConfuserVersion.v14_r58802:  				minRev = 58802;  				maxRev = 58852;  				return true;    			case ConfuserVersion.v14_r58857:  				minRev = 58857;  				maxRev = 73477;  				return true;    			case ConfuserVersion.v16_r66631:  				minRev = 66631;  				maxRev = 69666;  				return true;    			case ConfuserVersion.v16_r70489:  				minRev = 70489;  				maxRev = 73477;  				return true;    			case ConfuserVersion.v17_r73479:  				minRev = 73479;  				maxRev = 73605;  				return true;    			case ConfuserVersion.v17_r73740_normal:  			case ConfuserVersion.v17_r73740_native:  				minRev = 73740;  				maxRev = 74637;  				return true;    			case ConfuserVersion.v17_r74708_normal:  			case ConfuserVersion.v17_r74708_native:  				minRev = 74708;  				maxRev = 75349;  				return true;    			case ConfuserVersion.v18_r75367_normal:  			case ConfuserVersion.v18_r75367_native:  				minRev = 75367;  				maxRev = 75926;  				return true;    			case ConfuserVersion.v18_r75369_normal:  			case ConfuserVersion.v18_r75369_native:  				minRev = 75369;  				maxRev = 75926;  				return true;    			case ConfuserVersion.v19_r76101_normal:  			case ConfuserVersion.v19_r76101_native:  				minRev = 76101;  				maxRev = 78342;  				return true;    			case ConfuserVersion.v19_r78363_normal:  			case ConfuserVersion.v19_r78363_native:  				minRev = 78363;  				// We can only detect the r78963 version if a method ctor proxy is used.  				// If it's not used' then maxRev must be the same maxRev as in the next case.  				// If a method ctor proxy is found' then we know that rev <= 78962.  				if (foundNewobjProxy)  					maxRev = 78962;  				else  					maxRev = int.MaxValue;  				return true;    			case ConfuserVersion.v19_r78963_normal_Newobj:  			case ConfuserVersion.v19_r78963_native_Newobj:  				minRev = 78963;  				maxRev = int.MaxValue;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,ProxyCallFixer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ProxyCallFixer.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v10_r42915:  				minRev = 42915;  				maxRev = 42917;  				return true;    			case ConfuserVersion.v10_r42919:  				minRev = 42919;  				maxRev = 48509;  				return true;    			case ConfuserVersion.v10_r48717:  				minRev = 48717;  				maxRev = 54431;  				return true;    			case ConfuserVersion.v11_r50378:  				minRev = 50378;  				maxRev = 54431;  				return true;    			case ConfuserVersion.v12_r54564:  				minRev = 54564;  				maxRev = 54574;  				return true;    			case ConfuserVersion.v13_r55346:  				minRev = 55346;  				maxRev = 55346;  				return true;    			case ConfuserVersion.v13_r55604:  				minRev = 55604;  				maxRev = 58446;  				return true;    			case ConfuserVersion.v14_r58564:  				minRev = 58564;  				maxRev = 58741;  				return true;    			case ConfuserVersion.v14_r58802:  				minRev = 58802;  				maxRev = 58852;  				return true;    			case ConfuserVersion.v14_r58857:  				minRev = 58857;  				maxRev = 73477;  				return true;    			case ConfuserVersion.v16_r66631:  				minRev = 66631;  				maxRev = 69666;  				return true;    			case ConfuserVersion.v16_r70489:  				minRev = 70489;  				maxRev = 73477;  				return true;    			case ConfuserVersion.v17_r73479:  				minRev = 73479;  				maxRev = 73605;  				return true;    			case ConfuserVersion.v17_r73740_normal:  			case ConfuserVersion.v17_r73740_native:  				minRev = 73740;  				maxRev = 74637;  				return true;    			case ConfuserVersion.v17_r74708_normal:  			case ConfuserVersion.v17_r74708_native:  				minRev = 74708;  				maxRev = 75349;  				return true;    			case ConfuserVersion.v18_r75367_normal:  			case ConfuserVersion.v18_r75367_native:  				minRev = 75367;  				maxRev = 75926;  				return true;    			case ConfuserVersion.v18_r75369_normal:  			case ConfuserVersion.v18_r75369_native:  				minRev = 75369;  				maxRev = 75926;  				return true;    			case ConfuserVersion.v19_r76101_normal:  			case ConfuserVersion.v19_r76101_native:  				minRev = 76101;  				maxRev = 78342;  				return true;    			case ConfuserVersion.v19_r78363_normal:  			case ConfuserVersion.v19_r78363_native:  				minRev = 78363;  				// We can only detect the r78963 version if a method ctor proxy is used.  				// If it's not used' then maxRev must be the same maxRev as in the next case.  				// If a method ctor proxy is found' then we know that rev <= 78962.  				if (foundNewobjProxy)  					maxRev = 78962;  				else  					maxRev = int.MaxValue;  				return true;    			case ConfuserVersion.v19_r78963_normal_Newobj:  			case ConfuserVersion.v19_r78963_native_Newobj:  				minRev = 78963;  				maxRev = int.MaxValue;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,ProxyCallFixer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ProxyCallFixer.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v10_r42915:  				minRev = 42915;  				maxRev = 42917;  				return true;    			case ConfuserVersion.v10_r42919:  				minRev = 42919;  				maxRev = 48509;  				return true;    			case ConfuserVersion.v10_r48717:  				minRev = 48717;  				maxRev = 54431;  				return true;    			case ConfuserVersion.v11_r50378:  				minRev = 50378;  				maxRev = 54431;  				return true;    			case ConfuserVersion.v12_r54564:  				minRev = 54564;  				maxRev = 54574;  				return true;    			case ConfuserVersion.v13_r55346:  				minRev = 55346;  				maxRev = 55346;  				return true;    			case ConfuserVersion.v13_r55604:  				minRev = 55604;  				maxRev = 58446;  				return true;    			case ConfuserVersion.v14_r58564:  				minRev = 58564;  				maxRev = 58741;  				return true;    			case ConfuserVersion.v14_r58802:  				minRev = 58802;  				maxRev = 58852;  				return true;    			case ConfuserVersion.v14_r58857:  				minRev = 58857;  				maxRev = 73477;  				return true;    			case ConfuserVersion.v16_r66631:  				minRev = 66631;  				maxRev = 69666;  				return true;    			case ConfuserVersion.v16_r70489:  				minRev = 70489;  				maxRev = 73477;  				return true;    			case ConfuserVersion.v17_r73479:  				minRev = 73479;  				maxRev = 73605;  				return true;    			case ConfuserVersion.v17_r73740_normal:  			case ConfuserVersion.v17_r73740_native:  				minRev = 73740;  				maxRev = 74637;  				return true;    			case ConfuserVersion.v17_r74708_normal:  			case ConfuserVersion.v17_r74708_native:  				minRev = 74708;  				maxRev = 75349;  				return true;    			case ConfuserVersion.v18_r75367_normal:  			case ConfuserVersion.v18_r75367_native:  				minRev = 75367;  				maxRev = 75926;  				return true;    			case ConfuserVersion.v18_r75369_normal:  			case ConfuserVersion.v18_r75369_native:  				minRev = 75369;  				maxRev = 75926;  				return true;    			case ConfuserVersion.v19_r76101_normal:  			case ConfuserVersion.v19_r76101_native:  				minRev = 76101;  				maxRev = 78342;  				return true;    			case ConfuserVersion.v19_r78363_normal:  			case ConfuserVersion.v19_r78363_native:  				minRev = 78363;  				// We can only detect the r78963 version if a method ctor proxy is used.  				// If it's not used' then maxRev must be the same maxRev as in the next case.  				// If a method ctor proxy is found' then we know that rev <= 78962.  				if (foundNewobjProxy)  					maxRev = 78962;  				else  					maxRev = int.MaxValue;  				return true;    			case ConfuserVersion.v19_r78963_normal_Newobj:  			case ConfuserVersion.v19_r78963_native_Newobj:  				minRev = 78963;  				maxRev = int.MaxValue;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,ProxyCallFixer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ProxyCallFixer.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v10_r42915:  				minRev = 42915;  				maxRev = 42917;  				return true;    			case ConfuserVersion.v10_r42919:  				minRev = 42919;  				maxRev = 48509;  				return true;    			case ConfuserVersion.v10_r48717:  				minRev = 48717;  				maxRev = 54431;  				return true;    			case ConfuserVersion.v11_r50378:  				minRev = 50378;  				maxRev = 54431;  				return true;    			case ConfuserVersion.v12_r54564:  				minRev = 54564;  				maxRev = 54574;  				return true;    			case ConfuserVersion.v13_r55346:  				minRev = 55346;  				maxRev = 55346;  				return true;    			case ConfuserVersion.v13_r55604:  				minRev = 55604;  				maxRev = 58446;  				return true;    			case ConfuserVersion.v14_r58564:  				minRev = 58564;  				maxRev = 58741;  				return true;    			case ConfuserVersion.v14_r58802:  				minRev = 58802;  				maxRev = 58852;  				return true;    			case ConfuserVersion.v14_r58857:  				minRev = 58857;  				maxRev = 73477;  				return true;    			case ConfuserVersion.v16_r66631:  				minRev = 66631;  				maxRev = 69666;  				return true;    			case ConfuserVersion.v16_r70489:  				minRev = 70489;  				maxRev = 73477;  				return true;    			case ConfuserVersion.v17_r73479:  				minRev = 73479;  				maxRev = 73605;  				return true;    			case ConfuserVersion.v17_r73740_normal:  			case ConfuserVersion.v17_r73740_native:  				minRev = 73740;  				maxRev = 74637;  				return true;    			case ConfuserVersion.v17_r74708_normal:  			case ConfuserVersion.v17_r74708_native:  				minRev = 74708;  				maxRev = 75349;  				return true;    			case ConfuserVersion.v18_r75367_normal:  			case ConfuserVersion.v18_r75367_native:  				minRev = 75367;  				maxRev = 75926;  				return true;    			case ConfuserVersion.v18_r75369_normal:  			case ConfuserVersion.v18_r75369_native:  				minRev = 75369;  				maxRev = 75926;  				return true;    			case ConfuserVersion.v19_r76101_normal:  			case ConfuserVersion.v19_r76101_native:  				minRev = 76101;  				maxRev = 78342;  				return true;    			case ConfuserVersion.v19_r78363_normal:  			case ConfuserVersion.v19_r78363_native:  				minRev = 78363;  				// We can only detect the r78963 version if a method ctor proxy is used.  				// If it's not used' then maxRev must be the same maxRev as in the next case.  				// If a method ctor proxy is found' then we know that rev <= 78962.  				if (foundNewobjProxy)  					maxRev = 78962;  				else  					maxRev = int.MaxValue;  				return true;    			case ConfuserVersion.v19_r78963_normal_Newobj:  			case ConfuserVersion.v19_r78963_native_Newobj:  				minRev = 78963;  				maxRev = int.MaxValue;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,ProxyCallFixer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ProxyCallFixer.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v10_r42915:  				minRev = 42915;  				maxRev = 42917;  				return true;    			case ConfuserVersion.v10_r42919:  				minRev = 42919;  				maxRev = 48509;  				return true;    			case ConfuserVersion.v10_r48717:  				minRev = 48717;  				maxRev = 54431;  				return true;    			case ConfuserVersion.v11_r50378:  				minRev = 50378;  				maxRev = 54431;  				return true;    			case ConfuserVersion.v12_r54564:  				minRev = 54564;  				maxRev = 54574;  				return true;    			case ConfuserVersion.v13_r55346:  				minRev = 55346;  				maxRev = 55346;  				return true;    			case ConfuserVersion.v13_r55604:  				minRev = 55604;  				maxRev = 58446;  				return true;    			case ConfuserVersion.v14_r58564:  				minRev = 58564;  				maxRev = 58741;  				return true;    			case ConfuserVersion.v14_r58802:  				minRev = 58802;  				maxRev = 58852;  				return true;    			case ConfuserVersion.v14_r58857:  				minRev = 58857;  				maxRev = 73477;  				return true;    			case ConfuserVersion.v16_r66631:  				minRev = 66631;  				maxRev = 69666;  				return true;    			case ConfuserVersion.v16_r70489:  				minRev = 70489;  				maxRev = 73477;  				return true;    			case ConfuserVersion.v17_r73479:  				minRev = 73479;  				maxRev = 73605;  				return true;    			case ConfuserVersion.v17_r73740_normal:  			case ConfuserVersion.v17_r73740_native:  				minRev = 73740;  				maxRev = 74637;  				return true;    			case ConfuserVersion.v17_r74708_normal:  			case ConfuserVersion.v17_r74708_native:  				minRev = 74708;  				maxRev = 75349;  				return true;    			case ConfuserVersion.v18_r75367_normal:  			case ConfuserVersion.v18_r75367_native:  				minRev = 75367;  				maxRev = 75926;  				return true;    			case ConfuserVersion.v18_r75369_normal:  			case ConfuserVersion.v18_r75369_native:  				minRev = 75369;  				maxRev = 75926;  				return true;    			case ConfuserVersion.v19_r76101_normal:  			case ConfuserVersion.v19_r76101_native:  				minRev = 76101;  				maxRev = 78342;  				return true;    			case ConfuserVersion.v19_r78363_normal:  			case ConfuserVersion.v19_r78363_native:  				minRev = 78363;  				// We can only detect the r78963 version if a method ctor proxy is used.  				// If it's not used' then maxRev must be the same maxRev as in the next case.  				// If a method ctor proxy is found' then we know that rev <= 78962.  				if (foundNewobjProxy)  					maxRev = 78962;  				else  					maxRev = int.MaxValue;  				return true;    			case ConfuserVersion.v19_r78963_normal_Newobj:  			case ConfuserVersion.v19_r78963_native_Newobj:  				minRev = 78963;  				maxRev = int.MaxValue;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,ProxyCallFixer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ProxyCallFixer.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v10_r42915:  				minRev = 42915;  				maxRev = 42917;  				return true;    			case ConfuserVersion.v10_r42919:  				minRev = 42919;  				maxRev = 48509;  				return true;    			case ConfuserVersion.v10_r48717:  				minRev = 48717;  				maxRev = 54431;  				return true;    			case ConfuserVersion.v11_r50378:  				minRev = 50378;  				maxRev = 54431;  				return true;    			case ConfuserVersion.v12_r54564:  				minRev = 54564;  				maxRev = 54574;  				return true;    			case ConfuserVersion.v13_r55346:  				minRev = 55346;  				maxRev = 55346;  				return true;    			case ConfuserVersion.v13_r55604:  				minRev = 55604;  				maxRev = 58446;  				return true;    			case ConfuserVersion.v14_r58564:  				minRev = 58564;  				maxRev = 58741;  				return true;    			case ConfuserVersion.v14_r58802:  				minRev = 58802;  				maxRev = 58852;  				return true;    			case ConfuserVersion.v14_r58857:  				minRev = 58857;  				maxRev = 73477;  				return true;    			case ConfuserVersion.v16_r66631:  				minRev = 66631;  				maxRev = 69666;  				return true;    			case ConfuserVersion.v16_r70489:  				minRev = 70489;  				maxRev = 73477;  				return true;    			case ConfuserVersion.v17_r73479:  				minRev = 73479;  				maxRev = 73605;  				return true;    			case ConfuserVersion.v17_r73740_normal:  			case ConfuserVersion.v17_r73740_native:  				minRev = 73740;  				maxRev = 74637;  				return true;    			case ConfuserVersion.v17_r74708_normal:  			case ConfuserVersion.v17_r74708_native:  				minRev = 74708;  				maxRev = 75349;  				return true;    			case ConfuserVersion.v18_r75367_normal:  			case ConfuserVersion.v18_r75367_native:  				minRev = 75367;  				maxRev = 75926;  				return true;    			case ConfuserVersion.v18_r75369_normal:  			case ConfuserVersion.v18_r75369_native:  				minRev = 75369;  				maxRev = 75926;  				return true;    			case ConfuserVersion.v19_r76101_normal:  			case ConfuserVersion.v19_r76101_native:  				minRev = 76101;  				maxRev = 78342;  				return true;    			case ConfuserVersion.v19_r78363_normal:  			case ConfuserVersion.v19_r78363_native:  				minRev = 78363;  				// We can only detect the r78963 version if a method ctor proxy is used.  				// If it's not used' then maxRev must be the same maxRev as in the next case.  				// If a method ctor proxy is found' then we know that rev <= 78962.  				if (foundNewobjProxy)  					maxRev = 78962;  				else  					maxRev = int.MaxValue;  				return true;    			case ConfuserVersion.v19_r78963_normal_Newobj:  			case ConfuserVersion.v19_r78963_native_Newobj:  				minRev = 78963;  				maxRev = int.MaxValue;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,ProxyCallFixer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ProxyCallFixer.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v10_r42915:  				minRev = 42915;  				maxRev = 42917;  				return true;    			case ConfuserVersion.v10_r42919:  				minRev = 42919;  				maxRev = 48509;  				return true;    			case ConfuserVersion.v10_r48717:  				minRev = 48717;  				maxRev = 54431;  				return true;    			case ConfuserVersion.v11_r50378:  				minRev = 50378;  				maxRev = 54431;  				return true;    			case ConfuserVersion.v12_r54564:  				minRev = 54564;  				maxRev = 54574;  				return true;    			case ConfuserVersion.v13_r55346:  				minRev = 55346;  				maxRev = 55346;  				return true;    			case ConfuserVersion.v13_r55604:  				minRev = 55604;  				maxRev = 58446;  				return true;    			case ConfuserVersion.v14_r58564:  				minRev = 58564;  				maxRev = 58741;  				return true;    			case ConfuserVersion.v14_r58802:  				minRev = 58802;  				maxRev = 58852;  				return true;    			case ConfuserVersion.v14_r58857:  				minRev = 58857;  				maxRev = 73477;  				return true;    			case ConfuserVersion.v16_r66631:  				minRev = 66631;  				maxRev = 69666;  				return true;    			case ConfuserVersion.v16_r70489:  				minRev = 70489;  				maxRev = 73477;  				return true;    			case ConfuserVersion.v17_r73479:  				minRev = 73479;  				maxRev = 73605;  				return true;    			case ConfuserVersion.v17_r73740_normal:  			case ConfuserVersion.v17_r73740_native:  				minRev = 73740;  				maxRev = 74637;  				return true;    			case ConfuserVersion.v17_r74708_normal:  			case ConfuserVersion.v17_r74708_native:  				minRev = 74708;  				maxRev = 75349;  				return true;    			case ConfuserVersion.v18_r75367_normal:  			case ConfuserVersion.v18_r75367_native:  				minRev = 75367;  				maxRev = 75926;  				return true;    			case ConfuserVersion.v18_r75369_normal:  			case ConfuserVersion.v18_r75369_native:  				minRev = 75369;  				maxRev = 75926;  				return true;    			case ConfuserVersion.v19_r76101_normal:  			case ConfuserVersion.v19_r76101_native:  				minRev = 76101;  				maxRev = 78342;  				return true;    			case ConfuserVersion.v19_r78363_normal:  			case ConfuserVersion.v19_r78363_native:  				minRev = 78363;  				// We can only detect the r78963 version if a method ctor proxy is used.  				// If it's not used' then maxRev must be the same maxRev as in the next case.  				// If a method ctor proxy is found' then we know that rev <= 78962.  				if (foundNewobjProxy)  					maxRev = 78962;  				else  					maxRev = int.MaxValue;  				return true;    			case ConfuserVersion.v19_r78963_normal_Newobj:  			case ConfuserVersion.v19_r78963_native_Newobj:  				minRev = 78963;  				maxRev = int.MaxValue;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,ProxyCallFixer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ProxyCallFixer.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v10_r42915:  				minRev = 42915;  				maxRev = 42917;  				return true;    			case ConfuserVersion.v10_r42919:  				minRev = 42919;  				maxRev = 48509;  				return true;    			case ConfuserVersion.v10_r48717:  				minRev = 48717;  				maxRev = 54431;  				return true;    			case ConfuserVersion.v11_r50378:  				minRev = 50378;  				maxRev = 54431;  				return true;    			case ConfuserVersion.v12_r54564:  				minRev = 54564;  				maxRev = 54574;  				return true;    			case ConfuserVersion.v13_r55346:  				minRev = 55346;  				maxRev = 55346;  				return true;    			case ConfuserVersion.v13_r55604:  				minRev = 55604;  				maxRev = 58446;  				return true;    			case ConfuserVersion.v14_r58564:  				minRev = 58564;  				maxRev = 58741;  				return true;    			case ConfuserVersion.v14_r58802:  				minRev = 58802;  				maxRev = 58852;  				return true;    			case ConfuserVersion.v14_r58857:  				minRev = 58857;  				maxRev = 73477;  				return true;    			case ConfuserVersion.v16_r66631:  				minRev = 66631;  				maxRev = 69666;  				return true;    			case ConfuserVersion.v16_r70489:  				minRev = 70489;  				maxRev = 73477;  				return true;    			case ConfuserVersion.v17_r73479:  				minRev = 73479;  				maxRev = 73605;  				return true;    			case ConfuserVersion.v17_r73740_normal:  			case ConfuserVersion.v17_r73740_native:  				minRev = 73740;  				maxRev = 74637;  				return true;    			case ConfuserVersion.v17_r74708_normal:  			case ConfuserVersion.v17_r74708_native:  				minRev = 74708;  				maxRev = 75349;  				return true;    			case ConfuserVersion.v18_r75367_normal:  			case ConfuserVersion.v18_r75367_native:  				minRev = 75367;  				maxRev = 75926;  				return true;    			case ConfuserVersion.v18_r75369_normal:  			case ConfuserVersion.v18_r75369_native:  				minRev = 75369;  				maxRev = 75926;  				return true;    			case ConfuserVersion.v19_r76101_normal:  			case ConfuserVersion.v19_r76101_native:  				minRev = 76101;  				maxRev = 78342;  				return true;    			case ConfuserVersion.v19_r78363_normal:  			case ConfuserVersion.v19_r78363_native:  				minRev = 78363;  				// We can only detect the r78963 version if a method ctor proxy is used.  				// If it's not used' then maxRev must be the same maxRev as in the next case.  				// If a method ctor proxy is found' then we know that rev <= 78962.  				if (foundNewobjProxy)  					maxRev = 78962;  				else  					maxRev = int.MaxValue;  				return true;    			case ConfuserVersion.v19_r78963_normal_Newobj:  			case ConfuserVersion.v19_r78963_native_Newobj:  				minRev = 78963;  				maxRev = int.MaxValue;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,ProxyCallFixer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ProxyCallFixer.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v10_r42915:  				minRev = 42915;  				maxRev = 42917;  				return true;    			case ConfuserVersion.v10_r42919:  				minRev = 42919;  				maxRev = 48509;  				return true;    			case ConfuserVersion.v10_r48717:  				minRev = 48717;  				maxRev = 54431;  				return true;    			case ConfuserVersion.v11_r50378:  				minRev = 50378;  				maxRev = 54431;  				return true;    			case ConfuserVersion.v12_r54564:  				minRev = 54564;  				maxRev = 54574;  				return true;    			case ConfuserVersion.v13_r55346:  				minRev = 55346;  				maxRev = 55346;  				return true;    			case ConfuserVersion.v13_r55604:  				minRev = 55604;  				maxRev = 58446;  				return true;    			case ConfuserVersion.v14_r58564:  				minRev = 58564;  				maxRev = 58741;  				return true;    			case ConfuserVersion.v14_r58802:  				minRev = 58802;  				maxRev = 58852;  				return true;    			case ConfuserVersion.v14_r58857:  				minRev = 58857;  				maxRev = 73477;  				return true;    			case ConfuserVersion.v16_r66631:  				minRev = 66631;  				maxRev = 69666;  				return true;    			case ConfuserVersion.v16_r70489:  				minRev = 70489;  				maxRev = 73477;  				return true;    			case ConfuserVersion.v17_r73479:  				minRev = 73479;  				maxRev = 73605;  				return true;    			case ConfuserVersion.v17_r73740_normal:  			case ConfuserVersion.v17_r73740_native:  				minRev = 73740;  				maxRev = 74637;  				return true;    			case ConfuserVersion.v17_r74708_normal:  			case ConfuserVersion.v17_r74708_native:  				minRev = 74708;  				maxRev = 75349;  				return true;    			case ConfuserVersion.v18_r75367_normal:  			case ConfuserVersion.v18_r75367_native:  				minRev = 75367;  				maxRev = 75926;  				return true;    			case ConfuserVersion.v18_r75369_normal:  			case ConfuserVersion.v18_r75369_native:  				minRev = 75369;  				maxRev = 75926;  				return true;    			case ConfuserVersion.v19_r76101_normal:  			case ConfuserVersion.v19_r76101_native:  				minRev = 76101;  				maxRev = 78342;  				return true;    			case ConfuserVersion.v19_r78363_normal:  			case ConfuserVersion.v19_r78363_native:  				minRev = 78363;  				// We can only detect the r78963 version if a method ctor proxy is used.  				// If it's not used' then maxRev must be the same maxRev as in the next case.  				// If a method ctor proxy is found' then we know that rev <= 78962.  				if (foundNewobjProxy)  					maxRev = 78962;  				else  					maxRev = int.MaxValue;  				return true;    			case ConfuserVersion.v19_r78963_normal_Newobj:  			case ConfuserVersion.v19_r78963_native_Newobj:  				minRev = 78963;  				maxRev = int.MaxValue;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,ProxyCallFixer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ProxyCallFixer.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v10_r42915:  				minRev = 42915;  				maxRev = 42917;  				return true;    			case ConfuserVersion.v10_r42919:  				minRev = 42919;  				maxRev = 48509;  				return true;    			case ConfuserVersion.v10_r48717:  				minRev = 48717;  				maxRev = 54431;  				return true;    			case ConfuserVersion.v11_r50378:  				minRev = 50378;  				maxRev = 54431;  				return true;    			case ConfuserVersion.v12_r54564:  				minRev = 54564;  				maxRev = 54574;  				return true;    			case ConfuserVersion.v13_r55346:  				minRev = 55346;  				maxRev = 55346;  				return true;    			case ConfuserVersion.v13_r55604:  				minRev = 55604;  				maxRev = 58446;  				return true;    			case ConfuserVersion.v14_r58564:  				minRev = 58564;  				maxRev = 58741;  				return true;    			case ConfuserVersion.v14_r58802:  				minRev = 58802;  				maxRev = 58852;  				return true;    			case ConfuserVersion.v14_r58857:  				minRev = 58857;  				maxRev = 73477;  				return true;    			case ConfuserVersion.v16_r66631:  				minRev = 66631;  				maxRev = 69666;  				return true;    			case ConfuserVersion.v16_r70489:  				minRev = 70489;  				maxRev = 73477;  				return true;    			case ConfuserVersion.v17_r73479:  				minRev = 73479;  				maxRev = 73605;  				return true;    			case ConfuserVersion.v17_r73740_normal:  			case ConfuserVersion.v17_r73740_native:  				minRev = 73740;  				maxRev = 74637;  				return true;    			case ConfuserVersion.v17_r74708_normal:  			case ConfuserVersion.v17_r74708_native:  				minRev = 74708;  				maxRev = 75349;  				return true;    			case ConfuserVersion.v18_r75367_normal:  			case ConfuserVersion.v18_r75367_native:  				minRev = 75367;  				maxRev = 75926;  				return true;    			case ConfuserVersion.v18_r75369_normal:  			case ConfuserVersion.v18_r75369_native:  				minRev = 75369;  				maxRev = 75926;  				return true;    			case ConfuserVersion.v19_r76101_normal:  			case ConfuserVersion.v19_r76101_native:  				minRev = 76101;  				maxRev = 78342;  				return true;    			case ConfuserVersion.v19_r78363_normal:  			case ConfuserVersion.v19_r78363_native:  				minRev = 78363;  				// We can only detect the r78963 version if a method ctor proxy is used.  				// If it's not used' then maxRev must be the same maxRev as in the next case.  				// If a method ctor proxy is found' then we know that rev <= 78962.  				if (foundNewobjProxy)  					maxRev = 78962;  				else  					maxRev = int.MaxValue;  				return true;    			case ConfuserVersion.v19_r78963_normal_Newobj:  			case ConfuserVersion.v19_r78963_native_Newobj:  				minRev = 78963;  				maxRev = int.MaxValue;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,ProxyCallFixer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ProxyCallFixer.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v10_r42915:  				minRev = 42915;  				maxRev = 42917;  				return true;    			case ConfuserVersion.v10_r42919:  				minRev = 42919;  				maxRev = 48509;  				return true;    			case ConfuserVersion.v10_r48717:  				minRev = 48717;  				maxRev = 54431;  				return true;    			case ConfuserVersion.v11_r50378:  				minRev = 50378;  				maxRev = 54431;  				return true;    			case ConfuserVersion.v12_r54564:  				minRev = 54564;  				maxRev = 54574;  				return true;    			case ConfuserVersion.v13_r55346:  				minRev = 55346;  				maxRev = 55346;  				return true;    			case ConfuserVersion.v13_r55604:  				minRev = 55604;  				maxRev = 58446;  				return true;    			case ConfuserVersion.v14_r58564:  				minRev = 58564;  				maxRev = 58741;  				return true;    			case ConfuserVersion.v14_r58802:  				minRev = 58802;  				maxRev = 58852;  				return true;    			case ConfuserVersion.v14_r58857:  				minRev = 58857;  				maxRev = 73477;  				return true;    			case ConfuserVersion.v16_r66631:  				minRev = 66631;  				maxRev = 69666;  				return true;    			case ConfuserVersion.v16_r70489:  				minRev = 70489;  				maxRev = 73477;  				return true;    			case ConfuserVersion.v17_r73479:  				minRev = 73479;  				maxRev = 73605;  				return true;    			case ConfuserVersion.v17_r73740_normal:  			case ConfuserVersion.v17_r73740_native:  				minRev = 73740;  				maxRev = 74637;  				return true;    			case ConfuserVersion.v17_r74708_normal:  			case ConfuserVersion.v17_r74708_native:  				minRev = 74708;  				maxRev = 75349;  				return true;    			case ConfuserVersion.v18_r75367_normal:  			case ConfuserVersion.v18_r75367_native:  				minRev = 75367;  				maxRev = 75926;  				return true;    			case ConfuserVersion.v18_r75369_normal:  			case ConfuserVersion.v18_r75369_native:  				minRev = 75369;  				maxRev = 75926;  				return true;    			case ConfuserVersion.v19_r76101_normal:  			case ConfuserVersion.v19_r76101_native:  				minRev = 76101;  				maxRev = 78342;  				return true;    			case ConfuserVersion.v19_r78363_normal:  			case ConfuserVersion.v19_r78363_native:  				minRev = 78363;  				// We can only detect the r78963 version if a method ctor proxy is used.  				// If it's not used' then maxRev must be the same maxRev as in the next case.  				// If a method ctor proxy is found' then we know that rev <= 78962.  				if (foundNewobjProxy)  					maxRev = 78962;  				else  					maxRev = int.MaxValue;  				return true;    			case ConfuserVersion.v19_r78963_normal_Newobj:  			case ConfuserVersion.v19_r78963_native_Newobj:  				minRev = 78963;  				maxRev = int.MaxValue;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,ProxyCallFixer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ProxyCallFixer.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v10_r42915:  				minRev = 42915;  				maxRev = 42917;  				return true;    			case ConfuserVersion.v10_r42919:  				minRev = 42919;  				maxRev = 48509;  				return true;    			case ConfuserVersion.v10_r48717:  				minRev = 48717;  				maxRev = 54431;  				return true;    			case ConfuserVersion.v11_r50378:  				minRev = 50378;  				maxRev = 54431;  				return true;    			case ConfuserVersion.v12_r54564:  				minRev = 54564;  				maxRev = 54574;  				return true;    			case ConfuserVersion.v13_r55346:  				minRev = 55346;  				maxRev = 55346;  				return true;    			case ConfuserVersion.v13_r55604:  				minRev = 55604;  				maxRev = 58446;  				return true;    			case ConfuserVersion.v14_r58564:  				minRev = 58564;  				maxRev = 58741;  				return true;    			case ConfuserVersion.v14_r58802:  				minRev = 58802;  				maxRev = 58852;  				return true;    			case ConfuserVersion.v14_r58857:  				minRev = 58857;  				maxRev = 73477;  				return true;    			case ConfuserVersion.v16_r66631:  				minRev = 66631;  				maxRev = 69666;  				return true;    			case ConfuserVersion.v16_r70489:  				minRev = 70489;  				maxRev = 73477;  				return true;    			case ConfuserVersion.v17_r73479:  				minRev = 73479;  				maxRev = 73605;  				return true;    			case ConfuserVersion.v17_r73740_normal:  			case ConfuserVersion.v17_r73740_native:  				minRev = 73740;  				maxRev = 74637;  				return true;    			case ConfuserVersion.v17_r74708_normal:  			case ConfuserVersion.v17_r74708_native:  				minRev = 74708;  				maxRev = 75349;  				return true;    			case ConfuserVersion.v18_r75367_normal:  			case ConfuserVersion.v18_r75367_native:  				minRev = 75367;  				maxRev = 75926;  				return true;    			case ConfuserVersion.v18_r75369_normal:  			case ConfuserVersion.v18_r75369_native:  				minRev = 75369;  				maxRev = 75926;  				return true;    			case ConfuserVersion.v19_r76101_normal:  			case ConfuserVersion.v19_r76101_native:  				minRev = 76101;  				maxRev = 78342;  				return true;    			case ConfuserVersion.v19_r78363_normal:  			case ConfuserVersion.v19_r78363_native:  				minRev = 78363;  				// We can only detect the r78963 version if a method ctor proxy is used.  				// If it's not used' then maxRev must be the same maxRev as in the next case.  				// If a method ctor proxy is found' then we know that rev <= 78962.  				if (foundNewobjProxy)  					maxRev = 78962;  				else  					maxRev = int.MaxValue;  				return true;    			case ConfuserVersion.v19_r78963_normal_Newobj:  			case ConfuserVersion.v19_r78963_native_Newobj:  				minRev = 78963;  				maxRev = int.MaxValue;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,ProxyCallFixer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ProxyCallFixer.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v10_r42915:  				minRev = 42915;  				maxRev = 42917;  				return true;    			case ConfuserVersion.v10_r42919:  				minRev = 42919;  				maxRev = 48509;  				return true;    			case ConfuserVersion.v10_r48717:  				minRev = 48717;  				maxRev = 54431;  				return true;    			case ConfuserVersion.v11_r50378:  				minRev = 50378;  				maxRev = 54431;  				return true;    			case ConfuserVersion.v12_r54564:  				minRev = 54564;  				maxRev = 54574;  				return true;    			case ConfuserVersion.v13_r55346:  				minRev = 55346;  				maxRev = 55346;  				return true;    			case ConfuserVersion.v13_r55604:  				minRev = 55604;  				maxRev = 58446;  				return true;    			case ConfuserVersion.v14_r58564:  				minRev = 58564;  				maxRev = 58741;  				return true;    			case ConfuserVersion.v14_r58802:  				minRev = 58802;  				maxRev = 58852;  				return true;    			case ConfuserVersion.v14_r58857:  				minRev = 58857;  				maxRev = 73477;  				return true;    			case ConfuserVersion.v16_r66631:  				minRev = 66631;  				maxRev = 69666;  				return true;    			case ConfuserVersion.v16_r70489:  				minRev = 70489;  				maxRev = 73477;  				return true;    			case ConfuserVersion.v17_r73479:  				minRev = 73479;  				maxRev = 73605;  				return true;    			case ConfuserVersion.v17_r73740_normal:  			case ConfuserVersion.v17_r73740_native:  				minRev = 73740;  				maxRev = 74637;  				return true;    			case ConfuserVersion.v17_r74708_normal:  			case ConfuserVersion.v17_r74708_native:  				minRev = 74708;  				maxRev = 75349;  				return true;    			case ConfuserVersion.v18_r75367_normal:  			case ConfuserVersion.v18_r75367_native:  				minRev = 75367;  				maxRev = 75926;  				return true;    			case ConfuserVersion.v18_r75369_normal:  			case ConfuserVersion.v18_r75369_native:  				minRev = 75369;  				maxRev = 75926;  				return true;    			case ConfuserVersion.v19_r76101_normal:  			case ConfuserVersion.v19_r76101_native:  				minRev = 76101;  				maxRev = 78342;  				return true;    			case ConfuserVersion.v19_r78363_normal:  			case ConfuserVersion.v19_r78363_native:  				minRev = 78363;  				// We can only detect the r78963 version if a method ctor proxy is used.  				// If it's not used' then maxRev must be the same maxRev as in the next case.  				// If a method ctor proxy is found' then we know that rev <= 78962.  				if (foundNewobjProxy)  					maxRev = 78962;  				else  					maxRev = int.MaxValue;  				return true;    			case ConfuserVersion.v19_r78963_normal_Newobj:  			case ConfuserVersion.v19_r78963_native_Newobj:  				minRev = 78963;  				maxRev = int.MaxValue;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,ProxyCallFixer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ProxyCallFixer.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v10_r42915:  				minRev = 42915;  				maxRev = 42917;  				return true;    			case ConfuserVersion.v10_r42919:  				minRev = 42919;  				maxRev = 48509;  				return true;    			case ConfuserVersion.v10_r48717:  				minRev = 48717;  				maxRev = 54431;  				return true;    			case ConfuserVersion.v11_r50378:  				minRev = 50378;  				maxRev = 54431;  				return true;    			case ConfuserVersion.v12_r54564:  				minRev = 54564;  				maxRev = 54574;  				return true;    			case ConfuserVersion.v13_r55346:  				minRev = 55346;  				maxRev = 55346;  				return true;    			case ConfuserVersion.v13_r55604:  				minRev = 55604;  				maxRev = 58446;  				return true;    			case ConfuserVersion.v14_r58564:  				minRev = 58564;  				maxRev = 58741;  				return true;    			case ConfuserVersion.v14_r58802:  				minRev = 58802;  				maxRev = 58852;  				return true;    			case ConfuserVersion.v14_r58857:  				minRev = 58857;  				maxRev = 73477;  				return true;    			case ConfuserVersion.v16_r66631:  				minRev = 66631;  				maxRev = 69666;  				return true;    			case ConfuserVersion.v16_r70489:  				minRev = 70489;  				maxRev = 73477;  				return true;    			case ConfuserVersion.v17_r73479:  				minRev = 73479;  				maxRev = 73605;  				return true;    			case ConfuserVersion.v17_r73740_normal:  			case ConfuserVersion.v17_r73740_native:  				minRev = 73740;  				maxRev = 74637;  				return true;    			case ConfuserVersion.v17_r74708_normal:  			case ConfuserVersion.v17_r74708_native:  				minRev = 74708;  				maxRev = 75349;  				return true;    			case ConfuserVersion.v18_r75367_normal:  			case ConfuserVersion.v18_r75367_native:  				minRev = 75367;  				maxRev = 75926;  				return true;    			case ConfuserVersion.v18_r75369_normal:  			case ConfuserVersion.v18_r75369_native:  				minRev = 75369;  				maxRev = 75926;  				return true;    			case ConfuserVersion.v19_r76101_normal:  			case ConfuserVersion.v19_r76101_native:  				minRev = 76101;  				maxRev = 78342;  				return true;    			case ConfuserVersion.v19_r78363_normal:  			case ConfuserVersion.v19_r78363_native:  				minRev = 78363;  				// We can only detect the r78963 version if a method ctor proxy is used.  				// If it's not used' then maxRev must be the same maxRev as in the next case.  				// If a method ctor proxy is found' then we know that rev <= 78962.  				if (foundNewobjProxy)  					maxRev = 78962;  				else  					maxRev = int.MaxValue;  				return true;    			case ConfuserVersion.v19_r78963_normal_Newobj:  			case ConfuserVersion.v19_r78963_native_Newobj:  				minRev = 78963;  				maxRev = int.MaxValue;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,ProxyCallFixer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ProxyCallFixer.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v10_r42915:  				minRev = 42915;  				maxRev = 42917;  				return true;    			case ConfuserVersion.v10_r42919:  				minRev = 42919;  				maxRev = 48509;  				return true;    			case ConfuserVersion.v10_r48717:  				minRev = 48717;  				maxRev = 54431;  				return true;    			case ConfuserVersion.v11_r50378:  				minRev = 50378;  				maxRev = 54431;  				return true;    			case ConfuserVersion.v12_r54564:  				minRev = 54564;  				maxRev = 54574;  				return true;    			case ConfuserVersion.v13_r55346:  				minRev = 55346;  				maxRev = 55346;  				return true;    			case ConfuserVersion.v13_r55604:  				minRev = 55604;  				maxRev = 58446;  				return true;    			case ConfuserVersion.v14_r58564:  				minRev = 58564;  				maxRev = 58741;  				return true;    			case ConfuserVersion.v14_r58802:  				minRev = 58802;  				maxRev = 58852;  				return true;    			case ConfuserVersion.v14_r58857:  				minRev = 58857;  				maxRev = 73477;  				return true;    			case ConfuserVersion.v16_r66631:  				minRev = 66631;  				maxRev = 69666;  				return true;    			case ConfuserVersion.v16_r70489:  				minRev = 70489;  				maxRev = 73477;  				return true;    			case ConfuserVersion.v17_r73479:  				minRev = 73479;  				maxRev = 73605;  				return true;    			case ConfuserVersion.v17_r73740_normal:  			case ConfuserVersion.v17_r73740_native:  				minRev = 73740;  				maxRev = 74637;  				return true;    			case ConfuserVersion.v17_r74708_normal:  			case ConfuserVersion.v17_r74708_native:  				minRev = 74708;  				maxRev = 75349;  				return true;    			case ConfuserVersion.v18_r75367_normal:  			case ConfuserVersion.v18_r75367_native:  				minRev = 75367;  				maxRev = 75926;  				return true;    			case ConfuserVersion.v18_r75369_normal:  			case ConfuserVersion.v18_r75369_native:  				minRev = 75369;  				maxRev = 75926;  				return true;    			case ConfuserVersion.v19_r76101_normal:  			case ConfuserVersion.v19_r76101_native:  				minRev = 76101;  				maxRev = 78342;  				return true;    			case ConfuserVersion.v19_r78363_normal:  			case ConfuserVersion.v19_r78363_native:  				minRev = 78363;  				// We can only detect the r78963 version if a method ctor proxy is used.  				// If it's not used' then maxRev must be the same maxRev as in the next case.  				// If a method ctor proxy is found' then we know that rev <= 78962.  				if (foundNewobjProxy)  					maxRev = 78962;  				else  					maxRev = int.MaxValue;  				return true;    			case ConfuserVersion.v19_r78963_normal_Newobj:  			case ConfuserVersion.v19_r78963_native_Newobj:  				minRev = 78963;  				maxRev = int.MaxValue;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,ProxyCallFixer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ProxyCallFixer.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v10_r42915:  				minRev = 42915;  				maxRev = 42917;  				return true;    			case ConfuserVersion.v10_r42919:  				minRev = 42919;  				maxRev = 48509;  				return true;    			case ConfuserVersion.v10_r48717:  				minRev = 48717;  				maxRev = 54431;  				return true;    			case ConfuserVersion.v11_r50378:  				minRev = 50378;  				maxRev = 54431;  				return true;    			case ConfuserVersion.v12_r54564:  				minRev = 54564;  				maxRev = 54574;  				return true;    			case ConfuserVersion.v13_r55346:  				minRev = 55346;  				maxRev = 55346;  				return true;    			case ConfuserVersion.v13_r55604:  				minRev = 55604;  				maxRev = 58446;  				return true;    			case ConfuserVersion.v14_r58564:  				minRev = 58564;  				maxRev = 58741;  				return true;    			case ConfuserVersion.v14_r58802:  				minRev = 58802;  				maxRev = 58852;  				return true;    			case ConfuserVersion.v14_r58857:  				minRev = 58857;  				maxRev = 73477;  				return true;    			case ConfuserVersion.v16_r66631:  				minRev = 66631;  				maxRev = 69666;  				return true;    			case ConfuserVersion.v16_r70489:  				minRev = 70489;  				maxRev = 73477;  				return true;    			case ConfuserVersion.v17_r73479:  				minRev = 73479;  				maxRev = 73605;  				return true;    			case ConfuserVersion.v17_r73740_normal:  			case ConfuserVersion.v17_r73740_native:  				minRev = 73740;  				maxRev = 74637;  				return true;    			case ConfuserVersion.v17_r74708_normal:  			case ConfuserVersion.v17_r74708_native:  				minRev = 74708;  				maxRev = 75349;  				return true;    			case ConfuserVersion.v18_r75367_normal:  			case ConfuserVersion.v18_r75367_native:  				minRev = 75367;  				maxRev = 75926;  				return true;    			case ConfuserVersion.v18_r75369_normal:  			case ConfuserVersion.v18_r75369_native:  				minRev = 75369;  				maxRev = 75926;  				return true;    			case ConfuserVersion.v19_r76101_normal:  			case ConfuserVersion.v19_r76101_native:  				minRev = 76101;  				maxRev = 78342;  				return true;    			case ConfuserVersion.v19_r78363_normal:  			case ConfuserVersion.v19_r78363_native:  				minRev = 78363;  				// We can only detect the r78963 version if a method ctor proxy is used.  				// If it's not used' then maxRev must be the same maxRev as in the next case.  				// If a method ctor proxy is found' then we know that rev <= 78962.  				if (foundNewobjProxy)  					maxRev = 78962;  				else  					maxRev = int.MaxValue;  				return true;    			case ConfuserVersion.v19_r78963_normal_Newobj:  			case ConfuserVersion.v19_r78963_native_Newobj:  				minRev = 78963;  				maxRev = int.MaxValue;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,ProxyCallFixer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ProxyCallFixer.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v10_r42915:  				minRev = 42915;  				maxRev = 42917;  				return true;    			case ConfuserVersion.v10_r42919:  				minRev = 42919;  				maxRev = 48509;  				return true;    			case ConfuserVersion.v10_r48717:  				minRev = 48717;  				maxRev = 54431;  				return true;    			case ConfuserVersion.v11_r50378:  				minRev = 50378;  				maxRev = 54431;  				return true;    			case ConfuserVersion.v12_r54564:  				minRev = 54564;  				maxRev = 54574;  				return true;    			case ConfuserVersion.v13_r55346:  				minRev = 55346;  				maxRev = 55346;  				return true;    			case ConfuserVersion.v13_r55604:  				minRev = 55604;  				maxRev = 58446;  				return true;    			case ConfuserVersion.v14_r58564:  				minRev = 58564;  				maxRev = 58741;  				return true;    			case ConfuserVersion.v14_r58802:  				minRev = 58802;  				maxRev = 58852;  				return true;    			case ConfuserVersion.v14_r58857:  				minRev = 58857;  				maxRev = 73477;  				return true;    			case ConfuserVersion.v16_r66631:  				minRev = 66631;  				maxRev = 69666;  				return true;    			case ConfuserVersion.v16_r70489:  				minRev = 70489;  				maxRev = 73477;  				return true;    			case ConfuserVersion.v17_r73479:  				minRev = 73479;  				maxRev = 73605;  				return true;    			case ConfuserVersion.v17_r73740_normal:  			case ConfuserVersion.v17_r73740_native:  				minRev = 73740;  				maxRev = 74637;  				return true;    			case ConfuserVersion.v17_r74708_normal:  			case ConfuserVersion.v17_r74708_native:  				minRev = 74708;  				maxRev = 75349;  				return true;    			case ConfuserVersion.v18_r75367_normal:  			case ConfuserVersion.v18_r75367_native:  				minRev = 75367;  				maxRev = 75926;  				return true;    			case ConfuserVersion.v18_r75369_normal:  			case ConfuserVersion.v18_r75369_native:  				minRev = 75369;  				maxRev = 75926;  				return true;    			case ConfuserVersion.v19_r76101_normal:  			case ConfuserVersion.v19_r76101_native:  				minRev = 76101;  				maxRev = 78342;  				return true;    			case ConfuserVersion.v19_r78363_normal:  			case ConfuserVersion.v19_r78363_native:  				minRev = 78363;  				// We can only detect the r78963 version if a method ctor proxy is used.  				// If it's not used' then maxRev must be the same maxRev as in the next case.  				// If a method ctor proxy is found' then we know that rev <= 78962.  				if (foundNewobjProxy)  					maxRev = 78962;  				else  					maxRev = int.MaxValue;  				return true;    			case ConfuserVersion.v19_r78963_normal_Newobj:  			case ConfuserVersion.v19_r78963_native_Newobj:  				minRev = 78963;  				maxRev = int.MaxValue;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,ProxyCallFixer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ProxyCallFixer.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v10_r42915:  				minRev = 42915;  				maxRev = 42917;  				return true;    			case ConfuserVersion.v10_r42919:  				minRev = 42919;  				maxRev = 48509;  				return true;    			case ConfuserVersion.v10_r48717:  				minRev = 48717;  				maxRev = 54431;  				return true;    			case ConfuserVersion.v11_r50378:  				minRev = 50378;  				maxRev = 54431;  				return true;    			case ConfuserVersion.v12_r54564:  				minRev = 54564;  				maxRev = 54574;  				return true;    			case ConfuserVersion.v13_r55346:  				minRev = 55346;  				maxRev = 55346;  				return true;    			case ConfuserVersion.v13_r55604:  				minRev = 55604;  				maxRev = 58446;  				return true;    			case ConfuserVersion.v14_r58564:  				minRev = 58564;  				maxRev = 58741;  				return true;    			case ConfuserVersion.v14_r58802:  				minRev = 58802;  				maxRev = 58852;  				return true;    			case ConfuserVersion.v14_r58857:  				minRev = 58857;  				maxRev = 73477;  				return true;    			case ConfuserVersion.v16_r66631:  				minRev = 66631;  				maxRev = 69666;  				return true;    			case ConfuserVersion.v16_r70489:  				minRev = 70489;  				maxRev = 73477;  				return true;    			case ConfuserVersion.v17_r73479:  				minRev = 73479;  				maxRev = 73605;  				return true;    			case ConfuserVersion.v17_r73740_normal:  			case ConfuserVersion.v17_r73740_native:  				minRev = 73740;  				maxRev = 74637;  				return true;    			case ConfuserVersion.v17_r74708_normal:  			case ConfuserVersion.v17_r74708_native:  				minRev = 74708;  				maxRev = 75349;  				return true;    			case ConfuserVersion.v18_r75367_normal:  			case ConfuserVersion.v18_r75367_native:  				minRev = 75367;  				maxRev = 75926;  				return true;    			case ConfuserVersion.v18_r75369_normal:  			case ConfuserVersion.v18_r75369_native:  				minRev = 75369;  				maxRev = 75926;  				return true;    			case ConfuserVersion.v19_r76101_normal:  			case ConfuserVersion.v19_r76101_native:  				minRev = 76101;  				maxRev = 78342;  				return true;    			case ConfuserVersion.v19_r78363_normal:  			case ConfuserVersion.v19_r78363_native:  				minRev = 78363;  				// We can only detect the r78963 version if a method ctor proxy is used.  				// If it's not used' then maxRev must be the same maxRev as in the next case.  				// If a method ctor proxy is found' then we know that rev <= 78962.  				if (foundNewobjProxy)  					maxRev = 78962;  				else  					maxRev = int.MaxValue;  				return true;    			case ConfuserVersion.v19_r78963_normal_Newobj:  			case ConfuserVersion.v19_r78963_native_Newobj:  				minRev = 78963;  				maxRev = int.MaxValue;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,ProxyCallFixer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ProxyCallFixer.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v10_r42915:  				minRev = 42915;  				maxRev = 42917;  				return true;    			case ConfuserVersion.v10_r42919:  				minRev = 42919;  				maxRev = 48509;  				return true;    			case ConfuserVersion.v10_r48717:  				minRev = 48717;  				maxRev = 54431;  				return true;    			case ConfuserVersion.v11_r50378:  				minRev = 50378;  				maxRev = 54431;  				return true;    			case ConfuserVersion.v12_r54564:  				minRev = 54564;  				maxRev = 54574;  				return true;    			case ConfuserVersion.v13_r55346:  				minRev = 55346;  				maxRev = 55346;  				return true;    			case ConfuserVersion.v13_r55604:  				minRev = 55604;  				maxRev = 58446;  				return true;    			case ConfuserVersion.v14_r58564:  				minRev = 58564;  				maxRev = 58741;  				return true;    			case ConfuserVersion.v14_r58802:  				minRev = 58802;  				maxRev = 58852;  				return true;    			case ConfuserVersion.v14_r58857:  				minRev = 58857;  				maxRev = 73477;  				return true;    			case ConfuserVersion.v16_r66631:  				minRev = 66631;  				maxRev = 69666;  				return true;    			case ConfuserVersion.v16_r70489:  				minRev = 70489;  				maxRev = 73477;  				return true;    			case ConfuserVersion.v17_r73479:  				minRev = 73479;  				maxRev = 73605;  				return true;    			case ConfuserVersion.v17_r73740_normal:  			case ConfuserVersion.v17_r73740_native:  				minRev = 73740;  				maxRev = 74637;  				return true;    			case ConfuserVersion.v17_r74708_normal:  			case ConfuserVersion.v17_r74708_native:  				minRev = 74708;  				maxRev = 75349;  				return true;    			case ConfuserVersion.v18_r75367_normal:  			case ConfuserVersion.v18_r75367_native:  				minRev = 75367;  				maxRev = 75926;  				return true;    			case ConfuserVersion.v18_r75369_normal:  			case ConfuserVersion.v18_r75369_native:  				minRev = 75369;  				maxRev = 75926;  				return true;    			case ConfuserVersion.v19_r76101_normal:  			case ConfuserVersion.v19_r76101_native:  				minRev = 76101;  				maxRev = 78342;  				return true;    			case ConfuserVersion.v19_r78363_normal:  			case ConfuserVersion.v19_r78363_native:  				minRev = 78363;  				// We can only detect the r78963 version if a method ctor proxy is used.  				// If it's not used' then maxRev must be the same maxRev as in the next case.  				// If a method ctor proxy is found' then we know that rev <= 78962.  				if (foundNewobjProxy)  					maxRev = 78962;  				else  					maxRev = int.MaxValue;  				return true;    			case ConfuserVersion.v19_r78963_normal_Newobj:  			case ConfuserVersion.v19_r78963_native_Newobj:  				minRev = 78963;  				maxRev = int.MaxValue;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,ProxyCallFixer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ProxyCallFixer.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v10_r42915:  				minRev = 42915;  				maxRev = 42917;  				return true;    			case ConfuserVersion.v10_r42919:  				minRev = 42919;  				maxRev = 48509;  				return true;    			case ConfuserVersion.v10_r48717:  				minRev = 48717;  				maxRev = 54431;  				return true;    			case ConfuserVersion.v11_r50378:  				minRev = 50378;  				maxRev = 54431;  				return true;    			case ConfuserVersion.v12_r54564:  				minRev = 54564;  				maxRev = 54574;  				return true;    			case ConfuserVersion.v13_r55346:  				minRev = 55346;  				maxRev = 55346;  				return true;    			case ConfuserVersion.v13_r55604:  				minRev = 55604;  				maxRev = 58446;  				return true;    			case ConfuserVersion.v14_r58564:  				minRev = 58564;  				maxRev = 58741;  				return true;    			case ConfuserVersion.v14_r58802:  				minRev = 58802;  				maxRev = 58852;  				return true;    			case ConfuserVersion.v14_r58857:  				minRev = 58857;  				maxRev = 73477;  				return true;    			case ConfuserVersion.v16_r66631:  				minRev = 66631;  				maxRev = 69666;  				return true;    			case ConfuserVersion.v16_r70489:  				minRev = 70489;  				maxRev = 73477;  				return true;    			case ConfuserVersion.v17_r73479:  				minRev = 73479;  				maxRev = 73605;  				return true;    			case ConfuserVersion.v17_r73740_normal:  			case ConfuserVersion.v17_r73740_native:  				minRev = 73740;  				maxRev = 74637;  				return true;    			case ConfuserVersion.v17_r74708_normal:  			case ConfuserVersion.v17_r74708_native:  				minRev = 74708;  				maxRev = 75349;  				return true;    			case ConfuserVersion.v18_r75367_normal:  			case ConfuserVersion.v18_r75367_native:  				minRev = 75367;  				maxRev = 75926;  				return true;    			case ConfuserVersion.v18_r75369_normal:  			case ConfuserVersion.v18_r75369_native:  				minRev = 75369;  				maxRev = 75926;  				return true;    			case ConfuserVersion.v19_r76101_normal:  			case ConfuserVersion.v19_r76101_native:  				minRev = 76101;  				maxRev = 78342;  				return true;    			case ConfuserVersion.v19_r78363_normal:  			case ConfuserVersion.v19_r78363_native:  				minRev = 78363;  				// We can only detect the r78963 version if a method ctor proxy is used.  				// If it's not used' then maxRev must be the same maxRev as in the next case.  				// If a method ctor proxy is found' then we know that rev <= 78962.  				if (foundNewobjProxy)  					maxRev = 78962;  				else  					maxRev = int.MaxValue;  				return true;    			case ConfuserVersion.v19_r78963_normal_Newobj:  			case ConfuserVersion.v19_r78963_native_Newobj:  				minRev = 78963;  				maxRev = int.MaxValue;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,ProxyCallFixer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ProxyCallFixer.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v10_r42915:  				minRev = 42915;  				maxRev = 42917;  				return true;    			case ConfuserVersion.v10_r42919:  				minRev = 42919;  				maxRev = 48509;  				return true;    			case ConfuserVersion.v10_r48717:  				minRev = 48717;  				maxRev = 54431;  				return true;    			case ConfuserVersion.v11_r50378:  				minRev = 50378;  				maxRev = 54431;  				return true;    			case ConfuserVersion.v12_r54564:  				minRev = 54564;  				maxRev = 54574;  				return true;    			case ConfuserVersion.v13_r55346:  				minRev = 55346;  				maxRev = 55346;  				return true;    			case ConfuserVersion.v13_r55604:  				minRev = 55604;  				maxRev = 58446;  				return true;    			case ConfuserVersion.v14_r58564:  				minRev = 58564;  				maxRev = 58741;  				return true;    			case ConfuserVersion.v14_r58802:  				minRev = 58802;  				maxRev = 58852;  				return true;    			case ConfuserVersion.v14_r58857:  				minRev = 58857;  				maxRev = 73477;  				return true;    			case ConfuserVersion.v16_r66631:  				minRev = 66631;  				maxRev = 69666;  				return true;    			case ConfuserVersion.v16_r70489:  				minRev = 70489;  				maxRev = 73477;  				return true;    			case ConfuserVersion.v17_r73479:  				minRev = 73479;  				maxRev = 73605;  				return true;    			case ConfuserVersion.v17_r73740_normal:  			case ConfuserVersion.v17_r73740_native:  				minRev = 73740;  				maxRev = 74637;  				return true;    			case ConfuserVersion.v17_r74708_normal:  			case ConfuserVersion.v17_r74708_native:  				minRev = 74708;  				maxRev = 75349;  				return true;    			case ConfuserVersion.v18_r75367_normal:  			case ConfuserVersion.v18_r75367_native:  				minRev = 75367;  				maxRev = 75926;  				return true;    			case ConfuserVersion.v18_r75369_normal:  			case ConfuserVersion.v18_r75369_native:  				minRev = 75369;  				maxRev = 75926;  				return true;    			case ConfuserVersion.v19_r76101_normal:  			case ConfuserVersion.v19_r76101_native:  				minRev = 76101;  				maxRev = 78342;  				return true;    			case ConfuserVersion.v19_r78363_normal:  			case ConfuserVersion.v19_r78363_native:  				minRev = 78363;  				// We can only detect the r78963 version if a method ctor proxy is used.  				// If it's not used' then maxRev must be the same maxRev as in the next case.  				// If a method ctor proxy is found' then we know that rev <= 78962.  				if (foundNewobjProxy)  					maxRev = 78962;  				else  					maxRev = int.MaxValue;  				return true;    			case ConfuserVersion.v19_r78963_normal_Newobj:  			case ConfuserVersion.v19_r78963_native_Newobj:  				minRev = 78963;  				maxRev = int.MaxValue;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,ProxyCallFixer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ProxyCallFixer.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v10_r42915:  				minRev = 42915;  				maxRev = 42917;  				return true;    			case ConfuserVersion.v10_r42919:  				minRev = 42919;  				maxRev = 48509;  				return true;    			case ConfuserVersion.v10_r48717:  				minRev = 48717;  				maxRev = 54431;  				return true;    			case ConfuserVersion.v11_r50378:  				minRev = 50378;  				maxRev = 54431;  				return true;    			case ConfuserVersion.v12_r54564:  				minRev = 54564;  				maxRev = 54574;  				return true;    			case ConfuserVersion.v13_r55346:  				minRev = 55346;  				maxRev = 55346;  				return true;    			case ConfuserVersion.v13_r55604:  				minRev = 55604;  				maxRev = 58446;  				return true;    			case ConfuserVersion.v14_r58564:  				minRev = 58564;  				maxRev = 58741;  				return true;    			case ConfuserVersion.v14_r58802:  				minRev = 58802;  				maxRev = 58852;  				return true;    			case ConfuserVersion.v14_r58857:  				minRev = 58857;  				maxRev = 73477;  				return true;    			case ConfuserVersion.v16_r66631:  				minRev = 66631;  				maxRev = 69666;  				return true;    			case ConfuserVersion.v16_r70489:  				minRev = 70489;  				maxRev = 73477;  				return true;    			case ConfuserVersion.v17_r73479:  				minRev = 73479;  				maxRev = 73605;  				return true;    			case ConfuserVersion.v17_r73740_normal:  			case ConfuserVersion.v17_r73740_native:  				minRev = 73740;  				maxRev = 74637;  				return true;    			case ConfuserVersion.v17_r74708_normal:  			case ConfuserVersion.v17_r74708_native:  				minRev = 74708;  				maxRev = 75349;  				return true;    			case ConfuserVersion.v18_r75367_normal:  			case ConfuserVersion.v18_r75367_native:  				minRev = 75367;  				maxRev = 75926;  				return true;    			case ConfuserVersion.v18_r75369_normal:  			case ConfuserVersion.v18_r75369_native:  				minRev = 75369;  				maxRev = 75926;  				return true;    			case ConfuserVersion.v19_r76101_normal:  			case ConfuserVersion.v19_r76101_native:  				minRev = 76101;  				maxRev = 78342;  				return true;    			case ConfuserVersion.v19_r78363_normal:  			case ConfuserVersion.v19_r78363_native:  				minRev = 78363;  				// We can only detect the r78963 version if a method ctor proxy is used.  				// If it's not used' then maxRev must be the same maxRev as in the next case.  				// If a method ctor proxy is found' then we know that rev <= 78962.  				if (foundNewobjProxy)  					maxRev = 78962;  				else  					maxRev = int.MaxValue;  				return true;    			case ConfuserVersion.v19_r78963_normal_Newobj:  			case ConfuserVersion.v19_r78963_native_Newobj:  				minRev = 78963;  				maxRev = int.MaxValue;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,ProxyCallFixer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ProxyCallFixer.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v10_r42915:  				minRev = 42915;  				maxRev = 42917;  				return true;    			case ConfuserVersion.v10_r42919:  				minRev = 42919;  				maxRev = 48509;  				return true;    			case ConfuserVersion.v10_r48717:  				minRev = 48717;  				maxRev = 54431;  				return true;    			case ConfuserVersion.v11_r50378:  				minRev = 50378;  				maxRev = 54431;  				return true;    			case ConfuserVersion.v12_r54564:  				minRev = 54564;  				maxRev = 54574;  				return true;    			case ConfuserVersion.v13_r55346:  				minRev = 55346;  				maxRev = 55346;  				return true;    			case ConfuserVersion.v13_r55604:  				minRev = 55604;  				maxRev = 58446;  				return true;    			case ConfuserVersion.v14_r58564:  				minRev = 58564;  				maxRev = 58741;  				return true;    			case ConfuserVersion.v14_r58802:  				minRev = 58802;  				maxRev = 58852;  				return true;    			case ConfuserVersion.v14_r58857:  				minRev = 58857;  				maxRev = 73477;  				return true;    			case ConfuserVersion.v16_r66631:  				minRev = 66631;  				maxRev = 69666;  				return true;    			case ConfuserVersion.v16_r70489:  				minRev = 70489;  				maxRev = 73477;  				return true;    			case ConfuserVersion.v17_r73479:  				minRev = 73479;  				maxRev = 73605;  				return true;    			case ConfuserVersion.v17_r73740_normal:  			case ConfuserVersion.v17_r73740_native:  				minRev = 73740;  				maxRev = 74637;  				return true;    			case ConfuserVersion.v17_r74708_normal:  			case ConfuserVersion.v17_r74708_native:  				minRev = 74708;  				maxRev = 75349;  				return true;    			case ConfuserVersion.v18_r75367_normal:  			case ConfuserVersion.v18_r75367_native:  				minRev = 75367;  				maxRev = 75926;  				return true;    			case ConfuserVersion.v18_r75369_normal:  			case ConfuserVersion.v18_r75369_native:  				minRev = 75369;  				maxRev = 75926;  				return true;    			case ConfuserVersion.v19_r76101_normal:  			case ConfuserVersion.v19_r76101_native:  				minRev = 76101;  				maxRev = 78342;  				return true;    			case ConfuserVersion.v19_r78363_normal:  			case ConfuserVersion.v19_r78363_native:  				minRev = 78363;  				// We can only detect the r78963 version if a method ctor proxy is used.  				// If it's not used' then maxRev must be the same maxRev as in the next case.  				// If a method ctor proxy is found' then we know that rev <= 78962.  				if (foundNewobjProxy)  					maxRev = 78962;  				else  					maxRev = int.MaxValue;  				return true;    			case ConfuserVersion.v19_r78963_normal_Newobj:  			case ConfuserVersion.v19_r78963_native_Newobj:  				minRev = 78963;  				maxRev = int.MaxValue;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,ProxyCallFixer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ProxyCallFixer.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v10_r42915:  				minRev = 42915;  				maxRev = 42917;  				return true;    			case ConfuserVersion.v10_r42919:  				minRev = 42919;  				maxRev = 48509;  				return true;    			case ConfuserVersion.v10_r48717:  				minRev = 48717;  				maxRev = 54431;  				return true;    			case ConfuserVersion.v11_r50378:  				minRev = 50378;  				maxRev = 54431;  				return true;    			case ConfuserVersion.v12_r54564:  				minRev = 54564;  				maxRev = 54574;  				return true;    			case ConfuserVersion.v13_r55346:  				minRev = 55346;  				maxRev = 55346;  				return true;    			case ConfuserVersion.v13_r55604:  				minRev = 55604;  				maxRev = 58446;  				return true;    			case ConfuserVersion.v14_r58564:  				minRev = 58564;  				maxRev = 58741;  				return true;    			case ConfuserVersion.v14_r58802:  				minRev = 58802;  				maxRev = 58852;  				return true;    			case ConfuserVersion.v14_r58857:  				minRev = 58857;  				maxRev = 73477;  				return true;    			case ConfuserVersion.v16_r66631:  				minRev = 66631;  				maxRev = 69666;  				return true;    			case ConfuserVersion.v16_r70489:  				minRev = 70489;  				maxRev = 73477;  				return true;    			case ConfuserVersion.v17_r73479:  				minRev = 73479;  				maxRev = 73605;  				return true;    			case ConfuserVersion.v17_r73740_normal:  			case ConfuserVersion.v17_r73740_native:  				minRev = 73740;  				maxRev = 74637;  				return true;    			case ConfuserVersion.v17_r74708_normal:  			case ConfuserVersion.v17_r74708_native:  				minRev = 74708;  				maxRev = 75349;  				return true;    			case ConfuserVersion.v18_r75367_normal:  			case ConfuserVersion.v18_r75367_native:  				minRev = 75367;  				maxRev = 75926;  				return true;    			case ConfuserVersion.v18_r75369_normal:  			case ConfuserVersion.v18_r75369_native:  				minRev = 75369;  				maxRev = 75926;  				return true;    			case ConfuserVersion.v19_r76101_normal:  			case ConfuserVersion.v19_r76101_native:  				minRev = 76101;  				maxRev = 78342;  				return true;    			case ConfuserVersion.v19_r78363_normal:  			case ConfuserVersion.v19_r78363_native:  				minRev = 78363;  				// We can only detect the r78963 version if a method ctor proxy is used.  				// If it's not used' then maxRev must be the same maxRev as in the next case.  				// If a method ctor proxy is found' then we know that rev <= 78962.  				if (foundNewobjProxy)  					maxRev = 78962;  				else  					maxRev = int.MaxValue;  				return true;    			case ConfuserVersion.v19_r78963_normal_Newobj:  			case ConfuserVersion.v19_r78963_native_Newobj:  				minRev = 78963;  				maxRev = int.MaxValue;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,ProxyCallFixer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ProxyCallFixer.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v10_r42915:  				minRev = 42915;  				maxRev = 42917;  				return true;    			case ConfuserVersion.v10_r42919:  				minRev = 42919;  				maxRev = 48509;  				return true;    			case ConfuserVersion.v10_r48717:  				minRev = 48717;  				maxRev = 54431;  				return true;    			case ConfuserVersion.v11_r50378:  				minRev = 50378;  				maxRev = 54431;  				return true;    			case ConfuserVersion.v12_r54564:  				minRev = 54564;  				maxRev = 54574;  				return true;    			case ConfuserVersion.v13_r55346:  				minRev = 55346;  				maxRev = 55346;  				return true;    			case ConfuserVersion.v13_r55604:  				minRev = 55604;  				maxRev = 58446;  				return true;    			case ConfuserVersion.v14_r58564:  				minRev = 58564;  				maxRev = 58741;  				return true;    			case ConfuserVersion.v14_r58802:  				minRev = 58802;  				maxRev = 58852;  				return true;    			case ConfuserVersion.v14_r58857:  				minRev = 58857;  				maxRev = 73477;  				return true;    			case ConfuserVersion.v16_r66631:  				minRev = 66631;  				maxRev = 69666;  				return true;    			case ConfuserVersion.v16_r70489:  				minRev = 70489;  				maxRev = 73477;  				return true;    			case ConfuserVersion.v17_r73479:  				minRev = 73479;  				maxRev = 73605;  				return true;    			case ConfuserVersion.v17_r73740_normal:  			case ConfuserVersion.v17_r73740_native:  				minRev = 73740;  				maxRev = 74637;  				return true;    			case ConfuserVersion.v17_r74708_normal:  			case ConfuserVersion.v17_r74708_native:  				minRev = 74708;  				maxRev = 75349;  				return true;    			case ConfuserVersion.v18_r75367_normal:  			case ConfuserVersion.v18_r75367_native:  				minRev = 75367;  				maxRev = 75926;  				return true;    			case ConfuserVersion.v18_r75369_normal:  			case ConfuserVersion.v18_r75369_native:  				minRev = 75369;  				maxRev = 75926;  				return true;    			case ConfuserVersion.v19_r76101_normal:  			case ConfuserVersion.v19_r76101_native:  				minRev = 76101;  				maxRev = 78342;  				return true;    			case ConfuserVersion.v19_r78363_normal:  			case ConfuserVersion.v19_r78363_native:  				minRev = 78363;  				// We can only detect the r78963 version if a method ctor proxy is used.  				// If it's not used' then maxRev must be the same maxRev as in the next case.  				// If a method ctor proxy is found' then we know that rev <= 78962.  				if (foundNewobjProxy)  					maxRev = 78962;  				else  					maxRev = int.MaxValue;  				return true;    			case ConfuserVersion.v19_r78963_normal_Newobj:  			case ConfuserVersion.v19_r78963_native_Newobj:  				minRev = 78963;  				maxRev = int.MaxValue;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,ProxyCallFixer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ProxyCallFixer.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v10_r42915:  				minRev = 42915;  				maxRev = 42917;  				return true;    			case ConfuserVersion.v10_r42919:  				minRev = 42919;  				maxRev = 48509;  				return true;    			case ConfuserVersion.v10_r48717:  				minRev = 48717;  				maxRev = 54431;  				return true;    			case ConfuserVersion.v11_r50378:  				minRev = 50378;  				maxRev = 54431;  				return true;    			case ConfuserVersion.v12_r54564:  				minRev = 54564;  				maxRev = 54574;  				return true;    			case ConfuserVersion.v13_r55346:  				minRev = 55346;  				maxRev = 55346;  				return true;    			case ConfuserVersion.v13_r55604:  				minRev = 55604;  				maxRev = 58446;  				return true;    			case ConfuserVersion.v14_r58564:  				minRev = 58564;  				maxRev = 58741;  				return true;    			case ConfuserVersion.v14_r58802:  				minRev = 58802;  				maxRev = 58852;  				return true;    			case ConfuserVersion.v14_r58857:  				minRev = 58857;  				maxRev = 73477;  				return true;    			case ConfuserVersion.v16_r66631:  				minRev = 66631;  				maxRev = 69666;  				return true;    			case ConfuserVersion.v16_r70489:  				minRev = 70489;  				maxRev = 73477;  				return true;    			case ConfuserVersion.v17_r73479:  				minRev = 73479;  				maxRev = 73605;  				return true;    			case ConfuserVersion.v17_r73740_normal:  			case ConfuserVersion.v17_r73740_native:  				minRev = 73740;  				maxRev = 74637;  				return true;    			case ConfuserVersion.v17_r74708_normal:  			case ConfuserVersion.v17_r74708_native:  				minRev = 74708;  				maxRev = 75349;  				return true;    			case ConfuserVersion.v18_r75367_normal:  			case ConfuserVersion.v18_r75367_native:  				minRev = 75367;  				maxRev = 75926;  				return true;    			case ConfuserVersion.v18_r75369_normal:  			case ConfuserVersion.v18_r75369_native:  				minRev = 75369;  				maxRev = 75926;  				return true;    			case ConfuserVersion.v19_r76101_normal:  			case ConfuserVersion.v19_r76101_native:  				minRev = 76101;  				maxRev = 78342;  				return true;    			case ConfuserVersion.v19_r78363_normal:  			case ConfuserVersion.v19_r78363_native:  				minRev = 78363;  				// We can only detect the r78963 version if a method ctor proxy is used.  				// If it's not used' then maxRev must be the same maxRev as in the next case.  				// If a method ctor proxy is found' then we know that rev <= 78962.  				if (foundNewobjProxy)  					maxRev = 78962;  				else  					maxRev = int.MaxValue;  				return true;    			case ConfuserVersion.v19_r78963_normal_Newobj:  			case ConfuserVersion.v19_r78963_native_Newobj:  				minRev = 78963;  				maxRev = int.MaxValue;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,ProxyCallFixer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ProxyCallFixer.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v10_r42915:  				minRev = 42915;  				maxRev = 42917;  				return true;    			case ConfuserVersion.v10_r42919:  				minRev = 42919;  				maxRev = 48509;  				return true;    			case ConfuserVersion.v10_r48717:  				minRev = 48717;  				maxRev = 54431;  				return true;    			case ConfuserVersion.v11_r50378:  				minRev = 50378;  				maxRev = 54431;  				return true;    			case ConfuserVersion.v12_r54564:  				minRev = 54564;  				maxRev = 54574;  				return true;    			case ConfuserVersion.v13_r55346:  				minRev = 55346;  				maxRev = 55346;  				return true;    			case ConfuserVersion.v13_r55604:  				minRev = 55604;  				maxRev = 58446;  				return true;    			case ConfuserVersion.v14_r58564:  				minRev = 58564;  				maxRev = 58741;  				return true;    			case ConfuserVersion.v14_r58802:  				minRev = 58802;  				maxRev = 58852;  				return true;    			case ConfuserVersion.v14_r58857:  				minRev = 58857;  				maxRev = 73477;  				return true;    			case ConfuserVersion.v16_r66631:  				minRev = 66631;  				maxRev = 69666;  				return true;    			case ConfuserVersion.v16_r70489:  				minRev = 70489;  				maxRev = 73477;  				return true;    			case ConfuserVersion.v17_r73479:  				minRev = 73479;  				maxRev = 73605;  				return true;    			case ConfuserVersion.v17_r73740_normal:  			case ConfuserVersion.v17_r73740_native:  				minRev = 73740;  				maxRev = 74637;  				return true;    			case ConfuserVersion.v17_r74708_normal:  			case ConfuserVersion.v17_r74708_native:  				minRev = 74708;  				maxRev = 75349;  				return true;    			case ConfuserVersion.v18_r75367_normal:  			case ConfuserVersion.v18_r75367_native:  				minRev = 75367;  				maxRev = 75926;  				return true;    			case ConfuserVersion.v18_r75369_normal:  			case ConfuserVersion.v18_r75369_native:  				minRev = 75369;  				maxRev = 75926;  				return true;    			case ConfuserVersion.v19_r76101_normal:  			case ConfuserVersion.v19_r76101_native:  				minRev = 76101;  				maxRev = 78342;  				return true;    			case ConfuserVersion.v19_r78363_normal:  			case ConfuserVersion.v19_r78363_native:  				minRev = 78363;  				// We can only detect the r78963 version if a method ctor proxy is used.  				// If it's not used' then maxRev must be the same maxRev as in the next case.  				// If a method ctor proxy is found' then we know that rev <= 78962.  				if (foundNewobjProxy)  					maxRev = 78962;  				else  					maxRev = int.MaxValue;  				return true;    			case ConfuserVersion.v19_r78963_normal_Newobj:  			case ConfuserVersion.v19_r78963_native_Newobj:  				minRev = 78963;  				maxRev = int.MaxValue;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,ProxyCallFixer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ProxyCallFixer.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v10_r42915:  				minRev = 42915;  				maxRev = 42917;  				return true;    			case ConfuserVersion.v10_r42919:  				minRev = 42919;  				maxRev = 48509;  				return true;    			case ConfuserVersion.v10_r48717:  				minRev = 48717;  				maxRev = 54431;  				return true;    			case ConfuserVersion.v11_r50378:  				minRev = 50378;  				maxRev = 54431;  				return true;    			case ConfuserVersion.v12_r54564:  				minRev = 54564;  				maxRev = 54574;  				return true;    			case ConfuserVersion.v13_r55346:  				minRev = 55346;  				maxRev = 55346;  				return true;    			case ConfuserVersion.v13_r55604:  				minRev = 55604;  				maxRev = 58446;  				return true;    			case ConfuserVersion.v14_r58564:  				minRev = 58564;  				maxRev = 58741;  				return true;    			case ConfuserVersion.v14_r58802:  				minRev = 58802;  				maxRev = 58852;  				return true;    			case ConfuserVersion.v14_r58857:  				minRev = 58857;  				maxRev = 73477;  				return true;    			case ConfuserVersion.v16_r66631:  				minRev = 66631;  				maxRev = 69666;  				return true;    			case ConfuserVersion.v16_r70489:  				minRev = 70489;  				maxRev = 73477;  				return true;    			case ConfuserVersion.v17_r73479:  				minRev = 73479;  				maxRev = 73605;  				return true;    			case ConfuserVersion.v17_r73740_normal:  			case ConfuserVersion.v17_r73740_native:  				minRev = 73740;  				maxRev = 74637;  				return true;    			case ConfuserVersion.v17_r74708_normal:  			case ConfuserVersion.v17_r74708_native:  				minRev = 74708;  				maxRev = 75349;  				return true;    			case ConfuserVersion.v18_r75367_normal:  			case ConfuserVersion.v18_r75367_native:  				minRev = 75367;  				maxRev = 75926;  				return true;    			case ConfuserVersion.v18_r75369_normal:  			case ConfuserVersion.v18_r75369_native:  				minRev = 75369;  				maxRev = 75926;  				return true;    			case ConfuserVersion.v19_r76101_normal:  			case ConfuserVersion.v19_r76101_native:  				minRev = 76101;  				maxRev = 78342;  				return true;    			case ConfuserVersion.v19_r78363_normal:  			case ConfuserVersion.v19_r78363_native:  				minRev = 78363;  				// We can only detect the r78963 version if a method ctor proxy is used.  				// If it's not used' then maxRev must be the same maxRev as in the next case.  				// If a method ctor proxy is found' then we know that rev <= 78962.  				if (foundNewobjProxy)  					maxRev = 78962;  				else  					maxRev = int.MaxValue;  				return true;    			case ConfuserVersion.v19_r78963_normal_Newobj:  			case ConfuserVersion.v19_r78963_native_Newobj:  				minRev = 78963;  				maxRev = int.MaxValue;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,ProxyCallFixer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ProxyCallFixer.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v10_r42915:  				minRev = 42915;  				maxRev = 42917;  				return true;    			case ConfuserVersion.v10_r42919:  				minRev = 42919;  				maxRev = 48509;  				return true;    			case ConfuserVersion.v10_r48717:  				minRev = 48717;  				maxRev = 54431;  				return true;    			case ConfuserVersion.v11_r50378:  				minRev = 50378;  				maxRev = 54431;  				return true;    			case ConfuserVersion.v12_r54564:  				minRev = 54564;  				maxRev = 54574;  				return true;    			case ConfuserVersion.v13_r55346:  				minRev = 55346;  				maxRev = 55346;  				return true;    			case ConfuserVersion.v13_r55604:  				minRev = 55604;  				maxRev = 58446;  				return true;    			case ConfuserVersion.v14_r58564:  				minRev = 58564;  				maxRev = 58741;  				return true;    			case ConfuserVersion.v14_r58802:  				minRev = 58802;  				maxRev = 58852;  				return true;    			case ConfuserVersion.v14_r58857:  				minRev = 58857;  				maxRev = 73477;  				return true;    			case ConfuserVersion.v16_r66631:  				minRev = 66631;  				maxRev = 69666;  				return true;    			case ConfuserVersion.v16_r70489:  				minRev = 70489;  				maxRev = 73477;  				return true;    			case ConfuserVersion.v17_r73479:  				minRev = 73479;  				maxRev = 73605;  				return true;    			case ConfuserVersion.v17_r73740_normal:  			case ConfuserVersion.v17_r73740_native:  				minRev = 73740;  				maxRev = 74637;  				return true;    			case ConfuserVersion.v17_r74708_normal:  			case ConfuserVersion.v17_r74708_native:  				minRev = 74708;  				maxRev = 75349;  				return true;    			case ConfuserVersion.v18_r75367_normal:  			case ConfuserVersion.v18_r75367_native:  				minRev = 75367;  				maxRev = 75926;  				return true;    			case ConfuserVersion.v18_r75369_normal:  			case ConfuserVersion.v18_r75369_native:  				minRev = 75369;  				maxRev = 75926;  				return true;    			case ConfuserVersion.v19_r76101_normal:  			case ConfuserVersion.v19_r76101_native:  				minRev = 76101;  				maxRev = 78342;  				return true;    			case ConfuserVersion.v19_r78363_normal:  			case ConfuserVersion.v19_r78363_native:  				minRev = 78363;  				// We can only detect the r78963 version if a method ctor proxy is used.  				// If it's not used' then maxRev must be the same maxRev as in the next case.  				// If a method ctor proxy is found' then we know that rev <= 78962.  				if (foundNewobjProxy)  					maxRev = 78962;  				else  					maxRev = int.MaxValue;  				return true;    			case ConfuserVersion.v19_r78963_normal_Newobj:  			case ConfuserVersion.v19_r78963_native_Newobj:  				minRev = 78963;  				maxRev = int.MaxValue;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,ProxyCallFixer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ProxyCallFixer.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v10_r42915:  				minRev = 42915;  				maxRev = 42917;  				return true;    			case ConfuserVersion.v10_r42919:  				minRev = 42919;  				maxRev = 48509;  				return true;    			case ConfuserVersion.v10_r48717:  				minRev = 48717;  				maxRev = 54431;  				return true;    			case ConfuserVersion.v11_r50378:  				minRev = 50378;  				maxRev = 54431;  				return true;    			case ConfuserVersion.v12_r54564:  				minRev = 54564;  				maxRev = 54574;  				return true;    			case ConfuserVersion.v13_r55346:  				minRev = 55346;  				maxRev = 55346;  				return true;    			case ConfuserVersion.v13_r55604:  				minRev = 55604;  				maxRev = 58446;  				return true;    			case ConfuserVersion.v14_r58564:  				minRev = 58564;  				maxRev = 58741;  				return true;    			case ConfuserVersion.v14_r58802:  				minRev = 58802;  				maxRev = 58852;  				return true;    			case ConfuserVersion.v14_r58857:  				minRev = 58857;  				maxRev = 73477;  				return true;    			case ConfuserVersion.v16_r66631:  				minRev = 66631;  				maxRev = 69666;  				return true;    			case ConfuserVersion.v16_r70489:  				minRev = 70489;  				maxRev = 73477;  				return true;    			case ConfuserVersion.v17_r73479:  				minRev = 73479;  				maxRev = 73605;  				return true;    			case ConfuserVersion.v17_r73740_normal:  			case ConfuserVersion.v17_r73740_native:  				minRev = 73740;  				maxRev = 74637;  				return true;    			case ConfuserVersion.v17_r74708_normal:  			case ConfuserVersion.v17_r74708_native:  				minRev = 74708;  				maxRev = 75349;  				return true;    			case ConfuserVersion.v18_r75367_normal:  			case ConfuserVersion.v18_r75367_native:  				minRev = 75367;  				maxRev = 75926;  				return true;    			case ConfuserVersion.v18_r75369_normal:  			case ConfuserVersion.v18_r75369_native:  				minRev = 75369;  				maxRev = 75926;  				return true;    			case ConfuserVersion.v19_r76101_normal:  			case ConfuserVersion.v19_r76101_native:  				minRev = 76101;  				maxRev = 78342;  				return true;    			case ConfuserVersion.v19_r78363_normal:  			case ConfuserVersion.v19_r78363_native:  				minRev = 78363;  				// We can only detect the r78963 version if a method ctor proxy is used.  				// If it's not used' then maxRev must be the same maxRev as in the next case.  				// If a method ctor proxy is found' then we know that rev <= 78962.  				if (foundNewobjProxy)  					maxRev = 78962;  				else  					maxRev = int.MaxValue;  				return true;    			case ConfuserVersion.v19_r78963_normal_Newobj:  			case ConfuserVersion.v19_r78963_native_Newobj:  				minRev = 78963;  				maxRev = int.MaxValue;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,ProxyCallFixer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ProxyCallFixer.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v10_r42915:  				minRev = 42915;  				maxRev = 42917;  				return true;    			case ConfuserVersion.v10_r42919:  				minRev = 42919;  				maxRev = 48509;  				return true;    			case ConfuserVersion.v10_r48717:  				minRev = 48717;  				maxRev = 54431;  				return true;    			case ConfuserVersion.v11_r50378:  				minRev = 50378;  				maxRev = 54431;  				return true;    			case ConfuserVersion.v12_r54564:  				minRev = 54564;  				maxRev = 54574;  				return true;    			case ConfuserVersion.v13_r55346:  				minRev = 55346;  				maxRev = 55346;  				return true;    			case ConfuserVersion.v13_r55604:  				minRev = 55604;  				maxRev = 58446;  				return true;    			case ConfuserVersion.v14_r58564:  				minRev = 58564;  				maxRev = 58741;  				return true;    			case ConfuserVersion.v14_r58802:  				minRev = 58802;  				maxRev = 58852;  				return true;    			case ConfuserVersion.v14_r58857:  				minRev = 58857;  				maxRev = 73477;  				return true;    			case ConfuserVersion.v16_r66631:  				minRev = 66631;  				maxRev = 69666;  				return true;    			case ConfuserVersion.v16_r70489:  				minRev = 70489;  				maxRev = 73477;  				return true;    			case ConfuserVersion.v17_r73479:  				minRev = 73479;  				maxRev = 73605;  				return true;    			case ConfuserVersion.v17_r73740_normal:  			case ConfuserVersion.v17_r73740_native:  				minRev = 73740;  				maxRev = 74637;  				return true;    			case ConfuserVersion.v17_r74708_normal:  			case ConfuserVersion.v17_r74708_native:  				minRev = 74708;  				maxRev = 75349;  				return true;    			case ConfuserVersion.v18_r75367_normal:  			case ConfuserVersion.v18_r75367_native:  				minRev = 75367;  				maxRev = 75926;  				return true;    			case ConfuserVersion.v18_r75369_normal:  			case ConfuserVersion.v18_r75369_native:  				minRev = 75369;  				maxRev = 75926;  				return true;    			case ConfuserVersion.v19_r76101_normal:  			case ConfuserVersion.v19_r76101_native:  				minRev = 76101;  				maxRev = 78342;  				return true;    			case ConfuserVersion.v19_r78363_normal:  			case ConfuserVersion.v19_r78363_native:  				minRev = 78363;  				// We can only detect the r78963 version if a method ctor proxy is used.  				// If it's not used' then maxRev must be the same maxRev as in the next case.  				// If a method ctor proxy is found' then we know that rev <= 78962.  				if (foundNewobjProxy)  					maxRev = 78962;  				else  					maxRev = int.MaxValue;  				return true;    			case ConfuserVersion.v19_r78963_normal_Newobj:  			case ConfuserVersion.v19_r78963_native_Newobj:  				minRev = 78963;  				maxRev = int.MaxValue;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,ProxyCallFixer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ProxyCallFixer.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v10_r42915:  				minRev = 42915;  				maxRev = 42917;  				return true;    			case ConfuserVersion.v10_r42919:  				minRev = 42919;  				maxRev = 48509;  				return true;    			case ConfuserVersion.v10_r48717:  				minRev = 48717;  				maxRev = 54431;  				return true;    			case ConfuserVersion.v11_r50378:  				minRev = 50378;  				maxRev = 54431;  				return true;    			case ConfuserVersion.v12_r54564:  				minRev = 54564;  				maxRev = 54574;  				return true;    			case ConfuserVersion.v13_r55346:  				minRev = 55346;  				maxRev = 55346;  				return true;    			case ConfuserVersion.v13_r55604:  				minRev = 55604;  				maxRev = 58446;  				return true;    			case ConfuserVersion.v14_r58564:  				minRev = 58564;  				maxRev = 58741;  				return true;    			case ConfuserVersion.v14_r58802:  				minRev = 58802;  				maxRev = 58852;  				return true;    			case ConfuserVersion.v14_r58857:  				minRev = 58857;  				maxRev = 73477;  				return true;    			case ConfuserVersion.v16_r66631:  				minRev = 66631;  				maxRev = 69666;  				return true;    			case ConfuserVersion.v16_r70489:  				minRev = 70489;  				maxRev = 73477;  				return true;    			case ConfuserVersion.v17_r73479:  				minRev = 73479;  				maxRev = 73605;  				return true;    			case ConfuserVersion.v17_r73740_normal:  			case ConfuserVersion.v17_r73740_native:  				minRev = 73740;  				maxRev = 74637;  				return true;    			case ConfuserVersion.v17_r74708_normal:  			case ConfuserVersion.v17_r74708_native:  				minRev = 74708;  				maxRev = 75349;  				return true;    			case ConfuserVersion.v18_r75367_normal:  			case ConfuserVersion.v18_r75367_native:  				minRev = 75367;  				maxRev = 75926;  				return true;    			case ConfuserVersion.v18_r75369_normal:  			case ConfuserVersion.v18_r75369_native:  				minRev = 75369;  				maxRev = 75926;  				return true;    			case ConfuserVersion.v19_r76101_normal:  			case ConfuserVersion.v19_r76101_native:  				minRev = 76101;  				maxRev = 78342;  				return true;    			case ConfuserVersion.v19_r78363_normal:  			case ConfuserVersion.v19_r78363_native:  				minRev = 78363;  				// We can only detect the r78963 version if a method ctor proxy is used.  				// If it's not used' then maxRev must be the same maxRev as in the next case.  				// If a method ctor proxy is found' then we know that rev <= 78962.  				if (foundNewobjProxy)  					maxRev = 78962;  				else  					maxRev = int.MaxValue;  				return true;    			case ConfuserVersion.v19_r78963_normal_Newobj:  			case ConfuserVersion.v19_r78963_native_Newobj:  				minRev = 78963;  				maxRev = int.MaxValue;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,ProxyCallFixer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ProxyCallFixer.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v10_r42915:  				minRev = 42915;  				maxRev = 42917;  				return true;    			case ConfuserVersion.v10_r42919:  				minRev = 42919;  				maxRev = 48509;  				return true;    			case ConfuserVersion.v10_r48717:  				minRev = 48717;  				maxRev = 54431;  				return true;    			case ConfuserVersion.v11_r50378:  				minRev = 50378;  				maxRev = 54431;  				return true;    			case ConfuserVersion.v12_r54564:  				minRev = 54564;  				maxRev = 54574;  				return true;    			case ConfuserVersion.v13_r55346:  				minRev = 55346;  				maxRev = 55346;  				return true;    			case ConfuserVersion.v13_r55604:  				minRev = 55604;  				maxRev = 58446;  				return true;    			case ConfuserVersion.v14_r58564:  				minRev = 58564;  				maxRev = 58741;  				return true;    			case ConfuserVersion.v14_r58802:  				minRev = 58802;  				maxRev = 58852;  				return true;    			case ConfuserVersion.v14_r58857:  				minRev = 58857;  				maxRev = 73477;  				return true;    			case ConfuserVersion.v16_r66631:  				minRev = 66631;  				maxRev = 69666;  				return true;    			case ConfuserVersion.v16_r70489:  				minRev = 70489;  				maxRev = 73477;  				return true;    			case ConfuserVersion.v17_r73479:  				minRev = 73479;  				maxRev = 73605;  				return true;    			case ConfuserVersion.v17_r73740_normal:  			case ConfuserVersion.v17_r73740_native:  				minRev = 73740;  				maxRev = 74637;  				return true;    			case ConfuserVersion.v17_r74708_normal:  			case ConfuserVersion.v17_r74708_native:  				minRev = 74708;  				maxRev = 75349;  				return true;    			case ConfuserVersion.v18_r75367_normal:  			case ConfuserVersion.v18_r75367_native:  				minRev = 75367;  				maxRev = 75926;  				return true;    			case ConfuserVersion.v18_r75369_normal:  			case ConfuserVersion.v18_r75369_native:  				minRev = 75369;  				maxRev = 75926;  				return true;    			case ConfuserVersion.v19_r76101_normal:  			case ConfuserVersion.v19_r76101_native:  				minRev = 76101;  				maxRev = 78342;  				return true;    			case ConfuserVersion.v19_r78363_normal:  			case ConfuserVersion.v19_r78363_native:  				minRev = 78363;  				// We can only detect the r78963 version if a method ctor proxy is used.  				// If it's not used' then maxRev must be the same maxRev as in the next case.  				// If a method ctor proxy is found' then we know that rev <= 78962.  				if (foundNewobjProxy)  					maxRev = 78962;  				else  					maxRev = int.MaxValue;  				return true;    			case ConfuserVersion.v19_r78963_normal_Newobj:  			case ConfuserVersion.v19_r78963_native_Newobj:  				minRev = 78963;  				maxRev = int.MaxValue;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,ProxyCallFixer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ProxyCallFixer.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v10_r42915:  				minRev = 42915;  				maxRev = 42917;  				return true;    			case ConfuserVersion.v10_r42919:  				minRev = 42919;  				maxRev = 48509;  				return true;    			case ConfuserVersion.v10_r48717:  				minRev = 48717;  				maxRev = 54431;  				return true;    			case ConfuserVersion.v11_r50378:  				minRev = 50378;  				maxRev = 54431;  				return true;    			case ConfuserVersion.v12_r54564:  				minRev = 54564;  				maxRev = 54574;  				return true;    			case ConfuserVersion.v13_r55346:  				minRev = 55346;  				maxRev = 55346;  				return true;    			case ConfuserVersion.v13_r55604:  				minRev = 55604;  				maxRev = 58446;  				return true;    			case ConfuserVersion.v14_r58564:  				minRev = 58564;  				maxRev = 58741;  				return true;    			case ConfuserVersion.v14_r58802:  				minRev = 58802;  				maxRev = 58852;  				return true;    			case ConfuserVersion.v14_r58857:  				minRev = 58857;  				maxRev = 73477;  				return true;    			case ConfuserVersion.v16_r66631:  				minRev = 66631;  				maxRev = 69666;  				return true;    			case ConfuserVersion.v16_r70489:  				minRev = 70489;  				maxRev = 73477;  				return true;    			case ConfuserVersion.v17_r73479:  				minRev = 73479;  				maxRev = 73605;  				return true;    			case ConfuserVersion.v17_r73740_normal:  			case ConfuserVersion.v17_r73740_native:  				minRev = 73740;  				maxRev = 74637;  				return true;    			case ConfuserVersion.v17_r74708_normal:  			case ConfuserVersion.v17_r74708_native:  				minRev = 74708;  				maxRev = 75349;  				return true;    			case ConfuserVersion.v18_r75367_normal:  			case ConfuserVersion.v18_r75367_native:  				minRev = 75367;  				maxRev = 75926;  				return true;    			case ConfuserVersion.v18_r75369_normal:  			case ConfuserVersion.v18_r75369_native:  				minRev = 75369;  				maxRev = 75926;  				return true;    			case ConfuserVersion.v19_r76101_normal:  			case ConfuserVersion.v19_r76101_native:  				minRev = 76101;  				maxRev = 78342;  				return true;    			case ConfuserVersion.v19_r78363_normal:  			case ConfuserVersion.v19_r78363_native:  				minRev = 78363;  				// We can only detect the r78963 version if a method ctor proxy is used.  				// If it's not used' then maxRev must be the same maxRev as in the next case.  				// If a method ctor proxy is found' then we know that rev <= 78962.  				if (foundNewobjProxy)  					maxRev = 78962;  				else  					maxRev = int.MaxValue;  				return true;    			case ConfuserVersion.v19_r78963_normal_Newobj:  			case ConfuserVersion.v19_r78963_native_Newobj:  				minRev = 78963;  				maxRev = int.MaxValue;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,ProxyCallFixer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ProxyCallFixer.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v10_r42915:  				minRev = 42915;  				maxRev = 42917;  				return true;    			case ConfuserVersion.v10_r42919:  				minRev = 42919;  				maxRev = 48509;  				return true;    			case ConfuserVersion.v10_r48717:  				minRev = 48717;  				maxRev = 54431;  				return true;    			case ConfuserVersion.v11_r50378:  				minRev = 50378;  				maxRev = 54431;  				return true;    			case ConfuserVersion.v12_r54564:  				minRev = 54564;  				maxRev = 54574;  				return true;    			case ConfuserVersion.v13_r55346:  				minRev = 55346;  				maxRev = 55346;  				return true;    			case ConfuserVersion.v13_r55604:  				minRev = 55604;  				maxRev = 58446;  				return true;    			case ConfuserVersion.v14_r58564:  				minRev = 58564;  				maxRev = 58741;  				return true;    			case ConfuserVersion.v14_r58802:  				minRev = 58802;  				maxRev = 58852;  				return true;    			case ConfuserVersion.v14_r58857:  				minRev = 58857;  				maxRev = 73477;  				return true;    			case ConfuserVersion.v16_r66631:  				minRev = 66631;  				maxRev = 69666;  				return true;    			case ConfuserVersion.v16_r70489:  				minRev = 70489;  				maxRev = 73477;  				return true;    			case ConfuserVersion.v17_r73479:  				minRev = 73479;  				maxRev = 73605;  				return true;    			case ConfuserVersion.v17_r73740_normal:  			case ConfuserVersion.v17_r73740_native:  				minRev = 73740;  				maxRev = 74637;  				return true;    			case ConfuserVersion.v17_r74708_normal:  			case ConfuserVersion.v17_r74708_native:  				minRev = 74708;  				maxRev = 75349;  				return true;    			case ConfuserVersion.v18_r75367_normal:  			case ConfuserVersion.v18_r75367_native:  				minRev = 75367;  				maxRev = 75926;  				return true;    			case ConfuserVersion.v18_r75369_normal:  			case ConfuserVersion.v18_r75369_native:  				minRev = 75369;  				maxRev = 75926;  				return true;    			case ConfuserVersion.v19_r76101_normal:  			case ConfuserVersion.v19_r76101_native:  				minRev = 76101;  				maxRev = 78342;  				return true;    			case ConfuserVersion.v19_r78363_normal:  			case ConfuserVersion.v19_r78363_native:  				minRev = 78363;  				// We can only detect the r78963 version if a method ctor proxy is used.  				// If it's not used' then maxRev must be the same maxRev as in the next case.  				// If a method ctor proxy is found' then we know that rev <= 78962.  				if (foundNewobjProxy)  					maxRev = 78962;  				else  					maxRev = int.MaxValue;  				return true;    			case ConfuserVersion.v19_r78963_normal_Newobj:  			case ConfuserVersion.v19_r78963_native_Newobj:  				minRev = 78963;  				maxRev = int.MaxValue;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,ProxyCallFixer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ProxyCallFixer.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v10_r42915:  				minRev = 42915;  				maxRev = 42917;  				return true;    			case ConfuserVersion.v10_r42919:  				minRev = 42919;  				maxRev = 48509;  				return true;    			case ConfuserVersion.v10_r48717:  				minRev = 48717;  				maxRev = 54431;  				return true;    			case ConfuserVersion.v11_r50378:  				minRev = 50378;  				maxRev = 54431;  				return true;    			case ConfuserVersion.v12_r54564:  				minRev = 54564;  				maxRev = 54574;  				return true;    			case ConfuserVersion.v13_r55346:  				minRev = 55346;  				maxRev = 55346;  				return true;    			case ConfuserVersion.v13_r55604:  				minRev = 55604;  				maxRev = 58446;  				return true;    			case ConfuserVersion.v14_r58564:  				minRev = 58564;  				maxRev = 58741;  				return true;    			case ConfuserVersion.v14_r58802:  				minRev = 58802;  				maxRev = 58852;  				return true;    			case ConfuserVersion.v14_r58857:  				minRev = 58857;  				maxRev = 73477;  				return true;    			case ConfuserVersion.v16_r66631:  				minRev = 66631;  				maxRev = 69666;  				return true;    			case ConfuserVersion.v16_r70489:  				minRev = 70489;  				maxRev = 73477;  				return true;    			case ConfuserVersion.v17_r73479:  				minRev = 73479;  				maxRev = 73605;  				return true;    			case ConfuserVersion.v17_r73740_normal:  			case ConfuserVersion.v17_r73740_native:  				minRev = 73740;  				maxRev = 74637;  				return true;    			case ConfuserVersion.v17_r74708_normal:  			case ConfuserVersion.v17_r74708_native:  				minRev = 74708;  				maxRev = 75349;  				return true;    			case ConfuserVersion.v18_r75367_normal:  			case ConfuserVersion.v18_r75367_native:  				minRev = 75367;  				maxRev = 75926;  				return true;    			case ConfuserVersion.v18_r75369_normal:  			case ConfuserVersion.v18_r75369_native:  				minRev = 75369;  				maxRev = 75926;  				return true;    			case ConfuserVersion.v19_r76101_normal:  			case ConfuserVersion.v19_r76101_native:  				minRev = 76101;  				maxRev = 78342;  				return true;    			case ConfuserVersion.v19_r78363_normal:  			case ConfuserVersion.v19_r78363_native:  				minRev = 78363;  				// We can only detect the r78963 version if a method ctor proxy is used.  				// If it's not used' then maxRev must be the same maxRev as in the next case.  				// If a method ctor proxy is found' then we know that rev <= 78962.  				if (foundNewobjProxy)  					maxRev = 78962;  				else  					maxRev = int.MaxValue;  				return true;    			case ConfuserVersion.v19_r78963_normal_Newobj:  			case ConfuserVersion.v19_r78963_native_Newobj:  				minRev = 78963;  				maxRev = int.MaxValue;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,ResourceDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ResourceDecrypter.cs,GetHandler,The following statement contains a magic number: var callvirt = instrs[i + 2];
Magic Number,de4dot.code.deobfuscators.Confuser,ResourceDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ResourceDecrypter.cs,GetHandler,The following statement contains a magic number: i < instrs.Count - 2
Magic Number,de4dot.code.deobfuscators.Confuser,ResourceDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ResourceDecrypter.cs,FindKey0_v18_r75367,The following statement contains a magic number: i + 3 >= instrs.Count
Magic Number,de4dot.code.deobfuscators.Confuser,ResourceDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ResourceDecrypter.cs,FindKey0_v18_r75367,The following statement contains a magic number: var ldci4 = instrs[i + 2];
Magic Number,de4dot.code.deobfuscators.Confuser,ResourceDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ResourceDecrypter.cs,FindKey0_v18_r75367,The following statement contains a magic number: !instrs[i + 3].IsStloc()
Magic Number,de4dot.code.deobfuscators.Confuser,ResourceDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ResourceDecrypter.cs,FindKey0_v18_r75369,The following statement contains a magic number: index + 4 >= instrs.Count
Magic Number,de4dot.code.deobfuscators.Confuser,ResourceDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ResourceDecrypter.cs,FindKey1_v18_r75369,The following statement contains a magic number: i < instrs.Count - 4
Magic Number,de4dot.code.deobfuscators.Confuser,ResourceDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ResourceDecrypter.cs,FindKey0Key1_v14_r55802,The following statement contains a magic number: instrs[i + 2].OpCode.Code != Code.Ldelem_U1
Magic Number,de4dot.code.deobfuscators.Confuser,ResourceDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ResourceDecrypter.cs,FindKey0Key1_v14_r55802,The following statement contains a magic number: var ldci4_1 = instrs[i + 3];
Magic Number,de4dot.code.deobfuscators.Confuser,ResourceDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ResourceDecrypter.cs,FindKey0Key1_v14_r55802,The following statement contains a magic number: instrs[i + 4].OpCode.Code != Code.Xor
Magic Number,de4dot.code.deobfuscators.Confuser,ResourceDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ResourceDecrypter.cs,FindKey0Key1_v14_r55802,The following statement contains a magic number: var ldci4_2 = instrs[i + 5];
Magic Number,de4dot.code.deobfuscators.Confuser,ResourceDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ResourceDecrypter.cs,FindKey0Key1_v14_r55802,The following statement contains a magic number: i < instrs.Count - 5
Magic Number,de4dot.code.deobfuscators.Confuser,ResourceDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ResourceDecrypter.cs,FindKey0_v17_r73404,The following statement contains a magic number: index + 3 >= instrs.Count
Magic Number,de4dot.code.deobfuscators.Confuser,ResourceDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ResourceDecrypter.cs,FindKey0_v17_r73404,The following statement contains a magic number: var ldci4 = instrs[index + 2];
Magic Number,de4dot.code.deobfuscators.Confuser,ResourceDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ResourceDecrypter.cs,FindKey0_v17_r73404,The following statement contains a magic number: !instrs[index + 3].IsStloc()
Magic Number,de4dot.code.deobfuscators.Confuser,ResourceDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ResourceDecrypter.cs,FindKey0_v17_r73404,The following statement contains a magic number: i < instrs.Count - 3
Magic Number,de4dot.code.deobfuscators.Confuser,ResourceDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ResourceDecrypter.cs,FindKey1_v17_r73404,The following statement contains a magic number: var ldci4_2 = instrs[i + 2];
Magic Number,de4dot.code.deobfuscators.Confuser,ResourceDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ResourceDecrypter.cs,FindKey1_v17_r73404,The following statement contains a magic number: instrs[i + 3].OpCode.Code != Code.Rem
Magic Number,de4dot.code.deobfuscators.Confuser,ResourceDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ResourceDecrypter.cs,FindKey1_v17_r73404,The following statement contains a magic number: i < instrs.Count - 3
Magic Number,de4dot.code.deobfuscators.Confuser,ResourceDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ResourceDecrypter.cs,Decrypt_v14_r55802,The following statement contains a magic number: var decrypted = new byte[encypted.Length / 2];
Magic Number,de4dot.code.deobfuscators.Confuser,ResourceDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ResourceDecrypter.cs,Decrypt_v14_r55802,The following statement contains a magic number: decrypted[i] = (byte)((encypted[i * 2 + 1] ^ key0) * key1 + (encypted[i * 2] ^ key0));
Magic Number,de4dot.code.deobfuscators.Confuser,ResourceDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ResourceDecrypter.cs,Decrypt_v14_r55802,The following statement contains a magic number: decrypted[i] = (byte)((encypted[i * 2 + 1] ^ key0) * key1 + (encypted[i * 2] ^ key0));
Magic Number,de4dot.code.deobfuscators.Confuser,ResourceDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ResourceDecrypter.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v14_r55802:  				minRev = 55802;  				maxRev = 72989;  				return true;    			case ConfuserVersion.v17_r73404:  				minRev = 73404;  				maxRev = 73791;  				return true;    			case ConfuserVersion.v17_r73822:  				minRev = 73822;  				maxRev = 75349;  				return true;    			case ConfuserVersion.v18_r75367:  				minRev = 75367;  				maxRev = 75367;  				return true;    			case ConfuserVersion.v18_r75369:  				minRev = 75369;  				maxRev = 77124;  				return true;    			case ConfuserVersion.v19_r77172:  				minRev = 77172;  				maxRev = int.MaxValue;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,ResourceDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ResourceDecrypter.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v14_r55802:  				minRev = 55802;  				maxRev = 72989;  				return true;    			case ConfuserVersion.v17_r73404:  				minRev = 73404;  				maxRev = 73791;  				return true;    			case ConfuserVersion.v17_r73822:  				minRev = 73822;  				maxRev = 75349;  				return true;    			case ConfuserVersion.v18_r75367:  				minRev = 75367;  				maxRev = 75367;  				return true;    			case ConfuserVersion.v18_r75369:  				minRev = 75369;  				maxRev = 77124;  				return true;    			case ConfuserVersion.v19_r77172:  				minRev = 77172;  				maxRev = int.MaxValue;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,ResourceDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ResourceDecrypter.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v14_r55802:  				minRev = 55802;  				maxRev = 72989;  				return true;    			case ConfuserVersion.v17_r73404:  				minRev = 73404;  				maxRev = 73791;  				return true;    			case ConfuserVersion.v17_r73822:  				minRev = 73822;  				maxRev = 75349;  				return true;    			case ConfuserVersion.v18_r75367:  				minRev = 75367;  				maxRev = 75367;  				return true;    			case ConfuserVersion.v18_r75369:  				minRev = 75369;  				maxRev = 77124;  				return true;    			case ConfuserVersion.v19_r77172:  				minRev = 77172;  				maxRev = int.MaxValue;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,ResourceDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ResourceDecrypter.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v14_r55802:  				minRev = 55802;  				maxRev = 72989;  				return true;    			case ConfuserVersion.v17_r73404:  				minRev = 73404;  				maxRev = 73791;  				return true;    			case ConfuserVersion.v17_r73822:  				minRev = 73822;  				maxRev = 75349;  				return true;    			case ConfuserVersion.v18_r75367:  				minRev = 75367;  				maxRev = 75367;  				return true;    			case ConfuserVersion.v18_r75369:  				minRev = 75369;  				maxRev = 77124;  				return true;    			case ConfuserVersion.v19_r77172:  				minRev = 77172;  				maxRev = int.MaxValue;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,ResourceDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ResourceDecrypter.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v14_r55802:  				minRev = 55802;  				maxRev = 72989;  				return true;    			case ConfuserVersion.v17_r73404:  				minRev = 73404;  				maxRev = 73791;  				return true;    			case ConfuserVersion.v17_r73822:  				minRev = 73822;  				maxRev = 75349;  				return true;    			case ConfuserVersion.v18_r75367:  				minRev = 75367;  				maxRev = 75367;  				return true;    			case ConfuserVersion.v18_r75369:  				minRev = 75369;  				maxRev = 77124;  				return true;    			case ConfuserVersion.v19_r77172:  				minRev = 77172;  				maxRev = int.MaxValue;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,ResourceDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ResourceDecrypter.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v14_r55802:  				minRev = 55802;  				maxRev = 72989;  				return true;    			case ConfuserVersion.v17_r73404:  				minRev = 73404;  				maxRev = 73791;  				return true;    			case ConfuserVersion.v17_r73822:  				minRev = 73822;  				maxRev = 75349;  				return true;    			case ConfuserVersion.v18_r75367:  				minRev = 75367;  				maxRev = 75367;  				return true;    			case ConfuserVersion.v18_r75369:  				minRev = 75369;  				maxRev = 77124;  				return true;    			case ConfuserVersion.v19_r77172:  				minRev = 77172;  				maxRev = int.MaxValue;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,ResourceDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ResourceDecrypter.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v14_r55802:  				minRev = 55802;  				maxRev = 72989;  				return true;    			case ConfuserVersion.v17_r73404:  				minRev = 73404;  				maxRev = 73791;  				return true;    			case ConfuserVersion.v17_r73822:  				minRev = 73822;  				maxRev = 75349;  				return true;    			case ConfuserVersion.v18_r75367:  				minRev = 75367;  				maxRev = 75367;  				return true;    			case ConfuserVersion.v18_r75369:  				minRev = 75369;  				maxRev = 77124;  				return true;    			case ConfuserVersion.v19_r77172:  				minRev = 77172;  				maxRev = int.MaxValue;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,ResourceDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ResourceDecrypter.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v14_r55802:  				minRev = 55802;  				maxRev = 72989;  				return true;    			case ConfuserVersion.v17_r73404:  				minRev = 73404;  				maxRev = 73791;  				return true;    			case ConfuserVersion.v17_r73822:  				minRev = 73822;  				maxRev = 75349;  				return true;    			case ConfuserVersion.v18_r75367:  				minRev = 75367;  				maxRev = 75367;  				return true;    			case ConfuserVersion.v18_r75369:  				minRev = 75369;  				maxRev = 77124;  				return true;    			case ConfuserVersion.v19_r77172:  				minRev = 77172;  				maxRev = int.MaxValue;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,ResourceDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ResourceDecrypter.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v14_r55802:  				minRev = 55802;  				maxRev = 72989;  				return true;    			case ConfuserVersion.v17_r73404:  				minRev = 73404;  				maxRev = 73791;  				return true;    			case ConfuserVersion.v17_r73822:  				minRev = 73822;  				maxRev = 75349;  				return true;    			case ConfuserVersion.v18_r75367:  				minRev = 75367;  				maxRev = 75367;  				return true;    			case ConfuserVersion.v18_r75369:  				minRev = 75369;  				maxRev = 77124;  				return true;    			case ConfuserVersion.v19_r77172:  				minRev = 77172;  				maxRev = int.MaxValue;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,ResourceDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ResourceDecrypter.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v14_r55802:  				minRev = 55802;  				maxRev = 72989;  				return true;    			case ConfuserVersion.v17_r73404:  				minRev = 73404;  				maxRev = 73791;  				return true;    			case ConfuserVersion.v17_r73822:  				minRev = 73822;  				maxRev = 75349;  				return true;    			case ConfuserVersion.v18_r75367:  				minRev = 75367;  				maxRev = 75367;  				return true;    			case ConfuserVersion.v18_r75369:  				minRev = 75369;  				maxRev = 77124;  				return true;    			case ConfuserVersion.v19_r77172:  				minRev = 77172;  				maxRev = int.MaxValue;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,ResourceDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ResourceDecrypter.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v14_r55802:  				minRev = 55802;  				maxRev = 72989;  				return true;    			case ConfuserVersion.v17_r73404:  				minRev = 73404;  				maxRev = 73791;  				return true;    			case ConfuserVersion.v17_r73822:  				minRev = 73822;  				maxRev = 75349;  				return true;    			case ConfuserVersion.v18_r75367:  				minRev = 75367;  				maxRev = 75367;  				return true;    			case ConfuserVersion.v18_r75369:  				minRev = 75369;  				maxRev = 77124;  				return true;    			case ConfuserVersion.v19_r77172:  				minRev = 77172;  				maxRev = int.MaxValue;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\StringDecrypter.cs,FindMagic1,The following statement contains a magic number: index < 4
Magic Number,de4dot.code.deobfuscators.Confuser,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\StringDecrypter.cs,FindMagic1,The following statement contains a magic number: index -= 4;
Magic Number,de4dot.code.deobfuscators.Confuser,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\StringDecrypter.cs,FindMagic1,The following statement contains a magic number: var ldci4 = instrs[index + 2];
Magic Number,de4dot.code.deobfuscators.Confuser,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\StringDecrypter.cs,FindMagic1,The following statement contains a magic number: instrs[index + 3].OpCode.Code != Code.Sub
Magic Number,de4dot.code.deobfuscators.Confuser,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\StringDecrypter.cs,FindNewMagic1,The following statement contains a magic number: var ldci4 = instrs[i + 2];
Magic Number,de4dot.code.deobfuscators.Confuser,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\StringDecrypter.cs,FindNewMagic1,The following statement contains a magic number: instrs[i + 3].OpCode.Code != Code.Sub
Magic Number,de4dot.code.deobfuscators.Confuser,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\StringDecrypter.cs,FindNewMagic1,The following statement contains a magic number: !instrs[i + 4].IsStloc()
Magic Number,de4dot.code.deobfuscators.Confuser,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\StringDecrypter.cs,FindNewMagic1,The following statement contains a magic number: i < instrs.Count - 4
Magic Number,de4dot.code.deobfuscators.Confuser,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\StringDecrypter.cs,FindMagic2,The following statement contains a magic number: index + 4 >= instrs.Count
Magic Number,de4dot.code.deobfuscators.Confuser,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\StringDecrypter.cs,FindMagic2,The following statement contains a magic number: var ldci4 = instrs[index + 2];
Magic Number,de4dot.code.deobfuscators.Confuser,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\StringDecrypter.cs,FindMagic2,The following statement contains a magic number: instrs[index + 3].OpCode.Code != Code.Xor
Magic Number,de4dot.code.deobfuscators.Confuser,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\StringDecrypter.cs,FindMagic2,The following statement contains a magic number: !instrs[index + 4].IsStloc()
Magic Number,de4dot.code.deobfuscators.Confuser,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\StringDecrypter.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v10_r42915:  				minRev = 42915;  				maxRev = 48771;  				return true;    			case ConfuserVersion.v10_r48832:  				minRev = 48832;  				maxRev = 49238;  				return true;    			case ConfuserVersion.v11_r49299:  				minRev = 49299;  				maxRev = 58741;  				return true;    			case ConfuserVersion.v13_r55604_safe:  				minRev = 55604;  				maxRev = 58741;  				return true;    			case ConfuserVersion.v14_r58802_safe:  			case ConfuserVersion.v14_r58802_dynamic:  				minRev = 58802;  				maxRev = 60408;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\StringDecrypter.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v10_r42915:  				minRev = 42915;  				maxRev = 48771;  				return true;    			case ConfuserVersion.v10_r48832:  				minRev = 48832;  				maxRev = 49238;  				return true;    			case ConfuserVersion.v11_r49299:  				minRev = 49299;  				maxRev = 58741;  				return true;    			case ConfuserVersion.v13_r55604_safe:  				minRev = 55604;  				maxRev = 58741;  				return true;    			case ConfuserVersion.v14_r58802_safe:  			case ConfuserVersion.v14_r58802_dynamic:  				minRev = 58802;  				maxRev = 60408;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\StringDecrypter.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v10_r42915:  				minRev = 42915;  				maxRev = 48771;  				return true;    			case ConfuserVersion.v10_r48832:  				minRev = 48832;  				maxRev = 49238;  				return true;    			case ConfuserVersion.v11_r49299:  				minRev = 49299;  				maxRev = 58741;  				return true;    			case ConfuserVersion.v13_r55604_safe:  				minRev = 55604;  				maxRev = 58741;  				return true;    			case ConfuserVersion.v14_r58802_safe:  			case ConfuserVersion.v14_r58802_dynamic:  				minRev = 58802;  				maxRev = 60408;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\StringDecrypter.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v10_r42915:  				minRev = 42915;  				maxRev = 48771;  				return true;    			case ConfuserVersion.v10_r48832:  				minRev = 48832;  				maxRev = 49238;  				return true;    			case ConfuserVersion.v11_r49299:  				minRev = 49299;  				maxRev = 58741;  				return true;    			case ConfuserVersion.v13_r55604_safe:  				minRev = 55604;  				maxRev = 58741;  				return true;    			case ConfuserVersion.v14_r58802_safe:  			case ConfuserVersion.v14_r58802_dynamic:  				minRev = 58802;  				maxRev = 60408;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\StringDecrypter.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v10_r42915:  				minRev = 42915;  				maxRev = 48771;  				return true;    			case ConfuserVersion.v10_r48832:  				minRev = 48832;  				maxRev = 49238;  				return true;    			case ConfuserVersion.v11_r49299:  				minRev = 49299;  				maxRev = 58741;  				return true;    			case ConfuserVersion.v13_r55604_safe:  				minRev = 55604;  				maxRev = 58741;  				return true;    			case ConfuserVersion.v14_r58802_safe:  			case ConfuserVersion.v14_r58802_dynamic:  				minRev = 58802;  				maxRev = 60408;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\StringDecrypter.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v10_r42915:  				minRev = 42915;  				maxRev = 48771;  				return true;    			case ConfuserVersion.v10_r48832:  				minRev = 48832;  				maxRev = 49238;  				return true;    			case ConfuserVersion.v11_r49299:  				minRev = 49299;  				maxRev = 58741;  				return true;    			case ConfuserVersion.v13_r55604_safe:  				minRev = 55604;  				maxRev = 58741;  				return true;    			case ConfuserVersion.v14_r58802_safe:  			case ConfuserVersion.v14_r58802_dynamic:  				minRev = 58802;  				maxRev = 60408;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\StringDecrypter.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v10_r42915:  				minRev = 42915;  				maxRev = 48771;  				return true;    			case ConfuserVersion.v10_r48832:  				minRev = 48832;  				maxRev = 49238;  				return true;    			case ConfuserVersion.v11_r49299:  				minRev = 49299;  				maxRev = 58741;  				return true;    			case ConfuserVersion.v13_r55604_safe:  				minRev = 55604;  				maxRev = 58741;  				return true;    			case ConfuserVersion.v14_r58802_safe:  			case ConfuserVersion.v14_r58802_dynamic:  				minRev = 58802;  				maxRev = 60408;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\StringDecrypter.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v10_r42915:  				minRev = 42915;  				maxRev = 48771;  				return true;    			case ConfuserVersion.v10_r48832:  				minRev = 48832;  				maxRev = 49238;  				return true;    			case ConfuserVersion.v11_r49299:  				minRev = 49299;  				maxRev = 58741;  				return true;    			case ConfuserVersion.v13_r55604_safe:  				minRev = 55604;  				maxRev = 58741;  				return true;    			case ConfuserVersion.v14_r58802_safe:  			case ConfuserVersion.v14_r58802_dynamic:  				minRev = 58802;  				maxRev = 60408;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\StringDecrypter.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v10_r42915:  				minRev = 42915;  				maxRev = 48771;  				return true;    			case ConfuserVersion.v10_r48832:  				minRev = 48832;  				maxRev = 49238;  				return true;    			case ConfuserVersion.v11_r49299:  				minRev = 49299;  				maxRev = 58741;  				return true;    			case ConfuserVersion.v13_r55604_safe:  				minRev = 55604;  				maxRev = 58741;  				return true;    			case ConfuserVersion.v14_r58802_safe:  			case ConfuserVersion.v14_r58802_dynamic:  				minRev = 58802;  				maxRev = 60408;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\StringDecrypter.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v10_r42915:  				minRev = 42915;  				maxRev = 48771;  				return true;    			case ConfuserVersion.v10_r48832:  				minRev = 48832;  				maxRev = 49238;  				return true;    			case ConfuserVersion.v11_r49299:  				minRev = 49299;  				maxRev = 58741;  				return true;    			case ConfuserVersion.v13_r55604_safe:  				minRev = 55604;  				maxRev = 58741;  				return true;    			case ConfuserVersion.v14_r58802_safe:  			case ConfuserVersion.v14_r58802_dynamic:  				minRev = 58802;  				maxRev = 60408;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,Decrypter_v10_r48832,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\StringDecrypter.cs,Decrypt,The following statement contains a magic number: Array.Copy(BitConverter.GetBytes(val ^ rand.Next())' 0' decrypted' i' Math.Min(8' len - i));
Magic Number,de4dot.code.deobfuscators.Confuser,Decrypter_v11_r49299,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\StringDecrypter.cs,FindLocal,The following statement contains a magic number: instrs[i + 2].OpCode.Code != Code.Or
Magic Number,de4dot.code.deobfuscators.Confuser,Decrypter_v11_r49299,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\StringDecrypter.cs,FindLocal,The following statement contains a magic number: !instrs[i + 3].IsStloc()
Magic Number,de4dot.code.deobfuscators.Confuser,Decrypter_v11_r49299,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\StringDecrypter.cs,FindLocal,The following statement contains a magic number: return instrs[i + 3].GetLocal(method.Body.Variables);
Magic Number,de4dot.code.deobfuscators.Confuser,Decrypter_v11_r49299,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\StringDecrypter.cs,FindLocal,The following statement contains a magic number: i < instrs.Count - 3
Magic Number,de4dot.code.deobfuscators.Confuser,Decrypter_v11_r49299,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\StringDecrypter.cs,FindEndIndex,The following statement contains a magic number: !instrs[i + 2].IsLdloc()
Magic Number,de4dot.code.deobfuscators.Confuser,Decrypter_v11_r49299,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\StringDecrypter.cs,FindEndIndex,The following statement contains a magic number: !instrs[i + 3].IsLdcI4()
Magic Number,de4dot.code.deobfuscators.Confuser,Decrypter_v11_r49299,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\StringDecrypter.cs,FindEndIndex,The following statement contains a magic number: instrs[i + 4].OpCode.Code != Code.Add
Magic Number,de4dot.code.deobfuscators.Confuser,Decrypter_v11_r49299,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\StringDecrypter.cs,FindEndIndex,The following statement contains a magic number: !instrs[i + 5].IsStloc()
Magic Number,de4dot.code.deobfuscators.Confuser,Decrypter_v11_r49299,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\StringDecrypter.cs,FindEndIndex,The following statement contains a magic number: i < instrs.Count - 5
Magic Number,de4dot.code.deobfuscators.Confuser,Unpacker,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\Unpacker.cs,Find,The following statement contains a magic number: bool use7zip = type.NestedTypes.Count == 6;
Magic Number,de4dot.code.deobfuscators.Confuser,Unpacker,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\Unpacker.cs,FindEntryPointToken,The following statement contains a magic number: (token >> 24) != 0x06
Magic Number,de4dot.code.deobfuscators.Confuser,Unpacker,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\Unpacker.cs,FindBase,The following statement contains a magic number: i < instrs.Count - 2
Magic Number,de4dot.code.deobfuscators.Confuser,Unpacker,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\Unpacker.cs,IsDecryptMethod_v17_r73404,The following statement contains a magic number: instrs.Count < 4
Magic Number,de4dot.code.deobfuscators.Confuser,Unpacker,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\Unpacker.cs,IsDecryptMethod_v17_r73404,The following statement contains a magic number: !IsCallorNewobj(instrs[1]) && !IsCallorNewobj(instrs[2])
Magic Number,de4dot.code.deobfuscators.Confuser,Unpacker,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\Unpacker.cs,IsDecryptMethod_v17_r73404,The following statement contains a magic number: var stloc = instrs[3];
Magic Number,de4dot.code.deobfuscators.Confuser,Unpacker,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\Unpacker.cs,FindKey0_v14_r58564,The following statement contains a magic number: instrs[i + 2].OpCode.Code != Code.Xor
Magic Number,de4dot.code.deobfuscators.Confuser,Unpacker,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\Unpacker.cs,FindKey0_v14_r58564,The following statement contains a magic number: i < instrs.Count - 2
Magic Number,de4dot.code.deobfuscators.Confuser,Unpacker,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\Unpacker.cs,FindKey0_v14_r58852,The following statement contains a magic number: var ldci4_2 = instrs[i + 2];
Magic Number,de4dot.code.deobfuscators.Confuser,Unpacker,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\Unpacker.cs,FindKey0_v14_r58852,The following statement contains a magic number: !instrs[i + 3].IsStloc()
Magic Number,de4dot.code.deobfuscators.Confuser,Unpacker,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\Unpacker.cs,FindKey0_v14_r58852,The following statement contains a magic number: i < instrs.Count - 3
Magic Number,de4dot.code.deobfuscators.Confuser,Unpacker,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\Unpacker.cs,FindKey1,The following statement contains a magic number: instrs[i + 2].OpCode.Code != Code.Xor
Magic Number,de4dot.code.deobfuscators.Confuser,Unpacker,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\Unpacker.cs,FindKey1,The following statement contains a magic number: !instrs[i + 3].IsLdloc()
Magic Number,de4dot.code.deobfuscators.Confuser,Unpacker,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\Unpacker.cs,FindKey1,The following statement contains a magic number: instrs[i + 4].OpCode.Code != Code.Xor
Magic Number,de4dot.code.deobfuscators.Confuser,Unpacker,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\Unpacker.cs,FindKey1,The following statement contains a magic number: i < instrs.Count - 4
Magic Number,de4dot.code.deobfuscators.Confuser,Unpacker,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\Unpacker.cs,Decrypt_v15_r60785,The following statement contains a magic number: key[i + 1] ^= (byte)(key0 >> 8);
Magic Number,de4dot.code.deobfuscators.Confuser,Unpacker,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\Unpacker.cs,Decrypt_v15_r60785,The following statement contains a magic number: key[i + 2] ^= (byte)(key0 >> 16);
Magic Number,de4dot.code.deobfuscators.Confuser,Unpacker,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\Unpacker.cs,Decrypt_v15_r60785,The following statement contains a magic number: key[i + 2] ^= (byte)(key0 >> 16);
Magic Number,de4dot.code.deobfuscators.Confuser,Unpacker,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\Unpacker.cs,Decrypt_v15_r60785,The following statement contains a magic number: key[i + 3] ^= (byte)(key0 >> 24);
Magic Number,de4dot.code.deobfuscators.Confuser,Unpacker,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\Unpacker.cs,Decrypt_v15_r60785,The following statement contains a magic number: key[i + 3] ^= (byte)(key0 >> 24);
Magic Number,de4dot.code.deobfuscators.Confuser,Unpacker,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\Unpacker.cs,SevenZipDecompress,The following statement contains a magic number: var props = reader.ReadBytes(5);
Magic Number,de4dot.code.deobfuscators.Confuser,Unpacker,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\Unpacker.cs,SevenZipDecompress,The following statement contains a magic number: long compressedSize = data.Length - props.Length - 8;
Magic Number,de4dot.code.deobfuscators.Confuser,Unpacker,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\Unpacker.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v10_r42915:  				minRev = 42915;  				maxRev = 48509;  				return true;    			case ConfuserVersion.v10_r48717:  				minRev = 48717;  				maxRev = 57699;  				return true;    			case ConfuserVersion.v14_r57778:  				minRev = 57778;  				maxRev = 58446;  				return true;    			case ConfuserVersion.v14_r58564:  				minRev = 58564;  				maxRev = 58741;  				return true;    			case ConfuserVersion.v14_r58802:  				minRev = 58802;  				maxRev = 58817;  				return true;    			case ConfuserVersion.v14_r58852:  				minRev = 58852;  				maxRev = 60408;  				return true;    			case ConfuserVersion.v15_r60785:  				minRev = 60785;  				maxRev = 72989;  				return true;    			case ConfuserVersion.v17_r73404:  				minRev = 73404;  				maxRev = 73430;  				return true;    			case ConfuserVersion.v17_r73477:  				minRev = 73477;  				maxRev = 73479;  				return true;    			case ConfuserVersion.v17_r73566:  				minRev = 73566;  				maxRev = 75056;  				return true;    			case ConfuserVersion.v17_r75076:  				minRev = 75076;  				maxRev = 75158;  				return true;    			case ConfuserVersion.v18_r75184:  				minRev = 75184;  				maxRev = int.MaxValue;  				return true;    			case ConfuserVersion.v18_r75367:  				minRev = 75367;  				maxRev = 77124;  				return true;    			case ConfuserVersion.v19_r77172:  				minRev = 77172;  				maxRev = int.MaxValue;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,Unpacker,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\Unpacker.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v10_r42915:  				minRev = 42915;  				maxRev = 48509;  				return true;    			case ConfuserVersion.v10_r48717:  				minRev = 48717;  				maxRev = 57699;  				return true;    			case ConfuserVersion.v14_r57778:  				minRev = 57778;  				maxRev = 58446;  				return true;    			case ConfuserVersion.v14_r58564:  				minRev = 58564;  				maxRev = 58741;  				return true;    			case ConfuserVersion.v14_r58802:  				minRev = 58802;  				maxRev = 58817;  				return true;    			case ConfuserVersion.v14_r58852:  				minRev = 58852;  				maxRev = 60408;  				return true;    			case ConfuserVersion.v15_r60785:  				minRev = 60785;  				maxRev = 72989;  				return true;    			case ConfuserVersion.v17_r73404:  				minRev = 73404;  				maxRev = 73430;  				return true;    			case ConfuserVersion.v17_r73477:  				minRev = 73477;  				maxRev = 73479;  				return true;    			case ConfuserVersion.v17_r73566:  				minRev = 73566;  				maxRev = 75056;  				return true;    			case ConfuserVersion.v17_r75076:  				minRev = 75076;  				maxRev = 75158;  				return true;    			case ConfuserVersion.v18_r75184:  				minRev = 75184;  				maxRev = int.MaxValue;  				return true;    			case ConfuserVersion.v18_r75367:  				minRev = 75367;  				maxRev = 77124;  				return true;    			case ConfuserVersion.v19_r77172:  				minRev = 77172;  				maxRev = int.MaxValue;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,Unpacker,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\Unpacker.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v10_r42915:  				minRev = 42915;  				maxRev = 48509;  				return true;    			case ConfuserVersion.v10_r48717:  				minRev = 48717;  				maxRev = 57699;  				return true;    			case ConfuserVersion.v14_r57778:  				minRev = 57778;  				maxRev = 58446;  				return true;    			case ConfuserVersion.v14_r58564:  				minRev = 58564;  				maxRev = 58741;  				return true;    			case ConfuserVersion.v14_r58802:  				minRev = 58802;  				maxRev = 58817;  				return true;    			case ConfuserVersion.v14_r58852:  				minRev = 58852;  				maxRev = 60408;  				return true;    			case ConfuserVersion.v15_r60785:  				minRev = 60785;  				maxRev = 72989;  				return true;    			case ConfuserVersion.v17_r73404:  				minRev = 73404;  				maxRev = 73430;  				return true;    			case ConfuserVersion.v17_r73477:  				minRev = 73477;  				maxRev = 73479;  				return true;    			case ConfuserVersion.v17_r73566:  				minRev = 73566;  				maxRev = 75056;  				return true;    			case ConfuserVersion.v17_r75076:  				minRev = 75076;  				maxRev = 75158;  				return true;    			case ConfuserVersion.v18_r75184:  				minRev = 75184;  				maxRev = int.MaxValue;  				return true;    			case ConfuserVersion.v18_r75367:  				minRev = 75367;  				maxRev = 77124;  				return true;    			case ConfuserVersion.v19_r77172:  				minRev = 77172;  				maxRev = int.MaxValue;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,Unpacker,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\Unpacker.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v10_r42915:  				minRev = 42915;  				maxRev = 48509;  				return true;    			case ConfuserVersion.v10_r48717:  				minRev = 48717;  				maxRev = 57699;  				return true;    			case ConfuserVersion.v14_r57778:  				minRev = 57778;  				maxRev = 58446;  				return true;    			case ConfuserVersion.v14_r58564:  				minRev = 58564;  				maxRev = 58741;  				return true;    			case ConfuserVersion.v14_r58802:  				minRev = 58802;  				maxRev = 58817;  				return true;    			case ConfuserVersion.v14_r58852:  				minRev = 58852;  				maxRev = 60408;  				return true;    			case ConfuserVersion.v15_r60785:  				minRev = 60785;  				maxRev = 72989;  				return true;    			case ConfuserVersion.v17_r73404:  				minRev = 73404;  				maxRev = 73430;  				return true;    			case ConfuserVersion.v17_r73477:  				minRev = 73477;  				maxRev = 73479;  				return true;    			case ConfuserVersion.v17_r73566:  				minRev = 73566;  				maxRev = 75056;  				return true;    			case ConfuserVersion.v17_r75076:  				minRev = 75076;  				maxRev = 75158;  				return true;    			case ConfuserVersion.v18_r75184:  				minRev = 75184;  				maxRev = int.MaxValue;  				return true;    			case ConfuserVersion.v18_r75367:  				minRev = 75367;  				maxRev = 77124;  				return true;    			case ConfuserVersion.v19_r77172:  				minRev = 77172;  				maxRev = int.MaxValue;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,Unpacker,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\Unpacker.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v10_r42915:  				minRev = 42915;  				maxRev = 48509;  				return true;    			case ConfuserVersion.v10_r48717:  				minRev = 48717;  				maxRev = 57699;  				return true;    			case ConfuserVersion.v14_r57778:  				minRev = 57778;  				maxRev = 58446;  				return true;    			case ConfuserVersion.v14_r58564:  				minRev = 58564;  				maxRev = 58741;  				return true;    			case ConfuserVersion.v14_r58802:  				minRev = 58802;  				maxRev = 58817;  				return true;    			case ConfuserVersion.v14_r58852:  				minRev = 58852;  				maxRev = 60408;  				return true;    			case ConfuserVersion.v15_r60785:  				minRev = 60785;  				maxRev = 72989;  				return true;    			case ConfuserVersion.v17_r73404:  				minRev = 73404;  				maxRev = 73430;  				return true;    			case ConfuserVersion.v17_r73477:  				minRev = 73477;  				maxRev = 73479;  				return true;    			case ConfuserVersion.v17_r73566:  				minRev = 73566;  				maxRev = 75056;  				return true;    			case ConfuserVersion.v17_r75076:  				minRev = 75076;  				maxRev = 75158;  				return true;    			case ConfuserVersion.v18_r75184:  				minRev = 75184;  				maxRev = int.MaxValue;  				return true;    			case ConfuserVersion.v18_r75367:  				minRev = 75367;  				maxRev = 77124;  				return true;    			case ConfuserVersion.v19_r77172:  				minRev = 77172;  				maxRev = int.MaxValue;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,Unpacker,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\Unpacker.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v10_r42915:  				minRev = 42915;  				maxRev = 48509;  				return true;    			case ConfuserVersion.v10_r48717:  				minRev = 48717;  				maxRev = 57699;  				return true;    			case ConfuserVersion.v14_r57778:  				minRev = 57778;  				maxRev = 58446;  				return true;    			case ConfuserVersion.v14_r58564:  				minRev = 58564;  				maxRev = 58741;  				return true;    			case ConfuserVersion.v14_r58802:  				minRev = 58802;  				maxRev = 58817;  				return true;    			case ConfuserVersion.v14_r58852:  				minRev = 58852;  				maxRev = 60408;  				return true;    			case ConfuserVersion.v15_r60785:  				minRev = 60785;  				maxRev = 72989;  				return true;    			case ConfuserVersion.v17_r73404:  				minRev = 73404;  				maxRev = 73430;  				return true;    			case ConfuserVersion.v17_r73477:  				minRev = 73477;  				maxRev = 73479;  				return true;    			case ConfuserVersion.v17_r73566:  				minRev = 73566;  				maxRev = 75056;  				return true;    			case ConfuserVersion.v17_r75076:  				minRev = 75076;  				maxRev = 75158;  				return true;    			case ConfuserVersion.v18_r75184:  				minRev = 75184;  				maxRev = int.MaxValue;  				return true;    			case ConfuserVersion.v18_r75367:  				minRev = 75367;  				maxRev = 77124;  				return true;    			case ConfuserVersion.v19_r77172:  				minRev = 77172;  				maxRev = int.MaxValue;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,Unpacker,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\Unpacker.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v10_r42915:  				minRev = 42915;  				maxRev = 48509;  				return true;    			case ConfuserVersion.v10_r48717:  				minRev = 48717;  				maxRev = 57699;  				return true;    			case ConfuserVersion.v14_r57778:  				minRev = 57778;  				maxRev = 58446;  				return true;    			case ConfuserVersion.v14_r58564:  				minRev = 58564;  				maxRev = 58741;  				return true;    			case ConfuserVersion.v14_r58802:  				minRev = 58802;  				maxRev = 58817;  				return true;    			case ConfuserVersion.v14_r58852:  				minRev = 58852;  				maxRev = 60408;  				return true;    			case ConfuserVersion.v15_r60785:  				minRev = 60785;  				maxRev = 72989;  				return true;    			case ConfuserVersion.v17_r73404:  				minRev = 73404;  				maxRev = 73430;  				return true;    			case ConfuserVersion.v17_r73477:  				minRev = 73477;  				maxRev = 73479;  				return true;    			case ConfuserVersion.v17_r73566:  				minRev = 73566;  				maxRev = 75056;  				return true;    			case ConfuserVersion.v17_r75076:  				minRev = 75076;  				maxRev = 75158;  				return true;    			case ConfuserVersion.v18_r75184:  				minRev = 75184;  				maxRev = int.MaxValue;  				return true;    			case ConfuserVersion.v18_r75367:  				minRev = 75367;  				maxRev = 77124;  				return true;    			case ConfuserVersion.v19_r77172:  				minRev = 77172;  				maxRev = int.MaxValue;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,Unpacker,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\Unpacker.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v10_r42915:  				minRev = 42915;  				maxRev = 48509;  				return true;    			case ConfuserVersion.v10_r48717:  				minRev = 48717;  				maxRev = 57699;  				return true;    			case ConfuserVersion.v14_r57778:  				minRev = 57778;  				maxRev = 58446;  				return true;    			case ConfuserVersion.v14_r58564:  				minRev = 58564;  				maxRev = 58741;  				return true;    			case ConfuserVersion.v14_r58802:  				minRev = 58802;  				maxRev = 58817;  				return true;    			case ConfuserVersion.v14_r58852:  				minRev = 58852;  				maxRev = 60408;  				return true;    			case ConfuserVersion.v15_r60785:  				minRev = 60785;  				maxRev = 72989;  				return true;    			case ConfuserVersion.v17_r73404:  				minRev = 73404;  				maxRev = 73430;  				return true;    			case ConfuserVersion.v17_r73477:  				minRev = 73477;  				maxRev = 73479;  				return true;    			case ConfuserVersion.v17_r73566:  				minRev = 73566;  				maxRev = 75056;  				return true;    			case ConfuserVersion.v17_r75076:  				minRev = 75076;  				maxRev = 75158;  				return true;    			case ConfuserVersion.v18_r75184:  				minRev = 75184;  				maxRev = int.MaxValue;  				return true;    			case ConfuserVersion.v18_r75367:  				minRev = 75367;  				maxRev = 77124;  				return true;    			case ConfuserVersion.v19_r77172:  				minRev = 77172;  				maxRev = int.MaxValue;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,Unpacker,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\Unpacker.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v10_r42915:  				minRev = 42915;  				maxRev = 48509;  				return true;    			case ConfuserVersion.v10_r48717:  				minRev = 48717;  				maxRev = 57699;  				return true;    			case ConfuserVersion.v14_r57778:  				minRev = 57778;  				maxRev = 58446;  				return true;    			case ConfuserVersion.v14_r58564:  				minRev = 58564;  				maxRev = 58741;  				return true;    			case ConfuserVersion.v14_r58802:  				minRev = 58802;  				maxRev = 58817;  				return true;    			case ConfuserVersion.v14_r58852:  				minRev = 58852;  				maxRev = 60408;  				return true;    			case ConfuserVersion.v15_r60785:  				minRev = 60785;  				maxRev = 72989;  				return true;    			case ConfuserVersion.v17_r73404:  				minRev = 73404;  				maxRev = 73430;  				return true;    			case ConfuserVersion.v17_r73477:  				minRev = 73477;  				maxRev = 73479;  				return true;    			case ConfuserVersion.v17_r73566:  				minRev = 73566;  				maxRev = 75056;  				return true;    			case ConfuserVersion.v17_r75076:  				minRev = 75076;  				maxRev = 75158;  				return true;    			case ConfuserVersion.v18_r75184:  				minRev = 75184;  				maxRev = int.MaxValue;  				return true;    			case ConfuserVersion.v18_r75367:  				minRev = 75367;  				maxRev = 77124;  				return true;    			case ConfuserVersion.v19_r77172:  				minRev = 77172;  				maxRev = int.MaxValue;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,Unpacker,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\Unpacker.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v10_r42915:  				minRev = 42915;  				maxRev = 48509;  				return true;    			case ConfuserVersion.v10_r48717:  				minRev = 48717;  				maxRev = 57699;  				return true;    			case ConfuserVersion.v14_r57778:  				minRev = 57778;  				maxRev = 58446;  				return true;    			case ConfuserVersion.v14_r58564:  				minRev = 58564;  				maxRev = 58741;  				return true;    			case ConfuserVersion.v14_r58802:  				minRev = 58802;  				maxRev = 58817;  				return true;    			case ConfuserVersion.v14_r58852:  				minRev = 58852;  				maxRev = 60408;  				return true;    			case ConfuserVersion.v15_r60785:  				minRev = 60785;  				maxRev = 72989;  				return true;    			case ConfuserVersion.v17_r73404:  				minRev = 73404;  				maxRev = 73430;  				return true;    			case ConfuserVersion.v17_r73477:  				minRev = 73477;  				maxRev = 73479;  				return true;    			case ConfuserVersion.v17_r73566:  				minRev = 73566;  				maxRev = 75056;  				return true;    			case ConfuserVersion.v17_r75076:  				minRev = 75076;  				maxRev = 75158;  				return true;    			case ConfuserVersion.v18_r75184:  				minRev = 75184;  				maxRev = int.MaxValue;  				return true;    			case ConfuserVersion.v18_r75367:  				minRev = 75367;  				maxRev = 77124;  				return true;    			case ConfuserVersion.v19_r77172:  				minRev = 77172;  				maxRev = int.MaxValue;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,Unpacker,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\Unpacker.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v10_r42915:  				minRev = 42915;  				maxRev = 48509;  				return true;    			case ConfuserVersion.v10_r48717:  				minRev = 48717;  				maxRev = 57699;  				return true;    			case ConfuserVersion.v14_r57778:  				minRev = 57778;  				maxRev = 58446;  				return true;    			case ConfuserVersion.v14_r58564:  				minRev = 58564;  				maxRev = 58741;  				return true;    			case ConfuserVersion.v14_r58802:  				minRev = 58802;  				maxRev = 58817;  				return true;    			case ConfuserVersion.v14_r58852:  				minRev = 58852;  				maxRev = 60408;  				return true;    			case ConfuserVersion.v15_r60785:  				minRev = 60785;  				maxRev = 72989;  				return true;    			case ConfuserVersion.v17_r73404:  				minRev = 73404;  				maxRev = 73430;  				return true;    			case ConfuserVersion.v17_r73477:  				minRev = 73477;  				maxRev = 73479;  				return true;    			case ConfuserVersion.v17_r73566:  				minRev = 73566;  				maxRev = 75056;  				return true;    			case ConfuserVersion.v17_r75076:  				minRev = 75076;  				maxRev = 75158;  				return true;    			case ConfuserVersion.v18_r75184:  				minRev = 75184;  				maxRev = int.MaxValue;  				return true;    			case ConfuserVersion.v18_r75367:  				minRev = 75367;  				maxRev = 77124;  				return true;    			case ConfuserVersion.v19_r77172:  				minRev = 77172;  				maxRev = int.MaxValue;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,Unpacker,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\Unpacker.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v10_r42915:  				minRev = 42915;  				maxRev = 48509;  				return true;    			case ConfuserVersion.v10_r48717:  				minRev = 48717;  				maxRev = 57699;  				return true;    			case ConfuserVersion.v14_r57778:  				minRev = 57778;  				maxRev = 58446;  				return true;    			case ConfuserVersion.v14_r58564:  				minRev = 58564;  				maxRev = 58741;  				return true;    			case ConfuserVersion.v14_r58802:  				minRev = 58802;  				maxRev = 58817;  				return true;    			case ConfuserVersion.v14_r58852:  				minRev = 58852;  				maxRev = 60408;  				return true;    			case ConfuserVersion.v15_r60785:  				minRev = 60785;  				maxRev = 72989;  				return true;    			case ConfuserVersion.v17_r73404:  				minRev = 73404;  				maxRev = 73430;  				return true;    			case ConfuserVersion.v17_r73477:  				minRev = 73477;  				maxRev = 73479;  				return true;    			case ConfuserVersion.v17_r73566:  				minRev = 73566;  				maxRev = 75056;  				return true;    			case ConfuserVersion.v17_r75076:  				minRev = 75076;  				maxRev = 75158;  				return true;    			case ConfuserVersion.v18_r75184:  				minRev = 75184;  				maxRev = int.MaxValue;  				return true;    			case ConfuserVersion.v18_r75367:  				minRev = 75367;  				maxRev = 77124;  				return true;    			case ConfuserVersion.v19_r77172:  				minRev = 77172;  				maxRev = int.MaxValue;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,Unpacker,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\Unpacker.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v10_r42915:  				minRev = 42915;  				maxRev = 48509;  				return true;    			case ConfuserVersion.v10_r48717:  				minRev = 48717;  				maxRev = 57699;  				return true;    			case ConfuserVersion.v14_r57778:  				minRev = 57778;  				maxRev = 58446;  				return true;    			case ConfuserVersion.v14_r58564:  				minRev = 58564;  				maxRev = 58741;  				return true;    			case ConfuserVersion.v14_r58802:  				minRev = 58802;  				maxRev = 58817;  				return true;    			case ConfuserVersion.v14_r58852:  				minRev = 58852;  				maxRev = 60408;  				return true;    			case ConfuserVersion.v15_r60785:  				minRev = 60785;  				maxRev = 72989;  				return true;    			case ConfuserVersion.v17_r73404:  				minRev = 73404;  				maxRev = 73430;  				return true;    			case ConfuserVersion.v17_r73477:  				minRev = 73477;  				maxRev = 73479;  				return true;    			case ConfuserVersion.v17_r73566:  				minRev = 73566;  				maxRev = 75056;  				return true;    			case ConfuserVersion.v17_r75076:  				minRev = 75076;  				maxRev = 75158;  				return true;    			case ConfuserVersion.v18_r75184:  				minRev = 75184;  				maxRev = int.MaxValue;  				return true;    			case ConfuserVersion.v18_r75367:  				minRev = 75367;  				maxRev = 77124;  				return true;    			case ConfuserVersion.v19_r77172:  				minRev = 77172;  				maxRev = int.MaxValue;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,Unpacker,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\Unpacker.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v10_r42915:  				minRev = 42915;  				maxRev = 48509;  				return true;    			case ConfuserVersion.v10_r48717:  				minRev = 48717;  				maxRev = 57699;  				return true;    			case ConfuserVersion.v14_r57778:  				minRev = 57778;  				maxRev = 58446;  				return true;    			case ConfuserVersion.v14_r58564:  				minRev = 58564;  				maxRev = 58741;  				return true;    			case ConfuserVersion.v14_r58802:  				minRev = 58802;  				maxRev = 58817;  				return true;    			case ConfuserVersion.v14_r58852:  				minRev = 58852;  				maxRev = 60408;  				return true;    			case ConfuserVersion.v15_r60785:  				minRev = 60785;  				maxRev = 72989;  				return true;    			case ConfuserVersion.v17_r73404:  				minRev = 73404;  				maxRev = 73430;  				return true;    			case ConfuserVersion.v17_r73477:  				minRev = 73477;  				maxRev = 73479;  				return true;    			case ConfuserVersion.v17_r73566:  				minRev = 73566;  				maxRev = 75056;  				return true;    			case ConfuserVersion.v17_r75076:  				minRev = 75076;  				maxRev = 75158;  				return true;    			case ConfuserVersion.v18_r75184:  				minRev = 75184;  				maxRev = int.MaxValue;  				return true;    			case ConfuserVersion.v18_r75367:  				minRev = 75367;  				maxRev = 77124;  				return true;    			case ConfuserVersion.v19_r77172:  				minRev = 77172;  				maxRev = int.MaxValue;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,Unpacker,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\Unpacker.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v10_r42915:  				minRev = 42915;  				maxRev = 48509;  				return true;    			case ConfuserVersion.v10_r48717:  				minRev = 48717;  				maxRev = 57699;  				return true;    			case ConfuserVersion.v14_r57778:  				minRev = 57778;  				maxRev = 58446;  				return true;    			case ConfuserVersion.v14_r58564:  				minRev = 58564;  				maxRev = 58741;  				return true;    			case ConfuserVersion.v14_r58802:  				minRev = 58802;  				maxRev = 58817;  				return true;    			case ConfuserVersion.v14_r58852:  				minRev = 58852;  				maxRev = 60408;  				return true;    			case ConfuserVersion.v15_r60785:  				minRev = 60785;  				maxRev = 72989;  				return true;    			case ConfuserVersion.v17_r73404:  				minRev = 73404;  				maxRev = 73430;  				return true;    			case ConfuserVersion.v17_r73477:  				minRev = 73477;  				maxRev = 73479;  				return true;    			case ConfuserVersion.v17_r73566:  				minRev = 73566;  				maxRev = 75056;  				return true;    			case ConfuserVersion.v17_r75076:  				minRev = 75076;  				maxRev = 75158;  				return true;    			case ConfuserVersion.v18_r75184:  				minRev = 75184;  				maxRev = int.MaxValue;  				return true;    			case ConfuserVersion.v18_r75367:  				minRev = 75367;  				maxRev = 77124;  				return true;    			case ConfuserVersion.v19_r77172:  				minRev = 77172;  				maxRev = int.MaxValue;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,Unpacker,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\Unpacker.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v10_r42915:  				minRev = 42915;  				maxRev = 48509;  				return true;    			case ConfuserVersion.v10_r48717:  				minRev = 48717;  				maxRev = 57699;  				return true;    			case ConfuserVersion.v14_r57778:  				minRev = 57778;  				maxRev = 58446;  				return true;    			case ConfuserVersion.v14_r58564:  				minRev = 58564;  				maxRev = 58741;  				return true;    			case ConfuserVersion.v14_r58802:  				minRev = 58802;  				maxRev = 58817;  				return true;    			case ConfuserVersion.v14_r58852:  				minRev = 58852;  				maxRev = 60408;  				return true;    			case ConfuserVersion.v15_r60785:  				minRev = 60785;  				maxRev = 72989;  				return true;    			case ConfuserVersion.v17_r73404:  				minRev = 73404;  				maxRev = 73430;  				return true;    			case ConfuserVersion.v17_r73477:  				minRev = 73477;  				maxRev = 73479;  				return true;    			case ConfuserVersion.v17_r73566:  				minRev = 73566;  				maxRev = 75056;  				return true;    			case ConfuserVersion.v17_r75076:  				minRev = 75076;  				maxRev = 75158;  				return true;    			case ConfuserVersion.v18_r75184:  				minRev = 75184;  				maxRev = int.MaxValue;  				return true;    			case ConfuserVersion.v18_r75367:  				minRev = 75367;  				maxRev = 77124;  				return true;    			case ConfuserVersion.v19_r77172:  				minRev = 77172;  				maxRev = int.MaxValue;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,Unpacker,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\Unpacker.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v10_r42915:  				minRev = 42915;  				maxRev = 48509;  				return true;    			case ConfuserVersion.v10_r48717:  				minRev = 48717;  				maxRev = 57699;  				return true;    			case ConfuserVersion.v14_r57778:  				minRev = 57778;  				maxRev = 58446;  				return true;    			case ConfuserVersion.v14_r58564:  				minRev = 58564;  				maxRev = 58741;  				return true;    			case ConfuserVersion.v14_r58802:  				minRev = 58802;  				maxRev = 58817;  				return true;    			case ConfuserVersion.v14_r58852:  				minRev = 58852;  				maxRev = 60408;  				return true;    			case ConfuserVersion.v15_r60785:  				minRev = 60785;  				maxRev = 72989;  				return true;    			case ConfuserVersion.v17_r73404:  				minRev = 73404;  				maxRev = 73430;  				return true;    			case ConfuserVersion.v17_r73477:  				minRev = 73477;  				maxRev = 73479;  				return true;    			case ConfuserVersion.v17_r73566:  				minRev = 73566;  				maxRev = 75056;  				return true;    			case ConfuserVersion.v17_r75076:  				minRev = 75076;  				maxRev = 75158;  				return true;    			case ConfuserVersion.v18_r75184:  				minRev = 75184;  				maxRev = int.MaxValue;  				return true;    			case ConfuserVersion.v18_r75367:  				minRev = 75367;  				maxRev = 77124;  				return true;    			case ConfuserVersion.v19_r77172:  				minRev = 77172;  				maxRev = int.MaxValue;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,Unpacker,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\Unpacker.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v10_r42915:  				minRev = 42915;  				maxRev = 48509;  				return true;    			case ConfuserVersion.v10_r48717:  				minRev = 48717;  				maxRev = 57699;  				return true;    			case ConfuserVersion.v14_r57778:  				minRev = 57778;  				maxRev = 58446;  				return true;    			case ConfuserVersion.v14_r58564:  				minRev = 58564;  				maxRev = 58741;  				return true;    			case ConfuserVersion.v14_r58802:  				minRev = 58802;  				maxRev = 58817;  				return true;    			case ConfuserVersion.v14_r58852:  				minRev = 58852;  				maxRev = 60408;  				return true;    			case ConfuserVersion.v15_r60785:  				minRev = 60785;  				maxRev = 72989;  				return true;    			case ConfuserVersion.v17_r73404:  				minRev = 73404;  				maxRev = 73430;  				return true;    			case ConfuserVersion.v17_r73477:  				minRev = 73477;  				maxRev = 73479;  				return true;    			case ConfuserVersion.v17_r73566:  				minRev = 73566;  				maxRev = 75056;  				return true;    			case ConfuserVersion.v17_r75076:  				minRev = 75076;  				maxRev = 75158;  				return true;    			case ConfuserVersion.v18_r75184:  				minRev = 75184;  				maxRev = int.MaxValue;  				return true;    			case ConfuserVersion.v18_r75367:  				minRev = 75367;  				maxRev = 77124;  				return true;    			case ConfuserVersion.v19_r77172:  				minRev = 77172;  				maxRev = int.MaxValue;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,Unpacker,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\Unpacker.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v10_r42915:  				minRev = 42915;  				maxRev = 48509;  				return true;    			case ConfuserVersion.v10_r48717:  				minRev = 48717;  				maxRev = 57699;  				return true;    			case ConfuserVersion.v14_r57778:  				minRev = 57778;  				maxRev = 58446;  				return true;    			case ConfuserVersion.v14_r58564:  				minRev = 58564;  				maxRev = 58741;  				return true;    			case ConfuserVersion.v14_r58802:  				minRev = 58802;  				maxRev = 58817;  				return true;    			case ConfuserVersion.v14_r58852:  				minRev = 58852;  				maxRev = 60408;  				return true;    			case ConfuserVersion.v15_r60785:  				minRev = 60785;  				maxRev = 72989;  				return true;    			case ConfuserVersion.v17_r73404:  				minRev = 73404;  				maxRev = 73430;  				return true;    			case ConfuserVersion.v17_r73477:  				minRev = 73477;  				maxRev = 73479;  				return true;    			case ConfuserVersion.v17_r73566:  				minRev = 73566;  				maxRev = 75056;  				return true;    			case ConfuserVersion.v17_r75076:  				minRev = 75076;  				maxRev = 75158;  				return true;    			case ConfuserVersion.v18_r75184:  				minRev = 75184;  				maxRev = int.MaxValue;  				return true;    			case ConfuserVersion.v18_r75367:  				minRev = 75367;  				maxRev = 77124;  				return true;    			case ConfuserVersion.v19_r77172:  				minRev = 77172;  				maxRev = int.MaxValue;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,Unpacker,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\Unpacker.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v10_r42915:  				minRev = 42915;  				maxRev = 48509;  				return true;    			case ConfuserVersion.v10_r48717:  				minRev = 48717;  				maxRev = 57699;  				return true;    			case ConfuserVersion.v14_r57778:  				minRev = 57778;  				maxRev = 58446;  				return true;    			case ConfuserVersion.v14_r58564:  				minRev = 58564;  				maxRev = 58741;  				return true;    			case ConfuserVersion.v14_r58802:  				minRev = 58802;  				maxRev = 58817;  				return true;    			case ConfuserVersion.v14_r58852:  				minRev = 58852;  				maxRev = 60408;  				return true;    			case ConfuserVersion.v15_r60785:  				minRev = 60785;  				maxRev = 72989;  				return true;    			case ConfuserVersion.v17_r73404:  				minRev = 73404;  				maxRev = 73430;  				return true;    			case ConfuserVersion.v17_r73477:  				minRev = 73477;  				maxRev = 73479;  				return true;    			case ConfuserVersion.v17_r73566:  				minRev = 73566;  				maxRev = 75056;  				return true;    			case ConfuserVersion.v17_r75076:  				minRev = 75076;  				maxRev = 75158;  				return true;    			case ConfuserVersion.v18_r75184:  				minRev = 75184;  				maxRev = int.MaxValue;  				return true;    			case ConfuserVersion.v18_r75367:  				minRev = 75367;  				maxRev = 77124;  				return true;    			case ConfuserVersion.v19_r77172:  				minRev = 77172;  				maxRev = int.MaxValue;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,Unpacker,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\Unpacker.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v10_r42915:  				minRev = 42915;  				maxRev = 48509;  				return true;    			case ConfuserVersion.v10_r48717:  				minRev = 48717;  				maxRev = 57699;  				return true;    			case ConfuserVersion.v14_r57778:  				minRev = 57778;  				maxRev = 58446;  				return true;    			case ConfuserVersion.v14_r58564:  				minRev = 58564;  				maxRev = 58741;  				return true;    			case ConfuserVersion.v14_r58802:  				minRev = 58802;  				maxRev = 58817;  				return true;    			case ConfuserVersion.v14_r58852:  				minRev = 58852;  				maxRev = 60408;  				return true;    			case ConfuserVersion.v15_r60785:  				minRev = 60785;  				maxRev = 72989;  				return true;    			case ConfuserVersion.v17_r73404:  				minRev = 73404;  				maxRev = 73430;  				return true;    			case ConfuserVersion.v17_r73477:  				minRev = 73477;  				maxRev = 73479;  				return true;    			case ConfuserVersion.v17_r73566:  				minRev = 73566;  				maxRev = 75056;  				return true;    			case ConfuserVersion.v17_r75076:  				minRev = 75076;  				maxRev = 75158;  				return true;    			case ConfuserVersion.v18_r75184:  				minRev = 75184;  				maxRev = int.MaxValue;  				return true;    			case ConfuserVersion.v18_r75367:  				minRev = 75367;  				maxRev = 77124;  				return true;    			case ConfuserVersion.v19_r77172:  				minRev = 77172;  				maxRev = int.MaxValue;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,Unpacker,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\Unpacker.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v10_r42915:  				minRev = 42915;  				maxRev = 48509;  				return true;    			case ConfuserVersion.v10_r48717:  				minRev = 48717;  				maxRev = 57699;  				return true;    			case ConfuserVersion.v14_r57778:  				minRev = 57778;  				maxRev = 58446;  				return true;    			case ConfuserVersion.v14_r58564:  				minRev = 58564;  				maxRev = 58741;  				return true;    			case ConfuserVersion.v14_r58802:  				minRev = 58802;  				maxRev = 58817;  				return true;    			case ConfuserVersion.v14_r58852:  				minRev = 58852;  				maxRev = 60408;  				return true;    			case ConfuserVersion.v15_r60785:  				minRev = 60785;  				maxRev = 72989;  				return true;    			case ConfuserVersion.v17_r73404:  				minRev = 73404;  				maxRev = 73430;  				return true;    			case ConfuserVersion.v17_r73477:  				minRev = 73477;  				maxRev = 73479;  				return true;    			case ConfuserVersion.v17_r73566:  				minRev = 73566;  				maxRev = 75056;  				return true;    			case ConfuserVersion.v17_r75076:  				minRev = 75076;  				maxRev = 75158;  				return true;    			case ConfuserVersion.v18_r75184:  				minRev = 75184;  				maxRev = int.MaxValue;  				return true;    			case ConfuserVersion.v18_r75367:  				minRev = 75367;  				maxRev = 77124;  				return true;    			case ConfuserVersion.v19_r77172:  				minRev = 77172;  				maxRev = int.MaxValue;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,Unpacker,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\Unpacker.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v10_r42915:  				minRev = 42915;  				maxRev = 48509;  				return true;    			case ConfuserVersion.v10_r48717:  				minRev = 48717;  				maxRev = 57699;  				return true;    			case ConfuserVersion.v14_r57778:  				minRev = 57778;  				maxRev = 58446;  				return true;    			case ConfuserVersion.v14_r58564:  				minRev = 58564;  				maxRev = 58741;  				return true;    			case ConfuserVersion.v14_r58802:  				minRev = 58802;  				maxRev = 58817;  				return true;    			case ConfuserVersion.v14_r58852:  				minRev = 58852;  				maxRev = 60408;  				return true;    			case ConfuserVersion.v15_r60785:  				minRev = 60785;  				maxRev = 72989;  				return true;    			case ConfuserVersion.v17_r73404:  				minRev = 73404;  				maxRev = 73430;  				return true;    			case ConfuserVersion.v17_r73477:  				minRev = 73477;  				maxRev = 73479;  				return true;    			case ConfuserVersion.v17_r73566:  				minRev = 73566;  				maxRev = 75056;  				return true;    			case ConfuserVersion.v17_r75076:  				minRev = 75076;  				maxRev = 75158;  				return true;    			case ConfuserVersion.v18_r75184:  				minRev = 75184;  				maxRev = int.MaxValue;  				return true;    			case ConfuserVersion.v18_r75367:  				minRev = 75367;  				maxRev = 77124;  				return true;    			case ConfuserVersion.v19_r77172:  				minRev = 77172;  				maxRev = int.MaxValue;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,Unpacker,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\Unpacker.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v10_r42915:  				minRev = 42915;  				maxRev = 48509;  				return true;    			case ConfuserVersion.v10_r48717:  				minRev = 48717;  				maxRev = 57699;  				return true;    			case ConfuserVersion.v14_r57778:  				minRev = 57778;  				maxRev = 58446;  				return true;    			case ConfuserVersion.v14_r58564:  				minRev = 58564;  				maxRev = 58741;  				return true;    			case ConfuserVersion.v14_r58802:  				minRev = 58802;  				maxRev = 58817;  				return true;    			case ConfuserVersion.v14_r58852:  				minRev = 58852;  				maxRev = 60408;  				return true;    			case ConfuserVersion.v15_r60785:  				minRev = 60785;  				maxRev = 72989;  				return true;    			case ConfuserVersion.v17_r73404:  				minRev = 73404;  				maxRev = 73430;  				return true;    			case ConfuserVersion.v17_r73477:  				minRev = 73477;  				maxRev = 73479;  				return true;    			case ConfuserVersion.v17_r73566:  				minRev = 73566;  				maxRev = 75056;  				return true;    			case ConfuserVersion.v17_r75076:  				minRev = 75076;  				maxRev = 75158;  				return true;    			case ConfuserVersion.v18_r75184:  				minRev = 75184;  				maxRev = int.MaxValue;  				return true;    			case ConfuserVersion.v18_r75367:  				minRev = 75367;  				maxRev = 77124;  				return true;    			case ConfuserVersion.v19_r77172:  				minRev = 77172;  				maxRev = int.MaxValue;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,Unpacker,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\Unpacker.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v10_r42915:  				minRev = 42915;  				maxRev = 48509;  				return true;    			case ConfuserVersion.v10_r48717:  				minRev = 48717;  				maxRev = 57699;  				return true;    			case ConfuserVersion.v14_r57778:  				minRev = 57778;  				maxRev = 58446;  				return true;    			case ConfuserVersion.v14_r58564:  				minRev = 58564;  				maxRev = 58741;  				return true;    			case ConfuserVersion.v14_r58802:  				minRev = 58802;  				maxRev = 58817;  				return true;    			case ConfuserVersion.v14_r58852:  				minRev = 58852;  				maxRev = 60408;  				return true;    			case ConfuserVersion.v15_r60785:  				minRev = 60785;  				maxRev = 72989;  				return true;    			case ConfuserVersion.v17_r73404:  				minRev = 73404;  				maxRev = 73430;  				return true;    			case ConfuserVersion.v17_r73477:  				minRev = 73477;  				maxRev = 73479;  				return true;    			case ConfuserVersion.v17_r73566:  				minRev = 73566;  				maxRev = 75056;  				return true;    			case ConfuserVersion.v17_r75076:  				minRev = 75076;  				maxRev = 75158;  				return true;    			case ConfuserVersion.v18_r75184:  				minRev = 75184;  				maxRev = int.MaxValue;  				return true;    			case ConfuserVersion.v18_r75367:  				minRev = 75367;  				maxRev = 77124;  				return true;    			case ConfuserVersion.v19_r77172:  				minRev = 77172;  				maxRev = int.MaxValue;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,Unpacker,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\Unpacker.cs,GetRevisionRange,The following statement contains a magic number: switch (version) {  			case ConfuserVersion.Unknown:  				minRev = maxRev = 0;  				return false;    			case ConfuserVersion.v10_r42915:  				minRev = 42915;  				maxRev = 48509;  				return true;    			case ConfuserVersion.v10_r48717:  				minRev = 48717;  				maxRev = 57699;  				return true;    			case ConfuserVersion.v14_r57778:  				minRev = 57778;  				maxRev = 58446;  				return true;    			case ConfuserVersion.v14_r58564:  				minRev = 58564;  				maxRev = 58741;  				return true;    			case ConfuserVersion.v14_r58802:  				minRev = 58802;  				maxRev = 58817;  				return true;    			case ConfuserVersion.v14_r58852:  				minRev = 58852;  				maxRev = 60408;  				return true;    			case ConfuserVersion.v15_r60785:  				minRev = 60785;  				maxRev = 72989;  				return true;    			case ConfuserVersion.v17_r73404:  				minRev = 73404;  				maxRev = 73430;  				return true;    			case ConfuserVersion.v17_r73477:  				minRev = 73477;  				maxRev = 73479;  				return true;    			case ConfuserVersion.v17_r73566:  				minRev = 73566;  				maxRev = 75056;  				return true;    			case ConfuserVersion.v17_r75076:  				minRev = 75076;  				maxRev = 75158;  				return true;    			case ConfuserVersion.v18_r75184:  				minRev = 75184;  				maxRev = int.MaxValue;  				return true;    			case ConfuserVersion.v18_r75367:  				minRev = 75367;  				maxRev = 77124;  				return true;    			case ConfuserVersion.v19_r77172:  				minRev = 77172;  				maxRev = int.MaxValue;  				return true;    			default: throw new ApplicationException("Invalid version");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,X86Emulator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\x86Emulator.cs,Decode,The following statement contains a magic number: switch (opc) {  			case 0x01:	// ADD Ed'Gd  				ParseModRM();  				return new Instruction(OpCode.Add_RR' new RegOperand(rm)' new RegOperand(reg));    			case 0x29:	// SUB Ed'Gd  				ParseModRM();  				return new Instruction(OpCode.Sub_RR' new RegOperand(rm)' new RegOperand(reg));    			case 0x31:	// XOR Ed'Gd  				ParseModRM();  				return new Instruction(OpCode.Xor_RR' new RegOperand(rm)' new RegOperand(reg));    			case 0x58:	// POP EAX  			case 0x59:	// POP ECX  			case 0x5A:	// POP EDX  			case 0x5B:	// POP EBX  			case 0x5C:	// POP ESP  			case 0x5D:	// POP EBP  			case 0x5E:	// POP ESI  			case 0x5F:	// POP EDI  				return new Instruction(OpCode.Pop_R' new RegOperand(opc - 0x58));    			case 0x81:	// Grp1 Ed'Id  				ParseModRM();  				switch (reg) {  				case 0: return new Instruction(OpCode.Add_RI' new RegOperand(rm)' new ImmOperand(reader.ReadInt32()));  				case 5: return new Instruction(OpCode.Sub_RI' new RegOperand(rm)' new ImmOperand(reader.ReadInt32()));  				case 6: return new Instruction(OpCode.Xor_RI' new RegOperand(rm)' new ImmOperand(reader.ReadInt32()));  				default: throw new NotSupportedException();  				}    			case 0x89:	// MOV Ed'Gd  				ParseModRM();  				return new Instruction(OpCode.Mov_RR' new RegOperand(rm)' new RegOperand(reg));    			case 0xB8:	// MOV EAX'Id  			case 0xB9:	// MOV ECX'Id  			case 0xBA:	// MOV EDX'Id  			case 0xBB:	// MOV EBX'Id  			case 0xBC:	// MOV ESP'Id  			case 0xBD:	// MOV EBP'Id  			case 0xBE:	// MOV ESI'Id  			case 0xBF:	// MOV EDI'Id  				return new Instruction(OpCode.Mov_RI' new RegOperand(opc - 0xB8)' new ImmOperand(reader.ReadInt32()));    			case 0xF7:	// Grp3 Ev  				ParseModRM();  				switch (reg) {  				case 2: return new Instruction(OpCode.Not_R' new RegOperand(rm));  				case 3: return new Instruction(OpCode.Neg_R' new RegOperand(rm));  				default: throw new NotSupportedException();  				}    			default: throw new NotSupportedException($"Invalid opcode: {opc:X2}");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,X86Emulator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\x86Emulator.cs,Decode,The following statement contains a magic number: switch (opc) {  			case 0x01:	// ADD Ed'Gd  				ParseModRM();  				return new Instruction(OpCode.Add_RR' new RegOperand(rm)' new RegOperand(reg));    			case 0x29:	// SUB Ed'Gd  				ParseModRM();  				return new Instruction(OpCode.Sub_RR' new RegOperand(rm)' new RegOperand(reg));    			case 0x31:	// XOR Ed'Gd  				ParseModRM();  				return new Instruction(OpCode.Xor_RR' new RegOperand(rm)' new RegOperand(reg));    			case 0x58:	// POP EAX  			case 0x59:	// POP ECX  			case 0x5A:	// POP EDX  			case 0x5B:	// POP EBX  			case 0x5C:	// POP ESP  			case 0x5D:	// POP EBP  			case 0x5E:	// POP ESI  			case 0x5F:	// POP EDI  				return new Instruction(OpCode.Pop_R' new RegOperand(opc - 0x58));    			case 0x81:	// Grp1 Ed'Id  				ParseModRM();  				switch (reg) {  				case 0: return new Instruction(OpCode.Add_RI' new RegOperand(rm)' new ImmOperand(reader.ReadInt32()));  				case 5: return new Instruction(OpCode.Sub_RI' new RegOperand(rm)' new ImmOperand(reader.ReadInt32()));  				case 6: return new Instruction(OpCode.Xor_RI' new RegOperand(rm)' new ImmOperand(reader.ReadInt32()));  				default: throw new NotSupportedException();  				}    			case 0x89:	// MOV Ed'Gd  				ParseModRM();  				return new Instruction(OpCode.Mov_RR' new RegOperand(rm)' new RegOperand(reg));    			case 0xB8:	// MOV EAX'Id  			case 0xB9:	// MOV ECX'Id  			case 0xBA:	// MOV EDX'Id  			case 0xBB:	// MOV EBX'Id  			case 0xBC:	// MOV ESP'Id  			case 0xBD:	// MOV EBP'Id  			case 0xBE:	// MOV ESI'Id  			case 0xBF:	// MOV EDI'Id  				return new Instruction(OpCode.Mov_RI' new RegOperand(opc - 0xB8)' new ImmOperand(reader.ReadInt32()));    			case 0xF7:	// Grp3 Ev  				ParseModRM();  				switch (reg) {  				case 2: return new Instruction(OpCode.Not_R' new RegOperand(rm));  				case 3: return new Instruction(OpCode.Neg_R' new RegOperand(rm));  				default: throw new NotSupportedException();  				}    			default: throw new NotSupportedException($"Invalid opcode: {opc:X2}");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,X86Emulator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\x86Emulator.cs,Decode,The following statement contains a magic number: switch (opc) {  			case 0x01:	// ADD Ed'Gd  				ParseModRM();  				return new Instruction(OpCode.Add_RR' new RegOperand(rm)' new RegOperand(reg));    			case 0x29:	// SUB Ed'Gd  				ParseModRM();  				return new Instruction(OpCode.Sub_RR' new RegOperand(rm)' new RegOperand(reg));    			case 0x31:	// XOR Ed'Gd  				ParseModRM();  				return new Instruction(OpCode.Xor_RR' new RegOperand(rm)' new RegOperand(reg));    			case 0x58:	// POP EAX  			case 0x59:	// POP ECX  			case 0x5A:	// POP EDX  			case 0x5B:	// POP EBX  			case 0x5C:	// POP ESP  			case 0x5D:	// POP EBP  			case 0x5E:	// POP ESI  			case 0x5F:	// POP EDI  				return new Instruction(OpCode.Pop_R' new RegOperand(opc - 0x58));    			case 0x81:	// Grp1 Ed'Id  				ParseModRM();  				switch (reg) {  				case 0: return new Instruction(OpCode.Add_RI' new RegOperand(rm)' new ImmOperand(reader.ReadInt32()));  				case 5: return new Instruction(OpCode.Sub_RI' new RegOperand(rm)' new ImmOperand(reader.ReadInt32()));  				case 6: return new Instruction(OpCode.Xor_RI' new RegOperand(rm)' new ImmOperand(reader.ReadInt32()));  				default: throw new NotSupportedException();  				}    			case 0x89:	// MOV Ed'Gd  				ParseModRM();  				return new Instruction(OpCode.Mov_RR' new RegOperand(rm)' new RegOperand(reg));    			case 0xB8:	// MOV EAX'Id  			case 0xB9:	// MOV ECX'Id  			case 0xBA:	// MOV EDX'Id  			case 0xBB:	// MOV EBX'Id  			case 0xBC:	// MOV ESP'Id  			case 0xBD:	// MOV EBP'Id  			case 0xBE:	// MOV ESI'Id  			case 0xBF:	// MOV EDI'Id  				return new Instruction(OpCode.Mov_RI' new RegOperand(opc - 0xB8)' new ImmOperand(reader.ReadInt32()));    			case 0xF7:	// Grp3 Ev  				ParseModRM();  				switch (reg) {  				case 2: return new Instruction(OpCode.Not_R' new RegOperand(rm));  				case 3: return new Instruction(OpCode.Neg_R' new RegOperand(rm));  				default: throw new NotSupportedException();  				}    			default: throw new NotSupportedException($"Invalid opcode: {opc:X2}");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,X86Emulator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\x86Emulator.cs,Decode,The following statement contains a magic number: switch (opc) {  			case 0x01:	// ADD Ed'Gd  				ParseModRM();  				return new Instruction(OpCode.Add_RR' new RegOperand(rm)' new RegOperand(reg));    			case 0x29:	// SUB Ed'Gd  				ParseModRM();  				return new Instruction(OpCode.Sub_RR' new RegOperand(rm)' new RegOperand(reg));    			case 0x31:	// XOR Ed'Gd  				ParseModRM();  				return new Instruction(OpCode.Xor_RR' new RegOperand(rm)' new RegOperand(reg));    			case 0x58:	// POP EAX  			case 0x59:	// POP ECX  			case 0x5A:	// POP EDX  			case 0x5B:	// POP EBX  			case 0x5C:	// POP ESP  			case 0x5D:	// POP EBP  			case 0x5E:	// POP ESI  			case 0x5F:	// POP EDI  				return new Instruction(OpCode.Pop_R' new RegOperand(opc - 0x58));    			case 0x81:	// Grp1 Ed'Id  				ParseModRM();  				switch (reg) {  				case 0: return new Instruction(OpCode.Add_RI' new RegOperand(rm)' new ImmOperand(reader.ReadInt32()));  				case 5: return new Instruction(OpCode.Sub_RI' new RegOperand(rm)' new ImmOperand(reader.ReadInt32()));  				case 6: return new Instruction(OpCode.Xor_RI' new RegOperand(rm)' new ImmOperand(reader.ReadInt32()));  				default: throw new NotSupportedException();  				}    			case 0x89:	// MOV Ed'Gd  				ParseModRM();  				return new Instruction(OpCode.Mov_RR' new RegOperand(rm)' new RegOperand(reg));    			case 0xB8:	// MOV EAX'Id  			case 0xB9:	// MOV ECX'Id  			case 0xBA:	// MOV EDX'Id  			case 0xBB:	// MOV EBX'Id  			case 0xBC:	// MOV ESP'Id  			case 0xBD:	// MOV EBP'Id  			case 0xBE:	// MOV ESI'Id  			case 0xBF:	// MOV EDI'Id  				return new Instruction(OpCode.Mov_RI' new RegOperand(opc - 0xB8)' new ImmOperand(reader.ReadInt32()));    			case 0xF7:	// Grp3 Ev  				ParseModRM();  				switch (reg) {  				case 2: return new Instruction(OpCode.Not_R' new RegOperand(rm));  				case 3: return new Instruction(OpCode.Neg_R' new RegOperand(rm));  				default: throw new NotSupportedException();  				}    			default: throw new NotSupportedException($"Invalid opcode: {opc:X2}");  			}
Magic Number,de4dot.code.deobfuscators.Confuser,X86Emulator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\x86Emulator.cs,ParseModRM,The following statement contains a magic number: mod = (byte)((modRM >> 6) & 7);
Magic Number,de4dot.code.deobfuscators.Confuser,X86Emulator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\x86Emulator.cs,ParseModRM,The following statement contains a magic number: mod = (byte)((modRM >> 6) & 7);
Magic Number,de4dot.code.deobfuscators.Confuser,X86Emulator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\x86Emulator.cs,ParseModRM,The following statement contains a magic number: reg = (byte)((modRM >> 3) & 7);
Magic Number,de4dot.code.deobfuscators.Confuser,X86Emulator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\x86Emulator.cs,ParseModRM,The following statement contains a magic number: reg = (byte)((modRM >> 3) & 7);
Magic Number,de4dot.code.deobfuscators.Confuser,X86Emulator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\x86Emulator.cs,ParseModRM,The following statement contains a magic number: rm = (byte)(modRM & 7);
Magic Number,de4dot.code.deobfuscators.Confuser,X86Emulator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\x86Emulator.cs,ParseModRM,The following statement contains a magic number: mod != 3
Magic Number,de4dot.code.deobfuscators.CryptoObfuscator,AssemblyResolver,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CryptoObfuscator\AssemblyResolver.cs,CheckInitMethod,The following statement contains a magic number: var newobj = instrs[2];
Magic Number,de4dot.code.deobfuscators.CryptoObfuscator,AssemblyResolver,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CryptoObfuscator\AssemblyResolver.cs,InitializeEmbeddedAssemblies,The following statement contains a magic number: var newAssemblyInfos = new List<AssemblyInfo>(tmpAssemblyInfos.Length / 2);
Magic Number,de4dot.code.deobfuscators.CryptoObfuscator,ConstantsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CryptoObfuscator\ConstantsDecrypter.cs,CheckType,The following statement contains a magic number: type.Methods.Count != 7
Magic Number,de4dot.code.deobfuscators.CryptoObfuscator,ConstantsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CryptoObfuscator\ConstantsDecrypter.cs,CheckType,The following statement contains a magic number: type.Fields.Count < 1 || type.Fields.Count > 2
Magic Number,de4dot.code.deobfuscators.CryptoObfuscator,ConstantsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CryptoObfuscator\ConstantsDecrypter.cs,Deobfuscate,The following statement contains a magic number: i < instrs.Count - 5
Magic Number,de4dot.code.deobfuscators.CryptoObfuscator,CoUtils,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CryptoObfuscator\CoUtils.cs,DecryptResourceName,The following statement contains a magic number: array[len] = (char)((int)array[len] ^ ((int)coddedBytes[key & 15] | key));
Magic Number,de4dot.code.deobfuscators.CryptoObfuscator,CoUtils,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CryptoObfuscator\CoUtils.cs,DecryptResourceName,The following statement contains a magic number: cctor = instrs[i + 2].Operand as MethodDef;
Magic Number,de4dot.code.deobfuscators.CryptoObfuscator,CoUtils,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CryptoObfuscator\CoUtils.cs,DecryptResourceName,The following statement contains a magic number: i < instrs.Count - 2
Magic Number,de4dot.code.deobfuscators.CryptoObfuscator,Deobfuscator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CryptoObfuscator\Deobfuscator.cs,DetectInternal,The following statement contains a magic number: val += 100 + 10 * (sum - 1);
Magic Number,de4dot.code.deobfuscators.CryptoObfuscator,Deobfuscator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CryptoObfuscator\Deobfuscator.cs,DetectInternal,The following statement contains a magic number: val += 100 + 10 * (sum - 1);
Magic Number,de4dot.code.deobfuscators.CryptoObfuscator,Deobfuscator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CryptoObfuscator\Deobfuscator.cs,DetectInternal,The following statement contains a magic number: val += 10;
Magic Number,de4dot.code.deobfuscators.CryptoObfuscator,Deobfuscator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CryptoObfuscator\Deobfuscator.cs,InitializeVersion,The following statement contains a magic number: val.Groups.Count < 2
Magic Number,de4dot.code.deobfuscators.CryptoObfuscator,MethodBodyReader,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CryptoObfuscator\MethodBodyReader.cs,ReadExceptionHandlers,The following statement contains a magic number: ReadExceptionHandlers((totalSize - 4) / 24);
Magic Number,de4dot.code.deobfuscators.CryptoObfuscator,MethodBodyReader,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CryptoObfuscator\MethodBodyReader.cs,ReadExceptionHandlers,The following statement contains a magic number: ReadExceptionHandlers((totalSize - 4) / 24);
Magic Number,de4dot.code.deobfuscators.CryptoObfuscator,MethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CryptoObfuscator\MethodsDecrypter.cs,Check,The following statement contains a magic number: type.Fields.Count != 3
Magic Number,de4dot.code.deobfuscators.CryptoObfuscator,MethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CryptoObfuscator\MethodsDecrypter.cs,GetTokens,The following statement contains a magic number: var ldci4_3 = instrs[i + 2];
Magic Number,de4dot.code.deobfuscators.CryptoObfuscator,MethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CryptoObfuscator\MethodsDecrypter.cs,GetTokens,The following statement contains a magic number: var call = instrs[i + 3];
Magic Number,de4dot.code.deobfuscators.CryptoObfuscator,MethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CryptoObfuscator\MethodsDecrypter.cs,GetTokens,The following statement contains a magic number: i < instrs.Count - 3
Magic Number,de4dot.code.deobfuscators.CryptoObfuscator,ProxyCallFixer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CryptoObfuscator\ProxyCallFixer.cs,CheckCctor,The following statement contains a magic number: uint declaringTypeToken = (uint)(int)instrs[2].Operand;
Magic Number,de4dot.code.deobfuscators.CryptoObfuscator,ProxyCallFixer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CryptoObfuscator\ProxyCallFixer.cs,CheckCctor,The following statement contains a magic number: var createMethod = instrs[3].Operand as MethodDef;
Magic Number,de4dot.code.deobfuscators.CryptoObfuscator,ProxyCallFixer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CryptoObfuscator\ProxyCallFixer.cs,GetProxyCreateMethod,The following statement contains a magic number: type.Fields.Count < 1 || type.Fields.Count > 22
Magic Number,de4dot.code.deobfuscators.CryptoObfuscator,ResourceDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CryptoObfuscator\ResourceDecrypter.cs,FindDesktopOrCompactFramework,The following statement contains a magic number: type.Fields.Count < 5
Magic Number,de4dot.code.deobfuscators.CryptoObfuscator,ResourceDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CryptoObfuscator\ResourceDecrypter.cs,InitializeHeaderInfo,The following statement contains a magic number: deflatedFlag = 2;
Magic Number,de4dot.code.deobfuscators.CryptoObfuscator,ResourceDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CryptoObfuscator\ResourceDecrypter.cs,InitializeHeaderInfo,The following statement contains a magic number: bitwiseNotEncryptedFlag = 4;
Magic Number,de4dot.code.deobfuscators.CryptoObfuscator,ResourceDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CryptoObfuscator\ResourceDecrypter.cs,UpdateFlags,The following statement contains a magic number: method == null || method.Body == null || method.Body.Variables.Count < 3
Magic Number,de4dot.code.deobfuscators.CryptoObfuscator,ResourceDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CryptoObfuscator\ResourceDecrypter.cs,UpdateFlags,The following statement contains a magic number: var ldloc = instructions[i - 2];
Magic Number,de4dot.code.deobfuscators.CryptoObfuscator,ResourceDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CryptoObfuscator\ResourceDecrypter.cs,UpdateFlags,The following statement contains a magic number: switch (frameworkType) {  			case FrameworkType.Desktop:  				if (!module.IsClr1x) {  					if (constants.Count == 2) {  						desEncryptedFlag = (byte)constants[0];  						deflatedFlag = (byte)constants[1];  						return true;  					}  				}  				if (constants.Count == 1) {  					desEncryptedFlag = (byte)constants[0];  					return true;  				}  				break;    			case FrameworkType.Silverlight:  				if (constants.Count == 1) {  					bitwiseNotEncryptedFlag = (byte)constants[0];  					return true;  				}  				break;    			case FrameworkType.CompactFramework:  				if (constants.Count == 1) {  					desEncryptedFlag = (byte)constants[0];  					return true;  				}  				break;  			}
Magic Number,de4dot.code.deobfuscators.CryptoObfuscator,ResourceDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CryptoObfuscator\ResourceDecrypter.cs,GetHeaderSkipBytes,The following statement contains a magic number: loopCount < 2 || loopCount > 4
Magic Number,de4dot.code.deobfuscators.CryptoObfuscator,ResourceDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CryptoObfuscator\ResourceDecrypter.cs,GetHeaderSkipBytes,The following statement contains a magic number: loopCount < 2 || loopCount > 4
Magic Number,de4dot.code.deobfuscators.CryptoObfuscator,ResourceDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CryptoObfuscator\ResourceDecrypter.cs,Decrypt,The following statement contains a magic number: var iv = new byte[8];
Magic Number,de4dot.code.deobfuscators.CryptoObfuscator,ResourceDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CryptoObfuscator\ResourceDecrypter.cs,Decrypt,The following statement contains a magic number: sourceStream.Read(iv' 0' 8);
Magic Number,de4dot.code.deobfuscators.CryptoObfuscator,ResourceDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CryptoObfuscator\ResourceDecrypter.cs,GetKey,The following statement contains a magic number: byte[] key = new byte[8];
Magic Number,de4dot.code.deobfuscators.CryptoObfuscator,ResourceResolver,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CryptoObfuscator\ResourceResolver.cs,CheckSetupMethod,The following statement contains a magic number: var newobj = instrs[2];
Magic Number,de4dot.code.deobfuscators.CryptoObfuscator,ResourceResolver,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CryptoObfuscator\ResourceResolver.cs,CheckSetupMethod,The following statement contains a magic number: switch (foundCount) {  			case 1: return ResolverVersion.V1;  			case 2: return ResolverVersion.V2;  			default: return ResolverVersion.None;  			}
Magic Number,de4dot.code.deobfuscators.CryptoObfuscator,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CryptoObfuscator\StringDecrypter.cs,FindStringDecrypterType,The following statement contains a magic number: type.Methods.Count != 2 && type.Methods.Count != 3
Magic Number,de4dot.code.deobfuscators.CryptoObfuscator,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CryptoObfuscator\StringDecrypter.cs,FindStringDecrypterType,The following statement contains a magic number: type.Methods.Count != 2 && type.Methods.Count != 3
Magic Number,de4dot.code.deobfuscators.CryptoObfuscator,TamperDetection,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CryptoObfuscator\TamperDetection.cs,FindDesktop,The following statement contains a magic number: type.Methods.Count < 3 || type.Methods.Count > 31
Magic Number,de4dot.code.deobfuscators.CryptoObfuscator,TamperDetection,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CryptoObfuscator\TamperDetection.cs,FindDesktop,The following statement contains a magic number: type.Methods.Count < 3 || type.Methods.Count > 31
Magic Number,de4dot.code.deobfuscators.DeepSea,ArrayBlockDeobfuscator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\DeepSea\ArrayBlockDeobfuscator.cs,Deobfuscate1,The following statement contains a magic number: i >= instrs.Count - 2
Magic Number,de4dot.code.deobfuscators.DeepSea,ArrayBlockDeobfuscator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\DeepSea\ArrayBlockDeobfuscator.cs,Deobfuscate1,The following statement contains a magic number: var ldelem = instrs[i + 2];
Magic Number,de4dot.code.deobfuscators.DeepSea,ArrayBlockDeobfuscator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\DeepSea\ArrayBlockDeobfuscator.cs,Deobfuscate1,The following statement contains a magic number: block.Remove(i' 3 - 1);
Magic Number,de4dot.code.deobfuscators.DeepSea,ArrayBlockDeobfuscator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\DeepSea\ArrayBlockDeobfuscator.cs,Deobfuscate2,The following statement contains a magic number: i >= instrs.Count - 2
Magic Number,de4dot.code.deobfuscators.DeepSea,ArrayBlockDeobfuscator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\DeepSea\ArrayBlockDeobfuscator.cs,Deobfuscate2,The following statement contains a magic number: var ldelem = instrs[i + 2];
Magic Number,de4dot.code.deobfuscators.DeepSea,ArrayBlockDeobfuscator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\DeepSea\ArrayBlockDeobfuscator.cs,Deobfuscate2,The following statement contains a magic number: block.Remove(i' 3 - 1);
Magic Number,de4dot.code.deobfuscators.DeepSea,ArrayBlockDeobfuscator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\DeepSea\ArrayBlockDeobfuscator.cs,Deobfuscate3,The following statement contains a magic number: i += 2;
Magic Number,de4dot.code.deobfuscators.DeepSea,ArrayBlockState,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\DeepSea\ArrayBlockState.cs,InitializeArrays2,The following statement contains a magic number: var arrayInitField = instrs[2].Operand as FieldDef;
Magic Number,de4dot.code.deobfuscators.DeepSea,ArrayBlockState,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\DeepSea\ArrayBlockState.cs,InitializeArrays2,The following statement contains a magic number: var calledMethod = instrs[3].Operand as IMethod;
Magic Number,de4dot.code.deobfuscators.DeepSea,ArrayBlockState,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\DeepSea\ArrayBlockState.cs,InitializeArrays2,The following statement contains a magic number: var targetField = instrs[4].Operand as FieldDef;
Magic Number,de4dot.code.deobfuscators.DeepSea,ArrayBlockState,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\DeepSea\ArrayBlockState.cs,RemoveInitCode,The following statement contains a magic number: instrs[i + 2].OpCode.Code != Code.Dup
Magic Number,de4dot.code.deobfuscators.DeepSea,ArrayBlockState,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\DeepSea\ArrayBlockState.cs,RemoveInitCode,The following statement contains a magic number: var ldtoken = instrs[i + 3];
Magic Number,de4dot.code.deobfuscators.DeepSea,ArrayBlockState,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\DeepSea\ArrayBlockState.cs,RemoveInitCode,The following statement contains a magic number: var call = instrs[i + 4];
Magic Number,de4dot.code.deobfuscators.DeepSea,ArrayBlockState,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\DeepSea\ArrayBlockState.cs,RemoveInitCode,The following statement contains a magic number: var stsfld = instrs[i + 5];
Magic Number,de4dot.code.deobfuscators.DeepSea,ArrayBlockState,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\DeepSea\ArrayBlockState.cs,RemoveInitCode,The following statement contains a magic number: block.Remove(i' 6);
Magic Number,de4dot.code.deobfuscators.DeepSea,ArrayBlockState,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\DeepSea\ArrayBlockState.cs,RemoveInitCode,The following statement contains a magic number: i < instrs.Count - 5
Magic Number,de4dot.code.deobfuscators.DeepSea,FieldInfo,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\DeepSea\ArrayBlockState.cs,CreateArray,The following statement contains a magic number: switch (etype) {  				case ElementType.Boolean:  				case ElementType.I1:  				case ElementType.U1:  					return (byte[])data.Clone();    				case ElementType.Char:  				case ElementType.I2:  				case ElementType.U2:  					var ary2 = new ushort[data.Length / 2];  					Buffer.BlockCopy(data' 0' ary2' 0' ary2.Length * 2);  					return ary2;    				case ElementType.I4:  				case ElementType.U4:  					var ary4 = new uint[data.Length / 4];  					Buffer.BlockCopy(data' 0' ary4' 0' ary4.Length * 4);  					return ary4;    				default:  					throw new ApplicationException("Invalid etype");  				}
Magic Number,de4dot.code.deobfuscators.DeepSea,FieldInfo,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\DeepSea\ArrayBlockState.cs,CreateArray,The following statement contains a magic number: switch (etype) {  				case ElementType.Boolean:  				case ElementType.I1:  				case ElementType.U1:  					return (byte[])data.Clone();    				case ElementType.Char:  				case ElementType.I2:  				case ElementType.U2:  					var ary2 = new ushort[data.Length / 2];  					Buffer.BlockCopy(data' 0' ary2' 0' ary2.Length * 2);  					return ary2;    				case ElementType.I4:  				case ElementType.U4:  					var ary4 = new uint[data.Length / 4];  					Buffer.BlockCopy(data' 0' ary4' 0' ary4.Length * 4);  					return ary4;    				default:  					throw new ApplicationException("Invalid etype");  				}
Magic Number,de4dot.code.deobfuscators.DeepSea,FieldInfo,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\DeepSea\ArrayBlockState.cs,CreateArray,The following statement contains a magic number: switch (etype) {  				case ElementType.Boolean:  				case ElementType.I1:  				case ElementType.U1:  					return (byte[])data.Clone();    				case ElementType.Char:  				case ElementType.I2:  				case ElementType.U2:  					var ary2 = new ushort[data.Length / 2];  					Buffer.BlockCopy(data' 0' ary2' 0' ary2.Length * 2);  					return ary2;    				case ElementType.I4:  				case ElementType.U4:  					var ary4 = new uint[data.Length / 4];  					Buffer.BlockCopy(data' 0' ary4' 0' ary4.Length * 4);  					return ary4;    				default:  					throw new ApplicationException("Invalid etype");  				}
Magic Number,de4dot.code.deobfuscators.DeepSea,FieldInfo,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\DeepSea\ArrayBlockState.cs,CreateArray,The following statement contains a magic number: switch (etype) {  				case ElementType.Boolean:  				case ElementType.I1:  				case ElementType.U1:  					return (byte[])data.Clone();    				case ElementType.Char:  				case ElementType.I2:  				case ElementType.U2:  					var ary2 = new ushort[data.Length / 2];  					Buffer.BlockCopy(data' 0' ary2' 0' ary2.Length * 2);  					return ary2;    				case ElementType.I4:  				case ElementType.U4:  					var ary4 = new uint[data.Length / 4];  					Buffer.BlockCopy(data' 0' ary4' 0' ary4.Length * 4);  					return ary4;    				default:  					throw new ApplicationException("Invalid etype");  				}
Magic Number,de4dot.code.deobfuscators.DeepSea,AssemblyResolver,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\DeepSea\AssemblyResolver.cs,IsV3SL,The following statement contains a magic number: !instrs[i + 2].IsLdcI4()
Magic Number,de4dot.code.deobfuscators.DeepSea,AssemblyResolver,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\DeepSea\AssemblyResolver.cs,IsV3SL,The following statement contains a magic number: instrs[i + 3].OpCode.Code != Code.And
Magic Number,de4dot.code.deobfuscators.DeepSea,AssemblyResolver,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\DeepSea\AssemblyResolver.cs,IsV3SL,The following statement contains a magic number: i < instrs.Count - 3
Magic Number,de4dot.code.deobfuscators.DeepSea,AssemblyResolver,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\DeepSea\AssemblyResolver.cs,IsV41SL,The following statement contains a magic number: !instrs[i].IsLdcI4() || instrs[i].GetLdcI4Value() != 5
Magic Number,de4dot.code.deobfuscators.DeepSea,AssemblyResolver,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\DeepSea\AssemblyResolver.cs,IsV41SL,The following statement contains a magic number: !instrs[i + 2].IsLdcI4() || instrs[i + 2].GetLdcI4Value() != 0x1F
Magic Number,de4dot.code.deobfuscators.DeepSea,AssemblyResolver,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\DeepSea\AssemblyResolver.cs,IsV41SL,The following statement contains a magic number: !instrs[i + 2].IsLdcI4() || instrs[i + 2].GetLdcI4Value() != 0x1F
Magic Number,de4dot.code.deobfuscators.DeepSea,AssemblyResolver,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\DeepSea\AssemblyResolver.cs,IsV41SL,The following statement contains a magic number: instrs[i + 3].OpCode.Code != Code.And
Magic Number,de4dot.code.deobfuscators.DeepSea,AssemblyResolver,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\DeepSea\AssemblyResolver.cs,CheckHandlerV4,The following statement contains a magic number: i < instrs.Count - 3
Magic Number,de4dot.code.deobfuscators.DeepSea,AssemblyResolver,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\DeepSea\AssemblyResolver.cs,CheckHandlerV404_41,The following statement contains a magic number: i < instrs.Count - 6
Magic Number,de4dot.code.deobfuscators.DeepSea,AssemblyResolver,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\DeepSea\AssemblyResolver.cs,GetMagicIndex404,The following statement contains a magic number: i < instrs.Count - 4
Magic Number,de4dot.code.deobfuscators.DeepSea,AssemblyResolver,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\DeepSea\AssemblyResolver.cs,GetMagicIndex41Trial,The following statement contains a magic number: i < instrs.Count - 4
Magic Number,de4dot.code.deobfuscators.DeepSea,AssemblyResolver,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\DeepSea\AssemblyResolver.cs,GetCallDecryptMethodIndex,The following statement contains a magic number: calledMethod == null || calledMethod.MethodSig.GetParamCount() < 2
Magic Number,de4dot.code.deobfuscators.DeepSea,AssemblyResolver,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\DeepSea\AssemblyResolver.cs,Decrypt41Trial,The following statement contains a magic number: data[i] ^= (byte)(i / 3 + magic);
Magic Number,de4dot.code.deobfuscators.DeepSea,Deobfuscator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\DeepSea\Deobfuscator.cs,DetectInternal,The following statement contains a magic number: val += 100 + 10 * (sum - 1);
Magic Number,de4dot.code.deobfuscators.DeepSea,Deobfuscator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\DeepSea\Deobfuscator.cs,DetectInternal,The following statement contains a magic number: val += 100 + 10 * (sum - 1);
Magic Number,de4dot.code.deobfuscators.DeepSea,Deobfuscator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\DeepSea\Deobfuscator.cs,DetectMethodProxyObfuscation,The following statement contains a magic number: const int MIN_FOUND_PROXIES = 10;
Magic Number,de4dot.code.deobfuscators.DeepSea,Deobfuscator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\DeepSea\Deobfuscator.cs,DetectMethodProxyObfuscation,The following statement contains a magic number: checkedMethods++ >= 1000
Magic Number,de4dot.code.deobfuscators.DeepSea,DsMethodCallInliner,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\DeepSea\DsMethodCallInliner.cs,InlineMethod,The following statement contains a magic number: instrIndex < 2
Magic Number,de4dot.code.deobfuscators.DeepSea,DsMethodCallInliner,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\DeepSea\DsMethodCallInliner.cs,InlineMethod,The following statement contains a magic number: var ldci4_1st = block.Instructions[instrIndex - 2];
Magic Number,de4dot.code.deobfuscators.DeepSea,DsMethodCallInliner,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\DeepSea\DsMethodCallInliner.cs,InlineMethod,The following statement contains a magic number: arg1 = parameters[parameters.Count - 2];
Magic Number,de4dot.code.deobfuscators.DeepSea,DsMethodCallInliner,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\DeepSea\DsMethodCallInliner.cs,InlineMethod,The following statement contains a magic number: var patcher = TryInlineOtherMethod(instrIndex' methodToInline' methodToInline.Body.Instructions[index]' index + 1' 2);
Magic Number,de4dot.code.deobfuscators.DeepSea,DsMethodCallInliner,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\DeepSea\DsMethodCallInliner.cs,EmulateInstructions,The following statement contains a magic number: counter++ >= 50
Magic Number,de4dot.code.deobfuscators.DeepSea,DsMethodCallInliner,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\DeepSea\DsMethodCallInliner.cs,CanInline,The following statement contains a magic number: paramCount < 2
Magic Number,de4dot.code.deobfuscators.DeepSea,DsMethodCallInliner,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\DeepSea\DsMethodCallInliner.cs,CanInline,The following statement contains a magic number: var param2 = parameters[paramCount - 2];
Magic Number,de4dot.code.deobfuscators.DeepSea,DsUtils,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\DeepSea\DsUtils.cs,GetArgValue,The following statement contains a magic number: switch (instr.OpCode.Code) {  			case Code.Ldc_I4_S: arg = (int)(sbyte)instr.Operand; return true;  			case Code.Ldc_I4_M1: arg = -1; return true;  			case Code.Ldc_I4_0: arg = 0; return true;  			case Code.Ldc_I4_1: arg = 1; return true;  			case Code.Ldc_I4_2: arg = 2; return true;  			case Code.Ldc_I4_3: arg = 3; return true;  			case Code.Ldc_I4_4: arg = 4; return true;  			case Code.Ldc_I4_5: arg = 5; return true;  			case Code.Ldc_I4_6: arg = 6; return true;  			case Code.Ldc_I4_7: arg = 7; return true;  			case Code.Ldc_I4_8: arg = 8; return true;  			case Code.Ldnull: arg = null; return true;    			case Code.Ldstr:  			case Code.Ldc_I4:  			case Code.Ldc_I8:  			case Code.Ldc_R4:  			case Code.Ldc_R8:  				arg = instr.Operand;  				return true;    			case Code.Ldarg:  			case Code.Ldarg_S:  			case Code.Ldarg_0:  			case Code.Ldarg_1:  			case Code.Ldarg_2:  			case Code.Ldarg_3:  			case Code.Ldloc:  			case Code.Ldloc_S:  			case Code.Ldloc_0:  			case Code.Ldloc_1:  			case Code.Ldloc_2:  			case Code.Ldloc_3:  				arg = null;  				return true;    			default:  				arg = null;  				return false;  			}
Magic Number,de4dot.code.deobfuscators.DeepSea,DsUtils,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\DeepSea\DsUtils.cs,GetArgValue,The following statement contains a magic number: switch (instr.OpCode.Code) {  			case Code.Ldc_I4_S: arg = (int)(sbyte)instr.Operand; return true;  			case Code.Ldc_I4_M1: arg = -1; return true;  			case Code.Ldc_I4_0: arg = 0; return true;  			case Code.Ldc_I4_1: arg = 1; return true;  			case Code.Ldc_I4_2: arg = 2; return true;  			case Code.Ldc_I4_3: arg = 3; return true;  			case Code.Ldc_I4_4: arg = 4; return true;  			case Code.Ldc_I4_5: arg = 5; return true;  			case Code.Ldc_I4_6: arg = 6; return true;  			case Code.Ldc_I4_7: arg = 7; return true;  			case Code.Ldc_I4_8: arg = 8; return true;  			case Code.Ldnull: arg = null; return true;    			case Code.Ldstr:  			case Code.Ldc_I4:  			case Code.Ldc_I8:  			case Code.Ldc_R4:  			case Code.Ldc_R8:  				arg = instr.Operand;  				return true;    			case Code.Ldarg:  			case Code.Ldarg_S:  			case Code.Ldarg_0:  			case Code.Ldarg_1:  			case Code.Ldarg_2:  			case Code.Ldarg_3:  			case Code.Ldloc:  			case Code.Ldloc_S:  			case Code.Ldloc_0:  			case Code.Ldloc_1:  			case Code.Ldloc_2:  			case Code.Ldloc_3:  				arg = null;  				return true;    			default:  				arg = null;  				return false;  			}
Magic Number,de4dot.code.deobfuscators.DeepSea,DsUtils,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\DeepSea\DsUtils.cs,GetArgValue,The following statement contains a magic number: switch (instr.OpCode.Code) {  			case Code.Ldc_I4_S: arg = (int)(sbyte)instr.Operand; return true;  			case Code.Ldc_I4_M1: arg = -1; return true;  			case Code.Ldc_I4_0: arg = 0; return true;  			case Code.Ldc_I4_1: arg = 1; return true;  			case Code.Ldc_I4_2: arg = 2; return true;  			case Code.Ldc_I4_3: arg = 3; return true;  			case Code.Ldc_I4_4: arg = 4; return true;  			case Code.Ldc_I4_5: arg = 5; return true;  			case Code.Ldc_I4_6: arg = 6; return true;  			case Code.Ldc_I4_7: arg = 7; return true;  			case Code.Ldc_I4_8: arg = 8; return true;  			case Code.Ldnull: arg = null; return true;    			case Code.Ldstr:  			case Code.Ldc_I4:  			case Code.Ldc_I8:  			case Code.Ldc_R4:  			case Code.Ldc_R8:  				arg = instr.Operand;  				return true;    			case Code.Ldarg:  			case Code.Ldarg_S:  			case Code.Ldarg_0:  			case Code.Ldarg_1:  			case Code.Ldarg_2:  			case Code.Ldarg_3:  			case Code.Ldloc:  			case Code.Ldloc_S:  			case Code.Ldloc_0:  			case Code.Ldloc_1:  			case Code.Ldloc_2:  			case Code.Ldloc_3:  				arg = null;  				return true;    			default:  				arg = null;  				return false;  			}
Magic Number,de4dot.code.deobfuscators.DeepSea,DsUtils,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\DeepSea\DsUtils.cs,GetArgValue,The following statement contains a magic number: switch (instr.OpCode.Code) {  			case Code.Ldc_I4_S: arg = (int)(sbyte)instr.Operand; return true;  			case Code.Ldc_I4_M1: arg = -1; return true;  			case Code.Ldc_I4_0: arg = 0; return true;  			case Code.Ldc_I4_1: arg = 1; return true;  			case Code.Ldc_I4_2: arg = 2; return true;  			case Code.Ldc_I4_3: arg = 3; return true;  			case Code.Ldc_I4_4: arg = 4; return true;  			case Code.Ldc_I4_5: arg = 5; return true;  			case Code.Ldc_I4_6: arg = 6; return true;  			case Code.Ldc_I4_7: arg = 7; return true;  			case Code.Ldc_I4_8: arg = 8; return true;  			case Code.Ldnull: arg = null; return true;    			case Code.Ldstr:  			case Code.Ldc_I4:  			case Code.Ldc_I8:  			case Code.Ldc_R4:  			case Code.Ldc_R8:  				arg = instr.Operand;  				return true;    			case Code.Ldarg:  			case Code.Ldarg_S:  			case Code.Ldarg_0:  			case Code.Ldarg_1:  			case Code.Ldarg_2:  			case Code.Ldarg_3:  			case Code.Ldloc:  			case Code.Ldloc_S:  			case Code.Ldloc_0:  			case Code.Ldloc_1:  			case Code.Ldloc_2:  			case Code.Ldloc_3:  				arg = null;  				return true;    			default:  				arg = null;  				return false;  			}
Magic Number,de4dot.code.deobfuscators.DeepSea,DsUtils,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\DeepSea\DsUtils.cs,GetArgValue,The following statement contains a magic number: switch (instr.OpCode.Code) {  			case Code.Ldc_I4_S: arg = (int)(sbyte)instr.Operand; return true;  			case Code.Ldc_I4_M1: arg = -1; return true;  			case Code.Ldc_I4_0: arg = 0; return true;  			case Code.Ldc_I4_1: arg = 1; return true;  			case Code.Ldc_I4_2: arg = 2; return true;  			case Code.Ldc_I4_3: arg = 3; return true;  			case Code.Ldc_I4_4: arg = 4; return true;  			case Code.Ldc_I4_5: arg = 5; return true;  			case Code.Ldc_I4_6: arg = 6; return true;  			case Code.Ldc_I4_7: arg = 7; return true;  			case Code.Ldc_I4_8: arg = 8; return true;  			case Code.Ldnull: arg = null; return true;    			case Code.Ldstr:  			case Code.Ldc_I4:  			case Code.Ldc_I8:  			case Code.Ldc_R4:  			case Code.Ldc_R8:  				arg = instr.Operand;  				return true;    			case Code.Ldarg:  			case Code.Ldarg_S:  			case Code.Ldarg_0:  			case Code.Ldarg_1:  			case Code.Ldarg_2:  			case Code.Ldarg_3:  			case Code.Ldloc:  			case Code.Ldloc_S:  			case Code.Ldloc_0:  			case Code.Ldloc_1:  			case Code.Ldloc_2:  			case Code.Ldloc_3:  				arg = null;  				return true;    			default:  				arg = null;  				return false;  			}
Magic Number,de4dot.code.deobfuscators.DeepSea,DsUtils,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\DeepSea\DsUtils.cs,GetArgValue,The following statement contains a magic number: switch (instr.OpCode.Code) {  			case Code.Ldc_I4_S: arg = (int)(sbyte)instr.Operand; return true;  			case Code.Ldc_I4_M1: arg = -1; return true;  			case Code.Ldc_I4_0: arg = 0; return true;  			case Code.Ldc_I4_1: arg = 1; return true;  			case Code.Ldc_I4_2: arg = 2; return true;  			case Code.Ldc_I4_3: arg = 3; return true;  			case Code.Ldc_I4_4: arg = 4; return true;  			case Code.Ldc_I4_5: arg = 5; return true;  			case Code.Ldc_I4_6: arg = 6; return true;  			case Code.Ldc_I4_7: arg = 7; return true;  			case Code.Ldc_I4_8: arg = 8; return true;  			case Code.Ldnull: arg = null; return true;    			case Code.Ldstr:  			case Code.Ldc_I4:  			case Code.Ldc_I8:  			case Code.Ldc_R4:  			case Code.Ldc_R8:  				arg = instr.Operand;  				return true;    			case Code.Ldarg:  			case Code.Ldarg_S:  			case Code.Ldarg_0:  			case Code.Ldarg_1:  			case Code.Ldarg_2:  			case Code.Ldarg_3:  			case Code.Ldloc:  			case Code.Ldloc_S:  			case Code.Ldloc_0:  			case Code.Ldloc_1:  			case Code.Ldloc_2:  			case Code.Ldloc_3:  				arg = null;  				return true;    			default:  				arg = null;  				return false;  			}
Magic Number,de4dot.code.deobfuscators.DeepSea,DsUtils,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\DeepSea\DsUtils.cs,GetArgValue,The following statement contains a magic number: switch (instr.OpCode.Code) {  			case Code.Ldc_I4_S: arg = (int)(sbyte)instr.Operand; return true;  			case Code.Ldc_I4_M1: arg = -1; return true;  			case Code.Ldc_I4_0: arg = 0; return true;  			case Code.Ldc_I4_1: arg = 1; return true;  			case Code.Ldc_I4_2: arg = 2; return true;  			case Code.Ldc_I4_3: arg = 3; return true;  			case Code.Ldc_I4_4: arg = 4; return true;  			case Code.Ldc_I4_5: arg = 5; return true;  			case Code.Ldc_I4_6: arg = 6; return true;  			case Code.Ldc_I4_7: arg = 7; return true;  			case Code.Ldc_I4_8: arg = 8; return true;  			case Code.Ldnull: arg = null; return true;    			case Code.Ldstr:  			case Code.Ldc_I4:  			case Code.Ldc_I8:  			case Code.Ldc_R4:  			case Code.Ldc_R8:  				arg = instr.Operand;  				return true;    			case Code.Ldarg:  			case Code.Ldarg_S:  			case Code.Ldarg_0:  			case Code.Ldarg_1:  			case Code.Ldarg_2:  			case Code.Ldarg_3:  			case Code.Ldloc:  			case Code.Ldloc_S:  			case Code.Ldloc_0:  			case Code.Ldloc_1:  			case Code.Ldloc_2:  			case Code.Ldloc_3:  				arg = null;  				return true;    			default:  				arg = null;  				return false;  			}
Magic Number,de4dot.code.deobfuscators.DeepSea,FieldsRestorer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\DeepSea\FieldsRestorer.cs,FixFieldCtorCalls,The following statement contains a magic number: instrPushes == null || instrPushes.Count != 2
Magic Number,de4dot.code.deobfuscators.DeepSea,FieldsRestorer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\DeepSea\FieldsRestorer.cs,FixFieldCtorCalls,The following statement contains a magic number: i -= 3;
Magic Number,de4dot.code.deobfuscators.DeepSea,ResolverBase,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\DeepSea\ResolverBase.cs,DecryptResourceV41SL,The following statement contains a magic number: data[i + 1] ^= (byte)((k << (i & 5)) + i);
Magic Number,de4dot.code.deobfuscators.DeepSea,ResourceResolver,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\DeepSea\ResourceResolver.cs,CheckHandlerV41,The following statement contains a magic number: data41.magic = (int)val >> 3;
Magic Number,de4dot.code.deobfuscators.DeepSea,ResourceResolver,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\DeepSea\ResourceResolver.cs,GetMagicArgIndex41Retail,The following statement contains a magic number: var ldarg = instrs[i + 2];
Magic Number,de4dot.code.deobfuscators.DeepSea,ResourceResolver,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\DeepSea\ResourceResolver.cs,GetMagicArgIndex41Retail,The following statement contains a magic number: var sub = instrs[i + 3];
Magic Number,de4dot.code.deobfuscators.DeepSea,ResourceResolver,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\DeepSea\ResourceResolver.cs,GetMagicArgIndex41Retail,The following statement contains a magic number: var ldci4 = instrs[i + 4];
Magic Number,de4dot.code.deobfuscators.DeepSea,ResourceResolver,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\DeepSea\ResourceResolver.cs,GetMagicArgIndex41Retail,The following statement contains a magic number: i < instrs.Count - 4
Magic Number,de4dot.code.deobfuscators.DeepSea,ResourceResolver,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\DeepSea\ResourceResolver.cs,GetMagicArgIndex41Trial,The following statement contains a magic number: instrs[i + 2].OpCode.Code != Code.Shr
Magic Number,de4dot.code.deobfuscators.DeepSea,ResourceResolver,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\DeepSea\ResourceResolver.cs,GetMagicArgIndex41Trial,The following statement contains a magic number: i < instrs.Count - 2
Magic Number,de4dot.code.deobfuscators.DeepSea,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\DeepSea\StringDecrypter.cs,FindKey,The following statement contains a magic number: var stloc = instrs[i + 2];
Magic Number,de4dot.code.deobfuscators.DeepSea,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\DeepSea\StringDecrypter.cs,FindKey,The following statement contains a magic number: i < instrs.Count - 2
Magic Number,de4dot.code.deobfuscators.DeepSea,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\DeepSea\StringDecrypter.cs,FindMagic,The following statement contains a magic number: instrs[i + 2].OpCode.Code != Code.Xor
Magic Number,de4dot.code.deobfuscators.DeepSea,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\DeepSea\StringDecrypter.cs,FindMagic,The following statement contains a magic number: (arg2 = instrs[i + 3].GetParameterIndex()) < 0
Magic Number,de4dot.code.deobfuscators.DeepSea,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\DeepSea\StringDecrypter.cs,FindMagic,The following statement contains a magic number: i < instrs.Count - 3
Magic Number,de4dot.code.deobfuscators.DeepSea,DecrypterInfo41,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\DeepSea\StringDecrypter.cs,IsPossibleDecrypterMethod,The following statement contains a magic number: fields == null || fields.Count != 3
Magic Number,de4dot.code.deobfuscators.DeepSea,DecrypterInfo41,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\DeepSea\StringDecrypter.cs,CheckMethodSignature,The following statement contains a magic number: return count >= 2;
Magic Number,de4dot.code.deobfuscators.DeepSea,DecrypterInfo41,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\DeepSea\StringDecrypter.cs,Initialize,The following statement contains a magic number: arrayInfo.initField.InitialValue.Length % 2 == 1
Magic Number,de4dot.code.deobfuscators.DeepSea,DecrypterInfo41,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\DeepSea\StringDecrypter.cs,Initialize,The following statement contains a magic number: encryptedData = new ushort[arrayInfo.initField.InitialValue.Length / 2];
Magic Number,de4dot.code.deobfuscators.DeepSea,DecrypterInfo41,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\DeepSea\StringDecrypter.cs,FindKeyShift,The following statement contains a magic number: i < instrs.Count - 3
Magic Number,de4dot.code.deobfuscators.DeepSea,DecrypterInfo41,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\DeepSea\StringDecrypter.cs,GetArrayInfo,The following statement contains a magic number: var initField = instrs[2].Operand as FieldDef;
Magic Number,de4dot.code.deobfuscators.DeepSea,DecrypterInfo41,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\DeepSea\StringDecrypter.cs,GetArrayInfo,The following statement contains a magic number: var field = instrs[4].Operand as FieldDef;
Magic Number,de4dot.code.deobfuscators.DeepSea,DecrypterInfo41,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\DeepSea\StringDecrypter.cs,DecryptTrial,The following statement contains a magic number: int numChars = ((keyChar ^ encryptedData[offset + 2]) << 16) + (keyChar ^ encryptedData[offset + 3]);
Magic Number,de4dot.code.deobfuscators.DeepSea,DecrypterInfo41,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\DeepSea\StringDecrypter.cs,DecryptTrial,The following statement contains a magic number: int numChars = ((keyChar ^ encryptedData[offset + 2]) << 16) + (keyChar ^ encryptedData[offset + 3]);
Magic Number,de4dot.code.deobfuscators.DeepSea,DecrypterInfo41,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\DeepSea\StringDecrypter.cs,DecryptTrial,The following statement contains a magic number: int numChars = ((keyChar ^ encryptedData[offset + 2]) << 16) + (keyChar ^ encryptedData[offset + 3]);
Magic Number,de4dot.code.deobfuscators.DeepSea,DecrypterInfo41,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\DeepSea\StringDecrypter.cs,DecryptTrial,The following statement contains a magic number: offset += 4;
Magic Number,de4dot.code.deobfuscators.DeepSea,DecrypterInfo41,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\DeepSea\StringDecrypter.cs,DecryptRetail,The following statement contains a magic number: numChars <<= 15;
Magic Number,de4dot.code.deobfuscators.DeepSea,DecrypterInfo41,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\DeepSea\StringDecrypter.cs,DecryptRetail,The following statement contains a magic number: numChars |= encryptedData[offset + 3] ^ keyChar;
Magic Number,de4dot.code.deobfuscators.DeepSea,DecrypterInfo41,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\DeepSea\StringDecrypter.cs,DecryptRetail,The following statement contains a magic number: offset += 3;
Magic Number,de4dot.code.deobfuscators.DeepSea,DecrypterInfo40,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\DeepSea\StringDecrypter.cs,Initialize,The following statement contains a magic number: charArrayFields == null || charArrayFields.Count != 2
Magic Number,de4dot.code.deobfuscators.DeepSea,DecrypterInfo40,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\DeepSea\StringDecrypter.cs,Initialize,The following statement contains a magic number: encryptedDataField.InitialValue.Length % 2 == 1
Magic Number,de4dot.code.deobfuscators.DeepSea,DecrypterInfo40,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\DeepSea\StringDecrypter.cs,Initialize,The following statement contains a magic number: encryptedData = new ushort[encryptedDataField.InitialValue.Length / 2];
Magic Number,de4dot.code.deobfuscators.DeepSea,DecrypterInfo40,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\DeepSea\StringDecrypter.cs,FindEncryptedStrings,The following statement contains a magic number: var savedField = instrs[2].Operand as FieldDef;
Magic Number,de4dot.code.deobfuscators.DeepSea,DecrypterInfo40,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\DeepSea\StringDecrypter.cs,GetPublicKeyTokenKey,The following statement contains a magic number: key[i] = (short)((b << 4) ^ b);
Magic Number,de4dot.code.deobfuscators.DeepSea,DecrypterInfo40,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\DeepSea\StringDecrypter.cs,Decrypt,The following statement contains a magic number: int stringLen = encryptedData[index++] + ((int)encryptedData[index++] << 16);
Magic Number,de4dot.code.deobfuscators.DeepSea,DecrypterInfo13,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\DeepSea\StringDecrypter.cs,GetPublicKeyTokenKey,The following statement contains a magic number: key[i] = (short)((b << 4) ^ b);
Magic Number,de4dot.code.deobfuscators.DeepSea,DecrypterInfo13,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\DeepSea\StringDecrypter.cs,FindMagic,The following statement contains a magic number: instrs[i + 2].OpCode.Code != Code.Xor
Magic Number,de4dot.code.deobfuscators.DeepSea,DecrypterInfo13,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\DeepSea\StringDecrypter.cs,FindMagic,The following statement contains a magic number: i < instrs.Count - 2
Magic Number,de4dot.code.deobfuscators.Dotfuscator,CflowDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Dotfuscator\CflowDecrypter.cs,CleanMethod,The following statement contains a magic number: method.Body.Instructions.Count < 4
Magic Number,de4dot.code.deobfuscators.Dotfuscator,CflowDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Dotfuscator\CflowDecrypter.cs,GetFixIndexs,The following statement contains a magic number: var stloc = insNoNops[i - 2];
Magic Number,de4dot.code.deobfuscators.Dotfuscator,CflowDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Dotfuscator\CflowDecrypter.cs,GetFixIndexs,The following statement contains a magic number: var ldci4 = insNoNops[i - 3];
Magic Number,de4dot.code.deobfuscators.Dotfuscator,Deobfuscator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Dotfuscator\Deobfuscator.cs,DetectInternal,The following statement contains a magic number: val += 100;
Magic Number,de4dot.code.deobfuscators.Dotfuscator,Deobfuscator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Dotfuscator\Deobfuscator.cs,DetectInternal,The following statement contains a magic number: val += 10;
Magic Number,de4dot.code.deobfuscators.Dotfuscator,Deobfuscator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Dotfuscator\Deobfuscator.cs,InitializeVersion,The following statement contains a magic number: val.Groups.Count < 2
Magic Number,de4dot.code.deobfuscators.Dotfuscator,StringBuilderDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Dotfuscator\StringBuilderDecrypter.cs,CleanStringBuilder,The following statement contains a magic number: method.Body.Instructions.Count < 4
Magic Number,de4dot.code.deobfuscators.Dotfuscator,StringBuilderDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Dotfuscator\StringBuilderDecrypter.cs,GetStringBuilderFixIndexs,The following statement contains a magic number: data[0] = insNoNops[i + 3].GetLdcI4Value();
Magic Number,de4dot.code.deobfuscators.Dotfuscator,StringBuilderDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Dotfuscator\StringBuilderDecrypter.cs,GetStringBuilderFixIndexs,The following statement contains a magic number: index = TryGetStringBuilderAppendData(insNoNops' i + 7' data);
Magic Number,de4dot.code.deobfuscators.Dotfuscator,StringBuilderDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Dotfuscator\StringBuilderDecrypter.cs,GetStringBuilderFixIndexs,The following statement contains a magic number: i + 6 < insNoNops.Count &&  							insNoNops[i + 6].OpCode == OpCodes.Newobj &&  							insNoNops[i + 6].Operand is MemberRef memberRef &&  							memberRef.GetDeclaringTypeFullName() == typeof(StringBuilder).FullName &&  							memberRef.Name == ".ctor" &&  							insNoNops[i + 3].IsLdcI4()
Magic Number,de4dot.code.deobfuscators.Dotfuscator,StringBuilderDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Dotfuscator\StringBuilderDecrypter.cs,GetStringBuilderFixIndexs,The following statement contains a magic number: i + 6 < insNoNops.Count &&  							insNoNops[i + 6].OpCode == OpCodes.Newobj &&  							insNoNops[i + 6].Operand is MemberRef memberRef &&  							memberRef.GetDeclaringTypeFullName() == typeof(StringBuilder).FullName &&  							memberRef.Name == ".ctor" &&  							insNoNops[i + 3].IsLdcI4()
Magic Number,de4dot.code.deobfuscators.Dotfuscator,StringBuilderDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Dotfuscator\StringBuilderDecrypter.cs,GetStringBuilderFixIndexs,The following statement contains a magic number: i + 6 < insNoNops.Count &&  							insNoNops[i + 6].OpCode == OpCodes.Newobj &&  							insNoNops[i + 6].Operand is MemberRef memberRef &&  							memberRef.GetDeclaringTypeFullName() == typeof(StringBuilder).FullName &&  							memberRef.Name == ".ctor" &&  							insNoNops[i + 3].IsLdcI4()
Magic Number,de4dot.code.deobfuscators.Dotfuscator,StringBuilderDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Dotfuscator\StringBuilderDecrypter.cs,GetStringBuilderFixIndexs,The following statement contains a magic number: i + 6 < insNoNops.Count &&  							insNoNops[i + 6].OpCode == OpCodes.Newobj &&  							insNoNops[i + 6].Operand is MemberRef memberRef &&  							memberRef.GetDeclaringTypeFullName() == typeof(StringBuilder).FullName &&  							memberRef.Name == ".ctor" &&  							insNoNops[i + 3].IsLdcI4()
Magic Number,de4dot.code.deobfuscators.Dotfuscator,StringBuilderDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Dotfuscator\StringBuilderDecrypter.cs,TryGetStringBuilderAppendData,The following statement contains a magic number: var insNoNop = instructions[index + j * 9 + 5];
Magic Number,de4dot.code.deobfuscators.Dotfuscator,StringBuilderDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Dotfuscator\StringBuilderDecrypter.cs,TryGetStringBuilderAppendData,The following statement contains a magic number: var insNoNop = instructions[index + j * 9 + 5];
Magic Number,de4dot.code.deobfuscators.Dotfuscator,StringBuilderDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Dotfuscator\StringBuilderDecrypter.cs,TryGetStringBuilderAppendData,The following statement contains a magic number: return index + 9 * length + 2;
Magic Number,de4dot.code.deobfuscators.Dotfuscator,StringBuilderDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Dotfuscator\StringBuilderDecrypter.cs,TryGetStringBuilderAppendData,The following statement contains a magic number: return index + 9 * length + 2;
Magic Number,de4dot.code.deobfuscators.Dotfuscator,StringBuilderDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Dotfuscator\StringBuilderDecrypter.cs,TryGetStringBuilderAppendData,The following statement contains a magic number: instructions[index + 9 * length + 3].IsStloc() ||  					instructions[index + 9 * length + 3].OpCode == OpCodes.Pop
Magic Number,de4dot.code.deobfuscators.Dotfuscator,StringBuilderDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Dotfuscator\StringBuilderDecrypter.cs,TryGetStringBuilderAppendData,The following statement contains a magic number: instructions[index + 9 * length + 3].IsStloc() ||  					instructions[index + 9 * length + 3].OpCode == OpCodes.Pop
Magic Number,de4dot.code.deobfuscators.Dotfuscator,StringBuilderDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Dotfuscator\StringBuilderDecrypter.cs,TryGetStringBuilderAppendData,The following statement contains a magic number: instructions[index + 9 * length + 3].IsStloc() ||  					instructions[index + 9 * length + 3].OpCode == OpCodes.Pop
Magic Number,de4dot.code.deobfuscators.Dotfuscator,StringBuilderDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Dotfuscator\StringBuilderDecrypter.cs,TryGetStringBuilderAppendData,The following statement contains a magic number: instructions[index + 9 * length + 3].IsStloc() ||  					instructions[index + 9 * length + 3].OpCode == OpCodes.Pop
Magic Number,de4dot.code.deobfuscators.Dotfuscator,StringBuilderDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Dotfuscator\StringBuilderDecrypter.cs,TryGetStringBuilderAppendData,The following statement contains a magic number: index + length * 9 + 3 < instructions.Count &&  				instructions[index + 9 * length + 2].OpCode == OpCodes.Callvirt &&  				(instructions[index + 9 * length + 2].Operand as MemberRef)?.Name == "ToString"
Magic Number,de4dot.code.deobfuscators.Dotfuscator,StringBuilderDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Dotfuscator\StringBuilderDecrypter.cs,TryGetStringBuilderAppendData,The following statement contains a magic number: index + length * 9 + 3 < instructions.Count &&  				instructions[index + 9 * length + 2].OpCode == OpCodes.Callvirt &&  				(instructions[index + 9 * length + 2].Operand as MemberRef)?.Name == "ToString"
Magic Number,de4dot.code.deobfuscators.Dotfuscator,StringBuilderDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Dotfuscator\StringBuilderDecrypter.cs,TryGetStringBuilderAppendData,The following statement contains a magic number: index + length * 9 + 3 < instructions.Count &&  				instructions[index + 9 * length + 2].OpCode == OpCodes.Callvirt &&  				(instructions[index + 9 * length + 2].Operand as MemberRef)?.Name == "ToString"
Magic Number,de4dot.code.deobfuscators.Dotfuscator,StringBuilderDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Dotfuscator\StringBuilderDecrypter.cs,TryGetStringBuilderAppendData,The following statement contains a magic number: index + length * 9 + 3 < instructions.Count &&  				instructions[index + 9 * length + 2].OpCode == OpCodes.Callvirt &&  				(instructions[index + 9 * length + 2].Operand as MemberRef)?.Name == "ToString"
Magic Number,de4dot.code.deobfuscators.Dotfuscator,StringBuilderDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Dotfuscator\StringBuilderDecrypter.cs,TryGetStringBuilderAppendData,The following statement contains a magic number: index + length * 9 + 3 < instructions.Count &&  				instructions[index + 9 * length + 2].OpCode == OpCodes.Callvirt &&  				(instructions[index + 9 * length + 2].Operand as MemberRef)?.Name == "ToString"
Magic Number,de4dot.code.deobfuscators.Dotfuscator,StringBuilderDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Dotfuscator\StringBuilderDecrypter.cs,TryGetStringBuilderAppendData,The following statement contains a magic number: index + length * 9 + 3 < instructions.Count &&  				instructions[index + 9 * length + 2].OpCode == OpCodes.Callvirt &&  				(instructions[index + 9 * length + 2].Operand as MemberRef)?.Name == "ToString"
Magic Number,de4dot.code.deobfuscators.Dotfuscator,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Dotfuscator\StringDecrypter.cs,FindStringDecrypterMethods,The following statement contains a magic number: var stloc = instrs[i + 2];
Magic Number,de4dot.code.deobfuscators.Dotfuscator,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Dotfuscator\StringDecrypter.cs,FindStringDecrypterMethods,The following statement contains a magic number: var ldci4 = instrs[i + 3];
Magic Number,de4dot.code.deobfuscators.Dotfuscator,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Dotfuscator\StringDecrypter.cs,FindStringDecrypterMethods,The following statement contains a magic number: var ldarg2 = instrs[i + 4];
Magic Number,de4dot.code.deobfuscators.Dotfuscator,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Dotfuscator\StringDecrypter.cs,FindStringDecrypterMethods,The following statement contains a magic number: var opAdd1 = instrs[i + 5];
Magic Number,de4dot.code.deobfuscators.Dotfuscator,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Dotfuscator\StringDecrypter.cs,FindStringDecrypterMethods,The following statement contains a magic number: int j = i + 6;
Magic Number,de4dot.code.deobfuscators.Dotfuscator,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Dotfuscator\StringDecrypter.cs,FindStringDecrypterMethods,The following statement contains a magic number: j = j + 2;
Magic Number,de4dot.code.deobfuscators.Dotfuscator,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Dotfuscator\StringDecrypter.cs,FindStringDecrypterMethods,The following statement contains a magic number: i < instrs.Count - 6
Magic Number,de4dot.code.deobfuscators.Dotfuscator,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Dotfuscator\StringDecrypter.cs,Decrypt,The following statement contains a magic number: byte b2 = (byte)((byte)(c >> 8) ^ key++);
Magic Number,de4dot.code.deobfuscators.Dotfuscator,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Dotfuscator\StringDecrypter.cs,Decrypt,The following statement contains a magic number: chars[i] = (char)((b1 << 8) | b2);
Magic Number,de4dot.code.deobfuscators.dotNET_Reactor.v3,AntiStrongName,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\dotNET_Reactor\v3\AntiStrongName.cs,Remove,The following statement contains a magic number: const int numInstrsToRemove = 11;
Magic Number,de4dot.code.deobfuscators.dotNET_Reactor.v3,IniFile,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\dotNET_Reactor\v3\ApplicationModeUnpacker.cs,IniFile,The following statement contains a magic number: match.Groups.Count < 3
Magic Number,de4dot.code.deobfuscators.dotNET_Reactor.v3,IniFile,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\dotNET_Reactor\v3\ApplicationModeUnpacker.cs,IniFile,The following statement contains a magic number: var value = match.Groups[2].ToString().Trim();
Magic Number,de4dot.code.deobfuscators.dotNET_Reactor.v3,ApplicationModeUnpacker,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\dotNET_Reactor\v3\ApplicationModeUnpacker.cs,Unpack2,The following statement contains a magic number: uint headerOffset = (uint)peImage.Length - 12;
Magic Number,de4dot.code.deobfuscators.dotNET_Reactor.v3,ApplicationModeUnpacker,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\dotNET_Reactor\v3\ApplicationModeUnpacker.cs,Unpack2,The following statement contains a magic number: uint ezencryptionLibLength = peImage.OffsetReadUInt32(headerOffset + 4);
Magic Number,de4dot.code.deobfuscators.dotNET_Reactor.v3,ApplicationModeUnpacker,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\dotNET_Reactor\v3\ApplicationModeUnpacker.cs,Unpack2,The following statement contains a magic number: uint iniFileLength = peImage.OffsetReadUInt32(headerOffset + 8);
Magic Number,de4dot.code.deobfuscators.dotNET_Reactor.v3,ApplicationModeUnpacker,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\dotNET_Reactor\v3\ApplicationModeUnpacker.cs,Unpack2,The following statement contains a magic number: uint offsetClrVersionNumber = checked(offsetEncryptedAssembly - 12);
Magic Number,de4dot.code.deobfuscators.dotNET_Reactor.v3,ApplicationModeUnpacker,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\dotNET_Reactor\v3\ApplicationModeUnpacker.cs,Unpack2,The following statement contains a magic number: uint clrVerMinor = peImage.OffsetReadUInt32(offsetClrVersionNumber + 4);
Magic Number,de4dot.code.deobfuscators.dotNET_Reactor.v3,ApplicationModeUnpacker,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\dotNET_Reactor\v3\ApplicationModeUnpacker.cs,Unpack2,The following statement contains a magic number: uint clrVerBuild = peImage.OffsetReadUInt32(offsetClrVersionNumber + 8);
Magic Number,de4dot.code.deobfuscators.dotNET_Reactor.v3,ApplicationModeUnpacker,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\dotNET_Reactor\v3\ApplicationModeUnpacker.cs,Unpack2,The following statement contains a magic number: clrVerMajor <= 0 || clrVerMajor >= 20 || clrVerMinor >= 20 || clrVerBuild >= 1000000
Magic Number,de4dot.code.deobfuscators.dotNET_Reactor.v3,ApplicationModeUnpacker,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\dotNET_Reactor\v3\ApplicationModeUnpacker.cs,Unpack2,The following statement contains a magic number: clrVerMajor <= 0 || clrVerMajor >= 20 || clrVerMinor >= 20 || clrVerBuild >= 1000000
Magic Number,de4dot.code.deobfuscators.dotNET_Reactor.v3,ApplicationModeUnpacker,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\dotNET_Reactor\v3\ApplicationModeUnpacker.cs,Unpack2,The following statement contains a magic number: clrVerMajor <= 0 || clrVerMajor >= 20 || clrVerMinor >= 20 || clrVerBuild >= 1000000
Magic Number,de4dot.code.deobfuscators.dotNET_Reactor.v3,ApplicationModeUnpacker,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\dotNET_Reactor\v3\ApplicationModeUnpacker.cs,ClearDllBit,The following statement contains a magic number: uint characteristicsOffset = (uint)mainPeImage.PEImage.ImageNTHeaders.FileHeader.StartOffset + 18;
Magic Number,de4dot.code.deobfuscators.dotNET_Reactor.v3,ApplicationModeUnpacker,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\dotNET_Reactor\v3\ApplicationModeUnpacker.cs,ClearDllBit,The following statement contains a magic number: characteristics |= 2;
Magic Number,de4dot.code.deobfuscators.dotNET_Reactor.v3,DecrypterType,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\dotNET_Reactor\v3\DecrypterType.cs,Patch2,The following statement contains a magic number: uint numPatches = peImage.OffsetReadUInt32(peImage.Length - 4);
Magic Number,de4dot.code.deobfuscators.dotNET_Reactor.v3,DecrypterType,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\dotNET_Reactor\v3\DecrypterType.cs,Patch2,The following statement contains a magic number: uint offset = checked(peImage.Length - 4 - numPatches * 8);
Magic Number,de4dot.code.deobfuscators.dotNET_Reactor.v3,DecrypterType,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\dotNET_Reactor\v3\DecrypterType.cs,Patch2,The following statement contains a magic number: uint offset = checked(peImage.Length - 4 - numPatches * 8);
Magic Number,de4dot.code.deobfuscators.dotNET_Reactor.v3,DecrypterType,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\dotNET_Reactor\v3\DecrypterType.cs,Patch2,The following statement contains a magic number: var value = peImage.OffsetReadUInt32(offset + 4);
Magic Number,de4dot.code.deobfuscators.dotNET_Reactor.v3,DecrypterType,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\dotNET_Reactor\v3\DecrypterType.cs,Patch2,The following statement contains a magic number: offset += 8;
Magic Number,de4dot.code.deobfuscators.dotNET_Reactor.v3,DecrypterType,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\dotNET_Reactor\v3\DecrypterType.cs,Patch2,The following statement contains a magic number: value = peImage.OffsetReadUInt32(offset + 4);
Magic Number,de4dot.code.deobfuscators.dotNET_Reactor.v3,DecrypterType,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\dotNET_Reactor\v3\DecrypterType.cs,Patch2,The following statement contains a magic number: value == 4
Magic Number,de4dot.code.deobfuscators.dotNET_Reactor.v3,DecrypterType,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\dotNET_Reactor\v3\DecrypterType.cs,GetValue,The following statement contains a magic number: const uint magic = 2749;
Magic Number,de4dot.code.deobfuscators.dotNET_Reactor.v3,DecrypterType,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\dotNET_Reactor\v3\DecrypterType.cs,GetValue,The following statement contains a magic number: value % 3 != 0
Magic Number,de4dot.code.deobfuscators.dotNET_Reactor.v3,DecrypterType,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\dotNET_Reactor\v3\DecrypterType.cs,GetValue,The following statement contains a magic number: return value / 3;
Magic Number,de4dot.code.deobfuscators.dotNET_Reactor.v3,DecryptMethod,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\dotNET_Reactor\v3\DecryptMethod.cs,GetKey,The following statement contains a magic number: var tmpKey = ArrayFinder.GetInitializedByteArray(method' 32);
Magic Number,de4dot.code.deobfuscators.dotNET_Reactor.v3,DecryptMethod,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\dotNET_Reactor\v3\DecryptMethod.cs,GetKey,The following statement contains a magic number: var tmpIv = ArrayFinder.GetInitializedByteArray(method' 16);
Magic Number,de4dot.code.deobfuscators.dotNET_Reactor.v3,Deobfuscator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\dotNET_Reactor\v3\Deobfuscator.cs,DetectInternal,The following statement contains a magic number: val += 100 + 10 * (sum - 1);
Magic Number,de4dot.code.deobfuscators.dotNET_Reactor.v3,Deobfuscator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\dotNET_Reactor\v3\Deobfuscator.cs,DetectInternal,The following statement contains a magic number: val += 100 + 10 * (sum - 1);
Magic Number,de4dot.code.deobfuscators.dotNET_Reactor.v3,MemoryPatcher,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\dotNET_Reactor\v3\MemoryPatcher.cs,GetPatchInfo,The following statement contains a magic number: size1 <= 0 || size1 > 35
Magic Number,de4dot.code.deobfuscators.dotNET_Reactor.v3,MemoryPatcher,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\dotNET_Reactor\v3\MemoryPatcher.cs,Decrypt,The following statement contains a magic number: decrypted.Length / 4 * 4 != decrypted.Length
Magic Number,de4dot.code.deobfuscators.dotNET_Reactor.v3,MemoryPatcher,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\dotNET_Reactor\v3\MemoryPatcher.cs,Decrypt,The following statement contains a magic number: decrypted.Length / 4 * 4 != decrypted.Length
Magic Number,de4dot.code.deobfuscators.dotNET_Reactor.v3,MemoryPatcher,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\dotNET_Reactor\v3\MemoryPatcher.cs,Decrypt,The following statement contains a magic number: var newData = new int[decrypted.Length / 4];
Magic Number,de4dot.code.deobfuscators.dotNET_Reactor.v3,MemoryPatcher,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\dotNET_Reactor\v3\MemoryPatcher.cs,Decrypt,The following statement contains a magic number: newData[i] = BitConverter.ToInt32(decrypted' i * 4);
Magic Number,de4dot.code.deobfuscators.dotNET_Reactor.v4,AntiStrongName,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\dotNET_Reactor\v4\AntiStrongName.cs,CheckType,The following statement contains a magic number: sig == null || sig.Params.Count != 2
Magic Number,de4dot.code.deobfuscators.dotNET_Reactor.v4,AntiStrongName,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\dotNET_Reactor\v4\AntiStrongName.cs,Remove,The following statement contains a magic number: badBlock2.FallThrough == badBlock2 && badBlock2.Sources.Count == 2 && badBlock2.Targets == null
Magic Number,de4dot.code.deobfuscators.dotNET_Reactor.v4,AntiStrongName,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\dotNET_Reactor\v4\AntiStrongName.cs,FindBlock,The following statement contains a magic number: const int NUM_INSTRS = 11;
Magic Number,de4dot.code.deobfuscators.dotNET_Reactor.v4,AntiStrongName,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\dotNET_Reactor\v4\AntiStrongName.cs,FindBlock,The following statement contains a magic number: !CheckCall(instructions[i + 2]' "System.Reflection.Assembly System.Type::get_Assembly()")
Magic Number,de4dot.code.deobfuscators.dotNET_Reactor.v4,AntiStrongName,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\dotNET_Reactor\v4\AntiStrongName.cs,FindBlock,The following statement contains a magic number: !CheckCall(instructions[i + 3]' "System.Reflection.AssemblyName System.Reflection.Assembly::GetName()")
Magic Number,de4dot.code.deobfuscators.dotNET_Reactor.v4,AntiStrongName,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\dotNET_Reactor\v4\AntiStrongName.cs,FindBlock,The following statement contains a magic number: !CheckCall(instructions[i + 4]' "System.Byte[] System.Reflection.AssemblyName::GetPublicKeyToken()")
Magic Number,de4dot.code.deobfuscators.dotNET_Reactor.v4,AntiStrongName,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\dotNET_Reactor\v4\AntiStrongName.cs,FindBlock,The following statement contains a magic number: !CheckCall(instructions[i + 5]' "System.String System.Convert::ToBase64String(System.Byte[])")
Magic Number,de4dot.code.deobfuscators.dotNET_Reactor.v4,AntiStrongName,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\dotNET_Reactor\v4\AntiStrongName.cs,FindBlock,The following statement contains a magic number: instructions[i + 6].OpCode.Code != Code.Ldstr
Magic Number,de4dot.code.deobfuscators.dotNET_Reactor.v4,AntiStrongName,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\dotNET_Reactor\v4\AntiStrongName.cs,FindBlock,The following statement contains a magic number: !CheckCall(instructions[i + 7]' antiStrongNameMethod)
Magic Number,de4dot.code.deobfuscators.dotNET_Reactor.v4,AntiStrongName,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\dotNET_Reactor\v4\AntiStrongName.cs,FindBlock,The following statement contains a magic number: instructions[i + 8].OpCode.Code != Code.Ldstr
Magic Number,de4dot.code.deobfuscators.dotNET_Reactor.v4,AntiStrongName,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\dotNET_Reactor\v4\AntiStrongName.cs,FindBlock,The following statement contains a magic number: !CheckCall(instructions[i + 9]' "System.Boolean System.String::op_Inequality(System.String'System.String)")
Magic Number,de4dot.code.deobfuscators.dotNET_Reactor.v4,AssemblyResolver,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\dotNET_Reactor\v4\AssemblyResolver.cs,CheckMethod,The following statement contains a magic number: type.Fields.Count != 2 && type.Fields.Count != 3
Magic Number,de4dot.code.deobfuscators.dotNET_Reactor.v4,AssemblyResolver,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\dotNET_Reactor\v4\AssemblyResolver.cs,CheckMethod,The following statement contains a magic number: type.Fields.Count != 2 && type.Fields.Count != 3
Magic Number,de4dot.code.deobfuscators.dotNET_Reactor.v4,AssemblyResolver,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\dotNET_Reactor\v4\AssemblyResolver.cs,CheckFields,The following statement contains a magic number: fields.Count != 2 && fields.Count != 3
Magic Number,de4dot.code.deobfuscators.dotNET_Reactor.v4,AssemblyResolver,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\dotNET_Reactor\v4\AssemblyResolver.cs,CheckFields,The following statement contains a magic number: fields.Count != 2 && fields.Count != 3
Magic Number,de4dot.code.deobfuscators.dotNET_Reactor.v4,AssemblyResolver,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\dotNET_Reactor\v4\AssemblyResolver.cs,CheckFields,The following statement contains a magic number: fields.Count == 2
Magic Number,de4dot.code.deobfuscators.dotNET_Reactor.v4,AssemblyResolver,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\dotNET_Reactor\v4\AssemblyResolver.cs,CheckFields,The following statement contains a magic number: return fieldTypes.Count("System.Object") == 2;
Magic Number,de4dot.code.deobfuscators.dotNET_Reactor.v4,Deobfuscator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\dotNET_Reactor\v4\Deobfuscator.cs,DetectInternal,The following statement contains a magic number: val += 100 + 10 * (sum - 1);
Magic Number,de4dot.code.deobfuscators.dotNET_Reactor.v4,Deobfuscator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\dotNET_Reactor\v4\Deobfuscator.cs,DetectInternal,The following statement contains a magic number: val += 100 + 10 * (sum - 1);
Magic Number,de4dot.code.deobfuscators.dotNET_Reactor.v4,Deobfuscator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\dotNET_Reactor\v4\Deobfuscator.cs,DetectInternal,The following statement contains a magic number: val += 10;
Magic Number,de4dot.code.deobfuscators.dotNET_Reactor.v4,Deobfuscator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\dotNET_Reactor\v4\Deobfuscator.cs,DetectVersion,The following statement contains a magic number: minVer = 3800;
Magic Number,de4dot.code.deobfuscators.dotNET_Reactor.v4,Deobfuscator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\dotNET_Reactor\v4\Deobfuscator.cs,DetectVersion,The following statement contains a magic number: minVer >= 3800
Magic Number,de4dot.code.deobfuscators.dotNET_Reactor.v4,Deobfuscator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\dotNET_Reactor\v4\Deobfuscator.cs,DetectVersion,The following statement contains a magic number: minVer >= 3800
Magic Number,de4dot.code.deobfuscators.dotNET_Reactor.v4,Deobfuscator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\dotNET_Reactor\v4\Deobfuscator.cs,DetectVersion,The following statement contains a magic number: switch (numIntPtrSizeCompares) {  					case 7:  					case 9: return DeobfuscatorInfo.THE_NAME + " 4.5";  					case 10:  						if (!hasSymmetricAlgorithm)  							return DeobfuscatorInfo.THE_NAME + " 4.6";  						if (hasCatchString)  							return DeobfuscatorInfo.THE_NAME + " 4.7";  						return DeobfuscatorInfo.THE_NAME + " 4.8";  					}
Magic Number,de4dot.code.deobfuscators.dotNET_Reactor.v4,Deobfuscator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\dotNET_Reactor\v4\Deobfuscator.cs,DetectVersion,The following statement contains a magic number: switch (numIntPtrSizeCompares) {  					case 7:  					case 9: return DeobfuscatorInfo.THE_NAME + " 4.5";  					case 10:  						if (!hasSymmetricAlgorithm)  							return DeobfuscatorInfo.THE_NAME + " 4.6";  						if (hasCatchString)  							return DeobfuscatorInfo.THE_NAME + " 4.7";  						return DeobfuscatorInfo.THE_NAME + " 4.8";  					}
Magic Number,de4dot.code.deobfuscators.dotNET_Reactor.v4,Deobfuscator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\dotNET_Reactor\v4\Deobfuscator.cs,DetectVersion,The following statement contains a magic number: switch (numIntPtrSizeCompares) {  					case 7:  					case 9: return DeobfuscatorInfo.THE_NAME + " 4.5";  					case 10:  						if (!hasSymmetricAlgorithm)  							return DeobfuscatorInfo.THE_NAME + " 4.6";  						if (hasCatchString)  							return DeobfuscatorInfo.THE_NAME + " 4.7";  						return DeobfuscatorInfo.THE_NAME + " 4.8";  					}
Magic Number,de4dot.code.deobfuscators.dotNET_Reactor.v4,Deobfuscator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\dotNET_Reactor\v4\Deobfuscator.cs,CountCompareSystemIntPtrSize,The following statement contains a magic number: !ldci4.IsLdcI4() || ldci4.GetLdcI4Value() != 4
Magic Number,de4dot.code.deobfuscators.dotNET_Reactor.v4,EmptyClass,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\dotNET_Reactor\v4\EmptyClass.cs,Initialize,The following statement contains a magic number: count >= 40
Magic Number,de4dot.code.deobfuscators.dotNET_Reactor.v4,EmptyClass,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\dotNET_Reactor\v4\EmptyClass.cs,Initialize,The following statement contains a magic number: numCalls >= 10
Magic Number,de4dot.code.deobfuscators.dotNET_Reactor.v4,EmptyClass,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\dotNET_Reactor\v4\EmptyClass.cs,IsEmptyClass,The following statement contains a magic number: method.Body.Instructions.Count > 20
Magic Number,de4dot.code.deobfuscators.dotNET_Reactor.v4,EmptyClass,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\dotNET_Reactor\v4\EmptyClass.cs,IsEmptyClass,The following statement contains a magic number: otherMethods > 8
Magic Number,de4dot.code.deobfuscators.dotNET_Reactor.v4,EncryptedResource,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\dotNET_Reactor\v4\EncryptedResource.cs,Initialize,The following statement contains a magic number: var key = ArrayFinder.GetInitializedByteArray(resourceDecrypterMethod' 32);
Magic Number,de4dot.code.deobfuscators.dotNET_Reactor.v4,EncryptedResource,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\dotNET_Reactor\v4\EncryptedResource.cs,Initialize,The following statement contains a magic number: var iv = ArrayFinder.GetInitializedByteArray(resourceDecrypterMethod' 16);
Magic Number,de4dot.code.deobfuscators.dotNET_Reactor.v4,EncryptedResource,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\dotNET_Reactor\v4\EncryptedResource.cs,Initialize,The following statement contains a magic number: iv[i * 2 + 1] = publicKeyToken.Data[i];
Magic Number,de4dot.code.deobfuscators.dotNET_Reactor.v4,EncryptedResource,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\dotNET_Reactor\v4\EncryptedResource.cs,Initialize,The following statement contains a magic number: i < 8
Magic Number,de4dot.code.deobfuscators.dotNET_Reactor.v4,DecrypterV2,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\dotNET_Reactor\v4\EncryptedResource.cs,FindStartEnd,The following statement contains a magic number: instrs[i + 2].OpCode.Code != Code.Conv_U4
Magic Number,de4dot.code.deobfuscators.dotNET_Reactor.v4,DecrypterV2,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\dotNET_Reactor\v4\EncryptedResource.cs,FindStartEnd,The following statement contains a magic number: instrs[i + 3].OpCode.Code != Code.Add
Magic Number,de4dot.code.deobfuscators.dotNET_Reactor.v4,DecrypterV2,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\dotNET_Reactor\v4\EncryptedResource.cs,FindStartEnd,The following statement contains a magic number: int newEndIndex = i + 3;
Magic Number,de4dot.code.deobfuscators.dotNET_Reactor.v4,DecrypterV2,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\dotNET_Reactor\v4\EncryptedResource.cs,FindStartEnd,The following statement contains a magic number: checkLocs.Count == 3
Magic Number,de4dot.code.deobfuscators.dotNET_Reactor.v4,DecrypterV2,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\dotNET_Reactor\v4\EncryptedResource.cs,FindStartEnd,The following statement contains a magic number: i + 8 < instrs.Count
Magic Number,de4dot.code.deobfuscators.dotNET_Reactor.v4,DecrypterV2,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\dotNET_Reactor\v4\EncryptedResource.cs,FindStart,The following statement contains a magic number: instrs[i + 2].OpCode.Code != Code.Or
Magic Number,de4dot.code.deobfuscators.dotNET_Reactor.v4,DecrypterV2,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\dotNET_Reactor\v4\EncryptedResource.cs,FindStart,The following statement contains a magic number: CheckLocal(instrs[i + 3]' false) == null
Magic Number,de4dot.code.deobfuscators.dotNET_Reactor.v4,DecrypterV2,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\dotNET_Reactor\v4\EncryptedResource.cs,FindStart,The following statement contains a magic number: (local = CheckLocal(instrs[i + 4]' true)) == null
Magic Number,de4dot.code.deobfuscators.dotNET_Reactor.v4,DecrypterV2,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\dotNET_Reactor\v4\EncryptedResource.cs,FindStart,The following statement contains a magic number: CheckLocal(instrs[i + 5]' true) == null
Magic Number,de4dot.code.deobfuscators.dotNET_Reactor.v4,DecrypterV2,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\dotNET_Reactor\v4\EncryptedResource.cs,FindStart,The following statement contains a magic number: instrs[i + 6].OpCode.Code != Code.Add
Magic Number,de4dot.code.deobfuscators.dotNET_Reactor.v4,DecrypterV2,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\dotNET_Reactor\v4\EncryptedResource.cs,FindStart,The following statement contains a magic number: CheckLocal(instrs[i + 7]' false) != local
Magic Number,de4dot.code.deobfuscators.dotNET_Reactor.v4,DecrypterV2,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\dotNET_Reactor\v4\EncryptedResource.cs,FindStart,The following statement contains a magic number: var instr = instrs[i + 8];
Magic Number,de4dot.code.deobfuscators.dotNET_Reactor.v4,DecrypterV2,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\dotNET_Reactor\v4\EncryptedResource.cs,FindStart,The following statement contains a magic number: int newStartIndex = i + 8;
Magic Number,de4dot.code.deobfuscators.dotNET_Reactor.v4,DecrypterV2,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\dotNET_Reactor\v4\EncryptedResource.cs,FindStart,The following statement contains a magic number: i + 8 < instrs.Count
Magic Number,de4dot.code.deobfuscators.dotNET_Reactor.v4,DecrypterV2,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\dotNET_Reactor\v4\EncryptedResource.cs,ReadUInt32,The following statement contains a magic number: sizeLeft >= 4
Magic Number,de4dot.code.deobfuscators.dotNET_Reactor.v4,DecrypterV2,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\dotNET_Reactor\v4\EncryptedResource.cs,ReadUInt32,The following statement contains a magic number: switch (sizeLeft) {  				case 1: return ary[index];  				case 2: return (uint)(ary[index] | (ary[index + 1] << 8));  				case 3: return (uint)(ary[index] | (ary[index + 1] << 8) | (ary[index + 2] << 16));  				default: throw new ApplicationException("Can't read data");  				}
Magic Number,de4dot.code.deobfuscators.dotNET_Reactor.v4,DecrypterV2,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\dotNET_Reactor\v4\EncryptedResource.cs,ReadUInt32,The following statement contains a magic number: switch (sizeLeft) {  				case 1: return ary[index];  				case 2: return (uint)(ary[index] | (ary[index + 1] << 8));  				case 3: return (uint)(ary[index] | (ary[index + 1] << 8) | (ary[index + 2] << 16));  				default: throw new ApplicationException("Can't read data");  				}
Magic Number,de4dot.code.deobfuscators.dotNET_Reactor.v4,DecrypterV2,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\dotNET_Reactor\v4\EncryptedResource.cs,ReadUInt32,The following statement contains a magic number: switch (sizeLeft) {  				case 1: return ary[index];  				case 2: return (uint)(ary[index] | (ary[index + 1] << 8));  				case 3: return (uint)(ary[index] | (ary[index + 1] << 8) | (ary[index + 2] << 16));  				default: throw new ApplicationException("Can't read data");  				}
Magic Number,de4dot.code.deobfuscators.dotNET_Reactor.v4,DecrypterV2,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\dotNET_Reactor\v4\EncryptedResource.cs,ReadUInt32,The following statement contains a magic number: switch (sizeLeft) {  				case 1: return ary[index];  				case 2: return (uint)(ary[index] | (ary[index + 1] << 8));  				case 3: return (uint)(ary[index] | (ary[index + 1] << 8) | (ary[index + 2] << 16));  				default: throw new ApplicationException("Can't read data");  				}
Magic Number,de4dot.code.deobfuscators.dotNET_Reactor.v4,DecrypterV2,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\dotNET_Reactor\v4\EncryptedResource.cs,ReadUInt32,The following statement contains a magic number: switch (sizeLeft) {  				case 1: return ary[index];  				case 2: return (uint)(ary[index] | (ary[index + 1] << 8));  				case 3: return (uint)(ary[index] | (ary[index + 1] << 8) | (ary[index + 2] << 16));  				default: throw new ApplicationException("Can't read data");  				}
Magic Number,de4dot.code.deobfuscators.dotNET_Reactor.v4,DecrypterV2,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\dotNET_Reactor\v4\EncryptedResource.cs,ReadUInt32,The following statement contains a magic number: switch (sizeLeft) {  				case 1: return ary[index];  				case 2: return (uint)(ary[index] | (ary[index + 1] << 8));  				case 3: return (uint)(ary[index] | (ary[index + 1] << 8) | (ary[index + 2] << 16));  				default: throw new ApplicationException("Can't read data");  				}
Magic Number,de4dot.code.deobfuscators.dotNET_Reactor.v4,DecrypterV2,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\dotNET_Reactor\v4\EncryptedResource.cs,WriteUInt32,The following statement contains a magic number: ary[index + 1] = (byte)(value >> 8);
Magic Number,de4dot.code.deobfuscators.dotNET_Reactor.v4,DecrypterV2,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\dotNET_Reactor\v4\EncryptedResource.cs,WriteUInt32,The following statement contains a magic number: sizeLeft >= 2
Magic Number,de4dot.code.deobfuscators.dotNET_Reactor.v4,DecrypterV2,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\dotNET_Reactor\v4\EncryptedResource.cs,WriteUInt32,The following statement contains a magic number: ary[index + 2] = (byte)(value >> 16);
Magic Number,de4dot.code.deobfuscators.dotNET_Reactor.v4,DecrypterV2,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\dotNET_Reactor\v4\EncryptedResource.cs,WriteUInt32,The following statement contains a magic number: ary[index + 2] = (byte)(value >> 16);
Magic Number,de4dot.code.deobfuscators.dotNET_Reactor.v4,DecrypterV2,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\dotNET_Reactor\v4\EncryptedResource.cs,WriteUInt32,The following statement contains a magic number: sizeLeft >= 3
Magic Number,de4dot.code.deobfuscators.dotNET_Reactor.v4,DecrypterV2,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\dotNET_Reactor\v4\EncryptedResource.cs,WriteUInt32,The following statement contains a magic number: ary[index + 3] = (byte)(value >> 24);
Magic Number,de4dot.code.deobfuscators.dotNET_Reactor.v4,DecrypterV2,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\dotNET_Reactor\v4\EncryptedResource.cs,WriteUInt32,The following statement contains a magic number: ary[index + 3] = (byte)(value >> 24);
Magic Number,de4dot.code.deobfuscators.dotNET_Reactor.v4,DecrypterV2,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\dotNET_Reactor\v4\EncryptedResource.cs,WriteUInt32,The following statement contains a magic number: sizeLeft >= 4
Magic Number,de4dot.code.deobfuscators.dotNET_Reactor.v4,MethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\dotNET_Reactor\v4\MethodsDecrypter.cs,Find,The following statement contains a magic number: int typesLeft = 30;
Magic Number,de4dot.code.deobfuscators.dotNET_Reactor.v4,MethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\dotNET_Reactor\v4\MethodsDecrypter.cs,XorEncrypt,The following statement contains a magic number: int count = data.Length / 8;
Magic Number,de4dot.code.deobfuscators.dotNET_Reactor.v4,MethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\dotNET_Reactor\v4\MethodsDecrypter.cs,XorEncrypt,The following statement contains a magic number: stream.Position -= 8;
Magic Number,de4dot.code.deobfuscators.dotNET_Reactor.v4,MethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\dotNET_Reactor\v4\MethodsDecrypter.cs,Decrypt,The following statement contains a magic number: methodsDataReader.Position -= 4;
Magic Number,de4dot.code.deobfuscators.dotNET_Reactor.v4,MethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\dotNET_Reactor\v4\MethodsDecrypter.cs,Decrypt,The following statement contains a magic number: methodsDataReader.Position += 8 * (uint)patchCount;
Magic Number,de4dot.code.deobfuscators.dotNET_Reactor.v4,MethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\dotNET_Reactor\v4\MethodsDecrypter.cs,Decrypt,The following statement contains a magic number: PatchDwords(peImage' ref methodsDataReader' numDwords / 2);
Magic Number,de4dot.code.deobfuscators.dotNET_Reactor.v4,MethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\dotNET_Reactor\v4\MethodsDecrypter.cs,IsNewer45Decryption,The following statement contains a magic number: !ldci4.IsLdcI4() || ldci4.GetLdcI4Value() != 4
Magic Number,de4dot.code.deobfuscators.dotNET_Reactor.v4,MethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\dotNET_Reactor\v4\MethodsDecrypter.cs,IsNewer45Decryption,The following statement contains a magic number: ldci4 = instrs[i + 2];
Magic Number,de4dot.code.deobfuscators.dotNET_Reactor.v4,MethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\dotNET_Reactor\v4\MethodsDecrypter.cs,IsNewer45Decryption,The following statement contains a magic number: !ldci4.IsLdcI4() || ldci4.GetLdcI4Value() != 4
Magic Number,de4dot.code.deobfuscators.dotNET_Reactor.v4,MethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\dotNET_Reactor\v4\MethodsDecrypter.cs,IsNewer45Decryption,The following statement contains a magic number: instrs[i + 3].OpCode.Code != Code.Ldloca_S && instrs[i + 3].OpCode.Code != Code.Ldloca
Magic Number,de4dot.code.deobfuscators.dotNET_Reactor.v4,MethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\dotNET_Reactor\v4\MethodsDecrypter.cs,IsNewer45Decryption,The following statement contains a magic number: instrs[i + 3].OpCode.Code != Code.Ldloca_S && instrs[i + 3].OpCode.Code != Code.Ldloca
Magic Number,de4dot.code.deobfuscators.dotNET_Reactor.v4,MethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\dotNET_Reactor\v4\MethodsDecrypter.cs,IsNewer45Decryption,The following statement contains a magic number: var call = instrs[i + 4];
Magic Number,de4dot.code.deobfuscators.dotNET_Reactor.v4,MethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\dotNET_Reactor\v4\MethodsDecrypter.cs,IsNewer45Decryption,The following statement contains a magic number: i < instrs.Count - 4
Magic Number,de4dot.code.deobfuscators.dotNET_Reactor.v4,MethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\dotNET_Reactor\v4\MethodsDecrypter.cs,PrepareEncryptNativeMethods,The following statement contains a magic number: int len = 12;
Magic Number,de4dot.code.deobfuscators.dotNET_Reactor.v4,MethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\dotNET_Reactor\v4\MethodsDecrypter.cs,PrepareEncryptNativeMethods,The following statement contains a magic number: len += 3 * 4 + kv.Value.Length;
Magic Number,de4dot.code.deobfuscators.dotNET_Reactor.v4,MethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\dotNET_Reactor\v4\MethodsDecrypter.cs,PrepareEncryptNativeMethods,The following statement contains a magic number: len += 3 * 4 + kv.Value.Length;
Magic Number,de4dot.code.deobfuscators.dotNET_Reactor.v4,MethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\dotNET_Reactor\v4\MethodsDecrypter.cs,PrepareEncryptNativeMethods,The following statement contains a magic number: len = (len & ~15) + 16;
Magic Number,de4dot.code.deobfuscators.dotNET_Reactor.v4,MethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\dotNET_Reactor\v4\MethodsDecrypter.cs,PrepareEncryptNativeMethods,The following statement contains a magic number: len = (len & ~15) + 16;
Magic Number,de4dot.code.deobfuscators.dotNET_Reactor.v4,MethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\dotNET_Reactor\v4\MethodsDecrypter.cs,FindDnrCompileMethod,The following statement contains a magic number: sig == null || sig.Params.Count != 6
Magic Number,de4dot.code.deobfuscators.dotNET_Reactor.v4,NativeFileDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\dotNET_Reactor\v4\NativeFileDecrypter.cs,NativeFileDecrypter,The following statement contains a magic number: var keyInit = new byte[] {  				0x78' 0x61' 0x32' keyData[0]' keyData[2]'  				0x62' keyData[3]' keyData[0]' keyData[1]' keyData[1]'  				0x66' keyData[1]' keyData[5]' 0x33' keyData[2]'  				keyData[4]' 0x74' 0x32' keyData[3]' keyData[2]'  			};
Magic Number,de4dot.code.deobfuscators.dotNET_Reactor.v4,NativeFileDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\dotNET_Reactor\v4\NativeFileDecrypter.cs,NativeFileDecrypter,The following statement contains a magic number: var keyInit = new byte[] {  				0x78' 0x61' 0x32' keyData[0]' keyData[2]'  				0x62' keyData[3]' keyData[0]' keyData[1]' keyData[1]'  				0x66' keyData[1]' keyData[5]' 0x33' keyData[2]'  				keyData[4]' 0x74' 0x32' keyData[3]' keyData[2]'  			};
Magic Number,de4dot.code.deobfuscators.dotNET_Reactor.v4,NativeFileDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\dotNET_Reactor\v4\NativeFileDecrypter.cs,NativeFileDecrypter,The following statement contains a magic number: var keyInit = new byte[] {  				0x78' 0x61' 0x32' keyData[0]' keyData[2]'  				0x62' keyData[3]' keyData[0]' keyData[1]' keyData[1]'  				0x66' keyData[1]' keyData[5]' 0x33' keyData[2]'  				keyData[4]' 0x74' 0x32' keyData[3]' keyData[2]'  			};
Magic Number,de4dot.code.deobfuscators.dotNET_Reactor.v4,NativeFileDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\dotNET_Reactor\v4\NativeFileDecrypter.cs,NativeFileDecrypter,The following statement contains a magic number: var keyInit = new byte[] {  				0x78' 0x61' 0x32' keyData[0]' keyData[2]'  				0x62' keyData[3]' keyData[0]' keyData[1]' keyData[1]'  				0x66' keyData[1]' keyData[5]' 0x33' keyData[2]'  				keyData[4]' 0x74' 0x32' keyData[3]' keyData[2]'  			};
Magic Number,de4dot.code.deobfuscators.dotNET_Reactor.v4,NativeFileDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\dotNET_Reactor\v4\NativeFileDecrypter.cs,NativeFileDecrypter,The following statement contains a magic number: var keyInit = new byte[] {  				0x78' 0x61' 0x32' keyData[0]' keyData[2]'  				0x62' keyData[3]' keyData[0]' keyData[1]' keyData[1]'  				0x66' keyData[1]' keyData[5]' 0x33' keyData[2]'  				keyData[4]' 0x74' 0x32' keyData[3]' keyData[2]'  			};
Magic Number,de4dot.code.deobfuscators.dotNET_Reactor.v4,NativeFileDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\dotNET_Reactor\v4\NativeFileDecrypter.cs,NativeFileDecrypter,The following statement contains a magic number: var keyInit = new byte[] {  				0x78' 0x61' 0x32' keyData[0]' keyData[2]'  				0x62' keyData[3]' keyData[0]' keyData[1]' keyData[1]'  				0x66' keyData[1]' keyData[5]' 0x33' keyData[2]'  				keyData[4]' 0x74' 0x32' keyData[3]' keyData[2]'  			};
Magic Number,de4dot.code.deobfuscators.dotNET_Reactor.v4,NativeFileDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\dotNET_Reactor\v4\NativeFileDecrypter.cs,NativeFileDecrypter,The following statement contains a magic number: var keyInit = new byte[] {  				0x78' 0x61' 0x32' keyData[0]' keyData[2]'  				0x62' keyData[3]' keyData[0]' keyData[1]' keyData[1]'  				0x66' keyData[1]' keyData[5]' 0x33' keyData[2]'  				keyData[4]' 0x74' 0x32' keyData[3]' keyData[2]'  			};
Magic Number,de4dot.code.deobfuscators.dotNET_Reactor.v4,NativeFileDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\dotNET_Reactor\v4\NativeFileDecrypter.cs,NativeFileDecrypter,The following statement contains a magic number: key = new byte[32];
Magic Number,de4dot.code.deobfuscators.dotNET_Reactor.v4,NativeFileDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\dotNET_Reactor\v4\NativeFileDecrypter.cs,NativeFileDecrypter,The following statement contains a magic number: i < 32
Magic Number,de4dot.code.deobfuscators.dotNET_Reactor.v4,NativeFileDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\dotNET_Reactor\v4\NativeFileDecrypter.cs,NativeFileDecrypter,The following statement contains a magic number: var transformTemp = new ushort[256' 256];
Magic Number,de4dot.code.deobfuscators.dotNET_Reactor.v4,NativeFileDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\dotNET_Reactor\v4\NativeFileDecrypter.cs,NativeFileDecrypter,The following statement contains a magic number: var transformTemp = new ushort[256' 256];
Magic Number,de4dot.code.deobfuscators.dotNET_Reactor.v4,NativeFileDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\dotNET_Reactor\v4\NativeFileDecrypter.cs,NativeFileDecrypter,The following statement contains a magic number: i < 256
Magic Number,de4dot.code.deobfuscators.dotNET_Reactor.v4,NativeFileDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\dotNET_Reactor\v4\NativeFileDecrypter.cs,NativeFileDecrypter,The following statement contains a magic number: i < 256
Magic Number,de4dot.code.deobfuscators.dotNET_Reactor.v4,NativeFileDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\dotNET_Reactor\v4\NativeFileDecrypter.cs,NativeFileDecrypter,The following statement contains a magic number: i1 = 1 + (key[(i + 37 + counter) % key.Length] + counter + kb) % 255;
Magic Number,de4dot.code.deobfuscators.dotNET_Reactor.v4,NativeFileDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\dotNET_Reactor\v4\NativeFileDecrypter.cs,NativeFileDecrypter,The following statement contains a magic number: i1 = 1 + (key[(i + 37 + counter) % key.Length] + counter + kb) % 255;
Magic Number,de4dot.code.deobfuscators.dotNET_Reactor.v4,NativeFileDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\dotNET_Reactor\v4\NativeFileDecrypter.cs,NativeFileDecrypter,The following statement contains a magic number: transformTemp[i0' i1] = transformTemp[(i0 + ki) % 256' 0];
Magic Number,de4dot.code.deobfuscators.dotNET_Reactor.v4,NativeFileDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\dotNET_Reactor\v4\NativeFileDecrypter.cs,NativeFileDecrypter,The following statement contains a magic number: i0 < 256
Magic Number,de4dot.code.deobfuscators.dotNET_Reactor.v4,NativeFileDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\dotNET_Reactor\v4\NativeFileDecrypter.cs,NativeFileDecrypter,The following statement contains a magic number: i < 256
Magic Number,de4dot.code.deobfuscators.dotNET_Reactor.v4,NativeFileDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\dotNET_Reactor\v4\NativeFileDecrypter.cs,NativeFileDecrypter,The following statement contains a magic number: j < 256
Magic Number,de4dot.code.deobfuscators.dotNET_Reactor.v4,NativeFileDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\dotNET_Reactor\v4\NativeFileDecrypter.cs,NativeFileDecrypter,The following statement contains a magic number: i < 256
Magic Number,de4dot.code.deobfuscators.dotNET_Reactor.v4,NativeFileDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\dotNET_Reactor\v4\NativeFileDecrypter.cs,Decrypt,The following statement contains a magic number: int blockLen = Math.Min(1024' count - i);
Magic Number,de4dot.code.deobfuscators.dotNET_Reactor.v4,NativeImageUnpacker,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\dotNET_Reactor\v4\NativeImageUnpacker.cs,Unpack,The following statement contains a magic number: var dataEntry = peImage.PEImage.Win32Resources.Find(10' "__"' 0);
Magic Number,de4dot.code.deobfuscators.dotNET_Reactor.v4,NativeImageUnpacker,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\dotNET_Reactor\v4\NativeImageUnpacker.cs,GetKeyData,The following statement contains a magic number: return new byte[6] { 0x34' 0x38' 0x63' 0x65' 0x7A' 0x35 };
Magic Number,de4dot.code.deobfuscators.dotNET_Reactor.v4,ResourceResolver,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\dotNET_Reactor\v4\ResourceResolver.cs,CheckFields,The following statement contains a magic number: fields.Count != 3 && fields.Count != 4
Magic Number,de4dot.code.deobfuscators.dotNET_Reactor.v4,ResourceResolver,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\dotNET_Reactor\v4\ResourceResolver.cs,CheckFields,The following statement contains a magic number: fields.Count != 3 && fields.Count != 4
Magic Number,de4dot.code.deobfuscators.dotNET_Reactor.v4,ResourceResolver,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\dotNET_Reactor\v4\ResourceResolver.cs,CheckFields,The following statement contains a magic number: int numBools = fields.Count == 3 ? 1 : 2;
Magic Number,de4dot.code.deobfuscators.dotNET_Reactor.v4,ResourceResolver,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\dotNET_Reactor\v4\ResourceResolver.cs,CheckFields,The following statement contains a magic number: int numBools = fields.Count == 3 ? 1 : 2;
Magic Number,de4dot.code.deobfuscators.dotNET_Reactor.v4,ResourceResolver,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\dotNET_Reactor\v4\ResourceResolver.cs,CheckFields,The following statement contains a magic number: fieldTypes.Count("System.Object") == 2
Magic Number,de4dot.code.deobfuscators.dotNET_Reactor.v4,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\dotNET_Reactor\v4\StringDecrypter.cs,FindKeyIv,The following statement contains a magic number: field.InitialValue.Length == 32
Magic Number,de4dot.code.deobfuscators.dotNET_Reactor.v4,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\dotNET_Reactor\v4\StringDecrypter.cs,Decrypt,The following statement contains a magic number: return Encoding.Unicode.GetString(decryptedData' offset + 4' length);
Magic Number,de4dot.code.deobfuscators.Eazfuscator_NET,AssemblyResolver,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\AssemblyResolver.cs,CheckInitMethodSilverlight,The following statement contains a magic number: type.NestedTypes.Count != 2
Magic Number,de4dot.code.deobfuscators.Eazfuscator_NET,AssemblyResolver,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\AssemblyResolver.cs,CheckInitMethod,The following statement contains a magic number: type.NestedTypes.Count < 2 || type.NestedTypes.Count > 6
Magic Number,de4dot.code.deobfuscators.Eazfuscator_NET,AssemblyResolver,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\AssemblyResolver.cs,CheckInitMethod,The following statement contains a magic number: type.NestedTypes.Count < 2 || type.NestedTypes.Count > 6
Magic Number,de4dot.code.deobfuscators.Eazfuscator_NET,AssemblyResolver,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\AssemblyResolver.cs,GetDecryptMethod,The following statement contains a magic number: !DeobUtils.HasInteger(method' 32) ||  					!DeobUtils.HasInteger(method' 121)
Magic Number,de4dot.code.deobfuscators.Eazfuscator_NET,AssemblyResolver,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\AssemblyResolver.cs,GetDecryptMethod,The following statement contains a magic number: !DeobUtils.HasInteger(method' 32) ||  					!DeobUtils.HasInteger(method' 121)
Magic Number,de4dot.code.deobfuscators.Eazfuscator_NET,AssemblyResolver,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\AssemblyResolver.cs,CreateDecryptKey,The following statement contains a magic number: var data = new byte[8];
Magic Number,de4dot.code.deobfuscators.Eazfuscator_NET,AssemblyResolver,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\AssemblyResolver.cs,CreateDecryptKey,The following statement contains a magic number: data[7] = (byte)(magic >> 8);
Magic Number,de4dot.code.deobfuscators.Eazfuscator_NET,AssemblyResolver,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\AssemblyResolver.cs,CreateDecryptKey,The following statement contains a magic number: data[7] = (byte)(magic >> 8);
Magic Number,de4dot.code.deobfuscators.Eazfuscator_NET,AssemblyResolver,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\AssemblyResolver.cs,CreateDecryptKey,The following statement contains a magic number: data[6] = (byte)(magic >> 16);
Magic Number,de4dot.code.deobfuscators.Eazfuscator_NET,AssemblyResolver,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\AssemblyResolver.cs,CreateDecryptKey,The following statement contains a magic number: data[6] = (byte)(magic >> 16);
Magic Number,de4dot.code.deobfuscators.Eazfuscator_NET,AssemblyResolver,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\AssemblyResolver.cs,CreateDecryptKey,The following statement contains a magic number: data[5] = (byte)(magic >> 24);
Magic Number,de4dot.code.deobfuscators.Eazfuscator_NET,AssemblyResolver,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\AssemblyResolver.cs,CreateDecryptKey,The following statement contains a magic number: data[5] = (byte)(magic >> 24);
Magic Number,de4dot.code.deobfuscators.Eazfuscator_NET,AssemblyResolver,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\AssemblyResolver.cs,CreateDecryptKey,The following statement contains a magic number: data[4] = (byte)(magic >> 32);
Magic Number,de4dot.code.deobfuscators.Eazfuscator_NET,AssemblyResolver,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\AssemblyResolver.cs,CreateDecryptKey,The following statement contains a magic number: data[4] = (byte)(magic >> 32);
Magic Number,de4dot.code.deobfuscators.Eazfuscator_NET,AssemblyResolver,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\AssemblyResolver.cs,CreateDecryptKey,The following statement contains a magic number: data[1] = (byte)(magic >> 40);
Magic Number,de4dot.code.deobfuscators.Eazfuscator_NET,AssemblyResolver,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\AssemblyResolver.cs,CreateDecryptKey,The following statement contains a magic number: data[3] = (byte)(magic >> 48);
Magic Number,de4dot.code.deobfuscators.Eazfuscator_NET,AssemblyResolver,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\AssemblyResolver.cs,CreateDecryptKey,The following statement contains a magic number: data[3] = (byte)(magic >> 48);
Magic Number,de4dot.code.deobfuscators.Eazfuscator_NET,AssemblyResolver,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\AssemblyResolver.cs,CreateDecryptKey,The following statement contains a magic number: data[2] = (byte)(magic >> 56);
Magic Number,de4dot.code.deobfuscators.Eazfuscator_NET,AssemblyResolver,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\AssemblyResolver.cs,CreateDecryptKey,The following statement contains a magic number: data[2] = (byte)(magic >> 56);
Magic Number,de4dot.code.deobfuscators.Eazfuscator_NET,AssemblyResolver,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\AssemblyResolver.cs,CreateAssemblyInfos,The following statement contains a magic number: int numElements = DeobUtils.HasInteger(handlerMethod' 3) ? 3 : 2;
Magic Number,de4dot.code.deobfuscators.Eazfuscator_NET,AssemblyResolver,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\AssemblyResolver.cs,CreateAssemblyInfos,The following statement contains a magic number: int numElements = DeobUtils.HasInteger(handlerMethod' 3) ? 3 : 2;
Magic Number,de4dot.code.deobfuscators.Eazfuscator_NET,AssemblyResolver,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\AssemblyResolver.cs,CreateAssemblyInfos,The following statement contains a magic number: int numElements = DeobUtils.HasInteger(handlerMethod' 3) ? 3 : 2;
Magic Number,de4dot.code.deobfuscators.Eazfuscator_NET,AssemblyResolver,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\AssemblyResolver.cs,TryCreateAssemblyInfos,The following statement contains a magic number: info.Filename = Encoding.UTF8.GetString(Convert.FromBase64String(ary[i + 2]));
Magic Number,de4dot.code.deobfuscators.Eazfuscator_NET,AssemblyResolver,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\AssemblyResolver.cs,TryCreateAssemblyInfos,The following statement contains a magic number: numElements >= 3
Magic Number,de4dot.code.deobfuscators.Eazfuscator_NET,AssemblyResolver,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\AssemblyResolver.cs,Decrypt,The following statement contains a magic number: var indexes = new byte[256];
Magic Number,de4dot.code.deobfuscators.Eazfuscator_NET,AssemblyResolver,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\AssemblyResolver.cs,Decrypt,The following statement contains a magic number: encryptedData[i] ^= (byte)(val ^ key2[(i >> 2) & 3] ^ key2[(i + 1) & 3]);
Magic Number,de4dot.code.deobfuscators.Eazfuscator_NET,AssemblyResolver,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\AssemblyResolver.cs,Decrypt,The following statement contains a magic number: encryptedData[i] ^= (byte)(val ^ key2[(i >> 2) & 3] ^ key2[(i + 1) & 3]);
Magic Number,de4dot.code.deobfuscators.Eazfuscator_NET,AssemblyResolver,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\AssemblyResolver.cs,Decrypt,The following statement contains a magic number: encryptedData[i] ^= (byte)(val ^ key2[(i >> 2) & 3] ^ key2[(i + 1) & 3]);
Magic Number,de4dot.code.deobfuscators.Eazfuscator_NET,AssemblyResolver,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\AssemblyResolver.cs,Decompress,The following statement contains a magic number: return DeobUtils.Inflate(compressedData' 8' compressedData.Length - 8' true);
Magic Number,de4dot.code.deobfuscators.Eazfuscator_NET,AssemblyResolver,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\AssemblyResolver.cs,Decompress,The following statement contains a magic number: return DeobUtils.Inflate(compressedData' 8' compressedData.Length - 8' true);
Magic Number,de4dot.code.deobfuscators.Eazfuscator_NET,DecrypterType,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\DecrypterType.cs,InitializeEfConstMethods,The following statement contains a magic number: efConstMethods = new MethodDef[6];
Magic Number,de4dot.code.deobfuscators.Eazfuscator_NET,DecrypterType,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\DecrypterType.cs,InitializeEfConstMethods,The following statement contains a magic number: efConstMethods[5] = FindEfConstMethodCall(efConstMethods[0]);
Magic Number,de4dot.code.deobfuscators.Eazfuscator_NET,DecrypterType,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\DecrypterType.cs,InitializeEfConstMethods,The following statement contains a magic number: efConstMethods[4] = FindEfConstMethodCall(efConstMethods[5]);
Magic Number,de4dot.code.deobfuscators.Eazfuscator_NET,DecrypterType,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\DecrypterType.cs,InitializeEfConstMethods,The following statement contains a magic number: efConstMethods[4] = FindEfConstMethodCall(efConstMethods[5]);
Magic Number,de4dot.code.deobfuscators.Eazfuscator_NET,DecrypterType,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\DecrypterType.cs,InitializeEfConstMethods,The following statement contains a magic number: var calls = FindEfConstMethodCalls(efConstMethods[4]);
Magic Number,de4dot.code.deobfuscators.Eazfuscator_NET,DecrypterType,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\DecrypterType.cs,InitializeEfConstMethods,The following statement contains a magic number: calls.Count != 2
Magic Number,de4dot.code.deobfuscators.Eazfuscator_NET,DecrypterType,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\DecrypterType.cs,InitializeEfConstMethods,The following statement contains a magic number: efConstMethods[2] = calls[0];
Magic Number,de4dot.code.deobfuscators.Eazfuscator_NET,DecrypterType,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\DecrypterType.cs,InitializeEfConstMethods,The following statement contains a magic number: GetNumberOfTypeofs(calls[0]) == 3
Magic Number,de4dot.code.deobfuscators.Eazfuscator_NET,DecrypterType,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\DecrypterType.cs,InitializeEfConstMethods,The following statement contains a magic number: efConstMethods[3] = FindEfConstMethodCall(efConstMethods[1]);
Magic Number,de4dot.code.deobfuscators.Eazfuscator_NET,DecrypterType,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\DecrypterType.cs,FindInt1And2,The following statement contains a magic number: var consts = GetConstants(efConstMethods[2]);
Magic Number,de4dot.code.deobfuscators.Eazfuscator_NET,DecrypterType,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\DecrypterType.cs,FindInt1And2,The following statement contains a magic number: consts.Count != 2
Magic Number,de4dot.code.deobfuscators.Eazfuscator_NET,DecrypterType,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\DecrypterType.cs,FindInt3,The following statement contains a magic number: var consts = GetConstants(efConstMethods[5]);
Magic Number,de4dot.code.deobfuscators.Eazfuscator_NET,DecrypterType,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\DecrypterType.cs,FindMethodInts,The following statement contains a magic number: methods.Count < 3
Magic Number,de4dot.code.deobfuscators.Eazfuscator_NET,DecrypterType,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\DecrypterType.cs,FindMethod2Int,The following statement contains a magic number: constants.Count != 2
Magic Number,de4dot.code.deobfuscators.Eazfuscator_NET,DecrypterType,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\DecrypterType.cs,FindMethod3Int,The following statement contains a magic number: CountInstructions(method' Code.Ldarg_0) != 2
Magic Number,de4dot.code.deobfuscators.Eazfuscator_NET,DecrypterType,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\DecrypterType.cs,GetMagic,The following statement contains a magic number: bytes.Add((byte)(num2 >> shiftConsts[2]));
Magic Number,de4dot.code.deobfuscators.Eazfuscator_NET,DecrypterType,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\DecrypterType.cs,GetMagic,The following statement contains a magic number: bytes.Add((byte)(num3 >> shiftConsts[3]));
Magic Number,de4dot.code.deobfuscators.Eazfuscator_NET,DecrypterType,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\DecrypterType.cs,GetMagic,The following statement contains a magic number: bytes.Add((byte)(num2 >> shiftConsts[4]));
Magic Number,de4dot.code.deobfuscators.Eazfuscator_NET,DecrypterType,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\DecrypterType.cs,GetMagic,The following statement contains a magic number: bytes.Add((byte)(num3 >> shiftConsts[5]));
Magic Number,de4dot.code.deobfuscators.Eazfuscator_NET,DecrypterType,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\DecrypterType.cs,GetMagic,The following statement contains a magic number: bytes.Add((byte)(num2 >> shiftConsts[6]));
Magic Number,de4dot.code.deobfuscators.Eazfuscator_NET,DecrypterType,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\DecrypterType.cs,GetMagic,The following statement contains a magic number: bytes.Add((byte)(num3 >> shiftConsts[7]));
Magic Number,de4dot.code.deobfuscators.Eazfuscator_NET,DecrypterType,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\DecrypterType.cs,GetMagic,The following statement contains a magic number: magic += magic << 20;
Magic Number,de4dot.code.deobfuscators.Eazfuscator_NET,DecrypterType,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\DecrypterType.cs,GetMagic,The following statement contains a magic number: magic ^= magic >> 12;
Magic Number,de4dot.code.deobfuscators.Eazfuscator_NET,DecrypterType,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\DecrypterType.cs,GetMagic,The following statement contains a magic number: magic += magic << 6;
Magic Number,de4dot.code.deobfuscators.Eazfuscator_NET,DecrypterType,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\DecrypterType.cs,GetMagic,The following statement contains a magic number: magic ^= magic >> 22;
Magic Number,de4dot.code.deobfuscators.Eazfuscator_NET,DecrypterType,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\DecrypterType.cs,GetMagic,The following statement contains a magic number: magic += magic << 30;
Magic Number,de4dot.code.deobfuscators.Eazfuscator_NET,Deobfuscator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\Deobfuscator.cs,DetectInternal,The following statement contains a magic number: val += 100 + 10 * (sum - 1);
Magic Number,de4dot.code.deobfuscators.Eazfuscator_NET,Deobfuscator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\Deobfuscator.cs,DetectInternal,The following statement contains a magic number: val += 100 + 10 * (sum - 1);
Magic Number,de4dot.code.deobfuscators.Eazfuscator_NET,Deobfuscator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\Deobfuscator.cs,DetectInternal,The following statement contains a magic number: val += 10;
Magic Number,de4dot.code.deobfuscators.Eazfuscator_NET,EfConstantsReader,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\EfConstantsReader.cs,FindConstants,The following statement contains a magic number: localsValuesInt32.Count != 2
Magic Number,de4dot.code.deobfuscators.Eazfuscator_NET,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\StringDecrypter.cs,CheckIfV32OrLater,The following statement contains a magic number: return numInts >= 2;
Magic Number,de4dot.code.deobfuscators.Eazfuscator_NET,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\StringDecrypter.cs,FindConstants,The following statement contains a magic number: checkMinus2 = isV32OrLater || DeobUtils.HasInteger(stringMethod' -2);
Magic Number,de4dot.code.deobfuscators.Eazfuscator_NET,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\StringDecrypter.cs,FindConstants,The following statement contains a magic number: decrypterType.ShiftConsts = new List<int> { 24' 16' 8' 0' 16' 8' 0' 24 };
Magic Number,de4dot.code.deobfuscators.Eazfuscator_NET,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\StringDecrypter.cs,FindConstants,The following statement contains a magic number: decrypterType.ShiftConsts = new List<int> { 24' 16' 8' 0' 16' 8' 0' 24 };
Magic Number,de4dot.code.deobfuscators.Eazfuscator_NET,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\StringDecrypter.cs,FindConstants,The following statement contains a magic number: decrypterType.ShiftConsts = new List<int> { 24' 16' 8' 0' 16' 8' 0' 24 };
Magic Number,de4dot.code.deobfuscators.Eazfuscator_NET,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\StringDecrypter.cs,FindConstants,The following statement contains a magic number: decrypterType.ShiftConsts = new List<int> { 24' 16' 8' 0' 16' 8' 0' 24 };
Magic Number,de4dot.code.deobfuscators.Eazfuscator_NET,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\StringDecrypter.cs,FindConstants,The following statement contains a magic number: decrypterType.ShiftConsts = new List<int> { 24' 16' 8' 0' 16' 8' 0' 24 };
Magic Number,de4dot.code.deobfuscators.Eazfuscator_NET,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\StringDecrypter.cs,FindConstants,The following statement contains a magic number: decrypterType.ShiftConsts = new List<int> { 24' 16' 8' 0' 16' 8' 0' 24 };
Magic Number,de4dot.code.deobfuscators.Eazfuscator_NET,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\StringDecrypter.cs,FindFlags2,The following statement contains a magic number: var flags = new List<FlagsInfo>(3);
Magic Number,de4dot.code.deobfuscators.Eazfuscator_NET,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\StringDecrypter.cs,FindFlags2,The following statement contains a magic number: flags.Count != 3
Magic Number,de4dot.code.deobfuscators.Eazfuscator_NET,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\StringDecrypter.cs,GetFlagsLocalOld,The following statement contains a magic number: index + 5 >= instrs.Count
Magic Number,de4dot.code.deobfuscators.Eazfuscator_NET,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\StringDecrypter.cs,GetFlagsLocalNew,The following statement contains a magic number: index + 5 >= instrs.Count
Magic Number,de4dot.code.deobfuscators.Eazfuscator_NET,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\StringDecrypter.cs,Decrypt,The following statement contains a magic number: tmpKey[i] ^= (byte)(magic1 >> ((i & 3) << 3));
Magic Number,de4dot.code.deobfuscators.Eazfuscator_NET,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\StringDecrypter.cs,Decrypt,The following statement contains a magic number: tmpKey[i] ^= (byte)(magic1 >> ((i & 3) << 3));
Magic Number,de4dot.code.deobfuscators.Eazfuscator_NET,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\StringDecrypter.cs,Decrypt,The following statement contains a magic number: var ary2 = reader.ReadBytes(4);
Magic Number,de4dot.code.deobfuscators.Eazfuscator_NET,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\StringDecrypter.cs,Decrypt,The following statement contains a magic number: val = -(magic1 ^ i5) ^ (ary2[2] | (ary2[0] << 8) | (ary2[3] << 16) | (ary2[1] << 24));
Magic Number,de4dot.code.deobfuscators.Eazfuscator_NET,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\StringDecrypter.cs,Decrypt,The following statement contains a magic number: val = -(magic1 ^ i5) ^ (ary2[2] | (ary2[0] << 8) | (ary2[3] << 16) | (ary2[1] << 24));
Magic Number,de4dot.code.deobfuscators.Eazfuscator_NET,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\StringDecrypter.cs,Decrypt,The following statement contains a magic number: val = -(magic1 ^ i5) ^ (ary2[2] | (ary2[0] << 8) | (ary2[3] << 16) | (ary2[1] << 24));
Magic Number,de4dot.code.deobfuscators.Eazfuscator_NET,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\StringDecrypter.cs,Decrypt,The following statement contains a magic number: val = -(magic1 ^ i5) ^ (ary2[2] | (ary2[0] << 8) | (ary2[3] << 16) | (ary2[1] << 24));
Magic Number,de4dot.code.deobfuscators.Eazfuscator_NET,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\StringDecrypter.cs,Decrypt,The following statement contains a magic number: val = -(magic1 ^ i5) ^ (ary2[2] | (ary2[0] << 8) | (ary2[3] << 16) | (ary2[1] << 24));
Magic Number,de4dot.code.deobfuscators.Eazfuscator_NET,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\StringDecrypter.cs,Decrypt,The following statement contains a magic number: checkMinus2 && flags == -2
Magic Number,de4dot.code.deobfuscators.Eazfuscator_NET,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\StringDecrypter.cs,Decrypt,The following statement contains a magic number: bytes[i] ^= (byte)((pkt.Data[i & 7] >> 5) + (pkt.Data[i & 7] << 3));
Magic Number,de4dot.code.deobfuscators.Eazfuscator_NET,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\StringDecrypter.cs,Decrypt,The following statement contains a magic number: bytes[i] ^= (byte)((pkt.Data[i & 7] >> 5) + (pkt.Data[i & 7] << 3));
Magic Number,de4dot.code.deobfuscators.Eazfuscator_NET,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\StringDecrypter.cs,Decrypt,The following statement contains a magic number: bytes[i] ^= (byte)((pkt.Data[i & 7] >> 5) + (pkt.Data[i & 7] << 3));
Magic Number,de4dot.code.deobfuscators.Eazfuscator_NET,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\StringDecrypter.cs,Decrypt,The following statement contains a magic number: bytes[i] ^= (byte)((pkt.Data[i & 7] >> 5) + (pkt.Data[i & 7] << 3));
Magic Number,de4dot.code.deobfuscators.Eazfuscator_NET,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\StringDecrypter.cs,rld,The following statement contains a magic number: var dst = new byte[src[2] + (src[3] << 8) + (src[0] << 16) + (src[1] << 24)];
Magic Number,de4dot.code.deobfuscators.Eazfuscator_NET,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\StringDecrypter.cs,rld,The following statement contains a magic number: var dst = new byte[src[2] + (src[3] << 8) + (src[0] << 16) + (src[1] << 24)];
Magic Number,de4dot.code.deobfuscators.Eazfuscator_NET,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\StringDecrypter.cs,rld,The following statement contains a magic number: var dst = new byte[src[2] + (src[3] << 8) + (src[0] << 16) + (src[1] << 24)];
Magic Number,de4dot.code.deobfuscators.Eazfuscator_NET,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\StringDecrypter.cs,rld,The following statement contains a magic number: var dst = new byte[src[2] + (src[3] << 8) + (src[0] << 16) + (src[1] << 24)];
Magic Number,de4dot.code.deobfuscators.Eazfuscator_NET,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\StringDecrypter.cs,rld,The following statement contains a magic number: var dst = new byte[src[2] + (src[3] << 8) + (src[0] << 16) + (src[1] << 24)];
Magic Number,de4dot.code.deobfuscators.Eazfuscator_NET,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\StringDecrypter.cs,rld,The following statement contains a magic number: int srcIndex = 4;
Magic Number,de4dot.code.deobfuscators.Eazfuscator_NET,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\StringDecrypter.cs,rld,The following statement contains a magic number: int bit = 128;
Magic Number,de4dot.code.deobfuscators.Eazfuscator_NET,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\StringDecrypter.cs,rld,The following statement contains a magic number: bit == 256
Magic Number,de4dot.code.deobfuscators.Eazfuscator_NET,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\StringDecrypter.cs,rld,The following statement contains a magic number: int numBytes = (src[srcIndex] >> 2) + 3;
Magic Number,de4dot.code.deobfuscators.Eazfuscator_NET,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\StringDecrypter.cs,rld,The following statement contains a magic number: int numBytes = (src[srcIndex] >> 2) + 3;
Magic Number,de4dot.code.deobfuscators.Eazfuscator_NET,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\StringDecrypter.cs,rld,The following statement contains a magic number: int copyIndex = dstIndex - ((src[srcIndex + 1] + (src[srcIndex] << 8)) & 0x3FF);
Magic Number,de4dot.code.deobfuscators.Eazfuscator_NET,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\StringDecrypter.cs,rld,The following statement contains a magic number: srcIndex += 2;
Magic Number,de4dot.code.deobfuscators.Eazfuscator_NET,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\StringDecrypter.cs,Decrypt1,The following statement contains a magic number: byte b = (byte)((key[1] + 7) ^ (dest.Length + 11));
Magic Number,de4dot.code.deobfuscators.Eazfuscator_NET,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\StringDecrypter.cs,Decrypt1,The following statement contains a magic number: byte b = (byte)((key[1] + 7) ^ (dest.Length + 11));
Magic Number,de4dot.code.deobfuscators.Eazfuscator_NET,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\StringDecrypter.cs,Decrypt1,The following statement contains a magic number: uint lcg = (uint)((key[0] | (key[2] << 8)) + (b << 3));
Magic Number,de4dot.code.deobfuscators.Eazfuscator_NET,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\StringDecrypter.cs,Decrypt1,The following statement contains a magic number: uint lcg = (uint)((key[0] | (key[2] << 8)) + (b << 3));
Magic Number,de4dot.code.deobfuscators.Eazfuscator_NET,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\StringDecrypter.cs,Decrypt1,The following statement contains a magic number: uint lcg = (uint)((key[0] | (key[2] << 8)) + (b << 3));
Magic Number,de4dot.code.deobfuscators.Eazfuscator_NET,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\StringDecrypter.cs,Decrypt1,The following statement contains a magic number: b += 3;
Magic Number,de4dot.code.deobfuscators.Eazfuscator_NET,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\StringDecrypter.cs,Decrypt1,The following statement contains a magic number: xn = (ushort)(lcg >> 16);
Magic Number,de4dot.code.deobfuscators.Eazfuscator_NET,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\StringDecrypter.cs,Decrypt1,The following statement contains a magic number: b = (byte)(tmp + 3);
Magic Number,de4dot.code.deobfuscators.Eazfuscator_NET,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\StringDecrypter.cs,Decrypt1,The following statement contains a magic number: xn >>= 8;
Magic Number,de4dot.code.deobfuscators.Eazfuscator_NET,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\StringDecrypter.cs,FindShiftInts,The following statement contains a magic number: bytes = new List<int>(8);
Magic Number,de4dot.code.deobfuscators.Eazfuscator_NET,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\StringDecrypter.cs,FindShiftInts,The following statement contains a magic number: bytes.Count >= 8
Magic Number,de4dot.code.deobfuscators.Eazfuscator_NET,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\StringDecrypter.cs,FindShiftInts,The following statement contains a magic number: var maybe = instrs[i + 2];
Magic Number,de4dot.code.deobfuscators.Eazfuscator_NET,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\StringDecrypter.cs,FindShiftInts,The following statement contains a magic number: var callvirt = instrs[i + 3];
Magic Number,de4dot.code.deobfuscators.Eazfuscator_NET,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\StringDecrypter.cs,FindShiftInts,The following statement contains a magic number: var shr = instrs[i + 3];
Magic Number,de4dot.code.deobfuscators.Eazfuscator_NET,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\StringDecrypter.cs,FindShiftInts,The following statement contains a magic number: var convu1 = instrs[i + 4];
Magic Number,de4dot.code.deobfuscators.Eazfuscator_NET,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\StringDecrypter.cs,FindShiftInts,The following statement contains a magic number: int index = i + 2;
Magic Number,de4dot.code.deobfuscators.Eazfuscator_NET,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\StringDecrypter.cs,FindShiftInts,The following statement contains a magic number: i < instrs.Count - 4
Magic Number,de4dot.code.deobfuscators.Eazfuscator_NET,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\StringDecrypter.cs,FindInts,The following statement contains a magic number: i < instrs.Count - 2
Magic Number,de4dot.code.deobfuscators.Eazfuscator_NET,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\StringDecrypter.cs,EmulateDynocodeOld,The following statement contains a magic number: index + 4 >= instrs.Count
Magic Number,de4dot.code.deobfuscators.Eazfuscator_NET,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\StringDecrypter.cs,EmulateDynocodeOld,The following statement contains a magic number: var ldloc = instrs[index + 3];
Magic Number,de4dot.code.deobfuscators.Eazfuscator_NET,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\StringDecrypter.cs,EmulateDynocodeOld,The following statement contains a magic number: var stfld = instrs[index + 4];
Magic Number,de4dot.code.deobfuscators.Eazfuscator_NET,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\StringDecrypter.cs,EmulateDynocodeNew,The following statement contains a magic number: index + 4 >= instrs.Count
Magic Number,de4dot.code.deobfuscators.Eazfuscator_NET,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\StringDecrypter.cs,EmulateDynocodeNew,The following statement contains a magic number: var ldloc = instrs[index + 2];
Magic Number,de4dot.code.deobfuscators.Eazfuscator_NET,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\StringDecrypter.cs,EmulateDynocodeNew,The following statement contains a magic number: var stfld = instrs[index + 3];
Magic Number,de4dot.code.deobfuscators.Eazfuscator_NET,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\StringDecrypter.cs,FindInitIntsIndex,The following statement contains a magic number: var instr = instrs[i + 2];
Magic Number,de4dot.code.deobfuscators.Eazfuscator_NET,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\StringDecrypter.cs,FindInitIntsIndex,The following statement contains a magic number: return i + 2;
Magic Number,de4dot.code.deobfuscators.Eazfuscator_NET,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\StringDecrypter.cs,FindInt3Old,The following statement contains a magic number: i < instrs.Count - 4
Magic Number,de4dot.code.deobfuscators.Eazfuscator_NET,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\StringDecrypter.cs,FindInt3New,The following statement contains a magic number: index + 3 >= instrs.Count
Magic Number,de4dot.code.deobfuscators.Eazfuscator_NET,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\StringDecrypter.cs,FindInt5,The following statement contains a magic number: ldci4.GetLdcI4Value() != 4
Magic Number,de4dot.code.deobfuscators.Eazfuscator_NET,VersionDetector,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\VersionDetector.cs,Detect,The following statement contains a magic number: bool hasConstantM2 = DeobUtils.HasInteger(decryptStringMethod' -2);
Magic Number,de4dot.code.deobfuscators.Eazfuscator_NET,VersionDetector,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\VersionDetector.cs,Detect,The following statement contains a magic number: otherMethods.Count == 0 &&  				decryptStringType.NestedTypes.Count == 0 &&  				!hasConstantM2 &&  				!decryptStringMethod.IsNoInlining &&  				decryptStringMethod.IsPublic &&  				decryptStringMethod.IsSynchronized &&  				decryptStringMethod.Body.MaxStack >= 35 &&  				decryptStringMethod.Body.MaxStack <= 50 &&  				decryptStringMethod.Body.ExceptionHandlers.Count == 0 &&  				new LocalTypes(decryptStringMethod).Exactly(locals11) &&  				CheckTypeFields(fields11)
Magic Number,de4dot.code.deobfuscators.Eazfuscator_NET,VersionDetector,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\VersionDetector.cs,Detect,The following statement contains a magic number: otherMethods.Count == 0 &&  				decryptStringType.NestedTypes.Count == 0 &&  				!hasConstantM2 &&  				!decryptStringMethod.IsNoInlining &&  				decryptStringMethod.IsPublic &&  				decryptStringMethod.IsSynchronized &&  				decryptStringMethod.Body.MaxStack >= 35 &&  				decryptStringMethod.Body.MaxStack <= 50 &&  				decryptStringMethod.Body.ExceptionHandlers.Count == 0 &&  				new LocalTypes(decryptStringMethod).Exactly(locals11) &&  				CheckTypeFields(fields11)
Magic Number,de4dot.code.deobfuscators.Eazfuscator_NET,VersionDetector,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\VersionDetector.cs,Detect,The following statement contains a magic number: otherMethods.Count == 0 &&  				decryptStringType.NestedTypes.Count == 0 &&  				!hasConstantM2 &&  				!decryptStringMethod.IsNoInlining &&  				decryptStringMethod.IsPublic &&  				decryptStringMethod.IsSynchronized &&  				decryptStringMethod.Body.MaxStack >= 35 &&  				decryptStringMethod.Body.MaxStack <= 50 &&  				decryptStringMethod.Body.ExceptionHandlers.Count == 0 &&  				new LocalTypes(decryptStringMethod).Exactly(locals13) &&  				CheckTypeFields(fields13)
Magic Number,de4dot.code.deobfuscators.Eazfuscator_NET,VersionDetector,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\VersionDetector.cs,Detect,The following statement contains a magic number: otherMethods.Count == 0 &&  				decryptStringType.NestedTypes.Count == 0 &&  				!hasConstantM2 &&  				!decryptStringMethod.IsNoInlining &&  				decryptStringMethod.IsPublic &&  				decryptStringMethod.IsSynchronized &&  				decryptStringMethod.Body.MaxStack >= 35 &&  				decryptStringMethod.Body.MaxStack <= 50 &&  				decryptStringMethod.Body.ExceptionHandlers.Count == 0 &&  				new LocalTypes(decryptStringMethod).Exactly(locals13) &&  				CheckTypeFields(fields13)
Magic Number,de4dot.code.deobfuscators.Eazfuscator_NET,VersionDetector,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\VersionDetector.cs,Detect,The following statement contains a magic number: otherMethods.Count == 0 &&  				decryptStringType.NestedTypes.Count == 0 &&  				!hasConstantM2 &&  				!decryptStringMethod.IsNoInlining &&  				decryptStringMethod.IsPublic &&  				decryptStringMethod.IsSynchronized &&  				decryptStringMethod.Body.MaxStack >= 150 &&  				decryptStringMethod.Body.MaxStack <= 200 &&  				decryptStringMethod.Body.ExceptionHandlers.Count == 0 &&  				new LocalTypes(decryptStringMethod).Exactly(locals14) &&  				CheckTypeFields(fields14)
Magic Number,de4dot.code.deobfuscators.Eazfuscator_NET,VersionDetector,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\VersionDetector.cs,Detect,The following statement contains a magic number: otherMethods.Count == 0 &&  				decryptStringType.NestedTypes.Count == 0 &&  				!hasConstantM2 &&  				!decryptStringMethod.IsNoInlining &&  				decryptStringMethod.IsPublic &&  				decryptStringMethod.IsSynchronized &&  				decryptStringMethod.Body.MaxStack >= 150 &&  				decryptStringMethod.Body.MaxStack <= 200 &&  				decryptStringMethod.Body.ExceptionHandlers.Count == 0 &&  				new LocalTypes(decryptStringMethod).Exactly(locals14) &&  				CheckTypeFields(fields14)
Magic Number,de4dot.code.deobfuscators.Eazfuscator_NET,VersionDetector,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\VersionDetector.cs,Detect,The following statement contains a magic number: otherMethods.Count == 0 &&  				decryptStringType.NestedTypes.Count == 0 &&  				!hasConstantM2 &&  				!decryptStringMethod.IsNoInlining &&  				decryptStringMethod.IsPublic &&  				decryptStringMethod.IsSynchronized &&  				decryptStringMethod.Body.MaxStack >= 1 &&  				decryptStringMethod.Body.MaxStack <= 8 &&  				decryptStringMethod.Body.ExceptionHandlers.Count == 0 &&  				new LocalTypes(decryptStringMethod).Exactly(locals24) &&  				CheckTypeFields(fields24)
Magic Number,de4dot.code.deobfuscators.Eazfuscator_NET,VersionDetector,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\VersionDetector.cs,Detect,The following statement contains a magic number: otherMethods.Count == 0 &&  				decryptStringType.NestedTypes.Count == 0 &&  				!hasConstantM2 &&  				!decryptStringMethod.IsNoInlining &&  				decryptStringMethod.IsPublic &&  				!decryptStringMethod.IsSynchronized &&  				decryptStringMethod.Body.MaxStack >= 1 &&  				decryptStringMethod.Body.MaxStack <= 8 &&  				decryptStringMethod.Body.ExceptionHandlers.Count == 1 &&  				new LocalTypes(decryptStringMethod).Exactly(locals26) &&  				CheckTypeFields(fields26)
Magic Number,de4dot.code.deobfuscators.Eazfuscator_NET,VersionDetector,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\VersionDetector.cs,Detect,The following statement contains a magic number: otherMethods.Count == 0 &&  				decryptStringType.NestedTypes.Count == 0 &&  				!hasConstantM2 &&  				decryptStringMethod.IsNoInlining &&  				decryptStringMethod.IsPublic &&  				!decryptStringMethod.IsSynchronized &&  				decryptStringMethod.Body.MaxStack >= 1 &&  				decryptStringMethod.Body.MaxStack <= 8 &&  				decryptStringMethod.Body.ExceptionHandlers.Count == 1 &&  				new LocalTypes(decryptStringMethod).Exactly(locals27) &&  				CheckTypeFields(fields27)
Magic Number,de4dot.code.deobfuscators.Eazfuscator_NET,VersionDetector,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\VersionDetector.cs,Detect,The following statement contains a magic number: otherMethods.Count == 0 &&  				decryptStringType.NestedTypes.Count == 0 &&  				!hasConstantM2 &&  				decryptStringMethod.IsNoInlining &&  				decryptStringMethod.IsAssembly &&  				!decryptStringMethod.IsSynchronized &&  				decryptStringMethod.Body.MaxStack >= 1 &&  				decryptStringMethod.Body.MaxStack <= 8 &&  				decryptStringMethod.Body.ExceptionHandlers.Count == 1 &&  				new LocalTypes(decryptStringMethod).Exactly(locals28) &&  				CheckTypeFields(fields28)
Magic Number,de4dot.code.deobfuscators.Eazfuscator_NET,VersionDetector,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\VersionDetector.cs,Detect,The following statement contains a magic number: otherMethods.Count == 0 &&  				decryptStringType.NestedTypes.Count == 0 &&  				!hasConstantM2 &&  				decryptStringMethod.IsNoInlining &&  				decryptStringMethod.IsAssembly &&  				!decryptStringMethod.IsSynchronized &&  				decryptStringMethod.Body.MaxStack >= 1 &&  				decryptStringMethod.Body.MaxStack <= 8 &&  				(decryptStringMethod.Body.ExceptionHandlers.Count == 1 || decryptStringMethod.Body.ExceptionHandlers.Count == 2) &&  				new LocalTypes(decryptStringMethod).Exactly(locals29) &&  				CheckTypeFields(fields29)
Magic Number,de4dot.code.deobfuscators.Eazfuscator_NET,VersionDetector,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\VersionDetector.cs,Detect,The following statement contains a magic number: otherMethods.Count == 0 &&  				decryptStringType.NestedTypes.Count == 0 &&  				!hasConstantM2 &&  				decryptStringMethod.IsNoInlining &&  				decryptStringMethod.IsAssembly &&  				!decryptStringMethod.IsSynchronized &&  				decryptStringMethod.Body.MaxStack >= 1 &&  				decryptStringMethod.Body.MaxStack <= 8 &&  				(decryptStringMethod.Body.ExceptionHandlers.Count == 1 || decryptStringMethod.Body.ExceptionHandlers.Count == 2) &&  				new LocalTypes(decryptStringMethod).Exactly(locals29) &&  				CheckTypeFields(fields29)
Magic Number,de4dot.code.deobfuscators.Eazfuscator_NET,VersionDetector,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\VersionDetector.cs,Detect,The following statement contains a magic number: otherMethods.Count == 1 &&  				decryptStringType.NestedTypes.Count == 0 &&  				DotNetUtils.IsMethod(otherMethods[0]' "System.Int32"' "(System.Byte[]'System.Int32'System.Byte[])") &&  				otherMethods[0].IsPrivate &&  				otherMethods[0].IsStatic &&  				new LocalTypes(otherMethods[0]).Exactly(olocals30) &&  				!hasConstantM2 &&  				decryptStringMethod.IsNoInlining &&  				decryptStringMethod.IsAssembly &&  				!decryptStringMethod.IsSynchronized &&  				decryptStringMethod.Body.MaxStack >= 1 &&  				decryptStringMethod.Body.MaxStack <= 8 &&  				(decryptStringMethod.Body.ExceptionHandlers.Count == 1 || decryptStringMethod.Body.ExceptionHandlers.Count == 2) &&  				new LocalTypes(decryptStringMethod).Exactly(locals30) &&  				CheckTypeFields(fields30)
Magic Number,de4dot.code.deobfuscators.Eazfuscator_NET,VersionDetector,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\VersionDetector.cs,Detect,The following statement contains a magic number: otherMethods.Count == 1 &&  				decryptStringType.NestedTypes.Count == 0 &&  				DotNetUtils.IsMethod(otherMethods[0]' "System.Int32"' "(System.Byte[]'System.Int32'System.Byte[])") &&  				otherMethods[0].IsPrivate &&  				otherMethods[0].IsStatic &&  				new LocalTypes(otherMethods[0]).Exactly(olocals30) &&  				!hasConstantM2 &&  				decryptStringMethod.IsNoInlining &&  				decryptStringMethod.IsAssembly &&  				!decryptStringMethod.IsSynchronized &&  				decryptStringMethod.Body.MaxStack >= 1 &&  				decryptStringMethod.Body.MaxStack <= 8 &&  				(decryptStringMethod.Body.ExceptionHandlers.Count == 1 || decryptStringMethod.Body.ExceptionHandlers.Count == 2) &&  				new LocalTypes(decryptStringMethod).Exactly(locals30) &&  				CheckTypeFields(fields30)
Magic Number,de4dot.code.deobfuscators.Eazfuscator_NET,VersionDetector,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\VersionDetector.cs,Detect,The following statement contains a magic number: otherMethods.Count == 1 &&  				decryptStringType.NestedTypes.Count == 0 &&  				DotNetUtils.IsMethod(otherMethods[0]' "System.Int32"' "(System.Byte[]'System.Int32'System.Byte[])") &&  				otherMethods[0].IsPrivate &&  				otherMethods[0].IsStatic &&  				new LocalTypes(otherMethods[0]).Exactly(olocals31) &&  				hasConstantM2 &&  				decryptStringMethod.IsNoInlining &&  				decryptStringMethod.IsAssembly &&  				!decryptStringMethod.IsSynchronized &&  				decryptStringMethod.Body.MaxStack >= 1 &&  				decryptStringMethod.Body.MaxStack <= 8 &&  				(decryptStringMethod.Body.ExceptionHandlers.Count == 1 || decryptStringMethod.Body.ExceptionHandlers.Count == 2) &&  				new LocalTypes(decryptStringMethod).Exactly(locals31) &&  				CheckTypeFields(fields31)
Magic Number,de4dot.code.deobfuscators.Eazfuscator_NET,VersionDetector,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\VersionDetector.cs,Detect,The following statement contains a magic number: otherMethods.Count == 1 &&  				decryptStringType.NestedTypes.Count == 0 &&  				DotNetUtils.IsMethod(otherMethods[0]' "System.Int32"' "(System.Byte[]'System.Int32'System.Byte[])") &&  				otherMethods[0].IsPrivate &&  				otherMethods[0].IsStatic &&  				new LocalTypes(otherMethods[0]).Exactly(olocals31) &&  				hasConstantM2 &&  				decryptStringMethod.IsNoInlining &&  				decryptStringMethod.IsAssembly &&  				!decryptStringMethod.IsSynchronized &&  				decryptStringMethod.Body.MaxStack >= 1 &&  				decryptStringMethod.Body.MaxStack <= 8 &&  				(decryptStringMethod.Body.ExceptionHandlers.Count == 1 || decryptStringMethod.Body.ExceptionHandlers.Count == 2) &&  				new LocalTypes(decryptStringMethod).Exactly(locals31) &&  				CheckTypeFields(fields31)
Magic Number,de4dot.code.deobfuscators.Eazfuscator_NET,VersionDetector,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\VersionDetector.cs,Detect,The following statement contains a magic number: otherMethods.Count == 1 &&  				decryptStringType.NestedTypes.Count == 0 &&  				DotNetUtils.IsMethod(otherMethods[0]' "System.Void"' "(System.Byte[]'System.Int32'System.Byte[])") &&  				otherMethods[0].IsPrivate &&  				otherMethods[0].IsStatic &&  				new LocalTypes(otherMethods[0]).Exactly(olocals32) &&  				hasConstantM2 &&  				decryptStringMethod.IsNoInlining &&  				decryptStringMethod.IsAssembly &&  				!decryptStringMethod.IsSynchronized &&  				decryptStringMethod.Body.MaxStack >= 1 &&  				decryptStringMethod.Body.MaxStack <= 8 &&  				(decryptStringMethod.Body.ExceptionHandlers.Count == 1 || decryptStringMethod.Body.ExceptionHandlers.Count == 2) &&  				new LocalTypes(decryptStringMethod).Exactly(locals32) &&  				CheckTypeFields(fields32)
Magic Number,de4dot.code.deobfuscators.Eazfuscator_NET,VersionDetector,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\VersionDetector.cs,Detect,The following statement contains a magic number: otherMethods.Count == 1 &&  				decryptStringType.NestedTypes.Count == 0 &&  				DotNetUtils.IsMethod(otherMethods[0]' "System.Void"' "(System.Byte[]'System.Int32'System.Byte[])") &&  				otherMethods[0].IsPrivate &&  				otherMethods[0].IsStatic &&  				new LocalTypes(otherMethods[0]).Exactly(olocals32) &&  				hasConstantM2 &&  				decryptStringMethod.IsNoInlining &&  				decryptStringMethod.IsAssembly &&  				!decryptStringMethod.IsSynchronized &&  				decryptStringMethod.Body.MaxStack >= 1 &&  				decryptStringMethod.Body.MaxStack <= 8 &&  				(decryptStringMethod.Body.ExceptionHandlers.Count == 1 || decryptStringMethod.Body.ExceptionHandlers.Count == 2) &&  				new LocalTypes(decryptStringMethod).Exactly(locals32) &&  				CheckTypeFields(fields32)
Magic Number,de4dot.code.deobfuscators.Eazfuscator_NET,VersionDetector,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\VersionDetector.cs,Detect,The following statement contains a magic number: otherMethods.Count == 1 &&  					decryptStringType.NestedTypes.Count == 1 &&  					DotNetUtils.IsMethod(otherMethods[0]' "System.Void"' "(System.Byte[]'System.Int32'System.Byte[])") &&  					otherMethods[0].IsPrivate &&  					otherMethods[0].IsStatic &&  					new LocalTypes(otherMethods[0]).Exactly(olocals33) &&  					hasConstantM2 &&  					decryptStringMethod.IsNoInlining &&  					decryptStringMethod.IsAssembly &&  					!decryptStringMethod.IsSynchronized &&  					decryptStringMethod.Body.MaxStack >= 1 &&  					decryptStringMethod.Body.MaxStack <= 8 &&  					(decryptStringMethod.Body.ExceptionHandlers.Count == 1 || decryptStringMethod.Body.ExceptionHandlers.Count == 2) &&  					new LocalTypes(decryptStringMethod).Exactly(locals33) &&  					CheckTypeFields(fields33)
Magic Number,de4dot.code.deobfuscators.Eazfuscator_NET,VersionDetector,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\VersionDetector.cs,Detect,The following statement contains a magic number: otherMethods.Count == 1 &&  					decryptStringType.NestedTypes.Count == 1 &&  					DotNetUtils.IsMethod(otherMethods[0]' "System.Void"' "(System.Byte[]'System.Int32'System.Byte[])") &&  					otherMethods[0].IsPrivate &&  					otherMethods[0].IsStatic &&  					new LocalTypes(otherMethods[0]).Exactly(olocals33) &&  					hasConstantM2 &&  					decryptStringMethod.IsNoInlining &&  					decryptStringMethod.IsAssembly &&  					!decryptStringMethod.IsSynchronized &&  					decryptStringMethod.Body.MaxStack >= 1 &&  					decryptStringMethod.Body.MaxStack <= 8 &&  					(decryptStringMethod.Body.ExceptionHandlers.Count == 1 || decryptStringMethod.Body.ExceptionHandlers.Count == 2) &&  					new LocalTypes(decryptStringMethod).Exactly(locals33) &&  					CheckTypeFields(fields33)
Magic Number,de4dot.code.deobfuscators.Eazfuscator_NET,VersionDetector,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\VersionDetector.cs,Detect,The following statement contains a magic number: var fields33 = new string[] {  					GetNestedTypeName(0)'  					GetNestedTypeName(1)'  					"System.Byte[]"'  					"System.Int16"'  					"System.Int32"'  					"System.Byte[]"'  					"System.Int32"'  					"System.Int32"'  					GetNestedTypeName(2)'  				};
Magic Number,de4dot.code.deobfuscators.Eazfuscator_NET,VersionDetector,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\VersionDetector.cs,Detect,The following statement contains a magic number: otherMethods.Count == 1 &&  					decryptStringType.NestedTypes.Count == 3 &&  					DotNetUtils.IsMethod(otherMethods[0]' "System.Void"' "(System.Byte[]'System.Int32'System.Byte[])") &&  					otherMethods[0].IsPrivate &&  					otherMethods[0].IsStatic &&  					new LocalTypes(otherMethods[0]).Exactly(olocals33) &&  					decryptStringMethod.IsNoInlining &&  					decryptStringMethod.IsAssembly &&  					!decryptStringMethod.IsSynchronized &&  					decryptStringMethod.Body.MaxStack >= 1 &&  					decryptStringMethod.Body.MaxStack <= 8 &&  					(decryptStringMethod.Body.ExceptionHandlers.Count == 1 || decryptStringMethod.Body.ExceptionHandlers.Count == 2) &&  					new LocalTypes(decryptStringMethod).Exactly(locals33) &&  					CheckTypeFields(fields33)
Magic Number,de4dot.code.deobfuscators.Eazfuscator_NET,VersionDetector,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\VersionDetector.cs,Detect,The following statement contains a magic number: otherMethods.Count == 1 &&  					decryptStringType.NestedTypes.Count == 3 &&  					DotNetUtils.IsMethod(otherMethods[0]' "System.Void"' "(System.Byte[]'System.Int32'System.Byte[])") &&  					otherMethods[0].IsPrivate &&  					otherMethods[0].IsStatic &&  					new LocalTypes(otherMethods[0]).Exactly(olocals33) &&  					decryptStringMethod.IsNoInlining &&  					decryptStringMethod.IsAssembly &&  					!decryptStringMethod.IsSynchronized &&  					decryptStringMethod.Body.MaxStack >= 1 &&  					decryptStringMethod.Body.MaxStack <= 8 &&  					(decryptStringMethod.Body.ExceptionHandlers.Count == 1 || decryptStringMethod.Body.ExceptionHandlers.Count == 2) &&  					new LocalTypes(decryptStringMethod).Exactly(locals33) &&  					CheckTypeFields(fields33)
Magic Number,de4dot.code.deobfuscators.Eazfuscator_NET,VersionDetector,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\VersionDetector.cs,Detect,The following statement contains a magic number: otherMethods.Count == 1 &&  					decryptStringType.NestedTypes.Count == 3 &&  					DotNetUtils.IsMethod(otherMethods[0]' "System.Void"' "(System.Byte[]'System.Int32'System.Byte[])") &&  					otherMethods[0].IsPrivate &&  					otherMethods[0].IsStatic &&  					new LocalTypes(otherMethods[0]).Exactly(olocals33) &&  					decryptStringMethod.IsNoInlining &&  					decryptStringMethod.IsAssembly &&  					!decryptStringMethod.IsSynchronized &&  					decryptStringMethod.Body.MaxStack >= 1 &&  					decryptStringMethod.Body.MaxStack <= 8 &&  					(decryptStringMethod.Body.ExceptionHandlers.Count == 1 || decryptStringMethod.Body.ExceptionHandlers.Count == 2) &&  					new LocalTypes(decryptStringMethod).Exactly(locals33) &&  					CheckTypeFields(fields33)
Magic Number,de4dot.code.deobfuscators.Eazfuscator_NET,VersionDetector,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\VersionDetector.cs,Detect,The following statement contains a magic number: var fields33_149 = new string[] {  					GetNestedTypeName(0)'  					GetNestedTypeName(1)'  					"System.Byte[]"'  					"System.Int16"'  					"System.Int32"'  					"System.Byte[]"'  					"System.Int32"'  					"System.Int32"'  					GetNestedTypeName(2)'  				};
Magic Number,de4dot.code.deobfuscators.Eazfuscator_NET,VersionDetector,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\VersionDetector.cs,Detect,The following statement contains a magic number: otherMethods.Count == 1 &&  					decryptStringType.NestedTypes.Count == 3 &&  					DotNetUtils.IsMethod(otherMethods[0]' "System.Void"' "(System.Byte[]'System.Int32'System.Byte[])") &&  					otherMethods[0].IsPrivate &&  					otherMethods[0].IsStatic &&  					new LocalTypes(otherMethods[0]).Exactly(olocals33_149) &&  					decryptStringMethod.IsNoInlining &&  					decryptStringMethod.IsAssembly &&  					!decryptStringMethod.IsSynchronized &&  					decryptStringMethod.Body.MaxStack >= 1 &&  					decryptStringMethod.Body.MaxStack <= 8 &&  					(decryptStringMethod.Body.ExceptionHandlers.Count == 1 || decryptStringMethod.Body.ExceptionHandlers.Count == 2) &&  					new LocalTypes(decryptStringMethod).Exactly(locals33_149) &&  					CheckTypeFields2(fields33_149)
Magic Number,de4dot.code.deobfuscators.Eazfuscator_NET,VersionDetector,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\VersionDetector.cs,Detect,The following statement contains a magic number: otherMethods.Count == 1 &&  					decryptStringType.NestedTypes.Count == 3 &&  					DotNetUtils.IsMethod(otherMethods[0]' "System.Void"' "(System.Byte[]'System.Int32'System.Byte[])") &&  					otherMethods[0].IsPrivate &&  					otherMethods[0].IsStatic &&  					new LocalTypes(otherMethods[0]).Exactly(olocals33_149) &&  					decryptStringMethod.IsNoInlining &&  					decryptStringMethod.IsAssembly &&  					!decryptStringMethod.IsSynchronized &&  					decryptStringMethod.Body.MaxStack >= 1 &&  					decryptStringMethod.Body.MaxStack <= 8 &&  					(decryptStringMethod.Body.ExceptionHandlers.Count == 1 || decryptStringMethod.Body.ExceptionHandlers.Count == 2) &&  					new LocalTypes(decryptStringMethod).Exactly(locals33_149) &&  					CheckTypeFields2(fields33_149)
Magic Number,de4dot.code.deobfuscators.Eazfuscator_NET,VersionDetector,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\VersionDetector.cs,Detect,The following statement contains a magic number: otherMethods.Count == 1 &&  					decryptStringType.NestedTypes.Count == 3 &&  					DotNetUtils.IsMethod(otherMethods[0]' "System.Void"' "(System.Byte[]'System.Int32'System.Byte[])") &&  					otherMethods[0].IsPrivate &&  					otherMethods[0].IsStatic &&  					new LocalTypes(otherMethods[0]).Exactly(olocals33_149) &&  					decryptStringMethod.IsNoInlining &&  					decryptStringMethod.IsAssembly &&  					!decryptStringMethod.IsSynchronized &&  					decryptStringMethod.Body.MaxStack >= 1 &&  					decryptStringMethod.Body.MaxStack <= 8 &&  					(decryptStringMethod.Body.ExceptionHandlers.Count == 1 || decryptStringMethod.Body.ExceptionHandlers.Count == 2) &&  					new LocalTypes(decryptStringMethod).Exactly(locals33_149) &&  					CheckTypeFields2(fields33_149)
Magic Number,de4dot.code.deobfuscators.Eazfuscator_NET,VersionDetector,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\VersionDetector.cs,Detect,The following statement contains a magic number: var fields35 = new string[] {  					GetNestedTypeName(0)'  					GetNestedTypeName(1)'  					"System.Byte[]"'  					"System.Int16"'  					"System.Int32"'  					"System.Byte[]"'  					"System.Int32"'  					"System.Int32"'  					GetNestedTypeName(2)'  				};
Magic Number,de4dot.code.deobfuscators.Eazfuscator_NET,VersionDetector,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\VersionDetector.cs,Detect,The following statement contains a magic number: otherMethods.Count == 1 &&  					decryptStringType.NestedTypes.Count == 3 &&  					DotNetUtils.IsMethod(otherMethods[0]' "System.Void"' "(System.Byte[]'System.Int32'System.Byte[])") &&  					otherMethods[0].IsPrivate &&  					otherMethods[0].IsStatic &&  					new LocalTypes(otherMethods[0]).Exactly(olocals35) &&  					decryptStringMethod.IsNoInlining &&  					decryptStringMethod.IsAssembly &&  					!decryptStringMethod.IsSynchronized &&  					decryptStringMethod.Body.MaxStack >= 1 &&  					decryptStringMethod.Body.MaxStack <= 8 &&  					decryptStringMethod.Body.ExceptionHandlers.Count >= 2 &&  					new LocalTypes(decryptStringMethod).All(locals35) &&  					CheckTypeFields2(fields35)
Magic Number,de4dot.code.deobfuscators.Eazfuscator_NET,VersionDetector,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\VersionDetector.cs,Detect,The following statement contains a magic number: otherMethods.Count == 1 &&  					decryptStringType.NestedTypes.Count == 3 &&  					DotNetUtils.IsMethod(otherMethods[0]' "System.Void"' "(System.Byte[]'System.Int32'System.Byte[])") &&  					otherMethods[0].IsPrivate &&  					otherMethods[0].IsStatic &&  					new LocalTypes(otherMethods[0]).Exactly(olocals35) &&  					decryptStringMethod.IsNoInlining &&  					decryptStringMethod.IsAssembly &&  					!decryptStringMethod.IsSynchronized &&  					decryptStringMethod.Body.MaxStack >= 1 &&  					decryptStringMethod.Body.MaxStack <= 8 &&  					decryptStringMethod.Body.ExceptionHandlers.Count >= 2 &&  					new LocalTypes(decryptStringMethod).All(locals35) &&  					CheckTypeFields2(fields35)
Magic Number,de4dot.code.deobfuscators.Eazfuscator_NET,VersionDetector,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\VersionDetector.cs,Detect,The following statement contains a magic number: otherMethods.Count == 1 &&  					decryptStringType.NestedTypes.Count == 3 &&  					DotNetUtils.IsMethod(otherMethods[0]' "System.Void"' "(System.Byte[]'System.Int32'System.Byte[])") &&  					otherMethods[0].IsPrivate &&  					otherMethods[0].IsStatic &&  					new LocalTypes(otherMethods[0]).Exactly(olocals35) &&  					decryptStringMethod.IsNoInlining &&  					decryptStringMethod.IsAssembly &&  					!decryptStringMethod.IsSynchronized &&  					decryptStringMethod.Body.MaxStack >= 1 &&  					decryptStringMethod.Body.MaxStack <= 8 &&  					decryptStringMethod.Body.ExceptionHandlers.Count >= 2 &&  					new LocalTypes(decryptStringMethod).All(locals35) &&  					CheckTypeFields2(fields35)
Magic Number,de4dot.code.deobfuscators.Eazfuscator_NET,VersionDetector,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\VersionDetector.cs,Detect,The following statement contains a magic number: var fields43 = new string[] {  					GetNestedTypeName(0)'  					GetNestedTypeName(1)'  					"System.Byte[]"'  					"System.Int16"'  					"System.Int32"'  					"System.Byte[]"'  					"System.Int32"'  					"System.Int32"'  					GetNestedTypeName(2)'  				};
Magic Number,de4dot.code.deobfuscators.Eazfuscator_NET,VersionDetector,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\VersionDetector.cs,Detect,The following statement contains a magic number: otherMethods.Count == 1 &&  					decryptStringType.NestedTypes.Count == 3 &&  					DotNetUtils.IsMethod(otherMethods[0]' "System.Void"' "(System.Byte[]'System.Int32'System.Byte[])") &&  					otherMethods[0].IsPrivate &&  					otherMethods[0].IsStatic &&  					new LocalTypes(otherMethods[0]).Exactly(olocals43) &&  					decryptStringMethod.IsNoInlining &&  					decryptStringMethod.IsAssembly &&  					!decryptStringMethod.IsSynchronized &&  					decryptStringMethod.Body.MaxStack >= 1 &&  					decryptStringMethod.Body.MaxStack <= 8 &&  					decryptStringMethod.Body.ExceptionHandlers.Count >= 2 &&  					new LocalTypes(decryptStringMethod).All(locals43) &&  					CheckTypeFields2(fields43)
Magic Number,de4dot.code.deobfuscators.Eazfuscator_NET,VersionDetector,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\VersionDetector.cs,Detect,The following statement contains a magic number: otherMethods.Count == 1 &&  					decryptStringType.NestedTypes.Count == 3 &&  					DotNetUtils.IsMethod(otherMethods[0]' "System.Void"' "(System.Byte[]'System.Int32'System.Byte[])") &&  					otherMethods[0].IsPrivate &&  					otherMethods[0].IsStatic &&  					new LocalTypes(otherMethods[0]).Exactly(olocals43) &&  					decryptStringMethod.IsNoInlining &&  					decryptStringMethod.IsAssembly &&  					!decryptStringMethod.IsSynchronized &&  					decryptStringMethod.Body.MaxStack >= 1 &&  					decryptStringMethod.Body.MaxStack <= 8 &&  					decryptStringMethod.Body.ExceptionHandlers.Count >= 2 &&  					new LocalTypes(decryptStringMethod).All(locals43) &&  					CheckTypeFields2(fields43)
Magic Number,de4dot.code.deobfuscators.Eazfuscator_NET,VersionDetector,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\VersionDetector.cs,Detect,The following statement contains a magic number: otherMethods.Count == 1 &&  					decryptStringType.NestedTypes.Count == 3 &&  					DotNetUtils.IsMethod(otherMethods[0]' "System.Void"' "(System.Byte[]'System.Int32'System.Byte[])") &&  					otherMethods[0].IsPrivate &&  					otherMethods[0].IsStatic &&  					new LocalTypes(otherMethods[0]).Exactly(olocals43) &&  					decryptStringMethod.IsNoInlining &&  					decryptStringMethod.IsAssembly &&  					!decryptStringMethod.IsSynchronized &&  					decryptStringMethod.Body.MaxStack >= 1 &&  					decryptStringMethod.Body.MaxStack <= 8 &&  					decryptStringMethod.Body.ExceptionHandlers.Count >= 2 &&  					new LocalTypes(decryptStringMethod).All(locals43) &&  					CheckTypeFields2(fields43)
Magic Number,de4dot.code.deobfuscators.Eazfuscator_NET,VersionDetector,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\VersionDetector.cs,Detect,The following statement contains a magic number: var fields50 = new string[] {  					GetNestedTypeName(0)'  					GetNestedTypeName(1)'  					"System.Byte[]"'  					"System.Int16"'  					"System.Int32"'  					"System.Byte[]"'  					"System.Int32"'  					"System.Int32"'  					GetNestedTypeName(2)'  				};
Magic Number,de4dot.code.deobfuscators.Eazfuscator_NET,VersionDetector,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\VersionDetector.cs,Detect,The following statement contains a magic number: stringDecrypter.HasRealMethod &&  					otherMethods.Count == 2 &&  					otherMethod50 != null &&  					decryptStringType.NestedTypes.Count == 3 &&  					otherMethod50.IsPrivate &&  					otherMethod50.IsStatic &&  					decryptStringMethod.IsNoInlining &&  					decryptStringMethod.IsAssembly &&  					!decryptStringMethod.IsSynchronized &&  					decryptStringMethod.Body.MaxStack >= 1 &&  					decryptStringMethod.Body.MaxStack <= 8 &&  					decryptStringMethod.Body.ExceptionHandlers.Count == 1 &&  					new LocalTypes(decryptStringMethod).All(locals50) &&  					CheckTypeFields2(fields50)
Magic Number,de4dot.code.deobfuscators.Eazfuscator_NET,VersionDetector,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\VersionDetector.cs,Detect,The following statement contains a magic number: stringDecrypter.HasRealMethod &&  					otherMethods.Count == 2 &&  					otherMethod50 != null &&  					decryptStringType.NestedTypes.Count == 3 &&  					otherMethod50.IsPrivate &&  					otherMethod50.IsStatic &&  					decryptStringMethod.IsNoInlining &&  					decryptStringMethod.IsAssembly &&  					!decryptStringMethod.IsSynchronized &&  					decryptStringMethod.Body.MaxStack >= 1 &&  					decryptStringMethod.Body.MaxStack <= 8 &&  					decryptStringMethod.Body.ExceptionHandlers.Count == 1 &&  					new LocalTypes(decryptStringMethod).All(locals50) &&  					CheckTypeFields2(fields50)
Magic Number,de4dot.code.deobfuscators.Eazfuscator_NET,VersionDetector,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\VersionDetector.cs,Detect,The following statement contains a magic number: stringDecrypter.HasRealMethod &&  					otherMethods.Count == 2 &&  					otherMethod50 != null &&  					decryptStringType.NestedTypes.Count == 3 &&  					otherMethod50.IsPrivate &&  					otherMethod50.IsStatic &&  					decryptStringMethod.IsNoInlining &&  					decryptStringMethod.IsAssembly &&  					!decryptStringMethod.IsSynchronized &&  					decryptStringMethod.Body.MaxStack >= 1 &&  					decryptStringMethod.Body.MaxStack <= 8 &&  					decryptStringMethod.Body.ExceptionHandlers.Count == 1 &&  					new LocalTypes(decryptStringMethod).All(locals50) &&  					CheckTypeFields2(fields50)
Magic Number,de4dot.code.deobfuscators.Eazfuscator_NET,VersionDetector,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\VersionDetector.cs,Detect,The following statement contains a magic number: stringDecrypter.HasRealMethod &&  				    otherMethods.Count == 5 &&  				    otherMethod50 != null &&  				    decryptStringType.NestedTypes.Count == 3 &&  				    otherMethod50.IsPrivate &&  				    otherMethod50.IsStatic &&  				    decryptStringMethod.IsNoInlining &&  				    decryptStringMethod.IsAssembly &&  				    !decryptStringMethod.IsSynchronized &&  				    decryptStringMethod.Body.MaxStack >= 1 &&  				    decryptStringMethod.Body.MaxStack <= 8 &&  				    decryptStringMethod.Body.ExceptionHandlers.Count == 1
Magic Number,de4dot.code.deobfuscators.Eazfuscator_NET,VersionDetector,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\VersionDetector.cs,Detect,The following statement contains a magic number: stringDecrypter.HasRealMethod &&  				    otherMethods.Count == 5 &&  				    otherMethod50 != null &&  				    decryptStringType.NestedTypes.Count == 3 &&  				    otherMethod50.IsPrivate &&  				    otherMethod50.IsStatic &&  				    decryptStringMethod.IsNoInlining &&  				    decryptStringMethod.IsAssembly &&  				    !decryptStringMethod.IsSynchronized &&  				    decryptStringMethod.Body.MaxStack >= 1 &&  				    decryptStringMethod.Body.MaxStack <= 8 &&  				    decryptStringMethod.Body.ExceptionHandlers.Count == 1
Magic Number,de4dot.code.deobfuscators.Eazfuscator_NET,VersionDetector,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\VersionDetector.cs,Detect,The following statement contains a magic number: stringDecrypter.HasRealMethod &&  				    otherMethods.Count == 5 &&  				    otherMethod50 != null &&  				    decryptStringType.NestedTypes.Count == 3 &&  				    otherMethod50.IsPrivate &&  				    otherMethod50.IsStatic &&  				    decryptStringMethod.IsNoInlining &&  				    decryptStringMethod.IsAssembly &&  				    !decryptStringMethod.IsSynchronized &&  				    decryptStringMethod.Body.MaxStack >= 1 &&  				    decryptStringMethod.Body.MaxStack <= 8 &&  				    decryptStringMethod.Body.ExceptionHandlers.Count == 1
Magic Number,de4dot.code.deobfuscators.Eazfuscator_NET,VersionDetector,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\VersionDetector.cs,Detect,The following statement contains a magic number: decryptStringType.NestedTypes.Count == 3
Magic Number,de4dot.code.deobfuscators.Goliath_NET,DecrypterBase,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Goliath_NET\DecrypterBase.cs,Find,The following statement contains a magic number: SplitTypeName(resource.Name.String.Substring(0' resource.Name.String.Length - 10)' out string ns' out string name);
Magic Number,de4dot.code.deobfuscators.Goliath_NET,DecrypterBase,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Goliath_NET\DecrypterBase.cs,Decrypt,The following statement contains a magic number: pkt = new byte[8];
Magic Number,de4dot.code.deobfuscators.Goliath_NET,DecrypterBase,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Goliath_NET\DecrypterBase.cs,Decrypt,The following statement contains a magic number: j = (j + encryptedData[ki] + pkt[i % 8]) % (KEY_LEN - 1);
Magic Number,de4dot.code.deobfuscators.Goliath_NET,Deobfuscator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Goliath_NET\Deobfuscator.cs,DetectInternal,The following statement contains a magic number: val += 100 + 10 * (sum - 1);
Magic Number,de4dot.code.deobfuscators.Goliath_NET,Deobfuscator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Goliath_NET\Deobfuscator.cs,DetectInternal,The following statement contains a magic number: val += 100 + 10 * (sum - 1);
Magic Number,de4dot.code.deobfuscators.Goliath_NET,Deobfuscator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Goliath_NET\Deobfuscator.cs,DetectInternal,The following statement contains a magic number: val += 10;
Magic Number,de4dot.code.deobfuscators.Goliath_NET,Deobfuscator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Goliath_NET\Deobfuscator.cs,InitializeVersion,The following statement contains a magic number: val.Groups.Count < 2
Magic Number,de4dot.code.deobfuscators.Goliath_NET,ProxyCallFixer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Goliath_NET\ProxyCallFixer.cs,CheckProxyMethod,The following statement contains a magic number: instrs.Count < 7
Magic Number,de4dot.code.deobfuscators.Goliath_NET,ProxyCallFixer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Goliath_NET\ProxyCallFixer.cs,CheckProxyMethod,The following statement contains a magic number: index + 2 > instrs.Count
Magic Number,de4dot.code.deobfuscators.Goliath_NET,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Goliath_NET\StringDecrypter.cs,CheckDecrypterType,The following statement contains a magic number: fields.Count != 2
Magic Number,de4dot.code.deobfuscators.Goliath_NET,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Goliath_NET\StringDecrypter.cs,CheckDecrypterType,The following statement contains a magic number: dict == null || dict.GenericArguments.Count != 2
Magic Number,de4dot.code.deobfuscators.Goliath_NET,StrongNameChecker,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Goliath_NET\StrongNameChecker.cs,Deobfuscate,The following statement contains a magic number: var call2 = instrs[i + 2];
Magic Number,de4dot.code.deobfuscators.Goliath_NET,StrongNameChecker,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Goliath_NET\StrongNameChecker.cs,Deobfuscate,The following statement contains a magic number: block.Remove(i' 3);
Magic Number,de4dot.code.deobfuscators.Goliath_NET,StrongNameChecker,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Goliath_NET\StrongNameChecker.cs,Deobfuscate,The following statement contains a magic number: i < instrs.Count - 2
Magic Number,de4dot.code.deobfuscators.ILProtector,DynamicMethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\ILProtector\DynamicMethodsDecrypter.cs,CreateDecrypter,The following statement contains a magic number: reflectionProtectModule.Assembly.GetName().Version < new Version(2' 0' 12' 0)
Magic Number,de4dot.code.deobfuscators.ILProtector,DynamicMethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\ILProtector\DynamicMethodsDecrypter.cs,CreateDecrypter,The following statement contains a magic number: reflectionProtectModule.Assembly.GetName().Version < new Version(2' 0' 12' 0)
Magic Number,de4dot.code.deobfuscators.ILProtector,DynamicMethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\ILProtector\DynamicMethodsDecrypter.cs,CreateDecrypter,The following statement contains a magic number: version < new Version(2' 0' 12' 3)
Magic Number,de4dot.code.deobfuscators.ILProtector,DynamicMethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\ILProtector\DynamicMethodsDecrypter.cs,CreateDecrypter,The following statement contains a magic number: version < new Version(2' 0' 12' 3)
Magic Number,de4dot.code.deobfuscators.ILProtector,DynamicMethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\ILProtector\DynamicMethodsDecrypter.cs,CreateDecrypter,The following statement contains a magic number: version < new Version(2' 0' 12' 3)
Magic Number,de4dot.code.deobfuscators.ILProtector,DynamicMethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\ILProtector\DynamicMethodsDecrypter.cs,CreateDecrypter,The following statement contains a magic number: version == new Version(2' 0' 12' 3)
Magic Number,de4dot.code.deobfuscators.ILProtector,DynamicMethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\ILProtector\DynamicMethodsDecrypter.cs,CreateDecrypter,The following statement contains a magic number: version == new Version(2' 0' 12' 3)
Magic Number,de4dot.code.deobfuscators.ILProtector,DynamicMethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\ILProtector\DynamicMethodsDecrypter.cs,CreateDecrypter,The following statement contains a magic number: version == new Version(2' 0' 12' 3)
Magic Number,de4dot.code.deobfuscators.ILProtector,DynamicMethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\ILProtector\DynamicMethodsDecrypter.cs,CreateDecrypter,The following statement contains a magic number: version == new Version(2' 0' 13' 0)
Magic Number,de4dot.code.deobfuscators.ILProtector,DynamicMethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\ILProtector\DynamicMethodsDecrypter.cs,CreateDecrypter,The following statement contains a magic number: version == new Version(2' 0' 13' 0)
Magic Number,de4dot.code.deobfuscators.ILProtector,DynamicMethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\ILProtector\DynamicMethodsDecrypter.cs,CreateDecrypter,The following statement contains a magic number: version == new Version(2' 0' 13' 1)
Magic Number,de4dot.code.deobfuscators.ILProtector,DynamicMethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\ILProtector\DynamicMethodsDecrypter.cs,CreateDecrypter,The following statement contains a magic number: version == new Version(2' 0' 13' 1)
Magic Number,de4dot.code.deobfuscators.ILProtector,DecrypterBase,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\ILProtector\DynamicMethodsDecrypter.cs,PatchRuntimeInternal,The following statement contains a magic number: var patchInfos = IntPtr.Size == 4 ? patchInfos32 : patchInfos64;
Magic Number,de4dot.code.deobfuscators.ILProtector,DecrypterBaseV2_0_12_x,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\ILProtector\DynamicMethodsDecrypter.cs,DecrypterBaseV2_0_12_x,The following statement contains a magic number: p += IntPtr.Size * 3;
Magic Number,de4dot.code.deobfuscators.ILProtector,DecrypterBaseV2_0_12_x,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\ILProtector\DynamicMethodsDecrypter.cs,DecrypterBaseV2_0_12_x,The following statement contains a magic number: p += 8 + IntPtr.Size * 8;
Magic Number,de4dot.code.deobfuscators.ILProtector,DecrypterBaseV2_0_12_x,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\ILProtector\DynamicMethodsDecrypter.cs,DecrypterBaseV2_0_12_x,The following statement contains a magic number: p += 8 + IntPtr.Size * 8;
Magic Number,de4dot.code.deobfuscators.ILProtector,DecrypterBaseV2_0_12_x,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\ILProtector\DynamicMethodsDecrypter.cs,DecrypterBaseV2_0_12_x,The following statement contains a magic number: p += IntPtr.Size * 3;
Magic Number,de4dot.code.deobfuscators.ILProtector,DecrypterBaseV2_0_12_x,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\ILProtector\DynamicMethodsDecrypter.cs,DecrypterBaseV2_0_12_x,The following statement contains a magic number: pGetILBytes = new IntPtr(p + IntPtr.Size * 39);
Magic Number,de4dot.code.deobfuscators.ILProtector,DecrypterBaseV2_0_12_x,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\ILProtector\DynamicMethodsDecrypter.cs,DecrypterBaseV2_0_12_x,The following statement contains a magic number: pDecryptCallback = new IntPtr(p + IntPtr.Size * 40);
Magic Number,de4dot.code.deobfuscators.ILProtector,DecrypterV2_0_13_0_Base,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\ILProtector\DynamicMethodsDecrypter.cs,DecrypterV2_0_13_0_Base,The following statement contains a magic number: byte* pam = *(byte**)(p + IntPtr.Size * 2);
Magic Number,de4dot.code.deobfuscators.ILProtector,DecrypterV2_0_13_0_Base,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\ILProtector\DynamicMethodsDecrypter.cs,DecrypterV2_0_13_0_Base,The following statement contains a magic number: p = *(byte**)(p + ((Environment.Version.Major - 2) / 2 * IntPtr.Size));
Magic Number,de4dot.code.deobfuscators.ILProtector,DecrypterV2_0_13_0_Base,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\ILProtector\DynamicMethodsDecrypter.cs,DecrypterV2_0_13_0_Base,The following statement contains a magic number: p = *(byte**)(p + ((Environment.Version.Major - 2) / 2 * IntPtr.Size));
Magic Number,de4dot.code.deobfuscators.ILProtector,DecrypterV2_0_13_0_Base,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\ILProtector\DynamicMethodsDecrypter.cs,DecrypterV2_0_13_0_Base,The following statement contains a magic number: p += IntPtr.Size * 8 + 0x18;
Magic Number,de4dot.code.deobfuscators.ILProtector,DecrypterV2_0_13_0_Base,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\ILProtector\DynamicMethodsDecrypter.cs,DecrypterV2_0_13_0_Base,The following statement contains a magic number: p = *(byte**)(p + IntPtr.Size * 16 + 0x18);
Magic Number,de4dot.code.deobfuscators.ILProtector,DecrypterV2_0_13_0_Base,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\ILProtector\DynamicMethodsDecrypter.cs,DecrypterV2_0_13_0_Base,The following statement contains a magic number: byte* pd = p + IntPtr.Size * 2;
Magic Number,de4dot.code.deobfuscators.ILProtector,DecrypterV2_0_13_0_Base,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\ILProtector\DynamicMethodsDecrypter.cs,DecrypterV2_0_13_0_Base,The following statement contains a magic number: p = *(byte**)(p + IntPtr.Size * 13);
Magic Number,de4dot.code.deobfuscators.ILProtector,DecrypterV2_0_13_0_Base,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\ILProtector\DynamicMethodsDecrypter.cs,DecrypterV2_0_13_0_Base,The following statement contains a magic number: IntPtr.Size == 4
Magic Number,de4dot.code.deobfuscators.ILProtector,DecrypterV2_0_13_0_Base,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\ILProtector\DynamicMethodsDecrypter.cs,GetModuleHandle,The following statement contains a magic number: !GetModuleHandleEx(4' new IntPtr(addr)' out var hModule)
Magic Number,de4dot.code.deobfuscators.ILProtector,DecrypterV2_0_13_0_Base,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\ILProtector\DynamicMethodsDecrypter.cs,GetAddr,The following statement contains a magic number: i < 20
Magic Number,de4dot.code.deobfuscators.ILProtector,DecrypterV2_0_13_0_Base,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\ILProtector\DynamicMethodsDecrypter.cs,GetAddr,The following statement contains a magic number: IntPtr.Size == 4
Magic Number,de4dot.code.deobfuscators.ILProtector,DecrypterV2_0_13_0_Base,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\ILProtector\DynamicMethodsDecrypter.cs,LookUp,The following statement contains a magic number: int f2 = IntPtr.Size * 2;
Magic Number,de4dot.code.deobfuscators.ILProtector,DecrypterV2_0_13_0_Base,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\ILProtector\DynamicMethodsDecrypter.cs,LookUp,The following statement contains a magic number: int f3 = IntPtr.Size * 3;
Magic Number,de4dot.code.deobfuscators.ILProtector,DecrypterV2_0_13_0_Base,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\ILProtector\DynamicMethodsDecrypter.cs,LookUp,The following statement contains a magic number: int f4 = IntPtr.Size * 4;
Magic Number,de4dot.code.deobfuscators.ILProtector,DecrypterV2_0_13_0_Base,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\ILProtector\DynamicMethodsDecrypter.cs,LookUp,The following statement contains a magic number: int f5 = IntPtr.Size * 5 + 1;
Magic Number,de4dot.code.deobfuscators.ILProtector,DecrypterV2_0_13_0_Base,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\ILProtector\DynamicMethodsDecrypter.cs,GetCallerMethodAsILByteArray,The following statement contains a magic number: flags = 2;
Magic Number,de4dot.code.deobfuscators.ILProtector,DecrypterV2_0_13_0,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\ILProtector\DynamicMethodsDecrypter.cs,InitCode,The following statement contains a magic number: del(pppam' pm' new IntPtr(IntPtr.Size * 4)' pd' ba + 0x00012500);
Magic Number,de4dot.code.deobfuscators.ILProtector,DecrypterV2_0_13_0,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\ILProtector\DynamicMethodsDecrypter.cs,InitCode,The following statement contains a magic number: IntPtr.Size == 4
Magic Number,de4dot.code.deobfuscators.ILProtector,DecrypterV2_0_13_1,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\ILProtector\DynamicMethodsDecrypter.cs,InitCode,The following statement contains a magic number: int rva = IntPtr.Size == 4 ? 0x00013650 : 0x00016B50;
Magic Number,de4dot.code.deobfuscators.ILProtector,DecrypterV2_0_13_1,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\ILProtector\DynamicMethodsDecrypter.cs,InitCode,The following statement contains a magic number: del(pppam' pm' new IntPtr(IntPtr.Size * 4)' pd);
Magic Number,de4dot.code.deobfuscators.ILProtector,MainType,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\ILProtector\MainType.cs,CheckMethod,The following statement contains a magic number: methods.Count != 2
Magic Number,de4dot.code.deobfuscators.ILProtector,MainType,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\ILProtector\MainType.cs,CheckMethod,The following statement contains a magic number: type.Fields.Count < 1 || type.Fields.Count > 2
Magic Number,de4dot.code.deobfuscators.ILProtector,MethodReader,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\ILProtector\MethodReader.cs,GetTypeDefOrRefToken,The following statement contains a magic number: switch (token & 3) {  			case 0: return 0x02000000 + (int)(token >> 2);  			case 1: return 0x01000000 + (int)(token >> 2);  			case 2: return 0x1B000000 + (int)(token >> 2);  			default: throw new ApplicationException("Invalid token");  			}
Magic Number,de4dot.code.deobfuscators.ILProtector,MethodReader,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\ILProtector\MethodReader.cs,GetTypeDefOrRefToken,The following statement contains a magic number: switch (token & 3) {  			case 0: return 0x02000000 + (int)(token >> 2);  			case 1: return 0x01000000 + (int)(token >> 2);  			case 2: return 0x1B000000 + (int)(token >> 2);  			default: throw new ApplicationException("Invalid token");  			}
Magic Number,de4dot.code.deobfuscators.ILProtector,MethodReader,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\ILProtector\MethodReader.cs,GetTypeDefOrRefToken,The following statement contains a magic number: switch (token & 3) {  			case 0: return 0x02000000 + (int)(token >> 2);  			case 1: return 0x01000000 + (int)(token >> 2);  			case 2: return 0x1B000000 + (int)(token >> 2);  			default: throw new ApplicationException("Invalid token");  			}
Magic Number,de4dot.code.deobfuscators.ILProtector,MethodReader,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\ILProtector\MethodReader.cs,GetTypeDefOrRefToken,The following statement contains a magic number: switch (token & 3) {  			case 0: return 0x02000000 + (int)(token >> 2);  			case 1: return 0x01000000 + (int)(token >> 2);  			case 2: return 0x1B000000 + (int)(token >> 2);  			default: throw new ApplicationException("Invalid token");  			}
Magic Number,de4dot.code.deobfuscators.ILProtector,MethodReader,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\ILProtector\MethodReader.cs,GetTypeDefOrRefToken,The following statement contains a magic number: switch (token & 3) {  			case 0: return 0x02000000 + (int)(token >> 2);  			case 1: return 0x01000000 + (int)(token >> 2);  			case 2: return 0x1B000000 + (int)(token >> 2);  			default: throw new ApplicationException("Invalid token");  			}
Magic Number,de4dot.code.deobfuscators.ILProtector,MethodReader,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\ILProtector\MethodReader.cs,ReadExceptionHandler,The following statement contains a magic number: var eh = new ExceptionHandler((ExceptionHandlerType)(reader.Read7BitEncodedUInt32() & 7));
Magic Number,de4dot.code.deobfuscators.ILProtector,DecrypterV100,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\ILProtector\StaticMethodsDecrypter.cs,DecrypterV100,The following statement contains a magic number: startOffset = 8;
Magic Number,de4dot.code.deobfuscators.ILProtector,DecrypterV100,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\ILProtector\StaticMethodsDecrypter.cs,DecrypterV100,The following statement contains a magic number: decryptionKeyMod = 8;
Magic Number,de4dot.code.deobfuscators.ILProtector,DecrypterV100,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\ILProtector\StaticMethodsDecrypter.cs,Create,The following statement contains a magic number: reader.Length < 12
Magic Number,de4dot.code.deobfuscators.ILProtector,DecrypterV105,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\ILProtector\StaticMethodsDecrypter.cs,Create,The following statement contains a magic number: !Utils.Compare(reader.ReadBytes(8)' ilpPublicKeyToken)
Magic Number,de4dot.code.deobfuscators.ILProtector,DecrypterV106,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\ILProtector\StaticMethodsDecrypter.cs,Create,The following statement contains a magic number: int keyXorOffs7 = (ReadByteAt(ref reader' 0) ^ ReadByteAt(ref reader' 2)) + 2;
Magic Number,de4dot.code.deobfuscators.ILProtector,DecrypterV106,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\ILProtector\StaticMethodsDecrypter.cs,Create,The following statement contains a magic number: int keyXorOffs7 = (ReadByteAt(ref reader' 0) ^ ReadByteAt(ref reader' 2)) + 2;
Magic Number,de4dot.code.deobfuscators.MaxtoCode,CryptDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MaxtoCode\CryptDecrypter.cs,CryptDecrypter,The following statement contains a magic number: key.Length <= 8
Magic Number,de4dot.code.deobfuscators.MaxtoCode,CryptDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MaxtoCode\CryptDecrypter.cs,Decrypt,The following statement contains a magic number: encrypted.Length % 8 != 0
Magic Number,de4dot.code.deobfuscators.MaxtoCode,CryptDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MaxtoCode\CryptDecrypter.cs,Decrypt,The following statement contains a magic number: var key2 = CreateKey(key' 8);
Magic Number,de4dot.code.deobfuscators.MaxtoCode,CryptDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MaxtoCode\CryptDecrypter.cs,Decrypt,The following statement contains a magic number: int count = encrypted.Length / 8;
Magic Number,de4dot.code.deobfuscators.MaxtoCode,CryptDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MaxtoCode\CryptDecrypter.cs,Decrypt,The following statement contains a magic number: var buf = new byte[8];
Magic Number,de4dot.code.deobfuscators.MaxtoCode,CryptDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MaxtoCode\CryptDecrypter.cs,Decrypt,The following statement contains a magic number: Array.Copy(encrypted' i * 8' buf' 0' buf.Length);
Magic Number,de4dot.code.deobfuscators.MaxtoCode,CryptDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MaxtoCode\CryptDecrypter.cs,Decrypt,The following statement contains a magic number: Array.Copy(buf' 0' decrypted' i * 8' buf.Length);
Magic Number,de4dot.code.deobfuscators.MaxtoCode,CryptDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MaxtoCode\CryptDecrypter.cs,Decrypt,The following statement contains a magic number: var oldBits = bits.Extract(0' 32);
Magic Number,de4dot.code.deobfuscators.MaxtoCode,CryptDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MaxtoCode\CryptDecrypter.cs,Decrypt,The following statement contains a magic number: var tmp = Decrypt(oldBits.Clone()' key.Extract(ki' 48));
Magic Number,de4dot.code.deobfuscators.MaxtoCode,CryptDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MaxtoCode\CryptDecrypter.cs,Decrypt,The following statement contains a magic number: tmp.Xor(bits.Extract(32' 32));
Magic Number,de4dot.code.deobfuscators.MaxtoCode,CryptDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MaxtoCode\CryptDecrypter.cs,Decrypt,The following statement contains a magic number: tmp.Xor(bits.Extract(32' 32));
Magic Number,de4dot.code.deobfuscators.MaxtoCode,CryptDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MaxtoCode\CryptDecrypter.cs,Decrypt,The following statement contains a magic number: bits.Set(32' oldBits);
Magic Number,de4dot.code.deobfuscators.MaxtoCode,CryptDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MaxtoCode\CryptDecrypter.cs,Decrypt,The following statement contains a magic number: i < 16
Magic Number,de4dot.code.deobfuscators.MaxtoCode,CryptDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MaxtoCode\CryptDecrypter.cs,GetSbox,The following statement contains a magic number: var sboxByteBits = new byte[32];
Magic Number,de4dot.code.deobfuscators.MaxtoCode,CryptDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MaxtoCode\CryptDecrypter.cs,GetSbox,The following statement contains a magic number: int di = i * 6;
Magic Number,de4dot.code.deobfuscators.MaxtoCode,CryptDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MaxtoCode\CryptDecrypter.cs,GetSbox,The following statement contains a magic number: int index = (data[di + 0] << 5) + (data[di + 5] << 4) + (data[di + 1] << 3) +  							(data[di + 2] << 2) + (data[di + 3] << 1) + data[di + 4] + i * 64;
Magic Number,de4dot.code.deobfuscators.MaxtoCode,CryptDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MaxtoCode\CryptDecrypter.cs,GetSbox,The following statement contains a magic number: int index = (data[di + 0] << 5) + (data[di + 5] << 4) + (data[di + 1] << 3) +  							(data[di + 2] << 2) + (data[di + 3] << 1) + data[di + 4] + i * 64;
Magic Number,de4dot.code.deobfuscators.MaxtoCode,CryptDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MaxtoCode\CryptDecrypter.cs,GetSbox,The following statement contains a magic number: int index = (data[di + 0] << 5) + (data[di + 5] << 4) + (data[di + 1] << 3) +  							(data[di + 2] << 2) + (data[di + 3] << 1) + data[di + 4] + i * 64;
Magic Number,de4dot.code.deobfuscators.MaxtoCode,CryptDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MaxtoCode\CryptDecrypter.cs,GetSbox,The following statement contains a magic number: int index = (data[di + 0] << 5) + (data[di + 5] << 4) + (data[di + 1] << 3) +  							(data[di + 2] << 2) + (data[di + 3] << 1) + data[di + 4] + i * 64;
Magic Number,de4dot.code.deobfuscators.MaxtoCode,CryptDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MaxtoCode\CryptDecrypter.cs,GetSbox,The following statement contains a magic number: int index = (data[di + 0] << 5) + (data[di + 5] << 4) + (data[di + 1] << 3) +  							(data[di + 2] << 2) + (data[di + 3] << 1) + data[di + 4] + i * 64;
Magic Number,de4dot.code.deobfuscators.MaxtoCode,CryptDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MaxtoCode\CryptDecrypter.cs,GetSbox,The following statement contains a magic number: int index = (data[di + 0] << 5) + (data[di + 5] << 4) + (data[di + 1] << 3) +  							(data[di + 2] << 2) + (data[di + 3] << 1) + data[di + 4] + i * 64;
Magic Number,de4dot.code.deobfuscators.MaxtoCode,CryptDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MaxtoCode\CryptDecrypter.cs,GetSbox,The following statement contains a magic number: int index = (data[di + 0] << 5) + (data[di + 5] << 4) + (data[di + 1] << 3) +  							(data[di + 2] << 2) + (data[di + 3] << 1) + data[di + 4] + i * 64;
Magic Number,de4dot.code.deobfuscators.MaxtoCode,CryptDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MaxtoCode\CryptDecrypter.cs,GetSbox,The following statement contains a magic number: int index = (data[di + 0] << 5) + (data[di + 5] << 4) + (data[di + 1] << 3) +  							(data[di + 2] << 2) + (data[di + 3] << 1) + data[di + 4] + i * 64;
Magic Number,de4dot.code.deobfuscators.MaxtoCode,CryptDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MaxtoCode\CryptDecrypter.cs,GetSbox,The following statement contains a magic number: int index = (data[di + 0] << 5) + (data[di + 5] << 4) + (data[di + 1] << 3) +  							(data[di + 2] << 2) + (data[di + 3] << 1) + data[di + 4] + i * 64;
Magic Number,de4dot.code.deobfuscators.MaxtoCode,CryptDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MaxtoCode\CryptDecrypter.cs,GetSbox,The following statement contains a magic number: Bits.FromBytes(sbox' index' 4).CopyTo(sboxByteBits' i * 4);
Magic Number,de4dot.code.deobfuscators.MaxtoCode,CryptDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MaxtoCode\CryptDecrypter.cs,GetSbox,The following statement contains a magic number: Bits.FromBytes(sbox' index' 4).CopyTo(sboxByteBits' i * 4);
Magic Number,de4dot.code.deobfuscators.MaxtoCode,CryptDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MaxtoCode\CryptDecrypter.cs,GetSbox,The following statement contains a magic number: i < 8
Magic Number,de4dot.code.deobfuscators.MaxtoCode,CryptDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MaxtoCode\CryptDecrypter.cs,CreateKey,The following statement contains a magic number: byte[] newKey = new byte[16 * 6];
Magic Number,de4dot.code.deobfuscators.MaxtoCode,CryptDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MaxtoCode\CryptDecrypter.cs,CreateKey,The following statement contains a magic number: byte[] newKey = new byte[16 * 6];
Magic Number,de4dot.code.deobfuscators.MaxtoCode,CryptDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MaxtoCode\CryptDecrypter.cs,CreateKey,The following statement contains a magic number: Bits.FromByteBits(key1.ByteBits' key2.ByteBits).Transpose(pc2).ToBits(newKey' i * 6);
Magic Number,de4dot.code.deobfuscators.MaxtoCode,CryptDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MaxtoCode\CryptDecrypter.cs,CreateKey,The following statement contains a magic number: i < 16
Magic Number,de4dot.code.deobfuscators.MaxtoCode,CryptDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MaxtoCode\CryptDecrypter.cs,CreateKeys,The following statement contains a magic number: var tmpKey = new byte[8];
Magic Number,de4dot.code.deobfuscators.MaxtoCode,CryptDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MaxtoCode\CryptDecrypter.cs,CreateKeys,The following statement contains a magic number: key1 = Bits.FromByteBits(bits.ByteBits' 0' 28);
Magic Number,de4dot.code.deobfuscators.MaxtoCode,CryptDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MaxtoCode\CryptDecrypter.cs,CreateKeys,The following statement contains a magic number: key2 = Bits.FromByteBits(bits.ByteBits' 28' 28);
Magic Number,de4dot.code.deobfuscators.MaxtoCode,CryptDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MaxtoCode\CryptDecrypter.cs,CreateKeys,The following statement contains a magic number: key2 = Bits.FromByteBits(bits.ByteBits' 28' 28);
Magic Number,de4dot.code.deobfuscators.MaxtoCode,Bits,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MaxtoCode\CryptDecrypter.cs,ToByteBits,The following statement contains a magic number: int j = i / 8;
Magic Number,de4dot.code.deobfuscators.MaxtoCode,Bits,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MaxtoCode\CryptDecrypter.cs,ToByteBits,The following statement contains a magic number: int k = i & 7;
Magic Number,de4dot.code.deobfuscators.MaxtoCode,Bits,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MaxtoCode\CryptDecrypter.cs,ToBits,The following statement contains a magic number: var bits = new byte[(byteBits.Length + 7) / 8];
Magic Number,de4dot.code.deobfuscators.MaxtoCode,Bits,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MaxtoCode\CryptDecrypter.cs,ToBits,The following statement contains a magic number: var bits = new byte[(byteBits.Length + 7) / 8];
Magic Number,de4dot.code.deobfuscators.MaxtoCode,Decrypter6,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MaxtoCode\Decrypter6.cs,Decrypter6,The following statement contains a magic number: key.Length != 32
Magic Number,de4dot.code.deobfuscators.MaxtoCode,Decrypter6,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MaxtoCode\Decrypter6.cs,Decrypter6,The following statement contains a magic number: this.key = new uint[8];
Magic Number,de4dot.code.deobfuscators.MaxtoCode,Decrypter6,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MaxtoCode\Decrypter6.cs,Decrypt,The following statement contains a magic number: (encrypted.Length & 7) != 0
Magic Number,de4dot.code.deobfuscators.MaxtoCode,Decrypter6,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MaxtoCode\Decrypter6.cs,Decrypt,The following statement contains a magic number: int count = decrypted.Length / 8;
Magic Number,de4dot.code.deobfuscators.MaxtoCode,Decrypter6,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MaxtoCode\Decrypter6.cs,Decrypt,The following statement contains a magic number: Decrypt(BitConverter.ToUInt32(encrypted' i * 8)' BitConverter.ToUInt32(encrypted' i * 8 + 4)' out uint x' out uint y);
Magic Number,de4dot.code.deobfuscators.MaxtoCode,Decrypter6,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MaxtoCode\Decrypter6.cs,Decrypt,The following statement contains a magic number: Decrypt(BitConverter.ToUInt32(encrypted' i * 8)' BitConverter.ToUInt32(encrypted' i * 8 + 4)' out uint x' out uint y);
Magic Number,de4dot.code.deobfuscators.MaxtoCode,Decrypter6,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MaxtoCode\Decrypter6.cs,Decrypt,The following statement contains a magic number: Decrypt(BitConverter.ToUInt32(encrypted' i * 8)' BitConverter.ToUInt32(encrypted' i * 8 + 4)' out uint x' out uint y);
Magic Number,de4dot.code.deobfuscators.MaxtoCode,Decrypter6,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MaxtoCode\Decrypter6.cs,Decrypt,The following statement contains a magic number: j < 100
Magic Number,de4dot.code.deobfuscators.MaxtoCode,Decrypter6,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MaxtoCode\Decrypter6.cs,Decrypt,The following statement contains a magic number: WriteUInt32(decrypted' i * 8' x);
Magic Number,de4dot.code.deobfuscators.MaxtoCode,Decrypter6,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MaxtoCode\Decrypter6.cs,Decrypt,The following statement contains a magic number: WriteUInt32(decrypted' i * 8 + 4' y);
Magic Number,de4dot.code.deobfuscators.MaxtoCode,Decrypter6,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MaxtoCode\Decrypter6.cs,Decrypt,The following statement contains a magic number: WriteUInt32(decrypted' i * 8 + 4' y);
Magic Number,de4dot.code.deobfuscators.MaxtoCode,Decrypter6,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MaxtoCode\Decrypter6.cs,WriteUInt32,The following statement contains a magic number: data[index + 1] = (byte)(value >> 8);
Magic Number,de4dot.code.deobfuscators.MaxtoCode,Decrypter6,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MaxtoCode\Decrypter6.cs,WriteUInt32,The following statement contains a magic number: data[index + 2] = (byte)(value >> 16);
Magic Number,de4dot.code.deobfuscators.MaxtoCode,Decrypter6,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MaxtoCode\Decrypter6.cs,WriteUInt32,The following statement contains a magic number: data[index + 2] = (byte)(value >> 16);
Magic Number,de4dot.code.deobfuscators.MaxtoCode,Decrypter6,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MaxtoCode\Decrypter6.cs,WriteUInt32,The following statement contains a magic number: data[index + 3] = (byte)(value >> 24);
Magic Number,de4dot.code.deobfuscators.MaxtoCode,Decrypter6,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MaxtoCode\Decrypter6.cs,WriteUInt32,The following statement contains a magic number: data[index + 3] = (byte)(value >> 24);
Magic Number,de4dot.code.deobfuscators.MaxtoCode,Decrypter6,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MaxtoCode\Decrypter6.cs,Initialize,The following statement contains a magic number: gen1[i] = (byte)((d1h[i / 16] << 4) | d1l[i & 0x0F]);
Magic Number,de4dot.code.deobfuscators.MaxtoCode,Decrypter6,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MaxtoCode\Decrypter6.cs,Initialize,The following statement contains a magic number: gen1[i] = (byte)((d1h[i / 16] << 4) | d1l[i & 0x0F]);
Magic Number,de4dot.code.deobfuscators.MaxtoCode,Decrypter6,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MaxtoCode\Decrypter6.cs,Initialize,The following statement contains a magic number: gen2[i] = (byte)((d2h[i / 16] << 4) | d2l[i & 0x0F]);
Magic Number,de4dot.code.deobfuscators.MaxtoCode,Decrypter6,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MaxtoCode\Decrypter6.cs,Initialize,The following statement contains a magic number: gen2[i] = (byte)((d2h[i / 16] << 4) | d2l[i & 0x0F]);
Magic Number,de4dot.code.deobfuscators.MaxtoCode,Decrypter6,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MaxtoCode\Decrypter6.cs,Initialize,The following statement contains a magic number: gen3[i] = (byte)((d3h[i / 16] << 4) | d3l[i & 0x0F]);
Magic Number,de4dot.code.deobfuscators.MaxtoCode,Decrypter6,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MaxtoCode\Decrypter6.cs,Initialize,The following statement contains a magic number: gen3[i] = (byte)((d3h[i / 16] << 4) | d3l[i & 0x0F]);
Magic Number,de4dot.code.deobfuscators.MaxtoCode,Decrypter6,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MaxtoCode\Decrypter6.cs,Initialize,The following statement contains a magic number: gen4[i] = (byte)((d4h[i / 16] << 4) | d4l[i & 0x0F]);
Magic Number,de4dot.code.deobfuscators.MaxtoCode,Decrypter6,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MaxtoCode\Decrypter6.cs,Initialize,The following statement contains a magic number: gen4[i] = (byte)((d4h[i / 16] << 4) | d4l[i & 0x0F]);
Magic Number,de4dot.code.deobfuscators.MaxtoCode,Decrypter6,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MaxtoCode\Decrypter6.cs,Decrypt,The following statement contains a magic number: y ^= Decrypt(x + key[2]);
Magic Number,de4dot.code.deobfuscators.MaxtoCode,Decrypter6,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MaxtoCode\Decrypter6.cs,Decrypt,The following statement contains a magic number: x ^= Decrypt(y + key[3]);
Magic Number,de4dot.code.deobfuscators.MaxtoCode,Decrypter6,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MaxtoCode\Decrypter6.cs,Decrypt,The following statement contains a magic number: y ^= Decrypt(x + key[4]);
Magic Number,de4dot.code.deobfuscators.MaxtoCode,Decrypter6,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MaxtoCode\Decrypter6.cs,Decrypt,The following statement contains a magic number: x ^= Decrypt(y + key[5]);
Magic Number,de4dot.code.deobfuscators.MaxtoCode,Decrypter6,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MaxtoCode\Decrypter6.cs,Decrypt,The following statement contains a magic number: y ^= Decrypt(x + key[6]);
Magic Number,de4dot.code.deobfuscators.MaxtoCode,Decrypter6,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MaxtoCode\Decrypter6.cs,Decrypt,The following statement contains a magic number: x ^= Decrypt(y + key[7]);
Magic Number,de4dot.code.deobfuscators.MaxtoCode,Decrypter6,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MaxtoCode\Decrypter6.cs,Decrypt,The following statement contains a magic number: y ^= Decrypt(x + key[7]);
Magic Number,de4dot.code.deobfuscators.MaxtoCode,Decrypter6,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MaxtoCode\Decrypter6.cs,Decrypt,The following statement contains a magic number: x ^= Decrypt(y + key[6]);
Magic Number,de4dot.code.deobfuscators.MaxtoCode,Decrypter6,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MaxtoCode\Decrypter6.cs,Decrypt,The following statement contains a magic number: y ^= Decrypt(x + key[5]);
Magic Number,de4dot.code.deobfuscators.MaxtoCode,Decrypter6,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MaxtoCode\Decrypter6.cs,Decrypt,The following statement contains a magic number: x ^= Decrypt(y + key[4]);
Magic Number,de4dot.code.deobfuscators.MaxtoCode,Decrypter6,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MaxtoCode\Decrypter6.cs,Decrypt,The following statement contains a magic number: y ^= Decrypt(x + key[3]);
Magic Number,de4dot.code.deobfuscators.MaxtoCode,Decrypter6,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MaxtoCode\Decrypter6.cs,Decrypt,The following statement contains a magic number: x ^= Decrypt(y + key[2]);
Magic Number,de4dot.code.deobfuscators.MaxtoCode,Decrypter6,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MaxtoCode\Decrypter6.cs,Decrypt,The following statement contains a magic number: i < 3
Magic Number,de4dot.code.deobfuscators.MaxtoCode,Decrypter6,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MaxtoCode\Decrypter6.cs,Decrypt,The following statement contains a magic number: uint x = (uint)((gen1[(byte)(val >> 24)] << 24) |  				(gen2[(byte)(val >> 16)] << 16) |  				(gen3[(byte)(val >> 8)] << 8) |  				gen4[(byte)val]);
Magic Number,de4dot.code.deobfuscators.MaxtoCode,Decrypter6,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MaxtoCode\Decrypter6.cs,Decrypt,The following statement contains a magic number: uint x = (uint)((gen1[(byte)(val >> 24)] << 24) |  				(gen2[(byte)(val >> 16)] << 16) |  				(gen3[(byte)(val >> 8)] << 8) |  				gen4[(byte)val]);
Magic Number,de4dot.code.deobfuscators.MaxtoCode,Decrypter6,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MaxtoCode\Decrypter6.cs,Decrypt,The following statement contains a magic number: uint x = (uint)((gen1[(byte)(val >> 24)] << 24) |  				(gen2[(byte)(val >> 16)] << 16) |  				(gen3[(byte)(val >> 8)] << 8) |  				gen4[(byte)val]);
Magic Number,de4dot.code.deobfuscators.MaxtoCode,Decrypter6,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MaxtoCode\Decrypter6.cs,Decrypt,The following statement contains a magic number: uint x = (uint)((gen1[(byte)(val >> 24)] << 24) |  				(gen2[(byte)(val >> 16)] << 16) |  				(gen3[(byte)(val >> 8)] << 8) |  				gen4[(byte)val]);
Magic Number,de4dot.code.deobfuscators.MaxtoCode,Decrypter6,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MaxtoCode\Decrypter6.cs,Decrypt,The following statement contains a magic number: uint x = (uint)((gen1[(byte)(val >> 24)] << 24) |  				(gen2[(byte)(val >> 16)] << 16) |  				(gen3[(byte)(val >> 8)] << 8) |  				gen4[(byte)val]);
Magic Number,de4dot.code.deobfuscators.MaxtoCode,Decrypter6,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MaxtoCode\Decrypter6.cs,Decrypt,The following statement contains a magic number: uint x = (uint)((gen1[(byte)(val >> 24)] << 24) |  				(gen2[(byte)(val >> 16)] << 16) |  				(gen3[(byte)(val >> 8)] << 8) |  				gen4[(byte)val]);
Magic Number,de4dot.code.deobfuscators.MaxtoCode,Decrypter6,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MaxtoCode\Decrypter6.cs,Decrypt,The following statement contains a magic number: return Ror(x' 21);
Magic Number,de4dot.code.deobfuscators.MaxtoCode,Deobfuscator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MaxtoCode\Deobfuscator.cs,DetectInternal,The following statement contains a magic number: val = 150;
Magic Number,de4dot.code.deobfuscators.MaxtoCode,MainType,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MaxtoCode\MainType.cs,Find,The following statement contains a magic number: DeobUtils.GetInitCctors(module' 3)
Magic Number,de4dot.code.deobfuscators.MaxtoCode,MainType,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MaxtoCode\MainType.cs,GetPinvokeList,The following statement contains a magic number: list.Count != 2
Magic Number,de4dot.code.deobfuscators.MaxtoCode,MethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MaxtoCode\MethodsDecrypter.cs,DecryptStrings,The following statement contains a magic number: int encryptedLength = stringDataLength - (usHeapOffset - usHeapOffsetOrig == 1 ? 1 : 2);
Magic Number,de4dot.code.deobfuscators.MaxtoCode,MethodsDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MaxtoCode\MethodsDecrypter.cs,DecryptStrings,The following statement contains a magic number: fileData[usHeapOffset] = Rolb((byte)(fileData[usHeapOffset] ^ k)' 3);
Magic Number,de4dot.code.deobfuscators.MaxtoCode,MethodInfos,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MaxtoCode\MethodsDecrypter.cs,GetStructSize,The following statement contains a magic number: return 0xC + 6 * ENCRYPTED_DATA_INFO_SIZE;
Magic Number,de4dot.code.deobfuscators.MaxtoCode,MethodInfos,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MaxtoCode\MethodsDecrypter.cs,GetStructSize,The following statement contains a magic number: return 0xC + 3 * ENCRYPTED_DATA_INFO_SIZE;
Magic Number,de4dot.code.deobfuscators.MaxtoCode,MethodInfos,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MaxtoCode\MethodsDecrypter.cs,InitializeInfos2,The following statement contains a magic number: int numMethods = ReadInt32(0) ^ ReadInt32(4);
Magic Number,de4dot.code.deobfuscators.MaxtoCode,MethodInfos,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MaxtoCode\MethodsDecrypter.cs,InitializeInfos2,The following statement contains a magic number: uint offset = 8;
Magic Number,de4dot.code.deobfuscators.MaxtoCode,MethodInfos,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MaxtoCode\MethodsDecrypter.cs,InitializeInfos2,The following statement contains a magic number: uint totalSize = ReadEncryptedUInt32(offset + 4);
Magic Number,de4dot.code.deobfuscators.MaxtoCode,MethodInfos,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MaxtoCode\MethodsDecrypter.cs,InitializeInfos2,The following statement contains a magic number: ReadEncryptedUInt32(offset + 8);
Magic Number,de4dot.code.deobfuscators.MaxtoCode,MethodInfos,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MaxtoCode\MethodsDecrypter.cs,InitializeInfos2,The following statement contains a magic number: uint dataOffset = ReadEncryptedUInt32(offset2 + 3);
Magic Number,de4dot.code.deobfuscators.MaxtoCode,MethodInfos,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MaxtoCode\MethodsDecrypter.cs,InitializeInfos2,The following statement contains a magic number: uint encryptedSize = ReadEncryptedUInt32(offset2 + 7);
Magic Number,de4dot.code.deobfuscators.MaxtoCode,MethodInfos,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MaxtoCode\MethodsDecrypter.cs,InitializeInfos2,The following statement contains a magic number: uint realSize = ReadEncryptedUInt32(offset2 + 11);
Magic Number,de4dot.code.deobfuscators.MaxtoCode,MethodInfos,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MaxtoCode\MethodsDecrypter.cs,InitializeInfos2,The following statement contains a magic number: j >= 3 && dataOffset == xorKey && encryptedSize == xorKey
Magic Number,de4dot.code.deobfuscators.MaxtoCode,MethodInfos,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MaxtoCode\MethodsDecrypter.cs,InitializeInfos2,The following statement contains a magic number: exOffset = ReadEncryptedInt32(offset2 + 15);
Magic Number,de4dot.code.deobfuscators.MaxtoCode,MethodInfos,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MaxtoCode\MethodsDecrypter.cs,Decrypt2,The following statement contains a magic number: (encrypted.Length & 7) != 0
Magic Number,de4dot.code.deobfuscators.MaxtoCode,MethodInfos,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MaxtoCode\MethodsDecrypter.cs,Decrypt2,The following statement contains a magic number: uint key4 = mcKey.ReadUInt32(offset + 4 * 4);
Magic Number,de4dot.code.deobfuscators.MaxtoCode,MethodInfos,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MaxtoCode\MethodsDecrypter.cs,Decrypt2,The following statement contains a magic number: uint key4 = mcKey.ReadUInt32(offset + 4 * 4);
Magic Number,de4dot.code.deobfuscators.MaxtoCode,MethodInfos,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MaxtoCode\MethodsDecrypter.cs,Decrypt2,The following statement contains a magic number: uint key5 = mcKey.ReadUInt32(offset + 5 * 4);
Magic Number,de4dot.code.deobfuscators.MaxtoCode,MethodInfos,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MaxtoCode\MethodsDecrypter.cs,Decrypt2,The following statement contains a magic number: uint key5 = mcKey.ReadUInt32(offset + 5 * 4);
Magic Number,de4dot.code.deobfuscators.MaxtoCode,MethodInfos,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MaxtoCode\MethodsDecrypter.cs,Decrypt2,The following statement contains a magic number: byte[] decrypted = new byte[encrypted.Length & ~7];
Magic Number,de4dot.code.deobfuscators.MaxtoCode,MethodInfos,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MaxtoCode\MethodsDecrypter.cs,Decrypt2,The following statement contains a magic number: int loopCount = encrypted.Length / 8;
Magic Number,de4dot.code.deobfuscators.MaxtoCode,MethodInfos,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MaxtoCode\MethodsDecrypter.cs,Decrypt2,The following statement contains a magic number: uint val0 = BitConverter.ToUInt32(encrypted' i * 8);
Magic Number,de4dot.code.deobfuscators.MaxtoCode,MethodInfos,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MaxtoCode\MethodsDecrypter.cs,Decrypt2,The following statement contains a magic number: uint val1 = BitConverter.ToUInt32(encrypted' i * 8 + 4);
Magic Number,de4dot.code.deobfuscators.MaxtoCode,MethodInfos,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MaxtoCode\MethodsDecrypter.cs,Decrypt2,The following statement contains a magic number: uint val1 = BitConverter.ToUInt32(encrypted' i * 8 + 4);
Magic Number,de4dot.code.deobfuscators.MaxtoCode,MethodInfos,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MaxtoCode\MethodsDecrypter.cs,Decrypt2,The following statement contains a magic number: uint x = (val1 >> 26) + (val0 << 6);
Magic Number,de4dot.code.deobfuscators.MaxtoCode,MethodInfos,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MaxtoCode\MethodsDecrypter.cs,Decrypt2,The following statement contains a magic number: uint x = (val1 >> 26) + (val0 << 6);
Magic Number,de4dot.code.deobfuscators.MaxtoCode,MethodInfos,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MaxtoCode\MethodsDecrypter.cs,Decrypt2,The following statement contains a magic number: uint y = (val0 >> 26) + (val1 << 6);
Magic Number,de4dot.code.deobfuscators.MaxtoCode,MethodInfos,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MaxtoCode\MethodsDecrypter.cs,Decrypt2,The following statement contains a magic number: uint y = (val0 >> 26) + (val1 << 6);
Magic Number,de4dot.code.deobfuscators.MaxtoCode,MethodInfos,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MaxtoCode\MethodsDecrypter.cs,Decrypt3,The following statement contains a magic number: (encrypted.Length & 7) != 0
Magic Number,de4dot.code.deobfuscators.MaxtoCode,MethodInfos,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MaxtoCode\MethodsDecrypter.cs,Decrypt3,The following statement contains a magic number: uint key0 = mcKey.ReadUInt32(offset + 0 * 4);
Magic Number,de4dot.code.deobfuscators.MaxtoCode,MethodInfos,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MaxtoCode\MethodsDecrypter.cs,Decrypt3,The following statement contains a magic number: uint key3 = mcKey.ReadUInt32(offset + 3 * 4);
Magic Number,de4dot.code.deobfuscators.MaxtoCode,MethodInfos,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MaxtoCode\MethodsDecrypter.cs,Decrypt3,The following statement contains a magic number: uint key3 = mcKey.ReadUInt32(offset + 3 * 4);
Magic Number,de4dot.code.deobfuscators.MaxtoCode,MethodInfos,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MaxtoCode\MethodsDecrypter.cs,Decrypt3,The following statement contains a magic number: byte[] decrypted = new byte[encrypted.Length & ~7];
Magic Number,de4dot.code.deobfuscators.MaxtoCode,MethodInfos,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MaxtoCode\MethodsDecrypter.cs,Decrypt3,The following statement contains a magic number: int loopCount = encrypted.Length / 8;
Magic Number,de4dot.code.deobfuscators.MaxtoCode,MethodInfos,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MaxtoCode\MethodsDecrypter.cs,Decrypt3,The following statement contains a magic number: uint x = BitConverter.ToUInt32(encrypted' i * 8);
Magic Number,de4dot.code.deobfuscators.MaxtoCode,MethodInfos,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MaxtoCode\MethodsDecrypter.cs,Decrypt3,The following statement contains a magic number: uint y = BitConverter.ToUInt32(encrypted' i * 8 + 4);
Magic Number,de4dot.code.deobfuscators.MaxtoCode,MethodInfos,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MaxtoCode\MethodsDecrypter.cs,Decrypt3,The following statement contains a magic number: uint y = BitConverter.ToUInt32(encrypted' i * 8 + 4);
Magic Number,de4dot.code.deobfuscators.MaxtoCode,MethodInfos,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MaxtoCode\MethodsDecrypter.cs,Decrypt3,The following statement contains a magic number: int shift1 = 32 - shift;
Magic Number,de4dot.code.deobfuscators.MaxtoCode,MethodInfos,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MaxtoCode\MethodsDecrypter.cs,Decrypt4,The following statement contains a magic number: var decrypted = new byte[encrypted.Length / 3 * 2 + 1];
Magic Number,de4dot.code.deobfuscators.MaxtoCode,MethodInfos,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MaxtoCode\MethodsDecrypter.cs,Decrypt4,The following statement contains a magic number: var decrypted = new byte[encrypted.Length / 3 * 2 + 1];
Magic Number,de4dot.code.deobfuscators.MaxtoCode,MethodInfos,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MaxtoCode\MethodsDecrypter.cs,Decrypt4,The following statement contains a magic number: int count = encrypted.Length / 3;
Magic Number,de4dot.code.deobfuscators.MaxtoCode,MethodInfos,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MaxtoCode\MethodsDecrypter.cs,Decrypt4,The following statement contains a magic number: byte k2 = mcKey.ReadByte(ki + 2);
Magic Number,de4dot.code.deobfuscators.MaxtoCode,MethodInfos,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MaxtoCode\MethodsDecrypter.cs,Decrypt4,The following statement contains a magic number: byte k3 = mcKey.ReadByte(ki + 3);
Magic Number,de4dot.code.deobfuscators.MaxtoCode,MethodInfos,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MaxtoCode\MethodsDecrypter.cs,Decrypt4,The following statement contains a magic number: decrypted[j++] = (byte)(((encrypted[i + 1] ^ k2) >> 4) | ((encrypted[i] ^ k1) & 0xF0));
Magic Number,de4dot.code.deobfuscators.MaxtoCode,MethodInfos,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MaxtoCode\MethodsDecrypter.cs,Decrypt4,The following statement contains a magic number: decrypted[j++] = (byte)(((encrypted[i + 1] ^ k2) << 4) | ((encrypted[i + 2] ^ k3) & 0x0F));
Magic Number,de4dot.code.deobfuscators.MaxtoCode,MethodInfos,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MaxtoCode\MethodsDecrypter.cs,Decrypt4,The following statement contains a magic number: decrypted[j++] = (byte)(((encrypted[i + 1] ^ k2) << 4) | ((encrypted[i + 2] ^ k3) & 0x0F));
Magic Number,de4dot.code.deobfuscators.MaxtoCode,MethodInfos,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MaxtoCode\MethodsDecrypter.cs,Decrypt4,The following statement contains a magic number: i += 3;
Magic Number,de4dot.code.deobfuscators.MaxtoCode,MethodInfos,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MaxtoCode\MethodsDecrypter.cs,Decrypt4,The following statement contains a magic number: ki += 4;
Magic Number,de4dot.code.deobfuscators.MaxtoCode,MethodInfos,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MaxtoCode\MethodsDecrypter.cs,Decrypt4,The following statement contains a magic number: (encrypted.Length % 3) != 0
Magic Number,de4dot.code.deobfuscators.MaxtoCode,MethodInfos,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MaxtoCode\MethodsDecrypter.cs,Decrypt8,The following statement contains a magic number: decrypted[i] = (byte)((b << 4) | (b >> 4));
Magic Number,de4dot.code.deobfuscators.MaxtoCode,MethodInfos,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MaxtoCode\MethodsDecrypter.cs,Decrypt8,The following statement contains a magic number: decrypted[i] = (byte)((b << 4) | (b >> 4));
Magic Number,de4dot.code.deobfuscators.MaxtoCode,MethodInfos,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MaxtoCode\MethodsDecrypter.cs,Decrypt9,The following statement contains a magic number: b = (byte)((b << 4) | (b >> 4));
Magic Number,de4dot.code.deobfuscators.MaxtoCode,MethodInfos,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MaxtoCode\MethodsDecrypter.cs,Decrypt9,The following statement contains a magic number: b = (byte)((b << 4) | (b >> 4));
Magic Number,de4dot.code.deobfuscators.MaxtoCode,MethodInfos,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MaxtoCode\MethodsDecrypter.cs,Decrypt9,The following statement contains a magic number: b = (byte)((b << 4) | (b >> 4));
Magic Number,de4dot.code.deobfuscators.MaxtoCode,MethodInfos,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MaxtoCode\MethodsDecrypter.cs,Decrypt9,The following statement contains a magic number: b = (byte)((b << 4) | (b >> 4));
Magic Number,de4dot.code.deobfuscators.MaxtoCode,MethodInfos,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MaxtoCode\MethodsDecrypter.cs,Decrypt10,The following statement contains a magic number: int halfSize = enc.Length / 2;
Magic Number,de4dot.code.deobfuscators.MaxtoCode,MethodInfos,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MaxtoCode\MethodsDecrypter.cs,Decrypt11,The following statement contains a magic number: switch (i % 3) {  					case 0:  						dest[i] = (byte)(encrypted[i] ^ mcKey.ReadByte(ki));  						break;    					case 1:  						b = (byte)(encrypted[i] ^ mcKey.ReadByte(ki));  						dest[i] = (byte)((b << 4) | (b >> 4));  						break;    					case 2:  						b = encrypted[i];  						dest[i] = (byte)((b << 4) | (b >> 4));  						break;  					}
Magic Number,de4dot.code.deobfuscators.MaxtoCode,MethodInfos,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MaxtoCode\MethodsDecrypter.cs,Decrypt11,The following statement contains a magic number: switch (i % 3) {  					case 0:  						dest[i] = (byte)(encrypted[i] ^ mcKey.ReadByte(ki));  						break;    					case 1:  						b = (byte)(encrypted[i] ^ mcKey.ReadByte(ki));  						dest[i] = (byte)((b << 4) | (b >> 4));  						break;    					case 2:  						b = encrypted[i];  						dest[i] = (byte)((b << 4) | (b >> 4));  						break;  					}
Magic Number,de4dot.code.deobfuscators.MaxtoCode,MethodInfos,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MaxtoCode\MethodsDecrypter.cs,Decrypt11,The following statement contains a magic number: switch (i % 3) {  					case 0:  						dest[i] = (byte)(encrypted[i] ^ mcKey.ReadByte(ki));  						break;    					case 1:  						b = (byte)(encrypted[i] ^ mcKey.ReadByte(ki));  						dest[i] = (byte)((b << 4) | (b >> 4));  						break;    					case 2:  						b = encrypted[i];  						dest[i] = (byte)((b << 4) | (b >> 4));  						break;  					}
Magic Number,de4dot.code.deobfuscators.MaxtoCode,MethodInfos,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MaxtoCode\MethodsDecrypter.cs,Decrypt11,The following statement contains a magic number: switch (i % 3) {  					case 0:  						dest[i] = (byte)(encrypted[i] ^ mcKey.ReadByte(ki));  						break;    					case 1:  						b = (byte)(encrypted[i] ^ mcKey.ReadByte(ki));  						dest[i] = (byte)((b << 4) | (b >> 4));  						break;    					case 2:  						b = encrypted[i];  						dest[i] = (byte)((b << 4) | (b >> 4));  						break;  					}
Magic Number,de4dot.code.deobfuscators.MaxtoCode,MethodInfos,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MaxtoCode\MethodsDecrypter.cs,Decrypt11,The following statement contains a magic number: switch (i % 3) {  					case 0:  						dest[i] = (byte)(encrypted[i] ^ mcKey.ReadByte(ki));  						break;    					case 1:  						b = (byte)(encrypted[i] ^ mcKey.ReadByte(ki));  						dest[i] = (byte)((b << 4) | (b >> 4));  						break;    					case 2:  						b = encrypted[i];  						dest[i] = (byte)((b << 4) | (b >> 4));  						break;  					}
Magic Number,de4dot.code.deobfuscators.MaxtoCode,MethodInfos,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MaxtoCode\MethodsDecrypter.cs,Decrypt11,The following statement contains a magic number: switch (i % 3) {  					case 0:  						dest[i] = (byte)(encrypted[i] ^ mcKey.ReadByte(ki));  						break;    					case 1:  						b = (byte)(encrypted[i] ^ mcKey.ReadByte(ki));  						dest[i] = (byte)((b << 4) | (b >> 4));  						break;    					case 2:  						b = encrypted[i];  						dest[i] = (byte)((b << 4) | (b >> 4));  						break;  					}
Magic Number,de4dot.code.deobfuscators.MaxtoCode,MethodInfos,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MaxtoCode\MethodsDecrypter.cs,GetBlowfishKey,The following statement contains a magic number: var key = new byte[100];
Magic Number,de4dot.code.deobfuscators.MaxtoCode,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MaxtoCode\StringDecrypter.cs,InitializeStrings,The following statement contains a magic number: ki += 2;
Magic Number,de4dot.code.deobfuscators.MaxtoCode,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MaxtoCode\StringDecrypter.cs,InitializeStrings,The following statement contains a magic number: soffs += 4;
Magic Number,de4dot.code.deobfuscators.MPRESS,Deobfuscator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MPRESS\Deobfuscator.cs,DetectInternal,The following statement contains a magic number: val += 100;
Magic Number,de4dot.code.deobfuscators.MPRESS,Deobfuscator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MPRESS\Deobfuscator.cs,DetectVersion,The following statement contains a magic number: module.Types.Count != 2
Magic Number,de4dot.code.deobfuscators.MPRESS,Deobfuscator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MPRESS\Deobfuscator.cs,GetDecryptedModule,The following statement contains a magic number: offset += 16;
Magic Number,de4dot.code.deobfuscators.MPRESS,Deobfuscator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MPRESS\Deobfuscator.cs,GetDecryptedModule,The following statement contains a magic number: switch (version) {  				case Version.V0x:  					compressedLen = fileData.Length - (int)offset;  					compressed = peImage.OffsetReadBytes(offset' compressedLen);  					decompressed = Lzmat.DecompressOld(compressed);  					if (decompressed == null)  						throw new ApplicationException("LZMAT decompression failed");  					break;    				case Version.V1x_217:  				case Version.V218:  					if (peImage.PEImage.ImageNTHeaders.FileHeader.Machine == Machine.AMD64 && version == Version.V218)  						offset = section.PointerToRawData + section.VirtualSize;  					int decompressedLen = (int)peImage.OffsetReadUInt32(offset);  					compressedLen = fileData.Length - (int)offset - 4;  					compressed = peImage.OffsetReadBytes(offset + 4' compressedLen);  					decompressed = new byte[decompressedLen];  					uint decompressedLen2;  					if (Lzmat.Decompress(decompressed' out decompressedLen2' compressed) != LzmatStatus.OK)  						throw new ApplicationException("LZMAT decompression failed");  					break;    				default:  					throw new ApplicationException("Unknown MPRESS version");  				}
Magic Number,de4dot.code.deobfuscators.MPRESS,Deobfuscator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MPRESS\Deobfuscator.cs,GetDecryptedModule,The following statement contains a magic number: switch (version) {  				case Version.V0x:  					compressedLen = fileData.Length - (int)offset;  					compressed = peImage.OffsetReadBytes(offset' compressedLen);  					decompressed = Lzmat.DecompressOld(compressed);  					if (decompressed == null)  						throw new ApplicationException("LZMAT decompression failed");  					break;    				case Version.V1x_217:  				case Version.V218:  					if (peImage.PEImage.ImageNTHeaders.FileHeader.Machine == Machine.AMD64 && version == Version.V218)  						offset = section.PointerToRawData + section.VirtualSize;  					int decompressedLen = (int)peImage.OffsetReadUInt32(offset);  					compressedLen = fileData.Length - (int)offset - 4;  					compressed = peImage.OffsetReadBytes(offset + 4' compressedLen);  					decompressed = new byte[decompressedLen];  					uint decompressedLen2;  					if (Lzmat.Decompress(decompressed' out decompressedLen2' compressed) != LzmatStatus.OK)  						throw new ApplicationException("LZMAT decompression failed");  					break;    				default:  					throw new ApplicationException("Unknown MPRESS version");  				}
Magic Number,de4dot.code.deobfuscators.MPRESS,Deobfuscator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MPRESS\Deobfuscator.cs,FixInvalidMvid,The following statement contains a magic number: var guid = new Guid(BitConverter.ToInt32(hash' 0)'  									BitConverter.ToInt16(hash' 4)'  									BitConverter.ToInt16(hash' 6)'  									hash[8]' hash[9]' hash[10]' hash[11]'  									hash[12]' hash[13]' hash[14]' hash[15]);
Magic Number,de4dot.code.deobfuscators.MPRESS,Deobfuscator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MPRESS\Deobfuscator.cs,FixInvalidMvid,The following statement contains a magic number: var guid = new Guid(BitConverter.ToInt32(hash' 0)'  									BitConverter.ToInt16(hash' 4)'  									BitConverter.ToInt16(hash' 6)'  									hash[8]' hash[9]' hash[10]' hash[11]'  									hash[12]' hash[13]' hash[14]' hash[15]);
Magic Number,de4dot.code.deobfuscators.MPRESS,Deobfuscator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MPRESS\Deobfuscator.cs,FixInvalidMvid,The following statement contains a magic number: var guid = new Guid(BitConverter.ToInt32(hash' 0)'  									BitConverter.ToInt16(hash' 4)'  									BitConverter.ToInt16(hash' 6)'  									hash[8]' hash[9]' hash[10]' hash[11]'  									hash[12]' hash[13]' hash[14]' hash[15]);
Magic Number,de4dot.code.deobfuscators.MPRESS,Deobfuscator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MPRESS\Deobfuscator.cs,FixInvalidMvid,The following statement contains a magic number: var guid = new Guid(BitConverter.ToInt32(hash' 0)'  									BitConverter.ToInt16(hash' 4)'  									BitConverter.ToInt16(hash' 6)'  									hash[8]' hash[9]' hash[10]' hash[11]'  									hash[12]' hash[13]' hash[14]' hash[15]);
Magic Number,de4dot.code.deobfuscators.MPRESS,Deobfuscator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MPRESS\Deobfuscator.cs,FixInvalidMvid,The following statement contains a magic number: var guid = new Guid(BitConverter.ToInt32(hash' 0)'  									BitConverter.ToInt16(hash' 4)'  									BitConverter.ToInt16(hash' 6)'  									hash[8]' hash[9]' hash[10]' hash[11]'  									hash[12]' hash[13]' hash[14]' hash[15]);
Magic Number,de4dot.code.deobfuscators.MPRESS,Deobfuscator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MPRESS\Deobfuscator.cs,FixInvalidMvid,The following statement contains a magic number: var guid = new Guid(BitConverter.ToInt32(hash' 0)'  									BitConverter.ToInt16(hash' 4)'  									BitConverter.ToInt16(hash' 6)'  									hash[8]' hash[9]' hash[10]' hash[11]'  									hash[12]' hash[13]' hash[14]' hash[15]);
Magic Number,de4dot.code.deobfuscators.MPRESS,Deobfuscator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MPRESS\Deobfuscator.cs,FixInvalidMvid,The following statement contains a magic number: var guid = new Guid(BitConverter.ToInt32(hash' 0)'  									BitConverter.ToInt16(hash' 4)'  									BitConverter.ToInt16(hash' 6)'  									hash[8]' hash[9]' hash[10]' hash[11]'  									hash[12]' hash[13]' hash[14]' hash[15]);
Magic Number,de4dot.code.deobfuscators.MPRESS,Deobfuscator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MPRESS\Deobfuscator.cs,FixInvalidMvid,The following statement contains a magic number: var guid = new Guid(BitConverter.ToInt32(hash' 0)'  									BitConverter.ToInt16(hash' 4)'  									BitConverter.ToInt16(hash' 6)'  									hash[8]' hash[9]' hash[10]' hash[11]'  									hash[12]' hash[13]' hash[14]' hash[15]);
Magic Number,de4dot.code.deobfuscators.MPRESS,Deobfuscator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MPRESS\Deobfuscator.cs,FixInvalidMvid,The following statement contains a magic number: var guid = new Guid(BitConverter.ToInt32(hash' 0)'  									BitConverter.ToInt16(hash' 4)'  									BitConverter.ToInt16(hash' 6)'  									hash[8]' hash[9]' hash[10]' hash[11]'  									hash[12]' hash[13]' hash[14]' hash[15]);
Magic Number,de4dot.code.deobfuscators.MPRESS,Deobfuscator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MPRESS\Deobfuscator.cs,FixInvalidMvid,The following statement contains a magic number: var guid = new Guid(BitConverter.ToInt32(hash' 0)'  									BitConverter.ToInt16(hash' 4)'  									BitConverter.ToInt16(hash' 6)'  									hash[8]' hash[9]' hash[10]' hash[11]'  									hash[12]' hash[13]' hash[14]' hash[15]);
Magic Number,de4dot.code.deobfuscators.MPRESS,Lzmat,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MPRESS\Lzmat.cs,Decompress,The following statement contains a magic number: dist = r_cnt>>2;
Magic Number,de4dot.code.deobfuscators.MPRESS,Lzmat,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MPRESS\Lzmat.cs,Decompress,The following statement contains a magic number: switch(r_cnt&3)  					{  					case 0:  						dist=(dist&LZMAT_DIST_MSK0)+1;  						break;  					case 1:  						inPos+=cur_nib;  						dist = (dist&LZMAT_DIST_MSK1)+0x41;  						cur_nib^=1;  						break;  					case 2:  						inPos++;  						dist += 0x441;  						break;  					case 3:  						if((inPos+2+cur_nib)>cbIn)  							return LzmatStatus.INTEGRITY_FAILURE+1;  						inPos++;  						dist = (dist +   							((uint)LZMAT_GET_U4(pbIn'ref inPos'ref cur_nib)<<14))  							+0x4441;  						break;  					}
Magic Number,de4dot.code.deobfuscators.MPRESS,Lzmat,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MPRESS\Lzmat.cs,Decompress,The following statement contains a magic number: switch(r_cnt&3)  					{  					case 0:  						dist=(dist&LZMAT_DIST_MSK0)+1;  						break;  					case 1:  						inPos+=cur_nib;  						dist = (dist&LZMAT_DIST_MSK1)+0x41;  						cur_nib^=1;  						break;  					case 2:  						inPos++;  						dist += 0x441;  						break;  					case 3:  						if((inPos+2+cur_nib)>cbIn)  							return LzmatStatus.INTEGRITY_FAILURE+1;  						inPos++;  						dist = (dist +   							((uint)LZMAT_GET_U4(pbIn'ref inPos'ref cur_nib)<<14))  							+0x4441;  						break;  					}
Magic Number,de4dot.code.deobfuscators.MPRESS,Lzmat,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MPRESS\Lzmat.cs,Decompress,The following statement contains a magic number: switch(r_cnt&3)  					{  					case 0:  						dist=(dist&LZMAT_DIST_MSK0)+1;  						break;  					case 1:  						inPos+=cur_nib;  						dist = (dist&LZMAT_DIST_MSK1)+0x41;  						cur_nib^=1;  						break;  					case 2:  						inPos++;  						dist += 0x441;  						break;  					case 3:  						if((inPos+2+cur_nib)>cbIn)  							return LzmatStatus.INTEGRITY_FAILURE+1;  						inPos++;  						dist = (dist +   							((uint)LZMAT_GET_U4(pbIn'ref inPos'ref cur_nib)<<14))  							+0x4441;  						break;  					}
Magic Number,de4dot.code.deobfuscators.MPRESS,Lzmat,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MPRESS\Lzmat.cs,Decompress,The following statement contains a magic number: switch(r_cnt&3)  					{  					case 0:  						dist=(dist&LZMAT_DIST_MSK0)+1;  						break;  					case 1:  						inPos+=cur_nib;  						dist = (dist&LZMAT_DIST_MSK1)+0x41;  						cur_nib^=1;  						break;  					case 2:  						inPos++;  						dist += 0x441;  						break;  					case 3:  						if((inPos+2+cur_nib)>cbIn)  							return LzmatStatus.INTEGRITY_FAILURE+1;  						inPos++;  						dist = (dist +   							((uint)LZMAT_GET_U4(pbIn'ref inPos'ref cur_nib)<<14))  							+0x4441;  						break;  					}
Magic Number,de4dot.code.deobfuscators.MPRESS,Lzmat,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MPRESS\Lzmat.cs,Decompress,The following statement contains a magic number: switch(r_cnt&3)  					{  					case 0:  						dist=(dist&LZMAT_DIST_MSK0)+1;  						break;  					case 1:  						inPos+=cur_nib;  						dist = (dist&LZMAT_DIST_MSK1)+0x41;  						cur_nib^=1;  						break;  					case 2:  						inPos++;  						dist += 0x441;  						break;  					case 3:  						if((inPos+2+cur_nib)>cbIn)  							return LzmatStatus.INTEGRITY_FAILURE+1;  						inPos++;  						dist = (dist +   							((uint)LZMAT_GET_U4(pbIn'ref inPos'ref cur_nib)<<14))  							+0x4441;  						break;  					}
Magic Number,de4dot.code.deobfuscators.MPRESS,Lzmat,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MPRESS\Lzmat.cs,Decompress,The following statement contains a magic number: r_cnt += 3;
Magic Number,de4dot.code.deobfuscators.MPRESS,Lzmat,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MPRESS\Lzmat.cs,Decompress,The following statement contains a magic number: return LzmatStatus.INTEGRITY_FAILURE+4;
Magic Number,de4dot.code.deobfuscators.MPRESS,Lzmat,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MPRESS\Lzmat.cs,Decompress,The following statement contains a magic number: bc<8 && inPos<(cbIn-cur_nib) && outPos<cbOutBuf
Magic Number,de4dot.code.deobfuscators.MPRESS,Lzmat,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MPRESS\Lzmat.cs,DecompressOld,The following statement contains a magic number: int srcIndex = 3;
Magic Number,de4dot.code.deobfuscators.MPRESS,Lzmat,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MPRESS\Lzmat.cs,DecompressOld,The following statement contains a magic number: int decompressedLen = compressed[0] + (compressed[1] << 8) + (compressed[2] << 16);
Magic Number,de4dot.code.deobfuscators.MPRESS,Lzmat,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MPRESS\Lzmat.cs,DecompressOld,The following statement contains a magic number: int decompressedLen = compressed[0] + (compressed[1] << 8) + (compressed[2] << 16);
Magic Number,de4dot.code.deobfuscators.MPRESS,Lzmat,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MPRESS\Lzmat.cs,DecompressOld,The following statement contains a magic number: int decompressedLen = compressed[0] + (compressed[1] << 8) + (compressed[2] << 16);
Magic Number,de4dot.code.deobfuscators.MPRESS,Lzmat,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MPRESS\Lzmat.cs,DecompressOld,The following statement contains a magic number: int partLen = compressed[srcIndex++] + (compressed[srcIndex++] << 8) + (compressed[srcIndex++] << 16);
Magic Number,de4dot.code.deobfuscators.MPRESS,Lzmat,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MPRESS\Lzmat.cs,DecompressOld,The following statement contains a magic number: int partLen = compressed[srcIndex++] + (compressed[srcIndex++] << 8) + (compressed[srcIndex++] << 16);
Magic Number,de4dot.code.deobfuscators.MPRESS,Lzmat,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MPRESS\Lzmat.cs,Lzmat_old,The following statement contains a magic number: ushort outPosDispl = (ushort)((((inBuf[inIndex + inPos + 1]) & 0xF) << 8) + inBuf[inIndex + inPos]);
Magic Number,de4dot.code.deobfuscators.MPRESS,Lzmat,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MPRESS\Lzmat.cs,Lzmat_old,The following statement contains a magic number: int r_cnt = (inBuf[inIndex + inPos++] >> 4) + 3;
Magic Number,de4dot.code.deobfuscators.MPRESS,Lzmat,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MPRESS\Lzmat.cs,Lzmat_old,The following statement contains a magic number: int r_cnt = (inBuf[inIndex + inPos++] >> 4) + 3;
Magic Number,de4dot.code.deobfuscators.MPRESS,Lzmat,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MPRESS\Lzmat.cs,Lzmat_old,The following statement contains a magic number: r_cnt = inBuf[inIndex + inPos++] + 18;
Magic Number,de4dot.code.deobfuscators.MPRESS,Lzmat,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MPRESS\Lzmat.cs,Lzmat_old,The following statement contains a magic number: r_cnt == 18
Magic Number,de4dot.code.deobfuscators.MPRESS,Lzmat,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MPRESS\Lzmat.cs,Lzmat_old,The following statement contains a magic number: inPos + 2 > inLen
Magic Number,de4dot.code.deobfuscators.MPRESS,Lzmat,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MPRESS\Lzmat.cs,Lzmat_old,The following statement contains a magic number: r_cnt = (inBuf[inIndex + inPos + 1] << 8) + inBuf[inIndex + inPos] + 0x111;
Magic Number,de4dot.code.deobfuscators.MPRESS,Lzmat,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MPRESS\Lzmat.cs,Lzmat_old,The following statement contains a magic number: inPos += 2;
Magic Number,de4dot.code.deobfuscators.MPRESS,Lzmat,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MPRESS\Lzmat.cs,Lzmat_old,The following statement contains a magic number: bc < 8 && inPos < inLen && outPos < outLen
Magic Number,de4dot.code.deobfuscators.Rummage,Deobfuscator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Rummage\Deobfuscator.cs,DetectInternal,The following statement contains a magic number: val += 100 + 10 * (sum - 1);
Magic Number,de4dot.code.deobfuscators.Rummage,Deobfuscator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Rummage\Deobfuscator.cs,DetectInternal,The following statement contains a magic number: val += 100 + 10 * (sum - 1);
Magic Number,de4dot.code.deobfuscators.Rummage,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Rummage\StringDecrypter.cs,GetStringInfo,The following statement contains a magic number: var stsfld = instrs[i + 2];
Magic Number,de4dot.code.deobfuscators.Rummage,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Rummage\StringDecrypter.cs,GetStringInfo,The following statement contains a magic number: i < instrs.Count - 2
Magic Number,de4dot.code.deobfuscators.Rummage,DecrypterBaseV11,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Rummage\StringDecrypter.cs,DecryptInternal,The following statement contains a magic number: DeobUtils.XteaDecrypt(ref v0' ref v1' key' 32);
Magic Number,de4dot.code.deobfuscators.Rummage,DecrypterBaseV11,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Rummage\StringDecrypter.cs,DecryptInternal,The following statement contains a magic number: var decrypted = new uint[(utf8Length + 11) / 8 * 2 - 1];
Magic Number,de4dot.code.deobfuscators.Rummage,DecrypterBaseV11,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Rummage\StringDecrypter.cs,DecryptInternal,The following statement contains a magic number: var decrypted = new uint[(utf8Length + 11) / 8 * 2 - 1];
Magic Number,de4dot.code.deobfuscators.Rummage,DecrypterBaseV11,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Rummage\StringDecrypter.cs,DecryptInternal,The following statement contains a magic number: var decrypted = new uint[(utf8Length + 11) / 8 * 2 - 1];
Magic Number,de4dot.code.deobfuscators.Rummage,DecrypterBaseV11,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Rummage\StringDecrypter.cs,DecryptInternal,The following statement contains a magic number: DeobUtils.XteaDecrypt(ref v0' ref v1' key' 32);
Magic Number,de4dot.code.deobfuscators.Rummage,DecrypterV11,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Rummage\StringDecrypter.cs,GetDispl,The following statement contains a magic number: var sub = instrs[i + 2];
Magic Number,de4dot.code.deobfuscators.Rummage,DecrypterV11,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Rummage\StringDecrypter.cs,GetDispl,The following statement contains a magic number: i < instrs.Count - 2
Magic Number,de4dot.code.deobfuscators.Rummage,DecrypterV11,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Rummage\StringDecrypter.cs,InitKey,The following statement contains a magic number: reader.BaseStream.Position = reader.BaseStream.Length - 48;
Magic Number,de4dot.code.deobfuscators.Rummage,DecrypterV11,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Rummage\StringDecrypter.cs,InitKey,The following statement contains a magic number: key = new uint[4];
Magic Number,de4dot.code.deobfuscators.Rummage,DecrypterV11,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Rummage\StringDecrypter.cs,Decrypt,The following statement contains a magic number: reader.BaseStream.Position = reader.BaseStream.Length + (stringId * 4 - fileDispl);
Magic Number,de4dot.code.deobfuscators.Rummage,DecrypterV21,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Rummage\StringDecrypter.cs,GetDispl,The following statement contains a magic number: !ldci4_1.IsLdcI4() || ldci4_1.GetLdcI4Value() != 4
Magic Number,de4dot.code.deobfuscators.Rummage,DecrypterV21,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Rummage\StringDecrypter.cs,GetDispl,The following statement contains a magic number: instrs[i + 2].OpCode.Code != Code.Conv_I8
Magic Number,de4dot.code.deobfuscators.Rummage,DecrypterV21,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Rummage\StringDecrypter.cs,GetDispl,The following statement contains a magic number: instrs[i + 3].OpCode.Code != Code.Add
Magic Number,de4dot.code.deobfuscators.Rummage,DecrypterV21,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Rummage\StringDecrypter.cs,GetDispl,The following statement contains a magic number: var ldci4 = instrs[i + 4];
Magic Number,de4dot.code.deobfuscators.Rummage,DecrypterV21,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Rummage\StringDecrypter.cs,GetDispl,The following statement contains a magic number: instrs[i + 5].OpCode.Code != Code.Conv_I8
Magic Number,de4dot.code.deobfuscators.Rummage,DecrypterV21,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Rummage\StringDecrypter.cs,GetDispl,The following statement contains a magic number: instrs[i + 6].OpCode.Code != Code.Sub
Magic Number,de4dot.code.deobfuscators.Rummage,DecrypterV21,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Rummage\StringDecrypter.cs,GetDispl,The following statement contains a magic number: i < instrs.Count - 6
Magic Number,de4dot.code.deobfuscators.Rummage,DecrypterV21,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Rummage\StringDecrypter.cs,InitKey,The following statement contains a magic number: reader.BaseStream.Position = baseOffs - 16;
Magic Number,de4dot.code.deobfuscators.Rummage,DecrypterV21,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Rummage\StringDecrypter.cs,InitKey,The following statement contains a magic number: key = new uint[4];
Magic Number,de4dot.code.deobfuscators.Rummage,DecrypterV21,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Rummage\StringDecrypter.cs,InitializeBaseOffs,The following statement contains a magic number: reader.BaseStream.Position -= buf.Length * 2 - 0x20;
Magic Number,de4dot.code.deobfuscators.Rummage,DecrypterV21,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Rummage\StringDecrypter.cs,Decrypt,The following statement contains a magic number: reader.BaseStream.Position = baseOffs + stringId * 4 - fileDispl;
Magic Number,de4dot.code.deobfuscators.Skater_NET,Deobfuscator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Skater_NET\Deobfuscator.cs,DetectInternal,The following statement contains a magic number: val += 100;
Magic Number,de4dot.code.deobfuscators.Skater_NET,EnumClassFinder,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Skater_NET\EnumClassFinder.cs,Deobfuscate,The following statement contains a magic number: var stfld = instrs[i + 2];
Magic Number,de4dot.code.deobfuscators.Skater_NET,EnumClassFinder,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Skater_NET\EnumClassFinder.cs,Deobfuscate,The following statement contains a magic number: block.Remove(i' 3);
Magic Number,de4dot.code.deobfuscators.Skater_NET,EnumClassFinder,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Skater_NET\EnumClassFinder.cs,Deobfuscate,The following statement contains a magic number: i < instrs.Count - 2
Magic Number,de4dot.code.deobfuscators.Skater_NET,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Skater_NET\StringDecrypter.cs,Initialize,The following statement contains a magic number: instrs[i + 2].OpCode.Code != Code.Ldsfld
Magic Number,de4dot.code.deobfuscators.Skater_NET,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Skater_NET\StringDecrypter.cs,Initialize,The following statement contains a magic number: instrs[i + 3].OpCode.Code != Code.Call
Magic Number,de4dot.code.deobfuscators.Skater_NET,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Skater_NET\StringDecrypter.cs,Initialize,The following statement contains a magic number: instrs[i + 4].OpCode.Code != Code.Stsfld
Magic Number,de4dot.code.deobfuscators.Skater_NET,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Skater_NET\StringDecrypter.cs,Initialize,The following statement contains a magic number: var field = instrs[i + 4].Operand as FieldDef;
Magic Number,de4dot.code.deobfuscators.Skater_NET,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Skater_NET\StringDecrypter.cs,Initialize,The following statement contains a magic number: i < instrs.Count - 4
Magic Number,de4dot.code.deobfuscators.Skater_NET,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Skater_NET\StringDecrypter.cs,CheckMethodV1,The following statement contains a magic number: var key = passwordBytes.GetBytes(16);
Magic Number,de4dot.code.deobfuscators.Skater_NET,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Skater_NET\StringDecrypter.cs,CheckMethodV1,The following statement contains a magic number: var iv = passwordBytes.GetBytes(8);
Magic Number,de4dot.code.deobfuscators.Skater_NET,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Skater_NET\StringDecrypter.cs,FixSalt,The following statement contains a magic number: s.Length < 10 || s.Length > 30 || s.Length / 2 * 2 != s.Length
Magic Number,de4dot.code.deobfuscators.Skater_NET,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Skater_NET\StringDecrypter.cs,FixSalt,The following statement contains a magic number: s.Length < 10 || s.Length > 30 || s.Length / 2 * 2 != s.Length
Magic Number,de4dot.code.deobfuscators.Skater_NET,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Skater_NET\StringDecrypter.cs,FixSalt,The following statement contains a magic number: s.Length < 10 || s.Length > 30 || s.Length / 2 * 2 != s.Length
Magic Number,de4dot.code.deobfuscators.Skater_NET,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Skater_NET\StringDecrypter.cs,FixSalt,The following statement contains a magic number: s.Length < 10 || s.Length > 30 || s.Length / 2 * 2 != s.Length
Magic Number,de4dot.code.deobfuscators.Skater_NET,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Skater_NET\StringDecrypter.cs,FixSalt,The following statement contains a magic number: var saltAry = new byte[(int)Math.Round((double)s2.Length / 2 - 1) + 1];
Magic Number,de4dot.code.deobfuscators.Skater_NET,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Skater_NET\StringDecrypter.cs,FixSalt,The following statement contains a magic number: !int.TryParse(s2.Substring(i * 2' 2)' NumberStyles.AllowHexSpecifier' null' out int result)
Magic Number,de4dot.code.deobfuscators.Skater_NET,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Skater_NET\StringDecrypter.cs,FixSalt,The following statement contains a magic number: !int.TryParse(s2.Substring(i * 2' 2)' NumberStyles.AllowHexSpecifier' null' out int result)
Magic Number,de4dot.code.deobfuscators.Skater_NET,DecrypterV2,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Skater_NET\StringDecrypter.cs,Decrypt,The following statement contains a magic number: ints.Length % 3 != 0
Magic Number,de4dot.code.deobfuscators.Skater_NET,DecrypterV2,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Skater_NET\StringDecrypter.cs,Decrypt,The following statement contains a magic number: var sb = new StringBuilder(ints.Length / 3);
Magic Number,de4dot.code.deobfuscators.Skater_NET,DecrypterV2,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Skater_NET\StringDecrypter.cs,Decrypt,The following statement contains a magic number: (double)val2 / 2.0 == Math.Round((double)val2 / 2.0)
Magic Number,de4dot.code.deobfuscators.Skater_NET,DecrypterV2,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Skater_NET\StringDecrypter.cs,Decrypt,The following statement contains a magic number: (double)val2 / 2.0 == Math.Round((double)val2 / 2.0)
Magic Number,de4dot.code.deobfuscators.SmartAssembly,AssemblyResolverInfo,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\SmartAssembly\AssemblyResolverInfo.cs,InitInfos,The following statement contains a magic number: strings.Length % 2 == 1
Magic Number,de4dot.code.deobfuscators.SmartAssembly,AutomatedErrorReportingFinder,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\SmartAssembly\AutomatedErrorReportingFinder.cs,IsExceptionLoggerMethod,The following statement contains a magic number: var type1 = sig.Params.Count < 2 ? "" : sig.Params[1].GetFullName();
Magic Number,de4dot.code.deobfuscators.SmartAssembly,AutomatedErrorReportingFinder,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\SmartAssembly\AutomatedErrorReportingFinder.cs,IsExceptionLoggerMethod,The following statement contains a magic number: index = 2;
Magic Number,de4dot.code.deobfuscators.SmartAssembly,Deobfuscator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\SmartAssembly\Deobfuscator.cs,DetectInternal,The following statement contains a magic number: val += 100;
Magic Number,de4dot.code.deobfuscators.SmartAssembly,Deobfuscator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\SmartAssembly\Deobfuscator.cs,DetectInternal,The following statement contains a magic number: val += 10;
Magic Number,de4dot.code.deobfuscators.SmartAssembly,Deobfuscator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\SmartAssembly\Deobfuscator.cs,InitializeVersion,The following statement contains a magic number: val.Groups.Count < 6
Magic Number,de4dot.code.deobfuscators.SmartAssembly,Deobfuscator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\SmartAssembly\Deobfuscator.cs,InitializeVersion,The following statement contains a magic number: approxVersion = new Version(int.Parse(val.Groups[2].ToString())'  										int.Parse(val.Groups[3].ToString())'  										int.Parse(val.Groups[4].ToString())'  										int.Parse(val.Groups[5].ToString()));
Magic Number,de4dot.code.deobfuscators.SmartAssembly,Deobfuscator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\SmartAssembly\Deobfuscator.cs,InitializeVersion,The following statement contains a magic number: approxVersion = new Version(int.Parse(val.Groups[2].ToString())'  										int.Parse(val.Groups[3].ToString())'  										int.Parse(val.Groups[4].ToString())'  										int.Parse(val.Groups[5].ToString()));
Magic Number,de4dot.code.deobfuscators.SmartAssembly,Deobfuscator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\SmartAssembly\Deobfuscator.cs,InitializeVersion,The following statement contains a magic number: approxVersion = new Version(int.Parse(val.Groups[2].ToString())'  										int.Parse(val.Groups[3].ToString())'  										int.Parse(val.Groups[4].ToString())'  										int.Parse(val.Groups[5].ToString()));
Magic Number,de4dot.code.deobfuscators.SmartAssembly,Deobfuscator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\SmartAssembly\Deobfuscator.cs,InitializeVersion,The following statement contains a magic number: approxVersion = new Version(int.Parse(val.Groups[2].ToString())'  										int.Parse(val.Groups[3].ToString())'  										int.Parse(val.Groups[4].ToString())'  										int.Parse(val.Groups[5].ToString()));
Magic Number,de4dot.code.deobfuscators.SmartAssembly,Deobfuscator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\SmartAssembly\Deobfuscator.cs,GuessVersion,The following statement contains a magic number: approxVersion = new Version(5' 0' 0' 0);
Magic Number,de4dot.code.deobfuscators.SmartAssembly,Deobfuscator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\SmartAssembly\Deobfuscator.cs,GuessVersion,The following statement contains a magic number: approxVersion = new Version(4' 0' 0' 0);
Magic Number,de4dot.code.deobfuscators.SmartAssembly,Deobfuscator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\SmartAssembly\Deobfuscator.cs,GuessVersion,The following statement contains a magic number: approxVersion = new Version(2' 0' 0' 0);
Magic Number,de4dot.code.deobfuscators.SmartAssembly,Deobfuscator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\SmartAssembly\Deobfuscator.cs,GuessVersion,The following statement contains a magic number: ver == 2
Magic Number,de4dot.code.deobfuscators.SmartAssembly,Deobfuscator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\SmartAssembly\Deobfuscator.cs,GuessVersion,The following statement contains a magic number: approxVersion = new Version(3' 0' 0' 0);
Magic Number,de4dot.code.deobfuscators.SmartAssembly,Deobfuscator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\SmartAssembly\Deobfuscator.cs,CheckTypeIdAttribute,The following statement contains a magic number: return 2;
Magic Number,de4dot.code.deobfuscators.SmartAssembly,Deobfuscator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\SmartAssembly\Deobfuscator.cs,CheckTypeIdAttribute,The following statement contains a magic number: fields.Count == 2
Magic Number,de4dot.code.deobfuscators.SmartAssembly,Deobfuscator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\SmartAssembly\Deobfuscator.cs,GetTypeIdAttribute,The following statement contains a magic number: attrs.Count == 1 && counter >= 30
Magic Number,de4dot.code.deobfuscators.SmartAssembly,Deobfuscator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\SmartAssembly\Deobfuscator.cs,InitStringDecrypterInfos,The following statement contains a magic number: i < 2
Magic Number,de4dot.code.deobfuscators.SmartAssembly,Deobfuscator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\SmartAssembly\Deobfuscator.cs,FindBigType,The following statement contains a magic number: approxVersion <= new Version(6' 5' 3' 53)
Magic Number,de4dot.code.deobfuscators.SmartAssembly,Deobfuscator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\SmartAssembly\Deobfuscator.cs,FindBigType,The following statement contains a magic number: approxVersion <= new Version(6' 5' 3' 53)
Magic Number,de4dot.code.deobfuscators.SmartAssembly,Deobfuscator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\SmartAssembly\Deobfuscator.cs,FindBigType,The following statement contains a magic number: approxVersion <= new Version(6' 5' 3' 53)
Magic Number,de4dot.code.deobfuscators.SmartAssembly,Deobfuscator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\SmartAssembly\Deobfuscator.cs,FindBigType,The following statement contains a magic number: approxVersion <= new Version(6' 5' 3' 53)
Magic Number,de4dot.code.deobfuscators.SmartAssembly,Deobfuscator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\SmartAssembly\Deobfuscator.cs,IsBigType,The following statement contains a magic number: type.Methods.Count < 50
Magic Number,de4dot.code.deobfuscators.SmartAssembly,Deobfuscator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\SmartAssembly\Deobfuscator.cs,IsBigType,The following statement contains a magic number: type.Fields.Count > 3
Magic Number,de4dot.code.deobfuscators.SmartAssembly,MemoryManagerInfo,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\SmartAssembly\MemoryManagerInfo.cs,CheckMemoryManagerType,The following statement contains a magic number: fields != 2
Magic Number,de4dot.code.deobfuscators.SmartAssembly,ProxyCallFixer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\SmartAssembly\ProxyCallFixer.cs,CheckCctor,The following statement contains a magic number: instrs.Count > 10
Magic Number,de4dot.code.deobfuscators.SmartAssembly,ProxyCallFixer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\SmartAssembly\ProxyCallFixer.cs,CheckCctor,The following statement contains a magic number: instrs.Count != 3
Magic Number,de4dot.code.deobfuscators.SmartAssembly,ProxyCallFixer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\SmartAssembly\ProxyCallFixer.cs,CheckCctor,The following statement contains a magic number: instrs.Count != 3
Magic Number,de4dot.code.deobfuscators.SmartAssembly,ProxyCallFixer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\SmartAssembly\ProxyCallFixer.cs,CheckCctor,The following statement contains a magic number: instrs[2].OpCode != OpCodes.Ret
Magic Number,de4dot.code.deobfuscators.SmartAssembly,ResolverInfoBase,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\SmartAssembly\ResolverInfoBase.cs,GetResolverHandlers,The following statement contains a magic number: var ldftn = instrs[2];
Magic Number,de4dot.code.deobfuscators.SmartAssembly,ResolverInfoBase,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\SmartAssembly\ResolverInfoBase.cs,GetResolverHandlers,The following statement contains a magic number: var newobj = instrs[3];
Magic Number,de4dot.code.deobfuscators.SmartAssembly,ResolverInfoBase,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\SmartAssembly\ResolverInfoBase.cs,GetResolverHandlers,The following statement contains a magic number: var callvirt = instrs[4];
Magic Number,de4dot.code.deobfuscators.SmartAssembly,ResourceDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\SmartAssembly\ResourceDecrypter.cs,Decrypt,The following statement contains a magic number: byte encryption = (byte)(headerMagic >> 24);
Magic Number,de4dot.code.deobfuscators.SmartAssembly,ResourceDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\SmartAssembly\ResourceDecrypter.cs,Decrypt,The following statement contains a magic number: switch (encryption) {  			case 1:  				int totalInflatedLength = reader.ReadInt32();  				if (totalInflatedLength < 0)  					throw new ApplicationException("Invalid length");  				var inflatedBytes = new byte[totalInflatedLength];  				int partInflatedLength;  				for (int inflateOffset = 0; inflateOffset < totalInflatedLength; inflateOffset += partInflatedLength) {  					int partLength = reader.ReadInt32();  					partInflatedLength = reader.ReadInt32();  					if (partLength < 0 || partInflatedLength < 0)  						throw new ApplicationException("Invalid length");  					var inflater = new Inflater(true);  					inflater.SetInput(encryptedData' checked((int)reader.BaseStream.Position)' partLength);  					reader.BaseStream.Seek(partLength' SeekOrigin.Current);  					int realInflatedLen = inflater.Inflate(inflatedBytes' inflateOffset' inflatedBytes.Length - inflateOffset);  					if (realInflatedLen != partInflatedLength)  						throw new ApplicationException("Could not inflate");  				}  				return inflatedBytes;    			case 2:  				if (resourceDecrypterInfo.DES_Key == null || resourceDecrypterInfo.DES_IV == null)  					throw new ApplicationException("DES key / iv have not been set yet");  				using (var provider = new DESCryptoServiceProvider()) {  					provider.Key = resourceDecrypterInfo.DES_Key;  					provider.IV  = resourceDecrypterInfo.DES_IV;  					using (var transform = provider.CreateDecryptor()) {  						return Decrypt(transform.TransformFinalBlock(encryptedData' 4' encryptedData.Length - 4));  					}  				}    			case 3:  				if (resourceDecrypterInfo.AES_Key == null || resourceDecrypterInfo.AES_IV == null)  					throw new ApplicationException("AES key / iv have not been set yet");  				using (var provider = new RijndaelManaged()) {  					provider.Key = resourceDecrypterInfo.AES_Key;  					provider.IV  = resourceDecrypterInfo.AES_IV;  					using (var transform = provider.CreateDecryptor()) {  						return Decrypt(transform.TransformFinalBlock(encryptedData' 4' encryptedData.Length - 4));  					}  				}    			default:  				throw new ApplicationException($"Unknown encryption type 0x{encryption:X2}");  			}
Magic Number,de4dot.code.deobfuscators.SmartAssembly,ResourceDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\SmartAssembly\ResourceDecrypter.cs,Decrypt,The following statement contains a magic number: switch (encryption) {  			case 1:  				int totalInflatedLength = reader.ReadInt32();  				if (totalInflatedLength < 0)  					throw new ApplicationException("Invalid length");  				var inflatedBytes = new byte[totalInflatedLength];  				int partInflatedLength;  				for (int inflateOffset = 0; inflateOffset < totalInflatedLength; inflateOffset += partInflatedLength) {  					int partLength = reader.ReadInt32();  					partInflatedLength = reader.ReadInt32();  					if (partLength < 0 || partInflatedLength < 0)  						throw new ApplicationException("Invalid length");  					var inflater = new Inflater(true);  					inflater.SetInput(encryptedData' checked((int)reader.BaseStream.Position)' partLength);  					reader.BaseStream.Seek(partLength' SeekOrigin.Current);  					int realInflatedLen = inflater.Inflate(inflatedBytes' inflateOffset' inflatedBytes.Length - inflateOffset);  					if (realInflatedLen != partInflatedLength)  						throw new ApplicationException("Could not inflate");  				}  				return inflatedBytes;    			case 2:  				if (resourceDecrypterInfo.DES_Key == null || resourceDecrypterInfo.DES_IV == null)  					throw new ApplicationException("DES key / iv have not been set yet");  				using (var provider = new DESCryptoServiceProvider()) {  					provider.Key = resourceDecrypterInfo.DES_Key;  					provider.IV  = resourceDecrypterInfo.DES_IV;  					using (var transform = provider.CreateDecryptor()) {  						return Decrypt(transform.TransformFinalBlock(encryptedData' 4' encryptedData.Length - 4));  					}  				}    			case 3:  				if (resourceDecrypterInfo.AES_Key == null || resourceDecrypterInfo.AES_IV == null)  					throw new ApplicationException("AES key / iv have not been set yet");  				using (var provider = new RijndaelManaged()) {  					provider.Key = resourceDecrypterInfo.AES_Key;  					provider.IV  = resourceDecrypterInfo.AES_IV;  					using (var transform = provider.CreateDecryptor()) {  						return Decrypt(transform.TransformFinalBlock(encryptedData' 4' encryptedData.Length - 4));  					}  				}    			default:  				throw new ApplicationException($"Unknown encryption type 0x{encryption:X2}");  			}
Magic Number,de4dot.code.deobfuscators.SmartAssembly,ResourceDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\SmartAssembly\ResourceDecrypter.cs,Decrypt,The following statement contains a magic number: switch (encryption) {  			case 1:  				int totalInflatedLength = reader.ReadInt32();  				if (totalInflatedLength < 0)  					throw new ApplicationException("Invalid length");  				var inflatedBytes = new byte[totalInflatedLength];  				int partInflatedLength;  				for (int inflateOffset = 0; inflateOffset < totalInflatedLength; inflateOffset += partInflatedLength) {  					int partLength = reader.ReadInt32();  					partInflatedLength = reader.ReadInt32();  					if (partLength < 0 || partInflatedLength < 0)  						throw new ApplicationException("Invalid length");  					var inflater = new Inflater(true);  					inflater.SetInput(encryptedData' checked((int)reader.BaseStream.Position)' partLength);  					reader.BaseStream.Seek(partLength' SeekOrigin.Current);  					int realInflatedLen = inflater.Inflate(inflatedBytes' inflateOffset' inflatedBytes.Length - inflateOffset);  					if (realInflatedLen != partInflatedLength)  						throw new ApplicationException("Could not inflate");  				}  				return inflatedBytes;    			case 2:  				if (resourceDecrypterInfo.DES_Key == null || resourceDecrypterInfo.DES_IV == null)  					throw new ApplicationException("DES key / iv have not been set yet");  				using (var provider = new DESCryptoServiceProvider()) {  					provider.Key = resourceDecrypterInfo.DES_Key;  					provider.IV  = resourceDecrypterInfo.DES_IV;  					using (var transform = provider.CreateDecryptor()) {  						return Decrypt(transform.TransformFinalBlock(encryptedData' 4' encryptedData.Length - 4));  					}  				}    			case 3:  				if (resourceDecrypterInfo.AES_Key == null || resourceDecrypterInfo.AES_IV == null)  					throw new ApplicationException("AES key / iv have not been set yet");  				using (var provider = new RijndaelManaged()) {  					provider.Key = resourceDecrypterInfo.AES_Key;  					provider.IV  = resourceDecrypterInfo.AES_IV;  					using (var transform = provider.CreateDecryptor()) {  						return Decrypt(transform.TransformFinalBlock(encryptedData' 4' encryptedData.Length - 4));  					}  				}    			default:  				throw new ApplicationException($"Unknown encryption type 0x{encryption:X2}");  			}
Magic Number,de4dot.code.deobfuscators.SmartAssembly,ResourceDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\SmartAssembly\ResourceDecrypter.cs,Decrypt,The following statement contains a magic number: switch (encryption) {  			case 1:  				int totalInflatedLength = reader.ReadInt32();  				if (totalInflatedLength < 0)  					throw new ApplicationException("Invalid length");  				var inflatedBytes = new byte[totalInflatedLength];  				int partInflatedLength;  				for (int inflateOffset = 0; inflateOffset < totalInflatedLength; inflateOffset += partInflatedLength) {  					int partLength = reader.ReadInt32();  					partInflatedLength = reader.ReadInt32();  					if (partLength < 0 || partInflatedLength < 0)  						throw new ApplicationException("Invalid length");  					var inflater = new Inflater(true);  					inflater.SetInput(encryptedData' checked((int)reader.BaseStream.Position)' partLength);  					reader.BaseStream.Seek(partLength' SeekOrigin.Current);  					int realInflatedLen = inflater.Inflate(inflatedBytes' inflateOffset' inflatedBytes.Length - inflateOffset);  					if (realInflatedLen != partInflatedLength)  						throw new ApplicationException("Could not inflate");  				}  				return inflatedBytes;    			case 2:  				if (resourceDecrypterInfo.DES_Key == null || resourceDecrypterInfo.DES_IV == null)  					throw new ApplicationException("DES key / iv have not been set yet");  				using (var provider = new DESCryptoServiceProvider()) {  					provider.Key = resourceDecrypterInfo.DES_Key;  					provider.IV  = resourceDecrypterInfo.DES_IV;  					using (var transform = provider.CreateDecryptor()) {  						return Decrypt(transform.TransformFinalBlock(encryptedData' 4' encryptedData.Length - 4));  					}  				}    			case 3:  				if (resourceDecrypterInfo.AES_Key == null || resourceDecrypterInfo.AES_IV == null)  					throw new ApplicationException("AES key / iv have not been set yet");  				using (var provider = new RijndaelManaged()) {  					provider.Key = resourceDecrypterInfo.AES_Key;  					provider.IV  = resourceDecrypterInfo.AES_IV;  					using (var transform = provider.CreateDecryptor()) {  						return Decrypt(transform.TransformFinalBlock(encryptedData' 4' encryptedData.Length - 4));  					}  				}    			default:  				throw new ApplicationException($"Unknown encryption type 0x{encryption:X2}");  			}
Magic Number,de4dot.code.deobfuscators.SmartAssembly,ResourceDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\SmartAssembly\ResourceDecrypter.cs,Decrypt,The following statement contains a magic number: switch (encryption) {  			case 1:  				int totalInflatedLength = reader.ReadInt32();  				if (totalInflatedLength < 0)  					throw new ApplicationException("Invalid length");  				var inflatedBytes = new byte[totalInflatedLength];  				int partInflatedLength;  				for (int inflateOffset = 0; inflateOffset < totalInflatedLength; inflateOffset += partInflatedLength) {  					int partLength = reader.ReadInt32();  					partInflatedLength = reader.ReadInt32();  					if (partLength < 0 || partInflatedLength < 0)  						throw new ApplicationException("Invalid length");  					var inflater = new Inflater(true);  					inflater.SetInput(encryptedData' checked((int)reader.BaseStream.Position)' partLength);  					reader.BaseStream.Seek(partLength' SeekOrigin.Current);  					int realInflatedLen = inflater.Inflate(inflatedBytes' inflateOffset' inflatedBytes.Length - inflateOffset);  					if (realInflatedLen != partInflatedLength)  						throw new ApplicationException("Could not inflate");  				}  				return inflatedBytes;    			case 2:  				if (resourceDecrypterInfo.DES_Key == null || resourceDecrypterInfo.DES_IV == null)  					throw new ApplicationException("DES key / iv have not been set yet");  				using (var provider = new DESCryptoServiceProvider()) {  					provider.Key = resourceDecrypterInfo.DES_Key;  					provider.IV  = resourceDecrypterInfo.DES_IV;  					using (var transform = provider.CreateDecryptor()) {  						return Decrypt(transform.TransformFinalBlock(encryptedData' 4' encryptedData.Length - 4));  					}  				}    			case 3:  				if (resourceDecrypterInfo.AES_Key == null || resourceDecrypterInfo.AES_IV == null)  					throw new ApplicationException("AES key / iv have not been set yet");  				using (var provider = new RijndaelManaged()) {  					provider.Key = resourceDecrypterInfo.AES_Key;  					provider.IV  = resourceDecrypterInfo.AES_IV;  					using (var transform = provider.CreateDecryptor()) {  						return Decrypt(transform.TransformFinalBlock(encryptedData' 4' encryptedData.Length - 4));  					}  				}    			default:  				throw new ApplicationException($"Unknown encryption type 0x{encryption:X2}");  			}
Magic Number,de4dot.code.deobfuscators.SmartAssembly,ResourceDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\SmartAssembly\ResourceDecrypter.cs,Decrypt,The following statement contains a magic number: switch (encryption) {  			case 1:  				int totalInflatedLength = reader.ReadInt32();  				if (totalInflatedLength < 0)  					throw new ApplicationException("Invalid length");  				var inflatedBytes = new byte[totalInflatedLength];  				int partInflatedLength;  				for (int inflateOffset = 0; inflateOffset < totalInflatedLength; inflateOffset += partInflatedLength) {  					int partLength = reader.ReadInt32();  					partInflatedLength = reader.ReadInt32();  					if (partLength < 0 || partInflatedLength < 0)  						throw new ApplicationException("Invalid length");  					var inflater = new Inflater(true);  					inflater.SetInput(encryptedData' checked((int)reader.BaseStream.Position)' partLength);  					reader.BaseStream.Seek(partLength' SeekOrigin.Current);  					int realInflatedLen = inflater.Inflate(inflatedBytes' inflateOffset' inflatedBytes.Length - inflateOffset);  					if (realInflatedLen != partInflatedLength)  						throw new ApplicationException("Could not inflate");  				}  				return inflatedBytes;    			case 2:  				if (resourceDecrypterInfo.DES_Key == null || resourceDecrypterInfo.DES_IV == null)  					throw new ApplicationException("DES key / iv have not been set yet");  				using (var provider = new DESCryptoServiceProvider()) {  					provider.Key = resourceDecrypterInfo.DES_Key;  					provider.IV  = resourceDecrypterInfo.DES_IV;  					using (var transform = provider.CreateDecryptor()) {  						return Decrypt(transform.TransformFinalBlock(encryptedData' 4' encryptedData.Length - 4));  					}  				}    			case 3:  				if (resourceDecrypterInfo.AES_Key == null || resourceDecrypterInfo.AES_IV == null)  					throw new ApplicationException("AES key / iv have not been set yet");  				using (var provider = new RijndaelManaged()) {  					provider.Key = resourceDecrypterInfo.AES_Key;  					provider.IV  = resourceDecrypterInfo.AES_IV;  					using (var transform = provider.CreateDecryptor()) {  						return Decrypt(transform.TransformFinalBlock(encryptedData' 4' encryptedData.Length - 4));  					}  				}    			default:  				throw new ApplicationException($"Unknown encryption type 0x{encryption:X2}");  			}
Magic Number,de4dot.code.deobfuscators.SmartAssembly,ResourceDecrypterInfo,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\SmartAssembly\ResourceDecrypterInfo.cs,Initialize,The following statement contains a magic number: var desList = new List<byte[]>(2);
Magic Number,de4dot.code.deobfuscators.SmartAssembly,ResourceDecrypterInfo,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\SmartAssembly\ResourceDecrypterInfo.cs,Initialize,The following statement contains a magic number: var aesList = new List<byte[]>(2);
Magic Number,de4dot.code.deobfuscators.SmartAssembly,ResourceDecrypterInfo,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\SmartAssembly\ResourceDecrypterInfo.cs,Initialize,The following statement contains a magic number: field.InitialValue.Length == 8
Magic Number,de4dot.code.deobfuscators.SmartAssembly,ResourceDecrypterInfo,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\SmartAssembly\ResourceDecrypterInfo.cs,Initialize,The following statement contains a magic number: i <= instructions.Count - 2
Magic Number,de4dot.code.deobfuscators.SmartAssembly,ResourceDecrypterInfo,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\SmartAssembly\ResourceDecrypterInfo.cs,Initialize,The following statement contains a magic number: DES_Key = desList[desList.Count - 2];
Magic Number,de4dot.code.deobfuscators.SmartAssembly,ResourceDecrypterInfo,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\SmartAssembly\ResourceDecrypterInfo.cs,Initialize,The following statement contains a magic number: desList.Count >= 2
Magic Number,de4dot.code.deobfuscators.SmartAssembly,ResourceDecrypterInfo,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\SmartAssembly\ResourceDecrypterInfo.cs,Initialize,The following statement contains a magic number: AES_Key = aesList[aesList.Count - 2];
Magic Number,de4dot.code.deobfuscators.SmartAssembly,ResourceDecrypterInfo,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\SmartAssembly\ResourceDecrypterInfo.cs,Initialize,The following statement contains a magic number: aesList.Count >= 2
Magic Number,de4dot.code.deobfuscators.SmartAssembly,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\SmartAssembly\StringDecrypter.cs,Decrypt,The following statement contains a magic number: switch (StringDecrypterInfo.DecrypterVersion) {  			case StringDecrypterVersion.V1:  				// Some weird problem with 1.x decrypted strings. They all have a \x01 char at the end.  				var buf = Convert.FromBase64String(Encoding.ASCII.GetString(decryptedData' index' len));  				if (buf.Length % 2 != 0)  					Array.Resize(ref buf' buf.Length - 1);  				return Encoding.Unicode.GetString(buf);    			case StringDecrypterVersion.V2:  				return Encoding.UTF8.GetString(Convert.FromBase64String(Encoding.ASCII.GetString(decryptedData' index' len)));    			default:  				return Encoding.UTF8.GetString(Convert.FromBase64String(Encoding.UTF8.GetString(decryptedData' index' len)));  			}
Magic Number,de4dot.code.deobfuscators.SmartAssembly,StringDecrypterInfo,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\SmartAssembly\StringDecrypterInfo.cs,Initialize,The following statement contains a magic number: stringOffset ^= ((int)pkt.Data[i] << 8) + pkt.Data[i + 1];
Magic Number,de4dot.code.deobfuscators.SmartAssembly,StringDecrypterInfo,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\SmartAssembly\StringDecrypterInfo.cs,FindOffsetField,The following statement contains a magic number: i <= instructions.Count - 2
Magic Number,de4dot.code.deobfuscators.SmartAssembly,StringDecrypterInfo,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\SmartAssembly\StringDecrypterInfo.cs,FindOffsetValue,The following statement contains a magic number: i <= instructions.Count - 2
Magic Number,de4dot.code.deobfuscators.SmartAssembly,StringDecrypterInfo,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\SmartAssembly\StringDecrypterInfo.cs,FindSimpleZipTypeMethod,The following statement contains a magic number: i <= instructions.Count - 2
Magic Number,de4dot.code.deobfuscators.SmartAssembly,StringDecrypterInfo,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\SmartAssembly\StringDecrypterInfo.cs,RemoveInitCode_v2,The following statement contains a magic number: var call2 = instructions[i + 2];
Magic Number,de4dot.code.deobfuscators.SmartAssembly,StringDecrypterInfo,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\SmartAssembly\StringDecrypterInfo.cs,RemoveInitCode_v2,The following statement contains a magic number: block.Remove(i' 3);
Magic Number,de4dot.code.deobfuscators.SmartAssembly,StringDecrypterInfo,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\SmartAssembly\StringDecrypterInfo.cs,RemoveInitCode_v2,The following statement contains a magic number: i <= instructions.Count - 3
Magic Number,de4dot.code.deobfuscators.SmartAssembly,TamperProtectionRemover,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\SmartAssembly\TamperProtectionRemover.cs,FindFirstBlocks,The following statement contains a magic number: !instrs[index + 2].IsBrfalse()
Magic Number,de4dot.code.deobfuscators.SmartAssembly,TamperProtectionRemover,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\SmartAssembly\TamperProtectionRemover.cs,FindBadBlock,The following statement contains a magic number: instrs.Count != 3
Magic Number,de4dot.code.deobfuscators.Spices_Net,Deobfuscator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Spices_Net\Deobfuscator.cs,DetectInternal,The following statement contains a magic number: val += 100 + 10 * (sum - 1);
Magic Number,de4dot.code.deobfuscators.Spices_Net,Deobfuscator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Spices_Net\Deobfuscator.cs,DetectInternal,The following statement contains a magic number: val += 100 + 10 * (sum - 1);
Magic Number,de4dot.code.deobfuscators.Spices_Net,Deobfuscator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Spices_Net\Deobfuscator.cs,DetectInternal,The following statement contains a magic number: val += 10;
Magic Number,de4dot.code.deobfuscators.Spices_Net,QclzDecompressor,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Spices_Net\QclzDecompressor.cs,Decompress,The following statement contains a magic number: headerLength = 9;
Magic Number,de4dot.code.deobfuscators.Spices_Net,QclzDecompressor,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Spices_Net\QclzDecompressor.cs,Decompress,The following statement contains a magic number: decompressedLength = (int)Read32(data' 5);
Magic Number,de4dot.code.deobfuscators.Spices_Net,QclzDecompressor,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Spices_Net\QclzDecompressor.cs,Decompress,The following statement contains a magic number: (data[0] & 2) != 0
Magic Number,de4dot.code.deobfuscators.Spices_Net,ResourceNamesRestorer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Spices_Net\ResourceNamesRestorer.cs,IsWinFormType,The following statement contains a magic number: i < 100
Magic Number,de4dot.code.deobfuscators.Spices_Net,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Spices_Net\StringDecrypter.cs,Find,The following statement contains a magic number: type.Fields.Count < 2 || type.Fields.Count > 3
Magic Number,de4dot.code.deobfuscators.Spices_Net,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Spices_Net\StringDecrypter.cs,Find,The following statement contains a magic number: type.Fields.Count < 2 || type.Fields.Count > 3
Magic Number,de4dot.code.deobfuscators.Spices_Net,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Spices_Net\StringDecrypter.cs,CheckCctor,The following statement contains a magic number: var field = instrs[2].Operand as FieldDef;
Magic Number,de4dot.code.deobfuscators.Spices_Net,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Spices_Net\StringDecrypter.cs,Get3DesKeyIv,The following statement contains a magic number: arrays.Count != 1 && arrays.Count != 2
Magic Number,de4dot.code.deobfuscators.Spices_Net,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Spices_Net\StringDecrypter.cs,CallsDecompressor,The following statement contains a magic number: parameters.Count != 4
Magic Number,de4dot.code.deobfuscators.Spices_Net,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Spices_Net\StringDecrypter.cs,CallsDecompressor,The following statement contains a magic number: !CheckClass(parameters[2]' "System.Byte[]")
Magic Number,de4dot.code.deobfuscators.Spices_Net,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Spices_Net\StringDecrypter.cs,CallsDecompressor,The following statement contains a magic number: parameters[3].GetElementType() != ElementType.I4
Magic Number,de4dot.code.deobfuscators.Xenocode,Deobfuscator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Xenocode\Deobfuscator.cs,DetectInternal,The following statement contains a magic number: val += 100;
Magic Number,de4dot.code.deobfuscators.Xenocode,Deobfuscator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Xenocode\Deobfuscator.cs,DetectInternal,The following statement contains a magic number: val += 10;
Magic Number,de4dot.code.deobfuscators.Xenocode,Deobfuscator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Xenocode\Deobfuscator.cs,IsTypeWithThousandsOfMethods,The following statement contains a magic number: type.Methods.Count < 100
Magic Number,de4dot.code.deobfuscators.Xenocode,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Xenocode\StringDecrypter.cs,Find,The following statement contains a magic number: type.Methods.Count < 1 || type.Methods.Count > 3
Magic Number,de4dot.code.deobfuscators.Xenocode,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Xenocode\StringDecrypter.cs,Decrypt,The following statement contains a magic number: int newLen = es.Length / 4;
Magic Number,de4dot.code.deobfuscators.Xenocode,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Xenocode\StringDecrypter.cs,Decrypt,The following statement contains a magic number: char c = (char)((es[i] - 'a') +  							((es[i + 1] - 'a') << 4) +  							((es[i + 2] - 'a') << 8) +  							((es[i + 3] - 'a') << 12) - magic);
Magic Number,de4dot.code.deobfuscators.Xenocode,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Xenocode\StringDecrypter.cs,Decrypt,The following statement contains a magic number: char c = (char)((es[i] - 'a') +  							((es[i + 1] - 'a') << 4) +  							((es[i + 2] - 'a') << 8) +  							((es[i + 3] - 'a') << 12) - magic);
Magic Number,de4dot.code.deobfuscators.Xenocode,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Xenocode\StringDecrypter.cs,Decrypt,The following statement contains a magic number: char c = (char)((es[i] - 'a') +  							((es[i + 1] - 'a') << 4) +  							((es[i + 2] - 'a') << 8) +  							((es[i + 3] - 'a') << 12) - magic);
Magic Number,de4dot.code.deobfuscators.Xenocode,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Xenocode\StringDecrypter.cs,Decrypt,The following statement contains a magic number: char c = (char)((es[i] - 'a') +  							((es[i + 1] - 'a') << 4) +  							((es[i + 2] - 'a') << 8) +  							((es[i + 3] - 'a') << 12) - magic);
Magic Number,de4dot.code.deobfuscators.Xenocode,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Xenocode\StringDecrypter.cs,Decrypt,The following statement contains a magic number: char c = (char)((es[i] - 'a') +  							((es[i + 1] - 'a') << 4) +  							((es[i + 2] - 'a') << 8) +  							((es[i + 3] - 'a') << 12) - magic);
Magic Number,de4dot.code.deobfuscators.Xenocode,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Xenocode\StringDecrypter.cs,Decrypt,The following statement contains a magic number: i < newLen * 4
Magic Number,de4dot.code.renamer.asmmodules,MPropertyDef,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\renamer\asmmodules\PropertyDef.cs,IsItemProperty,The following statement contains a magic number: SetMethod != null && SetMethod.VisibleParameterCount >= 2
Magic Number,de4dot.code.renamer,DerivedFrom,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\renamer\DerivedFrom.cs,Check,The following statement contains a magic number: recurseCount >= 100
Magic Number,de4dot.code.renamer,Renamer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\renamer\Renamer.cs,RestorePropertiesFromNames2,The following statement contains a magic number: var propName = methodName.Substring(4);
Magic Number,de4dot.code.renamer,Renamer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\renamer\Renamer.cs,RestorePropertiesFromNames2,The following statement contains a magic number: CreatePropertyGetter(methodName.Substring(4)' method);
Magic Number,de4dot.code.renamer,Renamer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\renamer\Renamer.cs,RestoreEventsFromNames2,The following statement contains a magic number: var eventName = methodName.Substring(4);
Magic Number,de4dot.code.renamer,Renamer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\renamer\Renamer.cs,RestoreEventsFromNames2,The following statement contains a magic number: CreateEventAdder(methodName.Substring(4)' method);
Magic Number,de4dot.code.renamer,Renamer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\renamer\Renamer.cs,GetScopeType,The following statement contains a magic number: i < 100
Magic Number,de4dot.code.renamer,ResourceKeysRenamer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\renamer\ResourceKeysRenamer.cs,Rename,The following statement contains a magic number: switch (calledMethod.FullName) {  					case "System.String System.Resources.ResourceManager::GetString(System.String'System.Globalization.CultureInfo)":  					case "System.IO.UnmanagedMemoryStream System.Resources.ResourceManager::GetStream(System.String'System.Globalization.CultureInfo)":  					case "System.Object System.Resources.ResourceManager::GetObject(System.String'System.Globalization.CultureInfo)":  						ldstrIndex = i - 2;  						break;    					case "System.String System.Resources.ResourceManager::GetString(System.String)":  					case "System.IO.UnmanagedMemoryStream System.Resources.ResourceManager::GetStream(System.String)":  					case "System.Object System.Resources.ResourceManager::GetObject(System.String)":  						ldstrIndex = i - 1;  						break;    					default:  						continue;  					}
Magic Number,de4dot.code.renamer,ResourceKeysRenamer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\renamer\ResourceKeysRenamer.cs,CreatePrefixFromStringData,The following statement contains a magic number: data = data.Substring(0' Math.Min(data.Length' 100));
Magic Number,de4dot.code.renamer,ResourceKeysRenamer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\renamer\ResourceKeysRenamer.cs,CreatePrefixFromStringData,The following statement contains a magic number: sb.Length <= 3
Magic Number,de4dot.code.renamer,ResourceRenamer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\renamer\ResourceRenamer.cs,Rename,The following statement contains a magic number: nameToResource = new Dictionary<string' Resource>(module.ModuleDefMD.Resources.Count * 3' StringComparer.Ordinal);
Magic Number,de4dot.code.renamer,ResourceRenamer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\renamer\ResourceRenamer.cs,Rename,The following statement contains a magic number: nameToResource[name.Substring(0' name.Length - 12)] = resource;
Magic Number,de4dot.code.renamer,TypeInfo,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\renamer\TypeInfo.cs,IsEventHandler,The following statement contains a magic number: sig == null || sig.Params.Count != 2
Magic Number,de4dot.code.renamer,TypeInfo,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\renamer\TypeInfo.cs,InitializeWindowsFormsFieldsAndProps,The following statement contains a magic number: var instr = instructions[i - 2];
Magic Number,de4dot.code.renamer,TypeInfo,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\renamer\TypeInfo.cs,GetVbHandler,The following statement contains a magic number: eventName = addMethod.Name.String.Substring(4);
Magic Number,de4dot.code.renamer,TypeInfo,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\renamer\TypeInfo.cs,GetVbHandler,The following statement contains a magic number: eventName != removeMethod.Name.String.Substring(7)
Magic Number,de4dot.code.renamer,TypeInfo,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\renamer\TypeInfo.cs,FindEventCall,The following statement contains a magic number: callvirt < 2
Magic Number,de4dot.code.renamer,TypeInfo,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\renamer\TypeInfo.cs,FindEventCall,The following statement contains a magic number: var ldfld = instructions[callvirt - 2];
Magic Number,de4dot.code.renamer,TypeInfo,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\renamer\TypeInfo.cs,InitFieldEventHandlers,The following statement contains a magic number: var eventName = addHandler.Name.String.Substring(4);
Magic Number,de4dot.code.renamer,TypeInfo,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\renamer\TypeInfo.cs,InitFieldEventHandlers,The following statement contains a magic number: i < instructions.Count - 6
Magic Number,de4dot.code.renamer,TypeInfo,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\renamer\TypeInfo.cs,InitTypeEventHandlers,The following statement contains a magic number: var eventName = addMethod.Name.String.Substring(4);
Magic Number,de4dot.code.renamer,TypeInfo,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\renamer\TypeInfo.cs,InitTypeEventHandlers,The following statement contains a magic number: i < instructions.Count - 5
Magic Number,de4dot.code.renamer,TypeInfo,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\renamer\TypeInfo.cs,FindWindowsFormsClassName,The following statement contains a magic number: instructions[i - 2].GetParameterIndex() != 0
Magic Number,ICSharpCode.SharpZipLib.Checksums,Adler32,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\SharpZipLib\Checksums\Adler32.cs,Update,The following statement contains a magic number: uint s2 = checksum >> 16;
Magic Number,ICSharpCode.SharpZipLib.Checksums,Adler32,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\SharpZipLib\Checksums\Adler32.cs,Update,The following statement contains a magic number: checksum = (s2 << 16) + s1;
Magic Number,ICSharpCode.SharpZipLib.Checksums,Adler32,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\SharpZipLib\Checksums\Adler32.cs,Update,The following statement contains a magic number: uint s2 = checksum >> 16;
Magic Number,ICSharpCode.SharpZipLib.Checksums,Adler32,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\SharpZipLib\Checksums\Adler32.cs,Update,The following statement contains a magic number: int n = 3800;
Magic Number,ICSharpCode.SharpZipLib.Checksums,Adler32,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\SharpZipLib\Checksums\Adler32.cs,Update,The following statement contains a magic number: checksum = (s2 << 16) | s1;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Inflater,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\SharpZipLib\Zip\Compression\Inflater.cs,DecodeHeader,The following statement contains a magic number: int header = input.PeekBits(16);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Inflater,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\SharpZipLib\Zip\Compression\Inflater.cs,DecodeHeader,The following statement contains a magic number: input.DropBits(16);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Inflater,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\SharpZipLib\Zip\Compression\Inflater.cs,DecodeHeader,The following statement contains a magic number: header = ((header << 8) | (header >> 8)) & 0xffff;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Inflater,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\SharpZipLib\Zip\Compression\Inflater.cs,DecodeHeader,The following statement contains a magic number: header = ((header << 8) | (header >> 8)) & 0xffff;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Inflater,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\SharpZipLib\Zip\Compression\Inflater.cs,DecodeHeader,The following statement contains a magic number: header % 31 != 0
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Inflater,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\SharpZipLib\Zip\Compression\Inflater.cs,DecodeHeader,The following statement contains a magic number: (header & 0x0f00) != (DEFLATED << 8)
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Inflater,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\SharpZipLib\Zip\Compression\Inflater.cs,DecodeDict,The following statement contains a magic number: int dictByte = input.PeekBits(8);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Inflater,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\SharpZipLib\Zip\Compression\Inflater.cs,DecodeDict,The following statement contains a magic number: input.DropBits(8);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Inflater,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\SharpZipLib\Zip\Compression\Inflater.cs,DecodeDict,The following statement contains a magic number: readAdler = (readAdler << 8) | dictByte;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Inflater,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\SharpZipLib\Zip\Compression\Inflater.cs,DecodeDict,The following statement contains a magic number: neededBits -= 8;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Inflater,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\SharpZipLib\Zip\Compression\Inflater.cs,DecodeHuffman,The following statement contains a magic number: switch (mode)   				{  					case DECODE_HUFFMAN:  						// This is the inner loop so it is optimized a bit  						while (((symbol = litlenTree.GetSymbol(input)) & ~0xff) == 0)   						{  							outputWindow.Write(symbol);  							if (--free < 258)   							{  								return true;  							}  						}  						  						if (symbol < 257)   						{  							if (symbol < 0)   							{  								return false;  							}   							else   							{  								// symbol == 256: end of block  								distTree = null;  								litlenTree = null;  								mode = DECODE_BLOCKS;  								return true;  							}  						}  						  						try   						{  							repLength = CPLENS[symbol - 257];  							neededBits = CPLEXT[symbol - 257];  						}   						catch (Exception)   						{  							throw new SharpZipBaseException("Illegal rep length code");  						}  						goto case DECODE_HUFFMAN_LENBITS; // fall through  						  					case DECODE_HUFFMAN_LENBITS:  						if (neededBits > 0)   						{  							mode = DECODE_HUFFMAN_LENBITS;  							int i = input.PeekBits(neededBits);  							if (i < 0)   							{  								return false;  							}  							input.DropBits(neededBits);  							repLength += i;  						}  						mode = DECODE_HUFFMAN_DIST;  						goto case DECODE_HUFFMAN_DIST; // fall through  						  					case DECODE_HUFFMAN_DIST:  						symbol = distTree.GetSymbol(input);  						if (symbol < 0)   						{  							return false;  						}  						  						try   						{  							repDist = CPDIST[symbol];  							neededBits = CPDEXT[symbol];  						}   						catch (Exception)   						{  							throw new SharpZipBaseException("Illegal rep dist code");  						}  						  						goto case DECODE_HUFFMAN_DISTBITS; // fall through  						  					case DECODE_HUFFMAN_DISTBITS:  						if (neededBits > 0)   						{  							mode = DECODE_HUFFMAN_DISTBITS;  							int i = input.PeekBits(neededBits);  							if (i < 0)   							{  								return false;  							}  							input.DropBits(neededBits);  							repDist += i;  						}  						  						outputWindow.Repeat(repLength' repDist);  						free -= repLength;  						mode = DECODE_HUFFMAN;  						break;  					  					default:  						throw new SharpZipBaseException("Inflater unknown mode");  				}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Inflater,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\SharpZipLib\Zip\Compression\Inflater.cs,DecodeHuffman,The following statement contains a magic number: switch (mode)   				{  					case DECODE_HUFFMAN:  						// This is the inner loop so it is optimized a bit  						while (((symbol = litlenTree.GetSymbol(input)) & ~0xff) == 0)   						{  							outputWindow.Write(symbol);  							if (--free < 258)   							{  								return true;  							}  						}  						  						if (symbol < 257)   						{  							if (symbol < 0)   							{  								return false;  							}   							else   							{  								// symbol == 256: end of block  								distTree = null;  								litlenTree = null;  								mode = DECODE_BLOCKS;  								return true;  							}  						}  						  						try   						{  							repLength = CPLENS[symbol - 257];  							neededBits = CPLEXT[symbol - 257];  						}   						catch (Exception)   						{  							throw new SharpZipBaseException("Illegal rep length code");  						}  						goto case DECODE_HUFFMAN_LENBITS; // fall through  						  					case DECODE_HUFFMAN_LENBITS:  						if (neededBits > 0)   						{  							mode = DECODE_HUFFMAN_LENBITS;  							int i = input.PeekBits(neededBits);  							if (i < 0)   							{  								return false;  							}  							input.DropBits(neededBits);  							repLength += i;  						}  						mode = DECODE_HUFFMAN_DIST;  						goto case DECODE_HUFFMAN_DIST; // fall through  						  					case DECODE_HUFFMAN_DIST:  						symbol = distTree.GetSymbol(input);  						if (symbol < 0)   						{  							return false;  						}  						  						try   						{  							repDist = CPDIST[symbol];  							neededBits = CPDEXT[symbol];  						}   						catch (Exception)   						{  							throw new SharpZipBaseException("Illegal rep dist code");  						}  						  						goto case DECODE_HUFFMAN_DISTBITS; // fall through  						  					case DECODE_HUFFMAN_DISTBITS:  						if (neededBits > 0)   						{  							mode = DECODE_HUFFMAN_DISTBITS;  							int i = input.PeekBits(neededBits);  							if (i < 0)   							{  								return false;  							}  							input.DropBits(neededBits);  							repDist += i;  						}  						  						outputWindow.Repeat(repLength' repDist);  						free -= repLength;  						mode = DECODE_HUFFMAN;  						break;  					  					default:  						throw new SharpZipBaseException("Inflater unknown mode");  				}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Inflater,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\SharpZipLib\Zip\Compression\Inflater.cs,DecodeHuffman,The following statement contains a magic number: switch (mode)   				{  					case DECODE_HUFFMAN:  						// This is the inner loop so it is optimized a bit  						while (((symbol = litlenTree.GetSymbol(input)) & ~0xff) == 0)   						{  							outputWindow.Write(symbol);  							if (--free < 258)   							{  								return true;  							}  						}  						  						if (symbol < 257)   						{  							if (symbol < 0)   							{  								return false;  							}   							else   							{  								// symbol == 256: end of block  								distTree = null;  								litlenTree = null;  								mode = DECODE_BLOCKS;  								return true;  							}  						}  						  						try   						{  							repLength = CPLENS[symbol - 257];  							neededBits = CPLEXT[symbol - 257];  						}   						catch (Exception)   						{  							throw new SharpZipBaseException("Illegal rep length code");  						}  						goto case DECODE_HUFFMAN_LENBITS; // fall through  						  					case DECODE_HUFFMAN_LENBITS:  						if (neededBits > 0)   						{  							mode = DECODE_HUFFMAN_LENBITS;  							int i = input.PeekBits(neededBits);  							if (i < 0)   							{  								return false;  							}  							input.DropBits(neededBits);  							repLength += i;  						}  						mode = DECODE_HUFFMAN_DIST;  						goto case DECODE_HUFFMAN_DIST; // fall through  						  					case DECODE_HUFFMAN_DIST:  						symbol = distTree.GetSymbol(input);  						if (symbol < 0)   						{  							return false;  						}  						  						try   						{  							repDist = CPDIST[symbol];  							neededBits = CPDEXT[symbol];  						}   						catch (Exception)   						{  							throw new SharpZipBaseException("Illegal rep dist code");  						}  						  						goto case DECODE_HUFFMAN_DISTBITS; // fall through  						  					case DECODE_HUFFMAN_DISTBITS:  						if (neededBits > 0)   						{  							mode = DECODE_HUFFMAN_DISTBITS;  							int i = input.PeekBits(neededBits);  							if (i < 0)   							{  								return false;  							}  							input.DropBits(neededBits);  							repDist += i;  						}  						  						outputWindow.Repeat(repLength' repDist);  						free -= repLength;  						mode = DECODE_HUFFMAN;  						break;  					  					default:  						throw new SharpZipBaseException("Inflater unknown mode");  				}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Inflater,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\SharpZipLib\Zip\Compression\Inflater.cs,DecodeHuffman,The following statement contains a magic number: switch (mode)   				{  					case DECODE_HUFFMAN:  						// This is the inner loop so it is optimized a bit  						while (((symbol = litlenTree.GetSymbol(input)) & ~0xff) == 0)   						{  							outputWindow.Write(symbol);  							if (--free < 258)   							{  								return true;  							}  						}  						  						if (symbol < 257)   						{  							if (symbol < 0)   							{  								return false;  							}   							else   							{  								// symbol == 256: end of block  								distTree = null;  								litlenTree = null;  								mode = DECODE_BLOCKS;  								return true;  							}  						}  						  						try   						{  							repLength = CPLENS[symbol - 257];  							neededBits = CPLEXT[symbol - 257];  						}   						catch (Exception)   						{  							throw new SharpZipBaseException("Illegal rep length code");  						}  						goto case DECODE_HUFFMAN_LENBITS; // fall through  						  					case DECODE_HUFFMAN_LENBITS:  						if (neededBits > 0)   						{  							mode = DECODE_HUFFMAN_LENBITS;  							int i = input.PeekBits(neededBits);  							if (i < 0)   							{  								return false;  							}  							input.DropBits(neededBits);  							repLength += i;  						}  						mode = DECODE_HUFFMAN_DIST;  						goto case DECODE_HUFFMAN_DIST; // fall through  						  					case DECODE_HUFFMAN_DIST:  						symbol = distTree.GetSymbol(input);  						if (symbol < 0)   						{  							return false;  						}  						  						try   						{  							repDist = CPDIST[symbol];  							neededBits = CPDEXT[symbol];  						}   						catch (Exception)   						{  							throw new SharpZipBaseException("Illegal rep dist code");  						}  						  						goto case DECODE_HUFFMAN_DISTBITS; // fall through  						  					case DECODE_HUFFMAN_DISTBITS:  						if (neededBits > 0)   						{  							mode = DECODE_HUFFMAN_DISTBITS;  							int i = input.PeekBits(neededBits);  							if (i < 0)   							{  								return false;  							}  							input.DropBits(neededBits);  							repDist += i;  						}  						  						outputWindow.Repeat(repLength' repDist);  						free -= repLength;  						mode = DECODE_HUFFMAN;  						break;  					  					default:  						throw new SharpZipBaseException("Inflater unknown mode");  				}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Inflater,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\SharpZipLib\Zip\Compression\Inflater.cs,DecodeHuffman,The following statement contains a magic number: free >= 258
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Inflater,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\SharpZipLib\Zip\Compression\Inflater.cs,DecodeChksum,The following statement contains a magic number: int chkByte = input.PeekBits(8);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Inflater,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\SharpZipLib\Zip\Compression\Inflater.cs,DecodeChksum,The following statement contains a magic number: input.DropBits(8);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Inflater,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\SharpZipLib\Zip\Compression\Inflater.cs,DecodeChksum,The following statement contains a magic number: readAdler = (readAdler << 8) | chkByte;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Inflater,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\SharpZipLib\Zip\Compression\Inflater.cs,DecodeChksum,The following statement contains a magic number: neededBits -= 8;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Inflater,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\SharpZipLib\Zip\Compression\Inflater.cs,Decode,The following statement contains a magic number: switch (mode) {  				case DECODE_HEADER:  					return DecodeHeader();    				case DECODE_DICT:  					return DecodeDict();    				case DECODE_CHKSUM:  					return DecodeChksum();  				  				case DECODE_BLOCKS:  					if (isLastBlock) {  						if (noHeader) {  							mode = FINISHED;  							return false;  						} else {  							input.SkipToByteBoundary();  							neededBits = 32;  							mode = DECODE_CHKSUM;  							return true;  						}  					}  					  					int blockType;  					if (!ReadHeader(ref isLastBlock' out blockType)) {  						return false;  					}  					switch (blockType){  						case STORED_BLOCK:  							input.SkipToByteBoundary();  							mode = DECODE_STORED_LEN1;  							break;  						case STATIC_TREES:  							litlenTree = InflaterHuffmanTree.defLitLenTree;  							distTree = InflaterHuffmanTree.defDistTree;  							mode = DECODE_HUFFMAN;  							break;  						case DYN_TREES:  							dynHeader = new InflaterDynHeader();  							mode = DECODE_DYN_HEADER;  							break;  						default:  							throw new SharpZipBaseException("Unknown block type " + blockType);  					}  					return true;  				  				case DECODE_STORED_LEN1:  					if (!DecodeStoredLength()) {  						return false;  					}  					mode = DECODE_STORED;  					goto case DECODE_STORED; // fall through  					  				case DECODE_STORED:   				{  					int more = outputWindow.CopyStored(input' uncomprLen);  					uncomprLen -= more;  					if (uncomprLen == 0) {  						mode = DECODE_BLOCKS;  						return true;  					}  					return !input.IsNeedingInput;  				}  				  				case DECODE_DYN_HEADER:  					if (!dynHeader.Decode(input)) {  						return false;  					}  					  					litlenTree = dynHeader.BuildLitLenTree();  					distTree = dynHeader.BuildDistTree();  					mode = DECODE_HUFFMAN;  					goto case DECODE_HUFFMAN; // fall through  					  				case DECODE_HUFFMAN:  				case DECODE_HUFFMAN_LENBITS:  				case DECODE_HUFFMAN_DIST:  				case DECODE_HUFFMAN_DISTBITS:  					return DecodeHuffman();  				  				case FINISHED:  					return false;  				  				default:  					throw new SharpZipBaseException("Inflater.Decode unknown mode");  			}
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Inflater,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\SharpZipLib\Zip\Compression\Inflater.cs,ReadHeader,The following statement contains a magic number: int type = input.PeekBits(3);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Inflater,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\SharpZipLib\Zip\Compression\Inflater.cs,ReadHeader,The following statement contains a magic number: input.DropBits(3);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Inflater,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\SharpZipLib\Zip\Compression\Inflater.cs,DecodeStoredLength,The following statement contains a magic number: (uncomprLen = input.PeekBits(16)) < 0
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Inflater,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\SharpZipLib\Zip\Compression\Inflater.cs,DecodeStoredLength,The following statement contains a magic number: input.DropBits(16);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Inflater,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\SharpZipLib\Zip\Compression\Inflater.cs,DecodeStoredLength,The following statement contains a magic number: int nlen = input.PeekBits(16);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,Inflater,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\SharpZipLib\Zip\Compression\Inflater.cs,DecodeStoredLength,The following statement contains a magic number: input.DropBits(16);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterHuffmanTree,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\SharpZipLib\Zip\Compression\InflaterHuffmanTree.cs,InflaterHuffmanTree,The following statement contains a magic number: byte[] codeLengths = new byte[288];
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterHuffmanTree,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\SharpZipLib\Zip\Compression\InflaterHuffmanTree.cs,InflaterHuffmanTree,The following statement contains a magic number: codeLengths[i++] = 8;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterHuffmanTree,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\SharpZipLib\Zip\Compression\InflaterHuffmanTree.cs,InflaterHuffmanTree,The following statement contains a magic number: i < 144
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterHuffmanTree,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\SharpZipLib\Zip\Compression\InflaterHuffmanTree.cs,InflaterHuffmanTree,The following statement contains a magic number: codeLengths[i++] = 9;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterHuffmanTree,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\SharpZipLib\Zip\Compression\InflaterHuffmanTree.cs,InflaterHuffmanTree,The following statement contains a magic number: i < 256
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterHuffmanTree,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\SharpZipLib\Zip\Compression\InflaterHuffmanTree.cs,InflaterHuffmanTree,The following statement contains a magic number: codeLengths[i++] = 7;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterHuffmanTree,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\SharpZipLib\Zip\Compression\InflaterHuffmanTree.cs,InflaterHuffmanTree,The following statement contains a magic number: i < 280
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterHuffmanTree,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\SharpZipLib\Zip\Compression\InflaterHuffmanTree.cs,InflaterHuffmanTree,The following statement contains a magic number: codeLengths[i++] = 8;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterHuffmanTree,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\SharpZipLib\Zip\Compression\InflaterHuffmanTree.cs,InflaterHuffmanTree,The following statement contains a magic number: i < 288
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterHuffmanTree,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\SharpZipLib\Zip\Compression\InflaterHuffmanTree.cs,InflaterHuffmanTree,The following statement contains a magic number: codeLengths = new byte[32];
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterHuffmanTree,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\SharpZipLib\Zip\Compression\InflaterHuffmanTree.cs,InflaterHuffmanTree,The following statement contains a magic number: codeLengths[i++] = 5;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterHuffmanTree,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\SharpZipLib\Zip\Compression\InflaterHuffmanTree.cs,InflaterHuffmanTree,The following statement contains a magic number: i < 32
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterHuffmanTree,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\SharpZipLib\Zip\Compression\InflaterHuffmanTree.cs,BuildTree,The following statement contains a magic number: int treeSize = 512;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterHuffmanTree,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\SharpZipLib\Zip\Compression\InflaterHuffmanTree.cs,BuildTree,The following statement contains a magic number: code += blCount[bits] << (16 - bits);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterHuffmanTree,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\SharpZipLib\Zip\Compression\InflaterHuffmanTree.cs,BuildTree,The following statement contains a magic number: treeSize += (end - start) >> (16 - bits);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterHuffmanTree,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\SharpZipLib\Zip\Compression\InflaterHuffmanTree.cs,BuildTree,The following statement contains a magic number: bits >= 10
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterHuffmanTree,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\SharpZipLib\Zip\Compression\InflaterHuffmanTree.cs,BuildTree,The following statement contains a magic number: int treePtr = 512;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterHuffmanTree,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\SharpZipLib\Zip\Compression\InflaterHuffmanTree.cs,BuildTree,The following statement contains a magic number: code -= blCount[bits] << (16 - bits);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterHuffmanTree,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\SharpZipLib\Zip\Compression\InflaterHuffmanTree.cs,BuildTree,The following statement contains a magic number: tree[BitReverse(i)] = (short) ((-treePtr << 4) | bits);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterHuffmanTree,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\SharpZipLib\Zip\Compression\InflaterHuffmanTree.cs,BuildTree,The following statement contains a magic number: treePtr += 1 << (bits-9);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterHuffmanTree,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\SharpZipLib\Zip\Compression\InflaterHuffmanTree.cs,BuildTree,The following statement contains a magic number: bits >= 10
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterHuffmanTree,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\SharpZipLib\Zip\Compression\InflaterHuffmanTree.cs,BuildTree,The following statement contains a magic number: tree[revcode] = (short) ((i << 4) | bits);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterHuffmanTree,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\SharpZipLib\Zip\Compression\InflaterHuffmanTree.cs,BuildTree,The following statement contains a magic number: bits <= 9
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterHuffmanTree,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\SharpZipLib\Zip\Compression\InflaterHuffmanTree.cs,BuildTree,The following statement contains a magic number: nextCode[bits] = code + (1 << (16 - bits));
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterHuffmanTree,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\SharpZipLib\Zip\Compression\InflaterHuffmanTree.cs,BitReverse,The following statement contains a magic number: return (short) (bit4Reverse[toReverse & 0xF] << 12 |   			                bit4Reverse[(toReverse >> 4) & 0xF] << 8 |   			                bit4Reverse[(toReverse >> 8) & 0xF] << 4 |  			                bit4Reverse[toReverse >> 12]);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterHuffmanTree,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\SharpZipLib\Zip\Compression\InflaterHuffmanTree.cs,BitReverse,The following statement contains a magic number: return (short) (bit4Reverse[toReverse & 0xF] << 12 |   			                bit4Reverse[(toReverse >> 4) & 0xF] << 8 |   			                bit4Reverse[(toReverse >> 8) & 0xF] << 4 |  			                bit4Reverse[toReverse >> 12]);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterHuffmanTree,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\SharpZipLib\Zip\Compression\InflaterHuffmanTree.cs,BitReverse,The following statement contains a magic number: return (short) (bit4Reverse[toReverse & 0xF] << 12 |   			                bit4Reverse[(toReverse >> 4) & 0xF] << 8 |   			                bit4Reverse[(toReverse >> 8) & 0xF] << 4 |  			                bit4Reverse[toReverse >> 12]);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterHuffmanTree,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\SharpZipLib\Zip\Compression\InflaterHuffmanTree.cs,BitReverse,The following statement contains a magic number: return (short) (bit4Reverse[toReverse & 0xF] << 12 |   			                bit4Reverse[(toReverse >> 4) & 0xF] << 8 |   			                bit4Reverse[(toReverse >> 8) & 0xF] << 4 |  			                bit4Reverse[toReverse >> 12]);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterHuffmanTree,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\SharpZipLib\Zip\Compression\InflaterHuffmanTree.cs,BitReverse,The following statement contains a magic number: return (short) (bit4Reverse[toReverse & 0xF] << 12 |   			                bit4Reverse[(toReverse >> 4) & 0xF] << 8 |   			                bit4Reverse[(toReverse >> 8) & 0xF] << 4 |  			                bit4Reverse[toReverse >> 12]);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterHuffmanTree,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\SharpZipLib\Zip\Compression\InflaterHuffmanTree.cs,BitReverse,The following statement contains a magic number: return (short) (bit4Reverse[toReverse & 0xF] << 12 |   			                bit4Reverse[(toReverse >> 4) & 0xF] << 8 |   			                bit4Reverse[(toReverse >> 8) & 0xF] << 4 |  			                bit4Reverse[toReverse >> 12]);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterHuffmanTree,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\SharpZipLib\Zip\Compression\InflaterHuffmanTree.cs,GetSymbol,The following statement contains a magic number: input.DropBits(symbol & 15);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterHuffmanTree,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\SharpZipLib\Zip\Compression\InflaterHuffmanTree.cs,GetSymbol,The following statement contains a magic number: return symbol >> 4;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterHuffmanTree,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\SharpZipLib\Zip\Compression\InflaterHuffmanTree.cs,GetSymbol,The following statement contains a magic number: int subtree = -(symbol >> 4);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterHuffmanTree,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\SharpZipLib\Zip\Compression\InflaterHuffmanTree.cs,GetSymbol,The following statement contains a magic number: int bitlen = symbol & 15;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterHuffmanTree,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\SharpZipLib\Zip\Compression\InflaterHuffmanTree.cs,GetSymbol,The following statement contains a magic number: symbol = tree[subtree | (lookahead >> 9)];
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterHuffmanTree,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\SharpZipLib\Zip\Compression\InflaterHuffmanTree.cs,GetSymbol,The following statement contains a magic number: input.DropBits(symbol & 15);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterHuffmanTree,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\SharpZipLib\Zip\Compression\InflaterHuffmanTree.cs,GetSymbol,The following statement contains a magic number: return symbol >> 4;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression,InflaterHuffmanTree,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\SharpZipLib\Zip\Compression\InflaterHuffmanTree.cs,GetSymbol,The following statement contains a magic number: (lookahead = input.PeekBits(9)) >= 0
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression.Streams,StreamManipulator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\SharpZipLib\Zip\Compression\Streams\StreamManipulator.cs,PeekBits,The following statement contains a magic number: buffer_ |= (uint)((window_[windowStart_++] & 0xff |  								 (window_[windowStart_++] & 0xff) << 8) << bitsInBuffer_);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression.Streams,StreamManipulator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\SharpZipLib\Zip\Compression\Streams\StreamManipulator.cs,PeekBits,The following statement contains a magic number: bitsInBuffer_ += 16;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression.Streams,StreamManipulator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\SharpZipLib\Zip\Compression\Streams\StreamManipulator.cs,SkipToByteBoundary,The following statement contains a magic number: buffer_ >>= (bitsInBuffer_ & 7);
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression.Streams,StreamManipulator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\SharpZipLib\Zip\Compression\Streams\StreamManipulator.cs,SkipToByteBoundary,The following statement contains a magic number: bitsInBuffer_ &= ~7;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression.Streams,StreamManipulator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\SharpZipLib\Zip\Compression\Streams\StreamManipulator.cs,CopyBytes,The following statement contains a magic number: (bitsInBuffer_ & 7) != 0
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression.Streams,StreamManipulator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\SharpZipLib\Zip\Compression\Streams\StreamManipulator.cs,CopyBytes,The following statement contains a magic number: buffer_ >>= 8;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression.Streams,StreamManipulator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\SharpZipLib\Zip\Compression\Streams\StreamManipulator.cs,CopyBytes,The following statement contains a magic number: bitsInBuffer_ -= 8;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression.Streams,StreamManipulator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\SharpZipLib\Zip\Compression\Streams\StreamManipulator.cs,CopyBytes,The following statement contains a magic number: bitsInBuffer_ = 8;
Magic Number,ICSharpCode.SharpZipLib.Zip.Compression.Streams,StreamManipulator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\SharpZipLib\Zip\Compression\Streams\StreamManipulator.cs,SetInput,The following statement contains a magic number: bitsInBuffer_ += 8;
Missing Default,de4dot.code,MethodPrinter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\MethodPrinter.cs,InitTargets,The following switch statement is missing a default case: switch (instr.OpCode.OperandType) {  				case OperandType.ShortInlineBrTarget:  				case OperandType.InlineBrTarget:  					SetTarget(instr.Operand as Instruction);  					break;    				case OperandType.InlineSwitch:  					foreach (var targetInstr in (Instruction[])instr.Operand)  						SetTarget(targetInstr);  					break;  				}
Missing Default,de4dot.code,MethodReturnValueInliner,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\MethodReturnValueInliner.cs,FixIntArg,The following switch statement is missing a default case: switch (type.ElementType) {  			case ElementType.Boolean: return value != 0;  			case ElementType.Char: return (char)value;  			case ElementType.I1: return (sbyte)value;  			case ElementType.U1: return (byte)value;  			case ElementType.I2: return (short)value;  			case ElementType.U2: return (ushort)value;  			case ElementType.I4: return (int)value;  			case ElementType.U4: return (uint)value;  			case ElementType.I8: return (long)value;  			case ElementType.U8: return (ulong)value;  			}
Missing Default,de4dot.code.deobfuscators,ArrayFinder,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\ArrayFinder.cs,GetInitializedArray,The following switch statement is missing a default case: switch (instr.OpCode.Code) {  				case Code.Newarr:  				case Code.Newobj:  					goto done;    				case Code.Stloc:  				case Code.Stloc_S:  				case Code.Stloc_0:  				case Code.Stloc_1:  				case Code.Stloc_2:  				case Code.Stloc_3:  				case Code.Starg:  				case Code.Starg_S:  				case Code.Stsfld:  				case Code.Stfld:  					if (emulator.Peek() == theArray && i != newarrIndex + 1 && i != newarrIndex + 2)  						goto done;  					break;  				}
Missing Default,de4dot.code.deobfuscators,ExceptionLoggerRemover,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\ExceptionLoggerRemover.cs,Find,The following switch statement is missing a default case: switch (instr.OpCode.Code) {  						case Code.Call:  						case Code.Calli:  						case Code.Callvirt:  							calls++;  							callInstr = instr;  							break;  						}
Missing Default,de4dot.code.deobfuscators,InlinedMethodsFinder,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\InlinedMethodsFinder.cs,IsCallMethod,The following switch statement is missing a default case: switch (instr.OpCode.Code) {  				case Code.Ldarg:  				case Code.Ldarg_S:  				case Code.Ldarg_0:  				case Code.Ldarg_1:  				case Code.Ldarg_2:  				case Code.Ldarg_3:  				case Code.Ldarga:  				case Code.Ldarga_S:  					if (instr.GetParameterIndex() != loadIndex)  						return false;  					loadIndex++;  					continue;  				}
Missing Default,de4dot.code.deobfuscators,RandomNameChecker,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\RandomNameChecker.cs,HasVowel,The following switch statement is missing a default case: switch (c) {  				case 'A':  				case 'a':  				case 'E':  				case 'e':  				case 'I':  				case 'i':  				case 'O':  				case 'o':  				case 'U':  				case 'u':  				case 'Y':  				case 'y':  					return true;  				}
Missing Default,de4dot.code.deobfuscators.CodeWall,Deobfuscator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CodeWall\Deobfuscator.cs,DetectVersion,The following switch statement is missing a default case: switch (stringDecrypter.TheVersion) {  				case StringDecrypter.Version.V30: return "v3.0 - v3.5";  				case StringDecrypter.Version.V36: return "v3.6 - v4.1";  				}
Missing Default,de4dot.code.deobfuscators.Confuser,ProxyCallFixer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Confuser\ProxyCallFixer.cs,GetProxyCreatorTypeV1,The following switch statement is missing a default case: switch (field.FullName) {  				case "System.Reflection.Emit.OpCode System.Reflection.Emit.OpCodes::Call":  				case "System.Reflection.Emit.OpCode System.Reflection.Emit.OpCodes::Callvirt":  					return ProxyCreatorType.CallOrCallvirt;    				case "System.Reflection.Emit.OpCode System.Reflection.Emit.OpCodes::Newobj":  					return ProxyCreatorType.Newobj;  				}
Missing Default,de4dot.code.deobfuscators.CryptoObfuscator,ProxyCallFixer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CryptoObfuscator\ProxyCallFixer.cs,GetProxyCreatorType,The following switch statement is missing a default case: switch (field.FullName) {  				case "System.Reflection.Emit.OpCode System.Reflection.Emit.OpCodes::Call":  					numCalls++;  					break;  				case "System.Reflection.Emit.OpCode System.Reflection.Emit.OpCodes::Callvirt":  					numCallvirts++;  					break;  				case "System.Reflection.Emit.OpCode System.Reflection.Emit.OpCodes::Newobj":  					numNewobjs++;  					break;  				}
Missing Default,de4dot.code.deobfuscators.CryptoObfuscator,ResourceDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CryptoObfuscator\ResourceDecrypter.cs,Find,The following switch statement is missing a default case: switch (frameworkType) {  			case FrameworkType.Silverlight:  				FindSilverlight();  				break;    			case FrameworkType.Desktop:  			case FrameworkType.CompactFramework:  				if (!module.IsClr1x) {  					if (FindDesktopOrCompactFramework())  						break;  				}  				FindDesktopOrCompactFrameworkV1();  				break;  			}
Missing Default,de4dot.code.deobfuscators.CryptoObfuscator,ResourceDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CryptoObfuscator\ResourceDecrypter.cs,UpdateFlags,The following switch statement is missing a default case: switch (frameworkType) {  			case FrameworkType.Desktop:  				if (!module.IsClr1x) {  					if (constants.Count == 2) {  						desEncryptedFlag = (byte)constants[0];  						deflatedFlag = (byte)constants[1];  						return true;  					}  				}  				if (constants.Count == 1) {  					desEncryptedFlag = (byte)constants[0];  					return true;  				}  				break;    			case FrameworkType.Silverlight:  				if (constants.Count == 1) {  					bitwiseNotEncryptedFlag = (byte)constants[0];  					return true;  				}  				break;    			case FrameworkType.CompactFramework:  				if (constants.Count == 1) {  					desEncryptedFlag = (byte)constants[0];  					return true;  				}  				break;  			}
Missing Default,de4dot.code.deobfuscators.CryptoObfuscator,TamperDetection,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\CryptoObfuscator\TamperDetection.cs,Find,The following switch statement is missing a default case: switch (frameworkType) {  				case FrameworkType.Desktop:  					result = FindDesktop(method);  					break;  				case FrameworkType.Silverlight:  					result = FindSilverlight(method);  					break;  				case FrameworkType.CompactFramework:  					result = FindCompactFramework(method);  					break;  				}
Missing Default,de4dot.code.deobfuscators.DeepSea,Deobfuscator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\DeepSea\Deobfuscator.cs,DetectVersion,The following switch statement is missing a default case: switch (stringDecrypter.Version) {  			case StringDecrypter.DecrypterVersion.V1_3:  				if (DetectMethodProxyObfuscation())  					return DeobfuscatorInfo.THE_NAME + " 3.5";  				return DeobfuscatorInfo.THE_NAME + " 1.x-3.x";  			case StringDecrypter.DecrypterVersion.V4_0:  				return DeobfuscatorInfo.THE_NAME + " 4.0";  			case StringDecrypter.DecrypterVersion.V4_1:  				return DeobfuscatorInfo.THE_NAME + " 4.1";  			}
Missing Default,de4dot.code.deobfuscators.DeepSea,StringDecrypter,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\DeepSea\StringDecrypter.cs,CheckFields,The following switch statement is missing a default case: switch (field.FieldSig.GetFieldType().GetFullName()) {  				case "System.Char[]":  					foundCharAry = true;  					break;  				case "System.String[]":  					foundStringAry = true;  					break;  				}
Missing Default,de4dot.code.deobfuscators.dotNET_Reactor.v3,DecrypterType,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\dotNET_Reactor\v3\DecrypterType.cs,UpdateModuleRefs,The following switch statement is missing a default case: switch (method.ImplMap.Name.String) {  					case "nr_nli":  					case "nr_startup":  						moduleRefs.Add(method.ImplMap.Module);  						break;  					}
Missing Default,de4dot.code.deobfuscators.dotNET_Reactor.v4,Deobfuscator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\dotNET_Reactor\v4\Deobfuscator.cs,DetectVersion,The following switch statement is missing a default case: switch (numIntPtrSizeCompares) {  					case 7:  					case 9: return DeobfuscatorInfo.THE_NAME + " 4.5";  					case 10:  						if (!hasSymmetricAlgorithm)  							return DeobfuscatorInfo.THE_NAME + " 4.6";  						if (hasCatchString)  							return DeobfuscatorInfo.THE_NAME + " 4.7";  						return DeobfuscatorInfo.THE_NAME + " 4.8";  					}
Missing Default,de4dot.code.deobfuscators.dotNET_Reactor.v4,Deobfuscator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\dotNET_Reactor\v4\Deobfuscator.cs,DetectVersion,The following switch statement is missing a default case: switch (numIntPtrSizeCompares) {  					case 6:  					case 8: return DeobfuscatorInfo.THE_NAME + " 4.5";  					case 9:  						if (!hasSymmetricAlgorithm)  							return DeobfuscatorInfo.THE_NAME + " 4.6";  						if (hasCatchString)  							return DeobfuscatorInfo.THE_NAME + " 4.7";  						return DeobfuscatorInfo.THE_NAME + " 4.8";  					}
Missing Default,de4dot.code.deobfuscators.dotNET_Reactor.v4,Deobfuscator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\dotNET_Reactor\v4\Deobfuscator.cs,OnWriterEvent,The following switch statement is missing a default case: switch (evt) {  			case ModuleWriterEvent.Begin:  				// The decrypter assumes RVAs are unique so don't share any method bodies  				writer.TheOptions.ShareMethodBodies = false;  				break;    			case ModuleWriterEvent.MDBeginAddResources:  				methodsDecrypter.PrepareEncryptNativeMethods(writer);  				break;    			case ModuleWriterEvent.BeginWriteChunks:  				methodsDecrypter.EncryptNativeMethods(writer);  				break;  			}
Missing Default,de4dot.code.deobfuscators.Eazfuscator_NET,EfUtils,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\EfUtils.cs,GetNextStore,The following switch statement is missing a default case: switch (instr.OpCode.Code) {  				case Code.Starg:  				case Code.Starg_S:  				case Code.Stelem:  				case Code.Stelem_I:  				case Code.Stelem_I1:  				case Code.Stelem_I2:  				case Code.Stelem_I4:  				case Code.Stelem_I8:  				case Code.Stelem_R4:  				case Code.Stelem_R8:  				case Code.Stelem_Ref:  				case Code.Stfld:  				case Code.Stind_I:  				case Code.Stind_I1:  				case Code.Stind_I2:  				case Code.Stind_I4:  				case Code.Stind_I8:  				case Code.Stind_R4:  				case Code.Stind_R8:  				case Code.Stind_Ref:  				case Code.Stloc:  				case Code.Stloc_0:  				case Code.Stloc_1:  				case Code.Stloc_2:  				case Code.Stloc_3:  				case Code.Stloc_S:  				case Code.Stobj:  				case Code.Stsfld:  					return instr;  				}
Missing Default,de4dot.code.deobfuscators.Eazfuscator_NET,VersionDetector,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Eazfuscator_NET\VersionDetector.cs,CreateLocalsArray,The following switch statement is missing a default case: switch (frameworkType) {  			case FrameworkType.CompactFramework:  				removeLocals = removeLocals_cf;  				break;  			}
Missing Default,de4dot.code.deobfuscators.MaxtoCode,MethodInfos,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MaxtoCode\MethodsDecrypter.cs,Decrypt11,The following switch statement is missing a default case: switch (i % 3) {  					case 0:  						dest[i] = (byte)(encrypted[i] ^ mcKey.ReadByte(ki));  						break;    					case 1:  						b = (byte)(encrypted[i] ^ mcKey.ReadByte(ki));  						dest[i] = (byte)((b << 4) | (b >> 4));  						break;    					case 2:  						b = encrypted[i];  						dest[i] = (byte)((b << 4) | (b >> 4));  						break;  					}
Missing Default,de4dot.code.deobfuscators.MPRESS,Lzmat,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\MPRESS\Lzmat.cs,Decompress,The following switch statement is missing a default case: switch(r_cnt&3)  					{  					case 0:  						dist=(dist&LZMAT_DIST_MSK0)+1;  						break;  					case 1:  						inPos+=cur_nib;  						dist = (dist&LZMAT_DIST_MSK1)+0x41;  						cur_nib^=1;  						break;  					case 2:  						inPos++;  						dist += 0x441;  						break;  					case 3:  						if((inPos+2+cur_nib)>cbIn)  							return LzmatStatus.INTEGRITY_FAILURE+1;  						inPos++;  						dist = (dist +   							((uint)LZMAT_GET_U4(pbIn'ref inPos'ref cur_nib)<<14))  							+0x4441;  						break;  					}
Missing Default,de4dot.code.deobfuscators.Spices_Net,Deobfuscator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Spices_Net\Deobfuscator.cs,FindSpicesAttributes,The following switch statement is missing a default case: switch (type.FullName) {  				case "NineRays.Decompiler.NotDecompile":  				case "NineRays.Obfuscator.Evaluation":  				case "NineRays.Obfuscator.SoftwareWatermarkAttribute":  					AddAttributeToBeRemoved(type' "Obfuscator attribute");  					foundSpicesAttribute = true;  					break;  				}
Missing Default,de4dot.code.deobfuscators.Xenocode,Deobfuscator,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\deobfuscators\Xenocode\Deobfuscator.cs,FindXenocodeAttribute,The following switch statement is missing a default case: switch (type.FullName) {  				case "Xenocode.Client.Attributes.AssemblyAttributes.ProcessedByXenocode":  				case "Xenocode.Client.Attributes.AssemblyAttributes.SuppressDisassembly":  				case "Xenocode.User.Attributes.AssemblyAttributes.ProcessedByXenoCode":  				case "Xenocode.User.Attributes.AssemblyAttributes.SuppressDisassembly":  					AddAttributeToBeRemoved(type' "Obfuscator attribute");  					foundXenocodeAttribute = true;  					break;  				}
Missing Default,de4dot.code.renamer,Renamer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\renamer\Renamer.cs,CreateEvent,The following switch statement is missing a default case: switch (methodType) {  			case EventMethodType.Adder:  				CreateEventAdder(newEventName' methodDef);  				break;  			case EventMethodType.Remover:  				CreateEventRemover(newEventName' methodDef);  				break;  			}
Missing Default,de4dot.code.renamer,Renamer,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\renamer\Renamer.cs,PrepareRenameVirtualMethods,The following switch statement is missing a default case: switch (group.Methods[0].MethodDef.Name.String) {  				case "Invoke":  				case "BeginInvoke":  				case "EndInvoke":  					return;  				}
Missing Default,de4dot.code.renamer,TypeInfo,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\renamer\TypeInfo.cs,CanRenameMethod,The following switch statement is missing a default case: switch (methodInfo.oldName) {  					case "BeginInvoke":  					case "EndInvoke":  					case "Invoke":  						return false;  					}
Missing Default,ICSharpCode.SharpZipLib.Zip.Compression,InflaterDynHeader,D:\research\architectureSmells\repos\0xd4d_de4dot\de4dot.code\SharpZipLib\Zip\Compression\InflaterDynHeader.cs,Decode,The following switch statement is missing a default case: switch (mode) {  						case LNUM:  							lnum = input.PeekBits(5);  							if (lnum < 0) {  								return false;  							}  							lnum += 257;  							input.DropBits(5);  							//  	    System.err.println("LNUM: "+lnum);  							mode = DNUM;  							goto case DNUM; // fall through  						case DNUM:  							dnum = input.PeekBits(5);  							if (dnum < 0) {  								return false;  							}  							dnum++;  							input.DropBits(5);  							//  	    System.err.println("DNUM: "+dnum);  							num = lnum+dnum;  							litdistLens = new byte[num];  							mode = BLNUM;  							goto case BLNUM; // fall through  						case BLNUM:  							blnum = input.PeekBits(4);  							if (blnum < 0) {  								return false;  							}  							blnum += 4;  							input.DropBits(4);  							blLens = new byte[19];  							ptr = 0;  							//  	    System.err.println("BLNUM: "+blnum);  							mode = BLLENS;  							goto case BLLENS; // fall through  						case BLLENS:  							while (ptr < blnum) {  								int len = input.PeekBits(3);  								if (len < 0) {  									return false;  								}  								input.DropBits(3);  								//  		System.err.println("blLens["+BL_ORDER[ptr]+"]: "+len);  								blLens[BL_ORDER[ptr]] = (byte) len;  								ptr++;  							}  							blTree = new InflaterHuffmanTree(blLens);  							blLens = null;  							ptr = 0;  							mode = LENS;  							goto case LENS; // fall through  						case LENS:   						{  							int symbol;  							while (((symbol = blTree.GetSymbol(input)) & ~15) == 0) {  								/* Normal case: symbol in [0..15] */  							  								//  		  System.err.println("litdistLens["+ptr+"]: "+symbol);  								litdistLens[ptr++] = lastLen = (byte)symbol;  							  								if (ptr == num) {  									/* Finished */  									return true;  								}  							}  						  							/* need more input ? */  							if (symbol < 0) {  								return false;  							}  						  							/* otherwise repeat code */  							if (symbol >= 17) {  								/* repeat zero */  								//  		  System.err.println("repeating zero");  								lastLen = 0;  							} else {  								if (ptr == 0) {  									throw new SharpZipBaseException();  								}  							}  							repSymbol = symbol-16;  						}  							mode = REPS;  							goto case REPS; // fall through  						case REPS:  						{  							int bits = repBits[repSymbol];  							int count = input.PeekBits(bits);  							if (count < 0) {  								return false;  							}  							input.DropBits(bits);  							count += repMin[repSymbol];  							//  	      System.err.println("litdistLens repeated: "+count);  							  							if (ptr + count > num) {  								throw new SharpZipBaseException();  							}  							while (count-- > 0) {  								litdistLens[ptr++] = lastLen;  							}  							  							if (ptr == num) {  								/* Finished */  								return true;  							}  						}  						mode = LENS;  						goto decode_loop;  					}
