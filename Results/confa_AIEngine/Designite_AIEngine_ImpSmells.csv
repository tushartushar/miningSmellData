Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,AIEngine.Entities,Agent,C:\repos\confa_AIEngine\AIEngine\Entities\Agent.cs,Agent,The method has 5 parameters.
Long Parameter List,AIEngine.Entities,EnvironmentAgent,C:\repos\confa_AIEngine\AIEngine\Entities\EnvironmentAgent.cs,EnvironmentAgent,The method has 5 parameters.
Long Parameter List,AIEngine.Entities,GameEnvironment,C:\repos\confa_AIEngine\AIEngine\Entities\GameEnvironment.cs,CalculateAgentsEnvironmentParameters,The method has 6 parameters.
Long Parameter List,AIEngine.GeneticAlgorithmImplementation.NeuroGeneticAlgorithm,NeuroGeneticAlgorithm,C:\repos\confa_AIEngine\AIEngine\GeneticAlgorithmImplementation\NeuroGeneticAlgorithm\NeuroGeneticAlgorithm.cs,NeuroGeneticAlgorithm,The method has 6 parameters.
Long Parameter List,AIEngine.GeneticAlgorithmImplementation.NeuroGeneticAlgorithm,NeuroGeneticAlgorithm,C:\repos\confa_AIEngine\AIEngine\GeneticAlgorithmImplementation\NeuroGeneticAlgorithm\NeuroGeneticAlgorithm.cs,PerformIteration,The method has 5 parameters.
Long Parameter List,AIEngine,NeuralNetworkExtensions,C:\repos\confa_AIEngine\AIEngine\NeuralNetworkExtensions.cs,SetNetworkState,The method has 9 parameters.
Long Statement,AIEngine.Entities,EnvironmentAgent,C:\repos\confa_AIEngine\AIEngine\Entities\EnvironmentAgent.cs,getAngleBetweenVectors_,The length of the statement  "	return (first.X * second.X + first.Y * second.Y) / (Math.Sqrt (Math.Pow (first.X' 2) + Math.Pow (first.Y' 2)) * Math.Sqrt (Math.Pow (second.X' 2) + Math.Pow (second.Y' 2))); " is 173.
Long Statement,AIEngine.Entities,GameEnvironment,C:\repos\confa_AIEngine\AIEngine\Entities\GameEnvironment.cs,CalculateAgentsEnvironmentParameters,The length of the statement  "		var nearAgents = agents.Where (x => x != localAgent && GetDistanceBetweenAgents (x' localAgent) < VisibleZone && (localAgent.Vector.X * (x.X - localAgent.X) + localAgent.Vector.Y * (x.Y - localAgent.Y)) >= 0); " is 209.
Long Statement,AIEngine.Entities,GameEnvironment,C:\repos\confa_AIEngine\AIEngine\Entities\GameEnvironment.cs,CalculateAgentsEnvironmentParameters,The length of the statement  "		var nearFood = Foods.Where (x => GetDistanceBetweenAgents (x' localAgent) < VisibleZone && (localAgent.Vector.X * (x.X - localAgent.X) + localAgent.Vector.Y * (x.Y - localAgent.Y)) >= 0); " is 187.
Long Statement,AIEngine.Entities,GameEnvironment,C:\repos\confa_AIEngine\AIEngine\Entities\GameEnvironment.cs,CalculateAgentsEnvironmentParameters,The length of the statement  "			localAgent.NearestAgent = agents.FirstOrDefault (y => GetDistanceBetweenAgents (y' localAgent) == localAgent.DistanceToNearestAgent); " is 133.
Long Statement,AIEngine.Entities,GameEnvironment,C:\repos\confa_AIEngine\AIEngine\Entities\GameEnvironment.cs,CalculateAgentsEnvironmentParameters,The length of the statement  "			localAgent.NearestFood = Foods.FirstOrDefault (y => GetDistanceBetweenAgents (y' localAgent) == localAgent.DistanceToNearestFood); " is 130.
Long Statement,AIEngine.GeneticAlgorithmImplementation.NeuroGeneticAlgorithm,NeuroGeneticAlgorithm,C:\repos\confa_AIEngine\AIEngine\GeneticAlgorithmImplementation\NeuroGeneticAlgorithm\NeuroGeneticAlgorithm.cs,generateNeuroChromosomeByTemplate,The length of the statement  "		var activationFunc = ActivationFunctions.AvailableActivatonFunctions.FirstOrDefault (x => x.Index == activationFuncIndex); " is 122.
Long Statement,AIEngine.GeneticAlgorithmImplementation.NeuroGeneticAlgorithm,NeuroGeneticAlgorithm,C:\repos\confa_AIEngine\AIEngine\GeneticAlgorithmImplementation\NeuroGeneticAlgorithm\NeuroGeneticAlgorithm.cs,PerformIteration,The length of the statement  "			TestGameEnvironment.Agents [j] = new EnvironmentAgent (Random.Next (90' 100)' Random.Next (90' 100)' Random.Next (0' 360)' Color.Beige' new NeuralNetwork ()) { " is 159.
Magic Number,AIEngine.Entities,Agent,C:\repos\confa_AIEngine\AIEngine\Entities\Agent.cs,Agent,The following statement contains a magic number: Speed = 0.7;  
Magic Number,AIEngine.Entities,EnvironmentAgent,C:\repos\confa_AIEngine\AIEngine\Entities\EnvironmentAgent.cs,getAngleBetweenVectors_,The following statement contains a magic number: return (first.X * second.X + first.Y * second.Y) / (Math.Sqrt (Math.Pow (first.X' 2) + Math.Pow (first.Y' 2)) * Math.Sqrt (Math.Pow (second.X' 2) + Math.Pow (second.Y' 2)));  
Magic Number,AIEngine.Entities,EnvironmentAgent,C:\repos\confa_AIEngine\AIEngine\Entities\EnvironmentAgent.cs,getAngleBetweenVectors_,The following statement contains a magic number: return (first.X * second.X + first.Y * second.Y) / (Math.Sqrt (Math.Pow (first.X' 2) + Math.Pow (first.Y' 2)) * Math.Sqrt (Math.Pow (second.X' 2) + Math.Pow (second.Y' 2)));  
Magic Number,AIEngine.Entities,EnvironmentAgent,C:\repos\confa_AIEngine\AIEngine\Entities\EnvironmentAgent.cs,getAngleBetweenVectors_,The following statement contains a magic number: return (first.X * second.X + first.Y * second.Y) / (Math.Sqrt (Math.Pow (first.X' 2) + Math.Pow (first.Y' 2)) * Math.Sqrt (Math.Pow (second.X' 2) + Math.Pow (second.Y' 2)));  
Magic Number,AIEngine.Entities,EnvironmentAgent,C:\repos\confa_AIEngine\AIEngine\Entities\EnvironmentAgent.cs,getAngleBetweenVectors_,The following statement contains a magic number: return (first.X * second.X + first.Y * second.Y) / (Math.Sqrt (Math.Pow (first.X' 2) + Math.Pow (first.Y' 2)) * Math.Sqrt (Math.Pow (second.X' 2) + Math.Pow (second.Y' 2)));  
Magic Number,AIEngine.Entities,EnvironmentAgent,C:\repos\confa_AIEngine\AIEngine\Entities\EnvironmentAgent.cs,Move,The following statement contains a magic number: Angle = Angle % 360;  
Magic Number,AIEngine.Entities,EnvironmentOptions,C:\repos\confa_AIEngine\AIEngine\Entities\EnvironmentOptions.cs,EnvironmentOptions,The following statement contains a magic number: AgentsCount = 10;  
Magic Number,AIEngine.Entities,EnvironmentOptions,C:\repos\confa_AIEngine\AIEngine\Entities\EnvironmentOptions.cs,EnvironmentOptions,The following statement contains a magic number: FoodCount = 10;  
Magic Number,AIEngine.Entities,EnvironmentOptions,C:\repos\confa_AIEngine\AIEngine\Entities\EnvironmentOptions.cs,EnvironmentOptions,The following statement contains a magic number: FieldHeight = 400;  
Magic Number,AIEngine.Entities,EnvironmentOptions,C:\repos\confa_AIEngine\AIEngine\Entities\EnvironmentOptions.cs,EnvironmentOptions,The following statement contains a magic number: FieldWidth = 600;  
Magic Number,AIEngine.Entities,GameEnvironment,C:\repos\confa_AIEngine\AIEngine\Entities\GameEnvironment.cs,GameEnvironment,The following statement contains a magic number: for (int i = 0; i < options.AgentsCount; i++) {  	var color = Color.FromArgb (Random.Next (0' 255)' Random.Next (0' 255)' Random.Next (0' 255));  	var agent = new EnvironmentAgent (Random.Next (0' Width)' Random.Next (0' Height)' Random.Next (0' 360)' color' options.NeuralNetwork);  	Agents.Add (agent);  }  
Magic Number,AIEngine.Entities,GameEnvironment,C:\repos\confa_AIEngine\AIEngine\Entities\GameEnvironment.cs,GameEnvironment,The following statement contains a magic number: for (int i = 0; i < options.AgentsCount; i++) {  	var color = Color.FromArgb (Random.Next (0' 255)' Random.Next (0' 255)' Random.Next (0' 255));  	var agent = new EnvironmentAgent (Random.Next (0' Width)' Random.Next (0' Height)' Random.Next (0' 360)' color' options.NeuralNetwork);  	Agents.Add (agent);  }  
Magic Number,AIEngine.Entities,GameEnvironment,C:\repos\confa_AIEngine\AIEngine\Entities\GameEnvironment.cs,GameEnvironment,The following statement contains a magic number: for (int i = 0; i < options.AgentsCount; i++) {  	var color = Color.FromArgb (Random.Next (0' 255)' Random.Next (0' 255)' Random.Next (0' 255));  	var agent = new EnvironmentAgent (Random.Next (0' Width)' Random.Next (0' Height)' Random.Next (0' 360)' color' options.NeuralNetwork);  	Agents.Add (agent);  }  
Magic Number,AIEngine.Entities,GameEnvironment,C:\repos\confa_AIEngine\AIEngine\Entities\GameEnvironment.cs,GameEnvironment,The following statement contains a magic number: for (int i = 0; i < options.AgentsCount; i++) {  	var color = Color.FromArgb (Random.Next (0' 255)' Random.Next (0' 255)' Random.Next (0' 255));  	var agent = new EnvironmentAgent (Random.Next (0' Width)' Random.Next (0' Height)' Random.Next (0' 360)' color' options.NeuralNetwork);  	Agents.Add (agent);  }  
Magic Number,AIEngine.Entities,GameEnvironment,C:\repos\confa_AIEngine\AIEngine\Entities\GameEnvironment.cs,GetHarvestedFood,The following statement contains a magic number: foreach (var food in Foods) {  	for (int index = 0; index < Agents.Count; index++) {  		var agent = Agents [index];  		if (GetDistance (food.X' food.Y' agent.X' agent.Y) < 15) {  			harvested.Add (food);  			agent.HarvestedFood++;  		}  	}  }  
Magic Number,AIEngine.Entities,GameEnvironment,C:\repos\confa_AIEngine\AIEngine\Entities\GameEnvironment.cs,GetHarvestedFood,The following statement contains a magic number: for (int index = 0; index < Agents.Count; index++) {  	var agent = Agents [index];  	if (GetDistance (food.X' food.Y' agent.X' agent.Y) < 15) {  		harvested.Add (food);  		agent.HarvestedFood++;  	}  }  
Magic Number,AIEngine.Entities,GameEnvironment,C:\repos\confa_AIEngine\AIEngine\Entities\GameEnvironment.cs,GetHarvestedFood,The following statement contains a magic number: if (GetDistance (food.X' food.Y' agent.X' agent.Y) < 15) {  	harvested.Add (food);  	agent.HarvestedFood++;  }  
Magic Number,AIEngine.Entities,GameEnvironment,C:\repos\confa_AIEngine\AIEngine\Entities\GameEnvironment.cs,GetDistance,The following statement contains a magic number: return Math.Sqrt (Math.Pow (x2 - x1' 2) + (Math.Pow (y2 - y1' 2)));  
Magic Number,AIEngine.Entities,GameEnvironment,C:\repos\confa_AIEngine\AIEngine\Entities\GameEnvironment.cs,GetDistance,The following statement contains a magic number: return Math.Sqrt (Math.Pow (x2 - x1' 2) + (Math.Pow (y2 - y1' 2)));  
Magic Number,AIEngine.Entities,GameEnvironment,C:\repos\confa_AIEngine\AIEngine\Entities\GameEnvironment.cs,CanMove,The following statement contains a magic number: if (newX <= 5 || newX >= Width - 5) {  	return false;  }  
Magic Number,AIEngine.Entities,GameEnvironment,C:\repos\confa_AIEngine\AIEngine\Entities\GameEnvironment.cs,CanMove,The following statement contains a magic number: if (newX <= 5 || newX >= Width - 5) {  	return false;  }  
Magic Number,AIEngine.Entities,GameEnvironment,C:\repos\confa_AIEngine\AIEngine\Entities\GameEnvironment.cs,CanMove,The following statement contains a magic number: if (newY <= 5 || newY >= Height - 5) {  	return false;  }  
Magic Number,AIEngine.Entities,GameEnvironment,C:\repos\confa_AIEngine\AIEngine\Entities\GameEnvironment.cs,CanMove,The following statement contains a magic number: if (newY <= 5 || newY >= Height - 5) {  	return false;  }  
Magic Number,AIEngine.GeneticAlgorithmImplementation,ComplexNeuroCrossover,C:\repos\confa_AIEngine\AIEngine\GeneticAlgorithmImplementation\ComplexNeuroCrossover.cs,Perform,The following statement contains a magic number: if (population.Count > 2) {  	throw new InvalidArgumentCountException ("Invalid argument count provided to the Perform Crossover function.");  }  
Magic Number,AIEngine.GeneticAlgorithmImplementation,ComplexNeuroCrossover,C:\repos\confa_AIEngine\AIEngine\GeneticAlgorithmImplementation\ComplexNeuroCrossover.cs,Perform,The following statement contains a magic number: for (int i = 0' j = 0; i < firstChrom.Gens.Count; i += part' j++) {  	var firstGensPart = firstChrom.Gens.Skip (i).Take (part).ToList ();  	var secondGensPart = secondChrom.Gens.Skip (i).Take (part).ToList ();  	if (j % 2 != 0) {  		crossoverNeuroChromosome_ (firstGensPart' secondGensPart);  	}  	firstChild.Gens.AddRange (firstGensPart);  	secondChild.Gens.AddRange (secondGensPart);  }  
Magic Number,AIEngine.GeneticAlgorithmImplementation,ComplexNeuroCrossover,C:\repos\confa_AIEngine\AIEngine\GeneticAlgorithmImplementation\ComplexNeuroCrossover.cs,Perform,The following statement contains a magic number: if (j % 2 != 0) {  	crossoverNeuroChromosome_ (firstGensPart' secondGensPart);  }  
Magic Number,AIEngine.GeneticAlgorithmImplementation,ComplexNeuroCrossover,C:\repos\confa_AIEngine\AIEngine\GeneticAlgorithmImplementation\ComplexNeuroCrossover.cs,crossoverNeuroChromosome_,The following statement contains a magic number: if (ShuffleWeights) {  	for (int i = 0; i < count; i++) {  		var firstNeuroGen = firstGensPart [i] as NeuroGen;  		var secondNeuroGen = secondGensPart [i] as NeuroGen;  		if (ShuffleActivationFunctions) {  			if (Random.Next (0' 100) > 50) {  				var func = firstNeuroGen.Value.ActivationFunc;  				firstNeuroGen.Value.ActivationFunc = secondNeuroGen.Value.ActivationFunc;  				secondNeuroGen.Value.ActivationFunc = func;  			}  		}  		var half = firstNeuroGen.Weights.Count / 2;  		var first = firstNeuroGen.Weights.Take (half).ToList ();  		first.AddRange (secondNeuroGen.Weights.Skip (half).Take (count - half + 1));  		var second = secondNeuroGen.Weights.Take (half).ToList ();  		second.AddRange (firstNeuroGen.Weights.Skip (half).Take (count - half + 1));  		firstNeuroGen.Weights = first;  		secondNeuroGen.Weights = second;  	}  }  
Magic Number,AIEngine.GeneticAlgorithmImplementation,ComplexNeuroCrossover,C:\repos\confa_AIEngine\AIEngine\GeneticAlgorithmImplementation\ComplexNeuroCrossover.cs,crossoverNeuroChromosome_,The following statement contains a magic number: if (ShuffleWeights) {  	for (int i = 0; i < count; i++) {  		var firstNeuroGen = firstGensPart [i] as NeuroGen;  		var secondNeuroGen = secondGensPart [i] as NeuroGen;  		if (ShuffleActivationFunctions) {  			if (Random.Next (0' 100) > 50) {  				var func = firstNeuroGen.Value.ActivationFunc;  				firstNeuroGen.Value.ActivationFunc = secondNeuroGen.Value.ActivationFunc;  				secondNeuroGen.Value.ActivationFunc = func;  			}  		}  		var half = firstNeuroGen.Weights.Count / 2;  		var first = firstNeuroGen.Weights.Take (half).ToList ();  		first.AddRange (secondNeuroGen.Weights.Skip (half).Take (count - half + 1));  		var second = secondNeuroGen.Weights.Take (half).ToList ();  		second.AddRange (firstNeuroGen.Weights.Skip (half).Take (count - half + 1));  		firstNeuroGen.Weights = first;  		secondNeuroGen.Weights = second;  	}  }  
Magic Number,AIEngine.GeneticAlgorithmImplementation,ComplexNeuroCrossover,C:\repos\confa_AIEngine\AIEngine\GeneticAlgorithmImplementation\ComplexNeuroCrossover.cs,crossoverNeuroChromosome_,The following statement contains a magic number: if (ShuffleWeights) {  	for (int i = 0; i < count; i++) {  		var firstNeuroGen = firstGensPart [i] as NeuroGen;  		var secondNeuroGen = secondGensPart [i] as NeuroGen;  		if (ShuffleActivationFunctions) {  			if (Random.Next (0' 100) > 50) {  				var func = firstNeuroGen.Value.ActivationFunc;  				firstNeuroGen.Value.ActivationFunc = secondNeuroGen.Value.ActivationFunc;  				secondNeuroGen.Value.ActivationFunc = func;  			}  		}  		var half = firstNeuroGen.Weights.Count / 2;  		var first = firstNeuroGen.Weights.Take (half).ToList ();  		first.AddRange (secondNeuroGen.Weights.Skip (half).Take (count - half + 1));  		var second = secondNeuroGen.Weights.Take (half).ToList ();  		second.AddRange (firstNeuroGen.Weights.Skip (half).Take (count - half + 1));  		firstNeuroGen.Weights = first;  		secondNeuroGen.Weights = second;  	}  }  
Magic Number,AIEngine.GeneticAlgorithmImplementation,ComplexNeuroCrossover,C:\repos\confa_AIEngine\AIEngine\GeneticAlgorithmImplementation\ComplexNeuroCrossover.cs,crossoverNeuroChromosome_,The following statement contains a magic number: for (int i = 0; i < count; i++) {  	var firstNeuroGen = firstGensPart [i] as NeuroGen;  	var secondNeuroGen = secondGensPart [i] as NeuroGen;  	if (ShuffleActivationFunctions) {  		if (Random.Next (0' 100) > 50) {  			var func = firstNeuroGen.Value.ActivationFunc;  			firstNeuroGen.Value.ActivationFunc = secondNeuroGen.Value.ActivationFunc;  			secondNeuroGen.Value.ActivationFunc = func;  		}  	}  	var half = firstNeuroGen.Weights.Count / 2;  	var first = firstNeuroGen.Weights.Take (half).ToList ();  	first.AddRange (secondNeuroGen.Weights.Skip (half).Take (count - half + 1));  	var second = secondNeuroGen.Weights.Take (half).ToList ();  	second.AddRange (firstNeuroGen.Weights.Skip (half).Take (count - half + 1));  	firstNeuroGen.Weights = first;  	secondNeuroGen.Weights = second;  }  
Magic Number,AIEngine.GeneticAlgorithmImplementation,ComplexNeuroCrossover,C:\repos\confa_AIEngine\AIEngine\GeneticAlgorithmImplementation\ComplexNeuroCrossover.cs,crossoverNeuroChromosome_,The following statement contains a magic number: for (int i = 0; i < count; i++) {  	var firstNeuroGen = firstGensPart [i] as NeuroGen;  	var secondNeuroGen = secondGensPart [i] as NeuroGen;  	if (ShuffleActivationFunctions) {  		if (Random.Next (0' 100) > 50) {  			var func = firstNeuroGen.Value.ActivationFunc;  			firstNeuroGen.Value.ActivationFunc = secondNeuroGen.Value.ActivationFunc;  			secondNeuroGen.Value.ActivationFunc = func;  		}  	}  	var half = firstNeuroGen.Weights.Count / 2;  	var first = firstNeuroGen.Weights.Take (half).ToList ();  	first.AddRange (secondNeuroGen.Weights.Skip (half).Take (count - half + 1));  	var second = secondNeuroGen.Weights.Take (half).ToList ();  	second.AddRange (firstNeuroGen.Weights.Skip (half).Take (count - half + 1));  	firstNeuroGen.Weights = first;  	secondNeuroGen.Weights = second;  }  
Magic Number,AIEngine.GeneticAlgorithmImplementation,ComplexNeuroCrossover,C:\repos\confa_AIEngine\AIEngine\GeneticAlgorithmImplementation\ComplexNeuroCrossover.cs,crossoverNeuroChromosome_,The following statement contains a magic number: for (int i = 0; i < count; i++) {  	var firstNeuroGen = firstGensPart [i] as NeuroGen;  	var secondNeuroGen = secondGensPart [i] as NeuroGen;  	if (ShuffleActivationFunctions) {  		if (Random.Next (0' 100) > 50) {  			var func = firstNeuroGen.Value.ActivationFunc;  			firstNeuroGen.Value.ActivationFunc = secondNeuroGen.Value.ActivationFunc;  			secondNeuroGen.Value.ActivationFunc = func;  		}  	}  	var half = firstNeuroGen.Weights.Count / 2;  	var first = firstNeuroGen.Weights.Take (half).ToList ();  	first.AddRange (secondNeuroGen.Weights.Skip (half).Take (count - half + 1));  	var second = secondNeuroGen.Weights.Take (half).ToList ();  	second.AddRange (firstNeuroGen.Weights.Skip (half).Take (count - half + 1));  	firstNeuroGen.Weights = first;  	secondNeuroGen.Weights = second;  }  
Magic Number,AIEngine.GeneticAlgorithmImplementation,ComplexNeuroCrossover,C:\repos\confa_AIEngine\AIEngine\GeneticAlgorithmImplementation\ComplexNeuroCrossover.cs,crossoverNeuroChromosome_,The following statement contains a magic number: if (ShuffleActivationFunctions) {  	if (Random.Next (0' 100) > 50) {  		var func = firstNeuroGen.Value.ActivationFunc;  		firstNeuroGen.Value.ActivationFunc = secondNeuroGen.Value.ActivationFunc;  		secondNeuroGen.Value.ActivationFunc = func;  	}  }  
Magic Number,AIEngine.GeneticAlgorithmImplementation,ComplexNeuroCrossover,C:\repos\confa_AIEngine\AIEngine\GeneticAlgorithmImplementation\ComplexNeuroCrossover.cs,crossoverNeuroChromosome_,The following statement contains a magic number: if (ShuffleActivationFunctions) {  	if (Random.Next (0' 100) > 50) {  		var func = firstNeuroGen.Value.ActivationFunc;  		firstNeuroGen.Value.ActivationFunc = secondNeuroGen.Value.ActivationFunc;  		secondNeuroGen.Value.ActivationFunc = func;  	}  }  
Magic Number,AIEngine.GeneticAlgorithmImplementation,ComplexNeuroCrossover,C:\repos\confa_AIEngine\AIEngine\GeneticAlgorithmImplementation\ComplexNeuroCrossover.cs,crossoverNeuroChromosome_,The following statement contains a magic number: if (Random.Next (0' 100) > 50) {  	var func = firstNeuroGen.Value.ActivationFunc;  	firstNeuroGen.Value.ActivationFunc = secondNeuroGen.Value.ActivationFunc;  	secondNeuroGen.Value.ActivationFunc = func;  }  
Magic Number,AIEngine.GeneticAlgorithmImplementation,ComplexNeuroCrossover,C:\repos\confa_AIEngine\AIEngine\GeneticAlgorithmImplementation\ComplexNeuroCrossover.cs,crossoverNeuroChromosome_,The following statement contains a magic number: if (Random.Next (0' 100) > 50) {  	var func = firstNeuroGen.Value.ActivationFunc;  	firstNeuroGen.Value.ActivationFunc = secondNeuroGen.Value.ActivationFunc;  	secondNeuroGen.Value.ActivationFunc = func;  }  
Magic Number,AIEngine.GeneticAlgorithmImplementation,NeuroMutation,C:\repos\confa_AIEngine\AIEngine\GeneticAlgorithmImplementation\NeuroMutation.cs,Mutate,The following statement contains a magic number: if (Random.Next (0' 100) > MutatedPropability) {  	for (int i = 0; i < MutatedGen; i++) {  		var first = Random.Next (chromosome.Gens.Count);  		var second = Random.Next (chromosome.Gens.Count);  		mutateGen_ (chromosome.Gens [first]);  		mutateGen_ (chromosome.Gens [second]);  	}  }  
Magic Number,AIEngine.GeneticAlgorithmImplementation,SimpleTwoDotNeuroCrossover,C:\repos\confa_AIEngine\AIEngine\GeneticAlgorithmImplementation\SimpleTwoDotNeuroCrossover.cs,Perform,The following statement contains a magic number: if (population.Count > 2) {  	throw new InvalidArgumentCountException ("Invalid argument count provided to the Perform Crossover function.");  }  
Magic Number,AIEngine.GeneticAlgorithmImplementation,SimpleTwoDotNeuroCrossover,C:\repos\confa_AIEngine\AIEngine\GeneticAlgorithmImplementation\SimpleTwoDotNeuroCrossover.cs,Perform,The following statement contains a magic number: firstChild.Gens.AddRange (firstChrom.Gens.Skip (part * 2).Take (count - part * 2));  
Magic Number,AIEngine.GeneticAlgorithmImplementation,SimpleTwoDotNeuroCrossover,C:\repos\confa_AIEngine\AIEngine\GeneticAlgorithmImplementation\SimpleTwoDotNeuroCrossover.cs,Perform,The following statement contains a magic number: firstChild.Gens.AddRange (firstChrom.Gens.Skip (part * 2).Take (count - part * 2));  
Magic Number,AIEngine.GeneticAlgorithmImplementation,SimpleTwoDotNeuroCrossover,C:\repos\confa_AIEngine\AIEngine\GeneticAlgorithmImplementation\SimpleTwoDotNeuroCrossover.cs,Perform,The following statement contains a magic number: secondChild.Gens.AddRange (secondChrom.Gens.Skip (part * 2).Take (count - part * 2));  
Magic Number,AIEngine.GeneticAlgorithmImplementation,SimpleTwoDotNeuroCrossover,C:\repos\confa_AIEngine\AIEngine\GeneticAlgorithmImplementation\SimpleTwoDotNeuroCrossover.cs,Perform,The following statement contains a magic number: secondChild.Gens.AddRange (secondChrom.Gens.Skip (part * 2).Take (count - part * 2));  
Magic Number,AIEngine.GeneticAlgorithmImplementation.NeuroGeneticAlgorithm,NeuroGeneticAlgorithm,C:\repos\confa_AIEngine\AIEngine\GeneticAlgorithmImplementation\NeuroGeneticAlgorithm\NeuroGeneticAlgorithm.cs,PerformIteration,The following statement contains a magic number: foreach (NeuroChromosome chromosome in Population) {  	for (int j = 0; j < TestGameEnvironment.Agents.Count; j++) {  		TestGameEnvironment.Agents [j] = new EnvironmentAgent (Random.Next (90' 100)' Random.Next (90' 100)' Random.Next (0' 360)' Color.Beige' new NeuralNetwork ()) {  			HarvestedFood = 1  		};  		TestGameEnvironment.Agents [j].Brain.SetNetworkState (chromosome);  	}  	for (var i = 0; i < 1000; i++) {  		TestGameEnvironment.CalculateAgentsEnvironmentParameters ();  		TestGameEnvironment.GetHarvestedFood ();  		for (int index = 0; index < TestGameEnvironment.Agents.Count; index++) {  			var agent = TestGameEnvironment.Agents [index];  			if (TestGameEnvironment.CanMove (agent)) {  				agent.Move ();  			}  		}  	}  	chromosome.FittnessValue = TestGameEnvironment.Agents.Sum (x => x.HarvestedFood);  }  
Magic Number,AIEngine.GeneticAlgorithmImplementation.NeuroGeneticAlgorithm,NeuroGeneticAlgorithm,C:\repos\confa_AIEngine\AIEngine\GeneticAlgorithmImplementation\NeuroGeneticAlgorithm\NeuroGeneticAlgorithm.cs,PerformIteration,The following statement contains a magic number: foreach (NeuroChromosome chromosome in Population) {  	for (int j = 0; j < TestGameEnvironment.Agents.Count; j++) {  		TestGameEnvironment.Agents [j] = new EnvironmentAgent (Random.Next (90' 100)' Random.Next (90' 100)' Random.Next (0' 360)' Color.Beige' new NeuralNetwork ()) {  			HarvestedFood = 1  		};  		TestGameEnvironment.Agents [j].Brain.SetNetworkState (chromosome);  	}  	for (var i = 0; i < 1000; i++) {  		TestGameEnvironment.CalculateAgentsEnvironmentParameters ();  		TestGameEnvironment.GetHarvestedFood ();  		for (int index = 0; index < TestGameEnvironment.Agents.Count; index++) {  			var agent = TestGameEnvironment.Agents [index];  			if (TestGameEnvironment.CanMove (agent)) {  				agent.Move ();  			}  		}  	}  	chromosome.FittnessValue = TestGameEnvironment.Agents.Sum (x => x.HarvestedFood);  }  
Magic Number,AIEngine.GeneticAlgorithmImplementation.NeuroGeneticAlgorithm,NeuroGeneticAlgorithm,C:\repos\confa_AIEngine\AIEngine\GeneticAlgorithmImplementation\NeuroGeneticAlgorithm\NeuroGeneticAlgorithm.cs,PerformIteration,The following statement contains a magic number: foreach (NeuroChromosome chromosome in Population) {  	for (int j = 0; j < TestGameEnvironment.Agents.Count; j++) {  		TestGameEnvironment.Agents [j] = new EnvironmentAgent (Random.Next (90' 100)' Random.Next (90' 100)' Random.Next (0' 360)' Color.Beige' new NeuralNetwork ()) {  			HarvestedFood = 1  		};  		TestGameEnvironment.Agents [j].Brain.SetNetworkState (chromosome);  	}  	for (var i = 0; i < 1000; i++) {  		TestGameEnvironment.CalculateAgentsEnvironmentParameters ();  		TestGameEnvironment.GetHarvestedFood ();  		for (int index = 0; index < TestGameEnvironment.Agents.Count; index++) {  			var agent = TestGameEnvironment.Agents [index];  			if (TestGameEnvironment.CanMove (agent)) {  				agent.Move ();  			}  		}  	}  	chromosome.FittnessValue = TestGameEnvironment.Agents.Sum (x => x.HarvestedFood);  }  
Magic Number,AIEngine.GeneticAlgorithmImplementation.NeuroGeneticAlgorithm,NeuroGeneticAlgorithm,C:\repos\confa_AIEngine\AIEngine\GeneticAlgorithmImplementation\NeuroGeneticAlgorithm\NeuroGeneticAlgorithm.cs,PerformIteration,The following statement contains a magic number: foreach (NeuroChromosome chromosome in Population) {  	for (int j = 0; j < TestGameEnvironment.Agents.Count; j++) {  		TestGameEnvironment.Agents [j] = new EnvironmentAgent (Random.Next (90' 100)' Random.Next (90' 100)' Random.Next (0' 360)' Color.Beige' new NeuralNetwork ()) {  			HarvestedFood = 1  		};  		TestGameEnvironment.Agents [j].Brain.SetNetworkState (chromosome);  	}  	for (var i = 0; i < 1000; i++) {  		TestGameEnvironment.CalculateAgentsEnvironmentParameters ();  		TestGameEnvironment.GetHarvestedFood ();  		for (int index = 0; index < TestGameEnvironment.Agents.Count; index++) {  			var agent = TestGameEnvironment.Agents [index];  			if (TestGameEnvironment.CanMove (agent)) {  				agent.Move ();  			}  		}  	}  	chromosome.FittnessValue = TestGameEnvironment.Agents.Sum (x => x.HarvestedFood);  }  
Magic Number,AIEngine.GeneticAlgorithmImplementation.NeuroGeneticAlgorithm,NeuroGeneticAlgorithm,C:\repos\confa_AIEngine\AIEngine\GeneticAlgorithmImplementation\NeuroGeneticAlgorithm\NeuroGeneticAlgorithm.cs,PerformIteration,The following statement contains a magic number: foreach (NeuroChromosome chromosome in Population) {  	for (int j = 0; j < TestGameEnvironment.Agents.Count; j++) {  		TestGameEnvironment.Agents [j] = new EnvironmentAgent (Random.Next (90' 100)' Random.Next (90' 100)' Random.Next (0' 360)' Color.Beige' new NeuralNetwork ()) {  			HarvestedFood = 1  		};  		TestGameEnvironment.Agents [j].Brain.SetNetworkState (chromosome);  	}  	for (var i = 0; i < 1000; i++) {  		TestGameEnvironment.CalculateAgentsEnvironmentParameters ();  		TestGameEnvironment.GetHarvestedFood ();  		for (int index = 0; index < TestGameEnvironment.Agents.Count; index++) {  			var agent = TestGameEnvironment.Agents [index];  			if (TestGameEnvironment.CanMove (agent)) {  				agent.Move ();  			}  		}  	}  	chromosome.FittnessValue = TestGameEnvironment.Agents.Sum (x => x.HarvestedFood);  }  
Magic Number,AIEngine.GeneticAlgorithmImplementation.NeuroGeneticAlgorithm,NeuroGeneticAlgorithm,C:\repos\confa_AIEngine\AIEngine\GeneticAlgorithmImplementation\NeuroGeneticAlgorithm\NeuroGeneticAlgorithm.cs,PerformIteration,The following statement contains a magic number: foreach (NeuroChromosome chromosome in Population) {  	for (int j = 0; j < TestGameEnvironment.Agents.Count; j++) {  		TestGameEnvironment.Agents [j] = new EnvironmentAgent (Random.Next (90' 100)' Random.Next (90' 100)' Random.Next (0' 360)' Color.Beige' new NeuralNetwork ()) {  			HarvestedFood = 1  		};  		TestGameEnvironment.Agents [j].Brain.SetNetworkState (chromosome);  	}  	for (var i = 0; i < 1000; i++) {  		TestGameEnvironment.CalculateAgentsEnvironmentParameters ();  		TestGameEnvironment.GetHarvestedFood ();  		for (int index = 0; index < TestGameEnvironment.Agents.Count; index++) {  			var agent = TestGameEnvironment.Agents [index];  			if (TestGameEnvironment.CanMove (agent)) {  				agent.Move ();  			}  		}  	}  	chromosome.FittnessValue = TestGameEnvironment.Agents.Sum (x => x.HarvestedFood);  }  
Magic Number,AIEngine.GeneticAlgorithmImplementation.NeuroGeneticAlgorithm,NeuroGeneticAlgorithm,C:\repos\confa_AIEngine\AIEngine\GeneticAlgorithmImplementation\NeuroGeneticAlgorithm\NeuroGeneticAlgorithm.cs,PerformIteration,The following statement contains a magic number: for (int j = 0; j < TestGameEnvironment.Agents.Count; j++) {  	TestGameEnvironment.Agents [j] = new EnvironmentAgent (Random.Next (90' 100)' Random.Next (90' 100)' Random.Next (0' 360)' Color.Beige' new NeuralNetwork ()) {  		HarvestedFood = 1  	};  	TestGameEnvironment.Agents [j].Brain.SetNetworkState (chromosome);  }  
Magic Number,AIEngine.GeneticAlgorithmImplementation.NeuroGeneticAlgorithm,NeuroGeneticAlgorithm,C:\repos\confa_AIEngine\AIEngine\GeneticAlgorithmImplementation\NeuroGeneticAlgorithm\NeuroGeneticAlgorithm.cs,PerformIteration,The following statement contains a magic number: for (int j = 0; j < TestGameEnvironment.Agents.Count; j++) {  	TestGameEnvironment.Agents [j] = new EnvironmentAgent (Random.Next (90' 100)' Random.Next (90' 100)' Random.Next (0' 360)' Color.Beige' new NeuralNetwork ()) {  		HarvestedFood = 1  	};  	TestGameEnvironment.Agents [j].Brain.SetNetworkState (chromosome);  }  
Magic Number,AIEngine.GeneticAlgorithmImplementation.NeuroGeneticAlgorithm,NeuroGeneticAlgorithm,C:\repos\confa_AIEngine\AIEngine\GeneticAlgorithmImplementation\NeuroGeneticAlgorithm\NeuroGeneticAlgorithm.cs,PerformIteration,The following statement contains a magic number: for (int j = 0; j < TestGameEnvironment.Agents.Count; j++) {  	TestGameEnvironment.Agents [j] = new EnvironmentAgent (Random.Next (90' 100)' Random.Next (90' 100)' Random.Next (0' 360)' Color.Beige' new NeuralNetwork ()) {  		HarvestedFood = 1  	};  	TestGameEnvironment.Agents [j].Brain.SetNetworkState (chromosome);  }  
Magic Number,AIEngine.GeneticAlgorithmImplementation.NeuroGeneticAlgorithm,NeuroGeneticAlgorithm,C:\repos\confa_AIEngine\AIEngine\GeneticAlgorithmImplementation\NeuroGeneticAlgorithm\NeuroGeneticAlgorithm.cs,PerformIteration,The following statement contains a magic number: for (int j = 0; j < TestGameEnvironment.Agents.Count; j++) {  	TestGameEnvironment.Agents [j] = new EnvironmentAgent (Random.Next (90' 100)' Random.Next (90' 100)' Random.Next (0' 360)' Color.Beige' new NeuralNetwork ()) {  		HarvestedFood = 1  	};  	TestGameEnvironment.Agents [j].Brain.SetNetworkState (chromosome);  }  
Magic Number,AIEngine.GeneticAlgorithmImplementation.NeuroGeneticAlgorithm,NeuroGeneticAlgorithm,C:\repos\confa_AIEngine\AIEngine\GeneticAlgorithmImplementation\NeuroGeneticAlgorithm\NeuroGeneticAlgorithm.cs,PerformIteration,The following statement contains a magic number: for (int j = 0; j < TestGameEnvironment.Agents.Count; j++) {  	TestGameEnvironment.Agents [j] = new EnvironmentAgent (Random.Next (90' 100)' Random.Next (90' 100)' Random.Next (0' 360)' Color.Beige' new NeuralNetwork ()) {  		HarvestedFood = 1  	};  	TestGameEnvironment.Agents [j].Brain.SetNetworkState (chromosome);  }  
Magic Number,AIEngine.GeneticAlgorithmImplementation.NeuroGeneticAlgorithm,NeuroGeneticAlgorithm,C:\repos\confa_AIEngine\AIEngine\GeneticAlgorithmImplementation\NeuroGeneticAlgorithm\NeuroGeneticAlgorithm.cs,PerformIteration,The following statement contains a magic number: TestGameEnvironment.Agents [j] = new EnvironmentAgent (Random.Next (90' 100)' Random.Next (90' 100)' Random.Next (0' 360)' Color.Beige' new NeuralNetwork ()) {  	HarvestedFood = 1  };  
Magic Number,AIEngine.GeneticAlgorithmImplementation.NeuroGeneticAlgorithm,NeuroGeneticAlgorithm,C:\repos\confa_AIEngine\AIEngine\GeneticAlgorithmImplementation\NeuroGeneticAlgorithm\NeuroGeneticAlgorithm.cs,PerformIteration,The following statement contains a magic number: TestGameEnvironment.Agents [j] = new EnvironmentAgent (Random.Next (90' 100)' Random.Next (90' 100)' Random.Next (0' 360)' Color.Beige' new NeuralNetwork ()) {  	HarvestedFood = 1  };  
Magic Number,AIEngine.GeneticAlgorithmImplementation.NeuroGeneticAlgorithm,NeuroGeneticAlgorithm,C:\repos\confa_AIEngine\AIEngine\GeneticAlgorithmImplementation\NeuroGeneticAlgorithm\NeuroGeneticAlgorithm.cs,PerformIteration,The following statement contains a magic number: TestGameEnvironment.Agents [j] = new EnvironmentAgent (Random.Next (90' 100)' Random.Next (90' 100)' Random.Next (0' 360)' Color.Beige' new NeuralNetwork ()) {  	HarvestedFood = 1  };  
Magic Number,AIEngine.GeneticAlgorithmImplementation.NeuroGeneticAlgorithm,NeuroGeneticAlgorithm,C:\repos\confa_AIEngine\AIEngine\GeneticAlgorithmImplementation\NeuroGeneticAlgorithm\NeuroGeneticAlgorithm.cs,PerformIteration,The following statement contains a magic number: TestGameEnvironment.Agents [j] = new EnvironmentAgent (Random.Next (90' 100)' Random.Next (90' 100)' Random.Next (0' 360)' Color.Beige' new NeuralNetwork ()) {  	HarvestedFood = 1  };  
Magic Number,AIEngine.GeneticAlgorithmImplementation.NeuroGeneticAlgorithm,NeuroGeneticAlgorithm,C:\repos\confa_AIEngine\AIEngine\GeneticAlgorithmImplementation\NeuroGeneticAlgorithm\NeuroGeneticAlgorithm.cs,PerformIteration,The following statement contains a magic number: TestGameEnvironment.Agents [j] = new EnvironmentAgent (Random.Next (90' 100)' Random.Next (90' 100)' Random.Next (0' 360)' Color.Beige' new NeuralNetwork ()) {  	HarvestedFood = 1  };  
Magic Number,AIEngine.GeneticAlgorithmImplementation.NeuroGeneticAlgorithm,NeuroGeneticAlgorithm,C:\repos\confa_AIEngine\AIEngine\GeneticAlgorithmImplementation\NeuroGeneticAlgorithm\NeuroGeneticAlgorithm.cs,PerformIteration,The following statement contains a magic number: for (var i = 0; i < 1000; i++) {  	TestGameEnvironment.CalculateAgentsEnvironmentParameters ();  	TestGameEnvironment.GetHarvestedFood ();  	for (int index = 0; index < TestGameEnvironment.Agents.Count; index++) {  		var agent = TestGameEnvironment.Agents [index];  		if (TestGameEnvironment.CanMove (agent)) {  			agent.Move ();  		}  	}  }  
