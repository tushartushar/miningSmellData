Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Problem_1_CSharp_Clean_Code,Program,C:\repos\vtsenev_CSharpPractice\Practical Exam 1\Author\Problem 1 CSharp Clean Code\Program.cs,Main,Cyclomatic complexity of the method is 21
Complex Conditional,Problem_1_CSharp_Clean_Code,Program,C:\repos\vtsenev_CSharpPractice\Practical Exam 1\Author\Problem 1 CSharp Clean Code\Program.cs,Main,The conditional expression  "!inMultiLineComment && j + 1 < line.Length && line [j] == '/' && line [j + 1] == '*'"  is complex.
Complex Conditional,Problem_1_CSharp_Clean_Code,Program,C:\repos\vtsenev_CSharpPractice\Practical Exam 1\Author\Problem 1 CSharp Clean Code\Program.cs,Main,The conditional expression  "inMultiLineComment && j + 1 < line.Length && line [j] == '*' && line [j + 1] == '/'"  is complex.
Magic Number,Problem_1_CSharp_Clean_Code,Program,C:\repos\vtsenev_CSharpPractice\Practical Exam 1\Author\Problem 1 CSharp Clean Code\Program.cs,Main,The following statement contains a magic number: for (int i = 1; i <= linesCount; i++) {  	string line = Console.ReadLine ();  	for (int j = 0; j < line.Length; j++) {  		if (inMultilineString) {  			if (line [j] == '\"' && j + 1 < line.Length && line [j + 1] == '\"') {  				code.Append ("\"\"");  				j++;  				continue;  			}  		}  		if (inString) {  			if (line [j] == '\\' && j + 1 < line.Length && line [j + 1] == '\"') {  				code.Append ("\\\"");  				j++;  				continue;  			}  			if (line [j] == '\\' && j + 1 < line.Length && line [j + 1] == '\'') {  				code.Append ("\\\'");  				j++;  				continue;  			}  			if (line [j] == '\"' && !inSingleQuotedString) {  				inString = false;  				inMultilineString = false;  				code.Append ('\"');  				continue;  			}  			if (line [j] == '\'' && inSingleQuotedString) {  				inString = false;  				inSingleQuotedString = false;  				code.Append ('\'');  				continue;  			}  			code.Append (line [j]);  			continue;  		}  		// Multiline comments  		if (!inMultiLineComment && j + 1 < line.Length && line [j] == '/' && line [j + 1] == '*') {  			inMultiLineComment = true;  			j++;  			continue;  		}  		if (inMultiLineComment && j + 1 < line.Length && line [j] == '*' && line [j + 1] == '/') {  			inMultiLineComment = false;  			j++;  			continue;  		}  		if (inMultiLineComment) {  			continue;  		}  		// One line comment  		if (line [j] == '/' && j + 1 < line.Length && line [j + 1] == '/') {  			if (j + 2 >= line.Length || line [j + 2] != '/') {  				break;  			}  			else {  				// Inline documentation (///)  				code.Append ("///");  				j += 2;  				continue;  			}  		}  		if (line [j] == '@' && j + 1 < line.Length && line [j + 1] == '\"') {  			inString = true;  			inMultilineString = true;  			j++;  			code.Append ("@\"");  			continue;  		}  		if (line [j] == '\"') {  			inString = true;  		}  		if (line [j] == '\'') {  			inString = true;  			inSingleQuotedString = true;  		}  		code.Append (line [j]);  	}  	if (!inMultiLineComment)  		code.AppendLine ();  }  
Magic Number,Problem_1_CSharp_Clean_Code,Program,C:\repos\vtsenev_CSharpPractice\Practical Exam 1\Author\Problem 1 CSharp Clean Code\Program.cs,Main,The following statement contains a magic number: for (int i = 1; i <= linesCount; i++) {  	string line = Console.ReadLine ();  	for (int j = 0; j < line.Length; j++) {  		if (inMultilineString) {  			if (line [j] == '\"' && j + 1 < line.Length && line [j + 1] == '\"') {  				code.Append ("\"\"");  				j++;  				continue;  			}  		}  		if (inString) {  			if (line [j] == '\\' && j + 1 < line.Length && line [j + 1] == '\"') {  				code.Append ("\\\"");  				j++;  				continue;  			}  			if (line [j] == '\\' && j + 1 < line.Length && line [j + 1] == '\'') {  				code.Append ("\\\'");  				j++;  				continue;  			}  			if (line [j] == '\"' && !inSingleQuotedString) {  				inString = false;  				inMultilineString = false;  				code.Append ('\"');  				continue;  			}  			if (line [j] == '\'' && inSingleQuotedString) {  				inString = false;  				inSingleQuotedString = false;  				code.Append ('\'');  				continue;  			}  			code.Append (line [j]);  			continue;  		}  		// Multiline comments  		if (!inMultiLineComment && j + 1 < line.Length && line [j] == '/' && line [j + 1] == '*') {  			inMultiLineComment = true;  			j++;  			continue;  		}  		if (inMultiLineComment && j + 1 < line.Length && line [j] == '*' && line [j + 1] == '/') {  			inMultiLineComment = false;  			j++;  			continue;  		}  		if (inMultiLineComment) {  			continue;  		}  		// One line comment  		if (line [j] == '/' && j + 1 < line.Length && line [j + 1] == '/') {  			if (j + 2 >= line.Length || line [j + 2] != '/') {  				break;  			}  			else {  				// Inline documentation (///)  				code.Append ("///");  				j += 2;  				continue;  			}  		}  		if (line [j] == '@' && j + 1 < line.Length && line [j + 1] == '\"') {  			inString = true;  			inMultilineString = true;  			j++;  			code.Append ("@\"");  			continue;  		}  		if (line [j] == '\"') {  			inString = true;  		}  		if (line [j] == '\'') {  			inString = true;  			inSingleQuotedString = true;  		}  		code.Append (line [j]);  	}  	if (!inMultiLineComment)  		code.AppendLine ();  }  
Magic Number,Problem_1_CSharp_Clean_Code,Program,C:\repos\vtsenev_CSharpPractice\Practical Exam 1\Author\Problem 1 CSharp Clean Code\Program.cs,Main,The following statement contains a magic number: for (int i = 1; i <= linesCount; i++) {  	string line = Console.ReadLine ();  	for (int j = 0; j < line.Length; j++) {  		if (inMultilineString) {  			if (line [j] == '\"' && j + 1 < line.Length && line [j + 1] == '\"') {  				code.Append ("\"\"");  				j++;  				continue;  			}  		}  		if (inString) {  			if (line [j] == '\\' && j + 1 < line.Length && line [j + 1] == '\"') {  				code.Append ("\\\"");  				j++;  				continue;  			}  			if (line [j] == '\\' && j + 1 < line.Length && line [j + 1] == '\'') {  				code.Append ("\\\'");  				j++;  				continue;  			}  			if (line [j] == '\"' && !inSingleQuotedString) {  				inString = false;  				inMultilineString = false;  				code.Append ('\"');  				continue;  			}  			if (line [j] == '\'' && inSingleQuotedString) {  				inString = false;  				inSingleQuotedString = false;  				code.Append ('\'');  				continue;  			}  			code.Append (line [j]);  			continue;  		}  		// Multiline comments  		if (!inMultiLineComment && j + 1 < line.Length && line [j] == '/' && line [j + 1] == '*') {  			inMultiLineComment = true;  			j++;  			continue;  		}  		if (inMultiLineComment && j + 1 < line.Length && line [j] == '*' && line [j + 1] == '/') {  			inMultiLineComment = false;  			j++;  			continue;  		}  		if (inMultiLineComment) {  			continue;  		}  		// One line comment  		if (line [j] == '/' && j + 1 < line.Length && line [j + 1] == '/') {  			if (j + 2 >= line.Length || line [j + 2] != '/') {  				break;  			}  			else {  				// Inline documentation (///)  				code.Append ("///");  				j += 2;  				continue;  			}  		}  		if (line [j] == '@' && j + 1 < line.Length && line [j + 1] == '\"') {  			inString = true;  			inMultilineString = true;  			j++;  			code.Append ("@\"");  			continue;  		}  		if (line [j] == '\"') {  			inString = true;  		}  		if (line [j] == '\'') {  			inString = true;  			inSingleQuotedString = true;  		}  		code.Append (line [j]);  	}  	if (!inMultiLineComment)  		code.AppendLine ();  }  
Magic Number,Problem_1_CSharp_Clean_Code,Program,C:\repos\vtsenev_CSharpPractice\Practical Exam 1\Author\Problem 1 CSharp Clean Code\Program.cs,Main,The following statement contains a magic number: for (int j = 0; j < line.Length; j++) {  	if (inMultilineString) {  		if (line [j] == '\"' && j + 1 < line.Length && line [j + 1] == '\"') {  			code.Append ("\"\"");  			j++;  			continue;  		}  	}  	if (inString) {  		if (line [j] == '\\' && j + 1 < line.Length && line [j + 1] == '\"') {  			code.Append ("\\\"");  			j++;  			continue;  		}  		if (line [j] == '\\' && j + 1 < line.Length && line [j + 1] == '\'') {  			code.Append ("\\\'");  			j++;  			continue;  		}  		if (line [j] == '\"' && !inSingleQuotedString) {  			inString = false;  			inMultilineString = false;  			code.Append ('\"');  			continue;  		}  		if (line [j] == '\'' && inSingleQuotedString) {  			inString = false;  			inSingleQuotedString = false;  			code.Append ('\'');  			continue;  		}  		code.Append (line [j]);  		continue;  	}  	// Multiline comments  	if (!inMultiLineComment && j + 1 < line.Length && line [j] == '/' && line [j + 1] == '*') {  		inMultiLineComment = true;  		j++;  		continue;  	}  	if (inMultiLineComment && j + 1 < line.Length && line [j] == '*' && line [j + 1] == '/') {  		inMultiLineComment = false;  		j++;  		continue;  	}  	if (inMultiLineComment) {  		continue;  	}  	// One line comment  	if (line [j] == '/' && j + 1 < line.Length && line [j + 1] == '/') {  		if (j + 2 >= line.Length || line [j + 2] != '/') {  			break;  		}  		else {  			// Inline documentation (///)  			code.Append ("///");  			j += 2;  			continue;  		}  	}  	if (line [j] == '@' && j + 1 < line.Length && line [j + 1] == '\"') {  		inString = true;  		inMultilineString = true;  		j++;  		code.Append ("@\"");  		continue;  	}  	if (line [j] == '\"') {  		inString = true;  	}  	if (line [j] == '\'') {  		inString = true;  		inSingleQuotedString = true;  	}  	code.Append (line [j]);  }  
Magic Number,Problem_1_CSharp_Clean_Code,Program,C:\repos\vtsenev_CSharpPractice\Practical Exam 1\Author\Problem 1 CSharp Clean Code\Program.cs,Main,The following statement contains a magic number: for (int j = 0; j < line.Length; j++) {  	if (inMultilineString) {  		if (line [j] == '\"' && j + 1 < line.Length && line [j + 1] == '\"') {  			code.Append ("\"\"");  			j++;  			continue;  		}  	}  	if (inString) {  		if (line [j] == '\\' && j + 1 < line.Length && line [j + 1] == '\"') {  			code.Append ("\\\"");  			j++;  			continue;  		}  		if (line [j] == '\\' && j + 1 < line.Length && line [j + 1] == '\'') {  			code.Append ("\\\'");  			j++;  			continue;  		}  		if (line [j] == '\"' && !inSingleQuotedString) {  			inString = false;  			inMultilineString = false;  			code.Append ('\"');  			continue;  		}  		if (line [j] == '\'' && inSingleQuotedString) {  			inString = false;  			inSingleQuotedString = false;  			code.Append ('\'');  			continue;  		}  		code.Append (line [j]);  		continue;  	}  	// Multiline comments  	if (!inMultiLineComment && j + 1 < line.Length && line [j] == '/' && line [j + 1] == '*') {  		inMultiLineComment = true;  		j++;  		continue;  	}  	if (inMultiLineComment && j + 1 < line.Length && line [j] == '*' && line [j + 1] == '/') {  		inMultiLineComment = false;  		j++;  		continue;  	}  	if (inMultiLineComment) {  		continue;  	}  	// One line comment  	if (line [j] == '/' && j + 1 < line.Length && line [j + 1] == '/') {  		if (j + 2 >= line.Length || line [j + 2] != '/') {  			break;  		}  		else {  			// Inline documentation (///)  			code.Append ("///");  			j += 2;  			continue;  		}  	}  	if (line [j] == '@' && j + 1 < line.Length && line [j + 1] == '\"') {  		inString = true;  		inMultilineString = true;  		j++;  		code.Append ("@\"");  		continue;  	}  	if (line [j] == '\"') {  		inString = true;  	}  	if (line [j] == '\'') {  		inString = true;  		inSingleQuotedString = true;  	}  	code.Append (line [j]);  }  
Magic Number,Problem_1_CSharp_Clean_Code,Program,C:\repos\vtsenev_CSharpPractice\Practical Exam 1\Author\Problem 1 CSharp Clean Code\Program.cs,Main,The following statement contains a magic number: for (int j = 0; j < line.Length; j++) {  	if (inMultilineString) {  		if (line [j] == '\"' && j + 1 < line.Length && line [j + 1] == '\"') {  			code.Append ("\"\"");  			j++;  			continue;  		}  	}  	if (inString) {  		if (line [j] == '\\' && j + 1 < line.Length && line [j + 1] == '\"') {  			code.Append ("\\\"");  			j++;  			continue;  		}  		if (line [j] == '\\' && j + 1 < line.Length && line [j + 1] == '\'') {  			code.Append ("\\\'");  			j++;  			continue;  		}  		if (line [j] == '\"' && !inSingleQuotedString) {  			inString = false;  			inMultilineString = false;  			code.Append ('\"');  			continue;  		}  		if (line [j] == '\'' && inSingleQuotedString) {  			inString = false;  			inSingleQuotedString = false;  			code.Append ('\'');  			continue;  		}  		code.Append (line [j]);  		continue;  	}  	// Multiline comments  	if (!inMultiLineComment && j + 1 < line.Length && line [j] == '/' && line [j + 1] == '*') {  		inMultiLineComment = true;  		j++;  		continue;  	}  	if (inMultiLineComment && j + 1 < line.Length && line [j] == '*' && line [j + 1] == '/') {  		inMultiLineComment = false;  		j++;  		continue;  	}  	if (inMultiLineComment) {  		continue;  	}  	// One line comment  	if (line [j] == '/' && j + 1 < line.Length && line [j + 1] == '/') {  		if (j + 2 >= line.Length || line [j + 2] != '/') {  			break;  		}  		else {  			// Inline documentation (///)  			code.Append ("///");  			j += 2;  			continue;  		}  	}  	if (line [j] == '@' && j + 1 < line.Length && line [j + 1] == '\"') {  		inString = true;  		inMultilineString = true;  		j++;  		code.Append ("@\"");  		continue;  	}  	if (line [j] == '\"') {  		inString = true;  	}  	if (line [j] == '\'') {  		inString = true;  		inSingleQuotedString = true;  	}  	code.Append (line [j]);  }  
Magic Number,Problem_1_CSharp_Clean_Code,Program,C:\repos\vtsenev_CSharpPractice\Practical Exam 1\Author\Problem 1 CSharp Clean Code\Program.cs,Main,The following statement contains a magic number: if (line [j] == '/' && j + 1 < line.Length && line [j + 1] == '/') {  	if (j + 2 >= line.Length || line [j + 2] != '/') {  		break;  	}  	else {  		// Inline documentation (///)  		code.Append ("///");  		j += 2;  		continue;  	}  }  
Magic Number,Problem_1_CSharp_Clean_Code,Program,C:\repos\vtsenev_CSharpPractice\Practical Exam 1\Author\Problem 1 CSharp Clean Code\Program.cs,Main,The following statement contains a magic number: if (line [j] == '/' && j + 1 < line.Length && line [j + 1] == '/') {  	if (j + 2 >= line.Length || line [j + 2] != '/') {  		break;  	}  	else {  		// Inline documentation (///)  		code.Append ("///");  		j += 2;  		continue;  	}  }  
Magic Number,Problem_1_CSharp_Clean_Code,Program,C:\repos\vtsenev_CSharpPractice\Practical Exam 1\Author\Problem 1 CSharp Clean Code\Program.cs,Main,The following statement contains a magic number: if (line [j] == '/' && j + 1 < line.Length && line [j + 1] == '/') {  	if (j + 2 >= line.Length || line [j + 2] != '/') {  		break;  	}  	else {  		// Inline documentation (///)  		code.Append ("///");  		j += 2;  		continue;  	}  }  
Magic Number,Problem_1_CSharp_Clean_Code,Program,C:\repos\vtsenev_CSharpPractice\Practical Exam 1\Author\Problem 1 CSharp Clean Code\Program.cs,Main,The following statement contains a magic number: if (j + 2 >= line.Length || line [j + 2] != '/') {  	break;  }  else {  	// Inline documentation (///)  	code.Append ("///");  	j += 2;  	continue;  }  
Magic Number,Problem_1_CSharp_Clean_Code,Program,C:\repos\vtsenev_CSharpPractice\Practical Exam 1\Author\Problem 1 CSharp Clean Code\Program.cs,Main,The following statement contains a magic number: if (j + 2 >= line.Length || line [j + 2] != '/') {  	break;  }  else {  	// Inline documentation (///)  	code.Append ("///");  	j += 2;  	continue;  }  
Magic Number,Problem_1_CSharp_Clean_Code,Program,C:\repos\vtsenev_CSharpPractice\Practical Exam 1\Author\Problem 1 CSharp Clean Code\Program.cs,Main,The following statement contains a magic number: if (j + 2 >= line.Length || line [j + 2] != '/') {  	break;  }  else {  	// Inline documentation (///)  	code.Append ("///");  	j += 2;  	continue;  }  
Magic Number,Problem_1_CSharp_Clean_Code,Program,C:\repos\vtsenev_CSharpPractice\Practical Exam 1\Author\Problem 1 CSharp Clean Code\Program.cs,Main,The following statement contains a magic number: j += 2;  
