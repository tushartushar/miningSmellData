Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Problem_2_Sudoku,SudokuSolver,C:\repos\vtsenev_CSharpPractice\Practical Exam 1\Author\Problem 2 Sudoku\Program.cs,GetPossibleDigits,Cyclomatic complexity of the method is 8
Complex Method,Problem_2_Sudoku,SudokuSolver,C:\repos\vtsenev_CSharpPractice\Practical Exam 1\Author\Problem 2 Sudoku\Program.cs,SolveWithRecursion,Cyclomatic complexity of the method is 8
Magic Number,Problem_2_Sudoku,SudokuSolver,C:\repos\vtsenev_CSharpPractice\Practical Exam 1\Author\Problem 2 Sudoku\Program.cs,SudokuSolver,The following statement contains a magic number: if (board == null || board.Rank != 2) {  	throw new ArgumentException ("Invalid board");  }  
Magic Number,Problem_2_Sudoku,SudokuSolver,C:\repos\vtsenev_CSharpPractice\Practical Exam 1\Author\Problem 2 Sudoku\Program.cs,GetPossibleDigits,The following statement contains a magic number: if (board [i' j] != EmptyCell)  	return new bool[9] {  		false'  		false'  		false'  		false'  		false'  		false'  		false'  		false'  		false  	};  
Magic Number,Problem_2_Sudoku,SudokuSolver,C:\repos\vtsenev_CSharpPractice\Practical Exam 1\Author\Problem 2 Sudoku\Program.cs,GetPossibleDigits,The following statement contains a magic number: return new bool[9] {  	false'  	false'  	false'  	false'  	false'  	false'  	false'  	false'  	false  };  
Magic Number,Problem_2_Sudoku,SudokuSolver,C:\repos\vtsenev_CSharpPractice\Practical Exam 1\Author\Problem 2 Sudoku\Program.cs,GetPossibleDigits,The following statement contains a magic number: for (byte x = topLeftRow; x < topLeftRow + 3; x++) {  	for (byte y = topLeftCol; y < topLeftCol + 3; y++) {  		if (board [x' y] != EmptyCell) {  			isPossibleNumber [board [x' y] - 1] = false;  		}  	}  }  
Magic Number,Problem_2_Sudoku,SudokuSolver,C:\repos\vtsenev_CSharpPractice\Practical Exam 1\Author\Problem 2 Sudoku\Program.cs,GetPossibleDigits,The following statement contains a magic number: for (byte x = topLeftRow; x < topLeftRow + 3; x++) {  	for (byte y = topLeftCol; y < topLeftCol + 3; y++) {  		if (board [x' y] != EmptyCell) {  			isPossibleNumber [board [x' y] - 1] = false;  		}  	}  }  
Magic Number,Problem_2_Sudoku,SudokuSolver,C:\repos\vtsenev_CSharpPractice\Practical Exam 1\Author\Problem 2 Sudoku\Program.cs,GetPossibleDigits,The following statement contains a magic number: for (byte y = topLeftCol; y < topLeftCol + 3; y++) {  	if (board [x' y] != EmptyCell) {  		isPossibleNumber [board [x' y] - 1] = false;  	}  }  
Magic Number,Problem_2_Sudoku,SudokuSolver,C:\repos\vtsenev_CSharpPractice\Practical Exam 1\Author\Problem 2 Sudoku\Program.cs,OptimizeBeforeTheRecursion,The following statement contains a magic number: for (byte i = 0; i < board.GetLength (0); i++) {  	for (byte j = 0; j < board.GetLength (1); j++) {  		bool[] possibleDigits = GetPossibleDigits (i' j);  		if (possibleDigits.Count (x => x) == 1) {  			for (byte k = 0; k < 9; k++) {  				if (possibleDigits [k]) {  					board [i' j] = (byte)(k + 1);  					optimized = true;  				}  			}  		}  	}  }  
Magic Number,Problem_2_Sudoku,SudokuSolver,C:\repos\vtsenev_CSharpPractice\Practical Exam 1\Author\Problem 2 Sudoku\Program.cs,OptimizeBeforeTheRecursion,The following statement contains a magic number: for (byte j = 0; j < board.GetLength (1); j++) {  	bool[] possibleDigits = GetPossibleDigits (i' j);  	if (possibleDigits.Count (x => x) == 1) {  		for (byte k = 0; k < 9; k++) {  			if (possibleDigits [k]) {  				board [i' j] = (byte)(k + 1);  				optimized = true;  			}  		}  	}  }  
Magic Number,Problem_2_Sudoku,SudokuSolver,C:\repos\vtsenev_CSharpPractice\Practical Exam 1\Author\Problem 2 Sudoku\Program.cs,OptimizeBeforeTheRecursion,The following statement contains a magic number: if (possibleDigits.Count (x => x) == 1) {  	for (byte k = 0; k < 9; k++) {  		if (possibleDigits [k]) {  			board [i' j] = (byte)(k + 1);  			optimized = true;  		}  	}  }  
Magic Number,Problem_2_Sudoku,SudokuSolver,C:\repos\vtsenev_CSharpPractice\Practical Exam 1\Author\Problem 2 Sudoku\Program.cs,OptimizeBeforeTheRecursion,The following statement contains a magic number: for (byte k = 0; k < 9; k++) {  	if (possibleDigits [k]) {  		board [i' j] = (byte)(k + 1);  		optimized = true;  	}  }  
Magic Number,Problem_2_Sudoku,SudokuSolver,C:\repos\vtsenev_CSharpPractice\Practical Exam 1\Author\Problem 2 Sudoku\Program.cs,SolveWithRecursion,The following statement contains a magic number: for (int k = 0; k < 9; k++) {  	if (!possibleDigits [k])  		continue;  	board [i' j] = (byte)(k + 1);  	// Find the first empty cell:  	byte topLeftEmptyX = 0;  	byte topLeftEmptyY = 0;  	bool foundEmpty = false;  	for (byte x = i; x < board.GetLength (0); x++) {  		for (byte y = 0; y < board.GetLength (1); y++) {  			if (board [x' y] == EmptyCell) {  				topLeftEmptyX = x;  				topLeftEmptyY = y;  				foundEmpty = true;  				break;  			}  		}  		if (foundEmpty)  			break;  	}  	SolveWithRecursion (topLeftEmptyX' topLeftEmptyY' (byte)(empty - 1));  	if (solutionFound)  		return;  }  
