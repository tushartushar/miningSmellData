Implementation smell,Namespace,Class,File,Method,Description
Complex Method,VkLib.Core.Attachments,VkPhotoAttachment,C:\repos\Stealth2012_meridian\VkLibPortable\Trunk\Core\Attachments\VkPhotoAttachment.cs,ParseV5,Cyclomatic complexity of the method is 12
Complex Method,VkLib.Core.Audio,VkAudioRequest,C:\repos\Stealth2012_meridian\VkLibPortable\Trunk\Core\Audio\VkAudioRequest.cs,Search,Cyclomatic complexity of the method is 12
Complex Method,VkLib.Core.Audio,VkAudioRequest,C:\repos\Stealth2012_meridian\VkLibPortable\Trunk\Core\Audio\VkAudioRequest.cs,GetRecommendations,Cyclomatic complexity of the method is 9
Complex Method,VkLib.Core.Audio,VkAudioRequest,C:\repos\Stealth2012_meridian\VkLibPortable\Trunk\Core\Audio\VkAudioRequest.cs,GetPopular,Cyclomatic complexity of the method is 8
Complex Method,VkLib.Core.Auth,OAuthResult,C:\repos\Stealth2012_meridian\VkLibPortable\Trunk\Core\Auth\OAuthResult.cs,Parse,Cyclomatic complexity of the method is 9
Complex Method,VkLib.Core.Favorites,VkFavoritesRequest,C:\repos\Stealth2012_meridian\VkLibPortable\Trunk\Core\Favorites\VkFavoritesRequest.cs,GetPosts,Cyclomatic complexity of the method is 10
Complex Method,VkLib.Core.Friends,VkFriendsRequest,C:\repos\Stealth2012_meridian\VkLibPortable\Trunk\Core\Friends\VkFriendsRequest.cs,Get,Cyclomatic complexity of the method is 9
Complex Method,VkLib.Core.Groups,VkGroup,C:\repos\Stealth2012_meridian\VkLibPortable\Trunk\Core\Groups\VkGroup.cs,FromJson,Cyclomatic complexity of the method is 13
Complex Method,VkLib.Core.Groups,VkGroupsRequest,C:\repos\Stealth2012_meridian\VkLibPortable\Trunk\Core\Groups\VkGroupsRequest.cs,Get,Cyclomatic complexity of the method is 9
Complex Method,VkLib.Core.Messages,VkMessage,C:\repos\Stealth2012_meridian\VkLibPortable\Trunk\Core\Messages\VkMessage.cs,FromJson,Cyclomatic complexity of the method is 11
Complex Method,VkLib.Core.News,VkNewsEntry,C:\repos\Stealth2012_meridian\VkLibPortable\Trunk\Core\News\VkNewsEntry.cs,FromJson,Cyclomatic complexity of the method is 14
Complex Method,VkLib.Core.News,VkNewsRequest,C:\repos\Stealth2012_meridian\VkLibPortable\Trunk\Core\News\VkNewsRequest.cs,Get,Cyclomatic complexity of the method is 12
Complex Method,VkLib.Core.Users,VkProfile,C:\repos\Stealth2012_meridian\VkLibPortable\Trunk\Core\Users\VkProfile.cs,ParseV5,Cyclomatic complexity of the method is 13
Complex Method,VkLib.Core.Video,VkVideo,C:\repos\Stealth2012_meridian\VkLibPortable\Trunk\Core\Video\VkVideo.cs,FromJson,Cyclomatic complexity of the method is 10
Complex Method,VkLib.Core.Video,VkVideoRequest,C:\repos\Stealth2012_meridian\VkLibPortable\Trunk\Core\Video\VkVideoRequest.cs,Get,Cyclomatic complexity of the method is 12
Complex Method,VkLib.Core.Video,VkVideoRequest,C:\repos\Stealth2012_meridian\VkLibPortable\Trunk\Core\Video\VkVideoRequest.cs,Search,Cyclomatic complexity of the method is 10
Complex Method,VkLib.Core,VkErrorProcessor,C:\repos\Stealth2012_meridian\VkLibPortable\Trunk\Core\VkErrorProcessor.cs,ProcessError,Cyclomatic complexity of the method is 10
Complex Method,VkLib.Core.Wall,VkWallEntry,C:\repos\Stealth2012_meridian\VkLibPortable\Trunk\Core\Wall\VkWallEntry.cs,FromJson,Cyclomatic complexity of the method is 11
Complex Method,VkLib.Core.Wall,VkWallRequest,C:\repos\Stealth2012_meridian\VkLibPortable\Trunk\Core\Wall\VkWallRequest.cs,Post,Cyclomatic complexity of the method is 8
Complex Method,VkLib.Core.Wall,VkWallRequest,C:\repos\Stealth2012_meridian\VkLibPortable\Trunk\Core\Wall\VkWallRequest.cs,Get,Cyclomatic complexity of the method is 11
Long Parameter List,VkLib.Core.Account,VkAccountRequest,C:\repos\Stealth2012_meridian\VkLibPortable\Trunk\Core\Account\VkAccountRequest.cs,RegisterDevice,The method has 5 parameters. Parameters: token' deviceModel' systemVersion' noText' subscribe
Long Parameter List,VkLib.Core.Audio,VkAudioRequest,C:\repos\Stealth2012_meridian\VkLibPortable\Trunk\Core\Audio\VkAudioRequest.cs,Search,The method has 8 parameters. Parameters: query' count' offset' sort' withLyricsOnly' autoFix' artistOnly' ownOnly
Long Parameter List,VkLib.Core.Audio,VkAudioRequest,C:\repos\Stealth2012_meridian\VkLibPortable\Trunk\Core\Audio\VkAudioRequest.cs,Add,The method has 5 parameters. Parameters: audioId' ownerId' groupId' captchaSid' captchaKey
Long Parameter List,VkLib.Core.Audio,VkAudioRequest,C:\repos\Stealth2012_meridian\VkLibPortable\Trunk\Core\Audio\VkAudioRequest.cs,GetRecommendations,The method has 5 parameters. Parameters: targetAudio' count' offset' userId' shuffle
Long Parameter List,VkLib.Core.Audio,VkAudioRequest,C:\repos\Stealth2012_meridian\VkLibPortable\Trunk\Core\Audio\VkAudioRequest.cs,Edit,The method has 7 parameters. Parameters: ownerId' audioId' artist' title' text' genreId' noSearch
Long Parameter List,VkLib.Core.Auth,VkDirectAuthRequest,C:\repos\Stealth2012_meridian\VkLibPortable\Trunk\Core\Auth\VkDirectAuthRequest.cs,Login,The method has 5 parameters. Parameters: login' password' scopeSettings' captchaSid' captchaKey
Long Parameter List,VkLib.Core.Friends,VkFriendsRequest,C:\repos\Stealth2012_meridian\VkLibPortable\Trunk\Core\Friends\VkFriendsRequest.cs,Get,The method has 6 parameters. Parameters: userId' fields' nameCase' count' offset' order
Long Parameter List,VkLib.Core.Groups,VkGroupsRequest,C:\repos\Stealth2012_meridian\VkLibPortable\Trunk\Core\Groups\VkGroupsRequest.cs,Get,The method has 6 parameters. Parameters: userId' fields' filter' count' offset' extended
Long Parameter List,VkLib.Core.Messages,VkMessagesRequest,C:\repos\Stealth2012_meridian\VkLibPortable\Trunk\Core\Messages\VkMessagesRequest.cs,GetHistory,The method has 5 parameters. Parameters: userId' chatId' offset' count' rev
Long Parameter List,VkLib.Core.Photos,VkPhotosRequest,C:\repos\Stealth2012_meridian\VkLibPortable\Trunk\Core\Photos\VkPhotosRequest.cs,SaveWallPhoto,The method has 5 parameters. Parameters: server' photo' hash' userId' groupId
Long Parameter List,VkLib.Core.Video,VkVideoRequest,C:\repos\Stealth2012_meridian\VkLibPortable\Trunk\Core\Video\VkVideoRequest.cs,Get,The method has 7 parameters. Parameters: videos' uid' gid' aid' previewWidth' count' offset
Long Parameter List,VkLib.Core.Video,VkVideoRequest,C:\repos\Stealth2012_meridian\VkLibPortable\Trunk\Core\Video\VkVideoRequest.cs,Search,The method has 6 parameters. Parameters: query' count' offset' hdOnly' sort' adult
Long Parameter List,VkLib.Core.Wall,VkWallRequest,C:\repos\Stealth2012_meridian\VkLibPortable\Trunk\Core\Wall\VkWallRequest.cs,Post,The method has 5 parameters. Parameters: ownerId' message' attachments' fromGroup' signed
Long Statement,VkLib.Core.Account,VkAccountRequest,C:\repos\Stealth2012_meridian\VkLibPortable\Trunk\Core\Account\VkAccountRequest.cs,RegisterDevice,The length of the statement  "            if (_vkontakte.AccessToken == null || string.IsNullOrEmpty(_vkontakte.AccessToken.Token) || _vkontakte.AccessToken.HasExpired) " is 126.
Long Statement,VkLib.Core.Audio,VkAudioRequest,C:\repos\Stealth2012_meridian\VkLibPortable\Trunk\Core\Audio\VkAudioRequest.cs,Get,The length of the statement  "            if (_vkontakte.AccessToken == null || string.IsNullOrEmpty(_vkontakte.AccessToken.Token) || _vkontakte.AccessToken.HasExpired) " is 126.
Long Statement,VkLib.Core.Audio,VkAudioRequest,C:\repos\Stealth2012_meridian\VkLibPortable\Trunk\Core\Audio\VkAudioRequest.cs,Get,The length of the statement  "                return new VkItemsResponse<VkAudio>(response["response"]["items"].Select(VkAudio.FromJson).ToList()' (int)response["response"]["count"]); " is 137.
Long Statement,VkLib.Core.Audio,VkAudioRequest,C:\repos\Stealth2012_meridian\VkLibPortable\Trunk\Core\Audio\VkAudioRequest.cs,GetAlbums,The length of the statement  "            if (_vkontakte.AccessToken == null || string.IsNullOrEmpty(_vkontakte.AccessToken.Token) || _vkontakte.AccessToken.HasExpired) " is 126.
Long Statement,VkLib.Core.Audio,VkAudioRequest,C:\repos\Stealth2012_meridian\VkLibPortable\Trunk\Core\Audio\VkAudioRequest.cs,GetAlbums,The length of the statement  "                return new VkItemsResponse<VkAudioAlbum>(response["response"]["items"].Select(VkAudioAlbum.FromJson).ToList()' (int)response["response"]["count"]); " is 147.
Long Statement,VkLib.Core.Audio,VkAudioRequest,C:\repos\Stealth2012_meridian\VkLibPortable\Trunk\Core\Audio\VkAudioRequest.cs,Search,The length of the statement  "            if (_vkontakte.AccessToken == null || string.IsNullOrEmpty(_vkontakte.AccessToken.Token) || _vkontakte.AccessToken.HasExpired) " is 126.
Long Statement,VkLib.Core.Audio,VkAudioRequest,C:\repos\Stealth2012_meridian\VkLibPortable\Trunk\Core\Audio\VkAudioRequest.cs,Search,The length of the statement  "                return new VkItemsResponse<VkAudio>((from a in response["response"]["items"] where a.HasValues && !string.IsNullOrEmpty(a["url"].Value<string>()) select VkAudio.FromJson(a)).ToList()' " is 183.
Long Statement,VkLib.Core.Audio,VkAudioRequest,C:\repos\Stealth2012_meridian\VkLibPortable\Trunk\Core\Audio\VkAudioRequest.cs,Add,The length of the statement  "            if (_vkontakte.AccessToken == null || string.IsNullOrEmpty(_vkontakte.AccessToken.Token) || _vkontakte.AccessToken.HasExpired) " is 126.
Long Statement,VkLib.Core.Audio,VkAudioRequest,C:\repos\Stealth2012_meridian\VkLibPortable\Trunk\Core\Audio\VkAudioRequest.cs,Delete,The length of the statement  "            if (_vkontakte.AccessToken == null || string.IsNullOrEmpty(_vkontakte.AccessToken.Token) || _vkontakte.AccessToken.HasExpired) " is 126.
Long Statement,VkLib.Core.Audio,VkAudioRequest,C:\repos\Stealth2012_meridian\VkLibPortable\Trunk\Core\Audio\VkAudioRequest.cs,MoveToAlbum,The length of the statement  "            if (_vkontakte.AccessToken == null || string.IsNullOrEmpty(_vkontakte.AccessToken.Token) || _vkontakte.AccessToken.HasExpired) " is 126.
Long Statement,VkLib.Core.Audio,VkAudioRequest,C:\repos\Stealth2012_meridian\VkLibPortable\Trunk\Core\Audio\VkAudioRequest.cs,GetById,The length of the statement  "            if (_vkontakte.AccessToken == null || string.IsNullOrEmpty(_vkontakte.AccessToken.Token) || _vkontakte.AccessToken.HasExpired) " is 126.
Long Statement,VkLib.Core.Audio,VkAudioRequest,C:\repos\Stealth2012_meridian\VkLibPortable\Trunk\Core\Audio\VkAudioRequest.cs,GetLyrics,The length of the statement  "            if (_vkontakte.AccessToken == null || string.IsNullOrEmpty(_vkontakte.AccessToken.Token) || _vkontakte.AccessToken.HasExpired) " is 126.
Long Statement,VkLib.Core.Audio,VkAudioRequest,C:\repos\Stealth2012_meridian\VkLibPortable\Trunk\Core\Audio\VkAudioRequest.cs,GetRecommendations,The length of the statement  "            if (_vkontakte.AccessToken == null || string.IsNullOrEmpty(_vkontakte.AccessToken.Token) || _vkontakte.AccessToken.HasExpired) " is 126.
Long Statement,VkLib.Core.Audio,VkAudioRequest,C:\repos\Stealth2012_meridian\VkLibPortable\Trunk\Core\Audio\VkAudioRequest.cs,GetPopular,The length of the statement  "            if (_vkontakte.AccessToken == null || string.IsNullOrEmpty(_vkontakte.AccessToken.Token) || _vkontakte.AccessToken.HasExpired) " is 126.
Long Statement,VkLib.Core.Audio,VkAudioRequest,C:\repos\Stealth2012_meridian\VkLibPortable\Trunk\Core\Audio\VkAudioRequest.cs,Edit,The length of the statement  "            if (_vkontakte.AccessToken == null || string.IsNullOrEmpty(_vkontakte.AccessToken.Token) || _vkontakte.AccessToken.HasExpired) " is 126.
Long Statement,VkLib.Core.Audio,VkAudioRequest,C:\repos\Stealth2012_meridian\VkLibPortable\Trunk\Core\Audio\VkAudioRequest.cs,Edit,The length of the statement  "            var response = await new VkRequest(new Uri(VkConst.MethodBase + method)' parameters' string.IsNullOrEmpty(text) ? "GET" : "POST").Execute(); " is 140.
Long Statement,VkLib.Core.Audio,VkAudioRequest,C:\repos\Stealth2012_meridian\VkLibPortable\Trunk\Core\Audio\VkAudioRequest.cs,AddAlbum,The length of the statement  "            if (_vkontakte.AccessToken == null || string.IsNullOrEmpty(_vkontakte.AccessToken.Token) || _vkontakte.AccessToken.HasExpired) " is 126.
Long Statement,VkLib.Core.Audio,VkAudioRequest,C:\repos\Stealth2012_meridian\VkLibPortable\Trunk\Core\Audio\VkAudioRequest.cs,DeleteAlbum,The length of the statement  "            if (_vkontakte.AccessToken == null || string.IsNullOrEmpty(_vkontakte.AccessToken.Token) || _vkontakte.AccessToken.HasExpired) " is 126.
Long Statement,VkLib.Core.Audio,VkAudioRequest,C:\repos\Stealth2012_meridian\VkLibPortable\Trunk\Core\Audio\VkAudioRequest.cs,EditAlbum,The length of the statement  "            if (_vkontakte.AccessToken == null || string.IsNullOrEmpty(_vkontakte.AccessToken.Token) || _vkontakte.AccessToken.HasExpired) " is 126.
Long Statement,VkLib.Core.Audio,VkAudioRequest,C:\repos\Stealth2012_meridian\VkLibPortable\Trunk\Core\Audio\VkAudioRequest.cs,Reorder,The length of the statement  "            if (_vkontakte.AccessToken == null || string.IsNullOrEmpty(_vkontakte.AccessToken.Token) || _vkontakte.AccessToken.HasExpired) " is 126.
Long Statement,VkLib.Core.Audio,VkAudioRequest,C:\repos\Stealth2012_meridian\VkLibPortable\Trunk\Core\Audio\VkAudioRequest.cs,SetBroadcast,The length of the statement  "            if (_vkontakte.AccessToken == null || string.IsNullOrEmpty(_vkontakte.AccessToken.Token) || _vkontakte.AccessToken.HasExpired) " is 126.
Long Statement,VkLib.Core.Auth,OAuthResult,C:\repos\Stealth2012_meridian\VkLibPortable\Trunk\Core\Auth\OAuthResult.cs,ParseFragment,The length of the statement  "            string[] temp = fragment.Split(new[] { '&' }' StringSplitOptions.RemoveEmptyEntries); //get set of strings like "name=value" " is 124.
Long Statement,VkLib.Core.Auth,VkDirectAuthRequest,C:\repos\Stealth2012_meridian\VkLibPortable\Trunk\Core\Auth\VkDirectAuthRequest.cs,Login,The length of the statement  "            token.ExpiresIn = response["expires_in"].Value<long>() == 0 ? DateTime.MaxValue : DateTimeExtensions.UnixTimeStampToDateTime(response["expires_in"].Value<long>()); " is 163.
Long Statement,VkLib.Core.Execute,VkExecuteRequest,C:\repos\Stealth2012_meridian\VkLibPortable\Trunk\Core\Execute\VkExecuteRequest.cs,GetBaseData,The length of the statement  "            if (_vkontakte.AccessToken == null || string.IsNullOrEmpty(_vkontakte.AccessToken.Token) || _vkontakte.AccessToken.HasExpired) " is 126.
Long Statement,VkLib.Core.Favorites,VkFavoritesRequest,C:\repos\Stealth2012_meridian\VkLibPortable\Trunk\Core\Favorites\VkFavoritesRequest.cs,GetPosts,The length of the statement  "            if (_vkontakte.AccessToken == null || string.IsNullOrEmpty(_vkontakte.AccessToken.Token) || _vkontakte.AccessToken.HasExpired) " is 126.
Long Statement,VkLib.Core.Favorites,VkFavoritesRequest,C:\repos\Stealth2012_meridian\VkLibPortable\Trunk\Core\Favorites\VkFavoritesRequest.cs,GetPosts,The length of the statement  "                var result = new VkItemsResponse<VkWallEntry>((from n in response["response"]["items"] select VkWallEntry.FromJson(n)).ToList()); " is 129.
Long Statement,VkLib.Core.Friends,VkFriendsRequest,C:\repos\Stealth2012_meridian\VkLibPortable\Trunk\Core\Friends\VkFriendsRequest.cs,Get,The length of the statement  "            if (_vkontakte.AccessToken == null || string.IsNullOrEmpty(_vkontakte.AccessToken.Token) || _vkontakte.AccessToken.HasExpired) " is 126.
Long Statement,VkLib.Core.Friends,VkFriendsRequest,C:\repos\Stealth2012_meridian\VkLibPortable\Trunk\Core\Friends\VkFriendsRequest.cs,Get,The length of the statement  "                return new VkItemsResponse<VkProfile>(response["response"]["items"].Select(VkProfile.FromJson).ToList()' (int)response["response"]["count"]); " is 141.
Long Statement,VkLib.Core.Groups,VkGroupsRequest,C:\repos\Stealth2012_meridian\VkLibPortable\Trunk\Core\Groups\VkGroupsRequest.cs,Get,The length of the statement  "            if (_vkontakte.AccessToken == null || string.IsNullOrEmpty(_vkontakte.AccessToken.Token) || _vkontakte.AccessToken.HasExpired) " is 126.
Long Statement,VkLib.Core.Groups,VkGroupsRequest,C:\repos\Stealth2012_meridian\VkLibPortable\Trunk\Core\Groups\VkGroupsRequest.cs,Get,The length of the statement  "                return new VkItemsResponse<VkGroup>(response["response"]["items"].Select(VkGroup.FromJson).ToList()' (int)response["response"]["count"]); " is 137.
Long Statement,VkLib.Core.Groups,VkGroupsRequest,C:\repos\Stealth2012_meridian\VkLibPortable\Trunk\Core\Groups\VkGroupsRequest.cs,Search,The length of the statement  "            if (_vkontakte.AccessToken == null || string.IsNullOrEmpty(_vkontakte.AccessToken.Token) || _vkontakte.AccessToken.HasExpired) " is 126.
Long Statement,VkLib.Core.Groups,VkGroupsRequest,C:\repos\Stealth2012_meridian\VkLibPortable\Trunk\Core\Groups\VkGroupsRequest.cs,Search,The length of the statement  "                return new VkItemsResponse<VkGroup>((from g in response["response"]["items"] where g.HasValues select VkGroup.FromJson(g)).ToList()' response["response"]["count"].Value<int>()); " is 177.
Long Statement,VkLib.Core.Messages,VkLongPollService,C:\repos\Stealth2012_meridian\VkLibPortable\Trunk\Core\Messages\VkLongPollService.cs,Start,The length of the statement  "            if (_vkontakte.AccessToken == null || string.IsNullOrEmpty(_vkontakte.AccessToken.Token) || _vkontakte.AccessToken.HasExpired) " is 126.
Long Statement,VkLib.Core.Messages,VkMessagesRequest,C:\repos\Stealth2012_meridian\VkLibPortable\Trunk\Core\Messages\VkMessagesRequest.cs,Send,The length of the statement  "            if (_vkontakte.AccessToken == null || string.IsNullOrEmpty(_vkontakte.AccessToken.Token) || _vkontakte.AccessToken.HasExpired) " is 126.
Long Statement,VkLib.Core.Messages,VkMessagesRequest,C:\repos\Stealth2012_meridian\VkLibPortable\Trunk\Core\Messages\VkMessagesRequest.cs,GetDialogs,The length of the statement  "            if (_vkontakte.AccessToken == null || string.IsNullOrEmpty(_vkontakte.AccessToken.Token) || _vkontakte.AccessToken.HasExpired) " is 126.
Long Statement,VkLib.Core.Messages,VkMessagesRequest,C:\repos\Stealth2012_meridian\VkLibPortable\Trunk\Core\Messages\VkMessagesRequest.cs,GetDialogs,The length of the statement  "                return new VkItemsResponse<VkMessage>(response["response"]["items"].Select(i => VkMessage.FromJson(i' _vkontakte.ApiVersion)).ToList()' (int)response["response"]["count"]); " is 172.
Long Statement,VkLib.Core.Messages,VkMessagesRequest,C:\repos\Stealth2012_meridian\VkLibPortable\Trunk\Core\Messages\VkMessagesRequest.cs,GetHistory,The length of the statement  "            if (_vkontakte.AccessToken == null || string.IsNullOrEmpty(_vkontakte.AccessToken.Token) || _vkontakte.AccessToken.HasExpired) " is 126.
Long Statement,VkLib.Core.Messages,VkMessagesRequest,C:\repos\Stealth2012_meridian\VkLibPortable\Trunk\Core\Messages\VkMessagesRequest.cs,GetHistory,The length of the statement  "                return new VkItemsResponse<VkMessage>(response["response"]["items"].Select(i => VkMessage.FromJson(i' _vkontakte.ApiVersion)).ToList()' (int)response["response"]["count"]); " is 172.
Long Statement,VkLib.Core.Messages,VkMessagesRequest,C:\repos\Stealth2012_meridian\VkLibPortable\Trunk\Core\Messages\VkMessagesRequest.cs,GetChatUsers,The length of the statement  "            if (_vkontakte.AccessToken == null || string.IsNullOrEmpty(_vkontakte.AccessToken.Token) || _vkontakte.AccessToken.HasExpired) " is 126.
Long Statement,VkLib.Core.Messages,VkMessagesRequest,C:\repos\Stealth2012_meridian\VkLibPortable\Trunk\Core\Messages\VkMessagesRequest.cs,GetById,The length of the statement  "            if (_vkontakte.AccessToken == null || string.IsNullOrEmpty(_vkontakte.AccessToken.Token) || _vkontakte.AccessToken.HasExpired) " is 126.
Long Statement,VkLib.Core.Messages,VkMessagesRequest,C:\repos\Stealth2012_meridian\VkLibPortable\Trunk\Core\Messages\VkMessagesRequest.cs,GetById,The length of the statement  "                return new VkItemsResponse<VkMessage>(response["response"]["items"].Select(i => VkMessage.FromJson(i' _vkontakte.ApiVersion)).ToList()' (int)response["response"]["count"]); " is 172.
Long Statement,VkLib.Core.News,VkNewsRequest,C:\repos\Stealth2012_meridian\VkLibPortable\Trunk\Core\News\VkNewsRequest.cs,Get,The length of the statement  "            if (_vkontakte.AccessToken == null || string.IsNullOrEmpty(_vkontakte.AccessToken.Token) || _vkontakte.AccessToken.HasExpired) " is 126.
Long Statement,VkLib.Core.Photos,VkPhotosRequest,C:\repos\Stealth2012_meridian\VkLibPortable\Trunk\Core\Photos\VkPhotosRequest.cs,GetWallUploadServer,The length of the statement  "            if (_vkontakte.AccessToken == null || string.IsNullOrEmpty(_vkontakte.AccessToken.Token) || _vkontakte.AccessToken.HasExpired) " is 126.
Long Statement,VkLib.Core.Photos,VkPhotosRequest,C:\repos\Stealth2012_meridian\VkLibPortable\Trunk\Core\Photos\VkPhotosRequest.cs,SaveWallPhoto,The length of the statement  "            if (_vkontakte.AccessToken == null || string.IsNullOrEmpty(_vkontakte.AccessToken.Token) || _vkontakte.AccessToken.HasExpired) " is 126.
Long Statement,VkLib.Core.Stats,VkStatsRequest,C:\repos\Stealth2012_meridian\VkLibPortable\Trunk\Core\Stats\VkStatsRequest.cs,TrackVisitor,The length of the statement  "            if (_vkontakte.AccessToken == null || string.IsNullOrEmpty(_vkontakte.AccessToken.Token) || _vkontakte.AccessToken.HasExpired) " is 126.
Long Statement,VkLib.Core.Status,VkStatusRequest,C:\repos\Stealth2012_meridian\VkLibPortable\Trunk\Core\Status\VkStatusRequest.cs,SetBroadcast,The length of the statement  "            if (_vkontakte.AccessToken == null || string.IsNullOrEmpty(_vkontakte.AccessToken.Token) || _vkontakte.AccessToken.HasExpired) " is 126.
Long Statement,VkLib.Core.Status,VkStatusRequest,C:\repos\Stealth2012_meridian\VkLibPortable\Trunk\Core\Status\VkStatusRequest.cs,GetBroadcast,The length of the statement  "            if (_vkontakte.AccessToken == null || string.IsNullOrEmpty(_vkontakte.AccessToken.Token) || _vkontakte.AccessToken.HasExpired) " is 126.
Long Statement,VkLib.Core.Status,VkStatusRequest,C:\repos\Stealth2012_meridian\VkLibPortable\Trunk\Core\Status\VkStatusRequest.cs,Set,The length of the statement  "            if (_vkontakte.AccessToken == null || string.IsNullOrEmpty(_vkontakte.AccessToken.Token) || _vkontakte.AccessToken.HasExpired) " is 126.
Long Statement,VkLib.Core.Status,VkStatusRequest,C:\repos\Stealth2012_meridian\VkLibPortable\Trunk\Core\Status\VkStatusRequest.cs,Get,The length of the statement  "            if (_vkontakte.AccessToken == null || string.IsNullOrEmpty(_vkontakte.AccessToken.Token) || _vkontakte.AccessToken.HasExpired) " is 126.
Long Statement,VkLib.Core.Subscriptions,VkSubscriptionsRequest,C:\repos\Stealth2012_meridian\VkLibPortable\Trunk\Core\Subscriptions\VkSubscriptionsRequest.cs,Get,The length of the statement  "            if (_vkontakte.AccessToken == null || string.IsNullOrEmpty(_vkontakte.AccessToken.Token) || _vkontakte.AccessToken.HasExpired) " is 126.
Long Statement,VkLib.Core.Subscriptions,VkSubscriptionsRequest,C:\repos\Stealth2012_meridian\VkLibPortable\Trunk\Core\Subscriptions\VkSubscriptionsRequest.cs,Get,The length of the statement  "                return new VkItemsResponse<VkProfile>((from id in response["response"]["items"] select new VkProfile() { Id = (long)id }).ToList()'  " is 131.
Long Statement,VkLib.Core.Users,VkUsersRequest,C:\repos\Stealth2012_meridian\VkLibPortable\Trunk\Core\Users\VkUsersRequest.cs,Get,The length of the statement  "            if (_vkontakte.AccessToken == null || string.IsNullOrEmpty(_vkontakte.AccessToken.Token) || _vkontakte.AccessToken.HasExpired) " is 126.
Long Statement,VkLib.Core.Video,VkVideoRequest,C:\repos\Stealth2012_meridian\VkLibPortable\Trunk\Core\Video\VkVideoRequest.cs,Get,The length of the statement  "            if (_vkontakte.AccessToken == null || string.IsNullOrEmpty(_vkontakte.AccessToken.Token) || _vkontakte.AccessToken.HasExpired) " is 126.
Long Statement,VkLib.Core.Video,VkVideoRequest,C:\repos\Stealth2012_meridian\VkLibPortable\Trunk\Core\Video\VkVideoRequest.cs,Search,The length of the statement  "            if (_vkontakte.AccessToken == null || string.IsNullOrEmpty(_vkontakte.AccessToken.Token) || _vkontakte.AccessToken.HasExpired) " is 126.
Long Statement,VkLib.Core,VkErrorProcessor,C:\repos\Stealth2012_meridian\VkLibPortable\Trunk\Core\VkErrorProcessor.cs,ProcessError,The length of the statement  "                        throw new VkCaptchaNeededException(response["error"]["captcha_sid"].Value<string>()' response["error"]["captcha_img"].Value<string>()); " is 135.
Long Statement,VkLib.Core,VkErrorProcessor,C:\repos\Stealth2012_meridian\VkLibPortable\Trunk\Core\VkErrorProcessor.cs,ProcessError,The length of the statement  "                    Debug.WriteLine(response["error"]["error_code"].Value<string>() + ":" + response["error"]["error_msg"].Value<string>()); " is 120.
Long Statement,VkLib.Core.Wall,VkWallRequest,C:\repos\Stealth2012_meridian\VkLibPortable\Trunk\Core\Wall\VkWallRequest.cs,Post,The length of the statement  "            if (_vkontakte.AccessToken == null || string.IsNullOrEmpty(_vkontakte.AccessToken.Token) || _vkontakte.AccessToken.HasExpired) " is 126.
Long Statement,VkLib.Core.Wall,VkWallRequest,C:\repos\Stealth2012_meridian\VkLibPortable\Trunk\Core\Wall\VkWallRequest.cs,Get,The length of the statement  "            if (_vkontakte.AccessToken == null || string.IsNullOrEmpty(_vkontakte.AccessToken.Token) || _vkontakte.AccessToken.HasExpired) " is 126.
Long Statement,VkLib.Extensions,DictionaryExtensions,C:\repos\Stealth2012_meridian\VkLibPortable\Trunk\Extensions\DictionaryExtensions.cs,ToUrlParams,The length of the statement  "            var paramStr = string.Join("&"' input.Select(kp => string.Format("{0}={1}"' Uri.EscapeDataString(kp.Key)' Uri.EscapeDataString(kp.Value)))); " is 140.
Magic Number,VkLib.Core.Audio,VkAudioRequest,C:\repos\Stealth2012_meridian\VkLibPortable\Trunk\Core\Audio\VkAudioRequest.cs,GetGenres,The following statement contains a magic number: genres.Add(new VkGenre() { Id = 2' Title = "Pop" });
Magic Number,VkLib.Core.Audio,VkAudioRequest,C:\repos\Stealth2012_meridian\VkLibPortable\Trunk\Core\Audio\VkAudioRequest.cs,GetGenres,The following statement contains a magic number: genres.Add(new VkGenre() { Id = 3' Title = "Rap & Hip-Hop" });
Magic Number,VkLib.Core.Audio,VkAudioRequest,C:\repos\Stealth2012_meridian\VkLibPortable\Trunk\Core\Audio\VkAudioRequest.cs,GetGenres,The following statement contains a magic number: genres.Add(new VkGenre() { Id = 4' Title = "Easy Listening" });
Magic Number,VkLib.Core.Audio,VkAudioRequest,C:\repos\Stealth2012_meridian\VkLibPortable\Trunk\Core\Audio\VkAudioRequest.cs,GetGenres,The following statement contains a magic number: genres.Add(new VkGenre() { Id = 5' Title = "Dance & House" });
Magic Number,VkLib.Core.Audio,VkAudioRequest,C:\repos\Stealth2012_meridian\VkLibPortable\Trunk\Core\Audio\VkAudioRequest.cs,GetGenres,The following statement contains a magic number: genres.Add(new VkGenre() { Id = 6' Title = "Instrumental" });
Magic Number,VkLib.Core.Audio,VkAudioRequest,C:\repos\Stealth2012_meridian\VkLibPortable\Trunk\Core\Audio\VkAudioRequest.cs,GetGenres,The following statement contains a magic number: genres.Add(new VkGenre() { Id = 7' Title = "Metal" });
Magic Number,VkLib.Core.Audio,VkAudioRequest,C:\repos\Stealth2012_meridian\VkLibPortable\Trunk\Core\Audio\VkAudioRequest.cs,GetGenres,The following statement contains a magic number: genres.Add(new VkGenre() { Id = 21' Title = "Alternative" });
Magic Number,VkLib.Core.Audio,VkAudioRequest,C:\repos\Stealth2012_meridian\VkLibPortable\Trunk\Core\Audio\VkAudioRequest.cs,GetGenres,The following statement contains a magic number: genres.Add(new VkGenre() { Id = 8' Title = "Dubstep" });
Magic Number,VkLib.Core.Audio,VkAudioRequest,C:\repos\Stealth2012_meridian\VkLibPortable\Trunk\Core\Audio\VkAudioRequest.cs,GetGenres,The following statement contains a magic number: genres.Add(new VkGenre() { Id = 9' Title = "Jazz & Blues" });
Magic Number,VkLib.Core.Audio,VkAudioRequest,C:\repos\Stealth2012_meridian\VkLibPortable\Trunk\Core\Audio\VkAudioRequest.cs,GetGenres,The following statement contains a magic number: genres.Add(new VkGenre() { Id = 10' Title = "Drum & Bass" });
Magic Number,VkLib.Core.Audio,VkAudioRequest,C:\repos\Stealth2012_meridian\VkLibPortable\Trunk\Core\Audio\VkAudioRequest.cs,GetGenres,The following statement contains a magic number: genres.Add(new VkGenre() { Id = 11' Title = "Trance" });
Magic Number,VkLib.Core.Audio,VkAudioRequest,C:\repos\Stealth2012_meridian\VkLibPortable\Trunk\Core\Audio\VkAudioRequest.cs,GetGenres,The following statement contains a magic number: genres.Add(new VkGenre() { Id = 12' Title = "Chanson" });
Magic Number,VkLib.Core.Audio,VkAudioRequest,C:\repos\Stealth2012_meridian\VkLibPortable\Trunk\Core\Audio\VkAudioRequest.cs,GetGenres,The following statement contains a magic number: genres.Add(new VkGenre() { Id = 13' Title = "Ethnic" });
Magic Number,VkLib.Core.Audio,VkAudioRequest,C:\repos\Stealth2012_meridian\VkLibPortable\Trunk\Core\Audio\VkAudioRequest.cs,GetGenres,The following statement contains a magic number: genres.Add(new VkGenre() { Id = 14' Title = "Acoustic & Vocal" });
Magic Number,VkLib.Core.Audio,VkAudioRequest,C:\repos\Stealth2012_meridian\VkLibPortable\Trunk\Core\Audio\VkAudioRequest.cs,GetGenres,The following statement contains a magic number: genres.Add(new VkGenre() { Id = 15' Title = "Reggae" });
Magic Number,VkLib.Core.Audio,VkAudioRequest,C:\repos\Stealth2012_meridian\VkLibPortable\Trunk\Core\Audio\VkAudioRequest.cs,GetGenres,The following statement contains a magic number: genres.Add(new VkGenre() { Id = 16' Title = "Classical" });
Magic Number,VkLib.Core.Audio,VkAudioRequest,C:\repos\Stealth2012_meridian\VkLibPortable\Trunk\Core\Audio\VkAudioRequest.cs,GetGenres,The following statement contains a magic number: genres.Add(new VkGenre() { Id = 17' Title = "Indie Pop" });
Magic Number,VkLib.Core.Audio,VkAudioRequest,C:\repos\Stealth2012_meridian\VkLibPortable\Trunk\Core\Audio\VkAudioRequest.cs,GetGenres,The following statement contains a magic number: genres.Add(new VkGenre() { Id = 19' Title = "Speech" });
Magic Number,VkLib.Core.Audio,VkAudioRequest,C:\repos\Stealth2012_meridian\VkLibPortable\Trunk\Core\Audio\VkAudioRequest.cs,GetGenres,The following statement contains a magic number: genres.Add(new VkGenre() { Id = 22' Title = "Electropop & Disco" });
Magic Number,VkLib.Core.Audio,VkAudioRequest,C:\repos\Stealth2012_meridian\VkLibPortable\Trunk\Core\Audio\VkAudioRequest.cs,GetGenres,The following statement contains a magic number: genres.Add(new VkGenre() { Id = 18' Title = "Other" });
Magic Number,VkLib.Core.Messages,VkLongPollMessage,C:\repos\Stealth2012_meridian\VkLibPortable\Trunk\Core\Messages\VkLongPollMessage.cs,FromJson,The following statement contains a magic number: switch (messageType)              {                  //удаление сообщения с указанным local_id                  case "0":                      result.Type = VkLongPollMessageType.MessageDelete;                      result.Parameters.Add("message_id"' json[1].Value<string>());                      break;                    //замена флагов сообщения                  case "1":                      result.Type = VkLongPollMessageType.MessageUpdate;                      result.Parameters.Add("message_id"' json[1].Value<string>());                      result.Parameters.Add("flags"' json[2].Value<int>());                      break;                    //установка флагов сообщения                  case "2":                      result.Type = VkLongPollMessageType.MessageFlagSet;                      result.Parameters.Add("message_id"' json[1].Value<string>());                      result.Parameters.Add("flags"' json[2].Value<int>());                      if (json.Count > 2)                          result.Parameters.Add("user_id"' json[3].Value<string>());                      break;                    //сброс флагов сообщения                  case "3":                      result.Type = VkLongPollMessageType.MessageFlagReset;                      result.Parameters.Add("message_id"' json[1].Value<string>());                      result.Parameters.Add("flags"' json[2].Value<int>());                      if (json.Count > 2)                          result.Parameters.Add("user_id"' json[3].Value<string>());                      break;                    //добавление нового сообщения                  case "4":                      result.Type = VkLongPollMessageType.MessageAdd;                      var m = new VkMessage();                      m.Id = json[1].Value<long>();                      var flags = json[2].Value<int>();                      var uid = json[3].Value<long>();                      if (uid >= ChatIdMask)                      {                          //беседа                          result.Parameters.Add("conversation"' "1");                          m.ChatId = (uid - ChatIdMask);                      }                      else                      {                          m.UserId = uid;                      }                        m.Date = DateTimeExtensions.UnixTimeStampToDateTime(json[4].Value<double>()).ToLocalTime();                      m.Title = json[5].Value<string>();                      m.Body = json[6].Value<string>();                      result.Parameters.Add("message"' m);                      result.Parameters.Add("flags"' flags);                        //TODO forwards & attachments                      break;                    //друг стал онлайн                  case "8":                      result.Type = VkLongPollMessageType.FriendOnline;                      result.Parameters.Add("user_id"' json[1].Value<string>().Substring(1));                      break;                    //друг стал оффлайн                  case "9":                      result.Type = VkLongPollMessageType.FriendOffline;                      result.Parameters.Add("user_id"' json[1].Value<string>().Substring(1));                      break;                    //один из параметров (состав' тема) беседы был изменен                  case "51":                      result.Type = VkLongPollMessageType.ConversationChange;                      result.Parameters.Add("chat_id"' json[1].Value<string>());                      result.Parameters.Add("self"' json[2].Value<string>() == "1");                      break;                    //пользователь начал набирать текст в диалоге                  case "61":                      result.Type = VkLongPollMessageType.DialogUserTyping;                      result.Parameters.Add("user_id"' json[1].Value<string>());                      break;                  //пользователь начал набирать текст в беседе                  case "62":                      result.Type = VkLongPollMessageType.ConsersationUserTyping;                      result.Parameters.Add("user_id"' json[1].Value<string>());                      result.Parameters.Add("chat_id"' json[2].Value<string>());                      break;                    default:                      result.Type = VkLongPollMessageType.Unknown;                      break;              }
Magic Number,VkLib.Core.Messages,VkLongPollMessage,C:\repos\Stealth2012_meridian\VkLibPortable\Trunk\Core\Messages\VkLongPollMessage.cs,FromJson,The following statement contains a magic number: switch (messageType)              {                  //удаление сообщения с указанным local_id                  case "0":                      result.Type = VkLongPollMessageType.MessageDelete;                      result.Parameters.Add("message_id"' json[1].Value<string>());                      break;                    //замена флагов сообщения                  case "1":                      result.Type = VkLongPollMessageType.MessageUpdate;                      result.Parameters.Add("message_id"' json[1].Value<string>());                      result.Parameters.Add("flags"' json[2].Value<int>());                      break;                    //установка флагов сообщения                  case "2":                      result.Type = VkLongPollMessageType.MessageFlagSet;                      result.Parameters.Add("message_id"' json[1].Value<string>());                      result.Parameters.Add("flags"' json[2].Value<int>());                      if (json.Count > 2)                          result.Parameters.Add("user_id"' json[3].Value<string>());                      break;                    //сброс флагов сообщения                  case "3":                      result.Type = VkLongPollMessageType.MessageFlagReset;                      result.Parameters.Add("message_id"' json[1].Value<string>());                      result.Parameters.Add("flags"' json[2].Value<int>());                      if (json.Count > 2)                          result.Parameters.Add("user_id"' json[3].Value<string>());                      break;                    //добавление нового сообщения                  case "4":                      result.Type = VkLongPollMessageType.MessageAdd;                      var m = new VkMessage();                      m.Id = json[1].Value<long>();                      var flags = json[2].Value<int>();                      var uid = json[3].Value<long>();                      if (uid >= ChatIdMask)                      {                          //беседа                          result.Parameters.Add("conversation"' "1");                          m.ChatId = (uid - ChatIdMask);                      }                      else                      {                          m.UserId = uid;                      }                        m.Date = DateTimeExtensions.UnixTimeStampToDateTime(json[4].Value<double>()).ToLocalTime();                      m.Title = json[5].Value<string>();                      m.Body = json[6].Value<string>();                      result.Parameters.Add("message"' m);                      result.Parameters.Add("flags"' flags);                        //TODO forwards & attachments                      break;                    //друг стал онлайн                  case "8":                      result.Type = VkLongPollMessageType.FriendOnline;                      result.Parameters.Add("user_id"' json[1].Value<string>().Substring(1));                      break;                    //друг стал оффлайн                  case "9":                      result.Type = VkLongPollMessageType.FriendOffline;                      result.Parameters.Add("user_id"' json[1].Value<string>().Substring(1));                      break;                    //один из параметров (состав' тема) беседы был изменен                  case "51":                      result.Type = VkLongPollMessageType.ConversationChange;                      result.Parameters.Add("chat_id"' json[1].Value<string>());                      result.Parameters.Add("self"' json[2].Value<string>() == "1");                      break;                    //пользователь начал набирать текст в диалоге                  case "61":                      result.Type = VkLongPollMessageType.DialogUserTyping;                      result.Parameters.Add("user_id"' json[1].Value<string>());                      break;                  //пользователь начал набирать текст в беседе                  case "62":                      result.Type = VkLongPollMessageType.ConsersationUserTyping;                      result.Parameters.Add("user_id"' json[1].Value<string>());                      result.Parameters.Add("chat_id"' json[2].Value<string>());                      break;                    default:                      result.Type = VkLongPollMessageType.Unknown;                      break;              }
Magic Number,VkLib.Core.Messages,VkLongPollMessage,C:\repos\Stealth2012_meridian\VkLibPortable\Trunk\Core\Messages\VkLongPollMessage.cs,FromJson,The following statement contains a magic number: switch (messageType)              {                  //удаление сообщения с указанным local_id                  case "0":                      result.Type = VkLongPollMessageType.MessageDelete;                      result.Parameters.Add("message_id"' json[1].Value<string>());                      break;                    //замена флагов сообщения                  case "1":                      result.Type = VkLongPollMessageType.MessageUpdate;                      result.Parameters.Add("message_id"' json[1].Value<string>());                      result.Parameters.Add("flags"' json[2].Value<int>());                      break;                    //установка флагов сообщения                  case "2":                      result.Type = VkLongPollMessageType.MessageFlagSet;                      result.Parameters.Add("message_id"' json[1].Value<string>());                      result.Parameters.Add("flags"' json[2].Value<int>());                      if (json.Count > 2)                          result.Parameters.Add("user_id"' json[3].Value<string>());                      break;                    //сброс флагов сообщения                  case "3":                      result.Type = VkLongPollMessageType.MessageFlagReset;                      result.Parameters.Add("message_id"' json[1].Value<string>());                      result.Parameters.Add("flags"' json[2].Value<int>());                      if (json.Count > 2)                          result.Parameters.Add("user_id"' json[3].Value<string>());                      break;                    //добавление нового сообщения                  case "4":                      result.Type = VkLongPollMessageType.MessageAdd;                      var m = new VkMessage();                      m.Id = json[1].Value<long>();                      var flags = json[2].Value<int>();                      var uid = json[3].Value<long>();                      if (uid >= ChatIdMask)                      {                          //беседа                          result.Parameters.Add("conversation"' "1");                          m.ChatId = (uid - ChatIdMask);                      }                      else                      {                          m.UserId = uid;                      }                        m.Date = DateTimeExtensions.UnixTimeStampToDateTime(json[4].Value<double>()).ToLocalTime();                      m.Title = json[5].Value<string>();                      m.Body = json[6].Value<string>();                      result.Parameters.Add("message"' m);                      result.Parameters.Add("flags"' flags);                        //TODO forwards & attachments                      break;                    //друг стал онлайн                  case "8":                      result.Type = VkLongPollMessageType.FriendOnline;                      result.Parameters.Add("user_id"' json[1].Value<string>().Substring(1));                      break;                    //друг стал оффлайн                  case "9":                      result.Type = VkLongPollMessageType.FriendOffline;                      result.Parameters.Add("user_id"' json[1].Value<string>().Substring(1));                      break;                    //один из параметров (состав' тема) беседы был изменен                  case "51":                      result.Type = VkLongPollMessageType.ConversationChange;                      result.Parameters.Add("chat_id"' json[1].Value<string>());                      result.Parameters.Add("self"' json[2].Value<string>() == "1");                      break;                    //пользователь начал набирать текст в диалоге                  case "61":                      result.Type = VkLongPollMessageType.DialogUserTyping;                      result.Parameters.Add("user_id"' json[1].Value<string>());                      break;                  //пользователь начал набирать текст в беседе                  case "62":                      result.Type = VkLongPollMessageType.ConsersationUserTyping;                      result.Parameters.Add("user_id"' json[1].Value<string>());                      result.Parameters.Add("chat_id"' json[2].Value<string>());                      break;                    default:                      result.Type = VkLongPollMessageType.Unknown;                      break;              }
Magic Number,VkLib.Core.Messages,VkLongPollMessage,C:\repos\Stealth2012_meridian\VkLibPortable\Trunk\Core\Messages\VkLongPollMessage.cs,FromJson,The following statement contains a magic number: switch (messageType)              {                  //удаление сообщения с указанным local_id                  case "0":                      result.Type = VkLongPollMessageType.MessageDelete;                      result.Parameters.Add("message_id"' json[1].Value<string>());                      break;                    //замена флагов сообщения                  case "1":                      result.Type = VkLongPollMessageType.MessageUpdate;                      result.Parameters.Add("message_id"' json[1].Value<string>());                      result.Parameters.Add("flags"' json[2].Value<int>());                      break;                    //установка флагов сообщения                  case "2":                      result.Type = VkLongPollMessageType.MessageFlagSet;                      result.Parameters.Add("message_id"' json[1].Value<string>());                      result.Parameters.Add("flags"' json[2].Value<int>());                      if (json.Count > 2)                          result.Parameters.Add("user_id"' json[3].Value<string>());                      break;                    //сброс флагов сообщения                  case "3":                      result.Type = VkLongPollMessageType.MessageFlagReset;                      result.Parameters.Add("message_id"' json[1].Value<string>());                      result.Parameters.Add("flags"' json[2].Value<int>());                      if (json.Count > 2)                          result.Parameters.Add("user_id"' json[3].Value<string>());                      break;                    //добавление нового сообщения                  case "4":                      result.Type = VkLongPollMessageType.MessageAdd;                      var m = new VkMessage();                      m.Id = json[1].Value<long>();                      var flags = json[2].Value<int>();                      var uid = json[3].Value<long>();                      if (uid >= ChatIdMask)                      {                          //беседа                          result.Parameters.Add("conversation"' "1");                          m.ChatId = (uid - ChatIdMask);                      }                      else                      {                          m.UserId = uid;                      }                        m.Date = DateTimeExtensions.UnixTimeStampToDateTime(json[4].Value<double>()).ToLocalTime();                      m.Title = json[5].Value<string>();                      m.Body = json[6].Value<string>();                      result.Parameters.Add("message"' m);                      result.Parameters.Add("flags"' flags);                        //TODO forwards & attachments                      break;                    //друг стал онлайн                  case "8":                      result.Type = VkLongPollMessageType.FriendOnline;                      result.Parameters.Add("user_id"' json[1].Value<string>().Substring(1));                      break;                    //друг стал оффлайн                  case "9":                      result.Type = VkLongPollMessageType.FriendOffline;                      result.Parameters.Add("user_id"' json[1].Value<string>().Substring(1));                      break;                    //один из параметров (состав' тема) беседы был изменен                  case "51":                      result.Type = VkLongPollMessageType.ConversationChange;                      result.Parameters.Add("chat_id"' json[1].Value<string>());                      result.Parameters.Add("self"' json[2].Value<string>() == "1");                      break;                    //пользователь начал набирать текст в диалоге                  case "61":                      result.Type = VkLongPollMessageType.DialogUserTyping;                      result.Parameters.Add("user_id"' json[1].Value<string>());                      break;                  //пользователь начал набирать текст в беседе                  case "62":                      result.Type = VkLongPollMessageType.ConsersationUserTyping;                      result.Parameters.Add("user_id"' json[1].Value<string>());                      result.Parameters.Add("chat_id"' json[2].Value<string>());                      break;                    default:                      result.Type = VkLongPollMessageType.Unknown;                      break;              }
Magic Number,VkLib.Core.Messages,VkLongPollMessage,C:\repos\Stealth2012_meridian\VkLibPortable\Trunk\Core\Messages\VkLongPollMessage.cs,FromJson,The following statement contains a magic number: switch (messageType)              {                  //удаление сообщения с указанным local_id                  case "0":                      result.Type = VkLongPollMessageType.MessageDelete;                      result.Parameters.Add("message_id"' json[1].Value<string>());                      break;                    //замена флагов сообщения                  case "1":                      result.Type = VkLongPollMessageType.MessageUpdate;                      result.Parameters.Add("message_id"' json[1].Value<string>());                      result.Parameters.Add("flags"' json[2].Value<int>());                      break;                    //установка флагов сообщения                  case "2":                      result.Type = VkLongPollMessageType.MessageFlagSet;                      result.Parameters.Add("message_id"' json[1].Value<string>());                      result.Parameters.Add("flags"' json[2].Value<int>());                      if (json.Count > 2)                          result.Parameters.Add("user_id"' json[3].Value<string>());                      break;                    //сброс флагов сообщения                  case "3":                      result.Type = VkLongPollMessageType.MessageFlagReset;                      result.Parameters.Add("message_id"' json[1].Value<string>());                      result.Parameters.Add("flags"' json[2].Value<int>());                      if (json.Count > 2)                          result.Parameters.Add("user_id"' json[3].Value<string>());                      break;                    //добавление нового сообщения                  case "4":                      result.Type = VkLongPollMessageType.MessageAdd;                      var m = new VkMessage();                      m.Id = json[1].Value<long>();                      var flags = json[2].Value<int>();                      var uid = json[3].Value<long>();                      if (uid >= ChatIdMask)                      {                          //беседа                          result.Parameters.Add("conversation"' "1");                          m.ChatId = (uid - ChatIdMask);                      }                      else                      {                          m.UserId = uid;                      }                        m.Date = DateTimeExtensions.UnixTimeStampToDateTime(json[4].Value<double>()).ToLocalTime();                      m.Title = json[5].Value<string>();                      m.Body = json[6].Value<string>();                      result.Parameters.Add("message"' m);                      result.Parameters.Add("flags"' flags);                        //TODO forwards & attachments                      break;                    //друг стал онлайн                  case "8":                      result.Type = VkLongPollMessageType.FriendOnline;                      result.Parameters.Add("user_id"' json[1].Value<string>().Substring(1));                      break;                    //друг стал оффлайн                  case "9":                      result.Type = VkLongPollMessageType.FriendOffline;                      result.Parameters.Add("user_id"' json[1].Value<string>().Substring(1));                      break;                    //один из параметров (состав' тема) беседы был изменен                  case "51":                      result.Type = VkLongPollMessageType.ConversationChange;                      result.Parameters.Add("chat_id"' json[1].Value<string>());                      result.Parameters.Add("self"' json[2].Value<string>() == "1");                      break;                    //пользователь начал набирать текст в диалоге                  case "61":                      result.Type = VkLongPollMessageType.DialogUserTyping;                      result.Parameters.Add("user_id"' json[1].Value<string>());                      break;                  //пользователь начал набирать текст в беседе                  case "62":                      result.Type = VkLongPollMessageType.ConsersationUserTyping;                      result.Parameters.Add("user_id"' json[1].Value<string>());                      result.Parameters.Add("chat_id"' json[2].Value<string>());                      break;                    default:                      result.Type = VkLongPollMessageType.Unknown;                      break;              }
Magic Number,VkLib.Core.Messages,VkLongPollMessage,C:\repos\Stealth2012_meridian\VkLibPortable\Trunk\Core\Messages\VkLongPollMessage.cs,FromJson,The following statement contains a magic number: switch (messageType)              {                  //удаление сообщения с указанным local_id                  case "0":                      result.Type = VkLongPollMessageType.MessageDelete;                      result.Parameters.Add("message_id"' json[1].Value<string>());                      break;                    //замена флагов сообщения                  case "1":                      result.Type = VkLongPollMessageType.MessageUpdate;                      result.Parameters.Add("message_id"' json[1].Value<string>());                      result.Parameters.Add("flags"' json[2].Value<int>());                      break;                    //установка флагов сообщения                  case "2":                      result.Type = VkLongPollMessageType.MessageFlagSet;                      result.Parameters.Add("message_id"' json[1].Value<string>());                      result.Parameters.Add("flags"' json[2].Value<int>());                      if (json.Count > 2)                          result.Parameters.Add("user_id"' json[3].Value<string>());                      break;                    //сброс флагов сообщения                  case "3":                      result.Type = VkLongPollMessageType.MessageFlagReset;                      result.Parameters.Add("message_id"' json[1].Value<string>());                      result.Parameters.Add("flags"' json[2].Value<int>());                      if (json.Count > 2)                          result.Parameters.Add("user_id"' json[3].Value<string>());                      break;                    //добавление нового сообщения                  case "4":                      result.Type = VkLongPollMessageType.MessageAdd;                      var m = new VkMessage();                      m.Id = json[1].Value<long>();                      var flags = json[2].Value<int>();                      var uid = json[3].Value<long>();                      if (uid >= ChatIdMask)                      {                          //беседа                          result.Parameters.Add("conversation"' "1");                          m.ChatId = (uid - ChatIdMask);                      }                      else                      {                          m.UserId = uid;                      }                        m.Date = DateTimeExtensions.UnixTimeStampToDateTime(json[4].Value<double>()).ToLocalTime();                      m.Title = json[5].Value<string>();                      m.Body = json[6].Value<string>();                      result.Parameters.Add("message"' m);                      result.Parameters.Add("flags"' flags);                        //TODO forwards & attachments                      break;                    //друг стал онлайн                  case "8":                      result.Type = VkLongPollMessageType.FriendOnline;                      result.Parameters.Add("user_id"' json[1].Value<string>().Substring(1));                      break;                    //друг стал оффлайн                  case "9":                      result.Type = VkLongPollMessageType.FriendOffline;                      result.Parameters.Add("user_id"' json[1].Value<string>().Substring(1));                      break;                    //один из параметров (состав' тема) беседы был изменен                  case "51":                      result.Type = VkLongPollMessageType.ConversationChange;                      result.Parameters.Add("chat_id"' json[1].Value<string>());                      result.Parameters.Add("self"' json[2].Value<string>() == "1");                      break;                    //пользователь начал набирать текст в диалоге                  case "61":                      result.Type = VkLongPollMessageType.DialogUserTyping;                      result.Parameters.Add("user_id"' json[1].Value<string>());                      break;                  //пользователь начал набирать текст в беседе                  case "62":                      result.Type = VkLongPollMessageType.ConsersationUserTyping;                      result.Parameters.Add("user_id"' json[1].Value<string>());                      result.Parameters.Add("chat_id"' json[2].Value<string>());                      break;                    default:                      result.Type = VkLongPollMessageType.Unknown;                      break;              }
Magic Number,VkLib.Core.Messages,VkLongPollMessage,C:\repos\Stealth2012_meridian\VkLibPortable\Trunk\Core\Messages\VkLongPollMessage.cs,FromJson,The following statement contains a magic number: switch (messageType)              {                  //удаление сообщения с указанным local_id                  case "0":                      result.Type = VkLongPollMessageType.MessageDelete;                      result.Parameters.Add("message_id"' json[1].Value<string>());                      break;                    //замена флагов сообщения                  case "1":                      result.Type = VkLongPollMessageType.MessageUpdate;                      result.Parameters.Add("message_id"' json[1].Value<string>());                      result.Parameters.Add("flags"' json[2].Value<int>());                      break;                    //установка флагов сообщения                  case "2":                      result.Type = VkLongPollMessageType.MessageFlagSet;                      result.Parameters.Add("message_id"' json[1].Value<string>());                      result.Parameters.Add("flags"' json[2].Value<int>());                      if (json.Count > 2)                          result.Parameters.Add("user_id"' json[3].Value<string>());                      break;                    //сброс флагов сообщения                  case "3":                      result.Type = VkLongPollMessageType.MessageFlagReset;                      result.Parameters.Add("message_id"' json[1].Value<string>());                      result.Parameters.Add("flags"' json[2].Value<int>());                      if (json.Count > 2)                          result.Parameters.Add("user_id"' json[3].Value<string>());                      break;                    //добавление нового сообщения                  case "4":                      result.Type = VkLongPollMessageType.MessageAdd;                      var m = new VkMessage();                      m.Id = json[1].Value<long>();                      var flags = json[2].Value<int>();                      var uid = json[3].Value<long>();                      if (uid >= ChatIdMask)                      {                          //беседа                          result.Parameters.Add("conversation"' "1");                          m.ChatId = (uid - ChatIdMask);                      }                      else                      {                          m.UserId = uid;                      }                        m.Date = DateTimeExtensions.UnixTimeStampToDateTime(json[4].Value<double>()).ToLocalTime();                      m.Title = json[5].Value<string>();                      m.Body = json[6].Value<string>();                      result.Parameters.Add("message"' m);                      result.Parameters.Add("flags"' flags);                        //TODO forwards & attachments                      break;                    //друг стал онлайн                  case "8":                      result.Type = VkLongPollMessageType.FriendOnline;                      result.Parameters.Add("user_id"' json[1].Value<string>().Substring(1));                      break;                    //друг стал оффлайн                  case "9":                      result.Type = VkLongPollMessageType.FriendOffline;                      result.Parameters.Add("user_id"' json[1].Value<string>().Substring(1));                      break;                    //один из параметров (состав' тема) беседы был изменен                  case "51":                      result.Type = VkLongPollMessageType.ConversationChange;                      result.Parameters.Add("chat_id"' json[1].Value<string>());                      result.Parameters.Add("self"' json[2].Value<string>() == "1");                      break;                    //пользователь начал набирать текст в диалоге                  case "61":                      result.Type = VkLongPollMessageType.DialogUserTyping;                      result.Parameters.Add("user_id"' json[1].Value<string>());                      break;                  //пользователь начал набирать текст в беседе                  case "62":                      result.Type = VkLongPollMessageType.ConsersationUserTyping;                      result.Parameters.Add("user_id"' json[1].Value<string>());                      result.Parameters.Add("chat_id"' json[2].Value<string>());                      break;                    default:                      result.Type = VkLongPollMessageType.Unknown;                      break;              }
Magic Number,VkLib.Core.Messages,VkLongPollMessage,C:\repos\Stealth2012_meridian\VkLibPortable\Trunk\Core\Messages\VkLongPollMessage.cs,FromJson,The following statement contains a magic number: switch (messageType)              {                  //удаление сообщения с указанным local_id                  case "0":                      result.Type = VkLongPollMessageType.MessageDelete;                      result.Parameters.Add("message_id"' json[1].Value<string>());                      break;                    //замена флагов сообщения                  case "1":                      result.Type = VkLongPollMessageType.MessageUpdate;                      result.Parameters.Add("message_id"' json[1].Value<string>());                      result.Parameters.Add("flags"' json[2].Value<int>());                      break;                    //установка флагов сообщения                  case "2":                      result.Type = VkLongPollMessageType.MessageFlagSet;                      result.Parameters.Add("message_id"' json[1].Value<string>());                      result.Parameters.Add("flags"' json[2].Value<int>());                      if (json.Count > 2)                          result.Parameters.Add("user_id"' json[3].Value<string>());                      break;                    //сброс флагов сообщения                  case "3":                      result.Type = VkLongPollMessageType.MessageFlagReset;                      result.Parameters.Add("message_id"' json[1].Value<string>());                      result.Parameters.Add("flags"' json[2].Value<int>());                      if (json.Count > 2)                          result.Parameters.Add("user_id"' json[3].Value<string>());                      break;                    //добавление нового сообщения                  case "4":                      result.Type = VkLongPollMessageType.MessageAdd;                      var m = new VkMessage();                      m.Id = json[1].Value<long>();                      var flags = json[2].Value<int>();                      var uid = json[3].Value<long>();                      if (uid >= ChatIdMask)                      {                          //беседа                          result.Parameters.Add("conversation"' "1");                          m.ChatId = (uid - ChatIdMask);                      }                      else                      {                          m.UserId = uid;                      }                        m.Date = DateTimeExtensions.UnixTimeStampToDateTime(json[4].Value<double>()).ToLocalTime();                      m.Title = json[5].Value<string>();                      m.Body = json[6].Value<string>();                      result.Parameters.Add("message"' m);                      result.Parameters.Add("flags"' flags);                        //TODO forwards & attachments                      break;                    //друг стал онлайн                  case "8":                      result.Type = VkLongPollMessageType.FriendOnline;                      result.Parameters.Add("user_id"' json[1].Value<string>().Substring(1));                      break;                    //друг стал оффлайн                  case "9":                      result.Type = VkLongPollMessageType.FriendOffline;                      result.Parameters.Add("user_id"' json[1].Value<string>().Substring(1));                      break;                    //один из параметров (состав' тема) беседы был изменен                  case "51":                      result.Type = VkLongPollMessageType.ConversationChange;                      result.Parameters.Add("chat_id"' json[1].Value<string>());                      result.Parameters.Add("self"' json[2].Value<string>() == "1");                      break;                    //пользователь начал набирать текст в диалоге                  case "61":                      result.Type = VkLongPollMessageType.DialogUserTyping;                      result.Parameters.Add("user_id"' json[1].Value<string>());                      break;                  //пользователь начал набирать текст в беседе                  case "62":                      result.Type = VkLongPollMessageType.ConsersationUserTyping;                      result.Parameters.Add("user_id"' json[1].Value<string>());                      result.Parameters.Add("chat_id"' json[2].Value<string>());                      break;                    default:                      result.Type = VkLongPollMessageType.Unknown;                      break;              }
Magic Number,VkLib.Core.Messages,VkLongPollMessage,C:\repos\Stealth2012_meridian\VkLibPortable\Trunk\Core\Messages\VkLongPollMessage.cs,FromJson,The following statement contains a magic number: switch (messageType)              {                  //удаление сообщения с указанным local_id                  case "0":                      result.Type = VkLongPollMessageType.MessageDelete;                      result.Parameters.Add("message_id"' json[1].Value<string>());                      break;                    //замена флагов сообщения                  case "1":                      result.Type = VkLongPollMessageType.MessageUpdate;                      result.Parameters.Add("message_id"' json[1].Value<string>());                      result.Parameters.Add("flags"' json[2].Value<int>());                      break;                    //установка флагов сообщения                  case "2":                      result.Type = VkLongPollMessageType.MessageFlagSet;                      result.Parameters.Add("message_id"' json[1].Value<string>());                      result.Parameters.Add("flags"' json[2].Value<int>());                      if (json.Count > 2)                          result.Parameters.Add("user_id"' json[3].Value<string>());                      break;                    //сброс флагов сообщения                  case "3":                      result.Type = VkLongPollMessageType.MessageFlagReset;                      result.Parameters.Add("message_id"' json[1].Value<string>());                      result.Parameters.Add("flags"' json[2].Value<int>());                      if (json.Count > 2)                          result.Parameters.Add("user_id"' json[3].Value<string>());                      break;                    //добавление нового сообщения                  case "4":                      result.Type = VkLongPollMessageType.MessageAdd;                      var m = new VkMessage();                      m.Id = json[1].Value<long>();                      var flags = json[2].Value<int>();                      var uid = json[3].Value<long>();                      if (uid >= ChatIdMask)                      {                          //беседа                          result.Parameters.Add("conversation"' "1");                          m.ChatId = (uid - ChatIdMask);                      }                      else                      {                          m.UserId = uid;                      }                        m.Date = DateTimeExtensions.UnixTimeStampToDateTime(json[4].Value<double>()).ToLocalTime();                      m.Title = json[5].Value<string>();                      m.Body = json[6].Value<string>();                      result.Parameters.Add("message"' m);                      result.Parameters.Add("flags"' flags);                        //TODO forwards & attachments                      break;                    //друг стал онлайн                  case "8":                      result.Type = VkLongPollMessageType.FriendOnline;                      result.Parameters.Add("user_id"' json[1].Value<string>().Substring(1));                      break;                    //друг стал оффлайн                  case "9":                      result.Type = VkLongPollMessageType.FriendOffline;                      result.Parameters.Add("user_id"' json[1].Value<string>().Substring(1));                      break;                    //один из параметров (состав' тема) беседы был изменен                  case "51":                      result.Type = VkLongPollMessageType.ConversationChange;                      result.Parameters.Add("chat_id"' json[1].Value<string>());                      result.Parameters.Add("self"' json[2].Value<string>() == "1");                      break;                    //пользователь начал набирать текст в диалоге                  case "61":                      result.Type = VkLongPollMessageType.DialogUserTyping;                      result.Parameters.Add("user_id"' json[1].Value<string>());                      break;                  //пользователь начал набирать текст в беседе                  case "62":                      result.Type = VkLongPollMessageType.ConsersationUserTyping;                      result.Parameters.Add("user_id"' json[1].Value<string>());                      result.Parameters.Add("chat_id"' json[2].Value<string>());                      break;                    default:                      result.Type = VkLongPollMessageType.Unknown;                      break;              }
Magic Number,VkLib.Core.Messages,VkLongPollMessage,C:\repos\Stealth2012_meridian\VkLibPortable\Trunk\Core\Messages\VkLongPollMessage.cs,FromJson,The following statement contains a magic number: switch (messageType)              {                  //удаление сообщения с указанным local_id                  case "0":                      result.Type = VkLongPollMessageType.MessageDelete;                      result.Parameters.Add("message_id"' json[1].Value<string>());                      break;                    //замена флагов сообщения                  case "1":                      result.Type = VkLongPollMessageType.MessageUpdate;                      result.Parameters.Add("message_id"' json[1].Value<string>());                      result.Parameters.Add("flags"' json[2].Value<int>());                      break;                    //установка флагов сообщения                  case "2":                      result.Type = VkLongPollMessageType.MessageFlagSet;                      result.Parameters.Add("message_id"' json[1].Value<string>());                      result.Parameters.Add("flags"' json[2].Value<int>());                      if (json.Count > 2)                          result.Parameters.Add("user_id"' json[3].Value<string>());                      break;                    //сброс флагов сообщения                  case "3":                      result.Type = VkLongPollMessageType.MessageFlagReset;                      result.Parameters.Add("message_id"' json[1].Value<string>());                      result.Parameters.Add("flags"' json[2].Value<int>());                      if (json.Count > 2)                          result.Parameters.Add("user_id"' json[3].Value<string>());                      break;                    //добавление нового сообщения                  case "4":                      result.Type = VkLongPollMessageType.MessageAdd;                      var m = new VkMessage();                      m.Id = json[1].Value<long>();                      var flags = json[2].Value<int>();                      var uid = json[3].Value<long>();                      if (uid >= ChatIdMask)                      {                          //беседа                          result.Parameters.Add("conversation"' "1");                          m.ChatId = (uid - ChatIdMask);                      }                      else                      {                          m.UserId = uid;                      }                        m.Date = DateTimeExtensions.UnixTimeStampToDateTime(json[4].Value<double>()).ToLocalTime();                      m.Title = json[5].Value<string>();                      m.Body = json[6].Value<string>();                      result.Parameters.Add("message"' m);                      result.Parameters.Add("flags"' flags);                        //TODO forwards & attachments                      break;                    //друг стал онлайн                  case "8":                      result.Type = VkLongPollMessageType.FriendOnline;                      result.Parameters.Add("user_id"' json[1].Value<string>().Substring(1));                      break;                    //друг стал оффлайн                  case "9":                      result.Type = VkLongPollMessageType.FriendOffline;                      result.Parameters.Add("user_id"' json[1].Value<string>().Substring(1));                      break;                    //один из параметров (состав' тема) беседы был изменен                  case "51":                      result.Type = VkLongPollMessageType.ConversationChange;                      result.Parameters.Add("chat_id"' json[1].Value<string>());                      result.Parameters.Add("self"' json[2].Value<string>() == "1");                      break;                    //пользователь начал набирать текст в диалоге                  case "61":                      result.Type = VkLongPollMessageType.DialogUserTyping;                      result.Parameters.Add("user_id"' json[1].Value<string>());                      break;                  //пользователь начал набирать текст в беседе                  case "62":                      result.Type = VkLongPollMessageType.ConsersationUserTyping;                      result.Parameters.Add("user_id"' json[1].Value<string>());                      result.Parameters.Add("chat_id"' json[2].Value<string>());                      break;                    default:                      result.Type = VkLongPollMessageType.Unknown;                      break;              }
Magic Number,VkLib.Core.Messages,VkLongPollMessage,C:\repos\Stealth2012_meridian\VkLibPortable\Trunk\Core\Messages\VkLongPollMessage.cs,FromJson,The following statement contains a magic number: switch (messageType)              {                  //удаление сообщения с указанным local_id                  case "0":                      result.Type = VkLongPollMessageType.MessageDelete;                      result.Parameters.Add("message_id"' json[1].Value<string>());                      break;                    //замена флагов сообщения                  case "1":                      result.Type = VkLongPollMessageType.MessageUpdate;                      result.Parameters.Add("message_id"' json[1].Value<string>());                      result.Parameters.Add("flags"' json[2].Value<int>());                      break;                    //установка флагов сообщения                  case "2":                      result.Type = VkLongPollMessageType.MessageFlagSet;                      result.Parameters.Add("message_id"' json[1].Value<string>());                      result.Parameters.Add("flags"' json[2].Value<int>());                      if (json.Count > 2)                          result.Parameters.Add("user_id"' json[3].Value<string>());                      break;                    //сброс флагов сообщения                  case "3":                      result.Type = VkLongPollMessageType.MessageFlagReset;                      result.Parameters.Add("message_id"' json[1].Value<string>());                      result.Parameters.Add("flags"' json[2].Value<int>());                      if (json.Count > 2)                          result.Parameters.Add("user_id"' json[3].Value<string>());                      break;                    //добавление нового сообщения                  case "4":                      result.Type = VkLongPollMessageType.MessageAdd;                      var m = new VkMessage();                      m.Id = json[1].Value<long>();                      var flags = json[2].Value<int>();                      var uid = json[3].Value<long>();                      if (uid >= ChatIdMask)                      {                          //беседа                          result.Parameters.Add("conversation"' "1");                          m.ChatId = (uid - ChatIdMask);                      }                      else                      {                          m.UserId = uid;                      }                        m.Date = DateTimeExtensions.UnixTimeStampToDateTime(json[4].Value<double>()).ToLocalTime();                      m.Title = json[5].Value<string>();                      m.Body = json[6].Value<string>();                      result.Parameters.Add("message"' m);                      result.Parameters.Add("flags"' flags);                        //TODO forwards & attachments                      break;                    //друг стал онлайн                  case "8":                      result.Type = VkLongPollMessageType.FriendOnline;                      result.Parameters.Add("user_id"' json[1].Value<string>().Substring(1));                      break;                    //друг стал оффлайн                  case "9":                      result.Type = VkLongPollMessageType.FriendOffline;                      result.Parameters.Add("user_id"' json[1].Value<string>().Substring(1));                      break;                    //один из параметров (состав' тема) беседы был изменен                  case "51":                      result.Type = VkLongPollMessageType.ConversationChange;                      result.Parameters.Add("chat_id"' json[1].Value<string>());                      result.Parameters.Add("self"' json[2].Value<string>() == "1");                      break;                    //пользователь начал набирать текст в диалоге                  case "61":                      result.Type = VkLongPollMessageType.DialogUserTyping;                      result.Parameters.Add("user_id"' json[1].Value<string>());                      break;                  //пользователь начал набирать текст в беседе                  case "62":                      result.Type = VkLongPollMessageType.ConsersationUserTyping;                      result.Parameters.Add("user_id"' json[1].Value<string>());                      result.Parameters.Add("chat_id"' json[2].Value<string>());                      break;                    default:                      result.Type = VkLongPollMessageType.Unknown;                      break;              }
Magic Number,VkLib.Core.Messages,VkLongPollMessage,C:\repos\Stealth2012_meridian\VkLibPortable\Trunk\Core\Messages\VkLongPollMessage.cs,FromJson,The following statement contains a magic number: switch (messageType)              {                  //удаление сообщения с указанным local_id                  case "0":                      result.Type = VkLongPollMessageType.MessageDelete;                      result.Parameters.Add("message_id"' json[1].Value<string>());                      break;                    //замена флагов сообщения                  case "1":                      result.Type = VkLongPollMessageType.MessageUpdate;                      result.Parameters.Add("message_id"' json[1].Value<string>());                      result.Parameters.Add("flags"' json[2].Value<int>());                      break;                    //установка флагов сообщения                  case "2":                      result.Type = VkLongPollMessageType.MessageFlagSet;                      result.Parameters.Add("message_id"' json[1].Value<string>());                      result.Parameters.Add("flags"' json[2].Value<int>());                      if (json.Count > 2)                          result.Parameters.Add("user_id"' json[3].Value<string>());                      break;                    //сброс флагов сообщения                  case "3":                      result.Type = VkLongPollMessageType.MessageFlagReset;                      result.Parameters.Add("message_id"' json[1].Value<string>());                      result.Parameters.Add("flags"' json[2].Value<int>());                      if (json.Count > 2)                          result.Parameters.Add("user_id"' json[3].Value<string>());                      break;                    //добавление нового сообщения                  case "4":                      result.Type = VkLongPollMessageType.MessageAdd;                      var m = new VkMessage();                      m.Id = json[1].Value<long>();                      var flags = json[2].Value<int>();                      var uid = json[3].Value<long>();                      if (uid >= ChatIdMask)                      {                          //беседа                          result.Parameters.Add("conversation"' "1");                          m.ChatId = (uid - ChatIdMask);                      }                      else                      {                          m.UserId = uid;                      }                        m.Date = DateTimeExtensions.UnixTimeStampToDateTime(json[4].Value<double>()).ToLocalTime();                      m.Title = json[5].Value<string>();                      m.Body = json[6].Value<string>();                      result.Parameters.Add("message"' m);                      result.Parameters.Add("flags"' flags);                        //TODO forwards & attachments                      break;                    //друг стал онлайн                  case "8":                      result.Type = VkLongPollMessageType.FriendOnline;                      result.Parameters.Add("user_id"' json[1].Value<string>().Substring(1));                      break;                    //друг стал оффлайн                  case "9":                      result.Type = VkLongPollMessageType.FriendOffline;                      result.Parameters.Add("user_id"' json[1].Value<string>().Substring(1));                      break;                    //один из параметров (состав' тема) беседы был изменен                  case "51":                      result.Type = VkLongPollMessageType.ConversationChange;                      result.Parameters.Add("chat_id"' json[1].Value<string>());                      result.Parameters.Add("self"' json[2].Value<string>() == "1");                      break;                    //пользователь начал набирать текст в диалоге                  case "61":                      result.Type = VkLongPollMessageType.DialogUserTyping;                      result.Parameters.Add("user_id"' json[1].Value<string>());                      break;                  //пользователь начал набирать текст в беседе                  case "62":                      result.Type = VkLongPollMessageType.ConsersationUserTyping;                      result.Parameters.Add("user_id"' json[1].Value<string>());                      result.Parameters.Add("chat_id"' json[2].Value<string>());                      break;                    default:                      result.Type = VkLongPollMessageType.Unknown;                      break;              }
Magic Number,VkLib.Core.Messages,VkLongPollMessage,C:\repos\Stealth2012_meridian\VkLibPortable\Trunk\Core\Messages\VkLongPollMessage.cs,FromJson,The following statement contains a magic number: switch (messageType)              {                  //удаление сообщения с указанным local_id                  case "0":                      result.Type = VkLongPollMessageType.MessageDelete;                      result.Parameters.Add("message_id"' json[1].Value<string>());                      break;                    //замена флагов сообщения                  case "1":                      result.Type = VkLongPollMessageType.MessageUpdate;                      result.Parameters.Add("message_id"' json[1].Value<string>());                      result.Parameters.Add("flags"' json[2].Value<int>());                      break;                    //установка флагов сообщения                  case "2":                      result.Type = VkLongPollMessageType.MessageFlagSet;                      result.Parameters.Add("message_id"' json[1].Value<string>());                      result.Parameters.Add("flags"' json[2].Value<int>());                      if (json.Count > 2)                          result.Parameters.Add("user_id"' json[3].Value<string>());                      break;                    //сброс флагов сообщения                  case "3":                      result.Type = VkLongPollMessageType.MessageFlagReset;                      result.Parameters.Add("message_id"' json[1].Value<string>());                      result.Parameters.Add("flags"' json[2].Value<int>());                      if (json.Count > 2)                          result.Parameters.Add("user_id"' json[3].Value<string>());                      break;                    //добавление нового сообщения                  case "4":                      result.Type = VkLongPollMessageType.MessageAdd;                      var m = new VkMessage();                      m.Id = json[1].Value<long>();                      var flags = json[2].Value<int>();                      var uid = json[3].Value<long>();                      if (uid >= ChatIdMask)                      {                          //беседа                          result.Parameters.Add("conversation"' "1");                          m.ChatId = (uid - ChatIdMask);                      }                      else                      {                          m.UserId = uid;                      }                        m.Date = DateTimeExtensions.UnixTimeStampToDateTime(json[4].Value<double>()).ToLocalTime();                      m.Title = json[5].Value<string>();                      m.Body = json[6].Value<string>();                      result.Parameters.Add("message"' m);                      result.Parameters.Add("flags"' flags);                        //TODO forwards & attachments                      break;                    //друг стал онлайн                  case "8":                      result.Type = VkLongPollMessageType.FriendOnline;                      result.Parameters.Add("user_id"' json[1].Value<string>().Substring(1));                      break;                    //друг стал оффлайн                  case "9":                      result.Type = VkLongPollMessageType.FriendOffline;                      result.Parameters.Add("user_id"' json[1].Value<string>().Substring(1));                      break;                    //один из параметров (состав' тема) беседы был изменен                  case "51":                      result.Type = VkLongPollMessageType.ConversationChange;                      result.Parameters.Add("chat_id"' json[1].Value<string>());                      result.Parameters.Add("self"' json[2].Value<string>() == "1");                      break;                    //пользователь начал набирать текст в диалоге                  case "61":                      result.Type = VkLongPollMessageType.DialogUserTyping;                      result.Parameters.Add("user_id"' json[1].Value<string>());                      break;                  //пользователь начал набирать текст в беседе                  case "62":                      result.Type = VkLongPollMessageType.ConsersationUserTyping;                      result.Parameters.Add("user_id"' json[1].Value<string>());                      result.Parameters.Add("chat_id"' json[2].Value<string>());                      break;                    default:                      result.Type = VkLongPollMessageType.Unknown;                      break;              }
Magic Number,VkLib.Core.Messages,VkLongPollMessage,C:\repos\Stealth2012_meridian\VkLibPortable\Trunk\Core\Messages\VkLongPollMessage.cs,FromJson,The following statement contains a magic number: switch (messageType)              {                  //удаление сообщения с указанным local_id                  case "0":                      result.Type = VkLongPollMessageType.MessageDelete;                      result.Parameters.Add("message_id"' json[1].Value<string>());                      break;                    //замена флагов сообщения                  case "1":                      result.Type = VkLongPollMessageType.MessageUpdate;                      result.Parameters.Add("message_id"' json[1].Value<string>());                      result.Parameters.Add("flags"' json[2].Value<int>());                      break;                    //установка флагов сообщения                  case "2":                      result.Type = VkLongPollMessageType.MessageFlagSet;                      result.Parameters.Add("message_id"' json[1].Value<string>());                      result.Parameters.Add("flags"' json[2].Value<int>());                      if (json.Count > 2)                          result.Parameters.Add("user_id"' json[3].Value<string>());                      break;                    //сброс флагов сообщения                  case "3":                      result.Type = VkLongPollMessageType.MessageFlagReset;                      result.Parameters.Add("message_id"' json[1].Value<string>());                      result.Parameters.Add("flags"' json[2].Value<int>());                      if (json.Count > 2)                          result.Parameters.Add("user_id"' json[3].Value<string>());                      break;                    //добавление нового сообщения                  case "4":                      result.Type = VkLongPollMessageType.MessageAdd;                      var m = new VkMessage();                      m.Id = json[1].Value<long>();                      var flags = json[2].Value<int>();                      var uid = json[3].Value<long>();                      if (uid >= ChatIdMask)                      {                          //беседа                          result.Parameters.Add("conversation"' "1");                          m.ChatId = (uid - ChatIdMask);                      }                      else                      {                          m.UserId = uid;                      }                        m.Date = DateTimeExtensions.UnixTimeStampToDateTime(json[4].Value<double>()).ToLocalTime();                      m.Title = json[5].Value<string>();                      m.Body = json[6].Value<string>();                      result.Parameters.Add("message"' m);                      result.Parameters.Add("flags"' flags);                        //TODO forwards & attachments                      break;                    //друг стал онлайн                  case "8":                      result.Type = VkLongPollMessageType.FriendOnline;                      result.Parameters.Add("user_id"' json[1].Value<string>().Substring(1));                      break;                    //друг стал оффлайн                  case "9":                      result.Type = VkLongPollMessageType.FriendOffline;                      result.Parameters.Add("user_id"' json[1].Value<string>().Substring(1));                      break;                    //один из параметров (состав' тема) беседы был изменен                  case "51":                      result.Type = VkLongPollMessageType.ConversationChange;                      result.Parameters.Add("chat_id"' json[1].Value<string>());                      result.Parameters.Add("self"' json[2].Value<string>() == "1");                      break;                    //пользователь начал набирать текст в диалоге                  case "61":                      result.Type = VkLongPollMessageType.DialogUserTyping;                      result.Parameters.Add("user_id"' json[1].Value<string>());                      break;                  //пользователь начал набирать текст в беседе                  case "62":                      result.Type = VkLongPollMessageType.ConsersationUserTyping;                      result.Parameters.Add("user_id"' json[1].Value<string>());                      result.Parameters.Add("chat_id"' json[2].Value<string>());                      break;                    default:                      result.Type = VkLongPollMessageType.Unknown;                      break;              }
Magic Number,VkLib.Core.Video,VkVideoRequest,C:\repos\Stealth2012_meridian\VkLibPortable\Trunk\Core\Video\VkVideoRequest.cs,Get,The following statement contains a magic number: if (count > 200)                  throw new ArgumentException("Maximum count is 200.");
Magic Number,VkLib.Core.Video,VkVideoRequest,C:\repos\Stealth2012_meridian\VkLibPortable\Trunk\Core\Video\VkVideoRequest.cs,Search,The following statement contains a magic number: if (count > 200)                  throw new ArgumentException("Maximum count is 200.");
Magic Number,VkLib.Core,VkErrorProcessor,C:\repos\Stealth2012_meridian\VkLibPortable\Trunk\Core\VkErrorProcessor.cs,ProcessError,The following statement contains a magic number: if (response["error"] != null)              {                  if (response["error"]["error_code"] != null)                  {                      if (response["error"]["error_code"].Value<string>() == "201")                          throw new VkAccessDeniedException();                      if (response["error"]["error_code"].Value<string>() == "221")                          throw new VkStatusBroadcastDisabledException();                      if (response["error"]["error_code"].Value<string>() == "5")                          throw new VkInvalidTokenException();                      if (response["error"]["error_code"].Value<string>() == "9")                          throw new VkFloodControlException();                      if (response["error"]["error_code"].Value<string>() == "14")                          throw new VkCaptchaNeededException(response["error"]["captcha_sid"].Value<string>()' response["error"]["captcha_img"].Value<string>());                  }                  if (response["error"].HasValues)                  {                      Debug.WriteLine(response["error"]["error_code"].Value<string>() + ":" + response["error"]["error_msg"].Value<string>());                      switch (response["error"]["error_code"].Value<int>())                      {                          case 7:                              throw new VkAccessDeniedException();                      }                  }                  else                      switch (response["error"].Value<string>())                      {                          case "need_captcha":                              throw new VkCaptchaNeededException(response["captcha_sid"].Value<string>()' response["captcha_img"].Value<string>());                          default:                              throw new VkException(response["error"].Value<string>()' response["error"].Value<string>());                      }                  return true;              }
Magic Number,VkLib.Extensions,DateTimeExtensions,C:\repos\Stealth2012_meridian\VkLibPortable\Trunk\Extensions\DateTimeExtensions.cs,UnixTimeStampToDateTime,The following statement contains a magic number: var dtDateTime = new DateTime(1970' 1' 1' 0' 0' 0' 0);
Magic Number,VkLib.Extensions,StreamExtensions,C:\repos\Stealth2012_meridian\VkLibPortable\Trunk\Extensions\StreamExtensions.cs,CopyStream,The following statement contains a magic number: var buffer = new byte[4096];
Missing Default,VkLib.Core.Attachments,VkAttachment,C:\repos\Stealth2012_meridian\VkLibPortable\Trunk\Core\Attachments\VkAttachment.cs,FromJson,The following switch statement is missing a default case: switch (a["type"].Value<string>())                  {                      case "audio":                          result.Add(VkAudioAttachment.FromJson(a["audio"]));                          break;                        case "photo":                          result.Add(VkPhotoAttachment.FromJson(a["photo"]));                          break;                  }
Missing Default,VkLib.Core.Auth,VkOAuthRequest,C:\repos\Stealth2012_meridian\VkLibPortable\Trunk\Core\Auth\VkOAuthRequest.cs,GetAuthUrl,The following switch statement is missing a default case: switch (display)              {                  case VkAuthDisplayType.Page:                      parameters.Add("display"' "page");                      break;                    case VkAuthDisplayType.Popup:                      parameters.Add("display"' "popup");                      break;                    case VkAuthDisplayType.Mobile:                      parameters.Add("display"' "mobile");                      break;              }
Missing Default,VkLib.Core.Auth,VkDirectAuthRequest,C:\repos\Stealth2012_meridian\VkLibPortable\Trunk\Core\Auth\VkDirectAuthRequest.cs,Login,The following switch statement is missing a default case: switch (response["error"].Value<string>())                  {                      case "need_captcha":                          throw new VkCaptchaNeededException(response["captcha_sid"].Value<string>()' response["captcha_img"].Value<string>());                        case "invalid_client":                          throw new VkInvalidClientException();                        case "need_validation":                          throw new VkNeedValidationException() { RedirectUri = new Uri(response["redirect_uri"].Value<string>()) };                  }
Missing Default,VkLib.Core.Friends,VkFriendsRequest,C:\repos\Stealth2012_meridian\VkLibPortable\Trunk\Core\Friends\VkFriendsRequest.cs,Get,The following switch statement is missing a default case: switch (order)              {                  case FriendsOrder.ByName:                      parameters.Add("order"' "name");                      break;                    case FriendsOrder.ByRating:                      parameters.Add("order"' "hints");                      break;                    case FriendsOrder.Random:                      parameters.Add("order"' "random");                      break;              }
Missing Default,VkLib.Core.News,VkNewsEntry,C:\repos\Stealth2012_meridian\VkLibPortable\Trunk\Core\News\VkNewsEntry.cs,FromJson,The following switch statement is missing a default case: switch (a["type"].Value<string>())                      {                          case "audio":                              result.Attachments.Add(VkAudioAttachment.FromJson(a["audio"]));                              break;                            case "photo":                              result.Attachments.Add(VkPhotoAttachment.FromJson(a["photo"]));                              break;                      }
Missing Default,VkLib.Core,VkErrorProcessor,C:\repos\Stealth2012_meridian\VkLibPortable\Trunk\Core\VkErrorProcessor.cs,ProcessError,The following switch statement is missing a default case: switch (response["error"]["error_code"].Value<int>())                      {                          case 7:                              throw new VkAccessDeniedException();                      }
Missing Default,VkLib.Core.Wall,VkWallEntry,C:\repos\Stealth2012_meridian\VkLibPortable\Trunk\Core\Wall\VkWallEntry.cs,FromJson,The following switch statement is missing a default case: switch (a["type"].Value<string>())                      {                          case "audio":                              result.Attachments.Add(VkAudioAttachment.FromJson(a["audio"]));                              break;                            case "photo":                              result.Attachments.Add(VkPhotoAttachment.FromJson(a["photo"]));                              break;                      }
