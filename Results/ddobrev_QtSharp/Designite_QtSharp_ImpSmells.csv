Implementation smell,Namespace,Class,File,Method,Description
Long Method,QtSharp.DocGeneration,Documentation,D:\research\architectureSmells\repos\ddobrev_QtSharp\QtSharp\DocGeneration\Documentation.cs,DocumentFunction,The method has 108 lines of code.
Complex Method,QtSharp.DocGeneration,Documentation,D:\research\architectureSmells\repos\ddobrev_QtSharp\QtSharp\DocGeneration\Documentation.cs,CollectIndices,Cyclomatic complexity of the method is 9
Complex Method,QtSharp.DocGeneration,Documentation,D:\research\architectureSmells\repos\ddobrev_QtSharp\QtSharp\DocGeneration\Documentation.cs,CollectTypesDocumentation,Cyclomatic complexity of the method is 8
Complex Method,QtSharp.DocGeneration,Documentation,D:\research\architectureSmells\repos\ddobrev_QtSharp\QtSharp\DocGeneration\Documentation.cs,DocumentFunction,Cyclomatic complexity of the method is 18
Complex Method,QtSharp.DocGeneration,Documentation,D:\research\architectureSmells\repos\ddobrev_QtSharp\QtSharp\DocGeneration\Documentation.cs,EscapeId,Cyclomatic complexity of the method is 9
Complex Method,QtSharp.DocGeneration,Documentation,D:\research\architectureSmells\repos\ddobrev_QtSharp\QtSharp\DocGeneration\Documentation.cs,DocumentProperty,Cyclomatic complexity of the method is 13
Complex Method,QtSharp.DocGeneration,Documentation,D:\research\architectureSmells\repos\ddobrev_QtSharp\QtSharp\DocGeneration\Documentation.cs,DocumentQtProperty,Cyclomatic complexity of the method is 9
Complex Method,QtSharp.DocGeneration,Documentation,D:\research\architectureSmells\repos\ddobrev_QtSharp\QtSharp\DocGeneration\Documentation.cs,DocumentEnum,Cyclomatic complexity of the method is 11
Complex Method,QtSharp.DocGeneration,Documentation,D:\research\architectureSmells\repos\ddobrev_QtSharp\QtSharp\DocGeneration\Documentation.cs,StripTags,Cyclomatic complexity of the method is 11
Complex Method,QtSharp,GenerateSignalEventsPass,D:\research\architectureSmells\repos\ddobrev_QtSharp\QtSharp\GenerateSignalEventsPass.cs,GenerateSignalEvents,Cyclomatic complexity of the method is 13
Complex Method,QtSharp,GetCommentsFromQtDocsPass,D:\research\architectureSmells\repos\ddobrev_QtSharp\QtSharp\GetCommentsFromQtDocsPass.cs,VisitProperty,Cyclomatic complexity of the method is 10
Complex Method,QtSharp,QtSharp,D:\research\architectureSmells\repos\ddobrev_QtSharp\QtSharp\QtSharp.cs,Setup,Cyclomatic complexity of the method is 13
Long Statement,QtSharp.DocGeneration,Documentation,D:\research\architectureSmells\repos\ddobrev_QtSharp\QtSharp\DocGeneration\Documentation.cs,DocumentFunction,The length of the statement  "            // incredible but we actually have a case of different functions with the same name in headers with the same name at the same line " is 130.
Long Statement,QtSharp,QString,D:\research\architectureSmells\repos\ddobrev_QtSharp\QtSharp\QString.cs,CSharpMarshalToNative,The length of the statement  "            ctx.Before.WriteLine("var __stringPtr{0} = ReferenceEquals({1}' null) ? null : (ushort*) Marshal.StringToHGlobalUni({1}).ToPointer();"' " is 135.
Long Statement,QtSharp,QString,D:\research\architectureSmells\repos\ddobrev_QtSharp\QtSharp\QString.cs,CSharpMarshalToNative,The length of the statement  "            ctx.Before.WriteLine("var __qstring{0} = __stringPtr{0} == null ? null : QtCore.QString.FromUtf16(ref *__stringPtr{0}' {1}.Length);"' " is 133.
Long Statement,QtSharp,QtSharp,D:\research\architectureSmells\repos\ddobrev_QtSharp\QtSharp\QtSharp.cs,Postprocess,The length of the statement  "                var inlinesLibraryPath = Path.Combine(driver.Options.OutputDir' Platform.IsWindows ? "release" : string.Empty' inlinesLibraryFile); " is 131.
Complex Conditional,QtSharp.DocGeneration,Documentation,D:\research\architectureSmells\repos\ddobrev_QtSharp\QtSharp\DocGeneration\Documentation.cs,GetDocumentationNode,The conditional expression  "memberDocumentationNode.ContainsEnumMembers =                  (node.Name == "div" && node.FirstChild.GetAttributeValue("class"' string.Empty) == "valuelist") ||                  (node.Name == "p" && node.GetAttributeValue("class"' string.Empty) == "figCaption")"  is complex.
Complex Conditional,QtSharp.DocGeneration,Documentation,D:\research\architectureSmells\repos\ddobrev_QtSharp\QtSharp\DocGeneration\Documentation.cs,StripTags,The conditional expression  "tagArray.Count < 5 || tagArray[0] != '!' || tagArray[1] != '-' || tagArray[2] != '-' ||                          (tagArray[tagArray.Count - 2] == '-' && tagArray[tagArray.Count - 1] == '-')"  is complex.
Complex Conditional,QtSharp,GenerateEventEventsPass,D:\research\architectureSmells\repos\ddobrev_QtSharp\QtSharp\GenerateEventEventsPass.cs,VisitMethodDecl,The conditional expression  "!method.IsConstructor && (method.Name.EndsWith("Event"' StringComparison.Ordinal) || method.Name == "event") &&                  method.Parameters.Count == 1"  is complex.
Complex Conditional,QtSharp,GenerateSignalEventsPass,D:\research\architectureSmells\repos\ddobrev_QtSharp\QtSharp\GenerateSignalEventsPass.cs,GenerateSignalEvents,The conditional expression  "@event.Parameters.Count > 0 &&                              (@class.Methods.Any(m => m.IsGenerated && m.OriginalName == @event.OriginalName) ||                               @class.Properties.Any(p => p.IsGenerated && p.OriginalName == @event.OriginalName))"  is complex.
Complex Conditional,QtSharp,GenerateSignalEventsPass,D:\research\architectureSmells\repos\ddobrev_QtSharp\QtSharp\GenerateSignalEventsPass.cs,HandleQSignal,The conditional expression  "accessSpecifierDecl.DebugText == "Q_SIGNALS:" &&                      accessSpecifierDecl.LineNumberStart < method.LineNumberStart &&                      (i == @class.Specifiers.Count - 1 || method.LineNumberEnd <= @class.Specifiers[i + 1].LineNumberStart)"  is complex.
Magic Number,QtSharp.DocGeneration,Documentation,D:\research\architectureSmells\repos\ddobrev_QtSharp\QtSharp\DocGeneration\Documentation.cs,GetDocumentationNode,The following statement contains a magic number: codeNode.ParentOfParent.Td.Count <= 2
Magic Number,QtSharp.DocGeneration,Documentation,D:\research\architectureSmells\repos\ddobrev_QtSharp\QtSharp\DocGeneration\Documentation.cs,DocumentFunction,The following statement contains a magic number: function.Namespace.Name == "QByteArray" &&                              function.OriginalName == "qCompress" && @params.Count == 2
Magic Number,QtSharp.DocGeneration,Documentation,D:\research\architectureSmells\repos\ddobrev_QtSharp\QtSharp\DocGeneration\Documentation.cs,DocumentEnum,The following statement contains a magic number: enumMemberDocs.Td.Count > 2
Magic Number,QtSharp.DocGeneration,Documentation,D:\research\architectureSmells\repos\ddobrev_QtSharp\QtSharp\DocGeneration\Documentation.cs,GetFromQch,The following statement contains a magic number: zOutputStream.Write(blob' 4' length - 4);
Magic Number,QtSharp.DocGeneration,Documentation,D:\research\architectureSmells\repos\ddobrev_QtSharp\QtSharp\DocGeneration\Documentation.cs,GetFromQch,The following statement contains a magic number: zOutputStream.Write(blob' 4' length - 4);
Magic Number,QtSharp.DocGeneration,Documentation,D:\research\architectureSmells\repos\ddobrev_QtSharp\QtSharp\DocGeneration\Documentation.cs,StripTags,The following statement contains a magic number: tagArray.Count < 5 || tagArray[0] != '!' || tagArray[1] != '-' || tagArray[2] != '-' ||                          (tagArray[tagArray.Count - 2] == '-' && tagArray[tagArray.Count - 1] == '-')
Magic Number,QtSharp.DocGeneration,Documentation,D:\research\architectureSmells\repos\ddobrev_QtSharp\QtSharp\DocGeneration\Documentation.cs,StripTags,The following statement contains a magic number: tagArray.Count < 5 || tagArray[0] != '!' || tagArray[1] != '-' || tagArray[2] != '-' ||                          (tagArray[tagArray.Count - 2] == '-' && tagArray[tagArray.Count - 1] == '-')
Magic Number,QtSharp.DocGeneration,Documentation,D:\research\architectureSmells\repos\ddobrev_QtSharp\QtSharp\DocGeneration\Documentation.cs,StripTags,The following statement contains a magic number: tagArray.Count < 5 || tagArray[0] != '!' || tagArray[1] != '-' || tagArray[2] != '-' ||                          (tagArray[tagArray.Count - 2] == '-' && tagArray[tagArray.Count - 1] == '-')
Magic Number,QtSharp,GenerateSignalEventsPass,D:\research\architectureSmells\repos\ddobrev_QtSharp\QtSharp\GenerateSignalEventsPass.cs,GenerateSignalEvents,The following statement contains a magic number: argNum == 2
Missing Default,QtSharp.DocGeneration,Documentation,D:\research\architectureSmells\repos\ddobrev_QtSharp\QtSharp\DocGeneration\Documentation.cs,CollectIndices,The following switch statement is missing a default case: switch (xmlReader.Name)                              {                                  case "function":                                      var functionDocumentationNode = GetFunctionDocumentationNode(xmlReader);                                      if (this.functionNodes.ContainsKey(functionDocumentationNode.Name))                                      {                                          this.functionNodes[functionDocumentationNode.Name].Add(functionDocumentationNode);                                      }                                      else                                      {                                          this.functionNodes.Add(functionDocumentationNode.Name' new List<FunctionDocIndexNode> { functionDocumentationNode });                                      }                                      break;                                  case "property":                                      var fullNameDocumentationNode = GetFullNameDocumentationNode(xmlReader);                                      if (this.propertyNodes.ContainsKey(fullNameDocumentationNode.Name))                                      {                                          this.propertyNodes[fullNameDocumentationNode.Name].Add(fullNameDocumentationNode);                                      }                                      else                                      {                                          this.propertyNodes.Add(fullNameDocumentationNode.Name' new List<FullNameDocIndexNode> { fullNameDocumentationNode });                                      }                                      break;                                  case "class":                                      this.classNodes.Add(GetDocumentationNode(xmlReader));                                      break;                                  case "enum":                                      this.enumNodes.Add(GetDocumentationNode(xmlReader));                                      break;                                  case "variable":                                      this.variableNodes.Add(GetDocumentationNode(xmlReader));                                      break;                              }
