Implementation smell,Namespace,Class,File,Method,Description
Long Method,QtSharp.DocGeneration,Documentation,C:\repos\ddobrev_QtSharp\QtSharp\DocGeneration\Documentation.cs,DocumentFunction,The method has 108 lines of code.
Complex Method,QtSharp.DocGeneration,Documentation,C:\repos\ddobrev_QtSharp\QtSharp\DocGeneration\Documentation.cs,CollectTypesDocumentation,Cyclomatic complexity of the method is 8
Complex Method,QtSharp.DocGeneration,Documentation,C:\repos\ddobrev_QtSharp\QtSharp\DocGeneration\Documentation.cs,DocumentFunction,Cyclomatic complexity of the method is 18
Complex Method,QtSharp.DocGeneration,Documentation,C:\repos\ddobrev_QtSharp\QtSharp\DocGeneration\Documentation.cs,DocumentProperty,Cyclomatic complexity of the method is 13
Complex Method,QtSharp.DocGeneration,Documentation,C:\repos\ddobrev_QtSharp\QtSharp\DocGeneration\Documentation.cs,DocumentQtProperty,Cyclomatic complexity of the method is 9
Complex Method,QtSharp.DocGeneration,Documentation,C:\repos\ddobrev_QtSharp\QtSharp\DocGeneration\Documentation.cs,DocumentEnum,Cyclomatic complexity of the method is 10
Complex Method,QtSharp,GenerateSignalEventsPass,C:\repos\ddobrev_QtSharp\QtSharp\GenerateSignalEventsPass.cs,GenerateSignalEvents,Cyclomatic complexity of the method is 12
Complex Method,QtSharp,GetCommentsFromQtDocsPass,C:\repos\ddobrev_QtSharp\QtSharp\GetCommentsFromQtDocsPass.cs,VisitProperty,Cyclomatic complexity of the method is 9
Complex Method,QtSharp,QtSharp,C:\repos\ddobrev_QtSharp\QtSharp\QtSharp.cs,Setup,Cyclomatic complexity of the method is 11
Long Statement,QtSharp.DocGeneration,Documentation,C:\repos\ddobrev_QtSharp\QtSharp\DocGeneration\Documentation.cs,DocumentFunction,The length of the statement  "            // incredible but we actually have a case of different functions with the same name in headers with the same name at the same line " is 130.
Long Statement,QtSharp,QString,C:\repos\ddobrev_QtSharp\QtSharp\QString.cs,CSharpMarshalToNative,The length of the statement  "            ctx.Before.WriteLine("var __stringPtr{0} = ReferenceEquals({1}' null) ? null : (ushort*) Marshal.StringToHGlobalUni({1}).ToPointer();"' " is 135.
Long Statement,QtSharp,QString,C:\repos\ddobrev_QtSharp\QtSharp\QString.cs,CSharpMarshalToNative,The length of the statement  "            ctx.Before.WriteLine("var __qstring{0} = __stringPtr{0} == null ? null : QtCore.QString.FromUtf16(ref *__stringPtr{0}' {1}.Length);"' " is 133.
Long Statement,QtSharp,QtSharp,C:\repos\ddobrev_QtSharp\QtSharp\QtSharp.cs,Postprocess,The length of the statement  "                var inlinesLibraryPath = Path.Combine(driver.Options.OutputDir' Platform.IsWindows ? "release" : string.Empty' inlinesLibraryFile); " is 131.
Complex Conditional,QtSharp.DocGeneration,Documentation,C:\repos\ddobrev_QtSharp\QtSharp\DocGeneration\Documentation.cs,GetDocumentationNode,The conditional expression  "memberDocumentationNode.ContainsEnumMembers =                  (node.Name == "div" && node.FirstChild.GetAttributeValue("class"' string.Empty) == "valuelist") ||                  (node.Name == "p" && node.GetAttributeValue("class"' string.Empty) == "figCaption")"  is complex.
Complex Conditional,QtSharp.DocGeneration,Documentation,C:\repos\ddobrev_QtSharp\QtSharp\DocGeneration\Documentation.cs,StripTags,The conditional expression  "tagArray.Count < 5 || tagArray[0] != '!' || tagArray[1] != '-' || tagArray[2] != '-' ||                          (tagArray[tagArray.Count - 2] == '-' && tagArray[tagArray.Count - 1] == '-')"  is complex.
Complex Conditional,QtSharp,GenerateEventEventsPass,C:\repos\ddobrev_QtSharp\QtSharp\GenerateEventEventsPass.cs,VisitMethodDecl,The conditional expression  "!method.IsConstructor && (method.Name.EndsWith("Event"' StringComparison.Ordinal) || method.Name == "event") &&                  method.Parameters.Count == 1"  is complex.
Complex Conditional,QtSharp,GenerateSignalEventsPass,C:\repos\ddobrev_QtSharp\QtSharp\GenerateSignalEventsPass.cs,GenerateSignalEvents,The conditional expression  "@event.Parameters.Count > 0 &&                              (@class.Methods.Any(m => m.IsGenerated && m.OriginalName == @event.OriginalName) ||                               @class.Properties.Any(p => p.IsGenerated && p.OriginalName == @event.OriginalName))"  is complex.
Complex Conditional,QtSharp,GenerateSignalEventsPass,C:\repos\ddobrev_QtSharp\QtSharp\GenerateSignalEventsPass.cs,HandleQSignal,The conditional expression  "accessSpecifierDecl.DebugText == "Q_SIGNALS:" &&                      accessSpecifierDecl.LineNumberStart < method.LineNumberStart &&                      (i == @class.Specifiers.Count - 1 || method.LineNumberEnd <= @class.Specifiers[i + 1].LineNumberStart)"  is complex.
Magic Number,QtSharp.DocGeneration,Documentation,C:\repos\ddobrev_QtSharp\QtSharp\DocGeneration\Documentation.cs,GetDocumentationNode,The following statement contains a magic number: if (memberDocumentationNode.ContainsEnumMembers =                  (node.Name == "div" && node.FirstChild.GetAttributeValue("class"' string.Empty) == "valuelist") ||                  (node.Name == "p" && node.GetAttributeValue("class"' string.Empty) == "figCaption"))              {                  foreach (var code in node.Descendants("code"))                  {                      var codeNode = GetDocumentationNode(code);                      memberDocumentationNode.Codes.Add(codeNode);                      codeNode.ParentOfParent = GetDocumentationNode(code.ParentNode.ParentNode);                      foreach (var td in code.ParentNode.ParentNode.Descendants("td"))                      {                          codeNode.ParentOfParent.Td.Add(GetDocumentationNode(td));                      }                      if (codeNode.ParentOfParent.Td.Count <= 2)                      {                          codeNode.ParentOfParent.ParentOfParent = memberDocumentationNode;                      }                  }              }
Magic Number,QtSharp.DocGeneration,Documentation,C:\repos\ddobrev_QtSharp\QtSharp\DocGeneration\Documentation.cs,DocumentFunction,The following statement contains a magic number: if (node != null && node.HRef != null)              {                  var link = node.HRef.Split('#');                  var file = link[0];                  if (this.membersDocumentation.ContainsKey(file))                  {                      var id = link[1].Split('-');                      var key = EscapeId(function.IsAmbiguous && node.Access == "private" ? id[0] : link[1]);                      if (this.membersDocumentation[file].ContainsKey(key))                      {                          var docs = this.membersDocumentation[file][key];                          var i = 0;                          // HACK: work around https://bugreports.qt.io/browse/QTBUG-53941                          if (function.Namespace.Name == "QByteArray" &&                              function.OriginalName == "qCompress" && @params.Count == 2)                          {                              docs = this.membersDocumentation[file][key + "-hack"];                          }                          foreach (Match match in regexParameters.Matches(docs[0].InnerHtml))                          {                              // variadic and void "parameters" are invalid                              if (function.IsVariadic && @params.Count == i || match.Groups[1].Value == "void")                                  break;                              var param = csharpSources.SafeIdentifier(match.Groups[1].Value);                              @params[i].Name = param;                              if (function.IsDependent && function is Method && function.Namespace.IsDependent)                              {                                  foreach (var specialization in ((Class) function.Namespace).Specializations)                                  {                                      var specializedFunction = specialization.Methods.First(m => m.InstantiatedFrom == function);                                      specializedFunction.Parameters.Where(p => p.Kind == ParameterKind.Regular).ElementAt(i).Name = param;                                  }                              }                              i++;                          }                          // TODO: create links in the "See Also" section                          function.Comment = new RawComment                          {                              BriefText = StripTags(ConstructDocumentText(docs.Skip(1)))                          };                          if (node.IsObsolete)                          {                              AddObsoleteAttribute(function);                          }                          var @event = function.Namespace.Events.FirstOrDefault(e => e.OriginalDeclaration == function);                          if (@event != null)                          {                              for (i = 0; i < function.Parameters.Count; i++)                              {                                  @event.Parameters[i].Name = function.Parameters[i].Name;                              }                          }                      }                  }              }
Magic Number,QtSharp.DocGeneration,Documentation,C:\repos\ddobrev_QtSharp\QtSharp\DocGeneration\Documentation.cs,DocumentEnum,The following statement contains a magic number: if (node != null)              {                  var link = node.HRef.Split('#');                  var file = link[0];                  if (this.membersDocumentation.ContainsKey(file))                  {                      var key = Regex.Escape(link[1]);                      if (this.membersDocumentation[file].ContainsKey(key))                      {                          var docs = this.membersDocumentation[file][key];                          var enumMembersDocs = new List<MemberDocumentationNode>();                          for (var i = docs.Count - 1; i >= 0; i--)                          {                              var doc = docs[i];                              if (doc.ContainsEnumMembers)                              {                                  enumMembersDocs.Add(doc);                                  docs.RemoveAt(i);                                  // TODO: handle images                                  if (string.IsNullOrWhiteSpace(docs[i - 1].OuterHtml) || string.IsNullOrWhiteSpace(docs[i - 1].InnerText))                                  {                                      docs.RemoveAt(i-- - 1);                                  }                              }                          }                          @enum.Comment = new RawComment { BriefText = StripTags(ConstructDocumentText(docs.Skip(1))) };                          var enumPrefix = @enum.Namespace is TranslationUnit ? "" : (@enum.Namespace.Name + "::");                          foreach (var item in @enum.Items)                          {                              var itemQualifiedName = enumPrefix + item.OriginalName;                              var enumMemberDocs = (from member in enumMembersDocs                                                    from code in member.Codes                                                    where code.InnerText == itemQualifiedName                                                    select code.ParentOfParent).FirstOrDefault();                              if (enumMemberDocs != null)                              {                                  if (enumMemberDocs.Td.Count > 2)                                  {                                      item.Comment = new RawComment                                      {                                          BriefText = StripTags(enumMemberDocs.Td.Last().InnerText).Trim()                                      };                                  }                                  else                                  {                                      enumMemberDocs = enumMemberDocs.ParentOfParent;                                      enumMemberDocs = enumMembersDocs.SkipWhile(n => n != enumMemberDocs).FirstOrDefault(n => n.Name == "p");                                      if (enumMemberDocs != null)                                      {                                          item.Comment = new RawComment { BriefText = enumMemberDocs.InnerText };                                                                              }                                  }                              }                          }                      }                  }              }
Magic Number,QtSharp.DocGeneration,Documentation,C:\repos\ddobrev_QtSharp\QtSharp\DocGeneration\Documentation.cs,GetFromQch,The following statement contains a magic number: using (var sqliteConnection = new SqliteConnection(sqliteConnectionStringBuilder.ConnectionString))              {                  sqliteConnection.Open();                  using (var sqliteCommand = new SqliteCommand(                      "SELECT Name' Data FROM FileNameTable INNER JOIN FileDataTable ON FileNameTable.FileId = FileDataTable.Id " +                      "WHERE Name LIKE '%.html' " +                      "ORDER BY Name"' sqliteConnection))                  {                      using (var sqliteDataReader = sqliteCommand.ExecuteReader())                      {                          var documentation = new Dictionary<string' string>();                          while (sqliteDataReader.Read())                          {                              byte[] blob = new byte[ushort.MaxValue];                              var length = (int) sqliteDataReader.GetBytes(1' 0' blob' 0' blob.Length);                              using (var output = new MemoryStream(length - 4))                              {                                  using (var zOutputStream = new ZOutputStream(output))                                  {                                      zOutputStream.Write(blob' 4' length - 4);                                      zOutputStream.Flush();                                      documentation.Add(sqliteDataReader.GetString(0)'                                                        Encoding.UTF8.GetString(output.ToArray()));                                  }                              }                          }                          return documentation;                      }                  }              }
Magic Number,QtSharp.DocGeneration,Documentation,C:\repos\ddobrev_QtSharp\QtSharp\DocGeneration\Documentation.cs,GetFromQch,The following statement contains a magic number: using (var sqliteConnection = new SqliteConnection(sqliteConnectionStringBuilder.ConnectionString))              {                  sqliteConnection.Open();                  using (var sqliteCommand = new SqliteCommand(                      "SELECT Name' Data FROM FileNameTable INNER JOIN FileDataTable ON FileNameTable.FileId = FileDataTable.Id " +                      "WHERE Name LIKE '%.html' " +                      "ORDER BY Name"' sqliteConnection))                  {                      using (var sqliteDataReader = sqliteCommand.ExecuteReader())                      {                          var documentation = new Dictionary<string' string>();                          while (sqliteDataReader.Read())                          {                              byte[] blob = new byte[ushort.MaxValue];                              var length = (int) sqliteDataReader.GetBytes(1' 0' blob' 0' blob.Length);                              using (var output = new MemoryStream(length - 4))                              {                                  using (var zOutputStream = new ZOutputStream(output))                                  {                                      zOutputStream.Write(blob' 4' length - 4);                                      zOutputStream.Flush();                                      documentation.Add(sqliteDataReader.GetString(0)'                                                        Encoding.UTF8.GetString(output.ToArray()));                                  }                              }                          }                          return documentation;                      }                  }              }
Magic Number,QtSharp.DocGeneration,Documentation,C:\repos\ddobrev_QtSharp\QtSharp\DocGeneration\Documentation.cs,GetFromQch,The following statement contains a magic number: using (var sqliteConnection = new SqliteConnection(sqliteConnectionStringBuilder.ConnectionString))              {                  sqliteConnection.Open();                  using (var sqliteCommand = new SqliteCommand(                      "SELECT Name' Data FROM FileNameTable INNER JOIN FileDataTable ON FileNameTable.FileId = FileDataTable.Id " +                      "WHERE Name LIKE '%.html' " +                      "ORDER BY Name"' sqliteConnection))                  {                      using (var sqliteDataReader = sqliteCommand.ExecuteReader())                      {                          var documentation = new Dictionary<string' string>();                          while (sqliteDataReader.Read())                          {                              byte[] blob = new byte[ushort.MaxValue];                              var length = (int) sqliteDataReader.GetBytes(1' 0' blob' 0' blob.Length);                              using (var output = new MemoryStream(length - 4))                              {                                  using (var zOutputStream = new ZOutputStream(output))                                  {                                      zOutputStream.Write(blob' 4' length - 4);                                      zOutputStream.Flush();                                      documentation.Add(sqliteDataReader.GetString(0)'                                                        Encoding.UTF8.GetString(output.ToArray()));                                  }                              }                          }                          return documentation;                      }                  }              }
Magic Number,QtSharp.DocGeneration,Documentation,C:\repos\ddobrev_QtSharp\QtSharp\DocGeneration\Documentation.cs,StripTags,The following statement contains a magic number: foreach (var character in source)              {                  if (character == '<')                  {                      inside = true;                      continue;                  }                  if (character == '>')                  {                      if (tagArray.Count < 5 || tagArray[0] != '!' || tagArray[1] != '-' || tagArray[2] != '-' ||                          (tagArray[tagArray.Count - 2] == '-' && tagArray[tagArray.Count - 1] == '-'))                      {                          inside = false;                      }                      continue;                  }                  if (inside)                  {                      tagArray.Add(character);                  }                  else                  {                      string tag = new string(tagArray.ToArray());                      if (tag.Contains("/tdtd"))                      {                          array.Add('\t');                      }                      tagArray.Clear();                      switch (character)                      {                          case '&':                              literalBuilder.Append(character);                              break;                          case ';':                              literalBuilder.Append(character);                              var literal = literalBuilder.ToString();                              if (!string.IsNullOrEmpty(literal) && literal != "&#8203;")                              {                                  array.AddRange(literal);                              }                              literalBuilder.Clear();                              break;                          default:                              if (literalBuilder.Length > 0)                              {                                  literalBuilder.Append(character);                              }                              else                              {                                  array.Add(character);                              }                              break;                      }                  }              }
Magic Number,QtSharp.DocGeneration,Documentation,C:\repos\ddobrev_QtSharp\QtSharp\DocGeneration\Documentation.cs,StripTags,The following statement contains a magic number: foreach (var character in source)              {                  if (character == '<')                  {                      inside = true;                      continue;                  }                  if (character == '>')                  {                      if (tagArray.Count < 5 || tagArray[0] != '!' || tagArray[1] != '-' || tagArray[2] != '-' ||                          (tagArray[tagArray.Count - 2] == '-' && tagArray[tagArray.Count - 1] == '-'))                      {                          inside = false;                      }                      continue;                  }                  if (inside)                  {                      tagArray.Add(character);                  }                  else                  {                      string tag = new string(tagArray.ToArray());                      if (tag.Contains("/tdtd"))                      {                          array.Add('\t');                      }                      tagArray.Clear();                      switch (character)                      {                          case '&':                              literalBuilder.Append(character);                              break;                          case ';':                              literalBuilder.Append(character);                              var literal = literalBuilder.ToString();                              if (!string.IsNullOrEmpty(literal) && literal != "&#8203;")                              {                                  array.AddRange(literal);                              }                              literalBuilder.Clear();                              break;                          default:                              if (literalBuilder.Length > 0)                              {                                  literalBuilder.Append(character);                              }                              else                              {                                  array.Add(character);                              }                              break;                      }                  }              }
Magic Number,QtSharp.DocGeneration,Documentation,C:\repos\ddobrev_QtSharp\QtSharp\DocGeneration\Documentation.cs,StripTags,The following statement contains a magic number: foreach (var character in source)              {                  if (character == '<')                  {                      inside = true;                      continue;                  }                  if (character == '>')                  {                      if (tagArray.Count < 5 || tagArray[0] != '!' || tagArray[1] != '-' || tagArray[2] != '-' ||                          (tagArray[tagArray.Count - 2] == '-' && tagArray[tagArray.Count - 1] == '-'))                      {                          inside = false;                      }                      continue;                  }                  if (inside)                  {                      tagArray.Add(character);                  }                  else                  {                      string tag = new string(tagArray.ToArray());                      if (tag.Contains("/tdtd"))                      {                          array.Add('\t');                      }                      tagArray.Clear();                      switch (character)                      {                          case '&':                              literalBuilder.Append(character);                              break;                          case ';':                              literalBuilder.Append(character);                              var literal = literalBuilder.ToString();                              if (!string.IsNullOrEmpty(literal) && literal != "&#8203;")                              {                                  array.AddRange(literal);                              }                              literalBuilder.Clear();                              break;                          default:                              if (literalBuilder.Length > 0)                              {                                  literalBuilder.Append(character);                              }                              else                              {                                  array.Add(character);                              }                              break;                      }                  }              }
Magic Number,QtSharp,GenerateSignalEventsPass,C:\repos\ddobrev_QtSharp\QtSharp\GenerateSignalEventsPass.cs,GenerateSignalEvents,The following statement contains a magic number: foreach (var block in from output in generatorOutput.Outputs                                    from block in output.FindBlocks(BlockKind.Event)                                    select block)              {                  Event @event = (Event) block.Object;                  if (this.events.Contains(@event))                  {                      block.Text.StringBuilder.Clear();                      Class @class = (Class) @event.Namespace;                        int argNum = 1;                      StringBuilder fullNameBuilder = new StringBuilder("global::System.Action");                      foreach (Parameter parameter in @event.Parameters)                      {                          argNum++;                          if (argNum == 2)                          {                              fullNameBuilder.Append('<');                          }                          fullNameBuilder.Append(parameter.Type);                          fullNameBuilder.Append(''');                      }                      if (fullNameBuilder[fullNameBuilder.Length - 1] == ''')                      {                          fullNameBuilder[fullNameBuilder.Length - 1] = '>';                      }                      string signature = string.Format("{0}({1})"' @event.OriginalName'                          string.Join("' "'                              from e in @event.Parameters                              select GetOriginalParameterType(e)));                      Event existing = @class.Events.FirstOrDefault(e => e.OriginalName == @event.OriginalName);                      if (existing != null && existing != @event)                      {                          if (@event.Parameters.Count > 0)                          {                              @event.Name += GetSignalEventSuffix(@event);                          }                          else                          {                              existing.Name += GetSignalEventSuffix(@event);                          }                      }                      else                      {                          if (@event.Parameters.Count > 0 &&                              (@class.Methods.Any(m => m.IsGenerated && m.OriginalName == @event.OriginalName) ||                               @class.Properties.Any(p => p.IsGenerated && p.OriginalName == @event.OriginalName)))                          {                              @event.Name += GetSignalEventSuffix(@event);                          }                      }                      if (@event.OriginalDeclaration.Comment != null)                      {                          block.WriteLine("/// <summary>");                          foreach (string line in HtmlEncoder.HtmlEncode(@event.OriginalDeclaration.Comment.BriefText).Split(                                                      Environment.NewLine.ToCharArray()))                          {                              block.WriteLine("/// <para>{0}</para>"' line);                          }                          block.WriteLine("/// </summary>");                      }                      var finalName = char.ToUpperInvariant(@event.Name[0]) + @event.Name.Substring(1);                      if (@event.Namespace.Declarations.Exists(d => d != @event && d.Name == finalName))                      {                          finalName += "Signal";                      }                      block.WriteLine(string.Format(@"public event {0} {1}  {{      add      {{          ConnectDynamicSlot(this' ""{2}""' value);      }}      remove      {{          DisconnectDynamicSlot(this' ""{2}""' value);      }}  }}"' fullNameBuilder' finalName' signature));                  }              }
Missing Default,QtSharp.DocGeneration,Documentation,C:\repos\ddobrev_QtSharp\QtSharp\DocGeneration\Documentation.cs,CollectIndices,The following switch statement is missing a default case: switch (xmlReader.Name)                              {                                  case "function":                                      var functionDocumentationNode = GetFunctionDocumentationNode(xmlReader);                                      if (this.functionNodes.ContainsKey(functionDocumentationNode.Name))                                      {                                          this.functionNodes[functionDocumentationNode.Name].Add(functionDocumentationNode);                                      }                                      else                                      {                                          this.functionNodes.Add(functionDocumentationNode.Name' new List<FunctionDocIndexNode> { functionDocumentationNode });                                      }                                      break;                                  case "property":                                      var fullNameDocumentationNode = GetFullNameDocumentationNode(xmlReader);                                      if (this.propertyNodes.ContainsKey(fullNameDocumentationNode.Name))                                      {                                          this.propertyNodes[fullNameDocumentationNode.Name].Add(fullNameDocumentationNode);                                      }                                      else                                      {                                          this.propertyNodes.Add(fullNameDocumentationNode.Name' new List<FullNameDocIndexNode> { fullNameDocumentationNode });                                      }                                      break;                                  case "class":                                      this.classNodes.Add(GetDocumentationNode(xmlReader));                                      break;                                  case "enum":                                      this.enumNodes.Add(GetDocumentationNode(xmlReader));                                      break;                                  case "variable":                                      this.variableNodes.Add(GetDocumentationNode(xmlReader));                                      break;                              }
