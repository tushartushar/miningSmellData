Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,AnyExeService,AnyExeService,C:\repos\tckz_AnyExeService\AnyExeService\AnyExeService.cs,CreateRunner,The method has 6 parameters.
Magic Number,AnyExeService,AnyExeService,C:\repos\tckz_AnyExeService\AnyExeService\AnyExeService.cs,AnyExeService,The following statement contains a magic number: this.state.dwServiceType = 16;  
Magic Number,AnyExeService,AnyExeService,C:\repos\tckz_AnyExeService\AnyExeService\AnyExeService.cs,StartRunner,The following statement contains a magic number: try {  	this.runner.Run ();  	var mes = string.Format ("PID={0}: {1}"' this.runner.ProcessId' r.Executable);  	this.EventLog.WriteEntry (mes' EventLogEntryType.Information' 2);  	logger.Info (mes);  }  catch (Exception e) {  	var mes = string.Format ("*** Failed to execute {0}"' r.Executable);  	this.EventLog.WriteEntry (mes' EventLogEntryType.Information' 4);  	logger.Info (mes' e);  	throw;  }  
Magic Number,AnyExeService,AnyExeService,C:\repos\tckz_AnyExeService\AnyExeService\AnyExeService.cs,StartRunner,The following statement contains a magic number: try {  	this.runner.Run ();  	var mes = string.Format ("PID={0}: {1}"' this.runner.ProcessId' r.Executable);  	this.EventLog.WriteEntry (mes' EventLogEntryType.Information' 2);  	logger.Info (mes);  }  catch (Exception e) {  	var mes = string.Format ("*** Failed to execute {0}"' r.Executable);  	this.EventLog.WriteEntry (mes' EventLogEntryType.Information' 4);  	logger.Info (mes' e);  	throw;  }  
Magic Number,AnyExeService,AnyExeService,C:\repos\tckz_AnyExeService\AnyExeService\AnyExeService.cs,StartRunner,The following statement contains a magic number: this.EventLog.WriteEntry (mes' EventLogEntryType.Information' 2);  
Magic Number,AnyExeService,AnyExeService,C:\repos\tckz_AnyExeService\AnyExeService\AnyExeService.cs,StartRunner,The following statement contains a magic number: this.EventLog.WriteEntry (mes' EventLogEntryType.Information' 4);  
Magic Number,AnyExeService,AnyExeService,C:\repos\tckz_AnyExeService\AnyExeService\AnyExeService.cs,CreateRunner,The following statement contains a magic number: newRunner.Exited += (sender' ev) =>  {  	var ec = newRunner.ExitCode;  	var mes = string.Format ("PID={0}: {1} exit={2}"' this.runner.ProcessId' newRunner.Executable' ec);  	this.EventLog.WriteEntry (mes' EventLogEntryType.Information' 3);  	logger.Info (mes);  	this.runner = null;  	if (restartEternal && this.allowRestart) {  		var timer = new Timer () {  			AutoReset = false'  			Enabled = true'  			Interval = 10 * 1000'  		};  		timer.Elapsed += (timeSender' timeEv) =>  {  			if (!this.allowRestart || this.runner != null) {  				return;  			}  			// プロセス再起動  			var nextRunner = this.CreateRunner (newRunnerFunc' restartEternal);  			this.StartRunner (nextRunner);  			timer.Dispose ();  		};  	}  	else {  		this.SetServiceStateWithExitCode (ServiceState.SERVICE_STOPPED' ec);  	}  };  
Magic Number,AnyExeService,AnyExeService,C:\repos\tckz_AnyExeService\AnyExeService\AnyExeService.cs,CreateRunner,The following statement contains a magic number: newRunner.Exited += (sender' ev) =>  {  	var ec = newRunner.ExitCode;  	var mes = string.Format ("PID={0}: {1} exit={2}"' this.runner.ProcessId' newRunner.Executable' ec);  	this.EventLog.WriteEntry (mes' EventLogEntryType.Information' 3);  	logger.Info (mes);  	this.runner = null;  	if (restartEternal && this.allowRestart) {  		var timer = new Timer () {  			AutoReset = false'  			Enabled = true'  			Interval = 10 * 1000'  		};  		timer.Elapsed += (timeSender' timeEv) =>  {  			if (!this.allowRestart || this.runner != null) {  				return;  			}  			// プロセス再起動  			var nextRunner = this.CreateRunner (newRunnerFunc' restartEternal);  			this.StartRunner (nextRunner);  			timer.Dispose ();  		};  	}  	else {  		this.SetServiceStateWithExitCode (ServiceState.SERVICE_STOPPED' ec);  	}  };  
Magic Number,AnyExeService,AnyExeService,C:\repos\tckz_AnyExeService\AnyExeService\AnyExeService.cs,CreateRunner,The following statement contains a magic number: newRunner.Exited += (sender' ev) =>  {  	var ec = newRunner.ExitCode;  	var mes = string.Format ("PID={0}: {1} exit={2}"' this.runner.ProcessId' newRunner.Executable' ec);  	this.EventLog.WriteEntry (mes' EventLogEntryType.Information' 3);  	logger.Info (mes);  	this.runner = null;  	if (restartEternal && this.allowRestart) {  		var timer = new Timer () {  			AutoReset = false'  			Enabled = true'  			Interval = 10 * 1000'  		};  		timer.Elapsed += (timeSender' timeEv) =>  {  			if (!this.allowRestart || this.runner != null) {  				return;  			}  			// プロセス再起動  			var nextRunner = this.CreateRunner (newRunnerFunc' restartEternal);  			this.StartRunner (nextRunner);  			timer.Dispose ();  		};  	}  	else {  		this.SetServiceStateWithExitCode (ServiceState.SERVICE_STOPPED' ec);  	}  };  
Magic Number,AnyExeService,AnyExeService,C:\repos\tckz_AnyExeService\AnyExeService\AnyExeService.cs,CreateRunner,The following statement contains a magic number: this.EventLog.WriteEntry (mes' EventLogEntryType.Information' 3);  
Magic Number,AnyExeService,AnyExeService,C:\repos\tckz_AnyExeService\AnyExeService\AnyExeService.cs,CreateRunner,The following statement contains a magic number: if (restartEternal && this.allowRestart) {  	var timer = new Timer () {  		AutoReset = false'  		Enabled = true'  		Interval = 10 * 1000'  	};  	timer.Elapsed += (timeSender' timeEv) =>  {  		if (!this.allowRestart || this.runner != null) {  			return;  		}  		// プロセス再起動  		var nextRunner = this.CreateRunner (newRunnerFunc' restartEternal);  		this.StartRunner (nextRunner);  		timer.Dispose ();  	};  }  else {  	this.SetServiceStateWithExitCode (ServiceState.SERVICE_STOPPED' ec);  }  
Magic Number,AnyExeService,AnyExeService,C:\repos\tckz_AnyExeService\AnyExeService\AnyExeService.cs,CreateRunner,The following statement contains a magic number: if (restartEternal && this.allowRestart) {  	var timer = new Timer () {  		AutoReset = false'  		Enabled = true'  		Interval = 10 * 1000'  	};  	timer.Elapsed += (timeSender' timeEv) =>  {  		if (!this.allowRestart || this.runner != null) {  			return;  		}  		// プロセス再起動  		var nextRunner = this.CreateRunner (newRunnerFunc' restartEternal);  		this.StartRunner (nextRunner);  		timer.Dispose ();  	};  }  else {  	this.SetServiceStateWithExitCode (ServiceState.SERVICE_STOPPED' ec);  }  
Magic Number,AnyExeService,AnyExeService,C:\repos\tckz_AnyExeService\AnyExeService\AnyExeService.cs,SetServiceStateWithExitCode,The following statement contains a magic number: this.state.dwWin32ExitCode = 1066;  
