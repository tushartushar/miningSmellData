Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Entitas.VisualDebugging.Unity.Editor,DebugSystemsInspector,C:\repos\sschmid_Entitas-CSharp\Addons\Entitas.VisualDebugging.Unity.Editor\Entitas.VisualDebugging.Unity.Editor\DebugSystems\DebugSystemsInspector.cs,drawSystemList,Cyclomatic complexity of the method is 11
Complex Method,Entitas.VisualDebugging.Unity.Editor,DebugSystemsInspector,C:\repos\sschmid_Entitas-CSharp\Addons\Entitas.VisualDebugging.Unity.Editor\Entitas.VisualDebugging.Unity.Editor\DebugSystems\DebugSystemsInspector.cs,drawSystemInfos,Cyclomatic complexity of the method is 12
Complex Method,Entitas.VisualDebugging.Unity.Editor,EntityDrawer,C:\repos\sschmid_Entitas-CSharp\Addons\Entitas.VisualDebugging.Unity.Editor\Entitas.VisualDebugging.Unity.Editor\Entity\Entity\EntityDrawer.cs,DrawObjectMember,Cyclomatic complexity of the method is 9
Complex Method,Entitas.VisualDebugging.Unity.Editor,ArrayTypeDrawer,C:\repos\sschmid_Entitas-CSharp\Addons\Entitas.VisualDebugging.Unity.Editor\Entitas.VisualDebugging.Unity.Editor\Entity\TypeDrawer\ArrayTypeDrawer.cs,drawEditActions,Cyclomatic complexity of the method is 8
Complex Method,Entitas.VisualDebugging.Unity.Editor,DictionaryTypeDrawer,C:\repos\sschmid_Entitas-CSharp\Addons\Entitas.VisualDebugging.Unity.Editor\Entitas.VisualDebugging.Unity.Editor\Entity\TypeDrawer\DictionaryTypeDrawer.cs,DrawAndGetNewValue,Cyclomatic complexity of the method is 10
Complex Method,Entitas.VisualDebugging.Unity.Editor,HashSetTypeDrawer,C:\repos\sschmid_Entitas-CSharp\Addons\Entitas.VisualDebugging.Unity.Editor\Entitas.VisualDebugging.Unity.Editor\Entity\TypeDrawer\HashSetTypeDrawer.cs,DrawAndGetNewValue,Cyclomatic complexity of the method is 9
Complex Method,Entitas.VisualDebugging.Unity.Editor,ListTypeDrawer,C:\repos\sschmid_Entitas-CSharp\Addons\Entitas.VisualDebugging.Unity.Editor\Entitas.VisualDebugging.Unity.Editor\Entity\TypeDrawer\ListTypeDrawer.cs,drawEditActions,Cyclomatic complexity of the method is 8
Long Parameter List,Entitas.VisualDebugging.Unity.Editor,EntityDrawer,C:\repos\sschmid_Entitas-CSharp\Addons\Entitas.VisualDebugging.Unity.Editor\Entitas.VisualDebugging.Unity.Editor\Entity\Entity\EntityDrawer.cs,DrawComponent,The method has 6 parameters. Parameters: unfoldedComponents' componentMemberSearch' context' entity' index' component
Long Parameter List,Entitas.VisualDebugging.Unity.Editor,EntityDrawer,C:\repos\sschmid_Entitas-CSharp\Addons\Entitas.VisualDebugging.Unity.Editor\Entitas.VisualDebugging.Unity.Editor\Entity\Entity\EntityDrawer.cs,DrawObjectMember,The method has 5 parameters. Parameters: memberType' memberName' value' target' setValue
Long Parameter List,Entitas.VisualDebugging.Unity.Editor,ArrayTypeDrawer,C:\repos\sschmid_Entitas-CSharp\Addons\Entitas.VisualDebugging.Unity.Editor\Entitas.VisualDebugging.Unity.Editor\Entity\TypeDrawer\ArrayTypeDrawer.cs,drawRank1,The method has 5 parameters. Parameters: array' memberName' elementType' indent' target
Long Identifier,Entitas.VisualDebugging.Unity.Editor,EntityDrawer,C:\repos\sschmid_Entitas-CSharp\Addons\Entitas.VisualDebugging.Unity.Editor\Entitas.VisualDebugging.Unity.Editor\Entity\Entity\EntityDrawer.cs,,The length of the parameter DEFAULT_INSTANCE_CREATOR_TEMPLATE_FORMAT is 40.
Long Identifier,Entitas.VisualDebugging.Unity.Editor,EntityDrawer,C:\repos\sschmid_Entitas-CSharp\Addons\Entitas.VisualDebugging.Unity.Editor\Entitas.VisualDebugging.Unity.Editor\Entity\Entity\EntityDrawer.cs,,The length of the parameter _contextToComponentMemberSearch is 31.
Long Identifier,Entitas.VisualDebugging.Unity.Editor,VisualDebuggingConfig,C:\repos\sschmid_Entitas-CSharp\Addons\Entitas.VisualDebugging.Unity.Editor\Entitas.VisualDebugging.Unity.Editor\VisualDebuggingConfig.cs,,The length of the parameter DEFAULT_INSTANCE_CREATOR_FOLDER_PATH_KEY is 40.
Long Identifier,Entitas.VisualDebugging.Unity.Editor,VisualDebuggingPreferencesDrawer,C:\repos\sschmid_Entitas-CSharp\Addons\Entitas.VisualDebugging.Unity.Editor\Entitas.VisualDebugging.Unity.Editor\VisualDebuggingPreferencesDrawer.cs,,The length of the parameter ENTITAS_DISABLE_VISUAL_DEBUGGING is 32.
Long Identifier,Entitas.VisualDebugging.Unity.Editor,VisualDebuggingPreferencesDrawer,C:\repos\sschmid_Entitas-CSharp\Addons\Entitas.VisualDebugging.Unity.Editor\Entitas.VisualDebugging.Unity.Editor\VisualDebuggingPreferencesDrawer.cs,,The length of the parameter ENTITAS_DISABLE_DEEP_PROFILING is 30.
Long Statement,Entitas.VisualDebugging.Unity.Editor,ContextObserverInspector,C:\repos\sschmid_Entitas-CSharp\Addons\Entitas.VisualDebugging.Unity.Editor\Entitas.VisualDebugging.Unity.Editor\ContextObserver\ContextObserverInspector.cs,OnInspectorGUI,The length of the statement  "                    EditorGUILayout.HelpBox("WARNING: There are retained entities.\nDid you call entity.Retain(owner) and forgot to call entity.Release(owner)?"' MessageType.Warning); " is 163.
Long Statement,Entitas.VisualDebugging.Unity.Editor,DebugSystemsInspector,C:\repos\sschmid_Entitas-CSharp\Addons\Entitas.VisualDebugging.Unity.Editor\Entitas.VisualDebugging.Unity.Editor\DebugSystems\DebugSystemsInspector.cs,drawSystemList,The length of the statement  "                        DebugSystems.avgResetInterval = (AvgResetInterval)EditorGUILayout.EnumPopup("Reset average duration Ã˜"' DebugSystems.avgResetInterval); " is 135.
Long Statement,Entitas.VisualDebugging.Unity.Editor,DebugSystemsInspector,C:\repos\sschmid_Entitas-CSharp\Addons\Entitas.VisualDebugging.Unity.Editor\Entitas.VisualDebugging.Unity.Editor\DebugSystems\DebugSystemsInspector.cs,drawSystemInfos,The length of the statement  "                                EditorGUILayout.LabelField(systemInfo.systemName' systemInfo.initializationDuration.ToString()' getSystemStyle(systemInfo' SystemInterfaceFlags.IInitializeSystem)); " is 164.
Long Statement,Entitas.VisualDebugging.Unity.Editor,DebugSystemsInspector,C:\repos\sschmid_Entitas-CSharp\Addons\Entitas.VisualDebugging.Unity.Editor\Entitas.VisualDebugging.Unity.Editor\DebugSystems\DebugSystemsInspector.cs,drawSystemInfos,The length of the statement  "                                EditorGUILayout.LabelField(systemInfo.systemName' avgE + minE + maxE' getSystemStyle(systemInfo' SystemInterfaceFlags.IExecuteSystem)); " is 135.
Long Statement,Entitas.VisualDebugging.Unity.Editor,DebugSystemsInspector,C:\repos\sschmid_Entitas-CSharp\Addons\Entitas.VisualDebugging.Unity.Editor\Entitas.VisualDebugging.Unity.Editor\DebugSystems\DebugSystemsInspector.cs,drawSystemInfos,The length of the statement  "                                EditorGUILayout.LabelField(systemInfo.systemName' avgC + minC + maxC' getSystemStyle(systemInfo' SystemInterfaceFlags.ICleanupSystem)); " is 135.
Long Statement,Entitas.VisualDebugging.Unity.Editor,DebugSystemsInspector,C:\repos\sschmid_Entitas-CSharp\Addons\Entitas.VisualDebugging.Unity.Editor\Entitas.VisualDebugging.Unity.Editor\DebugSystems\DebugSystemsInspector.cs,drawSystemInfos,The length of the statement  "                                EditorGUILayout.LabelField(systemInfo.systemName' systemInfo.teardownDuration.ToString()' getSystemStyle(systemInfo' SystemInterfaceFlags.ITearDownSystem)); " is 156.
Long Statement,Entitas.VisualDebugging.Unity.Editor,DebugSystemsInspector,C:\repos\sschmid_Entitas-CSharp\Addons\Entitas.VisualDebugging.Unity.Editor\Entitas.VisualDebugging.Unity.Editor\DebugSystems\DebugSystemsInspector.cs,getSystemStyle,The length of the statement  "            if (systemFlag == SystemInterfaceFlags.IExecuteSystem && systemInfo.averageExecutionDuration >= _systemWarningThreshold) { " is 122.
Long Statement,Entitas.VisualDebugging.Unity.Editor,DebugSystemsInspector,C:\repos\sschmid_Entitas-CSharp\Addons\Entitas.VisualDebugging.Unity.Editor\Entitas.VisualDebugging.Unity.Editor\DebugSystems\DebugSystemsInspector.cs,getSystemStyle,The length of the statement  "            if (systemFlag == SystemInterfaceFlags.ICleanupSystem && systemInfo.averageCleanupDuration >= _systemWarningThreshold) { " is 120.
Long Statement,Entitas.VisualDebugging.Unity.Editor,EntityDrawer,C:\repos\sschmid_Entitas-CSharp\Addons\Entitas.VisualDebugging.Unity.Editor\Entitas.VisualDebugging.Unity.Editor\Entity\Entity\EntityDrawer.cs,DrawObjectMember,The length of the statement  "                    var shouldDraw = !targetType.ImplementsInterface<IComponent>() || !Attribute.IsDefined(targetType' typeof(DontDrawComponentAttribute)); " is 135.
Long Statement,Entitas.VisualDebugging.Unity.Editor,ArrayTypeDrawer,C:\repos\sschmid_Entitas-CSharp\Addons\Entitas.VisualDebugging.Unity.Editor\Entitas.VisualDebugging.Unity.Editor\Entity\TypeDrawer\ArrayTypeDrawer.cs,drawRank2,The length of the statement  "                    EntityDrawer.DrawObjectMember(elementType' memberName + "[" + localIndex1 + "' " + localIndex2 + "]"' array.GetValue(localIndex1' localIndex2)' " is 143.
Long Statement,Entitas.VisualDebugging.Unity.Editor,ArrayTypeDrawer,C:\repos\sschmid_Entitas-CSharp\Addons\Entitas.VisualDebugging.Unity.Editor\Entitas.VisualDebugging.Unity.Editor\Entity\TypeDrawer\ArrayTypeDrawer.cs,drawRank3,The length of the statement  "                        EntityDrawer.DrawObjectMember(elementType' memberName + "[" + localIndex1 + "' " + localIndex2 + " '" + localIndex3 + "]"' array.GetValue(localIndex1' localIndex2' localIndex3)' " is 177.
Long Statement,Entitas.VisualDebugging.Unity.Editor,VisualDebuggingPreferencesDrawer,C:\repos\sschmid_Entitas-CSharp\Addons\Entitas.VisualDebugging.Unity.Editor\Entitas.VisualDebugging.Unity.Editor\VisualDebuggingPreferencesDrawer.cs,drawContent,The length of the statement  "            _visualDebuggingConfig.systemWarningThreshold = EditorGUILayout.IntField("System Warning Threshold"' _visualDebuggingConfig.systemWarningThreshold); " is 148.
Magic Number,Entitas.VisualDebugging.Unity.Editor,ContextObserverInspector,C:\repos\sschmid_Entitas-CSharp\Addons\Entitas.VisualDebugging.Unity.Editor\Entitas.VisualDebugging.Unity.Editor\ContextObserver\ContextObserverInspector.cs,OnInspectorGUI,The following statement contains a magic number: if (groups.Length != 0) {                  EditorLayout.BeginVerticalBox();                  {                      EditorGUILayout.LabelField("Groups (" + groups.Length + ")"' EditorStyles.boldLabel);                      foreach (var group in groups.OrderByDescending(g => g.count)) {                          EditorGUILayout.BeginHorizontal();                          {                              EditorGUILayout.LabelField(group.ToString());                              EditorGUILayout.LabelField(group.count.ToString()' GUILayout.Width(48));                          }                          EditorGUILayout.EndHorizontal();                      }                  }                  EditorLayout.EndVerticalBox();              }
Magic Number,Entitas.VisualDebugging.Unity.Editor,DebugSystemsInspector,C:\repos\sschmid_Entitas-CSharp\Addons\Entitas.VisualDebugging.Unity.Editor\Entitas.VisualDebugging.Unity.Editor\DebugSystems\DebugSystemsInspector.cs,drawSystemList,The following statement contains a magic number: if (_showSystemsList) {                  EditorLayout.BeginSectionContent();                  {                      EditorGUILayout.BeginHorizontal();                      {                          DebugSystems.avgResetInterval = (AvgResetInterval)EditorGUILayout.EnumPopup("Reset average duration Ã˜"' DebugSystems.avgResetInterval);                          if (GUILayout.Button("Reset Ã˜ now"' EditorStyles.miniButton' GUILayout.Width(88))) {                              systems.ResetDurations();                          }                      }                      EditorGUILayout.EndHorizontal();                        _threshold = EditorGUILayout.Slider("Threshold Ã˜ ms"' _threshold' 0f' 33f);                        _hideEmptySystems = EditorGUILayout.Toggle("Hide empty systems"' _hideEmptySystems);                      EditorGUILayout.Space();                        EditorGUILayout.BeginHorizontal();                      {                          _systemSortMethod = (SortMethod)EditorGUILayout.EnumPopup(_systemSortMethod' EditorStyles.popup' GUILayout.Width(150));                          _systemNameSearchString = EditorLayout.SearchTextField(_systemNameSearchString);                      }                      EditorGUILayout.EndHorizontal();                        EditorGUILayout.Space();                        _showInitializeSystems = EditorLayout.DrawSectionHeaderToggle("Initialize Systems"' _showInitializeSystems);                      if (_showInitializeSystems && shouldShowSystems(systems' SystemInterfaceFlags.IInitializeSystem)) {                          EditorLayout.BeginSectionContent();                          {                              var systemsDrawn = drawSystemInfos(systems' SystemInterfaceFlags.IInitializeSystem);                              if (systemsDrawn == 0) {                                  EditorGUILayout.LabelField(string.Empty);                              }                          }                          EditorLayout.EndSectionContent();                      }                        _showExecuteSystems = EditorLayout.DrawSectionHeaderToggle("Execute Systems"' _showExecuteSystems);                      if (_showExecuteSystems && shouldShowSystems(systems' SystemInterfaceFlags.IExecuteSystem)) {                          EditorLayout.BeginSectionContent();                          {                              var systemsDrawn = drawSystemInfos(systems' SystemInterfaceFlags.IExecuteSystem);                              if (systemsDrawn == 0) {                                  EditorGUILayout.LabelField(string.Empty);                              }                          }                          EditorLayout.EndSectionContent();                      }                        _showCleanupSystems = EditorLayout.DrawSectionHeaderToggle("Cleanup Systems"' _showCleanupSystems);                      if (_showCleanupSystems && shouldShowSystems(systems' SystemInterfaceFlags.ICleanupSystem)) {                          EditorLayout.BeginSectionContent();                          {                              var systemsDrawn = drawSystemInfos(systems' SystemInterfaceFlags.ICleanupSystem);                              if (systemsDrawn == 0) {                                  EditorGUILayout.LabelField(string.Empty);                              }                          }                          EditorLayout.EndSectionContent();                      }                        _showTearDownSystems = EditorLayout.DrawSectionHeaderToggle("TearDown Systems"' _showTearDownSystems);                      if (_showTearDownSystems && shouldShowSystems(systems' SystemInterfaceFlags.ITearDownSystem)) {                          EditorLayout.BeginSectionContent();                          {                              var systemsDrawn = drawSystemInfos(systems' SystemInterfaceFlags.ITearDownSystem);                              if (systemsDrawn == 0) {                                  EditorGUILayout.LabelField(string.Empty);                              }                          }                          EditorLayout.EndSectionContent();                      }                  }                  EditorLayout.EndSectionContent();              }
Magic Number,Entitas.VisualDebugging.Unity.Editor,DebugSystemsInspector,C:\repos\sschmid_Entitas-CSharp\Addons\Entitas.VisualDebugging.Unity.Editor\Entitas.VisualDebugging.Unity.Editor\DebugSystems\DebugSystemsInspector.cs,drawSystemList,The following statement contains a magic number: if (_showSystemsList) {                  EditorLayout.BeginSectionContent();                  {                      EditorGUILayout.BeginHorizontal();                      {                          DebugSystems.avgResetInterval = (AvgResetInterval)EditorGUILayout.EnumPopup("Reset average duration Ã˜"' DebugSystems.avgResetInterval);                          if (GUILayout.Button("Reset Ã˜ now"' EditorStyles.miniButton' GUILayout.Width(88))) {                              systems.ResetDurations();                          }                      }                      EditorGUILayout.EndHorizontal();                        _threshold = EditorGUILayout.Slider("Threshold Ã˜ ms"' _threshold' 0f' 33f);                        _hideEmptySystems = EditorGUILayout.Toggle("Hide empty systems"' _hideEmptySystems);                      EditorGUILayout.Space();                        EditorGUILayout.BeginHorizontal();                      {                          _systemSortMethod = (SortMethod)EditorGUILayout.EnumPopup(_systemSortMethod' EditorStyles.popup' GUILayout.Width(150));                          _systemNameSearchString = EditorLayout.SearchTextField(_systemNameSearchString);                      }                      EditorGUILayout.EndHorizontal();                        EditorGUILayout.Space();                        _showInitializeSystems = EditorLayout.DrawSectionHeaderToggle("Initialize Systems"' _showInitializeSystems);                      if (_showInitializeSystems && shouldShowSystems(systems' SystemInterfaceFlags.IInitializeSystem)) {                          EditorLayout.BeginSectionContent();                          {                              var systemsDrawn = drawSystemInfos(systems' SystemInterfaceFlags.IInitializeSystem);                              if (systemsDrawn == 0) {                                  EditorGUILayout.LabelField(string.Empty);                              }                          }                          EditorLayout.EndSectionContent();                      }                        _showExecuteSystems = EditorLayout.DrawSectionHeaderToggle("Execute Systems"' _showExecuteSystems);                      if (_showExecuteSystems && shouldShowSystems(systems' SystemInterfaceFlags.IExecuteSystem)) {                          EditorLayout.BeginSectionContent();                          {                              var systemsDrawn = drawSystemInfos(systems' SystemInterfaceFlags.IExecuteSystem);                              if (systemsDrawn == 0) {                                  EditorGUILayout.LabelField(string.Empty);                              }                          }                          EditorLayout.EndSectionContent();                      }                        _showCleanupSystems = EditorLayout.DrawSectionHeaderToggle("Cleanup Systems"' _showCleanupSystems);                      if (_showCleanupSystems && shouldShowSystems(systems' SystemInterfaceFlags.ICleanupSystem)) {                          EditorLayout.BeginSectionContent();                          {                              var systemsDrawn = drawSystemInfos(systems' SystemInterfaceFlags.ICleanupSystem);                              if (systemsDrawn == 0) {                                  EditorGUILayout.LabelField(string.Empty);                              }                          }                          EditorLayout.EndSectionContent();                      }                        _showTearDownSystems = EditorLayout.DrawSectionHeaderToggle("TearDown Systems"' _showTearDownSystems);                      if (_showTearDownSystems && shouldShowSystems(systems' SystemInterfaceFlags.ITearDownSystem)) {                          EditorLayout.BeginSectionContent();                          {                              var systemsDrawn = drawSystemInfos(systems' SystemInterfaceFlags.ITearDownSystem);                              if (systemsDrawn == 0) {                                  EditorGUILayout.LabelField(string.Empty);                              }                          }                          EditorLayout.EndSectionContent();                      }                  }                  EditorLayout.EndSectionContent();              }
Magic Number,Entitas.VisualDebugging.Unity.Editor,DebugSystemsInspector,C:\repos\sschmid_Entitas-CSharp\Addons\Entitas.VisualDebugging.Unity.Editor\Entitas.VisualDebugging.Unity.Editor\DebugSystems\DebugSystemsInspector.cs,drawSystemInfos,The following statement contains a magic number: foreach (var systemInfo in systemInfos) {                  var debugSystems = systemInfo.system as DebugSystems;                  if (debugSystems != null) {                      if (!shouldShowSystems(debugSystems' type)) {                          continue;                      }                  }                    if (EditorLayout.MatchesSearchString(systemInfo.systemName.ToLower()' _systemNameSearchString.ToLower())) {                      EditorGUILayout.BeginHorizontal();                      {                          var indent = EditorGUI.indentLevel;                          EditorGUI.indentLevel = 0;                            var wasActive = systemInfo.isActive;                          if (systemInfo.areAllParentsActive) {                              systemInfo.isActive = EditorGUILayout.Toggle(systemInfo.isActive' GUILayout.Width(20));                          } else {                              EditorGUI.BeginDisabledGroup(true);                              {                                  EditorGUILayout.Toggle(false' GUILayout.Width(20));                              }                          }                          EditorGUI.EndDisabledGroup();                            EditorGUI.indentLevel = indent;                            if (systemInfo.isActive != wasActive) {                              var reactiveSystem = systemInfo.system as IReactiveSystem;                              if (reactiveSystem != null) {                                  if (systemInfo.isActive) {                                      reactiveSystem.Activate();                                  } else {                                      reactiveSystem.Deactivate();                                  }                              }                          }                            switch (type) {                              case SystemInterfaceFlags.IInitializeSystem:                                  EditorGUILayout.LabelField(systemInfo.systemName' systemInfo.initializationDuration.ToString()' getSystemStyle(systemInfo' SystemInterfaceFlags.IInitializeSystem));                                  break;                              case SystemInterfaceFlags.IExecuteSystem:                                  var avgE = string.Format("Ã˜ {0:00.000}"' systemInfo.averageExecutionDuration).PadRight(12);                                  var minE = string.Format("â–¼ {0:00.000}"' systemInfo.minExecutionDuration).PadRight(12);                                  var maxE = string.Format("â–² {0:00.000}"' systemInfo.maxExecutionDuration);                                  EditorGUILayout.LabelField(systemInfo.systemName' avgE + minE + maxE' getSystemStyle(systemInfo' SystemInterfaceFlags.IExecuteSystem));                                  break;                              case SystemInterfaceFlags.ICleanupSystem:                                  var avgC = string.Format("Ã˜ {0:00.000}"' systemInfo.averageCleanupDuration).PadRight(12);                                  var minC = string.Format("â–¼ {0:00.000}"' systemInfo.minCleanupDuration).PadRight(12);                                  var maxC = string.Format("â–² {0:00.000}"' systemInfo.maxCleanupDuration);                                  EditorGUILayout.LabelField(systemInfo.systemName' avgC + minC + maxC' getSystemStyle(systemInfo' SystemInterfaceFlags.ICleanupSystem));                                  break;                              case SystemInterfaceFlags.ITearDownSystem:                                  EditorGUILayout.LabelField(systemInfo.systemName' systemInfo.teardownDuration.ToString()' getSystemStyle(systemInfo' SystemInterfaceFlags.ITearDownSystem));                                  break;                          }                      }                      EditorGUILayout.EndHorizontal();                        systemsDrawn += 1;                  }                    var debugSystem = systemInfo.system as DebugSystems;                  if (debugSystem != null) {                      var indent = EditorGUI.indentLevel;                      EditorGUI.indentLevel += 1;                      systemsDrawn += drawSystemInfos(debugSystem' type);                      EditorGUI.indentLevel = indent;                  }              }
Magic Number,Entitas.VisualDebugging.Unity.Editor,DebugSystemsInspector,C:\repos\sschmid_Entitas-CSharp\Addons\Entitas.VisualDebugging.Unity.Editor\Entitas.VisualDebugging.Unity.Editor\DebugSystems\DebugSystemsInspector.cs,drawSystemInfos,The following statement contains a magic number: foreach (var systemInfo in systemInfos) {                  var debugSystems = systemInfo.system as DebugSystems;                  if (debugSystems != null) {                      if (!shouldShowSystems(debugSystems' type)) {                          continue;                      }                  }                    if (EditorLayout.MatchesSearchString(systemInfo.systemName.ToLower()' _systemNameSearchString.ToLower())) {                      EditorGUILayout.BeginHorizontal();                      {                          var indent = EditorGUI.indentLevel;                          EditorGUI.indentLevel = 0;                            var wasActive = systemInfo.isActive;                          if (systemInfo.areAllParentsActive) {                              systemInfo.isActive = EditorGUILayout.Toggle(systemInfo.isActive' GUILayout.Width(20));                          } else {                              EditorGUI.BeginDisabledGroup(true);                              {                                  EditorGUILayout.Toggle(false' GUILayout.Width(20));                              }                          }                          EditorGUI.EndDisabledGroup();                            EditorGUI.indentLevel = indent;                            if (systemInfo.isActive != wasActive) {                              var reactiveSystem = systemInfo.system as IReactiveSystem;                              if (reactiveSystem != null) {                                  if (systemInfo.isActive) {                                      reactiveSystem.Activate();                                  } else {                                      reactiveSystem.Deactivate();                                  }                              }                          }                            switch (type) {                              case SystemInterfaceFlags.IInitializeSystem:                                  EditorGUILayout.LabelField(systemInfo.systemName' systemInfo.initializationDuration.ToString()' getSystemStyle(systemInfo' SystemInterfaceFlags.IInitializeSystem));                                  break;                              case SystemInterfaceFlags.IExecuteSystem:                                  var avgE = string.Format("Ã˜ {0:00.000}"' systemInfo.averageExecutionDuration).PadRight(12);                                  var minE = string.Format("â–¼ {0:00.000}"' systemInfo.minExecutionDuration).PadRight(12);                                  var maxE = string.Format("â–² {0:00.000}"' systemInfo.maxExecutionDuration);                                  EditorGUILayout.LabelField(systemInfo.systemName' avgE + minE + maxE' getSystemStyle(systemInfo' SystemInterfaceFlags.IExecuteSystem));                                  break;                              case SystemInterfaceFlags.ICleanupSystem:                                  var avgC = string.Format("Ã˜ {0:00.000}"' systemInfo.averageCleanupDuration).PadRight(12);                                  var minC = string.Format("â–¼ {0:00.000}"' systemInfo.minCleanupDuration).PadRight(12);                                  var maxC = string.Format("â–² {0:00.000}"' systemInfo.maxCleanupDuration);                                  EditorGUILayout.LabelField(systemInfo.systemName' avgC + minC + maxC' getSystemStyle(systemInfo' SystemInterfaceFlags.ICleanupSystem));                                  break;                              case SystemInterfaceFlags.ITearDownSystem:                                  EditorGUILayout.LabelField(systemInfo.systemName' systemInfo.teardownDuration.ToString()' getSystemStyle(systemInfo' SystemInterfaceFlags.ITearDownSystem));                                  break;                          }                      }                      EditorGUILayout.EndHorizontal();                        systemsDrawn += 1;                  }                    var debugSystem = systemInfo.system as DebugSystems;                  if (debugSystem != null) {                      var indent = EditorGUI.indentLevel;                      EditorGUI.indentLevel += 1;                      systemsDrawn += drawSystemInfos(debugSystem' type);                      EditorGUI.indentLevel = indent;                  }              }
Magic Number,Entitas.VisualDebugging.Unity.Editor,DebugSystemsInspector,C:\repos\sschmid_Entitas-CSharp\Addons\Entitas.VisualDebugging.Unity.Editor\Entitas.VisualDebugging.Unity.Editor\DebugSystems\DebugSystemsInspector.cs,drawSystemInfos,The following statement contains a magic number: foreach (var systemInfo in systemInfos) {                  var debugSystems = systemInfo.system as DebugSystems;                  if (debugSystems != null) {                      if (!shouldShowSystems(debugSystems' type)) {                          continue;                      }                  }                    if (EditorLayout.MatchesSearchString(systemInfo.systemName.ToLower()' _systemNameSearchString.ToLower())) {                      EditorGUILayout.BeginHorizontal();                      {                          var indent = EditorGUI.indentLevel;                          EditorGUI.indentLevel = 0;                            var wasActive = systemInfo.isActive;                          if (systemInfo.areAllParentsActive) {                              systemInfo.isActive = EditorGUILayout.Toggle(systemInfo.isActive' GUILayout.Width(20));                          } else {                              EditorGUI.BeginDisabledGroup(true);                              {                                  EditorGUILayout.Toggle(false' GUILayout.Width(20));                              }                          }                          EditorGUI.EndDisabledGroup();                            EditorGUI.indentLevel = indent;                            if (systemInfo.isActive != wasActive) {                              var reactiveSystem = systemInfo.system as IReactiveSystem;                              if (reactiveSystem != null) {                                  if (systemInfo.isActive) {                                      reactiveSystem.Activate();                                  } else {                                      reactiveSystem.Deactivate();                                  }                              }                          }                            switch (type) {                              case SystemInterfaceFlags.IInitializeSystem:                                  EditorGUILayout.LabelField(systemInfo.systemName' systemInfo.initializationDuration.ToString()' getSystemStyle(systemInfo' SystemInterfaceFlags.IInitializeSystem));                                  break;                              case SystemInterfaceFlags.IExecuteSystem:                                  var avgE = string.Format("Ã˜ {0:00.000}"' systemInfo.averageExecutionDuration).PadRight(12);                                  var minE = string.Format("â–¼ {0:00.000}"' systemInfo.minExecutionDuration).PadRight(12);                                  var maxE = string.Format("â–² {0:00.000}"' systemInfo.maxExecutionDuration);                                  EditorGUILayout.LabelField(systemInfo.systemName' avgE + minE + maxE' getSystemStyle(systemInfo' SystemInterfaceFlags.IExecuteSystem));                                  break;                              case SystemInterfaceFlags.ICleanupSystem:                                  var avgC = string.Format("Ã˜ {0:00.000}"' systemInfo.averageCleanupDuration).PadRight(12);                                  var minC = string.Format("â–¼ {0:00.000}"' systemInfo.minCleanupDuration).PadRight(12);                                  var maxC = string.Format("â–² {0:00.000}"' systemInfo.maxCleanupDuration);                                  EditorGUILayout.LabelField(systemInfo.systemName' avgC + minC + maxC' getSystemStyle(systemInfo' SystemInterfaceFlags.ICleanupSystem));                                  break;                              case SystemInterfaceFlags.ITearDownSystem:                                  EditorGUILayout.LabelField(systemInfo.systemName' systemInfo.teardownDuration.ToString()' getSystemStyle(systemInfo' SystemInterfaceFlags.ITearDownSystem));                                  break;                          }                      }                      EditorGUILayout.EndHorizontal();                        systemsDrawn += 1;                  }                    var debugSystem = systemInfo.system as DebugSystems;                  if (debugSystem != null) {                      var indent = EditorGUI.indentLevel;                      EditorGUI.indentLevel += 1;                      systemsDrawn += drawSystemInfos(debugSystem' type);                      EditorGUI.indentLevel = indent;                  }              }
Magic Number,Entitas.VisualDebugging.Unity.Editor,DebugSystemsInspector,C:\repos\sschmid_Entitas-CSharp\Addons\Entitas.VisualDebugging.Unity.Editor\Entitas.VisualDebugging.Unity.Editor\DebugSystems\DebugSystemsInspector.cs,drawSystemInfos,The following statement contains a magic number: foreach (var systemInfo in systemInfos) {                  var debugSystems = systemInfo.system as DebugSystems;                  if (debugSystems != null) {                      if (!shouldShowSystems(debugSystems' type)) {                          continue;                      }                  }                    if (EditorLayout.MatchesSearchString(systemInfo.systemName.ToLower()' _systemNameSearchString.ToLower())) {                      EditorGUILayout.BeginHorizontal();                      {                          var indent = EditorGUI.indentLevel;                          EditorGUI.indentLevel = 0;                            var wasActive = systemInfo.isActive;                          if (systemInfo.areAllParentsActive) {                              systemInfo.isActive = EditorGUILayout.Toggle(systemInfo.isActive' GUILayout.Width(20));                          } else {                              EditorGUI.BeginDisabledGroup(true);                              {                                  EditorGUILayout.Toggle(false' GUILayout.Width(20));                              }                          }                          EditorGUI.EndDisabledGroup();                            EditorGUI.indentLevel = indent;                            if (systemInfo.isActive != wasActive) {                              var reactiveSystem = systemInfo.system as IReactiveSystem;                              if (reactiveSystem != null) {                                  if (systemInfo.isActive) {                                      reactiveSystem.Activate();                                  } else {                                      reactiveSystem.Deactivate();                                  }                              }                          }                            switch (type) {                              case SystemInterfaceFlags.IInitializeSystem:                                  EditorGUILayout.LabelField(systemInfo.systemName' systemInfo.initializationDuration.ToString()' getSystemStyle(systemInfo' SystemInterfaceFlags.IInitializeSystem));                                  break;                              case SystemInterfaceFlags.IExecuteSystem:                                  var avgE = string.Format("Ã˜ {0:00.000}"' systemInfo.averageExecutionDuration).PadRight(12);                                  var minE = string.Format("â–¼ {0:00.000}"' systemInfo.minExecutionDuration).PadRight(12);                                  var maxE = string.Format("â–² {0:00.000}"' systemInfo.maxExecutionDuration);                                  EditorGUILayout.LabelField(systemInfo.systemName' avgE + minE + maxE' getSystemStyle(systemInfo' SystemInterfaceFlags.IExecuteSystem));                                  break;                              case SystemInterfaceFlags.ICleanupSystem:                                  var avgC = string.Format("Ã˜ {0:00.000}"' systemInfo.averageCleanupDuration).PadRight(12);                                  var minC = string.Format("â–¼ {0:00.000}"' systemInfo.minCleanupDuration).PadRight(12);                                  var maxC = string.Format("â–² {0:00.000}"' systemInfo.maxCleanupDuration);                                  EditorGUILayout.LabelField(systemInfo.systemName' avgC + minC + maxC' getSystemStyle(systemInfo' SystemInterfaceFlags.ICleanupSystem));                                  break;                              case SystemInterfaceFlags.ITearDownSystem:                                  EditorGUILayout.LabelField(systemInfo.systemName' systemInfo.teardownDuration.ToString()' getSystemStyle(systemInfo' SystemInterfaceFlags.ITearDownSystem));                                  break;                          }                      }                      EditorGUILayout.EndHorizontal();                        systemsDrawn += 1;                  }                    var debugSystem = systemInfo.system as DebugSystems;                  if (debugSystem != null) {                      var indent = EditorGUI.indentLevel;                      EditorGUI.indentLevel += 1;                      systemsDrawn += drawSystemInfos(debugSystem' type);                      EditorGUI.indentLevel = indent;                  }              }
Magic Number,Entitas.VisualDebugging.Unity.Editor,DebugSystemsInspector,C:\repos\sschmid_Entitas-CSharp\Addons\Entitas.VisualDebugging.Unity.Editor\Entitas.VisualDebugging.Unity.Editor\DebugSystems\DebugSystemsInspector.cs,drawSystemInfos,The following statement contains a magic number: foreach (var systemInfo in systemInfos) {                  var debugSystems = systemInfo.system as DebugSystems;                  if (debugSystems != null) {                      if (!shouldShowSystems(debugSystems' type)) {                          continue;                      }                  }                    if (EditorLayout.MatchesSearchString(systemInfo.systemName.ToLower()' _systemNameSearchString.ToLower())) {                      EditorGUILayout.BeginHorizontal();                      {                          var indent = EditorGUI.indentLevel;                          EditorGUI.indentLevel = 0;                            var wasActive = systemInfo.isActive;                          if (systemInfo.areAllParentsActive) {                              systemInfo.isActive = EditorGUILayout.Toggle(systemInfo.isActive' GUILayout.Width(20));                          } else {                              EditorGUI.BeginDisabledGroup(true);                              {                                  EditorGUILayout.Toggle(false' GUILayout.Width(20));                              }                          }                          EditorGUI.EndDisabledGroup();                            EditorGUI.indentLevel = indent;                            if (systemInfo.isActive != wasActive) {                              var reactiveSystem = systemInfo.system as IReactiveSystem;                              if (reactiveSystem != null) {                                  if (systemInfo.isActive) {                                      reactiveSystem.Activate();                                  } else {                                      reactiveSystem.Deactivate();                                  }                              }                          }                            switch (type) {                              case SystemInterfaceFlags.IInitializeSystem:                                  EditorGUILayout.LabelField(systemInfo.systemName' systemInfo.initializationDuration.ToString()' getSystemStyle(systemInfo' SystemInterfaceFlags.IInitializeSystem));                                  break;                              case SystemInterfaceFlags.IExecuteSystem:                                  var avgE = string.Format("Ã˜ {0:00.000}"' systemInfo.averageExecutionDuration).PadRight(12);                                  var minE = string.Format("â–¼ {0:00.000}"' systemInfo.minExecutionDuration).PadRight(12);                                  var maxE = string.Format("â–² {0:00.000}"' systemInfo.maxExecutionDuration);                                  EditorGUILayout.LabelField(systemInfo.systemName' avgE + minE + maxE' getSystemStyle(systemInfo' SystemInterfaceFlags.IExecuteSystem));                                  break;                              case SystemInterfaceFlags.ICleanupSystem:                                  var avgC = string.Format("Ã˜ {0:00.000}"' systemInfo.averageCleanupDuration).PadRight(12);                                  var minC = string.Format("â–¼ {0:00.000}"' systemInfo.minCleanupDuration).PadRight(12);                                  var maxC = string.Format("â–² {0:00.000}"' systemInfo.maxCleanupDuration);                                  EditorGUILayout.LabelField(systemInfo.systemName' avgC + minC + maxC' getSystemStyle(systemInfo' SystemInterfaceFlags.ICleanupSystem));                                  break;                              case SystemInterfaceFlags.ITearDownSystem:                                  EditorGUILayout.LabelField(systemInfo.systemName' systemInfo.teardownDuration.ToString()' getSystemStyle(systemInfo' SystemInterfaceFlags.ITearDownSystem));                                  break;                          }                      }                      EditorGUILayout.EndHorizontal();                        systemsDrawn += 1;                  }                    var debugSystem = systemInfo.system as DebugSystems;                  if (debugSystem != null) {                      var indent = EditorGUI.indentLevel;                      EditorGUI.indentLevel += 1;                      systemsDrawn += drawSystemInfos(debugSystem' type);                      EditorGUI.indentLevel = indent;                  }              }
Magic Number,Entitas.VisualDebugging.Unity.Editor,DebugSystemsInspector,C:\repos\sschmid_Entitas-CSharp\Addons\Entitas.VisualDebugging.Unity.Editor\Entitas.VisualDebugging.Unity.Editor\DebugSystems\DebugSystemsInspector.cs,drawSystemInfos,The following statement contains a magic number: foreach (var systemInfo in systemInfos) {                  var debugSystems = systemInfo.system as DebugSystems;                  if (debugSystems != null) {                      if (!shouldShowSystems(debugSystems' type)) {                          continue;                      }                  }                    if (EditorLayout.MatchesSearchString(systemInfo.systemName.ToLower()' _systemNameSearchString.ToLower())) {                      EditorGUILayout.BeginHorizontal();                      {                          var indent = EditorGUI.indentLevel;                          EditorGUI.indentLevel = 0;                            var wasActive = systemInfo.isActive;                          if (systemInfo.areAllParentsActive) {                              systemInfo.isActive = EditorGUILayout.Toggle(systemInfo.isActive' GUILayout.Width(20));                          } else {                              EditorGUI.BeginDisabledGroup(true);                              {                                  EditorGUILayout.Toggle(false' GUILayout.Width(20));                              }                          }                          EditorGUI.EndDisabledGroup();                            EditorGUI.indentLevel = indent;                            if (systemInfo.isActive != wasActive) {                              var reactiveSystem = systemInfo.system as IReactiveSystem;                              if (reactiveSystem != null) {                                  if (systemInfo.isActive) {                                      reactiveSystem.Activate();                                  } else {                                      reactiveSystem.Deactivate();                                  }                              }                          }                            switch (type) {                              case SystemInterfaceFlags.IInitializeSystem:                                  EditorGUILayout.LabelField(systemInfo.systemName' systemInfo.initializationDuration.ToString()' getSystemStyle(systemInfo' SystemInterfaceFlags.IInitializeSystem));                                  break;                              case SystemInterfaceFlags.IExecuteSystem:                                  var avgE = string.Format("Ã˜ {0:00.000}"' systemInfo.averageExecutionDuration).PadRight(12);                                  var minE = string.Format("â–¼ {0:00.000}"' systemInfo.minExecutionDuration).PadRight(12);                                  var maxE = string.Format("â–² {0:00.000}"' systemInfo.maxExecutionDuration);                                  EditorGUILayout.LabelField(systemInfo.systemName' avgE + minE + maxE' getSystemStyle(systemInfo' SystemInterfaceFlags.IExecuteSystem));                                  break;                              case SystemInterfaceFlags.ICleanupSystem:                                  var avgC = string.Format("Ã˜ {0:00.000}"' systemInfo.averageCleanupDuration).PadRight(12);                                  var minC = string.Format("â–¼ {0:00.000}"' systemInfo.minCleanupDuration).PadRight(12);                                  var maxC = string.Format("â–² {0:00.000}"' systemInfo.maxCleanupDuration);                                  EditorGUILayout.LabelField(systemInfo.systemName' avgC + minC + maxC' getSystemStyle(systemInfo' SystemInterfaceFlags.ICleanupSystem));                                  break;                              case SystemInterfaceFlags.ITearDownSystem:                                  EditorGUILayout.LabelField(systemInfo.systemName' systemInfo.teardownDuration.ToString()' getSystemStyle(systemInfo' SystemInterfaceFlags.ITearDownSystem));                                  break;                          }                      }                      EditorGUILayout.EndHorizontal();                        systemsDrawn += 1;                  }                    var debugSystem = systemInfo.system as DebugSystems;                  if (debugSystem != null) {                      var indent = EditorGUI.indentLevel;                      EditorGUI.indentLevel += 1;                      systemsDrawn += drawSystemInfos(debugSystem' type);                      EditorGUI.indentLevel = indent;                  }              }
Magic Number,Entitas.VisualDebugging.Unity.Editor,EntityDrawer,C:\repos\sschmid_Entitas-CSharp\Addons\Entitas.VisualDebugging.Unity.Editor\Entitas.VisualDebugging.Unity.Editor\Entity\Entity\EntityDrawer.cs,DrawComponent,The following statement contains a magic number: if (EditorLayout.MatchesSearchString(componentName.ToLower()' componentNameSearchString.ToLower())) {                  var boxStyle = getColoredBoxStyle(context' index);                  EditorGUILayout.BeginVertical(boxStyle);                  {                      var memberInfos = componentType.GetPublicMemberInfos();                      EditorGUILayout.BeginHorizontal();                      {                          if (memberInfos.Count == 0) {                              EditorGUILayout.LabelField(componentName' EditorStyles.boldLabel);                          } else {                              unfoldedComponents[index] = EditorLayout.Foldout(unfoldedComponents[index]' componentName' foldoutStyle);                              if (unfoldedComponents[index]) {                                  componentMemberSearch[index] = memberInfos.Count > 5                                      ? EditorLayout.SearchTextField(componentMemberSearch[index])                                      : string.Empty;                              }                          }                          if (EditorLayout.MiniButton("-")) {                              entity.RemoveComponent(index);                          }                      }                      EditorGUILayout.EndHorizontal();                        if (unfoldedComponents[index]) {                          var newComponent = entity.CreateComponent(index' componentType);                          component.CopyPublicMemberValues(newComponent);                            var changed = false;                          var componentDrawer = getComponentDrawer(componentType);                          if (componentDrawer != null) {                              EditorGUI.BeginChangeCheck();                              {                                  componentDrawer.DrawComponent(newComponent);                              }                              changed = EditorGUI.EndChangeCheck();                          } else {                              foreach (var info in memberInfos) {                                  if (EditorLayout.MatchesSearchString(info.name.ToLower()' componentMemberSearch[index].ToLower())) {                                      var memberValue = info.GetValue(newComponent);                                      var memberType = memberValue == null ? info.type : memberValue.GetType();                                      if (DrawObjectMember(memberType' info.name' memberValue' newComponent' info.SetValue)) {                                          changed = true;                                      }                                  }                              }                          }                            if (changed) {                              entity.ReplaceComponent(index' newComponent);                          } else {                              entity.GetComponentPool(index).Push(newComponent);                          }                      }                  }                  EditorLayout.EndVerticalBox();              }
Magic Number,Entitas.VisualDebugging.Unity.Editor,EntityDrawer,C:\repos\sschmid_Entitas-CSharp\Addons\Entitas.VisualDebugging.Unity.Editor\Entitas.VisualDebugging.Unity.Editor\Entity\Entity\EntityDrawer.cs,getColoredBoxStyle,The following statement contains a magic number: if (!contextToColoredBoxStyles.TryGetValue(context' out styles)) {                  styles = new GUIStyle[context.totalComponents];                  for (int i = 0; i < styles.Length; i++) {                      var hue = (float)i / (float)context.totalComponents;                      var componentColor = Color.HSVToRGB(hue' 0.7f' 1f);                      componentColor.a = 0.15f;                      var style = new GUIStyle(GUI.skin.box);                      style.normal.background = createTexture(2' 2' componentColor);                      styles[i] = style;                  }                  contextToColoredBoxStyles.Add(context' styles);              }
Magic Number,Entitas.VisualDebugging.Unity.Editor,EntityDrawer,C:\repos\sschmid_Entitas-CSharp\Addons\Entitas.VisualDebugging.Unity.Editor\Entitas.VisualDebugging.Unity.Editor\Entity\Entity\EntityDrawer.cs,getColoredBoxStyle,The following statement contains a magic number: if (!contextToColoredBoxStyles.TryGetValue(context' out styles)) {                  styles = new GUIStyle[context.totalComponents];                  for (int i = 0; i < styles.Length; i++) {                      var hue = (float)i / (float)context.totalComponents;                      var componentColor = Color.HSVToRGB(hue' 0.7f' 1f);                      componentColor.a = 0.15f;                      var style = new GUIStyle(GUI.skin.box);                      style.normal.background = createTexture(2' 2' componentColor);                      styles[i] = style;                  }                  contextToColoredBoxStyles.Add(context' styles);              }
Magic Number,Entitas.VisualDebugging.Unity.Editor,ArrayTypeDrawer,C:\repos\sschmid_Entitas-CSharp\Addons\Entitas.VisualDebugging.Unity.Editor\Entitas.VisualDebugging.Unity.Editor\Entity\TypeDrawer\ArrayTypeDrawer.cs,DrawAndGetNewValue,The following statement contains a magic number: if (array.Rank == 1) {                  array = drawRank1(array' memberName' elementType' indent' target);              } else if (array.Rank == 2) {                  array = drawRank2(array' memberName' elementType' target);              } else if (array.Rank == 3) {                  array = drawRank3(array' memberName' elementType' target);              }
Magic Number,Entitas.VisualDebugging.Unity.Editor,ArrayTypeDrawer,C:\repos\sschmid_Entitas-CSharp\Addons\Entitas.VisualDebugging.Unity.Editor\Entitas.VisualDebugging.Unity.Editor\Entity\TypeDrawer\ArrayTypeDrawer.cs,DrawAndGetNewValue,The following statement contains a magic number: if (array.Rank == 1) {                  array = drawRank1(array' memberName' elementType' indent' target);              } else if (array.Rank == 2) {                  array = drawRank2(array' memberName' elementType' target);              } else if (array.Rank == 3) {                  array = drawRank3(array' memberName' elementType' target);              }
Magic Number,Entitas.VisualDebugging.Unity.Editor,ArrayTypeDrawer,C:\repos\sschmid_Entitas-CSharp\Addons\Entitas.VisualDebugging.Unity.Editor\Entitas.VisualDebugging.Unity.Editor\Entity\TypeDrawer\ArrayTypeDrawer.cs,drawRank3,The following statement contains a magic number: for (int i = 0; i < array.GetLength(0); i++) {                  var localIndex1 = i;                  for (int j = 0; j < array.GetLength(1); j++) {                      var localIndex2 = j;                      for (int k = 0; k < array.GetLength(2); k++) {                          var localIndex3 = k;                          EntityDrawer.DrawObjectMember(elementType' memberName + "[" + localIndex1 + "' " + localIndex2 + " '" + localIndex3 + "]"' array.GetValue(localIndex1' localIndex2' localIndex3)'                              target' (newComponent' newValue) => array.SetValue(newValue' localIndex1' localIndex2' localIndex3));                      }                      EditorGUILayout.Space();                  }                  EditorGUILayout.Space();              }
Magic Number,Entitas.VisualDebugging.Unity.Editor,DictionaryTypeDrawer,C:\repos\sschmid_Entitas-CSharp\Addons\Entitas.VisualDebugging.Unity.Editor\Entitas.VisualDebugging.Unity.Editor\Entity\TypeDrawer\DictionaryTypeDrawer.cs,DrawAndGetNewValue,The following statement contains a magic number: if (dictionary.Count > 0) {                    var indent = EditorGUI.indentLevel;                  EditorGUI.indentLevel = indent + 1;                    if (dictionary.Count > 5) {                      EditorGUILayout.Space();                      _keySearchTexts[targetType] = EditorLayout.SearchTextField(_keySearchTexts[targetType]);                  }                    EditorGUILayout.Space();                    var keys = new ArrayList(dictionary.Keys);                  for (int i = 0; i < keys.Count; i++) {                      var key = keys[i];                      if (EditorLayout.MatchesSearchString(key.ToString().ToLower()' _keySearchTexts[targetType].ToLower())) {                          EntityDrawer.DrawObjectMember(keyType' "key"' key'                              target' (newComponent' newValue) => {                                  var tmpValue = dictionary[key];                                  dictionary.Remove(key);                                  if (newValue != null) {                                      dictionary[newValue] = tmpValue;                                  }                              });                            EntityDrawer.DrawObjectMember(valueType' "value"' dictionary[key]'                              target' (newComponent' newValue) => dictionary[key] = newValue);                            EditorGUILayout.Space();                      }                  }                    EditorGUI.indentLevel = indent;              }
Missing Default,Entitas.VisualDebugging.Unity.Editor,DebugSystemsInspector,C:\repos\sschmid_Entitas-CSharp\Addons\Entitas.VisualDebugging.Unity.Editor\Entitas.VisualDebugging.Unity.Editor\DebugSystems\DebugSystemsInspector.cs,drawSystemInfos,The following switch statement is missing a default case: switch (type) {                  case SystemInterfaceFlags.IInitializeSystem:                      systemInfos = systems.initializeSystemInfos                          .Where(systemInfo => systemInfo.initializationDuration >= _threshold)                          .ToArray();                      break;                  case SystemInterfaceFlags.IExecuteSystem:                      systemInfos = systems.executeSystemInfos                          .Where(systemInfo => systemInfo.averageExecutionDuration >= _threshold)                          .ToArray();                      break;                  case SystemInterfaceFlags.ICleanupSystem:                      systemInfos = systems.cleanupSystemInfos                          .Where(systemInfo => systemInfo.cleanupDuration >= _threshold)                          .ToArray();                      break;                  case SystemInterfaceFlags.ITearDownSystem:                      systemInfos = systems.tearDownSystemInfos                          .Where(systemInfo => systemInfo.teardownDuration >= _threshold)                          .ToArray();                      break;              }
Missing Default,Entitas.VisualDebugging.Unity.Editor,DebugSystemsInspector,C:\repos\sschmid_Entitas-CSharp\Addons\Entitas.VisualDebugging.Unity.Editor\Entitas.VisualDebugging.Unity.Editor\DebugSystems\DebugSystemsInspector.cs,drawSystemInfos,The following switch statement is missing a default case: switch (type) {                              case SystemInterfaceFlags.IInitializeSystem:                                  EditorGUILayout.LabelField(systemInfo.systemName' systemInfo.initializationDuration.ToString()' getSystemStyle(systemInfo' SystemInterfaceFlags.IInitializeSystem));                                  break;                              case SystemInterfaceFlags.IExecuteSystem:                                  var avgE = string.Format("Ã˜ {0:00.000}"' systemInfo.averageExecutionDuration).PadRight(12);                                  var minE = string.Format("â–¼ {0:00.000}"' systemInfo.minExecutionDuration).PadRight(12);                                  var maxE = string.Format("â–² {0:00.000}"' systemInfo.maxExecutionDuration);                                  EditorGUILayout.LabelField(systemInfo.systemName' avgE + minE + maxE' getSystemStyle(systemInfo' SystemInterfaceFlags.IExecuteSystem));                                  break;                              case SystemInterfaceFlags.ICleanupSystem:                                  var avgC = string.Format("Ã˜ {0:00.000}"' systemInfo.averageCleanupDuration).PadRight(12);                                  var minC = string.Format("â–¼ {0:00.000}"' systemInfo.minCleanupDuration).PadRight(12);                                  var maxC = string.Format("â–² {0:00.000}"' systemInfo.maxCleanupDuration);                                  EditorGUILayout.LabelField(systemInfo.systemName' avgC + minC + maxC' getSystemStyle(systemInfo' SystemInterfaceFlags.ICleanupSystem));                                  break;                              case SystemInterfaceFlags.ITearDownSystem:                                  EditorGUILayout.LabelField(systemInfo.systemName' systemInfo.teardownDuration.ToString()' getSystemStyle(systemInfo' SystemInterfaceFlags.ITearDownSystem));                                  break;                          }
