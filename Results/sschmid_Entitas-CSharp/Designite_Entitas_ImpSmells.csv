Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,Entitas,Entity,C:\repos\sschmid_Entitas-CSharp\Entitas\Entitas\Entity\Entity.cs,Initialize,The method has 5 parameters. Parameters: creationIndex' totalComponents' componentPools' contextInfo' aerc
Long Parameter List,Entitas,IEntity,C:\repos\sschmid_Entitas-CSharp\Entitas\Entitas\Entity\IEntity.cs,Initialize,The method has 5 parameters. Parameters: creationIndex' totalComponents' componentPools' contextInfo' aerc
Magic Number,Entitas,Matcher<TEntity>,C:\repos\sschmid_Entitas-CSharp\Entitas\Entitas\Matcher\Matcher.cs,GetHashCode,The following statement contains a magic number: if (!_isHashCached) {                  var hash = GetType().GetHashCode();                  hash = applyHash(hash' _allOfIndices' 3' 53);                  hash = applyHash(hash' _anyOfIndices' 307' 367);                  hash = applyHash(hash' _noneOfIndices' 647' 683);                  _hash = hash;                  _isHashCached = true;              }
Magic Number,Entitas,Matcher<TEntity>,C:\repos\sschmid_Entitas-CSharp\Entitas\Entitas\Matcher\Matcher.cs,GetHashCode,The following statement contains a magic number: if (!_isHashCached) {                  var hash = GetType().GetHashCode();                  hash = applyHash(hash' _allOfIndices' 3' 53);                  hash = applyHash(hash' _anyOfIndices' 307' 367);                  hash = applyHash(hash' _noneOfIndices' 647' 683);                  _hash = hash;                  _isHashCached = true;              }
Magic Number,Entitas,Matcher<TEntity>,C:\repos\sschmid_Entitas-CSharp\Entitas\Entitas\Matcher\Matcher.cs,GetHashCode,The following statement contains a magic number: if (!_isHashCached) {                  var hash = GetType().GetHashCode();                  hash = applyHash(hash' _allOfIndices' 3' 53);                  hash = applyHash(hash' _anyOfIndices' 307' 367);                  hash = applyHash(hash' _noneOfIndices' 647' 683);                  _hash = hash;                  _isHashCached = true;              }
Magic Number,Entitas,Matcher<TEntity>,C:\repos\sschmid_Entitas-CSharp\Entitas\Entitas\Matcher\Matcher.cs,GetHashCode,The following statement contains a magic number: if (!_isHashCached) {                  var hash = GetType().GetHashCode();                  hash = applyHash(hash' _allOfIndices' 3' 53);                  hash = applyHash(hash' _anyOfIndices' 307' 367);                  hash = applyHash(hash' _noneOfIndices' 647' 683);                  _hash = hash;                  _isHashCached = true;              }
Magic Number,Entitas,Matcher<TEntity>,C:\repos\sschmid_Entitas-CSharp\Entitas\Entitas\Matcher\Matcher.cs,GetHashCode,The following statement contains a magic number: if (!_isHashCached) {                  var hash = GetType().GetHashCode();                  hash = applyHash(hash' _allOfIndices' 3' 53);                  hash = applyHash(hash' _anyOfIndices' 307' 367);                  hash = applyHash(hash' _noneOfIndices' 647' 683);                  _hash = hash;                  _isHashCached = true;              }
Magic Number,Entitas,Matcher<TEntity>,C:\repos\sschmid_Entitas-CSharp\Entitas\Entitas\Matcher\Matcher.cs,GetHashCode,The following statement contains a magic number: if (!_isHashCached) {                  var hash = GetType().GetHashCode();                  hash = applyHash(hash' _allOfIndices' 3' 53);                  hash = applyHash(hash' _anyOfIndices' 307' 367);                  hash = applyHash(hash' _noneOfIndices' 647' 683);                  _hash = hash;                  _isHashCached = true;              }
Missing Default,Entitas,Collector<TEntity>,C:\repos\sschmid_Entitas-CSharp\Entitas\Entitas\Collector\Collector.cs,Activate,The following switch statement is missing a default case: switch (groupEvent) {                      case GroupEvent.Added:                          group.OnEntityAdded -= _addEntityCache;                          group.OnEntityAdded += _addEntityCache;                          break;                      case GroupEvent.Removed:                          group.OnEntityRemoved -= _addEntityCache;                          group.OnEntityRemoved += _addEntityCache;                          break;                      case GroupEvent.AddedOrRemoved:                          group.OnEntityAdded -= _addEntityCache;                          group.OnEntityAdded += _addEntityCache;                          group.OnEntityRemoved -= _addEntityCache;                          group.OnEntityRemoved += _addEntityCache;                          break;                  }
