Implementation smell,Namespace,Class,File,Method,Description
Long Method,IrcDotNet,IrcClient,C:\repos\DarkAutumn_WinterBot\WinterBot\TwitchIrc\IrcClientMessageProcessing.cs,ReceiveCompleted,The method has 101 lines of code.
Complex Method,IrcDotNet,IrcClient,C:\repos\DarkAutumn_WinterBot\WinterBot\TwitchIrc\IrcClientMessageProcessing.cs,Dispose,Cyclomatic complexity of the method is 9
Complex Method,IrcDotNet,IrcClient,C:\repos\DarkAutumn_WinterBot\WinterBot\TwitchIrc\IrcClientMessageProcessing.cs,WriteMessage,Cyclomatic complexity of the method is 8
Complex Method,IrcDotNet,IrcClient,C:\repos\DarkAutumn_WinterBot\WinterBot\TwitchIrc\IrcClientMessageProcessing.cs,ReceiveCompleted,Cyclomatic complexity of the method is 12
Complex Method,IrcDotNet,IrcUtilities,C:\repos\DarkAutumn_WinterBot\WinterBot\TwitchIrc\IrcUtilities.cs,UpdateModes,Cyclomatic complexity of the method is 8
Long Parameter List,IrcDotNet,IrcUtilities,C:\repos\DarkAutumn_WinterBot\WinterBot\TwitchIrc\IrcUtilities.cs,UpdateModes,The method has 5 parameters. Parameters: collection' newModes' newModeParameters' modesWithParameters' handleModeParameter
Long Parameter List,IrcDotNet.Ctcp,CtcpMessage,C:\repos\DarkAutumn_WinterBot\WinterBot\TwitchIrc\Ctcp\CtcpClient.cs,CtcpMessage,The method has 5 parameters. Parameters: source' targets' tag' data' isResponse
Long Identifier,IrcDotNet,IrcClient,C:\repos\DarkAutumn_WinterBot\WinterBot\TwitchIrc\IrcClientMessageProcessing.cs,,The length of the parameter serverSupportedFeaturesReadOnly is 31.
Long Statement,IrcDotNet,IrcClient,C:\repos\DarkAutumn_WinterBot\WinterBot\TwitchIrc\IrcClientMessageProcessing.cs,ProcessMessageNotice,The length of the statement  "            if (message.Parameters[1] != null && message.Parameters[1].Equals("Login unsuccessful"' StringComparison.CurrentCultureIgnoreCase)) " is 131.
Long Statement,IrcDotNet,IrcClient,C:\repos\DarkAutumn_WinterBot\WinterBot\TwitchIrc\IrcClientMessageProcessing.cs,ReadMessage,The length of the statement  "                Logger.WriteLine("Unknown IRC message command '{0}'.(Params: {1})"' TraceEventType.Warning' message.Command' string.Join("|"' message.Parameters.Select(s => string.Format("\"{0}\""' s)))); " is 188.
Long Statement,IrcDotNet,IrcClient,C:\repos\DarkAutumn_WinterBot\WinterBot\TwitchIrc\IrcClientMessageProcessing.cs,HandleClientConnected,The length of the statement  "            Logger.WriteLine("Connected to server at '{0}'."' TraceEventType.Verbose'((IPEndPoint)this.socket.RemoteEndPoint).Address); " is 123.
Complex Conditional,IrcDotNet,IrcClient,C:\repos\DarkAutumn_WinterBot\WinterBot\TwitchIrc\IrcClientMessageProcessing.cs,CheckMiddleParameter,The conditional expression  "value.Length == 0 || value.Any(c => IsInvalidMessageChar(c) || c == ' ') || value[0] == ':'"  is complex.
Empty Catch Block,IrcDotNet,IrcClient,C:\repos\DarkAutumn_WinterBot\WinterBot\TwitchIrc\IrcClientMessageProcessing.cs,WritePendingMessages,The method has an empty catch block.
Empty Catch Block,IrcDotNet,IrcClient,C:\repos\DarkAutumn_WinterBot\WinterBot\TwitchIrc\IrcClientMessageProcessing.cs,SendCompleted,The method has an empty catch block.
Empty Catch Block,IrcDotNet,IrcClient,C:\repos\DarkAutumn_WinterBot\WinterBot\TwitchIrc\IrcClientMessageProcessing.cs,ReceiveCompleted,The method has an empty catch block.
Empty Catch Block,IrcDotNet,IrcClient,C:\repos\DarkAutumn_WinterBot\WinterBot\TwitchIrc\IrcClientMessageProcessing.cs,ConnectCompleted,The method has an empty catch block.
Empty Catch Block,IrcDotNet,IrcClient,C:\repos\DarkAutumn_WinterBot\WinterBot\TwitchIrc\IrcClientMessageProcessing.cs,DisconnectCompleted,The method has an empty catch block.
Magic Number,IrcDotNet,IrcClient,C:\repos\DarkAutumn_WinterBot\WinterBot\TwitchIrc\IrcClientMessageProcessing.cs,ProcessMessageKick,The following statement contains a magic number: var comment = message.Parameters[2];
Magic Number,IrcDotNet,IrcClient,C:\repos\DarkAutumn_WinterBot\WinterBot\TwitchIrc\IrcClientMessageProcessing.cs,ProcessMessageReplyMyInfo,The following statement contains a magic number: if (message.Parameters[1] != "-")              {                  Debug.Assert(message.Parameters[1] != null);                  this.ServerName = message.Parameters[1];                  Debug.Assert(message.Parameters[2] != null);                  this.ServerVersion = message.Parameters[2];                  Debug.Assert(message.Parameters[3] != null);                  this.ServerAvailableUserModes = message.Parameters[3];                  Debug.Assert(message.Parameters[4] != null);                  this.ServerAvailableChannelModes = message.Parameters[4];              }
Magic Number,IrcDotNet,IrcClient,C:\repos\DarkAutumn_WinterBot\WinterBot\TwitchIrc\IrcClientMessageProcessing.cs,ProcessMessageReplyMyInfo,The following statement contains a magic number: if (message.Parameters[1] != "-")              {                  Debug.Assert(message.Parameters[1] != null);                  this.ServerName = message.Parameters[1];                  Debug.Assert(message.Parameters[2] != null);                  this.ServerVersion = message.Parameters[2];                  Debug.Assert(message.Parameters[3] != null);                  this.ServerAvailableUserModes = message.Parameters[3];                  Debug.Assert(message.Parameters[4] != null);                  this.ServerAvailableChannelModes = message.Parameters[4];              }
Magic Number,IrcDotNet,IrcClient,C:\repos\DarkAutumn_WinterBot\WinterBot\TwitchIrc\IrcClientMessageProcessing.cs,ProcessMessageReplyMyInfo,The following statement contains a magic number: if (message.Parameters[1] != "-")              {                  Debug.Assert(message.Parameters[1] != null);                  this.ServerName = message.Parameters[1];                  Debug.Assert(message.Parameters[2] != null);                  this.ServerVersion = message.Parameters[2];                  Debug.Assert(message.Parameters[3] != null);                  this.ServerAvailableUserModes = message.Parameters[3];                  Debug.Assert(message.Parameters[4] != null);                  this.ServerAvailableChannelModes = message.Parameters[4];              }
Magic Number,IrcDotNet,IrcClient,C:\repos\DarkAutumn_WinterBot\WinterBot\TwitchIrc\IrcClientMessageProcessing.cs,ProcessMessageReplyMyInfo,The following statement contains a magic number: if (message.Parameters[1] != "-")              {                  Debug.Assert(message.Parameters[1] != null);                  this.ServerName = message.Parameters[1];                  Debug.Assert(message.Parameters[2] != null);                  this.ServerVersion = message.Parameters[2];                  Debug.Assert(message.Parameters[3] != null);                  this.ServerAvailableUserModes = message.Parameters[3];                  Debug.Assert(message.Parameters[4] != null);                  this.ServerAvailableChannelModes = message.Parameters[4];              }
Magic Number,IrcDotNet,IrcClient,C:\repos\DarkAutumn_WinterBot\WinterBot\TwitchIrc\IrcClientMessageProcessing.cs,ProcessMessageReplyMyInfo,The following statement contains a magic number: if (message.Parameters[1] != "-")              {                  Debug.Assert(message.Parameters[1] != null);                  this.ServerName = message.Parameters[1];                  Debug.Assert(message.Parameters[2] != null);                  this.ServerVersion = message.Parameters[2];                  Debug.Assert(message.Parameters[3] != null);                  this.ServerAvailableUserModes = message.Parameters[3];                  Debug.Assert(message.Parameters[4] != null);                  this.ServerAvailableChannelModes = message.Parameters[4];              }
Magic Number,IrcDotNet,IrcClient,C:\repos\DarkAutumn_WinterBot\WinterBot\TwitchIrc\IrcClientMessageProcessing.cs,ProcessMessageReplyMyInfo,The following statement contains a magic number: if (message.Parameters[1] != "-")              {                  Debug.Assert(message.Parameters[1] != null);                  this.ServerName = message.Parameters[1];                  Debug.Assert(message.Parameters[2] != null);                  this.ServerVersion = message.Parameters[2];                  Debug.Assert(message.Parameters[3] != null);                  this.ServerAvailableUserModes = message.Parameters[3];                  Debug.Assert(message.Parameters[4] != null);                  this.ServerAvailableChannelModes = message.Parameters[4];              }
Magic Number,IrcDotNet,IrcClient,C:\repos\DarkAutumn_WinterBot\WinterBot\TwitchIrc\IrcClientMessageProcessing.cs,ProcessMessageReplyBounceOrISupport,The following statement contains a magic number: if (message.Parameters[1].StartsWith("Try server"))              {                  // Message is RPL_BOUNCE.                  // Current server is redirecting client to new server.                  var textParts = message.Parameters[0].Split(' '' ''');                  var serverAddress = textParts[2];                  var serverPort = int.Parse(textParts[6]);                    OnServerBounce(new IrcServerInfoEventArgs(serverAddress' serverPort));              }              else              {                  // Message is RPL_ISUPPORT.                  // Add key/value pairs to dictionary of supported server features.                  for (int i = 1; i < message.Parameters.Count - 1; i++)                  {                      if (message.Parameters[i + 1] == null)                          break;                        var paramParts = message.Parameters[i].Split('=');                      var paramName = paramParts[0];                      var paramValue = paramParts.Length == 1 ? null : paramParts[1];                      HandleISupportParameter(paramName' paramValue);                      this.serverSupportedFeatures.Set(paramName' paramValue);                  }                    OnServerSupportedFeaturesReceived(new EventArgs());              }
Magic Number,IrcDotNet,IrcClient,C:\repos\DarkAutumn_WinterBot\WinterBot\TwitchIrc\IrcClientMessageProcessing.cs,ProcessMessageReplyBounceOrISupport,The following statement contains a magic number: if (message.Parameters[1].StartsWith("Try server"))              {                  // Message is RPL_BOUNCE.                  // Current server is redirecting client to new server.                  var textParts = message.Parameters[0].Split(' '' ''');                  var serverAddress = textParts[2];                  var serverPort = int.Parse(textParts[6]);                    OnServerBounce(new IrcServerInfoEventArgs(serverAddress' serverPort));              }              else              {                  // Message is RPL_ISUPPORT.                  // Add key/value pairs to dictionary of supported server features.                  for (int i = 1; i < message.Parameters.Count - 1; i++)                  {                      if (message.Parameters[i + 1] == null)                          break;                        var paramParts = message.Parameters[i].Split('=');                      var paramName = paramParts[0];                      var paramValue = paramParts.Length == 1 ? null : paramParts[1];                      HandleISupportParameter(paramName' paramValue);                      this.serverSupportedFeatures.Set(paramName' paramValue);                  }                    OnServerSupportedFeaturesReceived(new EventArgs());              }
Magic Number,IrcDotNet,IrcClient,C:\repos\DarkAutumn_WinterBot\WinterBot\TwitchIrc\IrcClientMessageProcessing.cs,ProcessMessageLUserClient,The following statement contains a magic number: Debug.Assert(infoParts.Length == 10);
Magic Number,IrcDotNet,IrcClient,C:\repos\DarkAutumn_WinterBot\WinterBot\TwitchIrc\IrcClientMessageProcessing.cs,ProcessMessageLUserClient,The following statement contains a magic number: this.networkInformation.VisibleUsersCount = int.Parse(infoParts[2]);
Magic Number,IrcDotNet,IrcClient,C:\repos\DarkAutumn_WinterBot\WinterBot\TwitchIrc\IrcClientMessageProcessing.cs,ProcessMessageLUserClient,The following statement contains a magic number: this.networkInformation.InvisibleUsersCount = int.Parse(infoParts[5]);
Magic Number,IrcDotNet,IrcClient,C:\repos\DarkAutumn_WinterBot\WinterBot\TwitchIrc\IrcClientMessageProcessing.cs,ProcessMessageLUserClient,The following statement contains a magic number: this.networkInformation.ServersCount = int.Parse(infoParts[8]);
Magic Number,IrcDotNet,IrcClient,C:\repos\DarkAutumn_WinterBot\WinterBot\TwitchIrc\IrcClientMessageProcessing.cs,ProcessMessageLUserMe,The following statement contains a magic number: Debug.Assert(infoParts.Length == 7);
Magic Number,IrcDotNet,IrcClient,C:\repos\DarkAutumn_WinterBot\WinterBot\TwitchIrc\IrcClientMessageProcessing.cs,ProcessMessageLUserMe,The following statement contains a magic number: this.networkInformation.ServerClientsCount = int.Parse(infoParts[2]);
Magic Number,IrcDotNet,IrcClient,C:\repos\DarkAutumn_WinterBot\WinterBot\TwitchIrc\IrcClientMessageProcessing.cs,ProcessMessageLUserMe,The following statement contains a magic number: this.networkInformation.ServerServersCount = int.Parse(infoParts[5]);
Magic Number,IrcDotNet,IrcClient,C:\repos\DarkAutumn_WinterBot\WinterBot\TwitchIrc\IrcClientMessageProcessing.cs,ProcessMessageReplyAway,The following statement contains a magic number: Debug.Assert(message.Parameters[2] != null);
Magic Number,IrcDotNet,IrcClient,C:\repos\DarkAutumn_WinterBot\WinterBot\TwitchIrc\IrcClientMessageProcessing.cs,ProcessMessageReplyAway,The following statement contains a magic number: user.AwayMessage = message.Parameters[2];
Magic Number,IrcDotNet,IrcClient,C:\repos\DarkAutumn_WinterBot\WinterBot\TwitchIrc\IrcClientMessageProcessing.cs,ProcessMessageReplyWhoIsUser,The following statement contains a magic number: Debug.Assert(message.Parameters[2] != null);
Magic Number,IrcDotNet,IrcClient,C:\repos\DarkAutumn_WinterBot\WinterBot\TwitchIrc\IrcClientMessageProcessing.cs,ProcessMessageReplyWhoIsUser,The following statement contains a magic number: user.UserName = message.Parameters[2];
Magic Number,IrcDotNet,IrcClient,C:\repos\DarkAutumn_WinterBot\WinterBot\TwitchIrc\IrcClientMessageProcessing.cs,ProcessMessageReplyWhoIsUser,The following statement contains a magic number: Debug.Assert(message.Parameters[3] != null);
Magic Number,IrcDotNet,IrcClient,C:\repos\DarkAutumn_WinterBot\WinterBot\TwitchIrc\IrcClientMessageProcessing.cs,ProcessMessageReplyWhoIsUser,The following statement contains a magic number: user.HostName = message.Parameters[3];
Magic Number,IrcDotNet,IrcClient,C:\repos\DarkAutumn_WinterBot\WinterBot\TwitchIrc\IrcClientMessageProcessing.cs,ProcessMessageReplyWhoIsUser,The following statement contains a magic number: Debug.Assert(message.Parameters[4] != null);
Magic Number,IrcDotNet,IrcClient,C:\repos\DarkAutumn_WinterBot\WinterBot\TwitchIrc\IrcClientMessageProcessing.cs,ProcessMessageReplyWhoIsUser,The following statement contains a magic number: Debug.Assert(message.Parameters[5] != null);
Magic Number,IrcDotNet,IrcClient,C:\repos\DarkAutumn_WinterBot\WinterBot\TwitchIrc\IrcClientMessageProcessing.cs,ProcessMessageReplyWhoIsUser,The following statement contains a magic number: user.RealName = message.Parameters[5];
Magic Number,IrcDotNet,IrcClient,C:\repos\DarkAutumn_WinterBot\WinterBot\TwitchIrc\IrcClientMessageProcessing.cs,ProcessMessageReplyWhoIsServer,The following statement contains a magic number: Debug.Assert(message.Parameters[2] != null);
Magic Number,IrcDotNet,IrcClient,C:\repos\DarkAutumn_WinterBot\WinterBot\TwitchIrc\IrcClientMessageProcessing.cs,ProcessMessageReplyWhoIsServer,The following statement contains a magic number: user.ServerName = message.Parameters[2];
Magic Number,IrcDotNet,IrcClient,C:\repos\DarkAutumn_WinterBot\WinterBot\TwitchIrc\IrcClientMessageProcessing.cs,ProcessMessageReplyWhoIsServer,The following statement contains a magic number: Debug.Assert(message.Parameters[3] != null);
Magic Number,IrcDotNet,IrcClient,C:\repos\DarkAutumn_WinterBot\WinterBot\TwitchIrc\IrcClientMessageProcessing.cs,ProcessMessageReplyWhoIsServer,The following statement contains a magic number: user.ServerInfo = message.Parameters[3];
Magic Number,IrcDotNet,IrcClient,C:\repos\DarkAutumn_WinterBot\WinterBot\TwitchIrc\IrcClientMessageProcessing.cs,ProcessMessageReplyWhoWasUser,The following statement contains a magic number: Debug.Assert(message.Parameters[2] != null);
Magic Number,IrcDotNet,IrcClient,C:\repos\DarkAutumn_WinterBot\WinterBot\TwitchIrc\IrcClientMessageProcessing.cs,ProcessMessageReplyWhoWasUser,The following statement contains a magic number: user.UserName = message.Parameters[2];
Magic Number,IrcDotNet,IrcClient,C:\repos\DarkAutumn_WinterBot\WinterBot\TwitchIrc\IrcClientMessageProcessing.cs,ProcessMessageReplyWhoWasUser,The following statement contains a magic number: Debug.Assert(message.Parameters[3] != null);
Magic Number,IrcDotNet,IrcClient,C:\repos\DarkAutumn_WinterBot\WinterBot\TwitchIrc\IrcClientMessageProcessing.cs,ProcessMessageReplyWhoWasUser,The following statement contains a magic number: user.HostName = message.Parameters[3];
Magic Number,IrcDotNet,IrcClient,C:\repos\DarkAutumn_WinterBot\WinterBot\TwitchIrc\IrcClientMessageProcessing.cs,ProcessMessageReplyWhoWasUser,The following statement contains a magic number: Debug.Assert(message.Parameters[4] != null);
Magic Number,IrcDotNet,IrcClient,C:\repos\DarkAutumn_WinterBot\WinterBot\TwitchIrc\IrcClientMessageProcessing.cs,ProcessMessageReplyWhoWasUser,The following statement contains a magic number: Debug.Assert(message.Parameters[5] != null);
Magic Number,IrcDotNet,IrcClient,C:\repos\DarkAutumn_WinterBot\WinterBot\TwitchIrc\IrcClientMessageProcessing.cs,ProcessMessageReplyWhoWasUser,The following statement contains a magic number: user.RealName = message.Parameters[5];
Magic Number,IrcDotNet,IrcClient,C:\repos\DarkAutumn_WinterBot\WinterBot\TwitchIrc\IrcClientMessageProcessing.cs,ProcessMessageReplyWhoIsIdle,The following statement contains a magic number: Debug.Assert(message.Parameters[2] != null);
Magic Number,IrcDotNet,IrcClient,C:\repos\DarkAutumn_WinterBot\WinterBot\TwitchIrc\IrcClientMessageProcessing.cs,ProcessMessageReplyWhoIsIdle,The following statement contains a magic number: user.IdleDuration = TimeSpan.FromSeconds(int.Parse(message.Parameters[2]));
Magic Number,IrcDotNet,IrcClient,C:\repos\DarkAutumn_WinterBot\WinterBot\TwitchIrc\IrcClientMessageProcessing.cs,ProcessMessageReplyWhoIsChannels,The following statement contains a magic number: Debug.Assert(message.Parameters[2] != null);
Magic Number,IrcDotNet,IrcClient,C:\repos\DarkAutumn_WinterBot\WinterBot\TwitchIrc\IrcClientMessageProcessing.cs,ProcessMessageReplyWhoIsChannels,The following statement contains a magic number: foreach (var channelId in message.Parameters[2].Split(' '))              {                  if (channelId.Length == 0)                      return;                    // Find user by nick name and add it to collection of channel users.                  var channelNameAndUserMode = GetUserModeAndNickName(channelId);                  var channel = GetChannelFromName(channelNameAndUserMode.Item1);                  if (channel.GetChannelUser(user) == null)                      channel.HandleUserJoined(new IrcChannelUser(user' channelNameAndUserMode.Item2));              }
Magic Number,IrcDotNet,IrcClient,C:\repos\DarkAutumn_WinterBot\WinterBot\TwitchIrc\IrcClientMessageProcessing.cs,ProcessMessageReplyList,The following statement contains a magic number: Debug.Assert(message.Parameters[2] != null);
Magic Number,IrcDotNet,IrcClient,C:\repos\DarkAutumn_WinterBot\WinterBot\TwitchIrc\IrcClientMessageProcessing.cs,ProcessMessageReplyList,The following statement contains a magic number: var visibleUsersCount = int.Parse(message.Parameters[2]);
Magic Number,IrcDotNet,IrcClient,C:\repos\DarkAutumn_WinterBot\WinterBot\TwitchIrc\IrcClientMessageProcessing.cs,ProcessMessageReplyList,The following statement contains a magic number: Debug.Assert(message.Parameters[3] != null);
Magic Number,IrcDotNet,IrcClient,C:\repos\DarkAutumn_WinterBot\WinterBot\TwitchIrc\IrcClientMessageProcessing.cs,ProcessMessageReplyList,The following statement contains a magic number: var topic = message.Parameters[3];
Magic Number,IrcDotNet,IrcClient,C:\repos\DarkAutumn_WinterBot\WinterBot\TwitchIrc\IrcClientMessageProcessing.cs,ProcessMessageReplyTopic,The following statement contains a magic number: Debug.Assert(message.Parameters[2] != null);
Magic Number,IrcDotNet,IrcClient,C:\repos\DarkAutumn_WinterBot\WinterBot\TwitchIrc\IrcClientMessageProcessing.cs,ProcessMessageReplyTopic,The following statement contains a magic number: channel.HandleTopicChanged(null' message.Parameters[2]);
Magic Number,IrcDotNet,IrcClient,C:\repos\DarkAutumn_WinterBot\WinterBot\TwitchIrc\IrcClientMessageProcessing.cs,ProcessMessageReplyInviting,The following statement contains a magic number: Debug.Assert(message.Parameters[2] != null);
Magic Number,IrcDotNet,IrcClient,C:\repos\DarkAutumn_WinterBot\WinterBot\TwitchIrc\IrcClientMessageProcessing.cs,ProcessMessageReplyInviting,The following statement contains a magic number: var channel = GetChannelFromName(message.Parameters[2]);
Magic Number,IrcDotNet,IrcClient,C:\repos\DarkAutumn_WinterBot\WinterBot\TwitchIrc\IrcClientMessageProcessing.cs,ProcessMessageReplyVersion,The following statement contains a magic number: Debug.Assert(message.Parameters[2] != null);
Magic Number,IrcDotNet,IrcClient,C:\repos\DarkAutumn_WinterBot\WinterBot\TwitchIrc\IrcClientMessageProcessing.cs,ProcessMessageReplyVersion,The following statement contains a magic number: var server = message.Parameters[2];
Magic Number,IrcDotNet,IrcClient,C:\repos\DarkAutumn_WinterBot\WinterBot\TwitchIrc\IrcClientMessageProcessing.cs,ProcessMessageReplyVersion,The following statement contains a magic number: Debug.Assert(message.Parameters[3] != null);
Magic Number,IrcDotNet,IrcClient,C:\repos\DarkAutumn_WinterBot\WinterBot\TwitchIrc\IrcClientMessageProcessing.cs,ProcessMessageReplyVersion,The following statement contains a magic number: var comments = message.Parameters[3];
Magic Number,IrcDotNet,IrcClient,C:\repos\DarkAutumn_WinterBot\WinterBot\TwitchIrc\IrcClientMessageProcessing.cs,ProcessMessageReplyWhoReply,The following statement contains a magic number: Debug.Assert(message.Parameters[5] != null);
Magic Number,IrcDotNet,IrcClient,C:\repos\DarkAutumn_WinterBot\WinterBot\TwitchIrc\IrcClientMessageProcessing.cs,ProcessMessageReplyWhoReply,The following statement contains a magic number: var user = GetUserFromNickName(message.Parameters[5]);
Magic Number,IrcDotNet,IrcClient,C:\repos\DarkAutumn_WinterBot\WinterBot\TwitchIrc\IrcClientMessageProcessing.cs,ProcessMessageReplyWhoReply,The following statement contains a magic number: Debug.Assert(message.Parameters[2] != null);
Magic Number,IrcDotNet,IrcClient,C:\repos\DarkAutumn_WinterBot\WinterBot\TwitchIrc\IrcClientMessageProcessing.cs,ProcessMessageReplyWhoReply,The following statement contains a magic number: var userName = message.Parameters[2];
Magic Number,IrcDotNet,IrcClient,C:\repos\DarkAutumn_WinterBot\WinterBot\TwitchIrc\IrcClientMessageProcessing.cs,ProcessMessageReplyWhoReply,The following statement contains a magic number: Debug.Assert(message.Parameters[3] != null);
Magic Number,IrcDotNet,IrcClient,C:\repos\DarkAutumn_WinterBot\WinterBot\TwitchIrc\IrcClientMessageProcessing.cs,ProcessMessageReplyWhoReply,The following statement contains a magic number: user.HostName = message.Parameters[3];
Magic Number,IrcDotNet,IrcClient,C:\repos\DarkAutumn_WinterBot\WinterBot\TwitchIrc\IrcClientMessageProcessing.cs,ProcessMessageReplyWhoReply,The following statement contains a magic number: Debug.Assert(message.Parameters[4] != null);
Magic Number,IrcDotNet,IrcClient,C:\repos\DarkAutumn_WinterBot\WinterBot\TwitchIrc\IrcClientMessageProcessing.cs,ProcessMessageReplyWhoReply,The following statement contains a magic number: user.ServerName = message.Parameters[4];
Magic Number,IrcDotNet,IrcClient,C:\repos\DarkAutumn_WinterBot\WinterBot\TwitchIrc\IrcClientMessageProcessing.cs,ProcessMessageReplyWhoReply,The following statement contains a magic number: Debug.Assert(message.Parameters[6] != null);
Magic Number,IrcDotNet,IrcClient,C:\repos\DarkAutumn_WinterBot\WinterBot\TwitchIrc\IrcClientMessageProcessing.cs,ProcessMessageReplyWhoReply,The following statement contains a magic number: var userModeFlags = message.Parameters[6];
Magic Number,IrcDotNet,IrcClient,C:\repos\DarkAutumn_WinterBot\WinterBot\TwitchIrc\IrcClientMessageProcessing.cs,ProcessMessageReplyWhoReply,The following statement contains a magic number: Debug.Assert(message.Parameters[7] != null);
Magic Number,IrcDotNet,IrcClient,C:\repos\DarkAutumn_WinterBot\WinterBot\TwitchIrc\IrcClientMessageProcessing.cs,ProcessMessageReplyWhoReply,The following statement contains a magic number: var lastParamParts = message.Parameters[7].SplitIntoPair(" ");
Magic Number,IrcDotNet,IrcClient,C:\repos\DarkAutumn_WinterBot\WinterBot\TwitchIrc\IrcClientMessageProcessing.cs,ProcessMessageReplyNameReply,The following statement contains a magic number: Debug.Assert(message.Parameters[2] != null);
Magic Number,IrcDotNet,IrcClient,C:\repos\DarkAutumn_WinterBot\WinterBot\TwitchIrc\IrcClientMessageProcessing.cs,ProcessMessageReplyNameReply,The following statement contains a magic number: var channel = GetChannelFromName(message.Parameters[2]);
Magic Number,IrcDotNet,IrcClient,C:\repos\DarkAutumn_WinterBot\WinterBot\TwitchIrc\IrcClientMessageProcessing.cs,ProcessMessageReplyNameReply,The following statement contains a magic number: if (channel != null)              {                  Debug.Assert(message.Parameters[1] != null);                  Debug.Assert(message.Parameters[1].Length == 1);                  channel.HandleTypeChanged(GetChannelType(message.Parameters[1][0]));                    Debug.Assert(message.Parameters[3] != null);                  foreach (var userId in message.Parameters[3].Split(' '))                  {                      if (userId.Length == 0)                          return;                        // Find user by nick name and add it to collection of channel users.                      var userNickNameAndMode = GetUserModeAndNickName(userId);                      var user = GetUserFromNickName(userNickNameAndMode.Item1);                      channel.HandleUserNameReply(new IrcChannelUser(user' userNickNameAndMode.Item2));                  }              }
Magic Number,IrcDotNet,IrcClient,C:\repos\DarkAutumn_WinterBot\WinterBot\TwitchIrc\IrcClientMessageProcessing.cs,ProcessMessageReplyNameReply,The following statement contains a magic number: if (channel != null)              {                  Debug.Assert(message.Parameters[1] != null);                  Debug.Assert(message.Parameters[1].Length == 1);                  channel.HandleTypeChanged(GetChannelType(message.Parameters[1][0]));                    Debug.Assert(message.Parameters[3] != null);                  foreach (var userId in message.Parameters[3].Split(' '))                  {                      if (userId.Length == 0)                          return;                        // Find user by nick name and add it to collection of channel users.                      var userNickNameAndMode = GetUserModeAndNickName(userId);                      var user = GetUserFromNickName(userNickNameAndMode.Item1);                      channel.HandleUserNameReply(new IrcChannelUser(user' userNickNameAndMode.Item2));                  }              }
Magic Number,IrcDotNet,IrcClient,C:\repos\DarkAutumn_WinterBot\WinterBot\TwitchIrc\IrcClientMessageProcessing.cs,ProcessMessageReplyLinks,The following statement contains a magic number: Debug.Assert(message.Parameters[2] != null);
Magic Number,IrcDotNet,IrcClient,C:\repos\DarkAutumn_WinterBot\WinterBot\TwitchIrc\IrcClientMessageProcessing.cs,ProcessMessageReplyLinks,The following statement contains a magic number: var clientServerHostName = message.Parameters[2];
Magic Number,IrcDotNet,IrcClient,C:\repos\DarkAutumn_WinterBot\WinterBot\TwitchIrc\IrcClientMessageProcessing.cs,ProcessMessageReplyLinks,The following statement contains a magic number: Debug.Assert(message.Parameters[3] != null);
Magic Number,IrcDotNet,IrcClient,C:\repos\DarkAutumn_WinterBot\WinterBot\TwitchIrc\IrcClientMessageProcessing.cs,ProcessMessageReplyLinks,The following statement contains a magic number: var infoParts = message.Parameters[3].SplitIntoPair(" ");
Magic Number,IrcDotNet,IrcClient,C:\repos\DarkAutumn_WinterBot\WinterBot\TwitchIrc\IrcClientMessageProcessing.cs,ProcessMessageReplyYouAreService,The following statement contains a magic number: this.localUser.NickName = message.Parameters[1].Split(' ')[3];
Magic Number,IrcDotNet,IrcClient,C:\repos\DarkAutumn_WinterBot\WinterBot\TwitchIrc\IrcClientMessageProcessing.cs,ProcessMessageReplyTime,The following statement contains a magic number: Debug.Assert(message.Parameters[2] != null);
Magic Number,IrcDotNet,IrcClient,C:\repos\DarkAutumn_WinterBot\WinterBot\TwitchIrc\IrcClientMessageProcessing.cs,ProcessMessageReplyTime,The following statement contains a magic number: var dateTime = message.Parameters[2];
Magic Number,IrcDotNet,IrcClient,C:\repos\DarkAutumn_WinterBot\WinterBot\TwitchIrc\IrcClientMessageProcessing.cs,EnsureChannelName,The following statement contains a magic number: if (!this.IsChannelName(c) || c.Length > 50 || c.IndexOfAny(new[]{' '' ''''':'}) != -1)              {                  var t = new ArgumentException(string.Format("collection contains an invalid Channelname ({0})!"' c));                    t.Data["ChannelNameRequirements"] = "http://www.irchelp.org/irchelp/rfc/rfc2811.txt";                  throw t;              }
Magic Number,IrcDotNet,IrcClient,C:\repos\DarkAutumn_WinterBot\WinterBot\TwitchIrc\IrcClientMessageProcessing.cs,SendMessageChannelMode,The following statement contains a magic number: if (modeParameters != null)              {                  var modeParametersArray = modeParameters.ToArray();                  if (modeParametersArray.Length > 3)                      throw new ArgumentException(Properties.Resources.MessageTooManyModeParameters);                  modeParametersList = string.Join("'"' modeParametersArray);              }
Magic Number,IrcDotNet,IrcClient,C:\repos\DarkAutumn_WinterBot\WinterBot\TwitchIrc\IrcClientMessageProcessing.cs,IrcClient,The following statement contains a magic number: this.numericMessageProcessors = new Dictionary<int' MessageProcessor>(1000);
Magic Number,IrcDotNet,IrcClient,C:\repos\DarkAutumn_WinterBot\WinterBot\TwitchIrc\IrcClientMessageProcessing.cs,InitializeMessageProcessors,The following statement contains a magic number: foreach (var method in this.GetAttributedMethods<MessageProcessorAttribute' MessageProcessor>())              {                  var attribute = method.Item1;                  var methodDelegate = method.Item2;                    var commandRangeParts = attribute.CommandName.Split('-');                  if (commandRangeParts.Length == 2)                  {                      // Numeric command range was defined.                      var commandRangeStart = int.Parse(commandRangeParts[0]);                      var commandRangeEnd = int.Parse(commandRangeParts[1]);                      for (int code = commandRangeStart; code <= commandRangeEnd; code++)                          this.numericMessageProcessors.Add(code' methodDelegate);                  }                  else if (commandRangeParts.Length == 1)                  {                      // Single command name was defined. Check whether it is numeric or alphabetic.                      int commandCode;                      if (int.TryParse(attribute.CommandName' out commandCode))                          // Command is numeric.                          this.numericMessageProcessors.Add(commandCode' methodDelegate);                      else                          // Command is alphabetic.                          this.messageProcessors.Add(attribute.CommandName' methodDelegate);                  }                  else                  {                      throw new ProtocolViolationException(string.Format(                          Properties.Resources.MessageInvalidCommandDefinition' attribute.CommandName));                  }              }
Magic Number,IrcDotNet,IrcClient,C:\repos\DarkAutumn_WinterBot\WinterBot\TwitchIrc\IrcClientMessageProcessing.cs,WritePendingMessages,The following statement contains a magic number: try              {                  // Send pending messages in queue until flood preventer indicates to stop.                  long sendDelay = 0;                    while (this.messageSendQueue.Count > 0)                  {                      Debug.Assert(this.messageSendQueue.Count < 100);                        // Check that flood preventer currently permits sending of messages.                      if (this.floodPreventer != null)                      {                          sendDelay = this.floodPreventer.GetSendDelay();                          if (sendDelay > 0)                          {                              IrcSource.Log.FloodPrevented(messageSendQueue.Peek().Item1);                              break;                          }                      }                        // Send next message in queue.                      var message = this.messageSendQueue.Dequeue();                      var line = message.Item1;                      var token = message.Item2;                      var lineBuffer = this.textEncoding.GetBytes(line);                      SendAsync(lineBuffer' token);                        Logger.WriteLine("!<<< {0}"' TraceEventType.Verbose' line);                      IrcSource.Log.MessageQueued(line);                        // Tell flood preventer mechanism that message has just been sent.                      if (this.floodPreventer != null)                          this.floodPreventer.HandleMessageSent();                  }                    // Make timer fire when next message in send queue should be written.                  this.sendTimer.Change(Math.Max(sendDelay' minimumSendWaitTime)' Timeout.Infinite);              }              catch (SocketException exSocket)              {                  HandleSocketError(exSocket);              }              catch (ObjectDisposedException)              {                  // Ignore.              }  #if !DEBUG              catch (Exception ex)              {                  OnError(new IrcErrorEventArgs(ex));              }  #endif              finally              {              }
Magic Number,IrcDotNet,IrcTargetMask,C:\repos\DarkAutumn_WinterBot\WinterBot\TwitchIrc\IrcTargetMask.cs,IrcTargetMask,The following statement contains a magic number: if (Properties.Resources.MessageTargetMaskTooShort.Length < 2)                  throw new ArgumentException(Properties.Resources.MessageTargetMaskTooShort' "targetMask");
Magic Number,IrcDotNet,TextUtilities,C:\repos\DarkAutumn_WinterBot\WinterBot\TwitchIrc\TextUtilities.cs,Quote,The following statement contains a magic number: var textBuilder = new StringBuilder(value.Length * 2);
Magic Number,IrcDotNet.Ctcp,CtcpClient,C:\repos\DarkAutumn_WinterBot\WinterBot\TwitchIrc\Ctcp\CtcpClient.cs,ReadMessage,The following statement contains a magic number: if (previewMessageEventArgs.Text.First() == taggedDataDelimeterChar &&                  previewMessageEventArgs.Text.Last() == taggedDataDelimeterChar)              {                  if (previewMessageEventArgs.Source is IrcUser)                  {                      var message = new CtcpMessage();                      message.Source = (IrcUser)previewMessageEventArgs.Source;                      message.Targets = previewMessageEventArgs.Targets;                      message.IsResponse = isNotice;                        // Parse tagged data into message.                      var dequotedText = LowLevelDequote(CtcpDequote(previewMessageEventArgs.Text.Substring(                          1' previewMessageEventArgs.Text.Length - 2)));                      var firstSpaceIndex = dequotedText.IndexOf(' ');                      if (firstSpaceIndex == -1)                      {                          message.Tag = dequotedText;                          message.Data = null;                      }                      else                      {                          message.Tag = dequotedText.Substring(0' firstSpaceIndex);                          message.Data = dequotedText.Substring(firstSpaceIndex + 1).TrimStart(':');                      }                        ReadMessage(message);                      previewMessageEventArgs.Handled = true;                  }              }
Magic Number,Yaaf.Utils.Logging,TraceActivity,C:\repos\DarkAutumn_WinterBot\WinterBot\TwitchIrc\Logging\Logger.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  return this.Activity.GetHashCode() * 397;              }
