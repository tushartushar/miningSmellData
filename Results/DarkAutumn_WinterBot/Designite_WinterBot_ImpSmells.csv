Implementation smell,Namespace,Class,File,Method,Description
Long Method,Winter,WinterBot,C:\repos\DarkAutumn_WinterBot\WinterBot\WinterBot\WinterBot.cs,Go,The method has 116 lines of code.
Complex Method,Winter,AutoPoll,C:\repos\DarkAutumn_WinterBot\WinterBot\WinterBot\AutoPoll.cs,bot_MessageReceived,Cyclomatic complexity of the method is 8
Complex Method,Winter,TimeoutController,C:\repos\DarkAutumn_WinterBot\WinterBot\WinterBot\TimeoutController.cs,ClearChat,Cyclomatic complexity of the method is 8
Complex Method,Winter,TwitchImageSet,C:\repos\DarkAutumn_WinterBot\WinterBot\WinterBot\TwitchHttp.cs,TooManySymbols,Cyclomatic complexity of the method is 8
Complex Method,Winter,TwitchClient,C:\repos\DarkAutumn_WinterBot\WinterBot\WinterBot\TwitchClient.cs,TimeoutThread,Cyclomatic complexity of the method is 8
Complex Method,Winter,WinterBot,C:\repos\DarkAutumn_WinterBot\WinterBot\WinterBot\WinterBot.cs,Go,Cyclomatic complexity of the method is 11
Long Parameter List,Winter,TimeoutController,C:\repos\DarkAutumn_WinterBot\WinterBot\WinterBot\TimeoutController.cs,ChangeMode,The method has 5 parameters. Parameters: sender' user' value' type' curr
Long Statement,Winter,AutoPoll,C:\repos\DarkAutumn_WinterBot\WinterBot\WinterBot\AutoPoll.cs,ReportTotal,The length of the statement  "            sender.SendResponse(Importance.Med' msg' top.Option' top.Votes' "(" + string.Join("' "' votes.Select(v => string.Format("Option {0}: {1} votes"' v.Option' v.Votes))) + ".)"); " is 174.
Long Statement,Winter,ChatLog,C:\repos\DarkAutumn_WinterBot\WinterBot\WinterBot\ChatLogger.cs,Init,The length of the statement  "            bot.MessageReceived += delegate(WinterBot sender' TwitchUser user' string text) { log.Add(new ChatMessage(user' text)); }; " is 122.
Long Statement,Winter,ChatLog,C:\repos\DarkAutumn_WinterBot\WinterBot\WinterBot\ChatLogger.cs,Init,The length of the statement  "            bot.ActionReceived += delegate(WinterBot sender' TwitchUser user' string text) { log.Add(new ChatAction(user' text)); }; " is 120.
Long Statement,Winter,ChatLog,C:\repos\DarkAutumn_WinterBot\WinterBot\WinterBot\ChatLogger.cs,Init,The length of the statement  "            bot.UserTimedOut += delegate(WinterBot sender' TwitchUser user' int duration) { log.Add(new ChatTimeout(user' duration)); }; " is 124.
Long Statement,Winter,TimeoutController,C:\repos\DarkAutumn_WinterBot\WinterBot\WinterBot\TimeoutController.cs,Permit,The length of the statement  "                    m_winterBot.SendResponse(Importance.Med' "{0} -> {1} has been granted permission to post a single link."' user.Name' target.Name); " is 130.
Long Statement,Winter,TimeoutController,C:\repos\DarkAutumn_WinterBot\WinterBot\WinterBot\TimeoutController.cs,Spam,The length of the statement  "                    sender.SendResponse(Importance.High' "All messages containing '{0}' will receive a {1} second timeout."' value' timeout); " is 121.
Long Statement,Winter,TimeoutController,C:\repos\DarkAutumn_WinterBot\WinterBot\WinterBot\TimeoutController.cs,CheckMessage,The length of the statement  "                    m_winterBot.WriteDiagnostic(DiagnosticFacility.Ban' "Banned {0} for {1}."' user.Name' string.Join("' "' urls.Select(url => url.FullUrl))); " is 138.
Long Statement,Winter,TimeoutController,C:\repos\DarkAutumn_WinterBot\WinterBot\WinterBot\TimeoutController.cs,CheckMessage,The length of the statement  "                else if ((m_urlOptions.ShouldEnforce(user) || m_denyList.Contains(user)) && (!MatchesAll(urls' m_urlWhitelist) || MatchesAny(urls' m_urlBlacklist))) " is 148.
Long Statement,Winter,TimeoutController,C:\repos\DarkAutumn_WinterBot\WinterBot\WinterBot\TimeoutController.cs,ClearChat,The length of the statement  "                    sender.Send(MessageType.Timeout' Importance.High' "{0}: {1} ({2} minute timeout.)"' user.Name' clearReason' duration / 60); " is 123.
Long Statement,Winter,TimeoutController,C:\repos\DarkAutumn_WinterBot\WinterBot\WinterBot\TimeoutController.cs,ClearChat,The length of the statement  "                    sender.Send(MessageType.Timeout' Importance.High' "{0}: {1} ({2} hour timeout.)"' user.Name' clearReason' duration / 3600); " is 123.
Long Statement,Winter,TwitchHttp,C:\repos\DarkAutumn_WinterBot\WinterBot\WinterBot\TwitchHttp.cs,EnsureEmoticonsLoaded,The length of the statement  "                    ThreadPool.QueueUserWorkItem(DownloadSet' new Tuple<IEnumerable<TwitchEmoticon>' int>(ImageSet.GetEmoticons(set)' set)); " is 120.
Long Statement,Winter,TwitchHttp,C:\repos\DarkAutumn_WinterBot\WinterBot\WinterBot\TwitchHttp.cs,PollFollower,The length of the statement  "                string url = string.Format("https://api.twitch.tv/kraken/channels/{0}/follows?direction=desc&limit=1&offset=0"' channel); " is 121.
Long Statement,Winter,TwitchHttp,C:\repos\DarkAutumn_WinterBot\WinterBot\WinterBot\TwitchHttp.cs,PollFollower,The length of the statement  "                string url = string.Format("https://api.twitch.tv/kraken/channels/{0}/follows?direction=desc&offset={1}&limit={2}"' channel' count' limit); " is 139.
Long Statement,Winter,IniSection,C:\repos\DarkAutumn_WinterBot\WinterBot\WinterBot\IniReader.cs,GetValue,The length of the statement  "            return (from r in m_pairs where r.Key.Equals(key' StringComparison.InvariantCultureIgnoreCase) select r.Value).FirstOrDefault(); " is 128.
Long Statement,Winter,IniReader,C:\repos\DarkAutumn_WinterBot\WinterBot\WinterBot\IniReader.cs,GetSectionByName,The length of the statement  "            return (from s in Sections where s.Name.Equals(name' StringComparison.CurrentCultureIgnoreCase) select s).FirstOrDefault(); " is 123.
Long Statement,Winter,UserCommands,C:\repos\DarkAutumn_WinterBot\WinterBot\WinterBot\UserCommands.cs,ListCommands,The length of the statement  "            string[] cmds = (from c in m_commands.Values where c.AccessRequired <= level orderby c.Command select c.Command).ToArray(); " is 123.
Complex Conditional,Winter,Extensions,C:\repos\DarkAutumn_WinterBot\WinterBot\WinterBot\Helpers.cs,IsRegex,The conditional expression  "c == '.' || c == '/' || c == '_' || c == '-' || c == '=' || c == '&' || c == '%'"  is complex.
Complex Conditional,Winter,TimeoutController,C:\repos\DarkAutumn_WinterBot\WinterBot\WinterBot\TimeoutController.cs,CheckMessage,The conditional expression  "(m_urlOptions.ShouldEnforce(user) || m_denyList.Contains(user)) && (!MatchesAll(urls' m_urlWhitelist) || MatchesAny(urls' m_urlBlacklist))"  is complex.
Complex Conditional,Winter,TwitchClient,C:\repos\DarkAutumn_WinterBot\WinterBot\WinterBot\TwitchClient.cs,ParseUserColor,The conditional expression  "parts.Length != 3 || parts[0] != "USERCOLOR" || parts[2].Length < 2 || parts[2][0] != '#'"  is complex.
Empty Catch Block,Winter,TwitchHttp,C:\repos\DarkAutumn_WinterBot\WinterBot\WinterBot\TwitchHttp.cs,DownloadSet,The method has an empty catch block.
Empty Catch Block,Winter,TwitchEmoticon,C:\repos\DarkAutumn_WinterBot\WinterBot\WinterBot\TwitchHttp.cs,TwitchEmoticon,The method has an empty catch block.
Magic Number,Winter,AutoMessage,C:\repos\DarkAutumn_WinterBot\WinterBot\WinterBot\AutoMessage.cs,bot_Tick,The following statement contains a magic number: if (m_lastMessage.Elapsed().TotalMinutes >= m_msgOptions.Delay &&                  m_totalMessages >= m_msgOptions.MessageDelay &&                  sender.LastMessageSent.Elapsed().TotalSeconds >= 45)              {                  m_lastMessage = DateTime.Now;                  m_totalMessages = 0;                    var messages = m_msgOptions.Messages;                  if (messages.Length == 0)                      return;                    m_curr %= messages.Length;                    string msg = null;                  if (m_random != null)                      msg = messages[m_random.Next(messages.Length)];                  else                      msg = messages[m_curr++];                    sender.SendMessage(Importance.Low' msg);              }
Magic Number,Winter,AsyncTaskManager,C:\repos\DarkAutumn_WinterBot\WinterBot\WinterBot\AsyncTaskManager.cs,ThreadProc,The following statement contains a magic number: TimeSpan minSleep = new TimeSpan(0' 0' 0' 0' 250);
Magic Number,Winter,Url,C:\repos\DarkAutumn_WinterBot\WinterBot\WinterBot\Helpers.cs,Url,The following statement contains a magic number: if (groups.Count != 4)                  throw new InvalidOperationException("Invalid match passed to Url.");
Magic Number,Winter,Url,C:\repos\DarkAutumn_WinterBot\WinterBot\WinterBot\Helpers.cs,Url,The following statement contains a magic number: Extension = groups[2].Value;
Magic Number,Winter,Extensions,C:\repos\DarkAutumn_WinterBot\WinterBot\WinterBot\Helpers.cs,FindUrls,The following statement contains a magic number: var urls = from Match match in s_url.Matches(self)                         let groups = match.Groups                         where s_urlExtensions.Contains(groups[groups.Count - 2].Value)                         select new Url(match);
Magic Number,Winter,TimeoutController,C:\repos\DarkAutumn_WinterBot\WinterBot\WinterBot\TimeoutController.cs,Spam,The following statement contains a magic number: if (value.Contains(' '))              {                  string[] split = value.Split(new char[] { ' ' }' 2);                  if (split[0] == "-ban")                  {                      ban = true;                      value = split[1];                  }                  else if (split[0].Length > timeE.Length && split[0].StartsWith(timeE))                  {                      string strtime = split[0].Substring(timeE.Length);                      if (!int.TryParse(strtime' out timeout))                      {                          sender.SendResponse(Importance.High' "Usage: !spam [-time=??] text to auto timeout");                          return;                      }                        value = split[1];                      if (timeout <= 0)                          timeout = 1;                  }              }
Magic Number,Winter,TimeoutController,C:\repos\DarkAutumn_WinterBot\WinterBot\WinterBot\TimeoutController.cs,TooManyCaps,The following statement contains a magic number: int percent = 100 * upper / total;
Magic Number,Winter,TimeoutController,C:\repos\DarkAutumn_WinterBot\WinterBot\WinterBot\TimeoutController.cs,Allowed,The following statement contains a magic number: if (c < 255)                  return true;
Magic Number,Winter,TimeoutController,C:\repos\DarkAutumn_WinterBot\WinterBot\WinterBot\TimeoutController.cs,GetEffectiveCount,The following statement contains a magic number: int diff = (int)(DateTime.Now - timeout.LastTimeout).TotalMinutes / 15;
Magic Number,Winter,TimeoutController,C:\repos\DarkAutumn_WinterBot\WinterBot\WinterBot\TimeoutController.cs,ClearChat,The following statement contains a magic number: if (!m_timeouts.TryGetValue(user' out timeout))              {                  timeout = m_timeouts[user] = new TimeoutCount(now);              }              else              {                  shouldMessage &= (DateTime.Now > timeout.LastTimeout) && (DateTime.Now - timeout.LastTimeout).TotalMinutes > 60;                  timeout.Count = GetEffectiveCount(timeout) + 1;              }
Magic Number,Winter,TimeoutController,C:\repos\DarkAutumn_WinterBot\WinterBot\WinterBot\TimeoutController.cs,ClearChat,The following statement contains a magic number: switch (timeout.Count)              {                  case 1:                  case 2:                      duration = 1;                      break;                    case 3:                      shouldMessage = !string.IsNullOrEmpty(clearReason);                      duration = 5 * 60;                      break;                    case 4:                      shouldMessage = !string.IsNullOrEmpty(clearReason);                      duration = 10 * 60;                      break;                    case 5:                      shouldMessage = !string.IsNullOrEmpty(clearReason);                      duration = 8 * 60 * 60;                      break;              }
Magic Number,Winter,TimeoutController,C:\repos\DarkAutumn_WinterBot\WinterBot\WinterBot\TimeoutController.cs,ClearChat,The following statement contains a magic number: switch (timeout.Count)              {                  case 1:                  case 2:                      duration = 1;                      break;                    case 3:                      shouldMessage = !string.IsNullOrEmpty(clearReason);                      duration = 5 * 60;                      break;                    case 4:                      shouldMessage = !string.IsNullOrEmpty(clearReason);                      duration = 10 * 60;                      break;                    case 5:                      shouldMessage = !string.IsNullOrEmpty(clearReason);                      duration = 8 * 60 * 60;                      break;              }
Magic Number,Winter,TimeoutController,C:\repos\DarkAutumn_WinterBot\WinterBot\WinterBot\TimeoutController.cs,ClearChat,The following statement contains a magic number: switch (timeout.Count)              {                  case 1:                  case 2:                      duration = 1;                      break;                    case 3:                      shouldMessage = !string.IsNullOrEmpty(clearReason);                      duration = 5 * 60;                      break;                    case 4:                      shouldMessage = !string.IsNullOrEmpty(clearReason);                      duration = 10 * 60;                      break;                    case 5:                      shouldMessage = !string.IsNullOrEmpty(clearReason);                      duration = 8 * 60 * 60;                      break;              }
Magic Number,Winter,TimeoutController,C:\repos\DarkAutumn_WinterBot\WinterBot\WinterBot\TimeoutController.cs,ClearChat,The following statement contains a magic number: switch (timeout.Count)              {                  case 1:                  case 2:                      duration = 1;                      break;                    case 3:                      shouldMessage = !string.IsNullOrEmpty(clearReason);                      duration = 5 * 60;                      break;                    case 4:                      shouldMessage = !string.IsNullOrEmpty(clearReason);                      duration = 10 * 60;                      break;                    case 5:                      shouldMessage = !string.IsNullOrEmpty(clearReason);                      duration = 8 * 60 * 60;                      break;              }
Magic Number,Winter,TimeoutController,C:\repos\DarkAutumn_WinterBot\WinterBot\WinterBot\TimeoutController.cs,ClearChat,The following statement contains a magic number: switch (timeout.Count)              {                  case 1:                  case 2:                      duration = 1;                      break;                    case 3:                      shouldMessage = !string.IsNullOrEmpty(clearReason);                      duration = 5 * 60;                      break;                    case 4:                      shouldMessage = !string.IsNullOrEmpty(clearReason);                      duration = 10 * 60;                      break;                    case 5:                      shouldMessage = !string.IsNullOrEmpty(clearReason);                      duration = 8 * 60 * 60;                      break;              }
Magic Number,Winter,TimeoutController,C:\repos\DarkAutumn_WinterBot\WinterBot\WinterBot\TimeoutController.cs,ClearChat,The following statement contains a magic number: switch (timeout.Count)              {                  case 1:                  case 2:                      duration = 1;                      break;                    case 3:                      shouldMessage = !string.IsNullOrEmpty(clearReason);                      duration = 5 * 60;                      break;                    case 4:                      shouldMessage = !string.IsNullOrEmpty(clearReason);                      duration = 10 * 60;                      break;                    case 5:                      shouldMessage = !string.IsNullOrEmpty(clearReason);                      duration = 8 * 60 * 60;                      break;              }
Magic Number,Winter,TimeoutController,C:\repos\DarkAutumn_WinterBot\WinterBot\WinterBot\TimeoutController.cs,ClearChat,The following statement contains a magic number: switch (timeout.Count)              {                  case 1:                  case 2:                      duration = 1;                      break;                    case 3:                      shouldMessage = !string.IsNullOrEmpty(clearReason);                      duration = 5 * 60;                      break;                    case 4:                      shouldMessage = !string.IsNullOrEmpty(clearReason);                      duration = 10 * 60;                      break;                    case 5:                      shouldMessage = !string.IsNullOrEmpty(clearReason);                      duration = 8 * 60 * 60;                      break;              }
Magic Number,Winter,TimeoutController,C:\repos\DarkAutumn_WinterBot\WinterBot\WinterBot\TimeoutController.cs,ClearChat,The following statement contains a magic number: switch (timeout.Count)              {                  case 1:                  case 2:                      duration = 1;                      break;                    case 3:                      shouldMessage = !string.IsNullOrEmpty(clearReason);                      duration = 5 * 60;                      break;                    case 4:                      shouldMessage = !string.IsNullOrEmpty(clearReason);                      duration = 10 * 60;                      break;                    case 5:                      shouldMessage = !string.IsNullOrEmpty(clearReason);                      duration = 8 * 60 * 60;                      break;              }
Magic Number,Winter,TimeoutController,C:\repos\DarkAutumn_WinterBot\WinterBot\WinterBot\TimeoutController.cs,ClearChat,The following statement contains a magic number: switch (timeout.Count)              {                  case 1:                  case 2:                      duration = 1;                      break;                    case 3:                      shouldMessage = !string.IsNullOrEmpty(clearReason);                      duration = 5 * 60;                      break;                    case 4:                      shouldMessage = !string.IsNullOrEmpty(clearReason);                      duration = 10 * 60;                      break;                    case 5:                      shouldMessage = !string.IsNullOrEmpty(clearReason);                      duration = 8 * 60 * 60;                      break;              }
Magic Number,Winter,TimeoutController,C:\repos\DarkAutumn_WinterBot\WinterBot\WinterBot\TimeoutController.cs,ClearChat,The following statement contains a magic number: switch (timeout.Count)              {                  case 1:                  case 2:                      duration = 1;                      break;                    case 3:                      shouldMessage = !string.IsNullOrEmpty(clearReason);                      duration = 5 * 60;                      break;                    case 4:                      shouldMessage = !string.IsNullOrEmpty(clearReason);                      duration = 10 * 60;                      break;                    case 5:                      shouldMessage = !string.IsNullOrEmpty(clearReason);                      duration = 8 * 60 * 60;                      break;              }
Magic Number,Winter,TimeoutController,C:\repos\DarkAutumn_WinterBot\WinterBot\WinterBot\TimeoutController.cs,ClearChat,The following statement contains a magic number: switch (timeout.Count)              {                  case 1:                  case 2:                      duration = 1;                      break;                    case 3:                      shouldMessage = !string.IsNullOrEmpty(clearReason);                      duration = 5 * 60;                      break;                    case 4:                      shouldMessage = !string.IsNullOrEmpty(clearReason);                      duration = 10 * 60;                      break;                    case 5:                      shouldMessage = !string.IsNullOrEmpty(clearReason);                      duration = 8 * 60 * 60;                      break;              }
Magic Number,Winter,TimeoutController,C:\repos\DarkAutumn_WinterBot\WinterBot\WinterBot\TimeoutController.cs,ClearChat,The following statement contains a magic number: if (shouldMessage)              {                  if (duration == 1)                      sender.Send(MessageType.Timeout' Importance.Med' "{0}: {1} (This is not a timeout.)"' user.Name' clearReason);                  else if (duration < 60)                      sender.Send(MessageType.Timeout' Importance.High' "{0}: {1}"' user.Name' clearReason);                  else if (duration < 3600)                      sender.Send(MessageType.Timeout' Importance.High' "{0}: {1} ({2} minute timeout.)"' user.Name' clearReason' duration / 60);                  else                      sender.Send(MessageType.Timeout' Importance.High' "{0}: {1} ({2} hour timeout.)"' user.Name' clearReason' duration / 3600);              }
Magic Number,Winter,TimeoutController,C:\repos\DarkAutumn_WinterBot\WinterBot\WinterBot\TimeoutController.cs,ClearChat,The following statement contains a magic number: if (shouldMessage)              {                  if (duration == 1)                      sender.Send(MessageType.Timeout' Importance.Med' "{0}: {1} (This is not a timeout.)"' user.Name' clearReason);                  else if (duration < 60)                      sender.Send(MessageType.Timeout' Importance.High' "{0}: {1}"' user.Name' clearReason);                  else if (duration < 3600)                      sender.Send(MessageType.Timeout' Importance.High' "{0}: {1} ({2} minute timeout.)"' user.Name' clearReason' duration / 60);                  else                      sender.Send(MessageType.Timeout' Importance.High' "{0}: {1} ({2} hour timeout.)"' user.Name' clearReason' duration / 3600);              }
Magic Number,Winter,TimeoutController,C:\repos\DarkAutumn_WinterBot\WinterBot\WinterBot\TimeoutController.cs,ClearChat,The following statement contains a magic number: if (shouldMessage)              {                  if (duration == 1)                      sender.Send(MessageType.Timeout' Importance.Med' "{0}: {1} (This is not a timeout.)"' user.Name' clearReason);                  else if (duration < 60)                      sender.Send(MessageType.Timeout' Importance.High' "{0}: {1}"' user.Name' clearReason);                  else if (duration < 3600)                      sender.Send(MessageType.Timeout' Importance.High' "{0}: {1} ({2} minute timeout.)"' user.Name' clearReason' duration / 60);                  else                      sender.Send(MessageType.Timeout' Importance.High' "{0}: {1} ({2} hour timeout.)"' user.Name' clearReason' duration / 3600);              }
Magic Number,Winter,TimeoutController,C:\repos\DarkAutumn_WinterBot\WinterBot\WinterBot\TimeoutController.cs,ClearChat,The following statement contains a magic number: if (shouldMessage)              {                  if (duration == 1)                      sender.Send(MessageType.Timeout' Importance.Med' "{0}: {1} (This is not a timeout.)"' user.Name' clearReason);                  else if (duration < 60)                      sender.Send(MessageType.Timeout' Importance.High' "{0}: {1}"' user.Name' clearReason);                  else if (duration < 3600)                      sender.Send(MessageType.Timeout' Importance.High' "{0}: {1} ({2} minute timeout.)"' user.Name' clearReason' duration / 60);                  else                      sender.Send(MessageType.Timeout' Importance.High' "{0}: {1} ({2} hour timeout.)"' user.Name' clearReason' duration / 3600);              }
Magic Number,Winter,UrlMatch,C:\repos\DarkAutumn_WinterBot\WinterBot\WinterBot\TimeoutController.cs,UrlMatch,The following statement contains a magic number: if (str.StartsWith("http://"' StringComparison.CurrentCultureIgnoreCase))                  str = str.Substring(7);
Magic Number,Winter,AutoPollOptions,C:\repos\DarkAutumn_WinterBot\WinterBot\WinterBot\Options.cs,AutoPollOptions,The following statement contains a magic number: if (m_maxValue < 2)                  m_maxValue = 2;              else if (m_maxValue > 9)                  m_maxValue = 9;
Magic Number,Winter,AutoPollOptions,C:\repos\DarkAutumn_WinterBot\WinterBot\WinterBot\Options.cs,AutoPollOptions,The following statement contains a magic number: if (m_maxValue < 2)                  m_maxValue = 2;              else if (m_maxValue > 9)                  m_maxValue = 9;
Magic Number,Winter,AutoPollOptions,C:\repos\DarkAutumn_WinterBot\WinterBot\WinterBot\Options.cs,AutoPollOptions,The following statement contains a magic number: if (m_maxValue < 2)                  m_maxValue = 2;              else if (m_maxValue > 9)                  m_maxValue = 9;
Magic Number,Winter,AutoPollOptions,C:\repos\DarkAutumn_WinterBot\WinterBot\WinterBot\Options.cs,AutoPollOptions,The following statement contains a magic number: if (m_maxValue < 2)                  m_maxValue = 2;              else if (m_maxValue > 9)                  m_maxValue = 9;
Magic Number,Winter,AutoPollOptions,C:\repos\DarkAutumn_WinterBot\WinterBot\WinterBot\Options.cs,AutoPollOptions,The following statement contains a magic number: if (m_reportTime < 10)                  m_reportTime = 10;
Magic Number,Winter,AutoPollOptions,C:\repos\DarkAutumn_WinterBot\WinterBot\WinterBot\Options.cs,AutoPollOptions,The following statement contains a magic number: if (m_reportTime < 10)                  m_reportTime = 10;
Magic Number,Winter,TwitchHttp,C:\repos\DarkAutumn_WinterBot\WinterBot\WinterBot\TwitchHttp.cs,FollowerThreadProc,The following statement contains a magic number: while (true)              {                  foreach (var channel in GetFollowChannels())                      PollFollower(channel);                    Thread.Sleep(15000);              }
Magic Number,Winter,TwitchHttp,C:\repos\DarkAutumn_WinterBot\WinterBot\WinterBot\TwitchHttp.cs,ThreadProc,The following statement contains a magic number: const int minSleep = 250;
Magic Number,Winter,TwitchHttp,C:\repos\DarkAutumn_WinterBot\WinterBot\WinterBot\TwitchHttp.cs,ThreadProc,The following statement contains a magic number: while (true)              {                  TimeSpan totalTime = new TimeSpan(0' 1' 0);                  DateTime start = DateTime.Now;                    if (ImageSet == null)                  {                      LoadEmoticons();                      Thread.Sleep(15000);                  }                    foreach (var channel in GetChannels())                  {                      PollChannel(channel);                      Thread.Sleep(15000);                  }                                    totalTime = totalTime.Subtract(DateTime.Now - start);                  if (totalTime.TotalMilliseconds >= minSleep)                      Thread.Sleep((int)totalTime.TotalMilliseconds);              }
Magic Number,Winter,TwitchHttp,C:\repos\DarkAutumn_WinterBot\WinterBot\WinterBot\TwitchHttp.cs,ThreadProc,The following statement contains a magic number: while (true)              {                  TimeSpan totalTime = new TimeSpan(0' 1' 0);                  DateTime start = DateTime.Now;                    if (ImageSet == null)                  {                      LoadEmoticons();                      Thread.Sleep(15000);                  }                    foreach (var channel in GetChannels())                  {                      PollChannel(channel);                      Thread.Sleep(15000);                  }                                    totalTime = totalTime.Subtract(DateTime.Now - start);                  if (totalTime.TotalMilliseconds >= minSleep)                      Thread.Sleep((int)totalTime.TotalMilliseconds);              }
Magic Number,Winter,TwitchHttp,C:\repos\DarkAutumn_WinterBot\WinterBot\WinterBot\TwitchHttp.cs,PollFollower,The following statement contains a magic number: if (m_lastFollow == DateTime.MinValue)              {                  string url = string.Format("https://api.twitch.tv/kraken/channels/{0}/follows?direction=desc&limit=1&offset=0"' channel);                  JsonFollows follows = GetUrl<JsonFollows>(GetUrl(url));                    var follow = JsonConvert.DeserializeObject<JsonFollows>(GetUrl(url));                    lock (m_sync)                      m_channelFollowers[channel] = DateTime.Parse(follow.follows[0].created_at);              }              else              {                  DateTime curr = DateTime.MinValue;                  bool first = true;                  int count = 0;                  int limit = 25;                  bool done = false;                    List<string> followers = new List<string>();                  string url = string.Format("https://api.twitch.tv/kraken/channels/{0}/follows?direction=desc&offset={1}&limit={2}"' channel' count' limit);                  do                  {                      count += limit;                        JsonFollows follows = GetUrl<JsonFollows>(url);                      if (follows == null)                          break;                      foreach (var follow in follows.follows)                      {                          DateTime last = DateTime.Parse(follow.created_at);                          if (first)                              curr = last;                            if (last <= m_lastFollow)                          {                              done = true;                              break;                          }                            followers.Add(follow.user.name);                          first = false;                      }                        done |= follows.follows.Count == 0;                      url = follows._links.next;                  } while (!done);                    if (!first)                      lock (m_sync)                          m_channelFollowers[channel] = curr;                    evt(channel' followers);              }
Magic Number,Winter,TwitchHttp,C:\repos\DarkAutumn_WinterBot\WinterBot\WinterBot\TwitchHttp.cs,LoadEmoticons,The following statement contains a magic number: List<List<TwitchEmoticon>> imageSets = new List<List<TwitchEmoticon>>(4096);
Magic Number,Winter,TwitchHttp,C:\repos\DarkAutumn_WinterBot\WinterBot\WinterBot\TwitchHttp.cs,LoadEmoticons,The following statement contains a magic number: foreach (var emote in emotes.emoticons)              {                  foreach (var image in emote.images)                  {                      if (image.emoticon_set == null)                      {                          defaultSet.Add(new TwitchEmoticon(m_cacheFolder' emote' image' true));                      }                      else                      {                          int setId = (int)image.emoticon_set;                            Debug.Assert(setId <= 6000);                          if (setId > 6000)                              continue;                            while (setId >= imageSets.Count)                              imageSets.Add(null);                            List<TwitchEmoticon> set = imageSets[setId];                          if (set == null)                              imageSets[setId] = set = new List<TwitchEmoticon>();                            set.Add(new TwitchEmoticon(m_cacheFolder' emote' image' false));                      }                  }              }
Magic Number,Winter,TwitchHttp,C:\repos\DarkAutumn_WinterBot\WinterBot\WinterBot\TwitchHttp.cs,LoadEmoticons,The following statement contains a magic number: foreach (var emote in emotes.emoticons)              {                  foreach (var image in emote.images)                  {                      if (image.emoticon_set == null)                      {                          defaultSet.Add(new TwitchEmoticon(m_cacheFolder' emote' image' true));                      }                      else                      {                          int setId = (int)image.emoticon_set;                            Debug.Assert(setId <= 6000);                          if (setId > 6000)                              continue;                            while (setId >= imageSets.Count)                              imageSets.Add(null);                            List<TwitchEmoticon> set = imageSets[setId];                          if (set == null)                              imageSets[setId] = set = new List<TwitchEmoticon>();                            set.Add(new TwitchEmoticon(m_cacheFolder' emote' image' false));                      }                  }              }
Magic Number,Winter,TwitchClient,C:\repos\DarkAutumn_WinterBot\WinterBot\WinterBot\TwitchClient.cs,Connect,The following statement contains a magic number: m_client.Connect("irc.twitch.tv"' 6667' false' new IrcUserRegistrationInfo()              {                  NickName = user'                  UserName = user'                  RealName = user'                  Password = auth              });
Magic Number,Winter,TwitchClient,C:\repos\DarkAutumn_WinterBot\WinterBot\WinterBot\TwitchClient.cs,Timeout,The following statement contains a magic number: if (delay <= 0)              {                  TimeoutRaw(user' duration);              }              else if (delay <= 150)              {                  Thread.Sleep(delay);                  TimeoutRaw(user' duration);              }              else              {                  var request = new TimeoutRequest(this' user' duration);                  m_timeouts.Add(request);              }
Magic Number,Winter,TwitchClient,C:\repos\DarkAutumn_WinterBot\WinterBot\WinterBot\TwitchClient.cs,Ban,The following statement contains a magic number: if (delay <= 0)              {                  BanRaw(user);              }              else if (delay <= 150)              {                  Thread.Sleep(delay);                  BanRaw(user);              }              else              {                  var request = new TimeoutRequest(this' user' -1);                  m_timeouts.Add(request);              }
Magic Number,Winter,TwitchClient,C:\repos\DarkAutumn_WinterBot\WinterBot\WinterBot\TwitchClient.cs,Unban,The following statement contains a magic number: Thread.Sleep(100);
Magic Number,Winter,TwitchClient,C:\repos\DarkAutumn_WinterBot\WinterBot\WinterBot\TwitchClient.cs,TimeoutThread,The following statement contains a magic number: while (!m_shutdown)              {                  TimeoutRequest evt;                  if (!m_timeouts.TryTake(out evt))                  {                      Thread.Sleep(100);                      continue;                  }                                    ProcessNext(evt);                    while (evt.IsBan)                  {                      TimeoutRequest next = null;                      for (int i = 0; i < 15; i++)                      {                          Thread.Sleep(100);                          if (m_shutdown)                              return;                            if (m_timeouts.TryTake(out next))                          {                              evt.Execute();                              ProcessNext(next);                              break;                          }                      }                        if (next == null)                      {                          evt.Execute();                          break;                      }                        evt = next;                  }              }
Magic Number,Winter,TwitchClient,C:\repos\DarkAutumn_WinterBot\WinterBot\WinterBot\TwitchClient.cs,TimeoutThread,The following statement contains a magic number: while (!m_shutdown)              {                  TimeoutRequest evt;                  if (!m_timeouts.TryTake(out evt))                  {                      Thread.Sleep(100);                      continue;                  }                                    ProcessNext(evt);                    while (evt.IsBan)                  {                      TimeoutRequest next = null;                      for (int i = 0; i < 15; i++)                      {                          Thread.Sleep(100);                          if (m_shutdown)                              return;                            if (m_timeouts.TryTake(out next))                          {                              evt.Execute();                              ProcessNext(next);                              break;                          }                      }                        if (next == null)                      {                          evt.Execute();                          break;                      }                        evt = next;                  }              }
Magic Number,Winter,TwitchClient,C:\repos\DarkAutumn_WinterBot\WinterBot\WinterBot\TwitchClient.cs,TimeoutThread,The following statement contains a magic number: while (!m_shutdown)              {                  TimeoutRequest evt;                  if (!m_timeouts.TryTake(out evt))                  {                      Thread.Sleep(100);                      continue;                  }                                    ProcessNext(evt);                    while (evt.IsBan)                  {                      TimeoutRequest next = null;                      for (int i = 0; i < 15; i++)                      {                          Thread.Sleep(100);                          if (m_shutdown)                              return;                            if (m_timeouts.TryTake(out next))                          {                              evt.Execute();                              ProcessNext(next);                              break;                          }                      }                        if (next == null)                      {                          evt.Execute();                          break;                      }                        evt = next;                  }              }
Magic Number,Winter,TwitchClient,C:\repos\DarkAutumn_WinterBot\WinterBot\WinterBot\TwitchClient.cs,channel_MessageReceived,The following statement contains a magic number: if (m_lastModCheck.Elapsed().TotalHours >= 2)                  UpdateMods();
Magic Number,Winter,TwitchClient,C:\repos\DarkAutumn_WinterBot\WinterBot\WinterBot\TwitchClient.cs,ParseUserColor,The following statement contains a magic number: if (parts.Length != 3 || parts[0] != "USERCOLOR" || parts[2].Length < 2 || parts[2][0] != '#')                  return;
Magic Number,Winter,TwitchClient,C:\repos\DarkAutumn_WinterBot\WinterBot\WinterBot\TwitchClient.cs,ParseUserColor,The following statement contains a magic number: if (parts.Length != 3 || parts[0] != "USERCOLOR" || parts[2].Length < 2 || parts[2][0] != '#')                  return;
Magic Number,Winter,TwitchClient,C:\repos\DarkAutumn_WinterBot\WinterBot\WinterBot\TwitchClient.cs,ParseUserColor,The following statement contains a magic number: if (parts.Length != 3 || parts[0] != "USERCOLOR" || parts[2].Length < 2 || parts[2][0] != '#')                  return;
Magic Number,Winter,TwitchClient,C:\repos\DarkAutumn_WinterBot\WinterBot\WinterBot\TwitchClient.cs,ParseUserColor,The following statement contains a magic number: if (parts.Length != 3 || parts[0] != "USERCOLOR" || parts[2].Length < 2 || parts[2][0] != '#')                  return;
Magic Number,Winter,TwitchClient,C:\repos\DarkAutumn_WinterBot\WinterBot\WinterBot\TwitchClient.cs,ParseUserColor,The following statement contains a magic number: user.Color = parts[2];
Magic Number,Winter,TwitchClient,C:\repos\DarkAutumn_WinterBot\WinterBot\WinterBot\TwitchClient.cs,ParseModerators,The following statement contains a magic number: if (text.Length <= modMsg.Length || text[4] != 'm' || text[31] != ':')                  return;
Magic Number,Winter,TwitchClient,C:\repos\DarkAutumn_WinterBot\WinterBot\WinterBot\TwitchClient.cs,ParseModerators,The following statement contains a magic number: if (text.Length <= modMsg.Length || text[4] != 'm' || text[31] != ':')                  return;
Magic Number,Winter,TwitchClient,C:\repos\DarkAutumn_WinterBot\WinterBot\WinterBot\TwitchClient.cs,ParseSpecialUser,The following statement contains a magic number: if (parts.Length != 3 || parts[0] != "SPECIALUSER" || parts[2] != "subscriber")                  return;
Magic Number,Winter,TwitchClient,C:\repos\DarkAutumn_WinterBot\WinterBot\WinterBot\TwitchClient.cs,ParseSpecialUser,The following statement contains a magic number: if (parts.Length != 3 || parts[0] != "SPECIALUSER" || parts[2] != "subscriber")                  return;
Magic Number,Winter,TwitchClient,C:\repos\DarkAutumn_WinterBot\WinterBot\WinterBot\TwitchClient.cs,ParseChatClear,The following statement contains a magic number: if (text.Length <= 10 || text[9] != ' ')                  return false;
Magic Number,Winter,TwitchClient,C:\repos\DarkAutumn_WinterBot\WinterBot\WinterBot\TwitchClient.cs,ParseChatClear,The following statement contains a magic number: if (text.Length <= 10 || text[9] != ' ')                  return false;
Magic Number,Winter,TwitchClient,C:\repos\DarkAutumn_WinterBot\WinterBot\WinterBot\TwitchClient.cs,ParseChatClear,The following statement contains a magic number: OnChatClear(text.Substring(10));
Magic Number,Winter,TwitchClient,C:\repos\DarkAutumn_WinterBot\WinterBot\WinterBot\TwitchClient.cs,ParseEmoteSet,The following statement contains a magic number: if (text.Length < 12 || text[8] != ' ')                  return;
Magic Number,Winter,TwitchClient,C:\repos\DarkAutumn_WinterBot\WinterBot\WinterBot\TwitchClient.cs,ParseEmoteSet,The following statement contains a magic number: if (text.Length < 12 || text[8] != ' ')                  return;
Magic Number,Winter,TwitchClient,C:\repos\DarkAutumn_WinterBot\WinterBot\WinterBot\TwitchClient.cs,ParseEmoteSet,The following statement contains a magic number: int end = text.IndexOf(' '' 9);
Magic Number,Winter,TwitchClient,C:\repos\DarkAutumn_WinterBot\WinterBot\WinterBot\TwitchClient.cs,ParseEmoteSet,The following statement contains a magic number: string username = text.Substring(9' end - 9);
Magic Number,Winter,TwitchClient,C:\repos\DarkAutumn_WinterBot\WinterBot\WinterBot\TwitchClient.cs,ParseEmoteSet,The following statement contains a magic number: string username = text.Substring(9' end - 9);
Magic Number,Winter,TwitchClient,C:\repos\DarkAutumn_WinterBot\WinterBot\WinterBot\TwitchClient.cs,ParseEmoteSet,The following statement contains a magic number: end += 2;
Magic Number,Winter,FloodPreventer,C:\repos\DarkAutumn_WinterBot\WinterBot\WinterBot\TwitchClient.cs,GetSendDelay,The following statement contains a magic number: if (remaining <= 0)              {                  var evt = RejectedMessage;                  if (evt != null)                      evt();                    return 10000;              }
Magic Number,Winter,UserCommand,C:\repos\DarkAutumn_WinterBot\WinterBot\WinterBot\UserCommands.cs,Deserialize,The following statement contains a magic number: string[] values = line.Split(new char[] { ' ' }' 3);
Magic Number,Winter,UserCommand,C:\repos\DarkAutumn_WinterBot\WinterBot\WinterBot\UserCommands.cs,Deserialize,The following statement contains a magic number: if (values.Length != 3)                  return null;
Magic Number,Winter,UserCommand,C:\repos\DarkAutumn_WinterBot\WinterBot\WinterBot\UserCommands.cs,Deserialize,The following statement contains a magic number: return new UserCommand(values[0]' values[1]' values[2]);
Magic Number,Winter,WinterBot,C:\repos\DarkAutumn_WinterBot\WinterBot\WinterBot\WinterBot.cs,Connect,The following statement contains a magic number: m_twitch.TimeoutDelay = 250;
Magic Number,Winter,WinterBot,C:\repos\DarkAutumn_WinterBot\WinterBot\WinterBot\WinterBot.cs,Connect,The following statement contains a magic number: const int sleepTime = 5000;
Magic Number,Winter,WinterBot,C:\repos\DarkAutumn_WinterBot\WinterBot\WinterBot\WinterBot.cs,Go,The following statement contains a magic number: while (!m_shutdown)              {                  if (m_events.Count == 0)                      m_event.WaitOne(200);                    WinterBotEvent evt;                  while (m_events.TryDequeue(out evt))                  {                      switch (evt.Event)                      {                          case EventType.Action:                              ActionEvent action = (ActionEvent)evt;                              WinterBotSource.Log.BeginAction(action.User.Name' action.Text);                                OnAction(action);                                WinterBotSource.Log.EndAction();                              break;                            case EventType.Clear:                              var clear = (ClearEvent)evt;                              WinterBotSource.Log.BeginClear(clear.User.Name);                                                            OnClear(clear);                                WinterBotSource.Log.EndClear();                              break;                            case EventType.Message:                              var msg = (MessageEvent)evt;                              WinterBotSource.Log.BeginMessage(msg.User.Name' msg.Text);                                OnMessage(msg);                                WinterBotSource.Log.EndMessage();                              break;                            case EventType.Mod:                              var mod = (ModEvent)evt;                              WinterBotSource.Log.BeginMod(mod.User.Name' mod.Mod);                                OnMod(mod);                                WinterBotSource.Log.EndMod();                              break;                            case EventType.Subscribe:                              var sub = (SubscribeEvent)evt;                              WinterBotSource.Log.BeginSub(sub.User.Name);                                OnSub(sub);                                WinterBotSource.Log.EndSub();                              break;                            case EventType.ViewerCount:                              var viewer = (ViewerCountEvent)evt;                              WinterBotSource.Log.BeginViewers(viewer.Viewers);                                OnViewerCountChanged(viewer);                                WinterBotSource.Log.EndViewers();                              break;                            case EventType.StreamStatus:                              var status = (StreamStatusEvent)evt;                              WinterBotSource.Log.BeginStreamStatus(status.Online);                                OnStreamStatus(status);                                WinterBotSource.Log.EndStreamStatus();                              break;                            case EventType.Follow:                              var follow = (FollowEvent)evt;                              WinterBotSource.Log.BeginFollow(follow.User.Name);                                OnUserFollowed(follow);                                WinterBotSource.Log.EndFollow();                              break;                            default:                              Debug.Fail("No handler for event!");                              break;                      }                  }                    var elapsed = lastTick.Elapsed();                  if (elapsed.TotalSeconds >= 5)                  {                      WinterBotSource.Log.BeginTick();                        OnTick(elapsed);                      lastTick = DateTime.Now;                        WinterBotSource.Log.EndTick();                        bool followedListeners = UserFollowed != null;                      if (m_checkingFollowers != followedListeners)                      {                          if (m_checkingFollowers)                          {                              m_checkingFollowers = false;                              TwitchHttp.Instance.StopPollingFollowers(m_channel);                              TwitchHttp.Instance.UserFollowed -= UserFollowedHandler;                          }                          else                          {                              m_checkingFollowers = true;                              TwitchHttp.Instance.PollFollowers(m_channel);                              TwitchHttp.Instance.UserFollowed += UserFollowedHandler;                          }                      }                  }                    const int pingDelay = 20;                  var lastEvent = m_twitch.LastEvent;                  if (lastEvent.Elapsed().TotalSeconds >= pingDelay && lastPing.Elapsed().TotalSeconds >= pingDelay)                  {                      m_twitch.Ping();                      lastPing = DateTime.Now;                  }                    if (lastEvent.Elapsed().TotalMinutes >= 1)                  {                      WinterBotSource.Log.BeginReconnect();                        m_twitch.Quit(250);                      OnDisconnected();                        Connect();                        WinterBotSource.Log.EndReconnect();                  }              }
Magic Number,Winter,WinterBot,C:\repos\DarkAutumn_WinterBot\WinterBot\WinterBot\WinterBot.cs,Go,The following statement contains a magic number: while (!m_shutdown)              {                  if (m_events.Count == 0)                      m_event.WaitOne(200);                    WinterBotEvent evt;                  while (m_events.TryDequeue(out evt))                  {                      switch (evt.Event)                      {                          case EventType.Action:                              ActionEvent action = (ActionEvent)evt;                              WinterBotSource.Log.BeginAction(action.User.Name' action.Text);                                OnAction(action);                                WinterBotSource.Log.EndAction();                              break;                            case EventType.Clear:                              var clear = (ClearEvent)evt;                              WinterBotSource.Log.BeginClear(clear.User.Name);                                                            OnClear(clear);                                WinterBotSource.Log.EndClear();                              break;                            case EventType.Message:                              var msg = (MessageEvent)evt;                              WinterBotSource.Log.BeginMessage(msg.User.Name' msg.Text);                                OnMessage(msg);                                WinterBotSource.Log.EndMessage();                              break;                            case EventType.Mod:                              var mod = (ModEvent)evt;                              WinterBotSource.Log.BeginMod(mod.User.Name' mod.Mod);                                OnMod(mod);                                WinterBotSource.Log.EndMod();                              break;                            case EventType.Subscribe:                              var sub = (SubscribeEvent)evt;                              WinterBotSource.Log.BeginSub(sub.User.Name);                                OnSub(sub);                                WinterBotSource.Log.EndSub();                              break;                            case EventType.ViewerCount:                              var viewer = (ViewerCountEvent)evt;                              WinterBotSource.Log.BeginViewers(viewer.Viewers);                                OnViewerCountChanged(viewer);                                WinterBotSource.Log.EndViewers();                              break;                            case EventType.StreamStatus:                              var status = (StreamStatusEvent)evt;                              WinterBotSource.Log.BeginStreamStatus(status.Online);                                OnStreamStatus(status);                                WinterBotSource.Log.EndStreamStatus();                              break;                            case EventType.Follow:                              var follow = (FollowEvent)evt;                              WinterBotSource.Log.BeginFollow(follow.User.Name);                                OnUserFollowed(follow);                                WinterBotSource.Log.EndFollow();                              break;                            default:                              Debug.Fail("No handler for event!");                              break;                      }                  }                    var elapsed = lastTick.Elapsed();                  if (elapsed.TotalSeconds >= 5)                  {                      WinterBotSource.Log.BeginTick();                        OnTick(elapsed);                      lastTick = DateTime.Now;                        WinterBotSource.Log.EndTick();                        bool followedListeners = UserFollowed != null;                      if (m_checkingFollowers != followedListeners)                      {                          if (m_checkingFollowers)                          {                              m_checkingFollowers = false;                              TwitchHttp.Instance.StopPollingFollowers(m_channel);                              TwitchHttp.Instance.UserFollowed -= UserFollowedHandler;                          }                          else                          {                              m_checkingFollowers = true;                              TwitchHttp.Instance.PollFollowers(m_channel);                              TwitchHttp.Instance.UserFollowed += UserFollowedHandler;                          }                      }                  }                    const int pingDelay = 20;                  var lastEvent = m_twitch.LastEvent;                  if (lastEvent.Elapsed().TotalSeconds >= pingDelay && lastPing.Elapsed().TotalSeconds >= pingDelay)                  {                      m_twitch.Ping();                      lastPing = DateTime.Now;                  }                    if (lastEvent.Elapsed().TotalMinutes >= 1)                  {                      WinterBotSource.Log.BeginReconnect();                        m_twitch.Quit(250);                      OnDisconnected();                        Connect();                        WinterBotSource.Log.EndReconnect();                  }              }
Magic Number,Winter,WinterBot,C:\repos\DarkAutumn_WinterBot\WinterBot\WinterBot\WinterBot.cs,Go,The following statement contains a magic number: while (!m_shutdown)              {                  if (m_events.Count == 0)                      m_event.WaitOne(200);                    WinterBotEvent evt;                  while (m_events.TryDequeue(out evt))                  {                      switch (evt.Event)                      {                          case EventType.Action:                              ActionEvent action = (ActionEvent)evt;                              WinterBotSource.Log.BeginAction(action.User.Name' action.Text);                                OnAction(action);                                WinterBotSource.Log.EndAction();                              break;                            case EventType.Clear:                              var clear = (ClearEvent)evt;                              WinterBotSource.Log.BeginClear(clear.User.Name);                                                            OnClear(clear);                                WinterBotSource.Log.EndClear();                              break;                            case EventType.Message:                              var msg = (MessageEvent)evt;                              WinterBotSource.Log.BeginMessage(msg.User.Name' msg.Text);                                OnMessage(msg);                                WinterBotSource.Log.EndMessage();                              break;                            case EventType.Mod:                              var mod = (ModEvent)evt;                              WinterBotSource.Log.BeginMod(mod.User.Name' mod.Mod);                                OnMod(mod);                                WinterBotSource.Log.EndMod();                              break;                            case EventType.Subscribe:                              var sub = (SubscribeEvent)evt;                              WinterBotSource.Log.BeginSub(sub.User.Name);                                OnSub(sub);                                WinterBotSource.Log.EndSub();                              break;                            case EventType.ViewerCount:                              var viewer = (ViewerCountEvent)evt;                              WinterBotSource.Log.BeginViewers(viewer.Viewers);                                OnViewerCountChanged(viewer);                                WinterBotSource.Log.EndViewers();                              break;                            case EventType.StreamStatus:                              var status = (StreamStatusEvent)evt;                              WinterBotSource.Log.BeginStreamStatus(status.Online);                                OnStreamStatus(status);                                WinterBotSource.Log.EndStreamStatus();                              break;                            case EventType.Follow:                              var follow = (FollowEvent)evt;                              WinterBotSource.Log.BeginFollow(follow.User.Name);                                OnUserFollowed(follow);                                WinterBotSource.Log.EndFollow();                              break;                            default:                              Debug.Fail("No handler for event!");                              break;                      }                  }                    var elapsed = lastTick.Elapsed();                  if (elapsed.TotalSeconds >= 5)                  {                      WinterBotSource.Log.BeginTick();                        OnTick(elapsed);                      lastTick = DateTime.Now;                        WinterBotSource.Log.EndTick();                        bool followedListeners = UserFollowed != null;                      if (m_checkingFollowers != followedListeners)                      {                          if (m_checkingFollowers)                          {                              m_checkingFollowers = false;                              TwitchHttp.Instance.StopPollingFollowers(m_channel);                              TwitchHttp.Instance.UserFollowed -= UserFollowedHandler;                          }                          else                          {                              m_checkingFollowers = true;                              TwitchHttp.Instance.PollFollowers(m_channel);                              TwitchHttp.Instance.UserFollowed += UserFollowedHandler;                          }                      }                  }                    const int pingDelay = 20;                  var lastEvent = m_twitch.LastEvent;                  if (lastEvent.Elapsed().TotalSeconds >= pingDelay && lastPing.Elapsed().TotalSeconds >= pingDelay)                  {                      m_twitch.Ping();                      lastPing = DateTime.Now;                  }                    if (lastEvent.Elapsed().TotalMinutes >= 1)                  {                      WinterBotSource.Log.BeginReconnect();                        m_twitch.Quit(250);                      OnDisconnected();                        Connect();                        WinterBotSource.Log.EndReconnect();                  }              }
Magic Number,Winter,WinterBot,C:\repos\DarkAutumn_WinterBot\WinterBot\WinterBot\WinterBot.cs,Go,The following statement contains a magic number: while (!m_shutdown)              {                  if (m_events.Count == 0)                      m_event.WaitOne(200);                    WinterBotEvent evt;                  while (m_events.TryDequeue(out evt))                  {                      switch (evt.Event)                      {                          case EventType.Action:                              ActionEvent action = (ActionEvent)evt;                              WinterBotSource.Log.BeginAction(action.User.Name' action.Text);                                OnAction(action);                                WinterBotSource.Log.EndAction();                              break;                            case EventType.Clear:                              var clear = (ClearEvent)evt;                              WinterBotSource.Log.BeginClear(clear.User.Name);                                                            OnClear(clear);                                WinterBotSource.Log.EndClear();                              break;                            case EventType.Message:                              var msg = (MessageEvent)evt;                              WinterBotSource.Log.BeginMessage(msg.User.Name' msg.Text);                                OnMessage(msg);                                WinterBotSource.Log.EndMessage();                              break;                            case EventType.Mod:                              var mod = (ModEvent)evt;                              WinterBotSource.Log.BeginMod(mod.User.Name' mod.Mod);                                OnMod(mod);                                WinterBotSource.Log.EndMod();                              break;                            case EventType.Subscribe:                              var sub = (SubscribeEvent)evt;                              WinterBotSource.Log.BeginSub(sub.User.Name);                                OnSub(sub);                                WinterBotSource.Log.EndSub();                              break;                            case EventType.ViewerCount:                              var viewer = (ViewerCountEvent)evt;                              WinterBotSource.Log.BeginViewers(viewer.Viewers);                                OnViewerCountChanged(viewer);                                WinterBotSource.Log.EndViewers();                              break;                            case EventType.StreamStatus:                              var status = (StreamStatusEvent)evt;                              WinterBotSource.Log.BeginStreamStatus(status.Online);                                OnStreamStatus(status);                                WinterBotSource.Log.EndStreamStatus();                              break;                            case EventType.Follow:                              var follow = (FollowEvent)evt;                              WinterBotSource.Log.BeginFollow(follow.User.Name);                                OnUserFollowed(follow);                                WinterBotSource.Log.EndFollow();                              break;                            default:                              Debug.Fail("No handler for event!");                              break;                      }                  }                    var elapsed = lastTick.Elapsed();                  if (elapsed.TotalSeconds >= 5)                  {                      WinterBotSource.Log.BeginTick();                        OnTick(elapsed);                      lastTick = DateTime.Now;                        WinterBotSource.Log.EndTick();                        bool followedListeners = UserFollowed != null;                      if (m_checkingFollowers != followedListeners)                      {                          if (m_checkingFollowers)                          {                              m_checkingFollowers = false;                              TwitchHttp.Instance.StopPollingFollowers(m_channel);                              TwitchHttp.Instance.UserFollowed -= UserFollowedHandler;                          }                          else                          {                              m_checkingFollowers = true;                              TwitchHttp.Instance.PollFollowers(m_channel);                              TwitchHttp.Instance.UserFollowed += UserFollowedHandler;                          }                      }                  }                    const int pingDelay = 20;                  var lastEvent = m_twitch.LastEvent;                  if (lastEvent.Elapsed().TotalSeconds >= pingDelay && lastPing.Elapsed().TotalSeconds >= pingDelay)                  {                      m_twitch.Ping();                      lastPing = DateTime.Now;                  }                    if (lastEvent.Elapsed().TotalMinutes >= 1)                  {                      WinterBotSource.Log.BeginReconnect();                        m_twitch.Quit(250);                      OnDisconnected();                        Connect();                        WinterBotSource.Log.EndReconnect();                  }              }
Missing Default,Winter,TimeoutController,C:\repos\DarkAutumn_WinterBot\WinterBot\WinterBot\TimeoutController.cs,ClearChat,The following switch statement is missing a default case: switch (timeout.Count)              {                  case 1:                  case 2:                      duration = 1;                      break;                    case 3:                      shouldMessage = !string.IsNullOrEmpty(clearReason);                      duration = 5 * 60;                      break;                    case 4:                      shouldMessage = !string.IsNullOrEmpty(clearReason);                      duration = 10 * 60;                      break;                    case 5:                      shouldMessage = !string.IsNullOrEmpty(clearReason);                      duration = 8 * 60 * 60;                      break;              }
Missing Default,Winter,WinterBot,C:\repos\DarkAutumn_WinterBot\WinterBot\WinterBot\WinterBot.cs,AllowMessage,The following switch statement is missing a default case: switch (type)              {                  case MessageType.Message:                  case MessageType.Response:                      return !Quiet;              }
