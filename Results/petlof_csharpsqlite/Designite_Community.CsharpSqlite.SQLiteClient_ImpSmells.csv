Implementation smell,Namespace,Class,File,Method,Description
Long Method,Community.CsharpSqlite.SQLiteClient,SqliteConnection,C:\repos\petlof_csharpsqlite\Community.CsharpSqlite.SQLiteClient\src\SqliteConnection.cs,GetSchemaDataTypes,The method has 191 lines of code.
Long Method,Community.CsharpSqlite.SQLiteClient,SqliteConnection,C:\repos\petlof_csharpsqlite\Community.CsharpSqlite.SQLiteClient\src\SqliteConnection.cs,GetSchemaReservedWords,The method has 359 lines of code.
Complex Method,Community.CsharpSqlite.SQLiteClient,SqliteCommand,C:\repos\petlof_csharpsqlite\Community.CsharpSqlite.SQLiteClient\src\SqliteCommand.cs,BindParameters3,Cyclomatic complexity of the method is 24
Complex Method,Community.CsharpSqlite.SQLiteClient,SqliteCommandBuilder,C:\repos\petlof_csharpsqlite\Community.CsharpSqlite.SQLiteClient\src\SqliteCommandBuilder.cs,CreateDeleteCommand,Cyclomatic complexity of the method is 11
Complex Method,Community.CsharpSqlite.SQLiteClient,SqliteCommandBuilder,C:\repos\petlof_csharpsqlite\Community.CsharpSqlite.SQLiteClient\src\SqliteCommandBuilder.cs,CreateUpdateCommand,Cyclomatic complexity of the method is 15
Complex Method,Community.CsharpSqlite.SQLiteClient,SqliteCommandBuilder,C:\repos\petlof_csharpsqlite\Community.CsharpSqlite.SQLiteClient\src\SqliteCommandBuilder.cs,RowUpdatingHandler,Cyclomatic complexity of the method is 10
Complex Method,Community.CsharpSqlite.SQLiteClient,SqliteConnection,C:\repos\petlof_csharpsqlite\Community.CsharpSqlite.SQLiteClient\src\SqliteConnection.cs,SetConnectionString,Cyclomatic complexity of the method is 38
Complex Method,Community.CsharpSqlite.SQLiteClient,SqliteConnection,C:\repos\petlof_csharpsqlite\Community.CsharpSqlite.SQLiteClient\src\SqliteConnection.cs,Open,Cyclomatic complexity of the method is 9
Complex Method,Community.CsharpSqlite.SQLiteClient,SqliteConnection,C:\repos\petlof_csharpsqlite\Community.CsharpSqlite.SQLiteClient\src\SqliteConnection.cs,GetSchema,Cyclomatic complexity of the method is 23
Complex Method,Community.CsharpSqlite.SQLiteClient,SqliteConnectionStringBuilder,C:\repos\petlof_csharpsqlite\Community.CsharpSqlite.SQLiteClient\src\SqliteConnectionStringBuilder.cs,SetValue,Cyclomatic complexity of the method is 32
Complex Method,Community.CsharpSqlite.SQLiteClient,SqliteDataReader,C:\repos\petlof_csharpsqlite\Community.CsharpSqlite.SQLiteClient\src\SqliteDataReader.cs,ReadpVm,Cyclomatic complexity of the method is 34
Long Parameter List,Community.CsharpSqlite.SQLiteClient,SqliteDataReader,C:\repos\petlof_csharpsqlite\Community.CsharpSqlite.SQLiteClient\src\SqliteDataReader.cs,GetBytes,The method has 5 parameters.
Long Parameter List,Community.CsharpSqlite.SQLiteClient,SqliteDataReader,C:\repos\petlof_csharpsqlite\Community.CsharpSqlite.SQLiteClient\src\SqliteDataReader.cs,GetChars,The method has 5 parameters.
Long Statement,Community.CsharpSqlite.SQLiteClient,SqliteCommand,C:\repos\petlof_csharpsqlite\Community.CsharpSqlite.SQLiteClient\src\SqliteCommand.cs,GetNextStatement,The length of the statement  "	SqliteError err = (SqliteError)Sqlite3.sqlite3_prepare_v2 (parent_conn.Handle2' pzStart' pzStart.Length' ref pStmt' ref pzTail); " is 128.
Long Statement,Community.CsharpSqlite.SQLiteClient,SqliteCommandBuilder,C:\repos\petlof_csharpsqlite\Community.CsharpSqlite.SQLiteClient\src\SqliteCommandBuilder.cs,CreateDeleteCommand,The length of the statement  "		throw new InvalidOperationException ("Dynamic SQL generation for the DeleteCommand is not supported against a SelectCommand that does not return any key column information."); " is 175.
Long Statement,Community.CsharpSqlite.SQLiteClient,SqliteCommandBuilder,C:\repos\petlof_csharpsqlite\Community.CsharpSqlite.SQLiteClient\src\SqliteCommandBuilder.cs,CreateUpdateCommand,The length of the statement  "			whereClause.Append (String.Format (clause1' parameter.ParameterName' GetQuotedString ((string)schemaRow ["BaseColumnName"]))); " is 126.
Long Statement,Community.CsharpSqlite.SQLiteClient,SqliteCommandBuilder,C:\repos\petlof_csharpsqlite\Community.CsharpSqlite.SQLiteClient\src\SqliteCommandBuilder.cs,CreateUpdateCommand,The length of the statement  "		throw new InvalidOperationException ("Dynamic SQL generation for the UpdateCommand is not supported against a SelectCommand that does not return any key column information."); " is 175.
Long Statement,Community.CsharpSqlite.SQLiteClient,SqliteConnection,C:\repos\petlof_csharpsqlite\Community.CsharpSqlite.SQLiteClient\src\SqliteConnection.cs,GetSchemaTables,The length of the statement  "	SqliteCommand cmd = new SqliteCommand ("SELECT type' name' tbl_name' rootpage' sql " + " FROM sqlite_master " + " WHERE (name = :pname or (:pname is null)) " + " AND type = 'table' " + " ORDER BY name"' this); " is 209.
Long Statement,Community.CsharpSqlite.SQLiteClient,SqliteConnection,C:\repos\petlof_csharpsqlite\Community.CsharpSqlite.SQLiteClient\src\SqliteConnection.cs,GetSchemaTriggers,The length of the statement  "	SqliteCommand cmd = new SqliteCommand ("SELECT type' name' tbl_name' rootpage' sql " + " FROM sqlite_master " + " WHERE (tbl_name = :pname or :pname is null) " + " AND type = 'trigger' " + " ORDER BY name"' this); " is 213.
Long Statement,Community.CsharpSqlite.SQLiteClient,SqliteConnection,C:\repos\petlof_csharpsqlite\Community.CsharpSqlite.SQLiteClient\src\SqliteConnection.cs,GetSchemaViews,The length of the statement  "	SqliteCommand cmd = new SqliteCommand ("SELECT type' name' tbl_name' rootpage' sql " + " FROM sqlite_master " + " WHERE (name = :pname or :pname is null) " + " AND type = 'view' " + " ORDER BY name"' this); " is 206.
Long Statement,Community.CsharpSqlite.SQLiteClient,SqliteParameterCollection,C:\repos\petlof_csharpsqlite\Community.CsharpSqlite.SQLiteClient\src\SqliteParameterCollection.cs,Add,The length of the statement  "		throw new DuplicateNameException ("Parameter collection already contains the a SqliteParameter with the given ParameterName."); " is 127.
Magic Number,Community.CsharpSqlite.SQLiteClient,SqliteCommand,C:\repos\petlof_csharpsqlite\Community.CsharpSqlite.SQLiteClient\src\SqliteCommand.cs,ExecuteReader,The following statement contains a magic number: try {  	while (true) {  		Sqlite3.Vdbe pStmt = null;  		string queryval = pzTail;  		GetNextStatement (queryval' ref pzTail' ref pStmt);  		if (pStmt == null)  			throw new Exception ();  		// pzTail is positioned after the last byte in the  		// statement' which will be the NULL character if  		// this was the last statement.  		bool last = pzTail.Length == 0;  		try {  			if (parent_conn.Version == 3)  				BindParameters3 (pStmt);  			if (last && want_results)  				return new SqliteDataReader (this' pStmt' parent_conn.Version);  			ExecuteStatement (pStmt);  			if (last)  				// rows_affected is only used if !want_results  				rows_affected = NumChanges ();  		}  		finally {  			//if (parent_conn.Version == 3)   			Sqlite3.sqlite3_finalize (pStmt);  			//else  			//	Sqlite.sqlite_finalize (pStmt' out errMsgPtr);  		}  		if (last)  			break;  	}  	return null;  }  //alxwest: Console.WriteLine in shared functionality.  //catch ( Exception ex )  //{  //    Console.WriteLine( ex.Message );  //    return null;  //}  finally {  	parent_conn.EndExec ();  	//Marshal.FreeHGlobal (psql);   }  
Magic Number,Community.CsharpSqlite.SQLiteClient,SqliteCommand,C:\repos\petlof_csharpsqlite\Community.CsharpSqlite.SQLiteClient\src\SqliteCommand.cs,ExecuteReader,The following statement contains a magic number: while (true) {  	Sqlite3.Vdbe pStmt = null;  	string queryval = pzTail;  	GetNextStatement (queryval' ref pzTail' ref pStmt);  	if (pStmt == null)  		throw new Exception ();  	// pzTail is positioned after the last byte in the  	// statement' which will be the NULL character if  	// this was the last statement.  	bool last = pzTail.Length == 0;  	try {  		if (parent_conn.Version == 3)  			BindParameters3 (pStmt);  		if (last && want_results)  			return new SqliteDataReader (this' pStmt' parent_conn.Version);  		ExecuteStatement (pStmt);  		if (last)  			// rows_affected is only used if !want_results  			rows_affected = NumChanges ();  	}  	finally {  		//if (parent_conn.Version == 3)   		Sqlite3.sqlite3_finalize (pStmt);  		//else  		//	Sqlite.sqlite_finalize (pStmt' out errMsgPtr);  	}  	if (last)  		break;  }  
Magic Number,Community.CsharpSqlite.SQLiteClient,SqliteCommand,C:\repos\petlof_csharpsqlite\Community.CsharpSqlite.SQLiteClient\src\SqliteCommand.cs,ExecuteReader,The following statement contains a magic number: try {  	if (parent_conn.Version == 3)  		BindParameters3 (pStmt);  	if (last && want_results)  		return new SqliteDataReader (this' pStmt' parent_conn.Version);  	ExecuteStatement (pStmt);  	if (last)  		// rows_affected is only used if !want_results  		rows_affected = NumChanges ();  }  finally {  	//if (parent_conn.Version == 3)   	Sqlite3.sqlite3_finalize (pStmt);  	//else  	//	Sqlite.sqlite_finalize (pStmt' out errMsgPtr);  }  
Magic Number,Community.CsharpSqlite.SQLiteClient,SqliteCommand,C:\repos\petlof_csharpsqlite\Community.CsharpSqlite.SQLiteClient\src\SqliteCommand.cs,ExecuteReader,The following statement contains a magic number: if (parent_conn.Version == 3)  	BindParameters3 (pStmt);  
Magic Number,Community.CsharpSqlite.SQLiteClient,SqliteConnection,C:\repos\petlof_csharpsqlite\Community.CsharpSqlite.SQLiteClient\src\SqliteConnection.cs,SqliteConnection,The following statement contains a magic number: db_version = 3;  
Magic Number,Community.CsharpSqlite.SQLiteClient,SqliteConnection,C:\repos\petlof_csharpsqlite\Community.CsharpSqlite.SQLiteClient\src\SqliteConnection.cs,SetConnectionString,The following statement contains a magic number: if (connstring != conn_str) {  	Close ();  	conn_str = connstring;  	db_file = null;  	db_IsReadonly = false;  	db_IsFailIfMissing = false;  	string[] conn_pieces = connstring.Split (new char[] {  		''''  		';'  	}' StringSplitOptions.RemoveEmptyEntries);  	for (int i = 0; i < conn_pieces.Length; i++) {  		string piece = conn_pieces [i].Trim ();  		int firstEqual = piece.IndexOf ('=');  		if (firstEqual == -1) {  			throw new InvalidOperationException ("Invalid connection string");  		}  		string token = piece.Substring (0' firstEqual);  		string tvalue = piece.Remove (0' firstEqual + 1).Trim ();  		string tvalue_lc = tvalue.ToLower (System.Globalization.CultureInfo.InvariantCulture).Trim ();  		switch (token.ToLower (System.Globalization.CultureInfo.InvariantCulture).Trim ()) {  		case "data source":  		case "uri":  			if (tvalue_lc.StartsWith ("file://")) {  				db_file = tvalue.Substring (7);  			}  			else if (tvalue_lc.StartsWith ("file:")) {  				db_file = tvalue.Substring (5);  			}  			else if (tvalue_lc.StartsWith ("/")) {  				db_file = tvalue;  				#if !(SQLITE_SILVERLIGHT || WINDOWS_MOBILE)  			}  			else if (tvalue_lc.StartsWith ("|DataDirectory|"' StringComparison.OrdinalIgnoreCase)) {  				AppDomainSetup ads = AppDomain.CurrentDomain.SetupInformation;  				string filePath = String.Format ("App_Data{0}{1}"' Path.DirectorySeparatorChar' tvalue_lc.Substring (15));  				db_file = Path.Combine (ads.ApplicationBase' filePath);  				#endif  			}  			else {  				#if !WINDOWS_PHONE  				throw new InvalidOperationException ("Invalid connection string: invalid URI");  				#else  				              db_file = tvalue; #endif  			}  			break;  		case "mode":  			// Ignored for SQLite3.  			////int db_mode = Convert.ToInt32 (tvalue);  			break;  		case "version":  			db_version = Convert.ToInt32 (tvalue);  			if (db_version < 3)  				throw new InvalidOperationException ("Minimum database version is 3");  			break;  		case "encoding":  			// Ignored for SQLite3.  			db_Encoding = Encoding.GetEncoding (tvalue);  			break;  		case "busy_timeout":  			db_BusyTimeout = Convert.ToInt32 (tvalue);  			break;  		case "read only":  		case "readonly":  			db_IsReadonly = ConvertStringToBoolean (tvalue.ToLowerInvariant ());  			break;  		case "failifmissing":  			db_IsFailIfMissing = ConvertStringToBoolean (tvalue.ToLowerInvariant ());  			break;  		case "password":  			if (!string.IsNullOrEmpty (db_password) && (db_password.Length != 34 || !db_password.StartsWith ("0x")))  				throw new InvalidOperationException ("Invalid password string: must be 34 hex digits starting with 0x");  			db_password = tvalue;  			break;  		}  	}  	if (db_file == null) {  		throw new InvalidOperationException ("Invalid connection string: no URI");  	}  }  
Magic Number,Community.CsharpSqlite.SQLiteClient,SqliteConnection,C:\repos\petlof_csharpsqlite\Community.CsharpSqlite.SQLiteClient\src\SqliteConnection.cs,SetConnectionString,The following statement contains a magic number: if (connstring != conn_str) {  	Close ();  	conn_str = connstring;  	db_file = null;  	db_IsReadonly = false;  	db_IsFailIfMissing = false;  	string[] conn_pieces = connstring.Split (new char[] {  		''''  		';'  	}' StringSplitOptions.RemoveEmptyEntries);  	for (int i = 0; i < conn_pieces.Length; i++) {  		string piece = conn_pieces [i].Trim ();  		int firstEqual = piece.IndexOf ('=');  		if (firstEqual == -1) {  			throw new InvalidOperationException ("Invalid connection string");  		}  		string token = piece.Substring (0' firstEqual);  		string tvalue = piece.Remove (0' firstEqual + 1).Trim ();  		string tvalue_lc = tvalue.ToLower (System.Globalization.CultureInfo.InvariantCulture).Trim ();  		switch (token.ToLower (System.Globalization.CultureInfo.InvariantCulture).Trim ()) {  		case "data source":  		case "uri":  			if (tvalue_lc.StartsWith ("file://")) {  				db_file = tvalue.Substring (7);  			}  			else if (tvalue_lc.StartsWith ("file:")) {  				db_file = tvalue.Substring (5);  			}  			else if (tvalue_lc.StartsWith ("/")) {  				db_file = tvalue;  				#if !(SQLITE_SILVERLIGHT || WINDOWS_MOBILE)  			}  			else if (tvalue_lc.StartsWith ("|DataDirectory|"' StringComparison.OrdinalIgnoreCase)) {  				AppDomainSetup ads = AppDomain.CurrentDomain.SetupInformation;  				string filePath = String.Format ("App_Data{0}{1}"' Path.DirectorySeparatorChar' tvalue_lc.Substring (15));  				db_file = Path.Combine (ads.ApplicationBase' filePath);  				#endif  			}  			else {  				#if !WINDOWS_PHONE  				throw new InvalidOperationException ("Invalid connection string: invalid URI");  				#else  				              db_file = tvalue; #endif  			}  			break;  		case "mode":  			// Ignored for SQLite3.  			////int db_mode = Convert.ToInt32 (tvalue);  			break;  		case "version":  			db_version = Convert.ToInt32 (tvalue);  			if (db_version < 3)  				throw new InvalidOperationException ("Minimum database version is 3");  			break;  		case "encoding":  			// Ignored for SQLite3.  			db_Encoding = Encoding.GetEncoding (tvalue);  			break;  		case "busy_timeout":  			db_BusyTimeout = Convert.ToInt32 (tvalue);  			break;  		case "read only":  		case "readonly":  			db_IsReadonly = ConvertStringToBoolean (tvalue.ToLowerInvariant ());  			break;  		case "failifmissing":  			db_IsFailIfMissing = ConvertStringToBoolean (tvalue.ToLowerInvariant ());  			break;  		case "password":  			if (!string.IsNullOrEmpty (db_password) && (db_password.Length != 34 || !db_password.StartsWith ("0x")))  				throw new InvalidOperationException ("Invalid password string: must be 34 hex digits starting with 0x");  			db_password = tvalue;  			break;  		}  	}  	if (db_file == null) {  		throw new InvalidOperationException ("Invalid connection string: no URI");  	}  }  
Magic Number,Community.CsharpSqlite.SQLiteClient,SqliteConnection,C:\repos\petlof_csharpsqlite\Community.CsharpSqlite.SQLiteClient\src\SqliteConnection.cs,SetConnectionString,The following statement contains a magic number: if (connstring != conn_str) {  	Close ();  	conn_str = connstring;  	db_file = null;  	db_IsReadonly = false;  	db_IsFailIfMissing = false;  	string[] conn_pieces = connstring.Split (new char[] {  		''''  		';'  	}' StringSplitOptions.RemoveEmptyEntries);  	for (int i = 0; i < conn_pieces.Length; i++) {  		string piece = conn_pieces [i].Trim ();  		int firstEqual = piece.IndexOf ('=');  		if (firstEqual == -1) {  			throw new InvalidOperationException ("Invalid connection string");  		}  		string token = piece.Substring (0' firstEqual);  		string tvalue = piece.Remove (0' firstEqual + 1).Trim ();  		string tvalue_lc = tvalue.ToLower (System.Globalization.CultureInfo.InvariantCulture).Trim ();  		switch (token.ToLower (System.Globalization.CultureInfo.InvariantCulture).Trim ()) {  		case "data source":  		case "uri":  			if (tvalue_lc.StartsWith ("file://")) {  				db_file = tvalue.Substring (7);  			}  			else if (tvalue_lc.StartsWith ("file:")) {  				db_file = tvalue.Substring (5);  			}  			else if (tvalue_lc.StartsWith ("/")) {  				db_file = tvalue;  				#if !(SQLITE_SILVERLIGHT || WINDOWS_MOBILE)  			}  			else if (tvalue_lc.StartsWith ("|DataDirectory|"' StringComparison.OrdinalIgnoreCase)) {  				AppDomainSetup ads = AppDomain.CurrentDomain.SetupInformation;  				string filePath = String.Format ("App_Data{0}{1}"' Path.DirectorySeparatorChar' tvalue_lc.Substring (15));  				db_file = Path.Combine (ads.ApplicationBase' filePath);  				#endif  			}  			else {  				#if !WINDOWS_PHONE  				throw new InvalidOperationException ("Invalid connection string: invalid URI");  				#else  				              db_file = tvalue; #endif  			}  			break;  		case "mode":  			// Ignored for SQLite3.  			////int db_mode = Convert.ToInt32 (tvalue);  			break;  		case "version":  			db_version = Convert.ToInt32 (tvalue);  			if (db_version < 3)  				throw new InvalidOperationException ("Minimum database version is 3");  			break;  		case "encoding":  			// Ignored for SQLite3.  			db_Encoding = Encoding.GetEncoding (tvalue);  			break;  		case "busy_timeout":  			db_BusyTimeout = Convert.ToInt32 (tvalue);  			break;  		case "read only":  		case "readonly":  			db_IsReadonly = ConvertStringToBoolean (tvalue.ToLowerInvariant ());  			break;  		case "failifmissing":  			db_IsFailIfMissing = ConvertStringToBoolean (tvalue.ToLowerInvariant ());  			break;  		case "password":  			if (!string.IsNullOrEmpty (db_password) && (db_password.Length != 34 || !db_password.StartsWith ("0x")))  				throw new InvalidOperationException ("Invalid password string: must be 34 hex digits starting with 0x");  			db_password = tvalue;  			break;  		}  	}  	if (db_file == null) {  		throw new InvalidOperationException ("Invalid connection string: no URI");  	}  }  
Magic Number,Community.CsharpSqlite.SQLiteClient,SqliteConnection,C:\repos\petlof_csharpsqlite\Community.CsharpSqlite.SQLiteClient\src\SqliteConnection.cs,SetConnectionString,The following statement contains a magic number: if (connstring != conn_str) {  	Close ();  	conn_str = connstring;  	db_file = null;  	db_IsReadonly = false;  	db_IsFailIfMissing = false;  	string[] conn_pieces = connstring.Split (new char[] {  		''''  		';'  	}' StringSplitOptions.RemoveEmptyEntries);  	for (int i = 0; i < conn_pieces.Length; i++) {  		string piece = conn_pieces [i].Trim ();  		int firstEqual = piece.IndexOf ('=');  		if (firstEqual == -1) {  			throw new InvalidOperationException ("Invalid connection string");  		}  		string token = piece.Substring (0' firstEqual);  		string tvalue = piece.Remove (0' firstEqual + 1).Trim ();  		string tvalue_lc = tvalue.ToLower (System.Globalization.CultureInfo.InvariantCulture).Trim ();  		switch (token.ToLower (System.Globalization.CultureInfo.InvariantCulture).Trim ()) {  		case "data source":  		case "uri":  			if (tvalue_lc.StartsWith ("file://")) {  				db_file = tvalue.Substring (7);  			}  			else if (tvalue_lc.StartsWith ("file:")) {  				db_file = tvalue.Substring (5);  			}  			else if (tvalue_lc.StartsWith ("/")) {  				db_file = tvalue;  				#if !(SQLITE_SILVERLIGHT || WINDOWS_MOBILE)  			}  			else if (tvalue_lc.StartsWith ("|DataDirectory|"' StringComparison.OrdinalIgnoreCase)) {  				AppDomainSetup ads = AppDomain.CurrentDomain.SetupInformation;  				string filePath = String.Format ("App_Data{0}{1}"' Path.DirectorySeparatorChar' tvalue_lc.Substring (15));  				db_file = Path.Combine (ads.ApplicationBase' filePath);  				#endif  			}  			else {  				#if !WINDOWS_PHONE  				throw new InvalidOperationException ("Invalid connection string: invalid URI");  				#else  				              db_file = tvalue; #endif  			}  			break;  		case "mode":  			// Ignored for SQLite3.  			////int db_mode = Convert.ToInt32 (tvalue);  			break;  		case "version":  			db_version = Convert.ToInt32 (tvalue);  			if (db_version < 3)  				throw new InvalidOperationException ("Minimum database version is 3");  			break;  		case "encoding":  			// Ignored for SQLite3.  			db_Encoding = Encoding.GetEncoding (tvalue);  			break;  		case "busy_timeout":  			db_BusyTimeout = Convert.ToInt32 (tvalue);  			break;  		case "read only":  		case "readonly":  			db_IsReadonly = ConvertStringToBoolean (tvalue.ToLowerInvariant ());  			break;  		case "failifmissing":  			db_IsFailIfMissing = ConvertStringToBoolean (tvalue.ToLowerInvariant ());  			break;  		case "password":  			if (!string.IsNullOrEmpty (db_password) && (db_password.Length != 34 || !db_password.StartsWith ("0x")))  				throw new InvalidOperationException ("Invalid password string: must be 34 hex digits starting with 0x");  			db_password = tvalue;  			break;  		}  	}  	if (db_file == null) {  		throw new InvalidOperationException ("Invalid connection string: no URI");  	}  }  
Magic Number,Community.CsharpSqlite.SQLiteClient,SqliteConnection,C:\repos\petlof_csharpsqlite\Community.CsharpSqlite.SQLiteClient\src\SqliteConnection.cs,SetConnectionString,The following statement contains a magic number: if (connstring != conn_str) {  	Close ();  	conn_str = connstring;  	db_file = null;  	db_IsReadonly = false;  	db_IsFailIfMissing = false;  	string[] conn_pieces = connstring.Split (new char[] {  		''''  		';'  	}' StringSplitOptions.RemoveEmptyEntries);  	for (int i = 0; i < conn_pieces.Length; i++) {  		string piece = conn_pieces [i].Trim ();  		int firstEqual = piece.IndexOf ('=');  		if (firstEqual == -1) {  			throw new InvalidOperationException ("Invalid connection string");  		}  		string token = piece.Substring (0' firstEqual);  		string tvalue = piece.Remove (0' firstEqual + 1).Trim ();  		string tvalue_lc = tvalue.ToLower (System.Globalization.CultureInfo.InvariantCulture).Trim ();  		switch (token.ToLower (System.Globalization.CultureInfo.InvariantCulture).Trim ()) {  		case "data source":  		case "uri":  			if (tvalue_lc.StartsWith ("file://")) {  				db_file = tvalue.Substring (7);  			}  			else if (tvalue_lc.StartsWith ("file:")) {  				db_file = tvalue.Substring (5);  			}  			else if (tvalue_lc.StartsWith ("/")) {  				db_file = tvalue;  				#if !(SQLITE_SILVERLIGHT || WINDOWS_MOBILE)  			}  			else if (tvalue_lc.StartsWith ("|DataDirectory|"' StringComparison.OrdinalIgnoreCase)) {  				AppDomainSetup ads = AppDomain.CurrentDomain.SetupInformation;  				string filePath = String.Format ("App_Data{0}{1}"' Path.DirectorySeparatorChar' tvalue_lc.Substring (15));  				db_file = Path.Combine (ads.ApplicationBase' filePath);  				#endif  			}  			else {  				#if !WINDOWS_PHONE  				throw new InvalidOperationException ("Invalid connection string: invalid URI");  				#else  				              db_file = tvalue; #endif  			}  			break;  		case "mode":  			// Ignored for SQLite3.  			////int db_mode = Convert.ToInt32 (tvalue);  			break;  		case "version":  			db_version = Convert.ToInt32 (tvalue);  			if (db_version < 3)  				throw new InvalidOperationException ("Minimum database version is 3");  			break;  		case "encoding":  			// Ignored for SQLite3.  			db_Encoding = Encoding.GetEncoding (tvalue);  			break;  		case "busy_timeout":  			db_BusyTimeout = Convert.ToInt32 (tvalue);  			break;  		case "read only":  		case "readonly":  			db_IsReadonly = ConvertStringToBoolean (tvalue.ToLowerInvariant ());  			break;  		case "failifmissing":  			db_IsFailIfMissing = ConvertStringToBoolean (tvalue.ToLowerInvariant ());  			break;  		case "password":  			if (!string.IsNullOrEmpty (db_password) && (db_password.Length != 34 || !db_password.StartsWith ("0x")))  				throw new InvalidOperationException ("Invalid password string: must be 34 hex digits starting with 0x");  			db_password = tvalue;  			break;  		}  	}  	if (db_file == null) {  		throw new InvalidOperationException ("Invalid connection string: no URI");  	}  }  
Magic Number,Community.CsharpSqlite.SQLiteClient,SqliteConnection,C:\repos\petlof_csharpsqlite\Community.CsharpSqlite.SQLiteClient\src\SqliteConnection.cs,SetConnectionString,The following statement contains a magic number: for (int i = 0; i < conn_pieces.Length; i++) {  	string piece = conn_pieces [i].Trim ();  	int firstEqual = piece.IndexOf ('=');  	if (firstEqual == -1) {  		throw new InvalidOperationException ("Invalid connection string");  	}  	string token = piece.Substring (0' firstEqual);  	string tvalue = piece.Remove (0' firstEqual + 1).Trim ();  	string tvalue_lc = tvalue.ToLower (System.Globalization.CultureInfo.InvariantCulture).Trim ();  	switch (token.ToLower (System.Globalization.CultureInfo.InvariantCulture).Trim ()) {  	case "data source":  	case "uri":  		if (tvalue_lc.StartsWith ("file://")) {  			db_file = tvalue.Substring (7);  		}  		else if (tvalue_lc.StartsWith ("file:")) {  			db_file = tvalue.Substring (5);  		}  		else if (tvalue_lc.StartsWith ("/")) {  			db_file = tvalue;  			#if !(SQLITE_SILVERLIGHT || WINDOWS_MOBILE)  		}  		else if (tvalue_lc.StartsWith ("|DataDirectory|"' StringComparison.OrdinalIgnoreCase)) {  			AppDomainSetup ads = AppDomain.CurrentDomain.SetupInformation;  			string filePath = String.Format ("App_Data{0}{1}"' Path.DirectorySeparatorChar' tvalue_lc.Substring (15));  			db_file = Path.Combine (ads.ApplicationBase' filePath);  			#endif  		}  		else {  			#if !WINDOWS_PHONE  			throw new InvalidOperationException ("Invalid connection string: invalid URI");  			#else  			              db_file = tvalue; #endif  		}  		break;  	case "mode":  		// Ignored for SQLite3.  		////int db_mode = Convert.ToInt32 (tvalue);  		break;  	case "version":  		db_version = Convert.ToInt32 (tvalue);  		if (db_version < 3)  			throw new InvalidOperationException ("Minimum database version is 3");  		break;  	case "encoding":  		// Ignored for SQLite3.  		db_Encoding = Encoding.GetEncoding (tvalue);  		break;  	case "busy_timeout":  		db_BusyTimeout = Convert.ToInt32 (tvalue);  		break;  	case "read only":  	case "readonly":  		db_IsReadonly = ConvertStringToBoolean (tvalue.ToLowerInvariant ());  		break;  	case "failifmissing":  		db_IsFailIfMissing = ConvertStringToBoolean (tvalue.ToLowerInvariant ());  		break;  	case "password":  		if (!string.IsNullOrEmpty (db_password) && (db_password.Length != 34 || !db_password.StartsWith ("0x")))  			throw new InvalidOperationException ("Invalid password string: must be 34 hex digits starting with 0x");  		db_password = tvalue;  		break;  	}  }  
Magic Number,Community.CsharpSqlite.SQLiteClient,SqliteConnection,C:\repos\petlof_csharpsqlite\Community.CsharpSqlite.SQLiteClient\src\SqliteConnection.cs,SetConnectionString,The following statement contains a magic number: for (int i = 0; i < conn_pieces.Length; i++) {  	string piece = conn_pieces [i].Trim ();  	int firstEqual = piece.IndexOf ('=');  	if (firstEqual == -1) {  		throw new InvalidOperationException ("Invalid connection string");  	}  	string token = piece.Substring (0' firstEqual);  	string tvalue = piece.Remove (0' firstEqual + 1).Trim ();  	string tvalue_lc = tvalue.ToLower (System.Globalization.CultureInfo.InvariantCulture).Trim ();  	switch (token.ToLower (System.Globalization.CultureInfo.InvariantCulture).Trim ()) {  	case "data source":  	case "uri":  		if (tvalue_lc.StartsWith ("file://")) {  			db_file = tvalue.Substring (7);  		}  		else if (tvalue_lc.StartsWith ("file:")) {  			db_file = tvalue.Substring (5);  		}  		else if (tvalue_lc.StartsWith ("/")) {  			db_file = tvalue;  			#if !(SQLITE_SILVERLIGHT || WINDOWS_MOBILE)  		}  		else if (tvalue_lc.StartsWith ("|DataDirectory|"' StringComparison.OrdinalIgnoreCase)) {  			AppDomainSetup ads = AppDomain.CurrentDomain.SetupInformation;  			string filePath = String.Format ("App_Data{0}{1}"' Path.DirectorySeparatorChar' tvalue_lc.Substring (15));  			db_file = Path.Combine (ads.ApplicationBase' filePath);  			#endif  		}  		else {  			#if !WINDOWS_PHONE  			throw new InvalidOperationException ("Invalid connection string: invalid URI");  			#else  			              db_file = tvalue; #endif  		}  		break;  	case "mode":  		// Ignored for SQLite3.  		////int db_mode = Convert.ToInt32 (tvalue);  		break;  	case "version":  		db_version = Convert.ToInt32 (tvalue);  		if (db_version < 3)  			throw new InvalidOperationException ("Minimum database version is 3");  		break;  	case "encoding":  		// Ignored for SQLite3.  		db_Encoding = Encoding.GetEncoding (tvalue);  		break;  	case "busy_timeout":  		db_BusyTimeout = Convert.ToInt32 (tvalue);  		break;  	case "read only":  	case "readonly":  		db_IsReadonly = ConvertStringToBoolean (tvalue.ToLowerInvariant ());  		break;  	case "failifmissing":  		db_IsFailIfMissing = ConvertStringToBoolean (tvalue.ToLowerInvariant ());  		break;  	case "password":  		if (!string.IsNullOrEmpty (db_password) && (db_password.Length != 34 || !db_password.StartsWith ("0x")))  			throw new InvalidOperationException ("Invalid password string: must be 34 hex digits starting with 0x");  		db_password = tvalue;  		break;  	}  }  
Magic Number,Community.CsharpSqlite.SQLiteClient,SqliteConnection,C:\repos\petlof_csharpsqlite\Community.CsharpSqlite.SQLiteClient\src\SqliteConnection.cs,SetConnectionString,The following statement contains a magic number: for (int i = 0; i < conn_pieces.Length; i++) {  	string piece = conn_pieces [i].Trim ();  	int firstEqual = piece.IndexOf ('=');  	if (firstEqual == -1) {  		throw new InvalidOperationException ("Invalid connection string");  	}  	string token = piece.Substring (0' firstEqual);  	string tvalue = piece.Remove (0' firstEqual + 1).Trim ();  	string tvalue_lc = tvalue.ToLower (System.Globalization.CultureInfo.InvariantCulture).Trim ();  	switch (token.ToLower (System.Globalization.CultureInfo.InvariantCulture).Trim ()) {  	case "data source":  	case "uri":  		if (tvalue_lc.StartsWith ("file://")) {  			db_file = tvalue.Substring (7);  		}  		else if (tvalue_lc.StartsWith ("file:")) {  			db_file = tvalue.Substring (5);  		}  		else if (tvalue_lc.StartsWith ("/")) {  			db_file = tvalue;  			#if !(SQLITE_SILVERLIGHT || WINDOWS_MOBILE)  		}  		else if (tvalue_lc.StartsWith ("|DataDirectory|"' StringComparison.OrdinalIgnoreCase)) {  			AppDomainSetup ads = AppDomain.CurrentDomain.SetupInformation;  			string filePath = String.Format ("App_Data{0}{1}"' Path.DirectorySeparatorChar' tvalue_lc.Substring (15));  			db_file = Path.Combine (ads.ApplicationBase' filePath);  			#endif  		}  		else {  			#if !WINDOWS_PHONE  			throw new InvalidOperationException ("Invalid connection string: invalid URI");  			#else  			              db_file = tvalue; #endif  		}  		break;  	case "mode":  		// Ignored for SQLite3.  		////int db_mode = Convert.ToInt32 (tvalue);  		break;  	case "version":  		db_version = Convert.ToInt32 (tvalue);  		if (db_version < 3)  			throw new InvalidOperationException ("Minimum database version is 3");  		break;  	case "encoding":  		// Ignored for SQLite3.  		db_Encoding = Encoding.GetEncoding (tvalue);  		break;  	case "busy_timeout":  		db_BusyTimeout = Convert.ToInt32 (tvalue);  		break;  	case "read only":  	case "readonly":  		db_IsReadonly = ConvertStringToBoolean (tvalue.ToLowerInvariant ());  		break;  	case "failifmissing":  		db_IsFailIfMissing = ConvertStringToBoolean (tvalue.ToLowerInvariant ());  		break;  	case "password":  		if (!string.IsNullOrEmpty (db_password) && (db_password.Length != 34 || !db_password.StartsWith ("0x")))  			throw new InvalidOperationException ("Invalid password string: must be 34 hex digits starting with 0x");  		db_password = tvalue;  		break;  	}  }  
Magic Number,Community.CsharpSqlite.SQLiteClient,SqliteConnection,C:\repos\petlof_csharpsqlite\Community.CsharpSqlite.SQLiteClient\src\SqliteConnection.cs,SetConnectionString,The following statement contains a magic number: for (int i = 0; i < conn_pieces.Length; i++) {  	string piece = conn_pieces [i].Trim ();  	int firstEqual = piece.IndexOf ('=');  	if (firstEqual == -1) {  		throw new InvalidOperationException ("Invalid connection string");  	}  	string token = piece.Substring (0' firstEqual);  	string tvalue = piece.Remove (0' firstEqual + 1).Trim ();  	string tvalue_lc = tvalue.ToLower (System.Globalization.CultureInfo.InvariantCulture).Trim ();  	switch (token.ToLower (System.Globalization.CultureInfo.InvariantCulture).Trim ()) {  	case "data source":  	case "uri":  		if (tvalue_lc.StartsWith ("file://")) {  			db_file = tvalue.Substring (7);  		}  		else if (tvalue_lc.StartsWith ("file:")) {  			db_file = tvalue.Substring (5);  		}  		else if (tvalue_lc.StartsWith ("/")) {  			db_file = tvalue;  			#if !(SQLITE_SILVERLIGHT || WINDOWS_MOBILE)  		}  		else if (tvalue_lc.StartsWith ("|DataDirectory|"' StringComparison.OrdinalIgnoreCase)) {  			AppDomainSetup ads = AppDomain.CurrentDomain.SetupInformation;  			string filePath = String.Format ("App_Data{0}{1}"' Path.DirectorySeparatorChar' tvalue_lc.Substring (15));  			db_file = Path.Combine (ads.ApplicationBase' filePath);  			#endif  		}  		else {  			#if !WINDOWS_PHONE  			throw new InvalidOperationException ("Invalid connection string: invalid URI");  			#else  			              db_file = tvalue; #endif  		}  		break;  	case "mode":  		// Ignored for SQLite3.  		////int db_mode = Convert.ToInt32 (tvalue);  		break;  	case "version":  		db_version = Convert.ToInt32 (tvalue);  		if (db_version < 3)  			throw new InvalidOperationException ("Minimum database version is 3");  		break;  	case "encoding":  		// Ignored for SQLite3.  		db_Encoding = Encoding.GetEncoding (tvalue);  		break;  	case "busy_timeout":  		db_BusyTimeout = Convert.ToInt32 (tvalue);  		break;  	case "read only":  	case "readonly":  		db_IsReadonly = ConvertStringToBoolean (tvalue.ToLowerInvariant ());  		break;  	case "failifmissing":  		db_IsFailIfMissing = ConvertStringToBoolean (tvalue.ToLowerInvariant ());  		break;  	case "password":  		if (!string.IsNullOrEmpty (db_password) && (db_password.Length != 34 || !db_password.StartsWith ("0x")))  			throw new InvalidOperationException ("Invalid password string: must be 34 hex digits starting with 0x");  		db_password = tvalue;  		break;  	}  }  
Magic Number,Community.CsharpSqlite.SQLiteClient,SqliteConnection,C:\repos\petlof_csharpsqlite\Community.CsharpSqlite.SQLiteClient\src\SqliteConnection.cs,SetConnectionString,The following statement contains a magic number: for (int i = 0; i < conn_pieces.Length; i++) {  	string piece = conn_pieces [i].Trim ();  	int firstEqual = piece.IndexOf ('=');  	if (firstEqual == -1) {  		throw new InvalidOperationException ("Invalid connection string");  	}  	string token = piece.Substring (0' firstEqual);  	string tvalue = piece.Remove (0' firstEqual + 1).Trim ();  	string tvalue_lc = tvalue.ToLower (System.Globalization.CultureInfo.InvariantCulture).Trim ();  	switch (token.ToLower (System.Globalization.CultureInfo.InvariantCulture).Trim ()) {  	case "data source":  	case "uri":  		if (tvalue_lc.StartsWith ("file://")) {  			db_file = tvalue.Substring (7);  		}  		else if (tvalue_lc.StartsWith ("file:")) {  			db_file = tvalue.Substring (5);  		}  		else if (tvalue_lc.StartsWith ("/")) {  			db_file = tvalue;  			#if !(SQLITE_SILVERLIGHT || WINDOWS_MOBILE)  		}  		else if (tvalue_lc.StartsWith ("|DataDirectory|"' StringComparison.OrdinalIgnoreCase)) {  			AppDomainSetup ads = AppDomain.CurrentDomain.SetupInformation;  			string filePath = String.Format ("App_Data{0}{1}"' Path.DirectorySeparatorChar' tvalue_lc.Substring (15));  			db_file = Path.Combine (ads.ApplicationBase' filePath);  			#endif  		}  		else {  			#if !WINDOWS_PHONE  			throw new InvalidOperationException ("Invalid connection string: invalid URI");  			#else  			              db_file = tvalue; #endif  		}  		break;  	case "mode":  		// Ignored for SQLite3.  		////int db_mode = Convert.ToInt32 (tvalue);  		break;  	case "version":  		db_version = Convert.ToInt32 (tvalue);  		if (db_version < 3)  			throw new InvalidOperationException ("Minimum database version is 3");  		break;  	case "encoding":  		// Ignored for SQLite3.  		db_Encoding = Encoding.GetEncoding (tvalue);  		break;  	case "busy_timeout":  		db_BusyTimeout = Convert.ToInt32 (tvalue);  		break;  	case "read only":  	case "readonly":  		db_IsReadonly = ConvertStringToBoolean (tvalue.ToLowerInvariant ());  		break;  	case "failifmissing":  		db_IsFailIfMissing = ConvertStringToBoolean (tvalue.ToLowerInvariant ());  		break;  	case "password":  		if (!string.IsNullOrEmpty (db_password) && (db_password.Length != 34 || !db_password.StartsWith ("0x")))  			throw new InvalidOperationException ("Invalid password string: must be 34 hex digits starting with 0x");  		db_password = tvalue;  		break;  	}  }  
Magic Number,Community.CsharpSqlite.SQLiteClient,SqliteConnection,C:\repos\petlof_csharpsqlite\Community.CsharpSqlite.SQLiteClient\src\SqliteConnection.cs,SetConnectionString,The following statement contains a magic number: switch (token.ToLower (System.Globalization.CultureInfo.InvariantCulture).Trim ()) {  case "data source":  case "uri":  	if (tvalue_lc.StartsWith ("file://")) {  		db_file = tvalue.Substring (7);  	}  	else if (tvalue_lc.StartsWith ("file:")) {  		db_file = tvalue.Substring (5);  	}  	else if (tvalue_lc.StartsWith ("/")) {  		db_file = tvalue;  		#if !(SQLITE_SILVERLIGHT || WINDOWS_MOBILE)  	}  	else if (tvalue_lc.StartsWith ("|DataDirectory|"' StringComparison.OrdinalIgnoreCase)) {  		AppDomainSetup ads = AppDomain.CurrentDomain.SetupInformation;  		string filePath = String.Format ("App_Data{0}{1}"' Path.DirectorySeparatorChar' tvalue_lc.Substring (15));  		db_file = Path.Combine (ads.ApplicationBase' filePath);  		#endif  	}  	else {  		#if !WINDOWS_PHONE  		throw new InvalidOperationException ("Invalid connection string: invalid URI");  		#else  		              db_file = tvalue; #endif  	}  	break;  case "mode":  	// Ignored for SQLite3.  	////int db_mode = Convert.ToInt32 (tvalue);  	break;  case "version":  	db_version = Convert.ToInt32 (tvalue);  	if (db_version < 3)  		throw new InvalidOperationException ("Minimum database version is 3");  	break;  case "encoding":  	// Ignored for SQLite3.  	db_Encoding = Encoding.GetEncoding (tvalue);  	break;  case "busy_timeout":  	db_BusyTimeout = Convert.ToInt32 (tvalue);  	break;  case "read only":  case "readonly":  	db_IsReadonly = ConvertStringToBoolean (tvalue.ToLowerInvariant ());  	break;  case "failifmissing":  	db_IsFailIfMissing = ConvertStringToBoolean (tvalue.ToLowerInvariant ());  	break;  case "password":  	if (!string.IsNullOrEmpty (db_password) && (db_password.Length != 34 || !db_password.StartsWith ("0x")))  		throw new InvalidOperationException ("Invalid password string: must be 34 hex digits starting with 0x");  	db_password = tvalue;  	break;  }  
Magic Number,Community.CsharpSqlite.SQLiteClient,SqliteConnection,C:\repos\petlof_csharpsqlite\Community.CsharpSqlite.SQLiteClient\src\SqliteConnection.cs,SetConnectionString,The following statement contains a magic number: switch (token.ToLower (System.Globalization.CultureInfo.InvariantCulture).Trim ()) {  case "data source":  case "uri":  	if (tvalue_lc.StartsWith ("file://")) {  		db_file = tvalue.Substring (7);  	}  	else if (tvalue_lc.StartsWith ("file:")) {  		db_file = tvalue.Substring (5);  	}  	else if (tvalue_lc.StartsWith ("/")) {  		db_file = tvalue;  		#if !(SQLITE_SILVERLIGHT || WINDOWS_MOBILE)  	}  	else if (tvalue_lc.StartsWith ("|DataDirectory|"' StringComparison.OrdinalIgnoreCase)) {  		AppDomainSetup ads = AppDomain.CurrentDomain.SetupInformation;  		string filePath = String.Format ("App_Data{0}{1}"' Path.DirectorySeparatorChar' tvalue_lc.Substring (15));  		db_file = Path.Combine (ads.ApplicationBase' filePath);  		#endif  	}  	else {  		#if !WINDOWS_PHONE  		throw new InvalidOperationException ("Invalid connection string: invalid URI");  		#else  		              db_file = tvalue; #endif  	}  	break;  case "mode":  	// Ignored for SQLite3.  	////int db_mode = Convert.ToInt32 (tvalue);  	break;  case "version":  	db_version = Convert.ToInt32 (tvalue);  	if (db_version < 3)  		throw new InvalidOperationException ("Minimum database version is 3");  	break;  case "encoding":  	// Ignored for SQLite3.  	db_Encoding = Encoding.GetEncoding (tvalue);  	break;  case "busy_timeout":  	db_BusyTimeout = Convert.ToInt32 (tvalue);  	break;  case "read only":  case "readonly":  	db_IsReadonly = ConvertStringToBoolean (tvalue.ToLowerInvariant ());  	break;  case "failifmissing":  	db_IsFailIfMissing = ConvertStringToBoolean (tvalue.ToLowerInvariant ());  	break;  case "password":  	if (!string.IsNullOrEmpty (db_password) && (db_password.Length != 34 || !db_password.StartsWith ("0x")))  		throw new InvalidOperationException ("Invalid password string: must be 34 hex digits starting with 0x");  	db_password = tvalue;  	break;  }  
Magic Number,Community.CsharpSqlite.SQLiteClient,SqliteConnection,C:\repos\petlof_csharpsqlite\Community.CsharpSqlite.SQLiteClient\src\SqliteConnection.cs,SetConnectionString,The following statement contains a magic number: switch (token.ToLower (System.Globalization.CultureInfo.InvariantCulture).Trim ()) {  case "data source":  case "uri":  	if (tvalue_lc.StartsWith ("file://")) {  		db_file = tvalue.Substring (7);  	}  	else if (tvalue_lc.StartsWith ("file:")) {  		db_file = tvalue.Substring (5);  	}  	else if (tvalue_lc.StartsWith ("/")) {  		db_file = tvalue;  		#if !(SQLITE_SILVERLIGHT || WINDOWS_MOBILE)  	}  	else if (tvalue_lc.StartsWith ("|DataDirectory|"' StringComparison.OrdinalIgnoreCase)) {  		AppDomainSetup ads = AppDomain.CurrentDomain.SetupInformation;  		string filePath = String.Format ("App_Data{0}{1}"' Path.DirectorySeparatorChar' tvalue_lc.Substring (15));  		db_file = Path.Combine (ads.ApplicationBase' filePath);  		#endif  	}  	else {  		#if !WINDOWS_PHONE  		throw new InvalidOperationException ("Invalid connection string: invalid URI");  		#else  		              db_file = tvalue; #endif  	}  	break;  case "mode":  	// Ignored for SQLite3.  	////int db_mode = Convert.ToInt32 (tvalue);  	break;  case "version":  	db_version = Convert.ToInt32 (tvalue);  	if (db_version < 3)  		throw new InvalidOperationException ("Minimum database version is 3");  	break;  case "encoding":  	// Ignored for SQLite3.  	db_Encoding = Encoding.GetEncoding (tvalue);  	break;  case "busy_timeout":  	db_BusyTimeout = Convert.ToInt32 (tvalue);  	break;  case "read only":  case "readonly":  	db_IsReadonly = ConvertStringToBoolean (tvalue.ToLowerInvariant ());  	break;  case "failifmissing":  	db_IsFailIfMissing = ConvertStringToBoolean (tvalue.ToLowerInvariant ());  	break;  case "password":  	if (!string.IsNullOrEmpty (db_password) && (db_password.Length != 34 || !db_password.StartsWith ("0x")))  		throw new InvalidOperationException ("Invalid password string: must be 34 hex digits starting with 0x");  	db_password = tvalue;  	break;  }  
Magic Number,Community.CsharpSqlite.SQLiteClient,SqliteConnection,C:\repos\petlof_csharpsqlite\Community.CsharpSqlite.SQLiteClient\src\SqliteConnection.cs,SetConnectionString,The following statement contains a magic number: switch (token.ToLower (System.Globalization.CultureInfo.InvariantCulture).Trim ()) {  case "data source":  case "uri":  	if (tvalue_lc.StartsWith ("file://")) {  		db_file = tvalue.Substring (7);  	}  	else if (tvalue_lc.StartsWith ("file:")) {  		db_file = tvalue.Substring (5);  	}  	else if (tvalue_lc.StartsWith ("/")) {  		db_file = tvalue;  		#if !(SQLITE_SILVERLIGHT || WINDOWS_MOBILE)  	}  	else if (tvalue_lc.StartsWith ("|DataDirectory|"' StringComparison.OrdinalIgnoreCase)) {  		AppDomainSetup ads = AppDomain.CurrentDomain.SetupInformation;  		string filePath = String.Format ("App_Data{0}{1}"' Path.DirectorySeparatorChar' tvalue_lc.Substring (15));  		db_file = Path.Combine (ads.ApplicationBase' filePath);  		#endif  	}  	else {  		#if !WINDOWS_PHONE  		throw new InvalidOperationException ("Invalid connection string: invalid URI");  		#else  		              db_file = tvalue; #endif  	}  	break;  case "mode":  	// Ignored for SQLite3.  	////int db_mode = Convert.ToInt32 (tvalue);  	break;  case "version":  	db_version = Convert.ToInt32 (tvalue);  	if (db_version < 3)  		throw new InvalidOperationException ("Minimum database version is 3");  	break;  case "encoding":  	// Ignored for SQLite3.  	db_Encoding = Encoding.GetEncoding (tvalue);  	break;  case "busy_timeout":  	db_BusyTimeout = Convert.ToInt32 (tvalue);  	break;  case "read only":  case "readonly":  	db_IsReadonly = ConvertStringToBoolean (tvalue.ToLowerInvariant ());  	break;  case "failifmissing":  	db_IsFailIfMissing = ConvertStringToBoolean (tvalue.ToLowerInvariant ());  	break;  case "password":  	if (!string.IsNullOrEmpty (db_password) && (db_password.Length != 34 || !db_password.StartsWith ("0x")))  		throw new InvalidOperationException ("Invalid password string: must be 34 hex digits starting with 0x");  	db_password = tvalue;  	break;  }  
Magic Number,Community.CsharpSqlite.SQLiteClient,SqliteConnection,C:\repos\petlof_csharpsqlite\Community.CsharpSqlite.SQLiteClient\src\SqliteConnection.cs,SetConnectionString,The following statement contains a magic number: switch (token.ToLower (System.Globalization.CultureInfo.InvariantCulture).Trim ()) {  case "data source":  case "uri":  	if (tvalue_lc.StartsWith ("file://")) {  		db_file = tvalue.Substring (7);  	}  	else if (tvalue_lc.StartsWith ("file:")) {  		db_file = tvalue.Substring (5);  	}  	else if (tvalue_lc.StartsWith ("/")) {  		db_file = tvalue;  		#if !(SQLITE_SILVERLIGHT || WINDOWS_MOBILE)  	}  	else if (tvalue_lc.StartsWith ("|DataDirectory|"' StringComparison.OrdinalIgnoreCase)) {  		AppDomainSetup ads = AppDomain.CurrentDomain.SetupInformation;  		string filePath = String.Format ("App_Data{0}{1}"' Path.DirectorySeparatorChar' tvalue_lc.Substring (15));  		db_file = Path.Combine (ads.ApplicationBase' filePath);  		#endif  	}  	else {  		#if !WINDOWS_PHONE  		throw new InvalidOperationException ("Invalid connection string: invalid URI");  		#else  		              db_file = tvalue; #endif  	}  	break;  case "mode":  	// Ignored for SQLite3.  	////int db_mode = Convert.ToInt32 (tvalue);  	break;  case "version":  	db_version = Convert.ToInt32 (tvalue);  	if (db_version < 3)  		throw new InvalidOperationException ("Minimum database version is 3");  	break;  case "encoding":  	// Ignored for SQLite3.  	db_Encoding = Encoding.GetEncoding (tvalue);  	break;  case "busy_timeout":  	db_BusyTimeout = Convert.ToInt32 (tvalue);  	break;  case "read only":  case "readonly":  	db_IsReadonly = ConvertStringToBoolean (tvalue.ToLowerInvariant ());  	break;  case "failifmissing":  	db_IsFailIfMissing = ConvertStringToBoolean (tvalue.ToLowerInvariant ());  	break;  case "password":  	if (!string.IsNullOrEmpty (db_password) && (db_password.Length != 34 || !db_password.StartsWith ("0x")))  		throw new InvalidOperationException ("Invalid password string: must be 34 hex digits starting with 0x");  	db_password = tvalue;  	break;  }  
Magic Number,Community.CsharpSqlite.SQLiteClient,SqliteConnection,C:\repos\petlof_csharpsqlite\Community.CsharpSqlite.SQLiteClient\src\SqliteConnection.cs,SetConnectionString,The following statement contains a magic number: if (tvalue_lc.StartsWith ("file://")) {  	db_file = tvalue.Substring (7);  }  else if (tvalue_lc.StartsWith ("file:")) {  	db_file = tvalue.Substring (5);  }  else if (tvalue_lc.StartsWith ("/")) {  	db_file = tvalue;  	#if !(SQLITE_SILVERLIGHT || WINDOWS_MOBILE)  }  else if (tvalue_lc.StartsWith ("|DataDirectory|"' StringComparison.OrdinalIgnoreCase)) {  	AppDomainSetup ads = AppDomain.CurrentDomain.SetupInformation;  	string filePath = String.Format ("App_Data{0}{1}"' Path.DirectorySeparatorChar' tvalue_lc.Substring (15));  	db_file = Path.Combine (ads.ApplicationBase' filePath);  	#endif  }  else {  	#if !WINDOWS_PHONE  	throw new InvalidOperationException ("Invalid connection string: invalid URI");  	#else  	              db_file = tvalue; #endif  }  
Magic Number,Community.CsharpSqlite.SQLiteClient,SqliteConnection,C:\repos\petlof_csharpsqlite\Community.CsharpSqlite.SQLiteClient\src\SqliteConnection.cs,SetConnectionString,The following statement contains a magic number: if (tvalue_lc.StartsWith ("file://")) {  	db_file = tvalue.Substring (7);  }  else if (tvalue_lc.StartsWith ("file:")) {  	db_file = tvalue.Substring (5);  }  else if (tvalue_lc.StartsWith ("/")) {  	db_file = tvalue;  	#if !(SQLITE_SILVERLIGHT || WINDOWS_MOBILE)  }  else if (tvalue_lc.StartsWith ("|DataDirectory|"' StringComparison.OrdinalIgnoreCase)) {  	AppDomainSetup ads = AppDomain.CurrentDomain.SetupInformation;  	string filePath = String.Format ("App_Data{0}{1}"' Path.DirectorySeparatorChar' tvalue_lc.Substring (15));  	db_file = Path.Combine (ads.ApplicationBase' filePath);  	#endif  }  else {  	#if !WINDOWS_PHONE  	throw new InvalidOperationException ("Invalid connection string: invalid URI");  	#else  	              db_file = tvalue; #endif  }  
Magic Number,Community.CsharpSqlite.SQLiteClient,SqliteConnection,C:\repos\petlof_csharpsqlite\Community.CsharpSqlite.SQLiteClient\src\SqliteConnection.cs,SetConnectionString,The following statement contains a magic number: if (tvalue_lc.StartsWith ("file://")) {  	db_file = tvalue.Substring (7);  }  else if (tvalue_lc.StartsWith ("file:")) {  	db_file = tvalue.Substring (5);  }  else if (tvalue_lc.StartsWith ("/")) {  	db_file = tvalue;  	#if !(SQLITE_SILVERLIGHT || WINDOWS_MOBILE)  }  else if (tvalue_lc.StartsWith ("|DataDirectory|"' StringComparison.OrdinalIgnoreCase)) {  	AppDomainSetup ads = AppDomain.CurrentDomain.SetupInformation;  	string filePath = String.Format ("App_Data{0}{1}"' Path.DirectorySeparatorChar' tvalue_lc.Substring (15));  	db_file = Path.Combine (ads.ApplicationBase' filePath);  	#endif  }  else {  	#if !WINDOWS_PHONE  	throw new InvalidOperationException ("Invalid connection string: invalid URI");  	#else  	              db_file = tvalue; #endif  }  
Magic Number,Community.CsharpSqlite.SQLiteClient,SqliteConnection,C:\repos\petlof_csharpsqlite\Community.CsharpSqlite.SQLiteClient\src\SqliteConnection.cs,SetConnectionString,The following statement contains a magic number: db_file = tvalue.Substring (7);  
Magic Number,Community.CsharpSqlite.SQLiteClient,SqliteConnection,C:\repos\petlof_csharpsqlite\Community.CsharpSqlite.SQLiteClient\src\SqliteConnection.cs,SetConnectionString,The following statement contains a magic number: if (tvalue_lc.StartsWith ("file:")) {  	db_file = tvalue.Substring (5);  }  else if (tvalue_lc.StartsWith ("/")) {  	db_file = tvalue;  	#if !(SQLITE_SILVERLIGHT || WINDOWS_MOBILE)  }  else if (tvalue_lc.StartsWith ("|DataDirectory|"' StringComparison.OrdinalIgnoreCase)) {  	AppDomainSetup ads = AppDomain.CurrentDomain.SetupInformation;  	string filePath = String.Format ("App_Data{0}{1}"' Path.DirectorySeparatorChar' tvalue_lc.Substring (15));  	db_file = Path.Combine (ads.ApplicationBase' filePath);  	#endif  }  else {  	#if !WINDOWS_PHONE  	throw new InvalidOperationException ("Invalid connection string: invalid URI");  	#else  	              db_file = tvalue; #endif  }  
Magic Number,Community.CsharpSqlite.SQLiteClient,SqliteConnection,C:\repos\petlof_csharpsqlite\Community.CsharpSqlite.SQLiteClient\src\SqliteConnection.cs,SetConnectionString,The following statement contains a magic number: if (tvalue_lc.StartsWith ("file:")) {  	db_file = tvalue.Substring (5);  }  else if (tvalue_lc.StartsWith ("/")) {  	db_file = tvalue;  	#if !(SQLITE_SILVERLIGHT || WINDOWS_MOBILE)  }  else if (tvalue_lc.StartsWith ("|DataDirectory|"' StringComparison.OrdinalIgnoreCase)) {  	AppDomainSetup ads = AppDomain.CurrentDomain.SetupInformation;  	string filePath = String.Format ("App_Data{0}{1}"' Path.DirectorySeparatorChar' tvalue_lc.Substring (15));  	db_file = Path.Combine (ads.ApplicationBase' filePath);  	#endif  }  else {  	#if !WINDOWS_PHONE  	throw new InvalidOperationException ("Invalid connection string: invalid URI");  	#else  	              db_file = tvalue; #endif  }  
Magic Number,Community.CsharpSqlite.SQLiteClient,SqliteConnection,C:\repos\petlof_csharpsqlite\Community.CsharpSqlite.SQLiteClient\src\SqliteConnection.cs,SetConnectionString,The following statement contains a magic number: db_file = tvalue.Substring (5);  
Magic Number,Community.CsharpSqlite.SQLiteClient,SqliteConnection,C:\repos\petlof_csharpsqlite\Community.CsharpSqlite.SQLiteClient\src\SqliteConnection.cs,SetConnectionString,The following statement contains a magic number: if (tvalue_lc.StartsWith ("/")) {  	db_file = tvalue;  	#if !(SQLITE_SILVERLIGHT || WINDOWS_MOBILE)  }  else if (tvalue_lc.StartsWith ("|DataDirectory|"' StringComparison.OrdinalIgnoreCase)) {  	AppDomainSetup ads = AppDomain.CurrentDomain.SetupInformation;  	string filePath = String.Format ("App_Data{0}{1}"' Path.DirectorySeparatorChar' tvalue_lc.Substring (15));  	db_file = Path.Combine (ads.ApplicationBase' filePath);  	#endif  }  else {  	#if !WINDOWS_PHONE  	throw new InvalidOperationException ("Invalid connection string: invalid URI");  	#else  	              db_file = tvalue; #endif  }  
Magic Number,Community.CsharpSqlite.SQLiteClient,SqliteConnection,C:\repos\petlof_csharpsqlite\Community.CsharpSqlite.SQLiteClient\src\SqliteConnection.cs,SetConnectionString,The following statement contains a magic number: if (tvalue_lc.StartsWith ("|DataDirectory|"' StringComparison.OrdinalIgnoreCase)) {  	AppDomainSetup ads = AppDomain.CurrentDomain.SetupInformation;  	string filePath = String.Format ("App_Data{0}{1}"' Path.DirectorySeparatorChar' tvalue_lc.Substring (15));  	db_file = Path.Combine (ads.ApplicationBase' filePath);  	#endif  }  else {  	#if !WINDOWS_PHONE  	throw new InvalidOperationException ("Invalid connection string: invalid URI");  	#else  	              db_file = tvalue; #endif  }  
Magic Number,Community.CsharpSqlite.SQLiteClient,SqliteConnection,C:\repos\petlof_csharpsqlite\Community.CsharpSqlite.SQLiteClient\src\SqliteConnection.cs,SetConnectionString,The following statement contains a magic number: if (db_version < 3)  	throw new InvalidOperationException ("Minimum database version is 3");  
Magic Number,Community.CsharpSqlite.SQLiteClient,SqliteConnection,C:\repos\petlof_csharpsqlite\Community.CsharpSqlite.SQLiteClient\src\SqliteConnection.cs,SetConnectionString,The following statement contains a magic number: if (!string.IsNullOrEmpty (db_password) && (db_password.Length != 34 || !db_password.StartsWith ("0x")))  	throw new InvalidOperationException ("Invalid password string: must be 34 hex digits starting with 0x");  
Magic Number,Community.CsharpSqlite.SQLiteClient,SqliteConnection,C:\repos\petlof_csharpsqlite\Community.CsharpSqlite.SQLiteClient\src\SqliteConnection.cs,Close,The following statement contains a magic number: if (Version == 3)  	Sqlite3.sqlite3_close (sqlite_handle2);  
Magic Number,Community.CsharpSqlite.SQLiteClient,SqliteConnection,C:\repos\petlof_csharpsqlite\Community.CsharpSqlite.SQLiteClient\src\SqliteConnection.cs,Open,The following statement contains a magic number: if (Version == 3) {  	int flags = Sqlite3.SQLITE_OPEN_NOMUTEX;  	if (!db_IsFailIfMissing && !db_IsReadonly)  		flags |= Sqlite3.SQLITE_OPEN_CREATE;  	if (db_IsReadonly) {  		flags |= Sqlite3.SQLITE_OPEN_READONLY;  	}  	else {  		flags |= Sqlite3.SQLITE_OPEN_READWRITE;  	}  	sqlite_handle = (IntPtr)1;  	int err = Sqlite3.sqlite3_open_v2 (db_file' out sqlite_handle2' flags' null);  	if (err == (int)SqliteError.ERROR)  		throw new ApplicationException (Sqlite3.sqlite3_errmsg (sqlite_handle2));  	if (db_BusyTimeout != 0)  		Sqlite3.sqlite3_busy_timeout (sqlite_handle2' db_BusyTimeout);  	if (!string.IsNullOrEmpty (db_password)) {  		SqliteCommand cmd = (SqliteCommand)this.CreateCommand ();  		cmd.CommandText = "pragma hexkey='" + db_password + "'";  		cmd.ExecuteNonQuery ();  	}  }  
Magic Number,Community.CsharpSqlite.SQLiteClient,SqliteConnection,C:\repos\petlof_csharpsqlite\Community.CsharpSqlite.SQLiteClient\src\SqliteConnection.cs,GetSchemaDataSourceInformation,The following statement contains a magic number: dt.LoadDataRow (new object[] {  	""'  	"SQLite"'  	ServerVersion'  	ServerVersion'  	3'  	""'  	1'  	false'  	""'  	""'  	30'  	""'  	2'  	DBNull.Value'  	""  }' true);  
Magic Number,Community.CsharpSqlite.SQLiteClient,SqliteConnection,C:\repos\petlof_csharpsqlite\Community.CsharpSqlite.SQLiteClient\src\SqliteConnection.cs,GetSchemaDataSourceInformation,The following statement contains a magic number: dt.LoadDataRow (new object[] {  	""'  	"SQLite"'  	ServerVersion'  	ServerVersion'  	3'  	""'  	1'  	false'  	""'  	""'  	30'  	""'  	2'  	DBNull.Value'  	""  }' true);  
Magic Number,Community.CsharpSqlite.SQLiteClient,SqliteConnection,C:\repos\petlof_csharpsqlite\Community.CsharpSqlite.SQLiteClient\src\SqliteConnection.cs,GetSchemaDataSourceInformation,The following statement contains a magic number: dt.LoadDataRow (new object[] {  	""'  	"SQLite"'  	ServerVersion'  	ServerVersion'  	3'  	""'  	1'  	false'  	""'  	""'  	30'  	""'  	2'  	DBNull.Value'  	""  }' true);  
Magic Number,Community.CsharpSqlite.SQLiteClient,SqliteConnection,C:\repos\petlof_csharpsqlite\Community.CsharpSqlite.SQLiteClient\src\SqliteConnection.cs,GetSchemaDataTypes,The following statement contains a magic number: dt.LoadDataRow (new object[] {  	"CHARACTER"'  	"TEXT"'  	2'  	"System.String"  }' true);  
Magic Number,Community.CsharpSqlite.SQLiteClient,SqliteConnection,C:\repos\petlof_csharpsqlite\Community.CsharpSqlite.SQLiteClient\src\SqliteConnection.cs,GetSchemaDataTypes,The following statement contains a magic number: dt.LoadDataRow (new object[] {  	"VARCHAR"'  	"TEXT"'  	2'  	"System.String"  }' true);  
Magic Number,Community.CsharpSqlite.SQLiteClient,SqliteConnection,C:\repos\petlof_csharpsqlite\Community.CsharpSqlite.SQLiteClient\src\SqliteConnection.cs,GetSchemaDataTypes,The following statement contains a magic number: dt.LoadDataRow (new object[] {  	"VARYING CHARACTER"'  	"TEXT"'  	2'  	"System.String"  }' true);  
Magic Number,Community.CsharpSqlite.SQLiteClient,SqliteConnection,C:\repos\petlof_csharpsqlite\Community.CsharpSqlite.SQLiteClient\src\SqliteConnection.cs,GetSchemaDataTypes,The following statement contains a magic number: dt.LoadDataRow (new object[] {  	"NCHAR"'  	"TEXT"'  	2'  	"System.String"  }' true);  
Magic Number,Community.CsharpSqlite.SQLiteClient,SqliteConnection,C:\repos\petlof_csharpsqlite\Community.CsharpSqlite.SQLiteClient\src\SqliteConnection.cs,GetSchemaDataTypes,The following statement contains a magic number: dt.LoadDataRow (new object[] {  	"NATIVE CHARACTER"'  	"TEXT"'  	2'  	"System.String"  }' true);  
Magic Number,Community.CsharpSqlite.SQLiteClient,SqliteConnection,C:\repos\petlof_csharpsqlite\Community.CsharpSqlite.SQLiteClient\src\SqliteConnection.cs,GetSchemaDataTypes,The following statement contains a magic number: dt.LoadDataRow (new object[] {  	"NVARHCAR"'  	"TEXT"'  	2'  	"System.String"  }' true);  
Magic Number,Community.CsharpSqlite.SQLiteClient,SqliteConnection,C:\repos\petlof_csharpsqlite\Community.CsharpSqlite.SQLiteClient\src\SqliteConnection.cs,GetSchemaDataTypes,The following statement contains a magic number: dt.LoadDataRow (new object[] {  	"TEXT"'  	"TEXT"'  	2'  	"System.String"  }' true);  
Magic Number,Community.CsharpSqlite.SQLiteClient,SqliteConnection,C:\repos\petlof_csharpsqlite\Community.CsharpSqlite.SQLiteClient\src\SqliteConnection.cs,GetSchemaDataTypes,The following statement contains a magic number: dt.LoadDataRow (new object[] {  	"CLOB"'  	"TEXT"'  	2'  	"System.String"  }' true);  
Magic Number,Community.CsharpSqlite.SQLiteClient,SqliteConnection,C:\repos\petlof_csharpsqlite\Community.CsharpSqlite.SQLiteClient\src\SqliteConnection.cs,GetSchemaDataTypes,The following statement contains a magic number: dt.LoadDataRow (new object[] {  	"BLOB"'  	"NONE"'  	3'  	"System.Byte[]"  }' true);  
Magic Number,Community.CsharpSqlite.SQLiteClient,SqliteConnection,C:\repos\petlof_csharpsqlite\Community.CsharpSqlite.SQLiteClient\src\SqliteConnection.cs,GetSchemaDataTypes,The following statement contains a magic number: dt.LoadDataRow (new object[] {  	"REAL"'  	"REAL"'  	4'  	"System.Double"  }' true);  
Magic Number,Community.CsharpSqlite.SQLiteClient,SqliteConnection,C:\repos\petlof_csharpsqlite\Community.CsharpSqlite.SQLiteClient\src\SqliteConnection.cs,GetSchemaDataTypes,The following statement contains a magic number: dt.LoadDataRow (new object[] {  	"DOUBLE"'  	"REAL"'  	4'  	"System.Double"  }' true);  
Magic Number,Community.CsharpSqlite.SQLiteClient,SqliteConnection,C:\repos\petlof_csharpsqlite\Community.CsharpSqlite.SQLiteClient\src\SqliteConnection.cs,GetSchemaDataTypes,The following statement contains a magic number: dt.LoadDataRow (new object[] {  	"DOUBLE PRECISION"'  	"REAL"'  	4'  	"System.Double"  }' true);  
Magic Number,Community.CsharpSqlite.SQLiteClient,SqliteConnection,C:\repos\petlof_csharpsqlite\Community.CsharpSqlite.SQLiteClient\src\SqliteConnection.cs,GetSchemaDataTypes,The following statement contains a magic number: dt.LoadDataRow (new object[] {  	"FLOAT"'  	"REAL"'  	4'  	"System.Double"  }' true);  
Magic Number,Community.CsharpSqlite.SQLiteClient,SqliteConnection,C:\repos\petlof_csharpsqlite\Community.CsharpSqlite.SQLiteClient\src\SqliteConnection.cs,GetSchemaDataTypes,The following statement contains a magic number: dt.LoadDataRow (new object[] {  	"NUMERIC"'  	"NUMERIC"'  	5'  	"System.Decimal"  }' true);  
Magic Number,Community.CsharpSqlite.SQLiteClient,SqliteConnection,C:\repos\petlof_csharpsqlite\Community.CsharpSqlite.SQLiteClient\src\SqliteConnection.cs,GetSchemaDataTypes,The following statement contains a magic number: dt.LoadDataRow (new object[] {  	"DECIMAL"'  	"NUMERIC"'  	5'  	"System.Decimal"  }' true);  
Magic Number,Community.CsharpSqlite.SQLiteClient,SqliteConnection,C:\repos\petlof_csharpsqlite\Community.CsharpSqlite.SQLiteClient\src\SqliteConnection.cs,GetSchemaDataTypes,The following statement contains a magic number: dt.LoadDataRow (new object[] {  	"BOOLEAN"'  	"NUMERIC"'  	5'  	"System.Boolean"  }' true);  
Magic Number,Community.CsharpSqlite.SQLiteClient,SqliteConnection,C:\repos\petlof_csharpsqlite\Community.CsharpSqlite.SQLiteClient\src\SqliteConnection.cs,GetSchemaDataTypes,The following statement contains a magic number: dt.LoadDataRow (new object[] {  	"DATE"'  	"NUMERIC"'  	5'  	"System.DateTime"  }' true);  
Magic Number,Community.CsharpSqlite.SQLiteClient,SqliteConnection,C:\repos\petlof_csharpsqlite\Community.CsharpSqlite.SQLiteClient\src\SqliteConnection.cs,GetSchemaDataTypes,The following statement contains a magic number: dt.LoadDataRow (new object[] {  	"DATETIME"'  	"NUMERIC"'  	5'  	"System.DateTime"  }' true);  
Magic Number,Community.CsharpSqlite.SQLiteClient,SqliteDataReader,C:\repos\petlof_csharpsqlite\Community.CsharpSqlite.SQLiteClient\src\SqliteDataReader.cs,ReadpVm,The following statement contains a magic number: while (true) {  	bool hasdata = cmd.ExecuteStatement (pVm' out pN' out pazValue' out pazColName);  	// For the first row' get the column information  	if (first) {  		first = false;  		if (version == 3) {  			// A decltype might be null if the type is unknown to sqlite.  			decltypes = new string[pN];  			declmode = new int[pN];  			// 1 == integer' 2 == datetime  			for (int i = 0; i < pN; i++) {  				string decl = Sqlite3.sqlite3_column_decltype (pVm' i);  				if (decl != null) {  					decltypes [i] = decl.ToLower (System.Globalization.CultureInfo.InvariantCulture);  					if (decltypes [i] == "int" || decltypes [i] == "integer")  						declmode [i] = 1;  					else if (decltypes [i] == "date" || decltypes [i] == "datetime")  						declmode [i] = 2;  				}  			}  		}  		columns = new string[pN];  		for (int i = 0; i < pN; i++) {  			string colName;  			//if (version == 2) {  			//	IntPtr fieldPtr = Marshal.ReadIntPtr (pazColName' i*IntPtr.Size);  			//	colName = Sqlite.HeapToString (fieldPtr' ((SqliteConnection)cmd.Connection).Encoding);  			//} else {  			colName = Sqlite3.sqlite3_column_name (pVm' i);  			//}  			columns [i] = colName;  			column_names_sens [colName] = i;  			column_names_insens [colName] = i;  		}  	}  	if (!hasdata)  		break;  	object[] data_row = new object[pN];  	for (int i = 0; i < pN; i++) {  		/*                     if (version == 2) { 						IntPtr fieldPtr = Marshal.ReadIntPtr (pazValue' i*IntPtr.Size); 						data_row[i] = Sqlite.HeapToString (fieldPtr' ((SqliteConnection)cmd.Connection).Encoding); 					} else {                     */switch (Sqlite3.sqlite3_column_type (pVm' i)) {  		case 1:  			long val = Sqlite3.sqlite3_column_int64 (pVm' i);  			// If the column was declared as an 'int' or 'integer'' let's play  			// nice and return an int (version 3 only).  			if (declmode [i] == 1 && val >= int.MinValue && val <= int.MaxValue)  				data_row [i] = (int)val;  			// Or if it was declared a date or datetime' do the reverse of what we  			// do for DateTime parameters.  			else if (declmode [i] == 2)  				data_row [i] = DateTime.FromFileTime (val);  			else  				data_row [i] = val;  			break;  		case 2:  			data_row [i] = Sqlite3.sqlite3_column_double (pVm' i);  			break;  		case 3:  			data_row [i] = Sqlite3.sqlite3_column_text (pVm' i);  			// If the column was declared as a 'date' or 'datetime'' let's play  			// nice and return a DateTime (version 3 only).  			if (declmode [i] == 2)  				if (data_row [i] == null)  					data_row [i] = null;  				else  					data_row [i] = DateTime.Parse ((string)data_row [i]' System.Globalization.CultureInfo.InvariantCulture);  			break;  		case 4:  			byte[] blob = Sqlite3.sqlite3_column_blob (pVm' i);  			////int blobbytes = Sqlite3.sqlite3_column_bytes16 (pVm' i);  			////byte[] blob = new byte[blobbytes];  			////Marshal.Copy (blobptr' blob' 0' blobbytes);  			data_row [i] = blob;  			break;  		case 5:  			data_row [i] = null;  			break;  		default:  			throw new Exception ("FATAL: Unknown sqlite3_column_type");  		//}  		}  	}  	rows.Add (data_row);  }  
Magic Number,Community.CsharpSqlite.SQLiteClient,SqliteDataReader,C:\repos\petlof_csharpsqlite\Community.CsharpSqlite.SQLiteClient\src\SqliteDataReader.cs,ReadpVm,The following statement contains a magic number: while (true) {  	bool hasdata = cmd.ExecuteStatement (pVm' out pN' out pazValue' out pazColName);  	// For the first row' get the column information  	if (first) {  		first = false;  		if (version == 3) {  			// A decltype might be null if the type is unknown to sqlite.  			decltypes = new string[pN];  			declmode = new int[pN];  			// 1 == integer' 2 == datetime  			for (int i = 0; i < pN; i++) {  				string decl = Sqlite3.sqlite3_column_decltype (pVm' i);  				if (decl != null) {  					decltypes [i] = decl.ToLower (System.Globalization.CultureInfo.InvariantCulture);  					if (decltypes [i] == "int" || decltypes [i] == "integer")  						declmode [i] = 1;  					else if (decltypes [i] == "date" || decltypes [i] == "datetime")  						declmode [i] = 2;  				}  			}  		}  		columns = new string[pN];  		for (int i = 0; i < pN; i++) {  			string colName;  			//if (version == 2) {  			//	IntPtr fieldPtr = Marshal.ReadIntPtr (pazColName' i*IntPtr.Size);  			//	colName = Sqlite.HeapToString (fieldPtr' ((SqliteConnection)cmd.Connection).Encoding);  			//} else {  			colName = Sqlite3.sqlite3_column_name (pVm' i);  			//}  			columns [i] = colName;  			column_names_sens [colName] = i;  			column_names_insens [colName] = i;  		}  	}  	if (!hasdata)  		break;  	object[] data_row = new object[pN];  	for (int i = 0; i < pN; i++) {  		/*                     if (version == 2) { 						IntPtr fieldPtr = Marshal.ReadIntPtr (pazValue' i*IntPtr.Size); 						data_row[i] = Sqlite.HeapToString (fieldPtr' ((SqliteConnection)cmd.Connection).Encoding); 					} else {                     */switch (Sqlite3.sqlite3_column_type (pVm' i)) {  		case 1:  			long val = Sqlite3.sqlite3_column_int64 (pVm' i);  			// If the column was declared as an 'int' or 'integer'' let's play  			// nice and return an int (version 3 only).  			if (declmode [i] == 1 && val >= int.MinValue && val <= int.MaxValue)  				data_row [i] = (int)val;  			// Or if it was declared a date or datetime' do the reverse of what we  			// do for DateTime parameters.  			else if (declmode [i] == 2)  				data_row [i] = DateTime.FromFileTime (val);  			else  				data_row [i] = val;  			break;  		case 2:  			data_row [i] = Sqlite3.sqlite3_column_double (pVm' i);  			break;  		case 3:  			data_row [i] = Sqlite3.sqlite3_column_text (pVm' i);  			// If the column was declared as a 'date' or 'datetime'' let's play  			// nice and return a DateTime (version 3 only).  			if (declmode [i] == 2)  				if (data_row [i] == null)  					data_row [i] = null;  				else  					data_row [i] = DateTime.Parse ((string)data_row [i]' System.Globalization.CultureInfo.InvariantCulture);  			break;  		case 4:  			byte[] blob = Sqlite3.sqlite3_column_blob (pVm' i);  			////int blobbytes = Sqlite3.sqlite3_column_bytes16 (pVm' i);  			////byte[] blob = new byte[blobbytes];  			////Marshal.Copy (blobptr' blob' 0' blobbytes);  			data_row [i] = blob;  			break;  		case 5:  			data_row [i] = null;  			break;  		default:  			throw new Exception ("FATAL: Unknown sqlite3_column_type");  		//}  		}  	}  	rows.Add (data_row);  }  
Magic Number,Community.CsharpSqlite.SQLiteClient,SqliteDataReader,C:\repos\petlof_csharpsqlite\Community.CsharpSqlite.SQLiteClient\src\SqliteDataReader.cs,ReadpVm,The following statement contains a magic number: while (true) {  	bool hasdata = cmd.ExecuteStatement (pVm' out pN' out pazValue' out pazColName);  	// For the first row' get the column information  	if (first) {  		first = false;  		if (version == 3) {  			// A decltype might be null if the type is unknown to sqlite.  			decltypes = new string[pN];  			declmode = new int[pN];  			// 1 == integer' 2 == datetime  			for (int i = 0; i < pN; i++) {  				string decl = Sqlite3.sqlite3_column_decltype (pVm' i);  				if (decl != null) {  					decltypes [i] = decl.ToLower (System.Globalization.CultureInfo.InvariantCulture);  					if (decltypes [i] == "int" || decltypes [i] == "integer")  						declmode [i] = 1;  					else if (decltypes [i] == "date" || decltypes [i] == "datetime")  						declmode [i] = 2;  				}  			}  		}  		columns = new string[pN];  		for (int i = 0; i < pN; i++) {  			string colName;  			//if (version == 2) {  			//	IntPtr fieldPtr = Marshal.ReadIntPtr (pazColName' i*IntPtr.Size);  			//	colName = Sqlite.HeapToString (fieldPtr' ((SqliteConnection)cmd.Connection).Encoding);  			//} else {  			colName = Sqlite3.sqlite3_column_name (pVm' i);  			//}  			columns [i] = colName;  			column_names_sens [colName] = i;  			column_names_insens [colName] = i;  		}  	}  	if (!hasdata)  		break;  	object[] data_row = new object[pN];  	for (int i = 0; i < pN; i++) {  		/*                     if (version == 2) { 						IntPtr fieldPtr = Marshal.ReadIntPtr (pazValue' i*IntPtr.Size); 						data_row[i] = Sqlite.HeapToString (fieldPtr' ((SqliteConnection)cmd.Connection).Encoding); 					} else {                     */switch (Sqlite3.sqlite3_column_type (pVm' i)) {  		case 1:  			long val = Sqlite3.sqlite3_column_int64 (pVm' i);  			// If the column was declared as an 'int' or 'integer'' let's play  			// nice and return an int (version 3 only).  			if (declmode [i] == 1 && val >= int.MinValue && val <= int.MaxValue)  				data_row [i] = (int)val;  			// Or if it was declared a date or datetime' do the reverse of what we  			// do for DateTime parameters.  			else if (declmode [i] == 2)  				data_row [i] = DateTime.FromFileTime (val);  			else  				data_row [i] = val;  			break;  		case 2:  			data_row [i] = Sqlite3.sqlite3_column_double (pVm' i);  			break;  		case 3:  			data_row [i] = Sqlite3.sqlite3_column_text (pVm' i);  			// If the column was declared as a 'date' or 'datetime'' let's play  			// nice and return a DateTime (version 3 only).  			if (declmode [i] == 2)  				if (data_row [i] == null)  					data_row [i] = null;  				else  					data_row [i] = DateTime.Parse ((string)data_row [i]' System.Globalization.CultureInfo.InvariantCulture);  			break;  		case 4:  			byte[] blob = Sqlite3.sqlite3_column_blob (pVm' i);  			////int blobbytes = Sqlite3.sqlite3_column_bytes16 (pVm' i);  			////byte[] blob = new byte[blobbytes];  			////Marshal.Copy (blobptr' blob' 0' blobbytes);  			data_row [i] = blob;  			break;  		case 5:  			data_row [i] = null;  			break;  		default:  			throw new Exception ("FATAL: Unknown sqlite3_column_type");  		//}  		}  	}  	rows.Add (data_row);  }  
Magic Number,Community.CsharpSqlite.SQLiteClient,SqliteDataReader,C:\repos\petlof_csharpsqlite\Community.CsharpSqlite.SQLiteClient\src\SqliteDataReader.cs,ReadpVm,The following statement contains a magic number: while (true) {  	bool hasdata = cmd.ExecuteStatement (pVm' out pN' out pazValue' out pazColName);  	// For the first row' get the column information  	if (first) {  		first = false;  		if (version == 3) {  			// A decltype might be null if the type is unknown to sqlite.  			decltypes = new string[pN];  			declmode = new int[pN];  			// 1 == integer' 2 == datetime  			for (int i = 0; i < pN; i++) {  				string decl = Sqlite3.sqlite3_column_decltype (pVm' i);  				if (decl != null) {  					decltypes [i] = decl.ToLower (System.Globalization.CultureInfo.InvariantCulture);  					if (decltypes [i] == "int" || decltypes [i] == "integer")  						declmode [i] = 1;  					else if (decltypes [i] == "date" || decltypes [i] == "datetime")  						declmode [i] = 2;  				}  			}  		}  		columns = new string[pN];  		for (int i = 0; i < pN; i++) {  			string colName;  			//if (version == 2) {  			//	IntPtr fieldPtr = Marshal.ReadIntPtr (pazColName' i*IntPtr.Size);  			//	colName = Sqlite.HeapToString (fieldPtr' ((SqliteConnection)cmd.Connection).Encoding);  			//} else {  			colName = Sqlite3.sqlite3_column_name (pVm' i);  			//}  			columns [i] = colName;  			column_names_sens [colName] = i;  			column_names_insens [colName] = i;  		}  	}  	if (!hasdata)  		break;  	object[] data_row = new object[pN];  	for (int i = 0; i < pN; i++) {  		/*                     if (version == 2) { 						IntPtr fieldPtr = Marshal.ReadIntPtr (pazValue' i*IntPtr.Size); 						data_row[i] = Sqlite.HeapToString (fieldPtr' ((SqliteConnection)cmd.Connection).Encoding); 					} else {                     */switch (Sqlite3.sqlite3_column_type (pVm' i)) {  		case 1:  			long val = Sqlite3.sqlite3_column_int64 (pVm' i);  			// If the column was declared as an 'int' or 'integer'' let's play  			// nice and return an int (version 3 only).  			if (declmode [i] == 1 && val >= int.MinValue && val <= int.MaxValue)  				data_row [i] = (int)val;  			// Or if it was declared a date or datetime' do the reverse of what we  			// do for DateTime parameters.  			else if (declmode [i] == 2)  				data_row [i] = DateTime.FromFileTime (val);  			else  				data_row [i] = val;  			break;  		case 2:  			data_row [i] = Sqlite3.sqlite3_column_double (pVm' i);  			break;  		case 3:  			data_row [i] = Sqlite3.sqlite3_column_text (pVm' i);  			// If the column was declared as a 'date' or 'datetime'' let's play  			// nice and return a DateTime (version 3 only).  			if (declmode [i] == 2)  				if (data_row [i] == null)  					data_row [i] = null;  				else  					data_row [i] = DateTime.Parse ((string)data_row [i]' System.Globalization.CultureInfo.InvariantCulture);  			break;  		case 4:  			byte[] blob = Sqlite3.sqlite3_column_blob (pVm' i);  			////int blobbytes = Sqlite3.sqlite3_column_bytes16 (pVm' i);  			////byte[] blob = new byte[blobbytes];  			////Marshal.Copy (blobptr' blob' 0' blobbytes);  			data_row [i] = blob;  			break;  		case 5:  			data_row [i] = null;  			break;  		default:  			throw new Exception ("FATAL: Unknown sqlite3_column_type");  		//}  		}  	}  	rows.Add (data_row);  }  
Magic Number,Community.CsharpSqlite.SQLiteClient,SqliteDataReader,C:\repos\petlof_csharpsqlite\Community.CsharpSqlite.SQLiteClient\src\SqliteDataReader.cs,ReadpVm,The following statement contains a magic number: while (true) {  	bool hasdata = cmd.ExecuteStatement (pVm' out pN' out pazValue' out pazColName);  	// For the first row' get the column information  	if (first) {  		first = false;  		if (version == 3) {  			// A decltype might be null if the type is unknown to sqlite.  			decltypes = new string[pN];  			declmode = new int[pN];  			// 1 == integer' 2 == datetime  			for (int i = 0; i < pN; i++) {  				string decl = Sqlite3.sqlite3_column_decltype (pVm' i);  				if (decl != null) {  					decltypes [i] = decl.ToLower (System.Globalization.CultureInfo.InvariantCulture);  					if (decltypes [i] == "int" || decltypes [i] == "integer")  						declmode [i] = 1;  					else if (decltypes [i] == "date" || decltypes [i] == "datetime")  						declmode [i] = 2;  				}  			}  		}  		columns = new string[pN];  		for (int i = 0; i < pN; i++) {  			string colName;  			//if (version == 2) {  			//	IntPtr fieldPtr = Marshal.ReadIntPtr (pazColName' i*IntPtr.Size);  			//	colName = Sqlite.HeapToString (fieldPtr' ((SqliteConnection)cmd.Connection).Encoding);  			//} else {  			colName = Sqlite3.sqlite3_column_name (pVm' i);  			//}  			columns [i] = colName;  			column_names_sens [colName] = i;  			column_names_insens [colName] = i;  		}  	}  	if (!hasdata)  		break;  	object[] data_row = new object[pN];  	for (int i = 0; i < pN; i++) {  		/*                     if (version == 2) { 						IntPtr fieldPtr = Marshal.ReadIntPtr (pazValue' i*IntPtr.Size); 						data_row[i] = Sqlite.HeapToString (fieldPtr' ((SqliteConnection)cmd.Connection).Encoding); 					} else {                     */switch (Sqlite3.sqlite3_column_type (pVm' i)) {  		case 1:  			long val = Sqlite3.sqlite3_column_int64 (pVm' i);  			// If the column was declared as an 'int' or 'integer'' let's play  			// nice and return an int (version 3 only).  			if (declmode [i] == 1 && val >= int.MinValue && val <= int.MaxValue)  				data_row [i] = (int)val;  			// Or if it was declared a date or datetime' do the reverse of what we  			// do for DateTime parameters.  			else if (declmode [i] == 2)  				data_row [i] = DateTime.FromFileTime (val);  			else  				data_row [i] = val;  			break;  		case 2:  			data_row [i] = Sqlite3.sqlite3_column_double (pVm' i);  			break;  		case 3:  			data_row [i] = Sqlite3.sqlite3_column_text (pVm' i);  			// If the column was declared as a 'date' or 'datetime'' let's play  			// nice and return a DateTime (version 3 only).  			if (declmode [i] == 2)  				if (data_row [i] == null)  					data_row [i] = null;  				else  					data_row [i] = DateTime.Parse ((string)data_row [i]' System.Globalization.CultureInfo.InvariantCulture);  			break;  		case 4:  			byte[] blob = Sqlite3.sqlite3_column_blob (pVm' i);  			////int blobbytes = Sqlite3.sqlite3_column_bytes16 (pVm' i);  			////byte[] blob = new byte[blobbytes];  			////Marshal.Copy (blobptr' blob' 0' blobbytes);  			data_row [i] = blob;  			break;  		case 5:  			data_row [i] = null;  			break;  		default:  			throw new Exception ("FATAL: Unknown sqlite3_column_type");  		//}  		}  	}  	rows.Add (data_row);  }  
Magic Number,Community.CsharpSqlite.SQLiteClient,SqliteDataReader,C:\repos\petlof_csharpsqlite\Community.CsharpSqlite.SQLiteClient\src\SqliteDataReader.cs,ReadpVm,The following statement contains a magic number: while (true) {  	bool hasdata = cmd.ExecuteStatement (pVm' out pN' out pazValue' out pazColName);  	// For the first row' get the column information  	if (first) {  		first = false;  		if (version == 3) {  			// A decltype might be null if the type is unknown to sqlite.  			decltypes = new string[pN];  			declmode = new int[pN];  			// 1 == integer' 2 == datetime  			for (int i = 0; i < pN; i++) {  				string decl = Sqlite3.sqlite3_column_decltype (pVm' i);  				if (decl != null) {  					decltypes [i] = decl.ToLower (System.Globalization.CultureInfo.InvariantCulture);  					if (decltypes [i] == "int" || decltypes [i] == "integer")  						declmode [i] = 1;  					else if (decltypes [i] == "date" || decltypes [i] == "datetime")  						declmode [i] = 2;  				}  			}  		}  		columns = new string[pN];  		for (int i = 0; i < pN; i++) {  			string colName;  			//if (version == 2) {  			//	IntPtr fieldPtr = Marshal.ReadIntPtr (pazColName' i*IntPtr.Size);  			//	colName = Sqlite.HeapToString (fieldPtr' ((SqliteConnection)cmd.Connection).Encoding);  			//} else {  			colName = Sqlite3.sqlite3_column_name (pVm' i);  			//}  			columns [i] = colName;  			column_names_sens [colName] = i;  			column_names_insens [colName] = i;  		}  	}  	if (!hasdata)  		break;  	object[] data_row = new object[pN];  	for (int i = 0; i < pN; i++) {  		/*                     if (version == 2) { 						IntPtr fieldPtr = Marshal.ReadIntPtr (pazValue' i*IntPtr.Size); 						data_row[i] = Sqlite.HeapToString (fieldPtr' ((SqliteConnection)cmd.Connection).Encoding); 					} else {                     */switch (Sqlite3.sqlite3_column_type (pVm' i)) {  		case 1:  			long val = Sqlite3.sqlite3_column_int64 (pVm' i);  			// If the column was declared as an 'int' or 'integer'' let's play  			// nice and return an int (version 3 only).  			if (declmode [i] == 1 && val >= int.MinValue && val <= int.MaxValue)  				data_row [i] = (int)val;  			// Or if it was declared a date or datetime' do the reverse of what we  			// do for DateTime parameters.  			else if (declmode [i] == 2)  				data_row [i] = DateTime.FromFileTime (val);  			else  				data_row [i] = val;  			break;  		case 2:  			data_row [i] = Sqlite3.sqlite3_column_double (pVm' i);  			break;  		case 3:  			data_row [i] = Sqlite3.sqlite3_column_text (pVm' i);  			// If the column was declared as a 'date' or 'datetime'' let's play  			// nice and return a DateTime (version 3 only).  			if (declmode [i] == 2)  				if (data_row [i] == null)  					data_row [i] = null;  				else  					data_row [i] = DateTime.Parse ((string)data_row [i]' System.Globalization.CultureInfo.InvariantCulture);  			break;  		case 4:  			byte[] blob = Sqlite3.sqlite3_column_blob (pVm' i);  			////int blobbytes = Sqlite3.sqlite3_column_bytes16 (pVm' i);  			////byte[] blob = new byte[blobbytes];  			////Marshal.Copy (blobptr' blob' 0' blobbytes);  			data_row [i] = blob;  			break;  		case 5:  			data_row [i] = null;  			break;  		default:  			throw new Exception ("FATAL: Unknown sqlite3_column_type");  		//}  		}  	}  	rows.Add (data_row);  }  
Magic Number,Community.CsharpSqlite.SQLiteClient,SqliteDataReader,C:\repos\petlof_csharpsqlite\Community.CsharpSqlite.SQLiteClient\src\SqliteDataReader.cs,ReadpVm,The following statement contains a magic number: while (true) {  	bool hasdata = cmd.ExecuteStatement (pVm' out pN' out pazValue' out pazColName);  	// For the first row' get the column information  	if (first) {  		first = false;  		if (version == 3) {  			// A decltype might be null if the type is unknown to sqlite.  			decltypes = new string[pN];  			declmode = new int[pN];  			// 1 == integer' 2 == datetime  			for (int i = 0; i < pN; i++) {  				string decl = Sqlite3.sqlite3_column_decltype (pVm' i);  				if (decl != null) {  					decltypes [i] = decl.ToLower (System.Globalization.CultureInfo.InvariantCulture);  					if (decltypes [i] == "int" || decltypes [i] == "integer")  						declmode [i] = 1;  					else if (decltypes [i] == "date" || decltypes [i] == "datetime")  						declmode [i] = 2;  				}  			}  		}  		columns = new string[pN];  		for (int i = 0; i < pN; i++) {  			string colName;  			//if (version == 2) {  			//	IntPtr fieldPtr = Marshal.ReadIntPtr (pazColName' i*IntPtr.Size);  			//	colName = Sqlite.HeapToString (fieldPtr' ((SqliteConnection)cmd.Connection).Encoding);  			//} else {  			colName = Sqlite3.sqlite3_column_name (pVm' i);  			//}  			columns [i] = colName;  			column_names_sens [colName] = i;  			column_names_insens [colName] = i;  		}  	}  	if (!hasdata)  		break;  	object[] data_row = new object[pN];  	for (int i = 0; i < pN; i++) {  		/*                     if (version == 2) { 						IntPtr fieldPtr = Marshal.ReadIntPtr (pazValue' i*IntPtr.Size); 						data_row[i] = Sqlite.HeapToString (fieldPtr' ((SqliteConnection)cmd.Connection).Encoding); 					} else {                     */switch (Sqlite3.sqlite3_column_type (pVm' i)) {  		case 1:  			long val = Sqlite3.sqlite3_column_int64 (pVm' i);  			// If the column was declared as an 'int' or 'integer'' let's play  			// nice and return an int (version 3 only).  			if (declmode [i] == 1 && val >= int.MinValue && val <= int.MaxValue)  				data_row [i] = (int)val;  			// Or if it was declared a date or datetime' do the reverse of what we  			// do for DateTime parameters.  			else if (declmode [i] == 2)  				data_row [i] = DateTime.FromFileTime (val);  			else  				data_row [i] = val;  			break;  		case 2:  			data_row [i] = Sqlite3.sqlite3_column_double (pVm' i);  			break;  		case 3:  			data_row [i] = Sqlite3.sqlite3_column_text (pVm' i);  			// If the column was declared as a 'date' or 'datetime'' let's play  			// nice and return a DateTime (version 3 only).  			if (declmode [i] == 2)  				if (data_row [i] == null)  					data_row [i] = null;  				else  					data_row [i] = DateTime.Parse ((string)data_row [i]' System.Globalization.CultureInfo.InvariantCulture);  			break;  		case 4:  			byte[] blob = Sqlite3.sqlite3_column_blob (pVm' i);  			////int blobbytes = Sqlite3.sqlite3_column_bytes16 (pVm' i);  			////byte[] blob = new byte[blobbytes];  			////Marshal.Copy (blobptr' blob' 0' blobbytes);  			data_row [i] = blob;  			break;  		case 5:  			data_row [i] = null;  			break;  		default:  			throw new Exception ("FATAL: Unknown sqlite3_column_type");  		//}  		}  	}  	rows.Add (data_row);  }  
Magic Number,Community.CsharpSqlite.SQLiteClient,SqliteDataReader,C:\repos\petlof_csharpsqlite\Community.CsharpSqlite.SQLiteClient\src\SqliteDataReader.cs,ReadpVm,The following statement contains a magic number: while (true) {  	bool hasdata = cmd.ExecuteStatement (pVm' out pN' out pazValue' out pazColName);  	// For the first row' get the column information  	if (first) {  		first = false;  		if (version == 3) {  			// A decltype might be null if the type is unknown to sqlite.  			decltypes = new string[pN];  			declmode = new int[pN];  			// 1 == integer' 2 == datetime  			for (int i = 0; i < pN; i++) {  				string decl = Sqlite3.sqlite3_column_decltype (pVm' i);  				if (decl != null) {  					decltypes [i] = decl.ToLower (System.Globalization.CultureInfo.InvariantCulture);  					if (decltypes [i] == "int" || decltypes [i] == "integer")  						declmode [i] = 1;  					else if (decltypes [i] == "date" || decltypes [i] == "datetime")  						declmode [i] = 2;  				}  			}  		}  		columns = new string[pN];  		for (int i = 0; i < pN; i++) {  			string colName;  			//if (version == 2) {  			//	IntPtr fieldPtr = Marshal.ReadIntPtr (pazColName' i*IntPtr.Size);  			//	colName = Sqlite.HeapToString (fieldPtr' ((SqliteConnection)cmd.Connection).Encoding);  			//} else {  			colName = Sqlite3.sqlite3_column_name (pVm' i);  			//}  			columns [i] = colName;  			column_names_sens [colName] = i;  			column_names_insens [colName] = i;  		}  	}  	if (!hasdata)  		break;  	object[] data_row = new object[pN];  	for (int i = 0; i < pN; i++) {  		/*                     if (version == 2) { 						IntPtr fieldPtr = Marshal.ReadIntPtr (pazValue' i*IntPtr.Size); 						data_row[i] = Sqlite.HeapToString (fieldPtr' ((SqliteConnection)cmd.Connection).Encoding); 					} else {                     */switch (Sqlite3.sqlite3_column_type (pVm' i)) {  		case 1:  			long val = Sqlite3.sqlite3_column_int64 (pVm' i);  			// If the column was declared as an 'int' or 'integer'' let's play  			// nice and return an int (version 3 only).  			if (declmode [i] == 1 && val >= int.MinValue && val <= int.MaxValue)  				data_row [i] = (int)val;  			// Or if it was declared a date or datetime' do the reverse of what we  			// do for DateTime parameters.  			else if (declmode [i] == 2)  				data_row [i] = DateTime.FromFileTime (val);  			else  				data_row [i] = val;  			break;  		case 2:  			data_row [i] = Sqlite3.sqlite3_column_double (pVm' i);  			break;  		case 3:  			data_row [i] = Sqlite3.sqlite3_column_text (pVm' i);  			// If the column was declared as a 'date' or 'datetime'' let's play  			// nice and return a DateTime (version 3 only).  			if (declmode [i] == 2)  				if (data_row [i] == null)  					data_row [i] = null;  				else  					data_row [i] = DateTime.Parse ((string)data_row [i]' System.Globalization.CultureInfo.InvariantCulture);  			break;  		case 4:  			byte[] blob = Sqlite3.sqlite3_column_blob (pVm' i);  			////int blobbytes = Sqlite3.sqlite3_column_bytes16 (pVm' i);  			////byte[] blob = new byte[blobbytes];  			////Marshal.Copy (blobptr' blob' 0' blobbytes);  			data_row [i] = blob;  			break;  		case 5:  			data_row [i] = null;  			break;  		default:  			throw new Exception ("FATAL: Unknown sqlite3_column_type");  		//}  		}  	}  	rows.Add (data_row);  }  
Magic Number,Community.CsharpSqlite.SQLiteClient,SqliteDataReader,C:\repos\petlof_csharpsqlite\Community.CsharpSqlite.SQLiteClient\src\SqliteDataReader.cs,ReadpVm,The following statement contains a magic number: if (first) {  	first = false;  	if (version == 3) {  		// A decltype might be null if the type is unknown to sqlite.  		decltypes = new string[pN];  		declmode = new int[pN];  		// 1 == integer' 2 == datetime  		for (int i = 0; i < pN; i++) {  			string decl = Sqlite3.sqlite3_column_decltype (pVm' i);  			if (decl != null) {  				decltypes [i] = decl.ToLower (System.Globalization.CultureInfo.InvariantCulture);  				if (decltypes [i] == "int" || decltypes [i] == "integer")  					declmode [i] = 1;  				else if (decltypes [i] == "date" || decltypes [i] == "datetime")  					declmode [i] = 2;  			}  		}  	}  	columns = new string[pN];  	for (int i = 0; i < pN; i++) {  		string colName;  		//if (version == 2) {  		//	IntPtr fieldPtr = Marshal.ReadIntPtr (pazColName' i*IntPtr.Size);  		//	colName = Sqlite.HeapToString (fieldPtr' ((SqliteConnection)cmd.Connection).Encoding);  		//} else {  		colName = Sqlite3.sqlite3_column_name (pVm' i);  		//}  		columns [i] = colName;  		column_names_sens [colName] = i;  		column_names_insens [colName] = i;  	}  }  
Magic Number,Community.CsharpSqlite.SQLiteClient,SqliteDataReader,C:\repos\petlof_csharpsqlite\Community.CsharpSqlite.SQLiteClient\src\SqliteDataReader.cs,ReadpVm,The following statement contains a magic number: if (first) {  	first = false;  	if (version == 3) {  		// A decltype might be null if the type is unknown to sqlite.  		decltypes = new string[pN];  		declmode = new int[pN];  		// 1 == integer' 2 == datetime  		for (int i = 0; i < pN; i++) {  			string decl = Sqlite3.sqlite3_column_decltype (pVm' i);  			if (decl != null) {  				decltypes [i] = decl.ToLower (System.Globalization.CultureInfo.InvariantCulture);  				if (decltypes [i] == "int" || decltypes [i] == "integer")  					declmode [i] = 1;  				else if (decltypes [i] == "date" || decltypes [i] == "datetime")  					declmode [i] = 2;  			}  		}  	}  	columns = new string[pN];  	for (int i = 0; i < pN; i++) {  		string colName;  		//if (version == 2) {  		//	IntPtr fieldPtr = Marshal.ReadIntPtr (pazColName' i*IntPtr.Size);  		//	colName = Sqlite.HeapToString (fieldPtr' ((SqliteConnection)cmd.Connection).Encoding);  		//} else {  		colName = Sqlite3.sqlite3_column_name (pVm' i);  		//}  		columns [i] = colName;  		column_names_sens [colName] = i;  		column_names_insens [colName] = i;  	}  }  
Magic Number,Community.CsharpSqlite.SQLiteClient,SqliteDataReader,C:\repos\petlof_csharpsqlite\Community.CsharpSqlite.SQLiteClient\src\SqliteDataReader.cs,ReadpVm,The following statement contains a magic number: if (version == 3) {  	// A decltype might be null if the type is unknown to sqlite.  	decltypes = new string[pN];  	declmode = new int[pN];  	// 1 == integer' 2 == datetime  	for (int i = 0; i < pN; i++) {  		string decl = Sqlite3.sqlite3_column_decltype (pVm' i);  		if (decl != null) {  			decltypes [i] = decl.ToLower (System.Globalization.CultureInfo.InvariantCulture);  			if (decltypes [i] == "int" || decltypes [i] == "integer")  				declmode [i] = 1;  			else if (decltypes [i] == "date" || decltypes [i] == "datetime")  				declmode [i] = 2;  		}  	}  }  
Magic Number,Community.CsharpSqlite.SQLiteClient,SqliteDataReader,C:\repos\petlof_csharpsqlite\Community.CsharpSqlite.SQLiteClient\src\SqliteDataReader.cs,ReadpVm,The following statement contains a magic number: if (version == 3) {  	// A decltype might be null if the type is unknown to sqlite.  	decltypes = new string[pN];  	declmode = new int[pN];  	// 1 == integer' 2 == datetime  	for (int i = 0; i < pN; i++) {  		string decl = Sqlite3.sqlite3_column_decltype (pVm' i);  		if (decl != null) {  			decltypes [i] = decl.ToLower (System.Globalization.CultureInfo.InvariantCulture);  			if (decltypes [i] == "int" || decltypes [i] == "integer")  				declmode [i] = 1;  			else if (decltypes [i] == "date" || decltypes [i] == "datetime")  				declmode [i] = 2;  		}  	}  }  
Magic Number,Community.CsharpSqlite.SQLiteClient,SqliteDataReader,C:\repos\petlof_csharpsqlite\Community.CsharpSqlite.SQLiteClient\src\SqliteDataReader.cs,ReadpVm,The following statement contains a magic number: for (int i = 0; i < pN; i++) {  	string decl = Sqlite3.sqlite3_column_decltype (pVm' i);  	if (decl != null) {  		decltypes [i] = decl.ToLower (System.Globalization.CultureInfo.InvariantCulture);  		if (decltypes [i] == "int" || decltypes [i] == "integer")  			declmode [i] = 1;  		else if (decltypes [i] == "date" || decltypes [i] == "datetime")  			declmode [i] = 2;  	}  }  
Magic Number,Community.CsharpSqlite.SQLiteClient,SqliteDataReader,C:\repos\petlof_csharpsqlite\Community.CsharpSqlite.SQLiteClient\src\SqliteDataReader.cs,ReadpVm,The following statement contains a magic number: if (decl != null) {  	decltypes [i] = decl.ToLower (System.Globalization.CultureInfo.InvariantCulture);  	if (decltypes [i] == "int" || decltypes [i] == "integer")  		declmode [i] = 1;  	else if (decltypes [i] == "date" || decltypes [i] == "datetime")  		declmode [i] = 2;  }  
Magic Number,Community.CsharpSqlite.SQLiteClient,SqliteDataReader,C:\repos\petlof_csharpsqlite\Community.CsharpSqlite.SQLiteClient\src\SqliteDataReader.cs,ReadpVm,The following statement contains a magic number: if (decltypes [i] == "int" || decltypes [i] == "integer")  	declmode [i] = 1;  else if (decltypes [i] == "date" || decltypes [i] == "datetime")  	declmode [i] = 2;  
Magic Number,Community.CsharpSqlite.SQLiteClient,SqliteDataReader,C:\repos\petlof_csharpsqlite\Community.CsharpSqlite.SQLiteClient\src\SqliteDataReader.cs,ReadpVm,The following statement contains a magic number: if (decltypes [i] == "date" || decltypes [i] == "datetime")  	declmode [i] = 2;  
Magic Number,Community.CsharpSqlite.SQLiteClient,SqliteDataReader,C:\repos\petlof_csharpsqlite\Community.CsharpSqlite.SQLiteClient\src\SqliteDataReader.cs,ReadpVm,The following statement contains a magic number: declmode [i] = 2;  
Magic Number,Community.CsharpSqlite.SQLiteClient,SqliteDataReader,C:\repos\petlof_csharpsqlite\Community.CsharpSqlite.SQLiteClient\src\SqliteDataReader.cs,ReadpVm,The following statement contains a magic number: for (int i = 0; i < pN; i++) {  	/*                     if (version == 2) { 						IntPtr fieldPtr = Marshal.ReadIntPtr (pazValue' i*IntPtr.Size); 						data_row[i] = Sqlite.HeapToString (fieldPtr' ((SqliteConnection)cmd.Connection).Encoding); 					} else {                     */switch (Sqlite3.sqlite3_column_type (pVm' i)) {  	case 1:  		long val = Sqlite3.sqlite3_column_int64 (pVm' i);  		// If the column was declared as an 'int' or 'integer'' let's play  		// nice and return an int (version 3 only).  		if (declmode [i] == 1 && val >= int.MinValue && val <= int.MaxValue)  			data_row [i] = (int)val;  		// Or if it was declared a date or datetime' do the reverse of what we  		// do for DateTime parameters.  		else if (declmode [i] == 2)  			data_row [i] = DateTime.FromFileTime (val);  		else  			data_row [i] = val;  		break;  	case 2:  		data_row [i] = Sqlite3.sqlite3_column_double (pVm' i);  		break;  	case 3:  		data_row [i] = Sqlite3.sqlite3_column_text (pVm' i);  		// If the column was declared as a 'date' or 'datetime'' let's play  		// nice and return a DateTime (version 3 only).  		if (declmode [i] == 2)  			if (data_row [i] == null)  				data_row [i] = null;  			else  				data_row [i] = DateTime.Parse ((string)data_row [i]' System.Globalization.CultureInfo.InvariantCulture);  		break;  	case 4:  		byte[] blob = Sqlite3.sqlite3_column_blob (pVm' i);  		////int blobbytes = Sqlite3.sqlite3_column_bytes16 (pVm' i);  		////byte[] blob = new byte[blobbytes];  		////Marshal.Copy (blobptr' blob' 0' blobbytes);  		data_row [i] = blob;  		break;  	case 5:  		data_row [i] = null;  		break;  	default:  		throw new Exception ("FATAL: Unknown sqlite3_column_type");  	//}  	}  }  
Magic Number,Community.CsharpSqlite.SQLiteClient,SqliteDataReader,C:\repos\petlof_csharpsqlite\Community.CsharpSqlite.SQLiteClient\src\SqliteDataReader.cs,ReadpVm,The following statement contains a magic number: for (int i = 0; i < pN; i++) {  	/*                     if (version == 2) { 						IntPtr fieldPtr = Marshal.ReadIntPtr (pazValue' i*IntPtr.Size); 						data_row[i] = Sqlite.HeapToString (fieldPtr' ((SqliteConnection)cmd.Connection).Encoding); 					} else {                     */switch (Sqlite3.sqlite3_column_type (pVm' i)) {  	case 1:  		long val = Sqlite3.sqlite3_column_int64 (pVm' i);  		// If the column was declared as an 'int' or 'integer'' let's play  		// nice and return an int (version 3 only).  		if (declmode [i] == 1 && val >= int.MinValue && val <= int.MaxValue)  			data_row [i] = (int)val;  		// Or if it was declared a date or datetime' do the reverse of what we  		// do for DateTime parameters.  		else if (declmode [i] == 2)  			data_row [i] = DateTime.FromFileTime (val);  		else  			data_row [i] = val;  		break;  	case 2:  		data_row [i] = Sqlite3.sqlite3_column_double (pVm' i);  		break;  	case 3:  		data_row [i] = Sqlite3.sqlite3_column_text (pVm' i);  		// If the column was declared as a 'date' or 'datetime'' let's play  		// nice and return a DateTime (version 3 only).  		if (declmode [i] == 2)  			if (data_row [i] == null)  				data_row [i] = null;  			else  				data_row [i] = DateTime.Parse ((string)data_row [i]' System.Globalization.CultureInfo.InvariantCulture);  		break;  	case 4:  		byte[] blob = Sqlite3.sqlite3_column_blob (pVm' i);  		////int blobbytes = Sqlite3.sqlite3_column_bytes16 (pVm' i);  		////byte[] blob = new byte[blobbytes];  		////Marshal.Copy (blobptr' blob' 0' blobbytes);  		data_row [i] = blob;  		break;  	case 5:  		data_row [i] = null;  		break;  	default:  		throw new Exception ("FATAL: Unknown sqlite3_column_type");  	//}  	}  }  
Magic Number,Community.CsharpSqlite.SQLiteClient,SqliteDataReader,C:\repos\petlof_csharpsqlite\Community.CsharpSqlite.SQLiteClient\src\SqliteDataReader.cs,ReadpVm,The following statement contains a magic number: for (int i = 0; i < pN; i++) {  	/*                     if (version == 2) { 						IntPtr fieldPtr = Marshal.ReadIntPtr (pazValue' i*IntPtr.Size); 						data_row[i] = Sqlite.HeapToString (fieldPtr' ((SqliteConnection)cmd.Connection).Encoding); 					} else {                     */switch (Sqlite3.sqlite3_column_type (pVm' i)) {  	case 1:  		long val = Sqlite3.sqlite3_column_int64 (pVm' i);  		// If the column was declared as an 'int' or 'integer'' let's play  		// nice and return an int (version 3 only).  		if (declmode [i] == 1 && val >= int.MinValue && val <= int.MaxValue)  			data_row [i] = (int)val;  		// Or if it was declared a date or datetime' do the reverse of what we  		// do for DateTime parameters.  		else if (declmode [i] == 2)  			data_row [i] = DateTime.FromFileTime (val);  		else  			data_row [i] = val;  		break;  	case 2:  		data_row [i] = Sqlite3.sqlite3_column_double (pVm' i);  		break;  	case 3:  		data_row [i] = Sqlite3.sqlite3_column_text (pVm' i);  		// If the column was declared as a 'date' or 'datetime'' let's play  		// nice and return a DateTime (version 3 only).  		if (declmode [i] == 2)  			if (data_row [i] == null)  				data_row [i] = null;  			else  				data_row [i] = DateTime.Parse ((string)data_row [i]' System.Globalization.CultureInfo.InvariantCulture);  		break;  	case 4:  		byte[] blob = Sqlite3.sqlite3_column_blob (pVm' i);  		////int blobbytes = Sqlite3.sqlite3_column_bytes16 (pVm' i);  		////byte[] blob = new byte[blobbytes];  		////Marshal.Copy (blobptr' blob' 0' blobbytes);  		data_row [i] = blob;  		break;  	case 5:  		data_row [i] = null;  		break;  	default:  		throw new Exception ("FATAL: Unknown sqlite3_column_type");  	//}  	}  }  
Magic Number,Community.CsharpSqlite.SQLiteClient,SqliteDataReader,C:\repos\petlof_csharpsqlite\Community.CsharpSqlite.SQLiteClient\src\SqliteDataReader.cs,ReadpVm,The following statement contains a magic number: for (int i = 0; i < pN; i++) {  	/*                     if (version == 2) { 						IntPtr fieldPtr = Marshal.ReadIntPtr (pazValue' i*IntPtr.Size); 						data_row[i] = Sqlite.HeapToString (fieldPtr' ((SqliteConnection)cmd.Connection).Encoding); 					} else {                     */switch (Sqlite3.sqlite3_column_type (pVm' i)) {  	case 1:  		long val = Sqlite3.sqlite3_column_int64 (pVm' i);  		// If the column was declared as an 'int' or 'integer'' let's play  		// nice and return an int (version 3 only).  		if (declmode [i] == 1 && val >= int.MinValue && val <= int.MaxValue)  			data_row [i] = (int)val;  		// Or if it was declared a date or datetime' do the reverse of what we  		// do for DateTime parameters.  		else if (declmode [i] == 2)  			data_row [i] = DateTime.FromFileTime (val);  		else  			data_row [i] = val;  		break;  	case 2:  		data_row [i] = Sqlite3.sqlite3_column_double (pVm' i);  		break;  	case 3:  		data_row [i] = Sqlite3.sqlite3_column_text (pVm' i);  		// If the column was declared as a 'date' or 'datetime'' let's play  		// nice and return a DateTime (version 3 only).  		if (declmode [i] == 2)  			if (data_row [i] == null)  				data_row [i] = null;  			else  				data_row [i] = DateTime.Parse ((string)data_row [i]' System.Globalization.CultureInfo.InvariantCulture);  		break;  	case 4:  		byte[] blob = Sqlite3.sqlite3_column_blob (pVm' i);  		////int blobbytes = Sqlite3.sqlite3_column_bytes16 (pVm' i);  		////byte[] blob = new byte[blobbytes];  		////Marshal.Copy (blobptr' blob' 0' blobbytes);  		data_row [i] = blob;  		break;  	case 5:  		data_row [i] = null;  		break;  	default:  		throw new Exception ("FATAL: Unknown sqlite3_column_type");  	//}  	}  }  
Magic Number,Community.CsharpSqlite.SQLiteClient,SqliteDataReader,C:\repos\petlof_csharpsqlite\Community.CsharpSqlite.SQLiteClient\src\SqliteDataReader.cs,ReadpVm,The following statement contains a magic number: for (int i = 0; i < pN; i++) {  	/*                     if (version == 2) { 						IntPtr fieldPtr = Marshal.ReadIntPtr (pazValue' i*IntPtr.Size); 						data_row[i] = Sqlite.HeapToString (fieldPtr' ((SqliteConnection)cmd.Connection).Encoding); 					} else {                     */switch (Sqlite3.sqlite3_column_type (pVm' i)) {  	case 1:  		long val = Sqlite3.sqlite3_column_int64 (pVm' i);  		// If the column was declared as an 'int' or 'integer'' let's play  		// nice and return an int (version 3 only).  		if (declmode [i] == 1 && val >= int.MinValue && val <= int.MaxValue)  			data_row [i] = (int)val;  		// Or if it was declared a date or datetime' do the reverse of what we  		// do for DateTime parameters.  		else if (declmode [i] == 2)  			data_row [i] = DateTime.FromFileTime (val);  		else  			data_row [i] = val;  		break;  	case 2:  		data_row [i] = Sqlite3.sqlite3_column_double (pVm' i);  		break;  	case 3:  		data_row [i] = Sqlite3.sqlite3_column_text (pVm' i);  		// If the column was declared as a 'date' or 'datetime'' let's play  		// nice and return a DateTime (version 3 only).  		if (declmode [i] == 2)  			if (data_row [i] == null)  				data_row [i] = null;  			else  				data_row [i] = DateTime.Parse ((string)data_row [i]' System.Globalization.CultureInfo.InvariantCulture);  		break;  	case 4:  		byte[] blob = Sqlite3.sqlite3_column_blob (pVm' i);  		////int blobbytes = Sqlite3.sqlite3_column_bytes16 (pVm' i);  		////byte[] blob = new byte[blobbytes];  		////Marshal.Copy (blobptr' blob' 0' blobbytes);  		data_row [i] = blob;  		break;  	case 5:  		data_row [i] = null;  		break;  	default:  		throw new Exception ("FATAL: Unknown sqlite3_column_type");  	//}  	}  }  
Magic Number,Community.CsharpSqlite.SQLiteClient,SqliteDataReader,C:\repos\petlof_csharpsqlite\Community.CsharpSqlite.SQLiteClient\src\SqliteDataReader.cs,ReadpVm,The following statement contains a magic number: for (int i = 0; i < pN; i++) {  	/*                     if (version == 2) { 						IntPtr fieldPtr = Marshal.ReadIntPtr (pazValue' i*IntPtr.Size); 						data_row[i] = Sqlite.HeapToString (fieldPtr' ((SqliteConnection)cmd.Connection).Encoding); 					} else {                     */switch (Sqlite3.sqlite3_column_type (pVm' i)) {  	case 1:  		long val = Sqlite3.sqlite3_column_int64 (pVm' i);  		// If the column was declared as an 'int' or 'integer'' let's play  		// nice and return an int (version 3 only).  		if (declmode [i] == 1 && val >= int.MinValue && val <= int.MaxValue)  			data_row [i] = (int)val;  		// Or if it was declared a date or datetime' do the reverse of what we  		// do for DateTime parameters.  		else if (declmode [i] == 2)  			data_row [i] = DateTime.FromFileTime (val);  		else  			data_row [i] = val;  		break;  	case 2:  		data_row [i] = Sqlite3.sqlite3_column_double (pVm' i);  		break;  	case 3:  		data_row [i] = Sqlite3.sqlite3_column_text (pVm' i);  		// If the column was declared as a 'date' or 'datetime'' let's play  		// nice and return a DateTime (version 3 only).  		if (declmode [i] == 2)  			if (data_row [i] == null)  				data_row [i] = null;  			else  				data_row [i] = DateTime.Parse ((string)data_row [i]' System.Globalization.CultureInfo.InvariantCulture);  		break;  	case 4:  		byte[] blob = Sqlite3.sqlite3_column_blob (pVm' i);  		////int blobbytes = Sqlite3.sqlite3_column_bytes16 (pVm' i);  		////byte[] blob = new byte[blobbytes];  		////Marshal.Copy (blobptr' blob' 0' blobbytes);  		data_row [i] = blob;  		break;  	case 5:  		data_row [i] = null;  		break;  	default:  		throw new Exception ("FATAL: Unknown sqlite3_column_type");  	//}  	}  }  
Magic Number,Community.CsharpSqlite.SQLiteClient,SqliteDataReader,C:\repos\petlof_csharpsqlite\Community.CsharpSqlite.SQLiteClient\src\SqliteDataReader.cs,ReadpVm,The following statement contains a magic number: switch (Sqlite3.sqlite3_column_type (pVm' i)) {  case 1:  	long val = Sqlite3.sqlite3_column_int64 (pVm' i);  	// If the column was declared as an 'int' or 'integer'' let's play  	// nice and return an int (version 3 only).  	if (declmode [i] == 1 && val >= int.MinValue && val <= int.MaxValue)  		data_row [i] = (int)val;  	// Or if it was declared a date or datetime' do the reverse of what we  	// do for DateTime parameters.  	else if (declmode [i] == 2)  		data_row [i] = DateTime.FromFileTime (val);  	else  		data_row [i] = val;  	break;  case 2:  	data_row [i] = Sqlite3.sqlite3_column_double (pVm' i);  	break;  case 3:  	data_row [i] = Sqlite3.sqlite3_column_text (pVm' i);  	// If the column was declared as a 'date' or 'datetime'' let's play  	// nice and return a DateTime (version 3 only).  	if (declmode [i] == 2)  		if (data_row [i] == null)  			data_row [i] = null;  		else  			data_row [i] = DateTime.Parse ((string)data_row [i]' System.Globalization.CultureInfo.InvariantCulture);  	break;  case 4:  	byte[] blob = Sqlite3.sqlite3_column_blob (pVm' i);  	////int blobbytes = Sqlite3.sqlite3_column_bytes16 (pVm' i);  	////byte[] blob = new byte[blobbytes];  	////Marshal.Copy (blobptr' blob' 0' blobbytes);  	data_row [i] = blob;  	break;  case 5:  	data_row [i] = null;  	break;  default:  	throw new Exception ("FATAL: Unknown sqlite3_column_type");  //}  }  
Magic Number,Community.CsharpSqlite.SQLiteClient,SqliteDataReader,C:\repos\petlof_csharpsqlite\Community.CsharpSqlite.SQLiteClient\src\SqliteDataReader.cs,ReadpVm,The following statement contains a magic number: switch (Sqlite3.sqlite3_column_type (pVm' i)) {  case 1:  	long val = Sqlite3.sqlite3_column_int64 (pVm' i);  	// If the column was declared as an 'int' or 'integer'' let's play  	// nice and return an int (version 3 only).  	if (declmode [i] == 1 && val >= int.MinValue && val <= int.MaxValue)  		data_row [i] = (int)val;  	// Or if it was declared a date or datetime' do the reverse of what we  	// do for DateTime parameters.  	else if (declmode [i] == 2)  		data_row [i] = DateTime.FromFileTime (val);  	else  		data_row [i] = val;  	break;  case 2:  	data_row [i] = Sqlite3.sqlite3_column_double (pVm' i);  	break;  case 3:  	data_row [i] = Sqlite3.sqlite3_column_text (pVm' i);  	// If the column was declared as a 'date' or 'datetime'' let's play  	// nice and return a DateTime (version 3 only).  	if (declmode [i] == 2)  		if (data_row [i] == null)  			data_row [i] = null;  		else  			data_row [i] = DateTime.Parse ((string)data_row [i]' System.Globalization.CultureInfo.InvariantCulture);  	break;  case 4:  	byte[] blob = Sqlite3.sqlite3_column_blob (pVm' i);  	////int blobbytes = Sqlite3.sqlite3_column_bytes16 (pVm' i);  	////byte[] blob = new byte[blobbytes];  	////Marshal.Copy (blobptr' blob' 0' blobbytes);  	data_row [i] = blob;  	break;  case 5:  	data_row [i] = null;  	break;  default:  	throw new Exception ("FATAL: Unknown sqlite3_column_type");  //}  }  
Magic Number,Community.CsharpSqlite.SQLiteClient,SqliteDataReader,C:\repos\petlof_csharpsqlite\Community.CsharpSqlite.SQLiteClient\src\SqliteDataReader.cs,ReadpVm,The following statement contains a magic number: switch (Sqlite3.sqlite3_column_type (pVm' i)) {  case 1:  	long val = Sqlite3.sqlite3_column_int64 (pVm' i);  	// If the column was declared as an 'int' or 'integer'' let's play  	// nice and return an int (version 3 only).  	if (declmode [i] == 1 && val >= int.MinValue && val <= int.MaxValue)  		data_row [i] = (int)val;  	// Or if it was declared a date or datetime' do the reverse of what we  	// do for DateTime parameters.  	else if (declmode [i] == 2)  		data_row [i] = DateTime.FromFileTime (val);  	else  		data_row [i] = val;  	break;  case 2:  	data_row [i] = Sqlite3.sqlite3_column_double (pVm' i);  	break;  case 3:  	data_row [i] = Sqlite3.sqlite3_column_text (pVm' i);  	// If the column was declared as a 'date' or 'datetime'' let's play  	// nice and return a DateTime (version 3 only).  	if (declmode [i] == 2)  		if (data_row [i] == null)  			data_row [i] = null;  		else  			data_row [i] = DateTime.Parse ((string)data_row [i]' System.Globalization.CultureInfo.InvariantCulture);  	break;  case 4:  	byte[] blob = Sqlite3.sqlite3_column_blob (pVm' i);  	////int blobbytes = Sqlite3.sqlite3_column_bytes16 (pVm' i);  	////byte[] blob = new byte[blobbytes];  	////Marshal.Copy (blobptr' blob' 0' blobbytes);  	data_row [i] = blob;  	break;  case 5:  	data_row [i] = null;  	break;  default:  	throw new Exception ("FATAL: Unknown sqlite3_column_type");  //}  }  
Magic Number,Community.CsharpSqlite.SQLiteClient,SqliteDataReader,C:\repos\petlof_csharpsqlite\Community.CsharpSqlite.SQLiteClient\src\SqliteDataReader.cs,ReadpVm,The following statement contains a magic number: switch (Sqlite3.sqlite3_column_type (pVm' i)) {  case 1:  	long val = Sqlite3.sqlite3_column_int64 (pVm' i);  	// If the column was declared as an 'int' or 'integer'' let's play  	// nice and return an int (version 3 only).  	if (declmode [i] == 1 && val >= int.MinValue && val <= int.MaxValue)  		data_row [i] = (int)val;  	// Or if it was declared a date or datetime' do the reverse of what we  	// do for DateTime parameters.  	else if (declmode [i] == 2)  		data_row [i] = DateTime.FromFileTime (val);  	else  		data_row [i] = val;  	break;  case 2:  	data_row [i] = Sqlite3.sqlite3_column_double (pVm' i);  	break;  case 3:  	data_row [i] = Sqlite3.sqlite3_column_text (pVm' i);  	// If the column was declared as a 'date' or 'datetime'' let's play  	// nice and return a DateTime (version 3 only).  	if (declmode [i] == 2)  		if (data_row [i] == null)  			data_row [i] = null;  		else  			data_row [i] = DateTime.Parse ((string)data_row [i]' System.Globalization.CultureInfo.InvariantCulture);  	break;  case 4:  	byte[] blob = Sqlite3.sqlite3_column_blob (pVm' i);  	////int blobbytes = Sqlite3.sqlite3_column_bytes16 (pVm' i);  	////byte[] blob = new byte[blobbytes];  	////Marshal.Copy (blobptr' blob' 0' blobbytes);  	data_row [i] = blob;  	break;  case 5:  	data_row [i] = null;  	break;  default:  	throw new Exception ("FATAL: Unknown sqlite3_column_type");  //}  }  
Magic Number,Community.CsharpSqlite.SQLiteClient,SqliteDataReader,C:\repos\petlof_csharpsqlite\Community.CsharpSqlite.SQLiteClient\src\SqliteDataReader.cs,ReadpVm,The following statement contains a magic number: switch (Sqlite3.sqlite3_column_type (pVm' i)) {  case 1:  	long val = Sqlite3.sqlite3_column_int64 (pVm' i);  	// If the column was declared as an 'int' or 'integer'' let's play  	// nice and return an int (version 3 only).  	if (declmode [i] == 1 && val >= int.MinValue && val <= int.MaxValue)  		data_row [i] = (int)val;  	// Or if it was declared a date or datetime' do the reverse of what we  	// do for DateTime parameters.  	else if (declmode [i] == 2)  		data_row [i] = DateTime.FromFileTime (val);  	else  		data_row [i] = val;  	break;  case 2:  	data_row [i] = Sqlite3.sqlite3_column_double (pVm' i);  	break;  case 3:  	data_row [i] = Sqlite3.sqlite3_column_text (pVm' i);  	// If the column was declared as a 'date' or 'datetime'' let's play  	// nice and return a DateTime (version 3 only).  	if (declmode [i] == 2)  		if (data_row [i] == null)  			data_row [i] = null;  		else  			data_row [i] = DateTime.Parse ((string)data_row [i]' System.Globalization.CultureInfo.InvariantCulture);  	break;  case 4:  	byte[] blob = Sqlite3.sqlite3_column_blob (pVm' i);  	////int blobbytes = Sqlite3.sqlite3_column_bytes16 (pVm' i);  	////byte[] blob = new byte[blobbytes];  	////Marshal.Copy (blobptr' blob' 0' blobbytes);  	data_row [i] = blob;  	break;  case 5:  	data_row [i] = null;  	break;  default:  	throw new Exception ("FATAL: Unknown sqlite3_column_type");  //}  }  
Magic Number,Community.CsharpSqlite.SQLiteClient,SqliteDataReader,C:\repos\petlof_csharpsqlite\Community.CsharpSqlite.SQLiteClient\src\SqliteDataReader.cs,ReadpVm,The following statement contains a magic number: switch (Sqlite3.sqlite3_column_type (pVm' i)) {  case 1:  	long val = Sqlite3.sqlite3_column_int64 (pVm' i);  	// If the column was declared as an 'int' or 'integer'' let's play  	// nice and return an int (version 3 only).  	if (declmode [i] == 1 && val >= int.MinValue && val <= int.MaxValue)  		data_row [i] = (int)val;  	// Or if it was declared a date or datetime' do the reverse of what we  	// do for DateTime parameters.  	else if (declmode [i] == 2)  		data_row [i] = DateTime.FromFileTime (val);  	else  		data_row [i] = val;  	break;  case 2:  	data_row [i] = Sqlite3.sqlite3_column_double (pVm' i);  	break;  case 3:  	data_row [i] = Sqlite3.sqlite3_column_text (pVm' i);  	// If the column was declared as a 'date' or 'datetime'' let's play  	// nice and return a DateTime (version 3 only).  	if (declmode [i] == 2)  		if (data_row [i] == null)  			data_row [i] = null;  		else  			data_row [i] = DateTime.Parse ((string)data_row [i]' System.Globalization.CultureInfo.InvariantCulture);  	break;  case 4:  	byte[] blob = Sqlite3.sqlite3_column_blob (pVm' i);  	////int blobbytes = Sqlite3.sqlite3_column_bytes16 (pVm' i);  	////byte[] blob = new byte[blobbytes];  	////Marshal.Copy (blobptr' blob' 0' blobbytes);  	data_row [i] = blob;  	break;  case 5:  	data_row [i] = null;  	break;  default:  	throw new Exception ("FATAL: Unknown sqlite3_column_type");  //}  }  
Magic Number,Community.CsharpSqlite.SQLiteClient,SqliteDataReader,C:\repos\petlof_csharpsqlite\Community.CsharpSqlite.SQLiteClient\src\SqliteDataReader.cs,ReadpVm,The following statement contains a magic number: if (declmode [i] == 1 && val >= int.MinValue && val <= int.MaxValue)  	data_row [i] = (int)val;  // Or if it was declared a date or datetime' do the reverse of what we  // do for DateTime parameters.  else if (declmode [i] == 2)  	data_row [i] = DateTime.FromFileTime (val);  else  	data_row [i] = val;  
Magic Number,Community.CsharpSqlite.SQLiteClient,SqliteDataReader,C:\repos\petlof_csharpsqlite\Community.CsharpSqlite.SQLiteClient\src\SqliteDataReader.cs,ReadpVm,The following statement contains a magic number: if (declmode [i] == 2)  	data_row [i] = DateTime.FromFileTime (val);  else  	data_row [i] = val;  
Magic Number,Community.CsharpSqlite.SQLiteClient,SqliteDataReader,C:\repos\petlof_csharpsqlite\Community.CsharpSqlite.SQLiteClient\src\SqliteDataReader.cs,ReadpVm,The following statement contains a magic number: if (declmode [i] == 2)  	if (data_row [i] == null)  		data_row [i] = null;  	else  		data_row [i] = DateTime.Parse ((string)data_row [i]' System.Globalization.CultureInfo.InvariantCulture);  
Magic Number,Community.CsharpSqlite.SQLiteClient,SqliteDataSourceEnumerator,C:\repos\petlof_csharpsqlite\Community.CsharpSqlite.SQLiteClient\src\SqliteDataSourceEnumerator.cs,GetDataSources,The following statement contains a magic number: dr [2] = false;  
Magic Number,Community.CsharpSqlite.SQLiteClient,SqliteDataSourceEnumerator,C:\repos\petlof_csharpsqlite\Community.CsharpSqlite.SQLiteClient\src\SqliteDataSourceEnumerator.cs,GetDataSources,The following statement contains a magic number: dr [3] = "?";  
Magic Number,Community.CsharpSqlite.SQLiteClient,SqliteDataSourceEnumerator,C:\repos\petlof_csharpsqlite\Community.CsharpSqlite.SQLiteClient\src\SqliteDataSourceEnumerator.cs,GetDataSources,The following statement contains a magic number: dr [4] = "Community.CsharpSqlite.SQLiteClient.SqliteConnectionFactory";  
Missing Default,Community.CsharpSqlite.SQLiteClient,SqliteCommandBuilder,C:\repos\petlof_csharpsqlite\Community.CsharpSqlite.SQLiteClient\src\SqliteCommandBuilder.cs,RowUpdatingHandler,The following switch statement is missing a default case: switch (args.StatementType) {  case StatementType.Insert:  	args.Command = GetInsertCommand ();  	break;  case StatementType.Update:  	args.Command = GetUpdateCommand ();  	break;  case StatementType.Delete:  	args.Command = GetDeleteCommand ();  	break;  }  
Missing Default,Community.CsharpSqlite.SQLiteClient,SqliteConnection,C:\repos\petlof_csharpsqlite\Community.CsharpSqlite.SQLiteClient\src\SqliteConnection.cs,SetConnectionString,The following switch statement is missing a default case: switch (token.ToLower (System.Globalization.CultureInfo.InvariantCulture).Trim ()) {  case "data source":  case "uri":  	if (tvalue_lc.StartsWith ("file://")) {  		db_file = tvalue.Substring (7);  	}  	else if (tvalue_lc.StartsWith ("file:")) {  		db_file = tvalue.Substring (5);  	}  	else if (tvalue_lc.StartsWith ("/")) {  		db_file = tvalue;  		#if !(SQLITE_SILVERLIGHT || WINDOWS_MOBILE)  	}  	else if (tvalue_lc.StartsWith ("|DataDirectory|"' StringComparison.OrdinalIgnoreCase)) {  		AppDomainSetup ads = AppDomain.CurrentDomain.SetupInformation;  		string filePath = String.Format ("App_Data{0}{1}"' Path.DirectorySeparatorChar' tvalue_lc.Substring (15));  		db_file = Path.Combine (ads.ApplicationBase' filePath);  		#endif  	}  	else {  		#if !WINDOWS_PHONE  		throw new InvalidOperationException ("Invalid connection string: invalid URI");  		#else  		              db_file = tvalue; #endif  	}  	break;  case "mode":  	// Ignored for SQLite3.  	////int db_mode = Convert.ToInt32 (tvalue);  	break;  case "version":  	db_version = Convert.ToInt32 (tvalue);  	if (db_version < 3)  		throw new InvalidOperationException ("Minimum database version is 3");  	break;  case "encoding":  	// Ignored for SQLite3.  	db_Encoding = Encoding.GetEncoding (tvalue);  	break;  case "busy_timeout":  	db_BusyTimeout = Convert.ToInt32 (tvalue);  	break;  case "read only":  case "readonly":  	db_IsReadonly = ConvertStringToBoolean (tvalue.ToLowerInvariant ());  	break;  case "failifmissing":  	db_IsFailIfMissing = ConvertStringToBoolean (tvalue.ToLowerInvariant ());  	break;  case "password":  	if (!string.IsNullOrEmpty (db_password) && (db_password.Length != 34 || !db_password.StartsWith ("0x")))  		throw new InvalidOperationException ("Invalid password string: must be 34 hex digits starting with 0x");  	db_password = tvalue;  	break;  }  
Missing Default,Community.CsharpSqlite.SQLiteClient,SqliteConnection,C:\repos\petlof_csharpsqlite\Community.CsharpSqlite.SQLiteClient\src\SqliteConnection.cs,GetSchema,The following switch statement is missing a default case: switch (collectionName.ToUpper ()) {  case "METADATACOLLECTIONS":  	return metaTable;  case "DATASOURCEINFORMATION":  	return GetSchemaDataSourceInformation ();  case "DATATYPES":  	return GetSchemaDataTypes ();  case "RESTRICTIONS":  	return GetSchemaRestrictions ();  case "RESERVEDWORDS":  	return GetSchemaReservedWords ();  case "TABLES":  	return GetSchemaTables (restrictionValues);  case "COLUMNS":  	return GetSchemaColumns (restrictionValues);  case "VIEWS":  	return GetSchemaViews (restrictionValues);  case "INDEXCOLUMNS":  	return GetSchemaIndexColumns (restrictionValues);  case "INDEXES":  	return GetSchemaIndexes (restrictionValues);  case "UNIQUEKEYS":  	throw new NotImplementedException (collectionName);  case "PRIMARYKEYS":  	throw new NotImplementedException (collectionName);  case "FOREIGNKEYS":  	return GetSchemaForeignKeys (restrictionValues);  case "FOREIGNKEYCOLUMNS":  	throw new NotImplementedException (collectionName);  case "TRIGGERS":  	return GetSchemaTriggers (restrictionValues);  }  
