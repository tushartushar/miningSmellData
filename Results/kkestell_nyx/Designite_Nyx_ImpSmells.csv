Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Nyx.Components,ComponentParser,C:\repos\kkestell_nyx\Nyx\Components\ComponentParser.cs,Parse,Cyclomatic complexity of the method is 10
Complex Method,Nyx.Entities,EntityParser,C:\repos\kkestell_nyx\Nyx\Entities\EntityParser.cs,Parse,Cyclomatic complexity of the method is 19
Long Parameter List,Nyx.Components,ComponentParser,C:\repos\kkestell_nyx\Nyx\Components\ComponentParser.cs,SetComponentField,The method has 5 parameters.
Long Statement,Nyx.Scripting,Script,C:\repos\kkestell_nyx\Nyx\Scripting\Script.cs,Run,The length of the statement  "					ScriptingInterface.IEntityScript scriptObject = constructor.Invoke (constructorParams) as ScriptingInterface.IEntityScript; " is 123.
Long Statement,Nyx.Entities,EntityParser,C:\repos\kkestell_nyx\Nyx\Entities\EntityParser.cs,Parse,The length of the statement  "			var componentType = Assembly.GetExecutingAssembly ().GetTypes ().Single (x => x.IsClass && x.Namespace == "Nyx.Components" && x.Name == componentTypeName); " is 155.
Long Statement,Nyx.Entities,EntityParser,C:\repos\kkestell_nyx\Nyx\Entities\EntityParser.cs,Parse,The length of the statement  "					componentProperty.SetValue (newComponent' new Vector3 ((float)propertyValue [0].Value' (float)propertyValue [1].Value' (float)propertyValue [2].Value)); " is 152.
Long Statement,Nyx.Terrain,HeightmapGenerator,C:\repos\kkestell_nyx\Nyx\Terrain\HeightmapGenerator.cs,GenerateTile,The length of the statement  "	projection = new NoiseMapBuilderPlane (offsetX * size' (offsetX * size) + size' offsetY * size' (offsetY * size) + size' true); " is 127.
Long Statement,Nyx.Terrain,HeightmapTile,C:\repos\kkestell_nyx\Nyx\Terrain\HeightmapTile.cs,CreateVBO,The length of the statement  "	GL.BufferData<Vector3> (BufferTarget.ArrayBuffer' new IntPtr (vertices.Length * Vector3.SizeInBytes)' vertices' BufferUsageHint.StaticDraw); " is 140.
Long Statement,Nyx.Terrain,HeightmapTile,C:\repos\kkestell_nyx\Nyx\Terrain\HeightmapTile.cs,CreateVBO,The length of the statement  "	GL.BufferData<Vector3> (BufferTarget.ArrayBuffer' new IntPtr (vertices.Length * Vector3.SizeInBytes)' vertices' BufferUsageHint.StaticDraw); " is 140.
Long Statement,Nyx.Terrain,HeightmapTile,C:\repos\kkestell_nyx\Nyx\Terrain\HeightmapTile.cs,CreateVBO,The length of the statement  "	GL.BufferData (BufferTarget.ElementArrayBuffer' new IntPtr (sizeof(uint) * indices.Length)' indices' BufferUsageHint.StaticDraw); " is 129.
Long Statement,Nyx.Rendering,Renderer,C:\repos\kkestell_nyx\Nyx\Rendering\Renderer.cs,Render,The length of the statement  "	Log.Instance.Info (String.Format ("Renderer::Render renderBatch.Renderables:{0} renderBatch.Overlays:{1}"' renderBatch.Renderables.Count' renderBatch.Overlays.Count)); " is 167.
Magic Number,Nyx.Entities,EntityParser,C:\repos\kkestell_nyx\Nyx\Entities\EntityParser.cs,Parse,The following statement contains a magic number: using (StreamReader sr = new StreamReader (filename)) {  	dynamic entityJson = JObject.Parse (sr.ReadToEnd ());  	newEntity.AddComponent (new TypeComponent () {  		Type = entityJson.type  	});  	foreach (var component in entityJson.components) {  		var componentTypeName = component.type.Value;  		var componentType = Assembly.GetExecutingAssembly ().GetTypes ().Single (x => x.IsClass && x.Namespace == "Nyx.Components" && x.Name == componentTypeName);  		// Create the new component  		var newComponent = (Component)componentType.GetConstructor (Type.EmptyTypes).Invoke (null);  		// Loop over each property in the entity json  		foreach (var property in component.properties) {  			// Find the property in the component  			var componentProperty = (PropertyInfo)componentType.GetProperty (property.name.Value);  			if (componentProperty == null)  				throw new EntityException (String.Format ("Component {0} has no property {1}"' componentType.Name' property.name));  			// Get the type of the property so we know how to parse what's in the json  			var propertyType = componentProperty.PropertyType.ToString ();  			var propertyValue = property.value;  			// FIXME: Hack  			// Parse json value into proper type so it can be assigned to the component  			switch (propertyType) {  			case "System.Single":  				componentProperty.SetValue (newComponent' Single.Parse (propertyValue.ToString ()));  				break;  			case "System.Int32":  				componentProperty.SetValue (newComponent' Int32.Parse (propertyValue.ToString ()));  				break;  			case "OpenTK.Vector3":  				componentProperty.SetValue (newComponent' new Vector3 ((float)propertyValue [0].Value' (float)propertyValue [1].Value' (float)propertyValue [2].Value));  				break;  			case "System.String":  				componentProperty.SetValue (newComponent' propertyValue.ToString ());  				break;  			default:  				throw new EntityException (String.Format ("Don't know how to build a {0}"' propertyType));  			}  		}  		newEntity.AddComponent (newComponent);  	}  }  
Magic Number,Nyx.Entities,EntityParser,C:\repos\kkestell_nyx\Nyx\Entities\EntityParser.cs,Parse,The following statement contains a magic number: foreach (var component in entityJson.components) {  	var componentTypeName = component.type.Value;  	var componentType = Assembly.GetExecutingAssembly ().GetTypes ().Single (x => x.IsClass && x.Namespace == "Nyx.Components" && x.Name == componentTypeName);  	// Create the new component  	var newComponent = (Component)componentType.GetConstructor (Type.EmptyTypes).Invoke (null);  	// Loop over each property in the entity json  	foreach (var property in component.properties) {  		// Find the property in the component  		var componentProperty = (PropertyInfo)componentType.GetProperty (property.name.Value);  		if (componentProperty == null)  			throw new EntityException (String.Format ("Component {0} has no property {1}"' componentType.Name' property.name));  		// Get the type of the property so we know how to parse what's in the json  		var propertyType = componentProperty.PropertyType.ToString ();  		var propertyValue = property.value;  		// FIXME: Hack  		// Parse json value into proper type so it can be assigned to the component  		switch (propertyType) {  		case "System.Single":  			componentProperty.SetValue (newComponent' Single.Parse (propertyValue.ToString ()));  			break;  		case "System.Int32":  			componentProperty.SetValue (newComponent' Int32.Parse (propertyValue.ToString ()));  			break;  		case "OpenTK.Vector3":  			componentProperty.SetValue (newComponent' new Vector3 ((float)propertyValue [0].Value' (float)propertyValue [1].Value' (float)propertyValue [2].Value));  			break;  		case "System.String":  			componentProperty.SetValue (newComponent' propertyValue.ToString ());  			break;  		default:  			throw new EntityException (String.Format ("Don't know how to build a {0}"' propertyType));  		}  	}  	newEntity.AddComponent (newComponent);  }  
Magic Number,Nyx.Entities,EntityParser,C:\repos\kkestell_nyx\Nyx\Entities\EntityParser.cs,Parse,The following statement contains a magic number: foreach (var property in component.properties) {  	// Find the property in the component  	var componentProperty = (PropertyInfo)componentType.GetProperty (property.name.Value);  	if (componentProperty == null)  		throw new EntityException (String.Format ("Component {0} has no property {1}"' componentType.Name' property.name));  	// Get the type of the property so we know how to parse what's in the json  	var propertyType = componentProperty.PropertyType.ToString ();  	var propertyValue = property.value;  	// FIXME: Hack  	// Parse json value into proper type so it can be assigned to the component  	switch (propertyType) {  	case "System.Single":  		componentProperty.SetValue (newComponent' Single.Parse (propertyValue.ToString ()));  		break;  	case "System.Int32":  		componentProperty.SetValue (newComponent' Int32.Parse (propertyValue.ToString ()));  		break;  	case "OpenTK.Vector3":  		componentProperty.SetValue (newComponent' new Vector3 ((float)propertyValue [0].Value' (float)propertyValue [1].Value' (float)propertyValue [2].Value));  		break;  	case "System.String":  		componentProperty.SetValue (newComponent' propertyValue.ToString ());  		break;  	default:  		throw new EntityException (String.Format ("Don't know how to build a {0}"' propertyType));  	}  }  
Magic Number,Nyx.Entities,EntityParser,C:\repos\kkestell_nyx\Nyx\Entities\EntityParser.cs,Parse,The following statement contains a magic number: switch (propertyType) {  case "System.Single":  	componentProperty.SetValue (newComponent' Single.Parse (propertyValue.ToString ()));  	break;  case "System.Int32":  	componentProperty.SetValue (newComponent' Int32.Parse (propertyValue.ToString ()));  	break;  case "OpenTK.Vector3":  	componentProperty.SetValue (newComponent' new Vector3 ((float)propertyValue [0].Value' (float)propertyValue [1].Value' (float)propertyValue [2].Value));  	break;  case "System.String":  	componentProperty.SetValue (newComponent' propertyValue.ToString ());  	break;  default:  	throw new EntityException (String.Format ("Don't know how to build a {0}"' propertyType));  }  
Magic Number,Nyx.Entities,EntityParser,C:\repos\kkestell_nyx\Nyx\Entities\EntityParser.cs,Parse,The following statement contains a magic number: componentProperty.SetValue (newComponent' new Vector3 ((float)propertyValue [0].Value' (float)propertyValue [1].Value' (float)propertyValue [2].Value));  
Magic Number,Nyx.Terrain,Heightmap,C:\repos\kkestell_nyx\Nyx\Terrain\Heightmap.cs,Heightmap,The following statement contains a magic number: tiles = new HeightmapTile[9];  
Magic Number,Nyx.Terrain,Heightmap,C:\repos\kkestell_nyx\Nyx\Terrain\Heightmap.cs,Heightmap,The following statement contains a magic number: for (int y = 0; y < 3; y++) {  	for (int x = 0; x < 3; x++) {  		tiles [y * 3 + x] = generator.GenerateTile (x - 1' y - 1);  	}  }  
Magic Number,Nyx.Terrain,Heightmap,C:\repos\kkestell_nyx\Nyx\Terrain\Heightmap.cs,Heightmap,The following statement contains a magic number: for (int y = 0; y < 3; y++) {  	for (int x = 0; x < 3; x++) {  		tiles [y * 3 + x] = generator.GenerateTile (x - 1' y - 1);  	}  }  
Magic Number,Nyx.Terrain,Heightmap,C:\repos\kkestell_nyx\Nyx\Terrain\Heightmap.cs,Heightmap,The following statement contains a magic number: for (int y = 0; y < 3; y++) {  	for (int x = 0; x < 3; x++) {  		tiles [y * 3 + x] = generator.GenerateTile (x - 1' y - 1);  	}  }  
Magic Number,Nyx.Terrain,Heightmap,C:\repos\kkestell_nyx\Nyx\Terrain\Heightmap.cs,Heightmap,The following statement contains a magic number: for (int x = 0; x < 3; x++) {  	tiles [y * 3 + x] = generator.GenerateTile (x - 1' y - 1);  }  
Magic Number,Nyx.Terrain,Heightmap,C:\repos\kkestell_nyx\Nyx\Terrain\Heightmap.cs,Heightmap,The following statement contains a magic number: for (int x = 0; x < 3; x++) {  	tiles [y * 3 + x] = generator.GenerateTile (x - 1' y - 1);  }  
Magic Number,Nyx.Terrain,Heightmap,C:\repos\kkestell_nyx\Nyx\Terrain\Heightmap.cs,Heightmap,The following statement contains a magic number: tiles [y * 3 + x] = generator.GenerateTile (x - 1' y - 1);  
Magic Number,Nyx.Terrain,HeightmapGenerator,C:\repos\kkestell_nyx\Nyx\Terrain\HeightmapGenerator.cs,HeightmapGenerator,The following statement contains a magic number: octaves = 2;  
Magic Number,Nyx.Terrain,HeightmapTile,C:\repos\kkestell_nyx\Nyx\Terrain\HeightmapTile.cs,HeightmapTile,The following statement contains a magic number: indices = new int[heightmap.Length * 6];  
Magic Number,Nyx.Terrain,HeightmapTile,C:\repos\kkestell_nyx\Nyx\Terrain\HeightmapTile.cs,CreateVBO,The following statement contains a magic number: for (int y = 0; y < size; y++) {  	for (int x = 0; x < size; x++) {  		vertices [y * size + x].X = x;  		vertices [y * size + x].Y = (float)heightmap [y * size + x] * 16;  		vertices [y * size + x].Z = y;  	}  }  
Magic Number,Nyx.Terrain,HeightmapTile,C:\repos\kkestell_nyx\Nyx\Terrain\HeightmapTile.cs,CreateVBO,The following statement contains a magic number: for (int x = 0; x < size; x++) {  	vertices [y * size + x].X = x;  	vertices [y * size + x].Y = (float)heightmap [y * size + x] * 16;  	vertices [y * size + x].Z = y;  }  
Magic Number,Nyx.Terrain,HeightmapTile,C:\repos\kkestell_nyx\Nyx\Terrain\HeightmapTile.cs,CreateVBO,The following statement contains a magic number: vertices [y * size + x].Y = (float)heightmap [y * size + x] * 16;  
Magic Number,Nyx.Terrain,HeightmapTile,C:\repos\kkestell_nyx\Nyx\Terrain\HeightmapTile.cs,CreateVAO,The following statement contains a magic number: GL.VertexAttribPointer (0' 3' VertexAttribPointerType.Float' true' Vector3.SizeInBytes' 0);  
Magic Number,Nyx.Terrain,HeightmapTile,C:\repos\kkestell_nyx\Nyx\Terrain\HeightmapTile.cs,CreateVAO,The following statement contains a magic number: GL.VertexAttribPointer (1' 3' VertexAttribPointerType.Float' true' Vector3.SizeInBytes' 0);  
Magic Number,Nyx.Rendering,Renderer,C:\repos\kkestell_nyx\Nyx\Rendering\Renderer.cs,CreateShaders,The following statement contains a magic number: Matrix4.CreatePerspectiveFieldOfView ((float)Math.PI / 4' aspectRatio' 1' 1024' out projectionMatrix);  
Magic Number,Nyx.Rendering,Renderer,C:\repos\kkestell_nyx\Nyx\Rendering\Renderer.cs,CreateShaders,The following statement contains a magic number: Matrix4.CreatePerspectiveFieldOfView ((float)Math.PI / 4' aspectRatio' 1' 1024' out projectionMatrix);  
