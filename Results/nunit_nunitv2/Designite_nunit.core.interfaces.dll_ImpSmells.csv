Implementation smell,Namespace,Class,File,Method,Description
Complex Method,NUnit.Core,RuntimeFramework,C:\research\architectureSmells\repos\nunit_nunitv2\src\NUnitCore\interfaces\RuntimeFramework.cs,InitFromFrameworkVersion,Cyclomatic complexity of the method is 8
Complex Method,NUnit.Core.Extensibility,ParameterSet,C:\research\architectureSmells\repos\nunit_nunitv2\src\NUnitCore\interfaces\Extensibility\ParameterSet.cs,FromDataSource,Cyclomatic complexity of the method is 12
Complex Conditional,NUnit.Core.Filters,NotFilter,C:\research\architectureSmells\repos\nunit_nunitv2\src\NUnitCore\interfaces\Filters\NotFilter.cs,MatchDescendant,The conditional expression  "!test.IsSuite || test.Tests == null || topLevel && test.RunState == RunState.Explicit"  is complex.
Magic Number,NUnit.Core,RuntimeFramework,C:\research\architectureSmells\repos\nunit_nunitv2\src\NUnitCore\interfaces\RuntimeFramework.cs,Parse,The following statement contains a magic number: parts.Length == 2
Magic Number,NUnit.Core,RuntimeFramework,C:\research\architectureSmells\repos\nunit_nunitv2\src\NUnitCore\interfaces\RuntimeFramework.cs,AppendMonoFramework,The following statement contains a magic number: RuntimeFramework framework = new RuntimeFramework(RuntimeType.Mono' new Version(1' 1' 4322));
Magic Number,NUnit.Core,RuntimeFramework,C:\research\architectureSmells\repos\nunit_nunitv2\src\NUnitCore\interfaces\RuntimeFramework.cs,AppendMonoFramework,The following statement contains a magic number: RuntimeFramework framework = new RuntimeFramework(RuntimeType.Mono' new Version(2' 0' 50727));
Magic Number,NUnit.Core,RuntimeFramework,C:\research\architectureSmells\repos\nunit_nunitv2\src\NUnitCore\interfaces\RuntimeFramework.cs,AppendMonoFramework,The following statement contains a magic number: RuntimeFramework framework = new RuntimeFramework(RuntimeType.Mono' new Version(2' 0' 50727));
Magic Number,NUnit.Core,RuntimeFramework,C:\research\architectureSmells\repos\nunit_nunitv2\src\NUnitCore\interfaces\RuntimeFramework.cs,AppendMonoFramework,The following statement contains a magic number: RuntimeFramework framework = new RuntimeFramework(RuntimeType.Mono' new Version(4' 0' 30319));
Magic Number,NUnit.Core,RuntimeFramework,C:\research\architectureSmells\repos\nunit_nunitv2\src\NUnitCore\interfaces\RuntimeFramework.cs,AppendMonoFramework,The following statement contains a magic number: RuntimeFramework framework = new RuntimeFramework(RuntimeType.Mono' new Version(4' 0' 30319));
Magic Number,NUnit.Core,RuntimeFramework,C:\research\architectureSmells\repos\nunit_nunitv2\src\NUnitCore\interfaces\RuntimeFramework.cs,AppendDotNetFourFrameworkVersions,The following statement contains a magic number: RuntimeFramework framework = new RuntimeFramework(RuntimeType.Net' new Version(4' 0));
Magic Number,NUnit.Core,RuntimeFramework,C:\research\architectureSmells\repos\nunit_nunitv2\src\NUnitCore\interfaces\RuntimeFramework.cs,AppendDotNetFourFrameworkVersions,The following statement contains a magic number: framework = new RuntimeFramework(RuntimeType.Net' new Version(4' 5));
Magic Number,NUnit.Core,RuntimeFramework,C:\research\architectureSmells\repos\nunit_nunitv2\src\NUnitCore\interfaces\RuntimeFramework.cs,AppendDotNetFourFrameworkVersions,The following statement contains a magic number: framework = new RuntimeFramework(RuntimeType.Net' new Version(4' 5));
Missing Default,NUnit.Core,TestResult,C:\research\architectureSmells\repos\nunit_nunitv2\src\NUnitCore\interfaces\TestResult.cs,AddResult,The following switch statement is missing a default case: switch (result.ResultState)              {                  case ResultState.Failure:                  case ResultState.Error:                  case ResultState.NotRunnable:                      if (!this.IsFailure && !this.IsError && this.ResultState != ResultState.NotRunnable)                          this.Failure("One or more child tests had errors"' null' FailureSite.Child);                      break;                  case ResultState.Success:                      if (this.ResultState == ResultState.Inconclusive)                          this.Success();                      break;                  // Removed this case due to bug #928018                  //case ResultState.Ignored:                  //    if (this.ResultState == ResultState.Inconclusive || ResultState == ResultState.Success)                  //        this.SetResult(ResultState.Ignored' "One or more child tests were ignored"' null' FailureSite.Child);                  //    break;                  case ResultState.Cancelled:                      this.SetResult(ResultState.Cancelled' result.Message' null' FailureSite.Child);                      break;              }
