Implementation smell,Namespace,Class,File,Method,Description
Long Method,NUnit.ConsoleRunner,ConsoleUi,C:\research\architectureSmells\repos\nunit_nunitv2\src\ConsoleRunner\nunit-console\ConsoleUi.cs,Execute,The method has 125 lines of code.
Complex Method,NUnit.ConsoleRunner,ConsoleUi,C:\research\architectureSmells\repos\nunit_nunitv2\src\ConsoleRunner\nunit-console\ConsoleUi.cs,Execute,Cyclomatic complexity of the method is 14
Complex Method,NUnit.ConsoleRunner,ConsoleUi,C:\research\architectureSmells\repos\nunit_nunitv2\src\ConsoleRunner\nunit-console\ConsoleUi.cs,CreateTestFilter,Cyclomatic complexity of the method is 12
Complex Method,NUnit.ConsoleRunner,ConsoleUi,C:\research\architectureSmells\repos\nunit_nunitv2\src\ConsoleRunner\nunit-console\ConsoleUi.cs,MakeTestPackage,Cyclomatic complexity of the method is 13
Complex Method,NUnit.ConsoleRunner,EventCollector,C:\research\architectureSmells\repos\nunit_nunitv2\src\ConsoleRunner\nunit-console\EventCollector.cs,TestFinished,Cyclomatic complexity of the method is 8
Complex Method,NUnit.ConsoleRunner,Runner,C:\research\architectureSmells\repos\nunit_nunitv2\src\ConsoleRunner\nunit-console\Runner.cs,Main,Cyclomatic complexity of the method is 10
Long Statement,NUnit.ConsoleRunner,Runner,C:\research\architectureSmells\repos\nunit_nunitv2\src\ConsoleRunner\nunit-console\Runner.cs,Main,The length of the statement  "            InternalTraceLevel level = (InternalTraceLevel)settingsService.GetSetting("Options.InternalTraceLevel"' InternalTraceLevel.Default); " is 132.
Long Statement,NUnit.ConsoleRunner,Runner,C:\research\architectureSmells\repos\nunit_nunitv2\src\ConsoleRunner\nunit-console\Runner.cs,WriteCopyright,The length of the statement  "            string copyrightText = "Copyright (C) 2002-2012 Charlie Poole.\r\nCopyright (C) 2002-2004 James W. Newkirk' Michael C. Two' Alexei A. Vorontsov.\r\nCopyright (C) 2000-2002 Philip Craig.\r\nAll Rights Reserved."; " is 211.
Missing Default,NUnit.ConsoleRunner,EventCollector,C:\research\architectureSmells\repos\nunit_nunitv2\src\ConsoleRunner\nunit-console\EventCollector.cs,TestFinished,The following switch statement is missing a default case: switch( testResult.ResultState )              {                  case ResultState.Error:                  case ResultState.Failure:                  case ResultState.Cancelled:                      testRunCount++;  			        failureCount++;      					  			        if ( progress )  				        Console.Write("F");      					  			        messages.Add( string.Format( "{0}) {1} :"' failureCount' testResult.Test.TestName.FullName ) );  			        messages.Add( testResult.Message.Trim( Environment.NewLine.ToCharArray() ) );    			        string stackTrace = StackTraceFilter.Filter( testResult.StackTrace );  			        if ( stackTrace != null && stackTrace != string.Empty )  			        {  				        string[] trace = stackTrace.Split( System.Environment.NewLine.ToCharArray() );  				        foreach( string s in trace )  				        {  					        if ( s != string.Empty )  					        {  						        string link = Regex.Replace( s.Trim()' @".* in (.*):line (.*)"' "$1($2)");  						        messages.Add( string.Format( "at\n{0}"' link ) );  					        }  				        }  			        }                      break;                    case ResultState.Inconclusive:                  case ResultState.Success:                      testRunCount++;                      break;                    case ResultState.Ignored:                  case ResultState.Skipped:                  case ResultState.NotRunnable:      				testIgnoreCount++;  					  	    			if ( progress )  		    			Console.Write("N");                      break;  			}
Missing Default,NUnit.ConsoleRunner,EventCollector,C:\research\architectureSmells\repos\nunit_nunitv2\src\ConsoleRunner\nunit-console\EventCollector.cs,TestOutput,The following switch statement is missing a default case: switch ( output.Type )  			{  				case TestOutputType.Out:  					outWriter.Write( output.Text );  					break;  				case TestOutputType.Error:  					errorWriter.Write( output.Text );  					break;  			}
Missing Default,NUnit.ConsoleRunner,TestNameParser,C:\research\architectureSmells\repos\nunit_nunitv2\src\ConsoleRunner\nunit-console\TestNameParser.cs,GetSeparator,The following switch statement is missing a default case: switch (argument[index])                  {                      case ''':                          if (nest == 0)                              return index;                          break;                        case '"':                          while (++index < argument.Length && argument[index] != '"')                              ;                          break;                        case '(':                      case '<':                          nest++;                          break;                        case ')':                      case '>':                          nest--;                          break;                  }
