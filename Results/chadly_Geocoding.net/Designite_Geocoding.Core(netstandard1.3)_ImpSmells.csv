Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,Geocoding,IGeocoder,D:\research\architectureSmells\repos\chadly_Geocoding.net\src\Geocoding.Core\IGeocoder.cs,GeocodeAsync,The method has 6 parameters. Parameters: street' city' state' postalCode' country' cancellationToken
Magic Number,Geocoding,Distance,D:\research\architectureSmells\repos\chadly_Geocoding.net\src\Geocoding.Core\Distance.cs,Distance,The following statement contains a magic number: this.value = Math.Round(value' 8);
Magic Number,Geocoding,Location,D:\research\architectureSmells\repos\chadly_Geocoding.net\src\Geocoding.Core\Location.cs,ToRadian,The following statement contains a magic number: return (Math.PI / 180.0) * val;
Magic Number,Geocoding,Location,D:\research\architectureSmells\repos\chadly_Geocoding.net\src\Geocoding.Core\Location.cs,DistanceBetween,The following statement contains a magic number: double a = Math.Pow(Math.Sin(latRadian / 2.0)' 2) +  				Math.Cos(ToRadian(this.Latitude)) *  				Math.Cos(ToRadian(location.Latitude)) *  				Math.Pow(Math.Sin(longRadian / 2.0)' 2);
Magic Number,Geocoding,Location,D:\research\architectureSmells\repos\chadly_Geocoding.net\src\Geocoding.Core\Location.cs,DistanceBetween,The following statement contains a magic number: double a = Math.Pow(Math.Sin(latRadian / 2.0)' 2) +  				Math.Cos(ToRadian(this.Latitude)) *  				Math.Cos(ToRadian(location.Latitude)) *  				Math.Pow(Math.Sin(longRadian / 2.0)' 2);
Magic Number,Geocoding,Location,D:\research\architectureSmells\repos\chadly_Geocoding.net\src\Geocoding.Core\Location.cs,DistanceBetween,The following statement contains a magic number: double a = Math.Pow(Math.Sin(latRadian / 2.0)' 2) +  				Math.Cos(ToRadian(this.Latitude)) *  				Math.Cos(ToRadian(location.Latitude)) *  				Math.Pow(Math.Sin(longRadian / 2.0)' 2);
Magic Number,Geocoding,Location,D:\research\architectureSmells\repos\chadly_Geocoding.net\src\Geocoding.Core\Location.cs,DistanceBetween,The following statement contains a magic number: double a = Math.Pow(Math.Sin(latRadian / 2.0)' 2) +  				Math.Cos(ToRadian(this.Latitude)) *  				Math.Cos(ToRadian(location.Latitude)) *  				Math.Pow(Math.Sin(longRadian / 2.0)' 2);
Magic Number,Geocoding,Location,D:\research\architectureSmells\repos\chadly_Geocoding.net\src\Geocoding.Core\Location.cs,DistanceBetween,The following statement contains a magic number: double c = 2.0 * Math.Asin(Math.Min(1' Math.Sqrt(a)));
