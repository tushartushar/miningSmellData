Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Geocoding.MapQuest,MapQuestGeocoder,C:\repos\chadly_Geocoding.net\src\Geocoding.MapQuest\MapQuestGeocoder.cs,GeocodeAsync,Cyclomatic complexity of the method is 9
Long Parameter List,Geocoding.MapQuest,MapQuestGeocoder,C:\repos\chadly_Geocoding.net\src\Geocoding.MapQuest\MapQuestGeocoder.cs,GeocodeAsync,The method has 5 parameters. Parameters: street' city' state' postalCode' country
Magic Number,Geocoding.MapQuest,MapQuestGeocoder,C:\repos\chadly_Geocoding.net\src\Geocoding.MapQuest\MapQuestGeocoder.cs,Parse,The following statement contains a magic number: try  			{  				string json;  				using (HttpWebResponse response = await request.GetResponseAsync().ConfigureAwait(false) as HttpWebResponse)  				{  					if ((int)response.StatusCode >= 300) //error  						throw new Exception((int)response.StatusCode + " " + response.StatusDescription);    					using (var sr = new StreamReader(response.GetResponseStream()))  						json = sr.ReadToEnd();  				}  				if (string.IsNullOrWhiteSpace(json))  					throw new Exception("Remote system response with blank: " + requestInfo);    				MapQuestResponse o = json.FromJSON<MapQuestResponse>();  				if (o == null)  					throw new Exception("Unable to deserialize remote response: " + requestInfo + " => " + json);    				return o;  			}  			catch (WebException wex) //convert to simple exception & close the response stream  			{  				using (HttpWebResponse response = wex.Response as HttpWebResponse)  				{  					var sb = new StringBuilder(requestInfo);  					sb.Append(" | ");  					sb.Append(response.StatusDescription);  					sb.Append(" | ");  					using (var sr = new StreamReader(response.GetResponseStream()))  					{  						sb.Append(sr.ReadToEnd());  					}  					throw new Exception((int)response.StatusCode + " " + sb.ToString());  				}  			}
