Implementation smell,Namespace,Class,File,Method,Description
Complex Method,XLabs.Forms.Charting.Controls,Chart,C:\repos\XForms_Xamarin-Forms-Labs\src\Charting\XLabs.Forms.Charting\Controls\Chart.cs,DrawChart,Cyclomatic complexity of the method is 19
Long Parameter List,XLabs.Forms.Charting.Events,DoubleDrawingData,C:\repos\XForms_Xamarin-Forms-Labs\src\Charting\XLabs.Forms.Charting\Events\DoubleDrawingData.cs,DoubleDrawingData,The method has 5 parameters. Parameters: xFrom' yFrom' xTo' yTo' seriesNo
Long Parameter List,XLabs.Forms.Charting.Events,PieDrawingData,C:\repos\XForms_Xamarin-Forms-Labs\src\Charting\XLabs.Forms.Charting\Events\PieDrawingData.cs,PieDrawingData,The method has 5 parameters. Parameters: x' y' seriesNo' size' percentages
Long Statement,XLabs.Forms.Charting.Controls,Chart,C:\repos\XForms_Xamarin-Forms-Labs\src\Charting\XLabs.Forms.Charting\Controls\Chart.cs,DrawChart,The length of the statement  "				OnDrawGridLine(this' new DrawEventArgs<DoubleDrawingData>() { Data = new DoubleDrawingData(PADDING_LEFT' PADDING_TOP' PADDING_LEFT' HeightRequest' 0) });  //Y-axis " is 163.
Long Statement,XLabs.Forms.Charting.Controls,Chart,C:\repos\XForms_Xamarin-Forms-Labs\src\Charting\XLabs.Forms.Charting\Controls\Chart.cs,DrawChart,The length of the statement  "				OnDrawGridLine(this' new DrawEventArgs<DoubleDrawingData>() { Data = new DoubleDrawingData(PADDING_LEFT' HeightRequest + 1' WidthRequest' HeightRequest + 1' 0) });      //X-axis " is 177.
Long Statement,XLabs.Forms.Charting.Controls,Chart,C:\repos\XForms_Xamarin-Forms-Labs\src\Charting\XLabs.Forms.Charting\Controls\Chart.cs,DrawGrid,The length of the statement  "			OnDrawText(this' new DrawEventArgs<TextDrawingData>() { Data = new TextDrawingData((valueOfPart * noOfHorizontalLines).ToString()' 10' PADDING_TOP + 5) }); " is 155.
Long Statement,XLabs.Forms.Charting.Controls,Chart,C:\repos\XForms_Xamarin-Forms-Labs\src\Charting\XLabs.Forms.Charting\Controls\Chart.cs,DrawGrid,The length of the statement  "					OnDrawGridLine(this' new DrawEventArgs<DoubleDrawingData>() { Data = new DoubleDrawingData(PADDING_LEFT' PADDING_TOP + (quarterHeight * i)' WidthRequest' PADDING_TOP + (quarterHeight * i)' 0) }); " is 195.
Long Statement,XLabs.Forms.Charting.Controls,Chart,C:\repos\XForms_Xamarin-Forms-Labs\src\Charting\XLabs.Forms.Charting\Controls\Chart.cs,DrawGrid,The length of the statement  "				OnDrawText(this' new DrawEventArgs<TextDrawingData>() { Data = new TextDrawingData(currentValue.ToString()' 10' PADDING_TOP + (quarterHeight * i) + 5) }); " is 154.
Long Statement,XLabs.Forms.Charting.Controls,Chart,C:\repos\XForms_Xamarin-Forms-Labs\src\Charting\XLabs.Forms.Charting\Controls\Chart.cs,DrawBarChart,The length of the statement  "				OnDrawBar(this' new DrawEventArgs<DoubleDrawingData>() { Data = new DoubleDrawingData(widthIterator + 1' ((HeightRequest - PADDING_TOP) - heightOfBar) + PADDING_TOP' (widthIterator + widthPerBar) - 1' HeightRequest' barNo) }); " is 226.
Long Statement,XLabs.Forms.Charting.Controls,Chart,C:\repos\XForms_Xamarin-Forms-Labs\src\Charting\XLabs.Forms.Charting\Controls\Chart.cs,DrawLineChart,The length of the statement  "					OnDrawLine(this' new DrawEventArgs<DoubleDrawingData>() { Data = new DoubleDrawingData(previousPoints[0]' previousPoints[1]' x' y' lineNo) }); " is 142.
Long Statement,XLabs.Forms.Charting.Controls,Chart,C:\repos\XForms_Xamarin-Forms-Labs\src\Charting\XLabs.Forms.Charting\Controls\Chart.cs,DrawLineChart,The length of the statement  "				OnDrawCircle(this' new DrawEventArgs<SingleDrawingData>() { Data = new SingleDrawingData(widthIterator + (widthOfAllBars / 2)' ((HeightRequest - PADDING_TOP) - heightOfLine) + PADDING_TOP' lineNo) }); " is 200.
Long Statement,XLabs.Forms.Charting.Controls,Chart,C:\repos\XForms_Xamarin-Forms-Labs\src\Charting\XLabs.Forms.Charting\Controls\Chart.cs,DrawPieChart,The length of the statement  "			OnDrawPie(this' new DrawEventArgs<PieDrawingData> { Data = new PieDrawingData(WidthRequest / 2' HeightRequest / 2' pieNo' sizeOfCircle' values) }); " is 147.
Long Statement,XLabs.Forms.Charting.Controls,Chart,C:\repos\XForms_Xamarin-Forms-Labs\src\Charting\XLabs.Forms.Charting\Controls\Chart.cs,DrawLabels,The length of the statement  "				OnDrawText(this' new DrawEventArgs<TextDrawingData>() { Data = new TextDrawingData(points[i].Label' (widthIterator + widthOfAllBars / 2) - (points[i].Label.Length * 4)' HeightRequest + 25) }); " is 192.
Magic Number,XLabs.Forms.Charting.Controls,Chart,C:\repos\XForms_Xamarin-Forms-Labs\src\Charting\XLabs.Forms.Charting\Controls\Chart.cs,DrawChart,The following statement contains a magic number: if (DataSource != default(IEnumerable<IEnumerable>))  			{  				while (Series.Count < DataSource.Count())  					Series.Add(new Series());    				for (int i = 0; i < DataSource.Count(); i++)  				{  					IEnumerable<object> seriesValues = DataSource.ElementAt(i);  					// There should be at least one value to access its type and properties.  					if (seriesValues.Count() > 1)  					{  						Type type = seriesValues.ElementAt(1).GetType();  						IEnumerable<PropertyInfo> properties = type.GetTypeInfo().DeclaredProperties;  						// There should be at least two accessible properties on the type.  						if (properties.Count() >= 2)  						{  							Series series = Series[i];  							series.Points = new DataPointCollection();    							foreach (var val in seriesValues)  							{  								// Currently DataPoint expects a string (X) and a double (Y).  								string xValue = "";  								if (XPath != null)  								{  									// Get value from property using reflection  									PropertyInfo info = properties.FirstOrDefault(p => p.Name == XPath);  									if (info != null)  										xValue = info.GetValue(val).ToString();  								}  								else  									// Get value from property using the first property it can find on the object  									xValue = properties.ElementAt(0).GetValue(val' null).ToString();    								double yValue = 0;  								if (YPath != null)  								{  									// Get value from property using reflection  									PropertyInfo info = properties.FirstOrDefault(p => p.Name == YPath);  									if (info != null)  										yValue = Convert.ToDouble(info.GetValue(val).ToString());  								}  								else  									// Get value from property using the second property it can find on the object  									yValue = Convert.ToDouble(properties.ElementAt(1).GetValue(val' null));    								series.Points.Add(new DataPoint(xValue' yValue));  							}  						}  					}  				}  			}
Magic Number,XLabs.Forms.Charting.Controls,Chart,C:\repos\XForms_Xamarin-Forms-Labs\src\Charting\XLabs.Forms.Charting\Controls\Chart.cs,DrawGrid,The following statement contains a magic number: int noOfHorizontalLines = 4;
Magic Number,XLabs.Forms.Charting.Controls,Chart,C:\repos\XForms_Xamarin-Forms-Labs\src\Charting\XLabs.Forms.Charting\Controls\Chart.cs,DrawGrid,The following statement contains a magic number: double quarterValue = highestValue / 4;
Magic Number,XLabs.Forms.Charting.Controls,Chart,C:\repos\XForms_Xamarin-Forms-Labs\src\Charting\XLabs.Forms.Charting\Controls\Chart.cs,DrawGrid,The following statement contains a magic number: double valueOfPart = ((int)Math.Round(quarterValue / 10.0)) * 10;
Magic Number,XLabs.Forms.Charting.Controls,Chart,C:\repos\XForms_Xamarin-Forms-Labs\src\Charting\XLabs.Forms.Charting\Controls\Chart.cs,DrawGrid,The following statement contains a magic number: double valueOfPart = ((int)Math.Round(quarterValue / 10.0)) * 10;
Magic Number,XLabs.Forms.Charting.Controls,Chart,C:\repos\XForms_Xamarin-Forms-Labs\src\Charting\XLabs.Forms.Charting\Controls\Chart.cs,DrawGrid,The following statement contains a magic number: if (valueOfPart < quarterValue)  				noOfHorizontalLines = 5;
Magic Number,XLabs.Forms.Charting.Controls,Chart,C:\repos\XForms_Xamarin-Forms-Labs\src\Charting\XLabs.Forms.Charting\Controls\Chart.cs,DrawGrid,The following statement contains a magic number: OnDrawText(this' new DrawEventArgs<TextDrawingData>() { Data = new TextDrawingData((valueOfPart * noOfHorizontalLines).ToString()' 10' PADDING_TOP + 5) });
Magic Number,XLabs.Forms.Charting.Controls,Chart,C:\repos\XForms_Xamarin-Forms-Labs\src\Charting\XLabs.Forms.Charting\Controls\Chart.cs,DrawGrid,The following statement contains a magic number: OnDrawText(this' new DrawEventArgs<TextDrawingData>() { Data = new TextDrawingData((valueOfPart * noOfHorizontalLines).ToString()' 10' PADDING_TOP + 5) });
Magic Number,XLabs.Forms.Charting.Controls,Chart,C:\repos\XForms_Xamarin-Forms-Labs\src\Charting\XLabs.Forms.Charting\Controls\Chart.cs,DrawGrid,The following statement contains a magic number: for (int i = 1; i <= noOfHorizontalLines; i++)  			{  				if (Grid)  				{  					OnDrawGridLine(this' new DrawEventArgs<DoubleDrawingData>() { Data = new DoubleDrawingData(PADDING_LEFT' PADDING_TOP + (quarterHeight * i)' WidthRequest' PADDING_TOP + (quarterHeight * i)' 0) });  				}  				double currentValue = (valueOfPart * noOfHorizontalLines) - (valueOfPart * i);  				OnDrawText(this' new DrawEventArgs<TextDrawingData>() { Data = new TextDrawingData(currentValue.ToString()' 10' PADDING_TOP + (quarterHeight * i) + 5) });  			}
Magic Number,XLabs.Forms.Charting.Controls,Chart,C:\repos\XForms_Xamarin-Forms-Labs\src\Charting\XLabs.Forms.Charting\Controls\Chart.cs,DrawGrid,The following statement contains a magic number: for (int i = 1; i <= noOfHorizontalLines; i++)  			{  				if (Grid)  				{  					OnDrawGridLine(this' new DrawEventArgs<DoubleDrawingData>() { Data = new DoubleDrawingData(PADDING_LEFT' PADDING_TOP + (quarterHeight * i)' WidthRequest' PADDING_TOP + (quarterHeight * i)' 0) });  				}  				double currentValue = (valueOfPart * noOfHorizontalLines) - (valueOfPart * i);  				OnDrawText(this' new DrawEventArgs<TextDrawingData>() { Data = new TextDrawingData(currentValue.ToString()' 10' PADDING_TOP + (quarterHeight * i) + 5) });  			}
Magic Number,XLabs.Forms.Charting.Controls,Chart,C:\repos\XForms_Xamarin-Forms-Labs\src\Charting\XLabs.Forms.Charting\Controls\Chart.cs,DrawBarChart,The following statement contains a magic number: double widthIterator = 2 + (barNo * widthPerBar) + PADDING_LEFT;
Magic Number,XLabs.Forms.Charting.Controls,Chart,C:\repos\XForms_Xamarin-Forms-Labs\src\Charting\XLabs.Forms.Charting\Controls\Chart.cs,DrawLineChart,The following statement contains a magic number: double widthIterator = 2 + PADDING_LEFT;
Magic Number,XLabs.Forms.Charting.Controls,Chart,C:\repos\XForms_Xamarin-Forms-Labs\src\Charting\XLabs.Forms.Charting\Controls\Chart.cs,DrawLineChart,The following statement contains a magic number: double[] previousPoints = new double[2];
Magic Number,XLabs.Forms.Charting.Controls,Chart,C:\repos\XForms_Xamarin-Forms-Labs\src\Charting\XLabs.Forms.Charting\Controls\Chart.cs,DrawLineChart,The following statement contains a magic number: for (int i = 0; i < points.Count; i++)  			{  				double heightOfLine = ((HeightRequest - PADDING_TOP) / highestValue) * points[i].Value;    				double x = widthIterator + (widthOfAllBars / 2);  				double y = ((HeightRequest - PADDING_TOP) - heightOfLine) + PADDING_TOP;    				if (i != 0)  				{  					OnDrawLine(this' new DrawEventArgs<DoubleDrawingData>() { Data = new DoubleDrawingData(previousPoints[0]' previousPoints[1]' x' y' lineNo) });  				}    				previousPoints[0] = x;  				previousPoints[1] = y;    				OnDrawCircle(this' new DrawEventArgs<SingleDrawingData>() { Data = new SingleDrawingData(widthIterator + (widthOfAllBars / 2)' ((HeightRequest - PADDING_TOP) - heightOfLine) + PADDING_TOP' lineNo) });    				widthIterator += widthPerBar * noOfBarSeries + Spacing;  			}
Magic Number,XLabs.Forms.Charting.Controls,Chart,C:\repos\XForms_Xamarin-Forms-Labs\src\Charting\XLabs.Forms.Charting\Controls\Chart.cs,DrawLineChart,The following statement contains a magic number: for (int i = 0; i < points.Count; i++)  			{  				double heightOfLine = ((HeightRequest - PADDING_TOP) / highestValue) * points[i].Value;    				double x = widthIterator + (widthOfAllBars / 2);  				double y = ((HeightRequest - PADDING_TOP) - heightOfLine) + PADDING_TOP;    				if (i != 0)  				{  					OnDrawLine(this' new DrawEventArgs<DoubleDrawingData>() { Data = new DoubleDrawingData(previousPoints[0]' previousPoints[1]' x' y' lineNo) });  				}    				previousPoints[0] = x;  				previousPoints[1] = y;    				OnDrawCircle(this' new DrawEventArgs<SingleDrawingData>() { Data = new SingleDrawingData(widthIterator + (widthOfAllBars / 2)' ((HeightRequest - PADDING_TOP) - heightOfLine) + PADDING_TOP' lineNo) });    				widthIterator += widthPerBar * noOfBarSeries + Spacing;  			}
Magic Number,XLabs.Forms.Charting.Controls,Chart,C:\repos\XForms_Xamarin-Forms-Labs\src\Charting\XLabs.Forms.Charting\Controls\Chart.cs,DrawPieChart,The following statement contains a magic number: double sizeOfCircle = ((WidthRequest > HeightRequest) ? HeightRequest / 2 : WidthRequest / 2);
Magic Number,XLabs.Forms.Charting.Controls,Chart,C:\repos\XForms_Xamarin-Forms-Labs\src\Charting\XLabs.Forms.Charting\Controls\Chart.cs,DrawPieChart,The following statement contains a magic number: double sizeOfCircle = ((WidthRequest > HeightRequest) ? HeightRequest / 2 : WidthRequest / 2);
Magic Number,XLabs.Forms.Charting.Controls,Chart,C:\repos\XForms_Xamarin-Forms-Labs\src\Charting\XLabs.Forms.Charting\Controls\Chart.cs,DrawPieChart,The following statement contains a magic number: double degreesPerValue = 360 / values.Sum();
Magic Number,XLabs.Forms.Charting.Controls,Chart,C:\repos\XForms_Xamarin-Forms-Labs\src\Charting\XLabs.Forms.Charting\Controls\Chart.cs,DrawPieChart,The following statement contains a magic number: OnDrawPie(this' new DrawEventArgs<PieDrawingData> { Data = new PieDrawingData(WidthRequest / 2' HeightRequest / 2' pieNo' sizeOfCircle' values) });
Magic Number,XLabs.Forms.Charting.Controls,Chart,C:\repos\XForms_Xamarin-Forms-Labs\src\Charting\XLabs.Forms.Charting\Controls\Chart.cs,DrawPieChart,The following statement contains a magic number: OnDrawPie(this' new DrawEventArgs<PieDrawingData> { Data = new PieDrawingData(WidthRequest / 2' HeightRequest / 2' pieNo' sizeOfCircle' values) });
Magic Number,XLabs.Forms.Charting.Controls,Chart,C:\repos\XForms_Xamarin-Forms-Labs\src\Charting\XLabs.Forms.Charting\Controls\Chart.cs,DrawLabels,The following statement contains a magic number: double widthIterator = 2 + PADDING_LEFT;
Magic Number,XLabs.Forms.Charting.Controls,Chart,C:\repos\XForms_Xamarin-Forms-Labs\src\Charting\XLabs.Forms.Charting\Controls\Chart.cs,DrawLabels,The following statement contains a magic number: for (int i = 0; i < points.Count; i++)  			{  				OnDrawText(this' new DrawEventArgs<TextDrawingData>() { Data = new TextDrawingData(points[i].Label' (widthIterator + widthOfAllBars / 2) - (points[i].Label.Length * 4)' HeightRequest + 25) });  				widthIterator += widthPerBar * noOfBarSeries + Spacing;  			}
Magic Number,XLabs.Forms.Charting.Controls,Chart,C:\repos\XForms_Xamarin-Forms-Labs\src\Charting\XLabs.Forms.Charting\Controls\Chart.cs,DrawLabels,The following statement contains a magic number: for (int i = 0; i < points.Count; i++)  			{  				OnDrawText(this' new DrawEventArgs<TextDrawingData>() { Data = new TextDrawingData(points[i].Label' (widthIterator + widthOfAllBars / 2) - (points[i].Label.Length * 4)' HeightRequest + 25) });  				widthIterator += widthPerBar * noOfBarSeries + Spacing;  			}
Magic Number,XLabs.Forms.Charting.Controls,Chart,C:\repos\XForms_Xamarin-Forms-Labs\src\Charting\XLabs.Forms.Charting\Controls\Chart.cs,DrawLabels,The following statement contains a magic number: for (int i = 0; i < points.Count; i++)  			{  				OnDrawText(this' new DrawEventArgs<TextDrawingData>() { Data = new TextDrawingData(points[i].Label' (widthIterator + widthOfAllBars / 2) - (points[i].Label.Length * 4)' HeightRequest + 25) });  				widthIterator += widthPerBar * noOfBarSeries + Spacing;  			}
Magic Number,XLabs.Forms.Charting.Events,SingleDrawingData,C:\repos\XForms_Xamarin-Forms-Labs\src\Charting\XLabs.Forms.Charting\Events\SingleDrawingData.cs,SingleDrawingData,The following statement contains a magic number: Size = 5;
Magic Number,XLabs.Forms.Charting,MathHelper,C:\repos\XForms_Xamarin-Forms-Labs\src\Charting\XLabs.Forms.Charting\MathHelper.cs,Deg2Rad,The following statement contains a magic number: return Math.PI / 180 * degrees;
Magic Number,XLabs.Forms.Charting,MathHelper,C:\repos\XForms_Xamarin-Forms-Labs\src\Charting\XLabs.Forms.Charting\MathHelper.cs,Rad2Deg,The following statement contains a magic number: return 180.0 / Math.PI * radians;
Missing Default,XLabs.Forms.Charting.Controls,Chart,C:\repos\XForms_Xamarin-Forms-Labs\src\Charting\XLabs.Forms.Charting\Controls\Chart.cs,DrawChart,The following switch statement is missing a default case: switch (series.Type)  					{  						case ChartType.Bar:  							DrawBarChart(highestValue' widthPerBar' i' series.Points);  							break;  						case ChartType.Line:  							DrawLineChart(highestValue' widthPerBar' i' series.Points);  							break;  					}
