Implementation smell,Namespace,Class,File,Method,Description
Long Method,DeviceInfo,DeviceProperties,C:\repos\XForms_Xamarin-Forms-Labs\src\Platform\XLabs.Platform.WinRT.Shared\Device\DeviceProperties.cs,ResolveCameraInfoAsync,The method has 143 lines of code.
Long Method,DeviceInfo,DeviceProperties,C:\repos\XForms_Xamarin-Forms-Labs\src\Platform\XLabs.Platform.WinRT.Shared\Device\DeviceProperties.cs,ResolveScreenResolutionAsync,The method has 117 lines of code.
Complex Method,XLabs.Platform.Services.Email,EmailService,C:\repos\XForms_Xamarin-Forms-Labs\src\Platform\XLabs.Platform.WinRT.Phone\Services\Email\EmailService.cs,ShowDraft,Cyclomatic complexity of the method is 8
Complex Method,DeviceInfo,DeviceProperties,C:\repos\XForms_Xamarin-Forms-Labs\src\Platform\XLabs.Platform.WinRT.Shared\Device\DeviceProperties.cs,ResolveCameraInfoAsync,Cyclomatic complexity of the method is 9
Long Parameter List,XLabs.Platform.Services.Email,EmailService,C:\repos\XForms_Xamarin-Forms-Labs\src\Platform\XLabs.Platform.WinRT.Phone\Services\Email\EmailService.cs,ShowDraft,The method has 5 parameters. Parameters: subject' body' html' to' attachments
Long Parameter List,XLabs.Platform.Services.Email,EmailService,C:\repos\XForms_Xamarin-Forms-Labs\src\Platform\XLabs.Platform.WinRT.Phone\Services\Email\EmailService.cs,ShowDraft,The method has 7 parameters. Parameters: subject' body' html' to' cc' bcc' attachments
Long Identifier,DeviceInfo,DeviceProperties,C:\repos\XForms_Xamarin-Forms-Labs\src\Platform\XLabs.Platform.WinRT.Shared\Device\DeviceProperties.cs,,The length of the parameter _numberOfAsyncOperationsToComplete is 34.
Long Identifier,DeviceInfo,DeviceProperties,C:\repos\XForms_Xamarin-Forms-Labs\src\Platform\XLabs.Platform.WinRT.Shared\Device\DeviceProperties.cs,,The length of the parameter _numberOfAsyncOperationsCompleted is 33.
Long Statement,DeviceInfo,DeviceProperties,C:\repos\XForms_Xamarin-Forms-Labs\src\Platform\XLabs.Platform.WinRT.Shared\Device\DeviceProperties.cs,ResolvePowerInfo,The length of the statement  "                PowerSavingModeEnabled = Windows.System.Power.PowerManager.EnergySaverStatus == Windows.System.Power.EnergySaverStatus.On; " is 122.
Long Statement,DeviceInfo,DeviceProperties,C:\repos\XForms_Xamarin-Forms-Labs\src\Platform\XLabs.Platform.WinRT.Shared\Device\DeviceProperties.cs,ResolveCameraInfoAsync,The length of the statement  "                HasFrontCamera = PhotoCaptureDevice.AvailableSensorLocations.Contains<CameraSensorLocation>(CameraSensorLocation.Front); " is 120.
Long Statement,DeviceInfo,DeviceProperties,C:\repos\XForms_Xamarin-Forms-Labs\src\Platform\XLabs.Platform.WinRT.Shared\Device\DeviceProperties.cs,ResolveCameraInfoAsync,The length of the statement  "                Windows.Media.Devices.MediaDeviceControlCapabilities focusCaps = _mediaCapture.VideoDeviceController.Focus.Capabilities; " is 120.
Long Statement,DeviceInfo,DeviceProperties,C:\repos\XForms_Xamarin-Forms-Labs\src\Platform\XLabs.Platform.WinRT.Shared\Device\DeviceProperties.cs,ResolveMemoryInfo,The length of the statement  "                + "\n - ApplicationCurrentMemoryUsage: " + TransformBytes(ApplicationCurrentMemoryUsageInBytes' UnitPrefixes.Mega' 1) + " MB" " is 125.
Long Statement,DeviceInfo,DeviceProperties,C:\repos\XForms_Xamarin-Forms-Labs\src\Platform\XLabs.Platform.WinRT.Shared\Device\DeviceProperties.cs,ResolveMemoryInfo,The length of the statement  "                + "\n - ApplicationMemoryUsageLimit: " + TransformBytes(ApplicationMemoryUsageLimitInBytes' UnitPrefixes.Mega' 1) + " MB" " is 121.
Long Statement,DeviceInfo,DeviceProperties,C:\repos\XForms_Xamarin-Forms-Labs\src\Platform\XLabs.Platform.WinRT.Shared\Device\DeviceProperties.cs,ResolveScreenResolutionAsync,The length of the statement  "                    screenResolutionX = Windows.ApplicationModel.Core.CoreApplication.MainView.CoreWindow.Bounds.Width * DisplayInfo.RawPixelsPerViewPixel; " is 135.
Long Statement,DeviceInfo,DeviceProperties,C:\repos\XForms_Xamarin-Forms-Labs\src\Platform\XLabs.Platform.WinRT.Shared\Device\DeviceProperties.cs,ResolveScreenResolutionAsync,The length of the statement  "                    screenResolutionY = Windows.ApplicationModel.Core.CoreApplication.MainView.CoreWindow.Bounds.Height * DisplayInfo.RawPixelsPerViewPixel; " is 136.
Long Statement,DeviceInfo,DeviceProperties,C:\repos\XForms_Xamarin-Forms-Labs\src\Platform\XLabs.Platform.WinRT.Shared\Device\DeviceProperties.cs,ResolveScreenResolutionAsync,The length of the statement  "                        //	var viewResolution = new Size(screenResolution.Width / rawPixelsPerViewPixel' screenResolution.Height / rawPixelsPerViewPixel); " is 130.
Long Statement,DeviceInfo,DeviceProperties,C:\repos\XForms_Xamarin-Forms-Labs\src\Platform\XLabs.Platform.WinRT.Shared\Device\DeviceProperties.cs,ResolveDeviceId,The length of the statement  "                    "Application has no access to device identity. To enable access consider enabling ID_CAP_IDENTITY_DEVICE on app manifest."); " is 124.
Long Statement,DeviceInfo,DeviceProperties,C:\repos\XForms_Xamarin-Forms-Labs\src\Platform\XLabs.Platform.WinRT.Shared\Device\DeviceProperties.cs,ResolveDeviceId,The length of the statement  "            var value = _hardwareToken != null ? _hardwareToken.Id.ToArray() : (_hardwareToken = HardwareIdentification.GetPackageSpecificToken(null))?.Id.ToArray(); " is 153.
Long Statement,DeviceInfo,DeviceProperties,C:\repos\XForms_Xamarin-Forms-Labs\src\Platform\XLabs.Platform.WinRT.Shared\Device\DeviceProperties.cs,ResolveDeviceId,The length of the statement  "                var value = _hardwareToken != null ? _hardwareToken.Id.ToArray() : (_hardwareToken = HardwareIdentification.GetPackageSpecificToken(null)).Id.ToArray(); " is 152.
Long Statement,DeviceInfo,DeviceProperties,C:\repos\XForms_Xamarin-Forms-Labs\src\Platform\XLabs.Platform.WinRT.Shared\Device\DeviceProperties.cs,DumpDeviceInformation,The length of the statement  "                Debug.WriteLine("Found device: " /*+ device.Id + ": "*/ + device.Name + (device.IsEnabled ? " (enabled) " : " (disabled)")); " is 124.
Empty Catch Block,XLabs.Platform.Device,WindowsPhoneDevice,C:\repos\XForms_Xamarin-Forms-Labs\src\Platform\XLabs.Platform.WinRT.Phone\Device\WindowsPhoneDevice.cs,WindowsPhoneDevice,The method has an empty catch block.
Empty Catch Block,XLabs.Platform.Device,WindowsPhoneDevice,C:\repos\XForms_Xamarin-Forms-Labs\src\Platform\XLabs.Platform.WinRT.Phone\Device\WindowsPhoneDevice.cs,WindowsPhoneDevice,The method has an empty catch block.
Empty Catch Block,XLabs.Platform.Services,Network,C:\repos\XForms_Xamarin-Forms-Labs\src\Platform\XLabs.Platform.WinRT.Phone\Services\Network.cs,IsReachable,The method has an empty catch block.
Magic Number,XLabs.Platform.Services,Network,C:\repos\XForms_Xamarin-Forms-Labs\src\Platform\XLabs.Platform.WinRT.Phone\Services\Network.cs,InternetConnectionStatus,The following statement contains a magic number: if (IsConnected)              {                  // 2 for 2G' 3 for 3G' 4 for 4G                  // 100 for WiFi                  // 0 for unknown or not connected</returns>                  var connectionType = GetConnectionGeneration();                    switch (connectionType)                  {                      case 2:                      case 3:                      case 4:                          return NetworkStatus.ReachableViaCarrierDataNetwork;                      case 100:                          return NetworkStatus.ReachableViaWiFiNetwork;                      case 0:                          return NetworkStatus.ReachableViaUnknownNetwork;                  }              }
Magic Number,XLabs.Platform.Services,Network,C:\repos\XForms_Xamarin-Forms-Labs\src\Platform\XLabs.Platform.WinRT.Phone\Services\Network.cs,InternetConnectionStatus,The following statement contains a magic number: if (IsConnected)              {                  // 2 for 2G' 3 for 3G' 4 for 4G                  // 100 for WiFi                  // 0 for unknown or not connected</returns>                  var connectionType = GetConnectionGeneration();                    switch (connectionType)                  {                      case 2:                      case 3:                      case 4:                          return NetworkStatus.ReachableViaCarrierDataNetwork;                      case 100:                          return NetworkStatus.ReachableViaWiFiNetwork;                      case 0:                          return NetworkStatus.ReachableViaUnknownNetwork;                  }              }
Magic Number,XLabs.Platform.Services,Network,C:\repos\XForms_Xamarin-Forms-Labs\src\Platform\XLabs.Platform.WinRT.Phone\Services\Network.cs,InternetConnectionStatus,The following statement contains a magic number: if (IsConnected)              {                  // 2 for 2G' 3 for 3G' 4 for 4G                  // 100 for WiFi                  // 0 for unknown or not connected</returns>                  var connectionType = GetConnectionGeneration();                    switch (connectionType)                  {                      case 2:                      case 3:                      case 4:                          return NetworkStatus.ReachableViaCarrierDataNetwork;                      case 100:                          return NetworkStatus.ReachableViaWiFiNetwork;                      case 0:                          return NetworkStatus.ReachableViaUnknownNetwork;                  }              }
Magic Number,XLabs.Platform.Services,Network,C:\repos\XForms_Xamarin-Forms-Labs\src\Platform\XLabs.Platform.WinRT.Phone\Services\Network.cs,InternetConnectionStatus,The following statement contains a magic number: if (IsConnected)              {                  // 2 for 2G' 3 for 3G' 4 for 4G                  // 100 for WiFi                  // 0 for unknown or not connected</returns>                  var connectionType = GetConnectionGeneration();                    switch (connectionType)                  {                      case 2:                      case 3:                      case 4:                          return NetworkStatus.ReachableViaCarrierDataNetwork;                      case 100:                          return NetworkStatus.ReachableViaWiFiNetwork;                      case 0:                          return NetworkStatus.ReachableViaUnknownNetwork;                  }              }
Magic Number,XLabs.Platform.Services,Network,C:\repos\XForms_Xamarin-Forms-Labs\src\Platform\XLabs.Platform.WinRT.Phone\Services\Network.cs,GetConnectionGeneration,The following statement contains a magic number: if (profile.IsWwanConnectionProfile)              {                  WwanDataClass connectionClass = profile.WwanConnectionProfileDetails.GetCurrentDataClass();                  switch (connectionClass)                  {                      //2G-equivalent                      case WwanDataClass.Edge:                      case WwanDataClass.Gprs:                          return 2;                        //3G-equivalent                      case WwanDataClass.Cdma1xEvdo:                      case WwanDataClass.Cdma1xEvdoRevA:                      case WwanDataClass.Cdma1xEvdoRevB:                      case WwanDataClass.Cdma1xEvdv:                      case WwanDataClass.Cdma1xRtt:                      case WwanDataClass.Cdma3xRtt:                      case WwanDataClass.CdmaUmb:                      case WwanDataClass.Umts:                      case WwanDataClass.Hsdpa:                      case WwanDataClass.Hsupa:                          return 3;                        //4G-equivalent                      case WwanDataClass.LteAdvanced:                          return 4;                        //not connected                      case WwanDataClass.None:                          return 0;                        //unknown                      case WwanDataClass.Custom:                      default:                          return 0;                  }              }              else if (profile.IsWlanConnectionProfile)              {                  return 100;              }
Magic Number,XLabs.Platform.Services,Network,C:\repos\XForms_Xamarin-Forms-Labs\src\Platform\XLabs.Platform.WinRT.Phone\Services\Network.cs,GetConnectionGeneration,The following statement contains a magic number: if (profile.IsWwanConnectionProfile)              {                  WwanDataClass connectionClass = profile.WwanConnectionProfileDetails.GetCurrentDataClass();                  switch (connectionClass)                  {                      //2G-equivalent                      case WwanDataClass.Edge:                      case WwanDataClass.Gprs:                          return 2;                        //3G-equivalent                      case WwanDataClass.Cdma1xEvdo:                      case WwanDataClass.Cdma1xEvdoRevA:                      case WwanDataClass.Cdma1xEvdoRevB:                      case WwanDataClass.Cdma1xEvdv:                      case WwanDataClass.Cdma1xRtt:                      case WwanDataClass.Cdma3xRtt:                      case WwanDataClass.CdmaUmb:                      case WwanDataClass.Umts:                      case WwanDataClass.Hsdpa:                      case WwanDataClass.Hsupa:                          return 3;                        //4G-equivalent                      case WwanDataClass.LteAdvanced:                          return 4;                        //not connected                      case WwanDataClass.None:                          return 0;                        //unknown                      case WwanDataClass.Custom:                      default:                          return 0;                  }              }              else if (profile.IsWlanConnectionProfile)              {                  return 100;              }
Magic Number,XLabs.Platform.Services,Network,C:\repos\XForms_Xamarin-Forms-Labs\src\Platform\XLabs.Platform.WinRT.Phone\Services\Network.cs,GetConnectionGeneration,The following statement contains a magic number: if (profile.IsWwanConnectionProfile)              {                  WwanDataClass connectionClass = profile.WwanConnectionProfileDetails.GetCurrentDataClass();                  switch (connectionClass)                  {                      //2G-equivalent                      case WwanDataClass.Edge:                      case WwanDataClass.Gprs:                          return 2;                        //3G-equivalent                      case WwanDataClass.Cdma1xEvdo:                      case WwanDataClass.Cdma1xEvdoRevA:                      case WwanDataClass.Cdma1xEvdoRevB:                      case WwanDataClass.Cdma1xEvdv:                      case WwanDataClass.Cdma1xRtt:                      case WwanDataClass.Cdma3xRtt:                      case WwanDataClass.CdmaUmb:                      case WwanDataClass.Umts:                      case WwanDataClass.Hsdpa:                      case WwanDataClass.Hsupa:                          return 3;                        //4G-equivalent                      case WwanDataClass.LteAdvanced:                          return 4;                        //not connected                      case WwanDataClass.None:                          return 0;                        //unknown                      case WwanDataClass.Custom:                      default:                          return 0;                  }              }              else if (profile.IsWlanConnectionProfile)              {                  return 100;              }
Magic Number,XLabs.Platform.Services,Network,C:\repos\XForms_Xamarin-Forms-Labs\src\Platform\XLabs.Platform.WinRT.Phone\Services\Network.cs,GetConnectionGeneration,The following statement contains a magic number: if (profile.IsWwanConnectionProfile)              {                  WwanDataClass connectionClass = profile.WwanConnectionProfileDetails.GetCurrentDataClass();                  switch (connectionClass)                  {                      //2G-equivalent                      case WwanDataClass.Edge:                      case WwanDataClass.Gprs:                          return 2;                        //3G-equivalent                      case WwanDataClass.Cdma1xEvdo:                      case WwanDataClass.Cdma1xEvdoRevA:                      case WwanDataClass.Cdma1xEvdoRevB:                      case WwanDataClass.Cdma1xEvdv:                      case WwanDataClass.Cdma1xRtt:                      case WwanDataClass.Cdma3xRtt:                      case WwanDataClass.CdmaUmb:                      case WwanDataClass.Umts:                      case WwanDataClass.Hsdpa:                      case WwanDataClass.Hsupa:                          return 3;                        //4G-equivalent                      case WwanDataClass.LteAdvanced:                          return 4;                        //not connected                      case WwanDataClass.None:                          return 0;                        //unknown                      case WwanDataClass.Custom:                      default:                          return 0;                  }              }              else if (profile.IsWlanConnectionProfile)              {                  return 100;              }
Magic Number,DeviceInfo,DeviceProperties,C:\repos\XForms_Xamarin-Forms-Labs\src\Platform\XLabs.Platform.WinRT.Shared\Device\DeviceProperties.cs,Resolve,The following statement contains a magic number: if (!IsReady)              {                  _numberOfAsyncOperationsToComplete = 4; // This must match the number of async method calls!                  _numberOfAsyncOperationsCompleted = 0;                    ResolveDeviceId();                  ResolveDeviceInformation(); // ResolveCameraInfoAsync() depends on this to be run first!                  ResolveCameraInfoAsync();                  ResolveMemoryInfo();                  ResolvePowerInfo();                  ResolveProcessorCoreCount();                  ResolveScreenResolutionAsync();                  ResolveSDCardInfoAsync();                  //ResolveSensorCoreAvailabilityAsync();                  ResolveSensorInfo();                  ResolveUiThemeAsync();                  ResolveVibrationDeviceInfo();              }              else              {                  // Refreshing dynamic properties                  Debug.WriteLine(DebugTag + "Resolve(): Already resolved once' refreshing dynamic properties...");                  IsReady = false;                    if (IsReadyChanged != null)                  {                      IsReadyChanged(this' IsReady);                  }                    _numberOfAsyncOperationsToComplete = 2; // This must match the number of async method calls!                  _numberOfAsyncOperationsCompleted = 0;                    ResolveMemoryInfo();                  ResolvePowerInfo();                  ResolveSDCardInfoAsync();                  ResolveUiThemeAsync();              }
Magic Number,DeviceInfo,DeviceProperties,C:\repos\XForms_Xamarin-Forms-Labs\src\Platform\XLabs.Platform.WinRT.Shared\Device\DeviceProperties.cs,Resolve,The following statement contains a magic number: if (!IsReady)              {                  _numberOfAsyncOperationsToComplete = 4; // This must match the number of async method calls!                  _numberOfAsyncOperationsCompleted = 0;                    ResolveDeviceId();                  ResolveDeviceInformation(); // ResolveCameraInfoAsync() depends on this to be run first!                  ResolveCameraInfoAsync();                  ResolveMemoryInfo();                  ResolvePowerInfo();                  ResolveProcessorCoreCount();                  ResolveScreenResolutionAsync();                  ResolveSDCardInfoAsync();                  //ResolveSensorCoreAvailabilityAsync();                  ResolveSensorInfo();                  ResolveUiThemeAsync();                  ResolveVibrationDeviceInfo();              }              else              {                  // Refreshing dynamic properties                  Debug.WriteLine(DebugTag + "Resolve(): Already resolved once' refreshing dynamic properties...");                  IsReady = false;                    if (IsReadyChanged != null)                  {                      IsReadyChanged(this' IsReady);                  }                    _numberOfAsyncOperationsToComplete = 2; // This must match the number of async method calls!                  _numberOfAsyncOperationsCompleted = 0;                    ResolveMemoryInfo();                  ResolvePowerInfo();                  ResolveSDCardInfoAsync();                  ResolveUiThemeAsync();              }
Magic Number,DeviceInfo,DeviceProperties,C:\repos\XForms_Xamarin-Forms-Labs\src\Platform\XLabs.Platform.WinRT.Shared\Device\DeviceProperties.cs,ResolveScreenResolutionAsync,The following statement contains a magic number: if (screenResolutionY < 960)              {                  ScreenResolution = Resolutions.WVGA;              }              else if (screenResolutionY < 1280)              {                  ScreenResolution = Resolutions.qHD;              }              else if (screenResolutionY < 1920)              {                  if (screenResolutionX < 768)                  {                      ScreenResolution = Resolutions.HD720;                  }                  else                  {                      ScreenResolution = Resolutions.WXGA;                  }              }              else if (screenResolutionY > 1280)              {                  ScreenResolution = Resolutions.HD1080;              }
Magic Number,DeviceInfo,DeviceProperties,C:\repos\XForms_Xamarin-Forms-Labs\src\Platform\XLabs.Platform.WinRT.Shared\Device\DeviceProperties.cs,ResolveScreenResolutionAsync,The following statement contains a magic number: if (screenResolutionY < 960)              {                  ScreenResolution = Resolutions.WVGA;              }              else if (screenResolutionY < 1280)              {                  ScreenResolution = Resolutions.qHD;              }              else if (screenResolutionY < 1920)              {                  if (screenResolutionX < 768)                  {                      ScreenResolution = Resolutions.HD720;                  }                  else                  {                      ScreenResolution = Resolutions.WXGA;                  }              }              else if (screenResolutionY > 1280)              {                  ScreenResolution = Resolutions.HD1080;              }
Magic Number,DeviceInfo,DeviceProperties,C:\repos\XForms_Xamarin-Forms-Labs\src\Platform\XLabs.Platform.WinRT.Shared\Device\DeviceProperties.cs,ResolveScreenResolutionAsync,The following statement contains a magic number: if (screenResolutionY < 960)              {                  ScreenResolution = Resolutions.WVGA;              }              else if (screenResolutionY < 1280)              {                  ScreenResolution = Resolutions.qHD;              }              else if (screenResolutionY < 1920)              {                  if (screenResolutionX < 768)                  {                      ScreenResolution = Resolutions.HD720;                  }                  else                  {                      ScreenResolution = Resolutions.WXGA;                  }              }              else if (screenResolutionY > 1280)              {                  ScreenResolution = Resolutions.HD1080;              }
Magic Number,DeviceInfo,DeviceProperties,C:\repos\XForms_Xamarin-Forms-Labs\src\Platform\XLabs.Platform.WinRT.Shared\Device\DeviceProperties.cs,ResolveScreenResolutionAsync,The following statement contains a magic number: if (screenResolutionY < 960)              {                  ScreenResolution = Resolutions.WVGA;              }              else if (screenResolutionY < 1280)              {                  ScreenResolution = Resolutions.qHD;              }              else if (screenResolutionY < 1920)              {                  if (screenResolutionX < 768)                  {                      ScreenResolution = Resolutions.HD720;                  }                  else                  {                      ScreenResolution = Resolutions.WXGA;                  }              }              else if (screenResolutionY > 1280)              {                  ScreenResolution = Resolutions.HD1080;              }
Magic Number,DeviceInfo,DeviceProperties,C:\repos\XForms_Xamarin-Forms-Labs\src\Platform\XLabs.Platform.WinRT.Shared\Device\DeviceProperties.cs,ResolveScreenResolutionAsync,The following statement contains a magic number: if (screenResolutionY < 960)              {                  ScreenResolution = Resolutions.WVGA;              }              else if (screenResolutionY < 1280)              {                  ScreenResolution = Resolutions.qHD;              }              else if (screenResolutionY < 1920)              {                  if (screenResolutionX < 768)                  {                      ScreenResolution = Resolutions.HD720;                  }                  else                  {                      ScreenResolution = Resolutions.WXGA;                  }              }              else if (screenResolutionY > 1280)              {                  ScreenResolution = Resolutions.HD1080;              }
Magic Number,DeviceInfo,DeviceProperties,C:\repos\XForms_Xamarin-Forms-Labs\src\Platform\XLabs.Platform.WinRT.Shared\Device\DeviceProperties.cs,ResolveScreenResolutionAsync,The following statement contains a magic number: if (DisplayInfo.RawDpiX > 0 && DisplayInfo.RawDpiY > 0)              {                  // Calculate screen diagonal in inches.                  DisplaySizeInInches =                      Math.Sqrt(Math.Pow(ScreenResolutionSize.Width / DisplayInfo.RawDpiX' 2) +                                Math.Pow(ScreenResolutionSize.Height / DisplayInfo.RawDpiY' 2));                  DisplaySizeInInches = Math.Round(DisplaySizeInInches' 1); // One decimal is enough              }
Magic Number,DeviceInfo,DeviceProperties,C:\repos\XForms_Xamarin-Forms-Labs\src\Platform\XLabs.Platform.WinRT.Shared\Device\DeviceProperties.cs,ResolveScreenResolutionAsync,The following statement contains a magic number: if (DisplayInfo.RawDpiX > 0 && DisplayInfo.RawDpiY > 0)              {                  // Calculate screen diagonal in inches.                  DisplaySizeInInches =                      Math.Sqrt(Math.Pow(ScreenResolutionSize.Width / DisplayInfo.RawDpiX' 2) +                                Math.Pow(ScreenResolutionSize.Height / DisplayInfo.RawDpiY' 2));                  DisplaySizeInInches = Math.Round(DisplaySizeInInches' 1); // One decimal is enough              }
Magic Number,DeviceInfo,DeviceProperties,C:\repos\XForms_Xamarin-Forms-Labs\src\Platform\XLabs.Platform.WinRT.Shared\Device\DeviceProperties.cs,TransformBytes,The following statement contains a magic number: switch (toUnit)              {                  case UnitPrefixes.Kilo:                      denominator = 1024;                      break;                  case UnitPrefixes.Mega:                      denominator = 1024 * 1024;                      break;                  case UnitPrefixes.Giga:                      denominator = Math.Pow(1024' 3);                      break;                  default:                      break;              }
Magic Number,DeviceInfo,DeviceProperties,C:\repos\XForms_Xamarin-Forms-Labs\src\Platform\XLabs.Platform.WinRT.Shared\Device\DeviceProperties.cs,TransformBytes,The following statement contains a magic number: switch (toUnit)              {                  case UnitPrefixes.Kilo:                      denominator = 1024;                      break;                  case UnitPrefixes.Mega:                      denominator = 1024 * 1024;                      break;                  case UnitPrefixes.Giga:                      denominator = Math.Pow(1024' 3);                      break;                  default:                      break;              }
Magic Number,DeviceInfo,DeviceProperties,C:\repos\XForms_Xamarin-Forms-Labs\src\Platform\XLabs.Platform.WinRT.Shared\Device\DeviceProperties.cs,TransformBytes,The following statement contains a magic number: switch (toUnit)              {                  case UnitPrefixes.Kilo:                      denominator = 1024;                      break;                  case UnitPrefixes.Mega:                      denominator = 1024 * 1024;                      break;                  case UnitPrefixes.Giga:                      denominator = Math.Pow(1024' 3);                      break;                  default:                      break;              }
Magic Number,DeviceInfo,DeviceProperties,C:\repos\XForms_Xamarin-Forms-Labs\src\Platform\XLabs.Platform.WinRT.Shared\Device\DeviceProperties.cs,TransformBytes,The following statement contains a magic number: switch (toUnit)              {                  case UnitPrefixes.Kilo:                      denominator = 1024;                      break;                  case UnitPrefixes.Mega:                      denominator = 1024 * 1024;                      break;                  case UnitPrefixes.Giga:                      denominator = Math.Pow(1024' 3);                      break;                  default:                      break;              }
Magic Number,DeviceInfo,DeviceProperties,C:\repos\XForms_Xamarin-Forms-Labs\src\Platform\XLabs.Platform.WinRT.Shared\Device\DeviceProperties.cs,TransformBytes,The following statement contains a magic number: switch (toUnit)              {                  case UnitPrefixes.Kilo:                      denominator = 1024;                      break;                  case UnitPrefixes.Mega:                      denominator = 1024 * 1024;                      break;                  case UnitPrefixes.Giga:                      denominator = Math.Pow(1024' 3);                      break;                  default:                      break;              }
Magic Number,XLabs.Platform,ColorExtensions,C:\repos\XForms_Xamarin-Forms-Labs\src\Platform\XLabs.Platform.WinRT.Shared\Extensions\ColorExtensions.cs,ToMediaColor,The following statement contains a magic number: return Color.FromArgb(                  (byte)(color.A * 255.0)'                  (byte)(color.R * 255.0)'                  (byte)(color.G * 255.0)'                  (byte)(color.B * 255.0));
Magic Number,XLabs.Platform,ColorExtensions,C:\repos\XForms_Xamarin-Forms-Labs\src\Platform\XLabs.Platform.WinRT.Shared\Extensions\ColorExtensions.cs,ToMediaColor,The following statement contains a magic number: return Color.FromArgb(                  (byte)(color.A * 255.0)'                  (byte)(color.R * 255.0)'                  (byte)(color.G * 255.0)'                  (byte)(color.B * 255.0));
Magic Number,XLabs.Platform,ColorExtensions,C:\repos\XForms_Xamarin-Forms-Labs\src\Platform\XLabs.Platform.WinRT.Shared\Extensions\ColorExtensions.cs,ToMediaColor,The following statement contains a magic number: return Color.FromArgb(                  (byte)(color.A * 255.0)'                  (byte)(color.R * 255.0)'                  (byte)(color.G * 255.0)'                  (byte)(color.B * 255.0));
Magic Number,XLabs.Platform,ColorExtensions,C:\repos\XForms_Xamarin-Forms-Labs\src\Platform\XLabs.Platform.WinRT.Shared\Extensions\ColorExtensions.cs,ToMediaColor,The following statement contains a magic number: return Color.FromArgb(                  (byte)(color.A * 255.0)'                  (byte)(color.R * 255.0)'                  (byte)(color.G * 255.0)'                  (byte)(color.B * 255.0));
Missing Default,XLabs.Platform.Services.Geolocation,Geolocator,C:\repos\XForms_Xamarin-Forms-Labs\src\Platform\XLabs.Platform.WinRT.Phone\Services\Geolocation\Geolocator.cs,LocatorStatusChanged,The following switch statement is missing a default case: switch (args.Status)  			{  				case PositionStatus.Disabled:  					PositionError.TryInvoke(sender' new PositionErrorEventArgs(GeolocationError.Unauthorized));  					break;  				case PositionStatus.Initializing:  					break;  				case PositionStatus.NoData:  					PositionError.TryInvoke(sender' new PositionErrorEventArgs(GeolocationError.PositionUnavailable));  					break;  				case PositionStatus.NotInitialized:  					IsListening = false;  					break;  				case PositionStatus.Ready:  					IsListening = true;  					break;  			}
Missing Default,XLabs.Platform.Services,Network,C:\repos\XForms_Xamarin-Forms-Labs\src\Platform\XLabs.Platform.WinRT.Phone\Services\Network.cs,InternetConnectionStatus,The following switch statement is missing a default case: switch (connectionType)                  {                      case 2:                      case 3:                      case 4:                          return NetworkStatus.ReachableViaCarrierDataNetwork;                      case 100:                          return NetworkStatus.ReachableViaWiFiNetwork;                      case 0:                          return NetworkStatus.ReachableViaUnknownNetwork;                  }
