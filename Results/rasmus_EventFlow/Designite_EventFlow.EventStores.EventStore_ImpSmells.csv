Implementation smell,Namespace,Class,File,Method,Description
Long Statement,EventFlow.EventStores.EventStore,EventStoreEventPersistence,C:\repos\rasmus_EventFlow\Source\EventFlow.EventStores.EventStore\EventStoreEventPersistence.cs,CommitEventsAsync,The length of the statement  "                        var eventType = string.Format("{0}.{1}.{2}"' e.Metadata[MetadataKeys.AggregateName]' e.Metadata.EventName' e.Metadata.EventVersion); " is 132.
Magic Number,EventFlow.EventStores.EventStore,EventStoreEventPersistence,C:\repos\rasmus_EventFlow\Source\EventFlow.EventStores.EventStore\EventStoreEventPersistence.cs,ParsePosition,The following statement contains a magic number: if (parts.Length != 2)              {                  throw new ArgumentException(string.Format(                      "Unknown structure for global position '{0}'. Expected it to be empty or in the form 'L-L'"'                      globalPosition.Value));              }
Magic Number,EventFlow.EventStores.EventStore,EventStoreEventPersistence,C:\repos\rasmus_EventFlow\Source\EventFlow.EventStores.EventStore\EventStoreEventPersistence.cs,CommitEventsAsync,The following statement contains a magic number: var expectedVersion = Math.Max(serializedEvents.Min(e => e.AggregateSequenceNumber) - 2' ExpectedVersion.NoStream);
Magic Number,EventFlow.EventStores.EventStore,EventStoreEventPersistence,C:\repos\rasmus_EventFlow\Source\EventFlow.EventStores.EventStore\EventStoreEventPersistence.cs,LoadCommittedEventsAsync,The following statement contains a magic number: do              {                  currentSlice = await _connection.ReadStreamEventsForwardAsync(                      id.Value'                      nextSliceStart'                      200'                      false)                      .ConfigureAwait(false);                  nextSliceStart = (int)currentSlice.NextEventNumber;                  streamEvents.AddRange(currentSlice.Events);                }              while (!currentSlice.IsEndOfStream);
