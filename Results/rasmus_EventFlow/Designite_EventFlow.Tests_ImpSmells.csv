Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,EventFlow.Tests.IntegrationTests,Step<T>,C:\research\architectureSmells\repos\rasmus_EventFlow\Source\EventFlow.Tests\IntegrationTests\CancellationTests.cs,Step,The method has 5 parameters. Parameters: boundary' completionSource' validationFactory' validateHasRun' validateHasNotRun
Long Parameter List,EventFlow.Tests.IntegrationTests.Sagas,InMemorySagaStore,C:\research\architectureSmells\repos\rasmus_EventFlow\Source\EventFlow.Tests\IntegrationTests\Sagas\AlternativeSagaStoreTestClasses.cs,UpdateAsync,The method has 5 parameters. Parameters: sagaId' sagaType' sourceId' updateSaga' cancellationToken
Long Parameter List,EventFlow.Tests.UnitTests.Configuration.Serialization,MyClassConverter,C:\research\architectureSmells\repos\rasmus_EventFlow\Source\EventFlow.Tests\UnitTests\Configuration\Serialization\JsonOptionsTests.cs,ReadJson,The method has 5 parameters. Parameters: reader' objectType' existingValue' hasExistingValue' serializer
Long Parameter List,EventFlow.Tests.UnitTests.Extensions,MyClassConverter,C:\research\architectureSmells\repos\rasmus_EventFlow\Source\EventFlow.Tests\UnitTests\Extensions\JsonSerializerExtensionTests.cs,ReadJson,The method has 5 parameters. Parameters: reader' objectType' existingValue' hasExistingValue' serializer
Long Identifier,EventFlow.Tests.IntegrationTests.Aggregates,AggregateFactoryTests,C:\research\architectureSmells\repos\rasmus_EventFlow\Source\EventFlow.Tests\IntegrationTests\Aggregates\AggregateFactoryTests.cs,CreatesNewAggregateWithIdAndInterfaceParameters,The length of the parameter aggregateWithIdAndInterfaceParameters is 37.
Long Identifier,EventFlow.Tests.IntegrationTests.Aggregates,AggregateFactoryTests,C:\research\architectureSmells\repos\rasmus_EventFlow\Source\EventFlow.Tests\IntegrationTests\Aggregates\AggregateFactoryTests.cs,CreatesNewAggregateWithIdAndTypeParameters,The length of the parameter aggregateWithIdAndTypeParameters is 32.
Long Identifier,EventFlow.Tests.UnitTests.Core.RetryStrategies,OptimisticConcurrencyRetryStrategyTests,C:\research\architectureSmells\repos\rasmus_EventFlow\Source\EventFlow.Tests\UnitTests\Core\RetryStrategies\OptimisticConcurrencyRetryStrategyTests.cs,ShouldThisBeRetried_OptimisticConcurrencyException_ShouldBeRetired,The length of the parameter optimisticConcurrencyException is 30.
Long Identifier,EventFlow.Tests.UnitTests.ReadStores,ReadModelDomainEventApplierTests,C:\research\architectureSmells\repos\rasmus_EventFlow\Source\EventFlow.Tests\UnitTests\ReadStores\ReadModelDomainEventApplierTests.cs,DifferentReadModelsCanBeUpdated,The length of the parameter domainErrorAfterFirstReadModel is 30.
Long Identifier,EventFlow.Tests.UnitTests.ReadStores,ReadModelFactoryTests,C:\research\architectureSmells\repos\rasmus_EventFlow\Source\EventFlow.Tests\UnitTests\ReadStores\ReadModelFactoryTests.cs,ReadModelFactoryCanBeConfigured,The length of the parameter expectedMagicNumberForReadModelA is 32.
Long Identifier,EventFlow.Tests.UnitTests.ReadStores,ReadModelFactoryTests,C:\research\architectureSmells\repos\rasmus_EventFlow\Source\EventFlow.Tests\UnitTests\ReadStores\ReadModelFactoryTests.cs,ReadModelFactoryCanBeConfigured,The length of the parameter expectedMagicNumberForReadModelB is 32.
Long Identifier,EventFlow.Tests.UnitTests.ReadStores,ReadModelFactoryTests,C:\research\architectureSmells\repos\rasmus_EventFlow\Source\EventFlow.Tests\UnitTests\ReadStores\ReadModelFactoryTests.cs,ReadModelFactoryCanBeConfigured,The length of the parameter expectedMagicNumberForReadModelC is 32.
Long Identifier,EventFlow.Tests.UnitTests.ReadStores,ReadStoreManagerTestSuite<T>,C:\research\architectureSmells\repos\rasmus_EventFlow\Source\EventFlow.Tests\UnitTests\ReadStores\ReadStoreManagerTestSuite.cs,Arrange_ReadModelStore_UpdateAsync,The length of the parameter resultingReadModelUpdateResults is 31.
Long Statement,EventFlow.Tests.Exploration,CustomAggregateIdExplorationTest,C:\research\architectureSmells\repos\rasmus_EventFlow\Source\EventFlow.Tests\Exploration\CustomAggregateIdExplorationTest.cs,AggregatesCanHaveCustomImplementedIdentity,The length of the statement  "               var customAggregate = await aggregateStore.LoadAsync<CustomAggregate' CustomId>(customId' CancellationToken.None).ConfigureAwait(false);" is 136.
Long Statement,EventFlow.Tests.IntegrationTests.Aggregates,AggregateFactoryTests,C:\research\architectureSmells\repos\rasmus_EventFlow\Source\EventFlow.Tests\IntegrationTests\Aggregates\AggregateFactoryTests.cs,CreatesNewAggregateWithIdAndInterfaceParameters,The length of the statement  "                var aggregateWithIdAndInterfaceParameters = await sut.CreateNewAggregateAsync<TestAggregateWithResolver' ThingyId>(ThingyId.New).ConfigureAwait(false);" is 151.
Long Statement,EventFlow.Tests.IntegrationTests.Aggregates,AggregateFactoryTests,C:\research\architectureSmells\repos\rasmus_EventFlow\Source\EventFlow.Tests\IntegrationTests\Aggregates\AggregateFactoryTests.cs,CreatesNewAggregateWithIdAndTypeParameters,The length of the statement  "                var aggregateWithIdAndTypeParameters = await sut.CreateNewAggregateAsync<TestAggregateWithPinger' ThingyId>(ThingyId.New).ConfigureAwait(false);" is 144.
Long Statement,EventFlow.Tests.IntegrationTests,BackwardCompatibilityTests,C:\research\architectureSmells\repos\rasmus_EventFlow\Source\EventFlow.Tests\IntegrationTests\BackwardCompatibilityTests.cs,SetUp,The length of the statement  "            var filesEventStoreDirectory = Path.GetFullPath(Path.Combine(codeBase' ".."' ".."' ".."' "TestData"' "FilesEventStore"));" is 121.
Long Statement,EventFlow.Tests.IntegrationTests,BasicTests,C:\research\architectureSmells\repos\rasmus_EventFlow\Source\EventFlow.Tests\IntegrationTests\BasicTests.cs,BasicFlow,The length of the statement  "                await commandBus.PublishAsync(new ThingyDomainErrorAfterFirstCommand(id)' CancellationToken.None).ConfigureAwait(false);" is 120.
Long Statement,EventFlow.Tests.IntegrationTests,BasicTests,C:\research\architectureSmells\repos\rasmus_EventFlow\Source\EventFlow.Tests\IntegrationTests\BasicTests.cs,BasicFlow,The length of the statement  "                var testAggregate = await eventStore.LoadAsync<ThingyAggregate' ThingyId>(id' CancellationToken.None).ConfigureAwait(false);" is 124.
Long Statement,EventFlow.Tests.IntegrationTests,ResolverTests,C:\research\architectureSmells\repos\rasmus_EventFlow\Source\EventFlow.Tests\IntegrationTests\ResolverTests.cs,ResolverAggregatesFactoryCanResolve,The length of the statement  "                var serviceDependentAggregate = await aggregateFactory.CreateNewAggregateAsync<ServiceDependentAggregate' ThingyId>(ThingyId.New).ConfigureAwait(false);" is 152.
Long Statement,EventFlow.Tests.IntegrationTests.ReadStores.QueryHandlers,InMemoryThingyGetMessagesQueryHandler,C:\research\architectureSmells\repos\rasmus_EventFlow\Source\EventFlow.Tests\IntegrationTests\ReadStores\QueryHandlers\InMemoryThingyGetMessagesQueryHandler.cs,ExecuteQueryAsync,The length of the statement  "            var readModels = await _readStore.FindAsync(rm => rm.ThingyId == query.ThingyId' cancellationToken).ConfigureAwait(false);" is 122.
Long Statement,EventFlow.Tests.IntegrationTests.ReadStores.QueryHandlers,InMemoryThingyGetQueryHandler,C:\research\architectureSmells\repos\rasmus_EventFlow\Source\EventFlow.Tests\IntegrationTests\ReadStores\QueryHandlers\InMemoryThingyGetQueryHandler.cs,ExecuteQueryAsync,The length of the statement  "            var readModels = await _readStore.FindAsync(rm => rm.ThingyId == query.ThingyId' cancellationToken).ConfigureAwait(false);" is 122.
Long Statement,EventFlow.Tests.IntegrationTests.Sagas,AggregateSagaTests,C:\research\architectureSmells\repos\rasmus_EventFlow\Source\EventFlow.Tests\IntegrationTests\Sagas\AggregateSagaTests.cs,PublishingCompleteEventWithoutStartingSagaLeavesItNew,The length of the statement  "            await CommandBus.PublishAsync(new ThingyRequestSagaCompleteCommand(thingyId)' CancellationToken.None).ConfigureAwait(false);" is 124.
Long Statement,EventFlow.Tests.IntegrationTests.Sagas,AggregateSagaTests,C:\research\architectureSmells\repos\rasmus_EventFlow\Source\EventFlow.Tests\IntegrationTests\Sagas\AggregateSagaTests.cs,PublishingStartTiggerEventStartsSaga,The length of the statement  "            await CommandBus.PublishAsync(new ThingyRequestSagaStartCommand(thingyId)' CancellationToken.None).ConfigureAwait(false);" is 121.
Long Statement,EventFlow.Tests.IntegrationTests.Sagas,AggregateSagaTests,C:\research\architectureSmells\repos\rasmus_EventFlow\Source\EventFlow.Tests\IntegrationTests\Sagas\AggregateSagaTests.cs,PublishingStartAndCompleteTiggerEventsCompletesSaga,The length of the statement  "            await CommandBus.PublishAsync(new ThingyRequestSagaStartCommand(thingyId)' CancellationToken.None).ConfigureAwait(false);" is 121.
Long Statement,EventFlow.Tests.IntegrationTests.Sagas,AggregateSagaTests,C:\research\architectureSmells\repos\rasmus_EventFlow\Source\EventFlow.Tests\IntegrationTests\Sagas\AggregateSagaTests.cs,PublishingStartAndCompleteTiggerEventsCompletesSaga,The length of the statement  "            await CommandBus.PublishAsync(new ThingyRequestSagaCompleteCommand(thingyId)' CancellationToken.None).ConfigureAwait(false);" is 124.
Long Statement,EventFlow.Tests.IntegrationTests.Sagas,AggregateSagaTests,C:\research\architectureSmells\repos\rasmus_EventFlow\Source\EventFlow.Tests\IntegrationTests\Sagas\AggregateSagaTests.cs,AggregateSagaEventsArePublishedToSubscribers,The length of the statement  "            await CommandBus.PublishAsync(new ThingyRequestSagaStartCommand(thingyId)' CancellationToken.None).ConfigureAwait(false);" is 121.
Long Statement,EventFlow.Tests.IntegrationTests.Sagas,AggregateSagaTests,C:\research\architectureSmells\repos\rasmus_EventFlow\Source\EventFlow.Tests\IntegrationTests\Sagas\AggregateSagaTests.cs,AggregateSagaEventsArePublishedToSubscribers,The length of the statement  "                s => s.HandleAsync(It.IsAny<IDomainEvent<ThingySaga' ThingySagaId' ThingySagaStartedEvent>>()' It.IsAny<CancellationToken>())'" is 126.
Long Statement,EventFlow.Tests.IntegrationTests.Sagas,AggregateSagaTests,C:\research\architectureSmells\repos\rasmus_EventFlow\Source\EventFlow.Tests\IntegrationTests\Sagas\AggregateSagaTests.cs,PublishingStartAndCompleteWithPingsResultInCorrectMessages,The length of the statement  "            await CommandBus.PublishAsync(new ThingyRequestSagaStartCommand(thingyId)' CancellationToken.None).ConfigureAwait(false);" is 121.
Long Statement,EventFlow.Tests.IntegrationTests.Sagas,AggregateSagaTests,C:\research\architectureSmells\repos\rasmus_EventFlow\Source\EventFlow.Tests\IntegrationTests\Sagas\AggregateSagaTests.cs,PublishingStartAndCompleteWithPingsResultInCorrectMessages,The length of the statement  "            await CommandBus.PublishAsync(new ThingyRequestSagaCompleteCommand(thingyId)' CancellationToken.None).ConfigureAwait(false);" is 124.
Long Statement,EventFlow.Tests.IntegrationTests.Sagas,AggregateSagaTests,C:\research\architectureSmells\repos\rasmus_EventFlow\Source\EventFlow.Tests\IntegrationTests\Sagas\AggregateSagaTests.cs,CreateRootResolver,The length of the statement  "                .Setup(s => s.HandleAsync(It.IsAny<IDomainEvent<ThingySaga' ThingySagaId' ThingySagaStartedEvent>>()' It.IsAny<CancellationToken>()))" is 133.
Long Statement,EventFlow.Tests.IntegrationTests.Sagas,AlternativeSagaStoreTests,C:\research\architectureSmells\repos\rasmus_EventFlow\Source\EventFlow.Tests\IntegrationTests\Sagas\AlternativeSagaStoreTests.cs,StartedByCorrectly,The length of the statement  "            var testAggregate = await _aggregateStore.LoadAsync<AlternativeSagaStoreTestClasses.SagaTestAggregate' AlternativeSagaStoreTestClasses.SagaTestAggregateId>(aggregateId' CancellationToken.None);" is 193.
Long Statement,EventFlow.Tests.IntegrationTests.Sagas,AlternativeSagaStoreTests,C:\research\architectureSmells\repos\rasmus_EventFlow\Source\EventFlow.Tests\IntegrationTests\Sagas\AlternativeSagaStoreTests.cs,NotStarted,The length of the statement  "            var testAggregate = await _aggregateStore.LoadAsync<AlternativeSagaStoreTestClasses.SagaTestAggregate' AlternativeSagaStoreTestClasses.SagaTestAggregateId>(aggregateId' CancellationToken.None);" is 193.
Long Statement,EventFlow.Tests.IntegrationTests.Sagas,AlternativeSagaStoreTests,C:\research\architectureSmells\repos\rasmus_EventFlow\Source\EventFlow.Tests\IntegrationTests\Sagas\AlternativeSagaStoreTests.cs,SagaLocatorReturningNullDoesntThrow,The length of the statement  "            Action action = () => _commandBus.Publish(new AlternativeSagaStoreTestClasses.SagaTestBCommand(aggregateId)' CancellationToken.None);" is 133.
Long Statement,EventFlow.Tests.UnitTests.Aggregates,AggregateFactoryTests,C:\research\architectureSmells\repos\rasmus_EventFlow\Source\EventFlow.Tests\UnitTests\Aggregates\AggregateFactoryTests.cs,CanCreateIdOnlyAggregateRootAsync,The length of the statement  "            var idOnlyAggregateRoot = await Sut.CreateNewAggregateAsync<IdOnlyAggregateRoot' AggregateId>(aggregateId).ConfigureAwait(false);" is 129.
Long Statement,EventFlow.Tests.UnitTests.Aggregates,AggregateFactoryTests,C:\research\architectureSmells\repos\rasmus_EventFlow\Source\EventFlow.Tests\UnitTests\Aggregates\AggregateFactoryTests.cs,CanCreateAggregateWithServices,The length of the statement  "            var aggregateWithServices = await Sut.CreateNewAggregateAsync<AggregateWithServices' AggregateId>(aggregateId).ConfigureAwait(false);" is 133.
Long Statement,EventFlow.Tests.UnitTests,CommandBusTests,C:\research\architectureSmells\repos\rasmus_EventFlow\Source\EventFlow.Tests\UnitTests\CommandBusTests.cs,CommandHandlerIsInvoked,The length of the statement  "            commandHandler.Verify(h => h.ExecuteCommandAsync(It.IsAny<ThingyAggregate>()' It.IsAny<ThingyPingCommand>()' It.IsAny<CancellationToken>())' Times.Once);" is 153.
Long Statement,EventFlow.Tests.UnitTests,CommandBusTests,C:\research\architectureSmells\repos\rasmus_EventFlow\Source\EventFlow.Tests\UnitTests\CommandBusTests.cs,ArrangeWorkingEventStore,The length of the statement  "                .Callback<ThingyId' ISourceId' Func<ThingyAggregate' CancellationToken' Task<TExecutionResult>>' CancellationToken>((i' s' f' c) => f(A<ThingyAggregate>()' c))" is 159.
Long Statement,EventFlow.Tests.UnitTests,CommandBusTests,C:\research\architectureSmells\repos\rasmus_EventFlow\Source\EventFlow.Tests\UnitTests\CommandBusTests.cs,ArrangeWorkingEventStore,The length of the statement  "                .Returns(() => Task.FromResult((IAggregateUpdateResult<TExecutionResult>)new AggregateStore.AggregateUpdateResult<TExecutionResult>(default(TExecutionResult)' Many<IDomainEvent<ThingyAggregate' ThingyId>>())));" is 210.
Long Statement,EventFlow.Tests.UnitTests.Core,ReflectionHelperTests,C:\research\architectureSmells\repos\rasmus_EventFlow\Source\EventFlow.Tests\UnitTests\Core\ReflectionHelperTests.cs,CompileMethodInvocation,The length of the statement  "            var caller = ReflectionHelper.CompileMethodInvocation<Func<Calculator' int' int' int>>(typeof(Calculator)' "Add"' typeof(int)' typeof(int));" is 140.
Long Statement,EventFlow.Tests.UnitTests.Core,ReflectionHelperTests,C:\research\architectureSmells\repos\rasmus_EventFlow\Source\EventFlow.Tests\UnitTests\Core\ReflectionHelperTests.cs,CompileMethodInvocation_CanUpcast,The length of the statement  "            var caller = ReflectionHelper.CompileMethodInvocation<Func<Calculator' INumber' INumber' INumber>>(typeof(Calculator)' "Add"' typeof(Number)' typeof(Number));" is 158.
Long Statement,EventFlow.Tests.UnitTests.Core,ReflectionHelperTests,C:\research\architectureSmells\repos\rasmus_EventFlow\Source\EventFlow.Tests\UnitTests\Core\ReflectionHelperTests.cs,CompileMethodInvocation_CanDoBothUpcastAndPass,The length of the statement  "            var caller = ReflectionHelper.CompileMethodInvocation<Func<Calculator' INumber' int' INumber>>(typeof(Calculator)' "Add"' typeof(Number)' typeof(int));" is 151.
Long Statement,EventFlow.Tests.UnitTests.Core,TransientFaultHandlerTests,C:\research\architectureSmells\repos\rasmus_EventFlow\Source\EventFlow.Tests\UnitTests\Core\TransientFaultHandlerTests.cs,WorkingActionsSucceed,The length of the statement  "            _retryStrategyMock.Verify(rs => rs.ShouldThisBeRetried(It.IsAny<Exception>()' It.IsAny<TimeSpan>()' It.IsAny<int>())' Times.Never);" is 131.
Long Statement,EventFlow.Tests.UnitTests.Core,TransientFaultHandlerTests,C:\research\architectureSmells\repos\rasmus_EventFlow\Source\EventFlow.Tests\UnitTests\Core\TransientFaultHandlerTests.cs,ArrangeRetryStrategy,The length of the statement  "                .Setup(rs => rs.ShouldThisBeRetried(It.IsAny<Exception>()' It.IsAny<TimeSpan>()' It.Is<int>(i => i != numberOfRetries)))" is 120.
Long Statement,EventFlow.Tests.UnitTests.Core,TransientFaultHandlerTests,C:\research\architectureSmells\repos\rasmus_EventFlow\Source\EventFlow.Tests\UnitTests\Core\TransientFaultHandlerTests.cs,ArrangeRetryStrategy,The length of the statement  "                .Setup(rs => rs.ShouldThisBeRetried(It.IsAny<Exception>()' It.IsAny<TimeSpan>()' It.Is<int>(i => i == numberOfRetries)))" is 120.
Long Statement,EventFlow.Tests.UnitTests.ReadStores,AggregateReadStoreManagerTests,C:\research\architectureSmells\repos\rasmus_EventFlow\Source\EventFlow.Tests\UnitTests\ReadStores\AggregateReadStoreManagerTests.cs,ThrowsIfReadModelSubscribesNoEvents,The length of the statement  "            a.Should().Throw<TypeInitializationException>().WithInnerException<Exception>().WithMessage("*does not implement any*");" is 120.
Long Statement,EventFlow.Tests.UnitTests.ReadStores,MultipleAggregateReadStoreManagerTests,C:\research\architectureSmells\repos\rasmus_EventFlow\Source\EventFlow.Tests\UnitTests\ReadStores\MultipleAggregateReadStoreManagerTests.cs,IfNoReadModelIdsAreReturned_ThenDontInvokeTheReadModelStore,The length of the statement  "                    It.IsAny<Func<IReadModelContext' IReadOnlyCollection<IDomainEvent>' ReadModelEnvelope<TestReadModel>' CancellationToken' Task<ReadModelUpdateResult<TestReadModel>>>>()'" is 168.
Long Statement,EventFlow.Tests.UnitTests.ReadStores,ReadModelDomainEventApplierTests,C:\research\architectureSmells\repos\rasmus_EventFlow\Source\EventFlow.Tests\UnitTests\ReadStores\ReadModelDomainEventApplierTests.cs,ReadModelDoesNotReceiveOtherEvents,The length of the statement  "            await Sut.UpdateReadModelAsync(readModel' events' A<IReadModelContext>()' CancellationToken.None).ConfigureAwait(false);" is 120.
Long Statement,EventFlow.Tests.UnitTests.ReadStores,ReadModelFactoryTests,C:\research\architectureSmells\repos\rasmus_EventFlow\Source\EventFlow.Tests\UnitTests\ReadStores\ReadModelFactoryTests.cs,ReadModelFactoryCanBeConfigured,The length of the statement  "                        sr.Register<IReadModelFactory<FancyReadModelA>>(r => new FancyReadModelFactory<FancyReadModelA>(expectedMagicNumberForReadModelA));" is 131.
Long Statement,EventFlow.Tests.UnitTests.ReadStores,ReadModelFactoryTests,C:\research\architectureSmells\repos\rasmus_EventFlow\Source\EventFlow.Tests\UnitTests\ReadStores\ReadModelFactoryTests.cs,ReadModelFactoryCanBeConfigured,The length of the statement  "                        sr.Register<IReadModelFactory<FancyReadModelB>>(r => new FancyReadModelFactory<FancyReadModelB>(expectedMagicNumberForReadModelB));" is 131.
Long Statement,EventFlow.Tests.UnitTests.ReadStores,ReadModelFactoryTests,C:\research\architectureSmells\repos\rasmus_EventFlow\Source\EventFlow.Tests\UnitTests\ReadStores\ReadModelFactoryTests.cs,ReadModelFactoryCanBeConfigured,The length of the statement  "                var readModelA = await resolver.Resolve<IReadModelFactory<FancyReadModelA>>().CreateAsync(A<string>()' CancellationToken.None);" is 127.
Long Statement,EventFlow.Tests.UnitTests.ReadStores,ReadModelFactoryTests,C:\research\architectureSmells\repos\rasmus_EventFlow\Source\EventFlow.Tests\UnitTests\ReadStores\ReadModelFactoryTests.cs,ReadModelFactoryCanBeConfigured,The length of the statement  "                var readModelB = await resolver.Resolve<IReadModelFactory<FancyReadModelB>>().CreateAsync(A<string>()' CancellationToken.None);" is 127.
Long Statement,EventFlow.Tests.UnitTests.ReadStores,ReadModelFactoryTests,C:\research\architectureSmells\repos\rasmus_EventFlow\Source\EventFlow.Tests\UnitTests\ReadStores\ReadModelFactoryTests.cs,ReadModelFactoryCanBeConfigured,The length of the statement  "                var readModelC = await resolver.Resolve<IReadModelFactory<FancyReadModelC>>().CreateAsync(A<string>()' CancellationToken.None);" is 127.
Long Statement,EventFlow.Tests.UnitTests.ReadStores,ReadModelFactoryTests,C:\research\architectureSmells\repos\rasmus_EventFlow\Source\EventFlow.Tests\UnitTests\ReadStores\ReadModelFactoryTests.cs,ThrowsExceptionForNoEmptyConstruuctors,The length of the statement  "            var exception = Assert.Throws<TypeInitializationException>(() => new ReadModelFactory<ReadModelWithConstructorArguments>(Mock<ILog>()));" is 136.
Long Statement,EventFlow.Tests.UnitTests.Sagas.AggregateSagas,AggregateSagaTests,C:\research\architectureSmells\repos\rasmus_EventFlow\Source\EventFlow.Tests\UnitTests\Sagas\AggregateSagas\AggregateSagaTests.cs,AggregateSaga_PublishAsync_ExecutionResultIsSuccessFalseDisableThrow,The length of the statement  "                .GetProperty("ThrowExceptionsOnFailedPublish"' BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.SetProperty)" is 121.
Long Statement,EventFlow.Tests.UnitTests.Sagas,DispatchToSagasTests,C:\research\architectureSmells\repos\rasmus_EventFlow\Source\EventFlow.Tests\UnitTests\Sagas\DispatchToSagasTests.cs,SagaUpdaterIsInvokedCorrectly,The length of the statement  "                u => u.ProcessAsync(sagaMock.Object' It.IsAny<IDomainEvent>()' It.IsAny<ISagaContext>()' It.IsAny<CancellationToken>())'" is 120.
Long Statement,EventFlow.Tests.UnitTests.Snapshots,SnapshotAggregateRootTests,C:\research\architectureSmells\repos\rasmus_EventFlow\Source\EventFlow.Tests\UnitTests\Snapshots\SnapshotAggregateRootTests.cs,WillStoreSnapshotsCorrectly,The length of the statement  "                s => s.StoreSnapshotAsync<ThingyAggregate' ThingyId' ThingySnapshot>(It.IsAny<ThingyId>()' It.IsAny<SnapshotContainer>()' It.IsAny<CancellationToken>())'" is 153.
Long Statement,EventFlow.Tests.UnitTests.Snapshots,SnapshotAggregateRootTests,C:\research\architectureSmells\repos\rasmus_EventFlow\Source\EventFlow.Tests\UnitTests\Snapshots\SnapshotAggregateRootTests.cs,Arrange_EventStore,The length of the statement  "                .Setup(e => e.LoadEventsAsync<ThingyAggregate' ThingyId>(It.IsAny<ThingyId>()' It.IsAny<int>()' It.IsAny<CancellationToken>()))" is 127.
Long Statement,EventFlow.Tests.UnitTests.Snapshots,SnapshotAggregateRootTests,C:\research\architectureSmells\repos\rasmus_EventFlow\Source\EventFlow.Tests\UnitTests\Snapshots\SnapshotAggregateRootTests.cs,Arrange_EventStore,The length of the statement  "                .Returns<ThingyId' int' CancellationToken>((id' seq' c) => Task.FromResult<IReadOnlyCollection<IDomainEvent<ThingyAggregate' ThingyId>>>(domainEventList.Skip(Math.Max(seq - 1' 0)).ToList()));" is 191.
Long Statement,EventFlow.Tests.UnitTests.Snapshots,SnapshotAggregateRootTests,C:\research\architectureSmells\repos\rasmus_EventFlow\Source\EventFlow.Tests\UnitTests\Snapshots\SnapshotAggregateRootTests.cs,Arrange_Snapshot,The length of the statement  "                .Setup(s => s.LoadSnapshotAsync<ThingyAggregate' ThingyId' ThingySnapshot>(It.IsAny<ThingyId>()' It.IsAny<CancellationToken>()))" is 128.
Long Statement,EventFlow.Tests.UnitTests.Snapshots,SnapshotUpgradeServiceTests,C:\research\architectureSmells\repos\rasmus_EventFlow\Source\EventFlow.Tests\UnitTests\Snapshots\SnapshotUpgradeServiceTests.cs,UpgradeAsync_UpgradesSnapshot,The length of the statement  "            thingySnapshot.PreviousVersions.Should().BeEquivalentTo(new[] {ThingySnapshotVersion.Version1' ThingySnapshotVersion.Version2});" is 128.
Long Statement,EventFlow.Tests.UnitTests.Subscribers,DispatchToEventSubscribersTests,C:\research\architectureSmells\repos\rasmus_EventFlow\Source\EventFlow.Tests\UnitTests\Subscribers\DispatchToEventSubscribersTests.cs,SynchronousSubscribersGetCalled,The length of the statement  "            await Sut.DispatchToSynchronousSubscribersAsync(new[] { A<DomainEvent<ThingyAggregate' ThingyId' ThingyPingEvent>>() }' CancellationToken.None).ConfigureAwait(false);" is 166.
Long Statement,EventFlow.Tests.UnitTests.Subscribers,DispatchToEventSubscribersTests,C:\research\architectureSmells\repos\rasmus_EventFlow\Source\EventFlow.Tests\UnitTests\Subscribers\DispatchToEventSubscribersTests.cs,SynchronousSubscribersGetCalled,The length of the statement  "            subscriberMock.Verify(s => s.HandleAsync(It.IsAny<IDomainEvent<ThingyAggregate' ThingyId' ThingyPingEvent>>()' It.IsAny<CancellationToken>())' Times.Once);" is 155.
Long Statement,EventFlow.Tests.UnitTests.Subscribers,DispatchToEventSubscribersTests,C:\research\architectureSmells\repos\rasmus_EventFlow\Source\EventFlow.Tests\UnitTests\Subscribers\DispatchToEventSubscribersTests.cs,AsynchronousSubscribersGetCalled,The length of the statement  "            await Sut.DispatchToAsynchronousSubscribersAsync(A<DomainEvent<ThingyAggregate' ThingyId' ThingyPingEvent>>()' CancellationToken.None).ConfigureAwait(false);" is 157.
Long Statement,EventFlow.Tests.UnitTests.Subscribers,DispatchToEventSubscribersTests,C:\research\architectureSmells\repos\rasmus_EventFlow\Source\EventFlow.Tests\UnitTests\Subscribers\DispatchToEventSubscribersTests.cs,AsynchronousSubscribersGetCalled,The length of the statement  "            subscriberMock.Verify(s => s.HandleAsync(It.IsAny<IDomainEvent<ThingyAggregate' ThingyId' ThingyPingEvent>>()' It.IsAny<CancellationToken>())' Times.Once);" is 155.
Long Statement,EventFlow.Tests.UnitTests.Subscribers,DispatchToEventSubscribersTests,C:\research\architectureSmells\repos\rasmus_EventFlow\Source\EventFlow.Tests\UnitTests\Subscribers\DispatchToEventSubscribersTests.cs,SubscriberExceptionIsNotThrownIfNotConfigured,The length of the statement  "                .Setup(s => s.HandleAsync(It.IsAny<IDomainEvent<ThingyAggregate' ThingyId' ThingyPingEvent>>()' It.IsAny<CancellationToken>()))" is 127.
Long Statement,EventFlow.Tests.UnitTests.Subscribers,DispatchToEventSubscribersTests,C:\research\architectureSmells\repos\rasmus_EventFlow\Source\EventFlow.Tests\UnitTests\Subscribers\DispatchToEventSubscribersTests.cs,SubscriberExceptionIsNotThrownIfNotConfigured,The length of the statement  "            Assert.DoesNotThrowAsync(async () => await Sut.DispatchToSynchronousSubscribersAsync(new[] { A<DomainEvent<ThingyAggregate' ThingyId' ThingyPingEvent>>() }' CancellationToken.None).ConfigureAwait(false));" is 204.
Long Statement,EventFlow.Tests.UnitTests.Subscribers,DispatchToEventSubscribersTests,C:\research\architectureSmells\repos\rasmus_EventFlow\Source\EventFlow.Tests\UnitTests\Subscribers\DispatchToEventSubscribersTests.cs,SubscriberExceptionIsThrownIfConfigured,The length of the statement  "                .Setup(s => s.HandleAsync(It.IsAny<IDomainEvent<ThingyAggregate' ThingyId' ThingyPingEvent>>()' It.IsAny<CancellationToken>()))" is 127.
Long Statement,EventFlow.Tests.UnitTests.Subscribers,DispatchToEventSubscribersTests,C:\research\architectureSmells\repos\rasmus_EventFlow\Source\EventFlow.Tests\UnitTests\Subscribers\DispatchToEventSubscribersTests.cs,SubscriberExceptionIsThrownIfConfigured,The length of the statement  "            var exception = Assert.Throws<Exception>(() => Sut.DispatchToSynchronousSubscribersAsync(new[] {A<DomainEvent<ThingyAggregate' ThingyId' ThingyPingEvent>>()}' CancellationToken.None).GetAwaiter().GetResult());" is 209.
Long Statement,EventFlow.Tests.UnitTests.Subscribers,DispatchToEventSubscribersTests,C:\research\architectureSmells\repos\rasmus_EventFlow\Source\EventFlow.Tests\UnitTests\Subscribers\DispatchToEventSubscribersTests.cs,ArrangeSynchronousSubscriber,The length of the statement  "                .Setup(r => r.ResolveAll(It.Is<Type>(t => t.IsGenericType && t.GetGenericTypeDefinition() == typeof(ISubscribeSynchronousTo<''>))))" is 131.
Long Statement,EventFlow.Tests.UnitTests.Subscribers,DispatchToEventSubscribersTests,C:\research\architectureSmells\repos\rasmus_EventFlow\Source\EventFlow.Tests\UnitTests\Subscribers\DispatchToEventSubscribersTests.cs,ArrangeAsynchronousSubscriber,The length of the statement  "                .Setup(r => r.ResolveAll(It.Is<Type>(t => t.IsGenericType && t.GetGenericTypeDefinition() == typeof(ISubscribeAsynchronousTo<''>))))" is 132.
Empty Catch Block,EventFlow.Tests.IntegrationTests,CancellationTests,C:\research\architectureSmells\repos\rasmus_EventFlow\Source\EventFlow.Tests\IntegrationTests\CancellationTests.cs,ShouldCancelBeforeBarrierOrRunToEnd,The method has an empty catch block.
Empty Catch Block,EventFlow.Tests.UnitTests.EventStores,ConcurrentFilesEventPersistanceTests,C:\research\architectureSmells\repos\rasmus_EventFlow\Source\EventFlow.Tests\UnitTests\EventStores\ConcurrentFilesEventPersistanceTests.cs,RetryAsync,The method has an empty catch block.
Magic Number,EventFlow.Tests,LicenseHeaderTests,C:\research\architectureSmells\repos\rasmus_EventFlow\Source\EventFlow.Tests\LicenseHeaderTests.cs,EveryFileHasCorrectLicenseHeader,The following statement contains a magic number: sourceFiles.Should().HaveCountGreaterThan(800);
Magic Number,EventFlow.Tests,LicenseHeaderTests,C:\research\architectureSmells\repos\rasmus_EventFlow\Source\EventFlow.Tests\LicenseHeaderTests.cs,EveryFileHasCorrectLicenseHeader,The following statement contains a magic number: var missingHeaders = sourceFiles                 .Where(s => s.License.Count < 20)                 .ToList();
Magic Number,EventFlow.Tests.IntegrationTests,BackwardCompatibilityTests,C:\research\architectureSmells\repos\rasmus_EventFlow\Source\EventFlow.Tests\IntegrationTests\BackwardCompatibilityTests.cs,ValidateTestAggregate,The following statement contains a magic number: testAggregate.Version.Should().Be(2);
Magic Number,EventFlow.Tests.IntegrationTests,BasicTests,C:\research\architectureSmells\repos\rasmus_EventFlow\Source\EventFlow.Tests\IntegrationTests\BasicTests.cs,BasicFlow,The following statement contains a magic number: pingReadModels.Should().HaveCount(2);
Magic Number,EventFlow.Tests.IntegrationTests,CommandResultTests,C:\research\architectureSmells\repos\rasmus_EventFlow\Source\EventFlow.Tests\IntegrationTests\CommandResultTests.cs,CommandResult,The following statement contains a magic number: success.MagicNumber.Should().Be(42);
Magic Number,EventFlow.Tests.IntegrationTests,TestSuccessResultCommandHandler,C:\research\architectureSmells\repos\rasmus_EventFlow\Source\EventFlow.Tests\IntegrationTests\CommandResultTests.cs,ExecuteCommandAsync,The following statement contains a magic number: return Task.FromResult(new TestExecutionResult(42' true));
Magic Number,EventFlow.Tests.IntegrationTests.ReadStores,MultipleAggregateReadStoreManagerTests,C:\research\architectureSmells\repos\rasmus_EventFlow\Source\EventFlow.Tests\IntegrationTests\ReadStores\MultipleAggregateReadStoreManagerTests.cs,EventOrdering,The following statement contains a magic number: readModelAb.Indexes.Should().BeEquivalentTo(                 new []{0' 1' 2' 3}'                 o => o.WithStrictOrdering());
Magic Number,EventFlow.Tests.IntegrationTests.ReadStores,MultipleAggregateReadStoreManagerTests,C:\research\architectureSmells\repos\rasmus_EventFlow\Source\EventFlow.Tests\IntegrationTests\ReadStores\MultipleAggregateReadStoreManagerTests.cs,EventOrdering,The following statement contains a magic number: readModelAb.Indexes.Should().BeEquivalentTo(                 new []{0' 1' 2' 3}'                 o => o.WithStrictOrdering());
Magic Number,EventFlow.Tests.IntegrationTests.Sagas,AggregateSagaTests,C:\research\architectureSmells\repos\rasmus_EventFlow\Source\EventFlow.Tests\IntegrationTests\Sagas\AggregateSagaTests.cs,PublishingStartAndCompleteWithPingsResultInCorrectMessages,The following statement contains a magic number: var pingsWithNewSaga = await PublishPingCommandsAsync(thingyId' 3).ConfigureAwait(false);
Magic Number,EventFlow.Tests.IntegrationTests.Sagas,AggregateSagaTests,C:\research\architectureSmells\repos\rasmus_EventFlow\Source\EventFlow.Tests\IntegrationTests\Sagas\AggregateSagaTests.cs,PublishingStartAndCompleteWithPingsResultInCorrectMessages,The following statement contains a magic number: var pingsWithRunningSaga = await PublishPingCommandsAsync(thingyId' 3).ConfigureAwait(false);
Magic Number,EventFlow.Tests.IntegrationTests.Sagas,AggregateSagaTests,C:\research\architectureSmells\repos\rasmus_EventFlow\Source\EventFlow.Tests\IntegrationTests\Sagas\AggregateSagaTests.cs,PublishingStartAndCompleteWithPingsResultInCorrectMessages,The following statement contains a magic number: var pingsWithCompletedSaga = await PublishPingCommandsAsync(thingyId' 3).ConfigureAwait(false);
Magic Number,EventFlow.Tests.IntegrationTests.Sagas,AggregateSagaTests,C:\research\architectureSmells\repos\rasmus_EventFlow\Source\EventFlow.Tests\IntegrationTests\Sagas\AggregateSagaTests.cs,PublishingStartAndCompleteWithPingsResultInCorrectMessages,The following statement contains a magic number: receivedSagaPingIds.Should().HaveCount(3);
Magic Number,EventFlow.Tests.UnitTests.Aggregates,AggregateRootApplyEventTests,C:\research\architectureSmells\repos\rasmus_EventFlow\Source\EventFlow.Tests\UnitTests\Aggregates\AggregateRootApplyEventTests.cs,EventApplier,The following statement contains a magic number: myAggregate.Count(42);
Magic Number,EventFlow.Tests.UnitTests.Aggregates,AggregateRootApplyEventTests,C:\research\architectureSmells\repos\rasmus_EventFlow\Source\EventFlow.Tests\UnitTests\Aggregates\AggregateRootApplyEventTests.cs,EventApplier,The following statement contains a magic number: myAggregate.State.Count.Should().Be(42);
Magic Number,EventFlow.Tests.UnitTests.Aggregates,AggregateRootTests,C:\research\architectureSmells\repos\rasmus_EventFlow\Source\EventFlow.Tests\UnitTests\Aggregates\AggregateRootTests.cs,EventsCanBeApplied,The following statement contains a magic number: var events = Many<ThingyPingEvent>(2);
Magic Number,EventFlow.Tests.UnitTests.Aggregates,AggregateRootTests,C:\research\architectureSmells\repos\rasmus_EventFlow\Source\EventFlow.Tests\UnitTests\Aggregates\AggregateRootTests.cs,EventsCanBeApplied,The following statement contains a magic number: Sut.Version.Should().Be(2);
Magic Number,EventFlow.Tests.UnitTests.Aggregates,AggregateRootTests,C:\research\architectureSmells\repos\rasmus_EventFlow\Source\EventFlow.Tests\UnitTests\Aggregates\AggregateRootTests.cs,EventsCanBeApplied,The following statement contains a magic number: Sut.PingsReceived.Count.Should().Be(2);
Magic Number,EventFlow.Tests.UnitTests.Aggregates,AggregateRootTests,C:\research\architectureSmells\repos\rasmus_EventFlow\Source\EventFlow.Tests\UnitTests\Aggregates\AggregateRootTests.cs,UncommittedEventIdsShouldBeDistinct,The following statement contains a magic number: Sut.UncommittedEvents                 .Select(e => e.Metadata.EventId).Distinct()                 .Should().HaveCount(2);
Magic Number,EventFlow.Tests.UnitTests.Aggregates,AggregateRootTests,C:\research\architectureSmells\repos\rasmus_EventFlow\Source\EventFlow.Tests\UnitTests\Aggregates\AggregateRootTests.cs,ApplyEventWithOutOfOrderSequenceNumberShouldThrow,The following statement contains a magic number: const int expectedVersion = 7;
Magic Number,EventFlow.Tests.UnitTests.Aggregates,AggregateStoreTests,C:\research\architectureSmells\repos\rasmus_EventFlow\Source\EventFlow.Tests\UnitTests\Aggregates\AggregateStoreTests.cs,UpdateAsync_RetryForOptimisticConcurrencyExceptionsAreDone,The following statement contains a magic number: _eventStoreMock.Verify(                 s => s.StoreAsync<ThingyAggregate' ThingyId>(                     It.IsAny<ThingyId>()'                     It.IsAny<IReadOnlyCollection<IUncommittedEvent>>()'                     It.IsAny<ISourceId>()'                     It.IsAny<CancellationToken>())'                 Times.Exactly(6));
Magic Number,EventFlow.Tests.UnitTests.Aggregates,MetadataTests,C:\research\architectureSmells\repos\rasmus_EventFlow\Source\EventFlow.Tests\UnitTests\Aggregates\MetadataTests.cs,SerializeDeserializeWithValues,The following statement contains a magic number: metadata.Count.Should().Be(3);
Magic Number,EventFlow.Tests.UnitTests.Commands,CommandDefinitionServiceTests,C:\research\architectureSmells\repos\rasmus_EventFlow\Source\EventFlow.Tests\UnitTests\Commands\CommandDefinitionServiceTests.cs,GetTestCases,The following statement contains a magic number: yield return new VersionTypeTestCase                 {                     Name = "TestCommand"'                     Type = typeof(TestCommandV2)'                     Version = 2'                 };
Magic Number,EventFlow.Tests.UnitTests.Commands,CommandDefinitionServiceTests,C:\research\architectureSmells\repos\rasmus_EventFlow\Source\EventFlow.Tests\UnitTests\Commands\CommandDefinitionServiceTests.cs,GetTestCases,The following statement contains a magic number: yield return new VersionTypeTestCase                 {                     Name = "TestCommand"'                     Type = typeof(OldTestCommandV5)'                     Version = 5'                 };
Magic Number,EventFlow.Tests.UnitTests.Commands,CommandDefinitionServiceTests,C:\research\architectureSmells\repos\rasmus_EventFlow\Source\EventFlow.Tests\UnitTests\Commands\CommandDefinitionServiceTests.cs,GetTestCases,The following statement contains a magic number: yield return new VersionTypeTestCase                 {                     Name = "Fancy"'                     Type = typeof(TestCommandWithLongName)'                     Version = 42'                 };
Magic Number,EventFlow.Tests.UnitTests.Configuration.Serialization,JsonOptionsTests,C:\research\architectureSmells\repos\rasmus_EventFlow\Source\EventFlow.Tests\UnitTests\Configuration\Serialization\JsonOptionsTests.cs,JsonOptionsCanBeUsedToConstructJsonSerializerSettings,The following statement contains a magic number: var myClassSerialized = JsonConvert.SerializeObject(new MyClass() { DateTime = new DateTime(1000000) });
Magic Number,EventFlow.Tests.UnitTests.Configuration.Serialization,JsonOptionsTests,C:\research\architectureSmells\repos\rasmus_EventFlow\Source\EventFlow.Tests\UnitTests\Configuration\Serialization\JsonOptionsTests.cs,JsonOptionsCanBeUsedToConstructJsonSerializerSettings,The following statement contains a magic number: var svoSerialized = JsonConvert.SerializeObject(new MySingleValueObject(new DateTime(1970' 1' 1)));
Magic Number,EventFlow.Tests.UnitTests.Configuration.Serialization,JsonOptionsTests,C:\research\architectureSmells\repos\rasmus_EventFlow\Source\EventFlow.Tests\UnitTests\Configuration\Serialization\JsonOptionsTests.cs,JsonOptionsCanBeUsedToConstructJsonSerializerSettings,The following statement contains a magic number: myClassDeserialized.DateTime.Ticks.Should().Be(1000000);
Magic Number,EventFlow.Tests.UnitTests.Configuration.Serialization,JsonOptionsTests,C:\research\architectureSmells\repos\rasmus_EventFlow\Source\EventFlow.Tests\UnitTests\Configuration\Serialization\JsonOptionsTests.cs,JsonOptionsCanBeUsedToConstructJsonSerializerSettings,The following statement contains a magic number: myClassDeserialized.DateTime.Ticks.Should().NotBe(10);
Magic Number,EventFlow.Tests.UnitTests.Configuration.Serialization,JsonOptionsTests,C:\research\architectureSmells\repos\rasmus_EventFlow\Source\EventFlow.Tests\UnitTests\Configuration\Serialization\JsonOptionsTests.cs,JsonOptionsCanBeUsedToConstructJsonSerializerSettings,The following statement contains a magic number: svoDeserialized.Should().Be(new MySingleValueObject(new DateTime(1970' 1' 1)));
Magic Number,EventFlow.Tests.UnitTests.Configuration.Serialization,JsonOptionsTests,C:\research\architectureSmells\repos\rasmus_EventFlow\Source\EventFlow.Tests\UnitTests\Configuration\Serialization\JsonOptionsTests.cs,JsonOptionsCanBeUsedToConstructJsonSerializerSettings,The following statement contains a magic number: svoDeserialized.Should().NotBe(new MySingleValueObject(new DateTime(2001' 1' 1)));
Magic Number,EventFlow.Tests.UnitTests.Core,AsyncHelperTests,C:\research\architectureSmells\repos\rasmus_EventFlow\Source\EventFlow.Tests\UnitTests\Core\AsyncHelperTests.cs,AsyncOperationIsAllowedToFinish,The following statement contains a magic number: a.Run(Task.Run(async () =>                     {                         await Task.Delay(TimeSpan.FromSeconds(0.5)).ConfigureAwait(true);                         wasExecuted = true;                     }));
Magic Number,EventFlow.Tests.UnitTests.Core,AsyncHelperTests,C:\research\architectureSmells\repos\rasmus_EventFlow\Source\EventFlow.Tests\UnitTests\Core\AsyncHelperTests.cs,NestedAsyncOperationsAreAllowedToFinish,The following statement contains a magic number: var levelsWereExecuted = new bool[10];
Magic Number,EventFlow.Tests.UnitTests.Core,AsyncHelperTests,C:\research\architectureSmells\repos\rasmus_EventFlow\Source\EventFlow.Tests\UnitTests\Core\AsyncHelperTests.cs,NestedAsyncOperationsAreAllowedToFinish,The following statement contains a magic number: a.Run(Enumerable.Range(0' 10).Aggregate(                     Task.Run(async () =>                     {                         await Task.Delay(TimeSpan.FromSeconds(1)).ConfigureAwait(true);                         rootWasExecuted = true;                         Console.WriteLine("Root task done");                     })'                     (t' i) => Task.Run(async () =>                     {                         await t.ConfigureAwait(true);                         await Task.Delay(TimeSpan.FromSeconds(0.1)).ConfigureAwait(true);                         Console.WriteLine($"Task level {i} done");                         levelsWereExecuted[i] = true;                     })));
Magic Number,EventFlow.Tests.UnitTests.Core,AsyncHelperTests,C:\research\architectureSmells\repos\rasmus_EventFlow\Source\EventFlow.Tests\UnitTests\Core\AsyncHelperTests.cs,NestedAsyncOperationsAreAllowedToFinish,The following statement contains a magic number: a.Run(Enumerable.Range(0' 10).Aggregate(                     Task.Run(async () =>                     {                         await Task.Delay(TimeSpan.FromSeconds(1)).ConfigureAwait(true);                         rootWasExecuted = true;                         Console.WriteLine("Root task done");                     })'                     (t' i) => Task.Run(async () =>                     {                         await t.ConfigureAwait(true);                         await Task.Delay(TimeSpan.FromSeconds(0.1)).ConfigureAwait(true);                         Console.WriteLine($"Task level {i} done");                         levelsWereExecuted[i] = true;                     })));
Magic Number,EventFlow.Tests.UnitTests.Core,AsyncHelperTests,C:\research\architectureSmells\repos\rasmus_EventFlow\Source\EventFlow.Tests\UnitTests\Core\AsyncHelperTests.cs,ThrowsTestExceptionAsync,The following statement contains a magic number: await Task.Delay(TimeSpan.FromMilliseconds(10)).ConfigureAwait(true);
Magic Number,EventFlow.Tests.UnitTests.Core,AsyncHelperTests,C:\research\architectureSmells\repos\rasmus_EventFlow\Source\EventFlow.Tests\UnitTests\Core\AsyncHelperTests.cs,PotentialDeadlockAsync,The following statement contains a magic number: await Task.Delay(TimeSpan.FromMilliseconds(100)).ConfigureAwait(true);
Magic Number,EventFlow.Tests.UnitTests.Core,CircularBufferTests,C:\research\architectureSmells\repos\rasmus_EventFlow\Source\EventFlow.Tests\UnitTests\Core\CircularBufferTests.cs,Put,The following statement contains a magic number: const int capasity = 2;
Magic Number,EventFlow.Tests.UnitTests.Core,ReflectionHelperTests,C:\research\architectureSmells\repos\rasmus_EventFlow\Source\EventFlow.Tests\UnitTests\Core\ReflectionHelperTests.cs,CompileMethodInvocation,The following statement contains a magic number: var result = caller(new Calculator()' 1' 2);
Magic Number,EventFlow.Tests.UnitTests.Core,ReflectionHelperTests,C:\research\architectureSmells\repos\rasmus_EventFlow\Source\EventFlow.Tests\UnitTests\Core\ReflectionHelperTests.cs,CompileMethodInvocation,The following statement contains a magic number: result.Should().Be(3);
Magic Number,EventFlow.Tests.UnitTests.Core,ReflectionHelperTests,C:\research\architectureSmells\repos\rasmus_EventFlow\Source\EventFlow.Tests\UnitTests\Core\ReflectionHelperTests.cs,CompileMethodInvocation_CanUpcast,The following statement contains a magic number: var b = (INumber) new Number {I = 2};
Magic Number,EventFlow.Tests.UnitTests.Core,ReflectionHelperTests,C:\research\architectureSmells\repos\rasmus_EventFlow\Source\EventFlow.Tests\UnitTests\Core\ReflectionHelperTests.cs,CompileMethodInvocation_CanUpcast,The following statement contains a magic number: c.I.Should().Be(3);
Magic Number,EventFlow.Tests.UnitTests.Core,ReflectionHelperTests,C:\research\architectureSmells\repos\rasmus_EventFlow\Source\EventFlow.Tests\UnitTests\Core\ReflectionHelperTests.cs,CompileMethodInvocation_CanDoBothUpcastAndPass,The following statement contains a magic number: const int b = 2;
Magic Number,EventFlow.Tests.UnitTests.Core,ReflectionHelperTests,C:\research\architectureSmells\repos\rasmus_EventFlow\Source\EventFlow.Tests\UnitTests\Core\ReflectionHelperTests.cs,CompileMethodInvocation_CanDoBothUpcastAndPass,The following statement contains a magic number: c.I.Should().Be(3);
Magic Number,EventFlow.Tests.UnitTests.Core,RetryDelayTests,C:\research\architectureSmells\repos\rasmus_EventFlow\Source\EventFlow.Tests\UnitTests\Core\RetryDelayTests.cs,PickDelay_IsWithinBounds,The following statement contains a magic number: const double max = 1000;
Magic Number,EventFlow.Tests.UnitTests.Core,RetryDelayTests,C:\research\architectureSmells\repos\rasmus_EventFlow\Source\EventFlow.Tests\UnitTests\Core\RetryDelayTests.cs,PickDelay_IsWithinBounds,The following statement contains a magic number: const double min = 500;
Magic Number,EventFlow.Tests.UnitTests.Core,TransientFaultHandlerTests,C:\research\architectureSmells\repos\rasmus_EventFlow\Source\EventFlow.Tests\UnitTests\Core\TransientFaultHandlerTests.cs,Result,The following statement contains a magic number: ArrangeRetryStrategy(2);
Magic Number,EventFlow.Tests.UnitTests.Core,TransientFaultHandlerTests,C:\research\architectureSmells\repos\rasmus_EventFlow\Source\EventFlow.Tests\UnitTests\Core\TransientFaultHandlerTests.cs,Result,The following statement contains a magic number: action.Verify(f => f()' Times.Exactly(3));
Magic Number,EventFlow.Tests.UnitTests.Core.RetryStrategies,OptimisticConcurrencyRetryStrategyTests,C:\research\architectureSmells\repos\rasmus_EventFlow\Source\EventFlow.Tests\UnitTests\Core\RetryStrategies\OptimisticConcurrencyRetryStrategyTests.cs,SetUp,The following statement contains a magic number: _eventFlowConfigurationMock                 .Setup(c => c.NumberOfRetriesOnOptimisticConcurrencyExceptions)                 .Returns(3);
Magic Number,EventFlow.Tests.UnitTests.Core.RetryStrategies,OptimisticConcurrencyRetryStrategyTests,C:\research\architectureSmells\repos\rasmus_EventFlow\Source\EventFlow.Tests\UnitTests\Core\RetryStrategies\OptimisticConcurrencyRetryStrategyTests.cs,SetUp,The following statement contains a magic number: _eventFlowConfigurationMock                 .Setup(c => c.DelayBeforeRetryOnOptimisticConcurrencyExceptions)                 .Returns(TimeSpan.FromMilliseconds(10));
Magic Number,EventFlow.Tests.UnitTests.EventStores,ConcurrentInMemoryEventPersistanceTests,C:\research\architectureSmells\repos\rasmus_EventFlow\Source\EventFlow.Tests\UnitTests\EventStores\ConcurrentInMemoryEventPersistanceTests.cs,RetryAsync,The following statement contains a magic number: retry < 100
Magic Number,EventFlow.Tests.UnitTests.EventStores,EventDefinitionServiceTests,C:\research\architectureSmells\repos\rasmus_EventFlow\Source\EventFlow.Tests\UnitTests\EventStores\EventDefinitionServiceTests.cs,GetDefinitions_OnEventWithMultipleDefinitions_ReturnsThemAll,The following statement contains a magic number: eventDefinitions.Should().HaveCount(3);
Magic Number,EventFlow.Tests.UnitTests.EventStores,EventDefinitionServiceTests,C:\research\architectureSmells\repos\rasmus_EventFlow\Source\EventFlow.Tests\UnitTests\EventStores\EventDefinitionServiceTests.cs,GetTestCases,The following statement contains a magic number: yield return new VersionTypeTestCase                 {                     Name = "TestEvent"'                     Type = typeof(TestEventV2)'                     Version = 2'                 };
Magic Number,EventFlow.Tests.UnitTests.EventStores,EventDefinitionServiceTests,C:\research\architectureSmells\repos\rasmus_EventFlow\Source\EventFlow.Tests\UnitTests\EventStores\EventDefinitionServiceTests.cs,GetTestCases,The following statement contains a magic number: yield return new VersionTypeTestCase                 {                     Name = "TestEvent"'                     Type = typeof(OldTestEventV5)'                     Version = 5'                 };
Magic Number,EventFlow.Tests.UnitTests.EventStores,EventDefinitionServiceTests,C:\research\architectureSmells\repos\rasmus_EventFlow\Source\EventFlow.Tests\UnitTests\EventStores\EventDefinitionServiceTests.cs,GetTestCases,The following statement contains a magic number: yield return new VersionTypeTestCase                 {                     Name = "Fancy"'                     Type = typeof(TestEventWithLongName)'                     Version = 42'                 };
Magic Number,EventFlow.Tests.UnitTests.EventStores,EventDefinitionServiceTests,C:\research\architectureSmells\repos\rasmus_EventFlow\Source\EventFlow.Tests\UnitTests\EventStores\EventDefinitionServiceTests.cs,GetTestCases,The following statement contains a magic number: yield return new VersionTypeTestCase                 {                     Name = "The5ThEvent"'                     Type = typeof(OldThe5ThEventV4)'                     Version = 4'                 };
Magic Number,EventFlow.Tests.UnitTests.EventStores,EventDefinitionServiceTests,C:\research\architectureSmells\repos\rasmus_EventFlow\Source\EventFlow.Tests\UnitTests\EventStores\EventDefinitionServiceTests.cs,GetTestCases,The following statement contains a magic number: yield return new VersionTypeTestCase                 {                     Name = "MultiNamesEvent"'                     Type = typeof(MultiNamesEvent)'                     Version = 2'                 };
Magic Number,EventFlow.Tests.UnitTests.EventStores,EventUpgradeManagerTests,C:\research\architectureSmells\repos\rasmus_EventFlow\Source\EventFlow.Tests\UnitTests\EventStores\EventUpgradeManagerTests.cs,EventWithNoUpgradersIsReturned,The following statement contains a magic number: upgradedEvents.Count.Should().Be(2);
Magic Number,EventFlow.Tests.UnitTests.EventStores,EventUpgradeManagerTests,C:\research\architectureSmells\repos\rasmus_EventFlow\Source\EventFlow.Tests\UnitTests\EventStores\EventUpgradeManagerTests.cs,EventsAreUpgradedToLatestVersion,The following statement contains a magic number: upgradedEvents.Count.Should().Be(3);
Magic Number,EventFlow.Tests.UnitTests.Extensions,JsonSerializerExtensionTests,C:\research\architectureSmells\repos\rasmus_EventFlow\Source\EventFlow.Tests\UnitTests\Extensions\JsonSerializerExtensionTests.cs,JsonSerializerCanBeConfigured,The following statement contains a magic number: var myClassSerialized = serializer.Serialize(new MyClass() { DateTime = new DateTime(1000000) });
Magic Number,EventFlow.Tests.UnitTests.Extensions,JsonSerializerExtensionTests,C:\research\architectureSmells\repos\rasmus_EventFlow\Source\EventFlow.Tests\UnitTests\Extensions\JsonSerializerExtensionTests.cs,JsonSerializerCanBeConfigured,The following statement contains a magic number: var svoSerialized = serializer.Serialize(new MySingleValueObject(new DateTime(1970' 1' 1)));
Magic Number,EventFlow.Tests.UnitTests.Extensions,JsonSerializerExtensionTests,C:\research\architectureSmells\repos\rasmus_EventFlow\Source\EventFlow.Tests\UnitTests\Extensions\JsonSerializerExtensionTests.cs,JsonSerializerCanBeConfigured,The following statement contains a magic number: myClassDeserialized.DateTime.Ticks.Should().Be(1000000);
Magic Number,EventFlow.Tests.UnitTests.Extensions,JsonSerializerExtensionTests,C:\research\architectureSmells\repos\rasmus_EventFlow\Source\EventFlow.Tests\UnitTests\Extensions\JsonSerializerExtensionTests.cs,JsonSerializerCanBeConfigured,The following statement contains a magic number: myClassDeserialized.DateTime.Ticks.Should().NotBe(10);
Magic Number,EventFlow.Tests.UnitTests.Extensions,JsonSerializerExtensionTests,C:\research\architectureSmells\repos\rasmus_EventFlow\Source\EventFlow.Tests\UnitTests\Extensions\JsonSerializerExtensionTests.cs,JsonSerializerCanBeConfigured,The following statement contains a magic number: svoDeserialized.Should().Be(new MySingleValueObject(new DateTime(1970' 1' 1)));
Magic Number,EventFlow.Tests.UnitTests.Extensions,JsonSerializerExtensionTests,C:\research\architectureSmells\repos\rasmus_EventFlow\Source\EventFlow.Tests\UnitTests\Extensions\JsonSerializerExtensionTests.cs,JsonSerializerCanBeConfigured,The following statement contains a magic number: svoDeserialized.Should().NotBe(new MySingleValueObject(new DateTime(2001' 1' 1)));
Magic Number,EventFlow.Tests.UnitTests.Jobs,JobDefinitionServiceTests,C:\research\architectureSmells\repos\rasmus_EventFlow\Source\EventFlow.Tests\UnitTests\Jobs\JobDefinitionServiceTests.cs,GetTestCases,The following statement contains a magic number: yield return new VersionTypeTestCase                 {                     Name = "TestJob"'                     Type = typeof(TestJobV2)'                     Version = 2'                 };
Magic Number,EventFlow.Tests.UnitTests.Jobs,JobDefinitionServiceTests,C:\research\architectureSmells\repos\rasmus_EventFlow\Source\EventFlow.Tests\UnitTests\Jobs\JobDefinitionServiceTests.cs,GetTestCases,The following statement contains a magic number: yield return new VersionTypeTestCase                 {                     Name = "TestJob"'                     Type = typeof(OldTestJobV5)'                     Version = 5'                 };
Magic Number,EventFlow.Tests.UnitTests.Jobs,JobDefinitionServiceTests,C:\research\architectureSmells\repos\rasmus_EventFlow\Source\EventFlow.Tests\UnitTests\Jobs\JobDefinitionServiceTests.cs,GetTestCases,The following statement contains a magic number: yield return new VersionTypeTestCase                 {                     Name = "Fancy"'                     Type = typeof(TestJobWithLongName)'                     Version = 42'                 };
Magic Number,EventFlow.Tests.UnitTests.Provided.Specifications,AtLeastSpecificationTests,C:\research\architectureSmells\repos\rasmus_EventFlow\Source\EventFlow.Tests\UnitTests\Provided\Specifications\AtLeastSpecificationTests.cs,AtLeast_Returns_Correctly,The following statement contains a magic number: var isAbove2 = new TestSpecifications.IsAboveSpecification(2);
Magic Number,EventFlow.Tests.UnitTests.Provided.Specifications,AtLeastSpecificationTests,C:\research\architectureSmells\repos\rasmus_EventFlow\Source\EventFlow.Tests\UnitTests\Provided\Specifications\AtLeastSpecificationTests.cs,AtLeast_Returns_Correctly,The following statement contains a magic number: var isAbove3 = new TestSpecifications.IsAboveSpecification(3);
Magic Number,EventFlow.Tests.UnitTests.Provided.Specifications,AtLeastSpecificationTests,C:\research\architectureSmells\repos\rasmus_EventFlow\Source\EventFlow.Tests\UnitTests\Provided\Specifications\AtLeastSpecificationTests.cs,AtLeast_Returns_Correctly,The following statement contains a magic number: var isAbove4 = new TestSpecifications.IsAboveSpecification(4);
Magic Number,EventFlow.Tests.UnitTests.Queries,QueryProcessorTests,C:\research\architectureSmells\repos\rasmus_EventFlow\Source\EventFlow.Tests\UnitTests\Queries\QueryProcessorTests.cs,SetUp,The following statement contains a magic number: _queryHandlerMock                 .Setup(h => h.ExecuteQueryAsync(It.IsAny<IQuery<int>>()' It.IsAny<CancellationToken>()))                 .Returns(() => Task.FromResult(42));
Magic Number,EventFlow.Tests.UnitTests.Queries,QueryProcessorTests,C:\research\architectureSmells\repos\rasmus_EventFlow\Source\EventFlow.Tests\UnitTests\Queries\QueryProcessorTests.cs,QueryHandlerIsInvoked,The following statement contains a magic number: result.Should().Be(42);
Magic Number,EventFlow.Tests.UnitTests.ReadStores,AggregateReadStoreManagerTests,C:\research\architectureSmells\repos\rasmus_EventFlow\Source\EventFlow.Tests\UnitTests\ReadStores\AggregateReadStoreManagerTests.cs,EventsAreApplied,The following statement contains a magic number: var emittedEvents = new[]                 {                     ToDomainEvent(thingyId' A<ThingyPingEvent>()' 3)'                 };
Magic Number,EventFlow.Tests.UnitTests.ReadStores,AggregateReadStoreManagerTests,C:\research\architectureSmells\repos\rasmus_EventFlow\Source\EventFlow.Tests\UnitTests\ReadStores\AggregateReadStoreManagerTests.cs,EventsAreApplied,The following statement contains a magic number: Arrange_ReadModelStore_UpdateAsync(ReadModelEnvelope<TestReadModel>.With(                 thingyId.Value'                 A<TestReadModel>()'                 2));
Magic Number,EventFlow.Tests.UnitTests.ReadStores,AggregateReadStoreManagerTests,C:\research\architectureSmells\repos\rasmus_EventFlow\Source\EventFlow.Tests\UnitTests\ReadStores\AggregateReadStoreManagerTests.cs,AlreadyAppliedEventsAreNotApplied,The following statement contains a magic number: var emittedEvents = new[]                 {                     ToDomainEvent(thingyId' A<ThingyPingEvent>()' 3)'                 };
Magic Number,EventFlow.Tests.UnitTests.ReadStores,AggregateReadStoreManagerTests,C:\research\architectureSmells\repos\rasmus_EventFlow\Source\EventFlow.Tests\UnitTests\ReadStores\AggregateReadStoreManagerTests.cs,AlreadyAppliedEventsAreNotApplied,The following statement contains a magic number: var resultingReadModelUpdates = Arrange_ReadModelStore_UpdateAsync(ReadModelEnvelope<TestReadModel>.With(                 thingyId.Value'                 A<TestReadModel>()'                 3));
Magic Number,EventFlow.Tests.UnitTests.ReadStores,AggregateReadStoreManagerTests,C:\research\architectureSmells\repos\rasmus_EventFlow\Source\EventFlow.Tests\UnitTests\ReadStores\AggregateReadStoreManagerTests.cs,OutdatedEventsAreNotApplied,The following statement contains a magic number: Arrange_ReadModelStore_UpdateAsync(ReadModelEnvelope<TestReadModel>.With(                 thingyId.Value'                 A<TestReadModel>()'                 3));
Magic Number,EventFlow.Tests.UnitTests.ReadStores,AggregateReadStoreManagerTests,C:\research\architectureSmells\repos\rasmus_EventFlow\Source\EventFlow.Tests\UnitTests\ReadStores\AggregateReadStoreManagerTests.cs,StoredEventsAreAppliedIfThereAreMissingEvents,The following statement contains a magic number: var emittedEvents = new[]                 {                     ToDomainEvent(thingyId' A<ThingyPingEvent>()' 3)'                     ToDomainEvent(thingyId' A<ThingyPingEvent>()' 4)'                 };
Magic Number,EventFlow.Tests.UnitTests.ReadStores,AggregateReadStoreManagerTests,C:\research\architectureSmells\repos\rasmus_EventFlow\Source\EventFlow.Tests\UnitTests\ReadStores\AggregateReadStoreManagerTests.cs,StoredEventsAreAppliedIfThereAreMissingEvents,The following statement contains a magic number: var emittedEvents = new[]                 {                     ToDomainEvent(thingyId' A<ThingyPingEvent>()' 3)'                     ToDomainEvent(thingyId' A<ThingyPingEvent>()' 4)'                 };
Magic Number,EventFlow.Tests.UnitTests.ReadStores,AggregateReadStoreManagerTests,C:\research\architectureSmells\repos\rasmus_EventFlow\Source\EventFlow.Tests\UnitTests\ReadStores\AggregateReadStoreManagerTests.cs,StoredEventsAreAppliedIfThereAreMissingEvents,The following statement contains a magic number: var missingEvents = new[]                 {                     ToDomainEvent(thingyId' A<ThingyPingEvent>()' 2)                 };
Magic Number,EventFlow.Tests.UnitTests.ReadStores,BaseReadModelTests<TReadModel>,C:\research\architectureSmells\repos\rasmus_EventFlow\Source\EventFlow.Tests\UnitTests\ReadStores\BaseReadModelTests.cs,PopulateCallsApplyDomainEvents,The following statement contains a magic number: ArrangeEventStore(Many<ThingyPingEvent>(6));
Magic Number,EventFlow.Tests.UnitTests.ReadStores,BaseReadModelTests<TReadModel>,C:\research\architectureSmells\repos\rasmus_EventFlow\Source\EventFlow.Tests\UnitTests\ReadStores\BaseReadModelTests.cs,PopulateCallsApplyDomainEvents,The following statement contains a magic number: _readStoreManagerMock.Verify(                 s => s.UpdateReadStoresAsync(                     It.Is<IReadOnlyCollection<IDomainEvent>>(l => l.Count == ReadModelPageSize)'                     It.IsAny<CancellationToken>())'                 Times.Exactly(2));
Magic Number,EventFlow.Tests.UnitTests.ReadStores,BaseReadModelTests<TReadModel>,C:\research\architectureSmells\repos\rasmus_EventFlow\Source\EventFlow.Tests\UnitTests\ReadStores\BaseReadModelTests.cs,UnwantedEventsAreFiltered,The following statement contains a magic number: _readStoreManagerMock                 .Verify(                     s => s.UpdateReadStoresAsync(                         It.Is<IReadOnlyCollection<IDomainEvent>>(l => l.Count == 2 && l.All(e => e.EventType == typeof(ThingyPingEvent)))'                         It.IsAny<CancellationToken>())'                     Times.Once);
Magic Number,EventFlow.Tests.UnitTests.ReadStores,AsyncPingReadModel,C:\research\architectureSmells\repos\rasmus_EventFlow\Source\EventFlow.Tests\UnitTests\ReadStores\ReadModelDomainEventApplierTests.cs,ApplyAsync,The following statement contains a magic number: await Task.Delay(50' cancellationToken).ConfigureAwait(false);
Magic Number,EventFlow.Tests.UnitTests.ReadStores,ReadModelFactoryTests,C:\research\architectureSmells\repos\rasmus_EventFlow\Source\EventFlow.Tests\UnitTests\ReadStores\ReadModelFactoryTests.cs,ReadModelFactoryCanBeConfigured,The following statement contains a magic number: const int expectedMagicNumberForReadModelA = 42;
Magic Number,EventFlow.Tests.UnitTests.ReadStores,ReadModelFactoryTests,C:\research\architectureSmells\repos\rasmus_EventFlow\Source\EventFlow.Tests\UnitTests\ReadStores\ReadModelFactoryTests.cs,ReadModelFactoryCanBeConfigured,The following statement contains a magic number: const int expectedMagicNumberForReadModelB = 84;
Magic Number,EventFlow.Tests.UnitTests.ReadStores,ReadStoreManagerTestSuite<T>,C:\research\architectureSmells\repos\rasmus_EventFlow\Source\EventFlow.Tests\UnitTests\ReadStores\ReadStoreManagerTestSuite.cs,ReadStoreIsUpdatedWithRelevantEvents,The following statement contains a magic number: var events = new[]                 {                     ToDomainEvent(A<ThingyPingEvent>()' 1)'                     ToDomainEvent(A<ThingyDomainErrorAfterFirstEvent>()' 2)                 };
Magic Number,EventFlow.Tests.UnitTests.Sagas.AggregateSagas,AggregateSagaTests,C:\research\architectureSmells\repos\rasmus_EventFlow\Source\EventFlow.Tests\UnitTests\Sagas\AggregateSagas\AggregateSagaTests.cs,AggregateSaga_PublishAsync_ExecutionResultIsSuccessFalseThrowsTwice,The following statement contains a magic number: sagaPublishException.InnerExceptions.Count.Should().Be(2);
Magic Number,EventFlow.Tests.UnitTests.Sagas.AggregateSagas,AggregateSagaTests,C:\research\architectureSmells\repos\rasmus_EventFlow\Source\EventFlow.Tests\UnitTests\Sagas\AggregateSagas\AggregateSagaTests.cs,AggregateSaga_PublishAsync_TwoExceptionsAreWrapped,The following statement contains a magic number: sagaPublishException.InnerExceptions.Count.Should().Be(2);
Magic Number,EventFlow.Tests.UnitTests.Sagas.AggregateSagas,SagaAggregateStoreTests,C:\research\architectureSmells\repos\rasmus_EventFlow\Source\EventFlow.Tests\UnitTests\Sagas\AggregateSagas\SagaAggregateStoreTests.cs,ArrangeAggregateStoreMock,The following statement contains a magic number: var domainEvents = ManyDomainEvents<ThingyPingEvent>(returnsDomainEvents ? 3 : 0)                 .Cast<IDomainEvent>()                 .ToList();
Magic Number,EventFlow.Tests.UnitTests.Sagas,DispatchToSagasTests,C:\research\architectureSmells\repos\rasmus_EventFlow\Source\EventFlow.Tests\UnitTests\Sagas\DispatchToSagasTests.cs,SagaUpdaterIsInvokedCorrectly,The following statement contains a magic number: const int domainEventCount = 4;
Magic Number,EventFlow.Tests.UnitTests.Snapshots,SnapshotMetadataTests,C:\research\architectureSmells\repos\rasmus_EventFlow\Source\EventFlow.Tests\UnitTests\Snapshots\SnapshotMetadataTests.cs,DeserializesCorrectly,The following statement contains a magic number: snapshotMetadata.AggregateSequenceNumber.Should().Be(42);
Magic Number,EventFlow.Tests.UnitTests.Snapshots,SnapshotMetadataTests,C:\research\architectureSmells\repos\rasmus_EventFlow\Source\EventFlow.Tests\UnitTests\Snapshots\SnapshotMetadataTests.cs,DeserializesCorrectly,The following statement contains a magic number: snapshotMetadata.SnapshotVersion.Should().Be(84);
Magic Number,EventFlow.Tests.UnitTests.Snapshots,SnapshotMetadataTests,C:\research\architectureSmells\repos\rasmus_EventFlow\Source\EventFlow.Tests\UnitTests\Snapshots\SnapshotMetadataTests.cs,GettersAndSettersWork,The following statement contains a magic number: var snapshotMetadata = new SnapshotMetadata                 {                     AggregateId = "thingy-42"'                     AggregateName = "thingy"'                     AggregateSequenceNumber = 42'                     SnapshotName = "thingy"'                     SnapshotVersion = 84'                 };
Magic Number,EventFlow.Tests.UnitTests.Snapshots,SnapshotMetadataTests,C:\research\architectureSmells\repos\rasmus_EventFlow\Source\EventFlow.Tests\UnitTests\Snapshots\SnapshotMetadataTests.cs,GettersAndSettersWork,The following statement contains a magic number: var snapshotMetadata = new SnapshotMetadata                 {                     AggregateId = "thingy-42"'                     AggregateName = "thingy"'                     AggregateSequenceNumber = 42'                     SnapshotName = "thingy"'                     SnapshotVersion = 84'                 };
Magic Number,EventFlow.Tests.UnitTests.Snapshots,SnapshotMetadataTests,C:\research\architectureSmells\repos\rasmus_EventFlow\Source\EventFlow.Tests\UnitTests\Snapshots\SnapshotMetadataTests.cs,GettersAndSettersWork,The following statement contains a magic number: deserializedSnapshotMetadata.AggregateSequenceNumber.Should().Be(42);
Magic Number,EventFlow.Tests.UnitTests.Snapshots,SnapshotMetadataTests,C:\research\architectureSmells\repos\rasmus_EventFlow\Source\EventFlow.Tests\UnitTests\Snapshots\SnapshotMetadataTests.cs,GettersAndSettersWork,The following statement contains a magic number: deserializedSnapshotMetadata.SnapshotVersion.Should().Be(84);
Magic Number,EventFlow.Tests.UnitTests.Snapshots.Strategies,SnapshotEveryFewVersionsStrategyTests,C:\research\architectureSmells\repos\rasmus_EventFlow\Source\EventFlow.Tests\UnitTests\Snapshots\Strategies\SnapshotEveryFewVersionsStrategyTests.cs,ShouldCreateSnapshotAsync_ReturnsCorrect,The following statement contains a magic number: SnapshotEveryFewVersionsStrategy.DefautSnapshotAfterVersions.Should().Be(100);
Magic Number,EventFlow.Tests.UnitTests.Specifications,ExpressionSpecificationTests,C:\research\architectureSmells\repos\rasmus_EventFlow\Source\EventFlow.Tests\UnitTests\Specifications\ExpressionSpecificationTests.cs,StringIsRight,The following statement contains a magic number: var specification = new ExpressionSpecification<int>(i => (i > 1 && i < 10) || i == 42);
Magic Number,EventFlow.Tests.UnitTests.Specifications,ExpressionSpecificationTests,C:\research\architectureSmells\repos\rasmus_EventFlow\Source\EventFlow.Tests\UnitTests\Specifications\ExpressionSpecificationTests.cs,StringIsRight,The following statement contains a magic number: var specification = new ExpressionSpecification<int>(i => (i > 1 && i < 10) || i == 42);
Magic Number,EventFlow.Tests.UnitTests.Specifications,ExpressionSpecificationTests,C:\research\architectureSmells\repos\rasmus_EventFlow\Source\EventFlow.Tests\UnitTests\Specifications\ExpressionSpecificationTests.cs,ExpressionIsEvaluated,The following statement contains a magic number: var is42 = new ExpressionSpecification<int>(i => i == 42);
Magic Number,EventFlow.Tests.UnitTests.ValueObjects,SingleValueObjectTests,C:\research\architectureSmells\repos\rasmus_EventFlow\Source\EventFlow.Tests\UnitTests\ValueObjects\SingleValueObjectTests.cs,Ordering,The following statement contains a magic number: var values = Many<string>(10);
Magic Number,EventFlow.Tests.UnitTests.ValueObjects,SingleValueObjectTests,C:\research\architectureSmells\repos\rasmus_EventFlow\Source\EventFlow.Tests\UnitTests\ValueObjects\SingleValueObjectTests.cs,EnumOrdering,The following statement contains a magic number: var values = Many<MagicEnum>(10);
Magic Number,EventFlow.Tests.UnitTests.ValueObjects,SingleValueObjectTests,C:\research\architectureSmells\repos\rasmus_EventFlow\Source\EventFlow.Tests\UnitTests\ValueObjects\SingleValueObjectTests.cs,ProtectAgainsInvalidEnumValues,The following statement contains a magic number: var exception = Assert.Throws<ArgumentException>(() => new MagicEnumSingleValue((MagicEnum)42));
Magic Number,EventFlow.Tests.UnitTests.ValueObjects,SingleValueObjectTests,C:\research\architectureSmells\repos\rasmus_EventFlow\Source\EventFlow.Tests\UnitTests\ValueObjects\SingleValueObjectTests.cs,SerializeNullableIntWithValue,The following statement contains a magic number: var with = new WithNullableIntSingleValue(new IntSingleValue(42));
