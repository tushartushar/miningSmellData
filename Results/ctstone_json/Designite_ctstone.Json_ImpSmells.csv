Implementation smell,Namespace,Class,File,Method,Description
Complex Method,ctstone.Json,DynamicList,C:\repos\ctstone_json\ctstone.Json\DynamicList.cs,TryInvokeMember,Cyclomatic complexity of the method is 10
Complex Method,ctstone.Json,JsonTokenizer,C:\repos\ctstone_json\ctstone.Json\JsonTokenizer.cs,ParseArray,Cyclomatic complexity of the method is 11
Complex Method,ctstone.Json,JsonTokenizer,C:\repos\ctstone_json\ctstone.Json\JsonTokenizer.cs,ParseObject,Cyclomatic complexity of the method is 11
Complex Method,ctstone.Json,JsonTokenizer,C:\repos\ctstone_json\ctstone.Json\JsonTokenizer.cs,ParseEscape,Cyclomatic complexity of the method is 12
Long Statement,ctstone.Json,JsonClient,C:\repos\ctstone_json\ctstone.Json\JsonClient.cs,GetQuerystring,The length of the statement  "	return String.Join ("&"' parameters.Where (x => x.Value != null).Select (x => String.Format ("{0}={1}"' x.Key' x.Value))); " is 122.
Magic Number,ctstone.Json,JsonTokenizer,C:\repos\ctstone_json\ctstone.Json\JsonTokenizer.cs,ParseEscape,The following statement contains a magic number: switch (json.Char) {  case 'u':  	json.Pos++;  	byte[] bytes = new byte[2];  	for (int i = 0; i < 4; i += 2) {  		int j = json.Pos + i;  		bytes [(bytes.Length - 1) - i / 2] = Byte.Parse (json.Input.Substring (j' 2)' NumberStyles.HexNumber);  	}  	json.Pos += 3;  	return Encoding.Unicode.GetString (bytes);  case 'b':  	return "\b";  case 'f':  	return "\f";  case 'n':  	return "\n";  case 'r':  	return "\r";  case 't':  	return "\t";  default:  	return json.Char.ToString ();  }  
Magic Number,ctstone.Json,JsonTokenizer,C:\repos\ctstone_json\ctstone.Json\JsonTokenizer.cs,ParseEscape,The following statement contains a magic number: switch (json.Char) {  case 'u':  	json.Pos++;  	byte[] bytes = new byte[2];  	for (int i = 0; i < 4; i += 2) {  		int j = json.Pos + i;  		bytes [(bytes.Length - 1) - i / 2] = Byte.Parse (json.Input.Substring (j' 2)' NumberStyles.HexNumber);  	}  	json.Pos += 3;  	return Encoding.Unicode.GetString (bytes);  case 'b':  	return "\b";  case 'f':  	return "\f";  case 'n':  	return "\n";  case 'r':  	return "\r";  case 't':  	return "\t";  default:  	return json.Char.ToString ();  }  
Magic Number,ctstone.Json,JsonTokenizer,C:\repos\ctstone_json\ctstone.Json\JsonTokenizer.cs,ParseEscape,The following statement contains a magic number: switch (json.Char) {  case 'u':  	json.Pos++;  	byte[] bytes = new byte[2];  	for (int i = 0; i < 4; i += 2) {  		int j = json.Pos + i;  		bytes [(bytes.Length - 1) - i / 2] = Byte.Parse (json.Input.Substring (j' 2)' NumberStyles.HexNumber);  	}  	json.Pos += 3;  	return Encoding.Unicode.GetString (bytes);  case 'b':  	return "\b";  case 'f':  	return "\f";  case 'n':  	return "\n";  case 'r':  	return "\r";  case 't':  	return "\t";  default:  	return json.Char.ToString ();  }  
Magic Number,ctstone.Json,JsonTokenizer,C:\repos\ctstone_json\ctstone.Json\JsonTokenizer.cs,ParseEscape,The following statement contains a magic number: switch (json.Char) {  case 'u':  	json.Pos++;  	byte[] bytes = new byte[2];  	for (int i = 0; i < 4; i += 2) {  		int j = json.Pos + i;  		bytes [(bytes.Length - 1) - i / 2] = Byte.Parse (json.Input.Substring (j' 2)' NumberStyles.HexNumber);  	}  	json.Pos += 3;  	return Encoding.Unicode.GetString (bytes);  case 'b':  	return "\b";  case 'f':  	return "\f";  case 'n':  	return "\n";  case 'r':  	return "\r";  case 't':  	return "\t";  default:  	return json.Char.ToString ();  }  
Magic Number,ctstone.Json,JsonTokenizer,C:\repos\ctstone_json\ctstone.Json\JsonTokenizer.cs,ParseEscape,The following statement contains a magic number: switch (json.Char) {  case 'u':  	json.Pos++;  	byte[] bytes = new byte[2];  	for (int i = 0; i < 4; i += 2) {  		int j = json.Pos + i;  		bytes [(bytes.Length - 1) - i / 2] = Byte.Parse (json.Input.Substring (j' 2)' NumberStyles.HexNumber);  	}  	json.Pos += 3;  	return Encoding.Unicode.GetString (bytes);  case 'b':  	return "\b";  case 'f':  	return "\f";  case 'n':  	return "\n";  case 'r':  	return "\r";  case 't':  	return "\t";  default:  	return json.Char.ToString ();  }  
Magic Number,ctstone.Json,JsonTokenizer,C:\repos\ctstone_json\ctstone.Json\JsonTokenizer.cs,ParseEscape,The following statement contains a magic number: switch (json.Char) {  case 'u':  	json.Pos++;  	byte[] bytes = new byte[2];  	for (int i = 0; i < 4; i += 2) {  		int j = json.Pos + i;  		bytes [(bytes.Length - 1) - i / 2] = Byte.Parse (json.Input.Substring (j' 2)' NumberStyles.HexNumber);  	}  	json.Pos += 3;  	return Encoding.Unicode.GetString (bytes);  case 'b':  	return "\b";  case 'f':  	return "\f";  case 'n':  	return "\n";  case 'r':  	return "\r";  case 't':  	return "\t";  default:  	return json.Char.ToString ();  }  
Magic Number,ctstone.Json,JsonTokenizer,C:\repos\ctstone_json\ctstone.Json\JsonTokenizer.cs,ParseEscape,The following statement contains a magic number: for (int i = 0; i < 4; i += 2) {  	int j = json.Pos + i;  	bytes [(bytes.Length - 1) - i / 2] = Byte.Parse (json.Input.Substring (j' 2)' NumberStyles.HexNumber);  }  
Magic Number,ctstone.Json,JsonTokenizer,C:\repos\ctstone_json\ctstone.Json\JsonTokenizer.cs,ParseEscape,The following statement contains a magic number: for (int i = 0; i < 4; i += 2) {  	int j = json.Pos + i;  	bytes [(bytes.Length - 1) - i / 2] = Byte.Parse (json.Input.Substring (j' 2)' NumberStyles.HexNumber);  }  
Magic Number,ctstone.Json,JsonTokenizer,C:\repos\ctstone_json\ctstone.Json\JsonTokenizer.cs,ParseEscape,The following statement contains a magic number: for (int i = 0; i < 4; i += 2) {  	int j = json.Pos + i;  	bytes [(bytes.Length - 1) - i / 2] = Byte.Parse (json.Input.Substring (j' 2)' NumberStyles.HexNumber);  }  
Magic Number,ctstone.Json,JsonTokenizer,C:\repos\ctstone_json\ctstone.Json\JsonTokenizer.cs,ParseEscape,The following statement contains a magic number: for (int i = 0; i < 4; i += 2) {  	int j = json.Pos + i;  	bytes [(bytes.Length - 1) - i / 2] = Byte.Parse (json.Input.Substring (j' 2)' NumberStyles.HexNumber);  }  
Magic Number,ctstone.Json,JsonTokenizer,C:\repos\ctstone_json\ctstone.Json\JsonTokenizer.cs,ParseEscape,The following statement contains a magic number: i += 2
Magic Number,ctstone.Json,JsonTokenizer,C:\repos\ctstone_json\ctstone.Json\JsonTokenizer.cs,ParseEscape,The following statement contains a magic number: bytes [(bytes.Length - 1) - i / 2] = Byte.Parse (json.Input.Substring (j' 2)' NumberStyles.HexNumber);  
Magic Number,ctstone.Json,JsonTokenizer,C:\repos\ctstone_json\ctstone.Json\JsonTokenizer.cs,ParseEscape,The following statement contains a magic number: bytes [(bytes.Length - 1) - i / 2] = Byte.Parse (json.Input.Substring (j' 2)' NumberStyles.HexNumber);  
Magic Number,ctstone.Json,JsonTokenizer,C:\repos\ctstone_json\ctstone.Json\JsonTokenizer.cs,ParseEscape,The following statement contains a magic number: json.Pos += 3;  
Missing Default,ctstone.Json,DynamicList,C:\repos\ctstone_json\ctstone.Json\DynamicList.cs,TryInvokeMember,The following switch statement is missing a default case: switch (binder.Name) {  case "Add":  	if (args.Length != 1)  		throw new InvalidOperationException ();  	_array.Add (args [0]);  	break;  case "Count":  	if (args.Length != 0)  		throw new InvalidOperationException ();  	result = _array.Count;  	break;  }  
