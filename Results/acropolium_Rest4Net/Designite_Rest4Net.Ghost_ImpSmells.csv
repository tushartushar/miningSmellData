Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Rest4Net.Ghost,GhostWebClient,C:\repos\acropolium_Rest4Net\src\Rest4Net.Ghost\GhostWebClient.cs,FindDomainCookies,Cyclomatic complexity of the method is 18
Complex Method,Rest4Net.Ghost.Responses.Implementation,JsonSerializer,C:\repos\acropolium_Rest4Net\src\Rest4Net.Ghost\Responses\Implementation\JsonSerializer.cs,ConvertToJson,Cyclomatic complexity of the method is 13
Long Parameter List,Rest4Net.Ghost,GhostProvider,C:\repos\acropolium_Rest4Net\src\Rest4Net.Ghost\GhostProvider.cs,GhostProvider,The method has 6 parameters.
Long Parameter List,Rest4Net.Ghost,GhostProvider,C:\repos\acropolium_Rest4Net\src\Rest4Net.Ghost\GhostProvider.cs,GhostProvider,The method has 6 parameters.
Long Statement,Rest4Net.Ghost,GhostProvider,C:\repos\acropolium_Rest4Net\src\Rest4Net.Ghost\GhostProvider.cs,GetPosts,The length of the statement  "	return Cmd ("/posts/").WithParameter ("page"' page).WithParameter ("limit"' limit).WithParameter ("status"' ContentStatusHelper.ToGhostString (status)).WithParameter ("staticPages"' withStaticPages.ToString ().ToLower ()).Execute ().To<Posts> (JsonHelper.CheckResponseForError); " is 278.
Long Statement,Rest4Net.Ghost,GhostProvider,C:\repos\acropolium_Rest4Net\src\Rest4Net.Ghost\GhostProvider.cs,GetPost,The length of the statement  "	return Cmd ("/posts/" + id + "/").WithParameter ("status"' ContentStatusHelper.ToGhostString (ContentStatus.All)).Execute ().To<Post> (JsonHelper.CheckResponseForError); " is 169.
Long Statement,Rest4Net.Ghost,GhostProvider,C:\repos\acropolium_Rest4Net\src\Rest4Net.Ghost\GhostProvider.cs,SavePost,The length of the statement  "	return ((post.Id > 0) ? Cmd ("/posts/" + post.Id + "/"' RequestType.Put) : Cmd ("/posts/"' RequestType.Post)).WithBody (post.ToJson ().ToString ()).Execute ().To<Post> (JsonHelper.CheckResponseForError); " is 203.
Empty Catch Block,Rest4Net.Ghost,GhostWebClient,C:\repos\acropolium_Rest4Net\src\Rest4Net.Ghost\GhostWebClient.cs,FindDomainCookies,The method has an empty catch block.
Magic Number,Rest4Net.Ghost,GhostProtocol,C:\repos\acropolium_Rest4Net\src\Rest4Net.Ghost\GhostProtocol.cs,PerformLogin,The following statement contains a magic number: try {  	using (var client = new GhostWebClient ()) {  		client.Login (GetUrl ("/ghost/signin/")' GetUrl ("/ghost/")' Login' Password);  		_token = client.Tag;  		_cookie = client.ConnSid;  		if (_cookie != null)  			_cookie.Path = _cookiePath;  	}  }  catch (WebException exception) {  	if ((int)((HttpWebResponse)exception.Response).StatusCode == 403)  		throw new GhostWrongUsernamePasswordException ();  	throw;  }  
Magic Number,Rest4Net.Ghost,GhostProtocol,C:\repos\acropolium_Rest4Net\src\Rest4Net.Ghost\GhostProtocol.cs,PerformLogin,The following statement contains a magic number: if ((int)((HttpWebResponse)exception.Response).StatusCode == 403)  	throw new GhostWrongUsernamePasswordException ();  
Magic Number,Rest4Net.Ghost,GhostWebClient,C:\repos\acropolium_Rest4Net\src\Rest4Net.Ghost\GhostWebClient.cs,FindDomainCookies,The following statement contains a magic number: for (var i = 0; i < headers.Count; i++) {  	if ("Set-Cookie" != headers.Keys [i])  		continue;  	var rawCookie = headers [i];  	var cookie = new Cookie {  		Path = "/"'  		Domain = response.ResponseUri.Host  	};  	var cookieValues = rawCookie.Split (new[] {  		';'  	});  	foreach (var param in cookieValues) {  		try {  			var paramNameVale = param.Trim ().Split (new[] {  				'='  			});  			paramNameVale [0] = paramNameVale [0].ToLower ();  			switch (paramNameVale [0]) {  			case "domain":  				cookie.Domain = param.Split (new[] {  					'='  				}) [1];  				break;  			case "path":  				cookie.Path = paramNameVale [1];  				break;  			case "expires":  				cookie.Expires = DateTime.Parse (paramNameVale [1]);  				break;  			default:  				if (paramNameVale.Length == 2) {  					cookie.Name = paramNameVale [0];  					cookie.Value = paramNameVale [1];  				}  				else {  					if (paramNameVale [0] == "HttpOnly")  						cookie.HttpOnly = true;  				}  				break;  			}  		}  		// ReSharper disable once EmptyGeneralCatchClause  		catch {  		}  	}  	_cookies [cookie.Name] = cookie;  }  
Magic Number,Rest4Net.Ghost,GhostWebClient,C:\repos\acropolium_Rest4Net\src\Rest4Net.Ghost\GhostWebClient.cs,FindDomainCookies,The following statement contains a magic number: foreach (var param in cookieValues) {  	try {  		var paramNameVale = param.Trim ().Split (new[] {  			'='  		});  		paramNameVale [0] = paramNameVale [0].ToLower ();  		switch (paramNameVale [0]) {  		case "domain":  			cookie.Domain = param.Split (new[] {  				'='  			}) [1];  			break;  		case "path":  			cookie.Path = paramNameVale [1];  			break;  		case "expires":  			cookie.Expires = DateTime.Parse (paramNameVale [1]);  			break;  		default:  			if (paramNameVale.Length == 2) {  				cookie.Name = paramNameVale [0];  				cookie.Value = paramNameVale [1];  			}  			else {  				if (paramNameVale [0] == "HttpOnly")  					cookie.HttpOnly = true;  			}  			break;  		}  	}  	// ReSharper disable once EmptyGeneralCatchClause  	catch {  	}  }  
Magic Number,Rest4Net.Ghost,GhostWebClient,C:\repos\acropolium_Rest4Net\src\Rest4Net.Ghost\GhostWebClient.cs,FindDomainCookies,The following statement contains a magic number: try {  	var paramNameVale = param.Trim ().Split (new[] {  		'='  	});  	paramNameVale [0] = paramNameVale [0].ToLower ();  	switch (paramNameVale [0]) {  	case "domain":  		cookie.Domain = param.Split (new[] {  			'='  		}) [1];  		break;  	case "path":  		cookie.Path = paramNameVale [1];  		break;  	case "expires":  		cookie.Expires = DateTime.Parse (paramNameVale [1]);  		break;  	default:  		if (paramNameVale.Length == 2) {  			cookie.Name = paramNameVale [0];  			cookie.Value = paramNameVale [1];  		}  		else {  			if (paramNameVale [0] == "HttpOnly")  				cookie.HttpOnly = true;  		}  		break;  	}  }  // ReSharper disable once EmptyGeneralCatchClause  catch {  }  
Magic Number,Rest4Net.Ghost,GhostWebClient,C:\repos\acropolium_Rest4Net\src\Rest4Net.Ghost\GhostWebClient.cs,FindDomainCookies,The following statement contains a magic number: switch (paramNameVale [0]) {  case "domain":  	cookie.Domain = param.Split (new[] {  		'='  	}) [1];  	break;  case "path":  	cookie.Path = paramNameVale [1];  	break;  case "expires":  	cookie.Expires = DateTime.Parse (paramNameVale [1]);  	break;  default:  	if (paramNameVale.Length == 2) {  		cookie.Name = paramNameVale [0];  		cookie.Value = paramNameVale [1];  	}  	else {  		if (paramNameVale [0] == "HttpOnly")  			cookie.HttpOnly = true;  	}  	break;  }  
Magic Number,Rest4Net.Ghost,GhostWebClient,C:\repos\acropolium_Rest4Net\src\Rest4Net.Ghost\GhostWebClient.cs,FindDomainCookies,The following statement contains a magic number: if (paramNameVale.Length == 2) {  	cookie.Name = paramNameVale [0];  	cookie.Value = paramNameVale [1];  }  else {  	if (paramNameVale [0] == "HttpOnly")  		cookie.HttpOnly = true;  }  
Magic Number,Rest4Net.Ghost,GhostWebClient,C:\repos\acropolium_Rest4Net\src\Rest4Net.Ghost\GhostWebClient.cs,GetCsrfParamMetaValue,The following statement contains a magic number: foreach (Match match in _metaTagRegEx.Matches (html)) {  	if (match.Groups [1].Value != "csrf-param")  		continue;  	Tag = match.Groups [2].Value;  	break;  }  
Magic Number,Rest4Net.Ghost,GhostWebClient,C:\repos\acropolium_Rest4Net\src\Rest4Net.Ghost\GhostWebClient.cs,GetCsrfParamMetaValue,The following statement contains a magic number: Tag = match.Groups [2].Value;  
Magic Number,Rest4Net.Ghost,JsonHelper,C:\repos\acropolium_Rest4Net\src\Rest4Net.Ghost\JsonHelper.cs,CheckResponseForError,The following statement contains a magic number: try {  	var o = token as JObject;  	if (o != null && CountEnum (o.Properties ()) == 1 && o ["status"].Value<int> () == 403)  		throw new GhostPleaseSignInException ();  }  catch (Exception e) {  	if (e is GhostPleaseSignInException)  		throw;  }  
Magic Number,Rest4Net.Ghost,JsonHelper,C:\repos\acropolium_Rest4Net\src\Rest4Net.Ghost\JsonHelper.cs,CheckResponseForError,The following statement contains a magic number: if (o != null && CountEnum (o.Properties ()) == 1 && o ["status"].Value<int> () == 403)  	throw new GhostPleaseSignInException ();  
