Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,ServiceBrokerDotNet,ServiceBrokerWrapper,C:\repos\jdaigle_servicebroker.net\ServiceBrokerDotNet\ServiceBrokerWrapper.cs,BeginConversation,The method has 5 parameters. Parameters: transaction' initiatorServiceName' targetServiceName' messageContractName' lifetime
Long Parameter List,ServiceBrokerDotNet,ServiceBrokerWrapper,C:\repos\jdaigle_servicebroker.net\ServiceBrokerDotNet\ServiceBrokerWrapper.cs,BeginConversation,The method has 5 parameters. Parameters: transaction' initiatorServiceName' targetServiceName' messageContractName' encryption
Long Parameter List,ServiceBrokerDotNet,ServiceBrokerWrapper,C:\repos\jdaigle_servicebroker.net\ServiceBrokerDotNet\ServiceBrokerWrapper.cs,BeginConversation,The method has 6 parameters. Parameters: transaction' initiatorServiceName' targetServiceName' messageContractName' lifetime' encryption
Long Parameter List,ServiceBrokerDotNet,ServiceBrokerWrapper,C:\repos\jdaigle_servicebroker.net\ServiceBrokerDotNet\ServiceBrokerWrapper.cs,SendOne,The method has 6 parameters. Parameters: transaction' initiatorServiceName' targetServiceName' messageContractName' messageType' body
Long Parameter List,ServiceBrokerDotNet,ServiceBrokerWrapper,C:\repos\jdaigle_servicebroker.net\ServiceBrokerDotNet\ServiceBrokerWrapper.cs,BeginConversationInternal,The method has 6 parameters. Parameters: transaction' initiatorServiceName' targetServiceName' messageContractName' lifetime' encryption
Long Parameter List,ServiceBrokerDotNet,ServiceBrokerWrapper,C:\repos\jdaigle_servicebroker.net\ServiceBrokerDotNet\ServiceBrokerWrapper.cs,EndConversationInternal,The method has 6 parameters. Parameters: transaction' conversationHandle' withError' errorCode' errorDescription' withCleanup
Long Parameter List,ServiceBrokerDotNet,ServiceBrokerWrapper,C:\repos\jdaigle_servicebroker.net\ServiceBrokerDotNet\ServiceBrokerWrapper.cs,SendOneInternal,The method has 6 parameters. Parameters: transaction' initiatorServiceName' targetServiceName' messageContractName' messageType' body
Long Parameter List,ServiceBrokerDotNet,ServiceBrokerWrapper,C:\repos\jdaigle_servicebroker.net\ServiceBrokerDotNet\ServiceBrokerWrapper.cs,ReceiveInternal,The method has 5 parameters. Parameters: transaction' queueName' conversationHandle' wait' waitTimeout
Long Parameter List,ServiceBrokerDotNet,ServiceBusWatcherExtensions,C:\repos\jdaigle_servicebroker.net\ServiceBrokerDotNet\ServiceBusWatcher.cs,GetPoisonMessages,The method has 5 parameters. Parameters: connection' queue' page' maxResults' sortOrder
Long Statement,ServiceBrokerDotNet,ServiceBrokerWrapper,C:\repos\jdaigle_servicebroker.net\ServiceBrokerDotNet\ServiceBrokerWrapper.cs,BeginConversation,The length of the statement  "            return BeginConversationInternal(transaction' initiatorServiceName' targetServiceName' messageContractName' null' null); " is 120.
Long Statement,ServiceBrokerDotNet,ServiceBrokerWrapper,C:\repos\jdaigle_servicebroker.net\ServiceBrokerDotNet\ServiceBrokerWrapper.cs,BeginConversation,The length of the statement  "            return BeginConversationInternal(transaction' initiatorServiceName' targetServiceName' messageContractName' lifetime' null); " is 124.
Long Statement,ServiceBrokerDotNet,ServiceBrokerWrapper,C:\repos\jdaigle_servicebroker.net\ServiceBrokerDotNet\ServiceBrokerWrapper.cs,BeginConversation,The length of the statement  "            return BeginConversationInternal(transaction' initiatorServiceName' targetServiceName' messageContractName' null' encryption); " is 126.
Long Statement,ServiceBrokerDotNet,ServiceBrokerWrapper,C:\repos\jdaigle_servicebroker.net\ServiceBrokerDotNet\ServiceBrokerWrapper.cs,BeginConversation,The length of the statement  "            return BeginConversationInternal(transaction' initiatorServiceName' targetServiceName' messageContractName' lifetime' encryption); " is 130.
Long Statement,ServiceBrokerDotNet,ServiceBrokerWrapper,C:\repos\jdaigle_servicebroker.net\ServiceBrokerDotNet\ServiceBrokerWrapper.cs,CreateServiceAndQueue,The length of the statement  "            query.AppendFormat("IF NOT EXISTS (SELECT * FROM sys.service_queues WHERE name = N'{0}')" + Environment.NewLine' queueName); " is 124.
Long Statement,ServiceBrokerDotNet,ServiceBrokerWrapper,C:\repos\jdaigle_servicebroker.net\ServiceBrokerDotNet\ServiceBrokerWrapper.cs,CreateServiceAndQueue,The length of the statement  "            query.AppendFormat("CREATE QUEUE [dbo].[{0}] WITH STATUS = ON ' RETENTION = OFF ' POISON_MESSAGE_HANDLING (STATUS = OFF)" + Environment.NewLine' queueName); " is 156.
Long Statement,ServiceBrokerDotNet,ServiceBrokerWrapper,C:\repos\jdaigle_servicebroker.net\ServiceBrokerDotNet\ServiceBrokerWrapper.cs,CreateServiceAndQueue,The length of the statement  "            query.AppendFormat("IF NOT EXISTS (SELECT * FROM sys.services WHERE name = N'{0}')" + Environment.NewLine' serviceName); " is 120.
Long Statement,ServiceBrokerDotNet,ServiceBrokerWrapper,C:\repos\jdaigle_servicebroker.net\ServiceBrokerDotNet\ServiceBrokerWrapper.cs,CreateServiceAndQueue,The length of the statement  "            query.AppendFormat("CREATE SERVICE [{0}]  AUTHORIZATION [dbo] ON QUEUE [dbo].[{1}] ([NServiceBusTransportMessageContract])" + Environment.NewLine' serviceName' queueName); " is 171.
Long Statement,ServiceBrokerDotNet,ServiceBrokerWrapper,C:\repos\jdaigle_servicebroker.net\ServiceBrokerDotNet\ServiceBrokerWrapper.cs,BeginConversationInternal,The length of the statement  "                query.Append("BEGIN DIALOG @ch FROM SERVICE " + initiatorServiceName + " TO SERVICE @ts ON CONTRACT @cn WITH ENCRYPTION = "); " is 125.
Long Statement,ServiceBrokerDotNet,ServiceBrokerWrapper,C:\repos\jdaigle_servicebroker.net\ServiceBrokerDotNet\ServiceBrokerWrapper.cs,SendOneInternal,The length of the statement  "            query.Append("BEGIN DIALOG @ch FROM SERVICE " + initiatorServiceName + " TO SERVICE @ts ON CONTRACT @cn WITH ENCRYPTION = OFF;"); " is 129.
Long Statement,ServiceBrokerDotNet,ServiceBrokerWrapper,C:\repos\jdaigle_servicebroker.net\ServiceBrokerDotNet\ServiceBrokerWrapper.cs,QueryMessageCountInternal,The length of the statement  "            cmd.CommandText = "SELECT COUNT(*) FROM " + queueName + " WITH (NOLOCK) WHERE message_type_name = @messageContractName"; " is 120.
Long Statement,ServiceBrokerDotNet,ServiceBusWatcherExtensions,C:\repos\jdaigle_servicebroker.net\ServiceBrokerDotNet\ServiceBusWatcher.cs,GetPoisonMessageCountForQueue,The length of the statement  "                cmd.CommandText = string.Format("SELECT QueueName' COUNT(*) FROM FailedMessage WITH (NOLOCK) WHERE QueueName IN ({0}) GROUP BY QueueName"' paramString); " is 152.
Long Statement,ServiceBrokerDotNet,ServiceBusWatcherExtensions,C:\repos\jdaigle_servicebroker.net\ServiceBrokerDotNet\ServiceBusWatcher.cs,ResendAllPoisonMessages,The length of the statement  "                var top100 = GetPoisonMessages(connection' queue' 1' 100' SortOrder.Ascending).ToList(); // ToList() to buffer into memory and close the reader " is 143.
Magic Number,ServiceBrokerDotNet,Message,C:\repos\jdaigle_servicebroker.net\ServiceBrokerDotNet\Message.cs,Load,The following statement contains a magic number: message.MessageSequenceNumber = reader.GetInt64(2);
Magic Number,ServiceBrokerDotNet,Message,C:\repos\jdaigle_servicebroker.net\ServiceBrokerDotNet\Message.cs,Load,The following statement contains a magic number: message.ServiceName = reader.GetString(3);
Magic Number,ServiceBrokerDotNet,Message,C:\repos\jdaigle_servicebroker.net\ServiceBrokerDotNet\Message.cs,Load,The following statement contains a magic number: message.ServiceContractName = reader.GetString(4);
Magic Number,ServiceBrokerDotNet,Message,C:\repos\jdaigle_servicebroker.net\ServiceBrokerDotNet\Message.cs,Load,The following statement contains a magic number: message.MessageTypeName = reader.GetString(5);
Magic Number,ServiceBrokerDotNet,Message,C:\repos\jdaigle_servicebroker.net\ServiceBrokerDotNet\Message.cs,Load,The following statement contains a magic number: if (!reader.IsDBNull(7))              {                  message.Body = reader.GetSqlBytes(7).Buffer;              }              else                  message.Body = new byte[0];
Magic Number,ServiceBrokerDotNet,Message,C:\repos\jdaigle_servicebroker.net\ServiceBrokerDotNet\Message.cs,Load,The following statement contains a magic number: if (!reader.IsDBNull(7))              {                  message.Body = reader.GetSqlBytes(7).Buffer;              }              else                  message.Body = new byte[0];
Magic Number,ServiceBrokerDotNet,ServiceBrokerWrapper,C:\repos\jdaigle_servicebroker.net\ServiceBrokerDotNet\ServiceBrokerWrapper.cs,BeginConversationInternal,The following statement contains a magic number: param = cmd.Parameters.Add("@ts"' SqlDbType.NVarChar' 256);
Magic Number,ServiceBrokerDotNet,ServiceBrokerWrapper,C:\repos\jdaigle_servicebroker.net\ServiceBrokerDotNet\ServiceBrokerWrapper.cs,BeginConversationInternal,The following statement contains a magic number: if (messageContractName != null)              {                  param = cmd.Parameters.Add("@cn"' SqlDbType.NVarChar' 128);                  param.Value = messageContractName;              }
Magic Number,ServiceBrokerDotNet,ServiceBrokerWrapper,C:\repos\jdaigle_servicebroker.net\ServiceBrokerDotNet\ServiceBrokerWrapper.cs,EndConversationInternal,The following statement contains a magic number: if (withError)              {                  cmd.CommandText += " WITH ERROR = @ec DESCRIPTION = @desc";                  param = cmd.Parameters.Add("@ec"' SqlDbType.Int);                  param.Value = errorCode;                  param = cmd.Parameters.Add("@desc"' SqlDbType.NVarChar' 255);                  param.Value = errorDescription;              }              else if (withCleanup)              {                  cmd.CommandText += " WITH CLEANUP";              }
Magic Number,ServiceBrokerDotNet,ServiceBrokerWrapper,C:\repos\jdaigle_servicebroker.net\ServiceBrokerDotNet\ServiceBrokerWrapper.cs,SendInternal,The following statement contains a magic number: param = cmd.Parameters.Add("@mt"' SqlDbType.NVarChar' 255);
Magic Number,ServiceBrokerDotNet,ServiceBrokerWrapper,C:\repos\jdaigle_servicebroker.net\ServiceBrokerDotNet\ServiceBrokerWrapper.cs,SendOneInternal,The following statement contains a magic number: param = cmd.Parameters.Add("@ts"' SqlDbType.NVarChar' 256);
Magic Number,ServiceBrokerDotNet,ServiceBrokerWrapper,C:\repos\jdaigle_servicebroker.net\ServiceBrokerDotNet\ServiceBrokerWrapper.cs,SendOneInternal,The following statement contains a magic number: param = cmd.Parameters.Add("@cn"' SqlDbType.NVarChar' 128);
Magic Number,ServiceBrokerDotNet,ServiceBrokerWrapper,C:\repos\jdaigle_servicebroker.net\ServiceBrokerDotNet\ServiceBrokerWrapper.cs,SendOneInternal,The following statement contains a magic number: param = cmd.Parameters.Add("@mt"' SqlDbType.NVarChar' 255);
Magic Number,ServiceBrokerDotNet,ServiceBrokerWrapper,C:\repos\jdaigle_servicebroker.net\ServiceBrokerDotNet\ServiceBrokerWrapper.cs,QueryMessageCountInternal,The following statement contains a magic number: var param = cmd.Parameters.Add("@messageContractName"' SqlDbType.NVarChar' 128);
Magic Number,ServiceBrokerDotNet,ServiceBusWatcherExtensions,C:\repos\jdaigle_servicebroker.net\ServiceBrokerDotNet\ServiceBusWatcher.cs,GetPoisonMessages,The following statement contains a magic number: using (var cmd = connection.CreateCommand())              {                  var first = (page * maxResults) - maxResults + 1;                  var last = first + maxResults - 1;                    var paramQueue = cmd.CreateParameter();                  paramQueue.ParameterName = "@queue";                  paramQueue.Value = queue;                  paramQueue.DbType = DbType.String;                  cmd.Parameters.Add(paramQueue);                    var paramFirst = cmd.CreateParameter();                  paramFirst.ParameterName = "@first";                  paramFirst.Value = first;                  paramFirst.DbType = DbType.Int32;                  cmd.Parameters.Add(paramFirst);                    var paramLast = cmd.CreateParameter();                  paramLast.ParameterName = "@last";                  paramLast.Value = last;                  paramLast.DbType = DbType.Int32;                  cmd.Parameters.Add(paramLast);                    cmd.CommandText = string.Format(Query_PosionMessages' sortOrder == SortOrder.Ascending ? "ASC" : "DESC");                  using (var reader = cmd.ExecuteReader())                  {                      while (reader.Read())                      {                          yield return new PoisonMessageInfo()                          {                              MessageId = reader.GetGuid(0)'                              InsertDateTime = reader.GetDateTime(1)'                              Queue = reader.GetString(2)'                              QueueService = reader.GetString(3)'                              OriginService = reader.GetString(4)'                          };                      }                  }              }
Magic Number,ServiceBrokerDotNet,ServiceBusWatcherExtensions,C:\repos\jdaigle_servicebroker.net\ServiceBrokerDotNet\ServiceBusWatcher.cs,GetPoisonMessages,The following statement contains a magic number: using (var cmd = connection.CreateCommand())              {                  var first = (page * maxResults) - maxResults + 1;                  var last = first + maxResults - 1;                    var paramQueue = cmd.CreateParameter();                  paramQueue.ParameterName = "@queue";                  paramQueue.Value = queue;                  paramQueue.DbType = DbType.String;                  cmd.Parameters.Add(paramQueue);                    var paramFirst = cmd.CreateParameter();                  paramFirst.ParameterName = "@first";                  paramFirst.Value = first;                  paramFirst.DbType = DbType.Int32;                  cmd.Parameters.Add(paramFirst);                    var paramLast = cmd.CreateParameter();                  paramLast.ParameterName = "@last";                  paramLast.Value = last;                  paramLast.DbType = DbType.Int32;                  cmd.Parameters.Add(paramLast);                    cmd.CommandText = string.Format(Query_PosionMessages' sortOrder == SortOrder.Ascending ? "ASC" : "DESC");                  using (var reader = cmd.ExecuteReader())                  {                      while (reader.Read())                      {                          yield return new PoisonMessageInfo()                          {                              MessageId = reader.GetGuid(0)'                              InsertDateTime = reader.GetDateTime(1)'                              Queue = reader.GetString(2)'                              QueueService = reader.GetString(3)'                              OriginService = reader.GetString(4)'                          };                      }                  }              }
Magic Number,ServiceBrokerDotNet,ServiceBusWatcherExtensions,C:\repos\jdaigle_servicebroker.net\ServiceBrokerDotNet\ServiceBusWatcher.cs,GetPoisonMessages,The following statement contains a magic number: using (var cmd = connection.CreateCommand())              {                  var first = (page * maxResults) - maxResults + 1;                  var last = first + maxResults - 1;                    var paramQueue = cmd.CreateParameter();                  paramQueue.ParameterName = "@queue";                  paramQueue.Value = queue;                  paramQueue.DbType = DbType.String;                  cmd.Parameters.Add(paramQueue);                    var paramFirst = cmd.CreateParameter();                  paramFirst.ParameterName = "@first";                  paramFirst.Value = first;                  paramFirst.DbType = DbType.Int32;                  cmd.Parameters.Add(paramFirst);                    var paramLast = cmd.CreateParameter();                  paramLast.ParameterName = "@last";                  paramLast.Value = last;                  paramLast.DbType = DbType.Int32;                  cmd.Parameters.Add(paramLast);                    cmd.CommandText = string.Format(Query_PosionMessages' sortOrder == SortOrder.Ascending ? "ASC" : "DESC");                  using (var reader = cmd.ExecuteReader())                  {                      while (reader.Read())                      {                          yield return new PoisonMessageInfo()                          {                              MessageId = reader.GetGuid(0)'                              InsertDateTime = reader.GetDateTime(1)'                              Queue = reader.GetString(2)'                              QueueService = reader.GetString(3)'                              OriginService = reader.GetString(4)'                          };                      }                  }              }
Magic Number,ServiceBrokerDotNet,ServiceBusWatcherExtensions,C:\repos\jdaigle_servicebroker.net\ServiceBrokerDotNet\ServiceBusWatcher.cs,GetPoisonMessage,The following statement contains a magic number: using (var cmd = connection.CreateCommand())              {                  var param = cmd.CreateParameter();                  param.ParameterName = "@messageId";                  param.Value = messageId;                  param.DbType = DbType.Guid;                  cmd.Parameters.Add(param);                  cmd.CommandText = Query_PosionMessage;                  using (var reader = (SqlDataReader)cmd.ExecuteReader())                  {                      while (reader.Read())                      {                          var message = new PoisonMessage()                          {                              Info = new PoisonMessageInfo()                              {                                  MessageId = reader.GetGuid(0)'                                  InsertDateTime = reader.GetDateTime(1)'                                  Queue = reader.GetString(2)'                                  QueueService = reader.GetString(3)'                                  OriginService = reader.GetString(4)'                              }'                              Message = reader.GetString(5) ?? string.Empty'                              ExceptionMessage = reader.GetString(6) ?? string.Empty'                          };                          return message;                      }                      return null;                  }              }
Magic Number,ServiceBrokerDotNet,ServiceBusWatcherExtensions,C:\repos\jdaigle_servicebroker.net\ServiceBrokerDotNet\ServiceBusWatcher.cs,GetPoisonMessage,The following statement contains a magic number: using (var cmd = connection.CreateCommand())              {                  var param = cmd.CreateParameter();                  param.ParameterName = "@messageId";                  param.Value = messageId;                  param.DbType = DbType.Guid;                  cmd.Parameters.Add(param);                  cmd.CommandText = Query_PosionMessage;                  using (var reader = (SqlDataReader)cmd.ExecuteReader())                  {                      while (reader.Read())                      {                          var message = new PoisonMessage()                          {                              Info = new PoisonMessageInfo()                              {                                  MessageId = reader.GetGuid(0)'                                  InsertDateTime = reader.GetDateTime(1)'                                  Queue = reader.GetString(2)'                                  QueueService = reader.GetString(3)'                                  OriginService = reader.GetString(4)'                              }'                              Message = reader.GetString(5) ?? string.Empty'                              ExceptionMessage = reader.GetString(6) ?? string.Empty'                          };                          return message;                      }                      return null;                  }              }
Magic Number,ServiceBrokerDotNet,ServiceBusWatcherExtensions,C:\repos\jdaigle_servicebroker.net\ServiceBrokerDotNet\ServiceBusWatcher.cs,GetPoisonMessage,The following statement contains a magic number: using (var cmd = connection.CreateCommand())              {                  var param = cmd.CreateParameter();                  param.ParameterName = "@messageId";                  param.Value = messageId;                  param.DbType = DbType.Guid;                  cmd.Parameters.Add(param);                  cmd.CommandText = Query_PosionMessage;                  using (var reader = (SqlDataReader)cmd.ExecuteReader())                  {                      while (reader.Read())                      {                          var message = new PoisonMessage()                          {                              Info = new PoisonMessageInfo()                              {                                  MessageId = reader.GetGuid(0)'                                  InsertDateTime = reader.GetDateTime(1)'                                  Queue = reader.GetString(2)'                                  QueueService = reader.GetString(3)'                                  OriginService = reader.GetString(4)'                              }'                              Message = reader.GetString(5) ?? string.Empty'                              ExceptionMessage = reader.GetString(6) ?? string.Empty'                          };                          return message;                      }                      return null;                  }              }
Magic Number,ServiceBrokerDotNet,ServiceBusWatcherExtensions,C:\repos\jdaigle_servicebroker.net\ServiceBrokerDotNet\ServiceBusWatcher.cs,GetPoisonMessage,The following statement contains a magic number: using (var cmd = connection.CreateCommand())              {                  var param = cmd.CreateParameter();                  param.ParameterName = "@messageId";                  param.Value = messageId;                  param.DbType = DbType.Guid;                  cmd.Parameters.Add(param);                  cmd.CommandText = Query_PosionMessage;                  using (var reader = (SqlDataReader)cmd.ExecuteReader())                  {                      while (reader.Read())                      {                          var message = new PoisonMessage()                          {                              Info = new PoisonMessageInfo()                              {                                  MessageId = reader.GetGuid(0)'                                  InsertDateTime = reader.GetDateTime(1)'                                  Queue = reader.GetString(2)'                                  QueueService = reader.GetString(3)'                                  OriginService = reader.GetString(4)'                              }'                              Message = reader.GetString(5) ?? string.Empty'                              ExceptionMessage = reader.GetString(6) ?? string.Empty'                          };                          return message;                      }                      return null;                  }              }
Magic Number,ServiceBrokerDotNet,ServiceBusWatcherExtensions,C:\repos\jdaigle_servicebroker.net\ServiceBrokerDotNet\ServiceBusWatcher.cs,GetPoisonMessage,The following statement contains a magic number: using (var cmd = connection.CreateCommand())              {                  var param = cmd.CreateParameter();                  param.ParameterName = "@messageId";                  param.Value = messageId;                  param.DbType = DbType.Guid;                  cmd.Parameters.Add(param);                  cmd.CommandText = Query_PosionMessage;                  using (var reader = (SqlDataReader)cmd.ExecuteReader())                  {                      while (reader.Read())                      {                          var message = new PoisonMessage()                          {                              Info = new PoisonMessageInfo()                              {                                  MessageId = reader.GetGuid(0)'                                  InsertDateTime = reader.GetDateTime(1)'                                  Queue = reader.GetString(2)'                                  QueueService = reader.GetString(3)'                                  OriginService = reader.GetString(4)'                              }'                              Message = reader.GetString(5) ?? string.Empty'                              ExceptionMessage = reader.GetString(6) ?? string.Empty'                          };                          return message;                      }                      return null;                  }              }
Magic Number,ServiceBrokerDotNet,ServiceBusWatcherExtensions,C:\repos\jdaigle_servicebroker.net\ServiceBrokerDotNet\ServiceBusWatcher.cs,ResendAllPoisonMessages,The following statement contains a magic number: while (count > 0)              {                  var top100 = GetPoisonMessages(connection' queue' 1' 100' SortOrder.Ascending).ToList(); // ToList() to buffer into memory and close the reader                  foreach (var item in top100)                  {                      if (string.IsNullOrWhiteSpace(item.OriginService))                      {                          // Cannot resend messages without origin service                          continue;                      }                      ResendPoisonMessage(connection' item.MessageId' item.OriginService);                  }                  count = count - 100;              }
Magic Number,ServiceBrokerDotNet,ServiceBusWatcherExtensions,C:\repos\jdaigle_servicebroker.net\ServiceBrokerDotNet\ServiceBusWatcher.cs,ResendAllPoisonMessages,The following statement contains a magic number: while (count > 0)              {                  var top100 = GetPoisonMessages(connection' queue' 1' 100' SortOrder.Ascending).ToList(); // ToList() to buffer into memory and close the reader                  foreach (var item in top100)                  {                      if (string.IsNullOrWhiteSpace(item.OriginService))                      {                          // Cannot resend messages without origin service                          continue;                      }                      ResendPoisonMessage(connection' item.MessageId' item.OriginService);                  }                  count = count - 100;              }
