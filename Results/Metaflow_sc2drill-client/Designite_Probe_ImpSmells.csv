Implementation smell,Namespace,Class,File,Method,Description
Long Method,Probe,MainForm,C:\repos\Metaflow_sc2drill-client\Probe\MainForm.cs,OnCustomEvent,The method has 113 lines of code.
Long Method,Probe.Engine,Controller,C:\repos\Metaflow_sc2drill-client\Probe\Engine\Controller.cs,OnCustomEvent,The method has 176 lines of code.
Long Method,Probe.Game,UserSettings,C:\repos\Metaflow_sc2drill-client\Probe\Game\UserSettings.cs,Load,The method has 161 lines of code.
Complex Method,Probe,UIController,C:\repos\Metaflow_sc2drill-client\Probe\UIController.cs,OverlayStateControllerDoWork,Cyclomatic complexity of the method is 8
Complex Method,Probe,MainForm,C:\repos\Metaflow_sc2drill-client\Probe\MainForm.cs,OnCustomEvent,Cyclomatic complexity of the method is 93
Complex Method,Probe,MainForm,C:\repos\Metaflow_sc2drill-client\Probe\MainForm.cs,trayIcon_BalloonTipClicked,Cyclomatic complexity of the method is 8
Complex Method,Probe.BuildOrders,BuildOrderHandler,C:\repos\Metaflow_sc2drill-client\Probe\BuildOrders\BuildOrderHandler.cs,OnCustomEvent,Cyclomatic complexity of the method is 8
Complex Method,Probe.BuildOrders,BuildOrderHandler,C:\repos\Metaflow_sc2drill-client\Probe\BuildOrders\BuildOrderHandler.cs,Start,Cyclomatic complexity of the method is 13
Complex Method,Probe.BuildOrders,BuildOrderHandler,C:\repos\Metaflow_sc2drill-client\Probe\BuildOrders\BuildOrderHandler.cs,Interrupt,Cyclomatic complexity of the method is 12
Complex Method,Probe.Engine,Controller,C:\repos\Metaflow_sc2drill-client\Probe\Engine\Controller.cs,InitializeConfiguration,Cyclomatic complexity of the method is 9
Complex Method,Probe.Engine,Controller,C:\repos\Metaflow_sc2drill-client\Probe\Engine\Controller.cs,UpdateResourcesCapture,Cyclomatic complexity of the method is 20
Complex Method,Probe.Engine,Controller,C:\repos\Metaflow_sc2drill-client\Probe\Engine\Controller.cs,ProcessKeysMatchEvent,Cyclomatic complexity of the method is 16
Complex Method,Probe.Engine,Controller,C:\repos\Metaflow_sc2drill-client\Probe\Engine\Controller.cs,OnCustomEvent,Cyclomatic complexity of the method is 134
Complex Method,Probe.Estimators,BoostNotifier,C:\repos\Metaflow_sc2drill-client\Probe\Estimators\BoostNotifier.cs,ProcessKeysMatchEvent,Cyclomatic complexity of the method is 8
Complex Method,Probe.Estimators,BoostNotifier,C:\repos\Metaflow_sc2drill-client\Probe\Estimators\BoostNotifier.cs,PrepareNotification,Cyclomatic complexity of the method is 12
Complex Method,Probe.Estimators,TapWatcher,C:\repos\Metaflow_sc2drill-client\Probe\Estimators\TapWatcher.cs,ProcessKeysMatchEvent,Cyclomatic complexity of the method is 8
Complex Method,Probe.Game,UserSettings,C:\repos\Metaflow_sc2drill-client\Probe\Game\UserSettings.cs,Load,Cyclomatic complexity of the method is 33
Complex Method,Probe.Tools,SC2GearsController,C:\repos\Metaflow_sc2drill-client\Probe\Tools\SC2GearsController.cs,UnZipFile,Cyclomatic complexity of the method is 14
Complex Method,Probe.Utility,KeyboardEventsHandler,C:\repos\Metaflow_sc2drill-client\Probe\Utility\KeyboardEventsHandler.cs,HookKeyDown,Cyclomatic complexity of the method is 8
Complex Method,Probe.Utility,UserActivityHook,C:\repos\Metaflow_sc2drill-client\Probe\Utility\UserActivityHook.cs,MouseHookProc,Cyclomatic complexity of the method is 12
Long Parameter List,Probe.Engine,Controller,C:\repos\Metaflow_sc2drill-client\Probe\Engine\Controller.cs,CreateTimeEvents,The method has 5 parameters.
Long Parameter List,Probe.Utility,KeyboardLeds,C:\repos\Metaflow_sc2drill-client\Probe\Utility\KeyboardLedControl.cs,CreateFile,The method has 7 parameters.
Long Parameter List,Probe.Utility,KeyboardLeds,C:\repos\Metaflow_sc2drill-client\Probe\Utility\KeyboardLedControl.cs,DeviceIoControl,The method has 8 parameters.
Long Parameter List,Probe.Utility,UserActivityHook,C:\repos\Metaflow_sc2drill-client\Probe\Utility\UserActivityHook.cs,ToAscii,The method has 5 parameters.
Long Statement,Probe,MainForm,C:\repos\Metaflow_sc2drill-client\Probe\MainForm.cs,CheckSettings,The length of the statement  "		Settings.Default.ReplayFolders = Path.Combine (Environment.GetFolderPath (Environment.SpecialFolder.Personal)' "StarCraft II"); " is 127.
Long Statement,Probe,MainForm,C:\repos\Metaflow_sc2drill-client\Probe\MainForm.cs,iExit_Click,The length of the statement  "		if (MessageBox.Show (Resources.cancel_recording_confirmation' Application.ProductName' MessageBoxButtons.YesNo' MessageBoxIcon.Question) == DialogResult.No) { " is 158.
Long Statement,Probe,MainForm,C:\repos\Metaflow_sc2drill-client\Probe\MainForm.cs,restartToolStripMenuItem_Click,The length of the statement  "		if (MessageBox.Show (Resources.cancel_recording_confirmation' Application.ProductName' MessageBoxButtons.YesNo' MessageBoxIcon.Question) == DialogResult.No) { " is 158.
Long Statement,Probe,Program,C:\repos\Metaflow_sc2drill-client\Probe\Program.cs,UnhandledException,The length of the statement  "			MessageBox.Show (@"Fatal Error. Application terminated"' Application.ProductName' MessageBoxButtons.OK' MessageBoxIcon.Stop); " is 125.
Long Statement,Probe.Engine,ConnectionTask,C:\repos\Metaflow_sc2drill-client\Probe\Engine\ConnectionTask.cs,Run,The length of the statement  "	if (ServerConnection.Instance.Connected || (ServerConnection.Instance.ConnectionMode == ServerConnection.ConnectionModeEnum.DoNotConnect)) " is 138.
Long Statement,Probe.Engine,Controller,C:\repos\Metaflow_sc2drill-client\Probe\Engine\Controller.cs,InitializeConfiguration,The length of the statement  "			keys.AddListener (UserSettings.Instance.NotifyBoostsKeys' (int)BoostNotifier.BoostKeyboardEvent.Restart' boostNotifier); " is 120.
Long Statement,Probe.Engine,Controller,C:\repos\Metaflow_sc2drill-client\Probe\Engine\Controller.cs,UpdateResourcesCapture,The length of the statement  "			UIController.UpdateResourcesState (Convert.ToInt32 (recognized [0])' Convert.ToInt32 (recognized [1])' supply' supplyCap); " is 122.
Long Statement,Probe.Engine,Controller,C:\repos\Metaflow_sc2drill-client\Probe\Engine\Controller.cs,Start,The length of the statement  "	CreateTimeEvents (_tapWatcher' UserSettings.Instance.Production' GameTimeEvent.GameTimeEventType.ProductionNotification' EventsType.ProductionMissingNotify); " is 157.
Long Statement,Probe.Engine,Controller,C:\repos\Metaflow_sc2drill-client\Probe\Engine\Controller.cs,Start,The length of the statement  "	CreateTimeEvents (_mapKeyEstimator' UserSettings.Instance.Map' GameTimeEvent.GameTimeEventType.MapNotification' EventsType.MapControlMissingNotify); " is 148.
Long Statement,Probe.Engine,Controller,C:\repos\Metaflow_sc2drill-client\Probe\Engine\Controller.cs,Start,The length of the statement  "	CreateTimeEvents (_resourcesKeyEstimator' UserSettings.Instance.Resources' GameTimeEvent.GameTimeEventType.ResourcesNotification' EventsType.ResourcesControlMissingNotify); " is 172.
Long Statement,Probe.Engine,Controller,C:\repos\Metaflow_sc2drill-client\Probe\Engine\Controller.cs,OnCustomEvent,The length of the statement  "		UIController.ShowNotification (NotificationType.Map' (UserSettings.Instance.Map.Type & KeyWatcherSettings.WatchType.Measure) == 0); " is 131.
Long Statement,Probe.Engine,Controller,C:\repos\Metaflow_sc2drill-client\Probe\Engine\Controller.cs,OnCustomEvent,The length of the statement  "		UIController.ShowNotification (NotificationType.Resources' (UserSettings.Instance.Resources.Type & KeyWatcherSettings.WatchType.Measure) == 0); " is 143.
Long Statement,Probe.Engine,Controller,C:\repos\Metaflow_sc2drill-client\Probe\Engine\Controller.cs,OnCustomEvent,The length of the statement  "		UIController.ShowNotification (NotificationType.Production' (UserSettings.Instance.Production.Type & KeyWatcherSettings.WatchType.Measure) == 0); " is 145.
Long Statement,Probe.Estimators,BoostNotifier,C:\repos\Metaflow_sc2drill-client\Probe\Estimators\BoostNotifier.cs,RestartChronoPeriod,The length of the statement  "	CreateEvent (GameClock.Instance.GetGameTime ().Add (GameClock.Instance.ConvertEnergyToGameTime (Constants.BoostEnergy [Race]))); " is 128.
Long Statement,Probe.Estimators,BoostNotifier,C:\repos\Metaflow_sc2drill-client\Probe\Estimators\BoostNotifier.cs,PrepareNotification,The length of the statement  "		var boostPeriod = GameClock.Instance.ConvertEnergyToGameTime (Constants.BoostEnergy [PlayerRace.Protoss]).TotalMilliseconds; " is 124.
Long Statement,Probe.Game,GameTimeEventHandler,C:\repos\Metaflow_sc2drill-client\Probe\Game\GameTimeEventHandler.cs,CheckEvents,The length of the statement  "	_timer.Interval = Math.Max (GameClock.Instance.ConvertToRealTime (nextEventTime.Subtract (currentTime)).TotalMilliseconds' 100); " is 128.
Long Statement,Probe.Game,UserSettings,C:\repos\Metaflow_sc2drill-client\Probe\Game\UserSettings.cs,Load,The length of the statement  "	Speed = (GameClock.GameSpeedEnum)Enum.Parse (typeof(GameClock.GameSpeedEnum)' jw.GetString ("data.settings.speed"' "Faster")' true); " is 132.
Long Statement,Probe.Game,UserSettings,C:\repos\Metaflow_sc2drill-client\Probe\Game\UserSettings.cs,Load,The length of the statement  "	var key = j ["data"] ["settings"] ["map"] ["key"].Type == JTokenType.Null ? Keys.None : KeysHelper.StringToKey (j ["data"] ["settings"] ["map"] ["key"].Value<string> ()); " is 170.
Long Statement,Probe.Game,UserSettings,C:\repos\Metaflow_sc2drill-client\Probe\Game\UserSettings.cs,Load,The length of the statement  "	var start = new TimeSpan (0' 0' j ["data"] ["settings"] ["map"] ["start"].Type == JTokenType.Null ? 0 : j ["data"] ["settings"] ["map"] ["start"].Value<int> ()); " is 161.
Long Statement,Probe.Game,UserSettings,C:\repos\Metaflow_sc2drill-client\Probe\Game\UserSettings.cs,Load,The length of the statement  "	var notify = new TimeSpan (0' 0' j ["data"] ["settings"] ["map"] ["notify"].Type == JTokenType.Null ? 0 : j ["data"] ["settings"] ["map"] ["notify"].Value<int> ()); " is 164.
Long Statement,Probe.Game,UserSettings,C:\repos\Metaflow_sc2drill-client\Probe\Game\UserSettings.cs,Load,The length of the statement  "	var target = new TimeSpan (0' 0' j ["data"] ["settings"] ["map"] ["target"].Type == JTokenType.Null ? 0 : j ["data"] ["settings"] ["map"] ["target"].Value<int> ()); " is 164.
Long Statement,Probe.Game,UserSettings,C:\repos\Metaflow_sc2drill-client\Probe\Game\UserSettings.cs,Load,The length of the statement  "	key = j ["data"] ["settings"] ["resources"] ["key"].Type == JTokenType.Null ? Keys.None : KeysHelper.StringToKey (j ["data"] ["settings"] ["resources"] ["key"].Value<string> ()); " is 178.
Long Statement,Probe.Game,UserSettings,C:\repos\Metaflow_sc2drill-client\Probe\Game\UserSettings.cs,Load,The length of the statement  "	start = new TimeSpan (0' 0' j ["data"] ["settings"] ["resources"] ["start"].Type == JTokenType.Null ? 0 : j ["data"] ["settings"] ["resources"] ["start"].Value<int> ()); " is 169.
Long Statement,Probe.Game,UserSettings,C:\repos\Metaflow_sc2drill-client\Probe\Game\UserSettings.cs,Load,The length of the statement  "	notify = new TimeSpan (0' 0' j ["data"] ["settings"] ["resources"] ["notify"].Type == JTokenType.Null ? 0 : j ["data"] ["settings"] ["resources"] ["notify"].Value<int> ()); " is 172.
Long Statement,Probe.Game,UserSettings,C:\repos\Metaflow_sc2drill-client\Probe\Game\UserSettings.cs,Load,The length of the statement  "	target = new TimeSpan (0' 0' j ["data"] ["settings"] ["resources"] ["target"].Type == JTokenType.Null ? 0 : j ["data"] ["settings"] ["resources"] ["target"].Value<int> ()); " is 172.
Long Statement,Probe.Game,UserSettings,C:\repos\Metaflow_sc2drill-client\Probe\Game\UserSettings.cs,Load,The length of the statement  "	start = new TimeSpan (0' 0' j ["data"] ["settings"] ["production"] ["start"].Type == JTokenType.Null ? 0 : j ["data"] ["settings"] ["production"] ["start"].Value<int> ()); " is 171.
Long Statement,Probe.Game,UserSettings,C:\repos\Metaflow_sc2drill-client\Probe\Game\UserSettings.cs,Load,The length of the statement  "	notify = new TimeSpan (0' 0' j ["data"] ["settings"] ["production"] ["notify"].Type == JTokenType.Null ? 0 : j ["data"] ["settings"] ["production"] ["notify"].Value<int> ()); " is 174.
Long Statement,Probe.Game,UserSettings,C:\repos\Metaflow_sc2drill-client\Probe\Game\UserSettings.cs,Load,The length of the statement  "	target = new TimeSpan (0' 0' j ["data"] ["settings"] ["production"] ["target"].Type == JTokenType.Null ? 0 : j ["data"] ["settings"] ["production"] ["target"].Value<int> ()); " is 174.
Long Statement,Probe.Game,UserSettings,C:\repos\Metaflow_sc2drill-client\Probe\Game\UserSettings.cs,Load,The length of the statement  "	if ((j ["data"] ["settings"] ["build_orders"] != null) && (j ["data"] ["settings"] ["build_orders"].Type == JTokenType.Array)) { " is 128.
Long Statement,Probe.Game,UserSettings,C:\repos\Metaflow_sc2drill-client\Probe\Game\UserSettings.cs,Load,The length of the statement  "					newBoItem.Time = (new TimeSpan (0' 0' boItem ["time"].Type == JTokenType.Null ? 0 : boItem ["time"].Value<int> ())).Subtract (new TimeSpan (1000)); " is 147.
Long Statement,Probe.Utility,KeyboardLeds,C:\repos\Metaflow_sc2drill-client\Probe\Utility\KeyboardLedControl.cs,Set,The length of the statement  "	if (DeviceIoControl (hKbdDev' IoctlKeyboardQueryIndicators' &inBuff' dataLen' &outBuff' dataLen' &retLength' IntPtr.Zero)) { " is 124.
Long Statement,Probe.Utility,KeyboardLeds,C:\repos\Metaflow_sc2drill-client\Probe\Utility\KeyboardLedControl.cs,Get,The length of the statement  "	if (DeviceIoControl (hKbdDev' IoctlKeyboardQueryIndicators' &inBuff' dataLen' &outBuff' dataLen' &retLength' IntPtr.Zero)) { " is 124.
Long Statement,Probe.Utility,CustomEvents,C:\repos\Metaflow_sc2drill-client\Probe\Utility\CustomEvents.cs,AddLog,The length of the statement  "			using (var writer = new StreamWriter (Path.GetDirectoryName (System.Reflection.Assembly.GetExecutingAssembly ().Location) + "\\app.log"' true)) { " is 145.
Long Statement,Probe.Utility,CustomEvents,C:\repos\Metaflow_sc2drill-client\Probe\Utility\CustomEvents.cs,AddException,The length of the statement  "			using (var writer = new StreamWriter (Path.GetDirectoryName (System.Reflection.Assembly.GetExecutingAssembly ().Location) + "\\error.log"' true)) { " is 147.
Long Statement,Probe.Utility,ScreenMap,C:\repos\Metaflow_sc2drill-client\Probe\Utility\ScreenMap.cs,Get,The length of the statement  "		var map = new ScreenMap (new Rectangle (new Point (screenSize.Width - s.Width - offsetTopRight.X' offsetTopRight.Y)' s)); " is 121.
Long Statement,Probe.Utility,UserActivityHook,C:\repos\Metaflow_sc2drill-client\Probe\Utility\UserActivityHook.cs,Start,The length of the statement  "		hMouseHook = SetWindowsHookEx (WH_MOUSE_LL' MouseHookProcedure' Marshal.GetHINSTANCE (Assembly.GetExecutingAssembly ().GetModules () [0])' 0); " is 142.
Long Statement,Probe.Utility,UserActivityHook,C:\repos\Metaflow_sc2drill-client\Probe\Utility\UserActivityHook.cs,Start,The length of the statement  "			//Returns the error code returned by the last unmanaged function called using platform invoke that has the DllImportAttribute.SetLastError flag set.  " is 148.
Long Statement,Probe.Utility,UserActivityHook,C:\repos\Metaflow_sc2drill-client\Probe\Utility\UserActivityHook.cs,Start,The length of the statement  "		hKeyboardHook = SetWindowsHookEx (WH_KEYBOARD_LL' KeyboardHookProcedure' Marshal.GetHINSTANCE (Assembly.GetExecutingAssembly ().GetModules () [0])' 0); " is 151.
Long Statement,Probe.Utility,UserActivityHook,C:\repos\Metaflow_sc2drill-client\Probe\Utility\UserActivityHook.cs,Start,The length of the statement  "			//Returns the error code returned by the last unmanaged function called using platform invoke that has the DllImportAttribute.SetLastError flag set.  " is 148.
Long Statement,Probe.Utility,UserActivityHook,C:\repos\Metaflow_sc2drill-client\Probe\Utility\UserActivityHook.cs,Stop,The length of the statement  "			//Returns the error code returned by the last unmanaged function called using platform invoke that has the DllImportAttribute.SetLastError flag set.  " is 148.
Long Statement,Probe.Utility,UserActivityHook,C:\repos\Metaflow_sc2drill-client\Probe\Utility\UserActivityHook.cs,Stop,The length of the statement  "			//Returns the error code returned by the last unmanaged function called using platform invoke that has the DllImportAttribute.SetLastError flag set.  " is 148.
Long Statement,Probe.Utility,UserActivityHook,C:\repos\Metaflow_sc2drill-client\Probe\Utility\UserActivityHook.cs,KeyboardHookProc,The length of the statement  "		KeyboardHookStruct MyKeyboardHookStruct = (KeyboardHookStruct)Marshal.PtrToStructure (lParam' typeof(KeyboardHookStruct)); " is 122.
Long Statement,Probe.Utility,UserActivityHook,C:\repos\Metaflow_sc2drill-client\Probe\Utility\UserActivityHook.cs,KeyboardHookProc,The length of the statement  "			if (ToAscii (MyKeyboardHookStruct.vkCode' MyKeyboardHookStruct.scanCode' keyState' inBuffer' MyKeyboardHookStruct.flags) == 1) { " is 128.
Long Statement,Probe.WebClient,QueryString,C:\repos\Metaflow_sc2drill-client\Probe\WebClient\QueryString.cs,ToString,The length of the statement  "				builder.Append ((builder.Length == 0) ? "?" : "&").Append (Uri.EscapeDataString (base.Keys [i])).Append ("=").Append (val); " is 123.
Long Statement,Probe.WebClient,WebLayer,C:\repos\Metaflow_sc2drill-client\Probe\WebClient\WebLayer.cs,OpenBrowser,The length of the statement  "		MessageBox.Show (string.Format ("Cannot open default browser. Please open\n\n{0}\n\nin your browser"' s)' Application.ProductName' MessageBoxButtons.OK' MessageBoxIcon.Exclamation); " is 181.
Complex Conditional,Probe.Utility,UserActivityHook,C:\repos\Metaflow_sc2drill-client\Probe\Utility\UserActivityHook.cs,KeyboardHookProc,The conditional expression  "(nCode >= 0) && (KeyDown != null || KeyUp != null || KeyPress != null)"  is complex.
Empty Catch Block,Probe.Utility,JTokenWrap,C:\repos\Metaflow_sc2drill-client\Probe\Utility\JTokenWrap.cs,GetInteger,The method has an empty catch block.
Empty Catch Block,Probe.Utility,CustomEvents,C:\repos\Metaflow_sc2drill-client\Probe\Utility\CustomEvents.cs,AddLog,The method has an empty catch block.
Magic Number,Probe,UIController,C:\repos\Metaflow_sc2drill-client\Probe\UIController.cs,OverlayStateControllerDoWork,The following statement contains a magic number: try {  	var overlayHandle = (IntPtr)e.Argument;  	while (!_overlayStateController.CancellationPending) {  		var procs = Process.GetProcessesByName ("SC2");  		if (procs.Length > 0) {  			isSc2Started = true;  			if (UserSettings.Instance.SyncronizeOverlaysWithGame) {  				var sc2Process = procs [0];  				var sc2Handle = sc2Process.MainWindowHandle;  				var currentFocused = GetForegroundWindow ();  				if (currentFocused == sc2Handle || currentFocused == overlayHandle) {  					uiWindow.ShowAllOverlays ();  				}  				else {  					uiWindow.HideAllOverlays ();  				}  			}  		}  		else {  			if (UserSettings.Instance.SyncronizeOverlaysWithGame) {  				uiWindow.HideAllOverlays ();  			}  			if (isSc2Started && UserSettings.Instance.ShutDownWithSc2) {  				CustomEvents.Instance.Add (EventsType.CloseRequest);  				CustomEvents.Instance.Add (EventsType.Close);  				return;  			}  		}  		Thread.Sleep (500);  	}  }  catch (Exception ex) {  	CustomEvents.Instance.AddException (EventsType.GeneralError' "Overlay synchronization"' ex);  	return;  }  
Magic Number,Probe,UIController,C:\repos\Metaflow_sc2drill-client\Probe\UIController.cs,OverlayStateControllerDoWork,The following statement contains a magic number: while (!_overlayStateController.CancellationPending) {  	var procs = Process.GetProcessesByName ("SC2");  	if (procs.Length > 0) {  		isSc2Started = true;  		if (UserSettings.Instance.SyncronizeOverlaysWithGame) {  			var sc2Process = procs [0];  			var sc2Handle = sc2Process.MainWindowHandle;  			var currentFocused = GetForegroundWindow ();  			if (currentFocused == sc2Handle || currentFocused == overlayHandle) {  				uiWindow.ShowAllOverlays ();  			}  			else {  				uiWindow.HideAllOverlays ();  			}  		}  	}  	else {  		if (UserSettings.Instance.SyncronizeOverlaysWithGame) {  			uiWindow.HideAllOverlays ();  		}  		if (isSc2Started && UserSettings.Instance.ShutDownWithSc2) {  			CustomEvents.Instance.Add (EventsType.CloseRequest);  			CustomEvents.Instance.Add (EventsType.Close);  			return;  		}  	}  	Thread.Sleep (500);  }  
Magic Number,Probe,UIController,C:\repos\Metaflow_sc2drill-client\Probe\UIController.cs,OverlayStateControllerDoWork,The following statement contains a magic number: Thread.Sleep (500);  
Magic Number,Probe,MainForm,C:\repos\Metaflow_sc2drill-client\Probe\MainForm.cs,Form1_Load,The following statement contains a magic number: if (!IsFirstInstance ()) {  	CustomEvents.Instance.Add (EventsType.AnotherInstanceExists);  	Thread.Sleep (4000);  	Close ();  	return;  }  
Magic Number,Probe,MainForm,C:\repos\Metaflow_sc2drill-client\Probe\MainForm.cs,Form1_Load,The following statement contains a magic number: Thread.Sleep (4000);  
Magic Number,Probe,MainForm,C:\repos\Metaflow_sc2drill-client\Probe\MainForm.cs,_animationTimer_Elapsed,The following statement contains a magic number: if (_trayAnimationIndex > 3)  	_trayAnimationIndex = 1;  
Magic Number,Probe,MainForm,C:\repos\Metaflow_sc2drill-client\Probe\MainForm.cs,ShowBalloonTip,The following statement contains a magic number: if (_balloonTipShowed) {  	var t = new Timer (1000) {  		AutoReset = false  	};  	t.Elapsed += delegate {  		ShowBalloonTip (text' tipAction' url);  	};  	t.Start ();  	return;  }  
Magic Number,Probe,MainForm,C:\repos\Metaflow_sc2drill-client\Probe\MainForm.cs,ShowBalloonTip,The following statement contains a magic number: trayIcon.ShowBalloonTip (4000);  
Magic Number,Probe,MainForm,C:\repos\Metaflow_sc2drill-client\Probe\MainForm.cs,trayIcon_MouseUp,The following statement contains a magic number: trayIcon.ShowBalloonTip (4000);  
Magic Number,Probe,Program,C:\repos\Metaflow_sc2drill-client\Probe\Program.cs,UnhandledException,The following statement contains a magic number: try {  	if (_errorInProcess)  		return;  	//prevent recursion in error processing  	_errorInProcess = true;  	CustomEvents.Instance.AddException (EventsType.GeneralError' ""' e);  	Thread.Sleep (5000);  }  catch {  	try {  		MessageBox.Show (@"Fatal Error. Application terminated"' Application.ProductName' MessageBoxButtons.OK' MessageBoxIcon.Stop);  	}  	finally {  		Application.Exit ();  	}  }  
Magic Number,Probe,Program,C:\repos\Metaflow_sc2drill-client\Probe\Program.cs,UnhandledException,The following statement contains a magic number: Thread.Sleep (5000);  
Magic Number,Probe.Engine,AsyncTaskProcessor,C:\repos\Metaflow_sc2drill-client\Probe\Engine\AsyncTaskProcessor.cs,TaskProcessorDoWork,The following statement contains a magic number: while (queue.Count == 0) {  	Thread.Sleep (500);  }  
Magic Number,Probe.Engine,AsyncTaskProcessor,C:\repos\Metaflow_sc2drill-client\Probe\Engine\AsyncTaskProcessor.cs,TaskProcessorDoWork,The following statement contains a magic number: Thread.Sleep (500);  
Magic Number,Probe.Engine,Controller,C:\repos\Metaflow_sc2drill-client\Probe\Engine\Controller.cs,UpdateResourcesCapture,The following statement contains a magic number: try {  	var capture = ScreenCapture.GetArea (ScreenMap.Get (ScreenCapture.ScreenSize).MineralArea);  	if (raceDetector.Race == PlayerRace.None)  		raceDetector.DetectByImage (capture);  	var b = ImageProcessor.ThresholdGrays (200' 40' capture);  	var recognized = ImageProcessor.Recognize (b);  	switch (recognized.Count) {  	case 4:  		var supply = Convert.ToInt32 (recognized [2]);  		var supplyCap = Convert.ToInt32 (recognized [3]);  		UIController.UpdateResourcesState (Convert.ToInt32 (recognized [0])' Convert.ToInt32 (recognized [1])' supply' supplyCap);  		CustomEvents.Instance.AddLog (String.Format ("{0}"' string.Join ("|"' recognized.ToArray ())));  		GameLog.Instance.SupplyBlock = (supplyCap != 200) & (supply >= supplyCap);  		break;  	case 2:  		//red supply  		UIController.UpdateResourcesState (Convert.ToInt32 (recognized [0])' Convert.ToInt32 (recognized [1])' 0' 0);  		GameLog.Instance.SupplyBlock = true;  		break;  	default:  		#if DEBUG  		int i;  		counter += 1;  		i = counter;  		UIController.UpdateResourcesState (i' i - 20' i / 5' 50);  		Debug.Print (i.ToString ());  		#endif  		break;  	}  }  catch (Exception ex) {  	CustomEvents.Instance.AddLog (ex.StackTrace);  }  
Magic Number,Probe.Engine,Controller,C:\repos\Metaflow_sc2drill-client\Probe\Engine\Controller.cs,UpdateResourcesCapture,The following statement contains a magic number: try {  	var capture = ScreenCapture.GetArea (ScreenMap.Get (ScreenCapture.ScreenSize).MineralArea);  	if (raceDetector.Race == PlayerRace.None)  		raceDetector.DetectByImage (capture);  	var b = ImageProcessor.ThresholdGrays (200' 40' capture);  	var recognized = ImageProcessor.Recognize (b);  	switch (recognized.Count) {  	case 4:  		var supply = Convert.ToInt32 (recognized [2]);  		var supplyCap = Convert.ToInt32 (recognized [3]);  		UIController.UpdateResourcesState (Convert.ToInt32 (recognized [0])' Convert.ToInt32 (recognized [1])' supply' supplyCap);  		CustomEvents.Instance.AddLog (String.Format ("{0}"' string.Join ("|"' recognized.ToArray ())));  		GameLog.Instance.SupplyBlock = (supplyCap != 200) & (supply >= supplyCap);  		break;  	case 2:  		//red supply  		UIController.UpdateResourcesState (Convert.ToInt32 (recognized [0])' Convert.ToInt32 (recognized [1])' 0' 0);  		GameLog.Instance.SupplyBlock = true;  		break;  	default:  		#if DEBUG  		int i;  		counter += 1;  		i = counter;  		UIController.UpdateResourcesState (i' i - 20' i / 5' 50);  		Debug.Print (i.ToString ());  		#endif  		break;  	}  }  catch (Exception ex) {  	CustomEvents.Instance.AddLog (ex.StackTrace);  }  
Magic Number,Probe.Engine,Controller,C:\repos\Metaflow_sc2drill-client\Probe\Engine\Controller.cs,UpdateResourcesCapture,The following statement contains a magic number: try {  	var capture = ScreenCapture.GetArea (ScreenMap.Get (ScreenCapture.ScreenSize).MineralArea);  	if (raceDetector.Race == PlayerRace.None)  		raceDetector.DetectByImage (capture);  	var b = ImageProcessor.ThresholdGrays (200' 40' capture);  	var recognized = ImageProcessor.Recognize (b);  	switch (recognized.Count) {  	case 4:  		var supply = Convert.ToInt32 (recognized [2]);  		var supplyCap = Convert.ToInt32 (recognized [3]);  		UIController.UpdateResourcesState (Convert.ToInt32 (recognized [0])' Convert.ToInt32 (recognized [1])' supply' supplyCap);  		CustomEvents.Instance.AddLog (String.Format ("{0}"' string.Join ("|"' recognized.ToArray ())));  		GameLog.Instance.SupplyBlock = (supplyCap != 200) & (supply >= supplyCap);  		break;  	case 2:  		//red supply  		UIController.UpdateResourcesState (Convert.ToInt32 (recognized [0])' Convert.ToInt32 (recognized [1])' 0' 0);  		GameLog.Instance.SupplyBlock = true;  		break;  	default:  		#if DEBUG  		int i;  		counter += 1;  		i = counter;  		UIController.UpdateResourcesState (i' i - 20' i / 5' 50);  		Debug.Print (i.ToString ());  		#endif  		break;  	}  }  catch (Exception ex) {  	CustomEvents.Instance.AddLog (ex.StackTrace);  }  
Magic Number,Probe.Engine,Controller,C:\repos\Metaflow_sc2drill-client\Probe\Engine\Controller.cs,UpdateResourcesCapture,The following statement contains a magic number: try {  	var capture = ScreenCapture.GetArea (ScreenMap.Get (ScreenCapture.ScreenSize).MineralArea);  	if (raceDetector.Race == PlayerRace.None)  		raceDetector.DetectByImage (capture);  	var b = ImageProcessor.ThresholdGrays (200' 40' capture);  	var recognized = ImageProcessor.Recognize (b);  	switch (recognized.Count) {  	case 4:  		var supply = Convert.ToInt32 (recognized [2]);  		var supplyCap = Convert.ToInt32 (recognized [3]);  		UIController.UpdateResourcesState (Convert.ToInt32 (recognized [0])' Convert.ToInt32 (recognized [1])' supply' supplyCap);  		CustomEvents.Instance.AddLog (String.Format ("{0}"' string.Join ("|"' recognized.ToArray ())));  		GameLog.Instance.SupplyBlock = (supplyCap != 200) & (supply >= supplyCap);  		break;  	case 2:  		//red supply  		UIController.UpdateResourcesState (Convert.ToInt32 (recognized [0])' Convert.ToInt32 (recognized [1])' 0' 0);  		GameLog.Instance.SupplyBlock = true;  		break;  	default:  		#if DEBUG  		int i;  		counter += 1;  		i = counter;  		UIController.UpdateResourcesState (i' i - 20' i / 5' 50);  		Debug.Print (i.ToString ());  		#endif  		break;  	}  }  catch (Exception ex) {  	CustomEvents.Instance.AddLog (ex.StackTrace);  }  
Magic Number,Probe.Engine,Controller,C:\repos\Metaflow_sc2drill-client\Probe\Engine\Controller.cs,UpdateResourcesCapture,The following statement contains a magic number: try {  	var capture = ScreenCapture.GetArea (ScreenMap.Get (ScreenCapture.ScreenSize).MineralArea);  	if (raceDetector.Race == PlayerRace.None)  		raceDetector.DetectByImage (capture);  	var b = ImageProcessor.ThresholdGrays (200' 40' capture);  	var recognized = ImageProcessor.Recognize (b);  	switch (recognized.Count) {  	case 4:  		var supply = Convert.ToInt32 (recognized [2]);  		var supplyCap = Convert.ToInt32 (recognized [3]);  		UIController.UpdateResourcesState (Convert.ToInt32 (recognized [0])' Convert.ToInt32 (recognized [1])' supply' supplyCap);  		CustomEvents.Instance.AddLog (String.Format ("{0}"' string.Join ("|"' recognized.ToArray ())));  		GameLog.Instance.SupplyBlock = (supplyCap != 200) & (supply >= supplyCap);  		break;  	case 2:  		//red supply  		UIController.UpdateResourcesState (Convert.ToInt32 (recognized [0])' Convert.ToInt32 (recognized [1])' 0' 0);  		GameLog.Instance.SupplyBlock = true;  		break;  	default:  		#if DEBUG  		int i;  		counter += 1;  		i = counter;  		UIController.UpdateResourcesState (i' i - 20' i / 5' 50);  		Debug.Print (i.ToString ());  		#endif  		break;  	}  }  catch (Exception ex) {  	CustomEvents.Instance.AddLog (ex.StackTrace);  }  
Magic Number,Probe.Engine,Controller,C:\repos\Metaflow_sc2drill-client\Probe\Engine\Controller.cs,UpdateResourcesCapture,The following statement contains a magic number: try {  	var capture = ScreenCapture.GetArea (ScreenMap.Get (ScreenCapture.ScreenSize).MineralArea);  	if (raceDetector.Race == PlayerRace.None)  		raceDetector.DetectByImage (capture);  	var b = ImageProcessor.ThresholdGrays (200' 40' capture);  	var recognized = ImageProcessor.Recognize (b);  	switch (recognized.Count) {  	case 4:  		var supply = Convert.ToInt32 (recognized [2]);  		var supplyCap = Convert.ToInt32 (recognized [3]);  		UIController.UpdateResourcesState (Convert.ToInt32 (recognized [0])' Convert.ToInt32 (recognized [1])' supply' supplyCap);  		CustomEvents.Instance.AddLog (String.Format ("{0}"' string.Join ("|"' recognized.ToArray ())));  		GameLog.Instance.SupplyBlock = (supplyCap != 200) & (supply >= supplyCap);  		break;  	case 2:  		//red supply  		UIController.UpdateResourcesState (Convert.ToInt32 (recognized [0])' Convert.ToInt32 (recognized [1])' 0' 0);  		GameLog.Instance.SupplyBlock = true;  		break;  	default:  		#if DEBUG  		int i;  		counter += 1;  		i = counter;  		UIController.UpdateResourcesState (i' i - 20' i / 5' 50);  		Debug.Print (i.ToString ());  		#endif  		break;  	}  }  catch (Exception ex) {  	CustomEvents.Instance.AddLog (ex.StackTrace);  }  
Magic Number,Probe.Engine,Controller,C:\repos\Metaflow_sc2drill-client\Probe\Engine\Controller.cs,UpdateResourcesCapture,The following statement contains a magic number: try {  	var capture = ScreenCapture.GetArea (ScreenMap.Get (ScreenCapture.ScreenSize).MineralArea);  	if (raceDetector.Race == PlayerRace.None)  		raceDetector.DetectByImage (capture);  	var b = ImageProcessor.ThresholdGrays (200' 40' capture);  	var recognized = ImageProcessor.Recognize (b);  	switch (recognized.Count) {  	case 4:  		var supply = Convert.ToInt32 (recognized [2]);  		var supplyCap = Convert.ToInt32 (recognized [3]);  		UIController.UpdateResourcesState (Convert.ToInt32 (recognized [0])' Convert.ToInt32 (recognized [1])' supply' supplyCap);  		CustomEvents.Instance.AddLog (String.Format ("{0}"' string.Join ("|"' recognized.ToArray ())));  		GameLog.Instance.SupplyBlock = (supplyCap != 200) & (supply >= supplyCap);  		break;  	case 2:  		//red supply  		UIController.UpdateResourcesState (Convert.ToInt32 (recognized [0])' Convert.ToInt32 (recognized [1])' 0' 0);  		GameLog.Instance.SupplyBlock = true;  		break;  	default:  		#if DEBUG  		int i;  		counter += 1;  		i = counter;  		UIController.UpdateResourcesState (i' i - 20' i / 5' 50);  		Debug.Print (i.ToString ());  		#endif  		break;  	}  }  catch (Exception ex) {  	CustomEvents.Instance.AddLog (ex.StackTrace);  }  
Magic Number,Probe.Engine,Controller,C:\repos\Metaflow_sc2drill-client\Probe\Engine\Controller.cs,UpdateResourcesCapture,The following statement contains a magic number: try {  	var capture = ScreenCapture.GetArea (ScreenMap.Get (ScreenCapture.ScreenSize).MineralArea);  	if (raceDetector.Race == PlayerRace.None)  		raceDetector.DetectByImage (capture);  	var b = ImageProcessor.ThresholdGrays (200' 40' capture);  	var recognized = ImageProcessor.Recognize (b);  	switch (recognized.Count) {  	case 4:  		var supply = Convert.ToInt32 (recognized [2]);  		var supplyCap = Convert.ToInt32 (recognized [3]);  		UIController.UpdateResourcesState (Convert.ToInt32 (recognized [0])' Convert.ToInt32 (recognized [1])' supply' supplyCap);  		CustomEvents.Instance.AddLog (String.Format ("{0}"' string.Join ("|"' recognized.ToArray ())));  		GameLog.Instance.SupplyBlock = (supplyCap != 200) & (supply >= supplyCap);  		break;  	case 2:  		//red supply  		UIController.UpdateResourcesState (Convert.ToInt32 (recognized [0])' Convert.ToInt32 (recognized [1])' 0' 0);  		GameLog.Instance.SupplyBlock = true;  		break;  	default:  		#if DEBUG  		int i;  		counter += 1;  		i = counter;  		UIController.UpdateResourcesState (i' i - 20' i / 5' 50);  		Debug.Print (i.ToString ());  		#endif  		break;  	}  }  catch (Exception ex) {  	CustomEvents.Instance.AddLog (ex.StackTrace);  }  
Magic Number,Probe.Engine,Controller,C:\repos\Metaflow_sc2drill-client\Probe\Engine\Controller.cs,UpdateResourcesCapture,The following statement contains a magic number: try {  	var capture = ScreenCapture.GetArea (ScreenMap.Get (ScreenCapture.ScreenSize).MineralArea);  	if (raceDetector.Race == PlayerRace.None)  		raceDetector.DetectByImage (capture);  	var b = ImageProcessor.ThresholdGrays (200' 40' capture);  	var recognized = ImageProcessor.Recognize (b);  	switch (recognized.Count) {  	case 4:  		var supply = Convert.ToInt32 (recognized [2]);  		var supplyCap = Convert.ToInt32 (recognized [3]);  		UIController.UpdateResourcesState (Convert.ToInt32 (recognized [0])' Convert.ToInt32 (recognized [1])' supply' supplyCap);  		CustomEvents.Instance.AddLog (String.Format ("{0}"' string.Join ("|"' recognized.ToArray ())));  		GameLog.Instance.SupplyBlock = (supplyCap != 200) & (supply >= supplyCap);  		break;  	case 2:  		//red supply  		UIController.UpdateResourcesState (Convert.ToInt32 (recognized [0])' Convert.ToInt32 (recognized [1])' 0' 0);  		GameLog.Instance.SupplyBlock = true;  		break;  	default:  		#if DEBUG  		int i;  		counter += 1;  		i = counter;  		UIController.UpdateResourcesState (i' i - 20' i / 5' 50);  		Debug.Print (i.ToString ());  		#endif  		break;  	}  }  catch (Exception ex) {  	CustomEvents.Instance.AddLog (ex.StackTrace);  }  
Magic Number,Probe.Engine,Controller,C:\repos\Metaflow_sc2drill-client\Probe\Engine\Controller.cs,UpdateResourcesCapture,The following statement contains a magic number: try {  	var capture = ScreenCapture.GetArea (ScreenMap.Get (ScreenCapture.ScreenSize).MineralArea);  	if (raceDetector.Race == PlayerRace.None)  		raceDetector.DetectByImage (capture);  	var b = ImageProcessor.ThresholdGrays (200' 40' capture);  	var recognized = ImageProcessor.Recognize (b);  	switch (recognized.Count) {  	case 4:  		var supply = Convert.ToInt32 (recognized [2]);  		var supplyCap = Convert.ToInt32 (recognized [3]);  		UIController.UpdateResourcesState (Convert.ToInt32 (recognized [0])' Convert.ToInt32 (recognized [1])' supply' supplyCap);  		CustomEvents.Instance.AddLog (String.Format ("{0}"' string.Join ("|"' recognized.ToArray ())));  		GameLog.Instance.SupplyBlock = (supplyCap != 200) & (supply >= supplyCap);  		break;  	case 2:  		//red supply  		UIController.UpdateResourcesState (Convert.ToInt32 (recognized [0])' Convert.ToInt32 (recognized [1])' 0' 0);  		GameLog.Instance.SupplyBlock = true;  		break;  	default:  		#if DEBUG  		int i;  		counter += 1;  		i = counter;  		UIController.UpdateResourcesState (i' i - 20' i / 5' 50);  		Debug.Print (i.ToString ());  		#endif  		break;  	}  }  catch (Exception ex) {  	CustomEvents.Instance.AddLog (ex.StackTrace);  }  
Magic Number,Probe.Engine,Controller,C:\repos\Metaflow_sc2drill-client\Probe\Engine\Controller.cs,UpdateResourcesCapture,The following statement contains a magic number: switch (recognized.Count) {  case 4:  	var supply = Convert.ToInt32 (recognized [2]);  	var supplyCap = Convert.ToInt32 (recognized [3]);  	UIController.UpdateResourcesState (Convert.ToInt32 (recognized [0])' Convert.ToInt32 (recognized [1])' supply' supplyCap);  	CustomEvents.Instance.AddLog (String.Format ("{0}"' string.Join ("|"' recognized.ToArray ())));  	GameLog.Instance.SupplyBlock = (supplyCap != 200) & (supply >= supplyCap);  	break;  case 2:  	//red supply  	UIController.UpdateResourcesState (Convert.ToInt32 (recognized [0])' Convert.ToInt32 (recognized [1])' 0' 0);  	GameLog.Instance.SupplyBlock = true;  	break;  default:  	#if DEBUG  	int i;  	counter += 1;  	i = counter;  	UIController.UpdateResourcesState (i' i - 20' i / 5' 50);  	Debug.Print (i.ToString ());  	#endif  	break;  }  
Magic Number,Probe.Engine,Controller,C:\repos\Metaflow_sc2drill-client\Probe\Engine\Controller.cs,UpdateResourcesCapture,The following statement contains a magic number: switch (recognized.Count) {  case 4:  	var supply = Convert.ToInt32 (recognized [2]);  	var supplyCap = Convert.ToInt32 (recognized [3]);  	UIController.UpdateResourcesState (Convert.ToInt32 (recognized [0])' Convert.ToInt32 (recognized [1])' supply' supplyCap);  	CustomEvents.Instance.AddLog (String.Format ("{0}"' string.Join ("|"' recognized.ToArray ())));  	GameLog.Instance.SupplyBlock = (supplyCap != 200) & (supply >= supplyCap);  	break;  case 2:  	//red supply  	UIController.UpdateResourcesState (Convert.ToInt32 (recognized [0])' Convert.ToInt32 (recognized [1])' 0' 0);  	GameLog.Instance.SupplyBlock = true;  	break;  default:  	#if DEBUG  	int i;  	counter += 1;  	i = counter;  	UIController.UpdateResourcesState (i' i - 20' i / 5' 50);  	Debug.Print (i.ToString ());  	#endif  	break;  }  
Magic Number,Probe.Engine,Controller,C:\repos\Metaflow_sc2drill-client\Probe\Engine\Controller.cs,UpdateResourcesCapture,The following statement contains a magic number: switch (recognized.Count) {  case 4:  	var supply = Convert.ToInt32 (recognized [2]);  	var supplyCap = Convert.ToInt32 (recognized [3]);  	UIController.UpdateResourcesState (Convert.ToInt32 (recognized [0])' Convert.ToInt32 (recognized [1])' supply' supplyCap);  	CustomEvents.Instance.AddLog (String.Format ("{0}"' string.Join ("|"' recognized.ToArray ())));  	GameLog.Instance.SupplyBlock = (supplyCap != 200) & (supply >= supplyCap);  	break;  case 2:  	//red supply  	UIController.UpdateResourcesState (Convert.ToInt32 (recognized [0])' Convert.ToInt32 (recognized [1])' 0' 0);  	GameLog.Instance.SupplyBlock = true;  	break;  default:  	#if DEBUG  	int i;  	counter += 1;  	i = counter;  	UIController.UpdateResourcesState (i' i - 20' i / 5' 50);  	Debug.Print (i.ToString ());  	#endif  	break;  }  
Magic Number,Probe.Engine,Controller,C:\repos\Metaflow_sc2drill-client\Probe\Engine\Controller.cs,UpdateResourcesCapture,The following statement contains a magic number: switch (recognized.Count) {  case 4:  	var supply = Convert.ToInt32 (recognized [2]);  	var supplyCap = Convert.ToInt32 (recognized [3]);  	UIController.UpdateResourcesState (Convert.ToInt32 (recognized [0])' Convert.ToInt32 (recognized [1])' supply' supplyCap);  	CustomEvents.Instance.AddLog (String.Format ("{0}"' string.Join ("|"' recognized.ToArray ())));  	GameLog.Instance.SupplyBlock = (supplyCap != 200) & (supply >= supplyCap);  	break;  case 2:  	//red supply  	UIController.UpdateResourcesState (Convert.ToInt32 (recognized [0])' Convert.ToInt32 (recognized [1])' 0' 0);  	GameLog.Instance.SupplyBlock = true;  	break;  default:  	#if DEBUG  	int i;  	counter += 1;  	i = counter;  	UIController.UpdateResourcesState (i' i - 20' i / 5' 50);  	Debug.Print (i.ToString ());  	#endif  	break;  }  
Magic Number,Probe.Engine,Controller,C:\repos\Metaflow_sc2drill-client\Probe\Engine\Controller.cs,UpdateResourcesCapture,The following statement contains a magic number: switch (recognized.Count) {  case 4:  	var supply = Convert.ToInt32 (recognized [2]);  	var supplyCap = Convert.ToInt32 (recognized [3]);  	UIController.UpdateResourcesState (Convert.ToInt32 (recognized [0])' Convert.ToInt32 (recognized [1])' supply' supplyCap);  	CustomEvents.Instance.AddLog (String.Format ("{0}"' string.Join ("|"' recognized.ToArray ())));  	GameLog.Instance.SupplyBlock = (supplyCap != 200) & (supply >= supplyCap);  	break;  case 2:  	//red supply  	UIController.UpdateResourcesState (Convert.ToInt32 (recognized [0])' Convert.ToInt32 (recognized [1])' 0' 0);  	GameLog.Instance.SupplyBlock = true;  	break;  default:  	#if DEBUG  	int i;  	counter += 1;  	i = counter;  	UIController.UpdateResourcesState (i' i - 20' i / 5' 50);  	Debug.Print (i.ToString ());  	#endif  	break;  }  
Magic Number,Probe.Engine,Controller,C:\repos\Metaflow_sc2drill-client\Probe\Engine\Controller.cs,UpdateResourcesCapture,The following statement contains a magic number: switch (recognized.Count) {  case 4:  	var supply = Convert.ToInt32 (recognized [2]);  	var supplyCap = Convert.ToInt32 (recognized [3]);  	UIController.UpdateResourcesState (Convert.ToInt32 (recognized [0])' Convert.ToInt32 (recognized [1])' supply' supplyCap);  	CustomEvents.Instance.AddLog (String.Format ("{0}"' string.Join ("|"' recognized.ToArray ())));  	GameLog.Instance.SupplyBlock = (supplyCap != 200) & (supply >= supplyCap);  	break;  case 2:  	//red supply  	UIController.UpdateResourcesState (Convert.ToInt32 (recognized [0])' Convert.ToInt32 (recognized [1])' 0' 0);  	GameLog.Instance.SupplyBlock = true;  	break;  default:  	#if DEBUG  	int i;  	counter += 1;  	i = counter;  	UIController.UpdateResourcesState (i' i - 20' i / 5' 50);  	Debug.Print (i.ToString ());  	#endif  	break;  }  
Magic Number,Probe.Engine,Controller,C:\repos\Metaflow_sc2drill-client\Probe\Engine\Controller.cs,UpdateResourcesCapture,The following statement contains a magic number: switch (recognized.Count) {  case 4:  	var supply = Convert.ToInt32 (recognized [2]);  	var supplyCap = Convert.ToInt32 (recognized [3]);  	UIController.UpdateResourcesState (Convert.ToInt32 (recognized [0])' Convert.ToInt32 (recognized [1])' supply' supplyCap);  	CustomEvents.Instance.AddLog (String.Format ("{0}"' string.Join ("|"' recognized.ToArray ())));  	GameLog.Instance.SupplyBlock = (supplyCap != 200) & (supply >= supplyCap);  	break;  case 2:  	//red supply  	UIController.UpdateResourcesState (Convert.ToInt32 (recognized [0])' Convert.ToInt32 (recognized [1])' 0' 0);  	GameLog.Instance.SupplyBlock = true;  	break;  default:  	#if DEBUG  	int i;  	counter += 1;  	i = counter;  	UIController.UpdateResourcesState (i' i - 20' i / 5' 50);  	Debug.Print (i.ToString ());  	#endif  	break;  }  
Magic Number,Probe.Engine,Controller,C:\repos\Metaflow_sc2drill-client\Probe\Engine\Controller.cs,UpdateResourcesCapture,The following statement contains a magic number: switch (recognized.Count) {  case 4:  	var supply = Convert.ToInt32 (recognized [2]);  	var supplyCap = Convert.ToInt32 (recognized [3]);  	UIController.UpdateResourcesState (Convert.ToInt32 (recognized [0])' Convert.ToInt32 (recognized [1])' supply' supplyCap);  	CustomEvents.Instance.AddLog (String.Format ("{0}"' string.Join ("|"' recognized.ToArray ())));  	GameLog.Instance.SupplyBlock = (supplyCap != 200) & (supply >= supplyCap);  	break;  case 2:  	//red supply  	UIController.UpdateResourcesState (Convert.ToInt32 (recognized [0])' Convert.ToInt32 (recognized [1])' 0' 0);  	GameLog.Instance.SupplyBlock = true;  	break;  default:  	#if DEBUG  	int i;  	counter += 1;  	i = counter;  	UIController.UpdateResourcesState (i' i - 20' i / 5' 50);  	Debug.Print (i.ToString ());  	#endif  	break;  }  
Magic Number,Probe.Engine,Controller,C:\repos\Metaflow_sc2drill-client\Probe\Engine\Controller.cs,UpdateResourcesCapture,The following statement contains a magic number: GameLog.Instance.SupplyBlock = (supplyCap != 200) & (supply >= supplyCap);  
Magic Number,Probe.Engine,Controller,C:\repos\Metaflow_sc2drill-client\Probe\Engine\Controller.cs,UpdateResourcesCapture,The following statement contains a magic number: UIController.UpdateResourcesState (i' i - 20' i / 5' 50);  
Magic Number,Probe.Engine,Controller,C:\repos\Metaflow_sc2drill-client\Probe\Engine\Controller.cs,UpdateResourcesCapture,The following statement contains a magic number: UIController.UpdateResourcesState (i' i - 20' i / 5' 50);  
Magic Number,Probe.Engine,Controller,C:\repos\Metaflow_sc2drill-client\Probe\Engine\Controller.cs,UpdateResourcesCapture,The following statement contains a magic number: UIController.UpdateResourcesState (i' i - 20' i / 5' 50);  
Magic Number,Probe.Engine,Controller,C:\repos\Metaflow_sc2drill-client\Probe\Engine\Controller.cs,Start,The following statement contains a magic number: if (UserSettings.Instance.CaptureResources) {  	var e = new GameTimeRecurringEvent () {  		EventType = GameTimeEvent.GameTimeEventType.UpdateResourcesCapture'  		Enabled = true'  		RepeatInterval = new TimeSpan (0' 0' 0' 1)'  		Time = new TimeSpan (0' 0' 0' 10)  	};  	e.OnEvent += UpdateResourcesCapture;  	GameTimeEventHandler.Instance.AddEvent (e);  }  
Magic Number,Probe.Engine,Controller,C:\repos\Metaflow_sc2drill-client\Probe\Engine\Controller.cs,OnCustomEvent,The following statement contains a magic number: switch (eventsType) {  #region Disconnected  case EventsType.Disconnected:  	KeyboardEventsHandler.Instance.Stop ();  	replayFileWatcher.EnableRaisingEvents = false;  	eventFileWatcher.EnableRaisingEvents = false;  	UIController.SetStateIndicator (ProbeState.Offline);  	Stop ();  	break;  #endregion  #region ConnectingState  case EventsType.ConnectingState:  	UIController.SetStateIndicator (ProbeState.NotReady);  	break;  #endregion  case EventsType.DisconnectedState:  	UIController.SetStateIndicator (ProbeState.Offline);  	break;  case EventsType.Connected:  	InitializeConfiguration ();  	KeyboardEventsHandler.Instance.Start ();  	if (UserSettings.Instance.UseLedIndicator)  		KeyboardLeds.Set (Keys.Scroll' false);  	replayFileWatcher.EnableRaisingEvents = true;  	//watch for replay anyway  	eventFileWatcher.EnableRaisingEvents = true;  	UIController.SetStateIndicator (ProbeState.Ready);  	UIController.SetCurrentRace (PlayerRace.Terran);  	//until we find specific race  	//test  	#if DEBUG  	CustomEvents.Instance.Add (EventsType.GameGoingToStart);  	#endif  	break;  case EventsType.RecordingStopped:  	//_rightClickWatcher.Stop();  	if (UserSettings.Instance.UseLedIndicator) {  		KeyboardLeds.StopBlink ();  		KeyboardLeds.DelayedSet (Keys.Scroll' false' 600);  	}  	UIController.Stop ();  	break;  case EventsType.RecordingCompleted:  	if (UserSettings.Instance.RecordingSoundNotify) {  		Speaker.ClearPlaylist ();  		Speaker.Speak ("recording completed.wav");  	}  	UIController.ShowStateIndicator ();  	break;  case EventsType.RecordingPaused:  	if (UserSettings.Instance.UseLedIndicator)  		KeyboardLeds.StartBlink (Keys.Scroll' 500);  	if (UserSettings.Instance.RecordingSoundNotify) {  		Speaker.ClearPlaylist ();  		Speaker.Speak ("recording paused.wav");  	}  	UIController.HideAll ();  	break;  #region EventsType.CloseRequest  case EventsType.CloseRequest:  	UIController.HideStateIndicator ();  	GameDetected = false;  	Stop ();  	ServerConnection.Instance.CloseSession ();  	if (UserSettings.Instance.UseLedIndicator) {  		KeyboardLeds.Set (Keys.Scroll' Control.IsKeyLocked (Keys.Scroll));  		KeyboardLeds.Set (Keys.CapsLock' Control.IsKeyLocked (Keys.CapsLock));  		KeyboardLeds.Set (Keys.NumLock' Control.IsKeyLocked (Keys.NumLock));  	}  	break;  #endregion  case EventsType.RecordingStarted:  case EventsType.RecordingUnPaused:  	if (UserSettings.Instance.UseLedIndicator) {  		KeyboardLeds.StopBlink ();  		KeyboardLeds.DelayedSet (Keys.Scroll' true' 600);  	}  	if (UserSettings.Instance.RecordingSoundNotify) {  		Speaker.ClearPlaylist ();  		Speaker.Speak ("recording started.wav");  	}  	if (UserSettings.Instance.DisplayButtonsOverlay) {  		UIController.SetHotkeyBarMode (ButtonsOverlayMode.Banner);  		UIController.ShowHotkeyBar ();  	}  	else {  		UIController.HideHotkeyBar ();  	}  	if (UserSettings.Instance.CaptureResources) {  		UIController.ShowResourceBars ();  	}  	break;  case EventsType.MapControlMissingNotify:  	Speaker.Speak ("notify minimap.wav");  	UIController.ShowNotification (NotificationType.Map' (UserSettings.Instance.Map.Type & KeyWatcherSettings.WatchType.Measure) == 0);  	break;  case EventsType.MapChecked:  	GameLog.Instance.AddEntry ("map"' "checked"' (JToken)details);  	UIController.HideNotification (NotificationType.Map);  	break;  case EventsType.ResourcesControlMissingNotify:  	Speaker.Speak ("notify resources.wav");  	UIController.ShowNotification (NotificationType.Resources' (UserSettings.Instance.Resources.Type & KeyWatcherSettings.WatchType.Measure) == 0);  	break;  case EventsType.ResourcesChecked:  	GameLog.Instance.AddEntry ("resources"' "checked"' (JToken)details);  	UIController.HideNotification (NotificationType.Resources);  	break;  case EventsType.ProductionMissingNotify:  	Speaker.Speak ("notify production.wav");  	UIController.ShowNotification (NotificationType.Production' (UserSettings.Instance.Production.Type & KeyWatcherSettings.WatchType.Measure) == 0);  	break;  case EventsType.ProductionChecked:  	GameLog.Instance.AddEntry ("tap"' "cycle completed"' (JToken)details);  	UIController.HideNotification (NotificationType.Resources);  	break;  case EventsType.WillRestartForUpdate:  case EventsType.ClientNeedToBeReinstalled:  	ServerConnection.Instance.ConnectionMode = ServerConnection.ConnectionModeEnum.DoNotConnect;  	break;  case EventsType.ReplayFileCreated:  	GameDetected = false;  	#if DEBUG  	GameDetected = true;  	#endif  	if (GameClock.Instance.Started)  		EndRecording ();  	break;  case EventsType.ReplayFileUploaded:  	replayFileWatcher.EnableRaisingEvents = true;  	break;  case EventsType.GameGoingToStart:  	if (GameDetected)  		return;  	GameDetected = true;  	if (UserSettings.Instance.DisplayButtonsOverlay) {  		UIController.SetHotKeys (GetHotkeysForOverlay ());  		UIController.SetHotkeyBarMode (ButtonsOverlayMode.HotKeys);  		UIController.ShowHotkeyBar ();  	}  	UIController.HideStateIndicator ();  	if (UserSettings.Instance.StartWithAnykey)  		KeyboardEventsHandler.Instance.Hook.KeyPress += AnykeyStart;  	break;  case EventsType.BuildOrderItemComing:  	UIController.SetBuildOrderItemState ((int)details' BOItem.BOItemState.Coming);  	break;  case EventsType.BuildOrderItemPrepareExecution:  	UIController.SetBuildOrderItemState ((int)details' BOItem.BOItemState.PrepareExecution);  	break;  case EventsType.BuildOrderItemTriggered:  	if (UserSettings.Instance.PronounceBuildOrder)  		Speaker.Speak (BuildOrderHandler.Instance.GetItemText ((int)details)' true);  	UIController.SetBuildOrderItemState ((int)details' BOItem.BOItemState.Current);  	//UIController.BuildOrderItemTriggered((int) details);  	Debug.Print ("build order step {0} triggered"' details);  	break;  case EventsType.BuildOrderItemFinished:  	UIController.SetBuildOrderItemState ((int)details' BOItem.BOItemState.Finished);  	break;  case EventsType.Restart:  	Program.RestartApp ();  	break;  case EventsType.RaceDetected:  	CustomEvents.Instance.AddLog (string.Format ("detected race {0}"' raceDetector.Race));  	boostNotifier.Race = raceDetector.Race;  	UIController.SetCurrentRace (raceDetector.Race);  	boostNotifier.PrepareNotification ();  	break;  case EventsType.BoostNotify:  	UIController.ShowNotification (NotificationType.Boost' true);  	Speaker.Speak (Constants.BoostNotification [raceDetector.Race]);  	break;  }  
Magic Number,Probe.Engine,Controller,C:\repos\Metaflow_sc2drill-client\Probe\Engine\Controller.cs,OnCustomEvent,The following statement contains a magic number: switch (eventsType) {  #region Disconnected  case EventsType.Disconnected:  	KeyboardEventsHandler.Instance.Stop ();  	replayFileWatcher.EnableRaisingEvents = false;  	eventFileWatcher.EnableRaisingEvents = false;  	UIController.SetStateIndicator (ProbeState.Offline);  	Stop ();  	break;  #endregion  #region ConnectingState  case EventsType.ConnectingState:  	UIController.SetStateIndicator (ProbeState.NotReady);  	break;  #endregion  case EventsType.DisconnectedState:  	UIController.SetStateIndicator (ProbeState.Offline);  	break;  case EventsType.Connected:  	InitializeConfiguration ();  	KeyboardEventsHandler.Instance.Start ();  	if (UserSettings.Instance.UseLedIndicator)  		KeyboardLeds.Set (Keys.Scroll' false);  	replayFileWatcher.EnableRaisingEvents = true;  	//watch for replay anyway  	eventFileWatcher.EnableRaisingEvents = true;  	UIController.SetStateIndicator (ProbeState.Ready);  	UIController.SetCurrentRace (PlayerRace.Terran);  	//until we find specific race  	//test  	#if DEBUG  	CustomEvents.Instance.Add (EventsType.GameGoingToStart);  	#endif  	break;  case EventsType.RecordingStopped:  	//_rightClickWatcher.Stop();  	if (UserSettings.Instance.UseLedIndicator) {  		KeyboardLeds.StopBlink ();  		KeyboardLeds.DelayedSet (Keys.Scroll' false' 600);  	}  	UIController.Stop ();  	break;  case EventsType.RecordingCompleted:  	if (UserSettings.Instance.RecordingSoundNotify) {  		Speaker.ClearPlaylist ();  		Speaker.Speak ("recording completed.wav");  	}  	UIController.ShowStateIndicator ();  	break;  case EventsType.RecordingPaused:  	if (UserSettings.Instance.UseLedIndicator)  		KeyboardLeds.StartBlink (Keys.Scroll' 500);  	if (UserSettings.Instance.RecordingSoundNotify) {  		Speaker.ClearPlaylist ();  		Speaker.Speak ("recording paused.wav");  	}  	UIController.HideAll ();  	break;  #region EventsType.CloseRequest  case EventsType.CloseRequest:  	UIController.HideStateIndicator ();  	GameDetected = false;  	Stop ();  	ServerConnection.Instance.CloseSession ();  	if (UserSettings.Instance.UseLedIndicator) {  		KeyboardLeds.Set (Keys.Scroll' Control.IsKeyLocked (Keys.Scroll));  		KeyboardLeds.Set (Keys.CapsLock' Control.IsKeyLocked (Keys.CapsLock));  		KeyboardLeds.Set (Keys.NumLock' Control.IsKeyLocked (Keys.NumLock));  	}  	break;  #endregion  case EventsType.RecordingStarted:  case EventsType.RecordingUnPaused:  	if (UserSettings.Instance.UseLedIndicator) {  		KeyboardLeds.StopBlink ();  		KeyboardLeds.DelayedSet (Keys.Scroll' true' 600);  	}  	if (UserSettings.Instance.RecordingSoundNotify) {  		Speaker.ClearPlaylist ();  		Speaker.Speak ("recording started.wav");  	}  	if (UserSettings.Instance.DisplayButtonsOverlay) {  		UIController.SetHotkeyBarMode (ButtonsOverlayMode.Banner);  		UIController.ShowHotkeyBar ();  	}  	else {  		UIController.HideHotkeyBar ();  	}  	if (UserSettings.Instance.CaptureResources) {  		UIController.ShowResourceBars ();  	}  	break;  case EventsType.MapControlMissingNotify:  	Speaker.Speak ("notify minimap.wav");  	UIController.ShowNotification (NotificationType.Map' (UserSettings.Instance.Map.Type & KeyWatcherSettings.WatchType.Measure) == 0);  	break;  case EventsType.MapChecked:  	GameLog.Instance.AddEntry ("map"' "checked"' (JToken)details);  	UIController.HideNotification (NotificationType.Map);  	break;  case EventsType.ResourcesControlMissingNotify:  	Speaker.Speak ("notify resources.wav");  	UIController.ShowNotification (NotificationType.Resources' (UserSettings.Instance.Resources.Type & KeyWatcherSettings.WatchType.Measure) == 0);  	break;  case EventsType.ResourcesChecked:  	GameLog.Instance.AddEntry ("resources"' "checked"' (JToken)details);  	UIController.HideNotification (NotificationType.Resources);  	break;  case EventsType.ProductionMissingNotify:  	Speaker.Speak ("notify production.wav");  	UIController.ShowNotification (NotificationType.Production' (UserSettings.Instance.Production.Type & KeyWatcherSettings.WatchType.Measure) == 0);  	break;  case EventsType.ProductionChecked:  	GameLog.Instance.AddEntry ("tap"' "cycle completed"' (JToken)details);  	UIController.HideNotification (NotificationType.Resources);  	break;  case EventsType.WillRestartForUpdate:  case EventsType.ClientNeedToBeReinstalled:  	ServerConnection.Instance.ConnectionMode = ServerConnection.ConnectionModeEnum.DoNotConnect;  	break;  case EventsType.ReplayFileCreated:  	GameDetected = false;  	#if DEBUG  	GameDetected = true;  	#endif  	if (GameClock.Instance.Started)  		EndRecording ();  	break;  case EventsType.ReplayFileUploaded:  	replayFileWatcher.EnableRaisingEvents = true;  	break;  case EventsType.GameGoingToStart:  	if (GameDetected)  		return;  	GameDetected = true;  	if (UserSettings.Instance.DisplayButtonsOverlay) {  		UIController.SetHotKeys (GetHotkeysForOverlay ());  		UIController.SetHotkeyBarMode (ButtonsOverlayMode.HotKeys);  		UIController.ShowHotkeyBar ();  	}  	UIController.HideStateIndicator ();  	if (UserSettings.Instance.StartWithAnykey)  		KeyboardEventsHandler.Instance.Hook.KeyPress += AnykeyStart;  	break;  case EventsType.BuildOrderItemComing:  	UIController.SetBuildOrderItemState ((int)details' BOItem.BOItemState.Coming);  	break;  case EventsType.BuildOrderItemPrepareExecution:  	UIController.SetBuildOrderItemState ((int)details' BOItem.BOItemState.PrepareExecution);  	break;  case EventsType.BuildOrderItemTriggered:  	if (UserSettings.Instance.PronounceBuildOrder)  		Speaker.Speak (BuildOrderHandler.Instance.GetItemText ((int)details)' true);  	UIController.SetBuildOrderItemState ((int)details' BOItem.BOItemState.Current);  	//UIController.BuildOrderItemTriggered((int) details);  	Debug.Print ("build order step {0} triggered"' details);  	break;  case EventsType.BuildOrderItemFinished:  	UIController.SetBuildOrderItemState ((int)details' BOItem.BOItemState.Finished);  	break;  case EventsType.Restart:  	Program.RestartApp ();  	break;  case EventsType.RaceDetected:  	CustomEvents.Instance.AddLog (string.Format ("detected race {0}"' raceDetector.Race));  	boostNotifier.Race = raceDetector.Race;  	UIController.SetCurrentRace (raceDetector.Race);  	boostNotifier.PrepareNotification ();  	break;  case EventsType.BoostNotify:  	UIController.ShowNotification (NotificationType.Boost' true);  	Speaker.Speak (Constants.BoostNotification [raceDetector.Race]);  	break;  }  
Magic Number,Probe.Engine,Controller,C:\repos\Metaflow_sc2drill-client\Probe\Engine\Controller.cs,OnCustomEvent,The following statement contains a magic number: switch (eventsType) {  #region Disconnected  case EventsType.Disconnected:  	KeyboardEventsHandler.Instance.Stop ();  	replayFileWatcher.EnableRaisingEvents = false;  	eventFileWatcher.EnableRaisingEvents = false;  	UIController.SetStateIndicator (ProbeState.Offline);  	Stop ();  	break;  #endregion  #region ConnectingState  case EventsType.ConnectingState:  	UIController.SetStateIndicator (ProbeState.NotReady);  	break;  #endregion  case EventsType.DisconnectedState:  	UIController.SetStateIndicator (ProbeState.Offline);  	break;  case EventsType.Connected:  	InitializeConfiguration ();  	KeyboardEventsHandler.Instance.Start ();  	if (UserSettings.Instance.UseLedIndicator)  		KeyboardLeds.Set (Keys.Scroll' false);  	replayFileWatcher.EnableRaisingEvents = true;  	//watch for replay anyway  	eventFileWatcher.EnableRaisingEvents = true;  	UIController.SetStateIndicator (ProbeState.Ready);  	UIController.SetCurrentRace (PlayerRace.Terran);  	//until we find specific race  	//test  	#if DEBUG  	CustomEvents.Instance.Add (EventsType.GameGoingToStart);  	#endif  	break;  case EventsType.RecordingStopped:  	//_rightClickWatcher.Stop();  	if (UserSettings.Instance.UseLedIndicator) {  		KeyboardLeds.StopBlink ();  		KeyboardLeds.DelayedSet (Keys.Scroll' false' 600);  	}  	UIController.Stop ();  	break;  case EventsType.RecordingCompleted:  	if (UserSettings.Instance.RecordingSoundNotify) {  		Speaker.ClearPlaylist ();  		Speaker.Speak ("recording completed.wav");  	}  	UIController.ShowStateIndicator ();  	break;  case EventsType.RecordingPaused:  	if (UserSettings.Instance.UseLedIndicator)  		KeyboardLeds.StartBlink (Keys.Scroll' 500);  	if (UserSettings.Instance.RecordingSoundNotify) {  		Speaker.ClearPlaylist ();  		Speaker.Speak ("recording paused.wav");  	}  	UIController.HideAll ();  	break;  #region EventsType.CloseRequest  case EventsType.CloseRequest:  	UIController.HideStateIndicator ();  	GameDetected = false;  	Stop ();  	ServerConnection.Instance.CloseSession ();  	if (UserSettings.Instance.UseLedIndicator) {  		KeyboardLeds.Set (Keys.Scroll' Control.IsKeyLocked (Keys.Scroll));  		KeyboardLeds.Set (Keys.CapsLock' Control.IsKeyLocked (Keys.CapsLock));  		KeyboardLeds.Set (Keys.NumLock' Control.IsKeyLocked (Keys.NumLock));  	}  	break;  #endregion  case EventsType.RecordingStarted:  case EventsType.RecordingUnPaused:  	if (UserSettings.Instance.UseLedIndicator) {  		KeyboardLeds.StopBlink ();  		KeyboardLeds.DelayedSet (Keys.Scroll' true' 600);  	}  	if (UserSettings.Instance.RecordingSoundNotify) {  		Speaker.ClearPlaylist ();  		Speaker.Speak ("recording started.wav");  	}  	if (UserSettings.Instance.DisplayButtonsOverlay) {  		UIController.SetHotkeyBarMode (ButtonsOverlayMode.Banner);  		UIController.ShowHotkeyBar ();  	}  	else {  		UIController.HideHotkeyBar ();  	}  	if (UserSettings.Instance.CaptureResources) {  		UIController.ShowResourceBars ();  	}  	break;  case EventsType.MapControlMissingNotify:  	Speaker.Speak ("notify minimap.wav");  	UIController.ShowNotification (NotificationType.Map' (UserSettings.Instance.Map.Type & KeyWatcherSettings.WatchType.Measure) == 0);  	break;  case EventsType.MapChecked:  	GameLog.Instance.AddEntry ("map"' "checked"' (JToken)details);  	UIController.HideNotification (NotificationType.Map);  	break;  case EventsType.ResourcesControlMissingNotify:  	Speaker.Speak ("notify resources.wav");  	UIController.ShowNotification (NotificationType.Resources' (UserSettings.Instance.Resources.Type & KeyWatcherSettings.WatchType.Measure) == 0);  	break;  case EventsType.ResourcesChecked:  	GameLog.Instance.AddEntry ("resources"' "checked"' (JToken)details);  	UIController.HideNotification (NotificationType.Resources);  	break;  case EventsType.ProductionMissingNotify:  	Speaker.Speak ("notify production.wav");  	UIController.ShowNotification (NotificationType.Production' (UserSettings.Instance.Production.Type & KeyWatcherSettings.WatchType.Measure) == 0);  	break;  case EventsType.ProductionChecked:  	GameLog.Instance.AddEntry ("tap"' "cycle completed"' (JToken)details);  	UIController.HideNotification (NotificationType.Resources);  	break;  case EventsType.WillRestartForUpdate:  case EventsType.ClientNeedToBeReinstalled:  	ServerConnection.Instance.ConnectionMode = ServerConnection.ConnectionModeEnum.DoNotConnect;  	break;  case EventsType.ReplayFileCreated:  	GameDetected = false;  	#if DEBUG  	GameDetected = true;  	#endif  	if (GameClock.Instance.Started)  		EndRecording ();  	break;  case EventsType.ReplayFileUploaded:  	replayFileWatcher.EnableRaisingEvents = true;  	break;  case EventsType.GameGoingToStart:  	if (GameDetected)  		return;  	GameDetected = true;  	if (UserSettings.Instance.DisplayButtonsOverlay) {  		UIController.SetHotKeys (GetHotkeysForOverlay ());  		UIController.SetHotkeyBarMode (ButtonsOverlayMode.HotKeys);  		UIController.ShowHotkeyBar ();  	}  	UIController.HideStateIndicator ();  	if (UserSettings.Instance.StartWithAnykey)  		KeyboardEventsHandler.Instance.Hook.KeyPress += AnykeyStart;  	break;  case EventsType.BuildOrderItemComing:  	UIController.SetBuildOrderItemState ((int)details' BOItem.BOItemState.Coming);  	break;  case EventsType.BuildOrderItemPrepareExecution:  	UIController.SetBuildOrderItemState ((int)details' BOItem.BOItemState.PrepareExecution);  	break;  case EventsType.BuildOrderItemTriggered:  	if (UserSettings.Instance.PronounceBuildOrder)  		Speaker.Speak (BuildOrderHandler.Instance.GetItemText ((int)details)' true);  	UIController.SetBuildOrderItemState ((int)details' BOItem.BOItemState.Current);  	//UIController.BuildOrderItemTriggered((int) details);  	Debug.Print ("build order step {0} triggered"' details);  	break;  case EventsType.BuildOrderItemFinished:  	UIController.SetBuildOrderItemState ((int)details' BOItem.BOItemState.Finished);  	break;  case EventsType.Restart:  	Program.RestartApp ();  	break;  case EventsType.RaceDetected:  	CustomEvents.Instance.AddLog (string.Format ("detected race {0}"' raceDetector.Race));  	boostNotifier.Race = raceDetector.Race;  	UIController.SetCurrentRace (raceDetector.Race);  	boostNotifier.PrepareNotification ();  	break;  case EventsType.BoostNotify:  	UIController.ShowNotification (NotificationType.Boost' true);  	Speaker.Speak (Constants.BoostNotification [raceDetector.Race]);  	break;  }  
Magic Number,Probe.Engine,Controller,C:\repos\Metaflow_sc2drill-client\Probe\Engine\Controller.cs,OnCustomEvent,The following statement contains a magic number: if (UserSettings.Instance.UseLedIndicator) {  	KeyboardLeds.StopBlink ();  	KeyboardLeds.DelayedSet (Keys.Scroll' false' 600);  }  
Magic Number,Probe.Engine,Controller,C:\repos\Metaflow_sc2drill-client\Probe\Engine\Controller.cs,OnCustomEvent,The following statement contains a magic number: KeyboardLeds.DelayedSet (Keys.Scroll' false' 600);  
Magic Number,Probe.Engine,Controller,C:\repos\Metaflow_sc2drill-client\Probe\Engine\Controller.cs,OnCustomEvent,The following statement contains a magic number: if (UserSettings.Instance.UseLedIndicator)  	KeyboardLeds.StartBlink (Keys.Scroll' 500);  
Magic Number,Probe.Engine,Controller,C:\repos\Metaflow_sc2drill-client\Probe\Engine\Controller.cs,OnCustomEvent,The following statement contains a magic number: KeyboardLeds.StartBlink (Keys.Scroll' 500);  
Magic Number,Probe.Engine,Controller,C:\repos\Metaflow_sc2drill-client\Probe\Engine\Controller.cs,OnCustomEvent,The following statement contains a magic number: if (UserSettings.Instance.UseLedIndicator) {  	KeyboardLeds.StopBlink ();  	KeyboardLeds.DelayedSet (Keys.Scroll' true' 600);  }  
Magic Number,Probe.Engine,Controller,C:\repos\Metaflow_sc2drill-client\Probe\Engine\Controller.cs,OnCustomEvent,The following statement contains a magic number: KeyboardLeds.DelayedSet (Keys.Scroll' true' 600);  
Magic Number,Probe.Estimators,RightClickWatcher,C:\repos\Metaflow_sc2drill-client\Probe\Estimators\RightClickWatcher.cs,ProcessMouseEvent,The following statement contains a magic number: if (_latestAllClicks >= 20)  	SendCurrentPart ();  
Magic Number,Probe.Game,GameTimeEventHandler,C:\repos\Metaflow_sc2drill-client\Probe\Game\GameTimeEventHandler.cs,CheckEvents,The following statement contains a magic number: _timer.Interval = Math.Max (GameClock.Instance.ConvertToRealTime (nextEventTime.Subtract (currentTime)).TotalMilliseconds' 100);  
Magic Number,Probe.Game,RaceDetector,C:\repos\Metaflow_sc2drill-client\Probe\Game\RaceDetector.cs,OnKeyDown,The following statement contains a magic number: if (GameClock.Instance.GetGameTime ().CompareTo (new TimeSpan (0' 0' 2' 0)) > 0)  	GuessRace ();  
Magic Number,Probe.Game,GameClock,C:\repos\Metaflow_sc2drill-client\Probe\Game\GameClock.cs,ConvertEnergyToGameTime,The following statement contains a magic number: return new TimeSpan ((long)(energy * TimeSpan.TicksPerSecond / 0.5625));  
Magic Number,Probe.Game,UserSettings,C:\repos\Metaflow_sc2drill-client\Probe\Game\UserSettings.cs,Load,The following statement contains a magic number: BuildOrderStepComingInterval = new TimeSpan (0' 0' 0' 15);  
Magic Number,Probe.Game,UserSettings,C:\repos\Metaflow_sc2drill-client\Probe\Game\UserSettings.cs,Load,The following statement contains a magic number: BuildOrderStepPrepareExecutionInterval = new TimeSpan (0' 0' 0' 5);  
Magic Number,Probe.Game,UserSettings,C:\repos\Metaflow_sc2drill-client\Probe\Game\UserSettings.cs,Load,The following statement contains a magic number: BuildOrderStepActiveInterval = new TimeSpan (0' 0' 0' 15);  
Magic Number,Probe.Game,UserSettings,C:\repos\Metaflow_sc2drill-client\Probe\Game\UserSettings.cs,Load,The following statement contains a magic number: if ((j ["data"] ["settings"] ["build_orders"] != null) && (j ["data"] ["settings"] ["build_orders"].Type == JTokenType.Array)) {  	foreach (JToken e in (JArray)j ["data"] ["settings"] ["build_orders"]) {  		var ew = new JTokenWrap (e);  		var keyList = new KeyList ();  		if (e ["keys"].Type == JTokenType.Array) {  			foreach (var boKey in (JArray)e ["keys"]) {  				if (boKey.Type == JTokenType.String)  					keyList.Add (KeysHelper.StringToKey (boKey.Value<String> ()));  			}  		}  		var bo = new BuildOrder ();  		bo.Title = ew.GetString ("title"' "-");  		switch (ew.GetString ("type"' "step")) {  		case "time":  			bo.ExecutionExecutionType = BuildOrder.BuildOrderExecutionType.Time;  			break;  		default:  			bo.ExecutionExecutionType = BuildOrder.BuildOrderExecutionType.Step;  			break;  		}  		if (e ["order"].Type == JTokenType.Array) {  			foreach (var boItem in (JArray)e ["order"]) {  				var newBoItem = new BuildOrderStep ();  				newBoItem.Time = (new TimeSpan (0' 0' boItem ["time"].Type == JTokenType.Null ? 0 : boItem ["time"].Value<int> ())).Subtract (new TimeSpan (1000));  				newBoItem.Message = boItem ["message"].Value<string> ();  				bo.Add (newBoItem);  			}  		}  		//sort items  		switch (bo.ExecutionExecutionType) {  		case BuildOrder.BuildOrderExecutionType.Time:  			bo.Sort ((a' b) => a.Time.CompareTo (b.Time));  			break;  		case BuildOrder.BuildOrderExecutionType.Step:  			break;  		default:  			throw new ArgumentOutOfRangeException ();  		}  		for (int i = 0; i < bo.Count; i++) {  			bo [i].Index = i;  		}  		if (keyList.Count == 0 || bo.Count == 0)  			continue;  		Keys2BuildOrders.Add (keyList' bo);  	}  }  
Magic Number,Probe.Game,UserSettings,C:\repos\Metaflow_sc2drill-client\Probe\Game\UserSettings.cs,Load,The following statement contains a magic number: foreach (JToken e in (JArray)j ["data"] ["settings"] ["build_orders"]) {  	var ew = new JTokenWrap (e);  	var keyList = new KeyList ();  	if (e ["keys"].Type == JTokenType.Array) {  		foreach (var boKey in (JArray)e ["keys"]) {  			if (boKey.Type == JTokenType.String)  				keyList.Add (KeysHelper.StringToKey (boKey.Value<String> ()));  		}  	}  	var bo = new BuildOrder ();  	bo.Title = ew.GetString ("title"' "-");  	switch (ew.GetString ("type"' "step")) {  	case "time":  		bo.ExecutionExecutionType = BuildOrder.BuildOrderExecutionType.Time;  		break;  	default:  		bo.ExecutionExecutionType = BuildOrder.BuildOrderExecutionType.Step;  		break;  	}  	if (e ["order"].Type == JTokenType.Array) {  		foreach (var boItem in (JArray)e ["order"]) {  			var newBoItem = new BuildOrderStep ();  			newBoItem.Time = (new TimeSpan (0' 0' boItem ["time"].Type == JTokenType.Null ? 0 : boItem ["time"].Value<int> ())).Subtract (new TimeSpan (1000));  			newBoItem.Message = boItem ["message"].Value<string> ();  			bo.Add (newBoItem);  		}  	}  	//sort items  	switch (bo.ExecutionExecutionType) {  	case BuildOrder.BuildOrderExecutionType.Time:  		bo.Sort ((a' b) => a.Time.CompareTo (b.Time));  		break;  	case BuildOrder.BuildOrderExecutionType.Step:  		break;  	default:  		throw new ArgumentOutOfRangeException ();  	}  	for (int i = 0; i < bo.Count; i++) {  		bo [i].Index = i;  	}  	if (keyList.Count == 0 || bo.Count == 0)  		continue;  	Keys2BuildOrders.Add (keyList' bo);  }  
Magic Number,Probe.Game,UserSettings,C:\repos\Metaflow_sc2drill-client\Probe\Game\UserSettings.cs,Load,The following statement contains a magic number: if (e ["order"].Type == JTokenType.Array) {  	foreach (var boItem in (JArray)e ["order"]) {  		var newBoItem = new BuildOrderStep ();  		newBoItem.Time = (new TimeSpan (0' 0' boItem ["time"].Type == JTokenType.Null ? 0 : boItem ["time"].Value<int> ())).Subtract (new TimeSpan (1000));  		newBoItem.Message = boItem ["message"].Value<string> ();  		bo.Add (newBoItem);  	}  }  
Magic Number,Probe.Game,UserSettings,C:\repos\Metaflow_sc2drill-client\Probe\Game\UserSettings.cs,Load,The following statement contains a magic number: foreach (var boItem in (JArray)e ["order"]) {  	var newBoItem = new BuildOrderStep ();  	newBoItem.Time = (new TimeSpan (0' 0' boItem ["time"].Type == JTokenType.Null ? 0 : boItem ["time"].Value<int> ())).Subtract (new TimeSpan (1000));  	newBoItem.Message = boItem ["message"].Value<string> ();  	bo.Add (newBoItem);  }  
Magic Number,Probe.Game,UserSettings,C:\repos\Metaflow_sc2drill-client\Probe\Game\UserSettings.cs,Load,The following statement contains a magic number: newBoItem.Time = (new TimeSpan (0' 0' boItem ["time"].Type == JTokenType.Null ? 0 : boItem ["time"].Value<int> ())).Subtract (new TimeSpan (1000));  
Magic Number,Probe.Tools,SC2GearsController,C:\repos\Metaflow_sc2drill-client\Probe\Tools\SC2GearsController.cs,UnZipFile,The following statement contains a magic number: if (File.Exists (InputPathOfZipFile)) {  	var baseDirectory = Path.GetDirectoryName (InputPathOfZipFile);  	if (string.IsNullOrEmpty (baseDirectory))  		return;  	using (var zipStream = new ZipInputStream (File.OpenRead (InputPathOfZipFile))) {  		ZipEntry theEntry;  		while ((theEntry = zipStream.GetNextEntry ()) != null) {  			if (theEntry.IsFile) {  				if (!string.IsNullOrEmpty (theEntry.Name)) {  					var strNewFile = Path.Combine (baseDirectory' theEntry.Name);  					if (File.Exists (strNewFile)) {  						continue;  					}  					using (var streamWriter = File.Create (strNewFile)) {  						var data = new byte[2048];  						while (true) {  							var size = zipStream.Read (data' 0' data.Length);  							if (size > 0)  								streamWriter.Write (data' 0' size);  							else  								break;  						}  						streamWriter.Close ();  					}  				}  			}  			else if (theEntry.IsDirectory) {  				string strNewDirectory = @"" + baseDirectory + @"\" + theEntry.Name;  				if (!Directory.Exists (strNewDirectory)) {  					Directory.CreateDirectory (strNewDirectory);  				}  			}  		}  		zipStream.Close ();  	}  }  
Magic Number,Probe.Tools,SC2GearsController,C:\repos\Metaflow_sc2drill-client\Probe\Tools\SC2GearsController.cs,UnZipFile,The following statement contains a magic number: using (var zipStream = new ZipInputStream (File.OpenRead (InputPathOfZipFile))) {  	ZipEntry theEntry;  	while ((theEntry = zipStream.GetNextEntry ()) != null) {  		if (theEntry.IsFile) {  			if (!string.IsNullOrEmpty (theEntry.Name)) {  				var strNewFile = Path.Combine (baseDirectory' theEntry.Name);  				if (File.Exists (strNewFile)) {  					continue;  				}  				using (var streamWriter = File.Create (strNewFile)) {  					var data = new byte[2048];  					while (true) {  						var size = zipStream.Read (data' 0' data.Length);  						if (size > 0)  							streamWriter.Write (data' 0' size);  						else  							break;  					}  					streamWriter.Close ();  				}  			}  		}  		else if (theEntry.IsDirectory) {  			string strNewDirectory = @"" + baseDirectory + @"\" + theEntry.Name;  			if (!Directory.Exists (strNewDirectory)) {  				Directory.CreateDirectory (strNewDirectory);  			}  		}  	}  	zipStream.Close ();  }  
Magic Number,Probe.Tools,SC2GearsController,C:\repos\Metaflow_sc2drill-client\Probe\Tools\SC2GearsController.cs,UnZipFile,The following statement contains a magic number: while ((theEntry = zipStream.GetNextEntry ()) != null) {  	if (theEntry.IsFile) {  		if (!string.IsNullOrEmpty (theEntry.Name)) {  			var strNewFile = Path.Combine (baseDirectory' theEntry.Name);  			if (File.Exists (strNewFile)) {  				continue;  			}  			using (var streamWriter = File.Create (strNewFile)) {  				var data = new byte[2048];  				while (true) {  					var size = zipStream.Read (data' 0' data.Length);  					if (size > 0)  						streamWriter.Write (data' 0' size);  					else  						break;  				}  				streamWriter.Close ();  			}  		}  	}  	else if (theEntry.IsDirectory) {  		string strNewDirectory = @"" + baseDirectory + @"\" + theEntry.Name;  		if (!Directory.Exists (strNewDirectory)) {  			Directory.CreateDirectory (strNewDirectory);  		}  	}  }  
Magic Number,Probe.Tools,SC2GearsController,C:\repos\Metaflow_sc2drill-client\Probe\Tools\SC2GearsController.cs,UnZipFile,The following statement contains a magic number: if (theEntry.IsFile) {  	if (!string.IsNullOrEmpty (theEntry.Name)) {  		var strNewFile = Path.Combine (baseDirectory' theEntry.Name);  		if (File.Exists (strNewFile)) {  			continue;  		}  		using (var streamWriter = File.Create (strNewFile)) {  			var data = new byte[2048];  			while (true) {  				var size = zipStream.Read (data' 0' data.Length);  				if (size > 0)  					streamWriter.Write (data' 0' size);  				else  					break;  			}  			streamWriter.Close ();  		}  	}  }  else if (theEntry.IsDirectory) {  	string strNewDirectory = @"" + baseDirectory + @"\" + theEntry.Name;  	if (!Directory.Exists (strNewDirectory)) {  		Directory.CreateDirectory (strNewDirectory);  	}  }  
Magic Number,Probe.Tools,SC2GearsController,C:\repos\Metaflow_sc2drill-client\Probe\Tools\SC2GearsController.cs,UnZipFile,The following statement contains a magic number: if (!string.IsNullOrEmpty (theEntry.Name)) {  	var strNewFile = Path.Combine (baseDirectory' theEntry.Name);  	if (File.Exists (strNewFile)) {  		continue;  	}  	using (var streamWriter = File.Create (strNewFile)) {  		var data = new byte[2048];  		while (true) {  			var size = zipStream.Read (data' 0' data.Length);  			if (size > 0)  				streamWriter.Write (data' 0' size);  			else  				break;  		}  		streamWriter.Close ();  	}  }  
Magic Number,Probe.Tools,SC2GearsController,C:\repos\Metaflow_sc2drill-client\Probe\Tools\SC2GearsController.cs,UnZipFile,The following statement contains a magic number: using (var streamWriter = File.Create (strNewFile)) {  	var data = new byte[2048];  	while (true) {  		var size = zipStream.Read (data' 0' data.Length);  		if (size > 0)  			streamWriter.Write (data' 0' size);  		else  			break;  	}  	streamWriter.Close ();  }  
Magic Number,Probe.Utility,KeyboardLeds,C:\repos\Metaflow_sc2drill-client\Probe\Utility\KeyboardLedControl.cs,KeysToFlag,The following statement contains a magic number: switch (key) {  case Keys.Scroll:  	return 1;  case Keys.NumLock:  	return 2;  case Keys.CapsLock:  	return 4;  default:  	return 1;  }  
Magic Number,Probe.Utility,KeyboardLeds,C:\repos\Metaflow_sc2drill-client\Probe\Utility\KeyboardLedControl.cs,KeysToFlag,The following statement contains a magic number: switch (key) {  case Keys.Scroll:  	return 1;  case Keys.NumLock:  	return 2;  case Keys.CapsLock:  	return 4;  default:  	return 1;  }  
Magic Number,Probe.Utility,KeyboardLeds,C:\repos\Metaflow_sc2drill-client\Probe\Utility\KeyboardLedControl.cs,KeysToFlag,The following statement contains a magic number: return 2;  
Magic Number,Probe.Utility,KeyboardLeds,C:\repos\Metaflow_sc2drill-client\Probe\Utility\KeyboardLedControl.cs,KeysToFlag,The following statement contains a magic number: return 4;  
Magic Number,Probe.Utility,CustomEvents,C:\repos\Metaflow_sc2drill-client\Probe\Utility\CustomEvents.cs,processQueue,The following statement contains a magic number: while (_eventsQueue.Count == 0) {  	Thread.Sleep (500);  }  
Magic Number,Probe.Utility,CustomEvents,C:\repos\Metaflow_sc2drill-client\Probe\Utility\CustomEvents.cs,processQueue,The following statement contains a magic number: Thread.Sleep (500);  
Magic Number,Probe.Utility,KeyList,C:\repos\Metaflow_sc2drill-client\Probe\Utility\KeyList.cs,ToString,The following statement contains a magic number: c.Sort ((a' b) =>  {  	if (a == b)  		return 0;  	var wa = (KeysHelper.IsAlpha (a) ? 2 : 0) + (KeysHelper.IsNumeric (a) ? 1 : 0) + (KeysHelper.IsModifier (a) ? -1 : 0);  	var wb = (KeysHelper.IsAlpha (b) ? 2 : 0) + (KeysHelper.IsNumeric (b) ? 1 : 0) + (KeysHelper.IsModifier (b) ? -1 : 0);  	if (wa != wb)  		return wa.CompareTo (wb);  	return a.CompareTo (b);  });  
Magic Number,Probe.Utility,KeyList,C:\repos\Metaflow_sc2drill-client\Probe\Utility\KeyList.cs,ToString,The following statement contains a magic number: c.Sort ((a' b) =>  {  	if (a == b)  		return 0;  	var wa = (KeysHelper.IsAlpha (a) ? 2 : 0) + (KeysHelper.IsNumeric (a) ? 1 : 0) + (KeysHelper.IsModifier (a) ? -1 : 0);  	var wb = (KeysHelper.IsAlpha (b) ? 2 : 0) + (KeysHelper.IsNumeric (b) ? 1 : 0) + (KeysHelper.IsModifier (b) ? -1 : 0);  	if (wa != wb)  		return wa.CompareTo (wb);  	return a.CompareTo (b);  });  
Magic Number,Probe.Utility,KeyList,C:\repos\Metaflow_sc2drill-client\Probe\Utility\KeyList.cs,UpdateMask,The following statement contains a magic number: foreach (Keys k in this) {  	_mask = _mask | (1 << ((int)k % 32));  }  
Magic Number,Probe.Utility,KeyList,C:\repos\Metaflow_sc2drill-client\Probe\Utility\KeyList.cs,UpdateMask,The following statement contains a magic number: _mask = _mask | (1 << ((int)k % 32));  
Magic Number,Probe.Utility,ScreenMap,C:\repos\Metaflow_sc2drill-client\Probe\Utility\ScreenMap.cs,ScreenMap,The following statement contains a magic number: _map.Add (new Size (1680' 1050)' new ScreenMap (new Rectangle (1260' 4' 375' 28)));  
Magic Number,Probe.Utility,ScreenMap,C:\repos\Metaflow_sc2drill-client\Probe\Utility\ScreenMap.cs,ScreenMap,The following statement contains a magic number: _map.Add (new Size (1680' 1050)' new ScreenMap (new Rectangle (1260' 4' 375' 28)));  
Magic Number,Probe.Utility,ScreenMap,C:\repos\Metaflow_sc2drill-client\Probe\Utility\ScreenMap.cs,ScreenMap,The following statement contains a magic number: _map.Add (new Size (1680' 1050)' new ScreenMap (new Rectangle (1260' 4' 375' 28)));  
Magic Number,Probe.Utility,ScreenMap,C:\repos\Metaflow_sc2drill-client\Probe\Utility\ScreenMap.cs,ScreenMap,The following statement contains a magic number: _map.Add (new Size (1680' 1050)' new ScreenMap (new Rectangle (1260' 4' 375' 28)));  
Magic Number,Probe.Utility,ScreenMap,C:\repos\Metaflow_sc2drill-client\Probe\Utility\ScreenMap.cs,ScreenMap,The following statement contains a magic number: _map.Add (new Size (1680' 1050)' new ScreenMap (new Rectangle (1260' 4' 375' 28)));  
Magic Number,Probe.Utility,ScreenMap,C:\repos\Metaflow_sc2drill-client\Probe\Utility\ScreenMap.cs,ScreenMap,The following statement contains a magic number: _map.Add (new Size (1680' 1050)' new ScreenMap (new Rectangle (1260' 4' 375' 28)));  
Magic Number,Probe.Utility,ScreenMap,C:\repos\Metaflow_sc2drill-client\Probe\Utility\ScreenMap.cs,ScreenMap,The following statement contains a magic number: _map.Add (new Size (1920' 1200)' new ScreenMap (new Rectangle (1470' 5' 420' 34)));  
Magic Number,Probe.Utility,ScreenMap,C:\repos\Metaflow_sc2drill-client\Probe\Utility\ScreenMap.cs,ScreenMap,The following statement contains a magic number: _map.Add (new Size (1920' 1200)' new ScreenMap (new Rectangle (1470' 5' 420' 34)));  
Magic Number,Probe.Utility,ScreenMap,C:\repos\Metaflow_sc2drill-client\Probe\Utility\ScreenMap.cs,ScreenMap,The following statement contains a magic number: _map.Add (new Size (1920' 1200)' new ScreenMap (new Rectangle (1470' 5' 420' 34)));  
Magic Number,Probe.Utility,ScreenMap,C:\repos\Metaflow_sc2drill-client\Probe\Utility\ScreenMap.cs,ScreenMap,The following statement contains a magic number: _map.Add (new Size (1920' 1200)' new ScreenMap (new Rectangle (1470' 5' 420' 34)));  
Magic Number,Probe.Utility,ScreenMap,C:\repos\Metaflow_sc2drill-client\Probe\Utility\ScreenMap.cs,ScreenMap,The following statement contains a magic number: _map.Add (new Size (1920' 1200)' new ScreenMap (new Rectangle (1470' 5' 420' 34)));  
Magic Number,Probe.Utility,ScreenMap,C:\repos\Metaflow_sc2drill-client\Probe\Utility\ScreenMap.cs,ScreenMap,The following statement contains a magic number: _map.Add (new Size (1920' 1200)' new ScreenMap (new Rectangle (1470' 5' 420' 34)));  
Magic Number,Probe.Utility,ScreenMap,C:\repos\Metaflow_sc2drill-client\Probe\Utility\ScreenMap.cs,Get,The following statement contains a magic number: if (!_map.ContainsKey (screenSize)) {  	var s = new Size (375' 28);  	var offsetTopRight = new Point (45' 4);  	var map = new ScreenMap (new Rectangle (new Point (screenSize.Width - s.Width - offsetTopRight.X' offsetTopRight.Y)' s));  	_map.Add (screenSize' map);  }  
Magic Number,Probe.Utility,ScreenMap,C:\repos\Metaflow_sc2drill-client\Probe\Utility\ScreenMap.cs,Get,The following statement contains a magic number: if (!_map.ContainsKey (screenSize)) {  	var s = new Size (375' 28);  	var offsetTopRight = new Point (45' 4);  	var map = new ScreenMap (new Rectangle (new Point (screenSize.Width - s.Width - offsetTopRight.X' offsetTopRight.Y)' s));  	_map.Add (screenSize' map);  }  
Magic Number,Probe.Utility,ScreenMap,C:\repos\Metaflow_sc2drill-client\Probe\Utility\ScreenMap.cs,Get,The following statement contains a magic number: if (!_map.ContainsKey (screenSize)) {  	var s = new Size (375' 28);  	var offsetTopRight = new Point (45' 4);  	var map = new ScreenMap (new Rectangle (new Point (screenSize.Width - s.Width - offsetTopRight.X' offsetTopRight.Y)' s));  	_map.Add (screenSize' map);  }  
Magic Number,Probe.Utility,ScreenMap,C:\repos\Metaflow_sc2drill-client\Probe\Utility\ScreenMap.cs,Get,The following statement contains a magic number: if (!_map.ContainsKey (screenSize)) {  	var s = new Size (375' 28);  	var offsetTopRight = new Point (45' 4);  	var map = new ScreenMap (new Rectangle (new Point (screenSize.Width - s.Width - offsetTopRight.X' offsetTopRight.Y)' s));  	_map.Add (screenSize' map);  }  
Magic Number,Probe.Utility,Speaker,C:\repos\Metaflow_sc2drill-client\Probe\Utility\Speaker.cs,_speaker_DoWork,The following statement contains a magic number: while (!_speaker.CancellationPending) {  	SoundPlayer player = null;  	if (_priorityQueue.Count > 0) {  		lock (_priorityQueue) {  			if (_priorityQueue.Count > 0) {  				player = _priorityQueue.Dequeue ();  			}  		}  	}  	if (player != null) {  		player.PlaySync ();  	}  	else {  		Thread.Sleep (250);  	}  }  
Magic Number,Probe.Utility,Speaker,C:\repos\Metaflow_sc2drill-client\Probe\Utility\Speaker.cs,_speaker_DoWork,The following statement contains a magic number: if (player != null) {  	player.PlaySync ();  }  else {  	Thread.Sleep (250);  }  
Magic Number,Probe.Utility,Speaker,C:\repos\Metaflow_sc2drill-client\Probe\Utility\Speaker.cs,_speaker_DoWork,The following statement contains a magic number: Thread.Sleep (250);  
Magic Number,Probe.Utility,UserActivityHook,C:\repos\Metaflow_sc2drill-client\Probe\Utility\UserActivityHook.cs,MouseHookProc,The following statement contains a magic number: if ((nCode >= 0) && (OnMouseActivity != null)) {  	//Marshall the data from callback.  	MouseLLHookStruct mouseHookStruct = (MouseLLHookStruct)Marshal.PtrToStructure (lParam' typeof(MouseLLHookStruct));  	//detect button clicked  	MouseButtons button = MouseButtons.None;  	short mouseDelta = 0;  	switch (wParam) {  	case WM_LBUTTONDOWN:  		//case WM_LBUTTONUP:   		//case WM_LBUTTONDBLCLK:   		button = MouseButtons.Left;  		break;  	case WM_RBUTTONDOWN:  		//case WM_RBUTTONUP:   		//case WM_RBUTTONDBLCLK:   		button = MouseButtons.Right;  		break;  	case WM_MOUSEWHEEL:  		//If the message is WM_MOUSEWHEEL' the high-order word of mouseData member is the wheel delta.   		//One wheel click is defined as WHEEL_DELTA' which is 120.   		//(value >> 16) & 0xffff; retrieves the high-order word from the given 32-bit value  		mouseDelta = (short)((mouseHookStruct.mouseData >> 16) & 0xffff);  		//If the message is WM_XBUTTONDOWN' WM_XBUTTONUP' WM_XBUTTONDBLCLK' WM_NCXBUTTONDOWN' WM_NCXBUTTONUP'   		//or WM_NCXBUTTONDBLCLK' the high-order word specifies which X button was pressed or released'   		//and the low-order word is reserved. This value can be one or more of the following values.   		//Otherwise' mouseData is not used.   		break;  	}  	//double clicks  	int clickCount = 0;  	if (button != MouseButtons.None)  		if (wParam == WM_LBUTTONDBLCLK || wParam == WM_RBUTTONDBLCLK)  			clickCount = 2;  		else  			clickCount = 1;  	//generate event   	MouseEventArgs e = new MouseEventArgs (button' clickCount' mouseHookStruct.pt.x' mouseHookStruct.pt.y' mouseDelta);  	//raise it  	OnMouseActivity (this' e);  }  
Magic Number,Probe.Utility,UserActivityHook,C:\repos\Metaflow_sc2drill-client\Probe\Utility\UserActivityHook.cs,MouseHookProc,The following statement contains a magic number: if ((nCode >= 0) && (OnMouseActivity != null)) {  	//Marshall the data from callback.  	MouseLLHookStruct mouseHookStruct = (MouseLLHookStruct)Marshal.PtrToStructure (lParam' typeof(MouseLLHookStruct));  	//detect button clicked  	MouseButtons button = MouseButtons.None;  	short mouseDelta = 0;  	switch (wParam) {  	case WM_LBUTTONDOWN:  		//case WM_LBUTTONUP:   		//case WM_LBUTTONDBLCLK:   		button = MouseButtons.Left;  		break;  	case WM_RBUTTONDOWN:  		//case WM_RBUTTONUP:   		//case WM_RBUTTONDBLCLK:   		button = MouseButtons.Right;  		break;  	case WM_MOUSEWHEEL:  		//If the message is WM_MOUSEWHEEL' the high-order word of mouseData member is the wheel delta.   		//One wheel click is defined as WHEEL_DELTA' which is 120.   		//(value >> 16) & 0xffff; retrieves the high-order word from the given 32-bit value  		mouseDelta = (short)((mouseHookStruct.mouseData >> 16) & 0xffff);  		//If the message is WM_XBUTTONDOWN' WM_XBUTTONUP' WM_XBUTTONDBLCLK' WM_NCXBUTTONDOWN' WM_NCXBUTTONUP'   		//or WM_NCXBUTTONDBLCLK' the high-order word specifies which X button was pressed or released'   		//and the low-order word is reserved. This value can be one or more of the following values.   		//Otherwise' mouseData is not used.   		break;  	}  	//double clicks  	int clickCount = 0;  	if (button != MouseButtons.None)  		if (wParam == WM_LBUTTONDBLCLK || wParam == WM_RBUTTONDBLCLK)  			clickCount = 2;  		else  			clickCount = 1;  	//generate event   	MouseEventArgs e = new MouseEventArgs (button' clickCount' mouseHookStruct.pt.x' mouseHookStruct.pt.y' mouseDelta);  	//raise it  	OnMouseActivity (this' e);  }  
Magic Number,Probe.Utility,UserActivityHook,C:\repos\Metaflow_sc2drill-client\Probe\Utility\UserActivityHook.cs,MouseHookProc,The following statement contains a magic number: switch (wParam) {  case WM_LBUTTONDOWN:  	//case WM_LBUTTONUP:   	//case WM_LBUTTONDBLCLK:   	button = MouseButtons.Left;  	break;  case WM_RBUTTONDOWN:  	//case WM_RBUTTONUP:   	//case WM_RBUTTONDBLCLK:   	button = MouseButtons.Right;  	break;  case WM_MOUSEWHEEL:  	//If the message is WM_MOUSEWHEEL' the high-order word of mouseData member is the wheel delta.   	//One wheel click is defined as WHEEL_DELTA' which is 120.   	//(value >> 16) & 0xffff; retrieves the high-order word from the given 32-bit value  	mouseDelta = (short)((mouseHookStruct.mouseData >> 16) & 0xffff);  	//If the message is WM_XBUTTONDOWN' WM_XBUTTONUP' WM_XBUTTONDBLCLK' WM_NCXBUTTONDOWN' WM_NCXBUTTONUP'   	//or WM_NCXBUTTONDBLCLK' the high-order word specifies which X button was pressed or released'   	//and the low-order word is reserved. This value can be one or more of the following values.   	//Otherwise' mouseData is not used.   	break;  }  
Magic Number,Probe.Utility,UserActivityHook,C:\repos\Metaflow_sc2drill-client\Probe\Utility\UserActivityHook.cs,MouseHookProc,The following statement contains a magic number: mouseDelta = (short)((mouseHookStruct.mouseData >> 16) & 0xffff);  
Magic Number,Probe.Utility,UserActivityHook,C:\repos\Metaflow_sc2drill-client\Probe\Utility\UserActivityHook.cs,MouseHookProc,The following statement contains a magic number: if (button != MouseButtons.None)  	if (wParam == WM_LBUTTONDBLCLK || wParam == WM_RBUTTONDBLCLK)  		clickCount = 2;  	else  		clickCount = 1;  
Magic Number,Probe.Utility,UserActivityHook,C:\repos\Metaflow_sc2drill-client\Probe\Utility\UserActivityHook.cs,MouseHookProc,The following statement contains a magic number: if (wParam == WM_LBUTTONDBLCLK || wParam == WM_RBUTTONDBLCLK)  	clickCount = 2;  else  	clickCount = 1;  
Magic Number,Probe.Utility,UserActivityHook,C:\repos\Metaflow_sc2drill-client\Probe\Utility\UserActivityHook.cs,MouseHookProc,The following statement contains a magic number: clickCount = 2;  
Magic Number,Probe.Utility,UserActivityHook,C:\repos\Metaflow_sc2drill-client\Probe\Utility\UserActivityHook.cs,KeyboardHookProc,The following statement contains a magic number: if ((nCode >= 0) && (KeyDown != null || KeyUp != null || KeyPress != null)) {  	//read structure KeyboardHookStruct at lParam  	KeyboardHookStruct MyKeyboardHookStruct = (KeyboardHookStruct)Marshal.PtrToStructure (lParam' typeof(KeyboardHookStruct));  	//raise KeyDown  	if (KeyDown != null && (wParam == WM_KEYDOWN || wParam == WM_SYSKEYDOWN)) {  		Keys keyData = (Keys)MyKeyboardHookStruct.vkCode;  		KeyEventArgs e = new KeyEventArgs (keyData);  		KeyDown (this' e);  		handled = handled || e.Handled;  	}  	// raise KeyPress  	if (KeyPress != null && wParam == WM_KEYDOWN) {  		bool isDownShift = ((GetKeyState (VK_SHIFT) & 0x80) == 0x80 ? true : false);  		bool isDownCapslock = (GetKeyState (VK_CAPITAL) != 0 ? true : false);  		byte[] keyState = new byte[256];  		GetKeyboardState (keyState);  		byte[] inBuffer = new byte[2];  		if (ToAscii (MyKeyboardHookStruct.vkCode' MyKeyboardHookStruct.scanCode' keyState' inBuffer' MyKeyboardHookStruct.flags) == 1) {  			char key = (char)inBuffer [0];  			if ((isDownCapslock ^ isDownShift) && Char.IsLetter (key))  				key = Char.ToUpper (key);  			KeyPressEventArgs e = new KeyPressEventArgs (key);  			KeyPress (this' e);  			handled = handled || e.Handled;  		}  	}  	// raise KeyUp  	if (KeyUp != null && (wParam == WM_KEYUP || wParam == WM_SYSKEYUP)) {  		Keys keyData = (Keys)MyKeyboardHookStruct.vkCode;  		KeyEventArgs e = new KeyEventArgs (keyData);  		KeyUp (this' e);  		handled = handled || e.Handled;  	}  }  
Magic Number,Probe.Utility,UserActivityHook,C:\repos\Metaflow_sc2drill-client\Probe\Utility\UserActivityHook.cs,KeyboardHookProc,The following statement contains a magic number: if ((nCode >= 0) && (KeyDown != null || KeyUp != null || KeyPress != null)) {  	//read structure KeyboardHookStruct at lParam  	KeyboardHookStruct MyKeyboardHookStruct = (KeyboardHookStruct)Marshal.PtrToStructure (lParam' typeof(KeyboardHookStruct));  	//raise KeyDown  	if (KeyDown != null && (wParam == WM_KEYDOWN || wParam == WM_SYSKEYDOWN)) {  		Keys keyData = (Keys)MyKeyboardHookStruct.vkCode;  		KeyEventArgs e = new KeyEventArgs (keyData);  		KeyDown (this' e);  		handled = handled || e.Handled;  	}  	// raise KeyPress  	if (KeyPress != null && wParam == WM_KEYDOWN) {  		bool isDownShift = ((GetKeyState (VK_SHIFT) & 0x80) == 0x80 ? true : false);  		bool isDownCapslock = (GetKeyState (VK_CAPITAL) != 0 ? true : false);  		byte[] keyState = new byte[256];  		GetKeyboardState (keyState);  		byte[] inBuffer = new byte[2];  		if (ToAscii (MyKeyboardHookStruct.vkCode' MyKeyboardHookStruct.scanCode' keyState' inBuffer' MyKeyboardHookStruct.flags) == 1) {  			char key = (char)inBuffer [0];  			if ((isDownCapslock ^ isDownShift) && Char.IsLetter (key))  				key = Char.ToUpper (key);  			KeyPressEventArgs e = new KeyPressEventArgs (key);  			KeyPress (this' e);  			handled = handled || e.Handled;  		}  	}  	// raise KeyUp  	if (KeyUp != null && (wParam == WM_KEYUP || wParam == WM_SYSKEYUP)) {  		Keys keyData = (Keys)MyKeyboardHookStruct.vkCode;  		KeyEventArgs e = new KeyEventArgs (keyData);  		KeyUp (this' e);  		handled = handled || e.Handled;  	}  }  
Magic Number,Probe.Utility,UserActivityHook,C:\repos\Metaflow_sc2drill-client\Probe\Utility\UserActivityHook.cs,KeyboardHookProc,The following statement contains a magic number: if (KeyPress != null && wParam == WM_KEYDOWN) {  	bool isDownShift = ((GetKeyState (VK_SHIFT) & 0x80) == 0x80 ? true : false);  	bool isDownCapslock = (GetKeyState (VK_CAPITAL) != 0 ? true : false);  	byte[] keyState = new byte[256];  	GetKeyboardState (keyState);  	byte[] inBuffer = new byte[2];  	if (ToAscii (MyKeyboardHookStruct.vkCode' MyKeyboardHookStruct.scanCode' keyState' inBuffer' MyKeyboardHookStruct.flags) == 1) {  		char key = (char)inBuffer [0];  		if ((isDownCapslock ^ isDownShift) && Char.IsLetter (key))  			key = Char.ToUpper (key);  		KeyPressEventArgs e = new KeyPressEventArgs (key);  		KeyPress (this' e);  		handled = handled || e.Handled;  	}  }  
Magic Number,Probe.Utility,UserActivityHook,C:\repos\Metaflow_sc2drill-client\Probe\Utility\UserActivityHook.cs,KeyboardHookProc,The following statement contains a magic number: if (KeyPress != null && wParam == WM_KEYDOWN) {  	bool isDownShift = ((GetKeyState (VK_SHIFT) & 0x80) == 0x80 ? true : false);  	bool isDownCapslock = (GetKeyState (VK_CAPITAL) != 0 ? true : false);  	byte[] keyState = new byte[256];  	GetKeyboardState (keyState);  	byte[] inBuffer = new byte[2];  	if (ToAscii (MyKeyboardHookStruct.vkCode' MyKeyboardHookStruct.scanCode' keyState' inBuffer' MyKeyboardHookStruct.flags) == 1) {  		char key = (char)inBuffer [0];  		if ((isDownCapslock ^ isDownShift) && Char.IsLetter (key))  			key = Char.ToUpper (key);  		KeyPressEventArgs e = new KeyPressEventArgs (key);  		KeyPress (this' e);  		handled = handled || e.Handled;  	}  }  
Magic Number,Probe.WebClient,QueryString,C:\repos\Metaflow_sc2drill-client\Probe\WebClient\QueryString.cs,FillFromString,The following statement contains a magic number: foreach (string keyValuePair in ExtractQuerystring (s).Split ('&')) {  	if (string.IsNullOrEmpty (keyValuePair))  		continue;  	string[] split = keyValuePair.Split ('=');  	base.Add (split [0]' split.Length == 2 ? split [1] : "");  }  
Magic Number,Probe.WebClient,QueryString,C:\repos\Metaflow_sc2drill-client\Probe\WebClient\QueryString.cs,FillFromString,The following statement contains a magic number: base.Add (split [0]' split.Length == 2 ? split [1] : "");  
Missing Default,Probe,MainForm,C:\repos\Metaflow_sc2drill-client\Probe\MainForm.cs,OnCustomEvent,The following switch statement is missing a default case: switch (action ["type"].Value<String> ()) {  case "message_url":  	if (ServerConnection.Instance.ConnectionMode != ServerConnection.ConnectionModeEnum.SilentErrors)  		ShowBalloonTip (action ["message"].Value<string> ()' BalloonTipActionEnum.Url' action ["url"].Value<string> ());  	break;  }  
Missing Default,Probe.BuildOrders,BuildOrderHandler,C:\repos\Metaflow_sc2drill-client\Probe\BuildOrders\BuildOrderHandler.cs,OnCustomEvent,The following switch statement is missing a default case: switch (eventsType) {  case EventsType.RecordingStopped:  	Stop ();  	break;  case EventsType.BuildOrderCompleted:  	var hideEvent = new GameTimeEvent () {  		Enabled = true'  		EventType = GameTimeEvent.GameTimeEventType.BuildOrderNotification'  		Time = GameClock.Instance.GetGameTime () + new TimeSpan (0' 0' 0' BOCloseDelay)  	};  	hideEvent.OnEvent += UIController.HideBuildOrder;  	GameTimeEventHandler.Instance.AddEvent (hideEvent);  	break;  }  
Missing Default,Probe.Engine,Controller,C:\repos\Metaflow_sc2drill-client\Probe\Engine\Controller.cs,ProcessKeysMatchEvent,The following switch statement is missing a default case: switch ((ControllerKeyEvents)e.EventCode) {  case ControllerKeyEvents.StateToggle:  	ToggleState ();  	break;  case ControllerKeyEvents.BuildOrderAction:  	Start ();  	if (BuildOrderHandler.Instance.Started)  		BuildOrderHandler.Instance.Interrupt ();  	else  		BuildOrderHandler.Instance.Start ((BuildOrder)e.Data);  	break;  case ControllerKeyEvents.ToggleOverlaysVisibility:  	if (!GameDetected)  		continue;  	UIController.SetOverlayTransparency (true);  	break;  }  
Missing Default,Probe.Engine,Controller,C:\repos\Metaflow_sc2drill-client\Probe\Engine\Controller.cs,ProcessKeysMismatchEvent,The following switch statement is missing a default case: switch ((ControllerKeyEvents)e.EventCode) {  case ControllerKeyEvents.ToggleOverlaysVisibility:  	if (!GameDetected)  		continue;  	UIController.SetOverlayTransparency (false);  	break;  }  
Missing Default,Probe.Engine,Controller,C:\repos\Metaflow_sc2drill-client\Probe\Engine\Controller.cs,OnCustomEvent,The following switch statement is missing a default case: switch (eventsType) {  #region Disconnected  case EventsType.Disconnected:  	KeyboardEventsHandler.Instance.Stop ();  	replayFileWatcher.EnableRaisingEvents = false;  	eventFileWatcher.EnableRaisingEvents = false;  	UIController.SetStateIndicator (ProbeState.Offline);  	Stop ();  	break;  #endregion  #region ConnectingState  case EventsType.ConnectingState:  	UIController.SetStateIndicator (ProbeState.NotReady);  	break;  #endregion  case EventsType.DisconnectedState:  	UIController.SetStateIndicator (ProbeState.Offline);  	break;  case EventsType.Connected:  	InitializeConfiguration ();  	KeyboardEventsHandler.Instance.Start ();  	if (UserSettings.Instance.UseLedIndicator)  		KeyboardLeds.Set (Keys.Scroll' false);  	replayFileWatcher.EnableRaisingEvents = true;  	//watch for replay anyway  	eventFileWatcher.EnableRaisingEvents = true;  	UIController.SetStateIndicator (ProbeState.Ready);  	UIController.SetCurrentRace (PlayerRace.Terran);  	//until we find specific race  	//test  	#if DEBUG  	CustomEvents.Instance.Add (EventsType.GameGoingToStart);  	#endif  	break;  case EventsType.RecordingStopped:  	//_rightClickWatcher.Stop();  	if (UserSettings.Instance.UseLedIndicator) {  		KeyboardLeds.StopBlink ();  		KeyboardLeds.DelayedSet (Keys.Scroll' false' 600);  	}  	UIController.Stop ();  	break;  case EventsType.RecordingCompleted:  	if (UserSettings.Instance.RecordingSoundNotify) {  		Speaker.ClearPlaylist ();  		Speaker.Speak ("recording completed.wav");  	}  	UIController.ShowStateIndicator ();  	break;  case EventsType.RecordingPaused:  	if (UserSettings.Instance.UseLedIndicator)  		KeyboardLeds.StartBlink (Keys.Scroll' 500);  	if (UserSettings.Instance.RecordingSoundNotify) {  		Speaker.ClearPlaylist ();  		Speaker.Speak ("recording paused.wav");  	}  	UIController.HideAll ();  	break;  #region EventsType.CloseRequest  case EventsType.CloseRequest:  	UIController.HideStateIndicator ();  	GameDetected = false;  	Stop ();  	ServerConnection.Instance.CloseSession ();  	if (UserSettings.Instance.UseLedIndicator) {  		KeyboardLeds.Set (Keys.Scroll' Control.IsKeyLocked (Keys.Scroll));  		KeyboardLeds.Set (Keys.CapsLock' Control.IsKeyLocked (Keys.CapsLock));  		KeyboardLeds.Set (Keys.NumLock' Control.IsKeyLocked (Keys.NumLock));  	}  	break;  #endregion  case EventsType.RecordingStarted:  case EventsType.RecordingUnPaused:  	if (UserSettings.Instance.UseLedIndicator) {  		KeyboardLeds.StopBlink ();  		KeyboardLeds.DelayedSet (Keys.Scroll' true' 600);  	}  	if (UserSettings.Instance.RecordingSoundNotify) {  		Speaker.ClearPlaylist ();  		Speaker.Speak ("recording started.wav");  	}  	if (UserSettings.Instance.DisplayButtonsOverlay) {  		UIController.SetHotkeyBarMode (ButtonsOverlayMode.Banner);  		UIController.ShowHotkeyBar ();  	}  	else {  		UIController.HideHotkeyBar ();  	}  	if (UserSettings.Instance.CaptureResources) {  		UIController.ShowResourceBars ();  	}  	break;  case EventsType.MapControlMissingNotify:  	Speaker.Speak ("notify minimap.wav");  	UIController.ShowNotification (NotificationType.Map' (UserSettings.Instance.Map.Type & KeyWatcherSettings.WatchType.Measure) == 0);  	break;  case EventsType.MapChecked:  	GameLog.Instance.AddEntry ("map"' "checked"' (JToken)details);  	UIController.HideNotification (NotificationType.Map);  	break;  case EventsType.ResourcesControlMissingNotify:  	Speaker.Speak ("notify resources.wav");  	UIController.ShowNotification (NotificationType.Resources' (UserSettings.Instance.Resources.Type & KeyWatcherSettings.WatchType.Measure) == 0);  	break;  case EventsType.ResourcesChecked:  	GameLog.Instance.AddEntry ("resources"' "checked"' (JToken)details);  	UIController.HideNotification (NotificationType.Resources);  	break;  case EventsType.ProductionMissingNotify:  	Speaker.Speak ("notify production.wav");  	UIController.ShowNotification (NotificationType.Production' (UserSettings.Instance.Production.Type & KeyWatcherSettings.WatchType.Measure) == 0);  	break;  case EventsType.ProductionChecked:  	GameLog.Instance.AddEntry ("tap"' "cycle completed"' (JToken)details);  	UIController.HideNotification (NotificationType.Resources);  	break;  case EventsType.WillRestartForUpdate:  case EventsType.ClientNeedToBeReinstalled:  	ServerConnection.Instance.ConnectionMode = ServerConnection.ConnectionModeEnum.DoNotConnect;  	break;  case EventsType.ReplayFileCreated:  	GameDetected = false;  	#if DEBUG  	GameDetected = true;  	#endif  	if (GameClock.Instance.Started)  		EndRecording ();  	break;  case EventsType.ReplayFileUploaded:  	replayFileWatcher.EnableRaisingEvents = true;  	break;  case EventsType.GameGoingToStart:  	if (GameDetected)  		return;  	GameDetected = true;  	if (UserSettings.Instance.DisplayButtonsOverlay) {  		UIController.SetHotKeys (GetHotkeysForOverlay ());  		UIController.SetHotkeyBarMode (ButtonsOverlayMode.HotKeys);  		UIController.ShowHotkeyBar ();  	}  	UIController.HideStateIndicator ();  	if (UserSettings.Instance.StartWithAnykey)  		KeyboardEventsHandler.Instance.Hook.KeyPress += AnykeyStart;  	break;  case EventsType.BuildOrderItemComing:  	UIController.SetBuildOrderItemState ((int)details' BOItem.BOItemState.Coming);  	break;  case EventsType.BuildOrderItemPrepareExecution:  	UIController.SetBuildOrderItemState ((int)details' BOItem.BOItemState.PrepareExecution);  	break;  case EventsType.BuildOrderItemTriggered:  	if (UserSettings.Instance.PronounceBuildOrder)  		Speaker.Speak (BuildOrderHandler.Instance.GetItemText ((int)details)' true);  	UIController.SetBuildOrderItemState ((int)details' BOItem.BOItemState.Current);  	//UIController.BuildOrderItemTriggered((int) details);  	Debug.Print ("build order step {0} triggered"' details);  	break;  case EventsType.BuildOrderItemFinished:  	UIController.SetBuildOrderItemState ((int)details' BOItem.BOItemState.Finished);  	break;  case EventsType.Restart:  	Program.RestartApp ();  	break;  case EventsType.RaceDetected:  	CustomEvents.Instance.AddLog (string.Format ("detected race {0}"' raceDetector.Race));  	boostNotifier.Race = raceDetector.Race;  	UIController.SetCurrentRace (raceDetector.Race);  	boostNotifier.PrepareNotification ();  	break;  case EventsType.BoostNotify:  	UIController.ShowNotification (NotificationType.Boost' true);  	Speaker.Speak (Constants.BoostNotification [raceDetector.Race]);  	break;  }  
Missing Default,Probe.Estimators,BoostNotifier,C:\repos\Metaflow_sc2drill-client\Probe\Estimators\BoostNotifier.cs,ProcessKeysMatchEvent,The following switch statement is missing a default case: switch ((BoostKeyboardEvent)code.EventCode) {  case BoostKeyboardEvent.Restart:  	RestartChronoPeriod ();  	break;  case BoostKeyboardEvent.QueenStarted:  	if (_waitingForQueen) {  		CreateEvent (GameClock.Instance.GetGameTime ().Add (Constants.ZergQueenBuildTime));  		_waitingForQueen = false;  	}  	break;  }  
Missing Default,Probe.Estimators,BoostNotifier,C:\repos\Metaflow_sc2drill-client\Probe\Estimators\BoostNotifier.cs,PrepareNotification,The following switch statement is missing a default case: switch (Race) {  case PlayerRace.Protoss:  	var boostPeriod = GameClock.Instance.ConvertEnergyToGameTime (Constants.BoostEnergy [PlayerRace.Protoss]).TotalMilliseconds;  	var periods = Math.Floor (GameClock.Instance.GetGameTime ().TotalMilliseconds / boostPeriod);  	CreateEvent (new TimeSpan ((long)((periods + 1) * boostPeriod * TimeSpan.TicksPerMillisecond)));  	break;  case PlayerRace.Terran:  	CreateEvent (Constants.TerranStandardFirstMuleTime);  	break;  case PlayerRace.Zerg:  	_waitingForQueen = true;  	CreateEvent (new TimeSpan (0' 0' 1' 0).Add (Constants.ZergStandardQueenTime));  	//if we'll not catch first queen  	break;  }  
Missing Default,Probe.Utility,UserActivityHook,C:\repos\Metaflow_sc2drill-client\Probe\Utility\UserActivityHook.cs,MouseHookProc,The following switch statement is missing a default case: switch (wParam) {  case WM_LBUTTONDOWN:  	//case WM_LBUTTONUP:   	//case WM_LBUTTONDBLCLK:   	button = MouseButtons.Left;  	break;  case WM_RBUTTONDOWN:  	//case WM_RBUTTONUP:   	//case WM_RBUTTONDBLCLK:   	button = MouseButtons.Right;  	break;  case WM_MOUSEWHEEL:  	//If the message is WM_MOUSEWHEEL' the high-order word of mouseData member is the wheel delta.   	//One wheel click is defined as WHEEL_DELTA' which is 120.   	//(value >> 16) & 0xffff; retrieves the high-order word from the given 32-bit value  	mouseDelta = (short)((mouseHookStruct.mouseData >> 16) & 0xffff);  	//If the message is WM_XBUTTONDOWN' WM_XBUTTONUP' WM_XBUTTONDBLCLK' WM_NCXBUTTONDOWN' WM_NCXBUTTONUP'   	//or WM_NCXBUTTONDBLCLK' the high-order word specifies which X button was pressed or released'   	//and the low-order word is reserved. This value can be one or more of the following values.   	//Otherwise' mouseData is not used.   	break;  }  
