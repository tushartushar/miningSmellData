Implementation smell,Namespace,Class,File,Method,Description
Complex Method,ImageProcessing,BitmapHelper,C:\repos\Metaflow_sc2drill-client\ImageProcessing\BitmapHelper.cs,GetBitsPerPixel,Cyclomatic complexity of the method is 16
Complex Method,ImageProcessing,ImageProcessor,C:\repos\Metaflow_sc2drill-client\ImageProcessing\ImageProcessor.cs,FindLetters,Cyclomatic complexity of the method is 18
Complex Method,ImageProcessing,ImageProcessor,C:\repos\Metaflow_sc2drill-client\ImageProcessing\ImageProcessor.cs,DetectVerticalLinesColor,Cyclomatic complexity of the method is 9
Long Parameter List,CaptureScreen,PlatformInvokeGDI32,C:\repos\Metaflow_sc2drill-client\ImageProcessing\PlatFormInvokeGDI32.cs,BitBlt,The method has 9 parameters.
Long Statement,ImageProcessing,BitmapHelper,C:\repos\Metaflow_sc2drill-client\ImageProcessing\BitmapHelper.cs,GetBitmapSum,The length of the statement  "	/* GetBitsPerPixel just does a switch on the PixelFormat and returns the number */byte bitsPerPixel = GetBitsPerPixel (cp); " is 123.
Long Statement,ImageProcessing,BitmapHelper,C:\repos\Metaflow_sc2drill-client\ImageProcessing\BitmapHelper.cs,GetBitmapSum,The length of the statement  "	/* GetBitsPerPixel just does a switch on the PixelFormat and returns the number */byte bitsPerPixel = GetBitsPerPixel (cp); " is 123.
Long Statement,ImageProcessing,ImageProcessor,C:\repos\Metaflow_sc2drill-client\ImageProcessing\ImageProcessor.cs,ThresholdGrays,The length of the statement  "	/* GetBitsPerPixel just does a switch on the PixelFormat and returns the number */byte bitsPerPixel = BitmapHelper.GetBitsPerPixel (cp); " is 136.
Long Statement,ImageProcessing,ImageProcessor,C:\repos\Metaflow_sc2drill-client\ImageProcessing\ImageProcessor.cs,ThresholdGrays,The length of the statement  "	/*This overload copies data of /size/ into /data/ from location specified (/Scan0/)*/System.Runtime.InteropServices.Marshal.Copy (bData.Scan0' data' 0' size); " is 158.
Long Statement,ImageProcessing,ImageProcessor,C:\repos\Metaflow_sc2drill-client\ImageProcessing\ImageProcessor.cs,ThresholdGrays,The length of the statement  "			f = (Math.Abs (data [i] - data [i + 1]) < GrayTolerance) && (Math.Abs (data [i + 1] - data [i + 2]) < GrayTolerance) && (Math.Abs (data [i] - data [i + 2]) < GrayTolerance); " is 173.
Long Statement,ImageProcessing,ImageProcessor,C:\repos\Metaflow_sc2drill-client\ImageProcessing\ImageProcessor.cs,ThresholdGrays,The length of the statement  "	/* This override copies the data back into the location specified */System.Runtime.InteropServices.Marshal.Copy (data' 0' bData.Scan0' data.Length); " is 148.
Long Statement,ImageProcessing,ImageProcessor,C:\repos\Metaflow_sc2drill-client\ImageProcessing\ImageProcessor.cs,ConvertToBitmask,The length of the statement  "	/* GetBitsPerPixel just does a switch on the PixelFormat and returns the number */byte bitsPerPixel = BitmapHelper.GetBitsPerPixel (cp); " is 136.
Long Statement,ImageProcessing,ImageProcessor,C:\repos\Metaflow_sc2drill-client\ImageProcessing\ImageProcessor.cs,FilterBrightes,The length of the statement  "	/* GetBitsPerPixel just does a switch on the PixelFormat and returns the number */byte bitsPerPixel = BitmapHelper.GetBitsPerPixel (cp); " is 136.
Long Statement,ImageProcessing,ImageProcessor,C:\repos\Metaflow_sc2drill-client\ImageProcessing\ImageProcessor.cs,FilterBrightes,The length of the statement  "			magnitudes.Add (new KeyValuePair<Point' byte> (new Point (i' j)' (byte)((data [k] + data [k + 1] + data [k + 2]) / 3))); " is 120.
Long Statement,ImageProcessing,ImageProcessor,C:\repos\Metaflow_sc2drill-client\ImageProcessing\ImageProcessor.cs,DetectVerticalLinesColor,The length of the statement  "	/* GetBitsPerPixel just does a switch on the PixelFormat and returns the number */byte bitsPerPixel = BitmapHelper.GetBitsPerPixel (cp); " is 136.
Magic Number,ImageProcessing,BitmapHelper,C:\repos\Metaflow_sc2drill-client\ImageProcessing\BitmapHelper.cs,GetBitsPerPixel,The following statement contains a magic number: switch (b.PixelFormat) {  case PixelFormat.Format1bppIndexed:  	return 1;  case PixelFormat.Format4bppIndexed:  	return 4;  case PixelFormat.Format8bppIndexed:  	return 8;  case PixelFormat.Format16bppGrayScale:  case PixelFormat.Format16bppRgb555:  case PixelFormat.Format16bppRgb565:  case PixelFormat.Format16bppArgb1555:  	return 16;  case PixelFormat.Format24bppRgb:  	return 24;  case PixelFormat.Format32bppRgb:  case PixelFormat.Format32bppArgb:  case PixelFormat.Format32bppPArgb:  	return 32;  case PixelFormat.Format48bppRgb:  	return 48;  case PixelFormat.Format64bppArgb:  case PixelFormat.Format64bppPArgb:  	return 64;  default:  	throw new ArgumentOutOfRangeException ();  }  
Magic Number,ImageProcessing,BitmapHelper,C:\repos\Metaflow_sc2drill-client\ImageProcessing\BitmapHelper.cs,GetBitsPerPixel,The following statement contains a magic number: switch (b.PixelFormat) {  case PixelFormat.Format1bppIndexed:  	return 1;  case PixelFormat.Format4bppIndexed:  	return 4;  case PixelFormat.Format8bppIndexed:  	return 8;  case PixelFormat.Format16bppGrayScale:  case PixelFormat.Format16bppRgb555:  case PixelFormat.Format16bppRgb565:  case PixelFormat.Format16bppArgb1555:  	return 16;  case PixelFormat.Format24bppRgb:  	return 24;  case PixelFormat.Format32bppRgb:  case PixelFormat.Format32bppArgb:  case PixelFormat.Format32bppPArgb:  	return 32;  case PixelFormat.Format48bppRgb:  	return 48;  case PixelFormat.Format64bppArgb:  case PixelFormat.Format64bppPArgb:  	return 64;  default:  	throw new ArgumentOutOfRangeException ();  }  
Magic Number,ImageProcessing,BitmapHelper,C:\repos\Metaflow_sc2drill-client\ImageProcessing\BitmapHelper.cs,GetBitsPerPixel,The following statement contains a magic number: switch (b.PixelFormat) {  case PixelFormat.Format1bppIndexed:  	return 1;  case PixelFormat.Format4bppIndexed:  	return 4;  case PixelFormat.Format8bppIndexed:  	return 8;  case PixelFormat.Format16bppGrayScale:  case PixelFormat.Format16bppRgb555:  case PixelFormat.Format16bppRgb565:  case PixelFormat.Format16bppArgb1555:  	return 16;  case PixelFormat.Format24bppRgb:  	return 24;  case PixelFormat.Format32bppRgb:  case PixelFormat.Format32bppArgb:  case PixelFormat.Format32bppPArgb:  	return 32;  case PixelFormat.Format48bppRgb:  	return 48;  case PixelFormat.Format64bppArgb:  case PixelFormat.Format64bppPArgb:  	return 64;  default:  	throw new ArgumentOutOfRangeException ();  }  
Magic Number,ImageProcessing,BitmapHelper,C:\repos\Metaflow_sc2drill-client\ImageProcessing\BitmapHelper.cs,GetBitsPerPixel,The following statement contains a magic number: switch (b.PixelFormat) {  case PixelFormat.Format1bppIndexed:  	return 1;  case PixelFormat.Format4bppIndexed:  	return 4;  case PixelFormat.Format8bppIndexed:  	return 8;  case PixelFormat.Format16bppGrayScale:  case PixelFormat.Format16bppRgb555:  case PixelFormat.Format16bppRgb565:  case PixelFormat.Format16bppArgb1555:  	return 16;  case PixelFormat.Format24bppRgb:  	return 24;  case PixelFormat.Format32bppRgb:  case PixelFormat.Format32bppArgb:  case PixelFormat.Format32bppPArgb:  	return 32;  case PixelFormat.Format48bppRgb:  	return 48;  case PixelFormat.Format64bppArgb:  case PixelFormat.Format64bppPArgb:  	return 64;  default:  	throw new ArgumentOutOfRangeException ();  }  
Magic Number,ImageProcessing,BitmapHelper,C:\repos\Metaflow_sc2drill-client\ImageProcessing\BitmapHelper.cs,GetBitsPerPixel,The following statement contains a magic number: switch (b.PixelFormat) {  case PixelFormat.Format1bppIndexed:  	return 1;  case PixelFormat.Format4bppIndexed:  	return 4;  case PixelFormat.Format8bppIndexed:  	return 8;  case PixelFormat.Format16bppGrayScale:  case PixelFormat.Format16bppRgb555:  case PixelFormat.Format16bppRgb565:  case PixelFormat.Format16bppArgb1555:  	return 16;  case PixelFormat.Format24bppRgb:  	return 24;  case PixelFormat.Format32bppRgb:  case PixelFormat.Format32bppArgb:  case PixelFormat.Format32bppPArgb:  	return 32;  case PixelFormat.Format48bppRgb:  	return 48;  case PixelFormat.Format64bppArgb:  case PixelFormat.Format64bppPArgb:  	return 64;  default:  	throw new ArgumentOutOfRangeException ();  }  
Magic Number,ImageProcessing,BitmapHelper,C:\repos\Metaflow_sc2drill-client\ImageProcessing\BitmapHelper.cs,GetBitsPerPixel,The following statement contains a magic number: switch (b.PixelFormat) {  case PixelFormat.Format1bppIndexed:  	return 1;  case PixelFormat.Format4bppIndexed:  	return 4;  case PixelFormat.Format8bppIndexed:  	return 8;  case PixelFormat.Format16bppGrayScale:  case PixelFormat.Format16bppRgb555:  case PixelFormat.Format16bppRgb565:  case PixelFormat.Format16bppArgb1555:  	return 16;  case PixelFormat.Format24bppRgb:  	return 24;  case PixelFormat.Format32bppRgb:  case PixelFormat.Format32bppArgb:  case PixelFormat.Format32bppPArgb:  	return 32;  case PixelFormat.Format48bppRgb:  	return 48;  case PixelFormat.Format64bppArgb:  case PixelFormat.Format64bppPArgb:  	return 64;  default:  	throw new ArgumentOutOfRangeException ();  }  
Magic Number,ImageProcessing,BitmapHelper,C:\repos\Metaflow_sc2drill-client\ImageProcessing\BitmapHelper.cs,GetBitsPerPixel,The following statement contains a magic number: switch (b.PixelFormat) {  case PixelFormat.Format1bppIndexed:  	return 1;  case PixelFormat.Format4bppIndexed:  	return 4;  case PixelFormat.Format8bppIndexed:  	return 8;  case PixelFormat.Format16bppGrayScale:  case PixelFormat.Format16bppRgb555:  case PixelFormat.Format16bppRgb565:  case PixelFormat.Format16bppArgb1555:  	return 16;  case PixelFormat.Format24bppRgb:  	return 24;  case PixelFormat.Format32bppRgb:  case PixelFormat.Format32bppArgb:  case PixelFormat.Format32bppPArgb:  	return 32;  case PixelFormat.Format48bppRgb:  	return 48;  case PixelFormat.Format64bppArgb:  case PixelFormat.Format64bppPArgb:  	return 64;  default:  	throw new ArgumentOutOfRangeException ();  }  
Magic Number,ImageProcessing,BitmapHelper,C:\repos\Metaflow_sc2drill-client\ImageProcessing\BitmapHelper.cs,GetBitsPerPixel,The following statement contains a magic number: return 4;  
Magic Number,ImageProcessing,BitmapHelper,C:\repos\Metaflow_sc2drill-client\ImageProcessing\BitmapHelper.cs,GetBitsPerPixel,The following statement contains a magic number: return 8;  
Magic Number,ImageProcessing,BitmapHelper,C:\repos\Metaflow_sc2drill-client\ImageProcessing\BitmapHelper.cs,GetBitsPerPixel,The following statement contains a magic number: return 16;  
Magic Number,ImageProcessing,BitmapHelper,C:\repos\Metaflow_sc2drill-client\ImageProcessing\BitmapHelper.cs,GetBitsPerPixel,The following statement contains a magic number: return 24;  
Magic Number,ImageProcessing,BitmapHelper,C:\repos\Metaflow_sc2drill-client\ImageProcessing\BitmapHelper.cs,GetBitsPerPixel,The following statement contains a magic number: return 32;  
Magic Number,ImageProcessing,BitmapHelper,C:\repos\Metaflow_sc2drill-client\ImageProcessing\BitmapHelper.cs,GetBitsPerPixel,The following statement contains a magic number: return 48;  
Magic Number,ImageProcessing,BitmapHelper,C:\repos\Metaflow_sc2drill-client\ImageProcessing\BitmapHelper.cs,GetBitsPerPixel,The following statement contains a magic number: return 64;  
Magic Number,ImageProcessing,BitmapHelper,C:\repos\Metaflow_sc2drill-client\ImageProcessing\BitmapHelper.cs,GetBitmapSum,The following statement contains a magic number: for (int j = 0; j < multHeight; j += step) {  	var shift = j * source.Width;  	for (int i = 0; i < multWidth; i += step) {  		result += data [shift + i] + data [shift + i + 1] + data [shift + i + 2];  	}  }  
Magic Number,ImageProcessing,BitmapHelper,C:\repos\Metaflow_sc2drill-client\ImageProcessing\BitmapHelper.cs,GetBitmapSum,The following statement contains a magic number: for (int i = 0; i < multWidth; i += step) {  	result += data [shift + i] + data [shift + i + 1] + data [shift + i + 2];  }  
Magic Number,ImageProcessing,BitmapHelper,C:\repos\Metaflow_sc2drill-client\ImageProcessing\BitmapHelper.cs,GetBitmapSum,The following statement contains a magic number: result += data [shift + i] + data [shift + i + 1] + data [shift + i + 2];  
Magic Number,ImageProcessing,ImageProcessor,C:\repos\Metaflow_sc2drill-client\ImageProcessing\ImageProcessor.cs,ThresholdGrays,The following statement contains a magic number: for (int i = 0; i < size; i += step) {  	var f = (data [i] > grayThresh) && (data [i + 1] > grayThresh) && (data [i + 2] > grayThresh);  	if (f)  		f = (Math.Abs (data [i] - data [i + 1]) < GrayTolerance) && (Math.Abs (data [i + 1] - data [i + 2]) < GrayTolerance) && (Math.Abs (data [i] - data [i + 2]) < GrayTolerance);  	if (f) {  		double magnitude = 1 / 3d * (data [i] + data [i + 1] + data [i + 2]);  		f = magnitude > thresh;  	}  	if (f) {  		data [i] = 255;  		data [i + 1] = 255;  		data [i + 2] = 255;  	}  	else {  		data [i] = 0;  		data [i + 1] = 0;  		data [i + 2] = 0;  	}  	//data[i] is the first of 3 bytes of color  }  
Magic Number,ImageProcessing,ImageProcessor,C:\repos\Metaflow_sc2drill-client\ImageProcessing\ImageProcessor.cs,ThresholdGrays,The following statement contains a magic number: for (int i = 0; i < size; i += step) {  	var f = (data [i] > grayThresh) && (data [i + 1] > grayThresh) && (data [i + 2] > grayThresh);  	if (f)  		f = (Math.Abs (data [i] - data [i + 1]) < GrayTolerance) && (Math.Abs (data [i + 1] - data [i + 2]) < GrayTolerance) && (Math.Abs (data [i] - data [i + 2]) < GrayTolerance);  	if (f) {  		double magnitude = 1 / 3d * (data [i] + data [i + 1] + data [i + 2]);  		f = magnitude > thresh;  	}  	if (f) {  		data [i] = 255;  		data [i + 1] = 255;  		data [i + 2] = 255;  	}  	else {  		data [i] = 0;  		data [i + 1] = 0;  		data [i + 2] = 0;  	}  	//data[i] is the first of 3 bytes of color  }  
Magic Number,ImageProcessing,ImageProcessor,C:\repos\Metaflow_sc2drill-client\ImageProcessing\ImageProcessor.cs,ThresholdGrays,The following statement contains a magic number: for (int i = 0; i < size; i += step) {  	var f = (data [i] > grayThresh) && (data [i + 1] > grayThresh) && (data [i + 2] > grayThresh);  	if (f)  		f = (Math.Abs (data [i] - data [i + 1]) < GrayTolerance) && (Math.Abs (data [i + 1] - data [i + 2]) < GrayTolerance) && (Math.Abs (data [i] - data [i + 2]) < GrayTolerance);  	if (f) {  		double magnitude = 1 / 3d * (data [i] + data [i + 1] + data [i + 2]);  		f = magnitude > thresh;  	}  	if (f) {  		data [i] = 255;  		data [i + 1] = 255;  		data [i + 2] = 255;  	}  	else {  		data [i] = 0;  		data [i + 1] = 0;  		data [i + 2] = 0;  	}  	//data[i] is the first of 3 bytes of color  }  
Magic Number,ImageProcessing,ImageProcessor,C:\repos\Metaflow_sc2drill-client\ImageProcessing\ImageProcessor.cs,ThresholdGrays,The following statement contains a magic number: for (int i = 0; i < size; i += step) {  	var f = (data [i] > grayThresh) && (data [i + 1] > grayThresh) && (data [i + 2] > grayThresh);  	if (f)  		f = (Math.Abs (data [i] - data [i + 1]) < GrayTolerance) && (Math.Abs (data [i + 1] - data [i + 2]) < GrayTolerance) && (Math.Abs (data [i] - data [i + 2]) < GrayTolerance);  	if (f) {  		double magnitude = 1 / 3d * (data [i] + data [i + 1] + data [i + 2]);  		f = magnitude > thresh;  	}  	if (f) {  		data [i] = 255;  		data [i + 1] = 255;  		data [i + 2] = 255;  	}  	else {  		data [i] = 0;  		data [i + 1] = 0;  		data [i + 2] = 0;  	}  	//data[i] is the first of 3 bytes of color  }  
Magic Number,ImageProcessing,ImageProcessor,C:\repos\Metaflow_sc2drill-client\ImageProcessing\ImageProcessor.cs,ThresholdGrays,The following statement contains a magic number: for (int i = 0; i < size; i += step) {  	var f = (data [i] > grayThresh) && (data [i + 1] > grayThresh) && (data [i + 2] > grayThresh);  	if (f)  		f = (Math.Abs (data [i] - data [i + 1]) < GrayTolerance) && (Math.Abs (data [i + 1] - data [i + 2]) < GrayTolerance) && (Math.Abs (data [i] - data [i + 2]) < GrayTolerance);  	if (f) {  		double magnitude = 1 / 3d * (data [i] + data [i + 1] + data [i + 2]);  		f = magnitude > thresh;  	}  	if (f) {  		data [i] = 255;  		data [i + 1] = 255;  		data [i + 2] = 255;  	}  	else {  		data [i] = 0;  		data [i + 1] = 0;  		data [i + 2] = 0;  	}  	//data[i] is the first of 3 bytes of color  }  
Magic Number,ImageProcessing,ImageProcessor,C:\repos\Metaflow_sc2drill-client\ImageProcessing\ImageProcessor.cs,ThresholdGrays,The following statement contains a magic number: for (int i = 0; i < size; i += step) {  	var f = (data [i] > grayThresh) && (data [i + 1] > grayThresh) && (data [i + 2] > grayThresh);  	if (f)  		f = (Math.Abs (data [i] - data [i + 1]) < GrayTolerance) && (Math.Abs (data [i + 1] - data [i + 2]) < GrayTolerance) && (Math.Abs (data [i] - data [i + 2]) < GrayTolerance);  	if (f) {  		double magnitude = 1 / 3d * (data [i] + data [i + 1] + data [i + 2]);  		f = magnitude > thresh;  	}  	if (f) {  		data [i] = 255;  		data [i + 1] = 255;  		data [i + 2] = 255;  	}  	else {  		data [i] = 0;  		data [i + 1] = 0;  		data [i + 2] = 0;  	}  	//data[i] is the first of 3 bytes of color  }  
Magic Number,ImageProcessing,ImageProcessor,C:\repos\Metaflow_sc2drill-client\ImageProcessing\ImageProcessor.cs,ThresholdGrays,The following statement contains a magic number: for (int i = 0; i < size; i += step) {  	var f = (data [i] > grayThresh) && (data [i + 1] > grayThresh) && (data [i + 2] > grayThresh);  	if (f)  		f = (Math.Abs (data [i] - data [i + 1]) < GrayTolerance) && (Math.Abs (data [i + 1] - data [i + 2]) < GrayTolerance) && (Math.Abs (data [i] - data [i + 2]) < GrayTolerance);  	if (f) {  		double magnitude = 1 / 3d * (data [i] + data [i + 1] + data [i + 2]);  		f = magnitude > thresh;  	}  	if (f) {  		data [i] = 255;  		data [i + 1] = 255;  		data [i + 2] = 255;  	}  	else {  		data [i] = 0;  		data [i + 1] = 0;  		data [i + 2] = 0;  	}  	//data[i] is the first of 3 bytes of color  }  
Magic Number,ImageProcessing,ImageProcessor,C:\repos\Metaflow_sc2drill-client\ImageProcessing\ImageProcessor.cs,ThresholdGrays,The following statement contains a magic number: for (int i = 0; i < size; i += step) {  	var f = (data [i] > grayThresh) && (data [i + 1] > grayThresh) && (data [i + 2] > grayThresh);  	if (f)  		f = (Math.Abs (data [i] - data [i + 1]) < GrayTolerance) && (Math.Abs (data [i + 1] - data [i + 2]) < GrayTolerance) && (Math.Abs (data [i] - data [i + 2]) < GrayTolerance);  	if (f) {  		double magnitude = 1 / 3d * (data [i] + data [i + 1] + data [i + 2]);  		f = magnitude > thresh;  	}  	if (f) {  		data [i] = 255;  		data [i + 1] = 255;  		data [i + 2] = 255;  	}  	else {  		data [i] = 0;  		data [i + 1] = 0;  		data [i + 2] = 0;  	}  	//data[i] is the first of 3 bytes of color  }  
Magic Number,ImageProcessing,ImageProcessor,C:\repos\Metaflow_sc2drill-client\ImageProcessing\ImageProcessor.cs,ThresholdGrays,The following statement contains a magic number: for (int i = 0; i < size; i += step) {  	var f = (data [i] > grayThresh) && (data [i + 1] > grayThresh) && (data [i + 2] > grayThresh);  	if (f)  		f = (Math.Abs (data [i] - data [i + 1]) < GrayTolerance) && (Math.Abs (data [i + 1] - data [i + 2]) < GrayTolerance) && (Math.Abs (data [i] - data [i + 2]) < GrayTolerance);  	if (f) {  		double magnitude = 1 / 3d * (data [i] + data [i + 1] + data [i + 2]);  		f = magnitude > thresh;  	}  	if (f) {  		data [i] = 255;  		data [i + 1] = 255;  		data [i + 2] = 255;  	}  	else {  		data [i] = 0;  		data [i + 1] = 0;  		data [i + 2] = 0;  	}  	//data[i] is the first of 3 bytes of color  }  
Magic Number,ImageProcessing,ImageProcessor,C:\repos\Metaflow_sc2drill-client\ImageProcessing\ImageProcessor.cs,ThresholdGrays,The following statement contains a magic number: if (f)  	f = (Math.Abs (data [i] - data [i + 1]) < GrayTolerance) && (Math.Abs (data [i + 1] - data [i + 2]) < GrayTolerance) && (Math.Abs (data [i] - data [i + 2]) < GrayTolerance);  
Magic Number,ImageProcessing,ImageProcessor,C:\repos\Metaflow_sc2drill-client\ImageProcessing\ImageProcessor.cs,ThresholdGrays,The following statement contains a magic number: if (f)  	f = (Math.Abs (data [i] - data [i + 1]) < GrayTolerance) && (Math.Abs (data [i + 1] - data [i + 2]) < GrayTolerance) && (Math.Abs (data [i] - data [i + 2]) < GrayTolerance);  
Magic Number,ImageProcessing,ImageProcessor,C:\repos\Metaflow_sc2drill-client\ImageProcessing\ImageProcessor.cs,ThresholdGrays,The following statement contains a magic number: f = (Math.Abs (data [i] - data [i + 1]) < GrayTolerance) && (Math.Abs (data [i + 1] - data [i + 2]) < GrayTolerance) && (Math.Abs (data [i] - data [i + 2]) < GrayTolerance);  
Magic Number,ImageProcessing,ImageProcessor,C:\repos\Metaflow_sc2drill-client\ImageProcessing\ImageProcessor.cs,ThresholdGrays,The following statement contains a magic number: f = (Math.Abs (data [i] - data [i + 1]) < GrayTolerance) && (Math.Abs (data [i + 1] - data [i + 2]) < GrayTolerance) && (Math.Abs (data [i] - data [i + 2]) < GrayTolerance);  
Magic Number,ImageProcessing,ImageProcessor,C:\repos\Metaflow_sc2drill-client\ImageProcessing\ImageProcessor.cs,ThresholdGrays,The following statement contains a magic number: if (f) {  	double magnitude = 1 / 3d * (data [i] + data [i + 1] + data [i + 2]);  	f = magnitude > thresh;  }  
Magic Number,ImageProcessing,ImageProcessor,C:\repos\Metaflow_sc2drill-client\ImageProcessing\ImageProcessor.cs,ThresholdGrays,The following statement contains a magic number: if (f) {  	data [i] = 255;  	data [i + 1] = 255;  	data [i + 2] = 255;  }  else {  	data [i] = 0;  	data [i + 1] = 0;  	data [i + 2] = 0;  }  
Magic Number,ImageProcessing,ImageProcessor,C:\repos\Metaflow_sc2drill-client\ImageProcessing\ImageProcessor.cs,ThresholdGrays,The following statement contains a magic number: if (f) {  	data [i] = 255;  	data [i + 1] = 255;  	data [i + 2] = 255;  }  else {  	data [i] = 0;  	data [i + 1] = 0;  	data [i + 2] = 0;  }  
Magic Number,ImageProcessing,ImageProcessor,C:\repos\Metaflow_sc2drill-client\ImageProcessing\ImageProcessor.cs,ThresholdGrays,The following statement contains a magic number: if (f) {  	data [i] = 255;  	data [i + 1] = 255;  	data [i + 2] = 255;  }  else {  	data [i] = 0;  	data [i + 1] = 0;  	data [i + 2] = 0;  }  
Magic Number,ImageProcessing,ImageProcessor,C:\repos\Metaflow_sc2drill-client\ImageProcessing\ImageProcessor.cs,ThresholdGrays,The following statement contains a magic number: if (f) {  	data [i] = 255;  	data [i + 1] = 255;  	data [i + 2] = 255;  }  else {  	data [i] = 0;  	data [i + 1] = 0;  	data [i + 2] = 0;  }  
Magic Number,ImageProcessing,ImageProcessor,C:\repos\Metaflow_sc2drill-client\ImageProcessing\ImageProcessor.cs,ThresholdGrays,The following statement contains a magic number: if (f) {  	data [i] = 255;  	data [i + 1] = 255;  	data [i + 2] = 255;  }  else {  	data [i] = 0;  	data [i + 1] = 0;  	data [i + 2] = 0;  }  
Magic Number,ImageProcessing,ImageProcessor,C:\repos\Metaflow_sc2drill-client\ImageProcessing\ImageProcessor.cs,ThresholdGrays,The following statement contains a magic number: data [i] = 255;  
Magic Number,ImageProcessing,ImageProcessor,C:\repos\Metaflow_sc2drill-client\ImageProcessing\ImageProcessor.cs,ThresholdGrays,The following statement contains a magic number: data [i + 1] = 255;  
Magic Number,ImageProcessing,ImageProcessor,C:\repos\Metaflow_sc2drill-client\ImageProcessing\ImageProcessor.cs,ThresholdGrays,The following statement contains a magic number: data [i + 2] = 255;  
Magic Number,ImageProcessing,ImageProcessor,C:\repos\Metaflow_sc2drill-client\ImageProcessing\ImageProcessor.cs,ThresholdGrays,The following statement contains a magic number: data [i + 2] = 255;  
Magic Number,ImageProcessing,ImageProcessor,C:\repos\Metaflow_sc2drill-client\ImageProcessing\ImageProcessor.cs,ThresholdGrays,The following statement contains a magic number: data [i + 2] = 0;  
Magic Number,ImageProcessing,ImageProcessor,C:\repos\Metaflow_sc2drill-client\ImageProcessing\ImageProcessor.cs,FindLetters,The following statement contains a magic number: for (int i = 0; i < maskSize.Height; i++) {  	var hS = 0;  	for (int j = 0; j < maskSize.Width; j++) {  		hS += mask [j' i];  		if (hS > 10)  			break;  	}  	if (hS <= 10)  		continue;  	hLow = i;  	break;  }  
Magic Number,ImageProcessing,ImageProcessor,C:\repos\Metaflow_sc2drill-client\ImageProcessing\ImageProcessor.cs,FindLetters,The following statement contains a magic number: for (int i = 0; i < maskSize.Height; i++) {  	var hS = 0;  	for (int j = 0; j < maskSize.Width; j++) {  		hS += mask [j' i];  		if (hS > 10)  			break;  	}  	if (hS <= 10)  		continue;  	hLow = i;  	break;  }  
Magic Number,ImageProcessing,ImageProcessor,C:\repos\Metaflow_sc2drill-client\ImageProcessing\ImageProcessor.cs,FindLetters,The following statement contains a magic number: for (int j = 0; j < maskSize.Width; j++) {  	hS += mask [j' i];  	if (hS > 10)  		break;  }  
Magic Number,ImageProcessing,ImageProcessor,C:\repos\Metaflow_sc2drill-client\ImageProcessing\ImageProcessor.cs,FindLetters,The following statement contains a magic number: if (hS > 10)  	break;  
Magic Number,ImageProcessing,ImageProcessor,C:\repos\Metaflow_sc2drill-client\ImageProcessing\ImageProcessor.cs,FindLetters,The following statement contains a magic number: if (hS <= 10)  	continue;  
Magic Number,ImageProcessing,ImageProcessor,C:\repos\Metaflow_sc2drill-client\ImageProcessing\ImageProcessor.cs,FindLetters,The following statement contains a magic number: for (int i = maskSize.Height - 1; i >= 0; i--) {  	var hS = 0;  	for (int j = 0; j < maskSize.Width; j++) {  		hS += mask [j' i];  		if (hS > 10)  			break;  	}  	if (hS <= 10)  		continue;  	hHigh = i;  	break;  }  
Magic Number,ImageProcessing,ImageProcessor,C:\repos\Metaflow_sc2drill-client\ImageProcessing\ImageProcessor.cs,FindLetters,The following statement contains a magic number: for (int i = maskSize.Height - 1; i >= 0; i--) {  	var hS = 0;  	for (int j = 0; j < maskSize.Width; j++) {  		hS += mask [j' i];  		if (hS > 10)  			break;  	}  	if (hS <= 10)  		continue;  	hHigh = i;  	break;  }  
Magic Number,ImageProcessing,ImageProcessor,C:\repos\Metaflow_sc2drill-client\ImageProcessing\ImageProcessor.cs,FindLetters,The following statement contains a magic number: for (int j = 0; j < maskSize.Width; j++) {  	hS += mask [j' i];  	if (hS > 10)  		break;  }  
Magic Number,ImageProcessing,ImageProcessor,C:\repos\Metaflow_sc2drill-client\ImageProcessing\ImageProcessor.cs,FindLetters,The following statement contains a magic number: if (hS > 10)  	break;  
Magic Number,ImageProcessing,ImageProcessor,C:\repos\Metaflow_sc2drill-client\ImageProcessing\ImageProcessor.cs,FindLetters,The following statement contains a magic number: if (hS <= 10)  	continue;  
Magic Number,ImageProcessing,ImageProcessor,C:\repos\Metaflow_sc2drill-client\ImageProcessing\ImageProcessor.cs,FindLetters,The following statement contains a magic number: for (int i = 0; i < maskSize.Width; i++) {  	if (vScan [i] == 0) {  		while (letterWidth > 0 && vScan [letterStart + letterWidth - 1] < 2) {  			letterWidth--;  		}  		if (letterWidth > 0 && maxScan > 3) {  			result.Add (new Rectangle (letterStart' hLow' letterWidth' hHigh - hLow + 1));  		}  		letterStart = -1;  		letterWidth = 0;  		maxScan = 0;  		thinWidth = 0;  	}  	else {  		if (letterWidth > 0)  			letterWidth++;  		if ((vScan [i] > 3) && letterStart == -1) {  			letterStart = i;  			letterWidth++;  		}  		thinWidth++;  		if ((thinWidth > 3) && letterStart == -1) {  			letterStart = i - thinWidth + 1;  			letterWidth = thinWidth;  		}  		maxScan = Math.Max (maxScan' vScan [i]);  	}  }  
Magic Number,ImageProcessing,ImageProcessor,C:\repos\Metaflow_sc2drill-client\ImageProcessing\ImageProcessor.cs,FindLetters,The following statement contains a magic number: for (int i = 0; i < maskSize.Width; i++) {  	if (vScan [i] == 0) {  		while (letterWidth > 0 && vScan [letterStart + letterWidth - 1] < 2) {  			letterWidth--;  		}  		if (letterWidth > 0 && maxScan > 3) {  			result.Add (new Rectangle (letterStart' hLow' letterWidth' hHigh - hLow + 1));  		}  		letterStart = -1;  		letterWidth = 0;  		maxScan = 0;  		thinWidth = 0;  	}  	else {  		if (letterWidth > 0)  			letterWidth++;  		if ((vScan [i] > 3) && letterStart == -1) {  			letterStart = i;  			letterWidth++;  		}  		thinWidth++;  		if ((thinWidth > 3) && letterStart == -1) {  			letterStart = i - thinWidth + 1;  			letterWidth = thinWidth;  		}  		maxScan = Math.Max (maxScan' vScan [i]);  	}  }  
Magic Number,ImageProcessing,ImageProcessor,C:\repos\Metaflow_sc2drill-client\ImageProcessing\ImageProcessor.cs,FindLetters,The following statement contains a magic number: for (int i = 0; i < maskSize.Width; i++) {  	if (vScan [i] == 0) {  		while (letterWidth > 0 && vScan [letterStart + letterWidth - 1] < 2) {  			letterWidth--;  		}  		if (letterWidth > 0 && maxScan > 3) {  			result.Add (new Rectangle (letterStart' hLow' letterWidth' hHigh - hLow + 1));  		}  		letterStart = -1;  		letterWidth = 0;  		maxScan = 0;  		thinWidth = 0;  	}  	else {  		if (letterWidth > 0)  			letterWidth++;  		if ((vScan [i] > 3) && letterStart == -1) {  			letterStart = i;  			letterWidth++;  		}  		thinWidth++;  		if ((thinWidth > 3) && letterStart == -1) {  			letterStart = i - thinWidth + 1;  			letterWidth = thinWidth;  		}  		maxScan = Math.Max (maxScan' vScan [i]);  	}  }  
Magic Number,ImageProcessing,ImageProcessor,C:\repos\Metaflow_sc2drill-client\ImageProcessing\ImageProcessor.cs,FindLetters,The following statement contains a magic number: for (int i = 0; i < maskSize.Width; i++) {  	if (vScan [i] == 0) {  		while (letterWidth > 0 && vScan [letterStart + letterWidth - 1] < 2) {  			letterWidth--;  		}  		if (letterWidth > 0 && maxScan > 3) {  			result.Add (new Rectangle (letterStart' hLow' letterWidth' hHigh - hLow + 1));  		}  		letterStart = -1;  		letterWidth = 0;  		maxScan = 0;  		thinWidth = 0;  	}  	else {  		if (letterWidth > 0)  			letterWidth++;  		if ((vScan [i] > 3) && letterStart == -1) {  			letterStart = i;  			letterWidth++;  		}  		thinWidth++;  		if ((thinWidth > 3) && letterStart == -1) {  			letterStart = i - thinWidth + 1;  			letterWidth = thinWidth;  		}  		maxScan = Math.Max (maxScan' vScan [i]);  	}  }  
Magic Number,ImageProcessing,ImageProcessor,C:\repos\Metaflow_sc2drill-client\ImageProcessing\ImageProcessor.cs,FindLetters,The following statement contains a magic number: if (vScan [i] == 0) {  	while (letterWidth > 0 && vScan [letterStart + letterWidth - 1] < 2) {  		letterWidth--;  	}  	if (letterWidth > 0 && maxScan > 3) {  		result.Add (new Rectangle (letterStart' hLow' letterWidth' hHigh - hLow + 1));  	}  	letterStart = -1;  	letterWidth = 0;  	maxScan = 0;  	thinWidth = 0;  }  else {  	if (letterWidth > 0)  		letterWidth++;  	if ((vScan [i] > 3) && letterStart == -1) {  		letterStart = i;  		letterWidth++;  	}  	thinWidth++;  	if ((thinWidth > 3) && letterStart == -1) {  		letterStart = i - thinWidth + 1;  		letterWidth = thinWidth;  	}  	maxScan = Math.Max (maxScan' vScan [i]);  }  
Magic Number,ImageProcessing,ImageProcessor,C:\repos\Metaflow_sc2drill-client\ImageProcessing\ImageProcessor.cs,FindLetters,The following statement contains a magic number: if (vScan [i] == 0) {  	while (letterWidth > 0 && vScan [letterStart + letterWidth - 1] < 2) {  		letterWidth--;  	}  	if (letterWidth > 0 && maxScan > 3) {  		result.Add (new Rectangle (letterStart' hLow' letterWidth' hHigh - hLow + 1));  	}  	letterStart = -1;  	letterWidth = 0;  	maxScan = 0;  	thinWidth = 0;  }  else {  	if (letterWidth > 0)  		letterWidth++;  	if ((vScan [i] > 3) && letterStart == -1) {  		letterStart = i;  		letterWidth++;  	}  	thinWidth++;  	if ((thinWidth > 3) && letterStart == -1) {  		letterStart = i - thinWidth + 1;  		letterWidth = thinWidth;  	}  	maxScan = Math.Max (maxScan' vScan [i]);  }  
Magic Number,ImageProcessing,ImageProcessor,C:\repos\Metaflow_sc2drill-client\ImageProcessing\ImageProcessor.cs,FindLetters,The following statement contains a magic number: if (vScan [i] == 0) {  	while (letterWidth > 0 && vScan [letterStart + letterWidth - 1] < 2) {  		letterWidth--;  	}  	if (letterWidth > 0 && maxScan > 3) {  		result.Add (new Rectangle (letterStart' hLow' letterWidth' hHigh - hLow + 1));  	}  	letterStart = -1;  	letterWidth = 0;  	maxScan = 0;  	thinWidth = 0;  }  else {  	if (letterWidth > 0)  		letterWidth++;  	if ((vScan [i] > 3) && letterStart == -1) {  		letterStart = i;  		letterWidth++;  	}  	thinWidth++;  	if ((thinWidth > 3) && letterStart == -1) {  		letterStart = i - thinWidth + 1;  		letterWidth = thinWidth;  	}  	maxScan = Math.Max (maxScan' vScan [i]);  }  
Magic Number,ImageProcessing,ImageProcessor,C:\repos\Metaflow_sc2drill-client\ImageProcessing\ImageProcessor.cs,FindLetters,The following statement contains a magic number: if (vScan [i] == 0) {  	while (letterWidth > 0 && vScan [letterStart + letterWidth - 1] < 2) {  		letterWidth--;  	}  	if (letterWidth > 0 && maxScan > 3) {  		result.Add (new Rectangle (letterStart' hLow' letterWidth' hHigh - hLow + 1));  	}  	letterStart = -1;  	letterWidth = 0;  	maxScan = 0;  	thinWidth = 0;  }  else {  	if (letterWidth > 0)  		letterWidth++;  	if ((vScan [i] > 3) && letterStart == -1) {  		letterStart = i;  		letterWidth++;  	}  	thinWidth++;  	if ((thinWidth > 3) && letterStart == -1) {  		letterStart = i - thinWidth + 1;  		letterWidth = thinWidth;  	}  	maxScan = Math.Max (maxScan' vScan [i]);  }  
Magic Number,ImageProcessing,ImageProcessor,C:\repos\Metaflow_sc2drill-client\ImageProcessing\ImageProcessor.cs,FindLetters,The following statement contains a magic number: while (letterWidth > 0 && vScan [letterStart + letterWidth - 1] < 2) {  	letterWidth--;  }  
Magic Number,ImageProcessing,ImageProcessor,C:\repos\Metaflow_sc2drill-client\ImageProcessing\ImageProcessor.cs,FindLetters,The following statement contains a magic number: if (letterWidth > 0 && maxScan > 3) {  	result.Add (new Rectangle (letterStart' hLow' letterWidth' hHigh - hLow + 1));  }  
Magic Number,ImageProcessing,ImageProcessor,C:\repos\Metaflow_sc2drill-client\ImageProcessing\ImageProcessor.cs,FindLetters,The following statement contains a magic number: if ((vScan [i] > 3) && letterStart == -1) {  	letterStart = i;  	letterWidth++;  }  
Magic Number,ImageProcessing,ImageProcessor,C:\repos\Metaflow_sc2drill-client\ImageProcessing\ImageProcessor.cs,FindLetters,The following statement contains a magic number: if ((thinWidth > 3) && letterStart == -1) {  	letterStart = i - thinWidth + 1;  	letterWidth = thinWidth;  }  
Magic Number,ImageProcessing,ImageProcessor,C:\repos\Metaflow_sc2drill-client\ImageProcessing\ImageProcessor.cs,GetLetterMasks,The following statement contains a magic number: foreach (Rectangle rectangle in boxes) {  	var b = new Bitmap (Letter.Size' Letter.Size' PixelFormat.Format32bppRgb);  	var t = Graphics.FromImage (b);  	t.DrawImage (source' new Rectangle (0' 0' Letter.Size' Letter.Size)' rectangle' GraphicsUnit.Pixel);  	b = ThresholdGrays (threshold' 40' b);  	result.Add (new Letter () {  		Mask = ConvertToBitmask (b)'  		Rect = rectangle  	});  }  
Magic Number,ImageProcessing,ImageProcessor,C:\repos\Metaflow_sc2drill-client\ImageProcessing\ImageProcessor.cs,GetLetterMasks,The following statement contains a magic number: b = ThresholdGrays (threshold' 40' b);  
Magic Number,ImageProcessing,ImageProcessor,C:\repos\Metaflow_sc2drill-client\ImageProcessing\ImageProcessor.cs,FilterBrightes,The following statement contains a magic number: for (int j = 0; j < source.Height; j++) {  	var shift = j * source.Width;  	for (int i = 0; i < source.Width; i++) {  		var k = (shift + i) * (bitsPerPixel / 8);  		magnitudes.Add (new KeyValuePair<Point' byte> (new Point (i' j)' (byte)((data [k] + data [k + 1] + data [k + 2]) / 3)));  	}  }  
Magic Number,ImageProcessing,ImageProcessor,C:\repos\Metaflow_sc2drill-client\ImageProcessing\ImageProcessor.cs,FilterBrightes,The following statement contains a magic number: for (int j = 0; j < source.Height; j++) {  	var shift = j * source.Width;  	for (int i = 0; i < source.Width; i++) {  		var k = (shift + i) * (bitsPerPixel / 8);  		magnitudes.Add (new KeyValuePair<Point' byte> (new Point (i' j)' (byte)((data [k] + data [k + 1] + data [k + 2]) / 3)));  	}  }  
Magic Number,ImageProcessing,ImageProcessor,C:\repos\Metaflow_sc2drill-client\ImageProcessing\ImageProcessor.cs,FilterBrightes,The following statement contains a magic number: for (int j = 0; j < source.Height; j++) {  	var shift = j * source.Width;  	for (int i = 0; i < source.Width; i++) {  		var k = (shift + i) * (bitsPerPixel / 8);  		magnitudes.Add (new KeyValuePair<Point' byte> (new Point (i' j)' (byte)((data [k] + data [k + 1] + data [k + 2]) / 3)));  	}  }  
Magic Number,ImageProcessing,ImageProcessor,C:\repos\Metaflow_sc2drill-client\ImageProcessing\ImageProcessor.cs,FilterBrightes,The following statement contains a magic number: for (int i = 0; i < source.Width; i++) {  	var k = (shift + i) * (bitsPerPixel / 8);  	magnitudes.Add (new KeyValuePair<Point' byte> (new Point (i' j)' (byte)((data [k] + data [k + 1] + data [k + 2]) / 3)));  }  
Magic Number,ImageProcessing,ImageProcessor,C:\repos\Metaflow_sc2drill-client\ImageProcessing\ImageProcessor.cs,FilterBrightes,The following statement contains a magic number: for (int i = 0; i < source.Width; i++) {  	var k = (shift + i) * (bitsPerPixel / 8);  	magnitudes.Add (new KeyValuePair<Point' byte> (new Point (i' j)' (byte)((data [k] + data [k + 1] + data [k + 2]) / 3)));  }  
Magic Number,ImageProcessing,ImageProcessor,C:\repos\Metaflow_sc2drill-client\ImageProcessing\ImageProcessor.cs,FilterBrightes,The following statement contains a magic number: for (int i = 0; i < source.Width; i++) {  	var k = (shift + i) * (bitsPerPixel / 8);  	magnitudes.Add (new KeyValuePair<Point' byte> (new Point (i' j)' (byte)((data [k] + data [k + 1] + data [k + 2]) / 3)));  }  
Magic Number,ImageProcessing,ImageProcessor,C:\repos\Metaflow_sc2drill-client\ImageProcessing\ImageProcessor.cs,FilterBrightes,The following statement contains a magic number: magnitudes.Add (new KeyValuePair<Point' byte> (new Point (i' j)' (byte)((data [k] + data [k + 1] + data [k + 2]) / 3)));  
Magic Number,ImageProcessing,ImageProcessor,C:\repos\Metaflow_sc2drill-client\ImageProcessing\ImageProcessor.cs,FilterBrightes,The following statement contains a magic number: magnitudes.Add (new KeyValuePair<Point' byte> (new Point (i' j)' (byte)((data [k] + data [k + 1] + data [k + 2]) / 3)));  
Magic Number,ImageProcessing,ImageProcessor,C:\repos\Metaflow_sc2drill-client\ImageProcessing\ImageProcessor.cs,DetectVerticalLinesColor,The following statement contains a magic number: for (int j = 0; j < multHeight; j += step) {  	var shift = j * source.Width;  	for (int i = 0; i < multWidth; i += step) {  		var magnitude = data [shift + i] + data [shift + i + 1] + data [shift + i + 2];  		if (magnitude < 150)  			continue;  		var c = Color.FromArgb (data [shift + i + 2]' data [shift + i + 1]' data [shift + i]);  		if (!colorCounts [i / step].ContainsKey (c))  			colorCounts [i / step] [c] = 0;  		colorCounts [i / step] [c] += 1;  	}  }  
Magic Number,ImageProcessing,ImageProcessor,C:\repos\Metaflow_sc2drill-client\ImageProcessing\ImageProcessor.cs,DetectVerticalLinesColor,The following statement contains a magic number: for (int j = 0; j < multHeight; j += step) {  	var shift = j * source.Width;  	for (int i = 0; i < multWidth; i += step) {  		var magnitude = data [shift + i] + data [shift + i + 1] + data [shift + i + 2];  		if (magnitude < 150)  			continue;  		var c = Color.FromArgb (data [shift + i + 2]' data [shift + i + 1]' data [shift + i]);  		if (!colorCounts [i / step].ContainsKey (c))  			colorCounts [i / step] [c] = 0;  		colorCounts [i / step] [c] += 1;  	}  }  
Magic Number,ImageProcessing,ImageProcessor,C:\repos\Metaflow_sc2drill-client\ImageProcessing\ImageProcessor.cs,DetectVerticalLinesColor,The following statement contains a magic number: for (int j = 0; j < multHeight; j += step) {  	var shift = j * source.Width;  	for (int i = 0; i < multWidth; i += step) {  		var magnitude = data [shift + i] + data [shift + i + 1] + data [shift + i + 2];  		if (magnitude < 150)  			continue;  		var c = Color.FromArgb (data [shift + i + 2]' data [shift + i + 1]' data [shift + i]);  		if (!colorCounts [i / step].ContainsKey (c))  			colorCounts [i / step] [c] = 0;  		colorCounts [i / step] [c] += 1;  	}  }  
Magic Number,ImageProcessing,ImageProcessor,C:\repos\Metaflow_sc2drill-client\ImageProcessing\ImageProcessor.cs,DetectVerticalLinesColor,The following statement contains a magic number: for (int i = 0; i < multWidth; i += step) {  	var magnitude = data [shift + i] + data [shift + i + 1] + data [shift + i + 2];  	if (magnitude < 150)  		continue;  	var c = Color.FromArgb (data [shift + i + 2]' data [shift + i + 1]' data [shift + i]);  	if (!colorCounts [i / step].ContainsKey (c))  		colorCounts [i / step] [c] = 0;  	colorCounts [i / step] [c] += 1;  }  
Magic Number,ImageProcessing,ImageProcessor,C:\repos\Metaflow_sc2drill-client\ImageProcessing\ImageProcessor.cs,DetectVerticalLinesColor,The following statement contains a magic number: for (int i = 0; i < multWidth; i += step) {  	var magnitude = data [shift + i] + data [shift + i + 1] + data [shift + i + 2];  	if (magnitude < 150)  		continue;  	var c = Color.FromArgb (data [shift + i + 2]' data [shift + i + 1]' data [shift + i]);  	if (!colorCounts [i / step].ContainsKey (c))  		colorCounts [i / step] [c] = 0;  	colorCounts [i / step] [c] += 1;  }  
Magic Number,ImageProcessing,ImageProcessor,C:\repos\Metaflow_sc2drill-client\ImageProcessing\ImageProcessor.cs,DetectVerticalLinesColor,The following statement contains a magic number: for (int i = 0; i < multWidth; i += step) {  	var magnitude = data [shift + i] + data [shift + i + 1] + data [shift + i + 2];  	if (magnitude < 150)  		continue;  	var c = Color.FromArgb (data [shift + i + 2]' data [shift + i + 1]' data [shift + i]);  	if (!colorCounts [i / step].ContainsKey (c))  		colorCounts [i / step] [c] = 0;  	colorCounts [i / step] [c] += 1;  }  
Magic Number,ImageProcessing,ImageProcessor,C:\repos\Metaflow_sc2drill-client\ImageProcessing\ImageProcessor.cs,DetectVerticalLinesColor,The following statement contains a magic number: if (magnitude < 150)  	continue;  
