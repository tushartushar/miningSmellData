Implementation smell,Namespace,Class,File,Method,Description
Long Method,Akavache.Sqlite3.Internal,TableQuery<T>,C:\repos\akavache_Akavache\src\Akavache.Sqlite3\SQLite.cs,CompileExpr,The method has 156 lines of code.
Complex Method,Akavache.Sqlite3.Internal,SQLiteConnection,C:\repos\akavache_Akavache\src\Akavache.Sqlite3\SQLite.cs,CreateTable,Cyclomatic complexity of the method is 9
Complex Method,Akavache.Sqlite3.Internal,SQLiteConnection,C:\repos\akavache_Akavache\src\Akavache.Sqlite3\SQLite.cs,Insert,Cyclomatic complexity of the method is 9
Complex Method,Akavache.Sqlite3,SqliteOperationQueue,C:\repos\akavache_Akavache\src\Akavache.Sqlite3\OperationQueue.cs,Dispose,Cyclomatic complexity of the method is 12
Complex Method,Akavache.Sqlite3,SqliteOperationQueue,C:\repos\akavache_Akavache\src\Akavache.Sqlite3\OperationQueue.cs,CoalesceOperations,Cyclomatic complexity of the method is 11
Long Parameter List,Akavache.Sqlite3.Internal,SQLite3,C:\repos\akavache_Akavache\src\Akavache.Sqlite3\SQLite.cs,BindText,The method has 5 parameters. Parameters: stmt' index' val' n' free
Long Parameter List,Akavache.Sqlite3.Internal,SQLite3,C:\repos\akavache_Akavache\src\Akavache.Sqlite3\SQLite.cs,BindBlob,The method has 5 parameters. Parameters: stmt' index' val' n' free
Long Statement,Akavache.Sqlite3.Internal,SQLiteConnection,C:\repos\akavache_Akavache\src\Akavache.Sqlite3\SQLite.cs,Execute,The length of the statement  "				Debug.WriteLine (string.Format ("Finished in {0} ms ({1:0.0} s total)"' _sw.ElapsedMilliseconds' _elapsedMilliseconds / 1000.0));" is 129.
Long Statement,Akavache.Sqlite3.Internal,SQLiteConnection,C:\repos\akavache_Akavache\src\Akavache.Sqlite3\SQLite.cs,ExecuteScalar,The length of the statement  "				Debug.WriteLine (string.Format ("Finished in {0} ms ({1:0.0} s total)"' _sw.ElapsedMilliseconds' _elapsedMilliseconds / 1000.0));" is 129.
Long Statement,Akavache.Sqlite3.Internal,SQLiteConnection,C:\repos\akavache_Akavache\src\Akavache.Sqlite3\SQLite.cs,DoSavePointExecute,The length of the statement  "			throw new ArgumentException ("savePoint is not valid' and should be the result of a call to SaveTransactionPoint."' "savePoint");" is 129.
Long Statement,Akavache.Sqlite3.Internal,SQLiteConnection,C:\repos\akavache_Akavache\src\Akavache.Sqlite3\SQLite.cs,Update,The length of the statement  "				if (ex.Result == SQLite3.Result.Constraint && SQLite3.ExtendedErrCode (this.Handle) == SQLite3.ExtendedResult.ConstraintNotNull) {" is 130.
Long Statement,Akavache.Sqlite3.Internal,Orm,C:\repos\akavache_Akavache\src\Akavache.Sqlite3\SQLite.cs,SqlType,The length of the statement  "			if (clrType == typeof(Boolean) || clrType == typeof(Byte) || clrType == typeof(UInt16) || clrType == typeof(SByte) || clrType == typeof(Int16) || clrType == typeof(Int32)) {" is 173.
Long Statement,Akavache.Sqlite3.Internal,PreparedSqlLiteInsertCommand,C:\repos\akavache_Akavache\src\Akavache.Sqlite3\SQLite.cs,ExecuteNonQuery,The length of the statement  "			} else if (r == SQLite3.Result.Constraint && SQLite3.ExtendedErrCode (Connection.Handle) == SQLite3.ExtendedResult.ConstraintNotNull) {" is 135.
Long Statement,Akavache.Sqlite3.Internal,TableQuery<T>,C:\repos\akavache_Akavache\src\Akavache.Sqlite3\SQLite.cs,GenerateCommand,The length of the statement  "					var t = string.Join ("' "' _orderBys.Select (o => "\"" + o.ColumnName + "\"" + (o.Ascending ? "" : " desc")).ToArray ());" is 121.
Long Statement,Akavache.Sqlite3.Internal,TableQuery<T>,C:\repos\akavache_Akavache\src\Akavache.Sqlite3\SQLite.cs,CompileExpr,The length of the statement  "					if (val != null && val is System.Collections.IEnumerable && !(val is string) && !(val is System.Collections.Generic.IEnumerable<byte>)) {" is 137.
Long Statement,Akavache.Sqlite3,OperationQueueItem,C:\repos\akavache_Akavache\src\Akavache.Sqlite3\OperationQueue.cs,CreateInsert,The length of the statement  "            return new OperationQueueItem() { OperationType = opType' Parameters = toInsert' Completion = completion ?? new AsyncSubject<Unit>() };" is 135.
Long Statement,Akavache.Sqlite3,OperationQueueItem,C:\repos\akavache_Akavache\src\Akavache.Sqlite3\OperationQueue.cs,CreateInvalidate,The length of the statement  "            return new OperationQueueItem() { OperationType = opType' Parameters = toInvalidate' Completion = completion ?? new AsyncSubject<Unit>() };" is 139.
Long Statement,Akavache.Sqlite3,OperationQueueItem,C:\repos\akavache_Akavache\src\Akavache.Sqlite3\OperationQueue.cs,CreateSelect,The length of the statement  "            return new OperationQueueItem() { OperationType = opType' Parameters = toSelect' Completion = completion ?? new AsyncSubject<IEnumerable<CacheElement>>() };" is 156.
Long Statement,Akavache.Sqlite3,OperationQueueItem,C:\repos\akavache_Akavache\src\Akavache.Sqlite3\OperationQueue.cs,CreateUnit,The length of the statement  "            return new OperationQueueItem() { OperationType = opType' Parameters = null' Completion = completion ?? new AsyncSubject<Unit>() };" is 131.
Long Statement,Akavache.Sqlite3,OperationQueueItem,C:\repos\akavache_Akavache\src\Akavache.Sqlite3\OperationQueue.cs,CreateGetAllKeys,The length of the statement  "            return new OperationQueueItem() { OperationType = OperationType.GetKeysSqliteOperation' Parameters = null' Completion = new AsyncSubject<IEnumerable<string>>() };" is 162.
Long Statement,Akavache.Sqlite3,Registrations,C:\repos\akavache_Akavache\src\Akavache.Sqlite3\Registrations.cs,Register,The length of the statement  "                return new SQLitePersistentBlobCache(Path.Combine(fs.GetDefaultLocalMachineCacheDirectory()' "blobs.db")' BlobCache.TaskpoolScheduler);" is 135.
Long Statement,Akavache.Sqlite3,Registrations,C:\repos\akavache_Akavache\src\Akavache.Sqlite3\Registrations.cs,Register,The length of the statement  "                return new SQLitePersistentBlobCache(Path.Combine(fs.GetDefaultRoamingCacheDirectory()' "userblobs.db")' BlobCache.TaskpoolScheduler);" is 134.
Long Statement,Akavache.Sqlite3,Registrations,C:\repos\akavache_Akavache\src\Akavache.Sqlite3\Registrations.cs,Register,The length of the statement  "                return new SQLiteEncryptedBlobCache(Path.Combine(fs.GetDefaultSecretCacheDirectory()' "secret.db")' Locator.Current.GetService<IEncryptionProvider>()' BlobCache.TaskpoolScheduler);" is 180.
Long Statement,Akavache.Sqlite3,SQLitePersistentBlobCache,C:\repos\akavache_Akavache\src\Akavache.Sqlite3\SqlitePersistentBlobCacheNext.cs,GetCreatedAt,The length of the statement  "            if (disposed) return ExceptionHelper.ObservableThrowObjectDisposedException<DateTimeOffset?>("SqlitePersistentBlobCache");" is 122.
Long Statement,Akavache.Sqlite3,SQLitePersistentBlobCache,C:\repos\akavache_Akavache\src\Akavache.Sqlite3\SqlitePersistentBlobCacheNext.cs,GetAllObjects,The length of the statement  "            if (disposed) return ExceptionHelper.ObservableThrowObjectDisposedException<IEnumerable<T>>("SqlitePersistentBlobCache");" is 121.
Long Statement,Akavache.Sqlite3,SQLitePersistentBlobCache,C:\repos\akavache_Akavache\src\Akavache.Sqlite3\SqlitePersistentBlobCacheNext.cs,Initialize,The length of the statement  "                        var sql = "INSERT INTO CacheElement SELECT Key'TypeName'Value'Expiration'\"{0}\" AS CreatedAt FROM VersionOneCacheElement;";" is 124.
Complex Conditional,Akavache.Sqlite3.Internal,Column,C:\repos\akavache_Akavache\src\Akavache.Sqlite3\SQLite.cs,Column,The conditional expression  "!Indices.Any()                     && !IsPK                     && ((createFlags & CreateFlags.ImplicitIndex) == CreateFlags.ImplicitIndex)                     && Name.EndsWith (Orm.ImplicitIndexSuffix' StringComparison.OrdinalIgnoreCase)"  is complex.
Complex Conditional,Akavache.Sqlite3.Internal,Orm,C:\repos\akavache_Akavache\src\Akavache.Sqlite3\SQLite.cs,SqlType,The conditional expression  "clrType == typeof(Boolean) || clrType == typeof(Byte) || clrType == typeof(UInt16) || clrType == typeof(SByte) || clrType == typeof(Int16) || clrType == typeof(Int32)"  is complex.
Complex Conditional,Akavache.Sqlite3.Internal,SQLiteCommand,C:\repos\akavache_Akavache\src\Akavache.Sqlite3\SQLite.cs,BindParameter,The conditional expression  "value is Byte || value is UInt16 || value is SByte || value is Int16"  is complex.
Complex Conditional,Akavache.Sqlite3.Internal,TableQuery<T>,C:\repos\akavache_Akavache\src\Akavache.Sqlite3\SQLite.cs,CompileExpr,The conditional expression  "val != null && val is System.Collections.IEnumerable && !(val is string) && !(val is System.Collections.Generic.IEnumerable<byte>)"  is complex.
Empty Catch Block,Akavache.Sqlite3,SqliteOperationQueue,C:\repos\akavache_Akavache\src\Akavache.Sqlite3\OperationQueue.cs,Start,The method has an empty catch block.
Empty Catch Block,Akavache.Sqlite3,SQLitePersistentBlobCache,C:\repos\akavache_Akavache\src\Akavache.Sqlite3\SqlitePersistentBlobCacheNext.cs,Initialize,The method has an empty catch block.
Magic Number,Akavache.Sqlite3.Internal,SQLiteConnection,C:\repos\akavache_Akavache\src\Akavache.Sqlite3\SQLite.cs,SQLiteConnection,The following statement contains a magic number: BusyTimeout = TimeSpan.FromSeconds (0.1);
Magic Number,Akavache.Sqlite3.Internal,SQLiteConnection,C:\repos\akavache_Akavache\src\Akavache.Sqlite3\SQLite.cs,Execute,The following statement contains a magic number: if (TimeExecution) { 				_sw.Stop (); 				_elapsedMilliseconds += _sw.ElapsedMilliseconds; 				Debug.WriteLine (string.Format ("Finished in {0} ms ({1:0.0} s total)"' _sw.ElapsedMilliseconds' _elapsedMilliseconds / 1000.0)); 			}
Magic Number,Akavache.Sqlite3.Internal,SQLiteConnection,C:\repos\akavache_Akavache\src\Akavache.Sqlite3\SQLite.cs,ExecuteScalar,The following statement contains a magic number: if (TimeExecution) { 				_sw.Stop (); 				_elapsedMilliseconds += _sw.ElapsedMilliseconds; 				Debug.WriteLine (string.Format ("Finished in {0} ms ({1:0.0} s total)"' _sw.ElapsedMilliseconds' _elapsedMilliseconds / 1000.0)); 			}
Magic Number,Akavache.Sqlite3.Internal,SQLiteConnection,C:\repos\akavache_Akavache\src\Akavache.Sqlite3\SQLite.cs,DoSavePointExecute,The following statement contains a magic number: if (firstLen >= 2 && savepoint.Length > firstLen + 1) { 				int depth; 				if (Int32.TryParse (savepoint.Substring (firstLen + 1)' out depth)) { 					// TODO: Mild race here' but inescapable without locking almost everywhere. 					if (0 <= depth && depth < _transactionDepth) { #if NETFX_CORE || USE_SQLITEPCL_RAW                         Volatile.Write (ref _transactionDepth' depth); #else                         Thread.VolatileWrite (ref _transactionDepth' depth); #endif                         Execute (cmd + savepoint); 						return; 					} 				} 			}
Magic Number,Akavache.Sqlite3.Internal,SQLiteCommand,C:\repos\akavache_Akavache\src\Akavache.Sqlite3\SQLite.cs,BindParameter,The following statement contains a magic number: if (value == null) { 				SQLite3.BindNull (stmt' index); 			} else { 				if (value is Int32) { 					SQLite3.BindInt (stmt' index' (int)value); 				} else if (value is String) { 					SQLite3.BindText (stmt' index' (string)value' -1' NegativePointer); 				} else if (value is Byte || value is UInt16 || value is SByte || value is Int16) { 					SQLite3.BindInt (stmt' index' Convert.ToInt32 (value)); 				} else if (value is Boolean) { 					SQLite3.BindInt (stmt' index' (bool)value ? 1 : 0); 				} else if (value is UInt32 || value is Int64) { 					SQLite3.BindInt64 (stmt' index' Convert.ToInt64 (value)); 				} else if (value is Single || value is Double || value is Decimal) { 					SQLite3.BindDouble (stmt' index' Convert.ToDouble (value)); 				} else if (value is TimeSpan) { 					SQLite3.BindInt64(stmt' index' ((TimeSpan)value).Ticks); 				} else if (value is DateTime) { 					if (storeDateTimeAsTicks) { 						SQLite3.BindInt64 (stmt' index' ((DateTime)value).Ticks); 					} 					else { 						SQLite3.BindText (stmt' index' ((DateTime)value).ToString ("yyyy-MM-dd HH:mm:ss")' -1' NegativePointer); 					} 				} else if (value is DateTimeOffset) { 					SQLite3.BindInt64 (stmt' index' ((DateTimeOffset)value).UtcTicks); #if !USE_NEW_REFLECTION_API 				} else if (value.GetType().IsEnum) { #else 				} else if (value.GetType().GetTypeInfo().IsEnum) { #endif 					SQLite3.BindInt (stmt' index' Convert.ToInt32 (value));                 } else if (value is byte[]){                     SQLite3.BindBlob(stmt' index' (byte[]) value' ((byte[]) value).Length' NegativePointer);                 } else if (value is Guid) {                     SQLite3.BindText(stmt' index' ((Guid)value).ToString()' 72' NegativePointer);                 } else {                     throw new NotSupportedException("Cannot store type: " + value.GetType());                 } 			}
Magic Number,Akavache.Sqlite3.Internal,TableQuery<T>,C:\repos\akavache_Akavache\src\Akavache.Sqlite3\SQLite.cs,CompileExpr,The following statement contains a magic number: if (expr == null) { 				throw new NotSupportedException ("Expression is NULL"); 			} else if (expr is BinaryExpression) { 				var bin = (BinaryExpression)expr; 				 				var leftr = CompileExpr (bin.Left' queryArgs); 				var rightr = CompileExpr (bin.Right' queryArgs);  				//If either side is a parameter and is null' then handle the other side specially (for "is null"/"is not null") 				string text; 				if (leftr.CommandText == "?" && leftr.Value == null) 					text = CompileNullBinaryExpression(bin' rightr); 				else if (rightr.CommandText == "?" && rightr.Value == null) 					text = CompileNullBinaryExpression(bin' leftr); 				else 					text = "(" + leftr.CommandText + " " + GetSqlName(bin) + " " + rightr.CommandText + ")"; 				return new CompileResult { CommandText = text }; 			} else if (expr.NodeType == ExpressionType.Call) { 				 				var call = (MethodCallExpression)expr; 				var args = new CompileResult[call.Arguments.Count]; 				var obj = call.Object != null ? CompileExpr (call.Object' queryArgs) : null; 				 				for (var i = 0; i < args.Length; i++) { 					args [i] = CompileExpr (call.Arguments [i]' queryArgs); 				} 				 				var sqlCall = ""; 				 				if (call.Method.Name == "Like" && args.Length == 2) { 					sqlCall = "(" + args [0].CommandText + " like " + args [1].CommandText + ")"; 				} 				else if (call.Method.Name == "Contains" && args.Length == 2) { 					sqlCall = "(" + args [1].CommandText + " in " + args [0].CommandText + ")"; 				} 				else if (call.Method.Name == "Contains" && args.Length == 1) { 					if (call.Object != null && call.Object.Type == typeof(string)) { 						sqlCall = "(" + obj.CommandText + " like ('%' || " + args [0].CommandText + " || '%'))"; 					} 					else { 						sqlCall = "(" + args [0].CommandText + " in " + obj.CommandText + ")"; 					} 				} 				else if (call.Method.Name == "StartsWith" && args.Length == 1) { 					sqlCall = "(" + obj.CommandText + " like (" + args [0].CommandText + " || '%'))"; 				} 				else if (call.Method.Name == "EndsWith" && args.Length == 1) { 					sqlCall = "(" + obj.CommandText + " like ('%' || " + args [0].CommandText + "))"; 				} 				else if (call.Method.Name == "Equals" && args.Length == 1) { 					sqlCall = "(" + obj.CommandText + " = (" + args[0].CommandText + "))"; 				} else if (call.Method.Name == "ToLower") { 					sqlCall = "(lower(" + obj.CommandText + "))";  				} else if (call.Method.Name == "ToUpper") { 					sqlCall = "(upper(" + obj.CommandText + "))";  				} else { 					sqlCall = call.Method.Name.ToLower () + "(" + string.Join ("'"' args.Select (a => a.CommandText).ToArray ()) + ")"; 				} 				return new CompileResult { CommandText = sqlCall }; 				 			} else if (expr.NodeType == ExpressionType.Constant) { 				var c = (ConstantExpression)expr; 				queryArgs.Add (c.Value); 				return new CompileResult { 					CommandText = "?"' 					Value = c.Value 				}; 			} else if (expr.NodeType == ExpressionType.Convert) { 				var u = (UnaryExpression)expr; 				var ty = u.Type; 				var valr = CompileExpr (u.Operand' queryArgs); 				return new CompileResult { 					CommandText = valr.CommandText' 					Value = valr.Value != null ? ConvertTo (valr.Value' ty) : null 				}; 			} else if (expr.NodeType == ExpressionType.MemberAccess) { 				var mem = (MemberExpression)expr; 				 				if (mem.Expression!=null && mem.Expression.NodeType == ExpressionType.Parameter) { 					// 					// This is a column of our table' output just the column name 					// Need to translate it if that column name is mapped 					// 					var columnName = Table.FindColumnWithPropertyName (mem.Member.Name).Name; 					return new CompileResult { CommandText = "\"" + columnName + "\"" }; 				} else { 					object obj = null; 					if (mem.Expression != null) { 						var r = CompileExpr (mem.Expression' queryArgs); 						if (r.Value == null) { 							throw new NotSupportedException ("Member access failed to compile expression"); 						} 						if (r.CommandText == "?") { 							queryArgs.RemoveAt (queryArgs.Count - 1); 						} 						obj = r.Value; 					} 					 					// 					// Get the member value 					// 					object val = null; 					 #if !USE_NEW_REFLECTION_API 					if (mem.Member.MemberType == MemberTypes.Property) { #else 					if (mem.Member is PropertyInfo) { #endif 						var m = (PropertyInfo)mem.Member; 						val = m.GetValue (obj' null); #if !USE_NEW_REFLECTION_API 					} else if (mem.Member.MemberType == MemberTypes.Field) { #else 					} else if (mem.Member is FieldInfo) { #endif 						var m = (FieldInfo)mem.Member; 						val = m.GetValue (obj); 					} else { #if !USE_NEW_REFLECTION_API 						throw new NotSupportedException ("MemberExpr: " + mem.Member.MemberType); #else 						throw new NotSupportedException ("MemberExpr: " + mem.Member.DeclaringType); #endif 					} 					 					// 					// Work special magic for enumerables 					// 					if (val != null && val is System.Collections.IEnumerable && !(val is string) && !(val is System.Collections.Generic.IEnumerable<byte>)) { 						var sb = new System.Text.StringBuilder(); 						sb.Append("("); 						var head = ""; 						foreach (var a in (System.Collections.IEnumerable)val) { 							queryArgs.Add(a); 							sb.Append(head); 							sb.Append("?"); 							head = "'"; 						} 						sb.Append(")"); 						return new CompileResult { 							CommandText = sb.ToString()' 							Value = val 						}; 					} 					else { 						queryArgs.Add (val); 						return new CompileResult { 							CommandText = "?"' 							Value = val 						}; 					} 				} 			}
Magic Number,Akavache.Sqlite3.Internal,TableQuery<T>,C:\repos\akavache_Akavache\src\Akavache.Sqlite3\SQLite.cs,CompileExpr,The following statement contains a magic number: if (expr == null) { 				throw new NotSupportedException ("Expression is NULL"); 			} else if (expr is BinaryExpression) { 				var bin = (BinaryExpression)expr; 				 				var leftr = CompileExpr (bin.Left' queryArgs); 				var rightr = CompileExpr (bin.Right' queryArgs);  				//If either side is a parameter and is null' then handle the other side specially (for "is null"/"is not null") 				string text; 				if (leftr.CommandText == "?" && leftr.Value == null) 					text = CompileNullBinaryExpression(bin' rightr); 				else if (rightr.CommandText == "?" && rightr.Value == null) 					text = CompileNullBinaryExpression(bin' leftr); 				else 					text = "(" + leftr.CommandText + " " + GetSqlName(bin) + " " + rightr.CommandText + ")"; 				return new CompileResult { CommandText = text }; 			} else if (expr.NodeType == ExpressionType.Call) { 				 				var call = (MethodCallExpression)expr; 				var args = new CompileResult[call.Arguments.Count]; 				var obj = call.Object != null ? CompileExpr (call.Object' queryArgs) : null; 				 				for (var i = 0; i < args.Length; i++) { 					args [i] = CompileExpr (call.Arguments [i]' queryArgs); 				} 				 				var sqlCall = ""; 				 				if (call.Method.Name == "Like" && args.Length == 2) { 					sqlCall = "(" + args [0].CommandText + " like " + args [1].CommandText + ")"; 				} 				else if (call.Method.Name == "Contains" && args.Length == 2) { 					sqlCall = "(" + args [1].CommandText + " in " + args [0].CommandText + ")"; 				} 				else if (call.Method.Name == "Contains" && args.Length == 1) { 					if (call.Object != null && call.Object.Type == typeof(string)) { 						sqlCall = "(" + obj.CommandText + " like ('%' || " + args [0].CommandText + " || '%'))"; 					} 					else { 						sqlCall = "(" + args [0].CommandText + " in " + obj.CommandText + ")"; 					} 				} 				else if (call.Method.Name == "StartsWith" && args.Length == 1) { 					sqlCall = "(" + obj.CommandText + " like (" + args [0].CommandText + " || '%'))"; 				} 				else if (call.Method.Name == "EndsWith" && args.Length == 1) { 					sqlCall = "(" + obj.CommandText + " like ('%' || " + args [0].CommandText + "))"; 				} 				else if (call.Method.Name == "Equals" && args.Length == 1) { 					sqlCall = "(" + obj.CommandText + " = (" + args[0].CommandText + "))"; 				} else if (call.Method.Name == "ToLower") { 					sqlCall = "(lower(" + obj.CommandText + "))";  				} else if (call.Method.Name == "ToUpper") { 					sqlCall = "(upper(" + obj.CommandText + "))";  				} else { 					sqlCall = call.Method.Name.ToLower () + "(" + string.Join ("'"' args.Select (a => a.CommandText).ToArray ()) + ")"; 				} 				return new CompileResult { CommandText = sqlCall }; 				 			} else if (expr.NodeType == ExpressionType.Constant) { 				var c = (ConstantExpression)expr; 				queryArgs.Add (c.Value); 				return new CompileResult { 					CommandText = "?"' 					Value = c.Value 				}; 			} else if (expr.NodeType == ExpressionType.Convert) { 				var u = (UnaryExpression)expr; 				var ty = u.Type; 				var valr = CompileExpr (u.Operand' queryArgs); 				return new CompileResult { 					CommandText = valr.CommandText' 					Value = valr.Value != null ? ConvertTo (valr.Value' ty) : null 				}; 			} else if (expr.NodeType == ExpressionType.MemberAccess) { 				var mem = (MemberExpression)expr; 				 				if (mem.Expression!=null && mem.Expression.NodeType == ExpressionType.Parameter) { 					// 					// This is a column of our table' output just the column name 					// Need to translate it if that column name is mapped 					// 					var columnName = Table.FindColumnWithPropertyName (mem.Member.Name).Name; 					return new CompileResult { CommandText = "\"" + columnName + "\"" }; 				} else { 					object obj = null; 					if (mem.Expression != null) { 						var r = CompileExpr (mem.Expression' queryArgs); 						if (r.Value == null) { 							throw new NotSupportedException ("Member access failed to compile expression"); 						} 						if (r.CommandText == "?") { 							queryArgs.RemoveAt (queryArgs.Count - 1); 						} 						obj = r.Value; 					} 					 					// 					// Get the member value 					// 					object val = null; 					 #if !USE_NEW_REFLECTION_API 					if (mem.Member.MemberType == MemberTypes.Property) { #else 					if (mem.Member is PropertyInfo) { #endif 						var m = (PropertyInfo)mem.Member; 						val = m.GetValue (obj' null); #if !USE_NEW_REFLECTION_API 					} else if (mem.Member.MemberType == MemberTypes.Field) { #else 					} else if (mem.Member is FieldInfo) { #endif 						var m = (FieldInfo)mem.Member; 						val = m.GetValue (obj); 					} else { #if !USE_NEW_REFLECTION_API 						throw new NotSupportedException ("MemberExpr: " + mem.Member.MemberType); #else 						throw new NotSupportedException ("MemberExpr: " + mem.Member.DeclaringType); #endif 					} 					 					// 					// Work special magic for enumerables 					// 					if (val != null && val is System.Collections.IEnumerable && !(val is string) && !(val is System.Collections.Generic.IEnumerable<byte>)) { 						var sb = new System.Text.StringBuilder(); 						sb.Append("("); 						var head = ""; 						foreach (var a in (System.Collections.IEnumerable)val) { 							queryArgs.Add(a); 							sb.Append(head); 							sb.Append("?"); 							head = "'"; 						} 						sb.Append(")"); 						return new CompileResult { 							CommandText = sb.ToString()' 							Value = val 						}; 					} 					else { 						queryArgs.Add (val); 						return new CompileResult { 							CommandText = "?"' 							Value = val 						}; 					} 				} 			}
Magic Number,Akavache.Sqlite3,BulkInsertSqliteOperation,C:\repos\akavache_Akavache\src\Akavache.Sqlite3\Operations.cs,PrepareToExecute,The following statement contains a magic number: return () =>              {                 foreach (var v in insertList)                  {                     try                      {                         this.Checked(raw.sqlite3_bind_text(insertOp' 1' v.Key));                          if (String.IsNullOrWhiteSpace(v.TypeName))                          {                             this.Checked(raw.sqlite3_bind_null(insertOp' 2));                         }                          else                          {                             this.Checked(raw.sqlite3_bind_text(insertOp' 2' v.TypeName));                         }                          this.Checked(raw.sqlite3_bind_blob(insertOp' 3' v.Value));                         this.Checked(raw.sqlite3_bind_int64(insertOp' 4' v.Expiration.Ticks));                         this.Checked(raw.sqlite3_bind_int64(insertOp' 5' v.CreatedAt.Ticks));                          this.Checked(raw.sqlite3_step(insertOp));                     }                      finally                      {                         this.Checked(raw.sqlite3_reset(insertOp));                     }                 }             };
Magic Number,Akavache.Sqlite3,BulkInsertSqliteOperation,C:\repos\akavache_Akavache\src\Akavache.Sqlite3\Operations.cs,PrepareToExecute,The following statement contains a magic number: return () =>              {                 foreach (var v in insertList)                  {                     try                      {                         this.Checked(raw.sqlite3_bind_text(insertOp' 1' v.Key));                          if (String.IsNullOrWhiteSpace(v.TypeName))                          {                             this.Checked(raw.sqlite3_bind_null(insertOp' 2));                         }                          else                          {                             this.Checked(raw.sqlite3_bind_text(insertOp' 2' v.TypeName));                         }                          this.Checked(raw.sqlite3_bind_blob(insertOp' 3' v.Value));                         this.Checked(raw.sqlite3_bind_int64(insertOp' 4' v.Expiration.Ticks));                         this.Checked(raw.sqlite3_bind_int64(insertOp' 5' v.CreatedAt.Ticks));                          this.Checked(raw.sqlite3_step(insertOp));                     }                      finally                      {                         this.Checked(raw.sqlite3_reset(insertOp));                     }                 }             };
Magic Number,Akavache.Sqlite3,BulkInsertSqliteOperation,C:\repos\akavache_Akavache\src\Akavache.Sqlite3\Operations.cs,PrepareToExecute,The following statement contains a magic number: return () =>              {                 foreach (var v in insertList)                  {                     try                      {                         this.Checked(raw.sqlite3_bind_text(insertOp' 1' v.Key));                          if (String.IsNullOrWhiteSpace(v.TypeName))                          {                             this.Checked(raw.sqlite3_bind_null(insertOp' 2));                         }                          else                          {                             this.Checked(raw.sqlite3_bind_text(insertOp' 2' v.TypeName));                         }                          this.Checked(raw.sqlite3_bind_blob(insertOp' 3' v.Value));                         this.Checked(raw.sqlite3_bind_int64(insertOp' 4' v.Expiration.Ticks));                         this.Checked(raw.sqlite3_bind_int64(insertOp' 5' v.CreatedAt.Ticks));                          this.Checked(raw.sqlite3_step(insertOp));                     }                      finally                      {                         this.Checked(raw.sqlite3_reset(insertOp));                     }                 }             };
Magic Number,Akavache.Sqlite3,BulkInsertSqliteOperation,C:\repos\akavache_Akavache\src\Akavache.Sqlite3\Operations.cs,PrepareToExecute,The following statement contains a magic number: return () =>              {                 foreach (var v in insertList)                  {                     try                      {                         this.Checked(raw.sqlite3_bind_text(insertOp' 1' v.Key));                          if (String.IsNullOrWhiteSpace(v.TypeName))                          {                             this.Checked(raw.sqlite3_bind_null(insertOp' 2));                         }                          else                          {                             this.Checked(raw.sqlite3_bind_text(insertOp' 2' v.TypeName));                         }                          this.Checked(raw.sqlite3_bind_blob(insertOp' 3' v.Value));                         this.Checked(raw.sqlite3_bind_int64(insertOp' 4' v.Expiration.Ticks));                         this.Checked(raw.sqlite3_bind_int64(insertOp' 5' v.CreatedAt.Ticks));                          this.Checked(raw.sqlite3_step(insertOp));                     }                      finally                      {                         this.Checked(raw.sqlite3_reset(insertOp));                     }                 }             };
Magic Number,Akavache.Sqlite3,BulkInsertSqliteOperation,C:\repos\akavache_Akavache\src\Akavache.Sqlite3\Operations.cs,PrepareToExecute,The following statement contains a magic number: return () =>              {                 foreach (var v in insertList)                  {                     try                      {                         this.Checked(raw.sqlite3_bind_text(insertOp' 1' v.Key));                          if (String.IsNullOrWhiteSpace(v.TypeName))                          {                             this.Checked(raw.sqlite3_bind_null(insertOp' 2));                         }                          else                          {                             this.Checked(raw.sqlite3_bind_text(insertOp' 2' v.TypeName));                         }                          this.Checked(raw.sqlite3_bind_blob(insertOp' 3' v.Value));                         this.Checked(raw.sqlite3_bind_int64(insertOp' 4' v.Expiration.Ticks));                         this.Checked(raw.sqlite3_bind_int64(insertOp' 5' v.CreatedAt.Ticks));                          this.Checked(raw.sqlite3_step(insertOp));                     }                      finally                      {                         this.Checked(raw.sqlite3_reset(insertOp));                     }                 }             };
Magic Number,Akavache.Sqlite3,BulkSelectSqliteOperation,C:\repos\akavache_Akavache\src\Akavache.Sqlite3\Operations.cs,PrepareToExecute,The following statement contains a magic number: return (() =>              {                 var result = new List<CacheElement>();                 try                  {                     for (int i = 0; i < selectList.Count; i++)                      {                         this.Checked(raw.sqlite3_bind_text(selectOp' i+1' selectList[i]));                     }                      while (this.Checked(raw.sqlite3_step(selectOp)) == SQLite3.Result.Row)                      {                         var ce = new CacheElement() {                             Key = raw.sqlite3_column_text(selectOp' 0)'                              TypeName = raw.sqlite3_column_text(selectOp' 1)'                              Value = raw.sqlite3_column_blob(selectOp' 2)'                             Expiration = new DateTime(raw.sqlite3_column_int64(selectOp' 3))'                             CreatedAt = new DateTime(raw.sqlite3_column_int64(selectOp' 4))'                         };                          if (now.UtcTicks <= ce.Expiration.Ticks) result.Add(ce);                     }                 }                  finally                  {                     this.Checked(raw.sqlite3_reset(selectOp));                 }                  return result;             });
Magic Number,Akavache.Sqlite3,BulkSelectSqliteOperation,C:\repos\akavache_Akavache\src\Akavache.Sqlite3\Operations.cs,PrepareToExecute,The following statement contains a magic number: return (() =>              {                 var result = new List<CacheElement>();                 try                  {                     for (int i = 0; i < selectList.Count; i++)                      {                         this.Checked(raw.sqlite3_bind_text(selectOp' i+1' selectList[i]));                     }                      while (this.Checked(raw.sqlite3_step(selectOp)) == SQLite3.Result.Row)                      {                         var ce = new CacheElement() {                             Key = raw.sqlite3_column_text(selectOp' 0)'                              TypeName = raw.sqlite3_column_text(selectOp' 1)'                              Value = raw.sqlite3_column_blob(selectOp' 2)'                             Expiration = new DateTime(raw.sqlite3_column_int64(selectOp' 3))'                             CreatedAt = new DateTime(raw.sqlite3_column_int64(selectOp' 4))'                         };                          if (now.UtcTicks <= ce.Expiration.Ticks) result.Add(ce);                     }                 }                  finally                  {                     this.Checked(raw.sqlite3_reset(selectOp));                 }                  return result;             });
Magic Number,Akavache.Sqlite3,BulkSelectSqliteOperation,C:\repos\akavache_Akavache\src\Akavache.Sqlite3\Operations.cs,PrepareToExecute,The following statement contains a magic number: return (() =>              {                 var result = new List<CacheElement>();                 try                  {                     for (int i = 0; i < selectList.Count; i++)                      {                         this.Checked(raw.sqlite3_bind_text(selectOp' i+1' selectList[i]));                     }                      while (this.Checked(raw.sqlite3_step(selectOp)) == SQLite3.Result.Row)                      {                         var ce = new CacheElement() {                             Key = raw.sqlite3_column_text(selectOp' 0)'                              TypeName = raw.sqlite3_column_text(selectOp' 1)'                              Value = raw.sqlite3_column_blob(selectOp' 2)'                             Expiration = new DateTime(raw.sqlite3_column_int64(selectOp' 3))'                             CreatedAt = new DateTime(raw.sqlite3_column_int64(selectOp' 4))'                         };                          if (now.UtcTicks <= ce.Expiration.Ticks) result.Add(ce);                     }                 }                  finally                  {                     this.Checked(raw.sqlite3_reset(selectOp));                 }                  return result;             });
Magic Number,Akavache.Sqlite3,SQLitePersistentBlobCache,C:\repos\akavache_Akavache\src\Akavache.Sqlite3\SqlitePersistentBlobCacheNext.cs,Initialize,The following statement contains a magic number: var ret = Observable.Create<Unit>(async subj =>             {                 // NB: This is in its own try block because depending on the                  // platform' we may not have a modern SQLite3' where these                 // PRAGMAs are supported. These aren't critical' so let them                 // fail silently                 try                  {                     // NB: Setting journal_mode returns a row' nfi                     Connection.ExecuteScalar<int>("PRAGMA journal_mode=WAL");                     Connection.Execute("PRAGMA temp_store=MEMORY");                     Connection.Execute("PRAGMA synchronous=OFF");                 }                 catch (SQLiteException)                  {                 }                  try                 {                     Connection.CreateTable<CacheElement>();                      var schemaVersion = GetSchemaVersion();                      if (schemaVersion < 2)                     {                         Connection.Execute("ALTER TABLE CacheElement RENAME TO VersionOneCacheElement;");                         Connection.CreateTable<CacheElement>();                          var sql = "INSERT INTO CacheElement SELECT Key'TypeName'Value'Expiration'\"{0}\" AS CreatedAt FROM VersionOneCacheElement;";                         Connection.Execute(String.Format(sql' BlobCache.TaskpoolScheduler.Now.UtcDateTime.Ticks));                         Connection.Execute("DROP TABLE VersionOneCacheElement;");                                              Connection.Insert(new SchemaInfo() { Version = 2' });                     }                      // NB: We have to do this here because you can't prepare                     // statements until you've got the backing table                     opQueue = new SqliteOperationQueue(Connection' Scheduler);                     queueThread = opQueue.Start();                      subj.OnNext(Unit.Default);                     subj.OnCompleted();                 }                 catch (Exception ex)                 {                     subj.OnError(ex);                 }             });
Magic Number,Akavache.Sqlite3,SQLitePersistentBlobCache,C:\repos\akavache_Akavache\src\Akavache.Sqlite3\SqlitePersistentBlobCacheNext.cs,Initialize,The following statement contains a magic number: var ret = Observable.Create<Unit>(async subj =>             {                 // NB: This is in its own try block because depending on the                  // platform' we may not have a modern SQLite3' where these                 // PRAGMAs are supported. These aren't critical' so let them                 // fail silently                 try                  {                     // NB: Setting journal_mode returns a row' nfi                     Connection.ExecuteScalar<int>("PRAGMA journal_mode=WAL");                     Connection.Execute("PRAGMA temp_store=MEMORY");                     Connection.Execute("PRAGMA synchronous=OFF");                 }                 catch (SQLiteException)                  {                 }                  try                 {                     Connection.CreateTable<CacheElement>();                      var schemaVersion = GetSchemaVersion();                      if (schemaVersion < 2)                     {                         Connection.Execute("ALTER TABLE CacheElement RENAME TO VersionOneCacheElement;");                         Connection.CreateTable<CacheElement>();                          var sql = "INSERT INTO CacheElement SELECT Key'TypeName'Value'Expiration'\"{0}\" AS CreatedAt FROM VersionOneCacheElement;";                         Connection.Execute(String.Format(sql' BlobCache.TaskpoolScheduler.Now.UtcDateTime.Ticks));                         Connection.Execute("DROP TABLE VersionOneCacheElement;");                                              Connection.Insert(new SchemaInfo() { Version = 2' });                     }                      // NB: We have to do this here because you can't prepare                     // statements until you've got the backing table                     opQueue = new SqliteOperationQueue(Connection' Scheduler);                     queueThread = opQueue.Start();                      subj.OnNext(Unit.Default);                     subj.OnCompleted();                 }                 catch (Exception ex)                 {                     subj.OnError(ex);                 }             });
Missing Default,Akavache.Sqlite3.Internal,SQLiteConnection,C:\repos\akavache_Akavache\src\Akavache.Sqlite3\SQLite.cs,BeginTransaction,The following switch statement is missing a default case: switch (sqlExp.Result) { 						case SQLite3.Result.IOError: 						case SQLite3.Result.Full: 						case SQLite3.Result.Busy: 						case SQLite3.Result.NoMem: 						case SQLite3.Result.Interrupt: 							RollbackTo (null' true); 							break; 						}
Missing Default,Akavache.Sqlite3.Internal,SQLiteConnection,C:\repos\akavache_Akavache\src\Akavache.Sqlite3\SQLite.cs,SaveTransactionPoint,The following switch statement is missing a default case: switch (sqlExp.Result) { 					case SQLite3.Result.IOError: 					case SQLite3.Result.Full: 					case SQLite3.Result.Busy: 					case SQLite3.Result.NoMem: 					case SQLite3.Result.Interrupt: 						RollbackTo (null' true); 						break; 					}
