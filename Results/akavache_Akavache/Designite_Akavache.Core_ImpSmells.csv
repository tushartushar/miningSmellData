Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,Akavache,AkavacheHttpMixin,C:\repos\akavache_Akavache\src\Akavache.Core\Platforms\shared\HttpMixin.cs,DownloadUrl,The method has 5 parameters. Parameters: This' url' headers' fetchAlways' absoluteExpiration
Long Parameter List,Akavache,AkavacheHttpMixin,C:\repos\akavache_Akavache\src\Akavache.Core\Platforms\shared\HttpMixin.cs,DownloadUrl,The method has 6 parameters. Parameters: This' key' url' headers' fetchAlways' absoluteExpiration
Long Parameter List,Akavache,AkavacheHttpMixin,C:\repos\akavache_Akavache\src\Akavache.Core\Platforms\shared\HttpMixin.cs,MakeWebRequest,The method has 5 parameters. Parameters: uri' headers' content' retries' timeout
Long Parameter List,Akavache,Utility,C:\repos\akavache_Akavache\src\Akavache.Core\Platforms\shared\Utility.cs,SafeOpenFileAsync,The method has 5 parameters. Parameters: path' mode' access' share' scheduler
Long Statement,Akavache,SimpleFilesystemProvider,C:\repos\akavache_Akavache\src\Akavache.Core\Platforms\shared-not-uwp\SimpleFilesystemProvider.cs,GetDefaultRoamingCacheDirectory,The length of the statement  "                Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData)' BlobCache.ApplicationName' "BlobCache");" is 123.
Long Statement,Akavache,SimpleFilesystemProvider,C:\repos\akavache_Akavache\src\Akavache.Core\Platforms\shared-not-uwp\SimpleFilesystemProvider.cs,GetDefaultSecretCacheDirectory,The length of the statement  "                Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData)' BlobCache.ApplicationName' "SecretCache");" is 125.
Long Statement,Akavache,SimpleFilesystemProvider,C:\repos\akavache_Akavache\src\Akavache.Core\Platforms\shared-not-uwp\SimpleFilesystemProvider.cs,GetDefaultLocalMachineCacheDirectory,The length of the statement  "                Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData)' BlobCache.ApplicationName' "BlobCache");" is 128.
Long Statement,Akavache,Utility,C:\repos\akavache_Akavache\src\Akavache.Core\Platforms\shared\Utility.cs,SafeOpenFileAsync,The length of the statement  "                    Observable.Start(() => new FileStream(path' mode' access' share' 4096' false)' scheduler).Cast<Stream>().Subscribe(ret);" is 120.
Magic Number,Akavache,AkavacheHttpMixin,C:\repos\akavache_Akavache\src\Akavache.Core\Platforms\shared\HttpMixin.cs,ProcessWebResponse,The following statement contains a magic number: if ((int)hwr.StatusCode >= 400)             {                 return Observable.Throw<byte[]>(new WebException(hwr.StatusDescription));             }
Magic Number,Akavache,AkavacheHttpMixin,C:\repos\akavache_Akavache\src\Akavache.Core\Platforms\shared\HttpMixin.cs,MakeWebRequest,The following statement contains a magic number: return request.Timeout(timeout ?? TimeSpan.FromSeconds(15)' BlobCache.TaskpoolScheduler).Retry(retries);
Magic Number,Akavache,MD5Managed,C:\repos\akavache_Akavache\src\Akavache.Core\Platforms\shared\MD5Managed.cs,Initialize,The following statement contains a magic number: _data = new byte[64];
Magic Number,Akavache,MD5Managed,C:\repos\akavache_Akavache\src\Akavache.Core\Platforms\shared\MD5Managed.cs,HashCore,The following statement contains a magic number: if (totalArrayLength >= 64)             {                 Array.Copy(array' startIndex' _data' _dataSize' 64 - _dataSize);                 // Process message of 64 bytes (512 bits)                 MD5Core.GetHashBlock(_data' ref _abcd' 0);                 startIndex += 64 - _dataSize;                 totalArrayLength -= 64;                 while (totalArrayLength >= 64)                 {                     Array.Copy(array' startIndex' _data' 0' 64);                     MD5Core.GetHashBlock(array' ref _abcd' startIndex);                     totalArrayLength -= 64;                     startIndex += 64;                 }                 _dataSize = totalArrayLength;                 Array.Copy(array' startIndex' _data' 0' totalArrayLength);             }             else             {                 Array.Copy(array' startIndex' _data' _dataSize' cbSize);                 _dataSize = totalArrayLength;             }
Magic Number,Akavache,MD5Managed,C:\repos\akavache_Akavache\src\Akavache.Core\Platforms\shared\MD5Managed.cs,HashCore,The following statement contains a magic number: if (totalArrayLength >= 64)             {                 Array.Copy(array' startIndex' _data' _dataSize' 64 - _dataSize);                 // Process message of 64 bytes (512 bits)                 MD5Core.GetHashBlock(_data' ref _abcd' 0);                 startIndex += 64 - _dataSize;                 totalArrayLength -= 64;                 while (totalArrayLength >= 64)                 {                     Array.Copy(array' startIndex' _data' 0' 64);                     MD5Core.GetHashBlock(array' ref _abcd' startIndex);                     totalArrayLength -= 64;                     startIndex += 64;                 }                 _dataSize = totalArrayLength;                 Array.Copy(array' startIndex' _data' 0' totalArrayLength);             }             else             {                 Array.Copy(array' startIndex' _data' _dataSize' cbSize);                 _dataSize = totalArrayLength;             }
Magic Number,Akavache,MD5Managed,C:\repos\akavache_Akavache\src\Akavache.Core\Platforms\shared\MD5Managed.cs,HashCore,The following statement contains a magic number: if (totalArrayLength >= 64)             {                 Array.Copy(array' startIndex' _data' _dataSize' 64 - _dataSize);                 // Process message of 64 bytes (512 bits)                 MD5Core.GetHashBlock(_data' ref _abcd' 0);                 startIndex += 64 - _dataSize;                 totalArrayLength -= 64;                 while (totalArrayLength >= 64)                 {                     Array.Copy(array' startIndex' _data' 0' 64);                     MD5Core.GetHashBlock(array' ref _abcd' startIndex);                     totalArrayLength -= 64;                     startIndex += 64;                 }                 _dataSize = totalArrayLength;                 Array.Copy(array' startIndex' _data' 0' totalArrayLength);             }             else             {                 Array.Copy(array' startIndex' _data' _dataSize' cbSize);                 _dataSize = totalArrayLength;             }
Magic Number,Akavache,MD5Managed,C:\repos\akavache_Akavache\src\Akavache.Core\Platforms\shared\MD5Managed.cs,HashCore,The following statement contains a magic number: if (totalArrayLength >= 64)             {                 Array.Copy(array' startIndex' _data' _dataSize' 64 - _dataSize);                 // Process message of 64 bytes (512 bits)                 MD5Core.GetHashBlock(_data' ref _abcd' 0);                 startIndex += 64 - _dataSize;                 totalArrayLength -= 64;                 while (totalArrayLength >= 64)                 {                     Array.Copy(array' startIndex' _data' 0' 64);                     MD5Core.GetHashBlock(array' ref _abcd' startIndex);                     totalArrayLength -= 64;                     startIndex += 64;                 }                 _dataSize = totalArrayLength;                 Array.Copy(array' startIndex' _data' 0' totalArrayLength);             }             else             {                 Array.Copy(array' startIndex' _data' _dataSize' cbSize);                 _dataSize = totalArrayLength;             }
Magic Number,Akavache,MD5Managed,C:\repos\akavache_Akavache\src\Akavache.Core\Platforms\shared\MD5Managed.cs,HashCore,The following statement contains a magic number: if (totalArrayLength >= 64)             {                 Array.Copy(array' startIndex' _data' _dataSize' 64 - _dataSize);                 // Process message of 64 bytes (512 bits)                 MD5Core.GetHashBlock(_data' ref _abcd' 0);                 startIndex += 64 - _dataSize;                 totalArrayLength -= 64;                 while (totalArrayLength >= 64)                 {                     Array.Copy(array' startIndex' _data' 0' 64);                     MD5Core.GetHashBlock(array' ref _abcd' startIndex);                     totalArrayLength -= 64;                     startIndex += 64;                 }                 _dataSize = totalArrayLength;                 Array.Copy(array' startIndex' _data' 0' totalArrayLength);             }             else             {                 Array.Copy(array' startIndex' _data' _dataSize' cbSize);                 _dataSize = totalArrayLength;             }
Magic Number,Akavache,MD5Managed,C:\repos\akavache_Akavache\src\Akavache.Core\Platforms\shared\MD5Managed.cs,HashCore,The following statement contains a magic number: if (totalArrayLength >= 64)             {                 Array.Copy(array' startIndex' _data' _dataSize' 64 - _dataSize);                 // Process message of 64 bytes (512 bits)                 MD5Core.GetHashBlock(_data' ref _abcd' 0);                 startIndex += 64 - _dataSize;                 totalArrayLength -= 64;                 while (totalArrayLength >= 64)                 {                     Array.Copy(array' startIndex' _data' 0' 64);                     MD5Core.GetHashBlock(array' ref _abcd' startIndex);                     totalArrayLength -= 64;                     startIndex += 64;                 }                 _dataSize = totalArrayLength;                 Array.Copy(array' startIndex' _data' 0' totalArrayLength);             }             else             {                 Array.Copy(array' startIndex' _data' _dataSize' cbSize);                 _dataSize = totalArrayLength;             }
Magic Number,Akavache,MD5Managed,C:\repos\akavache_Akavache\src\Akavache.Core\Platforms\shared\MD5Managed.cs,HashCore,The following statement contains a magic number: if (totalArrayLength >= 64)             {                 Array.Copy(array' startIndex' _data' _dataSize' 64 - _dataSize);                 // Process message of 64 bytes (512 bits)                 MD5Core.GetHashBlock(_data' ref _abcd' 0);                 startIndex += 64 - _dataSize;                 totalArrayLength -= 64;                 while (totalArrayLength >= 64)                 {                     Array.Copy(array' startIndex' _data' 0' 64);                     MD5Core.GetHashBlock(array' ref _abcd' startIndex);                     totalArrayLength -= 64;                     startIndex += 64;                 }                 _dataSize = totalArrayLength;                 Array.Copy(array' startIndex' _data' 0' totalArrayLength);             }             else             {                 Array.Copy(array' startIndex' _data' _dataSize' cbSize);                 _dataSize = totalArrayLength;             }
Magic Number,Akavache,MD5Managed,C:\repos\akavache_Akavache\src\Akavache.Core\Platforms\shared\MD5Managed.cs,HashCore,The following statement contains a magic number: if (totalArrayLength >= 64)             {                 Array.Copy(array' startIndex' _data' _dataSize' 64 - _dataSize);                 // Process message of 64 bytes (512 bits)                 MD5Core.GetHashBlock(_data' ref _abcd' 0);                 startIndex += 64 - _dataSize;                 totalArrayLength -= 64;                 while (totalArrayLength >= 64)                 {                     Array.Copy(array' startIndex' _data' 0' 64);                     MD5Core.GetHashBlock(array' ref _abcd' startIndex);                     totalArrayLength -= 64;                     startIndex += 64;                 }                 _dataSize = totalArrayLength;                 Array.Copy(array' startIndex' _data' 0' totalArrayLength);             }             else             {                 Array.Copy(array' startIndex' _data' _dataSize' cbSize);                 _dataSize = totalArrayLength;             }
Magic Number,Akavache,MD5Managed,C:\repos\akavache_Akavache\src\Akavache.Core\Platforms\shared\MD5Managed.cs,HashFinal,The following statement contains a magic number: base.HashValue = MD5Core.GetHashFinalBlock(_data' 0' _dataSize' _abcd' _totalLength * 8);
Magic Number,Akavache,Utility,C:\repos\akavache_Akavache\src\Akavache.Core\Platforms\shared\Utility.cs,SafeOpenFileAsync,The following statement contains a magic number: Observable.Start(() =>             {                 try                 {                     var createModes = new[]                     {                         FileMode.Create'                         FileMode.CreateNew'                         FileMode.OpenOrCreate'                     };                       // NB: We do this (even though it's incorrect!) because                     // throwing lots of 1st chance exceptions makes debugging                     // obnoxious' as well as a bug in VS where it detects                     // exceptions caught by Observable.Start as Unhandled.                     if (!createModes.Contains(mode) && !File.Exists(path))                     {                         ret.OnError(new FileNotFoundException());                         return;                     }                      Observable.Start(() => new FileStream(path' mode' access' share' 4096' false)' scheduler).Cast<Stream>().Subscribe(ret);                 }                 catch (Exception ex)                 {                     ret.OnError(ex);                 }             }' scheduler);
