Implementation smell,Namespace,Class,File,Method,Description
Long Method,bitcoinTradingFramework,Rendering,D:\newReposJune17\wildbunny_bitcoinTradingFramework\bitcoinTradingFramework\Rendering.cs,WindowsThread,The method has 98 lines of code.
Complex Method,bitcoinTradingFramework,Program,D:\newReposJune17\wildbunny_bitcoinTradingFramework\bitcoinTradingFramework\Program.cs,Main,Cyclomatic complexity of the method is 9
Long Parameter List,bitcoinTradingFramework,Rendering,D:\newReposJune17\wildbunny_bitcoinTradingFramework\bitcoinTradingFramework\Rendering.cs,AddDataPoint,The method has 5 parameters.
Long Parameter List,bitcoinTradingFramework,Rendering,D:\newReposJune17\wildbunny_bitcoinTradingFramework\bitcoinTradingFramework\Rendering.cs,AddMarker,The method has 4 parameters.
Long Parameter List,bitcoinTradingFramework,Rendering,D:\newReposJune17\wildbunny_bitcoinTradingFramework\bitcoinTradingFramework\Rendering.cs,GetZoomRange,The method has 4 parameters.
Long Statement,bitcoinTradingFramework.Algorithms,AlgoBase,D:\newReposJune17\wildbunny_bitcoinTradingFramework\bitcoinTradingFramework\Algorithms\AlgoBase.cs,CalculateProfit,The length of the statement  "	decimal profitPercent = totalBtcValueStart > 0 ? 100 * (totalBtcValueNow - totalBtcValueStart) / totalBtcValueStart : 0; " is 120.
Long Statement,bitcoinTradingFramework,Rendering,D:\newReposJune17\wildbunny_bitcoinTradingFramework\bitcoinTradingFramework\Rendering.cs,WindowsThread,The length of the statement  "	//m_depthChart = new Chart { Size = new Size(m_width - kBorder' m_height / kNumCharts - kBorder * 4)' Top = m_chart.Bottom }; " is 125.
Long Statement,bitcoinTradingFramework,Rendering,D:\newReposJune17\wildbunny_bitcoinTradingFramework\bitcoinTradingFramework\Rendering.cs,WindowsThread,The length of the statement  "	//m_profitChart = new Chart { Size = new Size(m_width - kBorder' m_height / kNumCharts - kBorder * 4)' Top = m_depthChart.Bottom }; " is 131.
Long Statement,bitcoinTradingFramework,Rendering,D:\newReposJune17\wildbunny_bitcoinTradingFramework\bitcoinTradingFramework\Rendering.cs,ToPixelsPos,The length of the statement  "	var p = new PointF ((float)cg.GetPositionFromAxis (kChartAreaName' AxisName.X' x)' (float)cg.GetPositionFromAxis (kChartAreaName' AxisName.Y' y)); " is 146.
Empty Catch Block,bitcoinTradingFramework,Program,D:\newReposJune17\wildbunny_bitcoinTradingFramework\bitcoinTradingFramework\Program.cs,Main,The method has an empty catch block.
Magic Number,bitcoinTradingFramework.Algorithms,AlgoBase,D:\newReposJune17\wildbunny_bitcoinTradingFramework\bitcoinTradingFramework\Algorithms\AlgoBase.cs,CancelOrder,The following statement contains a magic number: try {  	HuobiSimpleResult cancelResult = m_huobi.CancelOrder (m_market' o.id);  } catch (HuobiException e) {  	// ignore order which have been filled' or cancelled  	if (e.m_error.code != 41 && e.m_error.code != 42) {  		throw;  	} else {  		if (e.m_error.code == 41) {  			// not found' so filled  			m_renderer.AddMarker (o.type == HuobiOrderType.buy' true' o.order_price' UnixTime.ConvertToDateTime (o.order_time));  			traded = true;  		}  		m_lastOpenOrders.RemoveAll (loo => loo.id == o.id);  	}  }  
Magic Number,bitcoinTradingFramework.Algorithms,AlgoBase,D:\newReposJune17\wildbunny_bitcoinTradingFramework\bitcoinTradingFramework\Algorithms\AlgoBase.cs,CancelOrder,The following statement contains a magic number: try {  	HuobiSimpleResult cancelResult = m_huobi.CancelOrder (m_market' o.id);  } catch (HuobiException e) {  	// ignore order which have been filled' or cancelled  	if (e.m_error.code != 41 && e.m_error.code != 42) {  		throw;  	} else {  		if (e.m_error.code == 41) {  			// not found' so filled  			m_renderer.AddMarker (o.type == HuobiOrderType.buy' true' o.order_price' UnixTime.ConvertToDateTime (o.order_time));  			traded = true;  		}  		m_lastOpenOrders.RemoveAll (loo => loo.id == o.id);  	}  }  
Magic Number,bitcoinTradingFramework.Algorithms,AlgoBase,D:\newReposJune17\wildbunny_bitcoinTradingFramework\bitcoinTradingFramework\Algorithms\AlgoBase.cs,CancelOrder,The following statement contains a magic number: try {  	HuobiSimpleResult cancelResult = m_huobi.CancelOrder (m_market' o.id);  } catch (HuobiException e) {  	// ignore order which have been filled' or cancelled  	if (e.m_error.code != 41 && e.m_error.code != 42) {  		throw;  	} else {  		if (e.m_error.code == 41) {  			// not found' so filled  			m_renderer.AddMarker (o.type == HuobiOrderType.buy' true' o.order_price' UnixTime.ConvertToDateTime (o.order_time));  			traded = true;  		}  		m_lastOpenOrders.RemoveAll (loo => loo.id == o.id);  	}  }  
Magic Number,bitcoinTradingFramework.Algorithms,AlgoBase,D:\newReposJune17\wildbunny_bitcoinTradingFramework\bitcoinTradingFramework\Algorithms\AlgoBase.cs,CancelOrder,The following statement contains a magic number: if (e.m_error.code != 41 && e.m_error.code != 42) {  	throw;  } else {  	if (e.m_error.code == 41) {  		// not found' so filled  		m_renderer.AddMarker (o.type == HuobiOrderType.buy' true' o.order_price' UnixTime.ConvertToDateTime (o.order_time));  		traded = true;  	}  	m_lastOpenOrders.RemoveAll (loo => loo.id == o.id);  }  
Magic Number,bitcoinTradingFramework.Algorithms,AlgoBase,D:\newReposJune17\wildbunny_bitcoinTradingFramework\bitcoinTradingFramework\Algorithms\AlgoBase.cs,CancelOrder,The following statement contains a magic number: if (e.m_error.code != 41 && e.m_error.code != 42) {  	throw;  } else {  	if (e.m_error.code == 41) {  		// not found' so filled  		m_renderer.AddMarker (o.type == HuobiOrderType.buy' true' o.order_price' UnixTime.ConvertToDateTime (o.order_time));  		traded = true;  	}  	m_lastOpenOrders.RemoveAll (loo => loo.id == o.id);  }  
Magic Number,bitcoinTradingFramework.Algorithms,AlgoBase,D:\newReposJune17\wildbunny_bitcoinTradingFramework\bitcoinTradingFramework\Algorithms\AlgoBase.cs,CancelOrder,The following statement contains a magic number: if (e.m_error.code != 41 && e.m_error.code != 42) {  	throw;  } else {  	if (e.m_error.code == 41) {  		// not found' so filled  		m_renderer.AddMarker (o.type == HuobiOrderType.buy' true' o.order_price' UnixTime.ConvertToDateTime (o.order_time));  		traded = true;  	}  	m_lastOpenOrders.RemoveAll (loo => loo.id == o.id);  }  
Magic Number,bitcoinTradingFramework.Algorithms,AlgoBase,D:\newReposJune17\wildbunny_bitcoinTradingFramework\bitcoinTradingFramework\Algorithms\AlgoBase.cs,CancelOrder,The following statement contains a magic number: if (e.m_error.code == 41) {  	// not found' so filled  	m_renderer.AddMarker (o.type == HuobiOrderType.buy' true' o.order_price' UnixTime.ConvertToDateTime (o.order_time));  	traded = true;  }  
Magic Number,bitcoinTradingFramework,Program,D:\newReposJune17\wildbunny_bitcoinTradingFramework\bitcoinTradingFramework\Program.cs,Main,The following statement contains a magic number: while (true) {  	try {  		List<BcwTrade> newTrades = huobi.GetPublicTrades (BcwMarket.huobibtccny' lastTradeId);  		newTrades.Reverse ();  		HuobiMarketSummary depth = huobi.GetMarketSummary (HuobiMarket.btc);  		BcwTicker ticker = huobi.GetTicker (BcwMarket.huobibtccny);  		DateTime now = UnixTime.ConvertToDateTime (ticker.date) + timeOffset;  		if (newTrades.Count > 0) {  			if (timeOffset.TotalSeconds == 0) {  				DateTime firstTradeDate = UnixTime.ConvertToDateTime (newTrades [0].date);  				if (firstTradeDate < lastTime) {  					timeOffset = firstTradeDate - lastTime;  				}  			}  			foreach (BcwTrade t in newTrades) {  				if (t.trade_type == BcwOrderType.ask) {  					// this condition means that a BUY ORDER was filled  				} else {  					// this condition means that a SELL ORDER was filled  				}  				renderer.AddDataPoint (depth.GetBidPrice (0)' depth.GetAskPrice (0)' t.price' UnixTime.ConvertToDateTime (t.date));  			}  			lastTrade = newTrades.Last ();  			lastTradeId = newTrades.Last ().tid;  			now = UnixTime.ConvertToDateTime (lastTrade.date);  		} else {  			renderer.AddDataPoint (depth.GetBidPrice (0)' depth.GetAskPrice (0)' lastTrade.price' now);  		}  		//  		// update the algorithm  		//  		alogo.Update (now);  	} catch (HuobiApi.RetryCountExceededException) {  	} catch (Newtonsoft.Json.JsonReaderException e) {  		Console.WriteLine (e.ToString ());  	}  	Thread.Sleep (5000);  }  
Magic Number,bitcoinTradingFramework,Program,D:\newReposJune17\wildbunny_bitcoinTradingFramework\bitcoinTradingFramework\Program.cs,Main,The following statement contains a magic number: Thread.Sleep (5000);  
Magic Number,bitcoinTradingFramework,Rendering,D:\newReposJune17\wildbunny_bitcoinTradingFramework\bitcoinTradingFramework\Rendering.cs,AddDataPoint,The following statement contains a magic number: m_debugRenderForm.BeginInvoke ((Action)(() => {  	int i = m_bidData.Count - 1;  	var halfHour = new TimeSpan (0' 30' 0);  	while (i >= 0 && now - m_times [i] < halfHour) {  		i--;  	}  	if (i > 0) {  		m_askData.RemoveRange (0' i);  		m_bidData.RemoveRange (0' i);  		m_lastPrice.RemoveRange (0' i);  		lock (m_times) {  			m_times.RemoveRange (0' i);  		}  		foreach (var kvp in m_markers.ToList ()) {  			if (now - kvp.Key > halfHour) {  				m_markers.Remove (kvp.Key);  			}  		}  	}  	m_bidData.Add (smaF);  	m_askData.Add (smaS);  	m_lastPrice.Add (price);  	lock (m_times) {  		m_times.Add (now);  	}  	if (reformatGraph) {  		ReformatGraphInternal ();  	}  }));  
Magic Number,bitcoinTradingFramework,Rendering,D:\newReposJune17\wildbunny_bitcoinTradingFramework\bitcoinTradingFramework\Rendering.cs,AddProfitDataPoints,The following statement contains a magic number: m_debugRenderForm.BeginInvoke ((Action)(() => {  	/*if (m_profitPercentage.Count > kBufferedPoints) 				{ 					m_profitPercentage.RemoveRange(0' 1); 					m_profitTimeSeconds.RemoveRange(0' 1); 				}*/m_profitPercentage.Add (profitPercentage);  	m_profitTimeSeconds.Add (timeSeconds);  	m_profitChart.Series [kProfitSeriesName].Points.DataBindXY (m_profitTimeSeconds' m_profitPercentage);  	decimal ymin = m_profitPercentage.Min ();  	decimal ymax = m_profitPercentage.Max ();  	decimal range = ymax - ymin;  	if (range > 0) {  		m_profitArea.AxisY.Minimum = (double)(ymin - range / 2);  		m_profitArea.AxisY.Maximum = (double)(ymax + range / 2);  	}  	m_profitChart.Invalidate ();  }));  
Magic Number,bitcoinTradingFramework,Rendering,D:\newReposJune17\wildbunny_bitcoinTradingFramework\bitcoinTradingFramework\Rendering.cs,AddProfitDataPoints,The following statement contains a magic number: m_debugRenderForm.BeginInvoke ((Action)(() => {  	/*if (m_profitPercentage.Count > kBufferedPoints) 				{ 					m_profitPercentage.RemoveRange(0' 1); 					m_profitTimeSeconds.RemoveRange(0' 1); 				}*/m_profitPercentage.Add (profitPercentage);  	m_profitTimeSeconds.Add (timeSeconds);  	m_profitChart.Series [kProfitSeriesName].Points.DataBindXY (m_profitTimeSeconds' m_profitPercentage);  	decimal ymin = m_profitPercentage.Min ();  	decimal ymax = m_profitPercentage.Max ();  	decimal range = ymax - ymin;  	if (range > 0) {  		m_profitArea.AxisY.Minimum = (double)(ymin - range / 2);  		m_profitArea.AxisY.Maximum = (double)(ymax + range / 2);  	}  	m_profitChart.Invalidate ();  }));  
Magic Number,bitcoinTradingFramework,Rendering,D:\newReposJune17\wildbunny_bitcoinTradingFramework\bitcoinTradingFramework\Rendering.cs,AddProfitDataPoints,The following statement contains a magic number: if (range > 0) {  	m_profitArea.AxisY.Minimum = (double)(ymin - range / 2);  	m_profitArea.AxisY.Maximum = (double)(ymax + range / 2);  }  
Magic Number,bitcoinTradingFramework,Rendering,D:\newReposJune17\wildbunny_bitcoinTradingFramework\bitcoinTradingFramework\Rendering.cs,AddProfitDataPoints,The following statement contains a magic number: if (range > 0) {  	m_profitArea.AxisY.Minimum = (double)(ymin - range / 2);  	m_profitArea.AxisY.Maximum = (double)(ymax + range / 2);  }  
Magic Number,bitcoinTradingFramework,Rendering,D:\newReposJune17\wildbunny_bitcoinTradingFramework\bitcoinTradingFramework\Rendering.cs,AddProfitDataPoints,The following statement contains a magic number: m_profitArea.AxisY.Minimum = (double)(ymin - range / 2);  
Magic Number,bitcoinTradingFramework,Rendering,D:\newReposJune17\wildbunny_bitcoinTradingFramework\bitcoinTradingFramework\Rendering.cs,AddProfitDataPoints,The following statement contains a magic number: m_profitArea.AxisY.Maximum = (double)(ymax + range / 2);  
Magic Number,bitcoinTradingFramework,Rendering,D:\newReposJune17\wildbunny_bitcoinTradingFramework\bitcoinTradingFramework\Rendering.cs,ReformatGraphInternal,The following statement contains a magic number: if (m_askData.Count > 0) {  	m_chart.Series [kAskSeriesName].Points.DataBindXY (m_times' m_askData);  	m_chart.Series [kBidSeriesName].Points.DataBindXY (m_times' m_bidData);  	m_chart.Series [kPriceSeriesName].Points.DataBindXY (m_times' m_lastPrice);  	m_chart.Annotations.Clear ();  	decimal markerMin = decimal.MaxValue;  	decimal markerMax = 0;  	lock (m_markers) {  		foreach (var kvp in m_markers) {  			int index = FindClosestDate (kvp.Key);  			foreach (MarkerContainer c in kvp.Value) {  				if (index != -1) {  					var annotation = new ArrowAnnotation {  						ArrowSize = 3'  						ArrowStyle = ArrowStyle.Simple  					};  					annotation.AnchorDataPoint = m_chart.Series [kAskSeriesName].Points [index];  					if (c.m_actioned) {  						annotation.BackColor = c.m_up ? Color.Green : Color.Red;  					}  					annotation.ForeColor = c.m_actioned ? Color.Green : Color.Red;  					annotation.Width = 0;  					annotation.Height = c.m_up ? 5 : -5;  					annotation.SmartLabelStyle.IsOverlappedHidden = false;  					annotation.AnchorY = (double)c.m_price;  					markerMin = Math.Min (c.m_price' markerMin);  					markerMax = Math.Max (c.m_price' markerMax);  					// only keep unaction markers which are less than 10 mins old  					bool allow = (!c.m_actioned && (DateTime.UtcNow - kvp.Key) < new TimeSpan (0' 10' 0)) || c.m_actioned;  					if (allow) {  						m_chart.Annotations.Add (annotation);  					}  				}  			}  		}  	}  	decimal ymin = Math.Min (Math.Min (Math.Min (m_askData.Min ()' m_bidData.Min ())' m_lastPrice.Min ())' markerMin);  	decimal ymax = Math.Max (Math.Max (Math.Max (m_askData.Max ()' m_bidData.Max ())' m_lastPrice.Max ())' markerMax);  	decimal range = ymax - ymin;  	m_area.AxisY.Minimum = (double)(ymin - range / 2);  	m_area.AxisY.Maximum = (double)(ymax + range / 2);  	m_chart.Invalidate ();  }  
Magic Number,bitcoinTradingFramework,Rendering,D:\newReposJune17\wildbunny_bitcoinTradingFramework\bitcoinTradingFramework\Rendering.cs,ReformatGraphInternal,The following statement contains a magic number: if (m_askData.Count > 0) {  	m_chart.Series [kAskSeriesName].Points.DataBindXY (m_times' m_askData);  	m_chart.Series [kBidSeriesName].Points.DataBindXY (m_times' m_bidData);  	m_chart.Series [kPriceSeriesName].Points.DataBindXY (m_times' m_lastPrice);  	m_chart.Annotations.Clear ();  	decimal markerMin = decimal.MaxValue;  	decimal markerMax = 0;  	lock (m_markers) {  		foreach (var kvp in m_markers) {  			int index = FindClosestDate (kvp.Key);  			foreach (MarkerContainer c in kvp.Value) {  				if (index != -1) {  					var annotation = new ArrowAnnotation {  						ArrowSize = 3'  						ArrowStyle = ArrowStyle.Simple  					};  					annotation.AnchorDataPoint = m_chart.Series [kAskSeriesName].Points [index];  					if (c.m_actioned) {  						annotation.BackColor = c.m_up ? Color.Green : Color.Red;  					}  					annotation.ForeColor = c.m_actioned ? Color.Green : Color.Red;  					annotation.Width = 0;  					annotation.Height = c.m_up ? 5 : -5;  					annotation.SmartLabelStyle.IsOverlappedHidden = false;  					annotation.AnchorY = (double)c.m_price;  					markerMin = Math.Min (c.m_price' markerMin);  					markerMax = Math.Max (c.m_price' markerMax);  					// only keep unaction markers which are less than 10 mins old  					bool allow = (!c.m_actioned && (DateTime.UtcNow - kvp.Key) < new TimeSpan (0' 10' 0)) || c.m_actioned;  					if (allow) {  						m_chart.Annotations.Add (annotation);  					}  				}  			}  		}  	}  	decimal ymin = Math.Min (Math.Min (Math.Min (m_askData.Min ()' m_bidData.Min ())' m_lastPrice.Min ())' markerMin);  	decimal ymax = Math.Max (Math.Max (Math.Max (m_askData.Max ()' m_bidData.Max ())' m_lastPrice.Max ())' markerMax);  	decimal range = ymax - ymin;  	m_area.AxisY.Minimum = (double)(ymin - range / 2);  	m_area.AxisY.Maximum = (double)(ymax + range / 2);  	m_chart.Invalidate ();  }  
Magic Number,bitcoinTradingFramework,Rendering,D:\newReposJune17\wildbunny_bitcoinTradingFramework\bitcoinTradingFramework\Rendering.cs,ReformatGraphInternal,The following statement contains a magic number: if (m_askData.Count > 0) {  	m_chart.Series [kAskSeriesName].Points.DataBindXY (m_times' m_askData);  	m_chart.Series [kBidSeriesName].Points.DataBindXY (m_times' m_bidData);  	m_chart.Series [kPriceSeriesName].Points.DataBindXY (m_times' m_lastPrice);  	m_chart.Annotations.Clear ();  	decimal markerMin = decimal.MaxValue;  	decimal markerMax = 0;  	lock (m_markers) {  		foreach (var kvp in m_markers) {  			int index = FindClosestDate (kvp.Key);  			foreach (MarkerContainer c in kvp.Value) {  				if (index != -1) {  					var annotation = new ArrowAnnotation {  						ArrowSize = 3'  						ArrowStyle = ArrowStyle.Simple  					};  					annotation.AnchorDataPoint = m_chart.Series [kAskSeriesName].Points [index];  					if (c.m_actioned) {  						annotation.BackColor = c.m_up ? Color.Green : Color.Red;  					}  					annotation.ForeColor = c.m_actioned ? Color.Green : Color.Red;  					annotation.Width = 0;  					annotation.Height = c.m_up ? 5 : -5;  					annotation.SmartLabelStyle.IsOverlappedHidden = false;  					annotation.AnchorY = (double)c.m_price;  					markerMin = Math.Min (c.m_price' markerMin);  					markerMax = Math.Max (c.m_price' markerMax);  					// only keep unaction markers which are less than 10 mins old  					bool allow = (!c.m_actioned && (DateTime.UtcNow - kvp.Key) < new TimeSpan (0' 10' 0)) || c.m_actioned;  					if (allow) {  						m_chart.Annotations.Add (annotation);  					}  				}  			}  		}  	}  	decimal ymin = Math.Min (Math.Min (Math.Min (m_askData.Min ()' m_bidData.Min ())' m_lastPrice.Min ())' markerMin);  	decimal ymax = Math.Max (Math.Max (Math.Max (m_askData.Max ()' m_bidData.Max ())' m_lastPrice.Max ())' markerMax);  	decimal range = ymax - ymin;  	m_area.AxisY.Minimum = (double)(ymin - range / 2);  	m_area.AxisY.Maximum = (double)(ymax + range / 2);  	m_chart.Invalidate ();  }  
Magic Number,bitcoinTradingFramework,Rendering,D:\newReposJune17\wildbunny_bitcoinTradingFramework\bitcoinTradingFramework\Rendering.cs,ReformatGraphInternal,The following statement contains a magic number: if (m_askData.Count > 0) {  	m_chart.Series [kAskSeriesName].Points.DataBindXY (m_times' m_askData);  	m_chart.Series [kBidSeriesName].Points.DataBindXY (m_times' m_bidData);  	m_chart.Series [kPriceSeriesName].Points.DataBindXY (m_times' m_lastPrice);  	m_chart.Annotations.Clear ();  	decimal markerMin = decimal.MaxValue;  	decimal markerMax = 0;  	lock (m_markers) {  		foreach (var kvp in m_markers) {  			int index = FindClosestDate (kvp.Key);  			foreach (MarkerContainer c in kvp.Value) {  				if (index != -1) {  					var annotation = new ArrowAnnotation {  						ArrowSize = 3'  						ArrowStyle = ArrowStyle.Simple  					};  					annotation.AnchorDataPoint = m_chart.Series [kAskSeriesName].Points [index];  					if (c.m_actioned) {  						annotation.BackColor = c.m_up ? Color.Green : Color.Red;  					}  					annotation.ForeColor = c.m_actioned ? Color.Green : Color.Red;  					annotation.Width = 0;  					annotation.Height = c.m_up ? 5 : -5;  					annotation.SmartLabelStyle.IsOverlappedHidden = false;  					annotation.AnchorY = (double)c.m_price;  					markerMin = Math.Min (c.m_price' markerMin);  					markerMax = Math.Max (c.m_price' markerMax);  					// only keep unaction markers which are less than 10 mins old  					bool allow = (!c.m_actioned && (DateTime.UtcNow - kvp.Key) < new TimeSpan (0' 10' 0)) || c.m_actioned;  					if (allow) {  						m_chart.Annotations.Add (annotation);  					}  				}  			}  		}  	}  	decimal ymin = Math.Min (Math.Min (Math.Min (m_askData.Min ()' m_bidData.Min ())' m_lastPrice.Min ())' markerMin);  	decimal ymax = Math.Max (Math.Max (Math.Max (m_askData.Max ()' m_bidData.Max ())' m_lastPrice.Max ())' markerMax);  	decimal range = ymax - ymin;  	m_area.AxisY.Minimum = (double)(ymin - range / 2);  	m_area.AxisY.Maximum = (double)(ymax + range / 2);  	m_chart.Invalidate ();  }  
Magic Number,bitcoinTradingFramework,Rendering,D:\newReposJune17\wildbunny_bitcoinTradingFramework\bitcoinTradingFramework\Rendering.cs,ReformatGraphInternal,The following statement contains a magic number: if (m_askData.Count > 0) {  	m_chart.Series [kAskSeriesName].Points.DataBindXY (m_times' m_askData);  	m_chart.Series [kBidSeriesName].Points.DataBindXY (m_times' m_bidData);  	m_chart.Series [kPriceSeriesName].Points.DataBindXY (m_times' m_lastPrice);  	m_chart.Annotations.Clear ();  	decimal markerMin = decimal.MaxValue;  	decimal markerMax = 0;  	lock (m_markers) {  		foreach (var kvp in m_markers) {  			int index = FindClosestDate (kvp.Key);  			foreach (MarkerContainer c in kvp.Value) {  				if (index != -1) {  					var annotation = new ArrowAnnotation {  						ArrowSize = 3'  						ArrowStyle = ArrowStyle.Simple  					};  					annotation.AnchorDataPoint = m_chart.Series [kAskSeriesName].Points [index];  					if (c.m_actioned) {  						annotation.BackColor = c.m_up ? Color.Green : Color.Red;  					}  					annotation.ForeColor = c.m_actioned ? Color.Green : Color.Red;  					annotation.Width = 0;  					annotation.Height = c.m_up ? 5 : -5;  					annotation.SmartLabelStyle.IsOverlappedHidden = false;  					annotation.AnchorY = (double)c.m_price;  					markerMin = Math.Min (c.m_price' markerMin);  					markerMax = Math.Max (c.m_price' markerMax);  					// only keep unaction markers which are less than 10 mins old  					bool allow = (!c.m_actioned && (DateTime.UtcNow - kvp.Key) < new TimeSpan (0' 10' 0)) || c.m_actioned;  					if (allow) {  						m_chart.Annotations.Add (annotation);  					}  				}  			}  		}  	}  	decimal ymin = Math.Min (Math.Min (Math.Min (m_askData.Min ()' m_bidData.Min ())' m_lastPrice.Min ())' markerMin);  	decimal ymax = Math.Max (Math.Max (Math.Max (m_askData.Max ()' m_bidData.Max ())' m_lastPrice.Max ())' markerMax);  	decimal range = ymax - ymin;  	m_area.AxisY.Minimum = (double)(ymin - range / 2);  	m_area.AxisY.Maximum = (double)(ymax + range / 2);  	m_chart.Invalidate ();  }  
Magic Number,bitcoinTradingFramework,Rendering,D:\newReposJune17\wildbunny_bitcoinTradingFramework\bitcoinTradingFramework\Rendering.cs,ReformatGraphInternal,The following statement contains a magic number: if (m_askData.Count > 0) {  	m_chart.Series [kAskSeriesName].Points.DataBindXY (m_times' m_askData);  	m_chart.Series [kBidSeriesName].Points.DataBindXY (m_times' m_bidData);  	m_chart.Series [kPriceSeriesName].Points.DataBindXY (m_times' m_lastPrice);  	m_chart.Annotations.Clear ();  	decimal markerMin = decimal.MaxValue;  	decimal markerMax = 0;  	lock (m_markers) {  		foreach (var kvp in m_markers) {  			int index = FindClosestDate (kvp.Key);  			foreach (MarkerContainer c in kvp.Value) {  				if (index != -1) {  					var annotation = new ArrowAnnotation {  						ArrowSize = 3'  						ArrowStyle = ArrowStyle.Simple  					};  					annotation.AnchorDataPoint = m_chart.Series [kAskSeriesName].Points [index];  					if (c.m_actioned) {  						annotation.BackColor = c.m_up ? Color.Green : Color.Red;  					}  					annotation.ForeColor = c.m_actioned ? Color.Green : Color.Red;  					annotation.Width = 0;  					annotation.Height = c.m_up ? 5 : -5;  					annotation.SmartLabelStyle.IsOverlappedHidden = false;  					annotation.AnchorY = (double)c.m_price;  					markerMin = Math.Min (c.m_price' markerMin);  					markerMax = Math.Max (c.m_price' markerMax);  					// only keep unaction markers which are less than 10 mins old  					bool allow = (!c.m_actioned && (DateTime.UtcNow - kvp.Key) < new TimeSpan (0' 10' 0)) || c.m_actioned;  					if (allow) {  						m_chart.Annotations.Add (annotation);  					}  				}  			}  		}  	}  	decimal ymin = Math.Min (Math.Min (Math.Min (m_askData.Min ()' m_bidData.Min ())' m_lastPrice.Min ())' markerMin);  	decimal ymax = Math.Max (Math.Max (Math.Max (m_askData.Max ()' m_bidData.Max ())' m_lastPrice.Max ())' markerMax);  	decimal range = ymax - ymin;  	m_area.AxisY.Minimum = (double)(ymin - range / 2);  	m_area.AxisY.Maximum = (double)(ymax + range / 2);  	m_chart.Invalidate ();  }  
Magic Number,bitcoinTradingFramework,Rendering,D:\newReposJune17\wildbunny_bitcoinTradingFramework\bitcoinTradingFramework\Rendering.cs,ReformatGraphInternal,The following statement contains a magic number: lock (m_markers) {  	foreach (var kvp in m_markers) {  		int index = FindClosestDate (kvp.Key);  		foreach (MarkerContainer c in kvp.Value) {  			if (index != -1) {  				var annotation = new ArrowAnnotation {  					ArrowSize = 3'  					ArrowStyle = ArrowStyle.Simple  				};  				annotation.AnchorDataPoint = m_chart.Series [kAskSeriesName].Points [index];  				if (c.m_actioned) {  					annotation.BackColor = c.m_up ? Color.Green : Color.Red;  				}  				annotation.ForeColor = c.m_actioned ? Color.Green : Color.Red;  				annotation.Width = 0;  				annotation.Height = c.m_up ? 5 : -5;  				annotation.SmartLabelStyle.IsOverlappedHidden = false;  				annotation.AnchorY = (double)c.m_price;  				markerMin = Math.Min (c.m_price' markerMin);  				markerMax = Math.Max (c.m_price' markerMax);  				// only keep unaction markers which are less than 10 mins old  				bool allow = (!c.m_actioned && (DateTime.UtcNow - kvp.Key) < new TimeSpan (0' 10' 0)) || c.m_actioned;  				if (allow) {  					m_chart.Annotations.Add (annotation);  				}  			}  		}  	}  }  
Magic Number,bitcoinTradingFramework,Rendering,D:\newReposJune17\wildbunny_bitcoinTradingFramework\bitcoinTradingFramework\Rendering.cs,ReformatGraphInternal,The following statement contains a magic number: lock (m_markers) {  	foreach (var kvp in m_markers) {  		int index = FindClosestDate (kvp.Key);  		foreach (MarkerContainer c in kvp.Value) {  			if (index != -1) {  				var annotation = new ArrowAnnotation {  					ArrowSize = 3'  					ArrowStyle = ArrowStyle.Simple  				};  				annotation.AnchorDataPoint = m_chart.Series [kAskSeriesName].Points [index];  				if (c.m_actioned) {  					annotation.BackColor = c.m_up ? Color.Green : Color.Red;  				}  				annotation.ForeColor = c.m_actioned ? Color.Green : Color.Red;  				annotation.Width = 0;  				annotation.Height = c.m_up ? 5 : -5;  				annotation.SmartLabelStyle.IsOverlappedHidden = false;  				annotation.AnchorY = (double)c.m_price;  				markerMin = Math.Min (c.m_price' markerMin);  				markerMax = Math.Max (c.m_price' markerMax);  				// only keep unaction markers which are less than 10 mins old  				bool allow = (!c.m_actioned && (DateTime.UtcNow - kvp.Key) < new TimeSpan (0' 10' 0)) || c.m_actioned;  				if (allow) {  					m_chart.Annotations.Add (annotation);  				}  			}  		}  	}  }  
Magic Number,bitcoinTradingFramework,Rendering,D:\newReposJune17\wildbunny_bitcoinTradingFramework\bitcoinTradingFramework\Rendering.cs,ReformatGraphInternal,The following statement contains a magic number: lock (m_markers) {  	foreach (var kvp in m_markers) {  		int index = FindClosestDate (kvp.Key);  		foreach (MarkerContainer c in kvp.Value) {  			if (index != -1) {  				var annotation = new ArrowAnnotation {  					ArrowSize = 3'  					ArrowStyle = ArrowStyle.Simple  				};  				annotation.AnchorDataPoint = m_chart.Series [kAskSeriesName].Points [index];  				if (c.m_actioned) {  					annotation.BackColor = c.m_up ? Color.Green : Color.Red;  				}  				annotation.ForeColor = c.m_actioned ? Color.Green : Color.Red;  				annotation.Width = 0;  				annotation.Height = c.m_up ? 5 : -5;  				annotation.SmartLabelStyle.IsOverlappedHidden = false;  				annotation.AnchorY = (double)c.m_price;  				markerMin = Math.Min (c.m_price' markerMin);  				markerMax = Math.Max (c.m_price' markerMax);  				// only keep unaction markers which are less than 10 mins old  				bool allow = (!c.m_actioned && (DateTime.UtcNow - kvp.Key) < new TimeSpan (0' 10' 0)) || c.m_actioned;  				if (allow) {  					m_chart.Annotations.Add (annotation);  				}  			}  		}  	}  }  
Magic Number,bitcoinTradingFramework,Rendering,D:\newReposJune17\wildbunny_bitcoinTradingFramework\bitcoinTradingFramework\Rendering.cs,ReformatGraphInternal,The following statement contains a magic number: lock (m_markers) {  	foreach (var kvp in m_markers) {  		int index = FindClosestDate (kvp.Key);  		foreach (MarkerContainer c in kvp.Value) {  			if (index != -1) {  				var annotation = new ArrowAnnotation {  					ArrowSize = 3'  					ArrowStyle = ArrowStyle.Simple  				};  				annotation.AnchorDataPoint = m_chart.Series [kAskSeriesName].Points [index];  				if (c.m_actioned) {  					annotation.BackColor = c.m_up ? Color.Green : Color.Red;  				}  				annotation.ForeColor = c.m_actioned ? Color.Green : Color.Red;  				annotation.Width = 0;  				annotation.Height = c.m_up ? 5 : -5;  				annotation.SmartLabelStyle.IsOverlappedHidden = false;  				annotation.AnchorY = (double)c.m_price;  				markerMin = Math.Min (c.m_price' markerMin);  				markerMax = Math.Max (c.m_price' markerMax);  				// only keep unaction markers which are less than 10 mins old  				bool allow = (!c.m_actioned && (DateTime.UtcNow - kvp.Key) < new TimeSpan (0' 10' 0)) || c.m_actioned;  				if (allow) {  					m_chart.Annotations.Add (annotation);  				}  			}  		}  	}  }  
Magic Number,bitcoinTradingFramework,Rendering,D:\newReposJune17\wildbunny_bitcoinTradingFramework\bitcoinTradingFramework\Rendering.cs,ReformatGraphInternal,The following statement contains a magic number: foreach (var kvp in m_markers) {  	int index = FindClosestDate (kvp.Key);  	foreach (MarkerContainer c in kvp.Value) {  		if (index != -1) {  			var annotation = new ArrowAnnotation {  				ArrowSize = 3'  				ArrowStyle = ArrowStyle.Simple  			};  			annotation.AnchorDataPoint = m_chart.Series [kAskSeriesName].Points [index];  			if (c.m_actioned) {  				annotation.BackColor = c.m_up ? Color.Green : Color.Red;  			}  			annotation.ForeColor = c.m_actioned ? Color.Green : Color.Red;  			annotation.Width = 0;  			annotation.Height = c.m_up ? 5 : -5;  			annotation.SmartLabelStyle.IsOverlappedHidden = false;  			annotation.AnchorY = (double)c.m_price;  			markerMin = Math.Min (c.m_price' markerMin);  			markerMax = Math.Max (c.m_price' markerMax);  			// only keep unaction markers which are less than 10 mins old  			bool allow = (!c.m_actioned && (DateTime.UtcNow - kvp.Key) < new TimeSpan (0' 10' 0)) || c.m_actioned;  			if (allow) {  				m_chart.Annotations.Add (annotation);  			}  		}  	}  }  
Magic Number,bitcoinTradingFramework,Rendering,D:\newReposJune17\wildbunny_bitcoinTradingFramework\bitcoinTradingFramework\Rendering.cs,ReformatGraphInternal,The following statement contains a magic number: foreach (var kvp in m_markers) {  	int index = FindClosestDate (kvp.Key);  	foreach (MarkerContainer c in kvp.Value) {  		if (index != -1) {  			var annotation = new ArrowAnnotation {  				ArrowSize = 3'  				ArrowStyle = ArrowStyle.Simple  			};  			annotation.AnchorDataPoint = m_chart.Series [kAskSeriesName].Points [index];  			if (c.m_actioned) {  				annotation.BackColor = c.m_up ? Color.Green : Color.Red;  			}  			annotation.ForeColor = c.m_actioned ? Color.Green : Color.Red;  			annotation.Width = 0;  			annotation.Height = c.m_up ? 5 : -5;  			annotation.SmartLabelStyle.IsOverlappedHidden = false;  			annotation.AnchorY = (double)c.m_price;  			markerMin = Math.Min (c.m_price' markerMin);  			markerMax = Math.Max (c.m_price' markerMax);  			// only keep unaction markers which are less than 10 mins old  			bool allow = (!c.m_actioned && (DateTime.UtcNow - kvp.Key) < new TimeSpan (0' 10' 0)) || c.m_actioned;  			if (allow) {  				m_chart.Annotations.Add (annotation);  			}  		}  	}  }  
Magic Number,bitcoinTradingFramework,Rendering,D:\newReposJune17\wildbunny_bitcoinTradingFramework\bitcoinTradingFramework\Rendering.cs,ReformatGraphInternal,The following statement contains a magic number: foreach (var kvp in m_markers) {  	int index = FindClosestDate (kvp.Key);  	foreach (MarkerContainer c in kvp.Value) {  		if (index != -1) {  			var annotation = new ArrowAnnotation {  				ArrowSize = 3'  				ArrowStyle = ArrowStyle.Simple  			};  			annotation.AnchorDataPoint = m_chart.Series [kAskSeriesName].Points [index];  			if (c.m_actioned) {  				annotation.BackColor = c.m_up ? Color.Green : Color.Red;  			}  			annotation.ForeColor = c.m_actioned ? Color.Green : Color.Red;  			annotation.Width = 0;  			annotation.Height = c.m_up ? 5 : -5;  			annotation.SmartLabelStyle.IsOverlappedHidden = false;  			annotation.AnchorY = (double)c.m_price;  			markerMin = Math.Min (c.m_price' markerMin);  			markerMax = Math.Max (c.m_price' markerMax);  			// only keep unaction markers which are less than 10 mins old  			bool allow = (!c.m_actioned && (DateTime.UtcNow - kvp.Key) < new TimeSpan (0' 10' 0)) || c.m_actioned;  			if (allow) {  				m_chart.Annotations.Add (annotation);  			}  		}  	}  }  
Magic Number,bitcoinTradingFramework,Rendering,D:\newReposJune17\wildbunny_bitcoinTradingFramework\bitcoinTradingFramework\Rendering.cs,ReformatGraphInternal,The following statement contains a magic number: foreach (var kvp in m_markers) {  	int index = FindClosestDate (kvp.Key);  	foreach (MarkerContainer c in kvp.Value) {  		if (index != -1) {  			var annotation = new ArrowAnnotation {  				ArrowSize = 3'  				ArrowStyle = ArrowStyle.Simple  			};  			annotation.AnchorDataPoint = m_chart.Series [kAskSeriesName].Points [index];  			if (c.m_actioned) {  				annotation.BackColor = c.m_up ? Color.Green : Color.Red;  			}  			annotation.ForeColor = c.m_actioned ? Color.Green : Color.Red;  			annotation.Width = 0;  			annotation.Height = c.m_up ? 5 : -5;  			annotation.SmartLabelStyle.IsOverlappedHidden = false;  			annotation.AnchorY = (double)c.m_price;  			markerMin = Math.Min (c.m_price' markerMin);  			markerMax = Math.Max (c.m_price' markerMax);  			// only keep unaction markers which are less than 10 mins old  			bool allow = (!c.m_actioned && (DateTime.UtcNow - kvp.Key) < new TimeSpan (0' 10' 0)) || c.m_actioned;  			if (allow) {  				m_chart.Annotations.Add (annotation);  			}  		}  	}  }  
Magic Number,bitcoinTradingFramework,Rendering,D:\newReposJune17\wildbunny_bitcoinTradingFramework\bitcoinTradingFramework\Rendering.cs,ReformatGraphInternal,The following statement contains a magic number: foreach (MarkerContainer c in kvp.Value) {  	if (index != -1) {  		var annotation = new ArrowAnnotation {  			ArrowSize = 3'  			ArrowStyle = ArrowStyle.Simple  		};  		annotation.AnchorDataPoint = m_chart.Series [kAskSeriesName].Points [index];  		if (c.m_actioned) {  			annotation.BackColor = c.m_up ? Color.Green : Color.Red;  		}  		annotation.ForeColor = c.m_actioned ? Color.Green : Color.Red;  		annotation.Width = 0;  		annotation.Height = c.m_up ? 5 : -5;  		annotation.SmartLabelStyle.IsOverlappedHidden = false;  		annotation.AnchorY = (double)c.m_price;  		markerMin = Math.Min (c.m_price' markerMin);  		markerMax = Math.Max (c.m_price' markerMax);  		// only keep unaction markers which are less than 10 mins old  		bool allow = (!c.m_actioned && (DateTime.UtcNow - kvp.Key) < new TimeSpan (0' 10' 0)) || c.m_actioned;  		if (allow) {  			m_chart.Annotations.Add (annotation);  		}  	}  }  
Magic Number,bitcoinTradingFramework,Rendering,D:\newReposJune17\wildbunny_bitcoinTradingFramework\bitcoinTradingFramework\Rendering.cs,ReformatGraphInternal,The following statement contains a magic number: foreach (MarkerContainer c in kvp.Value) {  	if (index != -1) {  		var annotation = new ArrowAnnotation {  			ArrowSize = 3'  			ArrowStyle = ArrowStyle.Simple  		};  		annotation.AnchorDataPoint = m_chart.Series [kAskSeriesName].Points [index];  		if (c.m_actioned) {  			annotation.BackColor = c.m_up ? Color.Green : Color.Red;  		}  		annotation.ForeColor = c.m_actioned ? Color.Green : Color.Red;  		annotation.Width = 0;  		annotation.Height = c.m_up ? 5 : -5;  		annotation.SmartLabelStyle.IsOverlappedHidden = false;  		annotation.AnchorY = (double)c.m_price;  		markerMin = Math.Min (c.m_price' markerMin);  		markerMax = Math.Max (c.m_price' markerMax);  		// only keep unaction markers which are less than 10 mins old  		bool allow = (!c.m_actioned && (DateTime.UtcNow - kvp.Key) < new TimeSpan (0' 10' 0)) || c.m_actioned;  		if (allow) {  			m_chart.Annotations.Add (annotation);  		}  	}  }  
Magic Number,bitcoinTradingFramework,Rendering,D:\newReposJune17\wildbunny_bitcoinTradingFramework\bitcoinTradingFramework\Rendering.cs,ReformatGraphInternal,The following statement contains a magic number: foreach (MarkerContainer c in kvp.Value) {  	if (index != -1) {  		var annotation = new ArrowAnnotation {  			ArrowSize = 3'  			ArrowStyle = ArrowStyle.Simple  		};  		annotation.AnchorDataPoint = m_chart.Series [kAskSeriesName].Points [index];  		if (c.m_actioned) {  			annotation.BackColor = c.m_up ? Color.Green : Color.Red;  		}  		annotation.ForeColor = c.m_actioned ? Color.Green : Color.Red;  		annotation.Width = 0;  		annotation.Height = c.m_up ? 5 : -5;  		annotation.SmartLabelStyle.IsOverlappedHidden = false;  		annotation.AnchorY = (double)c.m_price;  		markerMin = Math.Min (c.m_price' markerMin);  		markerMax = Math.Max (c.m_price' markerMax);  		// only keep unaction markers which are less than 10 mins old  		bool allow = (!c.m_actioned && (DateTime.UtcNow - kvp.Key) < new TimeSpan (0' 10' 0)) || c.m_actioned;  		if (allow) {  			m_chart.Annotations.Add (annotation);  		}  	}  }  
Magic Number,bitcoinTradingFramework,Rendering,D:\newReposJune17\wildbunny_bitcoinTradingFramework\bitcoinTradingFramework\Rendering.cs,ReformatGraphInternal,The following statement contains a magic number: foreach (MarkerContainer c in kvp.Value) {  	if (index != -1) {  		var annotation = new ArrowAnnotation {  			ArrowSize = 3'  			ArrowStyle = ArrowStyle.Simple  		};  		annotation.AnchorDataPoint = m_chart.Series [kAskSeriesName].Points [index];  		if (c.m_actioned) {  			annotation.BackColor = c.m_up ? Color.Green : Color.Red;  		}  		annotation.ForeColor = c.m_actioned ? Color.Green : Color.Red;  		annotation.Width = 0;  		annotation.Height = c.m_up ? 5 : -5;  		annotation.SmartLabelStyle.IsOverlappedHidden = false;  		annotation.AnchorY = (double)c.m_price;  		markerMin = Math.Min (c.m_price' markerMin);  		markerMax = Math.Max (c.m_price' markerMax);  		// only keep unaction markers which are less than 10 mins old  		bool allow = (!c.m_actioned && (DateTime.UtcNow - kvp.Key) < new TimeSpan (0' 10' 0)) || c.m_actioned;  		if (allow) {  			m_chart.Annotations.Add (annotation);  		}  	}  }  
Magic Number,bitcoinTradingFramework,Rendering,D:\newReposJune17\wildbunny_bitcoinTradingFramework\bitcoinTradingFramework\Rendering.cs,ReformatGraphInternal,The following statement contains a magic number: if (index != -1) {  	var annotation = new ArrowAnnotation {  		ArrowSize = 3'  		ArrowStyle = ArrowStyle.Simple  	};  	annotation.AnchorDataPoint = m_chart.Series [kAskSeriesName].Points [index];  	if (c.m_actioned) {  		annotation.BackColor = c.m_up ? Color.Green : Color.Red;  	}  	annotation.ForeColor = c.m_actioned ? Color.Green : Color.Red;  	annotation.Width = 0;  	annotation.Height = c.m_up ? 5 : -5;  	annotation.SmartLabelStyle.IsOverlappedHidden = false;  	annotation.AnchorY = (double)c.m_price;  	markerMin = Math.Min (c.m_price' markerMin);  	markerMax = Math.Max (c.m_price' markerMax);  	// only keep unaction markers which are less than 10 mins old  	bool allow = (!c.m_actioned && (DateTime.UtcNow - kvp.Key) < new TimeSpan (0' 10' 0)) || c.m_actioned;  	if (allow) {  		m_chart.Annotations.Add (annotation);  	}  }  
Magic Number,bitcoinTradingFramework,Rendering,D:\newReposJune17\wildbunny_bitcoinTradingFramework\bitcoinTradingFramework\Rendering.cs,ReformatGraphInternal,The following statement contains a magic number: if (index != -1) {  	var annotation = new ArrowAnnotation {  		ArrowSize = 3'  		ArrowStyle = ArrowStyle.Simple  	};  	annotation.AnchorDataPoint = m_chart.Series [kAskSeriesName].Points [index];  	if (c.m_actioned) {  		annotation.BackColor = c.m_up ? Color.Green : Color.Red;  	}  	annotation.ForeColor = c.m_actioned ? Color.Green : Color.Red;  	annotation.Width = 0;  	annotation.Height = c.m_up ? 5 : -5;  	annotation.SmartLabelStyle.IsOverlappedHidden = false;  	annotation.AnchorY = (double)c.m_price;  	markerMin = Math.Min (c.m_price' markerMin);  	markerMax = Math.Max (c.m_price' markerMax);  	// only keep unaction markers which are less than 10 mins old  	bool allow = (!c.m_actioned && (DateTime.UtcNow - kvp.Key) < new TimeSpan (0' 10' 0)) || c.m_actioned;  	if (allow) {  		m_chart.Annotations.Add (annotation);  	}  }  
Magic Number,bitcoinTradingFramework,Rendering,D:\newReposJune17\wildbunny_bitcoinTradingFramework\bitcoinTradingFramework\Rendering.cs,ReformatGraphInternal,The following statement contains a magic number: if (index != -1) {  	var annotation = new ArrowAnnotation {  		ArrowSize = 3'  		ArrowStyle = ArrowStyle.Simple  	};  	annotation.AnchorDataPoint = m_chart.Series [kAskSeriesName].Points [index];  	if (c.m_actioned) {  		annotation.BackColor = c.m_up ? Color.Green : Color.Red;  	}  	annotation.ForeColor = c.m_actioned ? Color.Green : Color.Red;  	annotation.Width = 0;  	annotation.Height = c.m_up ? 5 : -5;  	annotation.SmartLabelStyle.IsOverlappedHidden = false;  	annotation.AnchorY = (double)c.m_price;  	markerMin = Math.Min (c.m_price' markerMin);  	markerMax = Math.Max (c.m_price' markerMax);  	// only keep unaction markers which are less than 10 mins old  	bool allow = (!c.m_actioned && (DateTime.UtcNow - kvp.Key) < new TimeSpan (0' 10' 0)) || c.m_actioned;  	if (allow) {  		m_chart.Annotations.Add (annotation);  	}  }  
Magic Number,bitcoinTradingFramework,Rendering,D:\newReposJune17\wildbunny_bitcoinTradingFramework\bitcoinTradingFramework\Rendering.cs,ReformatGraphInternal,The following statement contains a magic number: if (index != -1) {  	var annotation = new ArrowAnnotation {  		ArrowSize = 3'  		ArrowStyle = ArrowStyle.Simple  	};  	annotation.AnchorDataPoint = m_chart.Series [kAskSeriesName].Points [index];  	if (c.m_actioned) {  		annotation.BackColor = c.m_up ? Color.Green : Color.Red;  	}  	annotation.ForeColor = c.m_actioned ? Color.Green : Color.Red;  	annotation.Width = 0;  	annotation.Height = c.m_up ? 5 : -5;  	annotation.SmartLabelStyle.IsOverlappedHidden = false;  	annotation.AnchorY = (double)c.m_price;  	markerMin = Math.Min (c.m_price' markerMin);  	markerMax = Math.Max (c.m_price' markerMax);  	// only keep unaction markers which are less than 10 mins old  	bool allow = (!c.m_actioned && (DateTime.UtcNow - kvp.Key) < new TimeSpan (0' 10' 0)) || c.m_actioned;  	if (allow) {  		m_chart.Annotations.Add (annotation);  	}  }  
Magic Number,bitcoinTradingFramework,Rendering,D:\newReposJune17\wildbunny_bitcoinTradingFramework\bitcoinTradingFramework\Rendering.cs,ReformatGraphInternal,The following statement contains a magic number: annotation.Height = c.m_up ? 5 : -5;  
Magic Number,bitcoinTradingFramework,Rendering,D:\newReposJune17\wildbunny_bitcoinTradingFramework\bitcoinTradingFramework\Rendering.cs,ReformatGraphInternal,The following statement contains a magic number: annotation.Height = c.m_up ? 5 : -5;  
Magic Number,bitcoinTradingFramework,Rendering,D:\newReposJune17\wildbunny_bitcoinTradingFramework\bitcoinTradingFramework\Rendering.cs,ReformatGraphInternal,The following statement contains a magic number: m_area.AxisY.Minimum = (double)(ymin - range / 2);  
Magic Number,bitcoinTradingFramework,Rendering,D:\newReposJune17\wildbunny_bitcoinTradingFramework\bitcoinTradingFramework\Rendering.cs,ReformatGraphInternal,The following statement contains a magic number: m_area.AxisY.Maximum = (double)(ymax + range / 2);  
Magic Number,bitcoinTradingFramework,Rendering,D:\newReposJune17\wildbunny_bitcoinTradingFramework\bitcoinTradingFramework\Rendering.cs,WindowsThread,The following statement contains a magic number: m_chart = new Chart {  	Size = new Size (m_width - kBorder' m_height / kNumCharts - kBorder * 4)  };  
Magic Number,bitcoinTradingFramework,Rendering,D:\newReposJune17\wildbunny_bitcoinTradingFramework\bitcoinTradingFramework\Rendering.cs,WindowsThread,The following statement contains a magic number: m_profitChart = new Chart {  	Size = new Size (m_width - kBorder' m_height / kNumCharts - kBorder * 4)'  	Top = m_chart.Bottom  };  
Magic Number,bitcoinTradingFramework,Rendering,D:\newReposJune17\wildbunny_bitcoinTradingFramework\bitcoinTradingFramework\Rendering.cs,WindowsThread,The following statement contains a magic number: series.BorderWidth = 2;  
Magic Number,bitcoinTradingFramework,Rendering,D:\newReposJune17\wildbunny_bitcoinTradingFramework\bitcoinTradingFramework\Rendering.cs,WindowsThread,The following statement contains a magic number: series.BorderWidth = 2;  
Magic Number,bitcoinTradingFramework,Rendering,D:\newReposJune17\wildbunny_bitcoinTradingFramework\bitcoinTradingFramework\Rendering.cs,WindowsThread,The following statement contains a magic number: series.BorderWidth = 2;  
Magic Number,bitcoinTradingFramework,Rendering,D:\newReposJune17\wildbunny_bitcoinTradingFramework\bitcoinTradingFramework\Rendering.cs,OnWindowResized,The following statement contains a magic number: m_chart.Height = m_profitChart.Height = m_debugRenderForm.Height / kNumCharts - kBorder * 4;  
