Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Atom.AdditionalElements.DublinCore,DcElement,C:\repos\dblock_sncore\Atom.Net\Atom.AdditionalElements\DublinCore\DcElement.cs,Parse,Cyclomatic complexity of the method is 22
Complex Method,Atom.Core,AtomContent,C:\repos\dblock_sncore\Atom.Net\Atom.Core\AtomContent.cs,Parse,Cyclomatic complexity of the method is 28
Complex Method,Atom.Core,AtomContentConstruct,C:\repos\dblock_sncore\Atom.Net\Atom.Core\AtomContentConstruct.cs,Parse,Cyclomatic complexity of the method is 31
Complex Method,Atom.Core,AtomDateConstruct,C:\repos\dblock_sncore\Atom.Net\Atom.Core\AtomDateConstruct.cs,Parse,Cyclomatic complexity of the method is 20
Complex Method,Atom.Core,AtomDateConstruct,C:\repos\dblock_sncore\Atom.Net\Atom.Core\AtomDateConstruct.cs,computeIssuedDate,Cyclomatic complexity of the method is 8
Complex Method,Atom.Core,AtomEntry,C:\repos\dblock_sncore\Atom.Net\Atom.Core\AtomEntry.cs,ToString,Cyclomatic complexity of the method is 16
Complex Method,Atom.Core,AtomEntry,C:\repos\dblock_sncore\Atom.Net\Atom.Core\AtomEntry.cs,Parse,Cyclomatic complexity of the method is 57
Complex Method,Atom.Core,AtomEntry,C:\repos\dblock_sncore\Atom.Net\Atom.Core\AtomEntry.cs,FindAlternateUri,Cyclomatic complexity of the method is 9
Complex Method,Atom.Core,AtomFeed,C:\repos\dblock_sncore\Atom.Net\Atom.Core\AtomFeed.cs,ToString,Cyclomatic complexity of the method is 18
Complex Method,Atom.Core,AtomFeed,C:\repos\dblock_sncore\Atom.Net\Atom.Core\AtomFeed.cs,Parse,Cyclomatic complexity of the method is 45
Complex Method,Atom.Core,AtomLink,C:\repos\dblock_sncore\Atom.Net\Atom.Core\AtomLink.cs,Parse,Cyclomatic complexity of the method is 17
Complex Method,Atom.Core,AtomPersonConstruct,C:\repos\dblock_sncore\Atom.Net\Atom.Core\AtomPersonConstruct.cs,Parse,Cyclomatic complexity of the method is 17
Complex Method,Atom.Utils,Utils,C:\repos\dblock_sncore\Atom.Net\Atom.Utils\Utils.cs,ParseRelationship,Cyclomatic complexity of the method is 21
Complex Method,Atom.Utils,Utils,C:\repos\dblock_sncore\Atom.Net\Atom.Utils\Utils.cs,ParseRelationship,Cyclomatic complexity of the method is 8
Complex Method,MvpXml,XPathNavigatorReader,C:\repos\dblock_sncore\Atom.Net\mvpxml\XPathNavigatorReader.cs,Read,Cyclomatic complexity of the method is 11
Complex Method,Atom.Core.Test,AtomFeedTest,C:\repos\dblock_sncore\Atom.Net\tests\Atom.Core\AtomFeedTest.cs,TestNameIsNotEmail,Cyclomatic complexity of the method is 9
Long Parameter List,Atom.Core,AtomContentConstruct,C:\repos\dblock_sncore\Atom.Net\Atom.Core\AtomContentConstruct.cs,AtomContentConstruct,The method has 5 parameters.
Long Parameter List,Atom.Core,AtomLink,C:\repos\dblock_sncore\Atom.Net\Atom.Core\AtomLink.cs,AtomLink,The method has 5 parameters.
Long Parameter List,Atom.Core,AtomPersonConstruct,C:\repos\dblock_sncore\Atom.Net\Atom.Core\AtomPersonConstruct.cs,AtomPersonConstruct,The method has 5 parameters.
Long Statement,Atom.Core.Collections,AtomContentCollection,C:\repos\dblock_sncore\Atom.Net\Atom.Core.Collections\AtomContentCollection.cs,CheckInsertion,The length of the statement  "						throw new OnlyOneMultipartContentAllowedException ("There can't be more than one content with multipart/alternative media type."); " is 130.
Long Statement,Atom.Core,AtomContent,C:\repos\dblock_sncore\Atom.Net\Atom.Core\AtomContent.cs,WriteStartElement,The length of the statement  "	if ((this.Type == MediaType.UnknownType) || (this.Type == MediaType.ApplicationAtomXml) || (this.Type == MediaType.ApplicationXAtomXml)) " is 136.
Long Statement,Atom.Core,AtomContentConstruct,C:\repos\dblock_sncore\Atom.Net\Atom.Core\AtomContentConstruct.cs,WriteStartElement,The length of the statement  "	if ((this.Type == MediaType.UnknownType) || (this.Type == MediaType.ApplicationAtomXml) || (this.Type == MediaType.ApplicationXAtomXml)) " is 136.
Long Statement,Atom.Core,AtomFeed,C:\repos\dblock_sncore\Atom.Net\Atom.Core\AtomFeed.cs,Parse,The length of the statement  "					if ((attrIterator.Current.Value != DefaultValues.Atom03Version) && (attrIterator.Current.Value != DefaultValues.Atom10Version)) { " is 129.
Long Statement,Atom.Core,AtomLink,C:\repos\dblock_sncore\Atom.Net\Atom.Core\AtomLink.cs,ToString,The length of the statement  "	if ((this.Type == MediaType.UnknownType) || (this.Type == MediaType.ApplicationAtomXml) || (this.Type == MediaType.ApplicationXAtomXml)) " is 136.
Long Statement,Atom.Utils,Utils,C:\repos\dblock_sncore\Atom.Net\Atom.Utils\Utils.cs,IsEmail,The length of the statement  "	string regExp = @"([a-zA-Z0-9_\-\+\.]+)@((\[[0-9]{1'3}\.[0-9]{1'3}\.[0-9]{1'3}\.)|(([a-zA-Z0-9\-]+\.)+))([a-zA-Z]{2'4}|[0-9]{1'3})(\]?)$"; " is 138.
Long Statement,MvpXml,XPathNavigatorReader,C:\repos\dblock_sncore\Atom.Net\mvpxml\XPathNavigatorReader.cs,ReadAttributeValue,The length of the statement  "	if (!_attributevalueread && (_navigator.NodeType == XPathNodeType.Attribute || _navigator.NodeType == XPathNodeType.Namespace)) { " is 129.
Empty Catch Block,Atom.AdditionalElements.DublinCore,DcElement,C:\repos\dblock_sncore\Atom.Net\Atom.AdditionalElements\DublinCore\DcElement.cs,Parse,The method has an empty catch block.
Empty Catch Block,Atom.Core,AtomContent,C:\repos\dblock_sncore\Atom.Net\Atom.Core\AtomContent.cs,Parse,The method has an empty catch block.
Empty Catch Block,Atom.Core,AtomContent,C:\repos\dblock_sncore\Atom.Net\Atom.Core\AtomContent.cs,Parse,The method has an empty catch block.
Empty Catch Block,Atom.Core,AtomContentConstruct,C:\repos\dblock_sncore\Atom.Net\Atom.Core\AtomContentConstruct.cs,Parse,The method has an empty catch block.
Empty Catch Block,Atom.Core,AtomDateConstruct,C:\repos\dblock_sncore\Atom.Net\Atom.Core\AtomDateConstruct.cs,Parse,The method has an empty catch block.
Empty Catch Block,Atom.Core,AtomEntry,C:\repos\dblock_sncore\Atom.Net\Atom.Core\AtomEntry.cs,Parse,The method has an empty catch block.
Empty Catch Block,Atom.Core,AtomEntry,C:\repos\dblock_sncore\Atom.Net\Atom.Core\AtomEntry.cs,FindAlternateUri,The method has an empty catch block.
Empty Catch Block,Atom.Core,AtomFeed,C:\repos\dblock_sncore\Atom.Net\Atom.Core\AtomFeed.cs,Parse,The method has an empty catch block.
Empty Catch Block,Atom.Core,AtomFeed,C:\repos\dblock_sncore\Atom.Net\Atom.Core\AtomFeed.cs,Parse,The method has an empty catch block.
Empty Catch Block,Atom.Core,AtomFeed,C:\repos\dblock_sncore\Atom.Net\Atom.Core\AtomFeed.cs,Parse,The method has an empty catch block.
Empty Catch Block,Atom.Core,AtomFeed,C:\repos\dblock_sncore\Atom.Net\Atom.Core\AtomFeed.cs,FindAlternateUri,The method has an empty catch block.
Empty Catch Block,Atom.Core,AtomLink,C:\repos\dblock_sncore\Atom.Net\Atom.Core\AtomLink.cs,Parse,The method has an empty catch block.
Empty Catch Block,Atom.Core,AtomPersonConstruct,C:\repos\dblock_sncore\Atom.Net\Atom.Core\AtomPersonConstruct.cs,Parse,The method has an empty catch block.
Magic Number,Atom.AdditionalElements.DublinCore,DcElement,C:\repos\dblock_sncore\Atom.Net\Atom.AdditionalElements\DublinCore\DcElement.cs,Parse,The following statement contains a magic number: while (iter.MoveNext ()) {  	string name = iter.Current.Name.ToLower ();  	int idx = name.IndexOf (":");  	if (idx != -1)  		name = name.Split (new char[] {  			':'  		}' 2) [1];  	switch (name) {  	case "title":  	case "creator":  	case "subject":  	case "description":  	case "publisher":  	case "contributor":  	case "date":  	case "type":  	case "format":  	case "identifier":  	case "source":  	case "language":  	case "relation":  	case "coverage":  	case "rights":  		try {  			element.XmlLang = Utils.Utils.ParseLanguage (iter.Current.XmlLang);  		}  		catch {  		}  		element.LocalName = name;  		element.Content = iter.Current.Value;  		break;  	}  }  
Magic Number,Atom.AdditionalElements.DublinCore,DcElement,C:\repos\dblock_sncore\Atom.Net\Atom.AdditionalElements\DublinCore\DcElement.cs,Parse,The following statement contains a magic number: if (idx != -1)  	name = name.Split (new char[] {  		':'  	}' 2) [1];  
Magic Number,Atom.AdditionalElements.DublinCore,DcElement,C:\repos\dblock_sncore\Atom.Net\Atom.AdditionalElements\DublinCore\DcElement.cs,Parse,The following statement contains a magic number: name = name.Split (new char[] {  	':'  }' 2) [1];  
Magic Number,Atom.Core,AtomContent,C:\repos\dblock_sncore\Atom.Net\Atom.Core\AtomContent.cs,Parse,The following statement contains a magic number: while (iter.MoveNext ()) {  	string name = iter.Current.Name.ToLower ();  	int idx = name.IndexOf (":");  	if (idx != -1)  		name = name.Split (new char[] {  			':'  		}' 2) [1];  	switch (name) {  	case "content":  		try {  			XPathNavigatorReader navReader = new XPathNavigatorReader (nav);  			string baseUri = navReader.GetAttribute ("base"' XmlNamespaces.Xml);  			if (baseUri != null && baseUri.Length > 0)  				contentElement.XmlBase = new Uri (baseUri);  		}  		catch {  		}  		try {  			contentElement.XmlLang = Utils.Utils.ParseLanguage (iter.Current.XmlLang);  		}  		catch {  		}  		contentElement.LocalName = name;  		XPathNavigatorReader reader = new XPathNavigatorReader (iter.Current);  		reader.Read ();  		content = reader.ReadInnerXml ();  		break;  	}  }  
Magic Number,Atom.Core,AtomContent,C:\repos\dblock_sncore\Atom.Net\Atom.Core\AtomContent.cs,Parse,The following statement contains a magic number: if (idx != -1)  	name = name.Split (new char[] {  		':'  	}' 2) [1];  
Magic Number,Atom.Core,AtomContent,C:\repos\dblock_sncore\Atom.Net\Atom.Core\AtomContent.cs,Parse,The following statement contains a magic number: name = name.Split (new char[] {  	':'  }' 2) [1];  
Magic Number,Atom.Core,AtomContentConstruct,C:\repos\dblock_sncore\Atom.Net\Atom.Core\AtomContentConstruct.cs,Parse,The following statement contains a magic number: while (iter.MoveNext ()) {  	string name = iter.Current.Name.ToLower ();  	int idx = name.IndexOf (":");  	if (idx != -1)  		name = name.Split (new char[] {  			':'  		}' 2) [1];  	switch (name) {  	case "title":  	case "copyright":  	case "info":  	case "tagline":  	case "summary":  	case "content":  		try {  			contentElement.XmlLang = Utils.Utils.ParseLanguage (iter.Current.XmlLang);  		}  		catch {  		}  		contentElement.LocalName = name;  		XPathNavigatorReader reader = new XPathNavigatorReader (iter.Current);  		bool fread = reader.Read ();  		if (iter.Current.HasChildren)// dblock: bug 149  		 {  			content = reader.ReadInnerXml ();  		}  		break;  	}  }  
Magic Number,Atom.Core,AtomContentConstruct,C:\repos\dblock_sncore\Atom.Net\Atom.Core\AtomContentConstruct.cs,Parse,The following statement contains a magic number: if (idx != -1)  	name = name.Split (new char[] {  		':'  	}' 2) [1];  
Magic Number,Atom.Core,AtomContentConstruct,C:\repos\dblock_sncore\Atom.Net\Atom.Core\AtomContentConstruct.cs,Parse,The following statement contains a magic number: name = name.Split (new char[] {  	':'  }' 2) [1];  
Magic Number,Atom.Core,AtomDateConstruct,C:\repos\dblock_sncore\Atom.Net\Atom.Core\AtomDateConstruct.cs,ToString,The following statement contains a magic number: if (this.UtcOffset == DefaultValues.UtcOffset)  	utcOffset = "Z";  else {  	utcOffset = this.UtcOffset.ToString ().Substring (0' this.UtcOffset.ToString ().Length - 3);  	sign = "+";  	// check if time zone is before GMT  	if (utcOffset [0].Equals ('-'))  		sign = String.Empty;  }  
Magic Number,Atom.Core,AtomDateConstruct,C:\repos\dblock_sncore\Atom.Net\Atom.Core\AtomDateConstruct.cs,ToString,The following statement contains a magic number: utcOffset = this.UtcOffset.ToString ().Substring (0' this.UtcOffset.ToString ().Length - 3);  
Magic Number,Atom.Core,AtomDateConstruct,C:\repos\dblock_sncore\Atom.Net\Atom.Core\AtomDateConstruct.cs,Parse,The following statement contains a magic number: while (iter.MoveNext ()) {  	string name = iter.Current.Name.ToLower ();  	int idx = name.IndexOf (":");  	if (idx != -1)  		name = name.Split (new char[] {  			':'  		}' 2) [1];  	switch (name) {  	case "modified":  	case "issued":  	case "created":  	case "published":  	case "updated":  		try {  			dateElement.XmlLang = Utils.Utils.ParseLanguage (iter.Current.XmlLang);  		}  		catch {  		}  		dateElement.LocalName = name;  		temp = iter.Current.Value;  		break;  	}  }  
Magic Number,Atom.Core,AtomDateConstruct,C:\repos\dblock_sncore\Atom.Net\Atom.Core\AtomDateConstruct.cs,Parse,The following statement contains a magic number: if (idx != -1)  	name = name.Split (new char[] {  		':'  	}' 2) [1];  
Magic Number,Atom.Core,AtomDateConstruct,C:\repos\dblock_sncore\Atom.Net\Atom.Core\AtomDateConstruct.cs,Parse,The following statement contains a magic number: name = name.Split (new char[] {  	':'  }' 2) [1];  
Magic Number,Atom.Core,AtomDateConstruct,C:\repos\dblock_sncore\Atom.Net\Atom.Core\AtomDateConstruct.cs,hasSeconds,The following statement contains a magic number: if (pieces.Length > 2)  	return true;  
Magic Number,Atom.Core,AtomEntry,C:\repos\dblock_sncore\Atom.Net\Atom.Core\AtomEntry.cs,Parse,The following statement contains a magic number: while (iter.MoveNext ()) {  	string name = iter.Current.Name.ToLower ();  	int idx = name.IndexOf (":");  	if (idx != -1) {  		string prefix;  		prefix = name.Split (new char[] {  			':'  		}' 2) [0];  		if (prefix == "atom")  			name = name.Split (new char[] {  				':'  			}' 2) [1];  	}  	switch (name) {  	case "entry":  		try {  			entry.Uri = FindAlternateUri (iter.Current' ns);  			entry.XmlLang = Utils.Utils.ParseLanguage (iter.Current.XmlLang);  		}  		catch {  		}  		break;  	case "title":  		AtomContentConstruct content = AtomContentConstruct.Parse (iter.Current' ns);  		entry.Title = content;  		break;  	case "link":  		entry.Links.Add (AtomLink.Parse (iter.Current' ns));  		break;  	case "author":  		entry.Author = AtomPersonConstruct.Parse (iter.Current' ns);  		break;  	case "contributor":  		entry.Contributors.Add (AtomPersonConstruct.Parse (iter.Current' ns));  		break;  	case "id":  		entry.Id = new Uri (iter.Current.Value);  		break;  	case "modified":  	case "updated":  		entry.Modified = AtomDateConstruct.Parse (iter.Current' ns);  		break;  	case "issued":  		entry.Issued = AtomDateConstruct.Parse (iter.Current' ns);  		break;  	case "created":  	case "published":  		entry.Created = AtomDateConstruct.Parse (iter.Current' ns);  		break;  	case "summary":  		entry.Summary = AtomContentConstruct.Parse (iter.Current' ns);  		break;  	case "content":  		entry.Contents.Add (AtomContent.Parse (iter.Current' ns));  		break;  	case "dc:title":  	case "dc:creator":  	case "dc:subject":  	case "dc:description":  	case "dc:publisher":  	case "dc:contributor":  	case "dc:date":  	case "dc:type":  	case "dc:format":  	case "dc:identifier":  	case "dc:source":  	case "dc:language":  	case "dc:relation":  	case "dc:coverage":  	case "dc:rights":  		entry.AdditionalElements.Add (DcElement.Parse (iter.Current' ns));  		break;  	}  }  
Magic Number,Atom.Core,AtomEntry,C:\repos\dblock_sncore\Atom.Net\Atom.Core\AtomEntry.cs,Parse,The following statement contains a magic number: while (iter.MoveNext ()) {  	string name = iter.Current.Name.ToLower ();  	int idx = name.IndexOf (":");  	if (idx != -1) {  		string prefix;  		prefix = name.Split (new char[] {  			':'  		}' 2) [0];  		if (prefix == "atom")  			name = name.Split (new char[] {  				':'  			}' 2) [1];  	}  	switch (name) {  	case "entry":  		try {  			entry.Uri = FindAlternateUri (iter.Current' ns);  			entry.XmlLang = Utils.Utils.ParseLanguage (iter.Current.XmlLang);  		}  		catch {  		}  		break;  	case "title":  		AtomContentConstruct content = AtomContentConstruct.Parse (iter.Current' ns);  		entry.Title = content;  		break;  	case "link":  		entry.Links.Add (AtomLink.Parse (iter.Current' ns));  		break;  	case "author":  		entry.Author = AtomPersonConstruct.Parse (iter.Current' ns);  		break;  	case "contributor":  		entry.Contributors.Add (AtomPersonConstruct.Parse (iter.Current' ns));  		break;  	case "id":  		entry.Id = new Uri (iter.Current.Value);  		break;  	case "modified":  	case "updated":  		entry.Modified = AtomDateConstruct.Parse (iter.Current' ns);  		break;  	case "issued":  		entry.Issued = AtomDateConstruct.Parse (iter.Current' ns);  		break;  	case "created":  	case "published":  		entry.Created = AtomDateConstruct.Parse (iter.Current' ns);  		break;  	case "summary":  		entry.Summary = AtomContentConstruct.Parse (iter.Current' ns);  		break;  	case "content":  		entry.Contents.Add (AtomContent.Parse (iter.Current' ns));  		break;  	case "dc:title":  	case "dc:creator":  	case "dc:subject":  	case "dc:description":  	case "dc:publisher":  	case "dc:contributor":  	case "dc:date":  	case "dc:type":  	case "dc:format":  	case "dc:identifier":  	case "dc:source":  	case "dc:language":  	case "dc:relation":  	case "dc:coverage":  	case "dc:rights":  		entry.AdditionalElements.Add (DcElement.Parse (iter.Current' ns));  		break;  	}  }  
Magic Number,Atom.Core,AtomEntry,C:\repos\dblock_sncore\Atom.Net\Atom.Core\AtomEntry.cs,Parse,The following statement contains a magic number: if (idx != -1) {  	string prefix;  	prefix = name.Split (new char[] {  		':'  	}' 2) [0];  	if (prefix == "atom")  		name = name.Split (new char[] {  			':'  		}' 2) [1];  }  
Magic Number,Atom.Core,AtomEntry,C:\repos\dblock_sncore\Atom.Net\Atom.Core\AtomEntry.cs,Parse,The following statement contains a magic number: if (idx != -1) {  	string prefix;  	prefix = name.Split (new char[] {  		':'  	}' 2) [0];  	if (prefix == "atom")  		name = name.Split (new char[] {  			':'  		}' 2) [1];  }  
Magic Number,Atom.Core,AtomEntry,C:\repos\dblock_sncore\Atom.Net\Atom.Core\AtomEntry.cs,Parse,The following statement contains a magic number: prefix = name.Split (new char[] {  	':'  }' 2) [0];  
Magic Number,Atom.Core,AtomEntry,C:\repos\dblock_sncore\Atom.Net\Atom.Core\AtomEntry.cs,Parse,The following statement contains a magic number: if (prefix == "atom")  	name = name.Split (new char[] {  		':'  	}' 2) [1];  
Magic Number,Atom.Core,AtomEntry,C:\repos\dblock_sncore\Atom.Net\Atom.Core\AtomEntry.cs,Parse,The following statement contains a magic number: name = name.Split (new char[] {  	':'  }' 2) [1];  
Magic Number,Atom.Core,AtomFeed,C:\repos\dblock_sncore\Atom.Net\Atom.Core\AtomFeed.cs,Parse,The following statement contains a magic number: do {  	string name = iter.Current.Name.ToLower ();  	int idx = name.IndexOf (":");  	if (idx != -1)  		name = name.Split (new char[] {  			':'  		}' 2) [1];  	switch (name) {  	case "feed": {  		try {  			XPathNavigatorReader reader = new XPathNavigatorReader (nav);  			string baseUri = reader.GetAttribute ("base"' XmlNamespaces.Xml);  			if (baseUri != null && baseUri.Length > 0)  				feed.XmlBase = new Uri (baseUri);  		}  		catch {  		}  		try {  			feed.Uri = FindAlternateUri (iter.Current' ns);  		}  		catch {  		}  		try {  			feed.XmlLang = Utils.Utils.ParseLanguage (iter.Current.XmlLang);  		}  		catch {  		}  		XPathNodeIterator attrIterator = nav.Select ("@*");  		while (attrIterator.MoveNext ()) {  			if (attrIterator.Current.Name.ToLower () == "version") {  				if ((attrIterator.Current.Value != DefaultValues.Atom03Version) && (attrIterator.Current.Value != DefaultValues.Atom10Version)) {  					string msg = String.Format ("Atom {0} version is not supported!"' attrIterator.Current.Value);  					throw new InvalidOperationException (msg);  				}  			}  		}  		break;  	}  	case "title":  		AtomContentConstruct titlecontent = AtomContentConstruct.Parse (iter.Current' ns);  		feed.Title = titlecontent;  		break;  	case "subtitle":  		feed.SubTitle = new AtomContentConstruct ("subtitle"' iter.Current.Value' ns);  		break;  	case "link":  		feed.Links.Add (AtomLink.Parse (iter.Current' ns));  		break;  	case "author":  		feed.Author = AtomPersonConstruct.Parse (iter.Current' ns);  		break;  	case "contributor":  		feed.Contributors.Add (AtomPersonConstruct.Parse (iter.Current' ns));  		break;  	case "tagline":  		feed.Tagline = AtomContentConstruct.Parse (iter.Current' ns);  		break;  	case "id":  		feed.Id = new Uri (iter.Current.Value);  		break;  	case "copyright":  		feed.Copyright = AtomContentConstruct.Parse (iter.Current' ns);  		break;  	case "info":  		feed.Info = AtomContentConstruct.Parse (iter.Current' ns);  		break;  	case "modified":  		feed.Modified = AtomDateConstruct.Parse (iter.Current' ns);  		break;  	case "entry":  		feed.Entries.Add (AtomEntry.Parse (iter.Current' ns));  		break;  	}  }  while (iter.MoveNext ());  
Magic Number,Atom.Core,AtomFeed,C:\repos\dblock_sncore\Atom.Net\Atom.Core\AtomFeed.cs,Parse,The following statement contains a magic number: if (idx != -1)  	name = name.Split (new char[] {  		':'  	}' 2) [1];  
Magic Number,Atom.Core,AtomFeed,C:\repos\dblock_sncore\Atom.Net\Atom.Core\AtomFeed.cs,Parse,The following statement contains a magic number: name = name.Split (new char[] {  	':'  }' 2) [1];  
Magic Number,Atom.Core,AtomPersonConstruct,C:\repos\dblock_sncore\Atom.Net\Atom.Core\AtomPersonConstruct.cs,Parse,The following statement contains a magic number: while (iter.MoveNext ()) {  	string name = iter.Current.Name.ToLower ();  	int idx = name.IndexOf (":");  	if (idx != -1)  		name = name.Split (new char[] {  			':'  		}' 2) [1];  	switch (name) {  	case "contributor":  	case "author":  		try {  			personElement.XmlLang = Utils.Utils.ParseLanguage (iter.Current.XmlLang);  		}  		catch {  		}  		personElement.LocalName = name;  		break;  	case "name":  		personElement.Name = iter.Current.Value;  		break;  	case "url":  		personElement.Url = resolveUri (xmlBaseRootUri' iter.Current.Value);  		break;  	case "email":  		personElement.Email = iter.Current.Value;  		break;  	}  }  
Magic Number,Atom.Core,AtomPersonConstruct,C:\repos\dblock_sncore\Atom.Net\Atom.Core\AtomPersonConstruct.cs,Parse,The following statement contains a magic number: if (idx != -1)  	name = name.Split (new char[] {  		':'  	}' 2) [1];  
Magic Number,Atom.Core,AtomPersonConstruct,C:\repos\dblock_sncore\Atom.Net\Atom.Core\AtomPersonConstruct.cs,Parse,The following statement contains a magic number: name = name.Split (new char[] {  	':'  }' 2) [1];  
Magic Number,Atom.Utils,Utils,C:\repos\dblock_sncore\Atom.Net\Atom.Utils\Utils.cs,Utils,The following statement contains a magic number: using (StreamReader reader = new StreamReader (stream)) {  	string line = String.Empty;  	string type = String.Empty;  	int i = 0;  	line = reader.ReadLine ();  	while (line != null) {  		type = line.Split (new char[] {  			' '  		}' 2) [0];  		_mediaTypes.Add (i' type);  		i++;  		line = reader.ReadLine ();  	}  }  
Magic Number,Atom.Utils,Utils,C:\repos\dblock_sncore\Atom.Net\Atom.Utils\Utils.cs,Utils,The following statement contains a magic number: while (line != null) {  	type = line.Split (new char[] {  		' '  	}' 2) [0];  	_mediaTypes.Add (i' type);  	i++;  	line = reader.ReadLine ();  }  
Magic Number,Atom.Utils,Utils,C:\repos\dblock_sncore\Atom.Net\Atom.Utils\Utils.cs,Utils,The following statement contains a magic number: type = line.Split (new char[] {  	' '  }' 2) [0];  
Magic Number,Atom,AtomWriter,C:\repos\dblock_sncore\Atom.Net\AtomWriter.cs,Init,The following statement contains a magic number: this._writer.Indentation = 2;  
Missing Default,Atom.AdditionalElements.DublinCore,DcElement,C:\repos\dblock_sncore\Atom.Net\Atom.AdditionalElements\DublinCore\DcElement.cs,Parse,The following switch statement is missing a default case: switch (name) {  case "title":  case "creator":  case "subject":  case "description":  case "publisher":  case "contributor":  case "date":  case "type":  case "format":  case "identifier":  case "source":  case "language":  case "relation":  case "coverage":  case "rights":  	try {  		element.XmlLang = Utils.Utils.ParseLanguage (iter.Current.XmlLang);  	}  	catch {  	}  	element.LocalName = name;  	element.Content = iter.Current.Value;  	break;  }  
Missing Default,Atom.Core,AtomContent,C:\repos\dblock_sncore\Atom.Net\Atom.Core\AtomContent.cs,Parse,The following switch statement is missing a default case: switch (name) {  case "content":  	try {  		XPathNavigatorReader navReader = new XPathNavigatorReader (nav);  		string baseUri = navReader.GetAttribute ("base"' XmlNamespaces.Xml);  		if (baseUri != null && baseUri.Length > 0)  			contentElement.XmlBase = new Uri (baseUri);  	}  	catch {  	}  	try {  		contentElement.XmlLang = Utils.Utils.ParseLanguage (iter.Current.XmlLang);  	}  	catch {  	}  	contentElement.LocalName = name;  	XPathNavigatorReader reader = new XPathNavigatorReader (iter.Current);  	reader.Read ();  	content = reader.ReadInnerXml ();  	break;  }  
Missing Default,Atom.Core,AtomContent,C:\repos\dblock_sncore\Atom.Net\Atom.Core\AtomContent.cs,Parse,The following switch statement is missing a default case: switch (iter.Current.Value.ToLower ()) {  case "escaped":  	contentElement.Mode = Mode.Escaped;  	break;  case "base64":  	contentElement.Mode = Mode.Base64;  	break;  }  
Missing Default,Atom.Core,AtomContent,C:\repos\dblock_sncore\Atom.Net\Atom.Core\AtomContent.cs,Parse,The following switch statement is missing a default case: switch (contentElement.Mode) {  case Mode.Escaped:  	content = Utils.Utils.Unescape (content);  	break;  case Mode.Base64:  	content = Encoding.Unicode.GetString (Utils.Utils.Base64Decode (content));  	break;  }  
Missing Default,Atom.Core,AtomContentConstruct,C:\repos\dblock_sncore\Atom.Net\Atom.Core\AtomContentConstruct.cs,Parse,The following switch statement is missing a default case: switch (name) {  case "title":  case "copyright":  case "info":  case "tagline":  case "summary":  case "content":  	try {  		contentElement.XmlLang = Utils.Utils.ParseLanguage (iter.Current.XmlLang);  	}  	catch {  	}  	contentElement.LocalName = name;  	XPathNavigatorReader reader = new XPathNavigatorReader (iter.Current);  	bool fread = reader.Read ();  	if (iter.Current.HasChildren)// dblock: bug 149  	 {  		content = reader.ReadInnerXml ();  	}  	break;  }  
Missing Default,Atom.Core,AtomContentConstruct,C:\repos\dblock_sncore\Atom.Net\Atom.Core\AtomContentConstruct.cs,Parse,The following switch statement is missing a default case: switch (iter.Current.Value.ToLower ()) {  case "escaped":  	contentElement.Mode = Mode.Escaped;  	break;  case "base64":  	contentElement.Mode = Mode.Base64;  	break;  }  
Missing Default,Atom.Core,AtomContentConstruct,C:\repos\dblock_sncore\Atom.Net\Atom.Core\AtomContentConstruct.cs,Parse,The following switch statement is missing a default case: switch (contentElement.Mode) {  case Mode.Escaped:  	content = Utils.Utils.Unescape (content);  	break;  case Mode.Base64:  	content = Encoding.Unicode.GetString (Utils.Utils.Base64Decode (content));  	break;  }  
Missing Default,Atom.Core,AtomDateConstruct,C:\repos\dblock_sncore\Atom.Net\Atom.Core\AtomDateConstruct.cs,Parse,The following switch statement is missing a default case: switch (name) {  case "modified":  case "issued":  case "created":  case "published":  case "updated":  	try {  		dateElement.XmlLang = Utils.Utils.ParseLanguage (iter.Current.XmlLang);  	}  	catch {  	}  	dateElement.LocalName = name;  	temp = iter.Current.Value;  	break;  }  
Missing Default,Atom.Core,AtomDateConstruct,C:\repos\dblock_sncore\Atom.Net\Atom.Core\AtomDateConstruct.cs,Parse,The following switch statement is missing a default case: switch (dateElement.LocalName) {  case "modified":  case "created":  case "published":  case "updated":  	computeModifiedCreatedDate (ref dateElement' temp);  	break;  case "issued":  	computeIssuedDate (ref dateElement' temp);  	break;  }  
Missing Default,Atom.Core,AtomEntry,C:\repos\dblock_sncore\Atom.Net\Atom.Core\AtomEntry.cs,Parse,The following switch statement is missing a default case: switch (name) {  case "entry":  	try {  		entry.Uri = FindAlternateUri (iter.Current' ns);  		entry.XmlLang = Utils.Utils.ParseLanguage (iter.Current.XmlLang);  	}  	catch {  	}  	break;  case "title":  	AtomContentConstruct content = AtomContentConstruct.Parse (iter.Current' ns);  	entry.Title = content;  	break;  case "link":  	entry.Links.Add (AtomLink.Parse (iter.Current' ns));  	break;  case "author":  	entry.Author = AtomPersonConstruct.Parse (iter.Current' ns);  	break;  case "contributor":  	entry.Contributors.Add (AtomPersonConstruct.Parse (iter.Current' ns));  	break;  case "id":  	entry.Id = new Uri (iter.Current.Value);  	break;  case "modified":  case "updated":  	entry.Modified = AtomDateConstruct.Parse (iter.Current' ns);  	break;  case "issued":  	entry.Issued = AtomDateConstruct.Parse (iter.Current' ns);  	break;  case "created":  case "published":  	entry.Created = AtomDateConstruct.Parse (iter.Current' ns);  	break;  case "summary":  	entry.Summary = AtomContentConstruct.Parse (iter.Current' ns);  	break;  case "content":  	entry.Contents.Add (AtomContent.Parse (iter.Current' ns));  	break;  case "dc:title":  case "dc:creator":  case "dc:subject":  case "dc:description":  case "dc:publisher":  case "dc:contributor":  case "dc:date":  case "dc:type":  case "dc:format":  case "dc:identifier":  case "dc:source":  case "dc:language":  case "dc:relation":  case "dc:coverage":  case "dc:rights":  	entry.AdditionalElements.Add (DcElement.Parse (iter.Current' ns));  	break;  }  
Missing Default,Atom.Core,AtomEntry,C:\repos\dblock_sncore\Atom.Net\Atom.Core\AtomEntry.cs,FindAlternateUri,The following switch statement is missing a default case: switch (iter.Current.Name.ToLower ()) {  case "href":  	try {  		uri = resolveUri (xmlBaseRootUri' iter.Current.Value);  	}  	catch {  	}  	break;  }  
Missing Default,Atom.Core,AtomFeed,C:\repos\dblock_sncore\Atom.Net\Atom.Core\AtomFeed.cs,Parse,The following switch statement is missing a default case: switch (name) {  case "feed": {  	try {  		XPathNavigatorReader reader = new XPathNavigatorReader (nav);  		string baseUri = reader.GetAttribute ("base"' XmlNamespaces.Xml);  		if (baseUri != null && baseUri.Length > 0)  			feed.XmlBase = new Uri (baseUri);  	}  	catch {  	}  	try {  		feed.Uri = FindAlternateUri (iter.Current' ns);  	}  	catch {  	}  	try {  		feed.XmlLang = Utils.Utils.ParseLanguage (iter.Current.XmlLang);  	}  	catch {  	}  	XPathNodeIterator attrIterator = nav.Select ("@*");  	while (attrIterator.MoveNext ()) {  		if (attrIterator.Current.Name.ToLower () == "version") {  			if ((attrIterator.Current.Value != DefaultValues.Atom03Version) && (attrIterator.Current.Value != DefaultValues.Atom10Version)) {  				string msg = String.Format ("Atom {0} version is not supported!"' attrIterator.Current.Value);  				throw new InvalidOperationException (msg);  			}  		}  	}  	break;  }  case "title":  	AtomContentConstruct titlecontent = AtomContentConstruct.Parse (iter.Current' ns);  	feed.Title = titlecontent;  	break;  case "subtitle":  	feed.SubTitle = new AtomContentConstruct ("subtitle"' iter.Current.Value' ns);  	break;  case "link":  	feed.Links.Add (AtomLink.Parse (iter.Current' ns));  	break;  case "author":  	feed.Author = AtomPersonConstruct.Parse (iter.Current' ns);  	break;  case "contributor":  	feed.Contributors.Add (AtomPersonConstruct.Parse (iter.Current' ns));  	break;  case "tagline":  	feed.Tagline = AtomContentConstruct.Parse (iter.Current' ns);  	break;  case "id":  	feed.Id = new Uri (iter.Current.Value);  	break;  case "copyright":  	feed.Copyright = AtomContentConstruct.Parse (iter.Current' ns);  	break;  case "info":  	feed.Info = AtomContentConstruct.Parse (iter.Current' ns);  	break;  case "modified":  	feed.Modified = AtomDateConstruct.Parse (iter.Current' ns);  	break;  case "entry":  	feed.Entries.Add (AtomEntry.Parse (iter.Current' ns));  	break;  }  
Missing Default,Atom.Core,AtomFeed,C:\repos\dblock_sncore\Atom.Net\Atom.Core\AtomFeed.cs,FindAlternateUri,The following switch statement is missing a default case: switch (iter.Current.Name.ToLower ()) {  case "href":  	try {  		uri = resolveUri (xmlBaseRootUri' iter.Current.Value);  	}  	catch {  	}  	break;  }  
Missing Default,Atom.Core,AtomLink,C:\repos\dblock_sncore\Atom.Net\Atom.Core\AtomLink.cs,Parse,The following switch statement is missing a default case: switch (iter.Current.Name.ToLower ()) {  case "link":  	try {  		linkElement.XmlLang = Utils.Utils.ParseLanguage (iter.Current.XmlLang);  	}  	catch {  	}  	break;  }  
Missing Default,Atom.Core,AtomLink,C:\repos\dblock_sncore\Atom.Net\Atom.Core\AtomLink.cs,Parse,The following switch statement is missing a default case: switch (iter.Current.Name.ToLower ()) {  case "rel":  	linkElement.Rel = Utils.Utils.ParseRelationship (iter.Current.Value);  	break;  case "type":  	linkElement.Type = Utils.Utils.ParseMediaType (iter.Current.Value);  	break;  case "href":  	linkElement.HRef = resolveUri (xmlBaseRootUri' iter.Current.Value);  	break;  case "title":  	linkElement.Title = iter.Current.Value;  	break;  }  
Missing Default,Atom.Core,AtomPersonConstruct,C:\repos\dblock_sncore\Atom.Net\Atom.Core\AtomPersonConstruct.cs,Parse,The following switch statement is missing a default case: switch (name) {  case "contributor":  case "author":  	try {  		personElement.XmlLang = Utils.Utils.ParseLanguage (iter.Current.XmlLang);  	}  	catch {  	}  	personElement.LocalName = name;  	break;  case "name":  	personElement.Name = iter.Current.Value;  	break;  case "url":  	personElement.Url = resolveUri (xmlBaseRootUri' iter.Current.Value);  	break;  case "email":  	personElement.Email = iter.Current.Value;  	break;  }  
Missing Default,Atom.Utils,Utils,C:\repos\dblock_sncore\Atom.Net\Atom.Utils\Utils.cs,ParseRelationship,The following switch statement is missing a default case: switch (rel) {  case Relationship.Alternate:  	val = "alternate";  	break;  case Relationship.Next:  	val = "next";  	break;  case Relationship.Prev:  	val = "prev";  	break;  case Relationship.ServiceEdit:  	val = "service.edit";  	break;  case Relationship.ServiceFeed:  	val = "service.feed";  	break;  case Relationship.ServicePost:  	val = "service.post";  	break;  case Relationship.Start:  	val = "start";  	break;  }  
