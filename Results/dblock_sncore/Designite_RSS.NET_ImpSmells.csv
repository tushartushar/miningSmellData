Implementation smell,Namespace,Class,File,Method,Description
Long Method,Rss,RssReader,C:\repos\dblock_sncore\Rss.Net\RssReader.cs,Read,The method has 498 lines of code.
Long Method,Rss,RssWriter,C:\repos\dblock_sncore\Rss.Net\RssWriter.cs,writeChannel,The method has 138 lines of code.
Complex Method,Rss,RssItemCollection,C:\repos\dblock_sncore\Rss.Net\Collections\RssItemCollection.cs,CalculatePubDates,Cyclomatic complexity of the method is 10
Complex Method,Rss,RssFeed,C:\repos\dblock_sncore\Rss.Net\RssFeed.cs,read,Cyclomatic complexity of the method is 18
Complex Method,Rss,RssReader,C:\repos\dblock_sncore\Rss.Net\RssReader.cs,Read,Cyclomatic complexity of the method is 179
Complex Method,Rss,RssWriter,C:\repos\dblock_sncore\Rss.Net\RssWriter.cs,BeginDocument,Cyclomatic complexity of the method is 23
Complex Method,Rss,RssWriter,C:\repos\dblock_sncore\Rss.Net\RssWriter.cs,writeChannel,Cyclomatic complexity of the method is 56
Complex Method,Rss,RssWriter,C:\repos\dblock_sncore\Rss.Net\RssWriter.cs,writeItem,Cyclomatic complexity of the method is 34
Long Parameter List,Rss,RssPhotoAlbumCategory,C:\repos\dblock_sncore\Rss.Net\RssModules\RssPhotoAlbum.cs,RssPhotoAlbumCategory,The method has 5 parameters.
Long Parameter List,Rss,RssPhotoAlbumCategory,C:\repos\dblock_sncore\Rss.Net\RssModules\RssPhotoAlbum.cs,Add,The method has 5 parameters.
Long Parameter List,Rss,RssPhotoAlbumCategory,C:\repos\dblock_sncore\Rss.Net\RssModules\RssPhotoAlbum.cs,RssPhotoAlbumCategory,The method has 5 parameters.
Long Parameter List,Rss,RssPhotoAlbumCategory,C:\repos\dblock_sncore\Rss.Net\RssModules\RssPhotoAlbum.cs,Add,The method has 5 parameters.
Long Parameter List,Rss,RssPhotoAlbumCategory,C:\repos\dblock_sncore\Rss.Net\RssModules\RssPhotoAlbum.cs,RssPhotoAlbumCategory,The method has 5 parameters.
Long Parameter List,Rss,RssPhotoAlbumCategory,C:\repos\dblock_sncore\Rss.Net\RssModules\RssPhotoAlbum.cs,Add,The method has 5 parameters.
Long Parameter List,Rss,RssPhotoAlbumCategory,C:\repos\dblock_sncore\Rss.Net\RssModules\RssPhotoAlbum.cs,RssPhotoAlbumCategory,The method has 5 parameters.
Long Parameter List,Rss,RssPhotoAlbumCategory,C:\repos\dblock_sncore\Rss.Net\RssModules\RssPhotoAlbum.cs,Add,The method has 5 parameters.
Long Statement,Rss,RssPhotoAlbumCategory,C:\repos\dblock_sncore\Rss.Net\RssModules\RssPhotoAlbum.cs,Add,The length of the statement  "	categoryDataRange.Add (new RssModuleItem ("from"' true' RssDefault.Check (categoryDateFrom.ToUniversalTime ().ToString ("r")))); " is 128.
Long Statement,Rss,RssPhotoAlbumCategory,C:\repos\dblock_sncore\Rss.Net\RssModules\RssPhotoAlbum.cs,Add,The length of the statement  "	categoryDataRange.Add (new RssModuleItem ("to"' true' RssDefault.Check (categoryDateTo.ToUniversalTime ().ToString ("r")))); " is 124.
Long Statement,Rss,RssPhotoAlbumCategory,C:\repos\dblock_sncore\Rss.Net\RssModules\RssPhotoAlbum.cs,Add,The length of the statement  "	categoryDataRange.Add (new RssModuleItem ("from"' true' RssDefault.Check (categoryDateFrom.ToUniversalTime ().ToString ("r")))); " is 128.
Long Statement,Rss,RssPhotoAlbumCategory,C:\repos\dblock_sncore\Rss.Net\RssModules\RssPhotoAlbum.cs,Add,The length of the statement  "	categoryDataRange.Add (new RssModuleItem ("to"' true' RssDefault.Check (categoryDateTo.ToUniversalTime ().ToString ("r")))); " is 124.
Long Statement,Rss,RssWriter,C:\repos\dblock_sncore\Rss.Net\RssWriter.cs,BeginDocument,The length of the statement  "			writer.WriteDocType ("rss"' "-//Netscape Communications//DTD RSS 0.91//EN"' "http://my.netscape.com/publish/formats/rss-0.91.dtd"' null); " is 137.
Long Statement,Rss,RssWriter,C:\repos\dblock_sncore\Rss.Net\RssWriter.cs,Write,The length of the statement  "	// NOTE: Standalone items cannot adhere to modules' hence -1 is passed. This may not be the case' however' no examples have been seen where this is legal. " is 154.
Empty Catch Block,Rss,RssFeed,C:\repos\dblock_sncore\Rss.Net\RssFeed.cs,read,The method has an empty catch block.
Empty Catch Block,Rss,RssWriter,C:\repos\dblock_sncore\Rss.Net\RssWriter.cs,writeItem,The method has an empty catch block.
Magic Number,Rss,RssReader,C:\repos\dblock_sncore\Rss.Net\RssReader.cs,Read,The following statement contains a magic number: do {  	pushElement = true;  	try {  		readData = reader.Read ();  	}  	catch (System.IO.EndOfStreamException e) {  		throw new System.IO.EndOfStreamException ("Unable to read an RssElement. Reached the end of the stream."' e);  	}  	catch (System.Xml.XmlException e) {  		if (lineNumber != -1 || linePosition != -1)  			if (reader.LineNumber == lineNumber && reader.LinePosition == linePosition)  				throw exceptions.LastException;  		lineNumber = reader.LineNumber;  		linePosition = reader.LinePosition;  		exceptions.Add (e);  		// just add to list of exceptions and continue :)  	}  	if (readData) {  		string readerName = reader.Name.ToLower ();  		switch (reader.NodeType) {  		case XmlNodeType.Element: {  			if (reader.IsEmptyElement)  				break;  			elementText = new StringBuilder ();  			switch (readerName) {  			case "item":  				// is this the end of the channel element? (absence of </channel> before <item>)  				if (!wroteChannel) {  					wroteChannel = true;  					rssElement = channel;  					// return RssChannel  					readData = false;  				}  				item = new RssItem ();  				// create new RssItem  				channel.Items.Add (item);  				break;  			case "source":  				source = new RssSource ();  				if (item != null)  					item.Source = source;  				for (int i = 0; i < reader.AttributeCount; i++) {  					reader.MoveToAttribute (i);  					switch (reader.Name.ToLower ()) {  					case "url":  						try {  							source.Url = new Uri (reader.Value);  						}  						catch (Exception e) {  							exceptions.Add (e);  						}  						break;  					}  				}  				break;  			case "enclosure":  				enclosure = new RssEnclosure ();  				if (item != null)  					item.Enclosure = enclosure;  				for (int i = 0; i < reader.AttributeCount; i++) {  					reader.MoveToAttribute (i);  					switch (reader.Name.ToLower ()) {  					case "url":  						try {  							enclosure.Url = new Uri (reader.Value);  						}  						catch (Exception e) {  							exceptions.Add (e);  						}  						break;  					case "length":  						try {  							enclosure.Length = int.Parse (reader.Value);  						}  						catch (Exception e) {  							exceptions.Add (e);  						}  						break;  					case "type":  						enclosure.Type = reader.Value;  						break;  					}  				}  				break;  			case "guid":  				guid = new RssGuid ();  				if (item != null)  					item.Guid = guid;  				for (int i = 0; i < reader.AttributeCount; i++) {  					reader.MoveToAttribute (i);  					switch (reader.Name.ToLower ()) {  					case "ispermalink":  						try {  							guid.PermaLink = bool.Parse (reader.Value);  						}  						catch (Exception e) {  							exceptions.Add (e);  						}  						break;  					}  				}  				break;  			case "category":  				category = new RssCategory ();  				if ((string)xmlNodeStack.Peek () == "channel")  					channel.Categories.Add (category);  				else if (item != null)  					item.Categories.Add (category);  				for (int i = 0; i < reader.AttributeCount; i++) {  					reader.MoveToAttribute (i);  					switch (reader.Name.ToLower ()) {  					case "url":  						goto case "domain";  					case "domain":  						category.Domain = reader.Value;  						break;  					}  				}  				break;  			case "channel":  				channel = new RssChannel ();  				textInput = null;  				image = null;  				cloud = null;  				source = null;  				enclosure = null;  				category = null;  				item = null;  				break;  			case "image":  				image = new RssImage ();  				channel.Image = image;  				break;  			case "textinput":  				textInput = new RssTextInput ();  				channel.TextInput = textInput;  				break;  			case "cloud":  				pushElement = false;  				cloud = new RssCloud ();  				channel.Cloud = cloud;  				for (int i = 0; i < reader.AttributeCount; i++) {  					reader.MoveToAttribute (i);  					switch (reader.Name.ToLower ()) {  					case "domain":  						cloud.Domain = reader.Value;  						break;  					case "port":  						try {  							cloud.Port = ushort.Parse (reader.Value);  						}  						catch (Exception e) {  							exceptions.Add (e);  						}  						break;  					case "path":  						cloud.Path = reader.Value;  						break;  					case "registerprocedure":  						cloud.RegisterProcedure = reader.Value;  						break;  					case "protocol":  						switch (reader.Value.ToLower ()) {  						case "xml-rpc":  							cloud.Protocol = RssCloudProtocol.XmlRpc;  							break;  						case "soap":  							cloud.Protocol = RssCloudProtocol.Soap;  							break;  						case "http-post":  							cloud.Protocol = RssCloudProtocol.HttpPost;  							break;  						default:  							cloud.Protocol = RssCloudProtocol.Empty;  							break;  						}  						break;  					}  				}  				break;  			case "rss":  				for (int i = 0; i < reader.AttributeCount; i++) {  					reader.MoveToAttribute (i);  					if (reader.Name.ToLower () == "version")  						switch (reader.Value) {  						case "0.91":  							rssVersion = RssVersion.RSS091;  							break;  						case "0.92":  							rssVersion = RssVersion.RSS092;  							break;  						case "2.0":  							rssVersion = RssVersion.RSS20;  							break;  						default:  							rssVersion = RssVersion.NotSupported;  							break;  						}  				}  				break;  			case "rdf":  				for (int i = 0; i < reader.AttributeCount; i++) {  					reader.MoveToAttribute (i);  					if (reader.Name.ToLower () == "version")  						switch (reader.Value) {  						case "0.90":  							rssVersion = RssVersion.RSS090;  							break;  						case "1.0":  							rssVersion = RssVersion.RSS10;  							break;  						default:  							rssVersion = RssVersion.NotSupported;  							break;  						}  				}  				break;  			}  			if (pushElement)  				xmlNodeStack.Push (readerName);  			break;  		}  		case XmlNodeType.EndElement: {  			if (xmlNodeStack.Count == 1)  				break;  			string childElementName = (string)xmlNodeStack.Pop ();  			string parentElementName = (string)xmlNodeStack.Peek ();  			switch (childElementName) // current element  			{  			// item classes  			case "item":  				rssElement = item;  				readData = false;  				break;  			case "source":  				source.Name = elementText.ToString ();  				rssElement = source;  				readData = false;  				break;  			case "enclosure":  				rssElement = enclosure;  				readData = false;  				break;  			case "guid":  				guid.Name = elementText.ToString ();  				rssElement = guid;  				readData = false;  				break;  			case "category":  				// parent is either item or channel  				category.Name = elementText.ToString ();  				rssElement = category;  				readData = false;  				break;  			// channel classes  			case "channel":  				if (wroteChannel)  					wroteChannel = false;  				else {  					wroteChannel = true;  					rssElement = channel;  					readData = false;  				}  				break;  			case "textinput":  				rssElement = textInput;  				readData = false;  				break;  			case "image":  				rssElement = image;  				readData = false;  				break;  			case "cloud":  				rssElement = cloud;  				readData = false;  				break;  			}  			switch (parentElementName) // parent element  			{  			case "item":  				switch (childElementName) {  				case "title":  					item.Title = elementText.ToString ();  					break;  				case "link":  					item.Link = new Uri (elementText.ToString ());  					break;  				case "description":  					item.Description = elementText.ToString ();  					break;  				case "content:encoded":  					item.Content = elementText.ToString ();  					break;  				case "author":  				case "dc:creator":  					item.Author = elementText.ToString ();  					break;  				case "comments":  					item.Comments = elementText.ToString ();  					break;  				case "dc:date":  				case "pubdate":  					try {  						item.PubDate = DateTime.Parse (elementText.ToString ());  					}  					catch (Exception e) {  						try {  							string tmp = elementText.ToString ();  							tmp = tmp.Substring (0' tmp.Length - 5);  							tmp += "GMT";  							item.PubDate = DateTime.Parse (tmp);  						}  						catch {  							exceptions.Add (e);  						}  					}  					break;  				}  				break;  			case "channel":  				switch (childElementName) {  				case "title":  					channel.Title = elementText.ToString ();  					break;  				case "link":  					try {  						channel.Link = new Uri (elementText.ToString ());  					}  					catch (Exception e) {  						exceptions.Add (e);  					}  					break;  				case "description":  					channel.Description = elementText.ToString ();  					break;  				case "language":  					channel.Language = elementText.ToString ();  					break;  				case "copyright":  					channel.Copyright = elementText.ToString ();  					break;  				case "managingeditor":  					channel.ManagingEditor = elementText.ToString ();  					break;  				case "webmaster":  					channel.WebMaster = elementText.ToString ();  					break;  				case "rating":  					channel.Rating = elementText.ToString ();  					break;  				case "pubdate":  					try {  						channel.PubDate = DateTime.Parse (elementText.ToString ());  					}  					catch (Exception e) {  						exceptions.Add (e);  					}  					break;  				case "lastbuilddate":  					try {  						channel.LastBuildDate = DateTime.Parse (elementText.ToString ());  					}  					catch (Exception e) {  						exceptions.Add (e);  					}  					break;  				case "generator":  					channel.Generator = elementText.ToString ();  					break;  				case "docs":  					channel.Docs = elementText.ToString ();  					break;  				case "ttl":  					try {  						channel.TimeToLive = int.Parse (elementText.ToString ());  					}  					catch (Exception e) {  						exceptions.Add (e);  					}  					break;  				}  				break;  			case "image":  				switch (childElementName) {  				case "url":  					try {  						image.Url = new Uri (elementText.ToString ());  					}  					catch (Exception e) {  						exceptions.Add (e);  					}  					break;  				case "title":  					image.Title = elementText.ToString ();  					break;  				case "link":  					try {  						image.Link = new Uri (elementText.ToString ());  					}  					catch (Exception e) {  						exceptions.Add (e);  					}  					break;  				case "description":  					image.Description = elementText.ToString ();  					break;  				case "width":  					try {  						image.Width = Byte.Parse (elementText.ToString ());  					}  					catch (Exception e) {  						exceptions.Add (e);  					}  					break;  				case "height":  					try {  						image.Height = Byte.Parse (elementText.ToString ());  					}  					catch (Exception e) {  						exceptions.Add (e);  					}  					break;  				}  				break;  			case "textinput":  				switch (childElementName) {  				case "title":  					textInput.Title = elementText.ToString ();  					break;  				case "description":  					textInput.Description = elementText.ToString ();  					break;  				case "name":  					textInput.Name = elementText.ToString ();  					break;  				case "link":  					try {  						textInput.Link = new Uri (elementText.ToString ());  					}  					catch (Exception e) {  						exceptions.Add (e);  					}  					break;  				}  				break;  			case "skipdays":  				if (childElementName == "day")  					switch (elementText.ToString ().ToLower ()) {  					case "monday":  						channel.SkipDays [0] = true;  						break;  					case "tuesday":  						channel.SkipDays [1] = true;  						break;  					case "wednesday":  						channel.SkipDays [2] = true;  						break;  					case "thursday":  						channel.SkipDays [3] = true;  						break;  					case "friday":  						channel.SkipDays [4] = true;  						break;  					case "saturday":  						channel.SkipDays [5] = true;  						break;  					case "sunday":  						channel.SkipDays [6] = true;  						break;  					}  				break;  			case "skiphours":  				if (childElementName == "hour")  					channel.SkipHours [Byte.Parse (elementText.ToString ().ToLower ())] = true;  				break;  			}  			break;  		}  		case XmlNodeType.Text:  			elementText.Append (reader.Value);  			break;  		case XmlNodeType.CDATA:  			elementText.Append (reader.Value);  			break;  		}  	}  }  while (readData);  
Magic Number,Rss,RssReader,C:\repos\dblock_sncore\Rss.Net\RssReader.cs,Read,The following statement contains a magic number: do {  	pushElement = true;  	try {  		readData = reader.Read ();  	}  	catch (System.IO.EndOfStreamException e) {  		throw new System.IO.EndOfStreamException ("Unable to read an RssElement. Reached the end of the stream."' e);  	}  	catch (System.Xml.XmlException e) {  		if (lineNumber != -1 || linePosition != -1)  			if (reader.LineNumber == lineNumber && reader.LinePosition == linePosition)  				throw exceptions.LastException;  		lineNumber = reader.LineNumber;  		linePosition = reader.LinePosition;  		exceptions.Add (e);  		// just add to list of exceptions and continue :)  	}  	if (readData) {  		string readerName = reader.Name.ToLower ();  		switch (reader.NodeType) {  		case XmlNodeType.Element: {  			if (reader.IsEmptyElement)  				break;  			elementText = new StringBuilder ();  			switch (readerName) {  			case "item":  				// is this the end of the channel element? (absence of </channel> before <item>)  				if (!wroteChannel) {  					wroteChannel = true;  					rssElement = channel;  					// return RssChannel  					readData = false;  				}  				item = new RssItem ();  				// create new RssItem  				channel.Items.Add (item);  				break;  			case "source":  				source = new RssSource ();  				if (item != null)  					item.Source = source;  				for (int i = 0; i < reader.AttributeCount; i++) {  					reader.MoveToAttribute (i);  					switch (reader.Name.ToLower ()) {  					case "url":  						try {  							source.Url = new Uri (reader.Value);  						}  						catch (Exception e) {  							exceptions.Add (e);  						}  						break;  					}  				}  				break;  			case "enclosure":  				enclosure = new RssEnclosure ();  				if (item != null)  					item.Enclosure = enclosure;  				for (int i = 0; i < reader.AttributeCount; i++) {  					reader.MoveToAttribute (i);  					switch (reader.Name.ToLower ()) {  					case "url":  						try {  							enclosure.Url = new Uri (reader.Value);  						}  						catch (Exception e) {  							exceptions.Add (e);  						}  						break;  					case "length":  						try {  							enclosure.Length = int.Parse (reader.Value);  						}  						catch (Exception e) {  							exceptions.Add (e);  						}  						break;  					case "type":  						enclosure.Type = reader.Value;  						break;  					}  				}  				break;  			case "guid":  				guid = new RssGuid ();  				if (item != null)  					item.Guid = guid;  				for (int i = 0; i < reader.AttributeCount; i++) {  					reader.MoveToAttribute (i);  					switch (reader.Name.ToLower ()) {  					case "ispermalink":  						try {  							guid.PermaLink = bool.Parse (reader.Value);  						}  						catch (Exception e) {  							exceptions.Add (e);  						}  						break;  					}  				}  				break;  			case "category":  				category = new RssCategory ();  				if ((string)xmlNodeStack.Peek () == "channel")  					channel.Categories.Add (category);  				else if (item != null)  					item.Categories.Add (category);  				for (int i = 0; i < reader.AttributeCount; i++) {  					reader.MoveToAttribute (i);  					switch (reader.Name.ToLower ()) {  					case "url":  						goto case "domain";  					case "domain":  						category.Domain = reader.Value;  						break;  					}  				}  				break;  			case "channel":  				channel = new RssChannel ();  				textInput = null;  				image = null;  				cloud = null;  				source = null;  				enclosure = null;  				category = null;  				item = null;  				break;  			case "image":  				image = new RssImage ();  				channel.Image = image;  				break;  			case "textinput":  				textInput = new RssTextInput ();  				channel.TextInput = textInput;  				break;  			case "cloud":  				pushElement = false;  				cloud = new RssCloud ();  				channel.Cloud = cloud;  				for (int i = 0; i < reader.AttributeCount; i++) {  					reader.MoveToAttribute (i);  					switch (reader.Name.ToLower ()) {  					case "domain":  						cloud.Domain = reader.Value;  						break;  					case "port":  						try {  							cloud.Port = ushort.Parse (reader.Value);  						}  						catch (Exception e) {  							exceptions.Add (e);  						}  						break;  					case "path":  						cloud.Path = reader.Value;  						break;  					case "registerprocedure":  						cloud.RegisterProcedure = reader.Value;  						break;  					case "protocol":  						switch (reader.Value.ToLower ()) {  						case "xml-rpc":  							cloud.Protocol = RssCloudProtocol.XmlRpc;  							break;  						case "soap":  							cloud.Protocol = RssCloudProtocol.Soap;  							break;  						case "http-post":  							cloud.Protocol = RssCloudProtocol.HttpPost;  							break;  						default:  							cloud.Protocol = RssCloudProtocol.Empty;  							break;  						}  						break;  					}  				}  				break;  			case "rss":  				for (int i = 0; i < reader.AttributeCount; i++) {  					reader.MoveToAttribute (i);  					if (reader.Name.ToLower () == "version")  						switch (reader.Value) {  						case "0.91":  							rssVersion = RssVersion.RSS091;  							break;  						case "0.92":  							rssVersion = RssVersion.RSS092;  							break;  						case "2.0":  							rssVersion = RssVersion.RSS20;  							break;  						default:  							rssVersion = RssVersion.NotSupported;  							break;  						}  				}  				break;  			case "rdf":  				for (int i = 0; i < reader.AttributeCount; i++) {  					reader.MoveToAttribute (i);  					if (reader.Name.ToLower () == "version")  						switch (reader.Value) {  						case "0.90":  							rssVersion = RssVersion.RSS090;  							break;  						case "1.0":  							rssVersion = RssVersion.RSS10;  							break;  						default:  							rssVersion = RssVersion.NotSupported;  							break;  						}  				}  				break;  			}  			if (pushElement)  				xmlNodeStack.Push (readerName);  			break;  		}  		case XmlNodeType.EndElement: {  			if (xmlNodeStack.Count == 1)  				break;  			string childElementName = (string)xmlNodeStack.Pop ();  			string parentElementName = (string)xmlNodeStack.Peek ();  			switch (childElementName) // current element  			{  			// item classes  			case "item":  				rssElement = item;  				readData = false;  				break;  			case "source":  				source.Name = elementText.ToString ();  				rssElement = source;  				readData = false;  				break;  			case "enclosure":  				rssElement = enclosure;  				readData = false;  				break;  			case "guid":  				guid.Name = elementText.ToString ();  				rssElement = guid;  				readData = false;  				break;  			case "category":  				// parent is either item or channel  				category.Name = elementText.ToString ();  				rssElement = category;  				readData = false;  				break;  			// channel classes  			case "channel":  				if (wroteChannel)  					wroteChannel = false;  				else {  					wroteChannel = true;  					rssElement = channel;  					readData = false;  				}  				break;  			case "textinput":  				rssElement = textInput;  				readData = false;  				break;  			case "image":  				rssElement = image;  				readData = false;  				break;  			case "cloud":  				rssElement = cloud;  				readData = false;  				break;  			}  			switch (parentElementName) // parent element  			{  			case "item":  				switch (childElementName) {  				case "title":  					item.Title = elementText.ToString ();  					break;  				case "link":  					item.Link = new Uri (elementText.ToString ());  					break;  				case "description":  					item.Description = elementText.ToString ();  					break;  				case "content:encoded":  					item.Content = elementText.ToString ();  					break;  				case "author":  				case "dc:creator":  					item.Author = elementText.ToString ();  					break;  				case "comments":  					item.Comments = elementText.ToString ();  					break;  				case "dc:date":  				case "pubdate":  					try {  						item.PubDate = DateTime.Parse (elementText.ToString ());  					}  					catch (Exception e) {  						try {  							string tmp = elementText.ToString ();  							tmp = tmp.Substring (0' tmp.Length - 5);  							tmp += "GMT";  							item.PubDate = DateTime.Parse (tmp);  						}  						catch {  							exceptions.Add (e);  						}  					}  					break;  				}  				break;  			case "channel":  				switch (childElementName) {  				case "title":  					channel.Title = elementText.ToString ();  					break;  				case "link":  					try {  						channel.Link = new Uri (elementText.ToString ());  					}  					catch (Exception e) {  						exceptions.Add (e);  					}  					break;  				case "description":  					channel.Description = elementText.ToString ();  					break;  				case "language":  					channel.Language = elementText.ToString ();  					break;  				case "copyright":  					channel.Copyright = elementText.ToString ();  					break;  				case "managingeditor":  					channel.ManagingEditor = elementText.ToString ();  					break;  				case "webmaster":  					channel.WebMaster = elementText.ToString ();  					break;  				case "rating":  					channel.Rating = elementText.ToString ();  					break;  				case "pubdate":  					try {  						channel.PubDate = DateTime.Parse (elementText.ToString ());  					}  					catch (Exception e) {  						exceptions.Add (e);  					}  					break;  				case "lastbuilddate":  					try {  						channel.LastBuildDate = DateTime.Parse (elementText.ToString ());  					}  					catch (Exception e) {  						exceptions.Add (e);  					}  					break;  				case "generator":  					channel.Generator = elementText.ToString ();  					break;  				case "docs":  					channel.Docs = elementText.ToString ();  					break;  				case "ttl":  					try {  						channel.TimeToLive = int.Parse (elementText.ToString ());  					}  					catch (Exception e) {  						exceptions.Add (e);  					}  					break;  				}  				break;  			case "image":  				switch (childElementName) {  				case "url":  					try {  						image.Url = new Uri (elementText.ToString ());  					}  					catch (Exception e) {  						exceptions.Add (e);  					}  					break;  				case "title":  					image.Title = elementText.ToString ();  					break;  				case "link":  					try {  						image.Link = new Uri (elementText.ToString ());  					}  					catch (Exception e) {  						exceptions.Add (e);  					}  					break;  				case "description":  					image.Description = elementText.ToString ();  					break;  				case "width":  					try {  						image.Width = Byte.Parse (elementText.ToString ());  					}  					catch (Exception e) {  						exceptions.Add (e);  					}  					break;  				case "height":  					try {  						image.Height = Byte.Parse (elementText.ToString ());  					}  					catch (Exception e) {  						exceptions.Add (e);  					}  					break;  				}  				break;  			case "textinput":  				switch (childElementName) {  				case "title":  					textInput.Title = elementText.ToString ();  					break;  				case "description":  					textInput.Description = elementText.ToString ();  					break;  				case "name":  					textInput.Name = elementText.ToString ();  					break;  				case "link":  					try {  						textInput.Link = new Uri (elementText.ToString ());  					}  					catch (Exception e) {  						exceptions.Add (e);  					}  					break;  				}  				break;  			case "skipdays":  				if (childElementName == "day")  					switch (elementText.ToString ().ToLower ()) {  					case "monday":  						channel.SkipDays [0] = true;  						break;  					case "tuesday":  						channel.SkipDays [1] = true;  						break;  					case "wednesday":  						channel.SkipDays [2] = true;  						break;  					case "thursday":  						channel.SkipDays [3] = true;  						break;  					case "friday":  						channel.SkipDays [4] = true;  						break;  					case "saturday":  						channel.SkipDays [5] = true;  						break;  					case "sunday":  						channel.SkipDays [6] = true;  						break;  					}  				break;  			case "skiphours":  				if (childElementName == "hour")  					channel.SkipHours [Byte.Parse (elementText.ToString ().ToLower ())] = true;  				break;  			}  			break;  		}  		case XmlNodeType.Text:  			elementText.Append (reader.Value);  			break;  		case XmlNodeType.CDATA:  			elementText.Append (reader.Value);  			break;  		}  	}  }  while (readData);  
Magic Number,Rss,RssReader,C:\repos\dblock_sncore\Rss.Net\RssReader.cs,Read,The following statement contains a magic number: do {  	pushElement = true;  	try {  		readData = reader.Read ();  	}  	catch (System.IO.EndOfStreamException e) {  		throw new System.IO.EndOfStreamException ("Unable to read an RssElement. Reached the end of the stream."' e);  	}  	catch (System.Xml.XmlException e) {  		if (lineNumber != -1 || linePosition != -1)  			if (reader.LineNumber == lineNumber && reader.LinePosition == linePosition)  				throw exceptions.LastException;  		lineNumber = reader.LineNumber;  		linePosition = reader.LinePosition;  		exceptions.Add (e);  		// just add to list of exceptions and continue :)  	}  	if (readData) {  		string readerName = reader.Name.ToLower ();  		switch (reader.NodeType) {  		case XmlNodeType.Element: {  			if (reader.IsEmptyElement)  				break;  			elementText = new StringBuilder ();  			switch (readerName) {  			case "item":  				// is this the end of the channel element? (absence of </channel> before <item>)  				if (!wroteChannel) {  					wroteChannel = true;  					rssElement = channel;  					// return RssChannel  					readData = false;  				}  				item = new RssItem ();  				// create new RssItem  				channel.Items.Add (item);  				break;  			case "source":  				source = new RssSource ();  				if (item != null)  					item.Source = source;  				for (int i = 0; i < reader.AttributeCount; i++) {  					reader.MoveToAttribute (i);  					switch (reader.Name.ToLower ()) {  					case "url":  						try {  							source.Url = new Uri (reader.Value);  						}  						catch (Exception e) {  							exceptions.Add (e);  						}  						break;  					}  				}  				break;  			case "enclosure":  				enclosure = new RssEnclosure ();  				if (item != null)  					item.Enclosure = enclosure;  				for (int i = 0; i < reader.AttributeCount; i++) {  					reader.MoveToAttribute (i);  					switch (reader.Name.ToLower ()) {  					case "url":  						try {  							enclosure.Url = new Uri (reader.Value);  						}  						catch (Exception e) {  							exceptions.Add (e);  						}  						break;  					case "length":  						try {  							enclosure.Length = int.Parse (reader.Value);  						}  						catch (Exception e) {  							exceptions.Add (e);  						}  						break;  					case "type":  						enclosure.Type = reader.Value;  						break;  					}  				}  				break;  			case "guid":  				guid = new RssGuid ();  				if (item != null)  					item.Guid = guid;  				for (int i = 0; i < reader.AttributeCount; i++) {  					reader.MoveToAttribute (i);  					switch (reader.Name.ToLower ()) {  					case "ispermalink":  						try {  							guid.PermaLink = bool.Parse (reader.Value);  						}  						catch (Exception e) {  							exceptions.Add (e);  						}  						break;  					}  				}  				break;  			case "category":  				category = new RssCategory ();  				if ((string)xmlNodeStack.Peek () == "channel")  					channel.Categories.Add (category);  				else if (item != null)  					item.Categories.Add (category);  				for (int i = 0; i < reader.AttributeCount; i++) {  					reader.MoveToAttribute (i);  					switch (reader.Name.ToLower ()) {  					case "url":  						goto case "domain";  					case "domain":  						category.Domain = reader.Value;  						break;  					}  				}  				break;  			case "channel":  				channel = new RssChannel ();  				textInput = null;  				image = null;  				cloud = null;  				source = null;  				enclosure = null;  				category = null;  				item = null;  				break;  			case "image":  				image = new RssImage ();  				channel.Image = image;  				break;  			case "textinput":  				textInput = new RssTextInput ();  				channel.TextInput = textInput;  				break;  			case "cloud":  				pushElement = false;  				cloud = new RssCloud ();  				channel.Cloud = cloud;  				for (int i = 0; i < reader.AttributeCount; i++) {  					reader.MoveToAttribute (i);  					switch (reader.Name.ToLower ()) {  					case "domain":  						cloud.Domain = reader.Value;  						break;  					case "port":  						try {  							cloud.Port = ushort.Parse (reader.Value);  						}  						catch (Exception e) {  							exceptions.Add (e);  						}  						break;  					case "path":  						cloud.Path = reader.Value;  						break;  					case "registerprocedure":  						cloud.RegisterProcedure = reader.Value;  						break;  					case "protocol":  						switch (reader.Value.ToLower ()) {  						case "xml-rpc":  							cloud.Protocol = RssCloudProtocol.XmlRpc;  							break;  						case "soap":  							cloud.Protocol = RssCloudProtocol.Soap;  							break;  						case "http-post":  							cloud.Protocol = RssCloudProtocol.HttpPost;  							break;  						default:  							cloud.Protocol = RssCloudProtocol.Empty;  							break;  						}  						break;  					}  				}  				break;  			case "rss":  				for (int i = 0; i < reader.AttributeCount; i++) {  					reader.MoveToAttribute (i);  					if (reader.Name.ToLower () == "version")  						switch (reader.Value) {  						case "0.91":  							rssVersion = RssVersion.RSS091;  							break;  						case "0.92":  							rssVersion = RssVersion.RSS092;  							break;  						case "2.0":  							rssVersion = RssVersion.RSS20;  							break;  						default:  							rssVersion = RssVersion.NotSupported;  							break;  						}  				}  				break;  			case "rdf":  				for (int i = 0; i < reader.AttributeCount; i++) {  					reader.MoveToAttribute (i);  					if (reader.Name.ToLower () == "version")  						switch (reader.Value) {  						case "0.90":  							rssVersion = RssVersion.RSS090;  							break;  						case "1.0":  							rssVersion = RssVersion.RSS10;  							break;  						default:  							rssVersion = RssVersion.NotSupported;  							break;  						}  				}  				break;  			}  			if (pushElement)  				xmlNodeStack.Push (readerName);  			break;  		}  		case XmlNodeType.EndElement: {  			if (xmlNodeStack.Count == 1)  				break;  			string childElementName = (string)xmlNodeStack.Pop ();  			string parentElementName = (string)xmlNodeStack.Peek ();  			switch (childElementName) // current element  			{  			// item classes  			case "item":  				rssElement = item;  				readData = false;  				break;  			case "source":  				source.Name = elementText.ToString ();  				rssElement = source;  				readData = false;  				break;  			case "enclosure":  				rssElement = enclosure;  				readData = false;  				break;  			case "guid":  				guid.Name = elementText.ToString ();  				rssElement = guid;  				readData = false;  				break;  			case "category":  				// parent is either item or channel  				category.Name = elementText.ToString ();  				rssElement = category;  				readData = false;  				break;  			// channel classes  			case "channel":  				if (wroteChannel)  					wroteChannel = false;  				else {  					wroteChannel = true;  					rssElement = channel;  					readData = false;  				}  				break;  			case "textinput":  				rssElement = textInput;  				readData = false;  				break;  			case "image":  				rssElement = image;  				readData = false;  				break;  			case "cloud":  				rssElement = cloud;  				readData = false;  				break;  			}  			switch (parentElementName) // parent element  			{  			case "item":  				switch (childElementName) {  				case "title":  					item.Title = elementText.ToString ();  					break;  				case "link":  					item.Link = new Uri (elementText.ToString ());  					break;  				case "description":  					item.Description = elementText.ToString ();  					break;  				case "content:encoded":  					item.Content = elementText.ToString ();  					break;  				case "author":  				case "dc:creator":  					item.Author = elementText.ToString ();  					break;  				case "comments":  					item.Comments = elementText.ToString ();  					break;  				case "dc:date":  				case "pubdate":  					try {  						item.PubDate = DateTime.Parse (elementText.ToString ());  					}  					catch (Exception e) {  						try {  							string tmp = elementText.ToString ();  							tmp = tmp.Substring (0' tmp.Length - 5);  							tmp += "GMT";  							item.PubDate = DateTime.Parse (tmp);  						}  						catch {  							exceptions.Add (e);  						}  					}  					break;  				}  				break;  			case "channel":  				switch (childElementName) {  				case "title":  					channel.Title = elementText.ToString ();  					break;  				case "link":  					try {  						channel.Link = new Uri (elementText.ToString ());  					}  					catch (Exception e) {  						exceptions.Add (e);  					}  					break;  				case "description":  					channel.Description = elementText.ToString ();  					break;  				case "language":  					channel.Language = elementText.ToString ();  					break;  				case "copyright":  					channel.Copyright = elementText.ToString ();  					break;  				case "managingeditor":  					channel.ManagingEditor = elementText.ToString ();  					break;  				case "webmaster":  					channel.WebMaster = elementText.ToString ();  					break;  				case "rating":  					channel.Rating = elementText.ToString ();  					break;  				case "pubdate":  					try {  						channel.PubDate = DateTime.Parse (elementText.ToString ());  					}  					catch (Exception e) {  						exceptions.Add (e);  					}  					break;  				case "lastbuilddate":  					try {  						channel.LastBuildDate = DateTime.Parse (elementText.ToString ());  					}  					catch (Exception e) {  						exceptions.Add (e);  					}  					break;  				case "generator":  					channel.Generator = elementText.ToString ();  					break;  				case "docs":  					channel.Docs = elementText.ToString ();  					break;  				case "ttl":  					try {  						channel.TimeToLive = int.Parse (elementText.ToString ());  					}  					catch (Exception e) {  						exceptions.Add (e);  					}  					break;  				}  				break;  			case "image":  				switch (childElementName) {  				case "url":  					try {  						image.Url = new Uri (elementText.ToString ());  					}  					catch (Exception e) {  						exceptions.Add (e);  					}  					break;  				case "title":  					image.Title = elementText.ToString ();  					break;  				case "link":  					try {  						image.Link = new Uri (elementText.ToString ());  					}  					catch (Exception e) {  						exceptions.Add (e);  					}  					break;  				case "description":  					image.Description = elementText.ToString ();  					break;  				case "width":  					try {  						image.Width = Byte.Parse (elementText.ToString ());  					}  					catch (Exception e) {  						exceptions.Add (e);  					}  					break;  				case "height":  					try {  						image.Height = Byte.Parse (elementText.ToString ());  					}  					catch (Exception e) {  						exceptions.Add (e);  					}  					break;  				}  				break;  			case "textinput":  				switch (childElementName) {  				case "title":  					textInput.Title = elementText.ToString ();  					break;  				case "description":  					textInput.Description = elementText.ToString ();  					break;  				case "name":  					textInput.Name = elementText.ToString ();  					break;  				case "link":  					try {  						textInput.Link = new Uri (elementText.ToString ());  					}  					catch (Exception e) {  						exceptions.Add (e);  					}  					break;  				}  				break;  			case "skipdays":  				if (childElementName == "day")  					switch (elementText.ToString ().ToLower ()) {  					case "monday":  						channel.SkipDays [0] = true;  						break;  					case "tuesday":  						channel.SkipDays [1] = true;  						break;  					case "wednesday":  						channel.SkipDays [2] = true;  						break;  					case "thursday":  						channel.SkipDays [3] = true;  						break;  					case "friday":  						channel.SkipDays [4] = true;  						break;  					case "saturday":  						channel.SkipDays [5] = true;  						break;  					case "sunday":  						channel.SkipDays [6] = true;  						break;  					}  				break;  			case "skiphours":  				if (childElementName == "hour")  					channel.SkipHours [Byte.Parse (elementText.ToString ().ToLower ())] = true;  				break;  			}  			break;  		}  		case XmlNodeType.Text:  			elementText.Append (reader.Value);  			break;  		case XmlNodeType.CDATA:  			elementText.Append (reader.Value);  			break;  		}  	}  }  while (readData);  
Magic Number,Rss,RssReader,C:\repos\dblock_sncore\Rss.Net\RssReader.cs,Read,The following statement contains a magic number: do {  	pushElement = true;  	try {  		readData = reader.Read ();  	}  	catch (System.IO.EndOfStreamException e) {  		throw new System.IO.EndOfStreamException ("Unable to read an RssElement. Reached the end of the stream."' e);  	}  	catch (System.Xml.XmlException e) {  		if (lineNumber != -1 || linePosition != -1)  			if (reader.LineNumber == lineNumber && reader.LinePosition == linePosition)  				throw exceptions.LastException;  		lineNumber = reader.LineNumber;  		linePosition = reader.LinePosition;  		exceptions.Add (e);  		// just add to list of exceptions and continue :)  	}  	if (readData) {  		string readerName = reader.Name.ToLower ();  		switch (reader.NodeType) {  		case XmlNodeType.Element: {  			if (reader.IsEmptyElement)  				break;  			elementText = new StringBuilder ();  			switch (readerName) {  			case "item":  				// is this the end of the channel element? (absence of </channel> before <item>)  				if (!wroteChannel) {  					wroteChannel = true;  					rssElement = channel;  					// return RssChannel  					readData = false;  				}  				item = new RssItem ();  				// create new RssItem  				channel.Items.Add (item);  				break;  			case "source":  				source = new RssSource ();  				if (item != null)  					item.Source = source;  				for (int i = 0; i < reader.AttributeCount; i++) {  					reader.MoveToAttribute (i);  					switch (reader.Name.ToLower ()) {  					case "url":  						try {  							source.Url = new Uri (reader.Value);  						}  						catch (Exception e) {  							exceptions.Add (e);  						}  						break;  					}  				}  				break;  			case "enclosure":  				enclosure = new RssEnclosure ();  				if (item != null)  					item.Enclosure = enclosure;  				for (int i = 0; i < reader.AttributeCount; i++) {  					reader.MoveToAttribute (i);  					switch (reader.Name.ToLower ()) {  					case "url":  						try {  							enclosure.Url = new Uri (reader.Value);  						}  						catch (Exception e) {  							exceptions.Add (e);  						}  						break;  					case "length":  						try {  							enclosure.Length = int.Parse (reader.Value);  						}  						catch (Exception e) {  							exceptions.Add (e);  						}  						break;  					case "type":  						enclosure.Type = reader.Value;  						break;  					}  				}  				break;  			case "guid":  				guid = new RssGuid ();  				if (item != null)  					item.Guid = guid;  				for (int i = 0; i < reader.AttributeCount; i++) {  					reader.MoveToAttribute (i);  					switch (reader.Name.ToLower ()) {  					case "ispermalink":  						try {  							guid.PermaLink = bool.Parse (reader.Value);  						}  						catch (Exception e) {  							exceptions.Add (e);  						}  						break;  					}  				}  				break;  			case "category":  				category = new RssCategory ();  				if ((string)xmlNodeStack.Peek () == "channel")  					channel.Categories.Add (category);  				else if (item != null)  					item.Categories.Add (category);  				for (int i = 0; i < reader.AttributeCount; i++) {  					reader.MoveToAttribute (i);  					switch (reader.Name.ToLower ()) {  					case "url":  						goto case "domain";  					case "domain":  						category.Domain = reader.Value;  						break;  					}  				}  				break;  			case "channel":  				channel = new RssChannel ();  				textInput = null;  				image = null;  				cloud = null;  				source = null;  				enclosure = null;  				category = null;  				item = null;  				break;  			case "image":  				image = new RssImage ();  				channel.Image = image;  				break;  			case "textinput":  				textInput = new RssTextInput ();  				channel.TextInput = textInput;  				break;  			case "cloud":  				pushElement = false;  				cloud = new RssCloud ();  				channel.Cloud = cloud;  				for (int i = 0; i < reader.AttributeCount; i++) {  					reader.MoveToAttribute (i);  					switch (reader.Name.ToLower ()) {  					case "domain":  						cloud.Domain = reader.Value;  						break;  					case "port":  						try {  							cloud.Port = ushort.Parse (reader.Value);  						}  						catch (Exception e) {  							exceptions.Add (e);  						}  						break;  					case "path":  						cloud.Path = reader.Value;  						break;  					case "registerprocedure":  						cloud.RegisterProcedure = reader.Value;  						break;  					case "protocol":  						switch (reader.Value.ToLower ()) {  						case "xml-rpc":  							cloud.Protocol = RssCloudProtocol.XmlRpc;  							break;  						case "soap":  							cloud.Protocol = RssCloudProtocol.Soap;  							break;  						case "http-post":  							cloud.Protocol = RssCloudProtocol.HttpPost;  							break;  						default:  							cloud.Protocol = RssCloudProtocol.Empty;  							break;  						}  						break;  					}  				}  				break;  			case "rss":  				for (int i = 0; i < reader.AttributeCount; i++) {  					reader.MoveToAttribute (i);  					if (reader.Name.ToLower () == "version")  						switch (reader.Value) {  						case "0.91":  							rssVersion = RssVersion.RSS091;  							break;  						case "0.92":  							rssVersion = RssVersion.RSS092;  							break;  						case "2.0":  							rssVersion = RssVersion.RSS20;  							break;  						default:  							rssVersion = RssVersion.NotSupported;  							break;  						}  				}  				break;  			case "rdf":  				for (int i = 0; i < reader.AttributeCount; i++) {  					reader.MoveToAttribute (i);  					if (reader.Name.ToLower () == "version")  						switch (reader.Value) {  						case "0.90":  							rssVersion = RssVersion.RSS090;  							break;  						case "1.0":  							rssVersion = RssVersion.RSS10;  							break;  						default:  							rssVersion = RssVersion.NotSupported;  							break;  						}  				}  				break;  			}  			if (pushElement)  				xmlNodeStack.Push (readerName);  			break;  		}  		case XmlNodeType.EndElement: {  			if (xmlNodeStack.Count == 1)  				break;  			string childElementName = (string)xmlNodeStack.Pop ();  			string parentElementName = (string)xmlNodeStack.Peek ();  			switch (childElementName) // current element  			{  			// item classes  			case "item":  				rssElement = item;  				readData = false;  				break;  			case "source":  				source.Name = elementText.ToString ();  				rssElement = source;  				readData = false;  				break;  			case "enclosure":  				rssElement = enclosure;  				readData = false;  				break;  			case "guid":  				guid.Name = elementText.ToString ();  				rssElement = guid;  				readData = false;  				break;  			case "category":  				// parent is either item or channel  				category.Name = elementText.ToString ();  				rssElement = category;  				readData = false;  				break;  			// channel classes  			case "channel":  				if (wroteChannel)  					wroteChannel = false;  				else {  					wroteChannel = true;  					rssElement = channel;  					readData = false;  				}  				break;  			case "textinput":  				rssElement = textInput;  				readData = false;  				break;  			case "image":  				rssElement = image;  				readData = false;  				break;  			case "cloud":  				rssElement = cloud;  				readData = false;  				break;  			}  			switch (parentElementName) // parent element  			{  			case "item":  				switch (childElementName) {  				case "title":  					item.Title = elementText.ToString ();  					break;  				case "link":  					item.Link = new Uri (elementText.ToString ());  					break;  				case "description":  					item.Description = elementText.ToString ();  					break;  				case "content:encoded":  					item.Content = elementText.ToString ();  					break;  				case "author":  				case "dc:creator":  					item.Author = elementText.ToString ();  					break;  				case "comments":  					item.Comments = elementText.ToString ();  					break;  				case "dc:date":  				case "pubdate":  					try {  						item.PubDate = DateTime.Parse (elementText.ToString ());  					}  					catch (Exception e) {  						try {  							string tmp = elementText.ToString ();  							tmp = tmp.Substring (0' tmp.Length - 5);  							tmp += "GMT";  							item.PubDate = DateTime.Parse (tmp);  						}  						catch {  							exceptions.Add (e);  						}  					}  					break;  				}  				break;  			case "channel":  				switch (childElementName) {  				case "title":  					channel.Title = elementText.ToString ();  					break;  				case "link":  					try {  						channel.Link = new Uri (elementText.ToString ());  					}  					catch (Exception e) {  						exceptions.Add (e);  					}  					break;  				case "description":  					channel.Description = elementText.ToString ();  					break;  				case "language":  					channel.Language = elementText.ToString ();  					break;  				case "copyright":  					channel.Copyright = elementText.ToString ();  					break;  				case "managingeditor":  					channel.ManagingEditor = elementText.ToString ();  					break;  				case "webmaster":  					channel.WebMaster = elementText.ToString ();  					break;  				case "rating":  					channel.Rating = elementText.ToString ();  					break;  				case "pubdate":  					try {  						channel.PubDate = DateTime.Parse (elementText.ToString ());  					}  					catch (Exception e) {  						exceptions.Add (e);  					}  					break;  				case "lastbuilddate":  					try {  						channel.LastBuildDate = DateTime.Parse (elementText.ToString ());  					}  					catch (Exception e) {  						exceptions.Add (e);  					}  					break;  				case "generator":  					channel.Generator = elementText.ToString ();  					break;  				case "docs":  					channel.Docs = elementText.ToString ();  					break;  				case "ttl":  					try {  						channel.TimeToLive = int.Parse (elementText.ToString ());  					}  					catch (Exception e) {  						exceptions.Add (e);  					}  					break;  				}  				break;  			case "image":  				switch (childElementName) {  				case "url":  					try {  						image.Url = new Uri (elementText.ToString ());  					}  					catch (Exception e) {  						exceptions.Add (e);  					}  					break;  				case "title":  					image.Title = elementText.ToString ();  					break;  				case "link":  					try {  						image.Link = new Uri (elementText.ToString ());  					}  					catch (Exception e) {  						exceptions.Add (e);  					}  					break;  				case "description":  					image.Description = elementText.ToString ();  					break;  				case "width":  					try {  						image.Width = Byte.Parse (elementText.ToString ());  					}  					catch (Exception e) {  						exceptions.Add (e);  					}  					break;  				case "height":  					try {  						image.Height = Byte.Parse (elementText.ToString ());  					}  					catch (Exception e) {  						exceptions.Add (e);  					}  					break;  				}  				break;  			case "textinput":  				switch (childElementName) {  				case "title":  					textInput.Title = elementText.ToString ();  					break;  				case "description":  					textInput.Description = elementText.ToString ();  					break;  				case "name":  					textInput.Name = elementText.ToString ();  					break;  				case "link":  					try {  						textInput.Link = new Uri (elementText.ToString ());  					}  					catch (Exception e) {  						exceptions.Add (e);  					}  					break;  				}  				break;  			case "skipdays":  				if (childElementName == "day")  					switch (elementText.ToString ().ToLower ()) {  					case "monday":  						channel.SkipDays [0] = true;  						break;  					case "tuesday":  						channel.SkipDays [1] = true;  						break;  					case "wednesday":  						channel.SkipDays [2] = true;  						break;  					case "thursday":  						channel.SkipDays [3] = true;  						break;  					case "friday":  						channel.SkipDays [4] = true;  						break;  					case "saturday":  						channel.SkipDays [5] = true;  						break;  					case "sunday":  						channel.SkipDays [6] = true;  						break;  					}  				break;  			case "skiphours":  				if (childElementName == "hour")  					channel.SkipHours [Byte.Parse (elementText.ToString ().ToLower ())] = true;  				break;  			}  			break;  		}  		case XmlNodeType.Text:  			elementText.Append (reader.Value);  			break;  		case XmlNodeType.CDATA:  			elementText.Append (reader.Value);  			break;  		}  	}  }  while (readData);  
Magic Number,Rss,RssReader,C:\repos\dblock_sncore\Rss.Net\RssReader.cs,Read,The following statement contains a magic number: do {  	pushElement = true;  	try {  		readData = reader.Read ();  	}  	catch (System.IO.EndOfStreamException e) {  		throw new System.IO.EndOfStreamException ("Unable to read an RssElement. Reached the end of the stream."' e);  	}  	catch (System.Xml.XmlException e) {  		if (lineNumber != -1 || linePosition != -1)  			if (reader.LineNumber == lineNumber && reader.LinePosition == linePosition)  				throw exceptions.LastException;  		lineNumber = reader.LineNumber;  		linePosition = reader.LinePosition;  		exceptions.Add (e);  		// just add to list of exceptions and continue :)  	}  	if (readData) {  		string readerName = reader.Name.ToLower ();  		switch (reader.NodeType) {  		case XmlNodeType.Element: {  			if (reader.IsEmptyElement)  				break;  			elementText = new StringBuilder ();  			switch (readerName) {  			case "item":  				// is this the end of the channel element? (absence of </channel> before <item>)  				if (!wroteChannel) {  					wroteChannel = true;  					rssElement = channel;  					// return RssChannel  					readData = false;  				}  				item = new RssItem ();  				// create new RssItem  				channel.Items.Add (item);  				break;  			case "source":  				source = new RssSource ();  				if (item != null)  					item.Source = source;  				for (int i = 0; i < reader.AttributeCount; i++) {  					reader.MoveToAttribute (i);  					switch (reader.Name.ToLower ()) {  					case "url":  						try {  							source.Url = new Uri (reader.Value);  						}  						catch (Exception e) {  							exceptions.Add (e);  						}  						break;  					}  				}  				break;  			case "enclosure":  				enclosure = new RssEnclosure ();  				if (item != null)  					item.Enclosure = enclosure;  				for (int i = 0; i < reader.AttributeCount; i++) {  					reader.MoveToAttribute (i);  					switch (reader.Name.ToLower ()) {  					case "url":  						try {  							enclosure.Url = new Uri (reader.Value);  						}  						catch (Exception e) {  							exceptions.Add (e);  						}  						break;  					case "length":  						try {  							enclosure.Length = int.Parse (reader.Value);  						}  						catch (Exception e) {  							exceptions.Add (e);  						}  						break;  					case "type":  						enclosure.Type = reader.Value;  						break;  					}  				}  				break;  			case "guid":  				guid = new RssGuid ();  				if (item != null)  					item.Guid = guid;  				for (int i = 0; i < reader.AttributeCount; i++) {  					reader.MoveToAttribute (i);  					switch (reader.Name.ToLower ()) {  					case "ispermalink":  						try {  							guid.PermaLink = bool.Parse (reader.Value);  						}  						catch (Exception e) {  							exceptions.Add (e);  						}  						break;  					}  				}  				break;  			case "category":  				category = new RssCategory ();  				if ((string)xmlNodeStack.Peek () == "channel")  					channel.Categories.Add (category);  				else if (item != null)  					item.Categories.Add (category);  				for (int i = 0; i < reader.AttributeCount; i++) {  					reader.MoveToAttribute (i);  					switch (reader.Name.ToLower ()) {  					case "url":  						goto case "domain";  					case "domain":  						category.Domain = reader.Value;  						break;  					}  				}  				break;  			case "channel":  				channel = new RssChannel ();  				textInput = null;  				image = null;  				cloud = null;  				source = null;  				enclosure = null;  				category = null;  				item = null;  				break;  			case "image":  				image = new RssImage ();  				channel.Image = image;  				break;  			case "textinput":  				textInput = new RssTextInput ();  				channel.TextInput = textInput;  				break;  			case "cloud":  				pushElement = false;  				cloud = new RssCloud ();  				channel.Cloud = cloud;  				for (int i = 0; i < reader.AttributeCount; i++) {  					reader.MoveToAttribute (i);  					switch (reader.Name.ToLower ()) {  					case "domain":  						cloud.Domain = reader.Value;  						break;  					case "port":  						try {  							cloud.Port = ushort.Parse (reader.Value);  						}  						catch (Exception e) {  							exceptions.Add (e);  						}  						break;  					case "path":  						cloud.Path = reader.Value;  						break;  					case "registerprocedure":  						cloud.RegisterProcedure = reader.Value;  						break;  					case "protocol":  						switch (reader.Value.ToLower ()) {  						case "xml-rpc":  							cloud.Protocol = RssCloudProtocol.XmlRpc;  							break;  						case "soap":  							cloud.Protocol = RssCloudProtocol.Soap;  							break;  						case "http-post":  							cloud.Protocol = RssCloudProtocol.HttpPost;  							break;  						default:  							cloud.Protocol = RssCloudProtocol.Empty;  							break;  						}  						break;  					}  				}  				break;  			case "rss":  				for (int i = 0; i < reader.AttributeCount; i++) {  					reader.MoveToAttribute (i);  					if (reader.Name.ToLower () == "version")  						switch (reader.Value) {  						case "0.91":  							rssVersion = RssVersion.RSS091;  							break;  						case "0.92":  							rssVersion = RssVersion.RSS092;  							break;  						case "2.0":  							rssVersion = RssVersion.RSS20;  							break;  						default:  							rssVersion = RssVersion.NotSupported;  							break;  						}  				}  				break;  			case "rdf":  				for (int i = 0; i < reader.AttributeCount; i++) {  					reader.MoveToAttribute (i);  					if (reader.Name.ToLower () == "version")  						switch (reader.Value) {  						case "0.90":  							rssVersion = RssVersion.RSS090;  							break;  						case "1.0":  							rssVersion = RssVersion.RSS10;  							break;  						default:  							rssVersion = RssVersion.NotSupported;  							break;  						}  				}  				break;  			}  			if (pushElement)  				xmlNodeStack.Push (readerName);  			break;  		}  		case XmlNodeType.EndElement: {  			if (xmlNodeStack.Count == 1)  				break;  			string childElementName = (string)xmlNodeStack.Pop ();  			string parentElementName = (string)xmlNodeStack.Peek ();  			switch (childElementName) // current element  			{  			// item classes  			case "item":  				rssElement = item;  				readData = false;  				break;  			case "source":  				source.Name = elementText.ToString ();  				rssElement = source;  				readData = false;  				break;  			case "enclosure":  				rssElement = enclosure;  				readData = false;  				break;  			case "guid":  				guid.Name = elementText.ToString ();  				rssElement = guid;  				readData = false;  				break;  			case "category":  				// parent is either item or channel  				category.Name = elementText.ToString ();  				rssElement = category;  				readData = false;  				break;  			// channel classes  			case "channel":  				if (wroteChannel)  					wroteChannel = false;  				else {  					wroteChannel = true;  					rssElement = channel;  					readData = false;  				}  				break;  			case "textinput":  				rssElement = textInput;  				readData = false;  				break;  			case "image":  				rssElement = image;  				readData = false;  				break;  			case "cloud":  				rssElement = cloud;  				readData = false;  				break;  			}  			switch (parentElementName) // parent element  			{  			case "item":  				switch (childElementName) {  				case "title":  					item.Title = elementText.ToString ();  					break;  				case "link":  					item.Link = new Uri (elementText.ToString ());  					break;  				case "description":  					item.Description = elementText.ToString ();  					break;  				case "content:encoded":  					item.Content = elementText.ToString ();  					break;  				case "author":  				case "dc:creator":  					item.Author = elementText.ToString ();  					break;  				case "comments":  					item.Comments = elementText.ToString ();  					break;  				case "dc:date":  				case "pubdate":  					try {  						item.PubDate = DateTime.Parse (elementText.ToString ());  					}  					catch (Exception e) {  						try {  							string tmp = elementText.ToString ();  							tmp = tmp.Substring (0' tmp.Length - 5);  							tmp += "GMT";  							item.PubDate = DateTime.Parse (tmp);  						}  						catch {  							exceptions.Add (e);  						}  					}  					break;  				}  				break;  			case "channel":  				switch (childElementName) {  				case "title":  					channel.Title = elementText.ToString ();  					break;  				case "link":  					try {  						channel.Link = new Uri (elementText.ToString ());  					}  					catch (Exception e) {  						exceptions.Add (e);  					}  					break;  				case "description":  					channel.Description = elementText.ToString ();  					break;  				case "language":  					channel.Language = elementText.ToString ();  					break;  				case "copyright":  					channel.Copyright = elementText.ToString ();  					break;  				case "managingeditor":  					channel.ManagingEditor = elementText.ToString ();  					break;  				case "webmaster":  					channel.WebMaster = elementText.ToString ();  					break;  				case "rating":  					channel.Rating = elementText.ToString ();  					break;  				case "pubdate":  					try {  						channel.PubDate = DateTime.Parse (elementText.ToString ());  					}  					catch (Exception e) {  						exceptions.Add (e);  					}  					break;  				case "lastbuilddate":  					try {  						channel.LastBuildDate = DateTime.Parse (elementText.ToString ());  					}  					catch (Exception e) {  						exceptions.Add (e);  					}  					break;  				case "generator":  					channel.Generator = elementText.ToString ();  					break;  				case "docs":  					channel.Docs = elementText.ToString ();  					break;  				case "ttl":  					try {  						channel.TimeToLive = int.Parse (elementText.ToString ());  					}  					catch (Exception e) {  						exceptions.Add (e);  					}  					break;  				}  				break;  			case "image":  				switch (childElementName) {  				case "url":  					try {  						image.Url = new Uri (elementText.ToString ());  					}  					catch (Exception e) {  						exceptions.Add (e);  					}  					break;  				case "title":  					image.Title = elementText.ToString ();  					break;  				case "link":  					try {  						image.Link = new Uri (elementText.ToString ());  					}  					catch (Exception e) {  						exceptions.Add (e);  					}  					break;  				case "description":  					image.Description = elementText.ToString ();  					break;  				case "width":  					try {  						image.Width = Byte.Parse (elementText.ToString ());  					}  					catch (Exception e) {  						exceptions.Add (e);  					}  					break;  				case "height":  					try {  						image.Height = Byte.Parse (elementText.ToString ());  					}  					catch (Exception e) {  						exceptions.Add (e);  					}  					break;  				}  				break;  			case "textinput":  				switch (childElementName) {  				case "title":  					textInput.Title = elementText.ToString ();  					break;  				case "description":  					textInput.Description = elementText.ToString ();  					break;  				case "name":  					textInput.Name = elementText.ToString ();  					break;  				case "link":  					try {  						textInput.Link = new Uri (elementText.ToString ());  					}  					catch (Exception e) {  						exceptions.Add (e);  					}  					break;  				}  				break;  			case "skipdays":  				if (childElementName == "day")  					switch (elementText.ToString ().ToLower ()) {  					case "monday":  						channel.SkipDays [0] = true;  						break;  					case "tuesday":  						channel.SkipDays [1] = true;  						break;  					case "wednesday":  						channel.SkipDays [2] = true;  						break;  					case "thursday":  						channel.SkipDays [3] = true;  						break;  					case "friday":  						channel.SkipDays [4] = true;  						break;  					case "saturday":  						channel.SkipDays [5] = true;  						break;  					case "sunday":  						channel.SkipDays [6] = true;  						break;  					}  				break;  			case "skiphours":  				if (childElementName == "hour")  					channel.SkipHours [Byte.Parse (elementText.ToString ().ToLower ())] = true;  				break;  			}  			break;  		}  		case XmlNodeType.Text:  			elementText.Append (reader.Value);  			break;  		case XmlNodeType.CDATA:  			elementText.Append (reader.Value);  			break;  		}  	}  }  while (readData);  
Magic Number,Rss,RssReader,C:\repos\dblock_sncore\Rss.Net\RssReader.cs,Read,The following statement contains a magic number: do {  	pushElement = true;  	try {  		readData = reader.Read ();  	}  	catch (System.IO.EndOfStreamException e) {  		throw new System.IO.EndOfStreamException ("Unable to read an RssElement. Reached the end of the stream."' e);  	}  	catch (System.Xml.XmlException e) {  		if (lineNumber != -1 || linePosition != -1)  			if (reader.LineNumber == lineNumber && reader.LinePosition == linePosition)  				throw exceptions.LastException;  		lineNumber = reader.LineNumber;  		linePosition = reader.LinePosition;  		exceptions.Add (e);  		// just add to list of exceptions and continue :)  	}  	if (readData) {  		string readerName = reader.Name.ToLower ();  		switch (reader.NodeType) {  		case XmlNodeType.Element: {  			if (reader.IsEmptyElement)  				break;  			elementText = new StringBuilder ();  			switch (readerName) {  			case "item":  				// is this the end of the channel element? (absence of </channel> before <item>)  				if (!wroteChannel) {  					wroteChannel = true;  					rssElement = channel;  					// return RssChannel  					readData = false;  				}  				item = new RssItem ();  				// create new RssItem  				channel.Items.Add (item);  				break;  			case "source":  				source = new RssSource ();  				if (item != null)  					item.Source = source;  				for (int i = 0; i < reader.AttributeCount; i++) {  					reader.MoveToAttribute (i);  					switch (reader.Name.ToLower ()) {  					case "url":  						try {  							source.Url = new Uri (reader.Value);  						}  						catch (Exception e) {  							exceptions.Add (e);  						}  						break;  					}  				}  				break;  			case "enclosure":  				enclosure = new RssEnclosure ();  				if (item != null)  					item.Enclosure = enclosure;  				for (int i = 0; i < reader.AttributeCount; i++) {  					reader.MoveToAttribute (i);  					switch (reader.Name.ToLower ()) {  					case "url":  						try {  							enclosure.Url = new Uri (reader.Value);  						}  						catch (Exception e) {  							exceptions.Add (e);  						}  						break;  					case "length":  						try {  							enclosure.Length = int.Parse (reader.Value);  						}  						catch (Exception e) {  							exceptions.Add (e);  						}  						break;  					case "type":  						enclosure.Type = reader.Value;  						break;  					}  				}  				break;  			case "guid":  				guid = new RssGuid ();  				if (item != null)  					item.Guid = guid;  				for (int i = 0; i < reader.AttributeCount; i++) {  					reader.MoveToAttribute (i);  					switch (reader.Name.ToLower ()) {  					case "ispermalink":  						try {  							guid.PermaLink = bool.Parse (reader.Value);  						}  						catch (Exception e) {  							exceptions.Add (e);  						}  						break;  					}  				}  				break;  			case "category":  				category = new RssCategory ();  				if ((string)xmlNodeStack.Peek () == "channel")  					channel.Categories.Add (category);  				else if (item != null)  					item.Categories.Add (category);  				for (int i = 0; i < reader.AttributeCount; i++) {  					reader.MoveToAttribute (i);  					switch (reader.Name.ToLower ()) {  					case "url":  						goto case "domain";  					case "domain":  						category.Domain = reader.Value;  						break;  					}  				}  				break;  			case "channel":  				channel = new RssChannel ();  				textInput = null;  				image = null;  				cloud = null;  				source = null;  				enclosure = null;  				category = null;  				item = null;  				break;  			case "image":  				image = new RssImage ();  				channel.Image = image;  				break;  			case "textinput":  				textInput = new RssTextInput ();  				channel.TextInput = textInput;  				break;  			case "cloud":  				pushElement = false;  				cloud = new RssCloud ();  				channel.Cloud = cloud;  				for (int i = 0; i < reader.AttributeCount; i++) {  					reader.MoveToAttribute (i);  					switch (reader.Name.ToLower ()) {  					case "domain":  						cloud.Domain = reader.Value;  						break;  					case "port":  						try {  							cloud.Port = ushort.Parse (reader.Value);  						}  						catch (Exception e) {  							exceptions.Add (e);  						}  						break;  					case "path":  						cloud.Path = reader.Value;  						break;  					case "registerprocedure":  						cloud.RegisterProcedure = reader.Value;  						break;  					case "protocol":  						switch (reader.Value.ToLower ()) {  						case "xml-rpc":  							cloud.Protocol = RssCloudProtocol.XmlRpc;  							break;  						case "soap":  							cloud.Protocol = RssCloudProtocol.Soap;  							break;  						case "http-post":  							cloud.Protocol = RssCloudProtocol.HttpPost;  							break;  						default:  							cloud.Protocol = RssCloudProtocol.Empty;  							break;  						}  						break;  					}  				}  				break;  			case "rss":  				for (int i = 0; i < reader.AttributeCount; i++) {  					reader.MoveToAttribute (i);  					if (reader.Name.ToLower () == "version")  						switch (reader.Value) {  						case "0.91":  							rssVersion = RssVersion.RSS091;  							break;  						case "0.92":  							rssVersion = RssVersion.RSS092;  							break;  						case "2.0":  							rssVersion = RssVersion.RSS20;  							break;  						default:  							rssVersion = RssVersion.NotSupported;  							break;  						}  				}  				break;  			case "rdf":  				for (int i = 0; i < reader.AttributeCount; i++) {  					reader.MoveToAttribute (i);  					if (reader.Name.ToLower () == "version")  						switch (reader.Value) {  						case "0.90":  							rssVersion = RssVersion.RSS090;  							break;  						case "1.0":  							rssVersion = RssVersion.RSS10;  							break;  						default:  							rssVersion = RssVersion.NotSupported;  							break;  						}  				}  				break;  			}  			if (pushElement)  				xmlNodeStack.Push (readerName);  			break;  		}  		case XmlNodeType.EndElement: {  			if (xmlNodeStack.Count == 1)  				break;  			string childElementName = (string)xmlNodeStack.Pop ();  			string parentElementName = (string)xmlNodeStack.Peek ();  			switch (childElementName) // current element  			{  			// item classes  			case "item":  				rssElement = item;  				readData = false;  				break;  			case "source":  				source.Name = elementText.ToString ();  				rssElement = source;  				readData = false;  				break;  			case "enclosure":  				rssElement = enclosure;  				readData = false;  				break;  			case "guid":  				guid.Name = elementText.ToString ();  				rssElement = guid;  				readData = false;  				break;  			case "category":  				// parent is either item or channel  				category.Name = elementText.ToString ();  				rssElement = category;  				readData = false;  				break;  			// channel classes  			case "channel":  				if (wroteChannel)  					wroteChannel = false;  				else {  					wroteChannel = true;  					rssElement = channel;  					readData = false;  				}  				break;  			case "textinput":  				rssElement = textInput;  				readData = false;  				break;  			case "image":  				rssElement = image;  				readData = false;  				break;  			case "cloud":  				rssElement = cloud;  				readData = false;  				break;  			}  			switch (parentElementName) // parent element  			{  			case "item":  				switch (childElementName) {  				case "title":  					item.Title = elementText.ToString ();  					break;  				case "link":  					item.Link = new Uri (elementText.ToString ());  					break;  				case "description":  					item.Description = elementText.ToString ();  					break;  				case "content:encoded":  					item.Content = elementText.ToString ();  					break;  				case "author":  				case "dc:creator":  					item.Author = elementText.ToString ();  					break;  				case "comments":  					item.Comments = elementText.ToString ();  					break;  				case "dc:date":  				case "pubdate":  					try {  						item.PubDate = DateTime.Parse (elementText.ToString ());  					}  					catch (Exception e) {  						try {  							string tmp = elementText.ToString ();  							tmp = tmp.Substring (0' tmp.Length - 5);  							tmp += "GMT";  							item.PubDate = DateTime.Parse (tmp);  						}  						catch {  							exceptions.Add (e);  						}  					}  					break;  				}  				break;  			case "channel":  				switch (childElementName) {  				case "title":  					channel.Title = elementText.ToString ();  					break;  				case "link":  					try {  						channel.Link = new Uri (elementText.ToString ());  					}  					catch (Exception e) {  						exceptions.Add (e);  					}  					break;  				case "description":  					channel.Description = elementText.ToString ();  					break;  				case "language":  					channel.Language = elementText.ToString ();  					break;  				case "copyright":  					channel.Copyright = elementText.ToString ();  					break;  				case "managingeditor":  					channel.ManagingEditor = elementText.ToString ();  					break;  				case "webmaster":  					channel.WebMaster = elementText.ToString ();  					break;  				case "rating":  					channel.Rating = elementText.ToString ();  					break;  				case "pubdate":  					try {  						channel.PubDate = DateTime.Parse (elementText.ToString ());  					}  					catch (Exception e) {  						exceptions.Add (e);  					}  					break;  				case "lastbuilddate":  					try {  						channel.LastBuildDate = DateTime.Parse (elementText.ToString ());  					}  					catch (Exception e) {  						exceptions.Add (e);  					}  					break;  				case "generator":  					channel.Generator = elementText.ToString ();  					break;  				case "docs":  					channel.Docs = elementText.ToString ();  					break;  				case "ttl":  					try {  						channel.TimeToLive = int.Parse (elementText.ToString ());  					}  					catch (Exception e) {  						exceptions.Add (e);  					}  					break;  				}  				break;  			case "image":  				switch (childElementName) {  				case "url":  					try {  						image.Url = new Uri (elementText.ToString ());  					}  					catch (Exception e) {  						exceptions.Add (e);  					}  					break;  				case "title":  					image.Title = elementText.ToString ();  					break;  				case "link":  					try {  						image.Link = new Uri (elementText.ToString ());  					}  					catch (Exception e) {  						exceptions.Add (e);  					}  					break;  				case "description":  					image.Description = elementText.ToString ();  					break;  				case "width":  					try {  						image.Width = Byte.Parse (elementText.ToString ());  					}  					catch (Exception e) {  						exceptions.Add (e);  					}  					break;  				case "height":  					try {  						image.Height = Byte.Parse (elementText.ToString ());  					}  					catch (Exception e) {  						exceptions.Add (e);  					}  					break;  				}  				break;  			case "textinput":  				switch (childElementName) {  				case "title":  					textInput.Title = elementText.ToString ();  					break;  				case "description":  					textInput.Description = elementText.ToString ();  					break;  				case "name":  					textInput.Name = elementText.ToString ();  					break;  				case "link":  					try {  						textInput.Link = new Uri (elementText.ToString ());  					}  					catch (Exception e) {  						exceptions.Add (e);  					}  					break;  				}  				break;  			case "skipdays":  				if (childElementName == "day")  					switch (elementText.ToString ().ToLower ()) {  					case "monday":  						channel.SkipDays [0] = true;  						break;  					case "tuesday":  						channel.SkipDays [1] = true;  						break;  					case "wednesday":  						channel.SkipDays [2] = true;  						break;  					case "thursday":  						channel.SkipDays [3] = true;  						break;  					case "friday":  						channel.SkipDays [4] = true;  						break;  					case "saturday":  						channel.SkipDays [5] = true;  						break;  					case "sunday":  						channel.SkipDays [6] = true;  						break;  					}  				break;  			case "skiphours":  				if (childElementName == "hour")  					channel.SkipHours [Byte.Parse (elementText.ToString ().ToLower ())] = true;  				break;  			}  			break;  		}  		case XmlNodeType.Text:  			elementText.Append (reader.Value);  			break;  		case XmlNodeType.CDATA:  			elementText.Append (reader.Value);  			break;  		}  	}  }  while (readData);  
Magic Number,Rss,RssReader,C:\repos\dblock_sncore\Rss.Net\RssReader.cs,Read,The following statement contains a magic number: if (readData) {  	string readerName = reader.Name.ToLower ();  	switch (reader.NodeType) {  	case XmlNodeType.Element: {  		if (reader.IsEmptyElement)  			break;  		elementText = new StringBuilder ();  		switch (readerName) {  		case "item":  			// is this the end of the channel element? (absence of </channel> before <item>)  			if (!wroteChannel) {  				wroteChannel = true;  				rssElement = channel;  				// return RssChannel  				readData = false;  			}  			item = new RssItem ();  			// create new RssItem  			channel.Items.Add (item);  			break;  		case "source":  			source = new RssSource ();  			if (item != null)  				item.Source = source;  			for (int i = 0; i < reader.AttributeCount; i++) {  				reader.MoveToAttribute (i);  				switch (reader.Name.ToLower ()) {  				case "url":  					try {  						source.Url = new Uri (reader.Value);  					}  					catch (Exception e) {  						exceptions.Add (e);  					}  					break;  				}  			}  			break;  		case "enclosure":  			enclosure = new RssEnclosure ();  			if (item != null)  				item.Enclosure = enclosure;  			for (int i = 0; i < reader.AttributeCount; i++) {  				reader.MoveToAttribute (i);  				switch (reader.Name.ToLower ()) {  				case "url":  					try {  						enclosure.Url = new Uri (reader.Value);  					}  					catch (Exception e) {  						exceptions.Add (e);  					}  					break;  				case "length":  					try {  						enclosure.Length = int.Parse (reader.Value);  					}  					catch (Exception e) {  						exceptions.Add (e);  					}  					break;  				case "type":  					enclosure.Type = reader.Value;  					break;  				}  			}  			break;  		case "guid":  			guid = new RssGuid ();  			if (item != null)  				item.Guid = guid;  			for (int i = 0; i < reader.AttributeCount; i++) {  				reader.MoveToAttribute (i);  				switch (reader.Name.ToLower ()) {  				case "ispermalink":  					try {  						guid.PermaLink = bool.Parse (reader.Value);  					}  					catch (Exception e) {  						exceptions.Add (e);  					}  					break;  				}  			}  			break;  		case "category":  			category = new RssCategory ();  			if ((string)xmlNodeStack.Peek () == "channel")  				channel.Categories.Add (category);  			else if (item != null)  				item.Categories.Add (category);  			for (int i = 0; i < reader.AttributeCount; i++) {  				reader.MoveToAttribute (i);  				switch (reader.Name.ToLower ()) {  				case "url":  					goto case "domain";  				case "domain":  					category.Domain = reader.Value;  					break;  				}  			}  			break;  		case "channel":  			channel = new RssChannel ();  			textInput = null;  			image = null;  			cloud = null;  			source = null;  			enclosure = null;  			category = null;  			item = null;  			break;  		case "image":  			image = new RssImage ();  			channel.Image = image;  			break;  		case "textinput":  			textInput = new RssTextInput ();  			channel.TextInput = textInput;  			break;  		case "cloud":  			pushElement = false;  			cloud = new RssCloud ();  			channel.Cloud = cloud;  			for (int i = 0; i < reader.AttributeCount; i++) {  				reader.MoveToAttribute (i);  				switch (reader.Name.ToLower ()) {  				case "domain":  					cloud.Domain = reader.Value;  					break;  				case "port":  					try {  						cloud.Port = ushort.Parse (reader.Value);  					}  					catch (Exception e) {  						exceptions.Add (e);  					}  					break;  				case "path":  					cloud.Path = reader.Value;  					break;  				case "registerprocedure":  					cloud.RegisterProcedure = reader.Value;  					break;  				case "protocol":  					switch (reader.Value.ToLower ()) {  					case "xml-rpc":  						cloud.Protocol = RssCloudProtocol.XmlRpc;  						break;  					case "soap":  						cloud.Protocol = RssCloudProtocol.Soap;  						break;  					case "http-post":  						cloud.Protocol = RssCloudProtocol.HttpPost;  						break;  					default:  						cloud.Protocol = RssCloudProtocol.Empty;  						break;  					}  					break;  				}  			}  			break;  		case "rss":  			for (int i = 0; i < reader.AttributeCount; i++) {  				reader.MoveToAttribute (i);  				if (reader.Name.ToLower () == "version")  					switch (reader.Value) {  					case "0.91":  						rssVersion = RssVersion.RSS091;  						break;  					case "0.92":  						rssVersion = RssVersion.RSS092;  						break;  					case "2.0":  						rssVersion = RssVersion.RSS20;  						break;  					default:  						rssVersion = RssVersion.NotSupported;  						break;  					}  			}  			break;  		case "rdf":  			for (int i = 0; i < reader.AttributeCount; i++) {  				reader.MoveToAttribute (i);  				if (reader.Name.ToLower () == "version")  					switch (reader.Value) {  					case "0.90":  						rssVersion = RssVersion.RSS090;  						break;  					case "1.0":  						rssVersion = RssVersion.RSS10;  						break;  					default:  						rssVersion = RssVersion.NotSupported;  						break;  					}  			}  			break;  		}  		if (pushElement)  			xmlNodeStack.Push (readerName);  		break;  	}  	case XmlNodeType.EndElement: {  		if (xmlNodeStack.Count == 1)  			break;  		string childElementName = (string)xmlNodeStack.Pop ();  		string parentElementName = (string)xmlNodeStack.Peek ();  		switch (childElementName) // current element  		{  		// item classes  		case "item":  			rssElement = item;  			readData = false;  			break;  		case "source":  			source.Name = elementText.ToString ();  			rssElement = source;  			readData = false;  			break;  		case "enclosure":  			rssElement = enclosure;  			readData = false;  			break;  		case "guid":  			guid.Name = elementText.ToString ();  			rssElement = guid;  			readData = false;  			break;  		case "category":  			// parent is either item or channel  			category.Name = elementText.ToString ();  			rssElement = category;  			readData = false;  			break;  		// channel classes  		case "channel":  			if (wroteChannel)  				wroteChannel = false;  			else {  				wroteChannel = true;  				rssElement = channel;  				readData = false;  			}  			break;  		case "textinput":  			rssElement = textInput;  			readData = false;  			break;  		case "image":  			rssElement = image;  			readData = false;  			break;  		case "cloud":  			rssElement = cloud;  			readData = false;  			break;  		}  		switch (parentElementName) // parent element  		{  		case "item":  			switch (childElementName) {  			case "title":  				item.Title = elementText.ToString ();  				break;  			case "link":  				item.Link = new Uri (elementText.ToString ());  				break;  			case "description":  				item.Description = elementText.ToString ();  				break;  			case "content:encoded":  				item.Content = elementText.ToString ();  				break;  			case "author":  			case "dc:creator":  				item.Author = elementText.ToString ();  				break;  			case "comments":  				item.Comments = elementText.ToString ();  				break;  			case "dc:date":  			case "pubdate":  				try {  					item.PubDate = DateTime.Parse (elementText.ToString ());  				}  				catch (Exception e) {  					try {  						string tmp = elementText.ToString ();  						tmp = tmp.Substring (0' tmp.Length - 5);  						tmp += "GMT";  						item.PubDate = DateTime.Parse (tmp);  					}  					catch {  						exceptions.Add (e);  					}  				}  				break;  			}  			break;  		case "channel":  			switch (childElementName) {  			case "title":  				channel.Title = elementText.ToString ();  				break;  			case "link":  				try {  					channel.Link = new Uri (elementText.ToString ());  				}  				catch (Exception e) {  					exceptions.Add (e);  				}  				break;  			case "description":  				channel.Description = elementText.ToString ();  				break;  			case "language":  				channel.Language = elementText.ToString ();  				break;  			case "copyright":  				channel.Copyright = elementText.ToString ();  				break;  			case "managingeditor":  				channel.ManagingEditor = elementText.ToString ();  				break;  			case "webmaster":  				channel.WebMaster = elementText.ToString ();  				break;  			case "rating":  				channel.Rating = elementText.ToString ();  				break;  			case "pubdate":  				try {  					channel.PubDate = DateTime.Parse (elementText.ToString ());  				}  				catch (Exception e) {  					exceptions.Add (e);  				}  				break;  			case "lastbuilddate":  				try {  					channel.LastBuildDate = DateTime.Parse (elementText.ToString ());  				}  				catch (Exception e) {  					exceptions.Add (e);  				}  				break;  			case "generator":  				channel.Generator = elementText.ToString ();  				break;  			case "docs":  				channel.Docs = elementText.ToString ();  				break;  			case "ttl":  				try {  					channel.TimeToLive = int.Parse (elementText.ToString ());  				}  				catch (Exception e) {  					exceptions.Add (e);  				}  				break;  			}  			break;  		case "image":  			switch (childElementName) {  			case "url":  				try {  					image.Url = new Uri (elementText.ToString ());  				}  				catch (Exception e) {  					exceptions.Add (e);  				}  				break;  			case "title":  				image.Title = elementText.ToString ();  				break;  			case "link":  				try {  					image.Link = new Uri (elementText.ToString ());  				}  				catch (Exception e) {  					exceptions.Add (e);  				}  				break;  			case "description":  				image.Description = elementText.ToString ();  				break;  			case "width":  				try {  					image.Width = Byte.Parse (elementText.ToString ());  				}  				catch (Exception e) {  					exceptions.Add (e);  				}  				break;  			case "height":  				try {  					image.Height = Byte.Parse (elementText.ToString ());  				}  				catch (Exception e) {  					exceptions.Add (e);  				}  				break;  			}  			break;  		case "textinput":  			switch (childElementName) {  			case "title":  				textInput.Title = elementText.ToString ();  				break;  			case "description":  				textInput.Description = elementText.ToString ();  				break;  			case "name":  				textInput.Name = elementText.ToString ();  				break;  			case "link":  				try {  					textInput.Link = new Uri (elementText.ToString ());  				}  				catch (Exception e) {  					exceptions.Add (e);  				}  				break;  			}  			break;  		case "skipdays":  			if (childElementName == "day")  				switch (elementText.ToString ().ToLower ()) {  				case "monday":  					channel.SkipDays [0] = true;  					break;  				case "tuesday":  					channel.SkipDays [1] = true;  					break;  				case "wednesday":  					channel.SkipDays [2] = true;  					break;  				case "thursday":  					channel.SkipDays [3] = true;  					break;  				case "friday":  					channel.SkipDays [4] = true;  					break;  				case "saturday":  					channel.SkipDays [5] = true;  					break;  				case "sunday":  					channel.SkipDays [6] = true;  					break;  				}  			break;  		case "skiphours":  			if (childElementName == "hour")  				channel.SkipHours [Byte.Parse (elementText.ToString ().ToLower ())] = true;  			break;  		}  		break;  	}  	case XmlNodeType.Text:  		elementText.Append (reader.Value);  		break;  	case XmlNodeType.CDATA:  		elementText.Append (reader.Value);  		break;  	}  }  
Magic Number,Rss,RssReader,C:\repos\dblock_sncore\Rss.Net\RssReader.cs,Read,The following statement contains a magic number: if (readData) {  	string readerName = reader.Name.ToLower ();  	switch (reader.NodeType) {  	case XmlNodeType.Element: {  		if (reader.IsEmptyElement)  			break;  		elementText = new StringBuilder ();  		switch (readerName) {  		case "item":  			// is this the end of the channel element? (absence of </channel> before <item>)  			if (!wroteChannel) {  				wroteChannel = true;  				rssElement = channel;  				// return RssChannel  				readData = false;  			}  			item = new RssItem ();  			// create new RssItem  			channel.Items.Add (item);  			break;  		case "source":  			source = new RssSource ();  			if (item != null)  				item.Source = source;  			for (int i = 0; i < reader.AttributeCount; i++) {  				reader.MoveToAttribute (i);  				switch (reader.Name.ToLower ()) {  				case "url":  					try {  						source.Url = new Uri (reader.Value);  					}  					catch (Exception e) {  						exceptions.Add (e);  					}  					break;  				}  			}  			break;  		case "enclosure":  			enclosure = new RssEnclosure ();  			if (item != null)  				item.Enclosure = enclosure;  			for (int i = 0; i < reader.AttributeCount; i++) {  				reader.MoveToAttribute (i);  				switch (reader.Name.ToLower ()) {  				case "url":  					try {  						enclosure.Url = new Uri (reader.Value);  					}  					catch (Exception e) {  						exceptions.Add (e);  					}  					break;  				case "length":  					try {  						enclosure.Length = int.Parse (reader.Value);  					}  					catch (Exception e) {  						exceptions.Add (e);  					}  					break;  				case "type":  					enclosure.Type = reader.Value;  					break;  				}  			}  			break;  		case "guid":  			guid = new RssGuid ();  			if (item != null)  				item.Guid = guid;  			for (int i = 0; i < reader.AttributeCount; i++) {  				reader.MoveToAttribute (i);  				switch (reader.Name.ToLower ()) {  				case "ispermalink":  					try {  						guid.PermaLink = bool.Parse (reader.Value);  					}  					catch (Exception e) {  						exceptions.Add (e);  					}  					break;  				}  			}  			break;  		case "category":  			category = new RssCategory ();  			if ((string)xmlNodeStack.Peek () == "channel")  				channel.Categories.Add (category);  			else if (item != null)  				item.Categories.Add (category);  			for (int i = 0; i < reader.AttributeCount; i++) {  				reader.MoveToAttribute (i);  				switch (reader.Name.ToLower ()) {  				case "url":  					goto case "domain";  				case "domain":  					category.Domain = reader.Value;  					break;  				}  			}  			break;  		case "channel":  			channel = new RssChannel ();  			textInput = null;  			image = null;  			cloud = null;  			source = null;  			enclosure = null;  			category = null;  			item = null;  			break;  		case "image":  			image = new RssImage ();  			channel.Image = image;  			break;  		case "textinput":  			textInput = new RssTextInput ();  			channel.TextInput = textInput;  			break;  		case "cloud":  			pushElement = false;  			cloud = new RssCloud ();  			channel.Cloud = cloud;  			for (int i = 0; i < reader.AttributeCount; i++) {  				reader.MoveToAttribute (i);  				switch (reader.Name.ToLower ()) {  				case "domain":  					cloud.Domain = reader.Value;  					break;  				case "port":  					try {  						cloud.Port = ushort.Parse (reader.Value);  					}  					catch (Exception e) {  						exceptions.Add (e);  					}  					break;  				case "path":  					cloud.Path = reader.Value;  					break;  				case "registerprocedure":  					cloud.RegisterProcedure = reader.Value;  					break;  				case "protocol":  					switch (reader.Value.ToLower ()) {  					case "xml-rpc":  						cloud.Protocol = RssCloudProtocol.XmlRpc;  						break;  					case "soap":  						cloud.Protocol = RssCloudProtocol.Soap;  						break;  					case "http-post":  						cloud.Protocol = RssCloudProtocol.HttpPost;  						break;  					default:  						cloud.Protocol = RssCloudProtocol.Empty;  						break;  					}  					break;  				}  			}  			break;  		case "rss":  			for (int i = 0; i < reader.AttributeCount; i++) {  				reader.MoveToAttribute (i);  				if (reader.Name.ToLower () == "version")  					switch (reader.Value) {  					case "0.91":  						rssVersion = RssVersion.RSS091;  						break;  					case "0.92":  						rssVersion = RssVersion.RSS092;  						break;  					case "2.0":  						rssVersion = RssVersion.RSS20;  						break;  					default:  						rssVersion = RssVersion.NotSupported;  						break;  					}  			}  			break;  		case "rdf":  			for (int i = 0; i < reader.AttributeCount; i++) {  				reader.MoveToAttribute (i);  				if (reader.Name.ToLower () == "version")  					switch (reader.Value) {  					case "0.90":  						rssVersion = RssVersion.RSS090;  						break;  					case "1.0":  						rssVersion = RssVersion.RSS10;  						break;  					default:  						rssVersion = RssVersion.NotSupported;  						break;  					}  			}  			break;  		}  		if (pushElement)  			xmlNodeStack.Push (readerName);  		break;  	}  	case XmlNodeType.EndElement: {  		if (xmlNodeStack.Count == 1)  			break;  		string childElementName = (string)xmlNodeStack.Pop ();  		string parentElementName = (string)xmlNodeStack.Peek ();  		switch (childElementName) // current element  		{  		// item classes  		case "item":  			rssElement = item;  			readData = false;  			break;  		case "source":  			source.Name = elementText.ToString ();  			rssElement = source;  			readData = false;  			break;  		case "enclosure":  			rssElement = enclosure;  			readData = false;  			break;  		case "guid":  			guid.Name = elementText.ToString ();  			rssElement = guid;  			readData = false;  			break;  		case "category":  			// parent is either item or channel  			category.Name = elementText.ToString ();  			rssElement = category;  			readData = false;  			break;  		// channel classes  		case "channel":  			if (wroteChannel)  				wroteChannel = false;  			else {  				wroteChannel = true;  				rssElement = channel;  				readData = false;  			}  			break;  		case "textinput":  			rssElement = textInput;  			readData = false;  			break;  		case "image":  			rssElement = image;  			readData = false;  			break;  		case "cloud":  			rssElement = cloud;  			readData = false;  			break;  		}  		switch (parentElementName) // parent element  		{  		case "item":  			switch (childElementName) {  			case "title":  				item.Title = elementText.ToString ();  				break;  			case "link":  				item.Link = new Uri (elementText.ToString ());  				break;  			case "description":  				item.Description = elementText.ToString ();  				break;  			case "content:encoded":  				item.Content = elementText.ToString ();  				break;  			case "author":  			case "dc:creator":  				item.Author = elementText.ToString ();  				break;  			case "comments":  				item.Comments = elementText.ToString ();  				break;  			case "dc:date":  			case "pubdate":  				try {  					item.PubDate = DateTime.Parse (elementText.ToString ());  				}  				catch (Exception e) {  					try {  						string tmp = elementText.ToString ();  						tmp = tmp.Substring (0' tmp.Length - 5);  						tmp += "GMT";  						item.PubDate = DateTime.Parse (tmp);  					}  					catch {  						exceptions.Add (e);  					}  				}  				break;  			}  			break;  		case "channel":  			switch (childElementName) {  			case "title":  				channel.Title = elementText.ToString ();  				break;  			case "link":  				try {  					channel.Link = new Uri (elementText.ToString ());  				}  				catch (Exception e) {  					exceptions.Add (e);  				}  				break;  			case "description":  				channel.Description = elementText.ToString ();  				break;  			case "language":  				channel.Language = elementText.ToString ();  				break;  			case "copyright":  				channel.Copyright = elementText.ToString ();  				break;  			case "managingeditor":  				channel.ManagingEditor = elementText.ToString ();  				break;  			case "webmaster":  				channel.WebMaster = elementText.ToString ();  				break;  			case "rating":  				channel.Rating = elementText.ToString ();  				break;  			case "pubdate":  				try {  					channel.PubDate = DateTime.Parse (elementText.ToString ());  				}  				catch (Exception e) {  					exceptions.Add (e);  				}  				break;  			case "lastbuilddate":  				try {  					channel.LastBuildDate = DateTime.Parse (elementText.ToString ());  				}  				catch (Exception e) {  					exceptions.Add (e);  				}  				break;  			case "generator":  				channel.Generator = elementText.ToString ();  				break;  			case "docs":  				channel.Docs = elementText.ToString ();  				break;  			case "ttl":  				try {  					channel.TimeToLive = int.Parse (elementText.ToString ());  				}  				catch (Exception e) {  					exceptions.Add (e);  				}  				break;  			}  			break;  		case "image":  			switch (childElementName) {  			case "url":  				try {  					image.Url = new Uri (elementText.ToString ());  				}  				catch (Exception e) {  					exceptions.Add (e);  				}  				break;  			case "title":  				image.Title = elementText.ToString ();  				break;  			case "link":  				try {  					image.Link = new Uri (elementText.ToString ());  				}  				catch (Exception e) {  					exceptions.Add (e);  				}  				break;  			case "description":  				image.Description = elementText.ToString ();  				break;  			case "width":  				try {  					image.Width = Byte.Parse (elementText.ToString ());  				}  				catch (Exception e) {  					exceptions.Add (e);  				}  				break;  			case "height":  				try {  					image.Height = Byte.Parse (elementText.ToString ());  				}  				catch (Exception e) {  					exceptions.Add (e);  				}  				break;  			}  			break;  		case "textinput":  			switch (childElementName) {  			case "title":  				textInput.Title = elementText.ToString ();  				break;  			case "description":  				textInput.Description = elementText.ToString ();  				break;  			case "name":  				textInput.Name = elementText.ToString ();  				break;  			case "link":  				try {  					textInput.Link = new Uri (elementText.ToString ());  				}  				catch (Exception e) {  					exceptions.Add (e);  				}  				break;  			}  			break;  		case "skipdays":  			if (childElementName == "day")  				switch (elementText.ToString ().ToLower ()) {  				case "monday":  					channel.SkipDays [0] = true;  					break;  				case "tuesday":  					channel.SkipDays [1] = true;  					break;  				case "wednesday":  					channel.SkipDays [2] = true;  					break;  				case "thursday":  					channel.SkipDays [3] = true;  					break;  				case "friday":  					channel.SkipDays [4] = true;  					break;  				case "saturday":  					channel.SkipDays [5] = true;  					break;  				case "sunday":  					channel.SkipDays [6] = true;  					break;  				}  			break;  		case "skiphours":  			if (childElementName == "hour")  				channel.SkipHours [Byte.Parse (elementText.ToString ().ToLower ())] = true;  			break;  		}  		break;  	}  	case XmlNodeType.Text:  		elementText.Append (reader.Value);  		break;  	case XmlNodeType.CDATA:  		elementText.Append (reader.Value);  		break;  	}  }  
Magic Number,Rss,RssReader,C:\repos\dblock_sncore\Rss.Net\RssReader.cs,Read,The following statement contains a magic number: if (readData) {  	string readerName = reader.Name.ToLower ();  	switch (reader.NodeType) {  	case XmlNodeType.Element: {  		if (reader.IsEmptyElement)  			break;  		elementText = new StringBuilder ();  		switch (readerName) {  		case "item":  			// is this the end of the channel element? (absence of </channel> before <item>)  			if (!wroteChannel) {  				wroteChannel = true;  				rssElement = channel;  				// return RssChannel  				readData = false;  			}  			item = new RssItem ();  			// create new RssItem  			channel.Items.Add (item);  			break;  		case "source":  			source = new RssSource ();  			if (item != null)  				item.Source = source;  			for (int i = 0; i < reader.AttributeCount; i++) {  				reader.MoveToAttribute (i);  				switch (reader.Name.ToLower ()) {  				case "url":  					try {  						source.Url = new Uri (reader.Value);  					}  					catch (Exception e) {  						exceptions.Add (e);  					}  					break;  				}  			}  			break;  		case "enclosure":  			enclosure = new RssEnclosure ();  			if (item != null)  				item.Enclosure = enclosure;  			for (int i = 0; i < reader.AttributeCount; i++) {  				reader.MoveToAttribute (i);  				switch (reader.Name.ToLower ()) {  				case "url":  					try {  						enclosure.Url = new Uri (reader.Value);  					}  					catch (Exception e) {  						exceptions.Add (e);  					}  					break;  				case "length":  					try {  						enclosure.Length = int.Parse (reader.Value);  					}  					catch (Exception e) {  						exceptions.Add (e);  					}  					break;  				case "type":  					enclosure.Type = reader.Value;  					break;  				}  			}  			break;  		case "guid":  			guid = new RssGuid ();  			if (item != null)  				item.Guid = guid;  			for (int i = 0; i < reader.AttributeCount; i++) {  				reader.MoveToAttribute (i);  				switch (reader.Name.ToLower ()) {  				case "ispermalink":  					try {  						guid.PermaLink = bool.Parse (reader.Value);  					}  					catch (Exception e) {  						exceptions.Add (e);  					}  					break;  				}  			}  			break;  		case "category":  			category = new RssCategory ();  			if ((string)xmlNodeStack.Peek () == "channel")  				channel.Categories.Add (category);  			else if (item != null)  				item.Categories.Add (category);  			for (int i = 0; i < reader.AttributeCount; i++) {  				reader.MoveToAttribute (i);  				switch (reader.Name.ToLower ()) {  				case "url":  					goto case "domain";  				case "domain":  					category.Domain = reader.Value;  					break;  				}  			}  			break;  		case "channel":  			channel = new RssChannel ();  			textInput = null;  			image = null;  			cloud = null;  			source = null;  			enclosure = null;  			category = null;  			item = null;  			break;  		case "image":  			image = new RssImage ();  			channel.Image = image;  			break;  		case "textinput":  			textInput = new RssTextInput ();  			channel.TextInput = textInput;  			break;  		case "cloud":  			pushElement = false;  			cloud = new RssCloud ();  			channel.Cloud = cloud;  			for (int i = 0; i < reader.AttributeCount; i++) {  				reader.MoveToAttribute (i);  				switch (reader.Name.ToLower ()) {  				case "domain":  					cloud.Domain = reader.Value;  					break;  				case "port":  					try {  						cloud.Port = ushort.Parse (reader.Value);  					}  					catch (Exception e) {  						exceptions.Add (e);  					}  					break;  				case "path":  					cloud.Path = reader.Value;  					break;  				case "registerprocedure":  					cloud.RegisterProcedure = reader.Value;  					break;  				case "protocol":  					switch (reader.Value.ToLower ()) {  					case "xml-rpc":  						cloud.Protocol = RssCloudProtocol.XmlRpc;  						break;  					case "soap":  						cloud.Protocol = RssCloudProtocol.Soap;  						break;  					case "http-post":  						cloud.Protocol = RssCloudProtocol.HttpPost;  						break;  					default:  						cloud.Protocol = RssCloudProtocol.Empty;  						break;  					}  					break;  				}  			}  			break;  		case "rss":  			for (int i = 0; i < reader.AttributeCount; i++) {  				reader.MoveToAttribute (i);  				if (reader.Name.ToLower () == "version")  					switch (reader.Value) {  					case "0.91":  						rssVersion = RssVersion.RSS091;  						break;  					case "0.92":  						rssVersion = RssVersion.RSS092;  						break;  					case "2.0":  						rssVersion = RssVersion.RSS20;  						break;  					default:  						rssVersion = RssVersion.NotSupported;  						break;  					}  			}  			break;  		case "rdf":  			for (int i = 0; i < reader.AttributeCount; i++) {  				reader.MoveToAttribute (i);  				if (reader.Name.ToLower () == "version")  					switch (reader.Value) {  					case "0.90":  						rssVersion = RssVersion.RSS090;  						break;  					case "1.0":  						rssVersion = RssVersion.RSS10;  						break;  					default:  						rssVersion = RssVersion.NotSupported;  						break;  					}  			}  			break;  		}  		if (pushElement)  			xmlNodeStack.Push (readerName);  		break;  	}  	case XmlNodeType.EndElement: {  		if (xmlNodeStack.Count == 1)  			break;  		string childElementName = (string)xmlNodeStack.Pop ();  		string parentElementName = (string)xmlNodeStack.Peek ();  		switch (childElementName) // current element  		{  		// item classes  		case "item":  			rssElement = item;  			readData = false;  			break;  		case "source":  			source.Name = elementText.ToString ();  			rssElement = source;  			readData = false;  			break;  		case "enclosure":  			rssElement = enclosure;  			readData = false;  			break;  		case "guid":  			guid.Name = elementText.ToString ();  			rssElement = guid;  			readData = false;  			break;  		case "category":  			// parent is either item or channel  			category.Name = elementText.ToString ();  			rssElement = category;  			readData = false;  			break;  		// channel classes  		case "channel":  			if (wroteChannel)  				wroteChannel = false;  			else {  				wroteChannel = true;  				rssElement = channel;  				readData = false;  			}  			break;  		case "textinput":  			rssElement = textInput;  			readData = false;  			break;  		case "image":  			rssElement = image;  			readData = false;  			break;  		case "cloud":  			rssElement = cloud;  			readData = false;  			break;  		}  		switch (parentElementName) // parent element  		{  		case "item":  			switch (childElementName) {  			case "title":  				item.Title = elementText.ToString ();  				break;  			case "link":  				item.Link = new Uri (elementText.ToString ());  				break;  			case "description":  				item.Description = elementText.ToString ();  				break;  			case "content:encoded":  				item.Content = elementText.ToString ();  				break;  			case "author":  			case "dc:creator":  				item.Author = elementText.ToString ();  				break;  			case "comments":  				item.Comments = elementText.ToString ();  				break;  			case "dc:date":  			case "pubdate":  				try {  					item.PubDate = DateTime.Parse (elementText.ToString ());  				}  				catch (Exception e) {  					try {  						string tmp = elementText.ToString ();  						tmp = tmp.Substring (0' tmp.Length - 5);  						tmp += "GMT";  						item.PubDate = DateTime.Parse (tmp);  					}  					catch {  						exceptions.Add (e);  					}  				}  				break;  			}  			break;  		case "channel":  			switch (childElementName) {  			case "title":  				channel.Title = elementText.ToString ();  				break;  			case "link":  				try {  					channel.Link = new Uri (elementText.ToString ());  				}  				catch (Exception e) {  					exceptions.Add (e);  				}  				break;  			case "description":  				channel.Description = elementText.ToString ();  				break;  			case "language":  				channel.Language = elementText.ToString ();  				break;  			case "copyright":  				channel.Copyright = elementText.ToString ();  				break;  			case "managingeditor":  				channel.ManagingEditor = elementText.ToString ();  				break;  			case "webmaster":  				channel.WebMaster = elementText.ToString ();  				break;  			case "rating":  				channel.Rating = elementText.ToString ();  				break;  			case "pubdate":  				try {  					channel.PubDate = DateTime.Parse (elementText.ToString ());  				}  				catch (Exception e) {  					exceptions.Add (e);  				}  				break;  			case "lastbuilddate":  				try {  					channel.LastBuildDate = DateTime.Parse (elementText.ToString ());  				}  				catch (Exception e) {  					exceptions.Add (e);  				}  				break;  			case "generator":  				channel.Generator = elementText.ToString ();  				break;  			case "docs":  				channel.Docs = elementText.ToString ();  				break;  			case "ttl":  				try {  					channel.TimeToLive = int.Parse (elementText.ToString ());  				}  				catch (Exception e) {  					exceptions.Add (e);  				}  				break;  			}  			break;  		case "image":  			switch (childElementName) {  			case "url":  				try {  					image.Url = new Uri (elementText.ToString ());  				}  				catch (Exception e) {  					exceptions.Add (e);  				}  				break;  			case "title":  				image.Title = elementText.ToString ();  				break;  			case "link":  				try {  					image.Link = new Uri (elementText.ToString ());  				}  				catch (Exception e) {  					exceptions.Add (e);  				}  				break;  			case "description":  				image.Description = elementText.ToString ();  				break;  			case "width":  				try {  					image.Width = Byte.Parse (elementText.ToString ());  				}  				catch (Exception e) {  					exceptions.Add (e);  				}  				break;  			case "height":  				try {  					image.Height = Byte.Parse (elementText.ToString ());  				}  				catch (Exception e) {  					exceptions.Add (e);  				}  				break;  			}  			break;  		case "textinput":  			switch (childElementName) {  			case "title":  				textInput.Title = elementText.ToString ();  				break;  			case "description":  				textInput.Description = elementText.ToString ();  				break;  			case "name":  				textInput.Name = elementText.ToString ();  				break;  			case "link":  				try {  					textInput.Link = new Uri (elementText.ToString ());  				}  				catch (Exception e) {  					exceptions.Add (e);  				}  				break;  			}  			break;  		case "skipdays":  			if (childElementName == "day")  				switch (elementText.ToString ().ToLower ()) {  				case "monday":  					channel.SkipDays [0] = true;  					break;  				case "tuesday":  					channel.SkipDays [1] = true;  					break;  				case "wednesday":  					channel.SkipDays [2] = true;  					break;  				case "thursday":  					channel.SkipDays [3] = true;  					break;  				case "friday":  					channel.SkipDays [4] = true;  					break;  				case "saturday":  					channel.SkipDays [5] = true;  					break;  				case "sunday":  					channel.SkipDays [6] = true;  					break;  				}  			break;  		case "skiphours":  			if (childElementName == "hour")  				channel.SkipHours [Byte.Parse (elementText.ToString ().ToLower ())] = true;  			break;  		}  		break;  	}  	case XmlNodeType.Text:  		elementText.Append (reader.Value);  		break;  	case XmlNodeType.CDATA:  		elementText.Append (reader.Value);  		break;  	}  }  
Magic Number,Rss,RssReader,C:\repos\dblock_sncore\Rss.Net\RssReader.cs,Read,The following statement contains a magic number: if (readData) {  	string readerName = reader.Name.ToLower ();  	switch (reader.NodeType) {  	case XmlNodeType.Element: {  		if (reader.IsEmptyElement)  			break;  		elementText = new StringBuilder ();  		switch (readerName) {  		case "item":  			// is this the end of the channel element? (absence of </channel> before <item>)  			if (!wroteChannel) {  				wroteChannel = true;  				rssElement = channel;  				// return RssChannel  				readData = false;  			}  			item = new RssItem ();  			// create new RssItem  			channel.Items.Add (item);  			break;  		case "source":  			source = new RssSource ();  			if (item != null)  				item.Source = source;  			for (int i = 0; i < reader.AttributeCount; i++) {  				reader.MoveToAttribute (i);  				switch (reader.Name.ToLower ()) {  				case "url":  					try {  						source.Url = new Uri (reader.Value);  					}  					catch (Exception e) {  						exceptions.Add (e);  					}  					break;  				}  			}  			break;  		case "enclosure":  			enclosure = new RssEnclosure ();  			if (item != null)  				item.Enclosure = enclosure;  			for (int i = 0; i < reader.AttributeCount; i++) {  				reader.MoveToAttribute (i);  				switch (reader.Name.ToLower ()) {  				case "url":  					try {  						enclosure.Url = new Uri (reader.Value);  					}  					catch (Exception e) {  						exceptions.Add (e);  					}  					break;  				case "length":  					try {  						enclosure.Length = int.Parse (reader.Value);  					}  					catch (Exception e) {  						exceptions.Add (e);  					}  					break;  				case "type":  					enclosure.Type = reader.Value;  					break;  				}  			}  			break;  		case "guid":  			guid = new RssGuid ();  			if (item != null)  				item.Guid = guid;  			for (int i = 0; i < reader.AttributeCount; i++) {  				reader.MoveToAttribute (i);  				switch (reader.Name.ToLower ()) {  				case "ispermalink":  					try {  						guid.PermaLink = bool.Parse (reader.Value);  					}  					catch (Exception e) {  						exceptions.Add (e);  					}  					break;  				}  			}  			break;  		case "category":  			category = new RssCategory ();  			if ((string)xmlNodeStack.Peek () == "channel")  				channel.Categories.Add (category);  			else if (item != null)  				item.Categories.Add (category);  			for (int i = 0; i < reader.AttributeCount; i++) {  				reader.MoveToAttribute (i);  				switch (reader.Name.ToLower ()) {  				case "url":  					goto case "domain";  				case "domain":  					category.Domain = reader.Value;  					break;  				}  			}  			break;  		case "channel":  			channel = new RssChannel ();  			textInput = null;  			image = null;  			cloud = null;  			source = null;  			enclosure = null;  			category = null;  			item = null;  			break;  		case "image":  			image = new RssImage ();  			channel.Image = image;  			break;  		case "textinput":  			textInput = new RssTextInput ();  			channel.TextInput = textInput;  			break;  		case "cloud":  			pushElement = false;  			cloud = new RssCloud ();  			channel.Cloud = cloud;  			for (int i = 0; i < reader.AttributeCount; i++) {  				reader.MoveToAttribute (i);  				switch (reader.Name.ToLower ()) {  				case "domain":  					cloud.Domain = reader.Value;  					break;  				case "port":  					try {  						cloud.Port = ushort.Parse (reader.Value);  					}  					catch (Exception e) {  						exceptions.Add (e);  					}  					break;  				case "path":  					cloud.Path = reader.Value;  					break;  				case "registerprocedure":  					cloud.RegisterProcedure = reader.Value;  					break;  				case "protocol":  					switch (reader.Value.ToLower ()) {  					case "xml-rpc":  						cloud.Protocol = RssCloudProtocol.XmlRpc;  						break;  					case "soap":  						cloud.Protocol = RssCloudProtocol.Soap;  						break;  					case "http-post":  						cloud.Protocol = RssCloudProtocol.HttpPost;  						break;  					default:  						cloud.Protocol = RssCloudProtocol.Empty;  						break;  					}  					break;  				}  			}  			break;  		case "rss":  			for (int i = 0; i < reader.AttributeCount; i++) {  				reader.MoveToAttribute (i);  				if (reader.Name.ToLower () == "version")  					switch (reader.Value) {  					case "0.91":  						rssVersion = RssVersion.RSS091;  						break;  					case "0.92":  						rssVersion = RssVersion.RSS092;  						break;  					case "2.0":  						rssVersion = RssVersion.RSS20;  						break;  					default:  						rssVersion = RssVersion.NotSupported;  						break;  					}  			}  			break;  		case "rdf":  			for (int i = 0; i < reader.AttributeCount; i++) {  				reader.MoveToAttribute (i);  				if (reader.Name.ToLower () == "version")  					switch (reader.Value) {  					case "0.90":  						rssVersion = RssVersion.RSS090;  						break;  					case "1.0":  						rssVersion = RssVersion.RSS10;  						break;  					default:  						rssVersion = RssVersion.NotSupported;  						break;  					}  			}  			break;  		}  		if (pushElement)  			xmlNodeStack.Push (readerName);  		break;  	}  	case XmlNodeType.EndElement: {  		if (xmlNodeStack.Count == 1)  			break;  		string childElementName = (string)xmlNodeStack.Pop ();  		string parentElementName = (string)xmlNodeStack.Peek ();  		switch (childElementName) // current element  		{  		// item classes  		case "item":  			rssElement = item;  			readData = false;  			break;  		case "source":  			source.Name = elementText.ToString ();  			rssElement = source;  			readData = false;  			break;  		case "enclosure":  			rssElement = enclosure;  			readData = false;  			break;  		case "guid":  			guid.Name = elementText.ToString ();  			rssElement = guid;  			readData = false;  			break;  		case "category":  			// parent is either item or channel  			category.Name = elementText.ToString ();  			rssElement = category;  			readData = false;  			break;  		// channel classes  		case "channel":  			if (wroteChannel)  				wroteChannel = false;  			else {  				wroteChannel = true;  				rssElement = channel;  				readData = false;  			}  			break;  		case "textinput":  			rssElement = textInput;  			readData = false;  			break;  		case "image":  			rssElement = image;  			readData = false;  			break;  		case "cloud":  			rssElement = cloud;  			readData = false;  			break;  		}  		switch (parentElementName) // parent element  		{  		case "item":  			switch (childElementName) {  			case "title":  				item.Title = elementText.ToString ();  				break;  			case "link":  				item.Link = new Uri (elementText.ToString ());  				break;  			case "description":  				item.Description = elementText.ToString ();  				break;  			case "content:encoded":  				item.Content = elementText.ToString ();  				break;  			case "author":  			case "dc:creator":  				item.Author = elementText.ToString ();  				break;  			case "comments":  				item.Comments = elementText.ToString ();  				break;  			case "dc:date":  			case "pubdate":  				try {  					item.PubDate = DateTime.Parse (elementText.ToString ());  				}  				catch (Exception e) {  					try {  						string tmp = elementText.ToString ();  						tmp = tmp.Substring (0' tmp.Length - 5);  						tmp += "GMT";  						item.PubDate = DateTime.Parse (tmp);  					}  					catch {  						exceptions.Add (e);  					}  				}  				break;  			}  			break;  		case "channel":  			switch (childElementName) {  			case "title":  				channel.Title = elementText.ToString ();  				break;  			case "link":  				try {  					channel.Link = new Uri (elementText.ToString ());  				}  				catch (Exception e) {  					exceptions.Add (e);  				}  				break;  			case "description":  				channel.Description = elementText.ToString ();  				break;  			case "language":  				channel.Language = elementText.ToString ();  				break;  			case "copyright":  				channel.Copyright = elementText.ToString ();  				break;  			case "managingeditor":  				channel.ManagingEditor = elementText.ToString ();  				break;  			case "webmaster":  				channel.WebMaster = elementText.ToString ();  				break;  			case "rating":  				channel.Rating = elementText.ToString ();  				break;  			case "pubdate":  				try {  					channel.PubDate = DateTime.Parse (elementText.ToString ());  				}  				catch (Exception e) {  					exceptions.Add (e);  				}  				break;  			case "lastbuilddate":  				try {  					channel.LastBuildDate = DateTime.Parse (elementText.ToString ());  				}  				catch (Exception e) {  					exceptions.Add (e);  				}  				break;  			case "generator":  				channel.Generator = elementText.ToString ();  				break;  			case "docs":  				channel.Docs = elementText.ToString ();  				break;  			case "ttl":  				try {  					channel.TimeToLive = int.Parse (elementText.ToString ());  				}  				catch (Exception e) {  					exceptions.Add (e);  				}  				break;  			}  			break;  		case "image":  			switch (childElementName) {  			case "url":  				try {  					image.Url = new Uri (elementText.ToString ());  				}  				catch (Exception e) {  					exceptions.Add (e);  				}  				break;  			case "title":  				image.Title = elementText.ToString ();  				break;  			case "link":  				try {  					image.Link = new Uri (elementText.ToString ());  				}  				catch (Exception e) {  					exceptions.Add (e);  				}  				break;  			case "description":  				image.Description = elementText.ToString ();  				break;  			case "width":  				try {  					image.Width = Byte.Parse (elementText.ToString ());  				}  				catch (Exception e) {  					exceptions.Add (e);  				}  				break;  			case "height":  				try {  					image.Height = Byte.Parse (elementText.ToString ());  				}  				catch (Exception e) {  					exceptions.Add (e);  				}  				break;  			}  			break;  		case "textinput":  			switch (childElementName) {  			case "title":  				textInput.Title = elementText.ToString ();  				break;  			case "description":  				textInput.Description = elementText.ToString ();  				break;  			case "name":  				textInput.Name = elementText.ToString ();  				break;  			case "link":  				try {  					textInput.Link = new Uri (elementText.ToString ());  				}  				catch (Exception e) {  					exceptions.Add (e);  				}  				break;  			}  			break;  		case "skipdays":  			if (childElementName == "day")  				switch (elementText.ToString ().ToLower ()) {  				case "monday":  					channel.SkipDays [0] = true;  					break;  				case "tuesday":  					channel.SkipDays [1] = true;  					break;  				case "wednesday":  					channel.SkipDays [2] = true;  					break;  				case "thursday":  					channel.SkipDays [3] = true;  					break;  				case "friday":  					channel.SkipDays [4] = true;  					break;  				case "saturday":  					channel.SkipDays [5] = true;  					break;  				case "sunday":  					channel.SkipDays [6] = true;  					break;  				}  			break;  		case "skiphours":  			if (childElementName == "hour")  				channel.SkipHours [Byte.Parse (elementText.ToString ().ToLower ())] = true;  			break;  		}  		break;  	}  	case XmlNodeType.Text:  		elementText.Append (reader.Value);  		break;  	case XmlNodeType.CDATA:  		elementText.Append (reader.Value);  		break;  	}  }  
Magic Number,Rss,RssReader,C:\repos\dblock_sncore\Rss.Net\RssReader.cs,Read,The following statement contains a magic number: if (readData) {  	string readerName = reader.Name.ToLower ();  	switch (reader.NodeType) {  	case XmlNodeType.Element: {  		if (reader.IsEmptyElement)  			break;  		elementText = new StringBuilder ();  		switch (readerName) {  		case "item":  			// is this the end of the channel element? (absence of </channel> before <item>)  			if (!wroteChannel) {  				wroteChannel = true;  				rssElement = channel;  				// return RssChannel  				readData = false;  			}  			item = new RssItem ();  			// create new RssItem  			channel.Items.Add (item);  			break;  		case "source":  			source = new RssSource ();  			if (item != null)  				item.Source = source;  			for (int i = 0; i < reader.AttributeCount; i++) {  				reader.MoveToAttribute (i);  				switch (reader.Name.ToLower ()) {  				case "url":  					try {  						source.Url = new Uri (reader.Value);  					}  					catch (Exception e) {  						exceptions.Add (e);  					}  					break;  				}  			}  			break;  		case "enclosure":  			enclosure = new RssEnclosure ();  			if (item != null)  				item.Enclosure = enclosure;  			for (int i = 0; i < reader.AttributeCount; i++) {  				reader.MoveToAttribute (i);  				switch (reader.Name.ToLower ()) {  				case "url":  					try {  						enclosure.Url = new Uri (reader.Value);  					}  					catch (Exception e) {  						exceptions.Add (e);  					}  					break;  				case "length":  					try {  						enclosure.Length = int.Parse (reader.Value);  					}  					catch (Exception e) {  						exceptions.Add (e);  					}  					break;  				case "type":  					enclosure.Type = reader.Value;  					break;  				}  			}  			break;  		case "guid":  			guid = new RssGuid ();  			if (item != null)  				item.Guid = guid;  			for (int i = 0; i < reader.AttributeCount; i++) {  				reader.MoveToAttribute (i);  				switch (reader.Name.ToLower ()) {  				case "ispermalink":  					try {  						guid.PermaLink = bool.Parse (reader.Value);  					}  					catch (Exception e) {  						exceptions.Add (e);  					}  					break;  				}  			}  			break;  		case "category":  			category = new RssCategory ();  			if ((string)xmlNodeStack.Peek () == "channel")  				channel.Categories.Add (category);  			else if (item != null)  				item.Categories.Add (category);  			for (int i = 0; i < reader.AttributeCount; i++) {  				reader.MoveToAttribute (i);  				switch (reader.Name.ToLower ()) {  				case "url":  					goto case "domain";  				case "domain":  					category.Domain = reader.Value;  					break;  				}  			}  			break;  		case "channel":  			channel = new RssChannel ();  			textInput = null;  			image = null;  			cloud = null;  			source = null;  			enclosure = null;  			category = null;  			item = null;  			break;  		case "image":  			image = new RssImage ();  			channel.Image = image;  			break;  		case "textinput":  			textInput = new RssTextInput ();  			channel.TextInput = textInput;  			break;  		case "cloud":  			pushElement = false;  			cloud = new RssCloud ();  			channel.Cloud = cloud;  			for (int i = 0; i < reader.AttributeCount; i++) {  				reader.MoveToAttribute (i);  				switch (reader.Name.ToLower ()) {  				case "domain":  					cloud.Domain = reader.Value;  					break;  				case "port":  					try {  						cloud.Port = ushort.Parse (reader.Value);  					}  					catch (Exception e) {  						exceptions.Add (e);  					}  					break;  				case "path":  					cloud.Path = reader.Value;  					break;  				case "registerprocedure":  					cloud.RegisterProcedure = reader.Value;  					break;  				case "protocol":  					switch (reader.Value.ToLower ()) {  					case "xml-rpc":  						cloud.Protocol = RssCloudProtocol.XmlRpc;  						break;  					case "soap":  						cloud.Protocol = RssCloudProtocol.Soap;  						break;  					case "http-post":  						cloud.Protocol = RssCloudProtocol.HttpPost;  						break;  					default:  						cloud.Protocol = RssCloudProtocol.Empty;  						break;  					}  					break;  				}  			}  			break;  		case "rss":  			for (int i = 0; i < reader.AttributeCount; i++) {  				reader.MoveToAttribute (i);  				if (reader.Name.ToLower () == "version")  					switch (reader.Value) {  					case "0.91":  						rssVersion = RssVersion.RSS091;  						break;  					case "0.92":  						rssVersion = RssVersion.RSS092;  						break;  					case "2.0":  						rssVersion = RssVersion.RSS20;  						break;  					default:  						rssVersion = RssVersion.NotSupported;  						break;  					}  			}  			break;  		case "rdf":  			for (int i = 0; i < reader.AttributeCount; i++) {  				reader.MoveToAttribute (i);  				if (reader.Name.ToLower () == "version")  					switch (reader.Value) {  					case "0.90":  						rssVersion = RssVersion.RSS090;  						break;  					case "1.0":  						rssVersion = RssVersion.RSS10;  						break;  					default:  						rssVersion = RssVersion.NotSupported;  						break;  					}  			}  			break;  		}  		if (pushElement)  			xmlNodeStack.Push (readerName);  		break;  	}  	case XmlNodeType.EndElement: {  		if (xmlNodeStack.Count == 1)  			break;  		string childElementName = (string)xmlNodeStack.Pop ();  		string parentElementName = (string)xmlNodeStack.Peek ();  		switch (childElementName) // current element  		{  		// item classes  		case "item":  			rssElement = item;  			readData = false;  			break;  		case "source":  			source.Name = elementText.ToString ();  			rssElement = source;  			readData = false;  			break;  		case "enclosure":  			rssElement = enclosure;  			readData = false;  			break;  		case "guid":  			guid.Name = elementText.ToString ();  			rssElement = guid;  			readData = false;  			break;  		case "category":  			// parent is either item or channel  			category.Name = elementText.ToString ();  			rssElement = category;  			readData = false;  			break;  		// channel classes  		case "channel":  			if (wroteChannel)  				wroteChannel = false;  			else {  				wroteChannel = true;  				rssElement = channel;  				readData = false;  			}  			break;  		case "textinput":  			rssElement = textInput;  			readData = false;  			break;  		case "image":  			rssElement = image;  			readData = false;  			break;  		case "cloud":  			rssElement = cloud;  			readData = false;  			break;  		}  		switch (parentElementName) // parent element  		{  		case "item":  			switch (childElementName) {  			case "title":  				item.Title = elementText.ToString ();  				break;  			case "link":  				item.Link = new Uri (elementText.ToString ());  				break;  			case "description":  				item.Description = elementText.ToString ();  				break;  			case "content:encoded":  				item.Content = elementText.ToString ();  				break;  			case "author":  			case "dc:creator":  				item.Author = elementText.ToString ();  				break;  			case "comments":  				item.Comments = elementText.ToString ();  				break;  			case "dc:date":  			case "pubdate":  				try {  					item.PubDate = DateTime.Parse (elementText.ToString ());  				}  				catch (Exception e) {  					try {  						string tmp = elementText.ToString ();  						tmp = tmp.Substring (0' tmp.Length - 5);  						tmp += "GMT";  						item.PubDate = DateTime.Parse (tmp);  					}  					catch {  						exceptions.Add (e);  					}  				}  				break;  			}  			break;  		case "channel":  			switch (childElementName) {  			case "title":  				channel.Title = elementText.ToString ();  				break;  			case "link":  				try {  					channel.Link = new Uri (elementText.ToString ());  				}  				catch (Exception e) {  					exceptions.Add (e);  				}  				break;  			case "description":  				channel.Description = elementText.ToString ();  				break;  			case "language":  				channel.Language = elementText.ToString ();  				break;  			case "copyright":  				channel.Copyright = elementText.ToString ();  				break;  			case "managingeditor":  				channel.ManagingEditor = elementText.ToString ();  				break;  			case "webmaster":  				channel.WebMaster = elementText.ToString ();  				break;  			case "rating":  				channel.Rating = elementText.ToString ();  				break;  			case "pubdate":  				try {  					channel.PubDate = DateTime.Parse (elementText.ToString ());  				}  				catch (Exception e) {  					exceptions.Add (e);  				}  				break;  			case "lastbuilddate":  				try {  					channel.LastBuildDate = DateTime.Parse (elementText.ToString ());  				}  				catch (Exception e) {  					exceptions.Add (e);  				}  				break;  			case "generator":  				channel.Generator = elementText.ToString ();  				break;  			case "docs":  				channel.Docs = elementText.ToString ();  				break;  			case "ttl":  				try {  					channel.TimeToLive = int.Parse (elementText.ToString ());  				}  				catch (Exception e) {  					exceptions.Add (e);  				}  				break;  			}  			break;  		case "image":  			switch (childElementName) {  			case "url":  				try {  					image.Url = new Uri (elementText.ToString ());  				}  				catch (Exception e) {  					exceptions.Add (e);  				}  				break;  			case "title":  				image.Title = elementText.ToString ();  				break;  			case "link":  				try {  					image.Link = new Uri (elementText.ToString ());  				}  				catch (Exception e) {  					exceptions.Add (e);  				}  				break;  			case "description":  				image.Description = elementText.ToString ();  				break;  			case "width":  				try {  					image.Width = Byte.Parse (elementText.ToString ());  				}  				catch (Exception e) {  					exceptions.Add (e);  				}  				break;  			case "height":  				try {  					image.Height = Byte.Parse (elementText.ToString ());  				}  				catch (Exception e) {  					exceptions.Add (e);  				}  				break;  			}  			break;  		case "textinput":  			switch (childElementName) {  			case "title":  				textInput.Title = elementText.ToString ();  				break;  			case "description":  				textInput.Description = elementText.ToString ();  				break;  			case "name":  				textInput.Name = elementText.ToString ();  				break;  			case "link":  				try {  					textInput.Link = new Uri (elementText.ToString ());  				}  				catch (Exception e) {  					exceptions.Add (e);  				}  				break;  			}  			break;  		case "skipdays":  			if (childElementName == "day")  				switch (elementText.ToString ().ToLower ()) {  				case "monday":  					channel.SkipDays [0] = true;  					break;  				case "tuesday":  					channel.SkipDays [1] = true;  					break;  				case "wednesday":  					channel.SkipDays [2] = true;  					break;  				case "thursday":  					channel.SkipDays [3] = true;  					break;  				case "friday":  					channel.SkipDays [4] = true;  					break;  				case "saturday":  					channel.SkipDays [5] = true;  					break;  				case "sunday":  					channel.SkipDays [6] = true;  					break;  				}  			break;  		case "skiphours":  			if (childElementName == "hour")  				channel.SkipHours [Byte.Parse (elementText.ToString ().ToLower ())] = true;  			break;  		}  		break;  	}  	case XmlNodeType.Text:  		elementText.Append (reader.Value);  		break;  	case XmlNodeType.CDATA:  		elementText.Append (reader.Value);  		break;  	}  }  
Magic Number,Rss,RssReader,C:\repos\dblock_sncore\Rss.Net\RssReader.cs,Read,The following statement contains a magic number: if (readData) {  	string readerName = reader.Name.ToLower ();  	switch (reader.NodeType) {  	case XmlNodeType.Element: {  		if (reader.IsEmptyElement)  			break;  		elementText = new StringBuilder ();  		switch (readerName) {  		case "item":  			// is this the end of the channel element? (absence of </channel> before <item>)  			if (!wroteChannel) {  				wroteChannel = true;  				rssElement = channel;  				// return RssChannel  				readData = false;  			}  			item = new RssItem ();  			// create new RssItem  			channel.Items.Add (item);  			break;  		case "source":  			source = new RssSource ();  			if (item != null)  				item.Source = source;  			for (int i = 0; i < reader.AttributeCount; i++) {  				reader.MoveToAttribute (i);  				switch (reader.Name.ToLower ()) {  				case "url":  					try {  						source.Url = new Uri (reader.Value);  					}  					catch (Exception e) {  						exceptions.Add (e);  					}  					break;  				}  			}  			break;  		case "enclosure":  			enclosure = new RssEnclosure ();  			if (item != null)  				item.Enclosure = enclosure;  			for (int i = 0; i < reader.AttributeCount; i++) {  				reader.MoveToAttribute (i);  				switch (reader.Name.ToLower ()) {  				case "url":  					try {  						enclosure.Url = new Uri (reader.Value);  					}  					catch (Exception e) {  						exceptions.Add (e);  					}  					break;  				case "length":  					try {  						enclosure.Length = int.Parse (reader.Value);  					}  					catch (Exception e) {  						exceptions.Add (e);  					}  					break;  				case "type":  					enclosure.Type = reader.Value;  					break;  				}  			}  			break;  		case "guid":  			guid = new RssGuid ();  			if (item != null)  				item.Guid = guid;  			for (int i = 0; i < reader.AttributeCount; i++) {  				reader.MoveToAttribute (i);  				switch (reader.Name.ToLower ()) {  				case "ispermalink":  					try {  						guid.PermaLink = bool.Parse (reader.Value);  					}  					catch (Exception e) {  						exceptions.Add (e);  					}  					break;  				}  			}  			break;  		case "category":  			category = new RssCategory ();  			if ((string)xmlNodeStack.Peek () == "channel")  				channel.Categories.Add (category);  			else if (item != null)  				item.Categories.Add (category);  			for (int i = 0; i < reader.AttributeCount; i++) {  				reader.MoveToAttribute (i);  				switch (reader.Name.ToLower ()) {  				case "url":  					goto case "domain";  				case "domain":  					category.Domain = reader.Value;  					break;  				}  			}  			break;  		case "channel":  			channel = new RssChannel ();  			textInput = null;  			image = null;  			cloud = null;  			source = null;  			enclosure = null;  			category = null;  			item = null;  			break;  		case "image":  			image = new RssImage ();  			channel.Image = image;  			break;  		case "textinput":  			textInput = new RssTextInput ();  			channel.TextInput = textInput;  			break;  		case "cloud":  			pushElement = false;  			cloud = new RssCloud ();  			channel.Cloud = cloud;  			for (int i = 0; i < reader.AttributeCount; i++) {  				reader.MoveToAttribute (i);  				switch (reader.Name.ToLower ()) {  				case "domain":  					cloud.Domain = reader.Value;  					break;  				case "port":  					try {  						cloud.Port = ushort.Parse (reader.Value);  					}  					catch (Exception e) {  						exceptions.Add (e);  					}  					break;  				case "path":  					cloud.Path = reader.Value;  					break;  				case "registerprocedure":  					cloud.RegisterProcedure = reader.Value;  					break;  				case "protocol":  					switch (reader.Value.ToLower ()) {  					case "xml-rpc":  						cloud.Protocol = RssCloudProtocol.XmlRpc;  						break;  					case "soap":  						cloud.Protocol = RssCloudProtocol.Soap;  						break;  					case "http-post":  						cloud.Protocol = RssCloudProtocol.HttpPost;  						break;  					default:  						cloud.Protocol = RssCloudProtocol.Empty;  						break;  					}  					break;  				}  			}  			break;  		case "rss":  			for (int i = 0; i < reader.AttributeCount; i++) {  				reader.MoveToAttribute (i);  				if (reader.Name.ToLower () == "version")  					switch (reader.Value) {  					case "0.91":  						rssVersion = RssVersion.RSS091;  						break;  					case "0.92":  						rssVersion = RssVersion.RSS092;  						break;  					case "2.0":  						rssVersion = RssVersion.RSS20;  						break;  					default:  						rssVersion = RssVersion.NotSupported;  						break;  					}  			}  			break;  		case "rdf":  			for (int i = 0; i < reader.AttributeCount; i++) {  				reader.MoveToAttribute (i);  				if (reader.Name.ToLower () == "version")  					switch (reader.Value) {  					case "0.90":  						rssVersion = RssVersion.RSS090;  						break;  					case "1.0":  						rssVersion = RssVersion.RSS10;  						break;  					default:  						rssVersion = RssVersion.NotSupported;  						break;  					}  			}  			break;  		}  		if (pushElement)  			xmlNodeStack.Push (readerName);  		break;  	}  	case XmlNodeType.EndElement: {  		if (xmlNodeStack.Count == 1)  			break;  		string childElementName = (string)xmlNodeStack.Pop ();  		string parentElementName = (string)xmlNodeStack.Peek ();  		switch (childElementName) // current element  		{  		// item classes  		case "item":  			rssElement = item;  			readData = false;  			break;  		case "source":  			source.Name = elementText.ToString ();  			rssElement = source;  			readData = false;  			break;  		case "enclosure":  			rssElement = enclosure;  			readData = false;  			break;  		case "guid":  			guid.Name = elementText.ToString ();  			rssElement = guid;  			readData = false;  			break;  		case "category":  			// parent is either item or channel  			category.Name = elementText.ToString ();  			rssElement = category;  			readData = false;  			break;  		// channel classes  		case "channel":  			if (wroteChannel)  				wroteChannel = false;  			else {  				wroteChannel = true;  				rssElement = channel;  				readData = false;  			}  			break;  		case "textinput":  			rssElement = textInput;  			readData = false;  			break;  		case "image":  			rssElement = image;  			readData = false;  			break;  		case "cloud":  			rssElement = cloud;  			readData = false;  			break;  		}  		switch (parentElementName) // parent element  		{  		case "item":  			switch (childElementName) {  			case "title":  				item.Title = elementText.ToString ();  				break;  			case "link":  				item.Link = new Uri (elementText.ToString ());  				break;  			case "description":  				item.Description = elementText.ToString ();  				break;  			case "content:encoded":  				item.Content = elementText.ToString ();  				break;  			case "author":  			case "dc:creator":  				item.Author = elementText.ToString ();  				break;  			case "comments":  				item.Comments = elementText.ToString ();  				break;  			case "dc:date":  			case "pubdate":  				try {  					item.PubDate = DateTime.Parse (elementText.ToString ());  				}  				catch (Exception e) {  					try {  						string tmp = elementText.ToString ();  						tmp = tmp.Substring (0' tmp.Length - 5);  						tmp += "GMT";  						item.PubDate = DateTime.Parse (tmp);  					}  					catch {  						exceptions.Add (e);  					}  				}  				break;  			}  			break;  		case "channel":  			switch (childElementName) {  			case "title":  				channel.Title = elementText.ToString ();  				break;  			case "link":  				try {  					channel.Link = new Uri (elementText.ToString ());  				}  				catch (Exception e) {  					exceptions.Add (e);  				}  				break;  			case "description":  				channel.Description = elementText.ToString ();  				break;  			case "language":  				channel.Language = elementText.ToString ();  				break;  			case "copyright":  				channel.Copyright = elementText.ToString ();  				break;  			case "managingeditor":  				channel.ManagingEditor = elementText.ToString ();  				break;  			case "webmaster":  				channel.WebMaster = elementText.ToString ();  				break;  			case "rating":  				channel.Rating = elementText.ToString ();  				break;  			case "pubdate":  				try {  					channel.PubDate = DateTime.Parse (elementText.ToString ());  				}  				catch (Exception e) {  					exceptions.Add (e);  				}  				break;  			case "lastbuilddate":  				try {  					channel.LastBuildDate = DateTime.Parse (elementText.ToString ());  				}  				catch (Exception e) {  					exceptions.Add (e);  				}  				break;  			case "generator":  				channel.Generator = elementText.ToString ();  				break;  			case "docs":  				channel.Docs = elementText.ToString ();  				break;  			case "ttl":  				try {  					channel.TimeToLive = int.Parse (elementText.ToString ());  				}  				catch (Exception e) {  					exceptions.Add (e);  				}  				break;  			}  			break;  		case "image":  			switch (childElementName) {  			case "url":  				try {  					image.Url = new Uri (elementText.ToString ());  				}  				catch (Exception e) {  					exceptions.Add (e);  				}  				break;  			case "title":  				image.Title = elementText.ToString ();  				break;  			case "link":  				try {  					image.Link = new Uri (elementText.ToString ());  				}  				catch (Exception e) {  					exceptions.Add (e);  				}  				break;  			case "description":  				image.Description = elementText.ToString ();  				break;  			case "width":  				try {  					image.Width = Byte.Parse (elementText.ToString ());  				}  				catch (Exception e) {  					exceptions.Add (e);  				}  				break;  			case "height":  				try {  					image.Height = Byte.Parse (elementText.ToString ());  				}  				catch (Exception e) {  					exceptions.Add (e);  				}  				break;  			}  			break;  		case "textinput":  			switch (childElementName) {  			case "title":  				textInput.Title = elementText.ToString ();  				break;  			case "description":  				textInput.Description = elementText.ToString ();  				break;  			case "name":  				textInput.Name = elementText.ToString ();  				break;  			case "link":  				try {  					textInput.Link = new Uri (elementText.ToString ());  				}  				catch (Exception e) {  					exceptions.Add (e);  				}  				break;  			}  			break;  		case "skipdays":  			if (childElementName == "day")  				switch (elementText.ToString ().ToLower ()) {  				case "monday":  					channel.SkipDays [0] = true;  					break;  				case "tuesday":  					channel.SkipDays [1] = true;  					break;  				case "wednesday":  					channel.SkipDays [2] = true;  					break;  				case "thursday":  					channel.SkipDays [3] = true;  					break;  				case "friday":  					channel.SkipDays [4] = true;  					break;  				case "saturday":  					channel.SkipDays [5] = true;  					break;  				case "sunday":  					channel.SkipDays [6] = true;  					break;  				}  			break;  		case "skiphours":  			if (childElementName == "hour")  				channel.SkipHours [Byte.Parse (elementText.ToString ().ToLower ())] = true;  			break;  		}  		break;  	}  	case XmlNodeType.Text:  		elementText.Append (reader.Value);  		break;  	case XmlNodeType.CDATA:  		elementText.Append (reader.Value);  		break;  	}  }  
Magic Number,Rss,RssReader,C:\repos\dblock_sncore\Rss.Net\RssReader.cs,Read,The following statement contains a magic number: switch (reader.NodeType) {  case XmlNodeType.Element: {  	if (reader.IsEmptyElement)  		break;  	elementText = new StringBuilder ();  	switch (readerName) {  	case "item":  		// is this the end of the channel element? (absence of </channel> before <item>)  		if (!wroteChannel) {  			wroteChannel = true;  			rssElement = channel;  			// return RssChannel  			readData = false;  		}  		item = new RssItem ();  		// create new RssItem  		channel.Items.Add (item);  		break;  	case "source":  		source = new RssSource ();  		if (item != null)  			item.Source = source;  		for (int i = 0; i < reader.AttributeCount; i++) {  			reader.MoveToAttribute (i);  			switch (reader.Name.ToLower ()) {  			case "url":  				try {  					source.Url = new Uri (reader.Value);  				}  				catch (Exception e) {  					exceptions.Add (e);  				}  				break;  			}  		}  		break;  	case "enclosure":  		enclosure = new RssEnclosure ();  		if (item != null)  			item.Enclosure = enclosure;  		for (int i = 0; i < reader.AttributeCount; i++) {  			reader.MoveToAttribute (i);  			switch (reader.Name.ToLower ()) {  			case "url":  				try {  					enclosure.Url = new Uri (reader.Value);  				}  				catch (Exception e) {  					exceptions.Add (e);  				}  				break;  			case "length":  				try {  					enclosure.Length = int.Parse (reader.Value);  				}  				catch (Exception e) {  					exceptions.Add (e);  				}  				break;  			case "type":  				enclosure.Type = reader.Value;  				break;  			}  		}  		break;  	case "guid":  		guid = new RssGuid ();  		if (item != null)  			item.Guid = guid;  		for (int i = 0; i < reader.AttributeCount; i++) {  			reader.MoveToAttribute (i);  			switch (reader.Name.ToLower ()) {  			case "ispermalink":  				try {  					guid.PermaLink = bool.Parse (reader.Value);  				}  				catch (Exception e) {  					exceptions.Add (e);  				}  				break;  			}  		}  		break;  	case "category":  		category = new RssCategory ();  		if ((string)xmlNodeStack.Peek () == "channel")  			channel.Categories.Add (category);  		else if (item != null)  			item.Categories.Add (category);  		for (int i = 0; i < reader.AttributeCount; i++) {  			reader.MoveToAttribute (i);  			switch (reader.Name.ToLower ()) {  			case "url":  				goto case "domain";  			case "domain":  				category.Domain = reader.Value;  				break;  			}  		}  		break;  	case "channel":  		channel = new RssChannel ();  		textInput = null;  		image = null;  		cloud = null;  		source = null;  		enclosure = null;  		category = null;  		item = null;  		break;  	case "image":  		image = new RssImage ();  		channel.Image = image;  		break;  	case "textinput":  		textInput = new RssTextInput ();  		channel.TextInput = textInput;  		break;  	case "cloud":  		pushElement = false;  		cloud = new RssCloud ();  		channel.Cloud = cloud;  		for (int i = 0; i < reader.AttributeCount; i++) {  			reader.MoveToAttribute (i);  			switch (reader.Name.ToLower ()) {  			case "domain":  				cloud.Domain = reader.Value;  				break;  			case "port":  				try {  					cloud.Port = ushort.Parse (reader.Value);  				}  				catch (Exception e) {  					exceptions.Add (e);  				}  				break;  			case "path":  				cloud.Path = reader.Value;  				break;  			case "registerprocedure":  				cloud.RegisterProcedure = reader.Value;  				break;  			case "protocol":  				switch (reader.Value.ToLower ()) {  				case "xml-rpc":  					cloud.Protocol = RssCloudProtocol.XmlRpc;  					break;  				case "soap":  					cloud.Protocol = RssCloudProtocol.Soap;  					break;  				case "http-post":  					cloud.Protocol = RssCloudProtocol.HttpPost;  					break;  				default:  					cloud.Protocol = RssCloudProtocol.Empty;  					break;  				}  				break;  			}  		}  		break;  	case "rss":  		for (int i = 0; i < reader.AttributeCount; i++) {  			reader.MoveToAttribute (i);  			if (reader.Name.ToLower () == "version")  				switch (reader.Value) {  				case "0.91":  					rssVersion = RssVersion.RSS091;  					break;  				case "0.92":  					rssVersion = RssVersion.RSS092;  					break;  				case "2.0":  					rssVersion = RssVersion.RSS20;  					break;  				default:  					rssVersion = RssVersion.NotSupported;  					break;  				}  		}  		break;  	case "rdf":  		for (int i = 0; i < reader.AttributeCount; i++) {  			reader.MoveToAttribute (i);  			if (reader.Name.ToLower () == "version")  				switch (reader.Value) {  				case "0.90":  					rssVersion = RssVersion.RSS090;  					break;  				case "1.0":  					rssVersion = RssVersion.RSS10;  					break;  				default:  					rssVersion = RssVersion.NotSupported;  					break;  				}  		}  		break;  	}  	if (pushElement)  		xmlNodeStack.Push (readerName);  	break;  }  case XmlNodeType.EndElement: {  	if (xmlNodeStack.Count == 1)  		break;  	string childElementName = (string)xmlNodeStack.Pop ();  	string parentElementName = (string)xmlNodeStack.Peek ();  	switch (childElementName) // current element  	{  	// item classes  	case "item":  		rssElement = item;  		readData = false;  		break;  	case "source":  		source.Name = elementText.ToString ();  		rssElement = source;  		readData = false;  		break;  	case "enclosure":  		rssElement = enclosure;  		readData = false;  		break;  	case "guid":  		guid.Name = elementText.ToString ();  		rssElement = guid;  		readData = false;  		break;  	case "category":  		// parent is either item or channel  		category.Name = elementText.ToString ();  		rssElement = category;  		readData = false;  		break;  	// channel classes  	case "channel":  		if (wroteChannel)  			wroteChannel = false;  		else {  			wroteChannel = true;  			rssElement = channel;  			readData = false;  		}  		break;  	case "textinput":  		rssElement = textInput;  		readData = false;  		break;  	case "image":  		rssElement = image;  		readData = false;  		break;  	case "cloud":  		rssElement = cloud;  		readData = false;  		break;  	}  	switch (parentElementName) // parent element  	{  	case "item":  		switch (childElementName) {  		case "title":  			item.Title = elementText.ToString ();  			break;  		case "link":  			item.Link = new Uri (elementText.ToString ());  			break;  		case "description":  			item.Description = elementText.ToString ();  			break;  		case "content:encoded":  			item.Content = elementText.ToString ();  			break;  		case "author":  		case "dc:creator":  			item.Author = elementText.ToString ();  			break;  		case "comments":  			item.Comments = elementText.ToString ();  			break;  		case "dc:date":  		case "pubdate":  			try {  				item.PubDate = DateTime.Parse (elementText.ToString ());  			}  			catch (Exception e) {  				try {  					string tmp = elementText.ToString ();  					tmp = tmp.Substring (0' tmp.Length - 5);  					tmp += "GMT";  					item.PubDate = DateTime.Parse (tmp);  				}  				catch {  					exceptions.Add (e);  				}  			}  			break;  		}  		break;  	case "channel":  		switch (childElementName) {  		case "title":  			channel.Title = elementText.ToString ();  			break;  		case "link":  			try {  				channel.Link = new Uri (elementText.ToString ());  			}  			catch (Exception e) {  				exceptions.Add (e);  			}  			break;  		case "description":  			channel.Description = elementText.ToString ();  			break;  		case "language":  			channel.Language = elementText.ToString ();  			break;  		case "copyright":  			channel.Copyright = elementText.ToString ();  			break;  		case "managingeditor":  			channel.ManagingEditor = elementText.ToString ();  			break;  		case "webmaster":  			channel.WebMaster = elementText.ToString ();  			break;  		case "rating":  			channel.Rating = elementText.ToString ();  			break;  		case "pubdate":  			try {  				channel.PubDate = DateTime.Parse (elementText.ToString ());  			}  			catch (Exception e) {  				exceptions.Add (e);  			}  			break;  		case "lastbuilddate":  			try {  				channel.LastBuildDate = DateTime.Parse (elementText.ToString ());  			}  			catch (Exception e) {  				exceptions.Add (e);  			}  			break;  		case "generator":  			channel.Generator = elementText.ToString ();  			break;  		case "docs":  			channel.Docs = elementText.ToString ();  			break;  		case "ttl":  			try {  				channel.TimeToLive = int.Parse (elementText.ToString ());  			}  			catch (Exception e) {  				exceptions.Add (e);  			}  			break;  		}  		break;  	case "image":  		switch (childElementName) {  		case "url":  			try {  				image.Url = new Uri (elementText.ToString ());  			}  			catch (Exception e) {  				exceptions.Add (e);  			}  			break;  		case "title":  			image.Title = elementText.ToString ();  			break;  		case "link":  			try {  				image.Link = new Uri (elementText.ToString ());  			}  			catch (Exception e) {  				exceptions.Add (e);  			}  			break;  		case "description":  			image.Description = elementText.ToString ();  			break;  		case "width":  			try {  				image.Width = Byte.Parse (elementText.ToString ());  			}  			catch (Exception e) {  				exceptions.Add (e);  			}  			break;  		case "height":  			try {  				image.Height = Byte.Parse (elementText.ToString ());  			}  			catch (Exception e) {  				exceptions.Add (e);  			}  			break;  		}  		break;  	case "textinput":  		switch (childElementName) {  		case "title":  			textInput.Title = elementText.ToString ();  			break;  		case "description":  			textInput.Description = elementText.ToString ();  			break;  		case "name":  			textInput.Name = elementText.ToString ();  			break;  		case "link":  			try {  				textInput.Link = new Uri (elementText.ToString ());  			}  			catch (Exception e) {  				exceptions.Add (e);  			}  			break;  		}  		break;  	case "skipdays":  		if (childElementName == "day")  			switch (elementText.ToString ().ToLower ()) {  			case "monday":  				channel.SkipDays [0] = true;  				break;  			case "tuesday":  				channel.SkipDays [1] = true;  				break;  			case "wednesday":  				channel.SkipDays [2] = true;  				break;  			case "thursday":  				channel.SkipDays [3] = true;  				break;  			case "friday":  				channel.SkipDays [4] = true;  				break;  			case "saturday":  				channel.SkipDays [5] = true;  				break;  			case "sunday":  				channel.SkipDays [6] = true;  				break;  			}  		break;  	case "skiphours":  		if (childElementName == "hour")  			channel.SkipHours [Byte.Parse (elementText.ToString ().ToLower ())] = true;  		break;  	}  	break;  }  case XmlNodeType.Text:  	elementText.Append (reader.Value);  	break;  case XmlNodeType.CDATA:  	elementText.Append (reader.Value);  	break;  }  
Magic Number,Rss,RssReader,C:\repos\dblock_sncore\Rss.Net\RssReader.cs,Read,The following statement contains a magic number: switch (reader.NodeType) {  case XmlNodeType.Element: {  	if (reader.IsEmptyElement)  		break;  	elementText = new StringBuilder ();  	switch (readerName) {  	case "item":  		// is this the end of the channel element? (absence of </channel> before <item>)  		if (!wroteChannel) {  			wroteChannel = true;  			rssElement = channel;  			// return RssChannel  			readData = false;  		}  		item = new RssItem ();  		// create new RssItem  		channel.Items.Add (item);  		break;  	case "source":  		source = new RssSource ();  		if (item != null)  			item.Source = source;  		for (int i = 0; i < reader.AttributeCount; i++) {  			reader.MoveToAttribute (i);  			switch (reader.Name.ToLower ()) {  			case "url":  				try {  					source.Url = new Uri (reader.Value);  				}  				catch (Exception e) {  					exceptions.Add (e);  				}  				break;  			}  		}  		break;  	case "enclosure":  		enclosure = new RssEnclosure ();  		if (item != null)  			item.Enclosure = enclosure;  		for (int i = 0; i < reader.AttributeCount; i++) {  			reader.MoveToAttribute (i);  			switch (reader.Name.ToLower ()) {  			case "url":  				try {  					enclosure.Url = new Uri (reader.Value);  				}  				catch (Exception e) {  					exceptions.Add (e);  				}  				break;  			case "length":  				try {  					enclosure.Length = int.Parse (reader.Value);  				}  				catch (Exception e) {  					exceptions.Add (e);  				}  				break;  			case "type":  				enclosure.Type = reader.Value;  				break;  			}  		}  		break;  	case "guid":  		guid = new RssGuid ();  		if (item != null)  			item.Guid = guid;  		for (int i = 0; i < reader.AttributeCount; i++) {  			reader.MoveToAttribute (i);  			switch (reader.Name.ToLower ()) {  			case "ispermalink":  				try {  					guid.PermaLink = bool.Parse (reader.Value);  				}  				catch (Exception e) {  					exceptions.Add (e);  				}  				break;  			}  		}  		break;  	case "category":  		category = new RssCategory ();  		if ((string)xmlNodeStack.Peek () == "channel")  			channel.Categories.Add (category);  		else if (item != null)  			item.Categories.Add (category);  		for (int i = 0; i < reader.AttributeCount; i++) {  			reader.MoveToAttribute (i);  			switch (reader.Name.ToLower ()) {  			case "url":  				goto case "domain";  			case "domain":  				category.Domain = reader.Value;  				break;  			}  		}  		break;  	case "channel":  		channel = new RssChannel ();  		textInput = null;  		image = null;  		cloud = null;  		source = null;  		enclosure = null;  		category = null;  		item = null;  		break;  	case "image":  		image = new RssImage ();  		channel.Image = image;  		break;  	case "textinput":  		textInput = new RssTextInput ();  		channel.TextInput = textInput;  		break;  	case "cloud":  		pushElement = false;  		cloud = new RssCloud ();  		channel.Cloud = cloud;  		for (int i = 0; i < reader.AttributeCount; i++) {  			reader.MoveToAttribute (i);  			switch (reader.Name.ToLower ()) {  			case "domain":  				cloud.Domain = reader.Value;  				break;  			case "port":  				try {  					cloud.Port = ushort.Parse (reader.Value);  				}  				catch (Exception e) {  					exceptions.Add (e);  				}  				break;  			case "path":  				cloud.Path = reader.Value;  				break;  			case "registerprocedure":  				cloud.RegisterProcedure = reader.Value;  				break;  			case "protocol":  				switch (reader.Value.ToLower ()) {  				case "xml-rpc":  					cloud.Protocol = RssCloudProtocol.XmlRpc;  					break;  				case "soap":  					cloud.Protocol = RssCloudProtocol.Soap;  					break;  				case "http-post":  					cloud.Protocol = RssCloudProtocol.HttpPost;  					break;  				default:  					cloud.Protocol = RssCloudProtocol.Empty;  					break;  				}  				break;  			}  		}  		break;  	case "rss":  		for (int i = 0; i < reader.AttributeCount; i++) {  			reader.MoveToAttribute (i);  			if (reader.Name.ToLower () == "version")  				switch (reader.Value) {  				case "0.91":  					rssVersion = RssVersion.RSS091;  					break;  				case "0.92":  					rssVersion = RssVersion.RSS092;  					break;  				case "2.0":  					rssVersion = RssVersion.RSS20;  					break;  				default:  					rssVersion = RssVersion.NotSupported;  					break;  				}  		}  		break;  	case "rdf":  		for (int i = 0; i < reader.AttributeCount; i++) {  			reader.MoveToAttribute (i);  			if (reader.Name.ToLower () == "version")  				switch (reader.Value) {  				case "0.90":  					rssVersion = RssVersion.RSS090;  					break;  				case "1.0":  					rssVersion = RssVersion.RSS10;  					break;  				default:  					rssVersion = RssVersion.NotSupported;  					break;  				}  		}  		break;  	}  	if (pushElement)  		xmlNodeStack.Push (readerName);  	break;  }  case XmlNodeType.EndElement: {  	if (xmlNodeStack.Count == 1)  		break;  	string childElementName = (string)xmlNodeStack.Pop ();  	string parentElementName = (string)xmlNodeStack.Peek ();  	switch (childElementName) // current element  	{  	// item classes  	case "item":  		rssElement = item;  		readData = false;  		break;  	case "source":  		source.Name = elementText.ToString ();  		rssElement = source;  		readData = false;  		break;  	case "enclosure":  		rssElement = enclosure;  		readData = false;  		break;  	case "guid":  		guid.Name = elementText.ToString ();  		rssElement = guid;  		readData = false;  		break;  	case "category":  		// parent is either item or channel  		category.Name = elementText.ToString ();  		rssElement = category;  		readData = false;  		break;  	// channel classes  	case "channel":  		if (wroteChannel)  			wroteChannel = false;  		else {  			wroteChannel = true;  			rssElement = channel;  			readData = false;  		}  		break;  	case "textinput":  		rssElement = textInput;  		readData = false;  		break;  	case "image":  		rssElement = image;  		readData = false;  		break;  	case "cloud":  		rssElement = cloud;  		readData = false;  		break;  	}  	switch (parentElementName) // parent element  	{  	case "item":  		switch (childElementName) {  		case "title":  			item.Title = elementText.ToString ();  			break;  		case "link":  			item.Link = new Uri (elementText.ToString ());  			break;  		case "description":  			item.Description = elementText.ToString ();  			break;  		case "content:encoded":  			item.Content = elementText.ToString ();  			break;  		case "author":  		case "dc:creator":  			item.Author = elementText.ToString ();  			break;  		case "comments":  			item.Comments = elementText.ToString ();  			break;  		case "dc:date":  		case "pubdate":  			try {  				item.PubDate = DateTime.Parse (elementText.ToString ());  			}  			catch (Exception e) {  				try {  					string tmp = elementText.ToString ();  					tmp = tmp.Substring (0' tmp.Length - 5);  					tmp += "GMT";  					item.PubDate = DateTime.Parse (tmp);  				}  				catch {  					exceptions.Add (e);  				}  			}  			break;  		}  		break;  	case "channel":  		switch (childElementName) {  		case "title":  			channel.Title = elementText.ToString ();  			break;  		case "link":  			try {  				channel.Link = new Uri (elementText.ToString ());  			}  			catch (Exception e) {  				exceptions.Add (e);  			}  			break;  		case "description":  			channel.Description = elementText.ToString ();  			break;  		case "language":  			channel.Language = elementText.ToString ();  			break;  		case "copyright":  			channel.Copyright = elementText.ToString ();  			break;  		case "managingeditor":  			channel.ManagingEditor = elementText.ToString ();  			break;  		case "webmaster":  			channel.WebMaster = elementText.ToString ();  			break;  		case "rating":  			channel.Rating = elementText.ToString ();  			break;  		case "pubdate":  			try {  				channel.PubDate = DateTime.Parse (elementText.ToString ());  			}  			catch (Exception e) {  				exceptions.Add (e);  			}  			break;  		case "lastbuilddate":  			try {  				channel.LastBuildDate = DateTime.Parse (elementText.ToString ());  			}  			catch (Exception e) {  				exceptions.Add (e);  			}  			break;  		case "generator":  			channel.Generator = elementText.ToString ();  			break;  		case "docs":  			channel.Docs = elementText.ToString ();  			break;  		case "ttl":  			try {  				channel.TimeToLive = int.Parse (elementText.ToString ());  			}  			catch (Exception e) {  				exceptions.Add (e);  			}  			break;  		}  		break;  	case "image":  		switch (childElementName) {  		case "url":  			try {  				image.Url = new Uri (elementText.ToString ());  			}  			catch (Exception e) {  				exceptions.Add (e);  			}  			break;  		case "title":  			image.Title = elementText.ToString ();  			break;  		case "link":  			try {  				image.Link = new Uri (elementText.ToString ());  			}  			catch (Exception e) {  				exceptions.Add (e);  			}  			break;  		case "description":  			image.Description = elementText.ToString ();  			break;  		case "width":  			try {  				image.Width = Byte.Parse (elementText.ToString ());  			}  			catch (Exception e) {  				exceptions.Add (e);  			}  			break;  		case "height":  			try {  				image.Height = Byte.Parse (elementText.ToString ());  			}  			catch (Exception e) {  				exceptions.Add (e);  			}  			break;  		}  		break;  	case "textinput":  		switch (childElementName) {  		case "title":  			textInput.Title = elementText.ToString ();  			break;  		case "description":  			textInput.Description = elementText.ToString ();  			break;  		case "name":  			textInput.Name = elementText.ToString ();  			break;  		case "link":  			try {  				textInput.Link = new Uri (elementText.ToString ());  			}  			catch (Exception e) {  				exceptions.Add (e);  			}  			break;  		}  		break;  	case "skipdays":  		if (childElementName == "day")  			switch (elementText.ToString ().ToLower ()) {  			case "monday":  				channel.SkipDays [0] = true;  				break;  			case "tuesday":  				channel.SkipDays [1] = true;  				break;  			case "wednesday":  				channel.SkipDays [2] = true;  				break;  			case "thursday":  				channel.SkipDays [3] = true;  				break;  			case "friday":  				channel.SkipDays [4] = true;  				break;  			case "saturday":  				channel.SkipDays [5] = true;  				break;  			case "sunday":  				channel.SkipDays [6] = true;  				break;  			}  		break;  	case "skiphours":  		if (childElementName == "hour")  			channel.SkipHours [Byte.Parse (elementText.ToString ().ToLower ())] = true;  		break;  	}  	break;  }  case XmlNodeType.Text:  	elementText.Append (reader.Value);  	break;  case XmlNodeType.CDATA:  	elementText.Append (reader.Value);  	break;  }  
Magic Number,Rss,RssReader,C:\repos\dblock_sncore\Rss.Net\RssReader.cs,Read,The following statement contains a magic number: switch (reader.NodeType) {  case XmlNodeType.Element: {  	if (reader.IsEmptyElement)  		break;  	elementText = new StringBuilder ();  	switch (readerName) {  	case "item":  		// is this the end of the channel element? (absence of </channel> before <item>)  		if (!wroteChannel) {  			wroteChannel = true;  			rssElement = channel;  			// return RssChannel  			readData = false;  		}  		item = new RssItem ();  		// create new RssItem  		channel.Items.Add (item);  		break;  	case "source":  		source = new RssSource ();  		if (item != null)  			item.Source = source;  		for (int i = 0; i < reader.AttributeCount; i++) {  			reader.MoveToAttribute (i);  			switch (reader.Name.ToLower ()) {  			case "url":  				try {  					source.Url = new Uri (reader.Value);  				}  				catch (Exception e) {  					exceptions.Add (e);  				}  				break;  			}  		}  		break;  	case "enclosure":  		enclosure = new RssEnclosure ();  		if (item != null)  			item.Enclosure = enclosure;  		for (int i = 0; i < reader.AttributeCount; i++) {  			reader.MoveToAttribute (i);  			switch (reader.Name.ToLower ()) {  			case "url":  				try {  					enclosure.Url = new Uri (reader.Value);  				}  				catch (Exception e) {  					exceptions.Add (e);  				}  				break;  			case "length":  				try {  					enclosure.Length = int.Parse (reader.Value);  				}  				catch (Exception e) {  					exceptions.Add (e);  				}  				break;  			case "type":  				enclosure.Type = reader.Value;  				break;  			}  		}  		break;  	case "guid":  		guid = new RssGuid ();  		if (item != null)  			item.Guid = guid;  		for (int i = 0; i < reader.AttributeCount; i++) {  			reader.MoveToAttribute (i);  			switch (reader.Name.ToLower ()) {  			case "ispermalink":  				try {  					guid.PermaLink = bool.Parse (reader.Value);  				}  				catch (Exception e) {  					exceptions.Add (e);  				}  				break;  			}  		}  		break;  	case "category":  		category = new RssCategory ();  		if ((string)xmlNodeStack.Peek () == "channel")  			channel.Categories.Add (category);  		else if (item != null)  			item.Categories.Add (category);  		for (int i = 0; i < reader.AttributeCount; i++) {  			reader.MoveToAttribute (i);  			switch (reader.Name.ToLower ()) {  			case "url":  				goto case "domain";  			case "domain":  				category.Domain = reader.Value;  				break;  			}  		}  		break;  	case "channel":  		channel = new RssChannel ();  		textInput = null;  		image = null;  		cloud = null;  		source = null;  		enclosure = null;  		category = null;  		item = null;  		break;  	case "image":  		image = new RssImage ();  		channel.Image = image;  		break;  	case "textinput":  		textInput = new RssTextInput ();  		channel.TextInput = textInput;  		break;  	case "cloud":  		pushElement = false;  		cloud = new RssCloud ();  		channel.Cloud = cloud;  		for (int i = 0; i < reader.AttributeCount; i++) {  			reader.MoveToAttribute (i);  			switch (reader.Name.ToLower ()) {  			case "domain":  				cloud.Domain = reader.Value;  				break;  			case "port":  				try {  					cloud.Port = ushort.Parse (reader.Value);  				}  				catch (Exception e) {  					exceptions.Add (e);  				}  				break;  			case "path":  				cloud.Path = reader.Value;  				break;  			case "registerprocedure":  				cloud.RegisterProcedure = reader.Value;  				break;  			case "protocol":  				switch (reader.Value.ToLower ()) {  				case "xml-rpc":  					cloud.Protocol = RssCloudProtocol.XmlRpc;  					break;  				case "soap":  					cloud.Protocol = RssCloudProtocol.Soap;  					break;  				case "http-post":  					cloud.Protocol = RssCloudProtocol.HttpPost;  					break;  				default:  					cloud.Protocol = RssCloudProtocol.Empty;  					break;  				}  				break;  			}  		}  		break;  	case "rss":  		for (int i = 0; i < reader.AttributeCount; i++) {  			reader.MoveToAttribute (i);  			if (reader.Name.ToLower () == "version")  				switch (reader.Value) {  				case "0.91":  					rssVersion = RssVersion.RSS091;  					break;  				case "0.92":  					rssVersion = RssVersion.RSS092;  					break;  				case "2.0":  					rssVersion = RssVersion.RSS20;  					break;  				default:  					rssVersion = RssVersion.NotSupported;  					break;  				}  		}  		break;  	case "rdf":  		for (int i = 0; i < reader.AttributeCount; i++) {  			reader.MoveToAttribute (i);  			if (reader.Name.ToLower () == "version")  				switch (reader.Value) {  				case "0.90":  					rssVersion = RssVersion.RSS090;  					break;  				case "1.0":  					rssVersion = RssVersion.RSS10;  					break;  				default:  					rssVersion = RssVersion.NotSupported;  					break;  				}  		}  		break;  	}  	if (pushElement)  		xmlNodeStack.Push (readerName);  	break;  }  case XmlNodeType.EndElement: {  	if (xmlNodeStack.Count == 1)  		break;  	string childElementName = (string)xmlNodeStack.Pop ();  	string parentElementName = (string)xmlNodeStack.Peek ();  	switch (childElementName) // current element  	{  	// item classes  	case "item":  		rssElement = item;  		readData = false;  		break;  	case "source":  		source.Name = elementText.ToString ();  		rssElement = source;  		readData = false;  		break;  	case "enclosure":  		rssElement = enclosure;  		readData = false;  		break;  	case "guid":  		guid.Name = elementText.ToString ();  		rssElement = guid;  		readData = false;  		break;  	case "category":  		// parent is either item or channel  		category.Name = elementText.ToString ();  		rssElement = category;  		readData = false;  		break;  	// channel classes  	case "channel":  		if (wroteChannel)  			wroteChannel = false;  		else {  			wroteChannel = true;  			rssElement = channel;  			readData = false;  		}  		break;  	case "textinput":  		rssElement = textInput;  		readData = false;  		break;  	case "image":  		rssElement = image;  		readData = false;  		break;  	case "cloud":  		rssElement = cloud;  		readData = false;  		break;  	}  	switch (parentElementName) // parent element  	{  	case "item":  		switch (childElementName) {  		case "title":  			item.Title = elementText.ToString ();  			break;  		case "link":  			item.Link = new Uri (elementText.ToString ());  			break;  		case "description":  			item.Description = elementText.ToString ();  			break;  		case "content:encoded":  			item.Content = elementText.ToString ();  			break;  		case "author":  		case "dc:creator":  			item.Author = elementText.ToString ();  			break;  		case "comments":  			item.Comments = elementText.ToString ();  			break;  		case "dc:date":  		case "pubdate":  			try {  				item.PubDate = DateTime.Parse (elementText.ToString ());  			}  			catch (Exception e) {  				try {  					string tmp = elementText.ToString ();  					tmp = tmp.Substring (0' tmp.Length - 5);  					tmp += "GMT";  					item.PubDate = DateTime.Parse (tmp);  				}  				catch {  					exceptions.Add (e);  				}  			}  			break;  		}  		break;  	case "channel":  		switch (childElementName) {  		case "title":  			channel.Title = elementText.ToString ();  			break;  		case "link":  			try {  				channel.Link = new Uri (elementText.ToString ());  			}  			catch (Exception e) {  				exceptions.Add (e);  			}  			break;  		case "description":  			channel.Description = elementText.ToString ();  			break;  		case "language":  			channel.Language = elementText.ToString ();  			break;  		case "copyright":  			channel.Copyright = elementText.ToString ();  			break;  		case "managingeditor":  			channel.ManagingEditor = elementText.ToString ();  			break;  		case "webmaster":  			channel.WebMaster = elementText.ToString ();  			break;  		case "rating":  			channel.Rating = elementText.ToString ();  			break;  		case "pubdate":  			try {  				channel.PubDate = DateTime.Parse (elementText.ToString ());  			}  			catch (Exception e) {  				exceptions.Add (e);  			}  			break;  		case "lastbuilddate":  			try {  				channel.LastBuildDate = DateTime.Parse (elementText.ToString ());  			}  			catch (Exception e) {  				exceptions.Add (e);  			}  			break;  		case "generator":  			channel.Generator = elementText.ToString ();  			break;  		case "docs":  			channel.Docs = elementText.ToString ();  			break;  		case "ttl":  			try {  				channel.TimeToLive = int.Parse (elementText.ToString ());  			}  			catch (Exception e) {  				exceptions.Add (e);  			}  			break;  		}  		break;  	case "image":  		switch (childElementName) {  		case "url":  			try {  				image.Url = new Uri (elementText.ToString ());  			}  			catch (Exception e) {  				exceptions.Add (e);  			}  			break;  		case "title":  			image.Title = elementText.ToString ();  			break;  		case "link":  			try {  				image.Link = new Uri (elementText.ToString ());  			}  			catch (Exception e) {  				exceptions.Add (e);  			}  			break;  		case "description":  			image.Description = elementText.ToString ();  			break;  		case "width":  			try {  				image.Width = Byte.Parse (elementText.ToString ());  			}  			catch (Exception e) {  				exceptions.Add (e);  			}  			break;  		case "height":  			try {  				image.Height = Byte.Parse (elementText.ToString ());  			}  			catch (Exception e) {  				exceptions.Add (e);  			}  			break;  		}  		break;  	case "textinput":  		switch (childElementName) {  		case "title":  			textInput.Title = elementText.ToString ();  			break;  		case "description":  			textInput.Description = elementText.ToString ();  			break;  		case "name":  			textInput.Name = elementText.ToString ();  			break;  		case "link":  			try {  				textInput.Link = new Uri (elementText.ToString ());  			}  			catch (Exception e) {  				exceptions.Add (e);  			}  			break;  		}  		break;  	case "skipdays":  		if (childElementName == "day")  			switch (elementText.ToString ().ToLower ()) {  			case "monday":  				channel.SkipDays [0] = true;  				break;  			case "tuesday":  				channel.SkipDays [1] = true;  				break;  			case "wednesday":  				channel.SkipDays [2] = true;  				break;  			case "thursday":  				channel.SkipDays [3] = true;  				break;  			case "friday":  				channel.SkipDays [4] = true;  				break;  			case "saturday":  				channel.SkipDays [5] = true;  				break;  			case "sunday":  				channel.SkipDays [6] = true;  				break;  			}  		break;  	case "skiphours":  		if (childElementName == "hour")  			channel.SkipHours [Byte.Parse (elementText.ToString ().ToLower ())] = true;  		break;  	}  	break;  }  case XmlNodeType.Text:  	elementText.Append (reader.Value);  	break;  case XmlNodeType.CDATA:  	elementText.Append (reader.Value);  	break;  }  
Magic Number,Rss,RssReader,C:\repos\dblock_sncore\Rss.Net\RssReader.cs,Read,The following statement contains a magic number: switch (reader.NodeType) {  case XmlNodeType.Element: {  	if (reader.IsEmptyElement)  		break;  	elementText = new StringBuilder ();  	switch (readerName) {  	case "item":  		// is this the end of the channel element? (absence of </channel> before <item>)  		if (!wroteChannel) {  			wroteChannel = true;  			rssElement = channel;  			// return RssChannel  			readData = false;  		}  		item = new RssItem ();  		// create new RssItem  		channel.Items.Add (item);  		break;  	case "source":  		source = new RssSource ();  		if (item != null)  			item.Source = source;  		for (int i = 0; i < reader.AttributeCount; i++) {  			reader.MoveToAttribute (i);  			switch (reader.Name.ToLower ()) {  			case "url":  				try {  					source.Url = new Uri (reader.Value);  				}  				catch (Exception e) {  					exceptions.Add (e);  				}  				break;  			}  		}  		break;  	case "enclosure":  		enclosure = new RssEnclosure ();  		if (item != null)  			item.Enclosure = enclosure;  		for (int i = 0; i < reader.AttributeCount; i++) {  			reader.MoveToAttribute (i);  			switch (reader.Name.ToLower ()) {  			case "url":  				try {  					enclosure.Url = new Uri (reader.Value);  				}  				catch (Exception e) {  					exceptions.Add (e);  				}  				break;  			case "length":  				try {  					enclosure.Length = int.Parse (reader.Value);  				}  				catch (Exception e) {  					exceptions.Add (e);  				}  				break;  			case "type":  				enclosure.Type = reader.Value;  				break;  			}  		}  		break;  	case "guid":  		guid = new RssGuid ();  		if (item != null)  			item.Guid = guid;  		for (int i = 0; i < reader.AttributeCount; i++) {  			reader.MoveToAttribute (i);  			switch (reader.Name.ToLower ()) {  			case "ispermalink":  				try {  					guid.PermaLink = bool.Parse (reader.Value);  				}  				catch (Exception e) {  					exceptions.Add (e);  				}  				break;  			}  		}  		break;  	case "category":  		category = new RssCategory ();  		if ((string)xmlNodeStack.Peek () == "channel")  			channel.Categories.Add (category);  		else if (item != null)  			item.Categories.Add (category);  		for (int i = 0; i < reader.AttributeCount; i++) {  			reader.MoveToAttribute (i);  			switch (reader.Name.ToLower ()) {  			case "url":  				goto case "domain";  			case "domain":  				category.Domain = reader.Value;  				break;  			}  		}  		break;  	case "channel":  		channel = new RssChannel ();  		textInput = null;  		image = null;  		cloud = null;  		source = null;  		enclosure = null;  		category = null;  		item = null;  		break;  	case "image":  		image = new RssImage ();  		channel.Image = image;  		break;  	case "textinput":  		textInput = new RssTextInput ();  		channel.TextInput = textInput;  		break;  	case "cloud":  		pushElement = false;  		cloud = new RssCloud ();  		channel.Cloud = cloud;  		for (int i = 0; i < reader.AttributeCount; i++) {  			reader.MoveToAttribute (i);  			switch (reader.Name.ToLower ()) {  			case "domain":  				cloud.Domain = reader.Value;  				break;  			case "port":  				try {  					cloud.Port = ushort.Parse (reader.Value);  				}  				catch (Exception e) {  					exceptions.Add (e);  				}  				break;  			case "path":  				cloud.Path = reader.Value;  				break;  			case "registerprocedure":  				cloud.RegisterProcedure = reader.Value;  				break;  			case "protocol":  				switch (reader.Value.ToLower ()) {  				case "xml-rpc":  					cloud.Protocol = RssCloudProtocol.XmlRpc;  					break;  				case "soap":  					cloud.Protocol = RssCloudProtocol.Soap;  					break;  				case "http-post":  					cloud.Protocol = RssCloudProtocol.HttpPost;  					break;  				default:  					cloud.Protocol = RssCloudProtocol.Empty;  					break;  				}  				break;  			}  		}  		break;  	case "rss":  		for (int i = 0; i < reader.AttributeCount; i++) {  			reader.MoveToAttribute (i);  			if (reader.Name.ToLower () == "version")  				switch (reader.Value) {  				case "0.91":  					rssVersion = RssVersion.RSS091;  					break;  				case "0.92":  					rssVersion = RssVersion.RSS092;  					break;  				case "2.0":  					rssVersion = RssVersion.RSS20;  					break;  				default:  					rssVersion = RssVersion.NotSupported;  					break;  				}  		}  		break;  	case "rdf":  		for (int i = 0; i < reader.AttributeCount; i++) {  			reader.MoveToAttribute (i);  			if (reader.Name.ToLower () == "version")  				switch (reader.Value) {  				case "0.90":  					rssVersion = RssVersion.RSS090;  					break;  				case "1.0":  					rssVersion = RssVersion.RSS10;  					break;  				default:  					rssVersion = RssVersion.NotSupported;  					break;  				}  		}  		break;  	}  	if (pushElement)  		xmlNodeStack.Push (readerName);  	break;  }  case XmlNodeType.EndElement: {  	if (xmlNodeStack.Count == 1)  		break;  	string childElementName = (string)xmlNodeStack.Pop ();  	string parentElementName = (string)xmlNodeStack.Peek ();  	switch (childElementName) // current element  	{  	// item classes  	case "item":  		rssElement = item;  		readData = false;  		break;  	case "source":  		source.Name = elementText.ToString ();  		rssElement = source;  		readData = false;  		break;  	case "enclosure":  		rssElement = enclosure;  		readData = false;  		break;  	case "guid":  		guid.Name = elementText.ToString ();  		rssElement = guid;  		readData = false;  		break;  	case "category":  		// parent is either item or channel  		category.Name = elementText.ToString ();  		rssElement = category;  		readData = false;  		break;  	// channel classes  	case "channel":  		if (wroteChannel)  			wroteChannel = false;  		else {  			wroteChannel = true;  			rssElement = channel;  			readData = false;  		}  		break;  	case "textinput":  		rssElement = textInput;  		readData = false;  		break;  	case "image":  		rssElement = image;  		readData = false;  		break;  	case "cloud":  		rssElement = cloud;  		readData = false;  		break;  	}  	switch (parentElementName) // parent element  	{  	case "item":  		switch (childElementName) {  		case "title":  			item.Title = elementText.ToString ();  			break;  		case "link":  			item.Link = new Uri (elementText.ToString ());  			break;  		case "description":  			item.Description = elementText.ToString ();  			break;  		case "content:encoded":  			item.Content = elementText.ToString ();  			break;  		case "author":  		case "dc:creator":  			item.Author = elementText.ToString ();  			break;  		case "comments":  			item.Comments = elementText.ToString ();  			break;  		case "dc:date":  		case "pubdate":  			try {  				item.PubDate = DateTime.Parse (elementText.ToString ());  			}  			catch (Exception e) {  				try {  					string tmp = elementText.ToString ();  					tmp = tmp.Substring (0' tmp.Length - 5);  					tmp += "GMT";  					item.PubDate = DateTime.Parse (tmp);  				}  				catch {  					exceptions.Add (e);  				}  			}  			break;  		}  		break;  	case "channel":  		switch (childElementName) {  		case "title":  			channel.Title = elementText.ToString ();  			break;  		case "link":  			try {  				channel.Link = new Uri (elementText.ToString ());  			}  			catch (Exception e) {  				exceptions.Add (e);  			}  			break;  		case "description":  			channel.Description = elementText.ToString ();  			break;  		case "language":  			channel.Language = elementText.ToString ();  			break;  		case "copyright":  			channel.Copyright = elementText.ToString ();  			break;  		case "managingeditor":  			channel.ManagingEditor = elementText.ToString ();  			break;  		case "webmaster":  			channel.WebMaster = elementText.ToString ();  			break;  		case "rating":  			channel.Rating = elementText.ToString ();  			break;  		case "pubdate":  			try {  				channel.PubDate = DateTime.Parse (elementText.ToString ());  			}  			catch (Exception e) {  				exceptions.Add (e);  			}  			break;  		case "lastbuilddate":  			try {  				channel.LastBuildDate = DateTime.Parse (elementText.ToString ());  			}  			catch (Exception e) {  				exceptions.Add (e);  			}  			break;  		case "generator":  			channel.Generator = elementText.ToString ();  			break;  		case "docs":  			channel.Docs = elementText.ToString ();  			break;  		case "ttl":  			try {  				channel.TimeToLive = int.Parse (elementText.ToString ());  			}  			catch (Exception e) {  				exceptions.Add (e);  			}  			break;  		}  		break;  	case "image":  		switch (childElementName) {  		case "url":  			try {  				image.Url = new Uri (elementText.ToString ());  			}  			catch (Exception e) {  				exceptions.Add (e);  			}  			break;  		case "title":  			image.Title = elementText.ToString ();  			break;  		case "link":  			try {  				image.Link = new Uri (elementText.ToString ());  			}  			catch (Exception e) {  				exceptions.Add (e);  			}  			break;  		case "description":  			image.Description = elementText.ToString ();  			break;  		case "width":  			try {  				image.Width = Byte.Parse (elementText.ToString ());  			}  			catch (Exception e) {  				exceptions.Add (e);  			}  			break;  		case "height":  			try {  				image.Height = Byte.Parse (elementText.ToString ());  			}  			catch (Exception e) {  				exceptions.Add (e);  			}  			break;  		}  		break;  	case "textinput":  		switch (childElementName) {  		case "title":  			textInput.Title = elementText.ToString ();  			break;  		case "description":  			textInput.Description = elementText.ToString ();  			break;  		case "name":  			textInput.Name = elementText.ToString ();  			break;  		case "link":  			try {  				textInput.Link = new Uri (elementText.ToString ());  			}  			catch (Exception e) {  				exceptions.Add (e);  			}  			break;  		}  		break;  	case "skipdays":  		if (childElementName == "day")  			switch (elementText.ToString ().ToLower ()) {  			case "monday":  				channel.SkipDays [0] = true;  				break;  			case "tuesday":  				channel.SkipDays [1] = true;  				break;  			case "wednesday":  				channel.SkipDays [2] = true;  				break;  			case "thursday":  				channel.SkipDays [3] = true;  				break;  			case "friday":  				channel.SkipDays [4] = true;  				break;  			case "saturday":  				channel.SkipDays [5] = true;  				break;  			case "sunday":  				channel.SkipDays [6] = true;  				break;  			}  		break;  	case "skiphours":  		if (childElementName == "hour")  			channel.SkipHours [Byte.Parse (elementText.ToString ().ToLower ())] = true;  		break;  	}  	break;  }  case XmlNodeType.Text:  	elementText.Append (reader.Value);  	break;  case XmlNodeType.CDATA:  	elementText.Append (reader.Value);  	break;  }  
Magic Number,Rss,RssReader,C:\repos\dblock_sncore\Rss.Net\RssReader.cs,Read,The following statement contains a magic number: switch (reader.NodeType) {  case XmlNodeType.Element: {  	if (reader.IsEmptyElement)  		break;  	elementText = new StringBuilder ();  	switch (readerName) {  	case "item":  		// is this the end of the channel element? (absence of </channel> before <item>)  		if (!wroteChannel) {  			wroteChannel = true;  			rssElement = channel;  			// return RssChannel  			readData = false;  		}  		item = new RssItem ();  		// create new RssItem  		channel.Items.Add (item);  		break;  	case "source":  		source = new RssSource ();  		if (item != null)  			item.Source = source;  		for (int i = 0; i < reader.AttributeCount; i++) {  			reader.MoveToAttribute (i);  			switch (reader.Name.ToLower ()) {  			case "url":  				try {  					source.Url = new Uri (reader.Value);  				}  				catch (Exception e) {  					exceptions.Add (e);  				}  				break;  			}  		}  		break;  	case "enclosure":  		enclosure = new RssEnclosure ();  		if (item != null)  			item.Enclosure = enclosure;  		for (int i = 0; i < reader.AttributeCount; i++) {  			reader.MoveToAttribute (i);  			switch (reader.Name.ToLower ()) {  			case "url":  				try {  					enclosure.Url = new Uri (reader.Value);  				}  				catch (Exception e) {  					exceptions.Add (e);  				}  				break;  			case "length":  				try {  					enclosure.Length = int.Parse (reader.Value);  				}  				catch (Exception e) {  					exceptions.Add (e);  				}  				break;  			case "type":  				enclosure.Type = reader.Value;  				break;  			}  		}  		break;  	case "guid":  		guid = new RssGuid ();  		if (item != null)  			item.Guid = guid;  		for (int i = 0; i < reader.AttributeCount; i++) {  			reader.MoveToAttribute (i);  			switch (reader.Name.ToLower ()) {  			case "ispermalink":  				try {  					guid.PermaLink = bool.Parse (reader.Value);  				}  				catch (Exception e) {  					exceptions.Add (e);  				}  				break;  			}  		}  		break;  	case "category":  		category = new RssCategory ();  		if ((string)xmlNodeStack.Peek () == "channel")  			channel.Categories.Add (category);  		else if (item != null)  			item.Categories.Add (category);  		for (int i = 0; i < reader.AttributeCount; i++) {  			reader.MoveToAttribute (i);  			switch (reader.Name.ToLower ()) {  			case "url":  				goto case "domain";  			case "domain":  				category.Domain = reader.Value;  				break;  			}  		}  		break;  	case "channel":  		channel = new RssChannel ();  		textInput = null;  		image = null;  		cloud = null;  		source = null;  		enclosure = null;  		category = null;  		item = null;  		break;  	case "image":  		image = new RssImage ();  		channel.Image = image;  		break;  	case "textinput":  		textInput = new RssTextInput ();  		channel.TextInput = textInput;  		break;  	case "cloud":  		pushElement = false;  		cloud = new RssCloud ();  		channel.Cloud = cloud;  		for (int i = 0; i < reader.AttributeCount; i++) {  			reader.MoveToAttribute (i);  			switch (reader.Name.ToLower ()) {  			case "domain":  				cloud.Domain = reader.Value;  				break;  			case "port":  				try {  					cloud.Port = ushort.Parse (reader.Value);  				}  				catch (Exception e) {  					exceptions.Add (e);  				}  				break;  			case "path":  				cloud.Path = reader.Value;  				break;  			case "registerprocedure":  				cloud.RegisterProcedure = reader.Value;  				break;  			case "protocol":  				switch (reader.Value.ToLower ()) {  				case "xml-rpc":  					cloud.Protocol = RssCloudProtocol.XmlRpc;  					break;  				case "soap":  					cloud.Protocol = RssCloudProtocol.Soap;  					break;  				case "http-post":  					cloud.Protocol = RssCloudProtocol.HttpPost;  					break;  				default:  					cloud.Protocol = RssCloudProtocol.Empty;  					break;  				}  				break;  			}  		}  		break;  	case "rss":  		for (int i = 0; i < reader.AttributeCount; i++) {  			reader.MoveToAttribute (i);  			if (reader.Name.ToLower () == "version")  				switch (reader.Value) {  				case "0.91":  					rssVersion = RssVersion.RSS091;  					break;  				case "0.92":  					rssVersion = RssVersion.RSS092;  					break;  				case "2.0":  					rssVersion = RssVersion.RSS20;  					break;  				default:  					rssVersion = RssVersion.NotSupported;  					break;  				}  		}  		break;  	case "rdf":  		for (int i = 0; i < reader.AttributeCount; i++) {  			reader.MoveToAttribute (i);  			if (reader.Name.ToLower () == "version")  				switch (reader.Value) {  				case "0.90":  					rssVersion = RssVersion.RSS090;  					break;  				case "1.0":  					rssVersion = RssVersion.RSS10;  					break;  				default:  					rssVersion = RssVersion.NotSupported;  					break;  				}  		}  		break;  	}  	if (pushElement)  		xmlNodeStack.Push (readerName);  	break;  }  case XmlNodeType.EndElement: {  	if (xmlNodeStack.Count == 1)  		break;  	string childElementName = (string)xmlNodeStack.Pop ();  	string parentElementName = (string)xmlNodeStack.Peek ();  	switch (childElementName) // current element  	{  	// item classes  	case "item":  		rssElement = item;  		readData = false;  		break;  	case "source":  		source.Name = elementText.ToString ();  		rssElement = source;  		readData = false;  		break;  	case "enclosure":  		rssElement = enclosure;  		readData = false;  		break;  	case "guid":  		guid.Name = elementText.ToString ();  		rssElement = guid;  		readData = false;  		break;  	case "category":  		// parent is either item or channel  		category.Name = elementText.ToString ();  		rssElement = category;  		readData = false;  		break;  	// channel classes  	case "channel":  		if (wroteChannel)  			wroteChannel = false;  		else {  			wroteChannel = true;  			rssElement = channel;  			readData = false;  		}  		break;  	case "textinput":  		rssElement = textInput;  		readData = false;  		break;  	case "image":  		rssElement = image;  		readData = false;  		break;  	case "cloud":  		rssElement = cloud;  		readData = false;  		break;  	}  	switch (parentElementName) // parent element  	{  	case "item":  		switch (childElementName) {  		case "title":  			item.Title = elementText.ToString ();  			break;  		case "link":  			item.Link = new Uri (elementText.ToString ());  			break;  		case "description":  			item.Description = elementText.ToString ();  			break;  		case "content:encoded":  			item.Content = elementText.ToString ();  			break;  		case "author":  		case "dc:creator":  			item.Author = elementText.ToString ();  			break;  		case "comments":  			item.Comments = elementText.ToString ();  			break;  		case "dc:date":  		case "pubdate":  			try {  				item.PubDate = DateTime.Parse (elementText.ToString ());  			}  			catch (Exception e) {  				try {  					string tmp = elementText.ToString ();  					tmp = tmp.Substring (0' tmp.Length - 5);  					tmp += "GMT";  					item.PubDate = DateTime.Parse (tmp);  				}  				catch {  					exceptions.Add (e);  				}  			}  			break;  		}  		break;  	case "channel":  		switch (childElementName) {  		case "title":  			channel.Title = elementText.ToString ();  			break;  		case "link":  			try {  				channel.Link = new Uri (elementText.ToString ());  			}  			catch (Exception e) {  				exceptions.Add (e);  			}  			break;  		case "description":  			channel.Description = elementText.ToString ();  			break;  		case "language":  			channel.Language = elementText.ToString ();  			break;  		case "copyright":  			channel.Copyright = elementText.ToString ();  			break;  		case "managingeditor":  			channel.ManagingEditor = elementText.ToString ();  			break;  		case "webmaster":  			channel.WebMaster = elementText.ToString ();  			break;  		case "rating":  			channel.Rating = elementText.ToString ();  			break;  		case "pubdate":  			try {  				channel.PubDate = DateTime.Parse (elementText.ToString ());  			}  			catch (Exception e) {  				exceptions.Add (e);  			}  			break;  		case "lastbuilddate":  			try {  				channel.LastBuildDate = DateTime.Parse (elementText.ToString ());  			}  			catch (Exception e) {  				exceptions.Add (e);  			}  			break;  		case "generator":  			channel.Generator = elementText.ToString ();  			break;  		case "docs":  			channel.Docs = elementText.ToString ();  			break;  		case "ttl":  			try {  				channel.TimeToLive = int.Parse (elementText.ToString ());  			}  			catch (Exception e) {  				exceptions.Add (e);  			}  			break;  		}  		break;  	case "image":  		switch (childElementName) {  		case "url":  			try {  				image.Url = new Uri (elementText.ToString ());  			}  			catch (Exception e) {  				exceptions.Add (e);  			}  			break;  		case "title":  			image.Title = elementText.ToString ();  			break;  		case "link":  			try {  				image.Link = new Uri (elementText.ToString ());  			}  			catch (Exception e) {  				exceptions.Add (e);  			}  			break;  		case "description":  			image.Description = elementText.ToString ();  			break;  		case "width":  			try {  				image.Width = Byte.Parse (elementText.ToString ());  			}  			catch (Exception e) {  				exceptions.Add (e);  			}  			break;  		case "height":  			try {  				image.Height = Byte.Parse (elementText.ToString ());  			}  			catch (Exception e) {  				exceptions.Add (e);  			}  			break;  		}  		break;  	case "textinput":  		switch (childElementName) {  		case "title":  			textInput.Title = elementText.ToString ();  			break;  		case "description":  			textInput.Description = elementText.ToString ();  			break;  		case "name":  			textInput.Name = elementText.ToString ();  			break;  		case "link":  			try {  				textInput.Link = new Uri (elementText.ToString ());  			}  			catch (Exception e) {  				exceptions.Add (e);  			}  			break;  		}  		break;  	case "skipdays":  		if (childElementName == "day")  			switch (elementText.ToString ().ToLower ()) {  			case "monday":  				channel.SkipDays [0] = true;  				break;  			case "tuesday":  				channel.SkipDays [1] = true;  				break;  			case "wednesday":  				channel.SkipDays [2] = true;  				break;  			case "thursday":  				channel.SkipDays [3] = true;  				break;  			case "friday":  				channel.SkipDays [4] = true;  				break;  			case "saturday":  				channel.SkipDays [5] = true;  				break;  			case "sunday":  				channel.SkipDays [6] = true;  				break;  			}  		break;  	case "skiphours":  		if (childElementName == "hour")  			channel.SkipHours [Byte.Parse (elementText.ToString ().ToLower ())] = true;  		break;  	}  	break;  }  case XmlNodeType.Text:  	elementText.Append (reader.Value);  	break;  case XmlNodeType.CDATA:  	elementText.Append (reader.Value);  	break;  }  
Magic Number,Rss,RssReader,C:\repos\dblock_sncore\Rss.Net\RssReader.cs,Read,The following statement contains a magic number: switch (reader.NodeType) {  case XmlNodeType.Element: {  	if (reader.IsEmptyElement)  		break;  	elementText = new StringBuilder ();  	switch (readerName) {  	case "item":  		// is this the end of the channel element? (absence of </channel> before <item>)  		if (!wroteChannel) {  			wroteChannel = true;  			rssElement = channel;  			// return RssChannel  			readData = false;  		}  		item = new RssItem ();  		// create new RssItem  		channel.Items.Add (item);  		break;  	case "source":  		source = new RssSource ();  		if (item != null)  			item.Source = source;  		for (int i = 0; i < reader.AttributeCount; i++) {  			reader.MoveToAttribute (i);  			switch (reader.Name.ToLower ()) {  			case "url":  				try {  					source.Url = new Uri (reader.Value);  				}  				catch (Exception e) {  					exceptions.Add (e);  				}  				break;  			}  		}  		break;  	case "enclosure":  		enclosure = new RssEnclosure ();  		if (item != null)  			item.Enclosure = enclosure;  		for (int i = 0; i < reader.AttributeCount; i++) {  			reader.MoveToAttribute (i);  			switch (reader.Name.ToLower ()) {  			case "url":  				try {  					enclosure.Url = new Uri (reader.Value);  				}  				catch (Exception e) {  					exceptions.Add (e);  				}  				break;  			case "length":  				try {  					enclosure.Length = int.Parse (reader.Value);  				}  				catch (Exception e) {  					exceptions.Add (e);  				}  				break;  			case "type":  				enclosure.Type = reader.Value;  				break;  			}  		}  		break;  	case "guid":  		guid = new RssGuid ();  		if (item != null)  			item.Guid = guid;  		for (int i = 0; i < reader.AttributeCount; i++) {  			reader.MoveToAttribute (i);  			switch (reader.Name.ToLower ()) {  			case "ispermalink":  				try {  					guid.PermaLink = bool.Parse (reader.Value);  				}  				catch (Exception e) {  					exceptions.Add (e);  				}  				break;  			}  		}  		break;  	case "category":  		category = new RssCategory ();  		if ((string)xmlNodeStack.Peek () == "channel")  			channel.Categories.Add (category);  		else if (item != null)  			item.Categories.Add (category);  		for (int i = 0; i < reader.AttributeCount; i++) {  			reader.MoveToAttribute (i);  			switch (reader.Name.ToLower ()) {  			case "url":  				goto case "domain";  			case "domain":  				category.Domain = reader.Value;  				break;  			}  		}  		break;  	case "channel":  		channel = new RssChannel ();  		textInput = null;  		image = null;  		cloud = null;  		source = null;  		enclosure = null;  		category = null;  		item = null;  		break;  	case "image":  		image = new RssImage ();  		channel.Image = image;  		break;  	case "textinput":  		textInput = new RssTextInput ();  		channel.TextInput = textInput;  		break;  	case "cloud":  		pushElement = false;  		cloud = new RssCloud ();  		channel.Cloud = cloud;  		for (int i = 0; i < reader.AttributeCount; i++) {  			reader.MoveToAttribute (i);  			switch (reader.Name.ToLower ()) {  			case "domain":  				cloud.Domain = reader.Value;  				break;  			case "port":  				try {  					cloud.Port = ushort.Parse (reader.Value);  				}  				catch (Exception e) {  					exceptions.Add (e);  				}  				break;  			case "path":  				cloud.Path = reader.Value;  				break;  			case "registerprocedure":  				cloud.RegisterProcedure = reader.Value;  				break;  			case "protocol":  				switch (reader.Value.ToLower ()) {  				case "xml-rpc":  					cloud.Protocol = RssCloudProtocol.XmlRpc;  					break;  				case "soap":  					cloud.Protocol = RssCloudProtocol.Soap;  					break;  				case "http-post":  					cloud.Protocol = RssCloudProtocol.HttpPost;  					break;  				default:  					cloud.Protocol = RssCloudProtocol.Empty;  					break;  				}  				break;  			}  		}  		break;  	case "rss":  		for (int i = 0; i < reader.AttributeCount; i++) {  			reader.MoveToAttribute (i);  			if (reader.Name.ToLower () == "version")  				switch (reader.Value) {  				case "0.91":  					rssVersion = RssVersion.RSS091;  					break;  				case "0.92":  					rssVersion = RssVersion.RSS092;  					break;  				case "2.0":  					rssVersion = RssVersion.RSS20;  					break;  				default:  					rssVersion = RssVersion.NotSupported;  					break;  				}  		}  		break;  	case "rdf":  		for (int i = 0; i < reader.AttributeCount; i++) {  			reader.MoveToAttribute (i);  			if (reader.Name.ToLower () == "version")  				switch (reader.Value) {  				case "0.90":  					rssVersion = RssVersion.RSS090;  					break;  				case "1.0":  					rssVersion = RssVersion.RSS10;  					break;  				default:  					rssVersion = RssVersion.NotSupported;  					break;  				}  		}  		break;  	}  	if (pushElement)  		xmlNodeStack.Push (readerName);  	break;  }  case XmlNodeType.EndElement: {  	if (xmlNodeStack.Count == 1)  		break;  	string childElementName = (string)xmlNodeStack.Pop ();  	string parentElementName = (string)xmlNodeStack.Peek ();  	switch (childElementName) // current element  	{  	// item classes  	case "item":  		rssElement = item;  		readData = false;  		break;  	case "source":  		source.Name = elementText.ToString ();  		rssElement = source;  		readData = false;  		break;  	case "enclosure":  		rssElement = enclosure;  		readData = false;  		break;  	case "guid":  		guid.Name = elementText.ToString ();  		rssElement = guid;  		readData = false;  		break;  	case "category":  		// parent is either item or channel  		category.Name = elementText.ToString ();  		rssElement = category;  		readData = false;  		break;  	// channel classes  	case "channel":  		if (wroteChannel)  			wroteChannel = false;  		else {  			wroteChannel = true;  			rssElement = channel;  			readData = false;  		}  		break;  	case "textinput":  		rssElement = textInput;  		readData = false;  		break;  	case "image":  		rssElement = image;  		readData = false;  		break;  	case "cloud":  		rssElement = cloud;  		readData = false;  		break;  	}  	switch (parentElementName) // parent element  	{  	case "item":  		switch (childElementName) {  		case "title":  			item.Title = elementText.ToString ();  			break;  		case "link":  			item.Link = new Uri (elementText.ToString ());  			break;  		case "description":  			item.Description = elementText.ToString ();  			break;  		case "content:encoded":  			item.Content = elementText.ToString ();  			break;  		case "author":  		case "dc:creator":  			item.Author = elementText.ToString ();  			break;  		case "comments":  			item.Comments = elementText.ToString ();  			break;  		case "dc:date":  		case "pubdate":  			try {  				item.PubDate = DateTime.Parse (elementText.ToString ());  			}  			catch (Exception e) {  				try {  					string tmp = elementText.ToString ();  					tmp = tmp.Substring (0' tmp.Length - 5);  					tmp += "GMT";  					item.PubDate = DateTime.Parse (tmp);  				}  				catch {  					exceptions.Add (e);  				}  			}  			break;  		}  		break;  	case "channel":  		switch (childElementName) {  		case "title":  			channel.Title = elementText.ToString ();  			break;  		case "link":  			try {  				channel.Link = new Uri (elementText.ToString ());  			}  			catch (Exception e) {  				exceptions.Add (e);  			}  			break;  		case "description":  			channel.Description = elementText.ToString ();  			break;  		case "language":  			channel.Language = elementText.ToString ();  			break;  		case "copyright":  			channel.Copyright = elementText.ToString ();  			break;  		case "managingeditor":  			channel.ManagingEditor = elementText.ToString ();  			break;  		case "webmaster":  			channel.WebMaster = elementText.ToString ();  			break;  		case "rating":  			channel.Rating = elementText.ToString ();  			break;  		case "pubdate":  			try {  				channel.PubDate = DateTime.Parse (elementText.ToString ());  			}  			catch (Exception e) {  				exceptions.Add (e);  			}  			break;  		case "lastbuilddate":  			try {  				channel.LastBuildDate = DateTime.Parse (elementText.ToString ());  			}  			catch (Exception e) {  				exceptions.Add (e);  			}  			break;  		case "generator":  			channel.Generator = elementText.ToString ();  			break;  		case "docs":  			channel.Docs = elementText.ToString ();  			break;  		case "ttl":  			try {  				channel.TimeToLive = int.Parse (elementText.ToString ());  			}  			catch (Exception e) {  				exceptions.Add (e);  			}  			break;  		}  		break;  	case "image":  		switch (childElementName) {  		case "url":  			try {  				image.Url = new Uri (elementText.ToString ());  			}  			catch (Exception e) {  				exceptions.Add (e);  			}  			break;  		case "title":  			image.Title = elementText.ToString ();  			break;  		case "link":  			try {  				image.Link = new Uri (elementText.ToString ());  			}  			catch (Exception e) {  				exceptions.Add (e);  			}  			break;  		case "description":  			image.Description = elementText.ToString ();  			break;  		case "width":  			try {  				image.Width = Byte.Parse (elementText.ToString ());  			}  			catch (Exception e) {  				exceptions.Add (e);  			}  			break;  		case "height":  			try {  				image.Height = Byte.Parse (elementText.ToString ());  			}  			catch (Exception e) {  				exceptions.Add (e);  			}  			break;  		}  		break;  	case "textinput":  		switch (childElementName) {  		case "title":  			textInput.Title = elementText.ToString ();  			break;  		case "description":  			textInput.Description = elementText.ToString ();  			break;  		case "name":  			textInput.Name = elementText.ToString ();  			break;  		case "link":  			try {  				textInput.Link = new Uri (elementText.ToString ());  			}  			catch (Exception e) {  				exceptions.Add (e);  			}  			break;  		}  		break;  	case "skipdays":  		if (childElementName == "day")  			switch (elementText.ToString ().ToLower ()) {  			case "monday":  				channel.SkipDays [0] = true;  				break;  			case "tuesday":  				channel.SkipDays [1] = true;  				break;  			case "wednesday":  				channel.SkipDays [2] = true;  				break;  			case "thursday":  				channel.SkipDays [3] = true;  				break;  			case "friday":  				channel.SkipDays [4] = true;  				break;  			case "saturday":  				channel.SkipDays [5] = true;  				break;  			case "sunday":  				channel.SkipDays [6] = true;  				break;  			}  		break;  	case "skiphours":  		if (childElementName == "hour")  			channel.SkipHours [Byte.Parse (elementText.ToString ().ToLower ())] = true;  		break;  	}  	break;  }  case XmlNodeType.Text:  	elementText.Append (reader.Value);  	break;  case XmlNodeType.CDATA:  	elementText.Append (reader.Value);  	break;  }  
Magic Number,Rss,RssReader,C:\repos\dblock_sncore\Rss.Net\RssReader.cs,Read,The following statement contains a magic number: switch (parentElementName) // parent element  {  case "item":  	switch (childElementName) {  	case "title":  		item.Title = elementText.ToString ();  		break;  	case "link":  		item.Link = new Uri (elementText.ToString ());  		break;  	case "description":  		item.Description = elementText.ToString ();  		break;  	case "content:encoded":  		item.Content = elementText.ToString ();  		break;  	case "author":  	case "dc:creator":  		item.Author = elementText.ToString ();  		break;  	case "comments":  		item.Comments = elementText.ToString ();  		break;  	case "dc:date":  	case "pubdate":  		try {  			item.PubDate = DateTime.Parse (elementText.ToString ());  		}  		catch (Exception e) {  			try {  				string tmp = elementText.ToString ();  				tmp = tmp.Substring (0' tmp.Length - 5);  				tmp += "GMT";  				item.PubDate = DateTime.Parse (tmp);  			}  			catch {  				exceptions.Add (e);  			}  		}  		break;  	}  	break;  case "channel":  	switch (childElementName) {  	case "title":  		channel.Title = elementText.ToString ();  		break;  	case "link":  		try {  			channel.Link = new Uri (elementText.ToString ());  		}  		catch (Exception e) {  			exceptions.Add (e);  		}  		break;  	case "description":  		channel.Description = elementText.ToString ();  		break;  	case "language":  		channel.Language = elementText.ToString ();  		break;  	case "copyright":  		channel.Copyright = elementText.ToString ();  		break;  	case "managingeditor":  		channel.ManagingEditor = elementText.ToString ();  		break;  	case "webmaster":  		channel.WebMaster = elementText.ToString ();  		break;  	case "rating":  		channel.Rating = elementText.ToString ();  		break;  	case "pubdate":  		try {  			channel.PubDate = DateTime.Parse (elementText.ToString ());  		}  		catch (Exception e) {  			exceptions.Add (e);  		}  		break;  	case "lastbuilddate":  		try {  			channel.LastBuildDate = DateTime.Parse (elementText.ToString ());  		}  		catch (Exception e) {  			exceptions.Add (e);  		}  		break;  	case "generator":  		channel.Generator = elementText.ToString ();  		break;  	case "docs":  		channel.Docs = elementText.ToString ();  		break;  	case "ttl":  		try {  			channel.TimeToLive = int.Parse (elementText.ToString ());  		}  		catch (Exception e) {  			exceptions.Add (e);  		}  		break;  	}  	break;  case "image":  	switch (childElementName) {  	case "url":  		try {  			image.Url = new Uri (elementText.ToString ());  		}  		catch (Exception e) {  			exceptions.Add (e);  		}  		break;  	case "title":  		image.Title = elementText.ToString ();  		break;  	case "link":  		try {  			image.Link = new Uri (elementText.ToString ());  		}  		catch (Exception e) {  			exceptions.Add (e);  		}  		break;  	case "description":  		image.Description = elementText.ToString ();  		break;  	case "width":  		try {  			image.Width = Byte.Parse (elementText.ToString ());  		}  		catch (Exception e) {  			exceptions.Add (e);  		}  		break;  	case "height":  		try {  			image.Height = Byte.Parse (elementText.ToString ());  		}  		catch (Exception e) {  			exceptions.Add (e);  		}  		break;  	}  	break;  case "textinput":  	switch (childElementName) {  	case "title":  		textInput.Title = elementText.ToString ();  		break;  	case "description":  		textInput.Description = elementText.ToString ();  		break;  	case "name":  		textInput.Name = elementText.ToString ();  		break;  	case "link":  		try {  			textInput.Link = new Uri (elementText.ToString ());  		}  		catch (Exception e) {  			exceptions.Add (e);  		}  		break;  	}  	break;  case "skipdays":  	if (childElementName == "day")  		switch (elementText.ToString ().ToLower ()) {  		case "monday":  			channel.SkipDays [0] = true;  			break;  		case "tuesday":  			channel.SkipDays [1] = true;  			break;  		case "wednesday":  			channel.SkipDays [2] = true;  			break;  		case "thursday":  			channel.SkipDays [3] = true;  			break;  		case "friday":  			channel.SkipDays [4] = true;  			break;  		case "saturday":  			channel.SkipDays [5] = true;  			break;  		case "sunday":  			channel.SkipDays [6] = true;  			break;  		}  	break;  case "skiphours":  	if (childElementName == "hour")  		channel.SkipHours [Byte.Parse (elementText.ToString ().ToLower ())] = true;  	break;  }  
Magic Number,Rss,RssReader,C:\repos\dblock_sncore\Rss.Net\RssReader.cs,Read,The following statement contains a magic number: switch (parentElementName) // parent element  {  case "item":  	switch (childElementName) {  	case "title":  		item.Title = elementText.ToString ();  		break;  	case "link":  		item.Link = new Uri (elementText.ToString ());  		break;  	case "description":  		item.Description = elementText.ToString ();  		break;  	case "content:encoded":  		item.Content = elementText.ToString ();  		break;  	case "author":  	case "dc:creator":  		item.Author = elementText.ToString ();  		break;  	case "comments":  		item.Comments = elementText.ToString ();  		break;  	case "dc:date":  	case "pubdate":  		try {  			item.PubDate = DateTime.Parse (elementText.ToString ());  		}  		catch (Exception e) {  			try {  				string tmp = elementText.ToString ();  				tmp = tmp.Substring (0' tmp.Length - 5);  				tmp += "GMT";  				item.PubDate = DateTime.Parse (tmp);  			}  			catch {  				exceptions.Add (e);  			}  		}  		break;  	}  	break;  case "channel":  	switch (childElementName) {  	case "title":  		channel.Title = elementText.ToString ();  		break;  	case "link":  		try {  			channel.Link = new Uri (elementText.ToString ());  		}  		catch (Exception e) {  			exceptions.Add (e);  		}  		break;  	case "description":  		channel.Description = elementText.ToString ();  		break;  	case "language":  		channel.Language = elementText.ToString ();  		break;  	case "copyright":  		channel.Copyright = elementText.ToString ();  		break;  	case "managingeditor":  		channel.ManagingEditor = elementText.ToString ();  		break;  	case "webmaster":  		channel.WebMaster = elementText.ToString ();  		break;  	case "rating":  		channel.Rating = elementText.ToString ();  		break;  	case "pubdate":  		try {  			channel.PubDate = DateTime.Parse (elementText.ToString ());  		}  		catch (Exception e) {  			exceptions.Add (e);  		}  		break;  	case "lastbuilddate":  		try {  			channel.LastBuildDate = DateTime.Parse (elementText.ToString ());  		}  		catch (Exception e) {  			exceptions.Add (e);  		}  		break;  	case "generator":  		channel.Generator = elementText.ToString ();  		break;  	case "docs":  		channel.Docs = elementText.ToString ();  		break;  	case "ttl":  		try {  			channel.TimeToLive = int.Parse (elementText.ToString ());  		}  		catch (Exception e) {  			exceptions.Add (e);  		}  		break;  	}  	break;  case "image":  	switch (childElementName) {  	case "url":  		try {  			image.Url = new Uri (elementText.ToString ());  		}  		catch (Exception e) {  			exceptions.Add (e);  		}  		break;  	case "title":  		image.Title = elementText.ToString ();  		break;  	case "link":  		try {  			image.Link = new Uri (elementText.ToString ());  		}  		catch (Exception e) {  			exceptions.Add (e);  		}  		break;  	case "description":  		image.Description = elementText.ToString ();  		break;  	case "width":  		try {  			image.Width = Byte.Parse (elementText.ToString ());  		}  		catch (Exception e) {  			exceptions.Add (e);  		}  		break;  	case "height":  		try {  			image.Height = Byte.Parse (elementText.ToString ());  		}  		catch (Exception e) {  			exceptions.Add (e);  		}  		break;  	}  	break;  case "textinput":  	switch (childElementName) {  	case "title":  		textInput.Title = elementText.ToString ();  		break;  	case "description":  		textInput.Description = elementText.ToString ();  		break;  	case "name":  		textInput.Name = elementText.ToString ();  		break;  	case "link":  		try {  			textInput.Link = new Uri (elementText.ToString ());  		}  		catch (Exception e) {  			exceptions.Add (e);  		}  		break;  	}  	break;  case "skipdays":  	if (childElementName == "day")  		switch (elementText.ToString ().ToLower ()) {  		case "monday":  			channel.SkipDays [0] = true;  			break;  		case "tuesday":  			channel.SkipDays [1] = true;  			break;  		case "wednesday":  			channel.SkipDays [2] = true;  			break;  		case "thursday":  			channel.SkipDays [3] = true;  			break;  		case "friday":  			channel.SkipDays [4] = true;  			break;  		case "saturday":  			channel.SkipDays [5] = true;  			break;  		case "sunday":  			channel.SkipDays [6] = true;  			break;  		}  	break;  case "skiphours":  	if (childElementName == "hour")  		channel.SkipHours [Byte.Parse (elementText.ToString ().ToLower ())] = true;  	break;  }  
Magic Number,Rss,RssReader,C:\repos\dblock_sncore\Rss.Net\RssReader.cs,Read,The following statement contains a magic number: switch (parentElementName) // parent element  {  case "item":  	switch (childElementName) {  	case "title":  		item.Title = elementText.ToString ();  		break;  	case "link":  		item.Link = new Uri (elementText.ToString ());  		break;  	case "description":  		item.Description = elementText.ToString ();  		break;  	case "content:encoded":  		item.Content = elementText.ToString ();  		break;  	case "author":  	case "dc:creator":  		item.Author = elementText.ToString ();  		break;  	case "comments":  		item.Comments = elementText.ToString ();  		break;  	case "dc:date":  	case "pubdate":  		try {  			item.PubDate = DateTime.Parse (elementText.ToString ());  		}  		catch (Exception e) {  			try {  				string tmp = elementText.ToString ();  				tmp = tmp.Substring (0' tmp.Length - 5);  				tmp += "GMT";  				item.PubDate = DateTime.Parse (tmp);  			}  			catch {  				exceptions.Add (e);  			}  		}  		break;  	}  	break;  case "channel":  	switch (childElementName) {  	case "title":  		channel.Title = elementText.ToString ();  		break;  	case "link":  		try {  			channel.Link = new Uri (elementText.ToString ());  		}  		catch (Exception e) {  			exceptions.Add (e);  		}  		break;  	case "description":  		channel.Description = elementText.ToString ();  		break;  	case "language":  		channel.Language = elementText.ToString ();  		break;  	case "copyright":  		channel.Copyright = elementText.ToString ();  		break;  	case "managingeditor":  		channel.ManagingEditor = elementText.ToString ();  		break;  	case "webmaster":  		channel.WebMaster = elementText.ToString ();  		break;  	case "rating":  		channel.Rating = elementText.ToString ();  		break;  	case "pubdate":  		try {  			channel.PubDate = DateTime.Parse (elementText.ToString ());  		}  		catch (Exception e) {  			exceptions.Add (e);  		}  		break;  	case "lastbuilddate":  		try {  			channel.LastBuildDate = DateTime.Parse (elementText.ToString ());  		}  		catch (Exception e) {  			exceptions.Add (e);  		}  		break;  	case "generator":  		channel.Generator = elementText.ToString ();  		break;  	case "docs":  		channel.Docs = elementText.ToString ();  		break;  	case "ttl":  		try {  			channel.TimeToLive = int.Parse (elementText.ToString ());  		}  		catch (Exception e) {  			exceptions.Add (e);  		}  		break;  	}  	break;  case "image":  	switch (childElementName) {  	case "url":  		try {  			image.Url = new Uri (elementText.ToString ());  		}  		catch (Exception e) {  			exceptions.Add (e);  		}  		break;  	case "title":  		image.Title = elementText.ToString ();  		break;  	case "link":  		try {  			image.Link = new Uri (elementText.ToString ());  		}  		catch (Exception e) {  			exceptions.Add (e);  		}  		break;  	case "description":  		image.Description = elementText.ToString ();  		break;  	case "width":  		try {  			image.Width = Byte.Parse (elementText.ToString ());  		}  		catch (Exception e) {  			exceptions.Add (e);  		}  		break;  	case "height":  		try {  			image.Height = Byte.Parse (elementText.ToString ());  		}  		catch (Exception e) {  			exceptions.Add (e);  		}  		break;  	}  	break;  case "textinput":  	switch (childElementName) {  	case "title":  		textInput.Title = elementText.ToString ();  		break;  	case "description":  		textInput.Description = elementText.ToString ();  		break;  	case "name":  		textInput.Name = elementText.ToString ();  		break;  	case "link":  		try {  			textInput.Link = new Uri (elementText.ToString ());  		}  		catch (Exception e) {  			exceptions.Add (e);  		}  		break;  	}  	break;  case "skipdays":  	if (childElementName == "day")  		switch (elementText.ToString ().ToLower ()) {  		case "monday":  			channel.SkipDays [0] = true;  			break;  		case "tuesday":  			channel.SkipDays [1] = true;  			break;  		case "wednesday":  			channel.SkipDays [2] = true;  			break;  		case "thursday":  			channel.SkipDays [3] = true;  			break;  		case "friday":  			channel.SkipDays [4] = true;  			break;  		case "saturday":  			channel.SkipDays [5] = true;  			break;  		case "sunday":  			channel.SkipDays [6] = true;  			break;  		}  	break;  case "skiphours":  	if (childElementName == "hour")  		channel.SkipHours [Byte.Parse (elementText.ToString ().ToLower ())] = true;  	break;  }  
Magic Number,Rss,RssReader,C:\repos\dblock_sncore\Rss.Net\RssReader.cs,Read,The following statement contains a magic number: switch (parentElementName) // parent element  {  case "item":  	switch (childElementName) {  	case "title":  		item.Title = elementText.ToString ();  		break;  	case "link":  		item.Link = new Uri (elementText.ToString ());  		break;  	case "description":  		item.Description = elementText.ToString ();  		break;  	case "content:encoded":  		item.Content = elementText.ToString ();  		break;  	case "author":  	case "dc:creator":  		item.Author = elementText.ToString ();  		break;  	case "comments":  		item.Comments = elementText.ToString ();  		break;  	case "dc:date":  	case "pubdate":  		try {  			item.PubDate = DateTime.Parse (elementText.ToString ());  		}  		catch (Exception e) {  			try {  				string tmp = elementText.ToString ();  				tmp = tmp.Substring (0' tmp.Length - 5);  				tmp += "GMT";  				item.PubDate = DateTime.Parse (tmp);  			}  			catch {  				exceptions.Add (e);  			}  		}  		break;  	}  	break;  case "channel":  	switch (childElementName) {  	case "title":  		channel.Title = elementText.ToString ();  		break;  	case "link":  		try {  			channel.Link = new Uri (elementText.ToString ());  		}  		catch (Exception e) {  			exceptions.Add (e);  		}  		break;  	case "description":  		channel.Description = elementText.ToString ();  		break;  	case "language":  		channel.Language = elementText.ToString ();  		break;  	case "copyright":  		channel.Copyright = elementText.ToString ();  		break;  	case "managingeditor":  		channel.ManagingEditor = elementText.ToString ();  		break;  	case "webmaster":  		channel.WebMaster = elementText.ToString ();  		break;  	case "rating":  		channel.Rating = elementText.ToString ();  		break;  	case "pubdate":  		try {  			channel.PubDate = DateTime.Parse (elementText.ToString ());  		}  		catch (Exception e) {  			exceptions.Add (e);  		}  		break;  	case "lastbuilddate":  		try {  			channel.LastBuildDate = DateTime.Parse (elementText.ToString ());  		}  		catch (Exception e) {  			exceptions.Add (e);  		}  		break;  	case "generator":  		channel.Generator = elementText.ToString ();  		break;  	case "docs":  		channel.Docs = elementText.ToString ();  		break;  	case "ttl":  		try {  			channel.TimeToLive = int.Parse (elementText.ToString ());  		}  		catch (Exception e) {  			exceptions.Add (e);  		}  		break;  	}  	break;  case "image":  	switch (childElementName) {  	case "url":  		try {  			image.Url = new Uri (elementText.ToString ());  		}  		catch (Exception e) {  			exceptions.Add (e);  		}  		break;  	case "title":  		image.Title = elementText.ToString ();  		break;  	case "link":  		try {  			image.Link = new Uri (elementText.ToString ());  		}  		catch (Exception e) {  			exceptions.Add (e);  		}  		break;  	case "description":  		image.Description = elementText.ToString ();  		break;  	case "width":  		try {  			image.Width = Byte.Parse (elementText.ToString ());  		}  		catch (Exception e) {  			exceptions.Add (e);  		}  		break;  	case "height":  		try {  			image.Height = Byte.Parse (elementText.ToString ());  		}  		catch (Exception e) {  			exceptions.Add (e);  		}  		break;  	}  	break;  case "textinput":  	switch (childElementName) {  	case "title":  		textInput.Title = elementText.ToString ();  		break;  	case "description":  		textInput.Description = elementText.ToString ();  		break;  	case "name":  		textInput.Name = elementText.ToString ();  		break;  	case "link":  		try {  			textInput.Link = new Uri (elementText.ToString ());  		}  		catch (Exception e) {  			exceptions.Add (e);  		}  		break;  	}  	break;  case "skipdays":  	if (childElementName == "day")  		switch (elementText.ToString ().ToLower ()) {  		case "monday":  			channel.SkipDays [0] = true;  			break;  		case "tuesday":  			channel.SkipDays [1] = true;  			break;  		case "wednesday":  			channel.SkipDays [2] = true;  			break;  		case "thursday":  			channel.SkipDays [3] = true;  			break;  		case "friday":  			channel.SkipDays [4] = true;  			break;  		case "saturday":  			channel.SkipDays [5] = true;  			break;  		case "sunday":  			channel.SkipDays [6] = true;  			break;  		}  	break;  case "skiphours":  	if (childElementName == "hour")  		channel.SkipHours [Byte.Parse (elementText.ToString ().ToLower ())] = true;  	break;  }  
Magic Number,Rss,RssReader,C:\repos\dblock_sncore\Rss.Net\RssReader.cs,Read,The following statement contains a magic number: switch (parentElementName) // parent element  {  case "item":  	switch (childElementName) {  	case "title":  		item.Title = elementText.ToString ();  		break;  	case "link":  		item.Link = new Uri (elementText.ToString ());  		break;  	case "description":  		item.Description = elementText.ToString ();  		break;  	case "content:encoded":  		item.Content = elementText.ToString ();  		break;  	case "author":  	case "dc:creator":  		item.Author = elementText.ToString ();  		break;  	case "comments":  		item.Comments = elementText.ToString ();  		break;  	case "dc:date":  	case "pubdate":  		try {  			item.PubDate = DateTime.Parse (elementText.ToString ());  		}  		catch (Exception e) {  			try {  				string tmp = elementText.ToString ();  				tmp = tmp.Substring (0' tmp.Length - 5);  				tmp += "GMT";  				item.PubDate = DateTime.Parse (tmp);  			}  			catch {  				exceptions.Add (e);  			}  		}  		break;  	}  	break;  case "channel":  	switch (childElementName) {  	case "title":  		channel.Title = elementText.ToString ();  		break;  	case "link":  		try {  			channel.Link = new Uri (elementText.ToString ());  		}  		catch (Exception e) {  			exceptions.Add (e);  		}  		break;  	case "description":  		channel.Description = elementText.ToString ();  		break;  	case "language":  		channel.Language = elementText.ToString ();  		break;  	case "copyright":  		channel.Copyright = elementText.ToString ();  		break;  	case "managingeditor":  		channel.ManagingEditor = elementText.ToString ();  		break;  	case "webmaster":  		channel.WebMaster = elementText.ToString ();  		break;  	case "rating":  		channel.Rating = elementText.ToString ();  		break;  	case "pubdate":  		try {  			channel.PubDate = DateTime.Parse (elementText.ToString ());  		}  		catch (Exception e) {  			exceptions.Add (e);  		}  		break;  	case "lastbuilddate":  		try {  			channel.LastBuildDate = DateTime.Parse (elementText.ToString ());  		}  		catch (Exception e) {  			exceptions.Add (e);  		}  		break;  	case "generator":  		channel.Generator = elementText.ToString ();  		break;  	case "docs":  		channel.Docs = elementText.ToString ();  		break;  	case "ttl":  		try {  			channel.TimeToLive = int.Parse (elementText.ToString ());  		}  		catch (Exception e) {  			exceptions.Add (e);  		}  		break;  	}  	break;  case "image":  	switch (childElementName) {  	case "url":  		try {  			image.Url = new Uri (elementText.ToString ());  		}  		catch (Exception e) {  			exceptions.Add (e);  		}  		break;  	case "title":  		image.Title = elementText.ToString ();  		break;  	case "link":  		try {  			image.Link = new Uri (elementText.ToString ());  		}  		catch (Exception e) {  			exceptions.Add (e);  		}  		break;  	case "description":  		image.Description = elementText.ToString ();  		break;  	case "width":  		try {  			image.Width = Byte.Parse (elementText.ToString ());  		}  		catch (Exception e) {  			exceptions.Add (e);  		}  		break;  	case "height":  		try {  			image.Height = Byte.Parse (elementText.ToString ());  		}  		catch (Exception e) {  			exceptions.Add (e);  		}  		break;  	}  	break;  case "textinput":  	switch (childElementName) {  	case "title":  		textInput.Title = elementText.ToString ();  		break;  	case "description":  		textInput.Description = elementText.ToString ();  		break;  	case "name":  		textInput.Name = elementText.ToString ();  		break;  	case "link":  		try {  			textInput.Link = new Uri (elementText.ToString ());  		}  		catch (Exception e) {  			exceptions.Add (e);  		}  		break;  	}  	break;  case "skipdays":  	if (childElementName == "day")  		switch (elementText.ToString ().ToLower ()) {  		case "monday":  			channel.SkipDays [0] = true;  			break;  		case "tuesday":  			channel.SkipDays [1] = true;  			break;  		case "wednesday":  			channel.SkipDays [2] = true;  			break;  		case "thursday":  			channel.SkipDays [3] = true;  			break;  		case "friday":  			channel.SkipDays [4] = true;  			break;  		case "saturday":  			channel.SkipDays [5] = true;  			break;  		case "sunday":  			channel.SkipDays [6] = true;  			break;  		}  	break;  case "skiphours":  	if (childElementName == "hour")  		channel.SkipHours [Byte.Parse (elementText.ToString ().ToLower ())] = true;  	break;  }  
Magic Number,Rss,RssReader,C:\repos\dblock_sncore\Rss.Net\RssReader.cs,Read,The following statement contains a magic number: switch (parentElementName) // parent element  {  case "item":  	switch (childElementName) {  	case "title":  		item.Title = elementText.ToString ();  		break;  	case "link":  		item.Link = new Uri (elementText.ToString ());  		break;  	case "description":  		item.Description = elementText.ToString ();  		break;  	case "content:encoded":  		item.Content = elementText.ToString ();  		break;  	case "author":  	case "dc:creator":  		item.Author = elementText.ToString ();  		break;  	case "comments":  		item.Comments = elementText.ToString ();  		break;  	case "dc:date":  	case "pubdate":  		try {  			item.PubDate = DateTime.Parse (elementText.ToString ());  		}  		catch (Exception e) {  			try {  				string tmp = elementText.ToString ();  				tmp = tmp.Substring (0' tmp.Length - 5);  				tmp += "GMT";  				item.PubDate = DateTime.Parse (tmp);  			}  			catch {  				exceptions.Add (e);  			}  		}  		break;  	}  	break;  case "channel":  	switch (childElementName) {  	case "title":  		channel.Title = elementText.ToString ();  		break;  	case "link":  		try {  			channel.Link = new Uri (elementText.ToString ());  		}  		catch (Exception e) {  			exceptions.Add (e);  		}  		break;  	case "description":  		channel.Description = elementText.ToString ();  		break;  	case "language":  		channel.Language = elementText.ToString ();  		break;  	case "copyright":  		channel.Copyright = elementText.ToString ();  		break;  	case "managingeditor":  		channel.ManagingEditor = elementText.ToString ();  		break;  	case "webmaster":  		channel.WebMaster = elementText.ToString ();  		break;  	case "rating":  		channel.Rating = elementText.ToString ();  		break;  	case "pubdate":  		try {  			channel.PubDate = DateTime.Parse (elementText.ToString ());  		}  		catch (Exception e) {  			exceptions.Add (e);  		}  		break;  	case "lastbuilddate":  		try {  			channel.LastBuildDate = DateTime.Parse (elementText.ToString ());  		}  		catch (Exception e) {  			exceptions.Add (e);  		}  		break;  	case "generator":  		channel.Generator = elementText.ToString ();  		break;  	case "docs":  		channel.Docs = elementText.ToString ();  		break;  	case "ttl":  		try {  			channel.TimeToLive = int.Parse (elementText.ToString ());  		}  		catch (Exception e) {  			exceptions.Add (e);  		}  		break;  	}  	break;  case "image":  	switch (childElementName) {  	case "url":  		try {  			image.Url = new Uri (elementText.ToString ());  		}  		catch (Exception e) {  			exceptions.Add (e);  		}  		break;  	case "title":  		image.Title = elementText.ToString ();  		break;  	case "link":  		try {  			image.Link = new Uri (elementText.ToString ());  		}  		catch (Exception e) {  			exceptions.Add (e);  		}  		break;  	case "description":  		image.Description = elementText.ToString ();  		break;  	case "width":  		try {  			image.Width = Byte.Parse (elementText.ToString ());  		}  		catch (Exception e) {  			exceptions.Add (e);  		}  		break;  	case "height":  		try {  			image.Height = Byte.Parse (elementText.ToString ());  		}  		catch (Exception e) {  			exceptions.Add (e);  		}  		break;  	}  	break;  case "textinput":  	switch (childElementName) {  	case "title":  		textInput.Title = elementText.ToString ();  		break;  	case "description":  		textInput.Description = elementText.ToString ();  		break;  	case "name":  		textInput.Name = elementText.ToString ();  		break;  	case "link":  		try {  			textInput.Link = new Uri (elementText.ToString ());  		}  		catch (Exception e) {  			exceptions.Add (e);  		}  		break;  	}  	break;  case "skipdays":  	if (childElementName == "day")  		switch (elementText.ToString ().ToLower ()) {  		case "monday":  			channel.SkipDays [0] = true;  			break;  		case "tuesday":  			channel.SkipDays [1] = true;  			break;  		case "wednesday":  			channel.SkipDays [2] = true;  			break;  		case "thursday":  			channel.SkipDays [3] = true;  			break;  		case "friday":  			channel.SkipDays [4] = true;  			break;  		case "saturday":  			channel.SkipDays [5] = true;  			break;  		case "sunday":  			channel.SkipDays [6] = true;  			break;  		}  	break;  case "skiphours":  	if (childElementName == "hour")  		channel.SkipHours [Byte.Parse (elementText.ToString ().ToLower ())] = true;  	break;  }  
Magic Number,Rss,RssReader,C:\repos\dblock_sncore\Rss.Net\RssReader.cs,Read,The following statement contains a magic number: switch (childElementName) {  case "title":  	item.Title = elementText.ToString ();  	break;  case "link":  	item.Link = new Uri (elementText.ToString ());  	break;  case "description":  	item.Description = elementText.ToString ();  	break;  case "content:encoded":  	item.Content = elementText.ToString ();  	break;  case "author":  case "dc:creator":  	item.Author = elementText.ToString ();  	break;  case "comments":  	item.Comments = elementText.ToString ();  	break;  case "dc:date":  case "pubdate":  	try {  		item.PubDate = DateTime.Parse (elementText.ToString ());  	}  	catch (Exception e) {  		try {  			string tmp = elementText.ToString ();  			tmp = tmp.Substring (0' tmp.Length - 5);  			tmp += "GMT";  			item.PubDate = DateTime.Parse (tmp);  		}  		catch {  			exceptions.Add (e);  		}  	}  	break;  }  
Magic Number,Rss,RssReader,C:\repos\dblock_sncore\Rss.Net\RssReader.cs,Read,The following statement contains a magic number: try {  	item.PubDate = DateTime.Parse (elementText.ToString ());  }  catch (Exception e) {  	try {  		string tmp = elementText.ToString ();  		tmp = tmp.Substring (0' tmp.Length - 5);  		tmp += "GMT";  		item.PubDate = DateTime.Parse (tmp);  	}  	catch {  		exceptions.Add (e);  	}  }  
Magic Number,Rss,RssReader,C:\repos\dblock_sncore\Rss.Net\RssReader.cs,Read,The following statement contains a magic number: try {  	string tmp = elementText.ToString ();  	tmp = tmp.Substring (0' tmp.Length - 5);  	tmp += "GMT";  	item.PubDate = DateTime.Parse (tmp);  }  catch {  	exceptions.Add (e);  }  
Magic Number,Rss,RssReader,C:\repos\dblock_sncore\Rss.Net\RssReader.cs,Read,The following statement contains a magic number: tmp = tmp.Substring (0' tmp.Length - 5);  
Magic Number,Rss,RssReader,C:\repos\dblock_sncore\Rss.Net\RssReader.cs,Read,The following statement contains a magic number: if (childElementName == "day")  	switch (elementText.ToString ().ToLower ()) {  	case "monday":  		channel.SkipDays [0] = true;  		break;  	case "tuesday":  		channel.SkipDays [1] = true;  		break;  	case "wednesday":  		channel.SkipDays [2] = true;  		break;  	case "thursday":  		channel.SkipDays [3] = true;  		break;  	case "friday":  		channel.SkipDays [4] = true;  		break;  	case "saturday":  		channel.SkipDays [5] = true;  		break;  	case "sunday":  		channel.SkipDays [6] = true;  		break;  	}  
Magic Number,Rss,RssReader,C:\repos\dblock_sncore\Rss.Net\RssReader.cs,Read,The following statement contains a magic number: if (childElementName == "day")  	switch (elementText.ToString ().ToLower ()) {  	case "monday":  		channel.SkipDays [0] = true;  		break;  	case "tuesday":  		channel.SkipDays [1] = true;  		break;  	case "wednesday":  		channel.SkipDays [2] = true;  		break;  	case "thursday":  		channel.SkipDays [3] = true;  		break;  	case "friday":  		channel.SkipDays [4] = true;  		break;  	case "saturday":  		channel.SkipDays [5] = true;  		break;  	case "sunday":  		channel.SkipDays [6] = true;  		break;  	}  
Magic Number,Rss,RssReader,C:\repos\dblock_sncore\Rss.Net\RssReader.cs,Read,The following statement contains a magic number: if (childElementName == "day")  	switch (elementText.ToString ().ToLower ()) {  	case "monday":  		channel.SkipDays [0] = true;  		break;  	case "tuesday":  		channel.SkipDays [1] = true;  		break;  	case "wednesday":  		channel.SkipDays [2] = true;  		break;  	case "thursday":  		channel.SkipDays [3] = true;  		break;  	case "friday":  		channel.SkipDays [4] = true;  		break;  	case "saturday":  		channel.SkipDays [5] = true;  		break;  	case "sunday":  		channel.SkipDays [6] = true;  		break;  	}  
Magic Number,Rss,RssReader,C:\repos\dblock_sncore\Rss.Net\RssReader.cs,Read,The following statement contains a magic number: if (childElementName == "day")  	switch (elementText.ToString ().ToLower ()) {  	case "monday":  		channel.SkipDays [0] = true;  		break;  	case "tuesday":  		channel.SkipDays [1] = true;  		break;  	case "wednesday":  		channel.SkipDays [2] = true;  		break;  	case "thursday":  		channel.SkipDays [3] = true;  		break;  	case "friday":  		channel.SkipDays [4] = true;  		break;  	case "saturday":  		channel.SkipDays [5] = true;  		break;  	case "sunday":  		channel.SkipDays [6] = true;  		break;  	}  
Magic Number,Rss,RssReader,C:\repos\dblock_sncore\Rss.Net\RssReader.cs,Read,The following statement contains a magic number: if (childElementName == "day")  	switch (elementText.ToString ().ToLower ()) {  	case "monday":  		channel.SkipDays [0] = true;  		break;  	case "tuesday":  		channel.SkipDays [1] = true;  		break;  	case "wednesday":  		channel.SkipDays [2] = true;  		break;  	case "thursday":  		channel.SkipDays [3] = true;  		break;  	case "friday":  		channel.SkipDays [4] = true;  		break;  	case "saturday":  		channel.SkipDays [5] = true;  		break;  	case "sunday":  		channel.SkipDays [6] = true;  		break;  	}  
Magic Number,Rss,RssReader,C:\repos\dblock_sncore\Rss.Net\RssReader.cs,Read,The following statement contains a magic number: switch (elementText.ToString ().ToLower ()) {  case "monday":  	channel.SkipDays [0] = true;  	break;  case "tuesday":  	channel.SkipDays [1] = true;  	break;  case "wednesday":  	channel.SkipDays [2] = true;  	break;  case "thursday":  	channel.SkipDays [3] = true;  	break;  case "friday":  	channel.SkipDays [4] = true;  	break;  case "saturday":  	channel.SkipDays [5] = true;  	break;  case "sunday":  	channel.SkipDays [6] = true;  	break;  }  
Magic Number,Rss,RssReader,C:\repos\dblock_sncore\Rss.Net\RssReader.cs,Read,The following statement contains a magic number: switch (elementText.ToString ().ToLower ()) {  case "monday":  	channel.SkipDays [0] = true;  	break;  case "tuesday":  	channel.SkipDays [1] = true;  	break;  case "wednesday":  	channel.SkipDays [2] = true;  	break;  case "thursday":  	channel.SkipDays [3] = true;  	break;  case "friday":  	channel.SkipDays [4] = true;  	break;  case "saturday":  	channel.SkipDays [5] = true;  	break;  case "sunday":  	channel.SkipDays [6] = true;  	break;  }  
Magic Number,Rss,RssReader,C:\repos\dblock_sncore\Rss.Net\RssReader.cs,Read,The following statement contains a magic number: switch (elementText.ToString ().ToLower ()) {  case "monday":  	channel.SkipDays [0] = true;  	break;  case "tuesday":  	channel.SkipDays [1] = true;  	break;  case "wednesday":  	channel.SkipDays [2] = true;  	break;  case "thursday":  	channel.SkipDays [3] = true;  	break;  case "friday":  	channel.SkipDays [4] = true;  	break;  case "saturday":  	channel.SkipDays [5] = true;  	break;  case "sunday":  	channel.SkipDays [6] = true;  	break;  }  
Magic Number,Rss,RssReader,C:\repos\dblock_sncore\Rss.Net\RssReader.cs,Read,The following statement contains a magic number: switch (elementText.ToString ().ToLower ()) {  case "monday":  	channel.SkipDays [0] = true;  	break;  case "tuesday":  	channel.SkipDays [1] = true;  	break;  case "wednesday":  	channel.SkipDays [2] = true;  	break;  case "thursday":  	channel.SkipDays [3] = true;  	break;  case "friday":  	channel.SkipDays [4] = true;  	break;  case "saturday":  	channel.SkipDays [5] = true;  	break;  case "sunday":  	channel.SkipDays [6] = true;  	break;  }  
Magic Number,Rss,RssReader,C:\repos\dblock_sncore\Rss.Net\RssReader.cs,Read,The following statement contains a magic number: switch (elementText.ToString ().ToLower ()) {  case "monday":  	channel.SkipDays [0] = true;  	break;  case "tuesday":  	channel.SkipDays [1] = true;  	break;  case "wednesday":  	channel.SkipDays [2] = true;  	break;  case "thursday":  	channel.SkipDays [3] = true;  	break;  case "friday":  	channel.SkipDays [4] = true;  	break;  case "saturday":  	channel.SkipDays [5] = true;  	break;  case "sunday":  	channel.SkipDays [6] = true;  	break;  }  
Magic Number,Rss,RssReader,C:\repos\dblock_sncore\Rss.Net\RssReader.cs,Read,The following statement contains a magic number: channel.SkipDays [2] = true;  
Magic Number,Rss,RssReader,C:\repos\dblock_sncore\Rss.Net\RssReader.cs,Read,The following statement contains a magic number: channel.SkipDays [3] = true;  
Magic Number,Rss,RssReader,C:\repos\dblock_sncore\Rss.Net\RssReader.cs,Read,The following statement contains a magic number: channel.SkipDays [4] = true;  
Magic Number,Rss,RssReader,C:\repos\dblock_sncore\Rss.Net\RssReader.cs,Read,The following statement contains a magic number: channel.SkipDays [5] = true;  
Magic Number,Rss,RssReader,C:\repos\dblock_sncore\Rss.Net\RssReader.cs,Read,The following statement contains a magic number: channel.SkipDays [6] = true;  
Magic Number,Rss,RssWriter,C:\repos\dblock_sncore\Rss.Net\RssWriter.cs,writeChannel,The following statement contains a magic number: switch (rssVersion) {  case RssVersion.RSS091:  case RssVersion.RSS092:  case RssVersion.RSS20:  	WriteElement ("language"' channel.Language' rssVersion == RssVersion.RSS091);  	WriteElement ("copyright"' channel.Copyright' false);  	WriteElement ("managingEditor"' channel.ManagingEditor' false);  	WriteElement ("webMaster"' channel.WebMaster' false);  	WriteElement ("pubDate"' channel.PubDate' false);  	WriteElement ("lastBuildDate"' channel.LastBuildDate' false);  	if (channel.Docs != RssDefault.String)  		WriteElement ("docs"' channel.Docs' false);  	else  		switch (rssVersion) {  		case RssVersion.RSS091:  			WriteElement ("docs"' "http://my.netscape.com/publish/formats/rss-spec-0.91.html"' false);  			break;  		case RssVersion.RSS092:  			WriteElement ("docs"' "http://backend.userland.com/rss092"' false);  			break;  		case RssVersion.RSS20:  			WriteElement ("docs"' "http://backend.userland.com/rss"' false);  			break;  		}  	WriteElement ("rating"' channel.Rating' false);  	string[] Days =  {  		"monday"'  		"tuesday"'  		"wednesday"'  		"thursday"'  		"friday"'  		"saturday"'  		"sunday"  	};  	for (int i = 0; i <= 6; i++)  		if (channel.SkipDays [i]) {  			writer.WriteStartElement ("skipDays");  			for (int i2 = 0; i2 <= 6; i2++)  				if (channel.SkipDays [i2])  					WriteElement ("day"' Days [i2]' false);  			writer.WriteEndElement ();  			break;  		}  	for (int i = 0; i <= 23; i++)  		if (channel.SkipHours [i]) {  			writer.WriteStartElement ("skipHours");  			for (int i2 = 0; i2 <= 23; i2++)  				if (channel.SkipHours [i2])  					WriteElement ("hour"' i2 + 1' false);  			writer.WriteEndElement ();  			break;  		}  	break;  }  
Magic Number,Rss,RssWriter,C:\repos\dblock_sncore\Rss.Net\RssWriter.cs,writeChannel,The following statement contains a magic number: switch (rssVersion) {  case RssVersion.RSS091:  case RssVersion.RSS092:  case RssVersion.RSS20:  	WriteElement ("language"' channel.Language' rssVersion == RssVersion.RSS091);  	WriteElement ("copyright"' channel.Copyright' false);  	WriteElement ("managingEditor"' channel.ManagingEditor' false);  	WriteElement ("webMaster"' channel.WebMaster' false);  	WriteElement ("pubDate"' channel.PubDate' false);  	WriteElement ("lastBuildDate"' channel.LastBuildDate' false);  	if (channel.Docs != RssDefault.String)  		WriteElement ("docs"' channel.Docs' false);  	else  		switch (rssVersion) {  		case RssVersion.RSS091:  			WriteElement ("docs"' "http://my.netscape.com/publish/formats/rss-spec-0.91.html"' false);  			break;  		case RssVersion.RSS092:  			WriteElement ("docs"' "http://backend.userland.com/rss092"' false);  			break;  		case RssVersion.RSS20:  			WriteElement ("docs"' "http://backend.userland.com/rss"' false);  			break;  		}  	WriteElement ("rating"' channel.Rating' false);  	string[] Days =  {  		"monday"'  		"tuesday"'  		"wednesday"'  		"thursday"'  		"friday"'  		"saturday"'  		"sunday"  	};  	for (int i = 0; i <= 6; i++)  		if (channel.SkipDays [i]) {  			writer.WriteStartElement ("skipDays");  			for (int i2 = 0; i2 <= 6; i2++)  				if (channel.SkipDays [i2])  					WriteElement ("day"' Days [i2]' false);  			writer.WriteEndElement ();  			break;  		}  	for (int i = 0; i <= 23; i++)  		if (channel.SkipHours [i]) {  			writer.WriteStartElement ("skipHours");  			for (int i2 = 0; i2 <= 23; i2++)  				if (channel.SkipHours [i2])  					WriteElement ("hour"' i2 + 1' false);  			writer.WriteEndElement ();  			break;  		}  	break;  }  
Magic Number,Rss,RssWriter,C:\repos\dblock_sncore\Rss.Net\RssWriter.cs,writeChannel,The following statement contains a magic number: switch (rssVersion) {  case RssVersion.RSS091:  case RssVersion.RSS092:  case RssVersion.RSS20:  	WriteElement ("language"' channel.Language' rssVersion == RssVersion.RSS091);  	WriteElement ("copyright"' channel.Copyright' false);  	WriteElement ("managingEditor"' channel.ManagingEditor' false);  	WriteElement ("webMaster"' channel.WebMaster' false);  	WriteElement ("pubDate"' channel.PubDate' false);  	WriteElement ("lastBuildDate"' channel.LastBuildDate' false);  	if (channel.Docs != RssDefault.String)  		WriteElement ("docs"' channel.Docs' false);  	else  		switch (rssVersion) {  		case RssVersion.RSS091:  			WriteElement ("docs"' "http://my.netscape.com/publish/formats/rss-spec-0.91.html"' false);  			break;  		case RssVersion.RSS092:  			WriteElement ("docs"' "http://backend.userland.com/rss092"' false);  			break;  		case RssVersion.RSS20:  			WriteElement ("docs"' "http://backend.userland.com/rss"' false);  			break;  		}  	WriteElement ("rating"' channel.Rating' false);  	string[] Days =  {  		"monday"'  		"tuesday"'  		"wednesday"'  		"thursday"'  		"friday"'  		"saturday"'  		"sunday"  	};  	for (int i = 0; i <= 6; i++)  		if (channel.SkipDays [i]) {  			writer.WriteStartElement ("skipDays");  			for (int i2 = 0; i2 <= 6; i2++)  				if (channel.SkipDays [i2])  					WriteElement ("day"' Days [i2]' false);  			writer.WriteEndElement ();  			break;  		}  	for (int i = 0; i <= 23; i++)  		if (channel.SkipHours [i]) {  			writer.WriteStartElement ("skipHours");  			for (int i2 = 0; i2 <= 23; i2++)  				if (channel.SkipHours [i2])  					WriteElement ("hour"' i2 + 1' false);  			writer.WriteEndElement ();  			break;  		}  	break;  }  
Magic Number,Rss,RssWriter,C:\repos\dblock_sncore\Rss.Net\RssWriter.cs,writeChannel,The following statement contains a magic number: switch (rssVersion) {  case RssVersion.RSS091:  case RssVersion.RSS092:  case RssVersion.RSS20:  	WriteElement ("language"' channel.Language' rssVersion == RssVersion.RSS091);  	WriteElement ("copyright"' channel.Copyright' false);  	WriteElement ("managingEditor"' channel.ManagingEditor' false);  	WriteElement ("webMaster"' channel.WebMaster' false);  	WriteElement ("pubDate"' channel.PubDate' false);  	WriteElement ("lastBuildDate"' channel.LastBuildDate' false);  	if (channel.Docs != RssDefault.String)  		WriteElement ("docs"' channel.Docs' false);  	else  		switch (rssVersion) {  		case RssVersion.RSS091:  			WriteElement ("docs"' "http://my.netscape.com/publish/formats/rss-spec-0.91.html"' false);  			break;  		case RssVersion.RSS092:  			WriteElement ("docs"' "http://backend.userland.com/rss092"' false);  			break;  		case RssVersion.RSS20:  			WriteElement ("docs"' "http://backend.userland.com/rss"' false);  			break;  		}  	WriteElement ("rating"' channel.Rating' false);  	string[] Days =  {  		"monday"'  		"tuesday"'  		"wednesday"'  		"thursday"'  		"friday"'  		"saturday"'  		"sunday"  	};  	for (int i = 0; i <= 6; i++)  		if (channel.SkipDays [i]) {  			writer.WriteStartElement ("skipDays");  			for (int i2 = 0; i2 <= 6; i2++)  				if (channel.SkipDays [i2])  					WriteElement ("day"' Days [i2]' false);  			writer.WriteEndElement ();  			break;  		}  	for (int i = 0; i <= 23; i++)  		if (channel.SkipHours [i]) {  			writer.WriteStartElement ("skipHours");  			for (int i2 = 0; i2 <= 23; i2++)  				if (channel.SkipHours [i2])  					WriteElement ("hour"' i2 + 1' false);  			writer.WriteEndElement ();  			break;  		}  	break;  }  
Magic Number,Rss,RssWriter,C:\repos\dblock_sncore\Rss.Net\RssWriter.cs,writeChannel,The following statement contains a magic number: for (int i = 0; i <= 6; i++)  	if (channel.SkipDays [i]) {  		writer.WriteStartElement ("skipDays");  		for (int i2 = 0; i2 <= 6; i2++)  			if (channel.SkipDays [i2])  				WriteElement ("day"' Days [i2]' false);  		writer.WriteEndElement ();  		break;  	}  
Magic Number,Rss,RssWriter,C:\repos\dblock_sncore\Rss.Net\RssWriter.cs,writeChannel,The following statement contains a magic number: for (int i = 0; i <= 6; i++)  	if (channel.SkipDays [i]) {  		writer.WriteStartElement ("skipDays");  		for (int i2 = 0; i2 <= 6; i2++)  			if (channel.SkipDays [i2])  				WriteElement ("day"' Days [i2]' false);  		writer.WriteEndElement ();  		break;  	}  
Magic Number,Rss,RssWriter,C:\repos\dblock_sncore\Rss.Net\RssWriter.cs,writeChannel,The following statement contains a magic number: if (channel.SkipDays [i]) {  	writer.WriteStartElement ("skipDays");  	for (int i2 = 0; i2 <= 6; i2++)  		if (channel.SkipDays [i2])  			WriteElement ("day"' Days [i2]' false);  	writer.WriteEndElement ();  	break;  }  
Magic Number,Rss,RssWriter,C:\repos\dblock_sncore\Rss.Net\RssWriter.cs,writeChannel,The following statement contains a magic number: for (int i2 = 0; i2 <= 6; i2++)  	if (channel.SkipDays [i2])  		WriteElement ("day"' Days [i2]' false);  
Magic Number,Rss,RssWriter,C:\repos\dblock_sncore\Rss.Net\RssWriter.cs,writeChannel,The following statement contains a magic number: for (int i = 0; i <= 23; i++)  	if (channel.SkipHours [i]) {  		writer.WriteStartElement ("skipHours");  		for (int i2 = 0; i2 <= 23; i2++)  			if (channel.SkipHours [i2])  				WriteElement ("hour"' i2 + 1' false);  		writer.WriteEndElement ();  		break;  	}  
Magic Number,Rss,RssWriter,C:\repos\dblock_sncore\Rss.Net\RssWriter.cs,writeChannel,The following statement contains a magic number: for (int i = 0; i <= 23; i++)  	if (channel.SkipHours [i]) {  		writer.WriteStartElement ("skipHours");  		for (int i2 = 0; i2 <= 23; i2++)  			if (channel.SkipHours [i2])  				WriteElement ("hour"' i2 + 1' false);  		writer.WriteEndElement ();  		break;  	}  
Magic Number,Rss,RssWriter,C:\repos\dblock_sncore\Rss.Net\RssWriter.cs,writeChannel,The following statement contains a magic number: if (channel.SkipHours [i]) {  	writer.WriteStartElement ("skipHours");  	for (int i2 = 0; i2 <= 23; i2++)  		if (channel.SkipHours [i2])  			WriteElement ("hour"' i2 + 1' false);  	writer.WriteEndElement ();  	break;  }  
Magic Number,Rss,RssWriter,C:\repos\dblock_sncore\Rss.Net\RssWriter.cs,writeChannel,The following statement contains a magic number: for (int i2 = 0; i2 <= 23; i2++)  	if (channel.SkipHours [i2])  		WriteElement ("hour"' i2 + 1' false);  
Missing Default,Rss,RssFeed,C:\repos\dblock_sncore\Rss.Net\RssFeed.cs,read,The following switch statement is missing a default case: switch (uri.Scheme) {  case "file":  	feed.lastModified = File.GetLastWriteTime (url);  	if ((oldFeed != null) && (feed.LastModified == oldFeed.LastModified)) {  		oldFeed.cached = true;  		return oldFeed;  	}  	stream = new FileStream (url' FileMode.Open' FileAccess.Read' FileShare.ReadWrite);  	break;  case "https":  	goto case "http";  case "http":  	if (request == null)  		request = (HttpWebRequest)WebRequest.Create (uri);  	if (oldFeed != null) {  		request.IfModifiedSince = oldFeed.LastModified;  		request.Headers.Add ("If-None-Match"' oldFeed.ETag);  	}  	try {  		HttpWebResponse response = (HttpWebResponse)request.GetResponse ();  		feed.lastModified = response.LastModified;  		feed.etag = response.Headers ["ETag"];  		try {  			if (response.ContentEncoding != "")  				feed.encoding = Encoding.GetEncoding (response.ContentEncoding);  		}  		catch {  		}  		stream = response.GetResponseStream ();  	}  	catch (WebException we) {  		if (oldFeed != null) {  			oldFeed.cached = true;  			return oldFeed;  		}  		else  			throw we;  		// bad  	}  	break;  }  
Missing Default,Rss,RssReader,C:\repos\dblock_sncore\Rss.Net\RssReader.cs,Read,The following switch statement is missing a default case: switch (reader.Name.ToLower ()) {  case "url":  	try {  		source.Url = new Uri (reader.Value);  	}  	catch (Exception e) {  		exceptions.Add (e);  	}  	break;  }  
Missing Default,Rss,RssReader,C:\repos\dblock_sncore\Rss.Net\RssReader.cs,Read,The following switch statement is missing a default case: switch (reader.Name.ToLower ()) {  case "url":  	try {  		enclosure.Url = new Uri (reader.Value);  	}  	catch (Exception e) {  		exceptions.Add (e);  	}  	break;  case "length":  	try {  		enclosure.Length = int.Parse (reader.Value);  	}  	catch (Exception e) {  		exceptions.Add (e);  	}  	break;  case "type":  	enclosure.Type = reader.Value;  	break;  }  
Missing Default,Rss,RssReader,C:\repos\dblock_sncore\Rss.Net\RssReader.cs,Read,The following switch statement is missing a default case: switch (reader.Name.ToLower ()) {  case "ispermalink":  	try {  		guid.PermaLink = bool.Parse (reader.Value);  	}  	catch (Exception e) {  		exceptions.Add (e);  	}  	break;  }  
Missing Default,Rss,RssReader,C:\repos\dblock_sncore\Rss.Net\RssReader.cs,Read,The following switch statement is missing a default case: switch (reader.Name.ToLower ()) {  case "url":  	goto case "domain";  case "domain":  	category.Domain = reader.Value;  	break;  }  
Missing Default,Rss,RssReader,C:\repos\dblock_sncore\Rss.Net\RssReader.cs,Read,The following switch statement is missing a default case: switch (childElementName) // current element  {  // item classes  case "item":  	rssElement = item;  	readData = false;  	break;  case "source":  	source.Name = elementText.ToString ();  	rssElement = source;  	readData = false;  	break;  case "enclosure":  	rssElement = enclosure;  	readData = false;  	break;  case "guid":  	guid.Name = elementText.ToString ();  	rssElement = guid;  	readData = false;  	break;  case "category":  	// parent is either item or channel  	category.Name = elementText.ToString ();  	rssElement = category;  	readData = false;  	break;  // channel classes  case "channel":  	if (wroteChannel)  		wroteChannel = false;  	else {  		wroteChannel = true;  		rssElement = channel;  		readData = false;  	}  	break;  case "textinput":  	rssElement = textInput;  	readData = false;  	break;  case "image":  	rssElement = image;  	readData = false;  	break;  case "cloud":  	rssElement = cloud;  	readData = false;  	break;  }  
Missing Default,Rss,RssReader,C:\repos\dblock_sncore\Rss.Net\RssReader.cs,Read,The following switch statement is missing a default case: switch (parentElementName) // parent element  {  case "item":  	switch (childElementName) {  	case "title":  		item.Title = elementText.ToString ();  		break;  	case "link":  		item.Link = new Uri (elementText.ToString ());  		break;  	case "description":  		item.Description = elementText.ToString ();  		break;  	case "content:encoded":  		item.Content = elementText.ToString ();  		break;  	case "author":  	case "dc:creator":  		item.Author = elementText.ToString ();  		break;  	case "comments":  		item.Comments = elementText.ToString ();  		break;  	case "dc:date":  	case "pubdate":  		try {  			item.PubDate = DateTime.Parse (elementText.ToString ());  		}  		catch (Exception e) {  			try {  				string tmp = elementText.ToString ();  				tmp = tmp.Substring (0' tmp.Length - 5);  				tmp += "GMT";  				item.PubDate = DateTime.Parse (tmp);  			}  			catch {  				exceptions.Add (e);  			}  		}  		break;  	}  	break;  case "channel":  	switch (childElementName) {  	case "title":  		channel.Title = elementText.ToString ();  		break;  	case "link":  		try {  			channel.Link = new Uri (elementText.ToString ());  		}  		catch (Exception e) {  			exceptions.Add (e);  		}  		break;  	case "description":  		channel.Description = elementText.ToString ();  		break;  	case "language":  		channel.Language = elementText.ToString ();  		break;  	case "copyright":  		channel.Copyright = elementText.ToString ();  		break;  	case "managingeditor":  		channel.ManagingEditor = elementText.ToString ();  		break;  	case "webmaster":  		channel.WebMaster = elementText.ToString ();  		break;  	case "rating":  		channel.Rating = elementText.ToString ();  		break;  	case "pubdate":  		try {  			channel.PubDate = DateTime.Parse (elementText.ToString ());  		}  		catch (Exception e) {  			exceptions.Add (e);  		}  		break;  	case "lastbuilddate":  		try {  			channel.LastBuildDate = DateTime.Parse (elementText.ToString ());  		}  		catch (Exception e) {  			exceptions.Add (e);  		}  		break;  	case "generator":  		channel.Generator = elementText.ToString ();  		break;  	case "docs":  		channel.Docs = elementText.ToString ();  		break;  	case "ttl":  		try {  			channel.TimeToLive = int.Parse (elementText.ToString ());  		}  		catch (Exception e) {  			exceptions.Add (e);  		}  		break;  	}  	break;  case "image":  	switch (childElementName) {  	case "url":  		try {  			image.Url = new Uri (elementText.ToString ());  		}  		catch (Exception e) {  			exceptions.Add (e);  		}  		break;  	case "title":  		image.Title = elementText.ToString ();  		break;  	case "link":  		try {  			image.Link = new Uri (elementText.ToString ());  		}  		catch (Exception e) {  			exceptions.Add (e);  		}  		break;  	case "description":  		image.Description = elementText.ToString ();  		break;  	case "width":  		try {  			image.Width = Byte.Parse (elementText.ToString ());  		}  		catch (Exception e) {  			exceptions.Add (e);  		}  		break;  	case "height":  		try {  			image.Height = Byte.Parse (elementText.ToString ());  		}  		catch (Exception e) {  			exceptions.Add (e);  		}  		break;  	}  	break;  case "textinput":  	switch (childElementName) {  	case "title":  		textInput.Title = elementText.ToString ();  		break;  	case "description":  		textInput.Description = elementText.ToString ();  		break;  	case "name":  		textInput.Name = elementText.ToString ();  		break;  	case "link":  		try {  			textInput.Link = new Uri (elementText.ToString ());  		}  		catch (Exception e) {  			exceptions.Add (e);  		}  		break;  	}  	break;  case "skipdays":  	if (childElementName == "day")  		switch (elementText.ToString ().ToLower ()) {  		case "monday":  			channel.SkipDays [0] = true;  			break;  		case "tuesday":  			channel.SkipDays [1] = true;  			break;  		case "wednesday":  			channel.SkipDays [2] = true;  			break;  		case "thursday":  			channel.SkipDays [3] = true;  			break;  		case "friday":  			channel.SkipDays [4] = true;  			break;  		case "saturday":  			channel.SkipDays [5] = true;  			break;  		case "sunday":  			channel.SkipDays [6] = true;  			break;  		}  	break;  case "skiphours":  	if (childElementName == "hour")  		channel.SkipHours [Byte.Parse (elementText.ToString ().ToLower ())] = true;  	break;  }  
Missing Default,Rss,RssReader,C:\repos\dblock_sncore\Rss.Net\RssReader.cs,Read,The following switch statement is missing a default case: switch (childElementName) {  case "title":  	item.Title = elementText.ToString ();  	break;  case "link":  	item.Link = new Uri (elementText.ToString ());  	break;  case "description":  	item.Description = elementText.ToString ();  	break;  case "content:encoded":  	item.Content = elementText.ToString ();  	break;  case "author":  case "dc:creator":  	item.Author = elementText.ToString ();  	break;  case "comments":  	item.Comments = elementText.ToString ();  	break;  case "dc:date":  case "pubdate":  	try {  		item.PubDate = DateTime.Parse (elementText.ToString ());  	}  	catch (Exception e) {  		try {  			string tmp = elementText.ToString ();  			tmp = tmp.Substring (0' tmp.Length - 5);  			tmp += "GMT";  			item.PubDate = DateTime.Parse (tmp);  		}  		catch {  			exceptions.Add (e);  		}  	}  	break;  }  
Missing Default,Rss,RssReader,C:\repos\dblock_sncore\Rss.Net\RssReader.cs,Read,The following switch statement is missing a default case: switch (childElementName) {  case "title":  	channel.Title = elementText.ToString ();  	break;  case "link":  	try {  		channel.Link = new Uri (elementText.ToString ());  	}  	catch (Exception e) {  		exceptions.Add (e);  	}  	break;  case "description":  	channel.Description = elementText.ToString ();  	break;  case "language":  	channel.Language = elementText.ToString ();  	break;  case "copyright":  	channel.Copyright = elementText.ToString ();  	break;  case "managingeditor":  	channel.ManagingEditor = elementText.ToString ();  	break;  case "webmaster":  	channel.WebMaster = elementText.ToString ();  	break;  case "rating":  	channel.Rating = elementText.ToString ();  	break;  case "pubdate":  	try {  		channel.PubDate = DateTime.Parse (elementText.ToString ());  	}  	catch (Exception e) {  		exceptions.Add (e);  	}  	break;  case "lastbuilddate":  	try {  		channel.LastBuildDate = DateTime.Parse (elementText.ToString ());  	}  	catch (Exception e) {  		exceptions.Add (e);  	}  	break;  case "generator":  	channel.Generator = elementText.ToString ();  	break;  case "docs":  	channel.Docs = elementText.ToString ();  	break;  case "ttl":  	try {  		channel.TimeToLive = int.Parse (elementText.ToString ());  	}  	catch (Exception e) {  		exceptions.Add (e);  	}  	break;  }  
Missing Default,Rss,RssReader,C:\repos\dblock_sncore\Rss.Net\RssReader.cs,Read,The following switch statement is missing a default case: switch (childElementName) {  case "url":  	try {  		image.Url = new Uri (elementText.ToString ());  	}  	catch (Exception e) {  		exceptions.Add (e);  	}  	break;  case "title":  	image.Title = elementText.ToString ();  	break;  case "link":  	try {  		image.Link = new Uri (elementText.ToString ());  	}  	catch (Exception e) {  		exceptions.Add (e);  	}  	break;  case "description":  	image.Description = elementText.ToString ();  	break;  case "width":  	try {  		image.Width = Byte.Parse (elementText.ToString ());  	}  	catch (Exception e) {  		exceptions.Add (e);  	}  	break;  case "height":  	try {  		image.Height = Byte.Parse (elementText.ToString ());  	}  	catch (Exception e) {  		exceptions.Add (e);  	}  	break;  }  
Missing Default,Rss,RssReader,C:\repos\dblock_sncore\Rss.Net\RssReader.cs,Read,The following switch statement is missing a default case: switch (childElementName) {  case "title":  	textInput.Title = elementText.ToString ();  	break;  case "description":  	textInput.Description = elementText.ToString ();  	break;  case "name":  	textInput.Name = elementText.ToString ();  	break;  case "link":  	try {  		textInput.Link = new Uri (elementText.ToString ());  	}  	catch (Exception e) {  		exceptions.Add (e);  	}  	break;  }  
Missing Default,Rss,RssReader,C:\repos\dblock_sncore\Rss.Net\RssReader.cs,Read,The following switch statement is missing a default case: switch (elementText.ToString ().ToLower ()) {  case "monday":  	channel.SkipDays [0] = true;  	break;  case "tuesday":  	channel.SkipDays [1] = true;  	break;  case "wednesday":  	channel.SkipDays [2] = true;  	break;  case "thursday":  	channel.SkipDays [3] = true;  	break;  case "friday":  	channel.SkipDays [4] = true;  	break;  case "saturday":  	channel.SkipDays [5] = true;  	break;  case "sunday":  	channel.SkipDays [6] = true;  	break;  }  
Missing Default,Rss,RssWriter,C:\repos\dblock_sncore\Rss.Net\RssWriter.cs,BeginDocument,The following switch statement is missing a default case: switch (rssVersion) {  case RssVersion.RSS090:  	//<rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" xmlns="http://my.netscape.com/rdf/simple/0.9/">  	writer.WriteStartElement ("RDF"' "rdf"' "http://www.w3.org/1999/02/22-rdf-syntax-ns#");  	break;  case RssVersion.RSS091:  	writer.WriteStartElement ("rss");  	writer.WriteDocType ("rss"' "-//Netscape Communications//DTD RSS 0.91//EN"' "http://my.netscape.com/publish/formats/rss-0.91.dtd"' null);  	writer.WriteAttributeString ("version"' "0.91");  	break;  case RssVersion.RSS092:  	writer.WriteStartElement ("rss");  	writer.WriteAttributeString ("version"' "0.92");  	break;  case RssVersion.RSS10:  	throw new NotSupportedException ("RDF Site Summary (RSS) 1.0 is not currently supported.");  case RssVersion.RSS20:  	writer.WriteStartElement ("rss");  	writer.WriteAttributeString ("version"' "2.0");  	// RSS Modules  	foreach (RssModule rssModule in this._rssModules) {  		WriteAttribute ("xmlns:" + rssModule.NamespacePrefix' rssModule.NamespaceURL.ToString ()' true);  	}  	break;  }  
Missing Default,Rss,RssWriter,C:\repos\dblock_sncore\Rss.Net\RssWriter.cs,writeChannel,The following switch statement is missing a default case: switch (rssVersion) {  case RssVersion.RSS091:  case RssVersion.RSS092:  case RssVersion.RSS20:  	WriteElement ("description"' channel.Image.Description' false);  	WriteElement ("width"' channel.Image.Width' false);  	WriteElement ("height"' channel.Image.Height' false);  	break;  }  
Missing Default,Rss,RssWriter,C:\repos\dblock_sncore\Rss.Net\RssWriter.cs,writeChannel,The following switch statement is missing a default case: switch (rssVersion) {  case RssVersion.RSS091:  case RssVersion.RSS092:  case RssVersion.RSS20:  	WriteElement ("language"' channel.Language' rssVersion == RssVersion.RSS091);  	WriteElement ("copyright"' channel.Copyright' false);  	WriteElement ("managingEditor"' channel.ManagingEditor' false);  	WriteElement ("webMaster"' channel.WebMaster' false);  	WriteElement ("pubDate"' channel.PubDate' false);  	WriteElement ("lastBuildDate"' channel.LastBuildDate' false);  	if (channel.Docs != RssDefault.String)  		WriteElement ("docs"' channel.Docs' false);  	else  		switch (rssVersion) {  		case RssVersion.RSS091:  			WriteElement ("docs"' "http://my.netscape.com/publish/formats/rss-spec-0.91.html"' false);  			break;  		case RssVersion.RSS092:  			WriteElement ("docs"' "http://backend.userland.com/rss092"' false);  			break;  		case RssVersion.RSS20:  			WriteElement ("docs"' "http://backend.userland.com/rss"' false);  			break;  		}  	WriteElement ("rating"' channel.Rating' false);  	string[] Days =  {  		"monday"'  		"tuesday"'  		"wednesday"'  		"thursday"'  		"friday"'  		"saturday"'  		"sunday"  	};  	for (int i = 0; i <= 6; i++)  		if (channel.SkipDays [i]) {  			writer.WriteStartElement ("skipDays");  			for (int i2 = 0; i2 <= 6; i2++)  				if (channel.SkipDays [i2])  					WriteElement ("day"' Days [i2]' false);  			writer.WriteEndElement ();  			break;  		}  	for (int i = 0; i <= 23; i++)  		if (channel.SkipHours [i]) {  			writer.WriteStartElement ("skipHours");  			for (int i2 = 0; i2 <= 23; i2++)  				if (channel.SkipHours [i2])  					WriteElement ("hour"' i2 + 1' false);  			writer.WriteEndElement ();  			break;  		}  	break;  }  
Missing Default,Rss,RssWriter,C:\repos\dblock_sncore\Rss.Net\RssWriter.cs,writeChannel,The following switch statement is missing a default case: switch (rssVersion) {  case RssVersion.RSS091:  	WriteElement ("docs"' "http://my.netscape.com/publish/formats/rss-spec-0.91.html"' false);  	break;  case RssVersion.RSS092:  	WriteElement ("docs"' "http://backend.userland.com/rss092"' false);  	break;  case RssVersion.RSS20:  	WriteElement ("docs"' "http://backend.userland.com/rss"' false);  	break;  }  
Missing Default,Rss,RssWriter,C:\repos\dblock_sncore\Rss.Net\RssWriter.cs,writeChannel,The following switch statement is missing a default case: switch (rssVersion) {  case RssVersion.RSS092:  case RssVersion.RSS20:  	if (channel.Categories != null)  		foreach (RssCategory category in channel.Categories)  			if (category.Name != RssDefault.String) {  				writer.WriteStartElement ("category");  				WriteAttribute ("domain"' category.Domain' false);  				writer.WriteString (category.Name);  				writer.WriteEndElement ();  			}  	if (channel.Cloud != null) {  		writer.WriteStartElement ("cloud");  		WriteElement ("domain"' channel.Cloud.Domain' false);  		WriteElement ("port"' channel.Cloud.Port' false);  		WriteElement ("path"' channel.Cloud.Path' false);  		WriteElement ("registerProcedure"' channel.Cloud.RegisterProcedure' false);  		if (channel.Cloud.Protocol != RssCloudProtocol.Empty)  			WriteElement ("Protocol"' channel.Cloud.Protocol' false);  		writer.WriteEndElement ();  	}  	break;  }  
Missing Default,Rss,RssWriter,C:\repos\dblock_sncore\Rss.Net\RssWriter.cs,writeItem,The following switch statement is missing a default case: switch (rssVersion) {  case RssVersion.RSS090:  case RssVersion.RSS10:  case RssVersion.RSS091:  	WriteElement ("title"' item.Title' true);  	WriteElement ("description"' item.Description' false);  	WriteElement ("link"' item.Link' true);  	break;  case RssVersion.RSS20:  	if ((item.Title == RssDefault.String) && (item.Description == RssDefault.String))  		throw new ArgumentException ("item title and description cannot be null");  	goto case RssVersion.RSS092;  case RssVersion.RSS092:  	WriteElement ("title"' item.Title' false);  	WriteElement ("description"' item.Description' false);  	WriteElement ("link"' item.Link' false);  	if (item.Source != null) {  		writer.WriteStartElement ("source");  		WriteAttribute ("url"' item.Source.Url' true);  		writer.WriteString (item.Source.Name);  		writer.WriteEndElement ();  	}  	if (item.Enclosure != null) {  		writer.WriteStartElement ("enclosure");  		WriteAttribute ("url"' item.Enclosure.Url' true);  		WriteAttribute ("length"' item.Enclosure.Length' true);  		WriteAttribute ("type"' item.Enclosure.Type' true);  		writer.WriteEndElement ();  	}  	foreach (RssCategory category in item.Categories)  		if (category.Name != RssDefault.String) {  			writer.WriteStartElement ("category");  			WriteAttribute ("domain"' category.Domain' false);  			writer.WriteString (category.Name);  			writer.WriteEndElement ();  		}  	break;  }  
