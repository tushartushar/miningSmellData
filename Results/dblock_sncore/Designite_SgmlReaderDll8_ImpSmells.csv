Implementation smell,Namespace,Class,File,Method,Description
Long Method,Sgml,SgmlReader,C:\repos\dblock_sncore\SgmlReader\sgmlreaderdll\SgmlReader.cs,Read,The method has 122 lines of code.
Long Method,Sgml,SgmlReader,C:\repos\dblock_sncore\SgmlReader\sgmlreaderdll\SgmlReader.cs,ParseCData,The method has 136 lines of code.
Complex Method,Sgml,Entity,C:\repos\dblock_sncore\SgmlReader\sgmlreaderdll\SgmlParser.cs,Open,Cyclomatic complexity of the method is 36
Complex Method,Sgml,Entity,C:\repos\dblock_sncore\SgmlReader\sgmlreaderdll\SgmlParser.cs,ScanToEnd,Cyclomatic complexity of the method is 16
Complex Method,Sgml,Entity,C:\repos\dblock_sncore\SgmlReader\sgmlreaderdll\SgmlParser.cs,ExpandCharEntity,Cyclomatic complexity of the method is 10
Complex Method,Sgml,Entity,C:\repos\dblock_sncore\SgmlReader\sgmlreaderdll\SgmlParser.cs,SetLiteralType,Cyclomatic complexity of the method is 9
Complex Method,Sgml,HtmlStream,C:\repos\dblock_sncore\SgmlReader\sgmlreaderdll\SgmlParser.cs,AutoDetectEncoding,Cyclomatic complexity of the method is 17
Complex Method,Sgml,HtmlStream,C:\repos\dblock_sncore\SgmlReader\sgmlreaderdll\SgmlParser.cs,SniffMeta,Cyclomatic complexity of the method is 13
Complex Method,Sgml,ContentModel,C:\repos\dblock_sncore\SgmlReader\sgmlreaderdll\SgmlParser.cs,SetDeclaredContent,Cyclomatic complexity of the method is 11
Complex Method,Sgml,Group,C:\repos\dblock_sncore\SgmlReader\sgmlreaderdll\SgmlParser.cs,AddConnector,Cyclomatic complexity of the method is 11
Complex Method,Sgml,Group,C:\repos\dblock_sncore\SgmlReader\sgmlreaderdll\SgmlParser.cs,AddOccurrence,Cyclomatic complexity of the method is 9
Complex Method,Sgml,AttDef,C:\repos\dblock_sncore\SgmlReader\sgmlreaderdll\SgmlParser.cs,SetType,Cyclomatic complexity of the method is 44
Complex Method,Sgml,SgmlDtd,C:\repos\dblock_sncore\SgmlReader\sgmlreaderdll\SgmlParser.cs,Parse,Cyclomatic complexity of the method is 25
Complex Method,Sgml,SgmlDtd,C:\repos\dblock_sncore\SgmlReader\sgmlreaderdll\SgmlParser.cs,ParseMarkup,Cyclomatic complexity of the method is 16
Complex Method,Sgml,SgmlDtd,C:\repos\dblock_sncore\SgmlReader\sgmlreaderdll\SgmlParser.cs,ParseEntity,Cyclomatic complexity of the method is 12
Complex Method,Sgml,SgmlDtd,C:\repos\dblock_sncore\SgmlReader\sgmlreaderdll\SgmlParser.cs,ParseElementDecl,Cyclomatic complexity of the method is 12
Complex Method,Sgml,SgmlDtd,C:\repos\dblock_sncore\SgmlReader\sgmlreaderdll\SgmlParser.cs,ParseModel,Cyclomatic complexity of the method is 11
Complex Method,Sgml,SgmlReader,C:\repos\dblock_sncore\SgmlReader\sgmlreaderdll\SgmlReader.cs,LazyLoadDtd,Cyclomatic complexity of the method is 16
Complex Method,Sgml,SgmlReader,C:\repos\dblock_sncore\SgmlReader\sgmlreaderdll\SgmlReader.cs,Read,Cyclomatic complexity of the method is 59
Complex Method,Sgml,SgmlReader,C:\repos\dblock_sncore\SgmlReader\sgmlreaderdll\SgmlReader.cs,ParseTag,Cyclomatic complexity of the method is 11
Complex Method,Sgml,SgmlReader,C:\repos\dblock_sncore\SgmlReader\sgmlreaderdll\SgmlReader.cs,ParseStartTag,Cyclomatic complexity of the method is 17
Complex Method,Sgml,SgmlReader,C:\repos\dblock_sncore\SgmlReader\sgmlreaderdll\SgmlReader.cs,ParseDocType,Cyclomatic complexity of the method is 10
Complex Method,Sgml,SgmlReader,C:\repos\dblock_sncore\SgmlReader\sgmlreaderdll\SgmlReader.cs,ParseCData,Cyclomatic complexity of the method is 21
Complex Method,Sgml,SgmlReader,C:\repos\dblock_sncore\SgmlReader\sgmlreaderdll\SgmlReader.cs,ExpandEntity,Cyclomatic complexity of the method is 9
Complex Method,Sgml,SgmlReader,C:\repos\dblock_sncore\SgmlReader\sgmlreaderdll\SgmlReader.cs,ReadString,Cyclomatic complexity of the method is 9
Complex Method,Sgml,SgmlReader,C:\repos\dblock_sncore\SgmlReader\sgmlreaderdll\SgmlReader.cs,ReadInnerXml,Cyclomatic complexity of the method is 10
Complex Method,Sgml,SgmlReader,C:\repos\dblock_sncore\SgmlReader\sgmlreaderdll\SgmlReader.cs,ValidateContent,Cyclomatic complexity of the method is 14
Long Parameter List,Sgml,Ucs4Decoder,C:\repos\dblock_sncore\SgmlReader\sgmlreaderdll\SgmlParser.cs,GetFullChars,The method has 5 parameters.
Long Parameter List,Sgml,Ucs4Decoder,C:\repos\dblock_sncore\SgmlReader\sgmlreaderdll\SgmlParser.cs,GetChars,The method has 5 parameters.
Long Parameter List,Sgml,Ucs4DecoderBigEngian,C:\repos\dblock_sncore\SgmlReader\sgmlreaderdll\SgmlParser.cs,GetFullChars,The method has 5 parameters.
Long Parameter List,Sgml,Ucs4DecoderLittleEndian,C:\repos\dblock_sncore\SgmlReader\sgmlreaderdll\SgmlParser.cs,GetFullChars,The method has 5 parameters.
Long Parameter List,Sgml,ElementDecl,C:\repos\dblock_sncore\SgmlReader\sgmlreaderdll\SgmlParser.cs,ElementDecl,The method has 6 parameters.
Long Parameter List,Sgml,SgmlDtd,C:\repos\dblock_sncore\SgmlReader\sgmlreaderdll\SgmlParser.cs,Parse,The method has 7 parameters.
Long Parameter List,Sgml,SgmlDtd,C:\repos\dblock_sncore\SgmlReader\sgmlreaderdll\SgmlParser.cs,Parse,The method has 7 parameters.
Long Statement,Sgml,Entity,C:\repos\dblock_sncore\SgmlReader\sgmlreaderdll\SgmlParser.cs,Context,The length of the statement  "			msg = String.Format ("\nReferenced on line {0}' position {1} of internal entity '{2}'"' p.Line' p.LinePosition' p.Name); " is 120.
Long Statement,Sgml,Entity,C:\repos\dblock_sncore\SgmlReader\sgmlreaderdll\SgmlParser.cs,Context,The length of the statement  "			msg = String.Format ("\nReferenced on line {0}' position {1} of '{2}' entity at [{3}]"' p.Line' p.LinePosition' p.Name' p.ResolvedUri.AbsolutePath); " is 148.
Long Statement,Sgml,HtmlStream,C:\repos\dblock_sncore\SgmlReader\sgmlreaderdll\SgmlParser.cs,AutoDetectEncoding,The length of the statement  "		uint w = (uint)buffer [index + 0] << 24 | (uint)buffer [index + 1] << 16 | (uint)buffer [index + 2] << 8 | (uint)buffer [index + 3]; " is 132.
Long Statement,Sgml,SgmlReader,C:\repos\dblock_sncore\SgmlReader\sgmlreaderdll\SgmlReader.cs,LazyLoadDtd,The length of the statement  "			this.dtd = SgmlDtd.Parse (baseUri' this.docType' this.pubid' baseUri.AbsoluteUri' this.subset' this.proxy' this.nametable); " is 123.
Long Statement,Sgml,SgmlReader,C:\repos\dblock_sncore\SgmlReader\sgmlreaderdll\SgmlReader.cs,Log,The length of the statement  "			ErrorLog.WriteLine ("### Error in " + path + "#" + this.current.Name + "' line " + this.current.Line + "' position " + this.current.LinePosition + ": " + err); " is 159.
Long Statement,Sgml,SgmlReader,C:\repos\dblock_sncore\SgmlReader\sgmlreaderdll\SgmlReader.cs,Read,The length of the statement  "	if (!foundRoot && (this.NodeType == XmlNodeType.Element || this.NodeType == XmlNodeType.Text || this.NodeType == XmlNodeType.CDATA)) { " is 134.
Long Statement,Sgml,SgmlReader,C:\repos\dblock_sncore\SgmlReader\sgmlreaderdll\SgmlReader.cs,Read,The length of the statement  "		if (this.IsHtml && (this.NodeType != XmlNodeType.Element || string.Compare (this.LocalName' "html"' StringComparison.InvariantCultureIgnoreCase) != 0)) { " is 153.
Complex Conditional,Sgml,Entity,C:\repos\dblock_sncore\SgmlReader\sgmlreaderdll\SgmlParser.cs,ScanToken,The conditional expression  "!nmtoken || ch == '_' || ch == '.' || ch == '-' || ch == ':' || Char.IsLetterOrDigit (ch)"  is complex.
Complex Conditional,Sgml,HtmlStream,C:\repos\dblock_sncore\SgmlReader\sgmlreaderdll\SgmlParser.cs,SniffWhitespace,The conditional expression  "ch != ' ' && ch != '\t' && ch != '\r' && ch != '\n'"  is complex.
Complex Conditional,Sgml,SgmlReader,C:\repos\dblock_sncore\SgmlReader\sgmlreaderdll\SgmlReader.cs,Read,The conditional expression  "!foundRoot && (this.NodeType == XmlNodeType.Element || this.NodeType == XmlNodeType.Text || this.NodeType == XmlNodeType.CDATA)"  is complex.
Complex Conditional,Sgml,SgmlReader,C:\repos\dblock_sncore\SgmlReader\sgmlreaderdll\SgmlReader.cs,ParseText,The conditional expression  "ch == '/' || ch == '!' || ch == '?' || Char.IsLetter (ch)"  is complex.
Empty Catch Block,Sgml,Entity,C:\repos\dblock_sncore\SgmlReader\sgmlreaderdll\SgmlParser.cs,Open,The method has an empty catch block.
Empty Catch Block,Sgml,HtmlStream,C:\repos\dblock_sncore\SgmlReader\sgmlreaderdll\SgmlParser.cs,SniffEncoding,The method has an empty catch block.
Empty Catch Block,Sgml,HtmlStream,C:\repos\dblock_sncore\SgmlReader\sgmlreaderdll\SgmlParser.cs,SniffMeta,The method has an empty catch block.
Magic Number,Sgml,Entity,C:\repos\dblock_sncore\SgmlReader\sgmlreaderdll\SgmlParser.cs,Open,The following statement contains a magic number: if (Internal) {  	if (this.Literal != null)  		this.stm = new StringReader (this.Literal);  }  else if (this.Uri == null) {  	this.Error ("Unresolvable entity '{0}'"' this.Name);  }  else {  	if (baseUri != null) {  		this.resolvedUri = new Uri (baseUri' this.Uri);  	}  	else {  		this.resolvedUri = new Uri (this.Uri);  	}  	Stream stream = null;  	Encoding e = Encoding.Default;  	switch (this.resolvedUri.Scheme) {  	case "file":  		{  			string path = this.resolvedUri.LocalPath;  			stream = new FileStream (path' FileMode.Open' FileAccess.Read);  		}  		break;  	default:  		//Console.WriteLine("Fetching:" + ResolvedUri.AbsoluteUri);  		HttpWebRequest wr = (HttpWebRequest)WebRequest.Create (ResolvedUri);  		wr.UserAgent = "Mozilla/4.0 (compatible;);";  		wr.Timeout = 10000;  		// in case this is running in an ASPX page.  		if (Proxy != null)  			wr.Proxy = new WebProxy (Proxy);  		wr.PreAuthenticate = false;  		// Pass the credentials of the process.   		wr.Credentials = CredentialCache.DefaultCredentials;  		WebResponse resp = wr.GetResponse ();  		Uri actual = resp.ResponseUri;  		if (actual.AbsoluteUri != this.resolvedUri.AbsoluteUri) {  			this.resolvedUri = actual;  		}  		string contentType = resp.ContentType.ToLower ();  		string mimeType = contentType;  		int i = contentType.IndexOf (';');  		if (i >= 0) {  			mimeType = contentType.Substring (0' i);  		}  		if (StringUtilities.EqualsIgnoreCase (mimeType' "text/html")) {  			this.Html = true;  		}  		i = contentType.IndexOf ("charset");  		e = Encoding.Default;  		if (i >= 0) {  			int j = contentType.IndexOf ("="' i);  			int k = contentType.IndexOf (";"' j);  			if (k < 0)  				k = contentType.Length;  			if (j > 0) {  				j++;  				string charset = contentType.Substring (j' k - j).Trim ();  				try {  					e = Encoding.GetEncoding (charset);  				}  				catch (Exception) {  				}  			}  		}  		stream = resp.GetResponseStream ();  		break;  	}  	this.weOwnTheStream = true;  	HtmlStream html = new HtmlStream (stream' e);  	this.encoding = html.Encoding;  	this.stm = html;  }  
Magic Number,Sgml,Entity,C:\repos\dblock_sncore\SgmlReader\sgmlreaderdll\SgmlParser.cs,Open,The following statement contains a magic number: if (this.Uri == null) {  	this.Error ("Unresolvable entity '{0}'"' this.Name);  }  else {  	if (baseUri != null) {  		this.resolvedUri = new Uri (baseUri' this.Uri);  	}  	else {  		this.resolvedUri = new Uri (this.Uri);  	}  	Stream stream = null;  	Encoding e = Encoding.Default;  	switch (this.resolvedUri.Scheme) {  	case "file":  		{  			string path = this.resolvedUri.LocalPath;  			stream = new FileStream (path' FileMode.Open' FileAccess.Read);  		}  		break;  	default:  		//Console.WriteLine("Fetching:" + ResolvedUri.AbsoluteUri);  		HttpWebRequest wr = (HttpWebRequest)WebRequest.Create (ResolvedUri);  		wr.UserAgent = "Mozilla/4.0 (compatible;);";  		wr.Timeout = 10000;  		// in case this is running in an ASPX page.  		if (Proxy != null)  			wr.Proxy = new WebProxy (Proxy);  		wr.PreAuthenticate = false;  		// Pass the credentials of the process.   		wr.Credentials = CredentialCache.DefaultCredentials;  		WebResponse resp = wr.GetResponse ();  		Uri actual = resp.ResponseUri;  		if (actual.AbsoluteUri != this.resolvedUri.AbsoluteUri) {  			this.resolvedUri = actual;  		}  		string contentType = resp.ContentType.ToLower ();  		string mimeType = contentType;  		int i = contentType.IndexOf (';');  		if (i >= 0) {  			mimeType = contentType.Substring (0' i);  		}  		if (StringUtilities.EqualsIgnoreCase (mimeType' "text/html")) {  			this.Html = true;  		}  		i = contentType.IndexOf ("charset");  		e = Encoding.Default;  		if (i >= 0) {  			int j = contentType.IndexOf ("="' i);  			int k = contentType.IndexOf (";"' j);  			if (k < 0)  				k = contentType.Length;  			if (j > 0) {  				j++;  				string charset = contentType.Substring (j' k - j).Trim ();  				try {  					e = Encoding.GetEncoding (charset);  				}  				catch (Exception) {  				}  			}  		}  		stream = resp.GetResponseStream ();  		break;  	}  	this.weOwnTheStream = true;  	HtmlStream html = new HtmlStream (stream' e);  	this.encoding = html.Encoding;  	this.stm = html;  }  
Magic Number,Sgml,Entity,C:\repos\dblock_sncore\SgmlReader\sgmlreaderdll\SgmlParser.cs,Open,The following statement contains a magic number: switch (this.resolvedUri.Scheme) {  case "file":  	{  		string path = this.resolvedUri.LocalPath;  		stream = new FileStream (path' FileMode.Open' FileAccess.Read);  	}  	break;  default:  	//Console.WriteLine("Fetching:" + ResolvedUri.AbsoluteUri);  	HttpWebRequest wr = (HttpWebRequest)WebRequest.Create (ResolvedUri);  	wr.UserAgent = "Mozilla/4.0 (compatible;);";  	wr.Timeout = 10000;  	// in case this is running in an ASPX page.  	if (Proxy != null)  		wr.Proxy = new WebProxy (Proxy);  	wr.PreAuthenticate = false;  	// Pass the credentials of the process.   	wr.Credentials = CredentialCache.DefaultCredentials;  	WebResponse resp = wr.GetResponse ();  	Uri actual = resp.ResponseUri;  	if (actual.AbsoluteUri != this.resolvedUri.AbsoluteUri) {  		this.resolvedUri = actual;  	}  	string contentType = resp.ContentType.ToLower ();  	string mimeType = contentType;  	int i = contentType.IndexOf (';');  	if (i >= 0) {  		mimeType = contentType.Substring (0' i);  	}  	if (StringUtilities.EqualsIgnoreCase (mimeType' "text/html")) {  		this.Html = true;  	}  	i = contentType.IndexOf ("charset");  	e = Encoding.Default;  	if (i >= 0) {  		int j = contentType.IndexOf ("="' i);  		int k = contentType.IndexOf (";"' j);  		if (k < 0)  			k = contentType.Length;  		if (j > 0) {  			j++;  			string charset = contentType.Substring (j' k - j).Trim ();  			try {  				e = Encoding.GetEncoding (charset);  			}  			catch (Exception) {  			}  		}  	}  	stream = resp.GetResponseStream ();  	break;  }  
Magic Number,Sgml,Entity,C:\repos\dblock_sncore\SgmlReader\sgmlreaderdll\SgmlParser.cs,Open,The following statement contains a magic number: wr.Timeout = 10000;  
Magic Number,Sgml,Entity,C:\repos\dblock_sncore\SgmlReader\sgmlreaderdll\SgmlParser.cs,ExpandCharEntity,The following statement contains a magic number: if (ch == 'x') {  	for (; ch != Entity.EOF && ch != ';'; ch = ReadChar ()) {  		int p = 0;  		if (ch >= '0' && ch <= '9') {  			p = (int)(ch - '0');  		}  		else if (ch >= 'a' && ch <= 'f') {  			p = (int)(ch - 'a') + 10;  		}  		else if (ch >= 'A' && ch <= 'F') {  			p = (int)(ch - 'A') + 10;  		}  		else {  			break;  			//we must be done!  			//Error("Hex digit out of range '{0}'"' (int)ch);  		}  		v = (v * 16) + p;  	}  }  else {  	for (; ch != Entity.EOF && ch != ';'; ch = ReadChar ()) {  		if (ch >= '0' && ch <= '9') {  			v = (v * 10) + (int)(ch - '0');  		}  		else {  			break;  			// we must be done!  			//Error("Decimal digit out of range '{0}'"' (int)ch);  		}  	}  }  
Magic Number,Sgml,Entity,C:\repos\dblock_sncore\SgmlReader\sgmlreaderdll\SgmlParser.cs,ExpandCharEntity,The following statement contains a magic number: if (ch == 'x') {  	for (; ch != Entity.EOF && ch != ';'; ch = ReadChar ()) {  		int p = 0;  		if (ch >= '0' && ch <= '9') {  			p = (int)(ch - '0');  		}  		else if (ch >= 'a' && ch <= 'f') {  			p = (int)(ch - 'a') + 10;  		}  		else if (ch >= 'A' && ch <= 'F') {  			p = (int)(ch - 'A') + 10;  		}  		else {  			break;  			//we must be done!  			//Error("Hex digit out of range '{0}'"' (int)ch);  		}  		v = (v * 16) + p;  	}  }  else {  	for (; ch != Entity.EOF && ch != ';'; ch = ReadChar ()) {  		if (ch >= '0' && ch <= '9') {  			v = (v * 10) + (int)(ch - '0');  		}  		else {  			break;  			// we must be done!  			//Error("Decimal digit out of range '{0}'"' (int)ch);  		}  	}  }  
Magic Number,Sgml,Entity,C:\repos\dblock_sncore\SgmlReader\sgmlreaderdll\SgmlParser.cs,ExpandCharEntity,The following statement contains a magic number: if (ch == 'x') {  	for (; ch != Entity.EOF && ch != ';'; ch = ReadChar ()) {  		int p = 0;  		if (ch >= '0' && ch <= '9') {  			p = (int)(ch - '0');  		}  		else if (ch >= 'a' && ch <= 'f') {  			p = (int)(ch - 'a') + 10;  		}  		else if (ch >= 'A' && ch <= 'F') {  			p = (int)(ch - 'A') + 10;  		}  		else {  			break;  			//we must be done!  			//Error("Hex digit out of range '{0}'"' (int)ch);  		}  		v = (v * 16) + p;  	}  }  else {  	for (; ch != Entity.EOF && ch != ';'; ch = ReadChar ()) {  		if (ch >= '0' && ch <= '9') {  			v = (v * 10) + (int)(ch - '0');  		}  		else {  			break;  			// we must be done!  			//Error("Decimal digit out of range '{0}'"' (int)ch);  		}  	}  }  
Magic Number,Sgml,Entity,C:\repos\dblock_sncore\SgmlReader\sgmlreaderdll\SgmlParser.cs,ExpandCharEntity,The following statement contains a magic number: if (ch == 'x') {  	for (; ch != Entity.EOF && ch != ';'; ch = ReadChar ()) {  		int p = 0;  		if (ch >= '0' && ch <= '9') {  			p = (int)(ch - '0');  		}  		else if (ch >= 'a' && ch <= 'f') {  			p = (int)(ch - 'a') + 10;  		}  		else if (ch >= 'A' && ch <= 'F') {  			p = (int)(ch - 'A') + 10;  		}  		else {  			break;  			//we must be done!  			//Error("Hex digit out of range '{0}'"' (int)ch);  		}  		v = (v * 16) + p;  	}  }  else {  	for (; ch != Entity.EOF && ch != ';'; ch = ReadChar ()) {  		if (ch >= '0' && ch <= '9') {  			v = (v * 10) + (int)(ch - '0');  		}  		else {  			break;  			// we must be done!  			//Error("Decimal digit out of range '{0}'"' (int)ch);  		}  	}  }  
Magic Number,Sgml,Entity,C:\repos\dblock_sncore\SgmlReader\sgmlreaderdll\SgmlParser.cs,ExpandCharEntity,The following statement contains a magic number: for (; ch != Entity.EOF && ch != ';'; ch = ReadChar ()) {  	int p = 0;  	if (ch >= '0' && ch <= '9') {  		p = (int)(ch - '0');  	}  	else if (ch >= 'a' && ch <= 'f') {  		p = (int)(ch - 'a') + 10;  	}  	else if (ch >= 'A' && ch <= 'F') {  		p = (int)(ch - 'A') + 10;  	}  	else {  		break;  		//we must be done!  		//Error("Hex digit out of range '{0}'"' (int)ch);  	}  	v = (v * 16) + p;  }  
Magic Number,Sgml,Entity,C:\repos\dblock_sncore\SgmlReader\sgmlreaderdll\SgmlParser.cs,ExpandCharEntity,The following statement contains a magic number: for (; ch != Entity.EOF && ch != ';'; ch = ReadChar ()) {  	int p = 0;  	if (ch >= '0' && ch <= '9') {  		p = (int)(ch - '0');  	}  	else if (ch >= 'a' && ch <= 'f') {  		p = (int)(ch - 'a') + 10;  	}  	else if (ch >= 'A' && ch <= 'F') {  		p = (int)(ch - 'A') + 10;  	}  	else {  		break;  		//we must be done!  		//Error("Hex digit out of range '{0}'"' (int)ch);  	}  	v = (v * 16) + p;  }  
Magic Number,Sgml,Entity,C:\repos\dblock_sncore\SgmlReader\sgmlreaderdll\SgmlParser.cs,ExpandCharEntity,The following statement contains a magic number: for (; ch != Entity.EOF && ch != ';'; ch = ReadChar ()) {  	int p = 0;  	if (ch >= '0' && ch <= '9') {  		p = (int)(ch - '0');  	}  	else if (ch >= 'a' && ch <= 'f') {  		p = (int)(ch - 'a') + 10;  	}  	else if (ch >= 'A' && ch <= 'F') {  		p = (int)(ch - 'A') + 10;  	}  	else {  		break;  		//we must be done!  		//Error("Hex digit out of range '{0}'"' (int)ch);  	}  	v = (v * 16) + p;  }  
Magic Number,Sgml,Entity,C:\repos\dblock_sncore\SgmlReader\sgmlreaderdll\SgmlParser.cs,ExpandCharEntity,The following statement contains a magic number: if (ch >= '0' && ch <= '9') {  	p = (int)(ch - '0');  }  else if (ch >= 'a' && ch <= 'f') {  	p = (int)(ch - 'a') + 10;  }  else if (ch >= 'A' && ch <= 'F') {  	p = (int)(ch - 'A') + 10;  }  else {  	break;  	//we must be done!  	//Error("Hex digit out of range '{0}'"' (int)ch);  }  
Magic Number,Sgml,Entity,C:\repos\dblock_sncore\SgmlReader\sgmlreaderdll\SgmlParser.cs,ExpandCharEntity,The following statement contains a magic number: if (ch >= '0' && ch <= '9') {  	p = (int)(ch - '0');  }  else if (ch >= 'a' && ch <= 'f') {  	p = (int)(ch - 'a') + 10;  }  else if (ch >= 'A' && ch <= 'F') {  	p = (int)(ch - 'A') + 10;  }  else {  	break;  	//we must be done!  	//Error("Hex digit out of range '{0}'"' (int)ch);  }  
Magic Number,Sgml,Entity,C:\repos\dblock_sncore\SgmlReader\sgmlreaderdll\SgmlParser.cs,ExpandCharEntity,The following statement contains a magic number: if (ch >= 'a' && ch <= 'f') {  	p = (int)(ch - 'a') + 10;  }  else if (ch >= 'A' && ch <= 'F') {  	p = (int)(ch - 'A') + 10;  }  else {  	break;  	//we must be done!  	//Error("Hex digit out of range '{0}'"' (int)ch);  }  
Magic Number,Sgml,Entity,C:\repos\dblock_sncore\SgmlReader\sgmlreaderdll\SgmlParser.cs,ExpandCharEntity,The following statement contains a magic number: if (ch >= 'a' && ch <= 'f') {  	p = (int)(ch - 'a') + 10;  }  else if (ch >= 'A' && ch <= 'F') {  	p = (int)(ch - 'A') + 10;  }  else {  	break;  	//we must be done!  	//Error("Hex digit out of range '{0}'"' (int)ch);  }  
Magic Number,Sgml,Entity,C:\repos\dblock_sncore\SgmlReader\sgmlreaderdll\SgmlParser.cs,ExpandCharEntity,The following statement contains a magic number: p = (int)(ch - 'a') + 10;  
Magic Number,Sgml,Entity,C:\repos\dblock_sncore\SgmlReader\sgmlreaderdll\SgmlParser.cs,ExpandCharEntity,The following statement contains a magic number: if (ch >= 'A' && ch <= 'F') {  	p = (int)(ch - 'A') + 10;  }  else {  	break;  	//we must be done!  	//Error("Hex digit out of range '{0}'"' (int)ch);  }  
Magic Number,Sgml,Entity,C:\repos\dblock_sncore\SgmlReader\sgmlreaderdll\SgmlParser.cs,ExpandCharEntity,The following statement contains a magic number: p = (int)(ch - 'A') + 10;  
Magic Number,Sgml,Entity,C:\repos\dblock_sncore\SgmlReader\sgmlreaderdll\SgmlParser.cs,ExpandCharEntity,The following statement contains a magic number: v = (v * 16) + p;  
Magic Number,Sgml,Entity,C:\repos\dblock_sncore\SgmlReader\sgmlreaderdll\SgmlParser.cs,ExpandCharEntity,The following statement contains a magic number: for (; ch != Entity.EOF && ch != ';'; ch = ReadChar ()) {  	if (ch >= '0' && ch <= '9') {  		v = (v * 10) + (int)(ch - '0');  	}  	else {  		break;  		// we must be done!  		//Error("Decimal digit out of range '{0}'"' (int)ch);  	}  }  
Magic Number,Sgml,Entity,C:\repos\dblock_sncore\SgmlReader\sgmlreaderdll\SgmlParser.cs,ExpandCharEntity,The following statement contains a magic number: if (ch >= '0' && ch <= '9') {  	v = (v * 10) + (int)(ch - '0');  }  else {  	break;  	// we must be done!  	//Error("Decimal digit out of range '{0}'"' (int)ch);  }  
Magic Number,Sgml,Entity,C:\repos\dblock_sncore\SgmlReader\sgmlreaderdll\SgmlParser.cs,ExpandCharEntity,The following statement contains a magic number: v = (v * 10) + (int)(ch - '0');  
Magic Number,Sgml,HtmlStream,C:\repos\dblock_sncore\SgmlReader\sgmlreaderdll\SgmlParser.cs,HtmlStream,The following statement contains a magic number: rawUsed = stm.Read (rawBuffer' 0' 4);  
Magic Number,Sgml,HtmlStream,C:\repos\dblock_sncore\SgmlReader\sgmlreaderdll\SgmlParser.cs,HtmlStream,The following statement contains a magic number: if (this.decoder == null) {  	this.decoder = defaultEncoding.GetDecoder ();  	rawUsed += stm.Read (rawBuffer' 4' BUFSIZE - 4);  	DecodeBlock ();  	// Now sniff to see if there is an XML declaration or HTML <META> tag.  	Decoder sd = SniffEncoding ();  	if (sd != null) {  		this.decoder = sd;  	}  }  
Magic Number,Sgml,HtmlStream,C:\repos\dblock_sncore\SgmlReader\sgmlreaderdll\SgmlParser.cs,HtmlStream,The following statement contains a magic number: if (this.decoder == null) {  	this.decoder = defaultEncoding.GetDecoder ();  	rawUsed += stm.Read (rawBuffer' 4' BUFSIZE - 4);  	DecodeBlock ();  	// Now sniff to see if there is an XML declaration or HTML <META> tag.  	Decoder sd = SniffEncoding ();  	if (sd != null) {  		this.decoder = sd;  	}  }  
Magic Number,Sgml,HtmlStream,C:\repos\dblock_sncore\SgmlReader\sgmlreaderdll\SgmlParser.cs,HtmlStream,The following statement contains a magic number: rawUsed += stm.Read (rawBuffer' 4' BUFSIZE - 4);  
Magic Number,Sgml,HtmlStream,C:\repos\dblock_sncore\SgmlReader\sgmlreaderdll\SgmlParser.cs,HtmlStream,The following statement contains a magic number: rawUsed += stm.Read (rawBuffer' 4' BUFSIZE - 4);  
Magic Number,Sgml,HtmlStream,C:\repos\dblock_sncore\SgmlReader\sgmlreaderdll\SgmlParser.cs,AutoDetectEncoding,The following statement contains a magic number: if (4 <= (length - index)) {  	uint w = (uint)buffer [index + 0] << 24 | (uint)buffer [index + 1] << 16 | (uint)buffer [index + 2] << 8 | (uint)buffer [index + 3];  	// see if it's a 4-byte encoding  	switch (w) {  	case 0xfefffeff:  		index += 4;  		return new Ucs4DecoderBigEngian ();  	case 0xfffefffe:  		index += 4;  		return new Ucs4DecoderLittleEndian ();  	case 0x3c000000:  		goto case 0xfefffeff;  	case 0x0000003c:  		goto case 0xfffefffe;  	}  	w >>= 8;  	if (w == 0xefbbbf) {  		index += 3;  		return Encoding.UTF8.GetDecoder ();  	}  	w >>= 8;  	switch (w) {  	case 0xfeff:  		index += 2;  		return UnicodeEncoding.BigEndianUnicode.GetDecoder ();  	case 0xfffe:  		index += 2;  		return new UnicodeEncoding (false' false).GetDecoder ();  	case 0x3c00:  		goto case 0xfeff;  	case 0x003c:  		goto case 0xfffe;  	}  }  
Magic Number,Sgml,HtmlStream,C:\repos\dblock_sncore\SgmlReader\sgmlreaderdll\SgmlParser.cs,AutoDetectEncoding,The following statement contains a magic number: if (4 <= (length - index)) {  	uint w = (uint)buffer [index + 0] << 24 | (uint)buffer [index + 1] << 16 | (uint)buffer [index + 2] << 8 | (uint)buffer [index + 3];  	// see if it's a 4-byte encoding  	switch (w) {  	case 0xfefffeff:  		index += 4;  		return new Ucs4DecoderBigEngian ();  	case 0xfffefffe:  		index += 4;  		return new Ucs4DecoderLittleEndian ();  	case 0x3c000000:  		goto case 0xfefffeff;  	case 0x0000003c:  		goto case 0xfffefffe;  	}  	w >>= 8;  	if (w == 0xefbbbf) {  		index += 3;  		return Encoding.UTF8.GetDecoder ();  	}  	w >>= 8;  	switch (w) {  	case 0xfeff:  		index += 2;  		return UnicodeEncoding.BigEndianUnicode.GetDecoder ();  	case 0xfffe:  		index += 2;  		return new UnicodeEncoding (false' false).GetDecoder ();  	case 0x3c00:  		goto case 0xfeff;  	case 0x003c:  		goto case 0xfffe;  	}  }  
Magic Number,Sgml,HtmlStream,C:\repos\dblock_sncore\SgmlReader\sgmlreaderdll\SgmlParser.cs,AutoDetectEncoding,The following statement contains a magic number: if (4 <= (length - index)) {  	uint w = (uint)buffer [index + 0] << 24 | (uint)buffer [index + 1] << 16 | (uint)buffer [index + 2] << 8 | (uint)buffer [index + 3];  	// see if it's a 4-byte encoding  	switch (w) {  	case 0xfefffeff:  		index += 4;  		return new Ucs4DecoderBigEngian ();  	case 0xfffefffe:  		index += 4;  		return new Ucs4DecoderLittleEndian ();  	case 0x3c000000:  		goto case 0xfefffeff;  	case 0x0000003c:  		goto case 0xfffefffe;  	}  	w >>= 8;  	if (w == 0xefbbbf) {  		index += 3;  		return Encoding.UTF8.GetDecoder ();  	}  	w >>= 8;  	switch (w) {  	case 0xfeff:  		index += 2;  		return UnicodeEncoding.BigEndianUnicode.GetDecoder ();  	case 0xfffe:  		index += 2;  		return new UnicodeEncoding (false' false).GetDecoder ();  	case 0x3c00:  		goto case 0xfeff;  	case 0x003c:  		goto case 0xfffe;  	}  }  
Magic Number,Sgml,HtmlStream,C:\repos\dblock_sncore\SgmlReader\sgmlreaderdll\SgmlParser.cs,AutoDetectEncoding,The following statement contains a magic number: if (4 <= (length - index)) {  	uint w = (uint)buffer [index + 0] << 24 | (uint)buffer [index + 1] << 16 | (uint)buffer [index + 2] << 8 | (uint)buffer [index + 3];  	// see if it's a 4-byte encoding  	switch (w) {  	case 0xfefffeff:  		index += 4;  		return new Ucs4DecoderBigEngian ();  	case 0xfffefffe:  		index += 4;  		return new Ucs4DecoderLittleEndian ();  	case 0x3c000000:  		goto case 0xfefffeff;  	case 0x0000003c:  		goto case 0xfffefffe;  	}  	w >>= 8;  	if (w == 0xefbbbf) {  		index += 3;  		return Encoding.UTF8.GetDecoder ();  	}  	w >>= 8;  	switch (w) {  	case 0xfeff:  		index += 2;  		return UnicodeEncoding.BigEndianUnicode.GetDecoder ();  	case 0xfffe:  		index += 2;  		return new UnicodeEncoding (false' false).GetDecoder ();  	case 0x3c00:  		goto case 0xfeff;  	case 0x003c:  		goto case 0xfffe;  	}  }  
Magic Number,Sgml,HtmlStream,C:\repos\dblock_sncore\SgmlReader\sgmlreaderdll\SgmlParser.cs,AutoDetectEncoding,The following statement contains a magic number: if (4 <= (length - index)) {  	uint w = (uint)buffer [index + 0] << 24 | (uint)buffer [index + 1] << 16 | (uint)buffer [index + 2] << 8 | (uint)buffer [index + 3];  	// see if it's a 4-byte encoding  	switch (w) {  	case 0xfefffeff:  		index += 4;  		return new Ucs4DecoderBigEngian ();  	case 0xfffefffe:  		index += 4;  		return new Ucs4DecoderLittleEndian ();  	case 0x3c000000:  		goto case 0xfefffeff;  	case 0x0000003c:  		goto case 0xfffefffe;  	}  	w >>= 8;  	if (w == 0xefbbbf) {  		index += 3;  		return Encoding.UTF8.GetDecoder ();  	}  	w >>= 8;  	switch (w) {  	case 0xfeff:  		index += 2;  		return UnicodeEncoding.BigEndianUnicode.GetDecoder ();  	case 0xfffe:  		index += 2;  		return new UnicodeEncoding (false' false).GetDecoder ();  	case 0x3c00:  		goto case 0xfeff;  	case 0x003c:  		goto case 0xfffe;  	}  }  
Magic Number,Sgml,HtmlStream,C:\repos\dblock_sncore\SgmlReader\sgmlreaderdll\SgmlParser.cs,AutoDetectEncoding,The following statement contains a magic number: if (4 <= (length - index)) {  	uint w = (uint)buffer [index + 0] << 24 | (uint)buffer [index + 1] << 16 | (uint)buffer [index + 2] << 8 | (uint)buffer [index + 3];  	// see if it's a 4-byte encoding  	switch (w) {  	case 0xfefffeff:  		index += 4;  		return new Ucs4DecoderBigEngian ();  	case 0xfffefffe:  		index += 4;  		return new Ucs4DecoderLittleEndian ();  	case 0x3c000000:  		goto case 0xfefffeff;  	case 0x0000003c:  		goto case 0xfffefffe;  	}  	w >>= 8;  	if (w == 0xefbbbf) {  		index += 3;  		return Encoding.UTF8.GetDecoder ();  	}  	w >>= 8;  	switch (w) {  	case 0xfeff:  		index += 2;  		return UnicodeEncoding.BigEndianUnicode.GetDecoder ();  	case 0xfffe:  		index += 2;  		return new UnicodeEncoding (false' false).GetDecoder ();  	case 0x3c00:  		goto case 0xfeff;  	case 0x003c:  		goto case 0xfffe;  	}  }  
Magic Number,Sgml,HtmlStream,C:\repos\dblock_sncore\SgmlReader\sgmlreaderdll\SgmlParser.cs,AutoDetectEncoding,The following statement contains a magic number: if (4 <= (length - index)) {  	uint w = (uint)buffer [index + 0] << 24 | (uint)buffer [index + 1] << 16 | (uint)buffer [index + 2] << 8 | (uint)buffer [index + 3];  	// see if it's a 4-byte encoding  	switch (w) {  	case 0xfefffeff:  		index += 4;  		return new Ucs4DecoderBigEngian ();  	case 0xfffefffe:  		index += 4;  		return new Ucs4DecoderLittleEndian ();  	case 0x3c000000:  		goto case 0xfefffeff;  	case 0x0000003c:  		goto case 0xfffefffe;  	}  	w >>= 8;  	if (w == 0xefbbbf) {  		index += 3;  		return Encoding.UTF8.GetDecoder ();  	}  	w >>= 8;  	switch (w) {  	case 0xfeff:  		index += 2;  		return UnicodeEncoding.BigEndianUnicode.GetDecoder ();  	case 0xfffe:  		index += 2;  		return new UnicodeEncoding (false' false).GetDecoder ();  	case 0x3c00:  		goto case 0xfeff;  	case 0x003c:  		goto case 0xfffe;  	}  }  
Magic Number,Sgml,HtmlStream,C:\repos\dblock_sncore\SgmlReader\sgmlreaderdll\SgmlParser.cs,AutoDetectEncoding,The following statement contains a magic number: if (4 <= (length - index)) {  	uint w = (uint)buffer [index + 0] << 24 | (uint)buffer [index + 1] << 16 | (uint)buffer [index + 2] << 8 | (uint)buffer [index + 3];  	// see if it's a 4-byte encoding  	switch (w) {  	case 0xfefffeff:  		index += 4;  		return new Ucs4DecoderBigEngian ();  	case 0xfffefffe:  		index += 4;  		return new Ucs4DecoderLittleEndian ();  	case 0x3c000000:  		goto case 0xfefffeff;  	case 0x0000003c:  		goto case 0xfffefffe;  	}  	w >>= 8;  	if (w == 0xefbbbf) {  		index += 3;  		return Encoding.UTF8.GetDecoder ();  	}  	w >>= 8;  	switch (w) {  	case 0xfeff:  		index += 2;  		return UnicodeEncoding.BigEndianUnicode.GetDecoder ();  	case 0xfffe:  		index += 2;  		return new UnicodeEncoding (false' false).GetDecoder ();  	case 0x3c00:  		goto case 0xfeff;  	case 0x003c:  		goto case 0xfffe;  	}  }  
Magic Number,Sgml,HtmlStream,C:\repos\dblock_sncore\SgmlReader\sgmlreaderdll\SgmlParser.cs,AutoDetectEncoding,The following statement contains a magic number: if (4 <= (length - index)) {  	uint w = (uint)buffer [index + 0] << 24 | (uint)buffer [index + 1] << 16 | (uint)buffer [index + 2] << 8 | (uint)buffer [index + 3];  	// see if it's a 4-byte encoding  	switch (w) {  	case 0xfefffeff:  		index += 4;  		return new Ucs4DecoderBigEngian ();  	case 0xfffefffe:  		index += 4;  		return new Ucs4DecoderLittleEndian ();  	case 0x3c000000:  		goto case 0xfefffeff;  	case 0x0000003c:  		goto case 0xfffefffe;  	}  	w >>= 8;  	if (w == 0xefbbbf) {  		index += 3;  		return Encoding.UTF8.GetDecoder ();  	}  	w >>= 8;  	switch (w) {  	case 0xfeff:  		index += 2;  		return UnicodeEncoding.BigEndianUnicode.GetDecoder ();  	case 0xfffe:  		index += 2;  		return new UnicodeEncoding (false' false).GetDecoder ();  	case 0x3c00:  		goto case 0xfeff;  	case 0x003c:  		goto case 0xfffe;  	}  }  
Magic Number,Sgml,HtmlStream,C:\repos\dblock_sncore\SgmlReader\sgmlreaderdll\SgmlParser.cs,AutoDetectEncoding,The following statement contains a magic number: if (4 <= (length - index)) {  	uint w = (uint)buffer [index + 0] << 24 | (uint)buffer [index + 1] << 16 | (uint)buffer [index + 2] << 8 | (uint)buffer [index + 3];  	// see if it's a 4-byte encoding  	switch (w) {  	case 0xfefffeff:  		index += 4;  		return new Ucs4DecoderBigEngian ();  	case 0xfffefffe:  		index += 4;  		return new Ucs4DecoderLittleEndian ();  	case 0x3c000000:  		goto case 0xfefffeff;  	case 0x0000003c:  		goto case 0xfffefffe;  	}  	w >>= 8;  	if (w == 0xefbbbf) {  		index += 3;  		return Encoding.UTF8.GetDecoder ();  	}  	w >>= 8;  	switch (w) {  	case 0xfeff:  		index += 2;  		return UnicodeEncoding.BigEndianUnicode.GetDecoder ();  	case 0xfffe:  		index += 2;  		return new UnicodeEncoding (false' false).GetDecoder ();  	case 0x3c00:  		goto case 0xfeff;  	case 0x003c:  		goto case 0xfffe;  	}  }  
Magic Number,Sgml,HtmlStream,C:\repos\dblock_sncore\SgmlReader\sgmlreaderdll\SgmlParser.cs,AutoDetectEncoding,The following statement contains a magic number: if (4 <= (length - index)) {  	uint w = (uint)buffer [index + 0] << 24 | (uint)buffer [index + 1] << 16 | (uint)buffer [index + 2] << 8 | (uint)buffer [index + 3];  	// see if it's a 4-byte encoding  	switch (w) {  	case 0xfefffeff:  		index += 4;  		return new Ucs4DecoderBigEngian ();  	case 0xfffefffe:  		index += 4;  		return new Ucs4DecoderLittleEndian ();  	case 0x3c000000:  		goto case 0xfefffeff;  	case 0x0000003c:  		goto case 0xfffefffe;  	}  	w >>= 8;  	if (w == 0xefbbbf) {  		index += 3;  		return Encoding.UTF8.GetDecoder ();  	}  	w >>= 8;  	switch (w) {  	case 0xfeff:  		index += 2;  		return UnicodeEncoding.BigEndianUnicode.GetDecoder ();  	case 0xfffe:  		index += 2;  		return new UnicodeEncoding (false' false).GetDecoder ();  	case 0x3c00:  		goto case 0xfeff;  	case 0x003c:  		goto case 0xfffe;  	}  }  
Magic Number,Sgml,HtmlStream,C:\repos\dblock_sncore\SgmlReader\sgmlreaderdll\SgmlParser.cs,AutoDetectEncoding,The following statement contains a magic number: if (4 <= (length - index)) {  	uint w = (uint)buffer [index + 0] << 24 | (uint)buffer [index + 1] << 16 | (uint)buffer [index + 2] << 8 | (uint)buffer [index + 3];  	// see if it's a 4-byte encoding  	switch (w) {  	case 0xfefffeff:  		index += 4;  		return new Ucs4DecoderBigEngian ();  	case 0xfffefffe:  		index += 4;  		return new Ucs4DecoderLittleEndian ();  	case 0x3c000000:  		goto case 0xfefffeff;  	case 0x0000003c:  		goto case 0xfffefffe;  	}  	w >>= 8;  	if (w == 0xefbbbf) {  		index += 3;  		return Encoding.UTF8.GetDecoder ();  	}  	w >>= 8;  	switch (w) {  	case 0xfeff:  		index += 2;  		return UnicodeEncoding.BigEndianUnicode.GetDecoder ();  	case 0xfffe:  		index += 2;  		return new UnicodeEncoding (false' false).GetDecoder ();  	case 0x3c00:  		goto case 0xfeff;  	case 0x003c:  		goto case 0xfffe;  	}  }  
Magic Number,Sgml,HtmlStream,C:\repos\dblock_sncore\SgmlReader\sgmlreaderdll\SgmlParser.cs,AutoDetectEncoding,The following statement contains a magic number: if (4 <= (length - index)) {  	uint w = (uint)buffer [index + 0] << 24 | (uint)buffer [index + 1] << 16 | (uint)buffer [index + 2] << 8 | (uint)buffer [index + 3];  	// see if it's a 4-byte encoding  	switch (w) {  	case 0xfefffeff:  		index += 4;  		return new Ucs4DecoderBigEngian ();  	case 0xfffefffe:  		index += 4;  		return new Ucs4DecoderLittleEndian ();  	case 0x3c000000:  		goto case 0xfefffeff;  	case 0x0000003c:  		goto case 0xfffefffe;  	}  	w >>= 8;  	if (w == 0xefbbbf) {  		index += 3;  		return Encoding.UTF8.GetDecoder ();  	}  	w >>= 8;  	switch (w) {  	case 0xfeff:  		index += 2;  		return UnicodeEncoding.BigEndianUnicode.GetDecoder ();  	case 0xfffe:  		index += 2;  		return new UnicodeEncoding (false' false).GetDecoder ();  	case 0x3c00:  		goto case 0xfeff;  	case 0x003c:  		goto case 0xfffe;  	}  }  
Magic Number,Sgml,HtmlStream,C:\repos\dblock_sncore\SgmlReader\sgmlreaderdll\SgmlParser.cs,AutoDetectEncoding,The following statement contains a magic number: switch (w) {  case 0xfefffeff:  	index += 4;  	return new Ucs4DecoderBigEngian ();  case 0xfffefffe:  	index += 4;  	return new Ucs4DecoderLittleEndian ();  case 0x3c000000:  	goto case 0xfefffeff;  case 0x0000003c:  	goto case 0xfffefffe;  }  
Magic Number,Sgml,HtmlStream,C:\repos\dblock_sncore\SgmlReader\sgmlreaderdll\SgmlParser.cs,AutoDetectEncoding,The following statement contains a magic number: switch (w) {  case 0xfefffeff:  	index += 4;  	return new Ucs4DecoderBigEngian ();  case 0xfffefffe:  	index += 4;  	return new Ucs4DecoderLittleEndian ();  case 0x3c000000:  	goto case 0xfefffeff;  case 0x0000003c:  	goto case 0xfffefffe;  }  
Magic Number,Sgml,HtmlStream,C:\repos\dblock_sncore\SgmlReader\sgmlreaderdll\SgmlParser.cs,AutoDetectEncoding,The following statement contains a magic number: index += 4;  
Magic Number,Sgml,HtmlStream,C:\repos\dblock_sncore\SgmlReader\sgmlreaderdll\SgmlParser.cs,AutoDetectEncoding,The following statement contains a magic number: index += 4;  
Magic Number,Sgml,HtmlStream,C:\repos\dblock_sncore\SgmlReader\sgmlreaderdll\SgmlParser.cs,AutoDetectEncoding,The following statement contains a magic number: w >>= 8;  
Magic Number,Sgml,HtmlStream,C:\repos\dblock_sncore\SgmlReader\sgmlreaderdll\SgmlParser.cs,AutoDetectEncoding,The following statement contains a magic number: if (w == 0xefbbbf) {  	index += 3;  	return Encoding.UTF8.GetDecoder ();  }  
Magic Number,Sgml,HtmlStream,C:\repos\dblock_sncore\SgmlReader\sgmlreaderdll\SgmlParser.cs,AutoDetectEncoding,The following statement contains a magic number: index += 3;  
Magic Number,Sgml,HtmlStream,C:\repos\dblock_sncore\SgmlReader\sgmlreaderdll\SgmlParser.cs,AutoDetectEncoding,The following statement contains a magic number: w >>= 8;  
Magic Number,Sgml,HtmlStream,C:\repos\dblock_sncore\SgmlReader\sgmlreaderdll\SgmlParser.cs,AutoDetectEncoding,The following statement contains a magic number: switch (w) {  case 0xfeff:  	index += 2;  	return UnicodeEncoding.BigEndianUnicode.GetDecoder ();  case 0xfffe:  	index += 2;  	return new UnicodeEncoding (false' false).GetDecoder ();  case 0x3c00:  	goto case 0xfeff;  case 0x003c:  	goto case 0xfffe;  }  
Magic Number,Sgml,HtmlStream,C:\repos\dblock_sncore\SgmlReader\sgmlreaderdll\SgmlParser.cs,AutoDetectEncoding,The following statement contains a magic number: switch (w) {  case 0xfeff:  	index += 2;  	return UnicodeEncoding.BigEndianUnicode.GetDecoder ();  case 0xfffe:  	index += 2;  	return new UnicodeEncoding (false' false).GetDecoder ();  case 0x3c00:  	goto case 0xfeff;  case 0x003c:  	goto case 0xfffe;  }  
Magic Number,Sgml,HtmlStream,C:\repos\dblock_sncore\SgmlReader\sgmlreaderdll\SgmlParser.cs,AutoDetectEncoding,The following statement contains a magic number: index += 2;  
Magic Number,Sgml,HtmlStream,C:\repos\dblock_sncore\SgmlReader\sgmlreaderdll\SgmlParser.cs,AutoDetectEncoding,The following statement contains a magic number: index += 2;  
Magic Number,Sgml,Ucs4Decoder,C:\repos\dblock_sncore\SgmlReader\sgmlreaderdll\SgmlParser.cs,GetCharCount,The following statement contains a magic number: return (count + tempBytes) / 4;  
Magic Number,Sgml,Ucs4Decoder,C:\repos\dblock_sncore\SgmlReader\sgmlreaderdll\SgmlParser.cs,GetChars,The following statement contains a magic number: if (tempBytes > 0) {  	for (; i < 4; i++) {  		temp [i] = bytes [byteIndex];  		byteIndex++;  		byteCount--;  	}  	i = 1;  	GetFullChars (temp' 0' 4' chars' charIndex);  	charIndex++;  }  else  	i = 0;  
Magic Number,Sgml,Ucs4Decoder,C:\repos\dblock_sncore\SgmlReader\sgmlreaderdll\SgmlParser.cs,GetChars,The following statement contains a magic number: if (tempBytes > 0) {  	for (; i < 4; i++) {  		temp [i] = bytes [byteIndex];  		byteIndex++;  		byteCount--;  	}  	i = 1;  	GetFullChars (temp' 0' 4' chars' charIndex);  	charIndex++;  }  else  	i = 0;  
Magic Number,Sgml,Ucs4Decoder,C:\repos\dblock_sncore\SgmlReader\sgmlreaderdll\SgmlParser.cs,GetChars,The following statement contains a magic number: for (; i < 4; i++) {  	temp [i] = bytes [byteIndex];  	byteIndex++;  	byteCount--;  }  
Magic Number,Sgml,Ucs4Decoder,C:\repos\dblock_sncore\SgmlReader\sgmlreaderdll\SgmlParser.cs,GetChars,The following statement contains a magic number: GetFullChars (temp' 0' 4' chars' charIndex);  
Magic Number,Sgml,Ucs4Decoder,C:\repos\dblock_sncore\SgmlReader\sgmlreaderdll\SgmlParser.cs,UnicodeToUTF16,The following statement contains a magic number: lowerByte = (byte)(0xD7C0 + (code >> 10));  
Magic Number,Sgml,Ucs4Decoder,C:\repos\dblock_sncore\SgmlReader\sgmlreaderdll\SgmlParser.cs,UnicodeToUTF16,The following statement contains a magic number: return ((char)((higherByte << 8) | lowerByte));  
Magic Number,Sgml,Ucs4DecoderBigEngian,C:\repos\dblock_sncore\SgmlReader\sgmlreaderdll\SgmlParser.cs,GetFullChars,The following statement contains a magic number: for (i = byteIndex' j = charIndex; i + 3 < byteCount;) {  	code = (UInt32)(((bytes [i + 3]) << 24) | (bytes [i + 2] << 16) | (bytes [i + 1] << 8) | (bytes [i]));  	if (code > 0x10FFFF) {  		throw new Exception ("Invalid character 0x" + code.ToString ("x") + " in encoding");  	}  	else if (code > 0xFFFF) {  		chars [j] = UnicodeToUTF16 (code);  		j++;  	}  	else {  		if (code >= 0xD800 && code <= 0xDFFF) {  			throw new Exception ("Invalid character 0x" + code.ToString ("x") + " in encoding");  		}  		else {  			chars [j] = (char)code;  		}  	}  	j++;  	i += 4;  }  
Magic Number,Sgml,Ucs4DecoderBigEngian,C:\repos\dblock_sncore\SgmlReader\sgmlreaderdll\SgmlParser.cs,GetFullChars,The following statement contains a magic number: for (i = byteIndex' j = charIndex; i + 3 < byteCount;) {  	code = (UInt32)(((bytes [i + 3]) << 24) | (bytes [i + 2] << 16) | (bytes [i + 1] << 8) | (bytes [i]));  	if (code > 0x10FFFF) {  		throw new Exception ("Invalid character 0x" + code.ToString ("x") + " in encoding");  	}  	else if (code > 0xFFFF) {  		chars [j] = UnicodeToUTF16 (code);  		j++;  	}  	else {  		if (code >= 0xD800 && code <= 0xDFFF) {  			throw new Exception ("Invalid character 0x" + code.ToString ("x") + " in encoding");  		}  		else {  			chars [j] = (char)code;  		}  	}  	j++;  	i += 4;  }  
Magic Number,Sgml,Ucs4DecoderBigEngian,C:\repos\dblock_sncore\SgmlReader\sgmlreaderdll\SgmlParser.cs,GetFullChars,The following statement contains a magic number: for (i = byteIndex' j = charIndex; i + 3 < byteCount;) {  	code = (UInt32)(((bytes [i + 3]) << 24) | (bytes [i + 2] << 16) | (bytes [i + 1] << 8) | (bytes [i]));  	if (code > 0x10FFFF) {  		throw new Exception ("Invalid character 0x" + code.ToString ("x") + " in encoding");  	}  	else if (code > 0xFFFF) {  		chars [j] = UnicodeToUTF16 (code);  		j++;  	}  	else {  		if (code >= 0xD800 && code <= 0xDFFF) {  			throw new Exception ("Invalid character 0x" + code.ToString ("x") + " in encoding");  		}  		else {  			chars [j] = (char)code;  		}  	}  	j++;  	i += 4;  }  
Magic Number,Sgml,Ucs4DecoderBigEngian,C:\repos\dblock_sncore\SgmlReader\sgmlreaderdll\SgmlParser.cs,GetFullChars,The following statement contains a magic number: for (i = byteIndex' j = charIndex; i + 3 < byteCount;) {  	code = (UInt32)(((bytes [i + 3]) << 24) | (bytes [i + 2] << 16) | (bytes [i + 1] << 8) | (bytes [i]));  	if (code > 0x10FFFF) {  		throw new Exception ("Invalid character 0x" + code.ToString ("x") + " in encoding");  	}  	else if (code > 0xFFFF) {  		chars [j] = UnicodeToUTF16 (code);  		j++;  	}  	else {  		if (code >= 0xD800 && code <= 0xDFFF) {  			throw new Exception ("Invalid character 0x" + code.ToString ("x") + " in encoding");  		}  		else {  			chars [j] = (char)code;  		}  	}  	j++;  	i += 4;  }  
Magic Number,Sgml,Ucs4DecoderBigEngian,C:\repos\dblock_sncore\SgmlReader\sgmlreaderdll\SgmlParser.cs,GetFullChars,The following statement contains a magic number: for (i = byteIndex' j = charIndex; i + 3 < byteCount;) {  	code = (UInt32)(((bytes [i + 3]) << 24) | (bytes [i + 2] << 16) | (bytes [i + 1] << 8) | (bytes [i]));  	if (code > 0x10FFFF) {  		throw new Exception ("Invalid character 0x" + code.ToString ("x") + " in encoding");  	}  	else if (code > 0xFFFF) {  		chars [j] = UnicodeToUTF16 (code);  		j++;  	}  	else {  		if (code >= 0xD800 && code <= 0xDFFF) {  			throw new Exception ("Invalid character 0x" + code.ToString ("x") + " in encoding");  		}  		else {  			chars [j] = (char)code;  		}  	}  	j++;  	i += 4;  }  
Magic Number,Sgml,Ucs4DecoderBigEngian,C:\repos\dblock_sncore\SgmlReader\sgmlreaderdll\SgmlParser.cs,GetFullChars,The following statement contains a magic number: for (i = byteIndex' j = charIndex; i + 3 < byteCount;) {  	code = (UInt32)(((bytes [i + 3]) << 24) | (bytes [i + 2] << 16) | (bytes [i + 1] << 8) | (bytes [i]));  	if (code > 0x10FFFF) {  		throw new Exception ("Invalid character 0x" + code.ToString ("x") + " in encoding");  	}  	else if (code > 0xFFFF) {  		chars [j] = UnicodeToUTF16 (code);  		j++;  	}  	else {  		if (code >= 0xD800 && code <= 0xDFFF) {  			throw new Exception ("Invalid character 0x" + code.ToString ("x") + " in encoding");  		}  		else {  			chars [j] = (char)code;  		}  	}  	j++;  	i += 4;  }  
Magic Number,Sgml,Ucs4DecoderBigEngian,C:\repos\dblock_sncore\SgmlReader\sgmlreaderdll\SgmlParser.cs,GetFullChars,The following statement contains a magic number: for (i = byteIndex' j = charIndex; i + 3 < byteCount;) {  	code = (UInt32)(((bytes [i + 3]) << 24) | (bytes [i + 2] << 16) | (bytes [i + 1] << 8) | (bytes [i]));  	if (code > 0x10FFFF) {  		throw new Exception ("Invalid character 0x" + code.ToString ("x") + " in encoding");  	}  	else if (code > 0xFFFF) {  		chars [j] = UnicodeToUTF16 (code);  		j++;  	}  	else {  		if (code >= 0xD800 && code <= 0xDFFF) {  			throw new Exception ("Invalid character 0x" + code.ToString ("x") + " in encoding");  		}  		else {  			chars [j] = (char)code;  		}  	}  	j++;  	i += 4;  }  
Magic Number,Sgml,Ucs4DecoderBigEngian,C:\repos\dblock_sncore\SgmlReader\sgmlreaderdll\SgmlParser.cs,GetFullChars,The following statement contains a magic number: code = (UInt32)(((bytes [i + 3]) << 24) | (bytes [i + 2] << 16) | (bytes [i + 1] << 8) | (bytes [i]));  
Magic Number,Sgml,Ucs4DecoderBigEngian,C:\repos\dblock_sncore\SgmlReader\sgmlreaderdll\SgmlParser.cs,GetFullChars,The following statement contains a magic number: code = (UInt32)(((bytes [i + 3]) << 24) | (bytes [i + 2] << 16) | (bytes [i + 1] << 8) | (bytes [i]));  
Magic Number,Sgml,Ucs4DecoderBigEngian,C:\repos\dblock_sncore\SgmlReader\sgmlreaderdll\SgmlParser.cs,GetFullChars,The following statement contains a magic number: code = (UInt32)(((bytes [i + 3]) << 24) | (bytes [i + 2] << 16) | (bytes [i + 1] << 8) | (bytes [i]));  
Magic Number,Sgml,Ucs4DecoderBigEngian,C:\repos\dblock_sncore\SgmlReader\sgmlreaderdll\SgmlParser.cs,GetFullChars,The following statement contains a magic number: code = (UInt32)(((bytes [i + 3]) << 24) | (bytes [i + 2] << 16) | (bytes [i + 1] << 8) | (bytes [i]));  
Magic Number,Sgml,Ucs4DecoderBigEngian,C:\repos\dblock_sncore\SgmlReader\sgmlreaderdll\SgmlParser.cs,GetFullChars,The following statement contains a magic number: code = (UInt32)(((bytes [i + 3]) << 24) | (bytes [i + 2] << 16) | (bytes [i + 1] << 8) | (bytes [i]));  
Magic Number,Sgml,Ucs4DecoderBigEngian,C:\repos\dblock_sncore\SgmlReader\sgmlreaderdll\SgmlParser.cs,GetFullChars,The following statement contains a magic number: i += 4;  
Magic Number,Sgml,Ucs4DecoderLittleEndian,C:\repos\dblock_sncore\SgmlReader\sgmlreaderdll\SgmlParser.cs,GetFullChars,The following statement contains a magic number: for (i = byteIndex' j = charIndex; i + 3 < byteCount;) {  	code = (UInt32)(((bytes [i]) << 24) | (bytes [i + 1] << 16) | (bytes [i + 2] << 8) | (bytes [i + 3]));  	if (code > 0x10FFFF) {  		throw new Exception ("Invalid character 0x" + code.ToString ("x") + " in encoding");  	}  	else if (code > 0xFFFF) {  		chars [j] = UnicodeToUTF16 (code);  		j++;  	}  	else {  		if (code >= 0xD800 && code <= 0xDFFF) {  			throw new Exception ("Invalid character 0x" + code.ToString ("x") + " in encoding");  		}  		else {  			chars [j] = (char)code;  		}  	}  	j++;  	i += 4;  }  
Magic Number,Sgml,Ucs4DecoderLittleEndian,C:\repos\dblock_sncore\SgmlReader\sgmlreaderdll\SgmlParser.cs,GetFullChars,The following statement contains a magic number: for (i = byteIndex' j = charIndex; i + 3 < byteCount;) {  	code = (UInt32)(((bytes [i]) << 24) | (bytes [i + 1] << 16) | (bytes [i + 2] << 8) | (bytes [i + 3]));  	if (code > 0x10FFFF) {  		throw new Exception ("Invalid character 0x" + code.ToString ("x") + " in encoding");  	}  	else if (code > 0xFFFF) {  		chars [j] = UnicodeToUTF16 (code);  		j++;  	}  	else {  		if (code >= 0xD800 && code <= 0xDFFF) {  			throw new Exception ("Invalid character 0x" + code.ToString ("x") + " in encoding");  		}  		else {  			chars [j] = (char)code;  		}  	}  	j++;  	i += 4;  }  
Magic Number,Sgml,Ucs4DecoderLittleEndian,C:\repos\dblock_sncore\SgmlReader\sgmlreaderdll\SgmlParser.cs,GetFullChars,The following statement contains a magic number: for (i = byteIndex' j = charIndex; i + 3 < byteCount;) {  	code = (UInt32)(((bytes [i]) << 24) | (bytes [i + 1] << 16) | (bytes [i + 2] << 8) | (bytes [i + 3]));  	if (code > 0x10FFFF) {  		throw new Exception ("Invalid character 0x" + code.ToString ("x") + " in encoding");  	}  	else if (code > 0xFFFF) {  		chars [j] = UnicodeToUTF16 (code);  		j++;  	}  	else {  		if (code >= 0xD800 && code <= 0xDFFF) {  			throw new Exception ("Invalid character 0x" + code.ToString ("x") + " in encoding");  		}  		else {  			chars [j] = (char)code;  		}  	}  	j++;  	i += 4;  }  
Magic Number,Sgml,Ucs4DecoderLittleEndian,C:\repos\dblock_sncore\SgmlReader\sgmlreaderdll\SgmlParser.cs,GetFullChars,The following statement contains a magic number: for (i = byteIndex' j = charIndex; i + 3 < byteCount;) {  	code = (UInt32)(((bytes [i]) << 24) | (bytes [i + 1] << 16) | (bytes [i + 2] << 8) | (bytes [i + 3]));  	if (code > 0x10FFFF) {  		throw new Exception ("Invalid character 0x" + code.ToString ("x") + " in encoding");  	}  	else if (code > 0xFFFF) {  		chars [j] = UnicodeToUTF16 (code);  		j++;  	}  	else {  		if (code >= 0xD800 && code <= 0xDFFF) {  			throw new Exception ("Invalid character 0x" + code.ToString ("x") + " in encoding");  		}  		else {  			chars [j] = (char)code;  		}  	}  	j++;  	i += 4;  }  
Magic Number,Sgml,Ucs4DecoderLittleEndian,C:\repos\dblock_sncore\SgmlReader\sgmlreaderdll\SgmlParser.cs,GetFullChars,The following statement contains a magic number: for (i = byteIndex' j = charIndex; i + 3 < byteCount;) {  	code = (UInt32)(((bytes [i]) << 24) | (bytes [i + 1] << 16) | (bytes [i + 2] << 8) | (bytes [i + 3]));  	if (code > 0x10FFFF) {  		throw new Exception ("Invalid character 0x" + code.ToString ("x") + " in encoding");  	}  	else if (code > 0xFFFF) {  		chars [j] = UnicodeToUTF16 (code);  		j++;  	}  	else {  		if (code >= 0xD800 && code <= 0xDFFF) {  			throw new Exception ("Invalid character 0x" + code.ToString ("x") + " in encoding");  		}  		else {  			chars [j] = (char)code;  		}  	}  	j++;  	i += 4;  }  
Magic Number,Sgml,Ucs4DecoderLittleEndian,C:\repos\dblock_sncore\SgmlReader\sgmlreaderdll\SgmlParser.cs,GetFullChars,The following statement contains a magic number: for (i = byteIndex' j = charIndex; i + 3 < byteCount;) {  	code = (UInt32)(((bytes [i]) << 24) | (bytes [i + 1] << 16) | (bytes [i + 2] << 8) | (bytes [i + 3]));  	if (code > 0x10FFFF) {  		throw new Exception ("Invalid character 0x" + code.ToString ("x") + " in encoding");  	}  	else if (code > 0xFFFF) {  		chars [j] = UnicodeToUTF16 (code);  		j++;  	}  	else {  		if (code >= 0xD800 && code <= 0xDFFF) {  			throw new Exception ("Invalid character 0x" + code.ToString ("x") + " in encoding");  		}  		else {  			chars [j] = (char)code;  		}  	}  	j++;  	i += 4;  }  
Magic Number,Sgml,Ucs4DecoderLittleEndian,C:\repos\dblock_sncore\SgmlReader\sgmlreaderdll\SgmlParser.cs,GetFullChars,The following statement contains a magic number: for (i = byteIndex' j = charIndex; i + 3 < byteCount;) {  	code = (UInt32)(((bytes [i]) << 24) | (bytes [i + 1] << 16) | (bytes [i + 2] << 8) | (bytes [i + 3]));  	if (code > 0x10FFFF) {  		throw new Exception ("Invalid character 0x" + code.ToString ("x") + " in encoding");  	}  	else if (code > 0xFFFF) {  		chars [j] = UnicodeToUTF16 (code);  		j++;  	}  	else {  		if (code >= 0xD800 && code <= 0xDFFF) {  			throw new Exception ("Invalid character 0x" + code.ToString ("x") + " in encoding");  		}  		else {  			chars [j] = (char)code;  		}  	}  	j++;  	i += 4;  }  
Magic Number,Sgml,Ucs4DecoderLittleEndian,C:\repos\dblock_sncore\SgmlReader\sgmlreaderdll\SgmlParser.cs,GetFullChars,The following statement contains a magic number: code = (UInt32)(((bytes [i]) << 24) | (bytes [i + 1] << 16) | (bytes [i + 2] << 8) | (bytes [i + 3]));  
Magic Number,Sgml,Ucs4DecoderLittleEndian,C:\repos\dblock_sncore\SgmlReader\sgmlreaderdll\SgmlParser.cs,GetFullChars,The following statement contains a magic number: code = (UInt32)(((bytes [i]) << 24) | (bytes [i + 1] << 16) | (bytes [i + 2] << 8) | (bytes [i + 3]));  
Magic Number,Sgml,Ucs4DecoderLittleEndian,C:\repos\dblock_sncore\SgmlReader\sgmlreaderdll\SgmlParser.cs,GetFullChars,The following statement contains a magic number: code = (UInt32)(((bytes [i]) << 24) | (bytes [i + 1] << 16) | (bytes [i + 2] << 8) | (bytes [i + 3]));  
Magic Number,Sgml,Ucs4DecoderLittleEndian,C:\repos\dblock_sncore\SgmlReader\sgmlreaderdll\SgmlParser.cs,GetFullChars,The following statement contains a magic number: code = (UInt32)(((bytes [i]) << 24) | (bytes [i + 1] << 16) | (bytes [i + 2] << 8) | (bytes [i + 3]));  
Magic Number,Sgml,Ucs4DecoderLittleEndian,C:\repos\dblock_sncore\SgmlReader\sgmlreaderdll\SgmlParser.cs,GetFullChars,The following statement contains a magic number: code = (UInt32)(((bytes [i]) << 24) | (bytes [i + 1] << 16) | (bytes [i + 2] << 8) | (bytes [i + 3]));  
Magic Number,Sgml,Ucs4DecoderLittleEndian,C:\repos\dblock_sncore\SgmlReader\sgmlreaderdll\SgmlParser.cs,GetFullChars,The following statement contains a magic number: i += 4;  
Magic Number,Sgml,SgmlReader,C:\repos\dblock_sncore\SgmlReader\sgmlreaderdll\SgmlReader.cs,Init,The following statement contains a magic number: this.stack = new HWStack (10);  
Magic Number,Sgml,SgmlReader,C:\repos\dblock_sncore\SgmlReader\sgmlreaderdll\SgmlReader.cs,ParseComment,The following statement contains a magic number: while (i >= 0) {  	int j = i + 2;  	while (j < value.Length && value [j] == '-')  		j++;  	if (i > 0) {  		value = value.Substring (0' i - 1) + "-" + value.Substring (j);  	}  	else {  		value = "-" + value.Substring (j);  	}  	i = value.IndexOf ("--");  }  
Magic Number,Sgml,SgmlReader,C:\repos\dblock_sncore\SgmlReader\sgmlreaderdll\SgmlReader.cs,ValidateContent,The following statement contains a magic number: if (this.dtd != null) {  	// See if this element is allowed inside the current element.  	// If it isn't' then auto-close elements until we find one  	// that it is allowed to be in.                                    	string name = this.nametable.Add (node.Name.ToUpper ());  	// DTD is in upper case  	int i = 0;  	int top = this.stack.Count - 2;  	if (node.DtdType != null) {  		// it is a known element' let's see if it's allowed in the  		// current context.  		for (i = top; i > 0; i--) {  			Node n = (Node)this.stack [i];  			if (n.IsEmpty)  				continue;  			// we'll have to pop this one  			ElementDecl f = n.DtdType;  			if (f != null) {  				if (f.Name == this.dtd.Name)  					break;  				// can't pop the root element.  				if (f.CanContain (name' this.dtd)) {  					break;  				}  				else if (!f.EndTagOptional) {  					// If the end tag is not optional then we can't  					// auto-close it.  We'll just have to live with the  					// junk we've found and move on.  					break;  				}  			}  			else {  				// Since we don't understand this tag anyway'  				// we might as well allow this content!  				break;  			}  		}  	}  	if (i == 0) {  		// Tag was not found or is not allowed anywhere' ignore it and   		// continue on.  	}  	else if (i < top) {  		Node n = (Node)this.stack [top];  		if (i == top - 1 && name == n.Name) {  			// e.g. p not allowed inside p' not an interesting error.  		}  		else {  			string closing = "";  			for (int k = top; k >= i + 1; k--) {  				if (closing != "")  					closing += "'";  				Node n2 = (Node)this.stack [k];  				closing += "<" + n2.Name + ">";  			}  			Log ("Element '{0}' not allowed inside '{1}'' closing {2}."' name' n.Name' closing);  		}  		this.state = State.AutoClose;  		this.newnode = node;  		Pop ();  		// save this new node until we pop the others  		this.poptodepth = i + 1;  	}  }  
Missing Default,Sgml,Entity,C:\repos\dblock_sncore\SgmlReader\sgmlreaderdll\SgmlParser.cs,SetLiteralType,The following switch statement is missing a default case: switch (token) {  case "CDATA":  	LiteralType = LiteralType.CDATA;  	break;  case "SDATA":  	LiteralType = LiteralType.SDATA;  	break;  case "PI":  	LiteralType = LiteralType.PI;  	break;  }  
Missing Default,Sgml,HtmlStream,C:\repos\dblock_sncore\SgmlReader\sgmlreaderdll\SgmlParser.cs,AutoDetectEncoding,The following switch statement is missing a default case: switch (w) {  case 0xfefffeff:  	index += 4;  	return new Ucs4DecoderBigEngian ();  case 0xfffefffe:  	index += 4;  	return new Ucs4DecoderLittleEndian ();  case 0x3c000000:  	goto case 0xfefffeff;  case 0x0000003c:  	goto case 0xfffefffe;  }  
Missing Default,Sgml,HtmlStream,C:\repos\dblock_sncore\SgmlReader\sgmlreaderdll\SgmlParser.cs,AutoDetectEncoding,The following switch statement is missing a default case: switch (w) {  case 0xfeff:  	index += 2;  	return UnicodeEncoding.BigEndianUnicode.GetDecoder ();  case 0xfffe:  	index += 2;  	return new UnicodeEncoding (false' false).GetDecoder ();  case 0x3c00:  	goto case 0xfeff;  case 0x003c:  	goto case 0xfffe;  }  
Missing Default,Sgml,Group,C:\repos\dblock_sncore\SgmlReader\sgmlreaderdll\SgmlParser.cs,AddConnector,The following switch statement is missing a default case: switch (c) {  case ''':  	gt = GroupType.Sequence;  	break;  case '|':  	gt = GroupType.Or;  	break;  case '&':  	gt = GroupType.And;  	break;  }  
Missing Default,Sgml,Group,C:\repos\dblock_sncore\SgmlReader\sgmlreaderdll\SgmlParser.cs,AddOccurrence,The following switch statement is missing a default case: switch (c) {  case '?':  	o = Occurrence.Optional;  	break;  case '+':  	o = Occurrence.OneOrMore;  	break;  case '*':  	o = Occurrence.ZeroOrMore;  	break;  }  
Missing Default,Sgml,SgmlReader,C:\repos\dblock_sncore\SgmlReader\sgmlreaderdll\SgmlReader.cs,Read,The following switch statement is missing a default case: switch (this.state) {  case State.Initial:  	this.state = State.Markup;  	this.current.ReadChar ();  	goto case State.Markup;  case State.Eof:  	if (this.current.Parent != null) {  		this.current.Close ();  		this.current = this.current.Parent;  	}  	else {  		return false;  	}  	break;  case State.EndTag:  	if (this.endTag == (object)this.node.Name) {  		Pop ();  		// we're done!  		this.state = State.Markup;  		goto case State.Markup;  	}  	Pop ();  	// close one element  	foundnode = true;  	// return another end element.  	break;  case State.Markup:  	if (this.node.IsEmpty) {  		Pop ();  	}  	Node n = this.node;  	foundnode = ParseMarkup ();  	break;  case State.PartialTag:  	Pop ();  	// remove text node.  	this.state = State.Markup;  	foundnode = ParseTag (this.partial);  	break;  case State.PseudoStartTag:  	foundnode = ParseStartTag ('<');  	break;  case State.AutoClose:  	Pop ();  	// close next node.  	if (this.stack.Count <= this.poptodepth) {  		this.state = State.Markup;  		if (this.newnode != null) {  			Push (this.newnode);  			// now we're ready to start the new node.  			this.newnode = null;  			this.state = State.Markup;  		}  		else if (this.node.NodeType == XmlNodeType.Document) {  			this.state = State.Eof;  			goto case State.Eof;  		}  	}  	foundnode = true;  	break;  case State.CData:  	foundnode = ParseCData ();  	break;  case State.Attr:  	goto case State.AttrValue;  case State.AttrValue:  	this.state = State.Markup;  	goto case State.Markup;  case State.Text:  	Pop ();  	goto case State.Markup;  case State.PartialText:  	if (ParseText (this.current.Lastchar' false)) {  		this.node.NodeType = XmlNodeType.Whitespace;  	}  	foundnode = true;  	break;  }  
Missing Default,Sgml,SgmlReader,C:\repos\dblock_sncore\SgmlReader\sgmlreaderdll\SgmlReader.cs,ScanName,The following switch statement is missing a default case: switch (this.folding) {  case CaseFolding.ToUpper:  	name = name.ToUpper ();  	break;  case CaseFolding.ToLower:  	name = name.ToLower ();  	break;  }  
Missing Default,Sgml,SgmlReader,C:\repos\dblock_sncore\SgmlReader\sgmlreaderdll\SgmlReader.cs,ParseCData,The following switch statement is missing a default case: switch (this.partial) {  case '!':  	this.partial = ' ';  	// and pop the comment next time around  	return ParseComment ();  case '?':  	this.partial = ' ';  	// and pop the PI next time around  	return ParsePI ();  case '/':  	this.state = State.EndTag;  	return true;  // we are done!  case ' ':  	break;  // means we just needed to pop the Comment' PI or CDATA.  }  
