Implementation smell,Namespace,Class,File,Method,Description
Complex Method,MIME,MimeFieldCodeBase,C:\repos\dblock_sncore\MIME.NET\MimeFieldCodeBase.cs,EncodeDelimeter,Cyclomatic complexity of the method is 11
Complex Method,MIME,MimeFieldCodeBase,C:\repos\dblock_sncore\MIME.NET\MimeFieldCodeBase.cs,EncodeNoDelimeter,Cyclomatic complexity of the method is 8
Long Statement,MIME,MimeCodeQP,C:\repos\dblock_sncore\MIME.NET\MimeCodeQP.cs,EncodeFromBytes,The length of the statement  "				else if(b == 0x0D && index+4<length && inArray[index+1] == 0x0A && inArray[index+2] == 0x2E && inArray[index+3] == 0x0D && inArray[index+4] == 0x0A)" is 148.
Complex Conditional,MIME,MimeCodeQP,C:\repos\dblock_sncore\MIME.NET\MimeCodeQP.cs,IsHex,The conditional expression  "(ch >= '0' && ch <= '9') || (ch >= 'A' && ch <= 'F') || (ch >= 'a' && ch <= 'f')"  is complex.
Complex Conditional,MIME,MimeCodeQP,C:\repos\dblock_sncore\MIME.NET\MimeCodeQP.cs,EncodeFromBytes,The conditional expression  "(b < 33 || b > 126 || b == 0x3D) && b != 0x09 && b != 0x20 && b != 0x0D && b != 0x0A"  is complex.
Magic Number,MIME,MimeBody,C:\repos\dblock_sncore\MIME.NET\MimeBody.cs,LoadBody,The following statement contains a magic number: LoadHead (strData.Substring (0' headend + 2));  
Magic Number,MIME,MimeBody,C:\repos\dblock_sncore\MIME.NET\MimeBody.cs,LoadBody,The following statement contains a magic number: if (MimeType.MediaType.MEDIA_MULTIPART == GetMediaType ()) {  	string boundary = GetBoundary ();  	if (null == boundary)  		return;  	else {  		string strBstart = "--" + boundary;  		string strBend = strBstart + "--";  		int nBstart = strData.IndexOf (strBstart' bodystart);  		if (nBstart == -1)  			return;  		int nBend = strData.IndexOf (strBend' bodystart);  		if (nBend == -1)  			nBend = strData.Length;  		if (nBstart > bodystart) {  			mContent = strData.Substring (bodystart' nBstart - bodystart);  		}  		while (nBstart < nBend) {  			nBstart = nBstart + strBstart.Length + 2;  			int nBstart2 = strData.IndexOf (strBstart' nBstart);  			if (nBstart2 == -1)  				nBstart2 = nBend;  			MimeBody ChildBody = CreatePart ();  			ChildBody.LoadBody (strData.Substring (nBstart' nBstart2 - nBstart));  			nBstart = nBstart2;  		}  	}  }  else {  	mContent = strData.Substring (bodystart' strData.Length - bodystart);  }  
Magic Number,MIME,MimeBody,C:\repos\dblock_sncore\MIME.NET\MimeBody.cs,LoadBody,The following statement contains a magic number: if (null == boundary)  	return;  else {  	string strBstart = "--" + boundary;  	string strBend = strBstart + "--";  	int nBstart = strData.IndexOf (strBstart' bodystart);  	if (nBstart == -1)  		return;  	int nBend = strData.IndexOf (strBend' bodystart);  	if (nBend == -1)  		nBend = strData.Length;  	if (nBstart > bodystart) {  		mContent = strData.Substring (bodystart' nBstart - bodystart);  	}  	while (nBstart < nBend) {  		nBstart = nBstart + strBstart.Length + 2;  		int nBstart2 = strData.IndexOf (strBstart' nBstart);  		if (nBstart2 == -1)  			nBstart2 = nBend;  		MimeBody ChildBody = CreatePart ();  		ChildBody.LoadBody (strData.Substring (nBstart' nBstart2 - nBstart));  		nBstart = nBstart2;  	}  }  
Magic Number,MIME,MimeBody,C:\repos\dblock_sncore\MIME.NET\MimeBody.cs,LoadBody,The following statement contains a magic number: while (nBstart < nBend) {  	nBstart = nBstart + strBstart.Length + 2;  	int nBstart2 = strData.IndexOf (strBstart' nBstart);  	if (nBstart2 == -1)  		nBstart2 = nBend;  	MimeBody ChildBody = CreatePart ();  	ChildBody.LoadBody (strData.Substring (nBstart' nBstart2 - nBstart));  	nBstart = nBstart2;  }  
Magic Number,MIME,MimeBody,C:\repos\dblock_sncore\MIME.NET\MimeBody.cs,LoadBody,The following statement contains a magic number: nBstart = nBstart + strBstart.Length + 2;  
Magic Number,MIME,MimeCodeQP,C:\repos\dblock_sncore\MIME.NET\MimeCodeQP.cs,DecodeOneLine,The following statement contains a magic number: for (int i = 0' j = 0; i < line.Length; i++' j++) {  	byte b;  	if (line [i] == '=') {  		if (i + 2 > line.Length)  			break;  		//bad encode or endof line  		if (IsHex (line [i + 1]) && IsHex (line [i + 2])) {  			string hex = line.Substring (i + 1' 2);  			b = Convert.ToByte (hex' 16);  			i += 2;  		}  		else {  			b = Convert.ToByte (line [++i]);  			// invalid endcoding' let it go  		}  	}  	else {  		b = Convert.ToByte (line [i]);  	}  	ms.WriteByte (b);  }  
Magic Number,MIME,MimeCodeQP,C:\repos\dblock_sncore\MIME.NET\MimeCodeQP.cs,DecodeOneLine,The following statement contains a magic number: for (int i = 0' j = 0; i < line.Length; i++' j++) {  	byte b;  	if (line [i] == '=') {  		if (i + 2 > line.Length)  			break;  		//bad encode or endof line  		if (IsHex (line [i + 1]) && IsHex (line [i + 2])) {  			string hex = line.Substring (i + 1' 2);  			b = Convert.ToByte (hex' 16);  			i += 2;  		}  		else {  			b = Convert.ToByte (line [++i]);  			// invalid endcoding' let it go  		}  	}  	else {  		b = Convert.ToByte (line [i]);  	}  	ms.WriteByte (b);  }  
Magic Number,MIME,MimeCodeQP,C:\repos\dblock_sncore\MIME.NET\MimeCodeQP.cs,DecodeOneLine,The following statement contains a magic number: for (int i = 0' j = 0; i < line.Length; i++' j++) {  	byte b;  	if (line [i] == '=') {  		if (i + 2 > line.Length)  			break;  		//bad encode or endof line  		if (IsHex (line [i + 1]) && IsHex (line [i + 2])) {  			string hex = line.Substring (i + 1' 2);  			b = Convert.ToByte (hex' 16);  			i += 2;  		}  		else {  			b = Convert.ToByte (line [++i]);  			// invalid endcoding' let it go  		}  	}  	else {  		b = Convert.ToByte (line [i]);  	}  	ms.WriteByte (b);  }  
Magic Number,MIME,MimeCodeQP,C:\repos\dblock_sncore\MIME.NET\MimeCodeQP.cs,DecodeOneLine,The following statement contains a magic number: for (int i = 0' j = 0; i < line.Length; i++' j++) {  	byte b;  	if (line [i] == '=') {  		if (i + 2 > line.Length)  			break;  		//bad encode or endof line  		if (IsHex (line [i + 1]) && IsHex (line [i + 2])) {  			string hex = line.Substring (i + 1' 2);  			b = Convert.ToByte (hex' 16);  			i += 2;  		}  		else {  			b = Convert.ToByte (line [++i]);  			// invalid endcoding' let it go  		}  	}  	else {  		b = Convert.ToByte (line [i]);  	}  	ms.WriteByte (b);  }  
Magic Number,MIME,MimeCodeQP,C:\repos\dblock_sncore\MIME.NET\MimeCodeQP.cs,DecodeOneLine,The following statement contains a magic number: for (int i = 0' j = 0; i < line.Length; i++' j++) {  	byte b;  	if (line [i] == '=') {  		if (i + 2 > line.Length)  			break;  		//bad encode or endof line  		if (IsHex (line [i + 1]) && IsHex (line [i + 2])) {  			string hex = line.Substring (i + 1' 2);  			b = Convert.ToByte (hex' 16);  			i += 2;  		}  		else {  			b = Convert.ToByte (line [++i]);  			// invalid endcoding' let it go  		}  	}  	else {  		b = Convert.ToByte (line [i]);  	}  	ms.WriteByte (b);  }  
Magic Number,MIME,MimeCodeQP,C:\repos\dblock_sncore\MIME.NET\MimeCodeQP.cs,DecodeOneLine,The following statement contains a magic number: if (line [i] == '=') {  	if (i + 2 > line.Length)  		break;  	//bad encode or endof line  	if (IsHex (line [i + 1]) && IsHex (line [i + 2])) {  		string hex = line.Substring (i + 1' 2);  		b = Convert.ToByte (hex' 16);  		i += 2;  	}  	else {  		b = Convert.ToByte (line [++i]);  		// invalid endcoding' let it go  	}  }  else {  	b = Convert.ToByte (line [i]);  }  
Magic Number,MIME,MimeCodeQP,C:\repos\dblock_sncore\MIME.NET\MimeCodeQP.cs,DecodeOneLine,The following statement contains a magic number: if (line [i] == '=') {  	if (i + 2 > line.Length)  		break;  	//bad encode or endof line  	if (IsHex (line [i + 1]) && IsHex (line [i + 2])) {  		string hex = line.Substring (i + 1' 2);  		b = Convert.ToByte (hex' 16);  		i += 2;  	}  	else {  		b = Convert.ToByte (line [++i]);  		// invalid endcoding' let it go  	}  }  else {  	b = Convert.ToByte (line [i]);  }  
Magic Number,MIME,MimeCodeQP,C:\repos\dblock_sncore\MIME.NET\MimeCodeQP.cs,DecodeOneLine,The following statement contains a magic number: if (line [i] == '=') {  	if (i + 2 > line.Length)  		break;  	//bad encode or endof line  	if (IsHex (line [i + 1]) && IsHex (line [i + 2])) {  		string hex = line.Substring (i + 1' 2);  		b = Convert.ToByte (hex' 16);  		i += 2;  	}  	else {  		b = Convert.ToByte (line [++i]);  		// invalid endcoding' let it go  	}  }  else {  	b = Convert.ToByte (line [i]);  }  
Magic Number,MIME,MimeCodeQP,C:\repos\dblock_sncore\MIME.NET\MimeCodeQP.cs,DecodeOneLine,The following statement contains a magic number: if (line [i] == '=') {  	if (i + 2 > line.Length)  		break;  	//bad encode or endof line  	if (IsHex (line [i + 1]) && IsHex (line [i + 2])) {  		string hex = line.Substring (i + 1' 2);  		b = Convert.ToByte (hex' 16);  		i += 2;  	}  	else {  		b = Convert.ToByte (line [++i]);  		// invalid endcoding' let it go  	}  }  else {  	b = Convert.ToByte (line [i]);  }  
Magic Number,MIME,MimeCodeQP,C:\repos\dblock_sncore\MIME.NET\MimeCodeQP.cs,DecodeOneLine,The following statement contains a magic number: if (line [i] == '=') {  	if (i + 2 > line.Length)  		break;  	//bad encode or endof line  	if (IsHex (line [i + 1]) && IsHex (line [i + 2])) {  		string hex = line.Substring (i + 1' 2);  		b = Convert.ToByte (hex' 16);  		i += 2;  	}  	else {  		b = Convert.ToByte (line [++i]);  		// invalid endcoding' let it go  	}  }  else {  	b = Convert.ToByte (line [i]);  }  
Magic Number,MIME,MimeCodeQP,C:\repos\dblock_sncore\MIME.NET\MimeCodeQP.cs,DecodeOneLine,The following statement contains a magic number: if (i + 2 > line.Length)  	break;  
Magic Number,MIME,MimeCodeQP,C:\repos\dblock_sncore\MIME.NET\MimeCodeQP.cs,DecodeOneLine,The following statement contains a magic number: if (IsHex (line [i + 1]) && IsHex (line [i + 2])) {  	string hex = line.Substring (i + 1' 2);  	b = Convert.ToByte (hex' 16);  	i += 2;  }  else {  	b = Convert.ToByte (line [++i]);  	// invalid endcoding' let it go  }  
Magic Number,MIME,MimeCodeQP,C:\repos\dblock_sncore\MIME.NET\MimeCodeQP.cs,DecodeOneLine,The following statement contains a magic number: if (IsHex (line [i + 1]) && IsHex (line [i + 2])) {  	string hex = line.Substring (i + 1' 2);  	b = Convert.ToByte (hex' 16);  	i += 2;  }  else {  	b = Convert.ToByte (line [++i]);  	// invalid endcoding' let it go  }  
Magic Number,MIME,MimeCodeQP,C:\repos\dblock_sncore\MIME.NET\MimeCodeQP.cs,DecodeOneLine,The following statement contains a magic number: if (IsHex (line [i + 1]) && IsHex (line [i + 2])) {  	string hex = line.Substring (i + 1' 2);  	b = Convert.ToByte (hex' 16);  	i += 2;  }  else {  	b = Convert.ToByte (line [++i]);  	// invalid endcoding' let it go  }  
Magic Number,MIME,MimeCodeQP,C:\repos\dblock_sncore\MIME.NET\MimeCodeQP.cs,DecodeOneLine,The following statement contains a magic number: if (IsHex (line [i + 1]) && IsHex (line [i + 2])) {  	string hex = line.Substring (i + 1' 2);  	b = Convert.ToByte (hex' 16);  	i += 2;  }  else {  	b = Convert.ToByte (line [++i]);  	// invalid endcoding' let it go  }  
Magic Number,MIME,MimeCodeQP,C:\repos\dblock_sncore\MIME.NET\MimeCodeQP.cs,DecodeOneLine,The following statement contains a magic number: b = Convert.ToByte (hex' 16);  
Magic Number,MIME,MimeCodeQP,C:\repos\dblock_sncore\MIME.NET\MimeCodeQP.cs,DecodeOneLine,The following statement contains a magic number: i += 2;  
Magic Number,MIME,MimeCodeQP,C:\repos\dblock_sncore\MIME.NET\MimeCodeQP.cs,EncodeFromBytes,The following statement contains a magic number: for (int i = 0; i < length; i++) {  	int index = offset + i;  	byte b = inArray [index];  	if ((b < 33 || b > 126 || b == 0x3D) && b != 0x09 && b != 0x20 && b != 0x0D && b != 0x0A) {  		int code = (int)b;  		enc.AppendFormat ("={0}"' code.ToString ("X2"));  		//i++;  	}  	/* 				else if((b == 0x20 || b == 0x09) && (inArray[index+1] == 0x0D || index == offset+length-1)) 				{//space or tab in line end 					int code = (int)b; 					enc.AppendFormat("={0}"' code.ToString("X2")); 					i++; 				} 				else if(b == 0x0D && index+4<length && inArray[index+1] == 0x0A && inArray[index+2] == 0x2E && inArray[index+3] == 0x0D && inArray[index+4] == 0x0A) 				{//avoid smtp end sig 					int code = (int)b; 					enc.AppendFormat("={0}"' code.ToString("X2")); 				}*/else {  		enc.Append (System.Convert.ToChar (b));  		//i++;  	}  }  
Magic Number,MIME,MimeCodeQP,C:\repos\dblock_sncore\MIME.NET\MimeCodeQP.cs,EncodeFromBytes,The following statement contains a magic number: for (int i = 0; i < length; i++) {  	int index = offset + i;  	byte b = inArray [index];  	if ((b < 33 || b > 126 || b == 0x3D) && b != 0x09 && b != 0x20 && b != 0x0D && b != 0x0A) {  		int code = (int)b;  		enc.AppendFormat ("={0}"' code.ToString ("X2"));  		//i++;  	}  	/* 				else if((b == 0x20 || b == 0x09) && (inArray[index+1] == 0x0D || index == offset+length-1)) 				{//space or tab in line end 					int code = (int)b; 					enc.AppendFormat("={0}"' code.ToString("X2")); 					i++; 				} 				else if(b == 0x0D && index+4<length && inArray[index+1] == 0x0A && inArray[index+2] == 0x2E && inArray[index+3] == 0x0D && inArray[index+4] == 0x0A) 				{//avoid smtp end sig 					int code = (int)b; 					enc.AppendFormat("={0}"' code.ToString("X2")); 				}*/else {  		enc.Append (System.Convert.ToChar (b));  		//i++;  	}  }  
Magic Number,MIME,MimeCodeQP,C:\repos\dblock_sncore\MIME.NET\MimeCodeQP.cs,EncodeFromBytes,The following statement contains a magic number: if ((b < 33 || b > 126 || b == 0x3D) && b != 0x09 && b != 0x20 && b != 0x0D && b != 0x0A) {  	int code = (int)b;  	enc.AppendFormat ("={0}"' code.ToString ("X2"));  	//i++;  }  /* 				else if((b == 0x20 || b == 0x09) && (inArray[index+1] == 0x0D || index == offset+length-1)) 				{//space or tab in line end 					int code = (int)b; 					enc.AppendFormat("={0}"' code.ToString("X2")); 					i++; 				} 				else if(b == 0x0D && index+4<length && inArray[index+1] == 0x0A && inArray[index+2] == 0x2E && inArray[index+3] == 0x0D && inArray[index+4] == 0x0A) 				{//avoid smtp end sig 					int code = (int)b; 					enc.AppendFormat("={0}"' code.ToString("X2")); 				}*/else {  	enc.Append (System.Convert.ToChar (b));  	//i++;  }  
Magic Number,MIME,MimeCodeQP,C:\repos\dblock_sncore\MIME.NET\MimeCodeQP.cs,EncodeFromBytes,The following statement contains a magic number: if ((b < 33 || b > 126 || b == 0x3D) && b != 0x09 && b != 0x20 && b != 0x0D && b != 0x0A) {  	int code = (int)b;  	enc.AppendFormat ("={0}"' code.ToString ("X2"));  	//i++;  }  /* 				else if((b == 0x20 || b == 0x09) && (inArray[index+1] == 0x0D || index == offset+length-1)) 				{//space or tab in line end 					int code = (int)b; 					enc.AppendFormat("={0}"' code.ToString("X2")); 					i++; 				} 				else if(b == 0x0D && index+4<length && inArray[index+1] == 0x0A && inArray[index+2] == 0x2E && inArray[index+3] == 0x0D && inArray[index+4] == 0x0A) 				{//avoid smtp end sig 					int code = (int)b; 					enc.AppendFormat("={0}"' code.ToString("X2")); 				}*/else {  	enc.Append (System.Convert.ToChar (b));  	//i++;  }  
Magic Number,MIME,MimeCodeQP,C:\repos\dblock_sncore\MIME.NET\MimeCodeQP.cs,FormatEncodedString,The following statement contains a magic number: try {  	while ((line = sr.ReadLine ()) != null) {  		int index = MAX_CHAR_LEN;  		int lastindex = 0;  		while (index < line.Length) {  			if (IsHex (line [index]) && IsHex (line [index - 1]) && line [index - 2] == '=') {  				index -= 2;  			}  			sb.Append (line.Substring (lastindex' index - lastindex));  			sb.Append ("=\r\n");  			lastindex = index;  			index += MAX_CHAR_LEN;  		}  		sb.Append (line.Substring (lastindex' line.Length - lastindex));  		sb.Append ("\r\n");  	}  	return sb.ToString ();  }  finally {  	sr.Close ();  	sr = null;  	sb = null;  }  
Magic Number,MIME,MimeCodeQP,C:\repos\dblock_sncore\MIME.NET\MimeCodeQP.cs,FormatEncodedString,The following statement contains a magic number: try {  	while ((line = sr.ReadLine ()) != null) {  		int index = MAX_CHAR_LEN;  		int lastindex = 0;  		while (index < line.Length) {  			if (IsHex (line [index]) && IsHex (line [index - 1]) && line [index - 2] == '=') {  				index -= 2;  			}  			sb.Append (line.Substring (lastindex' index - lastindex));  			sb.Append ("=\r\n");  			lastindex = index;  			index += MAX_CHAR_LEN;  		}  		sb.Append (line.Substring (lastindex' line.Length - lastindex));  		sb.Append ("\r\n");  	}  	return sb.ToString ();  }  finally {  	sr.Close ();  	sr = null;  	sb = null;  }  
Magic Number,MIME,MimeCodeQP,C:\repos\dblock_sncore\MIME.NET\MimeCodeQP.cs,FormatEncodedString,The following statement contains a magic number: while ((line = sr.ReadLine ()) != null) {  	int index = MAX_CHAR_LEN;  	int lastindex = 0;  	while (index < line.Length) {  		if (IsHex (line [index]) && IsHex (line [index - 1]) && line [index - 2] == '=') {  			index -= 2;  		}  		sb.Append (line.Substring (lastindex' index - lastindex));  		sb.Append ("=\r\n");  		lastindex = index;  		index += MAX_CHAR_LEN;  	}  	sb.Append (line.Substring (lastindex' line.Length - lastindex));  	sb.Append ("\r\n");  }  
Magic Number,MIME,MimeCodeQP,C:\repos\dblock_sncore\MIME.NET\MimeCodeQP.cs,FormatEncodedString,The following statement contains a magic number: while ((line = sr.ReadLine ()) != null) {  	int index = MAX_CHAR_LEN;  	int lastindex = 0;  	while (index < line.Length) {  		if (IsHex (line [index]) && IsHex (line [index - 1]) && line [index - 2] == '=') {  			index -= 2;  		}  		sb.Append (line.Substring (lastindex' index - lastindex));  		sb.Append ("=\r\n");  		lastindex = index;  		index += MAX_CHAR_LEN;  	}  	sb.Append (line.Substring (lastindex' line.Length - lastindex));  	sb.Append ("\r\n");  }  
Magic Number,MIME,MimeCodeQP,C:\repos\dblock_sncore\MIME.NET\MimeCodeQP.cs,FormatEncodedString,The following statement contains a magic number: while (index < line.Length) {  	if (IsHex (line [index]) && IsHex (line [index - 1]) && line [index - 2] == '=') {  		index -= 2;  	}  	sb.Append (line.Substring (lastindex' index - lastindex));  	sb.Append ("=\r\n");  	lastindex = index;  	index += MAX_CHAR_LEN;  }  
Magic Number,MIME,MimeCodeQP,C:\repos\dblock_sncore\MIME.NET\MimeCodeQP.cs,FormatEncodedString,The following statement contains a magic number: while (index < line.Length) {  	if (IsHex (line [index]) && IsHex (line [index - 1]) && line [index - 2] == '=') {  		index -= 2;  	}  	sb.Append (line.Substring (lastindex' index - lastindex));  	sb.Append ("=\r\n");  	lastindex = index;  	index += MAX_CHAR_LEN;  }  
Magic Number,MIME,MimeCodeQP,C:\repos\dblock_sncore\MIME.NET\MimeCodeQP.cs,FormatEncodedString,The following statement contains a magic number: if (IsHex (line [index]) && IsHex (line [index - 1]) && line [index - 2] == '=') {  	index -= 2;  }  
Magic Number,MIME,MimeCodeQP,C:\repos\dblock_sncore\MIME.NET\MimeCodeQP.cs,FormatEncodedString,The following statement contains a magic number: if (IsHex (line [index]) && IsHex (line [index - 1]) && line [index - 2] == '=') {  	index -= 2;  }  
Magic Number,MIME,MimeCodeQP,C:\repos\dblock_sncore\MIME.NET\MimeCodeQP.cs,FormatEncodedString,The following statement contains a magic number: index -= 2;  
Magic Number,MIME,MimeDSN,C:\repos\dblock_sncore\MIME.NET\MimeDSN.cs,LoadBody,The following statement contains a magic number: do {  	partend = strData.IndexOf ("\r\n\r\n"' current);  	int len = (partend == -1) ? strData.Length - current : partend - current;  	if (len == 0)  		break;  	MimeDSNRecipient recipient = new MimeDSNRecipient ();  	recipient.LoadHead (strData.Substring (current' len));  	_recipients.Add (recipient);  	current = partend + 4;  }  while (partend != -1);  
Magic Number,MIME,MimeDSN,C:\repos\dblock_sncore\MIME.NET\MimeDSN.cs,LoadBody,The following statement contains a magic number: current = partend + 4;  
Magic Number,MIME,MimeField,C:\repos\dblock_sncore\MIME.NET\MimeField.cs,GetParameter,The following statement contains a magic number: if (strparams != null) {  	for (int i = 0; i < strparams.Length; i++) {  		int index = strparams [i].IndexOf (pszAttr' 0);  		if (index != -1) {  			int begin = strparams [i].IndexOf ('=');  			int end;  			if (strparams [i] [begin + 1] == '"') {  				begin += 2;  				end = strparams [i].IndexOf ('"'' begin);  			}  			else {  				begin += 1;  				end = strparams [i].IndexOf ('\r'' begin);  				if (end == -1)  					end = strparams [i].Length;  			}  			return strparams [i].Substring (begin' end - begin);  		}  	}  }  
Magic Number,MIME,MimeField,C:\repos\dblock_sncore\MIME.NET\MimeField.cs,GetParameter,The following statement contains a magic number: for (int i = 0; i < strparams.Length; i++) {  	int index = strparams [i].IndexOf (pszAttr' 0);  	if (index != -1) {  		int begin = strparams [i].IndexOf ('=');  		int end;  		if (strparams [i] [begin + 1] == '"') {  			begin += 2;  			end = strparams [i].IndexOf ('"'' begin);  		}  		else {  			begin += 1;  			end = strparams [i].IndexOf ('\r'' begin);  			if (end == -1)  				end = strparams [i].Length;  		}  		return strparams [i].Substring (begin' end - begin);  	}  }  
Magic Number,MIME,MimeField,C:\repos\dblock_sncore\MIME.NET\MimeField.cs,GetParameter,The following statement contains a magic number: if (index != -1) {  	int begin = strparams [i].IndexOf ('=');  	int end;  	if (strparams [i] [begin + 1] == '"') {  		begin += 2;  		end = strparams [i].IndexOf ('"'' begin);  	}  	else {  		begin += 1;  		end = strparams [i].IndexOf ('\r'' begin);  		if (end == -1)  			end = strparams [i].Length;  	}  	return strparams [i].Substring (begin' end - begin);  }  
Magic Number,MIME,MimeField,C:\repos\dblock_sncore\MIME.NET\MimeField.cs,GetParameter,The following statement contains a magic number: if (strparams [i] [begin + 1] == '"') {  	begin += 2;  	end = strparams [i].IndexOf ('"'' begin);  }  else {  	begin += 1;  	end = strparams [i].IndexOf ('\r'' begin);  	if (end == -1)  		end = strparams [i].Length;  }  
Magic Number,MIME,MimeField,C:\repos\dblock_sncore\MIME.NET\MimeField.cs,GetParameter,The following statement contains a magic number: begin += 2;  
Magic Number,MIME,MimeFieldCodeBase,C:\repos\dblock_sncore\MIME.NET\MimeFieldCodeBase.cs,DecodeToString,The following statement contains a magic number: while (start < s.Length) {  	int i = s.IndexOf ("=?"' start);  	if (i != -1) {  		dString += s.Substring (start' i - start);  		int j = s.IndexOf ("?="' i + 2);  		if (j != -1) {  			i += 2;  			int k = s.IndexOf ('?'' i);  			if (k != -1 && s [k + 2] == '?') {  				Charset = s.Substring (i' k - i);  				string decString = s.Substring (k + 3' j - k - 3);  				if (s [k + 1] == 'Q') {  					MimeCode aCode = MimeCodeManager.Instance.GetCode ("quoted-printable");  					aCode.Charset = Charset;  					dString += aCode.DecodeToString (decString);  				}  				else if (s [k + 1] == 'B') {  					MimeCode aCode = MimeCodeManager.Instance.GetCode ("base64");  					aCode.Charset = Charset;  					dString += aCode.DecodeToString (decString);  				}  				else {  					dString += decString;  				}  			}  			else {  				dString += s.Substring (k' j - k);  			}  			start = j + 2;  		}  		else {  			dString += s.Substring (i' s.Length - i);  			break;  		}  	}  	else {  		dString += s.Substring (start' s.Length - start);  		break;  	}  }  
Magic Number,MIME,MimeFieldCodeBase,C:\repos\dblock_sncore\MIME.NET\MimeFieldCodeBase.cs,DecodeToString,The following statement contains a magic number: while (start < s.Length) {  	int i = s.IndexOf ("=?"' start);  	if (i != -1) {  		dString += s.Substring (start' i - start);  		int j = s.IndexOf ("?="' i + 2);  		if (j != -1) {  			i += 2;  			int k = s.IndexOf ('?'' i);  			if (k != -1 && s [k + 2] == '?') {  				Charset = s.Substring (i' k - i);  				string decString = s.Substring (k + 3' j - k - 3);  				if (s [k + 1] == 'Q') {  					MimeCode aCode = MimeCodeManager.Instance.GetCode ("quoted-printable");  					aCode.Charset = Charset;  					dString += aCode.DecodeToString (decString);  				}  				else if (s [k + 1] == 'B') {  					MimeCode aCode = MimeCodeManager.Instance.GetCode ("base64");  					aCode.Charset = Charset;  					dString += aCode.DecodeToString (decString);  				}  				else {  					dString += decString;  				}  			}  			else {  				dString += s.Substring (k' j - k);  			}  			start = j + 2;  		}  		else {  			dString += s.Substring (i' s.Length - i);  			break;  		}  	}  	else {  		dString += s.Substring (start' s.Length - start);  		break;  	}  }  
Magic Number,MIME,MimeFieldCodeBase,C:\repos\dblock_sncore\MIME.NET\MimeFieldCodeBase.cs,DecodeToString,The following statement contains a magic number: while (start < s.Length) {  	int i = s.IndexOf ("=?"' start);  	if (i != -1) {  		dString += s.Substring (start' i - start);  		int j = s.IndexOf ("?="' i + 2);  		if (j != -1) {  			i += 2;  			int k = s.IndexOf ('?'' i);  			if (k != -1 && s [k + 2] == '?') {  				Charset = s.Substring (i' k - i);  				string decString = s.Substring (k + 3' j - k - 3);  				if (s [k + 1] == 'Q') {  					MimeCode aCode = MimeCodeManager.Instance.GetCode ("quoted-printable");  					aCode.Charset = Charset;  					dString += aCode.DecodeToString (decString);  				}  				else if (s [k + 1] == 'B') {  					MimeCode aCode = MimeCodeManager.Instance.GetCode ("base64");  					aCode.Charset = Charset;  					dString += aCode.DecodeToString (decString);  				}  				else {  					dString += decString;  				}  			}  			else {  				dString += s.Substring (k' j - k);  			}  			start = j + 2;  		}  		else {  			dString += s.Substring (i' s.Length - i);  			break;  		}  	}  	else {  		dString += s.Substring (start' s.Length - start);  		break;  	}  }  
Magic Number,MIME,MimeFieldCodeBase,C:\repos\dblock_sncore\MIME.NET\MimeFieldCodeBase.cs,DecodeToString,The following statement contains a magic number: while (start < s.Length) {  	int i = s.IndexOf ("=?"' start);  	if (i != -1) {  		dString += s.Substring (start' i - start);  		int j = s.IndexOf ("?="' i + 2);  		if (j != -1) {  			i += 2;  			int k = s.IndexOf ('?'' i);  			if (k != -1 && s [k + 2] == '?') {  				Charset = s.Substring (i' k - i);  				string decString = s.Substring (k + 3' j - k - 3);  				if (s [k + 1] == 'Q') {  					MimeCode aCode = MimeCodeManager.Instance.GetCode ("quoted-printable");  					aCode.Charset = Charset;  					dString += aCode.DecodeToString (decString);  				}  				else if (s [k + 1] == 'B') {  					MimeCode aCode = MimeCodeManager.Instance.GetCode ("base64");  					aCode.Charset = Charset;  					dString += aCode.DecodeToString (decString);  				}  				else {  					dString += decString;  				}  			}  			else {  				dString += s.Substring (k' j - k);  			}  			start = j + 2;  		}  		else {  			dString += s.Substring (i' s.Length - i);  			break;  		}  	}  	else {  		dString += s.Substring (start' s.Length - start);  		break;  	}  }  
Magic Number,MIME,MimeFieldCodeBase,C:\repos\dblock_sncore\MIME.NET\MimeFieldCodeBase.cs,DecodeToString,The following statement contains a magic number: while (start < s.Length) {  	int i = s.IndexOf ("=?"' start);  	if (i != -1) {  		dString += s.Substring (start' i - start);  		int j = s.IndexOf ("?="' i + 2);  		if (j != -1) {  			i += 2;  			int k = s.IndexOf ('?'' i);  			if (k != -1 && s [k + 2] == '?') {  				Charset = s.Substring (i' k - i);  				string decString = s.Substring (k + 3' j - k - 3);  				if (s [k + 1] == 'Q') {  					MimeCode aCode = MimeCodeManager.Instance.GetCode ("quoted-printable");  					aCode.Charset = Charset;  					dString += aCode.DecodeToString (decString);  				}  				else if (s [k + 1] == 'B') {  					MimeCode aCode = MimeCodeManager.Instance.GetCode ("base64");  					aCode.Charset = Charset;  					dString += aCode.DecodeToString (decString);  				}  				else {  					dString += decString;  				}  			}  			else {  				dString += s.Substring (k' j - k);  			}  			start = j + 2;  		}  		else {  			dString += s.Substring (i' s.Length - i);  			break;  		}  	}  	else {  		dString += s.Substring (start' s.Length - start);  		break;  	}  }  
Magic Number,MIME,MimeFieldCodeBase,C:\repos\dblock_sncore\MIME.NET\MimeFieldCodeBase.cs,DecodeToString,The following statement contains a magic number: while (start < s.Length) {  	int i = s.IndexOf ("=?"' start);  	if (i != -1) {  		dString += s.Substring (start' i - start);  		int j = s.IndexOf ("?="' i + 2);  		if (j != -1) {  			i += 2;  			int k = s.IndexOf ('?'' i);  			if (k != -1 && s [k + 2] == '?') {  				Charset = s.Substring (i' k - i);  				string decString = s.Substring (k + 3' j - k - 3);  				if (s [k + 1] == 'Q') {  					MimeCode aCode = MimeCodeManager.Instance.GetCode ("quoted-printable");  					aCode.Charset = Charset;  					dString += aCode.DecodeToString (decString);  				}  				else if (s [k + 1] == 'B') {  					MimeCode aCode = MimeCodeManager.Instance.GetCode ("base64");  					aCode.Charset = Charset;  					dString += aCode.DecodeToString (decString);  				}  				else {  					dString += decString;  				}  			}  			else {  				dString += s.Substring (k' j - k);  			}  			start = j + 2;  		}  		else {  			dString += s.Substring (i' s.Length - i);  			break;  		}  	}  	else {  		dString += s.Substring (start' s.Length - start);  		break;  	}  }  
Magic Number,MIME,MimeFieldCodeBase,C:\repos\dblock_sncore\MIME.NET\MimeFieldCodeBase.cs,DecodeToString,The following statement contains a magic number: if (i != -1) {  	dString += s.Substring (start' i - start);  	int j = s.IndexOf ("?="' i + 2);  	if (j != -1) {  		i += 2;  		int k = s.IndexOf ('?'' i);  		if (k != -1 && s [k + 2] == '?') {  			Charset = s.Substring (i' k - i);  			string decString = s.Substring (k + 3' j - k - 3);  			if (s [k + 1] == 'Q') {  				MimeCode aCode = MimeCodeManager.Instance.GetCode ("quoted-printable");  				aCode.Charset = Charset;  				dString += aCode.DecodeToString (decString);  			}  			else if (s [k + 1] == 'B') {  				MimeCode aCode = MimeCodeManager.Instance.GetCode ("base64");  				aCode.Charset = Charset;  				dString += aCode.DecodeToString (decString);  			}  			else {  				dString += decString;  			}  		}  		else {  			dString += s.Substring (k' j - k);  		}  		start = j + 2;  	}  	else {  		dString += s.Substring (i' s.Length - i);  		break;  	}  }  else {  	dString += s.Substring (start' s.Length - start);  	break;  }  
Magic Number,MIME,MimeFieldCodeBase,C:\repos\dblock_sncore\MIME.NET\MimeFieldCodeBase.cs,DecodeToString,The following statement contains a magic number: if (i != -1) {  	dString += s.Substring (start' i - start);  	int j = s.IndexOf ("?="' i + 2);  	if (j != -1) {  		i += 2;  		int k = s.IndexOf ('?'' i);  		if (k != -1 && s [k + 2] == '?') {  			Charset = s.Substring (i' k - i);  			string decString = s.Substring (k + 3' j - k - 3);  			if (s [k + 1] == 'Q') {  				MimeCode aCode = MimeCodeManager.Instance.GetCode ("quoted-printable");  				aCode.Charset = Charset;  				dString += aCode.DecodeToString (decString);  			}  			else if (s [k + 1] == 'B') {  				MimeCode aCode = MimeCodeManager.Instance.GetCode ("base64");  				aCode.Charset = Charset;  				dString += aCode.DecodeToString (decString);  			}  			else {  				dString += decString;  			}  		}  		else {  			dString += s.Substring (k' j - k);  		}  		start = j + 2;  	}  	else {  		dString += s.Substring (i' s.Length - i);  		break;  	}  }  else {  	dString += s.Substring (start' s.Length - start);  	break;  }  
Magic Number,MIME,MimeFieldCodeBase,C:\repos\dblock_sncore\MIME.NET\MimeFieldCodeBase.cs,DecodeToString,The following statement contains a magic number: if (i != -1) {  	dString += s.Substring (start' i - start);  	int j = s.IndexOf ("?="' i + 2);  	if (j != -1) {  		i += 2;  		int k = s.IndexOf ('?'' i);  		if (k != -1 && s [k + 2] == '?') {  			Charset = s.Substring (i' k - i);  			string decString = s.Substring (k + 3' j - k - 3);  			if (s [k + 1] == 'Q') {  				MimeCode aCode = MimeCodeManager.Instance.GetCode ("quoted-printable");  				aCode.Charset = Charset;  				dString += aCode.DecodeToString (decString);  			}  			else if (s [k + 1] == 'B') {  				MimeCode aCode = MimeCodeManager.Instance.GetCode ("base64");  				aCode.Charset = Charset;  				dString += aCode.DecodeToString (decString);  			}  			else {  				dString += decString;  			}  		}  		else {  			dString += s.Substring (k' j - k);  		}  		start = j + 2;  	}  	else {  		dString += s.Substring (i' s.Length - i);  		break;  	}  }  else {  	dString += s.Substring (start' s.Length - start);  	break;  }  
Magic Number,MIME,MimeFieldCodeBase,C:\repos\dblock_sncore\MIME.NET\MimeFieldCodeBase.cs,DecodeToString,The following statement contains a magic number: if (i != -1) {  	dString += s.Substring (start' i - start);  	int j = s.IndexOf ("?="' i + 2);  	if (j != -1) {  		i += 2;  		int k = s.IndexOf ('?'' i);  		if (k != -1 && s [k + 2] == '?') {  			Charset = s.Substring (i' k - i);  			string decString = s.Substring (k + 3' j - k - 3);  			if (s [k + 1] == 'Q') {  				MimeCode aCode = MimeCodeManager.Instance.GetCode ("quoted-printable");  				aCode.Charset = Charset;  				dString += aCode.DecodeToString (decString);  			}  			else if (s [k + 1] == 'B') {  				MimeCode aCode = MimeCodeManager.Instance.GetCode ("base64");  				aCode.Charset = Charset;  				dString += aCode.DecodeToString (decString);  			}  			else {  				dString += decString;  			}  		}  		else {  			dString += s.Substring (k' j - k);  		}  		start = j + 2;  	}  	else {  		dString += s.Substring (i' s.Length - i);  		break;  	}  }  else {  	dString += s.Substring (start' s.Length - start);  	break;  }  
Magic Number,MIME,MimeFieldCodeBase,C:\repos\dblock_sncore\MIME.NET\MimeFieldCodeBase.cs,DecodeToString,The following statement contains a magic number: if (i != -1) {  	dString += s.Substring (start' i - start);  	int j = s.IndexOf ("?="' i + 2);  	if (j != -1) {  		i += 2;  		int k = s.IndexOf ('?'' i);  		if (k != -1 && s [k + 2] == '?') {  			Charset = s.Substring (i' k - i);  			string decString = s.Substring (k + 3' j - k - 3);  			if (s [k + 1] == 'Q') {  				MimeCode aCode = MimeCodeManager.Instance.GetCode ("quoted-printable");  				aCode.Charset = Charset;  				dString += aCode.DecodeToString (decString);  			}  			else if (s [k + 1] == 'B') {  				MimeCode aCode = MimeCodeManager.Instance.GetCode ("base64");  				aCode.Charset = Charset;  				dString += aCode.DecodeToString (decString);  			}  			else {  				dString += decString;  			}  		}  		else {  			dString += s.Substring (k' j - k);  		}  		start = j + 2;  	}  	else {  		dString += s.Substring (i' s.Length - i);  		break;  	}  }  else {  	dString += s.Substring (start' s.Length - start);  	break;  }  
Magic Number,MIME,MimeFieldCodeBase,C:\repos\dblock_sncore\MIME.NET\MimeFieldCodeBase.cs,DecodeToString,The following statement contains a magic number: if (i != -1) {  	dString += s.Substring (start' i - start);  	int j = s.IndexOf ("?="' i + 2);  	if (j != -1) {  		i += 2;  		int k = s.IndexOf ('?'' i);  		if (k != -1 && s [k + 2] == '?') {  			Charset = s.Substring (i' k - i);  			string decString = s.Substring (k + 3' j - k - 3);  			if (s [k + 1] == 'Q') {  				MimeCode aCode = MimeCodeManager.Instance.GetCode ("quoted-printable");  				aCode.Charset = Charset;  				dString += aCode.DecodeToString (decString);  			}  			else if (s [k + 1] == 'B') {  				MimeCode aCode = MimeCodeManager.Instance.GetCode ("base64");  				aCode.Charset = Charset;  				dString += aCode.DecodeToString (decString);  			}  			else {  				dString += decString;  			}  		}  		else {  			dString += s.Substring (k' j - k);  		}  		start = j + 2;  	}  	else {  		dString += s.Substring (i' s.Length - i);  		break;  	}  }  else {  	dString += s.Substring (start' s.Length - start);  	break;  }  
Magic Number,MIME,MimeFieldCodeBase,C:\repos\dblock_sncore\MIME.NET\MimeFieldCodeBase.cs,DecodeToString,The following statement contains a magic number: if (j != -1) {  	i += 2;  	int k = s.IndexOf ('?'' i);  	if (k != -1 && s [k + 2] == '?') {  		Charset = s.Substring (i' k - i);  		string decString = s.Substring (k + 3' j - k - 3);  		if (s [k + 1] == 'Q') {  			MimeCode aCode = MimeCodeManager.Instance.GetCode ("quoted-printable");  			aCode.Charset = Charset;  			dString += aCode.DecodeToString (decString);  		}  		else if (s [k + 1] == 'B') {  			MimeCode aCode = MimeCodeManager.Instance.GetCode ("base64");  			aCode.Charset = Charset;  			dString += aCode.DecodeToString (decString);  		}  		else {  			dString += decString;  		}  	}  	else {  		dString += s.Substring (k' j - k);  	}  	start = j + 2;  }  else {  	dString += s.Substring (i' s.Length - i);  	break;  }  
Magic Number,MIME,MimeFieldCodeBase,C:\repos\dblock_sncore\MIME.NET\MimeFieldCodeBase.cs,DecodeToString,The following statement contains a magic number: if (j != -1) {  	i += 2;  	int k = s.IndexOf ('?'' i);  	if (k != -1 && s [k + 2] == '?') {  		Charset = s.Substring (i' k - i);  		string decString = s.Substring (k + 3' j - k - 3);  		if (s [k + 1] == 'Q') {  			MimeCode aCode = MimeCodeManager.Instance.GetCode ("quoted-printable");  			aCode.Charset = Charset;  			dString += aCode.DecodeToString (decString);  		}  		else if (s [k + 1] == 'B') {  			MimeCode aCode = MimeCodeManager.Instance.GetCode ("base64");  			aCode.Charset = Charset;  			dString += aCode.DecodeToString (decString);  		}  		else {  			dString += decString;  		}  	}  	else {  		dString += s.Substring (k' j - k);  	}  	start = j + 2;  }  else {  	dString += s.Substring (i' s.Length - i);  	break;  }  
Magic Number,MIME,MimeFieldCodeBase,C:\repos\dblock_sncore\MIME.NET\MimeFieldCodeBase.cs,DecodeToString,The following statement contains a magic number: if (j != -1) {  	i += 2;  	int k = s.IndexOf ('?'' i);  	if (k != -1 && s [k + 2] == '?') {  		Charset = s.Substring (i' k - i);  		string decString = s.Substring (k + 3' j - k - 3);  		if (s [k + 1] == 'Q') {  			MimeCode aCode = MimeCodeManager.Instance.GetCode ("quoted-printable");  			aCode.Charset = Charset;  			dString += aCode.DecodeToString (decString);  		}  		else if (s [k + 1] == 'B') {  			MimeCode aCode = MimeCodeManager.Instance.GetCode ("base64");  			aCode.Charset = Charset;  			dString += aCode.DecodeToString (decString);  		}  		else {  			dString += decString;  		}  	}  	else {  		dString += s.Substring (k' j - k);  	}  	start = j + 2;  }  else {  	dString += s.Substring (i' s.Length - i);  	break;  }  
Magic Number,MIME,MimeFieldCodeBase,C:\repos\dblock_sncore\MIME.NET\MimeFieldCodeBase.cs,DecodeToString,The following statement contains a magic number: if (j != -1) {  	i += 2;  	int k = s.IndexOf ('?'' i);  	if (k != -1 && s [k + 2] == '?') {  		Charset = s.Substring (i' k - i);  		string decString = s.Substring (k + 3' j - k - 3);  		if (s [k + 1] == 'Q') {  			MimeCode aCode = MimeCodeManager.Instance.GetCode ("quoted-printable");  			aCode.Charset = Charset;  			dString += aCode.DecodeToString (decString);  		}  		else if (s [k + 1] == 'B') {  			MimeCode aCode = MimeCodeManager.Instance.GetCode ("base64");  			aCode.Charset = Charset;  			dString += aCode.DecodeToString (decString);  		}  		else {  			dString += decString;  		}  	}  	else {  		dString += s.Substring (k' j - k);  	}  	start = j + 2;  }  else {  	dString += s.Substring (i' s.Length - i);  	break;  }  
Magic Number,MIME,MimeFieldCodeBase,C:\repos\dblock_sncore\MIME.NET\MimeFieldCodeBase.cs,DecodeToString,The following statement contains a magic number: if (j != -1) {  	i += 2;  	int k = s.IndexOf ('?'' i);  	if (k != -1 && s [k + 2] == '?') {  		Charset = s.Substring (i' k - i);  		string decString = s.Substring (k + 3' j - k - 3);  		if (s [k + 1] == 'Q') {  			MimeCode aCode = MimeCodeManager.Instance.GetCode ("quoted-printable");  			aCode.Charset = Charset;  			dString += aCode.DecodeToString (decString);  		}  		else if (s [k + 1] == 'B') {  			MimeCode aCode = MimeCodeManager.Instance.GetCode ("base64");  			aCode.Charset = Charset;  			dString += aCode.DecodeToString (decString);  		}  		else {  			dString += decString;  		}  	}  	else {  		dString += s.Substring (k' j - k);  	}  	start = j + 2;  }  else {  	dString += s.Substring (i' s.Length - i);  	break;  }  
Magic Number,MIME,MimeFieldCodeBase,C:\repos\dblock_sncore\MIME.NET\MimeFieldCodeBase.cs,DecodeToString,The following statement contains a magic number: i += 2;  
Magic Number,MIME,MimeFieldCodeBase,C:\repos\dblock_sncore\MIME.NET\MimeFieldCodeBase.cs,DecodeToString,The following statement contains a magic number: if (k != -1 && s [k + 2] == '?') {  	Charset = s.Substring (i' k - i);  	string decString = s.Substring (k + 3' j - k - 3);  	if (s [k + 1] == 'Q') {  		MimeCode aCode = MimeCodeManager.Instance.GetCode ("quoted-printable");  		aCode.Charset = Charset;  		dString += aCode.DecodeToString (decString);  	}  	else if (s [k + 1] == 'B') {  		MimeCode aCode = MimeCodeManager.Instance.GetCode ("base64");  		aCode.Charset = Charset;  		dString += aCode.DecodeToString (decString);  	}  	else {  		dString += decString;  	}  }  else {  	dString += s.Substring (k' j - k);  }  
Magic Number,MIME,MimeFieldCodeBase,C:\repos\dblock_sncore\MIME.NET\MimeFieldCodeBase.cs,DecodeToString,The following statement contains a magic number: if (k != -1 && s [k + 2] == '?') {  	Charset = s.Substring (i' k - i);  	string decString = s.Substring (k + 3' j - k - 3);  	if (s [k + 1] == 'Q') {  		MimeCode aCode = MimeCodeManager.Instance.GetCode ("quoted-printable");  		aCode.Charset = Charset;  		dString += aCode.DecodeToString (decString);  	}  	else if (s [k + 1] == 'B') {  		MimeCode aCode = MimeCodeManager.Instance.GetCode ("base64");  		aCode.Charset = Charset;  		dString += aCode.DecodeToString (decString);  	}  	else {  		dString += decString;  	}  }  else {  	dString += s.Substring (k' j - k);  }  
Magic Number,MIME,MimeFieldCodeBase,C:\repos\dblock_sncore\MIME.NET\MimeFieldCodeBase.cs,DecodeToString,The following statement contains a magic number: if (k != -1 && s [k + 2] == '?') {  	Charset = s.Substring (i' k - i);  	string decString = s.Substring (k + 3' j - k - 3);  	if (s [k + 1] == 'Q') {  		MimeCode aCode = MimeCodeManager.Instance.GetCode ("quoted-printable");  		aCode.Charset = Charset;  		dString += aCode.DecodeToString (decString);  	}  	else if (s [k + 1] == 'B') {  		MimeCode aCode = MimeCodeManager.Instance.GetCode ("base64");  		aCode.Charset = Charset;  		dString += aCode.DecodeToString (decString);  	}  	else {  		dString += decString;  	}  }  else {  	dString += s.Substring (k' j - k);  }  
Magic Number,MIME,MimeFieldCodeBase,C:\repos\dblock_sncore\MIME.NET\MimeFieldCodeBase.cs,DecodeToString,The following statement contains a magic number: start = j + 2;  
Magic Number,MIME,MimeFieldCodeBase,C:\repos\dblock_sncore\MIME.NET\MimeFieldCodeBase.cs,SelectEncoding,The following statement contains a magic number: if (nNonAscii == 0)  	return "non";  else {  	int nQSize = s.Length + nNonAscii * 2;  	int nBSize = (s.Length + 2) / 3 * 4;  	return (nQSize <= nBSize || nNonAscii * 5 <= s.Length) ? "quoted-printable" : "base64";  }  
Magic Number,MIME,MimeFieldCodeBase,C:\repos\dblock_sncore\MIME.NET\MimeFieldCodeBase.cs,SelectEncoding,The following statement contains a magic number: if (nNonAscii == 0)  	return "non";  else {  	int nQSize = s.Length + nNonAscii * 2;  	int nBSize = (s.Length + 2) / 3 * 4;  	return (nQSize <= nBSize || nNonAscii * 5 <= s.Length) ? "quoted-printable" : "base64";  }  
Magic Number,MIME,MimeFieldCodeBase,C:\repos\dblock_sncore\MIME.NET\MimeFieldCodeBase.cs,SelectEncoding,The following statement contains a magic number: if (nNonAscii == 0)  	return "non";  else {  	int nQSize = s.Length + nNonAscii * 2;  	int nBSize = (s.Length + 2) / 3 * 4;  	return (nQSize <= nBSize || nNonAscii * 5 <= s.Length) ? "quoted-printable" : "base64";  }  
Magic Number,MIME,MimeFieldCodeBase,C:\repos\dblock_sncore\MIME.NET\MimeFieldCodeBase.cs,SelectEncoding,The following statement contains a magic number: if (nNonAscii == 0)  	return "non";  else {  	int nQSize = s.Length + nNonAscii * 2;  	int nBSize = (s.Length + 2) / 3 * 4;  	return (nQSize <= nBSize || nNonAscii * 5 <= s.Length) ? "quoted-printable" : "base64";  }  
Magic Number,MIME,MimeFieldCodeBase,C:\repos\dblock_sncore\MIME.NET\MimeFieldCodeBase.cs,SelectEncoding,The following statement contains a magic number: if (nNonAscii == 0)  	return "non";  else {  	int nQSize = s.Length + nNonAscii * 2;  	int nBSize = (s.Length + 2) / 3 * 4;  	return (nQSize <= nBSize || nNonAscii * 5 <= s.Length) ? "quoted-printable" : "base64";  }  
Magic Number,MIME,MimeFieldCodeBase,C:\repos\dblock_sncore\MIME.NET\MimeFieldCodeBase.cs,SelectEncoding,The following statement contains a magic number: return (nQSize <= nBSize || nNonAscii * 5 <= s.Length) ? "quoted-printable" : "base64";  
Magic Number,MIME,MimeFieldCodeBase,C:\repos\dblock_sncore\MIME.NET\MimeFieldCodeBase.cs,IsNonAscii,The following statement contains a magic number: return (int)c > 255;  
Magic Number,MIME,MimeHeader,C:\repos\dblock_sncore\MIME.NET\MimeHeader.cs,SetBoundary,The following statement contains a magic number: if (aMimeField != null) {  	if (aMimeField.GetValue ().IndexOf ("multipart"' 0' 9) == -1)  		aMimeField.SetValue ("multipart/mixed");  	aMimeField.SetParameter (MimeConst.Boundary' "\"" + pszBoundary + "\"");  }  else {  	aMimeField = new MimeField ();  	aMimeField.SetName (MimeConst.ContentType);  	aMimeField.SetValue ("multipart/mixed");  	aMimeField.SetParameter (MimeConst.Boundary' "\"" + pszBoundary + "\"");  	m_listFields.Add (aMimeField);  }  
Magic Number,MIME,MimeHeader,C:\repos\dblock_sncore\MIME.NET\MimeHeader.cs,SetBoundary,The following statement contains a magic number: if (aMimeField.GetValue ().IndexOf ("multipart"' 0' 9) == -1)  	aMimeField.SetValue ("multipart/mixed");  
Missing Default,MIME,MimeFieldCodeBase,C:\repos\dblock_sncore\MIME.NET\MimeFieldCodeBase.cs,EncodeDelimeter,The following switch statement is missing a default case: switch (SelectEncoding (strArr [i]).ToLower ()) {  case "non":  	sb.Append (strArr [i]);  	break;  case "quoted-printable": {  	MimeCode aCode = MimeCodeManager.Instance.GetCode ("quoted-printable");  	aCode.Charset = Charset;  	sb.AppendFormat ("=?{0}?Q?{1}?="' Charset' aCode.EncodeFromString (strArr [i]));  	break;  }  case "base64": {  	MimeCode aCode = MimeCodeManager.Instance.GetCode ("base64");  	aCode.Charset = Charset;  	sb.AppendFormat ("=?{0}?B?{1}?="' Charset' aCode.EncodeFromString (strArr [i]));  	break;  }  }  
Missing Default,MIME,MimeFieldCodeBase,C:\repos\dblock_sncore\MIME.NET\MimeFieldCodeBase.cs,EncodeNoDelimeter,The following switch statement is missing a default case: switch (SelectEncoding (s).ToLower ()) {  case "non":  	sb.Append (s);  	break;  case "quoted-printable": {  	MimeCode aCode = MimeCodeManager.Instance.GetCode ("quoted-printable");  	aCode.Charset = Charset;  	sb.AppendFormat ("=?{0}?Q?{1}?="' Charset' aCode.EncodeFromString (s));  	break;  }  case "base64": {  	MimeCode aCode = MimeCodeManager.Instance.GetCode ("base64");  	aCode.Charset = Charset;  	sb.AppendFormat ("=?{0}?B?{1}?="' Charset' aCode.EncodeFromString (s));  	break;  }  }  
