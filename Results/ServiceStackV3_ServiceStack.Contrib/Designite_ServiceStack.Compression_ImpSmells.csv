Implementation smell,Namespace,Class,File,Method,Description
Magic Number,ServiceStack.Compression,ICSharpGZipProvider,C:\repos\ServiceStackV3_ServiceStack.Contrib\src\ServiceStack.Compression\ICSharpGZipProvider.cs,GZip,The following statement contains a magic number: using (var ms = new MemoryStream())  			using (var zipStream = new GZipOutputStream(ms))  			{  				zipStream.Write(buffer' 0' buffer.Length);  				zipStream.Close();    				var compressed = ms.ToArray();    				var gzBuffer = new byte[compressed.Length + 4];  				Buffer.BlockCopy(compressed' 0' gzBuffer' 4' compressed.Length);  				Buffer.BlockCopy(BitConverter.GetBytes(buffer.Length)' 0' gzBuffer' 0' 4);    				return gzBuffer;  			}
Magic Number,ServiceStack.Compression,ICSharpGZipProvider,C:\repos\ServiceStackV3_ServiceStack.Contrib\src\ServiceStack.Compression\ICSharpGZipProvider.cs,GZip,The following statement contains a magic number: using (var ms = new MemoryStream())  			using (var zipStream = new GZipOutputStream(ms))  			{  				zipStream.Write(buffer' 0' buffer.Length);  				zipStream.Close();    				var compressed = ms.ToArray();    				var gzBuffer = new byte[compressed.Length + 4];  				Buffer.BlockCopy(compressed' 0' gzBuffer' 4' compressed.Length);  				Buffer.BlockCopy(BitConverter.GetBytes(buffer.Length)' 0' gzBuffer' 0' 4);    				return gzBuffer;  			}
Magic Number,ServiceStack.Compression,ICSharpGZipProvider,C:\repos\ServiceStackV3_ServiceStack.Contrib\src\ServiceStack.Compression\ICSharpGZipProvider.cs,GZip,The following statement contains a magic number: using (var ms = new MemoryStream())  			using (var zipStream = new GZipOutputStream(ms))  			{  				zipStream.Write(buffer' 0' buffer.Length);  				zipStream.Close();    				var compressed = ms.ToArray();    				var gzBuffer = new byte[compressed.Length + 4];  				Buffer.BlockCopy(compressed' 0' gzBuffer' 4' compressed.Length);  				Buffer.BlockCopy(BitConverter.GetBytes(buffer.Length)' 0' gzBuffer' 0' 4);    				return gzBuffer;  			}
Magic Number,ServiceStack.Compression,ICSharpGZipProvider,C:\repos\ServiceStackV3_ServiceStack.Contrib\src\ServiceStack.Compression\ICSharpGZipProvider.cs,GUnzip,The following statement contains a magic number: using (var ms = new MemoryStream())  			{  				var msgLength = BitConverter.ToInt32(gzBuffer' 0);  				ms.Write(gzBuffer' 4' gzBuffer.Length - 4);    				var buffer = new byte[msgLength];    				ms.Position = 0;  				using (var zipStream = new GZipInputStream(ms))  				{  					zipStream.Read(buffer' 0' buffer.Length);  				}    				return Encoding.UTF8.GetString(buffer);  			}
Magic Number,ServiceStack.Compression,ICSharpGZipProvider,C:\repos\ServiceStackV3_ServiceStack.Contrib\src\ServiceStack.Compression\ICSharpGZipProvider.cs,GUnzip,The following statement contains a magic number: using (var ms = new MemoryStream())  			{  				var msgLength = BitConverter.ToInt32(gzBuffer' 0);  				ms.Write(gzBuffer' 4' gzBuffer.Length - 4);    				var buffer = new byte[msgLength];    				ms.Position = 0;  				using (var zipStream = new GZipInputStream(ms))  				{  					zipStream.Read(buffer' 0' buffer.Length);  				}    				return Encoding.UTF8.GetString(buffer);  			}
Magic Number,ServiceStack.Compression,ICSharpDeflateProvider,C:\repos\ServiceStackV3_ServiceStack.Contrib\src\ServiceStack.Compression\ICSharpDeflateProvider.cs,Deflate,The following statement contains a magic number: using (var ms = new MemoryStream())  			{  				using (var zipStream = new DeflaterOutputStream(ms' new Deflater(9)))  				{  					zipStream.Write(buffer' 0' buffer.Length);  					zipStream.Close();    					var compressed = ms.ToArray();    					var gzBuffer = new byte[compressed.Length + 4];  					Buffer.BlockCopy(compressed' 0' gzBuffer' 4' compressed.Length);  					Buffer.BlockCopy(BitConverter.GetBytes(buffer.Length)' 0' gzBuffer' 0' 4);    					return gzBuffer;  				}  			}
Magic Number,ServiceStack.Compression,ICSharpDeflateProvider,C:\repos\ServiceStackV3_ServiceStack.Contrib\src\ServiceStack.Compression\ICSharpDeflateProvider.cs,Deflate,The following statement contains a magic number: using (var ms = new MemoryStream())  			{  				using (var zipStream = new DeflaterOutputStream(ms' new Deflater(9)))  				{  					zipStream.Write(buffer' 0' buffer.Length);  					zipStream.Close();    					var compressed = ms.ToArray();    					var gzBuffer = new byte[compressed.Length + 4];  					Buffer.BlockCopy(compressed' 0' gzBuffer' 4' compressed.Length);  					Buffer.BlockCopy(BitConverter.GetBytes(buffer.Length)' 0' gzBuffer' 0' 4);    					return gzBuffer;  				}  			}
Magic Number,ServiceStack.Compression,ICSharpDeflateProvider,C:\repos\ServiceStackV3_ServiceStack.Contrib\src\ServiceStack.Compression\ICSharpDeflateProvider.cs,Deflate,The following statement contains a magic number: using (var ms = new MemoryStream())  			{  				using (var zipStream = new DeflaterOutputStream(ms' new Deflater(9)))  				{  					zipStream.Write(buffer' 0' buffer.Length);  					zipStream.Close();    					var compressed = ms.ToArray();    					var gzBuffer = new byte[compressed.Length + 4];  					Buffer.BlockCopy(compressed' 0' gzBuffer' 4' compressed.Length);  					Buffer.BlockCopy(BitConverter.GetBytes(buffer.Length)' 0' gzBuffer' 0' 4);    					return gzBuffer;  				}  			}
Magic Number,ServiceStack.Compression,ICSharpDeflateProvider,C:\repos\ServiceStackV3_ServiceStack.Contrib\src\ServiceStack.Compression\ICSharpDeflateProvider.cs,Deflate,The following statement contains a magic number: using (var ms = new MemoryStream())  			{  				using (var zipStream = new DeflaterOutputStream(ms' new Deflater(9)))  				{  					zipStream.Write(buffer' 0' buffer.Length);  					zipStream.Close();    					var compressed = ms.ToArray();    					var gzBuffer = new byte[compressed.Length + 4];  					Buffer.BlockCopy(compressed' 0' gzBuffer' 4' compressed.Length);  					Buffer.BlockCopy(BitConverter.GetBytes(buffer.Length)' 0' gzBuffer' 0' 4);    					return gzBuffer;  				}  			}
Magic Number,ServiceStack.Compression,ICSharpDeflateProvider,C:\repos\ServiceStackV3_ServiceStack.Contrib\src\ServiceStack.Compression\ICSharpDeflateProvider.cs,Inflate,The following statement contains a magic number: using (var ms = new MemoryStream())  			{  				var msgLength = BitConverter.ToInt32(gzBuffer' 0);  				ms.Write(gzBuffer' 4' gzBuffer.Length - 4);    				var buffer = new byte[msgLength];    				ms.Position = 0;  				using (var zipStream = new InflaterInputStream(ms' new Inflater()))  				{  					zipStream.Read(buffer' 0' buffer.Length);  				}    				return Encoding.UTF8.GetString(buffer);  			}
Magic Number,ServiceStack.Compression,ICSharpDeflateProvider,C:\repos\ServiceStackV3_ServiceStack.Contrib\src\ServiceStack.Compression\ICSharpDeflateProvider.cs,Inflate,The following statement contains a magic number: using (var ms = new MemoryStream())  			{  				var msgLength = BitConverter.ToInt32(gzBuffer' 0);  				ms.Write(gzBuffer' 4' gzBuffer.Length - 4);    				var buffer = new byte[msgLength];    				ms.Position = 0;  				using (var zipStream = new InflaterInputStream(ms' new Inflater()))  				{  					zipStream.Read(buffer' 0' buffer.Length);  				}    				return Encoding.UTF8.GetString(buffer);  			}
