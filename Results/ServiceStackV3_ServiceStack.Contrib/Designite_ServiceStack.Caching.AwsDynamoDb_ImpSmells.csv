Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,ServiceStack.Caching.AwsDynamoDb,DynamoDbCacheClient,C:\repos\ServiceStackV3_ServiceStack.Contrib\src\ServiceStack.Caching.AwsDynamoDb\DynamoDbCacheClient.cs,DynamoDbCacheClient,The method has 7 parameters. Parameters: awsAccessKey' awsSecretKey' region' cacheTableName' readCapacity' writeCapacity' createTableIfMissing
Long Statement,ServiceStack.Caching.AwsDynamoDb,DynamoDbCacheClient,C:\repos\ServiceStackV3_ServiceStack.Contrib\src\ServiceStack.Caching.AwsDynamoDb\DynamoDbCacheClient.cs,FlushAll,The length of the statement  "            // Scaning the table is limited to 1 MB chunks' with a large cache it could result in many Read requests and many Delete requests occurring very quickly which may tap out  " is 170.
Empty Catch Block,ServiceStack.Caching.AwsDynamoDb,DynamoDbCacheClient,C:\repos\ServiceStackV3_ServiceStack.Contrib\src\ServiceStack.Caching.AwsDynamoDb\DynamoDbCacheClient.cs,WaitUntilTableReady,The method has an empty catch block.
Magic Number,ServiceStack.Caching.AwsDynamoDb,DynamoDbCacheClient,C:\repos\ServiceStackV3_ServiceStack.Contrib\src\ServiceStack.Caching.AwsDynamoDb\DynamoDbCacheClient.cs,WaitUntilTableDeleted,The following statement contains a magic number: do              {                  System.Threading.Thread.Sleep(5000); // Wait 5 seconds.                  try                  {                      var res = _client.DescribeTable(new DescribeTableRequest                      {                          TableName = tableName                      });                        Log.InfoFormat("Table name: {0}' status: {1}"'                                     res.DescribeTableResult.Table.TableName'                                     res.DescribeTableResult.Table.TableStatus);                      status = res.DescribeTableResult.Table.TableStatus;                      if (DateTime.Now.Subtract(startWaitTime).Seconds > 60)                      {                          throw new Exception(                              "Waiting for too long for DynamoDB table to be deleted' please check your AWS Console");                      }                  }                  catch (ResourceNotFoundException)                  {                      // When the resource is reported as not found' it's deleted so break out of the loop                      break;                  }              } while (status == "DELETING");
Magic Number,ServiceStack.Caching.AwsDynamoDb,DynamoDbCacheClient,C:\repos\ServiceStackV3_ServiceStack.Contrib\src\ServiceStack.Caching.AwsDynamoDb\DynamoDbCacheClient.cs,WaitUntilTableDeleted,The following statement contains a magic number: do              {                  System.Threading.Thread.Sleep(5000); // Wait 5 seconds.                  try                  {                      var res = _client.DescribeTable(new DescribeTableRequest                      {                          TableName = tableName                      });                        Log.InfoFormat("Table name: {0}' status: {1}"'                                     res.DescribeTableResult.Table.TableName'                                     res.DescribeTableResult.Table.TableStatus);                      status = res.DescribeTableResult.Table.TableStatus;                      if (DateTime.Now.Subtract(startWaitTime).Seconds > 60)                      {                          throw new Exception(                              "Waiting for too long for DynamoDB table to be deleted' please check your AWS Console");                      }                  }                  catch (ResourceNotFoundException)                  {                      // When the resource is reported as not found' it's deleted so break out of the loop                      break;                  }              } while (status == "DELETING");
Magic Number,ServiceStack.Caching.AwsDynamoDb,DynamoDbCacheClient,C:\repos\ServiceStackV3_ServiceStack.Contrib\src\ServiceStack.Caching.AwsDynamoDb\DynamoDbCacheClient.cs,WaitUntilTableReady,The following statement contains a magic number: do              {                  System.Threading.Thread.Sleep(5000); // Wait 5 seconds.                  try                  {                      var res = _client.DescribeTable(new DescribeTableRequest                      {                          TableName = tableName                      });                        Log.InfoFormat("Table name: {0}' status: {1}"'                                     res.DescribeTableResult.Table.TableName'                                     res.DescribeTableResult.Table.TableStatus);                      status = res.DescribeTableResult.Table.TableStatus;                      if (DateTime.Now.Subtract(startWaitTime).Seconds > 60)                      {                          throw new Exception(                              "Waiting for too long for DynamoDB table to be created' please check your AWS Console");                      }                  }                  catch (ResourceNotFoundException)                  {                      // DescribeTable is eventually consistent. So you might                      // get resource not found. So we handle the potential exception.                  }              } while (status != "ACTIVE");
Magic Number,ServiceStack.Caching.AwsDynamoDb,DynamoDbCacheClient,C:\repos\ServiceStackV3_ServiceStack.Contrib\src\ServiceStack.Caching.AwsDynamoDb\DynamoDbCacheClient.cs,WaitUntilTableReady,The following statement contains a magic number: do              {                  System.Threading.Thread.Sleep(5000); // Wait 5 seconds.                  try                  {                      var res = _client.DescribeTable(new DescribeTableRequest                      {                          TableName = tableName                      });                        Log.InfoFormat("Table name: {0}' status: {1}"'                                     res.DescribeTableResult.Table.TableName'                                     res.DescribeTableResult.Table.TableStatus);                      status = res.DescribeTableResult.Table.TableStatus;                      if (DateTime.Now.Subtract(startWaitTime).Seconds > 60)                      {                          throw new Exception(                              "Waiting for too long for DynamoDB table to be created' please check your AWS Console");                      }                  }                  catch (ResourceNotFoundException)                  {                      // DescribeTable is eventually consistent. So you might                      // get resource not found. So we handle the potential exception.                  }              } while (status != "ACTIVE");
