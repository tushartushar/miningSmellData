Implementation smell,Namespace,Class,File,Method,Description
Long Statement,AsyncFunctions,ArrayResizer,C:\repos\Excel-DNA_Excel-DNA\Distribution\Samples\Async\AsyncFunctions\ArrayResizer.cs,EnqueueResize,The length of the statement  "            ExcelReference target = new ExcelReference(caller.RowFirst' caller.RowFirst + rows - 1' caller.ColumnFirst' caller.ColumnFirst + columns - 1' caller.SheetId); " is 158.
Long Statement,AsyncFunctions,ArrayResizer,C:\repos\Excel-DNA_Excel-DNA\Distribution\Samples\Async\AsyncFunctions\ArrayResizer.cs,DoResize,The length of the statement  "                ExcelReference firstCell = new ExcelReference(target.RowFirst' target.RowFirst' target.ColumnFirst' target.ColumnFirst' target.SheetId); " is 136.
Long Statement,MarketDataForExcel,YahooFinance,C:\repos\Excel-DNA_Excel-DNA\Distribution\Samples\Async\AsyncFunctions\AsyncYahoo.cs,GetHistoricalDataFromYahoo,The length of the statement  "               ticker + @"&a=" + (begin.Month - 1).ToString(CultureInfo.InvariantCulture) + @"&b=" + begin.Day.ToString(CultureInfo.InvariantCulture) + " is 136.
Long Statement,MarketDataForExcel,YahooFinance,C:\repos\Excel-DNA_Excel-DNA\Distribution\Samples\Async\AsyncFunctions\AsyncYahoo.cs,GetHistoricalDataFromYahoo,The length of the statement  "               @"&c=" + begin.Year.ToString(CultureInfo.InvariantCulture) + @"&d=" + (end.Month - 1).ToString(CultureInfo.InvariantCulture) + @"&e=" + end.Day.ToString(CultureInfo.InvariantCulture) + @"&f=" + end.Year.ToString(CultureInfo.InvariantCulture) + " is 243.
Long Statement,ExcelDna.Integration.RxExcel,RxExcel,C:\repos\Excel-DNA_Excel-DNA\Distribution\Samples\Async\AsyncFunctions\RxExcel.cs,Observe,The length of the statement  "            return ExcelAsyncUtil.Observe(callerFunctionName' callerParameters' () => observableSource(callerFunctionName' callerParameters).ToExcelObservable()); " is 150.
Long Statement,ExcelDna.Integration.RxExcel,RxExcel,C:\repos\Excel-DNA_Excel-DNA\Distribution\Samples\Async\AsyncFunctions\RxExcel.cs,Observe,The length of the statement  "            return Observe(callerFunctionName' callerParameters' () => taskSource(callerFunctionName' callerParameters).ToObservable()); " is 124.
Long Statement,ExcelDna.Integration.RxExcel,ExcelObservable<T>,C:\repos\Excel-DNA_Excel-DNA\Distribution\Samples\Async\AsyncFunctions\RxExcel.cs,Subscribe,The length of the statement  "            return new DebuggingDisposable(_observable.Subscribe(value => observer.OnNext(value)' observer.OnError' observer.OnCompleted)); " is 127.
Long Statement,System.Net,WebClientExtensions,C:\repos\Excel-DNA_Excel-DNA\Distribution\Samples\Async\AsyncFunctions\WebClientExtensions.cs,DownloadDataTask,The length of the statement  "            handler = (sender' e) => EAPCommon.HandleCompletion(tcs' e' () => e.Result' () => webClient.DownloadDataCompleted -= handler); " is 126.
Long Statement,System.Net,WebClientExtensions,C:\repos\Excel-DNA_Excel-DNA\Distribution\Samples\Async\AsyncFunctions\WebClientExtensions.cs,DownloadFileTask,The length of the statement  "            handler = (sender' e) => EAPCommon.HandleCompletion(tcs' e' () => null' () => webClient.DownloadFileCompleted -= handler); " is 122.
Long Statement,System.Net,WebClientExtensions,C:\repos\Excel-DNA_Excel-DNA\Distribution\Samples\Async\AsyncFunctions\WebClientExtensions.cs,DownloadStringTask,The length of the statement  "            handler = (sender' e) => EAPCommon.HandleCompletion(tcs' e' () => e.Result' () => webClient.DownloadStringCompleted -= handler); " is 128.
Long Statement,System.Net,WebClientExtensions,C:\repos\Excel-DNA_Excel-DNA\Distribution\Samples\Async\AsyncFunctions\WebClientExtensions.cs,OpenReadTask,The length of the statement  "            handler = (sender' e) => EAPCommon.HandleCompletion(tcs' e' () => e.Result' () => webClient.OpenReadCompleted -= handler); " is 122.
Long Statement,System.Net,WebClientExtensions,C:\repos\Excel-DNA_Excel-DNA\Distribution\Samples\Async\AsyncFunctions\WebClientExtensions.cs,OpenWriteTask,The length of the statement  "            handler = (sender' e) => EAPCommon.HandleCompletion(tcs' e' () => e.Result' () => webClient.OpenWriteCompleted -= handler); " is 123.
Long Statement,System.Net,WebClientExtensions,C:\repos\Excel-DNA_Excel-DNA\Distribution\Samples\Async\AsyncFunctions\WebClientExtensions.cs,UploadDataTask,The length of the statement  "            handler = (sender' e) => EAPCommon.HandleCompletion(tcs' e' () => e.Result' () => webClient.UploadDataCompleted -= handler); " is 124.
Long Statement,System.Net,WebClientExtensions,C:\repos\Excel-DNA_Excel-DNA\Distribution\Samples\Async\AsyncFunctions\WebClientExtensions.cs,UploadFileTask,The length of the statement  "            handler = (sender' e) => EAPCommon.HandleCompletion(tcs' e' () => e.Result' () => webClient.UploadFileCompleted -= handler); " is 124.
Long Statement,System.Net,WebClientExtensions,C:\repos\Excel-DNA_Excel-DNA\Distribution\Samples\Async\AsyncFunctions\WebClientExtensions.cs,UploadStringTask,The length of the statement  "            handler = (sender' e) => EAPCommon.HandleCompletion(tcs' e' () => e.Result' () => webClient.UploadStringCompleted -= handler); " is 126.
Magic Number,AsyncFunctions,ArrayResizer,C:\repos\Excel-DNA_Excel-DNA\Distribution\Samples\Async\AsyncFunctions\ArrayResizer.cs,DoResize,The following statement contains a magic number: object oldEcho = XlCall.Excel(XlCall.xlfGetWorkspace' 40);
Magic Number,AsyncFunctions,ArrayResizer,C:\repos\Excel-DNA_Excel-DNA\Distribution\Samples\Async\AsyncFunctions\ArrayResizer.cs,DoResize,The following statement contains a magic number: object oldCalculationMode = XlCall.Excel(XlCall.xlfGetDocument' 14);
Magic Number,AsyncFunctions,ArrayResizer,C:\repos\Excel-DNA_Excel-DNA\Distribution\Samples\Async\AsyncFunctions\ArrayResizer.cs,DoResize,The following statement contains a magic number: try              {                  // Get the current state for reset later                  XlCall.Excel(XlCall.xlcEcho' false);                  XlCall.Excel(XlCall.xlcOptionsCalculation' 3);                    // Get the formula in the first cell of the target                  string formula = (string)XlCall.Excel(XlCall.xlfGetCell' 41' target);                  ExcelReference firstCell = new ExcelReference(target.RowFirst' target.RowFirst' target.ColumnFirst' target.ColumnFirst' target.SheetId);                    bool isFormulaArray = (bool)XlCall.Excel(XlCall.xlfGetCell' 49' target);                  if (isFormulaArray)                  {                      object oldSelectionOnActiveSheet = XlCall.Excel(XlCall.xlfSelection);                      object oldActiveCell = XlCall.Excel(XlCall.xlfActiveCell);                        // Remember old selection and select the first cell of the target                      string firstCellSheet = (string)XlCall.Excel(XlCall.xlSheetNm' firstCell);                      XlCall.Excel(XlCall.xlcWorkbookSelect' new object[] { firstCellSheet });                      object oldSelectionOnArraySheet = XlCall.Excel(XlCall.xlfSelection);                      XlCall.Excel(XlCall.xlcFormulaGoto' firstCell);                        // Extend the selection to the whole array and clear                      XlCall.Excel(XlCall.xlcSelectSpecial' 6);                      ExcelReference oldArray = (ExcelReference)XlCall.Excel(XlCall.xlfSelection);                        oldArray.SetValue(ExcelEmpty.Value);                      XlCall.Excel(XlCall.xlcSelect' oldSelectionOnArraySheet);                      XlCall.Excel(XlCall.xlcFormulaGoto' oldSelectionOnActiveSheet);                  }                  // Get the formula and convert to R1C1 mode                  bool isR1C1Mode = (bool)XlCall.Excel(XlCall.xlfGetWorkspace' 4);                  string formulaR1C1 = formula;                  if (!isR1C1Mode)                  {                      // Set the formula into the whole target                      formulaR1C1 = (string)XlCall.Excel(XlCall.xlfFormulaConvert' formula' true' false' ExcelMissing.Value' firstCell);                  }                  // Must be R1C1-style references                  object ignoredResult;                  //Debug.Print("Resizing START: " + target.RowLast);                  XlCall.XlReturn retval = XlCall.TryExcel(XlCall.xlcFormulaArray' out ignoredResult' formulaR1C1' target);                  //Debug.Print("Resizing FINISH");                    // TODO: Dummy action to clear the undo stack                                    if (retval != XlCall.XlReturn.XlReturnSuccess)                  {                      // TODO: Consider what to do now!?                      // Might have failed due to array in the way.                      firstCell.SetValue("'" + formula);                  }              }              finally              {                  XlCall.Excel(XlCall.xlcEcho' oldEcho);                  XlCall.Excel(XlCall.xlcOptionsCalculation' oldCalculationMode);              }
Magic Number,AsyncFunctions,ArrayResizer,C:\repos\Excel-DNA_Excel-DNA\Distribution\Samples\Async\AsyncFunctions\ArrayResizer.cs,DoResize,The following statement contains a magic number: try              {                  // Get the current state for reset later                  XlCall.Excel(XlCall.xlcEcho' false);                  XlCall.Excel(XlCall.xlcOptionsCalculation' 3);                    // Get the formula in the first cell of the target                  string formula = (string)XlCall.Excel(XlCall.xlfGetCell' 41' target);                  ExcelReference firstCell = new ExcelReference(target.RowFirst' target.RowFirst' target.ColumnFirst' target.ColumnFirst' target.SheetId);                    bool isFormulaArray = (bool)XlCall.Excel(XlCall.xlfGetCell' 49' target);                  if (isFormulaArray)                  {                      object oldSelectionOnActiveSheet = XlCall.Excel(XlCall.xlfSelection);                      object oldActiveCell = XlCall.Excel(XlCall.xlfActiveCell);                        // Remember old selection and select the first cell of the target                      string firstCellSheet = (string)XlCall.Excel(XlCall.xlSheetNm' firstCell);                      XlCall.Excel(XlCall.xlcWorkbookSelect' new object[] { firstCellSheet });                      object oldSelectionOnArraySheet = XlCall.Excel(XlCall.xlfSelection);                      XlCall.Excel(XlCall.xlcFormulaGoto' firstCell);                        // Extend the selection to the whole array and clear                      XlCall.Excel(XlCall.xlcSelectSpecial' 6);                      ExcelReference oldArray = (ExcelReference)XlCall.Excel(XlCall.xlfSelection);                        oldArray.SetValue(ExcelEmpty.Value);                      XlCall.Excel(XlCall.xlcSelect' oldSelectionOnArraySheet);                      XlCall.Excel(XlCall.xlcFormulaGoto' oldSelectionOnActiveSheet);                  }                  // Get the formula and convert to R1C1 mode                  bool isR1C1Mode = (bool)XlCall.Excel(XlCall.xlfGetWorkspace' 4);                  string formulaR1C1 = formula;                  if (!isR1C1Mode)                  {                      // Set the formula into the whole target                      formulaR1C1 = (string)XlCall.Excel(XlCall.xlfFormulaConvert' formula' true' false' ExcelMissing.Value' firstCell);                  }                  // Must be R1C1-style references                  object ignoredResult;                  //Debug.Print("Resizing START: " + target.RowLast);                  XlCall.XlReturn retval = XlCall.TryExcel(XlCall.xlcFormulaArray' out ignoredResult' formulaR1C1' target);                  //Debug.Print("Resizing FINISH");                    // TODO: Dummy action to clear the undo stack                                    if (retval != XlCall.XlReturn.XlReturnSuccess)                  {                      // TODO: Consider what to do now!?                      // Might have failed due to array in the way.                      firstCell.SetValue("'" + formula);                  }              }              finally              {                  XlCall.Excel(XlCall.xlcEcho' oldEcho);                  XlCall.Excel(XlCall.xlcOptionsCalculation' oldCalculationMode);              }
Magic Number,AsyncFunctions,ArrayResizer,C:\repos\Excel-DNA_Excel-DNA\Distribution\Samples\Async\AsyncFunctions\ArrayResizer.cs,DoResize,The following statement contains a magic number: try              {                  // Get the current state for reset later                  XlCall.Excel(XlCall.xlcEcho' false);                  XlCall.Excel(XlCall.xlcOptionsCalculation' 3);                    // Get the formula in the first cell of the target                  string formula = (string)XlCall.Excel(XlCall.xlfGetCell' 41' target);                  ExcelReference firstCell = new ExcelReference(target.RowFirst' target.RowFirst' target.ColumnFirst' target.ColumnFirst' target.SheetId);                    bool isFormulaArray = (bool)XlCall.Excel(XlCall.xlfGetCell' 49' target);                  if (isFormulaArray)                  {                      object oldSelectionOnActiveSheet = XlCall.Excel(XlCall.xlfSelection);                      object oldActiveCell = XlCall.Excel(XlCall.xlfActiveCell);                        // Remember old selection and select the first cell of the target                      string firstCellSheet = (string)XlCall.Excel(XlCall.xlSheetNm' firstCell);                      XlCall.Excel(XlCall.xlcWorkbookSelect' new object[] { firstCellSheet });                      object oldSelectionOnArraySheet = XlCall.Excel(XlCall.xlfSelection);                      XlCall.Excel(XlCall.xlcFormulaGoto' firstCell);                        // Extend the selection to the whole array and clear                      XlCall.Excel(XlCall.xlcSelectSpecial' 6);                      ExcelReference oldArray = (ExcelReference)XlCall.Excel(XlCall.xlfSelection);                        oldArray.SetValue(ExcelEmpty.Value);                      XlCall.Excel(XlCall.xlcSelect' oldSelectionOnArraySheet);                      XlCall.Excel(XlCall.xlcFormulaGoto' oldSelectionOnActiveSheet);                  }                  // Get the formula and convert to R1C1 mode                  bool isR1C1Mode = (bool)XlCall.Excel(XlCall.xlfGetWorkspace' 4);                  string formulaR1C1 = formula;                  if (!isR1C1Mode)                  {                      // Set the formula into the whole target                      formulaR1C1 = (string)XlCall.Excel(XlCall.xlfFormulaConvert' formula' true' false' ExcelMissing.Value' firstCell);                  }                  // Must be R1C1-style references                  object ignoredResult;                  //Debug.Print("Resizing START: " + target.RowLast);                  XlCall.XlReturn retval = XlCall.TryExcel(XlCall.xlcFormulaArray' out ignoredResult' formulaR1C1' target);                  //Debug.Print("Resizing FINISH");                    // TODO: Dummy action to clear the undo stack                                    if (retval != XlCall.XlReturn.XlReturnSuccess)                  {                      // TODO: Consider what to do now!?                      // Might have failed due to array in the way.                      firstCell.SetValue("'" + formula);                  }              }              finally              {                  XlCall.Excel(XlCall.xlcEcho' oldEcho);                  XlCall.Excel(XlCall.xlcOptionsCalculation' oldCalculationMode);              }
Magic Number,AsyncFunctions,ArrayResizer,C:\repos\Excel-DNA_Excel-DNA\Distribution\Samples\Async\AsyncFunctions\ArrayResizer.cs,DoResize,The following statement contains a magic number: try              {                  // Get the current state for reset later                  XlCall.Excel(XlCall.xlcEcho' false);                  XlCall.Excel(XlCall.xlcOptionsCalculation' 3);                    // Get the formula in the first cell of the target                  string formula = (string)XlCall.Excel(XlCall.xlfGetCell' 41' target);                  ExcelReference firstCell = new ExcelReference(target.RowFirst' target.RowFirst' target.ColumnFirst' target.ColumnFirst' target.SheetId);                    bool isFormulaArray = (bool)XlCall.Excel(XlCall.xlfGetCell' 49' target);                  if (isFormulaArray)                  {                      object oldSelectionOnActiveSheet = XlCall.Excel(XlCall.xlfSelection);                      object oldActiveCell = XlCall.Excel(XlCall.xlfActiveCell);                        // Remember old selection and select the first cell of the target                      string firstCellSheet = (string)XlCall.Excel(XlCall.xlSheetNm' firstCell);                      XlCall.Excel(XlCall.xlcWorkbookSelect' new object[] { firstCellSheet });                      object oldSelectionOnArraySheet = XlCall.Excel(XlCall.xlfSelection);                      XlCall.Excel(XlCall.xlcFormulaGoto' firstCell);                        // Extend the selection to the whole array and clear                      XlCall.Excel(XlCall.xlcSelectSpecial' 6);                      ExcelReference oldArray = (ExcelReference)XlCall.Excel(XlCall.xlfSelection);                        oldArray.SetValue(ExcelEmpty.Value);                      XlCall.Excel(XlCall.xlcSelect' oldSelectionOnArraySheet);                      XlCall.Excel(XlCall.xlcFormulaGoto' oldSelectionOnActiveSheet);                  }                  // Get the formula and convert to R1C1 mode                  bool isR1C1Mode = (bool)XlCall.Excel(XlCall.xlfGetWorkspace' 4);                  string formulaR1C1 = formula;                  if (!isR1C1Mode)                  {                      // Set the formula into the whole target                      formulaR1C1 = (string)XlCall.Excel(XlCall.xlfFormulaConvert' formula' true' false' ExcelMissing.Value' firstCell);                  }                  // Must be R1C1-style references                  object ignoredResult;                  //Debug.Print("Resizing START: " + target.RowLast);                  XlCall.XlReturn retval = XlCall.TryExcel(XlCall.xlcFormulaArray' out ignoredResult' formulaR1C1' target);                  //Debug.Print("Resizing FINISH");                    // TODO: Dummy action to clear the undo stack                                    if (retval != XlCall.XlReturn.XlReturnSuccess)                  {                      // TODO: Consider what to do now!?                      // Might have failed due to array in the way.                      firstCell.SetValue("'" + formula);                  }              }              finally              {                  XlCall.Excel(XlCall.xlcEcho' oldEcho);                  XlCall.Excel(XlCall.xlcOptionsCalculation' oldCalculationMode);              }
Magic Number,AsyncFunctions,ArrayResizer,C:\repos\Excel-DNA_Excel-DNA\Distribution\Samples\Async\AsyncFunctions\ArrayResizer.cs,DoResize,The following statement contains a magic number: try              {                  // Get the current state for reset later                  XlCall.Excel(XlCall.xlcEcho' false);                  XlCall.Excel(XlCall.xlcOptionsCalculation' 3);                    // Get the formula in the first cell of the target                  string formula = (string)XlCall.Excel(XlCall.xlfGetCell' 41' target);                  ExcelReference firstCell = new ExcelReference(target.RowFirst' target.RowFirst' target.ColumnFirst' target.ColumnFirst' target.SheetId);                    bool isFormulaArray = (bool)XlCall.Excel(XlCall.xlfGetCell' 49' target);                  if (isFormulaArray)                  {                      object oldSelectionOnActiveSheet = XlCall.Excel(XlCall.xlfSelection);                      object oldActiveCell = XlCall.Excel(XlCall.xlfActiveCell);                        // Remember old selection and select the first cell of the target                      string firstCellSheet = (string)XlCall.Excel(XlCall.xlSheetNm' firstCell);                      XlCall.Excel(XlCall.xlcWorkbookSelect' new object[] { firstCellSheet });                      object oldSelectionOnArraySheet = XlCall.Excel(XlCall.xlfSelection);                      XlCall.Excel(XlCall.xlcFormulaGoto' firstCell);                        // Extend the selection to the whole array and clear                      XlCall.Excel(XlCall.xlcSelectSpecial' 6);                      ExcelReference oldArray = (ExcelReference)XlCall.Excel(XlCall.xlfSelection);                        oldArray.SetValue(ExcelEmpty.Value);                      XlCall.Excel(XlCall.xlcSelect' oldSelectionOnArraySheet);                      XlCall.Excel(XlCall.xlcFormulaGoto' oldSelectionOnActiveSheet);                  }                  // Get the formula and convert to R1C1 mode                  bool isR1C1Mode = (bool)XlCall.Excel(XlCall.xlfGetWorkspace' 4);                  string formulaR1C1 = formula;                  if (!isR1C1Mode)                  {                      // Set the formula into the whole target                      formulaR1C1 = (string)XlCall.Excel(XlCall.xlfFormulaConvert' formula' true' false' ExcelMissing.Value' firstCell);                  }                  // Must be R1C1-style references                  object ignoredResult;                  //Debug.Print("Resizing START: " + target.RowLast);                  XlCall.XlReturn retval = XlCall.TryExcel(XlCall.xlcFormulaArray' out ignoredResult' formulaR1C1' target);                  //Debug.Print("Resizing FINISH");                    // TODO: Dummy action to clear the undo stack                                    if (retval != XlCall.XlReturn.XlReturnSuccess)                  {                      // TODO: Consider what to do now!?                      // Might have failed due to array in the way.                      firstCell.SetValue("'" + formula);                  }              }              finally              {                  XlCall.Excel(XlCall.xlcEcho' oldEcho);                  XlCall.Excel(XlCall.xlcOptionsCalculation' oldCalculationMode);              }
Magic Number,AsyncFunctions,TimeServer,C:\repos\Excel-DNA_Excel-DNA\Distribution\Samples\Async\AsyncFunctions\AsyncAddIn.cs,TimeServer,The following statement contains a magic number: _timer = new Timer(delegate                      {                          Log("Tick");                          string now = DateTime.Now.ToString("yyyy/MM/dd HH:mm:ss.fff");                          foreach (Topic topic in _topics) topic.UpdateValue(now);                      }' null' 0' 1000);
Magic Number,AsyncFunctions,RxTest,C:\repos\Excel-DNA_Excel-DNA\Distribution\Samples\Async\AsyncFunctions\RxTest.cs,rxCreateTimer,The following statement contains a magic number: return RxExcel.Observe("rxCreateTimer"' intervalSeconds'              () => Observable.Create<string>(                  observer =>                  {                      var timer = new System.Timers.Timer();                      timer.Interval = intervalSeconds * 1000;                      timer.Elapsed += (s' e) => observer.OnNext("Tick at" + DateTime.Now.ToString("HH:mm:ss.fff"));                      timer.Start();                      return timer;                  }));
Magic Number,AsyncFunctions,RxTest,C:\repos\Excel-DNA_Excel-DNA\Distribution\Samples\Async\AsyncFunctions\RxTest.cs,rxCreateValues,The following statement contains a magic number: return RxExcel.Observe("rxCreateValuesShared"' null'              () => Observable.Generate(                      1'                      i => i <= 20'                      i => i + 1'                      i => i * i'                      i => TimeSpan.FromSeconds(5)));
Magic Number,AsyncFunctions,RxTest,C:\repos\Excel-DNA_Excel-DNA\Distribution\Samples\Async\AsyncFunctions\RxTest.cs,rxCreateValues,The following statement contains a magic number: return RxExcel.Observe("rxCreateValuesShared"' null'              () => Observable.Generate(                      1'                      i => i <= 20'                      i => i + 1'                      i => i * i'                      i => TimeSpan.FromSeconds(5)));
Magic Number,AsyncFunctions,RxTest,C:\repos\Excel-DNA_Excel-DNA\Distribution\Samples\Async\AsyncFunctions\RxTest.cs,rxCreateValuesPerCaller,The following statement contains a magic number: return RxExcel.Observe("rxCreateValues"' new[] {intervalSeconds' caller}'              () => Observable.Generate(                      1'                      i => i <= 10'                      i => i + 1'                      i => i * i'                      i => TimeSpan.FromSeconds(5)));
Magic Number,AsyncFunctions,RxTest,C:\repos\Excel-DNA_Excel-DNA\Distribution\Samples\Async\AsyncFunctions\RxTest.cs,rxCreateValuesPerCaller,The following statement contains a magic number: return RxExcel.Observe("rxCreateValues"' new[] {intervalSeconds' caller}'              () => Observable.Generate(                      1'                      i => i <= 10'                      i => i + 1'                      i => i * i'                      i => TimeSpan.FromSeconds(5)));
Magic Number,AsyncFunctions,RxTest,C:\repos\Excel-DNA_Excel-DNA\Distribution\Samples\Async\AsyncFunctions\RxTest.cs,rxCreateArrays,The following statement contains a magic number: object result = RxExcel.Observe("rxCreateArrays"' null'              () => Observable.Generate(                      new List<object> { 1' 2' 3 }'                      lst => true'                      lst => { lst.Add((int)lst[lst.Count - 1] + 1); return lst; }'                      lst => Transpose(lst.ToArray())'                      lst => TimeSpan.FromSeconds(3))                  );
Magic Number,AsyncFunctions,RxTest,C:\repos\Excel-DNA_Excel-DNA\Distribution\Samples\Async\AsyncFunctions\RxTest.cs,rxCreateArrays,The following statement contains a magic number: object result = RxExcel.Observe("rxCreateArrays"' null'              () => Observable.Generate(                      new List<object> { 1' 2' 3 }'                      lst => true'                      lst => { lst.Add((int)lst[lst.Count - 1] + 1); return lst; }'                      lst => Transpose(lst.ToArray())'                      lst => TimeSpan.FromSeconds(3))                  );
Magic Number,AsyncFunctions,RxTest,C:\repos\Excel-DNA_Excel-DNA\Distribution\Samples\Async\AsyncFunctions\RxTest.cs,rxCreateArrays,The following statement contains a magic number: object result = RxExcel.Observe("rxCreateArrays"' null'              () => Observable.Generate(                      new List<object> { 1' 2' 3 }'                      lst => true'                      lst => { lst.Add((int)lst[lst.Count - 1] + 1); return lst; }'                      lst => Transpose(lst.ToArray())'                      lst => TimeSpan.FromSeconds(3))                  );
Magic Number,AsyncFunctions,SyncContext,C:\repos\Excel-DNA_Excel-DNA\Distribution\Samples\Async\AsyncFunctions\SyncContext.cs,asyncTestSyncContext,The following statement contains a magic number: using (new ExcelSynchronizationContextInstaller())              {                  Task.Factory.StartNew(() => Thread.Sleep(2000))                    .ContinueWith(t =>                        {                            Console.Beep(); Console.Beep();                            try                            {                                dynamic xlApp = ExcelDnaUtil.Application;                                xlApp.Range["F1"].Value = "We have waited long enough.";                            }                            catch                            {                                Console.Beep(); Console.Beep(); Console.Beep();                            }                        }                    'TaskScheduler.FromCurrentSynchronizationContext() );                  return DateTime.Now;              }
Magic Number,MyRTDServers,TimeServer,C:\repos\Excel-DNA_Excel-DNA\Distribution\Samples\Async\AsyncFunctions\AsyncAddIn.cs,TimeServer,The following statement contains a magic number: _timer = new Timer(delegate                      {                          Log("Tick");                          string now = DateTime.Now.ToString("yyyy/MM/dd HH:mm:ss.fff");                          foreach (Topic topic in _topics) topic.UpdateValue(now);                      }' null' 0' 1000);
