Implementation smell,Namespace,Class,File,Method,Description
Long Method,ManagedLzma.SevenZip.Reader,ArchiveMetadataReader,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\ArchiveMetadataReader.cs,ReadArchive,The method has 126 lines of code.
Long Method,ManagedLzma.SevenZip.Reader,ArchiveMetadataReader,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\ArchiveMetadataReader.cs,ReadSectionDetails,The method has 79 lines of code.
Long Method,ManagedLzma.SevenZip.Reader,ArchiveMetadataReader,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\ArchiveMetadataReader.cs,ReadSection,The method has 97 lines of code.
Long Method,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,UpdateModel,The method has 114 lines of code.
Long Method,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,Ppmd7_DecodeSymbol,The method has 98 lines of code.
Long Method,ManagedLzma.SevenZip.FileModel,ArchiveFileModelMetadataReader,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\ArchiveFileModel.cs,ReadMetadata,The method has 89 lines of code.
Long Method,ManagedLzma.SevenZip.Writer,ArchiveWriter,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\ArchiveWriter.cs,WriteMetadata,The method has 100 lines of code.
Complex Method,ManagedLzma.LZMA2,Decoder,D:\newReposJune17\weltkante_managed-lzma\shared\Compression\Lzma2\Decoder.cs,Decode,Cyclomatic complexity of the method is 13
Complex Method,ManagedLzma.LZMA,Decoder,D:\newReposJune17\weltkante_managed-lzma\shared\Compression\Lzma\Decoder.cs,Decode,Cyclomatic complexity of the method is 13
Complex Method,ManagedLzma.SevenZip.Reader,ArchiveSectionDecoder,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\ArchiveDecoder.cs,ArchiveSectionDecoder,Cyclomatic complexity of the method is 11
Complex Method,ManagedLzma.SevenZip.Reader,DecodedArchiveSectionStream,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\ArchiveDecoder.cs,Seek,Cyclomatic complexity of the method is 16
Complex Method,ManagedLzma.SevenZip.Reader,MetadataAttributeReader,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\ArchiveMetadataDataReader.cs,ReadAttributes,Cyclomatic complexity of the method is 7
Complex Method,ManagedLzma.SevenZip.Reader,ArchiveMetadataReader,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\ArchiveMetadataReader.cs,ReadMetadataCore,Cyclomatic complexity of the method is 8
Complex Method,ManagedLzma.SevenZip.Reader,ArchiveMetadataReader,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\ArchiveMetadataReader.cs,ReadArchive,Cyclomatic complexity of the method is 49
Complex Method,ManagedLzma.SevenZip.Reader,ArchiveMetadataReader,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\ArchiveMetadataReader.cs,ReadMetadata,Cyclomatic complexity of the method is 22
Complex Method,ManagedLzma.SevenZip.Reader,ArchiveMetadataReader,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\ArchiveMetadataReader.cs,ReadRawStreamList,Cyclomatic complexity of the method is 11
Complex Method,ManagedLzma.SevenZip.Reader,ArchiveMetadataReader,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\ArchiveMetadataReader.cs,ReadSectionHeader,Cyclomatic complexity of the method is 13
Complex Method,ManagedLzma.SevenZip.Reader,ArchiveMetadataReader,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\ArchiveMetadataReader.cs,ReadSectionDetails,Cyclomatic complexity of the method is 28
Complex Method,ManagedLzma.SevenZip.Reader,ArchiveMetadataReader,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\ArchiveMetadataReader.cs,ReadSection,Cyclomatic complexity of the method is 29
Complex Method,ManagedLzma.SevenZip.Reader,ArchiveMetadataReader,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\ArchiveMetadataReader.cs,ReadDecoder,Cyclomatic complexity of the method is 12
Complex Method,ManagedLzma.SevenZip.Reader,DecodedStream,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\ArchiveReader.cs,Seek,Cyclomatic complexity of the method is 16
Complex Method,ManagedLzma.SevenZip.Reader,DecodedStream,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\ArchiveReader.cs,Read,Cyclomatic complexity of the method is 7
Complex Method,ManagedLzma.SevenZip.Reader,AesArchiveDecoder,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\AesDecoder.cs,Init,Cyclomatic complexity of the method is 9
Complex Method,ManagedLzma.SevenZip.Reader,AesArchiveDecoder,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\AesDecoder.cs,InitKey,Cyclomatic complexity of the method is 12
Complex Method,ManagedLzma.SevenZip.Reader,Bcj2ArchiveDecoder,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\Bcj2Decoder.cs,SetInputStream,Cyclomatic complexity of the method is 15
Complex Method,ManagedLzma.SevenZip.Reader,Bcj2ArchiveDecoder,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\Bcj2Decoder.cs,Run,Cyclomatic complexity of the method is 9
Complex Method,ManagedLzma.SevenZip.Reader,BcjArchiveDecoder,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\BcjDecoder.cs,DecodeInto,Cyclomatic complexity of the method is 9
Complex Method,ManagedLzma.SevenZip.Reader,BcjArchiveDecoder,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\BcjDecoder.cs,x86_Convert,Cyclomatic complexity of the method is 12
Complex Method,ManagedLzma.SevenZip.Reader,PpmdArchiveDecoder,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,PpmdArchiveDecoder,Cyclomatic complexity of the method is 7
Complex Method,ManagedLzma.SevenZip.Reader,PpmdArchiveDecoder,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,CodeSpec,Cyclomatic complexity of the method is 14
Complex Method,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,Ppmd7_Construct,Cyclomatic complexity of the method is 15
Complex Method,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,GlueFreeBlocks,Cyclomatic complexity of the method is 11
Complex Method,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,RestartModel,Cyclomatic complexity of the method is 12
Complex Method,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,CreateSuccessors,Cyclomatic complexity of the method is 13
Complex Method,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,UpdateModel,Cyclomatic complexity of the method is 24
Complex Method,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,Rescale,Cyclomatic complexity of the method is 13
Complex Method,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,Ppmd7_DecodeSymbol,Cyclomatic complexity of the method is 14
Complex Method,ManagedLzma.SevenZip.FileModel,ArchiveFileModelMetadataReader,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\ArchiveFileModel.cs,ReadMetadata,Cyclomatic complexity of the method is 19
Complex Method,ManagedLzma.SevenZip.Metadata,CompressionMethod,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\CompressionMethod.cs,TryDecode,Cyclomatic complexity of the method is 11
Complex Method,ManagedLzma.SevenZip.Metadata,CompressionMethod,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\CompressionMethod.cs,Encode,Cyclomatic complexity of the method is 12
Complex Method,ManagedLzma.SevenZip.Metadata,CompressionMethod,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\CompressionMethod.cs,CheckInputOutputCount,Cyclomatic complexity of the method is 23
Complex Method,ManagedLzma.SevenZip.Metadata,CompressionMethod,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\CompressionMethod.cs,GetInputCount,Cyclomatic complexity of the method is 13
Complex Method,ManagedLzma.SevenZip.Metadata,CompressionMethod,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\CompressionMethod.cs,GetOutputCount,Cyclomatic complexity of the method is 13
Complex Method,ManagedLzma.SevenZip.Metadata,CompressionMethod,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\CompressionMethod.cs,CreateDecoder,Cyclomatic complexity of the method is 13
Complex Method,ManagedLzma.SevenZip.Metadata,CompressionMethod,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\CompressionMethod.cs,ToString,Cyclomatic complexity of the method is 11
Complex Method,ManagedLzma.SevenZip.Writer,ArchiveWriter,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\ArchiveWriter.cs,WriteMetadata,Cyclomatic complexity of the method is 21
Complex Method,ManagedLzma.SevenZip.Writer,ArchiveWriter,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\ArchiveWriter.cs,WriteUnpackInfo,Cyclomatic complexity of the method is 10
Complex Method,ManagedLzma.SevenZip.Writer,ArchiveWriter,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\ArchiveWriter.cs,WriteDecoderSection,Cyclomatic complexity of the method is 25
Complex Method,ManagedLzma.SevenZip.Writer,ArchiveWriter,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\ArchiveWriter.cs,WriteSubStreamsInfo,Cyclomatic complexity of the method is 8
Complex Method,ManagedLzma.SevenZip.Writer,ArchiveWriter,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\ArchiveWriter.cs,TransferSectionAsync,Cyclomatic complexity of the method is 9
Complex Method,ManagedLzma.SevenZip.Writer,ArchiveMetadataRecorder,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\ArchiveWriter.cs,ArchiveMetadataRecorder,Cyclomatic complexity of the method is 7
Complex Method,ManagedLzma.SevenZip.Writer,ArchiveMetadataRecorder,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\ArchiveWriter.cs,CheckName,Cyclomatic complexity of the method is 8
Complex Method,ManagedLzma.SevenZip.Writer,AesEncoderSettings,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Encoders\AesEncoder.cs,SerializeSettings,Cyclomatic complexity of the method is 7
Complex Method,ManagedLzma.SevenZip.Writer,EncoderDefinition,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Encoders\Definition.cs,Connect,Cyclomatic complexity of the method is 7
Complex Method,ManagedLzma.SevenZip.Writer,EncoderDefinition,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Encoders\Definition.cs,Complete,Cyclomatic complexity of the method is 11
Complex Method,ManagedLzma.SevenZip.Writer,EncoderDefinition,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Encoders\Definition.cs,CreateEncoderSession,Cyclomatic complexity of the method is 21
Complex Method,ManagedLzma.SevenZip.Writer,EncoderConnection,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Encoders\Runtime.cs,TransferLoop,Cyclomatic complexity of the method is 7
Complex Method,ManagedLzma.SevenZip.Writer,EncoderSession,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Encoders\Runtime.cs,Dispose,Cyclomatic complexity of the method is 7
Complex Method,ManagedLzma.SevenZip.Writer,EncoderSession,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Encoders\Runtime.cs,Complete,Cyclomatic complexity of the method is 9
Complex Method,ManagedLzma,AsyncOutputProvider,D:\newReposJune17\weltkante_managed-lzma\shared\Utilities\StreamHelper.cs,Write,Cyclomatic complexity of the method is 7
Long Parameter List,ManagedLzma.LZMA.Master,LZMA,D:\newReposJune17\weltkante_managed-lzma\shared\Compression\Implementation\Core.cs,LzmaEncode,The method has 11 parameters.
Long Parameter List,ManagedLzma.LZMA.Master,LZMA,D:\newReposJune17\weltkante_managed-lzma\shared\Compression\Implementation\Core.cs,LzmaCompress,The method has 13 parameters.
Long Parameter List,ManagedLzma.LZMA.Master,LZMA,D:\newReposJune17\weltkante_managed-lzma\shared\Compression\Implementation\Core.cs,LzmaUncompress,The method has 6 parameters.
Long Parameter List,ManagedLzma.LZMA2,Decoder,D:\newReposJune17\weltkante_managed-lzma\shared\Compression\Lzma2\Decoder.cs,Decode,The method has 5 parameters.
Long Parameter List,ManagedLzma.LZMA,Decoder,D:\newReposJune17\weltkante_managed-lzma\shared\Compression\Lzma\Decoder.cs,Decode,The method has 5 parameters.
Long Parameter List,ManagedLzma.LZMA,AsyncDecoder,D:\newReposJune17\weltkante_managed-lzma\shared\Compression\Lzma\Decoder.cs,ReadOutputAsync,The method has 4 parameters.
Long Parameter List,ManagedLzma.LZMA,DecoderSettings,D:\newReposJune17\weltkante_managed-lzma\shared\Compression\Lzma\DecoderSettings.cs,DecoderSettings,The method has 4 parameters.
Long Parameter List,ManagedLzma.SevenZip.Reader,StreamCoordinator,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\ArchiveDecoder.cs,ReadAt,The method has 4 parameters.
Long Parameter List,ManagedLzma.SevenZip.Reader,ArchiveSectionDecoder,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\ArchiveDecoder.cs,SelectStream,The method has 7 parameters.
Long Parameter List,ManagedLzma.SevenZip.Reader,ArchiveSectionDecoder,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\ArchiveDecoder.cs,ArchiveSectionDecoder,The method has 4 parameters.
Long Parameter List,ManagedLzma.SevenZip.Reader,DecodedArchiveSectionStream,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\ArchiveDecoder.cs,DecodedArchiveSectionStream,The method has 4 parameters.
Long Parameter List,ManagedLzma.SevenZip.Reader,DecodedArchiveSectionStream,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\ArchiveDecoder.cs,WriteAsync,The method has 4 parameters.
Long Parameter List,ManagedLzma.SevenZip.Reader,MetadataAttributeReader,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\ArchiveMetadataDataReader.cs,MetadataAttributeReader,The method has 4 parameters.
Long Parameter List,ManagedLzma.SevenZip.Reader,ArchiveMetadataReader,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\ArchiveMetadataReader.cs,ReadFileHeader,The method has 7 parameters.
Long Parameter List,ManagedLzma.SevenZip.Reader,DecodedSectionReader,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\ArchiveReader.cs,DecodedSectionReader,The method has 4 parameters.
Long Parameter List,ManagedLzma.SevenZip.Reader,DecodedStream,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\ArchiveReader.cs,WriteAsync,The method has 4 parameters.
Long Parameter List,ManagedLzma.SevenZip.Reader,AesArchiveDecoder,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\AesDecoder.cs,Initialize,The method has 4 parameters.
Long Parameter List,ManagedLzma.SevenZip.Reader,AesArchiveDecoder,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\AesDecoder.cs,Init,The method has 4 parameters.
Long Parameter List,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,SplitBlock,The method has 4 parameters.
Long Parameter List,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,ShrinkUnits,The method has 4 parameters.
Long Parameter List,ManagedLzma.SevenZip.FileModel,ArchiveFileModel,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\ArchiveFileModel.cs,ArchiveFileModel,The method has 4 parameters.
Long Parameter List,ManagedLzma.SevenZip.FileModel,ArchivedFile,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\ArchiveFileModel.cs,ArchivedFile,The method has 10 parameters.
Long Parameter List,ManagedLzma.SevenZip.FileModel,ArchiveFileModelMetadataReader,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\ArchiveFileModel.cs,AddItem,The method has 4 parameters.
Long Parameter List,ManagedLzma.SevenZip.Metadata,ArchiveDecoderSection,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\ArchiveMetadata.cs,ArchiveDecoderSection,The method has 5 parameters.
Long Parameter List,ManagedLzma.SevenZip.Metadata,DecoderMetadata,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\ArchiveMetadata.cs,DecoderMetadata,The method has 4 parameters.
Long Parameter List,ManagedLzma.SevenZip.Writer,ArchiveWriter,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\ArchiveWriter.cs,WriteAlignedHeaderWithBitVector,The method has 5 parameters.
Long Parameter List,ManagedLzma.SevenZip.Writer,ArchiveWriter,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\ArchiveWriter.cs,TranscodeSectionAsync,The method has 5 parameters.
Long Parameter List,ManagedLzma.SevenZip.Writer,ArchiveWriter,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\ArchiveWriter.cs,CompleteEncoderSession,The method has 4 parameters.
Long Parameter List,ManagedLzma.SevenZip.Writer,ArchiveMetadataRecorder,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\ArchiveWriter.cs,AppendFile,The method has 7 parameters.
Long Parameter List,ManagedLzma.SevenZip.Writer,ArchiveMetadataRecorder,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\ArchiveWriter.cs,AppendFile,The method has 7 parameters.
Long Parameter List,ManagedLzma.SevenZip.Writer,ArchiveMetadataRecorder,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\ArchiveWriter.cs,AppendDirectory,The method has 5 parameters.
Long Parameter List,ManagedLzma.SevenZip.Writer,ArchiveMetadataRecorder,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\ArchiveWriter.cs,AppendDirectory,The method has 5 parameters.
Long Parameter List,ManagedLzma.SevenZip.Writer,CopyEncoderNode,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Encoders\CopyEncoder.cs,ReadAsync,The method has 4 parameters.
Long Parameter List,ManagedLzma.SevenZip.Writer,CopyEncoderNode,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Encoders\CopyEncoder.cs,WriteAsync,The method has 4 parameters.
Long Parameter List,ManagedLzma.SevenZip.Writer,EncoderDefinition,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Encoders\Definition.cs,CreateEncoderSession,The method has 4 parameters.
Long Parameter List,ManagedLzma.SevenZip.Writer,EncoderInput,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Encoders\Runtime.cs,ReadAsync,The method has 4 parameters.
Long Parameter List,ManagedLzma.SevenZip.Writer,EncoderStorage,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Encoders\Runtime.cs,WriteAsync,The method has 4 parameters.
Long Parameter List,ManagedLzma.SevenZip.Writer,EncoderConnection,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Encoders\Runtime.cs,ReadAsync,The method has 4 parameters.
Long Parameter List,ManagedLzma.SevenZip.Writer,EncoderConnection,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Encoders\Runtime.cs,WriteAsync,The method has 4 parameters.
Long Parameter List,ManagedLzma.SevenZip.Writer,EncoderSession,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Encoders\Runtime.cs,EncoderSession,The method has 7 parameters.
Long Parameter List,ManagedLzma.SevenZip.Writer,EncoderSession,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Encoders\Runtime.cs,ReadInternalAsync,The method has 4 parameters.
Long Parameter List,ManagedLzma,CRC,D:\newReposJune17\weltkante_managed-lzma\shared\Utilities\CRC.cs,Update,The method has 4 parameters.
Long Parameter List,ManagedLzma,AsyncInputQueue,D:\newReposJune17\weltkante_managed-lzma\shared\Utilities\StreamHelper.cs,ReadAsync,The method has 4 parameters.
Long Parameter List,ManagedLzma,AsyncInputQueue,D:\newReposJune17\weltkante_managed-lzma\shared\Utilities\StreamHelper.cs,WriteAsync,The method has 4 parameters.
Long Parameter List,ManagedLzma,AsyncOutputQueue,D:\newReposJune17\weltkante_managed-lzma\shared\Utilities\StreamHelper.cs,ReadAsync,The method has 4 parameters.
Long Parameter List,ManagedLzma,AsyncOutputQueue,D:\newReposJune17\weltkante_managed-lzma\shared\Utilities\StreamHelper.cs,WriteAsync,The method has 4 parameters.
Long Parameter List,ManagedLzma,IStreamReader,D:\newReposJune17\weltkante_managed-lzma\shared\Utilities\Utilities.cs,ReadAsync,The method has 4 parameters.
Long Parameter List,ManagedLzma,IStreamWriter,D:\newReposJune17\weltkante_managed-lzma\shared\Utilities\Utilities.cs,WriteAsync,The method has 4 parameters.
Long Parameter List,ManagedLzma,Utilities,D:\newReposJune17\weltkante_managed-lzma\shared\Utilities\Utilities.cs,CheckStreamArguments,The method has 4 parameters.
Long Parameter List,ManagedLzma,Utilities,D:\newReposJune17\weltkante_managed-lzma\shared\Utilities\Utilities.cs,DebugCheckStreamArguments,The method has 4 parameters.
Long Identifier,ManagedLzma.SevenZip.Reader,MetadataAttributeReader,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\ArchiveMetadataDataReader.cs,MetadataAttributeReader,The length of the parameter enablePosixFileAttributeExtension is 33.
Long Statement,ManagedLzma.LZMA.Master,LZMA,D:\newReposJune17\weltkante_managed-lzma\shared\Compression\Implementation\Core.cs,LzmaCompress,The length of the statement  "	return LzmaEncode (dest' ref destLen' src' srcLen' props' outProps' ref outPropsSize' false' null' ISzAlloc.SmallAlloc' ISzAlloc.BigAlloc); " is 139.
Long Statement,ManagedLzma.LZMA.Master,LZMA,D:\newReposJune17\weltkante_managed-lzma\shared\Compression\Implementation\Core.cs,LzmaUncompress,The length of the statement  "	return CLzmaDec.LzmaDecode (dest' ref destLen' src' ref srcLen' props' (uint)propsSize' ELzmaFinishMode.LZMA_FINISH_ANY' out status' ISzAlloc.SmallAlloc); " is 154.
Long Statement,ManagedLzma.LZMA2,Decoder,D:\newReposJune17\weltkante_managed-lzma\shared\Compression\Lzma2\Decoder.cs,ReadOutputData,The length of the statement  "	Buffer.BlockCopy (mDecoder.mDecoder.mDic.mBuffer' mDecoder.mDecoder.mDic.mOffset + mDecoderPosition' buffer' offset' length); " is 125.
Long Statement,ManagedLzma.LZMA,AsyncEncoder,D:\newReposJune17\weltkante_managed-lzma\shared\Compression\Lzma\Encoder.cs,EncodeAsync,The length of the statement  "		var res = mEncoder.LzmaEnc_Encode (new AsyncOutputProvider (output)' new AsyncInputProvider (input)' null' Master.LZMA.ISzAlloc.SmallAlloc' Master.LZMA.ISzAlloc.BigAlloc); " is 171.
Long Statement,ManagedLzma.SevenZip,ArchivedAttributesExtensions,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\ArchivedAttributes.cs,CheckArchivedAttributesConsistency,The length of the statement  "	System.Diagnostics.Debug.Assert ((int)ForbiddenAttributes == (int)(0 | FileAttributes.Device | FileAttributes.Encrypted | FileAttributes.ReparsePoint | FileAttributes.SparseFile)); " is 180.
Long Statement,ManagedLzma.SevenZip,ArchivedAttributesExtensions,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\ArchivedAttributes.cs,CheckArchivedAttributesConsistency,The length of the statement  "	System.Diagnostics.Debug.Assert ((int)StrippedAttributes == (int)(0 | FileAttributes.Normal | FileAttributes.Offline | FileAttributes.Compressed | FileAttributes.IntegrityStream | FileAttributes.NoScrubData)); " is 209.
Long Statement,ManagedLzma.SevenZip,ArchivedAttributesExtensions,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\ArchivedAttributes.cs,CheckArchivedAttributesConsistency,The length of the statement  "	System.Diagnostics.Debug.Assert (InvalidAttributes == ~(VisibleAttributes | DirectoryAttribute | ToleratedAttributes | StrippedAttributes | ForbiddenAttributes)); " is 162.
Long Statement,ManagedLzma.SevenZip.Reader,ArchiveMetadataReader,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\ArchiveMetadataReader.cs,CheckFileHeader,The length of the statement  "	return ReadFileHeader (stream' stream.CanSeek ? stream.Length : Int64.MaxValue' out major' out minor' out offset' out length' out checksum) == null; " is 148.
Long Statement,ManagedLzma.SevenZip.Reader,ArchiveMetadataReader,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\ArchiveMetadataReader.cs,GetInt32,The length of the statement  "	return (int)buffer [offset] | ((int)buffer [offset + 1] << 8) | ((int)buffer [offset + 2] << 16) | ((int)buffer [offset + 3] << 24); " is 132.
Long Statement,ManagedLzma.SevenZip.Reader,ArchiveMetadataReader,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\ArchiveMetadataReader.cs,GetInt64,The length of the statement  "	return (long)buffer [offset] | ((long)buffer [offset + 1] << 8) | ((long)buffer [offset + 2] << 16) | ((long)buffer [offset + 3] << 24) | ((long)buffer [offset + 4] << 32) | ((long)buffer [offset + 5] << 40) | ((long)buffer [offset + 6] << 48) | ((long)buffer [offset + 7] << 56); " is 280.
Long Statement,ManagedLzma.SevenZip.Reader,ArchiveMetadataReader,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\ArchiveMetadataReader.cs,ReadMetadataCore,The length of the statement  "		var exception = ReadFileHeader (mStream' mStreamLength' out mMajorVersion' out mMinorVersion' out mMetadataOffset' out mMetadataLength' out mMetadataChecksum); " is 159.
Long Statement,ManagedLzma.SevenZip.Reader,ArchiveMetadataReader,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\ArchiveMetadataReader.cs,ReadMetadataCore,The length of the statement  "		using (var metadataStream = new ConstrainedReadStream (mStream' ArchiveMetadataFormat.kHeaderLength + mMetadataOffset' mMetadataLength)) " is 136.
Long Statement,ManagedLzma.SevenZip.Reader,ArchiveMetadataReader,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\ArchiveMetadataReader.cs,ReadMetadata,The length of the statement  "					decoderListBuilder.Add (new DecoderMetadata (decoder.Method' decoder.Settings' decoder.InputInfo.MoveToImmutable ()' decoder.OutputInfo.MoveToImmutable ())); " is 157.
Long Statement,ManagedLzma.SevenZip.Reader,ArchiveMetadataReader,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\ArchiveMetadataReader.cs,ReadMetadata,The length of the statement  "				sectionListBuilder.Add (new ArchiveDecoderSection (decoderListBuilder.MoveToImmutable ()' section.OutputStream' section.OutputLength' section.OutputChecksum' section.Subsections.ToImmutableArray ())); " is 200.
Long Statement,ManagedLzma.SevenZip.Reader,ArchiveMetadataReader,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\ArchiveMetadataReader.cs,ReadSection,The length of the statement  "		section.Decoders [inputDecoderIndex].InputInfo [inputIndex] = new DecoderInputMetadata (outputDecoderIndex' outputIndex); " is 121.
Long Statement,ManagedLzma.SevenZip.Reader,AesArchiveDecoder,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\AesDecoder.cs,Initialize,The length of the statement  "	// The 7z AES encoder/decoder classes do not perform padding' instead they require the input stream to provide a multiple of 16 bytes. " is 134.
Long Statement,ManagedLzma.SevenZip.Reader,AesArchiveDecoder,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\AesDecoder.cs,Initialize,The length of the statement  "	// If the exception below is thrown this means the 7z file is either corrupt or a newer 7z version has been published and we haven't updated yet. " is 145.
Long Statement,ManagedLzma.SevenZip.Reader,Lzma2ArchiveDecoder,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\Lzma2Decoder.cs,EnsureOutputData,The length of the statement  "		var written = mDecoder.Decode (mBuffer' mOffset' mEnding - mOffset' (int)Math.Min (Int32.MaxValue' mLength - mPosition)' false); " is 128.
Long Statement,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,Ppmd7_GetBinSumm,The length of the statement  "	p.BinSumm [Ppmd7Context_OneState (p.MinContext)->Freq - 1] [p.PrevSuccess + p.NS2BSIndx [Ppmd7_GetContext (p' p.MinContext->Suffix)->NumStats - 1] + (p.HiBitsFlag = p.HB2Flag [p.FoundState->Symbol]) + 2 * p.HB2Flag [Ppmd7Context_OneState (p.MinContext)->Symbol] + ((p.RunLength >> 26) & 0x20)]; " is 294.
Long Statement,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,UpdateModel,The length of the statement  "			c->SummFreq = (ushort)(c->SummFreq + (2 * ns1 < ns ? 1u : 0u) + 2 * ((4 * ns1 <= ns ? 1u : 0u) & (c->SummFreq <= 8 * ns1 ? 1u : 0u))); " is 134.
Long Statement,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,Ppmd7_MakeEscFreq,The length of the statement  "		see = p.See [p.NS2Indx [nonMasked - 1]] + (nonMasked < (uint)SUFFIX (p' p.MinContext)->NumStats - p.MinContext->NumStats ? 1 : 0) + 2 * (p.MinContext->SummFreq < 11 * p.MinContext->NumStats ? 1 : 0) + 4 * (numMasked > nonMasked ? 1 : 0) + p.HiBitsFlag; " is 252.
Long Statement,ManagedLzma.SevenZip.FileModel,ArchiveFileModelMetadataReader,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\ArchiveFileModel.cs,ReadMetadata,The length of the statement  "		return new ArchiveFileModel (metadata' BuildFolder (mRootFolder)' mSectionMap.MoveToImmutable ()' finalStreamMap.ToImmutable ()); " is 129.
Long Statement,ManagedLzma.SevenZip.Writer,ArchiveWriter,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\ArchiveWriter.cs,WriteMetadata,The length of the statement  "	// TODO: we'll probably also want to have a scratch buffer to assembly vectors with no allocation overhead and in a single iteration " is 132.
Long Statement,ManagedLzma.SevenZip.Writer,ArchiveWriter,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\ArchiveWriter.cs,WriteMetadata,The length of the statement  "	//       (a scratch buffer allows to record the vector in a single iteration and if it was unnecessary it doesn't need to be forwarded to the actual stream) " is 156.
Long Statement,ManagedLzma.SevenZip.Writer,ArchiveWriter,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\ArchiveWriter.cs,WriteMetadata,The length of the statement  "				WriteBitVectorWithHeader (ArchiveMetadataToken.EmptyStream' Enumerable.Range (0' metadataCount).Select (x => !metadata.HasStream (x))' metadataCount); " is 150.
Long Statement,ManagedLzma.SevenZip.Writer,ArchiveWriter,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\ArchiveWriter.cs,WriteMetadata,The length of the statement  "					WriteBitVectorWithHeader (ArchiveMetadataToken.EmptyFile' Enumerable.Range (0' metadataCount).Where (x => !metadata.HasStream (x)).Select (x => !metadata.IsDirectory (x))' emptyStreamCount); " is 190.
Long Statement,ManagedLzma.SevenZip.Writer,ArchiveWriter,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\ArchiveWriter.cs,WriteMetadata,The length of the statement  "					WriteBitVectorWithHeader (ArchiveMetadataToken.Anti' Enumerable.Range (0' metadataCount).Where (x => !metadata.HasStream (x)).Select (x => metadata.IsDeleted (x))' emptyStreamCount); " is 182.
Long Statement,ManagedLzma.SevenZip.Writer,ArchiveWriter,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\ArchiveWriter.cs,WriteMetadata,The length of the statement  "		WriteDateVector (Enumerable.Range (0' metadataCount).Select (x => metadata.GetCreationDate (x))' ArchiveMetadataToken.CTime); " is 125.
Long Statement,ManagedLzma.SevenZip.Writer,ArchiveWriter,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\ArchiveWriter.cs,WriteMetadata,The length of the statement  "		WriteDateVector (Enumerable.Range (0' metadataCount).Select (x => metadata.GetLastAccessDate (x))' ArchiveMetadataToken.ATime); " is 127.
Long Statement,ManagedLzma.SevenZip.Writer,ArchiveWriter,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\ArchiveWriter.cs,WriteMetadata,The length of the statement  "		WriteDateVector (Enumerable.Range (0' metadataCount).Select (x => metadata.GetLastWriteDate (x))' ArchiveMetadataToken.MTime); " is 126.
Long Statement,ManagedLzma.SevenZip.Writer,ArchiveWriter,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\ArchiveWriter.cs,WritePackInfo,The length of the statement  "			System.Diagnostics.Debug.Assert (mFileSections [i].Offset == mFileSections [i - 1].Offset + mFileSections [i - 1].Length); " is 122.
Long Statement,ManagedLzma.SevenZip.Writer,ArchiveMetadataRecorder,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\ArchiveWriter.cs,CheckDate,The length of the statement  "				throw new InvalidOperationException ("You did not specify how to treat DateTime values which do not provide their own DateTimeKind."); " is 134.
Long Statement,ManagedLzma.SevenZip.Writer,ArchiveMetadataRecorder,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\ArchiveWriter.cs,AppendFile,The length of the statement  "	// TODO: replicate the checks when the metadata is queried from the provider (in particular don't forget to check that timestamps are UTC) " is 138.
Long Statement,ManagedLzma.SevenZip.Writer,ArchiveMetadataRecorder,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\ArchiveWriter.cs,AppendDirectory,The length of the statement  "	// TODO: check attributes and reject invalid ones (replicate the check when writing the attributes so other metadata providers get the check too) " is 145.
Long Statement,ManagedLzma.SevenZip.Writer,EncoderDefinition,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Encoders\Definition.cs,CreateEncoderSession,The length of the statement  "		throw new ArgumentException ("Number of provided storage streams does not match number of declared storage streams."' nameof (storage)); " is 136.
Long Statement,ManagedLzma.SevenZip.Writer,EncoderConnection,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Encoders\Runtime.cs,TransferLoop,The length of the statement  "			var fetched = await mEncoderOutputToConnectionInput.ReadAsync (buffer' ending' buffer.Length - ending' StreamMode.Partial).ConfigureAwait (false); " is 146.
Long Statement,ManagedLzma.SevenZip.Writer,EncoderConnection,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Encoders\Runtime.cs,TransferLoop,The length of the statement  "			var written = await mConnectionOutputToEncoderInput.WriteAsync (buffer' offset' ending - offset' StreamMode.Partial).ConfigureAwait (false); " is 140.
Long Statement,ManagedLzma.SevenZip.Writer,EncoderSession,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Encoders\Runtime.cs,Complete,The length of the statement  "		decoders.Add (new DecoderMetadata (decoderType' settings.SerializeSettings ()' decoderInputs.MoveToImmutable ()' decoderOutputs.MoveToImmutable ())); " is 149.
Long Statement,ManagedLzma.SevenZip.Writer,EncoderSession,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Encoders\Runtime.cs,Complete,The length of the statement  "	var definition = new ArchiveDecoderSection (decoders.MoveToImmutable ()' new DecoderInputMetadata (inputSource.Node.Index' inputSource.Index)' mInput.GetFinalLength ()' mInput.GetFinalChecksum ()' mContent.ToImmutable ()); " is 222.
Long Statement,ManagedLzma,CRC,D:\newReposJune17\weltkante_managed-lzma\shared\Utilities\CRC.cs,Update,The length of the statement  "	return kTable [0x300 + (crc & 0xFF)] ^ kTable [0x200 + ((crc >> 8) & 0xFF)] ^ kTable [0x100 + ((crc >> 16) & 0xFF)] ^ kTable [0x000 + (crc >> 24)]; " is 147.
Long Statement,ManagedLzma,PasswordStorage,D:\newReposJune17\weltkante_managed-lzma\shared\Utilities\Password.cs,GetPassword,The length of the statement  "			// Must do a second check because if a dispose happened while the array was cloned it may have been partially zeroed out. " is 121.
Long Statement,ManagedLzma,PasswordStorage,D:\newReposJune17\weltkante_managed-lzma\shared\Utilities\Password.cs,GetPassword,The length of the statement  "		// If an exception happens before we can return the accessor to the caller we need to clear potential copies of the password. " is 125.
Long Statement,ManagedLzma,AsyncTaskCompletionSource,D:\newReposJune17\weltkante_managed-lzma\shared\Utilities\Utilities.cs,Create,The length of the statement  "	return new AsyncTaskCompletionSource<T> (new TaskCompletionSource<T> (TaskCreationOptions.RunContinuationsAsynchronously)); " is 123.
Virtual Method Call from Constructor,ManagedLzma.SevenZip.Reader,ArchiveSectionDecoder,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\ArchiveDecoder.cs,ArchiveSectionDecoder,The constructor "ArchiveSectionDecoder" calls a virtual method "SetInputStream".
Empty Catch Block,ManagedLzma.SevenZip.Writer,Lzma2EncoderNode,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Encoders\Lzma2Encoder.cs,Dispose,The method has an empty catch block.
Empty Catch Block,ManagedLzma.SevenZip.Writer,LzmaEncoderNode,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Encoders\LzmaEncoder.cs,Dispose,The method has an empty catch block.
Magic Number,ManagedLzma.LZMA.Master,LZMA,D:\newReposJune17\weltkante_managed-lzma\shared\Compression\Implementation\Core.cs,MatchFinder_CreateVTable,The following statement contains a magic number: if (!p.mBtMode)  	vTable = new MatchFinderHc4 ();  else if (p.mNumHashBytes == 2)  	vTable = new MatchFinderBt2 ();  else if (p.mNumHashBytes == 3)  	vTable = new MatchFinderBt3 ();  else  	vTable = new MatchFinderBt4 ();  
Magic Number,ManagedLzma.LZMA.Master,LZMA,D:\newReposJune17\weltkante_managed-lzma\shared\Compression\Implementation\Core.cs,MatchFinder_CreateVTable,The following statement contains a magic number: if (!p.mBtMode)  	vTable = new MatchFinderHc4 ();  else if (p.mNumHashBytes == 2)  	vTable = new MatchFinderBt2 ();  else if (p.mNumHashBytes == 3)  	vTable = new MatchFinderBt3 ();  else  	vTable = new MatchFinderBt4 ();  
Magic Number,ManagedLzma.LZMA.Master,LZMA,D:\newReposJune17\weltkante_managed-lzma\shared\Compression\Implementation\Core.cs,MatchFinder_CreateVTable,The following statement contains a magic number: if (p.mNumHashBytes == 2)  	vTable = new MatchFinderBt2 ();  else if (p.mNumHashBytes == 3)  	vTable = new MatchFinderBt3 ();  else  	vTable = new MatchFinderBt4 ();  
Magic Number,ManagedLzma.LZMA.Master,LZMA,D:\newReposJune17\weltkante_managed-lzma\shared\Compression\Implementation\Core.cs,MatchFinder_CreateVTable,The following statement contains a magic number: if (p.mNumHashBytes == 2)  	vTable = new MatchFinderBt2 ();  else if (p.mNumHashBytes == 3)  	vTable = new MatchFinderBt3 ();  else  	vTable = new MatchFinderBt4 ();  
Magic Number,ManagedLzma.LZMA.Master,LZMA,D:\newReposJune17\weltkante_managed-lzma\shared\Compression\Implementation\Core.cs,MatchFinder_CreateVTable,The following statement contains a magic number: if (p.mNumHashBytes == 3)  	vTable = new MatchFinderBt3 ();  else  	vTable = new MatchFinderBt4 ();  
Magic Number,ManagedLzma.LZMA.Master,CRCUtils,D:\newReposJune17\weltkante_managed-lzma\shared\Compression\Implementation\CRC.cs,CRCUtils,The following statement contains a magic number: mTable = new uint[256];  
Magic Number,ManagedLzma.LZMA.Master,CRCUtils,D:\newReposJune17\weltkante_managed-lzma\shared\Compression\Implementation\CRC.cs,CRCUtils,The following statement contains a magic number: for (uint i = 0; i < 256; i++) {  	uint r = i;  	for (int j = 0; j < 8; j++)  		r = (r >> 1) ^ (kCrcPoly & ~((r & 1) - 1));  	mTable [i] = r;  }  
Magic Number,ManagedLzma.LZMA.Master,CRCUtils,D:\newReposJune17\weltkante_managed-lzma\shared\Compression\Implementation\CRC.cs,CRCUtils,The following statement contains a magic number: for (uint i = 0; i < 256; i++) {  	uint r = i;  	for (int j = 0; j < 8; j++)  		r = (r >> 1) ^ (kCrcPoly & ~((r & 1) - 1));  	mTable [i] = r;  }  
Magic Number,ManagedLzma.LZMA.Master,CRCUtils,D:\newReposJune17\weltkante_managed-lzma\shared\Compression\Implementation\CRC.cs,CRCUtils,The following statement contains a magic number: for (int j = 0; j < 8; j++)  	r = (r >> 1) ^ (kCrcPoly & ~((r & 1) - 1));  
Magic Number,ManagedLzma.LZMA,DecoderSettings,D:\newReposJune17\weltkante_managed-lzma\shared\Compression\Lzma\DecoderSettings.cs,ReadFrom,The following statement contains a magic number: bt /= 9;  
Magic Number,ManagedLzma.LZMA,DecoderSettings,D:\newReposJune17\weltkante_managed-lzma\shared\Compression\Lzma\DecoderSettings.cs,ReadFrom,The following statement contains a magic number: dictSize |= (uint)data [offset + 2] << 8;  
Magic Number,ManagedLzma.LZMA,DecoderSettings,D:\newReposJune17\weltkante_managed-lzma\shared\Compression\Lzma\DecoderSettings.cs,ReadFrom,The following statement contains a magic number: dictSize |= (uint)data [offset + 2] << 8;  
Magic Number,ManagedLzma.LZMA,DecoderSettings,D:\newReposJune17\weltkante_managed-lzma\shared\Compression\Lzma\DecoderSettings.cs,ReadFrom,The following statement contains a magic number: dictSize |= (uint)data [offset + 3] << 16;  
Magic Number,ManagedLzma.LZMA,DecoderSettings,D:\newReposJune17\weltkante_managed-lzma\shared\Compression\Lzma\DecoderSettings.cs,ReadFrom,The following statement contains a magic number: dictSize |= (uint)data [offset + 3] << 16;  
Magic Number,ManagedLzma.LZMA,DecoderSettings,D:\newReposJune17\weltkante_managed-lzma\shared\Compression\Lzma\DecoderSettings.cs,ReadFrom,The following statement contains a magic number: dictSize |= (uint)data [offset + 4] << 24;  
Magic Number,ManagedLzma.LZMA,DecoderSettings,D:\newReposJune17\weltkante_managed-lzma\shared\Compression\Lzma\DecoderSettings.cs,ReadFrom,The following statement contains a magic number: dictSize |= (uint)data [offset + 4] << 24;  
Magic Number,ManagedLzma.LZMA,DecoderSettings,D:\newReposJune17\weltkante_managed-lzma\shared\Compression\Lzma\DecoderSettings.cs,DecoderSettings,The following statement contains a magic number: if ((mLC = lc) > 8)  	throw new ArgumentOutOfRangeException (nameof (lc));  
Magic Number,ManagedLzma.LZMA,DecoderSettings,D:\newReposJune17\weltkante_managed-lzma\shared\Compression\Lzma\DecoderSettings.cs,DecoderSettings,The following statement contains a magic number: if ((mPB = pb) > 4)  	throw new ArgumentOutOfRangeException (nameof (pb));  
Magic Number,ManagedLzma.LZMA,DecoderSettings,D:\newReposJune17\weltkante_managed-lzma\shared\Compression\Lzma\DecoderSettings.cs,DecoderSettings,The following statement contains a magic number: if ((mLP = lp) > 4)  	throw new ArgumentOutOfRangeException (nameof (lp));  
Magic Number,ManagedLzma.LZMA,DecoderSettings,D:\newReposJune17\weltkante_managed-lzma\shared\Compression\Lzma\DecoderSettings.cs,WriteTo,The following statement contains a magic number: buffer [offset] = (byte)((mPB * 5 + mLP) * 9 + mLC);  
Magic Number,ManagedLzma.LZMA,DecoderSettings,D:\newReposJune17\weltkante_managed-lzma\shared\Compression\Lzma\DecoderSettings.cs,WriteTo,The following statement contains a magic number: buffer [offset] = (byte)((mPB * 5 + mLP) * 9 + mLC);  
Magic Number,ManagedLzma.LZMA,DecoderSettings,D:\newReposJune17\weltkante_managed-lzma\shared\Compression\Lzma\DecoderSettings.cs,WriteTo,The following statement contains a magic number: buffer [offset + 2] = (byte)(mDictSize >> 8);  
Magic Number,ManagedLzma.LZMA,DecoderSettings,D:\newReposJune17\weltkante_managed-lzma\shared\Compression\Lzma\DecoderSettings.cs,WriteTo,The following statement contains a magic number: buffer [offset + 2] = (byte)(mDictSize >> 8);  
Magic Number,ManagedLzma.LZMA,DecoderSettings,D:\newReposJune17\weltkante_managed-lzma\shared\Compression\Lzma\DecoderSettings.cs,WriteTo,The following statement contains a magic number: buffer [offset + 3] = (byte)(mDictSize >> 16);  
Magic Number,ManagedLzma.LZMA,DecoderSettings,D:\newReposJune17\weltkante_managed-lzma\shared\Compression\Lzma\DecoderSettings.cs,WriteTo,The following statement contains a magic number: buffer [offset + 3] = (byte)(mDictSize >> 16);  
Magic Number,ManagedLzma.LZMA,DecoderSettings,D:\newReposJune17\weltkante_managed-lzma\shared\Compression\Lzma\DecoderSettings.cs,WriteTo,The following statement contains a magic number: buffer [offset + 4] = (byte)(mDictSize >> 24);  
Magic Number,ManagedLzma.LZMA,DecoderSettings,D:\newReposJune17\weltkante_managed-lzma\shared\Compression\Lzma\DecoderSettings.cs,WriteTo,The following statement contains a magic number: buffer [offset + 4] = (byte)(mDictSize >> 24);  
Magic Number,ManagedLzma.LZMA,EncoderSettings,D:\newReposJune17\weltkante_managed-lzma\shared\Compression\Lzma\EncoderSettings.cs,EncoderSettings,The following statement contains a magic number: SetLevel (5);  
Magic Number,ManagedLzma.LZMA,EncoderSettings,D:\newReposJune17\weltkante_managed-lzma\shared\Compression\Lzma\EncoderSettings.cs,SetLevel,The following statement contains a magic number: if (level < 0 || level > 9)  	throw new ArgumentOutOfRangeException (nameof (level));  
Magic Number,ManagedLzma.LZMA,EncoderSettings,D:\newReposJune17\weltkante_managed-lzma\shared\Compression\Lzma\EncoderSettings.cs,SetLevel,The following statement contains a magic number: if (level <= 5)  	mDictionarySize = (1 << (level * 2 + 14));  else if (level == 6)  	mDictionarySize = (1 << 25);  else  	mDictionarySize = (1 << 26);  
Magic Number,ManagedLzma.LZMA,EncoderSettings,D:\newReposJune17\weltkante_managed-lzma\shared\Compression\Lzma\EncoderSettings.cs,SetLevel,The following statement contains a magic number: if (level <= 5)  	mDictionarySize = (1 << (level * 2 + 14));  else if (level == 6)  	mDictionarySize = (1 << 25);  else  	mDictionarySize = (1 << 26);  
Magic Number,ManagedLzma.LZMA,EncoderSettings,D:\newReposJune17\weltkante_managed-lzma\shared\Compression\Lzma\EncoderSettings.cs,SetLevel,The following statement contains a magic number: if (level <= 5)  	mDictionarySize = (1 << (level * 2 + 14));  else if (level == 6)  	mDictionarySize = (1 << 25);  else  	mDictionarySize = (1 << 26);  
Magic Number,ManagedLzma.LZMA,EncoderSettings,D:\newReposJune17\weltkante_managed-lzma\shared\Compression\Lzma\EncoderSettings.cs,SetLevel,The following statement contains a magic number: if (level <= 5)  	mDictionarySize = (1 << (level * 2 + 14));  else if (level == 6)  	mDictionarySize = (1 << 25);  else  	mDictionarySize = (1 << 26);  
Magic Number,ManagedLzma.LZMA,EncoderSettings,D:\newReposJune17\weltkante_managed-lzma\shared\Compression\Lzma\EncoderSettings.cs,SetLevel,The following statement contains a magic number: if (level <= 5)  	mDictionarySize = (1 << (level * 2 + 14));  else if (level == 6)  	mDictionarySize = (1 << 25);  else  	mDictionarySize = (1 << 26);  
Magic Number,ManagedLzma.LZMA,EncoderSettings,D:\newReposJune17\weltkante_managed-lzma\shared\Compression\Lzma\EncoderSettings.cs,SetLevel,The following statement contains a magic number: if (level <= 5)  	mDictionarySize = (1 << (level * 2 + 14));  else if (level == 6)  	mDictionarySize = (1 << 25);  else  	mDictionarySize = (1 << 26);  
Magic Number,ManagedLzma.LZMA,EncoderSettings,D:\newReposJune17\weltkante_managed-lzma\shared\Compression\Lzma\EncoderSettings.cs,SetLevel,The following statement contains a magic number: mDictionarySize = (1 << (level * 2 + 14));  
Magic Number,ManagedLzma.LZMA,EncoderSettings,D:\newReposJune17\weltkante_managed-lzma\shared\Compression\Lzma\EncoderSettings.cs,SetLevel,The following statement contains a magic number: mDictionarySize = (1 << (level * 2 + 14));  
Magic Number,ManagedLzma.LZMA,EncoderSettings,D:\newReposJune17\weltkante_managed-lzma\shared\Compression\Lzma\EncoderSettings.cs,SetLevel,The following statement contains a magic number: if (level == 6)  	mDictionarySize = (1 << 25);  else  	mDictionarySize = (1 << 26);  
Magic Number,ManagedLzma.LZMA,EncoderSettings,D:\newReposJune17\weltkante_managed-lzma\shared\Compression\Lzma\EncoderSettings.cs,SetLevel,The following statement contains a magic number: if (level == 6)  	mDictionarySize = (1 << 25);  else  	mDictionarySize = (1 << 26);  
Magic Number,ManagedLzma.LZMA,EncoderSettings,D:\newReposJune17\weltkante_managed-lzma\shared\Compression\Lzma\EncoderSettings.cs,SetLevel,The following statement contains a magic number: if (level == 6)  	mDictionarySize = (1 << 25);  else  	mDictionarySize = (1 << 26);  
Magic Number,ManagedLzma.LZMA,EncoderSettings,D:\newReposJune17\weltkante_managed-lzma\shared\Compression\Lzma\EncoderSettings.cs,SetLevel,The following statement contains a magic number: mDictionarySize = (1 << 25);  
Magic Number,ManagedLzma.LZMA,EncoderSettings,D:\newReposJune17\weltkante_managed-lzma\shared\Compression\Lzma\EncoderSettings.cs,SetLevel,The following statement contains a magic number: mDictionarySize = (1 << 26);  
Magic Number,ManagedLzma.LZMA,EncoderSettings,D:\newReposJune17\weltkante_managed-lzma\shared\Compression\Lzma\EncoderSettings.cs,SetLevel,The following statement contains a magic number: mLC = 3;  
Magic Number,ManagedLzma.LZMA,EncoderSettings,D:\newReposJune17\weltkante_managed-lzma\shared\Compression\Lzma\EncoderSettings.cs,SetLevel,The following statement contains a magic number: mPB = 2;  
Magic Number,ManagedLzma.LZMA,EncoderSettings,D:\newReposJune17\weltkante_managed-lzma\shared\Compression\Lzma\EncoderSettings.cs,SetLevel,The following statement contains a magic number: mFastMode = (level <= 4);  
Magic Number,ManagedLzma.LZMA,EncoderSettings,D:\newReposJune17\weltkante_managed-lzma\shared\Compression\Lzma\EncoderSettings.cs,SetLevel,The following statement contains a magic number: mFB = (level <= 6) ? 32 : 64;  
Magic Number,ManagedLzma.LZMA,EncoderSettings,D:\newReposJune17\weltkante_managed-lzma\shared\Compression\Lzma\EncoderSettings.cs,SetLevel,The following statement contains a magic number: mFB = (level <= 6) ? 32 : 64;  
Magic Number,ManagedLzma.LZMA,EncoderSettings,D:\newReposJune17\weltkante_managed-lzma\shared\Compression\Lzma\EncoderSettings.cs,SetLevel,The following statement contains a magic number: mFB = (level <= 6) ? 32 : 64;  
Magic Number,ManagedLzma.LZMA,EncoderSettings,D:\newReposJune17\weltkante_managed-lzma\shared\Compression\Lzma\EncoderSettings.cs,SetLevel,The following statement contains a magic number: mHashBytes = 4;  
Magic Number,ManagedLzma.LZMA,EncoderSettings,D:\newReposJune17\weltkante_managed-lzma\shared\Compression\Lzma\EncoderSettings.cs,SetLevel,The following statement contains a magic number: if (level <= 4)  	mMC = 16;  else if (level <= 6)  	mMC = 32;  else  	mMC = 48;  
Magic Number,ManagedLzma.LZMA,EncoderSettings,D:\newReposJune17\weltkante_managed-lzma\shared\Compression\Lzma\EncoderSettings.cs,SetLevel,The following statement contains a magic number: if (level <= 4)  	mMC = 16;  else if (level <= 6)  	mMC = 32;  else  	mMC = 48;  
Magic Number,ManagedLzma.LZMA,EncoderSettings,D:\newReposJune17\weltkante_managed-lzma\shared\Compression\Lzma\EncoderSettings.cs,SetLevel,The following statement contains a magic number: if (level <= 4)  	mMC = 16;  else if (level <= 6)  	mMC = 32;  else  	mMC = 48;  
Magic Number,ManagedLzma.LZMA,EncoderSettings,D:\newReposJune17\weltkante_managed-lzma\shared\Compression\Lzma\EncoderSettings.cs,SetLevel,The following statement contains a magic number: if (level <= 4)  	mMC = 16;  else if (level <= 6)  	mMC = 32;  else  	mMC = 48;  
Magic Number,ManagedLzma.LZMA,EncoderSettings,D:\newReposJune17\weltkante_managed-lzma\shared\Compression\Lzma\EncoderSettings.cs,SetLevel,The following statement contains a magic number: if (level <= 4)  	mMC = 16;  else if (level <= 6)  	mMC = 32;  else  	mMC = 48;  
Magic Number,ManagedLzma.LZMA,EncoderSettings,D:\newReposJune17\weltkante_managed-lzma\shared\Compression\Lzma\EncoderSettings.cs,SetLevel,The following statement contains a magic number: mMC = 16;  
Magic Number,ManagedLzma.LZMA,EncoderSettings,D:\newReposJune17\weltkante_managed-lzma\shared\Compression\Lzma\EncoderSettings.cs,SetLevel,The following statement contains a magic number: if (level <= 6)  	mMC = 32;  else  	mMC = 48;  
Magic Number,ManagedLzma.LZMA,EncoderSettings,D:\newReposJune17\weltkante_managed-lzma\shared\Compression\Lzma\EncoderSettings.cs,SetLevel,The following statement contains a magic number: if (level <= 6)  	mMC = 32;  else  	mMC = 48;  
Magic Number,ManagedLzma.LZMA,EncoderSettings,D:\newReposJune17\weltkante_managed-lzma\shared\Compression\Lzma\EncoderSettings.cs,SetLevel,The following statement contains a magic number: if (level <= 6)  	mMC = 32;  else  	mMC = 48;  
Magic Number,ManagedLzma.LZMA,EncoderSettings,D:\newReposJune17\weltkante_managed-lzma\shared\Compression\Lzma\EncoderSettings.cs,SetLevel,The following statement contains a magic number: mMC = 32;  
Magic Number,ManagedLzma.LZMA,EncoderSettings,D:\newReposJune17\weltkante_managed-lzma\shared\Compression\Lzma\EncoderSettings.cs,SetLevel,The following statement contains a magic number: mMC = 48;  
Magic Number,ManagedLzma.LZMA,EncoderSettings,D:\newReposJune17\weltkante_managed-lzma\shared\Compression\Lzma\EncoderSettings.cs,GetInternalSettings,The following statement contains a magic number: settings.mNumThreads = mMultiThreaded ? 2 : 1;  
Magic Number,ManagedLzma.LZMA,EncoderSettings,D:\newReposJune17\weltkante_managed-lzma\shared\Compression\Lzma\EncoderSettings.cs,LzmaEnc_WriteProperties,The following statement contains a magic number: props.Add ((byte)((settings.mPB * 5 + settings.mLP) * 9 + settings.mLC));  
Magic Number,ManagedLzma.LZMA,EncoderSettings,D:\newReposJune17\weltkante_managed-lzma\shared\Compression\Lzma\EncoderSettings.cs,LzmaEnc_WriteProperties,The following statement contains a magic number: props.Add ((byte)((settings.mPB * 5 + settings.mLP) * 9 + settings.mLC));  
Magic Number,ManagedLzma.LZMA,EncoderSettings,D:\newReposJune17\weltkante_managed-lzma\shared\Compression\Lzma\EncoderSettings.cs,LzmaEnc_WriteProperties,The following statement contains a magic number: for (int i = 11; i <= 30; i++) {  	if (dictSize <= (2u << i)) {  		dictSize = (2u << i);  		break;  	}  	if (dictSize <= (3u << i)) {  		dictSize = (3u << i);  		break;  	}  }  
Magic Number,ManagedLzma.LZMA,EncoderSettings,D:\newReposJune17\weltkante_managed-lzma\shared\Compression\Lzma\EncoderSettings.cs,LzmaEnc_WriteProperties,The following statement contains a magic number: for (int i = 11; i <= 30; i++) {  	if (dictSize <= (2u << i)) {  		dictSize = (2u << i);  		break;  	}  	if (dictSize <= (3u << i)) {  		dictSize = (3u << i);  		break;  	}  }  
Magic Number,ManagedLzma.LZMA,EncoderSettings,D:\newReposJune17\weltkante_managed-lzma\shared\Compression\Lzma\EncoderSettings.cs,LzmaEnc_WriteProperties,The following statement contains a magic number: for (int i = 0; i < 4; i++)  	props.Add ((byte)(dictSize >> (8 * i)));  
Magic Number,ManagedLzma.LZMA,EncoderSettings,D:\newReposJune17\weltkante_managed-lzma\shared\Compression\Lzma\EncoderSettings.cs,LzmaEnc_WriteProperties,The following statement contains a magic number: for (int i = 0; i < 4; i++)  	props.Add ((byte)(dictSize >> (8 * i)));  
Magic Number,ManagedLzma.LZMA,EncoderSettings,D:\newReposJune17\weltkante_managed-lzma\shared\Compression\Lzma\EncoderSettings.cs,LzmaEnc_WriteProperties,The following statement contains a magic number: props.Add ((byte)(dictSize >> (8 * i)));  
Magic Number,ManagedLzma.SevenZip.Reader,ArchiveMetadataReader,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\ArchiveMetadataReader.cs,ReadFileHeader,The following statement contains a magic number: for (int i = 0; i < 6; i++)  	if (header [i] != ArchiveMetadataFormat.kFileSignature [i])  		return new InvalidDataException ("File is not a 7z archive.");  
Magic Number,ManagedLzma.SevenZip.Reader,ArchiveMetadataReader,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\ArchiveMetadataReader.cs,ReadFileHeader,The following statement contains a magic number: mMajorVersion = header [6];  
Magic Number,ManagedLzma.SevenZip.Reader,ArchiveMetadataReader,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\ArchiveMetadataReader.cs,ReadFileHeader,The following statement contains a magic number: mMinorVersion = header [7];  
Magic Number,ManagedLzma.SevenZip.Reader,ArchiveMetadataReader,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\ArchiveMetadataReader.cs,ReadFileHeader,The following statement contains a magic number: mMetadataOffset = GetInt64 (header' 12);  
Magic Number,ManagedLzma.SevenZip.Reader,ArchiveMetadataReader,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\ArchiveMetadataReader.cs,ReadFileHeader,The following statement contains a magic number: mMetadataLength = GetInt64 (header' 20);  
Magic Number,ManagedLzma.SevenZip.Reader,ArchiveMetadataReader,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\ArchiveMetadataReader.cs,ReadFileHeader,The following statement contains a magic number: mMetadataChecksum = new Checksum (GetInt32 (header' 28));  
Magic Number,ManagedLzma.SevenZip.Reader,ArchiveMetadataReader,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\ArchiveMetadataReader.cs,ReadFileHeader,The following statement contains a magic number: if ((int)crc != GetInt32 (header' 8))  	return new InvalidDataException ("Invalid header checksum.");  
Magic Number,ManagedLzma.SevenZip.Reader,ArchiveMetadataReader,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\ArchiveMetadataReader.cs,GetInt32,The following statement contains a magic number: return (int)buffer [offset] | ((int)buffer [offset + 1] << 8) | ((int)buffer [offset + 2] << 16) | ((int)buffer [offset + 3] << 24);  
Magic Number,ManagedLzma.SevenZip.Reader,ArchiveMetadataReader,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\ArchiveMetadataReader.cs,GetInt32,The following statement contains a magic number: return (int)buffer [offset] | ((int)buffer [offset + 1] << 8) | ((int)buffer [offset + 2] << 16) | ((int)buffer [offset + 3] << 24);  
Magic Number,ManagedLzma.SevenZip.Reader,ArchiveMetadataReader,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\ArchiveMetadataReader.cs,GetInt32,The following statement contains a magic number: return (int)buffer [offset] | ((int)buffer [offset + 1] << 8) | ((int)buffer [offset + 2] << 16) | ((int)buffer [offset + 3] << 24);  
Magic Number,ManagedLzma.SevenZip.Reader,ArchiveMetadataReader,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\ArchiveMetadataReader.cs,GetInt32,The following statement contains a magic number: return (int)buffer [offset] | ((int)buffer [offset + 1] << 8) | ((int)buffer [offset + 2] << 16) | ((int)buffer [offset + 3] << 24);  
Magic Number,ManagedLzma.SevenZip.Reader,ArchiveMetadataReader,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\ArchiveMetadataReader.cs,GetInt32,The following statement contains a magic number: return (int)buffer [offset] | ((int)buffer [offset + 1] << 8) | ((int)buffer [offset + 2] << 16) | ((int)buffer [offset + 3] << 24);  
Magic Number,ManagedLzma.SevenZip.Reader,ArchiveMetadataReader,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\ArchiveMetadataReader.cs,GetInt64,The following statement contains a magic number: return (long)buffer [offset] | ((long)buffer [offset + 1] << 8) | ((long)buffer [offset + 2] << 16) | ((long)buffer [offset + 3] << 24) | ((long)buffer [offset + 4] << 32) | ((long)buffer [offset + 5] << 40) | ((long)buffer [offset + 6] << 48) | ((long)buffer [offset + 7] << 56);  
Magic Number,ManagedLzma.SevenZip.Reader,ArchiveMetadataReader,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\ArchiveMetadataReader.cs,GetInt64,The following statement contains a magic number: return (long)buffer [offset] | ((long)buffer [offset + 1] << 8) | ((long)buffer [offset + 2] << 16) | ((long)buffer [offset + 3] << 24) | ((long)buffer [offset + 4] << 32) | ((long)buffer [offset + 5] << 40) | ((long)buffer [offset + 6] << 48) | ((long)buffer [offset + 7] << 56);  
Magic Number,ManagedLzma.SevenZip.Reader,ArchiveMetadataReader,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\ArchiveMetadataReader.cs,GetInt64,The following statement contains a magic number: return (long)buffer [offset] | ((long)buffer [offset + 1] << 8) | ((long)buffer [offset + 2] << 16) | ((long)buffer [offset + 3] << 24) | ((long)buffer [offset + 4] << 32) | ((long)buffer [offset + 5] << 40) | ((long)buffer [offset + 6] << 48) | ((long)buffer [offset + 7] << 56);  
Magic Number,ManagedLzma.SevenZip.Reader,ArchiveMetadataReader,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\ArchiveMetadataReader.cs,GetInt64,The following statement contains a magic number: return (long)buffer [offset] | ((long)buffer [offset + 1] << 8) | ((long)buffer [offset + 2] << 16) | ((long)buffer [offset + 3] << 24) | ((long)buffer [offset + 4] << 32) | ((long)buffer [offset + 5] << 40) | ((long)buffer [offset + 6] << 48) | ((long)buffer [offset + 7] << 56);  
Magic Number,ManagedLzma.SevenZip.Reader,ArchiveMetadataReader,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\ArchiveMetadataReader.cs,GetInt64,The following statement contains a magic number: return (long)buffer [offset] | ((long)buffer [offset + 1] << 8) | ((long)buffer [offset + 2] << 16) | ((long)buffer [offset + 3] << 24) | ((long)buffer [offset + 4] << 32) | ((long)buffer [offset + 5] << 40) | ((long)buffer [offset + 6] << 48) | ((long)buffer [offset + 7] << 56);  
Magic Number,ManagedLzma.SevenZip.Reader,ArchiveMetadataReader,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\ArchiveMetadataReader.cs,GetInt64,The following statement contains a magic number: return (long)buffer [offset] | ((long)buffer [offset + 1] << 8) | ((long)buffer [offset + 2] << 16) | ((long)buffer [offset + 3] << 24) | ((long)buffer [offset + 4] << 32) | ((long)buffer [offset + 5] << 40) | ((long)buffer [offset + 6] << 48) | ((long)buffer [offset + 7] << 56);  
Magic Number,ManagedLzma.SevenZip.Reader,ArchiveMetadataReader,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\ArchiveMetadataReader.cs,GetInt64,The following statement contains a magic number: return (long)buffer [offset] | ((long)buffer [offset + 1] << 8) | ((long)buffer [offset + 2] << 16) | ((long)buffer [offset + 3] << 24) | ((long)buffer [offset + 4] << 32) | ((long)buffer [offset + 5] << 40) | ((long)buffer [offset + 6] << 48) | ((long)buffer [offset + 7] << 56);  
Magic Number,ManagedLzma.SevenZip.Reader,ArchiveMetadataReader,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\ArchiveMetadataReader.cs,GetInt64,The following statement contains a magic number: return (long)buffer [offset] | ((long)buffer [offset + 1] << 8) | ((long)buffer [offset + 2] << 16) | ((long)buffer [offset + 3] << 24) | ((long)buffer [offset + 4] << 32) | ((long)buffer [offset + 5] << 40) | ((long)buffer [offset + 6] << 48) | ((long)buffer [offset + 7] << 56);  
Magic Number,ManagedLzma.SevenZip.Reader,ArchiveMetadataReader,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\ArchiveMetadataReader.cs,GetInt64,The following statement contains a magic number: return (long)buffer [offset] | ((long)buffer [offset + 1] << 8) | ((long)buffer [offset + 2] << 16) | ((long)buffer [offset + 3] << 24) | ((long)buffer [offset + 4] << 32) | ((long)buffer [offset + 5] << 40) | ((long)buffer [offset + 6] << 48) | ((long)buffer [offset + 7] << 56);  
Magic Number,ManagedLzma.SevenZip.Reader,ArchiveMetadataReader,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\ArchiveMetadataReader.cs,GetInt64,The following statement contains a magic number: return (long)buffer [offset] | ((long)buffer [offset + 1] << 8) | ((long)buffer [offset + 2] << 16) | ((long)buffer [offset + 3] << 24) | ((long)buffer [offset + 4] << 32) | ((long)buffer [offset + 5] << 40) | ((long)buffer [offset + 6] << 48) | ((long)buffer [offset + 7] << 56);  
Magic Number,ManagedLzma.SevenZip.Reader,ArchiveMetadataReader,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\ArchiveMetadataReader.cs,GetInt64,The following statement contains a magic number: return (long)buffer [offset] | ((long)buffer [offset + 1] << 8) | ((long)buffer [offset + 2] << 16) | ((long)buffer [offset + 3] << 24) | ((long)buffer [offset + 4] << 32) | ((long)buffer [offset + 5] << 40) | ((long)buffer [offset + 6] << 48) | ((long)buffer [offset + 7] << 56);  
Magic Number,ManagedLzma.SevenZip.Reader,ArchiveMetadataReader,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\ArchiveMetadataReader.cs,GetInt64,The following statement contains a magic number: return (long)buffer [offset] | ((long)buffer [offset + 1] << 8) | ((long)buffer [offset + 2] << 16) | ((long)buffer [offset + 3] << 24) | ((long)buffer [offset + 4] << 32) | ((long)buffer [offset + 5] << 40) | ((long)buffer [offset + 6] << 48) | ((long)buffer [offset + 7] << 56);  
Magic Number,ManagedLzma.SevenZip.Reader,ArchiveMetadataReader,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\ArchiveMetadataReader.cs,GetInt64,The following statement contains a magic number: return (long)buffer [offset] | ((long)buffer [offset + 1] << 8) | ((long)buffer [offset + 2] << 16) | ((long)buffer [offset + 3] << 24) | ((long)buffer [offset + 4] << 32) | ((long)buffer [offset + 5] << 40) | ((long)buffer [offset + 6] << 48) | ((long)buffer [offset + 7] << 56);  
Magic Number,ManagedLzma.SevenZip.Reader,ArchiveMetadataReader,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\ArchiveMetadataReader.cs,ReadArchive,The following statement contains a magic number: if (token != ArchiveMetadataToken.End) {  	if (token != ArchiveMetadataToken.Files)  		throw new InvalidDataException ();  	var fileCount = ReadNumberAsInt32 ();  	Initialize (fileCount);  	for (; ;) {  		token = ReadToken ();  		if (token == ArchiveMetadataToken.End)  			break;  		var recordSize = (long)ReadNumber ();  		if (recordSize < 0)  			throw new InvalidDataException ();  		var oldOffset = GetCurrentOffset ();  		switch (token) {  		case ArchiveMetadataToken.Name:  			using (SelectStream (streams)) {  				var reader = new MetadataStringReader (this' fileCount);  				ReadNames (reader);  				reader.Complete ();  			}  			break;  		case ArchiveMetadataToken.WinAttributes: {  			var vector = ReadOptionalBitVector (fileCount);  			using (SelectStream (streams)) {  				var reader = new MetadataAttributeReader (this' fileCount' vector' EnablePosixFileAttributeExtension);  				ReadAttributes (reader);  				reader.Complete ();  			}  			break;  		}  		case ArchiveMetadataToken.EmptyStream: {  			var emptyStreams = ReadRequiredBitVector (fileCount);  			emptyStreamCount = emptyStreams.CountSetBits ();  			var reader = new MetadataBitReader (this' emptyStreams);  			ReadEmptyStreamMarkers (reader);  			reader.Complete ();  			break;  		}  		case ArchiveMetadataToken.EmptyFile: {  			if (emptyStreamCount == null)  				throw new InvalidDataException ();  			var reader = new MetadataBitReader (this' ReadRequiredBitVector (emptyStreamCount.Value));  			ReadEmptyFileMarkers (reader);  			reader.Complete ();  			break;  		}  		case ArchiveMetadataToken.Anti: {  			if (emptyStreamCount == null)  				throw new InvalidDataException ();  			var reader = new MetadataBitReader (this' ReadRequiredBitVector (emptyStreamCount.Value));  			ReadRemovedFileMarkers (reader);  			reader.Complete ();  			break;  		}  		case ArchiveMetadataToken.StartPos: {  			var vector = ReadOptionalBitVector (fileCount);  			using (SelectStream (streams)) {  				var reader = new MetadataNumberReader (this' fileCount' vector);  				ReadOffsets (reader);  				reader.Complete ();  			}  			break;  		}  		case ArchiveMetadataToken.CTime: {  			var vector = ReadOptionalBitVector (fileCount);  			using (SelectStream (streams)) {  				var reader = new MetadataDateReader (this' fileCount' vector);  				ReadCTime (reader);  				reader.Complete ();  			}  			break;  		}  		case ArchiveMetadataToken.ATime: {  			var vector = ReadOptionalBitVector (fileCount);  			using (SelectStream (streams)) {  				var reader = new MetadataDateReader (this' fileCount' vector);  				ReadATime (reader);  				reader.Complete ();  			}  			break;  		}  		case ArchiveMetadataToken.MTime: {  			var vector = ReadOptionalBitVector (fileCount);  			using (SelectStream (streams)) {  				var reader = new MetadataDateReader (this' fileCount' vector);  				ReadMTime (reader);  				reader.Complete ();  			}  			break;  		}  		case ArchiveMetadataToken.Padding:  			for (int i = 0; i < recordSize; i++)  				if (ReadByte () != 0)  					throw new InvalidDataException ();  			break;  		default:  			break;  		}  		if (!(mMajorVersion == 0 && mMinorVersion < 3)) {  			var newOffset = GetCurrentOffset ();  			if (newOffset - oldOffset != recordSize)  				throw new InvalidDataException ();  		}  	}  }  
Magic Number,ManagedLzma.SevenZip.Reader,ArchiveMetadataReader,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\ArchiveMetadataReader.cs,ReadArchive,The following statement contains a magic number: for (; ;) {  	token = ReadToken ();  	if (token == ArchiveMetadataToken.End)  		break;  	var recordSize = (long)ReadNumber ();  	if (recordSize < 0)  		throw new InvalidDataException ();  	var oldOffset = GetCurrentOffset ();  	switch (token) {  	case ArchiveMetadataToken.Name:  		using (SelectStream (streams)) {  			var reader = new MetadataStringReader (this' fileCount);  			ReadNames (reader);  			reader.Complete ();  		}  		break;  	case ArchiveMetadataToken.WinAttributes: {  		var vector = ReadOptionalBitVector (fileCount);  		using (SelectStream (streams)) {  			var reader = new MetadataAttributeReader (this' fileCount' vector' EnablePosixFileAttributeExtension);  			ReadAttributes (reader);  			reader.Complete ();  		}  		break;  	}  	case ArchiveMetadataToken.EmptyStream: {  		var emptyStreams = ReadRequiredBitVector (fileCount);  		emptyStreamCount = emptyStreams.CountSetBits ();  		var reader = new MetadataBitReader (this' emptyStreams);  		ReadEmptyStreamMarkers (reader);  		reader.Complete ();  		break;  	}  	case ArchiveMetadataToken.EmptyFile: {  		if (emptyStreamCount == null)  			throw new InvalidDataException ();  		var reader = new MetadataBitReader (this' ReadRequiredBitVector (emptyStreamCount.Value));  		ReadEmptyFileMarkers (reader);  		reader.Complete ();  		break;  	}  	case ArchiveMetadataToken.Anti: {  		if (emptyStreamCount == null)  			throw new InvalidDataException ();  		var reader = new MetadataBitReader (this' ReadRequiredBitVector (emptyStreamCount.Value));  		ReadRemovedFileMarkers (reader);  		reader.Complete ();  		break;  	}  	case ArchiveMetadataToken.StartPos: {  		var vector = ReadOptionalBitVector (fileCount);  		using (SelectStream (streams)) {  			var reader = new MetadataNumberReader (this' fileCount' vector);  			ReadOffsets (reader);  			reader.Complete ();  		}  		break;  	}  	case ArchiveMetadataToken.CTime: {  		var vector = ReadOptionalBitVector (fileCount);  		using (SelectStream (streams)) {  			var reader = new MetadataDateReader (this' fileCount' vector);  			ReadCTime (reader);  			reader.Complete ();  		}  		break;  	}  	case ArchiveMetadataToken.ATime: {  		var vector = ReadOptionalBitVector (fileCount);  		using (SelectStream (streams)) {  			var reader = new MetadataDateReader (this' fileCount' vector);  			ReadATime (reader);  			reader.Complete ();  		}  		break;  	}  	case ArchiveMetadataToken.MTime: {  		var vector = ReadOptionalBitVector (fileCount);  		using (SelectStream (streams)) {  			var reader = new MetadataDateReader (this' fileCount' vector);  			ReadMTime (reader);  			reader.Complete ();  		}  		break;  	}  	case ArchiveMetadataToken.Padding:  		for (int i = 0; i < recordSize; i++)  			if (ReadByte () != 0)  				throw new InvalidDataException ();  		break;  	default:  		break;  	}  	if (!(mMajorVersion == 0 && mMinorVersion < 3)) {  		var newOffset = GetCurrentOffset ();  		if (newOffset - oldOffset != recordSize)  			throw new InvalidDataException ();  	}  }  
Magic Number,ManagedLzma.SevenZip.Reader,ArchiveMetadataReader,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\ArchiveMetadataReader.cs,ReadArchive,The following statement contains a magic number: if (!(mMajorVersion == 0 && mMinorVersion < 3)) {  	var newOffset = GetCurrentOffset ();  	if (newOffset - oldOffset != recordSize)  		throw new InvalidDataException ();  }  
Magic Number,ManagedLzma.SevenZip.Reader,ArchiveMetadataReader,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\ArchiveMetadataReader.cs,ReadDecoder,The following statement contains a magic number: if (idLen > 4)  	throw new InvalidDataException ();  
Magic Number,ManagedLzma.SevenZip.Reader,ArchiveMetadataReader,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\ArchiveMetadataReader.cs,ReadDecoder,The following statement contains a magic number: for (int i = idLen - 1; i >= 0; i--)  	id |= ReadByte () << (i * 8);  
Magic Number,ManagedLzma.SevenZip.Reader,ArchiveMetadataReader,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\ArchiveMetadataReader.cs,ReadDecoder,The following statement contains a magic number: id |= ReadByte () << (i * 8);  
Magic Number,ManagedLzma.SevenZip.Reader,ArchiveMetadataReader,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\ArchiveMetadataReader.cs,ReadToken,The following statement contains a magic number: if (token > 25)  	return ArchiveMetadataToken.Unknown;  else  	return (ArchiveMetadataToken)token;  
Magic Number,ManagedLzma.SevenZip.Reader,AesArchiveDecoder,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\AesDecoder.cs,Initialize,The following statement contains a magic number: mBuffer = new byte[4 << 10];  
Magic Number,ManagedLzma.SevenZip.Reader,AesArchiveDecoder,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\AesDecoder.cs,Initialize,The following statement contains a magic number: mBuffer = new byte[4 << 10];  
Magic Number,ManagedLzma.SevenZip.Reader,AesArchiveDecoder,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\AesDecoder.cs,Initialize,The following statement contains a magic number: if (((uint)input.Length & 15) != 0)  	throw new NotSupportedException ("7z requires AES streams to be properly padded.");  
Magic Number,ManagedLzma.SevenZip.Reader,AesArchiveDecoder,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\AesDecoder.cs,DecodeInto,The following statement contains a magic number: if (mEnding - mOffset < 16) {  	Buffer.BlockCopy (mBuffer' mOffset' mBuffer' 0' mEnding - mOffset);  	mEnding -= mOffset;  	mOffset = 0;  	do {  		int read = mStream.Read (mBuffer' mEnding' mBuffer.Length - mEnding);  		if (read == 0) {  			// We are not done decoding and have less than 16 bytes.  			throw new EndOfStreamException ();  		}  		mEnding += read;  	} while (mEnding - mOffset < 16);  }  
Magic Number,ManagedLzma.SevenZip.Reader,AesArchiveDecoder,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\AesDecoder.cs,DecodeInto,The following statement contains a magic number: if (mEnding - mOffset < 16) {  	Buffer.BlockCopy (mBuffer' mOffset' mBuffer' 0' mEnding - mOffset);  	mEnding -= mOffset;  	mOffset = 0;  	do {  		int read = mStream.Read (mBuffer' mEnding' mBuffer.Length - mEnding);  		if (read == 0) {  			// We are not done decoding and have less than 16 bytes.  			throw new EndOfStreamException ();  		}  		mEnding += read;  	} while (mEnding - mOffset < 16);  }  
Magic Number,ManagedLzma.SevenZip.Reader,AesArchiveDecoder,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\AesDecoder.cs,DecodeInto,The following statement contains a magic number: do {  	int read = mStream.Read (mBuffer' mEnding' mBuffer.Length - mEnding);  	if (read == 0) {  		// We are not done decoding and have less than 16 bytes.  		throw new EndOfStreamException ();  	}  	mEnding += read;  } while (mEnding - mOffset < 16);  
Magic Number,ManagedLzma.SevenZip.Reader,AesArchiveDecoder,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\AesDecoder.cs,DecodeInto,The following statement contains a magic number: if (count < 16)  	return HandleUnderflow (buffer' offset' count);  
Magic Number,ManagedLzma.SevenZip.Reader,AesArchiveDecoder,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\AesDecoder.cs,Init,The following statement contains a magic number: saltSize += (bt2 >> 4);  
Magic Number,ManagedLzma.SevenZip.Reader,AesArchiveDecoder,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\AesDecoder.cs,Init,The following statement contains a magic number: ivSize += (bt2 & 15);  
Magic Number,ManagedLzma.SevenZip.Reader,AesArchiveDecoder,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\AesDecoder.cs,Init,The following statement contains a magic number: if (info.Length < 2 + saltSize + ivSize)  	throw new InvalidDataException ();  
Magic Number,ManagedLzma.SevenZip.Reader,AesArchiveDecoder,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\AesDecoder.cs,Init,The following statement contains a magic number: for (int i = 0; i < saltSize; i++)  	salt [i] = info [i + 2];  
Magic Number,ManagedLzma.SevenZip.Reader,AesArchiveDecoder,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\AesDecoder.cs,Init,The following statement contains a magic number: salt [i] = info [i + 2];  
Magic Number,ManagedLzma.SevenZip.Reader,AesArchiveDecoder,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\AesDecoder.cs,Init,The following statement contains a magic number: iv = new byte[16];  
Magic Number,ManagedLzma.SevenZip.Reader,AesArchiveDecoder,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\AesDecoder.cs,Init,The following statement contains a magic number: for (int i = 0; i < ivSize; i++)  	iv [i] = info [i + saltSize + 2];  
Magic Number,ManagedLzma.SevenZip.Reader,AesArchiveDecoder,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\AesDecoder.cs,Init,The following statement contains a magic number: iv [i] = info [i + saltSize + 2];  
Magic Number,ManagedLzma.SevenZip.Reader,AesArchiveDecoder,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\AesDecoder.cs,Init,The following statement contains a magic number: if (numCyclesPower > 24)  	throw new NotSupportedException ();  
Magic Number,ManagedLzma.SevenZip.Reader,AesArchiveDecoder,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\AesDecoder.cs,InitKey,The following statement contains a magic number: if (mNumCyclesPower == 0x3F) {  	var key = new byte[32];  	int pos;  	for (pos = 0; pos < salt.Length; pos++)  		key [pos] = salt [pos];  	for (int i = 0; i < pass.Length && pos < 32; i++)  		key [pos++] = pass [i];  	return key;  } else {  	#if BUILD_PORTABLE  	                var stream = new KeyDataStream();                  var task = Task.Run(delegate {                     using (var sha = System.Security.Cryptography.SHA256.Create())                         return sha.ComputeHash(stream);                 });                  byte[] counter = new byte[8];                 long numRounds = 1L << mNumCyclesPower;                 for (long round = 0; round < numRounds; round++)                 {                     stream.ProvideData(salt' 0' salt.Length);                     stream.ProvideData(pass' 0' pass.Length);                     stream.ProvideData(counter' 0' 8);                      // This mirrors the counter so we don't have to convert long to byte[] each round.                     // (It also ensures the counter is little endian' which BitConverter does not.)                     for (int i = 0; i < 8; i++)                         if (++counter[i] != 0)                             break;                 }                  stream.Complete();                 return task.GetAwaiter().GetResult(); #else  	using (var sha = System.Security.Cryptography.SHA256.Create ()) {  		byte[] counter = new byte[8];  		long numRounds = 1L << mNumCyclesPower;  		for (long round = 0; round < numRounds; round++) {  			sha.TransformBlock (salt' 0' salt.Length' null' 0);  			sha.TransformBlock (pass' 0' pass.Length' null' 0);  			sha.TransformBlock (counter' 0' 8' null' 0);  			// This mirrors the counter so we don't have to convert long to byte[] each round.  			// (It also ensures the counter is little endian' which BitConverter does not.)  			for (int i = 0; i < 8; i++)  				if (++counter [i] != 0)  					break;  		}  		sha.TransformFinalBlock (counter' 0' 0);  		return sha.Hash;  	}  	#endif  }  
Magic Number,ManagedLzma.SevenZip.Reader,AesArchiveDecoder,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\AesDecoder.cs,InitKey,The following statement contains a magic number: if (mNumCyclesPower == 0x3F) {  	var key = new byte[32];  	int pos;  	for (pos = 0; pos < salt.Length; pos++)  		key [pos] = salt [pos];  	for (int i = 0; i < pass.Length && pos < 32; i++)  		key [pos++] = pass [i];  	return key;  } else {  	#if BUILD_PORTABLE  	                var stream = new KeyDataStream();                  var task = Task.Run(delegate {                     using (var sha = System.Security.Cryptography.SHA256.Create())                         return sha.ComputeHash(stream);                 });                  byte[] counter = new byte[8];                 long numRounds = 1L << mNumCyclesPower;                 for (long round = 0; round < numRounds; round++)                 {                     stream.ProvideData(salt' 0' salt.Length);                     stream.ProvideData(pass' 0' pass.Length);                     stream.ProvideData(counter' 0' 8);                      // This mirrors the counter so we don't have to convert long to byte[] each round.                     // (It also ensures the counter is little endian' which BitConverter does not.)                     for (int i = 0; i < 8; i++)                         if (++counter[i] != 0)                             break;                 }                  stream.Complete();                 return task.GetAwaiter().GetResult(); #else  	using (var sha = System.Security.Cryptography.SHA256.Create ()) {  		byte[] counter = new byte[8];  		long numRounds = 1L << mNumCyclesPower;  		for (long round = 0; round < numRounds; round++) {  			sha.TransformBlock (salt' 0' salt.Length' null' 0);  			sha.TransformBlock (pass' 0' pass.Length' null' 0);  			sha.TransformBlock (counter' 0' 8' null' 0);  			// This mirrors the counter so we don't have to convert long to byte[] each round.  			// (It also ensures the counter is little endian' which BitConverter does not.)  			for (int i = 0; i < 8; i++)  				if (++counter [i] != 0)  					break;  		}  		sha.TransformFinalBlock (counter' 0' 0);  		return sha.Hash;  	}  	#endif  }  
Magic Number,ManagedLzma.SevenZip.Reader,AesArchiveDecoder,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\AesDecoder.cs,InitKey,The following statement contains a magic number: if (mNumCyclesPower == 0x3F) {  	var key = new byte[32];  	int pos;  	for (pos = 0; pos < salt.Length; pos++)  		key [pos] = salt [pos];  	for (int i = 0; i < pass.Length && pos < 32; i++)  		key [pos++] = pass [i];  	return key;  } else {  	#if BUILD_PORTABLE  	                var stream = new KeyDataStream();                  var task = Task.Run(delegate {                     using (var sha = System.Security.Cryptography.SHA256.Create())                         return sha.ComputeHash(stream);                 });                  byte[] counter = new byte[8];                 long numRounds = 1L << mNumCyclesPower;                 for (long round = 0; round < numRounds; round++)                 {                     stream.ProvideData(salt' 0' salt.Length);                     stream.ProvideData(pass' 0' pass.Length);                     stream.ProvideData(counter' 0' 8);                      // This mirrors the counter so we don't have to convert long to byte[] each round.                     // (It also ensures the counter is little endian' which BitConverter does not.)                     for (int i = 0; i < 8; i++)                         if (++counter[i] != 0)                             break;                 }                  stream.Complete();                 return task.GetAwaiter().GetResult(); #else  	using (var sha = System.Security.Cryptography.SHA256.Create ()) {  		byte[] counter = new byte[8];  		long numRounds = 1L << mNumCyclesPower;  		for (long round = 0; round < numRounds; round++) {  			sha.TransformBlock (salt' 0' salt.Length' null' 0);  			sha.TransformBlock (pass' 0' pass.Length' null' 0);  			sha.TransformBlock (counter' 0' 8' null' 0);  			// This mirrors the counter so we don't have to convert long to byte[] each round.  			// (It also ensures the counter is little endian' which BitConverter does not.)  			for (int i = 0; i < 8; i++)  				if (++counter [i] != 0)  					break;  		}  		sha.TransformFinalBlock (counter' 0' 0);  		return sha.Hash;  	}  	#endif  }  
Magic Number,ManagedLzma.SevenZip.Reader,AesArchiveDecoder,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\AesDecoder.cs,InitKey,The following statement contains a magic number: if (mNumCyclesPower == 0x3F) {  	var key = new byte[32];  	int pos;  	for (pos = 0; pos < salt.Length; pos++)  		key [pos] = salt [pos];  	for (int i = 0; i < pass.Length && pos < 32; i++)  		key [pos++] = pass [i];  	return key;  } else {  	#if BUILD_PORTABLE  	                var stream = new KeyDataStream();                  var task = Task.Run(delegate {                     using (var sha = System.Security.Cryptography.SHA256.Create())                         return sha.ComputeHash(stream);                 });                  byte[] counter = new byte[8];                 long numRounds = 1L << mNumCyclesPower;                 for (long round = 0; round < numRounds; round++)                 {                     stream.ProvideData(salt' 0' salt.Length);                     stream.ProvideData(pass' 0' pass.Length);                     stream.ProvideData(counter' 0' 8);                      // This mirrors the counter so we don't have to convert long to byte[] each round.                     // (It also ensures the counter is little endian' which BitConverter does not.)                     for (int i = 0; i < 8; i++)                         if (++counter[i] != 0)                             break;                 }                  stream.Complete();                 return task.GetAwaiter().GetResult(); #else  	using (var sha = System.Security.Cryptography.SHA256.Create ()) {  		byte[] counter = new byte[8];  		long numRounds = 1L << mNumCyclesPower;  		for (long round = 0; round < numRounds; round++) {  			sha.TransformBlock (salt' 0' salt.Length' null' 0);  			sha.TransformBlock (pass' 0' pass.Length' null' 0);  			sha.TransformBlock (counter' 0' 8' null' 0);  			// This mirrors the counter so we don't have to convert long to byte[] each round.  			// (It also ensures the counter is little endian' which BitConverter does not.)  			for (int i = 0; i < 8; i++)  				if (++counter [i] != 0)  					break;  		}  		sha.TransformFinalBlock (counter' 0' 0);  		return sha.Hash;  	}  	#endif  }  
Magic Number,ManagedLzma.SevenZip.Reader,AesArchiveDecoder,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\AesDecoder.cs,InitKey,The following statement contains a magic number: if (mNumCyclesPower == 0x3F) {  	var key = new byte[32];  	int pos;  	for (pos = 0; pos < salt.Length; pos++)  		key [pos] = salt [pos];  	for (int i = 0; i < pass.Length && pos < 32; i++)  		key [pos++] = pass [i];  	return key;  } else {  	#if BUILD_PORTABLE  	                var stream = new KeyDataStream();                  var task = Task.Run(delegate {                     using (var sha = System.Security.Cryptography.SHA256.Create())                         return sha.ComputeHash(stream);                 });                  byte[] counter = new byte[8];                 long numRounds = 1L << mNumCyclesPower;                 for (long round = 0; round < numRounds; round++)                 {                     stream.ProvideData(salt' 0' salt.Length);                     stream.ProvideData(pass' 0' pass.Length);                     stream.ProvideData(counter' 0' 8);                      // This mirrors the counter so we don't have to convert long to byte[] each round.                     // (It also ensures the counter is little endian' which BitConverter does not.)                     for (int i = 0; i < 8; i++)                         if (++counter[i] != 0)                             break;                 }                  stream.Complete();                 return task.GetAwaiter().GetResult(); #else  	using (var sha = System.Security.Cryptography.SHA256.Create ()) {  		byte[] counter = new byte[8];  		long numRounds = 1L << mNumCyclesPower;  		for (long round = 0; round < numRounds; round++) {  			sha.TransformBlock (salt' 0' salt.Length' null' 0);  			sha.TransformBlock (pass' 0' pass.Length' null' 0);  			sha.TransformBlock (counter' 0' 8' null' 0);  			// This mirrors the counter so we don't have to convert long to byte[] each round.  			// (It also ensures the counter is little endian' which BitConverter does not.)  			for (int i = 0; i < 8; i++)  				if (++counter [i] != 0)  					break;  		}  		sha.TransformFinalBlock (counter' 0' 0);  		return sha.Hash;  	}  	#endif  }  
Magic Number,ManagedLzma.SevenZip.Reader,AesArchiveDecoder,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\AesDecoder.cs,InitKey,The following statement contains a magic number: for (int i = 0; i < pass.Length && pos < 32; i++)  	key [pos++] = pass [i];  
Magic Number,ManagedLzma.SevenZip.Reader,AesArchiveDecoder,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\AesDecoder.cs,InitKey,The following statement contains a magic number: using (var sha = System.Security.Cryptography.SHA256.Create ()) {  	byte[] counter = new byte[8];  	long numRounds = 1L << mNumCyclesPower;  	for (long round = 0; round < numRounds; round++) {  		sha.TransformBlock (salt' 0' salt.Length' null' 0);  		sha.TransformBlock (pass' 0' pass.Length' null' 0);  		sha.TransformBlock (counter' 0' 8' null' 0);  		// This mirrors the counter so we don't have to convert long to byte[] each round.  		// (It also ensures the counter is little endian' which BitConverter does not.)  		for (int i = 0; i < 8; i++)  			if (++counter [i] != 0)  				break;  	}  	sha.TransformFinalBlock (counter' 0' 0);  	return sha.Hash;  }  
Magic Number,ManagedLzma.SevenZip.Reader,AesArchiveDecoder,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\AesDecoder.cs,InitKey,The following statement contains a magic number: using (var sha = System.Security.Cryptography.SHA256.Create ()) {  	byte[] counter = new byte[8];  	long numRounds = 1L << mNumCyclesPower;  	for (long round = 0; round < numRounds; round++) {  		sha.TransformBlock (salt' 0' salt.Length' null' 0);  		sha.TransformBlock (pass' 0' pass.Length' null' 0);  		sha.TransformBlock (counter' 0' 8' null' 0);  		// This mirrors the counter so we don't have to convert long to byte[] each round.  		// (It also ensures the counter is little endian' which BitConverter does not.)  		for (int i = 0; i < 8; i++)  			if (++counter [i] != 0)  				break;  	}  	sha.TransformFinalBlock (counter' 0' 0);  	return sha.Hash;  }  
Magic Number,ManagedLzma.SevenZip.Reader,AesArchiveDecoder,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\AesDecoder.cs,InitKey,The following statement contains a magic number: using (var sha = System.Security.Cryptography.SHA256.Create ()) {  	byte[] counter = new byte[8];  	long numRounds = 1L << mNumCyclesPower;  	for (long round = 0; round < numRounds; round++) {  		sha.TransformBlock (salt' 0' salt.Length' null' 0);  		sha.TransformBlock (pass' 0' pass.Length' null' 0);  		sha.TransformBlock (counter' 0' 8' null' 0);  		// This mirrors the counter so we don't have to convert long to byte[] each round.  		// (It also ensures the counter is little endian' which BitConverter does not.)  		for (int i = 0; i < 8; i++)  			if (++counter [i] != 0)  				break;  	}  	sha.TransformFinalBlock (counter' 0' 0);  	return sha.Hash;  }  
Magic Number,ManagedLzma.SevenZip.Reader,AesArchiveDecoder,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\AesDecoder.cs,InitKey,The following statement contains a magic number: for (long round = 0; round < numRounds; round++) {  	sha.TransformBlock (salt' 0' salt.Length' null' 0);  	sha.TransformBlock (pass' 0' pass.Length' null' 0);  	sha.TransformBlock (counter' 0' 8' null' 0);  	// This mirrors the counter so we don't have to convert long to byte[] each round.  	// (It also ensures the counter is little endian' which BitConverter does not.)  	for (int i = 0; i < 8; i++)  		if (++counter [i] != 0)  			break;  }  
Magic Number,ManagedLzma.SevenZip.Reader,AesArchiveDecoder,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\AesDecoder.cs,InitKey,The following statement contains a magic number: for (long round = 0; round < numRounds; round++) {  	sha.TransformBlock (salt' 0' salt.Length' null' 0);  	sha.TransformBlock (pass' 0' pass.Length' null' 0);  	sha.TransformBlock (counter' 0' 8' null' 0);  	// This mirrors the counter so we don't have to convert long to byte[] each round.  	// (It also ensures the counter is little endian' which BitConverter does not.)  	for (int i = 0; i < 8; i++)  		if (++counter [i] != 0)  			break;  }  
Magic Number,ManagedLzma.SevenZip.Reader,AesArchiveDecoder,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\AesDecoder.cs,InitKey,The following statement contains a magic number: sha.TransformBlock (counter' 0' 8' null' 0);  
Magic Number,ManagedLzma.SevenZip.Reader,AesArchiveDecoder,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\AesDecoder.cs,InitKey,The following statement contains a magic number: for (int i = 0; i < 8; i++)  	if (++counter [i] != 0)  		break;  
Magic Number,ManagedLzma.SevenZip.Reader,AesArchiveDecoder,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\AesDecoder.cs,HandleUnderflow,The following statement contains a magic number: if (mUnderflow == 0) {  	int blockSize = (mEnding - mOffset) & ~15;  	mUnderflow = mDecoder.TransformBlock (mBuffer' mOffset' blockSize' mBuffer' mOffset);  }  
Magic Number,ManagedLzma.SevenZip.Reader,Bcj2ArchiveDecoder,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\Bcj2Decoder.cs,SetInputStream,The following statement contains a magic number: switch (index) {  case 0:  	mMainStream = stream;  	break;  case 1:  	mCallStream = stream;  	break;  case 2:  	mJumpStream = stream;  	break;  case 3:  	mRangeDecoder = new RangeDecoder (stream);  	break;  default:  	throw new ArgumentOutOfRangeException (nameof (index));  }  
Magic Number,ManagedLzma.SevenZip.Reader,Bcj2ArchiveDecoder,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\Bcj2Decoder.cs,SetInputStream,The following statement contains a magic number: switch (index) {  case 0:  	mMainStream = stream;  	break;  case 1:  	mCallStream = stream;  	break;  case 2:  	mJumpStream = stream;  	break;  case 3:  	mRangeDecoder = new RangeDecoder (stream);  	break;  default:  	throw new ArgumentOutOfRangeException (nameof (index));  }  
Magic Number,ManagedLzma.SevenZip.Reader,Bcj2ArchiveDecoder,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\Bcj2Decoder.cs,Read,The following statement contains a magic number: if (mStatusDecoder == null) {  	mStatusDecoder = new StatusDecoder[256 + 2];  	for (int i = 0; i < mStatusDecoder.Length; i++)  		mStatusDecoder [i] = new StatusDecoder ();  	mIter = Run ().GetEnumerator ();  }  
Magic Number,ManagedLzma.SevenZip.Reader,Bcj2ArchiveDecoder,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\Bcj2Decoder.cs,Read,The following statement contains a magic number: if (mStatusDecoder == null) {  	mStatusDecoder = new StatusDecoder[256 + 2];  	for (int i = 0; i < mStatusDecoder.Length; i++)  		mStatusDecoder [i] = new StatusDecoder ();  	mIter = Run ().GetEnumerator ();  }  
Magic Number,ManagedLzma.SevenZip.Reader,Bcj2ArchiveDecoder,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\Bcj2Decoder.cs,Read,The following statement contains a magic number: mStatusDecoder = new StatusDecoder[256 + 2];  
Magic Number,ManagedLzma.SevenZip.Reader,Bcj2ArchiveDecoder,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\Bcj2Decoder.cs,Read,The following statement contains a magic number: mStatusDecoder = new StatusDecoder[256 + 2];  
Magic Number,ManagedLzma.SevenZip.Reader,Bcj2ArchiveDecoder,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\Bcj2Decoder.cs,GetIndex,The following statement contains a magic number: if (b1 == 0xE8)  	return b0;  else if (b1 == 0xE9)  	return 256;  else  	return 257;  
Magic Number,ManagedLzma.SevenZip.Reader,Bcj2ArchiveDecoder,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\Bcj2Decoder.cs,GetIndex,The following statement contains a magic number: if (b1 == 0xE8)  	return b0;  else if (b1 == 0xE9)  	return 256;  else  	return 257;  
Magic Number,ManagedLzma.SevenZip.Reader,Bcj2ArchiveDecoder,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\Bcj2Decoder.cs,GetIndex,The following statement contains a magic number: if (b1 == 0xE9)  	return 256;  else  	return 257;  
Magic Number,ManagedLzma.SevenZip.Reader,Bcj2ArchiveDecoder,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\Bcj2Decoder.cs,GetIndex,The following statement contains a magic number: if (b1 == 0xE9)  	return 256;  else  	return 257;  
Magic Number,ManagedLzma.SevenZip.Reader,Bcj2ArchiveDecoder,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\Bcj2Decoder.cs,GetIndex,The following statement contains a magic number: return 256;  
Magic Number,ManagedLzma.SevenZip.Reader,Bcj2ArchiveDecoder,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\Bcj2Decoder.cs,GetIndex,The following statement contains a magic number: return 257;  
Magic Number,ManagedLzma.SevenZip.Reader,Bcj2ArchiveDecoder,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\Bcj2Decoder.cs,Run,The following statement contains a magic number: for (; ;) {  	byte b = 0;  	uint i;  	for (i = 0; i < kBurstSize; i++) {  		if (mMainStream.Read (tempBuffer' 0' 1) == 0)  			yield break;  		b = tempBuffer [0];  		mWritten++;  		yield return b;  		if (IsJ (prevByte' b))  			break;  		prevByte = b;  	}  	processedBytes += i;  	if (i == kBurstSize)  		continue;  	if (mStatusDecoder [GetIndex (prevByte' b)].Decode (mRangeDecoder) == 1) {  		var s = (b == 0xE8) ? mCallStream : mJumpStream;  		uint src = 0;  		for (i = 0; i < 4; i++) {  			if (s.Read (tempBuffer' 0' 1) == 0)  				throw new EndOfStreamException ();  			src <<= 8;  			src |= tempBuffer [0];  		}  		uint dest = src - (uint)(mWritten + 4);  		mWritten++;  		yield return (byte)dest;  		mWritten++;  		yield return (byte)(dest >> 8);  		mWritten++;  		yield return (byte)(dest >> 16);  		mWritten++;  		yield return (byte)(dest >> 24);  		prevByte = (byte)(dest >> 24);  		processedBytes += 4;  	} else {  		prevByte = b;  	}  }  
Magic Number,ManagedLzma.SevenZip.Reader,Bcj2ArchiveDecoder,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\Bcj2Decoder.cs,Run,The following statement contains a magic number: for (; ;) {  	byte b = 0;  	uint i;  	for (i = 0; i < kBurstSize; i++) {  		if (mMainStream.Read (tempBuffer' 0' 1) == 0)  			yield break;  		b = tempBuffer [0];  		mWritten++;  		yield return b;  		if (IsJ (prevByte' b))  			break;  		prevByte = b;  	}  	processedBytes += i;  	if (i == kBurstSize)  		continue;  	if (mStatusDecoder [GetIndex (prevByte' b)].Decode (mRangeDecoder) == 1) {  		var s = (b == 0xE8) ? mCallStream : mJumpStream;  		uint src = 0;  		for (i = 0; i < 4; i++) {  			if (s.Read (tempBuffer' 0' 1) == 0)  				throw new EndOfStreamException ();  			src <<= 8;  			src |= tempBuffer [0];  		}  		uint dest = src - (uint)(mWritten + 4);  		mWritten++;  		yield return (byte)dest;  		mWritten++;  		yield return (byte)(dest >> 8);  		mWritten++;  		yield return (byte)(dest >> 16);  		mWritten++;  		yield return (byte)(dest >> 24);  		prevByte = (byte)(dest >> 24);  		processedBytes += 4;  	} else {  		prevByte = b;  	}  }  
Magic Number,ManagedLzma.SevenZip.Reader,Bcj2ArchiveDecoder,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\Bcj2Decoder.cs,Run,The following statement contains a magic number: for (; ;) {  	byte b = 0;  	uint i;  	for (i = 0; i < kBurstSize; i++) {  		if (mMainStream.Read (tempBuffer' 0' 1) == 0)  			yield break;  		b = tempBuffer [0];  		mWritten++;  		yield return b;  		if (IsJ (prevByte' b))  			break;  		prevByte = b;  	}  	processedBytes += i;  	if (i == kBurstSize)  		continue;  	if (mStatusDecoder [GetIndex (prevByte' b)].Decode (mRangeDecoder) == 1) {  		var s = (b == 0xE8) ? mCallStream : mJumpStream;  		uint src = 0;  		for (i = 0; i < 4; i++) {  			if (s.Read (tempBuffer' 0' 1) == 0)  				throw new EndOfStreamException ();  			src <<= 8;  			src |= tempBuffer [0];  		}  		uint dest = src - (uint)(mWritten + 4);  		mWritten++;  		yield return (byte)dest;  		mWritten++;  		yield return (byte)(dest >> 8);  		mWritten++;  		yield return (byte)(dest >> 16);  		mWritten++;  		yield return (byte)(dest >> 24);  		prevByte = (byte)(dest >> 24);  		processedBytes += 4;  	} else {  		prevByte = b;  	}  }  
Magic Number,ManagedLzma.SevenZip.Reader,Bcj2ArchiveDecoder,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\Bcj2Decoder.cs,Run,The following statement contains a magic number: for (; ;) {  	byte b = 0;  	uint i;  	for (i = 0; i < kBurstSize; i++) {  		if (mMainStream.Read (tempBuffer' 0' 1) == 0)  			yield break;  		b = tempBuffer [0];  		mWritten++;  		yield return b;  		if (IsJ (prevByte' b))  			break;  		prevByte = b;  	}  	processedBytes += i;  	if (i == kBurstSize)  		continue;  	if (mStatusDecoder [GetIndex (prevByte' b)].Decode (mRangeDecoder) == 1) {  		var s = (b == 0xE8) ? mCallStream : mJumpStream;  		uint src = 0;  		for (i = 0; i < 4; i++) {  			if (s.Read (tempBuffer' 0' 1) == 0)  				throw new EndOfStreamException ();  			src <<= 8;  			src |= tempBuffer [0];  		}  		uint dest = src - (uint)(mWritten + 4);  		mWritten++;  		yield return (byte)dest;  		mWritten++;  		yield return (byte)(dest >> 8);  		mWritten++;  		yield return (byte)(dest >> 16);  		mWritten++;  		yield return (byte)(dest >> 24);  		prevByte = (byte)(dest >> 24);  		processedBytes += 4;  	} else {  		prevByte = b;  	}  }  
Magic Number,ManagedLzma.SevenZip.Reader,Bcj2ArchiveDecoder,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\Bcj2Decoder.cs,Run,The following statement contains a magic number: for (; ;) {  	byte b = 0;  	uint i;  	for (i = 0; i < kBurstSize; i++) {  		if (mMainStream.Read (tempBuffer' 0' 1) == 0)  			yield break;  		b = tempBuffer [0];  		mWritten++;  		yield return b;  		if (IsJ (prevByte' b))  			break;  		prevByte = b;  	}  	processedBytes += i;  	if (i == kBurstSize)  		continue;  	if (mStatusDecoder [GetIndex (prevByte' b)].Decode (mRangeDecoder) == 1) {  		var s = (b == 0xE8) ? mCallStream : mJumpStream;  		uint src = 0;  		for (i = 0; i < 4; i++) {  			if (s.Read (tempBuffer' 0' 1) == 0)  				throw new EndOfStreamException ();  			src <<= 8;  			src |= tempBuffer [0];  		}  		uint dest = src - (uint)(mWritten + 4);  		mWritten++;  		yield return (byte)dest;  		mWritten++;  		yield return (byte)(dest >> 8);  		mWritten++;  		yield return (byte)(dest >> 16);  		mWritten++;  		yield return (byte)(dest >> 24);  		prevByte = (byte)(dest >> 24);  		processedBytes += 4;  	} else {  		prevByte = b;  	}  }  
Magic Number,ManagedLzma.SevenZip.Reader,Bcj2ArchiveDecoder,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\Bcj2Decoder.cs,Run,The following statement contains a magic number: for (; ;) {  	byte b = 0;  	uint i;  	for (i = 0; i < kBurstSize; i++) {  		if (mMainStream.Read (tempBuffer' 0' 1) == 0)  			yield break;  		b = tempBuffer [0];  		mWritten++;  		yield return b;  		if (IsJ (prevByte' b))  			break;  		prevByte = b;  	}  	processedBytes += i;  	if (i == kBurstSize)  		continue;  	if (mStatusDecoder [GetIndex (prevByte' b)].Decode (mRangeDecoder) == 1) {  		var s = (b == 0xE8) ? mCallStream : mJumpStream;  		uint src = 0;  		for (i = 0; i < 4; i++) {  			if (s.Read (tempBuffer' 0' 1) == 0)  				throw new EndOfStreamException ();  			src <<= 8;  			src |= tempBuffer [0];  		}  		uint dest = src - (uint)(mWritten + 4);  		mWritten++;  		yield return (byte)dest;  		mWritten++;  		yield return (byte)(dest >> 8);  		mWritten++;  		yield return (byte)(dest >> 16);  		mWritten++;  		yield return (byte)(dest >> 24);  		prevByte = (byte)(dest >> 24);  		processedBytes += 4;  	} else {  		prevByte = b;  	}  }  
Magic Number,ManagedLzma.SevenZip.Reader,Bcj2ArchiveDecoder,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\Bcj2Decoder.cs,Run,The following statement contains a magic number: for (; ;) {  	byte b = 0;  	uint i;  	for (i = 0; i < kBurstSize; i++) {  		if (mMainStream.Read (tempBuffer' 0' 1) == 0)  			yield break;  		b = tempBuffer [0];  		mWritten++;  		yield return b;  		if (IsJ (prevByte' b))  			break;  		prevByte = b;  	}  	processedBytes += i;  	if (i == kBurstSize)  		continue;  	if (mStatusDecoder [GetIndex (prevByte' b)].Decode (mRangeDecoder) == 1) {  		var s = (b == 0xE8) ? mCallStream : mJumpStream;  		uint src = 0;  		for (i = 0; i < 4; i++) {  			if (s.Read (tempBuffer' 0' 1) == 0)  				throw new EndOfStreamException ();  			src <<= 8;  			src |= tempBuffer [0];  		}  		uint dest = src - (uint)(mWritten + 4);  		mWritten++;  		yield return (byte)dest;  		mWritten++;  		yield return (byte)(dest >> 8);  		mWritten++;  		yield return (byte)(dest >> 16);  		mWritten++;  		yield return (byte)(dest >> 24);  		prevByte = (byte)(dest >> 24);  		processedBytes += 4;  	} else {  		prevByte = b;  	}  }  
Magic Number,ManagedLzma.SevenZip.Reader,Bcj2ArchiveDecoder,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\Bcj2Decoder.cs,Run,The following statement contains a magic number: for (; ;) {  	byte b = 0;  	uint i;  	for (i = 0; i < kBurstSize; i++) {  		if (mMainStream.Read (tempBuffer' 0' 1) == 0)  			yield break;  		b = tempBuffer [0];  		mWritten++;  		yield return b;  		if (IsJ (prevByte' b))  			break;  		prevByte = b;  	}  	processedBytes += i;  	if (i == kBurstSize)  		continue;  	if (mStatusDecoder [GetIndex (prevByte' b)].Decode (mRangeDecoder) == 1) {  		var s = (b == 0xE8) ? mCallStream : mJumpStream;  		uint src = 0;  		for (i = 0; i < 4; i++) {  			if (s.Read (tempBuffer' 0' 1) == 0)  				throw new EndOfStreamException ();  			src <<= 8;  			src |= tempBuffer [0];  		}  		uint dest = src - (uint)(mWritten + 4);  		mWritten++;  		yield return (byte)dest;  		mWritten++;  		yield return (byte)(dest >> 8);  		mWritten++;  		yield return (byte)(dest >> 16);  		mWritten++;  		yield return (byte)(dest >> 24);  		prevByte = (byte)(dest >> 24);  		processedBytes += 4;  	} else {  		prevByte = b;  	}  }  
Magic Number,ManagedLzma.SevenZip.Reader,Bcj2ArchiveDecoder,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\Bcj2Decoder.cs,Run,The following statement contains a magic number: if (mStatusDecoder [GetIndex (prevByte' b)].Decode (mRangeDecoder) == 1) {  	var s = (b == 0xE8) ? mCallStream : mJumpStream;  	uint src = 0;  	for (i = 0; i < 4; i++) {  		if (s.Read (tempBuffer' 0' 1) == 0)  			throw new EndOfStreamException ();  		src <<= 8;  		src |= tempBuffer [0];  	}  	uint dest = src - (uint)(mWritten + 4);  	mWritten++;  	yield return (byte)dest;  	mWritten++;  	yield return (byte)(dest >> 8);  	mWritten++;  	yield return (byte)(dest >> 16);  	mWritten++;  	yield return (byte)(dest >> 24);  	prevByte = (byte)(dest >> 24);  	processedBytes += 4;  } else {  	prevByte = b;  }  
Magic Number,ManagedLzma.SevenZip.Reader,Bcj2ArchiveDecoder,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\Bcj2Decoder.cs,Run,The following statement contains a magic number: if (mStatusDecoder [GetIndex (prevByte' b)].Decode (mRangeDecoder) == 1) {  	var s = (b == 0xE8) ? mCallStream : mJumpStream;  	uint src = 0;  	for (i = 0; i < 4; i++) {  		if (s.Read (tempBuffer' 0' 1) == 0)  			throw new EndOfStreamException ();  		src <<= 8;  		src |= tempBuffer [0];  	}  	uint dest = src - (uint)(mWritten + 4);  	mWritten++;  	yield return (byte)dest;  	mWritten++;  	yield return (byte)(dest >> 8);  	mWritten++;  	yield return (byte)(dest >> 16);  	mWritten++;  	yield return (byte)(dest >> 24);  	prevByte = (byte)(dest >> 24);  	processedBytes += 4;  } else {  	prevByte = b;  }  
Magic Number,ManagedLzma.SevenZip.Reader,Bcj2ArchiveDecoder,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\Bcj2Decoder.cs,Run,The following statement contains a magic number: if (mStatusDecoder [GetIndex (prevByte' b)].Decode (mRangeDecoder) == 1) {  	var s = (b == 0xE8) ? mCallStream : mJumpStream;  	uint src = 0;  	for (i = 0; i < 4; i++) {  		if (s.Read (tempBuffer' 0' 1) == 0)  			throw new EndOfStreamException ();  		src <<= 8;  		src |= tempBuffer [0];  	}  	uint dest = src - (uint)(mWritten + 4);  	mWritten++;  	yield return (byte)dest;  	mWritten++;  	yield return (byte)(dest >> 8);  	mWritten++;  	yield return (byte)(dest >> 16);  	mWritten++;  	yield return (byte)(dest >> 24);  	prevByte = (byte)(dest >> 24);  	processedBytes += 4;  } else {  	prevByte = b;  }  
Magic Number,ManagedLzma.SevenZip.Reader,Bcj2ArchiveDecoder,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\Bcj2Decoder.cs,Run,The following statement contains a magic number: if (mStatusDecoder [GetIndex (prevByte' b)].Decode (mRangeDecoder) == 1) {  	var s = (b == 0xE8) ? mCallStream : mJumpStream;  	uint src = 0;  	for (i = 0; i < 4; i++) {  		if (s.Read (tempBuffer' 0' 1) == 0)  			throw new EndOfStreamException ();  		src <<= 8;  		src |= tempBuffer [0];  	}  	uint dest = src - (uint)(mWritten + 4);  	mWritten++;  	yield return (byte)dest;  	mWritten++;  	yield return (byte)(dest >> 8);  	mWritten++;  	yield return (byte)(dest >> 16);  	mWritten++;  	yield return (byte)(dest >> 24);  	prevByte = (byte)(dest >> 24);  	processedBytes += 4;  } else {  	prevByte = b;  }  
Magic Number,ManagedLzma.SevenZip.Reader,Bcj2ArchiveDecoder,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\Bcj2Decoder.cs,Run,The following statement contains a magic number: if (mStatusDecoder [GetIndex (prevByte' b)].Decode (mRangeDecoder) == 1) {  	var s = (b == 0xE8) ? mCallStream : mJumpStream;  	uint src = 0;  	for (i = 0; i < 4; i++) {  		if (s.Read (tempBuffer' 0' 1) == 0)  			throw new EndOfStreamException ();  		src <<= 8;  		src |= tempBuffer [0];  	}  	uint dest = src - (uint)(mWritten + 4);  	mWritten++;  	yield return (byte)dest;  	mWritten++;  	yield return (byte)(dest >> 8);  	mWritten++;  	yield return (byte)(dest >> 16);  	mWritten++;  	yield return (byte)(dest >> 24);  	prevByte = (byte)(dest >> 24);  	processedBytes += 4;  } else {  	prevByte = b;  }  
Magic Number,ManagedLzma.SevenZip.Reader,Bcj2ArchiveDecoder,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\Bcj2Decoder.cs,Run,The following statement contains a magic number: if (mStatusDecoder [GetIndex (prevByte' b)].Decode (mRangeDecoder) == 1) {  	var s = (b == 0xE8) ? mCallStream : mJumpStream;  	uint src = 0;  	for (i = 0; i < 4; i++) {  		if (s.Read (tempBuffer' 0' 1) == 0)  			throw new EndOfStreamException ();  		src <<= 8;  		src |= tempBuffer [0];  	}  	uint dest = src - (uint)(mWritten + 4);  	mWritten++;  	yield return (byte)dest;  	mWritten++;  	yield return (byte)(dest >> 8);  	mWritten++;  	yield return (byte)(dest >> 16);  	mWritten++;  	yield return (byte)(dest >> 24);  	prevByte = (byte)(dest >> 24);  	processedBytes += 4;  } else {  	prevByte = b;  }  
Magic Number,ManagedLzma.SevenZip.Reader,Bcj2ArchiveDecoder,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\Bcj2Decoder.cs,Run,The following statement contains a magic number: if (mStatusDecoder [GetIndex (prevByte' b)].Decode (mRangeDecoder) == 1) {  	var s = (b == 0xE8) ? mCallStream : mJumpStream;  	uint src = 0;  	for (i = 0; i < 4; i++) {  		if (s.Read (tempBuffer' 0' 1) == 0)  			throw new EndOfStreamException ();  		src <<= 8;  		src |= tempBuffer [0];  	}  	uint dest = src - (uint)(mWritten + 4);  	mWritten++;  	yield return (byte)dest;  	mWritten++;  	yield return (byte)(dest >> 8);  	mWritten++;  	yield return (byte)(dest >> 16);  	mWritten++;  	yield return (byte)(dest >> 24);  	prevByte = (byte)(dest >> 24);  	processedBytes += 4;  } else {  	prevByte = b;  }  
Magic Number,ManagedLzma.SevenZip.Reader,Bcj2ArchiveDecoder,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\Bcj2Decoder.cs,Run,The following statement contains a magic number: if (mStatusDecoder [GetIndex (prevByte' b)].Decode (mRangeDecoder) == 1) {  	var s = (b == 0xE8) ? mCallStream : mJumpStream;  	uint src = 0;  	for (i = 0; i < 4; i++) {  		if (s.Read (tempBuffer' 0' 1) == 0)  			throw new EndOfStreamException ();  		src <<= 8;  		src |= tempBuffer [0];  	}  	uint dest = src - (uint)(mWritten + 4);  	mWritten++;  	yield return (byte)dest;  	mWritten++;  	yield return (byte)(dest >> 8);  	mWritten++;  	yield return (byte)(dest >> 16);  	mWritten++;  	yield return (byte)(dest >> 24);  	prevByte = (byte)(dest >> 24);  	processedBytes += 4;  } else {  	prevByte = b;  }  
Magic Number,ManagedLzma.SevenZip.Reader,Bcj2ArchiveDecoder,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\Bcj2Decoder.cs,Run,The following statement contains a magic number: for (i = 0; i < 4; i++) {  	if (s.Read (tempBuffer' 0' 1) == 0)  		throw new EndOfStreamException ();  	src <<= 8;  	src |= tempBuffer [0];  }  
Magic Number,ManagedLzma.SevenZip.Reader,Bcj2ArchiveDecoder,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\Bcj2Decoder.cs,Run,The following statement contains a magic number: for (i = 0; i < 4; i++) {  	if (s.Read (tempBuffer' 0' 1) == 0)  		throw new EndOfStreamException ();  	src <<= 8;  	src |= tempBuffer [0];  }  
Magic Number,ManagedLzma.SevenZip.Reader,Bcj2ArchiveDecoder,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\Bcj2Decoder.cs,Run,The following statement contains a magic number: src <<= 8;  
Magic Number,ManagedLzma.SevenZip.Reader,Bcj2ArchiveDecoder,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\Bcj2Decoder.cs,Run,The following statement contains a magic number: yield return (byte)(dest >> 8);  
Magic Number,ManagedLzma.SevenZip.Reader,Bcj2ArchiveDecoder,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\Bcj2Decoder.cs,Run,The following statement contains a magic number: yield return (byte)(dest >> 16);  
Magic Number,ManagedLzma.SevenZip.Reader,Bcj2ArchiveDecoder,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\Bcj2Decoder.cs,Run,The following statement contains a magic number: yield return (byte)(dest >> 24);  
Magic Number,ManagedLzma.SevenZip.Reader,Bcj2ArchiveDecoder,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\Bcj2Decoder.cs,Run,The following statement contains a magic number: prevByte = (byte)(dest >> 24);  
Magic Number,ManagedLzma.SevenZip.Reader,Bcj2ArchiveDecoder,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\Bcj2Decoder.cs,Run,The following statement contains a magic number: processedBytes += 4;  
Magic Number,ManagedLzma.SevenZip.Reader,BcjArchiveDecoder,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\BcjDecoder.cs,BcjArchiveDecoder,The following statement contains a magic number: mBuffer = new byte[4 << 10];  
Magic Number,ManagedLzma.SevenZip.Reader,BcjArchiveDecoder,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\BcjDecoder.cs,BcjArchiveDecoder,The following statement contains a magic number: mBuffer = new byte[4 << 10];  
Magic Number,ManagedLzma.SevenZip.Reader,BcjArchiveDecoder,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\BcjDecoder.cs,DecodeInto,The following statement contains a magic number: while (mEnding - mOffset < 5) {  	if (mInputEnd) {  		// if less than 5 bytes are left they are copied  		int n = 0;  		while (mOffset < mEnding && count > 0) {  			buffer [offset++] = mBuffer [mOffset++];  			count--;  			n++;  		}  		return n;  	}  	if (mBuffer.Length - mOffset < 5) {  		Buffer.BlockCopy (mBuffer' mOffset' mBuffer' 0' mEnding - mOffset);  		mEnding -= mOffset;  		mOffset = 0;  	}  	int delta = mInput.Read (mBuffer' mEnding' mBuffer.Length - mEnding);  	if (delta == 0)  		mInputEnd = true;  	else  		mEnding += delta;  }  
Magic Number,ManagedLzma.SevenZip.Reader,BcjArchiveDecoder,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\BcjDecoder.cs,DecodeInto,The following statement contains a magic number: while (mEnding - mOffset < 5) {  	if (mInputEnd) {  		// if less than 5 bytes are left they are copied  		int n = 0;  		while (mOffset < mEnding && count > 0) {  			buffer [offset++] = mBuffer [mOffset++];  			count--;  			n++;  		}  		return n;  	}  	if (mBuffer.Length - mOffset < 5) {  		Buffer.BlockCopy (mBuffer' mOffset' mBuffer' 0' mEnding - mOffset);  		mEnding -= mOffset;  		mOffset = 0;  	}  	int delta = mInput.Read (mBuffer' mEnding' mBuffer.Length - mEnding);  	if (delta == 0)  		mInputEnd = true;  	else  		mEnding += delta;  }  
Magic Number,ManagedLzma.SevenZip.Reader,BcjArchiveDecoder,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\BcjDecoder.cs,DecodeInto,The following statement contains a magic number: if (mBuffer.Length - mOffset < 5) {  	Buffer.BlockCopy (mBuffer' mOffset' mBuffer' 0' mEnding - mOffset);  	mEnding -= mOffset;  	mOffset = 0;  }  
Magic Number,ManagedLzma.SevenZip.Reader,BcjArchiveDecoder,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\BcjDecoder.cs,x86_Convert,The following statement contains a magic number: if (size < 5)  	return 0;  
Magic Number,ManagedLzma.SevenZip.Reader,BcjArchiveDecoder,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\BcjDecoder.cs,x86_Convert,The following statement contains a magic number: ip += 5;  
Magic Number,ManagedLzma.SevenZip.Reader,BcjArchiveDecoder,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\BcjDecoder.cs,x86_Convert,The following statement contains a magic number: for (; ;) {  	var p = data + bufferPos;  	var limit = data + size - 4;  	while (p < limit && (p [0] & 0xFE) != 0xE8)  		p++;  	bufferPos = (int)(p - data);  	if (p >= limit)  		break;  	prevPosT = bufferPos - prevPosT;  	if (prevPosT > 3) {  		prevMask = 0;  	} else {  		prevMask = (prevMask << ((int)prevPosT - 1)) & 0x7;  		if (prevMask != 0) {  			byte b = p [4 - kMaskToBitNumber [prevMask]];  			if (!kMaskToAllowedStatus [prevMask] || Test86MSByte (b)) {  				prevPosT = bufferPos;  				prevMask = ((prevMask << 1) & 0x7) | 1;  				bufferPos++;  				continue;  			}  		}  	}  	prevPosT = bufferPos;  	if (Test86MSByte (p [4])) {  		uint src = ((uint)p [4] << 24) | ((uint)p [3] << 16) | ((uint)p [2] << 8) | ((uint)p [1]);  		uint dest;  		for (; ;) {  			dest = src - (ip + (uint)bufferPos);  			if (prevMask == 0)  				break;  			int index = kMaskToBitNumber [prevMask] * 8;  			byte b = (byte)(dest >> (24 - index));  			if (!Test86MSByte (b))  				break;  			src = dest ^ ((1u << (32 - index)) - 1);  		}  		p [4] = (byte)(~(((dest >> 24) & 1) - 1));  		p [3] = (byte)(dest >> 16);  		p [2] = (byte)(dest >> 8);  		p [1] = (byte)dest;  		bufferPos += 5;  	} else {  		prevMask = ((prevMask << 1) & 0x7) | 1;  		bufferPos++;  	}  }  
Magic Number,ManagedLzma.SevenZip.Reader,BcjArchiveDecoder,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\BcjDecoder.cs,x86_Convert,The following statement contains a magic number: for (; ;) {  	var p = data + bufferPos;  	var limit = data + size - 4;  	while (p < limit && (p [0] & 0xFE) != 0xE8)  		p++;  	bufferPos = (int)(p - data);  	if (p >= limit)  		break;  	prevPosT = bufferPos - prevPosT;  	if (prevPosT > 3) {  		prevMask = 0;  	} else {  		prevMask = (prevMask << ((int)prevPosT - 1)) & 0x7;  		if (prevMask != 0) {  			byte b = p [4 - kMaskToBitNumber [prevMask]];  			if (!kMaskToAllowedStatus [prevMask] || Test86MSByte (b)) {  				prevPosT = bufferPos;  				prevMask = ((prevMask << 1) & 0x7) | 1;  				bufferPos++;  				continue;  			}  		}  	}  	prevPosT = bufferPos;  	if (Test86MSByte (p [4])) {  		uint src = ((uint)p [4] << 24) | ((uint)p [3] << 16) | ((uint)p [2] << 8) | ((uint)p [1]);  		uint dest;  		for (; ;) {  			dest = src - (ip + (uint)bufferPos);  			if (prevMask == 0)  				break;  			int index = kMaskToBitNumber [prevMask] * 8;  			byte b = (byte)(dest >> (24 - index));  			if (!Test86MSByte (b))  				break;  			src = dest ^ ((1u << (32 - index)) - 1);  		}  		p [4] = (byte)(~(((dest >> 24) & 1) - 1));  		p [3] = (byte)(dest >> 16);  		p [2] = (byte)(dest >> 8);  		p [1] = (byte)dest;  		bufferPos += 5;  	} else {  		prevMask = ((prevMask << 1) & 0x7) | 1;  		bufferPos++;  	}  }  
Magic Number,ManagedLzma.SevenZip.Reader,BcjArchiveDecoder,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\BcjDecoder.cs,x86_Convert,The following statement contains a magic number: for (; ;) {  	var p = data + bufferPos;  	var limit = data + size - 4;  	while (p < limit && (p [0] & 0xFE) != 0xE8)  		p++;  	bufferPos = (int)(p - data);  	if (p >= limit)  		break;  	prevPosT = bufferPos - prevPosT;  	if (prevPosT > 3) {  		prevMask = 0;  	} else {  		prevMask = (prevMask << ((int)prevPosT - 1)) & 0x7;  		if (prevMask != 0) {  			byte b = p [4 - kMaskToBitNumber [prevMask]];  			if (!kMaskToAllowedStatus [prevMask] || Test86MSByte (b)) {  				prevPosT = bufferPos;  				prevMask = ((prevMask << 1) & 0x7) | 1;  				bufferPos++;  				continue;  			}  		}  	}  	prevPosT = bufferPos;  	if (Test86MSByte (p [4])) {  		uint src = ((uint)p [4] << 24) | ((uint)p [3] << 16) | ((uint)p [2] << 8) | ((uint)p [1]);  		uint dest;  		for (; ;) {  			dest = src - (ip + (uint)bufferPos);  			if (prevMask == 0)  				break;  			int index = kMaskToBitNumber [prevMask] * 8;  			byte b = (byte)(dest >> (24 - index));  			if (!Test86MSByte (b))  				break;  			src = dest ^ ((1u << (32 - index)) - 1);  		}  		p [4] = (byte)(~(((dest >> 24) & 1) - 1));  		p [3] = (byte)(dest >> 16);  		p [2] = (byte)(dest >> 8);  		p [1] = (byte)dest;  		bufferPos += 5;  	} else {  		prevMask = ((prevMask << 1) & 0x7) | 1;  		bufferPos++;  	}  }  
Magic Number,ManagedLzma.SevenZip.Reader,BcjArchiveDecoder,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\BcjDecoder.cs,x86_Convert,The following statement contains a magic number: for (; ;) {  	var p = data + bufferPos;  	var limit = data + size - 4;  	while (p < limit && (p [0] & 0xFE) != 0xE8)  		p++;  	bufferPos = (int)(p - data);  	if (p >= limit)  		break;  	prevPosT = bufferPos - prevPosT;  	if (prevPosT > 3) {  		prevMask = 0;  	} else {  		prevMask = (prevMask << ((int)prevPosT - 1)) & 0x7;  		if (prevMask != 0) {  			byte b = p [4 - kMaskToBitNumber [prevMask]];  			if (!kMaskToAllowedStatus [prevMask] || Test86MSByte (b)) {  				prevPosT = bufferPos;  				prevMask = ((prevMask << 1) & 0x7) | 1;  				bufferPos++;  				continue;  			}  		}  	}  	prevPosT = bufferPos;  	if (Test86MSByte (p [4])) {  		uint src = ((uint)p [4] << 24) | ((uint)p [3] << 16) | ((uint)p [2] << 8) | ((uint)p [1]);  		uint dest;  		for (; ;) {  			dest = src - (ip + (uint)bufferPos);  			if (prevMask == 0)  				break;  			int index = kMaskToBitNumber [prevMask] * 8;  			byte b = (byte)(dest >> (24 - index));  			if (!Test86MSByte (b))  				break;  			src = dest ^ ((1u << (32 - index)) - 1);  		}  		p [4] = (byte)(~(((dest >> 24) & 1) - 1));  		p [3] = (byte)(dest >> 16);  		p [2] = (byte)(dest >> 8);  		p [1] = (byte)dest;  		bufferPos += 5;  	} else {  		prevMask = ((prevMask << 1) & 0x7) | 1;  		bufferPos++;  	}  }  
Magic Number,ManagedLzma.SevenZip.Reader,BcjArchiveDecoder,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\BcjDecoder.cs,x86_Convert,The following statement contains a magic number: for (; ;) {  	var p = data + bufferPos;  	var limit = data + size - 4;  	while (p < limit && (p [0] & 0xFE) != 0xE8)  		p++;  	bufferPos = (int)(p - data);  	if (p >= limit)  		break;  	prevPosT = bufferPos - prevPosT;  	if (prevPosT > 3) {  		prevMask = 0;  	} else {  		prevMask = (prevMask << ((int)prevPosT - 1)) & 0x7;  		if (prevMask != 0) {  			byte b = p [4 - kMaskToBitNumber [prevMask]];  			if (!kMaskToAllowedStatus [prevMask] || Test86MSByte (b)) {  				prevPosT = bufferPos;  				prevMask = ((prevMask << 1) & 0x7) | 1;  				bufferPos++;  				continue;  			}  		}  	}  	prevPosT = bufferPos;  	if (Test86MSByte (p [4])) {  		uint src = ((uint)p [4] << 24) | ((uint)p [3] << 16) | ((uint)p [2] << 8) | ((uint)p [1]);  		uint dest;  		for (; ;) {  			dest = src - (ip + (uint)bufferPos);  			if (prevMask == 0)  				break;  			int index = kMaskToBitNumber [prevMask] * 8;  			byte b = (byte)(dest >> (24 - index));  			if (!Test86MSByte (b))  				break;  			src = dest ^ ((1u << (32 - index)) - 1);  		}  		p [4] = (byte)(~(((dest >> 24) & 1) - 1));  		p [3] = (byte)(dest >> 16);  		p [2] = (byte)(dest >> 8);  		p [1] = (byte)dest;  		bufferPos += 5;  	} else {  		prevMask = ((prevMask << 1) & 0x7) | 1;  		bufferPos++;  	}  }  
Magic Number,ManagedLzma.SevenZip.Reader,BcjArchiveDecoder,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\BcjDecoder.cs,x86_Convert,The following statement contains a magic number: for (; ;) {  	var p = data + bufferPos;  	var limit = data + size - 4;  	while (p < limit && (p [0] & 0xFE) != 0xE8)  		p++;  	bufferPos = (int)(p - data);  	if (p >= limit)  		break;  	prevPosT = bufferPos - prevPosT;  	if (prevPosT > 3) {  		prevMask = 0;  	} else {  		prevMask = (prevMask << ((int)prevPosT - 1)) & 0x7;  		if (prevMask != 0) {  			byte b = p [4 - kMaskToBitNumber [prevMask]];  			if (!kMaskToAllowedStatus [prevMask] || Test86MSByte (b)) {  				prevPosT = bufferPos;  				prevMask = ((prevMask << 1) & 0x7) | 1;  				bufferPos++;  				continue;  			}  		}  	}  	prevPosT = bufferPos;  	if (Test86MSByte (p [4])) {  		uint src = ((uint)p [4] << 24) | ((uint)p [3] << 16) | ((uint)p [2] << 8) | ((uint)p [1]);  		uint dest;  		for (; ;) {  			dest = src - (ip + (uint)bufferPos);  			if (prevMask == 0)  				break;  			int index = kMaskToBitNumber [prevMask] * 8;  			byte b = (byte)(dest >> (24 - index));  			if (!Test86MSByte (b))  				break;  			src = dest ^ ((1u << (32 - index)) - 1);  		}  		p [4] = (byte)(~(((dest >> 24) & 1) - 1));  		p [3] = (byte)(dest >> 16);  		p [2] = (byte)(dest >> 8);  		p [1] = (byte)dest;  		bufferPos += 5;  	} else {  		prevMask = ((prevMask << 1) & 0x7) | 1;  		bufferPos++;  	}  }  
Magic Number,ManagedLzma.SevenZip.Reader,BcjArchiveDecoder,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\BcjDecoder.cs,x86_Convert,The following statement contains a magic number: for (; ;) {  	var p = data + bufferPos;  	var limit = data + size - 4;  	while (p < limit && (p [0] & 0xFE) != 0xE8)  		p++;  	bufferPos = (int)(p - data);  	if (p >= limit)  		break;  	prevPosT = bufferPos - prevPosT;  	if (prevPosT > 3) {  		prevMask = 0;  	} else {  		prevMask = (prevMask << ((int)prevPosT - 1)) & 0x7;  		if (prevMask != 0) {  			byte b = p [4 - kMaskToBitNumber [prevMask]];  			if (!kMaskToAllowedStatus [prevMask] || Test86MSByte (b)) {  				prevPosT = bufferPos;  				prevMask = ((prevMask << 1) & 0x7) | 1;  				bufferPos++;  				continue;  			}  		}  	}  	prevPosT = bufferPos;  	if (Test86MSByte (p [4])) {  		uint src = ((uint)p [4] << 24) | ((uint)p [3] << 16) | ((uint)p [2] << 8) | ((uint)p [1]);  		uint dest;  		for (; ;) {  			dest = src - (ip + (uint)bufferPos);  			if (prevMask == 0)  				break;  			int index = kMaskToBitNumber [prevMask] * 8;  			byte b = (byte)(dest >> (24 - index));  			if (!Test86MSByte (b))  				break;  			src = dest ^ ((1u << (32 - index)) - 1);  		}  		p [4] = (byte)(~(((dest >> 24) & 1) - 1));  		p [3] = (byte)(dest >> 16);  		p [2] = (byte)(dest >> 8);  		p [1] = (byte)dest;  		bufferPos += 5;  	} else {  		prevMask = ((prevMask << 1) & 0x7) | 1;  		bufferPos++;  	}  }  
Magic Number,ManagedLzma.SevenZip.Reader,BcjArchiveDecoder,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\BcjDecoder.cs,x86_Convert,The following statement contains a magic number: for (; ;) {  	var p = data + bufferPos;  	var limit = data + size - 4;  	while (p < limit && (p [0] & 0xFE) != 0xE8)  		p++;  	bufferPos = (int)(p - data);  	if (p >= limit)  		break;  	prevPosT = bufferPos - prevPosT;  	if (prevPosT > 3) {  		prevMask = 0;  	} else {  		prevMask = (prevMask << ((int)prevPosT - 1)) & 0x7;  		if (prevMask != 0) {  			byte b = p [4 - kMaskToBitNumber [prevMask]];  			if (!kMaskToAllowedStatus [prevMask] || Test86MSByte (b)) {  				prevPosT = bufferPos;  				prevMask = ((prevMask << 1) & 0x7) | 1;  				bufferPos++;  				continue;  			}  		}  	}  	prevPosT = bufferPos;  	if (Test86MSByte (p [4])) {  		uint src = ((uint)p [4] << 24) | ((uint)p [3] << 16) | ((uint)p [2] << 8) | ((uint)p [1]);  		uint dest;  		for (; ;) {  			dest = src - (ip + (uint)bufferPos);  			if (prevMask == 0)  				break;  			int index = kMaskToBitNumber [prevMask] * 8;  			byte b = (byte)(dest >> (24 - index));  			if (!Test86MSByte (b))  				break;  			src = dest ^ ((1u << (32 - index)) - 1);  		}  		p [4] = (byte)(~(((dest >> 24) & 1) - 1));  		p [3] = (byte)(dest >> 16);  		p [2] = (byte)(dest >> 8);  		p [1] = (byte)dest;  		bufferPos += 5;  	} else {  		prevMask = ((prevMask << 1) & 0x7) | 1;  		bufferPos++;  	}  }  
Magic Number,ManagedLzma.SevenZip.Reader,BcjArchiveDecoder,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\BcjDecoder.cs,x86_Convert,The following statement contains a magic number: for (; ;) {  	var p = data + bufferPos;  	var limit = data + size - 4;  	while (p < limit && (p [0] & 0xFE) != 0xE8)  		p++;  	bufferPos = (int)(p - data);  	if (p >= limit)  		break;  	prevPosT = bufferPos - prevPosT;  	if (prevPosT > 3) {  		prevMask = 0;  	} else {  		prevMask = (prevMask << ((int)prevPosT - 1)) & 0x7;  		if (prevMask != 0) {  			byte b = p [4 - kMaskToBitNumber [prevMask]];  			if (!kMaskToAllowedStatus [prevMask] || Test86MSByte (b)) {  				prevPosT = bufferPos;  				prevMask = ((prevMask << 1) & 0x7) | 1;  				bufferPos++;  				continue;  			}  		}  	}  	prevPosT = bufferPos;  	if (Test86MSByte (p [4])) {  		uint src = ((uint)p [4] << 24) | ((uint)p [3] << 16) | ((uint)p [2] << 8) | ((uint)p [1]);  		uint dest;  		for (; ;) {  			dest = src - (ip + (uint)bufferPos);  			if (prevMask == 0)  				break;  			int index = kMaskToBitNumber [prevMask] * 8;  			byte b = (byte)(dest >> (24 - index));  			if (!Test86MSByte (b))  				break;  			src = dest ^ ((1u << (32 - index)) - 1);  		}  		p [4] = (byte)(~(((dest >> 24) & 1) - 1));  		p [3] = (byte)(dest >> 16);  		p [2] = (byte)(dest >> 8);  		p [1] = (byte)dest;  		bufferPos += 5;  	} else {  		prevMask = ((prevMask << 1) & 0x7) | 1;  		bufferPos++;  	}  }  
Magic Number,ManagedLzma.SevenZip.Reader,BcjArchiveDecoder,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\BcjDecoder.cs,x86_Convert,The following statement contains a magic number: for (; ;) {  	var p = data + bufferPos;  	var limit = data + size - 4;  	while (p < limit && (p [0] & 0xFE) != 0xE8)  		p++;  	bufferPos = (int)(p - data);  	if (p >= limit)  		break;  	prevPosT = bufferPos - prevPosT;  	if (prevPosT > 3) {  		prevMask = 0;  	} else {  		prevMask = (prevMask << ((int)prevPosT - 1)) & 0x7;  		if (prevMask != 0) {  			byte b = p [4 - kMaskToBitNumber [prevMask]];  			if (!kMaskToAllowedStatus [prevMask] || Test86MSByte (b)) {  				prevPosT = bufferPos;  				prevMask = ((prevMask << 1) & 0x7) | 1;  				bufferPos++;  				continue;  			}  		}  	}  	prevPosT = bufferPos;  	if (Test86MSByte (p [4])) {  		uint src = ((uint)p [4] << 24) | ((uint)p [3] << 16) | ((uint)p [2] << 8) | ((uint)p [1]);  		uint dest;  		for (; ;) {  			dest = src - (ip + (uint)bufferPos);  			if (prevMask == 0)  				break;  			int index = kMaskToBitNumber [prevMask] * 8;  			byte b = (byte)(dest >> (24 - index));  			if (!Test86MSByte (b))  				break;  			src = dest ^ ((1u << (32 - index)) - 1);  		}  		p [4] = (byte)(~(((dest >> 24) & 1) - 1));  		p [3] = (byte)(dest >> 16);  		p [2] = (byte)(dest >> 8);  		p [1] = (byte)dest;  		bufferPos += 5;  	} else {  		prevMask = ((prevMask << 1) & 0x7) | 1;  		bufferPos++;  	}  }  
Magic Number,ManagedLzma.SevenZip.Reader,BcjArchiveDecoder,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\BcjDecoder.cs,x86_Convert,The following statement contains a magic number: for (; ;) {  	var p = data + bufferPos;  	var limit = data + size - 4;  	while (p < limit && (p [0] & 0xFE) != 0xE8)  		p++;  	bufferPos = (int)(p - data);  	if (p >= limit)  		break;  	prevPosT = bufferPos - prevPosT;  	if (prevPosT > 3) {  		prevMask = 0;  	} else {  		prevMask = (prevMask << ((int)prevPosT - 1)) & 0x7;  		if (prevMask != 0) {  			byte b = p [4 - kMaskToBitNumber [prevMask]];  			if (!kMaskToAllowedStatus [prevMask] || Test86MSByte (b)) {  				prevPosT = bufferPos;  				prevMask = ((prevMask << 1) & 0x7) | 1;  				bufferPos++;  				continue;  			}  		}  	}  	prevPosT = bufferPos;  	if (Test86MSByte (p [4])) {  		uint src = ((uint)p [4] << 24) | ((uint)p [3] << 16) | ((uint)p [2] << 8) | ((uint)p [1]);  		uint dest;  		for (; ;) {  			dest = src - (ip + (uint)bufferPos);  			if (prevMask == 0)  				break;  			int index = kMaskToBitNumber [prevMask] * 8;  			byte b = (byte)(dest >> (24 - index));  			if (!Test86MSByte (b))  				break;  			src = dest ^ ((1u << (32 - index)) - 1);  		}  		p [4] = (byte)(~(((dest >> 24) & 1) - 1));  		p [3] = (byte)(dest >> 16);  		p [2] = (byte)(dest >> 8);  		p [1] = (byte)dest;  		bufferPos += 5;  	} else {  		prevMask = ((prevMask << 1) & 0x7) | 1;  		bufferPos++;  	}  }  
Magic Number,ManagedLzma.SevenZip.Reader,BcjArchiveDecoder,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\BcjDecoder.cs,x86_Convert,The following statement contains a magic number: for (; ;) {  	var p = data + bufferPos;  	var limit = data + size - 4;  	while (p < limit && (p [0] & 0xFE) != 0xE8)  		p++;  	bufferPos = (int)(p - data);  	if (p >= limit)  		break;  	prevPosT = bufferPos - prevPosT;  	if (prevPosT > 3) {  		prevMask = 0;  	} else {  		prevMask = (prevMask << ((int)prevPosT - 1)) & 0x7;  		if (prevMask != 0) {  			byte b = p [4 - kMaskToBitNumber [prevMask]];  			if (!kMaskToAllowedStatus [prevMask] || Test86MSByte (b)) {  				prevPosT = bufferPos;  				prevMask = ((prevMask << 1) & 0x7) | 1;  				bufferPos++;  				continue;  			}  		}  	}  	prevPosT = bufferPos;  	if (Test86MSByte (p [4])) {  		uint src = ((uint)p [4] << 24) | ((uint)p [3] << 16) | ((uint)p [2] << 8) | ((uint)p [1]);  		uint dest;  		for (; ;) {  			dest = src - (ip + (uint)bufferPos);  			if (prevMask == 0)  				break;  			int index = kMaskToBitNumber [prevMask] * 8;  			byte b = (byte)(dest >> (24 - index));  			if (!Test86MSByte (b))  				break;  			src = dest ^ ((1u << (32 - index)) - 1);  		}  		p [4] = (byte)(~(((dest >> 24) & 1) - 1));  		p [3] = (byte)(dest >> 16);  		p [2] = (byte)(dest >> 8);  		p [1] = (byte)dest;  		bufferPos += 5;  	} else {  		prevMask = ((prevMask << 1) & 0x7) | 1;  		bufferPos++;  	}  }  
Magic Number,ManagedLzma.SevenZip.Reader,BcjArchiveDecoder,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\BcjDecoder.cs,x86_Convert,The following statement contains a magic number: for (; ;) {  	var p = data + bufferPos;  	var limit = data + size - 4;  	while (p < limit && (p [0] & 0xFE) != 0xE8)  		p++;  	bufferPos = (int)(p - data);  	if (p >= limit)  		break;  	prevPosT = bufferPos - prevPosT;  	if (prevPosT > 3) {  		prevMask = 0;  	} else {  		prevMask = (prevMask << ((int)prevPosT - 1)) & 0x7;  		if (prevMask != 0) {  			byte b = p [4 - kMaskToBitNumber [prevMask]];  			if (!kMaskToAllowedStatus [prevMask] || Test86MSByte (b)) {  				prevPosT = bufferPos;  				prevMask = ((prevMask << 1) & 0x7) | 1;  				bufferPos++;  				continue;  			}  		}  	}  	prevPosT = bufferPos;  	if (Test86MSByte (p [4])) {  		uint src = ((uint)p [4] << 24) | ((uint)p [3] << 16) | ((uint)p [2] << 8) | ((uint)p [1]);  		uint dest;  		for (; ;) {  			dest = src - (ip + (uint)bufferPos);  			if (prevMask == 0)  				break;  			int index = kMaskToBitNumber [prevMask] * 8;  			byte b = (byte)(dest >> (24 - index));  			if (!Test86MSByte (b))  				break;  			src = dest ^ ((1u << (32 - index)) - 1);  		}  		p [4] = (byte)(~(((dest >> 24) & 1) - 1));  		p [3] = (byte)(dest >> 16);  		p [2] = (byte)(dest >> 8);  		p [1] = (byte)dest;  		bufferPos += 5;  	} else {  		prevMask = ((prevMask << 1) & 0x7) | 1;  		bufferPos++;  	}  }  
Magic Number,ManagedLzma.SevenZip.Reader,BcjArchiveDecoder,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\BcjDecoder.cs,x86_Convert,The following statement contains a magic number: for (; ;) {  	var p = data + bufferPos;  	var limit = data + size - 4;  	while (p < limit && (p [0] & 0xFE) != 0xE8)  		p++;  	bufferPos = (int)(p - data);  	if (p >= limit)  		break;  	prevPosT = bufferPos - prevPosT;  	if (prevPosT > 3) {  		prevMask = 0;  	} else {  		prevMask = (prevMask << ((int)prevPosT - 1)) & 0x7;  		if (prevMask != 0) {  			byte b = p [4 - kMaskToBitNumber [prevMask]];  			if (!kMaskToAllowedStatus [prevMask] || Test86MSByte (b)) {  				prevPosT = bufferPos;  				prevMask = ((prevMask << 1) & 0x7) | 1;  				bufferPos++;  				continue;  			}  		}  	}  	prevPosT = bufferPos;  	if (Test86MSByte (p [4])) {  		uint src = ((uint)p [4] << 24) | ((uint)p [3] << 16) | ((uint)p [2] << 8) | ((uint)p [1]);  		uint dest;  		for (; ;) {  			dest = src - (ip + (uint)bufferPos);  			if (prevMask == 0)  				break;  			int index = kMaskToBitNumber [prevMask] * 8;  			byte b = (byte)(dest >> (24 - index));  			if (!Test86MSByte (b))  				break;  			src = dest ^ ((1u << (32 - index)) - 1);  		}  		p [4] = (byte)(~(((dest >> 24) & 1) - 1));  		p [3] = (byte)(dest >> 16);  		p [2] = (byte)(dest >> 8);  		p [1] = (byte)dest;  		bufferPos += 5;  	} else {  		prevMask = ((prevMask << 1) & 0x7) | 1;  		bufferPos++;  	}  }  
Magic Number,ManagedLzma.SevenZip.Reader,BcjArchiveDecoder,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\BcjDecoder.cs,x86_Convert,The following statement contains a magic number: for (; ;) {  	var p = data + bufferPos;  	var limit = data + size - 4;  	while (p < limit && (p [0] & 0xFE) != 0xE8)  		p++;  	bufferPos = (int)(p - data);  	if (p >= limit)  		break;  	prevPosT = bufferPos - prevPosT;  	if (prevPosT > 3) {  		prevMask = 0;  	} else {  		prevMask = (prevMask << ((int)prevPosT - 1)) & 0x7;  		if (prevMask != 0) {  			byte b = p [4 - kMaskToBitNumber [prevMask]];  			if (!kMaskToAllowedStatus [prevMask] || Test86MSByte (b)) {  				prevPosT = bufferPos;  				prevMask = ((prevMask << 1) & 0x7) | 1;  				bufferPos++;  				continue;  			}  		}  	}  	prevPosT = bufferPos;  	if (Test86MSByte (p [4])) {  		uint src = ((uint)p [4] << 24) | ((uint)p [3] << 16) | ((uint)p [2] << 8) | ((uint)p [1]);  		uint dest;  		for (; ;) {  			dest = src - (ip + (uint)bufferPos);  			if (prevMask == 0)  				break;  			int index = kMaskToBitNumber [prevMask] * 8;  			byte b = (byte)(dest >> (24 - index));  			if (!Test86MSByte (b))  				break;  			src = dest ^ ((1u << (32 - index)) - 1);  		}  		p [4] = (byte)(~(((dest >> 24) & 1) - 1));  		p [3] = (byte)(dest >> 16);  		p [2] = (byte)(dest >> 8);  		p [1] = (byte)dest;  		bufferPos += 5;  	} else {  		prevMask = ((prevMask << 1) & 0x7) | 1;  		bufferPos++;  	}  }  
Magic Number,ManagedLzma.SevenZip.Reader,BcjArchiveDecoder,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\BcjDecoder.cs,x86_Convert,The following statement contains a magic number: for (; ;) {  	var p = data + bufferPos;  	var limit = data + size - 4;  	while (p < limit && (p [0] & 0xFE) != 0xE8)  		p++;  	bufferPos = (int)(p - data);  	if (p >= limit)  		break;  	prevPosT = bufferPos - prevPosT;  	if (prevPosT > 3) {  		prevMask = 0;  	} else {  		prevMask = (prevMask << ((int)prevPosT - 1)) & 0x7;  		if (prevMask != 0) {  			byte b = p [4 - kMaskToBitNumber [prevMask]];  			if (!kMaskToAllowedStatus [prevMask] || Test86MSByte (b)) {  				prevPosT = bufferPos;  				prevMask = ((prevMask << 1) & 0x7) | 1;  				bufferPos++;  				continue;  			}  		}  	}  	prevPosT = bufferPos;  	if (Test86MSByte (p [4])) {  		uint src = ((uint)p [4] << 24) | ((uint)p [3] << 16) | ((uint)p [2] << 8) | ((uint)p [1]);  		uint dest;  		for (; ;) {  			dest = src - (ip + (uint)bufferPos);  			if (prevMask == 0)  				break;  			int index = kMaskToBitNumber [prevMask] * 8;  			byte b = (byte)(dest >> (24 - index));  			if (!Test86MSByte (b))  				break;  			src = dest ^ ((1u << (32 - index)) - 1);  		}  		p [4] = (byte)(~(((dest >> 24) & 1) - 1));  		p [3] = (byte)(dest >> 16);  		p [2] = (byte)(dest >> 8);  		p [1] = (byte)dest;  		bufferPos += 5;  	} else {  		prevMask = ((prevMask << 1) & 0x7) | 1;  		bufferPos++;  	}  }  
Magic Number,ManagedLzma.SevenZip.Reader,BcjArchiveDecoder,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\BcjDecoder.cs,x86_Convert,The following statement contains a magic number: for (; ;) {  	var p = data + bufferPos;  	var limit = data + size - 4;  	while (p < limit && (p [0] & 0xFE) != 0xE8)  		p++;  	bufferPos = (int)(p - data);  	if (p >= limit)  		break;  	prevPosT = bufferPos - prevPosT;  	if (prevPosT > 3) {  		prevMask = 0;  	} else {  		prevMask = (prevMask << ((int)prevPosT - 1)) & 0x7;  		if (prevMask != 0) {  			byte b = p [4 - kMaskToBitNumber [prevMask]];  			if (!kMaskToAllowedStatus [prevMask] || Test86MSByte (b)) {  				prevPosT = bufferPos;  				prevMask = ((prevMask << 1) & 0x7) | 1;  				bufferPos++;  				continue;  			}  		}  	}  	prevPosT = bufferPos;  	if (Test86MSByte (p [4])) {  		uint src = ((uint)p [4] << 24) | ((uint)p [3] << 16) | ((uint)p [2] << 8) | ((uint)p [1]);  		uint dest;  		for (; ;) {  			dest = src - (ip + (uint)bufferPos);  			if (prevMask == 0)  				break;  			int index = kMaskToBitNumber [prevMask] * 8;  			byte b = (byte)(dest >> (24 - index));  			if (!Test86MSByte (b))  				break;  			src = dest ^ ((1u << (32 - index)) - 1);  		}  		p [4] = (byte)(~(((dest >> 24) & 1) - 1));  		p [3] = (byte)(dest >> 16);  		p [2] = (byte)(dest >> 8);  		p [1] = (byte)dest;  		bufferPos += 5;  	} else {  		prevMask = ((prevMask << 1) & 0x7) | 1;  		bufferPos++;  	}  }  
Magic Number,ManagedLzma.SevenZip.Reader,BcjArchiveDecoder,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\BcjDecoder.cs,x86_Convert,The following statement contains a magic number: for (; ;) {  	var p = data + bufferPos;  	var limit = data + size - 4;  	while (p < limit && (p [0] & 0xFE) != 0xE8)  		p++;  	bufferPos = (int)(p - data);  	if (p >= limit)  		break;  	prevPosT = bufferPos - prevPosT;  	if (prevPosT > 3) {  		prevMask = 0;  	} else {  		prevMask = (prevMask << ((int)prevPosT - 1)) & 0x7;  		if (prevMask != 0) {  			byte b = p [4 - kMaskToBitNumber [prevMask]];  			if (!kMaskToAllowedStatus [prevMask] || Test86MSByte (b)) {  				prevPosT = bufferPos;  				prevMask = ((prevMask << 1) & 0x7) | 1;  				bufferPos++;  				continue;  			}  		}  	}  	prevPosT = bufferPos;  	if (Test86MSByte (p [4])) {  		uint src = ((uint)p [4] << 24) | ((uint)p [3] << 16) | ((uint)p [2] << 8) | ((uint)p [1]);  		uint dest;  		for (; ;) {  			dest = src - (ip + (uint)bufferPos);  			if (prevMask == 0)  				break;  			int index = kMaskToBitNumber [prevMask] * 8;  			byte b = (byte)(dest >> (24 - index));  			if (!Test86MSByte (b))  				break;  			src = dest ^ ((1u << (32 - index)) - 1);  		}  		p [4] = (byte)(~(((dest >> 24) & 1) - 1));  		p [3] = (byte)(dest >> 16);  		p [2] = (byte)(dest >> 8);  		p [1] = (byte)dest;  		bufferPos += 5;  	} else {  		prevMask = ((prevMask << 1) & 0x7) | 1;  		bufferPos++;  	}  }  
Magic Number,ManagedLzma.SevenZip.Reader,BcjArchiveDecoder,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\BcjDecoder.cs,x86_Convert,The following statement contains a magic number: for (; ;) {  	var p = data + bufferPos;  	var limit = data + size - 4;  	while (p < limit && (p [0] & 0xFE) != 0xE8)  		p++;  	bufferPos = (int)(p - data);  	if (p >= limit)  		break;  	prevPosT = bufferPos - prevPosT;  	if (prevPosT > 3) {  		prevMask = 0;  	} else {  		prevMask = (prevMask << ((int)prevPosT - 1)) & 0x7;  		if (prevMask != 0) {  			byte b = p [4 - kMaskToBitNumber [prevMask]];  			if (!kMaskToAllowedStatus [prevMask] || Test86MSByte (b)) {  				prevPosT = bufferPos;  				prevMask = ((prevMask << 1) & 0x7) | 1;  				bufferPos++;  				continue;  			}  		}  	}  	prevPosT = bufferPos;  	if (Test86MSByte (p [4])) {  		uint src = ((uint)p [4] << 24) | ((uint)p [3] << 16) | ((uint)p [2] << 8) | ((uint)p [1]);  		uint dest;  		for (; ;) {  			dest = src - (ip + (uint)bufferPos);  			if (prevMask == 0)  				break;  			int index = kMaskToBitNumber [prevMask] * 8;  			byte b = (byte)(dest >> (24 - index));  			if (!Test86MSByte (b))  				break;  			src = dest ^ ((1u << (32 - index)) - 1);  		}  		p [4] = (byte)(~(((dest >> 24) & 1) - 1));  		p [3] = (byte)(dest >> 16);  		p [2] = (byte)(dest >> 8);  		p [1] = (byte)dest;  		bufferPos += 5;  	} else {  		prevMask = ((prevMask << 1) & 0x7) | 1;  		bufferPos++;  	}  }  
Magic Number,ManagedLzma.SevenZip.Reader,BcjArchiveDecoder,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\BcjDecoder.cs,x86_Convert,The following statement contains a magic number: for (; ;) {  	var p = data + bufferPos;  	var limit = data + size - 4;  	while (p < limit && (p [0] & 0xFE) != 0xE8)  		p++;  	bufferPos = (int)(p - data);  	if (p >= limit)  		break;  	prevPosT = bufferPos - prevPosT;  	if (prevPosT > 3) {  		prevMask = 0;  	} else {  		prevMask = (prevMask << ((int)prevPosT - 1)) & 0x7;  		if (prevMask != 0) {  			byte b = p [4 - kMaskToBitNumber [prevMask]];  			if (!kMaskToAllowedStatus [prevMask] || Test86MSByte (b)) {  				prevPosT = bufferPos;  				prevMask = ((prevMask << 1) & 0x7) | 1;  				bufferPos++;  				continue;  			}  		}  	}  	prevPosT = bufferPos;  	if (Test86MSByte (p [4])) {  		uint src = ((uint)p [4] << 24) | ((uint)p [3] << 16) | ((uint)p [2] << 8) | ((uint)p [1]);  		uint dest;  		for (; ;) {  			dest = src - (ip + (uint)bufferPos);  			if (prevMask == 0)  				break;  			int index = kMaskToBitNumber [prevMask] * 8;  			byte b = (byte)(dest >> (24 - index));  			if (!Test86MSByte (b))  				break;  			src = dest ^ ((1u << (32 - index)) - 1);  		}  		p [4] = (byte)(~(((dest >> 24) & 1) - 1));  		p [3] = (byte)(dest >> 16);  		p [2] = (byte)(dest >> 8);  		p [1] = (byte)dest;  		bufferPos += 5;  	} else {  		prevMask = ((prevMask << 1) & 0x7) | 1;  		bufferPos++;  	}  }  
Magic Number,ManagedLzma.SevenZip.Reader,BcjArchiveDecoder,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\BcjDecoder.cs,x86_Convert,The following statement contains a magic number: if (prevPosT > 3) {  	prevMask = 0;  } else {  	prevMask = (prevMask << ((int)prevPosT - 1)) & 0x7;  	if (prevMask != 0) {  		byte b = p [4 - kMaskToBitNumber [prevMask]];  		if (!kMaskToAllowedStatus [prevMask] || Test86MSByte (b)) {  			prevPosT = bufferPos;  			prevMask = ((prevMask << 1) & 0x7) | 1;  			bufferPos++;  			continue;  		}  	}  }  
Magic Number,ManagedLzma.SevenZip.Reader,BcjArchiveDecoder,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\BcjDecoder.cs,x86_Convert,The following statement contains a magic number: if (prevPosT > 3) {  	prevMask = 0;  } else {  	prevMask = (prevMask << ((int)prevPosT - 1)) & 0x7;  	if (prevMask != 0) {  		byte b = p [4 - kMaskToBitNumber [prevMask]];  		if (!kMaskToAllowedStatus [prevMask] || Test86MSByte (b)) {  			prevPosT = bufferPos;  			prevMask = ((prevMask << 1) & 0x7) | 1;  			bufferPos++;  			continue;  		}  	}  }  
Magic Number,ManagedLzma.SevenZip.Reader,BcjArchiveDecoder,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\BcjDecoder.cs,x86_Convert,The following statement contains a magic number: if (prevMask != 0) {  	byte b = p [4 - kMaskToBitNumber [prevMask]];  	if (!kMaskToAllowedStatus [prevMask] || Test86MSByte (b)) {  		prevPosT = bufferPos;  		prevMask = ((prevMask << 1) & 0x7) | 1;  		bufferPos++;  		continue;  	}  }  
Magic Number,ManagedLzma.SevenZip.Reader,BcjArchiveDecoder,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\BcjDecoder.cs,x86_Convert,The following statement contains a magic number: if (Test86MSByte (p [4])) {  	uint src = ((uint)p [4] << 24) | ((uint)p [3] << 16) | ((uint)p [2] << 8) | ((uint)p [1]);  	uint dest;  	for (; ;) {  		dest = src - (ip + (uint)bufferPos);  		if (prevMask == 0)  			break;  		int index = kMaskToBitNumber [prevMask] * 8;  		byte b = (byte)(dest >> (24 - index));  		if (!Test86MSByte (b))  			break;  		src = dest ^ ((1u << (32 - index)) - 1);  	}  	p [4] = (byte)(~(((dest >> 24) & 1) - 1));  	p [3] = (byte)(dest >> 16);  	p [2] = (byte)(dest >> 8);  	p [1] = (byte)dest;  	bufferPos += 5;  } else {  	prevMask = ((prevMask << 1) & 0x7) | 1;  	bufferPos++;  }  
Magic Number,ManagedLzma.SevenZip.Reader,BcjArchiveDecoder,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\BcjDecoder.cs,x86_Convert,The following statement contains a magic number: if (Test86MSByte (p [4])) {  	uint src = ((uint)p [4] << 24) | ((uint)p [3] << 16) | ((uint)p [2] << 8) | ((uint)p [1]);  	uint dest;  	for (; ;) {  		dest = src - (ip + (uint)bufferPos);  		if (prevMask == 0)  			break;  		int index = kMaskToBitNumber [prevMask] * 8;  		byte b = (byte)(dest >> (24 - index));  		if (!Test86MSByte (b))  			break;  		src = dest ^ ((1u << (32 - index)) - 1);  	}  	p [4] = (byte)(~(((dest >> 24) & 1) - 1));  	p [3] = (byte)(dest >> 16);  	p [2] = (byte)(dest >> 8);  	p [1] = (byte)dest;  	bufferPos += 5;  } else {  	prevMask = ((prevMask << 1) & 0x7) | 1;  	bufferPos++;  }  
Magic Number,ManagedLzma.SevenZip.Reader,BcjArchiveDecoder,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\BcjDecoder.cs,x86_Convert,The following statement contains a magic number: if (Test86MSByte (p [4])) {  	uint src = ((uint)p [4] << 24) | ((uint)p [3] << 16) | ((uint)p [2] << 8) | ((uint)p [1]);  	uint dest;  	for (; ;) {  		dest = src - (ip + (uint)bufferPos);  		if (prevMask == 0)  			break;  		int index = kMaskToBitNumber [prevMask] * 8;  		byte b = (byte)(dest >> (24 - index));  		if (!Test86MSByte (b))  			break;  		src = dest ^ ((1u << (32 - index)) - 1);  	}  	p [4] = (byte)(~(((dest >> 24) & 1) - 1));  	p [3] = (byte)(dest >> 16);  	p [2] = (byte)(dest >> 8);  	p [1] = (byte)dest;  	bufferPos += 5;  } else {  	prevMask = ((prevMask << 1) & 0x7) | 1;  	bufferPos++;  }  
Magic Number,ManagedLzma.SevenZip.Reader,BcjArchiveDecoder,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\BcjDecoder.cs,x86_Convert,The following statement contains a magic number: if (Test86MSByte (p [4])) {  	uint src = ((uint)p [4] << 24) | ((uint)p [3] << 16) | ((uint)p [2] << 8) | ((uint)p [1]);  	uint dest;  	for (; ;) {  		dest = src - (ip + (uint)bufferPos);  		if (prevMask == 0)  			break;  		int index = kMaskToBitNumber [prevMask] * 8;  		byte b = (byte)(dest >> (24 - index));  		if (!Test86MSByte (b))  			break;  		src = dest ^ ((1u << (32 - index)) - 1);  	}  	p [4] = (byte)(~(((dest >> 24) & 1) - 1));  	p [3] = (byte)(dest >> 16);  	p [2] = (byte)(dest >> 8);  	p [1] = (byte)dest;  	bufferPos += 5;  } else {  	prevMask = ((prevMask << 1) & 0x7) | 1;  	bufferPos++;  }  
Magic Number,ManagedLzma.SevenZip.Reader,BcjArchiveDecoder,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\BcjDecoder.cs,x86_Convert,The following statement contains a magic number: if (Test86MSByte (p [4])) {  	uint src = ((uint)p [4] << 24) | ((uint)p [3] << 16) | ((uint)p [2] << 8) | ((uint)p [1]);  	uint dest;  	for (; ;) {  		dest = src - (ip + (uint)bufferPos);  		if (prevMask == 0)  			break;  		int index = kMaskToBitNumber [prevMask] * 8;  		byte b = (byte)(dest >> (24 - index));  		if (!Test86MSByte (b))  			break;  		src = dest ^ ((1u << (32 - index)) - 1);  	}  	p [4] = (byte)(~(((dest >> 24) & 1) - 1));  	p [3] = (byte)(dest >> 16);  	p [2] = (byte)(dest >> 8);  	p [1] = (byte)dest;  	bufferPos += 5;  } else {  	prevMask = ((prevMask << 1) & 0x7) | 1;  	bufferPos++;  }  
Magic Number,ManagedLzma.SevenZip.Reader,BcjArchiveDecoder,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\BcjDecoder.cs,x86_Convert,The following statement contains a magic number: if (Test86MSByte (p [4])) {  	uint src = ((uint)p [4] << 24) | ((uint)p [3] << 16) | ((uint)p [2] << 8) | ((uint)p [1]);  	uint dest;  	for (; ;) {  		dest = src - (ip + (uint)bufferPos);  		if (prevMask == 0)  			break;  		int index = kMaskToBitNumber [prevMask] * 8;  		byte b = (byte)(dest >> (24 - index));  		if (!Test86MSByte (b))  			break;  		src = dest ^ ((1u << (32 - index)) - 1);  	}  	p [4] = (byte)(~(((dest >> 24) & 1) - 1));  	p [3] = (byte)(dest >> 16);  	p [2] = (byte)(dest >> 8);  	p [1] = (byte)dest;  	bufferPos += 5;  } else {  	prevMask = ((prevMask << 1) & 0x7) | 1;  	bufferPos++;  }  
Magic Number,ManagedLzma.SevenZip.Reader,BcjArchiveDecoder,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\BcjDecoder.cs,x86_Convert,The following statement contains a magic number: if (Test86MSByte (p [4])) {  	uint src = ((uint)p [4] << 24) | ((uint)p [3] << 16) | ((uint)p [2] << 8) | ((uint)p [1]);  	uint dest;  	for (; ;) {  		dest = src - (ip + (uint)bufferPos);  		if (prevMask == 0)  			break;  		int index = kMaskToBitNumber [prevMask] * 8;  		byte b = (byte)(dest >> (24 - index));  		if (!Test86MSByte (b))  			break;  		src = dest ^ ((1u << (32 - index)) - 1);  	}  	p [4] = (byte)(~(((dest >> 24) & 1) - 1));  	p [3] = (byte)(dest >> 16);  	p [2] = (byte)(dest >> 8);  	p [1] = (byte)dest;  	bufferPos += 5;  } else {  	prevMask = ((prevMask << 1) & 0x7) | 1;  	bufferPos++;  }  
Magic Number,ManagedLzma.SevenZip.Reader,BcjArchiveDecoder,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\BcjDecoder.cs,x86_Convert,The following statement contains a magic number: if (Test86MSByte (p [4])) {  	uint src = ((uint)p [4] << 24) | ((uint)p [3] << 16) | ((uint)p [2] << 8) | ((uint)p [1]);  	uint dest;  	for (; ;) {  		dest = src - (ip + (uint)bufferPos);  		if (prevMask == 0)  			break;  		int index = kMaskToBitNumber [prevMask] * 8;  		byte b = (byte)(dest >> (24 - index));  		if (!Test86MSByte (b))  			break;  		src = dest ^ ((1u << (32 - index)) - 1);  	}  	p [4] = (byte)(~(((dest >> 24) & 1) - 1));  	p [3] = (byte)(dest >> 16);  	p [2] = (byte)(dest >> 8);  	p [1] = (byte)dest;  	bufferPos += 5;  } else {  	prevMask = ((prevMask << 1) & 0x7) | 1;  	bufferPos++;  }  
Magic Number,ManagedLzma.SevenZip.Reader,BcjArchiveDecoder,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\BcjDecoder.cs,x86_Convert,The following statement contains a magic number: if (Test86MSByte (p [4])) {  	uint src = ((uint)p [4] << 24) | ((uint)p [3] << 16) | ((uint)p [2] << 8) | ((uint)p [1]);  	uint dest;  	for (; ;) {  		dest = src - (ip + (uint)bufferPos);  		if (prevMask == 0)  			break;  		int index = kMaskToBitNumber [prevMask] * 8;  		byte b = (byte)(dest >> (24 - index));  		if (!Test86MSByte (b))  			break;  		src = dest ^ ((1u << (32 - index)) - 1);  	}  	p [4] = (byte)(~(((dest >> 24) & 1) - 1));  	p [3] = (byte)(dest >> 16);  	p [2] = (byte)(dest >> 8);  	p [1] = (byte)dest;  	bufferPos += 5;  } else {  	prevMask = ((prevMask << 1) & 0x7) | 1;  	bufferPos++;  }  
Magic Number,ManagedLzma.SevenZip.Reader,BcjArchiveDecoder,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\BcjDecoder.cs,x86_Convert,The following statement contains a magic number: if (Test86MSByte (p [4])) {  	uint src = ((uint)p [4] << 24) | ((uint)p [3] << 16) | ((uint)p [2] << 8) | ((uint)p [1]);  	uint dest;  	for (; ;) {  		dest = src - (ip + (uint)bufferPos);  		if (prevMask == 0)  			break;  		int index = kMaskToBitNumber [prevMask] * 8;  		byte b = (byte)(dest >> (24 - index));  		if (!Test86MSByte (b))  			break;  		src = dest ^ ((1u << (32 - index)) - 1);  	}  	p [4] = (byte)(~(((dest >> 24) & 1) - 1));  	p [3] = (byte)(dest >> 16);  	p [2] = (byte)(dest >> 8);  	p [1] = (byte)dest;  	bufferPos += 5;  } else {  	prevMask = ((prevMask << 1) & 0x7) | 1;  	bufferPos++;  }  
Magic Number,ManagedLzma.SevenZip.Reader,BcjArchiveDecoder,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\BcjDecoder.cs,x86_Convert,The following statement contains a magic number: if (Test86MSByte (p [4])) {  	uint src = ((uint)p [4] << 24) | ((uint)p [3] << 16) | ((uint)p [2] << 8) | ((uint)p [1]);  	uint dest;  	for (; ;) {  		dest = src - (ip + (uint)bufferPos);  		if (prevMask == 0)  			break;  		int index = kMaskToBitNumber [prevMask] * 8;  		byte b = (byte)(dest >> (24 - index));  		if (!Test86MSByte (b))  			break;  		src = dest ^ ((1u << (32 - index)) - 1);  	}  	p [4] = (byte)(~(((dest >> 24) & 1) - 1));  	p [3] = (byte)(dest >> 16);  	p [2] = (byte)(dest >> 8);  	p [1] = (byte)dest;  	bufferPos += 5;  } else {  	prevMask = ((prevMask << 1) & 0x7) | 1;  	bufferPos++;  }  
Magic Number,ManagedLzma.SevenZip.Reader,BcjArchiveDecoder,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\BcjDecoder.cs,x86_Convert,The following statement contains a magic number: if (Test86MSByte (p [4])) {  	uint src = ((uint)p [4] << 24) | ((uint)p [3] << 16) | ((uint)p [2] << 8) | ((uint)p [1]);  	uint dest;  	for (; ;) {  		dest = src - (ip + (uint)bufferPos);  		if (prevMask == 0)  			break;  		int index = kMaskToBitNumber [prevMask] * 8;  		byte b = (byte)(dest >> (24 - index));  		if (!Test86MSByte (b))  			break;  		src = dest ^ ((1u << (32 - index)) - 1);  	}  	p [4] = (byte)(~(((dest >> 24) & 1) - 1));  	p [3] = (byte)(dest >> 16);  	p [2] = (byte)(dest >> 8);  	p [1] = (byte)dest;  	bufferPos += 5;  } else {  	prevMask = ((prevMask << 1) & 0x7) | 1;  	bufferPos++;  }  
Magic Number,ManagedLzma.SevenZip.Reader,BcjArchiveDecoder,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\BcjDecoder.cs,x86_Convert,The following statement contains a magic number: if (Test86MSByte (p [4])) {  	uint src = ((uint)p [4] << 24) | ((uint)p [3] << 16) | ((uint)p [2] << 8) | ((uint)p [1]);  	uint dest;  	for (; ;) {  		dest = src - (ip + (uint)bufferPos);  		if (prevMask == 0)  			break;  		int index = kMaskToBitNumber [prevMask] * 8;  		byte b = (byte)(dest >> (24 - index));  		if (!Test86MSByte (b))  			break;  		src = dest ^ ((1u << (32 - index)) - 1);  	}  	p [4] = (byte)(~(((dest >> 24) & 1) - 1));  	p [3] = (byte)(dest >> 16);  	p [2] = (byte)(dest >> 8);  	p [1] = (byte)dest;  	bufferPos += 5;  } else {  	prevMask = ((prevMask << 1) & 0x7) | 1;  	bufferPos++;  }  
Magic Number,ManagedLzma.SevenZip.Reader,BcjArchiveDecoder,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\BcjDecoder.cs,x86_Convert,The following statement contains a magic number: if (Test86MSByte (p [4])) {  	uint src = ((uint)p [4] << 24) | ((uint)p [3] << 16) | ((uint)p [2] << 8) | ((uint)p [1]);  	uint dest;  	for (; ;) {  		dest = src - (ip + (uint)bufferPos);  		if (prevMask == 0)  			break;  		int index = kMaskToBitNumber [prevMask] * 8;  		byte b = (byte)(dest >> (24 - index));  		if (!Test86MSByte (b))  			break;  		src = dest ^ ((1u << (32 - index)) - 1);  	}  	p [4] = (byte)(~(((dest >> 24) & 1) - 1));  	p [3] = (byte)(dest >> 16);  	p [2] = (byte)(dest >> 8);  	p [1] = (byte)dest;  	bufferPos += 5;  } else {  	prevMask = ((prevMask << 1) & 0x7) | 1;  	bufferPos++;  }  
Magic Number,ManagedLzma.SevenZip.Reader,BcjArchiveDecoder,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\BcjDecoder.cs,x86_Convert,The following statement contains a magic number: if (Test86MSByte (p [4])) {  	uint src = ((uint)p [4] << 24) | ((uint)p [3] << 16) | ((uint)p [2] << 8) | ((uint)p [1]);  	uint dest;  	for (; ;) {  		dest = src - (ip + (uint)bufferPos);  		if (prevMask == 0)  			break;  		int index = kMaskToBitNumber [prevMask] * 8;  		byte b = (byte)(dest >> (24 - index));  		if (!Test86MSByte (b))  			break;  		src = dest ^ ((1u << (32 - index)) - 1);  	}  	p [4] = (byte)(~(((dest >> 24) & 1) - 1));  	p [3] = (byte)(dest >> 16);  	p [2] = (byte)(dest >> 8);  	p [1] = (byte)dest;  	bufferPos += 5;  } else {  	prevMask = ((prevMask << 1) & 0x7) | 1;  	bufferPos++;  }  
Magic Number,ManagedLzma.SevenZip.Reader,BcjArchiveDecoder,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\BcjDecoder.cs,x86_Convert,The following statement contains a magic number: if (Test86MSByte (p [4])) {  	uint src = ((uint)p [4] << 24) | ((uint)p [3] << 16) | ((uint)p [2] << 8) | ((uint)p [1]);  	uint dest;  	for (; ;) {  		dest = src - (ip + (uint)bufferPos);  		if (prevMask == 0)  			break;  		int index = kMaskToBitNumber [prevMask] * 8;  		byte b = (byte)(dest >> (24 - index));  		if (!Test86MSByte (b))  			break;  		src = dest ^ ((1u << (32 - index)) - 1);  	}  	p [4] = (byte)(~(((dest >> 24) & 1) - 1));  	p [3] = (byte)(dest >> 16);  	p [2] = (byte)(dest >> 8);  	p [1] = (byte)dest;  	bufferPos += 5;  } else {  	prevMask = ((prevMask << 1) & 0x7) | 1;  	bufferPos++;  }  
Magic Number,ManagedLzma.SevenZip.Reader,BcjArchiveDecoder,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\BcjDecoder.cs,x86_Convert,The following statement contains a magic number: if (Test86MSByte (p [4])) {  	uint src = ((uint)p [4] << 24) | ((uint)p [3] << 16) | ((uint)p [2] << 8) | ((uint)p [1]);  	uint dest;  	for (; ;) {  		dest = src - (ip + (uint)bufferPos);  		if (prevMask == 0)  			break;  		int index = kMaskToBitNumber [prevMask] * 8;  		byte b = (byte)(dest >> (24 - index));  		if (!Test86MSByte (b))  			break;  		src = dest ^ ((1u << (32 - index)) - 1);  	}  	p [4] = (byte)(~(((dest >> 24) & 1) - 1));  	p [3] = (byte)(dest >> 16);  	p [2] = (byte)(dest >> 8);  	p [1] = (byte)dest;  	bufferPos += 5;  } else {  	prevMask = ((prevMask << 1) & 0x7) | 1;  	bufferPos++;  }  
Magic Number,ManagedLzma.SevenZip.Reader,BcjArchiveDecoder,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\BcjDecoder.cs,x86_Convert,The following statement contains a magic number: for (; ;) {  	dest = src - (ip + (uint)bufferPos);  	if (prevMask == 0)  		break;  	int index = kMaskToBitNumber [prevMask] * 8;  	byte b = (byte)(dest >> (24 - index));  	if (!Test86MSByte (b))  		break;  	src = dest ^ ((1u << (32 - index)) - 1);  }  
Magic Number,ManagedLzma.SevenZip.Reader,BcjArchiveDecoder,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\BcjDecoder.cs,x86_Convert,The following statement contains a magic number: for (; ;) {  	dest = src - (ip + (uint)bufferPos);  	if (prevMask == 0)  		break;  	int index = kMaskToBitNumber [prevMask] * 8;  	byte b = (byte)(dest >> (24 - index));  	if (!Test86MSByte (b))  		break;  	src = dest ^ ((1u << (32 - index)) - 1);  }  
Magic Number,ManagedLzma.SevenZip.Reader,BcjArchiveDecoder,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\BcjDecoder.cs,x86_Convert,The following statement contains a magic number: for (; ;) {  	dest = src - (ip + (uint)bufferPos);  	if (prevMask == 0)  		break;  	int index = kMaskToBitNumber [prevMask] * 8;  	byte b = (byte)(dest >> (24 - index));  	if (!Test86MSByte (b))  		break;  	src = dest ^ ((1u << (32 - index)) - 1);  }  
Magic Number,ManagedLzma.SevenZip.Reader,BcjArchiveDecoder,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\BcjDecoder.cs,x86_Convert,The following statement contains a magic number: src = dest ^ ((1u << (32 - index)) - 1);  
Magic Number,ManagedLzma.SevenZip.Reader,BcjArchiveDecoder,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\BcjDecoder.cs,x86_Convert,The following statement contains a magic number: p [4] = (byte)(~(((dest >> 24) & 1) - 1));  
Magic Number,ManagedLzma.SevenZip.Reader,BcjArchiveDecoder,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\BcjDecoder.cs,x86_Convert,The following statement contains a magic number: p [4] = (byte)(~(((dest >> 24) & 1) - 1));  
Magic Number,ManagedLzma.SevenZip.Reader,BcjArchiveDecoder,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\BcjDecoder.cs,x86_Convert,The following statement contains a magic number: p [3] = (byte)(dest >> 16);  
Magic Number,ManagedLzma.SevenZip.Reader,BcjArchiveDecoder,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\BcjDecoder.cs,x86_Convert,The following statement contains a magic number: p [3] = (byte)(dest >> 16);  
Magic Number,ManagedLzma.SevenZip.Reader,BcjArchiveDecoder,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\BcjDecoder.cs,x86_Convert,The following statement contains a magic number: p [2] = (byte)(dest >> 8);  
Magic Number,ManagedLzma.SevenZip.Reader,BcjArchiveDecoder,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\BcjDecoder.cs,x86_Convert,The following statement contains a magic number: p [2] = (byte)(dest >> 8);  
Magic Number,ManagedLzma.SevenZip.Reader,BcjArchiveDecoder,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\BcjDecoder.cs,x86_Convert,The following statement contains a magic number: bufferPos += 5;  
Magic Number,ManagedLzma.SevenZip.Reader,BcjArchiveDecoder,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\BcjDecoder.cs,x86_Convert,The following statement contains a magic number: mState = ((prevPosT > 3) ? 0 : ((prevMask << ((int)prevPosT - 1)) & 0x7));  
Magic Number,ManagedLzma.SevenZip.Reader,Lzma2ArchiveDecoder,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\Lzma2Decoder.cs,Lzma2ArchiveDecoder,The following statement contains a magic number: mBuffer = new byte[4 << 10];  
Magic Number,ManagedLzma.SevenZip.Reader,Lzma2ArchiveDecoder,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\Lzma2Decoder.cs,Lzma2ArchiveDecoder,The following statement contains a magic number: mBuffer = new byte[4 << 10];  
Magic Number,ManagedLzma.SevenZip.Reader,PpmdArchiveDecoder,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,PpmdArchiveDecoder,The following statement contains a magic number: if (settings.Length != 5)  	throw new InvalidDataException ();  
Magic Number,ManagedLzma.SevenZip.Reader,PpmdArchiveDecoder,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,PpmdArchiveDecoder,The following statement contains a magic number: mSettingMemory = (uint)settings [1] | ((uint)settings [2] << 8) | ((uint)settings [3] << 16) | ((uint)settings [4] << 24);  
Magic Number,ManagedLzma.SevenZip.Reader,PpmdArchiveDecoder,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,PpmdArchiveDecoder,The following statement contains a magic number: mSettingMemory = (uint)settings [1] | ((uint)settings [2] << 8) | ((uint)settings [3] << 16) | ((uint)settings [4] << 24);  
Magic Number,ManagedLzma.SevenZip.Reader,PpmdArchiveDecoder,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,PpmdArchiveDecoder,The following statement contains a magic number: mSettingMemory = (uint)settings [1] | ((uint)settings [2] << 8) | ((uint)settings [3] << 16) | ((uint)settings [4] << 24);  
Magic Number,ManagedLzma.SevenZip.Reader,PpmdArchiveDecoder,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,PpmdArchiveDecoder,The following statement contains a magic number: mSettingMemory = (uint)settings [1] | ((uint)settings [2] << 8) | ((uint)settings [3] << 16) | ((uint)settings [4] << 24);  
Magic Number,ManagedLzma.SevenZip.Reader,PpmdArchiveDecoder,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,PpmdArchiveDecoder,The following statement contains a magic number: mSettingMemory = (uint)settings [1] | ((uint)settings [2] << 8) | ((uint)settings [3] << 16) | ((uint)settings [4] << 24);  
Magic Number,ManagedLzma.SevenZip.Reader,PpmdArchiveDecoder,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,PpmdArchiveDecoder,The following statement contains a magic number: mSettingMemory = (uint)settings [1] | ((uint)settings [2] << 8) | ((uint)settings [3] << 16) | ((uint)settings [4] << 24);  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,Ppmd_See_Update,The following statement contains a magic number: if (p.Shift < PPMD_PERIOD_BITS && --p.Count == 0) {  	p.Summ <<= 1;  	p.Count = (byte)(3 << p.Shift++);  }  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,Ppmd_See_Update,The following statement contains a magic number: p.Count = (byte)(3 << p.Shift++);  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,PPMD_SetAllBitsIn256Bytes,The following statement contains a magic number: for (int i = 0; i < 256 / sizeof(uint); i += 8) {  	p [i + 7] = p [i + 6] = p [i + 5] = p [i + 4] = p [i + 3] = p [i + 2] = p [i + 1] = p [i + 0] = ~0u;  }  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,PPMD_SetAllBitsIn256Bytes,The following statement contains a magic number: for (int i = 0; i < 256 / sizeof(uint); i += 8) {  	p [i + 7] = p [i + 6] = p [i + 5] = p [i + 4] = p [i + 3] = p [i + 2] = p [i + 1] = p [i + 0] = ~0u;  }  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,PPMD_SetAllBitsIn256Bytes,The following statement contains a magic number: for (int i = 0; i < 256 / sizeof(uint); i += 8) {  	p [i + 7] = p [i + 6] = p [i + 5] = p [i + 4] = p [i + 3] = p [i + 2] = p [i + 1] = p [i + 0] = ~0u;  }  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,PPMD_SetAllBitsIn256Bytes,The following statement contains a magic number: for (int i = 0; i < 256 / sizeof(uint); i += 8) {  	p [i + 7] = p [i + 6] = p [i + 5] = p [i + 4] = p [i + 3] = p [i + 2] = p [i + 1] = p [i + 0] = ~0u;  }  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,PPMD_SetAllBitsIn256Bytes,The following statement contains a magic number: for (int i = 0; i < 256 / sizeof(uint); i += 8) {  	p [i + 7] = p [i + 6] = p [i + 5] = p [i + 4] = p [i + 3] = p [i + 2] = p [i + 1] = p [i + 0] = ~0u;  }  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,PPMD_SetAllBitsIn256Bytes,The following statement contains a magic number: for (int i = 0; i < 256 / sizeof(uint); i += 8) {  	p [i + 7] = p [i + 6] = p [i + 5] = p [i + 4] = p [i + 3] = p [i + 2] = p [i + 1] = p [i + 0] = ~0u;  }  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,PPMD_SetAllBitsIn256Bytes,The following statement contains a magic number: for (int i = 0; i < 256 / sizeof(uint); i += 8) {  	p [i + 7] = p [i + 6] = p [i + 5] = p [i + 4] = p [i + 3] = p [i + 2] = p [i + 1] = p [i + 0] = ~0u;  }  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,PPMD_SetAllBitsIn256Bytes,The following statement contains a magic number: for (int i = 0; i < 256 / sizeof(uint); i += 8) {  	p [i + 7] = p [i + 6] = p [i + 5] = p [i + 4] = p [i + 3] = p [i + 2] = p [i + 1] = p [i + 0] = ~0u;  }  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,PPMD_SetAllBitsIn256Bytes,The following statement contains a magic number: i += 8
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,PPMD_SetAllBitsIn256Bytes,The following statement contains a magic number: p [i + 7] = p [i + 6] = p [i + 5] = p [i + 4] = p [i + 3] = p [i + 2] = p [i + 1] = p [i + 0] = ~0u;  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,PPMD_SetAllBitsIn256Bytes,The following statement contains a magic number: p [i + 7] = p [i + 6] = p [i + 5] = p [i + 4] = p [i + 3] = p [i + 2] = p [i + 1] = p [i + 0] = ~0u;  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,PPMD_SetAllBitsIn256Bytes,The following statement contains a magic number: p [i + 7] = p [i + 6] = p [i + 5] = p [i + 4] = p [i + 3] = p [i + 2] = p [i + 1] = p [i + 0] = ~0u;  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,PPMD_SetAllBitsIn256Bytes,The following statement contains a magic number: p [i + 7] = p [i + 6] = p [i + 5] = p [i + 4] = p [i + 3] = p [i + 2] = p [i + 1] = p [i + 0] = ~0u;  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,PPMD_SetAllBitsIn256Bytes,The following statement contains a magic number: p [i + 7] = p [i + 6] = p [i + 5] = p [i + 4] = p [i + 3] = p [i + 2] = p [i + 1] = p [i + 0] = ~0u;  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,PPMD_SetAllBitsIn256Bytes,The following statement contains a magic number: p [i + 7] = p [i + 6] = p [i + 5] = p [i + 4] = p [i + 3] = p [i + 2] = p [i + 1] = p [i + 0] = ~0u;  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,Ppmd7_GetBinSumm,The following statement contains a magic number: p.BinSumm [Ppmd7Context_OneState (p.MinContext)->Freq - 1] [p.PrevSuccess + p.NS2BSIndx [Ppmd7_GetContext (p' p.MinContext->Suffix)->NumStats - 1] + (p.HiBitsFlag = p.HB2Flag [p.FoundState->Symbol]) + 2 * p.HB2Flag [Ppmd7Context_OneState (p.MinContext)->Symbol] + ((p.RunLength >> 26) & 0x20)];  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,Ppmd7_GetBinSumm,The following statement contains a magic number: p.BinSumm [Ppmd7Context_OneState (p.MinContext)->Freq - 1] [p.PrevSuccess + p.NS2BSIndx [Ppmd7_GetContext (p' p.MinContext->Suffix)->NumStats - 1] + (p.HiBitsFlag = p.HB2Flag [p.FoundState->Symbol]) + 2 * p.HB2Flag [Ppmd7Context_OneState (p.MinContext)->Symbol] + ((p.RunLength >> 26) & 0x20)];  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,Ppmd7_Construct,The following statement contains a magic number: for (i = 0' k = 0; i < PPMD_NUM_INDEXES; i++) {  	uint step = (i >= 12 ? 4 : (i >> 2) + 1);  	do {  		p.Units2Indx [k++] = (byte)i;  	} while (--step != 0);  	p.Indx2Units [i] = (byte)k;  }  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,Ppmd7_Construct,The following statement contains a magic number: for (i = 0' k = 0; i < PPMD_NUM_INDEXES; i++) {  	uint step = (i >= 12 ? 4 : (i >> 2) + 1);  	do {  		p.Units2Indx [k++] = (byte)i;  	} while (--step != 0);  	p.Indx2Units [i] = (byte)k;  }  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,Ppmd7_Construct,The following statement contains a magic number: for (i = 0' k = 0; i < PPMD_NUM_INDEXES; i++) {  	uint step = (i >= 12 ? 4 : (i >> 2) + 1);  	do {  		p.Units2Indx [k++] = (byte)i;  	} while (--step != 0);  	p.Indx2Units [i] = (byte)k;  }  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,Ppmd7_Construct,The following statement contains a magic number: for (i = 0; i < 9; i++)  	p.NS2BSIndx [i + 2] = 2 << 1;  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,Ppmd7_Construct,The following statement contains a magic number: for (i = 0; i < 9; i++)  	p.NS2BSIndx [i + 2] = 2 << 1;  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,Ppmd7_Construct,The following statement contains a magic number: for (i = 0; i < 9; i++)  	p.NS2BSIndx [i + 2] = 2 << 1;  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,Ppmd7_Construct,The following statement contains a magic number: p.NS2BSIndx [i + 2] = 2 << 1;  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,Ppmd7_Construct,The following statement contains a magic number: p.NS2BSIndx [i + 2] = 2 << 1;  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,Ppmd7_Construct,The following statement contains a magic number: for (i = 0; i < 256 - 11; i++)  	p.NS2BSIndx [i + 11] = 3 << 1;  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,Ppmd7_Construct,The following statement contains a magic number: for (i = 0; i < 256 - 11; i++)  	p.NS2BSIndx [i + 11] = 3 << 1;  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,Ppmd7_Construct,The following statement contains a magic number: for (i = 0; i < 256 - 11; i++)  	p.NS2BSIndx [i + 11] = 3 << 1;  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,Ppmd7_Construct,The following statement contains a magic number: for (i = 0; i < 256 - 11; i++)  	p.NS2BSIndx [i + 11] = 3 << 1;  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,Ppmd7_Construct,The following statement contains a magic number: p.NS2BSIndx [i + 11] = 3 << 1;  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,Ppmd7_Construct,The following statement contains a magic number: p.NS2BSIndx [i + 11] = 3 << 1;  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,Ppmd7_Construct,The following statement contains a magic number: for (i = 0; i < 3; i++)  	p.NS2Indx [i] = (byte)i;  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,Ppmd7_Construct,The following statement contains a magic number: for (m = i' k = 1; i < 256; i++) {  	p.NS2Indx [i] = (byte)m;  	if (--k == 0)  		k = (++m) - 2;  }  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,Ppmd7_Construct,The following statement contains a magic number: for (m = i' k = 1; i < 256; i++) {  	p.NS2Indx [i] = (byte)m;  	if (--k == 0)  		k = (++m) - 2;  }  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,Ppmd7_Construct,The following statement contains a magic number: if (--k == 0)  	k = (++m) - 2;  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,Ppmd7_Construct,The following statement contains a magic number: k = (++m) - 2;  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,Ppmd7_Construct,The following statement contains a magic number: for (i = 0; i < 0x100 - 0x40; i++)  	p.HB2Flag [i + 0x40] = 8;  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,Ppmd7_Construct,The following statement contains a magic number: p.HB2Flag [i + 0x40] = 8;  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,Ppmd7_Alloc,The following statement contains a magic number: if (p.Base == null || p.Size != size) {  	Ppmd7_Free (p' alloc);  	p.AlignOffset = 4 - (size & 3);  	if ((p.Base = (byte*)alloc.Alloc (alloc' p.AlignOffset + size + UNIT_SIZE)) == null)  		return false;  	p.Size = size;  }  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,Ppmd7_Alloc,The following statement contains a magic number: if (p.Base == null || p.Size != size) {  	Ppmd7_Free (p' alloc);  	p.AlignOffset = 4 - (size & 3);  	if ((p.Base = (byte*)alloc.Alloc (alloc' p.AlignOffset + size + UNIT_SIZE)) == null)  		return false;  	p.Size = size;  }  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,Ppmd7_Alloc,The following statement contains a magic number: p.AlignOffset = 4 - (size & 3);  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,Ppmd7_Alloc,The following statement contains a magic number: p.AlignOffset = 4 - (size & 3);  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,GlueFreeBlocks,The following statement contains a magic number: p.GlueCount = 255;  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,GlueFreeBlocks,The following statement contains a magic number: for (n = NODE (p' head)->Next; n != head;) {  	CPpmd7_Node* node = NODE (p' n);  	uint nu;  	CPpmd7_Node_Ref next = node->Next;  	for (nu = node->NU; nu > 128; nu -= 128' node += 128)  		InsertNode (p' node' PPMD_NUM_INDEXES - 1);  	if (I2U (p' i = U2I (p' nu)) != nu) {  		uint k = I2U (p' --i);  		InsertNode (p' node + k' nu - k - 1);  	}  	InsertNode (p' node' i);  	n = next;  }  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,GlueFreeBlocks,The following statement contains a magic number: for (n = NODE (p' head)->Next; n != head;) {  	CPpmd7_Node* node = NODE (p' n);  	uint nu;  	CPpmd7_Node_Ref next = node->Next;  	for (nu = node->NU; nu > 128; nu -= 128' node += 128)  		InsertNode (p' node' PPMD_NUM_INDEXES - 1);  	if (I2U (p' i = U2I (p' nu)) != nu) {  		uint k = I2U (p' --i);  		InsertNode (p' node + k' nu - k - 1);  	}  	InsertNode (p' node' i);  	n = next;  }  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,GlueFreeBlocks,The following statement contains a magic number: for (n = NODE (p' head)->Next; n != head;) {  	CPpmd7_Node* node = NODE (p' n);  	uint nu;  	CPpmd7_Node_Ref next = node->Next;  	for (nu = node->NU; nu > 128; nu -= 128' node += 128)  		InsertNode (p' node' PPMD_NUM_INDEXES - 1);  	if (I2U (p' i = U2I (p' nu)) != nu) {  		uint k = I2U (p' --i);  		InsertNode (p' node + k' nu - k - 1);  	}  	InsertNode (p' node' i);  	n = next;  }  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,GlueFreeBlocks,The following statement contains a magic number: for (nu = node->NU; nu > 128; nu -= 128' node += 128)  	InsertNode (p' node' PPMD_NUM_INDEXES - 1);  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,GlueFreeBlocks,The following statement contains a magic number: for (nu = node->NU; nu > 128; nu -= 128' node += 128)  	InsertNode (p' node' PPMD_NUM_INDEXES - 1);  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,GlueFreeBlocks,The following statement contains a magic number: for (nu = node->NU; nu > 128; nu -= 128' node += 128)  	InsertNode (p' node' PPMD_NUM_INDEXES - 1);  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,GlueFreeBlocks,The following statement contains a magic number: nu -= 128
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,GlueFreeBlocks,The following statement contains a magic number: node += 128
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,MyMem12Cpy,The following statement contains a magic number: do {  	d [0] = s [0];  	d [1] = s [1];  	d [2] = s [2];  	s += 3;  	d += 3;  } while (--n != 0);  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,MyMem12Cpy,The following statement contains a magic number: do {  	d [0] = s [0];  	d [1] = s [1];  	d [2] = s [2];  	s += 3;  	d += 3;  } while (--n != 0);  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,MyMem12Cpy,The following statement contains a magic number: do {  	d [0] = s [0];  	d [1] = s [1];  	d [2] = s [2];  	s += 3;  	d += 3;  } while (--n != 0);  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,MyMem12Cpy,The following statement contains a magic number: do {  	d [0] = s [0];  	d [1] = s [1];  	d [2] = s [2];  	s += 3;  	d += 3;  } while (--n != 0);  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,MyMem12Cpy,The following statement contains a magic number: d [2] = s [2];  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,MyMem12Cpy,The following statement contains a magic number: d [2] = s [2];  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,MyMem12Cpy,The following statement contains a magic number: s += 3;  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,MyMem12Cpy,The following statement contains a magic number: d += 3;  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,SetSuccessor,The following statement contains a magic number: (p)->SuccessorHigh = (ushort)(v.Value >> 16);  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,RestartModel,The following statement contains a magic number: p.LoUnit = p.UnitsStart = p.HiUnit - p.Size / 8 / UNIT_SIZE * 7 * UNIT_SIZE;  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,RestartModel,The following statement contains a magic number: p.LoUnit = p.UnitsStart = p.HiUnit - p.Size / 8 / UNIT_SIZE * 7 * UNIT_SIZE;  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,RestartModel,The following statement contains a magic number: p.RunLength = p.InitRL = -(Int32)((p.MaxOrder < 12) ? p.MaxOrder : 12) - 1;  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,RestartModel,The following statement contains a magic number: p.RunLength = p.InitRL = -(Int32)((p.MaxOrder < 12) ? p.MaxOrder : 12) - 1;  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,RestartModel,The following statement contains a magic number: p.MinContext->NumStats = 256;  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,RestartModel,The following statement contains a magic number: p.MinContext->SummFreq = 256 + 1;  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,RestartModel,The following statement contains a magic number: p.LoUnit += U2B (256 / 2);  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,RestartModel,The following statement contains a magic number: p.LoUnit += U2B (256 / 2);  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,RestartModel,The following statement contains a magic number: for (i = 0; i < 256; i++) {  	CPpmd_State* s = &p.FoundState [i];  	s->Symbol = (byte)i;  	s->Freq = 1;  	SetSuccessor (s' default(CPpmd_Void_Ref));  }  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,RestartModel,The following statement contains a magic number: for (i = 0; i < 128; i++)  	for (k = 0; k < 8; k++) {  		ushort* dest = p.BinSumm [i] + k;  		ushort val = (ushort)(PPMD_BIN_SCALE - kInitBinEsc [k] / (i + 2));  		for (m = 0; m < 64; m += 8)  			dest [m] = val;  	}  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,RestartModel,The following statement contains a magic number: for (i = 0; i < 128; i++)  	for (k = 0; k < 8; k++) {  		ushort* dest = p.BinSumm [i] + k;  		ushort val = (ushort)(PPMD_BIN_SCALE - kInitBinEsc [k] / (i + 2));  		for (m = 0; m < 64; m += 8)  			dest [m] = val;  	}  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,RestartModel,The following statement contains a magic number: for (i = 0; i < 128; i++)  	for (k = 0; k < 8; k++) {  		ushort* dest = p.BinSumm [i] + k;  		ushort val = (ushort)(PPMD_BIN_SCALE - kInitBinEsc [k] / (i + 2));  		for (m = 0; m < 64; m += 8)  			dest [m] = val;  	}  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,RestartModel,The following statement contains a magic number: for (i = 0; i < 128; i++)  	for (k = 0; k < 8; k++) {  		ushort* dest = p.BinSumm [i] + k;  		ushort val = (ushort)(PPMD_BIN_SCALE - kInitBinEsc [k] / (i + 2));  		for (m = 0; m < 64; m += 8)  			dest [m] = val;  	}  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,RestartModel,The following statement contains a magic number: for (i = 0; i < 128; i++)  	for (k = 0; k < 8; k++) {  		ushort* dest = p.BinSumm [i] + k;  		ushort val = (ushort)(PPMD_BIN_SCALE - kInitBinEsc [k] / (i + 2));  		for (m = 0; m < 64; m += 8)  			dest [m] = val;  	}  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,RestartModel,The following statement contains a magic number: for (k = 0; k < 8; k++) {  	ushort* dest = p.BinSumm [i] + k;  	ushort val = (ushort)(PPMD_BIN_SCALE - kInitBinEsc [k] / (i + 2));  	for (m = 0; m < 64; m += 8)  		dest [m] = val;  }  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,RestartModel,The following statement contains a magic number: for (k = 0; k < 8; k++) {  	ushort* dest = p.BinSumm [i] + k;  	ushort val = (ushort)(PPMD_BIN_SCALE - kInitBinEsc [k] / (i + 2));  	for (m = 0; m < 64; m += 8)  		dest [m] = val;  }  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,RestartModel,The following statement contains a magic number: for (k = 0; k < 8; k++) {  	ushort* dest = p.BinSumm [i] + k;  	ushort val = (ushort)(PPMD_BIN_SCALE - kInitBinEsc [k] / (i + 2));  	for (m = 0; m < 64; m += 8)  		dest [m] = val;  }  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,RestartModel,The following statement contains a magic number: for (k = 0; k < 8; k++) {  	ushort* dest = p.BinSumm [i] + k;  	ushort val = (ushort)(PPMD_BIN_SCALE - kInitBinEsc [k] / (i + 2));  	for (m = 0; m < 64; m += 8)  		dest [m] = val;  }  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,RestartModel,The following statement contains a magic number: for (m = 0; m < 64; m += 8)  	dest [m] = val;  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,RestartModel,The following statement contains a magic number: for (m = 0; m < 64; m += 8)  	dest [m] = val;  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,RestartModel,The following statement contains a magic number: m += 8
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,RestartModel,The following statement contains a magic number: for (i = 0; i < 25; i++)  	for (k = 0; k < 16; k++) {  		CPpmd_See* s = &p.See [i] [k];  		s->Summ = (ushort)((5 * i + 10) << (s->Shift = PPMD_PERIOD_BITS - 4));  		s->Count = 4;  	}  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,RestartModel,The following statement contains a magic number: for (i = 0; i < 25; i++)  	for (k = 0; k < 16; k++) {  		CPpmd_See* s = &p.See [i] [k];  		s->Summ = (ushort)((5 * i + 10) << (s->Shift = PPMD_PERIOD_BITS - 4));  		s->Count = 4;  	}  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,RestartModel,The following statement contains a magic number: for (i = 0; i < 25; i++)  	for (k = 0; k < 16; k++) {  		CPpmd_See* s = &p.See [i] [k];  		s->Summ = (ushort)((5 * i + 10) << (s->Shift = PPMD_PERIOD_BITS - 4));  		s->Count = 4;  	}  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,RestartModel,The following statement contains a magic number: for (i = 0; i < 25; i++)  	for (k = 0; k < 16; k++) {  		CPpmd_See* s = &p.See [i] [k];  		s->Summ = (ushort)((5 * i + 10) << (s->Shift = PPMD_PERIOD_BITS - 4));  		s->Count = 4;  	}  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,RestartModel,The following statement contains a magic number: for (i = 0; i < 25; i++)  	for (k = 0; k < 16; k++) {  		CPpmd_See* s = &p.See [i] [k];  		s->Summ = (ushort)((5 * i + 10) << (s->Shift = PPMD_PERIOD_BITS - 4));  		s->Count = 4;  	}  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,RestartModel,The following statement contains a magic number: for (i = 0; i < 25; i++)  	for (k = 0; k < 16; k++) {  		CPpmd_See* s = &p.See [i] [k];  		s->Summ = (ushort)((5 * i + 10) << (s->Shift = PPMD_PERIOD_BITS - 4));  		s->Count = 4;  	}  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,RestartModel,The following statement contains a magic number: for (k = 0; k < 16; k++) {  	CPpmd_See* s = &p.See [i] [k];  	s->Summ = (ushort)((5 * i + 10) << (s->Shift = PPMD_PERIOD_BITS - 4));  	s->Count = 4;  }  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,RestartModel,The following statement contains a magic number: for (k = 0; k < 16; k++) {  	CPpmd_See* s = &p.See [i] [k];  	s->Summ = (ushort)((5 * i + 10) << (s->Shift = PPMD_PERIOD_BITS - 4));  	s->Count = 4;  }  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,RestartModel,The following statement contains a magic number: for (k = 0; k < 16; k++) {  	CPpmd_See* s = &p.See [i] [k];  	s->Summ = (ushort)((5 * i + 10) << (s->Shift = PPMD_PERIOD_BITS - 4));  	s->Count = 4;  }  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,RestartModel,The following statement contains a magic number: for (k = 0; k < 16; k++) {  	CPpmd_See* s = &p.See [i] [k];  	s->Summ = (ushort)((5 * i + 10) << (s->Shift = PPMD_PERIOD_BITS - 4));  	s->Count = 4;  }  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,RestartModel,The following statement contains a magic number: for (k = 0; k < 16; k++) {  	CPpmd_See* s = &p.See [i] [k];  	s->Summ = (ushort)((5 * i + 10) << (s->Shift = PPMD_PERIOD_BITS - 4));  	s->Count = 4;  }  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,RestartModel,The following statement contains a magic number: s->Summ = (ushort)((5 * i + 10) << (s->Shift = PPMD_PERIOD_BITS - 4));  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,RestartModel,The following statement contains a magic number: s->Summ = (ushort)((5 * i + 10) << (s->Shift = PPMD_PERIOD_BITS - 4));  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,RestartModel,The following statement contains a magic number: s->Summ = (ushort)((5 * i + 10) << (s->Shift = PPMD_PERIOD_BITS - 4));  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,RestartModel,The following statement contains a magic number: s->Count = 4;  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,Ppmd7_Init,The following statement contains a magic number: p.DummySee->Count = 64;  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,CreateSuccessors,The following statement contains a magic number: if (c->NumStats == 1)  	upState.Freq = ONE_STATE (c)->Freq;  else {  	uint cf' s0;  	CPpmd_State* s;  	for (s = STATS (p' c); s->Symbol != upState.Symbol; s++)  		;  	cf = s->Freq - 1u;  	s0 = (uint)c->SummFreq - (uint)c->NumStats - cf;  	upState.Freq = (byte)(1 + ((2 * cf <= s0) ? (5 * cf > s0 ? 1u : 0u) : ((2 * cf + 3 * s0 - 1) / (2 * s0))));  }  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,CreateSuccessors,The following statement contains a magic number: if (c->NumStats == 1)  	upState.Freq = ONE_STATE (c)->Freq;  else {  	uint cf' s0;  	CPpmd_State* s;  	for (s = STATS (p' c); s->Symbol != upState.Symbol; s++)  		;  	cf = s->Freq - 1u;  	s0 = (uint)c->SummFreq - (uint)c->NumStats - cf;  	upState.Freq = (byte)(1 + ((2 * cf <= s0) ? (5 * cf > s0 ? 1u : 0u) : ((2 * cf + 3 * s0 - 1) / (2 * s0))));  }  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,CreateSuccessors,The following statement contains a magic number: if (c->NumStats == 1)  	upState.Freq = ONE_STATE (c)->Freq;  else {  	uint cf' s0;  	CPpmd_State* s;  	for (s = STATS (p' c); s->Symbol != upState.Symbol; s++)  		;  	cf = s->Freq - 1u;  	s0 = (uint)c->SummFreq - (uint)c->NumStats - cf;  	upState.Freq = (byte)(1 + ((2 * cf <= s0) ? (5 * cf > s0 ? 1u : 0u) : ((2 * cf + 3 * s0 - 1) / (2 * s0))));  }  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,CreateSuccessors,The following statement contains a magic number: if (c->NumStats == 1)  	upState.Freq = ONE_STATE (c)->Freq;  else {  	uint cf' s0;  	CPpmd_State* s;  	for (s = STATS (p' c); s->Symbol != upState.Symbol; s++)  		;  	cf = s->Freq - 1u;  	s0 = (uint)c->SummFreq - (uint)c->NumStats - cf;  	upState.Freq = (byte)(1 + ((2 * cf <= s0) ? (5 * cf > s0 ? 1u : 0u) : ((2 * cf + 3 * s0 - 1) / (2 * s0))));  }  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,CreateSuccessors,The following statement contains a magic number: if (c->NumStats == 1)  	upState.Freq = ONE_STATE (c)->Freq;  else {  	uint cf' s0;  	CPpmd_State* s;  	for (s = STATS (p' c); s->Symbol != upState.Symbol; s++)  		;  	cf = s->Freq - 1u;  	s0 = (uint)c->SummFreq - (uint)c->NumStats - cf;  	upState.Freq = (byte)(1 + ((2 * cf <= s0) ? (5 * cf > s0 ? 1u : 0u) : ((2 * cf + 3 * s0 - 1) / (2 * s0))));  }  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,CreateSuccessors,The following statement contains a magic number: upState.Freq = (byte)(1 + ((2 * cf <= s0) ? (5 * cf > s0 ? 1u : 0u) : ((2 * cf + 3 * s0 - 1) / (2 * s0))));  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,CreateSuccessors,The following statement contains a magic number: upState.Freq = (byte)(1 + ((2 * cf <= s0) ? (5 * cf > s0 ? 1u : 0u) : ((2 * cf + 3 * s0 - 1) / (2 * s0))));  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,CreateSuccessors,The following statement contains a magic number: upState.Freq = (byte)(1 + ((2 * cf <= s0) ? (5 * cf > s0 ? 1u : 0u) : ((2 * cf + 3 * s0 - 1) / (2 * s0))));  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,CreateSuccessors,The following statement contains a magic number: upState.Freq = (byte)(1 + ((2 * cf <= s0) ? (5 * cf > s0 ? 1u : 0u) : ((2 * cf + 3 * s0 - 1) / (2 * s0))));  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,CreateSuccessors,The following statement contains a magic number: upState.Freq = (byte)(1 + ((2 * cf <= s0) ? (5 * cf > s0 ? 1u : 0u) : ((2 * cf + 3 * s0 - 1) / (2 * s0))));  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,UpdateModel,The following statement contains a magic number: if (p.FoundState->Freq < MAX_FREQ / 4 && p.MinContext->Suffix.Value != 0) {  	c = SUFFIX (p' p.MinContext);  	if (c->NumStats == 1) {  		CPpmd_State* s = ONE_STATE (c);  		if (s->Freq < 32)  			s->Freq++;  	} else {  		CPpmd_State* s = STATS (p' c);  		if (s->Symbol != p.FoundState->Symbol) {  			do {  				s++;  			} while (s->Symbol != p.FoundState->Symbol);  			if (s [0].Freq >= s [-1].Freq) {  				SwapStates (&s [0]' &s [-1]);  				s--;  			}  		}  		if (s->Freq < MAX_FREQ - 9) {  			s->Freq += 2;  			c->SummFreq += 2;  		}  	}  }  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,UpdateModel,The following statement contains a magic number: if (p.FoundState->Freq < MAX_FREQ / 4 && p.MinContext->Suffix.Value != 0) {  	c = SUFFIX (p' p.MinContext);  	if (c->NumStats == 1) {  		CPpmd_State* s = ONE_STATE (c);  		if (s->Freq < 32)  			s->Freq++;  	} else {  		CPpmd_State* s = STATS (p' c);  		if (s->Symbol != p.FoundState->Symbol) {  			do {  				s++;  			} while (s->Symbol != p.FoundState->Symbol);  			if (s [0].Freq >= s [-1].Freq) {  				SwapStates (&s [0]' &s [-1]);  				s--;  			}  		}  		if (s->Freq < MAX_FREQ - 9) {  			s->Freq += 2;  			c->SummFreq += 2;  		}  	}  }  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,UpdateModel,The following statement contains a magic number: if (p.FoundState->Freq < MAX_FREQ / 4 && p.MinContext->Suffix.Value != 0) {  	c = SUFFIX (p' p.MinContext);  	if (c->NumStats == 1) {  		CPpmd_State* s = ONE_STATE (c);  		if (s->Freq < 32)  			s->Freq++;  	} else {  		CPpmd_State* s = STATS (p' c);  		if (s->Symbol != p.FoundState->Symbol) {  			do {  				s++;  			} while (s->Symbol != p.FoundState->Symbol);  			if (s [0].Freq >= s [-1].Freq) {  				SwapStates (&s [0]' &s [-1]);  				s--;  			}  		}  		if (s->Freq < MAX_FREQ - 9) {  			s->Freq += 2;  			c->SummFreq += 2;  		}  	}  }  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,UpdateModel,The following statement contains a magic number: if (p.FoundState->Freq < MAX_FREQ / 4 && p.MinContext->Suffix.Value != 0) {  	c = SUFFIX (p' p.MinContext);  	if (c->NumStats == 1) {  		CPpmd_State* s = ONE_STATE (c);  		if (s->Freq < 32)  			s->Freq++;  	} else {  		CPpmd_State* s = STATS (p' c);  		if (s->Symbol != p.FoundState->Symbol) {  			do {  				s++;  			} while (s->Symbol != p.FoundState->Symbol);  			if (s [0].Freq >= s [-1].Freq) {  				SwapStates (&s [0]' &s [-1]);  				s--;  			}  		}  		if (s->Freq < MAX_FREQ - 9) {  			s->Freq += 2;  			c->SummFreq += 2;  		}  	}  }  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,UpdateModel,The following statement contains a magic number: if (p.FoundState->Freq < MAX_FREQ / 4 && p.MinContext->Suffix.Value != 0) {  	c = SUFFIX (p' p.MinContext);  	if (c->NumStats == 1) {  		CPpmd_State* s = ONE_STATE (c);  		if (s->Freq < 32)  			s->Freq++;  	} else {  		CPpmd_State* s = STATS (p' c);  		if (s->Symbol != p.FoundState->Symbol) {  			do {  				s++;  			} while (s->Symbol != p.FoundState->Symbol);  			if (s [0].Freq >= s [-1].Freq) {  				SwapStates (&s [0]' &s [-1]);  				s--;  			}  		}  		if (s->Freq < MAX_FREQ - 9) {  			s->Freq += 2;  			c->SummFreq += 2;  		}  	}  }  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,UpdateModel,The following statement contains a magic number: if (c->NumStats == 1) {  	CPpmd_State* s = ONE_STATE (c);  	if (s->Freq < 32)  		s->Freq++;  } else {  	CPpmd_State* s = STATS (p' c);  	if (s->Symbol != p.FoundState->Symbol) {  		do {  			s++;  		} while (s->Symbol != p.FoundState->Symbol);  		if (s [0].Freq >= s [-1].Freq) {  			SwapStates (&s [0]' &s [-1]);  			s--;  		}  	}  	if (s->Freq < MAX_FREQ - 9) {  		s->Freq += 2;  		c->SummFreq += 2;  	}  }  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,UpdateModel,The following statement contains a magic number: if (c->NumStats == 1) {  	CPpmd_State* s = ONE_STATE (c);  	if (s->Freq < 32)  		s->Freq++;  } else {  	CPpmd_State* s = STATS (p' c);  	if (s->Symbol != p.FoundState->Symbol) {  		do {  			s++;  		} while (s->Symbol != p.FoundState->Symbol);  		if (s [0].Freq >= s [-1].Freq) {  			SwapStates (&s [0]' &s [-1]);  			s--;  		}  	}  	if (s->Freq < MAX_FREQ - 9) {  		s->Freq += 2;  		c->SummFreq += 2;  	}  }  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,UpdateModel,The following statement contains a magic number: if (c->NumStats == 1) {  	CPpmd_State* s = ONE_STATE (c);  	if (s->Freq < 32)  		s->Freq++;  } else {  	CPpmd_State* s = STATS (p' c);  	if (s->Symbol != p.FoundState->Symbol) {  		do {  			s++;  		} while (s->Symbol != p.FoundState->Symbol);  		if (s [0].Freq >= s [-1].Freq) {  			SwapStates (&s [0]' &s [-1]);  			s--;  		}  	}  	if (s->Freq < MAX_FREQ - 9) {  		s->Freq += 2;  		c->SummFreq += 2;  	}  }  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,UpdateModel,The following statement contains a magic number: if (c->NumStats == 1) {  	CPpmd_State* s = ONE_STATE (c);  	if (s->Freq < 32)  		s->Freq++;  } else {  	CPpmd_State* s = STATS (p' c);  	if (s->Symbol != p.FoundState->Symbol) {  		do {  			s++;  		} while (s->Symbol != p.FoundState->Symbol);  		if (s [0].Freq >= s [-1].Freq) {  			SwapStates (&s [0]' &s [-1]);  			s--;  		}  	}  	if (s->Freq < MAX_FREQ - 9) {  		s->Freq += 2;  		c->SummFreq += 2;  	}  }  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,UpdateModel,The following statement contains a magic number: if (s->Freq < 32)  	s->Freq++;  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,UpdateModel,The following statement contains a magic number: if (s->Freq < MAX_FREQ - 9) {  	s->Freq += 2;  	c->SummFreq += 2;  }  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,UpdateModel,The following statement contains a magic number: if (s->Freq < MAX_FREQ - 9) {  	s->Freq += 2;  	c->SummFreq += 2;  }  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,UpdateModel,The following statement contains a magic number: if (s->Freq < MAX_FREQ - 9) {  	s->Freq += 2;  	c->SummFreq += 2;  }  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,UpdateModel,The following statement contains a magic number: s->Freq += 2;  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,UpdateModel,The following statement contains a magic number: c->SummFreq += 2;  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,UpdateModel,The following statement contains a magic number: for (c = p.MaxContext; c != p.MinContext; c = SUFFIX (p' c)) {  	uint ns1;  	uint cf' sf;  	if ((ns1 = c->NumStats) != 1) {  		if ((ns1 & 1) == 0) {  			/* Expand for one UNIT */uint oldNU = ns1 >> 1;  			uint i = U2I (p' oldNU);  			if (i != U2I (p' oldNU + 1)) {  				void* ptr = AllocUnits (p' i + 1);  				void* oldPtr;  				if (ptr == null) {  					RestartModel (p);  					return;  				}  				oldPtr = STATS (p' c);  				MyMem12Cpy (ptr' oldPtr' oldNU);  				InsertNode (p' oldPtr' i);  				c->Stats = STATS_REF (p' ptr);  			}  		}  		c->SummFreq = (ushort)(c->SummFreq + (2 * ns1 < ns ? 1u : 0u) + 2 * ((4 * ns1 <= ns ? 1u : 0u) & (c->SummFreq <= 8 * ns1 ? 1u : 0u)));  	} else {  		CPpmd_State* s = (CPpmd_State*)AllocUnits (p' 0);  		if (s == null) {  			RestartModel (p);  			return;  		}  		*s = *ONE_STATE (c);  		c->Stats = REF (p' s);  		if (s->Freq < MAX_FREQ / 4 - 1)  			s->Freq <<= 1;  		else  			s->Freq = MAX_FREQ - 4;  		c->SummFreq = (ushort)(s->Freq + p.InitEsc + (ns > 3 ? 1u : 0u));  	}  	cf = 2 * (uint)p.FoundState->Freq * (c->SummFreq + 6u);  	sf = (uint)s0 + c->SummFreq;  	if (cf < 6 * sf) {  		cf = 1 + (cf > sf ? 1u : 0u) + (cf >= 4 * sf ? 1u : 0u);  		c->SummFreq += 3;  	} else {  		cf = 4 + (cf >= 9 * sf ? 1u : 0u) + (cf >= 12 * sf ? 1u : 0u) + (cf >= 15 * sf ? 1u : 0u);  		c->SummFreq = (ushort)(c->SummFreq + cf);  	}  	{  		CPpmd_State* s = STATS (p' c) + ns1;  		SetSuccessor (s' successor);  		s->Symbol = p.FoundState->Symbol;  		s->Freq = (byte)cf;  		c->NumStats = (ushort)(ns1 + 1);  	}  }  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,UpdateModel,The following statement contains a magic number: for (c = p.MaxContext; c != p.MinContext; c = SUFFIX (p' c)) {  	uint ns1;  	uint cf' sf;  	if ((ns1 = c->NumStats) != 1) {  		if ((ns1 & 1) == 0) {  			/* Expand for one UNIT */uint oldNU = ns1 >> 1;  			uint i = U2I (p' oldNU);  			if (i != U2I (p' oldNU + 1)) {  				void* ptr = AllocUnits (p' i + 1);  				void* oldPtr;  				if (ptr == null) {  					RestartModel (p);  					return;  				}  				oldPtr = STATS (p' c);  				MyMem12Cpy (ptr' oldPtr' oldNU);  				InsertNode (p' oldPtr' i);  				c->Stats = STATS_REF (p' ptr);  			}  		}  		c->SummFreq = (ushort)(c->SummFreq + (2 * ns1 < ns ? 1u : 0u) + 2 * ((4 * ns1 <= ns ? 1u : 0u) & (c->SummFreq <= 8 * ns1 ? 1u : 0u)));  	} else {  		CPpmd_State* s = (CPpmd_State*)AllocUnits (p' 0);  		if (s == null) {  			RestartModel (p);  			return;  		}  		*s = *ONE_STATE (c);  		c->Stats = REF (p' s);  		if (s->Freq < MAX_FREQ / 4 - 1)  			s->Freq <<= 1;  		else  			s->Freq = MAX_FREQ - 4;  		c->SummFreq = (ushort)(s->Freq + p.InitEsc + (ns > 3 ? 1u : 0u));  	}  	cf = 2 * (uint)p.FoundState->Freq * (c->SummFreq + 6u);  	sf = (uint)s0 + c->SummFreq;  	if (cf < 6 * sf) {  		cf = 1 + (cf > sf ? 1u : 0u) + (cf >= 4 * sf ? 1u : 0u);  		c->SummFreq += 3;  	} else {  		cf = 4 + (cf >= 9 * sf ? 1u : 0u) + (cf >= 12 * sf ? 1u : 0u) + (cf >= 15 * sf ? 1u : 0u);  		c->SummFreq = (ushort)(c->SummFreq + cf);  	}  	{  		CPpmd_State* s = STATS (p' c) + ns1;  		SetSuccessor (s' successor);  		s->Symbol = p.FoundState->Symbol;  		s->Freq = (byte)cf;  		c->NumStats = (ushort)(ns1 + 1);  	}  }  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,UpdateModel,The following statement contains a magic number: for (c = p.MaxContext; c != p.MinContext; c = SUFFIX (p' c)) {  	uint ns1;  	uint cf' sf;  	if ((ns1 = c->NumStats) != 1) {  		if ((ns1 & 1) == 0) {  			/* Expand for one UNIT */uint oldNU = ns1 >> 1;  			uint i = U2I (p' oldNU);  			if (i != U2I (p' oldNU + 1)) {  				void* ptr = AllocUnits (p' i + 1);  				void* oldPtr;  				if (ptr == null) {  					RestartModel (p);  					return;  				}  				oldPtr = STATS (p' c);  				MyMem12Cpy (ptr' oldPtr' oldNU);  				InsertNode (p' oldPtr' i);  				c->Stats = STATS_REF (p' ptr);  			}  		}  		c->SummFreq = (ushort)(c->SummFreq + (2 * ns1 < ns ? 1u : 0u) + 2 * ((4 * ns1 <= ns ? 1u : 0u) & (c->SummFreq <= 8 * ns1 ? 1u : 0u)));  	} else {  		CPpmd_State* s = (CPpmd_State*)AllocUnits (p' 0);  		if (s == null) {  			RestartModel (p);  			return;  		}  		*s = *ONE_STATE (c);  		c->Stats = REF (p' s);  		if (s->Freq < MAX_FREQ / 4 - 1)  			s->Freq <<= 1;  		else  			s->Freq = MAX_FREQ - 4;  		c->SummFreq = (ushort)(s->Freq + p.InitEsc + (ns > 3 ? 1u : 0u));  	}  	cf = 2 * (uint)p.FoundState->Freq * (c->SummFreq + 6u);  	sf = (uint)s0 + c->SummFreq;  	if (cf < 6 * sf) {  		cf = 1 + (cf > sf ? 1u : 0u) + (cf >= 4 * sf ? 1u : 0u);  		c->SummFreq += 3;  	} else {  		cf = 4 + (cf >= 9 * sf ? 1u : 0u) + (cf >= 12 * sf ? 1u : 0u) + (cf >= 15 * sf ? 1u : 0u);  		c->SummFreq = (ushort)(c->SummFreq + cf);  	}  	{  		CPpmd_State* s = STATS (p' c) + ns1;  		SetSuccessor (s' successor);  		s->Symbol = p.FoundState->Symbol;  		s->Freq = (byte)cf;  		c->NumStats = (ushort)(ns1 + 1);  	}  }  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,UpdateModel,The following statement contains a magic number: for (c = p.MaxContext; c != p.MinContext; c = SUFFIX (p' c)) {  	uint ns1;  	uint cf' sf;  	if ((ns1 = c->NumStats) != 1) {  		if ((ns1 & 1) == 0) {  			/* Expand for one UNIT */uint oldNU = ns1 >> 1;  			uint i = U2I (p' oldNU);  			if (i != U2I (p' oldNU + 1)) {  				void* ptr = AllocUnits (p' i + 1);  				void* oldPtr;  				if (ptr == null) {  					RestartModel (p);  					return;  				}  				oldPtr = STATS (p' c);  				MyMem12Cpy (ptr' oldPtr' oldNU);  				InsertNode (p' oldPtr' i);  				c->Stats = STATS_REF (p' ptr);  			}  		}  		c->SummFreq = (ushort)(c->SummFreq + (2 * ns1 < ns ? 1u : 0u) + 2 * ((4 * ns1 <= ns ? 1u : 0u) & (c->SummFreq <= 8 * ns1 ? 1u : 0u)));  	} else {  		CPpmd_State* s = (CPpmd_State*)AllocUnits (p' 0);  		if (s == null) {  			RestartModel (p);  			return;  		}  		*s = *ONE_STATE (c);  		c->Stats = REF (p' s);  		if (s->Freq < MAX_FREQ / 4 - 1)  			s->Freq <<= 1;  		else  			s->Freq = MAX_FREQ - 4;  		c->SummFreq = (ushort)(s->Freq + p.InitEsc + (ns > 3 ? 1u : 0u));  	}  	cf = 2 * (uint)p.FoundState->Freq * (c->SummFreq + 6u);  	sf = (uint)s0 + c->SummFreq;  	if (cf < 6 * sf) {  		cf = 1 + (cf > sf ? 1u : 0u) + (cf >= 4 * sf ? 1u : 0u);  		c->SummFreq += 3;  	} else {  		cf = 4 + (cf >= 9 * sf ? 1u : 0u) + (cf >= 12 * sf ? 1u : 0u) + (cf >= 15 * sf ? 1u : 0u);  		c->SummFreq = (ushort)(c->SummFreq + cf);  	}  	{  		CPpmd_State* s = STATS (p' c) + ns1;  		SetSuccessor (s' successor);  		s->Symbol = p.FoundState->Symbol;  		s->Freq = (byte)cf;  		c->NumStats = (ushort)(ns1 + 1);  	}  }  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,UpdateModel,The following statement contains a magic number: for (c = p.MaxContext; c != p.MinContext; c = SUFFIX (p' c)) {  	uint ns1;  	uint cf' sf;  	if ((ns1 = c->NumStats) != 1) {  		if ((ns1 & 1) == 0) {  			/* Expand for one UNIT */uint oldNU = ns1 >> 1;  			uint i = U2I (p' oldNU);  			if (i != U2I (p' oldNU + 1)) {  				void* ptr = AllocUnits (p' i + 1);  				void* oldPtr;  				if (ptr == null) {  					RestartModel (p);  					return;  				}  				oldPtr = STATS (p' c);  				MyMem12Cpy (ptr' oldPtr' oldNU);  				InsertNode (p' oldPtr' i);  				c->Stats = STATS_REF (p' ptr);  			}  		}  		c->SummFreq = (ushort)(c->SummFreq + (2 * ns1 < ns ? 1u : 0u) + 2 * ((4 * ns1 <= ns ? 1u : 0u) & (c->SummFreq <= 8 * ns1 ? 1u : 0u)));  	} else {  		CPpmd_State* s = (CPpmd_State*)AllocUnits (p' 0);  		if (s == null) {  			RestartModel (p);  			return;  		}  		*s = *ONE_STATE (c);  		c->Stats = REF (p' s);  		if (s->Freq < MAX_FREQ / 4 - 1)  			s->Freq <<= 1;  		else  			s->Freq = MAX_FREQ - 4;  		c->SummFreq = (ushort)(s->Freq + p.InitEsc + (ns > 3 ? 1u : 0u));  	}  	cf = 2 * (uint)p.FoundState->Freq * (c->SummFreq + 6u);  	sf = (uint)s0 + c->SummFreq;  	if (cf < 6 * sf) {  		cf = 1 + (cf > sf ? 1u : 0u) + (cf >= 4 * sf ? 1u : 0u);  		c->SummFreq += 3;  	} else {  		cf = 4 + (cf >= 9 * sf ? 1u : 0u) + (cf >= 12 * sf ? 1u : 0u) + (cf >= 15 * sf ? 1u : 0u);  		c->SummFreq = (ushort)(c->SummFreq + cf);  	}  	{  		CPpmd_State* s = STATS (p' c) + ns1;  		SetSuccessor (s' successor);  		s->Symbol = p.FoundState->Symbol;  		s->Freq = (byte)cf;  		c->NumStats = (ushort)(ns1 + 1);  	}  }  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,UpdateModel,The following statement contains a magic number: for (c = p.MaxContext; c != p.MinContext; c = SUFFIX (p' c)) {  	uint ns1;  	uint cf' sf;  	if ((ns1 = c->NumStats) != 1) {  		if ((ns1 & 1) == 0) {  			/* Expand for one UNIT */uint oldNU = ns1 >> 1;  			uint i = U2I (p' oldNU);  			if (i != U2I (p' oldNU + 1)) {  				void* ptr = AllocUnits (p' i + 1);  				void* oldPtr;  				if (ptr == null) {  					RestartModel (p);  					return;  				}  				oldPtr = STATS (p' c);  				MyMem12Cpy (ptr' oldPtr' oldNU);  				InsertNode (p' oldPtr' i);  				c->Stats = STATS_REF (p' ptr);  			}  		}  		c->SummFreq = (ushort)(c->SummFreq + (2 * ns1 < ns ? 1u : 0u) + 2 * ((4 * ns1 <= ns ? 1u : 0u) & (c->SummFreq <= 8 * ns1 ? 1u : 0u)));  	} else {  		CPpmd_State* s = (CPpmd_State*)AllocUnits (p' 0);  		if (s == null) {  			RestartModel (p);  			return;  		}  		*s = *ONE_STATE (c);  		c->Stats = REF (p' s);  		if (s->Freq < MAX_FREQ / 4 - 1)  			s->Freq <<= 1;  		else  			s->Freq = MAX_FREQ - 4;  		c->SummFreq = (ushort)(s->Freq + p.InitEsc + (ns > 3 ? 1u : 0u));  	}  	cf = 2 * (uint)p.FoundState->Freq * (c->SummFreq + 6u);  	sf = (uint)s0 + c->SummFreq;  	if (cf < 6 * sf) {  		cf = 1 + (cf > sf ? 1u : 0u) + (cf >= 4 * sf ? 1u : 0u);  		c->SummFreq += 3;  	} else {  		cf = 4 + (cf >= 9 * sf ? 1u : 0u) + (cf >= 12 * sf ? 1u : 0u) + (cf >= 15 * sf ? 1u : 0u);  		c->SummFreq = (ushort)(c->SummFreq + cf);  	}  	{  		CPpmd_State* s = STATS (p' c) + ns1;  		SetSuccessor (s' successor);  		s->Symbol = p.FoundState->Symbol;  		s->Freq = (byte)cf;  		c->NumStats = (ushort)(ns1 + 1);  	}  }  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,UpdateModel,The following statement contains a magic number: for (c = p.MaxContext; c != p.MinContext; c = SUFFIX (p' c)) {  	uint ns1;  	uint cf' sf;  	if ((ns1 = c->NumStats) != 1) {  		if ((ns1 & 1) == 0) {  			/* Expand for one UNIT */uint oldNU = ns1 >> 1;  			uint i = U2I (p' oldNU);  			if (i != U2I (p' oldNU + 1)) {  				void* ptr = AllocUnits (p' i + 1);  				void* oldPtr;  				if (ptr == null) {  					RestartModel (p);  					return;  				}  				oldPtr = STATS (p' c);  				MyMem12Cpy (ptr' oldPtr' oldNU);  				InsertNode (p' oldPtr' i);  				c->Stats = STATS_REF (p' ptr);  			}  		}  		c->SummFreq = (ushort)(c->SummFreq + (2 * ns1 < ns ? 1u : 0u) + 2 * ((4 * ns1 <= ns ? 1u : 0u) & (c->SummFreq <= 8 * ns1 ? 1u : 0u)));  	} else {  		CPpmd_State* s = (CPpmd_State*)AllocUnits (p' 0);  		if (s == null) {  			RestartModel (p);  			return;  		}  		*s = *ONE_STATE (c);  		c->Stats = REF (p' s);  		if (s->Freq < MAX_FREQ / 4 - 1)  			s->Freq <<= 1;  		else  			s->Freq = MAX_FREQ - 4;  		c->SummFreq = (ushort)(s->Freq + p.InitEsc + (ns > 3 ? 1u : 0u));  	}  	cf = 2 * (uint)p.FoundState->Freq * (c->SummFreq + 6u);  	sf = (uint)s0 + c->SummFreq;  	if (cf < 6 * sf) {  		cf = 1 + (cf > sf ? 1u : 0u) + (cf >= 4 * sf ? 1u : 0u);  		c->SummFreq += 3;  	} else {  		cf = 4 + (cf >= 9 * sf ? 1u : 0u) + (cf >= 12 * sf ? 1u : 0u) + (cf >= 15 * sf ? 1u : 0u);  		c->SummFreq = (ushort)(c->SummFreq + cf);  	}  	{  		CPpmd_State* s = STATS (p' c) + ns1;  		SetSuccessor (s' successor);  		s->Symbol = p.FoundState->Symbol;  		s->Freq = (byte)cf;  		c->NumStats = (ushort)(ns1 + 1);  	}  }  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,UpdateModel,The following statement contains a magic number: for (c = p.MaxContext; c != p.MinContext; c = SUFFIX (p' c)) {  	uint ns1;  	uint cf' sf;  	if ((ns1 = c->NumStats) != 1) {  		if ((ns1 & 1) == 0) {  			/* Expand for one UNIT */uint oldNU = ns1 >> 1;  			uint i = U2I (p' oldNU);  			if (i != U2I (p' oldNU + 1)) {  				void* ptr = AllocUnits (p' i + 1);  				void* oldPtr;  				if (ptr == null) {  					RestartModel (p);  					return;  				}  				oldPtr = STATS (p' c);  				MyMem12Cpy (ptr' oldPtr' oldNU);  				InsertNode (p' oldPtr' i);  				c->Stats = STATS_REF (p' ptr);  			}  		}  		c->SummFreq = (ushort)(c->SummFreq + (2 * ns1 < ns ? 1u : 0u) + 2 * ((4 * ns1 <= ns ? 1u : 0u) & (c->SummFreq <= 8 * ns1 ? 1u : 0u)));  	} else {  		CPpmd_State* s = (CPpmd_State*)AllocUnits (p' 0);  		if (s == null) {  			RestartModel (p);  			return;  		}  		*s = *ONE_STATE (c);  		c->Stats = REF (p' s);  		if (s->Freq < MAX_FREQ / 4 - 1)  			s->Freq <<= 1;  		else  			s->Freq = MAX_FREQ - 4;  		c->SummFreq = (ushort)(s->Freq + p.InitEsc + (ns > 3 ? 1u : 0u));  	}  	cf = 2 * (uint)p.FoundState->Freq * (c->SummFreq + 6u);  	sf = (uint)s0 + c->SummFreq;  	if (cf < 6 * sf) {  		cf = 1 + (cf > sf ? 1u : 0u) + (cf >= 4 * sf ? 1u : 0u);  		c->SummFreq += 3;  	} else {  		cf = 4 + (cf >= 9 * sf ? 1u : 0u) + (cf >= 12 * sf ? 1u : 0u) + (cf >= 15 * sf ? 1u : 0u);  		c->SummFreq = (ushort)(c->SummFreq + cf);  	}  	{  		CPpmd_State* s = STATS (p' c) + ns1;  		SetSuccessor (s' successor);  		s->Symbol = p.FoundState->Symbol;  		s->Freq = (byte)cf;  		c->NumStats = (ushort)(ns1 + 1);  	}  }  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,UpdateModel,The following statement contains a magic number: for (c = p.MaxContext; c != p.MinContext; c = SUFFIX (p' c)) {  	uint ns1;  	uint cf' sf;  	if ((ns1 = c->NumStats) != 1) {  		if ((ns1 & 1) == 0) {  			/* Expand for one UNIT */uint oldNU = ns1 >> 1;  			uint i = U2I (p' oldNU);  			if (i != U2I (p' oldNU + 1)) {  				void* ptr = AllocUnits (p' i + 1);  				void* oldPtr;  				if (ptr == null) {  					RestartModel (p);  					return;  				}  				oldPtr = STATS (p' c);  				MyMem12Cpy (ptr' oldPtr' oldNU);  				InsertNode (p' oldPtr' i);  				c->Stats = STATS_REF (p' ptr);  			}  		}  		c->SummFreq = (ushort)(c->SummFreq + (2 * ns1 < ns ? 1u : 0u) + 2 * ((4 * ns1 <= ns ? 1u : 0u) & (c->SummFreq <= 8 * ns1 ? 1u : 0u)));  	} else {  		CPpmd_State* s = (CPpmd_State*)AllocUnits (p' 0);  		if (s == null) {  			RestartModel (p);  			return;  		}  		*s = *ONE_STATE (c);  		c->Stats = REF (p' s);  		if (s->Freq < MAX_FREQ / 4 - 1)  			s->Freq <<= 1;  		else  			s->Freq = MAX_FREQ - 4;  		c->SummFreq = (ushort)(s->Freq + p.InitEsc + (ns > 3 ? 1u : 0u));  	}  	cf = 2 * (uint)p.FoundState->Freq * (c->SummFreq + 6u);  	sf = (uint)s0 + c->SummFreq;  	if (cf < 6 * sf) {  		cf = 1 + (cf > sf ? 1u : 0u) + (cf >= 4 * sf ? 1u : 0u);  		c->SummFreq += 3;  	} else {  		cf = 4 + (cf >= 9 * sf ? 1u : 0u) + (cf >= 12 * sf ? 1u : 0u) + (cf >= 15 * sf ? 1u : 0u);  		c->SummFreq = (ushort)(c->SummFreq + cf);  	}  	{  		CPpmd_State* s = STATS (p' c) + ns1;  		SetSuccessor (s' successor);  		s->Symbol = p.FoundState->Symbol;  		s->Freq = (byte)cf;  		c->NumStats = (ushort)(ns1 + 1);  	}  }  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,UpdateModel,The following statement contains a magic number: for (c = p.MaxContext; c != p.MinContext; c = SUFFIX (p' c)) {  	uint ns1;  	uint cf' sf;  	if ((ns1 = c->NumStats) != 1) {  		if ((ns1 & 1) == 0) {  			/* Expand for one UNIT */uint oldNU = ns1 >> 1;  			uint i = U2I (p' oldNU);  			if (i != U2I (p' oldNU + 1)) {  				void* ptr = AllocUnits (p' i + 1);  				void* oldPtr;  				if (ptr == null) {  					RestartModel (p);  					return;  				}  				oldPtr = STATS (p' c);  				MyMem12Cpy (ptr' oldPtr' oldNU);  				InsertNode (p' oldPtr' i);  				c->Stats = STATS_REF (p' ptr);  			}  		}  		c->SummFreq = (ushort)(c->SummFreq + (2 * ns1 < ns ? 1u : 0u) + 2 * ((4 * ns1 <= ns ? 1u : 0u) & (c->SummFreq <= 8 * ns1 ? 1u : 0u)));  	} else {  		CPpmd_State* s = (CPpmd_State*)AllocUnits (p' 0);  		if (s == null) {  			RestartModel (p);  			return;  		}  		*s = *ONE_STATE (c);  		c->Stats = REF (p' s);  		if (s->Freq < MAX_FREQ / 4 - 1)  			s->Freq <<= 1;  		else  			s->Freq = MAX_FREQ - 4;  		c->SummFreq = (ushort)(s->Freq + p.InitEsc + (ns > 3 ? 1u : 0u));  	}  	cf = 2 * (uint)p.FoundState->Freq * (c->SummFreq + 6u);  	sf = (uint)s0 + c->SummFreq;  	if (cf < 6 * sf) {  		cf = 1 + (cf > sf ? 1u : 0u) + (cf >= 4 * sf ? 1u : 0u);  		c->SummFreq += 3;  	} else {  		cf = 4 + (cf >= 9 * sf ? 1u : 0u) + (cf >= 12 * sf ? 1u : 0u) + (cf >= 15 * sf ? 1u : 0u);  		c->SummFreq = (ushort)(c->SummFreq + cf);  	}  	{  		CPpmd_State* s = STATS (p' c) + ns1;  		SetSuccessor (s' successor);  		s->Symbol = p.FoundState->Symbol;  		s->Freq = (byte)cf;  		c->NumStats = (ushort)(ns1 + 1);  	}  }  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,UpdateModel,The following statement contains a magic number: for (c = p.MaxContext; c != p.MinContext; c = SUFFIX (p' c)) {  	uint ns1;  	uint cf' sf;  	if ((ns1 = c->NumStats) != 1) {  		if ((ns1 & 1) == 0) {  			/* Expand for one UNIT */uint oldNU = ns1 >> 1;  			uint i = U2I (p' oldNU);  			if (i != U2I (p' oldNU + 1)) {  				void* ptr = AllocUnits (p' i + 1);  				void* oldPtr;  				if (ptr == null) {  					RestartModel (p);  					return;  				}  				oldPtr = STATS (p' c);  				MyMem12Cpy (ptr' oldPtr' oldNU);  				InsertNode (p' oldPtr' i);  				c->Stats = STATS_REF (p' ptr);  			}  		}  		c->SummFreq = (ushort)(c->SummFreq + (2 * ns1 < ns ? 1u : 0u) + 2 * ((4 * ns1 <= ns ? 1u : 0u) & (c->SummFreq <= 8 * ns1 ? 1u : 0u)));  	} else {  		CPpmd_State* s = (CPpmd_State*)AllocUnits (p' 0);  		if (s == null) {  			RestartModel (p);  			return;  		}  		*s = *ONE_STATE (c);  		c->Stats = REF (p' s);  		if (s->Freq < MAX_FREQ / 4 - 1)  			s->Freq <<= 1;  		else  			s->Freq = MAX_FREQ - 4;  		c->SummFreq = (ushort)(s->Freq + p.InitEsc + (ns > 3 ? 1u : 0u));  	}  	cf = 2 * (uint)p.FoundState->Freq * (c->SummFreq + 6u);  	sf = (uint)s0 + c->SummFreq;  	if (cf < 6 * sf) {  		cf = 1 + (cf > sf ? 1u : 0u) + (cf >= 4 * sf ? 1u : 0u);  		c->SummFreq += 3;  	} else {  		cf = 4 + (cf >= 9 * sf ? 1u : 0u) + (cf >= 12 * sf ? 1u : 0u) + (cf >= 15 * sf ? 1u : 0u);  		c->SummFreq = (ushort)(c->SummFreq + cf);  	}  	{  		CPpmd_State* s = STATS (p' c) + ns1;  		SetSuccessor (s' successor);  		s->Symbol = p.FoundState->Symbol;  		s->Freq = (byte)cf;  		c->NumStats = (ushort)(ns1 + 1);  	}  }  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,UpdateModel,The following statement contains a magic number: for (c = p.MaxContext; c != p.MinContext; c = SUFFIX (p' c)) {  	uint ns1;  	uint cf' sf;  	if ((ns1 = c->NumStats) != 1) {  		if ((ns1 & 1) == 0) {  			/* Expand for one UNIT */uint oldNU = ns1 >> 1;  			uint i = U2I (p' oldNU);  			if (i != U2I (p' oldNU + 1)) {  				void* ptr = AllocUnits (p' i + 1);  				void* oldPtr;  				if (ptr == null) {  					RestartModel (p);  					return;  				}  				oldPtr = STATS (p' c);  				MyMem12Cpy (ptr' oldPtr' oldNU);  				InsertNode (p' oldPtr' i);  				c->Stats = STATS_REF (p' ptr);  			}  		}  		c->SummFreq = (ushort)(c->SummFreq + (2 * ns1 < ns ? 1u : 0u) + 2 * ((4 * ns1 <= ns ? 1u : 0u) & (c->SummFreq <= 8 * ns1 ? 1u : 0u)));  	} else {  		CPpmd_State* s = (CPpmd_State*)AllocUnits (p' 0);  		if (s == null) {  			RestartModel (p);  			return;  		}  		*s = *ONE_STATE (c);  		c->Stats = REF (p' s);  		if (s->Freq < MAX_FREQ / 4 - 1)  			s->Freq <<= 1;  		else  			s->Freq = MAX_FREQ - 4;  		c->SummFreq = (ushort)(s->Freq + p.InitEsc + (ns > 3 ? 1u : 0u));  	}  	cf = 2 * (uint)p.FoundState->Freq * (c->SummFreq + 6u);  	sf = (uint)s0 + c->SummFreq;  	if (cf < 6 * sf) {  		cf = 1 + (cf > sf ? 1u : 0u) + (cf >= 4 * sf ? 1u : 0u);  		c->SummFreq += 3;  	} else {  		cf = 4 + (cf >= 9 * sf ? 1u : 0u) + (cf >= 12 * sf ? 1u : 0u) + (cf >= 15 * sf ? 1u : 0u);  		c->SummFreq = (ushort)(c->SummFreq + cf);  	}  	{  		CPpmd_State* s = STATS (p' c) + ns1;  		SetSuccessor (s' successor);  		s->Symbol = p.FoundState->Symbol;  		s->Freq = (byte)cf;  		c->NumStats = (ushort)(ns1 + 1);  	}  }  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,UpdateModel,The following statement contains a magic number: for (c = p.MaxContext; c != p.MinContext; c = SUFFIX (p' c)) {  	uint ns1;  	uint cf' sf;  	if ((ns1 = c->NumStats) != 1) {  		if ((ns1 & 1) == 0) {  			/* Expand for one UNIT */uint oldNU = ns1 >> 1;  			uint i = U2I (p' oldNU);  			if (i != U2I (p' oldNU + 1)) {  				void* ptr = AllocUnits (p' i + 1);  				void* oldPtr;  				if (ptr == null) {  					RestartModel (p);  					return;  				}  				oldPtr = STATS (p' c);  				MyMem12Cpy (ptr' oldPtr' oldNU);  				InsertNode (p' oldPtr' i);  				c->Stats = STATS_REF (p' ptr);  			}  		}  		c->SummFreq = (ushort)(c->SummFreq + (2 * ns1 < ns ? 1u : 0u) + 2 * ((4 * ns1 <= ns ? 1u : 0u) & (c->SummFreq <= 8 * ns1 ? 1u : 0u)));  	} else {  		CPpmd_State* s = (CPpmd_State*)AllocUnits (p' 0);  		if (s == null) {  			RestartModel (p);  			return;  		}  		*s = *ONE_STATE (c);  		c->Stats = REF (p' s);  		if (s->Freq < MAX_FREQ / 4 - 1)  			s->Freq <<= 1;  		else  			s->Freq = MAX_FREQ - 4;  		c->SummFreq = (ushort)(s->Freq + p.InitEsc + (ns > 3 ? 1u : 0u));  	}  	cf = 2 * (uint)p.FoundState->Freq * (c->SummFreq + 6u);  	sf = (uint)s0 + c->SummFreq;  	if (cf < 6 * sf) {  		cf = 1 + (cf > sf ? 1u : 0u) + (cf >= 4 * sf ? 1u : 0u);  		c->SummFreq += 3;  	} else {  		cf = 4 + (cf >= 9 * sf ? 1u : 0u) + (cf >= 12 * sf ? 1u : 0u) + (cf >= 15 * sf ? 1u : 0u);  		c->SummFreq = (ushort)(c->SummFreq + cf);  	}  	{  		CPpmd_State* s = STATS (p' c) + ns1;  		SetSuccessor (s' successor);  		s->Symbol = p.FoundState->Symbol;  		s->Freq = (byte)cf;  		c->NumStats = (ushort)(ns1 + 1);  	}  }  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,UpdateModel,The following statement contains a magic number: for (c = p.MaxContext; c != p.MinContext; c = SUFFIX (p' c)) {  	uint ns1;  	uint cf' sf;  	if ((ns1 = c->NumStats) != 1) {  		if ((ns1 & 1) == 0) {  			/* Expand for one UNIT */uint oldNU = ns1 >> 1;  			uint i = U2I (p' oldNU);  			if (i != U2I (p' oldNU + 1)) {  				void* ptr = AllocUnits (p' i + 1);  				void* oldPtr;  				if (ptr == null) {  					RestartModel (p);  					return;  				}  				oldPtr = STATS (p' c);  				MyMem12Cpy (ptr' oldPtr' oldNU);  				InsertNode (p' oldPtr' i);  				c->Stats = STATS_REF (p' ptr);  			}  		}  		c->SummFreq = (ushort)(c->SummFreq + (2 * ns1 < ns ? 1u : 0u) + 2 * ((4 * ns1 <= ns ? 1u : 0u) & (c->SummFreq <= 8 * ns1 ? 1u : 0u)));  	} else {  		CPpmd_State* s = (CPpmd_State*)AllocUnits (p' 0);  		if (s == null) {  			RestartModel (p);  			return;  		}  		*s = *ONE_STATE (c);  		c->Stats = REF (p' s);  		if (s->Freq < MAX_FREQ / 4 - 1)  			s->Freq <<= 1;  		else  			s->Freq = MAX_FREQ - 4;  		c->SummFreq = (ushort)(s->Freq + p.InitEsc + (ns > 3 ? 1u : 0u));  	}  	cf = 2 * (uint)p.FoundState->Freq * (c->SummFreq + 6u);  	sf = (uint)s0 + c->SummFreq;  	if (cf < 6 * sf) {  		cf = 1 + (cf > sf ? 1u : 0u) + (cf >= 4 * sf ? 1u : 0u);  		c->SummFreq += 3;  	} else {  		cf = 4 + (cf >= 9 * sf ? 1u : 0u) + (cf >= 12 * sf ? 1u : 0u) + (cf >= 15 * sf ? 1u : 0u);  		c->SummFreq = (ushort)(c->SummFreq + cf);  	}  	{  		CPpmd_State* s = STATS (p' c) + ns1;  		SetSuccessor (s' successor);  		s->Symbol = p.FoundState->Symbol;  		s->Freq = (byte)cf;  		c->NumStats = (ushort)(ns1 + 1);  	}  }  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,UpdateModel,The following statement contains a magic number: for (c = p.MaxContext; c != p.MinContext; c = SUFFIX (p' c)) {  	uint ns1;  	uint cf' sf;  	if ((ns1 = c->NumStats) != 1) {  		if ((ns1 & 1) == 0) {  			/* Expand for one UNIT */uint oldNU = ns1 >> 1;  			uint i = U2I (p' oldNU);  			if (i != U2I (p' oldNU + 1)) {  				void* ptr = AllocUnits (p' i + 1);  				void* oldPtr;  				if (ptr == null) {  					RestartModel (p);  					return;  				}  				oldPtr = STATS (p' c);  				MyMem12Cpy (ptr' oldPtr' oldNU);  				InsertNode (p' oldPtr' i);  				c->Stats = STATS_REF (p' ptr);  			}  		}  		c->SummFreq = (ushort)(c->SummFreq + (2 * ns1 < ns ? 1u : 0u) + 2 * ((4 * ns1 <= ns ? 1u : 0u) & (c->SummFreq <= 8 * ns1 ? 1u : 0u)));  	} else {  		CPpmd_State* s = (CPpmd_State*)AllocUnits (p' 0);  		if (s == null) {  			RestartModel (p);  			return;  		}  		*s = *ONE_STATE (c);  		c->Stats = REF (p' s);  		if (s->Freq < MAX_FREQ / 4 - 1)  			s->Freq <<= 1;  		else  			s->Freq = MAX_FREQ - 4;  		c->SummFreq = (ushort)(s->Freq + p.InitEsc + (ns > 3 ? 1u : 0u));  	}  	cf = 2 * (uint)p.FoundState->Freq * (c->SummFreq + 6u);  	sf = (uint)s0 + c->SummFreq;  	if (cf < 6 * sf) {  		cf = 1 + (cf > sf ? 1u : 0u) + (cf >= 4 * sf ? 1u : 0u);  		c->SummFreq += 3;  	} else {  		cf = 4 + (cf >= 9 * sf ? 1u : 0u) + (cf >= 12 * sf ? 1u : 0u) + (cf >= 15 * sf ? 1u : 0u);  		c->SummFreq = (ushort)(c->SummFreq + cf);  	}  	{  		CPpmd_State* s = STATS (p' c) + ns1;  		SetSuccessor (s' successor);  		s->Symbol = p.FoundState->Symbol;  		s->Freq = (byte)cf;  		c->NumStats = (ushort)(ns1 + 1);  	}  }  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,UpdateModel,The following statement contains a magic number: if ((ns1 = c->NumStats) != 1) {  	if ((ns1 & 1) == 0) {  		/* Expand for one UNIT */uint oldNU = ns1 >> 1;  		uint i = U2I (p' oldNU);  		if (i != U2I (p' oldNU + 1)) {  			void* ptr = AllocUnits (p' i + 1);  			void* oldPtr;  			if (ptr == null) {  				RestartModel (p);  				return;  			}  			oldPtr = STATS (p' c);  			MyMem12Cpy (ptr' oldPtr' oldNU);  			InsertNode (p' oldPtr' i);  			c->Stats = STATS_REF (p' ptr);  		}  	}  	c->SummFreq = (ushort)(c->SummFreq + (2 * ns1 < ns ? 1u : 0u) + 2 * ((4 * ns1 <= ns ? 1u : 0u) & (c->SummFreq <= 8 * ns1 ? 1u : 0u)));  } else {  	CPpmd_State* s = (CPpmd_State*)AllocUnits (p' 0);  	if (s == null) {  		RestartModel (p);  		return;  	}  	*s = *ONE_STATE (c);  	c->Stats = REF (p' s);  	if (s->Freq < MAX_FREQ / 4 - 1)  		s->Freq <<= 1;  	else  		s->Freq = MAX_FREQ - 4;  	c->SummFreq = (ushort)(s->Freq + p.InitEsc + (ns > 3 ? 1u : 0u));  }  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,UpdateModel,The following statement contains a magic number: if ((ns1 = c->NumStats) != 1) {  	if ((ns1 & 1) == 0) {  		/* Expand for one UNIT */uint oldNU = ns1 >> 1;  		uint i = U2I (p' oldNU);  		if (i != U2I (p' oldNU + 1)) {  			void* ptr = AllocUnits (p' i + 1);  			void* oldPtr;  			if (ptr == null) {  				RestartModel (p);  				return;  			}  			oldPtr = STATS (p' c);  			MyMem12Cpy (ptr' oldPtr' oldNU);  			InsertNode (p' oldPtr' i);  			c->Stats = STATS_REF (p' ptr);  		}  	}  	c->SummFreq = (ushort)(c->SummFreq + (2 * ns1 < ns ? 1u : 0u) + 2 * ((4 * ns1 <= ns ? 1u : 0u) & (c->SummFreq <= 8 * ns1 ? 1u : 0u)));  } else {  	CPpmd_State* s = (CPpmd_State*)AllocUnits (p' 0);  	if (s == null) {  		RestartModel (p);  		return;  	}  	*s = *ONE_STATE (c);  	c->Stats = REF (p' s);  	if (s->Freq < MAX_FREQ / 4 - 1)  		s->Freq <<= 1;  	else  		s->Freq = MAX_FREQ - 4;  	c->SummFreq = (ushort)(s->Freq + p.InitEsc + (ns > 3 ? 1u : 0u));  }  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,UpdateModel,The following statement contains a magic number: if ((ns1 = c->NumStats) != 1) {  	if ((ns1 & 1) == 0) {  		/* Expand for one UNIT */uint oldNU = ns1 >> 1;  		uint i = U2I (p' oldNU);  		if (i != U2I (p' oldNU + 1)) {  			void* ptr = AllocUnits (p' i + 1);  			void* oldPtr;  			if (ptr == null) {  				RestartModel (p);  				return;  			}  			oldPtr = STATS (p' c);  			MyMem12Cpy (ptr' oldPtr' oldNU);  			InsertNode (p' oldPtr' i);  			c->Stats = STATS_REF (p' ptr);  		}  	}  	c->SummFreq = (ushort)(c->SummFreq + (2 * ns1 < ns ? 1u : 0u) + 2 * ((4 * ns1 <= ns ? 1u : 0u) & (c->SummFreq <= 8 * ns1 ? 1u : 0u)));  } else {  	CPpmd_State* s = (CPpmd_State*)AllocUnits (p' 0);  	if (s == null) {  		RestartModel (p);  		return;  	}  	*s = *ONE_STATE (c);  	c->Stats = REF (p' s);  	if (s->Freq < MAX_FREQ / 4 - 1)  		s->Freq <<= 1;  	else  		s->Freq = MAX_FREQ - 4;  	c->SummFreq = (ushort)(s->Freq + p.InitEsc + (ns > 3 ? 1u : 0u));  }  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,UpdateModel,The following statement contains a magic number: if ((ns1 = c->NumStats) != 1) {  	if ((ns1 & 1) == 0) {  		/* Expand for one UNIT */uint oldNU = ns1 >> 1;  		uint i = U2I (p' oldNU);  		if (i != U2I (p' oldNU + 1)) {  			void* ptr = AllocUnits (p' i + 1);  			void* oldPtr;  			if (ptr == null) {  				RestartModel (p);  				return;  			}  			oldPtr = STATS (p' c);  			MyMem12Cpy (ptr' oldPtr' oldNU);  			InsertNode (p' oldPtr' i);  			c->Stats = STATS_REF (p' ptr);  		}  	}  	c->SummFreq = (ushort)(c->SummFreq + (2 * ns1 < ns ? 1u : 0u) + 2 * ((4 * ns1 <= ns ? 1u : 0u) & (c->SummFreq <= 8 * ns1 ? 1u : 0u)));  } else {  	CPpmd_State* s = (CPpmd_State*)AllocUnits (p' 0);  	if (s == null) {  		RestartModel (p);  		return;  	}  	*s = *ONE_STATE (c);  	c->Stats = REF (p' s);  	if (s->Freq < MAX_FREQ / 4 - 1)  		s->Freq <<= 1;  	else  		s->Freq = MAX_FREQ - 4;  	c->SummFreq = (ushort)(s->Freq + p.InitEsc + (ns > 3 ? 1u : 0u));  }  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,UpdateModel,The following statement contains a magic number: if ((ns1 = c->NumStats) != 1) {  	if ((ns1 & 1) == 0) {  		/* Expand for one UNIT */uint oldNU = ns1 >> 1;  		uint i = U2I (p' oldNU);  		if (i != U2I (p' oldNU + 1)) {  			void* ptr = AllocUnits (p' i + 1);  			void* oldPtr;  			if (ptr == null) {  				RestartModel (p);  				return;  			}  			oldPtr = STATS (p' c);  			MyMem12Cpy (ptr' oldPtr' oldNU);  			InsertNode (p' oldPtr' i);  			c->Stats = STATS_REF (p' ptr);  		}  	}  	c->SummFreq = (ushort)(c->SummFreq + (2 * ns1 < ns ? 1u : 0u) + 2 * ((4 * ns1 <= ns ? 1u : 0u) & (c->SummFreq <= 8 * ns1 ? 1u : 0u)));  } else {  	CPpmd_State* s = (CPpmd_State*)AllocUnits (p' 0);  	if (s == null) {  		RestartModel (p);  		return;  	}  	*s = *ONE_STATE (c);  	c->Stats = REF (p' s);  	if (s->Freq < MAX_FREQ / 4 - 1)  		s->Freq <<= 1;  	else  		s->Freq = MAX_FREQ - 4;  	c->SummFreq = (ushort)(s->Freq + p.InitEsc + (ns > 3 ? 1u : 0u));  }  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,UpdateModel,The following statement contains a magic number: if ((ns1 = c->NumStats) != 1) {  	if ((ns1 & 1) == 0) {  		/* Expand for one UNIT */uint oldNU = ns1 >> 1;  		uint i = U2I (p' oldNU);  		if (i != U2I (p' oldNU + 1)) {  			void* ptr = AllocUnits (p' i + 1);  			void* oldPtr;  			if (ptr == null) {  				RestartModel (p);  				return;  			}  			oldPtr = STATS (p' c);  			MyMem12Cpy (ptr' oldPtr' oldNU);  			InsertNode (p' oldPtr' i);  			c->Stats = STATS_REF (p' ptr);  		}  	}  	c->SummFreq = (ushort)(c->SummFreq + (2 * ns1 < ns ? 1u : 0u) + 2 * ((4 * ns1 <= ns ? 1u : 0u) & (c->SummFreq <= 8 * ns1 ? 1u : 0u)));  } else {  	CPpmd_State* s = (CPpmd_State*)AllocUnits (p' 0);  	if (s == null) {  		RestartModel (p);  		return;  	}  	*s = *ONE_STATE (c);  	c->Stats = REF (p' s);  	if (s->Freq < MAX_FREQ / 4 - 1)  		s->Freq <<= 1;  	else  		s->Freq = MAX_FREQ - 4;  	c->SummFreq = (ushort)(s->Freq + p.InitEsc + (ns > 3 ? 1u : 0u));  }  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,UpdateModel,The following statement contains a magic number: if ((ns1 = c->NumStats) != 1) {  	if ((ns1 & 1) == 0) {  		/* Expand for one UNIT */uint oldNU = ns1 >> 1;  		uint i = U2I (p' oldNU);  		if (i != U2I (p' oldNU + 1)) {  			void* ptr = AllocUnits (p' i + 1);  			void* oldPtr;  			if (ptr == null) {  				RestartModel (p);  				return;  			}  			oldPtr = STATS (p' c);  			MyMem12Cpy (ptr' oldPtr' oldNU);  			InsertNode (p' oldPtr' i);  			c->Stats = STATS_REF (p' ptr);  		}  	}  	c->SummFreq = (ushort)(c->SummFreq + (2 * ns1 < ns ? 1u : 0u) + 2 * ((4 * ns1 <= ns ? 1u : 0u) & (c->SummFreq <= 8 * ns1 ? 1u : 0u)));  } else {  	CPpmd_State* s = (CPpmd_State*)AllocUnits (p' 0);  	if (s == null) {  		RestartModel (p);  		return;  	}  	*s = *ONE_STATE (c);  	c->Stats = REF (p' s);  	if (s->Freq < MAX_FREQ / 4 - 1)  		s->Freq <<= 1;  	else  		s->Freq = MAX_FREQ - 4;  	c->SummFreq = (ushort)(s->Freq + p.InitEsc + (ns > 3 ? 1u : 0u));  }  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,UpdateModel,The following statement contains a magic number: c->SummFreq = (ushort)(c->SummFreq + (2 * ns1 < ns ? 1u : 0u) + 2 * ((4 * ns1 <= ns ? 1u : 0u) & (c->SummFreq <= 8 * ns1 ? 1u : 0u)));  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,UpdateModel,The following statement contains a magic number: c->SummFreq = (ushort)(c->SummFreq + (2 * ns1 < ns ? 1u : 0u) + 2 * ((4 * ns1 <= ns ? 1u : 0u) & (c->SummFreq <= 8 * ns1 ? 1u : 0u)));  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,UpdateModel,The following statement contains a magic number: c->SummFreq = (ushort)(c->SummFreq + (2 * ns1 < ns ? 1u : 0u) + 2 * ((4 * ns1 <= ns ? 1u : 0u) & (c->SummFreq <= 8 * ns1 ? 1u : 0u)));  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,UpdateModel,The following statement contains a magic number: c->SummFreq = (ushort)(c->SummFreq + (2 * ns1 < ns ? 1u : 0u) + 2 * ((4 * ns1 <= ns ? 1u : 0u) & (c->SummFreq <= 8 * ns1 ? 1u : 0u)));  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,UpdateModel,The following statement contains a magic number: if (s->Freq < MAX_FREQ / 4 - 1)  	s->Freq <<= 1;  else  	s->Freq = MAX_FREQ - 4;  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,UpdateModel,The following statement contains a magic number: if (s->Freq < MAX_FREQ / 4 - 1)  	s->Freq <<= 1;  else  	s->Freq = MAX_FREQ - 4;  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,UpdateModel,The following statement contains a magic number: s->Freq = MAX_FREQ - 4;  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,UpdateModel,The following statement contains a magic number: c->SummFreq = (ushort)(s->Freq + p.InitEsc + (ns > 3 ? 1u : 0u));  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,UpdateModel,The following statement contains a magic number: cf = 2 * (uint)p.FoundState->Freq * (c->SummFreq + 6u);  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,UpdateModel,The following statement contains a magic number: if (cf < 6 * sf) {  	cf = 1 + (cf > sf ? 1u : 0u) + (cf >= 4 * sf ? 1u : 0u);  	c->SummFreq += 3;  } else {  	cf = 4 + (cf >= 9 * sf ? 1u : 0u) + (cf >= 12 * sf ? 1u : 0u) + (cf >= 15 * sf ? 1u : 0u);  	c->SummFreq = (ushort)(c->SummFreq + cf);  }  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,UpdateModel,The following statement contains a magic number: if (cf < 6 * sf) {  	cf = 1 + (cf > sf ? 1u : 0u) + (cf >= 4 * sf ? 1u : 0u);  	c->SummFreq += 3;  } else {  	cf = 4 + (cf >= 9 * sf ? 1u : 0u) + (cf >= 12 * sf ? 1u : 0u) + (cf >= 15 * sf ? 1u : 0u);  	c->SummFreq = (ushort)(c->SummFreq + cf);  }  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,UpdateModel,The following statement contains a magic number: if (cf < 6 * sf) {  	cf = 1 + (cf > sf ? 1u : 0u) + (cf >= 4 * sf ? 1u : 0u);  	c->SummFreq += 3;  } else {  	cf = 4 + (cf >= 9 * sf ? 1u : 0u) + (cf >= 12 * sf ? 1u : 0u) + (cf >= 15 * sf ? 1u : 0u);  	c->SummFreq = (ushort)(c->SummFreq + cf);  }  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,UpdateModel,The following statement contains a magic number: if (cf < 6 * sf) {  	cf = 1 + (cf > sf ? 1u : 0u) + (cf >= 4 * sf ? 1u : 0u);  	c->SummFreq += 3;  } else {  	cf = 4 + (cf >= 9 * sf ? 1u : 0u) + (cf >= 12 * sf ? 1u : 0u) + (cf >= 15 * sf ? 1u : 0u);  	c->SummFreq = (ushort)(c->SummFreq + cf);  }  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,UpdateModel,The following statement contains a magic number: if (cf < 6 * sf) {  	cf = 1 + (cf > sf ? 1u : 0u) + (cf >= 4 * sf ? 1u : 0u);  	c->SummFreq += 3;  } else {  	cf = 4 + (cf >= 9 * sf ? 1u : 0u) + (cf >= 12 * sf ? 1u : 0u) + (cf >= 15 * sf ? 1u : 0u);  	c->SummFreq = (ushort)(c->SummFreq + cf);  }  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,UpdateModel,The following statement contains a magic number: if (cf < 6 * sf) {  	cf = 1 + (cf > sf ? 1u : 0u) + (cf >= 4 * sf ? 1u : 0u);  	c->SummFreq += 3;  } else {  	cf = 4 + (cf >= 9 * sf ? 1u : 0u) + (cf >= 12 * sf ? 1u : 0u) + (cf >= 15 * sf ? 1u : 0u);  	c->SummFreq = (ushort)(c->SummFreq + cf);  }  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,UpdateModel,The following statement contains a magic number: if (cf < 6 * sf) {  	cf = 1 + (cf > sf ? 1u : 0u) + (cf >= 4 * sf ? 1u : 0u);  	c->SummFreq += 3;  } else {  	cf = 4 + (cf >= 9 * sf ? 1u : 0u) + (cf >= 12 * sf ? 1u : 0u) + (cf >= 15 * sf ? 1u : 0u);  	c->SummFreq = (ushort)(c->SummFreq + cf);  }  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,UpdateModel,The following statement contains a magic number: cf = 1 + (cf > sf ? 1u : 0u) + (cf >= 4 * sf ? 1u : 0u);  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,UpdateModel,The following statement contains a magic number: c->SummFreq += 3;  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,UpdateModel,The following statement contains a magic number: cf = 4 + (cf >= 9 * sf ? 1u : 0u) + (cf >= 12 * sf ? 1u : 0u) + (cf >= 15 * sf ? 1u : 0u);  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,UpdateModel,The following statement contains a magic number: cf = 4 + (cf >= 9 * sf ? 1u : 0u) + (cf >= 12 * sf ? 1u : 0u) + (cf >= 15 * sf ? 1u : 0u);  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,UpdateModel,The following statement contains a magic number: cf = 4 + (cf >= 9 * sf ? 1u : 0u) + (cf >= 12 * sf ? 1u : 0u) + (cf >= 15 * sf ? 1u : 0u);  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,UpdateModel,The following statement contains a magic number: cf = 4 + (cf >= 9 * sf ? 1u : 0u) + (cf >= 12 * sf ? 1u : 0u) + (cf >= 15 * sf ? 1u : 0u);  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,Rescale,The following statement contains a magic number: s->Freq += 4;  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,Ppmd7_MakeEscFreq,The following statement contains a magic number: if (p.MinContext->NumStats != 256) {  	see = p.See [p.NS2Indx [nonMasked - 1]] + (nonMasked < (uint)SUFFIX (p' p.MinContext)->NumStats - p.MinContext->NumStats ? 1 : 0) + 2 * (p.MinContext->SummFreq < 11 * p.MinContext->NumStats ? 1 : 0) + 4 * (numMasked > nonMasked ? 1 : 0) + p.HiBitsFlag;  	{  		uint r = ((uint)see->Summ >> see->Shift);  		see->Summ = (ushort)(see->Summ - r);  		*escFreq = r + ((r == 0) ? 1u : 0u);  	}  } else {  	see = p.DummySee;  	*escFreq = 1;  }  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,Ppmd7_MakeEscFreq,The following statement contains a magic number: if (p.MinContext->NumStats != 256) {  	see = p.See [p.NS2Indx [nonMasked - 1]] + (nonMasked < (uint)SUFFIX (p' p.MinContext)->NumStats - p.MinContext->NumStats ? 1 : 0) + 2 * (p.MinContext->SummFreq < 11 * p.MinContext->NumStats ? 1 : 0) + 4 * (numMasked > nonMasked ? 1 : 0) + p.HiBitsFlag;  	{  		uint r = ((uint)see->Summ >> see->Shift);  		see->Summ = (ushort)(see->Summ - r);  		*escFreq = r + ((r == 0) ? 1u : 0u);  	}  } else {  	see = p.DummySee;  	*escFreq = 1;  }  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,Ppmd7_MakeEscFreq,The following statement contains a magic number: if (p.MinContext->NumStats != 256) {  	see = p.See [p.NS2Indx [nonMasked - 1]] + (nonMasked < (uint)SUFFIX (p' p.MinContext)->NumStats - p.MinContext->NumStats ? 1 : 0) + 2 * (p.MinContext->SummFreq < 11 * p.MinContext->NumStats ? 1 : 0) + 4 * (numMasked > nonMasked ? 1 : 0) + p.HiBitsFlag;  	{  		uint r = ((uint)see->Summ >> see->Shift);  		see->Summ = (ushort)(see->Summ - r);  		*escFreq = r + ((r == 0) ? 1u : 0u);  	}  } else {  	see = p.DummySee;  	*escFreq = 1;  }  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,Ppmd7_MakeEscFreq,The following statement contains a magic number: if (p.MinContext->NumStats != 256) {  	see = p.See [p.NS2Indx [nonMasked - 1]] + (nonMasked < (uint)SUFFIX (p' p.MinContext)->NumStats - p.MinContext->NumStats ? 1 : 0) + 2 * (p.MinContext->SummFreq < 11 * p.MinContext->NumStats ? 1 : 0) + 4 * (numMasked > nonMasked ? 1 : 0) + p.HiBitsFlag;  	{  		uint r = ((uint)see->Summ >> see->Shift);  		see->Summ = (ushort)(see->Summ - r);  		*escFreq = r + ((r == 0) ? 1u : 0u);  	}  } else {  	see = p.DummySee;  	*escFreq = 1;  }  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,Ppmd7_MakeEscFreq,The following statement contains a magic number: see = p.See [p.NS2Indx [nonMasked - 1]] + (nonMasked < (uint)SUFFIX (p' p.MinContext)->NumStats - p.MinContext->NumStats ? 1 : 0) + 2 * (p.MinContext->SummFreq < 11 * p.MinContext->NumStats ? 1 : 0) + 4 * (numMasked > nonMasked ? 1 : 0) + p.HiBitsFlag;  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,Ppmd7_MakeEscFreq,The following statement contains a magic number: see = p.See [p.NS2Indx [nonMasked - 1]] + (nonMasked < (uint)SUFFIX (p' p.MinContext)->NumStats - p.MinContext->NumStats ? 1 : 0) + 2 * (p.MinContext->SummFreq < 11 * p.MinContext->NumStats ? 1 : 0) + 4 * (numMasked > nonMasked ? 1 : 0) + p.HiBitsFlag;  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,Ppmd7_MakeEscFreq,The following statement contains a magic number: see = p.See [p.NS2Indx [nonMasked - 1]] + (nonMasked < (uint)SUFFIX (p' p.MinContext)->NumStats - p.MinContext->NumStats ? 1 : 0) + 2 * (p.MinContext->SummFreq < 11 * p.MinContext->NumStats ? 1 : 0) + 4 * (numMasked > nonMasked ? 1 : 0) + p.HiBitsFlag;  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,Ppmd7_Update1,The following statement contains a magic number: s->Freq += 4;  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,Ppmd7_Update1,The following statement contains a magic number: p.MinContext->SummFreq += 4;  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,Ppmd7_Update1_0,The following statement contains a magic number: p.MinContext->SummFreq += 4;  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,Ppmd7_Update1_0,The following statement contains a magic number: if ((p.FoundState->Freq += 4) > MAX_FREQ)  	Rescale (p);  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,Ppmd7_UpdateBin,The following statement contains a magic number: p.FoundState->Freq = (byte)(p.FoundState->Freq + (p.FoundState->Freq < 128 ? 1 : 0));  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,Ppmd7_Update2,The following statement contains a magic number: p.MinContext->SummFreq += 4;  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,Ppmd7_Update2,The following statement contains a magic number: if ((p.FoundState->Freq += 4) > MAX_FREQ)  	Rescale (p);  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,Ppmd7z_RangeDec_Init,The following statement contains a magic number: for (i = 0; i < 4; i++)  	p.Code = (p.Code << 8) | p.Stream.Read (p.Stream);  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,Ppmd7z_RangeDec_Init,The following statement contains a magic number: for (i = 0; i < 4; i++)  	p.Code = (p.Code << 8) | p.Stream.Read (p.Stream);  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,Ppmd7z_RangeDec_Init,The following statement contains a magic number: p.Code = (p.Code << 8) | p.Stream.Read (p.Stream);  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,Range_Normalize,The following statement contains a magic number: if (p.Range < kTopValue) {  	p.Code = (p.Code << 8) | p.Stream.Read (p.Stream);  	p.Range <<= 8;  	if (p.Range < kTopValue) {  		p.Code = (p.Code << 8) | p.Stream.Read (p.Stream);  		p.Range <<= 8;  	}  }  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,Range_Normalize,The following statement contains a magic number: if (p.Range < kTopValue) {  	p.Code = (p.Code << 8) | p.Stream.Read (p.Stream);  	p.Range <<= 8;  	if (p.Range < kTopValue) {  		p.Code = (p.Code << 8) | p.Stream.Read (p.Stream);  		p.Range <<= 8;  	}  }  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,Range_Normalize,The following statement contains a magic number: if (p.Range < kTopValue) {  	p.Code = (p.Code << 8) | p.Stream.Read (p.Stream);  	p.Range <<= 8;  	if (p.Range < kTopValue) {  		p.Code = (p.Code << 8) | p.Stream.Read (p.Stream);  		p.Range <<= 8;  	}  }  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,Range_Normalize,The following statement contains a magic number: if (p.Range < kTopValue) {  	p.Code = (p.Code << 8) | p.Stream.Read (p.Stream);  	p.Range <<= 8;  	if (p.Range < kTopValue) {  		p.Code = (p.Code << 8) | p.Stream.Read (p.Stream);  		p.Range <<= 8;  	}  }  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,Range_Normalize,The following statement contains a magic number: p.Code = (p.Code << 8) | p.Stream.Read (p.Stream);  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,Range_Normalize,The following statement contains a magic number: p.Range <<= 8;  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,Range_Normalize,The following statement contains a magic number: if (p.Range < kTopValue) {  	p.Code = (p.Code << 8) | p.Stream.Read (p.Stream);  	p.Range <<= 8;  }  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,Range_Normalize,The following statement contains a magic number: if (p.Range < kTopValue) {  	p.Code = (p.Code << 8) | p.Stream.Read (p.Stream);  	p.Range <<= 8;  }  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,Range_Normalize,The following statement contains a magic number: p.Code = (p.Code << 8) | p.Stream.Read (p.Stream);  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,Range_Normalize,The following statement contains a magic number: p.Range <<= 8;  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,Ppmd7_DecodeSymbol,The following statement contains a magic number: if (p.MinContext->NumStats != 1) {  	CPpmd_State* s = Ppmd7_GetStats (p' p.MinContext);  	uint i;  	uint count' hiCnt;  	if ((count = rc.GetThreshold (rc' p.MinContext->SummFreq)) < (hiCnt = s->Freq)) {  		byte symbol;  		rc.Decode (rc' 0' s->Freq);  		p.FoundState = s;  		symbol = s->Symbol;  		Ppmd7_Update1_0 (p);  		return symbol;  	}  	p.PrevSuccess = 0;  	i = p.MinContext->NumStats - 1u;  	do {  		if ((hiCnt += (++s)->Freq) > count) {  			byte symbol;  			rc.Decode (rc' hiCnt - s->Freq' s->Freq);  			p.FoundState = s;  			symbol = s->Symbol;  			Ppmd7_Update1 (p);  			return symbol;  		}  	} while (--i != 0);  	if (count >= p.MinContext->SummFreq)  		return -2;  	p.HiBitsFlag = p.HB2Flag [p.FoundState->Symbol];  	rc.Decode (rc' hiCnt' p.MinContext->SummFreq - hiCnt);  	PPMD_SetAllBitsIn256Bytes (charMask);  	MASK_SET (charMask' s->Symbol' 0);  	i = p.MinContext->NumStats - 1u;  	do {  		MASK_SET (charMask' (--s)->Symbol' 0);  	} while (--i != 0);  } else {  	ushort prob;  	if (rc.DecodeBit (rc' prob) == 0) {  		byte symbol;  		PPMD_UPDATE_PROB_0 (ref prob);  		symbol = (p.FoundState = Ppmd7Context_OneState (p.MinContext))->Symbol;  		Ppmd7_UpdateBin (p);  		return symbol;  	}  	PPMD_UPDATE_PROB_1 (ref prob);  	p.InitEsc = PPMD7_kExpEscape [prob >> 10];  	PPMD_SetAllBitsIn256Bytes (charMask);  	MASK_SET (charMask' Ppmd7Context_OneState (p.MinContext)->Symbol' 0);  	p.PrevSuccess = 0;  }  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,Ppmd7_DecodeSymbol,The following statement contains a magic number: if (p.MinContext->NumStats != 1) {  	CPpmd_State* s = Ppmd7_GetStats (p' p.MinContext);  	uint i;  	uint count' hiCnt;  	if ((count = rc.GetThreshold (rc' p.MinContext->SummFreq)) < (hiCnt = s->Freq)) {  		byte symbol;  		rc.Decode (rc' 0' s->Freq);  		p.FoundState = s;  		symbol = s->Symbol;  		Ppmd7_Update1_0 (p);  		return symbol;  	}  	p.PrevSuccess = 0;  	i = p.MinContext->NumStats - 1u;  	do {  		if ((hiCnt += (++s)->Freq) > count) {  			byte symbol;  			rc.Decode (rc' hiCnt - s->Freq' s->Freq);  			p.FoundState = s;  			symbol = s->Symbol;  			Ppmd7_Update1 (p);  			return symbol;  		}  	} while (--i != 0);  	if (count >= p.MinContext->SummFreq)  		return -2;  	p.HiBitsFlag = p.HB2Flag [p.FoundState->Symbol];  	rc.Decode (rc' hiCnt' p.MinContext->SummFreq - hiCnt);  	PPMD_SetAllBitsIn256Bytes (charMask);  	MASK_SET (charMask' s->Symbol' 0);  	i = p.MinContext->NumStats - 1u;  	do {  		MASK_SET (charMask' (--s)->Symbol' 0);  	} while (--i != 0);  } else {  	ushort prob;  	if (rc.DecodeBit (rc' prob) == 0) {  		byte symbol;  		PPMD_UPDATE_PROB_0 (ref prob);  		symbol = (p.FoundState = Ppmd7Context_OneState (p.MinContext))->Symbol;  		Ppmd7_UpdateBin (p);  		return symbol;  	}  	PPMD_UPDATE_PROB_1 (ref prob);  	p.InitEsc = PPMD7_kExpEscape [prob >> 10];  	PPMD_SetAllBitsIn256Bytes (charMask);  	MASK_SET (charMask' Ppmd7Context_OneState (p.MinContext)->Symbol' 0);  	p.PrevSuccess = 0;  }  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,Ppmd7_DecodeSymbol,The following statement contains a magic number: if (count >= p.MinContext->SummFreq)  	return -2;  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,Ppmd7_DecodeSymbol,The following statement contains a magic number: return -2;  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,Ppmd7_DecodeSymbol,The following statement contains a magic number: p.InitEsc = PPMD7_kExpEscape [prob >> 10];  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,Ppmd7_DecodeSymbol,The following statement contains a magic number: for (; ;) {  	CPpmd_State** ps = stackalloc CPpmd_State*[256];  	CPpmd_State* s;  	uint freqSum' count' hiCnt;  	CPpmd_See* see;  	uint i' num' numMasked = p.MinContext->NumStats;  	do {  		p.OrderFall++;  		if (p.MinContext->Suffix.Value == 0)  			return -1;  		p.MinContext = Ppmd7_GetContext (p' p.MinContext->Suffix);  	} while (p.MinContext->NumStats == numMasked);  	hiCnt = 0;  	s = Ppmd7_GetStats (p' p.MinContext);  	i = 0;  	num = p.MinContext->NumStats - numMasked;  	do {  		uint k = (uint)(int)(MASK_GET (charMask' s->Symbol));  		hiCnt += (s->Freq & k);  		ps [i] = s++;  		i -= k;  	} while (i != num);  	see = Ppmd7_MakeEscFreq (p' numMasked' &freqSum);  	freqSum += hiCnt;  	count = rc.GetThreshold (rc' freqSum);  	if (count < hiCnt) {  		byte symbol;  		CPpmd_State** pps = ps;  		for (hiCnt = 0; (hiCnt += (*pps)->Freq) <= count; pps++)  			;  		s = *pps;  		rc.Decode (rc' hiCnt - s->Freq' s->Freq);  		Ppmd_See_Update (ref *see);  		p.FoundState = s;  		symbol = s->Symbol;  		Ppmd7_Update2 (p);  		return symbol;  	}  	if (count >= freqSum)  		return -2;  	rc.Decode (rc' hiCnt' freqSum - hiCnt);  	see->Summ = (ushort)(see->Summ + freqSum);  	do {  		MASK_SET (charMask' ps [--i]->Symbol' 0);  	} while (i != 0);  }  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,Ppmd7_DecodeSymbol,The following statement contains a magic number: for (; ;) {  	CPpmd_State** ps = stackalloc CPpmd_State*[256];  	CPpmd_State* s;  	uint freqSum' count' hiCnt;  	CPpmd_See* see;  	uint i' num' numMasked = p.MinContext->NumStats;  	do {  		p.OrderFall++;  		if (p.MinContext->Suffix.Value == 0)  			return -1;  		p.MinContext = Ppmd7_GetContext (p' p.MinContext->Suffix);  	} while (p.MinContext->NumStats == numMasked);  	hiCnt = 0;  	s = Ppmd7_GetStats (p' p.MinContext);  	i = 0;  	num = p.MinContext->NumStats - numMasked;  	do {  		uint k = (uint)(int)(MASK_GET (charMask' s->Symbol));  		hiCnt += (s->Freq & k);  		ps [i] = s++;  		i -= k;  	} while (i != num);  	see = Ppmd7_MakeEscFreq (p' numMasked' &freqSum);  	freqSum += hiCnt;  	count = rc.GetThreshold (rc' freqSum);  	if (count < hiCnt) {  		byte symbol;  		CPpmd_State** pps = ps;  		for (hiCnt = 0; (hiCnt += (*pps)->Freq) <= count; pps++)  			;  		s = *pps;  		rc.Decode (rc' hiCnt - s->Freq' s->Freq);  		Ppmd_See_Update (ref *see);  		p.FoundState = s;  		symbol = s->Symbol;  		Ppmd7_Update2 (p);  		return symbol;  	}  	if (count >= freqSum)  		return -2;  	rc.Decode (rc' hiCnt' freqSum - hiCnt);  	see->Summ = (ushort)(see->Summ + freqSum);  	do {  		MASK_SET (charMask' ps [--i]->Symbol' 0);  	} while (i != 0);  }  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,Ppmd7_DecodeSymbol,The following statement contains a magic number: if (count >= freqSum)  	return -2;  
Magic Number,ManagedLzma.SevenZip.Reader,PPMD,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,Ppmd7_DecodeSymbol,The following statement contains a magic number: return -2;  
Magic Number,ManagedLzma.SevenZip.Metadata,DecodedStreamIndex,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\ArchiveMetadata.cs,GetHashCode,The following statement contains a magic number: return (mSectionIndex << 16) + mStreamIndex;  
Magic Number,ManagedLzma.SevenZip.Metadata,DecoderInputMetadata,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\ArchiveMetadata.cs,GetHashCode,The following statement contains a magic number: return (mDecoderIndex << 16) + mStreamIndex;  
Magic Number,ManagedLzma.SevenZip.Metadata,CompressionMethod,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\CompressionMethod.cs,CheckInputOutputCount,The following statement contains a magic number: switch (~mSignature) {  case kCopy:  case kDeflate:  case kLZMA:  case kLZMA2:  case kAES:  case kBCJ:  case kPPMD:  	if (inputCount != 1)  		throw new InvalidDataException ();  	if (outputCount != 1)  		throw new InvalidDataException ();  	break;  case kBCJ2:  	if (inputCount != 4)  		throw new InvalidDataException ();  	if (outputCount != 1)  		throw new InvalidDataException ();  	break;  case kDelta:  case kBZip2:  	throw new NotImplementedException ();  default:  	throw new InvalidDataException ();  }  
Magic Number,ManagedLzma.SevenZip.Metadata,CompressionMethod,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\CompressionMethod.cs,CheckInputOutputCount,The following statement contains a magic number: if (inputCount != 4)  	throw new InvalidDataException ();  
Magic Number,ManagedLzma.SevenZip.Metadata,CompressionMethod,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\CompressionMethod.cs,GetInputCount,The following statement contains a magic number: switch (~mSignature) {  case kCopy:  case kDeflate:  case kLZMA:  case kLZMA2:  case kAES:  case kBCJ:  case kPPMD:  	return 1;  case kBCJ2:  	return 4;  case kDelta:  case kBZip2:  	throw new NotImplementedException ();  default:  	throw new InternalFailureException ();  }  
Magic Number,ManagedLzma.SevenZip.Metadata,CompressionMethod,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\CompressionMethod.cs,GetInputCount,The following statement contains a magic number: return 4;  
Magic Number,ManagedLzma.SevenZip.Writer,ArchiveWriter,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\ArchiveWriter.cs,PutInt32,The following statement contains a magic number: buffer [offset + 1] = (byte)(value >> 8);  
Magic Number,ManagedLzma.SevenZip.Writer,ArchiveWriter,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\ArchiveWriter.cs,PutInt32,The following statement contains a magic number: buffer [offset + 2] = (byte)(value >> 16);  
Magic Number,ManagedLzma.SevenZip.Writer,ArchiveWriter,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\ArchiveWriter.cs,PutInt32,The following statement contains a magic number: buffer [offset + 2] = (byte)(value >> 16);  
Magic Number,ManagedLzma.SevenZip.Writer,ArchiveWriter,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\ArchiveWriter.cs,PutInt32,The following statement contains a magic number: buffer [offset + 3] = (byte)(value >> 24);  
Magic Number,ManagedLzma.SevenZip.Writer,ArchiveWriter,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\ArchiveWriter.cs,PutInt32,The following statement contains a magic number: buffer [offset + 3] = (byte)(value >> 24);  
Magic Number,ManagedLzma.SevenZip.Writer,ArchiveWriter,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\ArchiveWriter.cs,PutInt64,The following statement contains a magic number: PutInt32 (buffer' offset + 4' (int)(value >> 32));  
Magic Number,ManagedLzma.SevenZip.Writer,ArchiveWriter,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\ArchiveWriter.cs,PutInt64,The following statement contains a magic number: PutInt32 (buffer' offset + 4' (int)(value >> 32));  
Magic Number,ManagedLzma.SevenZip.Writer,ArchiveWriter,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\ArchiveWriter.cs,WriteMetadata,The following statement contains a magic number: if (subStreamCount > 0) {  	WriteToken (ArchiveMetadataToken.Files);  	WriteNumber (metadataCount);  	#region Types  	{  		int emptyStreamCount = 0;  		for (int i = 0; i < metadataCount; i++)  			if (!metadata.HasStream (i))  				emptyStreamCount++;  		if (emptyStreamCount > 0) {  			WriteBitVectorWithHeader (ArchiveMetadataToken.EmptyStream' Enumerable.Range (0' metadataCount).Select (x => !metadata.HasStream (x))' metadataCount);  			if (Enumerable.Range (0' metadataCount).Where (x => !metadata.HasStream (x)).Any (x => !metadata.IsDirectory (x)))  				WriteBitVectorWithHeader (ArchiveMetadataToken.EmptyFile' Enumerable.Range (0' metadataCount).Where (x => !metadata.HasStream (x)).Select (x => !metadata.IsDirectory (x))' emptyStreamCount);  			if (Enumerable.Range (0' metadataCount).Where (x => !metadata.HasStream (x)).Any (x => metadata.IsDeleted (x)))  				WriteBitVectorWithHeader (ArchiveMetadataToken.Anti' Enumerable.Range (0' metadataCount).Where (x => !metadata.HasStream (x)).Select (x => metadata.IsDeleted (x))' emptyStreamCount);  		}  	#endregion  	#region Names  	#endregion  	// TODO: what does the start position mean? it doesn't seem to be what I thought it was.  	}  	{  		bool hasNames = false;  		int nameSize = 1;  		for (int i = 0; i < subStreamCount; i++) {  			var name = metadata.GetName (i);  			if (!string.IsNullOrEmpty (name)) {  				hasNames = true;  				nameSize += (name.Length + 1) * 2;  			} else {  				nameSize += 2;  			}  		}  		if (hasNames) {  			WritePadding (2 + GetNumberSize (nameSize)' 16);  			WriteToken (ArchiveMetadataToken.Name);  			WriteNumber (nameSize);  			WriteByte (0);  			System.Diagnostics.Debug.Assert ((mArchiveStream.Position & 15) == 0);  			for (int i = 0; i < subStreamCount; i++) {  				var name = metadata.GetName (i);  				foreach (char ch in name) {  					WriteByte ((byte)ch);  					WriteByte ((byte)(ch >> 8));  				}  				WriteByte (0);  				WriteByte (0);  			}  		}  	}  	WriteDateVector (Enumerable.Range (0' metadataCount).Select (x => metadata.GetCreationDate (x))' ArchiveMetadataToken.CTime);  	WriteDateVector (Enumerable.Range (0' metadataCount).Select (x => metadata.GetLastAccessDate (x))' ArchiveMetadataToken.ATime);  	WriteDateVector (Enumerable.Range (0' metadataCount).Select (x => metadata.GetLastWriteDate (x))' ArchiveMetadataToken.MTime);  	WriteUInt64Vector (Enumerable.Range (0' metadataCount).Select (x => default(ulong?))' ArchiveMetadataToken.StartPos);  	WriteUInt32Vector (Enumerable.Range (0' metadataCount).Select (x => {  		var attr = metadata.GetAttributes (x);  		return attr.HasValue ? (uint)attr.Value : default(uint?);  	})' ArchiveMetadataToken.WinAttributes);  	WriteToken (ArchiveMetadataToken.End);  }  
Magic Number,ManagedLzma.SevenZip.Writer,ArchiveWriter,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\ArchiveWriter.cs,WriteMetadata,The following statement contains a magic number: if (subStreamCount > 0) {  	WriteToken (ArchiveMetadataToken.Files);  	WriteNumber (metadataCount);  	#region Types  	{  		int emptyStreamCount = 0;  		for (int i = 0; i < metadataCount; i++)  			if (!metadata.HasStream (i))  				emptyStreamCount++;  		if (emptyStreamCount > 0) {  			WriteBitVectorWithHeader (ArchiveMetadataToken.EmptyStream' Enumerable.Range (0' metadataCount).Select (x => !metadata.HasStream (x))' metadataCount);  			if (Enumerable.Range (0' metadataCount).Where (x => !metadata.HasStream (x)).Any (x => !metadata.IsDirectory (x)))  				WriteBitVectorWithHeader (ArchiveMetadataToken.EmptyFile' Enumerable.Range (0' metadataCount).Where (x => !metadata.HasStream (x)).Select (x => !metadata.IsDirectory (x))' emptyStreamCount);  			if (Enumerable.Range (0' metadataCount).Where (x => !metadata.HasStream (x)).Any (x => metadata.IsDeleted (x)))  				WriteBitVectorWithHeader (ArchiveMetadataToken.Anti' Enumerable.Range (0' metadataCount).Where (x => !metadata.HasStream (x)).Select (x => metadata.IsDeleted (x))' emptyStreamCount);  		}  	#endregion  	#region Names  	#endregion  	// TODO: what does the start position mean? it doesn't seem to be what I thought it was.  	}  	{  		bool hasNames = false;  		int nameSize = 1;  		for (int i = 0; i < subStreamCount; i++) {  			var name = metadata.GetName (i);  			if (!string.IsNullOrEmpty (name)) {  				hasNames = true;  				nameSize += (name.Length + 1) * 2;  			} else {  				nameSize += 2;  			}  		}  		if (hasNames) {  			WritePadding (2 + GetNumberSize (nameSize)' 16);  			WriteToken (ArchiveMetadataToken.Name);  			WriteNumber (nameSize);  			WriteByte (0);  			System.Diagnostics.Debug.Assert ((mArchiveStream.Position & 15) == 0);  			for (int i = 0; i < subStreamCount; i++) {  				var name = metadata.GetName (i);  				foreach (char ch in name) {  					WriteByte ((byte)ch);  					WriteByte ((byte)(ch >> 8));  				}  				WriteByte (0);  				WriteByte (0);  			}  		}  	}  	WriteDateVector (Enumerable.Range (0' metadataCount).Select (x => metadata.GetCreationDate (x))' ArchiveMetadataToken.CTime);  	WriteDateVector (Enumerable.Range (0' metadataCount).Select (x => metadata.GetLastAccessDate (x))' ArchiveMetadataToken.ATime);  	WriteDateVector (Enumerable.Range (0' metadataCount).Select (x => metadata.GetLastWriteDate (x))' ArchiveMetadataToken.MTime);  	WriteUInt64Vector (Enumerable.Range (0' metadataCount).Select (x => default(ulong?))' ArchiveMetadataToken.StartPos);  	WriteUInt32Vector (Enumerable.Range (0' metadataCount).Select (x => {  		var attr = metadata.GetAttributes (x);  		return attr.HasValue ? (uint)attr.Value : default(uint?);  	})' ArchiveMetadataToken.WinAttributes);  	WriteToken (ArchiveMetadataToken.End);  }  
Magic Number,ManagedLzma.SevenZip.Writer,ArchiveWriter,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\ArchiveWriter.cs,WriteMetadata,The following statement contains a magic number: if (subStreamCount > 0) {  	WriteToken (ArchiveMetadataToken.Files);  	WriteNumber (metadataCount);  	#region Types  	{  		int emptyStreamCount = 0;  		for (int i = 0; i < metadataCount; i++)  			if (!metadata.HasStream (i))  				emptyStreamCount++;  		if (emptyStreamCount > 0) {  			WriteBitVectorWithHeader (ArchiveMetadataToken.EmptyStream' Enumerable.Range (0' metadataCount).Select (x => !metadata.HasStream (x))' metadataCount);  			if (Enumerable.Range (0' metadataCount).Where (x => !metadata.HasStream (x)).Any (x => !metadata.IsDirectory (x)))  				WriteBitVectorWithHeader (ArchiveMetadataToken.EmptyFile' Enumerable.Range (0' metadataCount).Where (x => !metadata.HasStream (x)).Select (x => !metadata.IsDirectory (x))' emptyStreamCount);  			if (Enumerable.Range (0' metadataCount).Where (x => !metadata.HasStream (x)).Any (x => metadata.IsDeleted (x)))  				WriteBitVectorWithHeader (ArchiveMetadataToken.Anti' Enumerable.Range (0' metadataCount).Where (x => !metadata.HasStream (x)).Select (x => metadata.IsDeleted (x))' emptyStreamCount);  		}  	#endregion  	#region Names  	#endregion  	// TODO: what does the start position mean? it doesn't seem to be what I thought it was.  	}  	{  		bool hasNames = false;  		int nameSize = 1;  		for (int i = 0; i < subStreamCount; i++) {  			var name = metadata.GetName (i);  			if (!string.IsNullOrEmpty (name)) {  				hasNames = true;  				nameSize += (name.Length + 1) * 2;  			} else {  				nameSize += 2;  			}  		}  		if (hasNames) {  			WritePadding (2 + GetNumberSize (nameSize)' 16);  			WriteToken (ArchiveMetadataToken.Name);  			WriteNumber (nameSize);  			WriteByte (0);  			System.Diagnostics.Debug.Assert ((mArchiveStream.Position & 15) == 0);  			for (int i = 0; i < subStreamCount; i++) {  				var name = metadata.GetName (i);  				foreach (char ch in name) {  					WriteByte ((byte)ch);  					WriteByte ((byte)(ch >> 8));  				}  				WriteByte (0);  				WriteByte (0);  			}  		}  	}  	WriteDateVector (Enumerable.Range (0' metadataCount).Select (x => metadata.GetCreationDate (x))' ArchiveMetadataToken.CTime);  	WriteDateVector (Enumerable.Range (0' metadataCount).Select (x => metadata.GetLastAccessDate (x))' ArchiveMetadataToken.ATime);  	WriteDateVector (Enumerable.Range (0' metadataCount).Select (x => metadata.GetLastWriteDate (x))' ArchiveMetadataToken.MTime);  	WriteUInt64Vector (Enumerable.Range (0' metadataCount).Select (x => default(ulong?))' ArchiveMetadataToken.StartPos);  	WriteUInt32Vector (Enumerable.Range (0' metadataCount).Select (x => {  		var attr = metadata.GetAttributes (x);  		return attr.HasValue ? (uint)attr.Value : default(uint?);  	})' ArchiveMetadataToken.WinAttributes);  	WriteToken (ArchiveMetadataToken.End);  }  
Magic Number,ManagedLzma.SevenZip.Writer,ArchiveWriter,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\ArchiveWriter.cs,WriteMetadata,The following statement contains a magic number: if (subStreamCount > 0) {  	WriteToken (ArchiveMetadataToken.Files);  	WriteNumber (metadataCount);  	#region Types  	{  		int emptyStreamCount = 0;  		for (int i = 0; i < metadataCount; i++)  			if (!metadata.HasStream (i))  				emptyStreamCount++;  		if (emptyStreamCount > 0) {  			WriteBitVectorWithHeader (ArchiveMetadataToken.EmptyStream' Enumerable.Range (0' metadataCount).Select (x => !metadata.HasStream (x))' metadataCount);  			if (Enumerable.Range (0' metadataCount).Where (x => !metadata.HasStream (x)).Any (x => !metadata.IsDirectory (x)))  				WriteBitVectorWithHeader (ArchiveMetadataToken.EmptyFile' Enumerable.Range (0' metadataCount).Where (x => !metadata.HasStream (x)).Select (x => !metadata.IsDirectory (x))' emptyStreamCount);  			if (Enumerable.Range (0' metadataCount).Where (x => !metadata.HasStream (x)).Any (x => metadata.IsDeleted (x)))  				WriteBitVectorWithHeader (ArchiveMetadataToken.Anti' Enumerable.Range (0' metadataCount).Where (x => !metadata.HasStream (x)).Select (x => metadata.IsDeleted (x))' emptyStreamCount);  		}  	#endregion  	#region Names  	#endregion  	// TODO: what does the start position mean? it doesn't seem to be what I thought it was.  	}  	{  		bool hasNames = false;  		int nameSize = 1;  		for (int i = 0; i < subStreamCount; i++) {  			var name = metadata.GetName (i);  			if (!string.IsNullOrEmpty (name)) {  				hasNames = true;  				nameSize += (name.Length + 1) * 2;  			} else {  				nameSize += 2;  			}  		}  		if (hasNames) {  			WritePadding (2 + GetNumberSize (nameSize)' 16);  			WriteToken (ArchiveMetadataToken.Name);  			WriteNumber (nameSize);  			WriteByte (0);  			System.Diagnostics.Debug.Assert ((mArchiveStream.Position & 15) == 0);  			for (int i = 0; i < subStreamCount; i++) {  				var name = metadata.GetName (i);  				foreach (char ch in name) {  					WriteByte ((byte)ch);  					WriteByte ((byte)(ch >> 8));  				}  				WriteByte (0);  				WriteByte (0);  			}  		}  	}  	WriteDateVector (Enumerable.Range (0' metadataCount).Select (x => metadata.GetCreationDate (x))' ArchiveMetadataToken.CTime);  	WriteDateVector (Enumerable.Range (0' metadataCount).Select (x => metadata.GetLastAccessDate (x))' ArchiveMetadataToken.ATime);  	WriteDateVector (Enumerable.Range (0' metadataCount).Select (x => metadata.GetLastWriteDate (x))' ArchiveMetadataToken.MTime);  	WriteUInt64Vector (Enumerable.Range (0' metadataCount).Select (x => default(ulong?))' ArchiveMetadataToken.StartPos);  	WriteUInt32Vector (Enumerable.Range (0' metadataCount).Select (x => {  		var attr = metadata.GetAttributes (x);  		return attr.HasValue ? (uint)attr.Value : default(uint?);  	})' ArchiveMetadataToken.WinAttributes);  	WriteToken (ArchiveMetadataToken.End);  }  
Magic Number,ManagedLzma.SevenZip.Writer,ArchiveWriter,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\ArchiveWriter.cs,WriteMetadata,The following statement contains a magic number: if (subStreamCount > 0) {  	WriteToken (ArchiveMetadataToken.Files);  	WriteNumber (metadataCount);  	#region Types  	{  		int emptyStreamCount = 0;  		for (int i = 0; i < metadataCount; i++)  			if (!metadata.HasStream (i))  				emptyStreamCount++;  		if (emptyStreamCount > 0) {  			WriteBitVectorWithHeader (ArchiveMetadataToken.EmptyStream' Enumerable.Range (0' metadataCount).Select (x => !metadata.HasStream (x))' metadataCount);  			if (Enumerable.Range (0' metadataCount).Where (x => !metadata.HasStream (x)).Any (x => !metadata.IsDirectory (x)))  				WriteBitVectorWithHeader (ArchiveMetadataToken.EmptyFile' Enumerable.Range (0' metadataCount).Where (x => !metadata.HasStream (x)).Select (x => !metadata.IsDirectory (x))' emptyStreamCount);  			if (Enumerable.Range (0' metadataCount).Where (x => !metadata.HasStream (x)).Any (x => metadata.IsDeleted (x)))  				WriteBitVectorWithHeader (ArchiveMetadataToken.Anti' Enumerable.Range (0' metadataCount).Where (x => !metadata.HasStream (x)).Select (x => metadata.IsDeleted (x))' emptyStreamCount);  		}  	#endregion  	#region Names  	#endregion  	// TODO: what does the start position mean? it doesn't seem to be what I thought it was.  	}  	{  		bool hasNames = false;  		int nameSize = 1;  		for (int i = 0; i < subStreamCount; i++) {  			var name = metadata.GetName (i);  			if (!string.IsNullOrEmpty (name)) {  				hasNames = true;  				nameSize += (name.Length + 1) * 2;  			} else {  				nameSize += 2;  			}  		}  		if (hasNames) {  			WritePadding (2 + GetNumberSize (nameSize)' 16);  			WriteToken (ArchiveMetadataToken.Name);  			WriteNumber (nameSize);  			WriteByte (0);  			System.Diagnostics.Debug.Assert ((mArchiveStream.Position & 15) == 0);  			for (int i = 0; i < subStreamCount; i++) {  				var name = metadata.GetName (i);  				foreach (char ch in name) {  					WriteByte ((byte)ch);  					WriteByte ((byte)(ch >> 8));  				}  				WriteByte (0);  				WriteByte (0);  			}  		}  	}  	WriteDateVector (Enumerable.Range (0' metadataCount).Select (x => metadata.GetCreationDate (x))' ArchiveMetadataToken.CTime);  	WriteDateVector (Enumerable.Range (0' metadataCount).Select (x => metadata.GetLastAccessDate (x))' ArchiveMetadataToken.ATime);  	WriteDateVector (Enumerable.Range (0' metadataCount).Select (x => metadata.GetLastWriteDate (x))' ArchiveMetadataToken.MTime);  	WriteUInt64Vector (Enumerable.Range (0' metadataCount).Select (x => default(ulong?))' ArchiveMetadataToken.StartPos);  	WriteUInt32Vector (Enumerable.Range (0' metadataCount).Select (x => {  		var attr = metadata.GetAttributes (x);  		return attr.HasValue ? (uint)attr.Value : default(uint?);  	})' ArchiveMetadataToken.WinAttributes);  	WriteToken (ArchiveMetadataToken.End);  }  
Magic Number,ManagedLzma.SevenZip.Writer,ArchiveWriter,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\ArchiveWriter.cs,WriteMetadata,The following statement contains a magic number: if (subStreamCount > 0) {  	WriteToken (ArchiveMetadataToken.Files);  	WriteNumber (metadataCount);  	#region Types  	{  		int emptyStreamCount = 0;  		for (int i = 0; i < metadataCount; i++)  			if (!metadata.HasStream (i))  				emptyStreamCount++;  		if (emptyStreamCount > 0) {  			WriteBitVectorWithHeader (ArchiveMetadataToken.EmptyStream' Enumerable.Range (0' metadataCount).Select (x => !metadata.HasStream (x))' metadataCount);  			if (Enumerable.Range (0' metadataCount).Where (x => !metadata.HasStream (x)).Any (x => !metadata.IsDirectory (x)))  				WriteBitVectorWithHeader (ArchiveMetadataToken.EmptyFile' Enumerable.Range (0' metadataCount).Where (x => !metadata.HasStream (x)).Select (x => !metadata.IsDirectory (x))' emptyStreamCount);  			if (Enumerable.Range (0' metadataCount).Where (x => !metadata.HasStream (x)).Any (x => metadata.IsDeleted (x)))  				WriteBitVectorWithHeader (ArchiveMetadataToken.Anti' Enumerable.Range (0' metadataCount).Where (x => !metadata.HasStream (x)).Select (x => metadata.IsDeleted (x))' emptyStreamCount);  		}  	#endregion  	#region Names  	#endregion  	// TODO: what does the start position mean? it doesn't seem to be what I thought it was.  	}  	{  		bool hasNames = false;  		int nameSize = 1;  		for (int i = 0; i < subStreamCount; i++) {  			var name = metadata.GetName (i);  			if (!string.IsNullOrEmpty (name)) {  				hasNames = true;  				nameSize += (name.Length + 1) * 2;  			} else {  				nameSize += 2;  			}  		}  		if (hasNames) {  			WritePadding (2 + GetNumberSize (nameSize)' 16);  			WriteToken (ArchiveMetadataToken.Name);  			WriteNumber (nameSize);  			WriteByte (0);  			System.Diagnostics.Debug.Assert ((mArchiveStream.Position & 15) == 0);  			for (int i = 0; i < subStreamCount; i++) {  				var name = metadata.GetName (i);  				foreach (char ch in name) {  					WriteByte ((byte)ch);  					WriteByte ((byte)(ch >> 8));  				}  				WriteByte (0);  				WriteByte (0);  			}  		}  	}  	WriteDateVector (Enumerable.Range (0' metadataCount).Select (x => metadata.GetCreationDate (x))' ArchiveMetadataToken.CTime);  	WriteDateVector (Enumerable.Range (0' metadataCount).Select (x => metadata.GetLastAccessDate (x))' ArchiveMetadataToken.ATime);  	WriteDateVector (Enumerable.Range (0' metadataCount).Select (x => metadata.GetLastWriteDate (x))' ArchiveMetadataToken.MTime);  	WriteUInt64Vector (Enumerable.Range (0' metadataCount).Select (x => default(ulong?))' ArchiveMetadataToken.StartPos);  	WriteUInt32Vector (Enumerable.Range (0' metadataCount).Select (x => {  		var attr = metadata.GetAttributes (x);  		return attr.HasValue ? (uint)attr.Value : default(uint?);  	})' ArchiveMetadataToken.WinAttributes);  	WriteToken (ArchiveMetadataToken.End);  }  
Magic Number,ManagedLzma.SevenZip.Writer,ArchiveWriter,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\ArchiveWriter.cs,WriteMetadata,The following statement contains a magic number: for (int i = 0; i < subStreamCount; i++) {  	var name = metadata.GetName (i);  	if (!string.IsNullOrEmpty (name)) {  		hasNames = true;  		nameSize += (name.Length + 1) * 2;  	} else {  		nameSize += 2;  	}  }  
Magic Number,ManagedLzma.SevenZip.Writer,ArchiveWriter,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\ArchiveWriter.cs,WriteMetadata,The following statement contains a magic number: for (int i = 0; i < subStreamCount; i++) {  	var name = metadata.GetName (i);  	if (!string.IsNullOrEmpty (name)) {  		hasNames = true;  		nameSize += (name.Length + 1) * 2;  	} else {  		nameSize += 2;  	}  }  
Magic Number,ManagedLzma.SevenZip.Writer,ArchiveWriter,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\ArchiveWriter.cs,WriteMetadata,The following statement contains a magic number: if (!string.IsNullOrEmpty (name)) {  	hasNames = true;  	nameSize += (name.Length + 1) * 2;  } else {  	nameSize += 2;  }  
Magic Number,ManagedLzma.SevenZip.Writer,ArchiveWriter,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\ArchiveWriter.cs,WriteMetadata,The following statement contains a magic number: if (!string.IsNullOrEmpty (name)) {  	hasNames = true;  	nameSize += (name.Length + 1) * 2;  } else {  	nameSize += 2;  }  
Magic Number,ManagedLzma.SevenZip.Writer,ArchiveWriter,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\ArchiveWriter.cs,WriteMetadata,The following statement contains a magic number: nameSize += (name.Length + 1) * 2;  
Magic Number,ManagedLzma.SevenZip.Writer,ArchiveWriter,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\ArchiveWriter.cs,WriteMetadata,The following statement contains a magic number: nameSize += 2;  
Magic Number,ManagedLzma.SevenZip.Writer,ArchiveWriter,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\ArchiveWriter.cs,WriteMetadata,The following statement contains a magic number: if (hasNames) {  	WritePadding (2 + GetNumberSize (nameSize)' 16);  	WriteToken (ArchiveMetadataToken.Name);  	WriteNumber (nameSize);  	WriteByte (0);  	System.Diagnostics.Debug.Assert ((mArchiveStream.Position & 15) == 0);  	for (int i = 0; i < subStreamCount; i++) {  		var name = metadata.GetName (i);  		foreach (char ch in name) {  			WriteByte ((byte)ch);  			WriteByte ((byte)(ch >> 8));  		}  		WriteByte (0);  		WriteByte (0);  	}  }  
Magic Number,ManagedLzma.SevenZip.Writer,ArchiveWriter,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\ArchiveWriter.cs,WriteMetadata,The following statement contains a magic number: if (hasNames) {  	WritePadding (2 + GetNumberSize (nameSize)' 16);  	WriteToken (ArchiveMetadataToken.Name);  	WriteNumber (nameSize);  	WriteByte (0);  	System.Diagnostics.Debug.Assert ((mArchiveStream.Position & 15) == 0);  	for (int i = 0; i < subStreamCount; i++) {  		var name = metadata.GetName (i);  		foreach (char ch in name) {  			WriteByte ((byte)ch);  			WriteByte ((byte)(ch >> 8));  		}  		WriteByte (0);  		WriteByte (0);  	}  }  
Magic Number,ManagedLzma.SevenZip.Writer,ArchiveWriter,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\ArchiveWriter.cs,WriteMetadata,The following statement contains a magic number: if (hasNames) {  	WritePadding (2 + GetNumberSize (nameSize)' 16);  	WriteToken (ArchiveMetadataToken.Name);  	WriteNumber (nameSize);  	WriteByte (0);  	System.Diagnostics.Debug.Assert ((mArchiveStream.Position & 15) == 0);  	for (int i = 0; i < subStreamCount; i++) {  		var name = metadata.GetName (i);  		foreach (char ch in name) {  			WriteByte ((byte)ch);  			WriteByte ((byte)(ch >> 8));  		}  		WriteByte (0);  		WriteByte (0);  	}  }  
Magic Number,ManagedLzma.SevenZip.Writer,ArchiveWriter,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\ArchiveWriter.cs,WriteMetadata,The following statement contains a magic number: if (hasNames) {  	WritePadding (2 + GetNumberSize (nameSize)' 16);  	WriteToken (ArchiveMetadataToken.Name);  	WriteNumber (nameSize);  	WriteByte (0);  	System.Diagnostics.Debug.Assert ((mArchiveStream.Position & 15) == 0);  	for (int i = 0; i < subStreamCount; i++) {  		var name = metadata.GetName (i);  		foreach (char ch in name) {  			WriteByte ((byte)ch);  			WriteByte ((byte)(ch >> 8));  		}  		WriteByte (0);  		WriteByte (0);  	}  }  
Magic Number,ManagedLzma.SevenZip.Writer,ArchiveWriter,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\ArchiveWriter.cs,WriteMetadata,The following statement contains a magic number: WritePadding (2 + GetNumberSize (nameSize)' 16);  
Magic Number,ManagedLzma.SevenZip.Writer,ArchiveWriter,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\ArchiveWriter.cs,WriteMetadata,The following statement contains a magic number: WritePadding (2 + GetNumberSize (nameSize)' 16);  
Magic Number,ManagedLzma.SevenZip.Writer,ArchiveWriter,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\ArchiveWriter.cs,WriteMetadata,The following statement contains a magic number: System.Diagnostics.Debug.Assert ((mArchiveStream.Position & 15) == 0);  
Magic Number,ManagedLzma.SevenZip.Writer,ArchiveWriter,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\ArchiveWriter.cs,WriteMetadata,The following statement contains a magic number: for (int i = 0; i < subStreamCount; i++) {  	var name = metadata.GetName (i);  	foreach (char ch in name) {  		WriteByte ((byte)ch);  		WriteByte ((byte)(ch >> 8));  	}  	WriteByte (0);  	WriteByte (0);  }  
Magic Number,ManagedLzma.SevenZip.Writer,ArchiveWriter,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\ArchiveWriter.cs,WriteMetadata,The following statement contains a magic number: foreach (char ch in name) {  	WriteByte ((byte)ch);  	WriteByte ((byte)(ch >> 8));  }  
Magic Number,ManagedLzma.SevenZip.Writer,ArchiveWriter,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\ArchiveWriter.cs,WriteMetadata,The following statement contains a magic number: WriteByte ((byte)(ch >> 8));  
Magic Number,ManagedLzma.SevenZip.Writer,ArchiveWriter,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\ArchiveWriter.cs,WriteBitVectorWithHeader,The following statement contains a magic number: WriteNumber ((count + 7) / 8);  
Magic Number,ManagedLzma.SevenZip.Writer,ArchiveWriter,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\ArchiveWriter.cs,WriteBitVectorWithHeader,The following statement contains a magic number: WriteNumber ((count + 7) / 8);  
Magic Number,ManagedLzma.SevenZip.Writer,ArchiveWriter,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\ArchiveWriter.cs,WriteAlignedHeaderWithBitVector,The following statement contains a magic number: WritePadding (3 + vectorSize + GetNumberSize (contentSize)' itemSize);  
Magic Number,ManagedLzma.SevenZip.Writer,ArchiveWriter,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\ArchiveWriter.cs,WriteUInt64Vector,The following statement contains a magic number: if (defined > 0) {  	WriteAlignedHeaderWithBitVector (vector.Select (x => x.HasValue)' count' defined' token' 8);  	System.Diagnostics.Debug.Assert ((mArchiveStream.Position & 7) == 0);  	foreach (var slot in vector)  		if (slot.HasValue)  			WriteUInt64 (slot.Value);  }  
Magic Number,ManagedLzma.SevenZip.Writer,ArchiveWriter,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\ArchiveWriter.cs,WriteUInt64Vector,The following statement contains a magic number: if (defined > 0) {  	WriteAlignedHeaderWithBitVector (vector.Select (x => x.HasValue)' count' defined' token' 8);  	System.Diagnostics.Debug.Assert ((mArchiveStream.Position & 7) == 0);  	foreach (var slot in vector)  		if (slot.HasValue)  			WriteUInt64 (slot.Value);  }  
Magic Number,ManagedLzma.SevenZip.Writer,ArchiveWriter,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\ArchiveWriter.cs,WriteUInt64Vector,The following statement contains a magic number: WriteAlignedHeaderWithBitVector (vector.Select (x => x.HasValue)' count' defined' token' 8);  
Magic Number,ManagedLzma.SevenZip.Writer,ArchiveWriter,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\ArchiveWriter.cs,WriteUInt64Vector,The following statement contains a magic number: System.Diagnostics.Debug.Assert ((mArchiveStream.Position & 7) == 0);  
Magic Number,ManagedLzma.SevenZip.Writer,ArchiveWriter,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\ArchiveWriter.cs,WriteUInt32Vector,The following statement contains a magic number: if (defined > 0) {  	WriteAlignedHeaderWithBitVector (vector.Select (x => x.HasValue)' count' defined' token' 4);  	System.Diagnostics.Debug.Assert ((mArchiveStream.Position & 3) == 0);  	foreach (var slot in vector)  		if (slot.HasValue)  			WriteInt32 ((int)slot.Value);  }  
Magic Number,ManagedLzma.SevenZip.Writer,ArchiveWriter,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\ArchiveWriter.cs,WriteUInt32Vector,The following statement contains a magic number: if (defined > 0) {  	WriteAlignedHeaderWithBitVector (vector.Select (x => x.HasValue)' count' defined' token' 4);  	System.Diagnostics.Debug.Assert ((mArchiveStream.Position & 3) == 0);  	foreach (var slot in vector)  		if (slot.HasValue)  			WriteInt32 ((int)slot.Value);  }  
Magic Number,ManagedLzma.SevenZip.Writer,ArchiveWriter,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\ArchiveWriter.cs,WriteUInt32Vector,The following statement contains a magic number: WriteAlignedHeaderWithBitVector (vector.Select (x => x.HasValue)' count' defined' token' 4);  
Magic Number,ManagedLzma.SevenZip.Writer,ArchiveWriter,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\ArchiveWriter.cs,WriteUInt32Vector,The following statement contains a magic number: System.Diagnostics.Debug.Assert ((mArchiveStream.Position & 3) == 0);  
Magic Number,ManagedLzma.SevenZip.Writer,ArchiveWriter,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\ArchiveWriter.cs,WriteDecoderSection,The following statement contains a magic number: for (int i = 0; i < definition.Decoders.Length; i++) {  	var decoder = definition.Decoders [i];  	var id = decoder.DecoderType.Encode ();  	var multiStream = decoder.InputStreams.Length != 1 || decoder.OutputStreams.Length != 1;  	var settings = decoder.Settings;  	var hasSettings = !settings.IsDefaultOrEmpty;  	System.Diagnostics.Debug.Assert (!id.IsDefaultOrEmpty && id.Length <= 15);  	var flags = (byte)id.Length;  	if (multiStream)  		flags |= 0x10;  	if (hasSettings)  		flags |= 0x20;  	WriteByte (flags);  	foreach (var bt in id)  		WriteByte (bt);  	if (multiStream) {  		WriteNumber (decoder.InputStreams.Length);  		WriteNumber (decoder.OutputStreams.Length);  	}  	if (hasSettings) {  		WriteNumber (settings.Length);  		foreach (var bt in settings)  			WriteByte (bt);  	}  }  
Magic Number,ManagedLzma.SevenZip.Writer,ArchiveWriter,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\ArchiveWriter.cs,WriteDecoderSection,The following statement contains a magic number: System.Diagnostics.Debug.Assert (!id.IsDefaultOrEmpty && id.Length <= 15);  
Magic Number,ManagedLzma.SevenZip.Writer,ArchiveWriter,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\ArchiveWriter.cs,WriteToken,The following statement contains a magic number: System.Diagnostics.Debug.Assert (0 <= (int)token && (int)token <= 25);  
Magic Number,ManagedLzma.SevenZip.Writer,ArchiveWriter,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\ArchiveWriter.cs,WritePadding,The following statement contains a magic number: if (offset > 0) {  	var padding = alignment - offset;  	if (padding < 2)  		padding += alignment;  	padding -= 2;  	WriteToken (ArchiveMetadataToken.Padding);  	WriteByte ((byte)padding);  	for (int i = 0; i < padding; i++)  		WriteByte (0);  }  
Magic Number,ManagedLzma.SevenZip.Writer,ArchiveWriter,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\ArchiveWriter.cs,WritePadding,The following statement contains a magic number: if (offset > 0) {  	var padding = alignment - offset;  	if (padding < 2)  		padding += alignment;  	padding -= 2;  	WriteToken (ArchiveMetadataToken.Padding);  	WriteByte ((byte)padding);  	for (int i = 0; i < padding; i++)  		WriteByte (0);  }  
Magic Number,ManagedLzma.SevenZip.Writer,ArchiveWriter,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\ArchiveWriter.cs,WritePadding,The following statement contains a magic number: if (padding < 2)  	padding += alignment;  
Magic Number,ManagedLzma.SevenZip.Writer,ArchiveWriter,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\ArchiveWriter.cs,WritePadding,The following statement contains a magic number: padding -= 2;  
Magic Number,ManagedLzma.SevenZip.Writer,ArchiveWriter,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\ArchiveWriter.cs,WriteInt32,The following statement contains a magic number: WriteByte ((byte)(value >> 8));  
Magic Number,ManagedLzma.SevenZip.Writer,ArchiveWriter,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\ArchiveWriter.cs,WriteInt32,The following statement contains a magic number: WriteByte ((byte)(value >> 16));  
Magic Number,ManagedLzma.SevenZip.Writer,ArchiveWriter,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\ArchiveWriter.cs,WriteInt32,The following statement contains a magic number: WriteByte ((byte)(value >> 24));  
Magic Number,ManagedLzma.SevenZip.Writer,ArchiveWriter,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\ArchiveWriter.cs,WriteUInt64,The following statement contains a magic number: for (int i = 0; i < 8; i++) {  	WriteByte ((byte)value);  	value >>= 8;  }  
Magic Number,ManagedLzma.SevenZip.Writer,ArchiveWriter,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\ArchiveWriter.cs,WriteUInt64,The following statement contains a magic number: for (int i = 0; i < 8; i++) {  	WriteByte ((byte)value);  	value >>= 8;  }  
Magic Number,ManagedLzma.SevenZip.Writer,ArchiveWriter,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\ArchiveWriter.cs,WriteUInt64,The following statement contains a magic number: value >>= 8;  
Magic Number,ManagedLzma.SevenZip.Writer,ArchiveWriter,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\ArchiveWriter.cs,WriteNumber,The following statement contains a magic number: while (count < 8) {  	if (value < (1L << (7 * (count + 1)))) {  		header |= (byte)(value >> (8 * count));  		break;  	}  	header |= mask;  	mask >>= 1;  	count += 1;  }  
Magic Number,ManagedLzma.SevenZip.Writer,ArchiveWriter,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\ArchiveWriter.cs,WriteNumber,The following statement contains a magic number: while (count < 8) {  	if (value < (1L << (7 * (count + 1)))) {  		header |= (byte)(value >> (8 * count));  		break;  	}  	header |= mask;  	mask >>= 1;  	count += 1;  }  
Magic Number,ManagedLzma.SevenZip.Writer,ArchiveWriter,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\ArchiveWriter.cs,WriteNumber,The following statement contains a magic number: while (count < 8) {  	if (value < (1L << (7 * (count + 1)))) {  		header |= (byte)(value >> (8 * count));  		break;  	}  	header |= mask;  	mask >>= 1;  	count += 1;  }  
Magic Number,ManagedLzma.SevenZip.Writer,ArchiveWriter,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\ArchiveWriter.cs,WriteNumber,The following statement contains a magic number: if (value < (1L << (7 * (count + 1)))) {  	header |= (byte)(value >> (8 * count));  	break;  }  
Magic Number,ManagedLzma.SevenZip.Writer,ArchiveWriter,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\ArchiveWriter.cs,WriteNumber,The following statement contains a magic number: if (value < (1L << (7 * (count + 1)))) {  	header |= (byte)(value >> (8 * count));  	break;  }  
Magic Number,ManagedLzma.SevenZip.Writer,ArchiveWriter,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\ArchiveWriter.cs,WriteNumber,The following statement contains a magic number: header |= (byte)(value >> (8 * count));  
Magic Number,ManagedLzma.SevenZip.Writer,ArchiveWriter,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\ArchiveWriter.cs,WriteNumber,The following statement contains a magic number: while (count > 0) {  	WriteByte ((byte)value);  	value >>= 8;  	count -= 1;  }  
Magic Number,ManagedLzma.SevenZip.Writer,ArchiveWriter,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\ArchiveWriter.cs,WriteNumber,The following statement contains a magic number: value >>= 8;  
Magic Number,ManagedLzma.SevenZip.Writer,ArchiveWriter,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\ArchiveWriter.cs,GetNumberSize,The following statement contains a magic number: while (length < 9 && value >= (1L << (length * 7)))  	length++;  
Magic Number,ManagedLzma.SevenZip.Writer,ArchiveWriter,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\ArchiveWriter.cs,GetNumberSize,The following statement contains a magic number: while (length < 9 && value >= (1L << (length * 7)))  	length++;  
Magic Number,ManagedLzma.SevenZip.Writer,ArchiveWriter,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\ArchiveWriter.cs,PrepareHeader,The following statement contains a magic number: buffer [6] = kMajorVersion;  
Magic Number,ManagedLzma.SevenZip.Writer,ArchiveWriter,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\ArchiveWriter.cs,PrepareHeader,The following statement contains a magic number: buffer [7] = kMinorVersion;  
Magic Number,ManagedLzma.SevenZip.Writer,ArchiveWriter,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\ArchiveWriter.cs,PrepareHeader,The following statement contains a magic number: PutInt32 (buffer' 8' (int)crc);  
Magic Number,ManagedLzma.SevenZip.Writer,ArchiveWriter,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\ArchiveWriter.cs,PrepareHeader,The following statement contains a magic number: PutInt64 (buffer' 12' metadataOffset);  
Magic Number,ManagedLzma.SevenZip.Writer,ArchiveWriter,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\ArchiveWriter.cs,PrepareHeader,The following statement contains a magic number: PutInt64 (buffer' 20' mMetadataLength);  
Magic Number,ManagedLzma.SevenZip.Writer,ArchiveWriter,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\ArchiveWriter.cs,PrepareHeader,The following statement contains a magic number: PutInt32 (buffer' 28' mMetadataChecksum.Value);  
Magic Number,ManagedLzma.SevenZip.Writer,AesEncoderSeed,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Encoders\AesEncoder.cs,AesEncoderSeed,The following statement contains a magic number: mSeed16 = new byte[16];  
Magic Number,ManagedLzma.SevenZip.Writer,AesEncoderSettings,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Encoders\AesEncoder.cs,AesEncoderSettings,The following statement contains a magic number: mSlowdown = 19;  
Magic Number,ManagedLzma.SevenZip.Writer,AesEncoderSettings,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Encoders\AesEncoder.cs,SerializeSettings,The following statement contains a magic number: buffer.Add ((byte)((encodedSaltSize << 4) | encodedSeedSize));  
Magic Number,ManagedLzma.SevenZip.Writer,Lzma2EncoderSettings,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Encoders\Lzma2Encoder.cs,LZMA2_DIC_SIZE_FROM_PROP,The following statement contains a magic number: return (uint)(2 | (p & 1)) << (p / 2 + 11);  
Magic Number,ManagedLzma.SevenZip.Writer,Lzma2EncoderSettings,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Encoders\Lzma2Encoder.cs,LZMA2_DIC_SIZE_FROM_PROP,The following statement contains a magic number: return (uint)(2 | (p & 1)) << (p / 2 + 11);  
Magic Number,ManagedLzma.SevenZip.Writer,Lzma2EncoderSettings,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Encoders\Lzma2Encoder.cs,LZMA2_DIC_SIZE_FROM_PROP,The following statement contains a magic number: return (uint)(2 | (p & 1)) << (p / 2 + 11);  
Magic Number,ManagedLzma.SevenZip.Writer,Lzma2EncoderSettings,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Encoders\Lzma2Encoder.cs,Lzma2Enc_WriteProperties,The following statement contains a magic number: while (i < 40 && dicSize > LZMA2_DIC_SIZE_FROM_PROP (i))  	i++;  
Magic Number,ManagedLzma.SevenZip.Writer,EncoderInput,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Encoders\Runtime.cs,Dispose,The following statement contains a magic number: if (mFinalized != 3)  	System.Diagnostics.Debugger.Break ();  
Magic Number,ManagedLzma.SevenZip.Writer,EncoderInput,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Encoders\Runtime.cs,GetFinalChecksum,The following statement contains a magic number: mFinalized |= 2;  
Magic Number,ManagedLzma,CRC,D:\newReposJune17\weltkante_managed-lzma\shared\Utilities\CRC.cs,CRC,The following statement contains a magic number: for (uint i = 0; i < 256; i++) {  	uint r = i;  	for (int j = 0; j < 8; j++)  		r = (r >> 1) ^ (kCrcPoly & ~((r & 1) - 1));  	kTable [i] = r;  }  
Magic Number,ManagedLzma,CRC,D:\newReposJune17\weltkante_managed-lzma\shared\Utilities\CRC.cs,CRC,The following statement contains a magic number: for (uint i = 0; i < 256; i++) {  	uint r = i;  	for (int j = 0; j < 8; j++)  		r = (r >> 1) ^ (kCrcPoly & ~((r & 1) - 1));  	kTable [i] = r;  }  
Magic Number,ManagedLzma,CRC,D:\newReposJune17\weltkante_managed-lzma\shared\Utilities\CRC.cs,CRC,The following statement contains a magic number: for (int j = 0; j < 8; j++)  	r = (r >> 1) ^ (kCrcPoly & ~((r & 1) - 1));  
Magic Number,ManagedLzma,CRC,D:\newReposJune17\weltkante_managed-lzma\shared\Utilities\CRC.cs,CRC,The following statement contains a magic number: for (uint i = 256; i < kTable.Length; i++) {  	uint r = kTable [i - 256];  	kTable [i] = kTable [r & 0xFF] ^ (r >> 8);  }  
Magic Number,ManagedLzma,CRC,D:\newReposJune17\weltkante_managed-lzma\shared\Utilities\CRC.cs,CRC,The following statement contains a magic number: for (uint i = 256; i < kTable.Length; i++) {  	uint r = kTable [i - 256];  	kTable [i] = kTable [r & 0xFF] ^ (r >> 8);  }  
Magic Number,ManagedLzma,CRC,D:\newReposJune17\weltkante_managed-lzma\shared\Utilities\CRC.cs,CRC,The following statement contains a magic number: for (uint i = 256; i < kTable.Length; i++) {  	uint r = kTable [i - 256];  	kTable [i] = kTable [r & 0xFF] ^ (r >> 8);  }  
Magic Number,ManagedLzma,CRC,D:\newReposJune17\weltkante_managed-lzma\shared\Utilities\CRC.cs,CRC,The following statement contains a magic number: kTable [i] = kTable [r & 0xFF] ^ (r >> 8);  
Magic Number,ManagedLzma,CRC,D:\newReposJune17\weltkante_managed-lzma\shared\Utilities\CRC.cs,Update,The following statement contains a magic number: return kTable [(crc & 0xFF) ^ bt] ^ (crc >> 8);  
Magic Number,ManagedLzma,CRC,D:\newReposJune17\weltkante_managed-lzma\shared\Utilities\CRC.cs,Update,The following statement contains a magic number: return kTable [0x300 + (crc & 0xFF)] ^ kTable [0x200 + ((crc >> 8) & 0xFF)] ^ kTable [0x100 + ((crc >> 16) & 0xFF)] ^ kTable [0x000 + (crc >> 24)];  
Magic Number,ManagedLzma,CRC,D:\newReposJune17\weltkante_managed-lzma\shared\Utilities\CRC.cs,Update,The following statement contains a magic number: return kTable [0x300 + (crc & 0xFF)] ^ kTable [0x200 + ((crc >> 8) & 0xFF)] ^ kTable [0x100 + ((crc >> 16) & 0xFF)] ^ kTable [0x000 + (crc >> 24)];  
Magic Number,ManagedLzma,CRC,D:\newReposJune17\weltkante_managed-lzma\shared\Utilities\CRC.cs,Update,The following statement contains a magic number: return kTable [0x300 + (crc & 0xFF)] ^ kTable [0x200 + ((crc >> 8) & 0xFF)] ^ kTable [0x100 + ((crc >> 16) & 0xFF)] ^ kTable [0x000 + (crc >> 24)];  
Magic Number,ManagedLzma,CRC,D:\newReposJune17\weltkante_managed-lzma\shared\Utilities\CRC.cs,Update,The following statement contains a magic number: return Update (Update (crc' (uint)value)' (uint)(value >> 32));  
Magic Number,ManagedLzma,CRC,D:\newReposJune17\weltkante_managed-lzma\shared\Utilities\CRC.cs,Update,The following statement contains a magic number: while (length > 0 && ((int)buffer & 3) != 0) {  	crc = Update (crc' *buffer);  	buffer++;  	length--;  }  
Magic Number,ManagedLzma,CRC,D:\newReposJune17\weltkante_managed-lzma\shared\Utilities\CRC.cs,Update,The following statement contains a magic number: while (length >= 4) {  	crc = Update (crc' *(uint*)buffer);  	buffer += 4;  	length -= 4;  }  
Magic Number,ManagedLzma,CRC,D:\newReposJune17\weltkante_managed-lzma\shared\Utilities\CRC.cs,Update,The following statement contains a magic number: while (length >= 4) {  	crc = Update (crc' *(uint*)buffer);  	buffer += 4;  	length -= 4;  }  
Magic Number,ManagedLzma,CRC,D:\newReposJune17\weltkante_managed-lzma\shared\Utilities\CRC.cs,Update,The following statement contains a magic number: while (length >= 4) {  	crc = Update (crc' *(uint*)buffer);  	buffer += 4;  	length -= 4;  }  
Magic Number,ManagedLzma,CRC,D:\newReposJune17\weltkante_managed-lzma\shared\Utilities\CRC.cs,Update,The following statement contains a magic number: buffer += 4;  
Magic Number,ManagedLzma,CRC,D:\newReposJune17\weltkante_managed-lzma\shared\Utilities\CRC.cs,Update,The following statement contains a magic number: length -= 4;  
Magic Number,ManagedLzma,PasswordAccessor,D:\newReposJune17\weltkante_managed-lzma\shared\Utilities\Password.cs,GetHashCode,The following statement contains a magic number: for (int i = 0; i < mPassword.Length; i++)  	hash = (hash ^ mPassword [i]) * 16777619;  
Magic Number,ManagedLzma,PasswordAccessor,D:\newReposJune17\weltkante_managed-lzma\shared\Utilities\Password.cs,GetHashCode,The following statement contains a magic number: hash = (hash ^ mPassword [i]) * 16777619;  
Missing Default,ManagedLzma.SevenZip.Reader,PpmdArchiveDecoder,D:\newReposJune17\weltkante_managed-lzma\shared\SevenZip\Decoders\PpmdDecoder.cs,CodeSpec,The following switch statement is missing a default case: switch (mDecoderStatus) {  case kStatus.Finished:  	return HRESULT.S_OK;  case kStatus.Error:  	return HRESULT.S_FALSE;  case kStatus.NeedInit:  	//_inStream.Init();  	if (!PPMD.Ppmd7z_RangeDec_Init (mRangeDecoder)) {  		mDecoderStatus = kStatus.Error;  		return HRESULT.S_FALSE;  	}  	mDecoderStatus = kStatus.Normal;  	PPMD.Ppmd7_Init (mState' mSettingOrder);  	break;  }  
