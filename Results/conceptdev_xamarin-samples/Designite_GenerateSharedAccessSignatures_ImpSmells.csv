Implementation smell,Namespace,Class,File,Method,Description
Long Statement,GenerateSharedAccessSignatures,MainClass,C:\repos\conceptdev_xamarin-samples\Azure\Teal\GenerateSharedAccessSignatures\Program.cs,Main,The length of the statement  "			Console.WriteLine("Container SAS URI using stored access policy: " + GetContainerSasUriWithPolicy(container' sharedAccessPolicyName)); " is 134.
Long Statement,GenerateSharedAccessSignatures,MainClass,C:\repos\conceptdev_xamarin-samples\Azure\Teal\GenerateSharedAccessSignatures\Program.cs,Main,The length of the statement  "			Console.WriteLine("Blob SAS URI using stored access policy: " + GetBlobSasUriWithPolicy(container' sharedAccessPolicyName)); " is 124.
Long Statement,GenerateSharedAccessSignatures,MainClass,C:\repos\conceptdev_xamarin-samples\Azure\Teal\GenerateSharedAccessSignatures\Program.cs,GetContainerSasUri,The length of the statement  "			sasConstraints.Permissions = SharedAccessBlobPermissions.Write | SharedAccessBlobPermissions.List | SharedAccessBlobPermissions.Read | SharedAccessBlobPermissions.Delete; " is 170.
Long Statement,GenerateSharedAccessSignatures,Table,C:\repos\conceptdev_xamarin-samples\Azure\Teal\GenerateSharedAccessSignatures\Table.cs,CreateStorageAccountFromConnectionString,The length of the statement  "				Debug.WriteLine("Invalid storage account information provided. Please confirm the AccountName and AccountKey are valid in the app.config file - then restart the sample."); " is 171.
Long Statement,GenerateSharedAccessSignatures,Table,C:\repos\conceptdev_xamarin-samples\Azure\Teal\GenerateSharedAccessSignatures\Table.cs,CreateStorageAccountFromConnectionString,The length of the statement  "				Debug.WriteLine("Invalid storage account information provided. Please confirm the AccountName and AccountKey are valid in the app.config file - then restart the sample."); " is 171.
Magic Number,GenerateSharedAccessSignatures,MainClass,C:\repos\conceptdev_xamarin-samples\Azure\Teal\GenerateSharedAccessSignatures\Program.cs,GetContainerSasUri,The following statement contains a magic number: sasConstraints.SharedAccessExpiryTime = DateTime.UtcNow.AddHours(4);
Magic Number,GenerateSharedAccessSignatures,MainClass,C:\repos\conceptdev_xamarin-samples\Azure\Teal\GenerateSharedAccessSignatures\Program.cs,GetBlobSasUri,The following statement contains a magic number: sasConstraints.SharedAccessStartTime = DateTime.UtcNow.AddMinutes(-5);
Magic Number,GenerateSharedAccessSignatures,MainClass,C:\repos\conceptdev_xamarin-samples\Azure\Teal\GenerateSharedAccessSignatures\Program.cs,GetBlobSasUri,The following statement contains a magic number: sasConstraints.SharedAccessExpiryTime = DateTime.UtcNow.AddHours(4);
Magic Number,GenerateSharedAccessSignatures,MainClass,C:\repos\conceptdev_xamarin-samples\Azure\Teal\GenerateSharedAccessSignatures\Program.cs,CreateSharedAccessPolicy,The following statement contains a magic number: SharedAccessBlobPolicy sharedPolicy = new SharedAccessBlobPolicy()  			{  				SharedAccessExpiryTime = DateTime.UtcNow.AddHours(10)'  				Permissions = SharedAccessBlobPermissions.Read | SharedAccessBlobPermissions.Write | SharedAccessBlobPermissions.List  			};
Magic Number,GenerateSharedAccessSignatures,Table,C:\repos\conceptdev_xamarin-samples\Azure\Teal\GenerateSharedAccessSignatures\Table.cs,DoTable,The following statement contains a magic number: try  			{  				table.CreateIfNotExists();    				DynamicTableEntity ent = new DynamicTableEntity() { PartitionKey = part' RowKey = row };  				ent.Properties.Add("EncryptedProp1"' new EntityProperty(string.Empty));  				ent.Properties.Add("EncryptedProp2"' new EntityProperty("bar"));  				ent.Properties.Add("NotEncryptedProp"' new EntityProperty(1234));    				// Insert Entity  				Debug.WriteLine("Inserting the entity.");  				table.Execute(TableOperation.Insert(ent));    				// Retrieve Entity  				Debug.WriteLine("Retrieving the entity.");  				TableOperation operation = TableOperation.Retrieve(ent.PartitionKey' ent.RowKey);  				TableResult result = table.Execute(operation);  				Debug.WriteLine("tag: " + result.Etag);    				var sas = RequestSasToken (table' part);  				Debug.WriteLine("Sas : " + sas);  				Console.WriteLine("Sas : " + sas);    			}  			catch (Exception ex)  			{  				Debug.WriteLine ("error occurred " + ex);  			}
Magic Number,GenerateSharedAccessSignatures,Table,C:\repos\conceptdev_xamarin-samples\Azure\Teal\GenerateSharedAccessSignatures\Table.cs,RequestSasToken,The following statement contains a magic number: SharedAccessTablePolicy policy = new SharedAccessTablePolicy()  			{  				SharedAccessStartTime = DateTime.UtcNow.AddMinutes(-15)'  				SharedAccessExpiryTime = DateTime.UtcNow.AddDays(1.0)'  				Permissions = SharedAccessTablePermissions.Add  					| SharedAccessTablePermissions.Query  					| SharedAccessTablePermissions.Update  					| SharedAccessTablePermissions.Delete  			};
Magic Number,GenerateSharedAccessSignatures,Queue,C:\repos\conceptdev_xamarin-samples\Azure\Teal\GenerateSharedAccessSignatures\Queue.cs,RequestSasToken,The following statement contains a magic number: SharedAccessQueuePolicy policy = new SharedAccessQueuePolicy()  			{  				SharedAccessStartTime = DateTime.UtcNow.AddMinutes(-15)'  				SharedAccessExpiryTime = DateTime.UtcNow.AddDays(1.0)'  				Permissions = SharedAccessQueuePermissions.Add |  					SharedAccessQueuePermissions.Read |  					SharedAccessQueuePermissions.Update |  					SharedAccessQueuePermissions.ProcessMessages  			};
