Implementation smell,Namespace,Class,File,Method,Description
Long Method,PaintCode,DrawingView,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\LineArt\DrawingView.cs,Draw,The method has 264 lines of code.
Long Method,PaintCode,BlueButton,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\BlueButton\BlueButton.cs,Draw,The method has 174 lines of code.
Long Method,PaintCode,GlossyButton,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\GlossyButton\GlossyButton.cs,Draw,The method has 148 lines of code.
Long Statement,PaintCode,CustomBadgeElement,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\Calendar\CustomBadgeElement.cs,MakeCalendarBadge,The length of the statement  "var greyGradientColors = new CGColor [] {UIColor.White.CGColor' UIColor.FromRGBA(0.57f' 0.57f' 0.57f' 1.00f).CGColor' UIColor.Black.CGColor}; " is 141.
Long Statement,PaintCode,CustomBadgeElement,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\Calendar\CustomBadgeElement.cs,MakeCalendarBadge,The length of the statement  "var roundedRectangle2Path = UIBezierPath.FromRoundedRect(new RectangleF(2' 28' 37' 11)' UIRectCorner.BottomLeft | UIRectCorner.BottomRight' new SizeF(4' 4)); " is 157.
Long Statement,PaintCode,CustomBadgeElement,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\Calendar\CustomBadgeElement.cs,MakeCalendarBadge,The length of the statement  "new NSString(textContent).DrawString(textRect' UIFont.FromName("Helvetica-Bold"' 24)' UILineBreakMode.WordWrap' UITextAlignment.Center); " is 136.
Long Statement,PaintCode,CustomBadgeElement,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\Calendar\CustomBadgeElement.cs,MakeCalendarBadge,The length of the statement  "new NSString(text2Content).DrawString(text2Rect' UIFont.FromName("HelveticaNeue-Bold"' 9)' UILineBreakMode.WordWrap' UITextAlignment.Center); " is 141.
Magic Number,PaintCode,CustomBadgeElement,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\Calendar\CustomBadgeElement.cs,MakeCalendarBadge,The following statement contains a magic number: UIGraphics.BeginImageContext (new SizeF (42' 42));
Magic Number,PaintCode,CustomBadgeElement,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\Calendar\CustomBadgeElement.cs,MakeCalendarBadge,The following statement contains a magic number: UIGraphics.BeginImageContext (new SizeF (42' 42));
Magic Number,PaintCode,CustomBadgeElement,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\Calendar\CustomBadgeElement.cs,MakeCalendarBadge,The following statement contains a magic number: var dropShadowOffset = new SizeF(2' 2);
Magic Number,PaintCode,CustomBadgeElement,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\Calendar\CustomBadgeElement.cs,MakeCalendarBadge,The following statement contains a magic number: var dropShadowOffset = new SizeF(2' 2);
Magic Number,PaintCode,CustomBadgeElement,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\Calendar\CustomBadgeElement.cs,MakeCalendarBadge,The following statement contains a magic number: var roundedRectanglePath = UIBezierPath.FromRoundedRect(new RectangleF(1.5f' 1.5f' 38' 38)' 4);
Magic Number,PaintCode,CustomBadgeElement,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\Calendar\CustomBadgeElement.cs,MakeCalendarBadge,The following statement contains a magic number: var roundedRectanglePath = UIBezierPath.FromRoundedRect(new RectangleF(1.5f' 1.5f' 38' 38)' 4);
Magic Number,PaintCode,CustomBadgeElement,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\Calendar\CustomBadgeElement.cs,MakeCalendarBadge,The following statement contains a magic number: var roundedRectanglePath = UIBezierPath.FromRoundedRect(new RectangleF(1.5f' 1.5f' 38' 38)' 4);
Magic Number,PaintCode,CustomBadgeElement,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\Calendar\CustomBadgeElement.cs,MakeCalendarBadge,The following statement contains a magic number: var roundedRectangle2Path = UIBezierPath.FromRoundedRect(new RectangleF(2' 28' 37' 11)' UIRectCorner.BottomLeft | UIRectCorner.BottomRight' new SizeF(4' 4));
Magic Number,PaintCode,CustomBadgeElement,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\Calendar\CustomBadgeElement.cs,MakeCalendarBadge,The following statement contains a magic number: var roundedRectangle2Path = UIBezierPath.FromRoundedRect(new RectangleF(2' 28' 37' 11)' UIRectCorner.BottomLeft | UIRectCorner.BottomRight' new SizeF(4' 4));
Magic Number,PaintCode,CustomBadgeElement,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\Calendar\CustomBadgeElement.cs,MakeCalendarBadge,The following statement contains a magic number: var roundedRectangle2Path = UIBezierPath.FromRoundedRect(new RectangleF(2' 28' 37' 11)' UIRectCorner.BottomLeft | UIRectCorner.BottomRight' new SizeF(4' 4));
Magic Number,PaintCode,CustomBadgeElement,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\Calendar\CustomBadgeElement.cs,MakeCalendarBadge,The following statement contains a magic number: var roundedRectangle2Path = UIBezierPath.FromRoundedRect(new RectangleF(2' 28' 37' 11)' UIRectCorner.BottomLeft | UIRectCorner.BottomRight' new SizeF(4' 4));
Magic Number,PaintCode,CustomBadgeElement,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\Calendar\CustomBadgeElement.cs,MakeCalendarBadge,The following statement contains a magic number: var roundedRectangle2Path = UIBezierPath.FromRoundedRect(new RectangleF(2' 28' 37' 11)' UIRectCorner.BottomLeft | UIRectCorner.BottomRight' new SizeF(4' 4));
Magic Number,PaintCode,CustomBadgeElement,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\Calendar\CustomBadgeElement.cs,MakeCalendarBadge,The following statement contains a magic number: var roundedRectangle2Path = UIBezierPath.FromRoundedRect(new RectangleF(2' 28' 37' 11)' UIRectCorner.BottomLeft | UIRectCorner.BottomRight' new SizeF(4' 4));
Magic Number,PaintCode,CustomBadgeElement,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\Calendar\CustomBadgeElement.cs,MakeCalendarBadge,The following statement contains a magic number: var textRect = new RectangleF(2' 0' 37' 28);
Magic Number,PaintCode,CustomBadgeElement,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\Calendar\CustomBadgeElement.cs,MakeCalendarBadge,The following statement contains a magic number: var textRect = new RectangleF(2' 0' 37' 28);
Magic Number,PaintCode,CustomBadgeElement,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\Calendar\CustomBadgeElement.cs,MakeCalendarBadge,The following statement contains a magic number: var textRect = new RectangleF(2' 0' 37' 28);
Magic Number,PaintCode,CustomBadgeElement,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\Calendar\CustomBadgeElement.cs,MakeCalendarBadge,The following statement contains a magic number: new NSString(textContent).DrawString(textRect' UIFont.FromName("Helvetica-Bold"' 24)' UILineBreakMode.WordWrap' UITextAlignment.Center);
Magic Number,PaintCode,CustomBadgeElement,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\Calendar\CustomBadgeElement.cs,MakeCalendarBadge,The following statement contains a magic number: var text2Rect = new RectangleF(2' 27' 37' 15);
Magic Number,PaintCode,CustomBadgeElement,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\Calendar\CustomBadgeElement.cs,MakeCalendarBadge,The following statement contains a magic number: var text2Rect = new RectangleF(2' 27' 37' 15);
Magic Number,PaintCode,CustomBadgeElement,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\Calendar\CustomBadgeElement.cs,MakeCalendarBadge,The following statement contains a magic number: var text2Rect = new RectangleF(2' 27' 37' 15);
Magic Number,PaintCode,CustomBadgeElement,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\Calendar\CustomBadgeElement.cs,MakeCalendarBadge,The following statement contains a magic number: var text2Rect = new RectangleF(2' 27' 37' 15);
Magic Number,PaintCode,CustomBadgeElement,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\Calendar\CustomBadgeElement.cs,MakeCalendarBadge,The following statement contains a magic number: new NSString(text2Content).DrawString(text2Rect' UIFont.FromName("HelveticaNeue-Bold"' 9)' UILineBreakMode.WordWrap' UITextAlignment.Center);
Magic Number,PaintCode,DrawingViewController,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\LineArt\DrawingViewController.cs,ViewDidLoad,The following statement contains a magic number: drawing.Frame = new System.Drawing.RectangleF (0' 0' 320' 640);
Magic Number,PaintCode,DrawingViewController,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\LineArt\DrawingViewController.cs,ViewDidLoad,The following statement contains a magic number: drawing.Frame = new System.Drawing.RectangleF (0' 0' 320' 640);
Magic Number,PaintCode,DrawingViewController,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\LineArt\DrawingViewController.cs,ViewDidLoad,The following statement contains a magic number: text = new UITextView (new Rectangle (10' 150' 300' 300));
Magic Number,PaintCode,DrawingViewController,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\LineArt\DrawingViewController.cs,ViewDidLoad,The following statement contains a magic number: text = new UITextView (new Rectangle (10' 150' 300' 300));
Magic Number,PaintCode,DrawingViewController,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\LineArt\DrawingViewController.cs,ViewDidLoad,The following statement contains a magic number: text = new UITextView (new Rectangle (10' 150' 300' 300));
Magic Number,PaintCode,DrawingViewController,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\LineArt\DrawingViewController.cs,ViewDidLoad,The following statement contains a magic number: text = new UITextView (new Rectangle (10' 150' 300' 300));
Magic Number,PaintCode,DrawingView,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\LineArt\DrawingView.cs,Draw,The following statement contains a magic number: var shadowOffset = new SizeF (2' 2);
Magic Number,PaintCode,DrawingView,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\LineArt\DrawingView.cs,Draw,The following statement contains a magic number: var shadowOffset = new SizeF (2' 2);
Magic Number,PaintCode,DrawingView,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\LineArt\DrawingView.cs,Draw,The following statement contains a magic number: var shadowBlurRadius = 2;
Magic Number,PaintCode,DrawingView,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\LineArt\DrawingView.cs,Draw,The following statement contains a magic number: var dayFont = UIFont.FromName ("Helvetica-Bold"' 24);
Magic Number,PaintCode,DrawingView,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\LineArt\DrawingView.cs,Draw,The following statement contains a magic number: var oval11Path = UIBezierPath.FromOval (new RectangleF (256.5f' 46.5f' 13' 14));
Magic Number,PaintCode,DrawingView,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\LineArt\DrawingView.cs,Draw,The following statement contains a magic number: var oval11Path = UIBezierPath.FromOval (new RectangleF (256.5f' 46.5f' 13' 14));
Magic Number,PaintCode,DrawingView,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\LineArt\DrawingView.cs,Draw,The following statement contains a magic number: var oval12Path = UIBezierPath.FromOval (new RectangleF (280.5f' 46.5f' 13' 14));
Magic Number,PaintCode,DrawingView,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\LineArt\DrawingView.cs,Draw,The following statement contains a magic number: var oval12Path = UIBezierPath.FromOval (new RectangleF (280.5f' 46.5f' 13' 14));
Magic Number,PaintCode,DrawingView,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\LineArt\DrawingView.cs,Draw,The following statement contains a magic number: var roundedRectanglePath = UIBezierPath.FromRoundedRect (new RectangleF (8.5f' 60.5f' 37' 36)' 4);
Magic Number,PaintCode,DrawingView,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\LineArt\DrawingView.cs,Draw,The following statement contains a magic number: var roundedRectanglePath = UIBezierPath.FromRoundedRect (new RectangleF (8.5f' 60.5f' 37' 36)' 4);
Magic Number,PaintCode,DrawingView,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\LineArt\DrawingView.cs,Draw,The following statement contains a magic number: var roundedRectanglePath = UIBezierPath.FromRoundedRect (new RectangleF (8.5f' 60.5f' 37' 36)' 4);
Magic Number,PaintCode,DrawingView,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\LineArt\DrawingView.cs,Draw,The following statement contains a magic number: context.DrawLinearGradient (calendarGradient' new PointF (27' 96.5f)' new PointF (27' 60.5f)' 0);
Magic Number,PaintCode,DrawingView,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\LineArt\DrawingView.cs,Draw,The following statement contains a magic number: context.DrawLinearGradient (calendarGradient' new PointF (27' 96.5f)' new PointF (27' 60.5f)' 0);
Magic Number,PaintCode,DrawingView,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\LineArt\DrawingView.cs,Draw,The following statement contains a magic number: roundedRectangle3Path.MoveTo (new PointF (9' 91.2f));
Magic Number,PaintCode,DrawingView,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\LineArt\DrawingView.cs,Draw,The following statement contains a magic number: roundedRectangle3Path.AddCurveToPoint (new PointF (12.56f' 95)' new PointF (9' 93.3f)' new PointF (10.32f' 95));
Magic Number,PaintCode,DrawingView,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\LineArt\DrawingView.cs,Draw,The following statement contains a magic number: roundedRectangle3Path.AddCurveToPoint (new PointF (12.56f' 95)' new PointF (9' 93.3f)' new PointF (10.32f' 95));
Magic Number,PaintCode,DrawingView,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\LineArt\DrawingView.cs,Draw,The following statement contains a magic number: roundedRectangle3Path.AddCurveToPoint (new PointF (12.56f' 95)' new PointF (9' 93.3f)' new PointF (10.32f' 95));
Magic Number,PaintCode,DrawingView,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\LineArt\DrawingView.cs,Draw,The following statement contains a magic number: roundedRectangle3Path.AddLineTo (new PointF (40.94f' 95));
Magic Number,PaintCode,DrawingView,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\LineArt\DrawingView.cs,Draw,The following statement contains a magic number: roundedRectangle3Path.AddCurveToPoint (new PointF (45' 91.2f)' new PointF (43.18f' 95)' new PointF (45' 93.3f));
Magic Number,PaintCode,DrawingView,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\LineArt\DrawingView.cs,Draw,The following statement contains a magic number: roundedRectangle3Path.AddCurveToPoint (new PointF (45' 91.2f)' new PointF (43.18f' 95)' new PointF (45' 93.3f));
Magic Number,PaintCode,DrawingView,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\LineArt\DrawingView.cs,Draw,The following statement contains a magic number: roundedRectangle3Path.AddCurveToPoint (new PointF (45' 91.2f)' new PointF (43.18f' 95)' new PointF (45' 93.3f));
Magic Number,PaintCode,DrawingView,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\LineArt\DrawingView.cs,Draw,The following statement contains a magic number: roundedRectangle3Path.AddLineTo (new PointF (45' 87));
Magic Number,PaintCode,DrawingView,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\LineArt\DrawingView.cs,Draw,The following statement contains a magic number: roundedRectangle3Path.AddLineTo (new PointF (45' 87));
Magic Number,PaintCode,DrawingView,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\LineArt\DrawingView.cs,Draw,The following statement contains a magic number: roundedRectangle3Path.AddCurveToPoint (new PointF (43.42f' 85.5f)' new PointF (45' 84.9f)' new PointF (45.66f' 85.5f));
Magic Number,PaintCode,DrawingView,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\LineArt\DrawingView.cs,Draw,The following statement contains a magic number: roundedRectangle3Path.AddCurveToPoint (new PointF (9' 87)' new PointF (8.7f' 85.5f)' new PointF (9' 84.9f));
Magic Number,PaintCode,DrawingView,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\LineArt\DrawingView.cs,Draw,The following statement contains a magic number: roundedRectangle3Path.AddCurveToPoint (new PointF (9' 87)' new PointF (8.7f' 85.5f)' new PointF (9' 84.9f));
Magic Number,PaintCode,DrawingView,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\LineArt\DrawingView.cs,Draw,The following statement contains a magic number: roundedRectangle3Path.AddCurveToPoint (new PointF (9' 87)' new PointF (8.7f' 85.5f)' new PointF (9' 84.9f));
Magic Number,PaintCode,DrawingView,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\LineArt\DrawingView.cs,Draw,The following statement contains a magic number: roundedRectangle3Path.AddLineTo (new PointF (9' 91.2f));
Magic Number,PaintCode,DrawingView,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\LineArt\DrawingView.cs,Draw,The following statement contains a magic number: var monthRect = new RectangleF (10' 84' 34' 15);
Magic Number,PaintCode,DrawingView,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\LineArt\DrawingView.cs,Draw,The following statement contains a magic number: var monthRect = new RectangleF (10' 84' 34' 15);
Magic Number,PaintCode,DrawingView,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\LineArt\DrawingView.cs,Draw,The following statement contains a magic number: var monthRect = new RectangleF (10' 84' 34' 15);
Magic Number,PaintCode,DrawingView,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\LineArt\DrawingView.cs,Draw,The following statement contains a magic number: var monthRect = new RectangleF (10' 84' 34' 15);
Magic Number,PaintCode,DrawingView,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\LineArt\DrawingView.cs,Draw,The following statement contains a magic number: new NSString (monthContent).DrawString (  				monthRect'  				UIFont.FromName("Helvetica-Bold"' 9)'  				UILineBreakMode.WordWrap'  				UITextAlignment.Center  			);
Magic Number,PaintCode,DrawingView,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\LineArt\DrawingView.cs,Draw,The following statement contains a magic number: var dayRect = new RectangleF (0' 58' 54' 31);
Magic Number,PaintCode,DrawingView,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\LineArt\DrawingView.cs,Draw,The following statement contains a magic number: var dayRect = new RectangleF (0' 58' 54' 31);
Magic Number,PaintCode,DrawingView,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\LineArt\DrawingView.cs,Draw,The following statement contains a magic number: var dayRect = new RectangleF (0' 58' 54' 31);
Magic Number,PaintCode,DrawingView,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\LineArt\DrawingView.cs,Draw,The following statement contains a magic number: var textRect = new RectangleF (54' 60' 75' 38);
Magic Number,PaintCode,DrawingView,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\LineArt\DrawingView.cs,Draw,The following statement contains a magic number: var textRect = new RectangleF (54' 60' 75' 38);
Magic Number,PaintCode,DrawingView,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\LineArt\DrawingView.cs,Draw,The following statement contains a magic number: var textRect = new RectangleF (54' 60' 75' 38);
Magic Number,PaintCode,DrawingView,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\LineArt\DrawingView.cs,Draw,The following statement contains a magic number: var textRect = new RectangleF (54' 60' 75' 38);
Magic Number,PaintCode,DrawingView,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\LineArt\DrawingView.cs,Draw,The following statement contains a magic number: new NSString (textContent).DrawString (  				textRect'  				UIFont.FromName("Helvetica"' 16)'  				UILineBreakMode.WordWrap'  				UITextAlignment.Left  			);
Magic Number,PaintCode,DrawingView,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\LineArt\DrawingView.cs,Draw,The following statement contains a magic number: starPath.MoveTo (new PointF (31' 14.5f));
Magic Number,PaintCode,DrawingView,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\LineArt\DrawingView.cs,Draw,The following statement contains a magic number: starPath.AddLineTo (new PointF (31' 36.1f));
Magic Number,PaintCode,DrawingView,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\LineArt\DrawingView.cs,Draw,The following statement contains a magic number: blueBlobPath.MiterLimit = 2;
Magic Number,PaintCode,DrawingView,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\LineArt\DrawingView.cs,Draw,The following statement contains a magic number: var buttonPath = UIBezierPath.FromRoundedRect (new RectangleF (54.5f' 10.5f' 163' 31)' 4);
Magic Number,PaintCode,DrawingView,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\LineArt\DrawingView.cs,Draw,The following statement contains a magic number: var buttonPath = UIBezierPath.FromRoundedRect (new RectangleF (54.5f' 10.5f' 163' 31)' 4);
Magic Number,PaintCode,DrawingView,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\LineArt\DrawingView.cs,Draw,The following statement contains a magic number: var buttonPath = UIBezierPath.FromRoundedRect (new RectangleF (54.5f' 10.5f' 163' 31)' 4);
Magic Number,PaintCode,DrawingView,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\LineArt\DrawingView.cs,Draw,The following statement contains a magic number: context.DrawRadialGradient (newGradient'      new PointF (100.39f' 55.13f)' 7.84f'      new PointF (136' 26)' 86.67f'      CGGradientDrawingOptions.DrawsBeforeStartLocation | CGGradientDrawingOptions.DrawsAfterEndLocation);
Magic Number,PaintCode,DrawingView,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\LineArt\DrawingView.cs,Draw,The following statement contains a magic number: context.DrawRadialGradient (newGradient'      new PointF (100.39f' 55.13f)' 7.84f'      new PointF (136' 26)' 86.67f'      CGGradientDrawingOptions.DrawsBeforeStartLocation | CGGradientDrawingOptions.DrawsAfterEndLocation);
Magic Number,PaintCode,DrawingView,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\LineArt\DrawingView.cs,Draw,The following statement contains a magic number: var smileyFacePath = UIBezierPath.FromOval (new RectangleF (159.5f' 49.5f' 47' 47));
Magic Number,PaintCode,DrawingView,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\LineArt\DrawingView.cs,Draw,The following statement contains a magic number: var smileyFacePath = UIBezierPath.FromOval (new RectangleF (159.5f' 49.5f' 47' 47));
Magic Number,PaintCode,DrawingView,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\LineArt\DrawingView.cs,Draw,The following statement contains a magic number: var oval2Path = UIBezierPath.FromOval (new RectangleF (169.5f' 64.5f' 8' 8));
Magic Number,PaintCode,DrawingView,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\LineArt\DrawingView.cs,Draw,The following statement contains a magic number: var oval2Path = UIBezierPath.FromOval (new RectangleF (169.5f' 64.5f' 8' 8));
Magic Number,PaintCode,DrawingView,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\LineArt\DrawingView.cs,Draw,The following statement contains a magic number: var oval3Path = UIBezierPath.FromOval (new RectangleF (188.5f' 64.5f' 8' 8));
Magic Number,PaintCode,DrawingView,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\LineArt\DrawingView.cs,Draw,The following statement contains a magic number: var oval3Path = UIBezierPath.FromOval (new RectangleF (188.5f' 64.5f' 8' 8));
Magic Number,PaintCode,DrawingView,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\LineArt\DrawingView.cs,Draw,The following statement contains a magic number: bezier2Path.AddCurveToPoint (new PointF (185.5f' 85.5f)' new PointF (177.75f' 85)' new PointF (182.04f' 86.03f));
Magic Number,PaintCode,DrawingView,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\LineArt\DrawingView.cs,Draw,The following statement contains a magic number: bezier2Path.LineWidth = 2;
Magic Number,PaintCode,DrawingView,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\LineArt\DrawingView.cs,Draw,The following statement contains a magic number: var oval5Path = UIBezierPath.FromOval (new RectangleF (256.5f' 52.5f' 36' 33));
Magic Number,PaintCode,DrawingView,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\LineArt\DrawingView.cs,Draw,The following statement contains a magic number: var oval5Path = UIBezierPath.FromOval (new RectangleF (256.5f' 52.5f' 36' 33));
Magic Number,PaintCode,DrawingView,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\LineArt\DrawingView.cs,Draw,The following statement contains a magic number: var oval6Path = UIBezierPath.FromOval (new RectangleF (262.5f' 59.5f' 10' 19));
Magic Number,PaintCode,DrawingView,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\LineArt\DrawingView.cs,Draw,The following statement contains a magic number: var oval6Path = UIBezierPath.FromOval (new RectangleF (262.5f' 59.5f' 10' 19));
Magic Number,PaintCode,DrawingView,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\LineArt\DrawingView.cs,Draw,The following statement contains a magic number: var oval7Path = UIBezierPath.FromOval (new RectangleF (275.5f' 59.5f' 10' 19));
Magic Number,PaintCode,DrawingView,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\LineArt\DrawingView.cs,Draw,The following statement contains a magic number: var oval7Path = UIBezierPath.FromOval (new RectangleF (275.5f' 59.5f' 10' 19));
Magic Number,PaintCode,DrawingView,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\LineArt\DrawingView.cs,Draw,The following statement contains a magic number: var oval9Path = UIBezierPath.FromOval (new RectangleF (264.5f' 68.5f' 6' 5));
Magic Number,PaintCode,DrawingView,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\LineArt\DrawingView.cs,Draw,The following statement contains a magic number: var oval9Path = UIBezierPath.FromOval (new RectangleF (264.5f' 68.5f' 6' 5));
Magic Number,PaintCode,DrawingView,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\LineArt\DrawingView.cs,Draw,The following statement contains a magic number: var oval10Path = UIBezierPath.FromOval (new RectangleF (277.5f' 68.5f' 6' 5));
Magic Number,PaintCode,DrawingView,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\LineArt\DrawingView.cs,Draw,The following statement contains a magic number: var oval10Path = UIBezierPath.FromOval (new RectangleF (277.5f' 68.5f' 6' 5));
Magic Number,PaintCode,DrawingView,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\LineArt\DrawingView.cs,Draw,The following statement contains a magic number: var oval4Path = UIBezierPath.FromOval (new RectangleF (250.5f' 70.5f' 47' 24));
Magic Number,PaintCode,DrawingView,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\LineArt\DrawingView.cs,Draw,The following statement contains a magic number: var oval4Path = UIBezierPath.FromOval (new RectangleF (250.5f' 70.5f' 47' 24));
Magic Number,PaintCode,DrawingView,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\LineArt\DrawingView.cs,Draw,The following statement contains a magic number: var oval8Path = UIBezierPath.FromOval (new RectangleF (267.5f' 77.5f' 9' 4));
Magic Number,PaintCode,DrawingView,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\LineArt\DrawingView.cs,Draw,The following statement contains a magic number: var oval8Path = UIBezierPath.FromOval (new RectangleF (267.5f' 77.5f' 9' 4));
Magic Number,PaintCode,BlueButton,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\BlueButton\BlueButton.cs,Draw,The following statement contains a magic number: var buttonColorRGBA = new float[4];
Magic Number,PaintCode,BlueButton,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\BlueButton\BlueButton.cs,Draw,The following statement contains a magic number: buttonColor.GetRGBA (  				out buttonColorRGBA [0]'  				out buttonColorRGBA [1]'  				out buttonColorRGBA [2]'  				out buttonColorRGBA [3]  			);
Magic Number,PaintCode,BlueButton,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\BlueButton\BlueButton.cs,Draw,The following statement contains a magic number: buttonColor.GetRGBA (  				out buttonColorRGBA [0]'  				out buttonColorRGBA [1]'  				out buttonColorRGBA [2]'  				out buttonColorRGBA [3]  			);
Magic Number,PaintCode,BlueButton,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\BlueButton\BlueButton.cs,Draw,The following statement contains a magic number: if (isPressed) {  				// Get the Hue Saturation Brightness Alpha copy of the color				  				var buttonColorHSBA = new float[4];  				buttonColor.GetHSBA (  					out buttonColorHSBA [0]'  					out buttonColorHSBA [1]'  					out buttonColorHSBA [2]'  					out buttonColorHSBA [3]  				);  				// Change the brightness to a fixed value (0.5f)  				buttonColor = UIColor.FromHSBA (buttonColorHSBA [0]' buttonColorHSBA [1]' 0.5f' buttonColorHSBA [3]);  				// Re-set the base buttonColorRGBA because everything else is relative to it  				buttonColorRGBA = new float[4];  				buttonColor.GetRGBA (  					out buttonColorRGBA [0]'  					out buttonColorRGBA [1]'  					out buttonColorRGBA [2]'  					out buttonColorRGBA [3]  				);  			}
Magic Number,PaintCode,BlueButton,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\BlueButton\BlueButton.cs,Draw,The following statement contains a magic number: if (isPressed) {  				// Get the Hue Saturation Brightness Alpha copy of the color				  				var buttonColorHSBA = new float[4];  				buttonColor.GetHSBA (  					out buttonColorHSBA [0]'  					out buttonColorHSBA [1]'  					out buttonColorHSBA [2]'  					out buttonColorHSBA [3]  				);  				// Change the brightness to a fixed value (0.5f)  				buttonColor = UIColor.FromHSBA (buttonColorHSBA [0]' buttonColorHSBA [1]' 0.5f' buttonColorHSBA [3]);  				// Re-set the base buttonColorRGBA because everything else is relative to it  				buttonColorRGBA = new float[4];  				buttonColor.GetRGBA (  					out buttonColorRGBA [0]'  					out buttonColorRGBA [1]'  					out buttonColorRGBA [2]'  					out buttonColorRGBA [3]  				);  			}
Magic Number,PaintCode,BlueButton,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\BlueButton\BlueButton.cs,Draw,The following statement contains a magic number: if (isPressed) {  				// Get the Hue Saturation Brightness Alpha copy of the color				  				var buttonColorHSBA = new float[4];  				buttonColor.GetHSBA (  					out buttonColorHSBA [0]'  					out buttonColorHSBA [1]'  					out buttonColorHSBA [2]'  					out buttonColorHSBA [3]  				);  				// Change the brightness to a fixed value (0.5f)  				buttonColor = UIColor.FromHSBA (buttonColorHSBA [0]' buttonColorHSBA [1]' 0.5f' buttonColorHSBA [3]);  				// Re-set the base buttonColorRGBA because everything else is relative to it  				buttonColorRGBA = new float[4];  				buttonColor.GetRGBA (  					out buttonColorRGBA [0]'  					out buttonColorRGBA [1]'  					out buttonColorRGBA [2]'  					out buttonColorRGBA [3]  				);  			}
Magic Number,PaintCode,BlueButton,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\BlueButton\BlueButton.cs,Draw,The following statement contains a magic number: if (isPressed) {  				// Get the Hue Saturation Brightness Alpha copy of the color				  				var buttonColorHSBA = new float[4];  				buttonColor.GetHSBA (  					out buttonColorHSBA [0]'  					out buttonColorHSBA [1]'  					out buttonColorHSBA [2]'  					out buttonColorHSBA [3]  				);  				// Change the brightness to a fixed value (0.5f)  				buttonColor = UIColor.FromHSBA (buttonColorHSBA [0]' buttonColorHSBA [1]' 0.5f' buttonColorHSBA [3]);  				// Re-set the base buttonColorRGBA because everything else is relative to it  				buttonColorRGBA = new float[4];  				buttonColor.GetRGBA (  					out buttonColorRGBA [0]'  					out buttonColorRGBA [1]'  					out buttonColorRGBA [2]'  					out buttonColorRGBA [3]  				);  			}
Magic Number,PaintCode,BlueButton,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\BlueButton\BlueButton.cs,Draw,The following statement contains a magic number: if (isPressed) {  				// Get the Hue Saturation Brightness Alpha copy of the color				  				var buttonColorHSBA = new float[4];  				buttonColor.GetHSBA (  					out buttonColorHSBA [0]'  					out buttonColorHSBA [1]'  					out buttonColorHSBA [2]'  					out buttonColorHSBA [3]  				);  				// Change the brightness to a fixed value (0.5f)  				buttonColor = UIColor.FromHSBA (buttonColorHSBA [0]' buttonColorHSBA [1]' 0.5f' buttonColorHSBA [3]);  				// Re-set the base buttonColorRGBA because everything else is relative to it  				buttonColorRGBA = new float[4];  				buttonColor.GetRGBA (  					out buttonColorRGBA [0]'  					out buttonColorRGBA [1]'  					out buttonColorRGBA [2]'  					out buttonColorRGBA [3]  				);  			}
Magic Number,PaintCode,BlueButton,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\BlueButton\BlueButton.cs,Draw,The following statement contains a magic number: if (isPressed) {  				// Get the Hue Saturation Brightness Alpha copy of the color				  				var buttonColorHSBA = new float[4];  				buttonColor.GetHSBA (  					out buttonColorHSBA [0]'  					out buttonColorHSBA [1]'  					out buttonColorHSBA [2]'  					out buttonColorHSBA [3]  				);  				// Change the brightness to a fixed value (0.5f)  				buttonColor = UIColor.FromHSBA (buttonColorHSBA [0]' buttonColorHSBA [1]' 0.5f' buttonColorHSBA [3]);  				// Re-set the base buttonColorRGBA because everything else is relative to it  				buttonColorRGBA = new float[4];  				buttonColor.GetRGBA (  					out buttonColorRGBA [0]'  					out buttonColorRGBA [1]'  					out buttonColorRGBA [2]'  					out buttonColorRGBA [3]  				);  			}
Magic Number,PaintCode,BlueButton,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\BlueButton\BlueButton.cs,Draw,The following statement contains a magic number: if (isPressed) {  				// Get the Hue Saturation Brightness Alpha copy of the color				  				var buttonColorHSBA = new float[4];  				buttonColor.GetHSBA (  					out buttonColorHSBA [0]'  					out buttonColorHSBA [1]'  					out buttonColorHSBA [2]'  					out buttonColorHSBA [3]  				);  				// Change the brightness to a fixed value (0.5f)  				buttonColor = UIColor.FromHSBA (buttonColorHSBA [0]' buttonColorHSBA [1]' 0.5f' buttonColorHSBA [3]);  				// Re-set the base buttonColorRGBA because everything else is relative to it  				buttonColorRGBA = new float[4];  				buttonColor.GetRGBA (  					out buttonColorRGBA [0]'  					out buttonColorRGBA [1]'  					out buttonColorRGBA [2]'  					out buttonColorRGBA [3]  				);  			}
Magic Number,PaintCode,BlueButton,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\BlueButton\BlueButton.cs,Draw,The following statement contains a magic number: using (var colorSpace = CGColorSpace.CreateDeviceRGB ()) {  				  				  				  				// ------------- START PAINTCODE -------------    //// Color Declarations  				UIColor upColorOut = UIColor.FromRGBA (0.79f' 0.79f' 0.79f' 1.00f);  				UIColor bottomColorDown = UIColor.FromRGBA (0.21f' 0.21f' 0.21f' 1.00f);  				UIColor upColorInner = UIColor.FromRGBA (0.17f' 0.18f' 0.20f' 1.00f);  				UIColor bottomColorInner = UIColor.FromRGBA (0.98f' 0.98f' 0.99f' 1.00f);      				UIColor buttonFlareUpColor = UIColor.FromRGBA (  					(buttonColorRGBA[0] * 0.3f + 0.7f)'  					(buttonColorRGBA[1] * 0.3f + 0.7f)'  					(buttonColorRGBA[2] * 0.3f + 0.7f)'  					(buttonColorRGBA[3] * 0.3f + 0.7f)  				);  				UIColor buttonTopColor = UIColor.FromRGBA (  					(buttonColorRGBA[0] * 0.8f)'  					(buttonColorRGBA[1] * 0.8f)'  					(buttonColorRGBA[2] * 0.8f)'  					(buttonColorRGBA[3] * 0.8f + 0.2f)  				);  				UIColor buttonBottomColor = UIColor.FromRGBA (  					(buttonColorRGBA[0] * 0 + 1)'  					(buttonColorRGBA[1] * 0 + 1)'  					(buttonColorRGBA[2] * 0 + 1)'  					(buttonColorRGBA[3] * 0 + 1)  				);  				UIColor buttonFlareBottomColor = UIColor.FromRGBA (  					(buttonColorRGBA[0] * 0.8f + 0.2f)'  					(buttonColorRGBA[1] * 0.8f + 0.2f)'  					(buttonColorRGBA[2] * 0.8f + 0.2f)'  					(buttonColorRGBA[3] * 0.8f + 0.2f)  				);  				UIColor flareWhite = UIColor.FromRGBA (1.00f' 1.00f' 1.00f' 0.83f);    //// Gradient Declarations  				var ringGradientColors = new CGColor [] {upColorOut.CGColor' bottomColorDown.CGColor};  				var ringGradientLocations = new float [] {0' 1};  				var ringGradient = new CGGradient (colorSpace' ringGradientColors' ringGradientLocations);  				var ringInnerGradientColors = new CGColor [] {upColorInner.CGColor' bottomColorInner.CGColor};  				var ringInnerGradientLocations = new float [] {0' 1};  				var ringInnerGradient = new CGGradient (colorSpace' ringInnerGradientColors' ringInnerGradientLocations);  				var buttonGradientColors = new CGColor [] {buttonBottomColor.CGColor' buttonTopColor.CGColor};  				var buttonGradientLocations = new float [] {0' 1};  				var buttonGradient = new CGGradient (colorSpace' buttonGradientColors' buttonGradientLocations);  				var overlayGradientColors = new CGColor [] {flareWhite.CGColor' UIColor.Clear.CGColor};  				var overlayGradientLocations = new float [] {0' 1};  				var overlayGradient = new CGGradient (colorSpace' overlayGradientColors' overlayGradientLocations);  				var buttonFlareGradientColors = new CGColor [] {buttonFlareUpColor.CGColor' buttonFlareBottomColor.CGColor};  				var buttonFlareGradientLocations = new float [] {0' 1};  				var buttonFlareGradient = new CGGradient (colorSpace' buttonFlareGradientColors' buttonFlareGradientLocations);    //// Shadow Declarations  				var buttonInnerShadow = UIColor.Black.CGColor;  				var buttonInnerShadowOffset = new SizeF (0' -0);  				var buttonInnerShadowBlurRadius = 5;  				var buttonOuterShadow = UIColor.Black.CGColor;  				var buttonOuterShadowOffset = new SizeF (0' 2);  				  				  				var buttonOuterShadowBlurRadius = isPressed ? 2 : 5;	// ADDED this code after PaintCode      //// outerOval Drawing  				var outerOvalPath = UIBezierPath.FromOval (new RectangleF (5' 5' 63' 63));  				context.SaveState ();  				context.SetShadowWithColor (buttonOuterShadowOffset' buttonOuterShadowBlurRadius' buttonOuterShadow);  				context.BeginTransparencyLayer (null);  				outerOvalPath.AddClip ();  				context.DrawLinearGradient (ringGradient' new PointF (36.5f' 5)' new PointF (36.5f' 68)' 0);  				context.EndTransparencyLayer ();  				context.RestoreState ();        //// overlayOval Drawing  				var overlayOvalPath = UIBezierPath.FromOval (new RectangleF (5' 5' 63' 63));  				context.SaveState ();  				overlayOvalPath.AddClip ();  				context.DrawRadialGradient (overlayGradient'      new PointF (36.5f' 12.23f)' 17.75f'      new PointF (36.5f' 36.5f)' 44.61f'      CGGradientDrawingOptions.DrawsBeforeStartLocation | CGGradientDrawingOptions.DrawsAfterEndLocation);  				context.RestoreState ();        //// innerOval Drawing  				var innerOvalPath = UIBezierPath.FromOval (new RectangleF (12' 12' 49' 49));  				context.SaveState ();  				innerOvalPath.AddClip ();  				context.DrawLinearGradient (ringInnerGradient' new PointF (36.5f' 12)' new PointF (36.5f' 61)' 0);  				context.RestoreState ();        //// buttonOval Drawing  				var buttonOvalPath = UIBezierPath.FromOval (new RectangleF (14' 13' 46' 46));  				context.SaveState ();  				buttonOvalPath.AddClip ();  				context.DrawRadialGradient (buttonGradient'      new PointF (37' 63.23f)' 2.44f'      new PointF (37' 44.48f)' 23.14f'      CGGradientDrawingOptions.DrawsBeforeStartLocation | CGGradientDrawingOptions.DrawsAfterEndLocation);  				context.RestoreState ();    ////// buttonOval Inner Shadow  				var buttonOvalBorderRect = buttonOvalPath.Bounds;  				buttonOvalBorderRect.Inflate (buttonInnerShadowBlurRadius' buttonInnerShadowBlurRadius);  				buttonOvalBorderRect.Offset (-buttonInnerShadowOffset.Width' -buttonInnerShadowOffset.Height);  				buttonOvalBorderRect = RectangleF.Union (buttonOvalBorderRect' buttonOvalPath.Bounds);  				buttonOvalBorderRect.Inflate (1' 1);    				var buttonOvalNegativePath = UIBezierPath.FromRect (buttonOvalBorderRect);  				buttonOvalNegativePath.AppendPath (buttonOvalPath);  				buttonOvalNegativePath.UsesEvenOddFillRule = true;    				context.SaveState ();  				{  					var xOffset = buttonInnerShadowOffset.Width + (float)Math.Round (buttonOvalBorderRect.Width);  					var yOffset = buttonInnerShadowOffset.Height;  					context.SetShadowWithColor (          new SizeF (xOffset + (xOffset >= 0 ? 0.1f : -0.1f)' yOffset + (yOffset >= 0 ? 0.1f : -0.1f))'          buttonInnerShadowBlurRadius'          buttonInnerShadow);    					buttonOvalPath.AddClip ();  					var transform = CGAffineTransform.MakeTranslation (-(float)Math.Round (buttonOvalBorderRect.Width)' 0);  					buttonOvalNegativePath.ApplyTransform (transform);  					UIColor.Gray.SetFill ();  					buttonOvalNegativePath.Fill ();  				}  				context.RestoreState ();          //// flareOval Drawing  				var flareOvalPath = UIBezierPath.FromOval (new RectangleF (22' 14' 29' 15));  				context.SaveState ();  				flareOvalPath.AddClip ();  				context.DrawLinearGradient (buttonFlareGradient' new PointF (36.5f' 14)' new PointF (36.5f' 29)' 0);  				context.RestoreState ();      				// ------------- END PAINTCODE -------------  				  				  				  			}
Magic Number,PaintCode,BlueButton,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\BlueButton\BlueButton.cs,Draw,The following statement contains a magic number: using (var colorSpace = CGColorSpace.CreateDeviceRGB ()) {  				  				  				  				// ------------- START PAINTCODE -------------    //// Color Declarations  				UIColor upColorOut = UIColor.FromRGBA (0.79f' 0.79f' 0.79f' 1.00f);  				UIColor bottomColorDown = UIColor.FromRGBA (0.21f' 0.21f' 0.21f' 1.00f);  				UIColor upColorInner = UIColor.FromRGBA (0.17f' 0.18f' 0.20f' 1.00f);  				UIColor bottomColorInner = UIColor.FromRGBA (0.98f' 0.98f' 0.99f' 1.00f);      				UIColor buttonFlareUpColor = UIColor.FromRGBA (  					(buttonColorRGBA[0] * 0.3f + 0.7f)'  					(buttonColorRGBA[1] * 0.3f + 0.7f)'  					(buttonColorRGBA[2] * 0.3f + 0.7f)'  					(buttonColorRGBA[3] * 0.3f + 0.7f)  				);  				UIColor buttonTopColor = UIColor.FromRGBA (  					(buttonColorRGBA[0] * 0.8f)'  					(buttonColorRGBA[1] * 0.8f)'  					(buttonColorRGBA[2] * 0.8f)'  					(buttonColorRGBA[3] * 0.8f + 0.2f)  				);  				UIColor buttonBottomColor = UIColor.FromRGBA (  					(buttonColorRGBA[0] * 0 + 1)'  					(buttonColorRGBA[1] * 0 + 1)'  					(buttonColorRGBA[2] * 0 + 1)'  					(buttonColorRGBA[3] * 0 + 1)  				);  				UIColor buttonFlareBottomColor = UIColor.FromRGBA (  					(buttonColorRGBA[0] * 0.8f + 0.2f)'  					(buttonColorRGBA[1] * 0.8f + 0.2f)'  					(buttonColorRGBA[2] * 0.8f + 0.2f)'  					(buttonColorRGBA[3] * 0.8f + 0.2f)  				);  				UIColor flareWhite = UIColor.FromRGBA (1.00f' 1.00f' 1.00f' 0.83f);    //// Gradient Declarations  				var ringGradientColors = new CGColor [] {upColorOut.CGColor' bottomColorDown.CGColor};  				var ringGradientLocations = new float [] {0' 1};  				var ringGradient = new CGGradient (colorSpace' ringGradientColors' ringGradientLocations);  				var ringInnerGradientColors = new CGColor [] {upColorInner.CGColor' bottomColorInner.CGColor};  				var ringInnerGradientLocations = new float [] {0' 1};  				var ringInnerGradient = new CGGradient (colorSpace' ringInnerGradientColors' ringInnerGradientLocations);  				var buttonGradientColors = new CGColor [] {buttonBottomColor.CGColor' buttonTopColor.CGColor};  				var buttonGradientLocations = new float [] {0' 1};  				var buttonGradient = new CGGradient (colorSpace' buttonGradientColors' buttonGradientLocations);  				var overlayGradientColors = new CGColor [] {flareWhite.CGColor' UIColor.Clear.CGColor};  				var overlayGradientLocations = new float [] {0' 1};  				var overlayGradient = new CGGradient (colorSpace' overlayGradientColors' overlayGradientLocations);  				var buttonFlareGradientColors = new CGColor [] {buttonFlareUpColor.CGColor' buttonFlareBottomColor.CGColor};  				var buttonFlareGradientLocations = new float [] {0' 1};  				var buttonFlareGradient = new CGGradient (colorSpace' buttonFlareGradientColors' buttonFlareGradientLocations);    //// Shadow Declarations  				var buttonInnerShadow = UIColor.Black.CGColor;  				var buttonInnerShadowOffset = new SizeF (0' -0);  				var buttonInnerShadowBlurRadius = 5;  				var buttonOuterShadow = UIColor.Black.CGColor;  				var buttonOuterShadowOffset = new SizeF (0' 2);  				  				  				var buttonOuterShadowBlurRadius = isPressed ? 2 : 5;	// ADDED this code after PaintCode      //// outerOval Drawing  				var outerOvalPath = UIBezierPath.FromOval (new RectangleF (5' 5' 63' 63));  				context.SaveState ();  				context.SetShadowWithColor (buttonOuterShadowOffset' buttonOuterShadowBlurRadius' buttonOuterShadow);  				context.BeginTransparencyLayer (null);  				outerOvalPath.AddClip ();  				context.DrawLinearGradient (ringGradient' new PointF (36.5f' 5)' new PointF (36.5f' 68)' 0);  				context.EndTransparencyLayer ();  				context.RestoreState ();        //// overlayOval Drawing  				var overlayOvalPath = UIBezierPath.FromOval (new RectangleF (5' 5' 63' 63));  				context.SaveState ();  				overlayOvalPath.AddClip ();  				context.DrawRadialGradient (overlayGradient'      new PointF (36.5f' 12.23f)' 17.75f'      new PointF (36.5f' 36.5f)' 44.61f'      CGGradientDrawingOptions.DrawsBeforeStartLocation | CGGradientDrawingOptions.DrawsAfterEndLocation);  				context.RestoreState ();        //// innerOval Drawing  				var innerOvalPath = UIBezierPath.FromOval (new RectangleF (12' 12' 49' 49));  				context.SaveState ();  				innerOvalPath.AddClip ();  				context.DrawLinearGradient (ringInnerGradient' new PointF (36.5f' 12)' new PointF (36.5f' 61)' 0);  				context.RestoreState ();        //// buttonOval Drawing  				var buttonOvalPath = UIBezierPath.FromOval (new RectangleF (14' 13' 46' 46));  				context.SaveState ();  				buttonOvalPath.AddClip ();  				context.DrawRadialGradient (buttonGradient'      new PointF (37' 63.23f)' 2.44f'      new PointF (37' 44.48f)' 23.14f'      CGGradientDrawingOptions.DrawsBeforeStartLocation | CGGradientDrawingOptions.DrawsAfterEndLocation);  				context.RestoreState ();    ////// buttonOval Inner Shadow  				var buttonOvalBorderRect = buttonOvalPath.Bounds;  				buttonOvalBorderRect.Inflate (buttonInnerShadowBlurRadius' buttonInnerShadowBlurRadius);  				buttonOvalBorderRect.Offset (-buttonInnerShadowOffset.Width' -buttonInnerShadowOffset.Height);  				buttonOvalBorderRect = RectangleF.Union (buttonOvalBorderRect' buttonOvalPath.Bounds);  				buttonOvalBorderRect.Inflate (1' 1);    				var buttonOvalNegativePath = UIBezierPath.FromRect (buttonOvalBorderRect);  				buttonOvalNegativePath.AppendPath (buttonOvalPath);  				buttonOvalNegativePath.UsesEvenOddFillRule = true;    				context.SaveState ();  				{  					var xOffset = buttonInnerShadowOffset.Width + (float)Math.Round (buttonOvalBorderRect.Width);  					var yOffset = buttonInnerShadowOffset.Height;  					context.SetShadowWithColor (          new SizeF (xOffset + (xOffset >= 0 ? 0.1f : -0.1f)' yOffset + (yOffset >= 0 ? 0.1f : -0.1f))'          buttonInnerShadowBlurRadius'          buttonInnerShadow);    					buttonOvalPath.AddClip ();  					var transform = CGAffineTransform.MakeTranslation (-(float)Math.Round (buttonOvalBorderRect.Width)' 0);  					buttonOvalNegativePath.ApplyTransform (transform);  					UIColor.Gray.SetFill ();  					buttonOvalNegativePath.Fill ();  				}  				context.RestoreState ();          //// flareOval Drawing  				var flareOvalPath = UIBezierPath.FromOval (new RectangleF (22' 14' 29' 15));  				context.SaveState ();  				flareOvalPath.AddClip ();  				context.DrawLinearGradient (buttonFlareGradient' new PointF (36.5f' 14)' new PointF (36.5f' 29)' 0);  				context.RestoreState ();      				// ------------- END PAINTCODE -------------  				  				  				  			}
Magic Number,PaintCode,BlueButton,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\BlueButton\BlueButton.cs,Draw,The following statement contains a magic number: using (var colorSpace = CGColorSpace.CreateDeviceRGB ()) {  				  				  				  				// ------------- START PAINTCODE -------------    //// Color Declarations  				UIColor upColorOut = UIColor.FromRGBA (0.79f' 0.79f' 0.79f' 1.00f);  				UIColor bottomColorDown = UIColor.FromRGBA (0.21f' 0.21f' 0.21f' 1.00f);  				UIColor upColorInner = UIColor.FromRGBA (0.17f' 0.18f' 0.20f' 1.00f);  				UIColor bottomColorInner = UIColor.FromRGBA (0.98f' 0.98f' 0.99f' 1.00f);      				UIColor buttonFlareUpColor = UIColor.FromRGBA (  					(buttonColorRGBA[0] * 0.3f + 0.7f)'  					(buttonColorRGBA[1] * 0.3f + 0.7f)'  					(buttonColorRGBA[2] * 0.3f + 0.7f)'  					(buttonColorRGBA[3] * 0.3f + 0.7f)  				);  				UIColor buttonTopColor = UIColor.FromRGBA (  					(buttonColorRGBA[0] * 0.8f)'  					(buttonColorRGBA[1] * 0.8f)'  					(buttonColorRGBA[2] * 0.8f)'  					(buttonColorRGBA[3] * 0.8f + 0.2f)  				);  				UIColor buttonBottomColor = UIColor.FromRGBA (  					(buttonColorRGBA[0] * 0 + 1)'  					(buttonColorRGBA[1] * 0 + 1)'  					(buttonColorRGBA[2] * 0 + 1)'  					(buttonColorRGBA[3] * 0 + 1)  				);  				UIColor buttonFlareBottomColor = UIColor.FromRGBA (  					(buttonColorRGBA[0] * 0.8f + 0.2f)'  					(buttonColorRGBA[1] * 0.8f + 0.2f)'  					(buttonColorRGBA[2] * 0.8f + 0.2f)'  					(buttonColorRGBA[3] * 0.8f + 0.2f)  				);  				UIColor flareWhite = UIColor.FromRGBA (1.00f' 1.00f' 1.00f' 0.83f);    //// Gradient Declarations  				var ringGradientColors = new CGColor [] {upColorOut.CGColor' bottomColorDown.CGColor};  				var ringGradientLocations = new float [] {0' 1};  				var ringGradient = new CGGradient (colorSpace' ringGradientColors' ringGradientLocations);  				var ringInnerGradientColors = new CGColor [] {upColorInner.CGColor' bottomColorInner.CGColor};  				var ringInnerGradientLocations = new float [] {0' 1};  				var ringInnerGradient = new CGGradient (colorSpace' ringInnerGradientColors' ringInnerGradientLocations);  				var buttonGradientColors = new CGColor [] {buttonBottomColor.CGColor' buttonTopColor.CGColor};  				var buttonGradientLocations = new float [] {0' 1};  				var buttonGradient = new CGGradient (colorSpace' buttonGradientColors' buttonGradientLocations);  				var overlayGradientColors = new CGColor [] {flareWhite.CGColor' UIColor.Clear.CGColor};  				var overlayGradientLocations = new float [] {0' 1};  				var overlayGradient = new CGGradient (colorSpace' overlayGradientColors' overlayGradientLocations);  				var buttonFlareGradientColors = new CGColor [] {buttonFlareUpColor.CGColor' buttonFlareBottomColor.CGColor};  				var buttonFlareGradientLocations = new float [] {0' 1};  				var buttonFlareGradient = new CGGradient (colorSpace' buttonFlareGradientColors' buttonFlareGradientLocations);    //// Shadow Declarations  				var buttonInnerShadow = UIColor.Black.CGColor;  				var buttonInnerShadowOffset = new SizeF (0' -0);  				var buttonInnerShadowBlurRadius = 5;  				var buttonOuterShadow = UIColor.Black.CGColor;  				var buttonOuterShadowOffset = new SizeF (0' 2);  				  				  				var buttonOuterShadowBlurRadius = isPressed ? 2 : 5;	// ADDED this code after PaintCode      //// outerOval Drawing  				var outerOvalPath = UIBezierPath.FromOval (new RectangleF (5' 5' 63' 63));  				context.SaveState ();  				context.SetShadowWithColor (buttonOuterShadowOffset' buttonOuterShadowBlurRadius' buttonOuterShadow);  				context.BeginTransparencyLayer (null);  				outerOvalPath.AddClip ();  				context.DrawLinearGradient (ringGradient' new PointF (36.5f' 5)' new PointF (36.5f' 68)' 0);  				context.EndTransparencyLayer ();  				context.RestoreState ();        //// overlayOval Drawing  				var overlayOvalPath = UIBezierPath.FromOval (new RectangleF (5' 5' 63' 63));  				context.SaveState ();  				overlayOvalPath.AddClip ();  				context.DrawRadialGradient (overlayGradient'      new PointF (36.5f' 12.23f)' 17.75f'      new PointF (36.5f' 36.5f)' 44.61f'      CGGradientDrawingOptions.DrawsBeforeStartLocation | CGGradientDrawingOptions.DrawsAfterEndLocation);  				context.RestoreState ();        //// innerOval Drawing  				var innerOvalPath = UIBezierPath.FromOval (new RectangleF (12' 12' 49' 49));  				context.SaveState ();  				innerOvalPath.AddClip ();  				context.DrawLinearGradient (ringInnerGradient' new PointF (36.5f' 12)' new PointF (36.5f' 61)' 0);  				context.RestoreState ();        //// buttonOval Drawing  				var buttonOvalPath = UIBezierPath.FromOval (new RectangleF (14' 13' 46' 46));  				context.SaveState ();  				buttonOvalPath.AddClip ();  				context.DrawRadialGradient (buttonGradient'      new PointF (37' 63.23f)' 2.44f'      new PointF (37' 44.48f)' 23.14f'      CGGradientDrawingOptions.DrawsBeforeStartLocation | CGGradientDrawingOptions.DrawsAfterEndLocation);  				context.RestoreState ();    ////// buttonOval Inner Shadow  				var buttonOvalBorderRect = buttonOvalPath.Bounds;  				buttonOvalBorderRect.Inflate (buttonInnerShadowBlurRadius' buttonInnerShadowBlurRadius);  				buttonOvalBorderRect.Offset (-buttonInnerShadowOffset.Width' -buttonInnerShadowOffset.Height);  				buttonOvalBorderRect = RectangleF.Union (buttonOvalBorderRect' buttonOvalPath.Bounds);  				buttonOvalBorderRect.Inflate (1' 1);    				var buttonOvalNegativePath = UIBezierPath.FromRect (buttonOvalBorderRect);  				buttonOvalNegativePath.AppendPath (buttonOvalPath);  				buttonOvalNegativePath.UsesEvenOddFillRule = true;    				context.SaveState ();  				{  					var xOffset = buttonInnerShadowOffset.Width + (float)Math.Round (buttonOvalBorderRect.Width);  					var yOffset = buttonInnerShadowOffset.Height;  					context.SetShadowWithColor (          new SizeF (xOffset + (xOffset >= 0 ? 0.1f : -0.1f)' yOffset + (yOffset >= 0 ? 0.1f : -0.1f))'          buttonInnerShadowBlurRadius'          buttonInnerShadow);    					buttonOvalPath.AddClip ();  					var transform = CGAffineTransform.MakeTranslation (-(float)Math.Round (buttonOvalBorderRect.Width)' 0);  					buttonOvalNegativePath.ApplyTransform (transform);  					UIColor.Gray.SetFill ();  					buttonOvalNegativePath.Fill ();  				}  				context.RestoreState ();          //// flareOval Drawing  				var flareOvalPath = UIBezierPath.FromOval (new RectangleF (22' 14' 29' 15));  				context.SaveState ();  				flareOvalPath.AddClip ();  				context.DrawLinearGradient (buttonFlareGradient' new PointF (36.5f' 14)' new PointF (36.5f' 29)' 0);  				context.RestoreState ();      				// ------------- END PAINTCODE -------------  				  				  				  			}
Magic Number,PaintCode,BlueButton,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\BlueButton\BlueButton.cs,Draw,The following statement contains a magic number: using (var colorSpace = CGColorSpace.CreateDeviceRGB ()) {  				  				  				  				// ------------- START PAINTCODE -------------    //// Color Declarations  				UIColor upColorOut = UIColor.FromRGBA (0.79f' 0.79f' 0.79f' 1.00f);  				UIColor bottomColorDown = UIColor.FromRGBA (0.21f' 0.21f' 0.21f' 1.00f);  				UIColor upColorInner = UIColor.FromRGBA (0.17f' 0.18f' 0.20f' 1.00f);  				UIColor bottomColorInner = UIColor.FromRGBA (0.98f' 0.98f' 0.99f' 1.00f);      				UIColor buttonFlareUpColor = UIColor.FromRGBA (  					(buttonColorRGBA[0] * 0.3f + 0.7f)'  					(buttonColorRGBA[1] * 0.3f + 0.7f)'  					(buttonColorRGBA[2] * 0.3f + 0.7f)'  					(buttonColorRGBA[3] * 0.3f + 0.7f)  				);  				UIColor buttonTopColor = UIColor.FromRGBA (  					(buttonColorRGBA[0] * 0.8f)'  					(buttonColorRGBA[1] * 0.8f)'  					(buttonColorRGBA[2] * 0.8f)'  					(buttonColorRGBA[3] * 0.8f + 0.2f)  				);  				UIColor buttonBottomColor = UIColor.FromRGBA (  					(buttonColorRGBA[0] * 0 + 1)'  					(buttonColorRGBA[1] * 0 + 1)'  					(buttonColorRGBA[2] * 0 + 1)'  					(buttonColorRGBA[3] * 0 + 1)  				);  				UIColor buttonFlareBottomColor = UIColor.FromRGBA (  					(buttonColorRGBA[0] * 0.8f + 0.2f)'  					(buttonColorRGBA[1] * 0.8f + 0.2f)'  					(buttonColorRGBA[2] * 0.8f + 0.2f)'  					(buttonColorRGBA[3] * 0.8f + 0.2f)  				);  				UIColor flareWhite = UIColor.FromRGBA (1.00f' 1.00f' 1.00f' 0.83f);    //// Gradient Declarations  				var ringGradientColors = new CGColor [] {upColorOut.CGColor' bottomColorDown.CGColor};  				var ringGradientLocations = new float [] {0' 1};  				var ringGradient = new CGGradient (colorSpace' ringGradientColors' ringGradientLocations);  				var ringInnerGradientColors = new CGColor [] {upColorInner.CGColor' bottomColorInner.CGColor};  				var ringInnerGradientLocations = new float [] {0' 1};  				var ringInnerGradient = new CGGradient (colorSpace' ringInnerGradientColors' ringInnerGradientLocations);  				var buttonGradientColors = new CGColor [] {buttonBottomColor.CGColor' buttonTopColor.CGColor};  				var buttonGradientLocations = new float [] {0' 1};  				var buttonGradient = new CGGradient (colorSpace' buttonGradientColors' buttonGradientLocations);  				var overlayGradientColors = new CGColor [] {flareWhite.CGColor' UIColor.Clear.CGColor};  				var overlayGradientLocations = new float [] {0' 1};  				var overlayGradient = new CGGradient (colorSpace' overlayGradientColors' overlayGradientLocations);  				var buttonFlareGradientColors = new CGColor [] {buttonFlareUpColor.CGColor' buttonFlareBottomColor.CGColor};  				var buttonFlareGradientLocations = new float [] {0' 1};  				var buttonFlareGradient = new CGGradient (colorSpace' buttonFlareGradientColors' buttonFlareGradientLocations);    //// Shadow Declarations  				var buttonInnerShadow = UIColor.Black.CGColor;  				var buttonInnerShadowOffset = new SizeF (0' -0);  				var buttonInnerShadowBlurRadius = 5;  				var buttonOuterShadow = UIColor.Black.CGColor;  				var buttonOuterShadowOffset = new SizeF (0' 2);  				  				  				var buttonOuterShadowBlurRadius = isPressed ? 2 : 5;	// ADDED this code after PaintCode      //// outerOval Drawing  				var outerOvalPath = UIBezierPath.FromOval (new RectangleF (5' 5' 63' 63));  				context.SaveState ();  				context.SetShadowWithColor (buttonOuterShadowOffset' buttonOuterShadowBlurRadius' buttonOuterShadow);  				context.BeginTransparencyLayer (null);  				outerOvalPath.AddClip ();  				context.DrawLinearGradient (ringGradient' new PointF (36.5f' 5)' new PointF (36.5f' 68)' 0);  				context.EndTransparencyLayer ();  				context.RestoreState ();        //// overlayOval Drawing  				var overlayOvalPath = UIBezierPath.FromOval (new RectangleF (5' 5' 63' 63));  				context.SaveState ();  				overlayOvalPath.AddClip ();  				context.DrawRadialGradient (overlayGradient'      new PointF (36.5f' 12.23f)' 17.75f'      new PointF (36.5f' 36.5f)' 44.61f'      CGGradientDrawingOptions.DrawsBeforeStartLocation | CGGradientDrawingOptions.DrawsAfterEndLocation);  				context.RestoreState ();        //// innerOval Drawing  				var innerOvalPath = UIBezierPath.FromOval (new RectangleF (12' 12' 49' 49));  				context.SaveState ();  				innerOvalPath.AddClip ();  				context.DrawLinearGradient (ringInnerGradient' new PointF (36.5f' 12)' new PointF (36.5f' 61)' 0);  				context.RestoreState ();        //// buttonOval Drawing  				var buttonOvalPath = UIBezierPath.FromOval (new RectangleF (14' 13' 46' 46));  				context.SaveState ();  				buttonOvalPath.AddClip ();  				context.DrawRadialGradient (buttonGradient'      new PointF (37' 63.23f)' 2.44f'      new PointF (37' 44.48f)' 23.14f'      CGGradientDrawingOptions.DrawsBeforeStartLocation | CGGradientDrawingOptions.DrawsAfterEndLocation);  				context.RestoreState ();    ////// buttonOval Inner Shadow  				var buttonOvalBorderRect = buttonOvalPath.Bounds;  				buttonOvalBorderRect.Inflate (buttonInnerShadowBlurRadius' buttonInnerShadowBlurRadius);  				buttonOvalBorderRect.Offset (-buttonInnerShadowOffset.Width' -buttonInnerShadowOffset.Height);  				buttonOvalBorderRect = RectangleF.Union (buttonOvalBorderRect' buttonOvalPath.Bounds);  				buttonOvalBorderRect.Inflate (1' 1);    				var buttonOvalNegativePath = UIBezierPath.FromRect (buttonOvalBorderRect);  				buttonOvalNegativePath.AppendPath (buttonOvalPath);  				buttonOvalNegativePath.UsesEvenOddFillRule = true;    				context.SaveState ();  				{  					var xOffset = buttonInnerShadowOffset.Width + (float)Math.Round (buttonOvalBorderRect.Width);  					var yOffset = buttonInnerShadowOffset.Height;  					context.SetShadowWithColor (          new SizeF (xOffset + (xOffset >= 0 ? 0.1f : -0.1f)' yOffset + (yOffset >= 0 ? 0.1f : -0.1f))'          buttonInnerShadowBlurRadius'          buttonInnerShadow);    					buttonOvalPath.AddClip ();  					var transform = CGAffineTransform.MakeTranslation (-(float)Math.Round (buttonOvalBorderRect.Width)' 0);  					buttonOvalNegativePath.ApplyTransform (transform);  					UIColor.Gray.SetFill ();  					buttonOvalNegativePath.Fill ();  				}  				context.RestoreState ();          //// flareOval Drawing  				var flareOvalPath = UIBezierPath.FromOval (new RectangleF (22' 14' 29' 15));  				context.SaveState ();  				flareOvalPath.AddClip ();  				context.DrawLinearGradient (buttonFlareGradient' new PointF (36.5f' 14)' new PointF (36.5f' 29)' 0);  				context.RestoreState ();      				// ------------- END PAINTCODE -------------  				  				  				  			}
Magic Number,PaintCode,BlueButton,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\BlueButton\BlueButton.cs,Draw,The following statement contains a magic number: using (var colorSpace = CGColorSpace.CreateDeviceRGB ()) {  				  				  				  				// ------------- START PAINTCODE -------------    //// Color Declarations  				UIColor upColorOut = UIColor.FromRGBA (0.79f' 0.79f' 0.79f' 1.00f);  				UIColor bottomColorDown = UIColor.FromRGBA (0.21f' 0.21f' 0.21f' 1.00f);  				UIColor upColorInner = UIColor.FromRGBA (0.17f' 0.18f' 0.20f' 1.00f);  				UIColor bottomColorInner = UIColor.FromRGBA (0.98f' 0.98f' 0.99f' 1.00f);      				UIColor buttonFlareUpColor = UIColor.FromRGBA (  					(buttonColorRGBA[0] * 0.3f + 0.7f)'  					(buttonColorRGBA[1] * 0.3f + 0.7f)'  					(buttonColorRGBA[2] * 0.3f + 0.7f)'  					(buttonColorRGBA[3] * 0.3f + 0.7f)  				);  				UIColor buttonTopColor = UIColor.FromRGBA (  					(buttonColorRGBA[0] * 0.8f)'  					(buttonColorRGBA[1] * 0.8f)'  					(buttonColorRGBA[2] * 0.8f)'  					(buttonColorRGBA[3] * 0.8f + 0.2f)  				);  				UIColor buttonBottomColor = UIColor.FromRGBA (  					(buttonColorRGBA[0] * 0 + 1)'  					(buttonColorRGBA[1] * 0 + 1)'  					(buttonColorRGBA[2] * 0 + 1)'  					(buttonColorRGBA[3] * 0 + 1)  				);  				UIColor buttonFlareBottomColor = UIColor.FromRGBA (  					(buttonColorRGBA[0] * 0.8f + 0.2f)'  					(buttonColorRGBA[1] * 0.8f + 0.2f)'  					(buttonColorRGBA[2] * 0.8f + 0.2f)'  					(buttonColorRGBA[3] * 0.8f + 0.2f)  				);  				UIColor flareWhite = UIColor.FromRGBA (1.00f' 1.00f' 1.00f' 0.83f);    //// Gradient Declarations  				var ringGradientColors = new CGColor [] {upColorOut.CGColor' bottomColorDown.CGColor};  				var ringGradientLocations = new float [] {0' 1};  				var ringGradient = new CGGradient (colorSpace' ringGradientColors' ringGradientLocations);  				var ringInnerGradientColors = new CGColor [] {upColorInner.CGColor' bottomColorInner.CGColor};  				var ringInnerGradientLocations = new float [] {0' 1};  				var ringInnerGradient = new CGGradient (colorSpace' ringInnerGradientColors' ringInnerGradientLocations);  				var buttonGradientColors = new CGColor [] {buttonBottomColor.CGColor' buttonTopColor.CGColor};  				var buttonGradientLocations = new float [] {0' 1};  				var buttonGradient = new CGGradient (colorSpace' buttonGradientColors' buttonGradientLocations);  				var overlayGradientColors = new CGColor [] {flareWhite.CGColor' UIColor.Clear.CGColor};  				var overlayGradientLocations = new float [] {0' 1};  				var overlayGradient = new CGGradient (colorSpace' overlayGradientColors' overlayGradientLocations);  				var buttonFlareGradientColors = new CGColor [] {buttonFlareUpColor.CGColor' buttonFlareBottomColor.CGColor};  				var buttonFlareGradientLocations = new float [] {0' 1};  				var buttonFlareGradient = new CGGradient (colorSpace' buttonFlareGradientColors' buttonFlareGradientLocations);    //// Shadow Declarations  				var buttonInnerShadow = UIColor.Black.CGColor;  				var buttonInnerShadowOffset = new SizeF (0' -0);  				var buttonInnerShadowBlurRadius = 5;  				var buttonOuterShadow = UIColor.Black.CGColor;  				var buttonOuterShadowOffset = new SizeF (0' 2);  				  				  				var buttonOuterShadowBlurRadius = isPressed ? 2 : 5;	// ADDED this code after PaintCode      //// outerOval Drawing  				var outerOvalPath = UIBezierPath.FromOval (new RectangleF (5' 5' 63' 63));  				context.SaveState ();  				context.SetShadowWithColor (buttonOuterShadowOffset' buttonOuterShadowBlurRadius' buttonOuterShadow);  				context.BeginTransparencyLayer (null);  				outerOvalPath.AddClip ();  				context.DrawLinearGradient (ringGradient' new PointF (36.5f' 5)' new PointF (36.5f' 68)' 0);  				context.EndTransparencyLayer ();  				context.RestoreState ();        //// overlayOval Drawing  				var overlayOvalPath = UIBezierPath.FromOval (new RectangleF (5' 5' 63' 63));  				context.SaveState ();  				overlayOvalPath.AddClip ();  				context.DrawRadialGradient (overlayGradient'      new PointF (36.5f' 12.23f)' 17.75f'      new PointF (36.5f' 36.5f)' 44.61f'      CGGradientDrawingOptions.DrawsBeforeStartLocation | CGGradientDrawingOptions.DrawsAfterEndLocation);  				context.RestoreState ();        //// innerOval Drawing  				var innerOvalPath = UIBezierPath.FromOval (new RectangleF (12' 12' 49' 49));  				context.SaveState ();  				innerOvalPath.AddClip ();  				context.DrawLinearGradient (ringInnerGradient' new PointF (36.5f' 12)' new PointF (36.5f' 61)' 0);  				context.RestoreState ();        //// buttonOval Drawing  				var buttonOvalPath = UIBezierPath.FromOval (new RectangleF (14' 13' 46' 46));  				context.SaveState ();  				buttonOvalPath.AddClip ();  				context.DrawRadialGradient (buttonGradient'      new PointF (37' 63.23f)' 2.44f'      new PointF (37' 44.48f)' 23.14f'      CGGradientDrawingOptions.DrawsBeforeStartLocation | CGGradientDrawingOptions.DrawsAfterEndLocation);  				context.RestoreState ();    ////// buttonOval Inner Shadow  				var buttonOvalBorderRect = buttonOvalPath.Bounds;  				buttonOvalBorderRect.Inflate (buttonInnerShadowBlurRadius' buttonInnerShadowBlurRadius);  				buttonOvalBorderRect.Offset (-buttonInnerShadowOffset.Width' -buttonInnerShadowOffset.Height);  				buttonOvalBorderRect = RectangleF.Union (buttonOvalBorderRect' buttonOvalPath.Bounds);  				buttonOvalBorderRect.Inflate (1' 1);    				var buttonOvalNegativePath = UIBezierPath.FromRect (buttonOvalBorderRect);  				buttonOvalNegativePath.AppendPath (buttonOvalPath);  				buttonOvalNegativePath.UsesEvenOddFillRule = true;    				context.SaveState ();  				{  					var xOffset = buttonInnerShadowOffset.Width + (float)Math.Round (buttonOvalBorderRect.Width);  					var yOffset = buttonInnerShadowOffset.Height;  					context.SetShadowWithColor (          new SizeF (xOffset + (xOffset >= 0 ? 0.1f : -0.1f)' yOffset + (yOffset >= 0 ? 0.1f : -0.1f))'          buttonInnerShadowBlurRadius'          buttonInnerShadow);    					buttonOvalPath.AddClip ();  					var transform = CGAffineTransform.MakeTranslation (-(float)Math.Round (buttonOvalBorderRect.Width)' 0);  					buttonOvalNegativePath.ApplyTransform (transform);  					UIColor.Gray.SetFill ();  					buttonOvalNegativePath.Fill ();  				}  				context.RestoreState ();          //// flareOval Drawing  				var flareOvalPath = UIBezierPath.FromOval (new RectangleF (22' 14' 29' 15));  				context.SaveState ();  				flareOvalPath.AddClip ();  				context.DrawLinearGradient (buttonFlareGradient' new PointF (36.5f' 14)' new PointF (36.5f' 29)' 0);  				context.RestoreState ();      				// ------------- END PAINTCODE -------------  				  				  				  			}
Magic Number,PaintCode,BlueButton,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\BlueButton\BlueButton.cs,Draw,The following statement contains a magic number: using (var colorSpace = CGColorSpace.CreateDeviceRGB ()) {  				  				  				  				// ------------- START PAINTCODE -------------    //// Color Declarations  				UIColor upColorOut = UIColor.FromRGBA (0.79f' 0.79f' 0.79f' 1.00f);  				UIColor bottomColorDown = UIColor.FromRGBA (0.21f' 0.21f' 0.21f' 1.00f);  				UIColor upColorInner = UIColor.FromRGBA (0.17f' 0.18f' 0.20f' 1.00f);  				UIColor bottomColorInner = UIColor.FromRGBA (0.98f' 0.98f' 0.99f' 1.00f);      				UIColor buttonFlareUpColor = UIColor.FromRGBA (  					(buttonColorRGBA[0] * 0.3f + 0.7f)'  					(buttonColorRGBA[1] * 0.3f + 0.7f)'  					(buttonColorRGBA[2] * 0.3f + 0.7f)'  					(buttonColorRGBA[3] * 0.3f + 0.7f)  				);  				UIColor buttonTopColor = UIColor.FromRGBA (  					(buttonColorRGBA[0] * 0.8f)'  					(buttonColorRGBA[1] * 0.8f)'  					(buttonColorRGBA[2] * 0.8f)'  					(buttonColorRGBA[3] * 0.8f + 0.2f)  				);  				UIColor buttonBottomColor = UIColor.FromRGBA (  					(buttonColorRGBA[0] * 0 + 1)'  					(buttonColorRGBA[1] * 0 + 1)'  					(buttonColorRGBA[2] * 0 + 1)'  					(buttonColorRGBA[3] * 0 + 1)  				);  				UIColor buttonFlareBottomColor = UIColor.FromRGBA (  					(buttonColorRGBA[0] * 0.8f + 0.2f)'  					(buttonColorRGBA[1] * 0.8f + 0.2f)'  					(buttonColorRGBA[2] * 0.8f + 0.2f)'  					(buttonColorRGBA[3] * 0.8f + 0.2f)  				);  				UIColor flareWhite = UIColor.FromRGBA (1.00f' 1.00f' 1.00f' 0.83f);    //// Gradient Declarations  				var ringGradientColors = new CGColor [] {upColorOut.CGColor' bottomColorDown.CGColor};  				var ringGradientLocations = new float [] {0' 1};  				var ringGradient = new CGGradient (colorSpace' ringGradientColors' ringGradientLocations);  				var ringInnerGradientColors = new CGColor [] {upColorInner.CGColor' bottomColorInner.CGColor};  				var ringInnerGradientLocations = new float [] {0' 1};  				var ringInnerGradient = new CGGradient (colorSpace' ringInnerGradientColors' ringInnerGradientLocations);  				var buttonGradientColors = new CGColor [] {buttonBottomColor.CGColor' buttonTopColor.CGColor};  				var buttonGradientLocations = new float [] {0' 1};  				var buttonGradient = new CGGradient (colorSpace' buttonGradientColors' buttonGradientLocations);  				var overlayGradientColors = new CGColor [] {flareWhite.CGColor' UIColor.Clear.CGColor};  				var overlayGradientLocations = new float [] {0' 1};  				var overlayGradient = new CGGradient (colorSpace' overlayGradientColors' overlayGradientLocations);  				var buttonFlareGradientColors = new CGColor [] {buttonFlareUpColor.CGColor' buttonFlareBottomColor.CGColor};  				var buttonFlareGradientLocations = new float [] {0' 1};  				var buttonFlareGradient = new CGGradient (colorSpace' buttonFlareGradientColors' buttonFlareGradientLocations);    //// Shadow Declarations  				var buttonInnerShadow = UIColor.Black.CGColor;  				var buttonInnerShadowOffset = new SizeF (0' -0);  				var buttonInnerShadowBlurRadius = 5;  				var buttonOuterShadow = UIColor.Black.CGColor;  				var buttonOuterShadowOffset = new SizeF (0' 2);  				  				  				var buttonOuterShadowBlurRadius = isPressed ? 2 : 5;	// ADDED this code after PaintCode      //// outerOval Drawing  				var outerOvalPath = UIBezierPath.FromOval (new RectangleF (5' 5' 63' 63));  				context.SaveState ();  				context.SetShadowWithColor (buttonOuterShadowOffset' buttonOuterShadowBlurRadius' buttonOuterShadow);  				context.BeginTransparencyLayer (null);  				outerOvalPath.AddClip ();  				context.DrawLinearGradient (ringGradient' new PointF (36.5f' 5)' new PointF (36.5f' 68)' 0);  				context.EndTransparencyLayer ();  				context.RestoreState ();        //// overlayOval Drawing  				var overlayOvalPath = UIBezierPath.FromOval (new RectangleF (5' 5' 63' 63));  				context.SaveState ();  				overlayOvalPath.AddClip ();  				context.DrawRadialGradient (overlayGradient'      new PointF (36.5f' 12.23f)' 17.75f'      new PointF (36.5f' 36.5f)' 44.61f'      CGGradientDrawingOptions.DrawsBeforeStartLocation | CGGradientDrawingOptions.DrawsAfterEndLocation);  				context.RestoreState ();        //// innerOval Drawing  				var innerOvalPath = UIBezierPath.FromOval (new RectangleF (12' 12' 49' 49));  				context.SaveState ();  				innerOvalPath.AddClip ();  				context.DrawLinearGradient (ringInnerGradient' new PointF (36.5f' 12)' new PointF (36.5f' 61)' 0);  				context.RestoreState ();        //// buttonOval Drawing  				var buttonOvalPath = UIBezierPath.FromOval (new RectangleF (14' 13' 46' 46));  				context.SaveState ();  				buttonOvalPath.AddClip ();  				context.DrawRadialGradient (buttonGradient'      new PointF (37' 63.23f)' 2.44f'      new PointF (37' 44.48f)' 23.14f'      CGGradientDrawingOptions.DrawsBeforeStartLocation | CGGradientDrawingOptions.DrawsAfterEndLocation);  				context.RestoreState ();    ////// buttonOval Inner Shadow  				var buttonOvalBorderRect = buttonOvalPath.Bounds;  				buttonOvalBorderRect.Inflate (buttonInnerShadowBlurRadius' buttonInnerShadowBlurRadius);  				buttonOvalBorderRect.Offset (-buttonInnerShadowOffset.Width' -buttonInnerShadowOffset.Height);  				buttonOvalBorderRect = RectangleF.Union (buttonOvalBorderRect' buttonOvalPath.Bounds);  				buttonOvalBorderRect.Inflate (1' 1);    				var buttonOvalNegativePath = UIBezierPath.FromRect (buttonOvalBorderRect);  				buttonOvalNegativePath.AppendPath (buttonOvalPath);  				buttonOvalNegativePath.UsesEvenOddFillRule = true;    				context.SaveState ();  				{  					var xOffset = buttonInnerShadowOffset.Width + (float)Math.Round (buttonOvalBorderRect.Width);  					var yOffset = buttonInnerShadowOffset.Height;  					context.SetShadowWithColor (          new SizeF (xOffset + (xOffset >= 0 ? 0.1f : -0.1f)' yOffset + (yOffset >= 0 ? 0.1f : -0.1f))'          buttonInnerShadowBlurRadius'          buttonInnerShadow);    					buttonOvalPath.AddClip ();  					var transform = CGAffineTransform.MakeTranslation (-(float)Math.Round (buttonOvalBorderRect.Width)' 0);  					buttonOvalNegativePath.ApplyTransform (transform);  					UIColor.Gray.SetFill ();  					buttonOvalNegativePath.Fill ();  				}  				context.RestoreState ();          //// flareOval Drawing  				var flareOvalPath = UIBezierPath.FromOval (new RectangleF (22' 14' 29' 15));  				context.SaveState ();  				flareOvalPath.AddClip ();  				context.DrawLinearGradient (buttonFlareGradient' new PointF (36.5f' 14)' new PointF (36.5f' 29)' 0);  				context.RestoreState ();      				// ------------- END PAINTCODE -------------  				  				  				  			}
Magic Number,PaintCode,BlueButton,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\BlueButton\BlueButton.cs,Draw,The following statement contains a magic number: using (var colorSpace = CGColorSpace.CreateDeviceRGB ()) {  				  				  				  				// ------------- START PAINTCODE -------------    //// Color Declarations  				UIColor upColorOut = UIColor.FromRGBA (0.79f' 0.79f' 0.79f' 1.00f);  				UIColor bottomColorDown = UIColor.FromRGBA (0.21f' 0.21f' 0.21f' 1.00f);  				UIColor upColorInner = UIColor.FromRGBA (0.17f' 0.18f' 0.20f' 1.00f);  				UIColor bottomColorInner = UIColor.FromRGBA (0.98f' 0.98f' 0.99f' 1.00f);      				UIColor buttonFlareUpColor = UIColor.FromRGBA (  					(buttonColorRGBA[0] * 0.3f + 0.7f)'  					(buttonColorRGBA[1] * 0.3f + 0.7f)'  					(buttonColorRGBA[2] * 0.3f + 0.7f)'  					(buttonColorRGBA[3] * 0.3f + 0.7f)  				);  				UIColor buttonTopColor = UIColor.FromRGBA (  					(buttonColorRGBA[0] * 0.8f)'  					(buttonColorRGBA[1] * 0.8f)'  					(buttonColorRGBA[2] * 0.8f)'  					(buttonColorRGBA[3] * 0.8f + 0.2f)  				);  				UIColor buttonBottomColor = UIColor.FromRGBA (  					(buttonColorRGBA[0] * 0 + 1)'  					(buttonColorRGBA[1] * 0 + 1)'  					(buttonColorRGBA[2] * 0 + 1)'  					(buttonColorRGBA[3] * 0 + 1)  				);  				UIColor buttonFlareBottomColor = UIColor.FromRGBA (  					(buttonColorRGBA[0] * 0.8f + 0.2f)'  					(buttonColorRGBA[1] * 0.8f + 0.2f)'  					(buttonColorRGBA[2] * 0.8f + 0.2f)'  					(buttonColorRGBA[3] * 0.8f + 0.2f)  				);  				UIColor flareWhite = UIColor.FromRGBA (1.00f' 1.00f' 1.00f' 0.83f);    //// Gradient Declarations  				var ringGradientColors = new CGColor [] {upColorOut.CGColor' bottomColorDown.CGColor};  				var ringGradientLocations = new float [] {0' 1};  				var ringGradient = new CGGradient (colorSpace' ringGradientColors' ringGradientLocations);  				var ringInnerGradientColors = new CGColor [] {upColorInner.CGColor' bottomColorInner.CGColor};  				var ringInnerGradientLocations = new float [] {0' 1};  				var ringInnerGradient = new CGGradient (colorSpace' ringInnerGradientColors' ringInnerGradientLocations);  				var buttonGradientColors = new CGColor [] {buttonBottomColor.CGColor' buttonTopColor.CGColor};  				var buttonGradientLocations = new float [] {0' 1};  				var buttonGradient = new CGGradient (colorSpace' buttonGradientColors' buttonGradientLocations);  				var overlayGradientColors = new CGColor [] {flareWhite.CGColor' UIColor.Clear.CGColor};  				var overlayGradientLocations = new float [] {0' 1};  				var overlayGradient = new CGGradient (colorSpace' overlayGradientColors' overlayGradientLocations);  				var buttonFlareGradientColors = new CGColor [] {buttonFlareUpColor.CGColor' buttonFlareBottomColor.CGColor};  				var buttonFlareGradientLocations = new float [] {0' 1};  				var buttonFlareGradient = new CGGradient (colorSpace' buttonFlareGradientColors' buttonFlareGradientLocations);    //// Shadow Declarations  				var buttonInnerShadow = UIColor.Black.CGColor;  				var buttonInnerShadowOffset = new SizeF (0' -0);  				var buttonInnerShadowBlurRadius = 5;  				var buttonOuterShadow = UIColor.Black.CGColor;  				var buttonOuterShadowOffset = new SizeF (0' 2);  				  				  				var buttonOuterShadowBlurRadius = isPressed ? 2 : 5;	// ADDED this code after PaintCode      //// outerOval Drawing  				var outerOvalPath = UIBezierPath.FromOval (new RectangleF (5' 5' 63' 63));  				context.SaveState ();  				context.SetShadowWithColor (buttonOuterShadowOffset' buttonOuterShadowBlurRadius' buttonOuterShadow);  				context.BeginTransparencyLayer (null);  				outerOvalPath.AddClip ();  				context.DrawLinearGradient (ringGradient' new PointF (36.5f' 5)' new PointF (36.5f' 68)' 0);  				context.EndTransparencyLayer ();  				context.RestoreState ();        //// overlayOval Drawing  				var overlayOvalPath = UIBezierPath.FromOval (new RectangleF (5' 5' 63' 63));  				context.SaveState ();  				overlayOvalPath.AddClip ();  				context.DrawRadialGradient (overlayGradient'      new PointF (36.5f' 12.23f)' 17.75f'      new PointF (36.5f' 36.5f)' 44.61f'      CGGradientDrawingOptions.DrawsBeforeStartLocation | CGGradientDrawingOptions.DrawsAfterEndLocation);  				context.RestoreState ();        //// innerOval Drawing  				var innerOvalPath = UIBezierPath.FromOval (new RectangleF (12' 12' 49' 49));  				context.SaveState ();  				innerOvalPath.AddClip ();  				context.DrawLinearGradient (ringInnerGradient' new PointF (36.5f' 12)' new PointF (36.5f' 61)' 0);  				context.RestoreState ();        //// buttonOval Drawing  				var buttonOvalPath = UIBezierPath.FromOval (new RectangleF (14' 13' 46' 46));  				context.SaveState ();  				buttonOvalPath.AddClip ();  				context.DrawRadialGradient (buttonGradient'      new PointF (37' 63.23f)' 2.44f'      new PointF (37' 44.48f)' 23.14f'      CGGradientDrawingOptions.DrawsBeforeStartLocation | CGGradientDrawingOptions.DrawsAfterEndLocation);  				context.RestoreState ();    ////// buttonOval Inner Shadow  				var buttonOvalBorderRect = buttonOvalPath.Bounds;  				buttonOvalBorderRect.Inflate (buttonInnerShadowBlurRadius' buttonInnerShadowBlurRadius);  				buttonOvalBorderRect.Offset (-buttonInnerShadowOffset.Width' -buttonInnerShadowOffset.Height);  				buttonOvalBorderRect = RectangleF.Union (buttonOvalBorderRect' buttonOvalPath.Bounds);  				buttonOvalBorderRect.Inflate (1' 1);    				var buttonOvalNegativePath = UIBezierPath.FromRect (buttonOvalBorderRect);  				buttonOvalNegativePath.AppendPath (buttonOvalPath);  				buttonOvalNegativePath.UsesEvenOddFillRule = true;    				context.SaveState ();  				{  					var xOffset = buttonInnerShadowOffset.Width + (float)Math.Round (buttonOvalBorderRect.Width);  					var yOffset = buttonInnerShadowOffset.Height;  					context.SetShadowWithColor (          new SizeF (xOffset + (xOffset >= 0 ? 0.1f : -0.1f)' yOffset + (yOffset >= 0 ? 0.1f : -0.1f))'          buttonInnerShadowBlurRadius'          buttonInnerShadow);    					buttonOvalPath.AddClip ();  					var transform = CGAffineTransform.MakeTranslation (-(float)Math.Round (buttonOvalBorderRect.Width)' 0);  					buttonOvalNegativePath.ApplyTransform (transform);  					UIColor.Gray.SetFill ();  					buttonOvalNegativePath.Fill ();  				}  				context.RestoreState ();          //// flareOval Drawing  				var flareOvalPath = UIBezierPath.FromOval (new RectangleF (22' 14' 29' 15));  				context.SaveState ();  				flareOvalPath.AddClip ();  				context.DrawLinearGradient (buttonFlareGradient' new PointF (36.5f' 14)' new PointF (36.5f' 29)' 0);  				context.RestoreState ();      				// ------------- END PAINTCODE -------------  				  				  				  			}
Magic Number,PaintCode,BlueButton,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\BlueButton\BlueButton.cs,Draw,The following statement contains a magic number: using (var colorSpace = CGColorSpace.CreateDeviceRGB ()) {  				  				  				  				// ------------- START PAINTCODE -------------    //// Color Declarations  				UIColor upColorOut = UIColor.FromRGBA (0.79f' 0.79f' 0.79f' 1.00f);  				UIColor bottomColorDown = UIColor.FromRGBA (0.21f' 0.21f' 0.21f' 1.00f);  				UIColor upColorInner = UIColor.FromRGBA (0.17f' 0.18f' 0.20f' 1.00f);  				UIColor bottomColorInner = UIColor.FromRGBA (0.98f' 0.98f' 0.99f' 1.00f);      				UIColor buttonFlareUpColor = UIColor.FromRGBA (  					(buttonColorRGBA[0] * 0.3f + 0.7f)'  					(buttonColorRGBA[1] * 0.3f + 0.7f)'  					(buttonColorRGBA[2] * 0.3f + 0.7f)'  					(buttonColorRGBA[3] * 0.3f + 0.7f)  				);  				UIColor buttonTopColor = UIColor.FromRGBA (  					(buttonColorRGBA[0] * 0.8f)'  					(buttonColorRGBA[1] * 0.8f)'  					(buttonColorRGBA[2] * 0.8f)'  					(buttonColorRGBA[3] * 0.8f + 0.2f)  				);  				UIColor buttonBottomColor = UIColor.FromRGBA (  					(buttonColorRGBA[0] * 0 + 1)'  					(buttonColorRGBA[1] * 0 + 1)'  					(buttonColorRGBA[2] * 0 + 1)'  					(buttonColorRGBA[3] * 0 + 1)  				);  				UIColor buttonFlareBottomColor = UIColor.FromRGBA (  					(buttonColorRGBA[0] * 0.8f + 0.2f)'  					(buttonColorRGBA[1] * 0.8f + 0.2f)'  					(buttonColorRGBA[2] * 0.8f + 0.2f)'  					(buttonColorRGBA[3] * 0.8f + 0.2f)  				);  				UIColor flareWhite = UIColor.FromRGBA (1.00f' 1.00f' 1.00f' 0.83f);    //// Gradient Declarations  				var ringGradientColors = new CGColor [] {upColorOut.CGColor' bottomColorDown.CGColor};  				var ringGradientLocations = new float [] {0' 1};  				var ringGradient = new CGGradient (colorSpace' ringGradientColors' ringGradientLocations);  				var ringInnerGradientColors = new CGColor [] {upColorInner.CGColor' bottomColorInner.CGColor};  				var ringInnerGradientLocations = new float [] {0' 1};  				var ringInnerGradient = new CGGradient (colorSpace' ringInnerGradientColors' ringInnerGradientLocations);  				var buttonGradientColors = new CGColor [] {buttonBottomColor.CGColor' buttonTopColor.CGColor};  				var buttonGradientLocations = new float [] {0' 1};  				var buttonGradient = new CGGradient (colorSpace' buttonGradientColors' buttonGradientLocations);  				var overlayGradientColors = new CGColor [] {flareWhite.CGColor' UIColor.Clear.CGColor};  				var overlayGradientLocations = new float [] {0' 1};  				var overlayGradient = new CGGradient (colorSpace' overlayGradientColors' overlayGradientLocations);  				var buttonFlareGradientColors = new CGColor [] {buttonFlareUpColor.CGColor' buttonFlareBottomColor.CGColor};  				var buttonFlareGradientLocations = new float [] {0' 1};  				var buttonFlareGradient = new CGGradient (colorSpace' buttonFlareGradientColors' buttonFlareGradientLocations);    //// Shadow Declarations  				var buttonInnerShadow = UIColor.Black.CGColor;  				var buttonInnerShadowOffset = new SizeF (0' -0);  				var buttonInnerShadowBlurRadius = 5;  				var buttonOuterShadow = UIColor.Black.CGColor;  				var buttonOuterShadowOffset = new SizeF (0' 2);  				  				  				var buttonOuterShadowBlurRadius = isPressed ? 2 : 5;	// ADDED this code after PaintCode      //// outerOval Drawing  				var outerOvalPath = UIBezierPath.FromOval (new RectangleF (5' 5' 63' 63));  				context.SaveState ();  				context.SetShadowWithColor (buttonOuterShadowOffset' buttonOuterShadowBlurRadius' buttonOuterShadow);  				context.BeginTransparencyLayer (null);  				outerOvalPath.AddClip ();  				context.DrawLinearGradient (ringGradient' new PointF (36.5f' 5)' new PointF (36.5f' 68)' 0);  				context.EndTransparencyLayer ();  				context.RestoreState ();        //// overlayOval Drawing  				var overlayOvalPath = UIBezierPath.FromOval (new RectangleF (5' 5' 63' 63));  				context.SaveState ();  				overlayOvalPath.AddClip ();  				context.DrawRadialGradient (overlayGradient'      new PointF (36.5f' 12.23f)' 17.75f'      new PointF (36.5f' 36.5f)' 44.61f'      CGGradientDrawingOptions.DrawsBeforeStartLocation | CGGradientDrawingOptions.DrawsAfterEndLocation);  				context.RestoreState ();        //// innerOval Drawing  				var innerOvalPath = UIBezierPath.FromOval (new RectangleF (12' 12' 49' 49));  				context.SaveState ();  				innerOvalPath.AddClip ();  				context.DrawLinearGradient (ringInnerGradient' new PointF (36.5f' 12)' new PointF (36.5f' 61)' 0);  				context.RestoreState ();        //// buttonOval Drawing  				var buttonOvalPath = UIBezierPath.FromOval (new RectangleF (14' 13' 46' 46));  				context.SaveState ();  				buttonOvalPath.AddClip ();  				context.DrawRadialGradient (buttonGradient'      new PointF (37' 63.23f)' 2.44f'      new PointF (37' 44.48f)' 23.14f'      CGGradientDrawingOptions.DrawsBeforeStartLocation | CGGradientDrawingOptions.DrawsAfterEndLocation);  				context.RestoreState ();    ////// buttonOval Inner Shadow  				var buttonOvalBorderRect = buttonOvalPath.Bounds;  				buttonOvalBorderRect.Inflate (buttonInnerShadowBlurRadius' buttonInnerShadowBlurRadius);  				buttonOvalBorderRect.Offset (-buttonInnerShadowOffset.Width' -buttonInnerShadowOffset.Height);  				buttonOvalBorderRect = RectangleF.Union (buttonOvalBorderRect' buttonOvalPath.Bounds);  				buttonOvalBorderRect.Inflate (1' 1);    				var buttonOvalNegativePath = UIBezierPath.FromRect (buttonOvalBorderRect);  				buttonOvalNegativePath.AppendPath (buttonOvalPath);  				buttonOvalNegativePath.UsesEvenOddFillRule = true;    				context.SaveState ();  				{  					var xOffset = buttonInnerShadowOffset.Width + (float)Math.Round (buttonOvalBorderRect.Width);  					var yOffset = buttonInnerShadowOffset.Height;  					context.SetShadowWithColor (          new SizeF (xOffset + (xOffset >= 0 ? 0.1f : -0.1f)' yOffset + (yOffset >= 0 ? 0.1f : -0.1f))'          buttonInnerShadowBlurRadius'          buttonInnerShadow);    					buttonOvalPath.AddClip ();  					var transform = CGAffineTransform.MakeTranslation (-(float)Math.Round (buttonOvalBorderRect.Width)' 0);  					buttonOvalNegativePath.ApplyTransform (transform);  					UIColor.Gray.SetFill ();  					buttonOvalNegativePath.Fill ();  				}  				context.RestoreState ();          //// flareOval Drawing  				var flareOvalPath = UIBezierPath.FromOval (new RectangleF (22' 14' 29' 15));  				context.SaveState ();  				flareOvalPath.AddClip ();  				context.DrawLinearGradient (buttonFlareGradient' new PointF (36.5f' 14)' new PointF (36.5f' 29)' 0);  				context.RestoreState ();      				// ------------- END PAINTCODE -------------  				  				  				  			}
Magic Number,PaintCode,BlueButton,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\BlueButton\BlueButton.cs,Draw,The following statement contains a magic number: using (var colorSpace = CGColorSpace.CreateDeviceRGB ()) {  				  				  				  				// ------------- START PAINTCODE -------------    //// Color Declarations  				UIColor upColorOut = UIColor.FromRGBA (0.79f' 0.79f' 0.79f' 1.00f);  				UIColor bottomColorDown = UIColor.FromRGBA (0.21f' 0.21f' 0.21f' 1.00f);  				UIColor upColorInner = UIColor.FromRGBA (0.17f' 0.18f' 0.20f' 1.00f);  				UIColor bottomColorInner = UIColor.FromRGBA (0.98f' 0.98f' 0.99f' 1.00f);      				UIColor buttonFlareUpColor = UIColor.FromRGBA (  					(buttonColorRGBA[0] * 0.3f + 0.7f)'  					(buttonColorRGBA[1] * 0.3f + 0.7f)'  					(buttonColorRGBA[2] * 0.3f + 0.7f)'  					(buttonColorRGBA[3] * 0.3f + 0.7f)  				);  				UIColor buttonTopColor = UIColor.FromRGBA (  					(buttonColorRGBA[0] * 0.8f)'  					(buttonColorRGBA[1] * 0.8f)'  					(buttonColorRGBA[2] * 0.8f)'  					(buttonColorRGBA[3] * 0.8f + 0.2f)  				);  				UIColor buttonBottomColor = UIColor.FromRGBA (  					(buttonColorRGBA[0] * 0 + 1)'  					(buttonColorRGBA[1] * 0 + 1)'  					(buttonColorRGBA[2] * 0 + 1)'  					(buttonColorRGBA[3] * 0 + 1)  				);  				UIColor buttonFlareBottomColor = UIColor.FromRGBA (  					(buttonColorRGBA[0] * 0.8f + 0.2f)'  					(buttonColorRGBA[1] * 0.8f + 0.2f)'  					(buttonColorRGBA[2] * 0.8f + 0.2f)'  					(buttonColorRGBA[3] * 0.8f + 0.2f)  				);  				UIColor flareWhite = UIColor.FromRGBA (1.00f' 1.00f' 1.00f' 0.83f);    //// Gradient Declarations  				var ringGradientColors = new CGColor [] {upColorOut.CGColor' bottomColorDown.CGColor};  				var ringGradientLocations = new float [] {0' 1};  				var ringGradient = new CGGradient (colorSpace' ringGradientColors' ringGradientLocations);  				var ringInnerGradientColors = new CGColor [] {upColorInner.CGColor' bottomColorInner.CGColor};  				var ringInnerGradientLocations = new float [] {0' 1};  				var ringInnerGradient = new CGGradient (colorSpace' ringInnerGradientColors' ringInnerGradientLocations);  				var buttonGradientColors = new CGColor [] {buttonBottomColor.CGColor' buttonTopColor.CGColor};  				var buttonGradientLocations = new float [] {0' 1};  				var buttonGradient = new CGGradient (colorSpace' buttonGradientColors' buttonGradientLocations);  				var overlayGradientColors = new CGColor [] {flareWhite.CGColor' UIColor.Clear.CGColor};  				var overlayGradientLocations = new float [] {0' 1};  				var overlayGradient = new CGGradient (colorSpace' overlayGradientColors' overlayGradientLocations);  				var buttonFlareGradientColors = new CGColor [] {buttonFlareUpColor.CGColor' buttonFlareBottomColor.CGColor};  				var buttonFlareGradientLocations = new float [] {0' 1};  				var buttonFlareGradient = new CGGradient (colorSpace' buttonFlareGradientColors' buttonFlareGradientLocations);    //// Shadow Declarations  				var buttonInnerShadow = UIColor.Black.CGColor;  				var buttonInnerShadowOffset = new SizeF (0' -0);  				var buttonInnerShadowBlurRadius = 5;  				var buttonOuterShadow = UIColor.Black.CGColor;  				var buttonOuterShadowOffset = new SizeF (0' 2);  				  				  				var buttonOuterShadowBlurRadius = isPressed ? 2 : 5;	// ADDED this code after PaintCode      //// outerOval Drawing  				var outerOvalPath = UIBezierPath.FromOval (new RectangleF (5' 5' 63' 63));  				context.SaveState ();  				context.SetShadowWithColor (buttonOuterShadowOffset' buttonOuterShadowBlurRadius' buttonOuterShadow);  				context.BeginTransparencyLayer (null);  				outerOvalPath.AddClip ();  				context.DrawLinearGradient (ringGradient' new PointF (36.5f' 5)' new PointF (36.5f' 68)' 0);  				context.EndTransparencyLayer ();  				context.RestoreState ();        //// overlayOval Drawing  				var overlayOvalPath = UIBezierPath.FromOval (new RectangleF (5' 5' 63' 63));  				context.SaveState ();  				overlayOvalPath.AddClip ();  				context.DrawRadialGradient (overlayGradient'      new PointF (36.5f' 12.23f)' 17.75f'      new PointF (36.5f' 36.5f)' 44.61f'      CGGradientDrawingOptions.DrawsBeforeStartLocation | CGGradientDrawingOptions.DrawsAfterEndLocation);  				context.RestoreState ();        //// innerOval Drawing  				var innerOvalPath = UIBezierPath.FromOval (new RectangleF (12' 12' 49' 49));  				context.SaveState ();  				innerOvalPath.AddClip ();  				context.DrawLinearGradient (ringInnerGradient' new PointF (36.5f' 12)' new PointF (36.5f' 61)' 0);  				context.RestoreState ();        //// buttonOval Drawing  				var buttonOvalPath = UIBezierPath.FromOval (new RectangleF (14' 13' 46' 46));  				context.SaveState ();  				buttonOvalPath.AddClip ();  				context.DrawRadialGradient (buttonGradient'      new PointF (37' 63.23f)' 2.44f'      new PointF (37' 44.48f)' 23.14f'      CGGradientDrawingOptions.DrawsBeforeStartLocation | CGGradientDrawingOptions.DrawsAfterEndLocation);  				context.RestoreState ();    ////// buttonOval Inner Shadow  				var buttonOvalBorderRect = buttonOvalPath.Bounds;  				buttonOvalBorderRect.Inflate (buttonInnerShadowBlurRadius' buttonInnerShadowBlurRadius);  				buttonOvalBorderRect.Offset (-buttonInnerShadowOffset.Width' -buttonInnerShadowOffset.Height);  				buttonOvalBorderRect = RectangleF.Union (buttonOvalBorderRect' buttonOvalPath.Bounds);  				buttonOvalBorderRect.Inflate (1' 1);    				var buttonOvalNegativePath = UIBezierPath.FromRect (buttonOvalBorderRect);  				buttonOvalNegativePath.AppendPath (buttonOvalPath);  				buttonOvalNegativePath.UsesEvenOddFillRule = true;    				context.SaveState ();  				{  					var xOffset = buttonInnerShadowOffset.Width + (float)Math.Round (buttonOvalBorderRect.Width);  					var yOffset = buttonInnerShadowOffset.Height;  					context.SetShadowWithColor (          new SizeF (xOffset + (xOffset >= 0 ? 0.1f : -0.1f)' yOffset + (yOffset >= 0 ? 0.1f : -0.1f))'          buttonInnerShadowBlurRadius'          buttonInnerShadow);    					buttonOvalPath.AddClip ();  					var transform = CGAffineTransform.MakeTranslation (-(float)Math.Round (buttonOvalBorderRect.Width)' 0);  					buttonOvalNegativePath.ApplyTransform (transform);  					UIColor.Gray.SetFill ();  					buttonOvalNegativePath.Fill ();  				}  				context.RestoreState ();          //// flareOval Drawing  				var flareOvalPath = UIBezierPath.FromOval (new RectangleF (22' 14' 29' 15));  				context.SaveState ();  				flareOvalPath.AddClip ();  				context.DrawLinearGradient (buttonFlareGradient' new PointF (36.5f' 14)' new PointF (36.5f' 29)' 0);  				context.RestoreState ();      				// ------------- END PAINTCODE -------------  				  				  				  			}
Magic Number,PaintCode,BlueButton,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\BlueButton\BlueButton.cs,Draw,The following statement contains a magic number: using (var colorSpace = CGColorSpace.CreateDeviceRGB ()) {  				  				  				  				// ------------- START PAINTCODE -------------    //// Color Declarations  				UIColor upColorOut = UIColor.FromRGBA (0.79f' 0.79f' 0.79f' 1.00f);  				UIColor bottomColorDown = UIColor.FromRGBA (0.21f' 0.21f' 0.21f' 1.00f);  				UIColor upColorInner = UIColor.FromRGBA (0.17f' 0.18f' 0.20f' 1.00f);  				UIColor bottomColorInner = UIColor.FromRGBA (0.98f' 0.98f' 0.99f' 1.00f);      				UIColor buttonFlareUpColor = UIColor.FromRGBA (  					(buttonColorRGBA[0] * 0.3f + 0.7f)'  					(buttonColorRGBA[1] * 0.3f + 0.7f)'  					(buttonColorRGBA[2] * 0.3f + 0.7f)'  					(buttonColorRGBA[3] * 0.3f + 0.7f)  				);  				UIColor buttonTopColor = UIColor.FromRGBA (  					(buttonColorRGBA[0] * 0.8f)'  					(buttonColorRGBA[1] * 0.8f)'  					(buttonColorRGBA[2] * 0.8f)'  					(buttonColorRGBA[3] * 0.8f + 0.2f)  				);  				UIColor buttonBottomColor = UIColor.FromRGBA (  					(buttonColorRGBA[0] * 0 + 1)'  					(buttonColorRGBA[1] * 0 + 1)'  					(buttonColorRGBA[2] * 0 + 1)'  					(buttonColorRGBA[3] * 0 + 1)  				);  				UIColor buttonFlareBottomColor = UIColor.FromRGBA (  					(buttonColorRGBA[0] * 0.8f + 0.2f)'  					(buttonColorRGBA[1] * 0.8f + 0.2f)'  					(buttonColorRGBA[2] * 0.8f + 0.2f)'  					(buttonColorRGBA[3] * 0.8f + 0.2f)  				);  				UIColor flareWhite = UIColor.FromRGBA (1.00f' 1.00f' 1.00f' 0.83f);    //// Gradient Declarations  				var ringGradientColors = new CGColor [] {upColorOut.CGColor' bottomColorDown.CGColor};  				var ringGradientLocations = new float [] {0' 1};  				var ringGradient = new CGGradient (colorSpace' ringGradientColors' ringGradientLocations);  				var ringInnerGradientColors = new CGColor [] {upColorInner.CGColor' bottomColorInner.CGColor};  				var ringInnerGradientLocations = new float [] {0' 1};  				var ringInnerGradient = new CGGradient (colorSpace' ringInnerGradientColors' ringInnerGradientLocations);  				var buttonGradientColors = new CGColor [] {buttonBottomColor.CGColor' buttonTopColor.CGColor};  				var buttonGradientLocations = new float [] {0' 1};  				var buttonGradient = new CGGradient (colorSpace' buttonGradientColors' buttonGradientLocations);  				var overlayGradientColors = new CGColor [] {flareWhite.CGColor' UIColor.Clear.CGColor};  				var overlayGradientLocations = new float [] {0' 1};  				var overlayGradient = new CGGradient (colorSpace' overlayGradientColors' overlayGradientLocations);  				var buttonFlareGradientColors = new CGColor [] {buttonFlareUpColor.CGColor' buttonFlareBottomColor.CGColor};  				var buttonFlareGradientLocations = new float [] {0' 1};  				var buttonFlareGradient = new CGGradient (colorSpace' buttonFlareGradientColors' buttonFlareGradientLocations);    //// Shadow Declarations  				var buttonInnerShadow = UIColor.Black.CGColor;  				var buttonInnerShadowOffset = new SizeF (0' -0);  				var buttonInnerShadowBlurRadius = 5;  				var buttonOuterShadow = UIColor.Black.CGColor;  				var buttonOuterShadowOffset = new SizeF (0' 2);  				  				  				var buttonOuterShadowBlurRadius = isPressed ? 2 : 5;	// ADDED this code after PaintCode      //// outerOval Drawing  				var outerOvalPath = UIBezierPath.FromOval (new RectangleF (5' 5' 63' 63));  				context.SaveState ();  				context.SetShadowWithColor (buttonOuterShadowOffset' buttonOuterShadowBlurRadius' buttonOuterShadow);  				context.BeginTransparencyLayer (null);  				outerOvalPath.AddClip ();  				context.DrawLinearGradient (ringGradient' new PointF (36.5f' 5)' new PointF (36.5f' 68)' 0);  				context.EndTransparencyLayer ();  				context.RestoreState ();        //// overlayOval Drawing  				var overlayOvalPath = UIBezierPath.FromOval (new RectangleF (5' 5' 63' 63));  				context.SaveState ();  				overlayOvalPath.AddClip ();  				context.DrawRadialGradient (overlayGradient'      new PointF (36.5f' 12.23f)' 17.75f'      new PointF (36.5f' 36.5f)' 44.61f'      CGGradientDrawingOptions.DrawsBeforeStartLocation | CGGradientDrawingOptions.DrawsAfterEndLocation);  				context.RestoreState ();        //// innerOval Drawing  				var innerOvalPath = UIBezierPath.FromOval (new RectangleF (12' 12' 49' 49));  				context.SaveState ();  				innerOvalPath.AddClip ();  				context.DrawLinearGradient (ringInnerGradient' new PointF (36.5f' 12)' new PointF (36.5f' 61)' 0);  				context.RestoreState ();        //// buttonOval Drawing  				var buttonOvalPath = UIBezierPath.FromOval (new RectangleF (14' 13' 46' 46));  				context.SaveState ();  				buttonOvalPath.AddClip ();  				context.DrawRadialGradient (buttonGradient'      new PointF (37' 63.23f)' 2.44f'      new PointF (37' 44.48f)' 23.14f'      CGGradientDrawingOptions.DrawsBeforeStartLocation | CGGradientDrawingOptions.DrawsAfterEndLocation);  				context.RestoreState ();    ////// buttonOval Inner Shadow  				var buttonOvalBorderRect = buttonOvalPath.Bounds;  				buttonOvalBorderRect.Inflate (buttonInnerShadowBlurRadius' buttonInnerShadowBlurRadius);  				buttonOvalBorderRect.Offset (-buttonInnerShadowOffset.Width' -buttonInnerShadowOffset.Height);  				buttonOvalBorderRect = RectangleF.Union (buttonOvalBorderRect' buttonOvalPath.Bounds);  				buttonOvalBorderRect.Inflate (1' 1);    				var buttonOvalNegativePath = UIBezierPath.FromRect (buttonOvalBorderRect);  				buttonOvalNegativePath.AppendPath (buttonOvalPath);  				buttonOvalNegativePath.UsesEvenOddFillRule = true;    				context.SaveState ();  				{  					var xOffset = buttonInnerShadowOffset.Width + (float)Math.Round (buttonOvalBorderRect.Width);  					var yOffset = buttonInnerShadowOffset.Height;  					context.SetShadowWithColor (          new SizeF (xOffset + (xOffset >= 0 ? 0.1f : -0.1f)' yOffset + (yOffset >= 0 ? 0.1f : -0.1f))'          buttonInnerShadowBlurRadius'          buttonInnerShadow);    					buttonOvalPath.AddClip ();  					var transform = CGAffineTransform.MakeTranslation (-(float)Math.Round (buttonOvalBorderRect.Width)' 0);  					buttonOvalNegativePath.ApplyTransform (transform);  					UIColor.Gray.SetFill ();  					buttonOvalNegativePath.Fill ();  				}  				context.RestoreState ();          //// flareOval Drawing  				var flareOvalPath = UIBezierPath.FromOval (new RectangleF (22' 14' 29' 15));  				context.SaveState ();  				flareOvalPath.AddClip ();  				context.DrawLinearGradient (buttonFlareGradient' new PointF (36.5f' 14)' new PointF (36.5f' 29)' 0);  				context.RestoreState ();      				// ------------- END PAINTCODE -------------  				  				  				  			}
Magic Number,PaintCode,BlueButton,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\BlueButton\BlueButton.cs,Draw,The following statement contains a magic number: using (var colorSpace = CGColorSpace.CreateDeviceRGB ()) {  				  				  				  				// ------------- START PAINTCODE -------------    //// Color Declarations  				UIColor upColorOut = UIColor.FromRGBA (0.79f' 0.79f' 0.79f' 1.00f);  				UIColor bottomColorDown = UIColor.FromRGBA (0.21f' 0.21f' 0.21f' 1.00f);  				UIColor upColorInner = UIColor.FromRGBA (0.17f' 0.18f' 0.20f' 1.00f);  				UIColor bottomColorInner = UIColor.FromRGBA (0.98f' 0.98f' 0.99f' 1.00f);      				UIColor buttonFlareUpColor = UIColor.FromRGBA (  					(buttonColorRGBA[0] * 0.3f + 0.7f)'  					(buttonColorRGBA[1] * 0.3f + 0.7f)'  					(buttonColorRGBA[2] * 0.3f + 0.7f)'  					(buttonColorRGBA[3] * 0.3f + 0.7f)  				);  				UIColor buttonTopColor = UIColor.FromRGBA (  					(buttonColorRGBA[0] * 0.8f)'  					(buttonColorRGBA[1] * 0.8f)'  					(buttonColorRGBA[2] * 0.8f)'  					(buttonColorRGBA[3] * 0.8f + 0.2f)  				);  				UIColor buttonBottomColor = UIColor.FromRGBA (  					(buttonColorRGBA[0] * 0 + 1)'  					(buttonColorRGBA[1] * 0 + 1)'  					(buttonColorRGBA[2] * 0 + 1)'  					(buttonColorRGBA[3] * 0 + 1)  				);  				UIColor buttonFlareBottomColor = UIColor.FromRGBA (  					(buttonColorRGBA[0] * 0.8f + 0.2f)'  					(buttonColorRGBA[1] * 0.8f + 0.2f)'  					(buttonColorRGBA[2] * 0.8f + 0.2f)'  					(buttonColorRGBA[3] * 0.8f + 0.2f)  				);  				UIColor flareWhite = UIColor.FromRGBA (1.00f' 1.00f' 1.00f' 0.83f);    //// Gradient Declarations  				var ringGradientColors = new CGColor [] {upColorOut.CGColor' bottomColorDown.CGColor};  				var ringGradientLocations = new float [] {0' 1};  				var ringGradient = new CGGradient (colorSpace' ringGradientColors' ringGradientLocations);  				var ringInnerGradientColors = new CGColor [] {upColorInner.CGColor' bottomColorInner.CGColor};  				var ringInnerGradientLocations = new float [] {0' 1};  				var ringInnerGradient = new CGGradient (colorSpace' ringInnerGradientColors' ringInnerGradientLocations);  				var buttonGradientColors = new CGColor [] {buttonBottomColor.CGColor' buttonTopColor.CGColor};  				var buttonGradientLocations = new float [] {0' 1};  				var buttonGradient = new CGGradient (colorSpace' buttonGradientColors' buttonGradientLocations);  				var overlayGradientColors = new CGColor [] {flareWhite.CGColor' UIColor.Clear.CGColor};  				var overlayGradientLocations = new float [] {0' 1};  				var overlayGradient = new CGGradient (colorSpace' overlayGradientColors' overlayGradientLocations);  				var buttonFlareGradientColors = new CGColor [] {buttonFlareUpColor.CGColor' buttonFlareBottomColor.CGColor};  				var buttonFlareGradientLocations = new float [] {0' 1};  				var buttonFlareGradient = new CGGradient (colorSpace' buttonFlareGradientColors' buttonFlareGradientLocations);    //// Shadow Declarations  				var buttonInnerShadow = UIColor.Black.CGColor;  				var buttonInnerShadowOffset = new SizeF (0' -0);  				var buttonInnerShadowBlurRadius = 5;  				var buttonOuterShadow = UIColor.Black.CGColor;  				var buttonOuterShadowOffset = new SizeF (0' 2);  				  				  				var buttonOuterShadowBlurRadius = isPressed ? 2 : 5;	// ADDED this code after PaintCode      //// outerOval Drawing  				var outerOvalPath = UIBezierPath.FromOval (new RectangleF (5' 5' 63' 63));  				context.SaveState ();  				context.SetShadowWithColor (buttonOuterShadowOffset' buttonOuterShadowBlurRadius' buttonOuterShadow);  				context.BeginTransparencyLayer (null);  				outerOvalPath.AddClip ();  				context.DrawLinearGradient (ringGradient' new PointF (36.5f' 5)' new PointF (36.5f' 68)' 0);  				context.EndTransparencyLayer ();  				context.RestoreState ();        //// overlayOval Drawing  				var overlayOvalPath = UIBezierPath.FromOval (new RectangleF (5' 5' 63' 63));  				context.SaveState ();  				overlayOvalPath.AddClip ();  				context.DrawRadialGradient (overlayGradient'      new PointF (36.5f' 12.23f)' 17.75f'      new PointF (36.5f' 36.5f)' 44.61f'      CGGradientDrawingOptions.DrawsBeforeStartLocation | CGGradientDrawingOptions.DrawsAfterEndLocation);  				context.RestoreState ();        //// innerOval Drawing  				var innerOvalPath = UIBezierPath.FromOval (new RectangleF (12' 12' 49' 49));  				context.SaveState ();  				innerOvalPath.AddClip ();  				context.DrawLinearGradient (ringInnerGradient' new PointF (36.5f' 12)' new PointF (36.5f' 61)' 0);  				context.RestoreState ();        //// buttonOval Drawing  				var buttonOvalPath = UIBezierPath.FromOval (new RectangleF (14' 13' 46' 46));  				context.SaveState ();  				buttonOvalPath.AddClip ();  				context.DrawRadialGradient (buttonGradient'      new PointF (37' 63.23f)' 2.44f'      new PointF (37' 44.48f)' 23.14f'      CGGradientDrawingOptions.DrawsBeforeStartLocation | CGGradientDrawingOptions.DrawsAfterEndLocation);  				context.RestoreState ();    ////// buttonOval Inner Shadow  				var buttonOvalBorderRect = buttonOvalPath.Bounds;  				buttonOvalBorderRect.Inflate (buttonInnerShadowBlurRadius' buttonInnerShadowBlurRadius);  				buttonOvalBorderRect.Offset (-buttonInnerShadowOffset.Width' -buttonInnerShadowOffset.Height);  				buttonOvalBorderRect = RectangleF.Union (buttonOvalBorderRect' buttonOvalPath.Bounds);  				buttonOvalBorderRect.Inflate (1' 1);    				var buttonOvalNegativePath = UIBezierPath.FromRect (buttonOvalBorderRect);  				buttonOvalNegativePath.AppendPath (buttonOvalPath);  				buttonOvalNegativePath.UsesEvenOddFillRule = true;    				context.SaveState ();  				{  					var xOffset = buttonInnerShadowOffset.Width + (float)Math.Round (buttonOvalBorderRect.Width);  					var yOffset = buttonInnerShadowOffset.Height;  					context.SetShadowWithColor (          new SizeF (xOffset + (xOffset >= 0 ? 0.1f : -0.1f)' yOffset + (yOffset >= 0 ? 0.1f : -0.1f))'          buttonInnerShadowBlurRadius'          buttonInnerShadow);    					buttonOvalPath.AddClip ();  					var transform = CGAffineTransform.MakeTranslation (-(float)Math.Round (buttonOvalBorderRect.Width)' 0);  					buttonOvalNegativePath.ApplyTransform (transform);  					UIColor.Gray.SetFill ();  					buttonOvalNegativePath.Fill ();  				}  				context.RestoreState ();          //// flareOval Drawing  				var flareOvalPath = UIBezierPath.FromOval (new RectangleF (22' 14' 29' 15));  				context.SaveState ();  				flareOvalPath.AddClip ();  				context.DrawLinearGradient (buttonFlareGradient' new PointF (36.5f' 14)' new PointF (36.5f' 29)' 0);  				context.RestoreState ();      				// ------------- END PAINTCODE -------------  				  				  				  			}
Magic Number,PaintCode,BlueButton,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\BlueButton\BlueButton.cs,Draw,The following statement contains a magic number: using (var colorSpace = CGColorSpace.CreateDeviceRGB ()) {  				  				  				  				// ------------- START PAINTCODE -------------    //// Color Declarations  				UIColor upColorOut = UIColor.FromRGBA (0.79f' 0.79f' 0.79f' 1.00f);  				UIColor bottomColorDown = UIColor.FromRGBA (0.21f' 0.21f' 0.21f' 1.00f);  				UIColor upColorInner = UIColor.FromRGBA (0.17f' 0.18f' 0.20f' 1.00f);  				UIColor bottomColorInner = UIColor.FromRGBA (0.98f' 0.98f' 0.99f' 1.00f);      				UIColor buttonFlareUpColor = UIColor.FromRGBA (  					(buttonColorRGBA[0] * 0.3f + 0.7f)'  					(buttonColorRGBA[1] * 0.3f + 0.7f)'  					(buttonColorRGBA[2] * 0.3f + 0.7f)'  					(buttonColorRGBA[3] * 0.3f + 0.7f)  				);  				UIColor buttonTopColor = UIColor.FromRGBA (  					(buttonColorRGBA[0] * 0.8f)'  					(buttonColorRGBA[1] * 0.8f)'  					(buttonColorRGBA[2] * 0.8f)'  					(buttonColorRGBA[3] * 0.8f + 0.2f)  				);  				UIColor buttonBottomColor = UIColor.FromRGBA (  					(buttonColorRGBA[0] * 0 + 1)'  					(buttonColorRGBA[1] * 0 + 1)'  					(buttonColorRGBA[2] * 0 + 1)'  					(buttonColorRGBA[3] * 0 + 1)  				);  				UIColor buttonFlareBottomColor = UIColor.FromRGBA (  					(buttonColorRGBA[0] * 0.8f + 0.2f)'  					(buttonColorRGBA[1] * 0.8f + 0.2f)'  					(buttonColorRGBA[2] * 0.8f + 0.2f)'  					(buttonColorRGBA[3] * 0.8f + 0.2f)  				);  				UIColor flareWhite = UIColor.FromRGBA (1.00f' 1.00f' 1.00f' 0.83f);    //// Gradient Declarations  				var ringGradientColors = new CGColor [] {upColorOut.CGColor' bottomColorDown.CGColor};  				var ringGradientLocations = new float [] {0' 1};  				var ringGradient = new CGGradient (colorSpace' ringGradientColors' ringGradientLocations);  				var ringInnerGradientColors = new CGColor [] {upColorInner.CGColor' bottomColorInner.CGColor};  				var ringInnerGradientLocations = new float [] {0' 1};  				var ringInnerGradient = new CGGradient (colorSpace' ringInnerGradientColors' ringInnerGradientLocations);  				var buttonGradientColors = new CGColor [] {buttonBottomColor.CGColor' buttonTopColor.CGColor};  				var buttonGradientLocations = new float [] {0' 1};  				var buttonGradient = new CGGradient (colorSpace' buttonGradientColors' buttonGradientLocations);  				var overlayGradientColors = new CGColor [] {flareWhite.CGColor' UIColor.Clear.CGColor};  				var overlayGradientLocations = new float [] {0' 1};  				var overlayGradient = new CGGradient (colorSpace' overlayGradientColors' overlayGradientLocations);  				var buttonFlareGradientColors = new CGColor [] {buttonFlareUpColor.CGColor' buttonFlareBottomColor.CGColor};  				var buttonFlareGradientLocations = new float [] {0' 1};  				var buttonFlareGradient = new CGGradient (colorSpace' buttonFlareGradientColors' buttonFlareGradientLocations);    //// Shadow Declarations  				var buttonInnerShadow = UIColor.Black.CGColor;  				var buttonInnerShadowOffset = new SizeF (0' -0);  				var buttonInnerShadowBlurRadius = 5;  				var buttonOuterShadow = UIColor.Black.CGColor;  				var buttonOuterShadowOffset = new SizeF (0' 2);  				  				  				var buttonOuterShadowBlurRadius = isPressed ? 2 : 5;	// ADDED this code after PaintCode      //// outerOval Drawing  				var outerOvalPath = UIBezierPath.FromOval (new RectangleF (5' 5' 63' 63));  				context.SaveState ();  				context.SetShadowWithColor (buttonOuterShadowOffset' buttonOuterShadowBlurRadius' buttonOuterShadow);  				context.BeginTransparencyLayer (null);  				outerOvalPath.AddClip ();  				context.DrawLinearGradient (ringGradient' new PointF (36.5f' 5)' new PointF (36.5f' 68)' 0);  				context.EndTransparencyLayer ();  				context.RestoreState ();        //// overlayOval Drawing  				var overlayOvalPath = UIBezierPath.FromOval (new RectangleF (5' 5' 63' 63));  				context.SaveState ();  				overlayOvalPath.AddClip ();  				context.DrawRadialGradient (overlayGradient'      new PointF (36.5f' 12.23f)' 17.75f'      new PointF (36.5f' 36.5f)' 44.61f'      CGGradientDrawingOptions.DrawsBeforeStartLocation | CGGradientDrawingOptions.DrawsAfterEndLocation);  				context.RestoreState ();        //// innerOval Drawing  				var innerOvalPath = UIBezierPath.FromOval (new RectangleF (12' 12' 49' 49));  				context.SaveState ();  				innerOvalPath.AddClip ();  				context.DrawLinearGradient (ringInnerGradient' new PointF (36.5f' 12)' new PointF (36.5f' 61)' 0);  				context.RestoreState ();        //// buttonOval Drawing  				var buttonOvalPath = UIBezierPath.FromOval (new RectangleF (14' 13' 46' 46));  				context.SaveState ();  				buttonOvalPath.AddClip ();  				context.DrawRadialGradient (buttonGradient'      new PointF (37' 63.23f)' 2.44f'      new PointF (37' 44.48f)' 23.14f'      CGGradientDrawingOptions.DrawsBeforeStartLocation | CGGradientDrawingOptions.DrawsAfterEndLocation);  				context.RestoreState ();    ////// buttonOval Inner Shadow  				var buttonOvalBorderRect = buttonOvalPath.Bounds;  				buttonOvalBorderRect.Inflate (buttonInnerShadowBlurRadius' buttonInnerShadowBlurRadius);  				buttonOvalBorderRect.Offset (-buttonInnerShadowOffset.Width' -buttonInnerShadowOffset.Height);  				buttonOvalBorderRect = RectangleF.Union (buttonOvalBorderRect' buttonOvalPath.Bounds);  				buttonOvalBorderRect.Inflate (1' 1);    				var buttonOvalNegativePath = UIBezierPath.FromRect (buttonOvalBorderRect);  				buttonOvalNegativePath.AppendPath (buttonOvalPath);  				buttonOvalNegativePath.UsesEvenOddFillRule = true;    				context.SaveState ();  				{  					var xOffset = buttonInnerShadowOffset.Width + (float)Math.Round (buttonOvalBorderRect.Width);  					var yOffset = buttonInnerShadowOffset.Height;  					context.SetShadowWithColor (          new SizeF (xOffset + (xOffset >= 0 ? 0.1f : -0.1f)' yOffset + (yOffset >= 0 ? 0.1f : -0.1f))'          buttonInnerShadowBlurRadius'          buttonInnerShadow);    					buttonOvalPath.AddClip ();  					var transform = CGAffineTransform.MakeTranslation (-(float)Math.Round (buttonOvalBorderRect.Width)' 0);  					buttonOvalNegativePath.ApplyTransform (transform);  					UIColor.Gray.SetFill ();  					buttonOvalNegativePath.Fill ();  				}  				context.RestoreState ();          //// flareOval Drawing  				var flareOvalPath = UIBezierPath.FromOval (new RectangleF (22' 14' 29' 15));  				context.SaveState ();  				flareOvalPath.AddClip ();  				context.DrawLinearGradient (buttonFlareGradient' new PointF (36.5f' 14)' new PointF (36.5f' 29)' 0);  				context.RestoreState ();      				// ------------- END PAINTCODE -------------  				  				  				  			}
Magic Number,PaintCode,BlueButton,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\BlueButton\BlueButton.cs,Draw,The following statement contains a magic number: using (var colorSpace = CGColorSpace.CreateDeviceRGB ()) {  				  				  				  				// ------------- START PAINTCODE -------------    //// Color Declarations  				UIColor upColorOut = UIColor.FromRGBA (0.79f' 0.79f' 0.79f' 1.00f);  				UIColor bottomColorDown = UIColor.FromRGBA (0.21f' 0.21f' 0.21f' 1.00f);  				UIColor upColorInner = UIColor.FromRGBA (0.17f' 0.18f' 0.20f' 1.00f);  				UIColor bottomColorInner = UIColor.FromRGBA (0.98f' 0.98f' 0.99f' 1.00f);      				UIColor buttonFlareUpColor = UIColor.FromRGBA (  					(buttonColorRGBA[0] * 0.3f + 0.7f)'  					(buttonColorRGBA[1] * 0.3f + 0.7f)'  					(buttonColorRGBA[2] * 0.3f + 0.7f)'  					(buttonColorRGBA[3] * 0.3f + 0.7f)  				);  				UIColor buttonTopColor = UIColor.FromRGBA (  					(buttonColorRGBA[0] * 0.8f)'  					(buttonColorRGBA[1] * 0.8f)'  					(buttonColorRGBA[2] * 0.8f)'  					(buttonColorRGBA[3] * 0.8f + 0.2f)  				);  				UIColor buttonBottomColor = UIColor.FromRGBA (  					(buttonColorRGBA[0] * 0 + 1)'  					(buttonColorRGBA[1] * 0 + 1)'  					(buttonColorRGBA[2] * 0 + 1)'  					(buttonColorRGBA[3] * 0 + 1)  				);  				UIColor buttonFlareBottomColor = UIColor.FromRGBA (  					(buttonColorRGBA[0] * 0.8f + 0.2f)'  					(buttonColorRGBA[1] * 0.8f + 0.2f)'  					(buttonColorRGBA[2] * 0.8f + 0.2f)'  					(buttonColorRGBA[3] * 0.8f + 0.2f)  				);  				UIColor flareWhite = UIColor.FromRGBA (1.00f' 1.00f' 1.00f' 0.83f);    //// Gradient Declarations  				var ringGradientColors = new CGColor [] {upColorOut.CGColor' bottomColorDown.CGColor};  				var ringGradientLocations = new float [] {0' 1};  				var ringGradient = new CGGradient (colorSpace' ringGradientColors' ringGradientLocations);  				var ringInnerGradientColors = new CGColor [] {upColorInner.CGColor' bottomColorInner.CGColor};  				var ringInnerGradientLocations = new float [] {0' 1};  				var ringInnerGradient = new CGGradient (colorSpace' ringInnerGradientColors' ringInnerGradientLocations);  				var buttonGradientColors = new CGColor [] {buttonBottomColor.CGColor' buttonTopColor.CGColor};  				var buttonGradientLocations = new float [] {0' 1};  				var buttonGradient = new CGGradient (colorSpace' buttonGradientColors' buttonGradientLocations);  				var overlayGradientColors = new CGColor [] {flareWhite.CGColor' UIColor.Clear.CGColor};  				var overlayGradientLocations = new float [] {0' 1};  				var overlayGradient = new CGGradient (colorSpace' overlayGradientColors' overlayGradientLocations);  				var buttonFlareGradientColors = new CGColor [] {buttonFlareUpColor.CGColor' buttonFlareBottomColor.CGColor};  				var buttonFlareGradientLocations = new float [] {0' 1};  				var buttonFlareGradient = new CGGradient (colorSpace' buttonFlareGradientColors' buttonFlareGradientLocations);    //// Shadow Declarations  				var buttonInnerShadow = UIColor.Black.CGColor;  				var buttonInnerShadowOffset = new SizeF (0' -0);  				var buttonInnerShadowBlurRadius = 5;  				var buttonOuterShadow = UIColor.Black.CGColor;  				var buttonOuterShadowOffset = new SizeF (0' 2);  				  				  				var buttonOuterShadowBlurRadius = isPressed ? 2 : 5;	// ADDED this code after PaintCode      //// outerOval Drawing  				var outerOvalPath = UIBezierPath.FromOval (new RectangleF (5' 5' 63' 63));  				context.SaveState ();  				context.SetShadowWithColor (buttonOuterShadowOffset' buttonOuterShadowBlurRadius' buttonOuterShadow);  				context.BeginTransparencyLayer (null);  				outerOvalPath.AddClip ();  				context.DrawLinearGradient (ringGradient' new PointF (36.5f' 5)' new PointF (36.5f' 68)' 0);  				context.EndTransparencyLayer ();  				context.RestoreState ();        //// overlayOval Drawing  				var overlayOvalPath = UIBezierPath.FromOval (new RectangleF (5' 5' 63' 63));  				context.SaveState ();  				overlayOvalPath.AddClip ();  				context.DrawRadialGradient (overlayGradient'      new PointF (36.5f' 12.23f)' 17.75f'      new PointF (36.5f' 36.5f)' 44.61f'      CGGradientDrawingOptions.DrawsBeforeStartLocation | CGGradientDrawingOptions.DrawsAfterEndLocation);  				context.RestoreState ();        //// innerOval Drawing  				var innerOvalPath = UIBezierPath.FromOval (new RectangleF (12' 12' 49' 49));  				context.SaveState ();  				innerOvalPath.AddClip ();  				context.DrawLinearGradient (ringInnerGradient' new PointF (36.5f' 12)' new PointF (36.5f' 61)' 0);  				context.RestoreState ();        //// buttonOval Drawing  				var buttonOvalPath = UIBezierPath.FromOval (new RectangleF (14' 13' 46' 46));  				context.SaveState ();  				buttonOvalPath.AddClip ();  				context.DrawRadialGradient (buttonGradient'      new PointF (37' 63.23f)' 2.44f'      new PointF (37' 44.48f)' 23.14f'      CGGradientDrawingOptions.DrawsBeforeStartLocation | CGGradientDrawingOptions.DrawsAfterEndLocation);  				context.RestoreState ();    ////// buttonOval Inner Shadow  				var buttonOvalBorderRect = buttonOvalPath.Bounds;  				buttonOvalBorderRect.Inflate (buttonInnerShadowBlurRadius' buttonInnerShadowBlurRadius);  				buttonOvalBorderRect.Offset (-buttonInnerShadowOffset.Width' -buttonInnerShadowOffset.Height);  				buttonOvalBorderRect = RectangleF.Union (buttonOvalBorderRect' buttonOvalPath.Bounds);  				buttonOvalBorderRect.Inflate (1' 1);    				var buttonOvalNegativePath = UIBezierPath.FromRect (buttonOvalBorderRect);  				buttonOvalNegativePath.AppendPath (buttonOvalPath);  				buttonOvalNegativePath.UsesEvenOddFillRule = true;    				context.SaveState ();  				{  					var xOffset = buttonInnerShadowOffset.Width + (float)Math.Round (buttonOvalBorderRect.Width);  					var yOffset = buttonInnerShadowOffset.Height;  					context.SetShadowWithColor (          new SizeF (xOffset + (xOffset >= 0 ? 0.1f : -0.1f)' yOffset + (yOffset >= 0 ? 0.1f : -0.1f))'          buttonInnerShadowBlurRadius'          buttonInnerShadow);    					buttonOvalPath.AddClip ();  					var transform = CGAffineTransform.MakeTranslation (-(float)Math.Round (buttonOvalBorderRect.Width)' 0);  					buttonOvalNegativePath.ApplyTransform (transform);  					UIColor.Gray.SetFill ();  					buttonOvalNegativePath.Fill ();  				}  				context.RestoreState ();          //// flareOval Drawing  				var flareOvalPath = UIBezierPath.FromOval (new RectangleF (22' 14' 29' 15));  				context.SaveState ();  				flareOvalPath.AddClip ();  				context.DrawLinearGradient (buttonFlareGradient' new PointF (36.5f' 14)' new PointF (36.5f' 29)' 0);  				context.RestoreState ();      				// ------------- END PAINTCODE -------------  				  				  				  			}
Magic Number,PaintCode,BlueButton,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\BlueButton\BlueButton.cs,Draw,The following statement contains a magic number: using (var colorSpace = CGColorSpace.CreateDeviceRGB ()) {  				  				  				  				// ------------- START PAINTCODE -------------    //// Color Declarations  				UIColor upColorOut = UIColor.FromRGBA (0.79f' 0.79f' 0.79f' 1.00f);  				UIColor bottomColorDown = UIColor.FromRGBA (0.21f' 0.21f' 0.21f' 1.00f);  				UIColor upColorInner = UIColor.FromRGBA (0.17f' 0.18f' 0.20f' 1.00f);  				UIColor bottomColorInner = UIColor.FromRGBA (0.98f' 0.98f' 0.99f' 1.00f);      				UIColor buttonFlareUpColor = UIColor.FromRGBA (  					(buttonColorRGBA[0] * 0.3f + 0.7f)'  					(buttonColorRGBA[1] * 0.3f + 0.7f)'  					(buttonColorRGBA[2] * 0.3f + 0.7f)'  					(buttonColorRGBA[3] * 0.3f + 0.7f)  				);  				UIColor buttonTopColor = UIColor.FromRGBA (  					(buttonColorRGBA[0] * 0.8f)'  					(buttonColorRGBA[1] * 0.8f)'  					(buttonColorRGBA[2] * 0.8f)'  					(buttonColorRGBA[3] * 0.8f + 0.2f)  				);  				UIColor buttonBottomColor = UIColor.FromRGBA (  					(buttonColorRGBA[0] * 0 + 1)'  					(buttonColorRGBA[1] * 0 + 1)'  					(buttonColorRGBA[2] * 0 + 1)'  					(buttonColorRGBA[3] * 0 + 1)  				);  				UIColor buttonFlareBottomColor = UIColor.FromRGBA (  					(buttonColorRGBA[0] * 0.8f + 0.2f)'  					(buttonColorRGBA[1] * 0.8f + 0.2f)'  					(buttonColorRGBA[2] * 0.8f + 0.2f)'  					(buttonColorRGBA[3] * 0.8f + 0.2f)  				);  				UIColor flareWhite = UIColor.FromRGBA (1.00f' 1.00f' 1.00f' 0.83f);    //// Gradient Declarations  				var ringGradientColors = new CGColor [] {upColorOut.CGColor' bottomColorDown.CGColor};  				var ringGradientLocations = new float [] {0' 1};  				var ringGradient = new CGGradient (colorSpace' ringGradientColors' ringGradientLocations);  				var ringInnerGradientColors = new CGColor [] {upColorInner.CGColor' bottomColorInner.CGColor};  				var ringInnerGradientLocations = new float [] {0' 1};  				var ringInnerGradient = new CGGradient (colorSpace' ringInnerGradientColors' ringInnerGradientLocations);  				var buttonGradientColors = new CGColor [] {buttonBottomColor.CGColor' buttonTopColor.CGColor};  				var buttonGradientLocations = new float [] {0' 1};  				var buttonGradient = new CGGradient (colorSpace' buttonGradientColors' buttonGradientLocations);  				var overlayGradientColors = new CGColor [] {flareWhite.CGColor' UIColor.Clear.CGColor};  				var overlayGradientLocations = new float [] {0' 1};  				var overlayGradient = new CGGradient (colorSpace' overlayGradientColors' overlayGradientLocations);  				var buttonFlareGradientColors = new CGColor [] {buttonFlareUpColor.CGColor' buttonFlareBottomColor.CGColor};  				var buttonFlareGradientLocations = new float [] {0' 1};  				var buttonFlareGradient = new CGGradient (colorSpace' buttonFlareGradientColors' buttonFlareGradientLocations);    //// Shadow Declarations  				var buttonInnerShadow = UIColor.Black.CGColor;  				var buttonInnerShadowOffset = new SizeF (0' -0);  				var buttonInnerShadowBlurRadius = 5;  				var buttonOuterShadow = UIColor.Black.CGColor;  				var buttonOuterShadowOffset = new SizeF (0' 2);  				  				  				var buttonOuterShadowBlurRadius = isPressed ? 2 : 5;	// ADDED this code after PaintCode      //// outerOval Drawing  				var outerOvalPath = UIBezierPath.FromOval (new RectangleF (5' 5' 63' 63));  				context.SaveState ();  				context.SetShadowWithColor (buttonOuterShadowOffset' buttonOuterShadowBlurRadius' buttonOuterShadow);  				context.BeginTransparencyLayer (null);  				outerOvalPath.AddClip ();  				context.DrawLinearGradient (ringGradient' new PointF (36.5f' 5)' new PointF (36.5f' 68)' 0);  				context.EndTransparencyLayer ();  				context.RestoreState ();        //// overlayOval Drawing  				var overlayOvalPath = UIBezierPath.FromOval (new RectangleF (5' 5' 63' 63));  				context.SaveState ();  				overlayOvalPath.AddClip ();  				context.DrawRadialGradient (overlayGradient'      new PointF (36.5f' 12.23f)' 17.75f'      new PointF (36.5f' 36.5f)' 44.61f'      CGGradientDrawingOptions.DrawsBeforeStartLocation | CGGradientDrawingOptions.DrawsAfterEndLocation);  				context.RestoreState ();        //// innerOval Drawing  				var innerOvalPath = UIBezierPath.FromOval (new RectangleF (12' 12' 49' 49));  				context.SaveState ();  				innerOvalPath.AddClip ();  				context.DrawLinearGradient (ringInnerGradient' new PointF (36.5f' 12)' new PointF (36.5f' 61)' 0);  				context.RestoreState ();        //// buttonOval Drawing  				var buttonOvalPath = UIBezierPath.FromOval (new RectangleF (14' 13' 46' 46));  				context.SaveState ();  				buttonOvalPath.AddClip ();  				context.DrawRadialGradient (buttonGradient'      new PointF (37' 63.23f)' 2.44f'      new PointF (37' 44.48f)' 23.14f'      CGGradientDrawingOptions.DrawsBeforeStartLocation | CGGradientDrawingOptions.DrawsAfterEndLocation);  				context.RestoreState ();    ////// buttonOval Inner Shadow  				var buttonOvalBorderRect = buttonOvalPath.Bounds;  				buttonOvalBorderRect.Inflate (buttonInnerShadowBlurRadius' buttonInnerShadowBlurRadius);  				buttonOvalBorderRect.Offset (-buttonInnerShadowOffset.Width' -buttonInnerShadowOffset.Height);  				buttonOvalBorderRect = RectangleF.Union (buttonOvalBorderRect' buttonOvalPath.Bounds);  				buttonOvalBorderRect.Inflate (1' 1);    				var buttonOvalNegativePath = UIBezierPath.FromRect (buttonOvalBorderRect);  				buttonOvalNegativePath.AppendPath (buttonOvalPath);  				buttonOvalNegativePath.UsesEvenOddFillRule = true;    				context.SaveState ();  				{  					var xOffset = buttonInnerShadowOffset.Width + (float)Math.Round (buttonOvalBorderRect.Width);  					var yOffset = buttonInnerShadowOffset.Height;  					context.SetShadowWithColor (          new SizeF (xOffset + (xOffset >= 0 ? 0.1f : -0.1f)' yOffset + (yOffset >= 0 ? 0.1f : -0.1f))'          buttonInnerShadowBlurRadius'          buttonInnerShadow);    					buttonOvalPath.AddClip ();  					var transform = CGAffineTransform.MakeTranslation (-(float)Math.Round (buttonOvalBorderRect.Width)' 0);  					buttonOvalNegativePath.ApplyTransform (transform);  					UIColor.Gray.SetFill ();  					buttonOvalNegativePath.Fill ();  				}  				context.RestoreState ();          //// flareOval Drawing  				var flareOvalPath = UIBezierPath.FromOval (new RectangleF (22' 14' 29' 15));  				context.SaveState ();  				flareOvalPath.AddClip ();  				context.DrawLinearGradient (buttonFlareGradient' new PointF (36.5f' 14)' new PointF (36.5f' 29)' 0);  				context.RestoreState ();      				// ------------- END PAINTCODE -------------  				  				  				  			}
Magic Number,PaintCode,BlueButton,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\BlueButton\BlueButton.cs,Draw,The following statement contains a magic number: using (var colorSpace = CGColorSpace.CreateDeviceRGB ()) {  				  				  				  				// ------------- START PAINTCODE -------------    //// Color Declarations  				UIColor upColorOut = UIColor.FromRGBA (0.79f' 0.79f' 0.79f' 1.00f);  				UIColor bottomColorDown = UIColor.FromRGBA (0.21f' 0.21f' 0.21f' 1.00f);  				UIColor upColorInner = UIColor.FromRGBA (0.17f' 0.18f' 0.20f' 1.00f);  				UIColor bottomColorInner = UIColor.FromRGBA (0.98f' 0.98f' 0.99f' 1.00f);      				UIColor buttonFlareUpColor = UIColor.FromRGBA (  					(buttonColorRGBA[0] * 0.3f + 0.7f)'  					(buttonColorRGBA[1] * 0.3f + 0.7f)'  					(buttonColorRGBA[2] * 0.3f + 0.7f)'  					(buttonColorRGBA[3] * 0.3f + 0.7f)  				);  				UIColor buttonTopColor = UIColor.FromRGBA (  					(buttonColorRGBA[0] * 0.8f)'  					(buttonColorRGBA[1] * 0.8f)'  					(buttonColorRGBA[2] * 0.8f)'  					(buttonColorRGBA[3] * 0.8f + 0.2f)  				);  				UIColor buttonBottomColor = UIColor.FromRGBA (  					(buttonColorRGBA[0] * 0 + 1)'  					(buttonColorRGBA[1] * 0 + 1)'  					(buttonColorRGBA[2] * 0 + 1)'  					(buttonColorRGBA[3] * 0 + 1)  				);  				UIColor buttonFlareBottomColor = UIColor.FromRGBA (  					(buttonColorRGBA[0] * 0.8f + 0.2f)'  					(buttonColorRGBA[1] * 0.8f + 0.2f)'  					(buttonColorRGBA[2] * 0.8f + 0.2f)'  					(buttonColorRGBA[3] * 0.8f + 0.2f)  				);  				UIColor flareWhite = UIColor.FromRGBA (1.00f' 1.00f' 1.00f' 0.83f);    //// Gradient Declarations  				var ringGradientColors = new CGColor [] {upColorOut.CGColor' bottomColorDown.CGColor};  				var ringGradientLocations = new float [] {0' 1};  				var ringGradient = new CGGradient (colorSpace' ringGradientColors' ringGradientLocations);  				var ringInnerGradientColors = new CGColor [] {upColorInner.CGColor' bottomColorInner.CGColor};  				var ringInnerGradientLocations = new float [] {0' 1};  				var ringInnerGradient = new CGGradient (colorSpace' ringInnerGradientColors' ringInnerGradientLocations);  				var buttonGradientColors = new CGColor [] {buttonBottomColor.CGColor' buttonTopColor.CGColor};  				var buttonGradientLocations = new float [] {0' 1};  				var buttonGradient = new CGGradient (colorSpace' buttonGradientColors' buttonGradientLocations);  				var overlayGradientColors = new CGColor [] {flareWhite.CGColor' UIColor.Clear.CGColor};  				var overlayGradientLocations = new float [] {0' 1};  				var overlayGradient = new CGGradient (colorSpace' overlayGradientColors' overlayGradientLocations);  				var buttonFlareGradientColors = new CGColor [] {buttonFlareUpColor.CGColor' buttonFlareBottomColor.CGColor};  				var buttonFlareGradientLocations = new float [] {0' 1};  				var buttonFlareGradient = new CGGradient (colorSpace' buttonFlareGradientColors' buttonFlareGradientLocations);    //// Shadow Declarations  				var buttonInnerShadow = UIColor.Black.CGColor;  				var buttonInnerShadowOffset = new SizeF (0' -0);  				var buttonInnerShadowBlurRadius = 5;  				var buttonOuterShadow = UIColor.Black.CGColor;  				var buttonOuterShadowOffset = new SizeF (0' 2);  				  				  				var buttonOuterShadowBlurRadius = isPressed ? 2 : 5;	// ADDED this code after PaintCode      //// outerOval Drawing  				var outerOvalPath = UIBezierPath.FromOval (new RectangleF (5' 5' 63' 63));  				context.SaveState ();  				context.SetShadowWithColor (buttonOuterShadowOffset' buttonOuterShadowBlurRadius' buttonOuterShadow);  				context.BeginTransparencyLayer (null);  				outerOvalPath.AddClip ();  				context.DrawLinearGradient (ringGradient' new PointF (36.5f' 5)' new PointF (36.5f' 68)' 0);  				context.EndTransparencyLayer ();  				context.RestoreState ();        //// overlayOval Drawing  				var overlayOvalPath = UIBezierPath.FromOval (new RectangleF (5' 5' 63' 63));  				context.SaveState ();  				overlayOvalPath.AddClip ();  				context.DrawRadialGradient (overlayGradient'      new PointF (36.5f' 12.23f)' 17.75f'      new PointF (36.5f' 36.5f)' 44.61f'      CGGradientDrawingOptions.DrawsBeforeStartLocation | CGGradientDrawingOptions.DrawsAfterEndLocation);  				context.RestoreState ();        //// innerOval Drawing  				var innerOvalPath = UIBezierPath.FromOval (new RectangleF (12' 12' 49' 49));  				context.SaveState ();  				innerOvalPath.AddClip ();  				context.DrawLinearGradient (ringInnerGradient' new PointF (36.5f' 12)' new PointF (36.5f' 61)' 0);  				context.RestoreState ();        //// buttonOval Drawing  				var buttonOvalPath = UIBezierPath.FromOval (new RectangleF (14' 13' 46' 46));  				context.SaveState ();  				buttonOvalPath.AddClip ();  				context.DrawRadialGradient (buttonGradient'      new PointF (37' 63.23f)' 2.44f'      new PointF (37' 44.48f)' 23.14f'      CGGradientDrawingOptions.DrawsBeforeStartLocation | CGGradientDrawingOptions.DrawsAfterEndLocation);  				context.RestoreState ();    ////// buttonOval Inner Shadow  				var buttonOvalBorderRect = buttonOvalPath.Bounds;  				buttonOvalBorderRect.Inflate (buttonInnerShadowBlurRadius' buttonInnerShadowBlurRadius);  				buttonOvalBorderRect.Offset (-buttonInnerShadowOffset.Width' -buttonInnerShadowOffset.Height);  				buttonOvalBorderRect = RectangleF.Union (buttonOvalBorderRect' buttonOvalPath.Bounds);  				buttonOvalBorderRect.Inflate (1' 1);    				var buttonOvalNegativePath = UIBezierPath.FromRect (buttonOvalBorderRect);  				buttonOvalNegativePath.AppendPath (buttonOvalPath);  				buttonOvalNegativePath.UsesEvenOddFillRule = true;    				context.SaveState ();  				{  					var xOffset = buttonInnerShadowOffset.Width + (float)Math.Round (buttonOvalBorderRect.Width);  					var yOffset = buttonInnerShadowOffset.Height;  					context.SetShadowWithColor (          new SizeF (xOffset + (xOffset >= 0 ? 0.1f : -0.1f)' yOffset + (yOffset >= 0 ? 0.1f : -0.1f))'          buttonInnerShadowBlurRadius'          buttonInnerShadow);    					buttonOvalPath.AddClip ();  					var transform = CGAffineTransform.MakeTranslation (-(float)Math.Round (buttonOvalBorderRect.Width)' 0);  					buttonOvalNegativePath.ApplyTransform (transform);  					UIColor.Gray.SetFill ();  					buttonOvalNegativePath.Fill ();  				}  				context.RestoreState ();          //// flareOval Drawing  				var flareOvalPath = UIBezierPath.FromOval (new RectangleF (22' 14' 29' 15));  				context.SaveState ();  				flareOvalPath.AddClip ();  				context.DrawLinearGradient (buttonFlareGradient' new PointF (36.5f' 14)' new PointF (36.5f' 29)' 0);  				context.RestoreState ();      				// ------------- END PAINTCODE -------------  				  				  				  			}
Magic Number,PaintCode,BlueButton,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\BlueButton\BlueButton.cs,Draw,The following statement contains a magic number: using (var colorSpace = CGColorSpace.CreateDeviceRGB ()) {  				  				  				  				// ------------- START PAINTCODE -------------    //// Color Declarations  				UIColor upColorOut = UIColor.FromRGBA (0.79f' 0.79f' 0.79f' 1.00f);  				UIColor bottomColorDown = UIColor.FromRGBA (0.21f' 0.21f' 0.21f' 1.00f);  				UIColor upColorInner = UIColor.FromRGBA (0.17f' 0.18f' 0.20f' 1.00f);  				UIColor bottomColorInner = UIColor.FromRGBA (0.98f' 0.98f' 0.99f' 1.00f);      				UIColor buttonFlareUpColor = UIColor.FromRGBA (  					(buttonColorRGBA[0] * 0.3f + 0.7f)'  					(buttonColorRGBA[1] * 0.3f + 0.7f)'  					(buttonColorRGBA[2] * 0.3f + 0.7f)'  					(buttonColorRGBA[3] * 0.3f + 0.7f)  				);  				UIColor buttonTopColor = UIColor.FromRGBA (  					(buttonColorRGBA[0] * 0.8f)'  					(buttonColorRGBA[1] * 0.8f)'  					(buttonColorRGBA[2] * 0.8f)'  					(buttonColorRGBA[3] * 0.8f + 0.2f)  				);  				UIColor buttonBottomColor = UIColor.FromRGBA (  					(buttonColorRGBA[0] * 0 + 1)'  					(buttonColorRGBA[1] * 0 + 1)'  					(buttonColorRGBA[2] * 0 + 1)'  					(buttonColorRGBA[3] * 0 + 1)  				);  				UIColor buttonFlareBottomColor = UIColor.FromRGBA (  					(buttonColorRGBA[0] * 0.8f + 0.2f)'  					(buttonColorRGBA[1] * 0.8f + 0.2f)'  					(buttonColorRGBA[2] * 0.8f + 0.2f)'  					(buttonColorRGBA[3] * 0.8f + 0.2f)  				);  				UIColor flareWhite = UIColor.FromRGBA (1.00f' 1.00f' 1.00f' 0.83f);    //// Gradient Declarations  				var ringGradientColors = new CGColor [] {upColorOut.CGColor' bottomColorDown.CGColor};  				var ringGradientLocations = new float [] {0' 1};  				var ringGradient = new CGGradient (colorSpace' ringGradientColors' ringGradientLocations);  				var ringInnerGradientColors = new CGColor [] {upColorInner.CGColor' bottomColorInner.CGColor};  				var ringInnerGradientLocations = new float [] {0' 1};  				var ringInnerGradient = new CGGradient (colorSpace' ringInnerGradientColors' ringInnerGradientLocations);  				var buttonGradientColors = new CGColor [] {buttonBottomColor.CGColor' buttonTopColor.CGColor};  				var buttonGradientLocations = new float [] {0' 1};  				var buttonGradient = new CGGradient (colorSpace' buttonGradientColors' buttonGradientLocations);  				var overlayGradientColors = new CGColor [] {flareWhite.CGColor' UIColor.Clear.CGColor};  				var overlayGradientLocations = new float [] {0' 1};  				var overlayGradient = new CGGradient (colorSpace' overlayGradientColors' overlayGradientLocations);  				var buttonFlareGradientColors = new CGColor [] {buttonFlareUpColor.CGColor' buttonFlareBottomColor.CGColor};  				var buttonFlareGradientLocations = new float [] {0' 1};  				var buttonFlareGradient = new CGGradient (colorSpace' buttonFlareGradientColors' buttonFlareGradientLocations);    //// Shadow Declarations  				var buttonInnerShadow = UIColor.Black.CGColor;  				var buttonInnerShadowOffset = new SizeF (0' -0);  				var buttonInnerShadowBlurRadius = 5;  				var buttonOuterShadow = UIColor.Black.CGColor;  				var buttonOuterShadowOffset = new SizeF (0' 2);  				  				  				var buttonOuterShadowBlurRadius = isPressed ? 2 : 5;	// ADDED this code after PaintCode      //// outerOval Drawing  				var outerOvalPath = UIBezierPath.FromOval (new RectangleF (5' 5' 63' 63));  				context.SaveState ();  				context.SetShadowWithColor (buttonOuterShadowOffset' buttonOuterShadowBlurRadius' buttonOuterShadow);  				context.BeginTransparencyLayer (null);  				outerOvalPath.AddClip ();  				context.DrawLinearGradient (ringGradient' new PointF (36.5f' 5)' new PointF (36.5f' 68)' 0);  				context.EndTransparencyLayer ();  				context.RestoreState ();        //// overlayOval Drawing  				var overlayOvalPath = UIBezierPath.FromOval (new RectangleF (5' 5' 63' 63));  				context.SaveState ();  				overlayOvalPath.AddClip ();  				context.DrawRadialGradient (overlayGradient'      new PointF (36.5f' 12.23f)' 17.75f'      new PointF (36.5f' 36.5f)' 44.61f'      CGGradientDrawingOptions.DrawsBeforeStartLocation | CGGradientDrawingOptions.DrawsAfterEndLocation);  				context.RestoreState ();        //// innerOval Drawing  				var innerOvalPath = UIBezierPath.FromOval (new RectangleF (12' 12' 49' 49));  				context.SaveState ();  				innerOvalPath.AddClip ();  				context.DrawLinearGradient (ringInnerGradient' new PointF (36.5f' 12)' new PointF (36.5f' 61)' 0);  				context.RestoreState ();        //// buttonOval Drawing  				var buttonOvalPath = UIBezierPath.FromOval (new RectangleF (14' 13' 46' 46));  				context.SaveState ();  				buttonOvalPath.AddClip ();  				context.DrawRadialGradient (buttonGradient'      new PointF (37' 63.23f)' 2.44f'      new PointF (37' 44.48f)' 23.14f'      CGGradientDrawingOptions.DrawsBeforeStartLocation | CGGradientDrawingOptions.DrawsAfterEndLocation);  				context.RestoreState ();    ////// buttonOval Inner Shadow  				var buttonOvalBorderRect = buttonOvalPath.Bounds;  				buttonOvalBorderRect.Inflate (buttonInnerShadowBlurRadius' buttonInnerShadowBlurRadius);  				buttonOvalBorderRect.Offset (-buttonInnerShadowOffset.Width' -buttonInnerShadowOffset.Height);  				buttonOvalBorderRect = RectangleF.Union (buttonOvalBorderRect' buttonOvalPath.Bounds);  				buttonOvalBorderRect.Inflate (1' 1);    				var buttonOvalNegativePath = UIBezierPath.FromRect (buttonOvalBorderRect);  				buttonOvalNegativePath.AppendPath (buttonOvalPath);  				buttonOvalNegativePath.UsesEvenOddFillRule = true;    				context.SaveState ();  				{  					var xOffset = buttonInnerShadowOffset.Width + (float)Math.Round (buttonOvalBorderRect.Width);  					var yOffset = buttonInnerShadowOffset.Height;  					context.SetShadowWithColor (          new SizeF (xOffset + (xOffset >= 0 ? 0.1f : -0.1f)' yOffset + (yOffset >= 0 ? 0.1f : -0.1f))'          buttonInnerShadowBlurRadius'          buttonInnerShadow);    					buttonOvalPath.AddClip ();  					var transform = CGAffineTransform.MakeTranslation (-(float)Math.Round (buttonOvalBorderRect.Width)' 0);  					buttonOvalNegativePath.ApplyTransform (transform);  					UIColor.Gray.SetFill ();  					buttonOvalNegativePath.Fill ();  				}  				context.RestoreState ();          //// flareOval Drawing  				var flareOvalPath = UIBezierPath.FromOval (new RectangleF (22' 14' 29' 15));  				context.SaveState ();  				flareOvalPath.AddClip ();  				context.DrawLinearGradient (buttonFlareGradient' new PointF (36.5f' 14)' new PointF (36.5f' 29)' 0);  				context.RestoreState ();      				// ------------- END PAINTCODE -------------  				  				  				  			}
Magic Number,PaintCode,BlueButton,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\BlueButton\BlueButton.cs,Draw,The following statement contains a magic number: using (var colorSpace = CGColorSpace.CreateDeviceRGB ()) {  				  				  				  				// ------------- START PAINTCODE -------------    //// Color Declarations  				UIColor upColorOut = UIColor.FromRGBA (0.79f' 0.79f' 0.79f' 1.00f);  				UIColor bottomColorDown = UIColor.FromRGBA (0.21f' 0.21f' 0.21f' 1.00f);  				UIColor upColorInner = UIColor.FromRGBA (0.17f' 0.18f' 0.20f' 1.00f);  				UIColor bottomColorInner = UIColor.FromRGBA (0.98f' 0.98f' 0.99f' 1.00f);      				UIColor buttonFlareUpColor = UIColor.FromRGBA (  					(buttonColorRGBA[0] * 0.3f + 0.7f)'  					(buttonColorRGBA[1] * 0.3f + 0.7f)'  					(buttonColorRGBA[2] * 0.3f + 0.7f)'  					(buttonColorRGBA[3] * 0.3f + 0.7f)  				);  				UIColor buttonTopColor = UIColor.FromRGBA (  					(buttonColorRGBA[0] * 0.8f)'  					(buttonColorRGBA[1] * 0.8f)'  					(buttonColorRGBA[2] * 0.8f)'  					(buttonColorRGBA[3] * 0.8f + 0.2f)  				);  				UIColor buttonBottomColor = UIColor.FromRGBA (  					(buttonColorRGBA[0] * 0 + 1)'  					(buttonColorRGBA[1] * 0 + 1)'  					(buttonColorRGBA[2] * 0 + 1)'  					(buttonColorRGBA[3] * 0 + 1)  				);  				UIColor buttonFlareBottomColor = UIColor.FromRGBA (  					(buttonColorRGBA[0] * 0.8f + 0.2f)'  					(buttonColorRGBA[1] * 0.8f + 0.2f)'  					(buttonColorRGBA[2] * 0.8f + 0.2f)'  					(buttonColorRGBA[3] * 0.8f + 0.2f)  				);  				UIColor flareWhite = UIColor.FromRGBA (1.00f' 1.00f' 1.00f' 0.83f);    //// Gradient Declarations  				var ringGradientColors = new CGColor [] {upColorOut.CGColor' bottomColorDown.CGColor};  				var ringGradientLocations = new float [] {0' 1};  				var ringGradient = new CGGradient (colorSpace' ringGradientColors' ringGradientLocations);  				var ringInnerGradientColors = new CGColor [] {upColorInner.CGColor' bottomColorInner.CGColor};  				var ringInnerGradientLocations = new float [] {0' 1};  				var ringInnerGradient = new CGGradient (colorSpace' ringInnerGradientColors' ringInnerGradientLocations);  				var buttonGradientColors = new CGColor [] {buttonBottomColor.CGColor' buttonTopColor.CGColor};  				var buttonGradientLocations = new float [] {0' 1};  				var buttonGradient = new CGGradient (colorSpace' buttonGradientColors' buttonGradientLocations);  				var overlayGradientColors = new CGColor [] {flareWhite.CGColor' UIColor.Clear.CGColor};  				var overlayGradientLocations = new float [] {0' 1};  				var overlayGradient = new CGGradient (colorSpace' overlayGradientColors' overlayGradientLocations);  				var buttonFlareGradientColors = new CGColor [] {buttonFlareUpColor.CGColor' buttonFlareBottomColor.CGColor};  				var buttonFlareGradientLocations = new float [] {0' 1};  				var buttonFlareGradient = new CGGradient (colorSpace' buttonFlareGradientColors' buttonFlareGradientLocations);    //// Shadow Declarations  				var buttonInnerShadow = UIColor.Black.CGColor;  				var buttonInnerShadowOffset = new SizeF (0' -0);  				var buttonInnerShadowBlurRadius = 5;  				var buttonOuterShadow = UIColor.Black.CGColor;  				var buttonOuterShadowOffset = new SizeF (0' 2);  				  				  				var buttonOuterShadowBlurRadius = isPressed ? 2 : 5;	// ADDED this code after PaintCode      //// outerOval Drawing  				var outerOvalPath = UIBezierPath.FromOval (new RectangleF (5' 5' 63' 63));  				context.SaveState ();  				context.SetShadowWithColor (buttonOuterShadowOffset' buttonOuterShadowBlurRadius' buttonOuterShadow);  				context.BeginTransparencyLayer (null);  				outerOvalPath.AddClip ();  				context.DrawLinearGradient (ringGradient' new PointF (36.5f' 5)' new PointF (36.5f' 68)' 0);  				context.EndTransparencyLayer ();  				context.RestoreState ();        //// overlayOval Drawing  				var overlayOvalPath = UIBezierPath.FromOval (new RectangleF (5' 5' 63' 63));  				context.SaveState ();  				overlayOvalPath.AddClip ();  				context.DrawRadialGradient (overlayGradient'      new PointF (36.5f' 12.23f)' 17.75f'      new PointF (36.5f' 36.5f)' 44.61f'      CGGradientDrawingOptions.DrawsBeforeStartLocation | CGGradientDrawingOptions.DrawsAfterEndLocation);  				context.RestoreState ();        //// innerOval Drawing  				var innerOvalPath = UIBezierPath.FromOval (new RectangleF (12' 12' 49' 49));  				context.SaveState ();  				innerOvalPath.AddClip ();  				context.DrawLinearGradient (ringInnerGradient' new PointF (36.5f' 12)' new PointF (36.5f' 61)' 0);  				context.RestoreState ();        //// buttonOval Drawing  				var buttonOvalPath = UIBezierPath.FromOval (new RectangleF (14' 13' 46' 46));  				context.SaveState ();  				buttonOvalPath.AddClip ();  				context.DrawRadialGradient (buttonGradient'      new PointF (37' 63.23f)' 2.44f'      new PointF (37' 44.48f)' 23.14f'      CGGradientDrawingOptions.DrawsBeforeStartLocation | CGGradientDrawingOptions.DrawsAfterEndLocation);  				context.RestoreState ();    ////// buttonOval Inner Shadow  				var buttonOvalBorderRect = buttonOvalPath.Bounds;  				buttonOvalBorderRect.Inflate (buttonInnerShadowBlurRadius' buttonInnerShadowBlurRadius);  				buttonOvalBorderRect.Offset (-buttonInnerShadowOffset.Width' -buttonInnerShadowOffset.Height);  				buttonOvalBorderRect = RectangleF.Union (buttonOvalBorderRect' buttonOvalPath.Bounds);  				buttonOvalBorderRect.Inflate (1' 1);    				var buttonOvalNegativePath = UIBezierPath.FromRect (buttonOvalBorderRect);  				buttonOvalNegativePath.AppendPath (buttonOvalPath);  				buttonOvalNegativePath.UsesEvenOddFillRule = true;    				context.SaveState ();  				{  					var xOffset = buttonInnerShadowOffset.Width + (float)Math.Round (buttonOvalBorderRect.Width);  					var yOffset = buttonInnerShadowOffset.Height;  					context.SetShadowWithColor (          new SizeF (xOffset + (xOffset >= 0 ? 0.1f : -0.1f)' yOffset + (yOffset >= 0 ? 0.1f : -0.1f))'          buttonInnerShadowBlurRadius'          buttonInnerShadow);    					buttonOvalPath.AddClip ();  					var transform = CGAffineTransform.MakeTranslation (-(float)Math.Round (buttonOvalBorderRect.Width)' 0);  					buttonOvalNegativePath.ApplyTransform (transform);  					UIColor.Gray.SetFill ();  					buttonOvalNegativePath.Fill ();  				}  				context.RestoreState ();          //// flareOval Drawing  				var flareOvalPath = UIBezierPath.FromOval (new RectangleF (22' 14' 29' 15));  				context.SaveState ();  				flareOvalPath.AddClip ();  				context.DrawLinearGradient (buttonFlareGradient' new PointF (36.5f' 14)' new PointF (36.5f' 29)' 0);  				context.RestoreState ();      				// ------------- END PAINTCODE -------------  				  				  				  			}
Magic Number,PaintCode,BlueButton,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\BlueButton\BlueButton.cs,Draw,The following statement contains a magic number: using (var colorSpace = CGColorSpace.CreateDeviceRGB ()) {  				  				  				  				// ------------- START PAINTCODE -------------    //// Color Declarations  				UIColor upColorOut = UIColor.FromRGBA (0.79f' 0.79f' 0.79f' 1.00f);  				UIColor bottomColorDown = UIColor.FromRGBA (0.21f' 0.21f' 0.21f' 1.00f);  				UIColor upColorInner = UIColor.FromRGBA (0.17f' 0.18f' 0.20f' 1.00f);  				UIColor bottomColorInner = UIColor.FromRGBA (0.98f' 0.98f' 0.99f' 1.00f);      				UIColor buttonFlareUpColor = UIColor.FromRGBA (  					(buttonColorRGBA[0] * 0.3f + 0.7f)'  					(buttonColorRGBA[1] * 0.3f + 0.7f)'  					(buttonColorRGBA[2] * 0.3f + 0.7f)'  					(buttonColorRGBA[3] * 0.3f + 0.7f)  				);  				UIColor buttonTopColor = UIColor.FromRGBA (  					(buttonColorRGBA[0] * 0.8f)'  					(buttonColorRGBA[1] * 0.8f)'  					(buttonColorRGBA[2] * 0.8f)'  					(buttonColorRGBA[3] * 0.8f + 0.2f)  				);  				UIColor buttonBottomColor = UIColor.FromRGBA (  					(buttonColorRGBA[0] * 0 + 1)'  					(buttonColorRGBA[1] * 0 + 1)'  					(buttonColorRGBA[2] * 0 + 1)'  					(buttonColorRGBA[3] * 0 + 1)  				);  				UIColor buttonFlareBottomColor = UIColor.FromRGBA (  					(buttonColorRGBA[0] * 0.8f + 0.2f)'  					(buttonColorRGBA[1] * 0.8f + 0.2f)'  					(buttonColorRGBA[2] * 0.8f + 0.2f)'  					(buttonColorRGBA[3] * 0.8f + 0.2f)  				);  				UIColor flareWhite = UIColor.FromRGBA (1.00f' 1.00f' 1.00f' 0.83f);    //// Gradient Declarations  				var ringGradientColors = new CGColor [] {upColorOut.CGColor' bottomColorDown.CGColor};  				var ringGradientLocations = new float [] {0' 1};  				var ringGradient = new CGGradient (colorSpace' ringGradientColors' ringGradientLocations);  				var ringInnerGradientColors = new CGColor [] {upColorInner.CGColor' bottomColorInner.CGColor};  				var ringInnerGradientLocations = new float [] {0' 1};  				var ringInnerGradient = new CGGradient (colorSpace' ringInnerGradientColors' ringInnerGradientLocations);  				var buttonGradientColors = new CGColor [] {buttonBottomColor.CGColor' buttonTopColor.CGColor};  				var buttonGradientLocations = new float [] {0' 1};  				var buttonGradient = new CGGradient (colorSpace' buttonGradientColors' buttonGradientLocations);  				var overlayGradientColors = new CGColor [] {flareWhite.CGColor' UIColor.Clear.CGColor};  				var overlayGradientLocations = new float [] {0' 1};  				var overlayGradient = new CGGradient (colorSpace' overlayGradientColors' overlayGradientLocations);  				var buttonFlareGradientColors = new CGColor [] {buttonFlareUpColor.CGColor' buttonFlareBottomColor.CGColor};  				var buttonFlareGradientLocations = new float [] {0' 1};  				var buttonFlareGradient = new CGGradient (colorSpace' buttonFlareGradientColors' buttonFlareGradientLocations);    //// Shadow Declarations  				var buttonInnerShadow = UIColor.Black.CGColor;  				var buttonInnerShadowOffset = new SizeF (0' -0);  				var buttonInnerShadowBlurRadius = 5;  				var buttonOuterShadow = UIColor.Black.CGColor;  				var buttonOuterShadowOffset = new SizeF (0' 2);  				  				  				var buttonOuterShadowBlurRadius = isPressed ? 2 : 5;	// ADDED this code after PaintCode      //// outerOval Drawing  				var outerOvalPath = UIBezierPath.FromOval (new RectangleF (5' 5' 63' 63));  				context.SaveState ();  				context.SetShadowWithColor (buttonOuterShadowOffset' buttonOuterShadowBlurRadius' buttonOuterShadow);  				context.BeginTransparencyLayer (null);  				outerOvalPath.AddClip ();  				context.DrawLinearGradient (ringGradient' new PointF (36.5f' 5)' new PointF (36.5f' 68)' 0);  				context.EndTransparencyLayer ();  				context.RestoreState ();        //// overlayOval Drawing  				var overlayOvalPath = UIBezierPath.FromOval (new RectangleF (5' 5' 63' 63));  				context.SaveState ();  				overlayOvalPath.AddClip ();  				context.DrawRadialGradient (overlayGradient'      new PointF (36.5f' 12.23f)' 17.75f'      new PointF (36.5f' 36.5f)' 44.61f'      CGGradientDrawingOptions.DrawsBeforeStartLocation | CGGradientDrawingOptions.DrawsAfterEndLocation);  				context.RestoreState ();        //// innerOval Drawing  				var innerOvalPath = UIBezierPath.FromOval (new RectangleF (12' 12' 49' 49));  				context.SaveState ();  				innerOvalPath.AddClip ();  				context.DrawLinearGradient (ringInnerGradient' new PointF (36.5f' 12)' new PointF (36.5f' 61)' 0);  				context.RestoreState ();        //// buttonOval Drawing  				var buttonOvalPath = UIBezierPath.FromOval (new RectangleF (14' 13' 46' 46));  				context.SaveState ();  				buttonOvalPath.AddClip ();  				context.DrawRadialGradient (buttonGradient'      new PointF (37' 63.23f)' 2.44f'      new PointF (37' 44.48f)' 23.14f'      CGGradientDrawingOptions.DrawsBeforeStartLocation | CGGradientDrawingOptions.DrawsAfterEndLocation);  				context.RestoreState ();    ////// buttonOval Inner Shadow  				var buttonOvalBorderRect = buttonOvalPath.Bounds;  				buttonOvalBorderRect.Inflate (buttonInnerShadowBlurRadius' buttonInnerShadowBlurRadius);  				buttonOvalBorderRect.Offset (-buttonInnerShadowOffset.Width' -buttonInnerShadowOffset.Height);  				buttonOvalBorderRect = RectangleF.Union (buttonOvalBorderRect' buttonOvalPath.Bounds);  				buttonOvalBorderRect.Inflate (1' 1);    				var buttonOvalNegativePath = UIBezierPath.FromRect (buttonOvalBorderRect);  				buttonOvalNegativePath.AppendPath (buttonOvalPath);  				buttonOvalNegativePath.UsesEvenOddFillRule = true;    				context.SaveState ();  				{  					var xOffset = buttonInnerShadowOffset.Width + (float)Math.Round (buttonOvalBorderRect.Width);  					var yOffset = buttonInnerShadowOffset.Height;  					context.SetShadowWithColor (          new SizeF (xOffset + (xOffset >= 0 ? 0.1f : -0.1f)' yOffset + (yOffset >= 0 ? 0.1f : -0.1f))'          buttonInnerShadowBlurRadius'          buttonInnerShadow);    					buttonOvalPath.AddClip ();  					var transform = CGAffineTransform.MakeTranslation (-(float)Math.Round (buttonOvalBorderRect.Width)' 0);  					buttonOvalNegativePath.ApplyTransform (transform);  					UIColor.Gray.SetFill ();  					buttonOvalNegativePath.Fill ();  				}  				context.RestoreState ();          //// flareOval Drawing  				var flareOvalPath = UIBezierPath.FromOval (new RectangleF (22' 14' 29' 15));  				context.SaveState ();  				flareOvalPath.AddClip ();  				context.DrawLinearGradient (buttonFlareGradient' new PointF (36.5f' 14)' new PointF (36.5f' 29)' 0);  				context.RestoreState ();      				// ------------- END PAINTCODE -------------  				  				  				  			}
Magic Number,PaintCode,BlueButton,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\BlueButton\BlueButton.cs,Draw,The following statement contains a magic number: using (var colorSpace = CGColorSpace.CreateDeviceRGB ()) {  				  				  				  				// ------------- START PAINTCODE -------------    //// Color Declarations  				UIColor upColorOut = UIColor.FromRGBA (0.79f' 0.79f' 0.79f' 1.00f);  				UIColor bottomColorDown = UIColor.FromRGBA (0.21f' 0.21f' 0.21f' 1.00f);  				UIColor upColorInner = UIColor.FromRGBA (0.17f' 0.18f' 0.20f' 1.00f);  				UIColor bottomColorInner = UIColor.FromRGBA (0.98f' 0.98f' 0.99f' 1.00f);      				UIColor buttonFlareUpColor = UIColor.FromRGBA (  					(buttonColorRGBA[0] * 0.3f + 0.7f)'  					(buttonColorRGBA[1] * 0.3f + 0.7f)'  					(buttonColorRGBA[2] * 0.3f + 0.7f)'  					(buttonColorRGBA[3] * 0.3f + 0.7f)  				);  				UIColor buttonTopColor = UIColor.FromRGBA (  					(buttonColorRGBA[0] * 0.8f)'  					(buttonColorRGBA[1] * 0.8f)'  					(buttonColorRGBA[2] * 0.8f)'  					(buttonColorRGBA[3] * 0.8f + 0.2f)  				);  				UIColor buttonBottomColor = UIColor.FromRGBA (  					(buttonColorRGBA[0] * 0 + 1)'  					(buttonColorRGBA[1] * 0 + 1)'  					(buttonColorRGBA[2] * 0 + 1)'  					(buttonColorRGBA[3] * 0 + 1)  				);  				UIColor buttonFlareBottomColor = UIColor.FromRGBA (  					(buttonColorRGBA[0] * 0.8f + 0.2f)'  					(buttonColorRGBA[1] * 0.8f + 0.2f)'  					(buttonColorRGBA[2] * 0.8f + 0.2f)'  					(buttonColorRGBA[3] * 0.8f + 0.2f)  				);  				UIColor flareWhite = UIColor.FromRGBA (1.00f' 1.00f' 1.00f' 0.83f);    //// Gradient Declarations  				var ringGradientColors = new CGColor [] {upColorOut.CGColor' bottomColorDown.CGColor};  				var ringGradientLocations = new float [] {0' 1};  				var ringGradient = new CGGradient (colorSpace' ringGradientColors' ringGradientLocations);  				var ringInnerGradientColors = new CGColor [] {upColorInner.CGColor' bottomColorInner.CGColor};  				var ringInnerGradientLocations = new float [] {0' 1};  				var ringInnerGradient = new CGGradient (colorSpace' ringInnerGradientColors' ringInnerGradientLocations);  				var buttonGradientColors = new CGColor [] {buttonBottomColor.CGColor' buttonTopColor.CGColor};  				var buttonGradientLocations = new float [] {0' 1};  				var buttonGradient = new CGGradient (colorSpace' buttonGradientColors' buttonGradientLocations);  				var overlayGradientColors = new CGColor [] {flareWhite.CGColor' UIColor.Clear.CGColor};  				var overlayGradientLocations = new float [] {0' 1};  				var overlayGradient = new CGGradient (colorSpace' overlayGradientColors' overlayGradientLocations);  				var buttonFlareGradientColors = new CGColor [] {buttonFlareUpColor.CGColor' buttonFlareBottomColor.CGColor};  				var buttonFlareGradientLocations = new float [] {0' 1};  				var buttonFlareGradient = new CGGradient (colorSpace' buttonFlareGradientColors' buttonFlareGradientLocations);    //// Shadow Declarations  				var buttonInnerShadow = UIColor.Black.CGColor;  				var buttonInnerShadowOffset = new SizeF (0' -0);  				var buttonInnerShadowBlurRadius = 5;  				var buttonOuterShadow = UIColor.Black.CGColor;  				var buttonOuterShadowOffset = new SizeF (0' 2);  				  				  				var buttonOuterShadowBlurRadius = isPressed ? 2 : 5;	// ADDED this code after PaintCode      //// outerOval Drawing  				var outerOvalPath = UIBezierPath.FromOval (new RectangleF (5' 5' 63' 63));  				context.SaveState ();  				context.SetShadowWithColor (buttonOuterShadowOffset' buttonOuterShadowBlurRadius' buttonOuterShadow);  				context.BeginTransparencyLayer (null);  				outerOvalPath.AddClip ();  				context.DrawLinearGradient (ringGradient' new PointF (36.5f' 5)' new PointF (36.5f' 68)' 0);  				context.EndTransparencyLayer ();  				context.RestoreState ();        //// overlayOval Drawing  				var overlayOvalPath = UIBezierPath.FromOval (new RectangleF (5' 5' 63' 63));  				context.SaveState ();  				overlayOvalPath.AddClip ();  				context.DrawRadialGradient (overlayGradient'      new PointF (36.5f' 12.23f)' 17.75f'      new PointF (36.5f' 36.5f)' 44.61f'      CGGradientDrawingOptions.DrawsBeforeStartLocation | CGGradientDrawingOptions.DrawsAfterEndLocation);  				context.RestoreState ();        //// innerOval Drawing  				var innerOvalPath = UIBezierPath.FromOval (new RectangleF (12' 12' 49' 49));  				context.SaveState ();  				innerOvalPath.AddClip ();  				context.DrawLinearGradient (ringInnerGradient' new PointF (36.5f' 12)' new PointF (36.5f' 61)' 0);  				context.RestoreState ();        //// buttonOval Drawing  				var buttonOvalPath = UIBezierPath.FromOval (new RectangleF (14' 13' 46' 46));  				context.SaveState ();  				buttonOvalPath.AddClip ();  				context.DrawRadialGradient (buttonGradient'      new PointF (37' 63.23f)' 2.44f'      new PointF (37' 44.48f)' 23.14f'      CGGradientDrawingOptions.DrawsBeforeStartLocation | CGGradientDrawingOptions.DrawsAfterEndLocation);  				context.RestoreState ();    ////// buttonOval Inner Shadow  				var buttonOvalBorderRect = buttonOvalPath.Bounds;  				buttonOvalBorderRect.Inflate (buttonInnerShadowBlurRadius' buttonInnerShadowBlurRadius);  				buttonOvalBorderRect.Offset (-buttonInnerShadowOffset.Width' -buttonInnerShadowOffset.Height);  				buttonOvalBorderRect = RectangleF.Union (buttonOvalBorderRect' buttonOvalPath.Bounds);  				buttonOvalBorderRect.Inflate (1' 1);    				var buttonOvalNegativePath = UIBezierPath.FromRect (buttonOvalBorderRect);  				buttonOvalNegativePath.AppendPath (buttonOvalPath);  				buttonOvalNegativePath.UsesEvenOddFillRule = true;    				context.SaveState ();  				{  					var xOffset = buttonInnerShadowOffset.Width + (float)Math.Round (buttonOvalBorderRect.Width);  					var yOffset = buttonInnerShadowOffset.Height;  					context.SetShadowWithColor (          new SizeF (xOffset + (xOffset >= 0 ? 0.1f : -0.1f)' yOffset + (yOffset >= 0 ? 0.1f : -0.1f))'          buttonInnerShadowBlurRadius'          buttonInnerShadow);    					buttonOvalPath.AddClip ();  					var transform = CGAffineTransform.MakeTranslation (-(float)Math.Round (buttonOvalBorderRect.Width)' 0);  					buttonOvalNegativePath.ApplyTransform (transform);  					UIColor.Gray.SetFill ();  					buttonOvalNegativePath.Fill ();  				}  				context.RestoreState ();          //// flareOval Drawing  				var flareOvalPath = UIBezierPath.FromOval (new RectangleF (22' 14' 29' 15));  				context.SaveState ();  				flareOvalPath.AddClip ();  				context.DrawLinearGradient (buttonFlareGradient' new PointF (36.5f' 14)' new PointF (36.5f' 29)' 0);  				context.RestoreState ();      				// ------------- END PAINTCODE -------------  				  				  				  			}
Magic Number,PaintCode,BlueButton,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\BlueButton\BlueButton.cs,Draw,The following statement contains a magic number: using (var colorSpace = CGColorSpace.CreateDeviceRGB ()) {  				  				  				  				// ------------- START PAINTCODE -------------    //// Color Declarations  				UIColor upColorOut = UIColor.FromRGBA (0.79f' 0.79f' 0.79f' 1.00f);  				UIColor bottomColorDown = UIColor.FromRGBA (0.21f' 0.21f' 0.21f' 1.00f);  				UIColor upColorInner = UIColor.FromRGBA (0.17f' 0.18f' 0.20f' 1.00f);  				UIColor bottomColorInner = UIColor.FromRGBA (0.98f' 0.98f' 0.99f' 1.00f);      				UIColor buttonFlareUpColor = UIColor.FromRGBA (  					(buttonColorRGBA[0] * 0.3f + 0.7f)'  					(buttonColorRGBA[1] * 0.3f + 0.7f)'  					(buttonColorRGBA[2] * 0.3f + 0.7f)'  					(buttonColorRGBA[3] * 0.3f + 0.7f)  				);  				UIColor buttonTopColor = UIColor.FromRGBA (  					(buttonColorRGBA[0] * 0.8f)'  					(buttonColorRGBA[1] * 0.8f)'  					(buttonColorRGBA[2] * 0.8f)'  					(buttonColorRGBA[3] * 0.8f + 0.2f)  				);  				UIColor buttonBottomColor = UIColor.FromRGBA (  					(buttonColorRGBA[0] * 0 + 1)'  					(buttonColorRGBA[1] * 0 + 1)'  					(buttonColorRGBA[2] * 0 + 1)'  					(buttonColorRGBA[3] * 0 + 1)  				);  				UIColor buttonFlareBottomColor = UIColor.FromRGBA (  					(buttonColorRGBA[0] * 0.8f + 0.2f)'  					(buttonColorRGBA[1] * 0.8f + 0.2f)'  					(buttonColorRGBA[2] * 0.8f + 0.2f)'  					(buttonColorRGBA[3] * 0.8f + 0.2f)  				);  				UIColor flareWhite = UIColor.FromRGBA (1.00f' 1.00f' 1.00f' 0.83f);    //// Gradient Declarations  				var ringGradientColors = new CGColor [] {upColorOut.CGColor' bottomColorDown.CGColor};  				var ringGradientLocations = new float [] {0' 1};  				var ringGradient = new CGGradient (colorSpace' ringGradientColors' ringGradientLocations);  				var ringInnerGradientColors = new CGColor [] {upColorInner.CGColor' bottomColorInner.CGColor};  				var ringInnerGradientLocations = new float [] {0' 1};  				var ringInnerGradient = new CGGradient (colorSpace' ringInnerGradientColors' ringInnerGradientLocations);  				var buttonGradientColors = new CGColor [] {buttonBottomColor.CGColor' buttonTopColor.CGColor};  				var buttonGradientLocations = new float [] {0' 1};  				var buttonGradient = new CGGradient (colorSpace' buttonGradientColors' buttonGradientLocations);  				var overlayGradientColors = new CGColor [] {flareWhite.CGColor' UIColor.Clear.CGColor};  				var overlayGradientLocations = new float [] {0' 1};  				var overlayGradient = new CGGradient (colorSpace' overlayGradientColors' overlayGradientLocations);  				var buttonFlareGradientColors = new CGColor [] {buttonFlareUpColor.CGColor' buttonFlareBottomColor.CGColor};  				var buttonFlareGradientLocations = new float [] {0' 1};  				var buttonFlareGradient = new CGGradient (colorSpace' buttonFlareGradientColors' buttonFlareGradientLocations);    //// Shadow Declarations  				var buttonInnerShadow = UIColor.Black.CGColor;  				var buttonInnerShadowOffset = new SizeF (0' -0);  				var buttonInnerShadowBlurRadius = 5;  				var buttonOuterShadow = UIColor.Black.CGColor;  				var buttonOuterShadowOffset = new SizeF (0' 2);  				  				  				var buttonOuterShadowBlurRadius = isPressed ? 2 : 5;	// ADDED this code after PaintCode      //// outerOval Drawing  				var outerOvalPath = UIBezierPath.FromOval (new RectangleF (5' 5' 63' 63));  				context.SaveState ();  				context.SetShadowWithColor (buttonOuterShadowOffset' buttonOuterShadowBlurRadius' buttonOuterShadow);  				context.BeginTransparencyLayer (null);  				outerOvalPath.AddClip ();  				context.DrawLinearGradient (ringGradient' new PointF (36.5f' 5)' new PointF (36.5f' 68)' 0);  				context.EndTransparencyLayer ();  				context.RestoreState ();        //// overlayOval Drawing  				var overlayOvalPath = UIBezierPath.FromOval (new RectangleF (5' 5' 63' 63));  				context.SaveState ();  				overlayOvalPath.AddClip ();  				context.DrawRadialGradient (overlayGradient'      new PointF (36.5f' 12.23f)' 17.75f'      new PointF (36.5f' 36.5f)' 44.61f'      CGGradientDrawingOptions.DrawsBeforeStartLocation | CGGradientDrawingOptions.DrawsAfterEndLocation);  				context.RestoreState ();        //// innerOval Drawing  				var innerOvalPath = UIBezierPath.FromOval (new RectangleF (12' 12' 49' 49));  				context.SaveState ();  				innerOvalPath.AddClip ();  				context.DrawLinearGradient (ringInnerGradient' new PointF (36.5f' 12)' new PointF (36.5f' 61)' 0);  				context.RestoreState ();        //// buttonOval Drawing  				var buttonOvalPath = UIBezierPath.FromOval (new RectangleF (14' 13' 46' 46));  				context.SaveState ();  				buttonOvalPath.AddClip ();  				context.DrawRadialGradient (buttonGradient'      new PointF (37' 63.23f)' 2.44f'      new PointF (37' 44.48f)' 23.14f'      CGGradientDrawingOptions.DrawsBeforeStartLocation | CGGradientDrawingOptions.DrawsAfterEndLocation);  				context.RestoreState ();    ////// buttonOval Inner Shadow  				var buttonOvalBorderRect = buttonOvalPath.Bounds;  				buttonOvalBorderRect.Inflate (buttonInnerShadowBlurRadius' buttonInnerShadowBlurRadius);  				buttonOvalBorderRect.Offset (-buttonInnerShadowOffset.Width' -buttonInnerShadowOffset.Height);  				buttonOvalBorderRect = RectangleF.Union (buttonOvalBorderRect' buttonOvalPath.Bounds);  				buttonOvalBorderRect.Inflate (1' 1);    				var buttonOvalNegativePath = UIBezierPath.FromRect (buttonOvalBorderRect);  				buttonOvalNegativePath.AppendPath (buttonOvalPath);  				buttonOvalNegativePath.UsesEvenOddFillRule = true;    				context.SaveState ();  				{  					var xOffset = buttonInnerShadowOffset.Width + (float)Math.Round (buttonOvalBorderRect.Width);  					var yOffset = buttonInnerShadowOffset.Height;  					context.SetShadowWithColor (          new SizeF (xOffset + (xOffset >= 0 ? 0.1f : -0.1f)' yOffset + (yOffset >= 0 ? 0.1f : -0.1f))'          buttonInnerShadowBlurRadius'          buttonInnerShadow);    					buttonOvalPath.AddClip ();  					var transform = CGAffineTransform.MakeTranslation (-(float)Math.Round (buttonOvalBorderRect.Width)' 0);  					buttonOvalNegativePath.ApplyTransform (transform);  					UIColor.Gray.SetFill ();  					buttonOvalNegativePath.Fill ();  				}  				context.RestoreState ();          //// flareOval Drawing  				var flareOvalPath = UIBezierPath.FromOval (new RectangleF (22' 14' 29' 15));  				context.SaveState ();  				flareOvalPath.AddClip ();  				context.DrawLinearGradient (buttonFlareGradient' new PointF (36.5f' 14)' new PointF (36.5f' 29)' 0);  				context.RestoreState ();      				// ------------- END PAINTCODE -------------  				  				  				  			}
Magic Number,PaintCode,BlueButton,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\BlueButton\BlueButton.cs,Draw,The following statement contains a magic number: using (var colorSpace = CGColorSpace.CreateDeviceRGB ()) {  				  				  				  				// ------------- START PAINTCODE -------------    //// Color Declarations  				UIColor upColorOut = UIColor.FromRGBA (0.79f' 0.79f' 0.79f' 1.00f);  				UIColor bottomColorDown = UIColor.FromRGBA (0.21f' 0.21f' 0.21f' 1.00f);  				UIColor upColorInner = UIColor.FromRGBA (0.17f' 0.18f' 0.20f' 1.00f);  				UIColor bottomColorInner = UIColor.FromRGBA (0.98f' 0.98f' 0.99f' 1.00f);      				UIColor buttonFlareUpColor = UIColor.FromRGBA (  					(buttonColorRGBA[0] * 0.3f + 0.7f)'  					(buttonColorRGBA[1] * 0.3f + 0.7f)'  					(buttonColorRGBA[2] * 0.3f + 0.7f)'  					(buttonColorRGBA[3] * 0.3f + 0.7f)  				);  				UIColor buttonTopColor = UIColor.FromRGBA (  					(buttonColorRGBA[0] * 0.8f)'  					(buttonColorRGBA[1] * 0.8f)'  					(buttonColorRGBA[2] * 0.8f)'  					(buttonColorRGBA[3] * 0.8f + 0.2f)  				);  				UIColor buttonBottomColor = UIColor.FromRGBA (  					(buttonColorRGBA[0] * 0 + 1)'  					(buttonColorRGBA[1] * 0 + 1)'  					(buttonColorRGBA[2] * 0 + 1)'  					(buttonColorRGBA[3] * 0 + 1)  				);  				UIColor buttonFlareBottomColor = UIColor.FromRGBA (  					(buttonColorRGBA[0] * 0.8f + 0.2f)'  					(buttonColorRGBA[1] * 0.8f + 0.2f)'  					(buttonColorRGBA[2] * 0.8f + 0.2f)'  					(buttonColorRGBA[3] * 0.8f + 0.2f)  				);  				UIColor flareWhite = UIColor.FromRGBA (1.00f' 1.00f' 1.00f' 0.83f);    //// Gradient Declarations  				var ringGradientColors = new CGColor [] {upColorOut.CGColor' bottomColorDown.CGColor};  				var ringGradientLocations = new float [] {0' 1};  				var ringGradient = new CGGradient (colorSpace' ringGradientColors' ringGradientLocations);  				var ringInnerGradientColors = new CGColor [] {upColorInner.CGColor' bottomColorInner.CGColor};  				var ringInnerGradientLocations = new float [] {0' 1};  				var ringInnerGradient = new CGGradient (colorSpace' ringInnerGradientColors' ringInnerGradientLocations);  				var buttonGradientColors = new CGColor [] {buttonBottomColor.CGColor' buttonTopColor.CGColor};  				var buttonGradientLocations = new float [] {0' 1};  				var buttonGradient = new CGGradient (colorSpace' buttonGradientColors' buttonGradientLocations);  				var overlayGradientColors = new CGColor [] {flareWhite.CGColor' UIColor.Clear.CGColor};  				var overlayGradientLocations = new float [] {0' 1};  				var overlayGradient = new CGGradient (colorSpace' overlayGradientColors' overlayGradientLocations);  				var buttonFlareGradientColors = new CGColor [] {buttonFlareUpColor.CGColor' buttonFlareBottomColor.CGColor};  				var buttonFlareGradientLocations = new float [] {0' 1};  				var buttonFlareGradient = new CGGradient (colorSpace' buttonFlareGradientColors' buttonFlareGradientLocations);    //// Shadow Declarations  				var buttonInnerShadow = UIColor.Black.CGColor;  				var buttonInnerShadowOffset = new SizeF (0' -0);  				var buttonInnerShadowBlurRadius = 5;  				var buttonOuterShadow = UIColor.Black.CGColor;  				var buttonOuterShadowOffset = new SizeF (0' 2);  				  				  				var buttonOuterShadowBlurRadius = isPressed ? 2 : 5;	// ADDED this code after PaintCode      //// outerOval Drawing  				var outerOvalPath = UIBezierPath.FromOval (new RectangleF (5' 5' 63' 63));  				context.SaveState ();  				context.SetShadowWithColor (buttonOuterShadowOffset' buttonOuterShadowBlurRadius' buttonOuterShadow);  				context.BeginTransparencyLayer (null);  				outerOvalPath.AddClip ();  				context.DrawLinearGradient (ringGradient' new PointF (36.5f' 5)' new PointF (36.5f' 68)' 0);  				context.EndTransparencyLayer ();  				context.RestoreState ();        //// overlayOval Drawing  				var overlayOvalPath = UIBezierPath.FromOval (new RectangleF (5' 5' 63' 63));  				context.SaveState ();  				overlayOvalPath.AddClip ();  				context.DrawRadialGradient (overlayGradient'      new PointF (36.5f' 12.23f)' 17.75f'      new PointF (36.5f' 36.5f)' 44.61f'      CGGradientDrawingOptions.DrawsBeforeStartLocation | CGGradientDrawingOptions.DrawsAfterEndLocation);  				context.RestoreState ();        //// innerOval Drawing  				var innerOvalPath = UIBezierPath.FromOval (new RectangleF (12' 12' 49' 49));  				context.SaveState ();  				innerOvalPath.AddClip ();  				context.DrawLinearGradient (ringInnerGradient' new PointF (36.5f' 12)' new PointF (36.5f' 61)' 0);  				context.RestoreState ();        //// buttonOval Drawing  				var buttonOvalPath = UIBezierPath.FromOval (new RectangleF (14' 13' 46' 46));  				context.SaveState ();  				buttonOvalPath.AddClip ();  				context.DrawRadialGradient (buttonGradient'      new PointF (37' 63.23f)' 2.44f'      new PointF (37' 44.48f)' 23.14f'      CGGradientDrawingOptions.DrawsBeforeStartLocation | CGGradientDrawingOptions.DrawsAfterEndLocation);  				context.RestoreState ();    ////// buttonOval Inner Shadow  				var buttonOvalBorderRect = buttonOvalPath.Bounds;  				buttonOvalBorderRect.Inflate (buttonInnerShadowBlurRadius' buttonInnerShadowBlurRadius);  				buttonOvalBorderRect.Offset (-buttonInnerShadowOffset.Width' -buttonInnerShadowOffset.Height);  				buttonOvalBorderRect = RectangleF.Union (buttonOvalBorderRect' buttonOvalPath.Bounds);  				buttonOvalBorderRect.Inflate (1' 1);    				var buttonOvalNegativePath = UIBezierPath.FromRect (buttonOvalBorderRect);  				buttonOvalNegativePath.AppendPath (buttonOvalPath);  				buttonOvalNegativePath.UsesEvenOddFillRule = true;    				context.SaveState ();  				{  					var xOffset = buttonInnerShadowOffset.Width + (float)Math.Round (buttonOvalBorderRect.Width);  					var yOffset = buttonInnerShadowOffset.Height;  					context.SetShadowWithColor (          new SizeF (xOffset + (xOffset >= 0 ? 0.1f : -0.1f)' yOffset + (yOffset >= 0 ? 0.1f : -0.1f))'          buttonInnerShadowBlurRadius'          buttonInnerShadow);    					buttonOvalPath.AddClip ();  					var transform = CGAffineTransform.MakeTranslation (-(float)Math.Round (buttonOvalBorderRect.Width)' 0);  					buttonOvalNegativePath.ApplyTransform (transform);  					UIColor.Gray.SetFill ();  					buttonOvalNegativePath.Fill ();  				}  				context.RestoreState ();          //// flareOval Drawing  				var flareOvalPath = UIBezierPath.FromOval (new RectangleF (22' 14' 29' 15));  				context.SaveState ();  				flareOvalPath.AddClip ();  				context.DrawLinearGradient (buttonFlareGradient' new PointF (36.5f' 14)' new PointF (36.5f' 29)' 0);  				context.RestoreState ();      				// ------------- END PAINTCODE -------------  				  				  				  			}
Magic Number,PaintCode,BlueButton,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\BlueButton\BlueButton.cs,Draw,The following statement contains a magic number: using (var colorSpace = CGColorSpace.CreateDeviceRGB ()) {  				  				  				  				// ------------- START PAINTCODE -------------    //// Color Declarations  				UIColor upColorOut = UIColor.FromRGBA (0.79f' 0.79f' 0.79f' 1.00f);  				UIColor bottomColorDown = UIColor.FromRGBA (0.21f' 0.21f' 0.21f' 1.00f);  				UIColor upColorInner = UIColor.FromRGBA (0.17f' 0.18f' 0.20f' 1.00f);  				UIColor bottomColorInner = UIColor.FromRGBA (0.98f' 0.98f' 0.99f' 1.00f);      				UIColor buttonFlareUpColor = UIColor.FromRGBA (  					(buttonColorRGBA[0] * 0.3f + 0.7f)'  					(buttonColorRGBA[1] * 0.3f + 0.7f)'  					(buttonColorRGBA[2] * 0.3f + 0.7f)'  					(buttonColorRGBA[3] * 0.3f + 0.7f)  				);  				UIColor buttonTopColor = UIColor.FromRGBA (  					(buttonColorRGBA[0] * 0.8f)'  					(buttonColorRGBA[1] * 0.8f)'  					(buttonColorRGBA[2] * 0.8f)'  					(buttonColorRGBA[3] * 0.8f + 0.2f)  				);  				UIColor buttonBottomColor = UIColor.FromRGBA (  					(buttonColorRGBA[0] * 0 + 1)'  					(buttonColorRGBA[1] * 0 + 1)'  					(buttonColorRGBA[2] * 0 + 1)'  					(buttonColorRGBA[3] * 0 + 1)  				);  				UIColor buttonFlareBottomColor = UIColor.FromRGBA (  					(buttonColorRGBA[0] * 0.8f + 0.2f)'  					(buttonColorRGBA[1] * 0.8f + 0.2f)'  					(buttonColorRGBA[2] * 0.8f + 0.2f)'  					(buttonColorRGBA[3] * 0.8f + 0.2f)  				);  				UIColor flareWhite = UIColor.FromRGBA (1.00f' 1.00f' 1.00f' 0.83f);    //// Gradient Declarations  				var ringGradientColors = new CGColor [] {upColorOut.CGColor' bottomColorDown.CGColor};  				var ringGradientLocations = new float [] {0' 1};  				var ringGradient = new CGGradient (colorSpace' ringGradientColors' ringGradientLocations);  				var ringInnerGradientColors = new CGColor [] {upColorInner.CGColor' bottomColorInner.CGColor};  				var ringInnerGradientLocations = new float [] {0' 1};  				var ringInnerGradient = new CGGradient (colorSpace' ringInnerGradientColors' ringInnerGradientLocations);  				var buttonGradientColors = new CGColor [] {buttonBottomColor.CGColor' buttonTopColor.CGColor};  				var buttonGradientLocations = new float [] {0' 1};  				var buttonGradient = new CGGradient (colorSpace' buttonGradientColors' buttonGradientLocations);  				var overlayGradientColors = new CGColor [] {flareWhite.CGColor' UIColor.Clear.CGColor};  				var overlayGradientLocations = new float [] {0' 1};  				var overlayGradient = new CGGradient (colorSpace' overlayGradientColors' overlayGradientLocations);  				var buttonFlareGradientColors = new CGColor [] {buttonFlareUpColor.CGColor' buttonFlareBottomColor.CGColor};  				var buttonFlareGradientLocations = new float [] {0' 1};  				var buttonFlareGradient = new CGGradient (colorSpace' buttonFlareGradientColors' buttonFlareGradientLocations);    //// Shadow Declarations  				var buttonInnerShadow = UIColor.Black.CGColor;  				var buttonInnerShadowOffset = new SizeF (0' -0);  				var buttonInnerShadowBlurRadius = 5;  				var buttonOuterShadow = UIColor.Black.CGColor;  				var buttonOuterShadowOffset = new SizeF (0' 2);  				  				  				var buttonOuterShadowBlurRadius = isPressed ? 2 : 5;	// ADDED this code after PaintCode      //// outerOval Drawing  				var outerOvalPath = UIBezierPath.FromOval (new RectangleF (5' 5' 63' 63));  				context.SaveState ();  				context.SetShadowWithColor (buttonOuterShadowOffset' buttonOuterShadowBlurRadius' buttonOuterShadow);  				context.BeginTransparencyLayer (null);  				outerOvalPath.AddClip ();  				context.DrawLinearGradient (ringGradient' new PointF (36.5f' 5)' new PointF (36.5f' 68)' 0);  				context.EndTransparencyLayer ();  				context.RestoreState ();        //// overlayOval Drawing  				var overlayOvalPath = UIBezierPath.FromOval (new RectangleF (5' 5' 63' 63));  				context.SaveState ();  				overlayOvalPath.AddClip ();  				context.DrawRadialGradient (overlayGradient'      new PointF (36.5f' 12.23f)' 17.75f'      new PointF (36.5f' 36.5f)' 44.61f'      CGGradientDrawingOptions.DrawsBeforeStartLocation | CGGradientDrawingOptions.DrawsAfterEndLocation);  				context.RestoreState ();        //// innerOval Drawing  				var innerOvalPath = UIBezierPath.FromOval (new RectangleF (12' 12' 49' 49));  				context.SaveState ();  				innerOvalPath.AddClip ();  				context.DrawLinearGradient (ringInnerGradient' new PointF (36.5f' 12)' new PointF (36.5f' 61)' 0);  				context.RestoreState ();        //// buttonOval Drawing  				var buttonOvalPath = UIBezierPath.FromOval (new RectangleF (14' 13' 46' 46));  				context.SaveState ();  				buttonOvalPath.AddClip ();  				context.DrawRadialGradient (buttonGradient'      new PointF (37' 63.23f)' 2.44f'      new PointF (37' 44.48f)' 23.14f'      CGGradientDrawingOptions.DrawsBeforeStartLocation | CGGradientDrawingOptions.DrawsAfterEndLocation);  				context.RestoreState ();    ////// buttonOval Inner Shadow  				var buttonOvalBorderRect = buttonOvalPath.Bounds;  				buttonOvalBorderRect.Inflate (buttonInnerShadowBlurRadius' buttonInnerShadowBlurRadius);  				buttonOvalBorderRect.Offset (-buttonInnerShadowOffset.Width' -buttonInnerShadowOffset.Height);  				buttonOvalBorderRect = RectangleF.Union (buttonOvalBorderRect' buttonOvalPath.Bounds);  				buttonOvalBorderRect.Inflate (1' 1);    				var buttonOvalNegativePath = UIBezierPath.FromRect (buttonOvalBorderRect);  				buttonOvalNegativePath.AppendPath (buttonOvalPath);  				buttonOvalNegativePath.UsesEvenOddFillRule = true;    				context.SaveState ();  				{  					var xOffset = buttonInnerShadowOffset.Width + (float)Math.Round (buttonOvalBorderRect.Width);  					var yOffset = buttonInnerShadowOffset.Height;  					context.SetShadowWithColor (          new SizeF (xOffset + (xOffset >= 0 ? 0.1f : -0.1f)' yOffset + (yOffset >= 0 ? 0.1f : -0.1f))'          buttonInnerShadowBlurRadius'          buttonInnerShadow);    					buttonOvalPath.AddClip ();  					var transform = CGAffineTransform.MakeTranslation (-(float)Math.Round (buttonOvalBorderRect.Width)' 0);  					buttonOvalNegativePath.ApplyTransform (transform);  					UIColor.Gray.SetFill ();  					buttonOvalNegativePath.Fill ();  				}  				context.RestoreState ();          //// flareOval Drawing  				var flareOvalPath = UIBezierPath.FromOval (new RectangleF (22' 14' 29' 15));  				context.SaveState ();  				flareOvalPath.AddClip ();  				context.DrawLinearGradient (buttonFlareGradient' new PointF (36.5f' 14)' new PointF (36.5f' 29)' 0);  				context.RestoreState ();      				// ------------- END PAINTCODE -------------  				  				  				  			}
Magic Number,PaintCode,BlueButton,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\BlueButton\BlueButton.cs,Draw,The following statement contains a magic number: using (var colorSpace = CGColorSpace.CreateDeviceRGB ()) {  				  				  				  				// ------------- START PAINTCODE -------------    //// Color Declarations  				UIColor upColorOut = UIColor.FromRGBA (0.79f' 0.79f' 0.79f' 1.00f);  				UIColor bottomColorDown = UIColor.FromRGBA (0.21f' 0.21f' 0.21f' 1.00f);  				UIColor upColorInner = UIColor.FromRGBA (0.17f' 0.18f' 0.20f' 1.00f);  				UIColor bottomColorInner = UIColor.FromRGBA (0.98f' 0.98f' 0.99f' 1.00f);      				UIColor buttonFlareUpColor = UIColor.FromRGBA (  					(buttonColorRGBA[0] * 0.3f + 0.7f)'  					(buttonColorRGBA[1] * 0.3f + 0.7f)'  					(buttonColorRGBA[2] * 0.3f + 0.7f)'  					(buttonColorRGBA[3] * 0.3f + 0.7f)  				);  				UIColor buttonTopColor = UIColor.FromRGBA (  					(buttonColorRGBA[0] * 0.8f)'  					(buttonColorRGBA[1] * 0.8f)'  					(buttonColorRGBA[2] * 0.8f)'  					(buttonColorRGBA[3] * 0.8f + 0.2f)  				);  				UIColor buttonBottomColor = UIColor.FromRGBA (  					(buttonColorRGBA[0] * 0 + 1)'  					(buttonColorRGBA[1] * 0 + 1)'  					(buttonColorRGBA[2] * 0 + 1)'  					(buttonColorRGBA[3] * 0 + 1)  				);  				UIColor buttonFlareBottomColor = UIColor.FromRGBA (  					(buttonColorRGBA[0] * 0.8f + 0.2f)'  					(buttonColorRGBA[1] * 0.8f + 0.2f)'  					(buttonColorRGBA[2] * 0.8f + 0.2f)'  					(buttonColorRGBA[3] * 0.8f + 0.2f)  				);  				UIColor flareWhite = UIColor.FromRGBA (1.00f' 1.00f' 1.00f' 0.83f);    //// Gradient Declarations  				var ringGradientColors = new CGColor [] {upColorOut.CGColor' bottomColorDown.CGColor};  				var ringGradientLocations = new float [] {0' 1};  				var ringGradient = new CGGradient (colorSpace' ringGradientColors' ringGradientLocations);  				var ringInnerGradientColors = new CGColor [] {upColorInner.CGColor' bottomColorInner.CGColor};  				var ringInnerGradientLocations = new float [] {0' 1};  				var ringInnerGradient = new CGGradient (colorSpace' ringInnerGradientColors' ringInnerGradientLocations);  				var buttonGradientColors = new CGColor [] {buttonBottomColor.CGColor' buttonTopColor.CGColor};  				var buttonGradientLocations = new float [] {0' 1};  				var buttonGradient = new CGGradient (colorSpace' buttonGradientColors' buttonGradientLocations);  				var overlayGradientColors = new CGColor [] {flareWhite.CGColor' UIColor.Clear.CGColor};  				var overlayGradientLocations = new float [] {0' 1};  				var overlayGradient = new CGGradient (colorSpace' overlayGradientColors' overlayGradientLocations);  				var buttonFlareGradientColors = new CGColor [] {buttonFlareUpColor.CGColor' buttonFlareBottomColor.CGColor};  				var buttonFlareGradientLocations = new float [] {0' 1};  				var buttonFlareGradient = new CGGradient (colorSpace' buttonFlareGradientColors' buttonFlareGradientLocations);    //// Shadow Declarations  				var buttonInnerShadow = UIColor.Black.CGColor;  				var buttonInnerShadowOffset = new SizeF (0' -0);  				var buttonInnerShadowBlurRadius = 5;  				var buttonOuterShadow = UIColor.Black.CGColor;  				var buttonOuterShadowOffset = new SizeF (0' 2);  				  				  				var buttonOuterShadowBlurRadius = isPressed ? 2 : 5;	// ADDED this code after PaintCode      //// outerOval Drawing  				var outerOvalPath = UIBezierPath.FromOval (new RectangleF (5' 5' 63' 63));  				context.SaveState ();  				context.SetShadowWithColor (buttonOuterShadowOffset' buttonOuterShadowBlurRadius' buttonOuterShadow);  				context.BeginTransparencyLayer (null);  				outerOvalPath.AddClip ();  				context.DrawLinearGradient (ringGradient' new PointF (36.5f' 5)' new PointF (36.5f' 68)' 0);  				context.EndTransparencyLayer ();  				context.RestoreState ();        //// overlayOval Drawing  				var overlayOvalPath = UIBezierPath.FromOval (new RectangleF (5' 5' 63' 63));  				context.SaveState ();  				overlayOvalPath.AddClip ();  				context.DrawRadialGradient (overlayGradient'      new PointF (36.5f' 12.23f)' 17.75f'      new PointF (36.5f' 36.5f)' 44.61f'      CGGradientDrawingOptions.DrawsBeforeStartLocation | CGGradientDrawingOptions.DrawsAfterEndLocation);  				context.RestoreState ();        //// innerOval Drawing  				var innerOvalPath = UIBezierPath.FromOval (new RectangleF (12' 12' 49' 49));  				context.SaveState ();  				innerOvalPath.AddClip ();  				context.DrawLinearGradient (ringInnerGradient' new PointF (36.5f' 12)' new PointF (36.5f' 61)' 0);  				context.RestoreState ();        //// buttonOval Drawing  				var buttonOvalPath = UIBezierPath.FromOval (new RectangleF (14' 13' 46' 46));  				context.SaveState ();  				buttonOvalPath.AddClip ();  				context.DrawRadialGradient (buttonGradient'      new PointF (37' 63.23f)' 2.44f'      new PointF (37' 44.48f)' 23.14f'      CGGradientDrawingOptions.DrawsBeforeStartLocation | CGGradientDrawingOptions.DrawsAfterEndLocation);  				context.RestoreState ();    ////// buttonOval Inner Shadow  				var buttonOvalBorderRect = buttonOvalPath.Bounds;  				buttonOvalBorderRect.Inflate (buttonInnerShadowBlurRadius' buttonInnerShadowBlurRadius);  				buttonOvalBorderRect.Offset (-buttonInnerShadowOffset.Width' -buttonInnerShadowOffset.Height);  				buttonOvalBorderRect = RectangleF.Union (buttonOvalBorderRect' buttonOvalPath.Bounds);  				buttonOvalBorderRect.Inflate (1' 1);    				var buttonOvalNegativePath = UIBezierPath.FromRect (buttonOvalBorderRect);  				buttonOvalNegativePath.AppendPath (buttonOvalPath);  				buttonOvalNegativePath.UsesEvenOddFillRule = true;    				context.SaveState ();  				{  					var xOffset = buttonInnerShadowOffset.Width + (float)Math.Round (buttonOvalBorderRect.Width);  					var yOffset = buttonInnerShadowOffset.Height;  					context.SetShadowWithColor (          new SizeF (xOffset + (xOffset >= 0 ? 0.1f : -0.1f)' yOffset + (yOffset >= 0 ? 0.1f : -0.1f))'          buttonInnerShadowBlurRadius'          buttonInnerShadow);    					buttonOvalPath.AddClip ();  					var transform = CGAffineTransform.MakeTranslation (-(float)Math.Round (buttonOvalBorderRect.Width)' 0);  					buttonOvalNegativePath.ApplyTransform (transform);  					UIColor.Gray.SetFill ();  					buttonOvalNegativePath.Fill ();  				}  				context.RestoreState ();          //// flareOval Drawing  				var flareOvalPath = UIBezierPath.FromOval (new RectangleF (22' 14' 29' 15));  				context.SaveState ();  				flareOvalPath.AddClip ();  				context.DrawLinearGradient (buttonFlareGradient' new PointF (36.5f' 14)' new PointF (36.5f' 29)' 0);  				context.RestoreState ();      				// ------------- END PAINTCODE -------------  				  				  				  			}
Magic Number,PaintCode,BlueButton,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\BlueButton\BlueButton.cs,Draw,The following statement contains a magic number: using (var colorSpace = CGColorSpace.CreateDeviceRGB ()) {  				  				  				  				// ------------- START PAINTCODE -------------    //// Color Declarations  				UIColor upColorOut = UIColor.FromRGBA (0.79f' 0.79f' 0.79f' 1.00f);  				UIColor bottomColorDown = UIColor.FromRGBA (0.21f' 0.21f' 0.21f' 1.00f);  				UIColor upColorInner = UIColor.FromRGBA (0.17f' 0.18f' 0.20f' 1.00f);  				UIColor bottomColorInner = UIColor.FromRGBA (0.98f' 0.98f' 0.99f' 1.00f);      				UIColor buttonFlareUpColor = UIColor.FromRGBA (  					(buttonColorRGBA[0] * 0.3f + 0.7f)'  					(buttonColorRGBA[1] * 0.3f + 0.7f)'  					(buttonColorRGBA[2] * 0.3f + 0.7f)'  					(buttonColorRGBA[3] * 0.3f + 0.7f)  				);  				UIColor buttonTopColor = UIColor.FromRGBA (  					(buttonColorRGBA[0] * 0.8f)'  					(buttonColorRGBA[1] * 0.8f)'  					(buttonColorRGBA[2] * 0.8f)'  					(buttonColorRGBA[3] * 0.8f + 0.2f)  				);  				UIColor buttonBottomColor = UIColor.FromRGBA (  					(buttonColorRGBA[0] * 0 + 1)'  					(buttonColorRGBA[1] * 0 + 1)'  					(buttonColorRGBA[2] * 0 + 1)'  					(buttonColorRGBA[3] * 0 + 1)  				);  				UIColor buttonFlareBottomColor = UIColor.FromRGBA (  					(buttonColorRGBA[0] * 0.8f + 0.2f)'  					(buttonColorRGBA[1] * 0.8f + 0.2f)'  					(buttonColorRGBA[2] * 0.8f + 0.2f)'  					(buttonColorRGBA[3] * 0.8f + 0.2f)  				);  				UIColor flareWhite = UIColor.FromRGBA (1.00f' 1.00f' 1.00f' 0.83f);    //// Gradient Declarations  				var ringGradientColors = new CGColor [] {upColorOut.CGColor' bottomColorDown.CGColor};  				var ringGradientLocations = new float [] {0' 1};  				var ringGradient = new CGGradient (colorSpace' ringGradientColors' ringGradientLocations);  				var ringInnerGradientColors = new CGColor [] {upColorInner.CGColor' bottomColorInner.CGColor};  				var ringInnerGradientLocations = new float [] {0' 1};  				var ringInnerGradient = new CGGradient (colorSpace' ringInnerGradientColors' ringInnerGradientLocations);  				var buttonGradientColors = new CGColor [] {buttonBottomColor.CGColor' buttonTopColor.CGColor};  				var buttonGradientLocations = new float [] {0' 1};  				var buttonGradient = new CGGradient (colorSpace' buttonGradientColors' buttonGradientLocations);  				var overlayGradientColors = new CGColor [] {flareWhite.CGColor' UIColor.Clear.CGColor};  				var overlayGradientLocations = new float [] {0' 1};  				var overlayGradient = new CGGradient (colorSpace' overlayGradientColors' overlayGradientLocations);  				var buttonFlareGradientColors = new CGColor [] {buttonFlareUpColor.CGColor' buttonFlareBottomColor.CGColor};  				var buttonFlareGradientLocations = new float [] {0' 1};  				var buttonFlareGradient = new CGGradient (colorSpace' buttonFlareGradientColors' buttonFlareGradientLocations);    //// Shadow Declarations  				var buttonInnerShadow = UIColor.Black.CGColor;  				var buttonInnerShadowOffset = new SizeF (0' -0);  				var buttonInnerShadowBlurRadius = 5;  				var buttonOuterShadow = UIColor.Black.CGColor;  				var buttonOuterShadowOffset = new SizeF (0' 2);  				  				  				var buttonOuterShadowBlurRadius = isPressed ? 2 : 5;	// ADDED this code after PaintCode      //// outerOval Drawing  				var outerOvalPath = UIBezierPath.FromOval (new RectangleF (5' 5' 63' 63));  				context.SaveState ();  				context.SetShadowWithColor (buttonOuterShadowOffset' buttonOuterShadowBlurRadius' buttonOuterShadow);  				context.BeginTransparencyLayer (null);  				outerOvalPath.AddClip ();  				context.DrawLinearGradient (ringGradient' new PointF (36.5f' 5)' new PointF (36.5f' 68)' 0);  				context.EndTransparencyLayer ();  				context.RestoreState ();        //// overlayOval Drawing  				var overlayOvalPath = UIBezierPath.FromOval (new RectangleF (5' 5' 63' 63));  				context.SaveState ();  				overlayOvalPath.AddClip ();  				context.DrawRadialGradient (overlayGradient'      new PointF (36.5f' 12.23f)' 17.75f'      new PointF (36.5f' 36.5f)' 44.61f'      CGGradientDrawingOptions.DrawsBeforeStartLocation | CGGradientDrawingOptions.DrawsAfterEndLocation);  				context.RestoreState ();        //// innerOval Drawing  				var innerOvalPath = UIBezierPath.FromOval (new RectangleF (12' 12' 49' 49));  				context.SaveState ();  				innerOvalPath.AddClip ();  				context.DrawLinearGradient (ringInnerGradient' new PointF (36.5f' 12)' new PointF (36.5f' 61)' 0);  				context.RestoreState ();        //// buttonOval Drawing  				var buttonOvalPath = UIBezierPath.FromOval (new RectangleF (14' 13' 46' 46));  				context.SaveState ();  				buttonOvalPath.AddClip ();  				context.DrawRadialGradient (buttonGradient'      new PointF (37' 63.23f)' 2.44f'      new PointF (37' 44.48f)' 23.14f'      CGGradientDrawingOptions.DrawsBeforeStartLocation | CGGradientDrawingOptions.DrawsAfterEndLocation);  				context.RestoreState ();    ////// buttonOval Inner Shadow  				var buttonOvalBorderRect = buttonOvalPath.Bounds;  				buttonOvalBorderRect.Inflate (buttonInnerShadowBlurRadius' buttonInnerShadowBlurRadius);  				buttonOvalBorderRect.Offset (-buttonInnerShadowOffset.Width' -buttonInnerShadowOffset.Height);  				buttonOvalBorderRect = RectangleF.Union (buttonOvalBorderRect' buttonOvalPath.Bounds);  				buttonOvalBorderRect.Inflate (1' 1);    				var buttonOvalNegativePath = UIBezierPath.FromRect (buttonOvalBorderRect);  				buttonOvalNegativePath.AppendPath (buttonOvalPath);  				buttonOvalNegativePath.UsesEvenOddFillRule = true;    				context.SaveState ();  				{  					var xOffset = buttonInnerShadowOffset.Width + (float)Math.Round (buttonOvalBorderRect.Width);  					var yOffset = buttonInnerShadowOffset.Height;  					context.SetShadowWithColor (          new SizeF (xOffset + (xOffset >= 0 ? 0.1f : -0.1f)' yOffset + (yOffset >= 0 ? 0.1f : -0.1f))'          buttonInnerShadowBlurRadius'          buttonInnerShadow);    					buttonOvalPath.AddClip ();  					var transform = CGAffineTransform.MakeTranslation (-(float)Math.Round (buttonOvalBorderRect.Width)' 0);  					buttonOvalNegativePath.ApplyTransform (transform);  					UIColor.Gray.SetFill ();  					buttonOvalNegativePath.Fill ();  				}  				context.RestoreState ();          //// flareOval Drawing  				var flareOvalPath = UIBezierPath.FromOval (new RectangleF (22' 14' 29' 15));  				context.SaveState ();  				flareOvalPath.AddClip ();  				context.DrawLinearGradient (buttonFlareGradient' new PointF (36.5f' 14)' new PointF (36.5f' 29)' 0);  				context.RestoreState ();      				// ------------- END PAINTCODE -------------  				  				  				  			}
Magic Number,PaintCode,BlueButton,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\BlueButton\BlueButton.cs,Draw,The following statement contains a magic number: using (var colorSpace = CGColorSpace.CreateDeviceRGB ()) {  				  				  				  				// ------------- START PAINTCODE -------------    //// Color Declarations  				UIColor upColorOut = UIColor.FromRGBA (0.79f' 0.79f' 0.79f' 1.00f);  				UIColor bottomColorDown = UIColor.FromRGBA (0.21f' 0.21f' 0.21f' 1.00f);  				UIColor upColorInner = UIColor.FromRGBA (0.17f' 0.18f' 0.20f' 1.00f);  				UIColor bottomColorInner = UIColor.FromRGBA (0.98f' 0.98f' 0.99f' 1.00f);      				UIColor buttonFlareUpColor = UIColor.FromRGBA (  					(buttonColorRGBA[0] * 0.3f + 0.7f)'  					(buttonColorRGBA[1] * 0.3f + 0.7f)'  					(buttonColorRGBA[2] * 0.3f + 0.7f)'  					(buttonColorRGBA[3] * 0.3f + 0.7f)  				);  				UIColor buttonTopColor = UIColor.FromRGBA (  					(buttonColorRGBA[0] * 0.8f)'  					(buttonColorRGBA[1] * 0.8f)'  					(buttonColorRGBA[2] * 0.8f)'  					(buttonColorRGBA[3] * 0.8f + 0.2f)  				);  				UIColor buttonBottomColor = UIColor.FromRGBA (  					(buttonColorRGBA[0] * 0 + 1)'  					(buttonColorRGBA[1] * 0 + 1)'  					(buttonColorRGBA[2] * 0 + 1)'  					(buttonColorRGBA[3] * 0 + 1)  				);  				UIColor buttonFlareBottomColor = UIColor.FromRGBA (  					(buttonColorRGBA[0] * 0.8f + 0.2f)'  					(buttonColorRGBA[1] * 0.8f + 0.2f)'  					(buttonColorRGBA[2] * 0.8f + 0.2f)'  					(buttonColorRGBA[3] * 0.8f + 0.2f)  				);  				UIColor flareWhite = UIColor.FromRGBA (1.00f' 1.00f' 1.00f' 0.83f);    //// Gradient Declarations  				var ringGradientColors = new CGColor [] {upColorOut.CGColor' bottomColorDown.CGColor};  				var ringGradientLocations = new float [] {0' 1};  				var ringGradient = new CGGradient (colorSpace' ringGradientColors' ringGradientLocations);  				var ringInnerGradientColors = new CGColor [] {upColorInner.CGColor' bottomColorInner.CGColor};  				var ringInnerGradientLocations = new float [] {0' 1};  				var ringInnerGradient = new CGGradient (colorSpace' ringInnerGradientColors' ringInnerGradientLocations);  				var buttonGradientColors = new CGColor [] {buttonBottomColor.CGColor' buttonTopColor.CGColor};  				var buttonGradientLocations = new float [] {0' 1};  				var buttonGradient = new CGGradient (colorSpace' buttonGradientColors' buttonGradientLocations);  				var overlayGradientColors = new CGColor [] {flareWhite.CGColor' UIColor.Clear.CGColor};  				var overlayGradientLocations = new float [] {0' 1};  				var overlayGradient = new CGGradient (colorSpace' overlayGradientColors' overlayGradientLocations);  				var buttonFlareGradientColors = new CGColor [] {buttonFlareUpColor.CGColor' buttonFlareBottomColor.CGColor};  				var buttonFlareGradientLocations = new float [] {0' 1};  				var buttonFlareGradient = new CGGradient (colorSpace' buttonFlareGradientColors' buttonFlareGradientLocations);    //// Shadow Declarations  				var buttonInnerShadow = UIColor.Black.CGColor;  				var buttonInnerShadowOffset = new SizeF (0' -0);  				var buttonInnerShadowBlurRadius = 5;  				var buttonOuterShadow = UIColor.Black.CGColor;  				var buttonOuterShadowOffset = new SizeF (0' 2);  				  				  				var buttonOuterShadowBlurRadius = isPressed ? 2 : 5;	// ADDED this code after PaintCode      //// outerOval Drawing  				var outerOvalPath = UIBezierPath.FromOval (new RectangleF (5' 5' 63' 63));  				context.SaveState ();  				context.SetShadowWithColor (buttonOuterShadowOffset' buttonOuterShadowBlurRadius' buttonOuterShadow);  				context.BeginTransparencyLayer (null);  				outerOvalPath.AddClip ();  				context.DrawLinearGradient (ringGradient' new PointF (36.5f' 5)' new PointF (36.5f' 68)' 0);  				context.EndTransparencyLayer ();  				context.RestoreState ();        //// overlayOval Drawing  				var overlayOvalPath = UIBezierPath.FromOval (new RectangleF (5' 5' 63' 63));  				context.SaveState ();  				overlayOvalPath.AddClip ();  				context.DrawRadialGradient (overlayGradient'      new PointF (36.5f' 12.23f)' 17.75f'      new PointF (36.5f' 36.5f)' 44.61f'      CGGradientDrawingOptions.DrawsBeforeStartLocation | CGGradientDrawingOptions.DrawsAfterEndLocation);  				context.RestoreState ();        //// innerOval Drawing  				var innerOvalPath = UIBezierPath.FromOval (new RectangleF (12' 12' 49' 49));  				context.SaveState ();  				innerOvalPath.AddClip ();  				context.DrawLinearGradient (ringInnerGradient' new PointF (36.5f' 12)' new PointF (36.5f' 61)' 0);  				context.RestoreState ();        //// buttonOval Drawing  				var buttonOvalPath = UIBezierPath.FromOval (new RectangleF (14' 13' 46' 46));  				context.SaveState ();  				buttonOvalPath.AddClip ();  				context.DrawRadialGradient (buttonGradient'      new PointF (37' 63.23f)' 2.44f'      new PointF (37' 44.48f)' 23.14f'      CGGradientDrawingOptions.DrawsBeforeStartLocation | CGGradientDrawingOptions.DrawsAfterEndLocation);  				context.RestoreState ();    ////// buttonOval Inner Shadow  				var buttonOvalBorderRect = buttonOvalPath.Bounds;  				buttonOvalBorderRect.Inflate (buttonInnerShadowBlurRadius' buttonInnerShadowBlurRadius);  				buttonOvalBorderRect.Offset (-buttonInnerShadowOffset.Width' -buttonInnerShadowOffset.Height);  				buttonOvalBorderRect = RectangleF.Union (buttonOvalBorderRect' buttonOvalPath.Bounds);  				buttonOvalBorderRect.Inflate (1' 1);    				var buttonOvalNegativePath = UIBezierPath.FromRect (buttonOvalBorderRect);  				buttonOvalNegativePath.AppendPath (buttonOvalPath);  				buttonOvalNegativePath.UsesEvenOddFillRule = true;    				context.SaveState ();  				{  					var xOffset = buttonInnerShadowOffset.Width + (float)Math.Round (buttonOvalBorderRect.Width);  					var yOffset = buttonInnerShadowOffset.Height;  					context.SetShadowWithColor (          new SizeF (xOffset + (xOffset >= 0 ? 0.1f : -0.1f)' yOffset + (yOffset >= 0 ? 0.1f : -0.1f))'          buttonInnerShadowBlurRadius'          buttonInnerShadow);    					buttonOvalPath.AddClip ();  					var transform = CGAffineTransform.MakeTranslation (-(float)Math.Round (buttonOvalBorderRect.Width)' 0);  					buttonOvalNegativePath.ApplyTransform (transform);  					UIColor.Gray.SetFill ();  					buttonOvalNegativePath.Fill ();  				}  				context.RestoreState ();          //// flareOval Drawing  				var flareOvalPath = UIBezierPath.FromOval (new RectangleF (22' 14' 29' 15));  				context.SaveState ();  				flareOvalPath.AddClip ();  				context.DrawLinearGradient (buttonFlareGradient' new PointF (36.5f' 14)' new PointF (36.5f' 29)' 0);  				context.RestoreState ();      				// ------------- END PAINTCODE -------------  				  				  				  			}
Magic Number,PaintCode,BlueButton,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\BlueButton\BlueButton.cs,Draw,The following statement contains a magic number: using (var colorSpace = CGColorSpace.CreateDeviceRGB ()) {  				  				  				  				// ------------- START PAINTCODE -------------    //// Color Declarations  				UIColor upColorOut = UIColor.FromRGBA (0.79f' 0.79f' 0.79f' 1.00f);  				UIColor bottomColorDown = UIColor.FromRGBA (0.21f' 0.21f' 0.21f' 1.00f);  				UIColor upColorInner = UIColor.FromRGBA (0.17f' 0.18f' 0.20f' 1.00f);  				UIColor bottomColorInner = UIColor.FromRGBA (0.98f' 0.98f' 0.99f' 1.00f);      				UIColor buttonFlareUpColor = UIColor.FromRGBA (  					(buttonColorRGBA[0] * 0.3f + 0.7f)'  					(buttonColorRGBA[1] * 0.3f + 0.7f)'  					(buttonColorRGBA[2] * 0.3f + 0.7f)'  					(buttonColorRGBA[3] * 0.3f + 0.7f)  				);  				UIColor buttonTopColor = UIColor.FromRGBA (  					(buttonColorRGBA[0] * 0.8f)'  					(buttonColorRGBA[1] * 0.8f)'  					(buttonColorRGBA[2] * 0.8f)'  					(buttonColorRGBA[3] * 0.8f + 0.2f)  				);  				UIColor buttonBottomColor = UIColor.FromRGBA (  					(buttonColorRGBA[0] * 0 + 1)'  					(buttonColorRGBA[1] * 0 + 1)'  					(buttonColorRGBA[2] * 0 + 1)'  					(buttonColorRGBA[3] * 0 + 1)  				);  				UIColor buttonFlareBottomColor = UIColor.FromRGBA (  					(buttonColorRGBA[0] * 0.8f + 0.2f)'  					(buttonColorRGBA[1] * 0.8f + 0.2f)'  					(buttonColorRGBA[2] * 0.8f + 0.2f)'  					(buttonColorRGBA[3] * 0.8f + 0.2f)  				);  				UIColor flareWhite = UIColor.FromRGBA (1.00f' 1.00f' 1.00f' 0.83f);    //// Gradient Declarations  				var ringGradientColors = new CGColor [] {upColorOut.CGColor' bottomColorDown.CGColor};  				var ringGradientLocations = new float [] {0' 1};  				var ringGradient = new CGGradient (colorSpace' ringGradientColors' ringGradientLocations);  				var ringInnerGradientColors = new CGColor [] {upColorInner.CGColor' bottomColorInner.CGColor};  				var ringInnerGradientLocations = new float [] {0' 1};  				var ringInnerGradient = new CGGradient (colorSpace' ringInnerGradientColors' ringInnerGradientLocations);  				var buttonGradientColors = new CGColor [] {buttonBottomColor.CGColor' buttonTopColor.CGColor};  				var buttonGradientLocations = new float [] {0' 1};  				var buttonGradient = new CGGradient (colorSpace' buttonGradientColors' buttonGradientLocations);  				var overlayGradientColors = new CGColor [] {flareWhite.CGColor' UIColor.Clear.CGColor};  				var overlayGradientLocations = new float [] {0' 1};  				var overlayGradient = new CGGradient (colorSpace' overlayGradientColors' overlayGradientLocations);  				var buttonFlareGradientColors = new CGColor [] {buttonFlareUpColor.CGColor' buttonFlareBottomColor.CGColor};  				var buttonFlareGradientLocations = new float [] {0' 1};  				var buttonFlareGradient = new CGGradient (colorSpace' buttonFlareGradientColors' buttonFlareGradientLocations);    //// Shadow Declarations  				var buttonInnerShadow = UIColor.Black.CGColor;  				var buttonInnerShadowOffset = new SizeF (0' -0);  				var buttonInnerShadowBlurRadius = 5;  				var buttonOuterShadow = UIColor.Black.CGColor;  				var buttonOuterShadowOffset = new SizeF (0' 2);  				  				  				var buttonOuterShadowBlurRadius = isPressed ? 2 : 5;	// ADDED this code after PaintCode      //// outerOval Drawing  				var outerOvalPath = UIBezierPath.FromOval (new RectangleF (5' 5' 63' 63));  				context.SaveState ();  				context.SetShadowWithColor (buttonOuterShadowOffset' buttonOuterShadowBlurRadius' buttonOuterShadow);  				context.BeginTransparencyLayer (null);  				outerOvalPath.AddClip ();  				context.DrawLinearGradient (ringGradient' new PointF (36.5f' 5)' new PointF (36.5f' 68)' 0);  				context.EndTransparencyLayer ();  				context.RestoreState ();        //// overlayOval Drawing  				var overlayOvalPath = UIBezierPath.FromOval (new RectangleF (5' 5' 63' 63));  				context.SaveState ();  				overlayOvalPath.AddClip ();  				context.DrawRadialGradient (overlayGradient'      new PointF (36.5f' 12.23f)' 17.75f'      new PointF (36.5f' 36.5f)' 44.61f'      CGGradientDrawingOptions.DrawsBeforeStartLocation | CGGradientDrawingOptions.DrawsAfterEndLocation);  				context.RestoreState ();        //// innerOval Drawing  				var innerOvalPath = UIBezierPath.FromOval (new RectangleF (12' 12' 49' 49));  				context.SaveState ();  				innerOvalPath.AddClip ();  				context.DrawLinearGradient (ringInnerGradient' new PointF (36.5f' 12)' new PointF (36.5f' 61)' 0);  				context.RestoreState ();        //// buttonOval Drawing  				var buttonOvalPath = UIBezierPath.FromOval (new RectangleF (14' 13' 46' 46));  				context.SaveState ();  				buttonOvalPath.AddClip ();  				context.DrawRadialGradient (buttonGradient'      new PointF (37' 63.23f)' 2.44f'      new PointF (37' 44.48f)' 23.14f'      CGGradientDrawingOptions.DrawsBeforeStartLocation | CGGradientDrawingOptions.DrawsAfterEndLocation);  				context.RestoreState ();    ////// buttonOval Inner Shadow  				var buttonOvalBorderRect = buttonOvalPath.Bounds;  				buttonOvalBorderRect.Inflate (buttonInnerShadowBlurRadius' buttonInnerShadowBlurRadius);  				buttonOvalBorderRect.Offset (-buttonInnerShadowOffset.Width' -buttonInnerShadowOffset.Height);  				buttonOvalBorderRect = RectangleF.Union (buttonOvalBorderRect' buttonOvalPath.Bounds);  				buttonOvalBorderRect.Inflate (1' 1);    				var buttonOvalNegativePath = UIBezierPath.FromRect (buttonOvalBorderRect);  				buttonOvalNegativePath.AppendPath (buttonOvalPath);  				buttonOvalNegativePath.UsesEvenOddFillRule = true;    				context.SaveState ();  				{  					var xOffset = buttonInnerShadowOffset.Width + (float)Math.Round (buttonOvalBorderRect.Width);  					var yOffset = buttonInnerShadowOffset.Height;  					context.SetShadowWithColor (          new SizeF (xOffset + (xOffset >= 0 ? 0.1f : -0.1f)' yOffset + (yOffset >= 0 ? 0.1f : -0.1f))'          buttonInnerShadowBlurRadius'          buttonInnerShadow);    					buttonOvalPath.AddClip ();  					var transform = CGAffineTransform.MakeTranslation (-(float)Math.Round (buttonOvalBorderRect.Width)' 0);  					buttonOvalNegativePath.ApplyTransform (transform);  					UIColor.Gray.SetFill ();  					buttonOvalNegativePath.Fill ();  				}  				context.RestoreState ();          //// flareOval Drawing  				var flareOvalPath = UIBezierPath.FromOval (new RectangleF (22' 14' 29' 15));  				context.SaveState ();  				flareOvalPath.AddClip ();  				context.DrawLinearGradient (buttonFlareGradient' new PointF (36.5f' 14)' new PointF (36.5f' 29)' 0);  				context.RestoreState ();      				// ------------- END PAINTCODE -------------  				  				  				  			}
Magic Number,PaintCode,BlueButton,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\BlueButton\BlueButton.cs,Draw,The following statement contains a magic number: using (var colorSpace = CGColorSpace.CreateDeviceRGB ()) {  				  				  				  				// ------------- START PAINTCODE -------------    //// Color Declarations  				UIColor upColorOut = UIColor.FromRGBA (0.79f' 0.79f' 0.79f' 1.00f);  				UIColor bottomColorDown = UIColor.FromRGBA (0.21f' 0.21f' 0.21f' 1.00f);  				UIColor upColorInner = UIColor.FromRGBA (0.17f' 0.18f' 0.20f' 1.00f);  				UIColor bottomColorInner = UIColor.FromRGBA (0.98f' 0.98f' 0.99f' 1.00f);      				UIColor buttonFlareUpColor = UIColor.FromRGBA (  					(buttonColorRGBA[0] * 0.3f + 0.7f)'  					(buttonColorRGBA[1] * 0.3f + 0.7f)'  					(buttonColorRGBA[2] * 0.3f + 0.7f)'  					(buttonColorRGBA[3] * 0.3f + 0.7f)  				);  				UIColor buttonTopColor = UIColor.FromRGBA (  					(buttonColorRGBA[0] * 0.8f)'  					(buttonColorRGBA[1] * 0.8f)'  					(buttonColorRGBA[2] * 0.8f)'  					(buttonColorRGBA[3] * 0.8f + 0.2f)  				);  				UIColor buttonBottomColor = UIColor.FromRGBA (  					(buttonColorRGBA[0] * 0 + 1)'  					(buttonColorRGBA[1] * 0 + 1)'  					(buttonColorRGBA[2] * 0 + 1)'  					(buttonColorRGBA[3] * 0 + 1)  				);  				UIColor buttonFlareBottomColor = UIColor.FromRGBA (  					(buttonColorRGBA[0] * 0.8f + 0.2f)'  					(buttonColorRGBA[1] * 0.8f + 0.2f)'  					(buttonColorRGBA[2] * 0.8f + 0.2f)'  					(buttonColorRGBA[3] * 0.8f + 0.2f)  				);  				UIColor flareWhite = UIColor.FromRGBA (1.00f' 1.00f' 1.00f' 0.83f);    //// Gradient Declarations  				var ringGradientColors = new CGColor [] {upColorOut.CGColor' bottomColorDown.CGColor};  				var ringGradientLocations = new float [] {0' 1};  				var ringGradient = new CGGradient (colorSpace' ringGradientColors' ringGradientLocations);  				var ringInnerGradientColors = new CGColor [] {upColorInner.CGColor' bottomColorInner.CGColor};  				var ringInnerGradientLocations = new float [] {0' 1};  				var ringInnerGradient = new CGGradient (colorSpace' ringInnerGradientColors' ringInnerGradientLocations);  				var buttonGradientColors = new CGColor [] {buttonBottomColor.CGColor' buttonTopColor.CGColor};  				var buttonGradientLocations = new float [] {0' 1};  				var buttonGradient = new CGGradient (colorSpace' buttonGradientColors' buttonGradientLocations);  				var overlayGradientColors = new CGColor [] {flareWhite.CGColor' UIColor.Clear.CGColor};  				var overlayGradientLocations = new float [] {0' 1};  				var overlayGradient = new CGGradient (colorSpace' overlayGradientColors' overlayGradientLocations);  				var buttonFlareGradientColors = new CGColor [] {buttonFlareUpColor.CGColor' buttonFlareBottomColor.CGColor};  				var buttonFlareGradientLocations = new float [] {0' 1};  				var buttonFlareGradient = new CGGradient (colorSpace' buttonFlareGradientColors' buttonFlareGradientLocations);    //// Shadow Declarations  				var buttonInnerShadow = UIColor.Black.CGColor;  				var buttonInnerShadowOffset = new SizeF (0' -0);  				var buttonInnerShadowBlurRadius = 5;  				var buttonOuterShadow = UIColor.Black.CGColor;  				var buttonOuterShadowOffset = new SizeF (0' 2);  				  				  				var buttonOuterShadowBlurRadius = isPressed ? 2 : 5;	// ADDED this code after PaintCode      //// outerOval Drawing  				var outerOvalPath = UIBezierPath.FromOval (new RectangleF (5' 5' 63' 63));  				context.SaveState ();  				context.SetShadowWithColor (buttonOuterShadowOffset' buttonOuterShadowBlurRadius' buttonOuterShadow);  				context.BeginTransparencyLayer (null);  				outerOvalPath.AddClip ();  				context.DrawLinearGradient (ringGradient' new PointF (36.5f' 5)' new PointF (36.5f' 68)' 0);  				context.EndTransparencyLayer ();  				context.RestoreState ();        //// overlayOval Drawing  				var overlayOvalPath = UIBezierPath.FromOval (new RectangleF (5' 5' 63' 63));  				context.SaveState ();  				overlayOvalPath.AddClip ();  				context.DrawRadialGradient (overlayGradient'      new PointF (36.5f' 12.23f)' 17.75f'      new PointF (36.5f' 36.5f)' 44.61f'      CGGradientDrawingOptions.DrawsBeforeStartLocation | CGGradientDrawingOptions.DrawsAfterEndLocation);  				context.RestoreState ();        //// innerOval Drawing  				var innerOvalPath = UIBezierPath.FromOval (new RectangleF (12' 12' 49' 49));  				context.SaveState ();  				innerOvalPath.AddClip ();  				context.DrawLinearGradient (ringInnerGradient' new PointF (36.5f' 12)' new PointF (36.5f' 61)' 0);  				context.RestoreState ();        //// buttonOval Drawing  				var buttonOvalPath = UIBezierPath.FromOval (new RectangleF (14' 13' 46' 46));  				context.SaveState ();  				buttonOvalPath.AddClip ();  				context.DrawRadialGradient (buttonGradient'      new PointF (37' 63.23f)' 2.44f'      new PointF (37' 44.48f)' 23.14f'      CGGradientDrawingOptions.DrawsBeforeStartLocation | CGGradientDrawingOptions.DrawsAfterEndLocation);  				context.RestoreState ();    ////// buttonOval Inner Shadow  				var buttonOvalBorderRect = buttonOvalPath.Bounds;  				buttonOvalBorderRect.Inflate (buttonInnerShadowBlurRadius' buttonInnerShadowBlurRadius);  				buttonOvalBorderRect.Offset (-buttonInnerShadowOffset.Width' -buttonInnerShadowOffset.Height);  				buttonOvalBorderRect = RectangleF.Union (buttonOvalBorderRect' buttonOvalPath.Bounds);  				buttonOvalBorderRect.Inflate (1' 1);    				var buttonOvalNegativePath = UIBezierPath.FromRect (buttonOvalBorderRect);  				buttonOvalNegativePath.AppendPath (buttonOvalPath);  				buttonOvalNegativePath.UsesEvenOddFillRule = true;    				context.SaveState ();  				{  					var xOffset = buttonInnerShadowOffset.Width + (float)Math.Round (buttonOvalBorderRect.Width);  					var yOffset = buttonInnerShadowOffset.Height;  					context.SetShadowWithColor (          new SizeF (xOffset + (xOffset >= 0 ? 0.1f : -0.1f)' yOffset + (yOffset >= 0 ? 0.1f : -0.1f))'          buttonInnerShadowBlurRadius'          buttonInnerShadow);    					buttonOvalPath.AddClip ();  					var transform = CGAffineTransform.MakeTranslation (-(float)Math.Round (buttonOvalBorderRect.Width)' 0);  					buttonOvalNegativePath.ApplyTransform (transform);  					UIColor.Gray.SetFill ();  					buttonOvalNegativePath.Fill ();  				}  				context.RestoreState ();          //// flareOval Drawing  				var flareOvalPath = UIBezierPath.FromOval (new RectangleF (22' 14' 29' 15));  				context.SaveState ();  				flareOvalPath.AddClip ();  				context.DrawLinearGradient (buttonFlareGradient' new PointF (36.5f' 14)' new PointF (36.5f' 29)' 0);  				context.RestoreState ();      				// ------------- END PAINTCODE -------------  				  				  				  			}
Magic Number,PaintCode,BlueButton,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\BlueButton\BlueButton.cs,Draw,The following statement contains a magic number: using (var colorSpace = CGColorSpace.CreateDeviceRGB ()) {  				  				  				  				// ------------- START PAINTCODE -------------    //// Color Declarations  				UIColor upColorOut = UIColor.FromRGBA (0.79f' 0.79f' 0.79f' 1.00f);  				UIColor bottomColorDown = UIColor.FromRGBA (0.21f' 0.21f' 0.21f' 1.00f);  				UIColor upColorInner = UIColor.FromRGBA (0.17f' 0.18f' 0.20f' 1.00f);  				UIColor bottomColorInner = UIColor.FromRGBA (0.98f' 0.98f' 0.99f' 1.00f);      				UIColor buttonFlareUpColor = UIColor.FromRGBA (  					(buttonColorRGBA[0] * 0.3f + 0.7f)'  					(buttonColorRGBA[1] * 0.3f + 0.7f)'  					(buttonColorRGBA[2] * 0.3f + 0.7f)'  					(buttonColorRGBA[3] * 0.3f + 0.7f)  				);  				UIColor buttonTopColor = UIColor.FromRGBA (  					(buttonColorRGBA[0] * 0.8f)'  					(buttonColorRGBA[1] * 0.8f)'  					(buttonColorRGBA[2] * 0.8f)'  					(buttonColorRGBA[3] * 0.8f + 0.2f)  				);  				UIColor buttonBottomColor = UIColor.FromRGBA (  					(buttonColorRGBA[0] * 0 + 1)'  					(buttonColorRGBA[1] * 0 + 1)'  					(buttonColorRGBA[2] * 0 + 1)'  					(buttonColorRGBA[3] * 0 + 1)  				);  				UIColor buttonFlareBottomColor = UIColor.FromRGBA (  					(buttonColorRGBA[0] * 0.8f + 0.2f)'  					(buttonColorRGBA[1] * 0.8f + 0.2f)'  					(buttonColorRGBA[2] * 0.8f + 0.2f)'  					(buttonColorRGBA[3] * 0.8f + 0.2f)  				);  				UIColor flareWhite = UIColor.FromRGBA (1.00f' 1.00f' 1.00f' 0.83f);    //// Gradient Declarations  				var ringGradientColors = new CGColor [] {upColorOut.CGColor' bottomColorDown.CGColor};  				var ringGradientLocations = new float [] {0' 1};  				var ringGradient = new CGGradient (colorSpace' ringGradientColors' ringGradientLocations);  				var ringInnerGradientColors = new CGColor [] {upColorInner.CGColor' bottomColorInner.CGColor};  				var ringInnerGradientLocations = new float [] {0' 1};  				var ringInnerGradient = new CGGradient (colorSpace' ringInnerGradientColors' ringInnerGradientLocations);  				var buttonGradientColors = new CGColor [] {buttonBottomColor.CGColor' buttonTopColor.CGColor};  				var buttonGradientLocations = new float [] {0' 1};  				var buttonGradient = new CGGradient (colorSpace' buttonGradientColors' buttonGradientLocations);  				var overlayGradientColors = new CGColor [] {flareWhite.CGColor' UIColor.Clear.CGColor};  				var overlayGradientLocations = new float [] {0' 1};  				var overlayGradient = new CGGradient (colorSpace' overlayGradientColors' overlayGradientLocations);  				var buttonFlareGradientColors = new CGColor [] {buttonFlareUpColor.CGColor' buttonFlareBottomColor.CGColor};  				var buttonFlareGradientLocations = new float [] {0' 1};  				var buttonFlareGradient = new CGGradient (colorSpace' buttonFlareGradientColors' buttonFlareGradientLocations);    //// Shadow Declarations  				var buttonInnerShadow = UIColor.Black.CGColor;  				var buttonInnerShadowOffset = new SizeF (0' -0);  				var buttonInnerShadowBlurRadius = 5;  				var buttonOuterShadow = UIColor.Black.CGColor;  				var buttonOuterShadowOffset = new SizeF (0' 2);  				  				  				var buttonOuterShadowBlurRadius = isPressed ? 2 : 5;	// ADDED this code after PaintCode      //// outerOval Drawing  				var outerOvalPath = UIBezierPath.FromOval (new RectangleF (5' 5' 63' 63));  				context.SaveState ();  				context.SetShadowWithColor (buttonOuterShadowOffset' buttonOuterShadowBlurRadius' buttonOuterShadow);  				context.BeginTransparencyLayer (null);  				outerOvalPath.AddClip ();  				context.DrawLinearGradient (ringGradient' new PointF (36.5f' 5)' new PointF (36.5f' 68)' 0);  				context.EndTransparencyLayer ();  				context.RestoreState ();        //// overlayOval Drawing  				var overlayOvalPath = UIBezierPath.FromOval (new RectangleF (5' 5' 63' 63));  				context.SaveState ();  				overlayOvalPath.AddClip ();  				context.DrawRadialGradient (overlayGradient'      new PointF (36.5f' 12.23f)' 17.75f'      new PointF (36.5f' 36.5f)' 44.61f'      CGGradientDrawingOptions.DrawsBeforeStartLocation | CGGradientDrawingOptions.DrawsAfterEndLocation);  				context.RestoreState ();        //// innerOval Drawing  				var innerOvalPath = UIBezierPath.FromOval (new RectangleF (12' 12' 49' 49));  				context.SaveState ();  				innerOvalPath.AddClip ();  				context.DrawLinearGradient (ringInnerGradient' new PointF (36.5f' 12)' new PointF (36.5f' 61)' 0);  				context.RestoreState ();        //// buttonOval Drawing  				var buttonOvalPath = UIBezierPath.FromOval (new RectangleF (14' 13' 46' 46));  				context.SaveState ();  				buttonOvalPath.AddClip ();  				context.DrawRadialGradient (buttonGradient'      new PointF (37' 63.23f)' 2.44f'      new PointF (37' 44.48f)' 23.14f'      CGGradientDrawingOptions.DrawsBeforeStartLocation | CGGradientDrawingOptions.DrawsAfterEndLocation);  				context.RestoreState ();    ////// buttonOval Inner Shadow  				var buttonOvalBorderRect = buttonOvalPath.Bounds;  				buttonOvalBorderRect.Inflate (buttonInnerShadowBlurRadius' buttonInnerShadowBlurRadius);  				buttonOvalBorderRect.Offset (-buttonInnerShadowOffset.Width' -buttonInnerShadowOffset.Height);  				buttonOvalBorderRect = RectangleF.Union (buttonOvalBorderRect' buttonOvalPath.Bounds);  				buttonOvalBorderRect.Inflate (1' 1);    				var buttonOvalNegativePath = UIBezierPath.FromRect (buttonOvalBorderRect);  				buttonOvalNegativePath.AppendPath (buttonOvalPath);  				buttonOvalNegativePath.UsesEvenOddFillRule = true;    				context.SaveState ();  				{  					var xOffset = buttonInnerShadowOffset.Width + (float)Math.Round (buttonOvalBorderRect.Width);  					var yOffset = buttonInnerShadowOffset.Height;  					context.SetShadowWithColor (          new SizeF (xOffset + (xOffset >= 0 ? 0.1f : -0.1f)' yOffset + (yOffset >= 0 ? 0.1f : -0.1f))'          buttonInnerShadowBlurRadius'          buttonInnerShadow);    					buttonOvalPath.AddClip ();  					var transform = CGAffineTransform.MakeTranslation (-(float)Math.Round (buttonOvalBorderRect.Width)' 0);  					buttonOvalNegativePath.ApplyTransform (transform);  					UIColor.Gray.SetFill ();  					buttonOvalNegativePath.Fill ();  				}  				context.RestoreState ();          //// flareOval Drawing  				var flareOvalPath = UIBezierPath.FromOval (new RectangleF (22' 14' 29' 15));  				context.SaveState ();  				flareOvalPath.AddClip ();  				context.DrawLinearGradient (buttonFlareGradient' new PointF (36.5f' 14)' new PointF (36.5f' 29)' 0);  				context.RestoreState ();      				// ------------- END PAINTCODE -------------  				  				  				  			}
Magic Number,PaintCode,BlueButton,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\BlueButton\BlueButton.cs,Draw,The following statement contains a magic number: using (var colorSpace = CGColorSpace.CreateDeviceRGB ()) {  				  				  				  				// ------------- START PAINTCODE -------------    //// Color Declarations  				UIColor upColorOut = UIColor.FromRGBA (0.79f' 0.79f' 0.79f' 1.00f);  				UIColor bottomColorDown = UIColor.FromRGBA (0.21f' 0.21f' 0.21f' 1.00f);  				UIColor upColorInner = UIColor.FromRGBA (0.17f' 0.18f' 0.20f' 1.00f);  				UIColor bottomColorInner = UIColor.FromRGBA (0.98f' 0.98f' 0.99f' 1.00f);      				UIColor buttonFlareUpColor = UIColor.FromRGBA (  					(buttonColorRGBA[0] * 0.3f + 0.7f)'  					(buttonColorRGBA[1] * 0.3f + 0.7f)'  					(buttonColorRGBA[2] * 0.3f + 0.7f)'  					(buttonColorRGBA[3] * 0.3f + 0.7f)  				);  				UIColor buttonTopColor = UIColor.FromRGBA (  					(buttonColorRGBA[0] * 0.8f)'  					(buttonColorRGBA[1] * 0.8f)'  					(buttonColorRGBA[2] * 0.8f)'  					(buttonColorRGBA[3] * 0.8f + 0.2f)  				);  				UIColor buttonBottomColor = UIColor.FromRGBA (  					(buttonColorRGBA[0] * 0 + 1)'  					(buttonColorRGBA[1] * 0 + 1)'  					(buttonColorRGBA[2] * 0 + 1)'  					(buttonColorRGBA[3] * 0 + 1)  				);  				UIColor buttonFlareBottomColor = UIColor.FromRGBA (  					(buttonColorRGBA[0] * 0.8f + 0.2f)'  					(buttonColorRGBA[1] * 0.8f + 0.2f)'  					(buttonColorRGBA[2] * 0.8f + 0.2f)'  					(buttonColorRGBA[3] * 0.8f + 0.2f)  				);  				UIColor flareWhite = UIColor.FromRGBA (1.00f' 1.00f' 1.00f' 0.83f);    //// Gradient Declarations  				var ringGradientColors = new CGColor [] {upColorOut.CGColor' bottomColorDown.CGColor};  				var ringGradientLocations = new float [] {0' 1};  				var ringGradient = new CGGradient (colorSpace' ringGradientColors' ringGradientLocations);  				var ringInnerGradientColors = new CGColor [] {upColorInner.CGColor' bottomColorInner.CGColor};  				var ringInnerGradientLocations = new float [] {0' 1};  				var ringInnerGradient = new CGGradient (colorSpace' ringInnerGradientColors' ringInnerGradientLocations);  				var buttonGradientColors = new CGColor [] {buttonBottomColor.CGColor' buttonTopColor.CGColor};  				var buttonGradientLocations = new float [] {0' 1};  				var buttonGradient = new CGGradient (colorSpace' buttonGradientColors' buttonGradientLocations);  				var overlayGradientColors = new CGColor [] {flareWhite.CGColor' UIColor.Clear.CGColor};  				var overlayGradientLocations = new float [] {0' 1};  				var overlayGradient = new CGGradient (colorSpace' overlayGradientColors' overlayGradientLocations);  				var buttonFlareGradientColors = new CGColor [] {buttonFlareUpColor.CGColor' buttonFlareBottomColor.CGColor};  				var buttonFlareGradientLocations = new float [] {0' 1};  				var buttonFlareGradient = new CGGradient (colorSpace' buttonFlareGradientColors' buttonFlareGradientLocations);    //// Shadow Declarations  				var buttonInnerShadow = UIColor.Black.CGColor;  				var buttonInnerShadowOffset = new SizeF (0' -0);  				var buttonInnerShadowBlurRadius = 5;  				var buttonOuterShadow = UIColor.Black.CGColor;  				var buttonOuterShadowOffset = new SizeF (0' 2);  				  				  				var buttonOuterShadowBlurRadius = isPressed ? 2 : 5;	// ADDED this code after PaintCode      //// outerOval Drawing  				var outerOvalPath = UIBezierPath.FromOval (new RectangleF (5' 5' 63' 63));  				context.SaveState ();  				context.SetShadowWithColor (buttonOuterShadowOffset' buttonOuterShadowBlurRadius' buttonOuterShadow);  				context.BeginTransparencyLayer (null);  				outerOvalPath.AddClip ();  				context.DrawLinearGradient (ringGradient' new PointF (36.5f' 5)' new PointF (36.5f' 68)' 0);  				context.EndTransparencyLayer ();  				context.RestoreState ();        //// overlayOval Drawing  				var overlayOvalPath = UIBezierPath.FromOval (new RectangleF (5' 5' 63' 63));  				context.SaveState ();  				overlayOvalPath.AddClip ();  				context.DrawRadialGradient (overlayGradient'      new PointF (36.5f' 12.23f)' 17.75f'      new PointF (36.5f' 36.5f)' 44.61f'      CGGradientDrawingOptions.DrawsBeforeStartLocation | CGGradientDrawingOptions.DrawsAfterEndLocation);  				context.RestoreState ();        //// innerOval Drawing  				var innerOvalPath = UIBezierPath.FromOval (new RectangleF (12' 12' 49' 49));  				context.SaveState ();  				innerOvalPath.AddClip ();  				context.DrawLinearGradient (ringInnerGradient' new PointF (36.5f' 12)' new PointF (36.5f' 61)' 0);  				context.RestoreState ();        //// buttonOval Drawing  				var buttonOvalPath = UIBezierPath.FromOval (new RectangleF (14' 13' 46' 46));  				context.SaveState ();  				buttonOvalPath.AddClip ();  				context.DrawRadialGradient (buttonGradient'      new PointF (37' 63.23f)' 2.44f'      new PointF (37' 44.48f)' 23.14f'      CGGradientDrawingOptions.DrawsBeforeStartLocation | CGGradientDrawingOptions.DrawsAfterEndLocation);  				context.RestoreState ();    ////// buttonOval Inner Shadow  				var buttonOvalBorderRect = buttonOvalPath.Bounds;  				buttonOvalBorderRect.Inflate (buttonInnerShadowBlurRadius' buttonInnerShadowBlurRadius);  				buttonOvalBorderRect.Offset (-buttonInnerShadowOffset.Width' -buttonInnerShadowOffset.Height);  				buttonOvalBorderRect = RectangleF.Union (buttonOvalBorderRect' buttonOvalPath.Bounds);  				buttonOvalBorderRect.Inflate (1' 1);    				var buttonOvalNegativePath = UIBezierPath.FromRect (buttonOvalBorderRect);  				buttonOvalNegativePath.AppendPath (buttonOvalPath);  				buttonOvalNegativePath.UsesEvenOddFillRule = true;    				context.SaveState ();  				{  					var xOffset = buttonInnerShadowOffset.Width + (float)Math.Round (buttonOvalBorderRect.Width);  					var yOffset = buttonInnerShadowOffset.Height;  					context.SetShadowWithColor (          new SizeF (xOffset + (xOffset >= 0 ? 0.1f : -0.1f)' yOffset + (yOffset >= 0 ? 0.1f : -0.1f))'          buttonInnerShadowBlurRadius'          buttonInnerShadow);    					buttonOvalPath.AddClip ();  					var transform = CGAffineTransform.MakeTranslation (-(float)Math.Round (buttonOvalBorderRect.Width)' 0);  					buttonOvalNegativePath.ApplyTransform (transform);  					UIColor.Gray.SetFill ();  					buttonOvalNegativePath.Fill ();  				}  				context.RestoreState ();          //// flareOval Drawing  				var flareOvalPath = UIBezierPath.FromOval (new RectangleF (22' 14' 29' 15));  				context.SaveState ();  				flareOvalPath.AddClip ();  				context.DrawLinearGradient (buttonFlareGradient' new PointF (36.5f' 14)' new PointF (36.5f' 29)' 0);  				context.RestoreState ();      				// ------------- END PAINTCODE -------------  				  				  				  			}
Magic Number,PaintCode,BlueButton,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\BlueButton\BlueButton.cs,Draw,The following statement contains a magic number: using (var colorSpace = CGColorSpace.CreateDeviceRGB ()) {  				  				  				  				// ------------- START PAINTCODE -------------    //// Color Declarations  				UIColor upColorOut = UIColor.FromRGBA (0.79f' 0.79f' 0.79f' 1.00f);  				UIColor bottomColorDown = UIColor.FromRGBA (0.21f' 0.21f' 0.21f' 1.00f);  				UIColor upColorInner = UIColor.FromRGBA (0.17f' 0.18f' 0.20f' 1.00f);  				UIColor bottomColorInner = UIColor.FromRGBA (0.98f' 0.98f' 0.99f' 1.00f);      				UIColor buttonFlareUpColor = UIColor.FromRGBA (  					(buttonColorRGBA[0] * 0.3f + 0.7f)'  					(buttonColorRGBA[1] * 0.3f + 0.7f)'  					(buttonColorRGBA[2] * 0.3f + 0.7f)'  					(buttonColorRGBA[3] * 0.3f + 0.7f)  				);  				UIColor buttonTopColor = UIColor.FromRGBA (  					(buttonColorRGBA[0] * 0.8f)'  					(buttonColorRGBA[1] * 0.8f)'  					(buttonColorRGBA[2] * 0.8f)'  					(buttonColorRGBA[3] * 0.8f + 0.2f)  				);  				UIColor buttonBottomColor = UIColor.FromRGBA (  					(buttonColorRGBA[0] * 0 + 1)'  					(buttonColorRGBA[1] * 0 + 1)'  					(buttonColorRGBA[2] * 0 + 1)'  					(buttonColorRGBA[3] * 0 + 1)  				);  				UIColor buttonFlareBottomColor = UIColor.FromRGBA (  					(buttonColorRGBA[0] * 0.8f + 0.2f)'  					(buttonColorRGBA[1] * 0.8f + 0.2f)'  					(buttonColorRGBA[2] * 0.8f + 0.2f)'  					(buttonColorRGBA[3] * 0.8f + 0.2f)  				);  				UIColor flareWhite = UIColor.FromRGBA (1.00f' 1.00f' 1.00f' 0.83f);    //// Gradient Declarations  				var ringGradientColors = new CGColor [] {upColorOut.CGColor' bottomColorDown.CGColor};  				var ringGradientLocations = new float [] {0' 1};  				var ringGradient = new CGGradient (colorSpace' ringGradientColors' ringGradientLocations);  				var ringInnerGradientColors = new CGColor [] {upColorInner.CGColor' bottomColorInner.CGColor};  				var ringInnerGradientLocations = new float [] {0' 1};  				var ringInnerGradient = new CGGradient (colorSpace' ringInnerGradientColors' ringInnerGradientLocations);  				var buttonGradientColors = new CGColor [] {buttonBottomColor.CGColor' buttonTopColor.CGColor};  				var buttonGradientLocations = new float [] {0' 1};  				var buttonGradient = new CGGradient (colorSpace' buttonGradientColors' buttonGradientLocations);  				var overlayGradientColors = new CGColor [] {flareWhite.CGColor' UIColor.Clear.CGColor};  				var overlayGradientLocations = new float [] {0' 1};  				var overlayGradient = new CGGradient (colorSpace' overlayGradientColors' overlayGradientLocations);  				var buttonFlareGradientColors = new CGColor [] {buttonFlareUpColor.CGColor' buttonFlareBottomColor.CGColor};  				var buttonFlareGradientLocations = new float [] {0' 1};  				var buttonFlareGradient = new CGGradient (colorSpace' buttonFlareGradientColors' buttonFlareGradientLocations);    //// Shadow Declarations  				var buttonInnerShadow = UIColor.Black.CGColor;  				var buttonInnerShadowOffset = new SizeF (0' -0);  				var buttonInnerShadowBlurRadius = 5;  				var buttonOuterShadow = UIColor.Black.CGColor;  				var buttonOuterShadowOffset = new SizeF (0' 2);  				  				  				var buttonOuterShadowBlurRadius = isPressed ? 2 : 5;	// ADDED this code after PaintCode      //// outerOval Drawing  				var outerOvalPath = UIBezierPath.FromOval (new RectangleF (5' 5' 63' 63));  				context.SaveState ();  				context.SetShadowWithColor (buttonOuterShadowOffset' buttonOuterShadowBlurRadius' buttonOuterShadow);  				context.BeginTransparencyLayer (null);  				outerOvalPath.AddClip ();  				context.DrawLinearGradient (ringGradient' new PointF (36.5f' 5)' new PointF (36.5f' 68)' 0);  				context.EndTransparencyLayer ();  				context.RestoreState ();        //// overlayOval Drawing  				var overlayOvalPath = UIBezierPath.FromOval (new RectangleF (5' 5' 63' 63));  				context.SaveState ();  				overlayOvalPath.AddClip ();  				context.DrawRadialGradient (overlayGradient'      new PointF (36.5f' 12.23f)' 17.75f'      new PointF (36.5f' 36.5f)' 44.61f'      CGGradientDrawingOptions.DrawsBeforeStartLocation | CGGradientDrawingOptions.DrawsAfterEndLocation);  				context.RestoreState ();        //// innerOval Drawing  				var innerOvalPath = UIBezierPath.FromOval (new RectangleF (12' 12' 49' 49));  				context.SaveState ();  				innerOvalPath.AddClip ();  				context.DrawLinearGradient (ringInnerGradient' new PointF (36.5f' 12)' new PointF (36.5f' 61)' 0);  				context.RestoreState ();        //// buttonOval Drawing  				var buttonOvalPath = UIBezierPath.FromOval (new RectangleF (14' 13' 46' 46));  				context.SaveState ();  				buttonOvalPath.AddClip ();  				context.DrawRadialGradient (buttonGradient'      new PointF (37' 63.23f)' 2.44f'      new PointF (37' 44.48f)' 23.14f'      CGGradientDrawingOptions.DrawsBeforeStartLocation | CGGradientDrawingOptions.DrawsAfterEndLocation);  				context.RestoreState ();    ////// buttonOval Inner Shadow  				var buttonOvalBorderRect = buttonOvalPath.Bounds;  				buttonOvalBorderRect.Inflate (buttonInnerShadowBlurRadius' buttonInnerShadowBlurRadius);  				buttonOvalBorderRect.Offset (-buttonInnerShadowOffset.Width' -buttonInnerShadowOffset.Height);  				buttonOvalBorderRect = RectangleF.Union (buttonOvalBorderRect' buttonOvalPath.Bounds);  				buttonOvalBorderRect.Inflate (1' 1);    				var buttonOvalNegativePath = UIBezierPath.FromRect (buttonOvalBorderRect);  				buttonOvalNegativePath.AppendPath (buttonOvalPath);  				buttonOvalNegativePath.UsesEvenOddFillRule = true;    				context.SaveState ();  				{  					var xOffset = buttonInnerShadowOffset.Width + (float)Math.Round (buttonOvalBorderRect.Width);  					var yOffset = buttonInnerShadowOffset.Height;  					context.SetShadowWithColor (          new SizeF (xOffset + (xOffset >= 0 ? 0.1f : -0.1f)' yOffset + (yOffset >= 0 ? 0.1f : -0.1f))'          buttonInnerShadowBlurRadius'          buttonInnerShadow);    					buttonOvalPath.AddClip ();  					var transform = CGAffineTransform.MakeTranslation (-(float)Math.Round (buttonOvalBorderRect.Width)' 0);  					buttonOvalNegativePath.ApplyTransform (transform);  					UIColor.Gray.SetFill ();  					buttonOvalNegativePath.Fill ();  				}  				context.RestoreState ();          //// flareOval Drawing  				var flareOvalPath = UIBezierPath.FromOval (new RectangleF (22' 14' 29' 15));  				context.SaveState ();  				flareOvalPath.AddClip ();  				context.DrawLinearGradient (buttonFlareGradient' new PointF (36.5f' 14)' new PointF (36.5f' 29)' 0);  				context.RestoreState ();      				// ------------- END PAINTCODE -------------  				  				  				  			}
Magic Number,PaintCode,BlueButton,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\BlueButton\BlueButton.cs,Draw,The following statement contains a magic number: using (var colorSpace = CGColorSpace.CreateDeviceRGB ()) {  				  				  				  				// ------------- START PAINTCODE -------------    //// Color Declarations  				UIColor upColorOut = UIColor.FromRGBA (0.79f' 0.79f' 0.79f' 1.00f);  				UIColor bottomColorDown = UIColor.FromRGBA (0.21f' 0.21f' 0.21f' 1.00f);  				UIColor upColorInner = UIColor.FromRGBA (0.17f' 0.18f' 0.20f' 1.00f);  				UIColor bottomColorInner = UIColor.FromRGBA (0.98f' 0.98f' 0.99f' 1.00f);      				UIColor buttonFlareUpColor = UIColor.FromRGBA (  					(buttonColorRGBA[0] * 0.3f + 0.7f)'  					(buttonColorRGBA[1] * 0.3f + 0.7f)'  					(buttonColorRGBA[2] * 0.3f + 0.7f)'  					(buttonColorRGBA[3] * 0.3f + 0.7f)  				);  				UIColor buttonTopColor = UIColor.FromRGBA (  					(buttonColorRGBA[0] * 0.8f)'  					(buttonColorRGBA[1] * 0.8f)'  					(buttonColorRGBA[2] * 0.8f)'  					(buttonColorRGBA[3] * 0.8f + 0.2f)  				);  				UIColor buttonBottomColor = UIColor.FromRGBA (  					(buttonColorRGBA[0] * 0 + 1)'  					(buttonColorRGBA[1] * 0 + 1)'  					(buttonColorRGBA[2] * 0 + 1)'  					(buttonColorRGBA[3] * 0 + 1)  				);  				UIColor buttonFlareBottomColor = UIColor.FromRGBA (  					(buttonColorRGBA[0] * 0.8f + 0.2f)'  					(buttonColorRGBA[1] * 0.8f + 0.2f)'  					(buttonColorRGBA[2] * 0.8f + 0.2f)'  					(buttonColorRGBA[3] * 0.8f + 0.2f)  				);  				UIColor flareWhite = UIColor.FromRGBA (1.00f' 1.00f' 1.00f' 0.83f);    //// Gradient Declarations  				var ringGradientColors = new CGColor [] {upColorOut.CGColor' bottomColorDown.CGColor};  				var ringGradientLocations = new float [] {0' 1};  				var ringGradient = new CGGradient (colorSpace' ringGradientColors' ringGradientLocations);  				var ringInnerGradientColors = new CGColor [] {upColorInner.CGColor' bottomColorInner.CGColor};  				var ringInnerGradientLocations = new float [] {0' 1};  				var ringInnerGradient = new CGGradient (colorSpace' ringInnerGradientColors' ringInnerGradientLocations);  				var buttonGradientColors = new CGColor [] {buttonBottomColor.CGColor' buttonTopColor.CGColor};  				var buttonGradientLocations = new float [] {0' 1};  				var buttonGradient = new CGGradient (colorSpace' buttonGradientColors' buttonGradientLocations);  				var overlayGradientColors = new CGColor [] {flareWhite.CGColor' UIColor.Clear.CGColor};  				var overlayGradientLocations = new float [] {0' 1};  				var overlayGradient = new CGGradient (colorSpace' overlayGradientColors' overlayGradientLocations);  				var buttonFlareGradientColors = new CGColor [] {buttonFlareUpColor.CGColor' buttonFlareBottomColor.CGColor};  				var buttonFlareGradientLocations = new float [] {0' 1};  				var buttonFlareGradient = new CGGradient (colorSpace' buttonFlareGradientColors' buttonFlareGradientLocations);    //// Shadow Declarations  				var buttonInnerShadow = UIColor.Black.CGColor;  				var buttonInnerShadowOffset = new SizeF (0' -0);  				var buttonInnerShadowBlurRadius = 5;  				var buttonOuterShadow = UIColor.Black.CGColor;  				var buttonOuterShadowOffset = new SizeF (0' 2);  				  				  				var buttonOuterShadowBlurRadius = isPressed ? 2 : 5;	// ADDED this code after PaintCode      //// outerOval Drawing  				var outerOvalPath = UIBezierPath.FromOval (new RectangleF (5' 5' 63' 63));  				context.SaveState ();  				context.SetShadowWithColor (buttonOuterShadowOffset' buttonOuterShadowBlurRadius' buttonOuterShadow);  				context.BeginTransparencyLayer (null);  				outerOvalPath.AddClip ();  				context.DrawLinearGradient (ringGradient' new PointF (36.5f' 5)' new PointF (36.5f' 68)' 0);  				context.EndTransparencyLayer ();  				context.RestoreState ();        //// overlayOval Drawing  				var overlayOvalPath = UIBezierPath.FromOval (new RectangleF (5' 5' 63' 63));  				context.SaveState ();  				overlayOvalPath.AddClip ();  				context.DrawRadialGradient (overlayGradient'      new PointF (36.5f' 12.23f)' 17.75f'      new PointF (36.5f' 36.5f)' 44.61f'      CGGradientDrawingOptions.DrawsBeforeStartLocation | CGGradientDrawingOptions.DrawsAfterEndLocation);  				context.RestoreState ();        //// innerOval Drawing  				var innerOvalPath = UIBezierPath.FromOval (new RectangleF (12' 12' 49' 49));  				context.SaveState ();  				innerOvalPath.AddClip ();  				context.DrawLinearGradient (ringInnerGradient' new PointF (36.5f' 12)' new PointF (36.5f' 61)' 0);  				context.RestoreState ();        //// buttonOval Drawing  				var buttonOvalPath = UIBezierPath.FromOval (new RectangleF (14' 13' 46' 46));  				context.SaveState ();  				buttonOvalPath.AddClip ();  				context.DrawRadialGradient (buttonGradient'      new PointF (37' 63.23f)' 2.44f'      new PointF (37' 44.48f)' 23.14f'      CGGradientDrawingOptions.DrawsBeforeStartLocation | CGGradientDrawingOptions.DrawsAfterEndLocation);  				context.RestoreState ();    ////// buttonOval Inner Shadow  				var buttonOvalBorderRect = buttonOvalPath.Bounds;  				buttonOvalBorderRect.Inflate (buttonInnerShadowBlurRadius' buttonInnerShadowBlurRadius);  				buttonOvalBorderRect.Offset (-buttonInnerShadowOffset.Width' -buttonInnerShadowOffset.Height);  				buttonOvalBorderRect = RectangleF.Union (buttonOvalBorderRect' buttonOvalPath.Bounds);  				buttonOvalBorderRect.Inflate (1' 1);    				var buttonOvalNegativePath = UIBezierPath.FromRect (buttonOvalBorderRect);  				buttonOvalNegativePath.AppendPath (buttonOvalPath);  				buttonOvalNegativePath.UsesEvenOddFillRule = true;    				context.SaveState ();  				{  					var xOffset = buttonInnerShadowOffset.Width + (float)Math.Round (buttonOvalBorderRect.Width);  					var yOffset = buttonInnerShadowOffset.Height;  					context.SetShadowWithColor (          new SizeF (xOffset + (xOffset >= 0 ? 0.1f : -0.1f)' yOffset + (yOffset >= 0 ? 0.1f : -0.1f))'          buttonInnerShadowBlurRadius'          buttonInnerShadow);    					buttonOvalPath.AddClip ();  					var transform = CGAffineTransform.MakeTranslation (-(float)Math.Round (buttonOvalBorderRect.Width)' 0);  					buttonOvalNegativePath.ApplyTransform (transform);  					UIColor.Gray.SetFill ();  					buttonOvalNegativePath.Fill ();  				}  				context.RestoreState ();          //// flareOval Drawing  				var flareOvalPath = UIBezierPath.FromOval (new RectangleF (22' 14' 29' 15));  				context.SaveState ();  				flareOvalPath.AddClip ();  				context.DrawLinearGradient (buttonFlareGradient' new PointF (36.5f' 14)' new PointF (36.5f' 29)' 0);  				context.RestoreState ();      				// ------------- END PAINTCODE -------------  				  				  				  			}
Magic Number,PaintCode,BlueButton,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\BlueButton\BlueButton.cs,Draw,The following statement contains a magic number: using (var colorSpace = CGColorSpace.CreateDeviceRGB ()) {  				  				  				  				// ------------- START PAINTCODE -------------    //// Color Declarations  				UIColor upColorOut = UIColor.FromRGBA (0.79f' 0.79f' 0.79f' 1.00f);  				UIColor bottomColorDown = UIColor.FromRGBA (0.21f' 0.21f' 0.21f' 1.00f);  				UIColor upColorInner = UIColor.FromRGBA (0.17f' 0.18f' 0.20f' 1.00f);  				UIColor bottomColorInner = UIColor.FromRGBA (0.98f' 0.98f' 0.99f' 1.00f);      				UIColor buttonFlareUpColor = UIColor.FromRGBA (  					(buttonColorRGBA[0] * 0.3f + 0.7f)'  					(buttonColorRGBA[1] * 0.3f + 0.7f)'  					(buttonColorRGBA[2] * 0.3f + 0.7f)'  					(buttonColorRGBA[3] * 0.3f + 0.7f)  				);  				UIColor buttonTopColor = UIColor.FromRGBA (  					(buttonColorRGBA[0] * 0.8f)'  					(buttonColorRGBA[1] * 0.8f)'  					(buttonColorRGBA[2] * 0.8f)'  					(buttonColorRGBA[3] * 0.8f + 0.2f)  				);  				UIColor buttonBottomColor = UIColor.FromRGBA (  					(buttonColorRGBA[0] * 0 + 1)'  					(buttonColorRGBA[1] * 0 + 1)'  					(buttonColorRGBA[2] * 0 + 1)'  					(buttonColorRGBA[3] * 0 + 1)  				);  				UIColor buttonFlareBottomColor = UIColor.FromRGBA (  					(buttonColorRGBA[0] * 0.8f + 0.2f)'  					(buttonColorRGBA[1] * 0.8f + 0.2f)'  					(buttonColorRGBA[2] * 0.8f + 0.2f)'  					(buttonColorRGBA[3] * 0.8f + 0.2f)  				);  				UIColor flareWhite = UIColor.FromRGBA (1.00f' 1.00f' 1.00f' 0.83f);    //// Gradient Declarations  				var ringGradientColors = new CGColor [] {upColorOut.CGColor' bottomColorDown.CGColor};  				var ringGradientLocations = new float [] {0' 1};  				var ringGradient = new CGGradient (colorSpace' ringGradientColors' ringGradientLocations);  				var ringInnerGradientColors = new CGColor [] {upColorInner.CGColor' bottomColorInner.CGColor};  				var ringInnerGradientLocations = new float [] {0' 1};  				var ringInnerGradient = new CGGradient (colorSpace' ringInnerGradientColors' ringInnerGradientLocations);  				var buttonGradientColors = new CGColor [] {buttonBottomColor.CGColor' buttonTopColor.CGColor};  				var buttonGradientLocations = new float [] {0' 1};  				var buttonGradient = new CGGradient (colorSpace' buttonGradientColors' buttonGradientLocations);  				var overlayGradientColors = new CGColor [] {flareWhite.CGColor' UIColor.Clear.CGColor};  				var overlayGradientLocations = new float [] {0' 1};  				var overlayGradient = new CGGradient (colorSpace' overlayGradientColors' overlayGradientLocations);  				var buttonFlareGradientColors = new CGColor [] {buttonFlareUpColor.CGColor' buttonFlareBottomColor.CGColor};  				var buttonFlareGradientLocations = new float [] {0' 1};  				var buttonFlareGradient = new CGGradient (colorSpace' buttonFlareGradientColors' buttonFlareGradientLocations);    //// Shadow Declarations  				var buttonInnerShadow = UIColor.Black.CGColor;  				var buttonInnerShadowOffset = new SizeF (0' -0);  				var buttonInnerShadowBlurRadius = 5;  				var buttonOuterShadow = UIColor.Black.CGColor;  				var buttonOuterShadowOffset = new SizeF (0' 2);  				  				  				var buttonOuterShadowBlurRadius = isPressed ? 2 : 5;	// ADDED this code after PaintCode      //// outerOval Drawing  				var outerOvalPath = UIBezierPath.FromOval (new RectangleF (5' 5' 63' 63));  				context.SaveState ();  				context.SetShadowWithColor (buttonOuterShadowOffset' buttonOuterShadowBlurRadius' buttonOuterShadow);  				context.BeginTransparencyLayer (null);  				outerOvalPath.AddClip ();  				context.DrawLinearGradient (ringGradient' new PointF (36.5f' 5)' new PointF (36.5f' 68)' 0);  				context.EndTransparencyLayer ();  				context.RestoreState ();        //// overlayOval Drawing  				var overlayOvalPath = UIBezierPath.FromOval (new RectangleF (5' 5' 63' 63));  				context.SaveState ();  				overlayOvalPath.AddClip ();  				context.DrawRadialGradient (overlayGradient'      new PointF (36.5f' 12.23f)' 17.75f'      new PointF (36.5f' 36.5f)' 44.61f'      CGGradientDrawingOptions.DrawsBeforeStartLocation | CGGradientDrawingOptions.DrawsAfterEndLocation);  				context.RestoreState ();        //// innerOval Drawing  				var innerOvalPath = UIBezierPath.FromOval (new RectangleF (12' 12' 49' 49));  				context.SaveState ();  				innerOvalPath.AddClip ();  				context.DrawLinearGradient (ringInnerGradient' new PointF (36.5f' 12)' new PointF (36.5f' 61)' 0);  				context.RestoreState ();        //// buttonOval Drawing  				var buttonOvalPath = UIBezierPath.FromOval (new RectangleF (14' 13' 46' 46));  				context.SaveState ();  				buttonOvalPath.AddClip ();  				context.DrawRadialGradient (buttonGradient'      new PointF (37' 63.23f)' 2.44f'      new PointF (37' 44.48f)' 23.14f'      CGGradientDrawingOptions.DrawsBeforeStartLocation | CGGradientDrawingOptions.DrawsAfterEndLocation);  				context.RestoreState ();    ////// buttonOval Inner Shadow  				var buttonOvalBorderRect = buttonOvalPath.Bounds;  				buttonOvalBorderRect.Inflate (buttonInnerShadowBlurRadius' buttonInnerShadowBlurRadius);  				buttonOvalBorderRect.Offset (-buttonInnerShadowOffset.Width' -buttonInnerShadowOffset.Height);  				buttonOvalBorderRect = RectangleF.Union (buttonOvalBorderRect' buttonOvalPath.Bounds);  				buttonOvalBorderRect.Inflate (1' 1);    				var buttonOvalNegativePath = UIBezierPath.FromRect (buttonOvalBorderRect);  				buttonOvalNegativePath.AppendPath (buttonOvalPath);  				buttonOvalNegativePath.UsesEvenOddFillRule = true;    				context.SaveState ();  				{  					var xOffset = buttonInnerShadowOffset.Width + (float)Math.Round (buttonOvalBorderRect.Width);  					var yOffset = buttonInnerShadowOffset.Height;  					context.SetShadowWithColor (          new SizeF (xOffset + (xOffset >= 0 ? 0.1f : -0.1f)' yOffset + (yOffset >= 0 ? 0.1f : -0.1f))'          buttonInnerShadowBlurRadius'          buttonInnerShadow);    					buttonOvalPath.AddClip ();  					var transform = CGAffineTransform.MakeTranslation (-(float)Math.Round (buttonOvalBorderRect.Width)' 0);  					buttonOvalNegativePath.ApplyTransform (transform);  					UIColor.Gray.SetFill ();  					buttonOvalNegativePath.Fill ();  				}  				context.RestoreState ();          //// flareOval Drawing  				var flareOvalPath = UIBezierPath.FromOval (new RectangleF (22' 14' 29' 15));  				context.SaveState ();  				flareOvalPath.AddClip ();  				context.DrawLinearGradient (buttonFlareGradient' new PointF (36.5f' 14)' new PointF (36.5f' 29)' 0);  				context.RestoreState ();      				// ------------- END PAINTCODE -------------  				  				  				  			}
Magic Number,PaintCode,BlueButton,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\BlueButton\BlueButton.cs,Draw,The following statement contains a magic number: using (var colorSpace = CGColorSpace.CreateDeviceRGB ()) {  				  				  				  				// ------------- START PAINTCODE -------------    //// Color Declarations  				UIColor upColorOut = UIColor.FromRGBA (0.79f' 0.79f' 0.79f' 1.00f);  				UIColor bottomColorDown = UIColor.FromRGBA (0.21f' 0.21f' 0.21f' 1.00f);  				UIColor upColorInner = UIColor.FromRGBA (0.17f' 0.18f' 0.20f' 1.00f);  				UIColor bottomColorInner = UIColor.FromRGBA (0.98f' 0.98f' 0.99f' 1.00f);      				UIColor buttonFlareUpColor = UIColor.FromRGBA (  					(buttonColorRGBA[0] * 0.3f + 0.7f)'  					(buttonColorRGBA[1] * 0.3f + 0.7f)'  					(buttonColorRGBA[2] * 0.3f + 0.7f)'  					(buttonColorRGBA[3] * 0.3f + 0.7f)  				);  				UIColor buttonTopColor = UIColor.FromRGBA (  					(buttonColorRGBA[0] * 0.8f)'  					(buttonColorRGBA[1] * 0.8f)'  					(buttonColorRGBA[2] * 0.8f)'  					(buttonColorRGBA[3] * 0.8f + 0.2f)  				);  				UIColor buttonBottomColor = UIColor.FromRGBA (  					(buttonColorRGBA[0] * 0 + 1)'  					(buttonColorRGBA[1] * 0 + 1)'  					(buttonColorRGBA[2] * 0 + 1)'  					(buttonColorRGBA[3] * 0 + 1)  				);  				UIColor buttonFlareBottomColor = UIColor.FromRGBA (  					(buttonColorRGBA[0] * 0.8f + 0.2f)'  					(buttonColorRGBA[1] * 0.8f + 0.2f)'  					(buttonColorRGBA[2] * 0.8f + 0.2f)'  					(buttonColorRGBA[3] * 0.8f + 0.2f)  				);  				UIColor flareWhite = UIColor.FromRGBA (1.00f' 1.00f' 1.00f' 0.83f);    //// Gradient Declarations  				var ringGradientColors = new CGColor [] {upColorOut.CGColor' bottomColorDown.CGColor};  				var ringGradientLocations = new float [] {0' 1};  				var ringGradient = new CGGradient (colorSpace' ringGradientColors' ringGradientLocations);  				var ringInnerGradientColors = new CGColor [] {upColorInner.CGColor' bottomColorInner.CGColor};  				var ringInnerGradientLocations = new float [] {0' 1};  				var ringInnerGradient = new CGGradient (colorSpace' ringInnerGradientColors' ringInnerGradientLocations);  				var buttonGradientColors = new CGColor [] {buttonBottomColor.CGColor' buttonTopColor.CGColor};  				var buttonGradientLocations = new float [] {0' 1};  				var buttonGradient = new CGGradient (colorSpace' buttonGradientColors' buttonGradientLocations);  				var overlayGradientColors = new CGColor [] {flareWhite.CGColor' UIColor.Clear.CGColor};  				var overlayGradientLocations = new float [] {0' 1};  				var overlayGradient = new CGGradient (colorSpace' overlayGradientColors' overlayGradientLocations);  				var buttonFlareGradientColors = new CGColor [] {buttonFlareUpColor.CGColor' buttonFlareBottomColor.CGColor};  				var buttonFlareGradientLocations = new float [] {0' 1};  				var buttonFlareGradient = new CGGradient (colorSpace' buttonFlareGradientColors' buttonFlareGradientLocations);    //// Shadow Declarations  				var buttonInnerShadow = UIColor.Black.CGColor;  				var buttonInnerShadowOffset = new SizeF (0' -0);  				var buttonInnerShadowBlurRadius = 5;  				var buttonOuterShadow = UIColor.Black.CGColor;  				var buttonOuterShadowOffset = new SizeF (0' 2);  				  				  				var buttonOuterShadowBlurRadius = isPressed ? 2 : 5;	// ADDED this code after PaintCode      //// outerOval Drawing  				var outerOvalPath = UIBezierPath.FromOval (new RectangleF (5' 5' 63' 63));  				context.SaveState ();  				context.SetShadowWithColor (buttonOuterShadowOffset' buttonOuterShadowBlurRadius' buttonOuterShadow);  				context.BeginTransparencyLayer (null);  				outerOvalPath.AddClip ();  				context.DrawLinearGradient (ringGradient' new PointF (36.5f' 5)' new PointF (36.5f' 68)' 0);  				context.EndTransparencyLayer ();  				context.RestoreState ();        //// overlayOval Drawing  				var overlayOvalPath = UIBezierPath.FromOval (new RectangleF (5' 5' 63' 63));  				context.SaveState ();  				overlayOvalPath.AddClip ();  				context.DrawRadialGradient (overlayGradient'      new PointF (36.5f' 12.23f)' 17.75f'      new PointF (36.5f' 36.5f)' 44.61f'      CGGradientDrawingOptions.DrawsBeforeStartLocation | CGGradientDrawingOptions.DrawsAfterEndLocation);  				context.RestoreState ();        //// innerOval Drawing  				var innerOvalPath = UIBezierPath.FromOval (new RectangleF (12' 12' 49' 49));  				context.SaveState ();  				innerOvalPath.AddClip ();  				context.DrawLinearGradient (ringInnerGradient' new PointF (36.5f' 12)' new PointF (36.5f' 61)' 0);  				context.RestoreState ();        //// buttonOval Drawing  				var buttonOvalPath = UIBezierPath.FromOval (new RectangleF (14' 13' 46' 46));  				context.SaveState ();  				buttonOvalPath.AddClip ();  				context.DrawRadialGradient (buttonGradient'      new PointF (37' 63.23f)' 2.44f'      new PointF (37' 44.48f)' 23.14f'      CGGradientDrawingOptions.DrawsBeforeStartLocation | CGGradientDrawingOptions.DrawsAfterEndLocation);  				context.RestoreState ();    ////// buttonOval Inner Shadow  				var buttonOvalBorderRect = buttonOvalPath.Bounds;  				buttonOvalBorderRect.Inflate (buttonInnerShadowBlurRadius' buttonInnerShadowBlurRadius);  				buttonOvalBorderRect.Offset (-buttonInnerShadowOffset.Width' -buttonInnerShadowOffset.Height);  				buttonOvalBorderRect = RectangleF.Union (buttonOvalBorderRect' buttonOvalPath.Bounds);  				buttonOvalBorderRect.Inflate (1' 1);    				var buttonOvalNegativePath = UIBezierPath.FromRect (buttonOvalBorderRect);  				buttonOvalNegativePath.AppendPath (buttonOvalPath);  				buttonOvalNegativePath.UsesEvenOddFillRule = true;    				context.SaveState ();  				{  					var xOffset = buttonInnerShadowOffset.Width + (float)Math.Round (buttonOvalBorderRect.Width);  					var yOffset = buttonInnerShadowOffset.Height;  					context.SetShadowWithColor (          new SizeF (xOffset + (xOffset >= 0 ? 0.1f : -0.1f)' yOffset + (yOffset >= 0 ? 0.1f : -0.1f))'          buttonInnerShadowBlurRadius'          buttonInnerShadow);    					buttonOvalPath.AddClip ();  					var transform = CGAffineTransform.MakeTranslation (-(float)Math.Round (buttonOvalBorderRect.Width)' 0);  					buttonOvalNegativePath.ApplyTransform (transform);  					UIColor.Gray.SetFill ();  					buttonOvalNegativePath.Fill ();  				}  				context.RestoreState ();          //// flareOval Drawing  				var flareOvalPath = UIBezierPath.FromOval (new RectangleF (22' 14' 29' 15));  				context.SaveState ();  				flareOvalPath.AddClip ();  				context.DrawLinearGradient (buttonFlareGradient' new PointF (36.5f' 14)' new PointF (36.5f' 29)' 0);  				context.RestoreState ();      				// ------------- END PAINTCODE -------------  				  				  				  			}
Magic Number,PaintCode,BlueButton,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\BlueButton\BlueButton.cs,Draw,The following statement contains a magic number: using (var colorSpace = CGColorSpace.CreateDeviceRGB ()) {  				  				  				  				// ------------- START PAINTCODE -------------    //// Color Declarations  				UIColor upColorOut = UIColor.FromRGBA (0.79f' 0.79f' 0.79f' 1.00f);  				UIColor bottomColorDown = UIColor.FromRGBA (0.21f' 0.21f' 0.21f' 1.00f);  				UIColor upColorInner = UIColor.FromRGBA (0.17f' 0.18f' 0.20f' 1.00f);  				UIColor bottomColorInner = UIColor.FromRGBA (0.98f' 0.98f' 0.99f' 1.00f);      				UIColor buttonFlareUpColor = UIColor.FromRGBA (  					(buttonColorRGBA[0] * 0.3f + 0.7f)'  					(buttonColorRGBA[1] * 0.3f + 0.7f)'  					(buttonColorRGBA[2] * 0.3f + 0.7f)'  					(buttonColorRGBA[3] * 0.3f + 0.7f)  				);  				UIColor buttonTopColor = UIColor.FromRGBA (  					(buttonColorRGBA[0] * 0.8f)'  					(buttonColorRGBA[1] * 0.8f)'  					(buttonColorRGBA[2] * 0.8f)'  					(buttonColorRGBA[3] * 0.8f + 0.2f)  				);  				UIColor buttonBottomColor = UIColor.FromRGBA (  					(buttonColorRGBA[0] * 0 + 1)'  					(buttonColorRGBA[1] * 0 + 1)'  					(buttonColorRGBA[2] * 0 + 1)'  					(buttonColorRGBA[3] * 0 + 1)  				);  				UIColor buttonFlareBottomColor = UIColor.FromRGBA (  					(buttonColorRGBA[0] * 0.8f + 0.2f)'  					(buttonColorRGBA[1] * 0.8f + 0.2f)'  					(buttonColorRGBA[2] * 0.8f + 0.2f)'  					(buttonColorRGBA[3] * 0.8f + 0.2f)  				);  				UIColor flareWhite = UIColor.FromRGBA (1.00f' 1.00f' 1.00f' 0.83f);    //// Gradient Declarations  				var ringGradientColors = new CGColor [] {upColorOut.CGColor' bottomColorDown.CGColor};  				var ringGradientLocations = new float [] {0' 1};  				var ringGradient = new CGGradient (colorSpace' ringGradientColors' ringGradientLocations);  				var ringInnerGradientColors = new CGColor [] {upColorInner.CGColor' bottomColorInner.CGColor};  				var ringInnerGradientLocations = new float [] {0' 1};  				var ringInnerGradient = new CGGradient (colorSpace' ringInnerGradientColors' ringInnerGradientLocations);  				var buttonGradientColors = new CGColor [] {buttonBottomColor.CGColor' buttonTopColor.CGColor};  				var buttonGradientLocations = new float [] {0' 1};  				var buttonGradient = new CGGradient (colorSpace' buttonGradientColors' buttonGradientLocations);  				var overlayGradientColors = new CGColor [] {flareWhite.CGColor' UIColor.Clear.CGColor};  				var overlayGradientLocations = new float [] {0' 1};  				var overlayGradient = new CGGradient (colorSpace' overlayGradientColors' overlayGradientLocations);  				var buttonFlareGradientColors = new CGColor [] {buttonFlareUpColor.CGColor' buttonFlareBottomColor.CGColor};  				var buttonFlareGradientLocations = new float [] {0' 1};  				var buttonFlareGradient = new CGGradient (colorSpace' buttonFlareGradientColors' buttonFlareGradientLocations);    //// Shadow Declarations  				var buttonInnerShadow = UIColor.Black.CGColor;  				var buttonInnerShadowOffset = new SizeF (0' -0);  				var buttonInnerShadowBlurRadius = 5;  				var buttonOuterShadow = UIColor.Black.CGColor;  				var buttonOuterShadowOffset = new SizeF (0' 2);  				  				  				var buttonOuterShadowBlurRadius = isPressed ? 2 : 5;	// ADDED this code after PaintCode      //// outerOval Drawing  				var outerOvalPath = UIBezierPath.FromOval (new RectangleF (5' 5' 63' 63));  				context.SaveState ();  				context.SetShadowWithColor (buttonOuterShadowOffset' buttonOuterShadowBlurRadius' buttonOuterShadow);  				context.BeginTransparencyLayer (null);  				outerOvalPath.AddClip ();  				context.DrawLinearGradient (ringGradient' new PointF (36.5f' 5)' new PointF (36.5f' 68)' 0);  				context.EndTransparencyLayer ();  				context.RestoreState ();        //// overlayOval Drawing  				var overlayOvalPath = UIBezierPath.FromOval (new RectangleF (5' 5' 63' 63));  				context.SaveState ();  				overlayOvalPath.AddClip ();  				context.DrawRadialGradient (overlayGradient'      new PointF (36.5f' 12.23f)' 17.75f'      new PointF (36.5f' 36.5f)' 44.61f'      CGGradientDrawingOptions.DrawsBeforeStartLocation | CGGradientDrawingOptions.DrawsAfterEndLocation);  				context.RestoreState ();        //// innerOval Drawing  				var innerOvalPath = UIBezierPath.FromOval (new RectangleF (12' 12' 49' 49));  				context.SaveState ();  				innerOvalPath.AddClip ();  				context.DrawLinearGradient (ringInnerGradient' new PointF (36.5f' 12)' new PointF (36.5f' 61)' 0);  				context.RestoreState ();        //// buttonOval Drawing  				var buttonOvalPath = UIBezierPath.FromOval (new RectangleF (14' 13' 46' 46));  				context.SaveState ();  				buttonOvalPath.AddClip ();  				context.DrawRadialGradient (buttonGradient'      new PointF (37' 63.23f)' 2.44f'      new PointF (37' 44.48f)' 23.14f'      CGGradientDrawingOptions.DrawsBeforeStartLocation | CGGradientDrawingOptions.DrawsAfterEndLocation);  				context.RestoreState ();    ////// buttonOval Inner Shadow  				var buttonOvalBorderRect = buttonOvalPath.Bounds;  				buttonOvalBorderRect.Inflate (buttonInnerShadowBlurRadius' buttonInnerShadowBlurRadius);  				buttonOvalBorderRect.Offset (-buttonInnerShadowOffset.Width' -buttonInnerShadowOffset.Height);  				buttonOvalBorderRect = RectangleF.Union (buttonOvalBorderRect' buttonOvalPath.Bounds);  				buttonOvalBorderRect.Inflate (1' 1);    				var buttonOvalNegativePath = UIBezierPath.FromRect (buttonOvalBorderRect);  				buttonOvalNegativePath.AppendPath (buttonOvalPath);  				buttonOvalNegativePath.UsesEvenOddFillRule = true;    				context.SaveState ();  				{  					var xOffset = buttonInnerShadowOffset.Width + (float)Math.Round (buttonOvalBorderRect.Width);  					var yOffset = buttonInnerShadowOffset.Height;  					context.SetShadowWithColor (          new SizeF (xOffset + (xOffset >= 0 ? 0.1f : -0.1f)' yOffset + (yOffset >= 0 ? 0.1f : -0.1f))'          buttonInnerShadowBlurRadius'          buttonInnerShadow);    					buttonOvalPath.AddClip ();  					var transform = CGAffineTransform.MakeTranslation (-(float)Math.Round (buttonOvalBorderRect.Width)' 0);  					buttonOvalNegativePath.ApplyTransform (transform);  					UIColor.Gray.SetFill ();  					buttonOvalNegativePath.Fill ();  				}  				context.RestoreState ();          //// flareOval Drawing  				var flareOvalPath = UIBezierPath.FromOval (new RectangleF (22' 14' 29' 15));  				context.SaveState ();  				flareOvalPath.AddClip ();  				context.DrawLinearGradient (buttonFlareGradient' new PointF (36.5f' 14)' new PointF (36.5f' 29)' 0);  				context.RestoreState ();      				// ------------- END PAINTCODE -------------  				  				  				  			}
Magic Number,PaintCode,BlueButton,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\BlueButton\BlueButton.cs,Draw,The following statement contains a magic number: using (var colorSpace = CGColorSpace.CreateDeviceRGB ()) {  				  				  				  				// ------------- START PAINTCODE -------------    //// Color Declarations  				UIColor upColorOut = UIColor.FromRGBA (0.79f' 0.79f' 0.79f' 1.00f);  				UIColor bottomColorDown = UIColor.FromRGBA (0.21f' 0.21f' 0.21f' 1.00f);  				UIColor upColorInner = UIColor.FromRGBA (0.17f' 0.18f' 0.20f' 1.00f);  				UIColor bottomColorInner = UIColor.FromRGBA (0.98f' 0.98f' 0.99f' 1.00f);      				UIColor buttonFlareUpColor = UIColor.FromRGBA (  					(buttonColorRGBA[0] * 0.3f + 0.7f)'  					(buttonColorRGBA[1] * 0.3f + 0.7f)'  					(buttonColorRGBA[2] * 0.3f + 0.7f)'  					(buttonColorRGBA[3] * 0.3f + 0.7f)  				);  				UIColor buttonTopColor = UIColor.FromRGBA (  					(buttonColorRGBA[0] * 0.8f)'  					(buttonColorRGBA[1] * 0.8f)'  					(buttonColorRGBA[2] * 0.8f)'  					(buttonColorRGBA[3] * 0.8f + 0.2f)  				);  				UIColor buttonBottomColor = UIColor.FromRGBA (  					(buttonColorRGBA[0] * 0 + 1)'  					(buttonColorRGBA[1] * 0 + 1)'  					(buttonColorRGBA[2] * 0 + 1)'  					(buttonColorRGBA[3] * 0 + 1)  				);  				UIColor buttonFlareBottomColor = UIColor.FromRGBA (  					(buttonColorRGBA[0] * 0.8f + 0.2f)'  					(buttonColorRGBA[1] * 0.8f + 0.2f)'  					(buttonColorRGBA[2] * 0.8f + 0.2f)'  					(buttonColorRGBA[3] * 0.8f + 0.2f)  				);  				UIColor flareWhite = UIColor.FromRGBA (1.00f' 1.00f' 1.00f' 0.83f);    //// Gradient Declarations  				var ringGradientColors = new CGColor [] {upColorOut.CGColor' bottomColorDown.CGColor};  				var ringGradientLocations = new float [] {0' 1};  				var ringGradient = new CGGradient (colorSpace' ringGradientColors' ringGradientLocations);  				var ringInnerGradientColors = new CGColor [] {upColorInner.CGColor' bottomColorInner.CGColor};  				var ringInnerGradientLocations = new float [] {0' 1};  				var ringInnerGradient = new CGGradient (colorSpace' ringInnerGradientColors' ringInnerGradientLocations);  				var buttonGradientColors = new CGColor [] {buttonBottomColor.CGColor' buttonTopColor.CGColor};  				var buttonGradientLocations = new float [] {0' 1};  				var buttonGradient = new CGGradient (colorSpace' buttonGradientColors' buttonGradientLocations);  				var overlayGradientColors = new CGColor [] {flareWhite.CGColor' UIColor.Clear.CGColor};  				var overlayGradientLocations = new float [] {0' 1};  				var overlayGradient = new CGGradient (colorSpace' overlayGradientColors' overlayGradientLocations);  				var buttonFlareGradientColors = new CGColor [] {buttonFlareUpColor.CGColor' buttonFlareBottomColor.CGColor};  				var buttonFlareGradientLocations = new float [] {0' 1};  				var buttonFlareGradient = new CGGradient (colorSpace' buttonFlareGradientColors' buttonFlareGradientLocations);    //// Shadow Declarations  				var buttonInnerShadow = UIColor.Black.CGColor;  				var buttonInnerShadowOffset = new SizeF (0' -0);  				var buttonInnerShadowBlurRadius = 5;  				var buttonOuterShadow = UIColor.Black.CGColor;  				var buttonOuterShadowOffset = new SizeF (0' 2);  				  				  				var buttonOuterShadowBlurRadius = isPressed ? 2 : 5;	// ADDED this code after PaintCode      //// outerOval Drawing  				var outerOvalPath = UIBezierPath.FromOval (new RectangleF (5' 5' 63' 63));  				context.SaveState ();  				context.SetShadowWithColor (buttonOuterShadowOffset' buttonOuterShadowBlurRadius' buttonOuterShadow);  				context.BeginTransparencyLayer (null);  				outerOvalPath.AddClip ();  				context.DrawLinearGradient (ringGradient' new PointF (36.5f' 5)' new PointF (36.5f' 68)' 0);  				context.EndTransparencyLayer ();  				context.RestoreState ();        //// overlayOval Drawing  				var overlayOvalPath = UIBezierPath.FromOval (new RectangleF (5' 5' 63' 63));  				context.SaveState ();  				overlayOvalPath.AddClip ();  				context.DrawRadialGradient (overlayGradient'      new PointF (36.5f' 12.23f)' 17.75f'      new PointF (36.5f' 36.5f)' 44.61f'      CGGradientDrawingOptions.DrawsBeforeStartLocation | CGGradientDrawingOptions.DrawsAfterEndLocation);  				context.RestoreState ();        //// innerOval Drawing  				var innerOvalPath = UIBezierPath.FromOval (new RectangleF (12' 12' 49' 49));  				context.SaveState ();  				innerOvalPath.AddClip ();  				context.DrawLinearGradient (ringInnerGradient' new PointF (36.5f' 12)' new PointF (36.5f' 61)' 0);  				context.RestoreState ();        //// buttonOval Drawing  				var buttonOvalPath = UIBezierPath.FromOval (new RectangleF (14' 13' 46' 46));  				context.SaveState ();  				buttonOvalPath.AddClip ();  				context.DrawRadialGradient (buttonGradient'      new PointF (37' 63.23f)' 2.44f'      new PointF (37' 44.48f)' 23.14f'      CGGradientDrawingOptions.DrawsBeforeStartLocation | CGGradientDrawingOptions.DrawsAfterEndLocation);  				context.RestoreState ();    ////// buttonOval Inner Shadow  				var buttonOvalBorderRect = buttonOvalPath.Bounds;  				buttonOvalBorderRect.Inflate (buttonInnerShadowBlurRadius' buttonInnerShadowBlurRadius);  				buttonOvalBorderRect.Offset (-buttonInnerShadowOffset.Width' -buttonInnerShadowOffset.Height);  				buttonOvalBorderRect = RectangleF.Union (buttonOvalBorderRect' buttonOvalPath.Bounds);  				buttonOvalBorderRect.Inflate (1' 1);    				var buttonOvalNegativePath = UIBezierPath.FromRect (buttonOvalBorderRect);  				buttonOvalNegativePath.AppendPath (buttonOvalPath);  				buttonOvalNegativePath.UsesEvenOddFillRule = true;    				context.SaveState ();  				{  					var xOffset = buttonInnerShadowOffset.Width + (float)Math.Round (buttonOvalBorderRect.Width);  					var yOffset = buttonInnerShadowOffset.Height;  					context.SetShadowWithColor (          new SizeF (xOffset + (xOffset >= 0 ? 0.1f : -0.1f)' yOffset + (yOffset >= 0 ? 0.1f : -0.1f))'          buttonInnerShadowBlurRadius'          buttonInnerShadow);    					buttonOvalPath.AddClip ();  					var transform = CGAffineTransform.MakeTranslation (-(float)Math.Round (buttonOvalBorderRect.Width)' 0);  					buttonOvalNegativePath.ApplyTransform (transform);  					UIColor.Gray.SetFill ();  					buttonOvalNegativePath.Fill ();  				}  				context.RestoreState ();          //// flareOval Drawing  				var flareOvalPath = UIBezierPath.FromOval (new RectangleF (22' 14' 29' 15));  				context.SaveState ();  				flareOvalPath.AddClip ();  				context.DrawLinearGradient (buttonFlareGradient' new PointF (36.5f' 14)' new PointF (36.5f' 29)' 0);  				context.RestoreState ();      				// ------------- END PAINTCODE -------------  				  				  				  			}
Magic Number,PaintCode,BlueButton,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\BlueButton\BlueButton.cs,Draw,The following statement contains a magic number: using (var colorSpace = CGColorSpace.CreateDeviceRGB ()) {  				  				  				  				// ------------- START PAINTCODE -------------    //// Color Declarations  				UIColor upColorOut = UIColor.FromRGBA (0.79f' 0.79f' 0.79f' 1.00f);  				UIColor bottomColorDown = UIColor.FromRGBA (0.21f' 0.21f' 0.21f' 1.00f);  				UIColor upColorInner = UIColor.FromRGBA (0.17f' 0.18f' 0.20f' 1.00f);  				UIColor bottomColorInner = UIColor.FromRGBA (0.98f' 0.98f' 0.99f' 1.00f);      				UIColor buttonFlareUpColor = UIColor.FromRGBA (  					(buttonColorRGBA[0] * 0.3f + 0.7f)'  					(buttonColorRGBA[1] * 0.3f + 0.7f)'  					(buttonColorRGBA[2] * 0.3f + 0.7f)'  					(buttonColorRGBA[3] * 0.3f + 0.7f)  				);  				UIColor buttonTopColor = UIColor.FromRGBA (  					(buttonColorRGBA[0] * 0.8f)'  					(buttonColorRGBA[1] * 0.8f)'  					(buttonColorRGBA[2] * 0.8f)'  					(buttonColorRGBA[3] * 0.8f + 0.2f)  				);  				UIColor buttonBottomColor = UIColor.FromRGBA (  					(buttonColorRGBA[0] * 0 + 1)'  					(buttonColorRGBA[1] * 0 + 1)'  					(buttonColorRGBA[2] * 0 + 1)'  					(buttonColorRGBA[3] * 0 + 1)  				);  				UIColor buttonFlareBottomColor = UIColor.FromRGBA (  					(buttonColorRGBA[0] * 0.8f + 0.2f)'  					(buttonColorRGBA[1] * 0.8f + 0.2f)'  					(buttonColorRGBA[2] * 0.8f + 0.2f)'  					(buttonColorRGBA[3] * 0.8f + 0.2f)  				);  				UIColor flareWhite = UIColor.FromRGBA (1.00f' 1.00f' 1.00f' 0.83f);    //// Gradient Declarations  				var ringGradientColors = new CGColor [] {upColorOut.CGColor' bottomColorDown.CGColor};  				var ringGradientLocations = new float [] {0' 1};  				var ringGradient = new CGGradient (colorSpace' ringGradientColors' ringGradientLocations);  				var ringInnerGradientColors = new CGColor [] {upColorInner.CGColor' bottomColorInner.CGColor};  				var ringInnerGradientLocations = new float [] {0' 1};  				var ringInnerGradient = new CGGradient (colorSpace' ringInnerGradientColors' ringInnerGradientLocations);  				var buttonGradientColors = new CGColor [] {buttonBottomColor.CGColor' buttonTopColor.CGColor};  				var buttonGradientLocations = new float [] {0' 1};  				var buttonGradient = new CGGradient (colorSpace' buttonGradientColors' buttonGradientLocations);  				var overlayGradientColors = new CGColor [] {flareWhite.CGColor' UIColor.Clear.CGColor};  				var overlayGradientLocations = new float [] {0' 1};  				var overlayGradient = new CGGradient (colorSpace' overlayGradientColors' overlayGradientLocations);  				var buttonFlareGradientColors = new CGColor [] {buttonFlareUpColor.CGColor' buttonFlareBottomColor.CGColor};  				var buttonFlareGradientLocations = new float [] {0' 1};  				var buttonFlareGradient = new CGGradient (colorSpace' buttonFlareGradientColors' buttonFlareGradientLocations);    //// Shadow Declarations  				var buttonInnerShadow = UIColor.Black.CGColor;  				var buttonInnerShadowOffset = new SizeF (0' -0);  				var buttonInnerShadowBlurRadius = 5;  				var buttonOuterShadow = UIColor.Black.CGColor;  				var buttonOuterShadowOffset = new SizeF (0' 2);  				  				  				var buttonOuterShadowBlurRadius = isPressed ? 2 : 5;	// ADDED this code after PaintCode      //// outerOval Drawing  				var outerOvalPath = UIBezierPath.FromOval (new RectangleF (5' 5' 63' 63));  				context.SaveState ();  				context.SetShadowWithColor (buttonOuterShadowOffset' buttonOuterShadowBlurRadius' buttonOuterShadow);  				context.BeginTransparencyLayer (null);  				outerOvalPath.AddClip ();  				context.DrawLinearGradient (ringGradient' new PointF (36.5f' 5)' new PointF (36.5f' 68)' 0);  				context.EndTransparencyLayer ();  				context.RestoreState ();        //// overlayOval Drawing  				var overlayOvalPath = UIBezierPath.FromOval (new RectangleF (5' 5' 63' 63));  				context.SaveState ();  				overlayOvalPath.AddClip ();  				context.DrawRadialGradient (overlayGradient'      new PointF (36.5f' 12.23f)' 17.75f'      new PointF (36.5f' 36.5f)' 44.61f'      CGGradientDrawingOptions.DrawsBeforeStartLocation | CGGradientDrawingOptions.DrawsAfterEndLocation);  				context.RestoreState ();        //// innerOval Drawing  				var innerOvalPath = UIBezierPath.FromOval (new RectangleF (12' 12' 49' 49));  				context.SaveState ();  				innerOvalPath.AddClip ();  				context.DrawLinearGradient (ringInnerGradient' new PointF (36.5f' 12)' new PointF (36.5f' 61)' 0);  				context.RestoreState ();        //// buttonOval Drawing  				var buttonOvalPath = UIBezierPath.FromOval (new RectangleF (14' 13' 46' 46));  				context.SaveState ();  				buttonOvalPath.AddClip ();  				context.DrawRadialGradient (buttonGradient'      new PointF (37' 63.23f)' 2.44f'      new PointF (37' 44.48f)' 23.14f'      CGGradientDrawingOptions.DrawsBeforeStartLocation | CGGradientDrawingOptions.DrawsAfterEndLocation);  				context.RestoreState ();    ////// buttonOval Inner Shadow  				var buttonOvalBorderRect = buttonOvalPath.Bounds;  				buttonOvalBorderRect.Inflate (buttonInnerShadowBlurRadius' buttonInnerShadowBlurRadius);  				buttonOvalBorderRect.Offset (-buttonInnerShadowOffset.Width' -buttonInnerShadowOffset.Height);  				buttonOvalBorderRect = RectangleF.Union (buttonOvalBorderRect' buttonOvalPath.Bounds);  				buttonOvalBorderRect.Inflate (1' 1);    				var buttonOvalNegativePath = UIBezierPath.FromRect (buttonOvalBorderRect);  				buttonOvalNegativePath.AppendPath (buttonOvalPath);  				buttonOvalNegativePath.UsesEvenOddFillRule = true;    				context.SaveState ();  				{  					var xOffset = buttonInnerShadowOffset.Width + (float)Math.Round (buttonOvalBorderRect.Width);  					var yOffset = buttonInnerShadowOffset.Height;  					context.SetShadowWithColor (          new SizeF (xOffset + (xOffset >= 0 ? 0.1f : -0.1f)' yOffset + (yOffset >= 0 ? 0.1f : -0.1f))'          buttonInnerShadowBlurRadius'          buttonInnerShadow);    					buttonOvalPath.AddClip ();  					var transform = CGAffineTransform.MakeTranslation (-(float)Math.Round (buttonOvalBorderRect.Width)' 0);  					buttonOvalNegativePath.ApplyTransform (transform);  					UIColor.Gray.SetFill ();  					buttonOvalNegativePath.Fill ();  				}  				context.RestoreState ();          //// flareOval Drawing  				var flareOvalPath = UIBezierPath.FromOval (new RectangleF (22' 14' 29' 15));  				context.SaveState ();  				flareOvalPath.AddClip ();  				context.DrawLinearGradient (buttonFlareGradient' new PointF (36.5f' 14)' new PointF (36.5f' 29)' 0);  				context.RestoreState ();      				// ------------- END PAINTCODE -------------  				  				  				  			}
Magic Number,PaintCode,BlueButton,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\BlueButton\BlueButton.cs,Draw,The following statement contains a magic number: using (var colorSpace = CGColorSpace.CreateDeviceRGB ()) {  				  				  				  				// ------------- START PAINTCODE -------------    //// Color Declarations  				UIColor upColorOut = UIColor.FromRGBA (0.79f' 0.79f' 0.79f' 1.00f);  				UIColor bottomColorDown = UIColor.FromRGBA (0.21f' 0.21f' 0.21f' 1.00f);  				UIColor upColorInner = UIColor.FromRGBA (0.17f' 0.18f' 0.20f' 1.00f);  				UIColor bottomColorInner = UIColor.FromRGBA (0.98f' 0.98f' 0.99f' 1.00f);      				UIColor buttonFlareUpColor = UIColor.FromRGBA (  					(buttonColorRGBA[0] * 0.3f + 0.7f)'  					(buttonColorRGBA[1] * 0.3f + 0.7f)'  					(buttonColorRGBA[2] * 0.3f + 0.7f)'  					(buttonColorRGBA[3] * 0.3f + 0.7f)  				);  				UIColor buttonTopColor = UIColor.FromRGBA (  					(buttonColorRGBA[0] * 0.8f)'  					(buttonColorRGBA[1] * 0.8f)'  					(buttonColorRGBA[2] * 0.8f)'  					(buttonColorRGBA[3] * 0.8f + 0.2f)  				);  				UIColor buttonBottomColor = UIColor.FromRGBA (  					(buttonColorRGBA[0] * 0 + 1)'  					(buttonColorRGBA[1] * 0 + 1)'  					(buttonColorRGBA[2] * 0 + 1)'  					(buttonColorRGBA[3] * 0 + 1)  				);  				UIColor buttonFlareBottomColor = UIColor.FromRGBA (  					(buttonColorRGBA[0] * 0.8f + 0.2f)'  					(buttonColorRGBA[1] * 0.8f + 0.2f)'  					(buttonColorRGBA[2] * 0.8f + 0.2f)'  					(buttonColorRGBA[3] * 0.8f + 0.2f)  				);  				UIColor flareWhite = UIColor.FromRGBA (1.00f' 1.00f' 1.00f' 0.83f);    //// Gradient Declarations  				var ringGradientColors = new CGColor [] {upColorOut.CGColor' bottomColorDown.CGColor};  				var ringGradientLocations = new float [] {0' 1};  				var ringGradient = new CGGradient (colorSpace' ringGradientColors' ringGradientLocations);  				var ringInnerGradientColors = new CGColor [] {upColorInner.CGColor' bottomColorInner.CGColor};  				var ringInnerGradientLocations = new float [] {0' 1};  				var ringInnerGradient = new CGGradient (colorSpace' ringInnerGradientColors' ringInnerGradientLocations);  				var buttonGradientColors = new CGColor [] {buttonBottomColor.CGColor' buttonTopColor.CGColor};  				var buttonGradientLocations = new float [] {0' 1};  				var buttonGradient = new CGGradient (colorSpace' buttonGradientColors' buttonGradientLocations);  				var overlayGradientColors = new CGColor [] {flareWhite.CGColor' UIColor.Clear.CGColor};  				var overlayGradientLocations = new float [] {0' 1};  				var overlayGradient = new CGGradient (colorSpace' overlayGradientColors' overlayGradientLocations);  				var buttonFlareGradientColors = new CGColor [] {buttonFlareUpColor.CGColor' buttonFlareBottomColor.CGColor};  				var buttonFlareGradientLocations = new float [] {0' 1};  				var buttonFlareGradient = new CGGradient (colorSpace' buttonFlareGradientColors' buttonFlareGradientLocations);    //// Shadow Declarations  				var buttonInnerShadow = UIColor.Black.CGColor;  				var buttonInnerShadowOffset = new SizeF (0' -0);  				var buttonInnerShadowBlurRadius = 5;  				var buttonOuterShadow = UIColor.Black.CGColor;  				var buttonOuterShadowOffset = new SizeF (0' 2);  				  				  				var buttonOuterShadowBlurRadius = isPressed ? 2 : 5;	// ADDED this code after PaintCode      //// outerOval Drawing  				var outerOvalPath = UIBezierPath.FromOval (new RectangleF (5' 5' 63' 63));  				context.SaveState ();  				context.SetShadowWithColor (buttonOuterShadowOffset' buttonOuterShadowBlurRadius' buttonOuterShadow);  				context.BeginTransparencyLayer (null);  				outerOvalPath.AddClip ();  				context.DrawLinearGradient (ringGradient' new PointF (36.5f' 5)' new PointF (36.5f' 68)' 0);  				context.EndTransparencyLayer ();  				context.RestoreState ();        //// overlayOval Drawing  				var overlayOvalPath = UIBezierPath.FromOval (new RectangleF (5' 5' 63' 63));  				context.SaveState ();  				overlayOvalPath.AddClip ();  				context.DrawRadialGradient (overlayGradient'      new PointF (36.5f' 12.23f)' 17.75f'      new PointF (36.5f' 36.5f)' 44.61f'      CGGradientDrawingOptions.DrawsBeforeStartLocation | CGGradientDrawingOptions.DrawsAfterEndLocation);  				context.RestoreState ();        //// innerOval Drawing  				var innerOvalPath = UIBezierPath.FromOval (new RectangleF (12' 12' 49' 49));  				context.SaveState ();  				innerOvalPath.AddClip ();  				context.DrawLinearGradient (ringInnerGradient' new PointF (36.5f' 12)' new PointF (36.5f' 61)' 0);  				context.RestoreState ();        //// buttonOval Drawing  				var buttonOvalPath = UIBezierPath.FromOval (new RectangleF (14' 13' 46' 46));  				context.SaveState ();  				buttonOvalPath.AddClip ();  				context.DrawRadialGradient (buttonGradient'      new PointF (37' 63.23f)' 2.44f'      new PointF (37' 44.48f)' 23.14f'      CGGradientDrawingOptions.DrawsBeforeStartLocation | CGGradientDrawingOptions.DrawsAfterEndLocation);  				context.RestoreState ();    ////// buttonOval Inner Shadow  				var buttonOvalBorderRect = buttonOvalPath.Bounds;  				buttonOvalBorderRect.Inflate (buttonInnerShadowBlurRadius' buttonInnerShadowBlurRadius);  				buttonOvalBorderRect.Offset (-buttonInnerShadowOffset.Width' -buttonInnerShadowOffset.Height);  				buttonOvalBorderRect = RectangleF.Union (buttonOvalBorderRect' buttonOvalPath.Bounds);  				buttonOvalBorderRect.Inflate (1' 1);    				var buttonOvalNegativePath = UIBezierPath.FromRect (buttonOvalBorderRect);  				buttonOvalNegativePath.AppendPath (buttonOvalPath);  				buttonOvalNegativePath.UsesEvenOddFillRule = true;    				context.SaveState ();  				{  					var xOffset = buttonInnerShadowOffset.Width + (float)Math.Round (buttonOvalBorderRect.Width);  					var yOffset = buttonInnerShadowOffset.Height;  					context.SetShadowWithColor (          new SizeF (xOffset + (xOffset >= 0 ? 0.1f : -0.1f)' yOffset + (yOffset >= 0 ? 0.1f : -0.1f))'          buttonInnerShadowBlurRadius'          buttonInnerShadow);    					buttonOvalPath.AddClip ();  					var transform = CGAffineTransform.MakeTranslation (-(float)Math.Round (buttonOvalBorderRect.Width)' 0);  					buttonOvalNegativePath.ApplyTransform (transform);  					UIColor.Gray.SetFill ();  					buttonOvalNegativePath.Fill ();  				}  				context.RestoreState ();          //// flareOval Drawing  				var flareOvalPath = UIBezierPath.FromOval (new RectangleF (22' 14' 29' 15));  				context.SaveState ();  				flareOvalPath.AddClip ();  				context.DrawLinearGradient (buttonFlareGradient' new PointF (36.5f' 14)' new PointF (36.5f' 29)' 0);  				context.RestoreState ();      				// ------------- END PAINTCODE -------------  				  				  				  			}
Magic Number,PaintCode,BlueButton,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\BlueButton\BlueButton.cs,Draw,The following statement contains a magic number: using (var colorSpace = CGColorSpace.CreateDeviceRGB ()) {  				  				  				  				// ------------- START PAINTCODE -------------    //// Color Declarations  				UIColor upColorOut = UIColor.FromRGBA (0.79f' 0.79f' 0.79f' 1.00f);  				UIColor bottomColorDown = UIColor.FromRGBA (0.21f' 0.21f' 0.21f' 1.00f);  				UIColor upColorInner = UIColor.FromRGBA (0.17f' 0.18f' 0.20f' 1.00f);  				UIColor bottomColorInner = UIColor.FromRGBA (0.98f' 0.98f' 0.99f' 1.00f);      				UIColor buttonFlareUpColor = UIColor.FromRGBA (  					(buttonColorRGBA[0] * 0.3f + 0.7f)'  					(buttonColorRGBA[1] * 0.3f + 0.7f)'  					(buttonColorRGBA[2] * 0.3f + 0.7f)'  					(buttonColorRGBA[3] * 0.3f + 0.7f)  				);  				UIColor buttonTopColor = UIColor.FromRGBA (  					(buttonColorRGBA[0] * 0.8f)'  					(buttonColorRGBA[1] * 0.8f)'  					(buttonColorRGBA[2] * 0.8f)'  					(buttonColorRGBA[3] * 0.8f + 0.2f)  				);  				UIColor buttonBottomColor = UIColor.FromRGBA (  					(buttonColorRGBA[0] * 0 + 1)'  					(buttonColorRGBA[1] * 0 + 1)'  					(buttonColorRGBA[2] * 0 + 1)'  					(buttonColorRGBA[3] * 0 + 1)  				);  				UIColor buttonFlareBottomColor = UIColor.FromRGBA (  					(buttonColorRGBA[0] * 0.8f + 0.2f)'  					(buttonColorRGBA[1] * 0.8f + 0.2f)'  					(buttonColorRGBA[2] * 0.8f + 0.2f)'  					(buttonColorRGBA[3] * 0.8f + 0.2f)  				);  				UIColor flareWhite = UIColor.FromRGBA (1.00f' 1.00f' 1.00f' 0.83f);    //// Gradient Declarations  				var ringGradientColors = new CGColor [] {upColorOut.CGColor' bottomColorDown.CGColor};  				var ringGradientLocations = new float [] {0' 1};  				var ringGradient = new CGGradient (colorSpace' ringGradientColors' ringGradientLocations);  				var ringInnerGradientColors = new CGColor [] {upColorInner.CGColor' bottomColorInner.CGColor};  				var ringInnerGradientLocations = new float [] {0' 1};  				var ringInnerGradient = new CGGradient (colorSpace' ringInnerGradientColors' ringInnerGradientLocations);  				var buttonGradientColors = new CGColor [] {buttonBottomColor.CGColor' buttonTopColor.CGColor};  				var buttonGradientLocations = new float [] {0' 1};  				var buttonGradient = new CGGradient (colorSpace' buttonGradientColors' buttonGradientLocations);  				var overlayGradientColors = new CGColor [] {flareWhite.CGColor' UIColor.Clear.CGColor};  				var overlayGradientLocations = new float [] {0' 1};  				var overlayGradient = new CGGradient (colorSpace' overlayGradientColors' overlayGradientLocations);  				var buttonFlareGradientColors = new CGColor [] {buttonFlareUpColor.CGColor' buttonFlareBottomColor.CGColor};  				var buttonFlareGradientLocations = new float [] {0' 1};  				var buttonFlareGradient = new CGGradient (colorSpace' buttonFlareGradientColors' buttonFlareGradientLocations);    //// Shadow Declarations  				var buttonInnerShadow = UIColor.Black.CGColor;  				var buttonInnerShadowOffset = new SizeF (0' -0);  				var buttonInnerShadowBlurRadius = 5;  				var buttonOuterShadow = UIColor.Black.CGColor;  				var buttonOuterShadowOffset = new SizeF (0' 2);  				  				  				var buttonOuterShadowBlurRadius = isPressed ? 2 : 5;	// ADDED this code after PaintCode      //// outerOval Drawing  				var outerOvalPath = UIBezierPath.FromOval (new RectangleF (5' 5' 63' 63));  				context.SaveState ();  				context.SetShadowWithColor (buttonOuterShadowOffset' buttonOuterShadowBlurRadius' buttonOuterShadow);  				context.BeginTransparencyLayer (null);  				outerOvalPath.AddClip ();  				context.DrawLinearGradient (ringGradient' new PointF (36.5f' 5)' new PointF (36.5f' 68)' 0);  				context.EndTransparencyLayer ();  				context.RestoreState ();        //// overlayOval Drawing  				var overlayOvalPath = UIBezierPath.FromOval (new RectangleF (5' 5' 63' 63));  				context.SaveState ();  				overlayOvalPath.AddClip ();  				context.DrawRadialGradient (overlayGradient'      new PointF (36.5f' 12.23f)' 17.75f'      new PointF (36.5f' 36.5f)' 44.61f'      CGGradientDrawingOptions.DrawsBeforeStartLocation | CGGradientDrawingOptions.DrawsAfterEndLocation);  				context.RestoreState ();        //// innerOval Drawing  				var innerOvalPath = UIBezierPath.FromOval (new RectangleF (12' 12' 49' 49));  				context.SaveState ();  				innerOvalPath.AddClip ();  				context.DrawLinearGradient (ringInnerGradient' new PointF (36.5f' 12)' new PointF (36.5f' 61)' 0);  				context.RestoreState ();        //// buttonOval Drawing  				var buttonOvalPath = UIBezierPath.FromOval (new RectangleF (14' 13' 46' 46));  				context.SaveState ();  				buttonOvalPath.AddClip ();  				context.DrawRadialGradient (buttonGradient'      new PointF (37' 63.23f)' 2.44f'      new PointF (37' 44.48f)' 23.14f'      CGGradientDrawingOptions.DrawsBeforeStartLocation | CGGradientDrawingOptions.DrawsAfterEndLocation);  				context.RestoreState ();    ////// buttonOval Inner Shadow  				var buttonOvalBorderRect = buttonOvalPath.Bounds;  				buttonOvalBorderRect.Inflate (buttonInnerShadowBlurRadius' buttonInnerShadowBlurRadius);  				buttonOvalBorderRect.Offset (-buttonInnerShadowOffset.Width' -buttonInnerShadowOffset.Height);  				buttonOvalBorderRect = RectangleF.Union (buttonOvalBorderRect' buttonOvalPath.Bounds);  				buttonOvalBorderRect.Inflate (1' 1);    				var buttonOvalNegativePath = UIBezierPath.FromRect (buttonOvalBorderRect);  				buttonOvalNegativePath.AppendPath (buttonOvalPath);  				buttonOvalNegativePath.UsesEvenOddFillRule = true;    				context.SaveState ();  				{  					var xOffset = buttonInnerShadowOffset.Width + (float)Math.Round (buttonOvalBorderRect.Width);  					var yOffset = buttonInnerShadowOffset.Height;  					context.SetShadowWithColor (          new SizeF (xOffset + (xOffset >= 0 ? 0.1f : -0.1f)' yOffset + (yOffset >= 0 ? 0.1f : -0.1f))'          buttonInnerShadowBlurRadius'          buttonInnerShadow);    					buttonOvalPath.AddClip ();  					var transform = CGAffineTransform.MakeTranslation (-(float)Math.Round (buttonOvalBorderRect.Width)' 0);  					buttonOvalNegativePath.ApplyTransform (transform);  					UIColor.Gray.SetFill ();  					buttonOvalNegativePath.Fill ();  				}  				context.RestoreState ();          //// flareOval Drawing  				var flareOvalPath = UIBezierPath.FromOval (new RectangleF (22' 14' 29' 15));  				context.SaveState ();  				flareOvalPath.AddClip ();  				context.DrawLinearGradient (buttonFlareGradient' new PointF (36.5f' 14)' new PointF (36.5f' 29)' 0);  				context.RestoreState ();      				// ------------- END PAINTCODE -------------  				  				  				  			}
Magic Number,PaintCode,BlueButton,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\BlueButton\BlueButton.cs,Draw,The following statement contains a magic number: using (var colorSpace = CGColorSpace.CreateDeviceRGB ()) {  				  				  				  				// ------------- START PAINTCODE -------------    //// Color Declarations  				UIColor upColorOut = UIColor.FromRGBA (0.79f' 0.79f' 0.79f' 1.00f);  				UIColor bottomColorDown = UIColor.FromRGBA (0.21f' 0.21f' 0.21f' 1.00f);  				UIColor upColorInner = UIColor.FromRGBA (0.17f' 0.18f' 0.20f' 1.00f);  				UIColor bottomColorInner = UIColor.FromRGBA (0.98f' 0.98f' 0.99f' 1.00f);      				UIColor buttonFlareUpColor = UIColor.FromRGBA (  					(buttonColorRGBA[0] * 0.3f + 0.7f)'  					(buttonColorRGBA[1] * 0.3f + 0.7f)'  					(buttonColorRGBA[2] * 0.3f + 0.7f)'  					(buttonColorRGBA[3] * 0.3f + 0.7f)  				);  				UIColor buttonTopColor = UIColor.FromRGBA (  					(buttonColorRGBA[0] * 0.8f)'  					(buttonColorRGBA[1] * 0.8f)'  					(buttonColorRGBA[2] * 0.8f)'  					(buttonColorRGBA[3] * 0.8f + 0.2f)  				);  				UIColor buttonBottomColor = UIColor.FromRGBA (  					(buttonColorRGBA[0] * 0 + 1)'  					(buttonColorRGBA[1] * 0 + 1)'  					(buttonColorRGBA[2] * 0 + 1)'  					(buttonColorRGBA[3] * 0 + 1)  				);  				UIColor buttonFlareBottomColor = UIColor.FromRGBA (  					(buttonColorRGBA[0] * 0.8f + 0.2f)'  					(buttonColorRGBA[1] * 0.8f + 0.2f)'  					(buttonColorRGBA[2] * 0.8f + 0.2f)'  					(buttonColorRGBA[3] * 0.8f + 0.2f)  				);  				UIColor flareWhite = UIColor.FromRGBA (1.00f' 1.00f' 1.00f' 0.83f);    //// Gradient Declarations  				var ringGradientColors = new CGColor [] {upColorOut.CGColor' bottomColorDown.CGColor};  				var ringGradientLocations = new float [] {0' 1};  				var ringGradient = new CGGradient (colorSpace' ringGradientColors' ringGradientLocations);  				var ringInnerGradientColors = new CGColor [] {upColorInner.CGColor' bottomColorInner.CGColor};  				var ringInnerGradientLocations = new float [] {0' 1};  				var ringInnerGradient = new CGGradient (colorSpace' ringInnerGradientColors' ringInnerGradientLocations);  				var buttonGradientColors = new CGColor [] {buttonBottomColor.CGColor' buttonTopColor.CGColor};  				var buttonGradientLocations = new float [] {0' 1};  				var buttonGradient = new CGGradient (colorSpace' buttonGradientColors' buttonGradientLocations);  				var overlayGradientColors = new CGColor [] {flareWhite.CGColor' UIColor.Clear.CGColor};  				var overlayGradientLocations = new float [] {0' 1};  				var overlayGradient = new CGGradient (colorSpace' overlayGradientColors' overlayGradientLocations);  				var buttonFlareGradientColors = new CGColor [] {buttonFlareUpColor.CGColor' buttonFlareBottomColor.CGColor};  				var buttonFlareGradientLocations = new float [] {0' 1};  				var buttonFlareGradient = new CGGradient (colorSpace' buttonFlareGradientColors' buttonFlareGradientLocations);    //// Shadow Declarations  				var buttonInnerShadow = UIColor.Black.CGColor;  				var buttonInnerShadowOffset = new SizeF (0' -0);  				var buttonInnerShadowBlurRadius = 5;  				var buttonOuterShadow = UIColor.Black.CGColor;  				var buttonOuterShadowOffset = new SizeF (0' 2);  				  				  				var buttonOuterShadowBlurRadius = isPressed ? 2 : 5;	// ADDED this code after PaintCode      //// outerOval Drawing  				var outerOvalPath = UIBezierPath.FromOval (new RectangleF (5' 5' 63' 63));  				context.SaveState ();  				context.SetShadowWithColor (buttonOuterShadowOffset' buttonOuterShadowBlurRadius' buttonOuterShadow);  				context.BeginTransparencyLayer (null);  				outerOvalPath.AddClip ();  				context.DrawLinearGradient (ringGradient' new PointF (36.5f' 5)' new PointF (36.5f' 68)' 0);  				context.EndTransparencyLayer ();  				context.RestoreState ();        //// overlayOval Drawing  				var overlayOvalPath = UIBezierPath.FromOval (new RectangleF (5' 5' 63' 63));  				context.SaveState ();  				overlayOvalPath.AddClip ();  				context.DrawRadialGradient (overlayGradient'      new PointF (36.5f' 12.23f)' 17.75f'      new PointF (36.5f' 36.5f)' 44.61f'      CGGradientDrawingOptions.DrawsBeforeStartLocation | CGGradientDrawingOptions.DrawsAfterEndLocation);  				context.RestoreState ();        //// innerOval Drawing  				var innerOvalPath = UIBezierPath.FromOval (new RectangleF (12' 12' 49' 49));  				context.SaveState ();  				innerOvalPath.AddClip ();  				context.DrawLinearGradient (ringInnerGradient' new PointF (36.5f' 12)' new PointF (36.5f' 61)' 0);  				context.RestoreState ();        //// buttonOval Drawing  				var buttonOvalPath = UIBezierPath.FromOval (new RectangleF (14' 13' 46' 46));  				context.SaveState ();  				buttonOvalPath.AddClip ();  				context.DrawRadialGradient (buttonGradient'      new PointF (37' 63.23f)' 2.44f'      new PointF (37' 44.48f)' 23.14f'      CGGradientDrawingOptions.DrawsBeforeStartLocation | CGGradientDrawingOptions.DrawsAfterEndLocation);  				context.RestoreState ();    ////// buttonOval Inner Shadow  				var buttonOvalBorderRect = buttonOvalPath.Bounds;  				buttonOvalBorderRect.Inflate (buttonInnerShadowBlurRadius' buttonInnerShadowBlurRadius);  				buttonOvalBorderRect.Offset (-buttonInnerShadowOffset.Width' -buttonInnerShadowOffset.Height);  				buttonOvalBorderRect = RectangleF.Union (buttonOvalBorderRect' buttonOvalPath.Bounds);  				buttonOvalBorderRect.Inflate (1' 1);    				var buttonOvalNegativePath = UIBezierPath.FromRect (buttonOvalBorderRect);  				buttonOvalNegativePath.AppendPath (buttonOvalPath);  				buttonOvalNegativePath.UsesEvenOddFillRule = true;    				context.SaveState ();  				{  					var xOffset = buttonInnerShadowOffset.Width + (float)Math.Round (buttonOvalBorderRect.Width);  					var yOffset = buttonInnerShadowOffset.Height;  					context.SetShadowWithColor (          new SizeF (xOffset + (xOffset >= 0 ? 0.1f : -0.1f)' yOffset + (yOffset >= 0 ? 0.1f : -0.1f))'          buttonInnerShadowBlurRadius'          buttonInnerShadow);    					buttonOvalPath.AddClip ();  					var transform = CGAffineTransform.MakeTranslation (-(float)Math.Round (buttonOvalBorderRect.Width)' 0);  					buttonOvalNegativePath.ApplyTransform (transform);  					UIColor.Gray.SetFill ();  					buttonOvalNegativePath.Fill ();  				}  				context.RestoreState ();          //// flareOval Drawing  				var flareOvalPath = UIBezierPath.FromOval (new RectangleF (22' 14' 29' 15));  				context.SaveState ();  				flareOvalPath.AddClip ();  				context.DrawLinearGradient (buttonFlareGradient' new PointF (36.5f' 14)' new PointF (36.5f' 29)' 0);  				context.RestoreState ();      				// ------------- END PAINTCODE -------------  				  				  				  			}
Magic Number,PaintCode,BlueButton,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\BlueButton\BlueButton.cs,Draw,The following statement contains a magic number: using (var colorSpace = CGColorSpace.CreateDeviceRGB ()) {  				  				  				  				// ------------- START PAINTCODE -------------    //// Color Declarations  				UIColor upColorOut = UIColor.FromRGBA (0.79f' 0.79f' 0.79f' 1.00f);  				UIColor bottomColorDown = UIColor.FromRGBA (0.21f' 0.21f' 0.21f' 1.00f);  				UIColor upColorInner = UIColor.FromRGBA (0.17f' 0.18f' 0.20f' 1.00f);  				UIColor bottomColorInner = UIColor.FromRGBA (0.98f' 0.98f' 0.99f' 1.00f);      				UIColor buttonFlareUpColor = UIColor.FromRGBA (  					(buttonColorRGBA[0] * 0.3f + 0.7f)'  					(buttonColorRGBA[1] * 0.3f + 0.7f)'  					(buttonColorRGBA[2] * 0.3f + 0.7f)'  					(buttonColorRGBA[3] * 0.3f + 0.7f)  				);  				UIColor buttonTopColor = UIColor.FromRGBA (  					(buttonColorRGBA[0] * 0.8f)'  					(buttonColorRGBA[1] * 0.8f)'  					(buttonColorRGBA[2] * 0.8f)'  					(buttonColorRGBA[3] * 0.8f + 0.2f)  				);  				UIColor buttonBottomColor = UIColor.FromRGBA (  					(buttonColorRGBA[0] * 0 + 1)'  					(buttonColorRGBA[1] * 0 + 1)'  					(buttonColorRGBA[2] * 0 + 1)'  					(buttonColorRGBA[3] * 0 + 1)  				);  				UIColor buttonFlareBottomColor = UIColor.FromRGBA (  					(buttonColorRGBA[0] * 0.8f + 0.2f)'  					(buttonColorRGBA[1] * 0.8f + 0.2f)'  					(buttonColorRGBA[2] * 0.8f + 0.2f)'  					(buttonColorRGBA[3] * 0.8f + 0.2f)  				);  				UIColor flareWhite = UIColor.FromRGBA (1.00f' 1.00f' 1.00f' 0.83f);    //// Gradient Declarations  				var ringGradientColors = new CGColor [] {upColorOut.CGColor' bottomColorDown.CGColor};  				var ringGradientLocations = new float [] {0' 1};  				var ringGradient = new CGGradient (colorSpace' ringGradientColors' ringGradientLocations);  				var ringInnerGradientColors = new CGColor [] {upColorInner.CGColor' bottomColorInner.CGColor};  				var ringInnerGradientLocations = new float [] {0' 1};  				var ringInnerGradient = new CGGradient (colorSpace' ringInnerGradientColors' ringInnerGradientLocations);  				var buttonGradientColors = new CGColor [] {buttonBottomColor.CGColor' buttonTopColor.CGColor};  				var buttonGradientLocations = new float [] {0' 1};  				var buttonGradient = new CGGradient (colorSpace' buttonGradientColors' buttonGradientLocations);  				var overlayGradientColors = new CGColor [] {flareWhite.CGColor' UIColor.Clear.CGColor};  				var overlayGradientLocations = new float [] {0' 1};  				var overlayGradient = new CGGradient (colorSpace' overlayGradientColors' overlayGradientLocations);  				var buttonFlareGradientColors = new CGColor [] {buttonFlareUpColor.CGColor' buttonFlareBottomColor.CGColor};  				var buttonFlareGradientLocations = new float [] {0' 1};  				var buttonFlareGradient = new CGGradient (colorSpace' buttonFlareGradientColors' buttonFlareGradientLocations);    //// Shadow Declarations  				var buttonInnerShadow = UIColor.Black.CGColor;  				var buttonInnerShadowOffset = new SizeF (0' -0);  				var buttonInnerShadowBlurRadius = 5;  				var buttonOuterShadow = UIColor.Black.CGColor;  				var buttonOuterShadowOffset = new SizeF (0' 2);  				  				  				var buttonOuterShadowBlurRadius = isPressed ? 2 : 5;	// ADDED this code after PaintCode      //// outerOval Drawing  				var outerOvalPath = UIBezierPath.FromOval (new RectangleF (5' 5' 63' 63));  				context.SaveState ();  				context.SetShadowWithColor (buttonOuterShadowOffset' buttonOuterShadowBlurRadius' buttonOuterShadow);  				context.BeginTransparencyLayer (null);  				outerOvalPath.AddClip ();  				context.DrawLinearGradient (ringGradient' new PointF (36.5f' 5)' new PointF (36.5f' 68)' 0);  				context.EndTransparencyLayer ();  				context.RestoreState ();        //// overlayOval Drawing  				var overlayOvalPath = UIBezierPath.FromOval (new RectangleF (5' 5' 63' 63));  				context.SaveState ();  				overlayOvalPath.AddClip ();  				context.DrawRadialGradient (overlayGradient'      new PointF (36.5f' 12.23f)' 17.75f'      new PointF (36.5f' 36.5f)' 44.61f'      CGGradientDrawingOptions.DrawsBeforeStartLocation | CGGradientDrawingOptions.DrawsAfterEndLocation);  				context.RestoreState ();        //// innerOval Drawing  				var innerOvalPath = UIBezierPath.FromOval (new RectangleF (12' 12' 49' 49));  				context.SaveState ();  				innerOvalPath.AddClip ();  				context.DrawLinearGradient (ringInnerGradient' new PointF (36.5f' 12)' new PointF (36.5f' 61)' 0);  				context.RestoreState ();        //// buttonOval Drawing  				var buttonOvalPath = UIBezierPath.FromOval (new RectangleF (14' 13' 46' 46));  				context.SaveState ();  				buttonOvalPath.AddClip ();  				context.DrawRadialGradient (buttonGradient'      new PointF (37' 63.23f)' 2.44f'      new PointF (37' 44.48f)' 23.14f'      CGGradientDrawingOptions.DrawsBeforeStartLocation | CGGradientDrawingOptions.DrawsAfterEndLocation);  				context.RestoreState ();    ////// buttonOval Inner Shadow  				var buttonOvalBorderRect = buttonOvalPath.Bounds;  				buttonOvalBorderRect.Inflate (buttonInnerShadowBlurRadius' buttonInnerShadowBlurRadius);  				buttonOvalBorderRect.Offset (-buttonInnerShadowOffset.Width' -buttonInnerShadowOffset.Height);  				buttonOvalBorderRect = RectangleF.Union (buttonOvalBorderRect' buttonOvalPath.Bounds);  				buttonOvalBorderRect.Inflate (1' 1);    				var buttonOvalNegativePath = UIBezierPath.FromRect (buttonOvalBorderRect);  				buttonOvalNegativePath.AppendPath (buttonOvalPath);  				buttonOvalNegativePath.UsesEvenOddFillRule = true;    				context.SaveState ();  				{  					var xOffset = buttonInnerShadowOffset.Width + (float)Math.Round (buttonOvalBorderRect.Width);  					var yOffset = buttonInnerShadowOffset.Height;  					context.SetShadowWithColor (          new SizeF (xOffset + (xOffset >= 0 ? 0.1f : -0.1f)' yOffset + (yOffset >= 0 ? 0.1f : -0.1f))'          buttonInnerShadowBlurRadius'          buttonInnerShadow);    					buttonOvalPath.AddClip ();  					var transform = CGAffineTransform.MakeTranslation (-(float)Math.Round (buttonOvalBorderRect.Width)' 0);  					buttonOvalNegativePath.ApplyTransform (transform);  					UIColor.Gray.SetFill ();  					buttonOvalNegativePath.Fill ();  				}  				context.RestoreState ();          //// flareOval Drawing  				var flareOvalPath = UIBezierPath.FromOval (new RectangleF (22' 14' 29' 15));  				context.SaveState ();  				flareOvalPath.AddClip ();  				context.DrawLinearGradient (buttonFlareGradient' new PointF (36.5f' 14)' new PointF (36.5f' 29)' 0);  				context.RestoreState ();      				// ------------- END PAINTCODE -------------  				  				  				  			}
Magic Number,PaintCode,BlueButtonViewController,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\BlueButton\BlueButtonViewController.cs,ViewDidLoad,The following statement contains a magic number: button = new BlueButton (new RectangleF (10' 10' 120' 120));
Magic Number,PaintCode,BlueButtonViewController,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\BlueButton\BlueButtonViewController.cs,ViewDidLoad,The following statement contains a magic number: button = new BlueButton (new RectangleF (10' 10' 120' 120));
Magic Number,PaintCode,BlueButtonViewController,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\BlueButton\BlueButtonViewController.cs,ViewDidLoad,The following statement contains a magic number: button = new BlueButton (new RectangleF (10' 10' 120' 120));
Magic Number,PaintCode,BlueButtonViewController,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\BlueButton\BlueButtonViewController.cs,ViewDidLoad,The following statement contains a magic number: button = new BlueButton (new RectangleF (10' 10' 120' 120));
Magic Number,PaintCode,BlueButtonViewController,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\BlueButton\BlueButtonViewController.cs,ViewDidLoad,The following statement contains a magic number: text = new UITextView (new Rectangle (10' 100' 300' 300));
Magic Number,PaintCode,BlueButtonViewController,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\BlueButton\BlueButtonViewController.cs,ViewDidLoad,The following statement contains a magic number: text = new UITextView (new Rectangle (10' 100' 300' 300));
Magic Number,PaintCode,BlueButtonViewController,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\BlueButton\BlueButtonViewController.cs,ViewDidLoad,The following statement contains a magic number: text = new UITextView (new Rectangle (10' 100' 300' 300));
Magic Number,PaintCode,BlueButtonViewController,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\BlueButton\BlueButtonViewController.cs,ViewDidLoad,The following statement contains a magic number: text = new UITextView (new Rectangle (10' 100' 300' 300));
Magic Number,PaintCode,GlossyButton,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\GlossyButton\GlossyButton.cs,Draw,The following statement contains a magic number: var buttonColorRGBA = new float[4];
Magic Number,PaintCode,GlossyButton,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\GlossyButton\GlossyButton.cs,Draw,The following statement contains a magic number: buttonColor.GetRGBA (  				out buttonColorRGBA [0]'  				out buttonColorRGBA [1]'  				out buttonColorRGBA [2]'  				out buttonColorRGBA [3]  			);
Magic Number,PaintCode,GlossyButton,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\GlossyButton\GlossyButton.cs,Draw,The following statement contains a magic number: buttonColor.GetRGBA (  				out buttonColorRGBA [0]'  				out buttonColorRGBA [1]'  				out buttonColorRGBA [2]'  				out buttonColorRGBA [3]  			);
Magic Number,PaintCode,GlossyButton,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\GlossyButton\GlossyButton.cs,Draw,The following statement contains a magic number: if (isPressed) {  				// Get the Hue Saturation Brightness Alpha copy of the color				  				var buttonColorHSBA = new float[4];  				buttonColor.GetHSBA (  					out buttonColorHSBA [0]'  					out buttonColorHSBA [1]'  					out buttonColorHSBA [2]'  					out buttonColorHSBA [3]  				);  				// Change the brightness to a fixed value (0.5f)  				buttonColor = UIColor.FromHSBA (buttonColorHSBA [0]' buttonColorHSBA [1]' 0.5f' buttonColorHSBA [3]);  				// Re-set the base buttonColorRGBA because everything else is relative to it  				buttonColorRGBA = new float[4];  				buttonColor.GetRGBA (  					out buttonColorRGBA [0]'  					out buttonColorRGBA [1]'  					out buttonColorRGBA [2]'  					out buttonColorRGBA [3]  				);  			}
Magic Number,PaintCode,GlossyButton,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\GlossyButton\GlossyButton.cs,Draw,The following statement contains a magic number: if (isPressed) {  				// Get the Hue Saturation Brightness Alpha copy of the color				  				var buttonColorHSBA = new float[4];  				buttonColor.GetHSBA (  					out buttonColorHSBA [0]'  					out buttonColorHSBA [1]'  					out buttonColorHSBA [2]'  					out buttonColorHSBA [3]  				);  				// Change the brightness to a fixed value (0.5f)  				buttonColor = UIColor.FromHSBA (buttonColorHSBA [0]' buttonColorHSBA [1]' 0.5f' buttonColorHSBA [3]);  				// Re-set the base buttonColorRGBA because everything else is relative to it  				buttonColorRGBA = new float[4];  				buttonColor.GetRGBA (  					out buttonColorRGBA [0]'  					out buttonColorRGBA [1]'  					out buttonColorRGBA [2]'  					out buttonColorRGBA [3]  				);  			}
Magic Number,PaintCode,GlossyButton,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\GlossyButton\GlossyButton.cs,Draw,The following statement contains a magic number: if (isPressed) {  				// Get the Hue Saturation Brightness Alpha copy of the color				  				var buttonColorHSBA = new float[4];  				buttonColor.GetHSBA (  					out buttonColorHSBA [0]'  					out buttonColorHSBA [1]'  					out buttonColorHSBA [2]'  					out buttonColorHSBA [3]  				);  				// Change the brightness to a fixed value (0.5f)  				buttonColor = UIColor.FromHSBA (buttonColorHSBA [0]' buttonColorHSBA [1]' 0.5f' buttonColorHSBA [3]);  				// Re-set the base buttonColorRGBA because everything else is relative to it  				buttonColorRGBA = new float[4];  				buttonColor.GetRGBA (  					out buttonColorRGBA [0]'  					out buttonColorRGBA [1]'  					out buttonColorRGBA [2]'  					out buttonColorRGBA [3]  				);  			}
Magic Number,PaintCode,GlossyButton,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\GlossyButton\GlossyButton.cs,Draw,The following statement contains a magic number: if (isPressed) {  				// Get the Hue Saturation Brightness Alpha copy of the color				  				var buttonColorHSBA = new float[4];  				buttonColor.GetHSBA (  					out buttonColorHSBA [0]'  					out buttonColorHSBA [1]'  					out buttonColorHSBA [2]'  					out buttonColorHSBA [3]  				);  				// Change the brightness to a fixed value (0.5f)  				buttonColor = UIColor.FromHSBA (buttonColorHSBA [0]' buttonColorHSBA [1]' 0.5f' buttonColorHSBA [3]);  				// Re-set the base buttonColorRGBA because everything else is relative to it  				buttonColorRGBA = new float[4];  				buttonColor.GetRGBA (  					out buttonColorRGBA [0]'  					out buttonColorRGBA [1]'  					out buttonColorRGBA [2]'  					out buttonColorRGBA [3]  				);  			}
Magic Number,PaintCode,GlossyButton,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\GlossyButton\GlossyButton.cs,Draw,The following statement contains a magic number: if (isPressed) {  				// Get the Hue Saturation Brightness Alpha copy of the color				  				var buttonColorHSBA = new float[4];  				buttonColor.GetHSBA (  					out buttonColorHSBA [0]'  					out buttonColorHSBA [1]'  					out buttonColorHSBA [2]'  					out buttonColorHSBA [3]  				);  				// Change the brightness to a fixed value (0.5f)  				buttonColor = UIColor.FromHSBA (buttonColorHSBA [0]' buttonColorHSBA [1]' 0.5f' buttonColorHSBA [3]);  				// Re-set the base buttonColorRGBA because everything else is relative to it  				buttonColorRGBA = new float[4];  				buttonColor.GetRGBA (  					out buttonColorRGBA [0]'  					out buttonColorRGBA [1]'  					out buttonColorRGBA [2]'  					out buttonColorRGBA [3]  				);  			}
Magic Number,PaintCode,GlossyButton,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\GlossyButton\GlossyButton.cs,Draw,The following statement contains a magic number: if (isPressed) {  				// Get the Hue Saturation Brightness Alpha copy of the color				  				var buttonColorHSBA = new float[4];  				buttonColor.GetHSBA (  					out buttonColorHSBA [0]'  					out buttonColorHSBA [1]'  					out buttonColorHSBA [2]'  					out buttonColorHSBA [3]  				);  				// Change the brightness to a fixed value (0.5f)  				buttonColor = UIColor.FromHSBA (buttonColorHSBA [0]' buttonColorHSBA [1]' 0.5f' buttonColorHSBA [3]);  				// Re-set the base buttonColorRGBA because everything else is relative to it  				buttonColorRGBA = new float[4];  				buttonColor.GetRGBA (  					out buttonColorRGBA [0]'  					out buttonColorRGBA [1]'  					out buttonColorRGBA [2]'  					out buttonColorRGBA [3]  				);  			}
Magic Number,PaintCode,GlossyButton,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\GlossyButton\GlossyButton.cs,Draw,The following statement contains a magic number: if (isPressed) {  				// Get the Hue Saturation Brightness Alpha copy of the color				  				var buttonColorHSBA = new float[4];  				buttonColor.GetHSBA (  					out buttonColorHSBA [0]'  					out buttonColorHSBA [1]'  					out buttonColorHSBA [2]'  					out buttonColorHSBA [3]  				);  				// Change the brightness to a fixed value (0.5f)  				buttonColor = UIColor.FromHSBA (buttonColorHSBA [0]' buttonColorHSBA [1]' 0.5f' buttonColorHSBA [3]);  				// Re-set the base buttonColorRGBA because everything else is relative to it  				buttonColorRGBA = new float[4];  				buttonColor.GetRGBA (  					out buttonColorRGBA [0]'  					out buttonColorRGBA [1]'  					out buttonColorRGBA [2]'  					out buttonColorRGBA [3]  				);  			}
Magic Number,PaintCode,GlossyButton,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\GlossyButton\GlossyButton.cs,Draw,The following statement contains a magic number: using (var colorSpace = CGColorSpace.CreateDeviceRGB ()) {  				  				  				//// Abstracted Graphic Attributes  				var textContent = this.Title (UIControlState.Normal); //"STOP";			  				var font = UIFont.SystemFontOfSize (18);  				// ------------- START PAINTCODE -------------        //// Color Declarations  				UIColor frameColorTop = UIColor.FromRGBA (0.20f' 0.20f' 0.20f' 1.00f);  				UIColor frameShadowColor = UIColor.FromRGBA (1.00f' 1.00f' 1.00f' 0.40f);    				UIColor glossyColorBottom = UIColor.FromRGBA (  					(buttonColorRGBA [0] * 0.6f + 0.4f)'  					(buttonColorRGBA [1] * 0.6f + 0.4f)'  					(buttonColorRGBA [2] * 0.6f + 0.4f)'  					(buttonColorRGBA [3] * 0.6f + 0.4f)  				);  				UIColor glossyColorUp = UIColor.FromRGBA (  					(buttonColorRGBA [0] * 0.2f + 0.8f)'  					(buttonColorRGBA [1] * 0.2f + 0.8f)'  					(buttonColorRGBA [2] * 0.2f + 0.8f)'  					(buttonColorRGBA [3] * 0.2f + 0.8f)  				);    //// Gradient Declarations  				var glossyGradientColors = new CGColor [] {glossyColorUp.CGColor' glossyColorBottom.CGColor};  				var glossyGradientLocations = new float [] {0' 1};  				var glossyGradient = new CGGradient (colorSpace' glossyGradientColors' glossyGradientLocations);    //// Shadow Declarations  				var frameInnerShadow = frameShadowColor.CGColor;  				var frameInnerShadowOffset = new SizeF (0' -0);  				var frameInnerShadowBlurRadius = 3;  				var buttonInnerShadow = UIColor.Black.CGColor;  				var buttonInnerShadowOffset = new SizeF (0' -0);  				var buttonInnerShadowBlurRadius = 12;  				var textShadow = UIColor.Black.CGColor;  				var textShadowOffset = new SizeF (0' -0);  				var textShadowBlurRadius = 1;  				var buttonShadow = UIColor.Black.CGColor;    				var buttonShadowOffset = new SizeF (0' isPressed ? 0 : 2);		// ADDED this code after PaintCode  				var buttonShadowBlurRadius = isPressed ? 2 : 3;					// ADDED this code after PaintCode          //// outerFrame Drawing  var outerFramePath = UIBezierPath.FromRoundedRect(new RectangleF(2.5f' 1.5f' 120' 32)' 8);  context.SaveState();  context.SetShadowWithColor(buttonShadowOffset' buttonShadowBlurRadius' buttonShadow);  frameColorTop.SetFill();  outerFramePath.Fill();  context.RestoreState();    UIColor.Black.SetStroke();  outerFramePath.LineWidth = 1;  outerFramePath.Stroke();      //// innerFrame Drawing  var innerFramePath = UIBezierPath.FromRoundedRect(new RectangleF(5.5f' 4.5f' 114' 26)' 5);  context.SaveState();  context.SetShadowWithColor(frameInnerShadowOffset' frameInnerShadowBlurRadius' frameInnerShadow);  buttonColor.SetFill();  innerFramePath.Fill();    ////// innerFrame Inner Shadow  var innerFrameBorderRect = innerFramePath.Bounds;  innerFrameBorderRect.Inflate(buttonInnerShadowBlurRadius' buttonInnerShadowBlurRadius);  innerFrameBorderRect.Offset(-buttonInnerShadowOffset.Width' -buttonInnerShadowOffset.Height);  innerFrameBorderRect = RectangleF.Union(innerFrameBorderRect' innerFramePath.Bounds);  innerFrameBorderRect.Inflate(1' 1);    var innerFrameNegativePath = UIBezierPath.FromRect(innerFrameBorderRect);  innerFrameNegativePath.AppendPath(innerFramePath);  innerFrameNegativePath.UsesEvenOddFillRule = true;    context.SaveState();  {      var xOffset = buttonInnerShadowOffset.Width + (float)Math.Round(innerFrameBorderRect.Width);      var yOffset = buttonInnerShadowOffset.Height;      context.SetShadowWithColor(          new SizeF(xOffset + (xOffset >= 0 ? 0.1f : -0.1f)' yOffset + (yOffset >= 0 ? 0.1f : -0.1f))'          buttonInnerShadowBlurRadius'          buttonInnerShadow);        innerFramePath.AddClip();      var transform = CGAffineTransform.MakeTranslation(-(float)Math.Round(innerFrameBorderRect.Width)' 0);      innerFrameNegativePath.ApplyTransform(transform);      UIColor.Gray.SetFill();      innerFrameNegativePath.Fill();  }  context.RestoreState();    context.RestoreState();    UIColor.Black.SetStroke();  innerFramePath.LineWidth = 1;  innerFramePath.Stroke();      //// Rounded Rectangle Drawing  var roundedRectanglePath = UIBezierPath.FromRoundedRect(new RectangleF(8' 6' 109' 9)' 4);  context.SaveState();  roundedRectanglePath.AddClip();  context.DrawLinearGradient(glossyGradient' new PointF(62.5f' 6)' new PointF(62.5f' 15)' 0);  context.RestoreState();        //// Text Drawing  var textRect = new RectangleF(18' 6' 90' 28);  context.SaveState();  context.SetShadowWithColor(textShadowOffset' textShadowBlurRadius' textShadow);  glossyColorUp.SetFill();    				// Use default button-drawn text  				//new NSString(textContent).DrawString(textRect' font' UILineBreakMode.WordWrap' UITextAlignment.Center);  context.RestoreState();      		    			// ------------- END PAINTCODE -------------    				  				  				  			}
Magic Number,PaintCode,GlossyButton,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\GlossyButton\GlossyButton.cs,Draw,The following statement contains a magic number: using (var colorSpace = CGColorSpace.CreateDeviceRGB ()) {  				  				  				//// Abstracted Graphic Attributes  				var textContent = this.Title (UIControlState.Normal); //"STOP";			  				var font = UIFont.SystemFontOfSize (18);  				// ------------- START PAINTCODE -------------        //// Color Declarations  				UIColor frameColorTop = UIColor.FromRGBA (0.20f' 0.20f' 0.20f' 1.00f);  				UIColor frameShadowColor = UIColor.FromRGBA (1.00f' 1.00f' 1.00f' 0.40f);    				UIColor glossyColorBottom = UIColor.FromRGBA (  					(buttonColorRGBA [0] * 0.6f + 0.4f)'  					(buttonColorRGBA [1] * 0.6f + 0.4f)'  					(buttonColorRGBA [2] * 0.6f + 0.4f)'  					(buttonColorRGBA [3] * 0.6f + 0.4f)  				);  				UIColor glossyColorUp = UIColor.FromRGBA (  					(buttonColorRGBA [0] * 0.2f + 0.8f)'  					(buttonColorRGBA [1] * 0.2f + 0.8f)'  					(buttonColorRGBA [2] * 0.2f + 0.8f)'  					(buttonColorRGBA [3] * 0.2f + 0.8f)  				);    //// Gradient Declarations  				var glossyGradientColors = new CGColor [] {glossyColorUp.CGColor' glossyColorBottom.CGColor};  				var glossyGradientLocations = new float [] {0' 1};  				var glossyGradient = new CGGradient (colorSpace' glossyGradientColors' glossyGradientLocations);    //// Shadow Declarations  				var frameInnerShadow = frameShadowColor.CGColor;  				var frameInnerShadowOffset = new SizeF (0' -0);  				var frameInnerShadowBlurRadius = 3;  				var buttonInnerShadow = UIColor.Black.CGColor;  				var buttonInnerShadowOffset = new SizeF (0' -0);  				var buttonInnerShadowBlurRadius = 12;  				var textShadow = UIColor.Black.CGColor;  				var textShadowOffset = new SizeF (0' -0);  				var textShadowBlurRadius = 1;  				var buttonShadow = UIColor.Black.CGColor;    				var buttonShadowOffset = new SizeF (0' isPressed ? 0 : 2);		// ADDED this code after PaintCode  				var buttonShadowBlurRadius = isPressed ? 2 : 3;					// ADDED this code after PaintCode          //// outerFrame Drawing  var outerFramePath = UIBezierPath.FromRoundedRect(new RectangleF(2.5f' 1.5f' 120' 32)' 8);  context.SaveState();  context.SetShadowWithColor(buttonShadowOffset' buttonShadowBlurRadius' buttonShadow);  frameColorTop.SetFill();  outerFramePath.Fill();  context.RestoreState();    UIColor.Black.SetStroke();  outerFramePath.LineWidth = 1;  outerFramePath.Stroke();      //// innerFrame Drawing  var innerFramePath = UIBezierPath.FromRoundedRect(new RectangleF(5.5f' 4.5f' 114' 26)' 5);  context.SaveState();  context.SetShadowWithColor(frameInnerShadowOffset' frameInnerShadowBlurRadius' frameInnerShadow);  buttonColor.SetFill();  innerFramePath.Fill();    ////// innerFrame Inner Shadow  var innerFrameBorderRect = innerFramePath.Bounds;  innerFrameBorderRect.Inflate(buttonInnerShadowBlurRadius' buttonInnerShadowBlurRadius);  innerFrameBorderRect.Offset(-buttonInnerShadowOffset.Width' -buttonInnerShadowOffset.Height);  innerFrameBorderRect = RectangleF.Union(innerFrameBorderRect' innerFramePath.Bounds);  innerFrameBorderRect.Inflate(1' 1);    var innerFrameNegativePath = UIBezierPath.FromRect(innerFrameBorderRect);  innerFrameNegativePath.AppendPath(innerFramePath);  innerFrameNegativePath.UsesEvenOddFillRule = true;    context.SaveState();  {      var xOffset = buttonInnerShadowOffset.Width + (float)Math.Round(innerFrameBorderRect.Width);      var yOffset = buttonInnerShadowOffset.Height;      context.SetShadowWithColor(          new SizeF(xOffset + (xOffset >= 0 ? 0.1f : -0.1f)' yOffset + (yOffset >= 0 ? 0.1f : -0.1f))'          buttonInnerShadowBlurRadius'          buttonInnerShadow);        innerFramePath.AddClip();      var transform = CGAffineTransform.MakeTranslation(-(float)Math.Round(innerFrameBorderRect.Width)' 0);      innerFrameNegativePath.ApplyTransform(transform);      UIColor.Gray.SetFill();      innerFrameNegativePath.Fill();  }  context.RestoreState();    context.RestoreState();    UIColor.Black.SetStroke();  innerFramePath.LineWidth = 1;  innerFramePath.Stroke();      //// Rounded Rectangle Drawing  var roundedRectanglePath = UIBezierPath.FromRoundedRect(new RectangleF(8' 6' 109' 9)' 4);  context.SaveState();  roundedRectanglePath.AddClip();  context.DrawLinearGradient(glossyGradient' new PointF(62.5f' 6)' new PointF(62.5f' 15)' 0);  context.RestoreState();        //// Text Drawing  var textRect = new RectangleF(18' 6' 90' 28);  context.SaveState();  context.SetShadowWithColor(textShadowOffset' textShadowBlurRadius' textShadow);  glossyColorUp.SetFill();    				// Use default button-drawn text  				//new NSString(textContent).DrawString(textRect' font' UILineBreakMode.WordWrap' UITextAlignment.Center);  context.RestoreState();      		    			// ------------- END PAINTCODE -------------    				  				  				  			}
Magic Number,PaintCode,GlossyButton,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\GlossyButton\GlossyButton.cs,Draw,The following statement contains a magic number: using (var colorSpace = CGColorSpace.CreateDeviceRGB ()) {  				  				  				//// Abstracted Graphic Attributes  				var textContent = this.Title (UIControlState.Normal); //"STOP";			  				var font = UIFont.SystemFontOfSize (18);  				// ------------- START PAINTCODE -------------        //// Color Declarations  				UIColor frameColorTop = UIColor.FromRGBA (0.20f' 0.20f' 0.20f' 1.00f);  				UIColor frameShadowColor = UIColor.FromRGBA (1.00f' 1.00f' 1.00f' 0.40f);    				UIColor glossyColorBottom = UIColor.FromRGBA (  					(buttonColorRGBA [0] * 0.6f + 0.4f)'  					(buttonColorRGBA [1] * 0.6f + 0.4f)'  					(buttonColorRGBA [2] * 0.6f + 0.4f)'  					(buttonColorRGBA [3] * 0.6f + 0.4f)  				);  				UIColor glossyColorUp = UIColor.FromRGBA (  					(buttonColorRGBA [0] * 0.2f + 0.8f)'  					(buttonColorRGBA [1] * 0.2f + 0.8f)'  					(buttonColorRGBA [2] * 0.2f + 0.8f)'  					(buttonColorRGBA [3] * 0.2f + 0.8f)  				);    //// Gradient Declarations  				var glossyGradientColors = new CGColor [] {glossyColorUp.CGColor' glossyColorBottom.CGColor};  				var glossyGradientLocations = new float [] {0' 1};  				var glossyGradient = new CGGradient (colorSpace' glossyGradientColors' glossyGradientLocations);    //// Shadow Declarations  				var frameInnerShadow = frameShadowColor.CGColor;  				var frameInnerShadowOffset = new SizeF (0' -0);  				var frameInnerShadowBlurRadius = 3;  				var buttonInnerShadow = UIColor.Black.CGColor;  				var buttonInnerShadowOffset = new SizeF (0' -0);  				var buttonInnerShadowBlurRadius = 12;  				var textShadow = UIColor.Black.CGColor;  				var textShadowOffset = new SizeF (0' -0);  				var textShadowBlurRadius = 1;  				var buttonShadow = UIColor.Black.CGColor;    				var buttonShadowOffset = new SizeF (0' isPressed ? 0 : 2);		// ADDED this code after PaintCode  				var buttonShadowBlurRadius = isPressed ? 2 : 3;					// ADDED this code after PaintCode          //// outerFrame Drawing  var outerFramePath = UIBezierPath.FromRoundedRect(new RectangleF(2.5f' 1.5f' 120' 32)' 8);  context.SaveState();  context.SetShadowWithColor(buttonShadowOffset' buttonShadowBlurRadius' buttonShadow);  frameColorTop.SetFill();  outerFramePath.Fill();  context.RestoreState();    UIColor.Black.SetStroke();  outerFramePath.LineWidth = 1;  outerFramePath.Stroke();      //// innerFrame Drawing  var innerFramePath = UIBezierPath.FromRoundedRect(new RectangleF(5.5f' 4.5f' 114' 26)' 5);  context.SaveState();  context.SetShadowWithColor(frameInnerShadowOffset' frameInnerShadowBlurRadius' frameInnerShadow);  buttonColor.SetFill();  innerFramePath.Fill();    ////// innerFrame Inner Shadow  var innerFrameBorderRect = innerFramePath.Bounds;  innerFrameBorderRect.Inflate(buttonInnerShadowBlurRadius' buttonInnerShadowBlurRadius);  innerFrameBorderRect.Offset(-buttonInnerShadowOffset.Width' -buttonInnerShadowOffset.Height);  innerFrameBorderRect = RectangleF.Union(innerFrameBorderRect' innerFramePath.Bounds);  innerFrameBorderRect.Inflate(1' 1);    var innerFrameNegativePath = UIBezierPath.FromRect(innerFrameBorderRect);  innerFrameNegativePath.AppendPath(innerFramePath);  innerFrameNegativePath.UsesEvenOddFillRule = true;    context.SaveState();  {      var xOffset = buttonInnerShadowOffset.Width + (float)Math.Round(innerFrameBorderRect.Width);      var yOffset = buttonInnerShadowOffset.Height;      context.SetShadowWithColor(          new SizeF(xOffset + (xOffset >= 0 ? 0.1f : -0.1f)' yOffset + (yOffset >= 0 ? 0.1f : -0.1f))'          buttonInnerShadowBlurRadius'          buttonInnerShadow);        innerFramePath.AddClip();      var transform = CGAffineTransform.MakeTranslation(-(float)Math.Round(innerFrameBorderRect.Width)' 0);      innerFrameNegativePath.ApplyTransform(transform);      UIColor.Gray.SetFill();      innerFrameNegativePath.Fill();  }  context.RestoreState();    context.RestoreState();    UIColor.Black.SetStroke();  innerFramePath.LineWidth = 1;  innerFramePath.Stroke();      //// Rounded Rectangle Drawing  var roundedRectanglePath = UIBezierPath.FromRoundedRect(new RectangleF(8' 6' 109' 9)' 4);  context.SaveState();  roundedRectanglePath.AddClip();  context.DrawLinearGradient(glossyGradient' new PointF(62.5f' 6)' new PointF(62.5f' 15)' 0);  context.RestoreState();        //// Text Drawing  var textRect = new RectangleF(18' 6' 90' 28);  context.SaveState();  context.SetShadowWithColor(textShadowOffset' textShadowBlurRadius' textShadow);  glossyColorUp.SetFill();    				// Use default button-drawn text  				//new NSString(textContent).DrawString(textRect' font' UILineBreakMode.WordWrap' UITextAlignment.Center);  context.RestoreState();      		    			// ------------- END PAINTCODE -------------    				  				  				  			}
Magic Number,PaintCode,GlossyButton,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\GlossyButton\GlossyButton.cs,Draw,The following statement contains a magic number: using (var colorSpace = CGColorSpace.CreateDeviceRGB ()) {  				  				  				//// Abstracted Graphic Attributes  				var textContent = this.Title (UIControlState.Normal); //"STOP";			  				var font = UIFont.SystemFontOfSize (18);  				// ------------- START PAINTCODE -------------        //// Color Declarations  				UIColor frameColorTop = UIColor.FromRGBA (0.20f' 0.20f' 0.20f' 1.00f);  				UIColor frameShadowColor = UIColor.FromRGBA (1.00f' 1.00f' 1.00f' 0.40f);    				UIColor glossyColorBottom = UIColor.FromRGBA (  					(buttonColorRGBA [0] * 0.6f + 0.4f)'  					(buttonColorRGBA [1] * 0.6f + 0.4f)'  					(buttonColorRGBA [2] * 0.6f + 0.4f)'  					(buttonColorRGBA [3] * 0.6f + 0.4f)  				);  				UIColor glossyColorUp = UIColor.FromRGBA (  					(buttonColorRGBA [0] * 0.2f + 0.8f)'  					(buttonColorRGBA [1] * 0.2f + 0.8f)'  					(buttonColorRGBA [2] * 0.2f + 0.8f)'  					(buttonColorRGBA [3] * 0.2f + 0.8f)  				);    //// Gradient Declarations  				var glossyGradientColors = new CGColor [] {glossyColorUp.CGColor' glossyColorBottom.CGColor};  				var glossyGradientLocations = new float [] {0' 1};  				var glossyGradient = new CGGradient (colorSpace' glossyGradientColors' glossyGradientLocations);    //// Shadow Declarations  				var frameInnerShadow = frameShadowColor.CGColor;  				var frameInnerShadowOffset = new SizeF (0' -0);  				var frameInnerShadowBlurRadius = 3;  				var buttonInnerShadow = UIColor.Black.CGColor;  				var buttonInnerShadowOffset = new SizeF (0' -0);  				var buttonInnerShadowBlurRadius = 12;  				var textShadow = UIColor.Black.CGColor;  				var textShadowOffset = new SizeF (0' -0);  				var textShadowBlurRadius = 1;  				var buttonShadow = UIColor.Black.CGColor;    				var buttonShadowOffset = new SizeF (0' isPressed ? 0 : 2);		// ADDED this code after PaintCode  				var buttonShadowBlurRadius = isPressed ? 2 : 3;					// ADDED this code after PaintCode          //// outerFrame Drawing  var outerFramePath = UIBezierPath.FromRoundedRect(new RectangleF(2.5f' 1.5f' 120' 32)' 8);  context.SaveState();  context.SetShadowWithColor(buttonShadowOffset' buttonShadowBlurRadius' buttonShadow);  frameColorTop.SetFill();  outerFramePath.Fill();  context.RestoreState();    UIColor.Black.SetStroke();  outerFramePath.LineWidth = 1;  outerFramePath.Stroke();      //// innerFrame Drawing  var innerFramePath = UIBezierPath.FromRoundedRect(new RectangleF(5.5f' 4.5f' 114' 26)' 5);  context.SaveState();  context.SetShadowWithColor(frameInnerShadowOffset' frameInnerShadowBlurRadius' frameInnerShadow);  buttonColor.SetFill();  innerFramePath.Fill();    ////// innerFrame Inner Shadow  var innerFrameBorderRect = innerFramePath.Bounds;  innerFrameBorderRect.Inflate(buttonInnerShadowBlurRadius' buttonInnerShadowBlurRadius);  innerFrameBorderRect.Offset(-buttonInnerShadowOffset.Width' -buttonInnerShadowOffset.Height);  innerFrameBorderRect = RectangleF.Union(innerFrameBorderRect' innerFramePath.Bounds);  innerFrameBorderRect.Inflate(1' 1);    var innerFrameNegativePath = UIBezierPath.FromRect(innerFrameBorderRect);  innerFrameNegativePath.AppendPath(innerFramePath);  innerFrameNegativePath.UsesEvenOddFillRule = true;    context.SaveState();  {      var xOffset = buttonInnerShadowOffset.Width + (float)Math.Round(innerFrameBorderRect.Width);      var yOffset = buttonInnerShadowOffset.Height;      context.SetShadowWithColor(          new SizeF(xOffset + (xOffset >= 0 ? 0.1f : -0.1f)' yOffset + (yOffset >= 0 ? 0.1f : -0.1f))'          buttonInnerShadowBlurRadius'          buttonInnerShadow);        innerFramePath.AddClip();      var transform = CGAffineTransform.MakeTranslation(-(float)Math.Round(innerFrameBorderRect.Width)' 0);      innerFrameNegativePath.ApplyTransform(transform);      UIColor.Gray.SetFill();      innerFrameNegativePath.Fill();  }  context.RestoreState();    context.RestoreState();    UIColor.Black.SetStroke();  innerFramePath.LineWidth = 1;  innerFramePath.Stroke();      //// Rounded Rectangle Drawing  var roundedRectanglePath = UIBezierPath.FromRoundedRect(new RectangleF(8' 6' 109' 9)' 4);  context.SaveState();  roundedRectanglePath.AddClip();  context.DrawLinearGradient(glossyGradient' new PointF(62.5f' 6)' new PointF(62.5f' 15)' 0);  context.RestoreState();        //// Text Drawing  var textRect = new RectangleF(18' 6' 90' 28);  context.SaveState();  context.SetShadowWithColor(textShadowOffset' textShadowBlurRadius' textShadow);  glossyColorUp.SetFill();    				// Use default button-drawn text  				//new NSString(textContent).DrawString(textRect' font' UILineBreakMode.WordWrap' UITextAlignment.Center);  context.RestoreState();      		    			// ------------- END PAINTCODE -------------    				  				  				  			}
Magic Number,PaintCode,GlossyButton,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\GlossyButton\GlossyButton.cs,Draw,The following statement contains a magic number: using (var colorSpace = CGColorSpace.CreateDeviceRGB ()) {  				  				  				//// Abstracted Graphic Attributes  				var textContent = this.Title (UIControlState.Normal); //"STOP";			  				var font = UIFont.SystemFontOfSize (18);  				// ------------- START PAINTCODE -------------        //// Color Declarations  				UIColor frameColorTop = UIColor.FromRGBA (0.20f' 0.20f' 0.20f' 1.00f);  				UIColor frameShadowColor = UIColor.FromRGBA (1.00f' 1.00f' 1.00f' 0.40f);    				UIColor glossyColorBottom = UIColor.FromRGBA (  					(buttonColorRGBA [0] * 0.6f + 0.4f)'  					(buttonColorRGBA [1] * 0.6f + 0.4f)'  					(buttonColorRGBA [2] * 0.6f + 0.4f)'  					(buttonColorRGBA [3] * 0.6f + 0.4f)  				);  				UIColor glossyColorUp = UIColor.FromRGBA (  					(buttonColorRGBA [0] * 0.2f + 0.8f)'  					(buttonColorRGBA [1] * 0.2f + 0.8f)'  					(buttonColorRGBA [2] * 0.2f + 0.8f)'  					(buttonColorRGBA [3] * 0.2f + 0.8f)  				);    //// Gradient Declarations  				var glossyGradientColors = new CGColor [] {glossyColorUp.CGColor' glossyColorBottom.CGColor};  				var glossyGradientLocations = new float [] {0' 1};  				var glossyGradient = new CGGradient (colorSpace' glossyGradientColors' glossyGradientLocations);    //// Shadow Declarations  				var frameInnerShadow = frameShadowColor.CGColor;  				var frameInnerShadowOffset = new SizeF (0' -0);  				var frameInnerShadowBlurRadius = 3;  				var buttonInnerShadow = UIColor.Black.CGColor;  				var buttonInnerShadowOffset = new SizeF (0' -0);  				var buttonInnerShadowBlurRadius = 12;  				var textShadow = UIColor.Black.CGColor;  				var textShadowOffset = new SizeF (0' -0);  				var textShadowBlurRadius = 1;  				var buttonShadow = UIColor.Black.CGColor;    				var buttonShadowOffset = new SizeF (0' isPressed ? 0 : 2);		// ADDED this code after PaintCode  				var buttonShadowBlurRadius = isPressed ? 2 : 3;					// ADDED this code after PaintCode          //// outerFrame Drawing  var outerFramePath = UIBezierPath.FromRoundedRect(new RectangleF(2.5f' 1.5f' 120' 32)' 8);  context.SaveState();  context.SetShadowWithColor(buttonShadowOffset' buttonShadowBlurRadius' buttonShadow);  frameColorTop.SetFill();  outerFramePath.Fill();  context.RestoreState();    UIColor.Black.SetStroke();  outerFramePath.LineWidth = 1;  outerFramePath.Stroke();      //// innerFrame Drawing  var innerFramePath = UIBezierPath.FromRoundedRect(new RectangleF(5.5f' 4.5f' 114' 26)' 5);  context.SaveState();  context.SetShadowWithColor(frameInnerShadowOffset' frameInnerShadowBlurRadius' frameInnerShadow);  buttonColor.SetFill();  innerFramePath.Fill();    ////// innerFrame Inner Shadow  var innerFrameBorderRect = innerFramePath.Bounds;  innerFrameBorderRect.Inflate(buttonInnerShadowBlurRadius' buttonInnerShadowBlurRadius);  innerFrameBorderRect.Offset(-buttonInnerShadowOffset.Width' -buttonInnerShadowOffset.Height);  innerFrameBorderRect = RectangleF.Union(innerFrameBorderRect' innerFramePath.Bounds);  innerFrameBorderRect.Inflate(1' 1);    var innerFrameNegativePath = UIBezierPath.FromRect(innerFrameBorderRect);  innerFrameNegativePath.AppendPath(innerFramePath);  innerFrameNegativePath.UsesEvenOddFillRule = true;    context.SaveState();  {      var xOffset = buttonInnerShadowOffset.Width + (float)Math.Round(innerFrameBorderRect.Width);      var yOffset = buttonInnerShadowOffset.Height;      context.SetShadowWithColor(          new SizeF(xOffset + (xOffset >= 0 ? 0.1f : -0.1f)' yOffset + (yOffset >= 0 ? 0.1f : -0.1f))'          buttonInnerShadowBlurRadius'          buttonInnerShadow);        innerFramePath.AddClip();      var transform = CGAffineTransform.MakeTranslation(-(float)Math.Round(innerFrameBorderRect.Width)' 0);      innerFrameNegativePath.ApplyTransform(transform);      UIColor.Gray.SetFill();      innerFrameNegativePath.Fill();  }  context.RestoreState();    context.RestoreState();    UIColor.Black.SetStroke();  innerFramePath.LineWidth = 1;  innerFramePath.Stroke();      //// Rounded Rectangle Drawing  var roundedRectanglePath = UIBezierPath.FromRoundedRect(new RectangleF(8' 6' 109' 9)' 4);  context.SaveState();  roundedRectanglePath.AddClip();  context.DrawLinearGradient(glossyGradient' new PointF(62.5f' 6)' new PointF(62.5f' 15)' 0);  context.RestoreState();        //// Text Drawing  var textRect = new RectangleF(18' 6' 90' 28);  context.SaveState();  context.SetShadowWithColor(textShadowOffset' textShadowBlurRadius' textShadow);  glossyColorUp.SetFill();    				// Use default button-drawn text  				//new NSString(textContent).DrawString(textRect' font' UILineBreakMode.WordWrap' UITextAlignment.Center);  context.RestoreState();      		    			// ------------- END PAINTCODE -------------    				  				  				  			}
Magic Number,PaintCode,GlossyButton,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\GlossyButton\GlossyButton.cs,Draw,The following statement contains a magic number: using (var colorSpace = CGColorSpace.CreateDeviceRGB ()) {  				  				  				//// Abstracted Graphic Attributes  				var textContent = this.Title (UIControlState.Normal); //"STOP";			  				var font = UIFont.SystemFontOfSize (18);  				// ------------- START PAINTCODE -------------        //// Color Declarations  				UIColor frameColorTop = UIColor.FromRGBA (0.20f' 0.20f' 0.20f' 1.00f);  				UIColor frameShadowColor = UIColor.FromRGBA (1.00f' 1.00f' 1.00f' 0.40f);    				UIColor glossyColorBottom = UIColor.FromRGBA (  					(buttonColorRGBA [0] * 0.6f + 0.4f)'  					(buttonColorRGBA [1] * 0.6f + 0.4f)'  					(buttonColorRGBA [2] * 0.6f + 0.4f)'  					(buttonColorRGBA [3] * 0.6f + 0.4f)  				);  				UIColor glossyColorUp = UIColor.FromRGBA (  					(buttonColorRGBA [0] * 0.2f + 0.8f)'  					(buttonColorRGBA [1] * 0.2f + 0.8f)'  					(buttonColorRGBA [2] * 0.2f + 0.8f)'  					(buttonColorRGBA [3] * 0.2f + 0.8f)  				);    //// Gradient Declarations  				var glossyGradientColors = new CGColor [] {glossyColorUp.CGColor' glossyColorBottom.CGColor};  				var glossyGradientLocations = new float [] {0' 1};  				var glossyGradient = new CGGradient (colorSpace' glossyGradientColors' glossyGradientLocations);    //// Shadow Declarations  				var frameInnerShadow = frameShadowColor.CGColor;  				var frameInnerShadowOffset = new SizeF (0' -0);  				var frameInnerShadowBlurRadius = 3;  				var buttonInnerShadow = UIColor.Black.CGColor;  				var buttonInnerShadowOffset = new SizeF (0' -0);  				var buttonInnerShadowBlurRadius = 12;  				var textShadow = UIColor.Black.CGColor;  				var textShadowOffset = new SizeF (0' -0);  				var textShadowBlurRadius = 1;  				var buttonShadow = UIColor.Black.CGColor;    				var buttonShadowOffset = new SizeF (0' isPressed ? 0 : 2);		// ADDED this code after PaintCode  				var buttonShadowBlurRadius = isPressed ? 2 : 3;					// ADDED this code after PaintCode          //// outerFrame Drawing  var outerFramePath = UIBezierPath.FromRoundedRect(new RectangleF(2.5f' 1.5f' 120' 32)' 8);  context.SaveState();  context.SetShadowWithColor(buttonShadowOffset' buttonShadowBlurRadius' buttonShadow);  frameColorTop.SetFill();  outerFramePath.Fill();  context.RestoreState();    UIColor.Black.SetStroke();  outerFramePath.LineWidth = 1;  outerFramePath.Stroke();      //// innerFrame Drawing  var innerFramePath = UIBezierPath.FromRoundedRect(new RectangleF(5.5f' 4.5f' 114' 26)' 5);  context.SaveState();  context.SetShadowWithColor(frameInnerShadowOffset' frameInnerShadowBlurRadius' frameInnerShadow);  buttonColor.SetFill();  innerFramePath.Fill();    ////// innerFrame Inner Shadow  var innerFrameBorderRect = innerFramePath.Bounds;  innerFrameBorderRect.Inflate(buttonInnerShadowBlurRadius' buttonInnerShadowBlurRadius);  innerFrameBorderRect.Offset(-buttonInnerShadowOffset.Width' -buttonInnerShadowOffset.Height);  innerFrameBorderRect = RectangleF.Union(innerFrameBorderRect' innerFramePath.Bounds);  innerFrameBorderRect.Inflate(1' 1);    var innerFrameNegativePath = UIBezierPath.FromRect(innerFrameBorderRect);  innerFrameNegativePath.AppendPath(innerFramePath);  innerFrameNegativePath.UsesEvenOddFillRule = true;    context.SaveState();  {      var xOffset = buttonInnerShadowOffset.Width + (float)Math.Round(innerFrameBorderRect.Width);      var yOffset = buttonInnerShadowOffset.Height;      context.SetShadowWithColor(          new SizeF(xOffset + (xOffset >= 0 ? 0.1f : -0.1f)' yOffset + (yOffset >= 0 ? 0.1f : -0.1f))'          buttonInnerShadowBlurRadius'          buttonInnerShadow);        innerFramePath.AddClip();      var transform = CGAffineTransform.MakeTranslation(-(float)Math.Round(innerFrameBorderRect.Width)' 0);      innerFrameNegativePath.ApplyTransform(transform);      UIColor.Gray.SetFill();      innerFrameNegativePath.Fill();  }  context.RestoreState();    context.RestoreState();    UIColor.Black.SetStroke();  innerFramePath.LineWidth = 1;  innerFramePath.Stroke();      //// Rounded Rectangle Drawing  var roundedRectanglePath = UIBezierPath.FromRoundedRect(new RectangleF(8' 6' 109' 9)' 4);  context.SaveState();  roundedRectanglePath.AddClip();  context.DrawLinearGradient(glossyGradient' new PointF(62.5f' 6)' new PointF(62.5f' 15)' 0);  context.RestoreState();        //// Text Drawing  var textRect = new RectangleF(18' 6' 90' 28);  context.SaveState();  context.SetShadowWithColor(textShadowOffset' textShadowBlurRadius' textShadow);  glossyColorUp.SetFill();    				// Use default button-drawn text  				//new NSString(textContent).DrawString(textRect' font' UILineBreakMode.WordWrap' UITextAlignment.Center);  context.RestoreState();      		    			// ------------- END PAINTCODE -------------    				  				  				  			}
Magic Number,PaintCode,GlossyButton,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\GlossyButton\GlossyButton.cs,Draw,The following statement contains a magic number: using (var colorSpace = CGColorSpace.CreateDeviceRGB ()) {  				  				  				//// Abstracted Graphic Attributes  				var textContent = this.Title (UIControlState.Normal); //"STOP";			  				var font = UIFont.SystemFontOfSize (18);  				// ------------- START PAINTCODE -------------        //// Color Declarations  				UIColor frameColorTop = UIColor.FromRGBA (0.20f' 0.20f' 0.20f' 1.00f);  				UIColor frameShadowColor = UIColor.FromRGBA (1.00f' 1.00f' 1.00f' 0.40f);    				UIColor glossyColorBottom = UIColor.FromRGBA (  					(buttonColorRGBA [0] * 0.6f + 0.4f)'  					(buttonColorRGBA [1] * 0.6f + 0.4f)'  					(buttonColorRGBA [2] * 0.6f + 0.4f)'  					(buttonColorRGBA [3] * 0.6f + 0.4f)  				);  				UIColor glossyColorUp = UIColor.FromRGBA (  					(buttonColorRGBA [0] * 0.2f + 0.8f)'  					(buttonColorRGBA [1] * 0.2f + 0.8f)'  					(buttonColorRGBA [2] * 0.2f + 0.8f)'  					(buttonColorRGBA [3] * 0.2f + 0.8f)  				);    //// Gradient Declarations  				var glossyGradientColors = new CGColor [] {glossyColorUp.CGColor' glossyColorBottom.CGColor};  				var glossyGradientLocations = new float [] {0' 1};  				var glossyGradient = new CGGradient (colorSpace' glossyGradientColors' glossyGradientLocations);    //// Shadow Declarations  				var frameInnerShadow = frameShadowColor.CGColor;  				var frameInnerShadowOffset = new SizeF (0' -0);  				var frameInnerShadowBlurRadius = 3;  				var buttonInnerShadow = UIColor.Black.CGColor;  				var buttonInnerShadowOffset = new SizeF (0' -0);  				var buttonInnerShadowBlurRadius = 12;  				var textShadow = UIColor.Black.CGColor;  				var textShadowOffset = new SizeF (0' -0);  				var textShadowBlurRadius = 1;  				var buttonShadow = UIColor.Black.CGColor;    				var buttonShadowOffset = new SizeF (0' isPressed ? 0 : 2);		// ADDED this code after PaintCode  				var buttonShadowBlurRadius = isPressed ? 2 : 3;					// ADDED this code after PaintCode          //// outerFrame Drawing  var outerFramePath = UIBezierPath.FromRoundedRect(new RectangleF(2.5f' 1.5f' 120' 32)' 8);  context.SaveState();  context.SetShadowWithColor(buttonShadowOffset' buttonShadowBlurRadius' buttonShadow);  frameColorTop.SetFill();  outerFramePath.Fill();  context.RestoreState();    UIColor.Black.SetStroke();  outerFramePath.LineWidth = 1;  outerFramePath.Stroke();      //// innerFrame Drawing  var innerFramePath = UIBezierPath.FromRoundedRect(new RectangleF(5.5f' 4.5f' 114' 26)' 5);  context.SaveState();  context.SetShadowWithColor(frameInnerShadowOffset' frameInnerShadowBlurRadius' frameInnerShadow);  buttonColor.SetFill();  innerFramePath.Fill();    ////// innerFrame Inner Shadow  var innerFrameBorderRect = innerFramePath.Bounds;  innerFrameBorderRect.Inflate(buttonInnerShadowBlurRadius' buttonInnerShadowBlurRadius);  innerFrameBorderRect.Offset(-buttonInnerShadowOffset.Width' -buttonInnerShadowOffset.Height);  innerFrameBorderRect = RectangleF.Union(innerFrameBorderRect' innerFramePath.Bounds);  innerFrameBorderRect.Inflate(1' 1);    var innerFrameNegativePath = UIBezierPath.FromRect(innerFrameBorderRect);  innerFrameNegativePath.AppendPath(innerFramePath);  innerFrameNegativePath.UsesEvenOddFillRule = true;    context.SaveState();  {      var xOffset = buttonInnerShadowOffset.Width + (float)Math.Round(innerFrameBorderRect.Width);      var yOffset = buttonInnerShadowOffset.Height;      context.SetShadowWithColor(          new SizeF(xOffset + (xOffset >= 0 ? 0.1f : -0.1f)' yOffset + (yOffset >= 0 ? 0.1f : -0.1f))'          buttonInnerShadowBlurRadius'          buttonInnerShadow);        innerFramePath.AddClip();      var transform = CGAffineTransform.MakeTranslation(-(float)Math.Round(innerFrameBorderRect.Width)' 0);      innerFrameNegativePath.ApplyTransform(transform);      UIColor.Gray.SetFill();      innerFrameNegativePath.Fill();  }  context.RestoreState();    context.RestoreState();    UIColor.Black.SetStroke();  innerFramePath.LineWidth = 1;  innerFramePath.Stroke();      //// Rounded Rectangle Drawing  var roundedRectanglePath = UIBezierPath.FromRoundedRect(new RectangleF(8' 6' 109' 9)' 4);  context.SaveState();  roundedRectanglePath.AddClip();  context.DrawLinearGradient(glossyGradient' new PointF(62.5f' 6)' new PointF(62.5f' 15)' 0);  context.RestoreState();        //// Text Drawing  var textRect = new RectangleF(18' 6' 90' 28);  context.SaveState();  context.SetShadowWithColor(textShadowOffset' textShadowBlurRadius' textShadow);  glossyColorUp.SetFill();    				// Use default button-drawn text  				//new NSString(textContent).DrawString(textRect' font' UILineBreakMode.WordWrap' UITextAlignment.Center);  context.RestoreState();      		    			// ------------- END PAINTCODE -------------    				  				  				  			}
Magic Number,PaintCode,GlossyButton,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\GlossyButton\GlossyButton.cs,Draw,The following statement contains a magic number: using (var colorSpace = CGColorSpace.CreateDeviceRGB ()) {  				  				  				//// Abstracted Graphic Attributes  				var textContent = this.Title (UIControlState.Normal); //"STOP";			  				var font = UIFont.SystemFontOfSize (18);  				// ------------- START PAINTCODE -------------        //// Color Declarations  				UIColor frameColorTop = UIColor.FromRGBA (0.20f' 0.20f' 0.20f' 1.00f);  				UIColor frameShadowColor = UIColor.FromRGBA (1.00f' 1.00f' 1.00f' 0.40f);    				UIColor glossyColorBottom = UIColor.FromRGBA (  					(buttonColorRGBA [0] * 0.6f + 0.4f)'  					(buttonColorRGBA [1] * 0.6f + 0.4f)'  					(buttonColorRGBA [2] * 0.6f + 0.4f)'  					(buttonColorRGBA [3] * 0.6f + 0.4f)  				);  				UIColor glossyColorUp = UIColor.FromRGBA (  					(buttonColorRGBA [0] * 0.2f + 0.8f)'  					(buttonColorRGBA [1] * 0.2f + 0.8f)'  					(buttonColorRGBA [2] * 0.2f + 0.8f)'  					(buttonColorRGBA [3] * 0.2f + 0.8f)  				);    //// Gradient Declarations  				var glossyGradientColors = new CGColor [] {glossyColorUp.CGColor' glossyColorBottom.CGColor};  				var glossyGradientLocations = new float [] {0' 1};  				var glossyGradient = new CGGradient (colorSpace' glossyGradientColors' glossyGradientLocations);    //// Shadow Declarations  				var frameInnerShadow = frameShadowColor.CGColor;  				var frameInnerShadowOffset = new SizeF (0' -0);  				var frameInnerShadowBlurRadius = 3;  				var buttonInnerShadow = UIColor.Black.CGColor;  				var buttonInnerShadowOffset = new SizeF (0' -0);  				var buttonInnerShadowBlurRadius = 12;  				var textShadow = UIColor.Black.CGColor;  				var textShadowOffset = new SizeF (0' -0);  				var textShadowBlurRadius = 1;  				var buttonShadow = UIColor.Black.CGColor;    				var buttonShadowOffset = new SizeF (0' isPressed ? 0 : 2);		// ADDED this code after PaintCode  				var buttonShadowBlurRadius = isPressed ? 2 : 3;					// ADDED this code after PaintCode          //// outerFrame Drawing  var outerFramePath = UIBezierPath.FromRoundedRect(new RectangleF(2.5f' 1.5f' 120' 32)' 8);  context.SaveState();  context.SetShadowWithColor(buttonShadowOffset' buttonShadowBlurRadius' buttonShadow);  frameColorTop.SetFill();  outerFramePath.Fill();  context.RestoreState();    UIColor.Black.SetStroke();  outerFramePath.LineWidth = 1;  outerFramePath.Stroke();      //// innerFrame Drawing  var innerFramePath = UIBezierPath.FromRoundedRect(new RectangleF(5.5f' 4.5f' 114' 26)' 5);  context.SaveState();  context.SetShadowWithColor(frameInnerShadowOffset' frameInnerShadowBlurRadius' frameInnerShadow);  buttonColor.SetFill();  innerFramePath.Fill();    ////// innerFrame Inner Shadow  var innerFrameBorderRect = innerFramePath.Bounds;  innerFrameBorderRect.Inflate(buttonInnerShadowBlurRadius' buttonInnerShadowBlurRadius);  innerFrameBorderRect.Offset(-buttonInnerShadowOffset.Width' -buttonInnerShadowOffset.Height);  innerFrameBorderRect = RectangleF.Union(innerFrameBorderRect' innerFramePath.Bounds);  innerFrameBorderRect.Inflate(1' 1);    var innerFrameNegativePath = UIBezierPath.FromRect(innerFrameBorderRect);  innerFrameNegativePath.AppendPath(innerFramePath);  innerFrameNegativePath.UsesEvenOddFillRule = true;    context.SaveState();  {      var xOffset = buttonInnerShadowOffset.Width + (float)Math.Round(innerFrameBorderRect.Width);      var yOffset = buttonInnerShadowOffset.Height;      context.SetShadowWithColor(          new SizeF(xOffset + (xOffset >= 0 ? 0.1f : -0.1f)' yOffset + (yOffset >= 0 ? 0.1f : -0.1f))'          buttonInnerShadowBlurRadius'          buttonInnerShadow);        innerFramePath.AddClip();      var transform = CGAffineTransform.MakeTranslation(-(float)Math.Round(innerFrameBorderRect.Width)' 0);      innerFrameNegativePath.ApplyTransform(transform);      UIColor.Gray.SetFill();      innerFrameNegativePath.Fill();  }  context.RestoreState();    context.RestoreState();    UIColor.Black.SetStroke();  innerFramePath.LineWidth = 1;  innerFramePath.Stroke();      //// Rounded Rectangle Drawing  var roundedRectanglePath = UIBezierPath.FromRoundedRect(new RectangleF(8' 6' 109' 9)' 4);  context.SaveState();  roundedRectanglePath.AddClip();  context.DrawLinearGradient(glossyGradient' new PointF(62.5f' 6)' new PointF(62.5f' 15)' 0);  context.RestoreState();        //// Text Drawing  var textRect = new RectangleF(18' 6' 90' 28);  context.SaveState();  context.SetShadowWithColor(textShadowOffset' textShadowBlurRadius' textShadow);  glossyColorUp.SetFill();    				// Use default button-drawn text  				//new NSString(textContent).DrawString(textRect' font' UILineBreakMode.WordWrap' UITextAlignment.Center);  context.RestoreState();      		    			// ------------- END PAINTCODE -------------    				  				  				  			}
Magic Number,PaintCode,GlossyButton,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\GlossyButton\GlossyButton.cs,Draw,The following statement contains a magic number: using (var colorSpace = CGColorSpace.CreateDeviceRGB ()) {  				  				  				//// Abstracted Graphic Attributes  				var textContent = this.Title (UIControlState.Normal); //"STOP";			  				var font = UIFont.SystemFontOfSize (18);  				// ------------- START PAINTCODE -------------        //// Color Declarations  				UIColor frameColorTop = UIColor.FromRGBA (0.20f' 0.20f' 0.20f' 1.00f);  				UIColor frameShadowColor = UIColor.FromRGBA (1.00f' 1.00f' 1.00f' 0.40f);    				UIColor glossyColorBottom = UIColor.FromRGBA (  					(buttonColorRGBA [0] * 0.6f + 0.4f)'  					(buttonColorRGBA [1] * 0.6f + 0.4f)'  					(buttonColorRGBA [2] * 0.6f + 0.4f)'  					(buttonColorRGBA [3] * 0.6f + 0.4f)  				);  				UIColor glossyColorUp = UIColor.FromRGBA (  					(buttonColorRGBA [0] * 0.2f + 0.8f)'  					(buttonColorRGBA [1] * 0.2f + 0.8f)'  					(buttonColorRGBA [2] * 0.2f + 0.8f)'  					(buttonColorRGBA [3] * 0.2f + 0.8f)  				);    //// Gradient Declarations  				var glossyGradientColors = new CGColor [] {glossyColorUp.CGColor' glossyColorBottom.CGColor};  				var glossyGradientLocations = new float [] {0' 1};  				var glossyGradient = new CGGradient (colorSpace' glossyGradientColors' glossyGradientLocations);    //// Shadow Declarations  				var frameInnerShadow = frameShadowColor.CGColor;  				var frameInnerShadowOffset = new SizeF (0' -0);  				var frameInnerShadowBlurRadius = 3;  				var buttonInnerShadow = UIColor.Black.CGColor;  				var buttonInnerShadowOffset = new SizeF (0' -0);  				var buttonInnerShadowBlurRadius = 12;  				var textShadow = UIColor.Black.CGColor;  				var textShadowOffset = new SizeF (0' -0);  				var textShadowBlurRadius = 1;  				var buttonShadow = UIColor.Black.CGColor;    				var buttonShadowOffset = new SizeF (0' isPressed ? 0 : 2);		// ADDED this code after PaintCode  				var buttonShadowBlurRadius = isPressed ? 2 : 3;					// ADDED this code after PaintCode          //// outerFrame Drawing  var outerFramePath = UIBezierPath.FromRoundedRect(new RectangleF(2.5f' 1.5f' 120' 32)' 8);  context.SaveState();  context.SetShadowWithColor(buttonShadowOffset' buttonShadowBlurRadius' buttonShadow);  frameColorTop.SetFill();  outerFramePath.Fill();  context.RestoreState();    UIColor.Black.SetStroke();  outerFramePath.LineWidth = 1;  outerFramePath.Stroke();      //// innerFrame Drawing  var innerFramePath = UIBezierPath.FromRoundedRect(new RectangleF(5.5f' 4.5f' 114' 26)' 5);  context.SaveState();  context.SetShadowWithColor(frameInnerShadowOffset' frameInnerShadowBlurRadius' frameInnerShadow);  buttonColor.SetFill();  innerFramePath.Fill();    ////// innerFrame Inner Shadow  var innerFrameBorderRect = innerFramePath.Bounds;  innerFrameBorderRect.Inflate(buttonInnerShadowBlurRadius' buttonInnerShadowBlurRadius);  innerFrameBorderRect.Offset(-buttonInnerShadowOffset.Width' -buttonInnerShadowOffset.Height);  innerFrameBorderRect = RectangleF.Union(innerFrameBorderRect' innerFramePath.Bounds);  innerFrameBorderRect.Inflate(1' 1);    var innerFrameNegativePath = UIBezierPath.FromRect(innerFrameBorderRect);  innerFrameNegativePath.AppendPath(innerFramePath);  innerFrameNegativePath.UsesEvenOddFillRule = true;    context.SaveState();  {      var xOffset = buttonInnerShadowOffset.Width + (float)Math.Round(innerFrameBorderRect.Width);      var yOffset = buttonInnerShadowOffset.Height;      context.SetShadowWithColor(          new SizeF(xOffset + (xOffset >= 0 ? 0.1f : -0.1f)' yOffset + (yOffset >= 0 ? 0.1f : -0.1f))'          buttonInnerShadowBlurRadius'          buttonInnerShadow);        innerFramePath.AddClip();      var transform = CGAffineTransform.MakeTranslation(-(float)Math.Round(innerFrameBorderRect.Width)' 0);      innerFrameNegativePath.ApplyTransform(transform);      UIColor.Gray.SetFill();      innerFrameNegativePath.Fill();  }  context.RestoreState();    context.RestoreState();    UIColor.Black.SetStroke();  innerFramePath.LineWidth = 1;  innerFramePath.Stroke();      //// Rounded Rectangle Drawing  var roundedRectanglePath = UIBezierPath.FromRoundedRect(new RectangleF(8' 6' 109' 9)' 4);  context.SaveState();  roundedRectanglePath.AddClip();  context.DrawLinearGradient(glossyGradient' new PointF(62.5f' 6)' new PointF(62.5f' 15)' 0);  context.RestoreState();        //// Text Drawing  var textRect = new RectangleF(18' 6' 90' 28);  context.SaveState();  context.SetShadowWithColor(textShadowOffset' textShadowBlurRadius' textShadow);  glossyColorUp.SetFill();    				// Use default button-drawn text  				//new NSString(textContent).DrawString(textRect' font' UILineBreakMode.WordWrap' UITextAlignment.Center);  context.RestoreState();      		    			// ------------- END PAINTCODE -------------    				  				  				  			}
Magic Number,PaintCode,GlossyButton,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\GlossyButton\GlossyButton.cs,Draw,The following statement contains a magic number: using (var colorSpace = CGColorSpace.CreateDeviceRGB ()) {  				  				  				//// Abstracted Graphic Attributes  				var textContent = this.Title (UIControlState.Normal); //"STOP";			  				var font = UIFont.SystemFontOfSize (18);  				// ------------- START PAINTCODE -------------        //// Color Declarations  				UIColor frameColorTop = UIColor.FromRGBA (0.20f' 0.20f' 0.20f' 1.00f);  				UIColor frameShadowColor = UIColor.FromRGBA (1.00f' 1.00f' 1.00f' 0.40f);    				UIColor glossyColorBottom = UIColor.FromRGBA (  					(buttonColorRGBA [0] * 0.6f + 0.4f)'  					(buttonColorRGBA [1] * 0.6f + 0.4f)'  					(buttonColorRGBA [2] * 0.6f + 0.4f)'  					(buttonColorRGBA [3] * 0.6f + 0.4f)  				);  				UIColor glossyColorUp = UIColor.FromRGBA (  					(buttonColorRGBA [0] * 0.2f + 0.8f)'  					(buttonColorRGBA [1] * 0.2f + 0.8f)'  					(buttonColorRGBA [2] * 0.2f + 0.8f)'  					(buttonColorRGBA [3] * 0.2f + 0.8f)  				);    //// Gradient Declarations  				var glossyGradientColors = new CGColor [] {glossyColorUp.CGColor' glossyColorBottom.CGColor};  				var glossyGradientLocations = new float [] {0' 1};  				var glossyGradient = new CGGradient (colorSpace' glossyGradientColors' glossyGradientLocations);    //// Shadow Declarations  				var frameInnerShadow = frameShadowColor.CGColor;  				var frameInnerShadowOffset = new SizeF (0' -0);  				var frameInnerShadowBlurRadius = 3;  				var buttonInnerShadow = UIColor.Black.CGColor;  				var buttonInnerShadowOffset = new SizeF (0' -0);  				var buttonInnerShadowBlurRadius = 12;  				var textShadow = UIColor.Black.CGColor;  				var textShadowOffset = new SizeF (0' -0);  				var textShadowBlurRadius = 1;  				var buttonShadow = UIColor.Black.CGColor;    				var buttonShadowOffset = new SizeF (0' isPressed ? 0 : 2);		// ADDED this code after PaintCode  				var buttonShadowBlurRadius = isPressed ? 2 : 3;					// ADDED this code after PaintCode          //// outerFrame Drawing  var outerFramePath = UIBezierPath.FromRoundedRect(new RectangleF(2.5f' 1.5f' 120' 32)' 8);  context.SaveState();  context.SetShadowWithColor(buttonShadowOffset' buttonShadowBlurRadius' buttonShadow);  frameColorTop.SetFill();  outerFramePath.Fill();  context.RestoreState();    UIColor.Black.SetStroke();  outerFramePath.LineWidth = 1;  outerFramePath.Stroke();      //// innerFrame Drawing  var innerFramePath = UIBezierPath.FromRoundedRect(new RectangleF(5.5f' 4.5f' 114' 26)' 5);  context.SaveState();  context.SetShadowWithColor(frameInnerShadowOffset' frameInnerShadowBlurRadius' frameInnerShadow);  buttonColor.SetFill();  innerFramePath.Fill();    ////// innerFrame Inner Shadow  var innerFrameBorderRect = innerFramePath.Bounds;  innerFrameBorderRect.Inflate(buttonInnerShadowBlurRadius' buttonInnerShadowBlurRadius);  innerFrameBorderRect.Offset(-buttonInnerShadowOffset.Width' -buttonInnerShadowOffset.Height);  innerFrameBorderRect = RectangleF.Union(innerFrameBorderRect' innerFramePath.Bounds);  innerFrameBorderRect.Inflate(1' 1);    var innerFrameNegativePath = UIBezierPath.FromRect(innerFrameBorderRect);  innerFrameNegativePath.AppendPath(innerFramePath);  innerFrameNegativePath.UsesEvenOddFillRule = true;    context.SaveState();  {      var xOffset = buttonInnerShadowOffset.Width + (float)Math.Round(innerFrameBorderRect.Width);      var yOffset = buttonInnerShadowOffset.Height;      context.SetShadowWithColor(          new SizeF(xOffset + (xOffset >= 0 ? 0.1f : -0.1f)' yOffset + (yOffset >= 0 ? 0.1f : -0.1f))'          buttonInnerShadowBlurRadius'          buttonInnerShadow);        innerFramePath.AddClip();      var transform = CGAffineTransform.MakeTranslation(-(float)Math.Round(innerFrameBorderRect.Width)' 0);      innerFrameNegativePath.ApplyTransform(transform);      UIColor.Gray.SetFill();      innerFrameNegativePath.Fill();  }  context.RestoreState();    context.RestoreState();    UIColor.Black.SetStroke();  innerFramePath.LineWidth = 1;  innerFramePath.Stroke();      //// Rounded Rectangle Drawing  var roundedRectanglePath = UIBezierPath.FromRoundedRect(new RectangleF(8' 6' 109' 9)' 4);  context.SaveState();  roundedRectanglePath.AddClip();  context.DrawLinearGradient(glossyGradient' new PointF(62.5f' 6)' new PointF(62.5f' 15)' 0);  context.RestoreState();        //// Text Drawing  var textRect = new RectangleF(18' 6' 90' 28);  context.SaveState();  context.SetShadowWithColor(textShadowOffset' textShadowBlurRadius' textShadow);  glossyColorUp.SetFill();    				// Use default button-drawn text  				//new NSString(textContent).DrawString(textRect' font' UILineBreakMode.WordWrap' UITextAlignment.Center);  context.RestoreState();      		    			// ------------- END PAINTCODE -------------    				  				  				  			}
Magic Number,PaintCode,GlossyButton,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\GlossyButton\GlossyButton.cs,Draw,The following statement contains a magic number: using (var colorSpace = CGColorSpace.CreateDeviceRGB ()) {  				  				  				//// Abstracted Graphic Attributes  				var textContent = this.Title (UIControlState.Normal); //"STOP";			  				var font = UIFont.SystemFontOfSize (18);  				// ------------- START PAINTCODE -------------        //// Color Declarations  				UIColor frameColorTop = UIColor.FromRGBA (0.20f' 0.20f' 0.20f' 1.00f);  				UIColor frameShadowColor = UIColor.FromRGBA (1.00f' 1.00f' 1.00f' 0.40f);    				UIColor glossyColorBottom = UIColor.FromRGBA (  					(buttonColorRGBA [0] * 0.6f + 0.4f)'  					(buttonColorRGBA [1] * 0.6f + 0.4f)'  					(buttonColorRGBA [2] * 0.6f + 0.4f)'  					(buttonColorRGBA [3] * 0.6f + 0.4f)  				);  				UIColor glossyColorUp = UIColor.FromRGBA (  					(buttonColorRGBA [0] * 0.2f + 0.8f)'  					(buttonColorRGBA [1] * 0.2f + 0.8f)'  					(buttonColorRGBA [2] * 0.2f + 0.8f)'  					(buttonColorRGBA [3] * 0.2f + 0.8f)  				);    //// Gradient Declarations  				var glossyGradientColors = new CGColor [] {glossyColorUp.CGColor' glossyColorBottom.CGColor};  				var glossyGradientLocations = new float [] {0' 1};  				var glossyGradient = new CGGradient (colorSpace' glossyGradientColors' glossyGradientLocations);    //// Shadow Declarations  				var frameInnerShadow = frameShadowColor.CGColor;  				var frameInnerShadowOffset = new SizeF (0' -0);  				var frameInnerShadowBlurRadius = 3;  				var buttonInnerShadow = UIColor.Black.CGColor;  				var buttonInnerShadowOffset = new SizeF (0' -0);  				var buttonInnerShadowBlurRadius = 12;  				var textShadow = UIColor.Black.CGColor;  				var textShadowOffset = new SizeF (0' -0);  				var textShadowBlurRadius = 1;  				var buttonShadow = UIColor.Black.CGColor;    				var buttonShadowOffset = new SizeF (0' isPressed ? 0 : 2);		// ADDED this code after PaintCode  				var buttonShadowBlurRadius = isPressed ? 2 : 3;					// ADDED this code after PaintCode          //// outerFrame Drawing  var outerFramePath = UIBezierPath.FromRoundedRect(new RectangleF(2.5f' 1.5f' 120' 32)' 8);  context.SaveState();  context.SetShadowWithColor(buttonShadowOffset' buttonShadowBlurRadius' buttonShadow);  frameColorTop.SetFill();  outerFramePath.Fill();  context.RestoreState();    UIColor.Black.SetStroke();  outerFramePath.LineWidth = 1;  outerFramePath.Stroke();      //// innerFrame Drawing  var innerFramePath = UIBezierPath.FromRoundedRect(new RectangleF(5.5f' 4.5f' 114' 26)' 5);  context.SaveState();  context.SetShadowWithColor(frameInnerShadowOffset' frameInnerShadowBlurRadius' frameInnerShadow);  buttonColor.SetFill();  innerFramePath.Fill();    ////// innerFrame Inner Shadow  var innerFrameBorderRect = innerFramePath.Bounds;  innerFrameBorderRect.Inflate(buttonInnerShadowBlurRadius' buttonInnerShadowBlurRadius);  innerFrameBorderRect.Offset(-buttonInnerShadowOffset.Width' -buttonInnerShadowOffset.Height);  innerFrameBorderRect = RectangleF.Union(innerFrameBorderRect' innerFramePath.Bounds);  innerFrameBorderRect.Inflate(1' 1);    var innerFrameNegativePath = UIBezierPath.FromRect(innerFrameBorderRect);  innerFrameNegativePath.AppendPath(innerFramePath);  innerFrameNegativePath.UsesEvenOddFillRule = true;    context.SaveState();  {      var xOffset = buttonInnerShadowOffset.Width + (float)Math.Round(innerFrameBorderRect.Width);      var yOffset = buttonInnerShadowOffset.Height;      context.SetShadowWithColor(          new SizeF(xOffset + (xOffset >= 0 ? 0.1f : -0.1f)' yOffset + (yOffset >= 0 ? 0.1f : -0.1f))'          buttonInnerShadowBlurRadius'          buttonInnerShadow);        innerFramePath.AddClip();      var transform = CGAffineTransform.MakeTranslation(-(float)Math.Round(innerFrameBorderRect.Width)' 0);      innerFrameNegativePath.ApplyTransform(transform);      UIColor.Gray.SetFill();      innerFrameNegativePath.Fill();  }  context.RestoreState();    context.RestoreState();    UIColor.Black.SetStroke();  innerFramePath.LineWidth = 1;  innerFramePath.Stroke();      //// Rounded Rectangle Drawing  var roundedRectanglePath = UIBezierPath.FromRoundedRect(new RectangleF(8' 6' 109' 9)' 4);  context.SaveState();  roundedRectanglePath.AddClip();  context.DrawLinearGradient(glossyGradient' new PointF(62.5f' 6)' new PointF(62.5f' 15)' 0);  context.RestoreState();        //// Text Drawing  var textRect = new RectangleF(18' 6' 90' 28);  context.SaveState();  context.SetShadowWithColor(textShadowOffset' textShadowBlurRadius' textShadow);  glossyColorUp.SetFill();    				// Use default button-drawn text  				//new NSString(textContent).DrawString(textRect' font' UILineBreakMode.WordWrap' UITextAlignment.Center);  context.RestoreState();      		    			// ------------- END PAINTCODE -------------    				  				  				  			}
Magic Number,PaintCode,GlossyButton,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\GlossyButton\GlossyButton.cs,Draw,The following statement contains a magic number: using (var colorSpace = CGColorSpace.CreateDeviceRGB ()) {  				  				  				//// Abstracted Graphic Attributes  				var textContent = this.Title (UIControlState.Normal); //"STOP";			  				var font = UIFont.SystemFontOfSize (18);  				// ------------- START PAINTCODE -------------        //// Color Declarations  				UIColor frameColorTop = UIColor.FromRGBA (0.20f' 0.20f' 0.20f' 1.00f);  				UIColor frameShadowColor = UIColor.FromRGBA (1.00f' 1.00f' 1.00f' 0.40f);    				UIColor glossyColorBottom = UIColor.FromRGBA (  					(buttonColorRGBA [0] * 0.6f + 0.4f)'  					(buttonColorRGBA [1] * 0.6f + 0.4f)'  					(buttonColorRGBA [2] * 0.6f + 0.4f)'  					(buttonColorRGBA [3] * 0.6f + 0.4f)  				);  				UIColor glossyColorUp = UIColor.FromRGBA (  					(buttonColorRGBA [0] * 0.2f + 0.8f)'  					(buttonColorRGBA [1] * 0.2f + 0.8f)'  					(buttonColorRGBA [2] * 0.2f + 0.8f)'  					(buttonColorRGBA [3] * 0.2f + 0.8f)  				);    //// Gradient Declarations  				var glossyGradientColors = new CGColor [] {glossyColorUp.CGColor' glossyColorBottom.CGColor};  				var glossyGradientLocations = new float [] {0' 1};  				var glossyGradient = new CGGradient (colorSpace' glossyGradientColors' glossyGradientLocations);    //// Shadow Declarations  				var frameInnerShadow = frameShadowColor.CGColor;  				var frameInnerShadowOffset = new SizeF (0' -0);  				var frameInnerShadowBlurRadius = 3;  				var buttonInnerShadow = UIColor.Black.CGColor;  				var buttonInnerShadowOffset = new SizeF (0' -0);  				var buttonInnerShadowBlurRadius = 12;  				var textShadow = UIColor.Black.CGColor;  				var textShadowOffset = new SizeF (0' -0);  				var textShadowBlurRadius = 1;  				var buttonShadow = UIColor.Black.CGColor;    				var buttonShadowOffset = new SizeF (0' isPressed ? 0 : 2);		// ADDED this code after PaintCode  				var buttonShadowBlurRadius = isPressed ? 2 : 3;					// ADDED this code after PaintCode          //// outerFrame Drawing  var outerFramePath = UIBezierPath.FromRoundedRect(new RectangleF(2.5f' 1.5f' 120' 32)' 8);  context.SaveState();  context.SetShadowWithColor(buttonShadowOffset' buttonShadowBlurRadius' buttonShadow);  frameColorTop.SetFill();  outerFramePath.Fill();  context.RestoreState();    UIColor.Black.SetStroke();  outerFramePath.LineWidth = 1;  outerFramePath.Stroke();      //// innerFrame Drawing  var innerFramePath = UIBezierPath.FromRoundedRect(new RectangleF(5.5f' 4.5f' 114' 26)' 5);  context.SaveState();  context.SetShadowWithColor(frameInnerShadowOffset' frameInnerShadowBlurRadius' frameInnerShadow);  buttonColor.SetFill();  innerFramePath.Fill();    ////// innerFrame Inner Shadow  var innerFrameBorderRect = innerFramePath.Bounds;  innerFrameBorderRect.Inflate(buttonInnerShadowBlurRadius' buttonInnerShadowBlurRadius);  innerFrameBorderRect.Offset(-buttonInnerShadowOffset.Width' -buttonInnerShadowOffset.Height);  innerFrameBorderRect = RectangleF.Union(innerFrameBorderRect' innerFramePath.Bounds);  innerFrameBorderRect.Inflate(1' 1);    var innerFrameNegativePath = UIBezierPath.FromRect(innerFrameBorderRect);  innerFrameNegativePath.AppendPath(innerFramePath);  innerFrameNegativePath.UsesEvenOddFillRule = true;    context.SaveState();  {      var xOffset = buttonInnerShadowOffset.Width + (float)Math.Round(innerFrameBorderRect.Width);      var yOffset = buttonInnerShadowOffset.Height;      context.SetShadowWithColor(          new SizeF(xOffset + (xOffset >= 0 ? 0.1f : -0.1f)' yOffset + (yOffset >= 0 ? 0.1f : -0.1f))'          buttonInnerShadowBlurRadius'          buttonInnerShadow);        innerFramePath.AddClip();      var transform = CGAffineTransform.MakeTranslation(-(float)Math.Round(innerFrameBorderRect.Width)' 0);      innerFrameNegativePath.ApplyTransform(transform);      UIColor.Gray.SetFill();      innerFrameNegativePath.Fill();  }  context.RestoreState();    context.RestoreState();    UIColor.Black.SetStroke();  innerFramePath.LineWidth = 1;  innerFramePath.Stroke();      //// Rounded Rectangle Drawing  var roundedRectanglePath = UIBezierPath.FromRoundedRect(new RectangleF(8' 6' 109' 9)' 4);  context.SaveState();  roundedRectanglePath.AddClip();  context.DrawLinearGradient(glossyGradient' new PointF(62.5f' 6)' new PointF(62.5f' 15)' 0);  context.RestoreState();        //// Text Drawing  var textRect = new RectangleF(18' 6' 90' 28);  context.SaveState();  context.SetShadowWithColor(textShadowOffset' textShadowBlurRadius' textShadow);  glossyColorUp.SetFill();    				// Use default button-drawn text  				//new NSString(textContent).DrawString(textRect' font' UILineBreakMode.WordWrap' UITextAlignment.Center);  context.RestoreState();      		    			// ------------- END PAINTCODE -------------    				  				  				  			}
Magic Number,PaintCode,GlossyButton,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\GlossyButton\GlossyButton.cs,Draw,The following statement contains a magic number: using (var colorSpace = CGColorSpace.CreateDeviceRGB ()) {  				  				  				//// Abstracted Graphic Attributes  				var textContent = this.Title (UIControlState.Normal); //"STOP";			  				var font = UIFont.SystemFontOfSize (18);  				// ------------- START PAINTCODE -------------        //// Color Declarations  				UIColor frameColorTop = UIColor.FromRGBA (0.20f' 0.20f' 0.20f' 1.00f);  				UIColor frameShadowColor = UIColor.FromRGBA (1.00f' 1.00f' 1.00f' 0.40f);    				UIColor glossyColorBottom = UIColor.FromRGBA (  					(buttonColorRGBA [0] * 0.6f + 0.4f)'  					(buttonColorRGBA [1] * 0.6f + 0.4f)'  					(buttonColorRGBA [2] * 0.6f + 0.4f)'  					(buttonColorRGBA [3] * 0.6f + 0.4f)  				);  				UIColor glossyColorUp = UIColor.FromRGBA (  					(buttonColorRGBA [0] * 0.2f + 0.8f)'  					(buttonColorRGBA [1] * 0.2f + 0.8f)'  					(buttonColorRGBA [2] * 0.2f + 0.8f)'  					(buttonColorRGBA [3] * 0.2f + 0.8f)  				);    //// Gradient Declarations  				var glossyGradientColors = new CGColor [] {glossyColorUp.CGColor' glossyColorBottom.CGColor};  				var glossyGradientLocations = new float [] {0' 1};  				var glossyGradient = new CGGradient (colorSpace' glossyGradientColors' glossyGradientLocations);    //// Shadow Declarations  				var frameInnerShadow = frameShadowColor.CGColor;  				var frameInnerShadowOffset = new SizeF (0' -0);  				var frameInnerShadowBlurRadius = 3;  				var buttonInnerShadow = UIColor.Black.CGColor;  				var buttonInnerShadowOffset = new SizeF (0' -0);  				var buttonInnerShadowBlurRadius = 12;  				var textShadow = UIColor.Black.CGColor;  				var textShadowOffset = new SizeF (0' -0);  				var textShadowBlurRadius = 1;  				var buttonShadow = UIColor.Black.CGColor;    				var buttonShadowOffset = new SizeF (0' isPressed ? 0 : 2);		// ADDED this code after PaintCode  				var buttonShadowBlurRadius = isPressed ? 2 : 3;					// ADDED this code after PaintCode          //// outerFrame Drawing  var outerFramePath = UIBezierPath.FromRoundedRect(new RectangleF(2.5f' 1.5f' 120' 32)' 8);  context.SaveState();  context.SetShadowWithColor(buttonShadowOffset' buttonShadowBlurRadius' buttonShadow);  frameColorTop.SetFill();  outerFramePath.Fill();  context.RestoreState();    UIColor.Black.SetStroke();  outerFramePath.LineWidth = 1;  outerFramePath.Stroke();      //// innerFrame Drawing  var innerFramePath = UIBezierPath.FromRoundedRect(new RectangleF(5.5f' 4.5f' 114' 26)' 5);  context.SaveState();  context.SetShadowWithColor(frameInnerShadowOffset' frameInnerShadowBlurRadius' frameInnerShadow);  buttonColor.SetFill();  innerFramePath.Fill();    ////// innerFrame Inner Shadow  var innerFrameBorderRect = innerFramePath.Bounds;  innerFrameBorderRect.Inflate(buttonInnerShadowBlurRadius' buttonInnerShadowBlurRadius);  innerFrameBorderRect.Offset(-buttonInnerShadowOffset.Width' -buttonInnerShadowOffset.Height);  innerFrameBorderRect = RectangleF.Union(innerFrameBorderRect' innerFramePath.Bounds);  innerFrameBorderRect.Inflate(1' 1);    var innerFrameNegativePath = UIBezierPath.FromRect(innerFrameBorderRect);  innerFrameNegativePath.AppendPath(innerFramePath);  innerFrameNegativePath.UsesEvenOddFillRule = true;    context.SaveState();  {      var xOffset = buttonInnerShadowOffset.Width + (float)Math.Round(innerFrameBorderRect.Width);      var yOffset = buttonInnerShadowOffset.Height;      context.SetShadowWithColor(          new SizeF(xOffset + (xOffset >= 0 ? 0.1f : -0.1f)' yOffset + (yOffset >= 0 ? 0.1f : -0.1f))'          buttonInnerShadowBlurRadius'          buttonInnerShadow);        innerFramePath.AddClip();      var transform = CGAffineTransform.MakeTranslation(-(float)Math.Round(innerFrameBorderRect.Width)' 0);      innerFrameNegativePath.ApplyTransform(transform);      UIColor.Gray.SetFill();      innerFrameNegativePath.Fill();  }  context.RestoreState();    context.RestoreState();    UIColor.Black.SetStroke();  innerFramePath.LineWidth = 1;  innerFramePath.Stroke();      //// Rounded Rectangle Drawing  var roundedRectanglePath = UIBezierPath.FromRoundedRect(new RectangleF(8' 6' 109' 9)' 4);  context.SaveState();  roundedRectanglePath.AddClip();  context.DrawLinearGradient(glossyGradient' new PointF(62.5f' 6)' new PointF(62.5f' 15)' 0);  context.RestoreState();        //// Text Drawing  var textRect = new RectangleF(18' 6' 90' 28);  context.SaveState();  context.SetShadowWithColor(textShadowOffset' textShadowBlurRadius' textShadow);  glossyColorUp.SetFill();    				// Use default button-drawn text  				//new NSString(textContent).DrawString(textRect' font' UILineBreakMode.WordWrap' UITextAlignment.Center);  context.RestoreState();      		    			// ------------- END PAINTCODE -------------    				  				  				  			}
Magic Number,PaintCode,GlossyButton,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\GlossyButton\GlossyButton.cs,Draw,The following statement contains a magic number: using (var colorSpace = CGColorSpace.CreateDeviceRGB ()) {  				  				  				//// Abstracted Graphic Attributes  				var textContent = this.Title (UIControlState.Normal); //"STOP";			  				var font = UIFont.SystemFontOfSize (18);  				// ------------- START PAINTCODE -------------        //// Color Declarations  				UIColor frameColorTop = UIColor.FromRGBA (0.20f' 0.20f' 0.20f' 1.00f);  				UIColor frameShadowColor = UIColor.FromRGBA (1.00f' 1.00f' 1.00f' 0.40f);    				UIColor glossyColorBottom = UIColor.FromRGBA (  					(buttonColorRGBA [0] * 0.6f + 0.4f)'  					(buttonColorRGBA [1] * 0.6f + 0.4f)'  					(buttonColorRGBA [2] * 0.6f + 0.4f)'  					(buttonColorRGBA [3] * 0.6f + 0.4f)  				);  				UIColor glossyColorUp = UIColor.FromRGBA (  					(buttonColorRGBA [0] * 0.2f + 0.8f)'  					(buttonColorRGBA [1] * 0.2f + 0.8f)'  					(buttonColorRGBA [2] * 0.2f + 0.8f)'  					(buttonColorRGBA [3] * 0.2f + 0.8f)  				);    //// Gradient Declarations  				var glossyGradientColors = new CGColor [] {glossyColorUp.CGColor' glossyColorBottom.CGColor};  				var glossyGradientLocations = new float [] {0' 1};  				var glossyGradient = new CGGradient (colorSpace' glossyGradientColors' glossyGradientLocations);    //// Shadow Declarations  				var frameInnerShadow = frameShadowColor.CGColor;  				var frameInnerShadowOffset = new SizeF (0' -0);  				var frameInnerShadowBlurRadius = 3;  				var buttonInnerShadow = UIColor.Black.CGColor;  				var buttonInnerShadowOffset = new SizeF (0' -0);  				var buttonInnerShadowBlurRadius = 12;  				var textShadow = UIColor.Black.CGColor;  				var textShadowOffset = new SizeF (0' -0);  				var textShadowBlurRadius = 1;  				var buttonShadow = UIColor.Black.CGColor;    				var buttonShadowOffset = new SizeF (0' isPressed ? 0 : 2);		// ADDED this code after PaintCode  				var buttonShadowBlurRadius = isPressed ? 2 : 3;					// ADDED this code after PaintCode          //// outerFrame Drawing  var outerFramePath = UIBezierPath.FromRoundedRect(new RectangleF(2.5f' 1.5f' 120' 32)' 8);  context.SaveState();  context.SetShadowWithColor(buttonShadowOffset' buttonShadowBlurRadius' buttonShadow);  frameColorTop.SetFill();  outerFramePath.Fill();  context.RestoreState();    UIColor.Black.SetStroke();  outerFramePath.LineWidth = 1;  outerFramePath.Stroke();      //// innerFrame Drawing  var innerFramePath = UIBezierPath.FromRoundedRect(new RectangleF(5.5f' 4.5f' 114' 26)' 5);  context.SaveState();  context.SetShadowWithColor(frameInnerShadowOffset' frameInnerShadowBlurRadius' frameInnerShadow);  buttonColor.SetFill();  innerFramePath.Fill();    ////// innerFrame Inner Shadow  var innerFrameBorderRect = innerFramePath.Bounds;  innerFrameBorderRect.Inflate(buttonInnerShadowBlurRadius' buttonInnerShadowBlurRadius);  innerFrameBorderRect.Offset(-buttonInnerShadowOffset.Width' -buttonInnerShadowOffset.Height);  innerFrameBorderRect = RectangleF.Union(innerFrameBorderRect' innerFramePath.Bounds);  innerFrameBorderRect.Inflate(1' 1);    var innerFrameNegativePath = UIBezierPath.FromRect(innerFrameBorderRect);  innerFrameNegativePath.AppendPath(innerFramePath);  innerFrameNegativePath.UsesEvenOddFillRule = true;    context.SaveState();  {      var xOffset = buttonInnerShadowOffset.Width + (float)Math.Round(innerFrameBorderRect.Width);      var yOffset = buttonInnerShadowOffset.Height;      context.SetShadowWithColor(          new SizeF(xOffset + (xOffset >= 0 ? 0.1f : -0.1f)' yOffset + (yOffset >= 0 ? 0.1f : -0.1f))'          buttonInnerShadowBlurRadius'          buttonInnerShadow);        innerFramePath.AddClip();      var transform = CGAffineTransform.MakeTranslation(-(float)Math.Round(innerFrameBorderRect.Width)' 0);      innerFrameNegativePath.ApplyTransform(transform);      UIColor.Gray.SetFill();      innerFrameNegativePath.Fill();  }  context.RestoreState();    context.RestoreState();    UIColor.Black.SetStroke();  innerFramePath.LineWidth = 1;  innerFramePath.Stroke();      //// Rounded Rectangle Drawing  var roundedRectanglePath = UIBezierPath.FromRoundedRect(new RectangleF(8' 6' 109' 9)' 4);  context.SaveState();  roundedRectanglePath.AddClip();  context.DrawLinearGradient(glossyGradient' new PointF(62.5f' 6)' new PointF(62.5f' 15)' 0);  context.RestoreState();        //// Text Drawing  var textRect = new RectangleF(18' 6' 90' 28);  context.SaveState();  context.SetShadowWithColor(textShadowOffset' textShadowBlurRadius' textShadow);  glossyColorUp.SetFill();    				// Use default button-drawn text  				//new NSString(textContent).DrawString(textRect' font' UILineBreakMode.WordWrap' UITextAlignment.Center);  context.RestoreState();      		    			// ------------- END PAINTCODE -------------    				  				  				  			}
Magic Number,PaintCode,GlossyButton,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\GlossyButton\GlossyButton.cs,Draw,The following statement contains a magic number: using (var colorSpace = CGColorSpace.CreateDeviceRGB ()) {  				  				  				//// Abstracted Graphic Attributes  				var textContent = this.Title (UIControlState.Normal); //"STOP";			  				var font = UIFont.SystemFontOfSize (18);  				// ------------- START PAINTCODE -------------        //// Color Declarations  				UIColor frameColorTop = UIColor.FromRGBA (0.20f' 0.20f' 0.20f' 1.00f);  				UIColor frameShadowColor = UIColor.FromRGBA (1.00f' 1.00f' 1.00f' 0.40f);    				UIColor glossyColorBottom = UIColor.FromRGBA (  					(buttonColorRGBA [0] * 0.6f + 0.4f)'  					(buttonColorRGBA [1] * 0.6f + 0.4f)'  					(buttonColorRGBA [2] * 0.6f + 0.4f)'  					(buttonColorRGBA [3] * 0.6f + 0.4f)  				);  				UIColor glossyColorUp = UIColor.FromRGBA (  					(buttonColorRGBA [0] * 0.2f + 0.8f)'  					(buttonColorRGBA [1] * 0.2f + 0.8f)'  					(buttonColorRGBA [2] * 0.2f + 0.8f)'  					(buttonColorRGBA [3] * 0.2f + 0.8f)  				);    //// Gradient Declarations  				var glossyGradientColors = new CGColor [] {glossyColorUp.CGColor' glossyColorBottom.CGColor};  				var glossyGradientLocations = new float [] {0' 1};  				var glossyGradient = new CGGradient (colorSpace' glossyGradientColors' glossyGradientLocations);    //// Shadow Declarations  				var frameInnerShadow = frameShadowColor.CGColor;  				var frameInnerShadowOffset = new SizeF (0' -0);  				var frameInnerShadowBlurRadius = 3;  				var buttonInnerShadow = UIColor.Black.CGColor;  				var buttonInnerShadowOffset = new SizeF (0' -0);  				var buttonInnerShadowBlurRadius = 12;  				var textShadow = UIColor.Black.CGColor;  				var textShadowOffset = new SizeF (0' -0);  				var textShadowBlurRadius = 1;  				var buttonShadow = UIColor.Black.CGColor;    				var buttonShadowOffset = new SizeF (0' isPressed ? 0 : 2);		// ADDED this code after PaintCode  				var buttonShadowBlurRadius = isPressed ? 2 : 3;					// ADDED this code after PaintCode          //// outerFrame Drawing  var outerFramePath = UIBezierPath.FromRoundedRect(new RectangleF(2.5f' 1.5f' 120' 32)' 8);  context.SaveState();  context.SetShadowWithColor(buttonShadowOffset' buttonShadowBlurRadius' buttonShadow);  frameColorTop.SetFill();  outerFramePath.Fill();  context.RestoreState();    UIColor.Black.SetStroke();  outerFramePath.LineWidth = 1;  outerFramePath.Stroke();      //// innerFrame Drawing  var innerFramePath = UIBezierPath.FromRoundedRect(new RectangleF(5.5f' 4.5f' 114' 26)' 5);  context.SaveState();  context.SetShadowWithColor(frameInnerShadowOffset' frameInnerShadowBlurRadius' frameInnerShadow);  buttonColor.SetFill();  innerFramePath.Fill();    ////// innerFrame Inner Shadow  var innerFrameBorderRect = innerFramePath.Bounds;  innerFrameBorderRect.Inflate(buttonInnerShadowBlurRadius' buttonInnerShadowBlurRadius);  innerFrameBorderRect.Offset(-buttonInnerShadowOffset.Width' -buttonInnerShadowOffset.Height);  innerFrameBorderRect = RectangleF.Union(innerFrameBorderRect' innerFramePath.Bounds);  innerFrameBorderRect.Inflate(1' 1);    var innerFrameNegativePath = UIBezierPath.FromRect(innerFrameBorderRect);  innerFrameNegativePath.AppendPath(innerFramePath);  innerFrameNegativePath.UsesEvenOddFillRule = true;    context.SaveState();  {      var xOffset = buttonInnerShadowOffset.Width + (float)Math.Round(innerFrameBorderRect.Width);      var yOffset = buttonInnerShadowOffset.Height;      context.SetShadowWithColor(          new SizeF(xOffset + (xOffset >= 0 ? 0.1f : -0.1f)' yOffset + (yOffset >= 0 ? 0.1f : -0.1f))'          buttonInnerShadowBlurRadius'          buttonInnerShadow);        innerFramePath.AddClip();      var transform = CGAffineTransform.MakeTranslation(-(float)Math.Round(innerFrameBorderRect.Width)' 0);      innerFrameNegativePath.ApplyTransform(transform);      UIColor.Gray.SetFill();      innerFrameNegativePath.Fill();  }  context.RestoreState();    context.RestoreState();    UIColor.Black.SetStroke();  innerFramePath.LineWidth = 1;  innerFramePath.Stroke();      //// Rounded Rectangle Drawing  var roundedRectanglePath = UIBezierPath.FromRoundedRect(new RectangleF(8' 6' 109' 9)' 4);  context.SaveState();  roundedRectanglePath.AddClip();  context.DrawLinearGradient(glossyGradient' new PointF(62.5f' 6)' new PointF(62.5f' 15)' 0);  context.RestoreState();        //// Text Drawing  var textRect = new RectangleF(18' 6' 90' 28);  context.SaveState();  context.SetShadowWithColor(textShadowOffset' textShadowBlurRadius' textShadow);  glossyColorUp.SetFill();    				// Use default button-drawn text  				//new NSString(textContent).DrawString(textRect' font' UILineBreakMode.WordWrap' UITextAlignment.Center);  context.RestoreState();      		    			// ------------- END PAINTCODE -------------    				  				  				  			}
Magic Number,PaintCode,GlossyButton,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\GlossyButton\GlossyButton.cs,Draw,The following statement contains a magic number: using (var colorSpace = CGColorSpace.CreateDeviceRGB ()) {  				  				  				//// Abstracted Graphic Attributes  				var textContent = this.Title (UIControlState.Normal); //"STOP";			  				var font = UIFont.SystemFontOfSize (18);  				// ------------- START PAINTCODE -------------        //// Color Declarations  				UIColor frameColorTop = UIColor.FromRGBA (0.20f' 0.20f' 0.20f' 1.00f);  				UIColor frameShadowColor = UIColor.FromRGBA (1.00f' 1.00f' 1.00f' 0.40f);    				UIColor glossyColorBottom = UIColor.FromRGBA (  					(buttonColorRGBA [0] * 0.6f + 0.4f)'  					(buttonColorRGBA [1] * 0.6f + 0.4f)'  					(buttonColorRGBA [2] * 0.6f + 0.4f)'  					(buttonColorRGBA [3] * 0.6f + 0.4f)  				);  				UIColor glossyColorUp = UIColor.FromRGBA (  					(buttonColorRGBA [0] * 0.2f + 0.8f)'  					(buttonColorRGBA [1] * 0.2f + 0.8f)'  					(buttonColorRGBA [2] * 0.2f + 0.8f)'  					(buttonColorRGBA [3] * 0.2f + 0.8f)  				);    //// Gradient Declarations  				var glossyGradientColors = new CGColor [] {glossyColorUp.CGColor' glossyColorBottom.CGColor};  				var glossyGradientLocations = new float [] {0' 1};  				var glossyGradient = new CGGradient (colorSpace' glossyGradientColors' glossyGradientLocations);    //// Shadow Declarations  				var frameInnerShadow = frameShadowColor.CGColor;  				var frameInnerShadowOffset = new SizeF (0' -0);  				var frameInnerShadowBlurRadius = 3;  				var buttonInnerShadow = UIColor.Black.CGColor;  				var buttonInnerShadowOffset = new SizeF (0' -0);  				var buttonInnerShadowBlurRadius = 12;  				var textShadow = UIColor.Black.CGColor;  				var textShadowOffset = new SizeF (0' -0);  				var textShadowBlurRadius = 1;  				var buttonShadow = UIColor.Black.CGColor;    				var buttonShadowOffset = new SizeF (0' isPressed ? 0 : 2);		// ADDED this code after PaintCode  				var buttonShadowBlurRadius = isPressed ? 2 : 3;					// ADDED this code after PaintCode          //// outerFrame Drawing  var outerFramePath = UIBezierPath.FromRoundedRect(new RectangleF(2.5f' 1.5f' 120' 32)' 8);  context.SaveState();  context.SetShadowWithColor(buttonShadowOffset' buttonShadowBlurRadius' buttonShadow);  frameColorTop.SetFill();  outerFramePath.Fill();  context.RestoreState();    UIColor.Black.SetStroke();  outerFramePath.LineWidth = 1;  outerFramePath.Stroke();      //// innerFrame Drawing  var innerFramePath = UIBezierPath.FromRoundedRect(new RectangleF(5.5f' 4.5f' 114' 26)' 5);  context.SaveState();  context.SetShadowWithColor(frameInnerShadowOffset' frameInnerShadowBlurRadius' frameInnerShadow);  buttonColor.SetFill();  innerFramePath.Fill();    ////// innerFrame Inner Shadow  var innerFrameBorderRect = innerFramePath.Bounds;  innerFrameBorderRect.Inflate(buttonInnerShadowBlurRadius' buttonInnerShadowBlurRadius);  innerFrameBorderRect.Offset(-buttonInnerShadowOffset.Width' -buttonInnerShadowOffset.Height);  innerFrameBorderRect = RectangleF.Union(innerFrameBorderRect' innerFramePath.Bounds);  innerFrameBorderRect.Inflate(1' 1);    var innerFrameNegativePath = UIBezierPath.FromRect(innerFrameBorderRect);  innerFrameNegativePath.AppendPath(innerFramePath);  innerFrameNegativePath.UsesEvenOddFillRule = true;    context.SaveState();  {      var xOffset = buttonInnerShadowOffset.Width + (float)Math.Round(innerFrameBorderRect.Width);      var yOffset = buttonInnerShadowOffset.Height;      context.SetShadowWithColor(          new SizeF(xOffset + (xOffset >= 0 ? 0.1f : -0.1f)' yOffset + (yOffset >= 0 ? 0.1f : -0.1f))'          buttonInnerShadowBlurRadius'          buttonInnerShadow);        innerFramePath.AddClip();      var transform = CGAffineTransform.MakeTranslation(-(float)Math.Round(innerFrameBorderRect.Width)' 0);      innerFrameNegativePath.ApplyTransform(transform);      UIColor.Gray.SetFill();      innerFrameNegativePath.Fill();  }  context.RestoreState();    context.RestoreState();    UIColor.Black.SetStroke();  innerFramePath.LineWidth = 1;  innerFramePath.Stroke();      //// Rounded Rectangle Drawing  var roundedRectanglePath = UIBezierPath.FromRoundedRect(new RectangleF(8' 6' 109' 9)' 4);  context.SaveState();  roundedRectanglePath.AddClip();  context.DrawLinearGradient(glossyGradient' new PointF(62.5f' 6)' new PointF(62.5f' 15)' 0);  context.RestoreState();        //// Text Drawing  var textRect = new RectangleF(18' 6' 90' 28);  context.SaveState();  context.SetShadowWithColor(textShadowOffset' textShadowBlurRadius' textShadow);  glossyColorUp.SetFill();    				// Use default button-drawn text  				//new NSString(textContent).DrawString(textRect' font' UILineBreakMode.WordWrap' UITextAlignment.Center);  context.RestoreState();      		    			// ------------- END PAINTCODE -------------    				  				  				  			}
Magic Number,PaintCode,GlossyButton,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\GlossyButton\GlossyButton.cs,Draw,The following statement contains a magic number: using (var colorSpace = CGColorSpace.CreateDeviceRGB ()) {  				  				  				//// Abstracted Graphic Attributes  				var textContent = this.Title (UIControlState.Normal); //"STOP";			  				var font = UIFont.SystemFontOfSize (18);  				// ------------- START PAINTCODE -------------        //// Color Declarations  				UIColor frameColorTop = UIColor.FromRGBA (0.20f' 0.20f' 0.20f' 1.00f);  				UIColor frameShadowColor = UIColor.FromRGBA (1.00f' 1.00f' 1.00f' 0.40f);    				UIColor glossyColorBottom = UIColor.FromRGBA (  					(buttonColorRGBA [0] * 0.6f + 0.4f)'  					(buttonColorRGBA [1] * 0.6f + 0.4f)'  					(buttonColorRGBA [2] * 0.6f + 0.4f)'  					(buttonColorRGBA [3] * 0.6f + 0.4f)  				);  				UIColor glossyColorUp = UIColor.FromRGBA (  					(buttonColorRGBA [0] * 0.2f + 0.8f)'  					(buttonColorRGBA [1] * 0.2f + 0.8f)'  					(buttonColorRGBA [2] * 0.2f + 0.8f)'  					(buttonColorRGBA [3] * 0.2f + 0.8f)  				);    //// Gradient Declarations  				var glossyGradientColors = new CGColor [] {glossyColorUp.CGColor' glossyColorBottom.CGColor};  				var glossyGradientLocations = new float [] {0' 1};  				var glossyGradient = new CGGradient (colorSpace' glossyGradientColors' glossyGradientLocations);    //// Shadow Declarations  				var frameInnerShadow = frameShadowColor.CGColor;  				var frameInnerShadowOffset = new SizeF (0' -0);  				var frameInnerShadowBlurRadius = 3;  				var buttonInnerShadow = UIColor.Black.CGColor;  				var buttonInnerShadowOffset = new SizeF (0' -0);  				var buttonInnerShadowBlurRadius = 12;  				var textShadow = UIColor.Black.CGColor;  				var textShadowOffset = new SizeF (0' -0);  				var textShadowBlurRadius = 1;  				var buttonShadow = UIColor.Black.CGColor;    				var buttonShadowOffset = new SizeF (0' isPressed ? 0 : 2);		// ADDED this code after PaintCode  				var buttonShadowBlurRadius = isPressed ? 2 : 3;					// ADDED this code after PaintCode          //// outerFrame Drawing  var outerFramePath = UIBezierPath.FromRoundedRect(new RectangleF(2.5f' 1.5f' 120' 32)' 8);  context.SaveState();  context.SetShadowWithColor(buttonShadowOffset' buttonShadowBlurRadius' buttonShadow);  frameColorTop.SetFill();  outerFramePath.Fill();  context.RestoreState();    UIColor.Black.SetStroke();  outerFramePath.LineWidth = 1;  outerFramePath.Stroke();      //// innerFrame Drawing  var innerFramePath = UIBezierPath.FromRoundedRect(new RectangleF(5.5f' 4.5f' 114' 26)' 5);  context.SaveState();  context.SetShadowWithColor(frameInnerShadowOffset' frameInnerShadowBlurRadius' frameInnerShadow);  buttonColor.SetFill();  innerFramePath.Fill();    ////// innerFrame Inner Shadow  var innerFrameBorderRect = innerFramePath.Bounds;  innerFrameBorderRect.Inflate(buttonInnerShadowBlurRadius' buttonInnerShadowBlurRadius);  innerFrameBorderRect.Offset(-buttonInnerShadowOffset.Width' -buttonInnerShadowOffset.Height);  innerFrameBorderRect = RectangleF.Union(innerFrameBorderRect' innerFramePath.Bounds);  innerFrameBorderRect.Inflate(1' 1);    var innerFrameNegativePath = UIBezierPath.FromRect(innerFrameBorderRect);  innerFrameNegativePath.AppendPath(innerFramePath);  innerFrameNegativePath.UsesEvenOddFillRule = true;    context.SaveState();  {      var xOffset = buttonInnerShadowOffset.Width + (float)Math.Round(innerFrameBorderRect.Width);      var yOffset = buttonInnerShadowOffset.Height;      context.SetShadowWithColor(          new SizeF(xOffset + (xOffset >= 0 ? 0.1f : -0.1f)' yOffset + (yOffset >= 0 ? 0.1f : -0.1f))'          buttonInnerShadowBlurRadius'          buttonInnerShadow);        innerFramePath.AddClip();      var transform = CGAffineTransform.MakeTranslation(-(float)Math.Round(innerFrameBorderRect.Width)' 0);      innerFrameNegativePath.ApplyTransform(transform);      UIColor.Gray.SetFill();      innerFrameNegativePath.Fill();  }  context.RestoreState();    context.RestoreState();    UIColor.Black.SetStroke();  innerFramePath.LineWidth = 1;  innerFramePath.Stroke();      //// Rounded Rectangle Drawing  var roundedRectanglePath = UIBezierPath.FromRoundedRect(new RectangleF(8' 6' 109' 9)' 4);  context.SaveState();  roundedRectanglePath.AddClip();  context.DrawLinearGradient(glossyGradient' new PointF(62.5f' 6)' new PointF(62.5f' 15)' 0);  context.RestoreState();        //// Text Drawing  var textRect = new RectangleF(18' 6' 90' 28);  context.SaveState();  context.SetShadowWithColor(textShadowOffset' textShadowBlurRadius' textShadow);  glossyColorUp.SetFill();    				// Use default button-drawn text  				//new NSString(textContent).DrawString(textRect' font' UILineBreakMode.WordWrap' UITextAlignment.Center);  context.RestoreState();      		    			// ------------- END PAINTCODE -------------    				  				  				  			}
Magic Number,PaintCode,GlossyButton,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\GlossyButton\GlossyButton.cs,Draw,The following statement contains a magic number: using (var colorSpace = CGColorSpace.CreateDeviceRGB ()) {  				  				  				//// Abstracted Graphic Attributes  				var textContent = this.Title (UIControlState.Normal); //"STOP";			  				var font = UIFont.SystemFontOfSize (18);  				// ------------- START PAINTCODE -------------        //// Color Declarations  				UIColor frameColorTop = UIColor.FromRGBA (0.20f' 0.20f' 0.20f' 1.00f);  				UIColor frameShadowColor = UIColor.FromRGBA (1.00f' 1.00f' 1.00f' 0.40f);    				UIColor glossyColorBottom = UIColor.FromRGBA (  					(buttonColorRGBA [0] * 0.6f + 0.4f)'  					(buttonColorRGBA [1] * 0.6f + 0.4f)'  					(buttonColorRGBA [2] * 0.6f + 0.4f)'  					(buttonColorRGBA [3] * 0.6f + 0.4f)  				);  				UIColor glossyColorUp = UIColor.FromRGBA (  					(buttonColorRGBA [0] * 0.2f + 0.8f)'  					(buttonColorRGBA [1] * 0.2f + 0.8f)'  					(buttonColorRGBA [2] * 0.2f + 0.8f)'  					(buttonColorRGBA [3] * 0.2f + 0.8f)  				);    //// Gradient Declarations  				var glossyGradientColors = new CGColor [] {glossyColorUp.CGColor' glossyColorBottom.CGColor};  				var glossyGradientLocations = new float [] {0' 1};  				var glossyGradient = new CGGradient (colorSpace' glossyGradientColors' glossyGradientLocations);    //// Shadow Declarations  				var frameInnerShadow = frameShadowColor.CGColor;  				var frameInnerShadowOffset = new SizeF (0' -0);  				var frameInnerShadowBlurRadius = 3;  				var buttonInnerShadow = UIColor.Black.CGColor;  				var buttonInnerShadowOffset = new SizeF (0' -0);  				var buttonInnerShadowBlurRadius = 12;  				var textShadow = UIColor.Black.CGColor;  				var textShadowOffset = new SizeF (0' -0);  				var textShadowBlurRadius = 1;  				var buttonShadow = UIColor.Black.CGColor;    				var buttonShadowOffset = new SizeF (0' isPressed ? 0 : 2);		// ADDED this code after PaintCode  				var buttonShadowBlurRadius = isPressed ? 2 : 3;					// ADDED this code after PaintCode          //// outerFrame Drawing  var outerFramePath = UIBezierPath.FromRoundedRect(new RectangleF(2.5f' 1.5f' 120' 32)' 8);  context.SaveState();  context.SetShadowWithColor(buttonShadowOffset' buttonShadowBlurRadius' buttonShadow);  frameColorTop.SetFill();  outerFramePath.Fill();  context.RestoreState();    UIColor.Black.SetStroke();  outerFramePath.LineWidth = 1;  outerFramePath.Stroke();      //// innerFrame Drawing  var innerFramePath = UIBezierPath.FromRoundedRect(new RectangleF(5.5f' 4.5f' 114' 26)' 5);  context.SaveState();  context.SetShadowWithColor(frameInnerShadowOffset' frameInnerShadowBlurRadius' frameInnerShadow);  buttonColor.SetFill();  innerFramePath.Fill();    ////// innerFrame Inner Shadow  var innerFrameBorderRect = innerFramePath.Bounds;  innerFrameBorderRect.Inflate(buttonInnerShadowBlurRadius' buttonInnerShadowBlurRadius);  innerFrameBorderRect.Offset(-buttonInnerShadowOffset.Width' -buttonInnerShadowOffset.Height);  innerFrameBorderRect = RectangleF.Union(innerFrameBorderRect' innerFramePath.Bounds);  innerFrameBorderRect.Inflate(1' 1);    var innerFrameNegativePath = UIBezierPath.FromRect(innerFrameBorderRect);  innerFrameNegativePath.AppendPath(innerFramePath);  innerFrameNegativePath.UsesEvenOddFillRule = true;    context.SaveState();  {      var xOffset = buttonInnerShadowOffset.Width + (float)Math.Round(innerFrameBorderRect.Width);      var yOffset = buttonInnerShadowOffset.Height;      context.SetShadowWithColor(          new SizeF(xOffset + (xOffset >= 0 ? 0.1f : -0.1f)' yOffset + (yOffset >= 0 ? 0.1f : -0.1f))'          buttonInnerShadowBlurRadius'          buttonInnerShadow);        innerFramePath.AddClip();      var transform = CGAffineTransform.MakeTranslation(-(float)Math.Round(innerFrameBorderRect.Width)' 0);      innerFrameNegativePath.ApplyTransform(transform);      UIColor.Gray.SetFill();      innerFrameNegativePath.Fill();  }  context.RestoreState();    context.RestoreState();    UIColor.Black.SetStroke();  innerFramePath.LineWidth = 1;  innerFramePath.Stroke();      //// Rounded Rectangle Drawing  var roundedRectanglePath = UIBezierPath.FromRoundedRect(new RectangleF(8' 6' 109' 9)' 4);  context.SaveState();  roundedRectanglePath.AddClip();  context.DrawLinearGradient(glossyGradient' new PointF(62.5f' 6)' new PointF(62.5f' 15)' 0);  context.RestoreState();        //// Text Drawing  var textRect = new RectangleF(18' 6' 90' 28);  context.SaveState();  context.SetShadowWithColor(textShadowOffset' textShadowBlurRadius' textShadow);  glossyColorUp.SetFill();    				// Use default button-drawn text  				//new NSString(textContent).DrawString(textRect' font' UILineBreakMode.WordWrap' UITextAlignment.Center);  context.RestoreState();      		    			// ------------- END PAINTCODE -------------    				  				  				  			}
Magic Number,PaintCode,GlossyButton,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\GlossyButton\GlossyButton.cs,Draw,The following statement contains a magic number: using (var colorSpace = CGColorSpace.CreateDeviceRGB ()) {  				  				  				//// Abstracted Graphic Attributes  				var textContent = this.Title (UIControlState.Normal); //"STOP";			  				var font = UIFont.SystemFontOfSize (18);  				// ------------- START PAINTCODE -------------        //// Color Declarations  				UIColor frameColorTop = UIColor.FromRGBA (0.20f' 0.20f' 0.20f' 1.00f);  				UIColor frameShadowColor = UIColor.FromRGBA (1.00f' 1.00f' 1.00f' 0.40f);    				UIColor glossyColorBottom = UIColor.FromRGBA (  					(buttonColorRGBA [0] * 0.6f + 0.4f)'  					(buttonColorRGBA [1] * 0.6f + 0.4f)'  					(buttonColorRGBA [2] * 0.6f + 0.4f)'  					(buttonColorRGBA [3] * 0.6f + 0.4f)  				);  				UIColor glossyColorUp = UIColor.FromRGBA (  					(buttonColorRGBA [0] * 0.2f + 0.8f)'  					(buttonColorRGBA [1] * 0.2f + 0.8f)'  					(buttonColorRGBA [2] * 0.2f + 0.8f)'  					(buttonColorRGBA [3] * 0.2f + 0.8f)  				);    //// Gradient Declarations  				var glossyGradientColors = new CGColor [] {glossyColorUp.CGColor' glossyColorBottom.CGColor};  				var glossyGradientLocations = new float [] {0' 1};  				var glossyGradient = new CGGradient (colorSpace' glossyGradientColors' glossyGradientLocations);    //// Shadow Declarations  				var frameInnerShadow = frameShadowColor.CGColor;  				var frameInnerShadowOffset = new SizeF (0' -0);  				var frameInnerShadowBlurRadius = 3;  				var buttonInnerShadow = UIColor.Black.CGColor;  				var buttonInnerShadowOffset = new SizeF (0' -0);  				var buttonInnerShadowBlurRadius = 12;  				var textShadow = UIColor.Black.CGColor;  				var textShadowOffset = new SizeF (0' -0);  				var textShadowBlurRadius = 1;  				var buttonShadow = UIColor.Black.CGColor;    				var buttonShadowOffset = new SizeF (0' isPressed ? 0 : 2);		// ADDED this code after PaintCode  				var buttonShadowBlurRadius = isPressed ? 2 : 3;					// ADDED this code after PaintCode          //// outerFrame Drawing  var outerFramePath = UIBezierPath.FromRoundedRect(new RectangleF(2.5f' 1.5f' 120' 32)' 8);  context.SaveState();  context.SetShadowWithColor(buttonShadowOffset' buttonShadowBlurRadius' buttonShadow);  frameColorTop.SetFill();  outerFramePath.Fill();  context.RestoreState();    UIColor.Black.SetStroke();  outerFramePath.LineWidth = 1;  outerFramePath.Stroke();      //// innerFrame Drawing  var innerFramePath = UIBezierPath.FromRoundedRect(new RectangleF(5.5f' 4.5f' 114' 26)' 5);  context.SaveState();  context.SetShadowWithColor(frameInnerShadowOffset' frameInnerShadowBlurRadius' frameInnerShadow);  buttonColor.SetFill();  innerFramePath.Fill();    ////// innerFrame Inner Shadow  var innerFrameBorderRect = innerFramePath.Bounds;  innerFrameBorderRect.Inflate(buttonInnerShadowBlurRadius' buttonInnerShadowBlurRadius);  innerFrameBorderRect.Offset(-buttonInnerShadowOffset.Width' -buttonInnerShadowOffset.Height);  innerFrameBorderRect = RectangleF.Union(innerFrameBorderRect' innerFramePath.Bounds);  innerFrameBorderRect.Inflate(1' 1);    var innerFrameNegativePath = UIBezierPath.FromRect(innerFrameBorderRect);  innerFrameNegativePath.AppendPath(innerFramePath);  innerFrameNegativePath.UsesEvenOddFillRule = true;    context.SaveState();  {      var xOffset = buttonInnerShadowOffset.Width + (float)Math.Round(innerFrameBorderRect.Width);      var yOffset = buttonInnerShadowOffset.Height;      context.SetShadowWithColor(          new SizeF(xOffset + (xOffset >= 0 ? 0.1f : -0.1f)' yOffset + (yOffset >= 0 ? 0.1f : -0.1f))'          buttonInnerShadowBlurRadius'          buttonInnerShadow);        innerFramePath.AddClip();      var transform = CGAffineTransform.MakeTranslation(-(float)Math.Round(innerFrameBorderRect.Width)' 0);      innerFrameNegativePath.ApplyTransform(transform);      UIColor.Gray.SetFill();      innerFrameNegativePath.Fill();  }  context.RestoreState();    context.RestoreState();    UIColor.Black.SetStroke();  innerFramePath.LineWidth = 1;  innerFramePath.Stroke();      //// Rounded Rectangle Drawing  var roundedRectanglePath = UIBezierPath.FromRoundedRect(new RectangleF(8' 6' 109' 9)' 4);  context.SaveState();  roundedRectanglePath.AddClip();  context.DrawLinearGradient(glossyGradient' new PointF(62.5f' 6)' new PointF(62.5f' 15)' 0);  context.RestoreState();        //// Text Drawing  var textRect = new RectangleF(18' 6' 90' 28);  context.SaveState();  context.SetShadowWithColor(textShadowOffset' textShadowBlurRadius' textShadow);  glossyColorUp.SetFill();    				// Use default button-drawn text  				//new NSString(textContent).DrawString(textRect' font' UILineBreakMode.WordWrap' UITextAlignment.Center);  context.RestoreState();      		    			// ------------- END PAINTCODE -------------    				  				  				  			}
Magic Number,PaintCode,GlossyButton,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\GlossyButton\GlossyButton.cs,Draw,The following statement contains a magic number: using (var colorSpace = CGColorSpace.CreateDeviceRGB ()) {  				  				  				//// Abstracted Graphic Attributes  				var textContent = this.Title (UIControlState.Normal); //"STOP";			  				var font = UIFont.SystemFontOfSize (18);  				// ------------- START PAINTCODE -------------        //// Color Declarations  				UIColor frameColorTop = UIColor.FromRGBA (0.20f' 0.20f' 0.20f' 1.00f);  				UIColor frameShadowColor = UIColor.FromRGBA (1.00f' 1.00f' 1.00f' 0.40f);    				UIColor glossyColorBottom = UIColor.FromRGBA (  					(buttonColorRGBA [0] * 0.6f + 0.4f)'  					(buttonColorRGBA [1] * 0.6f + 0.4f)'  					(buttonColorRGBA [2] * 0.6f + 0.4f)'  					(buttonColorRGBA [3] * 0.6f + 0.4f)  				);  				UIColor glossyColorUp = UIColor.FromRGBA (  					(buttonColorRGBA [0] * 0.2f + 0.8f)'  					(buttonColorRGBA [1] * 0.2f + 0.8f)'  					(buttonColorRGBA [2] * 0.2f + 0.8f)'  					(buttonColorRGBA [3] * 0.2f + 0.8f)  				);    //// Gradient Declarations  				var glossyGradientColors = new CGColor [] {glossyColorUp.CGColor' glossyColorBottom.CGColor};  				var glossyGradientLocations = new float [] {0' 1};  				var glossyGradient = new CGGradient (colorSpace' glossyGradientColors' glossyGradientLocations);    //// Shadow Declarations  				var frameInnerShadow = frameShadowColor.CGColor;  				var frameInnerShadowOffset = new SizeF (0' -0);  				var frameInnerShadowBlurRadius = 3;  				var buttonInnerShadow = UIColor.Black.CGColor;  				var buttonInnerShadowOffset = new SizeF (0' -0);  				var buttonInnerShadowBlurRadius = 12;  				var textShadow = UIColor.Black.CGColor;  				var textShadowOffset = new SizeF (0' -0);  				var textShadowBlurRadius = 1;  				var buttonShadow = UIColor.Black.CGColor;    				var buttonShadowOffset = new SizeF (0' isPressed ? 0 : 2);		// ADDED this code after PaintCode  				var buttonShadowBlurRadius = isPressed ? 2 : 3;					// ADDED this code after PaintCode          //// outerFrame Drawing  var outerFramePath = UIBezierPath.FromRoundedRect(new RectangleF(2.5f' 1.5f' 120' 32)' 8);  context.SaveState();  context.SetShadowWithColor(buttonShadowOffset' buttonShadowBlurRadius' buttonShadow);  frameColorTop.SetFill();  outerFramePath.Fill();  context.RestoreState();    UIColor.Black.SetStroke();  outerFramePath.LineWidth = 1;  outerFramePath.Stroke();      //// innerFrame Drawing  var innerFramePath = UIBezierPath.FromRoundedRect(new RectangleF(5.5f' 4.5f' 114' 26)' 5);  context.SaveState();  context.SetShadowWithColor(frameInnerShadowOffset' frameInnerShadowBlurRadius' frameInnerShadow);  buttonColor.SetFill();  innerFramePath.Fill();    ////// innerFrame Inner Shadow  var innerFrameBorderRect = innerFramePath.Bounds;  innerFrameBorderRect.Inflate(buttonInnerShadowBlurRadius' buttonInnerShadowBlurRadius);  innerFrameBorderRect.Offset(-buttonInnerShadowOffset.Width' -buttonInnerShadowOffset.Height);  innerFrameBorderRect = RectangleF.Union(innerFrameBorderRect' innerFramePath.Bounds);  innerFrameBorderRect.Inflate(1' 1);    var innerFrameNegativePath = UIBezierPath.FromRect(innerFrameBorderRect);  innerFrameNegativePath.AppendPath(innerFramePath);  innerFrameNegativePath.UsesEvenOddFillRule = true;    context.SaveState();  {      var xOffset = buttonInnerShadowOffset.Width + (float)Math.Round(innerFrameBorderRect.Width);      var yOffset = buttonInnerShadowOffset.Height;      context.SetShadowWithColor(          new SizeF(xOffset + (xOffset >= 0 ? 0.1f : -0.1f)' yOffset + (yOffset >= 0 ? 0.1f : -0.1f))'          buttonInnerShadowBlurRadius'          buttonInnerShadow);        innerFramePath.AddClip();      var transform = CGAffineTransform.MakeTranslation(-(float)Math.Round(innerFrameBorderRect.Width)' 0);      innerFrameNegativePath.ApplyTransform(transform);      UIColor.Gray.SetFill();      innerFrameNegativePath.Fill();  }  context.RestoreState();    context.RestoreState();    UIColor.Black.SetStroke();  innerFramePath.LineWidth = 1;  innerFramePath.Stroke();      //// Rounded Rectangle Drawing  var roundedRectanglePath = UIBezierPath.FromRoundedRect(new RectangleF(8' 6' 109' 9)' 4);  context.SaveState();  roundedRectanglePath.AddClip();  context.DrawLinearGradient(glossyGradient' new PointF(62.5f' 6)' new PointF(62.5f' 15)' 0);  context.RestoreState();        //// Text Drawing  var textRect = new RectangleF(18' 6' 90' 28);  context.SaveState();  context.SetShadowWithColor(textShadowOffset' textShadowBlurRadius' textShadow);  glossyColorUp.SetFill();    				// Use default button-drawn text  				//new NSString(textContent).DrawString(textRect' font' UILineBreakMode.WordWrap' UITextAlignment.Center);  context.RestoreState();      		    			// ------------- END PAINTCODE -------------    				  				  				  			}
Magic Number,PaintCode,GlossyButton,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\GlossyButton\GlossyButton.cs,Draw,The following statement contains a magic number: using (var colorSpace = CGColorSpace.CreateDeviceRGB ()) {  				  				  				//// Abstracted Graphic Attributes  				var textContent = this.Title (UIControlState.Normal); //"STOP";			  				var font = UIFont.SystemFontOfSize (18);  				// ------------- START PAINTCODE -------------        //// Color Declarations  				UIColor frameColorTop = UIColor.FromRGBA (0.20f' 0.20f' 0.20f' 1.00f);  				UIColor frameShadowColor = UIColor.FromRGBA (1.00f' 1.00f' 1.00f' 0.40f);    				UIColor glossyColorBottom = UIColor.FromRGBA (  					(buttonColorRGBA [0] * 0.6f + 0.4f)'  					(buttonColorRGBA [1] * 0.6f + 0.4f)'  					(buttonColorRGBA [2] * 0.6f + 0.4f)'  					(buttonColorRGBA [3] * 0.6f + 0.4f)  				);  				UIColor glossyColorUp = UIColor.FromRGBA (  					(buttonColorRGBA [0] * 0.2f + 0.8f)'  					(buttonColorRGBA [1] * 0.2f + 0.8f)'  					(buttonColorRGBA [2] * 0.2f + 0.8f)'  					(buttonColorRGBA [3] * 0.2f + 0.8f)  				);    //// Gradient Declarations  				var glossyGradientColors = new CGColor [] {glossyColorUp.CGColor' glossyColorBottom.CGColor};  				var glossyGradientLocations = new float [] {0' 1};  				var glossyGradient = new CGGradient (colorSpace' glossyGradientColors' glossyGradientLocations);    //// Shadow Declarations  				var frameInnerShadow = frameShadowColor.CGColor;  				var frameInnerShadowOffset = new SizeF (0' -0);  				var frameInnerShadowBlurRadius = 3;  				var buttonInnerShadow = UIColor.Black.CGColor;  				var buttonInnerShadowOffset = new SizeF (0' -0);  				var buttonInnerShadowBlurRadius = 12;  				var textShadow = UIColor.Black.CGColor;  				var textShadowOffset = new SizeF (0' -0);  				var textShadowBlurRadius = 1;  				var buttonShadow = UIColor.Black.CGColor;    				var buttonShadowOffset = new SizeF (0' isPressed ? 0 : 2);		// ADDED this code after PaintCode  				var buttonShadowBlurRadius = isPressed ? 2 : 3;					// ADDED this code after PaintCode          //// outerFrame Drawing  var outerFramePath = UIBezierPath.FromRoundedRect(new RectangleF(2.5f' 1.5f' 120' 32)' 8);  context.SaveState();  context.SetShadowWithColor(buttonShadowOffset' buttonShadowBlurRadius' buttonShadow);  frameColorTop.SetFill();  outerFramePath.Fill();  context.RestoreState();    UIColor.Black.SetStroke();  outerFramePath.LineWidth = 1;  outerFramePath.Stroke();      //// innerFrame Drawing  var innerFramePath = UIBezierPath.FromRoundedRect(new RectangleF(5.5f' 4.5f' 114' 26)' 5);  context.SaveState();  context.SetShadowWithColor(frameInnerShadowOffset' frameInnerShadowBlurRadius' frameInnerShadow);  buttonColor.SetFill();  innerFramePath.Fill();    ////// innerFrame Inner Shadow  var innerFrameBorderRect = innerFramePath.Bounds;  innerFrameBorderRect.Inflate(buttonInnerShadowBlurRadius' buttonInnerShadowBlurRadius);  innerFrameBorderRect.Offset(-buttonInnerShadowOffset.Width' -buttonInnerShadowOffset.Height);  innerFrameBorderRect = RectangleF.Union(innerFrameBorderRect' innerFramePath.Bounds);  innerFrameBorderRect.Inflate(1' 1);    var innerFrameNegativePath = UIBezierPath.FromRect(innerFrameBorderRect);  innerFrameNegativePath.AppendPath(innerFramePath);  innerFrameNegativePath.UsesEvenOddFillRule = true;    context.SaveState();  {      var xOffset = buttonInnerShadowOffset.Width + (float)Math.Round(innerFrameBorderRect.Width);      var yOffset = buttonInnerShadowOffset.Height;      context.SetShadowWithColor(          new SizeF(xOffset + (xOffset >= 0 ? 0.1f : -0.1f)' yOffset + (yOffset >= 0 ? 0.1f : -0.1f))'          buttonInnerShadowBlurRadius'          buttonInnerShadow);        innerFramePath.AddClip();      var transform = CGAffineTransform.MakeTranslation(-(float)Math.Round(innerFrameBorderRect.Width)' 0);      innerFrameNegativePath.ApplyTransform(transform);      UIColor.Gray.SetFill();      innerFrameNegativePath.Fill();  }  context.RestoreState();    context.RestoreState();    UIColor.Black.SetStroke();  innerFramePath.LineWidth = 1;  innerFramePath.Stroke();      //// Rounded Rectangle Drawing  var roundedRectanglePath = UIBezierPath.FromRoundedRect(new RectangleF(8' 6' 109' 9)' 4);  context.SaveState();  roundedRectanglePath.AddClip();  context.DrawLinearGradient(glossyGradient' new PointF(62.5f' 6)' new PointF(62.5f' 15)' 0);  context.RestoreState();        //// Text Drawing  var textRect = new RectangleF(18' 6' 90' 28);  context.SaveState();  context.SetShadowWithColor(textShadowOffset' textShadowBlurRadius' textShadow);  glossyColorUp.SetFill();    				// Use default button-drawn text  				//new NSString(textContent).DrawString(textRect' font' UILineBreakMode.WordWrap' UITextAlignment.Center);  context.RestoreState();      		    			// ------------- END PAINTCODE -------------    				  				  				  			}
Magic Number,PaintCode,GlossyButton,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\GlossyButton\GlossyButton.cs,Draw,The following statement contains a magic number: using (var colorSpace = CGColorSpace.CreateDeviceRGB ()) {  				  				  				//// Abstracted Graphic Attributes  				var textContent = this.Title (UIControlState.Normal); //"STOP";			  				var font = UIFont.SystemFontOfSize (18);  				// ------------- START PAINTCODE -------------        //// Color Declarations  				UIColor frameColorTop = UIColor.FromRGBA (0.20f' 0.20f' 0.20f' 1.00f);  				UIColor frameShadowColor = UIColor.FromRGBA (1.00f' 1.00f' 1.00f' 0.40f);    				UIColor glossyColorBottom = UIColor.FromRGBA (  					(buttonColorRGBA [0] * 0.6f + 0.4f)'  					(buttonColorRGBA [1] * 0.6f + 0.4f)'  					(buttonColorRGBA [2] * 0.6f + 0.4f)'  					(buttonColorRGBA [3] * 0.6f + 0.4f)  				);  				UIColor glossyColorUp = UIColor.FromRGBA (  					(buttonColorRGBA [0] * 0.2f + 0.8f)'  					(buttonColorRGBA [1] * 0.2f + 0.8f)'  					(buttonColorRGBA [2] * 0.2f + 0.8f)'  					(buttonColorRGBA [3] * 0.2f + 0.8f)  				);    //// Gradient Declarations  				var glossyGradientColors = new CGColor [] {glossyColorUp.CGColor' glossyColorBottom.CGColor};  				var glossyGradientLocations = new float [] {0' 1};  				var glossyGradient = new CGGradient (colorSpace' glossyGradientColors' glossyGradientLocations);    //// Shadow Declarations  				var frameInnerShadow = frameShadowColor.CGColor;  				var frameInnerShadowOffset = new SizeF (0' -0);  				var frameInnerShadowBlurRadius = 3;  				var buttonInnerShadow = UIColor.Black.CGColor;  				var buttonInnerShadowOffset = new SizeF (0' -0);  				var buttonInnerShadowBlurRadius = 12;  				var textShadow = UIColor.Black.CGColor;  				var textShadowOffset = new SizeF (0' -0);  				var textShadowBlurRadius = 1;  				var buttonShadow = UIColor.Black.CGColor;    				var buttonShadowOffset = new SizeF (0' isPressed ? 0 : 2);		// ADDED this code after PaintCode  				var buttonShadowBlurRadius = isPressed ? 2 : 3;					// ADDED this code after PaintCode          //// outerFrame Drawing  var outerFramePath = UIBezierPath.FromRoundedRect(new RectangleF(2.5f' 1.5f' 120' 32)' 8);  context.SaveState();  context.SetShadowWithColor(buttonShadowOffset' buttonShadowBlurRadius' buttonShadow);  frameColorTop.SetFill();  outerFramePath.Fill();  context.RestoreState();    UIColor.Black.SetStroke();  outerFramePath.LineWidth = 1;  outerFramePath.Stroke();      //// innerFrame Drawing  var innerFramePath = UIBezierPath.FromRoundedRect(new RectangleF(5.5f' 4.5f' 114' 26)' 5);  context.SaveState();  context.SetShadowWithColor(frameInnerShadowOffset' frameInnerShadowBlurRadius' frameInnerShadow);  buttonColor.SetFill();  innerFramePath.Fill();    ////// innerFrame Inner Shadow  var innerFrameBorderRect = innerFramePath.Bounds;  innerFrameBorderRect.Inflate(buttonInnerShadowBlurRadius' buttonInnerShadowBlurRadius);  innerFrameBorderRect.Offset(-buttonInnerShadowOffset.Width' -buttonInnerShadowOffset.Height);  innerFrameBorderRect = RectangleF.Union(innerFrameBorderRect' innerFramePath.Bounds);  innerFrameBorderRect.Inflate(1' 1);    var innerFrameNegativePath = UIBezierPath.FromRect(innerFrameBorderRect);  innerFrameNegativePath.AppendPath(innerFramePath);  innerFrameNegativePath.UsesEvenOddFillRule = true;    context.SaveState();  {      var xOffset = buttonInnerShadowOffset.Width + (float)Math.Round(innerFrameBorderRect.Width);      var yOffset = buttonInnerShadowOffset.Height;      context.SetShadowWithColor(          new SizeF(xOffset + (xOffset >= 0 ? 0.1f : -0.1f)' yOffset + (yOffset >= 0 ? 0.1f : -0.1f))'          buttonInnerShadowBlurRadius'          buttonInnerShadow);        innerFramePath.AddClip();      var transform = CGAffineTransform.MakeTranslation(-(float)Math.Round(innerFrameBorderRect.Width)' 0);      innerFrameNegativePath.ApplyTransform(transform);      UIColor.Gray.SetFill();      innerFrameNegativePath.Fill();  }  context.RestoreState();    context.RestoreState();    UIColor.Black.SetStroke();  innerFramePath.LineWidth = 1;  innerFramePath.Stroke();      //// Rounded Rectangle Drawing  var roundedRectanglePath = UIBezierPath.FromRoundedRect(new RectangleF(8' 6' 109' 9)' 4);  context.SaveState();  roundedRectanglePath.AddClip();  context.DrawLinearGradient(glossyGradient' new PointF(62.5f' 6)' new PointF(62.5f' 15)' 0);  context.RestoreState();        //// Text Drawing  var textRect = new RectangleF(18' 6' 90' 28);  context.SaveState();  context.SetShadowWithColor(textShadowOffset' textShadowBlurRadius' textShadow);  glossyColorUp.SetFill();    				// Use default button-drawn text  				//new NSString(textContent).DrawString(textRect' font' UILineBreakMode.WordWrap' UITextAlignment.Center);  context.RestoreState();      		    			// ------------- END PAINTCODE -------------    				  				  				  			}
Magic Number,PaintCode,GlossyButton,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\GlossyButton\GlossyButton.cs,Draw,The following statement contains a magic number: using (var colorSpace = CGColorSpace.CreateDeviceRGB ()) {  				  				  				//// Abstracted Graphic Attributes  				var textContent = this.Title (UIControlState.Normal); //"STOP";			  				var font = UIFont.SystemFontOfSize (18);  				// ------------- START PAINTCODE -------------        //// Color Declarations  				UIColor frameColorTop = UIColor.FromRGBA (0.20f' 0.20f' 0.20f' 1.00f);  				UIColor frameShadowColor = UIColor.FromRGBA (1.00f' 1.00f' 1.00f' 0.40f);    				UIColor glossyColorBottom = UIColor.FromRGBA (  					(buttonColorRGBA [0] * 0.6f + 0.4f)'  					(buttonColorRGBA [1] * 0.6f + 0.4f)'  					(buttonColorRGBA [2] * 0.6f + 0.4f)'  					(buttonColorRGBA [3] * 0.6f + 0.4f)  				);  				UIColor glossyColorUp = UIColor.FromRGBA (  					(buttonColorRGBA [0] * 0.2f + 0.8f)'  					(buttonColorRGBA [1] * 0.2f + 0.8f)'  					(buttonColorRGBA [2] * 0.2f + 0.8f)'  					(buttonColorRGBA [3] * 0.2f + 0.8f)  				);    //// Gradient Declarations  				var glossyGradientColors = new CGColor [] {glossyColorUp.CGColor' glossyColorBottom.CGColor};  				var glossyGradientLocations = new float [] {0' 1};  				var glossyGradient = new CGGradient (colorSpace' glossyGradientColors' glossyGradientLocations);    //// Shadow Declarations  				var frameInnerShadow = frameShadowColor.CGColor;  				var frameInnerShadowOffset = new SizeF (0' -0);  				var frameInnerShadowBlurRadius = 3;  				var buttonInnerShadow = UIColor.Black.CGColor;  				var buttonInnerShadowOffset = new SizeF (0' -0);  				var buttonInnerShadowBlurRadius = 12;  				var textShadow = UIColor.Black.CGColor;  				var textShadowOffset = new SizeF (0' -0);  				var textShadowBlurRadius = 1;  				var buttonShadow = UIColor.Black.CGColor;    				var buttonShadowOffset = new SizeF (0' isPressed ? 0 : 2);		// ADDED this code after PaintCode  				var buttonShadowBlurRadius = isPressed ? 2 : 3;					// ADDED this code after PaintCode          //// outerFrame Drawing  var outerFramePath = UIBezierPath.FromRoundedRect(new RectangleF(2.5f' 1.5f' 120' 32)' 8);  context.SaveState();  context.SetShadowWithColor(buttonShadowOffset' buttonShadowBlurRadius' buttonShadow);  frameColorTop.SetFill();  outerFramePath.Fill();  context.RestoreState();    UIColor.Black.SetStroke();  outerFramePath.LineWidth = 1;  outerFramePath.Stroke();      //// innerFrame Drawing  var innerFramePath = UIBezierPath.FromRoundedRect(new RectangleF(5.5f' 4.5f' 114' 26)' 5);  context.SaveState();  context.SetShadowWithColor(frameInnerShadowOffset' frameInnerShadowBlurRadius' frameInnerShadow);  buttonColor.SetFill();  innerFramePath.Fill();    ////// innerFrame Inner Shadow  var innerFrameBorderRect = innerFramePath.Bounds;  innerFrameBorderRect.Inflate(buttonInnerShadowBlurRadius' buttonInnerShadowBlurRadius);  innerFrameBorderRect.Offset(-buttonInnerShadowOffset.Width' -buttonInnerShadowOffset.Height);  innerFrameBorderRect = RectangleF.Union(innerFrameBorderRect' innerFramePath.Bounds);  innerFrameBorderRect.Inflate(1' 1);    var innerFrameNegativePath = UIBezierPath.FromRect(innerFrameBorderRect);  innerFrameNegativePath.AppendPath(innerFramePath);  innerFrameNegativePath.UsesEvenOddFillRule = true;    context.SaveState();  {      var xOffset = buttonInnerShadowOffset.Width + (float)Math.Round(innerFrameBorderRect.Width);      var yOffset = buttonInnerShadowOffset.Height;      context.SetShadowWithColor(          new SizeF(xOffset + (xOffset >= 0 ? 0.1f : -0.1f)' yOffset + (yOffset >= 0 ? 0.1f : -0.1f))'          buttonInnerShadowBlurRadius'          buttonInnerShadow);        innerFramePath.AddClip();      var transform = CGAffineTransform.MakeTranslation(-(float)Math.Round(innerFrameBorderRect.Width)' 0);      innerFrameNegativePath.ApplyTransform(transform);      UIColor.Gray.SetFill();      innerFrameNegativePath.Fill();  }  context.RestoreState();    context.RestoreState();    UIColor.Black.SetStroke();  innerFramePath.LineWidth = 1;  innerFramePath.Stroke();      //// Rounded Rectangle Drawing  var roundedRectanglePath = UIBezierPath.FromRoundedRect(new RectangleF(8' 6' 109' 9)' 4);  context.SaveState();  roundedRectanglePath.AddClip();  context.DrawLinearGradient(glossyGradient' new PointF(62.5f' 6)' new PointF(62.5f' 15)' 0);  context.RestoreState();        //// Text Drawing  var textRect = new RectangleF(18' 6' 90' 28);  context.SaveState();  context.SetShadowWithColor(textShadowOffset' textShadowBlurRadius' textShadow);  glossyColorUp.SetFill();    				// Use default button-drawn text  				//new NSString(textContent).DrawString(textRect' font' UILineBreakMode.WordWrap' UITextAlignment.Center);  context.RestoreState();      		    			// ------------- END PAINTCODE -------------    				  				  				  			}
Magic Number,PaintCode,GlossyButton,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\GlossyButton\GlossyButton.cs,Draw,The following statement contains a magic number: using (var colorSpace = CGColorSpace.CreateDeviceRGB ()) {  				  				  				//// Abstracted Graphic Attributes  				var textContent = this.Title (UIControlState.Normal); //"STOP";			  				var font = UIFont.SystemFontOfSize (18);  				// ------------- START PAINTCODE -------------        //// Color Declarations  				UIColor frameColorTop = UIColor.FromRGBA (0.20f' 0.20f' 0.20f' 1.00f);  				UIColor frameShadowColor = UIColor.FromRGBA (1.00f' 1.00f' 1.00f' 0.40f);    				UIColor glossyColorBottom = UIColor.FromRGBA (  					(buttonColorRGBA [0] * 0.6f + 0.4f)'  					(buttonColorRGBA [1] * 0.6f + 0.4f)'  					(buttonColorRGBA [2] * 0.6f + 0.4f)'  					(buttonColorRGBA [3] * 0.6f + 0.4f)  				);  				UIColor glossyColorUp = UIColor.FromRGBA (  					(buttonColorRGBA [0] * 0.2f + 0.8f)'  					(buttonColorRGBA [1] * 0.2f + 0.8f)'  					(buttonColorRGBA [2] * 0.2f + 0.8f)'  					(buttonColorRGBA [3] * 0.2f + 0.8f)  				);    //// Gradient Declarations  				var glossyGradientColors = new CGColor [] {glossyColorUp.CGColor' glossyColorBottom.CGColor};  				var glossyGradientLocations = new float [] {0' 1};  				var glossyGradient = new CGGradient (colorSpace' glossyGradientColors' glossyGradientLocations);    //// Shadow Declarations  				var frameInnerShadow = frameShadowColor.CGColor;  				var frameInnerShadowOffset = new SizeF (0' -0);  				var frameInnerShadowBlurRadius = 3;  				var buttonInnerShadow = UIColor.Black.CGColor;  				var buttonInnerShadowOffset = new SizeF (0' -0);  				var buttonInnerShadowBlurRadius = 12;  				var textShadow = UIColor.Black.CGColor;  				var textShadowOffset = new SizeF (0' -0);  				var textShadowBlurRadius = 1;  				var buttonShadow = UIColor.Black.CGColor;    				var buttonShadowOffset = new SizeF (0' isPressed ? 0 : 2);		// ADDED this code after PaintCode  				var buttonShadowBlurRadius = isPressed ? 2 : 3;					// ADDED this code after PaintCode          //// outerFrame Drawing  var outerFramePath = UIBezierPath.FromRoundedRect(new RectangleF(2.5f' 1.5f' 120' 32)' 8);  context.SaveState();  context.SetShadowWithColor(buttonShadowOffset' buttonShadowBlurRadius' buttonShadow);  frameColorTop.SetFill();  outerFramePath.Fill();  context.RestoreState();    UIColor.Black.SetStroke();  outerFramePath.LineWidth = 1;  outerFramePath.Stroke();      //// innerFrame Drawing  var innerFramePath = UIBezierPath.FromRoundedRect(new RectangleF(5.5f' 4.5f' 114' 26)' 5);  context.SaveState();  context.SetShadowWithColor(frameInnerShadowOffset' frameInnerShadowBlurRadius' frameInnerShadow);  buttonColor.SetFill();  innerFramePath.Fill();    ////// innerFrame Inner Shadow  var innerFrameBorderRect = innerFramePath.Bounds;  innerFrameBorderRect.Inflate(buttonInnerShadowBlurRadius' buttonInnerShadowBlurRadius);  innerFrameBorderRect.Offset(-buttonInnerShadowOffset.Width' -buttonInnerShadowOffset.Height);  innerFrameBorderRect = RectangleF.Union(innerFrameBorderRect' innerFramePath.Bounds);  innerFrameBorderRect.Inflate(1' 1);    var innerFrameNegativePath = UIBezierPath.FromRect(innerFrameBorderRect);  innerFrameNegativePath.AppendPath(innerFramePath);  innerFrameNegativePath.UsesEvenOddFillRule = true;    context.SaveState();  {      var xOffset = buttonInnerShadowOffset.Width + (float)Math.Round(innerFrameBorderRect.Width);      var yOffset = buttonInnerShadowOffset.Height;      context.SetShadowWithColor(          new SizeF(xOffset + (xOffset >= 0 ? 0.1f : -0.1f)' yOffset + (yOffset >= 0 ? 0.1f : -0.1f))'          buttonInnerShadowBlurRadius'          buttonInnerShadow);        innerFramePath.AddClip();      var transform = CGAffineTransform.MakeTranslation(-(float)Math.Round(innerFrameBorderRect.Width)' 0);      innerFrameNegativePath.ApplyTransform(transform);      UIColor.Gray.SetFill();      innerFrameNegativePath.Fill();  }  context.RestoreState();    context.RestoreState();    UIColor.Black.SetStroke();  innerFramePath.LineWidth = 1;  innerFramePath.Stroke();      //// Rounded Rectangle Drawing  var roundedRectanglePath = UIBezierPath.FromRoundedRect(new RectangleF(8' 6' 109' 9)' 4);  context.SaveState();  roundedRectanglePath.AddClip();  context.DrawLinearGradient(glossyGradient' new PointF(62.5f' 6)' new PointF(62.5f' 15)' 0);  context.RestoreState();        //// Text Drawing  var textRect = new RectangleF(18' 6' 90' 28);  context.SaveState();  context.SetShadowWithColor(textShadowOffset' textShadowBlurRadius' textShadow);  glossyColorUp.SetFill();    				// Use default button-drawn text  				//new NSString(textContent).DrawString(textRect' font' UILineBreakMode.WordWrap' UITextAlignment.Center);  context.RestoreState();      		    			// ------------- END PAINTCODE -------------    				  				  				  			}
Magic Number,PaintCode,GlossyButton,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\GlossyButton\GlossyButton.cs,Draw,The following statement contains a magic number: using (var colorSpace = CGColorSpace.CreateDeviceRGB ()) {  				  				  				//// Abstracted Graphic Attributes  				var textContent = this.Title (UIControlState.Normal); //"STOP";			  				var font = UIFont.SystemFontOfSize (18);  				// ------------- START PAINTCODE -------------        //// Color Declarations  				UIColor frameColorTop = UIColor.FromRGBA (0.20f' 0.20f' 0.20f' 1.00f);  				UIColor frameShadowColor = UIColor.FromRGBA (1.00f' 1.00f' 1.00f' 0.40f);    				UIColor glossyColorBottom = UIColor.FromRGBA (  					(buttonColorRGBA [0] * 0.6f + 0.4f)'  					(buttonColorRGBA [1] * 0.6f + 0.4f)'  					(buttonColorRGBA [2] * 0.6f + 0.4f)'  					(buttonColorRGBA [3] * 0.6f + 0.4f)  				);  				UIColor glossyColorUp = UIColor.FromRGBA (  					(buttonColorRGBA [0] * 0.2f + 0.8f)'  					(buttonColorRGBA [1] * 0.2f + 0.8f)'  					(buttonColorRGBA [2] * 0.2f + 0.8f)'  					(buttonColorRGBA [3] * 0.2f + 0.8f)  				);    //// Gradient Declarations  				var glossyGradientColors = new CGColor [] {glossyColorUp.CGColor' glossyColorBottom.CGColor};  				var glossyGradientLocations = new float [] {0' 1};  				var glossyGradient = new CGGradient (colorSpace' glossyGradientColors' glossyGradientLocations);    //// Shadow Declarations  				var frameInnerShadow = frameShadowColor.CGColor;  				var frameInnerShadowOffset = new SizeF (0' -0);  				var frameInnerShadowBlurRadius = 3;  				var buttonInnerShadow = UIColor.Black.CGColor;  				var buttonInnerShadowOffset = new SizeF (0' -0);  				var buttonInnerShadowBlurRadius = 12;  				var textShadow = UIColor.Black.CGColor;  				var textShadowOffset = new SizeF (0' -0);  				var textShadowBlurRadius = 1;  				var buttonShadow = UIColor.Black.CGColor;    				var buttonShadowOffset = new SizeF (0' isPressed ? 0 : 2);		// ADDED this code after PaintCode  				var buttonShadowBlurRadius = isPressed ? 2 : 3;					// ADDED this code after PaintCode          //// outerFrame Drawing  var outerFramePath = UIBezierPath.FromRoundedRect(new RectangleF(2.5f' 1.5f' 120' 32)' 8);  context.SaveState();  context.SetShadowWithColor(buttonShadowOffset' buttonShadowBlurRadius' buttonShadow);  frameColorTop.SetFill();  outerFramePath.Fill();  context.RestoreState();    UIColor.Black.SetStroke();  outerFramePath.LineWidth = 1;  outerFramePath.Stroke();      //// innerFrame Drawing  var innerFramePath = UIBezierPath.FromRoundedRect(new RectangleF(5.5f' 4.5f' 114' 26)' 5);  context.SaveState();  context.SetShadowWithColor(frameInnerShadowOffset' frameInnerShadowBlurRadius' frameInnerShadow);  buttonColor.SetFill();  innerFramePath.Fill();    ////// innerFrame Inner Shadow  var innerFrameBorderRect = innerFramePath.Bounds;  innerFrameBorderRect.Inflate(buttonInnerShadowBlurRadius' buttonInnerShadowBlurRadius);  innerFrameBorderRect.Offset(-buttonInnerShadowOffset.Width' -buttonInnerShadowOffset.Height);  innerFrameBorderRect = RectangleF.Union(innerFrameBorderRect' innerFramePath.Bounds);  innerFrameBorderRect.Inflate(1' 1);    var innerFrameNegativePath = UIBezierPath.FromRect(innerFrameBorderRect);  innerFrameNegativePath.AppendPath(innerFramePath);  innerFrameNegativePath.UsesEvenOddFillRule = true;    context.SaveState();  {      var xOffset = buttonInnerShadowOffset.Width + (float)Math.Round(innerFrameBorderRect.Width);      var yOffset = buttonInnerShadowOffset.Height;      context.SetShadowWithColor(          new SizeF(xOffset + (xOffset >= 0 ? 0.1f : -0.1f)' yOffset + (yOffset >= 0 ? 0.1f : -0.1f))'          buttonInnerShadowBlurRadius'          buttonInnerShadow);        innerFramePath.AddClip();      var transform = CGAffineTransform.MakeTranslation(-(float)Math.Round(innerFrameBorderRect.Width)' 0);      innerFrameNegativePath.ApplyTransform(transform);      UIColor.Gray.SetFill();      innerFrameNegativePath.Fill();  }  context.RestoreState();    context.RestoreState();    UIColor.Black.SetStroke();  innerFramePath.LineWidth = 1;  innerFramePath.Stroke();      //// Rounded Rectangle Drawing  var roundedRectanglePath = UIBezierPath.FromRoundedRect(new RectangleF(8' 6' 109' 9)' 4);  context.SaveState();  roundedRectanglePath.AddClip();  context.DrawLinearGradient(glossyGradient' new PointF(62.5f' 6)' new PointF(62.5f' 15)' 0);  context.RestoreState();        //// Text Drawing  var textRect = new RectangleF(18' 6' 90' 28);  context.SaveState();  context.SetShadowWithColor(textShadowOffset' textShadowBlurRadius' textShadow);  glossyColorUp.SetFill();    				// Use default button-drawn text  				//new NSString(textContent).DrawString(textRect' font' UILineBreakMode.WordWrap' UITextAlignment.Center);  context.RestoreState();      		    			// ------------- END PAINTCODE -------------    				  				  				  			}
Magic Number,PaintCode,GlossyButton,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\GlossyButton\GlossyButton.cs,Draw,The following statement contains a magic number: using (var colorSpace = CGColorSpace.CreateDeviceRGB ()) {  				  				  				//// Abstracted Graphic Attributes  				var textContent = this.Title (UIControlState.Normal); //"STOP";			  				var font = UIFont.SystemFontOfSize (18);  				// ------------- START PAINTCODE -------------        //// Color Declarations  				UIColor frameColorTop = UIColor.FromRGBA (0.20f' 0.20f' 0.20f' 1.00f);  				UIColor frameShadowColor = UIColor.FromRGBA (1.00f' 1.00f' 1.00f' 0.40f);    				UIColor glossyColorBottom = UIColor.FromRGBA (  					(buttonColorRGBA [0] * 0.6f + 0.4f)'  					(buttonColorRGBA [1] * 0.6f + 0.4f)'  					(buttonColorRGBA [2] * 0.6f + 0.4f)'  					(buttonColorRGBA [3] * 0.6f + 0.4f)  				);  				UIColor glossyColorUp = UIColor.FromRGBA (  					(buttonColorRGBA [0] * 0.2f + 0.8f)'  					(buttonColorRGBA [1] * 0.2f + 0.8f)'  					(buttonColorRGBA [2] * 0.2f + 0.8f)'  					(buttonColorRGBA [3] * 0.2f + 0.8f)  				);    //// Gradient Declarations  				var glossyGradientColors = new CGColor [] {glossyColorUp.CGColor' glossyColorBottom.CGColor};  				var glossyGradientLocations = new float [] {0' 1};  				var glossyGradient = new CGGradient (colorSpace' glossyGradientColors' glossyGradientLocations);    //// Shadow Declarations  				var frameInnerShadow = frameShadowColor.CGColor;  				var frameInnerShadowOffset = new SizeF (0' -0);  				var frameInnerShadowBlurRadius = 3;  				var buttonInnerShadow = UIColor.Black.CGColor;  				var buttonInnerShadowOffset = new SizeF (0' -0);  				var buttonInnerShadowBlurRadius = 12;  				var textShadow = UIColor.Black.CGColor;  				var textShadowOffset = new SizeF (0' -0);  				var textShadowBlurRadius = 1;  				var buttonShadow = UIColor.Black.CGColor;    				var buttonShadowOffset = new SizeF (0' isPressed ? 0 : 2);		// ADDED this code after PaintCode  				var buttonShadowBlurRadius = isPressed ? 2 : 3;					// ADDED this code after PaintCode          //// outerFrame Drawing  var outerFramePath = UIBezierPath.FromRoundedRect(new RectangleF(2.5f' 1.5f' 120' 32)' 8);  context.SaveState();  context.SetShadowWithColor(buttonShadowOffset' buttonShadowBlurRadius' buttonShadow);  frameColorTop.SetFill();  outerFramePath.Fill();  context.RestoreState();    UIColor.Black.SetStroke();  outerFramePath.LineWidth = 1;  outerFramePath.Stroke();      //// innerFrame Drawing  var innerFramePath = UIBezierPath.FromRoundedRect(new RectangleF(5.5f' 4.5f' 114' 26)' 5);  context.SaveState();  context.SetShadowWithColor(frameInnerShadowOffset' frameInnerShadowBlurRadius' frameInnerShadow);  buttonColor.SetFill();  innerFramePath.Fill();    ////// innerFrame Inner Shadow  var innerFrameBorderRect = innerFramePath.Bounds;  innerFrameBorderRect.Inflate(buttonInnerShadowBlurRadius' buttonInnerShadowBlurRadius);  innerFrameBorderRect.Offset(-buttonInnerShadowOffset.Width' -buttonInnerShadowOffset.Height);  innerFrameBorderRect = RectangleF.Union(innerFrameBorderRect' innerFramePath.Bounds);  innerFrameBorderRect.Inflate(1' 1);    var innerFrameNegativePath = UIBezierPath.FromRect(innerFrameBorderRect);  innerFrameNegativePath.AppendPath(innerFramePath);  innerFrameNegativePath.UsesEvenOddFillRule = true;    context.SaveState();  {      var xOffset = buttonInnerShadowOffset.Width + (float)Math.Round(innerFrameBorderRect.Width);      var yOffset = buttonInnerShadowOffset.Height;      context.SetShadowWithColor(          new SizeF(xOffset + (xOffset >= 0 ? 0.1f : -0.1f)' yOffset + (yOffset >= 0 ? 0.1f : -0.1f))'          buttonInnerShadowBlurRadius'          buttonInnerShadow);        innerFramePath.AddClip();      var transform = CGAffineTransform.MakeTranslation(-(float)Math.Round(innerFrameBorderRect.Width)' 0);      innerFrameNegativePath.ApplyTransform(transform);      UIColor.Gray.SetFill();      innerFrameNegativePath.Fill();  }  context.RestoreState();    context.RestoreState();    UIColor.Black.SetStroke();  innerFramePath.LineWidth = 1;  innerFramePath.Stroke();      //// Rounded Rectangle Drawing  var roundedRectanglePath = UIBezierPath.FromRoundedRect(new RectangleF(8' 6' 109' 9)' 4);  context.SaveState();  roundedRectanglePath.AddClip();  context.DrawLinearGradient(glossyGradient' new PointF(62.5f' 6)' new PointF(62.5f' 15)' 0);  context.RestoreState();        //// Text Drawing  var textRect = new RectangleF(18' 6' 90' 28);  context.SaveState();  context.SetShadowWithColor(textShadowOffset' textShadowBlurRadius' textShadow);  glossyColorUp.SetFill();    				// Use default button-drawn text  				//new NSString(textContent).DrawString(textRect' font' UILineBreakMode.WordWrap' UITextAlignment.Center);  context.RestoreState();      		    			// ------------- END PAINTCODE -------------    				  				  				  			}
Magic Number,PaintCode,GlossyButton,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\GlossyButton\GlossyButton.cs,Draw,The following statement contains a magic number: using (var colorSpace = CGColorSpace.CreateDeviceRGB ()) {  				  				  				//// Abstracted Graphic Attributes  				var textContent = this.Title (UIControlState.Normal); //"STOP";			  				var font = UIFont.SystemFontOfSize (18);  				// ------------- START PAINTCODE -------------        //// Color Declarations  				UIColor frameColorTop = UIColor.FromRGBA (0.20f' 0.20f' 0.20f' 1.00f);  				UIColor frameShadowColor = UIColor.FromRGBA (1.00f' 1.00f' 1.00f' 0.40f);    				UIColor glossyColorBottom = UIColor.FromRGBA (  					(buttonColorRGBA [0] * 0.6f + 0.4f)'  					(buttonColorRGBA [1] * 0.6f + 0.4f)'  					(buttonColorRGBA [2] * 0.6f + 0.4f)'  					(buttonColorRGBA [3] * 0.6f + 0.4f)  				);  				UIColor glossyColorUp = UIColor.FromRGBA (  					(buttonColorRGBA [0] * 0.2f + 0.8f)'  					(buttonColorRGBA [1] * 0.2f + 0.8f)'  					(buttonColorRGBA [2] * 0.2f + 0.8f)'  					(buttonColorRGBA [3] * 0.2f + 0.8f)  				);    //// Gradient Declarations  				var glossyGradientColors = new CGColor [] {glossyColorUp.CGColor' glossyColorBottom.CGColor};  				var glossyGradientLocations = new float [] {0' 1};  				var glossyGradient = new CGGradient (colorSpace' glossyGradientColors' glossyGradientLocations);    //// Shadow Declarations  				var frameInnerShadow = frameShadowColor.CGColor;  				var frameInnerShadowOffset = new SizeF (0' -0);  				var frameInnerShadowBlurRadius = 3;  				var buttonInnerShadow = UIColor.Black.CGColor;  				var buttonInnerShadowOffset = new SizeF (0' -0);  				var buttonInnerShadowBlurRadius = 12;  				var textShadow = UIColor.Black.CGColor;  				var textShadowOffset = new SizeF (0' -0);  				var textShadowBlurRadius = 1;  				var buttonShadow = UIColor.Black.CGColor;    				var buttonShadowOffset = new SizeF (0' isPressed ? 0 : 2);		// ADDED this code after PaintCode  				var buttonShadowBlurRadius = isPressed ? 2 : 3;					// ADDED this code after PaintCode          //// outerFrame Drawing  var outerFramePath = UIBezierPath.FromRoundedRect(new RectangleF(2.5f' 1.5f' 120' 32)' 8);  context.SaveState();  context.SetShadowWithColor(buttonShadowOffset' buttonShadowBlurRadius' buttonShadow);  frameColorTop.SetFill();  outerFramePath.Fill();  context.RestoreState();    UIColor.Black.SetStroke();  outerFramePath.LineWidth = 1;  outerFramePath.Stroke();      //// innerFrame Drawing  var innerFramePath = UIBezierPath.FromRoundedRect(new RectangleF(5.5f' 4.5f' 114' 26)' 5);  context.SaveState();  context.SetShadowWithColor(frameInnerShadowOffset' frameInnerShadowBlurRadius' frameInnerShadow);  buttonColor.SetFill();  innerFramePath.Fill();    ////// innerFrame Inner Shadow  var innerFrameBorderRect = innerFramePath.Bounds;  innerFrameBorderRect.Inflate(buttonInnerShadowBlurRadius' buttonInnerShadowBlurRadius);  innerFrameBorderRect.Offset(-buttonInnerShadowOffset.Width' -buttonInnerShadowOffset.Height);  innerFrameBorderRect = RectangleF.Union(innerFrameBorderRect' innerFramePath.Bounds);  innerFrameBorderRect.Inflate(1' 1);    var innerFrameNegativePath = UIBezierPath.FromRect(innerFrameBorderRect);  innerFrameNegativePath.AppendPath(innerFramePath);  innerFrameNegativePath.UsesEvenOddFillRule = true;    context.SaveState();  {      var xOffset = buttonInnerShadowOffset.Width + (float)Math.Round(innerFrameBorderRect.Width);      var yOffset = buttonInnerShadowOffset.Height;      context.SetShadowWithColor(          new SizeF(xOffset + (xOffset >= 0 ? 0.1f : -0.1f)' yOffset + (yOffset >= 0 ? 0.1f : -0.1f))'          buttonInnerShadowBlurRadius'          buttonInnerShadow);        innerFramePath.AddClip();      var transform = CGAffineTransform.MakeTranslation(-(float)Math.Round(innerFrameBorderRect.Width)' 0);      innerFrameNegativePath.ApplyTransform(transform);      UIColor.Gray.SetFill();      innerFrameNegativePath.Fill();  }  context.RestoreState();    context.RestoreState();    UIColor.Black.SetStroke();  innerFramePath.LineWidth = 1;  innerFramePath.Stroke();      //// Rounded Rectangle Drawing  var roundedRectanglePath = UIBezierPath.FromRoundedRect(new RectangleF(8' 6' 109' 9)' 4);  context.SaveState();  roundedRectanglePath.AddClip();  context.DrawLinearGradient(glossyGradient' new PointF(62.5f' 6)' new PointF(62.5f' 15)' 0);  context.RestoreState();        //// Text Drawing  var textRect = new RectangleF(18' 6' 90' 28);  context.SaveState();  context.SetShadowWithColor(textShadowOffset' textShadowBlurRadius' textShadow);  glossyColorUp.SetFill();    				// Use default button-drawn text  				//new NSString(textContent).DrawString(textRect' font' UILineBreakMode.WordWrap' UITextAlignment.Center);  context.RestoreState();      		    			// ------------- END PAINTCODE -------------    				  				  				  			}
Magic Number,PaintCode,GlossyButtonViewController,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\GlossyButton\GlossyButtonViewController.cs,ViewDidLoad,The following statement contains a magic number: button = new GlossyButton (new RectangleF (30' 30' 130' 38));
Magic Number,PaintCode,GlossyButtonViewController,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\GlossyButton\GlossyButtonViewController.cs,ViewDidLoad,The following statement contains a magic number: button = new GlossyButton (new RectangleF (30' 30' 130' 38));
Magic Number,PaintCode,GlossyButtonViewController,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\GlossyButton\GlossyButtonViewController.cs,ViewDidLoad,The following statement contains a magic number: button = new GlossyButton (new RectangleF (30' 30' 130' 38));
Magic Number,PaintCode,GlossyButtonViewController,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\GlossyButton\GlossyButtonViewController.cs,ViewDidLoad,The following statement contains a magic number: button = new GlossyButton (new RectangleF (30' 30' 130' 38));
Magic Number,PaintCode,GlossyButtonViewController,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\GlossyButton\GlossyButtonViewController.cs,ViewDidLoad,The following statement contains a magic number: text = new UITextView (new Rectangle (10' 100' 300' 300));
Magic Number,PaintCode,GlossyButtonViewController,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\GlossyButton\GlossyButtonViewController.cs,ViewDidLoad,The following statement contains a magic number: text = new UITextView (new Rectangle (10' 100' 300' 300));
Magic Number,PaintCode,GlossyButtonViewController,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\GlossyButton\GlossyButtonViewController.cs,ViewDidLoad,The following statement contains a magic number: text = new UITextView (new Rectangle (10' 100' 300' 300));
Magic Number,PaintCode,GlossyButtonViewController,C:\repos\conceptdev_xamarin-samples\PaintCode\PaintCodeDemo\GlossyButton\GlossyButtonViewController.cs,ViewDidLoad,The following statement contains a magic number: text = new UITextView (new Rectangle (10' 100' 300' 300));
