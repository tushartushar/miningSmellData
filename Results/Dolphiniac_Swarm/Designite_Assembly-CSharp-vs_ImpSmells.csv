Implementation smell,Namespace,Class,File,Method,Description
Long Method,Paraphernalia.Utils,ColladaExporter,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Utils\ColladaExporter.cs,AddGeometry,The method has 248 lines of code.
Complex Method,Paraphernalia.Extensions,CubemapExtensions,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Extensions\CubemapExtensions.cs,GetColorInDirection,Cyclomatic complexity of the method is 42
Complex Method,Paraphernalia.Extensions,CubemapExtensions,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Extensions\CubemapExtensions.cs,SaveToPNG,Cyclomatic complexity of the method is 18
Complex Method,Paraphernalia.Extensions,Rigidbody2DExtensions,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Extensions\Rigidbody2DExtensions.cs,AddForce,Cyclomatic complexity of the method is 12
Complex Method,Paraphernalia.Math,Matrix,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Math\Matrix.cs,MakeLU,Cyclomatic complexity of the method is 14
Complex Method,Paraphernalia.Math,Matrix,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Math\Matrix.cs,StrassenMultiply,Cyclomatic complexity of the method is 29
Complex Method,Paraphernalia.Math,Matrix,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Math\Matrix.cs,StrassenMultiplyRun,Cyclomatic complexity of the method is 23
Complex Method,Paraphernalia.Math,Matrix,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Math\Matrix.cs,StupidMultiply,Cyclomatic complexity of the method is 8
Complex Method,Paraphernalia.Math,Polygon,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Math\Polygon.cs,Split,Cyclomatic complexity of the method is 13
Complex Method,Paraphernalia.Utils,ColladaExporter,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Utils\ColladaExporter.cs,ColladaExporter,Cyclomatic complexity of the method is 16
Complex Method,Paraphernalia.Utils,ColladaExporter,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Utils\ColladaExporter.cs,AddGeometry,Cyclomatic complexity of the method is 17
Complex Method,Paraphernalia.Utils,Interpolate,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Utils\Interpolate.cs,Ease,Cyclomatic complexity of the method is 66
Complex Method,Paraphernalia.Utils,Interpolate,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Utils\Interpolate.cs,Ease,Cyclomatic complexity of the method is 23
Complex Method,Paraphernalia.Utils,Triangulator,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Utils\Triangulator.cs,Triangulate,Cyclomatic complexity of the method is 13
Complex Method,PrettyPoly,PrettyPoly,C:\repos\Dolphiniac_Swarm\Assets\PrettyPoly\Scripts\PrettyPoly.cs,UpdateMesh,Cyclomatic complexity of the method is 9
Complex Method,PrettyPoly,PrettyPolyMeshLayer,C:\repos\Dolphiniac_Swarm\Assets\PrettyPoly\Scripts\PrettyPolyMeshLayer.cs,GetMesh,Cyclomatic complexity of the method is 13
Complex Method,PrettyPoly,PrettyPolyMeshLayer,C:\repos\Dolphiniac_Swarm\Assets\PrettyPoly\Scripts\PrettyPolyMeshLayer.cs,AddLine,Cyclomatic complexity of the method is 24
Long Parameter List,Paraphernalia.Math,Matrix,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Math\Matrix.cs,SafeAplusBintoC,The method has 8 parameters.
Long Parameter List,Paraphernalia.Math,Matrix,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Math\Matrix.cs,SafeAminusBintoC,The method has 8 parameters.
Long Parameter List,Paraphernalia.Math,Matrix,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Math\Matrix.cs,SafeACopytoC,The method has 5 parameters.
Long Parameter List,Paraphernalia.Math,Matrix,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Math\Matrix.cs,AplusBintoC,The method has 8 parameters.
Long Parameter List,Paraphernalia.Math,Matrix,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Math\Matrix.cs,AminusBintoC,The method has 8 parameters.
Long Parameter List,Paraphernalia.Math,Matrix,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Math\Matrix.cs,ACopytoC,The method has 5 parameters.
Long Parameter List,Paraphernalia.Math,Matrix,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Math\Matrix.cs,StrassenMultiplyRun,The method has 5 parameters.
Long Parameter List,Paraphernalia.Utils,Interpolate,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Utils\Interpolate.cs,NewEase,The method has 5 parameters.
Long Parameter List,Paraphernalia.Utils,Interpolate,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Utils\Interpolate.cs,Ease,The method has 5 parameters.
Long Parameter List,Paraphernalia.Utils,Interpolate,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Utils\Interpolate.cs,NewBezier,The method has 5 parameters.
Long Parameter List,Paraphernalia.Utils,Interpolate,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Utils\Interpolate.cs,CubicBezier,The method has 5 parameters.
Long Parameter List,Paraphernalia.Utils,Interpolate,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Utils\Interpolate.cs,CatmullRom,The method has 6 parameters.
Long Parameter List,Paraphernalia.Utils,Interpolate,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Utils\Interpolate.cs,CatmullRom,The method has 5 parameters.
Long Parameter List,Paraphernalia.Utils,Triangulator,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Utils\Triangulator.cs,Snip,The method has 6 parameters.
Long Parameter List,Paraphernalia.Utils,Triangulator,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Utils\Triangulator.cs,InsideTriangle,The method has 5 parameters.
Long Parameter List,PrettyPoly,PrettyPoly,C:\repos\Dolphiniac_Swarm\Assets\PrettyPoly\Scripts\PrettyPoly.cs,UpdateMesh,The method has 5 parameters.
Long Parameter List,PrettyPoly,PrettyPolyMeshLayer,C:\repos\Dolphiniac_Swarm\Assets\PrettyPoly\Scripts\PrettyPolyMeshLayer.cs,AddRound,The method has 9 parameters.
Long Parameter List,PrettyPoly,PrettyPolyMeshLayer,C:\repos\Dolphiniac_Swarm\Assets\PrettyPoly\Scripts\PrettyPolyMeshLayer.cs,AddMiter,The method has 8 parameters.
Long Parameter List,PrettyPoly,PrettyPolyMeshLayer,C:\repos\Dolphiniac_Swarm\Assets\PrettyPoly\Scripts\PrettyPolyMeshLayer.cs,AddBevel,The method has 9 parameters.
Long Parameter List,PrettyPoly,PrettyPolyMeshLayer,C:\repos\Dolphiniac_Swarm\Assets\PrettyPoly\Scripts\PrettyPolyMeshLayer.cs,AddLineSegment,The method has 7 parameters.
Long Parameter List,PrettyPoly,PrettyPolyMeshLayer,C:\repos\Dolphiniac_Swarm\Assets\PrettyPoly\Scripts\PrettyPolyMeshLayer.cs,AddStrokeSegment,The method has 5 parameters.
Long Parameter List,PrettyPoly,PrettyPolyObjectLayer,C:\repos\Dolphiniac_Swarm\Assets\PrettyPoly\Scripts\PrettyPolyObjectLayer.cs,AddStrokeSegment,The method has 6 parameters.
Long Parameter List,PrettyPoly,PrettyPolyObjectLayer,C:\repos\Dolphiniac_Swarm\Assets\PrettyPoly\Scripts\PrettyPolyObjectLayer.cs,AddObject,The method has 5 parameters.
Long Parameter List,PrettyPoly,PrettyPolyPoint,C:\repos\Dolphiniac_Swarm\Assets\PrettyPoly\Scripts\PrettyPolyPoint.cs,PrettyPolyPoint,The method has 5 parameters.
Long Statement,Paraphernalia.Extensions,GameObjectExtensions,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Extensions\GameObjectExtensions.cs,Instantiate,The length of the statement  "		System.Reflection.MethodInfo method = prefabUtility.GetMethod ("InstantiatePrefab"' BindingFlags.Public | BindingFlags.Static' null' paramTypes' null); " is 151.
Long Statement,Paraphernalia.Extensions,GameObjectExtensions,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Extensions\GameObjectExtensions.cs,GetStatic,The length of the statement  "	System.Reflection.PropertyInfo property = go.GetType ().GetProperty ("isStatic"' BindingFlags.Instance | BindingFlags.Public); " is 126.
Long Statement,Paraphernalia.Extensions,GameObjectExtensions,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Extensions\GameObjectExtensions.cs,SetStatic,The length of the statement  "	System.Reflection.PropertyInfo property = go.GetType ().GetProperty ("isStatic"' BindingFlags.Instance | BindingFlags.Public); " is 126.
Long Statement,Paraphernalia.Extensions,Vector3Extensions,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Extensions\Vector3Extensions.cs,ClosedWinding,The length of the statement  "		ang += Vector3.Cross (path [(i - 1 + path.Length) % path.Length] - path [i]' path [(i + 1) % path.Length] - path [i]).z; " is 120.
Long Statement,Paraphernalia.Math,Matrix,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Math\Matrix.cs,StrassenMultiply,The length of the statement  "			R [i' j] = mField [0' 1 + 1] [i - h' j - h] - mField [0' 1 + 2] [i - h' j - h] + mField [0' 1 + 3] [i - h' j - h] + mField [0' 1 + 6] [i - h' j - h]; " is 149.
Long Statement,Paraphernalia.Math,Matrix,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Math\Matrix.cs,StrassenMultiplyRun,The length of the statement  "			C [i' j] = f [l' 1 + 1] [i - h' j - h] - f [l' 1 + 2] [i - h' j - h] + f [l' 1 + 3] [i - h' j - h] + f [l' 1 + 6] [i - h' j - h]; " is 129.
Long Statement,Paraphernalia.Utils,ColorUtils,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Utils\ColorUtils.cs,HexToRGB,The length of the statement  "	if (Byte.TryParse (hexValue.Substring (0' 2)' style' provider' out r) && Byte.TryParse (hexValue.Substring (2' 2)' style' provider' out g) && Byte.TryParse (hexValue.Substring (4' 2)' style' provider' out b) && (len == 6 || Byte.TryParse (hexValue.Substring (6' 2)' style' provider' out a))) { " is 293.
Long Statement,Paraphernalia.Utils,Interpolate,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Utils\Interpolate.cs,NewCatmullRom,The length of the statement  "				yield return CatmullRom (toVector3 ((T)nodes [previous])' toVector3 ((T)nodes [start])' toVector3 ((T)nodes [end])' toVector3 ((T)nodes [next])' step' stepCount); " is 162.
Long Statement,Paraphernalia.Utils,Interpolate,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Utils\Interpolate.cs,CatmullRom,The length of the statement  "	return previous * (-0.5f * percentCompleteCubed + percentCompleteSquared - 0.5f * percentComplete) + start * (1.5f * percentCompleteCubed + -2.5f * percentCompleteSquared + 1.0f) + end * (-1.5f * percentCompleteCubed + 2.0f * percentCompleteSquared + 0.5f * percentComplete) + next * (0.5f * percentCompleteCubed - 0.5f * percentCompleteSquared); " is 346.
Long Statement,PrettyPoly,PrettyPolyLayer,C:\repos\Dolphiniac_Swarm\Assets\PrettyPoly\Scripts\PrettyPolyLayer.cs,GetShiftedColor,The length of the statement  "	hsv.y = Mathf.Clamp01 (hsv.y + Random.Range (-saturationVariation' saturationVariation) + saturationOffsets.Evaluate (t)); " is 122.
Long Statement,PrettyPoly,PrettyPolyLayer,C:\repos\Dolphiniac_Swarm\Assets\PrettyPoly\Scripts\PrettyPolyLayer.cs,GetPosition,The length of the statement  "	return position + right * Random.Range (-positionVariation' positionVariation) * size + up * Random.Range (-positionVariation' positionVariation) * size; " is 153.
Long Statement,PrettyPoly,PrettyPolyMeshLayer,C:\repos\Dolphiniac_Swarm\Assets\PrettyPoly\Scripts\PrettyPolyMeshLayer.cs,GetSpriteUVs,The length of the statement  "	Rect rect = new Rect (sprite.textureRect.x / (float)sprite.texture.width' sprite.textureRect.y / (float)sprite.texture.height' sprite.textureRect.width / (float)sprite.texture.width' sprite.textureRect.height / (float)sprite.texture.height); " is 241.
Complex Conditional,Paraphernalia.Math,Matrix,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Math\Matrix.cs,ApplyFunc,The conditional expression  "A.rows != B.rows || A.cols != B.cols || A.rows != C.rows || A.cols != C.cols"  is complex.
Complex Conditional,Paraphernalia.Utils,ColorUtils,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Utils\ColorUtils.cs,HexToRGB,The conditional expression  "Byte.TryParse (hexValue.Substring (0' 2)' style' provider' out r) && Byte.TryParse (hexValue.Substring (2' 2)' style' provider' out g) && Byte.TryParse (hexValue.Substring (4' 2)' style' provider' out b) && (len == 6 || Byte.TryParse (hexValue.Substring (6' 2)' style' provider' out a))"  is complex.
Magic Number,Paraphernalia.Extensions,ArrayExtensions,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Extensions\ArrayExtensions.cs,Reverse,The following statement contains a magic number: for (int i = 0; i < array.Length / 2; i++) {  	T temp = array [i];  	array [i] = array [array.Length - i - 1];  	array [array.Length - i - 1] = temp;  }  
Magic Number,Paraphernalia.Extensions,CubemapExtensions,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Extensions\CubemapExtensions.cs,Get4x3Texture2D,The following statement contains a magic number: texture2D.SetPixels (w * 2' 0' w' h' cubemap.GetPixels (CubemapFace.PositiveY));  
Magic Number,Paraphernalia.Extensions,CubemapExtensions,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Extensions\CubemapExtensions.cs,Get4x3Texture2D,The following statement contains a magic number: texture2D.SetPixels (w * 2' h' w' h' cubemap.GetPixels (CubemapFace.PositiveZ));  
Magic Number,Paraphernalia.Extensions,CubemapExtensions,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Extensions\CubemapExtensions.cs,Get4x3Texture2D,The following statement contains a magic number: texture2D.SetPixels (w * 3' h' w' h' cubemap.GetPixels (CubemapFace.PositiveX));  
Magic Number,Paraphernalia.Extensions,CubemapExtensions,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Extensions\CubemapExtensions.cs,Get4x3Texture2D,The following statement contains a magic number: texture2D.SetPixels (w * 2' h * 2' w' h' cubemap.GetPixels (CubemapFace.NegativeY));  
Magic Number,Paraphernalia.Extensions,CubemapExtensions,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Extensions\CubemapExtensions.cs,Get4x3Texture2D,The following statement contains a magic number: texture2D.SetPixels (w * 2' h * 2' w' h' cubemap.GetPixels (CubemapFace.NegativeY));  
Magic Number,Paraphernalia.Extensions,CubemapExtensions,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Extensions\CubemapExtensions.cs,Get3x4Texture2D,The following statement contains a magic number: texture2D.SetPixels (w * 2' h' w' h' cubemap.GetPixels (CubemapFace.PositiveX));  
Magic Number,Paraphernalia.Extensions,CubemapExtensions,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Extensions\CubemapExtensions.cs,Get3x4Texture2D,The following statement contains a magic number: texture2D.SetPixels (w' h * 2' w' h' cubemap.GetPixels (CubemapFace.NegativeY));  
Magic Number,Paraphernalia.Extensions,CubemapExtensions,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Extensions\CubemapExtensions.cs,Get3x4Texture2D,The following statement contains a magic number: texture2D.SetPixels (w' h * 3' w' h' cubemap.GetPixels (CubemapFace.NegativeZ).Reverse ());  
Magic Number,Paraphernalia.Extensions,CubemapExtensions,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Extensions\CubemapExtensions.cs,Get6x1Texture2D,The following statement contains a magic number: texture2D.SetPixels (w * 2' 0' w' h' cubemap.GetPixels (CubemapFace.NegativeY).Reverse ());  
Magic Number,Paraphernalia.Extensions,CubemapExtensions,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Extensions\CubemapExtensions.cs,Get6x1Texture2D,The following statement contains a magic number: texture2D.SetPixels (w * 3' 0' w' h' cubemap.GetPixels (CubemapFace.PositiveY).Reverse ());  
Magic Number,Paraphernalia.Extensions,CubemapExtensions,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Extensions\CubemapExtensions.cs,Get6x1Texture2D,The following statement contains a magic number: texture2D.SetPixels (w * 4' 0' w' h' cubemap.GetPixels (CubemapFace.NegativeX));  
Magic Number,Paraphernalia.Extensions,CubemapExtensions,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Extensions\CubemapExtensions.cs,Get6x1Texture2D,The following statement contains a magic number: texture2D.SetPixels (w * 5' 0' w' h' cubemap.GetPixels (CubemapFace.PositiveX));  
Magic Number,Paraphernalia.Extensions,CubemapExtensions,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Extensions\CubemapExtensions.cs,Get1x6Texture2D,The following statement contains a magic number: texture2D.SetPixels (0' h * 2' w' h' cubemap.GetPixels (CubemapFace.PositiveY).Reverse ());  
Magic Number,Paraphernalia.Extensions,CubemapExtensions,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Extensions\CubemapExtensions.cs,Get1x6Texture2D,The following statement contains a magic number: texture2D.SetPixels (0' h * 3' w' h' cubemap.GetPixels (CubemapFace.NegativeY).Reverse ());  
Magic Number,Paraphernalia.Extensions,CubemapExtensions,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Extensions\CubemapExtensions.cs,Get1x6Texture2D,The following statement contains a magic number: texture2D.SetPixels (0' h * 4' w' h' cubemap.GetPixels (CubemapFace.NegativeZ));  
Magic Number,Paraphernalia.Extensions,CubemapExtensions,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Extensions\CubemapExtensions.cs,Get1x6Texture2D,The following statement contains a magic number: texture2D.SetPixels (0' h * 5' w' h' cubemap.GetPixels (CubemapFace.PositiveZ));  
Magic Number,Paraphernalia.Extensions,CubemapExtensions,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Extensions\CubemapExtensions.cs,GetCylindricalTexture2D,The following statement contains a magic number: for (int j = 0; j < h; j++) {  	for (int i = 0; i < w; i++) {  		float a = (((float)i / (float)w) - 0.25f) * Mathf.PI * 2;  		float x = -Mathf.Cos (a);  		float y = Mathf.Sin (a);  		Vector3 dir = new Vector3 (x' 0' y);  		float b = ((float)j / (float)h);  		if (b > 0.5f)  			dir = Vector3.Slerp (dir' Vector3.up' (b - 0.5f) * 2);  		else  			dir = Vector3.Slerp (dir' -Vector3.up' 1 - b * 2);  		texture2D.SetPixel (i' j' cubemap.GetColorInDirection (dir));  	}  }  
Magic Number,Paraphernalia.Extensions,CubemapExtensions,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Extensions\CubemapExtensions.cs,GetCylindricalTexture2D,The following statement contains a magic number: for (int j = 0; j < h; j++) {  	for (int i = 0; i < w; i++) {  		float a = (((float)i / (float)w) - 0.25f) * Mathf.PI * 2;  		float x = -Mathf.Cos (a);  		float y = Mathf.Sin (a);  		Vector3 dir = new Vector3 (x' 0' y);  		float b = ((float)j / (float)h);  		if (b > 0.5f)  			dir = Vector3.Slerp (dir' Vector3.up' (b - 0.5f) * 2);  		else  			dir = Vector3.Slerp (dir' -Vector3.up' 1 - b * 2);  		texture2D.SetPixel (i' j' cubemap.GetColorInDirection (dir));  	}  }  
Magic Number,Paraphernalia.Extensions,CubemapExtensions,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Extensions\CubemapExtensions.cs,GetCylindricalTexture2D,The following statement contains a magic number: for (int j = 0; j < h; j++) {  	for (int i = 0; i < w; i++) {  		float a = (((float)i / (float)w) - 0.25f) * Mathf.PI * 2;  		float x = -Mathf.Cos (a);  		float y = Mathf.Sin (a);  		Vector3 dir = new Vector3 (x' 0' y);  		float b = ((float)j / (float)h);  		if (b > 0.5f)  			dir = Vector3.Slerp (dir' Vector3.up' (b - 0.5f) * 2);  		else  			dir = Vector3.Slerp (dir' -Vector3.up' 1 - b * 2);  		texture2D.SetPixel (i' j' cubemap.GetColorInDirection (dir));  	}  }  
Magic Number,Paraphernalia.Extensions,CubemapExtensions,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Extensions\CubemapExtensions.cs,GetCylindricalTexture2D,The following statement contains a magic number: for (int i = 0; i < w; i++) {  	float a = (((float)i / (float)w) - 0.25f) * Mathf.PI * 2;  	float x = -Mathf.Cos (a);  	float y = Mathf.Sin (a);  	Vector3 dir = new Vector3 (x' 0' y);  	float b = ((float)j / (float)h);  	if (b > 0.5f)  		dir = Vector3.Slerp (dir' Vector3.up' (b - 0.5f) * 2);  	else  		dir = Vector3.Slerp (dir' -Vector3.up' 1 - b * 2);  	texture2D.SetPixel (i' j' cubemap.GetColorInDirection (dir));  }  
Magic Number,Paraphernalia.Extensions,CubemapExtensions,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Extensions\CubemapExtensions.cs,GetCylindricalTexture2D,The following statement contains a magic number: for (int i = 0; i < w; i++) {  	float a = (((float)i / (float)w) - 0.25f) * Mathf.PI * 2;  	float x = -Mathf.Cos (a);  	float y = Mathf.Sin (a);  	Vector3 dir = new Vector3 (x' 0' y);  	float b = ((float)j / (float)h);  	if (b > 0.5f)  		dir = Vector3.Slerp (dir' Vector3.up' (b - 0.5f) * 2);  	else  		dir = Vector3.Slerp (dir' -Vector3.up' 1 - b * 2);  	texture2D.SetPixel (i' j' cubemap.GetColorInDirection (dir));  }  
Magic Number,Paraphernalia.Extensions,CubemapExtensions,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Extensions\CubemapExtensions.cs,GetCylindricalTexture2D,The following statement contains a magic number: for (int i = 0; i < w; i++) {  	float a = (((float)i / (float)w) - 0.25f) * Mathf.PI * 2;  	float x = -Mathf.Cos (a);  	float y = Mathf.Sin (a);  	Vector3 dir = new Vector3 (x' 0' y);  	float b = ((float)j / (float)h);  	if (b > 0.5f)  		dir = Vector3.Slerp (dir' Vector3.up' (b - 0.5f) * 2);  	else  		dir = Vector3.Slerp (dir' -Vector3.up' 1 - b * 2);  	texture2D.SetPixel (i' j' cubemap.GetColorInDirection (dir));  }  
Magic Number,Paraphernalia.Extensions,CubemapExtensions,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Extensions\CubemapExtensions.cs,GetCylindricalTexture2D,The following statement contains a magic number: if (b > 0.5f)  	dir = Vector3.Slerp (dir' Vector3.up' (b - 0.5f) * 2);  else  	dir = Vector3.Slerp (dir' -Vector3.up' 1 - b * 2);  
Magic Number,Paraphernalia.Extensions,CubemapExtensions,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Extensions\CubemapExtensions.cs,GetCylindricalTexture2D,The following statement contains a magic number: if (b > 0.5f)  	dir = Vector3.Slerp (dir' Vector3.up' (b - 0.5f) * 2);  else  	dir = Vector3.Slerp (dir' -Vector3.up' 1 - b * 2);  
Magic Number,Paraphernalia.Extensions,CubemapExtensions,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Extensions\CubemapExtensions.cs,GetCylindricalTexture2D,The following statement contains a magic number: dir = Vector3.Slerp (dir' Vector3.up' (b - 0.5f) * 2);  
Magic Number,Paraphernalia.Extensions,CubemapExtensions,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Extensions\CubemapExtensions.cs,GetCylindricalTexture2D,The following statement contains a magic number: dir = Vector3.Slerp (dir' -Vector3.up' 1 - b * 2);  
Magic Number,Paraphernalia.Extensions,CubemapExtensions,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Extensions\CubemapExtensions.cs,GetSphericalTexture2D,The following statement contains a magic number: for (int j = 0; j < h; j++) {  	for (int i = 0; i < w; i++) {  		float x = (float)i / (float)w;  		float y = (float)j / (float)h;  		float d = Vector2.Distance (Vector2.one * 0.5f' new Vector2 (x' y));  		if (d <= 0.5f) {  			float r = 2 * Mathf.Sqrt (-4 * x * x + 4 * x - 1 - 4 * y * y + 4 * y);  			Vector3 dir = new Vector3 (r * (2 * x - 1)' r * (2 * y - 1)' -8 * x * x + 8 * x - 8 * y * y + 8 * y - 3);  			texture2D.SetPixel (i' j' cubemap.GetColorInDirection (dir));  		}  		else {  			texture2D.SetPixel (i' j' backColor);  		}  	}  }  
Magic Number,Paraphernalia.Extensions,CubemapExtensions,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Extensions\CubemapExtensions.cs,GetSphericalTexture2D,The following statement contains a magic number: for (int j = 0; j < h; j++) {  	for (int i = 0; i < w; i++) {  		float x = (float)i / (float)w;  		float y = (float)j / (float)h;  		float d = Vector2.Distance (Vector2.one * 0.5f' new Vector2 (x' y));  		if (d <= 0.5f) {  			float r = 2 * Mathf.Sqrt (-4 * x * x + 4 * x - 1 - 4 * y * y + 4 * y);  			Vector3 dir = new Vector3 (r * (2 * x - 1)' r * (2 * y - 1)' -8 * x * x + 8 * x - 8 * y * y + 8 * y - 3);  			texture2D.SetPixel (i' j' cubemap.GetColorInDirection (dir));  		}  		else {  			texture2D.SetPixel (i' j' backColor);  		}  	}  }  
Magic Number,Paraphernalia.Extensions,CubemapExtensions,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Extensions\CubemapExtensions.cs,GetSphericalTexture2D,The following statement contains a magic number: for (int j = 0; j < h; j++) {  	for (int i = 0; i < w; i++) {  		float x = (float)i / (float)w;  		float y = (float)j / (float)h;  		float d = Vector2.Distance (Vector2.one * 0.5f' new Vector2 (x' y));  		if (d <= 0.5f) {  			float r = 2 * Mathf.Sqrt (-4 * x * x + 4 * x - 1 - 4 * y * y + 4 * y);  			Vector3 dir = new Vector3 (r * (2 * x - 1)' r * (2 * y - 1)' -8 * x * x + 8 * x - 8 * y * y + 8 * y - 3);  			texture2D.SetPixel (i' j' cubemap.GetColorInDirection (dir));  		}  		else {  			texture2D.SetPixel (i' j' backColor);  		}  	}  }  
Magic Number,Paraphernalia.Extensions,CubemapExtensions,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Extensions\CubemapExtensions.cs,GetSphericalTexture2D,The following statement contains a magic number: for (int j = 0; j < h; j++) {  	for (int i = 0; i < w; i++) {  		float x = (float)i / (float)w;  		float y = (float)j / (float)h;  		float d = Vector2.Distance (Vector2.one * 0.5f' new Vector2 (x' y));  		if (d <= 0.5f) {  			float r = 2 * Mathf.Sqrt (-4 * x * x + 4 * x - 1 - 4 * y * y + 4 * y);  			Vector3 dir = new Vector3 (r * (2 * x - 1)' r * (2 * y - 1)' -8 * x * x + 8 * x - 8 * y * y + 8 * y - 3);  			texture2D.SetPixel (i' j' cubemap.GetColorInDirection (dir));  		}  		else {  			texture2D.SetPixel (i' j' backColor);  		}  	}  }  
Magic Number,Paraphernalia.Extensions,CubemapExtensions,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Extensions\CubemapExtensions.cs,GetSphericalTexture2D,The following statement contains a magic number: for (int j = 0; j < h; j++) {  	for (int i = 0; i < w; i++) {  		float x = (float)i / (float)w;  		float y = (float)j / (float)h;  		float d = Vector2.Distance (Vector2.one * 0.5f' new Vector2 (x' y));  		if (d <= 0.5f) {  			float r = 2 * Mathf.Sqrt (-4 * x * x + 4 * x - 1 - 4 * y * y + 4 * y);  			Vector3 dir = new Vector3 (r * (2 * x - 1)' r * (2 * y - 1)' -8 * x * x + 8 * x - 8 * y * y + 8 * y - 3);  			texture2D.SetPixel (i' j' cubemap.GetColorInDirection (dir));  		}  		else {  			texture2D.SetPixel (i' j' backColor);  		}  	}  }  
Magic Number,Paraphernalia.Extensions,CubemapExtensions,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Extensions\CubemapExtensions.cs,GetSphericalTexture2D,The following statement contains a magic number: for (int j = 0; j < h; j++) {  	for (int i = 0; i < w; i++) {  		float x = (float)i / (float)w;  		float y = (float)j / (float)h;  		float d = Vector2.Distance (Vector2.one * 0.5f' new Vector2 (x' y));  		if (d <= 0.5f) {  			float r = 2 * Mathf.Sqrt (-4 * x * x + 4 * x - 1 - 4 * y * y + 4 * y);  			Vector3 dir = new Vector3 (r * (2 * x - 1)' r * (2 * y - 1)' -8 * x * x + 8 * x - 8 * y * y + 8 * y - 3);  			texture2D.SetPixel (i' j' cubemap.GetColorInDirection (dir));  		}  		else {  			texture2D.SetPixel (i' j' backColor);  		}  	}  }  
Magic Number,Paraphernalia.Extensions,CubemapExtensions,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Extensions\CubemapExtensions.cs,GetSphericalTexture2D,The following statement contains a magic number: for (int j = 0; j < h; j++) {  	for (int i = 0; i < w; i++) {  		float x = (float)i / (float)w;  		float y = (float)j / (float)h;  		float d = Vector2.Distance (Vector2.one * 0.5f' new Vector2 (x' y));  		if (d <= 0.5f) {  			float r = 2 * Mathf.Sqrt (-4 * x * x + 4 * x - 1 - 4 * y * y + 4 * y);  			Vector3 dir = new Vector3 (r * (2 * x - 1)' r * (2 * y - 1)' -8 * x * x + 8 * x - 8 * y * y + 8 * y - 3);  			texture2D.SetPixel (i' j' cubemap.GetColorInDirection (dir));  		}  		else {  			texture2D.SetPixel (i' j' backColor);  		}  	}  }  
Magic Number,Paraphernalia.Extensions,CubemapExtensions,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Extensions\CubemapExtensions.cs,GetSphericalTexture2D,The following statement contains a magic number: for (int j = 0; j < h; j++) {  	for (int i = 0; i < w; i++) {  		float x = (float)i / (float)w;  		float y = (float)j / (float)h;  		float d = Vector2.Distance (Vector2.one * 0.5f' new Vector2 (x' y));  		if (d <= 0.5f) {  			float r = 2 * Mathf.Sqrt (-4 * x * x + 4 * x - 1 - 4 * y * y + 4 * y);  			Vector3 dir = new Vector3 (r * (2 * x - 1)' r * (2 * y - 1)' -8 * x * x + 8 * x - 8 * y * y + 8 * y - 3);  			texture2D.SetPixel (i' j' cubemap.GetColorInDirection (dir));  		}  		else {  			texture2D.SetPixel (i' j' backColor);  		}  	}  }  
Magic Number,Paraphernalia.Extensions,CubemapExtensions,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Extensions\CubemapExtensions.cs,GetSphericalTexture2D,The following statement contains a magic number: for (int j = 0; j < h; j++) {  	for (int i = 0; i < w; i++) {  		float x = (float)i / (float)w;  		float y = (float)j / (float)h;  		float d = Vector2.Distance (Vector2.one * 0.5f' new Vector2 (x' y));  		if (d <= 0.5f) {  			float r = 2 * Mathf.Sqrt (-4 * x * x + 4 * x - 1 - 4 * y * y + 4 * y);  			Vector3 dir = new Vector3 (r * (2 * x - 1)' r * (2 * y - 1)' -8 * x * x + 8 * x - 8 * y * y + 8 * y - 3);  			texture2D.SetPixel (i' j' cubemap.GetColorInDirection (dir));  		}  		else {  			texture2D.SetPixel (i' j' backColor);  		}  	}  }  
Magic Number,Paraphernalia.Extensions,CubemapExtensions,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Extensions\CubemapExtensions.cs,GetSphericalTexture2D,The following statement contains a magic number: for (int j = 0; j < h; j++) {  	for (int i = 0; i < w; i++) {  		float x = (float)i / (float)w;  		float y = (float)j / (float)h;  		float d = Vector2.Distance (Vector2.one * 0.5f' new Vector2 (x' y));  		if (d <= 0.5f) {  			float r = 2 * Mathf.Sqrt (-4 * x * x + 4 * x - 1 - 4 * y * y + 4 * y);  			Vector3 dir = new Vector3 (r * (2 * x - 1)' r * (2 * y - 1)' -8 * x * x + 8 * x - 8 * y * y + 8 * y - 3);  			texture2D.SetPixel (i' j' cubemap.GetColorInDirection (dir));  		}  		else {  			texture2D.SetPixel (i' j' backColor);  		}  	}  }  
Magic Number,Paraphernalia.Extensions,CubemapExtensions,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Extensions\CubemapExtensions.cs,GetSphericalTexture2D,The following statement contains a magic number: for (int j = 0; j < h; j++) {  	for (int i = 0; i < w; i++) {  		float x = (float)i / (float)w;  		float y = (float)j / (float)h;  		float d = Vector2.Distance (Vector2.one * 0.5f' new Vector2 (x' y));  		if (d <= 0.5f) {  			float r = 2 * Mathf.Sqrt (-4 * x * x + 4 * x - 1 - 4 * y * y + 4 * y);  			Vector3 dir = new Vector3 (r * (2 * x - 1)' r * (2 * y - 1)' -8 * x * x + 8 * x - 8 * y * y + 8 * y - 3);  			texture2D.SetPixel (i' j' cubemap.GetColorInDirection (dir));  		}  		else {  			texture2D.SetPixel (i' j' backColor);  		}  	}  }  
Magic Number,Paraphernalia.Extensions,CubemapExtensions,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Extensions\CubemapExtensions.cs,GetSphericalTexture2D,The following statement contains a magic number: for (int j = 0; j < h; j++) {  	for (int i = 0; i < w; i++) {  		float x = (float)i / (float)w;  		float y = (float)j / (float)h;  		float d = Vector2.Distance (Vector2.one * 0.5f' new Vector2 (x' y));  		if (d <= 0.5f) {  			float r = 2 * Mathf.Sqrt (-4 * x * x + 4 * x - 1 - 4 * y * y + 4 * y);  			Vector3 dir = new Vector3 (r * (2 * x - 1)' r * (2 * y - 1)' -8 * x * x + 8 * x - 8 * y * y + 8 * y - 3);  			texture2D.SetPixel (i' j' cubemap.GetColorInDirection (dir));  		}  		else {  			texture2D.SetPixel (i' j' backColor);  		}  	}  }  
Magic Number,Paraphernalia.Extensions,CubemapExtensions,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Extensions\CubemapExtensions.cs,GetSphericalTexture2D,The following statement contains a magic number: for (int i = 0; i < w; i++) {  	float x = (float)i / (float)w;  	float y = (float)j / (float)h;  	float d = Vector2.Distance (Vector2.one * 0.5f' new Vector2 (x' y));  	if (d <= 0.5f) {  		float r = 2 * Mathf.Sqrt (-4 * x * x + 4 * x - 1 - 4 * y * y + 4 * y);  		Vector3 dir = new Vector3 (r * (2 * x - 1)' r * (2 * y - 1)' -8 * x * x + 8 * x - 8 * y * y + 8 * y - 3);  		texture2D.SetPixel (i' j' cubemap.GetColorInDirection (dir));  	}  	else {  		texture2D.SetPixel (i' j' backColor);  	}  }  
Magic Number,Paraphernalia.Extensions,CubemapExtensions,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Extensions\CubemapExtensions.cs,GetSphericalTexture2D,The following statement contains a magic number: for (int i = 0; i < w; i++) {  	float x = (float)i / (float)w;  	float y = (float)j / (float)h;  	float d = Vector2.Distance (Vector2.one * 0.5f' new Vector2 (x' y));  	if (d <= 0.5f) {  		float r = 2 * Mathf.Sqrt (-4 * x * x + 4 * x - 1 - 4 * y * y + 4 * y);  		Vector3 dir = new Vector3 (r * (2 * x - 1)' r * (2 * y - 1)' -8 * x * x + 8 * x - 8 * y * y + 8 * y - 3);  		texture2D.SetPixel (i' j' cubemap.GetColorInDirection (dir));  	}  	else {  		texture2D.SetPixel (i' j' backColor);  	}  }  
Magic Number,Paraphernalia.Extensions,CubemapExtensions,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Extensions\CubemapExtensions.cs,GetSphericalTexture2D,The following statement contains a magic number: for (int i = 0; i < w; i++) {  	float x = (float)i / (float)w;  	float y = (float)j / (float)h;  	float d = Vector2.Distance (Vector2.one * 0.5f' new Vector2 (x' y));  	if (d <= 0.5f) {  		float r = 2 * Mathf.Sqrt (-4 * x * x + 4 * x - 1 - 4 * y * y + 4 * y);  		Vector3 dir = new Vector3 (r * (2 * x - 1)' r * (2 * y - 1)' -8 * x * x + 8 * x - 8 * y * y + 8 * y - 3);  		texture2D.SetPixel (i' j' cubemap.GetColorInDirection (dir));  	}  	else {  		texture2D.SetPixel (i' j' backColor);  	}  }  
Magic Number,Paraphernalia.Extensions,CubemapExtensions,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Extensions\CubemapExtensions.cs,GetSphericalTexture2D,The following statement contains a magic number: for (int i = 0; i < w; i++) {  	float x = (float)i / (float)w;  	float y = (float)j / (float)h;  	float d = Vector2.Distance (Vector2.one * 0.5f' new Vector2 (x' y));  	if (d <= 0.5f) {  		float r = 2 * Mathf.Sqrt (-4 * x * x + 4 * x - 1 - 4 * y * y + 4 * y);  		Vector3 dir = new Vector3 (r * (2 * x - 1)' r * (2 * y - 1)' -8 * x * x + 8 * x - 8 * y * y + 8 * y - 3);  		texture2D.SetPixel (i' j' cubemap.GetColorInDirection (dir));  	}  	else {  		texture2D.SetPixel (i' j' backColor);  	}  }  
Magic Number,Paraphernalia.Extensions,CubemapExtensions,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Extensions\CubemapExtensions.cs,GetSphericalTexture2D,The following statement contains a magic number: for (int i = 0; i < w; i++) {  	float x = (float)i / (float)w;  	float y = (float)j / (float)h;  	float d = Vector2.Distance (Vector2.one * 0.5f' new Vector2 (x' y));  	if (d <= 0.5f) {  		float r = 2 * Mathf.Sqrt (-4 * x * x + 4 * x - 1 - 4 * y * y + 4 * y);  		Vector3 dir = new Vector3 (r * (2 * x - 1)' r * (2 * y - 1)' -8 * x * x + 8 * x - 8 * y * y + 8 * y - 3);  		texture2D.SetPixel (i' j' cubemap.GetColorInDirection (dir));  	}  	else {  		texture2D.SetPixel (i' j' backColor);  	}  }  
Magic Number,Paraphernalia.Extensions,CubemapExtensions,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Extensions\CubemapExtensions.cs,GetSphericalTexture2D,The following statement contains a magic number: for (int i = 0; i < w; i++) {  	float x = (float)i / (float)w;  	float y = (float)j / (float)h;  	float d = Vector2.Distance (Vector2.one * 0.5f' new Vector2 (x' y));  	if (d <= 0.5f) {  		float r = 2 * Mathf.Sqrt (-4 * x * x + 4 * x - 1 - 4 * y * y + 4 * y);  		Vector3 dir = new Vector3 (r * (2 * x - 1)' r * (2 * y - 1)' -8 * x * x + 8 * x - 8 * y * y + 8 * y - 3);  		texture2D.SetPixel (i' j' cubemap.GetColorInDirection (dir));  	}  	else {  		texture2D.SetPixel (i' j' backColor);  	}  }  
Magic Number,Paraphernalia.Extensions,CubemapExtensions,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Extensions\CubemapExtensions.cs,GetSphericalTexture2D,The following statement contains a magic number: for (int i = 0; i < w; i++) {  	float x = (float)i / (float)w;  	float y = (float)j / (float)h;  	float d = Vector2.Distance (Vector2.one * 0.5f' new Vector2 (x' y));  	if (d <= 0.5f) {  		float r = 2 * Mathf.Sqrt (-4 * x * x + 4 * x - 1 - 4 * y * y + 4 * y);  		Vector3 dir = new Vector3 (r * (2 * x - 1)' r * (2 * y - 1)' -8 * x * x + 8 * x - 8 * y * y + 8 * y - 3);  		texture2D.SetPixel (i' j' cubemap.GetColorInDirection (dir));  	}  	else {  		texture2D.SetPixel (i' j' backColor);  	}  }  
Magic Number,Paraphernalia.Extensions,CubemapExtensions,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Extensions\CubemapExtensions.cs,GetSphericalTexture2D,The following statement contains a magic number: for (int i = 0; i < w; i++) {  	float x = (float)i / (float)w;  	float y = (float)j / (float)h;  	float d = Vector2.Distance (Vector2.one * 0.5f' new Vector2 (x' y));  	if (d <= 0.5f) {  		float r = 2 * Mathf.Sqrt (-4 * x * x + 4 * x - 1 - 4 * y * y + 4 * y);  		Vector3 dir = new Vector3 (r * (2 * x - 1)' r * (2 * y - 1)' -8 * x * x + 8 * x - 8 * y * y + 8 * y - 3);  		texture2D.SetPixel (i' j' cubemap.GetColorInDirection (dir));  	}  	else {  		texture2D.SetPixel (i' j' backColor);  	}  }  
Magic Number,Paraphernalia.Extensions,CubemapExtensions,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Extensions\CubemapExtensions.cs,GetSphericalTexture2D,The following statement contains a magic number: for (int i = 0; i < w; i++) {  	float x = (float)i / (float)w;  	float y = (float)j / (float)h;  	float d = Vector2.Distance (Vector2.one * 0.5f' new Vector2 (x' y));  	if (d <= 0.5f) {  		float r = 2 * Mathf.Sqrt (-4 * x * x + 4 * x - 1 - 4 * y * y + 4 * y);  		Vector3 dir = new Vector3 (r * (2 * x - 1)' r * (2 * y - 1)' -8 * x * x + 8 * x - 8 * y * y + 8 * y - 3);  		texture2D.SetPixel (i' j' cubemap.GetColorInDirection (dir));  	}  	else {  		texture2D.SetPixel (i' j' backColor);  	}  }  
Magic Number,Paraphernalia.Extensions,CubemapExtensions,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Extensions\CubemapExtensions.cs,GetSphericalTexture2D,The following statement contains a magic number: for (int i = 0; i < w; i++) {  	float x = (float)i / (float)w;  	float y = (float)j / (float)h;  	float d = Vector2.Distance (Vector2.one * 0.5f' new Vector2 (x' y));  	if (d <= 0.5f) {  		float r = 2 * Mathf.Sqrt (-4 * x * x + 4 * x - 1 - 4 * y * y + 4 * y);  		Vector3 dir = new Vector3 (r * (2 * x - 1)' r * (2 * y - 1)' -8 * x * x + 8 * x - 8 * y * y + 8 * y - 3);  		texture2D.SetPixel (i' j' cubemap.GetColorInDirection (dir));  	}  	else {  		texture2D.SetPixel (i' j' backColor);  	}  }  
Magic Number,Paraphernalia.Extensions,CubemapExtensions,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Extensions\CubemapExtensions.cs,GetSphericalTexture2D,The following statement contains a magic number: for (int i = 0; i < w; i++) {  	float x = (float)i / (float)w;  	float y = (float)j / (float)h;  	float d = Vector2.Distance (Vector2.one * 0.5f' new Vector2 (x' y));  	if (d <= 0.5f) {  		float r = 2 * Mathf.Sqrt (-4 * x * x + 4 * x - 1 - 4 * y * y + 4 * y);  		Vector3 dir = new Vector3 (r * (2 * x - 1)' r * (2 * y - 1)' -8 * x * x + 8 * x - 8 * y * y + 8 * y - 3);  		texture2D.SetPixel (i' j' cubemap.GetColorInDirection (dir));  	}  	else {  		texture2D.SetPixel (i' j' backColor);  	}  }  
Magic Number,Paraphernalia.Extensions,CubemapExtensions,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Extensions\CubemapExtensions.cs,GetSphericalTexture2D,The following statement contains a magic number: for (int i = 0; i < w; i++) {  	float x = (float)i / (float)w;  	float y = (float)j / (float)h;  	float d = Vector2.Distance (Vector2.one * 0.5f' new Vector2 (x' y));  	if (d <= 0.5f) {  		float r = 2 * Mathf.Sqrt (-4 * x * x + 4 * x - 1 - 4 * y * y + 4 * y);  		Vector3 dir = new Vector3 (r * (2 * x - 1)' r * (2 * y - 1)' -8 * x * x + 8 * x - 8 * y * y + 8 * y - 3);  		texture2D.SetPixel (i' j' cubemap.GetColorInDirection (dir));  	}  	else {  		texture2D.SetPixel (i' j' backColor);  	}  }  
Magic Number,Paraphernalia.Extensions,CubemapExtensions,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Extensions\CubemapExtensions.cs,GetSphericalTexture2D,The following statement contains a magic number: if (d <= 0.5f) {  	float r = 2 * Mathf.Sqrt (-4 * x * x + 4 * x - 1 - 4 * y * y + 4 * y);  	Vector3 dir = new Vector3 (r * (2 * x - 1)' r * (2 * y - 1)' -8 * x * x + 8 * x - 8 * y * y + 8 * y - 3);  	texture2D.SetPixel (i' j' cubemap.GetColorInDirection (dir));  }  else {  	texture2D.SetPixel (i' j' backColor);  }  
Magic Number,Paraphernalia.Extensions,CubemapExtensions,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Extensions\CubemapExtensions.cs,GetSphericalTexture2D,The following statement contains a magic number: if (d <= 0.5f) {  	float r = 2 * Mathf.Sqrt (-4 * x * x + 4 * x - 1 - 4 * y * y + 4 * y);  	Vector3 dir = new Vector3 (r * (2 * x - 1)' r * (2 * y - 1)' -8 * x * x + 8 * x - 8 * y * y + 8 * y - 3);  	texture2D.SetPixel (i' j' cubemap.GetColorInDirection (dir));  }  else {  	texture2D.SetPixel (i' j' backColor);  }  
Magic Number,Paraphernalia.Extensions,CubemapExtensions,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Extensions\CubemapExtensions.cs,GetSphericalTexture2D,The following statement contains a magic number: if (d <= 0.5f) {  	float r = 2 * Mathf.Sqrt (-4 * x * x + 4 * x - 1 - 4 * y * y + 4 * y);  	Vector3 dir = new Vector3 (r * (2 * x - 1)' r * (2 * y - 1)' -8 * x * x + 8 * x - 8 * y * y + 8 * y - 3);  	texture2D.SetPixel (i' j' cubemap.GetColorInDirection (dir));  }  else {  	texture2D.SetPixel (i' j' backColor);  }  
Magic Number,Paraphernalia.Extensions,CubemapExtensions,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Extensions\CubemapExtensions.cs,GetSphericalTexture2D,The following statement contains a magic number: if (d <= 0.5f) {  	float r = 2 * Mathf.Sqrt (-4 * x * x + 4 * x - 1 - 4 * y * y + 4 * y);  	Vector3 dir = new Vector3 (r * (2 * x - 1)' r * (2 * y - 1)' -8 * x * x + 8 * x - 8 * y * y + 8 * y - 3);  	texture2D.SetPixel (i' j' cubemap.GetColorInDirection (dir));  }  else {  	texture2D.SetPixel (i' j' backColor);  }  
Magic Number,Paraphernalia.Extensions,CubemapExtensions,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Extensions\CubemapExtensions.cs,GetSphericalTexture2D,The following statement contains a magic number: if (d <= 0.5f) {  	float r = 2 * Mathf.Sqrt (-4 * x * x + 4 * x - 1 - 4 * y * y + 4 * y);  	Vector3 dir = new Vector3 (r * (2 * x - 1)' r * (2 * y - 1)' -8 * x * x + 8 * x - 8 * y * y + 8 * y - 3);  	texture2D.SetPixel (i' j' cubemap.GetColorInDirection (dir));  }  else {  	texture2D.SetPixel (i' j' backColor);  }  
Magic Number,Paraphernalia.Extensions,CubemapExtensions,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Extensions\CubemapExtensions.cs,GetSphericalTexture2D,The following statement contains a magic number: if (d <= 0.5f) {  	float r = 2 * Mathf.Sqrt (-4 * x * x + 4 * x - 1 - 4 * y * y + 4 * y);  	Vector3 dir = new Vector3 (r * (2 * x - 1)' r * (2 * y - 1)' -8 * x * x + 8 * x - 8 * y * y + 8 * y - 3);  	texture2D.SetPixel (i' j' cubemap.GetColorInDirection (dir));  }  else {  	texture2D.SetPixel (i' j' backColor);  }  
Magic Number,Paraphernalia.Extensions,CubemapExtensions,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Extensions\CubemapExtensions.cs,GetSphericalTexture2D,The following statement contains a magic number: if (d <= 0.5f) {  	float r = 2 * Mathf.Sqrt (-4 * x * x + 4 * x - 1 - 4 * y * y + 4 * y);  	Vector3 dir = new Vector3 (r * (2 * x - 1)' r * (2 * y - 1)' -8 * x * x + 8 * x - 8 * y * y + 8 * y - 3);  	texture2D.SetPixel (i' j' cubemap.GetColorInDirection (dir));  }  else {  	texture2D.SetPixel (i' j' backColor);  }  
Magic Number,Paraphernalia.Extensions,CubemapExtensions,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Extensions\CubemapExtensions.cs,GetSphericalTexture2D,The following statement contains a magic number: if (d <= 0.5f) {  	float r = 2 * Mathf.Sqrt (-4 * x * x + 4 * x - 1 - 4 * y * y + 4 * y);  	Vector3 dir = new Vector3 (r * (2 * x - 1)' r * (2 * y - 1)' -8 * x * x + 8 * x - 8 * y * y + 8 * y - 3);  	texture2D.SetPixel (i' j' cubemap.GetColorInDirection (dir));  }  else {  	texture2D.SetPixel (i' j' backColor);  }  
Magic Number,Paraphernalia.Extensions,CubemapExtensions,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Extensions\CubemapExtensions.cs,GetSphericalTexture2D,The following statement contains a magic number: if (d <= 0.5f) {  	float r = 2 * Mathf.Sqrt (-4 * x * x + 4 * x - 1 - 4 * y * y + 4 * y);  	Vector3 dir = new Vector3 (r * (2 * x - 1)' r * (2 * y - 1)' -8 * x * x + 8 * x - 8 * y * y + 8 * y - 3);  	texture2D.SetPixel (i' j' cubemap.GetColorInDirection (dir));  }  else {  	texture2D.SetPixel (i' j' backColor);  }  
Magic Number,Paraphernalia.Extensions,CubemapExtensions,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Extensions\CubemapExtensions.cs,GetSphericalTexture2D,The following statement contains a magic number: if (d <= 0.5f) {  	float r = 2 * Mathf.Sqrt (-4 * x * x + 4 * x - 1 - 4 * y * y + 4 * y);  	Vector3 dir = new Vector3 (r * (2 * x - 1)' r * (2 * y - 1)' -8 * x * x + 8 * x - 8 * y * y + 8 * y - 3);  	texture2D.SetPixel (i' j' cubemap.GetColorInDirection (dir));  }  else {  	texture2D.SetPixel (i' j' backColor);  }  
Magic Number,Paraphernalia.Extensions,CubemapExtensions,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Extensions\CubemapExtensions.cs,GetSphericalTexture2D,The following statement contains a magic number: if (d <= 0.5f) {  	float r = 2 * Mathf.Sqrt (-4 * x * x + 4 * x - 1 - 4 * y * y + 4 * y);  	Vector3 dir = new Vector3 (r * (2 * x - 1)' r * (2 * y - 1)' -8 * x * x + 8 * x - 8 * y * y + 8 * y - 3);  	texture2D.SetPixel (i' j' cubemap.GetColorInDirection (dir));  }  else {  	texture2D.SetPixel (i' j' backColor);  }  
Magic Number,Paraphernalia.Extensions,CubemapExtensions,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Extensions\CubemapExtensions.cs,GetSphericalTexture2D,The following statement contains a magic number: if (d <= 0.5f) {  	float r = 2 * Mathf.Sqrt (-4 * x * x + 4 * x - 1 - 4 * y * y + 4 * y);  	Vector3 dir = new Vector3 (r * (2 * x - 1)' r * (2 * y - 1)' -8 * x * x + 8 * x - 8 * y * y + 8 * y - 3);  	texture2D.SetPixel (i' j' cubemap.GetColorInDirection (dir));  }  else {  	texture2D.SetPixel (i' j' backColor);  }  
Magic Number,Paraphernalia.Math,Matrix,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Math\Matrix.cs,StrassenMultiply,The following statement contains a magic number: if (msize < 32) {  	R = ZeroMatrix (A.rows' B.cols);  	for (int i = 0; i < R.rows; i++)  		for (int j = 0; j < R.cols; j++)  			for (int k = 0; k < A.cols; k++)  				R [i' j] += A [i' k] * B [k' j];  	return R;  }  
Magic Number,Paraphernalia.Math,Matrix,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Math\Matrix.cs,StrassenMultiply,The following statement contains a magic number: while (msize > size) {  	size *= 2;  	n++;  }  
Magic Number,Paraphernalia.Math,Matrix,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Math\Matrix.cs,StrassenMultiply,The following statement contains a magic number: size *= 2;  
Magic Number,Paraphernalia.Math,Matrix,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Math\Matrix.cs,StrassenMultiply,The following statement contains a magic number: for (int i = 0; i < n - 4; i++)// rows   {  	z = (int)Mathf.Pow (2' n - i - 1);  	for (int j = 0; j < 9; j++)  		mField [i' j] = new Matrix (z' z);  }  
Magic Number,Paraphernalia.Math,Matrix,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Math\Matrix.cs,StrassenMultiply,The following statement contains a magic number: for (int i = 0; i < n - 4; i++)// rows   {  	z = (int)Mathf.Pow (2' n - i - 1);  	for (int j = 0; j < 9; j++)  		mField [i' j] = new Matrix (z' z);  }  
Magic Number,Paraphernalia.Math,Matrix,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Math\Matrix.cs,StrassenMultiply,The following statement contains a magic number: for (int i = 0; i < n - 4; i++)// rows   {  	z = (int)Mathf.Pow (2' n - i - 1);  	for (int j = 0; j < 9; j++)  		mField [i' j] = new Matrix (z' z);  }  
Magic Number,Paraphernalia.Math,Matrix,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Math\Matrix.cs,StrassenMultiply,The following statement contains a magic number: z = (int)Mathf.Pow (2' n - i - 1);  
Magic Number,Paraphernalia.Math,Matrix,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Math\Matrix.cs,StrassenMultiply,The following statement contains a magic number: for (int j = 0; j < 9; j++)  	mField [i' j] = new Matrix (z' z);  
Magic Number,Paraphernalia.Math,Matrix,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Math\Matrix.cs,StrassenMultiply,The following statement contains a magic number: StrassenMultiplyRun (mField [0' 0]' mField [0' 1]' mField [0' 1 + 2]' 1' mField);  
Magic Number,Paraphernalia.Math,Matrix,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Math\Matrix.cs,StrassenMultiply,The following statement contains a magic number: StrassenMultiplyRun (mField [0' 0]' mField [0' 1]' mField [0' 1 + 3]' 1' mField);  
Magic Number,Paraphernalia.Math,Matrix,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Math\Matrix.cs,StrassenMultiply,The following statement contains a magic number: StrassenMultiplyRun (mField [0' 0]' mField [0' 1]' mField [0' 1 + 4]' 1' mField);  
Magic Number,Paraphernalia.Math,Matrix,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Math\Matrix.cs,StrassenMultiply,The following statement contains a magic number: StrassenMultiplyRun (mField [0' 0]' mField [0' 1]' mField [0' 1 + 5]' 1' mField);  
Magic Number,Paraphernalia.Math,Matrix,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Math\Matrix.cs,StrassenMultiply,The following statement contains a magic number: StrassenMultiplyRun (mField [0' 0]' mField [0' 1]' mField [0' 1 + 6]' 1' mField);  
Magic Number,Paraphernalia.Math,Matrix,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Math\Matrix.cs,StrassenMultiply,The following statement contains a magic number: StrassenMultiplyRun (mField [0' 0]' mField [0' 1]' mField [0' 1 + 7]' 1' mField);  
Magic Number,Paraphernalia.Math,Matrix,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Math\Matrix.cs,StrassenMultiply,The following statement contains a magic number: for (int i = 0; i < Mathf.Min (h' R.rows); i++)  	// rows  	for (int j = 0; j < Mathf.Min (h' R.cols); j++)  		// cols  		R [i' j] = mField [0' 1 + 1] [i' j] + mField [0' 1 + 4] [i' j] - mField [0' 1 + 5] [i' j] + mField [0' 1 + 7] [i' j];  
Magic Number,Paraphernalia.Math,Matrix,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Math\Matrix.cs,StrassenMultiply,The following statement contains a magic number: for (int i = 0; i < Mathf.Min (h' R.rows); i++)  	// rows  	for (int j = 0; j < Mathf.Min (h' R.cols); j++)  		// cols  		R [i' j] = mField [0' 1 + 1] [i' j] + mField [0' 1 + 4] [i' j] - mField [0' 1 + 5] [i' j] + mField [0' 1 + 7] [i' j];  
Magic Number,Paraphernalia.Math,Matrix,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Math\Matrix.cs,StrassenMultiply,The following statement contains a magic number: for (int i = 0; i < Mathf.Min (h' R.rows); i++)  	// rows  	for (int j = 0; j < Mathf.Min (h' R.cols); j++)  		// cols  		R [i' j] = mField [0' 1 + 1] [i' j] + mField [0' 1 + 4] [i' j] - mField [0' 1 + 5] [i' j] + mField [0' 1 + 7] [i' j];  
Magic Number,Paraphernalia.Math,Matrix,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Math\Matrix.cs,StrassenMultiply,The following statement contains a magic number: for (int j = 0; j < Mathf.Min (h' R.cols); j++)  	// cols  	R [i' j] = mField [0' 1 + 1] [i' j] + mField [0' 1 + 4] [i' j] - mField [0' 1 + 5] [i' j] + mField [0' 1 + 7] [i' j];  
Magic Number,Paraphernalia.Math,Matrix,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Math\Matrix.cs,StrassenMultiply,The following statement contains a magic number: for (int j = 0; j < Mathf.Min (h' R.cols); j++)  	// cols  	R [i' j] = mField [0' 1 + 1] [i' j] + mField [0' 1 + 4] [i' j] - mField [0' 1 + 5] [i' j] + mField [0' 1 + 7] [i' j];  
Magic Number,Paraphernalia.Math,Matrix,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Math\Matrix.cs,StrassenMultiply,The following statement contains a magic number: for (int j = 0; j < Mathf.Min (h' R.cols); j++)  	// cols  	R [i' j] = mField [0' 1 + 1] [i' j] + mField [0' 1 + 4] [i' j] - mField [0' 1 + 5] [i' j] + mField [0' 1 + 7] [i' j];  
Magic Number,Paraphernalia.Math,Matrix,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Math\Matrix.cs,StrassenMultiply,The following statement contains a magic number: R [i' j] = mField [0' 1 + 1] [i' j] + mField [0' 1 + 4] [i' j] - mField [0' 1 + 5] [i' j] + mField [0' 1 + 7] [i' j];  
Magic Number,Paraphernalia.Math,Matrix,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Math\Matrix.cs,StrassenMultiply,The following statement contains a magic number: R [i' j] = mField [0' 1 + 1] [i' j] + mField [0' 1 + 4] [i' j] - mField [0' 1 + 5] [i' j] + mField [0' 1 + 7] [i' j];  
Magic Number,Paraphernalia.Math,Matrix,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Math\Matrix.cs,StrassenMultiply,The following statement contains a magic number: R [i' j] = mField [0' 1 + 1] [i' j] + mField [0' 1 + 4] [i' j] - mField [0' 1 + 5] [i' j] + mField [0' 1 + 7] [i' j];  
Magic Number,Paraphernalia.Math,Matrix,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Math\Matrix.cs,StrassenMultiply,The following statement contains a magic number: for (int i = 0; i < Mathf.Min (h' R.rows); i++)  	// rows  	for (int j = h; j < Mathf.Min (2 * h' R.cols); j++)  		// cols  		R [i' j] = mField [0' 1 + 3] [i' j - h] + mField [0' 1 + 5] [i' j - h];  
Magic Number,Paraphernalia.Math,Matrix,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Math\Matrix.cs,StrassenMultiply,The following statement contains a magic number: for (int i = 0; i < Mathf.Min (h' R.rows); i++)  	// rows  	for (int j = h; j < Mathf.Min (2 * h' R.cols); j++)  		// cols  		R [i' j] = mField [0' 1 + 3] [i' j - h] + mField [0' 1 + 5] [i' j - h];  
Magic Number,Paraphernalia.Math,Matrix,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Math\Matrix.cs,StrassenMultiply,The following statement contains a magic number: for (int i = 0; i < Mathf.Min (h' R.rows); i++)  	// rows  	for (int j = h; j < Mathf.Min (2 * h' R.cols); j++)  		// cols  		R [i' j] = mField [0' 1 + 3] [i' j - h] + mField [0' 1 + 5] [i' j - h];  
Magic Number,Paraphernalia.Math,Matrix,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Math\Matrix.cs,StrassenMultiply,The following statement contains a magic number: for (int j = h; j < Mathf.Min (2 * h' R.cols); j++)  	// cols  	R [i' j] = mField [0' 1 + 3] [i' j - h] + mField [0' 1 + 5] [i' j - h];  
Magic Number,Paraphernalia.Math,Matrix,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Math\Matrix.cs,StrassenMultiply,The following statement contains a magic number: for (int j = h; j < Mathf.Min (2 * h' R.cols); j++)  	// cols  	R [i' j] = mField [0' 1 + 3] [i' j - h] + mField [0' 1 + 5] [i' j - h];  
Magic Number,Paraphernalia.Math,Matrix,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Math\Matrix.cs,StrassenMultiply,The following statement contains a magic number: for (int j = h; j < Mathf.Min (2 * h' R.cols); j++)  	// cols  	R [i' j] = mField [0' 1 + 3] [i' j - h] + mField [0' 1 + 5] [i' j - h];  
Magic Number,Paraphernalia.Math,Matrix,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Math\Matrix.cs,StrassenMultiply,The following statement contains a magic number: R [i' j] = mField [0' 1 + 3] [i' j - h] + mField [0' 1 + 5] [i' j - h];  
Magic Number,Paraphernalia.Math,Matrix,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Math\Matrix.cs,StrassenMultiply,The following statement contains a magic number: R [i' j] = mField [0' 1 + 3] [i' j - h] + mField [0' 1 + 5] [i' j - h];  
Magic Number,Paraphernalia.Math,Matrix,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Math\Matrix.cs,StrassenMultiply,The following statement contains a magic number: for (int i = h; i < Mathf.Min (2 * h' R.rows); i++)  	// rows  	for (int j = 0; j < Mathf.Min (h' R.cols); j++)  		// cols  		R [i' j] = mField [0' 1 + 2] [i - h' j] + mField [0' 1 + 4] [i - h' j];  
Magic Number,Paraphernalia.Math,Matrix,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Math\Matrix.cs,StrassenMultiply,The following statement contains a magic number: for (int i = h; i < Mathf.Min (2 * h' R.rows); i++)  	// rows  	for (int j = 0; j < Mathf.Min (h' R.cols); j++)  		// cols  		R [i' j] = mField [0' 1 + 2] [i - h' j] + mField [0' 1 + 4] [i - h' j];  
Magic Number,Paraphernalia.Math,Matrix,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Math\Matrix.cs,StrassenMultiply,The following statement contains a magic number: for (int i = h; i < Mathf.Min (2 * h' R.rows); i++)  	// rows  	for (int j = 0; j < Mathf.Min (h' R.cols); j++)  		// cols  		R [i' j] = mField [0' 1 + 2] [i - h' j] + mField [0' 1 + 4] [i - h' j];  
Magic Number,Paraphernalia.Math,Matrix,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Math\Matrix.cs,StrassenMultiply,The following statement contains a magic number: for (int j = 0; j < Mathf.Min (h' R.cols); j++)  	// cols  	R [i' j] = mField [0' 1 + 2] [i - h' j] + mField [0' 1 + 4] [i - h' j];  
Magic Number,Paraphernalia.Math,Matrix,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Math\Matrix.cs,StrassenMultiply,The following statement contains a magic number: for (int j = 0; j < Mathf.Min (h' R.cols); j++)  	// cols  	R [i' j] = mField [0' 1 + 2] [i - h' j] + mField [0' 1 + 4] [i - h' j];  
Magic Number,Paraphernalia.Math,Matrix,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Math\Matrix.cs,StrassenMultiply,The following statement contains a magic number: R [i' j] = mField [0' 1 + 2] [i - h' j] + mField [0' 1 + 4] [i - h' j];  
Magic Number,Paraphernalia.Math,Matrix,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Math\Matrix.cs,StrassenMultiply,The following statement contains a magic number: R [i' j] = mField [0' 1 + 2] [i - h' j] + mField [0' 1 + 4] [i - h' j];  
Magic Number,Paraphernalia.Math,Matrix,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Math\Matrix.cs,StrassenMultiply,The following statement contains a magic number: for (int i = h; i < Mathf.Min (2 * h' R.rows); i++)  	// rows  	for (int j = h; j < Mathf.Min (2 * h' R.cols); j++)  		// cols  		R [i' j] = mField [0' 1 + 1] [i - h' j - h] - mField [0' 1 + 2] [i - h' j - h] + mField [0' 1 + 3] [i - h' j - h] + mField [0' 1 + 6] [i - h' j - h];  
Magic Number,Paraphernalia.Math,Matrix,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Math\Matrix.cs,StrassenMultiply,The following statement contains a magic number: for (int i = h; i < Mathf.Min (2 * h' R.rows); i++)  	// rows  	for (int j = h; j < Mathf.Min (2 * h' R.cols); j++)  		// cols  		R [i' j] = mField [0' 1 + 1] [i - h' j - h] - mField [0' 1 + 2] [i - h' j - h] + mField [0' 1 + 3] [i - h' j - h] + mField [0' 1 + 6] [i - h' j - h];  
Magic Number,Paraphernalia.Math,Matrix,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Math\Matrix.cs,StrassenMultiply,The following statement contains a magic number: for (int i = h; i < Mathf.Min (2 * h' R.rows); i++)  	// rows  	for (int j = h; j < Mathf.Min (2 * h' R.cols); j++)  		// cols  		R [i' j] = mField [0' 1 + 1] [i - h' j - h] - mField [0' 1 + 2] [i - h' j - h] + mField [0' 1 + 3] [i - h' j - h] + mField [0' 1 + 6] [i - h' j - h];  
Magic Number,Paraphernalia.Math,Matrix,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Math\Matrix.cs,StrassenMultiply,The following statement contains a magic number: for (int i = h; i < Mathf.Min (2 * h' R.rows); i++)  	// rows  	for (int j = h; j < Mathf.Min (2 * h' R.cols); j++)  		// cols  		R [i' j] = mField [0' 1 + 1] [i - h' j - h] - mField [0' 1 + 2] [i - h' j - h] + mField [0' 1 + 3] [i - h' j - h] + mField [0' 1 + 6] [i - h' j - h];  
Magic Number,Paraphernalia.Math,Matrix,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Math\Matrix.cs,StrassenMultiply,The following statement contains a magic number: for (int i = h; i < Mathf.Min (2 * h' R.rows); i++)  	// rows  	for (int j = h; j < Mathf.Min (2 * h' R.cols); j++)  		// cols  		R [i' j] = mField [0' 1 + 1] [i - h' j - h] - mField [0' 1 + 2] [i - h' j - h] + mField [0' 1 + 3] [i - h' j - h] + mField [0' 1 + 6] [i - h' j - h];  
Magic Number,Paraphernalia.Math,Matrix,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Math\Matrix.cs,StrassenMultiply,The following statement contains a magic number: for (int j = h; j < Mathf.Min (2 * h' R.cols); j++)  	// cols  	R [i' j] = mField [0' 1 + 1] [i - h' j - h] - mField [0' 1 + 2] [i - h' j - h] + mField [0' 1 + 3] [i - h' j - h] + mField [0' 1 + 6] [i - h' j - h];  
Magic Number,Paraphernalia.Math,Matrix,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Math\Matrix.cs,StrassenMultiply,The following statement contains a magic number: for (int j = h; j < Mathf.Min (2 * h' R.cols); j++)  	// cols  	R [i' j] = mField [0' 1 + 1] [i - h' j - h] - mField [0' 1 + 2] [i - h' j - h] + mField [0' 1 + 3] [i - h' j - h] + mField [0' 1 + 6] [i - h' j - h];  
Magic Number,Paraphernalia.Math,Matrix,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Math\Matrix.cs,StrassenMultiply,The following statement contains a magic number: for (int j = h; j < Mathf.Min (2 * h' R.cols); j++)  	// cols  	R [i' j] = mField [0' 1 + 1] [i - h' j - h] - mField [0' 1 + 2] [i - h' j - h] + mField [0' 1 + 3] [i - h' j - h] + mField [0' 1 + 6] [i - h' j - h];  
Magic Number,Paraphernalia.Math,Matrix,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Math\Matrix.cs,StrassenMultiply,The following statement contains a magic number: for (int j = h; j < Mathf.Min (2 * h' R.cols); j++)  	// cols  	R [i' j] = mField [0' 1 + 1] [i - h' j - h] - mField [0' 1 + 2] [i - h' j - h] + mField [0' 1 + 3] [i - h' j - h] + mField [0' 1 + 6] [i - h' j - h];  
Magic Number,Paraphernalia.Math,Matrix,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Math\Matrix.cs,StrassenMultiply,The following statement contains a magic number: R [i' j] = mField [0' 1 + 1] [i - h' j - h] - mField [0' 1 + 2] [i - h' j - h] + mField [0' 1 + 3] [i - h' j - h] + mField [0' 1 + 6] [i - h' j - h];  
Magic Number,Paraphernalia.Math,Matrix,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Math\Matrix.cs,StrassenMultiply,The following statement contains a magic number: R [i' j] = mField [0' 1 + 1] [i - h' j - h] - mField [0' 1 + 2] [i - h' j - h] + mField [0' 1 + 3] [i - h' j - h] + mField [0' 1 + 6] [i - h' j - h];  
Magic Number,Paraphernalia.Math,Matrix,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Math\Matrix.cs,StrassenMultiply,The following statement contains a magic number: R [i' j] = mField [0' 1 + 1] [i - h' j - h] - mField [0' 1 + 2] [i - h' j - h] + mField [0' 1 + 3] [i - h' j - h] + mField [0' 1 + 6] [i - h' j - h];  
Magic Number,Paraphernalia.Math,Matrix,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Math\Matrix.cs,StrassenMultiplyRun,The following statement contains a magic number: if (size < 32) {  	for (int i = 0; i < C.rows; i++)  		for (int j = 0; j < C.cols; j++) {  			C [i' j] = 0;  			for (int k = 0; k < A.cols; k++)  				C [i' j] += A [i' k] * B [k' j];  		}  	return;  }  
Magic Number,Paraphernalia.Math,Matrix,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Math\Matrix.cs,StrassenMultiplyRun,The following statement contains a magic number: StrassenMultiplyRun (f [l' 0]' f [l' 1]' f [l' 1 + 2]' l + 1' f);  
Magic Number,Paraphernalia.Math,Matrix,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Math\Matrix.cs,StrassenMultiplyRun,The following statement contains a magic number: StrassenMultiplyRun (f [l' 0]' f [l' 1]' f [l' 1 + 3]' l + 1' f);  
Magic Number,Paraphernalia.Math,Matrix,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Math\Matrix.cs,StrassenMultiplyRun,The following statement contains a magic number: StrassenMultiplyRun (f [l' 0]' f [l' 1]' f [l' 1 + 4]' l + 1' f);  
Magic Number,Paraphernalia.Math,Matrix,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Math\Matrix.cs,StrassenMultiplyRun,The following statement contains a magic number: StrassenMultiplyRun (f [l' 0]' f [l' 1]' f [l' 1 + 5]' l + 1' f);  
Magic Number,Paraphernalia.Math,Matrix,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Math\Matrix.cs,StrassenMultiplyRun,The following statement contains a magic number: StrassenMultiplyRun (f [l' 0]' f [l' 1]' f [l' 1 + 6]' l + 1' f);  
Magic Number,Paraphernalia.Math,Matrix,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Math\Matrix.cs,StrassenMultiplyRun,The following statement contains a magic number: StrassenMultiplyRun (f [l' 0]' f [l' 1]' f [l' 1 + 7]' l + 1' f);  
Magic Number,Paraphernalia.Math,Matrix,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Math\Matrix.cs,StrassenMultiplyRun,The following statement contains a magic number: for (int i = 0; i < h; i++)  	// rows  	for (int j = 0; j < h; j++)  		// cols  		C [i' j] = f [l' 1 + 1] [i' j] + f [l' 1 + 4] [i' j] - f [l' 1 + 5] [i' j] + f [l' 1 + 7] [i' j];  
Magic Number,Paraphernalia.Math,Matrix,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Math\Matrix.cs,StrassenMultiplyRun,The following statement contains a magic number: for (int i = 0; i < h; i++)  	// rows  	for (int j = 0; j < h; j++)  		// cols  		C [i' j] = f [l' 1 + 1] [i' j] + f [l' 1 + 4] [i' j] - f [l' 1 + 5] [i' j] + f [l' 1 + 7] [i' j];  
Magic Number,Paraphernalia.Math,Matrix,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Math\Matrix.cs,StrassenMultiplyRun,The following statement contains a magic number: for (int i = 0; i < h; i++)  	// rows  	for (int j = 0; j < h; j++)  		// cols  		C [i' j] = f [l' 1 + 1] [i' j] + f [l' 1 + 4] [i' j] - f [l' 1 + 5] [i' j] + f [l' 1 + 7] [i' j];  
Magic Number,Paraphernalia.Math,Matrix,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Math\Matrix.cs,StrassenMultiplyRun,The following statement contains a magic number: for (int j = 0; j < h; j++)  	// cols  	C [i' j] = f [l' 1 + 1] [i' j] + f [l' 1 + 4] [i' j] - f [l' 1 + 5] [i' j] + f [l' 1 + 7] [i' j];  
Magic Number,Paraphernalia.Math,Matrix,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Math\Matrix.cs,StrassenMultiplyRun,The following statement contains a magic number: for (int j = 0; j < h; j++)  	// cols  	C [i' j] = f [l' 1 + 1] [i' j] + f [l' 1 + 4] [i' j] - f [l' 1 + 5] [i' j] + f [l' 1 + 7] [i' j];  
Magic Number,Paraphernalia.Math,Matrix,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Math\Matrix.cs,StrassenMultiplyRun,The following statement contains a magic number: for (int j = 0; j < h; j++)  	// cols  	C [i' j] = f [l' 1 + 1] [i' j] + f [l' 1 + 4] [i' j] - f [l' 1 + 5] [i' j] + f [l' 1 + 7] [i' j];  
Magic Number,Paraphernalia.Math,Matrix,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Math\Matrix.cs,StrassenMultiplyRun,The following statement contains a magic number: C [i' j] = f [l' 1 + 1] [i' j] + f [l' 1 + 4] [i' j] - f [l' 1 + 5] [i' j] + f [l' 1 + 7] [i' j];  
Magic Number,Paraphernalia.Math,Matrix,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Math\Matrix.cs,StrassenMultiplyRun,The following statement contains a magic number: C [i' j] = f [l' 1 + 1] [i' j] + f [l' 1 + 4] [i' j] - f [l' 1 + 5] [i' j] + f [l' 1 + 7] [i' j];  
Magic Number,Paraphernalia.Math,Matrix,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Math\Matrix.cs,StrassenMultiplyRun,The following statement contains a magic number: C [i' j] = f [l' 1 + 1] [i' j] + f [l' 1 + 4] [i' j] - f [l' 1 + 5] [i' j] + f [l' 1 + 7] [i' j];  
Magic Number,Paraphernalia.Math,Matrix,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Math\Matrix.cs,StrassenMultiplyRun,The following statement contains a magic number: for (int i = 0; i < h; i++)  	// rows  	for (int j = h; j < size; j++)  		// cols  		C [i' j] = f [l' 1 + 3] [i' j - h] + f [l' 1 + 5] [i' j - h];  
Magic Number,Paraphernalia.Math,Matrix,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Math\Matrix.cs,StrassenMultiplyRun,The following statement contains a magic number: for (int i = 0; i < h; i++)  	// rows  	for (int j = h; j < size; j++)  		// cols  		C [i' j] = f [l' 1 + 3] [i' j - h] + f [l' 1 + 5] [i' j - h];  
Magic Number,Paraphernalia.Math,Matrix,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Math\Matrix.cs,StrassenMultiplyRun,The following statement contains a magic number: for (int j = h; j < size; j++)  	// cols  	C [i' j] = f [l' 1 + 3] [i' j - h] + f [l' 1 + 5] [i' j - h];  
Magic Number,Paraphernalia.Math,Matrix,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Math\Matrix.cs,StrassenMultiplyRun,The following statement contains a magic number: for (int j = h; j < size; j++)  	// cols  	C [i' j] = f [l' 1 + 3] [i' j - h] + f [l' 1 + 5] [i' j - h];  
Magic Number,Paraphernalia.Math,Matrix,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Math\Matrix.cs,StrassenMultiplyRun,The following statement contains a magic number: C [i' j] = f [l' 1 + 3] [i' j - h] + f [l' 1 + 5] [i' j - h];  
Magic Number,Paraphernalia.Math,Matrix,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Math\Matrix.cs,StrassenMultiplyRun,The following statement contains a magic number: C [i' j] = f [l' 1 + 3] [i' j - h] + f [l' 1 + 5] [i' j - h];  
Magic Number,Paraphernalia.Math,Matrix,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Math\Matrix.cs,StrassenMultiplyRun,The following statement contains a magic number: for (int i = h; i < size; i++)  	// rows  	for (int j = 0; j < h; j++)  		// cols  		C [i' j] = f [l' 1 + 2] [i - h' j] + f [l' 1 + 4] [i - h' j];  
Magic Number,Paraphernalia.Math,Matrix,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Math\Matrix.cs,StrassenMultiplyRun,The following statement contains a magic number: for (int i = h; i < size; i++)  	// rows  	for (int j = 0; j < h; j++)  		// cols  		C [i' j] = f [l' 1 + 2] [i - h' j] + f [l' 1 + 4] [i - h' j];  
Magic Number,Paraphernalia.Math,Matrix,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Math\Matrix.cs,StrassenMultiplyRun,The following statement contains a magic number: for (int j = 0; j < h; j++)  	// cols  	C [i' j] = f [l' 1 + 2] [i - h' j] + f [l' 1 + 4] [i - h' j];  
Magic Number,Paraphernalia.Math,Matrix,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Math\Matrix.cs,StrassenMultiplyRun,The following statement contains a magic number: for (int j = 0; j < h; j++)  	// cols  	C [i' j] = f [l' 1 + 2] [i - h' j] + f [l' 1 + 4] [i - h' j];  
Magic Number,Paraphernalia.Math,Matrix,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Math\Matrix.cs,StrassenMultiplyRun,The following statement contains a magic number: C [i' j] = f [l' 1 + 2] [i - h' j] + f [l' 1 + 4] [i - h' j];  
Magic Number,Paraphernalia.Math,Matrix,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Math\Matrix.cs,StrassenMultiplyRun,The following statement contains a magic number: C [i' j] = f [l' 1 + 2] [i - h' j] + f [l' 1 + 4] [i - h' j];  
Magic Number,Paraphernalia.Math,Matrix,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Math\Matrix.cs,StrassenMultiplyRun,The following statement contains a magic number: for (int i = h; i < size; i++)  	// rows  	for (int j = h; j < size; j++)  		// cols  		C [i' j] = f [l' 1 + 1] [i - h' j - h] - f [l' 1 + 2] [i - h' j - h] + f [l' 1 + 3] [i - h' j - h] + f [l' 1 + 6] [i - h' j - h];  
Magic Number,Paraphernalia.Math,Matrix,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Math\Matrix.cs,StrassenMultiplyRun,The following statement contains a magic number: for (int i = h; i < size; i++)  	// rows  	for (int j = h; j < size; j++)  		// cols  		C [i' j] = f [l' 1 + 1] [i - h' j - h] - f [l' 1 + 2] [i - h' j - h] + f [l' 1 + 3] [i - h' j - h] + f [l' 1 + 6] [i - h' j - h];  
Magic Number,Paraphernalia.Math,Matrix,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Math\Matrix.cs,StrassenMultiplyRun,The following statement contains a magic number: for (int i = h; i < size; i++)  	// rows  	for (int j = h; j < size; j++)  		// cols  		C [i' j] = f [l' 1 + 1] [i - h' j - h] - f [l' 1 + 2] [i - h' j - h] + f [l' 1 + 3] [i - h' j - h] + f [l' 1 + 6] [i - h' j - h];  
Magic Number,Paraphernalia.Math,Matrix,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Math\Matrix.cs,StrassenMultiplyRun,The following statement contains a magic number: for (int j = h; j < size; j++)  	// cols  	C [i' j] = f [l' 1 + 1] [i - h' j - h] - f [l' 1 + 2] [i - h' j - h] + f [l' 1 + 3] [i - h' j - h] + f [l' 1 + 6] [i - h' j - h];  
Magic Number,Paraphernalia.Math,Matrix,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Math\Matrix.cs,StrassenMultiplyRun,The following statement contains a magic number: for (int j = h; j < size; j++)  	// cols  	C [i' j] = f [l' 1 + 1] [i - h' j - h] - f [l' 1 + 2] [i - h' j - h] + f [l' 1 + 3] [i - h' j - h] + f [l' 1 + 6] [i - h' j - h];  
Magic Number,Paraphernalia.Math,Matrix,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Math\Matrix.cs,StrassenMultiplyRun,The following statement contains a magic number: for (int j = h; j < size; j++)  	// cols  	C [i' j] = f [l' 1 + 1] [i - h' j - h] - f [l' 1 + 2] [i - h' j - h] + f [l' 1 + 3] [i - h' j - h] + f [l' 1 + 6] [i - h' j - h];  
Magic Number,Paraphernalia.Math,Matrix,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Math\Matrix.cs,StrassenMultiplyRun,The following statement contains a magic number: C [i' j] = f [l' 1 + 1] [i - h' j - h] - f [l' 1 + 2] [i - h' j - h] + f [l' 1 + 3] [i - h' j - h] + f [l' 1 + 6] [i - h' j - h];  
Magic Number,Paraphernalia.Math,Matrix,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Math\Matrix.cs,StrassenMultiplyRun,The following statement contains a magic number: C [i' j] = f [l' 1 + 1] [i - h' j - h] - f [l' 1 + 2] [i - h' j - h] + f [l' 1 + 3] [i - h' j - h] + f [l' 1 + 6] [i - h' j - h];  
Magic Number,Paraphernalia.Math,Matrix,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Math\Matrix.cs,StrassenMultiplyRun,The following statement contains a magic number: C [i' j] = f [l' 1 + 1] [i - h' j - h] - f [l' 1 + 2] [i - h' j - h] + f [l' 1 + 3] [i - h' j - h] + f [l' 1 + 6] [i - h' j - h];  
Magic Number,Paraphernalia.Math,Polygon,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Math\Polygon.cs,GetWindingNumber,The following statement contains a magic number: return Mathf.RoundToInt (winding / (2 * Mathf.PI));  
Magic Number,Paraphernalia.Math,Polygon,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Math\Polygon.cs,GetWindingNumber,The following statement contains a magic number: return Mathf.RoundToInt (winding / (2 * Mathf.PI));  
Magic Number,Paraphernalia.Math,Polygon,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Math\Polygon.cs,Split,The following statement contains a magic number: for (int i = 0; i < len; i++) {  	int side = line.Side (path [i]);  	// if we've crossed the line  	if (Mathf.Abs (lastSide - side) == 2) {  		Line2D l = new Line2D (lastPoint' path [i]);  		Vector2 intersect = l.Intersect (line);  		newPath.Add (intersect);  		if (firstPath.Count == 0) {  			firstPath.AddRange (newPath);  		}  		else if (polyToRevisit != null) {  			polyToRevisit.AppendToPath (newPath.ToArray ());  			polyToRevisit = null;  		}  		else {  			Polygon poly = new Polygon (newPath.ToArray ());  			if (lastSide < 0)  				negPolys.Add (poly);  			else  				posPolys.Add (poly);  		}  		newPath.Clear ();  		newPath.Add (intersect);  		// look through current polygons on this side   		// to see if this point is contained in it  		// if so' append to said polygon until you exit again  		if (polyToRevisit == null) {  			Polygon[] polyCheckList = new Polygon[0];  			if (side > 0)  				polyCheckList = posPolys.ToArray ();  			else if (side < 0)  				polyCheckList = negPolys.ToArray ();  			for (int j = 0; j < polyCheckList.Length; j++) {  				if (polyCheckList [j].Contains (path [i])) {  					polyToRevisit = polyCheckList [j];  					break;  				}  			}  		}  	}  	newPath.Add (path [i]);  	lastPoint = path [i];  	lastSide = side;  }  
Magic Number,Paraphernalia.Math,Polygon,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Math\Polygon.cs,Split,The following statement contains a magic number: if (Mathf.Abs (lastSide - side) == 2) {  	Line2D l = new Line2D (lastPoint' path [i]);  	Vector2 intersect = l.Intersect (line);  	newPath.Add (intersect);  	if (firstPath.Count == 0) {  		firstPath.AddRange (newPath);  	}  	else if (polyToRevisit != null) {  		polyToRevisit.AppendToPath (newPath.ToArray ());  		polyToRevisit = null;  	}  	else {  		Polygon poly = new Polygon (newPath.ToArray ());  		if (lastSide < 0)  			negPolys.Add (poly);  		else  			posPolys.Add (poly);  	}  	newPath.Clear ();  	newPath.Add (intersect);  	// look through current polygons on this side   	// to see if this point is contained in it  	// if so' append to said polygon until you exit again  	if (polyToRevisit == null) {  		Polygon[] polyCheckList = new Polygon[0];  		if (side > 0)  			polyCheckList = posPolys.ToArray ();  		else if (side < 0)  			polyCheckList = negPolys.ToArray ();  		for (int j = 0; j < polyCheckList.Length; j++) {  			if (polyCheckList [j].Contains (path [i])) {  				polyToRevisit = polyCheckList [j];  				break;  			}  		}  	}  }  
Magic Number,Paraphernalia.Math,Polygon,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Math\Polygon.cs,Split,The following statement contains a magic number: return new Polygon[2][] {  	negPolys.ToArray ()'  	posPolys.ToArray ()  };  
Magic Number,Paraphernalia.Utils,ColladaExporter,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Utils\ColladaExporter.cs,AddGeometry,The following statement contains a magic number: if (sourceMesh.vertexCount > 0) {  	nodeA = mesh.AppendChild (this.xml.CreateElement ("source"' COLLADA));  	attr = this.xml.CreateAttribute ("id");  	attr.Value = id + "-mesh-positions";  	nodeA.Attributes.Append (attr);  	nodeB = nodeA.AppendChild (this.xml.CreateElement ("float_array"' COLLADA));  	attr = this.xml.CreateAttribute ("id");  	attr.Value = id + "-mesh-positions-array";  	nodeB.Attributes.Append (attr);  	attr = this.xml.CreateAttribute ("count");  	attr.Value = (sourceMesh.vertexCount * 3).ToString ();  	nodeB.Attributes.Append (attr);  	str = new StringBuilder ();  	for (int i = 0' n = sourceMesh.vertexCount; i < n; ++i) {  		str.Append ((-sourceMesh.vertices [i].x).ToString ());  		str.Append (" ");  		str.Append (sourceMesh.vertices [i].y.ToString ());  		str.Append (" ");  		str.Append (sourceMesh.vertices [i].z.ToString ());  		if (i + 1 != n)  			str.Append (" ");  	}  	nodeB.AppendChild (this.xml.CreateTextNode (str.ToString ()));  	str = null;  	nodeB = nodeA.AppendChild (this.xml.CreateElement ("technique_common"' COLLADA));  	nodeC = nodeB.AppendChild (this.xml.CreateElement ("accessor"' COLLADA));  	attr = this.xml.CreateAttribute ("source");  	attr.Value = "#" + id + "-mesh-positions-array";  	nodeC.Attributes.Append (attr);  	attr = this.xml.CreateAttribute ("count");  	attr.Value = sourceMesh.vertexCount.ToString ();  	nodeC.Attributes.Append (attr);  	attr = this.xml.CreateAttribute ("stride");  	attr.Value = "3";  	nodeC.Attributes.Append (attr);  	nodeD = nodeC.AppendChild (this.xml.CreateElement ("param"' COLLADA));  	attr = this.xml.CreateAttribute ("name");  	attr.Value = "X";  	nodeD.Attributes.Append (attr);  	attr = this.xml.CreateAttribute ("type");  	attr.Value = "float";  	nodeD.Attributes.Append (attr);  	nodeD = nodeC.AppendChild (this.xml.CreateElement ("param"' COLLADA));  	attr = this.xml.CreateAttribute ("name");  	attr.Value = "Y";  	nodeD.Attributes.Append (attr);  	attr = this.xml.CreateAttribute ("type");  	attr.Value = "float";  	nodeD.Attributes.Append (attr);  	nodeD = nodeC.AppendChild (this.xml.CreateElement ("param"' COLLADA));  	attr = this.xml.CreateAttribute ("name");  	attr.Value = "Z";  	nodeD.Attributes.Append (attr);  	attr = this.xml.CreateAttribute ("type");  	attr.Value = "float";  	nodeD.Attributes.Append (attr);  }  
Magic Number,Paraphernalia.Utils,ColladaExporter,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Utils\ColladaExporter.cs,AddGeometry,The following statement contains a magic number: attr.Value = (sourceMesh.vertexCount * 3).ToString ();  
Magic Number,Paraphernalia.Utils,ColladaExporter,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Utils\ColladaExporter.cs,AddGeometry,The following statement contains a magic number: if (sourceMesh.colors.Length > 0) {  	nodeA = mesh.AppendChild (this.xml.CreateElement ("source"' COLLADA));  	attr = this.xml.CreateAttribute ("id");  	attr.Value = id + "-mesh-colors";  	nodeA.Attributes.Append (attr);  	nodeB = nodeA.AppendChild (this.xml.CreateElement ("float_array"' COLLADA));  	attr = this.xml.CreateAttribute ("id");  	attr.Value = id + "-mesh-colors-array";  	nodeB.Attributes.Append (attr);  	attr = this.xml.CreateAttribute ("count");  	attr.Value = (sourceMesh.colors.Length * 3).ToString ();  	nodeB.Attributes.Append (attr);  	str = new StringBuilder ();  	for (int i = 0' n = sourceMesh.colors.Length; i < n; ++i) {  		//str.Append(mesh.colors[i].a.ToString());  		//str.Append(" ");  		str.Append (sourceMesh.colors [i].r.ToString ());  		str.Append (" ");  		str.Append (sourceMesh.colors [i].g.ToString ());  		str.Append (" ");  		str.Append (sourceMesh.colors [i].b.ToString ());  		if (i + 1 != n)  			str.Append (" ");  	}  	nodeB.AppendChild (this.xml.CreateTextNode (str.ToString ()));  	str = null;  	nodeB = nodeA.AppendChild (this.xml.CreateElement ("technique_common"' COLLADA));  	nodeC = nodeB.AppendChild (this.xml.CreateElement ("accessor"' COLLADA));  	attr = this.xml.CreateAttribute ("source");  	attr.Value = "#" + id + "-mesh-colors-array";  	nodeC.Attributes.Append (attr);  	attr = this.xml.CreateAttribute ("count");  	attr.Value = sourceMesh.colors.Length.ToString ();  	nodeC.Attributes.Append (attr);  	attr = this.xml.CreateAttribute ("stride");  	attr.Value = "3";  	nodeC.Attributes.Append (attr);  	nodeD = nodeC.AppendChild (this.xml.CreateElement ("param"' COLLADA));  	attr = this.xml.CreateAttribute ("name");  	attr.Value = "R";  	nodeD.Attributes.Append (attr);  	attr = this.xml.CreateAttribute ("type");  	attr.Value = "float";  	nodeD.Attributes.Append (attr);  	nodeD = nodeC.AppendChild (this.xml.CreateElement ("param"' COLLADA));  	attr = this.xml.CreateAttribute ("name");  	attr.Value = "G";  	nodeD.Attributes.Append (attr);  	attr = this.xml.CreateAttribute ("type");  	attr.Value = "float";  	nodeD.Attributes.Append (attr);  	nodeD = nodeC.AppendChild (this.xml.CreateElement ("param"' COLLADA));  	attr = this.xml.CreateAttribute ("name");  	attr.Value = "B";  	nodeD.Attributes.Append (attr);  	attr = this.xml.CreateAttribute ("type");  	attr.Value = "float";  	nodeD.Attributes.Append (attr);  }  
Magic Number,Paraphernalia.Utils,ColladaExporter,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Utils\ColladaExporter.cs,AddGeometry,The following statement contains a magic number: attr.Value = (sourceMesh.colors.Length * 3).ToString ();  
Magic Number,Paraphernalia.Utils,ColladaExporter,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Utils\ColladaExporter.cs,AddGeometry,The following statement contains a magic number: if (sourceMesh.normals.Length > 0) {  	nodeA = mesh.AppendChild (this.xml.CreateElement ("source"' COLLADA));  	attr = this.xml.CreateAttribute ("id");  	attr.Value = id + "-mesh-normals";  	nodeA.Attributes.Append (attr);  	nodeB = nodeA.AppendChild (this.xml.CreateElement ("float_array"' COLLADA));  	attr = this.xml.CreateAttribute ("id");  	attr.Value = id + "-mesh-normals-array";  	nodeB.Attributes.Append (attr);  	attr = this.xml.CreateAttribute ("count");  	attr.Value = (sourceMesh.normals.Length * 3).ToString ();  	nodeB.Attributes.Append (attr);  	str = new StringBuilder ();  	for (int i = 0' n = sourceMesh.normals.Length; i < n; ++i) {  		str.Append ((-sourceMesh.normals [i].x).ToString ());  		str.Append (" ");  		str.Append (sourceMesh.normals [i].y.ToString ());  		str.Append (" ");  		str.Append (sourceMesh.normals [i].z.ToString ());  		if (i + 1 != n)  			str.Append (" ");  	}  	nodeB.AppendChild (this.xml.CreateTextNode (str.ToString ()));  	str = null;  	nodeB = nodeA.AppendChild (this.xml.CreateElement ("technique_common"' COLLADA));  	nodeC = nodeB.AppendChild (this.xml.CreateElement ("accessor"' COLLADA));  	attr = this.xml.CreateAttribute ("source");  	attr.Value = "#" + id + "-mesh-normals-array";  	nodeC.Attributes.Append (attr);  	attr = this.xml.CreateAttribute ("count");  	attr.Value = sourceMesh.normals.Length.ToString ();  	nodeC.Attributes.Append (attr);  	attr = this.xml.CreateAttribute ("stride");  	attr.Value = "3";  	nodeC.Attributes.Append (attr);  	nodeD = nodeC.AppendChild (this.xml.CreateElement ("param"' COLLADA));  	attr = this.xml.CreateAttribute ("name");  	attr.Value = "X";  	nodeD.Attributes.Append (attr);  	attr = this.xml.CreateAttribute ("type");  	attr.Value = "float";  	nodeD.Attributes.Append (attr);  	nodeD = nodeC.AppendChild (this.xml.CreateElement ("param"' COLLADA));  	attr = this.xml.CreateAttribute ("name");  	attr.Value = "Y";  	nodeD.Attributes.Append (attr);  	attr = this.xml.CreateAttribute ("type");  	attr.Value = "float";  	nodeD.Attributes.Append (attr);  	nodeD = nodeC.AppendChild (this.xml.CreateElement ("param"' COLLADA));  	attr = this.xml.CreateAttribute ("name");  	attr.Value = "Z";  	nodeD.Attributes.Append (attr);  	attr = this.xml.CreateAttribute ("type");  	attr.Value = "float";  	nodeD.Attributes.Append (attr);  }  
Magic Number,Paraphernalia.Utils,ColladaExporter,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Utils\ColladaExporter.cs,AddGeometry,The following statement contains a magic number: attr.Value = (sourceMesh.normals.Length * 3).ToString ();  
Magic Number,Paraphernalia.Utils,ColladaExporter,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Utils\ColladaExporter.cs,AddGeometry,The following statement contains a magic number: attr.Value = (sourceMesh.triangles.Length / 3).ToString ();  
Magic Number,Paraphernalia.Utils,ColorUtils,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Utils\ColorUtils.cs,HSVtoRGB,The following statement contains a magic number: if (h < 1 || h == 6)  	color = new Color (chroma' x' 0' hsv.w);  else if (h < 2)  	color = new Color (x' chroma' 0' hsv.w);  else if (h < 3)  	color = new Color (0' chroma' x' hsv.w);  else if (h < 4)  	color = new Color (0' x' chroma' hsv.w);  else if (h < 5)  	color = new Color (x' 0' chroma' hsv.w);  else  	color = new Color (chroma' 0' x' hsv.w);  
Magic Number,Paraphernalia.Utils,ColorUtils,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Utils\ColorUtils.cs,HSVtoRGB,The following statement contains a magic number: if (h < 1 || h == 6)  	color = new Color (chroma' x' 0' hsv.w);  else if (h < 2)  	color = new Color (x' chroma' 0' hsv.w);  else if (h < 3)  	color = new Color (0' chroma' x' hsv.w);  else if (h < 4)  	color = new Color (0' x' chroma' hsv.w);  else if (h < 5)  	color = new Color (x' 0' chroma' hsv.w);  else  	color = new Color (chroma' 0' x' hsv.w);  
Magic Number,Paraphernalia.Utils,ColorUtils,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Utils\ColorUtils.cs,HSVtoRGB,The following statement contains a magic number: if (h < 1 || h == 6)  	color = new Color (chroma' x' 0' hsv.w);  else if (h < 2)  	color = new Color (x' chroma' 0' hsv.w);  else if (h < 3)  	color = new Color (0' chroma' x' hsv.w);  else if (h < 4)  	color = new Color (0' x' chroma' hsv.w);  else if (h < 5)  	color = new Color (x' 0' chroma' hsv.w);  else  	color = new Color (chroma' 0' x' hsv.w);  
Magic Number,Paraphernalia.Utils,ColorUtils,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Utils\ColorUtils.cs,HSVtoRGB,The following statement contains a magic number: if (h < 1 || h == 6)  	color = new Color (chroma' x' 0' hsv.w);  else if (h < 2)  	color = new Color (x' chroma' 0' hsv.w);  else if (h < 3)  	color = new Color (0' chroma' x' hsv.w);  else if (h < 4)  	color = new Color (0' x' chroma' hsv.w);  else if (h < 5)  	color = new Color (x' 0' chroma' hsv.w);  else  	color = new Color (chroma' 0' x' hsv.w);  
Magic Number,Paraphernalia.Utils,ColorUtils,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Utils\ColorUtils.cs,HSVtoRGB,The following statement contains a magic number: if (h < 1 || h == 6)  	color = new Color (chroma' x' 0' hsv.w);  else if (h < 2)  	color = new Color (x' chroma' 0' hsv.w);  else if (h < 3)  	color = new Color (0' chroma' x' hsv.w);  else if (h < 4)  	color = new Color (0' x' chroma' hsv.w);  else if (h < 5)  	color = new Color (x' 0' chroma' hsv.w);  else  	color = new Color (chroma' 0' x' hsv.w);  
Magic Number,Paraphernalia.Utils,ColorUtils,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Utils\ColorUtils.cs,HSVtoRGB,The following statement contains a magic number: if (h < 2)  	color = new Color (x' chroma' 0' hsv.w);  else if (h < 3)  	color = new Color (0' chroma' x' hsv.w);  else if (h < 4)  	color = new Color (0' x' chroma' hsv.w);  else if (h < 5)  	color = new Color (x' 0' chroma' hsv.w);  else  	color = new Color (chroma' 0' x' hsv.w);  
Magic Number,Paraphernalia.Utils,ColorUtils,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Utils\ColorUtils.cs,HSVtoRGB,The following statement contains a magic number: if (h < 2)  	color = new Color (x' chroma' 0' hsv.w);  else if (h < 3)  	color = new Color (0' chroma' x' hsv.w);  else if (h < 4)  	color = new Color (0' x' chroma' hsv.w);  else if (h < 5)  	color = new Color (x' 0' chroma' hsv.w);  else  	color = new Color (chroma' 0' x' hsv.w);  
Magic Number,Paraphernalia.Utils,ColorUtils,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Utils\ColorUtils.cs,HSVtoRGB,The following statement contains a magic number: if (h < 2)  	color = new Color (x' chroma' 0' hsv.w);  else if (h < 3)  	color = new Color (0' chroma' x' hsv.w);  else if (h < 4)  	color = new Color (0' x' chroma' hsv.w);  else if (h < 5)  	color = new Color (x' 0' chroma' hsv.w);  else  	color = new Color (chroma' 0' x' hsv.w);  
Magic Number,Paraphernalia.Utils,ColorUtils,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Utils\ColorUtils.cs,HSVtoRGB,The following statement contains a magic number: if (h < 2)  	color = new Color (x' chroma' 0' hsv.w);  else if (h < 3)  	color = new Color (0' chroma' x' hsv.w);  else if (h < 4)  	color = new Color (0' x' chroma' hsv.w);  else if (h < 5)  	color = new Color (x' 0' chroma' hsv.w);  else  	color = new Color (chroma' 0' x' hsv.w);  
Magic Number,Paraphernalia.Utils,ColorUtils,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Utils\ColorUtils.cs,HSVtoRGB,The following statement contains a magic number: if (h < 3)  	color = new Color (0' chroma' x' hsv.w);  else if (h < 4)  	color = new Color (0' x' chroma' hsv.w);  else if (h < 5)  	color = new Color (x' 0' chroma' hsv.w);  else  	color = new Color (chroma' 0' x' hsv.w);  
Magic Number,Paraphernalia.Utils,ColorUtils,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Utils\ColorUtils.cs,HSVtoRGB,The following statement contains a magic number: if (h < 3)  	color = new Color (0' chroma' x' hsv.w);  else if (h < 4)  	color = new Color (0' x' chroma' hsv.w);  else if (h < 5)  	color = new Color (x' 0' chroma' hsv.w);  else  	color = new Color (chroma' 0' x' hsv.w);  
Magic Number,Paraphernalia.Utils,ColorUtils,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Utils\ColorUtils.cs,HSVtoRGB,The following statement contains a magic number: if (h < 3)  	color = new Color (0' chroma' x' hsv.w);  else if (h < 4)  	color = new Color (0' x' chroma' hsv.w);  else if (h < 5)  	color = new Color (x' 0' chroma' hsv.w);  else  	color = new Color (chroma' 0' x' hsv.w);  
Magic Number,Paraphernalia.Utils,ColorUtils,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Utils\ColorUtils.cs,HSVtoRGB,The following statement contains a magic number: if (h < 4)  	color = new Color (0' x' chroma' hsv.w);  else if (h < 5)  	color = new Color (x' 0' chroma' hsv.w);  else  	color = new Color (chroma' 0' x' hsv.w);  
Magic Number,Paraphernalia.Utils,ColorUtils,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Utils\ColorUtils.cs,HSVtoRGB,The following statement contains a magic number: if (h < 4)  	color = new Color (0' x' chroma' hsv.w);  else if (h < 5)  	color = new Color (x' 0' chroma' hsv.w);  else  	color = new Color (chroma' 0' x' hsv.w);  
Magic Number,Paraphernalia.Utils,ColorUtils,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Utils\ColorUtils.cs,HSVtoRGB,The following statement contains a magic number: if (h < 5)  	color = new Color (x' 0' chroma' hsv.w);  else  	color = new Color (chroma' 0' x' hsv.w);  
Magic Number,Paraphernalia.Utils,ColorUtils,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Utils\ColorUtils.cs,RGBtoHSV,The following statement contains a magic number: if (chroma != 0) {  	if (val == c.r)  		hue = (c.g - c.b) / chroma;  	else if (val == c.g)  		hue = 2 + (c.b - c.r) / chroma;  	else if (val == c.b)  		hue = 4 + (c.r - c.g) / chroma;  }  
Magic Number,Paraphernalia.Utils,ColorUtils,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Utils\ColorUtils.cs,RGBtoHSV,The following statement contains a magic number: if (chroma != 0) {  	if (val == c.r)  		hue = (c.g - c.b) / chroma;  	else if (val == c.g)  		hue = 2 + (c.b - c.r) / chroma;  	else if (val == c.b)  		hue = 4 + (c.r - c.g) / chroma;  }  
Magic Number,Paraphernalia.Utils,ColorUtils,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Utils\ColorUtils.cs,RGBtoHSV,The following statement contains a magic number: if (val == c.r)  	hue = (c.g - c.b) / chroma;  else if (val == c.g)  	hue = 2 + (c.b - c.r) / chroma;  else if (val == c.b)  	hue = 4 + (c.r - c.g) / chroma;  
Magic Number,Paraphernalia.Utils,ColorUtils,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Utils\ColorUtils.cs,RGBtoHSV,The following statement contains a magic number: if (val == c.r)  	hue = (c.g - c.b) / chroma;  else if (val == c.g)  	hue = 2 + (c.b - c.r) / chroma;  else if (val == c.b)  	hue = 4 + (c.r - c.g) / chroma;  
Magic Number,Paraphernalia.Utils,ColorUtils,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Utils\ColorUtils.cs,RGBtoHSV,The following statement contains a magic number: if (val == c.g)  	hue = 2 + (c.b - c.r) / chroma;  else if (val == c.b)  	hue = 4 + (c.r - c.g) / chroma;  
Magic Number,Paraphernalia.Utils,ColorUtils,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Utils\ColorUtils.cs,RGBtoHSV,The following statement contains a magic number: if (val == c.g)  	hue = 2 + (c.b - c.r) / chroma;  else if (val == c.b)  	hue = 4 + (c.r - c.g) / chroma;  
Magic Number,Paraphernalia.Utils,ColorUtils,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Utils\ColorUtils.cs,RGBtoHSV,The following statement contains a magic number: hue = 2 + (c.b - c.r) / chroma;  
Magic Number,Paraphernalia.Utils,ColorUtils,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Utils\ColorUtils.cs,RGBtoHSV,The following statement contains a magic number: if (val == c.b)  	hue = 4 + (c.r - c.g) / chroma;  
Magic Number,Paraphernalia.Utils,ColorUtils,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Utils\ColorUtils.cs,RGBtoHSV,The following statement contains a magic number: hue = 4 + (c.r - c.g) / chroma;  
Magic Number,Paraphernalia.Utils,ColorUtils,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Utils\ColorUtils.cs,HexToRGB,The following statement contains a magic number: if (len != 6 && len != 8) {  	Debug.LogError ("Expected a 6 (RRGGBB) or 8 (RRGGBBAA) char string' got " + len);  	return defaultColor;  }  
Magic Number,Paraphernalia.Utils,ColorUtils,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Utils\ColorUtils.cs,HexToRGB,The following statement contains a magic number: if (len != 6 && len != 8) {  	Debug.LogError ("Expected a 6 (RRGGBB) or 8 (RRGGBBAA) char string' got " + len);  	return defaultColor;  }  
Magic Number,Paraphernalia.Utils,ColorUtils,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Utils\ColorUtils.cs,HexToRGB,The following statement contains a magic number: if (Byte.TryParse (hexValue.Substring (0' 2)' style' provider' out r) && Byte.TryParse (hexValue.Substring (2' 2)' style' provider' out g) && Byte.TryParse (hexValue.Substring (4' 2)' style' provider' out b) && (len == 6 || Byte.TryParse (hexValue.Substring (6' 2)' style' provider' out a))) {  	return (Color)(new Color32 (r' g' b' a));  }  else {  	return defaultColor;  }  
Magic Number,Paraphernalia.Utils,ColorUtils,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Utils\ColorUtils.cs,HexToRGB,The following statement contains a magic number: if (Byte.TryParse (hexValue.Substring (0' 2)' style' provider' out r) && Byte.TryParse (hexValue.Substring (2' 2)' style' provider' out g) && Byte.TryParse (hexValue.Substring (4' 2)' style' provider' out b) && (len == 6 || Byte.TryParse (hexValue.Substring (6' 2)' style' provider' out a))) {  	return (Color)(new Color32 (r' g' b' a));  }  else {  	return defaultColor;  }  
Magic Number,Paraphernalia.Utils,ColorUtils,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Utils\ColorUtils.cs,HexToRGB,The following statement contains a magic number: if (Byte.TryParse (hexValue.Substring (0' 2)' style' provider' out r) && Byte.TryParse (hexValue.Substring (2' 2)' style' provider' out g) && Byte.TryParse (hexValue.Substring (4' 2)' style' provider' out b) && (len == 6 || Byte.TryParse (hexValue.Substring (6' 2)' style' provider' out a))) {  	return (Color)(new Color32 (r' g' b' a));  }  else {  	return defaultColor;  }  
Magic Number,Paraphernalia.Utils,ColorUtils,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Utils\ColorUtils.cs,HexToRGB,The following statement contains a magic number: if (Byte.TryParse (hexValue.Substring (0' 2)' style' provider' out r) && Byte.TryParse (hexValue.Substring (2' 2)' style' provider' out g) && Byte.TryParse (hexValue.Substring (4' 2)' style' provider' out b) && (len == 6 || Byte.TryParse (hexValue.Substring (6' 2)' style' provider' out a))) {  	return (Color)(new Color32 (r' g' b' a));  }  else {  	return defaultColor;  }  
Magic Number,Paraphernalia.Utils,ColorUtils,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Utils\ColorUtils.cs,HexToRGB,The following statement contains a magic number: if (Byte.TryParse (hexValue.Substring (0' 2)' style' provider' out r) && Byte.TryParse (hexValue.Substring (2' 2)' style' provider' out g) && Byte.TryParse (hexValue.Substring (4' 2)' style' provider' out b) && (len == 6 || Byte.TryParse (hexValue.Substring (6' 2)' style' provider' out a))) {  	return (Color)(new Color32 (r' g' b' a));  }  else {  	return defaultColor;  }  
Magic Number,Paraphernalia.Utils,ColorUtils,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Utils\ColorUtils.cs,HexToRGB,The following statement contains a magic number: if (Byte.TryParse (hexValue.Substring (0' 2)' style' provider' out r) && Byte.TryParse (hexValue.Substring (2' 2)' style' provider' out g) && Byte.TryParse (hexValue.Substring (4' 2)' style' provider' out b) && (len == 6 || Byte.TryParse (hexValue.Substring (6' 2)' style' provider' out a))) {  	return (Color)(new Color32 (r' g' b' a));  }  else {  	return defaultColor;  }  
Magic Number,Paraphernalia.Utils,ColorUtils,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Utils\ColorUtils.cs,HexToRGB,The following statement contains a magic number: if (Byte.TryParse (hexValue.Substring (0' 2)' style' provider' out r) && Byte.TryParse (hexValue.Substring (2' 2)' style' provider' out g) && Byte.TryParse (hexValue.Substring (4' 2)' style' provider' out b) && (len == 6 || Byte.TryParse (hexValue.Substring (6' 2)' style' provider' out a))) {  	return (Color)(new Color32 (r' g' b' a));  }  else {  	return defaultColor;  }  
Magic Number,Paraphernalia.Utils,ColorUtils,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Utils\ColorUtils.cs,HexToRGB,The following statement contains a magic number: if (Byte.TryParse (hexValue.Substring (0' 2)' style' provider' out r) && Byte.TryParse (hexValue.Substring (2' 2)' style' provider' out g) && Byte.TryParse (hexValue.Substring (4' 2)' style' provider' out b) && (len == 6 || Byte.TryParse (hexValue.Substring (6' 2)' style' provider' out a))) {  	return (Color)(new Color32 (r' g' b' a));  }  else {  	return defaultColor;  }  
Magic Number,Paraphernalia.Utils,Interpolate,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Utils\Interpolate.cs,NewBezier,The following statement contains a magic number: if (nodes.Count >= 2) {  	// copy nodes array since Bezier is destructive  	Vector3[] points = new Vector3[nodes.Count];  	foreach (float step in steps) {  		// re-initialize copy before each destructive call to Bezier  		for (int i = 0; i < nodes.Count; i++) {  			points [i] = toVector3 ((T)nodes [i]);  		}  		yield return Bezier (ease' points' step' maxStep);  		// make sure last value is always generated  	}  }  
Magic Number,Paraphernalia.Utils,Interpolate,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Utils\Interpolate.cs,QuadBezier,The following statement contains a magic number: return f * f * start + 2 * f * t * cp + t * t * end;  
Magic Number,Paraphernalia.Utils,Interpolate,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Utils\Interpolate.cs,CubicBezier,The following statement contains a magic number: return f * f * f * start + 3 * f * f * t * cp1 + 3 * f * t * t * cp2 + t * t * t * end;  
Magic Number,Paraphernalia.Utils,Interpolate,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Utils\Interpolate.cs,CubicBezier,The following statement contains a magic number: return f * f * f * start + 3 * f * f * t * cp1 + 3 * f * t * t * cp2 + t * t * t * end;  
Magic Number,Paraphernalia.Utils,Interpolate,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Utils\Interpolate.cs,NewCatmullRom,The following statement contains a magic number: if (nodes.Count >= 2) {  	// yield the first point explicitly' if looping the first point  	// will be generated again in the step for loop when interpolating  	// from last point back to the first point  	yield return toVector3 ((T)nodes [0]);  	int last = nodes.Count - 1;  	for (int current = 0; loop || current < last; current++) {  		// wrap around when looping  		if (loop && current > last) {  			current = 0;  		}  		// handle edge cases for looping and non-looping scenarios  		// when looping we wrap around' when not looping use start for previous  		// and end for next when you at the ends of the nodes array  		int previous = (current == 0) ? ((loop) ? last : current) : current - 1;  		int start = current;  		int end = (current == last) ? ((loop) ? 0 : current) : current + 1;  		int next = (end == last) ? ((loop) ? 0 : end) : end + 1;  		// adding one guarantees yielding at least the end point  		int stepCount = slices + 1;  		for (int step = 1; step <= stepCount; step++) {  			yield return CatmullRom (toVector3 ((T)nodes [previous])' toVector3 ((T)nodes [start])' toVector3 ((T)nodes [end])' toVector3 ((T)nodes [next])' step' stepCount);  		}  	}  }  
Magic Number,Paraphernalia.Utils,Interpolate,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Utils\Interpolate.cs,EaseOutQuad,The following statement contains a magic number: return -distance * t * (t - 2) + start;  
Magic Number,Paraphernalia.Utils,Interpolate,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Utils\Interpolate.cs,EaseOutQuad,The following statement contains a magic number: return -t * (t - 2);  
Magic Number,Paraphernalia.Utils,Interpolate,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Utils\Interpolate.cs,EaseInOutQuad,The following statement contains a magic number: elapsedTime = (elapsedTime > duration) ? 2.0f : elapsedTime / (duration / 2);  
Magic Number,Paraphernalia.Utils,Interpolate,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Utils\Interpolate.cs,EaseInOutQuad,The following statement contains a magic number: if (elapsedTime < 1)  	return distance / 2 * elapsedTime * elapsedTime + start;  
Magic Number,Paraphernalia.Utils,Interpolate,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Utils\Interpolate.cs,EaseInOutQuad,The following statement contains a magic number: return distance / 2 * elapsedTime * elapsedTime + start;  
Magic Number,Paraphernalia.Utils,Interpolate,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Utils\Interpolate.cs,EaseInOutQuad,The following statement contains a magic number: return -distance / 2 * (t * (t - 2) - 1) + start;  
Magic Number,Paraphernalia.Utils,Interpolate,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Utils\Interpolate.cs,EaseInOutQuad,The following statement contains a magic number: return -distance / 2 * (t * (t - 2) - 1) + start;  
Magic Number,Paraphernalia.Utils,Interpolate,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Utils\Interpolate.cs,EaseInOutQuad,The following statement contains a magic number: return -1 / 2 * (t * (t - 2) - 1);  
Magic Number,Paraphernalia.Utils,Interpolate,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Utils\Interpolate.cs,EaseInOutQuad,The following statement contains a magic number: return -1 / 2 * (t * (t - 2) - 1);  
Magic Number,Paraphernalia.Utils,Interpolate,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Utils\Interpolate.cs,EaseInOutCubic,The following statement contains a magic number: elapsedTime = (elapsedTime > duration) ? 2.0f : elapsedTime / (duration / 2);  
Magic Number,Paraphernalia.Utils,Interpolate,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Utils\Interpolate.cs,EaseInOutCubic,The following statement contains a magic number: if (elapsedTime < 1)  	return distance / 2 * elapsedTime * elapsedTime * elapsedTime + start;  
Magic Number,Paraphernalia.Utils,Interpolate,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Utils\Interpolate.cs,EaseInOutCubic,The following statement contains a magic number: return distance / 2 * elapsedTime * elapsedTime * elapsedTime + start;  
Magic Number,Paraphernalia.Utils,Interpolate,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Utils\Interpolate.cs,EaseInOutCubic,The following statement contains a magic number: elapsedTime -= 2;  
Magic Number,Paraphernalia.Utils,Interpolate,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Utils\Interpolate.cs,EaseInOutCubic,The following statement contains a magic number: return distance / 2 * (t * t * t + 2) + start;  
Magic Number,Paraphernalia.Utils,Interpolate,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Utils\Interpolate.cs,EaseInOutCubic,The following statement contains a magic number: return distance / 2 * (t * t * t + 2) + start;  
Magic Number,Paraphernalia.Utils,Interpolate,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Utils\Interpolate.cs,EaseInOutCubic,The following statement contains a magic number: return 1 / 2 * (t * t * t + 2);  
Magic Number,Paraphernalia.Utils,Interpolate,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Utils\Interpolate.cs,EaseInOutCubic,The following statement contains a magic number: return 1 / 2 * (t * t * t + 2);  
Magic Number,Paraphernalia.Utils,Interpolate,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Utils\Interpolate.cs,EaseInSine,The following statement contains a magic number: return -distance * Mathf.Cos (t * (Mathf.PI / 2)) + distance + start;  
Magic Number,Paraphernalia.Utils,Interpolate,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Utils\Interpolate.cs,EaseInSine,The following statement contains a magic number: return -Mathf.Cos (t * (Mathf.PI / 2)) + 1;  
Magic Number,Paraphernalia.Utils,Interpolate,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Utils\Interpolate.cs,EaseOutSine,The following statement contains a magic number: return distance * Mathf.Sin (t * (Mathf.PI / 2)) + start;  
Magic Number,Paraphernalia.Utils,Interpolate,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Utils\Interpolate.cs,EaseOutSine,The following statement contains a magic number: return Mathf.Sin (t * (Mathf.PI / 2));  
Magic Number,Paraphernalia.Utils,Interpolate,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Utils\Interpolate.cs,EaseInOutSine,The following statement contains a magic number: return -distance / 2 * (Mathf.Cos (Mathf.PI * t) - 1) + start;  
Magic Number,Paraphernalia.Utils,Interpolate,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Utils\Interpolate.cs,EaseInOutSine,The following statement contains a magic number: return -1 / 2 * (Mathf.Cos (Mathf.PI * t) - 1);  
Magic Number,Paraphernalia.Utils,Interpolate,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Utils\Interpolate.cs,EaseInExpo,The following statement contains a magic number: return distance * Mathf.Pow (2' 10 * (t - 1)) + start;  
Magic Number,Paraphernalia.Utils,Interpolate,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Utils\Interpolate.cs,EaseInExpo,The following statement contains a magic number: return distance * Mathf.Pow (2' 10 * (t - 1)) + start;  
Magic Number,Paraphernalia.Utils,Interpolate,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Utils\Interpolate.cs,EaseInExpo,The following statement contains a magic number: return Mathf.Pow (2' 10 * (t - 1));  
Magic Number,Paraphernalia.Utils,Interpolate,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Utils\Interpolate.cs,EaseInExpo,The following statement contains a magic number: return Mathf.Pow (2' 10 * (t - 1));  
Magic Number,Paraphernalia.Utils,Interpolate,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Utils\Interpolate.cs,EaseOutExpo,The following statement contains a magic number: return distance * (-Mathf.Pow (2' -10 * t) + 1) + start;  
Magic Number,Paraphernalia.Utils,Interpolate,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Utils\Interpolate.cs,EaseOutExpo,The following statement contains a magic number: return distance * (-Mathf.Pow (2' -10 * t) + 1) + start;  
Magic Number,Paraphernalia.Utils,Interpolate,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Utils\Interpolate.cs,EaseOutExpo,The following statement contains a magic number: return -Mathf.Pow (2' -10 * t) + 1;  
Magic Number,Paraphernalia.Utils,Interpolate,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Utils\Interpolate.cs,EaseOutExpo,The following statement contains a magic number: return -Mathf.Pow (2' -10 * t) + 1;  
Magic Number,Paraphernalia.Utils,Interpolate,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Utils\Interpolate.cs,EaseInOutExpo,The following statement contains a magic number: elapsedTime = (elapsedTime > duration) ? 2.0f : elapsedTime / (duration / 2);  
Magic Number,Paraphernalia.Utils,Interpolate,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Utils\Interpolate.cs,EaseInOutExpo,The following statement contains a magic number: if (elapsedTime < 1)  	return distance / 2 * Mathf.Pow (2' 10 * (elapsedTime - 1)) + start;  
Magic Number,Paraphernalia.Utils,Interpolate,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Utils\Interpolate.cs,EaseInOutExpo,The following statement contains a magic number: if (elapsedTime < 1)  	return distance / 2 * Mathf.Pow (2' 10 * (elapsedTime - 1)) + start;  
Magic Number,Paraphernalia.Utils,Interpolate,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Utils\Interpolate.cs,EaseInOutExpo,The following statement contains a magic number: if (elapsedTime < 1)  	return distance / 2 * Mathf.Pow (2' 10 * (elapsedTime - 1)) + start;  
Magic Number,Paraphernalia.Utils,Interpolate,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Utils\Interpolate.cs,EaseInOutExpo,The following statement contains a magic number: return distance / 2 * Mathf.Pow (2' 10 * (elapsedTime - 1)) + start;  
Magic Number,Paraphernalia.Utils,Interpolate,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Utils\Interpolate.cs,EaseInOutExpo,The following statement contains a magic number: return distance / 2 * Mathf.Pow (2' 10 * (elapsedTime - 1)) + start;  
Magic Number,Paraphernalia.Utils,Interpolate,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Utils\Interpolate.cs,EaseInOutExpo,The following statement contains a magic number: return distance / 2 * Mathf.Pow (2' 10 * (elapsedTime - 1)) + start;  
Magic Number,Paraphernalia.Utils,Interpolate,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Utils\Interpolate.cs,EaseInOutExpo,The following statement contains a magic number: return distance / 2 * (-Mathf.Pow (2' -10 * t) + 2) + start;  
Magic Number,Paraphernalia.Utils,Interpolate,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Utils\Interpolate.cs,EaseInOutExpo,The following statement contains a magic number: return distance / 2 * (-Mathf.Pow (2' -10 * t) + 2) + start;  
Magic Number,Paraphernalia.Utils,Interpolate,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Utils\Interpolate.cs,EaseInOutExpo,The following statement contains a magic number: return distance / 2 * (-Mathf.Pow (2' -10 * t) + 2) + start;  
Magic Number,Paraphernalia.Utils,Interpolate,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Utils\Interpolate.cs,EaseInOutExpo,The following statement contains a magic number: return distance / 2 * (-Mathf.Pow (2' -10 * t) + 2) + start;  
Magic Number,Paraphernalia.Utils,Interpolate,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Utils\Interpolate.cs,EaseInOutExpo,The following statement contains a magic number: return 1 / 2 * (-Mathf.Pow (2' -10 * t) + 2);  
Magic Number,Paraphernalia.Utils,Interpolate,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Utils\Interpolate.cs,EaseInOutExpo,The following statement contains a magic number: return 1 / 2 * (-Mathf.Pow (2' -10 * t) + 2);  
Magic Number,Paraphernalia.Utils,Interpolate,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Utils\Interpolate.cs,EaseInOutExpo,The following statement contains a magic number: return 1 / 2 * (-Mathf.Pow (2' -10 * t) + 2);  
Magic Number,Paraphernalia.Utils,Interpolate,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Utils\Interpolate.cs,EaseInOutExpo,The following statement contains a magic number: return 1 / 2 * (-Mathf.Pow (2' -10 * t) + 2);  
Magic Number,Paraphernalia.Utils,Interpolate,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Utils\Interpolate.cs,EaseInOutCirc,The following statement contains a magic number: elapsedTime = (elapsedTime > duration) ? 2.0f : elapsedTime / (duration / 2);  
Magic Number,Paraphernalia.Utils,Interpolate,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Utils\Interpolate.cs,EaseInOutCirc,The following statement contains a magic number: if (elapsedTime < 1)  	return -distance / 2 * (Mathf.Sqrt (1 - elapsedTime * elapsedTime) - 1) + start;  
Magic Number,Paraphernalia.Utils,Interpolate,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Utils\Interpolate.cs,EaseInOutCirc,The following statement contains a magic number: return -distance / 2 * (Mathf.Sqrt (1 - elapsedTime * elapsedTime) - 1) + start;  
Magic Number,Paraphernalia.Utils,Interpolate,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Utils\Interpolate.cs,EaseInOutCirc,The following statement contains a magic number: elapsedTime -= 2;  
Magic Number,Paraphernalia.Utils,Interpolate,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Utils\Interpolate.cs,EaseInOutCirc,The following statement contains a magic number: return distance / 2 * (Mathf.Sqrt (1 - t * t) + 1) + start;  
Magic Number,Paraphernalia.Utils,TextureGenerator,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Utils\TextureGenerator.cs,SphericalMapping,The following statement contains a magic number: for (int j = 0; j < height; j++) {  	for (int i = 0; i < width; i++) {  		float x = (float)i / (float)width;  		float y = (float)j / (float)height;  		float d = Vector2.Distance (Vector2.one * 0.5f' new Vector2 (x' y));  		if (d <= 0.5f) {  			float r = 2 * Mathf.Sqrt (-4 * x * x + 4 * x - 1 - 4 * y * y + 4 * y);  			Vector3 dir = new Vector3 (r * (2 * x - 1)' r * (2 * y - 1)' -8 * x * x + 8 * x - 8 * y * y + 8 * y - 3);  			dir = dir * 0.5f + Vector3.one * 0.5f;  			texture2D.SetPixel (i' j' new Color (dir.x' dir.y' dir.z' 1));  		}  		else {  			texture2D.SetPixel (i' j' new Color (0.5f' 0.5f' 0' 1));  		}  	}  }  
Magic Number,Paraphernalia.Utils,TextureGenerator,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Utils\TextureGenerator.cs,SphericalMapping,The following statement contains a magic number: for (int j = 0; j < height; j++) {  	for (int i = 0; i < width; i++) {  		float x = (float)i / (float)width;  		float y = (float)j / (float)height;  		float d = Vector2.Distance (Vector2.one * 0.5f' new Vector2 (x' y));  		if (d <= 0.5f) {  			float r = 2 * Mathf.Sqrt (-4 * x * x + 4 * x - 1 - 4 * y * y + 4 * y);  			Vector3 dir = new Vector3 (r * (2 * x - 1)' r * (2 * y - 1)' -8 * x * x + 8 * x - 8 * y * y + 8 * y - 3);  			dir = dir * 0.5f + Vector3.one * 0.5f;  			texture2D.SetPixel (i' j' new Color (dir.x' dir.y' dir.z' 1));  		}  		else {  			texture2D.SetPixel (i' j' new Color (0.5f' 0.5f' 0' 1));  		}  	}  }  
Magic Number,Paraphernalia.Utils,TextureGenerator,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Utils\TextureGenerator.cs,SphericalMapping,The following statement contains a magic number: for (int j = 0; j < height; j++) {  	for (int i = 0; i < width; i++) {  		float x = (float)i / (float)width;  		float y = (float)j / (float)height;  		float d = Vector2.Distance (Vector2.one * 0.5f' new Vector2 (x' y));  		if (d <= 0.5f) {  			float r = 2 * Mathf.Sqrt (-4 * x * x + 4 * x - 1 - 4 * y * y + 4 * y);  			Vector3 dir = new Vector3 (r * (2 * x - 1)' r * (2 * y - 1)' -8 * x * x + 8 * x - 8 * y * y + 8 * y - 3);  			dir = dir * 0.5f + Vector3.one * 0.5f;  			texture2D.SetPixel (i' j' new Color (dir.x' dir.y' dir.z' 1));  		}  		else {  			texture2D.SetPixel (i' j' new Color (0.5f' 0.5f' 0' 1));  		}  	}  }  
Magic Number,Paraphernalia.Utils,TextureGenerator,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Utils\TextureGenerator.cs,SphericalMapping,The following statement contains a magic number: for (int j = 0; j < height; j++) {  	for (int i = 0; i < width; i++) {  		float x = (float)i / (float)width;  		float y = (float)j / (float)height;  		float d = Vector2.Distance (Vector2.one * 0.5f' new Vector2 (x' y));  		if (d <= 0.5f) {  			float r = 2 * Mathf.Sqrt (-4 * x * x + 4 * x - 1 - 4 * y * y + 4 * y);  			Vector3 dir = new Vector3 (r * (2 * x - 1)' r * (2 * y - 1)' -8 * x * x + 8 * x - 8 * y * y + 8 * y - 3);  			dir = dir * 0.5f + Vector3.one * 0.5f;  			texture2D.SetPixel (i' j' new Color (dir.x' dir.y' dir.z' 1));  		}  		else {  			texture2D.SetPixel (i' j' new Color (0.5f' 0.5f' 0' 1));  		}  	}  }  
Magic Number,Paraphernalia.Utils,TextureGenerator,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Utils\TextureGenerator.cs,SphericalMapping,The following statement contains a magic number: for (int j = 0; j < height; j++) {  	for (int i = 0; i < width; i++) {  		float x = (float)i / (float)width;  		float y = (float)j / (float)height;  		float d = Vector2.Distance (Vector2.one * 0.5f' new Vector2 (x' y));  		if (d <= 0.5f) {  			float r = 2 * Mathf.Sqrt (-4 * x * x + 4 * x - 1 - 4 * y * y + 4 * y);  			Vector3 dir = new Vector3 (r * (2 * x - 1)' r * (2 * y - 1)' -8 * x * x + 8 * x - 8 * y * y + 8 * y - 3);  			dir = dir * 0.5f + Vector3.one * 0.5f;  			texture2D.SetPixel (i' j' new Color (dir.x' dir.y' dir.z' 1));  		}  		else {  			texture2D.SetPixel (i' j' new Color (0.5f' 0.5f' 0' 1));  		}  	}  }  
Magic Number,Paraphernalia.Utils,TextureGenerator,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Utils\TextureGenerator.cs,SphericalMapping,The following statement contains a magic number: for (int j = 0; j < height; j++) {  	for (int i = 0; i < width; i++) {  		float x = (float)i / (float)width;  		float y = (float)j / (float)height;  		float d = Vector2.Distance (Vector2.one * 0.5f' new Vector2 (x' y));  		if (d <= 0.5f) {  			float r = 2 * Mathf.Sqrt (-4 * x * x + 4 * x - 1 - 4 * y * y + 4 * y);  			Vector3 dir = new Vector3 (r * (2 * x - 1)' r * (2 * y - 1)' -8 * x * x + 8 * x - 8 * y * y + 8 * y - 3);  			dir = dir * 0.5f + Vector3.one * 0.5f;  			texture2D.SetPixel (i' j' new Color (dir.x' dir.y' dir.z' 1));  		}  		else {  			texture2D.SetPixel (i' j' new Color (0.5f' 0.5f' 0' 1));  		}  	}  }  
Magic Number,Paraphernalia.Utils,TextureGenerator,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Utils\TextureGenerator.cs,SphericalMapping,The following statement contains a magic number: for (int j = 0; j < height; j++) {  	for (int i = 0; i < width; i++) {  		float x = (float)i / (float)width;  		float y = (float)j / (float)height;  		float d = Vector2.Distance (Vector2.one * 0.5f' new Vector2 (x' y));  		if (d <= 0.5f) {  			float r = 2 * Mathf.Sqrt (-4 * x * x + 4 * x - 1 - 4 * y * y + 4 * y);  			Vector3 dir = new Vector3 (r * (2 * x - 1)' r * (2 * y - 1)' -8 * x * x + 8 * x - 8 * y * y + 8 * y - 3);  			dir = dir * 0.5f + Vector3.one * 0.5f;  			texture2D.SetPixel (i' j' new Color (dir.x' dir.y' dir.z' 1));  		}  		else {  			texture2D.SetPixel (i' j' new Color (0.5f' 0.5f' 0' 1));  		}  	}  }  
Magic Number,Paraphernalia.Utils,TextureGenerator,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Utils\TextureGenerator.cs,SphericalMapping,The following statement contains a magic number: for (int j = 0; j < height; j++) {  	for (int i = 0; i < width; i++) {  		float x = (float)i / (float)width;  		float y = (float)j / (float)height;  		float d = Vector2.Distance (Vector2.one * 0.5f' new Vector2 (x' y));  		if (d <= 0.5f) {  			float r = 2 * Mathf.Sqrt (-4 * x * x + 4 * x - 1 - 4 * y * y + 4 * y);  			Vector3 dir = new Vector3 (r * (2 * x - 1)' r * (2 * y - 1)' -8 * x * x + 8 * x - 8 * y * y + 8 * y - 3);  			dir = dir * 0.5f + Vector3.one * 0.5f;  			texture2D.SetPixel (i' j' new Color (dir.x' dir.y' dir.z' 1));  		}  		else {  			texture2D.SetPixel (i' j' new Color (0.5f' 0.5f' 0' 1));  		}  	}  }  
Magic Number,Paraphernalia.Utils,TextureGenerator,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Utils\TextureGenerator.cs,SphericalMapping,The following statement contains a magic number: for (int j = 0; j < height; j++) {  	for (int i = 0; i < width; i++) {  		float x = (float)i / (float)width;  		float y = (float)j / (float)height;  		float d = Vector2.Distance (Vector2.one * 0.5f' new Vector2 (x' y));  		if (d <= 0.5f) {  			float r = 2 * Mathf.Sqrt (-4 * x * x + 4 * x - 1 - 4 * y * y + 4 * y);  			Vector3 dir = new Vector3 (r * (2 * x - 1)' r * (2 * y - 1)' -8 * x * x + 8 * x - 8 * y * y + 8 * y - 3);  			dir = dir * 0.5f + Vector3.one * 0.5f;  			texture2D.SetPixel (i' j' new Color (dir.x' dir.y' dir.z' 1));  		}  		else {  			texture2D.SetPixel (i' j' new Color (0.5f' 0.5f' 0' 1));  		}  	}  }  
Magic Number,Paraphernalia.Utils,TextureGenerator,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Utils\TextureGenerator.cs,SphericalMapping,The following statement contains a magic number: for (int j = 0; j < height; j++) {  	for (int i = 0; i < width; i++) {  		float x = (float)i / (float)width;  		float y = (float)j / (float)height;  		float d = Vector2.Distance (Vector2.one * 0.5f' new Vector2 (x' y));  		if (d <= 0.5f) {  			float r = 2 * Mathf.Sqrt (-4 * x * x + 4 * x - 1 - 4 * y * y + 4 * y);  			Vector3 dir = new Vector3 (r * (2 * x - 1)' r * (2 * y - 1)' -8 * x * x + 8 * x - 8 * y * y + 8 * y - 3);  			dir = dir * 0.5f + Vector3.one * 0.5f;  			texture2D.SetPixel (i' j' new Color (dir.x' dir.y' dir.z' 1));  		}  		else {  			texture2D.SetPixel (i' j' new Color (0.5f' 0.5f' 0' 1));  		}  	}  }  
Magic Number,Paraphernalia.Utils,TextureGenerator,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Utils\TextureGenerator.cs,SphericalMapping,The following statement contains a magic number: for (int j = 0; j < height; j++) {  	for (int i = 0; i < width; i++) {  		float x = (float)i / (float)width;  		float y = (float)j / (float)height;  		float d = Vector2.Distance (Vector2.one * 0.5f' new Vector2 (x' y));  		if (d <= 0.5f) {  			float r = 2 * Mathf.Sqrt (-4 * x * x + 4 * x - 1 - 4 * y * y + 4 * y);  			Vector3 dir = new Vector3 (r * (2 * x - 1)' r * (2 * y - 1)' -8 * x * x + 8 * x - 8 * y * y + 8 * y - 3);  			dir = dir * 0.5f + Vector3.one * 0.5f;  			texture2D.SetPixel (i' j' new Color (dir.x' dir.y' dir.z' 1));  		}  		else {  			texture2D.SetPixel (i' j' new Color (0.5f' 0.5f' 0' 1));  		}  	}  }  
Magic Number,Paraphernalia.Utils,TextureGenerator,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Utils\TextureGenerator.cs,SphericalMapping,The following statement contains a magic number: for (int j = 0; j < height; j++) {  	for (int i = 0; i < width; i++) {  		float x = (float)i / (float)width;  		float y = (float)j / (float)height;  		float d = Vector2.Distance (Vector2.one * 0.5f' new Vector2 (x' y));  		if (d <= 0.5f) {  			float r = 2 * Mathf.Sqrt (-4 * x * x + 4 * x - 1 - 4 * y * y + 4 * y);  			Vector3 dir = new Vector3 (r * (2 * x - 1)' r * (2 * y - 1)' -8 * x * x + 8 * x - 8 * y * y + 8 * y - 3);  			dir = dir * 0.5f + Vector3.one * 0.5f;  			texture2D.SetPixel (i' j' new Color (dir.x' dir.y' dir.z' 1));  		}  		else {  			texture2D.SetPixel (i' j' new Color (0.5f' 0.5f' 0' 1));  		}  	}  }  
Magic Number,Paraphernalia.Utils,TextureGenerator,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Utils\TextureGenerator.cs,SphericalMapping,The following statement contains a magic number: for (int i = 0; i < width; i++) {  	float x = (float)i / (float)width;  	float y = (float)j / (float)height;  	float d = Vector2.Distance (Vector2.one * 0.5f' new Vector2 (x' y));  	if (d <= 0.5f) {  		float r = 2 * Mathf.Sqrt (-4 * x * x + 4 * x - 1 - 4 * y * y + 4 * y);  		Vector3 dir = new Vector3 (r * (2 * x - 1)' r * (2 * y - 1)' -8 * x * x + 8 * x - 8 * y * y + 8 * y - 3);  		dir = dir * 0.5f + Vector3.one * 0.5f;  		texture2D.SetPixel (i' j' new Color (dir.x' dir.y' dir.z' 1));  	}  	else {  		texture2D.SetPixel (i' j' new Color (0.5f' 0.5f' 0' 1));  	}  }  
Magic Number,Paraphernalia.Utils,TextureGenerator,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Utils\TextureGenerator.cs,SphericalMapping,The following statement contains a magic number: for (int i = 0; i < width; i++) {  	float x = (float)i / (float)width;  	float y = (float)j / (float)height;  	float d = Vector2.Distance (Vector2.one * 0.5f' new Vector2 (x' y));  	if (d <= 0.5f) {  		float r = 2 * Mathf.Sqrt (-4 * x * x + 4 * x - 1 - 4 * y * y + 4 * y);  		Vector3 dir = new Vector3 (r * (2 * x - 1)' r * (2 * y - 1)' -8 * x * x + 8 * x - 8 * y * y + 8 * y - 3);  		dir = dir * 0.5f + Vector3.one * 0.5f;  		texture2D.SetPixel (i' j' new Color (dir.x' dir.y' dir.z' 1));  	}  	else {  		texture2D.SetPixel (i' j' new Color (0.5f' 0.5f' 0' 1));  	}  }  
Magic Number,Paraphernalia.Utils,TextureGenerator,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Utils\TextureGenerator.cs,SphericalMapping,The following statement contains a magic number: for (int i = 0; i < width; i++) {  	float x = (float)i / (float)width;  	float y = (float)j / (float)height;  	float d = Vector2.Distance (Vector2.one * 0.5f' new Vector2 (x' y));  	if (d <= 0.5f) {  		float r = 2 * Mathf.Sqrt (-4 * x * x + 4 * x - 1 - 4 * y * y + 4 * y);  		Vector3 dir = new Vector3 (r * (2 * x - 1)' r * (2 * y - 1)' -8 * x * x + 8 * x - 8 * y * y + 8 * y - 3);  		dir = dir * 0.5f + Vector3.one * 0.5f;  		texture2D.SetPixel (i' j' new Color (dir.x' dir.y' dir.z' 1));  	}  	else {  		texture2D.SetPixel (i' j' new Color (0.5f' 0.5f' 0' 1));  	}  }  
Magic Number,Paraphernalia.Utils,TextureGenerator,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Utils\TextureGenerator.cs,SphericalMapping,The following statement contains a magic number: for (int i = 0; i < width; i++) {  	float x = (float)i / (float)width;  	float y = (float)j / (float)height;  	float d = Vector2.Distance (Vector2.one * 0.5f' new Vector2 (x' y));  	if (d <= 0.5f) {  		float r = 2 * Mathf.Sqrt (-4 * x * x + 4 * x - 1 - 4 * y * y + 4 * y);  		Vector3 dir = new Vector3 (r * (2 * x - 1)' r * (2 * y - 1)' -8 * x * x + 8 * x - 8 * y * y + 8 * y - 3);  		dir = dir * 0.5f + Vector3.one * 0.5f;  		texture2D.SetPixel (i' j' new Color (dir.x' dir.y' dir.z' 1));  	}  	else {  		texture2D.SetPixel (i' j' new Color (0.5f' 0.5f' 0' 1));  	}  }  
Magic Number,Paraphernalia.Utils,TextureGenerator,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Utils\TextureGenerator.cs,SphericalMapping,The following statement contains a magic number: for (int i = 0; i < width; i++) {  	float x = (float)i / (float)width;  	float y = (float)j / (float)height;  	float d = Vector2.Distance (Vector2.one * 0.5f' new Vector2 (x' y));  	if (d <= 0.5f) {  		float r = 2 * Mathf.Sqrt (-4 * x * x + 4 * x - 1 - 4 * y * y + 4 * y);  		Vector3 dir = new Vector3 (r * (2 * x - 1)' r * (2 * y - 1)' -8 * x * x + 8 * x - 8 * y * y + 8 * y - 3);  		dir = dir * 0.5f + Vector3.one * 0.5f;  		texture2D.SetPixel (i' j' new Color (dir.x' dir.y' dir.z' 1));  	}  	else {  		texture2D.SetPixel (i' j' new Color (0.5f' 0.5f' 0' 1));  	}  }  
Magic Number,Paraphernalia.Utils,TextureGenerator,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Utils\TextureGenerator.cs,SphericalMapping,The following statement contains a magic number: for (int i = 0; i < width; i++) {  	float x = (float)i / (float)width;  	float y = (float)j / (float)height;  	float d = Vector2.Distance (Vector2.one * 0.5f' new Vector2 (x' y));  	if (d <= 0.5f) {  		float r = 2 * Mathf.Sqrt (-4 * x * x + 4 * x - 1 - 4 * y * y + 4 * y);  		Vector3 dir = new Vector3 (r * (2 * x - 1)' r * (2 * y - 1)' -8 * x * x + 8 * x - 8 * y * y + 8 * y - 3);  		dir = dir * 0.5f + Vector3.one * 0.5f;  		texture2D.SetPixel (i' j' new Color (dir.x' dir.y' dir.z' 1));  	}  	else {  		texture2D.SetPixel (i' j' new Color (0.5f' 0.5f' 0' 1));  	}  }  
Magic Number,Paraphernalia.Utils,TextureGenerator,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Utils\TextureGenerator.cs,SphericalMapping,The following statement contains a magic number: for (int i = 0; i < width; i++) {  	float x = (float)i / (float)width;  	float y = (float)j / (float)height;  	float d = Vector2.Distance (Vector2.one * 0.5f' new Vector2 (x' y));  	if (d <= 0.5f) {  		float r = 2 * Mathf.Sqrt (-4 * x * x + 4 * x - 1 - 4 * y * y + 4 * y);  		Vector3 dir = new Vector3 (r * (2 * x - 1)' r * (2 * y - 1)' -8 * x * x + 8 * x - 8 * y * y + 8 * y - 3);  		dir = dir * 0.5f + Vector3.one * 0.5f;  		texture2D.SetPixel (i' j' new Color (dir.x' dir.y' dir.z' 1));  	}  	else {  		texture2D.SetPixel (i' j' new Color (0.5f' 0.5f' 0' 1));  	}  }  
Magic Number,Paraphernalia.Utils,TextureGenerator,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Utils\TextureGenerator.cs,SphericalMapping,The following statement contains a magic number: for (int i = 0; i < width; i++) {  	float x = (float)i / (float)width;  	float y = (float)j / (float)height;  	float d = Vector2.Distance (Vector2.one * 0.5f' new Vector2 (x' y));  	if (d <= 0.5f) {  		float r = 2 * Mathf.Sqrt (-4 * x * x + 4 * x - 1 - 4 * y * y + 4 * y);  		Vector3 dir = new Vector3 (r * (2 * x - 1)' r * (2 * y - 1)' -8 * x * x + 8 * x - 8 * y * y + 8 * y - 3);  		dir = dir * 0.5f + Vector3.one * 0.5f;  		texture2D.SetPixel (i' j' new Color (dir.x' dir.y' dir.z' 1));  	}  	else {  		texture2D.SetPixel (i' j' new Color (0.5f' 0.5f' 0' 1));  	}  }  
Magic Number,Paraphernalia.Utils,TextureGenerator,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Utils\TextureGenerator.cs,SphericalMapping,The following statement contains a magic number: for (int i = 0; i < width; i++) {  	float x = (float)i / (float)width;  	float y = (float)j / (float)height;  	float d = Vector2.Distance (Vector2.one * 0.5f' new Vector2 (x' y));  	if (d <= 0.5f) {  		float r = 2 * Mathf.Sqrt (-4 * x * x + 4 * x - 1 - 4 * y * y + 4 * y);  		Vector3 dir = new Vector3 (r * (2 * x - 1)' r * (2 * y - 1)' -8 * x * x + 8 * x - 8 * y * y + 8 * y - 3);  		dir = dir * 0.5f + Vector3.one * 0.5f;  		texture2D.SetPixel (i' j' new Color (dir.x' dir.y' dir.z' 1));  	}  	else {  		texture2D.SetPixel (i' j' new Color (0.5f' 0.5f' 0' 1));  	}  }  
Magic Number,Paraphernalia.Utils,TextureGenerator,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Utils\TextureGenerator.cs,SphericalMapping,The following statement contains a magic number: for (int i = 0; i < width; i++) {  	float x = (float)i / (float)width;  	float y = (float)j / (float)height;  	float d = Vector2.Distance (Vector2.one * 0.5f' new Vector2 (x' y));  	if (d <= 0.5f) {  		float r = 2 * Mathf.Sqrt (-4 * x * x + 4 * x - 1 - 4 * y * y + 4 * y);  		Vector3 dir = new Vector3 (r * (2 * x - 1)' r * (2 * y - 1)' -8 * x * x + 8 * x - 8 * y * y + 8 * y - 3);  		dir = dir * 0.5f + Vector3.one * 0.5f;  		texture2D.SetPixel (i' j' new Color (dir.x' dir.y' dir.z' 1));  	}  	else {  		texture2D.SetPixel (i' j' new Color (0.5f' 0.5f' 0' 1));  	}  }  
Magic Number,Paraphernalia.Utils,TextureGenerator,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Utils\TextureGenerator.cs,SphericalMapping,The following statement contains a magic number: for (int i = 0; i < width; i++) {  	float x = (float)i / (float)width;  	float y = (float)j / (float)height;  	float d = Vector2.Distance (Vector2.one * 0.5f' new Vector2 (x' y));  	if (d <= 0.5f) {  		float r = 2 * Mathf.Sqrt (-4 * x * x + 4 * x - 1 - 4 * y * y + 4 * y);  		Vector3 dir = new Vector3 (r * (2 * x - 1)' r * (2 * y - 1)' -8 * x * x + 8 * x - 8 * y * y + 8 * y - 3);  		dir = dir * 0.5f + Vector3.one * 0.5f;  		texture2D.SetPixel (i' j' new Color (dir.x' dir.y' dir.z' 1));  	}  	else {  		texture2D.SetPixel (i' j' new Color (0.5f' 0.5f' 0' 1));  	}  }  
Magic Number,Paraphernalia.Utils,TextureGenerator,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Utils\TextureGenerator.cs,SphericalMapping,The following statement contains a magic number: for (int i = 0; i < width; i++) {  	float x = (float)i / (float)width;  	float y = (float)j / (float)height;  	float d = Vector2.Distance (Vector2.one * 0.5f' new Vector2 (x' y));  	if (d <= 0.5f) {  		float r = 2 * Mathf.Sqrt (-4 * x * x + 4 * x - 1 - 4 * y * y + 4 * y);  		Vector3 dir = new Vector3 (r * (2 * x - 1)' r * (2 * y - 1)' -8 * x * x + 8 * x - 8 * y * y + 8 * y - 3);  		dir = dir * 0.5f + Vector3.one * 0.5f;  		texture2D.SetPixel (i' j' new Color (dir.x' dir.y' dir.z' 1));  	}  	else {  		texture2D.SetPixel (i' j' new Color (0.5f' 0.5f' 0' 1));  	}  }  
Magic Number,Paraphernalia.Utils,TextureGenerator,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Utils\TextureGenerator.cs,SphericalMapping,The following statement contains a magic number: if (d <= 0.5f) {  	float r = 2 * Mathf.Sqrt (-4 * x * x + 4 * x - 1 - 4 * y * y + 4 * y);  	Vector3 dir = new Vector3 (r * (2 * x - 1)' r * (2 * y - 1)' -8 * x * x + 8 * x - 8 * y * y + 8 * y - 3);  	dir = dir * 0.5f + Vector3.one * 0.5f;  	texture2D.SetPixel (i' j' new Color (dir.x' dir.y' dir.z' 1));  }  else {  	texture2D.SetPixel (i' j' new Color (0.5f' 0.5f' 0' 1));  }  
Magic Number,Paraphernalia.Utils,TextureGenerator,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Utils\TextureGenerator.cs,SphericalMapping,The following statement contains a magic number: if (d <= 0.5f) {  	float r = 2 * Mathf.Sqrt (-4 * x * x + 4 * x - 1 - 4 * y * y + 4 * y);  	Vector3 dir = new Vector3 (r * (2 * x - 1)' r * (2 * y - 1)' -8 * x * x + 8 * x - 8 * y * y + 8 * y - 3);  	dir = dir * 0.5f + Vector3.one * 0.5f;  	texture2D.SetPixel (i' j' new Color (dir.x' dir.y' dir.z' 1));  }  else {  	texture2D.SetPixel (i' j' new Color (0.5f' 0.5f' 0' 1));  }  
Magic Number,Paraphernalia.Utils,TextureGenerator,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Utils\TextureGenerator.cs,SphericalMapping,The following statement contains a magic number: if (d <= 0.5f) {  	float r = 2 * Mathf.Sqrt (-4 * x * x + 4 * x - 1 - 4 * y * y + 4 * y);  	Vector3 dir = new Vector3 (r * (2 * x - 1)' r * (2 * y - 1)' -8 * x * x + 8 * x - 8 * y * y + 8 * y - 3);  	dir = dir * 0.5f + Vector3.one * 0.5f;  	texture2D.SetPixel (i' j' new Color (dir.x' dir.y' dir.z' 1));  }  else {  	texture2D.SetPixel (i' j' new Color (0.5f' 0.5f' 0' 1));  }  
Magic Number,Paraphernalia.Utils,TextureGenerator,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Utils\TextureGenerator.cs,SphericalMapping,The following statement contains a magic number: if (d <= 0.5f) {  	float r = 2 * Mathf.Sqrt (-4 * x * x + 4 * x - 1 - 4 * y * y + 4 * y);  	Vector3 dir = new Vector3 (r * (2 * x - 1)' r * (2 * y - 1)' -8 * x * x + 8 * x - 8 * y * y + 8 * y - 3);  	dir = dir * 0.5f + Vector3.one * 0.5f;  	texture2D.SetPixel (i' j' new Color (dir.x' dir.y' dir.z' 1));  }  else {  	texture2D.SetPixel (i' j' new Color (0.5f' 0.5f' 0' 1));  }  
Magic Number,Paraphernalia.Utils,TextureGenerator,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Utils\TextureGenerator.cs,SphericalMapping,The following statement contains a magic number: if (d <= 0.5f) {  	float r = 2 * Mathf.Sqrt (-4 * x * x + 4 * x - 1 - 4 * y * y + 4 * y);  	Vector3 dir = new Vector3 (r * (2 * x - 1)' r * (2 * y - 1)' -8 * x * x + 8 * x - 8 * y * y + 8 * y - 3);  	dir = dir * 0.5f + Vector3.one * 0.5f;  	texture2D.SetPixel (i' j' new Color (dir.x' dir.y' dir.z' 1));  }  else {  	texture2D.SetPixel (i' j' new Color (0.5f' 0.5f' 0' 1));  }  
Magic Number,Paraphernalia.Utils,TextureGenerator,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Utils\TextureGenerator.cs,SphericalMapping,The following statement contains a magic number: if (d <= 0.5f) {  	float r = 2 * Mathf.Sqrt (-4 * x * x + 4 * x - 1 - 4 * y * y + 4 * y);  	Vector3 dir = new Vector3 (r * (2 * x - 1)' r * (2 * y - 1)' -8 * x * x + 8 * x - 8 * y * y + 8 * y - 3);  	dir = dir * 0.5f + Vector3.one * 0.5f;  	texture2D.SetPixel (i' j' new Color (dir.x' dir.y' dir.z' 1));  }  else {  	texture2D.SetPixel (i' j' new Color (0.5f' 0.5f' 0' 1));  }  
Magic Number,Paraphernalia.Utils,TextureGenerator,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Utils\TextureGenerator.cs,SphericalMapping,The following statement contains a magic number: if (d <= 0.5f) {  	float r = 2 * Mathf.Sqrt (-4 * x * x + 4 * x - 1 - 4 * y * y + 4 * y);  	Vector3 dir = new Vector3 (r * (2 * x - 1)' r * (2 * y - 1)' -8 * x * x + 8 * x - 8 * y * y + 8 * y - 3);  	dir = dir * 0.5f + Vector3.one * 0.5f;  	texture2D.SetPixel (i' j' new Color (dir.x' dir.y' dir.z' 1));  }  else {  	texture2D.SetPixel (i' j' new Color (0.5f' 0.5f' 0' 1));  }  
Magic Number,Paraphernalia.Utils,TextureGenerator,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Utils\TextureGenerator.cs,SphericalMapping,The following statement contains a magic number: if (d <= 0.5f) {  	float r = 2 * Mathf.Sqrt (-4 * x * x + 4 * x - 1 - 4 * y * y + 4 * y);  	Vector3 dir = new Vector3 (r * (2 * x - 1)' r * (2 * y - 1)' -8 * x * x + 8 * x - 8 * y * y + 8 * y - 3);  	dir = dir * 0.5f + Vector3.one * 0.5f;  	texture2D.SetPixel (i' j' new Color (dir.x' dir.y' dir.z' 1));  }  else {  	texture2D.SetPixel (i' j' new Color (0.5f' 0.5f' 0' 1));  }  
Magic Number,Paraphernalia.Utils,TextureGenerator,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Utils\TextureGenerator.cs,SphericalMapping,The following statement contains a magic number: if (d <= 0.5f) {  	float r = 2 * Mathf.Sqrt (-4 * x * x + 4 * x - 1 - 4 * y * y + 4 * y);  	Vector3 dir = new Vector3 (r * (2 * x - 1)' r * (2 * y - 1)' -8 * x * x + 8 * x - 8 * y * y + 8 * y - 3);  	dir = dir * 0.5f + Vector3.one * 0.5f;  	texture2D.SetPixel (i' j' new Color (dir.x' dir.y' dir.z' 1));  }  else {  	texture2D.SetPixel (i' j' new Color (0.5f' 0.5f' 0' 1));  }  
Magic Number,Paraphernalia.Utils,TextureGenerator,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Utils\TextureGenerator.cs,SphericalMapping,The following statement contains a magic number: if (d <= 0.5f) {  	float r = 2 * Mathf.Sqrt (-4 * x * x + 4 * x - 1 - 4 * y * y + 4 * y);  	Vector3 dir = new Vector3 (r * (2 * x - 1)' r * (2 * y - 1)' -8 * x * x + 8 * x - 8 * y * y + 8 * y - 3);  	dir = dir * 0.5f + Vector3.one * 0.5f;  	texture2D.SetPixel (i' j' new Color (dir.x' dir.y' dir.z' 1));  }  else {  	texture2D.SetPixel (i' j' new Color (0.5f' 0.5f' 0' 1));  }  
Magic Number,Paraphernalia.Utils,TextureGenerator,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Utils\TextureGenerator.cs,SphericalMapping,The following statement contains a magic number: if (d <= 0.5f) {  	float r = 2 * Mathf.Sqrt (-4 * x * x + 4 * x - 1 - 4 * y * y + 4 * y);  	Vector3 dir = new Vector3 (r * (2 * x - 1)' r * (2 * y - 1)' -8 * x * x + 8 * x - 8 * y * y + 8 * y - 3);  	dir = dir * 0.5f + Vector3.one * 0.5f;  	texture2D.SetPixel (i' j' new Color (dir.x' dir.y' dir.z' 1));  }  else {  	texture2D.SetPixel (i' j' new Color (0.5f' 0.5f' 0' 1));  }  
Magic Number,Paraphernalia.Utils,TextureGenerator,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Utils\TextureGenerator.cs,SphericalMapping,The following statement contains a magic number: if (d <= 0.5f) {  	float r = 2 * Mathf.Sqrt (-4 * x * x + 4 * x - 1 - 4 * y * y + 4 * y);  	Vector3 dir = new Vector3 (r * (2 * x - 1)' r * (2 * y - 1)' -8 * x * x + 8 * x - 8 * y * y + 8 * y - 3);  	dir = dir * 0.5f + Vector3.one * 0.5f;  	texture2D.SetPixel (i' j' new Color (dir.x' dir.y' dir.z' 1));  }  else {  	texture2D.SetPixel (i' j' new Color (0.5f' 0.5f' 0' 1));  }  
Magic Number,Paraphernalia.Utils,TextureGenerator,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Utils\TextureGenerator.cs,CylindricalMapping,The following statement contains a magic number: for (int j = 0; j < height; j++) {  	for (int i = 0; i < width; i++) {  		float a = (((float)i / (float)width) - 0.25f) * Mathf.PI * 2;  		float x = -Mathf.Cos (a);  		float y = Mathf.Sin (a);  		Vector3 dir = new Vector3 (x' 0' y);  		float b = ((float)j / (float)height);  		if (b > 0.5f)  			dir = Vector3.Slerp (dir' Vector3.up' (b - 0.5f) * 2);  		else  			dir = Vector3.Slerp (dir' -Vector3.up' 1 - b * 2);  		dir = dir * 0.5f + Vector3.one * 0.5f;  		texture2D.SetPixel (i' j' new Color (dir.x' dir.y' dir.z' 1));  	}  }  
Magic Number,Paraphernalia.Utils,TextureGenerator,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Utils\TextureGenerator.cs,CylindricalMapping,The following statement contains a magic number: for (int j = 0; j < height; j++) {  	for (int i = 0; i < width; i++) {  		float a = (((float)i / (float)width) - 0.25f) * Mathf.PI * 2;  		float x = -Mathf.Cos (a);  		float y = Mathf.Sin (a);  		Vector3 dir = new Vector3 (x' 0' y);  		float b = ((float)j / (float)height);  		if (b > 0.5f)  			dir = Vector3.Slerp (dir' Vector3.up' (b - 0.5f) * 2);  		else  			dir = Vector3.Slerp (dir' -Vector3.up' 1 - b * 2);  		dir = dir * 0.5f + Vector3.one * 0.5f;  		texture2D.SetPixel (i' j' new Color (dir.x' dir.y' dir.z' 1));  	}  }  
Magic Number,Paraphernalia.Utils,TextureGenerator,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Utils\TextureGenerator.cs,CylindricalMapping,The following statement contains a magic number: for (int j = 0; j < height; j++) {  	for (int i = 0; i < width; i++) {  		float a = (((float)i / (float)width) - 0.25f) * Mathf.PI * 2;  		float x = -Mathf.Cos (a);  		float y = Mathf.Sin (a);  		Vector3 dir = new Vector3 (x' 0' y);  		float b = ((float)j / (float)height);  		if (b > 0.5f)  			dir = Vector3.Slerp (dir' Vector3.up' (b - 0.5f) * 2);  		else  			dir = Vector3.Slerp (dir' -Vector3.up' 1 - b * 2);  		dir = dir * 0.5f + Vector3.one * 0.5f;  		texture2D.SetPixel (i' j' new Color (dir.x' dir.y' dir.z' 1));  	}  }  
Magic Number,Paraphernalia.Utils,TextureGenerator,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Utils\TextureGenerator.cs,CylindricalMapping,The following statement contains a magic number: for (int i = 0; i < width; i++) {  	float a = (((float)i / (float)width) - 0.25f) * Mathf.PI * 2;  	float x = -Mathf.Cos (a);  	float y = Mathf.Sin (a);  	Vector3 dir = new Vector3 (x' 0' y);  	float b = ((float)j / (float)height);  	if (b > 0.5f)  		dir = Vector3.Slerp (dir' Vector3.up' (b - 0.5f) * 2);  	else  		dir = Vector3.Slerp (dir' -Vector3.up' 1 - b * 2);  	dir = dir * 0.5f + Vector3.one * 0.5f;  	texture2D.SetPixel (i' j' new Color (dir.x' dir.y' dir.z' 1));  }  
Magic Number,Paraphernalia.Utils,TextureGenerator,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Utils\TextureGenerator.cs,CylindricalMapping,The following statement contains a magic number: for (int i = 0; i < width; i++) {  	float a = (((float)i / (float)width) - 0.25f) * Mathf.PI * 2;  	float x = -Mathf.Cos (a);  	float y = Mathf.Sin (a);  	Vector3 dir = new Vector3 (x' 0' y);  	float b = ((float)j / (float)height);  	if (b > 0.5f)  		dir = Vector3.Slerp (dir' Vector3.up' (b - 0.5f) * 2);  	else  		dir = Vector3.Slerp (dir' -Vector3.up' 1 - b * 2);  	dir = dir * 0.5f + Vector3.one * 0.5f;  	texture2D.SetPixel (i' j' new Color (dir.x' dir.y' dir.z' 1));  }  
Magic Number,Paraphernalia.Utils,TextureGenerator,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Utils\TextureGenerator.cs,CylindricalMapping,The following statement contains a magic number: for (int i = 0; i < width; i++) {  	float a = (((float)i / (float)width) - 0.25f) * Mathf.PI * 2;  	float x = -Mathf.Cos (a);  	float y = Mathf.Sin (a);  	Vector3 dir = new Vector3 (x' 0' y);  	float b = ((float)j / (float)height);  	if (b > 0.5f)  		dir = Vector3.Slerp (dir' Vector3.up' (b - 0.5f) * 2);  	else  		dir = Vector3.Slerp (dir' -Vector3.up' 1 - b * 2);  	dir = dir * 0.5f + Vector3.one * 0.5f;  	texture2D.SetPixel (i' j' new Color (dir.x' dir.y' dir.z' 1));  }  
Magic Number,Paraphernalia.Utils,TextureGenerator,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Utils\TextureGenerator.cs,CylindricalMapping,The following statement contains a magic number: if (b > 0.5f)  	dir = Vector3.Slerp (dir' Vector3.up' (b - 0.5f) * 2);  else  	dir = Vector3.Slerp (dir' -Vector3.up' 1 - b * 2);  
Magic Number,Paraphernalia.Utils,TextureGenerator,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Utils\TextureGenerator.cs,CylindricalMapping,The following statement contains a magic number: if (b > 0.5f)  	dir = Vector3.Slerp (dir' Vector3.up' (b - 0.5f) * 2);  else  	dir = Vector3.Slerp (dir' -Vector3.up' 1 - b * 2);  
Magic Number,Paraphernalia.Utils,TextureGenerator,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Utils\TextureGenerator.cs,CylindricalMapping,The following statement contains a magic number: dir = Vector3.Slerp (dir' Vector3.up' (b - 0.5f) * 2);  
Magic Number,Paraphernalia.Utils,TextureGenerator,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Utils\TextureGenerator.cs,CylindricalMapping,The following statement contains a magic number: dir = Vector3.Slerp (dir' -Vector3.up' 1 - b * 2);  
Magic Number,Paraphernalia.Utils,Triangulator,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Utils\Triangulator.cs,Triangulate,The following statement contains a magic number: if (n < 3)  	return indices.ToArray ();  
Magic Number,Paraphernalia.Utils,Triangulator,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Utils\Triangulator.cs,Triangulate,The following statement contains a magic number: for (int m = 0' v = nv - 1; nv > 2;) {  	if ((count--) <= 0)  		return indices.ToArray ();  	int u = v;  	if (nv <= u)  		u = 0;  	v = u + 1;  	if (nv <= v)  		v = 0;  	int w = v + 1;  	if (nv <= w)  		w = 0;  	if (Snip (points' u' v' w' nv' V)) {  		int a' b' c' s' t;  		a = V [u];  		b = V [v];  		c = V [w];  		indices.Add (a);  		indices.Add (b);  		indices.Add (c);  		m++;  		for (s = v' t = v + 1; t < nv; s++' t++)  			V [s] = V [t];  		nv--;  		count = 2 * nv;  	}  }  
Magic Number,Paraphernalia.Utils,Triangulator,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Utils\Triangulator.cs,Triangulate,The following statement contains a magic number: for (int m = 0' v = nv - 1; nv > 2;) {  	if ((count--) <= 0)  		return indices.ToArray ();  	int u = v;  	if (nv <= u)  		u = 0;  	v = u + 1;  	if (nv <= v)  		v = 0;  	int w = v + 1;  	if (nv <= w)  		w = 0;  	if (Snip (points' u' v' w' nv' V)) {  		int a' b' c' s' t;  		a = V [u];  		b = V [v];  		c = V [w];  		indices.Add (a);  		indices.Add (b);  		indices.Add (c);  		m++;  		for (s = v' t = v + 1; t < nv; s++' t++)  			V [s] = V [t];  		nv--;  		count = 2 * nv;  	}  }  
Magic Number,Paraphernalia.Utils,Triangulator,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Utils\Triangulator.cs,Triangulate,The following statement contains a magic number: if (Snip (points' u' v' w' nv' V)) {  	int a' b' c' s' t;  	a = V [u];  	b = V [v];  	c = V [w];  	indices.Add (a);  	indices.Add (b);  	indices.Add (c);  	m++;  	for (s = v' t = v + 1; t < nv; s++' t++)  		V [s] = V [t];  	nv--;  	count = 2 * nv;  }  
Magic Number,Paraphernalia.Utils,Triangulator,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Utils\Triangulator.cs,Triangulate,The following statement contains a magic number: count = 2 * nv;  
Magic Number,PrettyPoly,PrettyPoly,C:\repos\Dolphiniac_Swarm\Assets\PrettyPoly\Scripts\PrettyPoly.cs,GetCatmullRom,The following statement contains a magic number: if (len <= 2)  	return points;  
Magic Number,PrettyPoly,PrettyPoly,C:\repos\Dolphiniac_Swarm\Assets\PrettyPoly\Scripts\PrettyPoly.cs,GetCatmullRom,The following statement contains a magic number: for (int i = 0; i < len; i++) {  	PrettyPolyPoint prev = points [(i - 1 + len) % len];  	PrettyPolyPoint start = points [i];  	PrettyPolyPoint end = points [(i + 1) % len];  	PrettyPolyPoint next = points [(i + 2) % len];  	if (!closed) {  		if (i == 0)  			prev = start;  		else if (i == len - 2)  			next = end;  		else if (i == len - 1)  			return newPoints.ToArray ();  	}  	for (float j = 0; j < subdivisions; j++) {  		float t = j / (float)subdivisions;  		Vector3 pos = Interpolate.CatmullRom (prev.position' start.position' end.position' next.position' t);  		PrettyPolyPoint prettyPolyPoint = new PrettyPolyPoint (pos);  		prettyPolyPoint.color = Color.Lerp (start.color' end.color' t);  		prettyPolyPoint.size = Mathf.Lerp (start.size' end.size' t);  		newPoints.Add (prettyPolyPoint);  	}  }  
Magic Number,PrettyPoly,PrettyPoly,C:\repos\Dolphiniac_Swarm\Assets\PrettyPoly\Scripts\PrettyPoly.cs,GetCatmullRom,The following statement contains a magic number: for (int i = 0; i < len; i++) {  	PrettyPolyPoint prev = points [(i - 1 + len) % len];  	PrettyPolyPoint start = points [i];  	PrettyPolyPoint end = points [(i + 1) % len];  	PrettyPolyPoint next = points [(i + 2) % len];  	if (!closed) {  		if (i == 0)  			prev = start;  		else if (i == len - 2)  			next = end;  		else if (i == len - 1)  			return newPoints.ToArray ();  	}  	for (float j = 0; j < subdivisions; j++) {  		float t = j / (float)subdivisions;  		Vector3 pos = Interpolate.CatmullRom (prev.position' start.position' end.position' next.position' t);  		PrettyPolyPoint prettyPolyPoint = new PrettyPolyPoint (pos);  		prettyPolyPoint.color = Color.Lerp (start.color' end.color' t);  		prettyPolyPoint.size = Mathf.Lerp (start.size' end.size' t);  		newPoints.Add (prettyPolyPoint);  	}  }  
Magic Number,PrettyPoly,PrettyPoly,C:\repos\Dolphiniac_Swarm\Assets\PrettyPoly\Scripts\PrettyPoly.cs,GetCatmullRom,The following statement contains a magic number: if (!closed) {  	if (i == 0)  		prev = start;  	else if (i == len - 2)  		next = end;  	else if (i == len - 1)  		return newPoints.ToArray ();  }  
Magic Number,PrettyPoly,PrettyPoly,C:\repos\Dolphiniac_Swarm\Assets\PrettyPoly\Scripts\PrettyPoly.cs,GetCatmullRom,The following statement contains a magic number: if (i == 0)  	prev = start;  else if (i == len - 2)  	next = end;  else if (i == len - 1)  	return newPoints.ToArray ();  
Magic Number,PrettyPoly,PrettyPoly,C:\repos\Dolphiniac_Swarm\Assets\PrettyPoly\Scripts\PrettyPoly.cs,GetCatmullRom,The following statement contains a magic number: if (i == len - 2)  	next = end;  else if (i == len - 1)  	return newPoints.ToArray ();  
Magic Number,PrettyPoly,PrettyPoly,C:\repos\Dolphiniac_Swarm\Assets\PrettyPoly\Scripts\PrettyPoly.cs,GetCubicBezier,The following statement contains a magic number: if (len <= 2)  	return points;  
Magic Number,PrettyPoly,PrettyPolyLayer,C:\repos\Dolphiniac_Swarm\Assets\PrettyPoly\Scripts\PrettyPolyLayer.cs,PrettyPolyLayer,The following statement contains a magic number: minTileSize = 100;  
Magic Number,PrettyPoly,PrettyPolyLayer,C:\repos\Dolphiniac_Swarm\Assets\PrettyPoly\Scripts\PrettyPolyLayer.cs,ExistsInDirection,The following statement contains a magic number: return (dev <= 1 - angularPlacementRange * 2);  
Magic Number,PrettyPoly,PrettyPolyLayer,C:\repos\Dolphiniac_Swarm\Assets\PrettyPoly\Scripts\PrettyPolyLayer.cs,GetDirection,The following statement contains a magic number: if (alternateAngles && (index % 2) == 1)  	a = 180 - a;  
Magic Number,PrettyPoly,PrettyPolyLayer,C:\repos\Dolphiniac_Swarm\Assets\PrettyPoly\Scripts\PrettyPolyLayer.cs,GetDirection,The following statement contains a magic number: if (alternateAngles && (index % 2) == 1)  	a = 180 - a;  
Magic Number,PrettyPoly,PrettyPolyLayer,C:\repos\Dolphiniac_Swarm\Assets\PrettyPoly\Scripts\PrettyPolyLayer.cs,GetDirection,The following statement contains a magic number: a = 180 - a;  
Magic Number,PrettyPoly,PrettyPolyMeshLayer,C:\repos\Dolphiniac_Swarm\Assets\PrettyPoly\Scripts\PrettyPolyMeshLayer.cs,GetMesh,The following statement contains a magic number: if (positions.Length < 2)  	return null;  
Magic Number,PrettyPoly,PrettyPolyMeshLayer,C:\repos\Dolphiniac_Swarm\Assets\PrettyPoly\Scripts\PrettyPolyMeshLayer.cs,AddLine,The following statement contains a magic number: for (int i = 1; i < segments; i++) {  	Random.seed = index + seed;  	prev = curr;  	curr = next;  	next = future;  	future = points [(i + 2) % points.Length];  	currDir = nextDir;  	nextDir = futureDir;  	futureDir = (future - next).normalized;  	prevOut = currOut;  	currOut = nextOut;  	nextOut = Vector3.Cross (futureDir' -Vector3.forward);  	prevOutExists = currOutExists;  	currOutExists = nextOutExists;  	nextOutExists = ExistsInDirection (nextOut);  	currCavity = nextCavity;  	nextCavity = Vector3.Cross (currOut' nextOut).z;  	distTraveled += Vector3.Distance (curr' next);  	float t = distTraveled / pathLength;  	float size = GetSize (t);  	Color c = GetShiftedColor (color' t);  	if (currOutExists) {  		Vector3 a = curr;  		Vector3 b = next;  		Line2D lineA = new Line2D (prevOut' prevOut + currDir);  		Line2D lineB = new Line2D (currOut' currOut + nextDir);  		Line2D lineC = new Line2D (nextOut' nextOut + futureDir);  		Vector3 abIntersect = (Vector3)lineA.Intersect (lineB);  		Vector3 bcIntersect = (Vector3)lineB.Intersect (lineC);  		if (prevOutExists && currCavity < 0) {  			switch (outerJoinType) {  			case JoinType.Miter:  				AddMiter (curr' currOut' prevOut' size' c' false' ref index' ref uvFrac);  				break;  			case JoinType.Bevel:  				AddBevel (curr' currOut' prevOut' abIntersect' size' c' false' ref index' ref uvFrac);  				break;  			case JoinType.Rounded:  				float rot = Vector3.Angle (prevOut' currOut);  				AddRound (curr' currOut' prevOut' rot' size' c' false' ref index' ref uvFrac);  				break;  			}  		}  		if (prevOutExists && currCavity > 0) {  			a = curr + (abIntersect - currOut) * size;  			Vector3 pivot = curr + abIntersect * size;  			switch (innerJoinType) {  			case JoinType.Miter:  				AddMiter (pivot' -currOut' -prevOut' size' c' true' ref index' ref uvFrac);  				break;  			case JoinType.Bevel:  				AddBevel (pivot' -currOut' -prevOut' -abIntersect' size' c' true' ref index' ref uvFrac);  				break;  			case JoinType.Rounded:  				float rot = Vector3.Angle (prevOut' currOut);  				AddRound (pivot' -prevOut' -currOut' rot' size' c' true' ref index' ref uvFrac);  				break;  			}  		}  		if (nextOutExists && nextCavity > 0) {  			b = next + (bcIntersect - currOut) * size;  		}  		AddLineSegment (a' b' currOut' size' c' ref index' ref uvFrac);  	}  }  
Magic Number,PrettyPoly,PrettyPolyMeshLayer,C:\repos\Dolphiniac_Swarm\Assets\PrettyPoly\Scripts\PrettyPolyMeshLayer.cs,AddLine,The following statement contains a magic number: future = points [(i + 2) % points.Length];  
Magic Number,PrettyPoly,PrettyPolyMeshLayer,C:\repos\Dolphiniac_Swarm\Assets\PrettyPoly\Scripts\PrettyPolyMeshLayer.cs,AddRound,The following statement contains a magic number: uvs.AddRange (new Vector2[] {  	(quadUVs [2] + quadUVs [3]) * 0.5f'  	quadUVs [0]  });  
Magic Number,PrettyPoly,PrettyPolyMeshLayer,C:\repos\Dolphiniac_Swarm\Assets\PrettyPoly\Scripts\PrettyPolyMeshLayer.cs,AddRound,The following statement contains a magic number: uvs.AddRange (new Vector2[] {  	(quadUVs [2] + quadUVs [3]) * 0.5f'  	quadUVs [0]  });  
Magic Number,PrettyPoly,PrettyPolyMeshLayer,C:\repos\Dolphiniac_Swarm\Assets\PrettyPoly\Scripts\PrettyPolyMeshLayer.cs,AddRound,The following statement contains a magic number: index += segments + 2;  
Magic Number,PrettyPoly,PrettyPolyMeshLayer,C:\repos\Dolphiniac_Swarm\Assets\PrettyPoly\Scripts\PrettyPolyMeshLayer.cs,AddMiter,The following statement contains a magic number: uvs.AddRange (new Vector2[] {  	quadUVs [0]'  	quadUVs [1]'  	(quadUVs [2] + quadUVs [3]) * 0.5f  });  
Magic Number,PrettyPoly,PrettyPolyMeshLayer,C:\repos\Dolphiniac_Swarm\Assets\PrettyPoly\Scripts\PrettyPolyMeshLayer.cs,AddMiter,The following statement contains a magic number: uvs.AddRange (new Vector2[] {  	quadUVs [0]'  	quadUVs [1]'  	(quadUVs [2] + quadUVs [3]) * 0.5f  });  
Magic Number,PrettyPoly,PrettyPolyMeshLayer,C:\repos\Dolphiniac_Swarm\Assets\PrettyPoly\Scripts\PrettyPolyMeshLayer.cs,AddMiter,The following statement contains a magic number: tris.AddRange (new int[] {  	index'  	index + 1'  	index + 2  });  
Magic Number,PrettyPoly,PrettyPolyMeshLayer,C:\repos\Dolphiniac_Swarm\Assets\PrettyPoly\Scripts\PrettyPolyMeshLayer.cs,AddMiter,The following statement contains a magic number: index += 3;  
Magic Number,PrettyPoly,PrettyPolyMeshLayer,C:\repos\Dolphiniac_Swarm\Assets\PrettyPoly\Scripts\PrettyPolyMeshLayer.cs,AddBevel,The following statement contains a magic number: uvs.AddRange (new Vector2[] {  	quadUVs [0]'  	quadUVs [1]'  	quadUVs [0]'  	quadUVs [3]  });  
Magic Number,PrettyPoly,PrettyPolyMeshLayer,C:\repos\Dolphiniac_Swarm\Assets\PrettyPoly\Scripts\PrettyPolyMeshLayer.cs,AddBevel,The following statement contains a magic number: tris.AddRange (new int[] {  	index'  	index + 1'  	index + 3'  	index + 1'  	index + 2'  	index + 3  });  
Magic Number,PrettyPoly,PrettyPolyMeshLayer,C:\repos\Dolphiniac_Swarm\Assets\PrettyPoly\Scripts\PrettyPolyMeshLayer.cs,AddBevel,The following statement contains a magic number: tris.AddRange (new int[] {  	index'  	index + 1'  	index + 3'  	index + 1'  	index + 2'  	index + 3  });  
Magic Number,PrettyPoly,PrettyPolyMeshLayer,C:\repos\Dolphiniac_Swarm\Assets\PrettyPoly\Scripts\PrettyPolyMeshLayer.cs,AddBevel,The following statement contains a magic number: tris.AddRange (new int[] {  	index'  	index + 1'  	index + 3'  	index + 1'  	index + 2'  	index + 3  });  
Magic Number,PrettyPoly,PrettyPolyMeshLayer,C:\repos\Dolphiniac_Swarm\Assets\PrettyPoly\Scripts\PrettyPolyMeshLayer.cs,AddBevel,The following statement contains a magic number: index += 4;  
Magic Number,PrettyPoly,PrettyPolyMeshLayer,C:\repos\Dolphiniac_Swarm\Assets\PrettyPoly\Scripts\PrettyPolyMeshLayer.cs,AddLineSegment,The following statement contains a magic number: while (distTraveled < dist) {  	verts.AddRange (new Vector3[] {  		curr + outward'  		next + outward'  		next'  		curr  	});  	uvs.AddRange (GetSpriteUVs (uvFrac' nextUvFrac));  	colors.AddRange (new Color[] {  		c'  		c'  		c'  		c  	});  	norms.AddRange (new Vector3[] {  		-Vector3.forward'  		-Vector3.forward'  		-Vector3.forward'  		-Vector3.forward  	});  	tans.AddRange (new Vector4[] {  		tan'  		tan'  		tan'  		tan  	});  	tris.AddRange (new int[] {  		index'  		index + 1'  		index + 3'  		index + 1'  		index + 2'  		index + 3  	});  	index += 4;  	distTraveled += distToNext;  	uvFrac = nextUvFrac % 1f;  	distToNext = Mathf.Min (segLen * (1 - uvFrac)' dist - distTraveled);  	nextUvFrac = uvFrac + (distToNext / segLen);  	curr = next;  	next = curr + dir * distToNext;  }  
Magic Number,PrettyPoly,PrettyPolyMeshLayer,C:\repos\Dolphiniac_Swarm\Assets\PrettyPoly\Scripts\PrettyPolyMeshLayer.cs,AddLineSegment,The following statement contains a magic number: while (distTraveled < dist) {  	verts.AddRange (new Vector3[] {  		curr + outward'  		next + outward'  		next'  		curr  	});  	uvs.AddRange (GetSpriteUVs (uvFrac' nextUvFrac));  	colors.AddRange (new Color[] {  		c'  		c'  		c'  		c  	});  	norms.AddRange (new Vector3[] {  		-Vector3.forward'  		-Vector3.forward'  		-Vector3.forward'  		-Vector3.forward  	});  	tans.AddRange (new Vector4[] {  		tan'  		tan'  		tan'  		tan  	});  	tris.AddRange (new int[] {  		index'  		index + 1'  		index + 3'  		index + 1'  		index + 2'  		index + 3  	});  	index += 4;  	distTraveled += distToNext;  	uvFrac = nextUvFrac % 1f;  	distToNext = Mathf.Min (segLen * (1 - uvFrac)' dist - distTraveled);  	nextUvFrac = uvFrac + (distToNext / segLen);  	curr = next;  	next = curr + dir * distToNext;  }  
Magic Number,PrettyPoly,PrettyPolyMeshLayer,C:\repos\Dolphiniac_Swarm\Assets\PrettyPoly\Scripts\PrettyPolyMeshLayer.cs,AddLineSegment,The following statement contains a magic number: while (distTraveled < dist) {  	verts.AddRange (new Vector3[] {  		curr + outward'  		next + outward'  		next'  		curr  	});  	uvs.AddRange (GetSpriteUVs (uvFrac' nextUvFrac));  	colors.AddRange (new Color[] {  		c'  		c'  		c'  		c  	});  	norms.AddRange (new Vector3[] {  		-Vector3.forward'  		-Vector3.forward'  		-Vector3.forward'  		-Vector3.forward  	});  	tans.AddRange (new Vector4[] {  		tan'  		tan'  		tan'  		tan  	});  	tris.AddRange (new int[] {  		index'  		index + 1'  		index + 3'  		index + 1'  		index + 2'  		index + 3  	});  	index += 4;  	distTraveled += distToNext;  	uvFrac = nextUvFrac % 1f;  	distToNext = Mathf.Min (segLen * (1 - uvFrac)' dist - distTraveled);  	nextUvFrac = uvFrac + (distToNext / segLen);  	curr = next;  	next = curr + dir * distToNext;  }  
Magic Number,PrettyPoly,PrettyPolyMeshLayer,C:\repos\Dolphiniac_Swarm\Assets\PrettyPoly\Scripts\PrettyPolyMeshLayer.cs,AddLineSegment,The following statement contains a magic number: while (distTraveled < dist) {  	verts.AddRange (new Vector3[] {  		curr + outward'  		next + outward'  		next'  		curr  	});  	uvs.AddRange (GetSpriteUVs (uvFrac' nextUvFrac));  	colors.AddRange (new Color[] {  		c'  		c'  		c'  		c  	});  	norms.AddRange (new Vector3[] {  		-Vector3.forward'  		-Vector3.forward'  		-Vector3.forward'  		-Vector3.forward  	});  	tans.AddRange (new Vector4[] {  		tan'  		tan'  		tan'  		tan  	});  	tris.AddRange (new int[] {  		index'  		index + 1'  		index + 3'  		index + 1'  		index + 2'  		index + 3  	});  	index += 4;  	distTraveled += distToNext;  	uvFrac = nextUvFrac % 1f;  	distToNext = Mathf.Min (segLen * (1 - uvFrac)' dist - distTraveled);  	nextUvFrac = uvFrac + (distToNext / segLen);  	curr = next;  	next = curr + dir * distToNext;  }  
Magic Number,PrettyPoly,PrettyPolyMeshLayer,C:\repos\Dolphiniac_Swarm\Assets\PrettyPoly\Scripts\PrettyPolyMeshLayer.cs,AddLineSegment,The following statement contains a magic number: tris.AddRange (new int[] {  	index'  	index + 1'  	index + 3'  	index + 1'  	index + 2'  	index + 3  });  
Magic Number,PrettyPoly,PrettyPolyMeshLayer,C:\repos\Dolphiniac_Swarm\Assets\PrettyPoly\Scripts\PrettyPolyMeshLayer.cs,AddLineSegment,The following statement contains a magic number: tris.AddRange (new int[] {  	index'  	index + 1'  	index + 3'  	index + 1'  	index + 2'  	index + 3  });  
Magic Number,PrettyPoly,PrettyPolyMeshLayer,C:\repos\Dolphiniac_Swarm\Assets\PrettyPoly\Scripts\PrettyPolyMeshLayer.cs,AddLineSegment,The following statement contains a magic number: tris.AddRange (new int[] {  	index'  	index + 1'  	index + 3'  	index + 1'  	index + 2'  	index + 3  });  
Magic Number,PrettyPoly,PrettyPolyMeshLayer,C:\repos\Dolphiniac_Swarm\Assets\PrettyPoly\Scripts\PrettyPolyMeshLayer.cs,AddLineSegment,The following statement contains a magic number: index += 4;  
Magic Number,PrettyPoly,PrettyPolyMeshLayer,C:\repos\Dolphiniac_Swarm\Assets\PrettyPoly\Scripts\PrettyPolyMeshLayer.cs,AddStrokeQuad,The following statement contains a magic number: tris.AddRange (new int[] {  	index + 3'  	index + 2'  	index'  	index + 2'  	index + 1'  	index  });  
Magic Number,PrettyPoly,PrettyPolyMeshLayer,C:\repos\Dolphiniac_Swarm\Assets\PrettyPoly\Scripts\PrettyPolyMeshLayer.cs,AddStrokeQuad,The following statement contains a magic number: tris.AddRange (new int[] {  	index + 3'  	index + 2'  	index'  	index + 2'  	index + 1'  	index  });  
Magic Number,PrettyPoly,PrettyPolyMeshLayer,C:\repos\Dolphiniac_Swarm\Assets\PrettyPoly\Scripts\PrettyPolyMeshLayer.cs,AddStrokeQuad,The following statement contains a magic number: tris.AddRange (new int[] {  	index + 3'  	index + 2'  	index'  	index + 2'  	index + 1'  	index  });  
Magic Number,PrettyPoly,PrettyPolyMeshLayer,C:\repos\Dolphiniac_Swarm\Assets\PrettyPoly\Scripts\PrettyPolyMeshLayer.cs,AddStrokeQuad,The following statement contains a magic number: index += 4;  
Magic Number,PrettyPoly,PrettyPolyObjectLayer,C:\repos\Dolphiniac_Swarm\Assets\PrettyPoly\Scripts\PrettyPolyObjectLayer.cs,UpdateObjects,The following statement contains a magic number: if (prefab == null || points.Length < 2)  	return;  
Duplicate Code,Paraphernalia.Utils,ColladaExporter,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Utils\ColladaExporter.cs,AddGeometry,The method contains a code clone-set at the following line numbers (starting from the method definition): ((42' 67)' (160' 185))
Missing Default,Paraphernalia.Extensions,CubemapExtensions,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Extensions\CubemapExtensions.cs,GetColorInDirection,The following switch statement is missing a default case: switch (face) {  case CubemapFace.PositiveX:  	p = new Plane (-Vector3.right' 1);  	p.Raycast (ray' out d);  	pos = ray.GetPoint (d);  	x = -0.5f * pos.z + 0.5f;  	y = -0.5f * pos.y + 0.5f;  	break;  case CubemapFace.NegativeX:  	p = new Plane (Vector3.right' 1);  	p.Raycast (ray' out d);  	pos = ray.GetPoint (d);  	x = 0.5f * pos.z + 0.5f;  	y = -0.5f * pos.y + 0.5f;  	break;  case CubemapFace.PositiveY:  	p = new Plane (-Vector3.up' 1);  	p.Raycast (ray' out d);  	pos = ray.GetPoint (d);  	x = 0.5f * pos.x + 0.5f;  	y = 0.5f * pos.z + 0.5f;  	break;  case CubemapFace.NegativeY:  	p = new Plane (Vector3.up' 1);  	p.Raycast (ray' out d);  	pos = ray.GetPoint (d);  	x = 0.5f * pos.x + 0.5f;  	y = -0.5f * pos.z + 0.5f;  	break;  case CubemapFace.PositiveZ:  	p = new Plane (-Vector3.forward' 1);  	p.Raycast (ray' out d);  	pos = ray.GetPoint (d);  	x = 0.5f * pos.x + 0.5f;  	y = -0.5f * pos.y + 0.5f;  	break;  case CubemapFace.NegativeZ:  	p = new Plane (Vector3.forward' 1);  	p.Raycast (ray' out d);  	pos = ray.GetPoint (d);  	x = -0.5f * pos.x + 0.5f;  	y = -0.5f * pos.y + 0.5f;  	break;  }  
Missing Default,Paraphernalia.Extensions,CubemapExtensions,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Extensions\CubemapExtensions.cs,SaveToPNG,The following switch statement is missing a default case: switch (mapping) {  case CubeMappingType.Cylindrical:  	cubemap.SaveToCylindricalPNG (path);  	break;  case CubeMappingType.Spherical:  	cubemap.SaveToSphericalPNG (path);  	break;  case CubeMappingType.Faces4x3:  	cubemap.SaveTo4x3PNG (path);  	break;  case CubeMappingType.Faces3x4:  	cubemap.SaveTo3x4PNG (path);  	break;  case CubeMappingType.Faces6x1:  	cubemap.SaveTo6x1PNG (path);  	break;  case CubeMappingType.Faces1x6:  	cubemap.SaveTo1x6PNG (path);  	break;  }  
Missing Default,Paraphernalia.Extensions,Rigidbody2DExtensions,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Extensions\Rigidbody2DExtensions.cs,AddForce,The following switch statement is missing a default case: switch (mode) {  case ForceMode.Force:  	rigidbody2D.AddForce (force);  	break;  case ForceMode.Impulse:  	rigidbody2D.AddForce (force / Time.fixedDeltaTime);  	break;  case ForceMode.Acceleration:  	rigidbody2D.AddForce (force * rigidbody2D.mass);  	break;  case ForceMode.VelocityChange:  	rigidbody2D.AddForce (force * rigidbody2D.mass / Time.fixedDeltaTime);  	break;  }  
Missing Default,Paraphernalia.Utils,Interpolate,C:\repos\Dolphiniac_Swarm\Assets\Paraphernalia\Utils\Interpolate.cs,Ease,The following switch statement is missing a default case: switch (type) {  case EaseType.Linear:  	f = Interpolate.Linear;  	break;  case EaseType.EaseInQuad:  	f = Interpolate.EaseInQuad;  	break;  case EaseType.EaseOutQuad:  	f = Interpolate.EaseOutQuad;  	break;  case EaseType.EaseInOutQuad:  	f = Interpolate.EaseInOutQuad;  	break;  case EaseType.EaseInCubic:  	f = Interpolate.EaseInCubic;  	break;  case EaseType.EaseOutCubic:  	f = Interpolate.EaseOutCubic;  	break;  case EaseType.EaseInOutCubic:  	f = Interpolate.EaseInOutCubic;  	break;  case EaseType.EaseInQuart:  	f = Interpolate.EaseInQuart;  	break;  case EaseType.EaseOutQuart:  	f = Interpolate.EaseOutQuart;  	break;  case EaseType.EaseInOutQuart:  	f = Interpolate.EaseInOutQuart;  	break;  case EaseType.EaseInQuint:  	f = Interpolate.EaseInQuint;  	break;  case EaseType.EaseOutQuint:  	f = Interpolate.EaseOutQuint;  	break;  case EaseType.EaseInOutQuint:  	f = Interpolate.EaseInOutQuint;  	break;  case EaseType.EaseInSine:  	f = Interpolate.EaseInSine;  	break;  case EaseType.EaseOutSine:  	f = Interpolate.EaseOutSine;  	break;  case EaseType.EaseInOutSine:  	f = Interpolate.EaseInOutSine;  	break;  case EaseType.EaseInExpo:  	f = Interpolate.EaseInExpo;  	break;  case EaseType.EaseOutExpo:  	f = Interpolate.EaseOutExpo;  	break;  case EaseType.EaseInOutExpo:  	f = Interpolate.EaseInOutExpo;  	break;  case EaseType.EaseInCirc:  	f = Interpolate.EaseInCirc;  	break;  case EaseType.EaseOutCirc:  	f = Interpolate.EaseOutCirc;  	break;  case EaseType.EaseInOutCirc:  	f = Interpolate.EaseInOutCirc;  	break;  }  
Missing Default,PrettyPoly,PrettyPolyMeshLayer,C:\repos\Dolphiniac_Swarm\Assets\PrettyPoly\Scripts\PrettyPolyMeshLayer.cs,GetMesh,The following switch statement is missing a default case: switch (layerType) {  case (LayerType.Stroke):  	AddStroke (positions' pathLength' closed);  	break;  case (LayerType.Line):  	AddLine (positions' pathLength' closed);  	break;  case (LayerType.InnerFill):  	AddInnerFill (positions' pathLength);  	break;  case (LayerType.StrokeFill):  	AddStrokeFill (positions' pathLength);  	break;  }  
Missing Default,PrettyPoly,PrettyPolyMeshLayer,C:\repos\Dolphiniac_Swarm\Assets\PrettyPoly\Scripts\PrettyPolyMeshLayer.cs,AddLine,The following switch statement is missing a default case: switch (outerJoinType) {  case JoinType.Miter:  	AddMiter (curr' currOut' prevOut' size' c' false' ref index' ref uvFrac);  	break;  case JoinType.Bevel:  	AddBevel (curr' currOut' prevOut' abIntersect' size' c' false' ref index' ref uvFrac);  	break;  case JoinType.Rounded:  	float rot = Vector3.Angle (prevOut' currOut);  	AddRound (curr' currOut' prevOut' rot' size' c' false' ref index' ref uvFrac);  	break;  }  
Missing Default,PrettyPoly,PrettyPolyMeshLayer,C:\repos\Dolphiniac_Swarm\Assets\PrettyPoly\Scripts\PrettyPolyMeshLayer.cs,AddLine,The following switch statement is missing a default case: switch (innerJoinType) {  case JoinType.Miter:  	AddMiter (pivot' -currOut' -prevOut' size' c' true' ref index' ref uvFrac);  	break;  case JoinType.Bevel:  	AddBevel (pivot' -currOut' -prevOut' -abIntersect' size' c' true' ref index' ref uvFrac);  	break;  case JoinType.Rounded:  	float rot = Vector3.Angle (prevOut' currOut);  	AddRound (pivot' -prevOut' -currOut' rot' size' c' true' ref index' ref uvFrac);  	break;  }  
Missing Default,PrettyPoly,PrettyPolyObjectLayer,C:\repos\Dolphiniac_Swarm\Assets\PrettyPoly\Scripts\PrettyPolyObjectLayer.cs,UpdateObjects,The following switch statement is missing a default case: switch (layerType) {  case (LayerType.Stroke):  	AddStroke (root' positions' pathLength' closed);  	break;  case (LayerType.InnerFill):  	AddInnerFill (root' positions' pathLength);  	break;  }  
