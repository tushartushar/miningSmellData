Implementation smell,Namespace,Class,File,Method,Description
Long Identifier,AppHarbor,AccessTokenConfiguration,C:\repos\appharbor_appharbor-cli\src\AppHarbor\AccessTokenConfiguration.cs,,The length of the parameter TokenEnvironmentVariableTarget is 30.
Long Statement,AppHarbor,ApplicationConfiguration,C:\repos\appharbor_appharbor-cli\src\AppHarbor\ApplicationConfiguration.cs,GetApplicationId,The length of the statement  "			throw new ApplicationConfigurationException("Application is not configured in this directory. Configure it by creating (\"create\") an application or by linking (\"link\") an existing application."); " is 199.
Long Statement,AppHarbor,ApplicationConfiguration,C:\repos\appharbor_appharbor-cli\src\AppHarbor\ApplicationConfiguration.cs,SetupApplication,The length of the statement  "			_writer.WriteLine("Wrote application configuration to {0}. Make sure not to delete this file"' ConfigurationFile.FullName); " is 123.
Long Statement,AppHarbor,CommandDispatcher,C:\repos\appharbor_appharbor-cli\src\AppHarbor\CommandDispatcher.cs,Dispatch,The length of the statement  "			var commandTypeNameCandidate = commandArguments.Any() ? string.Concat(commandArguments.Skip(1).FirstOrDefault()' args[0]) : "help"; " is 131.
Long Statement,AppHarbor,CommandDispatcher,C:\repos\appharbor_appharbor-cli\src\AppHarbor\CommandDispatcher.cs,Dispatch,The length of the statement  "				throw new DispatchException(string.Format("The command \"{0}\" doesn't match a command name or alias"' string.Join(" "' args))); " is 128.
Long Statement,AppHarbor.Commands,DeployAppCommand,C:\repos\appharbor_appharbor-cli\src\AppHarbor\Commands\DeployAppCommand.cs,InnerExecute,The length of the statement  "				using (var packageStream = new FileStream(temporaryFileName' FileMode.Create' FileAccess.ReadWrite' FileShare.ReadWrite)) " is 121.
Empty Catch Block,AppHarbor,AliasMatcher,C:\repos\appharbor_appharbor-cli\src\AppHarbor\AliasMatcher.cs,IsSatisfiedBy,The method has an empty catch block.
Empty Catch Block,AppHarbor,ApplicationConfiguration,C:\repos\appharbor_appharbor-cli\src\AppHarbor\ApplicationConfiguration.cs,GetApplicationId,The method has an empty catch block.
Empty Catch Block,AppHarbor,ApplicationConfiguration,C:\repos\appharbor_appharbor-cli\src\AppHarbor\ApplicationConfiguration.cs,GetApplicationId,The method has an empty catch block.
Empty Catch Block,AppHarbor,ApplicationConfiguration,C:\repos\appharbor_appharbor-cli\src\AppHarbor\ApplicationConfiguration.cs,RemoveConfiguration,The method has an empty catch block.
Empty Catch Block,AppHarbor,TypeNameMatcher<T>,C:\repos\appharbor_appharbor-cli\src\AppHarbor\TypeNameMatcher.cs,GetMatchedType,The method has an empty catch block.
Empty Catch Block,AppHarbor,TypeNameMatcher<T>,C:\repos\appharbor_appharbor-cli\src\AppHarbor\TypeNameMatcher.cs,IsSatisfiedBy,The method has an empty catch block.
Magic Number,AppHarbor,CommandDispatcher,C:\repos\appharbor_appharbor-cli\src\AppHarbor\CommandDispatcher.cs,Dispatch,The following statement contains a magic number: var commandArguments = args.TakeWhile(x => !x.StartsWith("-")).Take(2);
Magic Number,AppHarbor,ConsoleProgressBar,C:\repos\appharbor_appharbor-cli\src\AppHarbor\ConsoleProgressBar.cs,Update,The following statement contains a magic number: if (secondsSinceLastAverage > 2)  			{  				if (_lastProgressEvent.Key != DateTime.MinValue)  				{  					var itemsSinceLastProgress = processedItems - _lastProgressEvent.Value;    					var itemsPerSecond = itemsSinceLastProgress / secondsSinceLastAverage;  					_perSecondAverages.Add(itemsPerSecond);  					if (_perSecondAverages.Count() > 20)  					{  						_perSecondAverages.RemoveAt(0);  					}  				}  				_lastProgressEvent = new KeyValuePair<DateTime' double>(DateTime.Now' processedItems);  			}
Magic Number,AppHarbor,ConsoleProgressBar,C:\repos\appharbor_appharbor-cli\src\AppHarbor\ConsoleProgressBar.cs,Update,The following statement contains a magic number: if (secondsSinceLastAverage > 2)  			{  				if (_lastProgressEvent.Key != DateTime.MinValue)  				{  					var itemsSinceLastProgress = processedItems - _lastProgressEvent.Value;    					var itemsPerSecond = itemsSinceLastProgress / secondsSinceLastAverage;  					_perSecondAverages.Add(itemsPerSecond);  					if (_perSecondAverages.Count() > 20)  					{  						_perSecondAverages.RemoveAt(0);  					}  				}  				_lastProgressEvent = new KeyValuePair<DateTime' double>(DateTime.Now' processedItems);  			}
Magic Number,AppHarbor,ConsoleProgressBar,C:\repos\appharbor_appharbor-cli\src\AppHarbor\ConsoleProgressBar.cs,Update,The following statement contains a magic number: var percentDone = (processedItems * 100) / totalItems;
Magic Number,AppHarbor,ConsoleProgressBar,C:\repos\appharbor_appharbor-cli\src\AppHarbor\ConsoleProgressBar.cs,OverwriteConsoleMessage,The following statement contains a magic number: if (message.Length > maxCharacterWidth)  			{  				message = message.Substring(0' maxCharacterWidth - 3) + "...";  			}
Magic Number,AppHarbor,ConsoleProgressBar,C:\repos\appharbor_appharbor-cli\src\AppHarbor\ConsoleProgressBar.cs,WeightedAverage,The following statement contains a magic number: var averageWeight = 50;
Magic Number,AppHarbor,ConsoleProgressBar,C:\repos\appharbor_appharbor-cli\src\AppHarbor\ConsoleProgressBar.cs,WeightedAverage,The following statement contains a magic number: var startWeight = averageWeight - spread / 2;
Magic Number,AppHarbor,TimeSpanExtensions,C:\repos\appharbor_appharbor-cli\src\AppHarbor\TimeSpanExtensions.cs,GetHumanized,The following statement contains a magic number: if (timeSpan.TotalSeconds < 60)  			{  				unit = "second";  				value = timeSpan.TotalSeconds;  			}  			else if (timeSpan.TotalMinutes < 60)  			{  				unit = "minute";  				value = timeSpan.TotalMinutes;  			}  			else if (timeSpan.TotalHours < 24)  			{  				unit = "hour";  				value = timeSpan.TotalHours;  			}  			else  			{  				unit = "day";  				value = timeSpan.Days;  			}
Magic Number,AppHarbor,TimeSpanExtensions,C:\repos\appharbor_appharbor-cli\src\AppHarbor\TimeSpanExtensions.cs,GetHumanized,The following statement contains a magic number: if (timeSpan.TotalSeconds < 60)  			{  				unit = "second";  				value = timeSpan.TotalSeconds;  			}  			else if (timeSpan.TotalMinutes < 60)  			{  				unit = "minute";  				value = timeSpan.TotalMinutes;  			}  			else if (timeSpan.TotalHours < 24)  			{  				unit = "hour";  				value = timeSpan.TotalHours;  			}  			else  			{  				unit = "day";  				value = timeSpan.Days;  			}
Magic Number,AppHarbor,TimeSpanExtensions,C:\repos\appharbor_appharbor-cli\src\AppHarbor\TimeSpanExtensions.cs,GetHumanized,The following statement contains a magic number: if (timeSpan.TotalSeconds < 60)  			{  				unit = "second";  				value = timeSpan.TotalSeconds;  			}  			else if (timeSpan.TotalMinutes < 60)  			{  				unit = "minute";  				value = timeSpan.TotalMinutes;  			}  			else if (timeSpan.TotalHours < 24)  			{  				unit = "hour";  				value = timeSpan.TotalHours;  			}  			else  			{  				unit = "day";  				value = timeSpan.Days;  			}
Magic Number,AppHarbor,TimeSpanExtensions,C:\repos\appharbor_appharbor-cli\src\AppHarbor\TimeSpanExtensions.cs,GetHumanized,The following statement contains a magic number: var approximateValue = ((int)Math.Round(value / 10.0)) * 10;
Magic Number,AppHarbor,TimeSpanExtensions,C:\repos\appharbor_appharbor-cli\src\AppHarbor\TimeSpanExtensions.cs,GetHumanized,The following statement contains a magic number: var approximateValue = ((int)Math.Round(value / 10.0)) * 10;
Magic Number,AppHarbor,TimeSpanExtensions,C:\repos\appharbor_appharbor-cli\src\AppHarbor\TimeSpanExtensions.cs,GetHumanized,The following statement contains a magic number: var displayValue = value < 10 ? (int)value : approximateValue;
Magic Number,AppHarbor.Commands,BuildCommand,C:\repos\appharbor_appharbor-cli\src\AppHarbor\Commands\BuildCommand.cs,InnerExecute,The following statement contains a magic number: foreach (var build in builds)  			{  				var commitId = GetShortened(build.Commit.Id' 7);    				var message = GetShortened(string.Concat(commitId' " | "' build.Commit.Message.Trim('\n'))' 40' "...");  				var buildOutput = String.Format(OutputFormat' message' build.Status' build.Deployed);    				_writer.WriteLine(buildOutput);  			}
Magic Number,AppHarbor.Commands,BuildCommand,C:\repos\appharbor_appharbor-cli\src\AppHarbor\Commands\BuildCommand.cs,InnerExecute,The following statement contains a magic number: foreach (var build in builds)  			{  				var commitId = GetShortened(build.Commit.Id' 7);    				var message = GetShortened(string.Concat(commitId' " | "' build.Commit.Message.Trim('\n'))' 40' "...");  				var buildOutput = String.Format(OutputFormat' message' build.Status' build.Deployed);    				_writer.WriteLine(buildOutput);  			}
Magic Number,AppHarbor.Commands,DeployAppCommand,C:\repos\appharbor_appharbor-cli\src\AppHarbor\Commands\DeployAppCommand.cs,InnerExecute,The following statement contains a magic number: try  			{  				using (var packageStream = new FileStream(temporaryFileName' FileMode.Create' FileAccess.ReadWrite' FileShare.ReadWrite))  				using (var gzipStream = new GZipStream(packageStream' CompressionMode.Compress' true))  				{  					_sourceDirectory.ToTar(gzipStream' excludedDirectoryNames: _excludedDirectories.ToArray());  				}    				using (var s3Client = new AmazonS3Client(uploadCredentials.GetSessionCredentials()))  				using (var transferUtility = new TransferUtility(s3Client))  				{  					var request = new TransferUtilityUploadRequest  					{  						FilePath = temporaryFileName'  						BucketName = uploadCredentials.Bucket'  						Key = uploadCredentials.ObjectKey'  						Timeout = (int)TimeSpan.FromHours(2).TotalMilliseconds'  					};    					var progressBar = new MegaByteProgressBar();  					request.UploadProgressEvent += (object x' UploadProgressArgs y) => progressBar  						.Update("Uploading package"' y.TransferredBytes' y.TotalBytes);    					transferUtility.Upload(request);    					Console.CursorTop++;  					_writer.WriteLine();  				}  			}  			finally  			{  				File.Delete(temporaryFileName);  			}
Magic Number,AppHarbor.Commands,HelpCommand,C:\repos\appharbor_appharbor-cli\src\AppHarbor\Commands\HelpCommand.cs,InnerExecute,The following statement contains a magic number: foreach (var commandType in _commandTypes.Where(x => x.IsClass)  				.OrderBy(x => GetScope(x))  				.ThenBy(x => x.Name))  			{  				var usageStringBuilder = new StringBuilder();    				var splitted = SplitUpperCase(commandType.Name).Where(x => x != "Command");  				usageStringBuilder.Append("  ");  				usageStringBuilder.Append(string.Join(" "' splitted.Reverse()));  				var helpAttribute = commandType.GetCustomAttributes(true).OfType<CommandHelpAttribute>().Single();  					usageStringBuilder.Append(string.Format(" {0}"' helpAttribute.Options));    				while (usageStringBuilder.Length < 30)  				{  					usageStringBuilder.Append(" ");  				}    				_writer.Write(usageStringBuilder.ToString().ToLower());  				_writer.Write(string.Concat("#  "' helpAttribute.Description));    				if (!string.IsNullOrEmpty(helpAttribute.Alias))  				{  					_writer.Write(" (\"{0}\")"' helpAttribute.Alias);  				}  				_writer.WriteLine();  			}
Magic Number,AppHarbor.Commands,LogAppCommand,C:\repos\appharbor_appharbor-cli\src\AppHarbor\Commands\LogAppCommand.cs,WriteColorizedLine,The following statement contains a magic number: var lineIdentifier = parsed.Groups[2].Value;
Magic Number,AppHarbor.Commands,LogAppCommand,C:\repos\appharbor_appharbor-cli\src\AppHarbor\Commands\LogAppCommand.cs,WriteColorizedLine,The following statement contains a magic number: Console.WriteLine(parsed.Groups[4].Value);
