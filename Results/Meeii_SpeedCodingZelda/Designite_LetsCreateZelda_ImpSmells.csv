Implementation smell,Namespace,Class,File,Method,Description
Complex Method,LetsCreateZelda.Components,Damage,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Components\Damage.cs,Update,Cyclomatic complexity of the method is 11
Complex Method,LetsCreateZelda.Components.Movement,AIMovementRandom,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Components\Movement\AIMovementRandom.cs,Update,Cyclomatic complexity of the method is 8
Complex Method,LetsCreateZelda.Map,Entities,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Map\Entities.cs,CheckCollision,Cyclomatic complexity of the method is 8
Long Parameter List,LetsCreateZelda.Components,Animation,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Components\Animation.cs,PlayAnimation,The method has 5 parameters. Parameters: state' direction' count' loop' forceReset
Long Parameter List,LetsCreateZelda.Components,Stats,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Components\Stats.cs,Stats,The method has 5 parameters. Parameters: statsId' health' attack' defense' speed
Long Parameter List,LetsCreateZelda.Components.Enemies,Octorok,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Components\Enemies\Octorok.cs,Octorok,The method has 5 parameters. Parameters: player' bulletTexture' map' entities' cooldown
Long Parameter List,LetsCreateZelda.Components.Items,Boomerang,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Components\Items\Boomerang.cs,LoadContent,The method has 5 parameters. Parameters: owner' content' managerMap' managerCamera' entities
Long Parameter List,LetsCreateZelda.Components.Items,Item,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Components\Items\Item.cs,LoadContent,The method has 5 parameters. Parameters: owner' content' managerMap' managerCamera' entities
Long Parameter List,LetsCreateZelda.Components.Items,Sword,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Components\Items\Sword.cs,LoadContent,The method has 5 parameters. Parameters: owner' content' managerMap' managerCamera' entities
Long Parameter List,LetsCreateZelda.Map,Entities,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Map\Entities.cs,CheckCollision,The method has 5 parameters. Parameters: rectangle' outAnimation' outBaseObject' id' checkOnlyHostile
Long Parameter List,LetsCreateZelda.Map,TileGraphic,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Map\TileGraphic.cs,TileGraphic,The method has 7 parameters. Parameters: xPos' yPos' zPos' tileFrames' animationSpeed' textureName' managerCamera
Long Statement,LetsCreateZelda,Game1,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Game1.cs,Update,The length of the statement  "            if (GamePad.GetState(PlayerIndex.One).Buttons.Back == ButtonState.Pressed || Keyboard.GetState().IsKeyDown(Keys.Escape)) " is 120.
Long Statement,LetsCreateZelda.Components,Collision,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Components\Collision.cs,CheckCollisionWithTiles,The length of the statement  "            rectangle = new Rectangle((int) (rectangle.X + (rectangle.Width*0.4)/2)'(int) (rectangle.Y + rectangle.Height*0.5)'(int) (rectangle.Width*0.6)'(int) (rectangle.Height*0.5)); " is 173.
Long Statement,LetsCreateZelda.Components,Collision,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Components\Collision.cs,CheckCollisionWithEntities,The length of the statement  "            rectangle = new Rectangle((int)(rectangle.X + (rectangle.Width * 0.4) / 2)' (int)(rectangle.Y + rectangle.Height * 0.5)' (int)(rectangle.Width * 0.6)' (int)(rectangle.Height * 0.5)); " is 182.
Long Statement,LetsCreateZelda.Components,Damage,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Components\Damage.cs,Update,The length of the statement  "            if (_hitDamage && _takingDamage == false && _entities.CheckCollision(sprite.Rectangle'out outAnimation' out outBaseObject' GetOwnerId()' true)) " is 143.
Long Statement,LetsCreateZelda.Components,Damage,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Components\Damage.cs,Update,The length of the statement  "                if(collision != null && !collision.CheckCollisionWithTiles(new Rectangle((int) (sprite.Position.X + x) '(int) (sprite.Position.Y + y)'sprite.Width'sprite.Height))) " is 163.
Long Statement,LetsCreateZelda.Components,Sprite,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Components\Sprite.cs,Draw,The length of the statement  "                spritebatch.Draw(_texture' new Rectangle((int)position.X' (int)position.Y' Width' Height)'animation.TextureRectangle'Color); " is 124.
Long Statement,LetsCreateZelda.Components.Enemies,Octorok,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Components\Enemies\Octorok.cs,NewBullet,The length of the statement  "            _bullets.Add(new OctorokBullet(new Sprite(_bulletTexture'10'10'sprite.Position)'new Collision(_map'_entities)' _player'direction)); " is 131.
Long Statement,LetsCreateZelda.Components.Enemies,OctorokBullet,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Components\Enemies\OctorokBullet.cs,Update,The length of the statement  "            if (_collision.CheckCollisionWithTiles(new Rectangle((int) _sprite.Position.X' (int) _sprite.Position.Y' _sprite.Width' _sprite.Height)' false)) " is 144.
Long Statement,LetsCreateZelda.Components.Items,Boomerang,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Components\Items\Boomerang.cs,MoveForward,The length of the statement  "                if(collision != null && collision.CheckCollisionWithTiles(new Rectangle((int) (sprite.Position.X + x)' (int) (sprite.Position.Y + y)'sprite.Width'sprite.Height))) " is 162.
Long Statement,LetsCreateZelda.Components.Items,Item,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Components\Items\Item.cs,DrawMenu,The length of the statement  "                spriteBatch.Draw(GuiTexture' new Rectangle(9 + 32 * (int)MenuPosition.X' 30 + 14 * (int)MenuPosition.Y' 22' 10)' Color.White); " is 126.
Long Statement,LetsCreateZelda.Components.Movement,AIMovementRandom,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Components\Movement\AIMovementRandom.cs,Update,The length of the statement  "           if(collision.CheckCollisionWithTiles(new Rectangle((int)(sprite.Position.X + x)' (int)(sprite.Position.Y + y)' sprite.Width' sprite.Height))) " is 141.
Long Statement,LetsCreateZelda.Manager,ManagerMap,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Manager\ManagerMap.cs,LoadContent,The length of the statement  "            dictionary.Add(0'new List<IGameEvent> { new GameEventMessage("I start tile events with id 1")' new GameEventSwitch(1' true)}); " is 126.
Long Statement,LetsCreateZelda.Map,TileCollision,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Map\TileCollision.cs,Intersect,The length of the statement  "            return ManagerCamera.InScreenCheck(position) && rectangle.Intersects(new Rectangle((int) position.X'(int) position.Y'16'16));  " is 125.
Long Statement,LetsCreateZelda.Screens,ScreenMainMenu,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Screens\ScreenMainMenu.cs,Draw,The length of the statement  "            spriteBatch.Draw(_containerTexture' new Rectangle((int) (9 + 32*_cursorPosition.X)'(int) (30 + 14*_cursorPosition.Y)' 30' 12)' _cursorBlinkCounter < 300 ? Color.White : Color.Transparent); " is 188.
Long Statement,LetsCreateZelda.Screens,ScreenMainMenu,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Screens\ScreenMainMenu.cs,DrawInstrument,The length of the statement  "                spriteBatch.Draw(_backgroundTexture' new Rectangle(120 + (int)x' 85 + (int)y' 5' 5)' new Color(_instrumentColor'255'255)); " is 122.
Long Statement,LetsCreateZelda.Screens,ScreenMainMenu,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Screens\ScreenMainMenu.cs,DrawInstrument,The length of the statement  "                spriteBatch.Draw(_backgroundTexture' new Rectangle(115 + (int)x' 85 + (int)y' 5' 5)' new Color(_instrumentColor' 255' 255)); " is 124.
Long Statement,LetsCreateZelda.Screens,ScreenMainMenu,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Screens\ScreenMainMenu.cs,DrawInstrument,The length of the statement  "                spriteBatch.Draw(_backgroundTexture' new Rectangle(115 + (int)x' 90 + (int)y' 5' 5)' new Color(_instrumentColor' 255' 255)); " is 124.
Long Statement,LetsCreateZelda.Screens,ScreenOverworldMap,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Screens\ScreenOverworldMap.cs,Draw,The length of the statement  "            spriteBatch.Draw(_playerIconTexture' new Rectangle((int)(18 + _cameraPosition.X * 8)' (int)(_cameraPosition.Y * 8 + 10)' 6' 6)' _cursorCounter > 250 ? Color.White : Color.Red); " is 176.
Long Statement,LetsCreateZelda.Screens,ScreenWorld,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Screens\ScreenWorld.cs,LoadContent,The length of the statement  "            //testNPC.AddComponent(new EventTriggerDistance(new List<IGameEvent> { new GameEventMessage("Don't get any closer!")}'  new List<BaseObject> { player}' 20' 3000)); " is 163.
Long Statement,LetsCreateZelda.Screens,ScreenWorld,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Screens\ScreenWorld.cs,LoadContent,The length of the statement  "            //    testEnemy.AddComponent(new Sprite(ManagerContent.LoadTexture("Octorok")' 16' 16' new Vector2(50 + ManagerFunction.Random(10' 20)' 50 + ManagerFunction.Random(10' 20)))); " is 175.
Long Statement,LetsCreateZelda.Screens,ScreenWorld,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Screens\ScreenWorld.cs,LoadContent,The length of the statement  "            //    testEnemy.AddComponent(new Octorok(player' ManagerContent.LoadTexture("Octorok_bullet")' _managerMap' _entities)); " is 120.
Long Statement,LetsCreateZelda.Screens,ScreenWorld,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Screens\ScreenWorld.cs,LoadContent,The length of the statement  "            //testEnemy.AddComponent(new Sprite(content.Load<Texture2D>("Octorok")' 16' 16' new Vector2(50 + ManagerFunction.Random(10' 20)' 50 + ManagerFunction.Random(10' 20)))); " is 168.
Complex Conditional,LetsCreateZelda.Components.Interaction,BlockPush,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Components\Interaction\BlockPush.cs,Update,The conditional expression  "sprite == null || playerSprite == null || playerAnimation == null || collision == null"  is complex.
Magic Number,LetsCreateZelda,Game1,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Game1.cs,Game1,The following statement contains a magic number: this.graphics.PreferredBackBufferHeight = 144;
Magic Number,LetsCreateZelda,Game1,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Game1.cs,Game1,The following statement contains a magic number: this.graphics.PreferredBackBufferWidth = 160;
Magic Number,LetsCreateZelda,Game1,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Game1.cs,Draw,The following statement contains a magic number: GraphicsDevice.Clear(new Color(196'207'161));
Magic Number,LetsCreateZelda,Game1,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Game1.cs,Draw,The following statement contains a magic number: GraphicsDevice.Clear(new Color(196'207'161));
Magic Number,LetsCreateZelda,Game1,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Game1.cs,Draw,The following statement contains a magic number: GraphicsDevice.Clear(new Color(196'207'161));
Magic Number,LetsCreateZelda.Common,OverworldMapObjects,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Common\OverworldMapObjects.cs,LoadContent,The following statement contains a magic number: _objects.Add(new Vector2(1'2)'  _mapIconOwlTexture );
Magic Number,LetsCreateZelda.Common,OverworldMapObjects,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Common\OverworldMapObjects.cs,Draw,The following statement contains a magic number: if (_objects.ContainsKey(key))              {                  spriteBatch.Draw(_objects[key]'new Rectangle(100'100'30'30)'Color.White);              }
Magic Number,LetsCreateZelda.Common,OverworldMapObjects,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Common\OverworldMapObjects.cs,Draw,The following statement contains a magic number: if (_objects.ContainsKey(key))              {                  spriteBatch.Draw(_objects[key]'new Rectangle(100'100'30'30)'Color.White);              }
Magic Number,LetsCreateZelda.Common,OverworldMapObjects,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Common\OverworldMapObjects.cs,Draw,The following statement contains a magic number: if (_objects.ContainsKey(key))              {                  spriteBatch.Draw(_objects[key]'new Rectangle(100'100'30'30)'Color.White);              }
Magic Number,LetsCreateZelda.Common,OverworldMapObjects,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Common\OverworldMapObjects.cs,Draw,The following statement contains a magic number: if (_objects.ContainsKey(key))              {                  spriteBatch.Draw(_objects[key]'new Rectangle(100'100'30'30)'Color.White);              }
Magic Number,LetsCreateZelda.Components,Animation,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Components\Animation.cs,Update,The following statement contains a magic number: if (_counter > _animationSpeed)              {                  switch (CurrentState)                  {                      case State.Walking:                          ChangeState(0' _animationFrames);                          _counter = 0;                          break;                      case State.Special:                          ChangeState(_height * 4' 1);                          _counter = 0;                          break;                      case State.Pushing:                          ChangeState(_height * 8);                          _counter = 0;                           break;                  }              }
Magic Number,LetsCreateZelda.Components,Animation,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Components\Animation.cs,Update,The following statement contains a magic number: if (_counter > _animationSpeed)              {                  switch (CurrentState)                  {                      case State.Walking:                          ChangeState(0' _animationFrames);                          _counter = 0;                          break;                      case State.Special:                          ChangeState(_height * 4' 1);                          _counter = 0;                          break;                      case State.Pushing:                          ChangeState(_height * 8);                          _counter = 0;                           break;                  }              }
Magic Number,LetsCreateZelda.Components,Animation,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Components\Animation.cs,PlayAnimation,The following statement contains a magic number: if((CurrentDirection != direction && !LockDirection) || forceReset)              {                  _counter = 1000;                  AnimationIndex = 0;              }
Magic Number,LetsCreateZelda.Components,Animation,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Components\Animation.cs,ChangeState,The following statement contains a magic number: switch (CurrentDirection)              {                  case Direction.Down:                      TextureRectangle = new Rectangle(_width * AnimationIndex' y' _width' _height);                      break;                  case Direction.Up:                      TextureRectangle = new Rectangle(_width * AnimationIndex' y + _height' _width' _height);                      break;                  case Direction.Left:                      TextureRectangle = new Rectangle(_width * AnimationIndex' y +_height * 2' _width' _height);                      break;                  case Direction.Right:                      TextureRectangle = new Rectangle(_width * AnimationIndex' y + _height * 3' _width' _height);                      break;              }
Magic Number,LetsCreateZelda.Components,Animation,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Components\Animation.cs,ChangeState,The following statement contains a magic number: switch (CurrentDirection)              {                  case Direction.Down:                      TextureRectangle = new Rectangle(_width * AnimationIndex' y' _width' _height);                      break;                  case Direction.Up:                      TextureRectangle = new Rectangle(_width * AnimationIndex' y + _height' _width' _height);                      break;                  case Direction.Left:                      TextureRectangle = new Rectangle(_width * AnimationIndex' y +_height * 2' _width' _height);                      break;                  case Direction.Right:                      TextureRectangle = new Rectangle(_width * AnimationIndex' y + _height * 3' _width' _height);                      break;              }
Magic Number,LetsCreateZelda.Components,Collision,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Components\Collision.cs,CheckCollisionWithTiles,The following statement contains a magic number: rectangle = new Rectangle((int) (rectangle.X + (rectangle.Width*0.4)/2)'(int) (rectangle.Y + rectangle.Height*0.5)'(int) (rectangle.Width*0.6)'(int) (rectangle.Height*0.5));
Magic Number,LetsCreateZelda.Components,Collision,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Components\Collision.cs,CheckCollisionWithTiles,The following statement contains a magic number: rectangle = new Rectangle((int) (rectangle.X + (rectangle.Width*0.4)/2)'(int) (rectangle.Y + rectangle.Height*0.5)'(int) (rectangle.Width*0.6)'(int) (rectangle.Height*0.5));
Magic Number,LetsCreateZelda.Components,Collision,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Components\Collision.cs,CheckCollisionWithTiles,The following statement contains a magic number: rectangle = new Rectangle((int) (rectangle.X + (rectangle.Width*0.4)/2)'(int) (rectangle.Y + rectangle.Height*0.5)'(int) (rectangle.Width*0.6)'(int) (rectangle.Height*0.5));
Magic Number,LetsCreateZelda.Components,Collision,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Components\Collision.cs,CheckCollisionWithTiles,The following statement contains a magic number: rectangle = new Rectangle((int) (rectangle.X + (rectangle.Width*0.4)/2)'(int) (rectangle.Y + rectangle.Height*0.5)'(int) (rectangle.Width*0.6)'(int) (rectangle.Height*0.5));
Magic Number,LetsCreateZelda.Components,Collision,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Components\Collision.cs,CheckCollisionWithTiles,The following statement contains a magic number: rectangle = new Rectangle((int) (rectangle.X + (rectangle.Width*0.4)/2)'(int) (rectangle.Y + rectangle.Height*0.5)'(int) (rectangle.Width*0.6)'(int) (rectangle.Height*0.5));
Magic Number,LetsCreateZelda.Components,Collision,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Components\Collision.cs,CheckCollisionWithEntities,The following statement contains a magic number: rectangle = new Rectangle((int)(rectangle.X + (rectangle.Width * 0.4) / 2)' (int)(rectangle.Y + rectangle.Height * 0.5)' (int)(rectangle.Width * 0.6)' (int)(rectangle.Height * 0.5));
Magic Number,LetsCreateZelda.Components,Collision,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Components\Collision.cs,CheckCollisionWithEntities,The following statement contains a magic number: rectangle = new Rectangle((int)(rectangle.X + (rectangle.Width * 0.4) / 2)' (int)(rectangle.Y + rectangle.Height * 0.5)' (int)(rectangle.Width * 0.6)' (int)(rectangle.Height * 0.5));
Magic Number,LetsCreateZelda.Components,Collision,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Components\Collision.cs,CheckCollisionWithEntities,The following statement contains a magic number: rectangle = new Rectangle((int)(rectangle.X + (rectangle.Width * 0.4) / 2)' (int)(rectangle.Y + rectangle.Height * 0.5)' (int)(rectangle.Width * 0.6)' (int)(rectangle.Height * 0.5));
Magic Number,LetsCreateZelda.Components,Collision,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Components\Collision.cs,CheckCollisionWithEntities,The following statement contains a magic number: rectangle = new Rectangle((int)(rectangle.X + (rectangle.Width * 0.4) / 2)' (int)(rectangle.Y + rectangle.Height * 0.5)' (int)(rectangle.Width * 0.6)' (int)(rectangle.Height * 0.5));
Magic Number,LetsCreateZelda.Components,Collision,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Components\Collision.cs,CheckCollisionWithEntities,The following statement contains a magic number: rectangle = new Rectangle((int)(rectangle.X + (rectangle.Width * 0.4) / 2)' (int)(rectangle.Y + rectangle.Height * 0.5)' (int)(rectangle.Width * 0.6)' (int)(rectangle.Height * 0.5));
Magic Number,LetsCreateZelda.Components,Damage,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Components\Damage.cs,Update,The following statement contains a magic number: if (_takingDamage)              {                  _counter += gameTime;                  _blinkCounter += gameTime;                   var animation = GetComponent<Animation>(ComponentType.Animation);                   if(animation != null)                      animation.LockAnimation = true;                  var collision = GetComponent<Collision>(ComponentType.Collision);                    var x = _direction == Direction.Left ? -1*_speed : _direction == Direction.Right ? 1*_speed : 0;                  var y = _direction == Direction.Up ? -1*_speed : _direction == Direction.Down ? 1*_speed : 0;                     if(collision != null && !collision.CheckCollisionWithTiles(new Rectangle((int) (sprite.Position.X + x) '(int) (sprite.Position.Y + y)'sprite.Width'sprite.Height)))                      sprite.Move(_direction' _speed);                    if (_blinkCounter > 30)                  {                      _blinkCounter = 0;                      sprite.Color = sprite.Color == Color.White ? Color.Red : Color.White;                   }                    if (_counter > 500)                  {                      _takingDamage = false;                      sprite.Color = Color.White;                       if (animation != null)                          animation.LockAnimation = false;                  }              }
Magic Number,LetsCreateZelda.Components,Damage,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Components\Damage.cs,Update,The following statement contains a magic number: if (_takingDamage)              {                  _counter += gameTime;                  _blinkCounter += gameTime;                   var animation = GetComponent<Animation>(ComponentType.Animation);                   if(animation != null)                      animation.LockAnimation = true;                  var collision = GetComponent<Collision>(ComponentType.Collision);                    var x = _direction == Direction.Left ? -1*_speed : _direction == Direction.Right ? 1*_speed : 0;                  var y = _direction == Direction.Up ? -1*_speed : _direction == Direction.Down ? 1*_speed : 0;                     if(collision != null && !collision.CheckCollisionWithTiles(new Rectangle((int) (sprite.Position.X + x) '(int) (sprite.Position.Y + y)'sprite.Width'sprite.Height)))                      sprite.Move(_direction' _speed);                    if (_blinkCounter > 30)                  {                      _blinkCounter = 0;                      sprite.Color = sprite.Color == Color.White ? Color.Red : Color.White;                   }                    if (_counter > 500)                  {                      _takingDamage = false;                      sprite.Color = Color.White;                       if (animation != null)                          animation.LockAnimation = false;                  }              }
Magic Number,LetsCreateZelda.Components.Enemies,Octorok,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Components\Enemies\Octorok.cs,NewBullet,The following statement contains a magic number: _bullets.Add(new OctorokBullet(new Sprite(_bulletTexture'10'10'sprite.Position)'new Collision(_map'_entities)' _player'direction));
Magic Number,LetsCreateZelda.Components.Enemies,Octorok,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Components\Enemies\Octorok.cs,NewBullet,The following statement contains a magic number: _bullets.Add(new OctorokBullet(new Sprite(_bulletTexture'10'10'sprite.Position)'new Collision(_map'_entities)' _player'direction));
Magic Number,LetsCreateZelda.Components.Interaction,BlockPush,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Components\Interaction\BlockPush.cs,Update,The following statement contains a magic number: switch (_currentPhase)              {                  case Phase.Waiting:                      if (sprite.Rectangle.Intersects(playerSprite.Rectangle))                      {                          _collisionCounter += gameTime;                          if (_collisionCounter > 1500)                          {                              _moveX = 0;                              _moveY = 0;                              switch (playerAnimation.CurrentDirection)                              {                                  case Direction.Left:                                      _moveX = -16;                                      break;                                  case Direction.Right:                                      _moveX = 16;                                      break;                                  case Direction.Up:                                      _moveY = -16;                                      break;                                  case Direction.Down:                                      _moveY = 16;                                      break;                                  default:                                      throw new ArgumentOutOfRangeException();                              }                              if (collision.CheckCollisionWithTiles(new Rectangle((int) (sprite.Position.X + _moveX)'                                  (int) (sprite.Position.Y + _moveY)' sprite.Width' sprite.Height)))                              {                                  _collisionCounter = 0;                                  return;                              }                              else                              {                                  _currentPhase = Phase.Moving;                                  _moveCounter = 16;                               }                            }                      }                      else                      {                          _collisionCounter = 0;                       }                      break;                  case Phase.Moving:                      if (_moveCounter > 0)                      {                          sprite.Move(_moveX/32' _moveY/32);                          _moveCounter--;                      }                      else                      {                          _currentPhase = Phase.Waiting;                          _collisionCounter = 0;                       }                      break;                  default:                      throw new ArgumentOutOfRangeException();              }
Magic Number,LetsCreateZelda.Components.Interaction,BlockPush,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Components\Interaction\BlockPush.cs,Update,The following statement contains a magic number: switch (_currentPhase)              {                  case Phase.Waiting:                      if (sprite.Rectangle.Intersects(playerSprite.Rectangle))                      {                          _collisionCounter += gameTime;                          if (_collisionCounter > 1500)                          {                              _moveX = 0;                              _moveY = 0;                              switch (playerAnimation.CurrentDirection)                              {                                  case Direction.Left:                                      _moveX = -16;                                      break;                                  case Direction.Right:                                      _moveX = 16;                                      break;                                  case Direction.Up:                                      _moveY = -16;                                      break;                                  case Direction.Down:                                      _moveY = 16;                                      break;                                  default:                                      throw new ArgumentOutOfRangeException();                              }                              if (collision.CheckCollisionWithTiles(new Rectangle((int) (sprite.Position.X + _moveX)'                                  (int) (sprite.Position.Y + _moveY)' sprite.Width' sprite.Height)))                              {                                  _collisionCounter = 0;                                  return;                              }                              else                              {                                  _currentPhase = Phase.Moving;                                  _moveCounter = 16;                               }                            }                      }                      else                      {                          _collisionCounter = 0;                       }                      break;                  case Phase.Moving:                      if (_moveCounter > 0)                      {                          sprite.Move(_moveX/32' _moveY/32);                          _moveCounter--;                      }                      else                      {                          _currentPhase = Phase.Waiting;                          _collisionCounter = 0;                       }                      break;                  default:                      throw new ArgumentOutOfRangeException();              }
Magic Number,LetsCreateZelda.Components.Interaction,BlockPush,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Components\Interaction\BlockPush.cs,Update,The following statement contains a magic number: switch (_currentPhase)              {                  case Phase.Waiting:                      if (sprite.Rectangle.Intersects(playerSprite.Rectangle))                      {                          _collisionCounter += gameTime;                          if (_collisionCounter > 1500)                          {                              _moveX = 0;                              _moveY = 0;                              switch (playerAnimation.CurrentDirection)                              {                                  case Direction.Left:                                      _moveX = -16;                                      break;                                  case Direction.Right:                                      _moveX = 16;                                      break;                                  case Direction.Up:                                      _moveY = -16;                                      break;                                  case Direction.Down:                                      _moveY = 16;                                      break;                                  default:                                      throw new ArgumentOutOfRangeException();                              }                              if (collision.CheckCollisionWithTiles(new Rectangle((int) (sprite.Position.X + _moveX)'                                  (int) (sprite.Position.Y + _moveY)' sprite.Width' sprite.Height)))                              {                                  _collisionCounter = 0;                                  return;                              }                              else                              {                                  _currentPhase = Phase.Moving;                                  _moveCounter = 16;                               }                            }                      }                      else                      {                          _collisionCounter = 0;                       }                      break;                  case Phase.Moving:                      if (_moveCounter > 0)                      {                          sprite.Move(_moveX/32' _moveY/32);                          _moveCounter--;                      }                      else                      {                          _currentPhase = Phase.Waiting;                          _collisionCounter = 0;                       }                      break;                  default:                      throw new ArgumentOutOfRangeException();              }
Magic Number,LetsCreateZelda.Components.Interaction,BlockPush,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Components\Interaction\BlockPush.cs,Update,The following statement contains a magic number: switch (_currentPhase)              {                  case Phase.Waiting:                      if (sprite.Rectangle.Intersects(playerSprite.Rectangle))                      {                          _collisionCounter += gameTime;                          if (_collisionCounter > 1500)                          {                              _moveX = 0;                              _moveY = 0;                              switch (playerAnimation.CurrentDirection)                              {                                  case Direction.Left:                                      _moveX = -16;                                      break;                                  case Direction.Right:                                      _moveX = 16;                                      break;                                  case Direction.Up:                                      _moveY = -16;                                      break;                                  case Direction.Down:                                      _moveY = 16;                                      break;                                  default:                                      throw new ArgumentOutOfRangeException();                              }                              if (collision.CheckCollisionWithTiles(new Rectangle((int) (sprite.Position.X + _moveX)'                                  (int) (sprite.Position.Y + _moveY)' sprite.Width' sprite.Height)))                              {                                  _collisionCounter = 0;                                  return;                              }                              else                              {                                  _currentPhase = Phase.Moving;                                  _moveCounter = 16;                               }                            }                      }                      else                      {                          _collisionCounter = 0;                       }                      break;                  case Phase.Moving:                      if (_moveCounter > 0)                      {                          sprite.Move(_moveX/32' _moveY/32);                          _moveCounter--;                      }                      else                      {                          _currentPhase = Phase.Waiting;                          _collisionCounter = 0;                       }                      break;                  default:                      throw new ArgumentOutOfRangeException();              }
Magic Number,LetsCreateZelda.Components.Interaction,BlockPush,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Components\Interaction\BlockPush.cs,Update,The following statement contains a magic number: switch (_currentPhase)              {                  case Phase.Waiting:                      if (sprite.Rectangle.Intersects(playerSprite.Rectangle))                      {                          _collisionCounter += gameTime;                          if (_collisionCounter > 1500)                          {                              _moveX = 0;                              _moveY = 0;                              switch (playerAnimation.CurrentDirection)                              {                                  case Direction.Left:                                      _moveX = -16;                                      break;                                  case Direction.Right:                                      _moveX = 16;                                      break;                                  case Direction.Up:                                      _moveY = -16;                                      break;                                  case Direction.Down:                                      _moveY = 16;                                      break;                                  default:                                      throw new ArgumentOutOfRangeException();                              }                              if (collision.CheckCollisionWithTiles(new Rectangle((int) (sprite.Position.X + _moveX)'                                  (int) (sprite.Position.Y + _moveY)' sprite.Width' sprite.Height)))                              {                                  _collisionCounter = 0;                                  return;                              }                              else                              {                                  _currentPhase = Phase.Moving;                                  _moveCounter = 16;                               }                            }                      }                      else                      {                          _collisionCounter = 0;                       }                      break;                  case Phase.Moving:                      if (_moveCounter > 0)                      {                          sprite.Move(_moveX/32' _moveY/32);                          _moveCounter--;                      }                      else                      {                          _currentPhase = Phase.Waiting;                          _collisionCounter = 0;                       }                      break;                  default:                      throw new ArgumentOutOfRangeException();              }
Magic Number,LetsCreateZelda.Components.Interaction,BlockPush,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Components\Interaction\BlockPush.cs,Update,The following statement contains a magic number: switch (_currentPhase)              {                  case Phase.Waiting:                      if (sprite.Rectangle.Intersects(playerSprite.Rectangle))                      {                          _collisionCounter += gameTime;                          if (_collisionCounter > 1500)                          {                              _moveX = 0;                              _moveY = 0;                              switch (playerAnimation.CurrentDirection)                              {                                  case Direction.Left:                                      _moveX = -16;                                      break;                                  case Direction.Right:                                      _moveX = 16;                                      break;                                  case Direction.Up:                                      _moveY = -16;                                      break;                                  case Direction.Down:                                      _moveY = 16;                                      break;                                  default:                                      throw new ArgumentOutOfRangeException();                              }                              if (collision.CheckCollisionWithTiles(new Rectangle((int) (sprite.Position.X + _moveX)'                                  (int) (sprite.Position.Y + _moveY)' sprite.Width' sprite.Height)))                              {                                  _collisionCounter = 0;                                  return;                              }                              else                              {                                  _currentPhase = Phase.Moving;                                  _moveCounter = 16;                               }                            }                      }                      else                      {                          _collisionCounter = 0;                       }                      break;                  case Phase.Moving:                      if (_moveCounter > 0)                      {                          sprite.Move(_moveX/32' _moveY/32);                          _moveCounter--;                      }                      else                      {                          _currentPhase = Phase.Waiting;                          _collisionCounter = 0;                       }                      break;                  default:                      throw new ArgumentOutOfRangeException();              }
Magic Number,LetsCreateZelda.Components.Interaction,BlockPush,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Components\Interaction\BlockPush.cs,Update,The following statement contains a magic number: switch (_currentPhase)              {                  case Phase.Waiting:                      if (sprite.Rectangle.Intersects(playerSprite.Rectangle))                      {                          _collisionCounter += gameTime;                          if (_collisionCounter > 1500)                          {                              _moveX = 0;                              _moveY = 0;                              switch (playerAnimation.CurrentDirection)                              {                                  case Direction.Left:                                      _moveX = -16;                                      break;                                  case Direction.Right:                                      _moveX = 16;                                      break;                                  case Direction.Up:                                      _moveY = -16;                                      break;                                  case Direction.Down:                                      _moveY = 16;                                      break;                                  default:                                      throw new ArgumentOutOfRangeException();                              }                              if (collision.CheckCollisionWithTiles(new Rectangle((int) (sprite.Position.X + _moveX)'                                  (int) (sprite.Position.Y + _moveY)' sprite.Width' sprite.Height)))                              {                                  _collisionCounter = 0;                                  return;                              }                              else                              {                                  _currentPhase = Phase.Moving;                                  _moveCounter = 16;                               }                            }                      }                      else                      {                          _collisionCounter = 0;                       }                      break;                  case Phase.Moving:                      if (_moveCounter > 0)                      {                          sprite.Move(_moveX/32' _moveY/32);                          _moveCounter--;                      }                      else                      {                          _currentPhase = Phase.Waiting;                          _collisionCounter = 0;                       }                      break;                  default:                      throw new ArgumentOutOfRangeException();              }
Magic Number,LetsCreateZelda.Components.Interaction,BlockPush,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Components\Interaction\BlockPush.cs,Update,The following statement contains a magic number: switch (_currentPhase)              {                  case Phase.Waiting:                      if (sprite.Rectangle.Intersects(playerSprite.Rectangle))                      {                          _collisionCounter += gameTime;                          if (_collisionCounter > 1500)                          {                              _moveX = 0;                              _moveY = 0;                              switch (playerAnimation.CurrentDirection)                              {                                  case Direction.Left:                                      _moveX = -16;                                      break;                                  case Direction.Right:                                      _moveX = 16;                                      break;                                  case Direction.Up:                                      _moveY = -16;                                      break;                                  case Direction.Down:                                      _moveY = 16;                                      break;                                  default:                                      throw new ArgumentOutOfRangeException();                              }                              if (collision.CheckCollisionWithTiles(new Rectangle((int) (sprite.Position.X + _moveX)'                                  (int) (sprite.Position.Y + _moveY)' sprite.Width' sprite.Height)))                              {                                  _collisionCounter = 0;                                  return;                              }                              else                              {                                  _currentPhase = Phase.Moving;                                  _moveCounter = 16;                               }                            }                      }                      else                      {                          _collisionCounter = 0;                       }                      break;                  case Phase.Moving:                      if (_moveCounter > 0)                      {                          sprite.Move(_moveX/32' _moveY/32);                          _moveCounter--;                      }                      else                      {                          _currentPhase = Phase.Waiting;                          _collisionCounter = 0;                       }                      break;                  default:                      throw new ArgumentOutOfRangeException();              }
Magic Number,LetsCreateZelda.Components.Items,Boomerang,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Components\Items\Boomerang.cs,LoadContent,The following statement contains a magic number: AddComponent(new Sprite(ManagerContent.LoadTexture("boomerang")'16'16'new Vector2(0'0)));
Magic Number,LetsCreateZelda.Components.Items,Boomerang,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Components\Items\Boomerang.cs,LoadContent,The following statement contains a magic number: AddComponent(new Sprite(ManagerContent.LoadTexture("boomerang")'16'16'new Vector2(0'0)));
Magic Number,LetsCreateZelda.Components.Items,Boomerang,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Components\Items\Boomerang.cs,LoadContent,The following statement contains a magic number: AddComponent(new Animation(16'16'3));
Magic Number,LetsCreateZelda.Components.Items,Boomerang,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Components\Items\Boomerang.cs,LoadContent,The following statement contains a magic number: AddComponent(new Animation(16'16'3));
Magic Number,LetsCreateZelda.Components.Items,Boomerang,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Components\Items\Boomerang.cs,LoadContent,The following statement contains a magic number: AddComponent(new Animation(16'16'3));
Magic Number,LetsCreateZelda.Components.Items,Boomerang,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Components\Items\Boomerang.cs,Update,The following statement contains a magic number: switch (_currentState)              {                      case BoomerangState.Forward:                          MoveForward(sprite);                          if(_counter > 300)                              _currentState = BoomerangState.Back;                      break;                        case BoomerangState.Back:                          MoveBack(sprite);                       break;               }
Magic Number,LetsCreateZelda.Components.Items,Boomerang,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Components\Items\Boomerang.cs,MoveBack,The following statement contains a magic number: if(ManagerFunction.Distance(sprite.Position'ownerSprite.Position) < 2)              {                  _currentState = BoomerangState.Stop;                  Active = false;                  return;               }
Magic Number,LetsCreateZelda.Components.Items,Item,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Components\Items\Item.cs,DrawMenu,The following statement contains a magic number: if (GuiTexture != null)              {                  spriteBatch.Draw(GuiTexture' new Rectangle(9 + 32 * (int)MenuPosition.X' 30 + 14 * (int)MenuPosition.Y' 22' 10)' Color.White);              }
Magic Number,LetsCreateZelda.Components.Items,Item,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Components\Items\Item.cs,DrawMenu,The following statement contains a magic number: if (GuiTexture != null)              {                  spriteBatch.Draw(GuiTexture' new Rectangle(9 + 32 * (int)MenuPosition.X' 30 + 14 * (int)MenuPosition.Y' 22' 10)' Color.White);              }
Magic Number,LetsCreateZelda.Components.Items,Item,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Components\Items\Item.cs,DrawMenu,The following statement contains a magic number: if (GuiTexture != null)              {                  spriteBatch.Draw(GuiTexture' new Rectangle(9 + 32 * (int)MenuPosition.X' 30 + 14 * (int)MenuPosition.Y' 22' 10)' Color.White);              }
Magic Number,LetsCreateZelda.Components.Items,Item,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Components\Items\Item.cs,DrawMenu,The following statement contains a magic number: if (GuiTexture != null)              {                  spriteBatch.Draw(GuiTexture' new Rectangle(9 + 32 * (int)MenuPosition.X' 30 + 14 * (int)MenuPosition.Y' 22' 10)' Color.White);              }
Magic Number,LetsCreateZelda.Components.Items,Item,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Components\Items\Item.cs,DrawMenu,The following statement contains a magic number: if (GuiTexture != null)              {                  spriteBatch.Draw(GuiTexture' new Rectangle(9 + 32 * (int)MenuPosition.X' 30 + 14 * (int)MenuPosition.Y' 22' 10)' Color.White);              }
Magic Number,LetsCreateZelda.Components.Items,Item,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Components\Items\Item.cs,DrawMenu,The following statement contains a magic number: if (GuiTexture != null)              {                  spriteBatch.Draw(GuiTexture' new Rectangle(9 + 32 * (int)MenuPosition.X' 30 + 14 * (int)MenuPosition.Y' 22' 10)' Color.White);              }
Magic Number,LetsCreateZelda.Components.Items,Sword,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Components\Items\Sword.cs,Sword,The following statement contains a magic number: ItemId = 2;
Magic Number,LetsCreateZelda.Components.Items,Sword,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Components\Items\Sword.cs,LoadContent,The following statement contains a magic number: AddComponent(new Sprite(ManagerContent.LoadTexture("sword")' 16' 16' new Vector2(0' 0)));
Magic Number,LetsCreateZelda.Components.Items,Sword,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Components\Items\Sword.cs,LoadContent,The following statement contains a magic number: AddComponent(new Sprite(ManagerContent.LoadTexture("sword")' 16' 16' new Vector2(0' 0)));
Magic Number,LetsCreateZelda.Components.Items,Sword,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Components\Items\Sword.cs,LoadContent,The following statement contains a magic number: AddComponent(new Animation(16'16'2'100));
Magic Number,LetsCreateZelda.Components.Items,Sword,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Components\Items\Sword.cs,LoadContent,The following statement contains a magic number: AddComponent(new Animation(16'16'2'100));
Magic Number,LetsCreateZelda.Components.Items,Sword,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Components\Items\Sword.cs,LoadContent,The following statement contains a magic number: AddComponent(new Animation(16'16'2'100));
Magic Number,LetsCreateZelda.Components.Items,Sword,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Components\Items\Sword.cs,LoadContent,The following statement contains a magic number: AddComponent(new Animation(16'16'2'100));
Magic Number,LetsCreateZelda.Components.Items,Sword,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Components\Items\Sword.cs,Update,The following statement contains a magic number: if (_counter > 250)              {                  Active = false;                  animation.LockDirection = false;               }
Magic Number,LetsCreateZelda.Components.Items,Sword,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Components\Items\Sword.cs,UpdateAnimation,The following statement contains a magic number: if (_counter < 90)              {                  switch (animation.CurrentDirection)                  {                      case Direction.Left:                          sprite.Teleport(new Vector2(ownerSprite.Position.X - sprite.Width + 5'                              ownerSprite.Position.Y - sprite.Height));                          break;                      case Direction.Right:                          sprite.Teleport(new Vector2(ownerSprite.Position.X + sprite.Width - 5'                              ownerSprite.Position.Y - sprite.Height));                          break;                      case Direction.Up:                          sprite.Teleport(new Vector2(ownerSprite.Position.X + sprite.Width - 5'                              ownerSprite.Position.Y - sprite.Height + 5));                          break;                      case Direction.Down:                          sprite.Teleport(new Vector2(ownerSprite.Position.X - sprite.Width + 5'                              ownerSprite.Position.Y + sprite.Height - 5));                          break;                  }              }              else              {                  switch (animation.CurrentDirection)                  {                      case Direction.Left:                          sprite.Teleport(new Vector2(ownerSprite.Position.X - sprite.Width + 2'                              ownerSprite.Position.Y));                          break;                      case Direction.Right:                          sprite.Teleport(new Vector2(ownerSprite.Position.X + sprite.Width - 2'                              ownerSprite.Position.Y));                          break;                        case Direction.Up:                          sprite.Teleport(new Vector2(ownerSprite.Position.X'                              ownerSprite.Position.Y - sprite.Height + 6));                          break;                      case Direction.Down:                          sprite.Teleport(new Vector2(ownerSprite.Position.X + 4'                              ownerSprite.Position.Y + sprite.Height - 6));                          break;                  }                  }
Magic Number,LetsCreateZelda.Components.Items,Sword,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Components\Items\Sword.cs,UpdateAnimation,The following statement contains a magic number: if (_counter < 90)              {                  switch (animation.CurrentDirection)                  {                      case Direction.Left:                          sprite.Teleport(new Vector2(ownerSprite.Position.X - sprite.Width + 5'                              ownerSprite.Position.Y - sprite.Height));                          break;                      case Direction.Right:                          sprite.Teleport(new Vector2(ownerSprite.Position.X + sprite.Width - 5'                              ownerSprite.Position.Y - sprite.Height));                          break;                      case Direction.Up:                          sprite.Teleport(new Vector2(ownerSprite.Position.X + sprite.Width - 5'                              ownerSprite.Position.Y - sprite.Height + 5));                          break;                      case Direction.Down:                          sprite.Teleport(new Vector2(ownerSprite.Position.X - sprite.Width + 5'                              ownerSprite.Position.Y + sprite.Height - 5));                          break;                  }              }              else              {                  switch (animation.CurrentDirection)                  {                      case Direction.Left:                          sprite.Teleport(new Vector2(ownerSprite.Position.X - sprite.Width + 2'                              ownerSprite.Position.Y));                          break;                      case Direction.Right:                          sprite.Teleport(new Vector2(ownerSprite.Position.X + sprite.Width - 2'                              ownerSprite.Position.Y));                          break;                        case Direction.Up:                          sprite.Teleport(new Vector2(ownerSprite.Position.X'                              ownerSprite.Position.Y - sprite.Height + 6));                          break;                      case Direction.Down:                          sprite.Teleport(new Vector2(ownerSprite.Position.X + 4'                              ownerSprite.Position.Y + sprite.Height - 6));                          break;                  }                  }
Magic Number,LetsCreateZelda.Components.Items,Sword,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Components\Items\Sword.cs,UpdateAnimation,The following statement contains a magic number: if (_counter < 90)              {                  switch (animation.CurrentDirection)                  {                      case Direction.Left:                          sprite.Teleport(new Vector2(ownerSprite.Position.X - sprite.Width + 5'                              ownerSprite.Position.Y - sprite.Height));                          break;                      case Direction.Right:                          sprite.Teleport(new Vector2(ownerSprite.Position.X + sprite.Width - 5'                              ownerSprite.Position.Y - sprite.Height));                          break;                      case Direction.Up:                          sprite.Teleport(new Vector2(ownerSprite.Position.X + sprite.Width - 5'                              ownerSprite.Position.Y - sprite.Height + 5));                          break;                      case Direction.Down:                          sprite.Teleport(new Vector2(ownerSprite.Position.X - sprite.Width + 5'                              ownerSprite.Position.Y + sprite.Height - 5));                          break;                  }              }              else              {                  switch (animation.CurrentDirection)                  {                      case Direction.Left:                          sprite.Teleport(new Vector2(ownerSprite.Position.X - sprite.Width + 2'                              ownerSprite.Position.Y));                          break;                      case Direction.Right:                          sprite.Teleport(new Vector2(ownerSprite.Position.X + sprite.Width - 2'                              ownerSprite.Position.Y));                          break;                        case Direction.Up:                          sprite.Teleport(new Vector2(ownerSprite.Position.X'                              ownerSprite.Position.Y - sprite.Height + 6));                          break;                      case Direction.Down:                          sprite.Teleport(new Vector2(ownerSprite.Position.X + 4'                              ownerSprite.Position.Y + sprite.Height - 6));                          break;                  }                  }
Magic Number,LetsCreateZelda.Components.Items,Sword,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Components\Items\Sword.cs,UpdateAnimation,The following statement contains a magic number: if (_counter < 90)              {                  switch (animation.CurrentDirection)                  {                      case Direction.Left:                          sprite.Teleport(new Vector2(ownerSprite.Position.X - sprite.Width + 5'                              ownerSprite.Position.Y - sprite.Height));                          break;                      case Direction.Right:                          sprite.Teleport(new Vector2(ownerSprite.Position.X + sprite.Width - 5'                              ownerSprite.Position.Y - sprite.Height));                          break;                      case Direction.Up:                          sprite.Teleport(new Vector2(ownerSprite.Position.X + sprite.Width - 5'                              ownerSprite.Position.Y - sprite.Height + 5));                          break;                      case Direction.Down:                          sprite.Teleport(new Vector2(ownerSprite.Position.X - sprite.Width + 5'                              ownerSprite.Position.Y + sprite.Height - 5));                          break;                  }              }              else              {                  switch (animation.CurrentDirection)                  {                      case Direction.Left:                          sprite.Teleport(new Vector2(ownerSprite.Position.X - sprite.Width + 2'                              ownerSprite.Position.Y));                          break;                      case Direction.Right:                          sprite.Teleport(new Vector2(ownerSprite.Position.X + sprite.Width - 2'                              ownerSprite.Position.Y));                          break;                        case Direction.Up:                          sprite.Teleport(new Vector2(ownerSprite.Position.X'                              ownerSprite.Position.Y - sprite.Height + 6));                          break;                      case Direction.Down:                          sprite.Teleport(new Vector2(ownerSprite.Position.X + 4'                              ownerSprite.Position.Y + sprite.Height - 6));                          break;                  }                  }
Magic Number,LetsCreateZelda.Components.Items,Sword,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Components\Items\Sword.cs,UpdateAnimation,The following statement contains a magic number: if (_counter < 90)              {                  switch (animation.CurrentDirection)                  {                      case Direction.Left:                          sprite.Teleport(new Vector2(ownerSprite.Position.X - sprite.Width + 5'                              ownerSprite.Position.Y - sprite.Height));                          break;                      case Direction.Right:                          sprite.Teleport(new Vector2(ownerSprite.Position.X + sprite.Width - 5'                              ownerSprite.Position.Y - sprite.Height));                          break;                      case Direction.Up:                          sprite.Teleport(new Vector2(ownerSprite.Position.X + sprite.Width - 5'                              ownerSprite.Position.Y - sprite.Height + 5));                          break;                      case Direction.Down:                          sprite.Teleport(new Vector2(ownerSprite.Position.X - sprite.Width + 5'                              ownerSprite.Position.Y + sprite.Height - 5));                          break;                  }              }              else              {                  switch (animation.CurrentDirection)                  {                      case Direction.Left:                          sprite.Teleport(new Vector2(ownerSprite.Position.X - sprite.Width + 2'                              ownerSprite.Position.Y));                          break;                      case Direction.Right:                          sprite.Teleport(new Vector2(ownerSprite.Position.X + sprite.Width - 2'                              ownerSprite.Position.Y));                          break;                        case Direction.Up:                          sprite.Teleport(new Vector2(ownerSprite.Position.X'                              ownerSprite.Position.Y - sprite.Height + 6));                          break;                      case Direction.Down:                          sprite.Teleport(new Vector2(ownerSprite.Position.X + 4'                              ownerSprite.Position.Y + sprite.Height - 6));                          break;                  }                  }
Magic Number,LetsCreateZelda.Components.Items,Sword,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Components\Items\Sword.cs,UpdateAnimation,The following statement contains a magic number: if (_counter < 90)              {                  switch (animation.CurrentDirection)                  {                      case Direction.Left:                          sprite.Teleport(new Vector2(ownerSprite.Position.X - sprite.Width + 5'                              ownerSprite.Position.Y - sprite.Height));                          break;                      case Direction.Right:                          sprite.Teleport(new Vector2(ownerSprite.Position.X + sprite.Width - 5'                              ownerSprite.Position.Y - sprite.Height));                          break;                      case Direction.Up:                          sprite.Teleport(new Vector2(ownerSprite.Position.X + sprite.Width - 5'                              ownerSprite.Position.Y - sprite.Height + 5));                          break;                      case Direction.Down:                          sprite.Teleport(new Vector2(ownerSprite.Position.X - sprite.Width + 5'                              ownerSprite.Position.Y + sprite.Height - 5));                          break;                  }              }              else              {                  switch (animation.CurrentDirection)                  {                      case Direction.Left:                          sprite.Teleport(new Vector2(ownerSprite.Position.X - sprite.Width + 2'                              ownerSprite.Position.Y));                          break;                      case Direction.Right:                          sprite.Teleport(new Vector2(ownerSprite.Position.X + sprite.Width - 2'                              ownerSprite.Position.Y));                          break;                        case Direction.Up:                          sprite.Teleport(new Vector2(ownerSprite.Position.X'                              ownerSprite.Position.Y - sprite.Height + 6));                          break;                      case Direction.Down:                          sprite.Teleport(new Vector2(ownerSprite.Position.X + 4'                              ownerSprite.Position.Y + sprite.Height - 6));                          break;                  }                  }
Magic Number,LetsCreateZelda.Components.Items,Sword,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Components\Items\Sword.cs,UpdateAnimation,The following statement contains a magic number: if (_counter < 90)              {                  switch (animation.CurrentDirection)                  {                      case Direction.Left:                          sprite.Teleport(new Vector2(ownerSprite.Position.X - sprite.Width + 5'                              ownerSprite.Position.Y - sprite.Height));                          break;                      case Direction.Right:                          sprite.Teleport(new Vector2(ownerSprite.Position.X + sprite.Width - 5'                              ownerSprite.Position.Y - sprite.Height));                          break;                      case Direction.Up:                          sprite.Teleport(new Vector2(ownerSprite.Position.X + sprite.Width - 5'                              ownerSprite.Position.Y - sprite.Height + 5));                          break;                      case Direction.Down:                          sprite.Teleport(new Vector2(ownerSprite.Position.X - sprite.Width + 5'                              ownerSprite.Position.Y + sprite.Height - 5));                          break;                  }              }              else              {                  switch (animation.CurrentDirection)                  {                      case Direction.Left:                          sprite.Teleport(new Vector2(ownerSprite.Position.X - sprite.Width + 2'                              ownerSprite.Position.Y));                          break;                      case Direction.Right:                          sprite.Teleport(new Vector2(ownerSprite.Position.X + sprite.Width - 2'                              ownerSprite.Position.Y));                          break;                        case Direction.Up:                          sprite.Teleport(new Vector2(ownerSprite.Position.X'                              ownerSprite.Position.Y - sprite.Height + 6));                          break;                      case Direction.Down:                          sprite.Teleport(new Vector2(ownerSprite.Position.X + 4'                              ownerSprite.Position.Y + sprite.Height - 6));                          break;                  }                  }
Magic Number,LetsCreateZelda.Components.Items,Sword,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Components\Items\Sword.cs,UpdateAnimation,The following statement contains a magic number: if (_counter < 90)              {                  switch (animation.CurrentDirection)                  {                      case Direction.Left:                          sprite.Teleport(new Vector2(ownerSprite.Position.X - sprite.Width + 5'                              ownerSprite.Position.Y - sprite.Height));                          break;                      case Direction.Right:                          sprite.Teleport(new Vector2(ownerSprite.Position.X + sprite.Width - 5'                              ownerSprite.Position.Y - sprite.Height));                          break;                      case Direction.Up:                          sprite.Teleport(new Vector2(ownerSprite.Position.X + sprite.Width - 5'                              ownerSprite.Position.Y - sprite.Height + 5));                          break;                      case Direction.Down:                          sprite.Teleport(new Vector2(ownerSprite.Position.X - sprite.Width + 5'                              ownerSprite.Position.Y + sprite.Height - 5));                          break;                  }              }              else              {                  switch (animation.CurrentDirection)                  {                      case Direction.Left:                          sprite.Teleport(new Vector2(ownerSprite.Position.X - sprite.Width + 2'                              ownerSprite.Position.Y));                          break;                      case Direction.Right:                          sprite.Teleport(new Vector2(ownerSprite.Position.X + sprite.Width - 2'                              ownerSprite.Position.Y));                          break;                        case Direction.Up:                          sprite.Teleport(new Vector2(ownerSprite.Position.X'                              ownerSprite.Position.Y - sprite.Height + 6));                          break;                      case Direction.Down:                          sprite.Teleport(new Vector2(ownerSprite.Position.X + 4'                              ownerSprite.Position.Y + sprite.Height - 6));                          break;                  }                  }
Magic Number,LetsCreateZelda.Components.Items,Sword,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Components\Items\Sword.cs,UpdateAnimation,The following statement contains a magic number: if (_counter < 90)              {                  switch (animation.CurrentDirection)                  {                      case Direction.Left:                          sprite.Teleport(new Vector2(ownerSprite.Position.X - sprite.Width + 5'                              ownerSprite.Position.Y - sprite.Height));                          break;                      case Direction.Right:                          sprite.Teleport(new Vector2(ownerSprite.Position.X + sprite.Width - 5'                              ownerSprite.Position.Y - sprite.Height));                          break;                      case Direction.Up:                          sprite.Teleport(new Vector2(ownerSprite.Position.X + sprite.Width - 5'                              ownerSprite.Position.Y - sprite.Height + 5));                          break;                      case Direction.Down:                          sprite.Teleport(new Vector2(ownerSprite.Position.X - sprite.Width + 5'                              ownerSprite.Position.Y + sprite.Height - 5));                          break;                  }              }              else              {                  switch (animation.CurrentDirection)                  {                      case Direction.Left:                          sprite.Teleport(new Vector2(ownerSprite.Position.X - sprite.Width + 2'                              ownerSprite.Position.Y));                          break;                      case Direction.Right:                          sprite.Teleport(new Vector2(ownerSprite.Position.X + sprite.Width - 2'                              ownerSprite.Position.Y));                          break;                        case Direction.Up:                          sprite.Teleport(new Vector2(ownerSprite.Position.X'                              ownerSprite.Position.Y - sprite.Height + 6));                          break;                      case Direction.Down:                          sprite.Teleport(new Vector2(ownerSprite.Position.X + 4'                              ownerSprite.Position.Y + sprite.Height - 6));                          break;                  }                  }
Magic Number,LetsCreateZelda.Components.Items,Sword,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Components\Items\Sword.cs,UpdateAnimation,The following statement contains a magic number: if (_counter < 90)              {                  switch (animation.CurrentDirection)                  {                      case Direction.Left:                          sprite.Teleport(new Vector2(ownerSprite.Position.X - sprite.Width + 5'                              ownerSprite.Position.Y - sprite.Height));                          break;                      case Direction.Right:                          sprite.Teleport(new Vector2(ownerSprite.Position.X + sprite.Width - 5'                              ownerSprite.Position.Y - sprite.Height));                          break;                      case Direction.Up:                          sprite.Teleport(new Vector2(ownerSprite.Position.X + sprite.Width - 5'                              ownerSprite.Position.Y - sprite.Height + 5));                          break;                      case Direction.Down:                          sprite.Teleport(new Vector2(ownerSprite.Position.X - sprite.Width + 5'                              ownerSprite.Position.Y + sprite.Height - 5));                          break;                  }              }              else              {                  switch (animation.CurrentDirection)                  {                      case Direction.Left:                          sprite.Teleport(new Vector2(ownerSprite.Position.X - sprite.Width + 2'                              ownerSprite.Position.Y));                          break;                      case Direction.Right:                          sprite.Teleport(new Vector2(ownerSprite.Position.X + sprite.Width - 2'                              ownerSprite.Position.Y));                          break;                        case Direction.Up:                          sprite.Teleport(new Vector2(ownerSprite.Position.X'                              ownerSprite.Position.Y - sprite.Height + 6));                          break;                      case Direction.Down:                          sprite.Teleport(new Vector2(ownerSprite.Position.X + 4'                              ownerSprite.Position.Y + sprite.Height - 6));                          break;                  }                  }
Magic Number,LetsCreateZelda.Components.Items,Sword,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Components\Items\Sword.cs,UpdateAnimation,The following statement contains a magic number: if (_counter < 90)              {                  switch (animation.CurrentDirection)                  {                      case Direction.Left:                          sprite.Teleport(new Vector2(ownerSprite.Position.X - sprite.Width + 5'                              ownerSprite.Position.Y - sprite.Height));                          break;                      case Direction.Right:                          sprite.Teleport(new Vector2(ownerSprite.Position.X + sprite.Width - 5'                              ownerSprite.Position.Y - sprite.Height));                          break;                      case Direction.Up:                          sprite.Teleport(new Vector2(ownerSprite.Position.X + sprite.Width - 5'                              ownerSprite.Position.Y - sprite.Height + 5));                          break;                      case Direction.Down:                          sprite.Teleport(new Vector2(ownerSprite.Position.X - sprite.Width + 5'                              ownerSprite.Position.Y + sprite.Height - 5));                          break;                  }              }              else              {                  switch (animation.CurrentDirection)                  {                      case Direction.Left:                          sprite.Teleport(new Vector2(ownerSprite.Position.X - sprite.Width + 2'                              ownerSprite.Position.Y));                          break;                      case Direction.Right:                          sprite.Teleport(new Vector2(ownerSprite.Position.X + sprite.Width - 2'                              ownerSprite.Position.Y));                          break;                        case Direction.Up:                          sprite.Teleport(new Vector2(ownerSprite.Position.X'                              ownerSprite.Position.Y - sprite.Height + 6));                          break;                      case Direction.Down:                          sprite.Teleport(new Vector2(ownerSprite.Position.X + 4'                              ownerSprite.Position.Y + sprite.Height - 6));                          break;                  }                  }
Magic Number,LetsCreateZelda.Components.Items,Sword,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Components\Items\Sword.cs,UpdateAnimation,The following statement contains a magic number: if (_counter < 90)              {                  switch (animation.CurrentDirection)                  {                      case Direction.Left:                          sprite.Teleport(new Vector2(ownerSprite.Position.X - sprite.Width + 5'                              ownerSprite.Position.Y - sprite.Height));                          break;                      case Direction.Right:                          sprite.Teleport(new Vector2(ownerSprite.Position.X + sprite.Width - 5'                              ownerSprite.Position.Y - sprite.Height));                          break;                      case Direction.Up:                          sprite.Teleport(new Vector2(ownerSprite.Position.X + sprite.Width - 5'                              ownerSprite.Position.Y - sprite.Height + 5));                          break;                      case Direction.Down:                          sprite.Teleport(new Vector2(ownerSprite.Position.X - sprite.Width + 5'                              ownerSprite.Position.Y + sprite.Height - 5));                          break;                  }              }              else              {                  switch (animation.CurrentDirection)                  {                      case Direction.Left:                          sprite.Teleport(new Vector2(ownerSprite.Position.X - sprite.Width + 2'                              ownerSprite.Position.Y));                          break;                      case Direction.Right:                          sprite.Teleport(new Vector2(ownerSprite.Position.X + sprite.Width - 2'                              ownerSprite.Position.Y));                          break;                        case Direction.Up:                          sprite.Teleport(new Vector2(ownerSprite.Position.X'                              ownerSprite.Position.Y - sprite.Height + 6));                          break;                      case Direction.Down:                          sprite.Teleport(new Vector2(ownerSprite.Position.X + 4'                              ownerSprite.Position.Y + sprite.Height - 6));                          break;                  }                  }
Magic Number,LetsCreateZelda.Components.Movement,AIMovementRandom,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Components\Movement\AIMovementRandom.cs,ChangeDirection,The following statement contains a magic number: _currentDirection = (Direction) ManagerFunction.Random(0' 3);
Magic Number,LetsCreateZelda.Components.StatusEffects,StatusEffectFreeze,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Components\StatusEffects\StatusEffectFreeze.cs,Update,The following statement contains a magic number: switch (_currentState)              {                  case States.Start:                                            if (stats != null)                      {                          _oldSpeed = stats.Speed;                           stats.Speed = 0;                       }                      if (sprite != null)                      {                          _oldColor = sprite.Color;                           sprite.Color = Color.Blue;                      }                      _currentState = States.Wait;                      break;                  case States.Wait:                      _count += gameTime;                      if (_count > 1000)                      {                          _currentState = States.End;                      }                      break;                  case States.End:                      if (stats != null)                      {                          stats.Speed = _oldSpeed;                      }                                  if (sprite != null)                      {                          sprite.Color = _oldColor;                       }                      Done = true;                       break;                  default:                      throw new ArgumentOutOfRangeException();              }
Magic Number,LetsCreateZelda.Factories,FactoryDeathAnimation,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Factories\FactoryDeathAnimation.cs,GetDeathAnimationObject,The following statement contains a magic number: switch (deathAnimation)              {                      case DeathAnimation.Explosion:                      baseObject.AddComponent(new Sprite(ManagerContent.LoadTexture("death_effect")' 16' 16' position));                      baseObject.AddComponent(new Animation(16' 16' 3'100));                      baseObject.AddComponent(new DeathAnimationExplosion());                      baseObject.AddComponent(new Camera(_camera));                      break;               }
Magic Number,LetsCreateZelda.Factories,FactoryDeathAnimation,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Factories\FactoryDeathAnimation.cs,GetDeathAnimationObject,The following statement contains a magic number: switch (deathAnimation)              {                      case DeathAnimation.Explosion:                      baseObject.AddComponent(new Sprite(ManagerContent.LoadTexture("death_effect")' 16' 16' position));                      baseObject.AddComponent(new Animation(16' 16' 3'100));                      baseObject.AddComponent(new DeathAnimationExplosion());                      baseObject.AddComponent(new Camera(_camera));                      break;               }
Magic Number,LetsCreateZelda.Factories,FactoryDeathAnimation,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Factories\FactoryDeathAnimation.cs,GetDeathAnimationObject,The following statement contains a magic number: switch (deathAnimation)              {                      case DeathAnimation.Explosion:                      baseObject.AddComponent(new Sprite(ManagerContent.LoadTexture("death_effect")' 16' 16' position));                      baseObject.AddComponent(new Animation(16' 16' 3'100));                      baseObject.AddComponent(new DeathAnimationExplosion());                      baseObject.AddComponent(new Camera(_camera));                      break;               }
Magic Number,LetsCreateZelda.Factories,FactoryDeathAnimation,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Factories\FactoryDeathAnimation.cs,GetDeathAnimationObject,The following statement contains a magic number: switch (deathAnimation)              {                      case DeathAnimation.Explosion:                      baseObject.AddComponent(new Sprite(ManagerContent.LoadTexture("death_effect")' 16' 16' position));                      baseObject.AddComponent(new Animation(16' 16' 3'100));                      baseObject.AddComponent(new DeathAnimationExplosion());                      baseObject.AddComponent(new Camera(_camera));                      break;               }
Magic Number,LetsCreateZelda.Factories,FactoryDeathAnimation,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Factories\FactoryDeathAnimation.cs,GetDeathAnimationObject,The following statement contains a magic number: switch (deathAnimation)              {                      case DeathAnimation.Explosion:                      baseObject.AddComponent(new Sprite(ManagerContent.LoadTexture("death_effect")' 16' 16' position));                      baseObject.AddComponent(new Animation(16' 16' 3'100));                      baseObject.AddComponent(new DeathAnimationExplosion());                      baseObject.AddComponent(new Camera(_camera));                      break;               }
Magic Number,LetsCreateZelda.Factories,FactoryDeathAnimation,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Factories\FactoryDeathAnimation.cs,GetDeathAnimationObject,The following statement contains a magic number: switch (deathAnimation)              {                      case DeathAnimation.Explosion:                      baseObject.AddComponent(new Sprite(ManagerContent.LoadTexture("death_effect")' 16' 16' position));                      baseObject.AddComponent(new Animation(16' 16' 3'100));                      baseObject.AddComponent(new DeathAnimationExplosion());                      baseObject.AddComponent(new Camera(_camera));                      break;               }
Magic Number,LetsCreateZelda.Gui,PlayerStatsGui,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Gui\PlayerStatsGui.cs,PlayerStatsGui,The following statement contains a magic number: if (windowPosition == WindowPosition.Up)                  _lessY = 128;
Magic Number,LetsCreateZelda.Gui,PlayerStatsGui,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Gui\PlayerStatsGui.cs,Draw,The following statement contains a magic number: spriteBatch.Draw(_backgroundTexture' new Rectangle(0' 128 - _lessY' 160' 16)' new Color(245' 245' 135));
Magic Number,LetsCreateZelda.Gui,PlayerStatsGui,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Gui\PlayerStatsGui.cs,Draw,The following statement contains a magic number: spriteBatch.Draw(_backgroundTexture' new Rectangle(0' 128 - _lessY' 160' 16)' new Color(245' 245' 135));
Magic Number,LetsCreateZelda.Gui,PlayerStatsGui,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Gui\PlayerStatsGui.cs,Draw,The following statement contains a magic number: spriteBatch.Draw(_backgroundTexture' new Rectangle(0' 128 - _lessY' 160' 16)' new Color(245' 245' 135));
Magic Number,LetsCreateZelda.Gui,PlayerStatsGui,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Gui\PlayerStatsGui.cs,Draw,The following statement contains a magic number: spriteBatch.Draw(_backgroundTexture' new Rectangle(0' 128 - _lessY' 160' 16)' new Color(245' 245' 135));
Magic Number,LetsCreateZelda.Gui,PlayerStatsGui,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Gui\PlayerStatsGui.cs,Draw,The following statement contains a magic number: spriteBatch.Draw(_backgroundTexture' new Rectangle(0' 128 - _lessY' 160' 16)' new Color(245' 245' 135));
Magic Number,LetsCreateZelda.Gui,PlayerStatsGui,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Gui\PlayerStatsGui.cs,Draw,The following statement contains a magic number: spriteBatch.Draw(_backgroundTexture' new Rectangle(0' 128 - _lessY' 160' 16)' new Color(245' 245' 135));
Magic Number,LetsCreateZelda.Gui,PlayerStatsGui,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Gui\PlayerStatsGui.cs,Draw,The following statement contains a magic number: spriteBatch.Draw(_containerTexture' new Rectangle(9' 130 - _lessY' 30' 12)' Color.Black);
Magic Number,LetsCreateZelda.Gui,PlayerStatsGui,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Gui\PlayerStatsGui.cs,Draw,The following statement contains a magic number: spriteBatch.Draw(_containerTexture' new Rectangle(9' 130 - _lessY' 30' 12)' Color.Black);
Magic Number,LetsCreateZelda.Gui,PlayerStatsGui,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Gui\PlayerStatsGui.cs,Draw,The following statement contains a magic number: spriteBatch.Draw(_containerTexture' new Rectangle(9' 130 - _lessY' 30' 12)' Color.Black);
Magic Number,LetsCreateZelda.Gui,PlayerStatsGui,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Gui\PlayerStatsGui.cs,Draw,The following statement contains a magic number: spriteBatch.Draw(_containerTexture' new Rectangle(9' 130 - _lessY' 30' 12)' Color.Black);
Magic Number,LetsCreateZelda.Gui,PlayerStatsGui,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Gui\PlayerStatsGui.cs,Draw,The following statement contains a magic number: spriteBatch.DrawString(_font' "B"' new Vector2(1' 129 - _lessY)' Color.Black);
Magic Number,LetsCreateZelda.Gui,PlayerStatsGui,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Gui\PlayerStatsGui.cs,Draw,The following statement contains a magic number: if (_equipment != null)              {                  _equipment.DrawGui(spriteBatch' ItemSlot.A' new Rectangle(12' 131 - _lessY' 22' 10));              }
Magic Number,LetsCreateZelda.Gui,PlayerStatsGui,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Gui\PlayerStatsGui.cs,Draw,The following statement contains a magic number: if (_equipment != null)              {                  _equipment.DrawGui(spriteBatch' ItemSlot.A' new Rectangle(12' 131 - _lessY' 22' 10));              }
Magic Number,LetsCreateZelda.Gui,PlayerStatsGui,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Gui\PlayerStatsGui.cs,Draw,The following statement contains a magic number: if (_equipment != null)              {                  _equipment.DrawGui(spriteBatch' ItemSlot.A' new Rectangle(12' 131 - _lessY' 22' 10));              }
Magic Number,LetsCreateZelda.Gui,PlayerStatsGui,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Gui\PlayerStatsGui.cs,Draw,The following statement contains a magic number: if (_equipment != null)              {                  _equipment.DrawGui(spriteBatch' ItemSlot.A' new Rectangle(12' 131 - _lessY' 22' 10));              }
Magic Number,LetsCreateZelda.Gui,PlayerStatsGui,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Gui\PlayerStatsGui.cs,Draw,The following statement contains a magic number: spriteBatch.Draw(_containerTexture' new Rectangle(47' 130 - _lessY' 30' 12)' Color.Black);
Magic Number,LetsCreateZelda.Gui,PlayerStatsGui,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Gui\PlayerStatsGui.cs,Draw,The following statement contains a magic number: spriteBatch.Draw(_containerTexture' new Rectangle(47' 130 - _lessY' 30' 12)' Color.Black);
Magic Number,LetsCreateZelda.Gui,PlayerStatsGui,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Gui\PlayerStatsGui.cs,Draw,The following statement contains a magic number: spriteBatch.Draw(_containerTexture' new Rectangle(47' 130 - _lessY' 30' 12)' Color.Black);
Magic Number,LetsCreateZelda.Gui,PlayerStatsGui,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Gui\PlayerStatsGui.cs,Draw,The following statement contains a magic number: spriteBatch.Draw(_containerTexture' new Rectangle(47' 130 - _lessY' 30' 12)' Color.Black);
Magic Number,LetsCreateZelda.Gui,PlayerStatsGui,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Gui\PlayerStatsGui.cs,Draw,The following statement contains a magic number: spriteBatch.DrawString(_font' "A"' new Vector2(40' 129 - _lessY)' Color.Black);
Magic Number,LetsCreateZelda.Gui,PlayerStatsGui,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Gui\PlayerStatsGui.cs,Draw,The following statement contains a magic number: spriteBatch.DrawString(_font' "A"' new Vector2(40' 129 - _lessY)' Color.Black);
Magic Number,LetsCreateZelda.Gui,PlayerStatsGui,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Gui\PlayerStatsGui.cs,Draw,The following statement contains a magic number: if (_equipment != null)              {                  _equipment.DrawGui(spriteBatch' ItemSlot.B' new Rectangle(50' 131 - _lessY' 22' 10));              }
Magic Number,LetsCreateZelda.Gui,PlayerStatsGui,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Gui\PlayerStatsGui.cs,Draw,The following statement contains a magic number: if (_equipment != null)              {                  _equipment.DrawGui(spriteBatch' ItemSlot.B' new Rectangle(50' 131 - _lessY' 22' 10));              }
Magic Number,LetsCreateZelda.Gui,PlayerStatsGui,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Gui\PlayerStatsGui.cs,Draw,The following statement contains a magic number: if (_equipment != null)              {                  _equipment.DrawGui(spriteBatch' ItemSlot.B' new Rectangle(50' 131 - _lessY' 22' 10));              }
Magic Number,LetsCreateZelda.Gui,PlayerStatsGui,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Gui\PlayerStatsGui.cs,Draw,The following statement contains a magic number: if (_equipment != null)              {                  _equipment.DrawGui(spriteBatch' ItemSlot.B' new Rectangle(50' 131 - _lessY' 22' 10));              }
Magic Number,LetsCreateZelda.Gui,PlayerStatsGui,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Gui\PlayerStatsGui.cs,Draw,The following statement contains a magic number: spriteBatch.Draw(_rupeeTexture' new Rectangle(80' 130 - _lessY' 9' 9)' Color.White);
Magic Number,LetsCreateZelda.Gui,PlayerStatsGui,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Gui\PlayerStatsGui.cs,Draw,The following statement contains a magic number: spriteBatch.Draw(_rupeeTexture' new Rectangle(80' 130 - _lessY' 9' 9)' Color.White);
Magic Number,LetsCreateZelda.Gui,PlayerStatsGui,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Gui\PlayerStatsGui.cs,Draw,The following statement contains a magic number: spriteBatch.Draw(_rupeeTexture' new Rectangle(80' 130 - _lessY' 9' 9)' Color.White);
Magic Number,LetsCreateZelda.Gui,PlayerStatsGui,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Gui\PlayerStatsGui.cs,Draw,The following statement contains a magic number: spriteBatch.Draw(_rupeeTexture' new Rectangle(80' 130 - _lessY' 9' 9)' Color.White);
Magic Number,LetsCreateZelda.Gui,PlayerStatsGui,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Gui\PlayerStatsGui.cs,Draw,The following statement contains a magic number: spriteBatch.DrawString(_font' "999"' new Vector2(80' 135 - _lessY)' Color.Black);
Magic Number,LetsCreateZelda.Gui,PlayerStatsGui,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Gui\PlayerStatsGui.cs,Draw,The following statement contains a magic number: spriteBatch.DrawString(_font' "999"' new Vector2(80' 135 - _lessY)' Color.Black);
Magic Number,LetsCreateZelda.Gui,PlayerStatsGui,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Gui\PlayerStatsGui.cs,Draw,The following statement contains a magic number: for (int n = 0; n < _stats.CurrentHealth; n++)              {                  spriteBatch.Draw(_heartTexture' new Rectangle(100 + n * 10' 130 - _lessY' 9' 9)' Color.White);              }
Magic Number,LetsCreateZelda.Gui,PlayerStatsGui,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Gui\PlayerStatsGui.cs,Draw,The following statement contains a magic number: for (int n = 0; n < _stats.CurrentHealth; n++)              {                  spriteBatch.Draw(_heartTexture' new Rectangle(100 + n * 10' 130 - _lessY' 9' 9)' Color.White);              }
Magic Number,LetsCreateZelda.Gui,PlayerStatsGui,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Gui\PlayerStatsGui.cs,Draw,The following statement contains a magic number: for (int n = 0; n < _stats.CurrentHealth; n++)              {                  spriteBatch.Draw(_heartTexture' new Rectangle(100 + n * 10' 130 - _lessY' 9' 9)' Color.White);              }
Magic Number,LetsCreateZelda.Gui,PlayerStatsGui,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Gui\PlayerStatsGui.cs,Draw,The following statement contains a magic number: for (int n = 0; n < _stats.CurrentHealth; n++)              {                  spriteBatch.Draw(_heartTexture' new Rectangle(100 + n * 10' 130 - _lessY' 9' 9)' Color.White);              }
Magic Number,LetsCreateZelda.Gui,PlayerStatsGui,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Gui\PlayerStatsGui.cs,Draw,The following statement contains a magic number: for (int n = 0; n < _stats.CurrentHealth; n++)              {                  spriteBatch.Draw(_heartTexture' new Rectangle(100 + n * 10' 130 - _lessY' 9' 9)' Color.White);              }
Magic Number,LetsCreateZelda.Gui,Window,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Gui\Window.cs,Window,The following statement contains a magic number: Opacity = 255;
Magic Number,LetsCreateZelda.Gui,WindowMessage,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Gui\WindowMessage.cs,WindowMessage,The following statement contains a magic number: Height = 40;
Magic Number,LetsCreateZelda.Gui,WindowMessage,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Gui\WindowMessage.cs,WindowMessage,The following statement contains a magic number: Width = 150;
Magic Number,LetsCreateZelda.Gui,WindowMessage,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Gui\WindowMessage.cs,WindowMessage,The following statement contains a magic number: switch (position)              {                      case WindowPosition.Up:                      Position = new Vector2(5'5);                      break;                         case WindowPosition.Down:                      Position = new Vector2(5'85);                      break;               }
Magic Number,LetsCreateZelda.Gui,WindowMessage,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Gui\WindowMessage.cs,WindowMessage,The following statement contains a magic number: switch (position)              {                      case WindowPosition.Up:                      Position = new Vector2(5'5);                      break;                         case WindowPosition.Down:                      Position = new Vector2(5'85);                      break;               }
Magic Number,LetsCreateZelda.Gui,WindowMessage,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Gui\WindowMessage.cs,WindowMessage,The following statement contains a magic number: switch (position)              {                      case WindowPosition.Up:                      Position = new Vector2(5'5);                      break;                         case WindowPosition.Down:                      Position = new Vector2(5'85);                      break;               }
Magic Number,LetsCreateZelda.Gui,WindowMessage,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Gui\WindowMessage.cs,WindowMessage,The following statement contains a magic number: switch (position)              {                      case WindowPosition.Up:                      Position = new Vector2(5'5);                      break;                         case WindowPosition.Down:                      Position = new Vector2(5'85);                      break;               }
Magic Number,LetsCreateZelda.Gui,WindowMessage,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Gui\WindowMessage.cs,SplitMessage,The following statement contains a magic number: if(Font.MeasureString(text).X > Width)              {                  for(var n = (Width)/5; n < text.Length; n +=(Width)/5)                  {                      if (!char.IsWhiteSpace(text[n]))                          n = FindSpace(text' n);                      text = text.Remove(n' 1);                      text = text.Insert(n' "\n");                   }                     _text.Add(text);              }              else              {                  _text.Add(text);              }
Magic Number,LetsCreateZelda.Gui,WindowMessage,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Gui\WindowMessage.cs,SplitMessage,The following statement contains a magic number: if(Font.MeasureString(text).X > Width)              {                  for(var n = (Width)/5; n < text.Length; n +=(Width)/5)                  {                      if (!char.IsWhiteSpace(text[n]))                          n = FindSpace(text' n);                      text = text.Remove(n' 1);                      text = text.Insert(n' "\n");                   }                     _text.Add(text);              }              else              {                  _text.Add(text);              }
Magic Number,LetsCreateZelda.Gui,WindowMessage,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Gui\WindowMessage.cs,Draw,The following statement contains a magic number: if(_currentIndex < _text.Count)                  spriteBatch.DrawString(Font'_text[_currentIndex]'new Vector2(Position.X + 5' Position.Y+5)'FontColor);
Magic Number,LetsCreateZelda.Gui,WindowMessage,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Gui\WindowMessage.cs,Draw,The following statement contains a magic number: if(_currentIndex < _text.Count)                  spriteBatch.DrawString(Font'_text[_currentIndex]'new Vector2(Position.X + 5' Position.Y+5)'FontColor);
Magic Number,LetsCreateZelda.Manager,ManagerCamera,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Manager\ManagerCamera.cs,Update,The following statement contains a magic number: if(ManagerFunction.Distance(_position'_moveToPosition) < 5)              {                  _position = _moveToPosition;               }
Magic Number,LetsCreateZelda.Manager,ManagerCamera,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Manager\ManagerCamera.cs,Move,The following statement contains a magic number: switch (direction)              {                 case Direction.Left:                      _moveToPosition = new Vector2(_position.X - 160' _position.Y);                      break;                   case Direction.Right:                      _moveToPosition = new Vector2(_position.X + 160' _position.Y);                      break;                   case Direction.Up:                      _moveToPosition = new Vector2(_position.X' _position.Y - 128);                      break;                     case Direction.Down:                      _moveToPosition = new Vector2(_position.X' _position.Y + 128);                      break;               }
Magic Number,LetsCreateZelda.Manager,ManagerCamera,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Manager\ManagerCamera.cs,Move,The following statement contains a magic number: switch (direction)              {                 case Direction.Left:                      _moveToPosition = new Vector2(_position.X - 160' _position.Y);                      break;                   case Direction.Right:                      _moveToPosition = new Vector2(_position.X + 160' _position.Y);                      break;                   case Direction.Up:                      _moveToPosition = new Vector2(_position.X' _position.Y - 128);                      break;                     case Direction.Down:                      _moveToPosition = new Vector2(_position.X' _position.Y + 128);                      break;               }
Magic Number,LetsCreateZelda.Manager,ManagerCamera,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Manager\ManagerCamera.cs,Move,The following statement contains a magic number: switch (direction)              {                 case Direction.Left:                      _moveToPosition = new Vector2(_position.X - 160' _position.Y);                      break;                   case Direction.Right:                      _moveToPosition = new Vector2(_position.X + 160' _position.Y);                      break;                   case Direction.Up:                      _moveToPosition = new Vector2(_position.X' _position.Y - 128);                      break;                     case Direction.Down:                      _moveToPosition = new Vector2(_position.X' _position.Y + 128);                      break;               }
Magic Number,LetsCreateZelda.Manager,ManagerCamera,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Manager\ManagerCamera.cs,Move,The following statement contains a magic number: switch (direction)              {                 case Direction.Left:                      _moveToPosition = new Vector2(_position.X - 160' _position.Y);                      break;                   case Direction.Right:                      _moveToPosition = new Vector2(_position.X + 160' _position.Y);                      break;                   case Direction.Up:                      _moveToPosition = new Vector2(_position.X' _position.Y - 128);                      break;                     case Direction.Down:                      _moveToPosition = new Vector2(_position.X' _position.Y + 128);                      break;               }
Magic Number,LetsCreateZelda.Manager,ManagerCamera,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Manager\ManagerCamera.cs,InScreenCheck,The following statement contains a magic number: return ((vector.X > _position.X - 16 && vector.X < _position.X + 160 + 16) &&                      (vector.Y > _position.Y - 16 && vector.Y < _position.Y + 128 + 16));
Magic Number,LetsCreateZelda.Manager,ManagerCamera,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Manager\ManagerCamera.cs,InScreenCheck,The following statement contains a magic number: return ((vector.X > _position.X - 16 && vector.X < _position.X + 160 + 16) &&                      (vector.Y > _position.Y - 16 && vector.Y < _position.Y + 128 + 16));
Magic Number,LetsCreateZelda.Manager,ManagerCamera,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Manager\ManagerCamera.cs,InScreenCheck,The following statement contains a magic number: return ((vector.X > _position.X - 16 && vector.X < _position.X + 160 + 16) &&                      (vector.Y > _position.Y - 16 && vector.Y < _position.Y + 128 + 16));
Magic Number,LetsCreateZelda.Manager,ManagerCamera,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Manager\ManagerCamera.cs,InScreenCheck,The following statement contains a magic number: return ((vector.X > _position.X - 16 && vector.X < _position.X + 160 + 16) &&                      (vector.Y > _position.Y - 16 && vector.Y < _position.Y + 128 + 16));
Magic Number,LetsCreateZelda.Manager,ManagerCamera,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Manager\ManagerCamera.cs,InScreenCheck,The following statement contains a magic number: return ((vector.X > _position.X - 16 && vector.X < _position.X + 160 + 16) &&                      (vector.Y > _position.Y - 16 && vector.Y < _position.Y + 128 + 16));
Magic Number,LetsCreateZelda.Manager,ManagerCamera,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Manager\ManagerCamera.cs,InScreenCheck,The following statement contains a magic number: return ((vector.X > _position.X - 16 && vector.X < _position.X + 160 + 16) &&                      (vector.Y > _position.Y - 16 && vector.Y < _position.Y + 128 + 16));
Magic Number,LetsCreateZelda.Manager,ManagerCamera,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Manager\ManagerCamera.cs,MouseInsideWindow,The following statement contains a magic number: return pos.X >= 0 && pos.X <= 160 && pos.Y >= 0 && pos.Y <= 128;
Magic Number,LetsCreateZelda.Manager,ManagerCamera,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Manager\ManagerCamera.cs,MouseInsideWindow,The following statement contains a magic number: return pos.X >= 0 && pos.X <= 160 && pos.Y >= 0 && pos.Y <= 128;
Magic Number,LetsCreateZelda.Manager,ManagerFunction,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Manager\ManagerFunction.cs,Distance,The following statement contains a magic number: var x = Math.Pow(positionOne.X - positionTwo.X'2);
Magic Number,LetsCreateZelda.Manager,ManagerFunction,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Manager\ManagerFunction.cs,Distance,The following statement contains a magic number: var y = Math.Pow(positionOne.Y - positionTwo.Y'2);
Magic Number,LetsCreateZelda.Manager,ManagerLists,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Manager\ManagerLists.cs,Initialize,The following statement contains a magic number: _eventSwitches.Add(2' new EventSwitch { Description = "test2"' Value = false });
Magic Number,LetsCreateZelda.Manager,ManagerMap,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Manager\ManagerMap.cs,LoadContent,The following statement contains a magic number: _tileEvents.Add(new TileEvent(1' 5' dictionary2));
Magic Number,LetsCreateZelda.Manager,ManagerScreen,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Manager\ManagerScreen.cs,LoadNewScreen,The following statement contains a magic number: ManagerInput.PauseInput(750);
Magic Number,LetsCreateZelda.Manager,ManagerScreen,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Manager\ManagerScreen.cs,FadeIn,The following statement contains a magic number: if (_counter > 100)              {                  _alpha -= 15;              }
Magic Number,LetsCreateZelda.Manager,ManagerScreen,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Manager\ManagerScreen.cs,FadeIn,The following statement contains a magic number: if (_counter > 100)              {                  _alpha -= 15;              }
Magic Number,LetsCreateZelda.Manager,ManagerScreen,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Manager\ManagerScreen.cs,FadeOut,The following statement contains a magic number: if (_counter > 100)              {                  _alpha += 15;              }
Magic Number,LetsCreateZelda.Manager,ManagerScreen,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Manager\ManagerScreen.cs,FadeOut,The following statement contains a magic number: if (_counter > 100)              {                  _alpha += 15;              }
Magic Number,LetsCreateZelda.Manager,ManagerScreen,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Manager\ManagerScreen.cs,FadeOut,The following statement contains a magic number: if (_alpha == 255)              {                  AfterFadeOut();                  _currentPhase = Phase.FadeIn;                  _counter = 0;              }
Magic Number,LetsCreateZelda.Manager,ManagerScreen,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Manager\ManagerScreen.cs,Draw,The following statement contains a magic number: if (_currentPhase == Phase.FadeIn || _currentPhase == Phase.FadeOut)              {                  spriteBatch.Draw(_backgroundTexture' new Rectangle(0' 0' 160' 144)' new Color(0' 0' 0' _alpha));              }
Magic Number,LetsCreateZelda.Manager,ManagerScreen,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Manager\ManagerScreen.cs,Draw,The following statement contains a magic number: if (_currentPhase == Phase.FadeIn || _currentPhase == Phase.FadeOut)              {                  spriteBatch.Draw(_backgroundTexture' new Rectangle(0' 0' 160' 144)' new Color(0' 0' 0' _alpha));              }
Magic Number,LetsCreateZelda.Map,TileCollision,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Map\TileCollision.cs,Intersect,The following statement contains a magic number: return ManagerCamera.InScreenCheck(position) && rectangle.Intersects(new Rectangle((int) position.X'(int) position.Y'16'16));
Magic Number,LetsCreateZelda.Map,TileCollision,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Map\TileCollision.cs,Intersect,The following statement contains a magic number: return ManagerCamera.InScreenCheck(position) && rectangle.Intersects(new Rectangle((int) position.X'(int) position.Y'16'16));
Magic Number,LetsCreateZelda.Screens,ScreenMainMenu,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Screens\ScreenMainMenu.cs,ScreenMainMenu,The following statement contains a magic number: _selectAlpha = 255;
Magic Number,LetsCreateZelda.Screens,ScreenMainMenu,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Screens\ScreenMainMenu.cs,ScreenMainMenu,The following statement contains a magic number: _instrumentColor = 255;
Magic Number,LetsCreateZelda.Screens,ScreenMainMenu,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Screens\ScreenMainMenu.cs,ManagerInput_FireNewInput,The following statement contains a magic number: switch (e.Input)              {                  case Input.Left:                      _cursorPosition.X--;                      if (_cursorPosition.X < 0)                      {                          _cursorPosition.X = 1;                          _cursorPosition.Y--;                          if (_cursorPosition.Y < 0)                          {                              _cursorPosition.Y = 7;                          }                      }                      break;                    case Input.Right:                      _cursorPosition.X++;                      if (_cursorPosition.X > 1)                      {                          _cursorPosition.X = 0;                          _cursorPosition.Y++;                          if (_cursorPosition.Y > 7)                              _cursorPosition.Y = 0;                      }                      break;                    case Input.Down:                      _cursorPosition.Y++;                      if (_cursorPosition.Y > 7)                      {                          _cursorPosition.X = 0;                          _cursorPosition.Y = 0;                      }                      break;                    case Input.Up:                      _cursorPosition.Y--;                      if (_cursorPosition.Y < 0)                      {                          _cursorPosition.X = 1;                          _cursorPosition.Y = 7;                      }                      break;                  case Input.Select:                      ManagerScreen.GoBackOneScreen();                      break;                   case Input.A:                      _equipment.SwitchEquipment(ItemSlot.A' _cursorPosition);                      break;                  case Input.S:                      _equipment.SwitchEquipment(ItemSlot.B' _cursorPosition);                      break;               }
Magic Number,LetsCreateZelda.Screens,ScreenMainMenu,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Screens\ScreenMainMenu.cs,ManagerInput_FireNewInput,The following statement contains a magic number: switch (e.Input)              {                  case Input.Left:                      _cursorPosition.X--;                      if (_cursorPosition.X < 0)                      {                          _cursorPosition.X = 1;                          _cursorPosition.Y--;                          if (_cursorPosition.Y < 0)                          {                              _cursorPosition.Y = 7;                          }                      }                      break;                    case Input.Right:                      _cursorPosition.X++;                      if (_cursorPosition.X > 1)                      {                          _cursorPosition.X = 0;                          _cursorPosition.Y++;                          if (_cursorPosition.Y > 7)                              _cursorPosition.Y = 0;                      }                      break;                    case Input.Down:                      _cursorPosition.Y++;                      if (_cursorPosition.Y > 7)                      {                          _cursorPosition.X = 0;                          _cursorPosition.Y = 0;                      }                      break;                    case Input.Up:                      _cursorPosition.Y--;                      if (_cursorPosition.Y < 0)                      {                          _cursorPosition.X = 1;                          _cursorPosition.Y = 7;                      }                      break;                  case Input.Select:                      ManagerScreen.GoBackOneScreen();                      break;                   case Input.A:                      _equipment.SwitchEquipment(ItemSlot.A' _cursorPosition);                      break;                  case Input.S:                      _equipment.SwitchEquipment(ItemSlot.B' _cursorPosition);                      break;               }
Magic Number,LetsCreateZelda.Screens,ScreenMainMenu,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Screens\ScreenMainMenu.cs,ManagerInput_FireNewInput,The following statement contains a magic number: switch (e.Input)              {                  case Input.Left:                      _cursorPosition.X--;                      if (_cursorPosition.X < 0)                      {                          _cursorPosition.X = 1;                          _cursorPosition.Y--;                          if (_cursorPosition.Y < 0)                          {                              _cursorPosition.Y = 7;                          }                      }                      break;                    case Input.Right:                      _cursorPosition.X++;                      if (_cursorPosition.X > 1)                      {                          _cursorPosition.X = 0;                          _cursorPosition.Y++;                          if (_cursorPosition.Y > 7)                              _cursorPosition.Y = 0;                      }                      break;                    case Input.Down:                      _cursorPosition.Y++;                      if (_cursorPosition.Y > 7)                      {                          _cursorPosition.X = 0;                          _cursorPosition.Y = 0;                      }                      break;                    case Input.Up:                      _cursorPosition.Y--;                      if (_cursorPosition.Y < 0)                      {                          _cursorPosition.X = 1;                          _cursorPosition.Y = 7;                      }                      break;                  case Input.Select:                      ManagerScreen.GoBackOneScreen();                      break;                   case Input.A:                      _equipment.SwitchEquipment(ItemSlot.A' _cursorPosition);                      break;                  case Input.S:                      _equipment.SwitchEquipment(ItemSlot.B' _cursorPosition);                      break;               }
Magic Number,LetsCreateZelda.Screens,ScreenMainMenu,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Screens\ScreenMainMenu.cs,ManagerInput_FireNewInput,The following statement contains a magic number: switch (e.Input)              {                  case Input.Left:                      _cursorPosition.X--;                      if (_cursorPosition.X < 0)                      {                          _cursorPosition.X = 1;                          _cursorPosition.Y--;                          if (_cursorPosition.Y < 0)                          {                              _cursorPosition.Y = 7;                          }                      }                      break;                    case Input.Right:                      _cursorPosition.X++;                      if (_cursorPosition.X > 1)                      {                          _cursorPosition.X = 0;                          _cursorPosition.Y++;                          if (_cursorPosition.Y > 7)                              _cursorPosition.Y = 0;                      }                      break;                    case Input.Down:                      _cursorPosition.Y++;                      if (_cursorPosition.Y > 7)                      {                          _cursorPosition.X = 0;                          _cursorPosition.Y = 0;                      }                      break;                    case Input.Up:                      _cursorPosition.Y--;                      if (_cursorPosition.Y < 0)                      {                          _cursorPosition.X = 1;                          _cursorPosition.Y = 7;                      }                      break;                  case Input.Select:                      ManagerScreen.GoBackOneScreen();                      break;                   case Input.A:                      _equipment.SwitchEquipment(ItemSlot.A' _cursorPosition);                      break;                  case Input.S:                      _equipment.SwitchEquipment(ItemSlot.B' _cursorPosition);                      break;               }
Magic Number,LetsCreateZelda.Screens,ScreenMainMenu,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Screens\ScreenMainMenu.cs,Update,The following statement contains a magic number: if (_cursorBlinkCounter > 600)              {                  _cursorBlinkCounter = 0;                  if (_selectAlpha == 255)                  {                      _selectAlpha = 0;                  }                  else                  {                      _selectAlpha = 255;                   }                                   }
Magic Number,LetsCreateZelda.Screens,ScreenMainMenu,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Screens\ScreenMainMenu.cs,Update,The following statement contains a magic number: if (_cursorBlinkCounter > 600)              {                  _cursorBlinkCounter = 0;                  if (_selectAlpha == 255)                  {                      _selectAlpha = 0;                  }                  else                  {                      _selectAlpha = 255;                   }                                   }
Magic Number,LetsCreateZelda.Screens,ScreenMainMenu,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Screens\ScreenMainMenu.cs,Update,The following statement contains a magic number: if (_cursorBlinkCounter > 600)              {                  _cursorBlinkCounter = 0;                  if (_selectAlpha == 255)                  {                      _selectAlpha = 0;                  }                  else                  {                      _selectAlpha = 255;                   }                                   }
Magic Number,LetsCreateZelda.Screens,ScreenMainMenu,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Screens\ScreenMainMenu.cs,Update,The following statement contains a magic number: if (_instrumentColor > 255)              {                  _instrumentColor = 0;               }
Magic Number,LetsCreateZelda.Screens,ScreenMainMenu,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Screens\ScreenMainMenu.cs,Draw,The following statement contains a magic number: spriteBatch.Draw(_backgroundTexture' new Rectangle(0' 0' 160' 144)' new Color(245' 245' 135));
Magic Number,LetsCreateZelda.Screens,ScreenMainMenu,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Screens\ScreenMainMenu.cs,Draw,The following statement contains a magic number: spriteBatch.Draw(_backgroundTexture' new Rectangle(0' 0' 160' 144)' new Color(245' 245' 135));
Magic Number,LetsCreateZelda.Screens,ScreenMainMenu,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Screens\ScreenMainMenu.cs,Draw,The following statement contains a magic number: spriteBatch.Draw(_backgroundTexture' new Rectangle(0' 0' 160' 144)' new Color(245' 245' 135));
Magic Number,LetsCreateZelda.Screens,ScreenMainMenu,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Screens\ScreenMainMenu.cs,Draw,The following statement contains a magic number: spriteBatch.Draw(_backgroundTexture' new Rectangle(0' 0' 160' 144)' new Color(245' 245' 135));
Magic Number,LetsCreateZelda.Screens,ScreenMainMenu,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Screens\ScreenMainMenu.cs,Draw,The following statement contains a magic number: spriteBatch.Draw(_backgroundTexture' new Rectangle(0' 0' 160' 144)' new Color(245' 245' 135));
Magic Number,LetsCreateZelda.Screens,ScreenMainMenu,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Screens\ScreenMainMenu.cs,Draw,The following statement contains a magic number: for (int n = 0; n < 10; n++)              {                  spriteBatch.Draw(_barHor'new Rectangle(n*20'18'17'4)'Color.White);                  spriteBatch.Draw(_barVert' new Rectangle(75' 25 + n*20' 4' 17)' Color.White);              }
Magic Number,LetsCreateZelda.Screens,ScreenMainMenu,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Screens\ScreenMainMenu.cs,Draw,The following statement contains a magic number: for (int n = 0; n < 10; n++)              {                  spriteBatch.Draw(_barHor'new Rectangle(n*20'18'17'4)'Color.White);                  spriteBatch.Draw(_barVert' new Rectangle(75' 25 + n*20' 4' 17)' Color.White);              }
Magic Number,LetsCreateZelda.Screens,ScreenMainMenu,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Screens\ScreenMainMenu.cs,Draw,The following statement contains a magic number: for (int n = 0; n < 10; n++)              {                  spriteBatch.Draw(_barHor'new Rectangle(n*20'18'17'4)'Color.White);                  spriteBatch.Draw(_barVert' new Rectangle(75' 25 + n*20' 4' 17)' Color.White);              }
Magic Number,LetsCreateZelda.Screens,ScreenMainMenu,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Screens\ScreenMainMenu.cs,Draw,The following statement contains a magic number: for (int n = 0; n < 10; n++)              {                  spriteBatch.Draw(_barHor'new Rectangle(n*20'18'17'4)'Color.White);                  spriteBatch.Draw(_barVert' new Rectangle(75' 25 + n*20' 4' 17)' Color.White);              }
Magic Number,LetsCreateZelda.Screens,ScreenMainMenu,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Screens\ScreenMainMenu.cs,Draw,The following statement contains a magic number: for (int n = 0; n < 10; n++)              {                  spriteBatch.Draw(_barHor'new Rectangle(n*20'18'17'4)'Color.White);                  spriteBatch.Draw(_barVert' new Rectangle(75' 25 + n*20' 4' 17)' Color.White);              }
Magic Number,LetsCreateZelda.Screens,ScreenMainMenu,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Screens\ScreenMainMenu.cs,Draw,The following statement contains a magic number: for (int n = 0; n < 10; n++)              {                  spriteBatch.Draw(_barHor'new Rectangle(n*20'18'17'4)'Color.White);                  spriteBatch.Draw(_barVert' new Rectangle(75' 25 + n*20' 4' 17)' Color.White);              }
Magic Number,LetsCreateZelda.Screens,ScreenMainMenu,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Screens\ScreenMainMenu.cs,Draw,The following statement contains a magic number: for (int n = 0; n < 10; n++)              {                  spriteBatch.Draw(_barHor'new Rectangle(n*20'18'17'4)'Color.White);                  spriteBatch.Draw(_barVert' new Rectangle(75' 25 + n*20' 4' 17)' Color.White);              }
Magic Number,LetsCreateZelda.Screens,ScreenMainMenu,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Screens\ScreenMainMenu.cs,Draw,The following statement contains a magic number: for (int n = 0; n < 10; n++)              {                  spriteBatch.Draw(_barHor'new Rectangle(n*20'18'17'4)'Color.White);                  spriteBatch.Draw(_barVert' new Rectangle(75' 25 + n*20' 4' 17)' Color.White);              }
Magic Number,LetsCreateZelda.Screens,ScreenMainMenu,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Screens\ScreenMainMenu.cs,Draw,The following statement contains a magic number: for (int n = 0; n < 10; n++)              {                  spriteBatch.Draw(_barHor'new Rectangle(n*20'18'17'4)'Color.White);                  spriteBatch.Draw(_barVert' new Rectangle(75' 25 + n*20' 4' 17)' Color.White);              }
Magic Number,LetsCreateZelda.Screens,ScreenMainMenu,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Screens\ScreenMainMenu.cs,Draw,The following statement contains a magic number: for (int n = 0; n < 10; n++)              {                  spriteBatch.Draw(_barHor'new Rectangle(n*20'18'17'4)'Color.White);                  spriteBatch.Draw(_barVert' new Rectangle(75' 25 + n*20' 4' 17)' Color.White);              }
Magic Number,LetsCreateZelda.Screens,ScreenMainMenu,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Screens\ScreenMainMenu.cs,Draw,The following statement contains a magic number: spriteBatch.Draw(_containerTexture' new Rectangle((int) (9 + 32*_cursorPosition.X)'(int) (30 + 14*_cursorPosition.Y)' 30' 12)' _cursorBlinkCounter < 300 ? Color.White : Color.Transparent);
Magic Number,LetsCreateZelda.Screens,ScreenMainMenu,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Screens\ScreenMainMenu.cs,Draw,The following statement contains a magic number: spriteBatch.Draw(_containerTexture' new Rectangle((int) (9 + 32*_cursorPosition.X)'(int) (30 + 14*_cursorPosition.Y)' 30' 12)' _cursorBlinkCounter < 300 ? Color.White : Color.Transparent);
Magic Number,LetsCreateZelda.Screens,ScreenMainMenu,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Screens\ScreenMainMenu.cs,Draw,The following statement contains a magic number: spriteBatch.Draw(_containerTexture' new Rectangle((int) (9 + 32*_cursorPosition.X)'(int) (30 + 14*_cursorPosition.Y)' 30' 12)' _cursorBlinkCounter < 300 ? Color.White : Color.Transparent);
Magic Number,LetsCreateZelda.Screens,ScreenMainMenu,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Screens\ScreenMainMenu.cs,Draw,The following statement contains a magic number: spriteBatch.Draw(_containerTexture' new Rectangle((int) (9 + 32*_cursorPosition.X)'(int) (30 + 14*_cursorPosition.Y)' 30' 12)' _cursorBlinkCounter < 300 ? Color.White : Color.Transparent);
Magic Number,LetsCreateZelda.Screens,ScreenMainMenu,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Screens\ScreenMainMenu.cs,Draw,The following statement contains a magic number: spriteBatch.Draw(_containerTexture' new Rectangle((int) (9 + 32*_cursorPosition.X)'(int) (30 + 14*_cursorPosition.Y)' 30' 12)' _cursorBlinkCounter < 300 ? Color.White : Color.Transparent);
Magic Number,LetsCreateZelda.Screens,ScreenMainMenu,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Screens\ScreenMainMenu.cs,Draw,The following statement contains a magic number: spriteBatch.Draw(_containerTexture' new Rectangle((int) (9 + 32*_cursorPosition.X)'(int) (30 + 14*_cursorPosition.Y)' 30' 12)' _cursorBlinkCounter < 300 ? Color.White : Color.Transparent);
Magic Number,LetsCreateZelda.Screens,ScreenMainMenu,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Screens\ScreenMainMenu.cs,Draw,The following statement contains a magic number: spriteBatch.Draw(_containerTexture' new Rectangle((int) (9 + 32*_cursorPosition.X)'(int) (30 + 14*_cursorPosition.Y)' 30' 12)' _cursorBlinkCounter < 300 ? Color.White : Color.Transparent);
Magic Number,LetsCreateZelda.Screens,ScreenMainMenu,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Screens\ScreenMainMenu.cs,Draw,The following statement contains a magic number: spriteBatch.DrawString(_font'"PUSH SELECT"'new Vector2(90'130)'new Color(0'0'0'_selectAlpha));
Magic Number,LetsCreateZelda.Screens,ScreenMainMenu,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Screens\ScreenMainMenu.cs,Draw,The following statement contains a magic number: spriteBatch.DrawString(_font'"PUSH SELECT"'new Vector2(90'130)'new Color(0'0'0'_selectAlpha));
Magic Number,LetsCreateZelda.Screens,ScreenMainMenu,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Screens\ScreenMainMenu.cs,DrawInstrument,The following statement contains a magic number: var length = 30;
Magic Number,LetsCreateZelda.Screens,ScreenMainMenu,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Screens\ScreenMainMenu.cs,DrawInstrument,The following statement contains a magic number: while (angle < 2*Math.PI)              {                  x = length*Math.Cos(angle);                  y = length*Math.Sin(angle);                    spriteBatch.Draw(_backgroundTexture' new Rectangle(120 + (int)x' 85 + (int)y' 5' 5)' new Color(_instrumentColor'255'255));                  spriteBatch.Draw(_backgroundTexture' new Rectangle(115 + (int)x' 85 + (int)y' 5' 5)' new Color(_instrumentColor' 255' 255));                  spriteBatch.Draw(_backgroundTexture' new Rectangle(115 + (int)x' 90 + (int)y' 5' 5)' new Color(_instrumentColor' 255' 255));                  spriteBatch.DrawString(_font'i.ToString()'new Vector2(120 + (int)x'85 + (int)y)'Color.Black);                  angle += 0.8;                  i++;               }
Magic Number,LetsCreateZelda.Screens,ScreenMainMenu,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Screens\ScreenMainMenu.cs,DrawInstrument,The following statement contains a magic number: while (angle < 2*Math.PI)              {                  x = length*Math.Cos(angle);                  y = length*Math.Sin(angle);                    spriteBatch.Draw(_backgroundTexture' new Rectangle(120 + (int)x' 85 + (int)y' 5' 5)' new Color(_instrumentColor'255'255));                  spriteBatch.Draw(_backgroundTexture' new Rectangle(115 + (int)x' 85 + (int)y' 5' 5)' new Color(_instrumentColor' 255' 255));                  spriteBatch.Draw(_backgroundTexture' new Rectangle(115 + (int)x' 90 + (int)y' 5' 5)' new Color(_instrumentColor' 255' 255));                  spriteBatch.DrawString(_font'i.ToString()'new Vector2(120 + (int)x'85 + (int)y)'Color.Black);                  angle += 0.8;                  i++;               }
Magic Number,LetsCreateZelda.Screens,ScreenMainMenu,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Screens\ScreenMainMenu.cs,DrawInstrument,The following statement contains a magic number: while (angle < 2*Math.PI)              {                  x = length*Math.Cos(angle);                  y = length*Math.Sin(angle);                    spriteBatch.Draw(_backgroundTexture' new Rectangle(120 + (int)x' 85 + (int)y' 5' 5)' new Color(_instrumentColor'255'255));                  spriteBatch.Draw(_backgroundTexture' new Rectangle(115 + (int)x' 85 + (int)y' 5' 5)' new Color(_instrumentColor' 255' 255));                  spriteBatch.Draw(_backgroundTexture' new Rectangle(115 + (int)x' 90 + (int)y' 5' 5)' new Color(_instrumentColor' 255' 255));                  spriteBatch.DrawString(_font'i.ToString()'new Vector2(120 + (int)x'85 + (int)y)'Color.Black);                  angle += 0.8;                  i++;               }
Magic Number,LetsCreateZelda.Screens,ScreenMainMenu,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Screens\ScreenMainMenu.cs,DrawInstrument,The following statement contains a magic number: while (angle < 2*Math.PI)              {                  x = length*Math.Cos(angle);                  y = length*Math.Sin(angle);                    spriteBatch.Draw(_backgroundTexture' new Rectangle(120 + (int)x' 85 + (int)y' 5' 5)' new Color(_instrumentColor'255'255));                  spriteBatch.Draw(_backgroundTexture' new Rectangle(115 + (int)x' 85 + (int)y' 5' 5)' new Color(_instrumentColor' 255' 255));                  spriteBatch.Draw(_backgroundTexture' new Rectangle(115 + (int)x' 90 + (int)y' 5' 5)' new Color(_instrumentColor' 255' 255));                  spriteBatch.DrawString(_font'i.ToString()'new Vector2(120 + (int)x'85 + (int)y)'Color.Black);                  angle += 0.8;                  i++;               }
Magic Number,LetsCreateZelda.Screens,ScreenMainMenu,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Screens\ScreenMainMenu.cs,DrawInstrument,The following statement contains a magic number: while (angle < 2*Math.PI)              {                  x = length*Math.Cos(angle);                  y = length*Math.Sin(angle);                    spriteBatch.Draw(_backgroundTexture' new Rectangle(120 + (int)x' 85 + (int)y' 5' 5)' new Color(_instrumentColor'255'255));                  spriteBatch.Draw(_backgroundTexture' new Rectangle(115 + (int)x' 85 + (int)y' 5' 5)' new Color(_instrumentColor' 255' 255));                  spriteBatch.Draw(_backgroundTexture' new Rectangle(115 + (int)x' 90 + (int)y' 5' 5)' new Color(_instrumentColor' 255' 255));                  spriteBatch.DrawString(_font'i.ToString()'new Vector2(120 + (int)x'85 + (int)y)'Color.Black);                  angle += 0.8;                  i++;               }
Magic Number,LetsCreateZelda.Screens,ScreenMainMenu,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Screens\ScreenMainMenu.cs,DrawInstrument,The following statement contains a magic number: while (angle < 2*Math.PI)              {                  x = length*Math.Cos(angle);                  y = length*Math.Sin(angle);                    spriteBatch.Draw(_backgroundTexture' new Rectangle(120 + (int)x' 85 + (int)y' 5' 5)' new Color(_instrumentColor'255'255));                  spriteBatch.Draw(_backgroundTexture' new Rectangle(115 + (int)x' 85 + (int)y' 5' 5)' new Color(_instrumentColor' 255' 255));                  spriteBatch.Draw(_backgroundTexture' new Rectangle(115 + (int)x' 90 + (int)y' 5' 5)' new Color(_instrumentColor' 255' 255));                  spriteBatch.DrawString(_font'i.ToString()'new Vector2(120 + (int)x'85 + (int)y)'Color.Black);                  angle += 0.8;                  i++;               }
Magic Number,LetsCreateZelda.Screens,ScreenMainMenu,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Screens\ScreenMainMenu.cs,DrawInstrument,The following statement contains a magic number: while (angle < 2*Math.PI)              {                  x = length*Math.Cos(angle);                  y = length*Math.Sin(angle);                    spriteBatch.Draw(_backgroundTexture' new Rectangle(120 + (int)x' 85 + (int)y' 5' 5)' new Color(_instrumentColor'255'255));                  spriteBatch.Draw(_backgroundTexture' new Rectangle(115 + (int)x' 85 + (int)y' 5' 5)' new Color(_instrumentColor' 255' 255));                  spriteBatch.Draw(_backgroundTexture' new Rectangle(115 + (int)x' 90 + (int)y' 5' 5)' new Color(_instrumentColor' 255' 255));                  spriteBatch.DrawString(_font'i.ToString()'new Vector2(120 + (int)x'85 + (int)y)'Color.Black);                  angle += 0.8;                  i++;               }
Magic Number,LetsCreateZelda.Screens,ScreenMainMenu,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Screens\ScreenMainMenu.cs,DrawInstrument,The following statement contains a magic number: while (angle < 2*Math.PI)              {                  x = length*Math.Cos(angle);                  y = length*Math.Sin(angle);                    spriteBatch.Draw(_backgroundTexture' new Rectangle(120 + (int)x' 85 + (int)y' 5' 5)' new Color(_instrumentColor'255'255));                  spriteBatch.Draw(_backgroundTexture' new Rectangle(115 + (int)x' 85 + (int)y' 5' 5)' new Color(_instrumentColor' 255' 255));                  spriteBatch.Draw(_backgroundTexture' new Rectangle(115 + (int)x' 90 + (int)y' 5' 5)' new Color(_instrumentColor' 255' 255));                  spriteBatch.DrawString(_font'i.ToString()'new Vector2(120 + (int)x'85 + (int)y)'Color.Black);                  angle += 0.8;                  i++;               }
Magic Number,LetsCreateZelda.Screens,ScreenMainMenu,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Screens\ScreenMainMenu.cs,DrawInstrument,The following statement contains a magic number: while (angle < 2*Math.PI)              {                  x = length*Math.Cos(angle);                  y = length*Math.Sin(angle);                    spriteBatch.Draw(_backgroundTexture' new Rectangle(120 + (int)x' 85 + (int)y' 5' 5)' new Color(_instrumentColor'255'255));                  spriteBatch.Draw(_backgroundTexture' new Rectangle(115 + (int)x' 85 + (int)y' 5' 5)' new Color(_instrumentColor' 255' 255));                  spriteBatch.Draw(_backgroundTexture' new Rectangle(115 + (int)x' 90 + (int)y' 5' 5)' new Color(_instrumentColor' 255' 255));                  spriteBatch.DrawString(_font'i.ToString()'new Vector2(120 + (int)x'85 + (int)y)'Color.Black);                  angle += 0.8;                  i++;               }
Magic Number,LetsCreateZelda.Screens,ScreenMainMenu,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Screens\ScreenMainMenu.cs,DrawInstrument,The following statement contains a magic number: while (angle < 2*Math.PI)              {                  x = length*Math.Cos(angle);                  y = length*Math.Sin(angle);                    spriteBatch.Draw(_backgroundTexture' new Rectangle(120 + (int)x' 85 + (int)y' 5' 5)' new Color(_instrumentColor'255'255));                  spriteBatch.Draw(_backgroundTexture' new Rectangle(115 + (int)x' 85 + (int)y' 5' 5)' new Color(_instrumentColor' 255' 255));                  spriteBatch.Draw(_backgroundTexture' new Rectangle(115 + (int)x' 90 + (int)y' 5' 5)' new Color(_instrumentColor' 255' 255));                  spriteBatch.DrawString(_font'i.ToString()'new Vector2(120 + (int)x'85 + (int)y)'Color.Black);                  angle += 0.8;                  i++;               }
Magic Number,LetsCreateZelda.Screens,ScreenMainMenu,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Screens\ScreenMainMenu.cs,DrawInstrument,The following statement contains a magic number: while (angle < 2*Math.PI)              {                  x = length*Math.Cos(angle);                  y = length*Math.Sin(angle);                    spriteBatch.Draw(_backgroundTexture' new Rectangle(120 + (int)x' 85 + (int)y' 5' 5)' new Color(_instrumentColor'255'255));                  spriteBatch.Draw(_backgroundTexture' new Rectangle(115 + (int)x' 85 + (int)y' 5' 5)' new Color(_instrumentColor' 255' 255));                  spriteBatch.Draw(_backgroundTexture' new Rectangle(115 + (int)x' 90 + (int)y' 5' 5)' new Color(_instrumentColor' 255' 255));                  spriteBatch.DrawString(_font'i.ToString()'new Vector2(120 + (int)x'85 + (int)y)'Color.Black);                  angle += 0.8;                  i++;               }
Magic Number,LetsCreateZelda.Screens,ScreenMainMenu,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Screens\ScreenMainMenu.cs,DrawInstrument,The following statement contains a magic number: while (angle < 2*Math.PI)              {                  x = length*Math.Cos(angle);                  y = length*Math.Sin(angle);                    spriteBatch.Draw(_backgroundTexture' new Rectangle(120 + (int)x' 85 + (int)y' 5' 5)' new Color(_instrumentColor'255'255));                  spriteBatch.Draw(_backgroundTexture' new Rectangle(115 + (int)x' 85 + (int)y' 5' 5)' new Color(_instrumentColor' 255' 255));                  spriteBatch.Draw(_backgroundTexture' new Rectangle(115 + (int)x' 90 + (int)y' 5' 5)' new Color(_instrumentColor' 255' 255));                  spriteBatch.DrawString(_font'i.ToString()'new Vector2(120 + (int)x'85 + (int)y)'Color.Black);                  angle += 0.8;                  i++;               }
Magic Number,LetsCreateZelda.Screens,ScreenMainMenu,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Screens\ScreenMainMenu.cs,DrawInstrument,The following statement contains a magic number: while (angle < 2*Math.PI)              {                  x = length*Math.Cos(angle);                  y = length*Math.Sin(angle);                    spriteBatch.Draw(_backgroundTexture' new Rectangle(120 + (int)x' 85 + (int)y' 5' 5)' new Color(_instrumentColor'255'255));                  spriteBatch.Draw(_backgroundTexture' new Rectangle(115 + (int)x' 85 + (int)y' 5' 5)' new Color(_instrumentColor' 255' 255));                  spriteBatch.Draw(_backgroundTexture' new Rectangle(115 + (int)x' 90 + (int)y' 5' 5)' new Color(_instrumentColor' 255' 255));                  spriteBatch.DrawString(_font'i.ToString()'new Vector2(120 + (int)x'85 + (int)y)'Color.Black);                  angle += 0.8;                  i++;               }
Magic Number,LetsCreateZelda.Screens,ScreenMainMenu,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Screens\ScreenMainMenu.cs,DrawInstrument,The following statement contains a magic number: while (angle < 2*Math.PI)              {                  x = length*Math.Cos(angle);                  y = length*Math.Sin(angle);                    spriteBatch.Draw(_backgroundTexture' new Rectangle(120 + (int)x' 85 + (int)y' 5' 5)' new Color(_instrumentColor'255'255));                  spriteBatch.Draw(_backgroundTexture' new Rectangle(115 + (int)x' 85 + (int)y' 5' 5)' new Color(_instrumentColor' 255' 255));                  spriteBatch.Draw(_backgroundTexture' new Rectangle(115 + (int)x' 90 + (int)y' 5' 5)' new Color(_instrumentColor' 255' 255));                  spriteBatch.DrawString(_font'i.ToString()'new Vector2(120 + (int)x'85 + (int)y)'Color.Black);                  angle += 0.8;                  i++;               }
Magic Number,LetsCreateZelda.Screens,ScreenMainMenu,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Screens\ScreenMainMenu.cs,DrawInstrument,The following statement contains a magic number: while (angle < 2*Math.PI)              {                  x = length*Math.Cos(angle);                  y = length*Math.Sin(angle);                    spriteBatch.Draw(_backgroundTexture' new Rectangle(120 + (int)x' 85 + (int)y' 5' 5)' new Color(_instrumentColor'255'255));                  spriteBatch.Draw(_backgroundTexture' new Rectangle(115 + (int)x' 85 + (int)y' 5' 5)' new Color(_instrumentColor' 255' 255));                  spriteBatch.Draw(_backgroundTexture' new Rectangle(115 + (int)x' 90 + (int)y' 5' 5)' new Color(_instrumentColor' 255' 255));                  spriteBatch.DrawString(_font'i.ToString()'new Vector2(120 + (int)x'85 + (int)y)'Color.Black);                  angle += 0.8;                  i++;               }
Magic Number,LetsCreateZelda.Screens,ScreenMainMenu,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Screens\ScreenMainMenu.cs,DrawInstrument,The following statement contains a magic number: while (angle < 2*Math.PI)              {                  x = length*Math.Cos(angle);                  y = length*Math.Sin(angle);                    spriteBatch.Draw(_backgroundTexture' new Rectangle(120 + (int)x' 85 + (int)y' 5' 5)' new Color(_instrumentColor'255'255));                  spriteBatch.Draw(_backgroundTexture' new Rectangle(115 + (int)x' 85 + (int)y' 5' 5)' new Color(_instrumentColor' 255' 255));                  spriteBatch.Draw(_backgroundTexture' new Rectangle(115 + (int)x' 90 + (int)y' 5' 5)' new Color(_instrumentColor' 255' 255));                  spriteBatch.DrawString(_font'i.ToString()'new Vector2(120 + (int)x'85 + (int)y)'Color.Black);                  angle += 0.8;                  i++;               }
Magic Number,LetsCreateZelda.Screens,ScreenMainMenu,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Screens\ScreenMainMenu.cs,DrawInstrument,The following statement contains a magic number: while (angle < 2*Math.PI)              {                  x = length*Math.Cos(angle);                  y = length*Math.Sin(angle);                    spriteBatch.Draw(_backgroundTexture' new Rectangle(120 + (int)x' 85 + (int)y' 5' 5)' new Color(_instrumentColor'255'255));                  spriteBatch.Draw(_backgroundTexture' new Rectangle(115 + (int)x' 85 + (int)y' 5' 5)' new Color(_instrumentColor' 255' 255));                  spriteBatch.Draw(_backgroundTexture' new Rectangle(115 + (int)x' 90 + (int)y' 5' 5)' new Color(_instrumentColor' 255' 255));                  spriteBatch.DrawString(_font'i.ToString()'new Vector2(120 + (int)x'85 + (int)y)'Color.Black);                  angle += 0.8;                  i++;               }
Magic Number,LetsCreateZelda.Screens,ScreenMainMenu,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Screens\ScreenMainMenu.cs,DrawInstrument,The following statement contains a magic number: while (angle < 2*Math.PI)              {                  x = length*Math.Cos(angle);                  y = length*Math.Sin(angle);                    spriteBatch.Draw(_backgroundTexture' new Rectangle(120 + (int)x' 85 + (int)y' 5' 5)' new Color(_instrumentColor'255'255));                  spriteBatch.Draw(_backgroundTexture' new Rectangle(115 + (int)x' 85 + (int)y' 5' 5)' new Color(_instrumentColor' 255' 255));                  spriteBatch.Draw(_backgroundTexture' new Rectangle(115 + (int)x' 90 + (int)y' 5' 5)' new Color(_instrumentColor' 255' 255));                  spriteBatch.DrawString(_font'i.ToString()'new Vector2(120 + (int)x'85 + (int)y)'Color.Black);                  angle += 0.8;                  i++;               }
Magic Number,LetsCreateZelda.Screens,ScreenMainMenu,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Screens\ScreenMainMenu.cs,DrawInstrument,The following statement contains a magic number: while (angle < 2*Math.PI)              {                  x = length*Math.Cos(angle);                  y = length*Math.Sin(angle);                    spriteBatch.Draw(_backgroundTexture' new Rectangle(120 + (int)x' 85 + (int)y' 5' 5)' new Color(_instrumentColor'255'255));                  spriteBatch.Draw(_backgroundTexture' new Rectangle(115 + (int)x' 85 + (int)y' 5' 5)' new Color(_instrumentColor' 255' 255));                  spriteBatch.Draw(_backgroundTexture' new Rectangle(115 + (int)x' 90 + (int)y' 5' 5)' new Color(_instrumentColor' 255' 255));                  spriteBatch.DrawString(_font'i.ToString()'new Vector2(120 + (int)x'85 + (int)y)'Color.Black);                  angle += 0.8;                  i++;               }
Magic Number,LetsCreateZelda.Screens,ScreenMainMenu,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Screens\ScreenMainMenu.cs,DrawInstrument,The following statement contains a magic number: while (angle < 2*Math.PI)              {                  x = length*Math.Cos(angle);                  y = length*Math.Sin(angle);                    spriteBatch.Draw(_backgroundTexture' new Rectangle(120 + (int)x' 85 + (int)y' 5' 5)' new Color(_instrumentColor'255'255));                  spriteBatch.Draw(_backgroundTexture' new Rectangle(115 + (int)x' 85 + (int)y' 5' 5)' new Color(_instrumentColor' 255' 255));                  spriteBatch.Draw(_backgroundTexture' new Rectangle(115 + (int)x' 90 + (int)y' 5' 5)' new Color(_instrumentColor' 255' 255));                  spriteBatch.DrawString(_font'i.ToString()'new Vector2(120 + (int)x'85 + (int)y)'Color.Black);                  angle += 0.8;                  i++;               }
Magic Number,LetsCreateZelda.Screens,ScreenMainMenu,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Screens\ScreenMainMenu.cs,DrawInstrument,The following statement contains a magic number: while (angle < 2*Math.PI)              {                  x = length*Math.Cos(angle);                  y = length*Math.Sin(angle);                    spriteBatch.Draw(_backgroundTexture' new Rectangle(120 + (int)x' 85 + (int)y' 5' 5)' new Color(_instrumentColor'255'255));                  spriteBatch.Draw(_backgroundTexture' new Rectangle(115 + (int)x' 85 + (int)y' 5' 5)' new Color(_instrumentColor' 255' 255));                  spriteBatch.Draw(_backgroundTexture' new Rectangle(115 + (int)x' 90 + (int)y' 5' 5)' new Color(_instrumentColor' 255' 255));                  spriteBatch.DrawString(_font'i.ToString()'new Vector2(120 + (int)x'85 + (int)y)'Color.Black);                  angle += 0.8;                  i++;               }
Magic Number,LetsCreateZelda.Screens,ScreenMainMenu,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Screens\ScreenMainMenu.cs,DrawInstrument,The following statement contains a magic number: while (angle < 2*Math.PI)              {                  x = length*Math.Cos(angle);                  y = length*Math.Sin(angle);                    spriteBatch.Draw(_backgroundTexture' new Rectangle(120 + (int)x' 85 + (int)y' 5' 5)' new Color(_instrumentColor'255'255));                  spriteBatch.Draw(_backgroundTexture' new Rectangle(115 + (int)x' 85 + (int)y' 5' 5)' new Color(_instrumentColor' 255' 255));                  spriteBatch.Draw(_backgroundTexture' new Rectangle(115 + (int)x' 90 + (int)y' 5' 5)' new Color(_instrumentColor' 255' 255));                  spriteBatch.DrawString(_font'i.ToString()'new Vector2(120 + (int)x'85 + (int)y)'Color.Black);                  angle += 0.8;                  i++;               }
Magic Number,LetsCreateZelda.Screens,ScreenOverworldMap,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Screens\ScreenOverworldMap.cs,ManagerInput_FireNewInput,The following statement contains a magic number: switch (e.Input)              {                  case Input.Left:                      if (_cursorPosition.X - 1 < 0)                          return;                      if (!_managerPlayer.TileExplored((int)_cursorPosition.X - 1' (int)_cursorPosition.Y))                          return;                       _cursorPosition = new Vector2(_cursorPosition.X - 1' _cursorPosition.Y);                      break;                  case Input.Right:                      if (_cursorPosition.X + 1 > 15)                          return;                      if (!_managerPlayer.TileExplored((int)_cursorPosition.X + 1' (int)_cursorPosition.Y))                          return;                       _cursorPosition = new Vector2(_cursorPosition.X + 1' _cursorPosition.Y);                      break;                  case Input.Up:                      if (_cursorPosition.Y - 1 < 0)                          return;                      if (!_managerPlayer.TileExplored((int)_cursorPosition.X' (int)_cursorPosition.Y - 1))                          return;                       _cursorPosition = new Vector2(_cursorPosition.X' _cursorPosition.Y - 1);                      break;                  case Input.Down:                      if (_cursorPosition.Y + 1 > 15)                          return;                      if (!_managerPlayer.TileExplored((int)_cursorPosition.X' (int)_cursorPosition.Y + 1))                          return;                       _cursorPosition = new Vector2(_cursorPosition.X' _cursorPosition.Y + 1);                      break;              }
Magic Number,LetsCreateZelda.Screens,ScreenOverworldMap,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Screens\ScreenOverworldMap.cs,ManagerInput_FireNewInput,The following statement contains a magic number: switch (e.Input)              {                  case Input.Left:                      if (_cursorPosition.X - 1 < 0)                          return;                      if (!_managerPlayer.TileExplored((int)_cursorPosition.X - 1' (int)_cursorPosition.Y))                          return;                       _cursorPosition = new Vector2(_cursorPosition.X - 1' _cursorPosition.Y);                      break;                  case Input.Right:                      if (_cursorPosition.X + 1 > 15)                          return;                      if (!_managerPlayer.TileExplored((int)_cursorPosition.X + 1' (int)_cursorPosition.Y))                          return;                       _cursorPosition = new Vector2(_cursorPosition.X + 1' _cursorPosition.Y);                      break;                  case Input.Up:                      if (_cursorPosition.Y - 1 < 0)                          return;                      if (!_managerPlayer.TileExplored((int)_cursorPosition.X' (int)_cursorPosition.Y - 1))                          return;                       _cursorPosition = new Vector2(_cursorPosition.X' _cursorPosition.Y - 1);                      break;                  case Input.Down:                      if (_cursorPosition.Y + 1 > 15)                          return;                      if (!_managerPlayer.TileExplored((int)_cursorPosition.X' (int)_cursorPosition.Y + 1))                          return;                       _cursorPosition = new Vector2(_cursorPosition.X' _cursorPosition.Y + 1);                      break;              }
Magic Number,LetsCreateZelda.Screens,ScreenOverworldMap,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Screens\ScreenOverworldMap.cs,Update,The following statement contains a magic number: if (_cursorCounter > 500)                  _cursorCounter = 0;
Magic Number,LetsCreateZelda.Screens,ScreenOverworldMap,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Screens\ScreenOverworldMap.cs,Draw,The following statement contains a magic number: for (int x = 0; x < 16; x++)              {                  for (int y = 0; y < 16; y++)                  {                      if(_managerPlayer.TileExplored(x'y))                          continue;                        spriteBatch.Draw(_mapBlockTexture'new Rectangle(16 + x*8' 8 + y*8'9'9)'Color.White);                  }              }
Magic Number,LetsCreateZelda.Screens,ScreenOverworldMap,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Screens\ScreenOverworldMap.cs,Draw,The following statement contains a magic number: for (int x = 0; x < 16; x++)              {                  for (int y = 0; y < 16; y++)                  {                      if(_managerPlayer.TileExplored(x'y))                          continue;                        spriteBatch.Draw(_mapBlockTexture'new Rectangle(16 + x*8' 8 + y*8'9'9)'Color.White);                  }              }
Magic Number,LetsCreateZelda.Screens,ScreenOverworldMap,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Screens\ScreenOverworldMap.cs,Draw,The following statement contains a magic number: for (int x = 0; x < 16; x++)              {                  for (int y = 0; y < 16; y++)                  {                      if(_managerPlayer.TileExplored(x'y))                          continue;                        spriteBatch.Draw(_mapBlockTexture'new Rectangle(16 + x*8' 8 + y*8'9'9)'Color.White);                  }              }
Magic Number,LetsCreateZelda.Screens,ScreenOverworldMap,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Screens\ScreenOverworldMap.cs,Draw,The following statement contains a magic number: for (int x = 0; x < 16; x++)              {                  for (int y = 0; y < 16; y++)                  {                      if(_managerPlayer.TileExplored(x'y))                          continue;                        spriteBatch.Draw(_mapBlockTexture'new Rectangle(16 + x*8' 8 + y*8'9'9)'Color.White);                  }              }
Magic Number,LetsCreateZelda.Screens,ScreenOverworldMap,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Screens\ScreenOverworldMap.cs,Draw,The following statement contains a magic number: for (int x = 0; x < 16; x++)              {                  for (int y = 0; y < 16; y++)                  {                      if(_managerPlayer.TileExplored(x'y))                          continue;                        spriteBatch.Draw(_mapBlockTexture'new Rectangle(16 + x*8' 8 + y*8'9'9)'Color.White);                  }              }
Magic Number,LetsCreateZelda.Screens,ScreenOverworldMap,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Screens\ScreenOverworldMap.cs,Draw,The following statement contains a magic number: for (int x = 0; x < 16; x++)              {                  for (int y = 0; y < 16; y++)                  {                      if(_managerPlayer.TileExplored(x'y))                          continue;                        spriteBatch.Draw(_mapBlockTexture'new Rectangle(16 + x*8' 8 + y*8'9'9)'Color.White);                  }              }
Magic Number,LetsCreateZelda.Screens,ScreenOverworldMap,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Screens\ScreenOverworldMap.cs,Draw,The following statement contains a magic number: for (int x = 0; x < 16; x++)              {                  for (int y = 0; y < 16; y++)                  {                      if(_managerPlayer.TileExplored(x'y))                          continue;                        spriteBatch.Draw(_mapBlockTexture'new Rectangle(16 + x*8' 8 + y*8'9'9)'Color.White);                  }              }
Magic Number,LetsCreateZelda.Screens,ScreenOverworldMap,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Screens\ScreenOverworldMap.cs,Draw,The following statement contains a magic number: for (int x = 0; x < 16; x++)              {                  for (int y = 0; y < 16; y++)                  {                      if(_managerPlayer.TileExplored(x'y))                          continue;                        spriteBatch.Draw(_mapBlockTexture'new Rectangle(16 + x*8' 8 + y*8'9'9)'Color.White);                  }              }
Magic Number,LetsCreateZelda.Screens,ScreenOverworldMap,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Screens\ScreenOverworldMap.cs,Draw,The following statement contains a magic number: spriteBatch.Draw(_cursorCounter > 250 ? _secondCursorTexture : _firstCursorTexture'                                  new Rectangle((int)(3 + _cursorPosition.X * 8)' (int)(_cursorPosition.Y * 8 - 5)' 36' 36)' Color.White);
Magic Number,LetsCreateZelda.Screens,ScreenOverworldMap,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Screens\ScreenOverworldMap.cs,Draw,The following statement contains a magic number: spriteBatch.Draw(_cursorCounter > 250 ? _secondCursorTexture : _firstCursorTexture'                                  new Rectangle((int)(3 + _cursorPosition.X * 8)' (int)(_cursorPosition.Y * 8 - 5)' 36' 36)' Color.White);
Magic Number,LetsCreateZelda.Screens,ScreenOverworldMap,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Screens\ScreenOverworldMap.cs,Draw,The following statement contains a magic number: spriteBatch.Draw(_cursorCounter > 250 ? _secondCursorTexture : _firstCursorTexture'                                  new Rectangle((int)(3 + _cursorPosition.X * 8)' (int)(_cursorPosition.Y * 8 - 5)' 36' 36)' Color.White);
Magic Number,LetsCreateZelda.Screens,ScreenOverworldMap,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Screens\ScreenOverworldMap.cs,Draw,The following statement contains a magic number: spriteBatch.Draw(_cursorCounter > 250 ? _secondCursorTexture : _firstCursorTexture'                                  new Rectangle((int)(3 + _cursorPosition.X * 8)' (int)(_cursorPosition.Y * 8 - 5)' 36' 36)' Color.White);
Magic Number,LetsCreateZelda.Screens,ScreenOverworldMap,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Screens\ScreenOverworldMap.cs,Draw,The following statement contains a magic number: spriteBatch.Draw(_cursorCounter > 250 ? _secondCursorTexture : _firstCursorTexture'                                  new Rectangle((int)(3 + _cursorPosition.X * 8)' (int)(_cursorPosition.Y * 8 - 5)' 36' 36)' Color.White);
Magic Number,LetsCreateZelda.Screens,ScreenOverworldMap,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Screens\ScreenOverworldMap.cs,Draw,The following statement contains a magic number: spriteBatch.Draw(_cursorCounter > 250 ? _secondCursorTexture : _firstCursorTexture'                                  new Rectangle((int)(3 + _cursorPosition.X * 8)' (int)(_cursorPosition.Y * 8 - 5)' 36' 36)' Color.White);
Magic Number,LetsCreateZelda.Screens,ScreenOverworldMap,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Screens\ScreenOverworldMap.cs,Draw,The following statement contains a magic number: spriteBatch.Draw(_cursorCounter > 250 ? _secondCursorTexture : _firstCursorTexture'                                  new Rectangle((int)(3 + _cursorPosition.X * 8)' (int)(_cursorPosition.Y * 8 - 5)' 36' 36)' Color.White);
Magic Number,LetsCreateZelda.Screens,ScreenOverworldMap,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Screens\ScreenOverworldMap.cs,Draw,The following statement contains a magic number: spriteBatch.Draw(_playerIconTexture' new Rectangle((int)(18 + _cameraPosition.X * 8)' (int)(_cameraPosition.Y * 8 + 10)' 6' 6)' _cursorCounter > 250 ? Color.White : Color.Red);
Magic Number,LetsCreateZelda.Screens,ScreenOverworldMap,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Screens\ScreenOverworldMap.cs,Draw,The following statement contains a magic number: spriteBatch.Draw(_playerIconTexture' new Rectangle((int)(18 + _cameraPosition.X * 8)' (int)(_cameraPosition.Y * 8 + 10)' 6' 6)' _cursorCounter > 250 ? Color.White : Color.Red);
Magic Number,LetsCreateZelda.Screens,ScreenOverworldMap,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Screens\ScreenOverworldMap.cs,Draw,The following statement contains a magic number: spriteBatch.Draw(_playerIconTexture' new Rectangle((int)(18 + _cameraPosition.X * 8)' (int)(_cameraPosition.Y * 8 + 10)' 6' 6)' _cursorCounter > 250 ? Color.White : Color.Red);
Magic Number,LetsCreateZelda.Screens,ScreenOverworldMap,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Screens\ScreenOverworldMap.cs,Draw,The following statement contains a magic number: spriteBatch.Draw(_playerIconTexture' new Rectangle((int)(18 + _cameraPosition.X * 8)' (int)(_cameraPosition.Y * 8 + 10)' 6' 6)' _cursorCounter > 250 ? Color.White : Color.Red);
Magic Number,LetsCreateZelda.Screens,ScreenOverworldMap,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Screens\ScreenOverworldMap.cs,Draw,The following statement contains a magic number: spriteBatch.Draw(_playerIconTexture' new Rectangle((int)(18 + _cameraPosition.X * 8)' (int)(_cameraPosition.Y * 8 + 10)' 6' 6)' _cursorCounter > 250 ? Color.White : Color.Red);
Magic Number,LetsCreateZelda.Screens,ScreenOverworldMap,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Screens\ScreenOverworldMap.cs,Draw,The following statement contains a magic number: spriteBatch.Draw(_playerIconTexture' new Rectangle((int)(18 + _cameraPosition.X * 8)' (int)(_cameraPosition.Y * 8 + 10)' 6' 6)' _cursorCounter > 250 ? Color.White : Color.Red);
Magic Number,LetsCreateZelda.Screens,ScreenOverworldMap,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Screens\ScreenOverworldMap.cs,Draw,The following statement contains a magic number: spriteBatch.Draw(_playerIconTexture' new Rectangle((int)(18 + _cameraPosition.X * 8)' (int)(_cameraPosition.Y * 8 + 10)' 6' 6)' _cursorCounter > 250 ? Color.White : Color.Red);
Magic Number,LetsCreateZelda.Screens,ScreenStart,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Screens\ScreenStart.cs,Draw,The following statement contains a magic number: spriteBatch.Draw(_image'new Rectangle(0'0'160'144)'Color.White);
Magic Number,LetsCreateZelda.Screens,ScreenStart,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Screens\ScreenStart.cs,Draw,The following statement contains a magic number: spriteBatch.Draw(_image'new Rectangle(0'0'160'144)'Color.White);
Magic Number,LetsCreateZelda.Screens,ScreenWorld,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Screens\ScreenWorld.cs,LoadContent,The following statement contains a magic number: player.AddComponent(new Sprite(ManagerContent.LoadTexture("link_full")' 16' 16' new Vector2(50' 50)));
Magic Number,LetsCreateZelda.Screens,ScreenWorld,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Screens\ScreenWorld.cs,LoadContent,The following statement contains a magic number: player.AddComponent(new Sprite(ManagerContent.LoadTexture("link_full")' 16' 16' new Vector2(50' 50)));
Magic Number,LetsCreateZelda.Screens,ScreenWorld,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Screens\ScreenWorld.cs,LoadContent,The following statement contains a magic number: player.AddComponent(new Sprite(ManagerContent.LoadTexture("link_full")' 16' 16' new Vector2(50' 50)));
Magic Number,LetsCreateZelda.Screens,ScreenWorld,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Screens\ScreenWorld.cs,LoadContent,The following statement contains a magic number: player.AddComponent(new Sprite(ManagerContent.LoadTexture("link_full")' 16' 16' new Vector2(50' 50)));
Magic Number,LetsCreateZelda.Screens,ScreenWorld,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Screens\ScreenWorld.cs,LoadContent,The following statement contains a magic number: player.AddComponent(new Animation(16' 16'2));
Magic Number,LetsCreateZelda.Screens,ScreenWorld,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Screens\ScreenWorld.cs,LoadContent,The following statement contains a magic number: player.AddComponent(new Animation(16' 16'2));
Magic Number,LetsCreateZelda.Screens,ScreenWorld,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Screens\ScreenWorld.cs,LoadContent,The following statement contains a magic number: player.AddComponent(new Animation(16' 16'2));
Magic Number,LetsCreateZelda.Screens,ScreenWorld,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Screens\ScreenWorld.cs,LoadContent,The following statement contains a magic number: player.GetComponent<Equipment>(ComponentType.Equipment).EquipItemInSlot(2' ItemSlot.B);
Magic Number,LetsCreateZelda.Screens,ScreenWorld,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Screens\ScreenWorld.cs,LoadContent,The following statement contains a magic number: testNPC.AddComponent(new Sprite(ManagerContent.LoadTexture("Marin")' 16' 16' new Vector2(70' 40)));
Magic Number,LetsCreateZelda.Screens,ScreenWorld,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Screens\ScreenWorld.cs,LoadContent,The following statement contains a magic number: testNPC.AddComponent(new Sprite(ManagerContent.LoadTexture("Marin")' 16' 16' new Vector2(70' 40)));
Magic Number,LetsCreateZelda.Screens,ScreenWorld,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Screens\ScreenWorld.cs,LoadContent,The following statement contains a magic number: testNPC.AddComponent(new Sprite(ManagerContent.LoadTexture("Marin")' 16' 16' new Vector2(70' 40)));
Magic Number,LetsCreateZelda.Screens,ScreenWorld,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Screens\ScreenWorld.cs,LoadContent,The following statement contains a magic number: testNPC.AddComponent(new Sprite(ManagerContent.LoadTexture("Marin")' 16' 16' new Vector2(70' 40)));
Magic Number,LetsCreateZelda.Screens,ScreenWorld,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Screens\ScreenWorld.cs,LoadContent,The following statement contains a magic number: testNPC.AddComponent(new Animation(16' 16));
Magic Number,LetsCreateZelda.Screens,ScreenWorld,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Screens\ScreenWorld.cs,LoadContent,The following statement contains a magic number: testNPC.AddComponent(new Animation(16' 16));
Missing Default,LetsCreateZelda.Components,Animation,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Components\Animation.cs,Update,The following switch statement is missing a default case: switch (CurrentState)                  {                      case State.Walking:                          ChangeState(0' _animationFrames);                          _counter = 0;                          break;                      case State.Special:                          ChangeState(_height * 4' 1);                          _counter = 0;                          break;                      case State.Pushing:                          ChangeState(_height * 8);                          _counter = 0;                           break;                  }
Missing Default,LetsCreateZelda.Components,Animation,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Components\Animation.cs,ChangeState,The following switch statement is missing a default case: switch (CurrentDirection)              {                  case Direction.Down:                      TextureRectangle = new Rectangle(_width * AnimationIndex' y' _width' _height);                      break;                  case Direction.Up:                      TextureRectangle = new Rectangle(_width * AnimationIndex' y + _height' _width' _height);                      break;                  case Direction.Left:                      TextureRectangle = new Rectangle(_width * AnimationIndex' y +_height * 2' _width' _height);                      break;                  case Direction.Right:                      TextureRectangle = new Rectangle(_width * AnimationIndex' y + _height * 3' _width' _height);                      break;              }
Missing Default,LetsCreateZelda.Components,Damage,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Components\Damage.cs,Update,The following switch statement is missing a default case: switch (animation.CurrentDirection)                      {                          case Direction.Down:                              direction = Direction.Up;                              break;                             case Direction.Left:                              direction = Direction.Right;                               break;                             case Direction.Right:                              direction = Direction.Left;                               break;                             case Direction.Up:                              direction = Direction.Down;                               break;                         }
Missing Default,LetsCreateZelda.Components,Sprite,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Components\Sprite.cs,Move,The following switch statement is missing a default case: switch (direction)              {                      case Direction.Up:                      Move(0'speed*-1);                      break;                         case Direction.Down:                      Move(0' speed);                      break;                         case Direction.Left:                      Move(speed*-1' 0);                      break;                         case Direction.Right:                      Move(speed' 0);                      break;               }
Missing Default,LetsCreateZelda.Components.Enemies,Octorok,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Components\Enemies\Octorok.cs,Update,The following switch statement is missing a default case: switch (animation.CurrentDirection)              {                      case Direction.Up:                      if(playerSprite.Position.Y < sprite.Position.Y)                          NewBullet(Direction.Up);                      break;                      case Direction.Down:                      if (playerSprite.Position.Y > sprite.Position.Y)                          NewBullet(Direction.Down);                      break;                      case Direction.Left:                      if (playerSprite.Position.X < sprite.Position.X)                          NewBullet(Direction.Left);                      break;                      case Direction.Right:                      if (playerSprite.Position.X > sprite.Position.X)                          NewBullet(Direction.Right);                      break;               }
Missing Default,LetsCreateZelda.Components.Enemies,OctorokBullet,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Components\Enemies\OctorokBullet.cs,Update,The following switch statement is missing a default case: switch (_direction)              {                  case Direction.Up:                     _sprite.Move(0'-1*_speed);                      break;                  case Direction.Down:                      _sprite.Move(0'_speed);                      break;                  case Direction.Left:                      _sprite.Move(-1*_speed'0);                      break;                  case Direction.Right:                      _sprite.Move(_speed'0);                      break;              }
Missing Default,LetsCreateZelda.Components.Items,Boomerang,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Components\Items\Boomerang.cs,Update,The following switch statement is missing a default case: switch (_currentState)              {                      case BoomerangState.Forward:                          MoveForward(sprite);                          if(_counter > 300)                              _currentState = BoomerangState.Back;                      break;                        case BoomerangState.Back:                          MoveBack(sprite);                       break;               }
Missing Default,LetsCreateZelda.Components.Items,Sword,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Components\Items\Sword.cs,UpdateAnimation,The following switch statement is missing a default case: switch (animation.CurrentDirection)                  {                      case Direction.Left:                          sprite.Teleport(new Vector2(ownerSprite.Position.X - sprite.Width + 5'                              ownerSprite.Position.Y - sprite.Height));                          break;                      case Direction.Right:                          sprite.Teleport(new Vector2(ownerSprite.Position.X + sprite.Width - 5'                              ownerSprite.Position.Y - sprite.Height));                          break;                      case Direction.Up:                          sprite.Teleport(new Vector2(ownerSprite.Position.X + sprite.Width - 5'                              ownerSprite.Position.Y - sprite.Height + 5));                          break;                      case Direction.Down:                          sprite.Teleport(new Vector2(ownerSprite.Position.X - sprite.Width + 5'                              ownerSprite.Position.Y + sprite.Height - 5));                          break;                  }
Missing Default,LetsCreateZelda.Components.Items,Sword,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Components\Items\Sword.cs,UpdateAnimation,The following switch statement is missing a default case: switch (animation.CurrentDirection)                  {                      case Direction.Left:                          sprite.Teleport(new Vector2(ownerSprite.Position.X - sprite.Width + 2'                              ownerSprite.Position.Y));                          break;                      case Direction.Right:                          sprite.Teleport(new Vector2(ownerSprite.Position.X + sprite.Width - 2'                              ownerSprite.Position.Y));                          break;                        case Direction.Up:                          sprite.Teleport(new Vector2(ownerSprite.Position.X'                              ownerSprite.Position.Y - sprite.Height + 6));                          break;                      case Direction.Down:                          sprite.Teleport(new Vector2(ownerSprite.Position.X + 4'                              ownerSprite.Position.Y + sprite.Height - 6));                          break;                  }
Missing Default,LetsCreateZelda.Factories,FactoryDeathAnimation,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Factories\FactoryDeathAnimation.cs,GetDeathAnimationObject,The following switch statement is missing a default case: switch (deathAnimation)              {                      case DeathAnimation.Explosion:                      baseObject.AddComponent(new Sprite(ManagerContent.LoadTexture("death_effect")' 16' 16' position));                      baseObject.AddComponent(new Animation(16' 16' 3'100));                      baseObject.AddComponent(new DeathAnimationExplosion());                      baseObject.AddComponent(new Camera(_camera));                      break;               }
Missing Default,LetsCreateZelda.Gui,WindowMessage,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Gui\WindowMessage.cs,WindowMessage,The following switch statement is missing a default case: switch (position)              {                      case WindowPosition.Up:                      Position = new Vector2(5'5);                      break;                         case WindowPosition.Down:                      Position = new Vector2(5'85);                      break;               }
Missing Default,LetsCreateZelda.Manager,ManagerCamera,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Manager\ManagerCamera.cs,Move,The following switch statement is missing a default case: switch (direction)              {                 case Direction.Left:                      _moveToPosition = new Vector2(_position.X - 160' _position.Y);                      break;                   case Direction.Right:                      _moveToPosition = new Vector2(_position.X + 160' _position.Y);                      break;                   case Direction.Up:                      _moveToPosition = new Vector2(_position.X' _position.Y - 128);                      break;                     case Direction.Down:                      _moveToPosition = new Vector2(_position.X' _position.Y + 128);                      break;               }
Missing Default,LetsCreateZelda.Manager,ManagerScreen,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Manager\ManagerScreen.cs,Update,The following switch statement is missing a default case: switch (_currentPhase)              {                  case Phase.FadeOut:                      FadeOut(gameTime);                      break;                  case Phase.FadeIn:                      FadeIn(gameTime);                      break;                  case Phase.Running:                      _currentScreen.Update(gameTime);                      break;              }
Missing Default,LetsCreateZelda.Screens,ScreenMainMenu,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Screens\ScreenMainMenu.cs,ManagerInput_FireNewInput,The following switch statement is missing a default case: switch (e.Input)              {                  case Input.Left:                      _cursorPosition.X--;                      if (_cursorPosition.X < 0)                      {                          _cursorPosition.X = 1;                          _cursorPosition.Y--;                          if (_cursorPosition.Y < 0)                          {                              _cursorPosition.Y = 7;                          }                      }                      break;                    case Input.Right:                      _cursorPosition.X++;                      if (_cursorPosition.X > 1)                      {                          _cursorPosition.X = 0;                          _cursorPosition.Y++;                          if (_cursorPosition.Y > 7)                              _cursorPosition.Y = 0;                      }                      break;                    case Input.Down:                      _cursorPosition.Y++;                      if (_cursorPosition.Y > 7)                      {                          _cursorPosition.X = 0;                          _cursorPosition.Y = 0;                      }                      break;                    case Input.Up:                      _cursorPosition.Y--;                      if (_cursorPosition.Y < 0)                      {                          _cursorPosition.X = 1;                          _cursorPosition.Y = 7;                      }                      break;                  case Input.Select:                      ManagerScreen.GoBackOneScreen();                      break;                   case Input.A:                      _equipment.SwitchEquipment(ItemSlot.A' _cursorPosition);                      break;                  case Input.S:                      _equipment.SwitchEquipment(ItemSlot.B' _cursorPosition);                      break;               }
Missing Default,LetsCreateZelda.Screens,ScreenOverworldMap,C:\repos\Meeii_SpeedCodingZelda\LetsCreateZelda\Screens\ScreenOverworldMap.cs,ManagerInput_FireNewInput,The following switch statement is missing a default case: switch (e.Input)              {                  case Input.Left:                      if (_cursorPosition.X - 1 < 0)                          return;                      if (!_managerPlayer.TileExplored((int)_cursorPosition.X - 1' (int)_cursorPosition.Y))                          return;                       _cursorPosition = new Vector2(_cursorPosition.X - 1' _cursorPosition.Y);                      break;                  case Input.Right:                      if (_cursorPosition.X + 1 > 15)                          return;                      if (!_managerPlayer.TileExplored((int)_cursorPosition.X + 1' (int)_cursorPosition.Y))                          return;                       _cursorPosition = new Vector2(_cursorPosition.X + 1' _cursorPosition.Y);                      break;                  case Input.Up:                      if (_cursorPosition.Y - 1 < 0)                          return;                      if (!_managerPlayer.TileExplored((int)_cursorPosition.X' (int)_cursorPosition.Y - 1))                          return;                       _cursorPosition = new Vector2(_cursorPosition.X' _cursorPosition.Y - 1);                      break;                  case Input.Down:                      if (_cursorPosition.Y + 1 > 15)                          return;                      if (!_managerPlayer.TileExplored((int)_cursorPosition.X' (int)_cursorPosition.Y + 1))                          return;                       _cursorPosition = new Vector2(_cursorPosition.X' _cursorPosition.Y + 1);                      break;              }
