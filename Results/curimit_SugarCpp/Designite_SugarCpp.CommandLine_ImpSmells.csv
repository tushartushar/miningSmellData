Implementation smell,Namespace,Class,File,Method,Description
Complex Method,SugarCpp.CommandLine,Arguments,F:\newReposMay17\curimit_SugarCpp\src\SugarCpp.CommandLine\Arguments.cs,Arguments,Cyclomatic complexity of the method is 15
Complex Method,SugarCpp.CommandLine,Translate,F:\newReposMay17\curimit_SugarCpp\src\SugarCpp.CommandLine\Translate.cs,Main,Cyclomatic complexity of the method is 10
Magic Number,SugarCpp.CommandLine,Arguments,F:\newReposMay17\curimit_SugarCpp\src\SugarCpp.CommandLine\Arguments.cs,Arguments,The following statement contains a magic number: for (int i = 0; i < args.Length; i++) {  	string arg = args [i];  	string nextArg = null;  	if (i < args.Length - 1) {  		nextArg = args [i + 1];  	}  	if (arg.Length > 0) {  		string opt = null;  		string optArg = null;  		if (arg.StartsWith ("-")) {  			if (arg.StartsWith ("--")) {  				// --option  				int equalSign = arg.IndexOf ('=');  				if (equalSign != -1) {  					// --option=value  					opt = arg.Substring (2' equalSign - 2);  					optArg = arg.Substring (equalSign + 1);  				} else {  					// --option value  					opt = arg.Substring (2);  				}  			} else {  				// -o  				opt = arg.Substring (1);  			}  		} else if (arg.StartsWith ("/")) {  			// /option  			int comma = arg.IndexOf (':');  			if (comma != -1) {  				// /option:value  				opt = arg.Substring (1' comma - 1);  				optArg = arg.Substring (comma + 1);  			} else {  				// /option value  				opt = arg.Substring (1);  			}  		}  		if (opt != null && options.ContainsKey (opt)) {  			bool hasArg = options [opt];  			if (hasArg) {  				if (optArg == null) {  					if (nextArg == null) {  						Program.Panic ("No argument after " + opt);  					}  					optArg = nextArg;  					i++;  				}  			} else {  				if (optArg != null) {  					Program.Panic ("No argument should be after " + opt);  				}  			}  			this.Options [opt] = optArg;  		} else {  			this.DirectArguments.Add (arg);  		}  	}  }  
Magic Number,SugarCpp.CommandLine,Arguments,F:\newReposMay17\curimit_SugarCpp\src\SugarCpp.CommandLine\Arguments.cs,Arguments,The following statement contains a magic number: for (int i = 0; i < args.Length; i++) {  	string arg = args [i];  	string nextArg = null;  	if (i < args.Length - 1) {  		nextArg = args [i + 1];  	}  	if (arg.Length > 0) {  		string opt = null;  		string optArg = null;  		if (arg.StartsWith ("-")) {  			if (arg.StartsWith ("--")) {  				// --option  				int equalSign = arg.IndexOf ('=');  				if (equalSign != -1) {  					// --option=value  					opt = arg.Substring (2' equalSign - 2);  					optArg = arg.Substring (equalSign + 1);  				} else {  					// --option value  					opt = arg.Substring (2);  				}  			} else {  				// -o  				opt = arg.Substring (1);  			}  		} else if (arg.StartsWith ("/")) {  			// /option  			int comma = arg.IndexOf (':');  			if (comma != -1) {  				// /option:value  				opt = arg.Substring (1' comma - 1);  				optArg = arg.Substring (comma + 1);  			} else {  				// /option value  				opt = arg.Substring (1);  			}  		}  		if (opt != null && options.ContainsKey (opt)) {  			bool hasArg = options [opt];  			if (hasArg) {  				if (optArg == null) {  					if (nextArg == null) {  						Program.Panic ("No argument after " + opt);  					}  					optArg = nextArg;  					i++;  				}  			} else {  				if (optArg != null) {  					Program.Panic ("No argument should be after " + opt);  				}  			}  			this.Options [opt] = optArg;  		} else {  			this.DirectArguments.Add (arg);  		}  	}  }  
Magic Number,SugarCpp.CommandLine,Arguments,F:\newReposMay17\curimit_SugarCpp\src\SugarCpp.CommandLine\Arguments.cs,Arguments,The following statement contains a magic number: for (int i = 0; i < args.Length; i++) {  	string arg = args [i];  	string nextArg = null;  	if (i < args.Length - 1) {  		nextArg = args [i + 1];  	}  	if (arg.Length > 0) {  		string opt = null;  		string optArg = null;  		if (arg.StartsWith ("-")) {  			if (arg.StartsWith ("--")) {  				// --option  				int equalSign = arg.IndexOf ('=');  				if (equalSign != -1) {  					// --option=value  					opt = arg.Substring (2' equalSign - 2);  					optArg = arg.Substring (equalSign + 1);  				} else {  					// --option value  					opt = arg.Substring (2);  				}  			} else {  				// -o  				opt = arg.Substring (1);  			}  		} else if (arg.StartsWith ("/")) {  			// /option  			int comma = arg.IndexOf (':');  			if (comma != -1) {  				// /option:value  				opt = arg.Substring (1' comma - 1);  				optArg = arg.Substring (comma + 1);  			} else {  				// /option value  				opt = arg.Substring (1);  			}  		}  		if (opt != null && options.ContainsKey (opt)) {  			bool hasArg = options [opt];  			if (hasArg) {  				if (optArg == null) {  					if (nextArg == null) {  						Program.Panic ("No argument after " + opt);  					}  					optArg = nextArg;  					i++;  				}  			} else {  				if (optArg != null) {  					Program.Panic ("No argument should be after " + opt);  				}  			}  			this.Options [opt] = optArg;  		} else {  			this.DirectArguments.Add (arg);  		}  	}  }  
Magic Number,SugarCpp.CommandLine,Arguments,F:\newReposMay17\curimit_SugarCpp\src\SugarCpp.CommandLine\Arguments.cs,Arguments,The following statement contains a magic number: if (arg.Length > 0) {  	string opt = null;  	string optArg = null;  	if (arg.StartsWith ("-")) {  		if (arg.StartsWith ("--")) {  			// --option  			int equalSign = arg.IndexOf ('=');  			if (equalSign != -1) {  				// --option=value  				opt = arg.Substring (2' equalSign - 2);  				optArg = arg.Substring (equalSign + 1);  			} else {  				// --option value  				opt = arg.Substring (2);  			}  		} else {  			// -o  			opt = arg.Substring (1);  		}  	} else if (arg.StartsWith ("/")) {  		// /option  		int comma = arg.IndexOf (':');  		if (comma != -1) {  			// /option:value  			opt = arg.Substring (1' comma - 1);  			optArg = arg.Substring (comma + 1);  		} else {  			// /option value  			opt = arg.Substring (1);  		}  	}  	if (opt != null && options.ContainsKey (opt)) {  		bool hasArg = options [opt];  		if (hasArg) {  			if (optArg == null) {  				if (nextArg == null) {  					Program.Panic ("No argument after " + opt);  				}  				optArg = nextArg;  				i++;  			}  		} else {  			if (optArg != null) {  				Program.Panic ("No argument should be after " + opt);  			}  		}  		this.Options [opt] = optArg;  	} else {  		this.DirectArguments.Add (arg);  	}  }  
Magic Number,SugarCpp.CommandLine,Arguments,F:\newReposMay17\curimit_SugarCpp\src\SugarCpp.CommandLine\Arguments.cs,Arguments,The following statement contains a magic number: if (arg.Length > 0) {  	string opt = null;  	string optArg = null;  	if (arg.StartsWith ("-")) {  		if (arg.StartsWith ("--")) {  			// --option  			int equalSign = arg.IndexOf ('=');  			if (equalSign != -1) {  				// --option=value  				opt = arg.Substring (2' equalSign - 2);  				optArg = arg.Substring (equalSign + 1);  			} else {  				// --option value  				opt = arg.Substring (2);  			}  		} else {  			// -o  			opt = arg.Substring (1);  		}  	} else if (arg.StartsWith ("/")) {  		// /option  		int comma = arg.IndexOf (':');  		if (comma != -1) {  			// /option:value  			opt = arg.Substring (1' comma - 1);  			optArg = arg.Substring (comma + 1);  		} else {  			// /option value  			opt = arg.Substring (1);  		}  	}  	if (opt != null && options.ContainsKey (opt)) {  		bool hasArg = options [opt];  		if (hasArg) {  			if (optArg == null) {  				if (nextArg == null) {  					Program.Panic ("No argument after " + opt);  				}  				optArg = nextArg;  				i++;  			}  		} else {  			if (optArg != null) {  				Program.Panic ("No argument should be after " + opt);  			}  		}  		this.Options [opt] = optArg;  	} else {  		this.DirectArguments.Add (arg);  	}  }  
Magic Number,SugarCpp.CommandLine,Arguments,F:\newReposMay17\curimit_SugarCpp\src\SugarCpp.CommandLine\Arguments.cs,Arguments,The following statement contains a magic number: if (arg.Length > 0) {  	string opt = null;  	string optArg = null;  	if (arg.StartsWith ("-")) {  		if (arg.StartsWith ("--")) {  			// --option  			int equalSign = arg.IndexOf ('=');  			if (equalSign != -1) {  				// --option=value  				opt = arg.Substring (2' equalSign - 2);  				optArg = arg.Substring (equalSign + 1);  			} else {  				// --option value  				opt = arg.Substring (2);  			}  		} else {  			// -o  			opt = arg.Substring (1);  		}  	} else if (arg.StartsWith ("/")) {  		// /option  		int comma = arg.IndexOf (':');  		if (comma != -1) {  			// /option:value  			opt = arg.Substring (1' comma - 1);  			optArg = arg.Substring (comma + 1);  		} else {  			// /option value  			opt = arg.Substring (1);  		}  	}  	if (opt != null && options.ContainsKey (opt)) {  		bool hasArg = options [opt];  		if (hasArg) {  			if (optArg == null) {  				if (nextArg == null) {  					Program.Panic ("No argument after " + opt);  				}  				optArg = nextArg;  				i++;  			}  		} else {  			if (optArg != null) {  				Program.Panic ("No argument should be after " + opt);  			}  		}  		this.Options [opt] = optArg;  	} else {  		this.DirectArguments.Add (arg);  	}  }  
Magic Number,SugarCpp.CommandLine,Arguments,F:\newReposMay17\curimit_SugarCpp\src\SugarCpp.CommandLine\Arguments.cs,Arguments,The following statement contains a magic number: if (arg.StartsWith ("-")) {  	if (arg.StartsWith ("--")) {  		// --option  		int equalSign = arg.IndexOf ('=');  		if (equalSign != -1) {  			// --option=value  			opt = arg.Substring (2' equalSign - 2);  			optArg = arg.Substring (equalSign + 1);  		} else {  			// --option value  			opt = arg.Substring (2);  		}  	} else {  		// -o  		opt = arg.Substring (1);  	}  } else if (arg.StartsWith ("/")) {  	// /option  	int comma = arg.IndexOf (':');  	if (comma != -1) {  		// /option:value  		opt = arg.Substring (1' comma - 1);  		optArg = arg.Substring (comma + 1);  	} else {  		// /option value  		opt = arg.Substring (1);  	}  }  
Magic Number,SugarCpp.CommandLine,Arguments,F:\newReposMay17\curimit_SugarCpp\src\SugarCpp.CommandLine\Arguments.cs,Arguments,The following statement contains a magic number: if (arg.StartsWith ("-")) {  	if (arg.StartsWith ("--")) {  		// --option  		int equalSign = arg.IndexOf ('=');  		if (equalSign != -1) {  			// --option=value  			opt = arg.Substring (2' equalSign - 2);  			optArg = arg.Substring (equalSign + 1);  		} else {  			// --option value  			opt = arg.Substring (2);  		}  	} else {  		// -o  		opt = arg.Substring (1);  	}  } else if (arg.StartsWith ("/")) {  	// /option  	int comma = arg.IndexOf (':');  	if (comma != -1) {  		// /option:value  		opt = arg.Substring (1' comma - 1);  		optArg = arg.Substring (comma + 1);  	} else {  		// /option value  		opt = arg.Substring (1);  	}  }  
Magic Number,SugarCpp.CommandLine,Arguments,F:\newReposMay17\curimit_SugarCpp\src\SugarCpp.CommandLine\Arguments.cs,Arguments,The following statement contains a magic number: if (arg.StartsWith ("-")) {  	if (arg.StartsWith ("--")) {  		// --option  		int equalSign = arg.IndexOf ('=');  		if (equalSign != -1) {  			// --option=value  			opt = arg.Substring (2' equalSign - 2);  			optArg = arg.Substring (equalSign + 1);  		} else {  			// --option value  			opt = arg.Substring (2);  		}  	} else {  		// -o  		opt = arg.Substring (1);  	}  } else if (arg.StartsWith ("/")) {  	// /option  	int comma = arg.IndexOf (':');  	if (comma != -1) {  		// /option:value  		opt = arg.Substring (1' comma - 1);  		optArg = arg.Substring (comma + 1);  	} else {  		// /option value  		opt = arg.Substring (1);  	}  }  
Magic Number,SugarCpp.CommandLine,Arguments,F:\newReposMay17\curimit_SugarCpp\src\SugarCpp.CommandLine\Arguments.cs,Arguments,The following statement contains a magic number: if (arg.StartsWith ("--")) {  	// --option  	int equalSign = arg.IndexOf ('=');  	if (equalSign != -1) {  		// --option=value  		opt = arg.Substring (2' equalSign - 2);  		optArg = arg.Substring (equalSign + 1);  	} else {  		// --option value  		opt = arg.Substring (2);  	}  } else {  	// -o  	opt = arg.Substring (1);  }  
Magic Number,SugarCpp.CommandLine,Arguments,F:\newReposMay17\curimit_SugarCpp\src\SugarCpp.CommandLine\Arguments.cs,Arguments,The following statement contains a magic number: if (arg.StartsWith ("--")) {  	// --option  	int equalSign = arg.IndexOf ('=');  	if (equalSign != -1) {  		// --option=value  		opt = arg.Substring (2' equalSign - 2);  		optArg = arg.Substring (equalSign + 1);  	} else {  		// --option value  		opt = arg.Substring (2);  	}  } else {  	// -o  	opt = arg.Substring (1);  }  
Magic Number,SugarCpp.CommandLine,Arguments,F:\newReposMay17\curimit_SugarCpp\src\SugarCpp.CommandLine\Arguments.cs,Arguments,The following statement contains a magic number: if (arg.StartsWith ("--")) {  	// --option  	int equalSign = arg.IndexOf ('=');  	if (equalSign != -1) {  		// --option=value  		opt = arg.Substring (2' equalSign - 2);  		optArg = arg.Substring (equalSign + 1);  	} else {  		// --option value  		opt = arg.Substring (2);  	}  } else {  	// -o  	opt = arg.Substring (1);  }  
Magic Number,SugarCpp.CommandLine,Arguments,F:\newReposMay17\curimit_SugarCpp\src\SugarCpp.CommandLine\Arguments.cs,Arguments,The following statement contains a magic number: if (equalSign != -1) {  	// --option=value  	opt = arg.Substring (2' equalSign - 2);  	optArg = arg.Substring (equalSign + 1);  } else {  	// --option value  	opt = arg.Substring (2);  }  
Magic Number,SugarCpp.CommandLine,Arguments,F:\newReposMay17\curimit_SugarCpp\src\SugarCpp.CommandLine\Arguments.cs,Arguments,The following statement contains a magic number: if (equalSign != -1) {  	// --option=value  	opt = arg.Substring (2' equalSign - 2);  	optArg = arg.Substring (equalSign + 1);  } else {  	// --option value  	opt = arg.Substring (2);  }  
Magic Number,SugarCpp.CommandLine,Arguments,F:\newReposMay17\curimit_SugarCpp\src\SugarCpp.CommandLine\Arguments.cs,Arguments,The following statement contains a magic number: if (equalSign != -1) {  	// --option=value  	opt = arg.Substring (2' equalSign - 2);  	optArg = arg.Substring (equalSign + 1);  } else {  	// --option value  	opt = arg.Substring (2);  }  
Magic Number,SugarCpp.CommandLine,Arguments,F:\newReposMay17\curimit_SugarCpp\src\SugarCpp.CommandLine\Arguments.cs,Arguments,The following statement contains a magic number: opt = arg.Substring (2' equalSign - 2);  
Magic Number,SugarCpp.CommandLine,Arguments,F:\newReposMay17\curimit_SugarCpp\src\SugarCpp.CommandLine\Arguments.cs,Arguments,The following statement contains a magic number: opt = arg.Substring (2' equalSign - 2);  
Magic Number,SugarCpp.CommandLine,Arguments,F:\newReposMay17\curimit_SugarCpp\src\SugarCpp.CommandLine\Arguments.cs,Arguments,The following statement contains a magic number: opt = arg.Substring (2);  
