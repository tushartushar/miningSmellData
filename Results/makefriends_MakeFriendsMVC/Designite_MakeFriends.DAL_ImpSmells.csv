Implementation smell,Namespace,Class,File,Method,Description
Complex Method,MakeFriends.DAL,DALBase,C:\repos\makefriends_MakeFriendsMVC\MakeFriends.DAL\DALBase.cs,GetReader,Cyclomatic complexity of the method is 9
Complex Method,MakeFriends.DAL,DALBase,C:\repos\makefriends_MakeFriendsMVC\MakeFriends.DAL\DALBase.cs,CreateCollection,Cyclomatic complexity of the method is 9
Complex Method,MakeFriends.DAL,DALBase,C:\repos\makefriends_MakeFriendsMVC\MakeFriends.DAL\DALBase.cs,GetValue,Cyclomatic complexity of the method is 11
Complex Method,MakeFriends.DAL,DALBase,C:\repos\makefriends_MakeFriendsMVC\MakeFriends.DAL\DALBase.cs,GetDBType,Cyclomatic complexity of the method is 10
Long Statement,MakeFriends.DAL,DALBase,C:\repos\makefriends_MakeFriendsMVC\MakeFriends.DAL\DALBase.cs,UpdateEntity,The length of the statement  "		DBActionAttribute actions = Attribute.GetCustomAttributes (entity.GetType ()' typeof(DBActionAttribute)).Cast<DBActionAttribute> ().First (a => a.Type.Has<DBActionType> (DBActionType.Create)); " is 192.
Long Statement,MakeFriends.DAL,DALBase,C:\repos\makefriends_MakeFriendsMVC\MakeFriends.DAL\DALBase.cs,UpdateEntity,The length of the statement  "				db.AddInParameter (cmd' "@" + attribute.Name' GetDBType (prop.PropertyType)' attribute.GetDataBaseValue (prop' entity)); " is 120.
Long Statement,MakeFriends.DAL,DALBase,C:\repos\makefriends_MakeFriendsMVC\MakeFriends.DAL\DALBase.cs,GetReader,The length of the statement  "		DBActionAttribute actions = Attribute.GetCustomAttributes (entity.GetType ()' typeof(DBActionAttribute)).Cast<DBActionAttribute> ().First (); " is 141.
Long Statement,MakeFriends.DAL,DALBase,C:\repos\makefriends_MakeFriendsMVC\MakeFriends.DAL\DALBase.cs,GetReader,The length of the statement  "						db.AddInParameter (cmd' "@" + attribute.Name' GetDBType (prop.PropertyType)' attribute.GetDataBaseValue (prop' entity)); " is 120.
Long Statement,MakeFriends.DAL,DALBase,C:\repos\makefriends_MakeFriendsMVC\MakeFriends.DAL\DALBase.cs,GetReader,The length of the statement  "						db.AddInParameter (cmd' "@" + attribute.Name' GetDBType (prop.PropertyType)' attribute.GetDataBaseValue (prop' entity)); " is 120.
Long Statement,MakeFriends.DAL,DALBase,C:\repos\makefriends_MakeFriendsMVC\MakeFriends.DAL\DALBase.cs,CreateCollection,The length of the statement  "					DBActionAttribute actions = Attribute.GetCustomAttributes (entity.GetType ()' typeof(DBActionAttribute)).Cast<DBActionAttribute> ().First (a => a.Type.Has<DBActionType> (DBActionType.Create)); " is 192.
Long Statement,MakeFriends.DAL,DALBase,C:\repos\makefriends_MakeFriendsMVC\MakeFriends.DAL\DALBase.cs,CreateCollection,The length of the statement  "							db.AddInParameter (cmd' "@" + attribute.Name' GetDBType (prop.PropertyType)' attribute.GetDataBaseValue (prop' entity)); " is 120.
Long Statement,MakeFriends.DAL,DALBase,C:\repos\makefriends_MakeFriendsMVC\MakeFriends.DAL\DALBase.cs,CreateCollection,The length of the statement  "					string query = string.Format ("insert into {0} ({1})values({2})"' actions.Name' fileds.ToString ()' values.ToString ()); " is 120.
Long Statement,MakeFriends.DAL,DALBase,C:\repos\makefriends_MakeFriendsMVC\MakeFriends.DAL\DALBase.cs,CreateEntity,The length of the statement  "		DBActionAttribute actions = Attribute.GetCustomAttributes (entity.GetType ()' typeof(DBActionAttribute)).Cast<DBActionAttribute> ().First (a => a.Type.Has<DBActionType> (DBActionType.Create)); " is 192.
Long Statement,MakeFriends.DAL,DALBase,C:\repos\makefriends_MakeFriendsMVC\MakeFriends.DAL\DALBase.cs,CreateEntity,The length of the statement  "					db.AddInParameter (cmd' "@" + attribute.Name' GetDBType (prop.PropertyType)' attribute.GetDataBaseValue (prop' entity)); " is 120.
Long Statement,MakeFriends.DAL,DALBase,C:\repos\makefriends_MakeFriendsMVC\MakeFriends.DAL\DALBase.cs,CreateEntity,The length of the statement  "		string query = string.Format ("insert into {0} ({1})values({2});{3}"' actions.Name' fileds.ToString ()' values.ToString ()' getIdentityQuery); " is 142.
Magic Number,MakeFriends.DAL,DALBase,C:\repos\makefriends_MakeFriendsMVC\MakeFriends.DAL\DALBase.cs,UpdateEntity,The following statement contains a magic number: using (DbCommand cmd = db.GetSqlStringCommand ("update")) {  	DBActionAttribute actions = Attribute.GetCustomAttributes (entity.GetType ()' typeof(DBActionAttribute)).Cast<DBActionAttribute> ().First (a => a.Type.Has<DBActionType> (DBActionType.Create));  	StringBuilder fileds = new StringBuilder ();  	StringBuilder whereClause = new StringBuilder ();  	DBFieldAttribute attribute;  	foreach (PropertyInfo prop in entity.GetType ().GetProperties (BindingFlags.Instance | BindingFlags.Public)) {  		if (Attribute.IsDefined (prop' typeof(DBFieldAttribute))) {  			attribute = Attribute.GetCustomAttribute (prop' typeof(DBFieldAttribute)) as DBFieldAttribute;  			if (attribute.isKey) {  				whereClause.Append ("where ");  				whereClause.Append (attribute.Name);  				whereClause.Append ("= ");  				whereClause.Append ("@");  				whereClause.Append (attribute.Name);  			}  			else {  				fileds.Append (attribute.Name);  				fileds.Append ("= ");  				fileds.Append ("@");  				fileds.Append (attribute.Name);  				fileds.Append ("' ");  			}  			db.AddInParameter (cmd' "@" + attribute.Name' GetDBType (prop.PropertyType)' attribute.GetDataBaseValue (prop' entity));  		}  	}  	fileds.Remove (fileds.Length - 2' 1);  	string query = string.Format ("update {0} set {1} {2}"' actions.Name' fileds.ToString ()' whereClause.ToString ());  	cmd.CommandText = query;  	db.ExecuteNonQuery (cmd);  }  
Magic Number,MakeFriends.DAL,DALBase,C:\repos\makefriends_MakeFriendsMVC\MakeFriends.DAL\DALBase.cs,UpdateEntity,The following statement contains a magic number: fileds.Remove (fileds.Length - 2' 1);  
Magic Number,MakeFriends.DAL,DALBase,C:\repos\makefriends_MakeFriendsMVC\MakeFriends.DAL\DALBase.cs,GetReader,The following statement contains a magic number: using (DbCommand cmd = db.GetSqlStringCommand ("select")) {  	StringBuilder fields = new StringBuilder ();  	DBActionAttribute actions = Attribute.GetCustomAttributes (entity.GetType ()' typeof(DBActionAttribute)).Cast<DBActionAttribute> ().First ();  	if (actions.Type.Has<DBActionType> (DBActionType.Get)) {  		string whereClause = string.Empty;  		fields.Append ("select ");  		DBFieldAttribute attribute;  		foreach (PropertyInfo prop in entity.GetType ().GetProperties (BindingFlags.Instance | BindingFlags.Public)) {  			if (Attribute.IsDefined (prop' typeof(DBFieldAttribute))) {  				attribute = Attribute.GetCustomAttribute (prop' typeof(DBFieldAttribute)) as DBFieldAttribute;  				if (attribute.isKey && filterByPrimaryKey) {  					db.AddInParameter (cmd' "@" + attribute.Name' GetDBType (prop.PropertyType)' attribute.GetDataBaseValue (prop' entity));  					whereClause += " where " + attribute.Name + " = @" + attribute.Name;  				}  				else if (attribute.IsSearchField && filterByForeignKey) {  					db.AddInParameter (cmd' "@" + attribute.Name' GetDBType (prop.PropertyType)' attribute.GetDataBaseValue (prop' entity));  					whereClause += " where " + attribute.Name + " = @" + attribute.Name;  				}  				fields.Append (attribute.Name);  				fields.Append ("' ");  			}  		}  		fields.Remove (fields.Length - 2' 1);  		fields.Append (" from ");  		fields.Append (actions.Name);  		if (filterByPrimaryKey || filterByForeignKey) {  			fields.Append (whereClause);  		}  		cmd.CommandText = fields.ToString ();  		rdr = db.ExecuteReader (cmd);  	}  }  
Magic Number,MakeFriends.DAL,DALBase,C:\repos\makefriends_MakeFriendsMVC\MakeFriends.DAL\DALBase.cs,GetReader,The following statement contains a magic number: if (actions.Type.Has<DBActionType> (DBActionType.Get)) {  	string whereClause = string.Empty;  	fields.Append ("select ");  	DBFieldAttribute attribute;  	foreach (PropertyInfo prop in entity.GetType ().GetProperties (BindingFlags.Instance | BindingFlags.Public)) {  		if (Attribute.IsDefined (prop' typeof(DBFieldAttribute))) {  			attribute = Attribute.GetCustomAttribute (prop' typeof(DBFieldAttribute)) as DBFieldAttribute;  			if (attribute.isKey && filterByPrimaryKey) {  				db.AddInParameter (cmd' "@" + attribute.Name' GetDBType (prop.PropertyType)' attribute.GetDataBaseValue (prop' entity));  				whereClause += " where " + attribute.Name + " = @" + attribute.Name;  			}  			else if (attribute.IsSearchField && filterByForeignKey) {  				db.AddInParameter (cmd' "@" + attribute.Name' GetDBType (prop.PropertyType)' attribute.GetDataBaseValue (prop' entity));  				whereClause += " where " + attribute.Name + " = @" + attribute.Name;  			}  			fields.Append (attribute.Name);  			fields.Append ("' ");  		}  	}  	fields.Remove (fields.Length - 2' 1);  	fields.Append (" from ");  	fields.Append (actions.Name);  	if (filterByPrimaryKey || filterByForeignKey) {  		fields.Append (whereClause);  	}  	cmd.CommandText = fields.ToString ();  	rdr = db.ExecuteReader (cmd);  }  
Magic Number,MakeFriends.DAL,DALBase,C:\repos\makefriends_MakeFriendsMVC\MakeFriends.DAL\DALBase.cs,GetReader,The following statement contains a magic number: fields.Remove (fields.Length - 2' 1);  
Magic Number,MakeFriends.DAL,DALBase,C:\repos\makefriends_MakeFriendsMVC\MakeFriends.DAL\DALBase.cs,CreateCollection,The following statement contains a magic number: using (DbConnection connection = db.CreateConnection ()) {  	connection.Open ();  	DbTransaction transaction = connection.BeginTransaction ();  	long counter = 0;  	try {  		foreach (object entity in enities) {  			using (DbCommand cmd = db.GetSqlStringCommand ("insert")) {  				DBActionAttribute actions = Attribute.GetCustomAttributes (entity.GetType ()' typeof(DBActionAttribute)).Cast<DBActionAttribute> ().First (a => a.Type.Has<DBActionType> (DBActionType.Create));  				StringBuilder fileds = new StringBuilder ();  				StringBuilder values = new StringBuilder ();  				DBFieldAttribute attribute;  				foreach (PropertyInfo prop in entity.GetType ().GetProperties (BindingFlags.Instance | BindingFlags.Public)) {  					if (Attribute.IsDefined (prop' typeof(DBFieldAttribute))) {  						attribute = Attribute.GetCustomAttribute (prop' typeof(DBFieldAttribute)) as DBFieldAttribute;  						fileds.Append (attribute.Name);  						fileds.Append ("' ");  						values.Append ("@");  						values.Append (attribute.Name);  						values.Append ("' ");  						db.AddInParameter (cmd' "@" + attribute.Name' GetDBType (prop.PropertyType)' attribute.GetDataBaseValue (prop' entity));  					}  				}  				fileds.Remove (fileds.Length - 2' 1);  				values.Remove (values.Length - 2' 1);  				string query = string.Format ("insert into {0} ({1})values({2})"' actions.Name' fileds.ToString ()' values.ToString ());  				cmd.CommandText = query;  				db.ExecuteNonQuery (cmd' transaction);  				counter++;  			}  		}  		transaction.Commit ();  		retVal = 1;  	}  	catch (Exception ex) {  		Log.Log.Report (string.Format ("Failed to insert collection : {0} "' ex.ToString ()));  		transaction.Rollback ();  		throw ex;  	}  	finally {  		connection.Close ();  	}  }  
Magic Number,MakeFriends.DAL,DALBase,C:\repos\makefriends_MakeFriendsMVC\MakeFriends.DAL\DALBase.cs,CreateCollection,The following statement contains a magic number: using (DbConnection connection = db.CreateConnection ()) {  	connection.Open ();  	DbTransaction transaction = connection.BeginTransaction ();  	long counter = 0;  	try {  		foreach (object entity in enities) {  			using (DbCommand cmd = db.GetSqlStringCommand ("insert")) {  				DBActionAttribute actions = Attribute.GetCustomAttributes (entity.GetType ()' typeof(DBActionAttribute)).Cast<DBActionAttribute> ().First (a => a.Type.Has<DBActionType> (DBActionType.Create));  				StringBuilder fileds = new StringBuilder ();  				StringBuilder values = new StringBuilder ();  				DBFieldAttribute attribute;  				foreach (PropertyInfo prop in entity.GetType ().GetProperties (BindingFlags.Instance | BindingFlags.Public)) {  					if (Attribute.IsDefined (prop' typeof(DBFieldAttribute))) {  						attribute = Attribute.GetCustomAttribute (prop' typeof(DBFieldAttribute)) as DBFieldAttribute;  						fileds.Append (attribute.Name);  						fileds.Append ("' ");  						values.Append ("@");  						values.Append (attribute.Name);  						values.Append ("' ");  						db.AddInParameter (cmd' "@" + attribute.Name' GetDBType (prop.PropertyType)' attribute.GetDataBaseValue (prop' entity));  					}  				}  				fileds.Remove (fileds.Length - 2' 1);  				values.Remove (values.Length - 2' 1);  				string query = string.Format ("insert into {0} ({1})values({2})"' actions.Name' fileds.ToString ()' values.ToString ());  				cmd.CommandText = query;  				db.ExecuteNonQuery (cmd' transaction);  				counter++;  			}  		}  		transaction.Commit ();  		retVal = 1;  	}  	catch (Exception ex) {  		Log.Log.Report (string.Format ("Failed to insert collection : {0} "' ex.ToString ()));  		transaction.Rollback ();  		throw ex;  	}  	finally {  		connection.Close ();  	}  }  
Magic Number,MakeFriends.DAL,DALBase,C:\repos\makefriends_MakeFriendsMVC\MakeFriends.DAL\DALBase.cs,CreateCollection,The following statement contains a magic number: try {  	foreach (object entity in enities) {  		using (DbCommand cmd = db.GetSqlStringCommand ("insert")) {  			DBActionAttribute actions = Attribute.GetCustomAttributes (entity.GetType ()' typeof(DBActionAttribute)).Cast<DBActionAttribute> ().First (a => a.Type.Has<DBActionType> (DBActionType.Create));  			StringBuilder fileds = new StringBuilder ();  			StringBuilder values = new StringBuilder ();  			DBFieldAttribute attribute;  			foreach (PropertyInfo prop in entity.GetType ().GetProperties (BindingFlags.Instance | BindingFlags.Public)) {  				if (Attribute.IsDefined (prop' typeof(DBFieldAttribute))) {  					attribute = Attribute.GetCustomAttribute (prop' typeof(DBFieldAttribute)) as DBFieldAttribute;  					fileds.Append (attribute.Name);  					fileds.Append ("' ");  					values.Append ("@");  					values.Append (attribute.Name);  					values.Append ("' ");  					db.AddInParameter (cmd' "@" + attribute.Name' GetDBType (prop.PropertyType)' attribute.GetDataBaseValue (prop' entity));  				}  			}  			fileds.Remove (fileds.Length - 2' 1);  			values.Remove (values.Length - 2' 1);  			string query = string.Format ("insert into {0} ({1})values({2})"' actions.Name' fileds.ToString ()' values.ToString ());  			cmd.CommandText = query;  			db.ExecuteNonQuery (cmd' transaction);  			counter++;  		}  	}  	transaction.Commit ();  	retVal = 1;  }  catch (Exception ex) {  	Log.Log.Report (string.Format ("Failed to insert collection : {0} "' ex.ToString ()));  	transaction.Rollback ();  	throw ex;  }  finally {  	connection.Close ();  }  
Magic Number,MakeFriends.DAL,DALBase,C:\repos\makefriends_MakeFriendsMVC\MakeFriends.DAL\DALBase.cs,CreateCollection,The following statement contains a magic number: try {  	foreach (object entity in enities) {  		using (DbCommand cmd = db.GetSqlStringCommand ("insert")) {  			DBActionAttribute actions = Attribute.GetCustomAttributes (entity.GetType ()' typeof(DBActionAttribute)).Cast<DBActionAttribute> ().First (a => a.Type.Has<DBActionType> (DBActionType.Create));  			StringBuilder fileds = new StringBuilder ();  			StringBuilder values = new StringBuilder ();  			DBFieldAttribute attribute;  			foreach (PropertyInfo prop in entity.GetType ().GetProperties (BindingFlags.Instance | BindingFlags.Public)) {  				if (Attribute.IsDefined (prop' typeof(DBFieldAttribute))) {  					attribute = Attribute.GetCustomAttribute (prop' typeof(DBFieldAttribute)) as DBFieldAttribute;  					fileds.Append (attribute.Name);  					fileds.Append ("' ");  					values.Append ("@");  					values.Append (attribute.Name);  					values.Append ("' ");  					db.AddInParameter (cmd' "@" + attribute.Name' GetDBType (prop.PropertyType)' attribute.GetDataBaseValue (prop' entity));  				}  			}  			fileds.Remove (fileds.Length - 2' 1);  			values.Remove (values.Length - 2' 1);  			string query = string.Format ("insert into {0} ({1})values({2})"' actions.Name' fileds.ToString ()' values.ToString ());  			cmd.CommandText = query;  			db.ExecuteNonQuery (cmd' transaction);  			counter++;  		}  	}  	transaction.Commit ();  	retVal = 1;  }  catch (Exception ex) {  	Log.Log.Report (string.Format ("Failed to insert collection : {0} "' ex.ToString ()));  	transaction.Rollback ();  	throw ex;  }  finally {  	connection.Close ();  }  
Magic Number,MakeFriends.DAL,DALBase,C:\repos\makefriends_MakeFriendsMVC\MakeFriends.DAL\DALBase.cs,CreateCollection,The following statement contains a magic number: foreach (object entity in enities) {  	using (DbCommand cmd = db.GetSqlStringCommand ("insert")) {  		DBActionAttribute actions = Attribute.GetCustomAttributes (entity.GetType ()' typeof(DBActionAttribute)).Cast<DBActionAttribute> ().First (a => a.Type.Has<DBActionType> (DBActionType.Create));  		StringBuilder fileds = new StringBuilder ();  		StringBuilder values = new StringBuilder ();  		DBFieldAttribute attribute;  		foreach (PropertyInfo prop in entity.GetType ().GetProperties (BindingFlags.Instance | BindingFlags.Public)) {  			if (Attribute.IsDefined (prop' typeof(DBFieldAttribute))) {  				attribute = Attribute.GetCustomAttribute (prop' typeof(DBFieldAttribute)) as DBFieldAttribute;  				fileds.Append (attribute.Name);  				fileds.Append ("' ");  				values.Append ("@");  				values.Append (attribute.Name);  				values.Append ("' ");  				db.AddInParameter (cmd' "@" + attribute.Name' GetDBType (prop.PropertyType)' attribute.GetDataBaseValue (prop' entity));  			}  		}  		fileds.Remove (fileds.Length - 2' 1);  		values.Remove (values.Length - 2' 1);  		string query = string.Format ("insert into {0} ({1})values({2})"' actions.Name' fileds.ToString ()' values.ToString ());  		cmd.CommandText = query;  		db.ExecuteNonQuery (cmd' transaction);  		counter++;  	}  }  
Magic Number,MakeFriends.DAL,DALBase,C:\repos\makefriends_MakeFriendsMVC\MakeFriends.DAL\DALBase.cs,CreateCollection,The following statement contains a magic number: foreach (object entity in enities) {  	using (DbCommand cmd = db.GetSqlStringCommand ("insert")) {  		DBActionAttribute actions = Attribute.GetCustomAttributes (entity.GetType ()' typeof(DBActionAttribute)).Cast<DBActionAttribute> ().First (a => a.Type.Has<DBActionType> (DBActionType.Create));  		StringBuilder fileds = new StringBuilder ();  		StringBuilder values = new StringBuilder ();  		DBFieldAttribute attribute;  		foreach (PropertyInfo prop in entity.GetType ().GetProperties (BindingFlags.Instance | BindingFlags.Public)) {  			if (Attribute.IsDefined (prop' typeof(DBFieldAttribute))) {  				attribute = Attribute.GetCustomAttribute (prop' typeof(DBFieldAttribute)) as DBFieldAttribute;  				fileds.Append (attribute.Name);  				fileds.Append ("' ");  				values.Append ("@");  				values.Append (attribute.Name);  				values.Append ("' ");  				db.AddInParameter (cmd' "@" + attribute.Name' GetDBType (prop.PropertyType)' attribute.GetDataBaseValue (prop' entity));  			}  		}  		fileds.Remove (fileds.Length - 2' 1);  		values.Remove (values.Length - 2' 1);  		string query = string.Format ("insert into {0} ({1})values({2})"' actions.Name' fileds.ToString ()' values.ToString ());  		cmd.CommandText = query;  		db.ExecuteNonQuery (cmd' transaction);  		counter++;  	}  }  
Magic Number,MakeFriends.DAL,DALBase,C:\repos\makefriends_MakeFriendsMVC\MakeFriends.DAL\DALBase.cs,CreateCollection,The following statement contains a magic number: using (DbCommand cmd = db.GetSqlStringCommand ("insert")) {  	DBActionAttribute actions = Attribute.GetCustomAttributes (entity.GetType ()' typeof(DBActionAttribute)).Cast<DBActionAttribute> ().First (a => a.Type.Has<DBActionType> (DBActionType.Create));  	StringBuilder fileds = new StringBuilder ();  	StringBuilder values = new StringBuilder ();  	DBFieldAttribute attribute;  	foreach (PropertyInfo prop in entity.GetType ().GetProperties (BindingFlags.Instance | BindingFlags.Public)) {  		if (Attribute.IsDefined (prop' typeof(DBFieldAttribute))) {  			attribute = Attribute.GetCustomAttribute (prop' typeof(DBFieldAttribute)) as DBFieldAttribute;  			fileds.Append (attribute.Name);  			fileds.Append ("' ");  			values.Append ("@");  			values.Append (attribute.Name);  			values.Append ("' ");  			db.AddInParameter (cmd' "@" + attribute.Name' GetDBType (prop.PropertyType)' attribute.GetDataBaseValue (prop' entity));  		}  	}  	fileds.Remove (fileds.Length - 2' 1);  	values.Remove (values.Length - 2' 1);  	string query = string.Format ("insert into {0} ({1})values({2})"' actions.Name' fileds.ToString ()' values.ToString ());  	cmd.CommandText = query;  	db.ExecuteNonQuery (cmd' transaction);  	counter++;  }  
Magic Number,MakeFriends.DAL,DALBase,C:\repos\makefriends_MakeFriendsMVC\MakeFriends.DAL\DALBase.cs,CreateCollection,The following statement contains a magic number: using (DbCommand cmd = db.GetSqlStringCommand ("insert")) {  	DBActionAttribute actions = Attribute.GetCustomAttributes (entity.GetType ()' typeof(DBActionAttribute)).Cast<DBActionAttribute> ().First (a => a.Type.Has<DBActionType> (DBActionType.Create));  	StringBuilder fileds = new StringBuilder ();  	StringBuilder values = new StringBuilder ();  	DBFieldAttribute attribute;  	foreach (PropertyInfo prop in entity.GetType ().GetProperties (BindingFlags.Instance | BindingFlags.Public)) {  		if (Attribute.IsDefined (prop' typeof(DBFieldAttribute))) {  			attribute = Attribute.GetCustomAttribute (prop' typeof(DBFieldAttribute)) as DBFieldAttribute;  			fileds.Append (attribute.Name);  			fileds.Append ("' ");  			values.Append ("@");  			values.Append (attribute.Name);  			values.Append ("' ");  			db.AddInParameter (cmd' "@" + attribute.Name' GetDBType (prop.PropertyType)' attribute.GetDataBaseValue (prop' entity));  		}  	}  	fileds.Remove (fileds.Length - 2' 1);  	values.Remove (values.Length - 2' 1);  	string query = string.Format ("insert into {0} ({1})values({2})"' actions.Name' fileds.ToString ()' values.ToString ());  	cmd.CommandText = query;  	db.ExecuteNonQuery (cmd' transaction);  	counter++;  }  
Magic Number,MakeFriends.DAL,DALBase,C:\repos\makefriends_MakeFriendsMVC\MakeFriends.DAL\DALBase.cs,CreateCollection,The following statement contains a magic number: fileds.Remove (fileds.Length - 2' 1);  
Magic Number,MakeFriends.DAL,DALBase,C:\repos\makefriends_MakeFriendsMVC\MakeFriends.DAL\DALBase.cs,CreateCollection,The following statement contains a magic number: values.Remove (values.Length - 2' 1);  
Magic Number,MakeFriends.DAL,DALBase,C:\repos\makefriends_MakeFriendsMVC\MakeFriends.DAL\DALBase.cs,CreateEntity,The following statement contains a magic number: using (DbCommand cmd = db.GetSqlStringCommand ("insert")) {  	string getIdentityQuery = string.Empty;  	DBActionAttribute actions = Attribute.GetCustomAttributes (entity.GetType ()' typeof(DBActionAttribute)).Cast<DBActionAttribute> ().First (a => a.Type.Has<DBActionType> (DBActionType.Create));  	StringBuilder fileds = new StringBuilder ();  	StringBuilder values = new StringBuilder ();  	DBFieldAttribute attribute;  	foreach (PropertyInfo prop in entity.GetType ().GetProperties (BindingFlags.Instance | BindingFlags.Public)) {  		if (Attribute.IsDefined (prop' typeof(DBFieldAttribute))) {  			attribute = Attribute.GetCustomAttribute (prop' typeof(DBFieldAttribute)) as DBFieldAttribute;  			if (attribute.IsIdentity) {  				getIdentityQuery = "Select LAST_INSERT_ID();";  			}  			else {  				fileds.Append (attribute.Name);  				fileds.Append ("' ");  				values.Append ("@");  				values.Append (attribute.Name);  				values.Append ("' ");  				db.AddInParameter (cmd' "@" + attribute.Name' GetDBType (prop.PropertyType)' attribute.GetDataBaseValue (prop' entity));  			}  		}  	}  	fileds.Remove (fileds.Length - 2' 1);  	values.Remove (values.Length - 2' 1);  	string query = string.Format ("insert into {0} ({1})values({2});{3}"' actions.Name' fileds.ToString ()' values.ToString ()' getIdentityQuery);  	cmd.CommandText = query;  	if (getIdentityQuery == string.Empty)  		db.ExecuteNonQuery (cmd);  	else  		identity = Convert.ToInt32 (db.ExecuteScalar (cmd));  }  
Magic Number,MakeFriends.DAL,DALBase,C:\repos\makefriends_MakeFriendsMVC\MakeFriends.DAL\DALBase.cs,CreateEntity,The following statement contains a magic number: using (DbCommand cmd = db.GetSqlStringCommand ("insert")) {  	string getIdentityQuery = string.Empty;  	DBActionAttribute actions = Attribute.GetCustomAttributes (entity.GetType ()' typeof(DBActionAttribute)).Cast<DBActionAttribute> ().First (a => a.Type.Has<DBActionType> (DBActionType.Create));  	StringBuilder fileds = new StringBuilder ();  	StringBuilder values = new StringBuilder ();  	DBFieldAttribute attribute;  	foreach (PropertyInfo prop in entity.GetType ().GetProperties (BindingFlags.Instance | BindingFlags.Public)) {  		if (Attribute.IsDefined (prop' typeof(DBFieldAttribute))) {  			attribute = Attribute.GetCustomAttribute (prop' typeof(DBFieldAttribute)) as DBFieldAttribute;  			if (attribute.IsIdentity) {  				getIdentityQuery = "Select LAST_INSERT_ID();";  			}  			else {  				fileds.Append (attribute.Name);  				fileds.Append ("' ");  				values.Append ("@");  				values.Append (attribute.Name);  				values.Append ("' ");  				db.AddInParameter (cmd' "@" + attribute.Name' GetDBType (prop.PropertyType)' attribute.GetDataBaseValue (prop' entity));  			}  		}  	}  	fileds.Remove (fileds.Length - 2' 1);  	values.Remove (values.Length - 2' 1);  	string query = string.Format ("insert into {0} ({1})values({2});{3}"' actions.Name' fileds.ToString ()' values.ToString ()' getIdentityQuery);  	cmd.CommandText = query;  	if (getIdentityQuery == string.Empty)  		db.ExecuteNonQuery (cmd);  	else  		identity = Convert.ToInt32 (db.ExecuteScalar (cmd));  }  
Magic Number,MakeFriends.DAL,DALBase,C:\repos\makefriends_MakeFriendsMVC\MakeFriends.DAL\DALBase.cs,CreateEntity,The following statement contains a magic number: fileds.Remove (fileds.Length - 2' 1);  
Magic Number,MakeFriends.DAL,DALBase,C:\repos\makefriends_MakeFriendsMVC\MakeFriends.DAL\DALBase.cs,CreateEntity,The following statement contains a magic number: values.Remove (values.Length - 2' 1);  
