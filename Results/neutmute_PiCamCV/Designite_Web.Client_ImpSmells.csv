Implementation smell,Namespace,Class,File,Method,Description
Magic Number,Web.Client,BsonPostTransmitter,C:\repos\neutmute_PiCamCV\source\Web.Client\BsonPostTransmitter.cs,Transmit,The following statement contains a magic number: using (HttpClient client = new HttpClient())              {                  client.BaseAddress = new Uri(RootUrl);                    // Set the Accept header for BSON.                  client.DefaultRequestHeaders.Accept.Clear();                  client.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue("application/bson"));                                    // POST using the BSON formatter.                  MediaTypeFormatter bsonFormatter = new BsonMediaTypeFormatter();                  try                  {                      var result = await client.PostAsync(UrlRoute' GetPostBody(image)' bsonFormatter);                      result.EnsureSuccessStatusCode();                  }                  catch (Exception httpEx)                  {                      const int retryMilliseconds = 20000;                      Console.WriteLine($"BsonPost: {httpEx}. Retrying in {retryMilliseconds}");                      _enabled = false;                      _retryTimer = new Timer(retryMilliseconds);                      _retryTimer.Elapsed += (sender' args) => _enabled = true;                      _retryTimer.Start();                  }                  finally                  {                      _transmitting = false;                  }              }
Magic Number,Web.Client,CameraHubProxy,C:\repos\neutmute_PiCamCV\source\Web.Client\CameraHubProxy.cs,SafeInvokeRemote,The following statement contains a magic number: try              {                  if (arg == null)                  {                      _proxy.Invoke(method);                  }                  else                  {                      _proxy.Invoke(method' arg);                  }              }              catch (Exception e)              {                  _connected = false;                  const int retryMilliseconds = 30000;                  _reconnectTimer = new Timer(retryMilliseconds);                  _reconnectTimer.Elapsed += ReconnectTimerElapsed;                  _reconnectTimer.Start();                  Log($"{e.Message}. Retrying in {retryMilliseconds}");              }
