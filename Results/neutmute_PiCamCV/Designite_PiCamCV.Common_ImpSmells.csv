Implementation smell,Namespace,Class,File,Method,Description
Long Method,PiCamCV.Common,MotionDetector,C:\research\architectureSmells\repos\neutmute_PiCamCV\source\PiCamCV.Common\MotionDetector.cs,DoProcess,The method has 107 lines of code.
Long Method,PiCamCV.Common.PanTilt.Controllers,MultimodePanTiltController,C:\research\architectureSmells\repos\neutmute_PiCamCV\source\PiCamCV.Common\PanTilt\Controllers\MultimodePanTiltController.cs,DoProcess,The method has 115 lines of code.
Complex Method,PiCamCV.Common,MotionDetector,C:\research\architectureSmells\repos\neutmute_PiCamCV\source\PiCamCV.Common\MotionDetector.cs,DoProcess,Cyclomatic complexity of the method is 10
Complex Method,PiCamCV.Common.PanTilt.Controllers,MultimodePanTiltController,C:\research\architectureSmells\repos\neutmute_PiCamCV\source\PiCamCV.Common\PanTilt\Controllers\MultimodePanTiltController.cs,DoProcess,Cyclomatic complexity of the method is 16
Complex Method,PiCamCV.Common.PanTilt.Controllers,MultimodePanTiltController,C:\research\architectureSmells\repos\neutmute_PiCamCV\source\PiCamCV.Common\PanTilt\Controllers\MultimodePanTiltController.cs,HandleKeyPress,Cyclomatic complexity of the method is 8
Complex Method,PiCamCV.Common.PanTilt.Controllers.multimode,AutonomousTrackStateManager,C:\research\architectureSmells\repos\neutmute_PiCamCV\source\PiCamCV.Common\PanTilt\Controllers\multimode\AutonomousTrackStateManager.cs,AcceptInput,Cyclomatic complexity of the method is 9
Long Parameter List,PiCamCV.Common,ThresholdSettings,C:\research\architectureSmells\repos\neutmute_PiCamCV\source\PiCamCV.Common\ThresholdSettings.cs,Get,The method has 6 parameters. Parameters: lowHue' lowSat' lowValue' highHue' highSat' highValue
Long Parameter List,PiCamCV.Common.PanTilt.Controllers,MultimodePanTiltController,C:\research\architectureSmells\repos\neutmute_PiCamCV\source\PiCamCV.Common\PanTilt\Controllers\MultimodePanTiltController.cs,MultimodePanTiltController,The method has 5 parameters. Parameters: panTiltMech' captureConfig' screen' serverToCameraBus' outputPipelines
Long Identifier,PiCamCV.Common.PanTilt.Controllers.multimode,AutonomousTrackStateManager,C:\research\architectureSmells\repos\neutmute_PiCamCV\source\PiCamCV.Common\PanTilt\Controllers\multimode\AutonomousTrackStateManager.cs,DecideNextSmoothPursuit,The length of the parameter nextSmoothPursuitSpeedMilliseconds is 34.
Long Statement,PiCamCV.Common,CamshiftDetector,C:\research\architectureSmells\repos\neutmute_PiCamCV\source\PiCamCV.Common\CamshiftDetector.cs,StartNewTrack,The length of the statement  "                CvInvoke.CalcHist(vmTrackingImageRoi' _channels' _matBackProjectionMask' _histogram' _histogramSize' _ranges' Accumulate);" is 122.
Long Statement,PiCamCV.Common,PiSettings,C:\research\architectureSmells\repos\neutmute_PiCamCV\source\PiCamCV.Common\Interfaces\ICameraServerBus.cs,ToString,The length of the statement  "            return $"TransmitImagePeriod={TransmitImagePeriod.ToHumanReadable()}' EnableImageTransmit={EnableImageTransmit}' EnableConsoleTransmit={EnableConsoleTransmit}";" is 160.
Long Statement,PiCamCV.Common,MotionDetector,C:\research\architectureSmells\repos\neutmute_PiCamCV\source\PiCamCV.Common\MotionDetector.cs,DoProcess,The length of the statement  "            _motionHistory.MotionInfo(_forgroundMask' new Rectangle(Point.Empty' motionMask.Size)' out overallAngle' out overallMotionPixelCount);" is 134.
Long Statement,PiCamCV.Common.PanTilt.Controllers,MultimodePanTiltController,C:\research\architectureSmells\repos\neutmute_PiCamCV\source\PiCamCV.Common\PanTilt\Controllers\MultimodePanTiltController.cs,ReportPursuitBoundaries,The length of the statement  "            var panText = $"Pan={_autonomousManager.PursuitBoundaryLower.PanPercent}-{_autonomousManager.PursuitBoundaryUpper.PanPercent}";" is 127.
Long Statement,PiCamCV.Common.PanTilt.Controllers,MultimodePanTiltController,C:\research\architectureSmells\repos\neutmute_PiCamCV\source\PiCamCV.Common\PanTilt\Controllers\MultimodePanTiltController.cs,ReportPursuitBoundaries,The length of the statement  "            var tiltText = $"Tilt={_autonomousManager.PursuitBoundaryLower.TiltPercent}-{_autonomousManager.PursuitBoundaryUpper.TiltPercent}";" is 131.
Long Statement,PiCamCV.Common.PanTilt.Controllers,CalibratingPanTiltController,C:\research\architectureSmells\repos\neutmute_PiCamCV\source\PiCamCV.Common\PanTilt\Controllers\CalibratingPanTiltController.cs,CalibrateHalfAxis,The length of the statement  "                    var pixelDeviation = Convert.ToInt32(getAxisValue(newDetection.CentralPoint) - getAxisValue(firstDetection.CentralPoint));" is 122.
Long Statement,PiCamCV.Common.PanTilt.Controllers.multimode,AutonomousTrackStateManager,C:\research\architectureSmells\repos\neutmute_PiCamCV\source\PiCamCV.Common\PanTilt\Controllers\multimode\AutonomousTrackStateManager.cs,AcceptInput,The length of the statement  "                _screen.WriteLine($"Starting smooth pursuit {_timeTarget.Original} to {_timeTarget.Target} over {_timeTarget.TimeSpan.ToHumanReadable()}");" is 139.
Magic Number,PiCamCV.Common,CamshiftDetector,C:\research\architectureSmells\repos\neutmute_PiCamCV\source\PiCamCV.Common\CamshiftDetector.cs,CamshiftDetector,The following statement contains a magic number: TermCriteria = new MCvTermCriteria { Epsilon = 100 * double.Epsilon' MaxIter = 10 };
Magic Number,PiCamCV.Common,CamshiftDetector,C:\research\architectureSmells\repos\neutmute_PiCamCV\source\PiCamCV.Common\CamshiftDetector.cs,CamshiftDetector,The following statement contains a magic number: TermCriteria = new MCvTermCriteria { Epsilon = 100 * double.Epsilon' MaxIter = 10 };
Magic Number,PiCamCV.Common,CamshiftDetector,C:\research\architectureSmells\repos\neutmute_PiCamCV\source\PiCamCV.Common\CamshiftDetector.cs,StartNewTrack,The following statement contains a magic number: CvInvoke.Normalize(_histogram' _histogram' 0' 255' NormType.MinMax);
Magic Number,PiCamCV.Common,MotionDetectSettings,C:\research\architectureSmells\repos\neutmute_PiCamCV\source\PiCamCV.Common\MotionDetector.cs,MotionDetectSettings,The following statement contains a magic number: MinimumArea = 100;
Magic Number,PiCamCV.Common,MotionDetectSettings,C:\research\architectureSmells\repos\neutmute_PiCamCV\source\PiCamCV.Common\MotionDetector.cs,MotionDetectSettings,The following statement contains a magic number: MinimumPercentMotionInArea = 0.05m;
Magic Number,PiCamCV.Common,SubtractorConfig,C:\research\architectureSmells\repos\neutmute_PiCamCV\source\PiCamCV.Common\MotionDetector.cs,SubtractorConfig,The following statement contains a magic number: History = 500;
Magic Number,PiCamCV.Common,SubtractorConfig,C:\research\architectureSmells\repos\neutmute_PiCamCV\source\PiCamCV.Common\MotionDetector.cs,SubtractorConfig,The following statement contains a magic number: Threshold = 16f;
Magic Number,PiCamCV.Common,SubtractorConfig,C:\research\architectureSmells\repos\neutmute_PiCamCV\source\PiCamCV.Common\MotionDetector.cs,GetHashCode,The following statement contains a magic number: int hash = 17;
Magic Number,PiCamCV.Common,SubtractorConfig,C:\research\architectureSmells\repos\neutmute_PiCamCV\source\PiCamCV.Common\MotionDetector.cs,GetHashCode,The following statement contains a magic number: hash = hash * 23 + History.GetHashCode();
Magic Number,PiCamCV.Common,SubtractorConfig,C:\research\architectureSmells\repos\neutmute_PiCamCV\source\PiCamCV.Common\MotionDetector.cs,GetHashCode,The following statement contains a magic number: hash = hash * 23 + Threshold.GetHashCode();
Magic Number,PiCamCV.Common,SubtractorConfig,C:\research\architectureSmells\repos\neutmute_PiCamCV\source\PiCamCV.Common\MotionDetector.cs,GetHashCode,The following statement contains a magic number: hash = hash * 23 + ShadowDetection.GetHashCode();
Magic Number,PiCamCV.Common,MotionDetector,C:\research\architectureSmells\repos\neutmute_PiCamCV\source\PiCamCV.Common\MotionDetector.cs,Reset,The following statement contains a magic number: _motionHistory = new MotionHistory(                 1' //in second' the duration of motion history you wants to keep                 0.05' //in second' maxDelta for cvCalcMotionGradient                 0.5);
Magic Number,PiCamCV.Common,MotionDetector,C:\research\architectureSmells\repos\neutmute_PiCamCV\source\PiCamCV.Common\MotionDetector.cs,Reset,The following statement contains a magic number: _motionHistory = new MotionHistory(                 1' //in second' the duration of motion history you wants to keep                 0.05' //in second' maxDelta for cvCalcMotionGradient                 0.5);
Magic Number,PiCamCV.Common,RemoteImageSender,C:\research\architectureSmells\repos\neutmute_PiCamCV\source\PiCamCV.Common\OutputPipeline\RemoteImageSender.cs,RemoteImageSender,The following statement contains a magic number: SendEveryPeriod = TimeSpan.FromMilliseconds(600);
Magic Number,PiCamCV.Common,ClassifierParameters,C:\research\architectureSmells\repos\neutmute_PiCamCV\source\PiCamCV.Common\FaceDetector.cs,ClassifierParameters,The following statement contains a magic number: ScaleFactor = 1.1;
Magic Number,PiCamCV.Common,ClassifierParameters,C:\research\architectureSmells\repos\neutmute_PiCamCV\source\PiCamCV.Common\FaceDetector.cs,ClassifierParameters,The following statement contains a magic number: MinNeighbors = 3;
Magic Number,PiCamCV.Common,ClassifierParameters,C:\research\architectureSmells\repos\neutmute_PiCamCV\source\PiCamCV.Common\FaceDetector.cs,ClassifierParameters,The following statement contains a magic number: MinSize = new Size(20' 20);
Magic Number,PiCamCV.Common,ClassifierParameters,C:\research\architectureSmells\repos\neutmute_PiCamCV\source\PiCamCV.Common\FaceDetector.cs,ClassifierParameters,The following statement contains a magic number: MinSize = new Size(20' 20);
Magic Number,PiCamCV.Common,FaceDetector,C:\research\architectureSmells\repos\neutmute_PiCamCV\source\PiCamCV.Common\FaceDetector.cs,DoProcess,The following statement contains a magic number: input.Captured.NumberOfChannels == 3
Magic Number,PiCamCV.Common,FaceDetector,C:\research\architectureSmells\repos\neutmute_PiCamCV\source\PiCamCV.Common\FaceDetector.cs,DoProcess,The following statement contains a magic number: Rectangle[] eyesDetected = _eyeClassifier.DetectMultiScale(                                 faceRegion'                                 1.1'                                 10'                                 new Size(20' 20));
Magic Number,PiCamCV.Common,FaceDetector,C:\research\architectureSmells\repos\neutmute_PiCamCV\source\PiCamCV.Common\FaceDetector.cs,DoProcess,The following statement contains a magic number: Rectangle[] eyesDetected = _eyeClassifier.DetectMultiScale(                                 faceRegion'                                 1.1'                                 10'                                 new Size(20' 20));
Magic Number,PiCamCV.Common,FaceDetector,C:\research\architectureSmells\repos\neutmute_PiCamCV\source\PiCamCV.Common\FaceDetector.cs,DoProcess,The following statement contains a magic number: Rectangle[] eyesDetected = _eyeClassifier.DetectMultiScale(                                 faceRegion'                                 1.1'                                 10'                                 new Size(20' 20));
Magic Number,PiCamCV.Common,FaceDetector,C:\research\architectureSmells\repos\neutmute_PiCamCV\source\PiCamCV.Common\FaceDetector.cs,DoProcess,The following statement contains a magic number: Rectangle[] eyesDetected = _eyeClassifier.DetectMultiScale(                                 faceRegion'                                 1.1'                                 10'                                 new Size(20' 20));
Magic Number,PiCamCV.Common,FpsTracker,C:\research\architectureSmells\repos\neutmute_PiCamCV\source\PiCamCV.Common\OutputPipeline\FpsTracker.cs,FpsTracker,The following statement contains a magic number: ReportEveryNthFrame = 10;
Magic Number,PiCamCV.Common,PanTiltMechanism,C:\research\architectureSmells\repos\neutmute_PiCamCV\source\PiCamCV.Common\Motors\PanTiltMechanism.cs,PanTiltMechanism,The following statement contains a magic number: PanServo = new ServoMotor(PwmDevice' PwmChannel.C1' 130' 670);
Magic Number,PiCamCV.Common,PanTiltMechanism,C:\research\architectureSmells\repos\neutmute_PiCamCV\source\PiCamCV.Common\Motors\PanTiltMechanism.cs,PanTiltMechanism,The following statement contains a magic number: PanServo = new ServoMotor(PwmDevice' PwmChannel.C1' 130' 670);
Magic Number,PiCamCV.Common,PanTiltMechanism,C:\research\architectureSmells\repos\neutmute_PiCamCV\source\PiCamCV.Common\Motors\PanTiltMechanism.cs,PanTiltMechanism,The following statement contains a magic number: TiltServo = new ServoMotor(PwmDevice' PwmChannel.C0' 130' 670);
Magic Number,PiCamCV.Common,PanTiltMechanism,C:\research\architectureSmells\repos\neutmute_PiCamCV\source\PiCamCV.Common\Motors\PanTiltMechanism.cs,PanTiltMechanism,The following statement contains a magic number: TiltServo = new ServoMotor(PwmDevice' PwmChannel.C0' 130' 670);
Magic Number,PiCamCV.Common,ThresholdSelector,C:\research\architectureSmells\repos\neutmute_PiCamCV\source\PiCamCV.Common\ThresholdSelector.cs,Select,The following statement contains a magic number: const int hueMax = 180;
Magic Number,PiCamCV.Common,ThresholdSelector,C:\research\architectureSmells\repos\neutmute_PiCamCV\source\PiCamCV.Common\ThresholdSelector.cs,Select,The following statement contains a magic number: const int satValueMax = 255;
Magic Number,PiCamCV.Common,ThresholdSelector,C:\research\architectureSmells\repos\neutmute_PiCamCV\source\PiCamCV.Common\ThresholdSelector.cs,Select,The following statement contains a magic number: _settings = ThresholdSettings.Get(0' 0' 0' hueMax' 255' 255);
Magic Number,PiCamCV.Common,ThresholdSelector,C:\research\architectureSmells\repos\neutmute_PiCamCV\source\PiCamCV.Common\ThresholdSelector.cs,Select,The following statement contains a magic number: _settings = ThresholdSettings.Get(0' 0' 0' hueMax' 255' 255);
Magic Number,PiCamCV.Common,ThresholdSelector,C:\research\architectureSmells\repos\neutmute_PiCamCV\source\PiCamCV.Common\ThresholdSelector.cs,GetDimensionResults,The following statement contains a magic number: var requiredArea = _targetRegion.Area() * RequiredMomentAreaInRoiPercent / 100;
Magic Number,PiCamCV.Common.ExtensionMethods,ColorExtensions,C:\research\architectureSmells\repos\neutmute_PiCamCV\source\PiCamCV.Common\ExtensionMethods\ColorExtensions.cs,ToBgra,The following statement contains a magic number: return new Bgra(color.B' color.G' color.R' 255);
Magic Number,PiCamCV.Common.ExtensionMethods,RectangleExtensions,C:\research\architectureSmells\repos\neutmute_PiCamCV\source\PiCamCV.Common\ExtensionMethods\RectangleExtensions.cs,Center,The following statement contains a magic number: var midHeight = rectangle.Height / 2;
Magic Number,PiCamCV.Common.ExtensionMethods,RectangleExtensions,C:\research\architectureSmells\repos\neutmute_PiCamCV\source\PiCamCV.Common\ExtensionMethods\RectangleExtensions.cs,Center,The following statement contains a magic number: var midWidth = rectangle.Width / 2;
Magic Number,PiCamCV.Common.PanTilt.Controllers,MultimodePanTiltController,C:\research\architectureSmells\repos\neutmute_PiCamCV\source\PiCamCV.Common\PanTilt\Controllers\MultimodePanTiltController.cs,MultimodePanTiltController,The following statement contains a magic number: _faceTrackingController.ClassifierParams.MinSize = new Size(20' 20);
Magic Number,PiCamCV.Common.PanTilt.Controllers,MultimodePanTiltController,C:\research\architectureSmells\repos\neutmute_PiCamCV\source\PiCamCV.Common\PanTilt\Controllers\MultimodePanTiltController.cs,MultimodePanTiltController,The following statement contains a magic number: _faceTrackingController.ClassifierParams.MinSize = new Size(20' 20);
Magic Number,PiCamCV.Common.PanTilt.Controllers,MultimodePanTiltController,C:\research\architectureSmells\repos\neutmute_PiCamCV\source\PiCamCV.Common\PanTilt\Controllers\MultimodePanTiltController.cs,MultimodePanTiltController,The following statement contains a magic number: _faceTrackingController.ClassifierParams.MaxSize = new Size(50' 50);
Magic Number,PiCamCV.Common.PanTilt.Controllers,MultimodePanTiltController,C:\research\architectureSmells\repos\neutmute_PiCamCV\source\PiCamCV.Common\PanTilt\Controllers\MultimodePanTiltController.cs,MultimodePanTiltController,The following statement contains a magic number: _faceTrackingController.ClassifierParams.MaxSize = new Size(50' 50);
Magic Number,PiCamCV.Common.PanTilt.Controllers,MultimodePanTiltController,C:\research\architectureSmells\repos\neutmute_PiCamCV\source\PiCamCV.Common\PanTilt\Controllers\MultimodePanTiltController.cs,IsColourFullFrame,The following statement contains a magic number: const int fullFrameMinimumPercent = 70;
Magic Number,PiCamCV.Common.PanTilt.Controllers,MultimodePanTiltController,C:\research\architectureSmells\repos\neutmute_PiCamCV\source\PiCamCV.Common\PanTilt\Controllers\MultimodePanTiltController.cs,IsColourFullFrame,The following statement contains a magic number: var mimimumColourPixelCount = fullFramePixelCount*fullFrameMinimumPercent/100;
Magic Number,PiCamCV.Common.PanTilt.Controllers,MultimodePanTiltController,C:\research\architectureSmells\repos\neutmute_PiCamCV\source\PiCamCV.Common\PanTilt\Controllers\MultimodePanTiltController.cs,thresholdSelector_ColourCheckTick,The following statement contains a magic number: e.DimensionValue % 5 == 0
Magic Number,PiCamCV.Common.PanTilt.Controllers,MultimodePanTiltController,C:\research\architectureSmells\repos\neutmute_PiCamCV\source\PiCamCV.Common\PanTilt\Controllers\MultimodePanTiltController.cs,DoProcess,The following statement contains a magic number: switch (State)             {                 case ProcessingMode.Static:                     var staticHackOutput = new StaticTrackingPanTiltOutput();                     nextState = _staticManager.AcceptOutput(staticHackOutput);                     break;                  case ProcessingMode.ColourTrackFromFileSettings:                     _colourDetectorInput.Settings = _colourSettingsRepository.Read();                     _screen.WriteLine($"Read colour settings {_colourDetectorInput.Settings}");                     nextState = ProcessingMode.ColourObjectTrack;                     break;                  case ProcessingMode.ColourObjectTrack:                     var colourOutput = ProcessColour(input);                     output = colourOutput;                      if (Ticks % (90*3) == 0) // provide some feedback on moment size but don't spam                     {                         _screen.WriteLine("colTrack:" + colourOutput);                     }                      nextState = _colourTrackManager.AcceptOutput(colourOutput);                     break;                  case ProcessingMode.FaceDetection:                     var faceTrackOutput = _faceTrackingController.Process(input);                      nextState =  _faceTrackManager.AcceptOutput(faceTrackOutput);                     output = faceTrackOutput;                     break;                  //case ProcessingMode.CamshiftTrack:                 //    var camshiftOutput = _camshiftTrackingController.Process(input);                  //    if (camshiftOutput.Target == Point.Empty)                 //    {                 //        SetMode(ProcessingMode.Autonomous);                 //    }                  //    output = camshiftOutput;                 //    break;                  case ProcessingMode.ColourObjectSelect:                     _screen.WriteLine($"Threshold training for {_thresholdSelector.RequiredMomentAreaInRoiPercent}% ROI coverage");                     var thresholdSettings = _thresholdSelector.Select(input.Captured' _regionOfInterest);                     _screen.WriteLine($"Threshold tuning complete: {thresholdSettings}");                     _colourDetectorInput.SetCapturedImage = true;                     _colourDetectorInput.Settings.MomentArea = new RangeF(50' 10000);                     _colourDetectorInput.Settings.Accept(thresholdSettings);                     //_isColourTrained = true;                     nextState = ProcessingMode.ColourObjectTrack;                     break;                                  case ProcessingMode.Autonomous:                     nextState = _autonomousManager.AcceptInput(input);                     if (nextState == ProcessingMode.ColourObjectTrack)                     {                                              }                     break;                  case ProcessingMode.CamshiftSelect:                     throw new NotImplementedException();             }
Magic Number,PiCamCV.Common.PanTilt.Controllers,MultimodePanTiltController,C:\research\architectureSmells\repos\neutmute_PiCamCV\source\PiCamCV.Common\PanTilt\Controllers\MultimodePanTiltController.cs,DoProcess,The following statement contains a magic number: switch (State)             {                 case ProcessingMode.Static:                     var staticHackOutput = new StaticTrackingPanTiltOutput();                     nextState = _staticManager.AcceptOutput(staticHackOutput);                     break;                  case ProcessingMode.ColourTrackFromFileSettings:                     _colourDetectorInput.Settings = _colourSettingsRepository.Read();                     _screen.WriteLine($"Read colour settings {_colourDetectorInput.Settings}");                     nextState = ProcessingMode.ColourObjectTrack;                     break;                  case ProcessingMode.ColourObjectTrack:                     var colourOutput = ProcessColour(input);                     output = colourOutput;                      if (Ticks % (90*3) == 0) // provide some feedback on moment size but don't spam                     {                         _screen.WriteLine("colTrack:" + colourOutput);                     }                      nextState = _colourTrackManager.AcceptOutput(colourOutput);                     break;                  case ProcessingMode.FaceDetection:                     var faceTrackOutput = _faceTrackingController.Process(input);                      nextState =  _faceTrackManager.AcceptOutput(faceTrackOutput);                     output = faceTrackOutput;                     break;                  //case ProcessingMode.CamshiftTrack:                 //    var camshiftOutput = _camshiftTrackingController.Process(input);                  //    if (camshiftOutput.Target == Point.Empty)                 //    {                 //        SetMode(ProcessingMode.Autonomous);                 //    }                  //    output = camshiftOutput;                 //    break;                  case ProcessingMode.ColourObjectSelect:                     _screen.WriteLine($"Threshold training for {_thresholdSelector.RequiredMomentAreaInRoiPercent}% ROI coverage");                     var thresholdSettings = _thresholdSelector.Select(input.Captured' _regionOfInterest);                     _screen.WriteLine($"Threshold tuning complete: {thresholdSettings}");                     _colourDetectorInput.SetCapturedImage = true;                     _colourDetectorInput.Settings.MomentArea = new RangeF(50' 10000);                     _colourDetectorInput.Settings.Accept(thresholdSettings);                     //_isColourTrained = true;                     nextState = ProcessingMode.ColourObjectTrack;                     break;                                  case ProcessingMode.Autonomous:                     nextState = _autonomousManager.AcceptInput(input);                     if (nextState == ProcessingMode.ColourObjectTrack)                     {                                              }                     break;                  case ProcessingMode.CamshiftSelect:                     throw new NotImplementedException();             }
Magic Number,PiCamCV.Common.PanTilt.Controllers,MultimodePanTiltController,C:\research\architectureSmells\repos\neutmute_PiCamCV\source\PiCamCV.Common\PanTilt\Controllers\MultimodePanTiltController.cs,DoProcess,The following statement contains a magic number: switch (State)             {                 case ProcessingMode.Static:                     var staticHackOutput = new StaticTrackingPanTiltOutput();                     nextState = _staticManager.AcceptOutput(staticHackOutput);                     break;                  case ProcessingMode.ColourTrackFromFileSettings:                     _colourDetectorInput.Settings = _colourSettingsRepository.Read();                     _screen.WriteLine($"Read colour settings {_colourDetectorInput.Settings}");                     nextState = ProcessingMode.ColourObjectTrack;                     break;                  case ProcessingMode.ColourObjectTrack:                     var colourOutput = ProcessColour(input);                     output = colourOutput;                      if (Ticks % (90*3) == 0) // provide some feedback on moment size but don't spam                     {                         _screen.WriteLine("colTrack:" + colourOutput);                     }                      nextState = _colourTrackManager.AcceptOutput(colourOutput);                     break;                  case ProcessingMode.FaceDetection:                     var faceTrackOutput = _faceTrackingController.Process(input);                      nextState =  _faceTrackManager.AcceptOutput(faceTrackOutput);                     output = faceTrackOutput;                     break;                  //case ProcessingMode.CamshiftTrack:                 //    var camshiftOutput = _camshiftTrackingController.Process(input);                  //    if (camshiftOutput.Target == Point.Empty)                 //    {                 //        SetMode(ProcessingMode.Autonomous);                 //    }                  //    output = camshiftOutput;                 //    break;                  case ProcessingMode.ColourObjectSelect:                     _screen.WriteLine($"Threshold training for {_thresholdSelector.RequiredMomentAreaInRoiPercent}% ROI coverage");                     var thresholdSettings = _thresholdSelector.Select(input.Captured' _regionOfInterest);                     _screen.WriteLine($"Threshold tuning complete: {thresholdSettings}");                     _colourDetectorInput.SetCapturedImage = true;                     _colourDetectorInput.Settings.MomentArea = new RangeF(50' 10000);                     _colourDetectorInput.Settings.Accept(thresholdSettings);                     //_isColourTrained = true;                     nextState = ProcessingMode.ColourObjectTrack;                     break;                                  case ProcessingMode.Autonomous:                     nextState = _autonomousManager.AcceptInput(input);                     if (nextState == ProcessingMode.ColourObjectTrack)                     {                                              }                     break;                  case ProcessingMode.CamshiftSelect:                     throw new NotImplementedException();             }
Magic Number,PiCamCV.Common.PanTilt.Controllers,MultimodePanTiltController,C:\research\architectureSmells\repos\neutmute_PiCamCV\source\PiCamCV.Common\PanTilt\Controllers\MultimodePanTiltController.cs,DoProcess,The following statement contains a magic number: switch (State)             {                 case ProcessingMode.Static:                     var staticHackOutput = new StaticTrackingPanTiltOutput();                     nextState = _staticManager.AcceptOutput(staticHackOutput);                     break;                  case ProcessingMode.ColourTrackFromFileSettings:                     _colourDetectorInput.Settings = _colourSettingsRepository.Read();                     _screen.WriteLine($"Read colour settings {_colourDetectorInput.Settings}");                     nextState = ProcessingMode.ColourObjectTrack;                     break;                  case ProcessingMode.ColourObjectTrack:                     var colourOutput = ProcessColour(input);                     output = colourOutput;                      if (Ticks % (90*3) == 0) // provide some feedback on moment size but don't spam                     {                         _screen.WriteLine("colTrack:" + colourOutput);                     }                      nextState = _colourTrackManager.AcceptOutput(colourOutput);                     break;                  case ProcessingMode.FaceDetection:                     var faceTrackOutput = _faceTrackingController.Process(input);                      nextState =  _faceTrackManager.AcceptOutput(faceTrackOutput);                     output = faceTrackOutput;                     break;                  //case ProcessingMode.CamshiftTrack:                 //    var camshiftOutput = _camshiftTrackingController.Process(input);                  //    if (camshiftOutput.Target == Point.Empty)                 //    {                 //        SetMode(ProcessingMode.Autonomous);                 //    }                  //    output = camshiftOutput;                 //    break;                  case ProcessingMode.ColourObjectSelect:                     _screen.WriteLine($"Threshold training for {_thresholdSelector.RequiredMomentAreaInRoiPercent}% ROI coverage");                     var thresholdSettings = _thresholdSelector.Select(input.Captured' _regionOfInterest);                     _screen.WriteLine($"Threshold tuning complete: {thresholdSettings}");                     _colourDetectorInput.SetCapturedImage = true;                     _colourDetectorInput.Settings.MomentArea = new RangeF(50' 10000);                     _colourDetectorInput.Settings.Accept(thresholdSettings);                     //_isColourTrained = true;                     nextState = ProcessingMode.ColourObjectTrack;                     break;                                  case ProcessingMode.Autonomous:                     nextState = _autonomousManager.AcceptInput(input);                     if (nextState == ProcessingMode.ColourObjectTrack)                     {                                              }                     break;                  case ProcessingMode.CamshiftSelect:                     throw new NotImplementedException();             }
Magic Number,PiCamCV.Common.PanTilt.Controllers,MultimodePanTiltController,C:\research\architectureSmells\repos\neutmute_PiCamCV\source\PiCamCV.Common\PanTilt\Controllers\MultimodePanTiltController.cs,DoProcess,The following statement contains a magic number: switch (nextState)                 {                     case ProcessingMode.Static:                         _staticManager.Reset();                         break;                     case ProcessingMode.Autonomous:                         if (State == ProcessingMode.FaceDetection) // coming out of face detection                         {                             SoundService.PlayAsync("cant-see-you.wav");                         }                         MoveAbsolute(50' 60);                         _autonomousManager.Reset();     // Reset the timers                         break;                     case ProcessingMode.ColourObjectTrack:                         _colourTrackManager.Reset();                         _screen.WriteLine($"Color detector settings: {_colourDetectorInput.Settings}");                         SoundService.PlayAsync("color-tracking.wav");                         break;                     case ProcessingMode.FaceDetection:                         _faceTrackManager.Reset();                         SoundService.PlayAsync("face-tracking.wav");                         _screen.WriteLine(ClassifierParams.ToString());                         break;                 }
Magic Number,PiCamCV.Common.PanTilt.Controllers,MultimodePanTiltController,C:\research\architectureSmells\repos\neutmute_PiCamCV\source\PiCamCV.Common\PanTilt\Controllers\MultimodePanTiltController.cs,DoProcess,The following statement contains a magic number: switch (nextState)                 {                     case ProcessingMode.Static:                         _staticManager.Reset();                         break;                     case ProcessingMode.Autonomous:                         if (State == ProcessingMode.FaceDetection) // coming out of face detection                         {                             SoundService.PlayAsync("cant-see-you.wav");                         }                         MoveAbsolute(50' 60);                         _autonomousManager.Reset();     // Reset the timers                         break;                     case ProcessingMode.ColourObjectTrack:                         _colourTrackManager.Reset();                         _screen.WriteLine($"Color detector settings: {_colourDetectorInput.Settings}");                         SoundService.PlayAsync("color-tracking.wav");                         break;                     case ProcessingMode.FaceDetection:                         _faceTrackManager.Reset();                         SoundService.PlayAsync("face-tracking.wav");                         _screen.WriteLine(ClassifierParams.ToString());                         break;                 }
Magic Number,PiCamCV.Common.PanTilt.Controllers,MultimodePanTiltController,C:\research\architectureSmells\repos\neutmute_PiCamCV\source\PiCamCV.Common\PanTilt\Controllers\MultimodePanTiltController.cs,HandleKeyPress,The following statement contains a magic number: switch (key)             {                 case '7':                     captureConfig.Framerate = 40;                     captureConfig.Resolution = new Resolution(128' 96);                     _serverToCameraBus.InvokeUpdateCapture(captureConfig);                     break;                  case '8':                     captureConfig.Framerate = 60;                     captureConfig.Resolution = new Resolution(160' 120);                     _serverToCameraBus.InvokeUpdateCapture(captureConfig);                     break;                  case 'a':                     ForceMode(ProcessingMode.Autonomous);                     break;                  case 'f':                     ForceMode(ProcessingMode.FaceDetection);                     break;                  case 'c':                     ForceMode(ProcessingMode.ColourTrackFromFileSettings);                     break;                  case 'q':                     _screen.WriteLine($"P/T={CurrentSetting}'M={State}");                     break;                  case 'r':                     var command = new PanTiltSettingCommand();                     command.Type= PanTiltSettingCommandType.MoveAbsolute;                     command.PanPercent = 50;                     command.TiltPercent = 50;                     HandleCommand(this' command);                     break;                 default:                     handled = false;                     break;             }
Magic Number,PiCamCV.Common.PanTilt.Controllers,MultimodePanTiltController,C:\research\architectureSmells\repos\neutmute_PiCamCV\source\PiCamCV.Common\PanTilt\Controllers\MultimodePanTiltController.cs,HandleKeyPress,The following statement contains a magic number: switch (key)             {                 case '7':                     captureConfig.Framerate = 40;                     captureConfig.Resolution = new Resolution(128' 96);                     _serverToCameraBus.InvokeUpdateCapture(captureConfig);                     break;                  case '8':                     captureConfig.Framerate = 60;                     captureConfig.Resolution = new Resolution(160' 120);                     _serverToCameraBus.InvokeUpdateCapture(captureConfig);                     break;                  case 'a':                     ForceMode(ProcessingMode.Autonomous);                     break;                  case 'f':                     ForceMode(ProcessingMode.FaceDetection);                     break;                  case 'c':                     ForceMode(ProcessingMode.ColourTrackFromFileSettings);                     break;                  case 'q':                     _screen.WriteLine($"P/T={CurrentSetting}'M={State}");                     break;                  case 'r':                     var command = new PanTiltSettingCommand();                     command.Type= PanTiltSettingCommandType.MoveAbsolute;                     command.PanPercent = 50;                     command.TiltPercent = 50;                     HandleCommand(this' command);                     break;                 default:                     handled = false;                     break;             }
Magic Number,PiCamCV.Common.PanTilt.Controllers,MultimodePanTiltController,C:\research\architectureSmells\repos\neutmute_PiCamCV\source\PiCamCV.Common\PanTilt\Controllers\MultimodePanTiltController.cs,HandleKeyPress,The following statement contains a magic number: switch (key)             {                 case '7':                     captureConfig.Framerate = 40;                     captureConfig.Resolution = new Resolution(128' 96);                     _serverToCameraBus.InvokeUpdateCapture(captureConfig);                     break;                  case '8':                     captureConfig.Framerate = 60;                     captureConfig.Resolution = new Resolution(160' 120);                     _serverToCameraBus.InvokeUpdateCapture(captureConfig);                     break;                  case 'a':                     ForceMode(ProcessingMode.Autonomous);                     break;                  case 'f':                     ForceMode(ProcessingMode.FaceDetection);                     break;                  case 'c':                     ForceMode(ProcessingMode.ColourTrackFromFileSettings);                     break;                  case 'q':                     _screen.WriteLine($"P/T={CurrentSetting}'M={State}");                     break;                  case 'r':                     var command = new PanTiltSettingCommand();                     command.Type= PanTiltSettingCommandType.MoveAbsolute;                     command.PanPercent = 50;                     command.TiltPercent = 50;                     HandleCommand(this' command);                     break;                 default:                     handled = false;                     break;             }
Magic Number,PiCamCV.Common.PanTilt.Controllers,MultimodePanTiltController,C:\research\architectureSmells\repos\neutmute_PiCamCV\source\PiCamCV.Common\PanTilt\Controllers\MultimodePanTiltController.cs,HandleKeyPress,The following statement contains a magic number: switch (key)             {                 case '7':                     captureConfig.Framerate = 40;                     captureConfig.Resolution = new Resolution(128' 96);                     _serverToCameraBus.InvokeUpdateCapture(captureConfig);                     break;                  case '8':                     captureConfig.Framerate = 60;                     captureConfig.Resolution = new Resolution(160' 120);                     _serverToCameraBus.InvokeUpdateCapture(captureConfig);                     break;                  case 'a':                     ForceMode(ProcessingMode.Autonomous);                     break;                  case 'f':                     ForceMode(ProcessingMode.FaceDetection);                     break;                  case 'c':                     ForceMode(ProcessingMode.ColourTrackFromFileSettings);                     break;                  case 'q':                     _screen.WriteLine($"P/T={CurrentSetting}'M={State}");                     break;                  case 'r':                     var command = new PanTiltSettingCommand();                     command.Type= PanTiltSettingCommandType.MoveAbsolute;                     command.PanPercent = 50;                     command.TiltPercent = 50;                     HandleCommand(this' command);                     break;                 default:                     handled = false;                     break;             }
Magic Number,PiCamCV.Common.PanTilt.Controllers,MultimodePanTiltController,C:\research\architectureSmells\repos\neutmute_PiCamCV\source\PiCamCV.Common\PanTilt\Controllers\MultimodePanTiltController.cs,HandleKeyPress,The following statement contains a magic number: switch (key)             {                 case '7':                     captureConfig.Framerate = 40;                     captureConfig.Resolution = new Resolution(128' 96);                     _serverToCameraBus.InvokeUpdateCapture(captureConfig);                     break;                  case '8':                     captureConfig.Framerate = 60;                     captureConfig.Resolution = new Resolution(160' 120);                     _serverToCameraBus.InvokeUpdateCapture(captureConfig);                     break;                  case 'a':                     ForceMode(ProcessingMode.Autonomous);                     break;                  case 'f':                     ForceMode(ProcessingMode.FaceDetection);                     break;                  case 'c':                     ForceMode(ProcessingMode.ColourTrackFromFileSettings);                     break;                  case 'q':                     _screen.WriteLine($"P/T={CurrentSetting}'M={State}");                     break;                  case 'r':                     var command = new PanTiltSettingCommand();                     command.Type= PanTiltSettingCommandType.MoveAbsolute;                     command.PanPercent = 50;                     command.TiltPercent = 50;                     HandleCommand(this' command);                     break;                 default:                     handled = false;                     break;             }
Magic Number,PiCamCV.Common.PanTilt.Controllers,MultimodePanTiltController,C:\research\architectureSmells\repos\neutmute_PiCamCV\source\PiCamCV.Common\PanTilt\Controllers\MultimodePanTiltController.cs,HandleKeyPress,The following statement contains a magic number: switch (key)             {                 case '7':                     captureConfig.Framerate = 40;                     captureConfig.Resolution = new Resolution(128' 96);                     _serverToCameraBus.InvokeUpdateCapture(captureConfig);                     break;                  case '8':                     captureConfig.Framerate = 60;                     captureConfig.Resolution = new Resolution(160' 120);                     _serverToCameraBus.InvokeUpdateCapture(captureConfig);                     break;                  case 'a':                     ForceMode(ProcessingMode.Autonomous);                     break;                  case 'f':                     ForceMode(ProcessingMode.FaceDetection);                     break;                  case 'c':                     ForceMode(ProcessingMode.ColourTrackFromFileSettings);                     break;                  case 'q':                     _screen.WriteLine($"P/T={CurrentSetting}'M={State}");                     break;                  case 'r':                     var command = new PanTiltSettingCommand();                     command.Type= PanTiltSettingCommandType.MoveAbsolute;                     command.PanPercent = 50;                     command.TiltPercent = 50;                     HandleCommand(this' command);                     break;                 default:                     handled = false;                     break;             }
Magic Number,PiCamCV.Common.PanTilt.Controllers,MultimodePanTiltController,C:\research\architectureSmells\repos\neutmute_PiCamCV\source\PiCamCV.Common\PanTilt\Controllers\MultimodePanTiltController.cs,HandleKeyPress,The following statement contains a magic number: switch (key)             {                 case '7':                     captureConfig.Framerate = 40;                     captureConfig.Resolution = new Resolution(128' 96);                     _serverToCameraBus.InvokeUpdateCapture(captureConfig);                     break;                  case '8':                     captureConfig.Framerate = 60;                     captureConfig.Resolution = new Resolution(160' 120);                     _serverToCameraBus.InvokeUpdateCapture(captureConfig);                     break;                  case 'a':                     ForceMode(ProcessingMode.Autonomous);                     break;                  case 'f':                     ForceMode(ProcessingMode.FaceDetection);                     break;                  case 'c':                     ForceMode(ProcessingMode.ColourTrackFromFileSettings);                     break;                  case 'q':                     _screen.WriteLine($"P/T={CurrentSetting}'M={State}");                     break;                  case 'r':                     var command = new PanTiltSettingCommand();                     command.Type= PanTiltSettingCommandType.MoveAbsolute;                     command.PanPercent = 50;                     command.TiltPercent = 50;                     HandleCommand(this' command);                     break;                 default:                     handled = false;                     break;             }
Magic Number,PiCamCV.Common.PanTilt.Controllers,MultimodePanTiltController,C:\research\architectureSmells\repos\neutmute_PiCamCV\source\PiCamCV.Common\PanTilt\Controllers\MultimodePanTiltController.cs,HandleKeyPress,The following statement contains a magic number: switch (key)             {                 case '7':                     captureConfig.Framerate = 40;                     captureConfig.Resolution = new Resolution(128' 96);                     _serverToCameraBus.InvokeUpdateCapture(captureConfig);                     break;                  case '8':                     captureConfig.Framerate = 60;                     captureConfig.Resolution = new Resolution(160' 120);                     _serverToCameraBus.InvokeUpdateCapture(captureConfig);                     break;                  case 'a':                     ForceMode(ProcessingMode.Autonomous);                     break;                  case 'f':                     ForceMode(ProcessingMode.FaceDetection);                     break;                  case 'c':                     ForceMode(ProcessingMode.ColourTrackFromFileSettings);                     break;                  case 'q':                     _screen.WriteLine($"P/T={CurrentSetting}'M={State}");                     break;                  case 'r':                     var command = new PanTiltSettingCommand();                     command.Type= PanTiltSettingCommandType.MoveAbsolute;                     command.PanPercent = 50;                     command.TiltPercent = 50;                     HandleCommand(this' command);                     break;                 default:                     handled = false;                     break;             }
Magic Number,PiCamCV.Common.PanTilt.Controllers,MotionTrackingPanTiltController,C:\research\architectureSmells\repos\neutmute_PiCamCV\source\PiCamCV.Common\PanTilt\Controllers\MotionTrackingPanTiltController.cs,MotionTrackingPanTiltController,The following statement contains a magic number: ServoSettleTime = TimeSpan.FromMilliseconds(200);
Magic Number,PiCamCV.Common.PanTilt.Controllers,MotionTrackingPanTiltController,C:\research\architectureSmells\repos\neutmute_PiCamCV\source\PiCamCV.Common\PanTilt\Controllers\MotionTrackingPanTiltController.cs,MotionTrackingPanTiltController,The following statement contains a magic number: _timerUntilMotionSettled = new Timer(200);
Magic Number,PiCamCV.Common.PanTilt.Controllers,CalibratingPanTiltController,C:\research\architectureSmells\repos\neutmute_PiCamCV\source\PiCamCV.Common\PanTilt\Controllers\CalibratingPanTiltController.cs,CalibratingPanTiltController,The following statement contains a magic number: _servoSettleTime = TimeSpan.FromMilliseconds(750);
Magic Number,PiCamCV.Common.PanTilt.Controllers,CalibratingPanTiltController,C:\research\architectureSmells\repos\neutmute_PiCamCV\source\PiCamCV.Common\PanTilt\Controllers\CalibratingPanTiltController.cs,ResetToCenter,The following statement contains a magic number: MoveAbsolute(new PanTiltSetting(50m' 50m));
Magic Number,PiCamCV.Common.PanTilt.Controllers,CalibratingPanTiltController,C:\research\architectureSmells\repos\neutmute_PiCamCV\source\PiCamCV.Common\PanTilt\Controllers\CalibratingPanTiltController.cs,ResetToCenter,The following statement contains a magic number: MoveAbsolute(new PanTiltSetting(50m' 50m));
Magic Number,PiCamCV.Common.PanTilt.Controllers,CalibratingPanTiltController,C:\research\architectureSmells\repos\neutmute_PiCamCV\source\PiCamCV.Common\PanTilt\Controllers\CalibratingPanTiltController.cs,LocateColour,The following statement contains a magic number: const int captureBufferBurn = 2;
Magic Number,PiCamCV.Common.PanTilt.Controllers.multimode,AutonomousTrackStateManager,C:\research\architectureSmells\repos\neutmute_PiCamCV\source\PiCamCV.Common\PanTilt\Controllers\multimode\AutonomousTrackStateManager.cs,AutonomousTrackStateManager,The following statement contains a magic number: PursuitBoundaryLower = new PanTiltSetting(40' 50);
Magic Number,PiCamCV.Common.PanTilt.Controllers.multimode,AutonomousTrackStateManager,C:\research\architectureSmells\repos\neutmute_PiCamCV\source\PiCamCV.Common\PanTilt\Controllers\multimode\AutonomousTrackStateManager.cs,AutonomousTrackStateManager,The following statement contains a magic number: PursuitBoundaryLower = new PanTiltSetting(40' 50);
Magic Number,PiCamCV.Common.PanTilt.Controllers.multimode,AutonomousTrackStateManager,C:\research\architectureSmells\repos\neutmute_PiCamCV\source\PiCamCV.Common\PanTilt\Controllers\multimode\AutonomousTrackStateManager.cs,AutonomousTrackStateManager,The following statement contains a magic number: PursuitBoundaryUpper = new PanTiltSetting(60' 60);
Magic Number,PiCamCV.Common.PanTilt.Controllers.multimode,AutonomousTrackStateManager,C:\research\architectureSmells\repos\neutmute_PiCamCV\source\PiCamCV.Common\PanTilt\Controllers\multimode\AutonomousTrackStateManager.cs,AutonomousTrackStateManager,The following statement contains a magic number: PursuitBoundaryUpper = new PanTiltSetting(60' 60);
Magic Number,PiCamCV.Common.PanTilt.Controllers.multimode,AutonomousTrackStateManager,C:\research\architectureSmells\repos\neutmute_PiCamCV\source\PiCamCV.Common\PanTilt\Controllers\multimode\AutonomousTrackStateManager.cs,DecideNextSmoothPursuit,The following statement contains a magic number: _nextSmoothPursuit = TimeSpan.FromSeconds(_random.Next(60' 3 * 60));
Magic Number,PiCamCV.Common.PanTilt.Controllers.multimode,AutonomousTrackStateManager,C:\research\architectureSmells\repos\neutmute_PiCamCV\source\PiCamCV.Common\PanTilt\Controllers\multimode\AutonomousTrackStateManager.cs,DecideNextSmoothPursuit,The following statement contains a magic number: _nextSmoothPursuit = TimeSpan.FromSeconds(_random.Next(60' 3 * 60));
Magic Number,PiCamCV.Common.PanTilt.Controllers.multimode,AutonomousTrackStateManager,C:\research\architectureSmells\repos\neutmute_PiCamCV\source\PiCamCV.Common\PanTilt\Controllers\multimode\AutonomousTrackStateManager.cs,DecideNextSmoothPursuit,The following statement contains a magic number: _nextSmoothPursuit = TimeSpan.FromSeconds(_random.Next(60' 3 * 60));
Magic Number,PiCamCV.Common.PanTilt.Controllers.multimode,AutonomousTrackStateManager,C:\research\architectureSmells\repos\neutmute_PiCamCV\source\PiCamCV.Common\PanTilt\Controllers\multimode\AutonomousTrackStateManager.cs,DecideNextSmoothPursuit,The following statement contains a magic number: var nextSmoothPursuitSpeedMilliseconds = _random.Next(250' 3000);
Magic Number,PiCamCV.Common.PanTilt.Controllers.multimode,AutonomousTrackStateManager,C:\research\architectureSmells\repos\neutmute_PiCamCV\source\PiCamCV.Common\PanTilt\Controllers\multimode\AutonomousTrackStateManager.cs,DecideNextSmoothPursuit,The following statement contains a magic number: var nextSmoothPursuitSpeedMilliseconds = _random.Next(250' 3000);
Magic Number,PiCamCV.Common.PanTilt.Controllers.multimode,AutonomousTrackStateManager,C:\research\architectureSmells\repos\neutmute_PiCamCV\source\PiCamCV.Common\PanTilt\Controllers\multimode\AutonomousTrackStateManager.cs,AcceptInput,The following statement contains a magic number: _timeTarget.Ticks % 25 == 0
Magic Number,PiCamCV.ConsoleApp.Runners.PanTilt,CameraBasedPanTiltController<TOutput>,C:\research\architectureSmells\repos\neutmute_PiCamCV\source\PiCamCV.Common\PanTilt\Controllers\CameraBasedPanTiltController.cs,CameraBasedPanTiltController,The following statement contains a magic number: MoveAbsolute(new PanTiltSetting(50' 50));
Magic Number,PiCamCV.ConsoleApp.Runners.PanTilt,CameraBasedPanTiltController<TOutput>,C:\research\architectureSmells\repos\neutmute_PiCamCV\source\PiCamCV.Common\PanTilt\Controllers\CameraBasedPanTiltController.cs,CameraBasedPanTiltController,The following statement contains a magic number: MoveAbsolute(new PanTiltSetting(50' 50));
Magic Number,PiCamCV.ConsoleApp.Runners.PanTilt,CameraBasedPanTiltController<TOutput>,C:\research\architectureSmells\repos\neutmute_PiCamCV\source\PiCamCV.Common\PanTilt\Controllers\CameraBasedPanTiltController.cs,CameraBasedPanTiltController,The following statement contains a magic number: const int defaultServoSettleTimeMilliseconds = 100;
Magic Number,PiCamCV.ConsoleApp.Runners.PanTilt,FaceTrackingPanTiltController,C:\research\architectureSmells\repos\neutmute_PiCamCV\source\PiCamCV.Common\PanTilt\Controllers\FaceTrackingPanTiltController.cs,FaceTrackingPanTiltController,The following statement contains a magic number: _classifierParams.MaxSize = new Size(40' 40);
Magic Number,PiCamCV.ConsoleApp.Runners.PanTilt,FaceTrackingPanTiltController,C:\research\architectureSmells\repos\neutmute_PiCamCV\source\PiCamCV.Common\PanTilt\Controllers\FaceTrackingPanTiltController.cs,FaceTrackingPanTiltController,The following statement contains a magic number: _classifierParams.MaxSize = new Size(40' 40);
Magic Number,PiCamCV.ConsoleApp.Runners.PanTilt,JoystickPanTiltController,C:\research\architectureSmells\repos\neutmute_PiCamCV\source\PiCamCV.Common\PanTilt\Controllers\JoystickPanTiltController.cs,JoystickPanTiltController,The following statement contains a magic number: MoveAbsolute(new PanTiltSetting {PanPercent = 50' TiltPercent = 50});
Magic Number,PiCamCV.ConsoleApp.Runners.PanTilt,JoystickPanTiltController,C:\research\architectureSmells\repos\neutmute_PiCamCV\source\PiCamCV.Common\PanTilt\Controllers\JoystickPanTiltController.cs,JoystickPanTiltController,The following statement contains a magic number: MoveAbsolute(new PanTiltSetting {PanPercent = 50' TiltPercent = 50});
Magic Number,PiCamCV.ConsoleApp.Runners.PanTilt,JoystickPanTiltController,C:\research\architectureSmells\repos\neutmute_PiCamCV\source\PiCamCV.Common\PanTilt\Controllers\JoystickPanTiltController.cs,Tick,The following statement contains a magic number: i < 4
Magic Number,PiCamCV.ConsoleApp.Runners.PanTilt,JoystickPanTiltController,C:\research\architectureSmells\repos\neutmute_PiCamCV\source\PiCamCV.Common\PanTilt\Controllers\JoystickPanTiltController.cs,Tick,The following statement contains a magic number: var tiltAxis = (ReadAxis(JoystickAxis.Axis1) -0.5m) * 2;
Magic Number,PiCamCV.ConsoleApp.Runners.PanTilt,JoystickPanTiltController,C:\research\architectureSmells\repos\neutmute_PiCamCV\source\PiCamCV.Common\PanTilt\Controllers\JoystickPanTiltController.cs,Tick,The following statement contains a magic number: var tiltAxis = (ReadAxis(JoystickAxis.Axis1) -0.5m) * 2;
Magic Number,PiCamCV.ConsoleApp.Runners.PanTilt.MoveStrategies,HandCalibratedModifierStrategy,C:\research\architectureSmells\repos\neutmute_PiCamCV\source\PiCamCV.Common\PanTilt\MoveStrategies\HandCalibratedModifierStrategy.cs,HandCalibratedModifierStrategy,The following statement contains a magic number: decimal xDiffScale = captureConfig.Resolution.Width / 320m;
Magic Number,PiCamCV.ConsoleApp.Runners.PanTilt.MoveStrategies,HandCalibratedModifierStrategy,C:\research\architectureSmells\repos\neutmute_PiCamCV\source\PiCamCV.Common\PanTilt\MoveStrategies\HandCalibratedModifierStrategy.cs,HandCalibratedModifierStrategy,The following statement contains a magic number: decimal yDiffScale = captureConfig.Resolution.Height / 240m;
Magic Number,PiCamCV.ConsoleApp.Runners.PanTilt.MoveStrategies,JoystickModifierStrategy,C:\research\architectureSmells\repos\neutmute_PiCamCV\source\PiCamCV.Common\PanTilt\MoveStrategies\JoystickModifierStrategy.cs,CalculateNewSetting,The following statement contains a magic number: ThrottleMultipler = (4 * (-_throttleAxis + 1.1m));
Magic Number,PiCamCV.ConsoleApp.Runners.PanTilt.MoveStrategies,JoystickModifierStrategy,C:\research\architectureSmells\repos\neutmute_PiCamCV\source\PiCamCV.Common\PanTilt\MoveStrategies\JoystickModifierStrategy.cs,CalculateNewSetting,The following statement contains a magic number: ThrottleMultipler = (4 * (-_throttleAxis + 1.1m));
Magic Number,PiCamCV.ConsoleApp.Runners.PanTilt.MoveStrategies,JoystickModifierStrategy,C:\research\architectureSmells\repos\neutmute_PiCamCV\source\PiCamCV.Common\PanTilt\MoveStrategies\JoystickModifierStrategy.cs,CalculateNewSetting,The following statement contains a magic number: const decimal deadZone = 0.6m;
Magic Number,PiCamCV.Common.PanTilt.MoveStrategies,LinearRegressorFactory,C:\research\architectureSmells\repos\neutmute_PiCamCV\source\PiCamCV.Common\PanTilt\MoveStrategies\LinearRegressor.cs,GetAutoCalibrated,The following statement contains a magic number: switch (resolution.Width)             {                 case 64:                     return new LinearRegressorPair(0.4706m' 0.1m' 0.4442m' -0.2278m);                 case 128:                     return new LinearRegressorPair(0.2423m' 0.0749m' 0.225m' 0.008m);                 case 160:                     return new LinearRegressorPair(0.189m' 0.056m' 0.1784m' 0.0465m);                 case 320:                     return new LinearRegressorPair(0.0971m' 0.0093m' 0.0895m' 0.0205m);                  default:                     return null;             }
Magic Number,PiCamCV.Common.PanTilt.MoveStrategies,LinearRegressorFactory,C:\research\architectureSmells\repos\neutmute_PiCamCV\source\PiCamCV.Common\PanTilt\MoveStrategies\LinearRegressor.cs,GetAutoCalibrated,The following statement contains a magic number: switch (resolution.Width)             {                 case 64:                     return new LinearRegressorPair(0.4706m' 0.1m' 0.4442m' -0.2278m);                 case 128:                     return new LinearRegressorPair(0.2423m' 0.0749m' 0.225m' 0.008m);                 case 160:                     return new LinearRegressorPair(0.189m' 0.056m' 0.1784m' 0.0465m);                 case 320:                     return new LinearRegressorPair(0.0971m' 0.0093m' 0.0895m' 0.0205m);                  default:                     return null;             }
Magic Number,PiCamCV.Common.PanTilt.MoveStrategies,LinearRegressorFactory,C:\research\architectureSmells\repos\neutmute_PiCamCV\source\PiCamCV.Common\PanTilt\MoveStrategies\LinearRegressor.cs,GetAutoCalibrated,The following statement contains a magic number: switch (resolution.Width)             {                 case 64:                     return new LinearRegressorPair(0.4706m' 0.1m' 0.4442m' -0.2278m);                 case 128:                     return new LinearRegressorPair(0.2423m' 0.0749m' 0.225m' 0.008m);                 case 160:                     return new LinearRegressorPair(0.189m' 0.056m' 0.1784m' 0.0465m);                 case 320:                     return new LinearRegressorPair(0.0971m' 0.0093m' 0.0895m' 0.0205m);                  default:                     return null;             }
Magic Number,PiCamCV.Common.PanTilt.MoveStrategies,LinearRegressorFactory,C:\research\architectureSmells\repos\neutmute_PiCamCV\source\PiCamCV.Common\PanTilt\MoveStrategies\LinearRegressor.cs,GetAutoCalibrated,The following statement contains a magic number: switch (resolution.Width)             {                 case 64:                     return new LinearRegressorPair(0.4706m' 0.1m' 0.4442m' -0.2278m);                 case 128:                     return new LinearRegressorPair(0.2423m' 0.0749m' 0.225m' 0.008m);                 case 160:                     return new LinearRegressorPair(0.189m' 0.056m' 0.1784m' 0.0465m);                 case 320:                     return new LinearRegressorPair(0.0971m' 0.0093m' 0.0895m' 0.0205m);                  default:                     return null;             }
Magic Number,PiCamCV.Common.PanTilt.MoveStrategies,LinearRegressorFactory,C:\research\architectureSmells\repos\neutmute_PiCamCV\source\PiCamCV.Common\PanTilt\MoveStrategies\LinearRegressor.cs,GetAutoCalibrated,The following statement contains a magic number: switch (resolution.Width)             {                 case 64:                     return new LinearRegressorPair(0.4706m' 0.1m' 0.4442m' -0.2278m);                 case 128:                     return new LinearRegressorPair(0.2423m' 0.0749m' 0.225m' 0.008m);                 case 160:                     return new LinearRegressorPair(0.189m' 0.056m' 0.1784m' 0.0465m);                 case 320:                     return new LinearRegressorPair(0.0971m' 0.0093m' 0.0895m' 0.0205m);                  default:                     return null;             }
Magic Number,PiCamCV.Common.PanTilt.MoveStrategies,LinearRegressorFactory,C:\research\architectureSmells\repos\neutmute_PiCamCV\source\PiCamCV.Common\PanTilt\MoveStrategies\LinearRegressor.cs,GetAutoCalibrated,The following statement contains a magic number: switch (resolution.Width)             {                 case 64:                     return new LinearRegressorPair(0.4706m' 0.1m' 0.4442m' -0.2278m);                 case 128:                     return new LinearRegressorPair(0.2423m' 0.0749m' 0.225m' 0.008m);                 case 160:                     return new LinearRegressorPair(0.189m' 0.056m' 0.1784m' 0.0465m);                 case 320:                     return new LinearRegressorPair(0.0971m' 0.0093m' 0.0895m' 0.0205m);                  default:                     return null;             }
Magic Number,PiCamCV.Common.PanTilt.MoveStrategies,LinearRegressorFactory,C:\research\architectureSmells\repos\neutmute_PiCamCV\source\PiCamCV.Common\PanTilt\MoveStrategies\LinearRegressor.cs,GetAutoCalibrated,The following statement contains a magic number: switch (resolution.Width)             {                 case 64:                     return new LinearRegressorPair(0.4706m' 0.1m' 0.4442m' -0.2278m);                 case 128:                     return new LinearRegressorPair(0.2423m' 0.0749m' 0.225m' 0.008m);                 case 160:                     return new LinearRegressorPair(0.189m' 0.056m' 0.1784m' 0.0465m);                 case 320:                     return new LinearRegressorPair(0.0971m' 0.0093m' 0.0895m' 0.0205m);                  default:                     return null;             }
Magic Number,PiCamCV.Common.PanTilt.MoveStrategies,LinearRegressorFactory,C:\research\architectureSmells\repos\neutmute_PiCamCV\source\PiCamCV.Common\PanTilt\MoveStrategies\LinearRegressor.cs,GetAutoCalibrated,The following statement contains a magic number: switch (resolution.Width)             {                 case 64:                     return new LinearRegressorPair(0.4706m' 0.1m' 0.4442m' -0.2278m);                 case 128:                     return new LinearRegressorPair(0.2423m' 0.0749m' 0.225m' 0.008m);                 case 160:                     return new LinearRegressorPair(0.189m' 0.056m' 0.1784m' 0.0465m);                 case 320:                     return new LinearRegressorPair(0.0971m' 0.0093m' 0.0895m' 0.0205m);                  default:                     return null;             }
Magic Number,PiCamCV.Common.PanTilt.MoveStrategies,LinearRegressorFactory,C:\research\architectureSmells\repos\neutmute_PiCamCV\source\PiCamCV.Common\PanTilt\MoveStrategies\LinearRegressor.cs,GetAutoCalibrated,The following statement contains a magic number: switch (resolution.Width)             {                 case 64:                     return new LinearRegressorPair(0.4706m' 0.1m' 0.4442m' -0.2278m);                 case 128:                     return new LinearRegressorPair(0.2423m' 0.0749m' 0.225m' 0.008m);                 case 160:                     return new LinearRegressorPair(0.189m' 0.056m' 0.1784m' 0.0465m);                 case 320:                     return new LinearRegressorPair(0.0971m' 0.0093m' 0.0895m' 0.0205m);                  default:                     return null;             }
Magic Number,PiCamCV.Common.PanTilt.MoveStrategies,LinearRegressorFactory,C:\research\architectureSmells\repos\neutmute_PiCamCV\source\PiCamCV.Common\PanTilt\MoveStrategies\LinearRegressor.cs,GetAutoCalibrated,The following statement contains a magic number: switch (resolution.Width)             {                 case 64:                     return new LinearRegressorPair(0.4706m' 0.1m' 0.4442m' -0.2278m);                 case 128:                     return new LinearRegressorPair(0.2423m' 0.0749m' 0.225m' 0.008m);                 case 160:                     return new LinearRegressorPair(0.189m' 0.056m' 0.1784m' 0.0465m);                 case 320:                     return new LinearRegressorPair(0.0971m' 0.0093m' 0.0895m' 0.0205m);                  default:                     return null;             }
Magic Number,PiCamCV.Common.PanTilt.MoveStrategies,LinearRegressorFactory,C:\research\architectureSmells\repos\neutmute_PiCamCV\source\PiCamCV.Common\PanTilt\MoveStrategies\LinearRegressor.cs,GetAutoCalibrated,The following statement contains a magic number: switch (resolution.Width)             {                 case 64:                     return new LinearRegressorPair(0.4706m' 0.1m' 0.4442m' -0.2278m);                 case 128:                     return new LinearRegressorPair(0.2423m' 0.0749m' 0.225m' 0.008m);                 case 160:                     return new LinearRegressorPair(0.189m' 0.056m' 0.1784m' 0.0465m);                 case 320:                     return new LinearRegressorPair(0.0971m' 0.0093m' 0.0895m' 0.0205m);                  default:                     return null;             }
Magic Number,PiCamCV.Common.PanTilt.MoveStrategies,LinearRegressorFactory,C:\research\architectureSmells\repos\neutmute_PiCamCV\source\PiCamCV.Common\PanTilt\MoveStrategies\LinearRegressor.cs,GetAutoCalibrated,The following statement contains a magic number: switch (resolution.Width)             {                 case 64:                     return new LinearRegressorPair(0.4706m' 0.1m' 0.4442m' -0.2278m);                 case 128:                     return new LinearRegressorPair(0.2423m' 0.0749m' 0.225m' 0.008m);                 case 160:                     return new LinearRegressorPair(0.189m' 0.056m' 0.1784m' 0.0465m);                 case 320:                     return new LinearRegressorPair(0.0971m' 0.0093m' 0.0895m' 0.0205m);                  default:                     return null;             }
Magic Number,PiCamCV.Common.PanTilt.MoveStrategies,LinearRegressorFactory,C:\research\architectureSmells\repos\neutmute_PiCamCV\source\PiCamCV.Common\PanTilt\MoveStrategies\LinearRegressor.cs,GetAutoCalibrated,The following statement contains a magic number: switch (resolution.Width)             {                 case 64:                     return new LinearRegressorPair(0.4706m' 0.1m' 0.4442m' -0.2278m);                 case 128:                     return new LinearRegressorPair(0.2423m' 0.0749m' 0.225m' 0.008m);                 case 160:                     return new LinearRegressorPair(0.189m' 0.056m' 0.1784m' 0.0465m);                 case 320:                     return new LinearRegressorPair(0.0971m' 0.0093m' 0.0895m' 0.0205m);                  default:                     return null;             }
Magic Number,PiCamCV.Common.PanTilt.MoveStrategies,LinearRegressorFactory,C:\research\architectureSmells\repos\neutmute_PiCamCV\source\PiCamCV.Common\PanTilt\MoveStrategies\LinearRegressor.cs,GetAutoCalibrated,The following statement contains a magic number: switch (resolution.Width)             {                 case 64:                     return new LinearRegressorPair(0.4706m' 0.1m' 0.4442m' -0.2278m);                 case 128:                     return new LinearRegressorPair(0.2423m' 0.0749m' 0.225m' 0.008m);                 case 160:                     return new LinearRegressorPair(0.189m' 0.056m' 0.1784m' 0.0465m);                 case 320:                     return new LinearRegressorPair(0.0971m' 0.0093m' 0.0895m' 0.0205m);                  default:                     return null;             }
Magic Number,PiCamCV.Common.PanTilt.MoveStrategies,LinearRegressorFactory,C:\research\architectureSmells\repos\neutmute_PiCamCV\source\PiCamCV.Common\PanTilt\MoveStrategies\LinearRegressor.cs,GetAutoCalibrated,The following statement contains a magic number: switch (resolution.Width)             {                 case 64:                     return new LinearRegressorPair(0.4706m' 0.1m' 0.4442m' -0.2278m);                 case 128:                     return new LinearRegressorPair(0.2423m' 0.0749m' 0.225m' 0.008m);                 case 160:                     return new LinearRegressorPair(0.189m' 0.056m' 0.1784m' 0.0465m);                 case 320:                     return new LinearRegressorPair(0.0971m' 0.0093m' 0.0895m' 0.0205m);                  default:                     return null;             }
Magic Number,PiCamCV.Common.PanTilt.MoveStrategies,LinearRegressorFactory,C:\research\architectureSmells\repos\neutmute_PiCamCV\source\PiCamCV.Common\PanTilt\MoveStrategies\LinearRegressor.cs,GetAutoCalibrated,The following statement contains a magic number: switch (resolution.Width)             {                 case 64:                     return new LinearRegressorPair(0.4706m' 0.1m' 0.4442m' -0.2278m);                 case 128:                     return new LinearRegressorPair(0.2423m' 0.0749m' 0.225m' 0.008m);                 case 160:                     return new LinearRegressorPair(0.189m' 0.056m' 0.1784m' 0.0465m);                 case 320:                     return new LinearRegressorPair(0.0971m' 0.0093m' 0.0895m' 0.0205m);                  default:                     return null;             }
Magic Number,PiCamCV.Common.PanTilt.MoveStrategies,LinearRegressorFactory,C:\research\architectureSmells\repos\neutmute_PiCamCV\source\PiCamCV.Common\PanTilt\MoveStrategies\LinearRegressor.cs,GetAutoCalibrated,The following statement contains a magic number: switch (resolution.Width)             {                 case 64:                     return new LinearRegressorPair(0.4706m' 0.1m' 0.4442m' -0.2278m);                 case 128:                     return new LinearRegressorPair(0.2423m' 0.0749m' 0.225m' 0.008m);                 case 160:                     return new LinearRegressorPair(0.189m' 0.056m' 0.1784m' 0.0465m);                 case 320:                     return new LinearRegressorPair(0.0971m' 0.0093m' 0.0895m' 0.0205m);                  default:                     return null;             }
Magic Number,PiCamCV.Common.PanTilt.MoveStrategies,LinearRegressorFactory,C:\research\architectureSmells\repos\neutmute_PiCamCV\source\PiCamCV.Common\PanTilt\MoveStrategies\LinearRegressor.cs,GetAutoCalibrated,The following statement contains a magic number: switch (resolution.Width)             {                 case 64:                     return new LinearRegressorPair(0.4706m' 0.1m' 0.4442m' -0.2278m);                 case 128:                     return new LinearRegressorPair(0.2423m' 0.0749m' 0.225m' 0.008m);                 case 160:                     return new LinearRegressorPair(0.189m' 0.056m' 0.1784m' 0.0465m);                 case 320:                     return new LinearRegressorPair(0.0971m' 0.0093m' 0.0895m' 0.0205m);                  default:                     return null;             }
Magic Number,PiCamCV.Common.PanTilt.MoveStrategies,LinearRegressorFactory,C:\research\architectureSmells\repos\neutmute_PiCamCV\source\PiCamCV.Common\PanTilt\MoveStrategies\LinearRegressor.cs,GetAutoCalibrated,The following statement contains a magic number: switch (resolution.Width)             {                 case 64:                     return new LinearRegressorPair(0.4706m' 0.1m' 0.4442m' -0.2278m);                 case 128:                     return new LinearRegressorPair(0.2423m' 0.0749m' 0.225m' 0.008m);                 case 160:                     return new LinearRegressorPair(0.189m' 0.056m' 0.1784m' 0.0465m);                 case 320:                     return new LinearRegressorPair(0.0971m' 0.0093m' 0.0895m' 0.0205m);                  default:                     return null;             }
Magic Number,PiCamCV.Common.PanTilt.MoveStrategies,LinearRegressorFactory,C:\research\architectureSmells\repos\neutmute_PiCamCV\source\PiCamCV.Common\PanTilt\MoveStrategies\LinearRegressor.cs,GetAutoCalibrated,The following statement contains a magic number: switch (resolution.Width)             {                 case 64:                     return new LinearRegressorPair(0.4706m' 0.1m' 0.4442m' -0.2278m);                 case 128:                     return new LinearRegressorPair(0.2423m' 0.0749m' 0.225m' 0.008m);                 case 160:                     return new LinearRegressorPair(0.189m' 0.056m' 0.1784m' 0.0465m);                 case 320:                     return new LinearRegressorPair(0.0971m' 0.0093m' 0.0895m' 0.0205m);                  default:                     return null;             }
Magic Number,PiCamCV.Common.PanTilt.MoveStrategies,LinearRegressorFactory,C:\research\architectureSmells\repos\neutmute_PiCamCV\source\PiCamCV.Common\PanTilt\MoveStrategies\LinearRegressor.cs,GetHandMeasured320x240,The following statement contains a magic number: return new LinearRegressorPair(0.0933m' 0.0864m' 0.0812m' 0.2091m);
Magic Number,PiCamCV.Common.PanTilt.MoveStrategies,LinearRegressorFactory,C:\research\architectureSmells\repos\neutmute_PiCamCV\source\PiCamCV.Common\PanTilt\MoveStrategies\LinearRegressor.cs,GetHandMeasured320x240,The following statement contains a magic number: return new LinearRegressorPair(0.0933m' 0.0864m' 0.0812m' 0.2091m);
Magic Number,PiCamCV.Common.PanTilt.MoveStrategies,LinearRegressorFactory,C:\research\architectureSmells\repos\neutmute_PiCamCV\source\PiCamCV.Common\PanTilt\MoveStrategies\LinearRegressor.cs,GetHandMeasured320x240,The following statement contains a magic number: return new LinearRegressorPair(0.0933m' 0.0864m' 0.0812m' 0.2091m);
Magic Number,PiCamCV.Common.PanTilt.MoveStrategies,LinearRegressorFactory,C:\research\architectureSmells\repos\neutmute_PiCamCV\source\PiCamCV.Common\PanTilt\MoveStrategies\LinearRegressor.cs,GetHandMeasured320x240,The following statement contains a magic number: return new LinearRegressorPair(0.0933m' 0.0864m' 0.0812m' 0.2091m);
Missing Default,PiCamCV.Common,MotionDetector,C:\research\architectureSmells\repos\neutmute_PiCamCV\source\PiCamCV.Common\MotionDetector.cs,DoProcess,The following switch statement is missing a default case: switch (input.Settings.BiggestMotionType)                 {                     case BiggestMotionType.Unspecified:                         break;                     case BiggestMotionType.Area:                         output.MotionSections.Sort((x' y) => y.Area.CompareTo(x.Area));                         break;                     case BiggestMotionType.Pixels:                         output.MotionSections.Sort((x' y) => y.PixelsInMotionCount.CompareTo(x.PixelsInMotionCount));                         break;                 }
Missing Default,PiCamCV.Common.PanTilt.Controllers,MultimodePanTiltController,C:\research\architectureSmells\repos\neutmute_PiCamCV\source\PiCamCV.Common\PanTilt\Controllers\MultimodePanTiltController.cs,HandleCommand,The following switch statement is missing a default case: switch (command.Type)             {                 case PanTiltSettingCommandType.MoveAbsolute:                     MoveAbsolute(command);                     ForceMode(ProcessingMode.Static);                     _screen.WriteLine($"{command}");                     break;                  case PanTiltSettingCommandType.MoveRelative:                     MoveRelative(command);                     ForceMode(ProcessingMode.Static);                     _screen.WriteLine($"{command}");                     break;                  case PanTiltSettingCommandType.SetRangePursuitLower:                     _autonomousManager.PursuitBoundaryLower = command;                     ReportPursuitBoundaries();                     break;                  case PanTiltSettingCommandType.SetRangePursuitUpper:                     _autonomousManager.PursuitBoundaryUpper = command;                     ReportPursuitBoundaries();                     break;             }
Missing Default,PiCamCV.Common.PanTilt.Controllers,MultimodePanTiltController,C:\research\architectureSmells\repos\neutmute_PiCamCV\source\PiCamCV.Common\PanTilt\Controllers\MultimodePanTiltController.cs,DoProcess,The following switch statement is missing a default case: switch (State)             {                 case ProcessingMode.Static:                     var staticHackOutput = new StaticTrackingPanTiltOutput();                     nextState = _staticManager.AcceptOutput(staticHackOutput);                     break;                  case ProcessingMode.ColourTrackFromFileSettings:                     _colourDetectorInput.Settings = _colourSettingsRepository.Read();                     _screen.WriteLine($"Read colour settings {_colourDetectorInput.Settings}");                     nextState = ProcessingMode.ColourObjectTrack;                     break;                  case ProcessingMode.ColourObjectTrack:                     var colourOutput = ProcessColour(input);                     output = colourOutput;                      if (Ticks % (90*3) == 0) // provide some feedback on moment size but don't spam                     {                         _screen.WriteLine("colTrack:" + colourOutput);                     }                      nextState = _colourTrackManager.AcceptOutput(colourOutput);                     break;                  case ProcessingMode.FaceDetection:                     var faceTrackOutput = _faceTrackingController.Process(input);                      nextState =  _faceTrackManager.AcceptOutput(faceTrackOutput);                     output = faceTrackOutput;                     break;                  //case ProcessingMode.CamshiftTrack:                 //    var camshiftOutput = _camshiftTrackingController.Process(input);                  //    if (camshiftOutput.Target == Point.Empty)                 //    {                 //        SetMode(ProcessingMode.Autonomous);                 //    }                  //    output = camshiftOutput;                 //    break;                  case ProcessingMode.ColourObjectSelect:                     _screen.WriteLine($"Threshold training for {_thresholdSelector.RequiredMomentAreaInRoiPercent}% ROI coverage");                     var thresholdSettings = _thresholdSelector.Select(input.Captured' _regionOfInterest);                     _screen.WriteLine($"Threshold tuning complete: {thresholdSettings}");                     _colourDetectorInput.SetCapturedImage = true;                     _colourDetectorInput.Settings.MomentArea = new RangeF(50' 10000);                     _colourDetectorInput.Settings.Accept(thresholdSettings);                     //_isColourTrained = true;                     nextState = ProcessingMode.ColourObjectTrack;                     break;                                  case ProcessingMode.Autonomous:                     nextState = _autonomousManager.AcceptInput(input);                     if (nextState == ProcessingMode.ColourObjectTrack)                     {                                              }                     break;                  case ProcessingMode.CamshiftSelect:                     throw new NotImplementedException();             }
Missing Default,PiCamCV.Common.PanTilt.Controllers,MultimodePanTiltController,C:\research\architectureSmells\repos\neutmute_PiCamCV\source\PiCamCV.Common\PanTilt\Controllers\MultimodePanTiltController.cs,DoProcess,The following switch statement is missing a default case: switch (nextState)                 {                     case ProcessingMode.Static:                         _staticManager.Reset();                         break;                     case ProcessingMode.Autonomous:                         if (State == ProcessingMode.FaceDetection) // coming out of face detection                         {                             SoundService.PlayAsync("cant-see-you.wav");                         }                         MoveAbsolute(50' 60);                         _autonomousManager.Reset();     // Reset the timers                         break;                     case ProcessingMode.ColourObjectTrack:                         _colourTrackManager.Reset();                         _screen.WriteLine($"Color detector settings: {_colourDetectorInput.Settings}");                         SoundService.PlayAsync("color-tracking.wav");                         break;                     case ProcessingMode.FaceDetection:                         _faceTrackManager.Reset();                         SoundService.PlayAsync("face-tracking.wav");                         _screen.WriteLine(ClassifierParams.ToString());                         break;                 }
