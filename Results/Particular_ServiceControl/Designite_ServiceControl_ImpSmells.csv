Implementation smell,Namespace,Class,File,Method,Description
Long Method,ServiceControl.MessageRedirects.Api,MessageRedirectsModule,C:\repos\Particular_ServiceControl\src\ServiceControl\MessageRedirects\Api\MessageRedirectsModule.cs,MessageRedirectsModule,The method has 137 lines of code.
Complex Method,Particular.ServiceControl.Hosting,Option,C:\repos\Particular_ServiceControl\src\ServiceControl\Hosting\Options.cs,ParsePrototype,Cyclomatic complexity of the method is 9
Complex Method,Particular.ServiceControl.Hosting,OptionSet,C:\repos\Particular_ServiceControl\src\ServiceControl\Hosting\Options.cs,WriteOptionPrototype,Cyclomatic complexity of the method is 8
Complex Method,ServiceBus.Management.Infrastructure.Extensions,NegotiatorExtensions,C:\repos\Particular_ServiceControl\src\ServiceControl\Infrastructure\Extensions\NegotiatorExtensions.cs,WithPagingLinks,Cyclomatic complexity of the method is 12
Complex Method,ServiceBus.Management.Infrastructure.Nancy,NotModifiedStatusExtension,C:\repos\Particular_ServiceControl\src\ServiceControl\Infrastructure\Nancy\NotModifiedStatusExtension.cs,Check,Cyclomatic complexity of the method is 8
Complex Method,ServiceControl.Contracts.Operations,EndpointDetailsParser,C:\repos\Particular_ServiceControl\src\ServiceControl\Operations\EndpointDetailsParser.cs,ReceivingEndpoint,Cyclomatic complexity of the method is 8
Complex Method,ServiceControl.Infrastructure.Extensions,QueryableExtensions,C:\repos\Particular_ServiceControl\src\ServiceControl\Infrastructure\Extensions\QueryableExtensions.cs,FilterByStatusWhere,Cyclomatic complexity of the method is 9
Long Parameter List,ServiceControl,StackTraceParser,C:\repos\Particular_ServiceControl\src\ServiceControl\App_Packages\StackTraceParser\StackTraceParser.cs,Parse,The method has 7 parameters. Parameters: text' tokenSelector' methodSelector' parameterSelector' parametersSelector' sourceLocationSelector' selector
Long Parameter List,ServiceControl.ExternalIntegrations,EventDispatcher,C:\repos\Particular_ServiceControl\src\ServiceControl\ExternalIntegrations\EventDispatcher.cs,EventDispatcher,The method has 5 parameters. Parameters: store' bus' criticalError' settings' eventPublishers
Long Parameter List,Particular.ServiceControl.Hosting,OptionSet,C:\repos\Particular_ServiceControl\src\ServiceControl\Hosting\Options.cs,GetOptionParts,The method has 5 parameters. Parameters: argument' flag' name' sep' value
Long Parameter List,ServiceBus.Management.Infrastructure.Extensions,NegotiatorExtensions,C:\repos\Particular_ServiceControl\src\ServiceControl\Infrastructure\Extensions\NegotiatorExtensions.cs,AddLink,The method has 5 parameters. Parameters: links' page' rel' queryParams' url
Long Parameter List,ServiceBus.Management.Infrastructure.Nancy,StringListBinder,C:\repos\Particular_ServiceControl\src\ServiceControl\Infrastructure\Nancy\StringListBinder.cs,Bind,The method has 5 parameters. Parameters: context' modelType' instance' configuration' blackList
Long Parameter List,ServiceBus.Management.Infrastructure.Nancy,StringListBinder,C:\repos\Particular_ServiceControl\src\ServiceControl\Infrastructure\Nancy\StringListBinder.cs,CreateBindingContext,The method has 6 parameters. Parameters: context' modelType' instance' configuration' blackList' genericType
Long Parameter List,ServiceBus.Management.Infrastructure,NServiceBusFactory,C:\repos\Particular_ServiceControl\src\ServiceControl\Infrastructure\NServiceBusFactory.cs,Create,The method has 5 parameters. Parameters: settings' container' host' documentStore' configuration
Long Parameter List,ServiceBus.Management.Infrastructure,NServiceBusFactory,C:\repos\Particular_ServiceControl\src\ServiceControl\Infrastructure\NServiceBusFactory.cs,CreateAndStart,The method has 5 parameters. Parameters: settings' container' host' documentStore' configuration
Long Parameter List,ServiceControl.Recoverability,ArchiveDocumentManager,C:\repos\Particular_ServiceControl\src\ServiceControl\Recoverability\Archiving\ArchiveDocumentManager.cs,CreateArchiveOperation,The method has 7 parameters. Parameters: session' groupId' archiveType' cutOff' numberOfMessages' groupName' batchSize
Long Parameter List,ServiceControl.Recoverability,RetryingManager,C:\repos\Particular_ServiceControl\src\ServiceControl\Recoverability\Retrying\RetryingManager.cs,Wait,The method has 6 parameters. Parameters: requestId' retryType' started' originator' classifier' last
Long Parameter List,ServiceControl.Recoverability,RetryingManager,C:\repos\Particular_ServiceControl\src\ServiceControl\Recoverability\Retrying\RetryingManager.cs,PreparedAdoptedBatch,The method has 8 parameters. Parameters: requestId' retryType' numberOfMessagesPrepared' totalNumberOfMessages' originator' classifier' startTime' last
Long Parameter List,ServiceControl.Recoverability,ArchiveAllInGroupHandler,C:\repos\Particular_ServiceControl\src\ServiceControl\Recoverability\Archiving\ArchiveAllInGroupHandler.cs,ArchiveAllInGroupHandler,The method has 5 parameters. Parameters: bus' store' documentManager' archiveOperationManager' retryingManager
Long Parameter List,ServiceControl.Recoverability,RetryProgress,C:\repos\Particular_ServiceControl\src\ServiceControl\Recoverability\Retrying\RetryProgress.cs,RetryProgress,The method has 5 parameters. Parameters: percentage' messagesPrepared' messagesForwarded' messagesSkipped' messagesRemaining
Long Parameter List,ServiceControl.Recoverability,OperationProgressCalculator,C:\repos\Particular_ServiceControl\src\ServiceControl\Recoverability\OperationProgressCalculator.cs,CalculateProgress,The method has 5 parameters. Parameters: totalNumberOfMessages' numberOfMessagesPrepared' numberOfMessagesForwarded' numberOfMessagesSkipped' state
Long Parameter List,ServiceControl.Recoverability,InMemoryRetry,C:\repos\Particular_ServiceControl\src\ServiceControl\Recoverability\Retrying\InMemoryRetry.cs,PrepareAdoptedBatch,The method has 5 parameters. Parameters: numberOfMessagesPrepared' originator' classifier' startTime' last
Long Parameter List,ServiceControl.Recoverability,ReturnToSenderDequeuer,C:\repos\Particular_ServiceControl\src\ServiceControl\Recoverability\Retrying\Infrastructure\ReturnToSenderDequeuer.cs,ReturnToSenderDequeuer,The method has 5 parameters. Parameters: bodyStorage' sender' store' bus' configure
Long Parameter List,ServiceControl.Recoverability,RetriesGateway,C:\repos\Particular_ServiceControl\src\ServiceControl\Recoverability\Retrying\RetriesGateway.cs,StartRetryForIndex,The method has 6 parameters. Parameters: requestId' retryType' startTime' filter' originator' classifier
Long Parameter List,ServiceControl.Recoverability,RetriesGateway,C:\repos\Particular_ServiceControl\src\ServiceControl\Recoverability\Retrying\RetriesGateway.cs,StageRetryByUniqueMessageIds,The method has 8 parameters. Parameters: requestId' retryType' messageIds' startTime' last' originator' batchName' classifier
Long Parameter List,ServiceControl.Recoverability,IndexBasedBulkRetryRequest<TType;TIndex>,C:\repos\Particular_ServiceControl\src\ServiceControl\Recoverability\Retrying\RetriesGateway.cs,IndexBasedBulkRetryRequest,The method has 6 parameters. Parameters: requestId' retryType' originator' classifier' startTime' filter
Long Parameter List,ServiceControl.Recoverability,RetryDocumentManager,C:\repos\Particular_ServiceControl\src\ServiceControl\Recoverability\Retrying\RetryDocumentManager.cs,CreateBatchDocument,The method has 8 parameters. Parameters: requestId' retryType' initialBatchSize' originator' startTime' last' batchName' classifier
Long Parameter List,ServiceControl.Operations,AuditQueueImport,C:\repos\Particular_ServiceControl\src\ServiceControl\Operations\AuditQueueImport.cs,AuditQueueImport,The method has 7 parameters. Parameters: builder' forwarder' store' criticalError' loggingSettings' settings' bodyStorageEnricher
Long Parameter List,ServiceControl.Operations,ErrorQueueImport,C:\repos\Particular_ServiceControl\src\ServiceControl\Operations\ErrorQueueImport.cs,ErrorQueueImport,The method has 8 parameters. Parameters: builder' forwarder' store' bus' criticalError' loggingSettings' settings' bodyStorageEnricher
Long Parameter List,ServiceControl.Operations,FailedMessageFactory,C:\repos\Particular_ServiceControl\src\ServiceControl\Operations\FailedMessageFactory.cs,CreateProcessingAttempt,The method has 7 parameters. Parameters: headers' metadata' failureDetails' intent' recoverable' correlationId' replyToAddress
Long Parameter List,ServiceControl.Operations.BodyStorage,BodyStorageEnricher,C:\repos\Particular_ServiceControl\src\ServiceControl\Operations\BodyStorage\BodyStorageFeature.cs,TryStoreBody,The method has 6 parameters. Parameters: body' headers' metadata' bodySize' contentType' isFailedMessage
Long Identifier,Particular.Licensing,FilePathLicenseStore,C:\repos\Particular_ServiceControl\src\ServiceControl\App_Packages\Particular.Licensing\FilePathLicenseStore.cs,,The length of the parameter ApplicationLevelLicenseLocation is 31.
Long Identifier,Particular.Licensing,LicenseSourceResult,C:\repos\Particular_ServiceControl\src\ServiceControl\App_Packages\Particular.Licensing\FindActiveLicense\LicenseSourceResult.cs,DetermineBestLicenseSourceResult,The length of the parameter sourcesResultsWithLicenseOrderedByDate is 38.
Long Identifier,Particular.ServiceControl.DbMigrations,SplitFailedMessageDocumentsMigration,C:\repos\Particular_ServiceControl\src\ServiceControl\DbMigrations\1.27\SplitFailedMessageDocumentsMigration.cs,,The length of the parameter SplitFromUniqueMessageIdHeader is 30.
Long Identifier,ServiceBus.Management.Infrastructure.Settings,Settings,C:\repos\Particular_ServiceControl\src\ServiceControl\Infrastructure\Settings\Settings.cs,,The length of the parameter ExpirationProcessTimerInSecondsDefault is 38.
Long Identifier,ServiceBus.Management.Infrastructure.Settings,Settings,C:\repos\Particular_ServiceControl\src\ServiceControl\Infrastructure\Settings\Settings.cs,,The length of the parameter ExpirationProcessBatchSizeDefault is 33.
Long Identifier,ServiceBus.Management.Infrastructure.Settings,Settings,C:\repos\Particular_ServiceControl\src\ServiceControl\Infrastructure\Settings\Settings.cs,,The length of the parameter ExpirationProcessBatchSizeMinimum is 33.
Long Identifier,ServiceBus.Management.Infrastructure.Settings,Settings,C:\repos\Particular_ServiceControl\src\ServiceControl\Infrastructure\Settings\Settings.cs,,The length of the parameter expirationProcessTimerInSeconds is 31.
Long Identifier,ServiceControl.Recoverability,InMemoryArchive,C:\repos\Particular_ServiceControl\src\ServiceControl\Recoverability\Archiving\InMemoryArchive.cs,BatchArchived,The length of the parameter numberOfMessagesArchivedInBatch is 31.
Long Identifier,ServiceControl.Recoverability,ArchivingManager,C:\repos\Particular_ServiceControl\src\ServiceControl\Recoverability\Archiving\ArchivingManager.cs,BatchArchived,The length of the parameter numberOfMessagesArchivedInBatch is 31.
Long Identifier,ServiceControl.Recoverability,RetryProcessor,C:\repos\Particular_ServiceControl\src\ServiceControl\Recoverability\Retrying\RetryProcessor.cs,,The length of the parameter KeysToRemoveWhenRetryingAMessage is 32.
Long Identifier,ServiceControl.Recoverability,RetryProcessor,C:\repos\Particular_ServiceControl\src\ServiceControl\Recoverability\Retrying\RetryProcessor.cs,,The length of the parameter isRecoveringFromPrematureShutdown is 33.
Long Identifier,ServiceControl.Recoverability,RetryProcessor,C:\repos\Particular_ServiceControl\src\ServiceControl\Recoverability\Retrying\RetryProcessor.cs,,The length of the parameter corruptedReplyToHeaderStrategy is 30.
Long Identifier,ServiceControl.Operations,AuditQueueImport,C:\repos\Particular_ServiceControl\src\ServiceControl\Operations\AuditQueueImport.cs,,The length of the parameter satelliteImportFailuresHandler is 30.
Long Identifier,ServiceControl.Operations,ErrorQueueImport,C:\repos\Particular_ServiceControl\src\ServiceControl\Operations\ErrorQueueImport.cs,,The length of the parameter satelliteImportFailuresHandler is 30.
Long Statement,Particular.Licensing,ActiveLicense,C:\repos\Particular_ServiceControl\src\ServiceControl\App_Packages\Particular.Licensing\FindActiveLicense\ActiveLicense.cs,Find,The length of the statement  "                    var licenseExpirationReportItem = $"License Expiration: {details.ExpirationDate.Value.ToString("yyyy-MM-dd"' CultureInfo.InvariantCulture)}"; " is 141.
Long Statement,Particular.Licensing,ActiveLicense,C:\repos\Particular_ServiceControl\src\ServiceControl\App_Packages\Particular.Licensing\FindActiveLicense\ActiveLicense.cs,Find,The length of the statement  "                        var upgradeProtectionReportItem = $"Upgrade Protection Expiration: {details.UpgradeProtectionExpiration.Value.ToString("yyyy-MM-dd"' CultureInfo.InvariantCulture)}"; " is 165.
Long Statement,Particular.Licensing,ActiveLicense,C:\repos\Particular_ServiceControl\src\ServiceControl\App_Packages\Particular.Licensing\FindActiveLicense\ActiveLicense.cs,Find,The length of the statement  "                var trialLicenseReportItem = $"No valid license could be found. Falling back to trial license with start date '{trialStartDate.ToString("yyyy-MM-dd"' CultureInfo.InvariantCulture)}'."; " is 184.
Long Statement,Particular.Licensing,LicenseSource,C:\repos\Particular_ServiceControl\src\ServiceControl\App_Packages\Particular.Licensing\FindActiveLicense\LicenseSource.cs,ValidateLicense,The length of the statement  "                result.Result = $"License found in {location} was not valid for '{applicationName}'. Valid apps: '{string.Join("'"' license.ValidApplications)}'"; " is 146.
Long Statement,Particular.Licensing,LicenseSourceResult,C:\repos\Particular_ServiceControl\src\ServiceControl\App_Packages\Particular.Licensing\FindActiveLicense\LicenseSourceResult.cs,DetermineBestLicenseSourceResult,The length of the statement  "            var sourcesResultsWithLicenseOrderedByDate = sourceResults.Where(p => p.License != null).OrderByDescending(p => p.License.ExpirationDate).ToList(); " is 147.
Long Statement,Particular.Licensing,LicenseSourceResult,C:\repos\Particular_ServiceControl\src\ServiceControl\App_Packages\Particular.Licensing\FindActiveLicense\LicenseSourceResult.cs,DetermineBestLicenseSourceResult,The length of the statement  "            // Can't rely on just expiry date as running on a build that was produced after the upgrade protection expiration is the same as unlicensed. " is 140.
Long Statement,Particular.Licensing,LicenseSourceResult,C:\repos\Particular_ServiceControl\src\ServiceControl\App_Packages\Particular.Licensing\FindActiveLicense\LicenseSourceResult.cs,DetermineBestLicenseSourceResult,The length of the statement  "            var unexpiredResult = sourcesResultsWithLicenseOrderedByDate.FirstOrDefault(p => !LicenseExpirationChecker.HasLicenseExpired(p.License)); " is 137.
Long Statement,Particular.Licensing,License,C:\repos\Particular_ServiceControl\src\ServiceControl\App_Packages\Particular.Licensing\License.cs,ValidForApplication,The length of the statement  "            return ValidApplications.Contains(applicationName) || ValidApplications.Contains("All") || applicationName == "NServiceBus"; " is 124.
Long Statement,Particular.Licensing,TrialStartDateStore,C:\repos\Particular_ServiceControl\src\ServiceControl\App_Packages\Particular.Licensing\TrialStartDateStore.cs,GetTrialStartDate,The length of the statement  "                var trialStartDate = DateTimeOffset.ParseExact(trialStartString' "yyyy-MM-dd"' CultureInfo.InvariantCulture' DateTimeStyles.AssumeUniversal); " is 141.
Long Statement,Particular.Licensing,UniversalDateParser,C:\repos\Particular_ServiceControl\src\ServiceControl\App_Packages\Particular.Licensing\UniversalDateParser.cs,Parse,The length of the statement  "            return DateTime.ParseExact(value' "yyyy-MM-dd"' CultureInfo.InvariantCulture' DateTimeStyles.AssumeUniversal).ToUniversalTime(); " is 128.
Long Statement,ServiceControl,HeaderExtensions,C:\repos\Particular_ServiceControl\src\ServiceControl\Infrastructure\TransportMessageExtensions.cs,ProcessingEndpointName,The length of the statement  "                throw new Exception($"No processing endpoint could be determined for message ({headers.MessageId()}) with EnclosedMessageTypes ({messageTypes})"); " is 146.
Long Statement,Particular.ServiceControl,LoggingConfigurator,C:\repos\Particular_ServiceControl\src\ServiceControl\LoggingConfigurator.cs,ConfigureLogging,The length of the statement  "            var simpleLayout = new SimpleLayout("${longdate}|${threadid}|${level}|${logger}|${message}${onexception:${newline}${exception:format=tostring}}"); " is 146.
Long Statement,Particular.ServiceControl,LoggingConfigurator,C:\repos\Particular_ServiceControl\src\ServiceControl\LoggingConfigurator.cs,ConfigureLogging,The length of the statement  "            nlogConfig.LoggingRules.Add(new LoggingRule("Raven.*"' LogLevel.Error' consoleTarget)); //Noise reduction - Only RavenDB errors on the console " is 142.
Long Statement,Particular.ServiceControl,LoggingConfigurator,C:\repos\Particular_ServiceControl\src\ServiceControl\LoggingConfigurator.cs,ConfigureLogging,The length of the statement  "            nlogConfig.LoggingRules.Add(new LoggingRule("*"' loggingSettings.LoggingLevel < LogLevel.Info ? loggingSettings.LoggingLevel : LogLevel.Info' consoleTarget)); " is 158.
Long Statement,Particular.ServiceControl.DbMigrations,SplitFailedMessageDocumentsMigration,C:\repos\Particular_ServiceControl\src\ServiceControl\DbMigrations\1.27\SplitFailedMessageDocumentsMigration.cs,Apply,The length of the statement  "            return $"Found {stats.FoundProblem} issue(s) in {stats.Checked} Failed Message document(s). Created {stats.Created} new document(s). Deleted {stats.Deleted} old document(s)."; " is 175.
Long Statement,ServiceControl.ExternalIntegrations,EventDispatcher,C:\repos\Particular_ServiceControl\src\ServiceControl\ExternalIntegrations\EventDispatcher.cs,OnStart,The length of the statement  "            subscription = store.Changes().ForDocumentsStartingWith("ExternalIntegrationDispatchRequests").Where(c => c.Type == DocumentChangeTypes.Put).Subscribe(OnNext); " is 159.
Long Statement,ServiceControl.ExternalIntegrations,EventDispatcher,C:\repos\Particular_ServiceControl\src\ServiceControl\ExternalIntegrations\EventDispatcher.cs,TryDispatchEventBatch,The length of the statement  "                var awaitingDispatching = session.Query<ExternalIntegrationDispatchRequest>().Statistics(out stats).Take(settings.ExternalIntegrationsDispatchingBatchSize).ToArray(); " is 166.
Long Statement,Particular.ServiceControl.Hosting,OptionSet,C:\repos\Particular_ServiceControl\src\ServiceControl\Hosting\Options.cs,ParseValue,The length of the statement  "                throw new OptionException(MessageLocalizer($"Error: Found {c.OptionValues.Count} option values when expecting {c.Option.MaxValueCount}.")' " is 138.
Long Statement,ServiceBus.Management.Infrastructure.Nancy,JsonNetSerializer,C:\repos\Particular_ServiceControl\src\ServiceControl\Infrastructure\Nancy\JsonNetSerializer.cs,Serialize,The length of the statement  "                    // An operation was attempted on a nonexistent network connection' this error happens when the client has dropped the connection so it is safe to ignore " is 152.
Long Statement,ServiceBus.Management.Infrastructure.Nancy,VersionExtension,C:\repos\Particular_ServiceControl\src\ServiceControl\Infrastructure\Nancy\VersionExtension.cs,GetFileVersion,The length of the statement  "            var customAttributes = typeof(VersionExtension).Assembly.GetCustomAttributes(typeof(AssemblyInformationalVersionAttribute)' " is 123.
Long Statement,ServiceBus.Management.Infrastructure.Nancy,StringListBinder,C:\repos\Particular_ServiceControl\src\ServiceControl\Infrastructure\Nancy\StringListBinder.cs,Bind,The length of the statement  "                    genericType = implementingIEnumerableType == null ? null : implementingIEnumerableType.GetGenericArguments().FirstOrDefault(); " is 126.
Long Statement,ServiceControl.Infrastructure.RavenDB.Expiration,EventLogItemsCleaner,C:\repos\Particular_ServiceControl\src\ServiceControl\Infrastructure\RavenDB\Expiration\EventLogItemsCleaner.cs,Clean,The length of the statement  "                logger.InfoFormat("Deleted {0} expired eventlogitem documents. Batch execution took {1}ms"' deletionCount' stopwatch.ElapsedMilliseconds); " is 138.
Long Statement,ServiceControl.Infrastructure.RavenDB.Expiration,ErrorMessageCleaner,C:\repos\Particular_ServiceControl\src\ServiceControl\Infrastructure\RavenDB\Expiration\ErrorMessageCleaner.cs,Clean,The length of the statement  "                logger.InfoFormat("Deleted {0} expired error documents. Batch execution took {1}ms"' deletionCount' stopwatch.ElapsedMilliseconds); " is 131.
Long Statement,ServiceControl.Infrastructure.RavenDB.Expiration,SagaHistoryCleaner,C:\repos\Particular_ServiceControl\src\ServiceControl\Infrastructure\RavenDB\Expiration\SagaHistoryCleaner.cs,Clean,The length of the statement  "                logger.InfoFormat("Deleted {0} expired sagahistory documents. Batch execution took {1}ms"' deletionCount' stopwatch.ElapsedMilliseconds); " is 137.
Long Statement,ServiceControl.Infrastructure.RavenDB.Expiration,AuditMessageCleaner,C:\repos\Particular_ServiceControl\src\ServiceControl\Infrastructure\RavenDB\Expiration\AuditMessageCleaner.cs,Clean,The length of the statement  "                logger.InfoFormat("Deleted {0} expired audit documents. Batch execution took {1}ms"' deletionCount' stopwatch.ElapsedMilliseconds); " is 131.
Long Statement,ServiceControl.Infrastructure.RavenDB.Expiration,ExpiredDocumentsCleaner,C:\repos\Particular_ServiceControl\src\ServiceControl\Infrastructure\RavenDB\Expiration\ExpiredDocumentsCleaner.cs,RunCleanup,The length of the statement  "                logger.Debug("Trying to find expired ProcessedMessage and SagaHistory documents to delete (with threshold {0})"' threshold.ToString(Default.DateTimeFormatsToWrite' CultureInfo.InvariantCulture)); " is 195.
Long Statement,ServiceControl.Infrastructure.RavenDB.Expiration,ExpiredDocumentsCleaner,C:\repos\Particular_ServiceControl\src\ServiceControl\Infrastructure\RavenDB\Expiration\ExpiredDocumentsCleaner.cs,RunCleanup,The length of the statement  "                logger.Debug("Trying to find expired FailedMessage documents to delete (with threshold {0})"' threshold.ToString(Default.DateTimeFormatsToWrite' CultureInfo.InvariantCulture)); " is 176.
Long Statement,ServiceControl.Infrastructure.RavenDB.Expiration,ExpiredDocumentsCleaner,C:\repos\Particular_ServiceControl\src\ServiceControl\Infrastructure\RavenDB\Expiration\ExpiredDocumentsCleaner.cs,RunCleanup,The length of the statement  "                logger.Debug("Trying to find expired EventLogItem documents to delete (with threshold {0})"' threshold.ToString(Default.DateTimeFormatsToWrite' CultureInfo.InvariantCulture)); " is 175.
Long Statement,ServiceBus.Management.Infrastructure.Settings,LoggingSettings,C:\repos\Particular_ServiceControl\src\ServiceControl\Infrastructure\Settings\LoggingSettings.cs,DefaultLogPathForInstance,The length of the statement  "                return Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData)' "Particular\\ServiceControl\\logs"); " is 131.
Long Statement,ServiceBus.Management.Infrastructure.Settings,LoggingSettings,C:\repos\Particular_ServiceControl\src\ServiceControl\Infrastructure\Settings\LoggingSettings.cs,DefaultLogPathForInstance,The length of the statement  "            return Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData)' $"Particular\\{serviceName}\\logs"); " is 131.
Long Statement,ServiceBus.Management.Infrastructure.Settings,Settings,C:\repos\Particular_ServiceControl\src\ServiceControl\Infrastructure\Settings\Settings.cs,GetAuditQueue,The length of the statement  "                logger.Warn("No settings found for audit queue to import' if this is not intentional please set add ServiceBus/AuditQueue to your appSettings"); " is 144.
Long Statement,ServiceBus.Management.Infrastructure.Settings,Settings,C:\repos\Particular_ServiceControl\src\ServiceControl\Infrastructure\Settings\Settings.cs,GetErrorQueue,The length of the statement  "                logger.Warn("No settings found for error queue to import' if this is not intentional please set add ServiceBus/ErrorQueue to your appSettings"); " is 144.
Long Statement,ServiceBus.Management.Infrastructure.Settings,Settings,C:\repos\Particular_ServiceControl\src\ServiceControl\Infrastructure\Settings\Settings.cs,GetDbPath,The length of the statement  "            var defaultPath = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.CommonApplicationData)' "Particular"' "ServiceControl"' dbFolder); " is 149.
Long Statement,Particular.ServiceControl.Licensing,ActiveLicense,C:\repos\Particular_ServiceControl\src\ServiceControl\Licensing\ActiveLicense.cs,Refresh,The length of the statement  "            sources.Add(new LicenseSourceFilePath(Path.Combine(AppDomain.CurrentDomain.BaseDirectory' "ParticularPlatformLicense.xml"))); " is 125.
Long Statement,ServiceControl.CustomChecks,DeleteCustomCheckHandler,C:\repos\Particular_ServiceControl\src\ServiceControl\CustomChecks\DeleteCustomCheckHandler.cs,Handle,The length of the statement  "            Store.DatabaseCommands.Delete(Store.Conventions.DefaultFindFullDocumentKeyFromNonStringIdentifier(message.Id' typeof(CustomCheck)' false)' null); " is 145.
Long Statement,ServiceControl.CustomChecks,ReportCustomCheckResultHandler,C:\repos\Particular_ServiceControl\src\ServiceControl\CustomChecks\ReportCustomCheckResultHandler.cs,Handle,The length of the statement  "                throw new Exception("Received an custom check message without proper initialization of the EndpointName in the schema"); " is 120.
Long Statement,ServiceControl.EventLog,GenericAuditHandler,C:\repos\Particular_ServiceControl\src\ServiceControl\EventLog\GenericAuditHandler.cs,Handle,The length of the statement  "                // At the moment too much data is being populated in this field' and this has significant down sides to the amount of data we are sending down to ServicePulse (it actually crashes it). " is 184.
Long Statement,ServiceBus.Management.Infrastructure,NServiceBusFactory,C:\repos\Particular_ServiceControl\src\ServiceControl\Infrastructure\NServiceBusFactory.cs,DetermineTransportType,The length of the statement  "            var errorMsg = $"Configuration of transport Failed. Could not resolve type '{settings.TransportType}' from Setting 'TransportType'. Ensure the assembly is present and that type is correctly defined in settings"; " is 211.
Long Statement,ServiceControl.Infrastructure.SignalR,GlobalEventHandler,C:\repos\Particular_ServiceControl\src\ServiceControl\Infrastructure\SignalR\GlobalEventHandler.cs,Handle,The length of the statement  "            context.Connection.Broadcast(new Envelope { Types = metadata.MessageHierarchy.Select(t=>t.Name).ToList()' Message = @event }' emptyArray) " is 137.
Long Statement,ServiceControl.MessageFailures,FailedMessageViewIndexNotifications,C:\repos\Particular_ServiceControl\src\ServiceControl\MessageFailures\FailedMessageViewIndexNotifications.cs,UpdatedCount,The length of the statement  "                var failedUnresolvedMessageCount = session.Query<FailedMessage' FailedMessageViewIndex>().Count(p => p.Status == FailedMessageStatus.Unresolved); " is 145.
Long Statement,ServiceControl.MessageFailures,FailedMessageViewIndexNotifications,C:\repos\Particular_ServiceControl\src\ServiceControl\MessageFailures\FailedMessageViewIndexNotifications.cs,UpdatedCount,The length of the statement  "                var failedArchivedMessageCount = session.Query<FailedMessage' FailedMessageViewIndex>().Count(p => p.Status == FailedMessageStatus.Archived); " is 141.
Long Statement,ServiceControl.MessageFailures.Handlers,UnArchiveMessagesByRangeHandler,C:\repos\Particular_ServiceControl\src\ServiceControl\MessageFailures\Handlers\UnArchiveMessagesByRangeHandler.cs,Handle,The length of the statement  "                    Query = string.Format(CultureInfo.InvariantCulture' "LastModified:[{0} TO {1}] AND Status:{2}"' message.From.Ticks' message.To.Ticks' (int) FailedMessageStatus.Archived)' " is 170.
Long Statement,ServiceControl.Monitoring,EndpointInstanceId,C:\repos\Particular_ServiceControl\src\ServiceControl\Monitoring\EndpointInstanceId.cs,Equals,The length of the statement  "            return string.Equals(LogicalName' other.LogicalName) && string.Equals(HostName' other.HostName) && HostGuid.Equals(other.HostGuid); " is 131.
Long Statement,ServiceControl.Monitoring,EndpointInstanceMonitoring,C:\repos\Particular_ServiceControl\src\ServiceControl\Monitoring\EndpointInstanceMonitoring.cs,GetOrCreateMonitor,The length of the statement  "            return endpoints.GetOrAdd(endpointInstanceId.UniqueId' id => new EndpointInstanceMonitor(endpointInstanceId' monitorIfNew)); " is 124.
Long Statement,ServiceControl.Monitoring,MonitoringDataPersister,C:\repos\Particular_ServiceControl\src\ServiceControl\Monitoring\MonitoringDataPersister.cs,WarmupMonitoringFromPersistence,The length of the statement  "                        var endpointInstanceId = new EndpointInstanceId(endpoint.EndpointDetails.Name' endpoint.EndpointDetails.Host' endpoint.EndpointDetails.HostId); " is 143.
Long Statement,ServiceControl.Recoverability,InMemoryArchive,C:\repos\Particular_ServiceControl\src\ServiceControl\Recoverability\Archiving\InMemoryArchive.cs,GetProgress,The length of the statement  "            var percentage = OperationProgressCalculator.CalculateProgress(TotalNumberOfMessages' NumberOfMessagesArchived' ArchiveState); " is 126.
Long Statement,ServiceControl.Recoverability,GroupFetcher,C:\repos\Particular_ServiceControl\src\ServiceControl\Recoverability\API\GroupFetcher.cs,GetGroups,The length of the statement  "            closedGroups = closedGroups.Union(MapClosedGroups(classifier' archivingManager.GetArchivalOperations().Where(archiveOp => archiveOp.NeedsAcknowledgement()))); " is 158.
Long Statement,ServiceControl.Recoverability,GroupFetcher,C:\repos\Particular_ServiceControl\src\ServiceControl\Recoverability\API\GroupFetcher.cs,MakeSureForwardingBatchIsIncludedAsOpen,The length of the statement  "            var fg = MapOpenForForwardingOperation(classifier' forwardingBatch' retryingManager.GetStatusForRetryOperation(forwardingBatch.RequestId' RetryType.FailureGroup)); " is 163.
Long Statement,ServiceControl.Recoverability,GroupFetcher,C:\repos\Particular_ServiceControl\src\ServiceControl\Recoverability\API\GroupFetcher.cs,IsCurrentForwardingOperationIncluded,The length of the statement  "            return open.Any(x => x.Id == forwardingBatch.RequestId && x.Type == forwardingBatch.Classifier && forwardingBatch.RetryType == RetryType.FailureGroup); " is 151.
Long Statement,ServiceControl.Recoverability,GroupFetcher,C:\repos\Particular_ServiceControl\src\ServiceControl\Recoverability\API\GroupFetcher.cs,MapClosedGroups,The length of the statement  "                var unacknowledged = standaloneUnacknowledgements.First(unack => unack.RequestId == standalone.RequestId && unack.RetryType == RetryType.FailureGroup); " is 151.
Long Statement,ServiceControl.Recoverability,GroupFetcher,C:\repos\Particular_ServiceControl\src\ServiceControl\Recoverability\API\GroupFetcher.cs,MapOpenGroups,The length of the statement  "                var unacknowledged = groupUnacknowledgements.FirstOrDefault(unack => unack.RequestId == failureGroup.Id && unack.RetryType == RetryType.FailureGroup); " is 150.
Long Statement,ServiceControl.Recoverability,Reclassifier,C:\repos\Particular_ServiceControl\src\ServiceControl\Recoverability\Grouping\Groupers\Reclassifier.cs,ReclassifyFailedMessages,The length of the statement  "                            logger.Info($"Reclassification of batch of {BatchSize} failed messages completed. Total messages reclassified: {totalMessagesReclassified}"); " is 141.
Long Statement,ServiceControl.Recoverability,RetryingManager,C:\repos\Particular_ServiceControl\src\ServiceControl\Recoverability\Retrying\RetryingManager.cs,IsRetryInProgressFor,The length of the statement  "            return RetryOperations.Keys.Where(key => key.EndsWith($"/{requestId}")).Any(key => RetryOperations[key].IsInProgress()); " is 120.
Long Statement,ServiceControl.Recoverability,ArchiveAllInGroupHandler,C:\repos\Particular_ServiceControl\src\ServiceControl\Recoverability\Archiving\ArchiveAllInGroupHandler.cs,Handle,The length of the statement  "                session.Advanced.UseOptimisticConcurrency = true; // Ensure 2 messages don't split the same operation into batches at once " is 122.
Long Statement,ServiceControl.Recoverability,ArchiveAllInGroupHandler,C:\repos\Particular_ServiceControl\src\ServiceControl\Recoverability\Archiving\ArchiveAllInGroupHandler.cs,Handle,The length of the statement  "                    archiveOperation = documentManager.CreateArchiveOperation(session' message.GroupId' ArchiveType.FailureGroup' message.CutOff' groupDetails.NumberOfMessagesInGroup' groupDetails.GroupName' batchSize); " is 199.
Long Statement,ServiceControl.Recoverability,ArchiveAllInGroupHandler,C:\repos\Particular_ServiceControl\src\ServiceControl\Recoverability\Archiving\ArchiveAllInGroupHandler.cs,Handle,The length of the statement  "                        logger.Warn($"Attempting to archive a batch ({archiveOperation.Id}/{archiveOperation.CurrentBatch}) which appears to already have been archived."); " is 147.
Long Statement,ServiceControl.Recoverability,ArchiveAllInGroupHandler,C:\repos\Particular_ServiceControl\src\ServiceControl\Recoverability\Archiving\ArchiveAllInGroupHandler.cs,Handle,The length of the statement  "                    archiveOperationManager.BatchArchived(archiveOperation.RequestId' archiveOperation.ArchiveType' nextBatch.DocumentIds.Count); " is 125.
Long Statement,ServiceControl.Recoverability,ArchiveAllInGroupHandler,C:\repos\Particular_ServiceControl\src\ServiceControl\Recoverability\Archiving\ArchiveAllInGroupHandler.cs,Handle,The length of the statement  "                    archiveOperation = archiveOperationManager.GetStatusForArchiveOperation(archiveOperation.RequestId' archiveOperation.ArchiveType).ToArchiveOperation(); " is 151.
Long Statement,ServiceControl.Recoverability,ArchiveAllInGroupHandler,C:\repos\Particular_ServiceControl\src\ServiceControl\Recoverability\Archiving\ArchiveAllInGroupHandler.cs,Handle,The length of the statement  "            if (!documentManager.WaitForIndexUpdateOfArchiveOperation(store' archiveOperation.RequestId' archiveOperation.ArchiveType' TimeSpan.FromMinutes(5))) " is 148.
Long Statement,ServiceControl.Recoverability,ExceptionTypeAndStackTraceFailureClassifier,C:\repos\Particular_ServiceControl\src\ServiceControl\Recoverability\Grouping\Groupers\ExceptionTypeAndStackTraceFailureClassifier.cs,ClassifyFailure,The length of the statement  "            var firstStackTraceFrame = StackTraceParser.Parse(exception.StackTrace' (frame' type' method' parameterList' parameters' file' line) => new StackFrame " is 150.
Long Statement,ServiceControl.Recoverability,InMemoryRetry,C:\repos\Particular_ServiceControl\src\ServiceControl\Recoverability\Retrying\InMemoryRetry.cs,CheckForCompletion,The length of the statement  "            Log.Info($"Retry operation {requestId} completed. {NumberOfMessagesSkipped} messages skipped' {NumberOfMessagesForwarded} forwarded. Total {TotalNumberOfMessages}."); " is 166.
Long Statement,ServiceControl.Recoverability,InMemoryRetry,C:\repos\Particular_ServiceControl\src\ServiceControl\Recoverability\Retrying\InMemoryRetry.cs,GetProgress,The length of the statement  "            var percentage = OperationProgressCalculator.CalculateProgress(TotalNumberOfMessages' NumberOfMessagesPrepared' NumberOfMessagesForwarded' NumberOfMessagesSkipped' RetryState); " is 176.
Long Statement,ServiceControl.Recoverability,InMemoryRetry,C:\repos\Particular_ServiceControl\src\ServiceControl\Recoverability\Retrying\InMemoryRetry.cs,GetProgress,The length of the statement  "            return new RetryProgress(roundedPercentage' NumberOfMessagesPrepared' NumberOfMessagesForwarded' NumberOfMessagesSkipped' remaining); " is 133.
Long Statement,ServiceControl.Recoverability,RetryAllInGroupHandler,C:\repos\Particular_ServiceControl\src\ServiceControl\Recoverability\Retrying\Handlers\RetryAllInGroupHandler.cs,Handle,The length of the statement  "            Retries.StartRetryForIndex<FailureGroupMessageView' FailedMessages_ByGroup>(message.GroupId' RetryType.FailureGroup' started' x => x.FailureGroupId == message.GroupId' originator' group?.Type); " is 193.
Long Statement,ServiceControl.Recoverability,CaptureIfMessageSendingFails,C:\repos\Particular_ServiceControl\src\ServiceControl\Recoverability\Retrying\Infrastructure\ReturnToSenderDequeuer.cs,ProcessingAlwaysFailsForMessage,The length of the statement  "                    Log.Warn($"Failed to send '{messageUniqueId}' message to '{destination}' for retry. Attempting to revert message status to unresolved so it can be tried again."' e); " is 165.
Long Statement,ServiceControl.Recoverability,RetriesGateway,C:\repos\Particular_ServiceControl\src\ServiceControl\Recoverability\Retrying\RetriesGateway.cs,StartRetryForIndex,The length of the statement  "            var request = new IndexBasedBulkRetryRequest<TType' TIndex>(requestId' retryType' originator' classifier' startTime' filter); " is 125.
Long Statement,ServiceControl.Recoverability,RetriesGateway,C:\repos\Particular_ServiceControl\src\ServiceControl\Recoverability\Retrying\RetriesGateway.cs,StageRetryByUniqueMessageIds,The length of the statement  "            var batchDocumentId = retryDocumentManager.CreateBatchDocument(requestId' retryType' messageIds.Length' originator' startTime' last' batchName' classifier); " is 156.
Long Statement,ServiceControl.Recoverability,RetriesGateway,C:\repos\Particular_ServiceControl\src\ServiceControl\Recoverability\Retrying\RetriesGateway.cs,ProcessRequest,The length of the statement  "                    StageRetryByUniqueMessageIds(request.RequestId' request.RetryType' batches[i]' request.StartTime' latestAttempt' request.Originator' GetBatchName(i + 1' batches.Count' request.Originator)' request.Classifier); " is 209.
Long Statement,ServiceControl.Recoverability,RetriesHandler,C:\repos\Particular_ServiceControl\src\ServiceControl\Recoverability\Retrying\Handlers\RetriesHandler.cs,Handle,The length of the statement  "                Retries.StartRetryForIndex<FailedMessageViewIndex.SortAndFilterOptions' FailedMessageViewIndex>(message.Endpoint' RetryType.AllForEndpoint' DateTime.UtcNow' m => m.ReceivingEndpointName == message.Endpoint' "all messages for endpoint " + message.Endpoint); " is 256.
Long Statement,ServiceControl.Recoverability,RetriesHandler,C:\repos\Particular_ServiceControl\src\ServiceControl\Recoverability\Retrying\Handlers\RetriesHandler.cs,Handle,The length of the statement  "                Retries.StartRetryForIndex<FailedMessage' FailedMessageViewIndex>("All"' RetryType.All' DateTime.UtcNow' originator: "all messages"); " is 133.
Long Statement,ServiceControl.Recoverability,RetriesHandler,C:\repos\Particular_ServiceControl\src\ServiceControl\Recoverability\Retrying\Handlers\RetriesHandler.cs,Handle,The length of the statement  "            Retries.StartRetryForIndex<FailedMessageViewIndex.SortAndFilterOptions' FailedMessageViewIndex>(failedQueueAddress' RetryType.ByQueueAddress' DateTime.UtcNow' m => m.QueueAddress == failedQueueAddress && m.Status == message.Status' $"all messages for failed queue address '{message.QueueAddress}'"); " is 299.
Long Statement,ServiceControl.Recoverability,RetryDocumentManager,C:\repos\Particular_ServiceControl\src\ServiceControl\Recoverability\Retrying\RetryDocumentManager.cs,RebuildRetryOperationState,The length of the statement  "                    log.DebugFormat("Rebuilt retry operation status for {0}/{1}. Aggregated batchsize: {2}"' group.RetryType' group.RequestId' group.InitialBatchSize); " is 147.
Long Statement,ServiceControl.Recoverability,RetryDocumentManager,C:\repos\Particular_ServiceControl\src\ServiceControl\Recoverability\Retrying\RetryDocumentManager.cs,RebuildRetryOperationState,The length of the statement  "                    OperationManager.PreparedAdoptedBatch(group.RequestId' group.RetryType' group.InitialBatchSize' group.InitialBatchSize' group.Originator' group.Classifier' group.StartTime' group.Last); " is 185.
Long Statement,ServiceControl.Recoverability,RetryProcessor,C:\repos\Particular_ServiceControl\src\ServiceControl\Recoverability\Retrying\RetryProcessor.cs,Stage,The length of the statement  "                Log.Info($"Retry batch {stagingBatch.Id} cancelled as all matching unresolved messages are already marked for retry as part of another batch"); " is 143.
Long Statement,ServiceControl.Recoverability,RetryProcessor,C:\repos\Particular_ServiceControl\src\ServiceControl\Recoverability\Retrying\RetryProcessor.cs,Stage,The length of the statement  "            Log.DebugFormat("Staging {0} messages for Retry Batch {1} with staging attempt Id {2}"' messages.Length' stagingBatch.Id' stagingId); " is 133.
Long Statement,ServiceControl.Recoverability,RetryProcessor,C:\repos\Particular_ServiceControl\src\ServiceControl\Recoverability\Retrying\RetryProcessor.cs,Stage,The length of the statement  "            stagingBatch.FailureRetries = matchingFailures.Where(x => msgLookup[x.FailedMessageId].Any()).Select(x => x.Id).ToArray(); " is 122.
Long Statement,ServiceControl.Recoverability,RetryProcessor,C:\repos\Particular_ServiceControl\src\ServiceControl\Recoverability\Retrying\RetryProcessor.cs,Stage,The length of the statement  "            Log.DebugFormat("Retry batch {0} staged with Staging Id {1} and {2} matching failure retries"' stagingBatch.Id' stagingBatch.StagingId' stagingBatch.FailureRetries.Count); " is 171.
Long Statement,ServiceControl.MessageRedirects.Api,MessageRedirectsCollectionExtensions,C:\repos\Particular_ServiceControl\src\ServiceControl\MessageRedirects\Api\MessageRedirectsCollectionExtensions.cs,Sort,The length of the statement  "                return direction == "asc" ? source.Redirects.OrderBy(r => r.ToPhysicalAddress) : source.Redirects.OrderByDescending(r => r.ToPhysicalAddress); " is 142.
Long Statement,ServiceControl.MessageRedirects.Api,MessageRedirectsCollectionExtensions,C:\repos\Particular_ServiceControl\src\ServiceControl\MessageRedirects\Api\MessageRedirectsCollectionExtensions.cs,Sort,The length of the statement  "            return direction == "asc" ? source.Redirects.OrderBy(r => r.FromPhysicalAddress) : source.Redirects.OrderByDescending(r => r.FromPhysicalAddress); " is 146.
Long Statement,ServiceControl.Operations,ErrorQueueImport,C:\repos\Particular_ServiceControl\src\ServiceControl\Operations\ErrorQueueImport.cs,Store,The length of the statement  "                        Value = RavenJToken.FromObject(processingAttempt' Serializer) // Need to specify serializer here because otherwise the $type for EndpointDetails is missing and this causes EventDispatcher to blow up! " is 199.
Long Statement,ServiceControl.Operations,ErrorQueueImport,C:\repos\Particular_ServiceControl\src\ServiceControl\Operations\ErrorQueueImport.cs,Store,The length of the statement  "                        Value = RavenJToken.FromObject(processingAttempt' Serializer) // Need to specify serilaizer here because otherwise the $type for EndpointDetails is missing and this causes EventDispatcher to blow up! " is 199.
Long Statement,ServiceControl.Operations,FailedMessageFactory,C:\repos\Particular_ServiceControl\src\ServiceControl\Operations\FailedMessageFactory.cs,ParseFailureDetails,The length of the statement  "            DictionaryExtensions.CheckIfKeyExists("NServiceBus.TimeOfFailure"' headers' s => result.TimeOfFailure = DateTimeExtensions.ToUtcDateTime(s)); " is 141.
Long Statement,ServiceControl.Operations,CheckForFailedErrorMessageImports,C:\repos\Particular_ServiceControl\src\ServiceControl\Operations\DetectFailedMessageImportsFeature.cs,Run,The length of the statement  "                            Logger.Warn(@"One or more error messages have previously failed to import properly into ServiceControl and have been stored in ServiceControl database. " is 151.
Long Statement,ServiceControl.Operations,CheckForFailedErrorMessageImports,C:\repos\Particular_ServiceControl\src\ServiceControl\Operations\DetectFailedMessageImportsFeature.cs,Run,The length of the statement  "Due to a defect however' ServiceControl would not be able to automatically reimport them. Please run ServiceControl in the maintenance mode and use embedded RavenStudio available by default at http://localhost:33333/storage to examine the payloads of failed messages to ensure no information has been lost. " is 306.
Long Statement,ServiceControl.Infrastructure.Extensions,QueryableExtensions,C:\repos\Particular_ServiceControl\src\ServiceControl\Infrastructure\Extensions\QueryableExtensions.cs,FilterByLastModifiedRange,The length of the statement  "                throw new Exception("Invalid modified date range' dates need to be in ISO8601 format and it needs to be a range eg. 2016-03-11T00:27:15.474Z...2016-03-16T03:27:15.474Z"); " is 170.
Long Statement,ServiceControl.Infrastructure.Extensions,QueryableExtensions,C:\repos\Particular_ServiceControl\src\ServiceControl\Infrastructure\Extensions\QueryableExtensions.cs,FilterByLastModifiedRange,The length of the statement  "                throw new Exception("Invalid modified date range' dates need to be in ISO8601 format and it needs to be a range eg. 2016-03-11T00:27:15.474Z...2016-03-16T03:27:15.474Z"); " is 170.
Long Statement,ServiceControl.Operations.BodyStorage.RavenAttachments,RavenAttachmentsBodyStorage,C:\repos\Particular_ServiceControl\src\ServiceControl\Operations\BodyStorage\RavenAttachments\RavenAttachmentsBodyStorage.cs,Store,The length of the statement  "             * The locking here is a workaround for RavenDB bug DocumentDatabase.PutStatic that allows multiple threads to enter a critical section. " is 135.
Long Statement,ServiceControl.Infrastructure.RavenDB,RavenBootstrapper,C:\repos\Particular_ServiceControl\src\ServiceControl\Infrastructure\RavenDB\RavenBootstrapper.cs,ReadLicense,The length of the statement  "            using (var resourceStream = typeof(RavenBootstrapper).Assembly.GetManifestResourceStream("ServiceControl.Infrastructure.RavenDB.RavenLicense.xml")) " is 147.
Long Statement,ServiceControl.Infrastructure.RavenDB,RavenBootstrapper,C:\repos\Particular_ServiceControl\src\ServiceControl\Infrastructure\RavenDB\RavenBootstrapper.cs,StartRaven,The length of the statement  "                documentStore.Configuration.Settings["Raven/License"] = NonLockingFileReader.ReadAllTextWithoutLocking(localRavenLicense); " is 122.
Long Statement,ServiceControl.Infrastructure.RavenDB,RavenBootstrapper,C:\repos\Particular_ServiceControl\src\ServiceControl\Infrastructure\RavenDB\RavenBootstrapper.cs,PurgeKnownEndpointsWithTemporaryIdsThatAreDuplicate,The length of the statement  "                        knownEndpoints.Where(e => e.HasTemporaryId).ForEach(k => { documentStore.DatabaseCommands.Delete(documentStore.Conventions.DefaultFindFullDocumentKeyFromNonStringIdentifier(k.Id' typeof(KnownEndpoint)' false)' null); }); " is 220.
Complex Conditional,Particular.ServiceControl.Hosting,Option,C:\repos\Particular_ServiceControl\src\ServiceControl\Hosting\Options.cs,Option,The conditional expression  "Array.IndexOf(Names' "<>") >= 0 &&                  (Names.Length == 1 && OptionValueType != OptionValueType.None ||                   Names.Length > 1 && MaxValueCount > 1)"  is complex.
Complex Conditional,Particular.ServiceControl.Hosting,OptionSet,C:\repos\Particular_ServiceControl\src\ServiceControl\Hosting\Options.cs,ParseBool,The conditional expression  "n.Length >= 1 && (n[n.Length - 1] == '+' || n[n.Length - 1] == '-') &&                  Contains(rn = n.Substring(0' n.Length - 1))"  is complex.
Complex Conditional,ServiceControl.CustomChecks,ReportCustomCheckResultHandler,C:\repos\Particular_ServiceControl\src\ServiceControl\CustomChecks\ReportCustomCheckResultHandler.cs,Handle,The conditional expression  "customCheck == null ||                      customCheck.Status == Status.Fail && !message.HasFailed ||                      customCheck.Status == Status.Pass && message.HasFailed"  is complex.
Empty Catch Block,ServiceControl.Infrastructure.RavenDB.Expiration,EventLogItemsCleaner,C:\repos\Particular_ServiceControl\src\ServiceControl\Infrastructure\RavenDB\Expiration\EventLogItemsCleaner.cs,Clean,The method has an empty catch block.
Empty Catch Block,ServiceControl.Infrastructure.RavenDB.Expiration,ErrorMessageCleaner,C:\repos\Particular_ServiceControl\src\ServiceControl\Infrastructure\RavenDB\Expiration\ErrorMessageCleaner.cs,Clean,The method has an empty catch block.
Empty Catch Block,ServiceControl.Infrastructure.RavenDB.Expiration,SagaHistoryCleaner,C:\repos\Particular_ServiceControl\src\ServiceControl\Infrastructure\RavenDB\Expiration\SagaHistoryCleaner.cs,Clean,The method has an empty catch block.
Empty Catch Block,ServiceControl.Infrastructure.RavenDB.Expiration,AuditMessageCleaner,C:\repos\Particular_ServiceControl\src\ServiceControl\Infrastructure\RavenDB\Expiration\AuditMessageCleaner.cs,Clean,The method has an empty catch block.
Empty Catch Block,ServiceControl.Infrastructure.RavenDB.Expiration,ExpiredDocumentsCleanerBundle,C:\repos\Particular_ServiceControl\src\ServiceControl\Infrastructure\RavenDB\Expiration\ExpiredDocumentsCleanerBundle.cs,Execute,The method has an empty catch block.
Empty Catch Block,ServiceControl.Infrastructure,TimeKeeper,C:\repos\Particular_ServiceControl\src\ServiceControl\Infrastructure\TimeKeeper.cs,NewTimer,The method has an empty catch block.
Empty Catch Block,ServiceControl.Recoverability,Reclassifier,C:\repos\Particular_ServiceControl\src\ServiceControl\Recoverability\Grouping\Groupers\Reclassifier.cs,ReclassifyBatch,The method has an empty catch block.
Magic Number,Particular.Licensing,License,C:\repos\Particular_ServiceControl\src\ServiceControl\App_Packages\Particular.Licensing\License.cs,TrialLicense,The following statement contains a magic number: return new License              {                  LicenseType = "Trial"'                  ExpirationDate = trialStartDate.AddDays(14)'                  IsExtendedTrial = false'                  ValidApplications = new List<string> { "All" }              };
Magic Number,ServiceControl,EndpointInstanceId,C:\repos\Particular_ServiceControl\src\ServiceControl\Infrastructure\EndpointInstanceId.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  var hashCode = (EndpointName != null ? EndpointName.GetHashCode() : 0);                  hashCode = (hashCode * 397) ^ (InstanceId != null ? InstanceId.GetHashCode() : 0);                  hashCode = (hashCode * 397) ^ (InstanceName != null ? InstanceName.GetHashCode() : 0);                  return hashCode;              }
Magic Number,ServiceControl,EndpointInstanceId,C:\repos\Particular_ServiceControl\src\ServiceControl\Infrastructure\EndpointInstanceId.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  var hashCode = (EndpointName != null ? EndpointName.GetHashCode() : 0);                  hashCode = (hashCode * 397) ^ (InstanceId != null ? InstanceId.GetHashCode() : 0);                  hashCode = (hashCode * 397) ^ (InstanceName != null ? InstanceName.GetHashCode() : 0);                  return hashCode;              }
Magic Number,Particular.ServiceControl,ConfigTransportConfig,C:\repos\Particular_ServiceControl\src\ServiceControl\ConfigTransportConfig.cs,GetConfiguration,The following statement contains a magic number: return new TransportConfig              {                  MaximumMessageThroughputPerSecond = settings.MaximumMessageThroughputPerSecond'                  MaximumConcurrencyLevel = settings.MaximumConcurrencyLevel'                  MaxRetries = 3'              };
Magic Number,Particular.ServiceControl,LoggingConfigurator,C:\repos\Particular_ServiceControl\src\ServiceControl\LoggingConfigurator.cs,ConfigureLogging,The following statement contains a magic number: const long megaByte = 1073741824;
Magic Number,Particular.ServiceControl,LoggingConfigurator,C:\repos\Particular_ServiceControl\src\ServiceControl\LoggingConfigurator.cs,ConfigureLogging,The following statement contains a magic number: var fileTarget = new FileTarget              {                  ArchiveEvery = FileArchivePeriod.Day'                  FileName = Path.Combine(loggingSettings.LogPath' "logfile.${shortdate}.txt")'                  ArchiveFileName = Path.Combine(loggingSettings.LogPath' "logfile.{#}.txt")'                  ArchiveNumbering = ArchiveNumberingMode.DateAndSequence'                  Layout = simpleLayout'                  MaxArchiveFiles = 14'                  ArchiveAboveSize = 30 * megaByte              };
Magic Number,Particular.ServiceControl,LoggingConfigurator,C:\repos\Particular_ServiceControl\src\ServiceControl\LoggingConfigurator.cs,ConfigureLogging,The following statement contains a magic number: var fileTarget = new FileTarget              {                  ArchiveEvery = FileArchivePeriod.Day'                  FileName = Path.Combine(loggingSettings.LogPath' "logfile.${shortdate}.txt")'                  ArchiveFileName = Path.Combine(loggingSettings.LogPath' "logfile.{#}.txt")'                  ArchiveNumbering = ArchiveNumberingMode.DateAndSequence'                  Layout = simpleLayout'                  MaxArchiveFiles = 14'                  ArchiveAboveSize = 30 * megaByte              };
Magic Number,Particular.ServiceControl,LoggingConfigurator,C:\repos\Particular_ServiceControl\src\ServiceControl\LoggingConfigurator.cs,ConfigureLogging,The following statement contains a magic number: var ravenFileTarget = new FileTarget              {                  ArchiveEvery = FileArchivePeriod.Day'                  FileName = Path.Combine(loggingSettings.LogPath' "ravenlog.${shortdate}.txt")'                  ArchiveFileName = Path.Combine(loggingSettings.LogPath' "ravenlog.{#}.txt")'                  ArchiveNumbering = ArchiveNumberingMode.DateAndSequence'                  Layout = simpleLayout'                  MaxArchiveFiles = 14'                  ArchiveAboveSize = 30 * megaByte              };
Magic Number,Particular.ServiceControl,LoggingConfigurator,C:\repos\Particular_ServiceControl\src\ServiceControl\LoggingConfigurator.cs,ConfigureLogging,The following statement contains a magic number: var ravenFileTarget = new FileTarget              {                  ArchiveEvery = FileArchivePeriod.Day'                  FileName = Path.Combine(loggingSettings.LogPath' "ravenlog.${shortdate}.txt")'                  ArchiveFileName = Path.Combine(loggingSettings.LogPath' "ravenlog.{#}.txt")'                  ArchiveNumbering = ArchiveNumberingMode.DateAndSequence'                  Layout = simpleLayout'                  MaxArchiveFiles = 14'                  ArchiveAboveSize = 30 * megaByte              };
Magic Number,ServiceControl.ExternalIntegrations,EventDispatcher,C:\repos\Particular_ServiceControl\src\ServiceControl\ExternalIntegrations\EventDispatcher.cs,OnStart,The following statement contains a magic number: circuitBreaker = new RepeatedFailuresOverTimeCircuitBreaker("EventDispatcher"'                  TimeSpan.FromMinutes(5)'                  ex => criticalError.Raise("Repeated failures when dispatching external integration events."' ex)'                  TimeSpan.FromSeconds(20));
Magic Number,ServiceControl.ExternalIntegrations,EventDispatcher,C:\repos\Particular_ServiceControl\src\ServiceControl\ExternalIntegrations\EventDispatcher.cs,OnStart,The following statement contains a magic number: circuitBreaker = new RepeatedFailuresOverTimeCircuitBreaker("EventDispatcher"'                  TimeSpan.FromMinutes(5)'                  ex => criticalError.Raise("Repeated failures when dispatching external integration events."' ex)'                  TimeSpan.FromSeconds(20));
Magic Number,ServiceControl.ExternalIntegrations,EventDispatcher,C:\repos\Particular_ServiceControl\src\ServiceControl\ExternalIntegrations\EventDispatcher.cs,DispatchEvents,The following statement contains a magic number: do              {                  more = TryDispatchEventBatch();                    circuitBreaker.Success();                    if (more && !token.IsCancellationRequested)                  {                      //if there is more events to dispatch we sleep for a bit and then we go again                      await Task.Delay(1000' CancellationToken.None).ConfigureAwait(false);                  }              } while (!token.IsCancellationRequested && more);
Magic Number,Particular.ServiceControl.Hosting,OptionSet,C:\repos\Particular_ServiceControl\src\ServiceControl\Hosting\Options.cs,Add,The following statement contains a magic number: Option p = new ActionOption(prototype' description' 2'                  delegate(OptionValueCollection v) { action(v[0]' v[1]); });
Magic Number,Particular.ServiceControl.Hosting,OptionSet,C:\repos\Particular_ServiceControl\src\ServiceControl\Hosting\Options.cs,ParseValue,The following statement contains a magic number: if (option != null)              {                  foreach (var o in c.Option.ValueSeparators != null                      ? option.Split(c.Option.ValueSeparators' 2' StringSplitOptions.None)                      : new[]                      {                          option                      })                  {                      c.OptionValues.Add(o);                  }              }
Magic Number,Particular.ServiceControl.Hosting,OptionSet,C:\repos\Particular_ServiceControl\src\ServiceControl\Hosting\Options.cs,WriteOptionDescriptions,The following statement contains a magic number: foreach (var p in this)              {                  var written = 0;                  if (!WriteOptionPrototype(o' p' ref written))                  {                      continue;                  }                    if (written < OptionWidth)                  {                      o.Write(new string(' '' OptionWidth - written));                  }                  else                  {                      o.WriteLine();                      o.Write(new string(' '' OptionWidth));                  }                    var lines = GetLines(MessageLocalizer(GetDescription(p.Description)));                  o.WriteLine(lines[0]);                  var prefix = new string(' '' OptionWidth + 2);                  for (var i = 1; i < lines.Count; ++i)                  {                      o.Write(prefix);                      o.WriteLine(lines[i]);                  }              }
Magic Number,Particular.ServiceControl.Hosting,OptionSet,C:\repos\Particular_ServiceControl\src\ServiceControl\Hosting\Options.cs,GetLines,The following statement contains a magic number: var length = 80 - OptionWidth - 2;
Magic Number,Particular.ServiceControl.Hosting,OptionSet,C:\repos\Particular_ServiceControl\src\ServiceControl\Hosting\Options.cs,GetLines,The following statement contains a magic number: var length = 80 - OptionWidth - 2;
Magic Number,ServiceBus.Management.Infrastructure.Extensions,NegotiatorExtensions,C:\repos\Particular_ServiceControl\src\ServiceControl\Infrastructure\Extensions\NegotiatorExtensions.cs,WithPagingLinks,The following statement contains a magic number: decimal maxResultsPerPage = 50;
Magic Number,ServiceBus.Management.Infrastructure.Extensions,NegotiatorExtensions,C:\repos\Particular_ServiceControl\src\ServiceControl\Infrastructure\Extensions\NegotiatorExtensions.cs,WithPagingLinks,The following statement contains a magic number: if (maxResultsPerPage < 1)              {                  maxResultsPerPage = 50;              }
Magic Number,ServiceBus.Management.Infrastructure.Nancy,JsonNetSerializer,C:\repos\Particular_ServiceControl\src\ServiceControl\Infrastructure\Nancy\JsonNetSerializer.cs,Serialize,The following statement contains a magic number: try              {                  using (var writer = new JsonTextWriter(new StreamWriter(new UnclosableStreamWrapper(outputStream))))                  {                      serializer.Serialize(writer' model);                  }              }              catch (IOException ex)              {                  var innerException = ex.InnerException as HttpListenerException;                  if (innerException?.ErrorCode == 1229)                      // An operation was attempted on a nonexistent network connection' this error happens when the client has dropped the connection so it is safe to ignore                  {                      return;                  }                    throw;              }
Magic Number,ServiceBus.Management.Infrastructure.Nancy,NancyCompressionExtension,C:\repos\Particular_ServiceControl\src\ServiceControl\Infrastructure\Nancy\NancyCompressionExtension.cs,ContentLengthIsTooSmall,The following statement contains a magic number: if (response.Headers.TryGetValue("Content-Length"' out contentLength))              {                  var length = long.Parse(contentLength);                  if (length < 4096)                  {                      return true;                  }              }
Magic Number,ServiceBus.Management.Infrastructure.Nancy,VersionExtension,C:\repos\Particular_ServiceControl\src\ServiceControl\Infrastructure\Nancy\VersionExtension.cs,GetFileVersion,The following statement contains a magic number: return typeof(VersionExtension).Assembly.GetName().Version.ToString(4);
Magic Number,ServiceBus.Management.Infrastructure.Settings,Settings,C:\repos\Particular_ServiceControl\src\ServiceControl\Infrastructure\Settings\Settings.cs,Settings,The following statement contains a magic number: Port = SettingsReader<int>.Read("Port"' 33333);
Magic Number,ServiceBus.Management.Infrastructure.Settings,Settings,C:\repos\Particular_ServiceControl\src\ServiceControl\Infrastructure\Settings\Settings.cs,Settings,The following statement contains a magic number: ProcessRetryBatchesFrequency = TimeSpan.FromSeconds(30);
Magic Number,ServiceBus.Management.Infrastructure.Settings,Settings,C:\repos\Particular_ServiceControl\src\ServiceControl\Infrastructure\Settings\Settings.cs,Settings,The following statement contains a magic number: MaximumConcurrencyLevel = 10;
Magic Number,ServiceBus.Management.Infrastructure.Settings,Settings,C:\repos\Particular_ServiceControl\src\ServiceControl\Infrastructure\Settings\Settings.cs,Settings,The following statement contains a magic number: RetryHistoryDepth = SettingsReader<int>.Read("RetryHistoryDepth"' 10);
Magic Number,ServiceBus.Management.Infrastructure.Settings,Settings,C:\repos\Particular_ServiceControl\src\ServiceControl\Infrastructure\Settings\Settings.cs,Settings,The following statement contains a magic number: HttpDefaultConnectionLimit = SettingsReader<int>.Read("HttpDefaultConnectionLimit"' 100);
Magic Number,ServiceBus.Management.Infrastructure.Settings,Settings,C:\repos\Particular_ServiceControl\src\ServiceControl\Infrastructure\Settings\Settings.cs,GetEventRetentionPeriod,The following statement contains a magic number: if (valueRead != null)              {                  TimeSpan result;                  if (TimeSpan.TryParse(valueRead' out result))                  {                      string message;                      if (result < TimeSpan.FromHours(1))                      {                          message = "EventRetentionPeriod settings is invalid' value should be minimum 1 hour.";                          logger.Fatal(message);                          throw new Exception(message);                      }                        if (result > TimeSpan.FromDays(200))                      {                          message = "EventRetentionPeriod settings is invalid' value should be maximum 200 days.";                          logger.Fatal(message);                          throw new Exception(message);                      }                        return result;                  }              }
Magic Number,ServiceBus.Management.Infrastructure.Settings,Settings,C:\repos\Particular_ServiceControl\src\ServiceControl\Infrastructure\Settings\Settings.cs,GetEventRetentionPeriod,The following statement contains a magic number: return TimeSpan.FromDays(14);
Magic Number,ServiceBus.Management.Infrastructure.Settings,Settings,C:\repos\Particular_ServiceControl\src\ServiceControl\Infrastructure\Settings\Settings.cs,GetErrorRetentionPeriod,The following statement contains a magic number: if (TimeSpan.TryParse(valueRead' out result))              {                  if (result < TimeSpan.FromDays(10))                  {                      message = "ErrorRetentionPeriod settings is invalid' value should be minimum 10 days.";                      logger.Fatal(message);                      throw new Exception(message);                  }                    if (result > TimeSpan.FromDays(45))                  {                      message = "ErrorRetentionPeriod settings is invalid' value should be maximum 45 days.";                      logger.Fatal(message);                      throw new Exception(message);                  }              }              else              {                  message = "ErrorRetentionPeriod settings is invalid' please make sure it is a TimeSpan.";                  logger.Fatal(message);                  throw new Exception(message);              }
Magic Number,ServiceBus.Management.Infrastructure.Settings,Settings,C:\repos\Particular_ServiceControl\src\ServiceControl\Infrastructure\Settings\Settings.cs,GetErrorRetentionPeriod,The following statement contains a magic number: if (TimeSpan.TryParse(valueRead' out result))              {                  if (result < TimeSpan.FromDays(10))                  {                      message = "ErrorRetentionPeriod settings is invalid' value should be minimum 10 days.";                      logger.Fatal(message);                      throw new Exception(message);                  }                    if (result > TimeSpan.FromDays(45))                  {                      message = "ErrorRetentionPeriod settings is invalid' value should be maximum 45 days.";                      logger.Fatal(message);                      throw new Exception(message);                  }              }              else              {                  message = "ErrorRetentionPeriod settings is invalid' please make sure it is a TimeSpan.";                  logger.Fatal(message);                  throw new Exception(message);              }
Magic Number,ServiceBus.Management.Infrastructure.Settings,Settings,C:\repos\Particular_ServiceControl\src\ServiceControl\Infrastructure\Settings\Settings.cs,GetAuditRetentionPeriod,The following statement contains a magic number: if (TimeSpan.TryParse(valueRead' out result))              {                  if (result < TimeSpan.FromHours(1))                  {                      message = "AuditRetentionPeriod settings is invalid' value should be minimum 1 hour.";                      InternalLogger.Fatal(message);                      throw new Exception(message);                  }                    if (result > TimeSpan.FromDays(365))                  {                      message = "AuditRetentionPeriod settings is invalid' value should be maximum 365 days.";                      InternalLogger.Fatal(message);                      throw new Exception(message);                  }              }              else              {                  message = "AuditRetentionPeriod settings is invalid' please make sure it is a TimeSpan.";                  InternalLogger.Fatal(message);                  throw new Exception(message);              }
Magic Number,Particular.ServiceControl.Licensing,LicenseCheckFeatureStartup,C:\repos\Particular_ServiceControl\src\ServiceControl\Licensing\LicenseCheckFeature.cs,OnStart,The following statement contains a magic number: var due = TimeSpan.FromHours(8);
Magic Number,ServiceControl.Monitoring,EndpointInstanceId,C:\repos\Particular_ServiceControl\src\ServiceControl\Monitoring\EndpointInstanceId.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  var hashCode = (LogicalName != null ? LogicalName.GetHashCode() : 0);                  hashCode = (hashCode * 397) ^ (HostName != null ? HostName.GetHashCode() : 0);                  hashCode = (hashCode * 397) ^ HostGuid.GetHashCode();                  return hashCode;              }
Magic Number,ServiceControl.Monitoring,EndpointInstanceId,C:\repos\Particular_ServiceControl\src\ServiceControl\Monitoring\EndpointInstanceId.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  var hashCode = (LogicalName != null ? LogicalName.GetHashCode() : 0);                  hashCode = (hashCode * 397) ^ (HostName != null ? HostName.GetHashCode() : 0);                  hashCode = (hashCode * 397) ^ HostGuid.GetHashCode();                  return hashCode;              }
Magic Number,ServiceControl.Monitoring,MonitorEndpointInstances,C:\repos\Particular_ServiceControl\src\ServiceControl\Monitoring\InMemoryMonitoring.cs,OnStart,The following statement contains a magic number: timer = timeKeeper.NewTimer(CheckEndpoints' TimeSpan.Zero' TimeSpan.FromSeconds(5));
Magic Number,ServiceControl.Recoverability,InMemoryArchive,C:\repos\Particular_ServiceControl\src\ServiceControl\Recoverability\Archiving\InMemoryArchive.cs,GetProgress,The following statement contains a magic number: var roundedPercentage = Math.Round(percentage' 2);
Magic Number,ServiceControl.Recoverability,GroupFetcher,C:\repos\Particular_ServiceControl\src\ServiceControl\Recoverability\API\GroupFetcher.cs,GetDBGroups,The following statement contains a magic number: return groups.OrderByDescending(x => x.Last)                  .Take(200)                  .ToArray();
Magic Number,ServiceControl.Recoverability,ArchiveAllInGroupHandler,C:\repos\Particular_ServiceControl\src\ServiceControl\Recoverability\Archiving\ArchiveAllInGroupHandler.cs,Handle,The following statement contains a magic number: if (!documentManager.WaitForIndexUpdateOfArchiveOperation(store' archiveOperation.RequestId' archiveOperation.ArchiveType' TimeSpan.FromMinutes(5)))              {                  logger.Warn($"Archiving group {message.GroupId} completed but index not updated.");              }
Magic Number,ServiceControl.Recoverability,InMemoryRetry,C:\repos\Particular_ServiceControl\src\ServiceControl\Recoverability\Retrying\InMemoryRetry.cs,GetProgress,The following statement contains a magic number: var roundedPercentage = Math.Round(percentage' 2);
Magic Number,ServiceControl.Recoverability,CorruptedReplyToHeaderStrategy,C:\repos\Particular_ServiceControl\src\ServiceControl\Recoverability\Retrying\CorruptedReplyToHeaderStrategy.cs,FixCorruptedReplyToHeader,The following statement contains a magic number: if (split.Length != 2)              {                  return;              }
Magic Number,ServiceControl.Recoverability,ReturnToSenderDequeuer,C:\repos\Particular_ServiceControl\src\ServiceControl\Recoverability\Retrying\Infrastructure\ReturnToSenderDequeuer.cs,ReturnToSenderDequeuer,The following statement contains a magic number: Action executeOnFailure = () =>              {                  if (IsCounting)                  {                      CountMessageAndStopIfReachedTarget();                  }                  else                  {                      timer.Change(TimeSpan.FromSeconds(45)' Timeout.InfiniteTimeSpan);                  }              };
Magic Number,ServiceControl.Recoverability,ReturnToSenderDequeuer,C:\repos\Particular_ServiceControl\src\ServiceControl\Recoverability\Retrying\Infrastructure\ReturnToSenderDequeuer.cs,Handle,The following statement contains a magic number: if (!IsCounting)              {                  Log.Debug("Resetting timer");                  timer.Change(TimeSpan.FromSeconds(45)' Timeout.InfiniteTimeSpan);              }
Magic Number,ServiceControl.Recoverability,ReturnToSenderDequeuer,C:\repos\Particular_ServiceControl\src\ServiceControl\Recoverability\Retrying\Infrastructure\ReturnToSenderDequeuer.cs,ReadFully,The following statement contains a magic number: var buffer = new byte[16 * 1024];
Magic Number,ServiceControl.Recoverability,ReturnToSenderDequeuer,C:\repos\Particular_ServiceControl\src\ServiceControl\Recoverability\Retrying\Infrastructure\ReturnToSenderDequeuer.cs,ReadFully,The following statement contains a magic number: var buffer = new byte[16 * 1024];
Magic Number,ServiceControl.Recoverability,ReturnToSenderDequeuer,C:\repos\Particular_ServiceControl\src\ServiceControl\Recoverability\Retrying\Infrastructure\ReturnToSenderDequeuer.cs,Run,The following statement contains a magic number: try              {                  Log.DebugFormat("Started. Expectected message count {0}"' expectedMessageCount);                    if (expectedMessageCount.HasValue && expectedMessageCount.Value == 0)                  {                      return;                  }                    shouldProcess = filter;                  resetEvent.Reset();                  targetMessageCount = expectedMessageCount;                  actualMessageCount = 0;                  Log.DebugFormat("Starting receiver");                  receiver.StartInternal();                  if (!expectedMessageCount.HasValue)                  {                      Log.Debug("Running in timeout mode. Starting timer");                      timer.Change(TimeSpan.FromSeconds(45)' Timeout.InfiniteTimeSpan);                  }                  Log.InfoFormat("{0} started"' GetType().Name);              }              finally              {                  Log.DebugFormat("Waiting for finish");                  resetEvent.Wait(cancellationToken);                  Log.DebugFormat("Finished");              }
Magic Number,ServiceControl.Recoverability,BulkRetryBatchCreation,C:\repos\Particular_ServiceControl\src\ServiceControl\Recoverability\Retrying\FailedMessageRetries.cs,OnStart,The following statement contains a magic number: if (retries != null)                  {                      var due = TimeSpan.FromSeconds(5);                      timer = timeKeeper.New(ProcessRequestedBulkRetryOperations' due' due);                  }
Magic Number,ServiceControl.Recoverability,AdoptOrphanBatchesFromPreviousSession,C:\repos\Particular_ServiceControl\src\ServiceControl\Recoverability\Retrying\FailedMessageRetries.cs,OnStart,The following statement contains a magic number: timer = timeKeeper.NewTimer(AdoptOrphanedBatches' TimeSpan.Zero' TimeSpan.FromMinutes(2));
Magic Number,ServiceControl.MessageRedirects.Api,MessageRedirectsCollectionExtensions,C:\repos\Particular_ServiceControl\src\ServiceControl\MessageRedirects\Api\MessageRedirectsCollectionExtensions.cs,Paging,The following statement contains a magic number: var maxResultsPerPage = 50;
Magic Number,ServiceControl.MessageRedirects.Api,MessageRedirectsCollectionExtensions,C:\repos\Particular_ServiceControl\src\ServiceControl\MessageRedirects\Api\MessageRedirectsCollectionExtensions.cs,Paging,The following statement contains a magic number: if (maxResultsPerPage < 1)              {                  maxResultsPerPage = 50;              }
Magic Number,ServiceControl.Operations,ImportFailureCircuitBreaker,C:\repos\Particular_ServiceControl\src\ServiceControl\Operations\ImportFailureCircuitBreaker.cs,ImportFailureCircuitBreaker,The following statement contains a magic number: timer = new Timer(_ => FlushHistory()' null' TimeSpan.FromSeconds(0)' TimeSpan.FromSeconds(20));
Magic Number,ServiceControl.Operations,ImportFailureCircuitBreaker,C:\repos\Particular_ServiceControl\src\ServiceControl\Operations\ImportFailureCircuitBreaker.cs,Increment,The following statement contains a magic number: if (result > 50)              {                  criticalError.Raise("Failed to import too many times"' lastException);              }
Magic Number,ServiceControl.Infrastructure.Extensions,QueryableExtensions,C:\repos\Particular_ServiceControl\src\ServiceControl\Infrastructure\Extensions\QueryableExtensions.cs,Paging,The following statement contains a magic number: var maxResultsPerPage = 50;
Magic Number,ServiceControl.Infrastructure.Extensions,QueryableExtensions,C:\repos\Particular_ServiceControl\src\ServiceControl\Infrastructure\Extensions\QueryableExtensions.cs,Paging,The following statement contains a magic number: if (maxResultsPerPage < 1)              {                  maxResultsPerPage = 50;              }
Magic Number,ServiceControl.Infrastructure.Extensions,QueryableExtensions,C:\repos\Particular_ServiceControl\src\ServiceControl\Infrastructure\Extensions\QueryableExtensions.cs,FilterByLastModifiedRange,The following statement contains a magic number: if (filters.Length != 2)              {                  throw new Exception("Invalid modified date range' dates need to be in ISO8601 format and it needs to be a range eg. 2016-03-11T00:27:15.474Z...2016-03-16T03:27:15.474Z");              }
Magic Number,ServiceControl.Infrastructure.Extensions,QueryableExtensions,C:\repos\Particular_ServiceControl\src\ServiceControl\Infrastructure\Extensions\QueryableExtensions.cs,Paging,The following statement contains a magic number: var maxResultsPerPage = 50;
Magic Number,ServiceControl.Infrastructure.Extensions,QueryableExtensions,C:\repos\Particular_ServiceControl\src\ServiceControl\Infrastructure\Extensions\QueryableExtensions.cs,Paging,The following statement contains a magic number: if (maxResultsPerPage < 1)              {                  maxResultsPerPage = 50;              }
Magic Number,ServiceControl.Infrastructure.Extensions,QueryableExtensions,C:\repos\Particular_ServiceControl\src\ServiceControl\Infrastructure\Extensions\QueryableExtensions.cs,Paging,The following statement contains a magic number: var maxResultsPerPage = 50;
Magic Number,ServiceControl.Infrastructure.Extensions,QueryableExtensions,C:\repos\Particular_ServiceControl\src\ServiceControl\Infrastructure\Extensions\QueryableExtensions.cs,Paging,The following statement contains a magic number: if (maxResultsPerPage < 1)              {                  maxResultsPerPage = 50;              }
Magic Number,ServiceControl.Operations.BodyStorage.RavenAttachments,RavenAttachmentsBodyStorage,C:\repos\Particular_ServiceControl\src\ServiceControl\Operations\BodyStorage\RavenAttachments\RavenAttachmentsBodyStorage.cs,RavenAttachmentsBodyStorage,The following statement contains a magic number: locks = Enumerable.Range(0' 42).Select(i => new object()).ToArray();
Magic Number,ServiceControl.SagaAudit,SagaRelationshipsEnricher,C:\repos\Particular_ServiceControl\src\ServiceControl\SagaAudit\SagaAuditing.cs,SplitInvokedSagas,The following statement contains a magic number: if (colonCount != semicolonCount + 1) //Malformed data coming from old version of saga audit plugin                  {                      var tailSemicolon = sagasInvokedRaw.LastIndexOf(";"' StringComparison.Ordinal);                      var tail = sagasInvokedRaw.Substring(tailSemicolon + 1);                      var head = sagasInvokedRaw.Substring(0' tailSemicolon);                        var headDeduplicated = head.Substring(0' head.Length / 2);                        foreach (var part in SplitInvokedSagas(headDeduplicated))                      {                          yield return part;                      }                      yield return tail;                  }                  else                  {                      foreach (var part in sagasInvokedRaw.Split(';'))                      {                          yield return part;                      }                  }
Missing Default,Particular.ServiceControl.Hosting,OptionSet,C:\repos\Particular_ServiceControl\src\ServiceControl\Hosting\Options.cs,Parse,The following switch statement is missing a default case: switch (p.OptionValueType)                  {                      case OptionValueType.None:                          c.OptionValues.Add(n);                          c.Option.Invoke(c);                          break;                      case OptionValueType.Optional:                      case OptionValueType.Required:                          ParseValue(v' c);                          break;                  }
Missing Default,Particular.ServiceControl.Hosting,OptionSet,C:\repos\Particular_ServiceControl\src\ServiceControl\Hosting\Options.cs,GetLineEnd,The following switch statement is missing a default case: switch (description[i])                  {                      case ' ':                      case '\t':                      case '\v':                      case '-':                      case ''':                      case '.':                      case ';':                          sep = i;                          break;                      case '\n':                          return i;                  }
