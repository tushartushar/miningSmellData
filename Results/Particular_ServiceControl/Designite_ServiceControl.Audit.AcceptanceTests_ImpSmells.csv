Implementation smell,Namespace,Class,File,Method,Description
Long Method,ServiceControl.Audit.AcceptanceTests.TestSupport,ServiceControlComponentRunner,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Audit.AcceptanceTests\TestSupport\ServiceControlComponentRunner.cs,InitializeServiceControl,The method has 100 lines of code.
Long Identifier,ServiceControl.Audit.AcceptanceTests,AcceptanceTest,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Audit.AcceptanceTests\AcceptanceTest.cs,RemoveOtherTransportAssemblies,The length of the parameter currentDirectoryOfSelectedTransport is 35.
Long Identifier,ServiceControl.Audit.AcceptanceTests.TestSupport.EndpointTemplates,DefaultServerWithAudit,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Audit.AcceptanceTests\TestSupport\EndpointTemplates\DefaultServerWithAudit.cs,GetConfiguration,The length of the parameter configurationBuilderCustomization is 33.
Long Identifier,ServiceControl.Audit.AcceptanceTests.TestSupport.EndpointTemplates,DefaultServerWithoutAudit,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Audit.AcceptanceTests\TestSupport\EndpointTemplates\DefaultServerWithoutAudit.cs,GetConfiguration,The length of the parameter configurationBuilderCustomization is 33.
Long Identifier,ServiceControl.Audit.AcceptanceTests.TestSupport.SelfVerification,EndpointNameEnforcementTests,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Audit.AcceptanceTests\TestSupport\SelfVerification\EndpointNameEnforcementTests.cs,,The length of the parameter endpointConfigurationBuilderType is 32.
Long Statement,ServiceControl.Audit.AcceptanceTests,AcceptanceTest,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Audit.AcceptanceTests\AcceptanceTest.cs,Setup,The length of the statement  "            var logFile = Path.Combine(logfilesPath' $"{TestContext.CurrentContext.Test.ID}-{TestContext.CurrentContext.Test.Name}.txt"); " is 125.
Long Statement,ServiceControl.Audit.AcceptanceTests,AcceptanceTest,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Audit.AcceptanceTests\AcceptanceTest.cs,Setup,The length of the statement  "                Assert.Inconclusive($"Not flagged with [RunOnAllTransports] therefore skipping this test with '{TransportIntegration.Name}'"); " is 126.
Long Statement,ServiceControl.Audit.AcceptanceTests,AcceptanceTest,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Audit.AcceptanceTests\AcceptanceTest.cs,Setup,The length of the statement  "            serviceControlRunnerBehavior = new ServiceControlComponentBehavior(TransportIntegration' s => SetSettings(s)' s => CustomConfiguration(s)); " is 139.
Long Statement,ServiceControl.Audit.AcceptanceTests.Auditing,When_a_message_fails_to_import,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Audit.AcceptanceTests\Auditing\When_a_message_fails_to_import.cs,It_can_be_reimported,The length of the statement  "            CustomConfiguration = config => { config.RegisterComponents(c => c.ConfigureComponent<FailOnceEnricher>(DependencyLifecycle.SingleInstance)); }; " is 144.
Long Statement,ServiceControl.Audit.AcceptanceTests.Auditing,When_a_message_sent_with_missing_metadata,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Audit.AcceptanceTests\Auditing\When_a_message_sent_with_missing_metadata.cs,Should_not_be_cast_TimeSent_to_DateTimeMin,The length of the statement  "                    var result = await this.TryGetSingle<MessagesView>("/api/messages?include_system_messages=false&sort=id"' m => m.MessageId == c.MessageId); " is 139.
Long Statement,ServiceControl.Audit.AcceptanceTests.Auditing,SendMessage,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Audit.AcceptanceTests\Auditing\When_a_message_sent_with_missing_metadata.cs,CreateMessage,The length of the statement  "                    return new TransportOperations(new TransportOperation(new OutgoingMessage(context.MessageId' headers' new byte[0])' new UnicastAddressTag("audit"))); " is 149.
Long Statement,ServiceControl.Audit.AcceptanceTests.Auditing,SendMessage,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Audit.AcceptanceTests\Auditing\When_a_message_sent_with_missing_metadata.cs,CreateMessage,The length of the statement  "                    return new TransportOperations(new TransportOperation(new OutgoingMessage(context.MessageId' headers' new byte[0])' new UnicastAddressTag("audit"))); " is 149.
Long Statement,ServiceControl.Audit.AcceptanceTests.Auditing,When_messages_are_marked_as_system_messages,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Audit.AcceptanceTests\Auditing\When_messages_are_marked_as_system_messages.cs,Should_set_the_IsSystemMessage_when_message_type_is_not_a_scheduled_task,The length of the statement  "                    ctx.EnclosedMessageType = "SendOnlyError.SendSomeCommand' TestSendOnlyError' Version=1.0.0.0' Culture=neutral' PublicKeyToken=null"; " is 132.
Long Statement,ServiceControl.Audit.AcceptanceTests.Auditing,When_messages_are_marked_as_system_messages,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Audit.AcceptanceTests\Auditing\When_messages_are_marked_as_system_messages.cs,Scheduled_task_messages_should_set_IsSystemMessage,The length of the statement  "                    ctx.EnclosedMessageType = "NServiceBus.Scheduling.Messages.ScheduledTask' TestSendOnlyError' Version=5.0.0.0' Culture=neutral' PublicKeyToken=null"; " is 148.
Long Statement,ServiceControl.Audit.AcceptanceTests.Auditing,When_messages_are_marked_as_system_messages,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Audit.AcceptanceTests\Auditing\When_messages_are_marked_as_system_messages.cs,Scheduled_task_messages_should_set_IsSystemMessage,The length of the statement  "                    var result = await this.TryGetSingle<MessagesView>("/api/messages?include_system_messages=true&sort=id"' r => r.MessageId == c.MessageId); " is 138.
Long Statement,ServiceControl.Audit.AcceptanceTests.Auditing,When_messages_are_marked_as_system_messages,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Audit.AcceptanceTests\Auditing\When_messages_are_marked_as_system_messages.cs,Control_messages_should_not_be_audited,The length of the statement  "                    ctx.IncludeControlMessageHeader = true; // If the control message header is present' then its a system message regardless of the value " is 134.
Long Statement,ServiceControl.Audit.AcceptanceTests.Auditing,SendMessageLowLevel,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Audit.AcceptanceTests\Auditing\When_messages_are_marked_as_system_messages.cs,CreateMessage,The length of the statement  "                        headers[Headers.ControlMessageHeader] = context.ControlMessageHeaderValue != null && (bool)context.ControlMessageHeaderValue ? context.ControlMessageHeaderValue.ToString() : null; " is 179.
Long Statement,ServiceControl.Audit.AcceptanceTests.Auditing,SendMessageLowLevel,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Audit.AcceptanceTests\Auditing\When_messages_are_marked_as_system_messages.cs,CreateMessage,The length of the statement  "                    return new TransportOperations(new TransportOperation(new OutgoingMessage(context.MessageId' headers' new byte[0])' new UnicastAddressTag("audit"))); " is 149.
Long Statement,ServiceControl.Audit.AcceptanceTests.Auditing,When_message_processed_successfully_from_sendonly,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Audit.AcceptanceTests\Auditing\When_message_processed_successfully_from_sendonly.cs,Should_import_messages_from_sendonly_endpoint,The length of the statement  "                    if (!await this.TryGetSingle<MessagesView>("/api/messages?include_system_messages=false&sort=id"' m => m.MessageId == c.MessageId)) " is 131.
Long Statement,ServiceControl.Audit.AcceptanceTests.Auditing,When_processed_message_is_imported,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Audit.AcceptanceTests\Auditing\When_processed_message_is_imported.cs,Should_be_accessible_via_the_rest_api,The length of the statement  "                    var result = await this.TryGetSingle<MessagesView>("/api/messages?include_system_messages=false&sort=id"' m => m.MessageId == c.MessageId); " is 139.
Long Statement,ServiceControl.Audit.AcceptanceTests.Auditing,When_processed_message_searched_by_debugsession,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Audit.AcceptanceTests\Auditing\When_processed_message_searched_by_debugsession.cs,Should_be_found,The length of the statement  "                .Done(async c => c.MessageId != null && await this.TryGetMany<MessagesView>("/api/messages/search/DANCO-WIN8@Application1@2014-01-26T11:33:51")) " is 144.
Long Statement,ServiceControl.Audit.AcceptanceTests.Auditing,When_processed_message_searched_by_msgid_for_endpoint,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Audit.AcceptanceTests\Auditing\When_processed_message_searched_by_msgid_for_endpoint.cs,Should_be_found,The length of the statement  "                .Done(async c => c.MessageId != null && await this.TryGetMany<MessagesView>($"/api/endpoints/{c.EndpointNameOfReceivingEndpoint}/messages/search/{c.MessageId}")) " is 161.
Long Statement,ServiceControl.Audit.AcceptanceTests.TestSupport,ServiceControlComponentRunner,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Audit.AcceptanceTests\TestSupport\ServiceControlComponentRunner.cs,InitializeServiceControl,The length of the statement  "                        log.Debug($"Discarding message '{id}'({originalMessageId ?? string.Empty}) because it's session id is '{session}' instead of '{currentSession}'."); " is 147.
Long Statement,ServiceControl.Audit.AcceptanceTests.TestSupport,ServiceControlComponentRunner,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Audit.AcceptanceTests\TestSupport\ServiceControlComponentRunner.cs,InitializeServiceControl,The length of the statement  "            // This is a hack to ensure ServiceControl picks the correct type for the messages that come from plugins otherwise we pick the type from the plugins assembly and that is not the type we want' we need to pick the type from ServiceControl assembly. " is 247.
Long Statement,ServiceControl.Audit.AcceptanceTests.TestSupport,ServiceControlComponentRunner,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Audit.AcceptanceTests\TestSupport\ServiceControlComponentRunner.cs,InitializeServiceControl,The length of the statement  "            configuration.Pipeline.Register(new InterceptMessagesDestinedToServiceControl(context)' "Intercepts messages destined to ServiceControl"); " is 138.
Long Statement,ServiceControl.Audit.AcceptanceTests.TestSupport,ServiceControlComponentRunner,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Audit.AcceptanceTests\TestSupport\ServiceControlComponentRunner.cs,InitializeServiceControl,The length of the statement  "                }' settings' configuration' loggingSettings' builder => { builder.RegisterType<FailedAuditsController>().FindConstructorsWith(t => t.GetTypeInfo().DeclaredConstructors.ToArray()); }); " is 183.
Magic Number,ServiceControl.Audit.AcceptanceTests,AcceptanceTest,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Audit.AcceptanceTests\AcceptanceTest.cs,AcceptanceTest,The following statement contains a magic number: ServicePointManager.SetTcpKeepAlive(true' 5000' 1000);
Magic Number,ServiceControl.Audit.AcceptanceTests,AcceptanceTest,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Audit.AcceptanceTests\AcceptanceTest.cs,AcceptanceTest,The following statement contains a magic number: ServicePointManager.SetTcpKeepAlive(true' 5000' 1000);
Magic Number,ServiceControl.Audit.AcceptanceTests.Auditing,When_messages_with_big_bodies_are_ingested,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Audit.AcceptanceTests\Auditing\When_messages_with_big_bodies_are_ingested.cs,Should_not_get_an_empty_audit_message_body_when_configured_MaxBodySizeToStore_is_greater_then_message_size,The following statement contains a magic number: await Define<Context>()                  .WithEndpoint<FatMessageEndpoint>(c => c.When(b => b.SendLocal(                      new BigFatMessage // An endpoint that is configured for audit                      {                          BigFatBody = new byte[MAX_BODY_SIZE - 10000]                      }))                  )                  .Done(                      async c =>                      {                          if (c.MessageId == null)                          {                              return false;                          }                            var result = await this.TryGetSingle<MessagesView>("/api/messages"' r => r.MessageId == c.MessageId);                          MessagesView auditMessage = result;                          if (!result)                          {                              return false;                          }                            body = await this.DownloadData(auditMessage.BodyUrl);                            return true;                      })                  .Run();
Magic Number,ServiceControl.Audit.AcceptanceTests.Auditing,When_messages_with_big_bodies_are_ingested,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Audit.AcceptanceTests\Auditing\When_messages_with_big_bodies_are_ingested.cs,Should_get_an_empty_audit_message_body_when_configured_MaxBodySizeToStore_is_less_then_message_size,The following statement contains a magic number: await Define<Context>()                  .WithEndpoint<FatMessageEndpoint>(c => c.When(b => b.SendLocal(                      new BigFatMessage // An endpoint that is configured for audit                      {                          BigFatBody = new byte[MAX_BODY_SIZE + 1000]                      }))                  )                  .Done(                      async c =>                      {                          if (c.MessageId == null)                          {                              return false;                          }                            var result = await this.TryGetSingle<MessagesView>("/api/messages"' r => r.MessageId == c.MessageId);                          MessagesView auditMessage = result;                          if (!result)                          {                              return false;                          }                            body = await this.DownloadData(auditMessage.BodyUrl' HttpStatusCode.NoContent);                            return true;                      })                  .Run();
Magic Number,ServiceControl.Audit.AcceptanceTests.SagaAudit,When_a_message_that_is_handled_by_a_saga,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Audit.AcceptanceTests\SagaAudit\When_a_message_that_is_handled_by_a_saga.cs,Message_should_be_enriched_with_saga_state_changes,The following statement contains a magic number: var context = await Define<MyContext>()                  .WithEndpoint<SagasEndpoint>(b => b.When((bus' c) => bus.SendLocal(new InitiateSaga                  {                      Saga1Id = Guid.NewGuid()'                      Saga2Id = Guid.NewGuid()                  })))                  .Done(async c =>                  {                      if (c.Saga1Complete && c.Saga2Complete)                      {                          var result = await this.TryGetMany<MessagesView>("/api/messages");                          messages = result;                          if (result)                          {                              return messages.Count == 5;                          }                      }                        return false;                  })                  .Run();
Magic Number,ServiceControl.Audit.AcceptanceTests.SagaAudit,When_a_message_that_is_handled_by_a_saga,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Audit.AcceptanceTests\SagaAudit\When_a_message_that_is_handled_by_a_saga.cs,Message_should_be_enriched_with_saga_state_changes,The following statement contains a magic number: Assert.AreEqual(5' messages.Count);
Magic Number,ServiceControl.Audit.AcceptanceTests.TestSupport,ServiceControlComponentRunner,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Audit.AcceptanceTests\TestSupport\ServiceControlComponentRunner.cs,FindAvailablePort,The following statement contains a magic number: port < startPort + 1024
Magic Number,ServiceControl.Audit.AcceptanceTests.TestSupport,ServiceControlComponentRunner,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Audit.AcceptanceTests\TestSupport\ServiceControlComponentRunner.cs,InitializeServiceControl,The following statement contains a magic number: var instancePort = FindAvailablePort(33333);
Magic Number,ServiceControl.Audit.AcceptanceTests.TestSupport,ServiceControlComponentRunner,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Audit.AcceptanceTests\TestSupport\ServiceControlComponentRunner.cs,InitializeServiceControl,The following statement contains a magic number: var settings = new Settings(instanceName)              {                  Port = instancePort'                  DatabaseMaintenancePort = maintenancePort'                  DbPath = Path.Combine(Path.GetTempPath()' Path.GetRandomFileName())'                  TransportCustomizationType = transportToUse.TypeName'                  TransportConnectionString = transportToUse.ConnectionString'                  MaximumConcurrencyLevel = 2'                  HttpDefaultConnectionLimit = int.MaxValue'                  RunInMemory = true'                  ServiceControlQueueAddress = "SHOULDNOTBEUSED"'                  OnMessage = (id' headers' body' @continue) =>                  {                      var log = LogManager.GetLogger<ServiceControlComponentRunner>();                      headers.TryGetValue(Headers.MessageId' out var originalMessageId);                      log.Debug($"OnMessage for message '{id}'({originalMessageId ?? string.Empty}).");                        //Do not filter out CC' SA and HB messages as they can't be stamped                      if (headers.TryGetValue(Headers.EnclosedMessageTypes' out var messageTypes)                          && messageTypes.StartsWith("ServiceControl."))                      {                          return @continue();                      }                        //Do not filter out subscribe messages as they can't be stamped                      if (headers.TryGetValue(Headers.MessageIntent' out var intent)                          && intent == MessageIntentEnum.Subscribe.ToString())                      {                          return @continue();                      }                        var currentSession = context.TestRunId.ToString();                      if (!headers.TryGetValue("SC.SessionID"' out var session) || session != currentSession)                      {                          log.Debug($"Discarding message '{id}'({originalMessageId ?? string.Empty}) because it's session id is '{session}' instead of '{currentSession}'.");                          return Task.FromResult(0);                      }                        return @continue();                  }              };
