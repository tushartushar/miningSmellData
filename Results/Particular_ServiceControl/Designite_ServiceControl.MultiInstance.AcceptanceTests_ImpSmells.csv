Implementation smell,Namespace,Class,File,Method,Description
Long Method,ServiceControl.MultiInstance.AcceptanceTests.TestSupport,ServiceControlComponentRunner,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.MultiInstance.AcceptanceTests\TestSupport\ServiceControlComponentRunner.cs,InitializeServiceControl,The method has 107 lines of code.
Long Method,ServiceControl.MultiInstance.AcceptanceTests.TestSupport,ServiceControlComponentRunner,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.MultiInstance.AcceptanceTests\TestSupport\ServiceControlComponentRunner.cs,InitializeServiceControlAudit,The method has 109 lines of code.
Long Parameter List,ServiceControl.MultiInstance.AcceptanceTests.TestSupport,HttpExtensionsMultiInstance,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.MultiInstance.AcceptanceTests\TestSupport\HttpExtensionsMultiinstance.cs,Put,The method has 5 parameters. Parameters: providerMultiInstance' url' payload' requestHasFailed' instanceName
Long Parameter List,ServiceControl.MultiInstance.AcceptanceTests.TestSupport,HttpExtensionsMultiInstance,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.MultiInstance.AcceptanceTests\TestSupport\HttpExtensionsMultiinstance.cs,Post,The method has 5 parameters. Parameters: providerMultiInstance' url' payload' requestHasFailed' instanceName
Long Parameter List,ServiceControl.MultiInstance.AcceptanceTests.TestSupport,ServiceControlComponentBehavior,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.MultiInstance.AcceptanceTests\TestSupport\ServiceControlComponentBehavior.cs,ServiceControlComponentBehavior,The method has 5 parameters. Parameters: transportToUse' customEndpointConfiguration' customAuditEndpointConfiguration' customServiceControlSettings' customServiceControlAuditSettings
Long Parameter List,ServiceControl.MultiInstance.AcceptanceTests.TestSupport,ServiceControlComponentRunner,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.MultiInstance.AcceptanceTests\TestSupport\ServiceControlComponentRunner.cs,ServiceControlComponentRunner,The method has 5 parameters. Parameters: transportToUse' customEndpointConfiguration' customAuditEndpointConfiguration' customServiceControlSettings' customServiceControlAuditSettings
Long Identifier,ServiceControl.MultiInstance.AcceptanceTests,AcceptanceTest,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.MultiInstance.AcceptanceTests\AcceptanceTest.cs,RemoveOtherTransportAssemblies,The length of the parameter currentDirectoryOfSelectedTransport is 35.
Long Identifier,ServiceControl.MultiInstance.AcceptanceTests,AcceptanceTest,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.MultiInstance.AcceptanceTests\AcceptanceTest.cs,,The length of the parameter CustomAuditEndpointConfiguration is 32.
Long Identifier,ServiceControl.MultiInstance.AcceptanceTests,AcceptanceTest,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.MultiInstance.AcceptanceTests\AcceptanceTest.cs,,The length of the parameter CustomServiceControlAuditSettings is 33.
Long Identifier,ServiceControl.MultiInstance.AcceptanceTests.TestSupport.EndpointTemplates,DefaultServerWithAudit,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.MultiInstance.AcceptanceTests\TestSupport\EndpointTemplates\DefaultServerWithAudit.cs,GetConfiguration,The length of the parameter configurationBuilderCustomization is 33.
Long Identifier,ServiceControl.MultiInstance.AcceptanceTests.TestSupport.EndpointTemplates,DefaultServerWithoutAudit,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.MultiInstance.AcceptanceTests\TestSupport\EndpointTemplates\DefaultServerWithoutAudit.cs,GetConfiguration,The length of the parameter configurationBuilderCustomization is 33.
Long Identifier,ServiceControl.MultiInstance.AcceptanceTests.TestSupport,ServiceControlComponentBehavior,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.MultiInstance.AcceptanceTests\TestSupport\ServiceControlComponentBehavior.cs,ServiceControlComponentBehavior,The length of the parameter customAuditEndpointConfiguration is 32.
Long Identifier,ServiceControl.MultiInstance.AcceptanceTests.TestSupport,ServiceControlComponentBehavior,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.MultiInstance.AcceptanceTests\TestSupport\ServiceControlComponentBehavior.cs,ServiceControlComponentBehavior,The length of the parameter customServiceControlAuditSettings is 33.
Long Identifier,ServiceControl.MultiInstance.AcceptanceTests.TestSupport,ServiceControlComponentBehavior,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.MultiInstance.AcceptanceTests\TestSupport\ServiceControlComponentBehavior.cs,,The length of the parameter customAuditEndpointConfiguration is 32.
Long Identifier,ServiceControl.MultiInstance.AcceptanceTests.TestSupport,ServiceControlComponentBehavior,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.MultiInstance.AcceptanceTests\TestSupport\ServiceControlComponentBehavior.cs,,The length of the parameter customServiceControlAuditSettings is 33.
Long Identifier,ServiceControl.MultiInstance.AcceptanceTests.TestSupport,ServiceControlComponentRunner,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.MultiInstance.AcceptanceTests\TestSupport\ServiceControlComponentRunner.cs,ServiceControlComponentRunner,The length of the parameter customAuditEndpointConfiguration is 32.
Long Identifier,ServiceControl.MultiInstance.AcceptanceTests.TestSupport,ServiceControlComponentRunner,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.MultiInstance.AcceptanceTests\TestSupport\ServiceControlComponentRunner.cs,ServiceControlComponentRunner,The length of the parameter customServiceControlAuditSettings is 33.
Long Identifier,ServiceControl.MultiInstance.AcceptanceTests.TestSupport,ServiceControlComponentRunner,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.MultiInstance.AcceptanceTests\TestSupport\ServiceControlComponentRunner.cs,,The length of the parameter customAuditEndpointConfiguration is 32.
Long Identifier,ServiceControl.MultiInstance.AcceptanceTests.TestSupport,ServiceControlComponentRunner,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.MultiInstance.AcceptanceTests\TestSupport\ServiceControlComponentRunner.cs,,The length of the parameter customServiceControlAuditSettings is 33.
Long Identifier,ServiceControl.MultiInstance.AcceptanceTests.TestSupport.SelfVerification,EndpointNameEnforcementTests,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.MultiInstance.AcceptanceTests\TestSupport\SelfVerification\EndpointNameEnforcementTests.cs,,The length of the parameter endpointConfigurationBuilderType is 32.
Long Statement,ServiceControl.MultiInstance.AcceptanceTests,AcceptanceTest,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.MultiInstance.AcceptanceTests\AcceptanceTest.cs,Setup,The length of the statement  "            var logFile = Path.Combine(logfilesPath' $"{TestContext.CurrentContext.Test.ID}-{TestContext.CurrentContext.Test.Name}.txt"); " is 125.
Long Statement,ServiceControl.MultiInstance.AcceptanceTests,AcceptanceTest,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.MultiInstance.AcceptanceTests\AcceptanceTest.cs,Setup,The length of the statement  "                Assert.Inconclusive($"Not flagged with [RunOnAllTransports] therefore skipping this test with '{TransportIntegration.Name}'"); " is 126.
Long Statement,ServiceControl.MultiInstance.AcceptanceTests,AcceptanceTest,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.MultiInstance.AcceptanceTests\AcceptanceTest.cs,Setup,The length of the statement  "            serviceControlRunnerBehavior = new ServiceControlComponentBehavior(TransportIntegration' c => CustomEndpointConfiguration(c)' c => CustomAuditEndpointConfiguration(c)' s => CustomServiceControlSettings(s)' s => CustomServiceControlAuditSettings(s)); " is 249.
Long Statement,ServiceControl.MultiInstance.AcceptanceTests.Auditing,When_endpoint_known_to_audit_instance,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.MultiInstance.AcceptanceTests\Auditing\When_endpoint_known_to_audit_instance.cs,Should_appear_in_list_of_known_endpoints,The length of the statement  "            var knownEndpoint = knownEndpoints.FirstOrDefault(x => x.EndpointDetails.Name == Conventions.EndpointNamingConvention(typeof(Sender))); " is 135.
Long Statement,ServiceControl.MultiInstance.AcceptanceTests.Auditing,When_message_searched_by_conversationId,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.MultiInstance.AcceptanceTests\Auditing\When_message_searched_by_conversationId.cs,Should_be_found,The length of the statement  "                    var result = await this.TryGetMany<MessagesView>($"/api/conversations/{c.ConversationId}"' instanceName: ServiceControlInstanceName); " is 133.
Long Statement,ServiceControl.MultiInstance.AcceptanceTests.Auditing,When_message_searched_by_endpoint_by_messages,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.MultiInstance.AcceptanceTests\Auditing\When_message_searched_by_endpoint_by_messages.cs,Should_be_found,The length of the statement  "                    var result = await this.TryGetMany<MessagesView>($"/api/endpoints/{endpointName}/messages/"' instanceName: ServiceControlInstanceName); " is 135.
Long Statement,ServiceControl.MultiInstance.AcceptanceTests.Auditing,When_message_searched_by_endpoint_by_messages,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.MultiInstance.AcceptanceTests\Auditing\When_message_searched_by_endpoint_by_messages.cs,Should_be_found,The length of the statement  "            var expectedRemote1InstanceId = InstanceIdGenerator.FromApiUrl(SettingsPerInstance[ServiceControlAuditInstanceName].ApiUrl); " is 124.
Long Statement,ServiceControl.MultiInstance.AcceptanceTests.Auditing,When_message_searched_by_endpoint_by_messagetype,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.MultiInstance.AcceptanceTests\Auditing\When_message_searched_by_endpoint_by_messagetype.cs,Should_be_found,The length of the statement  "                    var result = await this.TryGetMany<MessagesView>($"/api/endpoints/{endpointName}/messages/search/" + searchString' instanceName: ServiceControlInstanceName); " is 157.
Long Statement,ServiceControl.MultiInstance.AcceptanceTests.Auditing,When_message_searched_by_endpoint_by_messagetype,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.MultiInstance.AcceptanceTests\Auditing\When_message_searched_by_endpoint_by_messagetype.cs,Should_be_found,The length of the statement  "            var expectedRemote1InstanceId = InstanceIdGenerator.FromApiUrl(SettingsPerInstance[ServiceControlAuditInstanceName].ApiUrl); " is 124.
Long Statement,ServiceControl.MultiInstance.AcceptanceTests.Auditing,When_message_searched_by_messageid,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.MultiInstance.AcceptanceTests\Auditing\When_message_searched_by_messageid.cs,Should_be_found,The length of the statement  "                .Done(async c => c.MessageId != null && await this.TryGetMany<MessagesView>("/api/messages/search/" + c.MessageId' instanceName: ServiceControlInstanceName)) " is 157.
Long Statement,ServiceControl.MultiInstance.AcceptanceTests.Auditing,When_message_searched_by_messages,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.MultiInstance.AcceptanceTests\Auditing\When_message_searched_by_messages.cs,Should_be_found,The length of the statement  "            var expectedAuditInstanceId = InstanceIdGenerator.FromApiUrl(SettingsPerInstance[ServiceControlAuditInstanceName].ApiUrl); " is 122.
Long Statement,ServiceControl.MultiInstance.AcceptanceTests.Auditing,When_message_searched_by_messagetype,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.MultiInstance.AcceptanceTests\Auditing\When_message_searched_by_messagetype.cs,Should_be_found,The length of the statement  "                    var result = await this.TryGetMany<MessagesView>("/api/messages/search/" + searchString' instanceName: ServiceControlInstanceName); " is 131.
Long Statement,ServiceControl.MultiInstance.AcceptanceTests.Auditing,When_message_searched_by_messagetype,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.MultiInstance.AcceptanceTests\Auditing\When_message_searched_by_messagetype.cs,Should_be_found,The length of the statement  "            var expectedAuditInstanceId = InstanceIdGenerator.FromApiUrl(SettingsPerInstance[ServiceControlAuditInstanceName].ApiUrl); " is 122.
Long Statement,ServiceControl.MultiInstance.AcceptanceTests.Auditing,When_requesting_a_message_body,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.MultiInstance.AcceptanceTests\Auditing\When_requesting_a_message_body.cs,Should_be_forwarded_to_audit_instance,The length of the statement  "                        var result = await this.TryGetMany<MessagesView>("/api/messages"' msg => msg.MessageId == c.AuditInstanceMessageId' ServiceControlInstanceName); " is 144.
Long Statement,ServiceControl.MultiInstance.AcceptanceTests.Infrastructure,When_remote_instance_is_not_reachable,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.MultiInstance.AcceptanceTests\Infrastructure\When_remote_instance_is_not_reachable.cs,Should_not_fail,The length of the statement  "                .Done(async c => await this.TryGetMany<MessagesView>("/api/messages/search/" + searchString' instanceName: ServiceControlInstanceName)) " is 135.
Long Statement,ServiceControl.MultiInstance.AcceptanceTests.Monitoring,When_endpoint_detected_via_audits,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.MultiInstance.AcceptanceTests\Monitoring\When_endpoint_detected_via_audits.cs,Should_be_configurable,The length of the statement  "                        var resultAfterPath = await this.TryGetMany<EndpointsView>("/api/endpoints/"' instanceName: ServiceControlInstanceName); " is 120.
Long Statement,ServiceControl.MultiInstance.AcceptanceTests.Recoverability,When_a_message_retry_audit_is_sent_to_audit_instance,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.MultiInstance.AcceptanceTests\Recoverability\When_a_message_retry_audit_is_sent_to_audit_instance.cs,Should_mark_as_resolved,The length of the statement  "                        await IssueRetry(c' () => this.Post<object>($"/api/errors/{failure.UniqueMessageId}/retry"' null' null' ServiceControlInstanceName)); " is 133.
Long Statement,ServiceControl.MultiInstance.AcceptanceTests.Recoverability,When_issuing_retry_by_specifying_instance_id,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.MultiInstance.AcceptanceTests\Recoverability\When_issuing_retry_by_specifying_instance_id.cs,Should_be_work,The length of the statement  "            // instead of setting up a multiple crazy instances we just use the current instance and rely on it forwarding the instance call to itself " is 138.
Long Statement,ServiceControl.MultiInstance.AcceptanceTests.Recoverability,When_issuing_retry_by_specifying_instance_id,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.MultiInstance.AcceptanceTests\Recoverability\When_issuing_retry_by_specifying_instance_id.cs,Should_be_work,The length of the statement  "                            await this.Post<object>($"/api/errors/{failure.UniqueMessageId}/retry?instance_id={InstanceIdGenerator.FromApiUrl(addressOfItself)}"' null' null' ServiceControlInstanceName); " is 174.
Long Statement,ServiceControl.MultiInstance.AcceptanceTests.TestSupport,ServiceControlComponentBehavior,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.MultiInstance.AcceptanceTests\TestSupport\ServiceControlComponentBehavior.cs,CreateRunner,The length of the statement  "            runner = new ServiceControlComponentRunner(transportIntegration' customEndpointConfiguration' customAuditEndpointConfiguration' customServiceControlSettings' customServiceControlAuditSettings); " is 193.
Long Statement,ServiceControl.MultiInstance.AcceptanceTests.TestSupport,ServiceControlComponentRunner,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.MultiInstance.AcceptanceTests\TestSupport\ServiceControlComponentRunner.cs,InitializeServiceControl,The length of the statement  "            typeof(ScenarioContext).GetProperty("CurrentEndpoint"' BindingFlags.Static | BindingFlags.NonPublic)?.SetValue(context' instanceName); " is 134.
Long Statement,ServiceControl.MultiInstance.AcceptanceTests.TestSupport,ServiceControlComponentRunner,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.MultiInstance.AcceptanceTests\TestSupport\ServiceControlComponentRunner.cs,InitializeServiceControl,The length of the statement  "                        log.Debug($"Discarding message '{id}'({originalMessageId ?? string.Empty}) because it's session id is '{session}' instead of '{currentSession}'."); " is 147.
Long Statement,ServiceControl.MultiInstance.AcceptanceTests.TestSupport,ServiceControlComponentRunner,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.MultiInstance.AcceptanceTests\TestSupport\ServiceControlComponentRunner.cs,InitializeServiceControl,The length of the statement  "            scanner.ExcludeAssemblies(Path.GetFileName(typeof(ServiceControl.Audit.Infrastructure.Settings.Settings).Assembly.CodeBase)); " is 125.
Long Statement,ServiceControl.MultiInstance.AcceptanceTests.TestSupport,ServiceControlComponentRunner,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.MultiInstance.AcceptanceTests\TestSupport\ServiceControlComponentRunner.cs,InitializeServiceControl,The length of the statement  "            // This is a hack to ensure ServiceControl picks the correct type for the messages that come from plugins otherwise we pick the type from the plugins assembly and that is not the type we want' we need to pick the type from ServiceControl assembly. " is 247.
Long Statement,ServiceControl.MultiInstance.AcceptanceTests.TestSupport,ServiceControlComponentRunner,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.MultiInstance.AcceptanceTests\TestSupport\ServiceControlComponentRunner.cs,InitializeServiceControlAudit,The length of the statement  "            typeof(ScenarioContext).GetProperty("CurrentEndpoint"' BindingFlags.Static | BindingFlags.NonPublic)?.SetValue(context' instanceName); " is 134.
Long Statement,ServiceControl.MultiInstance.AcceptanceTests.TestSupport,ServiceControlComponentRunner,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.MultiInstance.AcceptanceTests\TestSupport\ServiceControlComponentRunner.cs,InitializeServiceControlAudit,The length of the statement  "                        log.Debug($"Discarding message '{id}'({originalMessageId ?? string.Empty}) because it's session id is '{session}' instead of '{currentSession}'."); " is 147.
Long Statement,ServiceControl.MultiInstance.AcceptanceTests.TestSupport,ServiceControlComponentRunner,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.MultiInstance.AcceptanceTests\TestSupport\ServiceControlComponentRunner.cs,InitializeServiceControlAudit,The length of the statement  "            // This is a hack to ensure ServiceControl picks the correct type for the messages that come from plugins otherwise we pick the type from the plugins assembly and that is not the type we want' we need to pick the type from ServiceControl assembly. " is 247.
Long Statement,ServiceControl.MultiInstance.AcceptanceTests.TestSupport,ServiceControlComponentRunner,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.MultiInstance.AcceptanceTests\TestSupport\ServiceControlComponentRunner.cs,InitializeServiceControlAudit,The length of the statement  "                var loggingSettings = new ServiceControl.Audit.Infrastructure.Settings.LoggingSettings(settings.ServiceName' logPath: logPath); " is 127.
Magic Number,ServiceControl.MultiInstance.AcceptanceTests,AcceptanceTest,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.MultiInstance.AcceptanceTests\AcceptanceTest.cs,AcceptanceTest,The following statement contains a magic number: ServicePointManager.SetTcpKeepAlive(true' 5000' 1000);
Magic Number,ServiceControl.MultiInstance.AcceptanceTests,AcceptanceTest,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.MultiInstance.AcceptanceTests\AcceptanceTest.cs,AcceptanceTest,The following statement contains a magic number: ServicePointManager.SetTcpKeepAlive(true' 5000' 1000);
Magic Number,ServiceControl.MultiInstance.AcceptanceTests.Auditing,When_message_searched_by_conversationId,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.MultiInstance.AcceptanceTests\Auditing\When_message_searched_by_conversationId.cs,Should_be_found,The following statement contains a magic number: await Define<MyContext>()                  .WithEndpoint<Sender>(b => b.When((bus' c) => bus.SendLocal(new TriggeringMessage())))                  .WithEndpoint<ReceiverRemote>()                  .Done(async c =>                  {                      var result = await this.TryGetMany<MessagesView>($"/api/conversations/{c.ConversationId}"' instanceName: ServiceControlInstanceName);                      List<MessagesView> response = result;                      return c.ConversationId != null && result && response.Count == 2;                  })                  .Run();
Magic Number,ServiceControl.MultiInstance.AcceptanceTests.Auditing,When_message_searched_by_messages,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.MultiInstance.AcceptanceTests\Auditing\When_message_searched_by_messages.cs,Should_be_found,The following statement contains a magic number: var context = await Define<MyContext>()                  .WithEndpoint<Sender>(b => b.When(async (bus' c) =>                  {                      await bus.Send(new MyMessage());                      await bus.SendLocal(new MyMessage());                  }))                  .WithEndpoint<Receiver>()                  .Done(async c =>                  {                      var result = await this.TryGetMany<MessagesView>("/api/messages/"' instanceName: ServiceControlInstanceName);                      response = result;                      return result && response.Count == 2;                  })                  .Run();
Magic Number,ServiceControl.MultiInstance.AcceptanceTests.Auditing,When_message_searched_by_messagetype,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.MultiInstance.AcceptanceTests\Auditing\When_message_searched_by_messagetype.cs,Should_be_found,The following statement contains a magic number: var context = await Define<MyContext>()                  .WithEndpoint<Sender>(b => b.When(async (bus' c) =>                  {                      await bus.Send(new MyMessage());                      await bus.SendLocal(new MyMessage());                  }))                  .WithEndpoint<Receiver>()                  .Done(async c =>                  {                      var result = await this.TryGetMany<MessagesView>("/api/messages/search/" + searchString' instanceName: ServiceControlInstanceName);                      response = result;                      return result && response.Count == 2;                  })                  .Run();
Magic Number,ServiceControl.MultiInstance.AcceptanceTests.Auditing,When_requesting_a_message_body,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.MultiInstance.AcceptanceTests\Auditing\When_requesting_a_message_body.cs,Should_be_forwarded_to_audit_instance,The following statement contains a magic number: var context = await Define<MyContext>()                  .WithEndpoint<RemoteEndpoint>(b => b.When(async (bus' ctx) =>                  {                      ctx.AuditInstanceId = InstanceIdGenerator.FromApiUrl(addressOfAuditInstance);                      await bus.SendLocal(new MyMessage());                  }))                  .Done(async c =>                  {                      if (string.IsNullOrWhiteSpace(c.AuditInstanceMessageId))                      {                          return false;                      }                        if (!c.MessageAudited)                      {                          var result = await this.TryGetMany<MessagesView>("/api/messages"' msg => msg.MessageId == c.AuditInstanceMessageId' ServiceControlInstanceName);                          List<MessagesView> messages = result;                          if (!result)                          {                              return false;                          }                            c.MessageAudited = true;                          capturedMessage = messages.Single(msg => msg.MessageId == c.AuditInstanceMessageId);                      }                        response = await this.GetRaw($"/api/{capturedMessage.BodyUrl}"' ServiceControlInstanceName);                      Console.WriteLine($"GetRaw for {c.AuditInstanceMessageId} resulted in {response.StatusCode}");                      return response.StatusCode == HttpStatusCode.OK;                  })                  .Run(TimeSpan.FromMinutes(2));
Magic Number,ServiceControl.MultiInstance.AcceptanceTests.Recoverability,When_a_message_retry_audit_is_sent_to_audit_instance,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.MultiInstance.AcceptanceTests\Recoverability\When_a_message_retry_audit_is_sent_to_audit_instance.cs,Should_mark_as_resolved,The following statement contains a magic number: await Define<MyContext>()                  .WithEndpoint<Failing>(b => b.When(session => session.SendLocal(new MyMessage())).DoNotFailOnErrorMessages())                  .Done(async c =>                  {                      var result = await GetFailedMessage(c);                      failure = result;                      if (!result)                      {                          return false;                      }                        if (failure.Status == FailedMessageStatus.Unresolved)                      {                          await IssueRetry(c' () => this.Post<object>($"/api/errors/{failure.UniqueMessageId}/retry"' null' null' ServiceControlInstanceName));                          return false;                      }                        return failure.Status == FailedMessageStatus.Resolved;                  })                  .Run(TimeSpan.FromMinutes(2));
Magic Number,ServiceControl.MultiInstance.AcceptanceTests.Recoverability,When_issuing_retry_by_specifying_instance_id,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.MultiInstance.AcceptanceTests\Recoverability\When_issuing_retry_by_specifying_instance_id.cs,Should_be_work,The following statement contains a magic number: await Define<MyContext>()                  .WithEndpoint<FailureEndpoint>(b => b.When(bus => bus.SendLocal(new MyMessage())).DoNotFailOnErrorMessages())                  .Done(async c =>                  {                      if (!c.RetryIssued)                      {                          var result = await GetFailedMessage(c' ServiceControlInstanceName' FailedMessageStatus.Unresolved);                          failure = result;                          if (result)                          {                              c.RetryIssued = true;                              await this.Post<object>($"/api/errors/{failure.UniqueMessageId}/retry?instance_id={InstanceIdGenerator.FromApiUrl(addressOfItself)}"' null' null' ServiceControlInstanceName);                          }                            return false;                      }                        return await GetFailedMessage(c' ServiceControlInstanceName' FailedMessageStatus.Resolved);                  })                  .Run(TimeSpan.FromMinutes(2));
Magic Number,ServiceControl.MultiInstance.AcceptanceTests.TestSupport,ServiceControlComponentRunner,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.MultiInstance.AcceptanceTests\TestSupport\ServiceControlComponentRunner.cs,Initialize,The following statement contains a magic number: var startPort = 33333;
Magic Number,ServiceControl.MultiInstance.AcceptanceTests.TestSupport,ServiceControlComponentRunner,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.MultiInstance.AcceptanceTests\TestSupport\ServiceControlComponentRunner.cs,FindAvailablePort,The following statement contains a magic number: port < startPort + 1024
Magic Number,ServiceControl.MultiInstance.AcceptanceTests.TestSupport,ServiceControlComponentRunner,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.MultiInstance.AcceptanceTests\TestSupport\ServiceControlComponentRunner.cs,InitializeServiceControl,The following statement contains a magic number: var settings = new Settings(instanceName)              {                  Port = instancePort'                  DatabaseMaintenancePort = maintenancePort'                  DbPath = Path.Combine(Path.GetTempPath()' Path.GetRandomFileName())'                  ForwardErrorMessages = false'                  TransportCustomizationType = transportToUse.TypeName'                  TransportConnectionString = transportToUse.ConnectionString'                  ProcessRetryBatchesFrequency = TimeSpan.FromSeconds(2)'                  TimeToRestartErrorIngestionAfterFailure = TimeSpan.FromSeconds(2)'                  MaximumConcurrencyLevel = 2'                  HttpDefaultConnectionLimit = int.MaxValue'                  RunInMemory = true'                  RemoteInstances = new[]                  {                      new RemoteInstanceSetting                      {                          ApiUri = $"http://localhost:{instancePort - 2}/api" // evil assumption for now                      }                  }'                  OnMessage = (id' headers' body' @continue) =>                  {                      var log = LogManager.GetLogger<ServiceControlComponentRunner>();                      headers.TryGetValue(Headers.MessageId' out var originalMessageId);                      log.Debug($"OnMessage for message '{id}'({originalMessageId ?? string.Empty}).");                        //Do not filter out CC' SA and HB messages as they can't be stamped                      if (headers.TryGetValue(Headers.EnclosedMessageTypes' out var messageTypes)                          && messageTypes.StartsWith("ServiceControl."))                      {                          return @continue();                      }                        //Do not filter out subscribe messages as they can't be stamped                      if (headers.TryGetValue(Headers.MessageIntent' out var intent)                          && intent == MessageIntentEnum.Subscribe.ToString())                      {                          return @continue();                      }                        var currentSession = context.TestRunId.ToString();                      if (!headers.TryGetValue("SC.SessionID"' out var session) || session != currentSession)                      {                          log.Debug($"Discarding message '{id}'({originalMessageId ?? string.Empty}) because it's session id is '{session}' instead of '{currentSession}'.");                          return Task.FromResult(0);                      }                        return @continue();                  }              };
Magic Number,ServiceControl.MultiInstance.AcceptanceTests.TestSupport,ServiceControlComponentRunner,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.MultiInstance.AcceptanceTests\TestSupport\ServiceControlComponentRunner.cs,InitializeServiceControl,The following statement contains a magic number: var settings = new Settings(instanceName)              {                  Port = instancePort'                  DatabaseMaintenancePort = maintenancePort'                  DbPath = Path.Combine(Path.GetTempPath()' Path.GetRandomFileName())'                  ForwardErrorMessages = false'                  TransportCustomizationType = transportToUse.TypeName'                  TransportConnectionString = transportToUse.ConnectionString'                  ProcessRetryBatchesFrequency = TimeSpan.FromSeconds(2)'                  TimeToRestartErrorIngestionAfterFailure = TimeSpan.FromSeconds(2)'                  MaximumConcurrencyLevel = 2'                  HttpDefaultConnectionLimit = int.MaxValue'                  RunInMemory = true'                  RemoteInstances = new[]                  {                      new RemoteInstanceSetting                      {                          ApiUri = $"http://localhost:{instancePort - 2}/api" // evil assumption for now                      }                  }'                  OnMessage = (id' headers' body' @continue) =>                  {                      var log = LogManager.GetLogger<ServiceControlComponentRunner>();                      headers.TryGetValue(Headers.MessageId' out var originalMessageId);                      log.Debug($"OnMessage for message '{id}'({originalMessageId ?? string.Empty}).");                        //Do not filter out CC' SA and HB messages as they can't be stamped                      if (headers.TryGetValue(Headers.EnclosedMessageTypes' out var messageTypes)                          && messageTypes.StartsWith("ServiceControl."))                      {                          return @continue();                      }                        //Do not filter out subscribe messages as they can't be stamped                      if (headers.TryGetValue(Headers.MessageIntent' out var intent)                          && intent == MessageIntentEnum.Subscribe.ToString())                      {                          return @continue();                      }                        var currentSession = context.TestRunId.ToString();                      if (!headers.TryGetValue("SC.SessionID"' out var session) || session != currentSession)                      {                          log.Debug($"Discarding message '{id}'({originalMessageId ?? string.Empty}) because it's session id is '{session}' instead of '{currentSession}'.");                          return Task.FromResult(0);                      }                        return @continue();                  }              };
Magic Number,ServiceControl.MultiInstance.AcceptanceTests.TestSupport,ServiceControlComponentRunner,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.MultiInstance.AcceptanceTests\TestSupport\ServiceControlComponentRunner.cs,InitializeServiceControl,The following statement contains a magic number: var settings = new Settings(instanceName)              {                  Port = instancePort'                  DatabaseMaintenancePort = maintenancePort'                  DbPath = Path.Combine(Path.GetTempPath()' Path.GetRandomFileName())'                  ForwardErrorMessages = false'                  TransportCustomizationType = transportToUse.TypeName'                  TransportConnectionString = transportToUse.ConnectionString'                  ProcessRetryBatchesFrequency = TimeSpan.FromSeconds(2)'                  TimeToRestartErrorIngestionAfterFailure = TimeSpan.FromSeconds(2)'                  MaximumConcurrencyLevel = 2'                  HttpDefaultConnectionLimit = int.MaxValue'                  RunInMemory = true'                  RemoteInstances = new[]                  {                      new RemoteInstanceSetting                      {                          ApiUri = $"http://localhost:{instancePort - 2}/api" // evil assumption for now                      }                  }'                  OnMessage = (id' headers' body' @continue) =>                  {                      var log = LogManager.GetLogger<ServiceControlComponentRunner>();                      headers.TryGetValue(Headers.MessageId' out var originalMessageId);                      log.Debug($"OnMessage for message '{id}'({originalMessageId ?? string.Empty}).");                        //Do not filter out CC' SA and HB messages as they can't be stamped                      if (headers.TryGetValue(Headers.EnclosedMessageTypes' out var messageTypes)                          && messageTypes.StartsWith("ServiceControl."))                      {                          return @continue();                      }                        //Do not filter out subscribe messages as they can't be stamped                      if (headers.TryGetValue(Headers.MessageIntent' out var intent)                          && intent == MessageIntentEnum.Subscribe.ToString())                      {                          return @continue();                      }                        var currentSession = context.TestRunId.ToString();                      if (!headers.TryGetValue("SC.SessionID"' out var session) || session != currentSession)                      {                          log.Debug($"Discarding message '{id}'({originalMessageId ?? string.Empty}) because it's session id is '{session}' instead of '{currentSession}'.");                          return Task.FromResult(0);                      }                        return @continue();                  }              };
Magic Number,ServiceControl.MultiInstance.AcceptanceTests.TestSupport,ServiceControlComponentRunner,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.MultiInstance.AcceptanceTests\TestSupport\ServiceControlComponentRunner.cs,InitializeServiceControl,The following statement contains a magic number: var settings = new Settings(instanceName)              {                  Port = instancePort'                  DatabaseMaintenancePort = maintenancePort'                  DbPath = Path.Combine(Path.GetTempPath()' Path.GetRandomFileName())'                  ForwardErrorMessages = false'                  TransportCustomizationType = transportToUse.TypeName'                  TransportConnectionString = transportToUse.ConnectionString'                  ProcessRetryBatchesFrequency = TimeSpan.FromSeconds(2)'                  TimeToRestartErrorIngestionAfterFailure = TimeSpan.FromSeconds(2)'                  MaximumConcurrencyLevel = 2'                  HttpDefaultConnectionLimit = int.MaxValue'                  RunInMemory = true'                  RemoteInstances = new[]                  {                      new RemoteInstanceSetting                      {                          ApiUri = $"http://localhost:{instancePort - 2}/api" // evil assumption for now                      }                  }'                  OnMessage = (id' headers' body' @continue) =>                  {                      var log = LogManager.GetLogger<ServiceControlComponentRunner>();                      headers.TryGetValue(Headers.MessageId' out var originalMessageId);                      log.Debug($"OnMessage for message '{id}'({originalMessageId ?? string.Empty}).");                        //Do not filter out CC' SA and HB messages as they can't be stamped                      if (headers.TryGetValue(Headers.EnclosedMessageTypes' out var messageTypes)                          && messageTypes.StartsWith("ServiceControl."))                      {                          return @continue();                      }                        //Do not filter out subscribe messages as they can't be stamped                      if (headers.TryGetValue(Headers.MessageIntent' out var intent)                          && intent == MessageIntentEnum.Subscribe.ToString())                      {                          return @continue();                      }                        var currentSession = context.TestRunId.ToString();                      if (!headers.TryGetValue("SC.SessionID"' out var session) || session != currentSession)                      {                          log.Debug($"Discarding message '{id}'({originalMessageId ?? string.Empty}) because it's session id is '{session}' instead of '{currentSession}'.");                          return Task.FromResult(0);                      }                        return @continue();                  }              };
Magic Number,ServiceControl.MultiInstance.AcceptanceTests.TestSupport,ServiceControlComponentRunner,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.MultiInstance.AcceptanceTests\TestSupport\ServiceControlComponentRunner.cs,InitializeServiceControlAudit,The following statement contains a magic number: var settings = new ServiceControl.Audit.Infrastructure.Settings.Settings(instanceName)              {                  Port = instancePort'                  DatabaseMaintenancePort = maintenancePort'                  DbPath = Path.Combine(Path.GetTempPath()' Path.GetRandomFileName())'                  TransportCustomizationType = transportToUse.TypeName'                  TransportConnectionString = transportToUse.ConnectionString'                  MaximumConcurrencyLevel = 2'                  HttpDefaultConnectionLimit = int.MaxValue'                  RunInMemory = true'                  ServiceControlQueueAddress = Settings.DEFAULT_SERVICE_NAME'                  OnMessage = (id' headers' body' @continue) =>                  {                      var log = LogManager.GetLogger<ServiceControlComponentRunner>();                      headers.TryGetValue(Headers.MessageId' out var originalMessageId);                      log.Debug($"OnMessage for message '{id}'({originalMessageId ?? string.Empty}).");                        //Do not filter out CC' SA and HB messages as they can't be stamped                      if (headers.TryGetValue(Headers.EnclosedMessageTypes' out var messageTypes)                          && messageTypes.StartsWith("ServiceControl."))                      {                          return @continue();                      }                        //Do not filter out subscribe messages as they can't be stamped                      if (headers.TryGetValue(Headers.MessageIntent' out var intent)                          && intent == MessageIntentEnum.Subscribe.ToString())                      {                          return @continue();                      }                        var currentSession = context.TestRunId.ToString();                      if (!headers.TryGetValue("SC.SessionID"' out var session) || session != currentSession)                      {                          log.Debug($"Discarding message '{id}'({originalMessageId ?? string.Empty}) because it's session id is '{session}' instead of '{currentSession}'.");                          return Task.FromResult(0);                      }                        return @continue();                  }              };
