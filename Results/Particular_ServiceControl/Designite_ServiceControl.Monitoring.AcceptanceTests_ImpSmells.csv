Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,ServiceControl.Monitoring.AcceptanceTests.Tests,PerformanceTests,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring.AcceptanceTests\Tests\PerformanceTests.cs,GetMonitoredEndpointsQueryTest,The method has 6 parameters. Parameters: numberOfEndpoints' numberOfInstances' sendReportEvery' numberOfEntriesInReport' queryEveryInMilliseconds' numberOfQueries
Long Parameter List,ServiceControl.Monitoring.AcceptanceTests.Tests,PerformanceTests,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring.AcceptanceTests\Tests\PerformanceTests.cs,GetMonitoredSingleEndpointQueryTest,The method has 6 parameters. Parameters: numberOfInstances' numberOfMessageTypes' sendReportEvery' numberOfEntriesInReport' queryEveryInMilliseconds' numberOfQueries
Long Parameter List,ServiceControl.Monitoring.AcceptanceTests.Tests,PerformanceTests,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring.AcceptanceTests\Tests\PerformanceTests.cs,BuildReporters,The method has 5 parameters. Parameters: sendReportEvery' numberOfEntriesInReport' instances' source' store
Long Parameter List,ServiceControl.Monitoring.AcceptanceTests.Tests,PerformanceTests,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring.AcceptanceTests\Tests\PerformanceTests.cs,StartReporter,The method has 5 parameters. Parameters: sendReportEvery' numberOfEntriesInReport' source' instance' store
Long Identifier,ServiceControl.Monitoring.AcceptanceTests,AcceptanceTest,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring.AcceptanceTests\AcceptanceTest.cs,RemoveOtherTransportAssemblies,The length of the parameter currentDirectoryOfSelectedTransport is 35.
Long Identifier,ServiceControl.Monitoring.AcceptanceTests.TestSupport.EndpointTemplates,DefaultServer,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring.AcceptanceTests\TestSupport\EndpointTemplates\DefaultServer.cs,GetConfiguration,The length of the parameter configurationBuilderCustomization is 33.
Long Identifier,ServiceControl.Monitoring.AcceptanceTests.TestSupport.SelfVerification,EndpointNameEnforcementTests,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring.AcceptanceTests\TestSupport\SelfVerification\EndpointNameEnforcementTests.cs,,The length of the parameter endpointConfigurationBuilderType is 32.
Long Statement,ServiceControl.Monitoring.AcceptanceTests,AcceptanceTest,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring.AcceptanceTests\AcceptanceTest.cs,Setup,The length of the statement  "            var logFile = Path.Combine(logfilesPath' $"{TestContext.CurrentContext.Test.ID}-{TestContext.CurrentContext.Test.Name}.txt"); " is 125.
Long Statement,ServiceControl.Monitoring.AcceptanceTests,AcceptanceTest,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring.AcceptanceTests\AcceptanceTest.cs,Setup,The length of the statement  "                Assert.Inconclusive($"Not flagged with [RunOnAllTransports] therefore skipping this test with '{TransportIntegration.Name}'"); " is 126.
Long Statement,ServiceControl.Monitoring.AcceptanceTests,AcceptanceTest,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring.AcceptanceTests\AcceptanceTest.cs,Setup,The length of the statement  "            serviceControlRunnerBehavior = new ServiceControlComponentBehavior(TransportIntegration' s => SetSettings(s)' s => CustomConfiguration(s)); " is 139.
Long Statement,ServiceControl.Monitoring.AcceptanceTests.TestSupport,ServiceControlComponentRunner,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring.AcceptanceTests\TestSupport\ServiceControlComponentRunner.cs,InitializeServiceControl,The length of the statement  "                        log.Debug($"Discarding message '{id}'({originalMessageId ?? string.Empty}) because it's session id is '{session}' instead of '{currentSession}'."); " is 147.
Long Statement,ServiceControl.Monitoring.AcceptanceTests.TestSupport,ServiceControlComponentRunner,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring.AcceptanceTests\TestSupport\ServiceControlComponentRunner.cs,InitializeServiceControl,The length of the statement  "            // This is a hack to ensure ServiceControl picks the correct type for the messages that come from plugins otherwise we pick the type from the plugins assembly and that is not the type we want' we need to pick the type from ServiceControl assembly. " is 247.
Long Statement,ServiceControl.Monitoring.AcceptanceTests.TestSupport,ServiceControlComponentRunner,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring.AcceptanceTests\TestSupport\ServiceControlComponentRunner.cs,InitializeServiceControl,The length of the statement  "                bootstrapper = new Bootstrapper(configuration' loggingSettings' builder => { builder.RegisterType<FailedAuditsController>().FindConstructorsWith(t => t.GetTypeInfo().DeclaredConstructors.ToArray()); }); */ " is 205.
Long Statement,ServiceControl.Monitoring.AcceptanceTests.Tests,PerformanceTests,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring.AcceptanceTests\Tests\PerformanceTests.cs,Setup,The length of the statement  "            queueLengthProvider.Initialize(string.Empty' (entryDtos' dto) => queueLengthStore.Store(entryDtos.Select(e => ToEntry(e)).ToArray()' ToEndpointInputQueue(dto))); " is 161.
Long Statement,ServiceControl.Monitoring.AcceptanceTests.Tests,PerformanceTests,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring.AcceptanceTests\Tests\PerformanceTests.cs,GetMonitoredEndpointsQueryTest,The length of the statement  "                    BuildReporters(sendReportEvery' numberOfEntriesInReport' instances' source' (e' i) => criticalTimeStore.Store(e' i' EndpointMessageType.Unknown(i.EndpointName)))' " is 162.
Long Statement,ServiceControl.Monitoring.AcceptanceTests.Tests,PerformanceTests,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring.AcceptanceTests\Tests\PerformanceTests.cs,GetMonitoredEndpointsQueryTest,The length of the statement  "                    BuildReporters(sendReportEvery' numberOfEntriesInReport' instances' source' (e' i) => processingTimeStore.Store(e' i' EndpointMessageType.Unknown(i.EndpointName)))' " is 164.
Long Statement,ServiceControl.Monitoring.AcceptanceTests.Tests,PerformanceTests,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring.AcceptanceTests\Tests\PerformanceTests.cs,GetMonitoredEndpointsQueryTest,The length of the statement  "                    BuildReporters(sendReportEvery' numberOfEntriesInReport' instances' source' (e' i) => retriesStore.Store(e' i' EndpointMessageType.Unknown(i.EndpointName))) " is 156.
Long Statement,ServiceControl.Monitoring.AcceptanceTests.Tests,PerformanceTests,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring.AcceptanceTests\Tests\PerformanceTests.cs,GetMonitoredSingleEndpointQueryTest,The length of the statement  "                    BuildReporters(sendReportEvery' numberOfEntriesInReport' instances' source' (e' i) => criticalTimeStore.Store(e' i' getter()))' " is 127.
Long Statement,ServiceControl.Monitoring.AcceptanceTests.Tests,PerformanceTests,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring.AcceptanceTests\Tests\PerformanceTests.cs,GetMonitoredSingleEndpointQueryTest,The length of the statement  "                    BuildReporters(sendReportEvery' numberOfEntriesInReport' instances' source' (e' i) => processingTimeStore.Store(e' i' getter()))' " is 129.
Long Statement,ServiceControl.Monitoring.AcceptanceTests.Tests,PerformanceTests,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring.AcceptanceTests\Tests\PerformanceTests.cs,GetMonitoredSingleEndpointQueryTest,The length of the statement  "                    BuildReporters(sendReportEvery' numberOfEntriesInReport' instances' source' (e' i) => retriesStore.Store(e' i' getter())) " is 121.
Long Statement,ServiceControl.Monitoring.AcceptanceTests.Tests,PerformanceTests,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring.AcceptanceTests\Tests\PerformanceTests.cs,Report,The length of the statement  "            histogram.OutputPercentileDistribution(Console.Out' outputValueUnitScalingRatio: OutputScalingFactor.TimeStampToMilliseconds' percentileTicksPerHalfDistance: 1); " is 161.
Long Statement,ServiceControl.Monitoring.AcceptanceTests.Tests,PerformanceTests,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring.AcceptanceTests\Tests\PerformanceTests.cs,Report,The length of the statement  "                var actualMean = TimeSpan.FromMilliseconds(histogram.GetValueAtPercentile(50) / OutputScalingFactor.TimeStampToMilliseconds); " is 125.
Long Statement,ServiceControl.Monitoring.AcceptanceTests.Tests,PerformanceTests,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring.AcceptanceTests\Tests\PerformanceTests.cs,Report,The length of the statement  "                Assert.LessOrEqual(actualMean' max' $"The actual mean for {name} was '{actualMean}' and was bigger than maximum allowed mean '{max}'."); " is 136.
Long Statement,ServiceControl.Monitoring.AcceptanceTests.Tests,When_querying_queue_length_data,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring.AcceptanceTests\Tests\When_querying_queue_length_data.cs,Should_report_via_http,The length of the statement  "            var endpointName = NServiceBus.AcceptanceTesting.Customization.Conventions.EndpointNamingConvention(typeof(SendingEndpoint)); " is 125.
Long Statement,ServiceControl.Monitoring.AcceptanceTests.Tests,When_querying_queue_length_data,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring.AcceptanceTests\Tests\When_querying_queue_length_data.cs,Should_report_via_http,The length of the statement  "                             .SendMetricDataToServiceControl(global::ServiceControl.Monitoring.Settings.DEFAULT_ENDPOINT_NAME' TimeSpan.FromSeconds(1)); " is 123.
Long Statement,ServiceControl.Monitoring.AcceptanceTests.Tests,When_querying_queue_length_data,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring.AcceptanceTests\Tests\When_querying_queue_length_data.cs,Should_report_via_http,The length of the statement  "                     instance2 = monitoredEndpointDetails.Instances.SingleOrDefault(instance => instance.Id == metricsInstanceId.ToString("N")); " is 123.
Magic Number,ServiceControl.Monitoring.AcceptanceTests,AcceptanceTest,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring.AcceptanceTests\AcceptanceTest.cs,AcceptanceTest,The following statement contains a magic number: ServicePointManager.SetTcpKeepAlive(true' 5000' 1000);
Magic Number,ServiceControl.Monitoring.AcceptanceTests,AcceptanceTest,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring.AcceptanceTests\AcceptanceTest.cs,AcceptanceTest,The following statement contains a magic number: ServicePointManager.SetTcpKeepAlive(true' 5000' 1000);
Magic Number,ServiceControl.Monitoring.AcceptanceTests.TestSupport,ServiceControlComponentRunner,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring.AcceptanceTests\TestSupport\ServiceControlComponentRunner.cs,FindAvailablePort,The following statement contains a magic number: port < startPort + 1024
Magic Number,ServiceControl.Monitoring.AcceptanceTests.TestSupport,ServiceControlComponentRunner,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring.AcceptanceTests\TestSupport\ServiceControlComponentRunner.cs,InitializeServiceControl,The following statement contains a magic number: var instancePort = FindAvailablePort(33333);
Magic Number,ServiceControl.Monitoring.AcceptanceTests.Tests,PerformanceTests,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring.AcceptanceTests\Tests\PerformanceTests.cs,Setup,The following statement contains a magic number: var settings = new Settings {EndpointUptimeGracePeriod = TimeSpan.FromMinutes(5)};
Magic Number,ServiceControl.Monitoring.AcceptanceTests.Tests,PerformanceTests,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring.AcceptanceTests\Tests\PerformanceTests.cs,GetMonitoredEndpointsQueryTest,The following statement contains a magic number: Report("Querying"' histogram' TimeSpan.FromMilliseconds(150));
Magic Number,ServiceControl.Monitoring.AcceptanceTests.Tests,PerformanceTests,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring.AcceptanceTests\Tests\PerformanceTests.cs,GetMonitoredEndpointsQueryTest,The following statement contains a magic number: Report("Reporters"' reportFinalHistogram' TimeSpan.FromMilliseconds(20));
Magic Number,ServiceControl.Monitoring.AcceptanceTests.Tests,PerformanceTests,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring.AcceptanceTests\Tests\PerformanceTests.cs,GetMonitoredSingleEndpointQueryTest,The following statement contains a magic number: Report("Querying"' histogram' TimeSpan.FromMilliseconds(25));
Magic Number,ServiceControl.Monitoring.AcceptanceTests.Tests,PerformanceTests,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring.AcceptanceTests\Tests\PerformanceTests.cs,GetMonitoredSingleEndpointQueryTest,The following statement contains a magic number: Report("Reporters"' reportFinalHistogram' TimeSpan.FromMilliseconds(20));
Magic Number,ServiceControl.Monitoring.AcceptanceTests.Tests,PerformanceTests,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring.AcceptanceTests\Tests\PerformanceTests.cs,StartReporter,The following statement contains a magic number: return Task.Run(async () =>              {                  var entries = new RawMessage.Entry[numberOfEntriesInReport];                  var histogram = CreateTimeHistogram();                    while (source.IsCancellationRequested == false)                  {                      var now = DateTime.UtcNow;                        for (var i = 0; i < entries.Length; i++)                      {                          entries[i].DateTicks = now.AddMilliseconds(100 * i).Ticks;                          entries[i].Value = i;                      }                        var start = Stopwatch.GetTimestamp();                      store(entries' instance);                      var elapsed = Stopwatch.GetTimestamp() - start;                      histogram.RecordValue(elapsed);                        await Task.Delay(sendReportEvery).ConfigureAwait(false);                  }                    return histogram;              });
Magic Number,ServiceControl.Monitoring.AcceptanceTests.Tests,PerformanceTests,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring.AcceptanceTests\Tests\PerformanceTests.cs,CreateTimeHistogram,The following statement contains a magic number: return new LongHistogram(TimeStamp.Hours(1)' 3);
Magic Number,ServiceControl.Monitoring.AcceptanceTests.Tests,PerformanceTests,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring.AcceptanceTests\Tests\PerformanceTests.cs,Report,The following statement contains a magic number: var actualMean = TimeSpan.FromMilliseconds(histogram.GetValueAtPercentile(50) / OutputScalingFactor.TimeStampToMilliseconds);
Magic Number,ServiceControl.Monitoring.AcceptanceTests.Tests,When_querying_queue_length_data,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring.AcceptanceTests\Tests\When_querying_queue_length_data.cs,Should_report_via_http,The following statement contains a magic number: await Define<TestContext>()                   .WithEndpoint<SendingEndpoint>(c =>                   {                       c.CustomConfig(ec =>                       {                           ec.MakeInstanceUniquelyAddressable("1");                           ec.UniquelyIdentifyRunningInstance()                               .UsingCustomIdentifier(instanceId);                           ec.EnableMetrics()                               .SendMetricDataToServiceControl(global::ServiceControl.Monitoring.Settings.DEFAULT_ENDPOINT_NAME' TimeSpan.FromSeconds(1));                       });                       c.DoNotFailOnErrorMessages();                       c.When(async s =>                       {                           for (var i = 0; i < 10; i++)                           {                               await s.SendLocal(new SampleMessage());                           }                       });                   })                   .WithEndpoint<SendingEndpoint>(c =>                   {                       c.CustomConfig(ec =>                       {                           ec.MakeInstanceUniquelyAddressable("2");                           ec.EnableMetrics()                               .SendMetricDataToServiceControl(global::ServiceControl.Monitoring.Settings.DEFAULT_ENDPOINT_NAME'                               TimeSpan.FromSeconds(1)'                               metricsInstanceId.ToString("N"));                       });                       c.DoNotFailOnErrorMessages();                       c.When(async s =>                       {                           for (var i = 0; i < 10; i++)                           {                               await s.SendLocal(new SampleMessage());                           }                       });                   })                   .Done(async c =>                   {                       var result = await this.TryGet<MonitoredEndpointDetails>($"/monitored-endpoints/{endpointName}");                         if (!result.HasResult)                       {                           return false;                       }                         monitoredEndpointDetails = result.Item;                         instance1 = monitoredEndpointDetails.Instances.SingleOrDefault(instance => instance.Id == instanceId.ToString("N"));                       instance2 = monitoredEndpointDetails.Instances.SingleOrDefault(instance => instance.Id == metricsInstanceId.ToString("N"));                         if (instance1 == null || instance2 == null)                       {                           return false;                       }                         if (monitoredEndpointDetails.Digest.Metrics["queueLength"].Average == 0.0)                       {                           return false;                       }                         c.TestEnded.SetResult(true);                         return true;                   })                   .Run();
Magic Number,ServiceControl.Monitoring.AcceptanceTests.Tests,When_querying_queue_length_data,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring.AcceptanceTests\Tests\When_querying_queue_length_data.cs,Should_report_via_http,The following statement contains a magic number: await Define<TestContext>()                   .WithEndpoint<SendingEndpoint>(c =>                   {                       c.CustomConfig(ec =>                       {                           ec.MakeInstanceUniquelyAddressable("1");                           ec.UniquelyIdentifyRunningInstance()                               .UsingCustomIdentifier(instanceId);                           ec.EnableMetrics()                               .SendMetricDataToServiceControl(global::ServiceControl.Monitoring.Settings.DEFAULT_ENDPOINT_NAME' TimeSpan.FromSeconds(1));                       });                       c.DoNotFailOnErrorMessages();                       c.When(async s =>                       {                           for (var i = 0; i < 10; i++)                           {                               await s.SendLocal(new SampleMessage());                           }                       });                   })                   .WithEndpoint<SendingEndpoint>(c =>                   {                       c.CustomConfig(ec =>                       {                           ec.MakeInstanceUniquelyAddressable("2");                           ec.EnableMetrics()                               .SendMetricDataToServiceControl(global::ServiceControl.Monitoring.Settings.DEFAULT_ENDPOINT_NAME'                               TimeSpan.FromSeconds(1)'                               metricsInstanceId.ToString("N"));                       });                       c.DoNotFailOnErrorMessages();                       c.When(async s =>                       {                           for (var i = 0; i < 10; i++)                           {                               await s.SendLocal(new SampleMessage());                           }                       });                   })                   .Done(async c =>                   {                       var result = await this.TryGet<MonitoredEndpointDetails>($"/monitored-endpoints/{endpointName}");                         if (!result.HasResult)                       {                           return false;                       }                         monitoredEndpointDetails = result.Item;                         instance1 = monitoredEndpointDetails.Instances.SingleOrDefault(instance => instance.Id == instanceId.ToString("N"));                       instance2 = monitoredEndpointDetails.Instances.SingleOrDefault(instance => instance.Id == metricsInstanceId.ToString("N"));                         if (instance1 == null || instance2 == null)                       {                           return false;                       }                         if (monitoredEndpointDetails.Digest.Metrics["queueLength"].Average == 0.0)                       {                           return false;                       }                         c.TestEnded.SetResult(true);                         return true;                   })                   .Run();
Magic Number,ServiceControl.Monitoring.AcceptanceTests.Tests,Handler,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring.AcceptanceTests\Tests\When_querying_queue_length_data.cs,Handle,The following statement contains a magic number: return Task.WhenAny(                          Task.Delay(TimeSpan.FromSeconds(30))'                              testContext.TestEnded.Task                          );
Magic Number,ServiceControl.Monitoring.AcceptanceTests.Tests,Handler,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring.AcceptanceTests\Tests\When_querying_queue_length_data.cs,Handle,The following statement contains a magic number: return Task.Delay(TimeSpan.FromMilliseconds(10));
Magic Number,ServiceControl.Monitoring.AcceptanceTests.Tests,When_querying_retries_data,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring.AcceptanceTests\Tests\When_querying_retries_data.cs,Should_report_via_http,The following statement contains a magic number: await Define<TestContext>()                  .WithEndpoint<EndpointWithRetries>(c =>                  {                      c.DoNotFailOnErrorMessages();                      c.CustomConfig(ec => ec.Recoverability().Immediate(i => i.NumberOfRetries(5)));                      c.When(s => s.SendLocal(new SampleMessage()));                  })                  .Done(async c =>                  {                      var result = await this.TryGetMany<MonitoredEndpoint>("/monitored-endpoints?history=1");                        metricReported = result.HasResult && result.Items[0].Metrics["retries"].Average > 0;                        if (metricReported)                      {                          c.ShuttingDown = true;                      }                        return metricReported;                  })                  .Run();
