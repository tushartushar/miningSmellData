Implementation smell,Namespace,Class,File,Method,Description
Long Statement,ServiceControl.Monitoring.UnitTests.MonitoredEndpoints,AggregatorTests,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring.UnitTests\MonitoredEndpoints\AggregatorTests.cs,Total_measurements_per_second_are_merged_by_interval_start,The length of the statement  "                        new IntervalsStore<BreakdownId>.TimeInterval {IntervalStart = now' TotalValue = ridiculouslyBigLong1' TotalMeasurements = 4}' " is 125.
Long Statement,ServiceControl.Monitoring.UnitTests.MonitoredEndpoints,AggregatorTests,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring.UnitTests\MonitoredEndpoints\AggregatorTests.cs,Total_measurements_per_second_are_merged_by_interval_start,The length of the statement  "                        new IntervalsStore<BreakdownId>.TimeInterval {IntervalStart = now.AddSeconds(2)' TotalValue = ridiculouslyBigLong2' TotalMeasurements = 5} " is 138.
Long Statement,ServiceControl.Monitoring.UnitTests.MonitoredEndpoints,AggregatorTests,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring.UnitTests\MonitoredEndpoints\AggregatorTests.cs,Total_measurements_per_second_are_merged_by_interval_start,The length of the statement  "                        new IntervalsStore<BreakdownId>.TimeInterval {IntervalStart = now' TotalValue = ridiculouslyBigLong1' TotalMeasurements = 6}' " is 125.
Long Statement,ServiceControl.Monitoring.UnitTests.MonitoredEndpoints,AggregatorTests,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring.UnitTests\MonitoredEndpoints\AggregatorTests.cs,Total_measurements_per_second_are_merged_by_interval_start,The length of the statement  "                        new IntervalsStore<BreakdownId>.TimeInterval {IntervalStart = now.AddSeconds(2)' TotalValue = ridiculouslyBigLong2' TotalMeasurements = 7} " is 138.
Long Statement,ServiceControl.Monitoring.UnitTests.MonitoredEndpoints,QueueLengthAggregationTests,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring.UnitTests\MonitoredEndpoints\QueueLengthAggregationTests.cs,Point_value_is_sum_of_averages_per_input_queue,The length of the statement  "                        new IntervalsStore<EndpointInputQueue>.TimeInterval {IntervalStart = now.AddSeconds(1)' TotalValue = 2' TotalMeasurements = 3} " is 126.
Magic Number,ServiceControl.Monitoring.UnitTests.API,AggregationTests,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring.UnitTests\API\AggregationTests.cs,MetricAggregationByInstanceIsScopedToLogicalEndpoint,The following statement contains a magic number: var dataA = new RawMessage.Entry {DateTicks = now.Ticks' Value = 5};
Magic Number,ServiceControl.Monitoring.UnitTests.API,AggregationTests,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring.UnitTests\API\AggregationTests.cs,MetricAggregationByInstanceIsScopedToLogicalEndpoint,The following statement contains a magic number: var dataB = new RawMessage.Entry {DateTicks = now.Ticks' Value = 10};
Magic Number,ServiceControl.Monitoring.UnitTests.API,AggregationTests,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring.UnitTests\API\AggregationTests.cs,MetricAggregationByInstanceIsScopedToLogicalEndpoint,The following statement contains a magic number: Assert.AreEqual(5' model.Instances[0].Metrics["ProcessingTime"].Average);
Magic Number,ServiceControl.Monitoring.UnitTests.API,AggregationTests,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring.UnitTests\API\AggregationTests.cs,CreateConroller,The following statement contains a magic number: var settings = new Settings              {                  EndpointUptimeGracePeriod = TimeSpan.FromMinutes(5)              };
Magic Number,ServiceControl.Monitoring.UnitTests.Infrastructure,EndpointInstanceActivityTrackerTests,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring.UnitTests\Infrastructure\EndpointInstanceActivityTrackerTests.cs,Setup,The following statement contains a magic number: var settings = new Settings                  {EndpointUptimeGracePeriod = TimeSpan.FromMinutes(5)};
Magic Number,ServiceControl.Monitoring.UnitTests.Infrastructure,IntervalStoreTests,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring.UnitTests\Infrastructure\IntervalStoreTests.cs,Returned_number_of_intervals_per_known_endpoint_equals_history_size,The following statement contains a magic number: var entries = EntriesBuilder.Build(new Dictionary<DateTime' long>              {                  {now.AddSeconds(-9)' 0L}              });
Magic Number,ServiceControl.Monitoring.UnitTests.Infrastructure,IntervalStoreTests,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring.UnitTests\Infrastructure\IntervalStoreTests.cs,Returned_number_of_intervals_per_known_endpoint_equals_history_size,The following statement contains a magic number: var store = new IntervalsStore<int>(TimeSpan.FromSeconds(10)' 33' 0);
Magic Number,ServiceControl.Monitoring.UnitTests.Infrastructure,IntervalStoreTests,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring.UnitTests\Infrastructure\IntervalStoreTests.cs,Returned_number_of_intervals_per_known_endpoint_equals_history_size,The following statement contains a magic number: var store = new IntervalsStore<int>(TimeSpan.FromSeconds(10)' 33' 0);
Magic Number,ServiceControl.Monitoring.UnitTests.Infrastructure,IntervalStoreTests,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring.UnitTests\Infrastructure\IntervalStoreTests.cs,Returned_number_of_intervals_per_known_endpoint_equals_history_size,The following statement contains a magic number: Assert.AreEqual(33' timings[0].Intervals.Length);
Magic Number,ServiceControl.Monitoring.UnitTests.Infrastructure,IntervalStoreTests,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring.UnitTests\Infrastructure\IntervalStoreTests.cs,With_single_measurement_global_stats_equals_interval_stats,The following statement contains a magic number: var entries = EntriesBuilder.Build(new Dictionary<DateTime' long>              {                  {now.AddSeconds(-9)' 2L}              });
Magic Number,ServiceControl.Monitoring.UnitTests.Infrastructure,IntervalStoreTests,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring.UnitTests\Infrastructure\IntervalStoreTests.cs,With_single_measurement_global_stats_equals_interval_stats,The following statement contains a magic number: var entries = EntriesBuilder.Build(new Dictionary<DateTime' long>              {                  {now.AddSeconds(-9)' 2L}              });
Magic Number,ServiceControl.Monitoring.UnitTests.Infrastructure,IntervalStoreTests,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring.UnitTests\Infrastructure\IntervalStoreTests.cs,With_single_measurement_global_stats_equals_interval_stats,The following statement contains a magic number: Assert.AreEqual(2L' timings[0].TotalValue);
Magic Number,ServiceControl.Monitoring.UnitTests.Infrastructure,IntervalStoreTests,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring.UnitTests\Infrastructure\IntervalStoreTests.cs,Intervals_older_than_history_size_are_discarded,The following statement contains a magic number: var intervalSize = TimeSpan.FromSeconds(10);
Magic Number,ServiceControl.Monitoring.UnitTests.Infrastructure,IntervalStoreTests,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring.UnitTests\Infrastructure\IntervalStoreTests.cs,Intervals_older_than_history_size_are_discarded,The following statement contains a magic number: var numberOfIntervals = 100;
Magic Number,ServiceControl.Monitoring.UnitTests.Infrastructure,IntervalStoreTests,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring.UnitTests\Infrastructure\IntervalStoreTests.cs,Intervals_older_than_history_size_are_discarded,The following statement contains a magic number: var entries = EntriesBuilder.Build(new Dictionary<DateTime' long>              {                  {now.Subtract(historySize)' 3L}              });
Magic Number,ServiceControl.Monitoring.UnitTests.Infrastructure,IntervalStoreTests,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring.UnitTests\Infrastructure\IntervalStoreTests.cs,Intervals_from_the_future_are_stored,The following statement contains a magic number: var entries = EntriesBuilder.Build(new Dictionary<DateTime' long>              {                  {now.AddMinutes(5)' 1L}              });
Magic Number,ServiceControl.Monitoring.UnitTests.Infrastructure,IntervalStoreTests,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring.UnitTests\Infrastructure\IntervalStoreTests.cs,Intervals_from_the_future_are_stored,The following statement contains a magic number: var futureTimings = store.GetIntervals(now.Add(store.IntervalSize).AddMinutes(6));
Magic Number,ServiceControl.Monitoring.UnitTests.Infrastructure,IntervalStoreTests,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring.UnitTests\Infrastructure\IntervalStoreTests.cs,Intervals_can_store_data_from_two_entry_arrays,The following statement contains a magic number: var firstEntries = EntriesBuilder.Build(new Dictionary<DateTime' long>              {                  {now.AddSeconds(-15)' 1L}'                  {now' 1L}              });
Magic Number,ServiceControl.Monitoring.UnitTests.Infrastructure,IntervalStoreTests,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring.UnitTests\Infrastructure\IntervalStoreTests.cs,Intervals_can_store_data_from_two_entry_arrays,The following statement contains a magic number: var secondEntries = EntriesBuilder.Build(new Dictionary<DateTime' long>              {                  {now.AddSeconds(-30)' 1L}'                  {now' 3L}              });
Magic Number,ServiceControl.Monitoring.UnitTests.Infrastructure,IntervalStoreTests,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring.UnitTests\Infrastructure\IntervalStoreTests.cs,Intervals_can_store_data_from_two_entry_arrays,The following statement contains a magic number: var secondEntries = EntriesBuilder.Build(new Dictionary<DateTime' long>              {                  {now.AddSeconds(-30)' 1L}'                  {now' 3L}              });
Magic Number,ServiceControl.Monitoring.UnitTests.Infrastructure,IntervalStoreTests,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring.UnitTests\Infrastructure\IntervalStoreTests.cs,Intervals_can_store_data_from_two_entry_arrays,The following statement contains a magic number: Assert.AreEqual(3' nonEmptyIntervals.Length);
Magic Number,ServiceControl.Monitoring.UnitTests.Infrastructure,IntervalStoreTests,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring.UnitTests\Infrastructure\IntervalStoreTests.cs,Intervals_can_store_data_from_two_entry_arrays,The following statement contains a magic number: Assert.AreEqual(4' timings[0].TotalMeasurements);
Magic Number,ServiceControl.Monitoring.UnitTests.Infrastructure,IntervalStoreTests,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring.UnitTests\Infrastructure\IntervalStoreTests.cs,Intervals_can_store_data_from_two_entry_arrays,The following statement contains a magic number: CollectionAssert.AreEqual(new double[] {4' 1' 1}' nonEmptyIntervals.Select(i => i.TotalValue));
Magic Number,ServiceControl.Monitoring.UnitTests.Infrastructure,IntervalStoreTests,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring.UnitTests\Infrastructure\IntervalStoreTests.cs,Intervals_can_store_data_from_two_entry_arrays,The following statement contains a magic number: CollectionAssert.AreEqual(new double[] {2' 1' 1}' nonEmptyIntervals.Select(i => i.TotalMeasurements));
Magic Number,ServiceControl.Monitoring.UnitTests.Infrastructure,IntervalStoreTests,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring.UnitTests\Infrastructure\IntervalStoreTests.cs,Intervals_are_returned_in_descending_order,The following statement contains a magic number: var entries = EntriesBuilder.Build(new Dictionary<DateTime' long>              {                  {now.AddSeconds(-45)' 1L}'                  {now.AddSeconds(-30)' 1L}'                  {now' 1L}              });
Magic Number,ServiceControl.Monitoring.UnitTests.Infrastructure,IntervalStoreTests,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring.UnitTests\Infrastructure\IntervalStoreTests.cs,Intervals_are_returned_in_descending_order,The following statement contains a magic number: var entries = EntriesBuilder.Build(new Dictionary<DateTime' long>              {                  {now.AddSeconds(-45)' 1L}'                  {now.AddSeconds(-30)' 1L}'                  {now' 1L}              });
Magic Number,ServiceControl.Monitoring.UnitTests.Infrastructure,IntervalStoreTests,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring.UnitTests\Infrastructure\IntervalStoreTests.cs,Intervals_are_returned_in_descending_order,The following statement contains a magic number: Assert.IsTrue(intervalStarts[1] > intervalStarts[2]);
Magic Number,ServiceControl.Monitoring.UnitTests.Infrastructure,IntervalStoreTests,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring.UnitTests\Infrastructure\IntervalStoreTests.cs,Delayed_intervals_are_not_reported,The following statement contains a magic number: const int delayedIntervals = 5;
Magic Number,ServiceControl.Monitoring.UnitTests.Infrastructure,IntervalStoreTests,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring.UnitTests\Infrastructure\IntervalStoreTests.cs,Delayed_intervals_are_not_reported,The following statement contains a magic number: var entries = EntriesBuilder.Build(new Dictionary<DateTime' long>              {                  {now.AddSeconds(-4)' 1L}'                  {now.AddSeconds(-3)' 1L}'                  {now' 1L}              });
Magic Number,ServiceControl.Monitoring.UnitTests.Infrastructure,IntervalStoreTests,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring.UnitTests\Infrastructure\IntervalStoreTests.cs,Delayed_intervals_are_not_reported,The following statement contains a magic number: var entries = EntriesBuilder.Build(new Dictionary<DateTime' long>              {                  {now.AddSeconds(-4)' 1L}'                  {now.AddSeconds(-3)' 1L}'                  {now' 1L}              });
Magic Number,ServiceControl.Monitoring.UnitTests.Infrastructure,IntervalStoreTests,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring.UnitTests\Infrastructure\IntervalStoreTests.cs,Delayed_intervals_are_not_reported,The following statement contains a magic number: var store = new IntervalsStore<int>(intervalSize' 10' delayedIntervals);
Magic Number,ServiceControl.Monitoring.UnitTests.Infrastructure,IntervalStoreTests,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring.UnitTests\Infrastructure\IntervalStoreTests.cs,Delayed_intervals_are_not_reported,The following statement contains a magic number: Assert.AreEqual(3' delayedTimings[0].TotalMeasurements);
Magic Number,ServiceControl.Monitoring.UnitTests.Infrastructure,IntervalStoreTests,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring.UnitTests\Infrastructure\IntervalStoreTests.cs,AnyStore,The following statement contains a magic number: return new IntervalsStore<int>(TimeSpan.FromSeconds(5)' 127' 0);
Magic Number,ServiceControl.Monitoring.UnitTests.Infrastructure,IntervalStoreTests,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring.UnitTests\Infrastructure\IntervalStoreTests.cs,AnyStore,The following statement contains a magic number: return new IntervalsStore<int>(TimeSpan.FromSeconds(5)' 127' 0);
Magic Number,ServiceControl.Monitoring.UnitTests.Infrastructure,RawMessagePollTests,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring.UnitTests\Infrastructure\RawMessagePollTests.cs,Message_lifecycle_is_preserved,The following statement contains a magic number: message.TryRecord(3' 4);
Magic Number,ServiceControl.Monitoring.UnitTests.Infrastructure,RawMessagePollTests,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring.UnitTests\Infrastructure\RawMessagePollTests.cs,Message_lifecycle_is_preserved,The following statement contains a magic number: message.TryRecord(3' 4);
Magic Number,ServiceControl.Monitoring.UnitTests.Infrastructure,RawMessagePollTests,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring.UnitTests\Infrastructure\RawMessagePollTests.cs,Message_lifecycle_is_preserved,The following statement contains a magic number: Assert.AreEqual(3' message.Entries[0].DateTicks);
Magic Number,ServiceControl.Monitoring.UnitTests.Infrastructure,RawMessagePollTests,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring.UnitTests\Infrastructure\RawMessagePollTests.cs,Message_lifecycle_is_preserved,The following statement contains a magic number: Assert.AreEqual(4' message.Entries[0].Value);
Magic Number,ServiceControl.Monitoring.UnitTests.Infrastructure,VariableHistoryIntervalStoreTests,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring.UnitTests\Infrastructure\VariableHistoryIntervalStoreTests.cs,Store_updates_all_supported_historical_periods,The following statement contains a magic number: var entries = EntriesBuilder.Build(new Dictionary<DateTime' long>              {                  {now' 5L}              });
Magic Number,ServiceControl.Monitoring.UnitTests.Infrastructure,VariableHistoryIntervalStoreTests,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring.UnitTests\Infrastructure\VariableHistoryIntervalStoreTests.cs,Store_updates_all_supported_historical_periods,The following statement contains a magic number: Assert.AreEqual(5L' intervals[0].TotalValue);
Magic Number,ServiceControl.Monitoring.UnitTests.MonitoredEndpoints,AggregatorTests,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring.UnitTests\MonitoredEndpoints\AggregatorTests.cs,Timings_average_is_sum_of_total_values_by_total_measurements,The following statement contains a magic number: var intervals = new List<IntervalsStore<BreakdownId>.IntervalsBreakdown>              {                  new IntervalsStore<BreakdownId>.IntervalsBreakdown                  {                      Id = new BreakdownId {Id = 0}'                      TotalMeasurements = 2'                      TotalValue = 2'                      Intervals = EmptyIntervals                  }'                  new IntervalsStore<BreakdownId>.IntervalsBreakdown                  {                      Id = new BreakdownId {Id = 0}'                      TotalMeasurements = 4'                      TotalValue = 1'                      Intervals = EmptyIntervals                  }              };
Magic Number,ServiceControl.Monitoring.UnitTests.MonitoredEndpoints,AggregatorTests,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring.UnitTests\MonitoredEndpoints\AggregatorTests.cs,Timings_average_is_sum_of_total_values_by_total_measurements,The following statement contains a magic number: var intervals = new List<IntervalsStore<BreakdownId>.IntervalsBreakdown>              {                  new IntervalsStore<BreakdownId>.IntervalsBreakdown                  {                      Id = new BreakdownId {Id = 0}'                      TotalMeasurements = 2'                      TotalValue = 2'                      Intervals = EmptyIntervals                  }'                  new IntervalsStore<BreakdownId>.IntervalsBreakdown                  {                      Id = new BreakdownId {Id = 0}'                      TotalMeasurements = 4'                      TotalValue = 1'                      Intervals = EmptyIntervals                  }              };
Magic Number,ServiceControl.Monitoring.UnitTests.MonitoredEndpoints,AggregatorTests,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring.UnitTests\MonitoredEndpoints\AggregatorTests.cs,Timings_average_is_sum_of_total_values_by_total_measurements,The following statement contains a magic number: var intervals = new List<IntervalsStore<BreakdownId>.IntervalsBreakdown>              {                  new IntervalsStore<BreakdownId>.IntervalsBreakdown                  {                      Id = new BreakdownId {Id = 0}'                      TotalMeasurements = 2'                      TotalValue = 2'                      Intervals = EmptyIntervals                  }'                  new IntervalsStore<BreakdownId>.IntervalsBreakdown                  {                      Id = new BreakdownId {Id = 0}'                      TotalMeasurements = 4'                      TotalValue = 1'                      Intervals = EmptyIntervals                  }              };
Magic Number,ServiceControl.Monitoring.UnitTests.MonitoredEndpoints,AggregatorTests,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring.UnitTests\MonitoredEndpoints\AggregatorTests.cs,Timings_average_is_sum_of_total_values_by_total_measurements,The following statement contains a magic number: var values = Aggregator.ToAverages(intervals' HistoryPeriod.FromMinutes(5));
Magic Number,ServiceControl.Monitoring.UnitTests.MonitoredEndpoints,AggregatorTests,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring.UnitTests\MonitoredEndpoints\AggregatorTests.cs,Timings_average_is_sum_of_total_values_by_total_measurements,The following statement contains a magic number: Assert.AreEqual(0.5d' values.Average);
Magic Number,ServiceControl.Monitoring.UnitTests.MonitoredEndpoints,AggregatorTests,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring.UnitTests\MonitoredEndpoints\AggregatorTests.cs,Timings_intervals_are_merged_by_interval_start,The following statement contains a magic number: var intervals = new List<IntervalsStore<BreakdownId>.IntervalsBreakdown>              {                  new IntervalsStore<BreakdownId>.IntervalsBreakdown                  {                      Id = new BreakdownId {Id = 0}'                      Intervals = new[]                      {                          new IntervalsStore<BreakdownId>.TimeInterval {IntervalStart = now' TotalMeasurements = 1' TotalValue = 1}                      }                  }'                  new IntervalsStore<BreakdownId>.IntervalsBreakdown                  {                      Id = new BreakdownId {Id = 0}'                      Intervals = new[]                      {                          new IntervalsStore<BreakdownId>.TimeInterval {IntervalStart = now' TotalMeasurements = 2' TotalValue = 2}                      }                  }              };
Magic Number,ServiceControl.Monitoring.UnitTests.MonitoredEndpoints,AggregatorTests,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring.UnitTests\MonitoredEndpoints\AggregatorTests.cs,Timings_intervals_are_merged_by_interval_start,The following statement contains a magic number: var intervals = new List<IntervalsStore<BreakdownId>.IntervalsBreakdown>              {                  new IntervalsStore<BreakdownId>.IntervalsBreakdown                  {                      Id = new BreakdownId {Id = 0}'                      Intervals = new[]                      {                          new IntervalsStore<BreakdownId>.TimeInterval {IntervalStart = now' TotalMeasurements = 1' TotalValue = 1}                      }                  }'                  new IntervalsStore<BreakdownId>.IntervalsBreakdown                  {                      Id = new BreakdownId {Id = 0}'                      Intervals = new[]                      {                          new IntervalsStore<BreakdownId>.TimeInterval {IntervalStart = now' TotalMeasurements = 2' TotalValue = 2}                      }                  }              };
Magic Number,ServiceControl.Monitoring.UnitTests.MonitoredEndpoints,AggregatorTests,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring.UnitTests\MonitoredEndpoints\AggregatorTests.cs,Timings_intervals_are_merged_by_interval_start,The following statement contains a magic number: var values = Aggregator.ToAverages(intervals' HistoryPeriod.FromMinutes(5));
Magic Number,ServiceControl.Monitoring.UnitTests.MonitoredEndpoints,AggregatorTests,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring.UnitTests\MonitoredEndpoints\AggregatorTests.cs,Total_measurements_per_second_are_merged_by_interval_start,The following statement contains a magic number: const long ridiculouslyBigLong1 = 374859734593849583;
Magic Number,ServiceControl.Monitoring.UnitTests.MonitoredEndpoints,AggregatorTests,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring.UnitTests\MonitoredEndpoints\AggregatorTests.cs,Total_measurements_per_second_are_merged_by_interval_start,The following statement contains a magic number: const long ridiculouslyBigLong2 = 898394895890348954;
Magic Number,ServiceControl.Monitoring.UnitTests.MonitoredEndpoints,AggregatorTests,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring.UnitTests\MonitoredEndpoints\AggregatorTests.cs,Total_measurements_per_second_are_merged_by_interval_start,The following statement contains a magic number: var intervals = new List<IntervalsStore<BreakdownId>.IntervalsBreakdown>              {                  new IntervalsStore<BreakdownId>.IntervalsBreakdown                  {                      Id = new BreakdownId {Id = 0}'                      Intervals = new[]                      {                          new IntervalsStore<BreakdownId>.TimeInterval {IntervalStart = now' TotalValue = ridiculouslyBigLong1' TotalMeasurements = 4}'                          new IntervalsStore<BreakdownId>.TimeInterval {IntervalStart = now.AddSeconds(2)' TotalValue = ridiculouslyBigLong2' TotalMeasurements = 5}                      }'                      TotalMeasurements = 4 + 5                  }'                  new IntervalsStore<BreakdownId>.IntervalsBreakdown                  {                      Id = new BreakdownId {Id = 0}'                      Intervals = new[]                      {                          new IntervalsStore<BreakdownId>.TimeInterval {IntervalStart = now' TotalValue = ridiculouslyBigLong1' TotalMeasurements = 6}'                          new IntervalsStore<BreakdownId>.TimeInterval {IntervalStart = now.AddSeconds(2)' TotalValue = ridiculouslyBigLong2' TotalMeasurements = 7}                      }'                      TotalMeasurements = 6 + 7                  }              };
Magic Number,ServiceControl.Monitoring.UnitTests.MonitoredEndpoints,AggregatorTests,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring.UnitTests\MonitoredEndpoints\AggregatorTests.cs,Total_measurements_per_second_are_merged_by_interval_start,The following statement contains a magic number: var intervals = new List<IntervalsStore<BreakdownId>.IntervalsBreakdown>              {                  new IntervalsStore<BreakdownId>.IntervalsBreakdown                  {                      Id = new BreakdownId {Id = 0}'                      Intervals = new[]                      {                          new IntervalsStore<BreakdownId>.TimeInterval {IntervalStart = now' TotalValue = ridiculouslyBigLong1' TotalMeasurements = 4}'                          new IntervalsStore<BreakdownId>.TimeInterval {IntervalStart = now.AddSeconds(2)' TotalValue = ridiculouslyBigLong2' TotalMeasurements = 5}                      }'                      TotalMeasurements = 4 + 5                  }'                  new IntervalsStore<BreakdownId>.IntervalsBreakdown                  {                      Id = new BreakdownId {Id = 0}'                      Intervals = new[]                      {                          new IntervalsStore<BreakdownId>.TimeInterval {IntervalStart = now' TotalValue = ridiculouslyBigLong1' TotalMeasurements = 6}'                          new IntervalsStore<BreakdownId>.TimeInterval {IntervalStart = now.AddSeconds(2)' TotalValue = ridiculouslyBigLong2' TotalMeasurements = 7}                      }'                      TotalMeasurements = 6 + 7                  }              };
Magic Number,ServiceControl.Monitoring.UnitTests.MonitoredEndpoints,AggregatorTests,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring.UnitTests\MonitoredEndpoints\AggregatorTests.cs,Total_measurements_per_second_are_merged_by_interval_start,The following statement contains a magic number: var intervals = new List<IntervalsStore<BreakdownId>.IntervalsBreakdown>              {                  new IntervalsStore<BreakdownId>.IntervalsBreakdown                  {                      Id = new BreakdownId {Id = 0}'                      Intervals = new[]                      {                          new IntervalsStore<BreakdownId>.TimeInterval {IntervalStart = now' TotalValue = ridiculouslyBigLong1' TotalMeasurements = 4}'                          new IntervalsStore<BreakdownId>.TimeInterval {IntervalStart = now.AddSeconds(2)' TotalValue = ridiculouslyBigLong2' TotalMeasurements = 5}                      }'                      TotalMeasurements = 4 + 5                  }'                  new IntervalsStore<BreakdownId>.IntervalsBreakdown                  {                      Id = new BreakdownId {Id = 0}'                      Intervals = new[]                      {                          new IntervalsStore<BreakdownId>.TimeInterval {IntervalStart = now' TotalValue = ridiculouslyBigLong1' TotalMeasurements = 6}'                          new IntervalsStore<BreakdownId>.TimeInterval {IntervalStart = now.AddSeconds(2)' TotalValue = ridiculouslyBigLong2' TotalMeasurements = 7}                      }'                      TotalMeasurements = 6 + 7                  }              };
Magic Number,ServiceControl.Monitoring.UnitTests.MonitoredEndpoints,AggregatorTests,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring.UnitTests\MonitoredEndpoints\AggregatorTests.cs,Total_measurements_per_second_are_merged_by_interval_start,The following statement contains a magic number: var intervals = new List<IntervalsStore<BreakdownId>.IntervalsBreakdown>              {                  new IntervalsStore<BreakdownId>.IntervalsBreakdown                  {                      Id = new BreakdownId {Id = 0}'                      Intervals = new[]                      {                          new IntervalsStore<BreakdownId>.TimeInterval {IntervalStart = now' TotalValue = ridiculouslyBigLong1' TotalMeasurements = 4}'                          new IntervalsStore<BreakdownId>.TimeInterval {IntervalStart = now.AddSeconds(2)' TotalValue = ridiculouslyBigLong2' TotalMeasurements = 5}                      }'                      TotalMeasurements = 4 + 5                  }'                  new IntervalsStore<BreakdownId>.IntervalsBreakdown                  {                      Id = new BreakdownId {Id = 0}'                      Intervals = new[]                      {                          new IntervalsStore<BreakdownId>.TimeInterval {IntervalStart = now' TotalValue = ridiculouslyBigLong1' TotalMeasurements = 6}'                          new IntervalsStore<BreakdownId>.TimeInterval {IntervalStart = now.AddSeconds(2)' TotalValue = ridiculouslyBigLong2' TotalMeasurements = 7}                      }'                      TotalMeasurements = 6 + 7                  }              };
Magic Number,ServiceControl.Monitoring.UnitTests.MonitoredEndpoints,AggregatorTests,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring.UnitTests\MonitoredEndpoints\AggregatorTests.cs,Total_measurements_per_second_are_merged_by_interval_start,The following statement contains a magic number: var intervals = new List<IntervalsStore<BreakdownId>.IntervalsBreakdown>              {                  new IntervalsStore<BreakdownId>.IntervalsBreakdown                  {                      Id = new BreakdownId {Id = 0}'                      Intervals = new[]                      {                          new IntervalsStore<BreakdownId>.TimeInterval {IntervalStart = now' TotalValue = ridiculouslyBigLong1' TotalMeasurements = 4}'                          new IntervalsStore<BreakdownId>.TimeInterval {IntervalStart = now.AddSeconds(2)' TotalValue = ridiculouslyBigLong2' TotalMeasurements = 5}                      }'                      TotalMeasurements = 4 + 5                  }'                  new IntervalsStore<BreakdownId>.IntervalsBreakdown                  {                      Id = new BreakdownId {Id = 0}'                      Intervals = new[]                      {                          new IntervalsStore<BreakdownId>.TimeInterval {IntervalStart = now' TotalValue = ridiculouslyBigLong1' TotalMeasurements = 6}'                          new IntervalsStore<BreakdownId>.TimeInterval {IntervalStart = now.AddSeconds(2)' TotalValue = ridiculouslyBigLong2' TotalMeasurements = 7}                      }'                      TotalMeasurements = 6 + 7                  }              };
Magic Number,ServiceControl.Monitoring.UnitTests.MonitoredEndpoints,AggregatorTests,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring.UnitTests\MonitoredEndpoints\AggregatorTests.cs,Total_measurements_per_second_are_merged_by_interval_start,The following statement contains a magic number: var intervals = new List<IntervalsStore<BreakdownId>.IntervalsBreakdown>              {                  new IntervalsStore<BreakdownId>.IntervalsBreakdown                  {                      Id = new BreakdownId {Id = 0}'                      Intervals = new[]                      {                          new IntervalsStore<BreakdownId>.TimeInterval {IntervalStart = now' TotalValue = ridiculouslyBigLong1' TotalMeasurements = 4}'                          new IntervalsStore<BreakdownId>.TimeInterval {IntervalStart = now.AddSeconds(2)' TotalValue = ridiculouslyBigLong2' TotalMeasurements = 5}                      }'                      TotalMeasurements = 4 + 5                  }'                  new IntervalsStore<BreakdownId>.IntervalsBreakdown                  {                      Id = new BreakdownId {Id = 0}'                      Intervals = new[]                      {                          new IntervalsStore<BreakdownId>.TimeInterval {IntervalStart = now' TotalValue = ridiculouslyBigLong1' TotalMeasurements = 6}'                          new IntervalsStore<BreakdownId>.TimeInterval {IntervalStart = now.AddSeconds(2)' TotalValue = ridiculouslyBigLong2' TotalMeasurements = 7}                      }'                      TotalMeasurements = 6 + 7                  }              };
Magic Number,ServiceControl.Monitoring.UnitTests.MonitoredEndpoints,AggregatorTests,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring.UnitTests\MonitoredEndpoints\AggregatorTests.cs,Total_measurements_per_second_are_merged_by_interval_start,The following statement contains a magic number: var intervals = new List<IntervalsStore<BreakdownId>.IntervalsBreakdown>              {                  new IntervalsStore<BreakdownId>.IntervalsBreakdown                  {                      Id = new BreakdownId {Id = 0}'                      Intervals = new[]                      {                          new IntervalsStore<BreakdownId>.TimeInterval {IntervalStart = now' TotalValue = ridiculouslyBigLong1' TotalMeasurements = 4}'                          new IntervalsStore<BreakdownId>.TimeInterval {IntervalStart = now.AddSeconds(2)' TotalValue = ridiculouslyBigLong2' TotalMeasurements = 5}                      }'                      TotalMeasurements = 4 + 5                  }'                  new IntervalsStore<BreakdownId>.IntervalsBreakdown                  {                      Id = new BreakdownId {Id = 0}'                      Intervals = new[]                      {                          new IntervalsStore<BreakdownId>.TimeInterval {IntervalStart = now' TotalValue = ridiculouslyBigLong1' TotalMeasurements = 6}'                          new IntervalsStore<BreakdownId>.TimeInterval {IntervalStart = now.AddSeconds(2)' TotalValue = ridiculouslyBigLong2' TotalMeasurements = 7}                      }'                      TotalMeasurements = 6 + 7                  }              };
Magic Number,ServiceControl.Monitoring.UnitTests.MonitoredEndpoints,AggregatorTests,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring.UnitTests\MonitoredEndpoints\AggregatorTests.cs,Total_measurements_per_second_are_merged_by_interval_start,The following statement contains a magic number: var intervals = new List<IntervalsStore<BreakdownId>.IntervalsBreakdown>              {                  new IntervalsStore<BreakdownId>.IntervalsBreakdown                  {                      Id = new BreakdownId {Id = 0}'                      Intervals = new[]                      {                          new IntervalsStore<BreakdownId>.TimeInterval {IntervalStart = now' TotalValue = ridiculouslyBigLong1' TotalMeasurements = 4}'                          new IntervalsStore<BreakdownId>.TimeInterval {IntervalStart = now.AddSeconds(2)' TotalValue = ridiculouslyBigLong2' TotalMeasurements = 5}                      }'                      TotalMeasurements = 4 + 5                  }'                  new IntervalsStore<BreakdownId>.IntervalsBreakdown                  {                      Id = new BreakdownId {Id = 0}'                      Intervals = new[]                      {                          new IntervalsStore<BreakdownId>.TimeInterval {IntervalStart = now' TotalValue = ridiculouslyBigLong1' TotalMeasurements = 6}'                          new IntervalsStore<BreakdownId>.TimeInterval {IntervalStart = now.AddSeconds(2)' TotalValue = ridiculouslyBigLong2' TotalMeasurements = 7}                      }'                      TotalMeasurements = 6 + 7                  }              };
Magic Number,ServiceControl.Monitoring.UnitTests.MonitoredEndpoints,AggregatorTests,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring.UnitTests\MonitoredEndpoints\AggregatorTests.cs,Total_measurements_per_second_are_merged_by_interval_start,The following statement contains a magic number: var intervals = new List<IntervalsStore<BreakdownId>.IntervalsBreakdown>              {                  new IntervalsStore<BreakdownId>.IntervalsBreakdown                  {                      Id = new BreakdownId {Id = 0}'                      Intervals = new[]                      {                          new IntervalsStore<BreakdownId>.TimeInterval {IntervalStart = now' TotalValue = ridiculouslyBigLong1' TotalMeasurements = 4}'                          new IntervalsStore<BreakdownId>.TimeInterval {IntervalStart = now.AddSeconds(2)' TotalValue = ridiculouslyBigLong2' TotalMeasurements = 5}                      }'                      TotalMeasurements = 4 + 5                  }'                  new IntervalsStore<BreakdownId>.IntervalsBreakdown                  {                      Id = new BreakdownId {Id = 0}'                      Intervals = new[]                      {                          new IntervalsStore<BreakdownId>.TimeInterval {IntervalStart = now' TotalValue = ridiculouslyBigLong1' TotalMeasurements = 6}'                          new IntervalsStore<BreakdownId>.TimeInterval {IntervalStart = now.AddSeconds(2)' TotalValue = ridiculouslyBigLong2' TotalMeasurements = 7}                      }'                      TotalMeasurements = 6 + 7                  }              };
Magic Number,ServiceControl.Monitoring.UnitTests.MonitoredEndpoints,AggregatorTests,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring.UnitTests\MonitoredEndpoints\AggregatorTests.cs,Total_measurements_per_second_are_merged_by_interval_start,The following statement contains a magic number: var intervals = new List<IntervalsStore<BreakdownId>.IntervalsBreakdown>              {                  new IntervalsStore<BreakdownId>.IntervalsBreakdown                  {                      Id = new BreakdownId {Id = 0}'                      Intervals = new[]                      {                          new IntervalsStore<BreakdownId>.TimeInterval {IntervalStart = now' TotalValue = ridiculouslyBigLong1' TotalMeasurements = 4}'                          new IntervalsStore<BreakdownId>.TimeInterval {IntervalStart = now.AddSeconds(2)' TotalValue = ridiculouslyBigLong2' TotalMeasurements = 5}                      }'                      TotalMeasurements = 4 + 5                  }'                  new IntervalsStore<BreakdownId>.IntervalsBreakdown                  {                      Id = new BreakdownId {Id = 0}'                      Intervals = new[]                      {                          new IntervalsStore<BreakdownId>.TimeInterval {IntervalStart = now' TotalValue = ridiculouslyBigLong1' TotalMeasurements = 6}'                          new IntervalsStore<BreakdownId>.TimeInterval {IntervalStart = now.AddSeconds(2)' TotalValue = ridiculouslyBigLong2' TotalMeasurements = 7}                      }'                      TotalMeasurements = 6 + 7                  }              };
Magic Number,ServiceControl.Monitoring.UnitTests.MonitoredEndpoints,AggregatorTests,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring.UnitTests\MonitoredEndpoints\AggregatorTests.cs,Total_measurements_per_second_are_merged_by_interval_start,The following statement contains a magic number: var period = HistoryPeriod.FromMinutes(5);
Magic Number,ServiceControl.Monitoring.UnitTests.MonitoredEndpoints,AggregatorTests,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring.UnitTests\MonitoredEndpoints\AggregatorTests.cs,Total_measurements_per_second_are_merged_by_interval_start,The following statement contains a magic number: Assert.AreEqual((4d + 5d + 6d + 7d) / 2 / seconds' values.Average);
Magic Number,ServiceControl.Monitoring.UnitTests.MonitoredEndpoints,AggregatorTests,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring.UnitTests\MonitoredEndpoints\AggregatorTests.cs,Total_measurements_per_second_are_merged_by_interval_start,The following statement contains a magic number: Assert.AreEqual((4d + 5d + 6d + 7d) / 2 / seconds' values.Average);
Magic Number,ServiceControl.Monitoring.UnitTests.MonitoredEndpoints,AggregatorTests,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring.UnitTests\MonitoredEndpoints\AggregatorTests.cs,Total_measurements_per_second_are_merged_by_interval_start,The following statement contains a magic number: Assert.AreEqual((4d + 5d + 6d + 7d) / 2 / seconds' values.Average);
Magic Number,ServiceControl.Monitoring.UnitTests.MonitoredEndpoints,AggregatorTests,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring.UnitTests\MonitoredEndpoints\AggregatorTests.cs,Total_measurements_per_second_are_merged_by_interval_start,The following statement contains a magic number: Assert.AreEqual((4d + 5d + 6d + 7d) / 2 / seconds' values.Average);
Magic Number,ServiceControl.Monitoring.UnitTests.MonitoredEndpoints,AggregatorTests,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring.UnitTests\MonitoredEndpoints\AggregatorTests.cs,Total_measurements_per_second_are_merged_by_interval_start,The following statement contains a magic number: Assert.AreEqual((4d + 5d + 6d + 7d) / 2 / seconds' values.Average);
Magic Number,ServiceControl.Monitoring.UnitTests.MonitoredEndpoints,AggregatorTests,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring.UnitTests\MonitoredEndpoints\AggregatorTests.cs,Total_measurements_per_second_are_merged_by_interval_start,The following statement contains a magic number: Assert.AreEqual(2' values.Points.Length);
Magic Number,ServiceControl.Monitoring.UnitTests.MonitoredEndpoints,AggregatorTests,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring.UnitTests\MonitoredEndpoints\AggregatorTests.cs,Total_measurements_per_second_are_merged_by_interval_start,The following statement contains a magic number: Assert.AreEqual((4d + 6d) / seconds' values.Points[0]);
Magic Number,ServiceControl.Monitoring.UnitTests.MonitoredEndpoints,AggregatorTests,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring.UnitTests\MonitoredEndpoints\AggregatorTests.cs,Total_measurements_per_second_are_merged_by_interval_start,The following statement contains a magic number: Assert.AreEqual((4d + 6d) / seconds' values.Points[0]);
Magic Number,ServiceControl.Monitoring.UnitTests.MonitoredEndpoints,AggregatorTests,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring.UnitTests\MonitoredEndpoints\AggregatorTests.cs,Total_measurements_per_second_are_merged_by_interval_start,The following statement contains a magic number: Assert.AreEqual((5d + 7d) / seconds' values.Points[1]);
Magic Number,ServiceControl.Monitoring.UnitTests.MonitoredEndpoints,AggregatorTests,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring.UnitTests\MonitoredEndpoints\AggregatorTests.cs,Total_measurements_per_second_are_merged_by_interval_start,The following statement contains a magic number: Assert.AreEqual((5d + 7d) / seconds' values.Points[1]);
Magic Number,ServiceControl.Monitoring.UnitTests.MonitoredEndpoints,AggregatorTests,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring.UnitTests\MonitoredEndpoints\AggregatorTests.cs,Total_measurements_per_second_are_sum_of_total_measurements_by_number_of_unique_intervals_by_seconds,The following statement contains a magic number: var intervals = new List<IntervalsStore<BreakdownId>.IntervalsBreakdown>              {                  new IntervalsStore<BreakdownId>.IntervalsBreakdown                  {                      Id = new BreakdownId {Id = 0}'                      Intervals = new[]                      {                          new IntervalsStore<BreakdownId>.TimeInterval {IntervalStart = now' TotalMeasurements = 7}'                          new IntervalsStore<BreakdownId>.TimeInterval {IntervalStart = now.AddSeconds(1)}                      }                  }'                  new IntervalsStore<BreakdownId>.IntervalsBreakdown                  {                      Id = new BreakdownId {Id = 0}'                      Intervals = new[]                      {                          new IntervalsStore<BreakdownId>.TimeInterval {IntervalStart = now}'                          new IntervalsStore<BreakdownId>.TimeInterval {IntervalStart = now.AddSeconds(1)' TotalMeasurements = 9}'                          new IntervalsStore<BreakdownId>.TimeInterval {IntervalStart = now}                      }                  }              };
Magic Number,ServiceControl.Monitoring.UnitTests.MonitoredEndpoints,AggregatorTests,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring.UnitTests\MonitoredEndpoints\AggregatorTests.cs,Total_measurements_per_second_are_sum_of_total_measurements_by_number_of_unique_intervals_by_seconds,The following statement contains a magic number: var intervals = new List<IntervalsStore<BreakdownId>.IntervalsBreakdown>              {                  new IntervalsStore<BreakdownId>.IntervalsBreakdown                  {                      Id = new BreakdownId {Id = 0}'                      Intervals = new[]                      {                          new IntervalsStore<BreakdownId>.TimeInterval {IntervalStart = now' TotalMeasurements = 7}'                          new IntervalsStore<BreakdownId>.TimeInterval {IntervalStart = now.AddSeconds(1)}                      }                  }'                  new IntervalsStore<BreakdownId>.IntervalsBreakdown                  {                      Id = new BreakdownId {Id = 0}'                      Intervals = new[]                      {                          new IntervalsStore<BreakdownId>.TimeInterval {IntervalStart = now}'                          new IntervalsStore<BreakdownId>.TimeInterval {IntervalStart = now.AddSeconds(1)' TotalMeasurements = 9}'                          new IntervalsStore<BreakdownId>.TimeInterval {IntervalStart = now}                      }                  }              };
Magic Number,ServiceControl.Monitoring.UnitTests.MonitoredEndpoints,AggregatorTests,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring.UnitTests\MonitoredEndpoints\AggregatorTests.cs,Total_measurements_per_second_are_sum_of_total_measurements_by_number_of_unique_intervals_by_seconds,The following statement contains a magic number: var period = HistoryPeriod.FromMinutes(5);
Magic Number,ServiceControl.Monitoring.UnitTests.MonitoredEndpoints,AggregatorTests,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring.UnitTests\MonitoredEndpoints\AggregatorTests.cs,Total_measurements_per_second_are_sum_of_total_measurements_by_number_of_unique_intervals_by_seconds,The following statement contains a magic number: Assert.AreEqual((7d + 9d) / 2 / seconds' values.Average);
Magic Number,ServiceControl.Monitoring.UnitTests.MonitoredEndpoints,AggregatorTests,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring.UnitTests\MonitoredEndpoints\AggregatorTests.cs,Total_measurements_per_second_are_sum_of_total_measurements_by_number_of_unique_intervals_by_seconds,The following statement contains a magic number: Assert.AreEqual((7d + 9d) / 2 / seconds' values.Average);
Magic Number,ServiceControl.Monitoring.UnitTests.MonitoredEndpoints,AggregatorTests,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring.UnitTests\MonitoredEndpoints\AggregatorTests.cs,Total_measurements_per_second_are_sum_of_total_measurements_by_number_of_unique_intervals_by_seconds,The following statement contains a magic number: Assert.AreEqual((7d + 9d) / 2 / seconds' values.Average);
Magic Number,ServiceControl.Monitoring.UnitTests.MonitoredEndpoints,QueueLengthAggregationTests,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring.UnitTests\MonitoredEndpoints\QueueLengthAggregationTests.cs,Point_value_is_sum_of_averages_per_input_queue,The following statement contains a magic number: var intervals = new List<IntervalsStore<EndpointInputQueue>.IntervalsBreakdown>              {                  new IntervalsStore<EndpointInputQueue>.IntervalsBreakdown                  {                      Id = new EndpointInputQueue(endpointName: ""' inputQueue: "queue-1")'                      Intervals = new[]                      {                          new IntervalsStore<EndpointInputQueue>.TimeInterval {IntervalStart = now' TotalValue = 3' TotalMeasurements = 4}'                          new IntervalsStore<EndpointInputQueue>.TimeInterval {IntervalStart = now.AddSeconds(1)' TotalValue = 2' TotalMeasurements = 3}                      }                  }'                  new IntervalsStore<EndpointInputQueue>.IntervalsBreakdown                  {                      Id = new EndpointInputQueue(endpointName: ""' inputQueue: "queue-2")'                      Intervals = new[]                      {                          new IntervalsStore<EndpointInputQueue>.TimeInterval {IntervalStart = now' TotalValue = 5' TotalMeasurements = 6}                      }                  }              };
Magic Number,ServiceControl.Monitoring.UnitTests.MonitoredEndpoints,QueueLengthAggregationTests,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring.UnitTests\MonitoredEndpoints\QueueLengthAggregationTests.cs,Point_value_is_sum_of_averages_per_input_queue,The following statement contains a magic number: var intervals = new List<IntervalsStore<EndpointInputQueue>.IntervalsBreakdown>              {                  new IntervalsStore<EndpointInputQueue>.IntervalsBreakdown                  {                      Id = new EndpointInputQueue(endpointName: ""' inputQueue: "queue-1")'                      Intervals = new[]                      {                          new IntervalsStore<EndpointInputQueue>.TimeInterval {IntervalStart = now' TotalValue = 3' TotalMeasurements = 4}'                          new IntervalsStore<EndpointInputQueue>.TimeInterval {IntervalStart = now.AddSeconds(1)' TotalValue = 2' TotalMeasurements = 3}                      }                  }'                  new IntervalsStore<EndpointInputQueue>.IntervalsBreakdown                  {                      Id = new EndpointInputQueue(endpointName: ""' inputQueue: "queue-2")'                      Intervals = new[]                      {                          new IntervalsStore<EndpointInputQueue>.TimeInterval {IntervalStart = now' TotalValue = 5' TotalMeasurements = 6}                      }                  }              };
Magic Number,ServiceControl.Monitoring.UnitTests.MonitoredEndpoints,QueueLengthAggregationTests,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring.UnitTests\MonitoredEndpoints\QueueLengthAggregationTests.cs,Point_value_is_sum_of_averages_per_input_queue,The following statement contains a magic number: var intervals = new List<IntervalsStore<EndpointInputQueue>.IntervalsBreakdown>              {                  new IntervalsStore<EndpointInputQueue>.IntervalsBreakdown                  {                      Id = new EndpointInputQueue(endpointName: ""' inputQueue: "queue-1")'                      Intervals = new[]                      {                          new IntervalsStore<EndpointInputQueue>.TimeInterval {IntervalStart = now' TotalValue = 3' TotalMeasurements = 4}'                          new IntervalsStore<EndpointInputQueue>.TimeInterval {IntervalStart = now.AddSeconds(1)' TotalValue = 2' TotalMeasurements = 3}                      }                  }'                  new IntervalsStore<EndpointInputQueue>.IntervalsBreakdown                  {                      Id = new EndpointInputQueue(endpointName: ""' inputQueue: "queue-2")'                      Intervals = new[]                      {                          new IntervalsStore<EndpointInputQueue>.TimeInterval {IntervalStart = now' TotalValue = 5' TotalMeasurements = 6}                      }                  }              };
Magic Number,ServiceControl.Monitoring.UnitTests.MonitoredEndpoints,QueueLengthAggregationTests,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring.UnitTests\MonitoredEndpoints\QueueLengthAggregationTests.cs,Point_value_is_sum_of_averages_per_input_queue,The following statement contains a magic number: var intervals = new List<IntervalsStore<EndpointInputQueue>.IntervalsBreakdown>              {                  new IntervalsStore<EndpointInputQueue>.IntervalsBreakdown                  {                      Id = new EndpointInputQueue(endpointName: ""' inputQueue: "queue-1")'                      Intervals = new[]                      {                          new IntervalsStore<EndpointInputQueue>.TimeInterval {IntervalStart = now' TotalValue = 3' TotalMeasurements = 4}'                          new IntervalsStore<EndpointInputQueue>.TimeInterval {IntervalStart = now.AddSeconds(1)' TotalValue = 2' TotalMeasurements = 3}                      }                  }'                  new IntervalsStore<EndpointInputQueue>.IntervalsBreakdown                  {                      Id = new EndpointInputQueue(endpointName: ""' inputQueue: "queue-2")'                      Intervals = new[]                      {                          new IntervalsStore<EndpointInputQueue>.TimeInterval {IntervalStart = now' TotalValue = 5' TotalMeasurements = 6}                      }                  }              };
Magic Number,ServiceControl.Monitoring.UnitTests.MonitoredEndpoints,QueueLengthAggregationTests,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring.UnitTests\MonitoredEndpoints\QueueLengthAggregationTests.cs,Point_value_is_sum_of_averages_per_input_queue,The following statement contains a magic number: var intervals = new List<IntervalsStore<EndpointInputQueue>.IntervalsBreakdown>              {                  new IntervalsStore<EndpointInputQueue>.IntervalsBreakdown                  {                      Id = new EndpointInputQueue(endpointName: ""' inputQueue: "queue-1")'                      Intervals = new[]                      {                          new IntervalsStore<EndpointInputQueue>.TimeInterval {IntervalStart = now' TotalValue = 3' TotalMeasurements = 4}'                          new IntervalsStore<EndpointInputQueue>.TimeInterval {IntervalStart = now.AddSeconds(1)' TotalValue = 2' TotalMeasurements = 3}                      }                  }'                  new IntervalsStore<EndpointInputQueue>.IntervalsBreakdown                  {                      Id = new EndpointInputQueue(endpointName: ""' inputQueue: "queue-2")'                      Intervals = new[]                      {                          new IntervalsStore<EndpointInputQueue>.TimeInterval {IntervalStart = now' TotalValue = 5' TotalMeasurements = 6}                      }                  }              };
Magic Number,ServiceControl.Monitoring.UnitTests.MonitoredEndpoints,QueueLengthAggregationTests,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring.UnitTests\MonitoredEndpoints\QueueLengthAggregationTests.cs,Point_value_is_sum_of_averages_per_input_queue,The following statement contains a magic number: var intervals = new List<IntervalsStore<EndpointInputQueue>.IntervalsBreakdown>              {                  new IntervalsStore<EndpointInputQueue>.IntervalsBreakdown                  {                      Id = new EndpointInputQueue(endpointName: ""' inputQueue: "queue-1")'                      Intervals = new[]                      {                          new IntervalsStore<EndpointInputQueue>.TimeInterval {IntervalStart = now' TotalValue = 3' TotalMeasurements = 4}'                          new IntervalsStore<EndpointInputQueue>.TimeInterval {IntervalStart = now.AddSeconds(1)' TotalValue = 2' TotalMeasurements = 3}                      }                  }'                  new IntervalsStore<EndpointInputQueue>.IntervalsBreakdown                  {                      Id = new EndpointInputQueue(endpointName: ""' inputQueue: "queue-2")'                      Intervals = new[]                      {                          new IntervalsStore<EndpointInputQueue>.TimeInterval {IntervalStart = now' TotalValue = 5' TotalMeasurements = 6}                      }                  }              };
Magic Number,ServiceControl.Monitoring.UnitTests.MonitoredEndpoints,QueueLengthAggregationTests,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring.UnitTests\MonitoredEndpoints\QueueLengthAggregationTests.cs,Point_value_is_sum_of_averages_per_input_queue,The following statement contains a magic number: var values = Aggregator.ToRoundedSumOfBreakdownAverages(intervals' HistoryPeriod.FromMinutes(5));
Magic Number,ServiceControl.Monitoring.UnitTests.MonitoredEndpoints,QueueLengthAggregationTests,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring.UnitTests\MonitoredEndpoints\QueueLengthAggregationTests.cs,Point_value_is_sum_of_averages_per_input_queue,The following statement contains a magic number: Assert.AreEqual(Math.Round(3d / 4d + 5d / 6d)' values.Points[0]);
Magic Number,ServiceControl.Monitoring.UnitTests.MonitoredEndpoints,QueueLengthAggregationTests,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring.UnitTests\MonitoredEndpoints\QueueLengthAggregationTests.cs,Point_value_is_sum_of_averages_per_input_queue,The following statement contains a magic number: Assert.AreEqual(Math.Round(3d / 4d + 5d / 6d)' values.Points[0]);
Magic Number,ServiceControl.Monitoring.UnitTests.MonitoredEndpoints,QueueLengthAggregationTests,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring.UnitTests\MonitoredEndpoints\QueueLengthAggregationTests.cs,Point_value_is_sum_of_averages_per_input_queue,The following statement contains a magic number: Assert.AreEqual(Math.Round(3d / 4d + 5d / 6d)' values.Points[0]);
Magic Number,ServiceControl.Monitoring.UnitTests.MonitoredEndpoints,QueueLengthAggregationTests,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring.UnitTests\MonitoredEndpoints\QueueLengthAggregationTests.cs,Point_value_is_sum_of_averages_per_input_queue,The following statement contains a magic number: Assert.AreEqual(Math.Round(3d / 4d + 5d / 6d)' values.Points[0]);
Magic Number,ServiceControl.Monitoring.UnitTests.MonitoredEndpoints,QueueLengthAggregationTests,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring.UnitTests\MonitoredEndpoints\QueueLengthAggregationTests.cs,Point_value_is_sum_of_averages_per_input_queue,The following statement contains a magic number: Assert.AreEqual(Math.Round(2d / 3d)' values.Points[1]);
Magic Number,ServiceControl.Monitoring.UnitTests.MonitoredEndpoints,QueueLengthAggregationTests,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring.UnitTests\MonitoredEndpoints\QueueLengthAggregationTests.cs,Point_value_is_sum_of_averages_per_input_queue,The following statement contains a magic number: Assert.AreEqual(Math.Round(2d / 3d)' values.Points[1]);
Magic Number,ServiceControl.Monitoring.UnitTests.MonitoredEndpoints,QueueLengthAggregationTests,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring.UnitTests\MonitoredEndpoints\QueueLengthAggregationTests.cs,Total_average_is_sum_of_averages_per_input_queue,The following statement contains a magic number: var intervals = new List<IntervalsStore<EndpointInputQueue>.IntervalsBreakdown>              {                  new IntervalsStore<EndpointInputQueue>.IntervalsBreakdown                  {                      Id = new EndpointInputQueue(endpointName: ""' inputQueue: "queue-1")'                      TotalValue = 3'                      TotalMeasurements = 1'                      Intervals = EmptyIntervals                  }'                  new IntervalsStore<EndpointInputQueue>.IntervalsBreakdown                  {                      Id = new EndpointInputQueue(endpointName: ""' inputQueue: "queue-2")'                      TotalValue = 41'                      TotalMeasurements = 5'                      Intervals = EmptyIntervals                  }              };
Magic Number,ServiceControl.Monitoring.UnitTests.MonitoredEndpoints,QueueLengthAggregationTests,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring.UnitTests\MonitoredEndpoints\QueueLengthAggregationTests.cs,Total_average_is_sum_of_averages_per_input_queue,The following statement contains a magic number: var intervals = new List<IntervalsStore<EndpointInputQueue>.IntervalsBreakdown>              {                  new IntervalsStore<EndpointInputQueue>.IntervalsBreakdown                  {                      Id = new EndpointInputQueue(endpointName: ""' inputQueue: "queue-1")'                      TotalValue = 3'                      TotalMeasurements = 1'                      Intervals = EmptyIntervals                  }'                  new IntervalsStore<EndpointInputQueue>.IntervalsBreakdown                  {                      Id = new EndpointInputQueue(endpointName: ""' inputQueue: "queue-2")'                      TotalValue = 41'                      TotalMeasurements = 5'                      Intervals = EmptyIntervals                  }              };
Magic Number,ServiceControl.Monitoring.UnitTests.MonitoredEndpoints,QueueLengthAggregationTests,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring.UnitTests\MonitoredEndpoints\QueueLengthAggregationTests.cs,Total_average_is_sum_of_averages_per_input_queue,The following statement contains a magic number: var intervals = new List<IntervalsStore<EndpointInputQueue>.IntervalsBreakdown>              {                  new IntervalsStore<EndpointInputQueue>.IntervalsBreakdown                  {                      Id = new EndpointInputQueue(endpointName: ""' inputQueue: "queue-1")'                      TotalValue = 3'                      TotalMeasurements = 1'                      Intervals = EmptyIntervals                  }'                  new IntervalsStore<EndpointInputQueue>.IntervalsBreakdown                  {                      Id = new EndpointInputQueue(endpointName: ""' inputQueue: "queue-2")'                      TotalValue = 41'                      TotalMeasurements = 5'                      Intervals = EmptyIntervals                  }              };
Magic Number,ServiceControl.Monitoring.UnitTests.MonitoredEndpoints,QueueLengthAggregationTests,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring.UnitTests\MonitoredEndpoints\QueueLengthAggregationTests.cs,Total_average_is_sum_of_averages_per_input_queue,The following statement contains a magic number: var values = Aggregator.ToRoundedSumOfBreakdownAverages(intervals' HistoryPeriod.FromMinutes(5));
Magic Number,ServiceControl.Monitoring.UnitTests.MonitoredEndpoints,QueueLengthAggregationTests,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring.UnitTests\MonitoredEndpoints\QueueLengthAggregationTests.cs,Total_average_is_sum_of_averages_per_input_queue,The following statement contains a magic number: Assert.AreEqual(Math.Round(3d / 1d + 41d / 5d)' values.Average);
Magic Number,ServiceControl.Monitoring.UnitTests.MonitoredEndpoints,QueueLengthAggregationTests,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring.UnitTests\MonitoredEndpoints\QueueLengthAggregationTests.cs,Total_average_is_sum_of_averages_per_input_queue,The following statement contains a magic number: Assert.AreEqual(Math.Round(3d / 1d + 41d / 5d)' values.Average);
Magic Number,ServiceControl.Monitoring.UnitTests.MonitoredEndpoints,QueueLengthAggregationTests,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring.UnitTests\MonitoredEndpoints\QueueLengthAggregationTests.cs,Total_average_is_sum_of_averages_per_input_queue,The following statement contains a magic number: Assert.AreEqual(Math.Round(3d / 1d + 41d / 5d)' values.Average);
Magic Number,ServiceControl.Monitoring.UnitTests.MonitoredEndpoints,QueueLengthAggregationTests,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring.UnitTests\MonitoredEndpoints\QueueLengthAggregationTests.cs,Intervals_are_merged_by_interval_start,The following statement contains a magic number: var intervals = new List<IntervalsStore<EndpointInputQueue>.IntervalsBreakdown>              {                  new IntervalsStore<EndpointInputQueue>.IntervalsBreakdown                  {                      Id = new EndpointInputQueue(endpointName: ""' inputQueue: "queue-1")'                      Intervals = new[]                      {                          new IntervalsStore<EndpointInputQueue>.TimeInterval {IntervalStart = now}'                          new IntervalsStore<EndpointInputQueue>.TimeInterval {IntervalStart = now.AddSeconds(2)}                      }                  }'                  new IntervalsStore<EndpointInputQueue>.IntervalsBreakdown                  {                      Id = new EndpointInputQueue(endpointName: ""' inputQueue: "queue-2")'                      Intervals = new[]                      {                          new IntervalsStore<EndpointInputQueue>.TimeInterval {IntervalStart = now}'                          new IntervalsStore<EndpointInputQueue>.TimeInterval {IntervalStart = now.AddSeconds(2)}'                          new IntervalsStore<EndpointInputQueue>.TimeInterval {IntervalStart = now.AddSeconds(3)}                      }                  }              };
Magic Number,ServiceControl.Monitoring.UnitTests.MonitoredEndpoints,QueueLengthAggregationTests,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring.UnitTests\MonitoredEndpoints\QueueLengthAggregationTests.cs,Intervals_are_merged_by_interval_start,The following statement contains a magic number: var intervals = new List<IntervalsStore<EndpointInputQueue>.IntervalsBreakdown>              {                  new IntervalsStore<EndpointInputQueue>.IntervalsBreakdown                  {                      Id = new EndpointInputQueue(endpointName: ""' inputQueue: "queue-1")'                      Intervals = new[]                      {                          new IntervalsStore<EndpointInputQueue>.TimeInterval {IntervalStart = now}'                          new IntervalsStore<EndpointInputQueue>.TimeInterval {IntervalStart = now.AddSeconds(2)}                      }                  }'                  new IntervalsStore<EndpointInputQueue>.IntervalsBreakdown                  {                      Id = new EndpointInputQueue(endpointName: ""' inputQueue: "queue-2")'                      Intervals = new[]                      {                          new IntervalsStore<EndpointInputQueue>.TimeInterval {IntervalStart = now}'                          new IntervalsStore<EndpointInputQueue>.TimeInterval {IntervalStart = now.AddSeconds(2)}'                          new IntervalsStore<EndpointInputQueue>.TimeInterval {IntervalStart = now.AddSeconds(3)}                      }                  }              };
Magic Number,ServiceControl.Monitoring.UnitTests.MonitoredEndpoints,QueueLengthAggregationTests,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring.UnitTests\MonitoredEndpoints\QueueLengthAggregationTests.cs,Intervals_are_merged_by_interval_start,The following statement contains a magic number: var intervals = new List<IntervalsStore<EndpointInputQueue>.IntervalsBreakdown>              {                  new IntervalsStore<EndpointInputQueue>.IntervalsBreakdown                  {                      Id = new EndpointInputQueue(endpointName: ""' inputQueue: "queue-1")'                      Intervals = new[]                      {                          new IntervalsStore<EndpointInputQueue>.TimeInterval {IntervalStart = now}'                          new IntervalsStore<EndpointInputQueue>.TimeInterval {IntervalStart = now.AddSeconds(2)}                      }                  }'                  new IntervalsStore<EndpointInputQueue>.IntervalsBreakdown                  {                      Id = new EndpointInputQueue(endpointName: ""' inputQueue: "queue-2")'                      Intervals = new[]                      {                          new IntervalsStore<EndpointInputQueue>.TimeInterval {IntervalStart = now}'                          new IntervalsStore<EndpointInputQueue>.TimeInterval {IntervalStart = now.AddSeconds(2)}'                          new IntervalsStore<EndpointInputQueue>.TimeInterval {IntervalStart = now.AddSeconds(3)}                      }                  }              };
Magic Number,ServiceControl.Monitoring.UnitTests.MonitoredEndpoints,QueueLengthAggregationTests,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring.UnitTests\MonitoredEndpoints\QueueLengthAggregationTests.cs,Intervals_are_merged_by_interval_start,The following statement contains a magic number: var values = Aggregator.ToRoundedSumOfBreakdownAverages(intervals' HistoryPeriod.FromMinutes(5));
Magic Number,ServiceControl.Monitoring.UnitTests.MonitoredEndpoints,QueueLengthAggregationTests,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring.UnitTests\MonitoredEndpoints\QueueLengthAggregationTests.cs,Intervals_are_merged_by_interval_start,The following statement contains a magic number: Assert.AreEqual(3' values.Points.Length);
