Implementation smell,Namespace,Class,File,Method,Description
Long Method,ServiceControl.Config.Commands,UpgradeServiceControlInstanceCommand,C:\repos\Particular_ServiceControl\src\ServiceControl.Config\Commands\UpgradeServiceControlInstanceCommand.cs,ExecuteAsync,The method has 124 lines of code.
Complex Method,ServiceControl.Config.Commands,UpgradeServiceControlInstanceCommand,C:\repos\Particular_ServiceControl\src\ServiceControl.Config\Commands\UpgradeServiceControlInstanceCommand.cs,ExecuteAsync,Cyclomatic complexity of the method is 13
Complex Method,ServiceControl.Config.Xaml.Behaviours,StylizedBehaviors,C:\repos\Particular_ServiceControl\src\ServiceControl.Config\Xaml\Behaviours\StylizedBehaviors.cs,OnPropertyChanged,Cyclomatic complexity of the method is 9
Long Parameter List,ServiceControl.Config.Commands,SelectPathCommand,C:\repos\Particular_ServiceControl\src\ServiceControl.Config\Commands\SelectPathCommand.cs,SelectPathCommand,The method has 5 parameters. Parameters: setPath' title' isFolderPicker' filters' defaultPath
Long Parameter List,ServiceControl.Config.Framework,IWindowManagerEx,C:\repos\Particular_ServiceControl\src\ServiceControl.Config\Framework\WindowManagerEx.cs,ShowYesNoCancelDialog,The method has 5 parameters. Parameters: title' message' question' yesText' noText
Long Parameter List,ServiceControl.Config.Framework,IWindowManagerEx,C:\repos\Particular_ServiceControl\src\ServiceControl.Config\Framework\WindowManagerEx.cs,ShowYesNoDialog,The method has 5 parameters. Parameters: title' message' question' yesText' noText
Long Parameter List,ServiceControl.Config.Framework,WindowManagerEx,C:\repos\Particular_ServiceControl\src\ServiceControl.Config\Framework\WindowManagerEx.cs,ShowYesNoCancelDialog,The method has 5 parameters. Parameters: title' message' question' yesText' noText
Long Parameter List,ServiceControl.Config.Framework,WindowManagerEx,C:\repos\Particular_ServiceControl\src\ServiceControl.Config\Framework\WindowManagerEx.cs,ShowYesNoDialog,The method has 5 parameters. Parameters: title' message' question' yesText' noText
Long Parameter List,ServiceControl.Config.UI.MessageBox,SliderDialogViewModel,C:\repos\Particular_ServiceControl\src\ServiceControl.Config\UI\MessageBox\SliderDialogViewModel.cs,SliderDialogViewModel,The method has 10 parameters. Parameters: title' message' periodHeader' periodExplanation' periodUnits' periodMinimumUnits' periodMaximumUnits' periodSmallStep' periodLargeStep' currentValue
Long Parameter List,ServiceControl.Config.UI.MessageBox,YesNoCancelViewModel,C:\repos\Particular_ServiceControl\src\ServiceControl.Config\UI\MessageBox\YesNoCancelDialogViewModel.cs,YesNoCancelViewModel,The method has 5 parameters. Parameters: title' message' question' yesText' noText
Long Parameter List,ServiceControl.Config.UI.Shell,FeedBackAttachment,C:\repos\Particular_ServiceControl\src\ServiceControl.Config\UI\Shell\FeedBackAttachment.cs,FeedBackAttachment,The method has 5 parameters. Parameters: raygunFeedBack' windowManager' feedBackFactory' feedBackResultFactory' feedBackNoticeFactory
Long Parameter List,ServiceControl.Config.UI.Shell,ShellViewModel,C:\repos\Particular_ServiceControl\src\ServiceControl.Config\UI\Shell\ShellViewModel.cs,ShellViewModel,The method has 6 parameters. Parameters: noInstances' listInstances' addInstance' addMonitoringInstance' openLicense' eventAggregator
Long Parameter List,ServiceControl.Config.Xaml.Behaviours,BorderlessWindowBehavior,C:\repos\Particular_ServiceControl\src\ServiceControl.Config\Xaml\Behaviours\BorderlessWindowBehavior.cs,HwndHook,The method has 5 parameters. Parameters: hWnd' message' wParam' lParam' handled
Long Parameter List,ServiceControl.Config.UI.InstanceDetails,InstanceDetailsViewModel,C:\repos\Particular_ServiceControl\src\ServiceControl.Config\UI\InstanceDetails\InstanceDetailsViewModel.cs,InstanceDetailsViewModel,The method has 9 parameters. Parameters: instance' showEditServiceControlScreenCommand' showEditMonitoringScreenCommand' upgradeServiceControlCommand' upgradeMonitoringCommand' advancedOptionsMonitoringCommand' advancedOptionsServiceControlCommand' serviceControlinstaller' monitoringinstaller
Long Identifier,ServiceControl.Config.Validation,Validations,C:\repos\Particular_ServiceControl\src\ServiceControl.Config\Validation\Validations.cs,,The length of the parameter MSG_THIS_TRANSPORT_REQUIRES_A_CONNECTION_STRING is 47.
Long Identifier,ServiceControl.Config.Validation,Validations,C:\repos\Particular_ServiceControl\src\ServiceControl.Config\Validation\Validations.cs,,The length of the parameter WRN_HOSTNAME_SHOULD_BE_LOCALHOST is 32.
Long Identifier,ServiceControl.Config.UI.InstanceDetails,InstanceDetailsViewModel,C:\repos\Particular_ServiceControl\src\ServiceControl.Config\UI\InstanceDetails\InstanceDetailsViewModel.cs,InstanceDetailsViewModel,The length of the parameter showEditServiceControlScreenCommand is 35.
Long Identifier,ServiceControl.Config.UI.InstanceDetails,InstanceDetailsViewModel,C:\repos\Particular_ServiceControl\src\ServiceControl.Config\UI\InstanceDetails\InstanceDetailsViewModel.cs,InstanceDetailsViewModel,The length of the parameter showEditMonitoringScreenCommand is 31.
Long Identifier,ServiceControl.Config.UI.InstanceDetails,InstanceDetailsViewModel,C:\repos\Particular_ServiceControl\src\ServiceControl.Config\UI\InstanceDetails\InstanceDetailsViewModel.cs,InstanceDetailsViewModel,The length of the parameter advancedOptionsMonitoringCommand is 32.
Long Identifier,ServiceControl.Config.UI.InstanceDetails,InstanceDetailsViewModel,C:\repos\Particular_ServiceControl\src\ServiceControl.Config\UI\InstanceDetails\InstanceDetailsViewModel.cs,InstanceDetailsViewModel,The length of the parameter advancedOptionsServiceControlCommand is 36.
Long Statement,ServiceControl.Config,AppBootstrapper,C:\repos\Particular_ServiceControl\src\ServiceControl.Config\AppBootstrapper.cs,ApplyBindingCulture,The length of the statement  "            FrameworkElement.LanguageProperty.OverrideMetadata(typeof(FrameworkElement)' new FrameworkPropertyMetadata(XmlLanguage.GetLanguage(CultureInfo.CurrentCulture.IetfLanguageTag))); " is 177.
Long Statement,ServiceControl.Config,AppBootstrapper,C:\repos\Particular_ServiceControl\src\ServiceControl.Config\AppBootstrapper.cs,DisableRxUIDebuggerBreak,The length of the statement  "                        "An OnError occurred on an object (usually ObservableAsPropertyHelper) that would break a binding or command. To prevent this' Subscribe to the ThrownExceptions property of your objects"' " is 187.
Long Statement,ServiceControl.Config.Commands,AddMonitoringInstanceCommand,C:\repos\Particular_ServiceControl\src\ServiceControl.Config\Commands\AddMonitoringInstanceCommand.cs,Execute,The length of the statement  "                    windowManager.ShowMessage("LICENSE ERROR"' $"Install could not continue due to an issue with the current license. {licenseCheckResult.Message}.  Contact sales@particular.net"' hideCancel: true); " is 194.
Long Statement,ServiceControl.Config.Commands,AddServiceControlInstanceCommand,C:\repos\Particular_ServiceControl\src\ServiceControl.Config\Commands\AddServiceControlInstanceCommand.cs,Execute,The length of the statement  "                    windowManager.ShowMessage("LICENSE ERROR"' $"Install could not continue due to an issue with the current license. {licenseCheckResult.Message}.  Contact sales@particular.net"' hideCancel: true); " is 194.
Long Statement,ServiceControl.Config.Commands,DeleteMonitoringlnstanceCommand,C:\repos\Particular_ServiceControl\src\ServiceControl.Config\Commands\DeleteMonitoringlnstanceCommand.cs,ExecuteAsync,The length of the statement  "                        windowManager.ShowActionReport(reportCard' "ISSUES REMOVING INSTANCE"' "Could not remove instance because of the following errors:"' "There were some warnings while deleting the instance:"); " is 190.
Long Statement,ServiceControl.Config.Commands,OpenURLCommand,C:\repos\Particular_ServiceControl\src\ServiceControl.Config\Commands\OpenURLCommand.cs,Execute,The length of the statement  "                MessageBox.Show("Unable to open the directory in Windows Explorer. The directory does not exist or access is denied"' "Directory not available"' MessageBoxButton.OK' MessageBoxImage.Error); " is 189.
Long Statement,ServiceControl.Config.Commands,DeleteServiceControlInstanceCommand,C:\repos\Particular_ServiceControl\src\ServiceControl.Config\Commands\DeleteServiceControlInstanceCommand.cs,ExecuteAsync,The length of the statement  "                    var reportCard = await Task.Run(() => installer.Delete(model.Name' confirmation.RemoveDatabase' confirmation.RemoveLogs' progress)); " is 132.
Long Statement,ServiceControl.Config.Commands,DeleteServiceControlInstanceCommand,C:\repos\Particular_ServiceControl\src\ServiceControl.Config\Commands\DeleteServiceControlInstanceCommand.cs,ExecuteAsync,The length of the statement  "                        windowManager.ShowActionReport(reportCard' "ISSUES REMOVING INSTANCE"' "Could not remove instance because of the following errors:"' "There were some warnings while deleting the instance:"); " is 190.
Long Statement,ServiceControl.Config.Commands,StartServiceControlInMaintenanceModeCommand,C:\repos\Particular_ServiceControl\src\ServiceControl.Config\Commands\StartServiceControlInMaintenanceModeCommand.cs,ExecuteAsync,The length of the statement  "                          windowManager.ShowYesNoDialog("STOP INSTANCE AND START IN MAINTENANCE MODE"' $"{model.Name} needs to be stopped in order to start in Maintenance Mode."' "Do you want to proceed?"' "Yes I want to proceed"' "No"); " is 211.
Long Statement,ServiceControl.Config.Commands,StartServiceControlInMaintenanceModeCommand,C:\repos\Particular_ServiceControl\src\ServiceControl.Config\Commands\StartServiceControlInMaintenanceModeCommand.cs,ExecuteAsync,The length of the statement  "                        windowManager.ShowActionReport(reportCard' "ISSUES STARTING INSTANCE IN MAINTENANCE MODE"' "There were some errors when attempting to start instance in Maintenance Mode:"); " is 172.
Long Statement,ServiceControl.Config.Commands,StartServiceControlInMaintenanceModeCommand,C:\repos\Particular_ServiceControl\src\ServiceControl.Config\Commands\StartServiceControlInMaintenanceModeCommand.cs,ExecuteAsync,The length of the statement  "                        windowManager.ShowActionReport(reportCard' "ISSUES STARTING INSTANCE IN MAINTENANCE MODE"' "There were some warnings when attempting to start instance in Maintenance Mode:"); " is 174.
Long Statement,ServiceControl.Config.Commands,UpgradeMonitoringInstanceCommand,C:\repos\Particular_ServiceControl\src\ServiceControl.Config\Commands\UpgradeMonitoringInstanceCommand.cs,ExecuteAsync,The length of the statement  "                    windowManager.ShowMessage("LICENSE ERROR"' $"Upgrade could not continue due to an issue with the current license. {licenseCheckResult.Message}.  Contact sales@particular.net"' hideCancel: true); " is 194.
Long Statement,ServiceControl.Config.Commands,UpgradeMonitoringInstanceCommand,C:\repos\Particular_ServiceControl\src\ServiceControl.Config\Commands\UpgradeMonitoringInstanceCommand.cs,ExecuteAsync,The length of the statement  "                          windowManager.ShowYesNoDialog($"STOP INSTANCE AND UPGRADE TO {installer.ZipInfo.Version}"' $"{model.Name} needs to be stopped in order to upgrade to version {installer.ZipInfo.Version}."' "Do you want to proceed?"' "Yes I want to proceed"' "No"); " is 246.
Long Statement,ServiceControl.Config.Commands,UpgradeMonitoringInstanceCommand,C:\repos\Particular_ServiceControl\src\ServiceControl.Config\Commands\UpgradeMonitoringInstanceCommand.cs,ExecuteAsync,The length of the statement  "                        windowManager.ShowActionReport(reportCard' "ISSUES UPGRADING INSTANCE"' "Could not upgrade instance because of the following errors:"); " is 135.
Long Statement,ServiceControl.Config.Commands,UpgradeMonitoringInstanceCommand,C:\repos\Particular_ServiceControl\src\ServiceControl.Config\Commands\UpgradeMonitoringInstanceCommand.cs,ExecuteAsync,The length of the statement  "                        windowManager.ShowActionReport(reportCard' "ISSUES UPGRADING INSTANCE"' "Could not upgrade instance because of the following errors:"' "There were some warnings while upgrading the instance:"); " is 193.
Long Statement,ServiceControl.Config.Commands,UpgradeServiceControlInstanceCommand,C:\repos\Particular_ServiceControl\src\ServiceControl.Config\Commands\UpgradeServiceControlInstanceCommand.cs,ExecuteAsync,The length of the statement  "                    windowManager.ShowMessage("LICENSE ERROR"' $"Upgrade could not continue due to an issue with the current license. {licenseCheckResult.Message}.  Contact sales@particular.net"' hideCancel: true); " is 194.
Long Statement,ServiceControl.Config.Commands,UpgradeServiceControlInstanceCommand,C:\repos\Particular_ServiceControl\src\ServiceControl.Config\Commands\UpgradeServiceControlInstanceCommand.cs,ExecuteAsync,The length of the statement  "                var result  = windowManager.ShowYesNoCancelDialog("UPGRADE QUESTION - DISABLE ERROR FORWARDING"' "Error messages can be forwarded to a secondary error queue known as the Error Forwarding Queue. This queue exists to allow external tools to receive error messages. If you do not have a tool processing messages from the Error Forwarding Queue this setting should be disabled."' "So what do you want to do ?"' "Do NOT forward"' "Yes I want to forward"); " is 450.
Long Statement,ServiceControl.Config.Commands,UpgradeServiceControlInstanceCommand,C:\repos\Particular_ServiceControl\src\ServiceControl.Config\Commands\UpgradeServiceControlInstanceCommand.cs,ExecuteAsync,The length of the statement  "                          windowManager.ShowYesNoDialog($"STOP INSTANCE AND UPGRADE TO {installer.ZipInfo.Version}"' $"{model.Name} needs to be stopped in order to upgrade to version {installer.ZipInfo.Version}."' "Do you want to proceed?"' "Yes I want to proceed"' "No"); " is 246.
Long Statement,ServiceControl.Config.Commands,UpgradeServiceControlInstanceCommand,C:\repos\Particular_ServiceControl\src\ServiceControl.Config\Commands\UpgradeServiceControlInstanceCommand.cs,ExecuteAsync,The length of the statement  "                        windowManager.ShowActionReport(reportCard' "ISSUES UPGRADING INSTANCE"' "Could not upgrade instance because of the following errors:"); " is 135.
Long Statement,ServiceControl.Config.Commands,UpgradeServiceControlInstanceCommand,C:\repos\Particular_ServiceControl\src\ServiceControl.Config\Commands\UpgradeServiceControlInstanceCommand.cs,ExecuteAsync,The length of the statement  "                        windowManager.ShowActionReport(reportCard' "ISSUES UPGRADING INSTANCE"' "Could not upgrade instance because of the following errors:"' "There were some warnings while upgrading the instance:"); " is 193.
Long Statement,ServiceControl.Config.Extensions,ValidatorExtensions,C:\repos\Particular_ServiceControl\src\ServiceControl.Config\Extensions\ValidatorExtensions.cs,Validate,The length of the statement  "            return Validate(validator' new ValidationContext(instance' new PropertyChain()' new DefaultValidatorSelector())' propertyName); " is 127.
Long Statement,ServiceControl.Config.Framework,RaygunFeedback,C:\repos\Particular_ServiceControl\src\ServiceControl.Config\Framework\RaygunFeedback.cs,InitializeTrackingId,The length of the statement  "            var trackerlocation = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData)' @"Particular"); " is 125.
Long Statement,ServiceControl.Config.Framework.Modules,ServiceControlInstanceInstaller,C:\repos\Particular_ServiceControl\src\ServiceControl.Config\Framework\Modules\InstallerModule.cs,Add,The length of the statement  "                    instanceInstaller.ReportCard.Warnings.Add($"New instance did not startup - please check configuration for {instance.Name}"); " is 124.
Long Statement,ServiceControl.Config.Framework.Modules,ServiceControlInstanceInstaller,C:\repos\Particular_ServiceControl\src\ServiceControl.Config\Framework\Modules\InstallerModule.cs,Update,The length of the statement  "                        instance.ReportCard.Warnings.Add($"Service did not start after changes - please check configuration for {instance.Name}"); " is 122.
Long Statement,ServiceControl.Config.Framework.Modules,ServiceControlInstanceInstaller,C:\repos\Particular_ServiceControl\src\ServiceControl.Config\Framework\Modules\InstallerModule.cs,CheckLicenseIsValid,The length of the statement  "                    return new CheckLicenseResult(false' "License does not cover this release of ServiceControl. Upgrade protection expired"); " is 122.
Long Statement,ServiceControl.Config.Framework.Modules,MonitoringInstanceInstaller,C:\repos\Particular_ServiceControl\src\ServiceControl.Config\Framework\Modules\InstallerModule.cs,Add,The length of the statement  "                    instanceInstaller.ReportCard.Warnings.Add($"New instance did not startup - please check configuration for {instance.Name}"); " is 124.
Long Statement,ServiceControl.Config.Framework.Modules,MonitoringInstanceInstaller,C:\repos\Particular_ServiceControl\src\ServiceControl.Config\Framework\Modules\InstallerModule.cs,Update,The length of the statement  "                        instance.ReportCard.Warnings.Add($"Service did not start after changes - please check configuration for {instance.Name}"); " is 122.
Long Statement,ServiceControl.Config.Framework.Modules,MonitoringInstanceInstaller,C:\repos\Particular_ServiceControl\src\ServiceControl.Config\Framework\Modules\InstallerModule.cs,CheckLicenseIsValid,The length of the statement  "                    return new CheckLicenseResult(false' "License does not cover this release of ServiceControl Monitoring. Upgrade protection expired"); " is 133.
Long Statement,ServiceControl.Config.Framework.Modules,FeatureTogglesModule,C:\repos\Particular_ServiceControl\src\ServiceControl.Config\Framework\Modules\FeatureTogglesModule.cs,OnComponentActivated,The length of the statement  "                    throw new InvalidOperationException($"Prerelease Property must be a bool {instanceType.FullName}.{featureProp.Property.Name}"); " is 127.
Long Statement,ServiceControl.Config.Framework.Modules,FeatureTogglesModule,C:\repos\Particular_ServiceControl\src\ServiceControl.Config\Framework\Modules\FeatureTogglesModule.cs,OnComponentActivated,The length of the statement  "                    throw new InvalidOperationException($"Prerelease Property must be writeable {instanceType.FullName}.{featureProp.Property.Name}"); " is 130.
Long Statement,ServiceControl.Config.Framework.Modules,CaliburnModule,C:\repos\Particular_ServiceControl\src\ServiceControl.Config\Framework\Modules\CaliburnModule.cs,Load,The length of the statement  "              .Where(type => type.Namespace != null && type.Namespace.StartsWith("ServiceControl.Config.UI.") && type.Name.EndsWith("ViewModel")) " is 131.
Long Statement,ServiceControl.Config.Framework.Modules,CaliburnModule,C:\repos\Particular_ServiceControl\src\ServiceControl.Config\Framework\Modules\CaliburnModule.cs,Load,The length of the statement  "              .Where(type => type.Namespace != null && type.Namespace.StartsWith("ServiceControl.Config.UI.") && type.Name.EndsWith("View")) " is 126.
Long Statement,ServiceControl.Config.Framework.Modules,CaliburnModule,C:\repos\Particular_ServiceControl\src\ServiceControl.Config\Framework\Modules\CaliburnModule.cs,Load,The length of the statement  "              .Where(type => type.Namespace != null && type.Namespace.Equals("ServiceControl.Config.Commands") && type.Name.EndsWith("Command")) " is 130.
Long Statement,ServiceControl.Config.Framework.Rx,WeakValueDictionary<TKey;TValue>,C:\repos\Particular_ServiceControl\src\ServiceControl.Config\Framework\Rx\WeakValueDictionary.cs,CopyTo,The length of the statement  "                    "The number of elements in the source collection is greater than the available space from arrayIndex to the end of the destination array."); " is 140.
Long Statement,ServiceControl.Config.Framework.Rx,ValueCollection,C:\repos\Particular_ServiceControl\src\ServiceControl.Config\Framework\Rx\WeakValueDictionary.cs,CopyTo,The length of the statement  "                        "The number of elements in the source collection is greater than the available space from arrayIndex to the end of the destination array."); " is 140.
Long Statement,ServiceControl.Config.UI.InstanceAdd,MonitoringAddAttachment,C:\repos\Particular_ServiceControl\src\ServiceControl.Config\UI\InstanceAdd\MonitoringAddAttachment.cs,Add,The length of the statement  "                    windowManager.ShowActionReport(reportCard' "ISSUES ADDING INSTANCE"' "Could not add new instance because of the following errors:"' "There were some warnings while adding the instance:"); " is 187.
Long Statement,ServiceControl.Config.UI.InstanceAdd,MonitoringAddAttachment,C:\repos\Particular_ServiceControl\src\ServiceControl.Config\UI\InstanceAdd\MonitoringAddAttachment.cs,PromptToProceed,The length of the statement  "                result = windowManager.ShowYesNoDialog("ADDING INSTANCE QUESTION - DIRECTORY NOT EMPTY"' $"The directory specified as the {pathInfo.Name} is not empty."' $"Are you sure you want to use '{pathInfo.Path}' ?"' "Yes use it"' "No I want to change it"); " is 247.
Long Statement,ServiceControl.Config.UI.InstanceAdd,MonitoringAddViewModel,C:\repos\Particular_ServiceControl\src\ServiceControl.Config\UI\InstanceAdd\MonitoringlAddViewModel.cs,OnInstanceNameChanged,The length of the statement  "            DestinationPath = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ProgramFilesX86)' "Particular Software"' InstanceName); " is 138.
Long Statement,ServiceControl.Config.UI.InstanceAdd,MonitoringAddViewModel,C:\repos\Particular_ServiceControl\src\ServiceControl.Config\UI\InstanceAdd\MonitoringlAddViewModel.cs,OnInstanceNameChanged,The length of the statement  "            LogPath = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.CommonApplicationData)' "Particular"' "ServiceControl"' InstanceName' "Logs"); " is 153.
Long Statement,ServiceControl.Config.UI.InstanceAdd,ServiceControlAddAttachment,C:\repos\Particular_ServiceControl\src\ServiceControl.Config\UI\InstanceAdd\ServiceControlAddAttachment.cs,Add,The length of the statement  "                    windowManager.ShowActionReport(reportCard' "ISSUES ADDING INSTANCE"' "Could not add new instance because of the following errors:"' "There were some warnings while adding the instance:"); " is 187.
Long Statement,ServiceControl.Config.UI.InstanceAdd,ServiceControlAddAttachment,C:\repos\Particular_ServiceControl\src\ServiceControl.Config\UI\InstanceAdd\ServiceControlAddAttachment.cs,PromptToProceed,The length of the statement  "                result = windowManager.ShowYesNoDialog("ADDING INSTANCE QUESTION - DIRECTORY NOT EMPTY"' $"The directory specified as the {pathInfo.Name} is not empty."' $"Are you sure you want to use '{pathInfo.Path}' ?"' "Yes use it"' "No I want to change it"); " is 247.
Long Statement,ServiceControl.Config.UI.InstanceAdd,ServiceControlAddViewModel,C:\repos\Particular_ServiceControl\src\ServiceControl.Config\UI\InstanceAdd\ServiceControlAddViewModel.cs,OnInstanceNameChanged,The length of the statement  "            DestinationPath = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ProgramFilesX86)' "Particular Software"' InstanceName); " is 138.
Long Statement,ServiceControl.Config.UI.InstanceAdd,ServiceControlAddViewModel,C:\repos\Particular_ServiceControl\src\ServiceControl.Config\UI\InstanceAdd\ServiceControlAddViewModel.cs,OnInstanceNameChanged,The length of the statement  "            DatabasePath = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.CommonApplicationData)' "Particular"' "ServiceControl"' InstanceName' "DB"); " is 156.
Long Statement,ServiceControl.Config.UI.InstanceAdd,ServiceControlAddViewModel,C:\repos\Particular_ServiceControl\src\ServiceControl.Config\UI\InstanceAdd\ServiceControlAddViewModel.cs,OnInstanceNameChanged,The length of the statement  "            LogPath = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.CommonApplicationData)' "Particular"' "ServiceControl"' InstanceName' "Logs"); " is 153.
Long Statement,ServiceControl.Config.UI.InstanceEdit,MonitoringEditAttachment,C:\repos\Particular_ServiceControl\src\ServiceControl.Config\UI\InstanceEdit\MonitoringEditAttachment.cs,Save,The length of the statement  "                if (!windowManager.ShowMessage("STOP INSTANCE AND MODIFY"' $"{instance.Name} needs to be stopped in order to modify the settings. Do you want to proceed.")) " is 156.
Long Statement,ServiceControl.Config.UI.InstanceEdit,MonitoringEditAttachment,C:\repos\Particular_ServiceControl\src\ServiceControl.Config\UI\InstanceEdit\MonitoringEditAttachment.cs,Save,The length of the statement  "                    windowManager.ShowActionReport(reportCard' "ISSUES MODIFYING INSTANCE"' "Could not modify instance because of the following errors:"' "There were some warnings while modifying the instance:"); " is 192.
Long Statement,ServiceControl.Config.UI.InstanceEdit,ServiceControlEditAttachment,C:\repos\Particular_ServiceControl\src\ServiceControl.Config\UI\InstanceEdit\ServiceControlEditAttachment.cs,Save,The length of the statement  "                if (!windowManager.ShowMessage("STOP INSTANCE AND MODIFY"' $"{instance.Name} needs to be stopped in order to modify the settings. Do you want to proceed.")) " is 156.
Long Statement,ServiceControl.Config.UI.InstanceEdit,ServiceControlEditAttachment,C:\repos\Particular_ServiceControl\src\ServiceControl.Config\UI\InstanceEdit\ServiceControlEditAttachment.cs,Save,The length of the statement  "                    windowManager.ShowActionReport(reportCard' "ISSUES MODIFYING INSTANCE"' "Could not modify instance because of the following errors:"' "There were some warnings while modifying the instance:"); " is 192.
Long Statement,ServiceControl.Config.Validation,SharedServiceControlEditorViewModelValidator<T>,C:\repos\Particular_ServiceControl\src\ServiceControl.Config\UI\SharedInstanceEditor\SharedServiceControlEditorViewModelValidator.cs,UsedQueueNames,The length of the statement  "            var instancesByTransport = ServiceControlInstances.Where(p => p.TransportPackage.Equals(transport' StringComparison.OrdinalIgnoreCase) && " is 137.
Long Statement,ServiceControl.Config.Validation,Validations,C:\repos\Particular_ServiceControl\src\ServiceControl.Config\Validation\Validations.cs,MustNotContainWhitespace,The length of the statement  "            return ruleBuilder.Must(s => !string.IsNullOrEmpty(s) && !s.Any(c => char.IsWhiteSpace(c))).WithMessage(MSG_CANTCONTAINWHITESPACE); " is 131.
Long Statement,ServiceControl.Config.Xaml.Behaviours,BorderlessWindowBehavior,C:\repos\Particular_ServiceControl\src\ServiceControl.Config\Xaml\Behaviours\BorderlessWindowBehavior.cs,HwndHook,The length of the statement  "                    /* http://blogs.msdn.com/b/llobo/archive/2006/08/01/maximizing-window-_2800_with-windowstyle_3d00_none_2900_-considering-taskbar.aspx */ " is 136.
Long Statement,ServiceControl.Config.Xaml.Behaviours,BorderlessWindowBehavior,C:\repos\Particular_ServiceControl\src\ServiceControl.Config\Xaml\Behaviours\BorderlessWindowBehavior.cs,HwndHook,The length of the statement  "                     * as mentioned by jason.bullard (comment from September 22' 2011) on http://gallery.expression.microsoft.com/ZuneWindowBehavior/ */ " is 131.
Long Statement,ServiceControl.Config.Xaml.Controls,CleanWindow,C:\repos\Particular_ServiceControl\src\ServiceControl.Config\Xaml\Controls\CleanWindow.cs,MaximizeButton_Click,The length of the statement  "            UnsafeNativeMethods.ShowWindow(hwnd' this.WindowState == WindowState.Normal ? ShowWindowCommands.Maximize : ShowWindowCommands.Normal); " is 135.
Virtual Method Call from Constructor,ServiceControl.Config.UI.AdvancedOptions,MonitoringAdvancedViewModel,C:\repos\Particular_ServiceControl\src\ServiceControl.Config\UI\AdvancedOptions\MonitoringAdvancedViewModel.cs,MonitoringAdvancedViewModel,The constructor "MonitoringAdvancedViewModel" calls a virtual method "TryClose".
Virtual Method Call from Constructor,ServiceControl.Config.UI.AdvancedOptions,ServiceControlAdvancedViewModel,C:\repos\Particular_ServiceControl\src\ServiceControl.Config\UI\AdvancedOptions\ServiceControlAdvancedViewModel.cs,ServiceControlAdvancedViewModel,The constructor "ServiceControlAdvancedViewModel" calls a virtual method "TryClose".
Virtual Method Call from Constructor,ServiceControl.Config.UI.DeleteInstanceConfirmation,DeleteMonitoringConfirmationViewModel,C:\repos\Particular_ServiceControl\src\ServiceControl.Config\UI\DeleteInstanceConfirmation\DeleteMonitoringConfirmationViewModel.cs,DeleteMonitoringConfirmationViewModel,The constructor "DeleteMonitoringConfirmationViewModel" calls a virtual method "TryClose".
Virtual Method Call from Constructor,ServiceControl.Config.UI.DeleteInstanceConfirmation,DeleteMonitoringConfirmationViewModel,C:\repos\Particular_ServiceControl\src\ServiceControl.Config\UI\DeleteInstanceConfirmation\DeleteMonitoringConfirmationViewModel.cs,DeleteMonitoringConfirmationViewModel,The constructor "DeleteMonitoringConfirmationViewModel" calls a virtual method "TryClose".
Virtual Method Call from Constructor,ServiceControl.Config.UI.DeleteInstanceConfirmation,DeleteServiceControlConfirmationViewModel,C:\repos\Particular_ServiceControl\src\ServiceControl.Config\UI\DeleteInstanceConfirmation\DeleteServiceControlConfirmationViewModel.cs,DeleteServiceControlConfirmationViewModel,The constructor "DeleteServiceControlConfirmationViewModel" calls a virtual method "TryClose".
Virtual Method Call from Constructor,ServiceControl.Config.UI.DeleteInstanceConfirmation,DeleteServiceControlConfirmationViewModel,C:\repos\Particular_ServiceControl\src\ServiceControl.Config\UI\DeleteInstanceConfirmation\DeleteServiceControlConfirmationViewModel.cs,DeleteServiceControlConfirmationViewModel,The constructor "DeleteServiceControlConfirmationViewModel" calls a virtual method "TryClose".
Virtual Method Call from Constructor,ServiceControl.Config.UI.FeedBack,FeedBackViewModel,C:\repos\Particular_ServiceControl\src\ServiceControl.Config\UI\FeedBack\FeedBackViewModel.cs,FeedBackViewModel,The constructor "FeedBackViewModel" calls a virtual method "TryClose".
Virtual Method Call from Constructor,ServiceControl.Config.UI.FeedBack,FeedBackResultViewModel,C:\repos\Particular_ServiceControl\src\ServiceControl.Config\UI\FeedBack\ResultMessage\FeedBackResultViewModel.cs,FeedBackResultViewModel,The constructor "FeedBackResultViewModel" calls a virtual method "TryClose".
Empty Catch Block,ServiceControl.Config.UI.ListInstances,ListInstancesViewModel,C:\repos\Particular_ServiceControl\src\ServiceControl.Config\UI\ListInstances\ListInstancesViewModel.cs,Handle,The method has an empty catch block.
Magic Number,ServiceControl.Config.Commands,UpgradeServiceControlInstanceCommand,C:\repos\Particular_ServiceControl\src\ServiceControl.Config\Commands\UpgradeServiceControlInstanceCommand.cs,ExecuteAsync,The following statement contains a magic number: if (!instance.AppConfig.AppSettingExists(SettingsList.AuditRetentionPeriod.Name))              {                  if (instance.AppConfig.AppSettingExists(SettingsList.HoursToKeepMessagesBeforeExpiring.Name))                  {                      var i = instance.AppConfig.Read(SettingsList.HoursToKeepMessagesBeforeExpiring.Name' -1);                      if (i != -1)                      {                          upgradeOptions.AuditRetentionPeriod = TimeSpan.FromHours(i);                      }                  }                    // No setting to migrate so display dialog                  if (!upgradeOptions.AuditRetentionPeriod.HasValue)                  {                      var viewModel = new SliderDialogViewModel("UPGRADE QUESTION - DATABASE RETENTION"'                          "Service Control periodically purges audit messages from the database."'                          "AUDIT RETENTION PERIOD"'                          "Please specify the age at which these records should be removed"'                          TimeSpanUnits.Hours'                          SettingConstants.AuditRetentionPeriodMinInHours'                          SettingConstants.AuditRetentionPeriodMaxInHours'                          1'                          24'                          SettingConstants.AuditRetentionPeriodDefaultInHoursForUI);                        if (windowManager.ShowSliderDialog(viewModel))                      {                          upgradeOptions.AuditRetentionPeriod = viewModel.Period;                      }                      else                      {                          //Dialog was cancelled                          eventAggregator.PublishOnUIThread(new RefreshInstances());                          return;                      }                  }              }
Magic Number,ServiceControl.Config.Framework,ProgressViewModelExtensions,C:\repos\Particular_ServiceControl\src\ServiceControl.Config\Framework\IProgressViewModel.cs,Report,The following statement contains a magic number: progress.Report(new ProgressDetails((int)(100.0 / total * step)' message));
Magic Number,ServiceControl.Config.Framework,RaygunReporter,C:\repos\Particular_ServiceControl\src\ServiceControl.Config\Framework\RaygunReporter.cs,TestAndSetCreds,The following statement contains a magic number: try              {                  client.Timeout = 5000;                  client.Proxy.Credentials = credentials;                  using (client.GetResponse())                  {                      raygunClient.ProxyCredentials = credentials;                      return true;                  }              }              catch              {                  return false;              }
Magic Number,ServiceControl.Config.Framework.Modules,ServiceControlInstanceInstaller,C:\repos\Particular_ServiceControl\src\ServiceControl.Config\Framework\Modules\InstallerModule.cs,Add,The following statement contains a magic number: progress.Report(3' 9' "Copying files...");
Magic Number,ServiceControl.Config.Framework.Modules,ServiceControlInstanceInstaller,C:\repos\Particular_ServiceControl\src\ServiceControl.Config\Framework\Modules\InstallerModule.cs,Add,The following statement contains a magic number: progress.Report(3' 9' "Copying files...");
Magic Number,ServiceControl.Config.Framework.Modules,ServiceControlInstanceInstaller,C:\repos\Particular_ServiceControl\src\ServiceControl.Config\Framework\Modules\InstallerModule.cs,Add,The following statement contains a magic number: progress.Report(4' 9' "Writing configurations...");
Magic Number,ServiceControl.Config.Framework.Modules,ServiceControlInstanceInstaller,C:\repos\Particular_ServiceControl\src\ServiceControl.Config\Framework\Modules\InstallerModule.cs,Add,The following statement contains a magic number: progress.Report(4' 9' "Writing configurations...");
Magic Number,ServiceControl.Config.Framework.Modules,ServiceControlInstanceInstaller,C:\repos\Particular_ServiceControl\src\ServiceControl.Config\Framework\Modules\InstallerModule.cs,Add,The following statement contains a magic number: progress.Report(5' 9' "Registering URL ACLs...");
Magic Number,ServiceControl.Config.Framework.Modules,ServiceControlInstanceInstaller,C:\repos\Particular_ServiceControl\src\ServiceControl.Config\Framework\Modules\InstallerModule.cs,Add,The following statement contains a magic number: progress.Report(5' 9' "Registering URL ACLs...");
Magic Number,ServiceControl.Config.Framework.Modules,ServiceControlInstanceInstaller,C:\repos\Particular_ServiceControl\src\ServiceControl.Config\Framework\Modules\InstallerModule.cs,Add,The following statement contains a magic number: progress.Report(6' 9' "Creating queues...");
Magic Number,ServiceControl.Config.Framework.Modules,ServiceControlInstanceInstaller,C:\repos\Particular_ServiceControl\src\ServiceControl.Config\Framework\Modules\InstallerModule.cs,Add,The following statement contains a magic number: progress.Report(6' 9' "Creating queues...");
Magic Number,ServiceControl.Config.Framework.Modules,ServiceControlInstanceInstaller,C:\repos\Particular_ServiceControl\src\ServiceControl.Config\Framework\Modules\InstallerModule.cs,Add,The following statement contains a magic number: if (!instanceInstaller.ReportCard.HasErrors)              {                  progress.Report(7' 9' "Registering service...");                  instanceInstaller.RegisterService();                  //Post Installation                  progress.Report(8' 9' "Starting service...");                  var instance = InstanceFinder.FindServiceControlInstance(instanceInstaller.Name);                  if (!instance.TryStartService())                  {                      instanceInstaller.ReportCard.Warnings.Add($"New instance did not startup - please check configuration for {instance.Name}");                  }              }
Magic Number,ServiceControl.Config.Framework.Modules,ServiceControlInstanceInstaller,C:\repos\Particular_ServiceControl\src\ServiceControl.Config\Framework\Modules\InstallerModule.cs,Add,The following statement contains a magic number: if (!instanceInstaller.ReportCard.HasErrors)              {                  progress.Report(7' 9' "Registering service...");                  instanceInstaller.RegisterService();                  //Post Installation                  progress.Report(8' 9' "Starting service...");                  var instance = InstanceFinder.FindServiceControlInstance(instanceInstaller.Name);                  if (!instance.TryStartService())                  {                      instanceInstaller.ReportCard.Warnings.Add($"New instance did not startup - please check configuration for {instance.Name}");                  }              }
Magic Number,ServiceControl.Config.Framework.Modules,ServiceControlInstanceInstaller,C:\repos\Particular_ServiceControl\src\ServiceControl.Config\Framework\Modules\InstallerModule.cs,Add,The following statement contains a magic number: if (!instanceInstaller.ReportCard.HasErrors)              {                  progress.Report(7' 9' "Registering service...");                  instanceInstaller.RegisterService();                  //Post Installation                  progress.Report(8' 9' "Starting service...");                  var instance = InstanceFinder.FindServiceControlInstance(instanceInstaller.Name);                  if (!instance.TryStartService())                  {                      instanceInstaller.ReportCard.Warnings.Add($"New instance did not startup - please check configuration for {instance.Name}");                  }              }
Magic Number,ServiceControl.Config.Framework.Modules,ServiceControlInstanceInstaller,C:\repos\Particular_ServiceControl\src\ServiceControl.Config\Framework\Modules\InstallerModule.cs,Add,The following statement contains a magic number: if (!instanceInstaller.ReportCard.HasErrors)              {                  progress.Report(7' 9' "Registering service...");                  instanceInstaller.RegisterService();                  //Post Installation                  progress.Report(8' 9' "Starting service...");                  var instance = InstanceFinder.FindServiceControlInstance(instanceInstaller.Name);                  if (!instance.TryStartService())                  {                      instanceInstaller.ReportCard.Warnings.Add($"New instance did not startup - please check configuration for {instance.Name}");                  }              }
Magic Number,ServiceControl.Config.Framework.Modules,ServiceControlInstanceInstaller,C:\repos\Particular_ServiceControl\src\ServiceControl.Config\Framework\Modules\InstallerModule.cs,Upgrade,The following statement contains a magic number: progress.Report(0' 5' "Stopping instance...");
Magic Number,ServiceControl.Config.Framework.Modules,ServiceControlInstanceInstaller,C:\repos\Particular_ServiceControl\src\ServiceControl.Config\Framework\Modules\InstallerModule.cs,Upgrade,The following statement contains a magic number: progress.Report(1' 5' "Backing up app.config...");
Magic Number,ServiceControl.Config.Framework.Modules,ServiceControlInstanceInstaller,C:\repos\Particular_ServiceControl\src\ServiceControl.Config\Framework\Modules\InstallerModule.cs,Upgrade,The following statement contains a magic number: try              {                  progress.Report(2' 5' "Upgrading Files...");                  instance.UpgradeFiles(ZipInfo.FilePath);              }              finally              {                  progress.Report(3' 5' "Restoring app.config...");                  instance.RestoreAppConfig(backupFile);              }
Magic Number,ServiceControl.Config.Framework.Modules,ServiceControlInstanceInstaller,C:\repos\Particular_ServiceControl\src\ServiceControl.Config\Framework\Modules\InstallerModule.cs,Upgrade,The following statement contains a magic number: try              {                  progress.Report(2' 5' "Upgrading Files...");                  instance.UpgradeFiles(ZipInfo.FilePath);              }              finally              {                  progress.Report(3' 5' "Restoring app.config...");                  instance.RestoreAppConfig(backupFile);              }
Magic Number,ServiceControl.Config.Framework.Modules,ServiceControlInstanceInstaller,C:\repos\Particular_ServiceControl\src\ServiceControl.Config\Framework\Modules\InstallerModule.cs,Upgrade,The following statement contains a magic number: try              {                  progress.Report(2' 5' "Upgrading Files...");                  instance.UpgradeFiles(ZipInfo.FilePath);              }              finally              {                  progress.Report(3' 5' "Restoring app.config...");                  instance.RestoreAppConfig(backupFile);              }
Magic Number,ServiceControl.Config.Framework.Modules,ServiceControlInstanceInstaller,C:\repos\Particular_ServiceControl\src\ServiceControl.Config\Framework\Modules\InstallerModule.cs,Upgrade,The following statement contains a magic number: try              {                  progress.Report(2' 5' "Upgrading Files...");                  instance.UpgradeFiles(ZipInfo.FilePath);              }              finally              {                  progress.Report(3' 5' "Restoring app.config...");                  instance.RestoreAppConfig(backupFile);              }
Magic Number,ServiceControl.Config.Framework.Modules,ServiceControlInstanceInstaller,C:\repos\Particular_ServiceControl\src\ServiceControl.Config\Framework\Modules\InstallerModule.cs,Upgrade,The following statement contains a magic number: progress.Report(4' 5' "Running Queue Creation...");
Magic Number,ServiceControl.Config.Framework.Modules,ServiceControlInstanceInstaller,C:\repos\Particular_ServiceControl\src\ServiceControl.Config\Framework\Modules\InstallerModule.cs,Upgrade,The following statement contains a magic number: progress.Report(4' 5' "Running Queue Creation...");
Magic Number,ServiceControl.Config.Framework.Modules,ServiceControlInstanceInstaller,C:\repos\Particular_ServiceControl\src\ServiceControl.Config\Framework\Modules\InstallerModule.cs,Delete,The following statement contains a magic number: progress.Report(0' 7' "Stopping instance...");
Magic Number,ServiceControl.Config.Framework.Modules,ServiceControlInstanceInstaller,C:\repos\Particular_ServiceControl\src\ServiceControl.Config\Framework\Modules\InstallerModule.cs,Delete,The following statement contains a magic number: progress.Report(1' 7' "Disabling startup...");
Magic Number,ServiceControl.Config.Framework.Modules,ServiceControlInstanceInstaller,C:\repos\Particular_ServiceControl\src\ServiceControl.Config\Framework\Modules\InstallerModule.cs,Delete,The following statement contains a magic number: progress.Report(2' 7' "Deleting service...");
Magic Number,ServiceControl.Config.Framework.Modules,ServiceControlInstanceInstaller,C:\repos\Particular_ServiceControl\src\ServiceControl.Config\Framework\Modules\InstallerModule.cs,Delete,The following statement contains a magic number: progress.Report(2' 7' "Deleting service...");
Magic Number,ServiceControl.Config.Framework.Modules,ServiceControlInstanceInstaller,C:\repos\Particular_ServiceControl\src\ServiceControl.Config\Framework\Modules\InstallerModule.cs,Delete,The following statement contains a magic number: progress.Report(3' 7' "Removing URL ACL...");
Magic Number,ServiceControl.Config.Framework.Modules,ServiceControlInstanceInstaller,C:\repos\Particular_ServiceControl\src\ServiceControl.Config\Framework\Modules\InstallerModule.cs,Delete,The following statement contains a magic number: progress.Report(3' 7' "Removing URL ACL...");
Magic Number,ServiceControl.Config.Framework.Modules,ServiceControlInstanceInstaller,C:\repos\Particular_ServiceControl\src\ServiceControl.Config\Framework\Modules\InstallerModule.cs,Delete,The following statement contains a magic number: progress.Report(4' 7' "Deleting install...");
Magic Number,ServiceControl.Config.Framework.Modules,ServiceControlInstanceInstaller,C:\repos\Particular_ServiceControl\src\ServiceControl.Config\Framework\Modules\InstallerModule.cs,Delete,The following statement contains a magic number: progress.Report(4' 7' "Deleting install...");
Magic Number,ServiceControl.Config.Framework.Modules,ServiceControlInstanceInstaller,C:\repos\Particular_ServiceControl\src\ServiceControl.Config\Framework\Modules\InstallerModule.cs,Delete,The following statement contains a magic number: if (removeLogs)              {                  progress.Report(5' 7' "Deleting logs...");                  instance.RemoveLogsFolder();              }
Magic Number,ServiceControl.Config.Framework.Modules,ServiceControlInstanceInstaller,C:\repos\Particular_ServiceControl\src\ServiceControl.Config\Framework\Modules\InstallerModule.cs,Delete,The following statement contains a magic number: if (removeLogs)              {                  progress.Report(5' 7' "Deleting logs...");                  instance.RemoveLogsFolder();              }
Magic Number,ServiceControl.Config.Framework.Modules,ServiceControlInstanceInstaller,C:\repos\Particular_ServiceControl\src\ServiceControl.Config\Framework\Modules\InstallerModule.cs,Delete,The following statement contains a magic number: if (removeDB)              {                  progress.Report(6' 7' "Deleting database...");                  instance.RemoveDataBaseFolder();              }
Magic Number,ServiceControl.Config.Framework.Modules,ServiceControlInstanceInstaller,C:\repos\Particular_ServiceControl\src\ServiceControl.Config\Framework\Modules\InstallerModule.cs,Delete,The following statement contains a magic number: if (removeDB)              {                  progress.Report(6' 7' "Deleting database...");                  instance.RemoveDataBaseFolder();              }
Magic Number,ServiceControl.Config.Framework.Modules,MonitoringInstanceInstaller,C:\repos\Particular_ServiceControl\src\ServiceControl.Config\Framework\Modules\InstallerModule.cs,Add,The following statement contains a magic number: progress.Report(3' 9' "Copying files...");
Magic Number,ServiceControl.Config.Framework.Modules,MonitoringInstanceInstaller,C:\repos\Particular_ServiceControl\src\ServiceControl.Config\Framework\Modules\InstallerModule.cs,Add,The following statement contains a magic number: progress.Report(3' 9' "Copying files...");
Magic Number,ServiceControl.Config.Framework.Modules,MonitoringInstanceInstaller,C:\repos\Particular_ServiceControl\src\ServiceControl.Config\Framework\Modules\InstallerModule.cs,Add,The following statement contains a magic number: progress.Report(4' 9' "Writing configurations...");
Magic Number,ServiceControl.Config.Framework.Modules,MonitoringInstanceInstaller,C:\repos\Particular_ServiceControl\src\ServiceControl.Config\Framework\Modules\InstallerModule.cs,Add,The following statement contains a magic number: progress.Report(4' 9' "Writing configurations...");
Magic Number,ServiceControl.Config.Framework.Modules,MonitoringInstanceInstaller,C:\repos\Particular_ServiceControl\src\ServiceControl.Config\Framework\Modules\InstallerModule.cs,Add,The following statement contains a magic number: progress.Report(5' 9' "Registering URL ACLs...");
Magic Number,ServiceControl.Config.Framework.Modules,MonitoringInstanceInstaller,C:\repos\Particular_ServiceControl\src\ServiceControl.Config\Framework\Modules\InstallerModule.cs,Add,The following statement contains a magic number: progress.Report(5' 9' "Registering URL ACLs...");
Magic Number,ServiceControl.Config.Framework.Modules,MonitoringInstanceInstaller,C:\repos\Particular_ServiceControl\src\ServiceControl.Config\Framework\Modules\InstallerModule.cs,Add,The following statement contains a magic number: progress.Report(6' 9' "Creating queues...");
Magic Number,ServiceControl.Config.Framework.Modules,MonitoringInstanceInstaller,C:\repos\Particular_ServiceControl\src\ServiceControl.Config\Framework\Modules\InstallerModule.cs,Add,The following statement contains a magic number: progress.Report(6' 9' "Creating queues...");
Magic Number,ServiceControl.Config.Framework.Modules,MonitoringInstanceInstaller,C:\repos\Particular_ServiceControl\src\ServiceControl.Config\Framework\Modules\InstallerModule.cs,Add,The following statement contains a magic number: if (!instanceInstaller.ReportCard.HasErrors)              {                  progress.Report(7' 9' "Registering service...");                  instanceInstaller.RegisterService();                  //Post Installation                  progress.Report(8' 9' "Starting service...");                  var instance = InstanceFinder.FindMonitoringInstance(instanceInstaller.Name);                  if (!instance.TryStartService())                  {                      instanceInstaller.ReportCard.Warnings.Add($"New instance did not startup - please check configuration for {instance.Name}");                  }              }
Magic Number,ServiceControl.Config.Framework.Modules,MonitoringInstanceInstaller,C:\repos\Particular_ServiceControl\src\ServiceControl.Config\Framework\Modules\InstallerModule.cs,Add,The following statement contains a magic number: if (!instanceInstaller.ReportCard.HasErrors)              {                  progress.Report(7' 9' "Registering service...");                  instanceInstaller.RegisterService();                  //Post Installation                  progress.Report(8' 9' "Starting service...");                  var instance = InstanceFinder.FindMonitoringInstance(instanceInstaller.Name);                  if (!instance.TryStartService())                  {                      instanceInstaller.ReportCard.Warnings.Add($"New instance did not startup - please check configuration for {instance.Name}");                  }              }
Magic Number,ServiceControl.Config.Framework.Modules,MonitoringInstanceInstaller,C:\repos\Particular_ServiceControl\src\ServiceControl.Config\Framework\Modules\InstallerModule.cs,Add,The following statement contains a magic number: if (!instanceInstaller.ReportCard.HasErrors)              {                  progress.Report(7' 9' "Registering service...");                  instanceInstaller.RegisterService();                  //Post Installation                  progress.Report(8' 9' "Starting service...");                  var instance = InstanceFinder.FindMonitoringInstance(instanceInstaller.Name);                  if (!instance.TryStartService())                  {                      instanceInstaller.ReportCard.Warnings.Add($"New instance did not startup - please check configuration for {instance.Name}");                  }              }
Magic Number,ServiceControl.Config.Framework.Modules,MonitoringInstanceInstaller,C:\repos\Particular_ServiceControl\src\ServiceControl.Config\Framework\Modules\InstallerModule.cs,Add,The following statement contains a magic number: if (!instanceInstaller.ReportCard.HasErrors)              {                  progress.Report(7' 9' "Registering service...");                  instanceInstaller.RegisterService();                  //Post Installation                  progress.Report(8' 9' "Starting service...");                  var instance = InstanceFinder.FindMonitoringInstance(instanceInstaller.Name);                  if (!instance.TryStartService())                  {                      instanceInstaller.ReportCard.Warnings.Add($"New instance did not startup - please check configuration for {instance.Name}");                  }              }
Magic Number,ServiceControl.Config.Framework.Modules,MonitoringInstanceInstaller,C:\repos\Particular_ServiceControl\src\ServiceControl.Config\Framework\Modules\InstallerModule.cs,Upgrade,The following statement contains a magic number: progress.Report(0' 5' "Stopping instance...");
Magic Number,ServiceControl.Config.Framework.Modules,MonitoringInstanceInstaller,C:\repos\Particular_ServiceControl\src\ServiceControl.Config\Framework\Modules\InstallerModule.cs,Upgrade,The following statement contains a magic number: progress.Report(1' 5' "Backing up app.config...");
Magic Number,ServiceControl.Config.Framework.Modules,MonitoringInstanceInstaller,C:\repos\Particular_ServiceControl\src\ServiceControl.Config\Framework\Modules\InstallerModule.cs,Upgrade,The following statement contains a magic number: try              {                  progress.Report(2' 5' "Upgrading Files...");                  instance.UpgradeFiles(ZipInfo.FilePath);              }              finally              {                  progress.Report(3' 5' "Restoring app.config...");                  instance.RestoreAppConfig(backupFile);              }
Magic Number,ServiceControl.Config.Framework.Modules,MonitoringInstanceInstaller,C:\repos\Particular_ServiceControl\src\ServiceControl.Config\Framework\Modules\InstallerModule.cs,Upgrade,The following statement contains a magic number: try              {                  progress.Report(2' 5' "Upgrading Files...");                  instance.UpgradeFiles(ZipInfo.FilePath);              }              finally              {                  progress.Report(3' 5' "Restoring app.config...");                  instance.RestoreAppConfig(backupFile);              }
Magic Number,ServiceControl.Config.Framework.Modules,MonitoringInstanceInstaller,C:\repos\Particular_ServiceControl\src\ServiceControl.Config\Framework\Modules\InstallerModule.cs,Upgrade,The following statement contains a magic number: try              {                  progress.Report(2' 5' "Upgrading Files...");                  instance.UpgradeFiles(ZipInfo.FilePath);              }              finally              {                  progress.Report(3' 5' "Restoring app.config...");                  instance.RestoreAppConfig(backupFile);              }
Magic Number,ServiceControl.Config.Framework.Modules,MonitoringInstanceInstaller,C:\repos\Particular_ServiceControl\src\ServiceControl.Config\Framework\Modules\InstallerModule.cs,Upgrade,The following statement contains a magic number: try              {                  progress.Report(2' 5' "Upgrading Files...");                  instance.UpgradeFiles(ZipInfo.FilePath);              }              finally              {                  progress.Report(3' 5' "Restoring app.config...");                  instance.RestoreAppConfig(backupFile);              }
Magic Number,ServiceControl.Config.Framework.Modules,MonitoringInstanceInstaller,C:\repos\Particular_ServiceControl\src\ServiceControl.Config\Framework\Modules\InstallerModule.cs,Upgrade,The following statement contains a magic number: progress.Report(4' 5' "Running Queue Creation...");
Magic Number,ServiceControl.Config.Framework.Modules,MonitoringInstanceInstaller,C:\repos\Particular_ServiceControl\src\ServiceControl.Config\Framework\Modules\InstallerModule.cs,Upgrade,The following statement contains a magic number: progress.Report(4' 5' "Running Queue Creation...");
Magic Number,ServiceControl.Config.Framework.Modules,MonitoringInstanceInstaller,C:\repos\Particular_ServiceControl\src\ServiceControl.Config\Framework\Modules\InstallerModule.cs,Delete,The following statement contains a magic number: progress.Report(0' 7' "Stopping instance...");
Magic Number,ServiceControl.Config.Framework.Modules,MonitoringInstanceInstaller,C:\repos\Particular_ServiceControl\src\ServiceControl.Config\Framework\Modules\InstallerModule.cs,Delete,The following statement contains a magic number: progress.Report(1' 7' "Disabling startup...");
Magic Number,ServiceControl.Config.Framework.Modules,MonitoringInstanceInstaller,C:\repos\Particular_ServiceControl\src\ServiceControl.Config\Framework\Modules\InstallerModule.cs,Delete,The following statement contains a magic number: progress.Report(2' 7' "Deleting service...");
Magic Number,ServiceControl.Config.Framework.Modules,MonitoringInstanceInstaller,C:\repos\Particular_ServiceControl\src\ServiceControl.Config\Framework\Modules\InstallerModule.cs,Delete,The following statement contains a magic number: progress.Report(2' 7' "Deleting service...");
Magic Number,ServiceControl.Config.Framework.Modules,MonitoringInstanceInstaller,C:\repos\Particular_ServiceControl\src\ServiceControl.Config\Framework\Modules\InstallerModule.cs,Delete,The following statement contains a magic number: progress.Report(3' 7' "Removing URL ACL...");
Magic Number,ServiceControl.Config.Framework.Modules,MonitoringInstanceInstaller,C:\repos\Particular_ServiceControl\src\ServiceControl.Config\Framework\Modules\InstallerModule.cs,Delete,The following statement contains a magic number: progress.Report(3' 7' "Removing URL ACL...");
Magic Number,ServiceControl.Config.Framework.Modules,MonitoringInstanceInstaller,C:\repos\Particular_ServiceControl\src\ServiceControl.Config\Framework\Modules\InstallerModule.cs,Delete,The following statement contains a magic number: progress.Report(4' 7' "Deleting install...");
Magic Number,ServiceControl.Config.Framework.Modules,MonitoringInstanceInstaller,C:\repos\Particular_ServiceControl\src\ServiceControl.Config\Framework\Modules\InstallerModule.cs,Delete,The following statement contains a magic number: progress.Report(4' 7' "Deleting install...");
Magic Number,ServiceControl.Config.Framework.Modules,MonitoringInstanceInstaller,C:\repos\Particular_ServiceControl\src\ServiceControl.Config\Framework\Modules\InstallerModule.cs,Delete,The following statement contains a magic number: if (removeLogs)              {                  progress.Report(5' 7' "Deleting logs...");                  instance.RemoveLogsFolder();              }
Magic Number,ServiceControl.Config.Framework.Modules,MonitoringInstanceInstaller,C:\repos\Particular_ServiceControl\src\ServiceControl.Config\Framework\Modules\InstallerModule.cs,Delete,The following statement contains a magic number: if (removeLogs)              {                  progress.Report(5' 7' "Deleting logs...");                  instance.RemoveLogsFolder();              }
Magic Number,ServiceControl.Config.Validation,Validations,C:\repos\Particular_ServiceControl\src\ServiceControl.Config\Validation\Validations.cs,ValidPort,The following statement contains a magic number: return ruleBuilder.Must((t' port) =>              {                  int result;                  if (int.TryParse(port' out result))                  {                      return result >= 1 && result <= 49151;                  }                    return false;              })              .WithMessage(MSG_USE_PORTS_IN_RANGE);
Magic Number,ServiceControl.Config.UI.Shell,ShellViewModel,C:\repos\Particular_ServiceControl\src\ServiceControl.Config\UI\Shell\ShellViewModel.cs,ShellViewModel,The following statement contains a magic number: RefreshInstancesCmd = Command.Create(() =>              {                  eventAggregator.PublishOnUIThread(new RefreshInstances());                  // Used to "blink" the refresh button to indicate the refresh actually ran.                  return Task.Delay(500);              });
Magic Number,ServiceControl.Config.UI.Shell,ShellViewModel,C:\repos\Particular_ServiceControl\src\ServiceControl.Config\UI\Shell\ShellViewModel.cs,LoadAppVersion,The following statement contains a magic number: if (shaIndex != -1 && parts.Length > shaIndex + 1)              {                  var shaValue = parts[shaIndex + 1];                  var shortCommitHash = shaValue.Substring(0' 7);                    VersionInfo += " / " + shortCommitHash;              }
Magic Number,ServiceControl.Config.UI.License,LicenseViewModel,C:\repos\Particular_ServiceControl\src\ServiceControl.Config\UI\License\LicenseViewModel.cs,WithinLicenseWarningRange,The following statement contains a magic number: return (licenseDate > DateTime.Now) & (licenseDate < DateTime.Now.AddDays(30));
Magic Number,ServiceControl.Config.Xaml.Behaviours,BorderlessWindowBehavior,C:\repos\Particular_ServiceControl\src\ServiceControl.Config\Xaml\Behaviours\BorderlessWindowBehavior.cs,HwndHook,The following statement contains a magic number: switch (message)              {                  case NativeConstants.WM_NCCALCSIZE:                      /* Hides the border */                      handled = true;                      break;                    case NativeConstants.WM_NCPAINT:                      {                          if (Environment.OSVersion.Version.Major >= 6)                          {                              var m = new MARGINS { bottomHeight = 1' leftWidth = 1' rightWidth = 1' topHeight = 1 };                              UnsafeNativeMethods.DwmExtendFrameIntoClientArea(hwnd' ref m);                          }                          handled = true;                      }                      break;                    case NativeConstants.WM_NCACTIVATE:                      {                          /* As per http://msdn.microsoft.com/en-us/library/ms632633(VS.85).aspx ' "-1" lParam                           * "does not repaint the nonclient area to reflect the state change." */                          returnval = UnsafeNativeMethods.DefWindowProc(hWnd' message' wParam' new IntPtr(-1));                          handled = true;                      }                      break;                    case NativeConstants.WM_GETMINMAXINFO:                      /* http://blogs.msdn.com/b/llobo/archive/2006/08/01/maximizing-window-_2800_with-windowstyle_3d00_none_2900_-considering-taskbar.aspx */                      UnsafeNativeMethods.WmGetMinMaxInfo(hWnd' lParam);                        /* Setting handled to false enables the application to process it's own Min/Max requirements'                       * as mentioned by jason.bullard (comment from September 22' 2011) on http://gallery.expression.microsoft.com/ZuneWindowBehavior/ */                      handled = false;                      break;                    case NativeConstants.WM_NCHITTEST:                        // don't process the message on windows that can't be resized                      var resizeMode = AssociatedObject.ResizeMode;                      if (resizeMode == ResizeMode.CanMinimize || resizeMode == ResizeMode.NoResize)                          break;                        // get X & Y out of the message                      var screenPoint = new Point((short)lParam' (short)(lParam.ToInt32() >> 16));                        // convert to window coordinates                      var windowPoint = AssociatedObject.PointFromScreen(screenPoint);                      var windowSize = AssociatedObject.RenderSize;                      var windowRect = new Rect(windowSize);                      windowRect.Inflate(-resizeWidth' -resizeWidth);                        // don't process the message if the mouse is outside the 6px resize border                      if (windowRect.Contains(windowPoint))                          break;                        var windowHeight = (int)windowSize.Height;                      var windowWidth = (int)windowSize.Width;                        // create the rectangles where resize arrows are shown                      var topLeft = new Rect(0' 0' resizeWidth' resizeWidth);                      var top = new Rect(resizeWidth' 0' windowWidth - resizeWidth * 2' resizeWidth);                      var topRight = new Rect(windowWidth - resizeWidth' 0' resizeWidth' resizeWidth);                        var left = new Rect(0' resizeWidth' resizeWidth' windowHeight - resizeWidth * 2);                      var right = new Rect(windowWidth - resizeWidth' resizeWidth' resizeWidth' windowHeight - resizeWidth * 2);                        var bottomLeft = new Rect(0' windowHeight - resizeWidth' resizeWidth' resizeWidth);                      var bottom = new Rect(resizeWidth' windowHeight - resizeWidth' windowWidth - resizeWidth * 2' resizeWidth);                      var bottomRight = new Rect(windowWidth - resizeWidth' windowHeight - resizeWidth' resizeWidth' resizeWidth);                        // check if the mouse is within one of the rectangles                      if (topLeft.Contains(windowPoint))                          returnval = (IntPtr)NativeConstants.HTTOPLEFT;                      else if (top.Contains(windowPoint))                          returnval = (IntPtr)NativeConstants.HTTOP;                      else if (topRight.Contains(windowPoint))                          returnval = (IntPtr)NativeConstants.HTTOPRIGHT;                      else if (left.Contains(windowPoint))                          returnval = (IntPtr)NativeConstants.HTLEFT;                      else if (right.Contains(windowPoint))                          returnval = (IntPtr)NativeConstants.HTRIGHT;                      else if (bottomLeft.Contains(windowPoint))                          returnval = (IntPtr)NativeConstants.HTBOTTOMLEFT;                      else if (bottom.Contains(windowPoint))                          returnval = (IntPtr)NativeConstants.HTBOTTOM;                      else if (bottomRight.Contains(windowPoint))                          returnval = (IntPtr)NativeConstants.HTBOTTOMRIGHT;                        if (returnval != IntPtr.Zero)                          handled = true;                        break;              }
Magic Number,ServiceControl.Config.Xaml.Behaviours,BorderlessWindowBehavior,C:\repos\Particular_ServiceControl\src\ServiceControl.Config\Xaml\Behaviours\BorderlessWindowBehavior.cs,HwndHook,The following statement contains a magic number: switch (message)              {                  case NativeConstants.WM_NCCALCSIZE:                      /* Hides the border */                      handled = true;                      break;                    case NativeConstants.WM_NCPAINT:                      {                          if (Environment.OSVersion.Version.Major >= 6)                          {                              var m = new MARGINS { bottomHeight = 1' leftWidth = 1' rightWidth = 1' topHeight = 1 };                              UnsafeNativeMethods.DwmExtendFrameIntoClientArea(hwnd' ref m);                          }                          handled = true;                      }                      break;                    case NativeConstants.WM_NCACTIVATE:                      {                          /* As per http://msdn.microsoft.com/en-us/library/ms632633(VS.85).aspx ' "-1" lParam                           * "does not repaint the nonclient area to reflect the state change." */                          returnval = UnsafeNativeMethods.DefWindowProc(hWnd' message' wParam' new IntPtr(-1));                          handled = true;                      }                      break;                    case NativeConstants.WM_GETMINMAXINFO:                      /* http://blogs.msdn.com/b/llobo/archive/2006/08/01/maximizing-window-_2800_with-windowstyle_3d00_none_2900_-considering-taskbar.aspx */                      UnsafeNativeMethods.WmGetMinMaxInfo(hWnd' lParam);                        /* Setting handled to false enables the application to process it's own Min/Max requirements'                       * as mentioned by jason.bullard (comment from September 22' 2011) on http://gallery.expression.microsoft.com/ZuneWindowBehavior/ */                      handled = false;                      break;                    case NativeConstants.WM_NCHITTEST:                        // don't process the message on windows that can't be resized                      var resizeMode = AssociatedObject.ResizeMode;                      if (resizeMode == ResizeMode.CanMinimize || resizeMode == ResizeMode.NoResize)                          break;                        // get X & Y out of the message                      var screenPoint = new Point((short)lParam' (short)(lParam.ToInt32() >> 16));                        // convert to window coordinates                      var windowPoint = AssociatedObject.PointFromScreen(screenPoint);                      var windowSize = AssociatedObject.RenderSize;                      var windowRect = new Rect(windowSize);                      windowRect.Inflate(-resizeWidth' -resizeWidth);                        // don't process the message if the mouse is outside the 6px resize border                      if (windowRect.Contains(windowPoint))                          break;                        var windowHeight = (int)windowSize.Height;                      var windowWidth = (int)windowSize.Width;                        // create the rectangles where resize arrows are shown                      var topLeft = new Rect(0' 0' resizeWidth' resizeWidth);                      var top = new Rect(resizeWidth' 0' windowWidth - resizeWidth * 2' resizeWidth);                      var topRight = new Rect(windowWidth - resizeWidth' 0' resizeWidth' resizeWidth);                        var left = new Rect(0' resizeWidth' resizeWidth' windowHeight - resizeWidth * 2);                      var right = new Rect(windowWidth - resizeWidth' resizeWidth' resizeWidth' windowHeight - resizeWidth * 2);                        var bottomLeft = new Rect(0' windowHeight - resizeWidth' resizeWidth' resizeWidth);                      var bottom = new Rect(resizeWidth' windowHeight - resizeWidth' windowWidth - resizeWidth * 2' resizeWidth);                      var bottomRight = new Rect(windowWidth - resizeWidth' windowHeight - resizeWidth' resizeWidth' resizeWidth);                        // check if the mouse is within one of the rectangles                      if (topLeft.Contains(windowPoint))                          returnval = (IntPtr)NativeConstants.HTTOPLEFT;                      else if (top.Contains(windowPoint))                          returnval = (IntPtr)NativeConstants.HTTOP;                      else if (topRight.Contains(windowPoint))                          returnval = (IntPtr)NativeConstants.HTTOPRIGHT;                      else if (left.Contains(windowPoint))                          returnval = (IntPtr)NativeConstants.HTLEFT;                      else if (right.Contains(windowPoint))                          returnval = (IntPtr)NativeConstants.HTRIGHT;                      else if (bottomLeft.Contains(windowPoint))                          returnval = (IntPtr)NativeConstants.HTBOTTOMLEFT;                      else if (bottom.Contains(windowPoint))                          returnval = (IntPtr)NativeConstants.HTBOTTOM;                      else if (bottomRight.Contains(windowPoint))                          returnval = (IntPtr)NativeConstants.HTBOTTOMRIGHT;                        if (returnval != IntPtr.Zero)                          handled = true;                        break;              }
Magic Number,ServiceControl.Config.Xaml.Behaviours,BorderlessWindowBehavior,C:\repos\Particular_ServiceControl\src\ServiceControl.Config\Xaml\Behaviours\BorderlessWindowBehavior.cs,HwndHook,The following statement contains a magic number: switch (message)              {                  case NativeConstants.WM_NCCALCSIZE:                      /* Hides the border */                      handled = true;                      break;                    case NativeConstants.WM_NCPAINT:                      {                          if (Environment.OSVersion.Version.Major >= 6)                          {                              var m = new MARGINS { bottomHeight = 1' leftWidth = 1' rightWidth = 1' topHeight = 1 };                              UnsafeNativeMethods.DwmExtendFrameIntoClientArea(hwnd' ref m);                          }                          handled = true;                      }                      break;                    case NativeConstants.WM_NCACTIVATE:                      {                          /* As per http://msdn.microsoft.com/en-us/library/ms632633(VS.85).aspx ' "-1" lParam                           * "does not repaint the nonclient area to reflect the state change." */                          returnval = UnsafeNativeMethods.DefWindowProc(hWnd' message' wParam' new IntPtr(-1));                          handled = true;                      }                      break;                    case NativeConstants.WM_GETMINMAXINFO:                      /* http://blogs.msdn.com/b/llobo/archive/2006/08/01/maximizing-window-_2800_with-windowstyle_3d00_none_2900_-considering-taskbar.aspx */                      UnsafeNativeMethods.WmGetMinMaxInfo(hWnd' lParam);                        /* Setting handled to false enables the application to process it's own Min/Max requirements'                       * as mentioned by jason.bullard (comment from September 22' 2011) on http://gallery.expression.microsoft.com/ZuneWindowBehavior/ */                      handled = false;                      break;                    case NativeConstants.WM_NCHITTEST:                        // don't process the message on windows that can't be resized                      var resizeMode = AssociatedObject.ResizeMode;                      if (resizeMode == ResizeMode.CanMinimize || resizeMode == ResizeMode.NoResize)                          break;                        // get X & Y out of the message                      var screenPoint = new Point((short)lParam' (short)(lParam.ToInt32() >> 16));                        // convert to window coordinates                      var windowPoint = AssociatedObject.PointFromScreen(screenPoint);                      var windowSize = AssociatedObject.RenderSize;                      var windowRect = new Rect(windowSize);                      windowRect.Inflate(-resizeWidth' -resizeWidth);                        // don't process the message if the mouse is outside the 6px resize border                      if (windowRect.Contains(windowPoint))                          break;                        var windowHeight = (int)windowSize.Height;                      var windowWidth = (int)windowSize.Width;                        // create the rectangles where resize arrows are shown                      var topLeft = new Rect(0' 0' resizeWidth' resizeWidth);                      var top = new Rect(resizeWidth' 0' windowWidth - resizeWidth * 2' resizeWidth);                      var topRight = new Rect(windowWidth - resizeWidth' 0' resizeWidth' resizeWidth);                        var left = new Rect(0' resizeWidth' resizeWidth' windowHeight - resizeWidth * 2);                      var right = new Rect(windowWidth - resizeWidth' resizeWidth' resizeWidth' windowHeight - resizeWidth * 2);                        var bottomLeft = new Rect(0' windowHeight - resizeWidth' resizeWidth' resizeWidth);                      var bottom = new Rect(resizeWidth' windowHeight - resizeWidth' windowWidth - resizeWidth * 2' resizeWidth);                      var bottomRight = new Rect(windowWidth - resizeWidth' windowHeight - resizeWidth' resizeWidth' resizeWidth);                        // check if the mouse is within one of the rectangles                      if (topLeft.Contains(windowPoint))                          returnval = (IntPtr)NativeConstants.HTTOPLEFT;                      else if (top.Contains(windowPoint))                          returnval = (IntPtr)NativeConstants.HTTOP;                      else if (topRight.Contains(windowPoint))                          returnval = (IntPtr)NativeConstants.HTTOPRIGHT;                      else if (left.Contains(windowPoint))                          returnval = (IntPtr)NativeConstants.HTLEFT;                      else if (right.Contains(windowPoint))                          returnval = (IntPtr)NativeConstants.HTRIGHT;                      else if (bottomLeft.Contains(windowPoint))                          returnval = (IntPtr)NativeConstants.HTBOTTOMLEFT;                      else if (bottom.Contains(windowPoint))                          returnval = (IntPtr)NativeConstants.HTBOTTOM;                      else if (bottomRight.Contains(windowPoint))                          returnval = (IntPtr)NativeConstants.HTBOTTOMRIGHT;                        if (returnval != IntPtr.Zero)                          handled = true;                        break;              }
Magic Number,ServiceControl.Config.Xaml.Behaviours,BorderlessWindowBehavior,C:\repos\Particular_ServiceControl\src\ServiceControl.Config\Xaml\Behaviours\BorderlessWindowBehavior.cs,HwndHook,The following statement contains a magic number: switch (message)              {                  case NativeConstants.WM_NCCALCSIZE:                      /* Hides the border */                      handled = true;                      break;                    case NativeConstants.WM_NCPAINT:                      {                          if (Environment.OSVersion.Version.Major >= 6)                          {                              var m = new MARGINS { bottomHeight = 1' leftWidth = 1' rightWidth = 1' topHeight = 1 };                              UnsafeNativeMethods.DwmExtendFrameIntoClientArea(hwnd' ref m);                          }                          handled = true;                      }                      break;                    case NativeConstants.WM_NCACTIVATE:                      {                          /* As per http://msdn.microsoft.com/en-us/library/ms632633(VS.85).aspx ' "-1" lParam                           * "does not repaint the nonclient area to reflect the state change." */                          returnval = UnsafeNativeMethods.DefWindowProc(hWnd' message' wParam' new IntPtr(-1));                          handled = true;                      }                      break;                    case NativeConstants.WM_GETMINMAXINFO:                      /* http://blogs.msdn.com/b/llobo/archive/2006/08/01/maximizing-window-_2800_with-windowstyle_3d00_none_2900_-considering-taskbar.aspx */                      UnsafeNativeMethods.WmGetMinMaxInfo(hWnd' lParam);                        /* Setting handled to false enables the application to process it's own Min/Max requirements'                       * as mentioned by jason.bullard (comment from September 22' 2011) on http://gallery.expression.microsoft.com/ZuneWindowBehavior/ */                      handled = false;                      break;                    case NativeConstants.WM_NCHITTEST:                        // don't process the message on windows that can't be resized                      var resizeMode = AssociatedObject.ResizeMode;                      if (resizeMode == ResizeMode.CanMinimize || resizeMode == ResizeMode.NoResize)                          break;                        // get X & Y out of the message                      var screenPoint = new Point((short)lParam' (short)(lParam.ToInt32() >> 16));                        // convert to window coordinates                      var windowPoint = AssociatedObject.PointFromScreen(screenPoint);                      var windowSize = AssociatedObject.RenderSize;                      var windowRect = new Rect(windowSize);                      windowRect.Inflate(-resizeWidth' -resizeWidth);                        // don't process the message if the mouse is outside the 6px resize border                      if (windowRect.Contains(windowPoint))                          break;                        var windowHeight = (int)windowSize.Height;                      var windowWidth = (int)windowSize.Width;                        // create the rectangles where resize arrows are shown                      var topLeft = new Rect(0' 0' resizeWidth' resizeWidth);                      var top = new Rect(resizeWidth' 0' windowWidth - resizeWidth * 2' resizeWidth);                      var topRight = new Rect(windowWidth - resizeWidth' 0' resizeWidth' resizeWidth);                        var left = new Rect(0' resizeWidth' resizeWidth' windowHeight - resizeWidth * 2);                      var right = new Rect(windowWidth - resizeWidth' resizeWidth' resizeWidth' windowHeight - resizeWidth * 2);                        var bottomLeft = new Rect(0' windowHeight - resizeWidth' resizeWidth' resizeWidth);                      var bottom = new Rect(resizeWidth' windowHeight - resizeWidth' windowWidth - resizeWidth * 2' resizeWidth);                      var bottomRight = new Rect(windowWidth - resizeWidth' windowHeight - resizeWidth' resizeWidth' resizeWidth);                        // check if the mouse is within one of the rectangles                      if (topLeft.Contains(windowPoint))                          returnval = (IntPtr)NativeConstants.HTTOPLEFT;                      else if (top.Contains(windowPoint))                          returnval = (IntPtr)NativeConstants.HTTOP;                      else if (topRight.Contains(windowPoint))                          returnval = (IntPtr)NativeConstants.HTTOPRIGHT;                      else if (left.Contains(windowPoint))                          returnval = (IntPtr)NativeConstants.HTLEFT;                      else if (right.Contains(windowPoint))                          returnval = (IntPtr)NativeConstants.HTRIGHT;                      else if (bottomLeft.Contains(windowPoint))                          returnval = (IntPtr)NativeConstants.HTBOTTOMLEFT;                      else if (bottom.Contains(windowPoint))                          returnval = (IntPtr)NativeConstants.HTBOTTOM;                      else if (bottomRight.Contains(windowPoint))                          returnval = (IntPtr)NativeConstants.HTBOTTOMRIGHT;                        if (returnval != IntPtr.Zero)                          handled = true;                        break;              }
Magic Number,ServiceControl.Config.Xaml.Behaviours,BorderlessWindowBehavior,C:\repos\Particular_ServiceControl\src\ServiceControl.Config\Xaml\Behaviours\BorderlessWindowBehavior.cs,HwndHook,The following statement contains a magic number: switch (message)              {                  case NativeConstants.WM_NCCALCSIZE:                      /* Hides the border */                      handled = true;                      break;                    case NativeConstants.WM_NCPAINT:                      {                          if (Environment.OSVersion.Version.Major >= 6)                          {                              var m = new MARGINS { bottomHeight = 1' leftWidth = 1' rightWidth = 1' topHeight = 1 };                              UnsafeNativeMethods.DwmExtendFrameIntoClientArea(hwnd' ref m);                          }                          handled = true;                      }                      break;                    case NativeConstants.WM_NCACTIVATE:                      {                          /* As per http://msdn.microsoft.com/en-us/library/ms632633(VS.85).aspx ' "-1" lParam                           * "does not repaint the nonclient area to reflect the state change." */                          returnval = UnsafeNativeMethods.DefWindowProc(hWnd' message' wParam' new IntPtr(-1));                          handled = true;                      }                      break;                    case NativeConstants.WM_GETMINMAXINFO:                      /* http://blogs.msdn.com/b/llobo/archive/2006/08/01/maximizing-window-_2800_with-windowstyle_3d00_none_2900_-considering-taskbar.aspx */                      UnsafeNativeMethods.WmGetMinMaxInfo(hWnd' lParam);                        /* Setting handled to false enables the application to process it's own Min/Max requirements'                       * as mentioned by jason.bullard (comment from September 22' 2011) on http://gallery.expression.microsoft.com/ZuneWindowBehavior/ */                      handled = false;                      break;                    case NativeConstants.WM_NCHITTEST:                        // don't process the message on windows that can't be resized                      var resizeMode = AssociatedObject.ResizeMode;                      if (resizeMode == ResizeMode.CanMinimize || resizeMode == ResizeMode.NoResize)                          break;                        // get X & Y out of the message                      var screenPoint = new Point((short)lParam' (short)(lParam.ToInt32() >> 16));                        // convert to window coordinates                      var windowPoint = AssociatedObject.PointFromScreen(screenPoint);                      var windowSize = AssociatedObject.RenderSize;                      var windowRect = new Rect(windowSize);                      windowRect.Inflate(-resizeWidth' -resizeWidth);                        // don't process the message if the mouse is outside the 6px resize border                      if (windowRect.Contains(windowPoint))                          break;                        var windowHeight = (int)windowSize.Height;                      var windowWidth = (int)windowSize.Width;                        // create the rectangles where resize arrows are shown                      var topLeft = new Rect(0' 0' resizeWidth' resizeWidth);                      var top = new Rect(resizeWidth' 0' windowWidth - resizeWidth * 2' resizeWidth);                      var topRight = new Rect(windowWidth - resizeWidth' 0' resizeWidth' resizeWidth);                        var left = new Rect(0' resizeWidth' resizeWidth' windowHeight - resizeWidth * 2);                      var right = new Rect(windowWidth - resizeWidth' resizeWidth' resizeWidth' windowHeight - resizeWidth * 2);                        var bottomLeft = new Rect(0' windowHeight - resizeWidth' resizeWidth' resizeWidth);                      var bottom = new Rect(resizeWidth' windowHeight - resizeWidth' windowWidth - resizeWidth * 2' resizeWidth);                      var bottomRight = new Rect(windowWidth - resizeWidth' windowHeight - resizeWidth' resizeWidth' resizeWidth);                        // check if the mouse is within one of the rectangles                      if (topLeft.Contains(windowPoint))                          returnval = (IntPtr)NativeConstants.HTTOPLEFT;                      else if (top.Contains(windowPoint))                          returnval = (IntPtr)NativeConstants.HTTOP;                      else if (topRight.Contains(windowPoint))                          returnval = (IntPtr)NativeConstants.HTTOPRIGHT;                      else if (left.Contains(windowPoint))                          returnval = (IntPtr)NativeConstants.HTLEFT;                      else if (right.Contains(windowPoint))                          returnval = (IntPtr)NativeConstants.HTRIGHT;                      else if (bottomLeft.Contains(windowPoint))                          returnval = (IntPtr)NativeConstants.HTBOTTOMLEFT;                      else if (bottom.Contains(windowPoint))                          returnval = (IntPtr)NativeConstants.HTBOTTOM;                      else if (bottomRight.Contains(windowPoint))                          returnval = (IntPtr)NativeConstants.HTBOTTOMRIGHT;                        if (returnval != IntPtr.Zero)                          handled = true;                        break;              }
Magic Number,ServiceControl.Config.Xaml.Behaviours,BorderlessWindowBehavior,C:\repos\Particular_ServiceControl\src\ServiceControl.Config\Xaml\Behaviours\BorderlessWindowBehavior.cs,HwndHook,The following statement contains a magic number: switch (message)              {                  case NativeConstants.WM_NCCALCSIZE:                      /* Hides the border */                      handled = true;                      break;                    case NativeConstants.WM_NCPAINT:                      {                          if (Environment.OSVersion.Version.Major >= 6)                          {                              var m = new MARGINS { bottomHeight = 1' leftWidth = 1' rightWidth = 1' topHeight = 1 };                              UnsafeNativeMethods.DwmExtendFrameIntoClientArea(hwnd' ref m);                          }                          handled = true;                      }                      break;                    case NativeConstants.WM_NCACTIVATE:                      {                          /* As per http://msdn.microsoft.com/en-us/library/ms632633(VS.85).aspx ' "-1" lParam                           * "does not repaint the nonclient area to reflect the state change." */                          returnval = UnsafeNativeMethods.DefWindowProc(hWnd' message' wParam' new IntPtr(-1));                          handled = true;                      }                      break;                    case NativeConstants.WM_GETMINMAXINFO:                      /* http://blogs.msdn.com/b/llobo/archive/2006/08/01/maximizing-window-_2800_with-windowstyle_3d00_none_2900_-considering-taskbar.aspx */                      UnsafeNativeMethods.WmGetMinMaxInfo(hWnd' lParam);                        /* Setting handled to false enables the application to process it's own Min/Max requirements'                       * as mentioned by jason.bullard (comment from September 22' 2011) on http://gallery.expression.microsoft.com/ZuneWindowBehavior/ */                      handled = false;                      break;                    case NativeConstants.WM_NCHITTEST:                        // don't process the message on windows that can't be resized                      var resizeMode = AssociatedObject.ResizeMode;                      if (resizeMode == ResizeMode.CanMinimize || resizeMode == ResizeMode.NoResize)                          break;                        // get X & Y out of the message                      var screenPoint = new Point((short)lParam' (short)(lParam.ToInt32() >> 16));                        // convert to window coordinates                      var windowPoint = AssociatedObject.PointFromScreen(screenPoint);                      var windowSize = AssociatedObject.RenderSize;                      var windowRect = new Rect(windowSize);                      windowRect.Inflate(-resizeWidth' -resizeWidth);                        // don't process the message if the mouse is outside the 6px resize border                      if (windowRect.Contains(windowPoint))                          break;                        var windowHeight = (int)windowSize.Height;                      var windowWidth = (int)windowSize.Width;                        // create the rectangles where resize arrows are shown                      var topLeft = new Rect(0' 0' resizeWidth' resizeWidth);                      var top = new Rect(resizeWidth' 0' windowWidth - resizeWidth * 2' resizeWidth);                      var topRight = new Rect(windowWidth - resizeWidth' 0' resizeWidth' resizeWidth);                        var left = new Rect(0' resizeWidth' resizeWidth' windowHeight - resizeWidth * 2);                      var right = new Rect(windowWidth - resizeWidth' resizeWidth' resizeWidth' windowHeight - resizeWidth * 2);                        var bottomLeft = new Rect(0' windowHeight - resizeWidth' resizeWidth' resizeWidth);                      var bottom = new Rect(resizeWidth' windowHeight - resizeWidth' windowWidth - resizeWidth * 2' resizeWidth);                      var bottomRight = new Rect(windowWidth - resizeWidth' windowHeight - resizeWidth' resizeWidth' resizeWidth);                        // check if the mouse is within one of the rectangles                      if (topLeft.Contains(windowPoint))                          returnval = (IntPtr)NativeConstants.HTTOPLEFT;                      else if (top.Contains(windowPoint))                          returnval = (IntPtr)NativeConstants.HTTOP;                      else if (topRight.Contains(windowPoint))                          returnval = (IntPtr)NativeConstants.HTTOPRIGHT;                      else if (left.Contains(windowPoint))                          returnval = (IntPtr)NativeConstants.HTLEFT;                      else if (right.Contains(windowPoint))                          returnval = (IntPtr)NativeConstants.HTRIGHT;                      else if (bottomLeft.Contains(windowPoint))                          returnval = (IntPtr)NativeConstants.HTBOTTOMLEFT;                      else if (bottom.Contains(windowPoint))                          returnval = (IntPtr)NativeConstants.HTBOTTOM;                      else if (bottomRight.Contains(windowPoint))                          returnval = (IntPtr)NativeConstants.HTBOTTOMRIGHT;                        if (returnval != IntPtr.Zero)                          handled = true;                        break;              }
Magic Number,ServiceControl.Config.Xaml.Controls,FormSlider,C:\repos\Particular_ServiceControl\src\ServiceControl.Config\Xaml\Controls\FormSlider.cs,UpdateSummary,The following statement contains a magic number: if (period.TotalHours < 24)              {                  s.AppendFormat("{0} Hours"' period.Hours);              }              else              {                  s.AppendFormat("{0} Day{1}"' period.Days' period.Days > 1 ? "s" : String.Empty);                  if (period.Hours != 0)                  {                      s.AppendFormat(" {0} Hour{1}"' period.Hours' period.Hours > 1 ? "s" : String.Empty);                  }              }
Magic Number,ServiceControl.Config.UI.ListInstances,ListInstancesViewModel,C:\repos\Particular_ServiceControl\src\ServiceControl.Config\UI\ListInstances\ListInstancesViewModel.cs,Handle,The following statement contains a magic number: foreach (var instance in Instances)              {                  if (instance.Version <= new Version("1.23.0")) continue;                  Task.Run(() =>                  {                      try                      {                          var request = WebRequest.Create($"{instance.BrowsableUrl}license?refresh=true");                          request.Timeout = 2000;                          request.GetResponse();                      }                      catch                      {                          // Ignored                      }                  });              }
Missing Default,ServiceControl.Config.Framework.Rx,OneActive,C:\repos\Particular_ServiceControl\src\ServiceControl.Config\Framework\Rx\RxConductorWithCollectionOneActive.cs,OneActive,The following switch statement is missing a default case: switch (e.Action)                          {                              case NotifyCollectionChangedAction.Add:                                  e.NewItems.OfType<IChild>().Apply(x => x.Parent = this);                                  break;                                case NotifyCollectionChangedAction.Remove:                                  e.OldItems.OfType<IChild>().Apply(x => x.Parent = null);                                  break;                                case NotifyCollectionChangedAction.Replace:                                  e.NewItems.OfType<IChild>().Apply(x => x.Parent = this);                                  e.OldItems.OfType<IChild>().Apply(x => x.Parent = null);                                  break;                                case NotifyCollectionChangedAction.Reset:                                  items.OfType<IChild>().Apply(x => x.Parent = this);                                  break;                          }
Missing Default,ServiceControl.Config.Xaml.Behaviours,BorderlessWindowBehavior,C:\repos\Particular_ServiceControl\src\ServiceControl.Config\Xaml\Behaviours\BorderlessWindowBehavior.cs,HwndHook,The following switch statement is missing a default case: switch (message)              {                  case NativeConstants.WM_NCCALCSIZE:                      /* Hides the border */                      handled = true;                      break;                    case NativeConstants.WM_NCPAINT:                      {                          if (Environment.OSVersion.Version.Major >= 6)                          {                              var m = new MARGINS { bottomHeight = 1' leftWidth = 1' rightWidth = 1' topHeight = 1 };                              UnsafeNativeMethods.DwmExtendFrameIntoClientArea(hwnd' ref m);                          }                          handled = true;                      }                      break;                    case NativeConstants.WM_NCACTIVATE:                      {                          /* As per http://msdn.microsoft.com/en-us/library/ms632633(VS.85).aspx ' "-1" lParam                           * "does not repaint the nonclient area to reflect the state change." */                          returnval = UnsafeNativeMethods.DefWindowProc(hWnd' message' wParam' new IntPtr(-1));                          handled = true;                      }                      break;                    case NativeConstants.WM_GETMINMAXINFO:                      /* http://blogs.msdn.com/b/llobo/archive/2006/08/01/maximizing-window-_2800_with-windowstyle_3d00_none_2900_-considering-taskbar.aspx */                      UnsafeNativeMethods.WmGetMinMaxInfo(hWnd' lParam);                        /* Setting handled to false enables the application to process it's own Min/Max requirements'                       * as mentioned by jason.bullard (comment from September 22' 2011) on http://gallery.expression.microsoft.com/ZuneWindowBehavior/ */                      handled = false;                      break;                    case NativeConstants.WM_NCHITTEST:                        // don't process the message on windows that can't be resized                      var resizeMode = AssociatedObject.ResizeMode;                      if (resizeMode == ResizeMode.CanMinimize || resizeMode == ResizeMode.NoResize)                          break;                        // get X & Y out of the message                      var screenPoint = new Point((short)lParam' (short)(lParam.ToInt32() >> 16));                        // convert to window coordinates                      var windowPoint = AssociatedObject.PointFromScreen(screenPoint);                      var windowSize = AssociatedObject.RenderSize;                      var windowRect = new Rect(windowSize);                      windowRect.Inflate(-resizeWidth' -resizeWidth);                        // don't process the message if the mouse is outside the 6px resize border                      if (windowRect.Contains(windowPoint))                          break;                        var windowHeight = (int)windowSize.Height;                      var windowWidth = (int)windowSize.Width;                        // create the rectangles where resize arrows are shown                      var topLeft = new Rect(0' 0' resizeWidth' resizeWidth);                      var top = new Rect(resizeWidth' 0' windowWidth - resizeWidth * 2' resizeWidth);                      var topRight = new Rect(windowWidth - resizeWidth' 0' resizeWidth' resizeWidth);                        var left = new Rect(0' resizeWidth' resizeWidth' windowHeight - resizeWidth * 2);                      var right = new Rect(windowWidth - resizeWidth' resizeWidth' resizeWidth' windowHeight - resizeWidth * 2);                        var bottomLeft = new Rect(0' windowHeight - resizeWidth' resizeWidth' resizeWidth);                      var bottom = new Rect(resizeWidth' windowHeight - resizeWidth' windowWidth - resizeWidth * 2' resizeWidth);                      var bottomRight = new Rect(windowWidth - resizeWidth' windowHeight - resizeWidth' resizeWidth' resizeWidth);                        // check if the mouse is within one of the rectangles                      if (topLeft.Contains(windowPoint))                          returnval = (IntPtr)NativeConstants.HTTOPLEFT;                      else if (top.Contains(windowPoint))                          returnval = (IntPtr)NativeConstants.HTTOP;                      else if (topRight.Contains(windowPoint))                          returnval = (IntPtr)NativeConstants.HTTOPRIGHT;                      else if (left.Contains(windowPoint))                          returnval = (IntPtr)NativeConstants.HTLEFT;                      else if (right.Contains(windowPoint))                          returnval = (IntPtr)NativeConstants.HTRIGHT;                      else if (bottomLeft.Contains(windowPoint))                          returnval = (IntPtr)NativeConstants.HTBOTTOMLEFT;                      else if (bottom.Contains(windowPoint))                          returnval = (IntPtr)NativeConstants.HTBOTTOM;                      else if (bottomRight.Contains(windowPoint))                          returnval = (IntPtr)NativeConstants.HTBOTTOMRIGHT;                        if (returnval != IntPtr.Zero)                          handled = true;                        break;              }
