Implementation smell,Namespace,Class,File,Method,Description
Long Statement,ServiceControl.LoadTests.Reporter,ReporterFeature,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.LoadTests.Reporter\ReporterFeature.cs,Setup,The length of the statement  "            context.Container.ConfigureComponent(b => new StatisticsEnricher(statistics' processedMeter)' DependencyLifecycle.SingleInstance); " is 130.
Empty Catch Block,ServiceControl.LoadTests.Reporter,ReportProcessingStatistics,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.LoadTests.Reporter\ReportProcessingStatistics.cs,OnStop,The method has an empty catch block.
Magic Number,ServiceControl.LoadTests.Reporter,ReporterFeature,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.LoadTests.Reporter\ReporterFeature.cs,Setup,The following statement contains a magic number: metricsConfig.WithReporting(r =>              {                  r.WithCSVReports("."' TimeSpan.FromSeconds(5));              });
Magic Number,ServiceControl.LoadTests.Reporter,ReportProcessingStatistics,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.LoadTests.Reporter\ReportProcessingStatistics.cs,OnStart,The following statement contains a magic number: reportTask = Task.Run(async () =>              {                  while (!tokenSource.IsCancellationRequested)                  {                      await Task.Delay(2000' tokenSource.Token).ConfigureAwait(false);                      try                      {                          var message = new ProcessingReport                          {                              Audits = statistics.Audits'                              AuditQueue = auditQueueAddress'                              HostId = statistics.HostId                          };                          await session.Send(loadGenetorQueue' message).ConfigureAwait(false);                      }                      catch (Exception e)                      {                          Console.WriteLine(e);                      }                  }              });
