Implementation smell,Namespace,Class,File,Method,Description
Complex Method,ServiceControlInstaller.CustomActions,CustomActionsInstall,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControlInstaller.CustomActions\CustomActionsInstall.cs,UpgradeInstances,Cyclomatic complexity of the method is 12
Complex Method,ServiceControlInstaller.CustomActions,CustomActionsMigrations,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControlInstaller.CustomActions\CustomActionsMigration.cs,RemoveProductFromMSIList,Cyclomatic complexity of the method is 12
Long Identifier,ServiceControlInstaller.CustomActions,CustomActionsInstall,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControlInstaller.CustomActions\CustomActionsInstall.cs,UpgradeInstances,The length of the parameter forwardErrorMessagesPropertyValue is 33.
Long Identifier,ServiceControlInstaller.CustomActions,CustomActionsInstall,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControlInstaller.CustomActions\CustomActionsInstall.cs,UpgradeInstances,The length of the parameter auditRetentionPeriodPropertyValue is 33.
Long Identifier,ServiceControlInstaller.CustomActions,CustomActionsInstall,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControlInstaller.CustomActions\CustomActionsInstall.cs,UpgradeInstances,The length of the parameter errorRetentionPeriodPropertyValue is 33.
Long Statement,ServiceControlInstaller.CustomActions,CustomActionsInstall,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControlInstaller.CustomActions\CustomActionsInstall.cs,UpgradeInstances,The length of the statement  "            if (upgradeInstancesPropertyValue.Equals("*"' StringComparison.OrdinalIgnoreCase) || upgradeInstancesPropertyValue.Equals("ALL"' StringComparison.OrdinalIgnoreCase)) " is 165.
Long Statement,ServiceControlInstaller.CustomActions,CustomActionsInstall,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControlInstaller.CustomActions\CustomActionsInstall.cs,UpgradeInstances,The length of the statement  "                var candidates = upgradeInstancesPropertyValue.Replace(" "' String.Empty).Split("'".ToCharArray()' StringSplitOptions.RemoveEmptyEntries); " is 138.
Long Statement,ServiceControlInstaller.CustomActions,CustomActionsInstall,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControlInstaller.CustomActions\CustomActionsInstall.cs,UpgradeInstances,The length of the statement  "                instancesToUpgrade.AddRange(InstanceFinder.ServiceControlInstances().Where(instance => candidates.Contains(instance.Name' StringComparer.OrdinalIgnoreCase))); " is 158.
Long Statement,ServiceControlInstaller.CustomActions,CustomActionsInstall,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControlInstaller.CustomActions\CustomActionsInstall.cs,UpgradeInstances,The length of the statement  "                    if (!instance.AppConfig.AppSettingExists(ServiceControlSettings.ForwardErrorMessages.Name) & !options.OverrideEnableErrorForwarding.Value) " is 138.
Long Statement,ServiceControlInstaller.CustomActions,CustomActionsInstall,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControlInstaller.CustomActions\CustomActionsInstall.cs,UpgradeInstances,The length of the statement  "                        logger.Warn($"Unattend upgrade {instance.Name} to {zipInfo.Version} not attempted. FORWARDERRORMESSAGES MSI parameter was required because appsettings needed a value for '{ServiceControlSettings.ForwardErrorMessages.Name}'"); " is 225.
Long Statement,ServiceControlInstaller.CustomActions,CustomActionsInstall,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControlInstaller.CustomActions\CustomActionsInstall.cs,UpgradeInstances,The length of the statement  "                                logger.Warn($"Unattend upgrade {instance.Name} to {zipInfo.Version} not attempted. AUDITRETENTIONPERIOD MSI parameter was required because appsettings needed a value for '{ServiceControlSettings.AuditRetentionPeriod.Name}'"); " is 225.
Long Statement,ServiceControlInstaller.CustomActions,CustomActionsInstall,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControlInstaller.CustomActions\CustomActionsInstall.cs,UpgradeInstances,The length of the statement  "                    if (!instance.AppConfig.AppSettingExists(ServiceControlSettings.ErrorRetentionPeriod.Name) & !options.ErrorRetentionPeriod.HasValue) " is 132.
Long Statement,ServiceControlInstaller.CustomActions,CustomActionsInstall,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControlInstaller.CustomActions\CustomActionsInstall.cs,UpgradeInstances,The length of the statement  "                        logger.Warn($"Unattend upgrade {instance.Name} to {zipInfo.Version} not attempted. ERRORRETENTIONPERIOD MSI parameter was required because appsettings needed a value for '{ServiceControlSettings.ErrorRetentionPeriod.Name}'"); " is 225.
Long Statement,ServiceControlInstaller.CustomActions,CustomActionsInstall,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControlInstaller.CustomActions\CustomActionsInstall.cs,UnattendedInstall,The length of the statement  "            var unattendedFilePath = Environment.ExpandEnvironmentVariables(Path.IsPathRooted(unattendedFilePropertyValue) ? unattendedFilePropertyValue : Path.Combine(currentDirectory' unattendedFilePropertyValue)); " is 204.
Long Statement,ServiceControlInstaller.CustomActions,CustomActionsInstall,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControlInstaller.CustomActions\CustomActionsInstall.cs,ImportLicenseInstall,The length of the statement  "            var licenseFilePath = Environment.ExpandEnvironmentVariables(Path.IsPathRooted(licenseFilePropertyValue) ? licenseFilePropertyValue : Path.Combine(currentDirectory' licenseFilePropertyValue)); " is 192.
Long Statement,ServiceControlInstaller.CustomActions,CustomActionsMigrations,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControlInstaller.CustomActions\CustomActionsMigration.cs,RemoveProductFromMSIList,The length of the statement  "                                            logger.Info($@"Removing HKEY_LOCAL_MACHINE\SOFTWARE\Wow6432Node\Microsoft\Windows\CurrentVersion\Uninstall\{descriptiveVersion}"); " is 130.
Long Statement,ServiceControlInstaller.CustomActions,CustomActionsMigrations,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControlInstaller.CustomActions\CustomActionsMigration.cs,RemoveProductFromMSIList,The length of the statement  "                                        logger.Info($@"Removing HKEY_LOCAL_MACHINE\SOFTWARE\Wow6432Node\Microsoft\Windows\CurrentVersion\Uninstall\{descriptiveVersion}"); " is 130.
Long Statement,ServiceControlInstaller.CustomActions,CustomActionsMigrations,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControlInstaller.CustomActions\CustomActionsMigration.cs,RemoveProductFromMSIList,The length of the statement  "                                logger.Info($@"Removing HKEY_LOCAL_MACHINE\SOFTWARE\Wow6432Node\Microsoft\Windows\CurrentVersion\Uninstall\{productCode}"); " is 123.
Long Statement,ServiceControlInstaller.CustomActions,CustomActionsMigrations,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControlInstaller.CustomActions\CustomActionsMigration.cs,RemoveOrphanedInstallationKeys,The length of the statement  "                foreach (var uninstallKey in oldProducts.Select(product => $@"SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\{product.Value}")) " is 132.
Long Statement,ServiceControlInstaller.CustomActions,CustomActionsMigrations,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControlInstaller.CustomActions\CustomActionsMigration.cs,RemoveOrphanedInstallationKeys,The length of the statement  "            foreach (var uninstallKey in oldProducts.Select(product => $@"SOFTWARE\Classes\Installer\Products\{new Guid(product.Value).Flip():N}")) " is 135.
Magic Number,ServiceControlInstaller.CustomActions.Extensions,GuidExtensions,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControlInstaller.CustomActions\Extensions\GuidExtensions.cs,Flip,The following statement contains a magic number: parts.Take(3)
Magic Number,ServiceControlInstaller.CustomActions.Extensions,GuidExtensions,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControlInstaller.CustomActions\Extensions\GuidExtensions.cs,Flip,The following statement contains a magic number: parts.Skip(3).SelectMany(part => part.Chunks(2))
Magic Number,ServiceControlInstaller.CustomActions.Extensions,GuidExtensions,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControlInstaller.CustomActions\Extensions\GuidExtensions.cs,Flip,The following statement contains a magic number: parts.Skip(3).SelectMany(part => part.Chunks(2))
