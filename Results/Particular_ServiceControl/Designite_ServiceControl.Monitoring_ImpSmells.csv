Implementation smell,Namespace,Class,File,Method,Description
Complex Method,ServiceControl.Monitoring,Option,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring\Hosting\Options.cs,ParsePrototype,Cyclomatic complexity of the method is 10
Complex Method,ServiceControl.Monitoring,Option,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring\Hosting\Options.cs,AddSeparators,Cyclomatic complexity of the method is 8
Complex Method,ServiceControl.Monitoring,OptionSet,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring\Hosting\Options.cs,WriteOptionPrototype,Cyclomatic complexity of the method is 8
Complex Method,ServiceControl.Monitoring,OptionSet,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring\Hosting\Options.cs,GetDescription,Cyclomatic complexity of the method is 12
Complex Method,ServiceControl.Monitoring.Http.Diagrams,DiagramApiController,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring\Http\Diagrams\DiagramApiController.cs,GetSingleEndpointMetrics,Cyclomatic complexity of the method is 8
Long Parameter List,ServiceControl.Monitoring,OptionSet,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring\Hosting\Options.cs,GetOptionParts,The method has 5 parameters. Parameters: argument' flag' name' sep' value
Long Identifier,ServiceControl.Monitoring,Settings,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring\Settings.cs,LoadTransportCustomizationType,The length of the parameter configuredTransportCustomizationName is 36.
Long Identifier,ServiceControl.Monitoring,Settings,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring\Settings.cs,,The length of the parameter legacyTransportCustomizationNames is 33.
Long Statement,ServiceControl.Monitoring,Bootstrapper,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring\Bootstrapper.cs,Initialize,The length of the statement  "            containerBuilder.RegisterSource(new AnyConcreteTypeNotAlreadyRegisteredSource(type => type.Assembly == typeof(Bootstrapper).Assembly && type.GetInterfaces().Any() == false)); " is 174.
Long Statement,ServiceControl.Monitoring,Bootstrapper,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring\Bootstrapper.cs,QueueLengthProviderBuilder,The length of the statement  "                Action<QueueLengthEntry[]' EndpointToQueueMapping> store = (es' q) => qls.Store(es.Select(e => ToEntry(e)).ToArray()' ToQueueId(q)); " is 132.
Long Statement,ServiceControl.Monitoring,Bootstrapper,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring\Bootstrapper.cs,CreateContainer,The length of the statement  "            containerBuilder.Register(c => buildQueueLengthProvider(c.Resolve<QueueLengthStore>())).As<IProvideQueueLength>().SingleInstance(); " is 131.
Long Statement,ServiceControl.Monitoring,OptionSet,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring\Hosting\Options.cs,ParseValue,The length of the statement  "                throw new OptionException(MessageLocalizer($"Error: Found {c.OptionValues.Count} option values when expecting {c.Option.MaxValueCount}.")' " is 138.
Long Statement,ServiceControl.Monitoring,MonitorLogs,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring\MonitorLogs.cs,Configure,The length of the statement  "            var simpleLayout = new SimpleLayout("${longdate}|${threadid}|${level}|${logger}|${message}${onexception:${newline}${exception:format=tostring}}"); " is 146.
Long Statement,ServiceControl.Monitoring,MonitorLogs,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring\MonitorLogs.cs,Configure,The length of the statement  "            nlogConfig.LoggingRules.Add(new LoggingRule("*"' settings.LogLevel < LogLevel.Info ? settings.LogLevel : LogLevel.Info' consoleTarget)); " is 136.
Long Statement,ServiceControl.Monitoring,MonitorLogs,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring\MonitorLogs.cs,Configure,The length of the statement  "            logger.InfoFormat("Logging to {0} with LogLevel '{1}'"' fileTarget.FileName.Render(logEventInfo)' settings.LogLevel.Name); " is 122.
Long Statement,ServiceControl.Monitoring.Http.Diagrams,Aggregator,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring\Http\Diagrams\Aggregator.cs,ToTotalMeasurementsPerSecond,The length of the statement  "                Average = uniqueIntervals.Sum(ig => ig.Sum(i => i.TotalMeasurements)) / returnOneIfZero(uniqueIntervals.Count) / seconds' " is 121.
Long Statement,ServiceControl.Monitoring.Http.Diagrams,DiagramApiController,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring\Http\Diagrams\DiagramApiController.cs,GetAllEndpointsMetrics,The length of the statement  "            var metricByInstanceLookup = breakdownProviders.OfType<IProvideBreakdownBy<EndpointInstanceId>>().ToDictionary(i => i.GetType()); " is 129.
Long Statement,ServiceControl.Monitoring.Http.Diagrams,DiagramApiController,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring\Http\Diagrams\DiagramApiController.cs,GetAllEndpointsMetrics,The length of the statement  "            var metricByQueueLookup = breakdownProviders.OfType<IProvideBreakdownBy<EndpointInputQueue>>().ToDictionary(i => i.GetType()); " is 126.
Long Statement,ServiceControl.Monitoring.Http.Diagrams,DiagramApiController,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring\Http\Diagrams\DiagramApiController.cs,GetSingleEndpointMetrics,The length of the statement  "            var metricByInstanceLookup = breakdownProviders.OfType<IProvideBreakdownBy<EndpointInstanceId>>().ToDictionary(i => i.GetType()); " is 129.
Long Statement,ServiceControl.Monitoring.Http.Diagrams,DiagramApiController,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring\Http\Diagrams\DiagramApiController.cs,GetSingleEndpointMetrics,The length of the statement  "            var metricByQueueLookup = breakdownProviders.OfType<IProvideBreakdownBy<EndpointInputQueue>>().ToDictionary(i => i.GetType()); " is 126.
Long Statement,ServiceControl.Monitoring.Http.Diagrams,DiagramApiController,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring\Http\Diagrams\DiagramApiController.cs,GetSingleEndpointMetrics,The length of the statement  "            var metricByMessageTypeLookup = breakdownProviders.OfType<IProvideBreakdownBy<EndpointMessageType>>().ToDictionary(i => i.GetType()); " is 133.
Long Statement,ServiceControl.Monitoring.Http.Diagrams,DiagramApiController,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring\Http\Diagrams\DiagramApiController.cs,ExtractHistoryPeriod,The length of the statement  "            return HistoryPeriod.FromMinutes(query["history"] == null || query["history"] == "undefined" ? DefaultHistory : int.Parse(query["history"])); " is 141.
Long Statement,ServiceControl.Monitoring.Http.Diagrams,MonitoredEndpointMessageTypeParser,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring\Http\Diagrams\MonitoredEndpointMessageTypeParser.cs,Parse,The length of the statement  "            //      see: https://docs.particular.net/nservicebus/messaging/headers#serialization-headers-nservicebus-enclosedmessagetypes " is 125.
Long Statement,ServiceControl.Monitoring.Infrastructure,EndpointInputQueue,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring\Infrastructure\EndpointInputQueue.cs,GetHashCode,The length of the statement  "                return ((EndpointName != null ? EndpointName.GetHashCode() : 0) * 397) ^ (InputQueue != null ? InputQueue.GetHashCode() : 0); " is 125.
Long Statement,ServiceControl.Monitoring.Infrastructure,EndpointMessageType,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring\Infrastructure\EndpointMessageType.cs,GetHashCode,The length of the statement  "                return ((EndpointName != null ? EndpointName.GetHashCode() : 0) * 397) ^ (MessageType != null ? MessageType.GetHashCode() : 0); " is 127.
Long Statement,ServiceControl.Monitoring.Infrastructure,IntervalsStore<BreakdownT>,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring\Infrastructure\IntervalsStore.cs,Store,The length of the statement  "            var measurement = intervals.GetOrAdd(breakdownId' _ => new Measurement(IntervalSize' numberOfIntervals' delayedIntervals)); " is 123.
Long Statement,ServiceControl.Monitoring.Infrastructure.OWIN,LogApiCalls,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring\Infrastructure\OWIN\LogApiCalls.cs,LogAllIncomingCalls,The length of the statement  "            log.DebugFormat("End {0} ({1}): {2}"' context.Request.Method' context.Response.StatusCode' context.Request.Uri.ToString()); " is 123.
Long Statement,ServiceControl.Monitoring.Licensing,LicenseCheckFeatureStartup,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring\Licensing\LicenseCheckFeature.cs,OnStart,The length of the statement  "            return Task.Run(() => checklicenseTimer = new Timer(objectstate => { licenseManager.Refresh(); }' null' TimeSpan.Zero' TimeSpan.FromHours(8))); " is 143.
Long Statement,ServiceControl.Monitoring.Licensing,LicenseManager,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring\Licensing\LicenseManager.cs,Refresh,The length of the statement  "            sources.Add(new LicenseSourceFilePath(Path.Combine(AppDomain.CurrentDomain.BaseDirectory' "ParticularPlatformLicense.xml"))); " is 125.
Long Statement,ServiceControl.Monitoring.QueueLength,LegacyQueueLengthReportHandler,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring\QueueLength\LegacyQueueLengthReportHandler.cs,Handle,The length of the statement  "                Logger.Warn($"Legacy queue length report received from {endpointInstanceId.InstanceName} instance of {endpointInstanceId.EndpointName}"); " is 137.
Complex Conditional,ServiceControl.Monitoring,Option,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring\Hosting\Options.cs,Option,The conditional expression  "Array.IndexOf(Names' "<>") >= 0 &&                  ((Names.Length == 1 && OptionValueType != OptionValueType.None) ||                   (Names.Length > 1 && MaxValueCount > 1))"  is complex.
Complex Conditional,ServiceControl.Monitoring,OptionSet,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring\Hosting\Options.cs,ParseBool,The conditional expression  "n.Length >= 1 && (n[n.Length - 1] == '+' || n[n.Length - 1] == '-') &&                  Contains((rn = n.Substring(0' n.Length - 1)))"  is complex.
Magic Number,ServiceControl.Monitoring,OptionSet,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring\Hosting\Options.cs,Add,The following statement contains a magic number: Option p = new ActionOption(prototype' description' 2'                  delegate(OptionValueCollection v) { action(v[0]' v[1]); });
Magic Number,ServiceControl.Monitoring,OptionSet,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring\Hosting\Options.cs,ParseValue,The following statement contains a magic number: c.Option.ValueSeparators != null                      ? option.Split(c.Option.ValueSeparators' 2' StringSplitOptions.None)                      : new[]                      {                          option                      }
Magic Number,ServiceControl.Monitoring,OptionSet,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring\Hosting\Options.cs,WriteOptionDescriptions,The following statement contains a magic number: var prefix = new string(' '' OptionWidth + 2);
Magic Number,ServiceControl.Monitoring,OptionSet,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring\Hosting\Options.cs,GetLines,The following statement contains a magic number: var length = 80 - OptionWidth - 2;
Magic Number,ServiceControl.Monitoring,OptionSet,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring\Hosting\Options.cs,GetLines,The following statement contains a magic number: var length = 80 - OptionWidth - 2;
Magic Number,ServiceControl.Monitoring,MonitorLogs,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring\MonitorLogs.cs,Configure,The following statement contains a magic number: var fileTarget = new FileTarget              {                  ArchiveEvery = FileArchivePeriod.Day'                  FileName = Path.Combine(settings.LogPath' "logfile.${shortdate}.txt")'                  ArchiveFileName = Path.Combine(settings.LogPath' "logfile.{#}.txt")'                  ArchiveNumbering = ArchiveNumberingMode.DateAndSequence'                  Layout = simpleLayout'                  MaxArchiveFiles = 14'                  ArchiveAboveSize = 30 * MegaByte'                  Header = new SimpleLayout(header)              };
Magic Number,ServiceControl.Monitoring,MonitorLogs,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring\MonitorLogs.cs,Configure,The following statement contains a magic number: var fileTarget = new FileTarget              {                  ArchiveEvery = FileArchivePeriod.Day'                  FileName = Path.Combine(settings.LogPath' "logfile.${shortdate}.txt")'                  ArchiveFileName = Path.Combine(settings.LogPath' "logfile.{#}.txt")'                  ArchiveNumbering = ArchiveNumberingMode.DateAndSequence'                  Layout = simpleLayout'                  MaxArchiveFiles = 14'                  ArchiveAboveSize = 30 * MegaByte'                  Header = new SimpleLayout(header)              };
Magic Number,ServiceControl.Monitoring,Settings,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring\Settings.cs,Load,The following statement contains a magic number: var settings = new Settings              {                  TransportType = reader.Read<string>("Monitoring/TransportType")'                  ConnectionString = GetConnectionString(reader)'                  LogLevel = MonitorLogs.InitializeLevel(reader)'                  LogPath = reader.Read("Monitoring/LogPath"' DefaultLogLocation())'                  ErrorQueue = reader.Read("Monitoring/ErrorQueue"' "error")'                  HttpHostName = reader.Read<string>("Monitoring/HttpHostname")'                  HttpPort = reader.Read<string>("Monitoring/HttpPort")'                  EndpointName = reader.Read<string>("Monitoring/EndpointName")'                  EndpointUptimeGracePeriod = TimeSpan.Parse(reader.Read("Monitoring/EndpointUptimeGracePeriod"' "00:00:40"))'                  MaximumConcurrencyLevel = 10              };
Magic Number,ServiceControl.Monitoring,VersionInfo,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring\VersionInfo.cs,GetFileVersion,The following statement contains a magic number: return typeof(VersionInfo).Assembly.GetName().Version.ToString(4);
Magic Number,ServiceControl.Monitoring.Infrastructure,EndpointInputQueue,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring\Infrastructure\EndpointInputQueue.cs,GetHashCode,The following statement contains a magic number: return ((EndpointName != null ? EndpointName.GetHashCode() : 0) * 397) ^ (InputQueue != null ? InputQueue.GetHashCode() : 0);
Magic Number,ServiceControl.Monitoring.Infrastructure,EndpointInstanceId,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring\Infrastructure\EndpointInstanceId.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (InstanceId != null ? InstanceId.GetHashCode() : 0);
Magic Number,ServiceControl.Monitoring.Infrastructure,EndpointMessageType,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring\Infrastructure\EndpointMessageType.cs,GetHashCode,The following statement contains a magic number: return ((EndpointName != null ? EndpointName.GetHashCode() : 0) * 397) ^ (MessageType != null ? MessageType.GetHashCode() : 0);
Magic Number,ServiceControl.Monitoring.Infrastructure,HistoryPeriod,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring\Infrastructure\HistoryPeriod.cs,HistoryPeriod,The following statement contains a magic number: All = new List<HistoryPeriod>              {                  new HistoryPeriod(TimeSpan.FromMinutes(1)' numberOfIntervals: 60' delayedIntervals: 2)'                  new HistoryPeriod(TimeSpan.FromMinutes(5)' numberOfIntervals: 60' delayedIntervals: 1)'                  new HistoryPeriod(TimeSpan.FromMinutes(10)' numberOfIntervals: 60' delayedIntervals: 1)'                  new HistoryPeriod(TimeSpan.FromMinutes(15)' numberOfIntervals: 60' delayedIntervals: 1)'                  new HistoryPeriod(TimeSpan.FromMinutes(30)' numberOfIntervals: 60' delayedIntervals: 1)'                  new HistoryPeriod(TimeSpan.FromMinutes(60)' numberOfIntervals: 60' delayedIntervals: 1)              };
Magic Number,ServiceControl.Monitoring.Infrastructure,HistoryPeriod,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring\Infrastructure\HistoryPeriod.cs,HistoryPeriod,The following statement contains a magic number: All = new List<HistoryPeriod>              {                  new HistoryPeriod(TimeSpan.FromMinutes(1)' numberOfIntervals: 60' delayedIntervals: 2)'                  new HistoryPeriod(TimeSpan.FromMinutes(5)' numberOfIntervals: 60' delayedIntervals: 1)'                  new HistoryPeriod(TimeSpan.FromMinutes(10)' numberOfIntervals: 60' delayedIntervals: 1)'                  new HistoryPeriod(TimeSpan.FromMinutes(15)' numberOfIntervals: 60' delayedIntervals: 1)'                  new HistoryPeriod(TimeSpan.FromMinutes(30)' numberOfIntervals: 60' delayedIntervals: 1)'                  new HistoryPeriod(TimeSpan.FromMinutes(60)' numberOfIntervals: 60' delayedIntervals: 1)              };
Magic Number,ServiceControl.Monitoring.Infrastructure,HistoryPeriod,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring\Infrastructure\HistoryPeriod.cs,HistoryPeriod,The following statement contains a magic number: All = new List<HistoryPeriod>              {                  new HistoryPeriod(TimeSpan.FromMinutes(1)' numberOfIntervals: 60' delayedIntervals: 2)'                  new HistoryPeriod(TimeSpan.FromMinutes(5)' numberOfIntervals: 60' delayedIntervals: 1)'                  new HistoryPeriod(TimeSpan.FromMinutes(10)' numberOfIntervals: 60' delayedIntervals: 1)'                  new HistoryPeriod(TimeSpan.FromMinutes(15)' numberOfIntervals: 60' delayedIntervals: 1)'                  new HistoryPeriod(TimeSpan.FromMinutes(30)' numberOfIntervals: 60' delayedIntervals: 1)'                  new HistoryPeriod(TimeSpan.FromMinutes(60)' numberOfIntervals: 60' delayedIntervals: 1)              };
Magic Number,ServiceControl.Monitoring.Infrastructure,HistoryPeriod,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring\Infrastructure\HistoryPeriod.cs,HistoryPeriod,The following statement contains a magic number: All = new List<HistoryPeriod>              {                  new HistoryPeriod(TimeSpan.FromMinutes(1)' numberOfIntervals: 60' delayedIntervals: 2)'                  new HistoryPeriod(TimeSpan.FromMinutes(5)' numberOfIntervals: 60' delayedIntervals: 1)'                  new HistoryPeriod(TimeSpan.FromMinutes(10)' numberOfIntervals: 60' delayedIntervals: 1)'                  new HistoryPeriod(TimeSpan.FromMinutes(15)' numberOfIntervals: 60' delayedIntervals: 1)'                  new HistoryPeriod(TimeSpan.FromMinutes(30)' numberOfIntervals: 60' delayedIntervals: 1)'                  new HistoryPeriod(TimeSpan.FromMinutes(60)' numberOfIntervals: 60' delayedIntervals: 1)              };
Magic Number,ServiceControl.Monitoring.Infrastructure,HistoryPeriod,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring\Infrastructure\HistoryPeriod.cs,HistoryPeriod,The following statement contains a magic number: All = new List<HistoryPeriod>              {                  new HistoryPeriod(TimeSpan.FromMinutes(1)' numberOfIntervals: 60' delayedIntervals: 2)'                  new HistoryPeriod(TimeSpan.FromMinutes(5)' numberOfIntervals: 60' delayedIntervals: 1)'                  new HistoryPeriod(TimeSpan.FromMinutes(10)' numberOfIntervals: 60' delayedIntervals: 1)'                  new HistoryPeriod(TimeSpan.FromMinutes(15)' numberOfIntervals: 60' delayedIntervals: 1)'                  new HistoryPeriod(TimeSpan.FromMinutes(30)' numberOfIntervals: 60' delayedIntervals: 1)'                  new HistoryPeriod(TimeSpan.FromMinutes(60)' numberOfIntervals: 60' delayedIntervals: 1)              };
Magic Number,ServiceControl.Monitoring.Infrastructure,HistoryPeriod,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring\Infrastructure\HistoryPeriod.cs,HistoryPeriod,The following statement contains a magic number: All = new List<HistoryPeriod>              {                  new HistoryPeriod(TimeSpan.FromMinutes(1)' numberOfIntervals: 60' delayedIntervals: 2)'                  new HistoryPeriod(TimeSpan.FromMinutes(5)' numberOfIntervals: 60' delayedIntervals: 1)'                  new HistoryPeriod(TimeSpan.FromMinutes(10)' numberOfIntervals: 60' delayedIntervals: 1)'                  new HistoryPeriod(TimeSpan.FromMinutes(15)' numberOfIntervals: 60' delayedIntervals: 1)'                  new HistoryPeriod(TimeSpan.FromMinutes(30)' numberOfIntervals: 60' delayedIntervals: 1)'                  new HistoryPeriod(TimeSpan.FromMinutes(60)' numberOfIntervals: 60' delayedIntervals: 1)              };
Magic Number,ServiceControl.Monitoring.Infrastructure,HistoryPeriod,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring\Infrastructure\HistoryPeriod.cs,HistoryPeriod,The following statement contains a magic number: All = new List<HistoryPeriod>              {                  new HistoryPeriod(TimeSpan.FromMinutes(1)' numberOfIntervals: 60' delayedIntervals: 2)'                  new HistoryPeriod(TimeSpan.FromMinutes(5)' numberOfIntervals: 60' delayedIntervals: 1)'                  new HistoryPeriod(TimeSpan.FromMinutes(10)' numberOfIntervals: 60' delayedIntervals: 1)'                  new HistoryPeriod(TimeSpan.FromMinutes(15)' numberOfIntervals: 60' delayedIntervals: 1)'                  new HistoryPeriod(TimeSpan.FromMinutes(30)' numberOfIntervals: 60' delayedIntervals: 1)'                  new HistoryPeriod(TimeSpan.FromMinutes(60)' numberOfIntervals: 60' delayedIntervals: 1)              };
Magic Number,ServiceControl.Monitoring.Infrastructure,HistoryPeriod,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring\Infrastructure\HistoryPeriod.cs,HistoryPeriod,The following statement contains a magic number: All = new List<HistoryPeriod>              {                  new HistoryPeriod(TimeSpan.FromMinutes(1)' numberOfIntervals: 60' delayedIntervals: 2)'                  new HistoryPeriod(TimeSpan.FromMinutes(5)' numberOfIntervals: 60' delayedIntervals: 1)'                  new HistoryPeriod(TimeSpan.FromMinutes(10)' numberOfIntervals: 60' delayedIntervals: 1)'                  new HistoryPeriod(TimeSpan.FromMinutes(15)' numberOfIntervals: 60' delayedIntervals: 1)'                  new HistoryPeriod(TimeSpan.FromMinutes(30)' numberOfIntervals: 60' delayedIntervals: 1)'                  new HistoryPeriod(TimeSpan.FromMinutes(60)' numberOfIntervals: 60' delayedIntervals: 1)              };
Magic Number,ServiceControl.Monitoring.Infrastructure,HistoryPeriod,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring\Infrastructure\HistoryPeriod.cs,HistoryPeriod,The following statement contains a magic number: All = new List<HistoryPeriod>              {                  new HistoryPeriod(TimeSpan.FromMinutes(1)' numberOfIntervals: 60' delayedIntervals: 2)'                  new HistoryPeriod(TimeSpan.FromMinutes(5)' numberOfIntervals: 60' delayedIntervals: 1)'                  new HistoryPeriod(TimeSpan.FromMinutes(10)' numberOfIntervals: 60' delayedIntervals: 1)'                  new HistoryPeriod(TimeSpan.FromMinutes(15)' numberOfIntervals: 60' delayedIntervals: 1)'                  new HistoryPeriod(TimeSpan.FromMinutes(30)' numberOfIntervals: 60' delayedIntervals: 1)'                  new HistoryPeriod(TimeSpan.FromMinutes(60)' numberOfIntervals: 60' delayedIntervals: 1)              };
Magic Number,ServiceControl.Monitoring.Infrastructure,HistoryPeriod,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring\Infrastructure\HistoryPeriod.cs,HistoryPeriod,The following statement contains a magic number: All = new List<HistoryPeriod>              {                  new HistoryPeriod(TimeSpan.FromMinutes(1)' numberOfIntervals: 60' delayedIntervals: 2)'                  new HistoryPeriod(TimeSpan.FromMinutes(5)' numberOfIntervals: 60' delayedIntervals: 1)'                  new HistoryPeriod(TimeSpan.FromMinutes(10)' numberOfIntervals: 60' delayedIntervals: 1)'                  new HistoryPeriod(TimeSpan.FromMinutes(15)' numberOfIntervals: 60' delayedIntervals: 1)'                  new HistoryPeriod(TimeSpan.FromMinutes(30)' numberOfIntervals: 60' delayedIntervals: 1)'                  new HistoryPeriod(TimeSpan.FromMinutes(60)' numberOfIntervals: 60' delayedIntervals: 1)              };
Magic Number,ServiceControl.Monitoring.Infrastructure,HistoryPeriod,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring\Infrastructure\HistoryPeriod.cs,HistoryPeriod,The following statement contains a magic number: All = new List<HistoryPeriod>              {                  new HistoryPeriod(TimeSpan.FromMinutes(1)' numberOfIntervals: 60' delayedIntervals: 2)'                  new HistoryPeriod(TimeSpan.FromMinutes(5)' numberOfIntervals: 60' delayedIntervals: 1)'                  new HistoryPeriod(TimeSpan.FromMinutes(10)' numberOfIntervals: 60' delayedIntervals: 1)'                  new HistoryPeriod(TimeSpan.FromMinutes(15)' numberOfIntervals: 60' delayedIntervals: 1)'                  new HistoryPeriod(TimeSpan.FromMinutes(30)' numberOfIntervals: 60' delayedIntervals: 1)'                  new HistoryPeriod(TimeSpan.FromMinutes(60)' numberOfIntervals: 60' delayedIntervals: 1)              };
Magic Number,ServiceControl.Monitoring.Infrastructure,HistoryPeriod,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring\Infrastructure\HistoryPeriod.cs,HistoryPeriod,The following statement contains a magic number: All = new List<HistoryPeriod>              {                  new HistoryPeriod(TimeSpan.FromMinutes(1)' numberOfIntervals: 60' delayedIntervals: 2)'                  new HistoryPeriod(TimeSpan.FromMinutes(5)' numberOfIntervals: 60' delayedIntervals: 1)'                  new HistoryPeriod(TimeSpan.FromMinutes(10)' numberOfIntervals: 60' delayedIntervals: 1)'                  new HistoryPeriod(TimeSpan.FromMinutes(15)' numberOfIntervals: 60' delayedIntervals: 1)'                  new HistoryPeriod(TimeSpan.FromMinutes(30)' numberOfIntervals: 60' delayedIntervals: 1)'                  new HistoryPeriod(TimeSpan.FromMinutes(60)' numberOfIntervals: 60' delayedIntervals: 1)              };
Magic Number,ServiceControl.Monitoring.Infrastructure,Measurement,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring\Infrastructure\IntervalsStore.cs,Measurement,The following statement contains a magic number: size = numberOfIntervals * 2;
Magic Number,ServiceControl.Monitoring.Licensing,LicenseCheckFeatureStartup,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring\Licensing\LicenseCheckFeature.cs,OnStart,The following statement contains a magic number: return Task.Run(() => checklicenseTimer = new Timer(objectstate => { licenseManager.Refresh(); }' null' TimeSpan.Zero' TimeSpan.FromHours(8)));
Duplicate Code,ServiceControl.Monitoring.Http.Diagrams,DiagramApiController,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring\Http\Diagrams\DiagramApiController.cs,GetSingleEndpointMetrics,The method contains a code clone-set at the following line numbers (starting from the method definition): ((18' 42)' (59' 83))
Missing Default,ServiceControl.Monitoring,OptionSet,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring\Hosting\Options.cs,Parse,The following switch statement is missing a default case: switch (p.OptionValueType)                  {                      case OptionValueType.None:                          c.OptionValues.Add(n);                          c.Option.Invoke(c);                          break;                      case OptionValueType.Optional:                      case OptionValueType.Required:                          ParseValue(v' c);                          break;                  }
Missing Default,ServiceControl.Monitoring,OptionSet,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring\Hosting\Options.cs,GetLineEnd,The following switch statement is missing a default case: switch (description[i])                  {                      case ' ':                      case '\t':                      case '\v':                      case '-':                      case ''':                      case '.':                      case ';':                          sep = i;                          break;                      case '\n':                          return i;                  }
Missing Default,ServiceControl.Monitoring.Timings,TaggedLongValueOccurrenceHandler,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControl.Monitoring\Timings\TaggedLongValueOccurrenceHandler.cs,Handle,The following switch statement is missing a default case: switch (metricType)              {                  case ProcessingTimeMessageType:                      processingTimeStore.Store(message.Entries' instanceId' messageType);                      break;                  case CriticalTimeMessageType:                      criticalTimeStore.Store(message.Entries' instanceId' messageType);                      break;              }
