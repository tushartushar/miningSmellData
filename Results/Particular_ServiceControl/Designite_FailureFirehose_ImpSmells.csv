Implementation smell,Namespace,Class,File,Method,Description
Magic Number,FailureFirehose,Program,C:\repos\Particular_ServiceControl\tools\FailureFirehose\Program.cs,ExecuteRestAPI,The following statement contains a magic number: var timer = new Timer(state =>              {                  Console.WriteLine("Firing off Archive/Retry Requests");                  ServiceControl.ArchiveAllGroups();              }' null' TimeSpan.FromMinutes(20)' TimeSpan.FromMinutes(20));
Magic Number,FailureFirehose,Program,C:\repos\Particular_ServiceControl\tools\FailureFirehose\Program.cs,ExecuteRestAPI,The following statement contains a magic number: var timer = new Timer(state =>              {                  Console.WriteLine("Firing off Archive/Retry Requests");                  ServiceControl.ArchiveAllGroups();              }' null' TimeSpan.FromMinutes(20)' TimeSpan.FromMinutes(20));
Magic Number,FailureFirehose,Program,C:\repos\Particular_ServiceControl\tools\FailureFirehose\Program.cs,RunSender,The following statement contains a magic number: using (var bus = Bus.Create(config).Start())              {                  Console.WriteLine("Sender Bus Started");                    var iteration = 1;                    while (!token.IsCancellationRequested)                  {                      var total = rnd.Next(MIN_MESSAGE_COUNT' MAX_MESSAGE_COUNT + 1);                      Console.Write($"Iteration {iteration++}' sending {total} message(s)");                      var stopwatch = new Stopwatch();                        stopwatch.Start();                      var failureThreashold = (int)(total * (FAILURE_PERCENTAGE / 100m));                        Parallel.For(0' total' i =>                      {                          PerformSomeTaskThatFails performSomeTaskThatFails;                          unsafe                          {                              fixed (char* p = body)                              {                                  performSomeTaskThatFails = new PerformSomeTaskThatFails                                  {                                      Id = i'                                      FailureThreashold = failureThreashold'                                      Body = new string(p' 0' rnd.Next(MIM_BODY_SIZE' MAX_BODY_SIZE)) // Saving on memory allocations by using a pointer                                  };                              }                          }                          bus.Send("FailureFirehose_Receiver"' performSomeTaskThatFails);                      });                        stopwatch.Stop();                        Console.Write($"' completed in {stopwatch.Elapsed}");                      Console.WriteLine();                        var remainingTime = (int) (TimeSpan.FromSeconds(1) - stopwatch.Elapsed).TotalMilliseconds;                      if (remainingTime > 0)                      {                          Thread.Sleep(remainingTime);                      }                        if (iteration > 20*60) // About every 20 minutes                      {                          Console.WriteLine("Restarting Iterations");                          iteration = 1;                      }                  }              }
Magic Number,FailureFirehose,Program,C:\repos\Particular_ServiceControl\tools\FailureFirehose\Program.cs,RunSender,The following statement contains a magic number: using (var bus = Bus.Create(config).Start())              {                  Console.WriteLine("Sender Bus Started");                    var iteration = 1;                    while (!token.IsCancellationRequested)                  {                      var total = rnd.Next(MIN_MESSAGE_COUNT' MAX_MESSAGE_COUNT + 1);                      Console.Write($"Iteration {iteration++}' sending {total} message(s)");                      var stopwatch = new Stopwatch();                        stopwatch.Start();                      var failureThreashold = (int)(total * (FAILURE_PERCENTAGE / 100m));                        Parallel.For(0' total' i =>                      {                          PerformSomeTaskThatFails performSomeTaskThatFails;                          unsafe                          {                              fixed (char* p = body)                              {                                  performSomeTaskThatFails = new PerformSomeTaskThatFails                                  {                                      Id = i'                                      FailureThreashold = failureThreashold'                                      Body = new string(p' 0' rnd.Next(MIM_BODY_SIZE' MAX_BODY_SIZE)) // Saving on memory allocations by using a pointer                                  };                              }                          }                          bus.Send("FailureFirehose_Receiver"' performSomeTaskThatFails);                      });                        stopwatch.Stop();                        Console.Write($"' completed in {stopwatch.Elapsed}");                      Console.WriteLine();                        var remainingTime = (int) (TimeSpan.FromSeconds(1) - stopwatch.Elapsed).TotalMilliseconds;                      if (remainingTime > 0)                      {                          Thread.Sleep(remainingTime);                      }                        if (iteration > 20*60) // About every 20 minutes                      {                          Console.WriteLine("Restarting Iterations");                          iteration = 1;                      }                  }              }
Magic Number,FailureFirehose,FailingHandler,C:\repos\Particular_ServiceControl\tools\FailureFirehose\Program.cs,Handle,The following statement contains a magic number: if (message.Id < message.FailureThreashold)              {                  switch (message.Id % 4)                  {                      case 0: throw new IOException("The disk is full");                      case 1: throw new WebException("The web API isn't responding");                      case 2: throw new SerializationException("Cannot deserialize message");                      default: throw new Exception("Some business thing happened");                  }              }
Magic Number,FailureFirehose,FailingHandler,C:\repos\Particular_ServiceControl\tools\FailureFirehose\Program.cs,Handle,The following statement contains a magic number: if (message.Id < message.FailureThreashold)              {                  switch (message.Id % 4)                  {                      case 0: throw new IOException("The disk is full");                      case 1: throw new WebException("The web API isn't responding");                      case 2: throw new SerializationException("Cannot deserialize message");                      default: throw new Exception("Some business thing happened");                  }              }
