Implementation smell,Namespace,Class,File,Method,Description
Complex Method,ServiceControlInstaller.Engine.FileSystem,FileUtils,C:\repos\Particular_ServiceControl\src\ServiceControlInstaller.Engine\FileSystem\FileUtils.cs,DeleteDirectory,Cyclomatic complexity of the method is 9
Complex Method,ServiceControlInstaller.Engine.Unattended,UnattendMonitoringInstaller,C:\repos\Particular_ServiceControl\src\ServiceControlInstaller.Engine\Unattended\UnattendMonitoringInstaller.cs,Add,Cyclomatic complexity of the method is 8
Complex Method,ServiceControlInstaller.Engine.Unattended,UnattendServiceControlInstaller,C:\repos\Particular_ServiceControl\src\ServiceControlInstaller.Engine\Unattended\UnattendServiceControlInstaller.cs,Add,Cyclomatic complexity of the method is 8
Long Parameter List,ServiceControlInstaller.Engine.Accounts,Lsa,C:\repos\Particular_ServiceControl\src\ServiceControlInstaller.Engine\Accounts\Lsa.cs,LsaRemoveAccountRights,The method has 5 parameters. Parameters: PolicyHandle' AccountSid' AllRights' UserRights' CountOfRights
Long Parameter List,ServiceControlInstaller.Engine.Validation,ServiceControlQueueNameValidator,C:\repos\Particular_ServiceControl\src\ServiceControlInstaller.Engine\Validation\ServiceControlQueueNameValidator.cs,DetermineQueueNames,The method has 5 parameters. Parameters: audit' error' auditLog' errorLog' connectionString
Long Parameter List,ServiceControlInstaller.Engine.UrlAcl.Api,HttpApi,C:\repos\Particular_ServiceControl\src\ServiceControlInstaller.Engine\UrlAcl\Api\HttpApi.cs,HttpQueryServiceConfiguration,The method has 8 parameters. Parameters: ServiceIntPtr' ConfigId' pInputConfigInfo' InputConfigInfoLength' pOutputConfigInfo' OutputConfigInfoLength' pReturnLength' pOverlapped
Long Parameter List,ServiceControlInstaller.Engine.UrlAcl.Api,HttpApi,C:\repos\Particular_ServiceControl\src\ServiceControlInstaller.Engine\UrlAcl\Api\HttpApi.cs,HttpSetServiceConfiguration,The method has 5 parameters. Parameters: ServiceIntPtr' ConfigId' pConfigInformation' ConfigInformationLength' pOverlapped
Long Parameter List,ServiceControlInstaller.Engine.UrlAcl.Api,HttpApi,C:\repos\Particular_ServiceControl\src\ServiceControlInstaller.Engine\UrlAcl\Api\HttpApi.cs,HttpDeleteServiceConfiguration,The method has 5 parameters. Parameters: ServiceIntPtr' ConfigId' pConfigInformation' ConfigInformationLength' pOverlapped
Long Identifier,ServiceControlInstaller.Engine.Accounts,Lsa,C:\repos\Particular_ServiceControl\src\ServiceControlInstaller.Engine\Accounts\Lsa.cs,,The length of the parameter POLICY_GET_PRIVATE_INFORMATION is 30.
Long Identifier,ServiceControlInstaller.Engine.Accounts,Lsa,C:\repos\Particular_ServiceControl\src\ServiceControlInstaller.Engine\Accounts\Lsa.cs,,The length of the parameter POLICY_SET_DEFAULT_QUOTA_LIMITS is 31.
Long Identifier,Particular.Licensing,FilePathLicenseStore,C:\repos\Particular_ServiceControl\src\ServiceControlInstaller.Engine\App_Packages\Particular.Licensing\FilePathLicenseStore.cs,,The length of the parameter ApplicationLevelLicenseLocation is 31.
Long Identifier,Particular.Licensing,LicenseSourceResult,C:\repos\Particular_ServiceControl\src\ServiceControlInstaller.Engine\App_Packages\Particular.Licensing\FindActiveLicense\LicenseSourceResult.cs,DetermineBestLicenseSourceResult,The length of the parameter sourcesResultsWithLicenseOrderedByDate is 38.
Long Identifier,ServiceControlInstaller.Engine.Configuration.ServiceControl,SettingConstants,C:\repos\Particular_ServiceControl\src\ServiceControlInstaller.Engine\Configuration\ServiceControl\SettingConstants.cs,,The length of the parameter ErrorRetentionPeriodMaxInHours is 30.
Long Identifier,ServiceControlInstaller.Engine.Configuration.ServiceControl,SettingConstants,C:\repos\Particular_ServiceControl\src\ServiceControlInstaller.Engine\Configuration\ServiceControl\SettingConstants.cs,,The length of the parameter ErrorRetentionPeriodMinInHours is 30.
Long Identifier,ServiceControlInstaller.Engine.Configuration.ServiceControl,SettingConstants,C:\repos\Particular_ServiceControl\src\ServiceControlInstaller.Engine\Configuration\ServiceControl\SettingConstants.cs,,The length of the parameter AuditRetentionPeriodMaxInHours is 30.
Long Identifier,ServiceControlInstaller.Engine.Configuration.ServiceControl,SettingConstants,C:\repos\Particular_ServiceControl\src\ServiceControlInstaller.Engine\Configuration\ServiceControl\SettingConstants.cs,,The length of the parameter AuditRetentionPeriodMinInHours is 30.
Long Identifier,ServiceControlInstaller.Engine.Configuration.ServiceControl,SettingConstants,C:\repos\Particular_ServiceControl\src\ServiceControlInstaller.Engine\Configuration\ServiceControl\SettingConstants.cs,,The length of the parameter AuditRetentionPeriodDefaultInHoursForUI is 39.
Long Identifier,ServiceControlInstaller.Engine.Configuration.ServiceControl,SettingConstants,C:\repos\Particular_ServiceControl\src\ServiceControlInstaller.Engine\Configuration\ServiceControl\SettingConstants.cs,,The length of the parameter ErrorRetentionPeriodDefaultInDaysForUI is 38.
Long Identifier,ServiceControlInstaller.Engine.Configuration.ServiceControl,SettingsList,C:\repos\Particular_ServiceControl\src\ServiceControlInstaller.Engine\Configuration\ServiceControl\SettingsList.cs,,The length of the parameter HoursToKeepMessagesBeforeExpiring is 33.
Long Identifier,ServiceControlInstaller.Engine.UrlAcl.Api,HttpServiceConfigSslParam,C:\repos\Particular_ServiceControl\src\ServiceControlInstaller.Engine\UrlAcl\Api\HttpServiceConfigSslParam.cs,,The length of the parameter DefaultRevocationFreshnessTime is 30.
Long Identifier,ServiceControlInstaller.Engine.UrlAcl.Api,HttpServiceConfigSslParam,C:\repos\Particular_ServiceControl\src\ServiceControlInstaller.Engine\UrlAcl\Api\HttpServiceConfigSslParam.cs,,The length of the parameter DefaultRevocationUrlRetrievalTimeout is 36.
Long Statement,ServiceControlInstaller.Engine.Accounts,UserAccount,C:\repos\Particular_ServiceControl\src\ServiceControlInstaller.Engine\Accounts\UserAccount.cs,RetrieveProfilePath,The length of the statement  "            using (var profileListKey = Registry.LocalMachine.OpenSubKey(@"SOFTWARE\Microsoft\Windows NT\CurrentVersion\ProfileList")) " is 122.
Long Statement,ServiceControlInstaller.Engine.Accounts,UserAccount,C:\repos\Particular_ServiceControl\src\ServiceControlInstaller.Engine\Accounts\UserAccount.cs,CheckPassword,The length of the statement  "            using (var context = localAccount ? new PrincipalContext(ContextType.Machine) : new PrincipalContext(ContextType.Domain' Domain)) " is 129.
Long Statement,Particular.Licensing,ActiveLicense,C:\repos\Particular_ServiceControl\src\ServiceControlInstaller.Engine\App_Packages\Particular.Licensing\FindActiveLicense\ActiveLicense.cs,Find,The length of the statement  "                    var licenseExpirationReportItem = $"License Expiration: {details.ExpirationDate.Value.ToString("yyyy-MM-dd"' CultureInfo.InvariantCulture)}"; " is 141.
Long Statement,Particular.Licensing,ActiveLicense,C:\repos\Particular_ServiceControl\src\ServiceControlInstaller.Engine\App_Packages\Particular.Licensing\FindActiveLicense\ActiveLicense.cs,Find,The length of the statement  "                        var upgradeProtectionReportItem = $"Upgrade Protection Expiration: {details.UpgradeProtectionExpiration.Value.ToString("yyyy-MM-dd"' CultureInfo.InvariantCulture)}"; " is 165.
Long Statement,Particular.Licensing,ActiveLicense,C:\repos\Particular_ServiceControl\src\ServiceControlInstaller.Engine\App_Packages\Particular.Licensing\FindActiveLicense\ActiveLicense.cs,Find,The length of the statement  "                var trialLicenseReportItem = $"No valid license could be found. Falling back to trial license with start date '{trialStartDate.ToString("yyyy-MM-dd"' CultureInfo.InvariantCulture)}'."; " is 184.
Long Statement,Particular.Licensing,LicenseSource,C:\repos\Particular_ServiceControl\src\ServiceControlInstaller.Engine\App_Packages\Particular.Licensing\FindActiveLicense\LicenseSource.cs,ValidateLicense,The length of the statement  "                result.Result = $"License found in {location} was not valid for '{applicationName}'. Valid apps: '{string.Join("'"' license.ValidApplications)}'"; " is 146.
Long Statement,Particular.Licensing,LicenseSourceResult,C:\repos\Particular_ServiceControl\src\ServiceControlInstaller.Engine\App_Packages\Particular.Licensing\FindActiveLicense\LicenseSourceResult.cs,DetermineBestLicenseSourceResult,The length of the statement  "            var sourcesResultsWithLicenseOrderedByDate = sourceResults.Where(p => p.License != null).OrderByDescending(p => p.License.ExpirationDate).ToList(); " is 147.
Long Statement,Particular.Licensing,LicenseSourceResult,C:\repos\Particular_ServiceControl\src\ServiceControlInstaller.Engine\App_Packages\Particular.Licensing\FindActiveLicense\LicenseSourceResult.cs,DetermineBestLicenseSourceResult,The length of the statement  "            // Can't rely on just expiry date as running on a build that was produced after the upgrade protection expiration is the same as unlicensed. " is 140.
Long Statement,Particular.Licensing,LicenseSourceResult,C:\repos\Particular_ServiceControl\src\ServiceControlInstaller.Engine\App_Packages\Particular.Licensing\FindActiveLicense\LicenseSourceResult.cs,DetermineBestLicenseSourceResult,The length of the statement  "            var unexpiredResult = sourcesResultsWithLicenseOrderedByDate.FirstOrDefault(p => !LicenseExpirationChecker.HasLicenseExpired(p.License)); " is 137.
Long Statement,Particular.Licensing,License,C:\repos\Particular_ServiceControl\src\ServiceControlInstaller.Engine\App_Packages\Particular.Licensing\License.cs,ValidForApplication,The length of the statement  "            return ValidApplications.Contains(applicationName) || ValidApplications.Contains("All") || applicationName == "NServiceBus"; " is 124.
Long Statement,Particular.Licensing,TrialStartDateStore,C:\repos\Particular_ServiceControl\src\ServiceControlInstaller.Engine\App_Packages\Particular.Licensing\TrialStartDateStore.cs,GetTrialStartDate,The length of the statement  "                var trialStartDate = DateTimeOffset.ParseExact(trialStartString' "yyyy-MM-dd"' CultureInfo.InvariantCulture' DateTimeStyles.AssumeUniversal); " is 141.
Long Statement,Particular.Licensing,UniversalDateParser,C:\repos\Particular_ServiceControl\src\ServiceControlInstaller.Engine\App_Packages\Particular.Licensing\UniversalDateParser.cs,Parse,The length of the statement  "            return DateTime.ParseExact(value' "yyyy-MM-dd"' CultureInfo.InvariantCulture' DateTimeStyles.AssumeUniversal).ToUniversalTime(); " is 128.
Long Statement,ServiceControlInstaller.Engine.Configuration,ConfigurationSectionExtensions,C:\repos\Particular_ServiceControl\src\ServiceControlInstaller.Engine\Configuration\ConfigurationSectionExtensions.cs,Set,The length of the statement  "                    throw new ArgumentNullException(nameof(currentVersion)' $"Version info is required before setting or removing {keyInfo.Name}"); " is 127.
Long Statement,ServiceControlInstaller.Engine.Configuration,ConfigurationSectionExtensions,C:\repos\Particular_ServiceControl\src\ServiceControlInstaller.Engine\Configuration\ConfigurationSectionExtensions.cs,RemoveIfRetired,The length of the statement  "               throw new ArgumentNullException(nameof(currentVersion)' $"Version info is required before setting or removing {keyInfo.Name}"); " is 127.
Long Statement,ServiceControlInstaller.Engine.FileSystem,ReleaseDateReader,C:\repos\Particular_ServiceControl\src\ServiceControlInstaller.Engine\FileSystem\ReleaseDateReader.cs,TryReadReleaseDateAttribute,The length of the statement  "                    var loader = (AssemblyReleaseDateReader)tempDomain.CreateInstanceFrom(Assembly.GetExecutingAssembly().Location' loaderType.FullName).Unwrap(); " is 142.
Long Statement,ServiceControlInstaller.Engine.FileSystem,AssemblyReleaseDateReader,C:\repos\Particular_ServiceControl\src\ServiceControlInstaller.Engine\FileSystem\ReleaseDateReader.cs,GetReleaseDate,The length of the statement  "                    var releaseDateAttribute = assembly.GetCustomAttributesData().FirstOrDefault(p => p.Constructor?.ReflectedType?.Name == "ReleaseDateAttribute"); " is 144.
Long Statement,ServiceControlInstaller.Engine.FileSystem,MonitoringZipInfo,C:\repos\Particular_ServiceControl\src\ServiceControlInstaller.Engine\FileSystem\MonitoringZipInfo.cs,Find,The length of the statement  "            var fileRegex = new Regex(@"particular.servicecontrol.monitoring-(?<version>\d+\.\d+\.\d+)\.zip"' RegexOptions.Compiled | RegexOptions.IgnoreCase); " is 147.
Long Statement,ServiceControlInstaller.Engine.FileSystem,MonitoringZipInfo,C:\repos\Particular_ServiceControl\src\ServiceControlInstaller.Engine\FileSystem\MonitoringZipInfo.cs,Find,The length of the statement  "            foreach (var file in deploymentCache.GetFiles("particular.servicecontrol.monitoring-*.zip"' SearchOption.TopDirectoryOnly)) " is 123.
Long Statement,ServiceControlInstaller.Engine.FileSystem,ServiceControlZipInfo,C:\repos\Particular_ServiceControl\src\ServiceControlInstaller.Engine\FileSystem\ServiceControlZipInfo.cs,Find,The length of the statement  "            var fileRegex = new Regex(@"particular.servicecontrol-(?<version>\d+\.\d+\.\d+)\.zip"' RegexOptions.Compiled | RegexOptions.IgnoreCase); " is 136.
Long Statement,ServiceControlInstaller.Engine.Instances,BaseService,C:\repos\Particular_ServiceControl\src\ServiceControlInstaller.Engine\Instances\BaseService.cs,BackupAppConfig,The length of the statement  "            var backupDirectory = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.CommonApplicationData)' "Particular"' "ServiceControlInstaller"' "ConfigBackups"' FileUtils.SanitizeFolderName(Service.ServiceName)); " is 220.
Long Statement,ServiceControlInstaller.Engine.Instances,InstanceFinder,C:\repos\Particular_ServiceControl\src\ServiceControlInstaller.Engine\Instances\Instances.cs,MonitoringInstances,The length of the statement  "            return new ReadOnlyCollection<MonitoringInstance>(services.Where(p => File.Exists(p.ExePath)).Select(p => new MonitoringInstance(p)).ToList()); " is 143.
Long Statement,ServiceControlInstaller.Engine.Instances,InstanceFinder,C:\repos\Particular_ServiceControl\src\ServiceControlInstaller.Engine\Instances\Instances.cs,ServiceControlInstances,The length of the statement  "            return new ReadOnlyCollection<ServiceControlInstance>(services.Where(p => File.Exists(p.ExePath)).Select(p => new ServiceControlInstance(p)).ToList()); " is 151.
Long Statement,ServiceControlInstaller.Engine.Instances,MonitoringInstance,C:\repos\Particular_ServiceControl\src\ServiceControlInstaller.Engine\Instances\MonitoringInstance.cs,DetermineTransportPackage,The length of the statement  "            var transportAppSetting = AppConfig.Read(SettingsList.TransportType' "NServiceBus.MsmqTransport").Split("'".ToCharArray())[0].Trim(); " is 133.
Long Statement,ServiceControlInstaller.Engine.Instances,MonitoringInstance,C:\repos\Particular_ServiceControl\src\ServiceControlInstaller.Engine\Instances\MonitoringInstance.cs,DetermineTransportPackage,The length of the statement  "            var transport = V6Transports.All.FirstOrDefault(p => transportAppSetting.StartsWith(p.MatchOn' StringComparison.OrdinalIgnoreCase)); " is 132.
Long Statement,ServiceControlInstaller.Engine.Instances,MonitoringInstance,C:\repos\Particular_ServiceControl\src\ServiceControlInstaller.Engine\Instances\MonitoringInstance.cs,ApplyConfigChange,The length of the statement  "            var accountName = string.Equals(ServiceAccount' "LocalSystem"' StringComparison.OrdinalIgnoreCase) ? "System" : ServiceAccount; " is 127.
Long Statement,ServiceControlInstaller.Engine.Instances,MonitoringInstance,C:\repos\Particular_ServiceControl\src\ServiceControlInstaller.Engine\Instances\MonitoringInstance.cs,ApplyConfigChange,The length of the statement  "                var modifyAccessRule = new FileSystemAccessRule(account' FileSystemRights.Modify | FileSystemRights.Traverse | FileSystemRights.ListDirectory' InheritanceFlags.ContainerInherit | InheritanceFlags.ObjectInherit' PropagationFlags.None' AccessControlType.Allow); " is 259.
Long Statement,ServiceControlInstaller.Engine.Instances,MonitoringInstance,C:\repos\Particular_ServiceControl\src\ServiceControlInstaller.Engine\Instances\MonitoringInstance.cs,RemoveUrlAcl,The length of the statement  "            foreach (var urlReservation in UrlReservation.GetAll().Where(p => p.Url.StartsWith(Url' StringComparison.OrdinalIgnoreCase))) " is 125.
Long Statement,ServiceControlInstaller.Engine.Instances,MonitoringNewInstance,C:\repos\Particular_ServiceControl\src\ServiceControlInstaller.Engine\Instances\MonitoringNewInstance.cs,CopyFiles,The length of the statement  "            var readExecuteAccessRule = new FileSystemAccessRule(account' FileSystemRights.ReadAndExecute | FileSystemRights.Traverse | FileSystemRights.ListDirectory' InheritanceFlags.ContainerInherit | InheritanceFlags.ObjectInherit' PropagationFlags.None' AccessControlType.Allow); " is 272.
Long Statement,ServiceControlInstaller.Engine.Instances,MonitoringNewInstance,C:\repos\Particular_ServiceControl\src\ServiceControlInstaller.Engine\Instances\MonitoringNewInstance.cs,CopyFiles,The length of the statement  "            var modifyAccessRule = new FileSystemAccessRule(account' FileSystemRights.Modify | FileSystemRights.Traverse | FileSystemRights.ListDirectory' InheritanceFlags.ContainerInherit | InheritanceFlags.ObjectInherit' PropagationFlags.None' AccessControlType.Allow); " is 259.
Long Statement,ServiceControlInstaller.Engine.Instances,MonitoringNewInstance,C:\repos\Particular_ServiceControl\src\ServiceControlInstaller.Engine\Instances\MonitoringNewInstance.cs,CheckForConflictingUrlAclReservations,The length of the statement  "                if ((reservation.HostName.Equals("localhost"' StringComparison.OrdinalIgnoreCase) && !HostName.Equals("localhost"' StringComparison.OrdinalIgnoreCase)) || " is 154.
Long Statement,ServiceControlInstaller.Engine.Instances,MonitoringNewInstance,C:\repos\Particular_ServiceControl\src\ServiceControlInstaller.Engine\Instances\MonitoringNewInstance.cs,CheckForConflictingUrlAclReservations,The length of the statement  "                    (!reservation.HostName.Equals("localhost"' StringComparison.OrdinalIgnoreCase) && HostName.Equals("localhost"' StringComparison.OrdinalIgnoreCase))) " is 148.
Long Statement,ServiceControlInstaller.Engine.Instances,ServiceControlInstance,C:\repos\Particular_ServiceControl\src\ServiceControlInstaller.Engine\Instances\ServiceControlInstance.cs,DetermineTransportPackage,The length of the statement  "            var transportAppSetting = AppConfig.Read(SettingsList.TransportType' "NServiceBus.MsmqTransport").Split("'".ToCharArray())[0].Trim(); " is 133.
Long Statement,ServiceControlInstaller.Engine.Instances,ServiceControlInstance,C:\repos\Particular_ServiceControl\src\ServiceControlInstaller.Engine\Instances\ServiceControlInstance.cs,DetermineTransportPackage,The length of the statement  "            var transport = V5Transports.All.FirstOrDefault(p => transportAppSetting.StartsWith(p.MatchOn ' StringComparison.OrdinalIgnoreCase)); " is 133.
Long Statement,ServiceControlInstaller.Engine.Instances,ServiceControlInstance,C:\repos\Particular_ServiceControl\src\ServiceControlInstaller.Engine\Instances\ServiceControlInstance.cs,ApplyConfigChange,The length of the statement  "            var accountName = string.Equals(ServiceAccount' "LocalSystem"' StringComparison.OrdinalIgnoreCase) ? "System" : ServiceAccount; " is 127.
Long Statement,ServiceControlInstaller.Engine.Instances,ServiceControlInstance,C:\repos\Particular_ServiceControl\src\ServiceControlInstaller.Engine\Instances\ServiceControlInstance.cs,ApplyConfigChange,The length of the statement  "                var modifyAccessRule = new FileSystemAccessRule(account' FileSystemRights.Modify | FileSystemRights.Traverse | FileSystemRights.ListDirectory' InheritanceFlags.ContainerInherit | InheritanceFlags.ObjectInherit' PropagationFlags.None' AccessControlType.Allow); " is 259.
Long Statement,ServiceControlInstaller.Engine.Instances,ServiceControlInstance,C:\repos\Particular_ServiceControl\src\ServiceControlInstaller.Engine\Instances\ServiceControlInstance.cs,DefaultDBPath,The length of the statement  "            return Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.CommonApplicationData)' "Particular"' "ServiceControl"' dbFolder); " is 138.
Long Statement,ServiceControlInstaller.Engine.Instances,ServiceControlInstance,C:\repos\Particular_ServiceControl\src\ServiceControlInstaller.Engine\Instances\ServiceControlInstance.cs,DefaultLogPath,The length of the statement  "            // The default Logging folder in ServiceControl uses the env vae"%LocalApplicationData%".  Since this is env user specific we'll determine it based on profile path instead. " is 172.
Long Statement,ServiceControlInstaller.Engine.Instances,ServiceControlInstance,C:\repos\Particular_ServiceControl\src\ServiceControlInstaller.Engine\Instances\ServiceControlInstance.cs,RemoveUrlAcl,The length of the statement  "            foreach (var urlReservation in UrlReservation.GetAll().Where(p => p.Url.StartsWith(AclUrl' StringComparison.OrdinalIgnoreCase))) " is 128.
Long Statement,ServiceControlInstaller.Engine.Instances,ServiceControlNewInstance,C:\repos\Particular_ServiceControl\src\ServiceControlInstaller.Engine\Instances\ServiceControlNewInstance.cs,CopyFiles,The length of the statement  "            var readExecuteAccessRule = new FileSystemAccessRule(account' FileSystemRights.ReadAndExecute | FileSystemRights.Traverse | FileSystemRights.ListDirectory' InheritanceFlags.ContainerInherit | InheritanceFlags.ObjectInherit' PropagationFlags.None' AccessControlType.Allow); " is 272.
Long Statement,ServiceControlInstaller.Engine.Instances,ServiceControlNewInstance,C:\repos\Particular_ServiceControl\src\ServiceControlInstaller.Engine\Instances\ServiceControlNewInstance.cs,CopyFiles,The length of the statement  "            var modifyAccessRule = new FileSystemAccessRule(account' FileSystemRights.Modify | FileSystemRights.Traverse | FileSystemRights.ListDirectory' InheritanceFlags.ContainerInherit | InheritanceFlags.ObjectInherit' PropagationFlags.None' AccessControlType.Allow); " is 259.
Long Statement,ServiceControlInstaller.Engine.Instances,ServiceControlNewInstance,C:\repos\Particular_ServiceControl\src\ServiceControlInstaller.Engine\Instances\ServiceControlNewInstance.cs,Load,The length of the statement  "                throw new InvalidDataException("The supplied file is using an old format. Use 'New-ServiceControlUnattendedFile' from the ServiceControl to create a new unattended install file."); " is 180.
Long Statement,ServiceControlInstaller.Engine.Instances,ServiceControlNewInstance,C:\repos\Particular_ServiceControl\src\ServiceControlInstaller.Engine\Instances\ServiceControlNewInstance.cs,Load,The length of the statement  "                throw new InvalidDataException("The supplied file is using an old format. Use 'New-ServiceControlUnattendedFile' from the ServiceControl to create a new unattended install file."); " is 180.
Long Statement,ServiceControlInstaller.Engine.Instances,ServiceControlNewInstance,C:\repos\Particular_ServiceControl\src\ServiceControlInstaller.Engine\Instances\ServiceControlNewInstance.cs,Load,The length of the statement  "                throw new InvalidDataException("The supplied file is using an old format. Use 'New-ServiceControlUnattendedFile' from the ServiceControl to create a new unattended install file."); " is 180.
Long Statement,ServiceControlInstaller.Engine.Instances,ServiceControlNewInstance,C:\repos\Particular_ServiceControl\src\ServiceControlInstaller.Engine\Instances\ServiceControlNewInstance.cs,CheckForConflictingUrlAclReservations,The length of the statement  "                if (reservation.HostName.Equals("localhost"' StringComparison.OrdinalIgnoreCase) && !HostName.Equals("localhost"' StringComparison.OrdinalIgnoreCase) || " is 152.
Long Statement,ServiceControlInstaller.Engine.Instances,ServiceControlNewInstance,C:\repos\Particular_ServiceControl\src\ServiceControlInstaller.Engine\Instances\ServiceControlNewInstance.cs,CheckForConflictingUrlAclReservations,The length of the statement  "                    !reservation.HostName.Equals("localhost"' StringComparison.OrdinalIgnoreCase) && HostName.Equals("localhost"' StringComparison.OrdinalIgnoreCase)) " is 146.
Long Statement,ServiceControlInstaller.Engine.Unattended,UnattendServiceControlInstaller,C:\repos\Particular_ServiceControl\src\ServiceControlInstaller.Engine\Unattended\UnattendServiceControlInstaller.cs,CheckLicenseIsValid,The length of the statement  "                    return new CheckLicenseResult(false' "License does not cover this release of ServiceControl.Upgrade protection expired"); " is 121.
Long Statement,ServiceControlInstaller.Engine.Queues,QueueCreation,C:\repos\Particular_ServiceControl\src\ServiceControlInstaller.Engine\Queues\QueueCreation.cs,RunQueueCreation,The length of the statement  "                    throw new QueueCreationTimeoutException($"Timed out waiting for {exeName} to created queues. This usually indicates a configuration error."); " is 141.
Long Statement,ServiceControlInstaller.Engine.Queues,QueueCreation,C:\repos\Particular_ServiceControl\src\ServiceControlInstaller.Engine\Queues\QueueCreation.cs,RunQueueCreation,The length of the statement  "                    throw new QueueCreationFailedException($"{exeName} threw an error when creating queues. This typically indicates a configuration error. The error output from {exeName} was:\r\n {error}"); " is 187.
Long Statement,ServiceControlInstaller.Engine.Validation,ConnectionStringValidator,C:\repos\Particular_ServiceControl\src\ServiceControlInstaller.Engine\Validation\ConnectionStringValidator.cs,CheckMsSqlConnectionString,The length of the statement  "                            throw new EngineValidationException("Invalid service account for this connection string. The connection string has integrated security enabled but localsystem service has been selected."); " is 188.
Long Statement,ServiceControlInstaller.Engine.Validation,MsmqConfigValidator,C:\repos\Particular_ServiceControl\src\ServiceControlInstaller.Engine\Validation\MsmqConfigValidator.cs,CheckServiceIsInstalledAndRunning,The length of the statement  "            var msmqService = ServiceController.GetServices().FirstOrDefault(p => p.ServiceName.Equals("MSMQ"' StringComparison.OrdinalIgnoreCase)); " is 136.
Long Statement,ServiceControlInstaller.Engine.Validation,MsmqConfigValidator,C:\repos\Particular_ServiceControl\src\ServiceControlInstaller.Engine\Validation\MsmqConfigValidator.cs,CheckServiceIsConfiguredCorrectly,The length of the statement  "            var componentsToRemove = undesirableMsmqComponents.Where(undesirableComponent => valueNames.Contains(undesirableComponent.Name' StringComparer.OrdinalIgnoreCase)).Select(p => p.DisplayName).ToArray(); " is 200.
Long Statement,ServiceControlInstaller.Engine.Validation,MsmqConfigValidator,C:\repos\Particular_ServiceControl\src\ServiceControlInstaller.Engine\Validation\MsmqConfigValidator.cs,CheckServiceIsConfiguredCorrectly,The length of the statement  "                throw new EngineValidationException($"The MSMQ service has unsupported optional features installed. Please remove the following via control panel or the DISM command line tool'  The unsupported feature(s) are: {string.Join("' "' componentsToRemove)}"); " is 252.
Long Statement,ServiceControlInstaller.Engine.Validation,ServiceControlQueueNameValidator,C:\repos\Particular_ServiceControl\src\ServiceControlInstaller.Engine\Validation\ServiceControlQueueNameValidator.cs,Validate,The length of the statement  "                Instances = InstanceFinder.ServiceControlInstances().Where(p => p.Name != instance.Name & p.TransportPackage.Equals(instance.TransportPackage' StringComparison.OrdinalIgnoreCase)).AsEnumerable<IServiceControlTransportConfig>().ToList() " is 235.
Long Statement,ServiceControlInstaller.Engine.Validation,ServiceControlQueueNameValidator,C:\repos\Particular_ServiceControl\src\ServiceControlInstaller.Engine\Validation\ServiceControlQueueNameValidator.cs,Validate,The length of the statement  "                Instances = InstanceFinder.ServiceControlInstances().Where(p => p.Name != instance.Name  & p.TransportPackage.Equals(instance.TransportPackage' StringComparison.OrdinalIgnoreCase)).AsEnumerable<IServiceControlTransportConfig>().ToList() " is 236.
Long Statement,ServiceControlInstaller.Engine.Validation,ServiceControlQueueNameValidator,C:\repos\Particular_ServiceControl\src\ServiceControlInstaller.Engine\Validation\ServiceControlQueueNameValidator.cs,CheckQueueNamesAreNotTakenByAnotherInstance,The length of the statement  "            var duplicates = (from queue in queues where allQueues.Any(p => string.Equals(p.ConnectionString' queue.ConnectionString' StringComparison.OrdinalIgnoreCase) && string.Equals(p.QueueName' queue.QueueName' StringComparison.OrdinalIgnoreCase)) select queue.PropertyName).ToList(); " is 278.
Long Statement,ServiceControlInstaller.Engine.Validation,ServiceControlQueueNameValidator,C:\repos\Particular_ServiceControl\src\ServiceControlInstaller.Engine\Validation\ServiceControlQueueNameValidator.cs,CheckQueueNamesAreNotTakenByAnotherInstance,The length of the statement  "                throw new EngineValidationException($"The queue name for {duplicates[0]} is already assigned to another ServiceControl instance"); " is 130.
Long Statement,ServiceControlInstaller.Engine.Validation,ServiceControlQueueNameValidator,C:\repos\Particular_ServiceControl\src\ServiceControlInstaller.Engine\Validation\ServiceControlQueueNameValidator.cs,CheckQueueNamesAreNotTakenByAnotherInstance,The length of the statement  "                throw new EngineValidationException($"Some queue names specified are already assigned to another ServiceControl instance - Correct the values for {string.Join("' "' duplicates)}"); " is 180.
Long Statement,ServiceControlInstaller.Engine.Validation,PathsValidator,C:\repos\Particular_ServiceControl\src\ServiceControlInstaller.Engine\Validation\PathsValidator.cs,CheckPathsAreEmpty,The length of the statement  "                        continue;  // flagfile will be present if we've unpacked and had a config failure.  In this case it's OK for the directory to have content " is 138.
Long Statement,ServiceControlInstaller.Engine.Validation,PathsValidator,C:\repos\Particular_ServiceControl\src\ServiceControlInstaller.Engine\Validation\PathsValidator.cs,CheckNoNestedPaths,The length of the statement  "                        throw new EngineValidationException($"Nested paths are not supported. The {possibleChild.Name} is nested under {path.Name}"); " is 125.
Long Statement,ServiceControlInstaller.Engine.Services,WindowsServiceController,C:\repos\Particular_ServiceControl\src\ServiceControlInstaller.Engine\Services\WindowsServiceController.cs,ChangeAccountDetails,The length of the statement  "                        message += $"( AccountName {userAccount.QualifiedName} converted to {ConvertAccountNameToServiceAccount(userAccount.QualifiedName)})"; " is 134.
Long Statement,ServiceControlInstaller.Engine.Services,WindowsServiceController,C:\repos\Particular_ServiceControl\src\ServiceControlInstaller.Engine\Services\WindowsServiceController.cs,RegisterNewService,The length of the statement  "                        message += $"( AccountName {serviceInfo.ServiceAccount} converted to {ConvertAccountNameToServiceAccount(serviceInfo.ServiceAccount)})"; " is 136.
Long Statement,ServiceControlInstaller.Engine.UrlAcl,UrlReservation,C:\repos\Particular_ServiceControl\src\ServiceControlInstaller.Engine\UrlAcl\UrlReservation.cs,GetAll,The length of the statement  "                        var outputConfigInfo = (HttpServiceConfigUrlAclSet) Marshal.PtrToStructure(pOutputConfigInfo' typeof(HttpServiceConfigUrlAclSet)); " is 130.
Long Statement,ServiceControlInstaller.Engine.UrlAcl,UrlReservation,C:\repos\Particular_ServiceControl\src\ServiceControlInstaller.Engine\UrlAcl\UrlReservation.cs,GetAll,The length of the statement  "                        var rev = new UrlReservation(outputConfigInfo.KeyDesc.UrlPrefix' SecurityIdentifiersFromSecurityDescriptor(outputConfigInfo.ParamDesc.StringSecurityDescriptor).ToArray()); " is 171.
Long Statement,ServiceControlInstaller.Engine.UrlAcl,UrlReservation,C:\repos\Particular_ServiceControl\src\ServiceControlInstaller.Engine\UrlAcl\UrlReservation.cs,GetDiscretionaryAcl,The length of the statement  "                discretionaryAcl.AddAccess(AccessControlType.Allow' securityIdentifier' GENERIC_EXECUTE' InheritanceFlags.None' PropagationFlags.None); " is 135.
Complex Conditional,ServiceControlInstaller.Engine.Instances,MonitoringNewInstance,C:\repos\Particular_ServiceControl\src\ServiceControlInstaller.Engine\Instances\MonitoringNewInstance.cs,CheckForConflictingUrlAclReservations,The conditional expression  "(reservation.HostName.Equals("localhost"' StringComparison.OrdinalIgnoreCase) && !HostName.Equals("localhost"' StringComparison.OrdinalIgnoreCase)) ||                      (!reservation.HostName.Equals("localhost"' StringComparison.OrdinalIgnoreCase) && HostName.Equals("localhost"' StringComparison.OrdinalIgnoreCase))"  is complex.
Complex Conditional,ServiceControlInstaller.Engine.Instances,ServiceControlNewInstance,C:\repos\Particular_ServiceControl\src\ServiceControlInstaller.Engine\Instances\ServiceControlNewInstance.cs,CheckForConflictingUrlAclReservations,The conditional expression  "reservation.HostName.Equals("localhost"' StringComparison.OrdinalIgnoreCase) && !HostName.Equals("localhost"' StringComparison.OrdinalIgnoreCase) ||                      !reservation.HostName.Equals("localhost"' StringComparison.OrdinalIgnoreCase) && HostName.Equals("localhost"' StringComparison.OrdinalIgnoreCase)"  is complex.
Empty Catch Block,ServiceControlInstaller.Engine.Configuration,AppConfigWrapper,C:\repos\Particular_ServiceControl\src\ServiceControlInstaller.Engine\Configuration\AppConfigWrapper.cs,Read,The method has an empty catch block.
Empty Catch Block,ServiceControlInstaller.Engine.Configuration,RegistryReader<T>,C:\repos\Particular_ServiceControl\src\ServiceControlInstaller.Engine\Configuration\RegistryReader.cs,Read,The method has an empty catch block.
Empty Catch Block,ServiceControlInstaller.Engine.Instances,BaseService,C:\repos\Particular_ServiceControl\src\ServiceControlInstaller.Engine\Instances\BaseService.cs,HasUnderlyingProcessExited,The method has an empty catch block.
Magic Number,ServiceControlInstaller.Engine.Accounts,UserAccount,C:\repos\Particular_ServiceControl\src\ServiceControlInstaller.Engine\Accounts\UserAccount.cs,ParseAccountName,The following statement contains a magic number: if (systemAliases.Contains(accountName' StringComparer.OrdinalIgnoreCase))              {                  userAccount.SID = new SecurityIdentifier(WellKnownSidType.LocalSystemSid' null);              }              else              {                  var account = accountName.StartsWith(@".\") ?  new NTAccount(accountName.Remove(0'2)) :  new NTAccount(accountName);                  userAccount.SID = (SecurityIdentifier) account.Translate(typeof(SecurityIdentifier));              }
Magic Number,ServiceControlInstaller.Engine.Accounts,UserAccount,C:\repos\Particular_ServiceControl\src\ServiceControlInstaller.Engine\Accounts\UserAccount.cs,ParseAccountName,The following statement contains a magic number: var parts = resolvedAccount.Value.Split("\\".ToCharArray()' 2);
Magic Number,Particular.Licensing,License,C:\repos\Particular_ServiceControl\src\ServiceControlInstaller.Engine\App_Packages\Particular.Licensing\License.cs,TrialLicense,The following statement contains a magic number: return new License              {                  LicenseType = "Trial"'                  ExpirationDate = trialStartDate.AddDays(14)'                  IsExtendedTrial = false'                  ValidApplications = new List<string> { "All" }              };
Magic Number,ServiceControlInstaller.Engine.Configuration,AppConfigWrapper,C:\repos\Particular_ServiceControl\src\ServiceControlInstaller.Engine\Configuration\AppConfigWrapper.cs,Read,The following statement contains a magic number: try              {                  var parts = key.Split("/".ToCharArray()' 2);                  return RegistryReader<T>.Read(parts[0]' parts[1]' defaultValue);              }              catch (Exception)              {                  // Fall through to default              }
Magic Number,ServiceControlInstaller.Engine.Instances,BaseService,C:\repos\Particular_ServiceControl\src\ServiceControlInstaller.Engine\Instances\BaseService.cs,TryStopService,The following statement contains a magic number: try              {                  Service.WaitForStatus(ServiceControllerStatus.Stopped' TimeSpan.FromSeconds(60));                  var t = new Task(() =>                  {                      while (!HasUnderlyingProcessExited())                      {                          Thread.Sleep(100);                      }                  });                  t.Wait(5000);              }              catch (TimeoutException)              {                  return false;              }
Magic Number,ServiceControlInstaller.Engine.Instances,BaseService,C:\repos\Particular_ServiceControl\src\ServiceControlInstaller.Engine\Instances\BaseService.cs,TryStopService,The following statement contains a magic number: try              {                  Service.WaitForStatus(ServiceControllerStatus.Stopped' TimeSpan.FromSeconds(60));                  var t = new Task(() =>                  {                      while (!HasUnderlyingProcessExited())                      {                          Thread.Sleep(100);                      }                  });                  t.Wait(5000);              }              catch (TimeoutException)              {                  return false;              }
Magic Number,ServiceControlInstaller.Engine.Instances,BaseService,C:\repos\Particular_ServiceControl\src\ServiceControlInstaller.Engine\Instances\BaseService.cs,TryStopService,The following statement contains a magic number: try              {                  Service.WaitForStatus(ServiceControllerStatus.Stopped' TimeSpan.FromSeconds(60));                  var t = new Task(() =>                  {                      while (!HasUnderlyingProcessExited())                      {                          Thread.Sleep(100);                      }                  });                  t.Wait(5000);              }              catch (TimeoutException)              {                  return false;              }
Magic Number,ServiceControlInstaller.Engine.Instances,BaseService,C:\repos\Particular_ServiceControl\src\ServiceControlInstaller.Engine\Instances\BaseService.cs,TryStartService,The following statement contains a magic number: try              {                  Service.WaitForStatus(ServiceControllerStatus.Running' TimeSpan.FromSeconds(30));              }              catch (TimeoutException)              {                  return false;              }
Magic Number,ServiceControlInstaller.Engine.Instances,MonitoringInstance,C:\repos\Particular_ServiceControl\src\ServiceControlInstaller.Engine\Instances\MonitoringInstance.cs,Reload,The following statement contains a magic number: Port = AppConfig.Read(SettingsList.Port' 1234);
Magic Number,ServiceControlInstaller.Engine.Instances,ServiceControlInstance,C:\repos\Particular_ServiceControl\src\ServiceControlInstaller.Engine\Instances\ServiceControlInstance.cs,Reload,The following statement contains a magic number: Port = AppConfig.Read(SettingsList.Port' 33333);
Magic Number,ServiceControlInstaller.Engine.Validation,PortValidator,C:\repos\Particular_ServiceControl\src\ServiceControlInstaller.Engine\Validation\PortValidator.cs,Validate,The following statement contains a magic number: if (instance.Port < 1 || instance.Port > 49151)              {                  throw new EngineValidationException("Port number is not between 1 and 49151");              }
Magic Number,ServiceControlInstaller.Engine.Services,ServiceRecoveryHelper,C:\repos\Particular_ServiceControl\src\ServiceControlInstaller.Engine\Services\ServiceRecoveryHelper.cs,SetRestartOnFailure,The following statement contains a magic number: const int actionCount = 2;
Magic Number,ServiceControlInstaller.Engine.Services,ServiceRecoveryHelper,C:\repos\Particular_ServiceControl\src\ServiceControlInstaller.Engine\Services\ServiceRecoveryHelper.cs,SetRestartOnFailure,The following statement contains a magic number: const uint delay = 60000;
Magic Number,ServiceControlInstaller.Engine.Services,WindowsServiceController,C:\repos\Particular_ServiceControl\src\ServiceControlInstaller.Engine\Services\WindowsServiceController.cs,ChangeAccountDetails,The following statement contains a magic number: using (var win32Service = new ManagementObject(new ManagementPath(objPath)))              {                  var inParams = win32Service.GetMethodParameters("Change");                  inParams["StartName"] = ConvertAccountNameToServiceAccount(userAccount.QualifiedName);                  inParams["StartPassword"] = servicePassword;                    var outParams = win32Service.InvokeMethod("Change"' inParams' null);                  if (outParams == null)                  {                      throw new ManagementException($"Failed to set account credentials service {ServiceName}");                  }                    var wmiReturnCode = Convert.ToInt32(outParams["ReturnValue"]);                  if (wmiReturnCode != 0)                  {                      var message = wmiReturnCode < Win32ChangeErrorMessages.Length                          ? $"Failed to change service credentials on service {ServiceName} - {Win32ChangeErrorMessages[wmiReturnCode]}"                          : "An unknown error occurred";                        if (wmiReturnCode == 22)                      {                          message += $"( AccountName {userAccount.QualifiedName} converted to {ConvertAccountNameToServiceAccount(userAccount.QualifiedName)})";                      }                        throw new ManagementException(message);                  }              }
Magic Number,ServiceControlInstaller.Engine.Services,WindowsServiceController,C:\repos\Particular_ServiceControl\src\ServiceControlInstaller.Engine\Services\WindowsServiceController.cs,RegisterNewService,The following statement contains a magic number: using (var win32Service = new ManagementClass("Win32_Service"))              using (var inParams = win32Service.GetMethodParameters("Create"))              {                  inParams["Name"] = serviceInfo.Name;                  inParams["DisplayName"] = serviceInfo.DisplayName;                  inParams["PathName"] = serviceInfo.ImagePath;                  inParams["ServiceType"] = 16; // Own Process                  inParams["ErrorControl"] = 1; //Report to user                  inParams["StartMode"] = "Automatic";                  inParams["DesktopInteract"] = false;                  inParams["StartName"] = ConvertAccountNameToServiceAccount(serviceInfo.ServiceAccount);                  inParams["StartPassword"] = serviceInfo.ServiceAccountPwd;                  inParams["LoadOrderGroup"] = null;                  inParams["LoadOrderGroupDependencies"] = null;                  inParams["ServiceDependencies"] = serviceDependencies;                    var outParams = win32Service.InvokeMethod("create"' inParams' null);                  if (outParams == null)                  {                      throw new ManagementException($"Failed to create service {serviceInfo.Name}");                  }                  var wmiReturnCode = Convert.ToInt32(outParams["ReturnValue"]);                  if (wmiReturnCode != 0)                  {                      var message = wmiReturnCode < Win32ChangeErrorMessages.Length                          ? $"Failed to create service to {serviceInfo.Name} - {Win32ServiceErrorMessages[wmiReturnCode]}"                          : "An unknown error occurred";                        if (wmiReturnCode == 22)                      {                          message += $"( AccountName {serviceInfo.ServiceAccount} converted to {ConvertAccountNameToServiceAccount(serviceInfo.ServiceAccount)})";                      }                          throw new ManagementException(message);                  }                    if (!string.IsNullOrWhiteSpace(serviceInfo.ServiceDescription))                  {                      using (var servicesBaseKey = Registry.LocalMachine.OpenSubKey(@"System\CurrentControlSet\Services"))                      {                          if (servicesBaseKey != null)                          {                              using (var serviceKey = servicesBaseKey.OpenSubKey(serviceInfo.Name' true))                              {                                  serviceKey?.SetValue("Description"' serviceInfo.ServiceDescription);                              }                          }                      }                  }                  ServiceRecoveryHelper.SetRecoveryOptions(serviceInfo.Name);              }
Magic Number,ServiceControlInstaller.Engine.Services,WindowsServiceController,C:\repos\Particular_ServiceControl\src\ServiceControlInstaller.Engine\Services\WindowsServiceController.cs,RegisterNewService,The following statement contains a magic number: using (var win32Service = new ManagementClass("Win32_Service"))              using (var inParams = win32Service.GetMethodParameters("Create"))              {                  inParams["Name"] = serviceInfo.Name;                  inParams["DisplayName"] = serviceInfo.DisplayName;                  inParams["PathName"] = serviceInfo.ImagePath;                  inParams["ServiceType"] = 16; // Own Process                  inParams["ErrorControl"] = 1; //Report to user                  inParams["StartMode"] = "Automatic";                  inParams["DesktopInteract"] = false;                  inParams["StartName"] = ConvertAccountNameToServiceAccount(serviceInfo.ServiceAccount);                  inParams["StartPassword"] = serviceInfo.ServiceAccountPwd;                  inParams["LoadOrderGroup"] = null;                  inParams["LoadOrderGroupDependencies"] = null;                  inParams["ServiceDependencies"] = serviceDependencies;                    var outParams = win32Service.InvokeMethod("create"' inParams' null);                  if (outParams == null)                  {                      throw new ManagementException($"Failed to create service {serviceInfo.Name}");                  }                  var wmiReturnCode = Convert.ToInt32(outParams["ReturnValue"]);                  if (wmiReturnCode != 0)                  {                      var message = wmiReturnCode < Win32ChangeErrorMessages.Length                          ? $"Failed to create service to {serviceInfo.Name} - {Win32ServiceErrorMessages[wmiReturnCode]}"                          : "An unknown error occurred";                        if (wmiReturnCode == 22)                      {                          message += $"( AccountName {serviceInfo.ServiceAccount} converted to {ConvertAccountNameToServiceAccount(serviceInfo.ServiceAccount)})";                      }                          throw new ManagementException(message);                  }                    if (!string.IsNullOrWhiteSpace(serviceInfo.ServiceDescription))                  {                      using (var servicesBaseKey = Registry.LocalMachine.OpenSubKey(@"System\CurrentControlSet\Services"))                      {                          if (servicesBaseKey != null)                          {                              using (var serviceKey = servicesBaseKey.OpenSubKey(serviceInfo.Name' true))                              {                                  serviceKey?.SetValue("Description"' serviceInfo.ServiceDescription);                              }                          }                      }                  }                  ServiceRecoveryHelper.SetRecoveryOptions(serviceInfo.Name);              }
Magic Number,ServiceControlInstaller.Engine.LicenseMgmt,LicenseDetails,C:\repos\Particular_ServiceControl\src\ServiceControlInstaller.Engine\LicenseMgmt\LicenseDetails.cs,FromLicense,The following statement contains a magic number: return new LicenseDetails              {                  UpgradeProtectionExpiration = license.UpgradeProtectionExpiration'                  //If expiration date is greater that 50 years treat is as no expiration date                  ExpirationDate = license.ExpirationDate.HasValue ?                      (license.ExpirationDate.Value > DateTime.Now.AddYears(50) ? null : license.ExpirationDate)                      : license.ExpirationDate'                  RegisteredTo = license.RegisteredTo'                  IsCommercialLicense = license.IsCommercialLicense'                  IsExtendedTrial = license.IsExtendedTrial'                  IsTrialLicense = license.IsTrialLicense'                  LicenseType = license.LicenseType'                  Edition = license.Edition'                  ValidForServiceControl = license.ValidForApplication("ServiceControl")              };
Magic Number,ServiceControlInstaller.Engine.Ports,PortUtils,C:\repos\Particular_ServiceControl\src\ServiceControlInstaller.Engine\Validation\PortUtils.cs,CheckAvailable,The following statement contains a magic number: if (1 > portNumber || 49151 < portNumber)              {                  throw new ArgumentOutOfRangeException(nameof(portNumber)'"Port number is not between 1 and 49151");              }
Magic Number,ServiceControlInstaller.Engine.UrlAcl,UrlReservation,C:\repos\Particular_ServiceControl\src\ServiceControlInstaller.Engine\UrlAcl\UrlReservation.cs,UrlReservation,The following statement contains a magic number: if (matchResults.Success)              {                  HTTPS = matchResults.Groups["protocol"].Value.Equals("https"' StringComparison.OrdinalIgnoreCase);                  HostName = matchResults.Groups["hostname"].Value;                  if (String.IsNullOrEmpty(matchResults.Groups["port"].Value))                  {                      Port = HTTPS ? 443 : 80;                  }                  else                  {                      Port = int.Parse(matchResults.Groups["port"].Value);                  }                  VirtualDirectory = matchResults.Groups["virtual"].Value;                  Url = url;              }              else              {                  throw new ArgumentException("UrlAcl is invalid");              }
Magic Number,ServiceControlInstaller.Engine.UrlAcl,UrlReservation,C:\repos\Particular_ServiceControl\src\ServiceControlInstaller.Engine\UrlAcl\UrlReservation.cs,UrlReservation,The following statement contains a magic number: if (matchResults.Success)              {                  HTTPS = matchResults.Groups["protocol"].Value.Equals("https"' StringComparison.OrdinalIgnoreCase);                  HostName = matchResults.Groups["hostname"].Value;                  if (String.IsNullOrEmpty(matchResults.Groups["port"].Value))                  {                      Port = HTTPS ? 443 : 80;                  }                  else                  {                      Port = int.Parse(matchResults.Groups["port"].Value);                  }                  VirtualDirectory = matchResults.Groups["virtual"].Value;                  Url = url;              }              else              {                  throw new ArgumentException("UrlAcl is invalid");              }
Magic Number,ServiceControlInstaller.Engine.UrlAcl,UrlReservation,C:\repos\Particular_ServiceControl\src\ServiceControlInstaller.Engine\UrlAcl\UrlReservation.cs,GetDiscretionaryAcl,The following statement contains a magic number: var discretionaryAcl = new DiscretionaryAcl(false' false' 16);
