Implementation smell,Namespace,Class,File,Method,Description
Long Statement,ServiceControlInstaller.Engine.UnitTests.Account,AccountCredsTests,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControlInstaller.Engine.UnitTests\Account\AccountCredsTests.cs,TestValidLoginChecker,The length of the statement  "            var adminAccount = adminGroup?.Members.FirstOrDefault(p => (p.Context.ContextType == ContextType.Machine) && p.Sid.IsWellKnown(WellKnownSidType.AccountAdministratorSid)); " is 170.
Long Statement,ServiceControlInstaller.Engine.UnitTests.Account,AccountCredsTests,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControlInstaller.Engine.UnitTests\Account\AccountCredsTests.cs,TestValidLoginChecker,The length of the statement  "                Assert.IsFalse(UserAccount.ParseAccountName(adminAccount.Name).CheckPassword($"XXX{Guid.NewGuid():B}")' "Test for Local Admin account should have been false"); " is 159.
Long Statement,ServiceControlInstaller.Engine.UnitTests.Account,AccountCredsTests,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControlInstaller.Engine.UnitTests\Account\AccountCredsTests.cs,TestValidLoginChecker,The length of the statement  "            Assert.IsTrue(UserAccount.ParseAccountName("System").CheckPassword(null)' "Test for LocalSystem should have been true"); " is 120.
Long Statement,ServiceControlInstaller.Engine.UnitTests.Account,AccountCredsTests,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControlInstaller.Engine.UnitTests\Account\AccountCredsTests.cs,TestValidLoginChecker,The length of the statement  "            Assert.Throws<IdentityNotMappedException>(() => UserAccount.ParseAccountName(@"NT Authority\NotAValidAccount").CheckPassword(null)' "Test for Invalid System Account should throw IdentityNotMappedException"); " is 207.
Long Statement,ServiceControlInstaller.Engine.UnitTests.Account,AccountCredsTests,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControlInstaller.Engine.UnitTests\Account\AccountCredsTests.cs,TestValidLoginChecker,The length of the statement  "            Assert.Throws<IdentityNotMappedException>(() => UserAccount.ParseAccountName("missingaccount").CheckPassword("foo")' "Test for Missing Account should should throw IdentityNotMappedException"); " is 192.
Long Statement,ServiceControlInstaller.Engine.UnitTests.Account,AccountCredsTests,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControlInstaller.Engine.UnitTests\Account\AccountCredsTests.cs,TestValidLoginChecker,The length of the statement  "            Assert.Throws<IdentityNotMappedException>(() => UserAccount.ParseAccountName(@"UnknownDomain\AUser").CheckPassword("foo")' "Test for unknown domain should throw IdentityNotMappedException"); " is 190.
Long Statement,ServiceControlInstaller.Engine.UnitTests.Account,AccountCredsTests,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControlInstaller.Engine.UnitTests\Account\AccountCredsTests.cs,TestIfServiceAccountAreSupportedByParser,The length of the statement  "            Assert.Throws<EngineValidationException>(() => account.CheckPassword("MySecret!")' "Service account password cannot have a value and must be blank"); " is 149.
Long Statement,ServiceControlInstaller.Engine.UnitTests.Configuration.ServiceControl,UpgradeControlDetailsTests,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControlInstaller.Engine.UnitTests\Configuration\ServiceControl\UpgradeControlDetailsTests.cs,DetailsAreValid,The length of the statement  "            Assert.AreEqual(UpgradeControl.details.Length' UpgradeControl.details.GroupBy(d => d.TargetMinimumVersion).Count()' "Duplicate TargetMinimumVersion entries"); " is 158.
Long Statement,ServiceControlInstaller.Engine.UnitTests.Configuration.ServiceControl,UpgradeControlDetailsTests,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControlInstaller.Engine.UnitTests\Configuration\ServiceControl\UpgradeControlDetailsTests.cs,DetailsAreValid,The length of the statement  "                var failures = details.Where(d => d.TargetMinimumVersion > upgradeInfo.TargetMinimumVersion && d.CurrentMinimumVersion < upgradeInfo.TargetMinimumVersion).ToList(); " is 164.
Long Statement,ServiceControlInstaller.Engine.UnitTests.Configuration.ServiceControl,UpgradeControlTests,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControlInstaller.Engine.UnitTests\Configuration\ServiceControl\UpgradeControlTests.cs,TestGetUpgradeInfoForTargetVersion,The length of the statement  "            Assert.AreEqual(defaultUpgradeInfo.TargetMinimumVersion' upgradeInfo.TargetMinimumVersion' $"TargetMinimumVersion mismatch {target}"); " is 134.
Long Statement,ServiceControlInstaller.Engine.UnitTests.Configuration.ServiceControl,UpgradeControlTests,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControlInstaller.Engine.UnitTests\Configuration\ServiceControl\UpgradeControlTests.cs,TestGetUpgradeInfoForTargetVersion,The length of the statement  "            Assert.AreEqual(defaultUpgradeInfo.CurrentMinimumVersion' upgradeInfo.CurrentMinimumVersion' $"CurrentMinimumVersion mismatch {target}"); " is 137.
Long Statement,ServiceControlInstaller.Engine.UnitTests.Configuration.ServiceControl,UpgradeControlTests,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControlInstaller.Engine.UnitTests\Configuration\ServiceControl\UpgradeControlTests.cs,TestGetUpgradeInfoForTargetVersion,The length of the statement  "            Assert.AreEqual(defaultUpgradeInfo.RecommendedUpgradeVersion' upgradeInfo.RecommendedUpgradeVersion' $"RecommendedUpgradeVersion mismatch {target}"); " is 149.
Long Statement,ServiceControlInstaller.Engine.UnitTests,RunEngine,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControlInstaller.Engine.UnitTests\RunEngineTasksExplicitly.cs,DeleteInstance,The length of the statement  "            foreach (var instance in InstanceFinder.ServiceControlInstances().Where(p => p.Name.StartsWith("Test.ServiceControl"' StringComparison.OrdinalIgnoreCase))) " is 155.
Long Statement,ServiceControlInstaller.Engine.UnitTests,RunEngine,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControlInstaller.Engine.UnitTests\RunEngineTasksExplicitly.cs,UpgradeInstance,The length of the statement  "            foreach (var instance in InstanceFinder.ServiceControlInstances().Where(p => p.Name.StartsWith("Test.ServiceControl"' StringComparison.OrdinalIgnoreCase))) " is 155.
Long Statement,ServiceControlInstaller.Engine.UnitTests,RunEngine,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControlInstaller.Engine.UnitTests\RunEngineTasksExplicitly.cs,ChangeConfigTests,The length of the statement  "            var msmqTestInstance = InstanceFinder.ServiceControlInstances().First(p => p.Name.Equals("Test.ServiceControl.MSMQ"' StringComparison.OrdinalIgnoreCase)); " is 154.
Long Statement,ServiceControlInstaller.Engine.UnitTests,RunEngine,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControlInstaller.Engine.UnitTests\RunEngineTasksExplicitly.cs,ChangeConfigTests,The length of the statement  "            msmqTestInstance = InstanceFinder.ServiceControlInstances().First(p => p.Name.Equals("Test.ServiceControl.MSMQ"' StringComparison.OrdinalIgnoreCase)); " is 150.
Long Statement,ServiceControlInstaller.Engine.UnitTests,RunEngine,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControlInstaller.Engine.UnitTests\RunEngineTasksExplicitly.cs,ChangeConfigTests,The length of the statement  "            msmqTestInstance = InstanceFinder.ServiceControlInstances().First(p => p.Name.Equals("Test.ServiceControl.MSMQ"' StringComparison.OrdinalIgnoreCase)); " is 150.
Long Statement,ServiceControlInstaller.Engine.UnitTests.UrlAcl,UrlReservationTests,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControlInstaller.Engine.UnitTests\UrlAcl\UrlReservationTest.cs,ThrowIfCreateInvalidUrlAcl,The length of the statement  "                Assert.IsFalse(UrlReservation.GetAll().Any(p => p.Url.Equals(reservation.Url' StringComparison.OrdinalIgnoreCase))' "UrlAcl exists after deletion"); " is 148.
Long Statement,ServiceControlInstaller.Engine.UnitTests.UrlAcl,UrlReservationTests,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControlInstaller.Engine.UnitTests\UrlAcl\UrlReservationTest.cs,AddUsersToUrlAcl,The length of the statement  "            Assert.IsTrue(reservation.Users.First().Equals("Everyone"' StringComparison.OrdinalIgnoreCase)' "User is not 'Everyone'"); " is 122.
Long Statement,ServiceControlInstaller.Engine.UnitTests.UrlAcl,UrlReservationTests,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControlInstaller.Engine.UnitTests\UrlAcl\UrlReservationTest.cs,CheckPatternMatching,The length of the statement  "            Assert.Throws<ArgumentException>(() => new UrlReservation("https://localhost:8000/foo/api")' "UrlAcl is invalid without trailing /"); " is 133.
Long Statement,ServiceControlInstaller.Engine.UnitTests.UrlAcl,UrlReservationTests,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControlInstaller.Engine.UnitTests\UrlAcl\UrlReservationTest.cs,TearDown,The length of the statement  "            foreach (var urlReservation in UrlReservation.GetAll().Where(p => p.Url.Equals(url' StringComparison.OrdinalIgnoreCase))) " is 121.
Long Statement,ServiceControlInstaller.Engine.UnitTests.Validation,QueueValidationTests,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControlInstaller.Engine.UnitTests\Validation\QueueValidationTests.cs,Init,The length of the statement  "            instanceA.SetupGet(p => p.TransportPackage).Returns(ServiceControlCoreTransports.All.First(t => t.Name == TransportNames.MSMQ)); " is 128.
Long Statement,ServiceControlInstaller.Engine.UnitTests.Validation,QueueValidationTests,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControlInstaller.Engine.UnitTests\Validation\QueueValidationTests.cs,Init,The length of the statement  "            instanceB.SetupGet(p => p.TransportPackage).Returns(ServiceControlCoreTransports.All.First(t => t.Name == TransportNames.RabbitMQConventionalRoutingTopology)); " is 159.
Long Statement,ServiceControlInstaller.Engine.UnitTests.Validation,QueueValidationTests,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControlInstaller.Engine.UnitTests\Validation\QueueValidationTests.cs,CheckChainingOfAuditQueues_ShouldSucceed,The length of the statement  "            existingAudit.SetupGet(p => p.TransportPackage).Returns(ServiceControlCoreTransports.All.First(t => t.Name == TransportNames.MSMQ)); " is 132.
Long Statement,ServiceControlInstaller.Engine.UnitTests.Validation,QueueValidationTests,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControlInstaller.Engine.UnitTests\Validation\QueueValidationTests.cs,CheckQueueNamesAreNotTakenByAnotherInstance_ShouldThrow,The length of the statement  "            var expectedError = "Some queue names specified are already assigned to another ServiceControl instance - Correct the values for ErrorLogQueue' ErrorQueue"; " is 156.
Long Statement,ServiceControlInstaller.Engine.UnitTests.Validation,QueueValidationTests,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControlInstaller.Engine.UnitTests\Validation\QueueValidationTests.cs,DuplicateQueueNamesAreAllowedOnDifferentTransports_ShouldNotThrow,The length of the statement  "            var expectedError = "Some queue names specified are already assigned to another ServiceControl instance - Correct the values for ErrorLogQueue' ErrorQueue"; " is 156.
Long Statement,ServiceControlInstaller.Engine.UnitTests.Validation,QueueValidationTests,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControlInstaller.Engine.UnitTests\Validation\QueueValidationTests.cs,DuplicateQueueNamesAreAllowedOnDifferentTransports_ShouldNotThrow,The length of the statement  "                TransportPackage = ServiceControlCoreTransports.All.First(t => t.Name == TransportNames.RabbitMQConventionalRoutingTopology)' " is 125.
Long Statement,ServiceControlInstaller.Engine.UnitTests.Validation,QueueValidationTests,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControlInstaller.Engine.UnitTests\Validation\QueueValidationTests.cs,EnsureDuplicateQueueNamesAreAllowedOnSameTransportWithDifferentConnectionString,The length of the statement  "                TransportPackage = ServiceControlCoreTransports.All.First(t => t.Name == TransportNames.RabbitMQConventionalRoutingTopology)' " is 125.
Long Statement,ServiceControlInstaller.Engine.UnitTests.Validation,QueueValidationTests,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControlInstaller.Engine.UnitTests\Validation\QueueValidationTests.cs,EnsureDuplicateQueueNamesAreAllowedOnSameTransportWithDifferentConnectionString,The length of the statement  "            Assert.That(ex.Message' Does.Contain("Some queue names specified are already assigned to another ServiceControl instance - Correct the values for")); " is 149.
Magic Number,ServiceControlInstaller.Engine.UnitTests.Configuration.ServiceControl,UpgradeControlDetailsTests,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControlInstaller.Engine.UnitTests\Configuration\ServiceControl\UpgradeControlDetailsTests.cs,ValidateVersion2UpgradeData,The following statement contains a magic number: var tooOldVersion = new Version(1' 41' 0);
Magic Number,ServiceControlInstaller.Engine.UnitTests.Configuration.ServiceControl,UpgradeControlDetailsTests,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControlInstaller.Engine.UnitTests\Configuration\ServiceControl\UpgradeControlDetailsTests.cs,ValidateVersion2UpgradeData,The following statement contains a magic number: var minimumVersion = new Version(1' 41' 3);
Magic Number,ServiceControlInstaller.Engine.UnitTests.Configuration.ServiceControl,UpgradeControlDetailsTests,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControlInstaller.Engine.UnitTests\Configuration\ServiceControl\UpgradeControlDetailsTests.cs,ValidateVersion2UpgradeData,The following statement contains a magic number: var minimumVersion = new Version(1' 41' 3);
Magic Number,ServiceControlInstaller.Engine.UnitTests.Configuration.ServiceControl,UpgradeControlDetailsTests,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControlInstaller.Engine.UnitTests\Configuration\ServiceControl\UpgradeControlDetailsTests.cs,ValidateVersion2UpgradeData,The following statement contains a magic number: var recommendedVersion = new Version(1' 48' 0);
Magic Number,ServiceControlInstaller.Engine.UnitTests.Configuration.ServiceControl,UpgradeControlDetailsTests,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControlInstaller.Engine.UnitTests\Configuration\ServiceControl\UpgradeControlDetailsTests.cs,ValidateVersion2UpgradeData,The following statement contains a magic number: var version2 = new Version(2' 0' 0);
Magic Number,ServiceControlInstaller.Engine.UnitTests.Configuration.ServiceControl,UpgradeControlTests,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControlInstaller.Engine.UnitTests\Configuration\ServiceControl\UpgradeControlTests.cs,TestGetUpgradeInfoForTargetVersion,The following statement contains a magic number: var upgrade1Info = new UpgradeInfo(new Version(2' 0' 0)' new Version(1' 41' 3))              {                  RecommendedUpgradeVersion = new Version(1' 48' 0)              };
Magic Number,ServiceControlInstaller.Engine.UnitTests.Configuration.ServiceControl,UpgradeControlTests,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControlInstaller.Engine.UnitTests\Configuration\ServiceControl\UpgradeControlTests.cs,TestGetUpgradeInfoForTargetVersion,The following statement contains a magic number: var upgrade1Info = new UpgradeInfo(new Version(2' 0' 0)' new Version(1' 41' 3))              {                  RecommendedUpgradeVersion = new Version(1' 48' 0)              };
Magic Number,ServiceControlInstaller.Engine.UnitTests.Configuration.ServiceControl,UpgradeControlTests,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControlInstaller.Engine.UnitTests\Configuration\ServiceControl\UpgradeControlTests.cs,TestGetUpgradeInfoForTargetVersion,The following statement contains a magic number: var upgrade1Info = new UpgradeInfo(new Version(2' 0' 0)' new Version(1' 41' 3))              {                  RecommendedUpgradeVersion = new Version(1' 48' 0)              };
Magic Number,ServiceControlInstaller.Engine.UnitTests.Configuration.ServiceControl,UpgradeControlTests,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControlInstaller.Engine.UnitTests\Configuration\ServiceControl\UpgradeControlTests.cs,TestGetUpgradeInfoForTargetVersion,The following statement contains a magic number: var upgrade1Info = new UpgradeInfo(new Version(2' 0' 0)' new Version(1' 41' 3))              {                  RecommendedUpgradeVersion = new Version(1' 48' 0)              };
Magic Number,ServiceControlInstaller.Engine.UnitTests.Configuration.ServiceControl,UpgradeControlTests,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControlInstaller.Engine.UnitTests\Configuration\ServiceControl\UpgradeControlTests.cs,TestGetUpgradeInfoForTargetVersion,The following statement contains a magic number: var upgrade2Info = new UpgradeInfo(new Version(3' 0' 0)' new Version(2' 1' 3))              {                  RecommendedUpgradeVersion = new Version(2' 1' 3)              };
Magic Number,ServiceControlInstaller.Engine.UnitTests.Configuration.ServiceControl,UpgradeControlTests,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControlInstaller.Engine.UnitTests\Configuration\ServiceControl\UpgradeControlTests.cs,TestGetUpgradeInfoForTargetVersion,The following statement contains a magic number: var upgrade2Info = new UpgradeInfo(new Version(3' 0' 0)' new Version(2' 1' 3))              {                  RecommendedUpgradeVersion = new Version(2' 1' 3)              };
Magic Number,ServiceControlInstaller.Engine.UnitTests.Configuration.ServiceControl,UpgradeControlTests,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControlInstaller.Engine.UnitTests\Configuration\ServiceControl\UpgradeControlTests.cs,TestGetUpgradeInfoForTargetVersion,The following statement contains a magic number: var upgrade2Info = new UpgradeInfo(new Version(3' 0' 0)' new Version(2' 1' 3))              {                  RecommendedUpgradeVersion = new Version(2' 1' 3)              };
Magic Number,ServiceControlInstaller.Engine.UnitTests.Configuration.ServiceControl,UpgradeControlTests,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControlInstaller.Engine.UnitTests\Configuration\ServiceControl\UpgradeControlTests.cs,TestGetUpgradeInfoForTargetVersion,The following statement contains a magic number: var upgrade2Info = new UpgradeInfo(new Version(3' 0' 0)' new Version(2' 1' 3))              {                  RecommendedUpgradeVersion = new Version(2' 1' 3)              };
Magic Number,ServiceControlInstaller.Engine.UnitTests.Configuration.ServiceControl,UpgradeControlTests,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControlInstaller.Engine.UnitTests\Configuration\ServiceControl\UpgradeControlTests.cs,TestGetUpgradeInfoForTargetVersion,The following statement contains a magic number: var upgrade2Info = new UpgradeInfo(new Version(3' 0' 0)' new Version(2' 1' 3))              {                  RecommendedUpgradeVersion = new Version(2' 1' 3)              };
Magic Number,ServiceControlInstaller.Engine.UnitTests.Configuration.ServiceControl,UpgradeControlTests,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControlInstaller.Engine.UnitTests\Configuration\ServiceControl\UpgradeControlTests.cs,TestGetUpgradeInfoForTargetVersion,The following statement contains a magic number: var target = new Version(3' 1' 1);
Magic Number,ServiceControlInstaller.Engine.UnitTests.Configuration.ServiceControl,UpgradeControlTests,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControlInstaller.Engine.UnitTests\Configuration\ServiceControl\UpgradeControlTests.cs,TestGetUpgradeInfoForTargetVersion,The following statement contains a magic number: upgradeInfo = UpgradeControl.GetUpgradeInfoForTargetVersion(target' new Version(1' 42' 0));
Magic Number,ServiceControlInstaller.Engine.UnitTests.Configuration.ServiceControl,UpgradeControlTests,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControlInstaller.Engine.UnitTests\Configuration\ServiceControl\UpgradeControlTests.cs,TestGetUpgradeInfoForTargetVersion,The following statement contains a magic number: upgradeInfo = UpgradeControl.GetUpgradeInfoForTargetVersion(target' new Version(2' 1' 0));
Magic Number,ServiceControlInstaller.Engine.UnitTests.Configuration.ServiceControl,UpgradeControlTests,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControlInstaller.Engine.UnitTests\Configuration\ServiceControl\UpgradeControlTests.cs,TestGetUpgradeInfoForTargetVersion,The following statement contains a magic number: upgradeInfo = UpgradeControl.GetUpgradeInfoForTargetVersion(target' new Version(2' 2' 0));
Magic Number,ServiceControlInstaller.Engine.UnitTests.Configuration.ServiceControl,UpgradeControlTests,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControlInstaller.Engine.UnitTests\Configuration\ServiceControl\UpgradeControlTests.cs,TestGetUpgradeInfoForTargetVersion,The following statement contains a magic number: upgradeInfo = UpgradeControl.GetUpgradeInfoForTargetVersion(target' new Version(2' 2' 0));
Magic Number,ServiceControlInstaller.Engine.UnitTests,RunEngine,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControlInstaller.Engine.UnitTests\RunEngineTasksExplicitly.cs,UpgradeInstance,The following statement contains a magic number: installer.Upgrade(instance' new ServiceControlUpgradeOptions                  {                      AuditRetentionPeriod = TimeSpan.FromDays(30)'                      ErrorRetentionPeriod = TimeSpan.FromDays(15)'                      OverrideEnableErrorForwarding = true                  });
Magic Number,ServiceControlInstaller.Engine.UnitTests,RunEngine,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControlInstaller.Engine.UnitTests\RunEngineTasksExplicitly.cs,UpgradeInstance,The following statement contains a magic number: installer.Upgrade(instance' new ServiceControlUpgradeOptions                  {                      AuditRetentionPeriod = TimeSpan.FromDays(30)'                      ErrorRetentionPeriod = TimeSpan.FromDays(15)'                      OverrideEnableErrorForwarding = true                  });
Magic Number,ServiceControlInstaller.Engine.UnitTests,RunEngine,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControlInstaller.Engine.UnitTests\RunEngineTasksExplicitly.cs,CreateInstanceMSMQ,The following statement contains a magic number: var details = new ServiceControlNewInstance              {                  DisplayName = instanceName.Replace("."' " ")'                  Name = instanceName'                  ServiceDescription = "Test SC Instance"'                  DBPath = Path.Combine(root' "Database")'                  LogPath = Path.Combine(root' "Logs")'                  InstallPath = Path.Combine(root' "Binaries")'                  HostName = "localhost"'                  Port = 33335'                  DatabaseMaintenancePort = 33336'                  VirtualDirectory = null'                  AuditQueue = "audittest"'                  ForwardAuditMessages = false'                  ForwardErrorMessages = false'                  //TODO: Fix                  //AuditRetentionPeriod = TimeSpan.FromHours(SettingConstants.AuditRetentionPeriodDefaultInHoursForUI)'                  ErrorRetentionPeriod = TimeSpan.FromDays(SettingConstants.ErrorRetentionPeriodDefaultInDaysForUI)'                  ErrorQueue = "testerror"'                  TransportPackage = ServiceControlCoreTransports.All.First(t => t.Name == TransportNames.MSMQ)'                  ReportCard = new ReportCard()              };
Magic Number,ServiceControlInstaller.Engine.UnitTests,RunEngine,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControlInstaller.Engine.UnitTests\RunEngineTasksExplicitly.cs,CreateInstanceMSMQ,The following statement contains a magic number: var details = new ServiceControlNewInstance              {                  DisplayName = instanceName.Replace("."' " ")'                  Name = instanceName'                  ServiceDescription = "Test SC Instance"'                  DBPath = Path.Combine(root' "Database")'                  LogPath = Path.Combine(root' "Logs")'                  InstallPath = Path.Combine(root' "Binaries")'                  HostName = "localhost"'                  Port = 33335'                  DatabaseMaintenancePort = 33336'                  VirtualDirectory = null'                  AuditQueue = "audittest"'                  ForwardAuditMessages = false'                  ForwardErrorMessages = false'                  //TODO: Fix                  //AuditRetentionPeriod = TimeSpan.FromHours(SettingConstants.AuditRetentionPeriodDefaultInHoursForUI)'                  ErrorRetentionPeriod = TimeSpan.FromDays(SettingConstants.ErrorRetentionPeriodDefaultInDaysForUI)'                  ErrorQueue = "testerror"'                  TransportPackage = ServiceControlCoreTransports.All.First(t => t.Name == TransportNames.MSMQ)'                  ReportCard = new ReportCard()              };
Magic Number,ServiceControlInstaller.Engine.UnitTests,RunEngine,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControlInstaller.Engine.UnitTests\RunEngineTasksExplicitly.cs,ChangeConfigTests,The following statement contains a magic number: msmqTestInstance.Port = 33338;
Magic Number,ServiceControlInstaller.Engine.UnitTests,RunEngine,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControlInstaller.Engine.UnitTests\RunEngineTasksExplicitly.cs,ChangeConfigTests,The following statement contains a magic number: msmqTestInstance.DatabaseMaintenancePort = 33339;
Magic Number,ServiceControlInstaller.Engine.UnitTests.Ports,PortTest,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControlInstaller.Engine.UnitTests\Ports\PortTest.cs,TestIsPortAvailable,The following statement contains a magic number: Assert.DoesNotThrow(() => PortUtils.CheckAvailable(10000)' "Port 10000 wasn't available");
Magic Number,ServiceControlInstaller.Engine.UnitTests.Ports,PortTest,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControlInstaller.Engine.UnitTests\Ports\PortTest.cs,TestIsPortAvailable,The following statement contains a magic number: Assert.Throws<Exception>(() => PortUtils.CheckAvailable(9090)' "Port 9090 is available");
Magic Number,ServiceControlInstaller.Engine.UnitTests.UrlAcl,UrlReservationTests,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControlInstaller.Engine.UnitTests\UrlAcl\UrlReservationTest.cs,AddUsersToUrlAcl,The following statement contains a magic number: Assert.IsTrue(reservation.Users.Count == 2' "User count is not 2");
Magic Number,ServiceControlInstaller.Engine.UnitTests.UrlAcl,UrlReservationTests,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControlInstaller.Engine.UnitTests\UrlAcl\UrlReservationTest.cs,CheckPatternMatching,The following statement contains a magic number: Assert.IsTrue(testUrl.Port == 80);
Magic Number,ServiceControlInstaller.Engine.UnitTests.UrlAcl,UrlReservationTests,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControlInstaller.Engine.UnitTests\UrlAcl\UrlReservationTest.cs,CheckPatternMatching,The following statement contains a magic number: Assert.IsTrue(testUrl.Port == 8000);
Magic Number,ServiceControlInstaller.Engine.UnitTests.UrlAcl,UrlReservationTests,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControlInstaller.Engine.UnitTests\UrlAcl\UrlReservationTest.cs,CheckPatternMatching,The following statement contains a magic number: Assert.IsTrue(testUrl.Port == 8000);
Magic Number,ServiceControlInstaller.Engine.UnitTests.UrlAcl,UrlReservationTests,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControlInstaller.Engine.UnitTests\UrlAcl\UrlReservationTest.cs,CheckPatternMatching,The following statement contains a magic number: Assert.IsTrue(testUrl.Port == 443);
Magic Number,ServiceControlInstaller.Engine.UnitTests.UrlAcl,UrlReservationTests,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControlInstaller.Engine.UnitTests\UrlAcl\UrlReservationTest.cs,CheckPatternMatching,The following statement contains a magic number: Assert.IsTrue(testUrl.Port == 10253);
Magic Number,ServiceControlInstaller.Engine.UnitTests.Zip,UnpackTest,C:\research\architectureSmells\repos\Particular_ServiceControl\src\ServiceControlInstaller.Engine.UnitTests\Zip\UnpackTest.cs,FilterUnzipTest,The following statement contains a magic number: Assert.True(workingFolder.GetFiles().Count() == 2' "Should only be two file asub and broot");
