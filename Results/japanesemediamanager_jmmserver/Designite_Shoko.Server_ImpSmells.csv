Implementation smell,Namespace,Class,File,Method,Description
Long Method,Shoko.Server,ShokoServiceImplementation,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v1\Implementations\ShokoServiceImplementation\ShokoServiceImplementation_Entities.cs,GetAnimeRatings,The method has 101 lines of code.
Long Method,Shoko.Server,ShokoServiceImplementation,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v1\Implementations\ShokoServiceImplementation\ShokoServiceImplementation_Entities.cs,SaveServerSettings,The method has 156 lines of code.
Long Method,Shoko.Server,ShokoServiceImplementation,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v1\Implementations\ShokoServiceImplementation\ShokoServiceImplementation_Entities.cs,GetRecommendations,The method has 119 lines of code.
Long Method,Shoko.Server,ShokoServiceImplementation,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v1\Implementations\ShokoServiceImplementation\ShokoServiceImplementation_Entities.cs,GetMyListFilesForRemoval,The method has 105 lines of code.
Long Method,Shoko.Server,Importer,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Import\Importer.cs,RunImport_GetImages,The method has 249 lines of code.
Long Method,Shoko.Server,Importer,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Import\Importer.cs,RemoveRecordsWithoutPhysicalFiles,The method has 161 lines of code.
Long Method,Shoko.Server,TvDBLinkingHelper,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Providers\TvDB\TvDBLinkingHelper.cs,TryToMatchSeasonsByAirDates,The method has 155 lines of code.
Long Method,Shoko.Server,ShokoServer,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\ShokoServer.cs,StartUpServer,The method has 143 lines of code.
Long Method,Shoko.Server,ShokoServer,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\ShokoServer.cs,WorkerMyAnime2_DoWork,The method has 137 lines of code.
Long Method,Shoko.Server,ShokoServiceImplementationImage,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v1\Implementations\ShokoServiceImplementationImage.cs,GetImagePath,The method has 132 lines of code.
Long Method,Shoko.Server,ShokoServiceImplementationMetro,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v1\Implementations\ShokoServiceImplementationMetro.cs,GetAnimeDetail,The method has 151 lines of code.
Long Method,Shoko.Server,Languages,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Languages.cs,GetFlagImage,The method has 103 lines of code.
Long Method,Shoko.Server,Languages,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Languages.cs,GetLanguageDescription,The method has 103 lines of code.
Long Method,AniDBAPI,AniDBHTTPHelper,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\AniDBHTTPHelper.cs,ProcessAnimeDetails,The method has 130 lines of code.
Long Method,AniDBAPI,Raw_AniDB_File,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Raws\Raw_AniDB_File.cs,Raw_AniDB_File,The method has 121 lines of code.
Long Method,AniDBAPI.Commands,AniDBUDPCommand,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBUDPCommand.cs,ProcessCommand,The method has 244 lines of code.
Long Method,Shoko.Server.Commands,CommandRequest_DownloadAniDBImages,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Commands\Import\CommandRequest_DownloadAniDBImages.cs,ProcessCommand,The method has 131 lines of code.
Long Method,Shoko.Server.Commands,CommandRequest_DownloadImage,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Commands\Import\CommandRequest_DownloadImage.cs,ProcessCommand,The method has 163 lines of code.
Long Method,Shoko.Server.Commands,CommandRequest_HashFile,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Commands\Import\CommandRequest_HashFile.cs,ProcessFile_LocalInfo,The method has 348 lines of code.
Long Method,Shoko.Server.Commands,CommandRequest_ProcessFile,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Commands\Import\CommandRequest_ProcessFile.cs,ProcessFile_AniDB,The method has 247 lines of code.
Long Method,Shoko.Server.Commands,CommandRequest_ValidateAllImages,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Commands\Import\CommandRequest_ValidateAllImages.cs,ProcessCommand,The method has 219 lines of code.
Long Method,Shoko.Server.Commands,CommandRequest_ValidateAllImages,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Commands\Import\CommandRequest_ValidateAllImages.cs,RemoveImageAndQueueRedownload,The method has 126 lines of code.
Long Method,Shoko.Server.Commands,CommandRequest_AddFileToMyList,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Commands\AniDB\CommandRequest_AddFileToMyList.cs,ProcessCommand,The method has 105 lines of code.
Long Method,Shoko.Server.Commands,CommandRequest_SyncMyList,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Commands\AniDB\CommandRequest_SyncMyList.cs,ProcessCommand,The method has 198 lines of code.
Long Method,Shoko.Server.Commands,CommandRequest_TraktSearchAnime,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Commands\Trakt\CommandRequest_TraktSearchAnime.cs,ProcessCommand,The method has 112 lines of code.
Long Method,Shoko.Server.API.v2.Models.common,Group,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v2\Models\common\Group.cs,GenerateFromAnimeGroup,The method has 100 lines of code.
Long Method,Shoko.Server.API.v2.Models.common,Group,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v2\Models\common\Group.cs,PopulateArtFromAniDBAnime,The method has 130 lines of code.
Long Method,Shoko.Server.API.v2.Models.common,Episode,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v2\Models\common\Episode.cs,GenerateFromAnimeEpisode,The method has 109 lines of code.
Long Method,Shoko.Server.API.v2.Models.common,Serie,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v2\Models\common\Serie.cs,GenerateSizes,The method has 102 lines of code.
Long Method,Shoko.Server.API.v2.Models.common,Serie,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v2\Models\common\Serie.cs,PopulateArtFromAniDBAnime,The method has 126 lines of code.
Long Method,Shoko.Server.API.v2.Modules,Image,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v2\Modules\Image.cs,GetImagePath,The method has 200 lines of code.
Long Method,Shoko.Server.API.v2.Modules,Image,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v2\Modules\Image.cs,GetRandomImagePath,The method has 203 lines of code.
Long Method,Shoko.Server.API.v3,ModelHelper,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v3\Helpers\ModelHelper.cs,GenerateSizes,The method has 104 lines of code.
Long Method,Shoko.Server.API.v3,Image,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v3\Models\Common\Image.cs,GetImagePath,The method has 144 lines of code.
Long Method,Shoko.Server.Databases,BaseDatabase<T>,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Databases\BaseDatabase.cs,CreateInitialGroupFilters,The method has 149 lines of code.
Long Method,Shoko.Server.Databases,DatabaseFixes,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Databases\DatabaseFixes.cs,MigrateTvDBLinks_v2_to_V3,The method has 141 lines of code.
Long Method,Shoko.Server.Models,SVR_VideoLocal_Place,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Models\SVR_VideoLocal_Place.cs,RenameFile,The method has 129 lines of code.
Long Method,Shoko.Server.Models,SVR_VideoLocal_Place,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Models\SVR_VideoLocal_Place.cs,MoveWithResultString,The method has 180 lines of code.
Long Method,Shoko.Server.Models,SVR_VideoLocal_Place,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Models\SVR_VideoLocal_Place.cs,MoveFileIfRequired,The method has 335 lines of code.
Long Method,Shoko.Server.Models,SVR_AniDB_Anime,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Models\SVR_AniDB_Anime.cs,CreateCharacters,The method has 142 lines of code.
Long Method,Shoko.Server.Models,SVR_AniDB_Anime,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Models\SVR_AniDB_Anime.cs,UpdateContractDetailedBatch,The method has 106 lines of code.
Long Method,Shoko.Server.Models,SVR_AniDB_Anime,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Models\SVR_AniDB_Anime.cs,UpdateContractDetailed,The method has 109 lines of code.
Long Method,Shoko.Server.Models,SVR_AnimeGroup,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Models\SVR_AnimeGroup.cs,BatchUpdateContracts,The method has 254 lines of code.
Long Method,Shoko.Server.Models,SVR_AnimeSeries,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Models\SVR_AnimeSeries.cs,UpdateContract,The method has 100 lines of code.
Long Method,Shoko.Server.Models,SVR_AnimeSeries,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Models\SVR_AnimeSeries.cs,GetConditionTypesChanged,The method has 108 lines of code.
Long Method,Shoko.Server.Models,SVR_AnimeSeries,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Models\SVR_AnimeSeries.cs,UpdateStats,The method has 194 lines of code.
Long Method,Shoko.Server.Models,SVR_GroupFilter,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Models\SVR_GroupFilter.cs,EvaluateConditions,The method has 335 lines of code.
Long Method,Shoko.Server.Models,SVR_GroupFilter,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Models\SVR_GroupFilter.cs,EvaluateConditions,The method has 347 lines of code.
Long Method,Shoko.Server.Models,SVR_VideoLocal,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Models\SVR_VideoLocal.cs,ToggleWatchedStatus,The method has 136 lines of code.
Long Method,Shoko.Server.Providers.AniDB,AniDBConnectionHandler,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Providers\AniDB\AniDBConnectionHandler.cs,CallAniDBUDPDirectly,The method has 128 lines of code.
Long Method,Shoko.Server.Renamer,LegacyRenamer,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Renamer\LegacyRenamer.cs,EvaluateTestI,The method has 364 lines of code.
Long Method,Shoko.Server.Renamer,LegacyRenamer,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Renamer\LegacyRenamer.cs,PerformActionOnFileNameADD,The method has 331 lines of code.
Long Method,Shoko.Server.Repositories.Cached,GroupFilterRepository,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Repositories\Cached\GroupFilterRepository.cs,CreateOrVerifyLockedFilters,The method has 113 lines of code.
Long Method,Shoko.Server.Repositories.Cached,GroupFilterRepository,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Repositories\Cached\GroupFilterRepository.cs,CreateOrVerifyDirectoryFilters,The method has 184 lines of code.
Long Method,Shoko.Server.Repositories.Cached,VideoLocalRepository,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Repositories\Cached\VideoLocalRepository.cs,RegenerateDb,The method has 118 lines of code.
Long Method,Shoko.Server.Settings,ServerSettings,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Settings\ServerSettings.cs,LoadLegacySettings,The method has 152 lines of code.
Long Method,Shoko.Server.Settings.Migration,ServerSettings_Legacy,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Settings\Migration\ServerSettings_Legacy.cs,LoadSettingsFromFile,The method has 321 lines of code.
Long Method,Shoko.Server.Settings.Migration,ServerSettings_Legacy,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Settings\Migration\ServerSettings_Legacy.cs,DebugSettingsToLog,The method has 133 lines of code.
Long Method,Shoko.Server.PlexAndKodi,CommonImplementation,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\PlexAndKodi\CommonImplementation.cs,GetItemsFromPlaylist,The method has 103 lines of code.
Long Method,Shoko.Server.PlexAndKodi,CommonImplementation,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\PlexAndKodi\CommonImplementation.cs,VoteAnime,The method has 101 lines of code.
Long Method,Shoko.Server.PlexAndKodi,CommonImplementation,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\PlexAndKodi\CommonImplementation.cs,GetItemsFromSerie,The method has 135 lines of code.
Long Method,Shoko.Server.PlexAndKodi,Helper,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\PlexAndKodi\Helper.cs,FillSerie,The method has 104 lines of code.
Long Method,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_compressCtx_safe32,The method has 175 lines of code.
Long Method,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_compress64kCtx_safe32,The method has 177 lines of code.
Long Method,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_uncompress_safe32,The method has 103 lines of code.
Long Method,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_uncompress_unknownOutputSize_safe32,The method has 111 lines of code.
Long Method,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_compressHCCtx_32,The method has 170 lines of code.
Long Method,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_compressCtx_safe64,The method has 181 lines of code.
Long Method,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_compress64kCtx_safe64,The method has 180 lines of code.
Long Method,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_uncompress_safe64,The method has 104 lines of code.
Long Method,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_uncompress_unknownOutputSize_safe64,The method has 112 lines of code.
Long Method,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_compressHCCtx_64,The method has 168 lines of code.
Long Method,Shoko.Server.Utilities.MediaInfoLib,MediaInfoParserInternal,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utilities\MediaInfoLib\MediaInfoParserInternal.cs,TranslateVideoStream,The method has 146 lines of code.
Long Method,Shoko.Server.Utilities.MediaInfoLib,MediaInfoParserInternal,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utilities\MediaInfoLib\MediaInfoParserInternal.cs,GetMediaInfo,The method has 200 lines of code.
Long Method,Shoko.Server.Providers.TraktTV,TraktTVHelper,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Providers\TraktTV\TraktTVHelper.cs,GetTraktEpisodeIdV2,The method has 121 lines of code.
Long Method,Shoko.Server.Providers.TraktTV,TraktTVHelper,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Providers\TraktTV\TraktTVHelper.cs,SyncCollectionToTrakt,The method has 237 lines of code.
Long Method,Shoko.Server.Providers.TraktTV,TraktTVHelper,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Providers\TraktTV\TraktTVHelper.cs,ReconSyncTraktEpisode,The method has 114 lines of code.
Complex Method,Shoko.Server,AniDBHelper,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDBHelper.cs,GetMyListFileStatus,Cyclomatic complexity of the method is 8
Complex Method,Shoko.Server,AniDBHelper,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDBHelper.cs,GetUpdated,Cyclomatic complexity of the method is 9
Complex Method,Shoko.Server,AniDBHelper,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDBHelper.cs,GetAnimeInfoHTTP,Cyclomatic complexity of the method is 8
Complex Method,Shoko.Server,ShokoServiceImplementation,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v1\Implementations\ShokoServiceImplementation\ShokoServiceImplementation_Entities.cs,GetNextUnwatchedEpisode,Cyclomatic complexity of the method is 15
Complex Method,Shoko.Server,ShokoServiceImplementation,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v1\Implementations\ShokoServiceImplementation\ShokoServiceImplementation_Entities.cs,GetContinueWatchingFilter,Cyclomatic complexity of the method is 17
Complex Method,Shoko.Server,ShokoServiceImplementation,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v1\Implementations\ShokoServiceImplementation\ShokoServiceImplementation_Entities.cs,GetEpisodesRecentlyAdded,Cyclomatic complexity of the method is 8
Complex Method,Shoko.Server,ShokoServiceImplementation,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v1\Implementations\ShokoServiceImplementation\ShokoServiceImplementation_Entities.cs,GetEpisodesRecentlyAddedSummary,Cyclomatic complexity of the method is 9
Complex Method,Shoko.Server,ShokoServiceImplementation,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v1\Implementations\ShokoServiceImplementation\ShokoServiceImplementation_Entities.cs,RemoveAssociationOnFile,Cyclomatic complexity of the method is 10
Complex Method,Shoko.Server,ShokoServiceImplementation,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v1\Implementations\ShokoServiceImplementation\ShokoServiceImplementation_Entities.cs,AssociateMultipleFiles,Cyclomatic complexity of the method is 9
Complex Method,Shoko.Server,ShokoServiceImplementation,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v1\Implementations\ShokoServiceImplementation\ShokoServiceImplementation_Entities.cs,IncrementEpisodeStats,Cyclomatic complexity of the method is 9
Complex Method,Shoko.Server,ShokoServiceImplementation,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v1\Implementations\ShokoServiceImplementation\ShokoServiceImplementation_Entities.cs,GetMyReleaseGroupsForAniDBEpisode,Cyclomatic complexity of the method is 11
Complex Method,Shoko.Server,ShokoServiceImplementation,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v1\Implementations\ShokoServiceImplementation\ShokoServiceImplementation_Entities.cs,DeleteAnimeGroup,Cyclomatic complexity of the method is 11
Complex Method,Shoko.Server,ShokoServiceImplementation,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v1\Implementations\ShokoServiceImplementation\ShokoServiceImplementation_Entities.cs,GetAnimeGroupsForFilter,Cyclomatic complexity of the method is 8
Complex Method,Shoko.Server,ShokoServiceImplementation,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v1\Implementations\ShokoServiceImplementation\ShokoServiceImplementation_Entities.cs,CreateSeriesFromAnime,Cyclomatic complexity of the method is 10
Complex Method,Shoko.Server,ShokoServiceImplementation,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v1\Implementations\ShokoServiceImplementation\ShokoServiceImplementation_Entities.cs,DeleteAnimeSeries,Cyclomatic complexity of the method is 10
Complex Method,Shoko.Server,ShokoServiceImplementation,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v1\Implementations\ShokoServiceImplementation\ShokoServiceImplementation_Entities.cs,GetAnimeRatings,Cyclomatic complexity of the method is 30
Complex Method,Shoko.Server,ShokoServiceImplementation,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v1\Implementations\ShokoServiceImplementation\ShokoServiceImplementation_Entities.cs,SaveUser,Cyclomatic complexity of the method is 15
Complex Method,Shoko.Server,ShokoServiceImplementation,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v1\Implementations\ShokoServiceImplementation\ShokoServiceImplementation_Entities.cs,DirectoriesFromImportFolderPath,Cyclomatic complexity of the method is 11
Complex Method,Shoko.Server,ShokoServiceImplementation,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v1\Implementations\ShokoServiceImplementation\ShokoServiceImplementation_Entities.cs,SaveServerSettings,Cyclomatic complexity of the method is 13
Complex Method,Shoko.Server,ShokoServiceImplementation,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v1\Implementations\ShokoServiceImplementation\ShokoServiceImplementation_Entities.cs,EnableDisableImage,Cyclomatic complexity of the method is 12
Complex Method,Shoko.Server,ShokoServiceImplementation,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v1\Implementations\ShokoServiceImplementation\ShokoServiceImplementation_Entities.cs,GetRecommendations,Cyclomatic complexity of the method is 29
Complex Method,Shoko.Server,ShokoServiceImplementation,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v1\Implementations\ShokoServiceImplementation\ShokoServiceImplementation_Entities.cs,CalculateRecommendationScore,Cyclomatic complexity of the method is 11
Complex Method,Shoko.Server,ShokoServiceImplementation,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v1\Implementations\ShokoServiceImplementation\ShokoServiceImplementation_Entities.cs,GetReleaseGroupsForAnime,Cyclomatic complexity of the method is 8
Complex Method,Shoko.Server,ShokoServiceImplementation,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v1\Implementations\ShokoServiceImplementation\ShokoServiceImplementation_Entities.cs,GetCrossRefDetails,Cyclomatic complexity of the method is 16
Complex Method,Shoko.Server,ShokoServiceImplementation,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v1\Implementations\ShokoServiceImplementation\ShokoServiceImplementation_Entities.cs,SearchForFiles,Cyclomatic complexity of the method is 9
Complex Method,Shoko.Server,ShokoServiceImplementation,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v1\Implementations\ShokoServiceImplementation\ShokoServiceImplementation_Entities.cs,RenameAndMoveFile,Cyclomatic complexity of the method is 12
Complex Method,Shoko.Server,ShokoServiceImplementation,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v1\Implementations\ShokoServiceImplementation\ShokoServiceImplementation_Entities.cs,SaveRenameScript,Cyclomatic complexity of the method is 8
Complex Method,Shoko.Server,ShokoServiceImplementation,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v1\Implementations\ShokoServiceImplementation\ShokoServiceImplementation_Entities.cs,GetMissingEpisodes,Cyclomatic complexity of the method is 15
Complex Method,Shoko.Server,ShokoServiceImplementation,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v1\Implementations\ShokoServiceImplementation\ShokoServiceImplementation_Entities.cs,GetMyListFilesForRemoval,Cyclomatic complexity of the method is 17
Complex Method,Shoko.Server,ShokoServiceImplementation,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v1\Implementations\ShokoServiceImplementation\ShokoServiceImplementation_Entities.cs,GetAllEpisodesWithMultipleFiles,Cyclomatic complexity of the method is 11
Complex Method,Shoko.Server,ShokoServiceImplementation,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v1\Implementations\ShokoServiceImplementation\ShokoServiceImplementation_Entities.cs,GetFilesByGroupAndResolution,Cyclomatic complexity of the method is 8
Complex Method,Shoko.Server,ShokoServiceImplementation,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v1\Implementations\ShokoServiceImplementation\ShokoServiceImplementation_Entities.cs,GetFilesByGroup,Cyclomatic complexity of the method is 8
Complex Method,Shoko.Server,FileQualityFilter,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Import\FileQualityFilter.cs,CheckFileKeep,Cyclomatic complexity of the method is 19
Complex Method,Shoko.Server,FileQualityFilter,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Import\FileQualityFilter.cs,CheckResolution,Cyclomatic complexity of the method is 14
Complex Method,Shoko.Server,FileQualityFilter,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Import\FileQualityFilter.cs,CompareTo,Cyclomatic complexity of the method is 19
Complex Method,Shoko.Server,FileQualityFilter,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Import\FileQualityFilter.cs,CompareVideoCodecTo,Cyclomatic complexity of the method is 9
Complex Method,Shoko.Server,FileQualityFilter,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Import\FileQualityFilter.cs,GetResolution,Cyclomatic complexity of the method is 9
Complex Method,Shoko.Server,FileQualityFilter,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Import\FileQualityFilter.cs,IsNullOrUnknown,Cyclomatic complexity of the method is 11
Complex Method,Shoko.Server,Importer,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Import\Importer.cs,RunImport_IntegrityCheck,Cyclomatic complexity of the method is 15
Complex Method,Shoko.Server,Importer,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Import\Importer.cs,SyncHashes,Cyclomatic complexity of the method is 9
Complex Method,Shoko.Server,Importer,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Import\Importer.cs,RunImport_ScanFolder,Cyclomatic complexity of the method is 8
Complex Method,Shoko.Server,Importer,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Import\Importer.cs,RunImport_NewFiles,Cyclomatic complexity of the method is 9
Complex Method,Shoko.Server,Importer,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Import\Importer.cs,RunImport_GetImages,Cyclomatic complexity of the method is 69
Complex Method,Shoko.Server,Importer,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Import\Importer.cs,RemoveRecordsWithoutPhysicalFiles,Cyclomatic complexity of the method is 24
Complex Method,Shoko.Server,Importer,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Import\Importer.cs,UpdateAniDBFileData,Cyclomatic complexity of the method is 11
Complex Method,Shoko.Server,Importer,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Import\Importer.cs,CheckForTvDBUpdates,Cyclomatic complexity of the method is 8
Complex Method,Shoko.Server,TvDBLinkingHelper,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Providers\TvDB\TvDBLinkingHelper.cs,GenerateTvDBEpisodeMatches,Cyclomatic complexity of the method is 10
Complex Method,Shoko.Server,TvDBLinkingHelper,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Providers\TvDB\TvDBLinkingHelper.cs,GetTvDBEpisodeMatches,Cyclomatic complexity of the method is 9
Complex Method,Shoko.Server,TvDBLinkingHelper,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Providers\TvDB\TvDBLinkingHelper.cs,TryToMatchNormalEpisodesToTvDB,Cyclomatic complexity of the method is 10
Complex Method,Shoko.Server,TvDBLinkingHelper,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Providers\TvDB\TvDBLinkingHelper.cs,TryToMatchSeasonsByAirDates,Cyclomatic complexity of the method is 25
Complex Method,Shoko.Server,TvDBLinkingHelper,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Providers\TvDB\TvDBLinkingHelper.cs,TryToMatchSeasonsByEpisodeTitles,Cyclomatic complexity of the method is 8
Complex Method,Shoko.Server,TvDBLinkingHelper,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Providers\TvDB\TvDBLinkingHelper.cs,FillUnmatchedEpisodes1To1,Cyclomatic complexity of the method is 12
Complex Method,Shoko.Server,TvDBLinkingHelper,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Providers\TvDB\TvDBLinkingHelper.cs,GetSpecialsOverridesFromLegacy,Cyclomatic complexity of the method is 14
Complex Method,Shoko.Server,TvDBLinkingHelper,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Providers\TvDB\TvDBLinkingHelper.cs,RemoveDefaultLinks,Cyclomatic complexity of the method is 11
Complex Method,Shoko.Server,ShokoServer,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\ShokoServer.cs,StartUpServer,Cyclomatic complexity of the method is 9
Complex Method,Shoko.Server,ShokoServer,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\ShokoServer.cs,WorkerFileEvents_DoWork,Cyclomatic complexity of the method is 10
Complex Method,Shoko.Server,ShokoServer,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\ShokoServer.cs,WorkerSetupDB_DoWork,Cyclomatic complexity of the method is 9
Complex Method,Shoko.Server,ShokoServer,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\ShokoServer.cs,WorkerMyAnime2_DoWork,Cyclomatic complexity of the method is 13
Complex Method,Shoko.Server,ShokoServiceImplementationImage,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v1\Implementations\ShokoServiceImplementationImage.cs,GetImagePath,Cyclomatic complexity of the method is 32
Complex Method,Shoko.Server,LogRotator,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LogRotator.cs,Delete_Logs,Cyclomatic complexity of the method is 8
Complex Method,Shoko.Server,ServerInfo,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\UI\ServerInfo.cs,OnAniDBStateUpdate,Cyclomatic complexity of the method is 13
Complex Method,Shoko.Server,TagFilter,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utilities\TagFilter.cs,IsTagBlackListed,Cyclomatic complexity of the method is 35
Complex Method,Shoko.Server,ShokoServiceImplementationMetro,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v1\Implementations\ShokoServiceImplementationMetro.cs,GetAnimeContinueWatching_old,Cyclomatic complexity of the method is 8
Complex Method,Shoko.Server,ShokoServiceImplementationMetro,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v1\Implementations\ShokoServiceImplementationMetro.cs,GetAnimeContinueWatching,Cyclomatic complexity of the method is 12
Complex Method,Shoko.Server,ShokoServiceImplementationMetro,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v1\Implementations\ShokoServiceImplementationMetro.cs,GetAnimeDetail,Cyclomatic complexity of the method is 24
Complex Method,Shoko.Server,ShokoServiceImplementationMetro,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v1\Implementations\ShokoServiceImplementationMetro.cs,GetCharactersForAnime,Cyclomatic complexity of the method is 8
Complex Method,Shoko.Server,ShokoServiceImplementationMetro,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v1\Implementations\ShokoServiceImplementationMetro.cs,GetSimilarAnimeForAnime,Cyclomatic complexity of the method is 14
Complex Method,Shoko.Server,ShokoServiceImplementationStream,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v1\Implementations\ShokoServiceImplementationStream.cs,StreamFromIFile,Cyclomatic complexity of the method is 10
Complex Method,Shoko.Server,Scanner,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Scanner.cs,WorkerIntegrityScanner_DoWork,Cyclomatic complexity of the method is 10
Complex Method,Shoko.Server,Digest,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Security\Digest.cs,Hash,Cyclomatic complexity of the method is 8
Complex Method,Shoko.Server,Languages,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Languages.cs,GetFlagImage,Cyclomatic complexity of the method is 49
Complex Method,Shoko.Server,Languages,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Languages.cs,GetLanguageDescription,Cyclomatic complexity of the method is 49
Complex Method,Shoko.Server,GroupFilterHelper,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utilities\GroupFilterHelper.cs,GetTextForEnum_Sorting,Cyclomatic complexity of the method is 13
Complex Method,Shoko.Server,GroupFilterHelper,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utilities\GroupFilterHelper.cs,GetEnumForText_Sorting,Cyclomatic complexity of the method is 13
Complex Method,Shoko.Server,GroupFilterHelper,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utilities\GroupFilterHelper.cs,Order,Cyclomatic complexity of the method is 14
Complex Method,Shoko.Server,Utils,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utils.cs,GrantAccess,Cyclomatic complexity of the method is 8
Complex Method,Shoko.Server,Utils,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utils.cs,ReparseDescription,Cyclomatic complexity of the method is 12
Complex Method,Shoko.Server,Utils,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utils.cs,GetOSInfo,Cyclomatic complexity of the method is 16
Complex Method,AniDBAPI,AniDBHTTPHelper,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\AniDBHTTPHelper.cs,ProcessAnimeDetails,Cyclomatic complexity of the method is 28
Complex Method,AniDBAPI,AniDBHTTPHelper,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\AniDBHTTPHelper.cs,ConvertReltTypeTextToEnum,Cyclomatic complexity of the method is 12
Complex Method,AniDBAPI,Raw_AniDB_Episode,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Raws\Raw_AniDB_Episode.cs,ProcessEpisodeSource,Cyclomatic complexity of the method is 8
Complex Method,AniDBAPI,Raw_AniDB_Episode,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Raws\Raw_AniDB_Episode.cs,GetEpisodeType,Cyclomatic complexity of the method is 8
Complex Method,AniDBAPI,Raw_AniDB_File,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Raws\Raw_AniDB_File.cs,Raw_AniDB_File,Cyclomatic complexity of the method is 14
Complex Method,AniDBAPI,Raw_AniDB_MyListFile,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Raws\Raw_AniDB_MyListFile.cs,ProcessHTTPSource,Cyclomatic complexity of the method is 8
Complex Method,AniDBAPI.Commands,AniDBCommand_AddFile,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBCommand_AddFile.cs,Process,Cyclomatic complexity of the method is 13
Complex Method,AniDBAPI.Commands,AniDBCommand_MarkFileAsDeleted,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBCommand_MarkFileAsDeleted.cs,Process,Cyclomatic complexity of the method is 9
Complex Method,AniDBAPI.Commands,AniDBCommand_MarkFileAsDisk,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBCommand_MarkFileAsDisk.cs,Process,Cyclomatic complexity of the method is 9
Complex Method,AniDBAPI.Commands,AniDBCommand_MarkFileAsRemote,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBCommand_MarkFileAsRemote.cs,Process,Cyclomatic complexity of the method is 9
Complex Method,AniDBAPI.Commands,AniDBCommand_MarkFileAsUnknown,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBCommand_MarkFileAsUnknown.cs,Process,Cyclomatic complexity of the method is 9
Complex Method,AniDBAPI.Commands,AniDBCommand_UpdateFile,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBCommand_UpdateFile.cs,Process,Cyclomatic complexity of the method is 9
Complex Method,AniDBAPI.Commands,AniDBCommand_Vote,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBCommand_Vote.cs,Process,Cyclomatic complexity of the method is 14
Complex Method,AniDBAPI.Commands,AniDBHTTPCommand_GetFullAnime,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBHTTPCommand_GetFullAnime.cs,Process,Cyclomatic complexity of the method is 8
Complex Method,AniDBAPI.Commands,AniDBUDPCommand,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBUDPCommand.cs,ProcessCommand,Cyclomatic complexity of the method is 15
Complex Method,Shoko.Server.Commands,CommandRequest_DownloadAniDBImages,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Commands\Import\CommandRequest_DownloadAniDBImages.cs,ProcessCommand,Cyclomatic complexity of the method is 18
Complex Method,Shoko.Server.Commands,CommandRequest_DownloadAniDBImages,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Commands\Import\CommandRequest_DownloadAniDBImages.cs,RecursivelyRetryDownload,Cyclomatic complexity of the method is 11
Complex Method,Shoko.Server.Commands,CommandRequest_DownloadImage,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Commands\Import\CommandRequest_DownloadImage.cs,ProcessCommand,Cyclomatic complexity of the method is 25
Complex Method,Shoko.Server.Commands,CommandRequest_DownloadImage,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Commands\Import\CommandRequest_DownloadImage.cs,RemoveImageRecord,Cyclomatic complexity of the method is 10
Complex Method,Shoko.Server.Commands,CommandRequest_DownloadImage,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Commands\Import\CommandRequest_DownloadImage.cs,RecursivelyRetryDownload,Cyclomatic complexity of the method is 11
Complex Method,Shoko.Server.Commands,CommandRequest_DownloadImage,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Commands\Import\CommandRequest_DownloadImage.cs,GetFileURL,Cyclomatic complexity of the method is 10
Complex Method,Shoko.Server.Commands,CommandRequest_DownloadImage,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Commands\Import\CommandRequest_DownloadImage.cs,GetFileName,Cyclomatic complexity of the method is 11
Complex Method,Shoko.Server.Commands,CommandRequest_HashFile,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Commands\Import\CommandRequest_HashFile.cs,ProcessFile_LocalInfo,Cyclomatic complexity of the method is 50
Complex Method,Shoko.Server.Commands,CommandRequest_HashFile,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Commands\Import\CommandRequest_HashFile.cs,FillMissingHashes,Cyclomatic complexity of the method is 11
Complex Method,Shoko.Server.Commands,CommandRequest_HashFile,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Commands\Import\CommandRequest_HashFile.cs,FillHashesAgainstVideoLocalRepo,Cyclomatic complexity of the method is 16
Complex Method,Shoko.Server.Commands,CommandRequest_HashFile,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Commands\Import\CommandRequest_HashFile.cs,FillHashesAgainstAniDBRepo,Cyclomatic complexity of the method is 16
Complex Method,Shoko.Server.Commands,CommandRequest_HashFile,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Commands\Import\CommandRequest_HashFile.cs,FillHashesAgainstWebCache,Cyclomatic complexity of the method is 17
Complex Method,Shoko.Server.Commands,CommandRequest_LinkFileManually,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Commands\Import\CommandRequest_LinkFileManually.cs,ProcessCommand,Cyclomatic complexity of the method is 10
Complex Method,Shoko.Server.Commands,CommandRequest_ProcessFile,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Commands\Import\CommandRequest_ProcessFile.cs,ProcessFile_AniDB,Cyclomatic complexity of the method is 37
Complex Method,Shoko.Server.Commands,CommandRequest_ValidateAllImages,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Commands\Import\CommandRequest_ValidateAllImages.cs,ProcessCommand,Cyclomatic complexity of the method is 26
Complex Method,Shoko.Server.Commands,CommandRequest_ValidateAllImages,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Commands\Import\CommandRequest_ValidateAllImages.cs,RemoveImageAndQueueRedownload,Cyclomatic complexity of the method is 28
Complex Method,Shoko.Server.Commands,CommandRequest_MovieDBSearchAnime,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Commands\MovieDB\CommandRequest_MovieDBSearchAnime.cs,ProcessCommand,Cyclomatic complexity of the method is 13
Complex Method,Shoko.Server.Commands,CommandProcessorGeneral,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Commands\CommandProcessorGeneral.cs,WorkerCommands_DoWork,Cyclomatic complexity of the method is 10
Complex Method,Shoko.Server.Commands,CommandProcessorHasher,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Commands\CommandProcessorHasher.cs,WorkerCommands_DoWork,Cyclomatic complexity of the method is 10
Complex Method,Shoko.Server.Commands,CommandProcessorImages,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Commands\CommandProcessorImages.cs,WorkerCommands_DoWork,Cyclomatic complexity of the method is 9
Complex Method,Shoko.Server.Commands,CommandRequest_AddFileToMyList,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Commands\AniDB\CommandRequest_AddFileToMyList.cs,ProcessCommand,Cyclomatic complexity of the method is 22
Complex Method,Shoko.Server.Commands,CommandRequest_DeleteFileFromMyList,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Commands\AniDB\CommandRequest_DeleteFileFromMyList.cs,ProcessCommand,Cyclomatic complexity of the method is 13
Complex Method,Shoko.Server.Commands,CommandRequest_GetCalendar,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Commands\AniDB\CommandRequest_GetCalendar.cs,ProcessCommand,Cyclomatic complexity of the method is 10
Complex Method,Shoko.Server.Commands,CommandRequest_GetReleaseGroupStatus,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Commands\AniDB\CommandRequest_GetReleaseGroupStatus.cs,ProcessCommand,Cyclomatic complexity of the method is 10
Complex Method,Shoko.Server.Commands,CommandRequest_GetUpdated,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Commands\AniDB\CommandRequest_GetUpdated.cs,ProcessCommand,Cyclomatic complexity of the method is 10
Complex Method,Shoko.Server.Commands,CommandRequest_SyncMyList,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Commands\AniDB\CommandRequest_SyncMyList.cs,ProcessCommand,Cyclomatic complexity of the method is 30
Complex Method,Shoko.Server.Commands,CommandRequest_SyncMyVotes,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Commands\AniDB\CommandRequest_SyncMyVotes.cs,ProcessCommand,Cyclomatic complexity of the method is 8
Complex Method,Shoko.Server.Commands,CommandRequest_TraktSearchAnime,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Commands\Trakt\CommandRequest_TraktSearchAnime.cs,ProcessCommand,Cyclomatic complexity of the method is 24
Complex Method,Shoko.Server.Commands,CommandRequest_TvDBSearchAnime,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Commands\TvDB\CommandRequest_TvDBSearchAnime.cs,ProcessCommand,Cyclomatic complexity of the method is 21
Complex Method,Shoko.Server.Commands,CommandRequest_UpdateMyListFileStatus,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Commands\AniDB\CommandRequest_UpdateMyListFileStatus.cs,ProcessCommand,Cyclomatic complexity of the method is 9
Complex Method,Shoko.Server.API.v2.Models.common,Group,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v2\Models\common\Group.cs,GenerateFromAnimeGroup,Cyclomatic complexity of the method is 18
Complex Method,Shoko.Server.API.v2.Models.common,Group,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v2\Models\common\Group.cs,PopulateArtFromAniDBAnime,Cyclomatic complexity of the method is 16
Complex Method,Shoko.Server.API.v2.Models.common,Group,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v2\Models\common\Group.cs,GenerateSizes,Cyclomatic complexity of the method is 20
Complex Method,Shoko.Server.API.v2.Models.common,RawFile,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v2\Models\common\RawFile.cs,RawFile,Cyclomatic complexity of the method is 10
Complex Method,Shoko.Server.API.v2.Models.common,Filter,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v2\Models\common\Filter.cs,GenerateFromGroupFilter,Cyclomatic complexity of the method is 13
Complex Method,Shoko.Server.API.v2.Models.common,Episode,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v2\Models\common\Episode.cs,GenerateFromAnimeEpisode,Cyclomatic complexity of the method is 19
Complex Method,Shoko.Server.API.v2.Models.common,Serie,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v2\Models\common\Serie.cs,GenerateFromAniDB_Anime,Cyclomatic complexity of the method is 12
Complex Method,Shoko.Server.API.v2.Models.common,Serie,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v2\Models\common\Serie.cs,GenerateFromAnimeSeries,Cyclomatic complexity of the method is 14
Complex Method,Shoko.Server.API.v2.Models.common,Serie,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v2\Models\common\Serie.cs,GenerateSizes,Cyclomatic complexity of the method is 20
Complex Method,Shoko.Server.API.v2.Models.common,Serie,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v2\Models\common\Serie.cs,PopulateArtFromAniDBAnime,Cyclomatic complexity of the method is 15
Complex Method,Shoko.Server.API.v2.Models.common,Serie,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v2\Models\common\Serie.cs,CompareTo,Cyclomatic complexity of the method is 15
Complex Method,Shoko.Server.API.v2.Modules,Common,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v2\Modules\Common.cs,GetMultipleFiles,Cyclomatic complexity of the method is 9
Complex Method,Shoko.Server.API.v2.Modules,Common,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v2\Modules\Common.cs,ListWatchedEpisodes,Cyclomatic complexity of the method is 9
Complex Method,Shoko.Server.API.v2.Modules,Common,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v2\Modules\Common.cs,GetSeriesInfoByFolder,Cyclomatic complexity of the method is 8
Complex Method,Shoko.Server.API.v2.Modules,Common,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v2\Modules\Common.cs,SearchGroupName,Cyclomatic complexity of the method is 9
Complex Method,Shoko.Server.API.v2.Modules,Common,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v2\Modules\Common.cs,GetCastFromSeries,Cyclomatic complexity of the method is 8
Complex Method,Shoko.Server.API.v2.Modules,Image,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v2\Modules\Image.cs,GetImagePath,Cyclomatic complexity of the method is 38
Complex Method,Shoko.Server.API.v2.Modules,Image,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v2\Modules\Image.cs,GetRandomImagePath,Cyclomatic complexity of the method is 34
Complex Method,Shoko.Server.API.v2.Modules,Init,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v2\Modules\Init.cs,SetDatabaseSettings,Cyclomatic complexity of the method is 16
Complex Method,Shoko.Server.API.v2.Modules,PlexWebhook,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v2\Modules\PlexWebhook.cs,GetEpisode,Cyclomatic complexity of the method is 10
Complex Method,Shoko.Server.API.v2.Modules,Webui,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v2\Modules\Webui.cs,WebUIUpdate,Cyclomatic complexity of the method is 8
Complex Method,Shoko.Server.API.v2.Modules,Webui,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v2\Modules\Webui.cs,WebUIGetVersionsTag,Cyclomatic complexity of the method is 9
Complex Method,Shoko.Server.API.v3,SeriesController,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v3\Controllers\SeriesController.cs,CheckTitlesFuzzy,Cyclomatic complexity of the method is 12
Complex Method,Shoko.Server.API.v3,APIGroupFilterSortingHelper,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v3\Helpers\APIGroupFilterSortingHelper.cs,Order,Cyclomatic complexity of the method is 13
Complex Method,Shoko.Server.API.v3,ModelHelper,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v3\Helpers\ModelHelper.cs,GenerateSizes,Cyclomatic complexity of the method is 20
Complex Method,Shoko.Server.API.v3,Image,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v3\Models\Common\Image.cs,GetSimpleTypeFromImageType,Cyclomatic complexity of the method is 8
Complex Method,Shoko.Server.API.v3,Image,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v3\Models\Common\Image.cs,GetImageTypeFromSourceAndType,Cyclomatic complexity of the method is 15
Complex Method,Shoko.Server.API.v3,Image,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v3\Models\Common\Image.cs,GetImagePath,Cyclomatic complexity of the method is 30
Complex Method,Shoko.Server.Commands.Plex,CommandRequest_PlexSyncWatched,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Commands\Plex\CommandRequest_PlexSyncWatched.cs,ProcessCommand,Cyclomatic complexity of the method is 11
Complex Method,Shoko.Server.Databases,DatabaseFixes,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Databases\DatabaseFixes.cs,MigrateTvDBLinks_v2_to_V3,Cyclomatic complexity of the method is 13
Complex Method,Shoko.Server.Databases,DatabaseFixes,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Databases\DatabaseFixes.cs,PopulateMyListIDs,Cyclomatic complexity of the method is 10
Complex Method,Shoko.Server.Databases,SQLServer,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Databases\SQLServer.cs,GetDatabasePath,Cyclomatic complexity of the method is 8
Complex Method,Shoko.Server.FileHelper,Hasher,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\FileHelper\Hasher.cs,CalculateHashes,Cyclomatic complexity of the method is 8
Complex Method,Shoko.Server.FileHelper,Hasher,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\FileHelper\Hasher.cs,CalculateHashes_here,Cyclomatic complexity of the method is 17
Complex Method,Shoko.Server.Models,SVR_VideoLocal_Place,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Models\SVR_VideoLocal_Place.cs,RenameFile,Cyclomatic complexity of the method is 20
Complex Method,Shoko.Server.Models,SVR_VideoLocal_Place,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Models\SVR_VideoLocal_Place.cs,RefreshMediaInfo,Cyclomatic complexity of the method is 15
Complex Method,Shoko.Server.Models,SVR_VideoLocal_Place,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Models\SVR_VideoLocal_Place.cs,RenameAndMoveAsRequired,Cyclomatic complexity of the method is 9
Complex Method,Shoko.Server.Models,SVR_VideoLocal_Place,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Models\SVR_VideoLocal_Place.cs,MoveWithResultString,Cyclomatic complexity of the method is 25
Complex Method,Shoko.Server.Models,SVR_VideoLocal_Place,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Models\SVR_VideoLocal_Place.cs,MoveFileIfRequired,Cyclomatic complexity of the method is 45
Complex Method,Shoko.Server.Models,SVR_AniDB_Anime,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Models\SVR_AniDB_Anime.cs,GetDefaultFanartOnlineURL,Cyclomatic complexity of the method is 8
Complex Method,Shoko.Server.Models,SVR_AniDB_Anime,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Models\SVR_AniDB_Anime.cs,GetFormattedTitle,Cyclomatic complexity of the method is 10
Complex Method,Shoko.Server.Models,SVR_AniDB_Anime,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Models\SVR_AniDB_Anime.cs,CreateEpisodes,Cyclomatic complexity of the method is 10
Complex Method,Shoko.Server.Models,SVR_AniDB_Anime,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Models\SVR_AniDB_Anime.cs,CreateTags,Cyclomatic complexity of the method is 10
Complex Method,Shoko.Server.Models,SVR_AniDB_Anime,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Models\SVR_AniDB_Anime.cs,CreateCharacters,Cyclomatic complexity of the method is 12
Complex Method,Shoko.Server.Models,SVR_AniDB_Anime,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Models\SVR_AniDB_Anime.cs,CreateResources,Cyclomatic complexity of the method is 15
Complex Method,Shoko.Server.Models,SVR_AniDB_Anime,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Models\SVR_AniDB_Anime.cs,UpdateContractDetailedBatch,Cyclomatic complexity of the method is 12
Complex Method,Shoko.Server.Models,SVR_AniDB_Anime,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Models\SVR_AniDB_Anime.cs,UpdateContractDetailed,Cyclomatic complexity of the method is 21
Complex Method,Shoko.Server.Models,SVR_AniDB_Anime,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Models\SVR_AniDB_Anime.cs,ToAzure,Cyclomatic complexity of the method is 9
Complex Method,Shoko.Server.Models,SVR_AniDB_File,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Models\SVR_AniDB_File.cs,CreateLanguages,Cyclomatic complexity of the method is 13
Complex Method,Shoko.Server.Models,SVR_AniDB_File,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Models\SVR_AniDB_File.cs,CreateCrossEpisodes,Cyclomatic complexity of the method is 10
Complex Method,Shoko.Server.Models,SVR_AnimeEpisode,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Models\SVR_AnimeEpisode.cs,SaveWatchedStatus,Cyclomatic complexity of the method is 8
Complex Method,Shoko.Server.Models,SVR_AnimeGroup,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Models\SVR_AnimeGroup.cs,GetUserContract,Cyclomatic complexity of the method is 8
Complex Method,Shoko.Server.Models,SVR_AnimeGroup,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Models\SVR_AnimeGroup.cs,RenameAllGroups,Cyclomatic complexity of the method is 18
Complex Method,Shoko.Server.Models,SVR_AnimeGroup,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Models\SVR_AnimeGroup.cs,GetConditionTypesChanged,Cyclomatic complexity of the method is 29
Complex Method,Shoko.Server.Models,SVR_AnimeGroup,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Models\SVR_AnimeGroup.cs,BatchUpdateContracts,Cyclomatic complexity of the method is 40
Complex Method,Shoko.Server.Models,SVR_AnimeGroup,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Models\SVR_AnimeGroup.cs,UpdateGroupFilters,Cyclomatic complexity of the method is 8
Complex Method,Shoko.Server.Models,SVR_AnimeSeries,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Models\SVR_AnimeSeries.cs,GetUserContract,Cyclomatic complexity of the method is 9
Complex Method,Shoko.Server.Models,SVR_AnimeSeries,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Models\SVR_AnimeSeries.cs,UpdateGroupFilters,Cyclomatic complexity of the method is 8
Complex Method,Shoko.Server.Models,SVR_AnimeSeries,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Models\SVR_AnimeSeries.cs,BatchUpdateContracts,Cyclomatic complexity of the method is 11
Complex Method,Shoko.Server.Models,SVR_AnimeSeries,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Models\SVR_AnimeSeries.cs,UpdateContract,Cyclomatic complexity of the method is 13
Complex Method,Shoko.Server.Models,SVR_AnimeSeries,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Models\SVR_AnimeSeries.cs,GetConditionTypesChanged,Cyclomatic complexity of the method is 28
Complex Method,Shoko.Server.Models,SVR_AnimeSeries,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Models\SVR_AnimeSeries.cs,UpdateStats,Cyclomatic complexity of the method is 41
Complex Method,Shoko.Server.Models,SVR_AnimeSeries,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Models\SVR_AnimeSeries.cs,SearchSeriesByStaff,Cyclomatic complexity of the method is 12
Complex Method,Shoko.Server.Models,EpisodeList,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Models\SVR_AnimeSeries.cs,Add,Cyclomatic complexity of the method is 11
Complex Method,Shoko.Server.Models,SVR_GroupFilter,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Models\SVR_GroupFilter.cs,UpdateGroupFilterFromSeries,Cyclomatic complexity of the method is 11
Complex Method,Shoko.Server.Models,SVR_GroupFilter,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Models\SVR_GroupFilter.cs,EvaluateGroupFilter,Cyclomatic complexity of the method is 10
Complex Method,Shoko.Server.Models,SVR_GroupFilter,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Models\SVR_GroupFilter.cs,EvaluateConditions,Cyclomatic complexity of the method is 117
Complex Method,Shoko.Server.Models,SVR_GroupFilter,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Models\SVR_GroupFilter.cs,EvaluateConditions,Cyclomatic complexity of the method is 110
Complex Method,Shoko.Server.Models,SVR_GroupFilter,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Models\SVR_GroupFilter.cs,Equals,Cyclomatic complexity of the method is 13
Complex Method,Shoko.Server.Models,SVR_VideoLocal,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Models\SVR_VideoLocal.cs,ToggleWatchedStatus,Cyclomatic complexity of the method is 37
Complex Method,Shoko.Server.Models,SVR_VideoLocal,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Models\SVR_VideoLocal.cs,GetMediaFromUser,Cyclomatic complexity of the method is 12
Complex Method,Shoko.Server.Models,VideoLocalComparer,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Models\SVR_VideoLocal.cs,Compare,Cyclomatic complexity of the method is 11
Complex Method,Shoko.Server.Providers.AniDB,AniDBConnectionHandler,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Providers\AniDB\AniDBConnectionHandler.cs,CallAniDBUDPDirectly,Cyclomatic complexity of the method is 13
Complex Method,Shoko.Server.Providers.TraktTV.Contracts,TraktV2SyncCollectionEpisodesByNumber,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Providers\TraktTV\Contracts\Sync\TraktV2SyncCollectionEpisodesByNumber.cs,AddEpisode,Cyclomatic complexity of the method is 11
Complex Method,Shoko.Server.Providers.TraktTV.Contracts,TraktV2SyncWatchedEpisodesByNumber,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Providers\TraktTV\Contracts\Sync\TraktV2SyncWatchedEpisodesByNumber.cs,AddEpisode,Cyclomatic complexity of the method is 11
Complex Method,Shoko.Server.Providers.TvDB,TvDBApiHelper,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Providers\TvDB\TvDBApiHelper.cs,IncrementalTvDBUpdate,Cyclomatic complexity of the method is 13
Complex Method,Shoko.Server.Renamer,LegacyRenamer,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Renamer\LegacyRenamer.cs,EvaluateTestF,Cyclomatic complexity of the method is 8
Complex Method,Shoko.Server.Renamer,LegacyRenamer,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Renamer\LegacyRenamer.cs,EvaluateTestZ,Cyclomatic complexity of the method is 8
Complex Method,Shoko.Server.Renamer,LegacyRenamer,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Renamer\LegacyRenamer.cs,EvaluateTestW,Cyclomatic complexity of the method is 10
Complex Method,Shoko.Server.Renamer,LegacyRenamer,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Renamer\LegacyRenamer.cs,EvaluateTestU,Cyclomatic complexity of the method is 10
Complex Method,Shoko.Server.Renamer,LegacyRenamer,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Renamer\LegacyRenamer.cs,EvaluateTestH,Cyclomatic complexity of the method is 8
Complex Method,Shoko.Server.Renamer,LegacyRenamer,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Renamer\LegacyRenamer.cs,EvaluateTestI,Cyclomatic complexity of the method is 62
Complex Method,Shoko.Server.Renamer,LegacyRenamer,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Renamer\LegacyRenamer.cs,GetNewFileName,Cyclomatic complexity of the method is 16
Complex Method,Shoko.Server.Renamer,LegacyRenamer,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Renamer\LegacyRenamer.cs,PerformActionOnFileNameADD,Cyclomatic complexity of the method is 66
Complex Method,Shoko.Server.Renamer,LegacyRenamer,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Renamer\LegacyRenamer.cs,EvaluateTest,Cyclomatic complexity of the method is 11
Complex Method,Shoko.Server.Renamer,LegacyRenamer,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Renamer\LegacyRenamer.cs,EvaluateTest,Cyclomatic complexity of the method is 20
Complex Method,Shoko.Server.Renamer,LegacyRenamer,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Renamer\LegacyRenamer.cs,GetDestinationFolder,Cyclomatic complexity of the method is 26
Complex Method,Shoko.Server.Repositories.Cached,CrossRef_AniDB_TvDBRepository,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Repositories\Cached\CrossRef_AniDB_TvDBRepository.cs,GetV2LinksFromAnime,Cyclomatic complexity of the method is 9
Complex Method,Shoko.Server.Repositories.Cached,AnimeSeriesRepository,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Repositories\Cached\AnimeSeriesRepository.cs,Save,Cyclomatic complexity of the method is 16
Complex Method,Shoko.Server.Repositories.Cached,GroupFilterRepository,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Repositories\Cached\GroupFilterRepository.cs,CreateOrVerifyDirectoryFilters,Cyclomatic complexity of the method is 20
Complex Method,Shoko.Server.Repositories.Cached,ImportFolderRepository,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Repositories\Cached\ImportFolderRepository.cs,SaveImportFolder,Cyclomatic complexity of the method is 16
Complex Method,Shoko.Server.Repositories.Cached,VideoLocalRepository,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Repositories\Cached\VideoLocalRepository.cs,RegenerateDb,Cyclomatic complexity of the method is 8
Complex Method,Shoko.Server.Repositories,AniDB_AnimeRepository,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Repositories\Cached\AniDB_AnimeRepository.cs,GetDefaultImagesByAnime,Cyclomatic complexity of the method is 13
Complex Method,Shoko.Server.Settings.Migration,ServerSettings_Legacy,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Settings\Migration\ServerSettings_Legacy.cs,LoadSettingsFromFile,Cyclomatic complexity of the method is 33
Complex Method,Shoko.Server.Settings.Migration,ServerSettings_Legacy,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Settings\Migration\ServerSettings_Legacy.cs,LoadLegacySettingsFromFile,Cyclomatic complexity of the method is 16
Complex Method,Shoko.Server.FileHelper.Subtitles,TextSubtitles,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\FileHelper\Subtitles\TextSubtitles.cs,GetStreams,Cyclomatic complexity of the method is 18
Complex Method,Shoko.Server.FileHelper.Subtitles,VobSubSubtitles,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\FileHelper\Subtitles\VobSubSubtitles.cs,GetStreams,Cyclomatic complexity of the method is 11
Complex Method,Shoko.Server.PlexAndKodi,CommonImplementation,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\PlexAndKodi\CommonImplementation.cs,GetFilters,Cyclomatic complexity of the method is 10
Complex Method,Shoko.Server.PlexAndKodi,CommonImplementation,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\PlexAndKodi\CommonImplementation.cs,GetMetadata,Cyclomatic complexity of the method is 8
Complex Method,Shoko.Server.PlexAndKodi,CommonImplementation,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\PlexAndKodi\CommonImplementation.cs,GetItemsFromPlaylist,Cyclomatic complexity of the method is 15
Complex Method,Shoko.Server.PlexAndKodi,CommonImplementation,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\PlexAndKodi\CommonImplementation.cs,GetFromEpisode,Cyclomatic complexity of the method is 11
Complex Method,Shoko.Server.PlexAndKodi,CommonImplementation,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\PlexAndKodi\CommonImplementation.cs,Search,Cyclomatic complexity of the method is 13
Complex Method,Shoko.Server.PlexAndKodi,CommonImplementation,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\PlexAndKodi\CommonImplementation.cs,GetItemsFromGroup,Cyclomatic complexity of the method is 15
Complex Method,Shoko.Server.PlexAndKodi,CommonImplementation,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\PlexAndKodi\CommonImplementation.cs,ToggleWatchedStatusOnGroup,Cyclomatic complexity of the method is 8
Complex Method,Shoko.Server.PlexAndKodi,CommonImplementation,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\PlexAndKodi\CommonImplementation.cs,VoteAnime,Cyclomatic complexity of the method is 11
Complex Method,Shoko.Server.PlexAndKodi,CommonImplementation,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\PlexAndKodi\CommonImplementation.cs,GetItemsFromSerie,Cyclomatic complexity of the method is 21
Complex Method,Shoko.Server.PlexAndKodi,CommonImplementation,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\PlexAndKodi\CommonImplementation.cs,GetGroupsOrSubFiltersFromFilter,Cyclomatic complexity of the method is 12
Complex Method,Shoko.Server.PlexAndKodi,BreadCrumbs,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\PlexAndKodi\Breadcrumbs.cs,FillInfo,Cyclomatic complexity of the method is 8
Complex Method,Shoko.Server.PlexAndKodi,PlexEpisodeType,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\PlexAndKodi\EpisodeType.cs,EpisodeTypeTranslated,Cyclomatic complexity of the method is 11
Complex Method,Shoko.Server.PlexAndKodi,Helper,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\PlexAndKodi\Helper.cs,AddLinksToAnimeEpisodeVideo,Cyclomatic complexity of the method is 9
Complex Method,Shoko.Server.PlexAndKodi,Helper,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\PlexAndKodi\Helper.cs,VideoFromAnimeEpisode,Cyclomatic complexity of the method is 15
Complex Method,Shoko.Server.PlexAndKodi,Helper,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\PlexAndKodi\Helper.cs,GenerateVideoFromAnimeEpisode,Cyclomatic complexity of the method is 13
Complex Method,Shoko.Server.PlexAndKodi,Helper,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\PlexAndKodi\Helper.cs,GetValidVideoRecursive,Cyclomatic complexity of the method is 10
Complex Method,Shoko.Server.PlexAndKodi,Helper,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\PlexAndKodi\Helper.cs,AddInformationFromMasterSeries,Cyclomatic complexity of the method is 13
Complex Method,Shoko.Server.PlexAndKodi,Helper,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\PlexAndKodi\Helper.cs,GenerateFromAnimeGroup,Cyclomatic complexity of the method is 13
Complex Method,Shoko.Server.PlexAndKodi,Helper,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\PlexAndKodi\Helper.cs,FillSerie,Cyclomatic complexity of the method is 16
Complex Method,Shoko.Server.PlexAndKodi,BaseObject,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\PlexAndKodi\BaseObject.cs,Init,Cyclomatic complexity of the method is 8
Complex Method,Shoko.Server.PlexAndKodi.Plex,PlexDeviceInfo,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\PlexAndKodi\Plex\PlexDeviceInfo.cs,PlexDeviceInfo,Cyclomatic complexity of the method is 9
Complex Method,Shoko.Server.Providers.MovieDB,MovieDBHelper,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Providers\MovieDB\MovieDBHelper.cs,SaveMovieToDatabase,Cyclomatic complexity of the method is 20
Complex Method,Shoko.Server.Tasks,AutoAnimeGroupCalculator,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Tasks\AutoAnimeGroupCalculator.cs,FindSuitableAnimeByWeighting,Cyclomatic complexity of the method is 10
Complex Method,Shoko.Server.Tasks,AutoAnimeGroupCalculator,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Tasks\AutoAnimeGroupCalculator.cs,ShouldConsiderAnimeRelation,Cyclomatic complexity of the method is 8
Complex Method,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,CheckArguments,Cyclomatic complexity of the method is 8
Complex Method,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_compressCtx_safe32,Cyclomatic complexity of the method is 18
Complex Method,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_compress64kCtx_safe32,Cyclomatic complexity of the method is 21
Complex Method,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_uncompress_safe32,Cyclomatic complexity of the method is 16
Complex Method,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_uncompress_unknownOutputSize_safe32,Cyclomatic complexity of the method is 19
Complex Method,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4HC_InsertAndFindBestMatch_32,Cyclomatic complexity of the method is 9
Complex Method,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4HC_InsertAndGetWiderMatch_32,Cyclomatic complexity of the method is 10
Complex Method,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_encodeSequence_32,Cyclomatic complexity of the method is 9
Complex Method,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_compressHCCtx_32,Cyclomatic complexity of the method is 26
Complex Method,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_compressCtx_safe64,Cyclomatic complexity of the method is 19
Complex Method,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_compress64kCtx_safe64,Cyclomatic complexity of the method is 19
Complex Method,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_uncompress_safe64,Cyclomatic complexity of the method is 16
Complex Method,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_uncompress_unknownOutputSize_safe64,Cyclomatic complexity of the method is 19
Complex Method,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4HC_InsertAndFindBestMatch_64,Cyclomatic complexity of the method is 9
Complex Method,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4HC_InsertAndGetWiderMatch_64,Cyclomatic complexity of the method is 11
Complex Method,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_encodeSequence_64,Cyclomatic complexity of the method is 9
Complex Method,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_compressHCCtx_64,Cyclomatic complexity of the method is 26
Complex Method,Shoko.Server.Utilities,SeriesSearch,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utilities\SeriesSearch.cs,CheckTitlesFuzzy,Cyclomatic complexity of the method is 8
Complex Method,Shoko.Server.Utilities,SeriesSearch,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utilities\SeriesSearch.cs,Search,Cyclomatic complexity of the method is 11
Complex Method,Shoko.Server.Utilities.MediaInfoLib,MediaInfoParserInternal,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utilities\MediaInfoLib\MediaInfoParserInternal.cs,TranslateVideoStream,Cyclomatic complexity of the method is 37
Complex Method,Shoko.Server.Utilities.MediaInfoLib,MediaInfoParserInternal,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utilities\MediaInfoLib\MediaInfoParserInternal.cs,TranslateAudioStream,Cyclomatic complexity of the method is 24
Complex Method,Shoko.Server.Utilities.MediaInfoLib,MediaInfoParserInternal,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utilities\MediaInfoLib\MediaInfoParserInternal.cs,TranslateTextStream,Cyclomatic complexity of the method is 9
Complex Method,Shoko.Server.Utilities.MediaInfoLib,MediaInfoParserInternal,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utilities\MediaInfoLib\MediaInfoParserInternal.cs,GetMediaInfo,Cyclomatic complexity of the method is 40
Complex Method,Shoko.Server.Utilities.MediaInfoLib,MediaInfoParserInternal,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utilities\MediaInfoLib\MediaInfoParserInternal.cs,ConvertAsync,Cyclomatic complexity of the method is 13
Complex Method,Shoko.Server.Utilities.MediaInfoLib,MediaInfoParserInternal,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utilities\MediaInfoLib\MediaInfoParserInternal.cs,GetResolution,Cyclomatic complexity of the method is 8
Complex Method,Shoko.Server.Providers.TraktTV,TraktTVHelper,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Providers\TraktTV\TraktTVHelper.cs,GetTraktEpisodeIdV2,Cyclomatic complexity of the method is 22
Complex Method,Shoko.Server.Providers.TraktTV,TraktTVHelper,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Providers\TraktTV\TraktTVHelper.cs,GetEpisodeDateForSync,Cyclomatic complexity of the method is 14
Complex Method,Shoko.Server.Providers.TraktTV,TraktTVHelper,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Providers\TraktTV\TraktTVHelper.cs,Scrobble,Cyclomatic complexity of the method is 8
Complex Method,Shoko.Server.Providers.TraktTV,TraktTVHelper,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Providers\TraktTV\TraktTVHelper.cs,SaveExtendedShowInfoV2,Cyclomatic complexity of the method is 8
Complex Method,Shoko.Server.Providers.TraktTV,TraktTVHelper,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Providers\TraktTV\TraktTVHelper.cs,GetShowCommentsV2,Cyclomatic complexity of the method is 10
Complex Method,Shoko.Server.Providers.TraktTV,TraktTVHelper,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Providers\TraktTV\TraktTVHelper.cs,SyncCollectionToTrakt,Cyclomatic complexity of the method is 41
Complex Method,Shoko.Server.Providers.TraktTV,TraktTVHelper,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Providers\TraktTV\TraktTVHelper.cs,ReconSyncTraktEpisode,Cyclomatic complexity of the method is 19
Long Parameter List,Shoko.Server,AniDBHelper,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDBHelper.cs,Init,The method has 5 parameters. Parameters: userName' password' serverName' serverPort' clientPort
Long Parameter List,Shoko.Server,AniDBHelper,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDBHelper.cs,UpdateMyListFileStatus,The method has 5 parameters. Parameters: hash' animeID' episodeNumber' watched' watchedDate
Long Parameter List,Shoko.Server,AniDBHelper,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDBHelper.cs,GetAnimeInfoHTTP,The method has 5 parameters. Parameters: session' animeID' forceRefresh' downloadRelations' relDepth
Long Parameter List,Shoko.Server,AniDBHelper,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDBHelper.cs,SaveResultsForAnimeXML,The method has 6 parameters. Parameters: session' animeID' downloadRelations' validateImages' getAnimeCmd' relDepth
Long Parameter List,Shoko.Server,ShokoServiceImplementation,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v1\Implementations\ShokoServiceImplementation\ShokoServiceImplementation_Entities.cs,SetWatchedStatusOnSeries,The method has 5 parameters. Parameters: animeSeriesID' watchedStatus' maxEpisodeNumber' episodeType' userID
Long Parameter List,Shoko.Server,ShokoServiceImplementation,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v1\Implementations\ShokoServiceImplementation\ShokoServiceImplementation_Entities.cs,SetDefaultImage,The method has 5 parameters. Parameters: isDefault' animeID' imageID' imageType' imageSizeType
Long Parameter List,Shoko.Server,ShokoServiceImplementation,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v1\Implementations\ShokoServiceImplementation\ShokoServiceImplementation_Entities.cs,LinkAniDBTrakt,The method has 7 parameters. Parameters: animeID' aniEpType' aniEpNumber' traktID' seasonNumber' traktEpNumber' crossRef_AniDB_TraktV2ID
Long Parameter List,Shoko.Server,ShokoServiceImplementation,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v1\Implementations\ShokoServiceImplementation\ShokoServiceImplementation_Entities.cs,RemoveLinkAniDBTrakt,The method has 6 parameters. Parameters: animeID' aniEpType' aniEpNumber' traktID' traktSeasonNumber' traktEpNumber
Long Parameter List,Shoko.Server,ShokoServiceImplementation,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v1\Implementations\ShokoServiceImplementation\ShokoServiceImplementation_Entities.cs,GetFilesByGroupAndResolution,The method has 6 parameters. Parameters: animeID' relGroupName' resolution' videoSource' videoBitDepth' userID
Long Parameter List,Shoko.Server,TvDBLinkingHelper,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Providers\TvDB\TvDBLinkingHelper.cs,TryToMatchRegularlyDistributedEpisodes,The method has 5 parameters. Parameters: aniepsNormal' tvepsNormal' matches' isregular' firstgroupingcount
Long Parameter List,Shoko.Server,UnhandledExceptionManager,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\UnhandledExceptionManager.cs,BitBlt,The method has 9 parameters. Parameters: hDestDC' x' y' nWidth' nHeight' hSrcDC' xSrc' ySrc' dwRop
Long Parameter List,AniDBAPI.Commands,AniDBCommand_UpdateFile,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBCommand_UpdateFile.cs,Init,The method has 5 parameters. Parameters: fileData' animeID' epnumber' watched' watchedDate
Long Parameter List,Shoko.Server.Commands,CommandRequest_HashFile,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Commands\Import\CommandRequest_HashFile.cs,FileModified,The method has 5 parameters. Parameters: FileName' Seconds' lastFileSize' writeAccess' e
Long Parameter List,Shoko.Server.Commands,CommandRequest_WebCacheDeleteXRefAniDBTrakt,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Commands\WebCache\CommandRequest_WebCacheDeleteXRefAniDBTrakt.cs,CommandRequest_WebCacheDeleteXRefAniDBTrakt,The method has 6 parameters. Parameters: animeID' aniDBStartEpisodeType' aniDBStartEpisodeNumber' traktID' traktSeasonNumber' traktStartEpisodeNumber
Long Parameter List,Shoko.Server.Commands,CommandRequest_WebCacheDeleteXRefAniDBTvDB,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Commands\WebCache\CommandRequest_WebCacheDeleteXRefAniDBTvDB.cs,CommandRequest_WebCacheDeleteXRefAniDBTvDB,The method has 6 parameters. Parameters: animeID' aniDBStartEpisodeType' aniDBStartEpisodeNumber' tvDBID' tvDBSeasonNumber' tvDBStartEpisodeNumber
Long Parameter List,Shoko.Server.API.v1.Implementations,ShokoServiceImplementationPlex,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v1\Implementations\ShokoServiceImplementationPlex.cs,GetMetadata,The method has 5 parameters. Parameters: userId' type' id' historyinfo' filterid
Long Parameter List,Shoko.Server.API.v2,APIV2Helper,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v2\APIV2Helper.cs,ConstructSearchUrl,The method has 5 parameters. Parameters: ctx' limit' query' searchTag' short_url
Long Parameter List,Shoko.Server.API.v2,APIV2Helper,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v2\APIV2Helper.cs,ConstructVideoLocalStream,The method has 5 parameters. Parameters: ctx' userid' vid' name' autowatch
Long Parameter List,Shoko.Server.API.v2.Models.common,Group,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v2\Models\common\Group.cs,GenerateFromAnimeGroup,The method has 11 parameters. Parameters: ctx' ag' uid' nocast' notag' level' all' filterid' allpic' pic' tagfilter
Long Parameter List,Shoko.Server.API.v2.Models.common,Group,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v2\Models\common\Group.cs,PopulateArtFromAniDBAnime,The method has 5 parameters. Parameters: ctx' animes' grp' allpics' pic
Long Parameter List,Shoko.Server.API.v2.Models.common,RawFile,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v2\Models\common\RawFile.cs,RawFile,The method has 5 parameters. Parameters: ctx' vl' level' uid' e
Long Parameter List,Shoko.Server.API.v2.Models.common,Filter,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v2\Models\common\Filter.cs,GenerateFromGroupFilter,The method has 10 parameters. Parameters: ctx' gf' uid' nocast' notag' level' all' allpic' pic' tagfilter
Long Parameter List,Shoko.Server.API.v2.Models.common,Filters,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v2\Models\common\Filters.cs,GenerateFromGroupFilter,The method has 10 parameters. Parameters: ctx' gf' uid' nocast' notag' level' all' allpic' pic' tagfilter
Long Parameter List,Shoko.Server.API.v2.Models.common,SearchResult,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v2\Models\common\SearchResult.cs,GenerateFromAnimeSeries,The method has 11 parameters. Parameters: ctx' ser' uid' nocast' notag' level' all' match' allpic' pic' tagfilter
Long Parameter List,Shoko.Server.API.v2.Models.common,Episode,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v2\Models\common\Episode.cs,GenerateFromAnimeEpisodeID,The method has 5 parameters. Parameters: ctx' anime_episode_id' uid' level' pic
Long Parameter List,Shoko.Server.API.v2.Models.common,Episode,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v2\Models\common\Episode.cs,GenerateFromAnimeEpisode,The method has 5 parameters. Parameters: ctx' aep' uid' level' pic
Long Parameter List,Shoko.Server.API.v2.Models.common,Serie,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v2\Models\common\Serie.cs,GenerateFromVideoLocal,The method has 10 parameters. Parameters: ctx' vl' uid' nocast' notag' level' all' allpics' pic' tagfilter
Long Parameter List,Shoko.Server.API.v2.Models.common,Serie,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v2\Models\common\Serie.cs,GenerateFromBookmark,The method has 10 parameters. Parameters: ctx' bookmark' uid' nocast' notag' level' all' allpics' pic' tagfilter
Long Parameter List,Shoko.Server.API.v2.Models.common,Serie,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v2\Models\common\Serie.cs,GenerateFromAniDB_Anime,The method has 7 parameters. Parameters: ctx' anime' nocast' notag' allpics' pic' tagfilter
Long Parameter List,Shoko.Server.API.v2.Models.common,Serie,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v2\Models\common\Serie.cs,GenerateFromAnimeSeries,The method has 10 parameters. Parameters: ctx' ser' uid' nocast' notag' level' all' allpics' pic' tagfilter
Long Parameter List,Shoko.Server.API.v2.Models.common,Serie,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v2\Models\common\Serie.cs,PopulateArtFromAniDBAnime,The method has 5 parameters. Parameters: ctx' anime' sr' allpics' pic
Long Parameter List,Shoko.Server.API.v2.Modules,Common,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v2\Modules\Common.cs,ListWatchedEpisodes,The method has 5 parameters. Parameters: query' pic' level' limit' offset
Long Parameter List,Shoko.Server.API.v2.Modules,Common,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v2\Modules\Common.cs,GetAllEpisodes,The method has 6 parameters. Parameters: uid' limit' offset' level' all' pic
Long Parameter List,Shoko.Server.API.v2.Modules,Common,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v2\Modules\Common.cs,GetSeriesByFolder,The method has 10 parameters. Parameters: id' uid' nocast' notag' level' all' limit' allpic' pic' tagfilter
Long Parameter List,Shoko.Server.API.v2.Modules,Common,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v2\Modules\Common.cs,GetSerieFromEpisode,The method has 9 parameters. Parameters: id' uid' nocast' notag' level' all' allpic' pic' tagfilter
Long Parameter List,Shoko.Server.API.v2.Modules,Common,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v2\Modules\Common.cs,GetSerieFromAniDBID,The method has 7 parameters. Parameters: id' nocast' notag' all' allpic' pic' tagfilter
Long Parameter List,Shoko.Server.API.v2.Modules,Common,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v2\Modules\Common.cs,GetAllSeries,The method has 9 parameters. Parameters: nocast' limit' offset' notag' level' all' allpic' pic' tagfilter
Long Parameter List,Shoko.Server.API.v2.Modules,Common,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v2\Modules\Common.cs,GetSerieById,The method has 8 parameters. Parameters: series_id' nocast' notag' level' all' allpic' pic' tagfilter
Long Parameter List,Shoko.Server.API.v2.Modules,Common,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v2\Modules\Common.cs,Search,The method has 14 parameters. Parameters: query' limit' limit_tag' offset' tagSearch' uid' nocast' notag' level' all' fuzzy' allpic' pic' tagfilter
Long Parameter List,Shoko.Server.API.v2.Modules,Common,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v2\Modules\Common.cs,StartsWith,The method has 10 parameters. Parameters: query' limit' uid' nocast' notag' level' all' allpic' pic' tagfilter
Long Parameter List,Shoko.Server.API.v2.Modules,Common,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v2\Modules\Common.cs,GetAllFilters,The method has 8 parameters. Parameters: uid' nocast' notag' level' all' allpic' pic' tagfilter
Long Parameter List,Shoko.Server.API.v2.Modules,Common,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v2\Modules\Common.cs,GetFilter,The method has 9 parameters. Parameters: id' uid' nocast' notag' level' all' allpic' pic' tagfilter
Long Parameter List,Shoko.Server.API.v2.Modules,Common,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v2\Modules\Common.cs,GetAllGroups,The method has 8 parameters. Parameters: uid' nocast' notag' level' all' allpics' pic' tagfilter
Long Parameter List,Shoko.Server.API.v2.Modules,Common,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v2\Modules\Common.cs,GetGroup,The method has 10 parameters. Parameters: id' uid' nocast' notag' level' all' filterid' allpics' pic' tagfilter
Long Parameter List,Shoko.Server.API.v2.Modules,Common,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v2\Modules\Common.cs,SearchGroupName,The method has 12 parameters. Parameters: query' limit' offset' uid' nocast' notag' level' all' fuzzy' allpic' pic' tagfilter
Long Parameter List,Shoko.Server.API.v3,SeriesController,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v3\Controllers\SeriesController.cs,CheckTitlesFuzzy,The method has 6 parameters. Parameters: search' languages' a' query' distLevenshtein' limit
Long Parameter List,Shoko.Server.Databases,SQLite,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Databases\SQLite.cs,DropColumns,The method has 5 parameters. Parameters: db' tableName' colsToRemove' createcommand' indexcommands
Long Parameter List,Shoko.Server.FileHelper,FileHashHelper,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\FileHelper\FileHashHelper.cs,GetHashInfo,The method has 6 parameters. Parameters: fileName' forceRefresh' hashProgress' getCRC32' getMD5' getSHA1
Long Parameter List,Shoko.Server.FileHelper,Hasher,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\FileHelper\Hasher.cs,CalculateHashes_callback_dll,The method has 6 parameters. Parameters: szFileName' hash' lpHashProgressFunc' getCRC32' getMD5' getSHA1
Long Parameter List,Shoko.Server.FileHelper,Hasher,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\FileHelper\Hasher.cs,CalculateHashes_dll,The method has 6 parameters. Parameters: strFileName' hash' HashProgress' getCRC32' getMD5' getSHA1
Long Parameter List,Shoko.Server.FileHelper,Hasher,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\FileHelper\Hasher.cs,CalculateHashes,The method has 5 parameters. Parameters: strPath' onHashProgress' getCRC32' getMD5' getSHA1
Long Parameter List,Shoko.Server.FileHelper,Hasher,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\FileHelper\Hasher.cs,CalculateHashes_here,The method has 5 parameters. Parameters: strPath' onHashProgress' getCRC32' getMD5' getSHA1
Long Parameter List,Shoko.Server.FileHelper,MD4Managed,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\FileHelper\MD4Managed.cs,FF,The method has 6 parameters. Parameters: a' b' c' d' x' s
Long Parameter List,Shoko.Server.FileHelper,MD4Managed,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\FileHelper\MD4Managed.cs,GG,The method has 6 parameters. Parameters: a' b' c' d' x' s
Long Parameter List,Shoko.Server.FileHelper,MD4Managed,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\FileHelper\MD4Managed.cs,HH,The method has 6 parameters. Parameters: a' b' c' d' x' s
Long Parameter List,Shoko.Server.Models,SVR_AniDB_Anime,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Models\SVR_AniDB_Anime.cs,GetRelatedAnimeRecursive,The method has 5 parameters. Parameters: session' animeID' relList' relListIDs' searchedIDs
Long Parameter List,Shoko.Server.Models,SVR_AniDB_Anime,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Models\SVR_AniDB_Anime.cs,PopulateAndSaveFromHTTP,The method has 13 parameters. Parameters: session' animeInfo' eps' titles' cats' tags' chars' resources' rels' sims' recs' downloadRelations' relDepth
Long Parameter List,Shoko.Server.Models,SVR_AniDB_Anime,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Models\SVR_AniDB_Anime.cs,GenerateContract,The method has 6 parameters. Parameters: titles' defaultImages' characters' movDbFanart' tvDbFanart' tvDbBanners
Long Parameter List,Shoko.Server.Models,SVR_AnimeEpisode,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Models\SVR_AnimeEpisode.cs,ToggleWatchedStatus,The method has 5 parameters. Parameters: watched' updateOnline' watchedDate' userID' syncTrakt
Long Parameter List,Shoko.Server.Models,SVR_AnimeEpisode,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Models\SVR_AnimeEpisode.cs,ToggleWatchedStatus,The method has 6 parameters. Parameters: watched' updateOnline' watchedDate' updateStats' userID' syncTrakt
Long Parameter List,Shoko.Server.Models,SVR_AnimeGroup,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Models\SVR_AnimeGroup.cs,BatchUpdateStats,The method has 5 parameters. Parameters: animeGroups' watchedStats' missingEpsStats' createdGroupUsers' updatedGroupUsers
Long Parameter List,Shoko.Server.Models,SVR_VideoLocal,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Models\SVR_VideoLocal.cs,ToggleWatchedStatus,The method has 7 parameters. Parameters: watched' updateOnline' watchedDate' updateStats' userID' syncTrakt' updateWatchedDate
Long Parameter List,Shoko.Server.Plex,PlexHelper,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Plex\PlexHelper.cs,RequestAsync,The method has 6 parameters. Parameters: url' method' headers' content' xml' configureRequest
Long Parameter List,Shoko.Server.Providers.TraktTV.Contracts,TraktV2ScrobbleEpisode,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Providers\TraktTV\Contracts\TraktV2ScrobbleEpisode.cs,Init,The method has 5 parameters. Parameters: progressVal' traktId' slugId' season' episodeNumber
Long Parameter List,Shoko.Server.Renamer,LegacyRenamer,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Renamer\LegacyRenamer.cs,ProcessNumericalOperators,The method has 6 parameters. Parameters: test' notCondition' greaterThan' greaterThanEqual' lessThan' lessThanEqual
Long Parameter List,Shoko.Server.Renamer,LegacyRenamer,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Renamer\LegacyRenamer.cs,EvaluateTestI,The method has 5 parameters. Parameters: test' vid' aniFile' episodes' anime
Long Parameter List,Shoko.Server.Renamer,LegacyRenamer,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Renamer\LegacyRenamer.cs,PerformActionOnFileName,The method has 6 parameters. Parameters: newFileName' action' vid' aniFile' episodes' anime
Long Parameter List,Shoko.Server.Renamer,LegacyRenamer,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Renamer\LegacyRenamer.cs,PerformActionOnFileNameADD,The method has 6 parameters. Parameters: newFileName' action' vid' aniFile' episodes' anime
Long Parameter List,Shoko.Server.Renamer,LegacyRenamer,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Renamer\LegacyRenamer.cs,EvaluateTest,The method has 5 parameters. Parameters: line' vid' aniFile' episodes' anime
Long Parameter List,Shoko.Server.Renamer,LegacyRenamer,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Renamer\LegacyRenamer.cs,EvaluateTest,The method has 6 parameters. Parameters: testChar' testCondition' vid' aniFile' episodes' anime
Long Parameter List,Shoko.Server.Repositories.Cached,AnimeSeriesRepository,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Repositories\Cached\AnimeSeriesRepository.cs,Save,The method has 5 parameters. Parameters: obj' updateGroups' onlyupdatestats' skipgroupfilters' alsoupdateepisodes
Long Parameter List,Shoko.Server.Repositories.Direct,CrossRef_AniDB_TraktV2Repository,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Repositories\Direct\CrossRef_AniDB_TraktV2Repository.cs,GetByTraktID,The method has 7 parameters. Parameters: session' id' season' episodeNumber' animeID' aniEpType' aniEpisodeNumber
Long Parameter List,Shoko.Server.Repositories.Direct,CrossRef_AniDB_TraktV2Repository,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Repositories\Direct\CrossRef_AniDB_TraktV2Repository.cs,GetByTraktID,The method has 6 parameters. Parameters: id' season' episodeNumber' animeID' aniEpType' aniEpisodeNumber
Long Parameter List,Shoko.Server.PlexAndKodi,HttpExtensions,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\PlexAndKodi\HttpExtensions.cs,ServerUrl,The method has 5 parameters. Parameters: prov' port' path' externalip' forcescheme
Long Parameter List,Shoko.Server.PlexAndKodi,IProvider,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\PlexAndKodi\IProvider.cs,NewMediaContainer,The method has 5 parameters. Parameters: type' title' allowsync' nocache' info
Long Parameter List,Shoko.Server.PlexAndKodi,CommonImplementation,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\PlexAndKodi\CommonImplementation.cs,GetMetadata,The method has 7 parameters. Parameters: prov' UserId' type' Id' historyinfo' nocast' filter
Long Parameter List,Shoko.Server.PlexAndKodi,CommonImplementation,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\PlexAndKodi\CommonImplementation.cs,Search,The method has 6 parameters. Parameters: prov' UserId' lim' query' searchTag' nocast
Long Parameter List,Shoko.Server.PlexAndKodi,CommonImplementation,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\PlexAndKodi\CommonImplementation.cs,GetItemsFromGroup,The method has 6 parameters. Parameters: prov' userid' GroupId' info' nocast' filterID
Long Parameter List,Shoko.Server.PlexAndKodi,CommonImplementation,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\PlexAndKodi\CommonImplementation.cs,VoteAnime,The method has 5 parameters. Parameters: prov' userid' objid' vvalue' vt
Long Parameter List,Shoko.Server.PlexAndKodi,CommonImplementation,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\PlexAndKodi\CommonImplementation.cs,TraktScrobble,The method has 5 parameters. Parameters: prov' animeId' typeTrakt' progressTrakt' status
Long Parameter List,Shoko.Server.PlexAndKodi,CommonImplementation,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\PlexAndKodi\CommonImplementation.cs,GetItemsFromSerie,The method has 5 parameters. Parameters: prov' userid' SerieId' info' nocast
Long Parameter List,Shoko.Server.PlexAndKodi,CommonImplementation,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\PlexAndKodi\CommonImplementation.cs,GetGroupsOrSubFiltersFromFilter,The method has 5 parameters. Parameters: prov' userid' GroupFilterId' info' nocast
Long Parameter List,Shoko.Server.PlexAndKodi,Extensions,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\PlexAndKodi\Extensions.cs,ConstructSearchUrl,The method has 5 parameters. Parameters: prov' userid' limit' query' searchTag
Long Parameter List,Shoko.Server.PlexAndKodi,Extensions,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\PlexAndKodi\Extensions.cs,Add,The method has 6 parameters. Parameters: l' prov' m' info' noimage' noart
Long Parameter List,Shoko.Server.PlexAndKodi,Extensions,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\PlexAndKodi\Extensions.cs,EppAdd,The method has 5 parameters. Parameters: l' prov' m' info' noimage
Long Parameter List,Shoko.Server.PlexAndKodi,Extensions,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\PlexAndKodi\Extensions.cs,EppAdd,The method has 5 parameters. Parameters: l' prov' m' info' noimage
Long Parameter List,Shoko.Server.PlexAndKodi,Extensions,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\PlexAndKodi\Extensions.cs,Add,The method has 5 parameters. Parameters: l' prov' m' info' noimage
Long Parameter List,Shoko.Server.PlexAndKodi,Helper,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\PlexAndKodi\Helper.cs,ConstructVideoLocalStream,The method has 5 parameters. Parameters: prov' userid' vid' name' autowatch
Long Parameter List,Shoko.Server.PlexAndKodi,Helper,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\PlexAndKodi\Helper.cs,MayReplaceVideo,The method has 6 parameters. Parameters: v1' ser' cserie' userid' all' serie
Long Parameter List,Shoko.Server.PlexAndKodi,Helper,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\PlexAndKodi\Helper.cs,GenerateFromSeries,The method has 5 parameters. Parameters: cserie' ser' anidb' userid' session
Long Parameter List,Shoko.Server.PlexAndKodi,Helper,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\PlexAndKodi\Helper.cs,FillSerie,The method has 6 parameters. Parameters: p' aser' eps' anidb' ser' userid
Long Parameter List,Shoko.Server.PlexAndKodi.Plex,PlexProvider,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\PlexAndKodi\Plex\PlexProvider.cs,NewMediaContainer,The method has 5 parameters. Parameters: type' title' allowsync' nocache' info
Long Parameter List,Shoko.Server.Tasks,ContractExtractor,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Tasks\ContractExtractor.cs,CreateEntryNameProjection,The method has 6 parameters. Parameters: prefix1' keyCol1' prefix2' keyCol2' prefix3' keyCol3
Long Parameter List,Shoko.Server.LZ4,CompressionHelper,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\CompressionHelper.cs,Encode,The method has 6 parameters. Parameters: input' inputOffset' inputLength' output' outputOffset' outputLength
Long Parameter List,Shoko.Server.LZ4,CompressionHelper,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\CompressionHelper.cs,Decode,The method has 7 parameters. Parameters: input' inputOffset' inputLength' output' outputOffset' outputLength' knowouputlength
Long Parameter List,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,CheckArguments,The method has 6 parameters. Parameters: input' inputOffset' inputLength' output' outputOffset' outputLength
Long Parameter List,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,BlockCopy,The method has 5 parameters. Parameters: src' src_0' dst' dst_0' len
Long Parameter List,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,WildCopy,The method has 5 parameters. Parameters: src' src_0' dst' dst_0' dst_end
Long Parameter List,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,Encode32,The method has 6 parameters. Parameters: input' inputOffset' inputLength' output' outputOffset' outputLength
Long Parameter List,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,Encode64,The method has 6 parameters. Parameters: input' inputOffset' inputLength' output' outputOffset' outputLength
Long Parameter List,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,Decode32,The method has 7 parameters. Parameters: input' inputOffset' inputLength' output' outputOffset' outputLength' knownOutputLength
Long Parameter List,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,Decode64,The method has 7 parameters. Parameters: input' inputOffset' inputLength' output' outputOffset' outputLength' knownOutputLength
Long Parameter List,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4HC_Create,The method has 6 parameters. Parameters: src' src_0' src_len' dst' dst_0' dst_len
Long Parameter List,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_compressHC_32,The method has 6 parameters. Parameters: input' inputOffset' inputLength' output' outputOffset' outputLength
Long Parameter List,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,Encode32HC,The method has 6 parameters. Parameters: input' inputOffset' inputLength' output' outputOffset' outputLength
Long Parameter List,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_compressHC_64,The method has 6 parameters. Parameters: input' inputOffset' inputLength' output' outputOffset' outputLength
Long Parameter List,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,Encode64HC,The method has 6 parameters. Parameters: input' inputOffset' inputLength' output' outputOffset' outputLength
Long Parameter List,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_compressCtx_safe32,The method has 7 parameters. Parameters: hash_table' src' dst' src_0' dst_0' src_len' dst_maxlen
Long Parameter List,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_compress64kCtx_safe32,The method has 7 parameters. Parameters: hash_table' src' dst' src_0' dst_0' src_len' dst_maxlen
Long Parameter List,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_uncompress_safe32,The method has 5 parameters. Parameters: src' dst' src_0' dst_0' dst_len
Long Parameter List,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_uncompress_unknownOutputSize_safe32,The method has 6 parameters. Parameters: src' dst' src_0' dst_0' src_len' dst_maxlen
Long Parameter List,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4HC_InsertAndGetWiderMatch_32,The method has 6 parameters. Parameters: ctx' src_p' startLimit' longest' matchpos' startpos
Long Parameter List,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_encodeSequence_32,The method has 7 parameters. Parameters: ctx' src_p' dst_p' src_anchor' matchLength' src_ref' dst_end
Long Parameter List,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_compressCtx_safe64,The method has 7 parameters. Parameters: hash_table' src' dst' src_0' dst_0' src_len' dst_maxlen
Long Parameter List,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_compress64kCtx_safe64,The method has 7 parameters. Parameters: hash_table' src' dst' src_0' dst_0' src_len' dst_maxlen
Long Parameter List,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_uncompress_safe64,The method has 5 parameters. Parameters: src' dst' src_0' dst_0' dst_len
Long Parameter List,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_uncompress_unknownOutputSize_safe64,The method has 6 parameters. Parameters: src' dst' src_0' dst_0' src_len' dst_maxlen
Long Parameter List,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4HC_InsertAndGetWiderMatch_64,The method has 6 parameters. Parameters: ctx' src_p' startLimit' longest' matchpos' startpos
Long Parameter List,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_encodeSequence_64,The method has 6 parameters. Parameters: ctx' src_p' dst_p' src_anchor' matchLength' src_ref
Long Parameter List,Shoko.Server.PlexAndKodi.Kodi,KodiProvider,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\PlexAndKodi\Kodi\KodiProvider.cs,NewMediaContainer,The method has 5 parameters. Parameters: type' title' allowsync' nocache' info
Long Parameter List,Shoko.Server.Utilities,SeriesSearch,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utilities\SeriesSearch.cs,Search,The method has 5 parameters. Parameters: userID' query' limit' flags' tagFilter
Long Parameter List,Shoko.Server.Utilities.MediaInfoLib,MediaInfoDLLInternal,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utilities\MediaInfoLib\MediaInfoDLLInternal.cs,MediaInfo_GetI,The method has 5 parameters. Parameters: Handle' StreamKind' StreamNumber' Parameter' KindOfInfo
Long Parameter List,Shoko.Server.Utilities.MediaInfoLib,MediaInfoDLLInternal,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utilities\MediaInfoLib\MediaInfoDLLInternal.cs,MediaInfoA_GetI,The method has 5 parameters. Parameters: Handle' StreamKind' StreamNumber' Parameter' KindOfInfo
Long Parameter List,Shoko.Server.Utilities.MediaInfoLib,MediaInfoDLLInternal,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utilities\MediaInfoLib\MediaInfoDLLInternal.cs,MediaInfo_Get,The method has 6 parameters. Parameters: Handle' StreamKind' StreamNumber' Parameter' KindOfInfo' KindOfSearch
Long Parameter List,Shoko.Server.Utilities.MediaInfoLib,MediaInfoDLLInternal,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utilities\MediaInfoLib\MediaInfoDLLInternal.cs,MediaInfoA_Get,The method has 6 parameters. Parameters: Handle' StreamKind' StreamNumber' Parameter' KindOfInfo' KindOfSearch
Long Parameter List,Shoko.Server.Utilities.MediaInfoLib,MediaInfoDLLInternal,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utilities\MediaInfoLib\MediaInfoDLLInternal.cs,Get,The method has 5 parameters. Parameters: StreamKind' StreamNumber' Parameter' KindOfInfo' KindOfSearch
Long Parameter List,Shoko.Server.Utilities.MediaInfoLib,MediaInfoParserInternal,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utilities\MediaInfoLib\MediaInfoParserInternal.cs,FindInBuffer,The method has 6 parameters. Parameters: atom' start' max' buffer' pos' posmax
Long Parameter List,Shoko.Server.Providers.Azure,AzureWebAPI,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Providers\Azure\AzureWebAPI.cs,Delete_CrossRefAniDBTvDB,The method has 6 parameters. Parameters: animeID' aniDBStartEpisodeType' aniDBStartEpisodeNumber' tvDBID' tvDBSeasonNumber' tvDBStartEpisodeNumber
Long Parameter List,Shoko.Server.Providers.Azure,AzureWebAPI,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Providers\Azure\AzureWebAPI.cs,Delete_CrossRefAniDBTrakt,The method has 6 parameters. Parameters: animeID' aniDBStartEpisodeType' aniDBStartEpisodeNumber' traktID' traktSeasonNumber' traktStartEpisodeNumber
Long Parameter List,Shoko.Server.Providers.TraktTV,TraktTVHelper,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Providers\TraktTV\TraktTVHelper.cs,SendData,The method has 5 parameters. Parameters: uri' json' verb' headers' webResponse
Long Parameter List,Shoko.Server.Providers.TraktTV,TraktTVHelper,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Providers\TraktTV\TraktTVHelper.cs,LinkAniDBTrakt,The method has 7 parameters. Parameters: animeID' aniEpType' aniEpNumber' traktID' seasonNumber' traktEpNumber' excludeFromWebCache
Long Parameter List,Shoko.Server.Providers.TraktTV,TraktTVHelper,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Providers\TraktTV\TraktTVHelper.cs,LinkAniDBTrakt,The method has 8 parameters. Parameters: session' animeID' aniEpType' aniEpNumber' traktID' seasonNumber' traktEpNumber' excludeFromWebCache
Long Parameter List,Shoko.Server.Providers.TraktTV,TraktTVHelper,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Providers\TraktTV\TraktTVHelper.cs,RemoveLinkAniDBTrakt,The method has 6 parameters. Parameters: animeID' aniEpType' aniEpNumber' traktID' seasonNumber' traktEpNumber
Long Parameter List,Shoko.Server.Providers.TraktTV,TraktTVHelper,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Providers\TraktTV\TraktTVHelper.cs,GetTraktEpisodeIdV2,The method has 5 parameters. Parameters: anime' ep' traktID' season' epNumber
Long Parameter List,Shoko.Server.Providers.TraktTV,TraktTVHelper,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Providers\TraktTV\TraktTVHelper.cs,GetTraktEpisodeIdV2,The method has 5 parameters. Parameters: traktSummary' ep' traktID' season' epNumber
Long Parameter List,Shoko.Server.Providers.TraktTV,TraktTVHelper,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Providers\TraktTV\TraktTVHelper.cs,SyncEpisodeToTrakt,The method has 5 parameters. Parameters: syncType' slug' season' epNumber' epDate
Long Parameter List,Shoko.Server.Providers.TraktTV,TraktTVHelper,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Providers\TraktTV\TraktTVHelper.cs,ReconSyncTraktEpisode,The method has 6 parameters. Parameters: ser' ep' traktUsers' collected' watched' sendNow
Long Parameter List,Shoko.Server.Providers.TraktTV,EpisodeSyncDetails,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Providers\TraktTV\TraktTVHelper.cs,EpisodeSyncDetails,The method has 5 parameters. Parameters: syncType' slug' season' epNumber' epDate
Long Identifier,Shoko.Server,ServerInfo,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\UI\ServerInfo.cs,,The length of the parameter waitingOnResponseAniDBUDPString is 31.
Long Identifier,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,,The length of the parameter NOTCOMPRESSIBLE_DETECTIONLEVEL is 30.
Long Statement,Shoko.Server,AniDBHelper,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDBHelper.cs,GetMyListFileStatus,The length of the statement  "                var vids = aniFile.EpisodeIDs.SelectMany(a => RepoFactory.VideoLocal.GetByAniDBEpisodeID(a)).Where(a => a != null).ToList(); " is 124.
Long Statement,Shoko.Server,AniDBHelper,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDBHelper.cs,GetAnimeInfoHTTP,The length of the statement  "                return SaveResultsForAnimeXML(session' animeID' downloadRelations || ServerSettings.Instance.AutoGroupSeries' true' getAnimeCmd' relDepth); " is 139.
Long Statement,Shoko.Server,AniDBHelper,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDBHelper.cs,SaveResultsForAnimeXML,The length of the statement  "                getAnimeCmd.Characters' getAnimeCmd.Resources' getAnimeCmd.Relations' getAnimeCmd.SimilarAnime' getAnimeCmd.Recommendations' " is 124.
Long Statement,Shoko.Server,AniDBHelper,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDBHelper.cs,ValidAniDBCredentials,The length of the statement  "                //OnAniDBStatusEvent(new AniDBStatusEventArgs(enHelperActivityType.OtherError' "ERROR: Please enter valid AniDB credentials via Configuration first")); " is 151.
Long Statement,Shoko.Server,AniDBHelper,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDBHelper.cs,BindToLocalPort,The length of the statement  "            // Dont send Expect 100 requests. These requests arnt always supported by remote internet devices' in which case can cause failure. " is 131.
Long Statement,Shoko.Server,ShokoServiceImplementation,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v1\Implementations\ShokoServiceImplementation\ShokoServiceImplementation_Entities.cs,GetContinueWatchingFilter,The length of the statement  "                IEnumerable<CL_AnimeGroup_User> comboGroups = gf.GroupsIds[userID].Select(a => RepoFactory.AnimeGroup.GetByID(a)).Where(a => a != null).Select(a => a.GetUserContract(userID)); " is 175.
Long Statement,Shoko.Server,ShokoServiceImplementation,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v1\Implementations\ShokoServiceImplementation\ShokoServiceImplementation_Entities.cs,GetAnimeGroupsForFilter,The length of the statement  "                                ng.SeriesForNameOverride = RepoFactory.AnimeSeries.GetByGroupID(ng.AnimeGroupID).FirstOrDefault(a => a.AnimeSeriesID == cag.DefaultAnimeSeriesID.Value)?.GetUserContract(userID); " is 177.
Long Statement,Shoko.Server,ShokoServiceImplementation,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v1\Implementations\ShokoServiceImplementation\ShokoServiceImplementation_Entities.cs,GetAnimeGroupsForFilter,The length of the statement  "                                ng.SeriesForNameOverride = RepoFactory.AnimeSeries.GetByGroupID(ng.AnimeGroupID).FirstOrDefault()?.GetUserContract(userID); " is 123.
Long Statement,Shoko.Server,ShokoServiceImplementation,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v1\Implementations\ShokoServiceImplementation\ShokoServiceImplementation_Entities.cs,SaveServerSettings,The length of the statement  "                if (ushort.TryParse(contractIn.AniDB_ClientPort' out ushort newAniDB_ClientPort) && newAniDB_ClientPort != ServerSettings.Instance.AniDb.ClientPort) " is 148.
Long Statement,Shoko.Server,ShokoServiceImplementation,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v1\Implementations\ShokoServiceImplementation\ShokoServiceImplementation_Entities.cs,SaveServerSettings,The length of the statement  "                if (ushort.TryParse(contractIn.AniDB_ServerPort' out ushort newAniDB_ServerPort) && newAniDB_ServerPort != ServerSettings.Instance.AniDb.ServerPort) " is 148.
Long Statement,Shoko.Server,ShokoServiceImplementation,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v1\Implementations\ShokoServiceImplementation\ShokoServiceImplementation_Entities.cs,SaveServerSettings,The length of the statement  "                    ServerSettings.Instance.FileQualityFilterPreferences = JsonConvert.DeserializeObject<FileQualityPreferences>(contractIn.FileQualityFilterPreferences); " is 150.
Long Statement,Shoko.Server,ShokoServiceImplementation,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v1\Implementations\ShokoServiceImplementation\ShokoServiceImplementation_Entities.cs,LinkAniDBTvDB,The length of the statement  "                // we don't need to proactively remove the link here anymore' as all links are removed when it is not marked as additive " is 120.
Long Statement,Shoko.Server,ShokoServiceImplementation,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v1\Implementations\ShokoServiceImplementation\ShokoServiceImplementation_Entities.cs,LinkTvDBUsingWebCacheLinks,The length of the statement  "                // we don't need to proactively remove the link here anymore' as all links are removed when it is not marked as additive " is 120.
Long Statement,Shoko.Server,ShokoServiceImplementation,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v1\Implementations\ShokoServiceImplementation\ShokoServiceImplementation_Entities.cs,RenameFilePreview,The length of the statement  "                    ret.NewFileName = RenameFileHelper.GetRenamer(Shoko.Models.Constants.Renamer.TempFileName)?.GetFileName(vid.GetBestVideoLocalPlace()); " is 134.
Long Statement,Shoko.Server,ShokoServiceImplementation,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v1\Implementations\ShokoServiceImplementation\ShokoServiceImplementation_Entities.cs,OnlineAnimeTitleSearch,The length of the statement  "                    List<AniDBRaw_AnimeTitle_Anime> titles = AniDB_TitleHelper.Instance.SearchTitle(System.Web.HttpUtility.UrlDecode(titleQuery)); " is 126.
Long Statement,Shoko.Server,ShokoServiceImplementation,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v1\Implementations\ShokoServiceImplementation\ShokoServiceImplementation_Entities.cs,GetMissingEpisodes,The length of the statement  "                            $"{gvq.GroupNameShort} - {gvq.Resolution}/{gvq.VideoSource}/{gvq.VideoBitDepth}bit ({gvq.NormalEpisodeNumberSummary})"); " is 120.
Long Statement,Shoko.Server,ShokoServiceImplementation,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v1\Implementations\ShokoServiceImplementation\ShokoServiceImplementation_Entities.cs,GetGroupVideoQualitySummary,The length of the statement  "                List<SVR_AnimeEpisode> eps = videoLocals.Select(a => a?.GetAnimeEpisodes().FirstOrDefault()).Where(a => a != null).ToList(); " is 124.
Long Statement,Shoko.Server,TvDBLinkingHelper,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Providers\TvDB\TvDBLinkingHelper.cs,GetTvDBEpisodeMatches,The length of the statement  "            logger.Debug("Matching Anime: "+(anime?.PreferredTitle ?? "EMPTY")+" TvID: "+tvdbID+" Type: "+(anime?.AnimeType.ToString() ?? "None")); " is 135.
Long Statement,Shoko.Server,TvDBLinkingHelper,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Providers\TvDB\TvDBLinkingHelper.cs,RemoveDefaultLinks,The length of the statement  "                    new_xrefs.Add((episode.AnimeID' episode.EpisodeType' episode.EpisodeNumber' xref.TvDBID' tvep.SeasonNumber' tvep.EpisodeNumber)); " is 129.
Long Statement,Shoko.Server,RenameFileHelper,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Renamer\RenameFileHelper.cs,InitialiseRenamers,The length of the statement  "                        logger.Warn($"[RENAMER] Warning Duplicate renamer key \"{key}\" of types {implementation}@{implementation.Assembly.Location} and {ScriptImplementations[key]}@{ScriptImplementations[key].Assembly.Location}"); " is 207.
Long Statement,Shoko.Server,ShokoServer,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\ShokoServer.cs,StartUpServer,The length of the statement  "            // First check if we have a settings.json in case migration had issues as otherwise might clear out existing old configurations " is 127.
Long Statement,Shoko.Server,ShokoServer,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\ShokoServer.cs,StartUpServer,The length of the statement  "                        "No Filesystem Handlers were loaded. THIS IS A PROBLEM. The most likely cause is permissions issues in the installation directory."); " is 133.
Long Statement,Shoko.Server,ShokoServer,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\ShokoServer.cs,StartUpServer,The length of the statement  "                logger.Error("There was an error loading any Filesystem handlers. CloudFileSystem is missing' has bad permissions' or has a fatal error in its loading sequence (not likely)."); " is 176.
Long Statement,Shoko.Server,ShokoServer,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\ShokoServer.cs,UninstallJMMServer,The length of the statement  "            if (Utils.IsRunningOnMono()) return; //This will be handled by the OS or user' as we cannot reliably learn what package management system they use. " is 147.
Long Statement,Shoko.Server,ShokoServer,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\ShokoServer.cs,UninstallJMMServer,The length of the statement  "                        @"HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\Microsoft\Windows\CurrentVersion\Uninstall\{898530ED-CFC7-4744-B2B8-A8D98A2FA06C}_is1"' " is 129.
Long Statement,Shoko.Server,ShokoServer,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\ShokoServer.cs,WorkerFileEvents_DoWork,The length of the statement  "                            // The reason for this is that when a directory is moved into a source directory (from the same drive) we will only recieve " is 123.
Long Statement,Shoko.Server,ShokoServer,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\ShokoServer.cs,WorkerFileEvents_DoWork,The length of the statement  "                            // a create event will fire for the directory and each file contained within it (As they are all treated as separate operations) " is 128.
Long Statement,Shoko.Server,ShokoServer,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\ShokoServer.cs,WorkerSetupDB_DoWork,The length of the statement  "                // TODO make this a command request. Some people apparently have thousands (a different problem' but locks startup for hours) " is 125.
Long Statement,Shoko.Server,ShokoServer,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\ShokoServer.cs,StartWebHost,The length of the statement  "            webHost = new WebHostBuilder().UseKestrel(options => { options.ListenAnyIP(ServerSettings.Instance.ServerPort); }).UseStartup<Startup>() " is 136.
Long Statement,Shoko.Server,ShokoServer,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\ShokoServer.cs,ProcessFileTest,The length of the statement  "            //CommandRequest_HashFile cr_hashfile = new CommandRequest_HashFile(@"M:\[ Anime Test ]\[HorribleSubs] Dragon Crisis! - 02 [720p].mkv"' false); " is 143.
Long Statement,Shoko.Server,ShokoServer,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\ShokoServer.cs,ProcessFileTest,The length of the statement  "            //CommandRequest_ProcessFile cr_procfile = new CommandRequest_ProcessFile(@"M:\[ Anime Test ]\[Doki] Saki - 01 (720x480 h264 DVD AAC) [DC73ACB9].mkv"); " is 151.
Long Statement,Shoko.Server,MigrationDirectory,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\MigrationDirectory.cs,SafeMigrate,The length of the statement  "                Utils.ShowErrorMessage("Migration ERROR"'$"We are unable to move the directory '{From}' to '{To}'' please move the directory with explorer"); " is 141.
Long Statement,Shoko.Server,ShokoServiceImplementationMetro,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v1\Implementations\ShokoServiceImplementationMetro.cs,GetServerStatus,The length of the statement  "                contract.BanReason = (ShokoService.AnidbProcessor.IsHttpBanned ? ShokoService.AnidbProcessor.HttpBanTime : ShokoService.AnidbProcessor.UdpBanTime).ToString(); " is 158.
Long Statement,Shoko.Server,Utils,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utils.cs,GrantAccess,The length of the statement  "                            logger.Error("Unable to set Everyone permissions to '" + path + "' directory' or subdirectories' please chkdsk or set everyone permissions at hand."); " is 150.
Long Statement,Shoko.Server,Utils,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utils.cs,Tail,The length of the statement  "                1; //The index of the last line read from the buffer.  Everything > this index was read earlier than everything <= this indes " is 125.
Long Statement,AniDBAPI,APIUtils,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\APIUtils.cs,DownloadWebBinary,The length of the statement  "                // this is true for instance for EVERY thailand internet connection (also needs to be set for banners/episodethumbs and any other http request we send) " is 151.
Long Statement,AniDBAPI.Commands,AniDBCommand_AddFile,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBCommand_AddFile.cs,Process,The length of the statement  "                     * {int4 lid}|{int4 fid}|{int4 eid}|{int4 aid}|{int4 gid}|{int4 date}|{int2 state}|{int4 viewdate}|{str storage}|{str source}|{str other}|{int2 filestate} " is 153.
Long Statement,AniDBAPI.Commands,AniDBCommand_GetCreatorInfo,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBCommand_GetCreatorInfo.cs,Process,The length of the statement  "                    // 245 CREATOR 200|?????|Suwabe Jun`ichi|1|17015.jpg||http://www.haikyo.or.jp/PROFILE/man/11470.html|Junichi_Suwabe|%E8%AB%8F%E8%A8%AA%E9%83%A8%E9%A0%86%E4%B8%80|1236300570 " is 172.
Long Statement,AniDBAPI.Commands,AniDBCommand_GetFileInfo,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBCommand_GetFileInfo.cs,Init,The length of the statement  "            // 220 FILE572794|6107|99294|2723|c646d82a184a33f4e4f98af39f29a044|8452c4bf|high|HDTV|Vorbis (Ogg Vorbis)|148|H264/AVC|1773|1280x720|mkv|1470||1239494400|2|The Day It Began|Hajimari no Hi|712|14|Eclipse Productions|Eclipse " is 222.
Long Statement,AniDBAPI.Commands,AniDBCommand_GetFileInfo,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBCommand_GetFileInfo.cs,Init,The length of the statement  "                $"&fmask={fByte1.ToString("X").PadLeft(2' '0')}{fByte2.ToString("X").PadLeft(2' '0')}{fByte3.ToString("X").PadLeft(2' '0')}{fByte4.ToString("X").PadLeft(2' '0')}{fByte5.ToString("X").PadLeft(2' '0')}"; " is 201.
Long Statement,AniDBAPI.Commands,AniDBCommand_GetFileInfo,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBCommand_GetFileInfo.cs,Init,The length of the statement  "                $"&amask={aByte1.ToString("X").PadLeft(2' '0')}{aByte2.ToString("X").PadLeft(2' '0')}{aByte3.ToString("X").PadLeft(2' '0')}{aByte4.ToString("X").PadLeft(2' '0')}"; " is 163.
Long Statement,AniDBAPI.Commands,AniDBHTTPCommand_GetMyList,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBHTTPCommand_GetMyList.cs,WriteAnimeMyListToFile,The length of the statement  "            //string fileName = string.Format("MyList_{0}_{1}.xml"' DateTime.Now.ToString("yyyyMMdd")' DateTime.Now.ToString("HHmmss")); " is 124.
Long Statement,Shoko.Server.Commands,CommandRequest_HashFile,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Commands\Import\CommandRequest_HashFile.cs,ProcessFile_LocalInfo,The length of the statement  "                    var hashes = FileHashHelper.GetHashInfo(FileName.Replace("/"' $"{System.IO.Path.DirectorySeparatorChar}")' true' ShokoServer.OnHashProgress' " is 140.
Long Statement,Shoko.Server.Commands,CommandRequest_HashFile,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Commands\Import\CommandRequest_HashFile.cs,FillMissingHashes,The length of the statement  "                Hashes hashes = FileHashHelper.GetHashInfo(FileName.Replace("/"' $"{System.IO.Path.DirectorySeparatorChar}")' true' ShokoServer.OnHashProgress' " is 143.
Long Statement,Shoko.Server.Commands,CommandHelper,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Commands\CommandHelper.cs,LoadCommands,The length of the statement  "            CommandRequestImpls = new Dictionary<CommandRequestType' ReflectionUtils.ObjectActivator<CommandRequestImplementation>>(); " is 122.
Long Statement,Shoko.Server.Commands,CommandHelper,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Commands\CommandHelper.cs,LoadCommands,The length of the statement  "            IEnumerable<Type> types = AppDomain.CurrentDomain.GetAssemblies().SelectMany(a => a.GetTypes()).Where(a => a.GetCustomAttribute<CommandAttribute>() != null); " is 157.
Long Statement,Shoko.Server.Commands,CommandHelper,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Commands\CommandHelper.cs,LoadCommands,The length of the statement  "                    logger.Warn($"Duplicate command of type {attr}' this should never happen without a code error' please report this to the devs."); " is 129.
Long Statement,Shoko.Server.Commands,CommandRequestImplementation,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Commands\CommandRequestImplementation.cs,TryGetProperty,The length of the statement  "                //BaseConfig.MyAnimeLog.Write("Error in XMLService.TryGetProperty: {0}-{1}"' Utils.GetParentMethodName()' ex.ToString()); " is 121.
Long Statement,Shoko.Server.Commands,CommandRequest_AddFileToMyList,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Commands\AniDB\CommandRequest_AddFileToMyList.cs,ProcessCommand,The length of the statement  "                List<CrossRef_File_Episode> xrefs = vid.EpisodeCrossRefs.DistinctBy(a => Tuple.Create(a.AnimeID' a.EpisodeID)).ToList(); " is 120.
Long Statement,Shoko.Server.Commands,CommandRequest_AddFileToMyList,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Commands\AniDB\CommandRequest_AddFileToMyList.cs,ProcessCommand,The length of the statement  "                logger.Info($"Added File to MyList. File: {vid.FileName}  Manual Link: {isManualLink}  Watched Locally: {originalWatchedDate != null}  Watched AniDB: {newWatchedDate != null}  Local State: {ServerSettings.Instance.AniDb.MyList_StorageState}  AniDB State: {state}  ReadStates: {ReadStates}  ReadWatched Setting: {ServerSettings.Instance.AniDb.MyList_ReadWatched}  ReadUnwatched Setting: {ServerSettings.Instance.AniDb.MyList_ReadUnwatched}"); " is 441.
Long Statement,Shoko.Server.Commands,CommandRequest_AddFileToMyList,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Commands\AniDB\CommandRequest_AddFileToMyList.cs,ProcessCommand,The length of the statement  "                                    ShokoService.AnidbProcessor.UpdateMyListFileStatus(vid' xref.AnimeID' xref.GetEpisode().EpisodeNumber' true' originalWatchedDate); " is 130.
Long Statement,Shoko.Server.Commands,CommandRequest_GetUpdated,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Commands\AniDB\CommandRequest_GetUpdated.cs,ProcessCommand,The length of the statement  "                        $"{Utils.FormatSecondsToDisplayTime(int.Parse((webUpdateTimeNew - webUpdateTime).ToString()))} since last UPDATED command"); " is 124.
Long Statement,Shoko.Server.Commands,CommandRequest_SyncMyList,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Commands\AniDB\CommandRequest_SyncMyList.cs,ProcessCommand,The length of the statement  "                logger.Info($"Process MyList: {totalItems} Items' {missingFiles} Added' {filesToRemove.Count} Deleted' {watchedItems} Watched' {modifiedItems} Modified"); " is 154.
Long Statement,Shoko.Server.Commands,CommandRequest_TraktCollectionEpisode,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Commands\Trakt\CommandRequest_TraktCollectionEpisode.cs,ProcessCommand,The length of the statement  "                if (!ServerSettings.Instance.TraktTv.Enabled || string.IsNullOrEmpty(ServerSettings.Instance.TraktTv.AuthToken)) return; " is 120.
Long Statement,Shoko.Server.Commands,CommandRequest_TraktSearchAnime,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Commands\Trakt\CommandRequest_TraktSearchAnime.cs,ProcessCommand,The length of the statement  "                        if (!string.Equals(title.TitleType' Shoko.Models.Constants.AnimeTitleType.Official' StringComparison.InvariantCultureIgnoreCase)) " is 129.
Long Statement,Shoko.Server.Commands,CommandRequest_TraktHistoryEpisode,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Commands\Trakt\CommandRequest_TraktHistoryEpisode.cs,ProcessCommand,The length of the statement  "                if (!ServerSettings.Instance.TraktTv.Enabled || string.IsNullOrEmpty(ServerSettings.Instance.TraktTv.AuthToken)) return; " is 120.
Long Statement,Shoko.Server.Commands,CommandRequest_TraktSyncCollection,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Commands\Trakt\CommandRequest_TraktSyncCollection.cs,ProcessCommand,The length of the statement  "                if (!ServerSettings.Instance.TraktTv.Enabled || string.IsNullOrEmpty(ServerSettings.Instance.TraktTv.AuthToken)) return; " is 120.
Long Statement,Shoko.Server.Commands,CommandRequest_TraktSyncCollectionSeries,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Commands\Trakt\CommandRequest_TraktSyncCollectionSeries.cs,ProcessCommand,The length of the statement  "                if (!ServerSettings.Instance.TraktTv.Enabled || string.IsNullOrEmpty(ServerSettings.Instance.TraktTv.AuthToken)) return; " is 120.
Long Statement,Shoko.Server.Commands,CommandRequest_TvDBSearchAnime,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Commands\TvDB\CommandRequest_TvDBSearchAnime.cs,ProcessCommand,The length of the statement  "                    if (!title.TitleType.Equals(Shoko.Models.Constants.AnimeTitleType.Official' StringComparison.InvariantCultureIgnoreCase)) " is 121.
Long Statement,Shoko.Server.API.v2.Models.common,Serie,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v2\Models\common\Serie.cs,GenerateFromBookmark,The length of the statement  "                Commands.CommandRequest_GetAnimeHTTP cr_anime = new Commands.CommandRequest_GetAnimeHTTP(bookmark.AnimeID' true' false); " is 120.
Long Statement,Shoko.Server.API.v2.Models.common,Serie,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v2\Models\common\Serie.cs,GenerateFromAnimeSeries,The length of the statement  "                    a.AniDB_Episode != null && (a.AniDB_Episode.EpisodeType == (int) EpisodeType.Episode && a.AniDB_Episode.EpisodeNumber == 1)) " is 124.
Long Statement,Shoko.Server.API.v2.Modules,Common,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v2\Modules\Common.cs,GetSerie,The length of the statement  "            return GetSerieById(para.id' para.nocast != 0' para.notag != 0' para.level' para.all != 0' para.allpics != 0' para.pic' para.tagfilter); " is 136.
Long Statement,Shoko.Server.API.v2.Modules,Common,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v2\Modules\Common.cs,SeriesToday,The length of the statement  "                para.notag == 1' para.level' para.all == 1' para.allpics == 1' para.pic' para.tagfilter)).OrderBy(a => a.name).ToList(); " is 120.
Long Statement,Shoko.Server.API.v2.Modules,Common,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v2\Modules\Common.cs,SearchForSerie,The length of the statement  "                return Search(HttpUtility.UrlDecode(para.query)' para.limit' para.limit_tag' (int) para.offset' para.tags' user.JMMUserID' " is 122.
Long Statement,Shoko.Server.API.v2.Modules,Common,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v2\Modules\Common.cs,SearchForSerie,The length of the statement  "                    para.nocast != 0' para.notag != 0' para.level' para.all != 0' para.fuzzy != 0' para.allpics != 0' para.pic' para.tagfilter); " is 124.
Long Statement,Shoko.Server.API.v2.Modules,Common,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v2\Modules\Common.cs,GetSeriesFromAniDBID,The length of the statement  "                return GetSerieFromAniDBID(para.id' para.nocast != 0' para.notag != 0' para.all != 0' para.allpics != 0' para.pic' para.tagfilter); " is 131.
Long Statement,Shoko.Server.API.v2.Modules,Common,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v2\Modules\Common.cs,GetSerieFromEpisode,The length of the statement  "                return Serie.GenerateFromAnimeSeries(HttpContext' aep.GetAnimeSeries()' uid' nocast' notag' level' all' allpic' pic' tagfilter); " is 128.
Long Statement,Shoko.Server.API.v2.Modules,Common,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v2\Modules\Common.cs,GetFilters,The length of the statement  "                return GetAllFilters(user.JMMUserID' para.nocast != 0' para.notag != 0' para.level' para.all != 0' para.allpics != 0' para.pic' para.tagfilter); " is 144.
Long Statement,Shoko.Server.API.v2.Modules,Common,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v2\Modules\Common.cs,GetFilters,The length of the statement  "            return GetFilter(para.id' user.JMMUserID' para.nocast != 0' para.notag != 0' para.level' para.all != 0' para.allpics != 0' para.pic' para.tagfilter); " is 149.
Long Statement,Shoko.Server.API.v2.Modules,Common,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v2\Modules\Common.cs,GetFilter,The length of the statement  "            Filter filter = Filter.GenerateFromGroupFilter(HttpContext' gf' uid' nocast' notag' level' all' allpic' pic' tagfilter); " is 120.
Long Statement,Shoko.Server.API.v2.Modules,Common,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v2\Modules\Common.cs,GetGroups,The length of the statement  "                return GetAllGroups(user.JMMUserID' para.nocast != 0' para.notag != 0' para.level' para.all != 0' para.allpics != 0' para.pic' para.tagfilter); " is 143.
Long Statement,Shoko.Server.API.v2.Modules,Common,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v2\Modules\Common.cs,GetGroup,The length of the statement  "                Group gr = Group.GenerateFromAnimeGroup(HttpContext' ag' uid' nocast' notag' level' all' filterid' allpics' pic' tagfilter); " is 124.
Long Statement,Shoko.Server.API.v2.Modules,AniEpSummary,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v2\Modules\Core.cs,Equals,The length of the statement  "                return AniDBEpisodeType == other.AniDBEpisodeType && AniDBEpisodeNumber == other.AniDBEpisodeNumber && string.Equals(AniDBEpisodeName' other.AniDBEpisodeName); " is 159.
Long Statement,Shoko.Server.API.v2.Modules,TvDBEpSummary,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v2\Modules\Core.cs,Equals,The length of the statement  "                return TvDBSeason == other.TvDBSeason && TvDBEpisodeNumber == other.TvDBEpisodeNumber && string.Equals(TvDBEpisodeName' other.TvDBEpisodeName); " is 143.
Long Statement,Shoko.Server.API.v2.Modules,Image,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v2\Modules\Image.cs,GetThumb,The length of the statement  "            if (!float.TryParse(ratio' NumberStyles.AllowDecimalPoint' CultureInfo.CreateSpecificCulture("en-EN")' out float newratio)) " is 123.
Long Statement,Shoko.Server.API.v2.Modules,Init,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v2\Modules\Init.cs,GetAniDB,The length of the statement  "                    "The ports are not set as integers. Set them and try again.\n\rThe default values are:\n\rAniDB Client Port: 4556\n\rAniDB AVDump Client Port: 4557"); " is 150.
Long Statement,Shoko.Server.API.v2.Modules,PlexWebhook,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v2\Modules\PlexWebhook.cs,TraktScrobble,The length of the statement  "            float per = 100 * (metadata.ViewOffset / (float)vl.Duration); //this will be nice if plex would ever give me the duration' so I don't have to guess it. " is 151.
Long Statement,Shoko.Server.API.v2.Modules,PlexWebhook,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v2\Modules\PlexWebhook.cs,TraktScrobble,The length of the statement  "            ScrobblePlayingType scrobbleType = episode.PlexContract.IsMovie ? ScrobblePlayingType.movie : ScrobblePlayingType.episode; " is 122.
Long Statement,Shoko.Server.API.v2.Modules,PlexWebhook,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v2\Modules\PlexWebhook.cs,Scrobble,The length of the statement  "                logger.Info($"Unable to determine who \"{data.Account.Title}\" is in Shoko' make sure this is set under user settings in Desktop"); " is 131.
Long Statement,Shoko.Server.API.v2.Modules,PlexWebhook,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v2\Modules\PlexWebhook.cs,GetEpisode,The length of the statement  "            logger.Info($"Unable to work out the metadata for {metadata.Guid}' this might be a clash of multipl episodes linked' but no tvdb link."); " is 137.
Long Statement,Shoko.Server.API.v2.Modules,PlexBinder,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v2\Modules\PlexWebhook.cs,BindModelAsync,The length of the statement  "                var result = JsonConvert.DeserializeObject(valueAsString' bindingContext.ModelType' new JsonSerializerSettings() { ContractResolver = new CamelCasePropertyNamesContractResolver() }); " is 182.
Long Statement,Shoko.Server.API.v2.Modules,Webui,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v2\Modules\Webui.cs,WebUIGetUrlAndUpdate,The length of the statement  "                System.Net.ServicePointManager.SecurityProtocol = System.Net.SecurityProtocolType.Tls11 | System.Net.SecurityProtocolType.Tls12; " is 128.
Long Statement,Shoko.Server.API.v3,FullFilter,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v3\Models\Shoko\Filter.cs,ToServerModel,The length of the statement  "                    FilterType = Directory ? (int) (GroupFilterType.UserDefined | GroupFilterType.Directory) : (int) GroupFilterType.UserDefined' " is 125.
Long Statement,Shoko.Server.Commands.Plex,CommandRequest_PlexSyncWatched,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Commands\Plex\CommandRequest_PlexSyncWatched.cs,ProcessCommand,The length of the statement  "            logger.Info($"Syncing watched videos for: {_jmmuser.Username}' if nothing happens make sure you have your libraries configured in Shoko."); " is 139.
Long Statement,Shoko.Server.Commands.Plex,CommandRequest_PlexSyncWatched,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Commands\Plex\CommandRequest_PlexSyncWatched.cs,ProcessCommand,The length of the statement  "                        if (isWatched && !alreadyWatched) video.ToggleWatchedStatus(true' true' lastWatched' true' _jmmuser.JMMUserID' true' true); " is 123.
Long Statement,Shoko.Server.Extensions,ModelDatabase,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Extensions\ModelDatabase.cs,CreateAnimeEpisode,The length of the statement  "            // We might have removed our AnimeEpisode_User records when wiping out AnimeEpisodes' recreate them if there's watched files " is 124.
Long Statement,Shoko.Server.Databases,DatabaseFixes,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Databases\DatabaseFixes.cs,MigrateTvDBLinks_v2_to_V3,The length of the statement  "                        @"SELECT DISTINCT AnimeID' AniDBStartEpisodeType' AniDBStartEpisodeNumber' TvDBID' TvDBSeasonNumber' TvDBStartEpisodeNumber FROM CrossRef_AniDB_TvDBV2 WHERE TvDBSeasonNumber = 0") " is 179.
Long Statement,Shoko.Server.Databases,DatabaseFixes,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Databases\DatabaseFixes.cs,MigrateTvDBLinks_v2_to_V3,The length of the statement  "                        @"SELECT DISTINCT AniDB_Anime.AnimeID' AniDBStartEpisodeType' AniDBStartEpisodeNumber' TvDBID' TvDBSeasonNumber' TvDBStartEpisodeNumber FROM CrossRef_AniDB_TvDBV2 INNER JOIN AniDB_Anime on AniDB_Anime.AnimeID = CrossRef_AniDB_TvDBV2.AnimeID WHERE AnimeType = 1 OR AnimeType = 3") " is 279.
Long Statement,Shoko.Server.Databases,DatabaseFixes,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Databases\DatabaseFixes.cs,FixAniDB_EpisodesWithMissingTitles,The length of the statement  "            logger.Info($"There are {episodes.Count} episodes in {animeIDs.Count} anime with missing titles. Attempting to fill them from HTTP cache"); " is 139.
Long Statement,Shoko.Server.Databases,DatabaseFixes,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Databases\DatabaseFixes.cs,FixAniDB_EpisodesWithMissingTitles,The length of the statement  "                        logger.Info($"Anime {animeID} is missing it's AniDB_Anime record. That's a problem. Try importing a file for the anime."); " is 122.
Long Statement,Shoko.Server.Databases,DatabaseFixes,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Databases\DatabaseFixes.cs,PopulateAniDBEpisodeDescriptions,The length of the statement  "                        $"There was an error Populating AniDB Info for AniDB_Anime {animeID}' Update the Series' AniDB Info for a full stack: {e.Message}"); " is 132.
Long Statement,Shoko.Server.Databases,DatabaseFixes,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Databases\DatabaseFixes.cs,PopulateResourceLinks,The length of the statement  "                        $"There was an error Populating Resource Links for AniDB_Anime {anime.AnimeID}' Update the Series' AniDB Info for a full stack: {e.Message}"); " is 142.
Long Statement,Shoko.Server.Databases,MySQL,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Databases\MySQL.cs,GetConnectionString,The length of the statement  "                $"Server={ServerSettings.Instance.Database.Hostname};Database={ServerSettings.Instance.Database.Schema};User ID={ServerSettings.Instance.Database.Username};Password={ServerSettings.Instance.Database.Password};Default Command Timeout=3600"; " is 239.
Long Statement,Shoko.Server.Databases,MySQL,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Databases\MySQL.cs,DatabaseAlreadyExists,The length of the statement  "                    $"Server={ServerSettings.Instance.Database.Hostname};User ID={ServerSettings.Instance.Database.Username};Password={ServerSettings.Instance.Database.Password}"; " is 159.
Long Statement,Shoko.Server.Databases,MySQL,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Databases\MySQL.cs,CreateDatabase,The length of the statement  "                    $"Server={ServerSettings.Instance.Database.Hostname};User ID={ServerSettings.Instance.Database.Username};Password={ServerSettings.Instance.Database.Password}"; " is 159.
Long Statement,Shoko.Server.Databases,MySQL,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Databases\MySQL.cs,CreateAndUpdateSchema,The length of the statement  "                    $"select count(*) from information_schema.tables where table_schema='{ServerSettings.Instance.Database.Schema}' and table_name = 'Versions'"); " is 142.
Long Statement,Shoko.Server.Databases,MySQL,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Databases\MySQL.cs,CreateAndUpdateSchema,The length of the statement  "                        $"select count(*) from information_schema.tables where table_schema='{ServerSettings.Instance.Database.Schema}' and table_name = 'versions'"); " is 142.
Long Statement,Shoko.Server.Databases,MySQL,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Databases\MySQL.cs,CreateAndUpdateSchema,The length of the statement  "                    $"select count(*) from information_schema.columns where table_schema='{ServerSettings.Instance.Database.Schema}' and table_name = 'Versions' and column_name = 'VersionRevision'"); " is 179.
Long Statement,Shoko.Server.Databases,MySQL,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Databases\MySQL.cs,MySQLFixUTF8,The length of the statement  "            using (MySqlConnection conn = new MySqlConnection($"Server={ServerSettings.Instance.Database.Hostname};User ID={ServerSettings.Instance.Database.Username};Password={ServerSettings.Instance.Database.Password};database={ServerSettings.Instance.Database.Schema}")) " is 261.
Long Statement,Shoko.Server.Databases,MySQL,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Databases\MySQL.cs,MySQLFixUTF8,The length of the statement  "                                alter = $"ALTER TABLE `{row[1]}` MODIFY `{row[2]}` {row[3]}({row[4]}) CHARACTER SET 'utf8mb4' COLLATE 'utf8mb4_unicode_ci'"; " is 124.
Long Statement,Shoko.Server.Databases,SQLite,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Databases\SQLite.cs,DropAniDB_EpisodeTitles,The length of the statement  "                    "create table AniDB_Episode ( AniDB_EpisodeID integer primary key autoincrement' EpisodeID int not null' AnimeID int not null' LengthSeconds int not null' Rating text not null' Votes text not null' EpisodeNumber int not null' EpisodeType int not null' AirDate int not null' DateTimeUpdated datetime not null' Description text default '' not null )"; " is 349.
Long Statement,Shoko.Server.Databases,SQLite,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Databases\SQLite.cs,RenameCrossRef_AniDB_TvDB_Episode,The length of the statement  "                    "CREATE TABLE CrossRef_AniDB_TvDB_Episode_Override( CrossRef_AniDB_TvDB_Episode_OverrideID INTEGER PRIMARY KEY AUTOINCREMENT' AniDBEpisodeID int NOT NULL' TvDBEpisodeID int NOT NULL );"' " is 186.
Long Statement,Shoko.Server.Databases,SQLite,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Databases\SQLite.cs,RenameCrossRef_AniDB_TvDB_Episode,The length of the statement  "                    "CREATE UNIQUE INDEX UIX_AniDB_TvDB_Episode_Override_AniDBEpisodeID_TvDBEpisodeID ON CrossRef_AniDB_TvDB_Episode_Override(AniDBEpisodeID'TvDBEpisodeID);"' " is 154.
Long Statement,Shoko.Server.Databases,SQLite,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Databases\SQLite.cs,RenameCrossRef_AniDB_TvDB_Episode,The length of the statement  "                    "INSERT INTO CrossRef_AniDB_TvDB_Episode_Override ( AniDBEpisodeID' TvDBEpisodeID ) SELECT AniDBEpisodeID' TvDBEpisodeID FROM CrossRef_AniDB_TvDB_Episode; "' " is 157.
Long Statement,Shoko.Server.Databases,SQLite,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Databases\SQLite.cs,DropAniDB_AnimeAllCategories,The length of the statement  "                    "CREATE TABLE AniDB_Anime ( AniDB_AnimeID INTEGER PRIMARY KEY AUTOINCREMENT' AnimeID int NOT NULL' EpisodeCount int NOT NULL' AirDate timestamp NULL' EndDate timestamp NULL' URL text NULL' Picname text NULL' BeginYear int NOT NULL' EndYear int NOT NULL' AnimeType int NOT NULL' MainTitle text NOT NULL' AllTitles text NOT NULL' AllTags text NOT NULL' Description text NOT NULL' EpisodeCountNormal int NOT NULL' EpisodeCountSpecial int NOT NULL' Rating int NOT NULL' VoteCount int NOT NULL' TempRating int NOT NULL' TempVoteCount int NOT NULL' AvgReviewRating int NOT NULL' ReviewCount int NOT NULL' DateTimeUpdated timestamp NOT NULL' DateTimeDescUpdated timestamp NOT NULL' ImageEnabled int NOT NULL' AwardList text NOT NULL' Restricted int NOT NULL' AnimePlanetID int NULL' ANNID int NULL' AllCinemaID int NULL' AnimeNfo int NULL' LatestEpisodeNumber int NULL' DisableExternalLinksFlag int NULL );"; " is 901.
Long Statement,Shoko.Server.Databases,SQLite,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Databases\SQLite.cs,DropVideolocalColumns,The length of the statement  "                    "CREATE TABLE VideoLocal ( VideoLocalID INTEGER PRIMARY KEY AUTOINCREMENT' Hash text NOT NULL' CRC32 text NULL' MD5 text NULL' SHA1 text NULL' HashSource int NOT NULL' FileSize INTEGER NOT NULL' IsIgnored int NOT NULL' DateTimeUpdated timestamp NOT NULL' FileName text NOT NULL DEFAULT ''' VideoCodec text NOT NULL DEFAULT ''' VideoBitrate text NOT NULL DEFAULT '''VideoBitDepth text NOT NULL DEFAULT '''VideoFrameRate text NOT NULL DEFAULT '''VideoResolution text NOT NULL DEFAULT '''AudioCodec text NOT NULL DEFAULT '''AudioBitrate text NOT NULL DEFAULT '''Duration INTEGER NOT NULL DEFAULT 0'DateTimeCreated timestamp NULL' IsVariation int NULL'MediaVersion int NOT NULL DEFAULT 0'MediaBlob BLOB NULL'MediaSize int NOT NULL DEFAULT 0 );"; " is 741.
Long Statement,Shoko.Server.Databases,SQLite,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Databases\SQLite.cs,DropTvDB_EpisodeFirstAiredColumn,The length of the statement  "                    "CREATE TABLE TvDB_Episode ( TvDB_EpisodeID INTEGER PRIMARY KEY AUTOINCREMENT' Id int NOT NULL' SeriesID int NOT NULL' SeasonID int NOT NULL' SeasonNumber int NOT NULL' EpisodeNumber int NOT NULL' EpisodeName text' Overview text' Filename text' EpImgFlag int NOT NULL' AbsoluteNumber int' AirsAfterSeason int' AirsBeforeEpisode int' AirsBeforeSeason int' AirDate timestamp' Rating int)"; " is 387.
Long Statement,Shoko.Server.Databases,SQLite,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Databases\SQLite.cs,AlterVideoLocalUser,The length of the statement  "                    "CREATE TABLE VideoLocal_User ( VideoLocal_UserID INTEGER PRIMARY KEY AUTOINCREMENT' JMMUserID int NOT NULL' VideoLocalID int NOT NULL' WatchedDate timestamp NULL' ResumePosition bigint NOT NULL DEFAULT 0); "; " is 209.
Long Statement,Shoko.Server.Databases,SQLServer,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Databases\SQLServer.cs,GetConnectionString,The length of the statement  "                $"Server={ServerSettings.Instance.Database.Hostname};Database={ServerSettings.Instance.Database.Schema};UID={ServerSettings.Instance.Database.Username};PWD={ServerSettings.Instance.Database.Password};"; " is 202.
Long Statement,Shoko.Server.Databases,SQLServer,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Databases\SQLServer.cs,DatabaseAlreadyExists,The length of the statement  "                    $"Server={ServerSettings.Instance.Database.Hostname};User ID={ServerSettings.Instance.Database.Username};Password={ServerSettings.Instance.Database.Password};database={"master"}") " is 179.
Long Statement,Shoko.Server.Databases,SQLServer,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Databases\SQLServer.cs,CreateAndUpdateSchema,The length of the statement  "                                   "SELECT count(*) FROM INFORMATION_SCHEMA.COLUMNS WHERE [TABLE_NAME] = 'Versions' and [COLUMN_NAME]='VersionRevision'") == " is 121.
Long Statement,Shoko.Server.FileHelper,Hasher,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\FileHelper\Hasher.cs,CalculateHashes,The length of the statement  "                    if (!Utils.IsLinux) filename = strPath.StartsWith(@"\\") ? strPath : @"\\?\" + strPath; //only prepend non-UNC paths (or paths that have this already) " is 150.
Long Statement,Shoko.Server.Models,SVR_VideoLocal_Place,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Models\SVR_VideoLocal_Place.cs,RenameFile,The length of the statement  "            var renamer = string.IsNullOrEmpty(scriptName) ? RenameFileHelper.GetRenamer() : RenameFileHelper.GetRenamer(scriptName); " is 121.
Long Statement,Shoko.Server.Models,SVR_VideoLocal_Place,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Models\SVR_VideoLocal_Place.cs,RefreshMediaInfo,The length of the statement  "                logger.Error($"Unable to read the media information of file {FullServerPath ?? VideoLocal_Place_ID.ToString()} ERROR: {e}"); " is 124.
Long Statement,Shoko.Server.Models,SVR_VideoLocal_Place,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Models\SVR_VideoLocal_Place.cs,MoveFileIfRequired,The length of the statement  "                (var destImpl' string newFolderPath) = RenameFileHelper.GetRenamerWithFallback()?.GetDestinationFolder(this) ?? (null' null); " is 125.
Long Statement,Shoko.Server.Models,SVR_AniDB_Anime,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Models\SVR_AniDB_Anime.cs,PopulateAndSaveFromHTTP,The length of the statement  "            logger.Trace($"PopulateAndSaveFromHTTP: for {animeInfo.AnimeID} - {animeInfo.MainTitle} @ Depth: {relDepth}/{ServerSettings.Instance.AniDb.MaxRelationDepth}"); " is 159.
Long Statement,Shoko.Server.Models,SVR_AniDB_Anime,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Models\SVR_AniDB_Anime.cs,CreateEpisodes,The length of the statement  "            Dictionary<int'AniDB_Episode> currentAniDBEpisodes=RepoFactory.AniDB_Episode.GetByAnimeID(AnimeID).ToDictionary(a=>a.EpisodeID'a=>a); " is 133.
Long Statement,Shoko.Server.Models,SVR_AniDB_Anime,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Models\SVR_AniDB_Anime.cs,CreateEpisodes,The length of the statement  "            Dictionary<int' SVR_AnimeEpisode> currentAnimeEpisodes = currentAniDBEpisodes.Select(a => RepoFactory.AnimeEpisode.GetByAniDBEpisodeID(a.Key)).Where(a=>a!=null).ToDictionary(a => a.AniDB_EpisodeID' a => a); " is 206.
Long Statement,Shoko.Server.Models,SVR_AniDB_Anime,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Models\SVR_AniDB_Anime.cs,CreateEpisodes,The length of the statement  "            List<AniDB_Episode_Title> oldtitles = currentAniDBEpisodes.Select(a => RepoFactory.AniDB_Episode_Title.GetByEpisodeID(a.Key)).Where(a=>a!=null).SelectMany(a => a).ToList(); " is 172.
Long Statement,Shoko.Server.Models,SVR_AniDB_Anime,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Models\SVR_AniDB_Anime.cs,CreateRelations,The length of the statement  "                    //CommandRequest_GetAnimeHTTP cr_anime = new CommandRequest_GetAnimeHTTP(rawrel.RelatedAnimeID' false' downloadRelations); " is 122.
Long Statement,Shoko.Server.Models,SVR_AnimeSeries,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Models\SVR_AnimeSeries.cs,GetConditionTypesChanged,The length of the statement  "            if (oldcontract?.AniDBAnime?.Stat_AllSeasons == null || !oldcontract.AniDBAnime.Stat_AllSeasons.SetEquals(newcontract.AniDBAnime.Stat_AllSeasons)) " is 146.
Long Statement,Shoko.Server.Models,SVR_GroupFilter,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Models\SVR_GroupFilter.cs,CalculateGroupsAndSeries,The length of the statement  "                        .Error("While calculating group filters' an AnimeSeries without a group was found: " + (ser?.GetSeriesName() ?? id.ToString())); " is 128.
Long Statement,Shoko.Server.Models,SVR_GroupFilter,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Models\SVR_GroupFilter.cs,EvaluateContract,The length of the statement  "                    gf.SeriesIds[user] = gf.GroupsIds[user].SelectMany(a => RepoFactory.AnimeGroup.GetByID(a)?.GetAllSeries()?.Select(b => b?.AnimeSeriesID ?? -1)) " is 143.
Long Statement,Shoko.Server.Models,SVR_GroupFilter,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Models\SVR_GroupFilter.cs,EvaluateConditions,The length of the statement  "                    if ((gfc.GetConditionOperatorEnum() == GroupFilterOperator.Include || gfc.GetConditionOperatorEnum() == GroupFilterOperator.In) && " is 130.
Long Statement,Shoko.Server.Models,SVR_GroupFilter,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Models\SVR_GroupFilter.cs,EvaluateConditions,The length of the statement  "                    if ((gfc.GetConditionOperatorEnum() == GroupFilterOperator.Exclude || gfc.GetConditionOperatorEnum() == GroupFilterOperator.NotIn) && " is 133.
Long Statement,Shoko.Server.Providers.AniDB,AniDBConnectionHandler,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Providers\AniDB\AniDBConnectionHandler.cs,BindToLocalPort,The length of the statement  "            // Dont send Expect 100 requests. These requests aren't always supported by remote internet devices' in which case can cause failure. " is 133.
Long Statement,Shoko.Server.Providers.AniDB.MyList.Commands,AniDBMyList_RequestAddFile,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Providers\AniDB\UDP\MyList\Requests\AniDBMyList_RequestAddFile.cs,ParseResponse,The length of the statement  "                     * {int4 lid}|{int4 fid}|{int4 eid}|{int4 aid}|{int4 gid}|{int4 date}|{int2 state}|{int4 viewdate}|{str storage}|{str source}|{str other}|{int2 filestate} " is 153.
Long Statement,Shoko.Server.Providers.TvDB,TvDBApiHelper,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Providers\TvDB\TvDBApiHelper.cs,SearchSeriesAsync,The length of the statement  "                    $"TvDB returned an error code: {exception.StatusCode}\n        {exception.Message}\n        when searching for {criteria}"); " is 124.
Long Statement,Shoko.Server.Providers.TvDB,TvDBApiHelper,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Providers\TvDB\TvDBApiHelper.cs,GetEpisodesOnlineAsync,The length of the statement  "                logger.Trace("First Page: First: " + (firstResponse?.Links?.First?.ToString() ?? "NULL") + "Next: " + (firstResponse?.Links?.Next?.ToString() ?? "NULL") + "Previous: " + (firstResponse?.Links?.Previous?.ToString() ?? "NULL") + "Last: " + (firstResponse?.Links?.Last?.ToString() ?? "NULL")); " is 290.
Long Statement,Shoko.Server.Providers.TvDB,TvDBApiHelper,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Providers\TvDB\TvDBApiHelper.cs,GetEpisodesOnlineAsync,The length of the statement  "                logger.Trace("Last Page: First: " + (lastresponse?.Links?.First?.ToString() ?? "NULL") + "Next: " + (lastresponse?.Links?.Next?.ToString() ?? "NULL") + "Previous: " + (lastresponse?.Links?.Previous?.ToString() ?? "NULL") + "Last: " + (lastresponse?.Links?.Last?.ToString() ?? "NULL")); " is 285.
Long Statement,Shoko.Server.Providers.TvDB,TvDBRateLimiter,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Providers\TvDB\TvDBRateLimiter.cs,EnsureRate,The length of the statement  "                logger.Trace($"TvDBRateLimiter#{InstanceID}: Time since last request is {delay} ms' throttling for {currentDelay} ms."); " is 120.
Long Statement,Shoko.Server.Renamer,LegacyRenamer,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Renamer\LegacyRenamer.cs,EvaluateTestD,The length of the statement  "                return notCondition ? aniFile.Languages.All(lan => !lan.LanguageName.Trim().Equals(test.Trim()' StringComparison.InvariantCultureIgnoreCase)) : aniFile.Languages.Any(lan => lan.LanguageName.Trim().Equals(test.Trim()' StringComparison.InvariantCultureIgnoreCase)); " is 263.
Long Statement,Shoko.Server.Repositories.Cached,CrossRef_AniDB_TvDBRepository,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Repositories\Cached\CrossRef_AniDB_TvDBRepository.cs,GetV2LinksFromAnime,The length of the statement  "            List<(AniDB_Episode AniDB' TvDB_Episode TvDB)> eplinks = ls.ToLookup(a=> RepoFactory.AniDB_Episode.GetByEpisodeID(a.anidb_episode)'b=>RepoFactory.TvDB_Episode.GetByTvDBID(b.tvdb_episode)) " is 187.
Long Statement,Shoko.Server.Repositories.Cached,CrossRef_AniDB_TvDB_EpisodeRepository,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Repositories\Cached\CrossRef_AniDB_TvDB_EpisodeRepository.cs,DeleteAllUnverifiedLinksForAnime,The length of the statement  "WHERE CrossRef_AniDB_TvDB_Episode.MatchRating != :rating AND CrossRef_AniDB_TvDB_Episode.CrossRef_AniDB_TvDB_EpisodeID IN ( " is 123.
Long Statement,Shoko.Server.Repositories.Cached,AnimeEpisodeRepository,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Repositories\Cached\AnimeEpisodeRepository.cs,GetByAniDBEpisodeID,The length of the statement  "                //AniDB_Episode may not unique for the series' Example with Toriko Episode 1 and One Piece 492' same AniDBEpisodeID in two shows. " is 129.
Long Statement,Shoko.Server.Repositories.Cached,AnimeEpisodeRepository,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Repositories\Cached\AnimeEpisodeRepository.cs,GetEpisodesWithMultipleFiles,The length of the statement  "                    @"SELECT ani.EpisodeID FROM VideoLocal AS vl JOIN CrossRef_File_Episode ani ON vl.Hash = ani.Hash WHERE vl.IsVariation = 0 AND vl.Hash != '' GROUP BY ani.EpisodeID HAVING COUNT(ani.EpisodeID) > 1"; " is 197.
Long Statement,Shoko.Server.Repositories.Cached,AnimeEpisodeRepository,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Repositories\Cached\AnimeEpisodeRepository.cs,GetEpisodesWithMultipleFiles,The length of the statement  "                    @"SELECT ani.EpisodeID FROM VideoLocal AS vl JOIN CrossRef_File_Episode ani ON vl.Hash = ani.Hash WHERE vl.Hash != '' GROUP BY ani.EpisodeID HAVING COUNT(ani.EpisodeID) > 1"; " is 174.
Long Statement,Shoko.Server.Repositories.Cached,AnimeEpisodeRepository,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Repositories\Cached\AnimeEpisodeRepository.cs,GetAllWatchedEpisodes,The length of the statement  "            List<SVR_AnimeEpisode_User> eps = RepoFactory.AnimeEpisode_User.GetByUserID(userid).Where(a => a.IsWatched()).Where(a => a.WatchedDate > after_date).OrderBy(a => a.WatchedDate).ToList(); " is 186.
Long Statement,Shoko.Server.Repositories,AniDB_AnimeRepository,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Repositories\Cached\AniDB_AnimeRepository.cs,GetDefaultImagesByAnime,The length of the statement  "                    WHERE defImg.AnimeID IN (:animeIds) AND defImg.ImageParentType IN (:tvdbBannerType' :tvdbCoverType' :tvdbFanartType' :movdbPosterType' :movdbFanartType)") " is 154.
Long Statement,Shoko.Server.Repositories,AniDB_Anime_TagRepository,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Repositories\Cached\AniDB_Anime_TagRepository.cs,GetAnimeWithTag,The length of the statement  "            return GetAll().AsParallel().Where(a => RepoFactory.AniDB_Tag.GetByName(tagName).Select(b => b.TagID).Contains(a.TagID)) " is 120.
Long Statement,Shoko.Server.Settings,ServerSettings,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Settings\ServerSettings.cs,LoadLegacySettings,The length of the statement  "                FileQualityFilterPreferences = JsonConvert.DeserializeObject<FileQualityPreferences>(Legacy.FileQualityFilterPreferences)' " is 122.
Long Statement,Shoko.Server.Settings,ServerSettings,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Settings\ServerSettings.cs,SaveSettings,The length of the statement  "            File.WriteAllText(path' JsonConvert.SerializeObject(this' Formatting.Indented' new StringEnumConverter { AllowIntegerValues = true })); " is 135.
Long Statement,Shoko.Server.Settings.Migration,ServerSettings_Legacy,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Settings\Migration\ServerSettings_Legacy.cs,LoadSettingsFromFile,The length of the statement  "                            @"HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\Microsoft\Windows\CurrentVersion\Uninstall\{898530ED-CFC7-4744-B2B8-A8D98A2FA06C}_is1"' " is 129.
Long Statement,Shoko.Server.Settings.Migration,ServerSettings_Legacy,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Settings\Migration\ServerSettings_Legacy.cs,LoadSettingsFromFile,The length of the statement  "                                    appSettings["FileQualityFilterPreferences"] = JsonConvert.SerializeObject(FileQualityFilter.Settings' Formatting.None' new StringEnumConverter()); " is 146.
Long Statement,Shoko.Server.Settings.Migration,ServerSettings_Legacy,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Settings\Migration\ServerSettings_Legacy.cs,LoadSettingsFromFile,The length of the statement  "                                appSettings["FileQualityFilterPreferences"] = JsonConvert.SerializeObject(FileQualityFilter.Settings' Formatting.None' new StringEnumConverter()); " is 146.
Long Statement,Shoko.Server.Settings.Migration,ServerSettings_Legacy,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Settings\Migration\ServerSettings_Legacy.cs,LoadSettingsFromFile,The length of the statement  "                                appSettings["FileQualityFilterPreferences"] = JsonConvert.SerializeObject(FileQualityFilter.Settings' Formatting.None' new StringEnumConverter()); " is 146.
Long Statement,Shoko.Server.Settings.Migration,ServerSettings_Legacy,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Settings\Migration\ServerSettings_Legacy.cs,LoadSettingsFromFile,The length of the statement  "                            appSettings["FileQualityFilterPreferences"] = JsonConvert.SerializeObject(FileQualityFilter.Settings' Formatting.None' new StringEnumConverter()); " is 146.
Long Statement,Shoko.Server.Settings.Migration,ServerSettings_Legacy,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Settings\Migration\ServerSettings_Legacy.cs,LoadLegacySettingsFromFile,The length of the statement  "                        @"HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\Microsoft\Windows\CurrentVersion\Uninstall\{898530ED-CFC7-4744-B2B8-A8D98A2FA06C}_is1"' " is 129.
Long Statement,Shoko.Server.PlexAndKodi,HttpExtensions,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\PlexAndKodi\HttpExtensions.cs,GetOptions,The length of the statement  "                "accept' x-plex-token' x-plex-client-identifier' x-plex-username' x-plex-product' x-plex-device' x-plex-platform' x-plex-platform-version' x-plex-version' x-plex-device-name"); " is 176.
Long Statement,Shoko.Server.PlexAndKodi,CommonImplementation,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\PlexAndKodi\CommonImplementation.cs,Search,The length of the statement  "            //List<AniDB_Anime> animes = searchTag ? RepoFactory.AniDB_Anime.SearchByTag(query) : RepoFactory.AniDB_Anime.SearchByName(query); " is 130.
Long Statement,Shoko.Server.PlexAndKodi,Extensions,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\PlexAndKodi\Extensions.cs,ConstructFakeIosThumb,The length of the statement  "                    return Helper.ServerUrl(prov.ServicePort' prov.ServiceAddress + "/Metadata/" + userid + "/" + (int)JMMType.FakeIosThumb + "/" + r + "/0"); " is 138.
Long Statement,Shoko.Server.PlexAndKodi,Extensions,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\PlexAndKodi\Extensions.cs,ConstructFakeIosThumb,The length of the statement  "            catch { return Helper.ServerUrl(prov.ServicePort' prov.ServiceAddress + "/Metadata/" + userid + "/" + (int)JMMType.FakeIosThumb + "/" + r + "/0"); } " is 148.
Long Statement,Shoko.Server.Tasks,AutoAnimeGroupCalculator,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Tasks\AutoAnimeGroupCalculator.cs,ShouldConsiderAnimeRelation,The length of the statement  "            // Are we configured to do a fuzzy title test for this particular relation type? If not' then the relation is immediately allowed " is 129.
Long Statement,Shoko.Server.Tasks,AnimeGroupCreator,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Tasks\AnimeGroupCreator.cs,CreateTempAnimeGroup,The length of the statement  "            // We won't use AnimeGroupRepository.Save because we don't need to perform all the extra stuff since this is for temporary use only " is 131.
Long Statement,Shoko.Server.Tasks,AnimeGroupCreator,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Tasks\AnimeGroupCreator.cs,UpdateAnimeSeriesContractsAndSave,The length of the statement  "            // Update batches of AnimeSeries contracts in parallel. Each parallel branch requires it's own session since NHibernate sessions aren't thread safe. " is 148.
Long Statement,Shoko.Server.Tasks,AnimeGroupCreator,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Tasks\AnimeGroupCreator.cs,UpdateAnimeSeriesContractsAndSave,The length of the statement  "            // The reason we're doing this in parallel is because updating contacts does a reasonable amount of work (including LZ4 compression) " is 132.
Long Statement,Shoko.Server.Tasks,AnimeGroupCreator,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Tasks\AnimeGroupCreator.cs,UpdateAnimeGroupsAndTheirContracts,The length of the statement  "            // Update batches of AnimeGroup contracts in parallel. Each parallel branch requires it's own session since NHibernate sessions aren't thread safe. " is 147.
Long Statement,Shoko.Server.Tasks,AnimeGroupCreator,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Tasks\AnimeGroupCreator.cs,UpdateAnimeGroupsAndTheirContracts,The length of the statement  "            // The reason we're doing this in parallel is because updating contacts does a reasonable amount of work (including LZ4 compression) " is 132.
Long Statement,Shoko.Server.Tasks,AnimeGroupCreator,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Tasks\AnimeGroupCreator.cs,UpdateAnimeGroupsAndTheirContracts,The length of the statement  "                    // We shouldn't need to keep track of updates to AnimeGroup_Users in the below call' because they should have all been deleted' " is 127.
Long Statement,Shoko.Server.Tasks,AnimeGroupCreator,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Tasks\AnimeGroupCreator.cs,UpdateAnimeGroupsAndTheirContracts,The length of the statement  "            // NOTE: There are situations in which UpdatePlexKodiContracts will cause database database writes to occur' so we can't " is 120.
Long Statement,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_uncompress_unknownOutputSize_safe32,The length of the statement  "			if (src_p == src_end) goto _output_error; // A correctly formed null-compressed LZ4 must have at least one byte (token=0) " is 121.
Long Statement,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_uncompress_unknownOutputSize_safe32,The length of the statement  "					if (src_p + length != src_end) goto _output_error; // Error : LZ4 format requires to consume all input at this stage (no match within the last 11 bytes' and at least 8 remaining input bytes for another match+literals) " is 217.
Long Statement,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_uncompress_unknownOutputSize_safe64,The length of the statement  "			if (src_p == src_end) goto _output_error; // A correctly formed null-compressed LZ4 must have at least one byte (token=0) " is 121.
Long Statement,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_uncompress_unknownOutputSize_safe64,The length of the statement  "					if (src_p + length != src_end) goto _output_error; // Error : LZ4 format requires to consume all input at this stage (no match within the last 11 bytes' and at least 8 remaining input bytes for another match+literals) " is 217.
Long Statement,Shoko.Server.Utilities,SeriesSearch,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utilities\SeriesSearch.cs,Search,The length of the statement  "                a?.GetAnime() != null && (a.GetAnime().GetAllTags().Count==0 || !a.GetAnime().GetAllTags().FindInEnumerable(user.GetHideCategories()))); " is 136.
Long Statement,Shoko.Server.Utilities,SeriesSearch,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utilities\SeriesSearch.cs,SearchTagsEquals,The length of the statement  "            series.AddRange(customTags.Where(a => a.TagName.Equals(query' StringComparison.InvariantCultureIgnoreCase)).SelectMany(tag => " is 125.
Long Statement,Shoko.Server.Utilities,SeriesSearch,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utilities\SeriesSearch.cs,SearchTagsEquals,The length of the statement  "            series.AddRange(allTags.Where(a => a.TagName.Equals(query' StringComparison.InvariantCultureIgnoreCase)).SelectMany(tag => " is 122.
Long Statement,Shoko.Server.Utilities,SeriesSearch,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utilities\SeriesSearch.cs,SearchTitlesFuzzy,The length of the statement  "            // ToList() after the Parallel compatible operations are done to prevent an OutOfMemoryException on the ParallelEnumerable " is 122.
Long Statement,Shoko.Server.Utilities,SubStream,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utilities\SubStream.cs,Read,The length of the statement  "            _writer.WriteLine("POSITION: " + oldpos.ToString("X8") + " OFFSET: " + offset.ToString("X8") + " NeedCount: " + count.ToString("X8")); " is 134.
Long Statement,UPnP,NAT,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utilities\UPnP.cs,SOAPRequest,The length of the statement  "                         "<s:Envelope xmlns:s=\"http://schemas.xmlsoap.org/soap/envelope/\" s:encodingStyle=\"http://schemas.xmlsoap.org/soap/encoding/\">" + " is 132.
Long Statement,Shoko.Server.Providers.TraktTV,TraktTVHelper,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Providers\TraktTV\TraktTVHelper.cs,RemoveLinkAniDBTrakt,The length of the statement  "            if (ServerSettings.Instance.WebCache.Enabled && ServerSettings.Instance.TraktTv.Enabled && ServerSettings.Instance.WebCache.Trakt_Send) " is 135.
Long Statement,Shoko.Server.Providers.TraktTV,TraktTVHelper,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Providers\TraktTV\TraktTVHelper.cs,SyncCollectionToTrakt,The length of the statement  "                if (!ServerSettings.Instance.TraktTv.Enabled || string.IsNullOrEmpty(ServerSettings.Instance.TraktTv.AuthToken)) return; " is 120.
Long Statement,Shoko.Server.Providers.TraktTV,TraktTVHelper,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Providers\TraktTV\TraktTVHelper.cs,ReconSyncTraktEpisode,The length of the statement  "                logger.Trace($"Sync Check Status:  AniDB: {ser.AniDB_ID} - {ep.EpisodeTypeEnum} - {ep.AniDB_EpisodeID} - Collection: {localCollection} - Watched: {localWatched}"); " is 163.
Long Statement,Shoko.Server.Providers.TraktTV,TraktTVHelper,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Providers\TraktTV\TraktTVHelper.cs,ReconSyncTraktEpisode,The length of the statement  "                logger.Trace($"Sync Check Status:  Trakt: {traktShowID} - S:{season} - EP:{epNumber} - Collection: {onlineCollection} - Watched: {onlineWatched}"); " is 147.
Long Statement,LeanWork.IO.FileSystem,BufferingFileSystemWatcher,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utilities\LeanWork\IO\FileSystem\BufferingFileSystemWatcher.cs,BufferEvent,The length of the statement  "                var ex = new EventQueueOverflowException($"Event queue size {_fileSystemEventBuffer.BoundedCapacity} events exceeded."); " is 120.
Long Statement,LeanWork.IO.FileSystem,BufferingFileSystemWatcher,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utilities\LeanWork\IO\FileSystem\BufferingFileSystemWatcher.cs,BufferRenameEvent,The length of the statement  "                var ex = new EventQueueOverflowException($"Event queue size {_fileSystemEventBuffer.BoundedCapacity} events exceeded."); " is 120.
Complex Conditional,Shoko.Server,AniDBHelper,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDBHelper.cs,LogoutTimer_Elapsed,The conditional expression  "tsAniDBUDP.TotalSeconds >= Constants.PingFrequency &&                      tsPing.TotalSeconds >= Constants.PingFrequency &&                      !IsUdpBanned && !ExtendPauseSecs.HasValue"  is complex.
Complex Conditional,Shoko.Server,AniDBHelper,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDBHelper.cs,ValidAniDBCredentials,The conditional expression  "string.IsNullOrEmpty(userName) || string.IsNullOrEmpty(password) ||                  string.IsNullOrEmpty(serverName)                  || string.IsNullOrEmpty(serverPort) || string.IsNullOrEmpty(clientPort)"  is complex.
Complex Conditional,Shoko.Server,ShokoServiceImplementation,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v1\Implementations\ShokoServiceImplementation\ShokoServiceImplementation_Entities.cs,GetFilesByGroupAndResolution,The conditional expression  "groupMatches && sourceMatches && thisBitDepth == videoBitDepth &&                          resolution.EqualsInvariantIgnoreCase(vidResInfo)"  is complex.
Complex Conditional,Shoko.Server,FileQualityFilter,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Import\FileQualityFilter.cs,CompareChapterTo,The conditional expression  "(newAniFile?.IsChaptered == 1 || newFile.Media.Chaptered) &&                  !(oldAniFile?.IsChaptered == 1 || oldFile.Media.Chaptered)"  is complex.
Complex Conditional,Shoko.Server,FileQualityFilter,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Import\FileQualityFilter.cs,CompareChapterTo,The conditional expression  "!(newAniFile?.IsChaptered == 1 || newFile.Media.Chaptered) &&                  (oldAniFile?.IsChaptered == 1 || oldFile.Media.Chaptered)"  is complex.
Complex Conditional,Shoko.Server,FileQualityFilter,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Import\FileQualityFilter.cs,CompareVideoCodecTo,The conditional expression  "(newLocal.VideoBitDepth.Equals("8") || newLocal.VideoBitDepth.Equals("10")) &&                      (oldLocal.VideoBitDepth.Equals("8") || oldLocal.VideoBitDepth.Equals("10"))"  is complex.
Complex Conditional,Shoko.Server,FileQualityFilter,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Import\FileQualityFilter.cs,GetResolutionInternal,The conditional expression  "res != null && res.Length == 2 && res[0] == "0" && res[1] == "0""  is complex.
Complex Conditional,Shoko.Server,TvDBLinkingHelper,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Providers\TvDB\TvDBLinkingHelper.cs,GetTvDBEpisodeMatches,The conditional expression  "(anime?.AnimeType == (int) AnimeType.OVA || anime?.AnimeType == (int) AnimeType.Movie ||                   anime?.AnimeType == (int) AnimeType.TVSpecial) && aniepsNormal.Count > 0 && tvepsSpecial.Count > 0"  is complex.
Complex Conditional,Shoko.Server,TvDBLinkingHelper,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Providers\TvDB\TvDBLinkingHelper.cs,GetTvDBEpisodeMatches,The conditional expression  "(anime?.AnimeType == (int) AnimeType.OVA || anime?.AnimeType == (int) AnimeType.Movie ||                       anime?.AnimeType == (int) AnimeType.TVSpecial) && (aniepsSpecial.Count > 0)"  is complex.
Complex Conditional,Shoko.Server,TvDBLinkingHelper,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Providers\TvDB\TvDBLinkingHelper.cs,GetTvDBEpisodeMatches,The conditional expression  "(anime?.AnimeType == (int) AnimeType.OVA || anime?.AnimeType == (int) AnimeType.Movie ||                       anime?.AnimeType == (int) AnimeType.TVSpecial) && (aniepsSpecial.Count > 0)"  is complex.
Complex Conditional,Shoko.Server,TvDBLinkingHelper,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Providers\TvDB\TvDBLinkingHelper.cs,TryToMatchNormalEpisodesToTvDB,The conditional expression  "!one2one && !hasNumberedTitles && (!temp.Any() || temp.Count == tvepsNormal.Count)"  is complex.
Complex Conditional,Shoko.Server,TvDBLinkingHelper,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Providers\TvDB\TvDBLinkingHelper.cs,GetSpecialsOverridesFromLegacy,The conditional expression  "onlyLink.AniDBStartNumber == 1 &&                      onlyLink.AniDBStartType == (int) EpisodeType.Special &&                      onlyLink.TvDBSeason == 0 && onlyLink.TvDBStartNumber == 1"  is complex.
Complex Conditional,Shoko.Server,TvDBLinkingHelper,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Providers\TvDB\TvDBLinkingHelper.cs,GetSpecialsOverridesFromLegacy,The conditional expression  "onlyLink.AniDBStartNumber == 1 &&                      onlyLink.AniDBStartType == (int) EpisodeType.Episode &&                      onlyLink.TvDBSeason == 1 && onlyLink.TvDBStartNumber == 1"  is complex.
Complex Conditional,Shoko.Server,TagFilter,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utilities\TagFilter.cs,IsTagBlackListed,The conditional expression  "tag.StartsWith("plot") || tag.EndsWith(" dies") || tag.EndsWith(" end") ||                      tag.EndsWith(" ending")"  is complex.
Complex Conditional,Shoko.Server,ShokoServiceImplementationStream,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v1\Implementations\ShokoServiceImplementationStream.cs,StreamFromIFile,The conditional expression  "r.User != null && autowatch.HasValue && autowatch.Value && r.VideoLocal != null"  is complex.
Complex Conditional,AniDBAPI.Commands,AniDBUDPCommand,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBUDPCommand.cs,ProcessCommand,The conditional expression  "(commandType == enAniDBCommandType.Login) && (byReceivedAdd[0] == 0xFE) &&                          (byReceivedAdd[1] == 0xFF) &&                          (byReceivedAdd[3] == 53) && (byReceivedAdd[5] != 53) &&                          !Encoding.EncodingName.ToLower().StartsWith("unicode") && (changeencoding != null) &&                          changeencoding.EncodingName.ToLower().StartsWith("unicode")"  is complex.
Complex Conditional,AniDBAPI.Commands,AniDBUDPCommand,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBUDPCommand.cs,ProcessCommand,The conditional expression  "ResponseCode == 600 || ResponseCode == 601 || ResponseCode == 602 || ResponseCode == 604"  is complex.
Complex Conditional,Shoko.Server.Commands,CommandRequest_HashFile,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Commands\Import\CommandRequest_HashFile.cs,FileModified,The conditional expression  "lastWrite <= now && lastWrite.AddSeconds(Seconds) >= now ||                       creation <= now && creation.AddSeconds(Seconds) > now ||                       lastFileSize != size"  is complex.
Complex Conditional,Shoko.Server.Commands,CommandRequest_GetReleaseGroupStatus,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Commands\AniDB\CommandRequest_GetReleaseGroupStatus.cs,ProcessCommand,The conditional expression  "ServerSettings.Instance.AniDb.DownloadReleaseGroups && grpCol != null && grpCol.Groups != null &&                      grpCol.Groups.Count > 0"  is complex.
Complex Conditional,Shoko.Server.API.v2.Models.common,Serie,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v2\Models\common\Serie.cs,CompareTo,The conditional expression  "!string.IsNullOrEmpty(a.air) && !a.air.Equals(DateTime.MinValue.ToString("dd-MM-yyyy")) &&                  !string.IsNullOrEmpty(air) && !air.Equals(DateTime.MinValue.ToString("dd-MM-yyyy"))"  is complex.
Complex Conditional,Shoko.Server.Extensions,ModelProviders,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Extensions\ModelProviders.cs,Populate,The conditional expression  "rawSim.AnimeID <= 0 || rawSim.Approval < 0 || rawSim.SimilarAnimeID <= 0 || rawSim.Total < 0"  is complex.
Complex Conditional,Shoko.Server.Extensions,ModelProviders,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Extensions\ModelProviders.cs,Populate,The conditional expression  "rawTitle.AnimeID <= 0 || string.IsNullOrEmpty(rawTitle.Title) ||                  string.IsNullOrEmpty(rawTitle.Language) || string.IsNullOrEmpty(rawTitle.TitleType)"  is complex.
Complex Conditional,Shoko.Server.Databases,BaseDatabase<T>,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Databases\BaseDatabase.cs,ExecuteCommand,The conditional expression  "cmd.Version != 0 && cmd.Revision != 0 && AllVersions.ContainsKey(cmd.Version.ToString()) &&                  AllVersions[cmd.Version.ToString()].ContainsKey(cmd.Revision.ToString())"  is complex.
Complex Conditional,Shoko.Server.Models,SVR_AnimeEpisode,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Models\SVR_AnimeEpisode.cs,SaveWatchedStatus,The conditional expression  "epUserRecord?.WatchedDate != null && watchedDate != null &&                      epUserRecord.WatchedDate.Equals(watchedDate.Value) ||                      (epUserRecord?.WatchedDate == null && watchedDate == null)"  is complex.
Complex Conditional,Shoko.Server.Models,SVR_AnimeGroup,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Models\SVR_AnimeGroup.cs,GetConditionTypesChanged,The conditional expression  "oldcontract == null ||                  (oldcontract.MissingEpisodeCount > 0 || oldcontract.MissingEpisodeCountGroups > 0) !=                  (newcontract.MissingEpisodeCount > 0 || newcontract.MissingEpisodeCountGroups > 0)"  is complex.
Complex Conditional,Shoko.Server.Models,SVR_AnimeGroup,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Models\SVR_AnimeGroup.cs,BatchUpdateContracts,The conditional expression  "series.EndDate != null && series.EndDate.Value < now                              && series.MissingEpisodeCount == 0 && series.MissingEpisodeCountGroups == 0"  is complex.
Complex Conditional,Shoko.Server.Models,SVR_AnimeSeries,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Models\SVR_AnimeSeries.cs,GetSeriesName,The conditional expression  "tvdbs != null && tvdbs.Count > 0 && !string.IsNullOrEmpty(tvdbs[0].SeriesName) &&                          !tvdbs[0].SeriesName.ToUpper().Contains("**DUPLICATE")"  is complex.
Complex Conditional,Shoko.Server.Models,SVR_AnimeSeries,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Models\SVR_AnimeSeries.cs,GetConditionTypesChanged,The conditional expression  "oldcontract == null ||                  (oldcontract.AniDBAnime.AniDBAnime.EndDate.HasValue &&                   oldcontract.AniDBAnime.AniDBAnime.EndDate.Value < DateTime.Now &&                   !(oldcontract.MissingEpisodeCount > 0 ||                     oldcontract.MissingEpisodeCountGroups > 0)) !=                  (newcontract.AniDBAnime.AniDBAnime.EndDate.HasValue &&                   newcontract.AniDBAnime.AniDBAnime.EndDate.Value < DateTime.Now &&                   !(newcontract.MissingEpisodeCount > 0 || newcontract.MissingEpisodeCountGroups > 0))"  is complex.
Complex Conditional,Shoko.Server.Models,SVR_AnimeSeries,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Models\SVR_AnimeSeries.cs,GetConditionTypesChanged,The conditional expression  "oldcontract == null ||                  (oldcontract.MissingEpisodeCount > 0 || oldcontract.MissingEpisodeCountGroups > 0) !=                  (newcontract.MissingEpisodeCount > 0 || newcontract.MissingEpisodeCountGroups > 0)"  is complex.
Complex Conditional,Shoko.Server.Models,SVR_AnimeSeries,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Models\SVR_AnimeSeries.cs,GetConditionTypesChanged,The conditional expression  "oldcontract == null ||                  ((oldcontract.CrossRefAniDBTvDBV2 == null || oldcontract.CrossRefAniDBTvDBV2.Count == 0) !=                   (newcontract.CrossRefAniDBTvDBV2 == null || newcontract.CrossRefAniDBTvDBV2.Count == 0))"  is complex.
Complex Conditional,Shoko.Server.Models,SVR_AnimeSeries,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Models\SVR_AnimeSeries.cs,GetConditionTypesChanged,The conditional expression  "oldcontract == null ||                  ((oldcontract.CrossRefAniDBMAL == null || oldcontract.CrossRefAniDBMAL.Count == 0) !=                   (newcontract.CrossRefAniDBMAL == null || newcontract.CrossRefAniDBMAL.Count == 0))"  is complex.
Complex Conditional,Shoko.Server.Models,SVR_AnimeSeries,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Models\SVR_AnimeSeries.cs,GetConditionTypesChanged,The conditional expression  "oldcontract == null ||                  ((oldcontract.CrossRefAniDBMovieDB == null) &&                   (oldcontract.CrossRefAniDBTvDBV2 == null || oldcontract.CrossRefAniDBTvDBV2.Count == 0) !=                   ((newcontract.CrossRefAniDBMovieDB == null) &&                    (newcontract.CrossRefAniDBTvDBV2 == null || newcontract.CrossRefAniDBTvDBV2.Count == 0)))"  is complex.
Complex Conditional,Shoko.Server.Models,SVR_AnimeSeries,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Models\SVR_AnimeSeries.cs,GetConditionTypesChanged,The conditional expression  "oldcontract == null ||                  oldcontract.AniDBAnime.AniDBAnime.VoteCount != newcontract.AniDBAnime.AniDBAnime.VoteCount ||                  oldcontract.AniDBAnime.AniDBAnime.TempVoteCount != newcontract.AniDBAnime.AniDBAnime.TempVoteCount ||                  oldcontract.AniDBAnime.AniDBAnime.Rating != newcontract.AniDBAnime.AniDBAnime.Rating ||                  oldcontract.AniDBAnime.AniDBAnime.TempRating != newcontract.AniDBAnime.AniDBAnime.TempRating"  is complex.
Complex Conditional,Shoko.Server.Models,SVR_AnimeSeries,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Models\SVR_AnimeSeries.cs,GetConditionTypesChanged,The conditional expression  "oldcontract == null ||                  (oldcontract.AniDBAnime.AniDBAnime.EndDate.HasValue &&                   oldcontract.AniDBAnime.AniDBAnime.EndDate.Value < DateTime.Now) !=                  (newcontract.AniDBAnime.AniDBAnime.EndDate.HasValue &&                   newcontract.AniDBAnime.AniDBAnime.EndDate.Value < DateTime.Now)"  is complex.
Complex Conditional,Shoko.Server.Models,SVR_AnimeSeries,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Models\SVR_AnimeSeries.cs,GetConditionTypesChanged,The conditional expression  "oldcontract == null ||                  ((oldcontract.AniDBAnime.UserVote != null) &&                   (oldcontract.AniDBAnime.UserVote.VoteType == (int) AniDBVoteType.Anime)) !=                  ((newcontract.AniDBAnime.UserVote != null) &&                   (newcontract.AniDBAnime.UserVote.VoteType == (int) AniDBVoteType.Anime))"  is complex.
Complex Conditional,Shoko.Server.Models,EpisodeList,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Models\SVR_AnimeSeries.cs,Add,The conditional expression  "empty || ename == "complete movie" || ename == "movie" || ename == "ova""  is complex.
Complex Conditional,Shoko.Server.Models,SVR_VideoLocal,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Models\SVR_VideoLocal.cs,ToggleWatchedStatus,The conditional expression  "(watched && ServerSettings.Instance.AniDb.MyList_SetWatched) ||                          (!watched && ServerSettings.Instance.AniDb.MyList_SetUnwatched)"  is complex.
Complex Conditional,Shoko.Server.Providers.AniDB,AniDBConnectionHandler,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Providers\AniDB\AniDBConnectionHandler.cs,LogoutTimer_Elapsed,The conditional expression  "tsAniDBUDP.TotalSeconds >= Constants.PingFrequency &&                      tsPing.TotalSeconds >= Constants.PingFrequency &&                      !IsUdpBanned && !ExtendPauseSecs.HasValue"  is complex.
Complex Conditional,Shoko.Server.Providers.AniDB,AniDBConnectionHandler,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Providers\AniDB\AniDBConnectionHandler.cs,CallAniDBUDPDirectly,The conditional expression  "code == 600 || code == 601 || code == 602 || code == 604"  is complex.
Complex Conditional,Shoko.Server.Providers.AniDB,AniDBConnectionHandler,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Providers\AniDB\AniDBConnectionHandler.cs,GetEncoding,The conditional expression  "data[0] == 0 && data[1] == 0 && data[2] == 0xfe && data[3] == 0xff"  is complex.
Complex Conditional,Shoko.Server.Repositories.Cached,ImportFolderRepository,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Repositories\Cached\ImportFolderRepository.cs,SaveImportFolder,The conditional expression  "folder.CloudID == imf.CloudID && imf.IsDropDestination == 1 &&                          (folder.ImportFolderID == 0 || folder.ImportFolderID != imf.ImportFolderID)"  is complex.
Complex Conditional,Shoko.Server.Repositories.Cached,VideoLocalRepository,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Repositories\Cached\VideoLocalRepository.cs,PopulateIndexes,The conditional expression  "l.MD5 == null || l.SHA1 == null || l.Hash == null || l.FileName == null"  is complex.
Complex Conditional,Shoko.Server.PlexAndKodi,BaseObject,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\PlexAndKodi\BaseObject.cs,GetStream,The conditional expression  "prov.AddEpisodeNumberToTitlesOnUnsupportedClients && (isios || isandroid) && a.Type == "episode""  is complex.
Complex Conditional,Shoko.Server.PlexAndKodi.Plex,PlexDeviceInfo,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\PlexAndKodi\Plex\PlexDeviceInfo.cs,PlexDeviceInfo,The conditional expression  "(product != null && product.ToUpperInvariant().Contains("IOS")) ||                  (platform != null && platform.ToUpperInvariant().Contains("IOS"))"  is complex.
Complex Conditional,Shoko.Server.PlexAndKodi.Plex,PlexDeviceInfo,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\PlexAndKodi\Plex\PlexDeviceInfo.cs,PlexDeviceInfo,The conditional expression  "(product != null && product.ToUpperInvariant().Contains("ANDROID")) ||                       (platform != null && platform.ToUpperInvariant().Contains("ANDROID"))"  is complex.
Complex Conditional,Shoko.Server.PlexAndKodi.Plex,PlexDeviceInfo,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\PlexAndKodi\Plex\PlexDeviceInfo.cs,PlexDeviceInfo,The conditional expression  "(product != null && product.ToUpperInvariant().Contains("PLEX MEDIA PLAYER")) ||                       (platform != null && platform.ToUpperInvariant().Contains("KONVERGO"))"  is complex.
Complex Conditional,Shoko.Server.PlexAndKodi.Plex,PlexDeviceInfo,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\PlexAndKodi\Plex\PlexDeviceInfo.cs,PlexDeviceInfo,The conditional expression  "(product != null && product.ToUpperInvariant().Contains("KODI")) ||                       (platform != null && platform.ToUpperInvariant().Contains("KODI"))"  is complex.
Complex Conditional,Shoko.Server.PlexAndKodi.Plex,PlexDeviceInfo,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\PlexAndKodi\Plex\PlexDeviceInfo.cs,ToString,The conditional expression  "Device == null && Product == null && Version == null && Platform == null"  is complex.
Complex Conditional,Shoko.Server.Tasks,AutoAnimeGroupCalculator,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Tasks\AutoAnimeGroupCalculator.cs,ShouldConsiderAnimeRelation,The conditional expression  "(_exclusions & AutoGroupExclude.Movie) == AutoGroupExclude.Movie &&                  (rel.FromType == AnimeType.Movie || rel.ToType == AnimeType.Movie)                  || (_exclusions & AutoGroupExclude.Ova) == AutoGroupExclude.Ova &&                  (rel.FromType == AnimeType.OVA || rel.ToType == AnimeType.OVA)"  is complex.
Complex Conditional,Shoko.Server.Utilities.MediaInfoLib,MediaInfoParserInternal,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utilities\MediaInfoLib\MediaInfoParserInternal.cs,TranslateAudioStream,The conditional expression  "(fprofile.ToLower() != "layer 3") && (fprofile.ToLower() != "dolby digital") &&                      (fprofile.ToLower() != "pro") &&                      (fprofile.ToLower() != "layer 2")"  is complex.
Complex Conditional,Shoko.Server.Utilities.MediaInfoLib,MediaInfoParserInternal,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utilities\MediaInfoLib\MediaInfoParserInternal.cs,TranslateAudioStream,The conditional expression  "!string.IsNullOrEmpty(fset) && (fset == "Little / Signed") && (s.Codec == "pcm") && (bitdepth == 16)"  is complex.
Complex Conditional,Shoko.Server.Utilities.MediaInfoLib,MediaInfoParserInternal,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utilities\MediaInfoLib\MediaInfoParserInternal.cs,TranslateAudioStream,The conditional expression  "!string.IsNullOrEmpty(fset) && (fset == "Big / Signed") && (s.Codec == "pcm") && (bitdepth == 16)"  is complex.
Complex Conditional,Shoko.Server.Utilities.MediaInfoLib,MediaInfoParserInternal,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utilities\MediaInfoLib\MediaInfoParserInternal.cs,TranslateAudioStream,The conditional expression  "!string.IsNullOrEmpty(fset) && (fset == "Little / Unsigned") && (s.Codec == "pcm") &&                       (bitdepth == 8)"  is complex.
Complex Conditional,Shoko.Server.Utilities.MediaInfoLib,MediaInfoParserInternal,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utilities\MediaInfoLib\MediaInfoParserInternal.cs,ConvertAsync,The conditional expression  "(buffer[4] == 'f') && (buffer[5] == 'r') && (buffer[6] == 'e') && (buffer[7] == 'e')"  is complex.
Complex Conditional,Shoko.Server.Utilities.MediaInfoLib,MediaInfoParserInternal,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utilities\MediaInfoLib\MediaInfoParserInternal.cs,ConvertAsync,The conditional expression  "(buffer[4] == 'm') && (buffer[5] == 'o') && (buffer[6] == 'o') && (buffer[7] == 'v')"  is complex.
Complex Conditional,Shoko.Server.Utilities.MediaInfoLib,MediaInfoParserInternal,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utilities\MediaInfoLib\MediaInfoParserInternal.cs,FindInBuffer,The conditional expression  "(buffer[start + 4] == atom[0]) && (buffer[start + 5] == atom[1]) &&                      (buffer[start + 6] == atom[2]) &&                      (buffer[start + 7] == atom[3])"  is complex.
Empty Catch Block,Shoko.Server,AniDBHelper,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDBHelper.cs,LogoutTimer_Elapsed,The method has an empty catch block.
Empty Catch Block,Shoko.Server,ShokoServiceImplementation,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v1\Implementations\ShokoServiceImplementation\ShokoServiceImplementation_Entities.cs,GetVideoLocalsForAnime,The method has an empty catch block.
Empty Catch Block,Shoko.Server,Importer,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Import\Importer.cs,SyncHashes,The method has an empty catch block.
Empty Catch Block,Shoko.Server,Importer,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Import\Importer.cs,DeleteImportFolder,The method has an empty catch block.
Empty Catch Block,Shoko.Server,RenameFileHelper,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Renamer\RenameFileHelper.cs,InitialiseRenamers,The method has an empty catch block.
Empty Catch Block,Shoko.Server,RenameFileHelper,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Renamer\RenameFileHelper.cs,InitialiseRenamers,The method has an empty catch block.
Empty Catch Block,Shoko.Server,ShokoServer,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\ShokoServer.cs,CheckBlockedFiles,The method has an empty catch block.
Empty Catch Block,Shoko.Server,AVDumpHelper,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utilities\AVDumpHelper.cs,ExtractAVDump,The method has an empty catch block.
Empty Catch Block,Shoko.Server,AVDumpHelper,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utilities\AVDumpHelper.cs,DeleteOldAVDump,The method has an empty catch block.
Empty Catch Block,Shoko.Server,UnhandledExceptionManager,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\UnhandledExceptionManager.cs,GenericExceptionHandler,The method has an empty catch block.
Empty Catch Block,Shoko.Server,Utils,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utils.cs,ExecuteCommandSync,The method has an empty catch block.
Empty Catch Block,Shoko.Server.Commands,CommandRequest_HashFile,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Commands\Import\CommandRequest_HashFile.cs,CanAccessFile,The method has an empty catch block.
Empty Catch Block,Shoko.Server.Commands,CommandRequest_MovieDBSearchAnime,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Commands\MovieDB\CommandRequest_MovieDBSearchAnime.cs,ProcessCommand,The method has an empty catch block.
Empty Catch Block,Shoko.Server.Commands,CommandProcessorGeneral,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Commands\CommandProcessorGeneral.cs,WorkerCommands_DoWork,The method has an empty catch block.
Empty Catch Block,Shoko.Server.Commands,CommandProcessorHasher,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Commands\CommandProcessorHasher.cs,WorkerCommands_DoWork,The method has an empty catch block.
Empty Catch Block,Shoko.Server.Commands,CommandProcessorImages,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Commands\CommandProcessorImages.cs,WorkerCommands_DoWork,The method has an empty catch block.
Empty Catch Block,Shoko.Server.Commands,CommandRequestImplementation,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Commands\CommandRequestImplementation.cs,TryGetProperty,The method has an empty catch block.
Empty Catch Block,Shoko.Server.Commands,CommandRequest_TvDBSearchAnime,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Commands\TvDB\CommandRequest_TvDBSearchAnime.cs,ProcessCommand,The method has an empty catch block.
Empty Catch Block,Shoko.Server.Extensions,ModelProviders,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Extensions\ModelProviders.cs,TryGetProperty,The method has an empty catch block.
Empty Catch Block,Shoko.Server.Databases,BaseDatabase<T>,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Databases\BaseDatabase.cs,GetDatabaseBackupName,The method has an empty catch block.
Empty Catch Block,Shoko.Server.Databases,MySQL,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Databases\MySQL.cs,TestConnection,The method has an empty catch block.
Empty Catch Block,Shoko.Server.Databases,SQLite,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Databases\SQLite.cs,DropColumns,The method has an empty catch block.
Empty Catch Block,Shoko.Server.Databases,SQLServer,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Databases\SQLServer.cs,TestConnection,The method has an empty catch block.
Empty Catch Block,Shoko.Server.Providers.AniDB,AniDBConnectionHandler,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Providers\AniDB\AniDBConnectionHandler.cs,LogoutTimer_Elapsed,The method has an empty catch block.
Empty Catch Block,Shoko.Server.Providers.TvDB,TvDBApiHelper,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Providers\TvDB\TvDBApiHelper.cs,GetSeriesImagesAsync,The method has an empty catch block.
Empty Catch Block,Shoko.Server.Repositories.Cached,CrossRef_AniDB_TvDB_EpisodeRepository,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Repositories\Cached\CrossRef_AniDB_TvDB_EpisodeRepository.cs,DeleteAllUnverifiedLinksForAnime,The method has an empty catch block.
Empty Catch Block,Shoko.Server.Repositories.Cached,CrossRef_AniDB_TvDB_EpisodeRepository,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Repositories\Cached\CrossRef_AniDB_TvDB_EpisodeRepository.cs,DeleteAllUnverifiedLinksForAnime,The method has an empty catch block.
Empty Catch Block,Shoko.Server.Repositories.Cached,AnimeSeriesRepository,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Repositories\Cached\AnimeSeriesRepository.cs,RegenerateDb,The method has an empty catch block.
Empty Catch Block,Shoko.Server.Repositories.Cached,VideoLocalRepository,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Repositories\Cached\VideoLocalRepository.cs,RegenerateDb,The method has an empty catch block.
Empty Catch Block,Shoko.Server.Settings.Migration,ServerSettings_Legacy,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Settings\Migration\ServerSettings_Legacy.cs,LoadSettingsFromFile,The method has an empty catch block.
Empty Catch Block,Shoko.Server.Settings.Migration,ServerSettings_Legacy,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Settings\Migration\ServerSettings_Legacy.cs,GetNameValueCollectionSection,The method has an empty catch block.
Empty Catch Block,Shoko.Server.PlexAndKodi,CommonImplementation,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\PlexAndKodi\CommonImplementation.cs,GetItemsFromPlaylist,The method has an empty catch block.
Empty Catch Block,Shoko.Server.PlexAndKodi,CommonImplementation,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\PlexAndKodi\CommonImplementation.cs,GetUnsort,The method has an empty catch block.
Empty Catch Block,Shoko.Server.PlexAndKodi,CommonImplementation,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\PlexAndKodi\CommonImplementation.cs,GetFromEpisode,The method has an empty catch block.
Empty Catch Block,Shoko.Server.PlexAndKodi,CommonImplementation,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\PlexAndKodi\CommonImplementation.cs,GetItemsFromSerie,The method has an empty catch block.
Empty Catch Block,Shoko.Server.PlexAndKodi,Helper,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\PlexAndKodi\Helper.cs,MayReplaceVideo,The method has an empty catch block.
Empty Catch Block,Shoko.Server.Utilities,LogReader,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utilities\LogReader.cs,Read,The method has an empty catch block.
Empty Catch Block,Shoko.Server.Utilities.MediaInfoLib,MediaInfoParserInternal,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utilities\MediaInfoLib\MediaInfoParserInternal.cs,ConvertAsync,The method has an empty catch block.
Empty Catch Block,Shoko.Server.Utilities.MediaInfoLib,MediaInfoParserInternal,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utilities\MediaInfoLib\MediaInfoParserInternal.cs,ConvertAsync,The method has an empty catch block.
Empty Catch Block,Shoko.Server.Providers.Azure,AzureWebAPI,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Providers\Azure\AzureWebAPI.cs,GetDataXML,The method has an empty catch block.
Empty Catch Block,Shoko.Server.Providers.Azure,AzureWebAPI,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Providers\Azure\AzureWebAPI.cs,GetUserInfoData,The method has an empty catch block.
Empty Catch Block,Shoko.Server.Providers.TraktTV,TraktTVHelper,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Providers\TraktTV\TraktTVHelper.cs,SendData,The method has an empty catch block.
Empty Catch Block,LeanWork.IO.FileSystem,BufferingFileSystemWatcher,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utilities\LeanWork\IO\FileSystem\BufferingFileSystemWatcher.cs,RaiseBufferedEventsUntilCancelled,The method has an empty catch block.
Empty Catch Block,LeanWork.IO.FileSystem,RecoveringFileSystemWatcher,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utilities\LeanWork\IO\FileSystem\RecoveringFileSystemWatcher.cs,ReStartIfNeccessary,The method has an empty catch block.
Magic Number,Shoko.Server,AniDBHelper,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDBHelper.cs,Init,The following statement contains a magic number: logoutTimer.Interval = 5000;
Magic Number,Shoko.Server,AniDBHelper,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDBHelper.cs,Login,The following statement contains a magic number: Thread.Sleep(2200);
Magic Number,Shoko.Server,AniDBHelper,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDBHelper.cs,GetUpdated,The following statement contains a magic number: records <= 200
Magic Number,Shoko.Server,AniDBHelper,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDBHelper.cs,GetUpdated,The following statement contains a magic number: records > 200
Magic Number,Shoko.Server,AniDBHelper,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDBHelper.cs,GetAnimeInfoHTTP,The following statement contains a magic number: ts.TotalHours < 4
Magic Number,Shoko.Server,AniDBHelper,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDBHelper.cs,BindToLocalPort,The following statement contains a magic number: soUdp.ReceiveTimeout = 30000;
Magic Number,Shoko.Server,ShokoServiceImplementation,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v1\Implementations\ShokoServiceImplementation\ShokoServiceImplementation_Entities.cs,AssociateMultipleFiles,The following statement contains a magic number: com.Percentage = (int) Math.Round((double) count / total * 100);
Magic Number,Shoko.Server,ShokoServiceImplementation,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v1\Implementations\ShokoServiceImplementation\ShokoServiceImplementation_Entities.cs,VoteAnime,The following statement contains a magic number: iVoteValue = (int) (voteValue * 100);
Magic Number,Shoko.Server,ShokoServiceImplementation,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v1\Implementations\ShokoServiceImplementation\ShokoServiceImplementation_Entities.cs,CreateSeriesFromAnime,The following statement contains a magic number: ts.TotalHours < 4
Magic Number,Shoko.Server,ShokoServiceImplementation,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v1\Implementations\ShokoServiceImplementation\ShokoServiceImplementation_Entities.cs,GetAllChanges,The following statement contains a magic number: changes[1].ChangedItems.UnionWith(changes[2].ChangedItems);
Magic Number,Shoko.Server,ShokoServiceImplementation,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v1\Implementations\ShokoServiceImplementation\ShokoServiceImplementation_Entities.cs,GetAllChanges,The following statement contains a magic number: changes[1].ChangedItems.UnionWith(changes[2].RemovedItems);
Magic Number,Shoko.Server,ShokoServiceImplementation,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v1\Implementations\ShokoServiceImplementation\ShokoServiceImplementation_Entities.cs,GetAllChanges,The following statement contains a magic number: changes[1].LastChange = changes[2].LastChange;
Magic Number,Shoko.Server,ShokoServiceImplementation,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v1\Implementations\ShokoServiceImplementation\ShokoServiceImplementation_Entities.cs,GetAllChanges,The following statement contains a magic number: changes[2].LastChange > changes[1].LastChange
Magic Number,Shoko.Server,ShokoServiceImplementation,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v1\Implementations\ShokoServiceImplementation\ShokoServiceImplementation_Entities.cs,GetAllChanges,The following statement contains a magic number: changes[3].ChangedItems.UnionWith(changes[4].ChangedItems);
Magic Number,Shoko.Server,ShokoServiceImplementation,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v1\Implementations\ShokoServiceImplementation\ShokoServiceImplementation_Entities.cs,GetAllChanges,The following statement contains a magic number: changes[3].ChangedItems.UnionWith(changes[4].ChangedItems);
Magic Number,Shoko.Server,ShokoServiceImplementation,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v1\Implementations\ShokoServiceImplementation\ShokoServiceImplementation_Entities.cs,GetAllChanges,The following statement contains a magic number: changes[3].ChangedItems.UnionWith(changes[4].RemovedItems);
Magic Number,Shoko.Server,ShokoServiceImplementation,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v1\Implementations\ShokoServiceImplementation\ShokoServiceImplementation_Entities.cs,GetAllChanges,The following statement contains a magic number: changes[3].ChangedItems.UnionWith(changes[4].RemovedItems);
Magic Number,Shoko.Server,ShokoServiceImplementation,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v1\Implementations\ShokoServiceImplementation\ShokoServiceImplementation_Entities.cs,GetAllChanges,The following statement contains a magic number: changes[3].LastChange = changes[4].LastChange;
Magic Number,Shoko.Server,ShokoServiceImplementation,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v1\Implementations\ShokoServiceImplementation\ShokoServiceImplementation_Entities.cs,GetAllChanges,The following statement contains a magic number: changes[3].LastChange = changes[4].LastChange;
Magic Number,Shoko.Server,ShokoServiceImplementation,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v1\Implementations\ShokoServiceImplementation\ShokoServiceImplementation_Entities.cs,GetAllChanges,The following statement contains a magic number: changes[4].LastChange > changes[3].LastChange
Magic Number,Shoko.Server,ShokoServiceImplementation,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v1\Implementations\ShokoServiceImplementation\ShokoServiceImplementation_Entities.cs,GetAllChanges,The following statement contains a magic number: changes[4].LastChange > changes[3].LastChange
Magic Number,Shoko.Server,ShokoServiceImplementation,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v1\Implementations\ShokoServiceImplementation\ShokoServiceImplementation_Entities.cs,GetAllChanges,The following statement contains a magic number: c.Series.ChangedItems = changes[3]                      .ChangedItems.Select(a => RepoFactory.AnimeSeries.GetByID(a))                      .Where(a => a != null)                      .Select(a => a.GetUserContract(userID))                      .ToList();
Magic Number,Shoko.Server,ShokoServiceImplementation,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v1\Implementations\ShokoServiceImplementation\ShokoServiceImplementation_Entities.cs,GetAllChanges,The following statement contains a magic number: c.Series.RemovedItems = changes[3].RemovedItems.ToList();
Magic Number,Shoko.Server,ShokoServiceImplementation,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v1\Implementations\ShokoServiceImplementation\ShokoServiceImplementation_Entities.cs,GetAllChanges,The following statement contains a magic number: c.Series.LastChange = changes[3].LastChange;
Magic Number,Shoko.Server,ShokoServiceImplementation,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v1\Implementations\ShokoServiceImplementation\ShokoServiceImplementation_Entities.cs,SaveServerSettings,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,Shoko.Server,ShokoServiceImplementation,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v1\Implementations\ShokoServiceImplementation\ShokoServiceImplementation_Entities.cs,TestAniDBConnection,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,Shoko.Server,ShokoServiceImplementation,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v1\Implementations\ShokoServiceImplementation\ShokoServiceImplementation_Entities.cs,GetAnimeForMonth,The following statement contains a magic number: endDate = endDate.AddMinutes(-10);
Magic Number,Shoko.Server,ShokoServiceImplementation,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v1\Implementations\ShokoServiceImplementation\ShokoServiceImplementation_Entities.cs,GetRecommendations,The following statement contains a magic number: switch (recommendationType)                  {                      case 1:                          ignoreType = 1;                          break;                      case 2:                          ignoreType = 2;                          break;                  }
Magic Number,Shoko.Server,ShokoServiceImplementation,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v1\Implementations\ShokoServiceImplementation\ShokoServiceImplementation_Entities.cs,GetRecommendations,The following statement contains a magic number: switch (recommendationType)                  {                      case 1:                          ignoreType = 1;                          break;                      case 2:                          ignoreType = 2;                          break;                  }
Magic Number,Shoko.Server,ShokoServiceImplementation,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v1\Implementations\ShokoServiceImplementation\ShokoServiceImplementation_Entities.cs,GetRecommendations,The following statement contains a magic number: ser.LatestLocalEpisodeNumber > 0 && recommendationType == 2
Magic Number,Shoko.Server,ShokoServiceImplementation,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v1\Implementations\ShokoServiceImplementation\ShokoServiceImplementation_Entities.cs,GetRecommendations,The following statement contains a magic number: decimal animeRating = 850;
Magic Number,Shoko.Server,ShokoServiceImplementation,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v1\Implementations\ShokoServiceImplementation\ShokoServiceImplementation_Entities.cs,CalculateRecommendationScore,The following statement contains a magic number: score = score + 100;
Magic Number,Shoko.Server,ShokoServiceImplementation,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v1\Implementations\ShokoServiceImplementation\ShokoServiceImplementation_Entities.cs,CalculateRecommendationScore,The following statement contains a magic number: approvalPercentage > 90
Magic Number,Shoko.Server,ShokoServiceImplementation,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v1\Implementations\ShokoServiceImplementation\ShokoServiceImplementation_Entities.cs,CalculateRecommendationScore,The following statement contains a magic number: score = score + 100;
Magic Number,Shoko.Server,ShokoServiceImplementation,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v1\Implementations\ShokoServiceImplementation\ShokoServiceImplementation_Entities.cs,CalculateRecommendationScore,The following statement contains a magic number: approvalPercentage > 80
Magic Number,Shoko.Server,ShokoServiceImplementation,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v1\Implementations\ShokoServiceImplementation\ShokoServiceImplementation_Entities.cs,CalculateRecommendationScore,The following statement contains a magic number: score = score + 100;
Magic Number,Shoko.Server,ShokoServiceImplementation,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v1\Implementations\ShokoServiceImplementation\ShokoServiceImplementation_Entities.cs,CalculateRecommendationScore,The following statement contains a magic number: approvalPercentage > 70
Magic Number,Shoko.Server,ShokoServiceImplementation,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v1\Implementations\ShokoServiceImplementation\ShokoServiceImplementation_Entities.cs,CalculateRecommendationScore,The following statement contains a magic number: score = score + 100;
Magic Number,Shoko.Server,ShokoServiceImplementation,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v1\Implementations\ShokoServiceImplementation\ShokoServiceImplementation_Entities.cs,CalculateRecommendationScore,The following statement contains a magic number: approvalPercentage > 60
Magic Number,Shoko.Server,ShokoServiceImplementation,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v1\Implementations\ShokoServiceImplementation\ShokoServiceImplementation_Entities.cs,CalculateRecommendationScore,The following statement contains a magic number: score = score + 100;
Magic Number,Shoko.Server,ShokoServiceImplementation,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v1\Implementations\ShokoServiceImplementation\ShokoServiceImplementation_Entities.cs,CalculateRecommendationScore,The following statement contains a magic number: approvalPercentage > 50
Magic Number,Shoko.Server,ShokoServiceImplementation,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v1\Implementations\ShokoServiceImplementation\ShokoServiceImplementation_Entities.cs,CalculateRecommendationScore,The following statement contains a magic number: score = score + 100;
Magic Number,Shoko.Server,ShokoServiceImplementation,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v1\Implementations\ShokoServiceImplementation\ShokoServiceImplementation_Entities.cs,CalculateRecommendationScore,The following statement contains a magic number: animeRating > 900
Magic Number,Shoko.Server,ShokoServiceImplementation,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v1\Implementations\ShokoServiceImplementation\ShokoServiceImplementation_Entities.cs,CalculateRecommendationScore,The following statement contains a magic number: score = score + 100;
Magic Number,Shoko.Server,ShokoServiceImplementation,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v1\Implementations\ShokoServiceImplementation\ShokoServiceImplementation_Entities.cs,CalculateRecommendationScore,The following statement contains a magic number: animeRating > 800
Magic Number,Shoko.Server,ShokoServiceImplementation,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v1\Implementations\ShokoServiceImplementation\ShokoServiceImplementation_Entities.cs,CalculateRecommendationScore,The following statement contains a magic number: score = score + 100;
Magic Number,Shoko.Server,ShokoServiceImplementation,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v1\Implementations\ShokoServiceImplementation\ShokoServiceImplementation_Entities.cs,CalculateRecommendationScore,The following statement contains a magic number: animeRating > 700
Magic Number,Shoko.Server,ShokoServiceImplementation,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v1\Implementations\ShokoServiceImplementation\ShokoServiceImplementation_Entities.cs,CalculateRecommendationScore,The following statement contains a magic number: score = score + 100;
Magic Number,Shoko.Server,ShokoServiceImplementation,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v1\Implementations\ShokoServiceImplementation\ShokoServiceImplementation_Entities.cs,CalculateRecommendationScore,The following statement contains a magic number: animeRating > 600
Magic Number,Shoko.Server,ShokoServiceImplementation,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v1\Implementations\ShokoServiceImplementation\ShokoServiceImplementation_Entities.cs,CalculateRecommendationScore,The following statement contains a magic number: score = score + 100;
Magic Number,Shoko.Server,ShokoServiceImplementation,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v1\Implementations\ShokoServiceImplementation\ShokoServiceImplementation_Entities.cs,CalculateRecommendationScore,The following statement contains a magic number: animeRating > 500
Magic Number,Shoko.Server,ShokoServiceImplementation,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v1\Implementations\ShokoServiceImplementation\ShokoServiceImplementation_Entities.cs,TraktScrobble,The following statement contains a magic number: return 500;
Magic Number,Shoko.Server,ShokoServiceImplementation,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v1\Implementations\ShokoServiceImplementation\ShokoServiceImplementation_Entities.cs,SearchForFiles,The following statement contains a magic number: switch (sType)                  {                      case FileSearchCriteria.Name:                          List<SVR_VideoLocal> results1 = RepoFactory.VideoLocal.GetByName(searchCriteria.Trim());                          foreach (SVR_VideoLocal vid in results1)                              vids.Add(vid.ToClient(userID));                          break;                        case FileSearchCriteria.ED2KHash:                          SVR_VideoLocal vidl = RepoFactory.VideoLocal.GetByHash(searchCriteria.Trim());                          if (vidl != null)                              vids.Add(vidl.ToClient(userID));                          break;                        case FileSearchCriteria.Size:                          break;                        case FileSearchCriteria.LastOneHundred:                          int number = 100;                          if (!string.IsNullOrEmpty(searchCriteria))                          {                              if (int.TryParse(searchCriteria' out int temp)) number = temp;                          }                          List<SVR_VideoLocal> results2 = RepoFactory.VideoLocal.GetMostRecentlyAdded(number' userID);                          foreach (SVR_VideoLocal vid in results2)                              vids.Add(vid.ToClient(userID));                          break;                  }
Magic Number,Shoko.Server,ShokoServiceImplementation,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v1\Implementations\ShokoServiceImplementation\ShokoServiceImplementation_Entities.cs,RenameAndMoveFile,The following statement contains a magic number: ret.NewFileName = "ERROR: " + ret.NewFileName.Substring(7);
Magic Number,Shoko.Server,ShokoServiceImplementation,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v1\Implementations\ShokoServiceImplementation\ShokoServiceImplementation_Entities.cs,DeleteDuplicateFile,The following statement contains a magic number: fileNumber != 1 && fileNumber != 2
Magic Number,Shoko.Server,ShokoServiceImplementation,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v1\Implementations\ShokoServiceImplementation\ShokoServiceImplementation_Entities.cs,DeleteDuplicateFile,The following statement contains a magic number: switch (fileNumber)                  {                      case 1:                          place =                              RepoFactory.VideoLocalPlace.GetByFilePathAndImportFolderID(df.FilePathFile1'                                  df.ImportFolderIDFile1);                          break;                      case 2:                          place =                              RepoFactory.VideoLocalPlace.GetByFilePathAndImportFolderID(df.FilePathFile2'                                  df.ImportFolderIDFile2);                          break;                      default:                          place = null;                          break;                  }
Magic Number,Shoko.Server,ShokoServiceImplementation,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v1\Implementations\ShokoServiceImplementation\ShokoServiceImplementation_Entities.cs,GetFilesByGroupAndResolution,The following statement contains a magic number: int thisBitDepth = 8;
Magic Number,Shoko.Server,ShokoServiceImplementation,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v1\Implementations\ShokoServiceImplementation\ShokoServiceImplementation_Entities.cs,GetGroupVideoQualitySummary,The following statement contains a magic number: contract.AudioStreamCount = videoLocals.First()                      .Media?.Parts.SelectMany(a => a.Streams)                      .Count(a => a.StreamType == 2) ?? 0;
Magic Number,Shoko.Server,FileQualityFilter,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Import\FileQualityFilter.cs,FileQualityFilter,The following statement contains a magic number: ResolutionArea = new Dictionary<int' string>              {                  {3840 * 2160' "2160p"}'                  {2560 * 1440' "1440p"}'                  {1920 * 1080' "1080p"}'                  {1280 * 720' "720p"}'                  {1024 * 576' "576p"}'                  {853 * 480' "480p"}              };
Magic Number,Shoko.Server,FileQualityFilter,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Import\FileQualityFilter.cs,FileQualityFilter,The following statement contains a magic number: ResolutionArea = new Dictionary<int' string>              {                  {3840 * 2160' "2160p"}'                  {2560 * 1440' "1440p"}'                  {1920 * 1080' "1080p"}'                  {1280 * 720' "720p"}'                  {1024 * 576' "576p"}'                  {853 * 480' "480p"}              };
Magic Number,Shoko.Server,FileQualityFilter,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Import\FileQualityFilter.cs,FileQualityFilter,The following statement contains a magic number: ResolutionArea = new Dictionary<int' string>              {                  {3840 * 2160' "2160p"}'                  {2560 * 1440' "1440p"}'                  {1920 * 1080' "1080p"}'                  {1280 * 720' "720p"}'                  {1024 * 576' "576p"}'                  {853 * 480' "480p"}              };
Magic Number,Shoko.Server,FileQualityFilter,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Import\FileQualityFilter.cs,FileQualityFilter,The following statement contains a magic number: ResolutionArea = new Dictionary<int' string>              {                  {3840 * 2160' "2160p"}'                  {2560 * 1440' "1440p"}'                  {1920 * 1080' "1080p"}'                  {1280 * 720' "720p"}'                  {1024 * 576' "576p"}'                  {853 * 480' "480p"}              };
Magic Number,Shoko.Server,FileQualityFilter,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Import\FileQualityFilter.cs,FileQualityFilter,The following statement contains a magic number: ResolutionArea = new Dictionary<int' string>              {                  {3840 * 2160' "2160p"}'                  {2560 * 1440' "1440p"}'                  {1920 * 1080' "1080p"}'                  {1280 * 720' "720p"}'                  {1024 * 576' "576p"}'                  {853 * 480' "480p"}              };
Magic Number,Shoko.Server,FileQualityFilter,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Import\FileQualityFilter.cs,FileQualityFilter,The following statement contains a magic number: ResolutionArea = new Dictionary<int' string>              {                  {3840 * 2160' "2160p"}'                  {2560 * 1440' "1440p"}'                  {1920 * 1080' "1080p"}'                  {1280 * 720' "720p"}'                  {1024 * 576' "576p"}'                  {853 * 480' "480p"}              };
Magic Number,Shoko.Server,FileQualityFilter,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Import\FileQualityFilter.cs,FileQualityFilter,The following statement contains a magic number: ResolutionArea = new Dictionary<int' string>              {                  {3840 * 2160' "2160p"}'                  {2560 * 1440' "1440p"}'                  {1920 * 1080' "1080p"}'                  {1280 * 720' "720p"}'                  {1024 * 576' "576p"}'                  {853 * 480' "480p"}              };
Magic Number,Shoko.Server,FileQualityFilter,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Import\FileQualityFilter.cs,FileQualityFilter,The following statement contains a magic number: ResolutionArea = new Dictionary<int' string>              {                  {3840 * 2160' "2160p"}'                  {2560 * 1440' "1440p"}'                  {1920 * 1080' "1080p"}'                  {1280 * 720' "720p"}'                  {1024 * 576' "576p"}'                  {853 * 480' "480p"}              };
Magic Number,Shoko.Server,FileQualityFilter,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Import\FileQualityFilter.cs,FileQualityFilter,The following statement contains a magic number: ResolutionArea = new Dictionary<int' string>              {                  {3840 * 2160' "2160p"}'                  {2560 * 1440' "1440p"}'                  {1920 * 1080' "1080p"}'                  {1280 * 720' "720p"}'                  {1024 * 576' "576p"}'                  {853 * 480' "480p"}              };
Magic Number,Shoko.Server,FileQualityFilter,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Import\FileQualityFilter.cs,FileQualityFilter,The following statement contains a magic number: ResolutionArea = new Dictionary<int' string>              {                  {3840 * 2160' "2160p"}'                  {2560 * 1440' "1440p"}'                  {1920 * 1080' "1080p"}'                  {1280 * 720' "720p"}'                  {1024 * 576' "576p"}'                  {853 * 480' "480p"}              };
Magic Number,Shoko.Server,FileQualityFilter,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Import\FileQualityFilter.cs,FileQualityFilter,The following statement contains a magic number: ResolutionArea = new Dictionary<int' string>              {                  {3840 * 2160' "2160p"}'                  {2560 * 1440' "1440p"}'                  {1920 * 1080' "1080p"}'                  {1280 * 720' "720p"}'                  {1024 * 576' "576p"}'                  {853 * 480' "480p"}              };
Magic Number,Shoko.Server,FileQualityFilter,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Import\FileQualityFilter.cs,FileQualityFilter,The following statement contains a magic number: ResolutionArea = new Dictionary<int' string>              {                  {3840 * 2160' "2160p"}'                  {2560 * 1440' "1440p"}'                  {1920 * 1080' "1080p"}'                  {1280 * 720' "720p"}'                  {1024 * 576' "576p"}'                  {853 * 480' "480p"}              };
Magic Number,Shoko.Server,FileQualityFilter,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Import\FileQualityFilter.cs,FileQualityFilter,The following statement contains a magic number: ResolutionArea43 = new Dictionary<int' string>              {                  {720 * 576' "576p"}'                  {720 * 480' "480p"}'                  {480 * 360' "360p"}'                  {320 * 240' "240p"}              };
Magic Number,Shoko.Server,FileQualityFilter,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Import\FileQualityFilter.cs,FileQualityFilter,The following statement contains a magic number: ResolutionArea43 = new Dictionary<int' string>              {                  {720 * 576' "576p"}'                  {720 * 480' "480p"}'                  {480 * 360' "360p"}'                  {320 * 240' "240p"}              };
Magic Number,Shoko.Server,FileQualityFilter,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Import\FileQualityFilter.cs,FileQualityFilter,The following statement contains a magic number: ResolutionArea43 = new Dictionary<int' string>              {                  {720 * 576' "576p"}'                  {720 * 480' "480p"}'                  {480 * 360' "360p"}'                  {320 * 240' "240p"}              };
Magic Number,Shoko.Server,FileQualityFilter,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Import\FileQualityFilter.cs,FileQualityFilter,The following statement contains a magic number: ResolutionArea43 = new Dictionary<int' string>              {                  {720 * 576' "576p"}'                  {720 * 480' "480p"}'                  {480 * 360' "360p"}'                  {320 * 240' "240p"}              };
Magic Number,Shoko.Server,FileQualityFilter,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Import\FileQualityFilter.cs,FileQualityFilter,The following statement contains a magic number: ResolutionArea43 = new Dictionary<int' string>              {                  {720 * 576' "576p"}'                  {720 * 480' "480p"}'                  {480 * 360' "360p"}'                  {320 * 240' "240p"}              };
Magic Number,Shoko.Server,FileQualityFilter,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Import\FileQualityFilter.cs,FileQualityFilter,The following statement contains a magic number: ResolutionArea43 = new Dictionary<int' string>              {                  {720 * 576' "576p"}'                  {720 * 480' "480p"}'                  {480 * 360' "360p"}'                  {320 * 240' "240p"}              };
Magic Number,Shoko.Server,FileQualityFilter,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Import\FileQualityFilter.cs,FileQualityFilter,The following statement contains a magic number: ResolutionArea43 = new Dictionary<int' string>              {                  {720 * 576' "576p"}'                  {720 * 480' "480p"}'                  {480 * 360' "360p"}'                  {320 * 240' "240p"}              };
Magic Number,Shoko.Server,FileQualityFilter,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Import\FileQualityFilter.cs,FileQualityFilter,The following statement contains a magic number: ResolutionArea43 = new Dictionary<int' string>              {                  {720 * 576' "576p"}'                  {720 * 480' "480p"}'                  {480 * 360' "360p"}'                  {320 * 240' "240p"}              };
Magic Number,Shoko.Server,FileQualityFilter,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Import\FileQualityFilter.cs,CheckAudioCodec,The following statement contains a magic number: string[] codecs = aniFile?.Media?.Parts?.SelectMany(a => a.Streams)                  .Where(a => a.StreamType == 2)                  .Select(a => a.Codec)                  .OrderBy(a => a)                  .ToArray() ?? new string[] {};
Magic Number,Shoko.Server,FileQualityFilter,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Import\FileQualityFilter.cs,CheckAudioStreamCount,The following statement contains a magic number: int streamCount = aniFile?.Media?.Parts?.SelectMany(a => a.Streams).Count(a => a.StreamType == 2) ?? -1;
Magic Number,Shoko.Server,FileQualityFilter,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Import\FileQualityFilter.cs,CheckSubStreamCount,The following statement contains a magic number: int streamCount = file?.Media?.Parts?.SelectMany(a => a.Streams).Count(b => b.StreamType == 3) ?? -1;
Magic Number,Shoko.Server,FileQualityFilter,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Import\FileQualityFilter.cs,CompareAudioCodecTo,The following statement contains a magic number: string[] newCodecs = newFile?.Media?.Parts?.SelectMany(a => a.Streams)                  .Where(a => a.StreamType == 2)                  .Select(a => a.Codec)                  .OrderBy(a => a)                  .ToArray() ?? new string[] {};
Magic Number,Shoko.Server,FileQualityFilter,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Import\FileQualityFilter.cs,CompareAudioCodecTo,The following statement contains a magic number: string[] oldCodecs = oldFile?.Media?.Parts?.SelectMany(a => a.Streams)                  .Where(a => a.StreamType == 2)                  .Select(a => a.Codec)                  .OrderBy(a => a)                  .ToArray() ?? new string[] {};
Magic Number,Shoko.Server,FileQualityFilter,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Import\FileQualityFilter.cs,CompareAudioStreamCountTo,The following statement contains a magic number: int newStreamCount = newFile.Media?.Parts?.SelectMany(a => a.Streams).Count(a => a.StreamType == 2) ?? 0;
Magic Number,Shoko.Server,FileQualityFilter,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Import\FileQualityFilter.cs,CompareAudioStreamCountTo,The following statement contains a magic number: int oldStreamCount = oldFile.Media?.Parts?.SelectMany(a => a.Streams).Count(a => a.StreamType == 2) ?? 0;
Magic Number,Shoko.Server,FileQualityFilter,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Import\FileQualityFilter.cs,CompareSubStreamCountTo,The following statement contains a magic number: int newStreamCount = newFile?.Media?.Parts?.Where(a => a.Streams.Any(b => b.StreamType == 3)).ToList().Count ?? 0;
Magic Number,Shoko.Server,FileQualityFilter,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Import\FileQualityFilter.cs,CompareSubStreamCountTo,The following statement contains a magic number: int oldStreamCount = oldFile?.Media?.Parts?.Where(a => a.Streams.Any(b => b.StreamType == 3)).ToList().Count ?? 0;
Magic Number,Shoko.Server,FileQualityFilter,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Import\FileQualityFilter.cs,GetResolution,The following statement contains a magic number: parts.Length != 2
Magic Number,Shoko.Server,FileQualityFilter,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Import\FileQualityFilter.cs,GetResolution,The following statement contains a magic number: const double sixteenNine = 1.777778;
Magic Number,Shoko.Server,FileQualityFilter,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Import\FileQualityFilter.cs,GetResolution,The following statement contains a magic number: const double fourThirds = 1.333333;
Magic Number,Shoko.Server,FileQualityFilter,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Import\FileQualityFilter.cs,GetResolution,The following statement contains a magic number: Math.Abs(keyDist - double.MaxValue) < 0.01D
Magic Number,Shoko.Server,FileQualityFilter,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Import\FileQualityFilter.cs,GetResolutionInternal,The following statement contains a magic number: res != null && res.Length == 2 && res[0] == "0" && res[1] == "0"
Magic Number,Shoko.Server,Importer,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Import\Importer.cs,RunImport_GetImages,The following statement contains a magic number: anime.AnimeID == 8580
Magic Number,Shoko.Server,Importer,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Import\Importer.cs,SendUserInfoUpdate,The following statement contains a magic number: tsLastRun.TotalHours < 6
Magic Number,Shoko.Server,Importer,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Import\Importer.cs,CheckForTraktTokenUpdate,The following statement contains a magic number: int freqHours = 24;
Magic Number,Shoko.Server,Importer,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Import\Importer.cs,UpdateAniDBTitles,The following statement contains a magic number: int freqHours = 100;
Magic Number,Shoko.Server,TvDBLinkingHelper,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Providers\TvDB\TvDBLinkingHelper.cs,GenerateTvDBEpisodeMatches,The following statement contains a magic number: tosave.Batch(50).ForEach(RepoFactory.CrossRef_AniDB_TvDB_Episode.Save);
Magic Number,Shoko.Server,TvDBLinkingHelper,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Providers\TvDB\TvDBLinkingHelper.cs,IsTitleNumberedAndConsecutive,The following statement contains a magic number: return distSq < 1.0001D;
Magic Number,Shoko.Server,TvDBLinkingHelper,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Providers\TvDB\TvDBLinkingHelper.cs,TryToMatchSeasonsByAirDates,The following statement contains a magic number: start = start.AddDays(-5);
Magic Number,Shoko.Server,TvDBLinkingHelper,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Providers\TvDB\TvDBLinkingHelper.cs,TryToMatchSeasonsByAirDates,The following statement contains a magic number: end = end.AddDays(5);
Magic Number,Shoko.Server,TvDBLinkingHelper,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Providers\TvDB\TvDBLinkingHelper.cs,TryToMatchSeasonsByAirDates,The following statement contains a magic number: bool match =                                  prequelEps.Zip(epsInSeason'                                      (aniep' tvep) =>                                          aniep.GetAirDateAsDate()?.ToIso8601WeekNumber() ==                                          tvep.AirDate?.ToIso8601WeekNumber() &&                                          aniep.GetAirDateAsDate()?.Year == tvep.AirDate?.Year).Count(a => a == true) >=                                  prequelEps.Count * 2D / 3D;
Magic Number,Shoko.Server,TvDBLinkingHelper,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Providers\TvDB\TvDBLinkingHelper.cs,TryToMatchSeasonsByAirDates,The following statement contains a magic number: bool match =                                  prequelEps.Zip(epsInSeason'                                      (aniep' tvep) =>                                          aniep.GetAirDateAsDate()?.ToIso8601WeekNumber() ==                                          tvep.AirDate?.ToIso8601WeekNumber() &&                                          aniep.GetAirDateAsDate()?.Year == tvep.AirDate?.Year).Count(a => a == true) >=                                  prequelEps.Count * 2D / 3D;
Magic Number,Shoko.Server,TvDBLinkingHelper,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Providers\TvDB\TvDBLinkingHelper.cs,TryToMatchSeasonsByAirDates,The following statement contains a magic number: double epsilon = Math.Min(epsInSeasonOffset.Count' sequelEps.Count) * 2D / 3D;
Magic Number,Shoko.Server,TvDBLinkingHelper,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Providers\TvDB\TvDBLinkingHelper.cs,TryToMatchSeasonsByAirDates,The following statement contains a magic number: double epsilon = Math.Min(epsInSeasonOffset.Count' sequelEps.Count) * 2D / 3D;
Magic Number,Shoko.Server,TvDBLinkingHelper,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Providers\TvDB\TvDBLinkingHelper.cs,TryToMatchEpisodes1To1ByAirDate,The following statement contains a magic number: !aniair.Value.IsWithinErrorMargin(tvair.Value' TimeSpan.FromDays(1.5))
Magic Number,Shoko.Server,TvDBLinkingHelper,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Providers\TvDB\TvDBLinkingHelper.cs,CorrectMatchRatings,The following statement contains a magic number: datesMatch = aniair.Value.IsWithinErrorMargin(tvair.Value' TimeSpan.FromDays(1.5));
Magic Number,Shoko.Server,TvDBLinkingHelper,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Providers\TvDB\TvDBLinkingHelper.cs,TryToMatchEpisodesManyTo1ByAirDate,The following statement contains a magic number: !aniair.Value.IsWithinErrorMargin(tvair.Value' TimeSpan.FromDays(1.5))
Magic Number,Shoko.Server,TvDBLinkingHelper,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Providers\TvDB\TvDBLinkingHelper.cs,ToIso8601WeekNumber,The following statement contains a magic number: var thursday = date.AddDays(3 - date.DayOfWeek.DayOffset());
Magic Number,Shoko.Server,TvDBLinkingHelper,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Providers\TvDB\TvDBLinkingHelper.cs,ToIso8601WeekNumber,The following statement contains a magic number: return (thursday.DayOfYear - 1) / 7 + 1;
Magic Number,Shoko.Server,TvDBLinkingHelper,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Providers\TvDB\TvDBLinkingHelper.cs,DayOffset,The following statement contains a magic number: return ((int)weekDay + 6) % 7;
Magic Number,Shoko.Server,TvDBLinkingHelper,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Providers\TvDB\TvDBLinkingHelper.cs,DayOffset,The following statement contains a magic number: return ((int)weekDay + 6) % 7;
Magic Number,Shoko.Server,ShokoServer,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\ShokoServer.cs,StartCloudWatchTimer,The following statement contains a magic number: cloudWatchTimer = new Timer              {                  AutoReset = true'                  Interval = ServerSettings.Instance.CloudWatcherTime * 60 * 1000              };
Magic Number,Shoko.Server,ShokoServer,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\ShokoServer.cs,StartCloudWatchTimer,The following statement contains a magic number: cloudWatchTimer = new Timer              {                  AutoReset = true'                  Interval = ServerSettings.Instance.CloudWatcherTime * 60 * 1000              };
Magic Number,Shoko.Server,ShokoServer,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\ShokoServer.cs,StartLogRotatorTimer,The following statement contains a magic number: LogRotatorTimer = new Timer              {                  AutoReset = true'                  // 86400000 = 24h                  Interval = 86400000              };
Magic Number,Shoko.Server,ShokoServer,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\ShokoServer.cs,WorkerSetupDB_DoWork,The following statement contains a magic number: Thread.Sleep(250);
Magic Number,Shoko.Server,ShokoServer,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\ShokoServer.cs,WorkerSetupDB_DoWork,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,Shoko.Server,ShokoServer,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\ShokoServer.cs,WorkerSetupDB_DoWork,The following statement contains a magic number: autoUpdateTimer = new Timer                  {                      AutoReset = true'                      Interval = 5 * 60 * 1000 // 5 * 60 seconds (5 minutes)                  };
Magic Number,Shoko.Server,ShokoServer,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\ShokoServer.cs,WorkerSetupDB_DoWork,The following statement contains a magic number: autoUpdateTimer = new Timer                  {                      AutoReset = true'                      Interval = 5 * 60 * 1000 // 5 * 60 seconds (5 minutes)                  };
Magic Number,Shoko.Server,ShokoServer,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\ShokoServer.cs,WorkerSetupDB_DoWork,The following statement contains a magic number: autoUpdateTimer = new Timer                  {                      AutoReset = true'                      Interval = 5 * 60 * 1000 // 5 * 60 seconds (5 minutes)                  };
Magic Number,Shoko.Server,ShokoServer,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\ShokoServer.cs,WorkerSetupDB_DoWork,The following statement contains a magic number: autoUpdateTimerShort = new Timer                  {                      AutoReset = true'                      Interval = 5 * 1000 // 5 seconds' later we set it to 30 seconds                  };
Magic Number,Shoko.Server,ShokoServer,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\ShokoServer.cs,WorkerSetupDB_DoWork,The following statement contains a magic number: autoUpdateTimerShort = new Timer                  {                      AutoReset = true'                      Interval = 5 * 1000 // 5 seconds' later we set it to 30 seconds                  };
Magic Number,Shoko.Server,ShokoServer,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\ShokoServer.cs,WorkerSetupDB_DoWork,The following statement contains a magic number: workerSetupDB.ReportProgress(100);
Magic Number,Shoko.Server,ShokoServer,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\ShokoServer.cs,CheckForUpdatesNew,The following statement contains a magic number: verCurrent = an.Version.Revision * 100 +                               an.Version.Build * 100 * 100 +                               an.Version.Minor * 100 * 100 * 100 +                               an.Version.Major * 100 * 100 * 100 * 100;
Magic Number,Shoko.Server,ShokoServer,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\ShokoServer.cs,CheckForUpdatesNew,The following statement contains a magic number: verCurrent = an.Version.Revision * 100 +                               an.Version.Build * 100 * 100 +                               an.Version.Minor * 100 * 100 * 100 +                               an.Version.Major * 100 * 100 * 100 * 100;
Magic Number,Shoko.Server,ShokoServer,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\ShokoServer.cs,CheckForUpdatesNew,The following statement contains a magic number: verCurrent = an.Version.Revision * 100 +                               an.Version.Build * 100 * 100 +                               an.Version.Minor * 100 * 100 * 100 +                               an.Version.Major * 100 * 100 * 100 * 100;
Magic Number,Shoko.Server,ShokoServer,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\ShokoServer.cs,CheckForUpdatesNew,The following statement contains a magic number: verCurrent = an.Version.Revision * 100 +                               an.Version.Build * 100 * 100 +                               an.Version.Minor * 100 * 100 * 100 +                               an.Version.Major * 100 * 100 * 100 * 100;
Magic Number,Shoko.Server,ShokoServer,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\ShokoServer.cs,CheckForUpdatesNew,The following statement contains a magic number: verCurrent = an.Version.Revision * 100 +                               an.Version.Build * 100 * 100 +                               an.Version.Minor * 100 * 100 * 100 +                               an.Version.Major * 100 * 100 * 100 * 100;
Magic Number,Shoko.Server,ShokoServer,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\ShokoServer.cs,CheckForUpdatesNew,The following statement contains a magic number: verCurrent = an.Version.Revision * 100 +                               an.Version.Build * 100 * 100 +                               an.Version.Minor * 100 * 100 * 100 +                               an.Version.Major * 100 * 100 * 100 * 100;
Magic Number,Shoko.Server,ShokoServer,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\ShokoServer.cs,CheckForUpdatesNew,The following statement contains a magic number: verCurrent = an.Version.Revision * 100 +                               an.Version.Build * 100 * 100 +                               an.Version.Minor * 100 * 100 * 100 +                               an.Version.Major * 100 * 100 * 100 * 100;
Magic Number,Shoko.Server,ShokoServer,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\ShokoServer.cs,CheckForUpdatesNew,The following statement contains a magic number: verCurrent = an.Version.Revision * 100 +                               an.Version.Build * 100 * 100 +                               an.Version.Minor * 100 * 100 * 100 +                               an.Version.Major * 100 * 100 * 100 * 100;
Magic Number,Shoko.Server,ShokoServer,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\ShokoServer.cs,CheckForUpdatesNew,The following statement contains a magic number: verCurrent = an.Version.Revision * 100 +                               an.Version.Build * 100 * 100 +                               an.Version.Minor * 100 * 100 * 100 +                               an.Version.Major * 100 * 100 * 100 * 100;
Magic Number,Shoko.Server,ShokoServer,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\ShokoServer.cs,CheckForUpdatesNew,The following statement contains a magic number: verCurrent = an.Version.Revision * 100 +                               an.Version.Build * 100 * 100 +                               an.Version.Minor * 100 * 100 * 100 +                               an.Version.Major * 100 * 100 * 100 * 100;
Magic Number,Shoko.Server,ShokoServer,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\ShokoServer.cs,AutoUpdateTimerShort_Elapsed,The following statement contains a magic number: autoUpdateTimerShort.Interval = 30 * 1000;
Magic Number,Shoko.Server,ShokoServer,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\ShokoServer.cs,AutoUpdateTimerShort_Elapsed,The following statement contains a magic number: autoUpdateTimerShort.Interval = 30 * 1000;
Magic Number,Shoko.Server,ShokoServer,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\ShokoServer.cs,CheckForAdminMesages,The following statement contains a magic number: lastUpdate.TotalHours > 5
Magic Number,Shoko.Server,ShokoServer,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\ShokoServer.cs,AniDBDispose,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,Shoko.Server,ShokoServer,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\ShokoServer.cs,ReviewsTest,The following statement contains a magic number: CommandRequest_GetReviews cmd = new CommandRequest_GetReviews(7525' true);
Magic Number,Shoko.Server,ShokoServer,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\ShokoServer.cs,ProcessFileTest,The following statement contains a magic number: CommandRequest_ProcessFile cr_procfile = new CommandRequest_ProcessFile(15350' false);
Magic Number,Shoko.Server,ShokoServer,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\ShokoServer.cs,CreateTestCommandRequests,The following statement contains a magic number: CommandRequest_GetAnimeHTTP cr_anime = new CommandRequest_GetAnimeHTTP(5415' false' true);
Magic Number,Shoko.Server,ShokoServiceImplementationImage,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v1\Implementations\ShokoServiceImplementationImage.cs,ResizeToRatio,The following statement contains a magic number: Math.Abs(newratio) < 0.001D
Magic Number,Shoko.Server,ShokoServiceImplementationImage,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v1\Implementations\ShokoServiceImplementationImage.cs,ResizeToRatio,The following statement contains a magic number: nheight > im.Height + 0.5F
Magic Number,Shoko.Server,ShokoServiceImplementationImage,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v1\Implementations\ShokoServiceImplementationImage.cs,ResizeToRatio,The following statement contains a magic number: x = (im.Width - newwidth) / 2;
Magic Number,Shoko.Server,ShokoServiceImplementationImage,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v1\Implementations\ShokoServiceImplementationImage.cs,ResizeToRatio,The following statement contains a magic number: y = (im.Height - newheight) / 2;
Magic Number,Shoko.Server,ShokoServiceImplementationImage,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v1\Implementations\ShokoServiceImplementationImage.cs,GetSupportImage,The following statement contains a magic number: !name.Contains("404") || (ratio == null || Math.Abs(ratio.Value) < 0.001D)
Magic Number,Shoko.Server,ShokoServiceImplementationImage,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v1\Implementations\ShokoServiceImplementationImage.cs,GetSupportImage,The following statement contains a magic number: Rectangle dst = new Rectangle((int) ((nw - w) / 2)' (int) ((nh - h) / 2)' im.Width' im.Height);
Magic Number,Shoko.Server,ShokoServiceImplementationImage,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v1\Implementations\ShokoServiceImplementationImage.cs,GetSupportImage,The following statement contains a magic number: Rectangle dst = new Rectangle((int) ((nw - w) / 2)' (int) ((nh - h) / 2)' im.Width' im.Height);
Magic Number,Shoko.Server,LogRotator,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LogRotator.cs,GetDateTime,The following statement contains a magic number: filename = filename.Substring(0' filename.Length - 4);
Magic Number,Shoko.Server,MigrationDirectory,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\MigrationDirectory.cs,RecursiveDirSize,The following statement contains a magic number: size += 2048;
Magic Number,Shoko.Server,BlockingList<T>,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\BlockingList.cs,Add,The following statement contains a magic number: Monitor.Wait(_syncRoot' 100);
Magic Number,Shoko.Server,BlockingList<T>,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\BlockingList.cs,GetNextItem,The following statement contains a magic number: Monitor.Wait(_syncRoot' 100);
Magic Number,Shoko.Server,AVDumpHelper,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utilities\AVDumpHelper.cs,CopyStream,The following statement contains a magic number: byte[] buffer = new byte[8 * 1024];
Magic Number,Shoko.Server,AVDumpHelper,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utilities\AVDumpHelper.cs,CopyStream,The following statement contains a magic number: byte[] buffer = new byte[8 * 1024];
Magic Number,Shoko.Server,AVDumpHelper,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utilities\AVDumpHelper.cs,GetFilenameAndArgsForOS,The following statement contains a magic number: string fileName = (char)34 + file + (char)34;
Magic Number,Shoko.Server,AVDumpHelper,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utilities\AVDumpHelper.cs,GetFilenameAndArgsForOS,The following statement contains a magic number: string fileName = (char)34 + file + (char)34;
Magic Number,Shoko.Server,TagFilter,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utilities\TagFilter.cs,ProcessTags,The following statement contains a magic number: List<string> toRemove = new List<string>((int)Math.Ceiling(strings.Count / 2D));
Magic Number,Shoko.Server,ShokoServiceImplementationStream,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v1\Implementations\ShokoServiceImplementationStream.cs,StreamFromIFile,The following statement contains a magic number: split.Length == 2
Magic Number,Shoko.Server,Scanner,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Scanner.cs,CancelScan,The following statement contains a magic number: Thread.Sleep(100);
Magic Number,Shoko.Server,TimeUpdater<T;U>,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\TimeUpdater.cs,TimeUpdater,The following statement contains a magic number: timer = new Timer(UpdateStateWorker' null' seconds * 1000' seconds * 1000);
Magic Number,Shoko.Server,TimeUpdater<T;U>,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\TimeUpdater.cs,TimeUpdater,The following statement contains a magic number: timer = new Timer(UpdateStateWorker' null' seconds * 1000' seconds * 1000);
Magic Number,Shoko.Server,TimeUpdater<T;U>,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\TimeUpdater.cs,UpdateStateWorker,The following statement contains a magic number: Task.Run(() =>                  {                      foreach (T ser in procdic.Keys)                      {                          DateJoinU p = procdic[ser];                          action(ser' p.Parameters);                      }                      timer.Change(timeout * 1000' timeout * 1000);                  });
Magic Number,Shoko.Server,TimeUpdater<T;U>,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\TimeUpdater.cs,UpdateStateWorker,The following statement contains a magic number: Task.Run(() =>                  {                      foreach (T ser in procdic.Keys)                      {                          DateJoinU p = procdic[ser];                          action(ser' p.Parameters);                      }                      timer.Change(timeout * 1000' timeout * 1000);                  });
Magic Number,Shoko.Server,GroupFilterHelper,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utilities\GroupFilterHelper.cs,GetDateAsString,The following statement contains a magic number: return aDate.Year.ToString().PadLeft(4' '0') +                     aDate.Month.ToString().PadLeft(2' '0') +                     aDate.Day.ToString().PadLeft(2' '0');
Magic Number,Shoko.Server,GroupFilterHelper,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utilities\GroupFilterHelper.cs,GetDateAsString,The following statement contains a magic number: return aDate.Year.ToString().PadLeft(4' '0') +                     aDate.Month.ToString().PadLeft(2' '0') +                     aDate.Day.ToString().PadLeft(2' '0');
Magic Number,Shoko.Server,GroupFilterHelper,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utilities\GroupFilterHelper.cs,GetDateAsString,The following statement contains a magic number: return aDate.Year.ToString().PadLeft(4' '0') +                     aDate.Month.ToString().PadLeft(2' '0') +                     aDate.Day.ToString().PadLeft(2' '0');
Magic Number,Shoko.Server,GroupFilterHelper,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utilities\GroupFilterHelper.cs,GetDateFromString,The following statement contains a magic number: int year = int.Parse(sDate.Substring(0' 4));
Magic Number,Shoko.Server,GroupFilterHelper,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utilities\GroupFilterHelper.cs,GetDateFromString,The following statement contains a magic number: int month = int.Parse(sDate.Substring(4' 2));
Magic Number,Shoko.Server,GroupFilterHelper,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utilities\GroupFilterHelper.cs,GetDateFromString,The following statement contains a magic number: int month = int.Parse(sDate.Substring(4' 2));
Magic Number,Shoko.Server,GroupFilterHelper,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utilities\GroupFilterHelper.cs,GetDateFromString,The following statement contains a magic number: int day = int.Parse(sDate.Substring(6' 2));
Magic Number,Shoko.Server,GroupFilterHelper,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utilities\GroupFilterHelper.cs,GetDateFromString,The following statement contains a magic number: int day = int.Parse(sDate.Substring(6' 2));
Magic Number,Shoko.Server,Utils,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utils.cs,GetParentMethodName,The following statement contains a magic number: StackFrame stackFrame = stackTrace.GetFrame(2);
Magic Number,Shoko.Server,Utils,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utils.cs,GetCurrentUTCTime,The following statement contains a magic number: TimeSpan sp = dt.Subtract(new DateTime(1970' 1' 1' 0' 0' 0));
Magic Number,Shoko.Server,Utils,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utils.cs,ReparseDescription,The following statement contains a magic number: val = val.Substring(0' a) + val.Substring(a + 6);
Magic Number,Shoko.Server,Utils,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utils.cs,ReparseDescription,The following statement contains a magic number: val = val.Substring(0' a) + " " + val.Substring(b + 2' c - b - 2) + val.Substring(c + 1);
Magic Number,Shoko.Server,Utils,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utils.cs,ReparseDescription,The following statement contains a magic number: val = val.Substring(0' a) + " " + val.Substring(b + 2' c - b - 2) + val.Substring(c + 1);
Magic Number,Shoko.Server,Utils,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utils.cs,FormatSecondsToDisplayTime,The following statement contains a magic number: return $"{t.Hours}:{t.Minutes.ToString().PadLeft(2' '0')}:{t.Seconds.ToString().PadLeft(2' '0')}";
Magic Number,Shoko.Server,Utils,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utils.cs,FormatSecondsToDisplayTime,The following statement contains a magic number: return $"{t.Hours}:{t.Minutes.ToString().PadLeft(2' '0')}:{t.Seconds.ToString().PadLeft(2' '0')}";
Magic Number,Shoko.Server,Utils,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utils.cs,FormatSecondsToDisplayTime,The following statement contains a magic number: return $"{t.Minutes}:{t.Seconds.ToString().PadLeft(2' '0')}";
Magic Number,Shoko.Server,Utils,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utils.cs,FormatAniDBRating,The following statement contains a magic number: rat /= 100;
Magic Number,Shoko.Server,Utils,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utils.cs,GetSortName,The following statement contains a magic number: newName = newName.Remove(0' 4);
Magic Number,Shoko.Server,Utils,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utils.cs,GetSortName,The following statement contains a magic number: newName = newName.Remove(0' 2);
Magic Number,Shoko.Server,Utils,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utils.cs,GetOSInfo,The following statement contains a magic number: switch (vs.Minor)                  {                      case 0:                          operatingSystem = "95";                          break;                      case 10:                          if (vs.Revision.ToString() == "2222A")                              operatingSystem = "98SE";                          else                              operatingSystem = "98";                          break;                      case 90:                          operatingSystem = "Me";                          break;                  }
Magic Number,Shoko.Server,Utils,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utils.cs,GetOSInfo,The following statement contains a magic number: switch (vs.Minor)                  {                      case 0:                          operatingSystem = "95";                          break;                      case 10:                          if (vs.Revision.ToString() == "2222A")                              operatingSystem = "98SE";                          else                              operatingSystem = "98";                          break;                      case 90:                          operatingSystem = "Me";                          break;                  }
Magic Number,Shoko.Server,Utils,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utils.cs,FormatByteSize,The following statement contains a magic number: StringBuilder sbBuffer = new StringBuilder(20);
Magic Number,Shoko.Server,Utils,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utils.cs,FormatByteSize,The following statement contains a magic number: StrFormatByteSize(fileSize' sbBuffer' 20);
Magic Number,Shoko.Server,Utils,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utils.cs,GetBytesReadable,The following statement contains a magic number: readable = (i >> 50);
Magic Number,Shoko.Server,Utils,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utils.cs,GetBytesReadable,The following statement contains a magic number: readable = (readable / 1024);
Magic Number,Shoko.Server,Utils,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utils.cs,GetScheduledHours,The following statement contains a magic number: switch (freq)              {                  case ScheduledUpdateFrequency.Daily:                      return 24;                  case ScheduledUpdateFrequency.HoursSix:                      return 6;                  case ScheduledUpdateFrequency.HoursTwelve:                      return 12;                  case ScheduledUpdateFrequency.WeekOne:                      return 24 * 7;                  case ScheduledUpdateFrequency.MonthOne:                      return 24 * 30;                  case ScheduledUpdateFrequency.Never:                      return int.MaxValue;              }
Magic Number,Shoko.Server,Utils,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utils.cs,GetScheduledHours,The following statement contains a magic number: switch (freq)              {                  case ScheduledUpdateFrequency.Daily:                      return 24;                  case ScheduledUpdateFrequency.HoursSix:                      return 6;                  case ScheduledUpdateFrequency.HoursTwelve:                      return 12;                  case ScheduledUpdateFrequency.WeekOne:                      return 24 * 7;                  case ScheduledUpdateFrequency.MonthOne:                      return 24 * 30;                  case ScheduledUpdateFrequency.Never:                      return int.MaxValue;              }
Magic Number,Shoko.Server,Utils,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utils.cs,GetScheduledHours,The following statement contains a magic number: switch (freq)              {                  case ScheduledUpdateFrequency.Daily:                      return 24;                  case ScheduledUpdateFrequency.HoursSix:                      return 6;                  case ScheduledUpdateFrequency.HoursTwelve:                      return 12;                  case ScheduledUpdateFrequency.WeekOne:                      return 24 * 7;                  case ScheduledUpdateFrequency.MonthOne:                      return 24 * 30;                  case ScheduledUpdateFrequency.Never:                      return int.MaxValue;              }
Magic Number,Shoko.Server,Utils,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utils.cs,GetScheduledHours,The following statement contains a magic number: switch (freq)              {                  case ScheduledUpdateFrequency.Daily:                      return 24;                  case ScheduledUpdateFrequency.HoursSix:                      return 6;                  case ScheduledUpdateFrequency.HoursTwelve:                      return 12;                  case ScheduledUpdateFrequency.WeekOne:                      return 24 * 7;                  case ScheduledUpdateFrequency.MonthOne:                      return 24 * 30;                  case ScheduledUpdateFrequency.Never:                      return int.MaxValue;              }
Magic Number,Shoko.Server,Utils,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utils.cs,GetScheduledHours,The following statement contains a magic number: switch (freq)              {                  case ScheduledUpdateFrequency.Daily:                      return 24;                  case ScheduledUpdateFrequency.HoursSix:                      return 6;                  case ScheduledUpdateFrequency.HoursTwelve:                      return 12;                  case ScheduledUpdateFrequency.WeekOne:                      return 24 * 7;                  case ScheduledUpdateFrequency.MonthOne:                      return 24 * 30;                  case ScheduledUpdateFrequency.Never:                      return int.MaxValue;              }
Magic Number,Shoko.Server,Utils,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utils.cs,GetScheduledHours,The following statement contains a magic number: switch (freq)              {                  case ScheduledUpdateFrequency.Daily:                      return 24;                  case ScheduledUpdateFrequency.HoursSix:                      return 6;                  case ScheduledUpdateFrequency.HoursTwelve:                      return 12;                  case ScheduledUpdateFrequency.WeekOne:                      return 24 * 7;                  case ScheduledUpdateFrequency.MonthOne:                      return 24 * 30;                  case ScheduledUpdateFrequency.Never:                      return int.MaxValue;              }
Magic Number,Shoko.Server,Utils,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utils.cs,GetScheduledHours,The following statement contains a magic number: switch (freq)              {                  case ScheduledUpdateFrequency.Daily:                      return 24;                  case ScheduledUpdateFrequency.HoursSix:                      return 6;                  case ScheduledUpdateFrequency.HoursTwelve:                      return 12;                  case ScheduledUpdateFrequency.WeekOne:                      return 24 * 7;                  case ScheduledUpdateFrequency.MonthOne:                      return 24 * 30;                  case ScheduledUpdateFrequency.Never:                      return int.MaxValue;              }
Magic Number,AniDBAPI,AniDBHTTPHelper,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\AniDBHTTPHelper.cs,GetAnimeXMLFromAPI,The following statement contains a magic number: content = content.Substring(0' 100);
Magic Number,AniDBAPI,AniDBHTTPHelper,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\AniDBHTTPHelper.cs,GetAnimeXMLFromAPI,The following statement contains a magic number: content.Length > 100
Magic Number,AniDBAPI,AniDBHTTPHelper,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\AniDBHTTPHelper.cs,ProcessAnimeDetails,The following statement contains a magic number: iRating = (int) Math.Round(iRating * 100);
Magic Number,AniDBAPI,AniDBHTTPHelper,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\AniDBHTTPHelper.cs,ConvertReltTypeTextToEnum,The following statement contains a magic number: return 2;
Magic Number,AniDBAPI,AniDBHTTPHelper,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\AniDBHTTPHelper.cs,ConvertReltTypeTextToEnum,The following statement contains a magic number: return 11;
Magic Number,AniDBAPI,AniDBHTTPHelper,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\AniDBHTTPHelper.cs,ConvertReltTypeTextToEnum,The following statement contains a magic number: return 21;
Magic Number,AniDBAPI,AniDBHTTPHelper,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\AniDBHTTPHelper.cs,ConvertReltTypeTextToEnum,The following statement contains a magic number: return 32;
Magic Number,AniDBAPI,AniDBHTTPHelper,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\AniDBHTTPHelper.cs,ConvertReltTypeTextToEnum,The following statement contains a magic number: return 41;
Magic Number,AniDBAPI,AniDBHTTPHelper,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\AniDBHTTPHelper.cs,ConvertReltTypeTextToEnum,The following statement contains a magic number: return 42;
Magic Number,AniDBAPI,AniDBHTTPHelper,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\AniDBHTTPHelper.cs,ConvertReltTypeTextToEnum,The following statement contains a magic number: return 51;
Magic Number,AniDBAPI,AniDBHTTPHelper,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\AniDBHTTPHelper.cs,ConvertReltTypeTextToEnum,The following statement contains a magic number: return 52;
Magic Number,AniDBAPI,AniDBHTTPHelper,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\AniDBHTTPHelper.cs,ConvertReltTypeTextToEnum,The following statement contains a magic number: return 61;
Magic Number,AniDBAPI,AniDBHTTPHelper,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\AniDBHTTPHelper.cs,ConvertReltTypeTextToEnum,The following statement contains a magic number: return 62;
Magic Number,AniDBAPI,AniDBHTTPHelper,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\AniDBHTTPHelper.cs,ConvertReltTypeTextToEnum,The following statement contains a magic number: return 100;
Magic Number,AniDBAPI,CalendarCollection,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Calendar.cs,CalendarCollection,The following statement contains a magic number: sDetails.Length <= 2
Magic Number,AniDBAPI,CalendarCollection,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Calendar.cs,CalendarCollection,The following statement contains a magic number: cal.DateFlags = int.Parse(flds[2]);
Magic Number,AniDBAPI,GroupStatusCollection,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\GroupStatusCollection.cs,GroupStatusCollection,The following statement contains a magic number: sDetails.Length <= 2
Magic Number,AniDBAPI,GroupStatusCollection,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\GroupStatusCollection.cs,GroupStatusCollection,The following statement contains a magic number: grp.CompletionState = int.Parse(flds[2]);
Magic Number,AniDBAPI,GroupStatusCollection,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\GroupStatusCollection.cs,GroupStatusCollection,The following statement contains a magic number: grp.LastEpisodeNumber = int.Parse(flds[3]);
Magic Number,AniDBAPI,GroupStatusCollection,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\GroupStatusCollection.cs,GroupStatusCollection,The following statement contains a magic number: grp.Rating = int.Parse(flds[4]);
Magic Number,AniDBAPI,GroupStatusCollection,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\GroupStatusCollection.cs,GroupStatusCollection,The following statement contains a magic number: grp.Votes = int.Parse(flds[5]);
Magic Number,AniDBAPI,GroupStatusCollection,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\GroupStatusCollection.cs,GroupStatusCollection,The following statement contains a magic number: grp.EpisodeRange = flds[6];
Magic Number,AniDBAPI,Raw_AniDB_Anime,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Raws\Raw_AniDB_Anime.cs,Raw_AniDB_Anime,The following statement contains a magic number: string[] sDetails = sRecMessage.Substring(10).Split('|');
Magic Number,AniDBAPI,Raw_AniDB_Anime,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Raws\Raw_AniDB_Anime.cs,Raw_AniDB_Anime,The following statement contains a magic number: AnimeTypeRAW = AniDBAPILib.ProcessAniDBString(sDetails[2]);
Magic Number,AniDBAPI,Raw_AniDB_Anime,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Raws\Raw_AniDB_Anime.cs,Raw_AniDB_Anime,The following statement contains a magic number: RelatedAnimeIdsRAW = AniDBAPILib.ProcessAniDBString(sDetails[3]);
Magic Number,AniDBAPI,Raw_AniDB_Anime,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Raws\Raw_AniDB_Anime.cs,Raw_AniDB_Anime,The following statement contains a magic number: RelatedAnimeTypesRAW = AniDBAPILib.ProcessAniDBString(sDetails[4]);
Magic Number,AniDBAPI,Raw_AniDB_Anime,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Raws\Raw_AniDB_Anime.cs,Raw_AniDB_Anime,The following statement contains a magic number: EpisodeCount = AniDBAPILib.ProcessAniDBInt(sDetails[13]);
Magic Number,AniDBAPI,Raw_AniDB_Anime,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Raws\Raw_AniDB_Anime.cs,Raw_AniDB_Anime,The following statement contains a magic number: EpisodeCountNormal = AniDBAPILib.ProcessAniDBInt(sDetails[14]);
Magic Number,AniDBAPI,Raw_AniDB_Anime,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Raws\Raw_AniDB_Anime.cs,Raw_AniDB_Anime,The following statement contains a magic number: EpisodeCountSpecial = AniDBAPILib.ProcessAniDBInt(sDetails[15]);
Magic Number,AniDBAPI,Raw_AniDB_Anime,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Raws\Raw_AniDB_Anime.cs,Raw_AniDB_Anime,The following statement contains a magic number: int airDateSeconds = int.Parse(AniDBAPILib.ProcessAniDBString(sDetails[16]));
Magic Number,AniDBAPI,Raw_AniDB_Anime,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Raws\Raw_AniDB_Anime.cs,Raw_AniDB_Anime,The following statement contains a magic number: int endDateSeconds = int.Parse(AniDBAPILib.ProcessAniDBString(sDetails[17]));
Magic Number,AniDBAPI,Raw_AniDB_Anime,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Raws\Raw_AniDB_Anime.cs,Raw_AniDB_Anime,The following statement contains a magic number: URL = AniDBAPILib.ProcessAniDBString(sDetails[18]);
Magic Number,AniDBAPI,Raw_AniDB_Anime,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Raws\Raw_AniDB_Anime.cs,Raw_AniDB_Anime,The following statement contains a magic number: Picname = AniDBAPILib.ProcessAniDBString(sDetails[19]);
Magic Number,AniDBAPI,Raw_AniDB_Anime,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Raws\Raw_AniDB_Anime.cs,Raw_AniDB_Anime,The following statement contains a magic number: Rating = AniDBAPILib.ProcessAniDBInt(sDetails[21]);
Magic Number,AniDBAPI,Raw_AniDB_Anime,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Raws\Raw_AniDB_Anime.cs,Raw_AniDB_Anime,The following statement contains a magic number: VoteCount = AniDBAPILib.ProcessAniDBInt(sDetails[22]);
Magic Number,AniDBAPI,Raw_AniDB_Anime,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Raws\Raw_AniDB_Anime.cs,Raw_AniDB_Anime,The following statement contains a magic number: TempRating = AniDBAPILib.ProcessAniDBInt(sDetails[23]);
Magic Number,AniDBAPI,Raw_AniDB_Anime,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Raws\Raw_AniDB_Anime.cs,Raw_AniDB_Anime,The following statement contains a magic number: TempVoteCount = AniDBAPILib.ProcessAniDBInt(sDetails[24]);
Magic Number,AniDBAPI,Raw_AniDB_Anime,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Raws\Raw_AniDB_Anime.cs,Raw_AniDB_Anime,The following statement contains a magic number: AvgReviewRating = AniDBAPILib.ProcessAniDBInt(sDetails[25]);
Magic Number,AniDBAPI,Raw_AniDB_Anime,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Raws\Raw_AniDB_Anime.cs,Raw_AniDB_Anime,The following statement contains a magic number: ReviewCount = AniDBAPILib.ProcessAniDBInt(sDetails[26]);
Magic Number,AniDBAPI,Raw_AniDB_Anime,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Raws\Raw_AniDB_Anime.cs,Raw_AniDB_Anime,The following statement contains a magic number: AwardList = AniDBAPILib.ProcessAniDBString(sDetails[27]);
Magic Number,AniDBAPI,Raw_AniDB_Anime,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Raws\Raw_AniDB_Anime.cs,Raw_AniDB_Anime,The following statement contains a magic number: Restricted = AniDBAPILib.ProcessAniDBInt(sDetails[28]);
Magic Number,AniDBAPI,Raw_AniDB_Anime,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Raws\Raw_AniDB_Anime.cs,Raw_AniDB_Anime,The following statement contains a magic number: AnimePlanetID = AniDBAPILib.ProcessAniDBInt(sDetails[29]);
Magic Number,AniDBAPI,Raw_AniDB_Anime,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Raws\Raw_AniDB_Anime.cs,Raw_AniDB_Anime,The following statement contains a magic number: ANNID = AniDBAPILib.ProcessAniDBInt(sDetails[30]);
Magic Number,AniDBAPI,Raw_AniDB_Anime,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Raws\Raw_AniDB_Anime.cs,Raw_AniDB_Anime,The following statement contains a magic number: AllCinemaID = AniDBAPILib.ProcessAniDBInt(sDetails[31]);
Magic Number,AniDBAPI,Raw_AniDB_Anime,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Raws\Raw_AniDB_Anime.cs,Raw_AniDB_Anime,The following statement contains a magic number: AnimeNfoID = AniDBAPILib.ProcessAniDBString(sDetails[32]);
Magic Number,AniDBAPI,Raw_AniDB_Anime,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Raws\Raw_AniDB_Anime.cs,Raw_AniDB_Anime,The following statement contains a magic number: DateRecordUpdated = AniDBAPILib.ProcessAniDBString(sDetails[33]);
Magic Number,AniDBAPI,Raw_AniDB_Anime,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Raws\Raw_AniDB_Anime.cs,Raw_AniDB_Anime,The following statement contains a magic number: CharacterIDListRAW = AniDBAPILib.ProcessAniDBString(sDetails[34]);
Magic Number,AniDBAPI,Raw_AniDB_Anime,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Raws\Raw_AniDB_Anime.cs,Raw_AniDB_Anime,The following statement contains a magic number: ReviewIDListRAW = AniDBAPILib.ProcessAniDBString(sDetails[35]);
Magic Number,AniDBAPI,Raw_AniDB_Anime,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Raws\Raw_AniDB_Anime.cs,Raw_AniDB_Anime,The following statement contains a magic number: GenreRAW = sDetails[5];
Magic Number,AniDBAPI,Raw_AniDB_AnimeDesc,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Raws\Raw_AniDB_AnimeDesc.cs,Raw_AniDB_AnimeDesc,The following statement contains a magic number: string[] sDetails = sRecMessage.Substring(14).Split('|');
Magic Number,AniDBAPI,Raw_AniDB_AnimeDesc,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Raws\Raw_AniDB_AnimeDesc.cs,Raw_AniDB_AnimeDesc,The following statement contains a magic number: this.Description = AniDBAPILib.ProcessAniDBString(sDetails[2]);
Magic Number,AniDBAPI,Raw_AniDB_Character,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Raws\Raw_AniDB_Character.cs,Raw_AniDB_Character,The following statement contains a magic number: string[] sDetails = sRecMessage.Substring(14).Split('|');
Magic Number,AniDBAPI,Raw_AniDB_Character,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Raws\Raw_AniDB_Character.cs,Raw_AniDB_Character,The following statement contains a magic number: CharName = AniDBAPILib.ProcessAniDBString(sDetails[2].Trim());
Magic Number,AniDBAPI,Raw_AniDB_Character,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Raws\Raw_AniDB_Character.cs,Raw_AniDB_Character,The following statement contains a magic number: PicName = AniDBAPILib.ProcessAniDBString(sDetails[3].Trim());
Magic Number,AniDBAPI,Raw_AniDB_Character,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Raws\Raw_AniDB_Character.cs,Raw_AniDB_Character,The following statement contains a magic number: CreatorListRaw = AniDBAPILib.ProcessAniDBString(sDetails[4].Trim().Replace("'"' "|"));
Magic Number,AniDBAPI,Raw_AniDB_Creator,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Raws\Raw_AniDB_Creator.cs,Raw_AniDB_Creator,The following statement contains a magic number: string[] sDetails = sRecMessage.Substring(12).Split('|');
Magic Number,AniDBAPI,Raw_AniDB_Creator,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Raws\Raw_AniDB_Creator.cs,Raw_AniDB_Creator,The following statement contains a magic number: CreatorName = AniDBAPILib.ProcessAniDBString(sDetails[2].Trim());
Magic Number,AniDBAPI,Raw_AniDB_Creator,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Raws\Raw_AniDB_Creator.cs,Raw_AniDB_Creator,The following statement contains a magic number: CreatorType = AniDBAPILib.ProcessAniDBInt(AniDBAPILib.ProcessAniDBString(sDetails[3].Trim()));
Magic Number,AniDBAPI,Raw_AniDB_Creator,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Raws\Raw_AniDB_Creator.cs,Raw_AniDB_Creator,The following statement contains a magic number: PicName = AniDBAPILib.ProcessAniDBString(sDetails[4].Trim());
Magic Number,AniDBAPI,Raw_AniDB_Creator,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Raws\Raw_AniDB_Creator.cs,Raw_AniDB_Creator,The following statement contains a magic number: URLEnglish = AniDBAPILib.ProcessAniDBString(sDetails[5].Trim());
Magic Number,AniDBAPI,Raw_AniDB_Creator,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Raws\Raw_AniDB_Creator.cs,Raw_AniDB_Creator,The following statement contains a magic number: URLJapanese = AniDBAPILib.ProcessAniDBString(sDetails[6].Trim());
Magic Number,AniDBAPI,Raw_AniDB_Creator,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Raws\Raw_AniDB_Creator.cs,Raw_AniDB_Creator,The following statement contains a magic number: URLWikiEnglish = AniDBAPILib.ProcessAniDBString(sDetails[7].Trim());
Magic Number,AniDBAPI,Raw_AniDB_Creator,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Raws\Raw_AniDB_Creator.cs,Raw_AniDB_Creator,The following statement contains a magic number: URLWikiJapanese = AniDBAPILib.ProcessAniDBString(sDetails[8].Trim());
Magic Number,AniDBAPI,Raw_AniDB_Episode,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Raws\Raw_AniDB_Episode.cs,ProcessEpisodeSource,The following statement contains a magic number: int secs = lMinutes * 60;
Magic Number,AniDBAPI,Raw_AniDB_File,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Raws\Raw_AniDB_File.cs,Raw_AniDB_File,The following statement contains a magic number: string[] sDetails = sRecMessage.Substring(9).Split('|');
Magic Number,AniDBAPI,Raw_AniDB_File,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Raws\Raw_AniDB_File.cs,Raw_AniDB_File,The following statement contains a magic number: this.FileSize = long.Parse(sDetails[8].Trim());
Magic Number,AniDBAPI,Raw_AniDB_File,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Raws\Raw_AniDB_File.cs,Raw_AniDB_File,The following statement contains a magic number: this.ED2KHash = AniDBAPILib.ProcessAniDBString(sDetails[9].Trim()).ToUpper();
Magic Number,AniDBAPI,Raw_AniDB_File,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Raws\Raw_AniDB_File.cs,Raw_AniDB_File,The following statement contains a magic number: this.MD5 = AniDBAPILib.ProcessAniDBString(sDetails[10].Trim()).ToUpper();
Magic Number,AniDBAPI,Raw_AniDB_File,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Raws\Raw_AniDB_File.cs,Raw_AniDB_File,The following statement contains a magic number: this.SHA1 = AniDBAPILib.ProcessAniDBString(sDetails[11].Trim()).ToUpper();
Magic Number,AniDBAPI,Raw_AniDB_File,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Raws\Raw_AniDB_File.cs,Raw_AniDB_File,The following statement contains a magic number: this.CRC = AniDBAPILib.ProcessAniDBString(sDetails[12].Trim()).ToUpper();
Magic Number,AniDBAPI,Raw_AniDB_File,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Raws\Raw_AniDB_File.cs,Raw_AniDB_File,The following statement contains a magic number: int state = int.Parse(sDetails[7].Trim());
Magic Number,AniDBAPI,Raw_AniDB_File,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Raws\Raw_AniDB_File.cs,Raw_AniDB_File,The following statement contains a magic number: int.TryParse(sDetails[6].Trim()' out int isdep)
Magic Number,AniDBAPI,Raw_AniDB_File,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Raws\Raw_AniDB_File.cs,Raw_AniDB_File,The following statement contains a magic number: EpisodesRAW = sDetails[2].Trim();
Magic Number,AniDBAPI,Raw_AniDB_File,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Raws\Raw_AniDB_File.cs,Raw_AniDB_File,The following statement contains a magic number: string[] Eps = sDetails[5].Trim().Split('\'');
Magic Number,AniDBAPI,Raw_AniDB_File,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Raws\Raw_AniDB_File.cs,Raw_AniDB_File,The following statement contains a magic number: sDetails[5].Trim().Length > 0
Magic Number,AniDBAPI,Raw_AniDB_File,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Raws\Raw_AniDB_File.cs,Raw_AniDB_File,The following statement contains a magic number: GroupID = int.Parse(sDetails[3].Trim());
Magic Number,AniDBAPI,Raw_AniDB_File,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Raws\Raw_AniDB_File.cs,Raw_AniDB_File,The following statement contains a magic number: File_Source = AniDBAPILib.ProcessAniDBString(sDetails[14].Trim());
Magic Number,AniDBAPI,Raw_AniDB_File,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Raws\Raw_AniDB_File.cs,Raw_AniDB_File,The following statement contains a magic number: File_AudioCodec = AniDBAPILib.ProcessAniDBString(sDetails[15].Trim());
Magic Number,AniDBAPI,Raw_AniDB_File,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Raws\Raw_AniDB_File.cs,Raw_AniDB_File,The following statement contains a magic number: File_VideoCodec = AniDBAPILib.ProcessAniDBString(sDetails[17].Trim());
Magic Number,AniDBAPI,Raw_AniDB_File,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Raws\Raw_AniDB_File.cs,Raw_AniDB_File,The following statement contains a magic number: File_VideoResolution = AniDBAPILib.ProcessAniDBString(sDetails[19].Trim());
Magic Number,AniDBAPI,Raw_AniDB_File,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Raws\Raw_AniDB_File.cs,Raw_AniDB_File,The following statement contains a magic number: File_FileExtension = AniDBAPILib.ProcessAniDBString(sDetails[20].Trim());
Magic Number,AniDBAPI,Raw_AniDB_File,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Raws\Raw_AniDB_File.cs,Raw_AniDB_File,The following statement contains a magic number: File_LengthSeconds = AniDBAPILib.ProcessAniDBInt(sDetails[23].Trim());
Magic Number,AniDBAPI,Raw_AniDB_File,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Raws\Raw_AniDB_File.cs,Raw_AniDB_File,The following statement contains a magic number: File_Description = AniDBAPILib.ProcessAniDBString(sDetails[24].Trim());
Magic Number,AniDBAPI,Raw_AniDB_File,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Raws\Raw_AniDB_File.cs,Raw_AniDB_File,The following statement contains a magic number: File_ReleaseDate = AniDBAPILib.ProcessAniDBInt(sDetails[25].Trim());
Magic Number,AniDBAPI,Raw_AniDB_File,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Raws\Raw_AniDB_File.cs,Raw_AniDB_File,The following statement contains a magic number: LanguagesRAW = AniDBAPILib.ProcessAniDBString(sDetails[21].Trim());
Magic Number,AniDBAPI,Raw_AniDB_File,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Raws\Raw_AniDB_File.cs,Raw_AniDB_File,The following statement contains a magic number: SubtitlesRAW = AniDBAPILib.ProcessAniDBString(sDetails[22].Trim());
Magic Number,AniDBAPI,Raw_AniDB_File,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Raws\Raw_AniDB_File.cs,Raw_AniDB_File,The following statement contains a magic number: FileName = AniDBAPILib.ProcessAniDBString(sDetails[26].Trim());
Magic Number,AniDBAPI,Raw_AniDB_File,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Raws\Raw_AniDB_File.cs,Raw_AniDB_File,The following statement contains a magic number: string mlState = sDetails[27].Trim();
Magic Number,AniDBAPI,Raw_AniDB_File,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Raws\Raw_AniDB_File.cs,Raw_AniDB_File,The following statement contains a magic number: string mlFileState = sDetails[28].Trim();
Magic Number,AniDBAPI,Raw_AniDB_File,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Raws\Raw_AniDB_File.cs,Raw_AniDB_File,The following statement contains a magic number: string mlViewed = sDetails[29].Trim();
Magic Number,AniDBAPI,Raw_AniDB_File,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Raws\Raw_AniDB_File.cs,Raw_AniDB_File,The following statement contains a magic number: string mlViewDate = sDetails[30].Trim();
Magic Number,AniDBAPI,Raw_AniDB_File,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Raws\Raw_AniDB_File.cs,Raw_AniDB_File,The following statement contains a magic number: string mlStorage = sDetails[31].Trim();
Magic Number,AniDBAPI,Raw_AniDB_File,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Raws\Raw_AniDB_File.cs,Raw_AniDB_File,The following statement contains a magic number: string mlSource = sDetails[32].Trim();
Magic Number,AniDBAPI,Raw_AniDB_File,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Raws\Raw_AniDB_File.cs,Raw_AniDB_File,The following statement contains a magic number: string mlOther = sDetails[33].Trim();
Magic Number,AniDBAPI,Raw_AniDB_File,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Raws\Raw_AniDB_File.cs,Raw_AniDB_File,The following statement contains a magic number: Anime_GroupName = AniDBAPILib.ProcessAniDBString(sDetails[40].Trim());
Magic Number,AniDBAPI,Raw_AniDB_File,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Raws\Raw_AniDB_File.cs,Raw_AniDB_File,The following statement contains a magic number: Anime_GroupNameShort = AniDBAPILib.ProcessAniDBString(sDetails[41].Trim());
Magic Number,AniDBAPI,Raw_AniDB_File,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Raws\Raw_AniDB_File.cs,Raw_AniDB_File,The following statement contains a magic number: Episode_Rating = AniDBAPILib.ProcessAniDBInt(sDetails[38].Trim());
Magic Number,AniDBAPI,Raw_AniDB_File,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Raws\Raw_AniDB_File.cs,Raw_AniDB_File,The following statement contains a magic number: Episode_Votes = AniDBAPILib.ProcessAniDBInt(sDetails[39].Trim());
Magic Number,AniDBAPI,Raw_AniDB_Group,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Raws\Raw_AniDB_Group.cs,Raw_AniDB_Group,The following statement contains a magic number: string[] sDetails = sRecMessage.Substring(10).Split('|');
Magic Number,AniDBAPI,Raw_AniDB_Group,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Raws\Raw_AniDB_Group.cs,Raw_AniDB_Group,The following statement contains a magic number: Votes = int.Parse(sDetails[2]);
Magic Number,AniDBAPI,Raw_AniDB_Group,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Raws\Raw_AniDB_Group.cs,Raw_AniDB_Group,The following statement contains a magic number: AnimeCount = int.Parse(sDetails[3]);
Magic Number,AniDBAPI,Raw_AniDB_Group,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Raws\Raw_AniDB_Group.cs,Raw_AniDB_Group,The following statement contains a magic number: FileCount = int.Parse(sDetails[4]);
Magic Number,AniDBAPI,Raw_AniDB_Group,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Raws\Raw_AniDB_Group.cs,Raw_AniDB_Group,The following statement contains a magic number: GroupName = AniDBAPILib.ProcessAniDBString(sDetails[5]);
Magic Number,AniDBAPI,Raw_AniDB_Group,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Raws\Raw_AniDB_Group.cs,Raw_AniDB_Group,The following statement contains a magic number: GroupNameShort = AniDBAPILib.ProcessAniDBString(sDetails[6]);
Magic Number,AniDBAPI,Raw_AniDB_Group,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Raws\Raw_AniDB_Group.cs,Raw_AniDB_Group,The following statement contains a magic number: IRCChannel = AniDBAPILib.ProcessAniDBString(sDetails[7]);
Magic Number,AniDBAPI,Raw_AniDB_Group,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Raws\Raw_AniDB_Group.cs,Raw_AniDB_Group,The following statement contains a magic number: IRCServer = AniDBAPILib.ProcessAniDBString(sDetails[8]);
Magic Number,AniDBAPI,Raw_AniDB_Group,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Raws\Raw_AniDB_Group.cs,Raw_AniDB_Group,The following statement contains a magic number: URL = AniDBAPILib.ProcessAniDBString(sDetails[9]);
Magic Number,AniDBAPI,Raw_AniDB_Group,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Raws\Raw_AniDB_Group.cs,Raw_AniDB_Group,The following statement contains a magic number: Picname = AniDBAPILib.ProcessAniDBString(sDetails[10]);
Magic Number,AniDBAPI,Raw_AniDB_MyListFile,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Raws\Raw_AniDB_MyListFile.cs,Raw_AniDB_MyListFile,The following statement contains a magic number: string[] sDetails = sRecMessage.Substring(11).Split('|');
Magic Number,AniDBAPI,Raw_AniDB_MyListFile,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Raws\Raw_AniDB_MyListFile.cs,Raw_AniDB_MyListFile,The following statement contains a magic number: this.EpisodeID = AniDBAPILib.ProcessAniDBInt(sDetails[2]);
Magic Number,AniDBAPI,Raw_AniDB_MyListFile,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Raws\Raw_AniDB_MyListFile.cs,Raw_AniDB_MyListFile,The following statement contains a magic number: this.AnimeID = AniDBAPILib.ProcessAniDBInt(sDetails[3]);
Magic Number,AniDBAPI,Raw_AniDB_MyListFile,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Raws\Raw_AniDB_MyListFile.cs,Raw_AniDB_MyListFile,The following statement contains a magic number: this.GroupID = AniDBAPILib.ProcessAniDBInt(sDetails[4]);
Magic Number,AniDBAPI,Raw_AniDB_MyListFile,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Raws\Raw_AniDB_MyListFile.cs,Raw_AniDB_MyListFile,The following statement contains a magic number: this.FileDate = AniDBAPILib.ProcessAniDBString(sDetails[5]);
Magic Number,AniDBAPI,Raw_AniDB_MyListFile,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Raws\Raw_AniDB_MyListFile.cs,Raw_AniDB_MyListFile,The following statement contains a magic number: this.State = AniDBAPILib.ProcessAniDBInt(sDetails[6]);
Magic Number,AniDBAPI,Raw_AniDB_MyListFile,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Raws\Raw_AniDB_MyListFile.cs,Raw_AniDB_MyListFile,The following statement contains a magic number: this.ViewDateUDP = AniDBAPILib.ProcessAniDBInt(sDetails[7]);
Magic Number,AniDBAPI,Raw_AniDB_MyListFile,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Raws\Raw_AniDB_MyListFile.cs,Raw_AniDB_MyListFile,The following statement contains a magic number: this.Storage = AniDBAPILib.ProcessAniDBString(sDetails[8]);
Magic Number,AniDBAPI,Raw_AniDB_MyListFile,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Raws\Raw_AniDB_MyListFile.cs,Raw_AniDB_MyListFile,The following statement contains a magic number: this.Source = AniDBAPILib.ProcessAniDBString(sDetails[9]);
Magic Number,AniDBAPI,Raw_AniDB_MyListFile,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Raws\Raw_AniDB_MyListFile.cs,Raw_AniDB_MyListFile,The following statement contains a magic number: this.Other = AniDBAPILib.ProcessAniDBString(sDetails[10]);
Magic Number,AniDBAPI,Raw_AniDB_MyListFile,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Raws\Raw_AniDB_MyListFile.cs,Raw_AniDB_MyListFile,The following statement contains a magic number: this.FileState = AniDBAPILib.ProcessAniDBInt(sDetails[11]);
Magic Number,AniDBAPI,Raw_AniDB_MyListFile,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Raws\Raw_AniDB_MyListFile.cs,Raw_AniDB_MyListFile,The following statement contains a magic number: DateTime utcDate = new DateTime(1970' 1' 1' 0' 0' 0' DateTimeKind.Utc);
Magic Number,AniDBAPI,Raw_AniDB_MyListFile,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Raws\Raw_AniDB_MyListFile.cs,ProcessHTTPSource,The following statement contains a magic number: !string.IsNullOrEmpty(ViewDateHTTP) && ViewDateHTTP.Length > 17
Magic Number,AniDBAPI,Raw_AniDB_NotifyAlert,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Raws\Raw_AniDB_NotifyAlert.cs,Raw_AniDB_NotifyAlert,The following statement contains a magic number: string[] sDetails = sRecMessage.Substring(14).Split('|');
Magic Number,AniDBAPI,Raw_AniDB_NotifyAlert,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Raws\Raw_AniDB_NotifyAlert.cs,Raw_AniDB_NotifyAlert,The following statement contains a magic number: alertCount = int.Parse(sDetails[2]);
Magic Number,AniDBAPI,Raw_AniDB_NotifyAlert,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Raws\Raw_AniDB_NotifyAlert.cs,Raw_AniDB_NotifyAlert,The following statement contains a magic number: alertDate = AniDBAPILib.ProcessAniDBInt(sDetails[3]);
Magic Number,AniDBAPI,Raw_AniDB_NotifyAlert,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Raws\Raw_AniDB_NotifyAlert.cs,Raw_AniDB_NotifyAlert,The following statement contains a magic number: relName = AniDBAPILib.ProcessAniDBString(sDetails[4]);
Magic Number,AniDBAPI,Raw_AniDB_NotifyAlert,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Raws\Raw_AniDB_NotifyAlert.cs,Raw_AniDB_NotifyAlert,The following statement contains a magic number: string[] fids = sDetails[5].Split(''');
Magic Number,AniDBAPI,Raw_AniDB_NotifyList,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Raws\Raw_AniDB_NotifyList.cs,Raw_AniDB_NotifyList,The following statement contains a magic number: sDetails.Length <= 2
Magic Number,AniDBAPI,Raw_AniDB_NotifyMessage,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Raws\Raw_AniDB_NotifyMessage.cs,Raw_AniDB_NotifyMessage,The following statement contains a magic number: string[] sDetails = sRecMessage.Substring(14).Split('|');
Magic Number,AniDBAPI,Raw_AniDB_NotifyMessage,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Raws\Raw_AniDB_NotifyMessage.cs,Raw_AniDB_NotifyMessage,The following statement contains a magic number: fromUserName = AniDBAPILib.ProcessAniDBString(sDetails[2]);
Magic Number,AniDBAPI,Raw_AniDB_NotifyMessage,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Raws\Raw_AniDB_NotifyMessage.cs,Raw_AniDB_NotifyMessage,The following statement contains a magic number: messageDate = AniDBAPILib.ProcessAniDBInt(sDetails[3]);
Magic Number,AniDBAPI,Raw_AniDB_NotifyMessage,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Raws\Raw_AniDB_NotifyMessage.cs,Raw_AniDB_NotifyMessage,The following statement contains a magic number: messageType = long.Parse(sDetails[4]);
Magic Number,AniDBAPI,Raw_AniDB_NotifyMessage,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Raws\Raw_AniDB_NotifyMessage.cs,Raw_AniDB_NotifyMessage,The following statement contains a magic number: title = AniDBAPILib.ProcessAniDBString(sDetails[5]);
Magic Number,AniDBAPI,Raw_AniDB_NotifyMessage,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Raws\Raw_AniDB_NotifyMessage.cs,Raw_AniDB_NotifyMessage,The following statement contains a magic number: body = AniDBAPILib.ProcessAniDBString(sDetails[6]);
Magic Number,AniDBAPI,Raw_AniDB_Review,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Raws\Raw_AniDB_Review.cs,Raw_AniDB_Review,The following statement contains a magic number: string[] sDetails = sRecMessage.Substring(11).Split('|');
Magic Number,AniDBAPI,Raw_AniDB_Review,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Raws\Raw_AniDB_Review.cs,Raw_AniDB_Review,The following statement contains a magic number: ReviewID = int.Parse(sDetails[3].Trim());
Magic Number,AniDBAPI,Raw_AniDB_Review,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Raws\Raw_AniDB_Review.cs,Raw_AniDB_Review,The following statement contains a magic number: AuthorID = int.Parse(sDetails[4].Trim());
Magic Number,AniDBAPI,Raw_AniDB_Review,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Raws\Raw_AniDB_Review.cs,Raw_AniDB_Review,The following statement contains a magic number: RatingAnimation = int.Parse(sDetails[5].Trim());
Magic Number,AniDBAPI,Raw_AniDB_Review,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Raws\Raw_AniDB_Review.cs,Raw_AniDB_Review,The following statement contains a magic number: RatingSound = int.Parse(sDetails[6].Trim());
Magic Number,AniDBAPI,Raw_AniDB_Review,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Raws\Raw_AniDB_Review.cs,Raw_AniDB_Review,The following statement contains a magic number: RatingStory = int.Parse(sDetails[7].Trim());
Magic Number,AniDBAPI,Raw_AniDB_Review,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Raws\Raw_AniDB_Review.cs,Raw_AniDB_Review,The following statement contains a magic number: RatingCharacter = int.Parse(sDetails[8].Trim());
Magic Number,AniDBAPI,Raw_AniDB_Review,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Raws\Raw_AniDB_Review.cs,Raw_AniDB_Review,The following statement contains a magic number: RatingValue = int.Parse(sDetails[9].Trim());
Magic Number,AniDBAPI,Raw_AniDB_Review,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Raws\Raw_AniDB_Review.cs,Raw_AniDB_Review,The following statement contains a magic number: RatingEnjoyment = int.Parse(sDetails[10].Trim());
Magic Number,AniDBAPI,Raw_AniDB_Review,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Raws\Raw_AniDB_Review.cs,Raw_AniDB_Review,The following statement contains a magic number: ReviewText = AniDBAPILib.ProcessAniDBString(sDetails[11].Trim());
Magic Number,AniDBAPI,Raw_AniDB_Vote,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Raws\Raw_AniDB_Vote.cs,ProcessVoteFoundAnime,The following statement contains a magic number: string[] sDetails = sRecMessage.Substring(15).Split('|');
Magic Number,AniDBAPI,Raw_AniDB_Vote,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Raws\Raw_AniDB_Vote.cs,ProcessVoteFoundEpisode,The following statement contains a magic number: string[] sDetails = sRecMessage.Substring(15).Split('|');
Magic Number,AniDBAPI,APIUtils,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\APIUtils.cs,DownloadWebPage,The following statement contains a magic number: webReq.Timeout = 20000;
Magic Number,AniDBAPI,APIUtils,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\APIUtils.cs,DownloadWebBinary,The following statement contains a magic number: webReq.Timeout = 20000;
Magic Number,AniDBAPI.Commands,AniDBCommand_AddFile,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBCommand_AddFile.cs,Process,The following statement contains a magic number: switch (ResponseCode)              {                  case 598: return AniDBUDPResponseCode.UnknownCommand_598;                  case 555: return AniDBUDPResponseCode.Banned_555;              }
Magic Number,AniDBAPI.Commands,AniDBCommand_AddFile,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBCommand_AddFile.cs,Process,The following statement contains a magic number: switch (ResponseCode)              {                  case 598: return AniDBUDPResponseCode.UnknownCommand_598;                  case 555: return AniDBUDPResponseCode.Banned_555;              }
Magic Number,AniDBAPI.Commands,AniDBCommand_AddFile,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBCommand_AddFile.cs,Process,The following statement contains a magic number: string sMsgType = socketResponse.Substring(0' 3);
Magic Number,AniDBAPI.Commands,AniDBCommand_AddFile,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBCommand_AddFile.cs,Process,The following statement contains a magic number: switch (sMsgType)              {                  case "210":                  {                      /* Response Format                       * {int4 mylist id of new entry}                       */                      // parse the MyList ID                      string[] arrResult = socketResponse.Split('\n');                      if (arrResult.Length >= 2)                      {                          int.TryParse(arrResult[1]' out MyListID);                          if (FileData == null) MyListID = 0;                      }                      return AniDBUDPResponseCode.FileAdded;                  }                  case "310":                  {                      /* Response Format                       * {int4 lid}|{int4 fid}|{int4 eid}|{int4 aid}|{int4 gid}|{int4 date}|{int2 state}|{int4 viewdate}|{str storage}|{str source}|{str other}|{int2 filestate}                       */                      //file already exists: read 'watched' status                      string[] arrResult = socketResponse.Split('\n');                      if (arrResult.Length >= 2)                      {                          string[] arrStatus = arrResult[1].Split('|');                          int.TryParse(arrStatus[0]' out MyListID);                            int state = int.Parse(arrStatus[6]);                          State = (AniDBFile_State) state;                            int viewdate = int.Parse(arrStatus[7]);                          ReturnIsWatched = viewdate > 0;                            if (ReturnIsWatched)                          {                              DateTime utcDate = new DateTime(1970' 1' 1' 0' 0' 0' DateTimeKind.Utc);                              utcDate = utcDate.AddSeconds(viewdate);                                WatchedDate = utcDate.ToLocalTime();                          }                          else                          {                              WatchedDate = null;                          }                      }                      return AniDBUDPResponseCode.FileAlreadyExists;                  }                  case "311": return AniDBUDPResponseCode.UpdatingFile;                  case "320": return AniDBUDPResponseCode.NoSuchFile;                  case "411": return AniDBUDPResponseCode.NoSuchFile;                  case "502": return AniDBUDPResponseCode.LoginFailed;                  case "501": return AniDBUDPResponseCode.LoginRequired;              }
Magic Number,AniDBAPI.Commands,AniDBCommand_AddFile,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBCommand_AddFile.cs,Process,The following statement contains a magic number: switch (sMsgType)              {                  case "210":                  {                      /* Response Format                       * {int4 mylist id of new entry}                       */                      // parse the MyList ID                      string[] arrResult = socketResponse.Split('\n');                      if (arrResult.Length >= 2)                      {                          int.TryParse(arrResult[1]' out MyListID);                          if (FileData == null) MyListID = 0;                      }                      return AniDBUDPResponseCode.FileAdded;                  }                  case "310":                  {                      /* Response Format                       * {int4 lid}|{int4 fid}|{int4 eid}|{int4 aid}|{int4 gid}|{int4 date}|{int2 state}|{int4 viewdate}|{str storage}|{str source}|{str other}|{int2 filestate}                       */                      //file already exists: read 'watched' status                      string[] arrResult = socketResponse.Split('\n');                      if (arrResult.Length >= 2)                      {                          string[] arrStatus = arrResult[1].Split('|');                          int.TryParse(arrStatus[0]' out MyListID);                            int state = int.Parse(arrStatus[6]);                          State = (AniDBFile_State) state;                            int viewdate = int.Parse(arrStatus[7]);                          ReturnIsWatched = viewdate > 0;                            if (ReturnIsWatched)                          {                              DateTime utcDate = new DateTime(1970' 1' 1' 0' 0' 0' DateTimeKind.Utc);                              utcDate = utcDate.AddSeconds(viewdate);                                WatchedDate = utcDate.ToLocalTime();                          }                          else                          {                              WatchedDate = null;                          }                      }                      return AniDBUDPResponseCode.FileAlreadyExists;                  }                  case "311": return AniDBUDPResponseCode.UpdatingFile;                  case "320": return AniDBUDPResponseCode.NoSuchFile;                  case "411": return AniDBUDPResponseCode.NoSuchFile;                  case "502": return AniDBUDPResponseCode.LoginFailed;                  case "501": return AniDBUDPResponseCode.LoginRequired;              }
Magic Number,AniDBAPI.Commands,AniDBCommand_AddFile,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBCommand_AddFile.cs,Process,The following statement contains a magic number: switch (sMsgType)              {                  case "210":                  {                      /* Response Format                       * {int4 mylist id of new entry}                       */                      // parse the MyList ID                      string[] arrResult = socketResponse.Split('\n');                      if (arrResult.Length >= 2)                      {                          int.TryParse(arrResult[1]' out MyListID);                          if (FileData == null) MyListID = 0;                      }                      return AniDBUDPResponseCode.FileAdded;                  }                  case "310":                  {                      /* Response Format                       * {int4 lid}|{int4 fid}|{int4 eid}|{int4 aid}|{int4 gid}|{int4 date}|{int2 state}|{int4 viewdate}|{str storage}|{str source}|{str other}|{int2 filestate}                       */                      //file already exists: read 'watched' status                      string[] arrResult = socketResponse.Split('\n');                      if (arrResult.Length >= 2)                      {                          string[] arrStatus = arrResult[1].Split('|');                          int.TryParse(arrStatus[0]' out MyListID);                            int state = int.Parse(arrStatus[6]);                          State = (AniDBFile_State) state;                            int viewdate = int.Parse(arrStatus[7]);                          ReturnIsWatched = viewdate > 0;                            if (ReturnIsWatched)                          {                              DateTime utcDate = new DateTime(1970' 1' 1' 0' 0' 0' DateTimeKind.Utc);                              utcDate = utcDate.AddSeconds(viewdate);                                WatchedDate = utcDate.ToLocalTime();                          }                          else                          {                              WatchedDate = null;                          }                      }                      return AniDBUDPResponseCode.FileAlreadyExists;                  }                  case "311": return AniDBUDPResponseCode.UpdatingFile;                  case "320": return AniDBUDPResponseCode.NoSuchFile;                  case "411": return AniDBUDPResponseCode.NoSuchFile;                  case "502": return AniDBUDPResponseCode.LoginFailed;                  case "501": return AniDBUDPResponseCode.LoginRequired;              }
Magic Number,AniDBAPI.Commands,AniDBCommand_AddFile,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBCommand_AddFile.cs,Process,The following statement contains a magic number: switch (sMsgType)              {                  case "210":                  {                      /* Response Format                       * {int4 mylist id of new entry}                       */                      // parse the MyList ID                      string[] arrResult = socketResponse.Split('\n');                      if (arrResult.Length >= 2)                      {                          int.TryParse(arrResult[1]' out MyListID);                          if (FileData == null) MyListID = 0;                      }                      return AniDBUDPResponseCode.FileAdded;                  }                  case "310":                  {                      /* Response Format                       * {int4 lid}|{int4 fid}|{int4 eid}|{int4 aid}|{int4 gid}|{int4 date}|{int2 state}|{int4 viewdate}|{str storage}|{str source}|{str other}|{int2 filestate}                       */                      //file already exists: read 'watched' status                      string[] arrResult = socketResponse.Split('\n');                      if (arrResult.Length >= 2)                      {                          string[] arrStatus = arrResult[1].Split('|');                          int.TryParse(arrStatus[0]' out MyListID);                            int state = int.Parse(arrStatus[6]);                          State = (AniDBFile_State) state;                            int viewdate = int.Parse(arrStatus[7]);                          ReturnIsWatched = viewdate > 0;                            if (ReturnIsWatched)                          {                              DateTime utcDate = new DateTime(1970' 1' 1' 0' 0' 0' DateTimeKind.Utc);                              utcDate = utcDate.AddSeconds(viewdate);                                WatchedDate = utcDate.ToLocalTime();                          }                          else                          {                              WatchedDate = null;                          }                      }                      return AniDBUDPResponseCode.FileAlreadyExists;                  }                  case "311": return AniDBUDPResponseCode.UpdatingFile;                  case "320": return AniDBUDPResponseCode.NoSuchFile;                  case "411": return AniDBUDPResponseCode.NoSuchFile;                  case "502": return AniDBUDPResponseCode.LoginFailed;                  case "501": return AniDBUDPResponseCode.LoginRequired;              }
Magic Number,AniDBAPI.Commands,AniDBCommand_AddFile,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBCommand_AddFile.cs,Process,The following statement contains a magic number: switch (sMsgType)              {                  case "210":                  {                      /* Response Format                       * {int4 mylist id of new entry}                       */                      // parse the MyList ID                      string[] arrResult = socketResponse.Split('\n');                      if (arrResult.Length >= 2)                      {                          int.TryParse(arrResult[1]' out MyListID);                          if (FileData == null) MyListID = 0;                      }                      return AniDBUDPResponseCode.FileAdded;                  }                  case "310":                  {                      /* Response Format                       * {int4 lid}|{int4 fid}|{int4 eid}|{int4 aid}|{int4 gid}|{int4 date}|{int2 state}|{int4 viewdate}|{str storage}|{str source}|{str other}|{int2 filestate}                       */                      //file already exists: read 'watched' status                      string[] arrResult = socketResponse.Split('\n');                      if (arrResult.Length >= 2)                      {                          string[] arrStatus = arrResult[1].Split('|');                          int.TryParse(arrStatus[0]' out MyListID);                            int state = int.Parse(arrStatus[6]);                          State = (AniDBFile_State) state;                            int viewdate = int.Parse(arrStatus[7]);                          ReturnIsWatched = viewdate > 0;                            if (ReturnIsWatched)                          {                              DateTime utcDate = new DateTime(1970' 1' 1' 0' 0' 0' DateTimeKind.Utc);                              utcDate = utcDate.AddSeconds(viewdate);                                WatchedDate = utcDate.ToLocalTime();                          }                          else                          {                              WatchedDate = null;                          }                      }                      return AniDBUDPResponseCode.FileAlreadyExists;                  }                  case "311": return AniDBUDPResponseCode.UpdatingFile;                  case "320": return AniDBUDPResponseCode.NoSuchFile;                  case "411": return AniDBUDPResponseCode.NoSuchFile;                  case "502": return AniDBUDPResponseCode.LoginFailed;                  case "501": return AniDBUDPResponseCode.LoginRequired;              }
Magic Number,AniDBAPI.Commands,AniDBCommand_DeleteFile,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBCommand_DeleteFile.cs,Process,The following statement contains a magic number: switch (ResponseCode)              {                  case 598: return AniDBUDPResponseCode.UnknownCommand_598;                  case 555: return AniDBUDPResponseCode.Banned_555;              }
Magic Number,AniDBAPI.Commands,AniDBCommand_DeleteFile,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBCommand_DeleteFile.cs,Process,The following statement contains a magic number: switch (ResponseCode)              {                  case 598: return AniDBUDPResponseCode.UnknownCommand_598;                  case 555: return AniDBUDPResponseCode.Banned_555;              }
Magic Number,AniDBAPI.Commands,AniDBCommand_DeleteFile,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBCommand_DeleteFile.cs,Process,The following statement contains a magic number: string sMsgType = socketResponse.Substring(0' 3);
Magic Number,AniDBAPI.Commands,AniDBCommand_GetAnimeDescription,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBCommand_GetAnimeDescription.cs,Process,The following statement contains a magic number: switch (ResponseCode)              {                  case 598: return AniDBUDPResponseCode.UnknownCommand_598;                  case 555: return AniDBUDPResponseCode.Banned_555;              }
Magic Number,AniDBAPI.Commands,AniDBCommand_GetAnimeDescription,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBCommand_GetAnimeDescription.cs,Process,The following statement contains a magic number: switch (ResponseCode)              {                  case 598: return AniDBUDPResponseCode.UnknownCommand_598;                  case 555: return AniDBUDPResponseCode.Banned_555;              }
Magic Number,AniDBAPI.Commands,AniDBCommand_GetAnimeDescription,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBCommand_GetAnimeDescription.cs,Process,The following statement contains a magic number: string sMsgType = socketResponse.Substring(0' 3);
Magic Number,AniDBAPI.Commands,AniDBCommand_GetAnimeInfo,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBCommand_GetAnimeInfo.cs,Process,The following statement contains a magic number: switch (ResponseCode)              {                  case 598: return AniDBUDPResponseCode.UnknownCommand_598;                  case 555: return AniDBUDPResponseCode.Banned_555;              }
Magic Number,AniDBAPI.Commands,AniDBCommand_GetAnimeInfo,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBCommand_GetAnimeInfo.cs,Process,The following statement contains a magic number: switch (ResponseCode)              {                  case 598: return AniDBUDPResponseCode.UnknownCommand_598;                  case 555: return AniDBUDPResponseCode.Banned_555;              }
Magic Number,AniDBAPI.Commands,AniDBCommand_GetAnimeInfo,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBCommand_GetAnimeInfo.cs,Process,The following statement contains a magic number: string sMsgType = socketResponse.Substring(0' 3);
Magic Number,AniDBAPI.Commands,AniDBCommand_GetAnimeInfo,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBCommand_GetAnimeInfo.cs,Init,The following statement contains a magic number: int aByte1 = 191;
Magic Number,AniDBAPI.Commands,AniDBCommand_GetAnimeInfo,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBCommand_GetAnimeInfo.cs,Init,The following statement contains a magic number: int aByte2 = 252;
Magic Number,AniDBAPI.Commands,AniDBCommand_GetAnimeInfo,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBCommand_GetAnimeInfo.cs,Init,The following statement contains a magic number: int aByte3 = 255;
Magic Number,AniDBAPI.Commands,AniDBCommand_GetAnimeInfo,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBCommand_GetAnimeInfo.cs,Init,The following statement contains a magic number: int aByte4 = 255;
Magic Number,AniDBAPI.Commands,AniDBCommand_GetAnimeInfo,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBCommand_GetAnimeInfo.cs,Init,The following statement contains a magic number: int aByte5 = 241;
Magic Number,AniDBAPI.Commands,AniDBCommand_GetAnimeInfo,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBCommand_GetAnimeInfo.cs,Init,The following statement contains a magic number: int aByte6 = 136;
Magic Number,AniDBAPI.Commands,AniDBCommand_GetAnimeInfo,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBCommand_GetAnimeInfo.cs,Init,The following statement contains a magic number: commandText += string.Format("&amask={0}{1}{2}{3}{4}{5}"' aByte1.ToString("X").PadLeft(2' '0')'                  aByte2.ToString("X").PadLeft(2' '0')'                  aByte3.ToString("X").PadLeft(2' '0')' aByte4.ToString("X").PadLeft(2' '0')'                  aByte5.ToString("X").PadLeft(2' '0')'                  aByte6.ToString("X").PadLeft(2' '0'));
Magic Number,AniDBAPI.Commands,AniDBCommand_GetAnimeInfo,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBCommand_GetAnimeInfo.cs,Init,The following statement contains a magic number: commandText += string.Format("&amask={0}{1}{2}{3}{4}{5}"' aByte1.ToString("X").PadLeft(2' '0')'                  aByte2.ToString("X").PadLeft(2' '0')'                  aByte3.ToString("X").PadLeft(2' '0')' aByte4.ToString("X").PadLeft(2' '0')'                  aByte5.ToString("X").PadLeft(2' '0')'                  aByte6.ToString("X").PadLeft(2' '0'));
Magic Number,AniDBAPI.Commands,AniDBCommand_GetAnimeInfo,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBCommand_GetAnimeInfo.cs,Init,The following statement contains a magic number: commandText += string.Format("&amask={0}{1}{2}{3}{4}{5}"' aByte1.ToString("X").PadLeft(2' '0')'                  aByte2.ToString("X").PadLeft(2' '0')'                  aByte3.ToString("X").PadLeft(2' '0')' aByte4.ToString("X").PadLeft(2' '0')'                  aByte5.ToString("X").PadLeft(2' '0')'                  aByte6.ToString("X").PadLeft(2' '0'));
Magic Number,AniDBAPI.Commands,AniDBCommand_GetAnimeInfo,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBCommand_GetAnimeInfo.cs,Init,The following statement contains a magic number: commandText += string.Format("&amask={0}{1}{2}{3}{4}{5}"' aByte1.ToString("X").PadLeft(2' '0')'                  aByte2.ToString("X").PadLeft(2' '0')'                  aByte3.ToString("X").PadLeft(2' '0')' aByte4.ToString("X").PadLeft(2' '0')'                  aByte5.ToString("X").PadLeft(2' '0')'                  aByte6.ToString("X").PadLeft(2' '0'));
Magic Number,AniDBAPI.Commands,AniDBCommand_GetAnimeInfo,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBCommand_GetAnimeInfo.cs,Init,The following statement contains a magic number: commandText += string.Format("&amask={0}{1}{2}{3}{4}{5}"' aByte1.ToString("X").PadLeft(2' '0')'                  aByte2.ToString("X").PadLeft(2' '0')'                  aByte3.ToString("X").PadLeft(2' '0')' aByte4.ToString("X").PadLeft(2' '0')'                  aByte5.ToString("X").PadLeft(2' '0')'                  aByte6.ToString("X").PadLeft(2' '0'));
Magic Number,AniDBAPI.Commands,AniDBCommand_GetAnimeInfo,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBCommand_GetAnimeInfo.cs,Init,The following statement contains a magic number: commandText += string.Format("&amask={0}{1}{2}{3}{4}{5}"' aByte1.ToString("X").PadLeft(2' '0')'                  aByte2.ToString("X").PadLeft(2' '0')'                  aByte3.ToString("X").PadLeft(2' '0')' aByte4.ToString("X").PadLeft(2' '0')'                  aByte5.ToString("X").PadLeft(2' '0')'                  aByte6.ToString("X").PadLeft(2' '0'));
Magic Number,AniDBAPI.Commands,AniDBCommand_GetCalendar,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBCommand_GetCalendar.cs,Process,The following statement contains a magic number: switch (ResponseCode)              {                  case 598: return AniDBUDPResponseCode.UnknownCommand_598;                  case 555: return AniDBUDPResponseCode.Banned_555;              }
Magic Number,AniDBAPI.Commands,AniDBCommand_GetCalendar,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBCommand_GetCalendar.cs,Process,The following statement contains a magic number: switch (ResponseCode)              {                  case 598: return AniDBUDPResponseCode.UnknownCommand_598;                  case 555: return AniDBUDPResponseCode.Banned_555;              }
Magic Number,AniDBAPI.Commands,AniDBCommand_GetCalendar,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBCommand_GetCalendar.cs,Process,The following statement contains a magic number: string sMsgType = socketResponse.Substring(0' 3);
Magic Number,AniDBAPI.Commands,AniDBCommand_GetCharacterInfo,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBCommand_GetCharacterInfo.cs,Process,The following statement contains a magic number: switch (ResponseCode)              {                  case 598: return AniDBUDPResponseCode.UnknownCommand_598;                  case 555: return AniDBUDPResponseCode.Banned_555;              }
Magic Number,AniDBAPI.Commands,AniDBCommand_GetCharacterInfo,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBCommand_GetCharacterInfo.cs,Process,The following statement contains a magic number: switch (ResponseCode)              {                  case 598: return AniDBUDPResponseCode.UnknownCommand_598;                  case 555: return AniDBUDPResponseCode.Banned_555;              }
Magic Number,AniDBAPI.Commands,AniDBCommand_GetCharacterInfo,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBCommand_GetCharacterInfo.cs,Process,The following statement contains a magic number: string sMsgType = socketResponse.Substring(0' 3);
Magic Number,AniDBAPI.Commands,AniDBCommand_GetCreatorInfo,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBCommand_GetCreatorInfo.cs,Process,The following statement contains a magic number: switch (ResponseCode)              {                  case 598: return AniDBUDPResponseCode.UnknownCommand_598;                  case 555: return AniDBUDPResponseCode.Banned_555;              }
Magic Number,AniDBAPI.Commands,AniDBCommand_GetCreatorInfo,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBCommand_GetCreatorInfo.cs,Process,The following statement contains a magic number: switch (ResponseCode)              {                  case 598: return AniDBUDPResponseCode.UnknownCommand_598;                  case 555: return AniDBUDPResponseCode.Banned_555;              }
Magic Number,AniDBAPI.Commands,AniDBCommand_GetCreatorInfo,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBCommand_GetCreatorInfo.cs,Process,The following statement contains a magic number: string sMsgType = socketResponse.Substring(0' 3);
Magic Number,AniDBAPI.Commands,AniDBCommand_GetFileInfo,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBCommand_GetFileInfo.cs,Process,The following statement contains a magic number: switch (ResponseCode)              {                  case 598: return AniDBUDPResponseCode.UnknownCommand_598;                  case 555: return AniDBUDPResponseCode.Banned_555;              }
Magic Number,AniDBAPI.Commands,AniDBCommand_GetFileInfo,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBCommand_GetFileInfo.cs,Process,The following statement contains a magic number: switch (ResponseCode)              {                  case 598: return AniDBUDPResponseCode.UnknownCommand_598;                  case 555: return AniDBUDPResponseCode.Banned_555;              }
Magic Number,AniDBAPI.Commands,AniDBCommand_GetFileInfo,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBCommand_GetFileInfo.cs,Process,The following statement contains a magic number: string sMsgType = socketResponse.Substring(0' 3);
Magic Number,AniDBAPI.Commands,AniDBCommand_GetFileInfo,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBCommand_GetFileInfo.cs,Init,The following statement contains a magic number: int fByte1 = 127;
Magic Number,AniDBAPI.Commands,AniDBCommand_GetFileInfo,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBCommand_GetFileInfo.cs,Init,The following statement contains a magic number: int fByte2 = 248;
Magic Number,AniDBAPI.Commands,AniDBCommand_GetFileInfo,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBCommand_GetFileInfo.cs,Init,The following statement contains a magic number: int fByte3 = 255;
Magic Number,AniDBAPI.Commands,AniDBCommand_GetFileInfo,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBCommand_GetFileInfo.cs,Init,The following statement contains a magic number: int fByte4 = 249;
Magic Number,AniDBAPI.Commands,AniDBCommand_GetFileInfo,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBCommand_GetFileInfo.cs,Init,The following statement contains a magic number: int fByte5 = 254;
Magic Number,AniDBAPI.Commands,AniDBCommand_GetFileInfo,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBCommand_GetFileInfo.cs,Init,The following statement contains a magic number: int aByte3 = 252;
Magic Number,AniDBAPI.Commands,AniDBCommand_GetFileInfo,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBCommand_GetFileInfo.cs,Init,The following statement contains a magic number: int aByte4 = 192;
Magic Number,AniDBAPI.Commands,AniDBCommand_GetFileInfo,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBCommand_GetFileInfo.cs,Init,The following statement contains a magic number: commandText +=                  $"&fmask={fByte1.ToString("X").PadLeft(2' '0')}{fByte2.ToString("X").PadLeft(2' '0')}{fByte3.ToString("X").PadLeft(2' '0')}{fByte4.ToString("X").PadLeft(2' '0')}{fByte5.ToString("X").PadLeft(2' '0')}";
Magic Number,AniDBAPI.Commands,AniDBCommand_GetFileInfo,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBCommand_GetFileInfo.cs,Init,The following statement contains a magic number: commandText +=                  $"&fmask={fByte1.ToString("X").PadLeft(2' '0')}{fByte2.ToString("X").PadLeft(2' '0')}{fByte3.ToString("X").PadLeft(2' '0')}{fByte4.ToString("X").PadLeft(2' '0')}{fByte5.ToString("X").PadLeft(2' '0')}";
Magic Number,AniDBAPI.Commands,AniDBCommand_GetFileInfo,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBCommand_GetFileInfo.cs,Init,The following statement contains a magic number: commandText +=                  $"&fmask={fByte1.ToString("X").PadLeft(2' '0')}{fByte2.ToString("X").PadLeft(2' '0')}{fByte3.ToString("X").PadLeft(2' '0')}{fByte4.ToString("X").PadLeft(2' '0')}{fByte5.ToString("X").PadLeft(2' '0')}";
Magic Number,AniDBAPI.Commands,AniDBCommand_GetFileInfo,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBCommand_GetFileInfo.cs,Init,The following statement contains a magic number: commandText +=                  $"&fmask={fByte1.ToString("X").PadLeft(2' '0')}{fByte2.ToString("X").PadLeft(2' '0')}{fByte3.ToString("X").PadLeft(2' '0')}{fByte4.ToString("X").PadLeft(2' '0')}{fByte5.ToString("X").PadLeft(2' '0')}";
Magic Number,AniDBAPI.Commands,AniDBCommand_GetFileInfo,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBCommand_GetFileInfo.cs,Init,The following statement contains a magic number: commandText +=                  $"&fmask={fByte1.ToString("X").PadLeft(2' '0')}{fByte2.ToString("X").PadLeft(2' '0')}{fByte3.ToString("X").PadLeft(2' '0')}{fByte4.ToString("X").PadLeft(2' '0')}{fByte5.ToString("X").PadLeft(2' '0')}";
Magic Number,AniDBAPI.Commands,AniDBCommand_GetFileInfo,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBCommand_GetFileInfo.cs,Init,The following statement contains a magic number: commandText +=                  $"&amask={aByte1.ToString("X").PadLeft(2' '0')}{aByte2.ToString("X").PadLeft(2' '0')}{aByte3.ToString("X").PadLeft(2' '0')}{aByte4.ToString("X").PadLeft(2' '0')}";
Magic Number,AniDBAPI.Commands,AniDBCommand_GetFileInfo,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBCommand_GetFileInfo.cs,Init,The following statement contains a magic number: commandText +=                  $"&amask={aByte1.ToString("X").PadLeft(2' '0')}{aByte2.ToString("X").PadLeft(2' '0')}{aByte3.ToString("X").PadLeft(2' '0')}{aByte4.ToString("X").PadLeft(2' '0')}";
Magic Number,AniDBAPI.Commands,AniDBCommand_GetFileInfo,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBCommand_GetFileInfo.cs,Init,The following statement contains a magic number: commandText +=                  $"&amask={aByte1.ToString("X").PadLeft(2' '0')}{aByte2.ToString("X").PadLeft(2' '0')}{aByte3.ToString("X").PadLeft(2' '0')}{aByte4.ToString("X").PadLeft(2' '0')}";
Magic Number,AniDBAPI.Commands,AniDBCommand_GetFileInfo,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBCommand_GetFileInfo.cs,Init,The following statement contains a magic number: commandText +=                  $"&amask={aByte1.ToString("X").PadLeft(2' '0')}{aByte2.ToString("X").PadLeft(2' '0')}{aByte3.ToString("X").PadLeft(2' '0')}{aByte4.ToString("X").PadLeft(2' '0')}";
Magic Number,AniDBAPI.Commands,AniDBCommand_GetGroupStatus,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBCommand_GetGroupStatus.cs,Process,The following statement contains a magic number: switch (ResponseCode)              {                  case 598: return AniDBUDPResponseCode.UnknownCommand_598;                  case 555: return AniDBUDPResponseCode.Banned_555;              }
Magic Number,AniDBAPI.Commands,AniDBCommand_GetGroupStatus,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBCommand_GetGroupStatus.cs,Process,The following statement contains a magic number: switch (ResponseCode)              {                  case 598: return AniDBUDPResponseCode.UnknownCommand_598;                  case 555: return AniDBUDPResponseCode.Banned_555;              }
Magic Number,AniDBAPI.Commands,AniDBCommand_GetGroupStatus,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBCommand_GetGroupStatus.cs,Process,The following statement contains a magic number: string sMsgType = socketResponse.Substring(0' 3);
Magic Number,AniDBAPI.Commands,AniDBCommand_GetMyListFileInfo,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBCommand_GetMyListFileInfo.cs,Process,The following statement contains a magic number: switch (ResponseCode)              {                  case 598: return AniDBUDPResponseCode.UnknownCommand_598;                  case 555: return AniDBUDPResponseCode.Banned_555;              }
Magic Number,AniDBAPI.Commands,AniDBCommand_GetMyListFileInfo,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBCommand_GetMyListFileInfo.cs,Process,The following statement contains a magic number: switch (ResponseCode)              {                  case 598: return AniDBUDPResponseCode.UnknownCommand_598;                  case 555: return AniDBUDPResponseCode.Banned_555;              }
Magic Number,AniDBAPI.Commands,AniDBCommand_GetMyListFileInfo,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBCommand_GetMyListFileInfo.cs,Process,The following statement contains a magic number: string sMsgType = socketResponse.Substring(0' 3);
Magic Number,AniDBAPI.Commands,AniDBCommand_GetMyListStats,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBCommand_GetMyListStats.cs,Process,The following statement contains a magic number: switch (ResponseCode)              {                  case 598: return AniDBUDPResponseCode.UnknownCommand_598;                  case 555: return AniDBUDPResponseCode.Banned_555;              }
Magic Number,AniDBAPI.Commands,AniDBCommand_GetMyListStats,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBCommand_GetMyListStats.cs,Process,The following statement contains a magic number: switch (ResponseCode)              {                  case 598: return AniDBUDPResponseCode.UnknownCommand_598;                  case 555: return AniDBUDPResponseCode.Banned_555;              }
Magic Number,AniDBAPI.Commands,AniDBCommand_GetMyListStats,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBCommand_GetMyListStats.cs,Process,The following statement contains a magic number: string sMsgType = socketResponse.Substring(0' 3);
Magic Number,AniDBAPI.Commands,AniDBCommand_GetReview,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBCommand_GetReview.cs,Process,The following statement contains a magic number: switch (ResponseCode)              {                  case 598: return AniDBUDPResponseCode.UnknownCommand_598;                  case 555: return AniDBUDPResponseCode.Banned_555;              }
Magic Number,AniDBAPI.Commands,AniDBCommand_GetReview,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBCommand_GetReview.cs,Process,The following statement contains a magic number: switch (ResponseCode)              {                  case 598: return AniDBUDPResponseCode.UnknownCommand_598;                  case 555: return AniDBUDPResponseCode.Banned_555;              }
Magic Number,AniDBAPI.Commands,AniDBCommand_GetReview,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBCommand_GetReview.cs,Process,The following statement contains a magic number: string sMsgType = socketResponse.Substring(0' 3);
Magic Number,AniDBAPI.Commands,AniDBCommand_GetUpdated,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBCommand_GetUpdated.cs,Process,The following statement contains a magic number: switch (ResponseCode)              {                  case 598: return AniDBUDPResponseCode.UnknownCommand_598;                  case 555: return AniDBUDPResponseCode.Banned_555;              }
Magic Number,AniDBAPI.Commands,AniDBCommand_GetUpdated,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBCommand_GetUpdated.cs,Process,The following statement contains a magic number: switch (ResponseCode)              {                  case 598: return AniDBUDPResponseCode.UnknownCommand_598;                  case 555: return AniDBUDPResponseCode.Banned_555;              }
Magic Number,AniDBAPI.Commands,AniDBCommand_GetUpdated,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBCommand_GetUpdated.cs,Process,The following statement contains a magic number: string sMsgType = socketResponse.Substring(0' 3);
Magic Number,AniDBAPI.Commands,AniDBCommand_GetUpdated,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBCommand_GetUpdated.cs,Process,The following statement contains a magic number: switch (sMsgType)              {                  case "243":                  {                      // remove the header info                      string[] sDetails = socketResponse.Substring(0).Split('\n');                        if (sDetails.Length > 1)                      {                          // first item will be the status command so ignore                          // only concerned with the second line                            string[] flds = sDetails[1].Substring(0).Split('|');                          AniDBEntity = int.Parse(flds[0]);                          RecordCount = int.Parse(flds[1]);                          LastUpdateTime = flds[2];                          AnimeIDListRaw = flds[3].Trim();                          AnimeIDList = AnimeIDListRaw.Split(''').Select(int.Parse).ToList();                      }                        return AniDBUDPResponseCode.GotUpdated;                  }                  case "343": return AniDBUDPResponseCode.NoUpdates;                  case "501": return AniDBUDPResponseCode.LoginRequired;              }
Magic Number,AniDBAPI.Commands,AniDBCommand_GetUpdated,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBCommand_GetUpdated.cs,Process,The following statement contains a magic number: switch (sMsgType)              {                  case "243":                  {                      // remove the header info                      string[] sDetails = socketResponse.Substring(0).Split('\n');                        if (sDetails.Length > 1)                      {                          // first item will be the status command so ignore                          // only concerned with the second line                            string[] flds = sDetails[1].Substring(0).Split('|');                          AniDBEntity = int.Parse(flds[0]);                          RecordCount = int.Parse(flds[1]);                          LastUpdateTime = flds[2];                          AnimeIDListRaw = flds[3].Trim();                          AnimeIDList = AnimeIDListRaw.Split(''').Select(int.Parse).ToList();                      }                        return AniDBUDPResponseCode.GotUpdated;                  }                  case "343": return AniDBUDPResponseCode.NoUpdates;                  case "501": return AniDBUDPResponseCode.LoginRequired;              }
Magic Number,AniDBAPI.Commands,AniDBCommand_Login,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBCommand_Login.cs,Process,The following statement contains a magic number: switch (ResponseCode)              {                  case 598: return AniDBUDPResponseCode.UnknownCommand_598;                  case 555: return AniDBUDPResponseCode.Banned_555;              }
Magic Number,AniDBAPI.Commands,AniDBCommand_Login,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBCommand_Login.cs,Process,The following statement contains a magic number: switch (ResponseCode)              {                  case 598: return AniDBUDPResponseCode.UnknownCommand_598;                  case 555: return AniDBUDPResponseCode.Banned_555;              }
Magic Number,AniDBAPI.Commands,AniDBCommand_Login,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBCommand_Login.cs,Process,The following statement contains a magic number: string sMsgType = socketResponse.Substring(0' 3);
Magic Number,AniDBAPI.Commands,AniDBCommand_Login,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBCommand_Login.cs,Process,The following statement contains a magic number: string sMessage = socketResponse.Substring(4);
Magic Number,AniDBAPI.Commands,AniDBCommand_MarkFileAsDeleted,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBCommand_MarkFileAsDeleted.cs,Process,The following statement contains a magic number: switch (ResponseCode)              {                  case 598: return AniDBUDPResponseCode.UnknownCommand_598;                  case 555: return AniDBUDPResponseCode.Banned_555;              }
Magic Number,AniDBAPI.Commands,AniDBCommand_MarkFileAsDeleted,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBCommand_MarkFileAsDeleted.cs,Process,The following statement contains a magic number: switch (ResponseCode)              {                  case 598: return AniDBUDPResponseCode.UnknownCommand_598;                  case 555: return AniDBUDPResponseCode.Banned_555;              }
Magic Number,AniDBAPI.Commands,AniDBCommand_MarkFileAsDeleted,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBCommand_MarkFileAsDeleted.cs,Process,The following statement contains a magic number: string sMsgType = socketResponse.Substring(0' 3);
Magic Number,AniDBAPI.Commands,AniDBCommand_MarkFileAsDisk,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBCommand_MarkFileAsDisk.cs,Process,The following statement contains a magic number: switch (ResponseCode)              {                  case 598: return AniDBUDPResponseCode.UnknownCommand_598;                  case 555: return AniDBUDPResponseCode.Banned_555;              }
Magic Number,AniDBAPI.Commands,AniDBCommand_MarkFileAsDisk,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBCommand_MarkFileAsDisk.cs,Process,The following statement contains a magic number: switch (ResponseCode)              {                  case 598: return AniDBUDPResponseCode.UnknownCommand_598;                  case 555: return AniDBUDPResponseCode.Banned_555;              }
Magic Number,AniDBAPI.Commands,AniDBCommand_MarkFileAsDisk,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBCommand_MarkFileAsDisk.cs,Process,The following statement contains a magic number: string sMsgType = socketResponse.Substring(0' 3);
Magic Number,AniDBAPI.Commands,AniDBCommand_MarkFileAsRemote,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBCommand_MarkFileAsRemote.cs,Process,The following statement contains a magic number: switch (ResponseCode)              {                  case 598: return AniDBUDPResponseCode.UnknownCommand_598;                  case 555: return AniDBUDPResponseCode.Banned_555;              }
Magic Number,AniDBAPI.Commands,AniDBCommand_MarkFileAsRemote,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBCommand_MarkFileAsRemote.cs,Process,The following statement contains a magic number: switch (ResponseCode)              {                  case 598: return AniDBUDPResponseCode.UnknownCommand_598;                  case 555: return AniDBUDPResponseCode.Banned_555;              }
Magic Number,AniDBAPI.Commands,AniDBCommand_MarkFileAsRemote,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBCommand_MarkFileAsRemote.cs,Process,The following statement contains a magic number: string sMsgType = socketResponse.Substring(0' 3);
Magic Number,AniDBAPI.Commands,AniDBCommand_MarkFileAsUnknown,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBCommand_MarkFileAsUnknown.cs,Process,The following statement contains a magic number: switch (ResponseCode)              {                  case 598: return AniDBUDPResponseCode.UnknownCommand_598;                  case 555: return AniDBUDPResponseCode.Banned_555;              }
Magic Number,AniDBAPI.Commands,AniDBCommand_MarkFileAsUnknown,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBCommand_MarkFileAsUnknown.cs,Process,The following statement contains a magic number: switch (ResponseCode)              {                  case 598: return AniDBUDPResponseCode.UnknownCommand_598;                  case 555: return AniDBUDPResponseCode.Banned_555;              }
Magic Number,AniDBAPI.Commands,AniDBCommand_MarkFileAsUnknown,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBCommand_MarkFileAsUnknown.cs,Process,The following statement contains a magic number: string sMsgType = socketResponse.Substring(0' 3);
Magic Number,AniDBAPI.Commands,AniDBCommand_NotifyGet,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBCommand_NotifyGet.cs,Process,The following statement contains a magic number: switch (ResponseCode)              {                  case 598: return AniDBUDPResponseCode.UnknownCommand_598;                  case 555: return AniDBUDPResponseCode.Banned_555;              }
Magic Number,AniDBAPI.Commands,AniDBCommand_NotifyGet,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBCommand_NotifyGet.cs,Process,The following statement contains a magic number: switch (ResponseCode)              {                  case 598: return AniDBUDPResponseCode.UnknownCommand_598;                  case 555: return AniDBUDPResponseCode.Banned_555;              }
Magic Number,AniDBAPI.Commands,AniDBCommand_NotifyGet,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBCommand_NotifyGet.cs,Process,The following statement contains a magic number: string sMsgType = socketResponse.Substring(0' 3);
Magic Number,AniDBAPI.Commands,AniDBCommand_NotifyList,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBCommand_NotifyList.cs,Process,The following statement contains a magic number: switch (ResponseCode)              {                  case 598: return AniDBUDPResponseCode.UnknownCommand_598;                  case 555: return AniDBUDPResponseCode.Banned_555;              }
Magic Number,AniDBAPI.Commands,AniDBCommand_NotifyList,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBCommand_NotifyList.cs,Process,The following statement contains a magic number: switch (ResponseCode)              {                  case 598: return AniDBUDPResponseCode.UnknownCommand_598;                  case 555: return AniDBUDPResponseCode.Banned_555;              }
Magic Number,AniDBAPI.Commands,AniDBCommand_NotifyList,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBCommand_NotifyList.cs,Process,The following statement contains a magic number: string sMsgType = socketResponse.Substring(0' 3);
Magic Number,AniDBAPI.Commands,AniDBCommand_Ping,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBCommand_Ping.cs,Process,The following statement contains a magic number: switch (ResponseCode)              {                  case 598: return AniDBUDPResponseCode.UnknownCommand_598;                  case 555: return AniDBUDPResponseCode.Banned_555;              }
Magic Number,AniDBAPI.Commands,AniDBCommand_Ping,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBCommand_Ping.cs,Process,The following statement contains a magic number: switch (ResponseCode)              {                  case 598: return AniDBUDPResponseCode.UnknownCommand_598;                  case 555: return AniDBUDPResponseCode.Banned_555;              }
Magic Number,AniDBAPI.Commands,AniDBCommand_Ping,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBCommand_Ping.cs,Process,The following statement contains a magic number: string sMsgType = socketResponse.Substring(0' 3);
Magic Number,AniDBAPI.Commands,AniDBCommand_UpdateFile,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBCommand_UpdateFile.cs,Process,The following statement contains a magic number: switch (ResponseCode)              {                  case 598: return AniDBUDPResponseCode.UnknownCommand_598;                  case 555: return AniDBUDPResponseCode.Banned_555;              }
Magic Number,AniDBAPI.Commands,AniDBCommand_UpdateFile,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBCommand_UpdateFile.cs,Process,The following statement contains a magic number: switch (ResponseCode)              {                  case 598: return AniDBUDPResponseCode.UnknownCommand_598;                  case 555: return AniDBUDPResponseCode.Banned_555;              }
Magic Number,AniDBAPI.Commands,AniDBCommand_UpdateFile,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBCommand_UpdateFile.cs,Process,The following statement contains a magic number: string sMsgType = socketResponse.Substring(0' 3);
Magic Number,AniDBAPI.Commands,AniDBCommand_Vote,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBCommand_Vote.cs,Process,The following statement contains a magic number: switch (ResponseCode)              {                  case 598: return AniDBUDPResponseCode.UnknownCommand_598;                  case 555: return AniDBUDPResponseCode.Banned_555;              }
Magic Number,AniDBAPI.Commands,AniDBCommand_Vote,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBCommand_Vote.cs,Process,The following statement contains a magic number: switch (ResponseCode)              {                  case 598: return AniDBUDPResponseCode.UnknownCommand_598;                  case 555: return AniDBUDPResponseCode.Banned_555;              }
Magic Number,AniDBAPI.Commands,AniDBCommand_Vote,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBCommand_Vote.cs,Process,The following statement contains a magic number: string sMsgType = socketResponse.Substring(0' 3);
Magic Number,AniDBAPI.Commands,AniDBCommand_Vote,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBCommand_Vote.cs,Init,The following statement contains a magic number: this.voteValue = (int) (votevalue * 100);
Magic Number,AniDBAPI.Commands,AniDBCommand_Vote,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBCommand_Vote.cs,Init,The following statement contains a magic number: switch (voteType)              {                  case AniDBVoteType.Anime:                      iVoteType = 1;                      break;                  case AniDBVoteType.AnimeTemp:                      iVoteType = 2;                      break;                  case AniDBVoteType.Group:                      iVoteType = 3;                      break;                  case AniDBVoteType.Episode:                      iVoteType = 1;                      break;              }
Magic Number,AniDBAPI.Commands,AniDBCommand_Vote,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBCommand_Vote.cs,Init,The following statement contains a magic number: switch (voteType)              {                  case AniDBVoteType.Anime:                      iVoteType = 1;                      break;                  case AniDBVoteType.AnimeTemp:                      iVoteType = 2;                      break;                  case AniDBVoteType.Group:                      iVoteType = 3;                      break;                  case AniDBVoteType.Episode:                      iVoteType = 1;                      break;              }
Magic Number,AniDBAPI.Commands,AniDBCommand_Vote,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBCommand_Vote.cs,InitEpisode,The following statement contains a magic number: this.voteValue = (int) (votevalue * 100);
Magic Number,AniDBAPI.Commands,AniDBUDPCommand,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBUDPCommand.cs,ProcessCommand,The following statement contains a magic number: Byte[] byReceivedAdd = new Byte[2000];
Magic Number,AniDBAPI.Commands,AniDBUDPCommand,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBUDPCommand.cs,ProcessCommand,The following statement contains a magic number: Byte[] buff = new byte[65536];
Magic Number,AniDBAPI.Commands,AniDBUDPCommand,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBUDPCommand.cs,ProcessCommand,The following statement contains a magic number: Byte[] input = new byte[received - 2];
Magic Number,AniDBAPI.Commands,AniDBUDPCommand,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBUDPCommand.cs,ProcessCommand,The following statement contains a magic number: Array.Copy(byReceivedAdd' 2' input' 0' received - 2);
Magic Number,AniDBAPI.Commands,AniDBUDPCommand,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBUDPCommand.cs,ProcessCommand,The following statement contains a magic number: Array.Copy(byReceivedAdd' 2' input' 0' received - 2);
Magic Number,AniDBAPI.Commands,AniDBUDPCommand,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBUDPCommand.cs,ProcessCommand,The following statement contains a magic number: (received > 2) && (byReceivedAdd[0] == 0) && (byReceivedAdd[1] == 0)
Magic Number,AniDBAPI.Commands,AniDBUDPCommand,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBUDPCommand.cs,ProcessCommand,The following statement contains a magic number: (commandType == enAniDBCommandType.Login) && (byReceivedAdd[0] == 0xFE) &&                          (byReceivedAdd[1] == 0xFF) &&                          (byReceivedAdd[3] == 53) && (byReceivedAdd[5] != 53) &&                          !Encoding.EncodingName.ToLower().StartsWith("unicode") && (changeencoding != null) &&                          changeencoding.EncodingName.ToLower().StartsWith("unicode")
Magic Number,AniDBAPI.Commands,AniDBUDPCommand,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBUDPCommand.cs,ProcessCommand,The following statement contains a magic number: (commandType == enAniDBCommandType.Login) && (byReceivedAdd[0] == 0xFE) &&                          (byReceivedAdd[1] == 0xFF) &&                          (byReceivedAdd[3] == 53) && (byReceivedAdd[5] != 53) &&                          !Encoding.EncodingName.ToLower().StartsWith("unicode") && (changeencoding != null) &&                          changeencoding.EncodingName.ToLower().StartsWith("unicode")
Magic Number,AniDBAPI.Commands,AniDBUDPCommand,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBUDPCommand.cs,ProcessCommand,The following statement contains a magic number: (commandType == enAniDBCommandType.Login) && (byReceivedAdd[0] == 0xFE) &&                          (byReceivedAdd[1] == 0xFF) &&                          (byReceivedAdd[3] == 53) && (byReceivedAdd[5] != 53) &&                          !Encoding.EncodingName.ToLower().StartsWith("unicode") && (changeencoding != null) &&                          changeencoding.EncodingName.ToLower().StartsWith("unicode")
Magic Number,AniDBAPI.Commands,AniDBUDPCommand,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBUDPCommand.cs,ProcessCommand,The following statement contains a magic number: (commandType == enAniDBCommandType.Login) && (byReceivedAdd[0] == 0xFE) &&                          (byReceivedAdd[1] == 0xFF) &&                          (byReceivedAdd[3] == 53) && (byReceivedAdd[5] != 53) &&                          !Encoding.EncodingName.ToLower().StartsWith("unicode") && (changeencoding != null) &&                          changeencoding.EncodingName.ToLower().StartsWith("unicode")
Magic Number,AniDBAPI.Commands,AniDBUDPCommand,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBUDPCommand.cs,ProcessCommand,The following statement contains a magic number: fulldesc += sp2[2];
Magic Number,AniDBAPI.Commands,AniDBUDPCommand,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBUDPCommand.cs,ProcessCommand,The following statement contains a magic number: fulldesc += sp2[2];
Magic Number,AniDBAPI.Commands,AniDBUDPCommand,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBUDPCommand.cs,ProcessCommand,The following statement contains a magic number: sp2.Length == 3
Magic Number,AniDBAPI.Commands,AniDBUDPCommand,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBUDPCommand.cs,ProcessCommand,The following statement contains a magic number: int.TryParse(socketResponse.Substring(0' 3)' out val);
Magic Number,AniDBAPI.Commands,AniDBUDPCommand,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBUDPCommand.cs,ProcessCommand,The following statement contains a magic number: socketResponse.Length > 2
Magic Number,AniDBAPI.Commands,AniDBUDPCommand,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBUDPCommand.cs,ProcessCommand,The following statement contains a magic number: ShokoService.AnidbProcessor.IsUdpBanned = ResponseCode == 555;
Magic Number,AniDBAPI.Commands,AniDBUDPCommand,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBUDPCommand.cs,ProcessCommand,The following statement contains a magic number: ResponseCode == 598 || ResponseCode == 506 || ResponseCode == 505
Magic Number,AniDBAPI.Commands,AniDBUDPCommand,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBUDPCommand.cs,ProcessCommand,The following statement contains a magic number: ResponseCode == 598 || ResponseCode == 506 || ResponseCode == 505
Magic Number,AniDBAPI.Commands,AniDBUDPCommand,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBUDPCommand.cs,ProcessCommand,The following statement contains a magic number: ResponseCode == 598 || ResponseCode == 506 || ResponseCode == 505
Magic Number,AniDBAPI.Commands,AniDBUDPCommand,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBUDPCommand.cs,ProcessCommand,The following statement contains a magic number: switch (ResponseCode)                  {                      case 600:                          errormsg = "600 INTERNAL SERVER ERROR";                          break;                      case 601:                          errormsg = "601 ANIDB OUT OF SERVICE - TRY AGAIN LATER";                          break;                      case 602:                          errormsg = "602 SERVER BUSY - TRY AGAIN LATER";                          break;                      case 604:                          errormsg = "TIMEOUT - DELAY AND RESUBMIT";                          break;                  }
Magic Number,AniDBAPI.Commands,AniDBUDPCommand,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBUDPCommand.cs,ProcessCommand,The following statement contains a magic number: switch (ResponseCode)                  {                      case 600:                          errormsg = "600 INTERNAL SERVER ERROR";                          break;                      case 601:                          errormsg = "601 ANIDB OUT OF SERVICE - TRY AGAIN LATER";                          break;                      case 602:                          errormsg = "602 SERVER BUSY - TRY AGAIN LATER";                          break;                      case 604:                          errormsg = "TIMEOUT - DELAY AND RESUBMIT";                          break;                  }
Magic Number,AniDBAPI.Commands,AniDBUDPCommand,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBUDPCommand.cs,ProcessCommand,The following statement contains a magic number: switch (ResponseCode)                  {                      case 600:                          errormsg = "600 INTERNAL SERVER ERROR";                          break;                      case 601:                          errormsg = "601 ANIDB OUT OF SERVICE - TRY AGAIN LATER";                          break;                      case 602:                          errormsg = "602 SERVER BUSY - TRY AGAIN LATER";                          break;                      case 604:                          errormsg = "TIMEOUT - DELAY AND RESUBMIT";                          break;                  }
Magic Number,AniDBAPI.Commands,AniDBUDPCommand,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBUDPCommand.cs,ProcessCommand,The following statement contains a magic number: switch (ResponseCode)                  {                      case 600:                          errormsg = "600 INTERNAL SERVER ERROR";                          break;                      case 601:                          errormsg = "601 ANIDB OUT OF SERVICE - TRY AGAIN LATER";                          break;                      case 602:                          errormsg = "602 SERVER BUSY - TRY AGAIN LATER";                          break;                      case 604:                          errormsg = "TIMEOUT - DELAY AND RESUBMIT";                          break;                  }
Magic Number,AniDBAPI.Commands,AniDBUDPCommand,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBUDPCommand.cs,ProcessCommand,The following statement contains a magic number: ShokoService.AnidbProcessor.ExtendPause(300' errormsg);
Magic Number,AniDBAPI.Commands,AniDBUDPCommand,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBUDPCommand.cs,ProcessCommand,The following statement contains a magic number: ResponseCode == 600 || ResponseCode == 601 || ResponseCode == 602 || ResponseCode == 604
Magic Number,AniDBAPI.Commands,AniDBUDPCommand,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBUDPCommand.cs,ProcessCommand,The following statement contains a magic number: ResponseCode == 600 || ResponseCode == 601 || ResponseCode == 602 || ResponseCode == 604
Magic Number,AniDBAPI.Commands,AniDBUDPCommand,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBUDPCommand.cs,ProcessCommand,The following statement contains a magic number: ResponseCode == 600 || ResponseCode == 601 || ResponseCode == 602 || ResponseCode == 604
Magic Number,AniDBAPI.Commands,AniDBUDPCommand,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBUDPCommand.cs,ProcessCommand,The following statement contains a magic number: ResponseCode == 600 || ResponseCode == 601 || ResponseCode == 602 || ResponseCode == 604
Magic Number,Shoko.Server.Commands,AniDBCommand_GetGroup,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBCommand_GetGroup.cs,Process,The following statement contains a magic number: ResponseCode == 598
Magic Number,Shoko.Server.Commands,AniDBCommand_GetGroup,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBCommand_GetGroup.cs,Process,The following statement contains a magic number: ResponseCode == 555
Magic Number,Shoko.Server.Commands,AniDBCommand_GetGroup,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBCommand_GetGroup.cs,Process,The following statement contains a magic number: string sMsgType = socketResponse.Substring(0' 3);
Magic Number,Shoko.Server.Commands,CommandRequest_DownloadAniDBImages,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Commands\Import\CommandRequest_DownloadAniDBImages.cs,ProcessCommand,The following statement contains a magic number: RecursivelyRetryDownload(downloadURLs[i]' ref tempName' 0' 5);
Magic Number,Shoko.Server.Commands,CommandRequest_DownloadAniDBImages,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Commands\Import\CommandRequest_DownloadAniDBImages.cs,RecursivelyRetryDownload,The following statement contains a magic number: bytes.Length < 4
Magic Number,Shoko.Server.Commands,CommandRequest_DownloadImage,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Commands\Import\CommandRequest_DownloadImage.cs,ProcessCommand,The following statement contains a magic number: RecursivelyRetryDownload(downloadURL' ref tempName' 0' 5);
Magic Number,Shoko.Server.Commands,CommandRequest_DownloadImage,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Commands\Import\CommandRequest_DownloadImage.cs,RecursivelyRetryDownload,The following statement contains a magic number: bytes.Length < 4
Magic Number,Shoko.Server.Commands,CommandRequest_HashFile,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Commands\Import\CommandRequest_HashFile.cs,ProcessFile_LocalInfo,The following statement contains a magic number: waitTime = ServerSettings.Instance.Import.FileLockWaitTimeMS = 4000;
Magic Number,Shoko.Server.Commands,CommandRequest_HashFile,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Commands\Import\CommandRequest_HashFile.cs,ProcessFile_LocalInfo,The following statement contains a magic number: waitTime < 1000
Magic Number,Shoko.Server.Commands,CommandRequest_HashFile,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Commands\Import\CommandRequest_HashFile.cs,ProcessFile_LocalInfo,The following statement contains a magic number: (filesize = CanAccessFile(FileName' writeAccess' ref e)) == 0 && (numAttempts < 60)
Magic Number,Shoko.Server.Commands,CommandRequest_HashFile,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Commands\Import\CommandRequest_HashFile.cs,ProcessFile_LocalInfo,The following statement contains a magic number: numAttempts >= 60 || filesize == 0
Magic Number,Shoko.Server.Commands,CommandRequest_LinkFileManually,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Commands\Import\CommandRequest_LinkFileManually.cs,ProcessCommand,The following statement contains a magic number: Percentage > 0 && Percentage <= 100
Magic Number,Shoko.Server.Commands,CommandRequest_ProcessFile,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Commands\Import\CommandRequest_ProcessFile.cs,ProcessFile_AniDB,The following statement contains a magic number: ts.TotalHours < 4
Magic Number,Shoko.Server.Commands,CommandRequest_ValidateAllImages,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Commands\Import\CommandRequest_ValidateAllImages.cs,ProcessCommand,The following statement contains a magic number: count % 10 == 0
Magic Number,Shoko.Server.Commands,CommandRequest_ValidateAllImages,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Commands\Import\CommandRequest_ValidateAllImages.cs,ProcessCommand,The following statement contains a magic number: count % 10 == 0
Magic Number,Shoko.Server.Commands,CommandRequest_ValidateAllImages,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Commands\Import\CommandRequest_ValidateAllImages.cs,ProcessCommand,The following statement contains a magic number: count % 10 == 0
Magic Number,Shoko.Server.Commands,CommandRequest_ValidateAllImages,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Commands\Import\CommandRequest_ValidateAllImages.cs,ProcessCommand,The following statement contains a magic number: count % 10 == 0
Magic Number,Shoko.Server.Commands,CommandRequest_ValidateAllImages,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Commands\Import\CommandRequest_ValidateAllImages.cs,ProcessCommand,The following statement contains a magic number: count % 10 == 0
Magic Number,Shoko.Server.Commands,CommandRequest_ValidateAllImages,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Commands\Import\CommandRequest_ValidateAllImages.cs,ProcessCommand,The following statement contains a magic number: count % 10 == 0
Magic Number,Shoko.Server.Commands,CommandRequest_ValidateAllImages,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Commands\Import\CommandRequest_ValidateAllImages.cs,ProcessCommand,The following statement contains a magic number: count % 10 == 0
Magic Number,Shoko.Server.Commands,CommandRequest_ValidateAllImages,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Commands\Import\CommandRequest_ValidateAllImages.cs,ProcessCommand,The following statement contains a magic number: count % 10 == 0
Magic Number,Shoko.Server.Commands,CommandRequest_ValidateAllImages,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Commands\Import\CommandRequest_ValidateAllImages.cs,ProcessCommand,The following statement contains a magic number: count % 10 == 0
Magic Number,Shoko.Server.Commands,CommandProcessorGeneral,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Commands\CommandProcessorGeneral.cs,WorkerCommands_DoWork,The following statement contains a magic number: Thread.Sleep(200);
Magic Number,Shoko.Server.Commands,CommandProcessorHasher,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Commands\CommandProcessorHasher.cs,WorkerCommands_DoWork,The following statement contains a magic number: Thread.Sleep(200);
Magic Number,Shoko.Server.Commands,CommandProcessorImages,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Commands\CommandProcessorImages.cs,WorkerCommands_DoWork,The following statement contains a magic number: Thread.Sleep(200);
Magic Number,Shoko.Server.Commands,CommandRequestImplementation,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Commands\CommandRequestImplementation.cs,Save,The following statement contains a magic number: switch (CommandRequestRepository.GetQueueIndex(cri))              {                  case 0:                      ShokoService.CmdProcessorGeneral.NotifyOfNewCommand();                      break;                  case 1:                      ShokoService.CmdProcessorHasher.NotifyOfNewCommand();                      break;                  case 2:                      ShokoService.CmdProcessorImages.NotifyOfNewCommand();                      break;              }
Magic Number,Shoko.Server.Commands,CommandRequest_GetCalendar,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Commands\AniDB\CommandRequest_GetCalendar.cs,ProcessCommand,The following statement contains a magic number: ts.TotalDays >= 2
Magic Number,Shoko.Server.Commands,CommandRequest_GetReleaseGroupStatus,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Commands\AniDB\CommandRequest_GetReleaseGroupStatus.cs,ProcessCommand,The following statement contains a magic number: ts.TotalDays > 50
Magic Number,Shoko.Server.Commands,CommandRequest_GetUpdated,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Commands\AniDB\CommandRequest_GetUpdated.cs,ProcessCommand,The following statement contains a magic number: DateTime localTime = DateTime.Now.AddDays(-3);
Magic Number,Shoko.Server.Commands,CommandRequest_GetUpdated,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Commands\AniDB\CommandRequest_GetUpdated.cs,ProcessCommand,The following statement contains a magic number: ts.TotalHours > 4
Magic Number,Shoko.Server.AniDB_API.Raws,Raw_AniDB_MyListStats,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Raws\Raw_AniDB_MyListStats.cs,Raw_AniDB_MyListStats,The following statement contains a magic number: string[] sDetails = sRecMessage.Substring(16).Split('|');
Magic Number,Shoko.Server.AniDB_API.Raws,Raw_AniDB_MyListStats,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Raws\Raw_AniDB_MyListStats.cs,Raw_AniDB_MyListStats,The following statement contains a magic number: this.Files = AniDBAPILib.ProcessAniDBInt(sDetails[2]);
Magic Number,Shoko.Server.AniDB_API.Raws,Raw_AniDB_MyListStats,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Raws\Raw_AniDB_MyListStats.cs,Raw_AniDB_MyListStats,The following statement contains a magic number: this.SizeOfFiles = AniDBAPILib.ProcessAniDBLong(sDetails[3]);
Magic Number,Shoko.Server.AniDB_API.Raws,Raw_AniDB_MyListStats,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Raws\Raw_AniDB_MyListStats.cs,Raw_AniDB_MyListStats,The following statement contains a magic number: this.AddedAnimes = AniDBAPILib.ProcessAniDBInt(sDetails[4]);
Magic Number,Shoko.Server.AniDB_API.Raws,Raw_AniDB_MyListStats,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Raws\Raw_AniDB_MyListStats.cs,Raw_AniDB_MyListStats,The following statement contains a magic number: this.AddedEpisodes = AniDBAPILib.ProcessAniDBInt(sDetails[5]);
Magic Number,Shoko.Server.AniDB_API.Raws,Raw_AniDB_MyListStats,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Raws\Raw_AniDB_MyListStats.cs,Raw_AniDB_MyListStats,The following statement contains a magic number: this.AddedFiles = AniDBAPILib.ProcessAniDBInt(sDetails[6]);
Magic Number,Shoko.Server.AniDB_API.Raws,Raw_AniDB_MyListStats,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Raws\Raw_AniDB_MyListStats.cs,Raw_AniDB_MyListStats,The following statement contains a magic number: this.AddedGroups = AniDBAPILib.ProcessAniDBInt(sDetails[7]);
Magic Number,Shoko.Server.AniDB_API.Raws,Raw_AniDB_MyListStats,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Raws\Raw_AniDB_MyListStats.cs,Raw_AniDB_MyListStats,The following statement contains a magic number: this.LeechPct = AniDBAPILib.ProcessAniDBInt(sDetails[8]);
Magic Number,Shoko.Server.AniDB_API.Raws,Raw_AniDB_MyListStats,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Raws\Raw_AniDB_MyListStats.cs,Raw_AniDB_MyListStats,The following statement contains a magic number: this.GloryPct = AniDBAPILib.ProcessAniDBInt(sDetails[9]);
Magic Number,Shoko.Server.AniDB_API.Raws,Raw_AniDB_MyListStats,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Raws\Raw_AniDB_MyListStats.cs,Raw_AniDB_MyListStats,The following statement contains a magic number: this.ViewedPct = AniDBAPILib.ProcessAniDBInt(sDetails[10]);
Magic Number,Shoko.Server.AniDB_API.Raws,Raw_AniDB_MyListStats,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Raws\Raw_AniDB_MyListStats.cs,Raw_AniDB_MyListStats,The following statement contains a magic number: this.MylistPct = AniDBAPILib.ProcessAniDBInt(sDetails[11]);
Magic Number,Shoko.Server.AniDB_API.Raws,Raw_AniDB_MyListStats,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Raws\Raw_AniDB_MyListStats.cs,Raw_AniDB_MyListStats,The following statement contains a magic number: this.ViewedMylistPct = AniDBAPILib.ProcessAniDBInt(sDetails[12]);
Magic Number,Shoko.Server.AniDB_API.Raws,Raw_AniDB_MyListStats,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Raws\Raw_AniDB_MyListStats.cs,Raw_AniDB_MyListStats,The following statement contains a magic number: this.EpisodesViewed = AniDBAPILib.ProcessAniDBInt(sDetails[13]);
Magic Number,Shoko.Server.AniDB_API.Raws,Raw_AniDB_MyListStats,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Raws\Raw_AniDB_MyListStats.cs,Raw_AniDB_MyListStats,The following statement contains a magic number: this.Votes = AniDBAPILib.ProcessAniDBInt(sDetails[14]);
Magic Number,Shoko.Server.AniDB_API.Raws,Raw_AniDB_MyListStats,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Raws\Raw_AniDB_MyListStats.cs,Raw_AniDB_MyListStats,The following statement contains a magic number: this.Reviews = AniDBAPILib.ProcessAniDBInt(sDetails[15]);
Magic Number,Shoko.Server.AniDB_API.Raws,Raw_AniDB_MyListStats,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Raws\Raw_AniDB_MyListStats.cs,Raw_AniDB_MyListStats,The following statement contains a magic number: this.ViewiedLength = AniDBAPILib.ProcessAniDBInt(sDetails[16]);
Magic Number,Shoko.Server.AniDB_API.Raws,Raw_AniDB_Vote_HTTP,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Raws\Raw_AniDB_Vote_HTTP.cs,ProcessAnime,The following statement contains a magic number: int.TryParse((val * 100).ToString()' out int ival);
Magic Number,Shoko.Server.AniDB_API.Raws,Raw_AniDB_Vote_HTTP,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Raws\Raw_AniDB_Vote_HTTP.cs,ProcessAnimeTemp,The following statement contains a magic number: int.TryParse((val * 100).ToString()' out int ival);
Magic Number,Shoko.Server.AniDB_API.Raws,Raw_AniDB_Vote_HTTP,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Raws\Raw_AniDB_Vote_HTTP.cs,ProcessEpisode,The following statement contains a magic number: int.TryParse((val * 100).ToString()' out int ival);
Magic Number,Shoko.Server.AniDB_API.Titles,AniDB_TitleHelper,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Titles\AniDB_TitleHelper.cs,CreateCache,The following statement contains a magic number: DateTime.Now - lastWriteTime > TimeSpan.FromHours(24)
Magic Number,Shoko.Server.API,Startup,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\Startup.cs,ConfigureServices,The following statement contains a magic number: services.AddMvc(options =>                  {                      options.EnableEndpointRouting = true;                      options.AllowEmptyInputInBodyModelBinding = true;                      foreach (var formatter in options.InputFormatters)                      {                          if (formatter.GetType() == typeof(JsonInputFormatter))                              ((JsonInputFormatter)formatter).SupportedMediaTypes.Add(                                  Microsoft.Net.Http.Headers.MediaTypeHeaderValue.Parse("text/plain"));                      }                  }).SetCompatibilityVersion(CompatibilityVersion.Version_2_2)                  .AddJsonOptions(json =>                  {                      json.SerializerSettings.MaxDepth = 10;                      json.SerializerSettings.ContractResolver = new OmitEmptyEnumerableResolver()                      {                          NamingStrategy = new DefaultNamingStrategy()                      };                      json.SerializerSettings.NullValueHandling = NullValueHandling.Ignore;                      json.SerializerSettings.DefaultValueHandling = DefaultValueHandling.IgnoreAndPopulate;                      json.SerializerSettings.DateFormatString = "yyyy-MM-dd";                  });
Magic Number,Shoko.Server.API.v2,APIV2Helper,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v2\APIV2Helper.cs,ConvertRestImageToNonRestUrl,The following statement contains a magic number: int.TryParse(split[split.Length - 2]' out type)
Magic Number,Shoko.Server.API.v2.Models.common,Group,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v2\Models\common\Group.cs,GenerateFromAnimeGroup,The following statement contains a magic number: g.rating = Math.Round(ag.AniDBRating / 100' 1).ToString(CultureInfo.InvariantCulture);
Magic Number,Shoko.Server.API.v2.Models.common,Group,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v2\Models\common\Group.cs,PopulateArtFromAniDBAnime,The following statement contains a magic number: pic = 999;
Magic Number,Shoko.Server.API.v2.Models.common,RawFile,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v2\Models\common\RawFile.cs,RawFile,The following statement contains a magic number: switch (p.StreamType)                      {                          //video                          case 1:                              new_media.AddVideo(p);                              break;                          //audio                          case 2:                              new_media.AddAudio(p);                              break;                          //subtitle                          case 3:                              new_media.AddSubtitle(p);                              break;                          //menu                          case 4:                              Dictionary<string' string> mdict = new Dictionary<string' string>();                              //TODO APIv2: menu object could be usefull for external players                              new_media.AddMenu(mdict);                              break;                      }
Magic Number,Shoko.Server.API.v2.Models.common,RawFile,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v2\Models\common\RawFile.cs,RawFile,The following statement contains a magic number: switch (p.StreamType)                      {                          //video                          case 1:                              new_media.AddVideo(p);                              break;                          //audio                          case 2:                              new_media.AddAudio(p);                              break;                          //subtitle                          case 3:                              new_media.AddSubtitle(p);                              break;                          //menu                          case 4:                              Dictionary<string' string> mdict = new Dictionary<string' string>();                              //TODO APIv2: menu object could be usefull for external players                              new_media.AddMenu(mdict);                              break;                      }
Magic Number,Shoko.Server.API.v2.Models.common,RawFile,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v2\Models\common\RawFile.cs,RawFile,The following statement contains a magic number: switch (p.StreamType)                      {                          //video                          case 1:                              new_media.AddVideo(p);                              break;                          //audio                          case 2:                              new_media.AddAudio(p);                              break;                          //subtitle                          case 3:                              new_media.AddSubtitle(p);                              break;                          //menu                          case 4:                              Dictionary<string' string> mdict = new Dictionary<string' string>();                              //TODO APIv2: menu object could be usefull for external players                              new_media.AddMenu(mdict);                              break;                      }
Magic Number,Shoko.Server.API.v2.Models.common,Episode,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v2\Models\common\Episode.cs,GenerateFromAnimeEpisode,The following statement contains a magic number: ep.rating = (rating / 100).ToString(CultureInfo.InvariantCulture);
Magic Number,Shoko.Server.API.v2.Models.common,Episode,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v2\Models\common\Episode.cs,GenerateFromAnimeEpisode,The following statement contains a magic number: rating > 10
Magic Number,Shoko.Server.API.v2.Models.common,Role,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v2\Models\common\Role.cs,GetHashCode,The following statement contains a magic number: return ((character != null ? character.GetHashCode() : 0) * 397) ^ (staff != null ? staff.GetHashCode() : 0);
Magic Number,Shoko.Server.API.v2.Models.common,Serie,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v2\Models\common\Serie.cs,GenerateFromAniDB_Anime,The following statement contains a magic number: Serie sr = new Serie              {                  // 0 will load all                  id = -1'                  aid = anime.AnimeID'                  summary = anime.Description'                  rating = Math.Round(anime.Rating / 100D' 1)                      .ToString(CultureInfo.InvariantCulture)'                  votes = anime.VoteCount.ToString()'                  name = anime.MainTitle'                  ismovie = anime.AnimeType == (int) AnimeType.Movie ? 1 : 0              };
Magic Number,Shoko.Server.API.v2.Models.common,Serie,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v2\Models\common\Serie.cs,GenerateFromAniDB_Anime,The following statement contains a magic number: sr.userrating = Math.Round(vote.VoteValue / 100D' 1).ToString(CultureInfo.InvariantCulture);
Magic Number,Shoko.Server.API.v2.Models.common,Serie,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v2\Models\common\Serie.cs,PopulateArtFromAniDBAnime,The following statement contains a magic number: pic = 999;
Magic Number,Shoko.Server.API.v2.Modules,Common,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v2\Modules\Common.cs,DeleteFolder,The following statement contains a magic number: return new APIMessage(400' "ImportFolderID missing");
Magic Number,Shoko.Server.API.v2.Modules,Common,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v2\Modules\Common.cs,BigSearch,The following statement contains a magic number: para.limit = 100;
Magic Number,Shoko.Server.API.v2.Modules,Common,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v2\Modules\Common.cs,SearchStartsWith,The following statement contains a magic number: para.limit = 100;
Magic Number,Shoko.Server.API.v2.Modules,Common,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v2\Modules\Common.cs,GetRecentFiles,The following statement contains a magic number: limit = 50;
Magic Number,Shoko.Server.API.v2.Modules,Common,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v2\Modules\Common.cs,GetAllFiles,The following statement contains a magic number: limit_x = 100;
Magic Number,Shoko.Server.API.v2.Modules,Common,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v2\Modules\Common.cs,GetRecentEpisodes,The following statement contains a magic number: para.limit = 10;
Magic Number,Shoko.Server.API.v2.Modules,Common,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v2\Modules\Common.cs,EpisodeScrobble,The following statement contains a magic number: int type = 2;
Magic Number,Shoko.Server.API.v2.Modules,Common,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v2\Modules\Common.cs,EpisodeScrobble,The following statement contains a magic number: type = 2;
Magic Number,Shoko.Server.API.v2.Modules,Common,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v2\Modules\Common.cs,EpisodeScrobble,The following statement contains a magic number: switch (impl.TraktScrobble(id' type' progress' status))                      {                          case 200:                              return Ok();                          case 404:                              return NotFound();                          default:                              return InternalError();                      }
Magic Number,Shoko.Server.API.v2.Modules,Common,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v2\Modules\Common.cs,EpisodeScrobble,The following statement contains a magic number: switch (impl.TraktScrobble(id' type' progress' status))                      {                          case 200:                              return Ok();                          case 404:                              return NotFound();                          default:                              return InternalError();                      }
Magic Number,Shoko.Server.API.v2.Modules,Common,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v2\Modules\Common.cs,ListWatchedEpisodes,The following statement contains a magic number: DateTime date_after = new DateTime(1900' 01' 01);
Magic Number,Shoko.Server.API.v2.Modules,Common,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v2\Modules\Common.cs,GetAllEpisodes,The following statement contains a magic number: limit = 100;
Magic Number,Shoko.Server.API.v2.Modules,Common,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v2\Modules\Common.cs,EpisodeVote,The following statement contains a magic number: score = score * 100;
Magic Number,Shoko.Server.API.v2.Modules,Common,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v2\Modules\Common.cs,EpisodeVote,The following statement contains a magic number: score <= 10
Magic Number,Shoko.Server.API.v2.Modules,Common,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v2\Modules\Common.cs,EpisodeVote,The following statement contains a magic number: score > 0 && score < 1000
Magic Number,Shoko.Server.API.v2.Modules,Common,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v2\Modules\Common.cs,SeriesToday,The following statement contains a magic number: List<Serie> result = allSeries.Where(ser =>              {                  var anime = RepoFactory.AniDB_Anime.GetByAnimeID(ser.AniDB_ID);                  // It might end today' but that's okay                  if (anime.EndDate != null)                  {                      if (now > anime.EndDate.Value && now - anime.EndDate.Value > new TimeSpan(16' 0' 0)) return false;                  }                  if (ser.AirsOn == null) return false;                  return DateTime.Now.DayOfWeek == ser.AirsOn.Value;              }).Select(ser => Serie.GenerateFromAnimeSeries(HttpContext' ser' user.JMMUserID' para.nocast == 1'                  para.notag == 1' para.level' para.all == 1' para.allpics == 1' para.pic' para.tagfilter)).OrderBy(a => a.name).ToList();
Magic Number,Shoko.Server.API.v2.Modules,Common,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v2\Modules\Common.cs,GetSeriesRecent,The following statement contains a magic number: para.limit = 10;
Magic Number,Shoko.Server.API.v2.Modules,Common,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v2\Modules\Common.cs,SearchForSerie,The following statement contains a magic number: para.limit = 100;
Magic Number,Shoko.Server.API.v2.Modules,Common,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v2\Modules\Common.cs,SearchForTag,The following statement contains a magic number: para.limit = 100;
Magic Number,Shoko.Server.API.v2.Modules,Common,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v2\Modules\Common.cs,GetSeriesByFolder,The following statement contains a magic number: limit = 100;
Magic Number,Shoko.Server.API.v2.Modules,Common,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v2\Modules\Common.cs,GetSeriesInfoByFolder,The following statement contains a magic number: limit = 100;
Magic Number,Shoko.Server.API.v2.Modules,Common,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v2\Modules\Common.cs,GetSeriesInfoByFolder,The following statement contains a magic number: Serie ser = Serie.GenerateFromVideoLocal(HttpContext' vl' uid' true' true' 2' false' false' 0' tagfilter);
Magic Number,Shoko.Server.API.v2.Modules,Common,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v2\Modules\Common.cs,SerieVote,The following statement contains a magic number: score <= 0 || score > 1000
Magic Number,Shoko.Server.API.v2.Modules,Common,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v2\Modules\Common.cs,SerieVote,The following statement contains a magic number: score = score * 100;
Magic Number,Shoko.Server.API.v2.Modules,Common,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v2\Modules\Common.cs,SerieVote,The following statement contains a magic number: score <= 10
Magic Number,Shoko.Server.API.v2.Modules,Common,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v2\Modules\Common.cs,SerieVote,The following statement contains a magic number: CommandRequest_VoteAnime cmdVote =                  new CommandRequest_VoteAnime(ser.AniDB_ID' voteType' Convert.ToDecimal(score / 100));
Magic Number,Shoko.Server.API.v2.Modules,Common,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v2\Modules\Common.cs,SearchGroup,The following statement contains a magic number: para.limit = 100;
Magic Number,Shoko.Server.API.v2.Modules,Common,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v2\Modules\Common.cs,CheckGroupNameFuzzy,The following statement contains a magic number: int k = Math.Max(Math.Min((int)(a.GroupName.Length / 6D)' (int)(query.Length / 6D))' 1);
Magic Number,Shoko.Server.API.v2.Modules,Common,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v2\Modules\Common.cs,CheckGroupNameFuzzy,The following statement contains a magic number: int k = Math.Max(Math.Min((int)(a.GroupName.Length / 6D)' (int)(query.Length / 6D))' 1);
Magic Number,Shoko.Server.API.v2.Modules,Common,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v2\Modules\Common.cs,CheckGroupNameFuzzy,The following statement contains a magic number: query.Length <= 4 || a.GroupName.Length <= 4
Magic Number,Shoko.Server.API.v2.Modules,Common,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v2\Modules\Common.cs,CheckGroupNameFuzzy,The following statement contains a magic number: query.Length <= 4 || a.GroupName.Length <= 4
Magic Number,Shoko.Server.API.v2.Modules,Common,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v2\Modules\Common.cs,CheckGroupNameFuzzy,The following statement contains a magic number: distLevenshtein.AddOrUpdate(a' dist'                      (key' oldValue) => Math.Abs(Math.Min(oldValue' dist) - dist) < 0.0001D ? dist : oldValue);
Magic Number,Shoko.Server.API.v2.Modules,Common,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v2\Modules\Common.cs,SearchGroupName,The following statement contains a magic number: !fuzzy || query.Length >= (IntPtr.Size * 8)
Magic Number,Shoko.Server.API.v2.Modules,Core,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v2\Modules\Core.cs,SetImagepath,The following statement contains a magic number: return new APIMessage(404' "Directory Not Found on Host");
Magic Number,Shoko.Server.API.v2.Modules,Core,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v2\Modules\Core.cs,SetImagepath,The following statement contains a magic number: return new APIMessage(400' "Path Missing");
Magic Number,Shoko.Server.API.v2.Modules,Core,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v2\Modules\Core.cs,SetAniDB,The following statement contains a magic number: return new APIMessage(400' "Login and Password missing");
Magic Number,Shoko.Server.API.v2.Modules,Core,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v2\Modules\Core.cs,TestAniDB,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,Shoko.Server.API.v2.Modules,Core,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v2\Modules\Core.cs,UpdateMissingAniDBXML,The following statement contains a magic number: i % 10 == 1
Magic Number,Shoko.Server.API.v2.Modules,Core,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v2\Modules\Core.cs,SyncTrakt,The following statement contains a magic number: return new APIMessage(204' "Trakt is not enabled or you are missing the authtoken");
Magic Number,Shoko.Server.API.v2.Modules,Core,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v2\Modules\Core.cs,GetOSFolder,The following statement contains a magic number: return new APIMessage(400' "full_path missing");
Magic Number,Shoko.Server.API.v2.Modules,AniEpSummary,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v2\Modules\Core.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ AniDBEpisodeNumber;
Magic Number,Shoko.Server.API.v2.Modules,AniEpSummary,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v2\Modules\Core.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (AniDBEpisodeName != null ? AniDBEpisodeName.GetHashCode() : 0);
Magic Number,Shoko.Server.API.v2.Modules,TvDBEpSummary,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v2\Modules\Core.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ TvDBEpisodeNumber;
Magic Number,Shoko.Server.API.v2.Modules,TvDBEpSummary,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v2\Modules\Core.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (TvDBEpisodeName != null ? TvDBEpisodeName.GetHashCode() : 0);
Magic Number,Shoko.Server.API.v2.Modules,DashboardModules,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v2\Modules\DashboardModules.cs,GetStats,The following statement contains a magic number: hours = watched.Select(a => RepoFactory.VideoLocal.GetByID(a.VideoLocalID)).Where(a => a != null)                      .Sum(a => a.Duration) / 3600000;
Magic Number,Shoko.Server.API.v2.Modules,DashboardModules,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v2\Modules\DashboardModules.cs,GetStats,The following statement contains a magic number: tags = TagFilter.ProcessTags(tagfilter' tags).Take(10).ToList();
Magic Number,Shoko.Server.API.v2.Modules,DashboardModules,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v2\Modules\DashboardModules.cs,SizeSuffix,The following statement contains a magic number: int mag = (int)Math.Log(value' 1024);
Magic Number,Shoko.Server.API.v2.Modules,DashboardModules,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v2\Modules\DashboardModules.cs,SizeSuffix,The following statement contains a magic number: decimal adjustedSize = (decimal)value / (1L << (mag * 10));
Magic Number,Shoko.Server.API.v2.Modules,DashboardModules,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v2\Modules\DashboardModules.cs,SizeSuffix,The following statement contains a magic number: adjustedSize /= 1024;
Magic Number,Shoko.Server.API.v2.Modules,DashboardModules,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v2\Modules\DashboardModules.cs,SizeSuffix,The following statement contains a magic number: Math.Round(adjustedSize' decimalPlaces) >= 1000
Magic Number,Shoko.Server.API.v2.Modules,Image,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v2\Modules\Image.cs,GetImage,The following statement contains a magic number: Response.StatusCode = 404;
Magic Number,Shoko.Server.API.v2.Modules,Image,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v2\Modules\Image.cs,GetThumb,The following statement contains a magic number: newratio = 0.6667f;
Magic Number,Shoko.Server.API.v2.Modules,Image,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v2\Modules\Image.cs,GetThumb,The following statement contains a magic number: Response.StatusCode = 404;
Magic Number,Shoko.Server.API.v2.Modules,Image,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v2\Modules\Image.cs,GetRandomImage,The following statement contains a magic number: Response.StatusCode = 404;
Magic Number,Shoko.Server.API.v2.Modules,Image,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v2\Modules\Image.cs,ResizeImageToRatio,The following statement contains a magic number: Math.Abs(newratio) < 0.1F
Magic Number,Shoko.Server.API.v2.Modules,Image,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v2\Modules\Image.cs,ResizeImageToRatio,The following statement contains a magic number: nheight > im.Height + 0.5F
Magic Number,Shoko.Server.API.v2.Modules,Image,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v2\Modules\Image.cs,ResizeImageToRatio,The following statement contains a magic number: x = (im.Width - newwidth) / 2;
Magic Number,Shoko.Server.API.v2.Modules,Image,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v2\Modules\Image.cs,ResizeImageToRatio,The following statement contains a magic number: y = (im.Height - newheight) / 2;
Magic Number,Shoko.Server.API.v2.Modules,Init,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v2\Modules\Init.cs,GetVersion,The following statement contains a magic number: versions.Length == 2
Magic Number,Shoko.Server.API.v2.Modules,Init,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v2\Modules\Init.cs,SetAniDB,The following statement contains a magic number: return new APIMessage(400' "Login or Password missing"' details);
Magic Number,Shoko.Server.API.v2.Modules,Init,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v2\Modules\Init.cs,TestAniDB,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,Shoko.Server.API.v2.Modules,Version,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v2\Modules\Version.cs,GetVersion,The following statement contains a magic number: versions.Length == 2
Magic Number,Shoko.Server.API.v2.Modules,PlexWebhook,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v2\Modules\PlexWebhook.cs,TraktScrobble,The following statement contains a magic number: float per = 100 * (metadata.ViewOffset / (float)vl.Duration);
Magic Number,Shoko.Server.API.v2.Modules,PlexWebhook,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v2\Modules\PlexWebhook.cs,GetEpisode,The following statement contains a magic number: int episodeNumber = int.Parse(guid.AbsolutePath.Split('/')[2]);
Magic Number,Shoko.Server.API.v2.Modules,PlexWebhook,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v2\Modules\PlexWebhook.cs,GetEpisode,The following statement contains a magic number: switch (series) //I hate magic number's but this is just about how I can do this' also the rest of this is for later.              {                  case -4:                      episodeType = EpisodeType.Parody;                      break;                  case -3:                      episodeType = EpisodeType.Trailer;                      break;                  case -2:                      episodeType = EpisodeType.Other;                      break;                  case -1:                      episodeType = EpisodeType.Credits;                      break;                  case 0:                      episodeType = EpisodeType.Special;                      break;                  default:                      episodeType = EpisodeType.Episode;                      break;              }
Magic Number,Shoko.Server.API.v2.Modules,PlexWebhook,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v2\Modules\PlexWebhook.cs,GetEpisode,The following statement contains a magic number: switch (series) //I hate magic number's but this is just about how I can do this' also the rest of this is for later.              {                  case -4:                      episodeType = EpisodeType.Parody;                      break;                  case -3:                      episodeType = EpisodeType.Trailer;                      break;                  case -2:                      episodeType = EpisodeType.Other;                      break;                  case -1:                      episodeType = EpisodeType.Credits;                      break;                  case 0:                      episodeType = EpisodeType.Special;                      break;                  default:                      episodeType = EpisodeType.Episode;                      break;              }
Magic Number,Shoko.Server.API.v2.Modules,PlexWebhook,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v2\Modules\PlexWebhook.cs,GetEpisode,The following statement contains a magic number: switch (series) //I hate magic number's but this is just about how I can do this' also the rest of this is for later.              {                  case -4:                      episodeType = EpisodeType.Parody;                      break;                  case -3:                      episodeType = EpisodeType.Trailer;                      break;                  case -2:                      episodeType = EpisodeType.Other;                      break;                  case -1:                      episodeType = EpisodeType.Credits;                      break;                  case 0:                      episodeType = EpisodeType.Special;                      break;                  default:                      episodeType = EpisodeType.Episode;                      break;              }
Magic Number,Shoko.Server.API.v2.Modules,PlexWebhook,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v2\Modules\PlexWebhook.cs,FromUnixTime,The following statement contains a magic number: return new DateTime(1970' 1' 1' 0' 0' 0' DateTimeKind.Utc).AddSeconds(unixTime);
Magic Number,Shoko.Server.API.v2.Modules,Webui,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v2\Modules\Webui.cs,WebUIGetUrlAndUpdate,The following statement contains a magic number: return url != string.Empty                       ? WebUIUpdate(url' channel' tag_name)                       : new APIMessage(204' "Content is missing");
Magic Number,Shoko.Server.API.v2.Modules,Webui,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v2\Modules\Webui.cs,SetWebUIConfig,The following statement contains a magic number: return new APIMessage(400' "Config is not a Valid.");
Magic Number,Shoko.Server.API.v3,ImportFolderController,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v3\Controllers\ImportFolderController.cs,EditFolder,The following statement contains a magic number: return new APIMessage(400' "ImportFolderLocation and ImportFolderID missing");
Magic Number,Shoko.Server.API.v3,ImportFolderController,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v3\Controllers\ImportFolderController.cs,DeleteFolder,The following statement contains a magic number: return new APIMessage(500' res);
Magic Number,Shoko.Server.API.v3,ImportFolderController,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v3\Controllers\ImportFolderController.cs,DeleteFolder,The following statement contains a magic number: return new APIMessage(400' "ImportFolderID missing");
Magic Number,Shoko.Server.API.v3,SeriesController,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v3\Controllers\SeriesController.cs,CheckTitlesFuzzy,The following statement contains a magic number: title.Length < 5 && result > 0.8
Magic Number,Shoko.Server.API.v3,SeriesController,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v3\Controllers\SeriesController.cs,CheckTitlesFuzzy,The following statement contains a magic number: title.Length < 5 && result > 0.8
Magic Number,Shoko.Server.API.v3,SeriesController,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v3\Controllers\SeriesController.cs,CheckTitlesFuzzy,The following statement contains a magic number: distLevenshtein.AddOrUpdate(a' new Tuple<double' string>(dist' match)'                      (key' oldValue) =>                      {                          if (oldValue.Item1 < dist) return oldValue;                          if (Math.Abs(oldValue.Item1 - dist) < 0.00001)                              return oldValue.Item2.Length < match.Length                                  ? oldValue                                  : new Tuple<double' string>(dist' match);                            return new Tuple<double' string>(dist' match);                      });
Magic Number,Shoko.Server.API.v3,Series,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v3\Models\Shoko\Series.cs,AddBasicAniDBInfo,The following statement contains a magic number: UserRating = new Rating                  {                      Value = (decimal) Math.Round(vote.VoteValue / 100D' 1)' MaxValue = 10' Type = voteType'                      Source = "User"                  };
Magic Number,Shoko.Server.API.v3,Series,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v3\Models\Shoko\Series.cs,AddBasicAniDBInfo,The following statement contains a magic number: UserRating = new Rating                  {                      Value = (decimal) Math.Round(vote.VoteValue / 100D' 1)' MaxValue = 10' Type = voteType'                      Source = "User"                  };
Magic Number,Shoko.Server.API.v3,Series,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v3\Models\Shoko\Series.cs,GetAniDBInfo,The following statement contains a magic number: var aniDB = new AniDB              {                  ID = anime.AnimeID'                  SeriesType = anime.AnimeType.ToString()'                  Restricted = anime.Restricted == 1'                  Description = anime.Description'                  Rating = new Rating                  {                      Source = "AniDB"'                      Value = anime.Rating'                      MaxValue = 1000'                      Votes = anime.VoteCount                  }'                  Title = anime.MainTitle'                  Titles = anime.GetTitles().Select(title => new Title                      {Language = title.Language' Name = title.Title' Type = title.TitleType}).ToList()'              };
Magic Number,Shoko.Server.API.v3,Series,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v3\Models\Shoko\Series.cs,GetTvDBInfo,The following statement contains a magic number: model.Rating = new Rating {Source = "TvDB"' Value = tvdbSer.Rating.Value' MaxValue = 10};
Magic Number,Shoko.Server.Commands.Plex,CommandRequest_PlexSyncWatched,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Commands\Plex\CommandRequest_PlexSyncWatched.cs,FromUnixTime,The following statement contains a magic number: return new DateTime(1970' 1' 1' 0' 0' 0' DateTimeKind.Utc)                  .AddSeconds(unixTime);
Magic Number,Shoko.Server.Extensions,ModelProviders,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Extensions\ModelProviders.cs,ToMedia,The following statement contains a magic number: int size = (m.MediaInfo[0] << 24) | (m.MediaInfo[1] << 16) | (m.MediaInfo[2] << 8) | m.MediaInfo[3];
Magic Number,Shoko.Server.Extensions,ModelProviders,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Extensions\ModelProviders.cs,ToMedia,The following statement contains a magic number: int size = (m.MediaInfo[0] << 24) | (m.MediaInfo[1] << 16) | (m.MediaInfo[2] << 8) | m.MediaInfo[3];
Magic Number,Shoko.Server.Extensions,ModelProviders,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Extensions\ModelProviders.cs,ToMedia,The following statement contains a magic number: int size = (m.MediaInfo[0] << 24) | (m.MediaInfo[1] << 16) | (m.MediaInfo[2] << 8) | m.MediaInfo[3];
Magic Number,Shoko.Server.Extensions,ModelProviders,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Extensions\ModelProviders.cs,ToMedia,The following statement contains a magic number: int size = (m.MediaInfo[0] << 24) | (m.MediaInfo[1] << 16) | (m.MediaInfo[2] << 8) | m.MediaInfo[3];
Magic Number,Shoko.Server.Extensions,ModelProviders,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Extensions\ModelProviders.cs,ToMedia,The following statement contains a magic number: int size = (m.MediaInfo[0] << 24) | (m.MediaInfo[1] << 16) | (m.MediaInfo[2] << 8) | m.MediaInfo[3];
Magic Number,Shoko.Server.Extensions,ModelProviders,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Extensions\ModelProviders.cs,ToMedia,The following statement contains a magic number: byte[] data = new byte[m.MediaInfo.Length - 4];
Magic Number,Shoko.Server.Extensions,ModelProviders,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Extensions\ModelProviders.cs,ToMedia,The following statement contains a magic number: Array.Copy(m.MediaInfo' 4' data' 0' data.Length);
Magic Number,Shoko.Server.Extensions,ModelProviders,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Extensions\ModelProviders.cs,ToMediaRequest,The following statement contains a magic number: List<Stream> streams = p.Streams                              .Where(a => a.StreamType == 3 && !string.IsNullOrEmpty(a.File))                              .ToList();
Magic Number,Shoko.Server.Extensions,ModelProviders,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Extensions\ModelProviders.cs,ToMediaRequest,The following statement contains a magic number: Azure_Media_Request r = new Azure_Media_Request              {                  ED2K = v.ED2KHash'                  Version = SVR_VideoLocal.MEDIA_VERSION'                  Username = Constants.AnonWebCacheUsername'                  AuthGUID = string.Empty'                  MediaInfo = new byte[data.Length + 4]              };
Magic Number,Shoko.Server.Extensions,ModelProviders,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Extensions\ModelProviders.cs,ToMediaRequest,The following statement contains a magic number: r.MediaInfo[0] = (byte)(outsize >> 24);
Magic Number,Shoko.Server.Extensions,ModelProviders,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Extensions\ModelProviders.cs,ToMediaRequest,The following statement contains a magic number: r.MediaInfo[1] = (byte)((outsize >> 16) & 0xFF);
Magic Number,Shoko.Server.Extensions,ModelProviders,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Extensions\ModelProviders.cs,ToMediaRequest,The following statement contains a magic number: r.MediaInfo[2] = (byte)((outsize >> 8) & 0xFF);
Magic Number,Shoko.Server.Extensions,ModelProviders,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Extensions\ModelProviders.cs,ToMediaRequest,The following statement contains a magic number: r.MediaInfo[2] = (byte)((outsize >> 8) & 0xFF);
Magic Number,Shoko.Server.Extensions,ModelProviders,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Extensions\ModelProviders.cs,ToMediaRequest,The following statement contains a magic number: r.MediaInfo[3] = (byte)(outsize & 0xFF);
Magic Number,Shoko.Server.Extensions,ModelProviders,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Extensions\ModelProviders.cs,ToMediaRequest,The following statement contains a magic number: Array.Copy(data' 0' r.MediaInfo' 4' data.Length);
Magic Number,Shoko.Server.Extensions,ModelProviders,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Extensions\ModelProviders.cs,ToMediaRequest,The following statement contains a magic number: Azure_Media_Request r = new Azure_Media_Request              {                  ED2K = ed2k'                  MediaInfo = new byte[data.Length + 4]'                  Version = SVR_VideoLocal.MEDIA_VERSION'                  Username = Constants.AnonWebCacheUsername'                  AuthGUID = string.Empty              };
Magic Number,Shoko.Server.Extensions,ModelProviders,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Extensions\ModelProviders.cs,ToMediaRequest,The following statement contains a magic number: r.MediaInfo[0] = (byte)(outsize >> 24);
Magic Number,Shoko.Server.Extensions,ModelProviders,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Extensions\ModelProviders.cs,ToMediaRequest,The following statement contains a magic number: r.MediaInfo[1] = (byte)((outsize >> 16) & 0xFF);
Magic Number,Shoko.Server.Extensions,ModelProviders,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Extensions\ModelProviders.cs,ToMediaRequest,The following statement contains a magic number: r.MediaInfo[2] = (byte)((outsize >> 8) & 0xFF);
Magic Number,Shoko.Server.Extensions,ModelProviders,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Extensions\ModelProviders.cs,ToMediaRequest,The following statement contains a magic number: r.MediaInfo[2] = (byte)((outsize >> 8) & 0xFF);
Magic Number,Shoko.Server.Extensions,ModelProviders,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Extensions\ModelProviders.cs,ToMediaRequest,The following statement contains a magic number: r.MediaInfo[3] = (byte)(outsize & 0xFF);
Magic Number,Shoko.Server.Extensions,ModelProviders,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Extensions\ModelProviders.cs,ToMediaRequest,The following statement contains a magic number: Array.Copy(data' 0' r.MediaInfo' 4' data.Length);
Magic Number,Shoko.Server.Extensions,ModelProviders,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Extensions\ModelProviders.cs,Populate,The following statement contains a magic number: m.Rating = (int) Math.Round(result.Rating * 10D);
Magic Number,Shoko.Server.Extensions,ModelProviders,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Extensions\ModelProviders.cs,PopulateFromSeriesInfo,The following statement contains a magic number: series.Rating = (int) Math.Round(apiSeries.SiteRating.Value * 10);
Magic Number,Shoko.Server.Extensions,ModelProviders,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Extensions\ModelProviders.cs,Populate,The following statement contains a magic number: tag.Approval = 100;
Magic Number,Shoko.Server.Extensions,ModelProviders,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Extensions\ModelProviders.cs,PopulateManually,The following statement contains a magic number: cross.Percentage = 100;
Magic Number,Shoko.Server.Databases,BaseDatabase<T>,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Databases\BaseDatabase.cs,ExecuteDatabaseFixes,The following statement contains a magic number: message = message.Substring(0' 42) + "...";
Magic Number,Shoko.Server.Databases,BaseDatabase<T>,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Databases\BaseDatabase.cs,ExecuteDatabaseFixes,The following statement contains a magic number: message.Length > 42
Magic Number,Shoko.Server.Databases,BaseDatabase<T>,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Databases\BaseDatabase.cs,ExecuteCommand,The following statement contains a magic number: message = message.Substring(0' 42) + "...";
Magic Number,Shoko.Server.Databases,BaseDatabase<T>,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Databases\BaseDatabase.cs,ExecuteCommand,The following statement contains a magic number: message.Length > 42
Magic Number,Shoko.Server.Databases,BaseDatabase<T>,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Databases\BaseDatabase.cs,CreateInitialGroupFilters,The following statement contains a magic number: RepoFactory.GroupFilter.GetTopLevel().Count() > 6
Magic Number,Shoko.Server.Databases,BaseDatabase<T>,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Databases\BaseDatabase.cs,CreateInitialRenameScript,The following statement contains a magic number: initialScript.Script =                  "// Sample Output: [Coalgirls]_Highschool_of_the_Dead_-_01_(1920x1080_Blu-ray_H264)_[90CC6DC1].mkv" +                  Environment.NewLine +                  "// Sub group name" + Environment.NewLine +                  "DO ADD '[%grp] '" + Environment.NewLine +                  "// Anime Name' use english name if it exists' otherwise use the Romaji name" + Environment.NewLine +                  "IF I(eng) DO ADD '%eng '" + Environment.NewLine +                  "IF I(ann);I(!eng) DO ADD '%ann '" + Environment.NewLine +                  "// Episode Number' don't use episode number for movies" + Environment.NewLine +                  "IF T(!Movie) DO ADD '- %enr'" + Environment.NewLine +                  "// If the file version is v2 or higher add it here" + Environment.NewLine +                  "IF F(!1) DO ADD 'v%ver'" + Environment.NewLine +                  "// Video Resolution" + Environment.NewLine +                  "DO ADD ' (%res'" + Environment.NewLine +                  "// Video Source (only if blu-ray or DVD)" + Environment.NewLine +                  "IF R(DVD)'R(Blu-ray) DO ADD ' %src'" + Environment.NewLine +                  "// Video Codec" + Environment.NewLine +                  "DO ADD ' %vid'" + Environment.NewLine +                  "// Video Bit Depth (only if 10bit)" + Environment.NewLine +                  "IF Z(10) DO ADD ' %bitbit'" + Environment.NewLine +                  "DO ADD ') '" + Environment.NewLine +                  "DO ADD '[%CRC]'" + Environment.NewLine +                  string.Empty + Environment.NewLine +                  "// Replacement rules (cleanup)" + Environment.NewLine +                  "DO REPLACE ' ' '_' // replace spaces with underscores" + Environment.NewLine +                  "DO REPLACE 'H264/AVC' 'H264'" + Environment.NewLine +                  "DO REPLACE '0x0' ''" + Environment.NewLine +                  "DO REPLACE '__' '_'" + Environment.NewLine +                  "DO REPLACE '__' '_'" + Environment.NewLine +                  string.Empty + Environment.NewLine +                  "// Replace all illegal file name characters" + Environment.NewLine +                  "DO REPLACE '<' '('" + Environment.NewLine +                  "DO REPLACE '>' ')'" + Environment.NewLine +                  "DO REPLACE ':' '-'" + Environment.NewLine +                  "DO REPLACE '" + ((Char) 34).ToString() + "' '`'" + Environment.NewLine +                  "DO REPLACE '/' '_'" + Environment.NewLine +                  "DO REPLACE '/' '_'" + Environment.NewLine +                  "DO REPLACE '\\' '_'" + Environment.NewLine +                  "DO REPLACE '|' '_'" + Environment.NewLine +                  "DO REPLACE '?' '_'" + Environment.NewLine +                  "DO REPLACE '*' '_'" + Environment.NewLine;
Magic Number,Shoko.Server.Databases,DatabaseFactory,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Databases\DatabaseFactory.cs,InitDB,The following statement contains a magic number: Thread.Sleep(3000);
Magic Number,Shoko.Server.Databases,DatabaseFixes,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Databases\DatabaseFixes.cs,MigrateTvDBLinks_v2_to_V3,The following statement contains a magic number: var specials = session                      .CreateSQLQuery(                          @"SELECT DISTINCT AnimeID' AniDBStartEpisodeType' AniDBStartEpisodeNumber' TvDBID' TvDBSeasonNumber' TvDBStartEpisodeNumber FROM CrossRef_AniDB_TvDBV2 WHERE TvDBSeasonNumber = 0")                      .AddScalar("AnimeID"' NHibernateUtil.Int32)                      .AddScalar("AniDBStartEpisodeType"' NHibernateUtil.Int32)                      .AddScalar("AniDBStartEpisodeNumber"' NHibernateUtil.Int32)                      .AddScalar("TvDBID"' NHibernateUtil.Int32)                      .AddScalar("TvDBSeasonNumber"' NHibernateUtil.Int32)                      .AddScalar("TvDBStartEpisodeNumber"' NHibernateUtil.Int32)                      .List<object[]>().Select(a => new CrossRef_AniDB_TvDBV2                      {                          AnimeID = (int) a[0]'                          AniDBStartEpisodeType = (int) a[1]'                          AniDBStartEpisodeNumber = (int) a[2]'                          TvDBID = (int) a[3]'                          TvDBSeasonNumber = (int) a[4]'                          TvDBStartEpisodeNumber = (int) a[5]                      }).ToLookup(a => a.AnimeID);
Magic Number,Shoko.Server.Databases,DatabaseFixes,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Databases\DatabaseFixes.cs,MigrateTvDBLinks_v2_to_V3,The following statement contains a magic number: var specials = session                      .CreateSQLQuery(                          @"SELECT DISTINCT AnimeID' AniDBStartEpisodeType' AniDBStartEpisodeNumber' TvDBID' TvDBSeasonNumber' TvDBStartEpisodeNumber FROM CrossRef_AniDB_TvDBV2 WHERE TvDBSeasonNumber = 0")                      .AddScalar("AnimeID"' NHibernateUtil.Int32)                      .AddScalar("AniDBStartEpisodeType"' NHibernateUtil.Int32)                      .AddScalar("AniDBStartEpisodeNumber"' NHibernateUtil.Int32)                      .AddScalar("TvDBID"' NHibernateUtil.Int32)                      .AddScalar("TvDBSeasonNumber"' NHibernateUtil.Int32)                      .AddScalar("TvDBStartEpisodeNumber"' NHibernateUtil.Int32)                      .List<object[]>().Select(a => new CrossRef_AniDB_TvDBV2                      {                          AnimeID = (int) a[0]'                          AniDBStartEpisodeType = (int) a[1]'                          AniDBStartEpisodeNumber = (int) a[2]'                          TvDBID = (int) a[3]'                          TvDBSeasonNumber = (int) a[4]'                          TvDBStartEpisodeNumber = (int) a[5]                      }).ToLookup(a => a.AnimeID);
Magic Number,Shoko.Server.Databases,DatabaseFixes,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Databases\DatabaseFixes.cs,MigrateTvDBLinks_v2_to_V3,The following statement contains a magic number: var specials = session                      .CreateSQLQuery(                          @"SELECT DISTINCT AnimeID' AniDBStartEpisodeType' AniDBStartEpisodeNumber' TvDBID' TvDBSeasonNumber' TvDBStartEpisodeNumber FROM CrossRef_AniDB_TvDBV2 WHERE TvDBSeasonNumber = 0")                      .AddScalar("AnimeID"' NHibernateUtil.Int32)                      .AddScalar("AniDBStartEpisodeType"' NHibernateUtil.Int32)                      .AddScalar("AniDBStartEpisodeNumber"' NHibernateUtil.Int32)                      .AddScalar("TvDBID"' NHibernateUtil.Int32)                      .AddScalar("TvDBSeasonNumber"' NHibernateUtil.Int32)                      .AddScalar("TvDBStartEpisodeNumber"' NHibernateUtil.Int32)                      .List<object[]>().Select(a => new CrossRef_AniDB_TvDBV2                      {                          AnimeID = (int) a[0]'                          AniDBStartEpisodeType = (int) a[1]'                          AniDBStartEpisodeNumber = (int) a[2]'                          TvDBID = (int) a[3]'                          TvDBSeasonNumber = (int) a[4]'                          TvDBStartEpisodeNumber = (int) a[5]                      }).ToLookup(a => a.AnimeID);
Magic Number,Shoko.Server.Databases,DatabaseFixes,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Databases\DatabaseFixes.cs,MigrateTvDBLinks_v2_to_V3,The following statement contains a magic number: var specials = session                      .CreateSQLQuery(                          @"SELECT DISTINCT AnimeID' AniDBStartEpisodeType' AniDBStartEpisodeNumber' TvDBID' TvDBSeasonNumber' TvDBStartEpisodeNumber FROM CrossRef_AniDB_TvDBV2 WHERE TvDBSeasonNumber = 0")                      .AddScalar("AnimeID"' NHibernateUtil.Int32)                      .AddScalar("AniDBStartEpisodeType"' NHibernateUtil.Int32)                      .AddScalar("AniDBStartEpisodeNumber"' NHibernateUtil.Int32)                      .AddScalar("TvDBID"' NHibernateUtil.Int32)                      .AddScalar("TvDBSeasonNumber"' NHibernateUtil.Int32)                      .AddScalar("TvDBStartEpisodeNumber"' NHibernateUtil.Int32)                      .List<object[]>().Select(a => new CrossRef_AniDB_TvDBV2                      {                          AnimeID = (int) a[0]'                          AniDBStartEpisodeType = (int) a[1]'                          AniDBStartEpisodeNumber = (int) a[2]'                          TvDBID = (int) a[3]'                          TvDBSeasonNumber = (int) a[4]'                          TvDBStartEpisodeNumber = (int) a[5]                      }).ToLookup(a => a.AnimeID);
Magic Number,Shoko.Server.Databases,DatabaseFixes,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Databases\DatabaseFixes.cs,MigrateTvDBLinks_v2_to_V3,The following statement contains a magic number: var ovas = session                      .CreateSQLQuery(                          @"SELECT DISTINCT AniDB_Anime.AnimeID' AniDBStartEpisodeType' AniDBStartEpisodeNumber' TvDBID' TvDBSeasonNumber' TvDBStartEpisodeNumber FROM CrossRef_AniDB_TvDBV2 INNER JOIN AniDB_Anime on AniDB_Anime.AnimeID = CrossRef_AniDB_TvDBV2.AnimeID WHERE AnimeType = 1 OR AnimeType = 3")                      .AddScalar("AnimeID"' NHibernateUtil.Int32)                      .AddScalar("AniDBStartEpisodeType"' NHibernateUtil.Int32)                      .AddScalar("AniDBStartEpisodeNumber"' NHibernateUtil.Int32)                      .AddScalar("TvDBID"' NHibernateUtil.Int32)                      .AddScalar("TvDBSeasonNumber"' NHibernateUtil.Int32)                      .AddScalar("TvDBStartEpisodeNumber"' NHibernateUtil.Int32)                      .List<object[]>().Select(a => new CrossRef_AniDB_TvDBV2                      {                          AnimeID = (int) a[0]'                          AniDBStartEpisodeType = (int) a[1]'                          AniDBStartEpisodeNumber = (int) a[2]'                          TvDBID = (int) a[3]'                          TvDBSeasonNumber = (int) a[4]'                          TvDBStartEpisodeNumber = (int) a[5]                      }).ToLookup(a => a.AnimeID);
Magic Number,Shoko.Server.Databases,DatabaseFixes,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Databases\DatabaseFixes.cs,MigrateTvDBLinks_v2_to_V3,The following statement contains a magic number: var ovas = session                      .CreateSQLQuery(                          @"SELECT DISTINCT AniDB_Anime.AnimeID' AniDBStartEpisodeType' AniDBStartEpisodeNumber' TvDBID' TvDBSeasonNumber' TvDBStartEpisodeNumber FROM CrossRef_AniDB_TvDBV2 INNER JOIN AniDB_Anime on AniDB_Anime.AnimeID = CrossRef_AniDB_TvDBV2.AnimeID WHERE AnimeType = 1 OR AnimeType = 3")                      .AddScalar("AnimeID"' NHibernateUtil.Int32)                      .AddScalar("AniDBStartEpisodeType"' NHibernateUtil.Int32)                      .AddScalar("AniDBStartEpisodeNumber"' NHibernateUtil.Int32)                      .AddScalar("TvDBID"' NHibernateUtil.Int32)                      .AddScalar("TvDBSeasonNumber"' NHibernateUtil.Int32)                      .AddScalar("TvDBStartEpisodeNumber"' NHibernateUtil.Int32)                      .List<object[]>().Select(a => new CrossRef_AniDB_TvDBV2                      {                          AnimeID = (int) a[0]'                          AniDBStartEpisodeType = (int) a[1]'                          AniDBStartEpisodeNumber = (int) a[2]'                          TvDBID = (int) a[3]'                          TvDBSeasonNumber = (int) a[4]'                          TvDBStartEpisodeNumber = (int) a[5]                      }).ToLookup(a => a.AnimeID);
Magic Number,Shoko.Server.Databases,DatabaseFixes,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Databases\DatabaseFixes.cs,MigrateTvDBLinks_v2_to_V3,The following statement contains a magic number: var ovas = session                      .CreateSQLQuery(                          @"SELECT DISTINCT AniDB_Anime.AnimeID' AniDBStartEpisodeType' AniDBStartEpisodeNumber' TvDBID' TvDBSeasonNumber' TvDBStartEpisodeNumber FROM CrossRef_AniDB_TvDBV2 INNER JOIN AniDB_Anime on AniDB_Anime.AnimeID = CrossRef_AniDB_TvDBV2.AnimeID WHERE AnimeType = 1 OR AnimeType = 3")                      .AddScalar("AnimeID"' NHibernateUtil.Int32)                      .AddScalar("AniDBStartEpisodeType"' NHibernateUtil.Int32)                      .AddScalar("AniDBStartEpisodeNumber"' NHibernateUtil.Int32)                      .AddScalar("TvDBID"' NHibernateUtil.Int32)                      .AddScalar("TvDBSeasonNumber"' NHibernateUtil.Int32)                      .AddScalar("TvDBStartEpisodeNumber"' NHibernateUtil.Int32)                      .List<object[]>().Select(a => new CrossRef_AniDB_TvDBV2                      {                          AnimeID = (int) a[0]'                          AniDBStartEpisodeType = (int) a[1]'                          AniDBStartEpisodeNumber = (int) a[2]'                          TvDBID = (int) a[3]'                          TvDBSeasonNumber = (int) a[4]'                          TvDBStartEpisodeNumber = (int) a[5]                      }).ToLookup(a => a.AnimeID);
Magic Number,Shoko.Server.Databases,DatabaseFixes,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Databases\DatabaseFixes.cs,MigrateTvDBLinks_v2_to_V3,The following statement contains a magic number: var ovas = session                      .CreateSQLQuery(                          @"SELECT DISTINCT AniDB_Anime.AnimeID' AniDBStartEpisodeType' AniDBStartEpisodeNumber' TvDBID' TvDBSeasonNumber' TvDBStartEpisodeNumber FROM CrossRef_AniDB_TvDBV2 INNER JOIN AniDB_Anime on AniDB_Anime.AnimeID = CrossRef_AniDB_TvDBV2.AnimeID WHERE AnimeType = 1 OR AnimeType = 3")                      .AddScalar("AnimeID"' NHibernateUtil.Int32)                      .AddScalar("AniDBStartEpisodeType"' NHibernateUtil.Int32)                      .AddScalar("AniDBStartEpisodeNumber"' NHibernateUtil.Int32)                      .AddScalar("TvDBID"' NHibernateUtil.Int32)                      .AddScalar("TvDBSeasonNumber"' NHibernateUtil.Int32)                      .AddScalar("TvDBStartEpisodeNumber"' NHibernateUtil.Int32)                      .List<object[]>().Select(a => new CrossRef_AniDB_TvDBV2                      {                          AnimeID = (int) a[0]'                          AniDBStartEpisodeType = (int) a[1]'                          AniDBStartEpisodeNumber = (int) a[2]'                          TvDBID = (int) a[3]'                          TvDBSeasonNumber = (int) a[4]'                          TvDBStartEpisodeNumber = (int) a[5]                      }).ToLookup(a => a.AnimeID);
Magic Number,Shoko.Server.Databases,DatabaseFixes,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Databases\DatabaseFixes.cs,MigrateTvDBLinks_v2_to_V3,The following statement contains a magic number: var links = session                      .CreateSQLQuery(                          @"SELECT AnimeID' TvDBID' CrossRefSource FROM CrossRef_AniDB_TvDBV2")                      .AddScalar("AnimeID"' NHibernateUtil.Int32)                      .AddScalar("TvDBID"' NHibernateUtil.Int32)                      .AddScalar("CrossRefSource"' NHibernateUtil.Int32)                      .List<object[]>().Select(a => new CrossRef_AniDB_TvDB                      {                          AniDBID = (int) a[0]'                          TvDBID = (int) a[1]'                          CrossRefSource = (CrossRefSource) a[2]                      }).DistinctBy(a => new[] {a.AniDBID' a.TvDBID}).ToList();
Magic Number,Shoko.Server.Databases,DatabaseFixes,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Databases\DatabaseFixes.cs,MigrateTvDBLinks_v2_to_V3,The following statement contains a magic number: list.AsParallel().ForAll(animeseries =>                  {                      Interlocked.Increment(ref count);                      if (count % 50 == 0)                      {                          ServerState.Instance.CurrentSetupStatus = string.Format(                              Commons.Properties.Resources.Database_Validating' "Generating TvDB Episode Matchings"'                              $" {count}/{list.Count}");                      }                        TvDBLinkingHelper.GenerateTvDBEpisodeMatches(animeseries.AniDB_ID' true);                  });
Magic Number,Shoko.Server.Databases,DatabaseFixes,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Databases\DatabaseFixes.cs,RegenTvDBMatches,The following statement contains a magic number: list.AsParallel().ForAll(animeseries =>              {                  Interlocked.Increment(ref count);                  if (count % 50 == 0)                  {                      ServerState.Instance.CurrentSetupStatus = string.Format(                          Commons.Properties.Resources.Database_Validating' "Generating TvDB Episode Matchings"'                          $" {count}/{list.Count}");                  }                    TvDBLinkingHelper.GenerateTvDBEpisodeMatches(animeseries.AniDB_ID' true);              });
Magic Number,Shoko.Server.Databases,DatabaseFixes,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Databases\DatabaseFixes.cs,PopulateMyListIDs,The following statement contains a magic number: count % 10 == 0
Magic Number,Shoko.Server.Databases,DatabaseFixes,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Databases\DatabaseFixes.cs,PopulateAniDBEpisodeDescriptions,The following statement contains a magic number: i % 10 == 0
Magic Number,Shoko.Server.Databases,DatabaseFixes,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Databases\DatabaseFixes.cs,PopulateResourceLinks,The following statement contains a magic number: i % 10 == 0
Magic Number,Shoko.Server.Databases,DatabaseFixes,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Databases\DatabaseFixes.cs,PopulateResourceLinks,The following statement contains a magic number: var batches = animes.Batch(50).ToList();
Magic Number,Shoko.Server.Databases,MySQL,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Databases\MySQL.cs,MySQLFixUTF8,The following statement contains a magic number: switch (row[3].ToString().ToLowerInvariant())                          {                              case "text":                              case "mediumtext":                              case "tinytext":                              case "longtext":                                  alter = $"ALTER TABLE `{row[1]}` MODIFY `{row[2]}` {row[3]} CHARACTER SET 'utf8mb4' COLLATE 'utf8mb4_unicode_ci'";                                  break;                                default:                                  alter = $"ALTER TABLE `{row[1]}` MODIFY `{row[2]}` {row[3]}({row[4]}) CHARACTER SET 'utf8mb4' COLLATE 'utf8mb4_unicode_ci'";                                  break;                          }
Magic Number,Shoko.Server.Databases,MySQL,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Databases\MySQL.cs,MySQLFixUTF8,The following statement contains a magic number: switch (row[3].ToString().ToLowerInvariant())                          {                              case "text":                              case "mediumtext":                              case "tinytext":                              case "longtext":                                  alter = $"ALTER TABLE `{row[1]}` MODIFY `{row[2]}` {row[3]} CHARACTER SET 'utf8mb4' COLLATE 'utf8mb4_unicode_ci'";                                  break;                                default:                                  alter = $"ALTER TABLE `{row[1]}` MODIFY `{row[2]}` {row[3]}({row[4]}) CHARACTER SET 'utf8mb4' COLLATE 'utf8mb4_unicode_ci'";                                  break;                          }
Magic Number,Shoko.Server.Databases,MySQL,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Databases\MySQL.cs,MySQLFixUTF8,The following statement contains a magic number: switch (row[3].ToString().ToLowerInvariant())                          {                              case "text":                              case "mediumtext":                              case "tinytext":                              case "longtext":                                  alter = $"ALTER TABLE `{row[1]}` MODIFY `{row[2]}` {row[3]} CHARACTER SET 'utf8mb4' COLLATE 'utf8mb4_unicode_ci'";                                  break;                                default:                                  alter = $"ALTER TABLE `{row[1]}` MODIFY `{row[2]}` {row[3]}({row[4]}) CHARACTER SET 'utf8mb4' COLLATE 'utf8mb4_unicode_ci'";                                  break;                          }
Magic Number,Shoko.Server.Databases,MySQL,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Databases\MySQL.cs,MySQLFixUTF8,The following statement contains a magic number: switch (row[3].ToString().ToLowerInvariant())                          {                              case "text":                              case "mediumtext":                              case "tinytext":                              case "longtext":                                  alter = $"ALTER TABLE `{row[1]}` MODIFY `{row[2]}` {row[3]} CHARACTER SET 'utf8mb4' COLLATE 'utf8mb4_unicode_ci'";                                  break;                                default:                                  alter = $"ALTER TABLE `{row[1]}` MODIFY `{row[2]}` {row[3]}({row[4]}) CHARACTER SET 'utf8mb4' COLLATE 'utf8mb4_unicode_ci'";                                  break;                          }
Magic Number,Shoko.Server.Databases,MySQL,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Databases\MySQL.cs,MySQLFixUTF8,The following statement contains a magic number: switch (row[3].ToString().ToLowerInvariant())                          {                              case "text":                              case "mediumtext":                              case "tinytext":                              case "longtext":                                  alter = $"ALTER TABLE `{row[1]}` MODIFY `{row[2]}` {row[3]} CHARACTER SET 'utf8mb4' COLLATE 'utf8mb4_unicode_ci'";                                  break;                                default:                                  alter = $"ALTER TABLE `{row[1]}` MODIFY `{row[2]}` {row[3]}({row[4]}) CHARACTER SET 'utf8mb4' COLLATE 'utf8mb4_unicode_ci'";                                  break;                          }
Magic Number,Shoko.Server.Databases,MySQL,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Databases\MySQL.cs,MySQLFixUTF8,The following statement contains a magic number: switch (row[3].ToString().ToLowerInvariant())                          {                              case "text":                              case "mediumtext":                              case "tinytext":                              case "longtext":                                  alter = $"ALTER TABLE `{row[1]}` MODIFY `{row[2]}` {row[3]} CHARACTER SET 'utf8mb4' COLLATE 'utf8mb4_unicode_ci'";                                  break;                                default:                                  alter = $"ALTER TABLE `{row[1]}` MODIFY `{row[2]}` {row[3]}({row[4]}) CHARACTER SET 'utf8mb4' COLLATE 'utf8mb4_unicode_ci'";                                  break;                          }
Magic Number,Shoko.Server.Databases,SQLite,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Databases\SQLite.cs,DropColumns,The following statement contains a magic number: int position = indexcommand.IndexOf("index"' StringComparison.InvariantCultureIgnoreCase) + 6;
Magic Number,Shoko.Server.FileHelper,NativeHasher,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\FileHelper\NativeHasher.cs,GetHash,The following statement contains a magic number: byte[] buffer = new byte[8192];
Magic Number,Shoko.Server.FileHelper,NativeHasher,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\FileHelper\NativeHasher.cs,GetHash,The following statement contains a magic number: IntPtr output = Marshal.AllocHGlobal(200);
Magic Number,Shoko.Server.FileHelper,Crc32,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\FileHelper\Crc32.cs,HashCore,The following statement contains a magic number: _crcValue = CrcTable[(_crcValue ^ buffer[start++]) & 0xFF] ^ (_crcValue >> 8);
Magic Number,Shoko.Server.FileHelper,Crc32,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\FileHelper\Crc32.cs,HashFinal,The following statement contains a magic number: HashValue = new[]              {                  (byte) ((_crcValue >> 24) & 0xff)'                  (byte) ((_crcValue >> 16) & 0xff)'                  (byte) ((_crcValue >> 8) & 0xff)'                  (byte) (_crcValue & 0xff)              };
Magic Number,Shoko.Server.FileHelper,Crc32,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\FileHelper\Crc32.cs,HashFinal,The following statement contains a magic number: HashValue = new[]              {                  (byte) ((_crcValue >> 24) & 0xff)'                  (byte) ((_crcValue >> 16) & 0xff)'                  (byte) ((_crcValue >> 8) & 0xff)'                  (byte) (_crcValue & 0xff)              };
Magic Number,Shoko.Server.FileHelper,Crc32,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\FileHelper\Crc32.cs,HashFinal,The following statement contains a magic number: HashValue = new[]              {                  (byte) ((_crcValue >> 24) & 0xff)'                  (byte) ((_crcValue >> 16) & 0xff)'                  (byte) ((_crcValue >> 8) & 0xff)'                  (byte) (_crcValue & 0xff)              };
Magic Number,Shoko.Server.FileHelper,Hasher,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\FileHelper\Hasher.cs,HashToString,The following statement contains a magic number: StringBuilder hex = new StringBuilder(length * 2);
Magic Number,Shoko.Server.FileHelper,Hasher,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\FileHelper\Hasher.cs,CalculateHashes,The following statement contains a magic number: byte[] hash = new byte[56];
Magic Number,Shoko.Server.FileHelper,Hasher,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\FileHelper\Hasher.cs,CalculateHashes_here,The following statement contains a magic number: int lChunkSize = 9728000;
Magic Number,Shoko.Server.FileHelper,Hasher,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\FileHelper\Hasher.cs,CalculateHashes_here,The following statement contains a magic number: byte[] baED2KHash = new byte[16 * nBlocks];
Magic Number,Shoko.Server.FileHelper,Hasher,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\FileHelper\Hasher.cs,CalculateHashes_here,The following statement contains a magic number: int j = (int) ((iChunkCount - 1) * 16);
Magic Number,Shoko.Server.FileHelper,Hasher,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\FileHelper\Hasher.cs,CalculateHashes_here,The following statement contains a magic number: i < 16
Magic Number,Shoko.Server.FileHelper,Hasher,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\FileHelper\Hasher.cs,CalculateHashes_here,The following statement contains a magic number: int percentComplete = (int)(iChunkCount / (float)nBlocks * 100);
Magic Number,Shoko.Server.FileHelper,Hasher,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\FileHelper\Hasher.cs,CalculateHashes_here,The following statement contains a magic number: onHashProgress?.Invoke(strPath' 100);
Magic Number,Shoko.Server.FileHelper,MD4,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\FileHelper\MD4Managed.cs,MD4,The following statement contains a magic number: HashSizeValue = 128;
Magic Number,Shoko.Server.FileHelper,MD4Managed,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\FileHelper\MD4Managed.cs,MD4Managed,The following statement contains a magic number: state = new uint[4];
Magic Number,Shoko.Server.FileHelper,MD4Managed,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\FileHelper\MD4Managed.cs,MD4Managed,The following statement contains a magic number: count = new uint[2];
Magic Number,Shoko.Server.FileHelper,MD4Managed,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\FileHelper\MD4Managed.cs,MD4Managed,The following statement contains a magic number: buffer = new byte[64];
Magic Number,Shoko.Server.FileHelper,MD4Managed,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\FileHelper\MD4Managed.cs,MD4Managed,The following statement contains a magic number: digest = new byte[16];
Magic Number,Shoko.Server.FileHelper,MD4Managed,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\FileHelper\MD4Managed.cs,MD4Managed,The following statement contains a magic number: x = new uint[16];
Magic Number,Shoko.Server.FileHelper,MD4Managed,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\FileHelper\MD4Managed.cs,Initialize,The following statement contains a magic number: state[2] = 0x98badcfe;
Magic Number,Shoko.Server.FileHelper,MD4Managed,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\FileHelper\MD4Managed.cs,Initialize,The following statement contains a magic number: state[3] = 0x10325476;
Magic Number,Shoko.Server.FileHelper,MD4Managed,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\FileHelper\MD4Managed.cs,Initialize,The following statement contains a magic number: Array.Clear(buffer' 0' 64);
Magic Number,Shoko.Server.FileHelper,MD4Managed,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\FileHelper\MD4Managed.cs,Initialize,The following statement contains a magic number: Array.Clear(x' 0' 16);
Magic Number,Shoko.Server.FileHelper,MD4Managed,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\FileHelper\MD4Managed.cs,HashCore,The following statement contains a magic number: int index = (int) ((count[0] >> 3) & 0x3F);
Magic Number,Shoko.Server.FileHelper,MD4Managed,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\FileHelper\MD4Managed.cs,HashCore,The following statement contains a magic number: count[0] += (uint) (cbSize << 3);
Magic Number,Shoko.Server.FileHelper,MD4Managed,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\FileHelper\MD4Managed.cs,HashCore,The following statement contains a magic number: count[0] < cbSize << 3
Magic Number,Shoko.Server.FileHelper,MD4Managed,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\FileHelper\MD4Managed.cs,HashCore,The following statement contains a magic number: count[1] += (uint) (cbSize >> 29);
Magic Number,Shoko.Server.FileHelper,MD4Managed,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\FileHelper\MD4Managed.cs,HashCore,The following statement contains a magic number: int partLen = 64 - index;
Magic Number,Shoko.Server.FileHelper,MD4Managed,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\FileHelper\MD4Managed.cs,HashCore,The following statement contains a magic number: i + 63 < cbSize
Magic Number,Shoko.Server.FileHelper,MD4Managed,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\FileHelper\MD4Managed.cs,HashFinal,The following statement contains a magic number: byte[] bits = new byte[8];
Magic Number,Shoko.Server.FileHelper,MD4Managed,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\FileHelper\MD4Managed.cs,HashFinal,The following statement contains a magic number: uint index = (count[0] >> 3) & 0x3f;
Magic Number,Shoko.Server.FileHelper,MD4Managed,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\FileHelper\MD4Managed.cs,HashFinal,The following statement contains a magic number: int padLen = (int) (index < 56 ? 56 - index : 120 - index);
Magic Number,Shoko.Server.FileHelper,MD4Managed,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\FileHelper\MD4Managed.cs,HashFinal,The following statement contains a magic number: int padLen = (int) (index < 56 ? 56 - index : 120 - index);
Magic Number,Shoko.Server.FileHelper,MD4Managed,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\FileHelper\MD4Managed.cs,HashFinal,The following statement contains a magic number: int padLen = (int) (index < 56 ? 56 - index : 120 - index);
Magic Number,Shoko.Server.FileHelper,MD4Managed,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\FileHelper\MD4Managed.cs,HashFinal,The following statement contains a magic number: HashCore(bits' 0' 8);
Magic Number,Shoko.Server.FileHelper,MD4Managed,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\FileHelper\MD4Managed.cs,ROL,The following statement contains a magic number: return (x << n) | (x >> (32 - n));
Magic Number,Shoko.Server.FileHelper,MD4Managed,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\FileHelper\MD4Managed.cs,Encode,The following statement contains a magic number: output[j + 1] = (byte) (input[i] >> 8);
Magic Number,Shoko.Server.FileHelper,MD4Managed,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\FileHelper\MD4Managed.cs,Encode,The following statement contains a magic number: output[j + 2] = (byte) (input[i] >> 16);
Magic Number,Shoko.Server.FileHelper,MD4Managed,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\FileHelper\MD4Managed.cs,Encode,The following statement contains a magic number: output[j + 2] = (byte) (input[i] >> 16);
Magic Number,Shoko.Server.FileHelper,MD4Managed,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\FileHelper\MD4Managed.cs,Encode,The following statement contains a magic number: output[j + 3] = (byte) (input[i] >> 24);
Magic Number,Shoko.Server.FileHelper,MD4Managed,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\FileHelper\MD4Managed.cs,Encode,The following statement contains a magic number: output[j + 3] = (byte) (input[i] >> 24);
Magic Number,Shoko.Server.FileHelper,MD4Managed,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\FileHelper\MD4Managed.cs,Decode,The following statement contains a magic number: output[i] = (uint) (input[j] | (input[j + 1] << 8) | (input[j + 2] << 16) | (input[j + 3] << 24));
Magic Number,Shoko.Server.FileHelper,MD4Managed,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\FileHelper\MD4Managed.cs,Decode,The following statement contains a magic number: output[i] = (uint) (input[j] | (input[j + 1] << 8) | (input[j + 2] << 16) | (input[j + 3] << 24));
Magic Number,Shoko.Server.FileHelper,MD4Managed,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\FileHelper\MD4Managed.cs,Decode,The following statement contains a magic number: output[i] = (uint) (input[j] | (input[j + 1] << 8) | (input[j + 2] << 16) | (input[j + 3] << 24));
Magic Number,Shoko.Server.FileHelper,MD4Managed,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\FileHelper\MD4Managed.cs,Decode,The following statement contains a magic number: output[i] = (uint) (input[j] | (input[j + 1] << 8) | (input[j + 2] << 16) | (input[j + 3] << 24));
Magic Number,Shoko.Server.FileHelper,MD4Managed,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\FileHelper\MD4Managed.cs,Decode,The following statement contains a magic number: output[i] = (uint) (input[j] | (input[j + 1] << 8) | (input[j + 2] << 16) | (input[j + 3] << 24));
Magic Number,Shoko.Server.FileHelper,MD4Managed,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\FileHelper\MD4Managed.cs,MD4Transform,The following statement contains a magic number: uint c = state[2];
Magic Number,Shoko.Server.FileHelper,MD4Managed,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\FileHelper\MD4Managed.cs,MD4Transform,The following statement contains a magic number: uint d = state[3];
Magic Number,Shoko.Server.FileHelper,MD4Managed,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\FileHelper\MD4Managed.cs,MD4Transform,The following statement contains a magic number: FF(ref c' d' a' b' x[2]' S13);
Magic Number,Shoko.Server.FileHelper,MD4Managed,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\FileHelper\MD4Managed.cs,MD4Transform,The following statement contains a magic number: FF(ref b' c' d' a' x[3]' S14);
Magic Number,Shoko.Server.FileHelper,MD4Managed,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\FileHelper\MD4Managed.cs,MD4Transform,The following statement contains a magic number: FF(ref a' b' c' d' x[4]' S11);
Magic Number,Shoko.Server.FileHelper,MD4Managed,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\FileHelper\MD4Managed.cs,MD4Transform,The following statement contains a magic number: FF(ref d' a' b' c' x[5]' S12);
Magic Number,Shoko.Server.FileHelper,MD4Managed,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\FileHelper\MD4Managed.cs,MD4Transform,The following statement contains a magic number: FF(ref c' d' a' b' x[6]' S13);
Magic Number,Shoko.Server.FileHelper,MD4Managed,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\FileHelper\MD4Managed.cs,MD4Transform,The following statement contains a magic number: FF(ref b' c' d' a' x[7]' S14);
Magic Number,Shoko.Server.FileHelper,MD4Managed,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\FileHelper\MD4Managed.cs,MD4Transform,The following statement contains a magic number: FF(ref a' b' c' d' x[8]' S11);
Magic Number,Shoko.Server.FileHelper,MD4Managed,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\FileHelper\MD4Managed.cs,MD4Transform,The following statement contains a magic number: FF(ref d' a' b' c' x[9]' S12);
Magic Number,Shoko.Server.FileHelper,MD4Managed,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\FileHelper\MD4Managed.cs,MD4Transform,The following statement contains a magic number: FF(ref c' d' a' b' x[10]' S13);
Magic Number,Shoko.Server.FileHelper,MD4Managed,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\FileHelper\MD4Managed.cs,MD4Transform,The following statement contains a magic number: FF(ref b' c' d' a' x[11]' S14);
Magic Number,Shoko.Server.FileHelper,MD4Managed,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\FileHelper\MD4Managed.cs,MD4Transform,The following statement contains a magic number: FF(ref a' b' c' d' x[12]' S11);
Magic Number,Shoko.Server.FileHelper,MD4Managed,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\FileHelper\MD4Managed.cs,MD4Transform,The following statement contains a magic number: FF(ref d' a' b' c' x[13]' S12);
Magic Number,Shoko.Server.FileHelper,MD4Managed,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\FileHelper\MD4Managed.cs,MD4Transform,The following statement contains a magic number: FF(ref c' d' a' b' x[14]' S13);
Magic Number,Shoko.Server.FileHelper,MD4Managed,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\FileHelper\MD4Managed.cs,MD4Transform,The following statement contains a magic number: FF(ref b' c' d' a' x[15]' S14);
Magic Number,Shoko.Server.FileHelper,MD4Managed,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\FileHelper\MD4Managed.cs,MD4Transform,The following statement contains a magic number: GG(ref d' a' b' c' x[4]' S22);
Magic Number,Shoko.Server.FileHelper,MD4Managed,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\FileHelper\MD4Managed.cs,MD4Transform,The following statement contains a magic number: GG(ref c' d' a' b' x[8]' S23);
Magic Number,Shoko.Server.FileHelper,MD4Managed,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\FileHelper\MD4Managed.cs,MD4Transform,The following statement contains a magic number: GG(ref b' c' d' a' x[12]' S24);
Magic Number,Shoko.Server.FileHelper,MD4Managed,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\FileHelper\MD4Managed.cs,MD4Transform,The following statement contains a magic number: GG(ref d' a' b' c' x[5]' S22);
Magic Number,Shoko.Server.FileHelper,MD4Managed,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\FileHelper\MD4Managed.cs,MD4Transform,The following statement contains a magic number: GG(ref c' d' a' b' x[9]' S23);
Magic Number,Shoko.Server.FileHelper,MD4Managed,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\FileHelper\MD4Managed.cs,MD4Transform,The following statement contains a magic number: GG(ref b' c' d' a' x[13]' S24);
Magic Number,Shoko.Server.FileHelper,MD4Managed,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\FileHelper\MD4Managed.cs,MD4Transform,The following statement contains a magic number: GG(ref a' b' c' d' x[2]' S21);
Magic Number,Shoko.Server.FileHelper,MD4Managed,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\FileHelper\MD4Managed.cs,MD4Transform,The following statement contains a magic number: GG(ref d' a' b' c' x[6]' S22);
Magic Number,Shoko.Server.FileHelper,MD4Managed,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\FileHelper\MD4Managed.cs,MD4Transform,The following statement contains a magic number: GG(ref c' d' a' b' x[10]' S23);
Magic Number,Shoko.Server.FileHelper,MD4Managed,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\FileHelper\MD4Managed.cs,MD4Transform,The following statement contains a magic number: GG(ref b' c' d' a' x[14]' S24);
Magic Number,Shoko.Server.FileHelper,MD4Managed,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\FileHelper\MD4Managed.cs,MD4Transform,The following statement contains a magic number: GG(ref a' b' c' d' x[3]' S21);
Magic Number,Shoko.Server.FileHelper,MD4Managed,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\FileHelper\MD4Managed.cs,MD4Transform,The following statement contains a magic number: GG(ref d' a' b' c' x[7]' S22);
Magic Number,Shoko.Server.FileHelper,MD4Managed,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\FileHelper\MD4Managed.cs,MD4Transform,The following statement contains a magic number: GG(ref c' d' a' b' x[11]' S23);
Magic Number,Shoko.Server.FileHelper,MD4Managed,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\FileHelper\MD4Managed.cs,MD4Transform,The following statement contains a magic number: GG(ref b' c' d' a' x[15]' S24);
Magic Number,Shoko.Server.FileHelper,MD4Managed,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\FileHelper\MD4Managed.cs,MD4Transform,The following statement contains a magic number: HH(ref d' a' b' c' x[8]' S32);
Magic Number,Shoko.Server.FileHelper,MD4Managed,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\FileHelper\MD4Managed.cs,MD4Transform,The following statement contains a magic number: HH(ref c' d' a' b' x[4]' S33);
Magic Number,Shoko.Server.FileHelper,MD4Managed,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\FileHelper\MD4Managed.cs,MD4Transform,The following statement contains a magic number: HH(ref b' c' d' a' x[12]' S34);
Magic Number,Shoko.Server.FileHelper,MD4Managed,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\FileHelper\MD4Managed.cs,MD4Transform,The following statement contains a magic number: HH(ref a' b' c' d' x[2]' S31);
Magic Number,Shoko.Server.FileHelper,MD4Managed,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\FileHelper\MD4Managed.cs,MD4Transform,The following statement contains a magic number: HH(ref d' a' b' c' x[10]' S32);
Magic Number,Shoko.Server.FileHelper,MD4Managed,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\FileHelper\MD4Managed.cs,MD4Transform,The following statement contains a magic number: HH(ref c' d' a' b' x[6]' S33);
Magic Number,Shoko.Server.FileHelper,MD4Managed,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\FileHelper\MD4Managed.cs,MD4Transform,The following statement contains a magic number: HH(ref b' c' d' a' x[14]' S34);
Magic Number,Shoko.Server.FileHelper,MD4Managed,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\FileHelper\MD4Managed.cs,MD4Transform,The following statement contains a magic number: HH(ref d' a' b' c' x[9]' S32);
Magic Number,Shoko.Server.FileHelper,MD4Managed,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\FileHelper\MD4Managed.cs,MD4Transform,The following statement contains a magic number: HH(ref c' d' a' b' x[5]' S33);
Magic Number,Shoko.Server.FileHelper,MD4Managed,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\FileHelper\MD4Managed.cs,MD4Transform,The following statement contains a magic number: HH(ref b' c' d' a' x[13]' S34);
Magic Number,Shoko.Server.FileHelper,MD4Managed,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\FileHelper\MD4Managed.cs,MD4Transform,The following statement contains a magic number: HH(ref a' b' c' d' x[3]' S31);
Magic Number,Shoko.Server.FileHelper,MD4Managed,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\FileHelper\MD4Managed.cs,MD4Transform,The following statement contains a magic number: HH(ref d' a' b' c' x[11]' S32);
Magic Number,Shoko.Server.FileHelper,MD4Managed,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\FileHelper\MD4Managed.cs,MD4Transform,The following statement contains a magic number: HH(ref c' d' a' b' x[7]' S33);
Magic Number,Shoko.Server.FileHelper,MD4Managed,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\FileHelper\MD4Managed.cs,MD4Transform,The following statement contains a magic number: HH(ref b' c' d' a' x[15]' S34);
Magic Number,Shoko.Server.FileHelper,MD4Managed,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\FileHelper\MD4Managed.cs,MD4Transform,The following statement contains a magic number: state[2] += c;
Magic Number,Shoko.Server.FileHelper,MD4Managed,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\FileHelper\MD4Managed.cs,MD4Transform,The following statement contains a magic number: state[3] += d;
Magic Number,Shoko.Server.Models,SVR_VideoLocal_Place,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Models\SVR_VideoLocal_Place.cs,FillVideoInfoFromMedia,The following statement contains a magic number: info.AudioCodec = !string.IsNullOrEmpty(m.AudioCodec)                  ? m.AudioCodec                  : m.Parts.SelectMany(a => a.Streams).FirstOrDefault(a => a.StreamType == 2)?.CodecID ?? string.Empty;
Magic Number,Shoko.Server.Models,SVR_VideoLocal_Place,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Models\SVR_VideoLocal_Place.cs,FillVideoInfoFromMedia,The following statement contains a magic number: List<Stream> aparts = m.Parts.SelectMany(a => a.Streams).Where(a => a.StreamType == 2).ToList();
Magic Number,Shoko.Server.Models,SVR_VideoLocal_Place,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Models\SVR_VideoLocal_Place.cs,RefreshMediaInfo,The following statement contains a magic number: ss.StreamType == 2 && !aud
Magic Number,Shoko.Server.Models,SVR_VideoLocal_Place,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Models\SVR_VideoLocal_Place.cs,RefreshMediaInfo,The following statement contains a magic number: ss.StreamType == 3 && !txt
Magic Number,Shoko.Server.Models,SVR_AniDB_Anime,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Models\SVR_AniDB_Anime.cs,GetDictTvDBSeasons,The following statement contains a magic number: int lastSeason = -999;
Magic Number,Shoko.Server.Models,SVR_AniDB_Anime,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Models\SVR_AniDB_Anime.cs,GetDictTvDBSeasonsSpecials,The following statement contains a magic number: int lastSeason = -999;
Magic Number,Shoko.Server.Models,SVR_AnimeGroup,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Models\SVR_AnimeGroup.cs,BatchGetVotes,The following statement contains a magic number: var groupVotes = new GroupVotes(                      allVoteCount == 0 ? (decimal?) null : allVoteTotal / allVoteCount / 100m'                      permVoteCount == 0 ? (decimal?) null : permVoteTotal / permVoteCount / 100m'                      tempVoteCount == 0 ? (decimal?) null : tempVoteTotal / tempVoteCount / 100m);
Magic Number,Shoko.Server.Models,SVR_AnimeGroup,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Models\SVR_AnimeGroup.cs,BatchGetVotes,The following statement contains a magic number: var groupVotes = new GroupVotes(                      allVoteCount == 0 ? (decimal?) null : allVoteTotal / allVoteCount / 100m'                      permVoteCount == 0 ? (decimal?) null : permVoteTotal / permVoteCount / 100m'                      tempVoteCount == 0 ? (decimal?) null : tempVoteTotal / tempVoteCount / 100m);
Magic Number,Shoko.Server.Models,SVR_AnimeGroup,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Models\SVR_AnimeGroup.cs,BatchGetVotes,The following statement contains a magic number: var groupVotes = new GroupVotes(                      allVoteCount == 0 ? (decimal?) null : allVoteTotal / allVoteCount / 100m'                      permVoteCount == 0 ? (decimal?) null : permVoteTotal / permVoteCount / 100m'                      tempVoteCount == 0 ? (decimal?) null : tempVoteTotal / tempVoteCount / 100m);
Magic Number,Shoko.Server.Models,SVR_AnimeGroup,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Models\SVR_AnimeGroup.cs,BatchUpdateContracts,The following statement contains a magic number: DateTime? groupEndDate = new DateTime(1980' 1' 1);
Magic Number,Shoko.Server.Models,EpisodeList,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Models\SVR_AnimeSeries.cs,Add,The following statement contains a magic number: int.TryParse(m.Groups[2].Value' out int part_count);
Magic Number,Shoko.Server.Models,SVR_GroupFilter,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Models\SVR_GroupFilter.cs,EvaluateConditions,The following statement contains a magic number: switch (gfc.GetConditionTypeEnum())              {                  case GroupFilterConditionType.Favourite:                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.Include && contractGroup.IsFave == 0)                          return false;                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.Exclude && contractGroup.IsFave == 1)                          return false;                      break;                    case GroupFilterConditionType.MissingEpisodes:                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.Include &&                          (contractGroup.MissingEpisodeCount > 0 || contractGroup.MissingEpisodeCountGroups > 0) ==                          false) return false;                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.Exclude &&                          (contractGroup.MissingEpisodeCount > 0 || contractGroup.MissingEpisodeCountGroups > 0)) return false;                      break;                    case GroupFilterConditionType.MissingEpisodesCollecting:                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.Include &&                          contractGroup.MissingEpisodeCountGroups > 0 == false) return false;                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.Exclude &&                          contractGroup.MissingEpisodeCountGroups > 0) return false;                      break;                  case GroupFilterConditionType.Tag:                      List<string> tags =                          gfc.ConditionParameter.Trim()                              .Split(new[] {'''}' StringSplitOptions.RemoveEmptyEntries)                              .Select(a => a.ToLowerInvariant().Trim())                              .Where(a => !string.IsNullOrWhiteSpace(a))                              .ToList();                      bool tagsFound =                          tags.Any(                              a => contractGroup.Stat_AllTags.Contains(a' StringComparer.InvariantCultureIgnoreCase));                      if ((gfc.GetConditionOperatorEnum() == GroupFilterOperator.In ||                           gfc.GetConditionOperatorEnum() == GroupFilterOperator.Include) && !tagsFound) return false;                      if ((gfc.GetConditionOperatorEnum() == GroupFilterOperator.NotIn ||                           gfc.GetConditionOperatorEnum() == GroupFilterOperator.Exclude) && tagsFound) return false;                      break;                  case GroupFilterConditionType.Year:                      HashSet<int> years = new HashSet<int>();                      string[] parameterStrings = gfc.ConditionParameter.Trim()                          .Split(new[] {'''}' StringSplitOptions.RemoveEmptyEntries);                      foreach (string yearString in parameterStrings)                      {                          if (int.TryParse(yearString.Trim()' out int year))                              years.Add(year);                      }                      if (years.Count <= 0) return false;                      if ((gfc.GetConditionOperatorEnum() == GroupFilterOperator.Include || gfc.GetConditionOperatorEnum() == GroupFilterOperator.In) &&                          !contractGroup.Stat_AllYears.FindInEnumerable(years))                          return false;                      if ((gfc.GetConditionOperatorEnum() == GroupFilterOperator.Exclude || gfc.GetConditionOperatorEnum() == GroupFilterOperator.NotIn) &&                          contractGroup.Stat_AllYears.FindInEnumerable(years))                          return false;                      break;                  case GroupFilterConditionType.Season:                      string[] paramStrings = gfc.ConditionParameter.Trim().Split(''');                        switch (gfc.GetConditionOperatorEnum())                      {                          case GroupFilterOperator.Include:                          case GroupFilterOperator.In:                              return paramStrings.FindInEnumerable(contractGroup.Stat_AllSeasons);                          case GroupFilterOperator.Exclude:                          case GroupFilterOperator.NotIn:                              return !paramStrings.FindInEnumerable(contractGroup.Stat_AllSeasons);                      }                      break;                  case GroupFilterConditionType.HasWatchedEpisodes:                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.Include &&                          contractGroup.WatchedEpisodeCount > 0 == false)                          return false;                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.Exclude &&                          contractGroup.WatchedEpisodeCount > 0)                          return false;                      break;                    case GroupFilterConditionType.HasUnwatchedEpisodes:                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.Include &&                          contractGroup.UnwatchedEpisodeCount > 0 == false)                          return false;                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.Exclude &&                          contractGroup.UnwatchedEpisodeCount > 0)                          return false;                      break;                    case GroupFilterConditionType.AssignedTvDBInfo:                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.Include &&                          contractGroup.Stat_HasTvDBLink == false)                          return false;                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.Exclude &&                          contractGroup.Stat_HasTvDBLink)                          return false;                      break;                    case GroupFilterConditionType.AssignedMALInfo:                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.Include &&                          contractGroup.Stat_HasMALLink == false)                          return false;                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.Exclude &&                          contractGroup.Stat_HasMALLink)                          return false;                      break;                    case GroupFilterConditionType.AssignedMovieDBInfo:                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.Include &&                          contractGroup.Stat_HasMovieDBLink == false)                          return false;                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.Exclude &&                          contractGroup.Stat_HasMovieDBLink)                          return false;                      break;                    case GroupFilterConditionType.AssignedTvDBOrMovieDBInfo:                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.Include &&                          !contractGroup.Stat_HasMovieDBOrTvDBLink)                          return false;                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.Exclude &&                          contractGroup.Stat_HasMovieDBOrTvDBLink)                          return false;                      break;                    case GroupFilterConditionType.CompletedSeries:                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.Include &&                          contractGroup.Stat_IsComplete == false)                          return false;                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.Exclude &&                          contractGroup.Stat_IsComplete)                          return false;                      break;                    case GroupFilterConditionType.FinishedAiring:                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.Include &&                          contractGroup.Stat_HasFinishedAiring == false)                          return false;                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.Exclude &&                          contractGroup.Stat_HasFinishedAiring)                          return false;                      break;                    case GroupFilterConditionType.UserVoted:                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.Include &&                          contractGroup.Stat_UserVotePermanent.HasValue == false) return false;                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.Exclude &&                          contractGroup.Stat_UserVotePermanent.HasValue) return false;                      break;                    case GroupFilterConditionType.UserVotedAny:                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.Include &&                          contractGroup.Stat_UserVoteOverall.HasValue == false) return false;                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.Exclude &&                          contractGroup.Stat_UserVoteOverall.HasValue) return false;                      break;                    case GroupFilterConditionType.AirDate:                      DateTime filterDate;                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.LastXDays)                      {                          int.TryParse(gfc.ConditionParameter' out int days);                          filterDate = DateTime.Today.AddDays(0 - days);                      }                      else                          filterDate = GetDateFromString(gfc.ConditionParameter);                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.GreaterThan ||                          gfc.GetConditionOperatorEnum() == GroupFilterOperator.LastXDays)                      {                          if (!contractGroup.Stat_AirDate_Min.HasValue || !contractGroup.Stat_AirDate_Max.HasValue)                              return false;                          if (contractGroup.Stat_AirDate_Max.Value < filterDate) return false;                      }                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.LessThan)                      {                          if (!contractGroup.Stat_AirDate_Min.HasValue || !contractGroup.Stat_AirDate_Max.HasValue)                              return false;                          if (contractGroup.Stat_AirDate_Min.Value > filterDate) return false;                      }                      break;                  case GroupFilterConditionType.LatestEpisodeAirDate:                      DateTime filterDateEpisodeLastAired;                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.LastXDays)                      {                          int.TryParse(gfc.ConditionParameter' out int days);                          filterDateEpisodeLastAired = DateTime.Today.AddDays(0 - days);                      }                      else                          filterDateEpisodeLastAired = GetDateFromString(gfc.ConditionParameter);                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.GreaterThan ||                          gfc.GetConditionOperatorEnum() == GroupFilterOperator.LastXDays)                      {                          if (!contractGroup.LatestEpisodeAirDate.HasValue) return false;                          if (contractGroup.LatestEpisodeAirDate.Value < filterDateEpisodeLastAired) return false;                      }                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.LessThan)                      {                          if (!contractGroup.LatestEpisodeAirDate.HasValue) return false;                          if (contractGroup.LatestEpisodeAirDate.Value > filterDateEpisodeLastAired) return false;                      }                      break;                  case GroupFilterConditionType.SeriesCreatedDate:                      DateTime filterDateSeries;                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.LastXDays)                      {                          int.TryParse(gfc.ConditionParameter' out int days);                          filterDateSeries = DateTime.Today.AddDays(0 - days);                      }                      else                          filterDateSeries = GetDateFromString(gfc.ConditionParameter);                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.GreaterThan ||                          gfc.GetConditionOperatorEnum() == GroupFilterOperator.LastXDays)                      {                          if (!contractGroup.Stat_SeriesCreatedDate.HasValue) return false;                          if (contractGroup.Stat_SeriesCreatedDate.Value < filterDateSeries) return false;                      }                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.LessThan)                      {                          if (!contractGroup.Stat_SeriesCreatedDate.HasValue) return false;                          if (contractGroup.Stat_SeriesCreatedDate.Value > filterDateSeries) return false;                      }                      break;                    case GroupFilterConditionType.EpisodeWatchedDate:                      DateTime filterDateEpsiodeWatched;                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.LastXDays)                      {                          int.TryParse(gfc.ConditionParameter' out int days);                          filterDateEpsiodeWatched = DateTime.Today.AddDays(0 - days);                      }                      else                          filterDateEpsiodeWatched = GetDateFromString(gfc.ConditionParameter);                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.GreaterThan ||                          gfc.GetConditionOperatorEnum() == GroupFilterOperator.LastXDays)                      {                          if (!contractGroup.WatchedDate.HasValue) return false;                          if (contractGroup.WatchedDate.Value < filterDateEpsiodeWatched) return false;                      }                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.LessThan)                      {                          if (contractGroup?.WatchedDate == null) return false;                          if (contractGroup.WatchedDate.Value > filterDateEpsiodeWatched) return false;                      }                      break;                    case GroupFilterConditionType.EpisodeAddedDate:                      DateTime filterDateEpisodeAdded;                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.LastXDays)                      {                          int.TryParse(gfc.ConditionParameter' out int days);                          filterDateEpisodeAdded = DateTime.Today.AddDays(0 - days);                      }                      else                          filterDateEpisodeAdded = GetDateFromString(gfc.ConditionParameter);                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.GreaterThan ||                          gfc.GetConditionOperatorEnum() == GroupFilterOperator.LastXDays)                      {                          if (!contractGroup.EpisodeAddedDate.HasValue) return false;                          if (contractGroup.EpisodeAddedDate.Value < filterDateEpisodeAdded) return false;                      }                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.LessThan)                      {                          if (!contractGroup.EpisodeAddedDate.HasValue) return false;                          if (contractGroup.EpisodeAddedDate.Value > filterDateEpisodeAdded) return false;                      }                      break;                    case GroupFilterConditionType.EpisodeCount:                      int.TryParse(gfc.ConditionParameter' out var epCount);                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.GreaterThan &&                          contractGroup.Stat_EpisodeCount < epCount)                          return false;                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.LessThan &&                          contractGroup.Stat_EpisodeCount > epCount)                          return false;                      break;                    case GroupFilterConditionType.AniDBRating:                      decimal.TryParse(gfc.ConditionParameter' style' culture' out var dRating);                      decimal thisRating = contractGroup.Stat_AniDBRating / 100;                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.GreaterThan && thisRating < dRating)                          return false;                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.LessThan && thisRating > dRating)                          return false;                      break;                    case GroupFilterConditionType.UserRating:                      if (!contractGroup.Stat_UserVoteOverall.HasValue) return false;                      decimal.TryParse(gfc.ConditionParameter' style' culture' out var dUserRating);                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.GreaterThan &&                          contractGroup.Stat_UserVoteOverall.Value < dUserRating) return false;                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.LessThan &&                          contractGroup.Stat_UserVoteOverall.Value > dUserRating) return false;                      break;                    case GroupFilterConditionType.CustomTags:                      List<string> ctags =                          gfc.ConditionParameter.Trim()                              .Split(new[] {'''}' StringSplitOptions.RemoveEmptyEntries)                              .Select(a => a.ToLowerInvariant().Trim())                              .ToList();                      bool foundTag = ctags.FindInEnumerable(contractGroup.Stat_AllCustomTags);                      if ((gfc.GetConditionOperatorEnum() == GroupFilterOperator.In) && !foundTag) return false;                      if ((gfc.GetConditionOperatorEnum() == GroupFilterOperator.NotIn) && foundTag) return false;                      break;                    case GroupFilterConditionType.AnimeType:                      List<string> ctypes =                          gfc.ConditionParameter                              .Split(new[] {'''}' StringSplitOptions.RemoveEmptyEntries)                              .Select(a => ((int) Commons.Extensions.Models.RawToType(a)).ToString())                              .ToList();                      bool foundAnimeType = ctypes.FindInEnumerable(contractGroup.Stat_AnimeTypes);                      if ((gfc.GetConditionOperatorEnum() == GroupFilterOperator.In) && !foundAnimeType) return false;                      if ((gfc.GetConditionOperatorEnum() == GroupFilterOperator.NotIn) && foundAnimeType)                          return false;                      break;                    case GroupFilterConditionType.VideoQuality:                      List<string> vqs =                          gfc.ConditionParameter                              .Split(new[] {'''}' StringSplitOptions.RemoveEmptyEntries)                              .Select(a => a.ToLowerInvariant().Trim())                              .ToList();                      bool foundVid = vqs.FindInEnumerable(contractGroup.Stat_AllVideoQuality);                      bool foundVidAllEps = vqs.FindInEnumerable(contractGroup.Stat_AllVideoQuality_Episodes);                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.In && !foundVid) return false;                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.NotIn && foundVid) return false;                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.InAllEpisodes && !foundVidAllEps)                          return false;                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.NotInAllEpisodes && foundVidAllEps)                          return false;                      break;                    case GroupFilterConditionType.AudioLanguage:                      List<string> als =                          gfc.ConditionParameter.Trim()                              .Split(new[] {'''}' StringSplitOptions.RemoveEmptyEntries)                              .Select(a => a.ToLowerInvariant().Trim())                              .ToList();                      bool foundLang = als.FindInEnumerable(contractGroup.Stat_AudioLanguages);                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.In && !foundLang) return false;                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.NotIn && foundLang) return false;                      break;                    case GroupFilterConditionType.SubtitleLanguage:                      List<string> ass =                          gfc.ConditionParameter                              .Split(new[] {'''}' StringSplitOptions.RemoveEmptyEntries)                              .Select(a => a.ToLowerInvariant().Trim())                              .ToList();                      bool foundSub = ass.FindInEnumerable(contractGroup.Stat_SubtitleLanguages);                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.In && !foundSub) return false;                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.NotIn && foundSub) return false;                      break;              }
Magic Number,Shoko.Server.Models,SVR_GroupFilter,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Models\SVR_GroupFilter.cs,EvaluateConditions,The following statement contains a magic number: switch (gfc.GetConditionTypeEnum())              {                  case GroupFilterConditionType.MissingEpisodes:                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.Include &&                          (contractSerie.MissingEpisodeCount > 0 || contractSerie.MissingEpisodeCountGroups > 0) ==                          false) return false;                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.Exclude &&                          (contractSerie.MissingEpisodeCount > 0 || contractSerie.MissingEpisodeCountGroups > 0))                          return false;                      break;                    case GroupFilterConditionType.MissingEpisodesCollecting:                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.Include &&                          contractSerie.MissingEpisodeCountGroups > 0 == false) return false;                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.Exclude &&                          contractSerie.MissingEpisodeCountGroups > 0) return false;                      break;                  case GroupFilterConditionType.Tag:                      List<string> tags =                          gfc.ConditionParameter.Trim()                              .Split(new[] {'''}' StringSplitOptions.RemoveEmptyEntries)                              .Select(a => a.ToLowerInvariant().Trim())                              .Where(a => !string.IsNullOrWhiteSpace(a))                              .ToList();                      bool tagsFound =                          tags.Any(a => contractSerie.AniDBAnime.AniDBAnime.GetAllTags()                              .Contains(a'                                  StringComparer.InvariantCultureIgnoreCase));                      if ((gfc.GetConditionOperatorEnum() == GroupFilterOperator.In ||                           gfc.GetConditionOperatorEnum() == GroupFilterOperator.Include) && !tagsFound) return false;                      if ((gfc.GetConditionOperatorEnum() == GroupFilterOperator.NotIn ||                           gfc.GetConditionOperatorEnum() == GroupFilterOperator.Exclude) && tagsFound) return false;                      break;                  case GroupFilterConditionType.Year:                      HashSet<int> years = new HashSet<int>();                      string[] parameterStrings = gfc.ConditionParameter.Trim().Split(''');                      foreach (string yearString in parameterStrings)                      {                          if (int.TryParse(yearString.Trim()' out int paramYear))                              years.Add(paramYear);                      }                        if (years.Count <= 0) return false;                      switch (gfc.GetConditionOperatorEnum())                      {                          case GroupFilterOperator.Include:                          case GroupFilterOperator.In:                              if (years.Any(year => contractSerie.AniDBAnime.IsInYear(year)))                                  return true;                              return false;                          case GroupFilterOperator.Exclude:                          case GroupFilterOperator.NotIn:                              if (years.Any(year => contractSerie.AniDBAnime.IsInYear(year)))                                  return false;                              return true;                      }                        break;                  case GroupFilterConditionType.Season:                      Tuple<AnimeSeason' int>[] paramStrings = gfc.ConditionParameter.Trim().Split(''').Select(a =>                      {                          var b = a.Trim().Split(' ');                          if (!Enum.TryParse(b[0]' out AnimeSeason season)) return null;                          if (!int.TryParse(b[1]' out int year)) return null;                          return Tuple.Create(season' year);                      }).Where(a => a != null).ToArray();                        switch (gfc.GetConditionOperatorEnum())                      {                          case GroupFilterOperator.Include:                          case GroupFilterOperator.In:                              return paramStrings.Any(a => contractSerie?.AniDBAnime?.IsInSeason(a.Item1' a.Item2) ?? false);                          case GroupFilterOperator.Exclude:                          case GroupFilterOperator.NotIn:                              return !paramStrings.Any(a => contractSerie?.AniDBAnime?.IsInSeason(a.Item1' a.Item2) ?? false);                      }                        break;                  case GroupFilterConditionType.HasWatchedEpisodes:                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.Include &&                          contractSerie.WatchedEpisodeCount > 0 == false)                          return false;                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.Exclude &&                          contractSerie.WatchedEpisodeCount > 0)                          return false;                      break;                    case GroupFilterConditionType.HasUnwatchedEpisodes:                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.Include &&                          contractSerie.UnwatchedEpisodeCount > 0 == false)                          return false;                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.Exclude &&                          contractSerie.UnwatchedEpisodeCount > 0)                          return false;                      break;                    case GroupFilterConditionType.AssignedTvDBInfo:                      bool tvDBInfoMissing = RepoFactory.CrossRef_AniDB_TvDB.GetByAnimeID(contractSerie.AniDB_ID).Count == 0;                      bool supposedToHaveTvDBLink = contractSerie.AniDBAnime.AniDBAnime.AnimeType !=                                                    (int) AnimeType.Movie &&                                                    !(contractSerie.AniDBAnime.AniDBAnime.Restricted > 0);                      tvDBInfoMissing &= supposedToHaveTvDBLink;                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.Include && tvDBInfoMissing)                          return false;                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.Exclude && !tvDBInfoMissing)                          return false;                      break;                    case GroupFilterConditionType.AssignedMALInfo:                      bool malMissing = contractSerie.CrossRefAniDBMAL == null ||                                        contractSerie.CrossRefAniDBMAL.Count == 0;                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.Include && malMissing) return false;                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.Exclude && !malMissing) return false;                      break;                    case GroupFilterConditionType.AssignedMovieDBInfo:                      bool movieMissing = contractSerie.CrossRefAniDBMovieDB == null;                      bool supposedToHaveMovieLink = contractSerie.AniDBAnime.AniDBAnime.AnimeType ==                                                     (int) AnimeType.Movie &&                                                     !(contractSerie.AniDBAnime.AniDBAnime.Restricted > 0);                      movieMissing &= supposedToHaveMovieLink;                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.Include && movieMissing) return false;                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.Exclude && !movieMissing)                          return false;                      break;                    case GroupFilterConditionType.AssignedTvDBOrMovieDBInfo:                      bool restricted = (contractSerie.AniDBAnime.AniDBAnime.Restricted > 0);                      bool movieLinkMissing = contractSerie.CrossRefAniDBMovieDB == null && !restricted;                      bool tvlinkMissing =                          RepoFactory.CrossRef_AniDB_TvDB.GetByAnimeID(contractSerie.AniDB_ID).Count == 0 &&                          !restricted;                      bool bothMissing = movieLinkMissing && tvlinkMissing;                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.Include && bothMissing) return false;                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.Exclude && !bothMissing) return false;                      break;                    case GroupFilterConditionType.CompletedSeries:                      bool completed = contractSerie.AniDBAnime.AniDBAnime.EndDate.HasValue &&                                       contractSerie.AniDBAnime.AniDBAnime.EndDate.Value < DateTime.Now &&                                       !(contractSerie.MissingEpisodeCount > 0 ||                                         contractSerie.MissingEpisodeCountGroups > 0);                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.Include && !completed) return false;                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.Exclude && completed) return false;                      break;                    case GroupFilterConditionType.FinishedAiring:                      bool finished = contractSerie.AniDBAnime.AniDBAnime.EndDate.HasValue &&                                      contractSerie.AniDBAnime.AniDBAnime.EndDate.Value < DateTime.Now;                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.Include && !finished) return false;                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.Exclude && finished) return false;                      break;                    case GroupFilterConditionType.UserVoted:                      bool voted = (contractSerie.AniDBAnime.UserVote != null) &&                                   (contractSerie.AniDBAnime.UserVote.VoteType == (int) AniDBVoteType.Anime);                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.Include && !voted) return false;                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.Exclude && voted) return false;                      break;                    case GroupFilterConditionType.UserVotedAny:                      bool votedany = contractSerie.AniDBAnime.UserVote != null;                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.Include && !votedany) return false;                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.Exclude && votedany) return false;                      break;                    case GroupFilterConditionType.AirDate:                      DateTime filterDate;                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.LastXDays)                      {                          int.TryParse(gfc.ConditionParameter' out int days);                          filterDate = DateTime.Today.AddDays(0 - days);                      }                      else                          filterDate = GroupFilterHelper.GetDateFromString(gfc.ConditionParameter);                        if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.GreaterThan ||                          gfc.GetConditionOperatorEnum() == GroupFilterOperator.LastXDays)                          if (!contractSerie.AniDBAnime.AniDBAnime.AirDate.HasValue ||                              contractSerie.AniDBAnime.AniDBAnime.AirDate.Value < filterDate)                              return false;                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.LessThan)                          if (!contractSerie.AniDBAnime.AniDBAnime.AirDate.HasValue ||                              contractSerie.AniDBAnime.AniDBAnime.AirDate.Value > filterDate)                              return false;                      break;                  case GroupFilterConditionType.LatestEpisodeAirDate:                      DateTime filterDateEpisodeLastAired;                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.LastXDays)                      {                          int.TryParse(gfc.ConditionParameter' out int days);                          filterDateEpisodeLastAired = DateTime.Today.AddDays(0 - days);                      }                      else                          filterDateEpisodeLastAired = GetDateFromString(gfc.ConditionParameter);                        if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.GreaterThan ||                          gfc.GetConditionOperatorEnum() == GroupFilterOperator.LastXDays)                      {                          if (!contractSerie.LatestEpisodeAirDate.HasValue) return false;                          if (contractSerie.LatestEpisodeAirDate.Value < filterDateEpisodeLastAired) return false;                      }                        if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.LessThan)                      {                          if (!contractSerie.LatestEpisodeAirDate.HasValue) return false;                          if (contractSerie.LatestEpisodeAirDate.Value > filterDateEpisodeLastAired) return false;                      }                        break;                  case GroupFilterConditionType.SeriesCreatedDate:                      DateTime filterDateSeries;                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.LastXDays)                      {                          int.TryParse(gfc.ConditionParameter' out int days);                          filterDateSeries = DateTime.Today.AddDays(0 - days);                      }                      else                          filterDateSeries = GetDateFromString(gfc.ConditionParameter);                        if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.GreaterThan ||                          gfc.GetConditionOperatorEnum() == GroupFilterOperator.LastXDays)                      {                          if (contractSerie.DateTimeCreated < filterDateSeries) return false;                      }                        if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.LessThan)                      {                          if (contractSerie.DateTimeCreated > filterDateSeries) return false;                      }                        break;                    case GroupFilterConditionType.EpisodeWatchedDate:                      DateTime filterDateEpsiodeWatched;                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.LastXDays)                      {                          int.TryParse(gfc.ConditionParameter' out int days);                          filterDateEpsiodeWatched = DateTime.Today.AddDays(0 - days);                      }                      else                          filterDateEpsiodeWatched = GetDateFromString(gfc.ConditionParameter);                        if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.GreaterThan ||                          gfc.GetConditionOperatorEnum() == GroupFilterOperator.LastXDays)                      {                          if (!contractSerie.WatchedDate.HasValue) return false;                          if (contractSerie.WatchedDate.Value < filterDateEpsiodeWatched) return false;                      }                        if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.LessThan)                      {                          if (contractSerie?.WatchedDate == null) return false;                          if (contractSerie.WatchedDate.Value > filterDateEpsiodeWatched) return false;                      }                        break;                    case GroupFilterConditionType.EpisodeAddedDate:                      DateTime filterDateEpisodeAdded;                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.LastXDays)                      {                          int.TryParse(gfc.ConditionParameter' out int days);                          filterDateEpisodeAdded = DateTime.Today.AddDays(0 - days);                      }                      else                          filterDateEpisodeAdded = GetDateFromString(gfc.ConditionParameter);                        if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.GreaterThan ||                          gfc.GetConditionOperatorEnum() == GroupFilterOperator.LastXDays)                      {                          if (!contractSerie.EpisodeAddedDate.HasValue) return false;                          if (contractSerie.EpisodeAddedDate.Value < filterDateEpisodeAdded) return false;                      }                        if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.LessThan)                      {                          if (!contractSerie.EpisodeAddedDate.HasValue) return false;                          if (contractSerie.EpisodeAddedDate.Value > filterDateEpisodeAdded) return false;                      }                        break;                    case GroupFilterConditionType.EpisodeCount:                      int.TryParse(gfc.ConditionParameter' out var epCount);                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.GreaterThan &&                          contractSerie.AniDBAnime.AniDBAnime.EpisodeCount < epCount) return false;                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.LessThan &&                          contractSerie.AniDBAnime.AniDBAnime.EpisodeCount > epCount) return false;                      break;                    case GroupFilterConditionType.AniDBRating:                      decimal.TryParse(gfc.ConditionParameter' style' culture' out var dRating);                      int totalVotes = contractSerie.AniDBAnime.AniDBAnime.VoteCount +                                       contractSerie.AniDBAnime.AniDBAnime.TempVoteCount;                      decimal totalRating = contractSerie.AniDBAnime.AniDBAnime.Rating *                                            contractSerie.AniDBAnime.AniDBAnime.VoteCount +                                            contractSerie.AniDBAnime.AniDBAnime.TempRating *                                            contractSerie.AniDBAnime.AniDBAnime.TempVoteCount;                      decimal thisRating = totalVotes == 0 ? 0 : totalRating / totalVotes / 100;                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.GreaterThan && thisRating < dRating)                          return false;                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.LessThan && thisRating > dRating)                          return false;                      break;                    case GroupFilterConditionType.UserRating:                      decimal.TryParse(gfc.ConditionParameter' style' culture' out var dUserRating);                      decimal val = contractSerie.AniDBAnime.UserVote?.VoteValue ?? 0;                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.GreaterThan && val < dUserRating)                          return false;                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.LessThan && val > dUserRating)                          return false;                      break;                      case GroupFilterConditionType.CustomTags:                      List<string> ctags =                          gfc.ConditionParameter.Trim()                              .Split(new[] {'''}' StringSplitOptions.RemoveEmptyEntries)                              .Select(a => a.ToLowerInvariant().Trim())                              .ToList();                      bool foundTag =                          ctags.FindInEnumerable(contractSerie.AniDBAnime.CustomTags.Select(a => a.TagName));                      if ((gfc.GetConditionOperatorEnum() == GroupFilterOperator.In) && !foundTag) return false;                      if ((gfc.GetConditionOperatorEnum() == GroupFilterOperator.NotIn) && foundTag) return false;                      break;                    case GroupFilterConditionType.AnimeType:                      List<string> ctypes =                          gfc.ConditionParameter.Trim()                              .Split(new[] {'''}' StringSplitOptions.RemoveEmptyEntries)                              .Select(                                  a => ((int) Commons.Extensions.Models.RawToType(a.ToLowerInvariant())).ToString())                              .ToList();                      bool foundAnimeType = ctypes.Contains(contractSerie.AniDBAnime.AniDBAnime.AnimeType.ToString());                      if ((gfc.GetConditionOperatorEnum() == GroupFilterOperator.In) && !foundAnimeType) return false;                      if ((gfc.GetConditionOperatorEnum() == GroupFilterOperator.NotIn) && foundAnimeType)                          return false;                      break;                    case GroupFilterConditionType.VideoQuality:                      List<string> vqs =                          gfc.ConditionParameter.Trim()                              .Split(new[] {'''}' StringSplitOptions.RemoveEmptyEntries)                              .Select(a => a.ToLowerInvariant().Trim())                              .ToList();                      bool foundVid = vqs.FindInEnumerable(contractSerie.AniDBAnime.Stat_AllVideoQuality);                      bool foundVidAllEps =                          vqs.FindInEnumerable(contractSerie.AniDBAnime.Stat_AllVideoQuality_Episodes);                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.In && !foundVid) return false;                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.NotIn && foundVid) return false;                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.InAllEpisodes && !foundVidAllEps)                          return false;                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.NotInAllEpisodes && foundVidAllEps)                          return false;                      break;                    case GroupFilterConditionType.AudioLanguage:                      List<string> als =                          gfc.ConditionParameter.Trim()                              .Split(new[] {'''}' StringSplitOptions.RemoveEmptyEntries)                              .Select(a => a.ToLowerInvariant().Trim())                              .ToList();                      bool foundLang = als.FindInEnumerable(contractSerie.AniDBAnime.Stat_AudioLanguages);                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.In && !foundLang) return false;                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.NotIn && foundLang) return false;                      break;                    case GroupFilterConditionType.SubtitleLanguage:                      List<string> ass =                          gfc.ConditionParameter.Trim()                              .Split(new[] {'''}' StringSplitOptions.RemoveEmptyEntries)                              .Select(a => a.ToLowerInvariant().Trim())                              .ToList();                      bool foundSub = ass.FindInEnumerable(contractSerie.AniDBAnime.Stat_AudioLanguages);                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.In && !foundSub) return false;                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.NotIn && foundSub) return false;                      break;              }
Magic Number,Shoko.Server.Models,SVR_GroupFilter,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Models\SVR_GroupFilter.cs,GetDateFromString,The following statement contains a magic number: int year = int.Parse(sDate.Substring(0' 4));
Magic Number,Shoko.Server.Models,SVR_GroupFilter,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Models\SVR_GroupFilter.cs,GetDateFromString,The following statement contains a magic number: int month = int.Parse(sDate.Substring(4' 2));
Magic Number,Shoko.Server.Models,SVR_GroupFilter,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Models\SVR_GroupFilter.cs,GetDateFromString,The following statement contains a magic number: int month = int.Parse(sDate.Substring(4' 2));
Magic Number,Shoko.Server.Models,SVR_GroupFilter,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Models\SVR_GroupFilter.cs,GetDateFromString,The following statement contains a magic number: int day = int.Parse(sDate.Substring(6' 2));
Magic Number,Shoko.Server.Models,SVR_GroupFilter,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Models\SVR_GroupFilter.cs,GetDateFromString,The following statement contains a magic number: int day = int.Parse(sDate.Substring(6' 2));
Magic Number,Shoko.Server.Models,SVR_VideoLocal,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Models\SVR_VideoLocal.cs,ToggleWatchedStatus,The following statement contains a magic number: epPercentWatched > 95
Magic Number,Shoko.Server.Models,SVR_VideoLocal,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Models\SVR_VideoLocal.cs,ToggleWatchedStatus,The following statement contains a magic number: epPercentWatched > 95
Magic Number,Shoko.Server.Models,SVR_VideoLocal,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Models\SVR_VideoLocal.cs,GetMediaFromUser,The following statement contains a magic number: p.Streams.Where(a => a.File != null && a.StreamType == 3).ToList()
Magic Number,Shoko.Server.Plex,PlexHelper,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Plex\PlexHelper.cs,PlexHelper,The following statement contains a magic number: SetupHttpClient(HttpClient' TimeSpan.FromSeconds(3));
Magic Number,Shoko.Server.Plex,PlexHelper,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Plex\PlexHelper.cs,SetupHttpClient,The following statement contains a magic number: client.Timeout = TimeSpan.FromSeconds(3);
Magic Number,Shoko.Server.Plex,PlexHelper,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Plex\PlexHelper.cs,RequestAsync,The following statement contains a magic number: SetupHttpClient(client' TimeSpan.FromSeconds(60));
Magic Number,Shoko.Server.Providers.AniDB,AniDBConnectionHandler,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Providers\AniDB\AniDBConnectionHandler.cs,InitInternal,The following statement contains a magic number: _logoutTimer = new Timer {Interval = 5000' Enabled = true' AutoReset = true};
Magic Number,Shoko.Server.Providers.AniDB,AniDBConnectionHandler,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Providers\AniDB\AniDBConnectionHandler.cs,CallAniDBUDPDirectly,The following statement contains a magic number: byte[] byReceivedAdd = new byte[2000];
Magic Number,Shoko.Server.Providers.AniDB,AniDBConnectionHandler,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Providers\AniDB\AniDBConnectionHandler.cs,CallAniDBUDPDirectly,The following statement contains a magic number: byte[] buff = new byte[65536];
Magic Number,Shoko.Server.Providers.AniDB,AniDBConnectionHandler,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Providers\AniDB\AniDBConnectionHandler.cs,CallAniDBUDPDirectly,The following statement contains a magic number: Byte[] input = new byte[received - 2];
Magic Number,Shoko.Server.Providers.AniDB,AniDBConnectionHandler,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Providers\AniDB\AniDBConnectionHandler.cs,CallAniDBUDPDirectly,The following statement contains a magic number: Array.Copy(byReceivedAdd' 2' input' 0' received - 2);
Magic Number,Shoko.Server.Providers.AniDB,AniDBConnectionHandler,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Providers\AniDB\AniDBConnectionHandler.cs,CallAniDBUDPDirectly,The following statement contains a magic number: Array.Copy(byReceivedAdd' 2' input' 0' received - 2);
Magic Number,Shoko.Server.Providers.AniDB,AniDBConnectionHandler,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Providers\AniDB\AniDBConnectionHandler.cs,CallAniDBUDPDirectly,The following statement contains a magic number: (received > 2) && (byReceivedAdd[0] == 0) && (byReceivedAdd[1] == 0)
Magic Number,Shoko.Server.Providers.AniDB,AniDBConnectionHandler,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Providers\AniDB\AniDBConnectionHandler.cs,CallAniDBUDPDirectly,The following statement contains a magic number: bool truncated = decodedString.Count(a => a == '\n') != 2;
Magic Number,Shoko.Server.Providers.AniDB,AniDBConnectionHandler,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Providers\AniDB\AniDBConnectionHandler.cs,CallAniDBUDPDirectly,The following statement contains a magic number: decodedParts.Length < 2
Magic Number,Shoko.Server.Providers.AniDB,AniDBConnectionHandler,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Providers\AniDB\AniDBConnectionHandler.cs,CallAniDBUDPDirectly,The following statement contains a magic number: firstLineParts.Length != 2
Magic Number,Shoko.Server.Providers.AniDB,AniDBConnectionHandler,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Providers\AniDB\AniDBConnectionHandler.cs,CallAniDBUDPDirectly,The following statement contains a magic number: IsUdpBanned = code == 555;
Magic Number,Shoko.Server.Providers.AniDB,AniDBConnectionHandler,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Providers\AniDB\AniDBConnectionHandler.cs,CallAniDBUDPDirectly,The following statement contains a magic number: code == 598 || code == 506 || code == 505
Magic Number,Shoko.Server.Providers.AniDB,AniDBConnectionHandler,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Providers\AniDB\AniDBConnectionHandler.cs,CallAniDBUDPDirectly,The following statement contains a magic number: code == 598 || code == 506 || code == 505
Magic Number,Shoko.Server.Providers.AniDB,AniDBConnectionHandler,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Providers\AniDB\AniDBConnectionHandler.cs,CallAniDBUDPDirectly,The following statement contains a magic number: code == 598 || code == 506 || code == 505
Magic Number,Shoko.Server.Providers.AniDB,AniDBConnectionHandler,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Providers\AniDB\AniDBConnectionHandler.cs,CallAniDBUDPDirectly,The following statement contains a magic number: switch (code)                  {                      case 600:                          errormsg = "600 INTERNAL SERVER ERROR";                          break;                      case 601:                          errormsg = "601 ANIDB OUT OF SERVICE - TRY AGAIN LATER";                          break;                      case 602:                          errormsg = "602 SERVER BUSY - TRY AGAIN LATER";                          break;                      case 604:                          errormsg = "TIMEOUT - DELAY AND RESUBMIT";                          break;                  }
Magic Number,Shoko.Server.Providers.AniDB,AniDBConnectionHandler,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Providers\AniDB\AniDBConnectionHandler.cs,CallAniDBUDPDirectly,The following statement contains a magic number: switch (code)                  {                      case 600:                          errormsg = "600 INTERNAL SERVER ERROR";                          break;                      case 601:                          errormsg = "601 ANIDB OUT OF SERVICE - TRY AGAIN LATER";                          break;                      case 602:                          errormsg = "602 SERVER BUSY - TRY AGAIN LATER";                          break;                      case 604:                          errormsg = "TIMEOUT - DELAY AND RESUBMIT";                          break;                  }
Magic Number,Shoko.Server.Providers.AniDB,AniDBConnectionHandler,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Providers\AniDB\AniDBConnectionHandler.cs,CallAniDBUDPDirectly,The following statement contains a magic number: switch (code)                  {                      case 600:                          errormsg = "600 INTERNAL SERVER ERROR";                          break;                      case 601:                          errormsg = "601 ANIDB OUT OF SERVICE - TRY AGAIN LATER";                          break;                      case 602:                          errormsg = "602 SERVER BUSY - TRY AGAIN LATER";                          break;                      case 604:                          errormsg = "TIMEOUT - DELAY AND RESUBMIT";                          break;                  }
Magic Number,Shoko.Server.Providers.AniDB,AniDBConnectionHandler,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Providers\AniDB\AniDBConnectionHandler.cs,CallAniDBUDPDirectly,The following statement contains a magic number: switch (code)                  {                      case 600:                          errormsg = "600 INTERNAL SERVER ERROR";                          break;                      case 601:                          errormsg = "601 ANIDB OUT OF SERVICE - TRY AGAIN LATER";                          break;                      case 602:                          errormsg = "602 SERVER BUSY - TRY AGAIN LATER";                          break;                      case 604:                          errormsg = "TIMEOUT - DELAY AND RESUBMIT";                          break;                  }
Magic Number,Shoko.Server.Providers.AniDB,AniDBConnectionHandler,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Providers\AniDB\AniDBConnectionHandler.cs,CallAniDBUDPDirectly,The following statement contains a magic number: ExtendBanTimer(300' errormsg);
Magic Number,Shoko.Server.Providers.AniDB,AniDBConnectionHandler,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Providers\AniDB\AniDBConnectionHandler.cs,CallAniDBUDPDirectly,The following statement contains a magic number: code == 600 || code == 601 || code == 602 || code == 604
Magic Number,Shoko.Server.Providers.AniDB,AniDBConnectionHandler,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Providers\AniDB\AniDBConnectionHandler.cs,CallAniDBUDPDirectly,The following statement contains a magic number: code == 600 || code == 601 || code == 602 || code == 604
Magic Number,Shoko.Server.Providers.AniDB,AniDBConnectionHandler,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Providers\AniDB\AniDBConnectionHandler.cs,CallAniDBUDPDirectly,The following statement contains a magic number: code == 600 || code == 601 || code == 602 || code == 604
Magic Number,Shoko.Server.Providers.AniDB,AniDBConnectionHandler,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Providers\AniDB\AniDBConnectionHandler.cs,CallAniDBUDPDirectly,The following statement contains a magic number: code == 600 || code == 601 || code == 602 || code == 604
Magic Number,Shoko.Server.Providers.AniDB,AniDBConnectionHandler,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Providers\AniDB\AniDBConnectionHandler.cs,GetEncoding,The following statement contains a magic number: data.Length < 4
Magic Number,Shoko.Server.Providers.AniDB,AniDBConnectionHandler,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Providers\AniDB\AniDBConnectionHandler.cs,GetEncoding,The following statement contains a magic number: data[0] == 0x2b && data[1] == 0x2f && data[2] == 0x76
Magic Number,Shoko.Server.Providers.AniDB,AniDBConnectionHandler,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Providers\AniDB\AniDBConnectionHandler.cs,GetEncoding,The following statement contains a magic number: data[0] == 0xef && data[1] == 0xbb && data[2] == 0xbf
Magic Number,Shoko.Server.Providers.AniDB,AniDBConnectionHandler,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Providers\AniDB\AniDBConnectionHandler.cs,GetEncoding,The following statement contains a magic number: data[0] == 0 && data[1] == 0 && data[2] == 0xfe && data[3] == 0xff
Magic Number,Shoko.Server.Providers.AniDB,AniDBConnectionHandler,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Providers\AniDB\AniDBConnectionHandler.cs,GetEncoding,The following statement contains a magic number: data[0] == 0 && data[1] == 0 && data[2] == 0xfe && data[3] == 0xff
Magic Number,Shoko.Server.Providers.AniDB,AniDBConnectionHandler,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Providers\AniDB\AniDBConnectionHandler.cs,BindToLocalPort,The following statement contains a magic number: AniDBSocket.ReceiveTimeout = 30000;
Magic Number,Shoko.Server.Providers.AniDB.MyList.Commands,AniDBMyList_RequestAddFile,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Providers\AniDB\UDP\MyList\Requests\AniDBMyList_RequestAddFile.cs,ParseResponse,The following statement contains a magic number: switch (code)              {                  case AniDBUDPReturnCode.MYLIST_ENTRY_ADDED:                  {                      /* Response Format                       * {int4 mylist id of new entry}                       */                      // parse the MyList ID                      string[] arrResult = receivedData.Split('\n');                      if (arrResult.Length >= 2)                      {                          int.TryParse(arrResult[1]' out int myListID);                          return new AniDBUDP_Response<AniDBMyList_ResponseAddFile>                          {                              Code = code'                              Response = new AniDBMyList_ResponseAddFile                              {                                  MyListID = myListID'                                  State = State'                                  IsWatched = IsWatched'                                  WatchedDate = WatchedDate                              }                          };                      }                      break;                  }                  case AniDBUDPReturnCode.FILE_ALREADY_IN_MYLIST:                  {                      /* Response Format                       * {int4 lid}|{int4 fid}|{int4 eid}|{int4 aid}|{int4 gid}|{int4 date}|{int2 state}|{int4 viewdate}|{str storage}|{str source}|{str other}|{int2 filestate}                       */                      //file already exists: read 'watched' status                      string[] arrResult = receivedData.Split('\n');                      if (arrResult.Length >= 2)                      {                          string[] arrStatus = arrResult[1].Split('|');                          bool hasMyListID = int.TryParse(arrStatus[0]' out int myListID);                          if (!hasMyListID) throw new UnexpectedAniDBResponseException                          {                              Message = "MyListID was not provided. Use AniDBMyList_CommandAddEpisode for generic files."'                              Response = receivedData'                              ReturnCode = code                          };                                                      AniDBFile_State state = (AniDBFile_State) int.Parse(arrStatus[6]);                            int viewdate = int.Parse(arrStatus[7]);                          bool watched = viewdate > 0;                            DateTime? watchedDate = null;                          if (watched)                          {                              DateTime utcDate = new DateTime(1970' 1' 1' 0' 0' 0' DateTimeKind.Utc);                              utcDate = utcDate.AddSeconds(viewdate);                                watchedDate = utcDate.ToLocalTime();                          }                            return new AniDBUDP_Response<AniDBMyList_ResponseAddFile>                          {                              Code = code'                              Response = new AniDBMyList_ResponseAddFile                              {                                  MyListID = myListID'                                  State = state'                                  IsWatched = watched'                                  WatchedDate = watchedDate                              }                          };                      }                      break;                  }              }
Magic Number,Shoko.Server.Providers.AniDB.MyList.Commands,AniDBMyList_RequestAddFile,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Providers\AniDB\UDP\MyList\Requests\AniDBMyList_RequestAddFile.cs,ParseResponse,The following statement contains a magic number: switch (code)              {                  case AniDBUDPReturnCode.MYLIST_ENTRY_ADDED:                  {                      /* Response Format                       * {int4 mylist id of new entry}                       */                      // parse the MyList ID                      string[] arrResult = receivedData.Split('\n');                      if (arrResult.Length >= 2)                      {                          int.TryParse(arrResult[1]' out int myListID);                          return new AniDBUDP_Response<AniDBMyList_ResponseAddFile>                          {                              Code = code'                              Response = new AniDBMyList_ResponseAddFile                              {                                  MyListID = myListID'                                  State = State'                                  IsWatched = IsWatched'                                  WatchedDate = WatchedDate                              }                          };                      }                      break;                  }                  case AniDBUDPReturnCode.FILE_ALREADY_IN_MYLIST:                  {                      /* Response Format                       * {int4 lid}|{int4 fid}|{int4 eid}|{int4 aid}|{int4 gid}|{int4 date}|{int2 state}|{int4 viewdate}|{str storage}|{str source}|{str other}|{int2 filestate}                       */                      //file already exists: read 'watched' status                      string[] arrResult = receivedData.Split('\n');                      if (arrResult.Length >= 2)                      {                          string[] arrStatus = arrResult[1].Split('|');                          bool hasMyListID = int.TryParse(arrStatus[0]' out int myListID);                          if (!hasMyListID) throw new UnexpectedAniDBResponseException                          {                              Message = "MyListID was not provided. Use AniDBMyList_CommandAddEpisode for generic files."'                              Response = receivedData'                              ReturnCode = code                          };                                                      AniDBFile_State state = (AniDBFile_State) int.Parse(arrStatus[6]);                            int viewdate = int.Parse(arrStatus[7]);                          bool watched = viewdate > 0;                            DateTime? watchedDate = null;                          if (watched)                          {                              DateTime utcDate = new DateTime(1970' 1' 1' 0' 0' 0' DateTimeKind.Utc);                              utcDate = utcDate.AddSeconds(viewdate);                                watchedDate = utcDate.ToLocalTime();                          }                            return new AniDBUDP_Response<AniDBMyList_ResponseAddFile>                          {                              Code = code'                              Response = new AniDBMyList_ResponseAddFile                              {                                  MyListID = myListID'                                  State = state'                                  IsWatched = watched'                                  WatchedDate = watchedDate                              }                          };                      }                      break;                  }              }
Magic Number,Shoko.Server.Providers.AniDB.MyList.Commands,AniDBMyList_RequestAddFile,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Providers\AniDB\UDP\MyList\Requests\AniDBMyList_RequestAddFile.cs,ParseResponse,The following statement contains a magic number: switch (code)              {                  case AniDBUDPReturnCode.MYLIST_ENTRY_ADDED:                  {                      /* Response Format                       * {int4 mylist id of new entry}                       */                      // parse the MyList ID                      string[] arrResult = receivedData.Split('\n');                      if (arrResult.Length >= 2)                      {                          int.TryParse(arrResult[1]' out int myListID);                          return new AniDBUDP_Response<AniDBMyList_ResponseAddFile>                          {                              Code = code'                              Response = new AniDBMyList_ResponseAddFile                              {                                  MyListID = myListID'                                  State = State'                                  IsWatched = IsWatched'                                  WatchedDate = WatchedDate                              }                          };                      }                      break;                  }                  case AniDBUDPReturnCode.FILE_ALREADY_IN_MYLIST:                  {                      /* Response Format                       * {int4 lid}|{int4 fid}|{int4 eid}|{int4 aid}|{int4 gid}|{int4 date}|{int2 state}|{int4 viewdate}|{str storage}|{str source}|{str other}|{int2 filestate}                       */                      //file already exists: read 'watched' status                      string[] arrResult = receivedData.Split('\n');                      if (arrResult.Length >= 2)                      {                          string[] arrStatus = arrResult[1].Split('|');                          bool hasMyListID = int.TryParse(arrStatus[0]' out int myListID);                          if (!hasMyListID) throw new UnexpectedAniDBResponseException                          {                              Message = "MyListID was not provided. Use AniDBMyList_CommandAddEpisode for generic files."'                              Response = receivedData'                              ReturnCode = code                          };                                                      AniDBFile_State state = (AniDBFile_State) int.Parse(arrStatus[6]);                            int viewdate = int.Parse(arrStatus[7]);                          bool watched = viewdate > 0;                            DateTime? watchedDate = null;                          if (watched)                          {                              DateTime utcDate = new DateTime(1970' 1' 1' 0' 0' 0' DateTimeKind.Utc);                              utcDate = utcDate.AddSeconds(viewdate);                                watchedDate = utcDate.ToLocalTime();                          }                            return new AniDBUDP_Response<AniDBMyList_ResponseAddFile>                          {                              Code = code'                              Response = new AniDBMyList_ResponseAddFile                              {                                  MyListID = myListID'                                  State = state'                                  IsWatched = watched'                                  WatchedDate = watchedDate                              }                          };                      }                      break;                  }              }
Magic Number,Shoko.Server.Providers.AniDB.MyList.Commands,AniDBMyList_RequestAddFile,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Providers\AniDB\UDP\MyList\Requests\AniDBMyList_RequestAddFile.cs,ParseResponse,The following statement contains a magic number: switch (code)              {                  case AniDBUDPReturnCode.MYLIST_ENTRY_ADDED:                  {                      /* Response Format                       * {int4 mylist id of new entry}                       */                      // parse the MyList ID                      string[] arrResult = receivedData.Split('\n');                      if (arrResult.Length >= 2)                      {                          int.TryParse(arrResult[1]' out int myListID);                          return new AniDBUDP_Response<AniDBMyList_ResponseAddFile>                          {                              Code = code'                              Response = new AniDBMyList_ResponseAddFile                              {                                  MyListID = myListID'                                  State = State'                                  IsWatched = IsWatched'                                  WatchedDate = WatchedDate                              }                          };                      }                      break;                  }                  case AniDBUDPReturnCode.FILE_ALREADY_IN_MYLIST:                  {                      /* Response Format                       * {int4 lid}|{int4 fid}|{int4 eid}|{int4 aid}|{int4 gid}|{int4 date}|{int2 state}|{int4 viewdate}|{str storage}|{str source}|{str other}|{int2 filestate}                       */                      //file already exists: read 'watched' status                      string[] arrResult = receivedData.Split('\n');                      if (arrResult.Length >= 2)                      {                          string[] arrStatus = arrResult[1].Split('|');                          bool hasMyListID = int.TryParse(arrStatus[0]' out int myListID);                          if (!hasMyListID) throw new UnexpectedAniDBResponseException                          {                              Message = "MyListID was not provided. Use AniDBMyList_CommandAddEpisode for generic files."'                              Response = receivedData'                              ReturnCode = code                          };                                                      AniDBFile_State state = (AniDBFile_State) int.Parse(arrStatus[6]);                            int viewdate = int.Parse(arrStatus[7]);                          bool watched = viewdate > 0;                            DateTime? watchedDate = null;                          if (watched)                          {                              DateTime utcDate = new DateTime(1970' 1' 1' 0' 0' 0' DateTimeKind.Utc);                              utcDate = utcDate.AddSeconds(viewdate);                                watchedDate = utcDate.ToLocalTime();                          }                            return new AniDBUDP_Response<AniDBMyList_ResponseAddFile>                          {                              Code = code'                              Response = new AniDBMyList_ResponseAddFile                              {                                  MyListID = myListID'                                  State = state'                                  IsWatched = watched'                                  WatchedDate = watchedDate                              }                          };                      }                      break;                  }              }
Magic Number,Shoko.Server.Providers.AniDB.MyList.Commands,AniDBMyList_RequestAddFile,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Providers\AniDB\UDP\MyList\Requests\AniDBMyList_RequestAddFile.cs,ParseResponse,The following statement contains a magic number: switch (code)              {                  case AniDBUDPReturnCode.MYLIST_ENTRY_ADDED:                  {                      /* Response Format                       * {int4 mylist id of new entry}                       */                      // parse the MyList ID                      string[] arrResult = receivedData.Split('\n');                      if (arrResult.Length >= 2)                      {                          int.TryParse(arrResult[1]' out int myListID);                          return new AniDBUDP_Response<AniDBMyList_ResponseAddFile>                          {                              Code = code'                              Response = new AniDBMyList_ResponseAddFile                              {                                  MyListID = myListID'                                  State = State'                                  IsWatched = IsWatched'                                  WatchedDate = WatchedDate                              }                          };                      }                      break;                  }                  case AniDBUDPReturnCode.FILE_ALREADY_IN_MYLIST:                  {                      /* Response Format                       * {int4 lid}|{int4 fid}|{int4 eid}|{int4 aid}|{int4 gid}|{int4 date}|{int2 state}|{int4 viewdate}|{str storage}|{str source}|{str other}|{int2 filestate}                       */                      //file already exists: read 'watched' status                      string[] arrResult = receivedData.Split('\n');                      if (arrResult.Length >= 2)                      {                          string[] arrStatus = arrResult[1].Split('|');                          bool hasMyListID = int.TryParse(arrStatus[0]' out int myListID);                          if (!hasMyListID) throw new UnexpectedAniDBResponseException                          {                              Message = "MyListID was not provided. Use AniDBMyList_CommandAddEpisode for generic files."'                              Response = receivedData'                              ReturnCode = code                          };                                                      AniDBFile_State state = (AniDBFile_State) int.Parse(arrStatus[6]);                            int viewdate = int.Parse(arrStatus[7]);                          bool watched = viewdate > 0;                            DateTime? watchedDate = null;                          if (watched)                          {                              DateTime utcDate = new DateTime(1970' 1' 1' 0' 0' 0' DateTimeKind.Utc);                              utcDate = utcDate.AddSeconds(viewdate);                                watchedDate = utcDate.ToLocalTime();                          }                            return new AniDBUDP_Response<AniDBMyList_ResponseAddFile>                          {                              Code = code'                              Response = new AniDBMyList_ResponseAddFile                              {                                  MyListID = myListID'                                  State = state'                                  IsWatched = watched'                                  WatchedDate = watchedDate                              }                          };                      }                      break;                  }              }
Magic Number,Shoko.Server.Providers.TvDB,TvDBApiHelper,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Providers\TvDB\TvDBApiHelper.cs,CheckAuthorizationAsync,The following statement contains a magic number: throw new TvDbServerException("Authentication Failed"' 200);
Magic Number,Shoko.Server.Providers.TvDB,TvDBApiHelper,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Providers\TvDB\TvDBApiHelper.cs,GetUpdatedSeriesListAsync,The following statement contains a magic number: DateTime lastUpdateTime = new DateTime(1970' 1' 1' 0' 0' 0' 0' DateTimeKind.Utc);
Magic Number,Shoko.Server.Providers.TvDB,TvDBApiHelper,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Providers\TvDB\TvDBApiHelper.cs,GetUpdatedSeriesListAsync,The following statement contains a magic number: var nextTime = time.AddDays(7);
Magic Number,Shoko.Server.Providers.TvDB,TvDBApiHelper,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Providers\TvDB\TvDBApiHelper.cs,GetUpdatedSeriesListAsync,The following statement contains a magic number: time = time.AddDays(7);
Magic Number,Shoko.Server.Providers.TvDB,TvDBApiHelper,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Providers\TvDB\TvDBApiHelper.cs,GetUpdatedSeriesListAsync,The following statement contains a magic number: lastUpdateTime.AddDays(7) < DateTime.Now
Magic Number,Shoko.Server.Renamer,LegacyRenamer,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Renamer\LegacyRenamer.cs,PerformActionOnFileNameADD,The following statement contains a magic number: int zeroPadding = Math.Max(epCount.ToString().Length' 2);
Magic Number,Shoko.Server.Renamer,LegacyRenamer,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Renamer\LegacyRenamer.cs,GetAction,The following statement contains a magic number: string action = line.Substring(posStart + 3' line.Length - posStart - 3);
Magic Number,Shoko.Server.Renamer,LegacyRenamer,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Renamer\LegacyRenamer.cs,GetAction,The following statement contains a magic number: string action = line.Substring(posStart + 3' line.Length - posStart - 3);
Magic Number,Shoko.Server.Repositories.Cached,CrossRef_Anime_StaffRepository,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Repositories\Cached\CrossRef_Anime_StaffRepository.cs,RegenerateDb,The following statement contains a magic number: i % 10 == 0
Magic Number,Shoko.Server.Repositories.Cached,TvDB_EpisodeRepository,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Repositories\Cached\TvDB_EpisodeRepository.cs,GetBySeriesIDAndDate,The following statement contains a magic number: return SeriesIDs.GetMultiple(seriesID).FirstOrDefault(a =>                      a.SeasonNumber > 0 && a.AirDate != null && Math.Abs((a.AirDate.Value - date).TotalDays) <= 2D);
Magic Number,Shoko.Server.Repositories.Cached,AnimeEpisode_UserRepository,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Repositories\Cached\AnimeEpisode_UserRepository.cs,PopulateIndexes,The following statement contains a magic number: UsersEpisodes = Cache.CreateIndex(a => (ulong) a.JMMUserID << 48 | (ulong) a.AnimeEpisodeID);
Magic Number,Shoko.Server.Repositories.Cached,AnimeEpisode_UserRepository,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Repositories\Cached\AnimeEpisode_UserRepository.cs,PopulateIndexes,The following statement contains a magic number: UsersSeries = Cache.CreateIndex(a => (ulong) a.JMMUserID << 48 | (ulong) a.AnimeSeriesID);
Magic Number,Shoko.Server.Repositories.Cached,AnimeEpisode_UserRepository,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Repositories\Cached\AnimeEpisode_UserRepository.cs,RegenerateDb,The following statement contains a magic number: cnt % 10 == 0
Magic Number,Shoko.Server.Repositories.Cached,AnimeEpisode_UserRepository,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Repositories\Cached\AnimeEpisode_UserRepository.cs,GetByUserIDAndEpisodeID,The following statement contains a magic number: return UsersEpisodes.GetOne((ulong) userid << 48 | (ulong) epid);
Magic Number,Shoko.Server.Repositories.Cached,AnimeEpisode_UserRepository,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Repositories\Cached\AnimeEpisode_UserRepository.cs,GetLastWatchedEpisodeForSeries,The following statement contains a magic number: return UsersSeries.GetMultiple((ulong) userid << 48 | (ulong) seriesid).Where(a => a.WatchedCount > 0)                      .OrderByDescending(a => a.WatchedDate).FirstOrDefault();
Magic Number,Shoko.Server.Repositories.Cached,AnimeEpisode_UserRepository,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Repositories\Cached\AnimeEpisode_UserRepository.cs,GetByUserIDAndSeriesID,The following statement contains a magic number: return UsersSeries.GetMultiple((ulong) userid << 48 | (ulong) seriesid);
Magic Number,Shoko.Server.Repositories.Cached,AnimeGroupRepository,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Repositories\Cached\AnimeGroupRepository.cs,RegenerateDb,The following statement contains a magic number: cnt % 10 == 0
Magic Number,Shoko.Server.Repositories.Cached,AnimeSeriesRepository,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Repositories\Cached\AnimeSeriesRepository.cs,RegenerateDb,The following statement contains a magic number: cnt % 10 == 0
Magic Number,Shoko.Server.Repositories.Cached,GroupFilterRepository,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Repositories\Cached\GroupFilterRepository.cs,CreateAllTagFilters,The following statement contains a magic number: toAdd.Batch(50)
Magic Number,Shoko.Server.Repositories,RepoFactory,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Repositories\RepoFactory.cs,Init,The following statement contains a magic number: !task.Wait(180000)
Magic Number,Shoko.Server.Repositories,AdhocRepository,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Repositories\AdhocRepository.cs,GetAllVideoQualityByAnime,The following statement contains a magic number: string vidQual = rdr[2].ToString().Trim();
Magic Number,Shoko.Server.Repositories,AdhocRepository,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Repositories\AdhocRepository.cs,GetEpisodeVideoQualityStatsByAnime,The following statement contains a magic number: string vidQual = rdr[2].ToString().Trim();
Magic Number,Shoko.Server.Repositories,AdhocRepository,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Repositories\AdhocRepository.cs,GetEpisodeVideoQualityStatsByAnime,The following statement contains a magic number: int epNumber = Convert.ToInt32(rdr[3]);
Magic Number,Shoko.Server.Repositories,AdhocRepository,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Repositories\AdhocRepository.cs,GetEpisodeVideoQualityStatsForAnime,The following statement contains a magic number: string vidQual = rdr[2].ToString().Trim();
Magic Number,Shoko.Server.Repositories,AdhocRepository,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Repositories\AdhocRepository.cs,GetEpisodeVideoQualityStatsForAnime,The following statement contains a magic number: int epNumber = int.Parse(rdr[3].ToString());
Magic Number,Shoko.Server.Repositories,AdhocRepository,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Repositories\AdhocRepository.cs,GetAudioLanguageStatsForAnime,The following statement contains a magic number: string lanName = rdr[2].ToString().Trim();
Magic Number,Shoko.Server.Repositories,AdhocRepository,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Repositories\AdhocRepository.cs,GetAudioLanguageStatsForAnime,The following statement contains a magic number: animeID == 7656
Magic Number,Shoko.Server.Repositories,AdhocRepository,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Repositories\AdhocRepository.cs,GetSubtitleLanguageStatsForAnime,The following statement contains a magic number: string lanName = cols[2].ToString().Trim();
Magic Number,Shoko.Server.Repositories,AdhocRepository,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Repositories\AdhocRepository.cs,GetAudioLanguageStatsByAnimeResults,The following statement contains a magic number: string lanName = cols[2].ToString().Trim();
Magic Number,Shoko.Server.Repositories,AdhocRepository,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Repositories\AdhocRepository.cs,GetSubtitleLanguageStatsByAnimeResults,The following statement contains a magic number: string lanName = cols[2].ToString().Trim();
Magic Number,Shoko.Server.Repositories,AniDB_AnimeRepository,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Repositories\Cached\AniDB_AnimeRepository.cs,RegenerateDb,The following statement contains a magic number: const int batchSize = 50;
Magic Number,Shoko.Server.Repositories,AniDB_AnimeRepository,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Repositories\Cached\AniDB_AnimeRepository.cs,GetDefaultImagesByAnime,The following statement contains a magic number: switch ((ImageEntityType) aniDbDefImage.ImageParentType)                      {                          case ImageEntityType.TvDB_Banner:                              parentImage = (IImageEntity) result[1];                              break;                          case ImageEntityType.TvDB_Cover:                              parentImage = (IImageEntity) result[2];                              break;                          case ImageEntityType.TvDB_FanArt:                              parentImage = (IImageEntity) result[3];                              break;                          case ImageEntityType.MovieDB_Poster:                              parentImage = (IImageEntity) result[4];                              break;                          case ImageEntityType.MovieDB_FanArt:                              parentImage = (IImageEntity) result[5];                              break;                      }
Magic Number,Shoko.Server.Repositories,AniDB_AnimeRepository,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Repositories\Cached\AniDB_AnimeRepository.cs,GetDefaultImagesByAnime,The following statement contains a magic number: switch ((ImageEntityType) aniDbDefImage.ImageParentType)                      {                          case ImageEntityType.TvDB_Banner:                              parentImage = (IImageEntity) result[1];                              break;                          case ImageEntityType.TvDB_Cover:                              parentImage = (IImageEntity) result[2];                              break;                          case ImageEntityType.TvDB_FanArt:                              parentImage = (IImageEntity) result[3];                              break;                          case ImageEntityType.MovieDB_Poster:                              parentImage = (IImageEntity) result[4];                              break;                          case ImageEntityType.MovieDB_FanArt:                              parentImage = (IImageEntity) result[5];                              break;                      }
Magic Number,Shoko.Server.Repositories,AniDB_AnimeRepository,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Repositories\Cached\AniDB_AnimeRepository.cs,GetDefaultImagesByAnime,The following statement contains a magic number: switch ((ImageEntityType) aniDbDefImage.ImageParentType)                      {                          case ImageEntityType.TvDB_Banner:                              parentImage = (IImageEntity) result[1];                              break;                          case ImageEntityType.TvDB_Cover:                              parentImage = (IImageEntity) result[2];                              break;                          case ImageEntityType.TvDB_FanArt:                              parentImage = (IImageEntity) result[3];                              break;                          case ImageEntityType.MovieDB_Poster:                              parentImage = (IImageEntity) result[4];                              break;                          case ImageEntityType.MovieDB_FanArt:                              parentImage = (IImageEntity) result[5];                              break;                      }
Magic Number,Shoko.Server.Repositories,AniDB_AnimeRepository,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Repositories\Cached\AniDB_AnimeRepository.cs,GetDefaultImagesByAnime,The following statement contains a magic number: switch ((ImageEntityType) aniDbDefImage.ImageParentType)                      {                          case ImageEntityType.TvDB_Banner:                              parentImage = (IImageEntity) result[1];                              break;                          case ImageEntityType.TvDB_Cover:                              parentImage = (IImageEntity) result[2];                              break;                          case ImageEntityType.TvDB_FanArt:                              parentImage = (IImageEntity) result[3];                              break;                          case ImageEntityType.MovieDB_Poster:                              parentImage = (IImageEntity) result[4];                              break;                          case ImageEntityType.MovieDB_FanArt:                              parentImage = (IImageEntity) result[5];                              break;                      }
Magic Number,Shoko.Server.Repositories.Direct,CommandRequestRepository,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Repositories\Direct\CommandRequestRepository.cs,GetQueueIndex,The following statement contains a magic number: return 2;
Magic Number,Shoko.Server.Repositories.Direct,AniDB_CharacterRepository,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Repositories\Direct\AniDB_CharacterRepository.cs,GetCharacterAndSeiyuuByAnime,The following statement contains a magic number: var animeChars = session.CreateSQLQuery(@"                  SELECT animeChr.AnimeID' {chr.*}' {seiyuu.*}' animeChr.CharType                      FROM AniDB_Anime_Character AS animeChr                          INNER JOIN AniDB_Character AS chr                              ON chr.CharID = animeChr.CharID                          LEFT OUTER JOIN (                              SELECT ac.AnimeID' ac.CharID' MIN(cs.SeiyuuID) AS SeiyuuID                                  FROM AniDB_Anime_Character ac                                      INNER JOIN AniDB_Character_Seiyuu cs                                          ON cs.CharID = ac.CharID                                  GROUP BY ac.AnimeID' ac.CharID                              ) AS chrSeiyuu                              ON chrSeiyuu.CharID = chr.CharID                                  AND chrSeiyuu.AnimeID = animeChr.AnimeID                          LEFT OUTER JOIN AniDB_Seiyuu AS seiyuu                              ON seiyuu.SeiyuuID = chrSeiyuu.SeiyuuID                      WHERE animeChr.AnimeID IN (:animeIds)")                  .AddScalar("AnimeID"' NHibernateUtil.Int32)                  .AddEntity("chr"' typeof(AniDB_Character))                  .AddEntity("seiyuu"' typeof(AniDB_Seiyuu))                  .AddScalar("CharType"' NHibernateUtil.String)                  .SetParameterList("animeIds"' animeIds)                  .List<object[]>()                  .Select(r => new AnimeCharacterAndSeiyuu((int) r[0]' (AniDB_Character) r[1]' (AniDB_Seiyuu) r[2]'                      (string) r[3]))                  .ToLookup(ac => ac.AnimeID);
Magic Number,Shoko.Server.Repositories.Direct,AniDB_CharacterRepository,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Repositories\Direct\AniDB_CharacterRepository.cs,GetCharacterAndSeiyuuByAnime,The following statement contains a magic number: var animeChars = session.CreateSQLQuery(@"                  SELECT animeChr.AnimeID' {chr.*}' {seiyuu.*}' animeChr.CharType                      FROM AniDB_Anime_Character AS animeChr                          INNER JOIN AniDB_Character AS chr                              ON chr.CharID = animeChr.CharID                          LEFT OUTER JOIN (                              SELECT ac.AnimeID' ac.CharID' MIN(cs.SeiyuuID) AS SeiyuuID                                  FROM AniDB_Anime_Character ac                                      INNER JOIN AniDB_Character_Seiyuu cs                                          ON cs.CharID = ac.CharID                                  GROUP BY ac.AnimeID' ac.CharID                              ) AS chrSeiyuu                              ON chrSeiyuu.CharID = chr.CharID                                  AND chrSeiyuu.AnimeID = animeChr.AnimeID                          LEFT OUTER JOIN AniDB_Seiyuu AS seiyuu                              ON seiyuu.SeiyuuID = chrSeiyuu.SeiyuuID                      WHERE animeChr.AnimeID IN (:animeIds)")                  .AddScalar("AnimeID"' NHibernateUtil.Int32)                  .AddEntity("chr"' typeof(AniDB_Character))                  .AddEntity("seiyuu"' typeof(AniDB_Seiyuu))                  .AddScalar("CharType"' NHibernateUtil.String)                  .SetParameterList("animeIds"' animeIds)                  .List<object[]>()                  .Select(r => new AnimeCharacterAndSeiyuu((int) r[0]' (AniDB_Character) r[1]' (AniDB_Seiyuu) r[2]'                      (string) r[3]))                  .ToLookup(ac => ac.AnimeID);
Magic Number,Shoko.Server.Settings.Migration,ServerSettings_Legacy,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Settings\Migration\ServerSettings_Legacy.cs,LoadSettingsFromEnv,The following statement contains a magic number: name = name.Substring(6);
Magic Number,Shoko.Server.FileHelper.Subtitles,TextSubtitles,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\FileHelper\Subtitles\TextSubtitles.cs,GetStreams,The following statement contains a magic number: Stream s = new Stream              {                  Format = format'                  StreamType = 3'                  File = file.FullName'                  LanguageCode = SubtitleHelper.Iso639_1_TO_Iso639_3[language]'                  Language = SubtitleHelper.Iso639_1_TO_Languages[language]              };
Magic Number,Shoko.Server.FileHelper.Subtitles,VobSubSubtitles,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\FileHelper\Subtitles\VobSubSubtitles.cs,GetStreams,The following statement contains a magic number: Stream s = new Stream                          {                              Format = "vobsub"'                              StreamType = 3'                              SubIndex = x'                              File = basename + ".idx"'                              LanguageCode = SubtitleHelper.Iso639_1_TO_Iso639_3[language]'                              Language = SubtitleHelper.Iso639_1_TO_Languages[language]                          };
Magic Number,Shoko.Server.PlexAndKodi,CommonImplementation,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\PlexAndKodi\CommonImplementation.cs,Search,The following statement contains a magic number: lim = 100;
Magic Number,Shoko.Server.PlexAndKodi,CommonImplementation,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\PlexAndKodi\CommonImplementation.cs,VoteAnime,The following statement contains a magic number: iVoteValue = (int) (vvalue * 100);
Magic Number,Shoko.Server.PlexAndKodi,CommonImplementation,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\PlexAndKodi\CommonImplementation.cs,VoteAnime,The following statement contains a magic number: iVoteValue = (int) (vvalue * 100);
Magic Number,Shoko.Server.PlexAndKodi,CommonImplementation,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\PlexAndKodi\CommonImplementation.cs,TraktScrobble,The following statement contains a magic number: progressTrakt = progressTrakt / 10;
Magic Number,Shoko.Server.PlexAndKodi,Extensions,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\PlexAndKodi\Extensions.cs,ToUnixTime,The following statement contains a magic number: return ((long) v.Subtract(new DateTime(1970' 1' 1)).TotalSeconds).ToString(CultureInfo.InvariantCulture);
Magic Number,Shoko.Server.PlexAndKodi,Helper,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\PlexAndKodi\Helper.cs,CreateRelationsMap,The following statement contains a magic number: relations.Add("DEFAULT"' 0.666667D);
Magic Number,Shoko.Server.PlexAndKodi,Helper,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\PlexAndKodi\Helper.cs,AddLinksToAnimeEpisodeVideo,The following statement contains a magic number: p.Streams.Where(a => a.File != null && a.StreamType == 3)
Magic Number,Shoko.Server.PlexAndKodi,Helper,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\PlexAndKodi\Helper.cs,GenerateVideoFromAnimeEpisode,The following statement contains a magic number: l.UserRating = (int) (vote.VoteValue / 100D);
Magic Number,Shoko.Server.PlexAndKodi,Helper,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\PlexAndKodi\Helper.cs,FillSerie,The following statement contains a magic number: p.Rating = (int) Math.Round((anime.Rating / 100D)' 1);
Magic Number,Shoko.Server.PlexAndKodi,Helper,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\PlexAndKodi\Helper.cs,FillSerie,The following statement contains a magic number: p.UserRating = (int) (vote.VoteValue / 100D);
Magic Number,Shoko.Server.PlexAndKodi.Plex,PlexProvider,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\PlexAndKodi\Plex\PlexProvider.cs,ToHex,The following statement contains a magic number: StringBuilder hex = new StringBuilder(ba.Length * 2);
Magic Number,Shoko.Server.PlexAndKodi.Plex,PlexProvider,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\PlexAndKodi\Plex\PlexProvider.cs,FromHex,The following statement contains a magic number: byte[] raw = new byte[hex.Length / 2];
Magic Number,Shoko.Server.PlexAndKodi.Plex,PlexProvider,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\PlexAndKodi\Plex\PlexProvider.cs,FromHex,The following statement contains a magic number: raw[i] = Convert.ToByte(hex.Substring(i * 2' 2)' 16);
Magic Number,Shoko.Server.PlexAndKodi.Plex,PlexProvider,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\PlexAndKodi\Plex\PlexProvider.cs,FromHex,The following statement contains a magic number: raw[i] = Convert.ToByte(hex.Substring(i * 2' 2)' 16);
Magic Number,Shoko.Server.PlexAndKodi.Plex,PlexProvider,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\PlexAndKodi\Plex\PlexProvider.cs,FromHex,The following statement contains a magic number: raw[i] = Convert.ToByte(hex.Substring(i * 2' 2)' 16);
Magic Number,Shoko.Server.Tasks,AutoAnimeGroupCalculator,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Tasks\AutoAnimeGroupCalculator.cs,Create,The following statement contains a magic number: var relationshipMap = session.CreateSQLQuery(@"                  SELECT    fromAnime.AnimeID AS fromAnimeId                          ' toAnime.AnimeID AS toAnimeId                          ' fromAnime.AnimeType AS fromAnimeType                          ' toAnime.AnimeType AS toAnimeType                          ' fromAnime.MainTitle AS fromMainTitle                          ' toAnime.MainTitle AS toMainTitle                          ' fromAnime.AirDate AS fromAirDate                          ' toAnime.AirDate AS toAirDate                          ' rel.RelationType AS relationType                      FROM AniDB_Anime_Relation rel                          INNER JOIN AniDB_Anime fromAnime                              ON fromAnime.AnimeID = rel.AnimeID                          INNER JOIN AniDB_Anime toAnime                              ON toAnime.AnimeID = rel.RelatedAnimeID")                  .AddScalar("fromAnimeId"' NHibernateUtil.Int32)                  .AddScalar("toAnimeId"' NHibernateUtil.Int32)                  .AddScalar("fromAnimeType"' NHibernateUtil.Int32)                  .AddScalar("toAnimeType"' NHibernateUtil.Int32)                  .AddScalar("fromMainTitle"' NHibernateUtil.String)                  .AddScalar("toMainTitle"' NHibernateUtil.String)                  .AddScalar("fromAirDate"' NHibernateUtil.DateTime)                  .AddScalar("toAirDate"' NHibernateUtil.DateTime)                  .AddScalar("relationType"' NHibernateUtil.String)                  .List<object[]>()                  .Select(r =>                  {                      var relation = new AnimeRelation                      {                          FromId = (int) r[0]'                          ToId = (int) r[1]'                          FromType = (AnimeType) r[2]'                          ToType = (AnimeType) r[3]'                          FromMainTitle = (string) r[4]'                          ToMainTitle = (string) r[5]'                          FromAirDate = (DateTime?) r[6]'                          ToAirDate = (DateTime?) r[7]                      };                        switch (((string) r[8]).ToLowerInvariant())                      {                          case "full story":                              relation.RelationType = AnimeRelationType.FullStory;                              break;                          case "summary":                              relation.RelationType = AnimeRelationType.Summary;                              break;                          case "parent story":                              relation.RelationType = AnimeRelationType.ParentStory;                              break;                          case "side story":                              relation.RelationType = AnimeRelationType.SideStory;                              break;                          case "prequel":                              relation.RelationType = AnimeRelationType.Prequel;                              break;                          case "sequel":                              relation.RelationType = AnimeRelationType.Sequel;                              break;                          case "alternative setting":                              relation.RelationType = AnimeRelationType.AlternateSetting;                              break;                          case "alternative version":                              relation.RelationType = AnimeRelationType.AlternateVersion;                              break;                          case "same setting":                              relation.RelationType = AnimeRelationType.SameSetting;                              break;                          case "character":                              relation.RelationType = AnimeRelationType.Character;                              break;                          default:                              relation.RelationType = AnimeRelationType.Other;                              break;                      }                        return relation;                  })                  .ToLookup(k => k.FromId);
Magic Number,Shoko.Server.Tasks,AutoAnimeGroupCalculator,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Tasks\AutoAnimeGroupCalculator.cs,Create,The following statement contains a magic number: var relationshipMap = session.CreateSQLQuery(@"                  SELECT    fromAnime.AnimeID AS fromAnimeId                          ' toAnime.AnimeID AS toAnimeId                          ' fromAnime.AnimeType AS fromAnimeType                          ' toAnime.AnimeType AS toAnimeType                          ' fromAnime.MainTitle AS fromMainTitle                          ' toAnime.MainTitle AS toMainTitle                          ' fromAnime.AirDate AS fromAirDate                          ' toAnime.AirDate AS toAirDate                          ' rel.RelationType AS relationType                      FROM AniDB_Anime_Relation rel                          INNER JOIN AniDB_Anime fromAnime                              ON fromAnime.AnimeID = rel.AnimeID                          INNER JOIN AniDB_Anime toAnime                              ON toAnime.AnimeID = rel.RelatedAnimeID")                  .AddScalar("fromAnimeId"' NHibernateUtil.Int32)                  .AddScalar("toAnimeId"' NHibernateUtil.Int32)                  .AddScalar("fromAnimeType"' NHibernateUtil.Int32)                  .AddScalar("toAnimeType"' NHibernateUtil.Int32)                  .AddScalar("fromMainTitle"' NHibernateUtil.String)                  .AddScalar("toMainTitle"' NHibernateUtil.String)                  .AddScalar("fromAirDate"' NHibernateUtil.DateTime)                  .AddScalar("toAirDate"' NHibernateUtil.DateTime)                  .AddScalar("relationType"' NHibernateUtil.String)                  .List<object[]>()                  .Select(r =>                  {                      var relation = new AnimeRelation                      {                          FromId = (int) r[0]'                          ToId = (int) r[1]'                          FromType = (AnimeType) r[2]'                          ToType = (AnimeType) r[3]'                          FromMainTitle = (string) r[4]'                          ToMainTitle = (string) r[5]'                          FromAirDate = (DateTime?) r[6]'                          ToAirDate = (DateTime?) r[7]                      };                        switch (((string) r[8]).ToLowerInvariant())                      {                          case "full story":                              relation.RelationType = AnimeRelationType.FullStory;                              break;                          case "summary":                              relation.RelationType = AnimeRelationType.Summary;                              break;                          case "parent story":                              relation.RelationType = AnimeRelationType.ParentStory;                              break;                          case "side story":                              relation.RelationType = AnimeRelationType.SideStory;                              break;                          case "prequel":                              relation.RelationType = AnimeRelationType.Prequel;                              break;                          case "sequel":                              relation.RelationType = AnimeRelationType.Sequel;                              break;                          case "alternative setting":                              relation.RelationType = AnimeRelationType.AlternateSetting;                              break;                          case "alternative version":                              relation.RelationType = AnimeRelationType.AlternateVersion;                              break;                          case "same setting":                              relation.RelationType = AnimeRelationType.SameSetting;                              break;                          case "character":                              relation.RelationType = AnimeRelationType.Character;                              break;                          default:                              relation.RelationType = AnimeRelationType.Other;                              break;                      }                        return relation;                  })                  .ToLookup(k => k.FromId);
Magic Number,Shoko.Server.Tasks,AutoAnimeGroupCalculator,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Tasks\AutoAnimeGroupCalculator.cs,Create,The following statement contains a magic number: var relationshipMap = session.CreateSQLQuery(@"                  SELECT    fromAnime.AnimeID AS fromAnimeId                          ' toAnime.AnimeID AS toAnimeId                          ' fromAnime.AnimeType AS fromAnimeType                          ' toAnime.AnimeType AS toAnimeType                          ' fromAnime.MainTitle AS fromMainTitle                          ' toAnime.MainTitle AS toMainTitle                          ' fromAnime.AirDate AS fromAirDate                          ' toAnime.AirDate AS toAirDate                          ' rel.RelationType AS relationType                      FROM AniDB_Anime_Relation rel                          INNER JOIN AniDB_Anime fromAnime                              ON fromAnime.AnimeID = rel.AnimeID                          INNER JOIN AniDB_Anime toAnime                              ON toAnime.AnimeID = rel.RelatedAnimeID")                  .AddScalar("fromAnimeId"' NHibernateUtil.Int32)                  .AddScalar("toAnimeId"' NHibernateUtil.Int32)                  .AddScalar("fromAnimeType"' NHibernateUtil.Int32)                  .AddScalar("toAnimeType"' NHibernateUtil.Int32)                  .AddScalar("fromMainTitle"' NHibernateUtil.String)                  .AddScalar("toMainTitle"' NHibernateUtil.String)                  .AddScalar("fromAirDate"' NHibernateUtil.DateTime)                  .AddScalar("toAirDate"' NHibernateUtil.DateTime)                  .AddScalar("relationType"' NHibernateUtil.String)                  .List<object[]>()                  .Select(r =>                  {                      var relation = new AnimeRelation                      {                          FromId = (int) r[0]'                          ToId = (int) r[1]'                          FromType = (AnimeType) r[2]'                          ToType = (AnimeType) r[3]'                          FromMainTitle = (string) r[4]'                          ToMainTitle = (string) r[5]'                          FromAirDate = (DateTime?) r[6]'                          ToAirDate = (DateTime?) r[7]                      };                        switch (((string) r[8]).ToLowerInvariant())                      {                          case "full story":                              relation.RelationType = AnimeRelationType.FullStory;                              break;                          case "summary":                              relation.RelationType = AnimeRelationType.Summary;                              break;                          case "parent story":                              relation.RelationType = AnimeRelationType.ParentStory;                              break;                          case "side story":                              relation.RelationType = AnimeRelationType.SideStory;                              break;                          case "prequel":                              relation.RelationType = AnimeRelationType.Prequel;                              break;                          case "sequel":                              relation.RelationType = AnimeRelationType.Sequel;                              break;                          case "alternative setting":                              relation.RelationType = AnimeRelationType.AlternateSetting;                              break;                          case "alternative version":                              relation.RelationType = AnimeRelationType.AlternateVersion;                              break;                          case "same setting":                              relation.RelationType = AnimeRelationType.SameSetting;                              break;                          case "character":                              relation.RelationType = AnimeRelationType.Character;                              break;                          default:                              relation.RelationType = AnimeRelationType.Other;                              break;                      }                        return relation;                  })                  .ToLookup(k => k.FromId);
Magic Number,Shoko.Server.Tasks,AutoAnimeGroupCalculator,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Tasks\AutoAnimeGroupCalculator.cs,Create,The following statement contains a magic number: var relationshipMap = session.CreateSQLQuery(@"                  SELECT    fromAnime.AnimeID AS fromAnimeId                          ' toAnime.AnimeID AS toAnimeId                          ' fromAnime.AnimeType AS fromAnimeType                          ' toAnime.AnimeType AS toAnimeType                          ' fromAnime.MainTitle AS fromMainTitle                          ' toAnime.MainTitle AS toMainTitle                          ' fromAnime.AirDate AS fromAirDate                          ' toAnime.AirDate AS toAirDate                          ' rel.RelationType AS relationType                      FROM AniDB_Anime_Relation rel                          INNER JOIN AniDB_Anime fromAnime                              ON fromAnime.AnimeID = rel.AnimeID                          INNER JOIN AniDB_Anime toAnime                              ON toAnime.AnimeID = rel.RelatedAnimeID")                  .AddScalar("fromAnimeId"' NHibernateUtil.Int32)                  .AddScalar("toAnimeId"' NHibernateUtil.Int32)                  .AddScalar("fromAnimeType"' NHibernateUtil.Int32)                  .AddScalar("toAnimeType"' NHibernateUtil.Int32)                  .AddScalar("fromMainTitle"' NHibernateUtil.String)                  .AddScalar("toMainTitle"' NHibernateUtil.String)                  .AddScalar("fromAirDate"' NHibernateUtil.DateTime)                  .AddScalar("toAirDate"' NHibernateUtil.DateTime)                  .AddScalar("relationType"' NHibernateUtil.String)                  .List<object[]>()                  .Select(r =>                  {                      var relation = new AnimeRelation                      {                          FromId = (int) r[0]'                          ToId = (int) r[1]'                          FromType = (AnimeType) r[2]'                          ToType = (AnimeType) r[3]'                          FromMainTitle = (string) r[4]'                          ToMainTitle = (string) r[5]'                          FromAirDate = (DateTime?) r[6]'                          ToAirDate = (DateTime?) r[7]                      };                        switch (((string) r[8]).ToLowerInvariant())                      {                          case "full story":                              relation.RelationType = AnimeRelationType.FullStory;                              break;                          case "summary":                              relation.RelationType = AnimeRelationType.Summary;                              break;                          case "parent story":                              relation.RelationType = AnimeRelationType.ParentStory;                              break;                          case "side story":                              relation.RelationType = AnimeRelationType.SideStory;                              break;                          case "prequel":                              relation.RelationType = AnimeRelationType.Prequel;                              break;                          case "sequel":                              relation.RelationType = AnimeRelationType.Sequel;                              break;                          case "alternative setting":                              relation.RelationType = AnimeRelationType.AlternateSetting;                              break;                          case "alternative version":                              relation.RelationType = AnimeRelationType.AlternateVersion;                              break;                          case "same setting":                              relation.RelationType = AnimeRelationType.SameSetting;                              break;                          case "character":                              relation.RelationType = AnimeRelationType.Character;                              break;                          default:                              relation.RelationType = AnimeRelationType.Other;                              break;                      }                        return relation;                  })                  .ToLookup(k => k.FromId);
Magic Number,Shoko.Server.Tasks,AutoAnimeGroupCalculator,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Tasks\AutoAnimeGroupCalculator.cs,Create,The following statement contains a magic number: var relationshipMap = session.CreateSQLQuery(@"                  SELECT    fromAnime.AnimeID AS fromAnimeId                          ' toAnime.AnimeID AS toAnimeId                          ' fromAnime.AnimeType AS fromAnimeType                          ' toAnime.AnimeType AS toAnimeType                          ' fromAnime.MainTitle AS fromMainTitle                          ' toAnime.MainTitle AS toMainTitle                          ' fromAnime.AirDate AS fromAirDate                          ' toAnime.AirDate AS toAirDate                          ' rel.RelationType AS relationType                      FROM AniDB_Anime_Relation rel                          INNER JOIN AniDB_Anime fromAnime                              ON fromAnime.AnimeID = rel.AnimeID                          INNER JOIN AniDB_Anime toAnime                              ON toAnime.AnimeID = rel.RelatedAnimeID")                  .AddScalar("fromAnimeId"' NHibernateUtil.Int32)                  .AddScalar("toAnimeId"' NHibernateUtil.Int32)                  .AddScalar("fromAnimeType"' NHibernateUtil.Int32)                  .AddScalar("toAnimeType"' NHibernateUtil.Int32)                  .AddScalar("fromMainTitle"' NHibernateUtil.String)                  .AddScalar("toMainTitle"' NHibernateUtil.String)                  .AddScalar("fromAirDate"' NHibernateUtil.DateTime)                  .AddScalar("toAirDate"' NHibernateUtil.DateTime)                  .AddScalar("relationType"' NHibernateUtil.String)                  .List<object[]>()                  .Select(r =>                  {                      var relation = new AnimeRelation                      {                          FromId = (int) r[0]'                          ToId = (int) r[1]'                          FromType = (AnimeType) r[2]'                          ToType = (AnimeType) r[3]'                          FromMainTitle = (string) r[4]'                          ToMainTitle = (string) r[5]'                          FromAirDate = (DateTime?) r[6]'                          ToAirDate = (DateTime?) r[7]                      };                        switch (((string) r[8]).ToLowerInvariant())                      {                          case "full story":                              relation.RelationType = AnimeRelationType.FullStory;                              break;                          case "summary":                              relation.RelationType = AnimeRelationType.Summary;                              break;                          case "parent story":                              relation.RelationType = AnimeRelationType.ParentStory;                              break;                          case "side story":                              relation.RelationType = AnimeRelationType.SideStory;                              break;                          case "prequel":                              relation.RelationType = AnimeRelationType.Prequel;                              break;                          case "sequel":                              relation.RelationType = AnimeRelationType.Sequel;                              break;                          case "alternative setting":                              relation.RelationType = AnimeRelationType.AlternateSetting;                              break;                          case "alternative version":                              relation.RelationType = AnimeRelationType.AlternateVersion;                              break;                          case "same setting":                              relation.RelationType = AnimeRelationType.SameSetting;                              break;                          case "character":                              relation.RelationType = AnimeRelationType.Character;                              break;                          default:                              relation.RelationType = AnimeRelationType.Other;                              break;                      }                        return relation;                  })                  .ToLookup(k => k.FromId);
Magic Number,Shoko.Server.Tasks,AutoAnimeGroupCalculator,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Tasks\AutoAnimeGroupCalculator.cs,Create,The following statement contains a magic number: var relationshipMap = session.CreateSQLQuery(@"                  SELECT    fromAnime.AnimeID AS fromAnimeId                          ' toAnime.AnimeID AS toAnimeId                          ' fromAnime.AnimeType AS fromAnimeType                          ' toAnime.AnimeType AS toAnimeType                          ' fromAnime.MainTitle AS fromMainTitle                          ' toAnime.MainTitle AS toMainTitle                          ' fromAnime.AirDate AS fromAirDate                          ' toAnime.AirDate AS toAirDate                          ' rel.RelationType AS relationType                      FROM AniDB_Anime_Relation rel                          INNER JOIN AniDB_Anime fromAnime                              ON fromAnime.AnimeID = rel.AnimeID                          INNER JOIN AniDB_Anime toAnime                              ON toAnime.AnimeID = rel.RelatedAnimeID")                  .AddScalar("fromAnimeId"' NHibernateUtil.Int32)                  .AddScalar("toAnimeId"' NHibernateUtil.Int32)                  .AddScalar("fromAnimeType"' NHibernateUtil.Int32)                  .AddScalar("toAnimeType"' NHibernateUtil.Int32)                  .AddScalar("fromMainTitle"' NHibernateUtil.String)                  .AddScalar("toMainTitle"' NHibernateUtil.String)                  .AddScalar("fromAirDate"' NHibernateUtil.DateTime)                  .AddScalar("toAirDate"' NHibernateUtil.DateTime)                  .AddScalar("relationType"' NHibernateUtil.String)                  .List<object[]>()                  .Select(r =>                  {                      var relation = new AnimeRelation                      {                          FromId = (int) r[0]'                          ToId = (int) r[1]'                          FromType = (AnimeType) r[2]'                          ToType = (AnimeType) r[3]'                          FromMainTitle = (string) r[4]'                          ToMainTitle = (string) r[5]'                          FromAirDate = (DateTime?) r[6]'                          ToAirDate = (DateTime?) r[7]                      };                        switch (((string) r[8]).ToLowerInvariant())                      {                          case "full story":                              relation.RelationType = AnimeRelationType.FullStory;                              break;                          case "summary":                              relation.RelationType = AnimeRelationType.Summary;                              break;                          case "parent story":                              relation.RelationType = AnimeRelationType.ParentStory;                              break;                          case "side story":                              relation.RelationType = AnimeRelationType.SideStory;                              break;                          case "prequel":                              relation.RelationType = AnimeRelationType.Prequel;                              break;                          case "sequel":                              relation.RelationType = AnimeRelationType.Sequel;                              break;                          case "alternative setting":                              relation.RelationType = AnimeRelationType.AlternateSetting;                              break;                          case "alternative version":                              relation.RelationType = AnimeRelationType.AlternateVersion;                              break;                          case "same setting":                              relation.RelationType = AnimeRelationType.SameSetting;                              break;                          case "character":                              relation.RelationType = AnimeRelationType.Character;                              break;                          default:                              relation.RelationType = AnimeRelationType.Other;                              break;                      }                        return relation;                  })                  .ToLookup(k => k.FromId);
Magic Number,Shoko.Server.Tasks,AutoAnimeGroupCalculator,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Tasks\AutoAnimeGroupCalculator.cs,Create,The following statement contains a magic number: var relationshipMap = session.CreateSQLQuery(@"                  SELECT    fromAnime.AnimeID AS fromAnimeId                          ' toAnime.AnimeID AS toAnimeId                          ' fromAnime.AnimeType AS fromAnimeType                          ' toAnime.AnimeType AS toAnimeType                          ' fromAnime.MainTitle AS fromMainTitle                          ' toAnime.MainTitle AS toMainTitle                          ' fromAnime.AirDate AS fromAirDate                          ' toAnime.AirDate AS toAirDate                          ' rel.RelationType AS relationType                      FROM AniDB_Anime_Relation rel                          INNER JOIN AniDB_Anime fromAnime                              ON fromAnime.AnimeID = rel.AnimeID                          INNER JOIN AniDB_Anime toAnime                              ON toAnime.AnimeID = rel.RelatedAnimeID")                  .AddScalar("fromAnimeId"' NHibernateUtil.Int32)                  .AddScalar("toAnimeId"' NHibernateUtil.Int32)                  .AddScalar("fromAnimeType"' NHibernateUtil.Int32)                  .AddScalar("toAnimeType"' NHibernateUtil.Int32)                  .AddScalar("fromMainTitle"' NHibernateUtil.String)                  .AddScalar("toMainTitle"' NHibernateUtil.String)                  .AddScalar("fromAirDate"' NHibernateUtil.DateTime)                  .AddScalar("toAirDate"' NHibernateUtil.DateTime)                  .AddScalar("relationType"' NHibernateUtil.String)                  .List<object[]>()                  .Select(r =>                  {                      var relation = new AnimeRelation                      {                          FromId = (int) r[0]'                          ToId = (int) r[1]'                          FromType = (AnimeType) r[2]'                          ToType = (AnimeType) r[3]'                          FromMainTitle = (string) r[4]'                          ToMainTitle = (string) r[5]'                          FromAirDate = (DateTime?) r[6]'                          ToAirDate = (DateTime?) r[7]                      };                        switch (((string) r[8]).ToLowerInvariant())                      {                          case "full story":                              relation.RelationType = AnimeRelationType.FullStory;                              break;                          case "summary":                              relation.RelationType = AnimeRelationType.Summary;                              break;                          case "parent story":                              relation.RelationType = AnimeRelationType.ParentStory;                              break;                          case "side story":                              relation.RelationType = AnimeRelationType.SideStory;                              break;                          case "prequel":                              relation.RelationType = AnimeRelationType.Prequel;                              break;                          case "sequel":                              relation.RelationType = AnimeRelationType.Sequel;                              break;                          case "alternative setting":                              relation.RelationType = AnimeRelationType.AlternateSetting;                              break;                          case "alternative version":                              relation.RelationType = AnimeRelationType.AlternateVersion;                              break;                          case "same setting":                              relation.RelationType = AnimeRelationType.SameSetting;                              break;                          case "character":                              relation.RelationType = AnimeRelationType.Character;                              break;                          default:                              relation.RelationType = AnimeRelationType.Other;                              break;                      }                        return relation;                  })                  .ToLookup(k => k.FromId);
Magic Number,Shoko.Server.Tasks,AutoAnimeGroupCalculator,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Tasks\AutoAnimeGroupCalculator.cs,ShouldConsiderAnimeRelation,The following statement contains a magic number: return (matches >= minTokenCount / 2) || matchLen >= Math.Max(1' (int) (shortestTitleLen * 0.4));
Magic Number,Shoko.Server.Tasks,AutoAnimeGroupCalculator,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Tasks\AutoAnimeGroupCalculator.cs,ShouldConsiderAnimeRelation,The following statement contains a magic number: return (matches >= minTokenCount / 2) || matchLen >= Math.Max(1' (int) (shortestTitleLen * 0.4));
Magic Number,Shoko.Server.Tasks,RelationEdge,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Tasks\AutoAnimeGroupCalculator.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (int) RelationType1;
Magic Number,Shoko.Server.Tasks,RelationEdge,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Tasks\AutoAnimeGroupCalculator.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ AnimeId2;
Magic Number,Shoko.Server.Tasks,RelationEdge,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Tasks\AutoAnimeGroupCalculator.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ (int) RelationType2;
Magic Number,Shoko.Server.Tasks,AnimeGroupCreator,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Tasks\AnimeGroupCreator.cs,UpdateAnimeSeriesContractsAndSave,The following statement contains a magic number: Parallel.ForEach(series.Batch(DefaultBatchSize)' new ParallelOptions {MaxDegreeOfParallelism = 4}'                  localInit: () => DatabaseFactory.SessionFactory.OpenStatelessSession()'                  body: (seriesBatch' state' localSession) =>                  {                      SVR_AnimeSeries.BatchUpdateContracts(localSession.Wrap()' seriesBatch);                      return localSession;                  }'                  localFinally: localSession => { localSession.Dispose(); });
Magic Number,Shoko.Server.Tasks,AnimeGroupCreator,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Tasks\AnimeGroupCreator.cs,UpdateAnimeGroupsAndTheirContracts,The following statement contains a magic number: Parallel.ForEach(groups.Batch(DefaultBatchSize)' new ParallelOptions {MaxDegreeOfParallelism = 4}'                  localInit: () => DatabaseFactory.SessionFactory.OpenStatelessSession()'                  body: (groupBatch' state' localSession) =>                  {                      var createdGroupUsers = new List<SVR_AnimeGroup_User>(groupBatch.Length);                        // We shouldn't need to keep track of updates to AnimeGroup_Users in the below call' because they should have all been deleted'                      // therefore they should all be new                      SVR_AnimeGroup.BatchUpdateStats(groupBatch' watchedStats: true' missingEpsStats: true'                          createdGroupUsers: createdGroupUsers);                      allCreatedGroupUsers.Add(createdGroupUsers);                      SVR_AnimeGroup.BatchUpdateContracts(localSession.Wrap()' groupBatch' updateStats: true);                        return localSession;                  }'                  localFinally: localSession => { localSession.Dispose(); });
Magic Number,Shoko.Server.Tasks,ContractExtractor,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Tasks\ContractExtractor.cs,ExtractContracts,The following statement contains a magic number: Parallel.ForEach(records' new ParallelOptions {MaxDegreeOfParallelism = 2}' record =>              {                  string zipEntryName = record[0].ToString();                  int contractLen = (int) record[1];                  byte[] contractBinary = (byte[]) record[2];                    if (contractLen > 0 && contractBinary != null)                  {                      TContract contract = CompressionHelper.DeserializeObject<TContract>(contractBinary' contractLen);                        lock (zipLock)                      {                          ZipArchiveEntry archiveEntry = zip.CreateEntry(zipEntryName' CompressionLevel.Optimal);                            using (StreamWriter writer = new StreamWriter(archiveEntry.Open()' Encoding.UTF8))                          {                              jsonSerializer.Serialize(writer' contract);                          }                      }                  }              });
Magic Number,Shoko.Server.Tasks,ContractExtractor,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Tasks\ContractExtractor.cs,ExtractContracts,The following statement contains a magic number: Parallel.ForEach(records' new ParallelOptions {MaxDegreeOfParallelism = 2}' record =>              {                  string zipEntryName = record[0].ToString();                  int contractLen = (int) record[1];                  byte[] contractBinary = (byte[]) record[2];                    if (contractLen > 0 && contractBinary != null)                  {                      TContract contract = CompressionHelper.DeserializeObject<TContract>(contractBinary' contractLen);                        lock (zipLock)                      {                          ZipArchiveEntry archiveEntry = zip.CreateEntry(zipEntryName' CompressionLevel.Optimal);                            using (StreamWriter writer = new StreamWriter(archiveEntry.Open()' Encoding.UTF8))                          {                              jsonSerializer.Serialize(writer' contract);                          }                      }                  }              });
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,MaximumOutputLength,The following statement contains a magic number: return inputLength + inputLength / 255 + 16;
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,MaximumOutputLength,The following statement contains a magic number: return inputLength + inputLength / 255 + 16;
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,Poke2,The following statement contains a magic number: buffer[offset + 1] = (byte)(value >> 8);
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,Peek2,The following statement contains a magic number: return (ushort)(((uint)buffer[offset]) | ((uint)buffer[offset + 1] << 8));
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,Peek4,The following statement contains a magic number: return  				((uint)buffer[offset]) |  				((uint)buffer[offset + 1] << 8) |  				((uint)buffer[offset + 2] << 16) |  				((uint)buffer[offset + 3] << 24);
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,Peek4,The following statement contains a magic number: return  				((uint)buffer[offset]) |  				((uint)buffer[offset + 1] << 8) |  				((uint)buffer[offset + 2] << 16) |  				((uint)buffer[offset + 3] << 24);
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,Peek4,The following statement contains a magic number: return  				((uint)buffer[offset]) |  				((uint)buffer[offset + 1] << 8) |  				((uint)buffer[offset + 2] << 16) |  				((uint)buffer[offset + 3] << 24);
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,Peek4,The following statement contains a magic number: return  				((uint)buffer[offset]) |  				((uint)buffer[offset + 1] << 8) |  				((uint)buffer[offset + 2] << 16) |  				((uint)buffer[offset + 3] << 24);
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,Peek4,The following statement contains a magic number: return  				((uint)buffer[offset]) |  				((uint)buffer[offset + 1] << 8) |  				((uint)buffer[offset + 2] << 16) |  				((uint)buffer[offset + 3] << 24);
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,Xor4,The following statement contains a magic number: var value1 =  				((uint)buffer[offset1]) |  				((uint)buffer[offset1 + 1] << 8) |  				((uint)buffer[offset1 + 2] << 16) |  				((uint)buffer[offset1 + 3] << 24);
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,Xor4,The following statement contains a magic number: var value1 =  				((uint)buffer[offset1]) |  				((uint)buffer[offset1 + 1] << 8) |  				((uint)buffer[offset1 + 2] << 16) |  				((uint)buffer[offset1 + 3] << 24);
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,Xor4,The following statement contains a magic number: var value1 =  				((uint)buffer[offset1]) |  				((uint)buffer[offset1 + 1] << 8) |  				((uint)buffer[offset1 + 2] << 16) |  				((uint)buffer[offset1 + 3] << 24);
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,Xor4,The following statement contains a magic number: var value1 =  				((uint)buffer[offset1]) |  				((uint)buffer[offset1 + 1] << 8) |  				((uint)buffer[offset1 + 2] << 16) |  				((uint)buffer[offset1 + 3] << 24);
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,Xor4,The following statement contains a magic number: var value1 =  				((uint)buffer[offset1]) |  				((uint)buffer[offset1 + 1] << 8) |  				((uint)buffer[offset1 + 2] << 16) |  				((uint)buffer[offset1 + 3] << 24);
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,Xor4,The following statement contains a magic number: var value2 =  				((uint)buffer[offset2]) |  				((uint)buffer[offset2 + 1] << 8) |  				((uint)buffer[offset2 + 2] << 16) |  				((uint)buffer[offset2 + 3] << 24);
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,Xor4,The following statement contains a magic number: var value2 =  				((uint)buffer[offset2]) |  				((uint)buffer[offset2 + 1] << 8) |  				((uint)buffer[offset2 + 2] << 16) |  				((uint)buffer[offset2 + 3] << 24);
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,Xor4,The following statement contains a magic number: var value2 =  				((uint)buffer[offset2]) |  				((uint)buffer[offset2 + 1] << 8) |  				((uint)buffer[offset2 + 2] << 16) |  				((uint)buffer[offset2 + 3] << 24);
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,Xor4,The following statement contains a magic number: var value2 =  				((uint)buffer[offset2]) |  				((uint)buffer[offset2 + 1] << 8) |  				((uint)buffer[offset2 + 2] << 16) |  				((uint)buffer[offset2 + 3] << 24);
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,Xor4,The following statement contains a magic number: var value2 =  				((uint)buffer[offset2]) |  				((uint)buffer[offset2 + 1] << 8) |  				((uint)buffer[offset2 + 2] << 16) |  				((uint)buffer[offset2 + 3] << 24);
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,Xor8,The following statement contains a magic number: var value1 =  				((ulong)buffer[offset1]) |  				((ulong)buffer[offset1 + 1] << 8) |  				((ulong)buffer[offset1 + 2] << 16) |  				((ulong)buffer[offset1 + 3] << 24) |  				((ulong)buffer[offset1 + 4] << 32) |  				((ulong)buffer[offset1 + 5] << 40) |  				((ulong)buffer[offset1 + 6] << 48) |  				((ulong)buffer[offset1 + 7] << 56);
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,Xor8,The following statement contains a magic number: var value1 =  				((ulong)buffer[offset1]) |  				((ulong)buffer[offset1 + 1] << 8) |  				((ulong)buffer[offset1 + 2] << 16) |  				((ulong)buffer[offset1 + 3] << 24) |  				((ulong)buffer[offset1 + 4] << 32) |  				((ulong)buffer[offset1 + 5] << 40) |  				((ulong)buffer[offset1 + 6] << 48) |  				((ulong)buffer[offset1 + 7] << 56);
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,Xor8,The following statement contains a magic number: var value1 =  				((ulong)buffer[offset1]) |  				((ulong)buffer[offset1 + 1] << 8) |  				((ulong)buffer[offset1 + 2] << 16) |  				((ulong)buffer[offset1 + 3] << 24) |  				((ulong)buffer[offset1 + 4] << 32) |  				((ulong)buffer[offset1 + 5] << 40) |  				((ulong)buffer[offset1 + 6] << 48) |  				((ulong)buffer[offset1 + 7] << 56);
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,Xor8,The following statement contains a magic number: var value1 =  				((ulong)buffer[offset1]) |  				((ulong)buffer[offset1 + 1] << 8) |  				((ulong)buffer[offset1 + 2] << 16) |  				((ulong)buffer[offset1 + 3] << 24) |  				((ulong)buffer[offset1 + 4] << 32) |  				((ulong)buffer[offset1 + 5] << 40) |  				((ulong)buffer[offset1 + 6] << 48) |  				((ulong)buffer[offset1 + 7] << 56);
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,Xor8,The following statement contains a magic number: var value1 =  				((ulong)buffer[offset1]) |  				((ulong)buffer[offset1 + 1] << 8) |  				((ulong)buffer[offset1 + 2] << 16) |  				((ulong)buffer[offset1 + 3] << 24) |  				((ulong)buffer[offset1 + 4] << 32) |  				((ulong)buffer[offset1 + 5] << 40) |  				((ulong)buffer[offset1 + 6] << 48) |  				((ulong)buffer[offset1 + 7] << 56);
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,Xor8,The following statement contains a magic number: var value1 =  				((ulong)buffer[offset1]) |  				((ulong)buffer[offset1 + 1] << 8) |  				((ulong)buffer[offset1 + 2] << 16) |  				((ulong)buffer[offset1 + 3] << 24) |  				((ulong)buffer[offset1 + 4] << 32) |  				((ulong)buffer[offset1 + 5] << 40) |  				((ulong)buffer[offset1 + 6] << 48) |  				((ulong)buffer[offset1 + 7] << 56);
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,Xor8,The following statement contains a magic number: var value1 =  				((ulong)buffer[offset1]) |  				((ulong)buffer[offset1 + 1] << 8) |  				((ulong)buffer[offset1 + 2] << 16) |  				((ulong)buffer[offset1 + 3] << 24) |  				((ulong)buffer[offset1 + 4] << 32) |  				((ulong)buffer[offset1 + 5] << 40) |  				((ulong)buffer[offset1 + 6] << 48) |  				((ulong)buffer[offset1 + 7] << 56);
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,Xor8,The following statement contains a magic number: var value1 =  				((ulong)buffer[offset1]) |  				((ulong)buffer[offset1 + 1] << 8) |  				((ulong)buffer[offset1 + 2] << 16) |  				((ulong)buffer[offset1 + 3] << 24) |  				((ulong)buffer[offset1 + 4] << 32) |  				((ulong)buffer[offset1 + 5] << 40) |  				((ulong)buffer[offset1 + 6] << 48) |  				((ulong)buffer[offset1 + 7] << 56);
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,Xor8,The following statement contains a magic number: var value1 =  				((ulong)buffer[offset1]) |  				((ulong)buffer[offset1 + 1] << 8) |  				((ulong)buffer[offset1 + 2] << 16) |  				((ulong)buffer[offset1 + 3] << 24) |  				((ulong)buffer[offset1 + 4] << 32) |  				((ulong)buffer[offset1 + 5] << 40) |  				((ulong)buffer[offset1 + 6] << 48) |  				((ulong)buffer[offset1 + 7] << 56);
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,Xor8,The following statement contains a magic number: var value1 =  				((ulong)buffer[offset1]) |  				((ulong)buffer[offset1 + 1] << 8) |  				((ulong)buffer[offset1 + 2] << 16) |  				((ulong)buffer[offset1 + 3] << 24) |  				((ulong)buffer[offset1 + 4] << 32) |  				((ulong)buffer[offset1 + 5] << 40) |  				((ulong)buffer[offset1 + 6] << 48) |  				((ulong)buffer[offset1 + 7] << 56);
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,Xor8,The following statement contains a magic number: var value1 =  				((ulong)buffer[offset1]) |  				((ulong)buffer[offset1 + 1] << 8) |  				((ulong)buffer[offset1 + 2] << 16) |  				((ulong)buffer[offset1 + 3] << 24) |  				((ulong)buffer[offset1 + 4] << 32) |  				((ulong)buffer[offset1 + 5] << 40) |  				((ulong)buffer[offset1 + 6] << 48) |  				((ulong)buffer[offset1 + 7] << 56);
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,Xor8,The following statement contains a magic number: var value1 =  				((ulong)buffer[offset1]) |  				((ulong)buffer[offset1 + 1] << 8) |  				((ulong)buffer[offset1 + 2] << 16) |  				((ulong)buffer[offset1 + 3] << 24) |  				((ulong)buffer[offset1 + 4] << 32) |  				((ulong)buffer[offset1 + 5] << 40) |  				((ulong)buffer[offset1 + 6] << 48) |  				((ulong)buffer[offset1 + 7] << 56);
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,Xor8,The following statement contains a magic number: var value1 =  				((ulong)buffer[offset1]) |  				((ulong)buffer[offset1 + 1] << 8) |  				((ulong)buffer[offset1 + 2] << 16) |  				((ulong)buffer[offset1 + 3] << 24) |  				((ulong)buffer[offset1 + 4] << 32) |  				((ulong)buffer[offset1 + 5] << 40) |  				((ulong)buffer[offset1 + 6] << 48) |  				((ulong)buffer[offset1 + 7] << 56);
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,Xor8,The following statement contains a magic number: var value2 =  				((ulong)buffer[offset2]) |  				((ulong)buffer[offset2 + 1] << 8) |  				((ulong)buffer[offset2 + 2] << 16) |  				((ulong)buffer[offset2 + 3] << 24) |  				((ulong)buffer[offset2 + 4] << 32) |  				((ulong)buffer[offset2 + 5] << 40) |  				((ulong)buffer[offset2 + 6] << 48) |  				((ulong)buffer[offset2 + 7] << 56);
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,Xor8,The following statement contains a magic number: var value2 =  				((ulong)buffer[offset2]) |  				((ulong)buffer[offset2 + 1] << 8) |  				((ulong)buffer[offset2 + 2] << 16) |  				((ulong)buffer[offset2 + 3] << 24) |  				((ulong)buffer[offset2 + 4] << 32) |  				((ulong)buffer[offset2 + 5] << 40) |  				((ulong)buffer[offset2 + 6] << 48) |  				((ulong)buffer[offset2 + 7] << 56);
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,Xor8,The following statement contains a magic number: var value2 =  				((ulong)buffer[offset2]) |  				((ulong)buffer[offset2 + 1] << 8) |  				((ulong)buffer[offset2 + 2] << 16) |  				((ulong)buffer[offset2 + 3] << 24) |  				((ulong)buffer[offset2 + 4] << 32) |  				((ulong)buffer[offset2 + 5] << 40) |  				((ulong)buffer[offset2 + 6] << 48) |  				((ulong)buffer[offset2 + 7] << 56);
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,Xor8,The following statement contains a magic number: var value2 =  				((ulong)buffer[offset2]) |  				((ulong)buffer[offset2 + 1] << 8) |  				((ulong)buffer[offset2 + 2] << 16) |  				((ulong)buffer[offset2 + 3] << 24) |  				((ulong)buffer[offset2 + 4] << 32) |  				((ulong)buffer[offset2 + 5] << 40) |  				((ulong)buffer[offset2 + 6] << 48) |  				((ulong)buffer[offset2 + 7] << 56);
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,Xor8,The following statement contains a magic number: var value2 =  				((ulong)buffer[offset2]) |  				((ulong)buffer[offset2 + 1] << 8) |  				((ulong)buffer[offset2 + 2] << 16) |  				((ulong)buffer[offset2 + 3] << 24) |  				((ulong)buffer[offset2 + 4] << 32) |  				((ulong)buffer[offset2 + 5] << 40) |  				((ulong)buffer[offset2 + 6] << 48) |  				((ulong)buffer[offset2 + 7] << 56);
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,Xor8,The following statement contains a magic number: var value2 =  				((ulong)buffer[offset2]) |  				((ulong)buffer[offset2 + 1] << 8) |  				((ulong)buffer[offset2 + 2] << 16) |  				((ulong)buffer[offset2 + 3] << 24) |  				((ulong)buffer[offset2 + 4] << 32) |  				((ulong)buffer[offset2 + 5] << 40) |  				((ulong)buffer[offset2 + 6] << 48) |  				((ulong)buffer[offset2 + 7] << 56);
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,Xor8,The following statement contains a magic number: var value2 =  				((ulong)buffer[offset2]) |  				((ulong)buffer[offset2 + 1] << 8) |  				((ulong)buffer[offset2 + 2] << 16) |  				((ulong)buffer[offset2 + 3] << 24) |  				((ulong)buffer[offset2 + 4] << 32) |  				((ulong)buffer[offset2 + 5] << 40) |  				((ulong)buffer[offset2 + 6] << 48) |  				((ulong)buffer[offset2 + 7] << 56);
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,Xor8,The following statement contains a magic number: var value2 =  				((ulong)buffer[offset2]) |  				((ulong)buffer[offset2 + 1] << 8) |  				((ulong)buffer[offset2 + 2] << 16) |  				((ulong)buffer[offset2 + 3] << 24) |  				((ulong)buffer[offset2 + 4] << 32) |  				((ulong)buffer[offset2 + 5] << 40) |  				((ulong)buffer[offset2 + 6] << 48) |  				((ulong)buffer[offset2 + 7] << 56);
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,Xor8,The following statement contains a magic number: var value2 =  				((ulong)buffer[offset2]) |  				((ulong)buffer[offset2 + 1] << 8) |  				((ulong)buffer[offset2 + 2] << 16) |  				((ulong)buffer[offset2 + 3] << 24) |  				((ulong)buffer[offset2 + 4] << 32) |  				((ulong)buffer[offset2 + 5] << 40) |  				((ulong)buffer[offset2 + 6] << 48) |  				((ulong)buffer[offset2 + 7] << 56);
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,Xor8,The following statement contains a magic number: var value2 =  				((ulong)buffer[offset2]) |  				((ulong)buffer[offset2 + 1] << 8) |  				((ulong)buffer[offset2 + 2] << 16) |  				((ulong)buffer[offset2 + 3] << 24) |  				((ulong)buffer[offset2 + 4] << 32) |  				((ulong)buffer[offset2 + 5] << 40) |  				((ulong)buffer[offset2 + 6] << 48) |  				((ulong)buffer[offset2 + 7] << 56);
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,Xor8,The following statement contains a magic number: var value2 =  				((ulong)buffer[offset2]) |  				((ulong)buffer[offset2 + 1] << 8) |  				((ulong)buffer[offset2 + 2] << 16) |  				((ulong)buffer[offset2 + 3] << 24) |  				((ulong)buffer[offset2 + 4] << 32) |  				((ulong)buffer[offset2 + 5] << 40) |  				((ulong)buffer[offset2 + 6] << 48) |  				((ulong)buffer[offset2 + 7] << 56);
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,Xor8,The following statement contains a magic number: var value2 =  				((ulong)buffer[offset2]) |  				((ulong)buffer[offset2 + 1] << 8) |  				((ulong)buffer[offset2 + 2] << 16) |  				((ulong)buffer[offset2 + 3] << 24) |  				((ulong)buffer[offset2 + 4] << 32) |  				((ulong)buffer[offset2 + 5] << 40) |  				((ulong)buffer[offset2 + 6] << 48) |  				((ulong)buffer[offset2 + 7] << 56);
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,Xor8,The following statement contains a magic number: var value2 =  				((ulong)buffer[offset2]) |  				((ulong)buffer[offset2 + 1] << 8) |  				((ulong)buffer[offset2 + 2] << 16) |  				((ulong)buffer[offset2 + 3] << 24) |  				((ulong)buffer[offset2 + 4] << 32) |  				((ulong)buffer[offset2 + 5] << 40) |  				((ulong)buffer[offset2 + 6] << 48) |  				((ulong)buffer[offset2 + 7] << 56);
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,Equal4,The following statement contains a magic number: buffer[offset1 + 2] != buffer[offset2 + 2]
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,Equal4,The following statement contains a magic number: buffer[offset1 + 2] != buffer[offset2 + 2]
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,Equal4,The following statement contains a magic number: return buffer[offset1 + 3] == buffer[offset2 + 3];
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,Equal4,The following statement contains a magic number: return buffer[offset1 + 3] == buffer[offset2 + 3];
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,Copy4,The following statement contains a magic number: buf[dst + 3] = buf[src + 3];
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,Copy4,The following statement contains a magic number: buf[dst + 3] = buf[src + 3];
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,Copy4,The following statement contains a magic number: buf[dst + 2] = buf[src + 2];
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,Copy4,The following statement contains a magic number: buf[dst + 2] = buf[src + 2];
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,Copy8,The following statement contains a magic number: buf[dst + 7] = buf[src + 7];
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,Copy8,The following statement contains a magic number: buf[dst + 7] = buf[src + 7];
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,Copy8,The following statement contains a magic number: buf[dst + 6] = buf[src + 6];
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,Copy8,The following statement contains a magic number: buf[dst + 6] = buf[src + 6];
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,Copy8,The following statement contains a magic number: buf[dst + 5] = buf[src + 5];
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,Copy8,The following statement contains a magic number: buf[dst + 5] = buf[src + 5];
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,Copy8,The following statement contains a magic number: buf[dst + 4] = buf[src + 4];
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,Copy8,The following statement contains a magic number: buf[dst + 4] = buf[src + 4];
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,Copy8,The following statement contains a magic number: buf[dst + 3] = buf[src + 3];
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,Copy8,The following statement contains a magic number: buf[dst + 3] = buf[src + 3];
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,Copy8,The following statement contains a magic number: buf[dst + 2] = buf[src + 2];
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,Copy8,The following statement contains a magic number: buf[dst + 2] = buf[src + 2];
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,SecureCopy,The following statement contains a magic number: Assert(diff >= 4' "Target must be at least 4 bytes further than source");
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,SecureCopy,The following statement contains a magic number: Assert(BLOCK_COPY_LIMIT > 4' "This method requires BLOCK_COPY_LIMIT > 4");
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,SecureCopy,The following statement contains a magic number: buffer[dst + 2] = buffer[src + 2];
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,SecureCopy,The following statement contains a magic number: buffer[dst + 2] = buffer[src + 2];
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,SecureCopy,The following statement contains a magic number: buffer[dst + 3] = buffer[src + 3];
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,SecureCopy,The following statement contains a magic number: buffer[dst + 3] = buffer[src + 3];
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,SecureCopy,The following statement contains a magic number: dst += 4;
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,SecureCopy,The following statement contains a magic number: src += 4;
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,SecureCopy,The following statement contains a magic number: len -= 4;
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,SecureCopy,The following statement contains a magic number: len >= 4
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_compressCtx_safe32,The following statement contains a magic number: var dst_LASTLITERALS_3 = dst_end - (2 + 1 + LASTLITERALS);
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_compressCtx_safe32,The following statement contains a magic number: hash_table[(((Peek4(src' src_p)) * 2654435761u) >> HASH_ADJUST)] = (src_p - src_base);
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_compressCtx_safe32,The following statement contains a magic number: h_fwd = (((Peek4(src' src_p)) * 2654435761u) >> HASH_ADJUST);
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_compressCtx_safe32,The following statement contains a magic number: var findMatchAttempts = (1 << SKIPSTRENGTH) + 3;
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_compressCtx_safe32,The following statement contains a magic number: h_fwd = (((Peek4(src' src_p_fwd)) * 2654435761u) >> HASH_ADJUST);
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_compressCtx_safe32,The following statement contains a magic number: dst_p + length + (length >> 8) > dst_LASTLITERALS_3
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_compressCtx_safe32,The following statement contains a magic number: dst[dst_p++] = 255;
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_compressCtx_safe32,The following statement contains a magic number: len -= 255;
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_compressCtx_safe32,The following statement contains a magic number: len > 254
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_compressCtx_safe32,The following statement contains a magic number: dst_p += 2;
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_compressCtx_safe32,The following statement contains a magic number: src_p += debruijn32[((uint)((diff) & -(diff)) * 0x077CB531u) >> 27];
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_compressCtx_safe32,The following statement contains a magic number: src_p += 2;
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_compressCtx_safe32,The following statement contains a magic number: src_ref += 2;
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_compressCtx_safe32,The following statement contains a magic number: dst_p + (length >> 8) > dst_LASTLITERALS_1
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_compressCtx_safe32,The following statement contains a magic number: dst[dst_p++] = 255;
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_compressCtx_safe32,The following statement contains a magic number: dst[dst_p++] = 255;
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_compressCtx_safe32,The following statement contains a magic number: length > 509
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_compressCtx_safe32,The following statement contains a magic number: length -= 255;
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_compressCtx_safe32,The following statement contains a magic number: dst[dst_p++] = 255;
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_compressCtx_safe32,The following statement contains a magic number: length > 254
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_compressCtx_safe32,The following statement contains a magic number: hash_table[(((Peek4(src' src_p - 2)) * 2654435761u) >> HASH_ADJUST)] = (src_p - 2 - src_base);
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_compressCtx_safe32,The following statement contains a magic number: hash_table[(((Peek4(src' src_p - 2)) * 2654435761u) >> HASH_ADJUST)] = (src_p - 2 - src_base);
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_compressCtx_safe32,The following statement contains a magic number: hash_table[(((Peek4(src' src_p - 2)) * 2654435761u) >> HASH_ADJUST)] = (src_p - 2 - src_base);
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_compressCtx_safe32,The following statement contains a magic number: h = (((Peek4(src' src_p)) * 2654435761u) >> HASH_ADJUST);
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_compressCtx_safe32,The following statement contains a magic number: h_fwd = (((Peek4(src' src_p)) * 2654435761u) >> HASH_ADJUST);
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_compressCtx_safe32,The following statement contains a magic number: dst_p + lastRun + 1 + ((lastRun + 255 - RUN_MASK) / 255) > dst_end
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_compressCtx_safe32,The following statement contains a magic number: dst_p + lastRun + 1 + ((lastRun + 255 - RUN_MASK) / 255) > dst_end
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_compressCtx_safe32,The following statement contains a magic number: dst[dst_p++] = 255;
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_compressCtx_safe32,The following statement contains a magic number: lastRun > 254
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_compress64kCtx_safe32,The following statement contains a magic number: var dst_LASTLITERALS_3 = dst_end - (2 + 1 + LASTLITERALS);
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_compress64kCtx_safe32,The following statement contains a magic number: h_fwd = (((Peek4(src' src_p)) * 2654435761u) >> HASH64K_ADJUST);
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_compress64kCtx_safe32,The following statement contains a magic number: var findMatchAttempts = (1 << SKIPSTRENGTH) + 3;
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_compress64kCtx_safe32,The following statement contains a magic number: h_fwd = (((Peek4(src' src_p_fwd)) * 2654435761u) >> HASH64K_ADJUST);
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_compress64kCtx_safe32,The following statement contains a magic number: dst_p + length + (length >> 8) > dst_LASTLITERALS_3
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_compress64kCtx_safe32,The following statement contains a magic number: dst[dst_p++] = 255;
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_compress64kCtx_safe32,The following statement contains a magic number: len -= 255;
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_compress64kCtx_safe32,The following statement contains a magic number: len > 254
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_compress64kCtx_safe32,The following statement contains a magic number: dst_p += 2;
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_compress64kCtx_safe32,The following statement contains a magic number: src_p += debruijn32[((uint)((diff) & -(diff)) * 0x077CB531u) >> 27];
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_compress64kCtx_safe32,The following statement contains a magic number: src_p += 2;
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_compress64kCtx_safe32,The following statement contains a magic number: src_ref += 2;
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_compress64kCtx_safe32,The following statement contains a magic number: dst_p + (len >> 8) > dst_LASTLITERALS_1
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_compress64kCtx_safe32,The following statement contains a magic number: dst[dst_p++] = 255;
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_compress64kCtx_safe32,The following statement contains a magic number: dst[dst_p++] = 255;
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_compress64kCtx_safe32,The following statement contains a magic number: len > 509
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_compress64kCtx_safe32,The following statement contains a magic number: len -= 255;
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_compress64kCtx_safe32,The following statement contains a magic number: dst[dst_p++] = 255;
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_compress64kCtx_safe32,The following statement contains a magic number: len > 254
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_compress64kCtx_safe32,The following statement contains a magic number: hash_table[(((Peek4(src' src_p - 2)) * 2654435761u) >> HASH64K_ADJUST)] = (ushort)(src_p - 2 - src_base);
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_compress64kCtx_safe32,The following statement contains a magic number: hash_table[(((Peek4(src' src_p - 2)) * 2654435761u) >> HASH64K_ADJUST)] = (ushort)(src_p - 2 - src_base);
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_compress64kCtx_safe32,The following statement contains a magic number: hash_table[(((Peek4(src' src_p - 2)) * 2654435761u) >> HASH64K_ADJUST)] = (ushort)(src_p - 2 - src_base);
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_compress64kCtx_safe32,The following statement contains a magic number: h = (((Peek4(src' src_p)) * 2654435761u) >> HASH64K_ADJUST);
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_compress64kCtx_safe32,The following statement contains a magic number: h_fwd = (((Peek4(src' src_p)) * 2654435761u) >> HASH64K_ADJUST);
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_compress64kCtx_safe32,The following statement contains a magic number: dst_p + lastRun + 1 + (lastRun - RUN_MASK + 255) / 255 > dst_end
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_compress64kCtx_safe32,The following statement contains a magic number: dst_p + lastRun + 1 + (lastRun - RUN_MASK + 255) / 255 > dst_end
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_compress64kCtx_safe32,The following statement contains a magic number: dst[dst_p++] = 255;
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_compress64kCtx_safe32,The following statement contains a magic number: lastRun > 254
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_uncompress_safe32,The following statement contains a magic number: var dst_COPYLENGTH_STEPSIZE_4 = dst_end - COPYLENGTH - (STEPSIZE_32 - 4);
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_uncompress_safe32,The following statement contains a magic number: (len = src[src_p++]) == 255
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_uncompress_safe32,The following statement contains a magic number: src_p += 2;
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_uncompress_safe32,The following statement contains a magic number: src[src_p] == 255
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_uncompress_safe32,The following statement contains a magic number: dst[dst_p + 2] = dst[dst_ref + 2];
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_uncompress_safe32,The following statement contains a magic number: dst[dst_p + 2] = dst[dst_ref + 2];
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_uncompress_safe32,The following statement contains a magic number: dst[dst_p + 3] = dst[dst_ref + 3];
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_uncompress_safe32,The following statement contains a magic number: dst[dst_p + 3] = dst[dst_ref + 3];
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_uncompress_safe32,The following statement contains a magic number: dst_p += 4;
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_uncompress_safe32,The following statement contains a magic number: dst_ref += 4;
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_uncompress_safe32,The following statement contains a magic number: dst_p += STEPSIZE_32 - 4;
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_uncompress_safe32,The following statement contains a magic number: dst_cpy = dst_p + length - (STEPSIZE_32 - 4);
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_uncompress_unknownOutputSize_safe32,The following statement contains a magic number: var src_LASTLITERALS_3 = (src_end - (2 + 1 + LASTLITERALS));
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_uncompress_unknownOutputSize_safe32,The following statement contains a magic number: var dst_COPYLENGTH_STEPSIZE_4 = (dst_end - (COPYLENGTH + (STEPSIZE_32 - 4)));
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_uncompress_unknownOutputSize_safe32,The following statement contains a magic number: var s = 255;
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_uncompress_unknownOutputSize_safe32,The following statement contains a magic number: (src_p < src_end) && (s == 255)
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_uncompress_unknownOutputSize_safe32,The following statement contains a magic number: src_p += 2;
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_uncompress_unknownOutputSize_safe32,The following statement contains a magic number: s == 255
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_uncompress_unknownOutputSize_safe32,The following statement contains a magic number: dst[dst_p + 2] = dst[dst_ref + 2];
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_uncompress_unknownOutputSize_safe32,The following statement contains a magic number: dst[dst_p + 2] = dst[dst_ref + 2];
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_uncompress_unknownOutputSize_safe32,The following statement contains a magic number: dst[dst_p + 3] = dst[dst_ref + 3];
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_uncompress_unknownOutputSize_safe32,The following statement contains a magic number: dst[dst_p + 3] = dst[dst_ref + 3];
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_uncompress_unknownOutputSize_safe32,The following statement contains a magic number: dst_p += 4;
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_uncompress_unknownOutputSize_safe32,The following statement contains a magic number: dst_ref += 4;
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_uncompress_unknownOutputSize_safe32,The following statement contains a magic number: dst_p += STEPSIZE_32 - 4;
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_uncompress_unknownOutputSize_safe32,The following statement contains a magic number: dst_cpy = dst_p + length - (STEPSIZE_32 - 4);
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4HC_Insert_32,The following statement contains a magic number: var delta = (p) - (hashTable[(((Peek4(src' p)) * 2654435761u) >> HASHHC_ADJUST)] + src_base);
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4HC_Insert_32,The following statement contains a magic number: hashTable[(((Peek4(src' p)) * 2654435761u) >> HASHHC_ADJUST)] = ((p) - src_base);
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4HC_CommonLength_32,The following statement contains a magic number: p1t += debruijn32[((uint)((diff) & -(diff)) * 0x077CB531u) >> 27];
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4HC_CommonLength_32,The following statement contains a magic number: p1t += 2;
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4HC_CommonLength_32,The following statement contains a magic number: p2 += 2;
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4HC_InsertAndFindBestMatch_32,The following statement contains a magic number: var src_ref = (hashTable[(((Peek4(src' src_p)) * 2654435761u) >> HASHHC_ADJUST)] + src_base);
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4HC_InsertAndFindBestMatch_32,The following statement contains a magic number: src_ref >= src_p - 4
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4HC_InsertAndFindBestMatch_32,The following statement contains a magic number: hashTable[(((Peek4(src' src_ptr)) * 2654435761u) >> HASHHC_ADJUST)] = ((src_ptr) - src_base);
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4HC_InsertAndGetWiderMatch_32,The following statement contains a magic number: var src_ref = (hashTable[(((Peek4(src' src_p)) * 2654435761u) >> HASHHC_ADJUST)] + src_base);
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4HC_InsertAndGetWiderMatch_32,The following statement contains a magic number: ipt += debruijn32[((uint)((diff) & -(diff)) * 0x077CB531u) >> 27];
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4HC_InsertAndGetWiderMatch_32,The following statement contains a magic number: ipt += 2;
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4HC_InsertAndGetWiderMatch_32,The following statement contains a magic number: reft += 2;
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_encodeSequence_32,The following statement contains a magic number: (dst_p + length + (2 + 1 + LASTLITERALS) + (length >> 8)) > dst_end
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_encodeSequence_32,The following statement contains a magic number: (dst_p + length + (2 + 1 + LASTLITERALS) + (length >> 8)) > dst_end
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_encodeSequence_32,The following statement contains a magic number: dst[dst_p++] = 255;
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_encodeSequence_32,The following statement contains a magic number: len > 254
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_encodeSequence_32,The following statement contains a magic number: dst_p += 2;
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_encodeSequence_32,The following statement contains a magic number: dst_p + (1 + LASTLITERALS) + (length >> 8) > dst_end
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_encodeSequence_32,The following statement contains a magic number: dst[(dst_p)++] = 255;
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_encodeSequence_32,The following statement contains a magic number: dst[(dst_p)++] = 255;
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_encodeSequence_32,The following statement contains a magic number: len > 509
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_encodeSequence_32,The following statement contains a magic number: len -= 255;
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_encodeSequence_32,The following statement contains a magic number: dst[(dst_p)++] = 255;
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_encodeSequence_32,The following statement contains a magic number: len > 254
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_compressHCCtx_32,The following statement contains a magic number: var ml2 = src_p + ml < src_mflimit  					? LZ4HC_InsertAndGetWiderMatch_32(ctx' src_p + ml - 2' src_p + 1' ml' ref ref2' ref start2)  					: ml;
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_compressHCCtx_32,The following statement contains a magic number: (start2 - src_p) < 3
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_compressHCCtx_32,The following statement contains a magic number: var ml3 = start2 + ml2 < src_mflimit  					? LZ4HC_InsertAndGetWiderMatch_32(ctx' start2 + ml2 - 3' start2' ml2' ref ref3' ref start3)  					: ml2;
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_compressHCCtx_32,The following statement contains a magic number: start3 < src_p + ml + 3
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_compressHCCtx_32,The following statement contains a magic number: dst[dst_p++] = 255;
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_compressCtx_safe64,The following statement contains a magic number: var src_LASTLITERALS_3 = src_LASTLITERALS - 3;
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_compressCtx_safe64,The following statement contains a magic number: var dst_LASTLITERALS_3 = dst_end - (2 + 1 + LASTLITERALS);
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_compressCtx_safe64,The following statement contains a magic number: hash_table[(((Peek4(src' src_p)) * 2654435761u) >> HASH_ADJUST)] = (src_p - src_base);
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_compressCtx_safe64,The following statement contains a magic number: h_fwd = (((Peek4(src' src_p)) * 2654435761u) >> HASH_ADJUST);
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_compressCtx_safe64,The following statement contains a magic number: var findMatchAttempts = (1 << SKIPSTRENGTH) + 3;
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_compressCtx_safe64,The following statement contains a magic number: h_fwd = (((Peek4(src' src_p_fwd)) * 2654435761u) >> HASH_ADJUST);
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_compressCtx_safe64,The following statement contains a magic number: dst_p + length + (length >> 8) > dst_LASTLITERALS_3
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_compressCtx_safe64,The following statement contains a magic number: dst[dst_p++] = 255;
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_compressCtx_safe64,The following statement contains a magic number: len -= 255;
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_compressCtx_safe64,The following statement contains a magic number: len > 254
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_compressCtx_safe64,The following statement contains a magic number: dst_p += 2;
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_compressCtx_safe64,The following statement contains a magic number: src_p += debruijn64[((ulong)((diff) & -(diff)) * 0x0218A392CDABBD3FL) >> 58];
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_compressCtx_safe64,The following statement contains a magic number: src_p += 4;
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_compressCtx_safe64,The following statement contains a magic number: src_ref += 4;
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_compressCtx_safe64,The following statement contains a magic number: src_p += 2;
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_compressCtx_safe64,The following statement contains a magic number: src_ref += 2;
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_compressCtx_safe64,The following statement contains a magic number: dst_p + (length >> 8) > dst_LASTLITERALS_1
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_compressCtx_safe64,The following statement contains a magic number: dst[dst_p++] = 255;
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_compressCtx_safe64,The following statement contains a magic number: dst[dst_p++] = 255;
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_compressCtx_safe64,The following statement contains a magic number: length > 509
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_compressCtx_safe64,The following statement contains a magic number: length -= 255;
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_compressCtx_safe64,The following statement contains a magic number: dst[dst_p++] = 255;
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_compressCtx_safe64,The following statement contains a magic number: length > 254
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_compressCtx_safe64,The following statement contains a magic number: hash_table[(((Peek4(src' src_p - 2)) * 2654435761u) >> HASH_ADJUST)] = (src_p - 2 - src_base);
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_compressCtx_safe64,The following statement contains a magic number: hash_table[(((Peek4(src' src_p - 2)) * 2654435761u) >> HASH_ADJUST)] = (src_p - 2 - src_base);
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_compressCtx_safe64,The following statement contains a magic number: hash_table[(((Peek4(src' src_p - 2)) * 2654435761u) >> HASH_ADJUST)] = (src_p - 2 - src_base);
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_compressCtx_safe64,The following statement contains a magic number: h = (((Peek4(src' src_p)) * 2654435761u) >> HASH_ADJUST);
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_compressCtx_safe64,The following statement contains a magic number: h_fwd = (((Peek4(src' src_p)) * 2654435761u) >> HASH_ADJUST);
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_compressCtx_safe64,The following statement contains a magic number: dst_p + lastRun + 1 + ((lastRun + 255 - RUN_MASK) / 255) > dst_end
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_compressCtx_safe64,The following statement contains a magic number: dst_p + lastRun + 1 + ((lastRun + 255 - RUN_MASK) / 255) > dst_end
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_compressCtx_safe64,The following statement contains a magic number: dst[dst_p++] = 255;
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_compressCtx_safe64,The following statement contains a magic number: lastRun > 254
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_compress64kCtx_safe64,The following statement contains a magic number: var src_LASTLITERALS_3 = src_LASTLITERALS - 3;
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_compress64kCtx_safe64,The following statement contains a magic number: var dst_LASTLITERALS_3 = dst_end - (2 + 1 + LASTLITERALS);
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_compress64kCtx_safe64,The following statement contains a magic number: h_fwd = (((Peek4(src' src_p)) * 2654435761u) >> HASH64K_ADJUST);
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_compress64kCtx_safe64,The following statement contains a magic number: var findMatchAttempts = (1 << SKIPSTRENGTH) + 3;
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_compress64kCtx_safe64,The following statement contains a magic number: h_fwd = (((Peek4(src' src_p_fwd)) * 2654435761u) >> HASH64K_ADJUST);
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_compress64kCtx_safe64,The following statement contains a magic number: dst_p + length + (length >> 8) > dst_LASTLITERALS_3
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_compress64kCtx_safe64,The following statement contains a magic number: dst[dst_p++] = 255;
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_compress64kCtx_safe64,The following statement contains a magic number: len -= 255;
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_compress64kCtx_safe64,The following statement contains a magic number: len > 254
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_compress64kCtx_safe64,The following statement contains a magic number: dst_p += 2;
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_compress64kCtx_safe64,The following statement contains a magic number: src_p += debruijn64[((ulong)((diff) & -(diff)) * 0x0218A392CDABBD3FL) >> 58];
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_compress64kCtx_safe64,The following statement contains a magic number: src_p += 4;
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_compress64kCtx_safe64,The following statement contains a magic number: src_ref += 4;
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_compress64kCtx_safe64,The following statement contains a magic number: src_p += 2;
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_compress64kCtx_safe64,The following statement contains a magic number: src_ref += 2;
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_compress64kCtx_safe64,The following statement contains a magic number: dst_p + (len >> 8) > dst_LASTLITERALS_1
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_compress64kCtx_safe64,The following statement contains a magic number: dst[dst_p++] = 255;
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_compress64kCtx_safe64,The following statement contains a magic number: dst[dst_p++] = 255;
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_compress64kCtx_safe64,The following statement contains a magic number: len > 509
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_compress64kCtx_safe64,The following statement contains a magic number: len -= 255;
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_compress64kCtx_safe64,The following statement contains a magic number: dst[dst_p++] = 255;
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_compress64kCtx_safe64,The following statement contains a magic number: len > 254
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_compress64kCtx_safe64,The following statement contains a magic number: hash_table[(((Peek4(src' src_p - 2)) * 2654435761u) >> HASH64K_ADJUST)] = (ushort)(src_p - 2 - src_base);
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_compress64kCtx_safe64,The following statement contains a magic number: hash_table[(((Peek4(src' src_p - 2)) * 2654435761u) >> HASH64K_ADJUST)] = (ushort)(src_p - 2 - src_base);
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_compress64kCtx_safe64,The following statement contains a magic number: hash_table[(((Peek4(src' src_p - 2)) * 2654435761u) >> HASH64K_ADJUST)] = (ushort)(src_p - 2 - src_base);
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_compress64kCtx_safe64,The following statement contains a magic number: h = (((Peek4(src' src_p)) * 2654435761u) >> HASH64K_ADJUST);
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_compress64kCtx_safe64,The following statement contains a magic number: h_fwd = (((Peek4(src' src_p)) * 2654435761u) >> HASH64K_ADJUST);
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_compress64kCtx_safe64,The following statement contains a magic number: dst_p + lastRun + 1 + (lastRun - RUN_MASK + 255) / 255 > dst_end
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_compress64kCtx_safe64,The following statement contains a magic number: dst_p + lastRun + 1 + (lastRun - RUN_MASK + 255) / 255 > dst_end
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_compress64kCtx_safe64,The following statement contains a magic number: dst[dst_p++] = 255;
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_compress64kCtx_safe64,The following statement contains a magic number: lastRun > 254
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_uncompress_safe64,The following statement contains a magic number: var dst_COPYLENGTH_STEPSIZE_4 = dst_end - COPYLENGTH - (STEPSIZE_64 - 4);
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_uncompress_safe64,The following statement contains a magic number: (len = src[src_p++]) == 255
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_uncompress_safe64,The following statement contains a magic number: src_p += 2;
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_uncompress_safe64,The following statement contains a magic number: src[src_p] == 255
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_uncompress_safe64,The following statement contains a magic number: dst[dst_p + 2] = dst[dst_ref + 2];
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_uncompress_safe64,The following statement contains a magic number: dst[dst_p + 2] = dst[dst_ref + 2];
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_uncompress_safe64,The following statement contains a magic number: dst[dst_p + 3] = dst[dst_ref + 3];
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_uncompress_safe64,The following statement contains a magic number: dst[dst_p + 3] = dst[dst_ref + 3];
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_uncompress_safe64,The following statement contains a magic number: dst_p += 4;
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_uncompress_safe64,The following statement contains a magic number: dst_ref += 4;
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_uncompress_safe64,The following statement contains a magic number: dst_p += STEPSIZE_64 - 4;
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_uncompress_safe64,The following statement contains a magic number: dst_cpy = dst_p + length - (STEPSIZE_64 - 4);
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_uncompress_unknownOutputSize_safe64,The following statement contains a magic number: var src_LASTLITERALS_3 = (src_end - (2 + 1 + LASTLITERALS));
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_uncompress_unknownOutputSize_safe64,The following statement contains a magic number: var dst_COPYLENGTH_STEPSIZE_4 = (dst_end - (COPYLENGTH + (STEPSIZE_64 - 4)));
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_uncompress_unknownOutputSize_safe64,The following statement contains a magic number: var s = 255;
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_uncompress_unknownOutputSize_safe64,The following statement contains a magic number: (src_p < src_end) && (s == 255)
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_uncompress_unknownOutputSize_safe64,The following statement contains a magic number: src_p += 2;
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_uncompress_unknownOutputSize_safe64,The following statement contains a magic number: s == 255
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_uncompress_unknownOutputSize_safe64,The following statement contains a magic number: dst[dst_p + 2] = dst[dst_ref + 2];
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_uncompress_unknownOutputSize_safe64,The following statement contains a magic number: dst[dst_p + 2] = dst[dst_ref + 2];
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_uncompress_unknownOutputSize_safe64,The following statement contains a magic number: dst[dst_p + 3] = dst[dst_ref + 3];
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_uncompress_unknownOutputSize_safe64,The following statement contains a magic number: dst[dst_p + 3] = dst[dst_ref + 3];
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_uncompress_unknownOutputSize_safe64,The following statement contains a magic number: dst_p += 4;
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_uncompress_unknownOutputSize_safe64,The following statement contains a magic number: dst_ref += 4;
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_uncompress_unknownOutputSize_safe64,The following statement contains a magic number: dst_p += STEPSIZE_64 - 4;
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_uncompress_unknownOutputSize_safe64,The following statement contains a magic number: dst_cpy = dst_p + length - (STEPSIZE_64 - 4);
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4HC_Insert_64,The following statement contains a magic number: var delta = (p) - (hashTable[(((Peek4(src' p)) * 2654435761u) >> HASHHC_ADJUST)] + src_base);
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4HC_Insert_64,The following statement contains a magic number: hashTable[(((Peek4(src' p)) * 2654435761u) >> HASHHC_ADJUST)] = ((p) - src_base);
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4HC_CommonLength_64,The following statement contains a magic number: p1t += debruijn64[((ulong)((diff) & -(diff)) * 0x0218A392CDABBD3FL) >> 58];
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4HC_CommonLength_64,The following statement contains a magic number: p1t += 4;
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4HC_CommonLength_64,The following statement contains a magic number: p2 += 4;
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4HC_CommonLength_64,The following statement contains a magic number: (p1t < (src_LASTLITERALS - 3)) && (Equal4(src' p2' p1t))
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4HC_CommonLength_64,The following statement contains a magic number: p1t += 2;
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4HC_CommonLength_64,The following statement contains a magic number: p2 += 2;
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4HC_InsertAndFindBestMatch_64,The following statement contains a magic number: var src_ref = (hashTable[(((Peek4(src' src_p)) * 2654435761u) >> HASHHC_ADJUST)] + src_base);
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4HC_InsertAndFindBestMatch_64,The following statement contains a magic number: src_ref >= src_p - 4
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4HC_InsertAndFindBestMatch_64,The following statement contains a magic number: hashTable[(((Peek4(src' ptr)) * 2654435761u) >> HASHHC_ADJUST)] = ((ptr) - src_base);
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4HC_InsertAndGetWiderMatch_64,The following statement contains a magic number: var src_ref = (hashTable[(((Peek4(src' src_p)) * 2654435761u) >> HASHHC_ADJUST)] + src_base);
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4HC_InsertAndGetWiderMatch_64,The following statement contains a magic number: ipt += debruijn64[((ulong)((diff) & -(diff)) * 0x0218A392CDABBD3FL) >> 58];
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4HC_InsertAndGetWiderMatch_64,The following statement contains a magic number: ipt += 4;
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4HC_InsertAndGetWiderMatch_64,The following statement contains a magic number: reft += 4;
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4HC_InsertAndGetWiderMatch_64,The following statement contains a magic number: (ipt < (src_LASTLITERALS - 3)) && (Equal4(src' reft' ipt))
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4HC_InsertAndGetWiderMatch_64,The following statement contains a magic number: ipt += 2;
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4HC_InsertAndGetWiderMatch_64,The following statement contains a magic number: reft += 2;
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_encodeSequence_64,The following statement contains a magic number: (dst_p + length + (2 + 1 + LASTLITERALS) + (length >> 8)) > dst_end
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_encodeSequence_64,The following statement contains a magic number: (dst_p + length + (2 + 1 + LASTLITERALS) + (length >> 8)) > dst_end
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_encodeSequence_64,The following statement contains a magic number: dst[dst_p++] = 255;
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_encodeSequence_64,The following statement contains a magic number: len > 254
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_encodeSequence_64,The following statement contains a magic number: dst_p += 2;
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_encodeSequence_64,The following statement contains a magic number: dst_p + (1 + LASTLITERALS) + (length >> 8) > dst_end
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_encodeSequence_64,The following statement contains a magic number: dst[dst_p++] = 255;
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_encodeSequence_64,The following statement contains a magic number: dst[dst_p++] = 255;
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_encodeSequence_64,The following statement contains a magic number: len > 509
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_encodeSequence_64,The following statement contains a magic number: len -= 255;
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_encodeSequence_64,The following statement contains a magic number: dst[dst_p++] = 255;
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_encodeSequence_64,The following statement contains a magic number: len > 254
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_compressHCCtx_64,The following statement contains a magic number: var ml2 = src_p + ml < src_mflimit  					? LZ4HC_InsertAndGetWiderMatch_64(ctx' src_p + ml - 2' src_p + 1' ml' ref ref2' ref start2)  					: ml;
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_compressHCCtx_64,The following statement contains a magic number: (start2 - src_p) < 3
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_compressHCCtx_64,The following statement contains a magic number: var ml3 = start2 + ml2 < src_mflimit  					? LZ4HC_InsertAndGetWiderMatch_64(ctx' start2 + ml2 - 3' start2' ml2' ref ref3' ref start3)  					: ml2;
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_compressHCCtx_64,The following statement contains a magic number: start3 < src_p + ml + 3
Magic Number,LZ4ps,LZ4Codec,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\LZ4\LZ4Codec.cs,LZ4_compressHCCtx_64,The following statement contains a magic number: dst[dst_p++] = 255;
Magic Number,Shoko.Server.Utilities,SeriesSearch,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utilities\SeriesSearch.cs,CheckTitlesFuzzy,The following statement contains a magic number: int k = Math.Max(Math.Min((int)(title.Length / 6D)' (int)(query.Length / 6D))' 1);
Magic Number,Shoko.Server.Utilities,SeriesSearch,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utilities\SeriesSearch.cs,CheckTitlesFuzzy,The following statement contains a magic number: int k = Math.Max(Math.Min((int)(title.Length / 6D)' (int)(query.Length / 6D))' 1);
Magic Number,Shoko.Server.Utilities,SeriesSearch,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utilities\SeriesSearch.cs,CheckTitlesFuzzy,The following statement contains a magic number: query.Length <= 4 || title.Length <= 4
Magic Number,Shoko.Server.Utilities,SeriesSearch,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utilities\SeriesSearch.cs,CheckTitlesFuzzy,The following statement contains a magic number: query.Length <= 4 || title.Length <= 4
Magic Number,Shoko.Server.Utilities,SeriesSearch,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utilities\SeriesSearch.cs,SearchTagsEquals,The following statement contains a magic number: series.AddRange(allTags.Where(a => a.TagName.Equals(query' StringComparison.InvariantCultureIgnoreCase)).SelectMany(tag =>              {                  return RepoFactory.AniDB_Anime_Tag.GetByTagID(tag.TagID)                      .Select(xref =>                      {                          var anime = RepoFactory.AnimeSeries.GetByAnimeID(xref.AnimeID);                          // Because we are searching tags' then getting series from it' we need to make sure it's allowed                          // for example' porn could have the drugs tag' even though it's not a "porn tag"                          if (anime?.GetAnime()?.GetAllTags().FindInEnumerable(user.GetHideCategories()) ?? true) return null;                          return new SearchResult                          {                              Distance = (600 - xref.Weight) / 600D'                              Index = 0'                              Match = tag.TagName'                              Result = anime'                              ExactMatch = true                          };                      }).Where(a => a != null).OrderBy(a => a.Distance).ThenBy(a => a.Result.GetSeriesName());              }).Take(limit));
Magic Number,Shoko.Server.Utilities,SeriesSearch,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utilities\SeriesSearch.cs,SearchTagsEquals,The following statement contains a magic number: series.AddRange(allTags.Where(a => a.TagName.Equals(query' StringComparison.InvariantCultureIgnoreCase)).SelectMany(tag =>              {                  return RepoFactory.AniDB_Anime_Tag.GetByTagID(tag.TagID)                      .Select(xref =>                      {                          var anime = RepoFactory.AnimeSeries.GetByAnimeID(xref.AnimeID);                          // Because we are searching tags' then getting series from it' we need to make sure it's allowed                          // for example' porn could have the drugs tag' even though it's not a "porn tag"                          if (anime?.GetAnime()?.GetAllTags().FindInEnumerable(user.GetHideCategories()) ?? true) return null;                          return new SearchResult                          {                              Distance = (600 - xref.Weight) / 600D'                              Index = 0'                              Match = tag.TagName'                              Result = anime'                              ExactMatch = true                          };                      }).Where(a => a != null).OrderBy(a => a.Distance).ThenBy(a => a.Result.GetSeriesName());              }).Take(limit));
Magic Number,Shoko.Server.Utilities,SeriesSearch,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utilities\SeriesSearch.cs,SearchTagsFuzzy,The following statement contains a magic number: series.AddRange(tags.SelectMany(tag =>              {                  return RepoFactory.AniDB_Anime_Tag.GetByTagID(tag.Result.TagID)                      .Select(xref =>                      {                          var anime = RepoFactory.AnimeSeries.GetByAnimeID(xref.AnimeID);                          // Because we are searching tags' then getting series from it' we need to make sure it's allowed                          // for example' porn could have the drugs tag' even though it's not a "porn tag"                          if (anime?.GetAnime()?.GetAllTags().FindInEnumerable(user.GetHideCategories()) ?? true) return null;                          return new SearchResult                          {                              Distance = (600D - xref.Weight) / 600'                              Index = tag.Index'                              Match = tag.Result.TagName'                              Result = anime'                              ExactMatch = tag.ExactMatch                          };                      }).Where(a => a != null).OrderBy(a => a.Distance).ThenBy(a => a.Result.GetSeriesName()).ToList();              }).Take(limit));
Magic Number,Shoko.Server.Utilities,SeriesSearch,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utilities\SeriesSearch.cs,SearchTagsFuzzy,The following statement contains a magic number: series.AddRange(tags.SelectMany(tag =>              {                  return RepoFactory.AniDB_Anime_Tag.GetByTagID(tag.Result.TagID)                      .Select(xref =>                      {                          var anime = RepoFactory.AnimeSeries.GetByAnimeID(xref.AnimeID);                          // Because we are searching tags' then getting series from it' we need to make sure it's allowed                          // for example' porn could have the drugs tag' even though it's not a "porn tag"                          if (anime?.GetAnime()?.GetAllTags().FindInEnumerable(user.GetHideCategories()) ?? true) return null;                          return new SearchResult                          {                              Distance = (600D - xref.Weight) / 600'                              Index = tag.Index'                              Match = tag.Result.TagName'                              Result = anime'                              ExactMatch = tag.ExactMatch                          };                      }).Where(a => a != null).OrderBy(a => a.Distance).ThenBy(a => a.Result.GetSeriesName()).ToList();              }).Take(limit));
Magic Number,Shoko.Server.Utilities.MediaInfoLib,MediaInfo,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utilities\MediaInfoLib\MediaInfo.cs,GetFilenameAndArgsForOS,The following statement contains a magic number: string fileName = (char)34 + file + (char)34;
Magic Number,Shoko.Server.Utilities.MediaInfoLib,MediaInfo,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utilities\MediaInfoLib\MediaInfo.cs,GetFilenameAndArgsForOS,The following statement contains a magic number: string fileName = (char)34 + file + (char)34;
Magic Number,Shoko.Server.Utilities.MediaInfoLib,MediaInfoParserInternal,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utilities\MediaInfoLib\MediaInfoParserInternal.cs,GetLanguageFromCode3,The following statement contains a magic number: languages[x' 2] == code3
Magic Number,Shoko.Server.Utilities.MediaInfoLib,MediaInfoParserInternal,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utilities\MediaInfoLib\MediaInfoParserInternal.cs,TranslateVideoStream,The following statement contains a magic number: s.Bitrate = (int) Math.Round(brate / 1000F);
Magic Number,Shoko.Server.Utilities.MediaInfoLib,MediaInfoParserInternal,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utilities\MediaInfoLib\MediaInfoParserInternal.cs,TranslateVideoStream,The following statement contains a magic number: switch (rot)                  {                      case 90F:                          s.Orientation = 9;                          break;                      case 180F:                          s.Orientation = 3;                          break;                      case 270F:                          s.Orientation = 6;                          break;                  }
Magic Number,Shoko.Server.Utilities.MediaInfoLib,MediaInfoParserInternal,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utilities\MediaInfoLib\MediaInfoParserInternal.cs,TranslateVideoStream,The following statement contains a magic number: switch (rot)                  {                      case 90F:                          s.Orientation = 9;                          break;                      case 180F:                          s.Orientation = 3;                          break;                      case 270F:                          s.Orientation = 6;                          break;                  }
Magic Number,Shoko.Server.Utilities.MediaInfoLib,MediaInfoParserInternal,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utilities\MediaInfoLib\MediaInfoParserInternal.cs,TranslateVideoStream,The following statement contains a magic number: switch (rot)                  {                      case 90F:                          s.Orientation = 9;                          break;                      case 180F:                          s.Orientation = 3;                          break;                      case 270F:                          s.Orientation = 6;                          break;                  }
Magic Number,Shoko.Server.Utilities.MediaInfoLib,MediaInfoParserInternal,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utilities\MediaInfoLib\MediaInfoParserInternal.cs,TranslateVideoStream,The following statement contains a magic number: switch (rot)                  {                      case 90F:                          s.Orientation = 9;                          break;                      case 180F:                          s.Orientation = 3;                          break;                      case 270F:                          s.Orientation = 6;                          break;                  }
Magic Number,Shoko.Server.Utilities.MediaInfoLib,MediaInfoParserInternal,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utilities\MediaInfoLib\MediaInfoParserInternal.cs,TranslateVideoStream,The following statement contains a magic number: switch (rot)                  {                      case 90F:                          s.Orientation = 9;                          break;                      case 180F:                          s.Orientation = 3;                          break;                      case 270F:                          s.Orientation = 6;                          break;                  }
Magic Number,Shoko.Server.Utilities.MediaInfoLib,MediaInfoParserInternal,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utilities\MediaInfoLib\MediaInfoParserInternal.cs,TranslateVideoStream,The following statement contains a magic number: switch (rot)                  {                      case 90F:                          s.Orientation = 9;                          break;                      case 180F:                          s.Orientation = 3;                          break;                      case 270F:                          s.Orientation = 6;                          break;                  }
Magic Number,Shoko.Server.Utilities.MediaInfoLib,MediaInfoParserInternal,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utilities\MediaInfoLib\MediaInfoParserInternal.cs,TranslateVideoStream,The following statement contains a magic number: s.Level == 31 && s.Cabac == 0
Magic Number,Shoko.Server.Utilities.MediaInfoLib,MediaInfoParserInternal,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utilities\MediaInfoLib\MediaInfoParserInternal.cs,TranslateAudioStream,The following statement contains a magic number: s.StreamType = 2;
Magic Number,Shoko.Server.Utilities.MediaInfoLib,MediaInfoParserInternal,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utilities\MediaInfoLib\MediaInfoParserInternal.cs,TranslateAudioStream,The following statement contains a magic number: s.Bitrate = (int) Math.Round(brate / 1000F);
Magic Number,Shoko.Server.Utilities.MediaInfoLib,MediaInfoParserInternal,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utilities\MediaInfoLib\MediaInfoParserInternal.cs,TranslateAudioStream,The following statement contains a magic number: !string.IsNullOrEmpty(fset) && (fset == "Little / Signed") && (s.Codec == "pcm") && (bitdepth == 16)
Magic Number,Shoko.Server.Utilities.MediaInfoLib,MediaInfoParserInternal,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utilities\MediaInfoLib\MediaInfoParserInternal.cs,TranslateTextStream,The following statement contains a magic number: Stream s = new Stream              {                  Id = m.GetInt(StreamKind.Text' num' "UniqueID")'                  CodecID = m.Get(StreamKind.Text' num' "CodecID")'                    StreamType = 3              };
Magic Number,Shoko.Server.Utilities.MediaInfoLib,MediaInfoParserInternal,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utilities\MediaInfoLib\MediaInfoParserInternal.cs,GetMediaInfo,The following statement contains a magic number: m.Bitrate = (int) Math.Round(brate / 1000F);
Magic Number,Shoko.Server.Utilities.MediaInfoLib,MediaInfoParserInternal,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utilities\MediaInfoLib\MediaInfoParserInternal.cs,ConvertAsync,The following statement contains a magic number: byte[] buffer = new byte[8];
Magic Number,Shoko.Server.Utilities.MediaInfoLib,MediaInfoParserInternal,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utilities\MediaInfoLib\MediaInfoParserInternal.cs,ConvertAsync,The following statement contains a magic number: fs.Read(buffer' 0' 4);
Magic Number,Shoko.Server.Utilities.MediaInfoLib,MediaInfoParserInternal,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utilities\MediaInfoLib\MediaInfoParserInternal.cs,ConvertAsync,The following statement contains a magic number: int siz = (buffer[0] << 24) | (buffer[1] << 16) | (buffer[2] << 8) | buffer[3];
Magic Number,Shoko.Server.Utilities.MediaInfoLib,MediaInfoParserInternal,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utilities\MediaInfoLib\MediaInfoParserInternal.cs,ConvertAsync,The following statement contains a magic number: int siz = (buffer[0] << 24) | (buffer[1] << 16) | (buffer[2] << 8) | buffer[3];
Magic Number,Shoko.Server.Utilities.MediaInfoLib,MediaInfoParserInternal,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utilities\MediaInfoLib\MediaInfoParserInternal.cs,ConvertAsync,The following statement contains a magic number: int siz = (buffer[0] << 24) | (buffer[1] << 16) | (buffer[2] << 8) | buffer[3];
Magic Number,Shoko.Server.Utilities.MediaInfoLib,MediaInfoParserInternal,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utilities\MediaInfoLib\MediaInfoParserInternal.cs,ConvertAsync,The following statement contains a magic number: int siz = (buffer[0] << 24) | (buffer[1] << 16) | (buffer[2] << 8) | buffer[3];
Magic Number,Shoko.Server.Utilities.MediaInfoLib,MediaInfoParserInternal,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utilities\MediaInfoLib\MediaInfoParserInternal.cs,ConvertAsync,The following statement contains a magic number: int siz = (buffer[0] << 24) | (buffer[1] << 16) | (buffer[2] << 8) | buffer[3];
Magic Number,Shoko.Server.Utilities.MediaInfoLib,MediaInfoParserInternal,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utilities\MediaInfoLib\MediaInfoParserInternal.cs,ConvertAsync,The following statement contains a magic number: fs.Read(buffer' 0' 8);
Magic Number,Shoko.Server.Utilities.MediaInfoLib,MediaInfoParserInternal,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utilities\MediaInfoLib\MediaInfoParserInternal.cs,ConvertAsync,The following statement contains a magic number: siz = (buffer[0] << 24) | (buffer[1] << 16) | (buffer[2] << 8) | (buffer[3] - 8);
Magic Number,Shoko.Server.Utilities.MediaInfoLib,MediaInfoParserInternal,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utilities\MediaInfoLib\MediaInfoParserInternal.cs,ConvertAsync,The following statement contains a magic number: siz = (buffer[0] << 24) | (buffer[1] << 16) | (buffer[2] << 8) | (buffer[3] - 8);
Magic Number,Shoko.Server.Utilities.MediaInfoLib,MediaInfoParserInternal,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utilities\MediaInfoLib\MediaInfoParserInternal.cs,ConvertAsync,The following statement contains a magic number: siz = (buffer[0] << 24) | (buffer[1] << 16) | (buffer[2] << 8) | (buffer[3] - 8);
Magic Number,Shoko.Server.Utilities.MediaInfoLib,MediaInfoParserInternal,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utilities\MediaInfoLib\MediaInfoParserInternal.cs,ConvertAsync,The following statement contains a magic number: siz = (buffer[0] << 24) | (buffer[1] << 16) | (buffer[2] << 8) | (buffer[3] - 8);
Magic Number,Shoko.Server.Utilities.MediaInfoLib,MediaInfoParserInternal,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utilities\MediaInfoLib\MediaInfoParserInternal.cs,ConvertAsync,The following statement contains a magic number: siz = (buffer[0] << 24) | (buffer[1] << 16) | (buffer[2] << 8) | (buffer[3] - 8);
Magic Number,Shoko.Server.Utilities.MediaInfoLib,MediaInfoParserInternal,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utilities\MediaInfoLib\MediaInfoParserInternal.cs,ConvertAsync,The following statement contains a magic number: siz = (buffer[0] << 24) | (buffer[1] << 16) | (buffer[2] << 8) | (buffer[3] - 8);
Magic Number,Shoko.Server.Utilities.MediaInfoLib,MediaInfoParserInternal,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utilities\MediaInfoLib\MediaInfoParserInternal.cs,ConvertAsync,The following statement contains a magic number: fs.Read(buffer' 0' 8);
Magic Number,Shoko.Server.Utilities.MediaInfoLib,MediaInfoParserInternal,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utilities\MediaInfoLib\MediaInfoParserInternal.cs,ConvertAsync,The following statement contains a magic number: (buffer[4] == 'f') && (buffer[5] == 'r') && (buffer[6] == 'e') && (buffer[7] == 'e')
Magic Number,Shoko.Server.Utilities.MediaInfoLib,MediaInfoParserInternal,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utilities\MediaInfoLib\MediaInfoParserInternal.cs,ConvertAsync,The following statement contains a magic number: (buffer[4] == 'f') && (buffer[5] == 'r') && (buffer[6] == 'e') && (buffer[7] == 'e')
Magic Number,Shoko.Server.Utilities.MediaInfoLib,MediaInfoParserInternal,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utilities\MediaInfoLib\MediaInfoParserInternal.cs,ConvertAsync,The following statement contains a magic number: (buffer[4] == 'f') && (buffer[5] == 'r') && (buffer[6] == 'e') && (buffer[7] == 'e')
Magic Number,Shoko.Server.Utilities.MediaInfoLib,MediaInfoParserInternal,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utilities\MediaInfoLib\MediaInfoParserInternal.cs,ConvertAsync,The following statement contains a magic number: (buffer[4] == 'f') && (buffer[5] == 'r') && (buffer[6] == 'e') && (buffer[7] == 'e')
Magic Number,Shoko.Server.Utilities.MediaInfoLib,MediaInfoParserInternal,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utilities\MediaInfoLib\MediaInfoParserInternal.cs,ConvertAsync,The following statement contains a magic number: siz = ((buffer[0] << 24) | (buffer[1] << 16) | (buffer[2] << 8) | buffer[3]) - 8;
Magic Number,Shoko.Server.Utilities.MediaInfoLib,MediaInfoParserInternal,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utilities\MediaInfoLib\MediaInfoParserInternal.cs,ConvertAsync,The following statement contains a magic number: siz = ((buffer[0] << 24) | (buffer[1] << 16) | (buffer[2] << 8) | buffer[3]) - 8;
Magic Number,Shoko.Server.Utilities.MediaInfoLib,MediaInfoParserInternal,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utilities\MediaInfoLib\MediaInfoParserInternal.cs,ConvertAsync,The following statement contains a magic number: siz = ((buffer[0] << 24) | (buffer[1] << 16) | (buffer[2] << 8) | buffer[3]) - 8;
Magic Number,Shoko.Server.Utilities.MediaInfoLib,MediaInfoParserInternal,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utilities\MediaInfoLib\MediaInfoParserInternal.cs,ConvertAsync,The following statement contains a magic number: siz = ((buffer[0] << 24) | (buffer[1] << 16) | (buffer[2] << 8) | buffer[3]) - 8;
Magic Number,Shoko.Server.Utilities.MediaInfoLib,MediaInfoParserInternal,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utilities\MediaInfoLib\MediaInfoParserInternal.cs,ConvertAsync,The following statement contains a magic number: siz = ((buffer[0] << 24) | (buffer[1] << 16) | (buffer[2] << 8) | buffer[3]) - 8;
Magic Number,Shoko.Server.Utilities.MediaInfoLib,MediaInfoParserInternal,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utilities\MediaInfoLib\MediaInfoParserInternal.cs,ConvertAsync,The following statement contains a magic number: siz = ((buffer[0] << 24) | (buffer[1] << 16) | (buffer[2] << 8) | buffer[3]) - 8;
Magic Number,Shoko.Server.Utilities.MediaInfoLib,MediaInfoParserInternal,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utilities\MediaInfoLib\MediaInfoParserInternal.cs,ConvertAsync,The following statement contains a magic number: (buffer[4] == 'm') && (buffer[5] == 'o') && (buffer[6] == 'o') && (buffer[7] == 'v')
Magic Number,Shoko.Server.Utilities.MediaInfoLib,MediaInfoParserInternal,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utilities\MediaInfoLib\MediaInfoParserInternal.cs,ConvertAsync,The following statement contains a magic number: (buffer[4] == 'm') && (buffer[5] == 'o') && (buffer[6] == 'o') && (buffer[7] == 'v')
Magic Number,Shoko.Server.Utilities.MediaInfoLib,MediaInfoParserInternal,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utilities\MediaInfoLib\MediaInfoParserInternal.cs,ConvertAsync,The following statement contains a magic number: (buffer[4] == 'm') && (buffer[5] == 'o') && (buffer[6] == 'o') && (buffer[7] == 'v')
Magic Number,Shoko.Server.Utilities.MediaInfoLib,MediaInfoParserInternal,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utilities\MediaInfoLib\MediaInfoParserInternal.cs,ConvertAsync,The following statement contains a magic number: (buffer[4] == 'm') && (buffer[5] == 'o') && (buffer[6] == 'o') && (buffer[7] == 'v')
Magic Number,Shoko.Server.Utilities.MediaInfoLib,MediaInfoParserInternal,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utilities\MediaInfoLib\MediaInfoParserInternal.cs,FindInBuffer,The following statement contains a magic number: start + 8 >= max
Magic Number,Shoko.Server.Utilities.MediaInfoLib,MediaInfoParserInternal,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utilities\MediaInfoLib\MediaInfoParserInternal.cs,FindInBuffer,The following statement contains a magic number: pos = start + 8;
Magic Number,Shoko.Server.Utilities.MediaInfoLib,MediaInfoParserInternal,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utilities\MediaInfoLib\MediaInfoParserInternal.cs,FindInBuffer,The following statement contains a magic number: posmax =                          ((buffer[start] << 24) | (buffer[start + 1] << 16) | (buffer[start + 2] << 8) |                           buffer[start + 3]) +                          start;
Magic Number,Shoko.Server.Utilities.MediaInfoLib,MediaInfoParserInternal,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utilities\MediaInfoLib\MediaInfoParserInternal.cs,FindInBuffer,The following statement contains a magic number: posmax =                          ((buffer[start] << 24) | (buffer[start + 1] << 16) | (buffer[start + 2] << 8) |                           buffer[start + 3]) +                          start;
Magic Number,Shoko.Server.Utilities.MediaInfoLib,MediaInfoParserInternal,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utilities\MediaInfoLib\MediaInfoParserInternal.cs,FindInBuffer,The following statement contains a magic number: posmax =                          ((buffer[start] << 24) | (buffer[start + 1] << 16) | (buffer[start + 2] << 8) |                           buffer[start + 3]) +                          start;
Magic Number,Shoko.Server.Utilities.MediaInfoLib,MediaInfoParserInternal,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utilities\MediaInfoLib\MediaInfoParserInternal.cs,FindInBuffer,The following statement contains a magic number: posmax =                          ((buffer[start] << 24) | (buffer[start + 1] << 16) | (buffer[start + 2] << 8) |                           buffer[start + 3]) +                          start;
Magic Number,Shoko.Server.Utilities.MediaInfoLib,MediaInfoParserInternal,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utilities\MediaInfoLib\MediaInfoParserInternal.cs,FindInBuffer,The following statement contains a magic number: posmax =                          ((buffer[start] << 24) | (buffer[start + 1] << 16) | (buffer[start + 2] << 8) |                           buffer[start + 3]) +                          start;
Magic Number,Shoko.Server.Utilities.MediaInfoLib,MediaInfoParserInternal,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utilities\MediaInfoLib\MediaInfoParserInternal.cs,FindInBuffer,The following statement contains a magic number: (buffer[start + 4] == atom[0]) && (buffer[start + 5] == atom[1]) &&                      (buffer[start + 6] == atom[2]) &&                      (buffer[start + 7] == atom[3])
Magic Number,Shoko.Server.Utilities.MediaInfoLib,MediaInfoParserInternal,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utilities\MediaInfoLib\MediaInfoParserInternal.cs,FindInBuffer,The following statement contains a magic number: (buffer[start + 4] == atom[0]) && (buffer[start + 5] == atom[1]) &&                      (buffer[start + 6] == atom[2]) &&                      (buffer[start + 7] == atom[3])
Magic Number,Shoko.Server.Utilities.MediaInfoLib,MediaInfoParserInternal,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utilities\MediaInfoLib\MediaInfoParserInternal.cs,FindInBuffer,The following statement contains a magic number: (buffer[start + 4] == atom[0]) && (buffer[start + 5] == atom[1]) &&                      (buffer[start + 6] == atom[2]) &&                      (buffer[start + 7] == atom[3])
Magic Number,Shoko.Server.Utilities.MediaInfoLib,MediaInfoParserInternal,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utilities\MediaInfoLib\MediaInfoParserInternal.cs,FindInBuffer,The following statement contains a magic number: (buffer[start + 4] == atom[0]) && (buffer[start + 5] == atom[1]) &&                      (buffer[start + 6] == atom[2]) &&                      (buffer[start + 7] == atom[3])
Magic Number,Shoko.Server.Utilities.MediaInfoLib,MediaInfoParserInternal,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utilities\MediaInfoLib\MediaInfoParserInternal.cs,FindInBuffer,The following statement contains a magic number: (buffer[start + 4] == atom[0]) && (buffer[start + 5] == atom[1]) &&                      (buffer[start + 6] == atom[2]) &&                      (buffer[start + 7] == atom[3])
Magic Number,Shoko.Server.Utilities.MediaInfoLib,MediaInfoParserInternal,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utilities\MediaInfoLib\MediaInfoParserInternal.cs,FindInBuffer,The following statement contains a magic number: (buffer[start + 4] == atom[0]) && (buffer[start + 5] == atom[1]) &&                      (buffer[start + 6] == atom[2]) &&                      (buffer[start + 7] == atom[3])
Magic Number,Shoko.Server.Utilities.MediaInfoLib,MediaInfoParserInternal,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utilities\MediaInfoLib\MediaInfoParserInternal.cs,FindInBuffer,The following statement contains a magic number: start += (buffer[start] << 24) | (buffer[start + 1] << 16) | (buffer[start + 2] << 8) |                           buffer[start + 3];
Magic Number,Shoko.Server.Utilities.MediaInfoLib,MediaInfoParserInternal,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utilities\MediaInfoLib\MediaInfoParserInternal.cs,FindInBuffer,The following statement contains a magic number: start += (buffer[start] << 24) | (buffer[start + 1] << 16) | (buffer[start + 2] << 8) |                           buffer[start + 3];
Magic Number,Shoko.Server.Utilities.MediaInfoLib,MediaInfoParserInternal,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utilities\MediaInfoLib\MediaInfoParserInternal.cs,FindInBuffer,The following statement contains a magic number: start += (buffer[start] << 24) | (buffer[start + 1] << 16) | (buffer[start + 2] << 8) |                           buffer[start + 3];
Magic Number,Shoko.Server.Utilities.MediaInfoLib,MediaInfoParserInternal,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utilities\MediaInfoLib\MediaInfoParserInternal.cs,FindInBuffer,The following statement contains a magic number: start += (buffer[start] << 24) | (buffer[start + 1] << 16) | (buffer[start + 2] << 8) |                           buffer[start + 3];
Magic Number,Shoko.Server.Utilities.MediaInfoLib,MediaInfoParserInternal,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utilities\MediaInfoLib\MediaInfoParserInternal.cs,FindInBuffer,The following statement contains a magic number: start += (buffer[start] << 24) | (buffer[start + 1] << 16) | (buffer[start + 2] << 8) |                           buffer[start + 3];
Magic Number,Shoko.Server.Utilities.MediaInfoLib,MediaInfoParserInternal,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utilities\MediaInfoLib\MediaInfoParserInternal.cs,MediaInfoParserInternal,The following statement contains a magic number: ResolutionArea = new Dictionary<int' string>              {                  {3840 * 2160' "2160p"}'                  {2560 * 1440' "1440p"}'                  {1920 * 1080' "1080p"}'                  {1280 * 720' "720p"}'                  {1024 * 576' "576p"}'                  {853 * 480' "480p"}              };
Magic Number,Shoko.Server.Utilities.MediaInfoLib,MediaInfoParserInternal,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utilities\MediaInfoLib\MediaInfoParserInternal.cs,MediaInfoParserInternal,The following statement contains a magic number: ResolutionArea = new Dictionary<int' string>              {                  {3840 * 2160' "2160p"}'                  {2560 * 1440' "1440p"}'                  {1920 * 1080' "1080p"}'                  {1280 * 720' "720p"}'                  {1024 * 576' "576p"}'                  {853 * 480' "480p"}              };
Magic Number,Shoko.Server.Utilities.MediaInfoLib,MediaInfoParserInternal,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utilities\MediaInfoLib\MediaInfoParserInternal.cs,MediaInfoParserInternal,The following statement contains a magic number: ResolutionArea = new Dictionary<int' string>              {                  {3840 * 2160' "2160p"}'                  {2560 * 1440' "1440p"}'                  {1920 * 1080' "1080p"}'                  {1280 * 720' "720p"}'                  {1024 * 576' "576p"}'                  {853 * 480' "480p"}              };
Magic Number,Shoko.Server.Utilities.MediaInfoLib,MediaInfoParserInternal,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utilities\MediaInfoLib\MediaInfoParserInternal.cs,MediaInfoParserInternal,The following statement contains a magic number: ResolutionArea = new Dictionary<int' string>              {                  {3840 * 2160' "2160p"}'                  {2560 * 1440' "1440p"}'                  {1920 * 1080' "1080p"}'                  {1280 * 720' "720p"}'                  {1024 * 576' "576p"}'                  {853 * 480' "480p"}              };
Magic Number,Shoko.Server.Utilities.MediaInfoLib,MediaInfoParserInternal,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utilities\MediaInfoLib\MediaInfoParserInternal.cs,MediaInfoParserInternal,The following statement contains a magic number: ResolutionArea = new Dictionary<int' string>              {                  {3840 * 2160' "2160p"}'                  {2560 * 1440' "1440p"}'                  {1920 * 1080' "1080p"}'                  {1280 * 720' "720p"}'                  {1024 * 576' "576p"}'                  {853 * 480' "480p"}              };
Magic Number,Shoko.Server.Utilities.MediaInfoLib,MediaInfoParserInternal,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utilities\MediaInfoLib\MediaInfoParserInternal.cs,MediaInfoParserInternal,The following statement contains a magic number: ResolutionArea = new Dictionary<int' string>              {                  {3840 * 2160' "2160p"}'                  {2560 * 1440' "1440p"}'                  {1920 * 1080' "1080p"}'                  {1280 * 720' "720p"}'                  {1024 * 576' "576p"}'                  {853 * 480' "480p"}              };
Magic Number,Shoko.Server.Utilities.MediaInfoLib,MediaInfoParserInternal,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utilities\MediaInfoLib\MediaInfoParserInternal.cs,MediaInfoParserInternal,The following statement contains a magic number: ResolutionArea = new Dictionary<int' string>              {                  {3840 * 2160' "2160p"}'                  {2560 * 1440' "1440p"}'                  {1920 * 1080' "1080p"}'                  {1280 * 720' "720p"}'                  {1024 * 576' "576p"}'                  {853 * 480' "480p"}              };
Magic Number,Shoko.Server.Utilities.MediaInfoLib,MediaInfoParserInternal,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utilities\MediaInfoLib\MediaInfoParserInternal.cs,MediaInfoParserInternal,The following statement contains a magic number: ResolutionArea = new Dictionary<int' string>              {                  {3840 * 2160' "2160p"}'                  {2560 * 1440' "1440p"}'                  {1920 * 1080' "1080p"}'                  {1280 * 720' "720p"}'                  {1024 * 576' "576p"}'                  {853 * 480' "480p"}              };
Magic Number,Shoko.Server.Utilities.MediaInfoLib,MediaInfoParserInternal,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utilities\MediaInfoLib\MediaInfoParserInternal.cs,MediaInfoParserInternal,The following statement contains a magic number: ResolutionArea = new Dictionary<int' string>              {                  {3840 * 2160' "2160p"}'                  {2560 * 1440' "1440p"}'                  {1920 * 1080' "1080p"}'                  {1280 * 720' "720p"}'                  {1024 * 576' "576p"}'                  {853 * 480' "480p"}              };
Magic Number,Shoko.Server.Utilities.MediaInfoLib,MediaInfoParserInternal,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utilities\MediaInfoLib\MediaInfoParserInternal.cs,MediaInfoParserInternal,The following statement contains a magic number: ResolutionArea = new Dictionary<int' string>              {                  {3840 * 2160' "2160p"}'                  {2560 * 1440' "1440p"}'                  {1920 * 1080' "1080p"}'                  {1280 * 720' "720p"}'                  {1024 * 576' "576p"}'                  {853 * 480' "480p"}              };
Magic Number,Shoko.Server.Utilities.MediaInfoLib,MediaInfoParserInternal,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utilities\MediaInfoLib\MediaInfoParserInternal.cs,MediaInfoParserInternal,The following statement contains a magic number: ResolutionArea = new Dictionary<int' string>              {                  {3840 * 2160' "2160p"}'                  {2560 * 1440' "1440p"}'                  {1920 * 1080' "1080p"}'                  {1280 * 720' "720p"}'                  {1024 * 576' "576p"}'                  {853 * 480' "480p"}              };
Magic Number,Shoko.Server.Utilities.MediaInfoLib,MediaInfoParserInternal,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utilities\MediaInfoLib\MediaInfoParserInternal.cs,MediaInfoParserInternal,The following statement contains a magic number: ResolutionArea = new Dictionary<int' string>              {                  {3840 * 2160' "2160p"}'                  {2560 * 1440' "1440p"}'                  {1920 * 1080' "1080p"}'                  {1280 * 720' "720p"}'                  {1024 * 576' "576p"}'                  {853 * 480' "480p"}              };
Magic Number,Shoko.Server.Utilities.MediaInfoLib,MediaInfoParserInternal,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utilities\MediaInfoLib\MediaInfoParserInternal.cs,MediaInfoParserInternal,The following statement contains a magic number: ResolutionArea43 = new Dictionary<int' string>              {                  {720 * 576' "576p"}'                  {720 * 480' "480p"}'                  {480 * 360' "360p"}'                  {320 * 240' "240p"}              };
Magic Number,Shoko.Server.Utilities.MediaInfoLib,MediaInfoParserInternal,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utilities\MediaInfoLib\MediaInfoParserInternal.cs,MediaInfoParserInternal,The following statement contains a magic number: ResolutionArea43 = new Dictionary<int' string>              {                  {720 * 576' "576p"}'                  {720 * 480' "480p"}'                  {480 * 360' "360p"}'                  {320 * 240' "240p"}              };
Magic Number,Shoko.Server.Utilities.MediaInfoLib,MediaInfoParserInternal,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utilities\MediaInfoLib\MediaInfoParserInternal.cs,MediaInfoParserInternal,The following statement contains a magic number: ResolutionArea43 = new Dictionary<int' string>              {                  {720 * 576' "576p"}'                  {720 * 480' "480p"}'                  {480 * 360' "360p"}'                  {320 * 240' "240p"}              };
Magic Number,Shoko.Server.Utilities.MediaInfoLib,MediaInfoParserInternal,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utilities\MediaInfoLib\MediaInfoParserInternal.cs,MediaInfoParserInternal,The following statement contains a magic number: ResolutionArea43 = new Dictionary<int' string>              {                  {720 * 576' "576p"}'                  {720 * 480' "480p"}'                  {480 * 360' "360p"}'                  {320 * 240' "240p"}              };
Magic Number,Shoko.Server.Utilities.MediaInfoLib,MediaInfoParserInternal,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utilities\MediaInfoLib\MediaInfoParserInternal.cs,MediaInfoParserInternal,The following statement contains a magic number: ResolutionArea43 = new Dictionary<int' string>              {                  {720 * 576' "576p"}'                  {720 * 480' "480p"}'                  {480 * 360' "360p"}'                  {320 * 240' "240p"}              };
Magic Number,Shoko.Server.Utilities.MediaInfoLib,MediaInfoParserInternal,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utilities\MediaInfoLib\MediaInfoParserInternal.cs,MediaInfoParserInternal,The following statement contains a magic number: ResolutionArea43 = new Dictionary<int' string>              {                  {720 * 576' "576p"}'                  {720 * 480' "480p"}'                  {480 * 360' "360p"}'                  {320 * 240' "240p"}              };
Magic Number,Shoko.Server.Utilities.MediaInfoLib,MediaInfoParserInternal,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utilities\MediaInfoLib\MediaInfoParserInternal.cs,MediaInfoParserInternal,The following statement contains a magic number: ResolutionArea43 = new Dictionary<int' string>              {                  {720 * 576' "576p"}'                  {720 * 480' "480p"}'                  {480 * 360' "360p"}'                  {320 * 240' "240p"}              };
Magic Number,Shoko.Server.Utilities.MediaInfoLib,MediaInfoParserInternal,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utilities\MediaInfoLib\MediaInfoParserInternal.cs,MediaInfoParserInternal,The following statement contains a magic number: ResolutionArea43 = new Dictionary<int' string>              {                  {720 * 576' "576p"}'                  {720 * 480' "480p"}'                  {480 * 360' "360p"}'                  {320 * 240' "240p"}              };
Magic Number,Shoko.Server.Utilities.MediaInfoLib,MediaInfoParserInternal,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utilities\MediaInfoLib\MediaInfoParserInternal.cs,GetResolution,The following statement contains a magic number: const double sixteenNine = 1.777778;
Magic Number,Shoko.Server.Utilities.MediaInfoLib,MediaInfoParserInternal,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utilities\MediaInfoLib\MediaInfoParserInternal.cs,GetResolution,The following statement contains a magic number: const double fourThirds = 1.333333;
Magic Number,Shoko.Server.Utilities.MediaInfoLib,MediaInfoParserInternal,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utilities\MediaInfoLib\MediaInfoParserInternal.cs,GetResolution,The following statement contains a magic number: Math.Abs(keyDist - double.MaxValue) < 0.01D
Magic Number,Shoko.Server.Utilities.MediaInfoLib,MediaInfoParserInternal,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utilities\MediaInfoLib\MediaInfoParserInternal.cs,GetAspectRatio,The following statement contains a magic number: return 1.33F;
Magic Number,Shoko.Server.Utilities.MediaInfoLib,MediaInfoParserInternal,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utilities\MediaInfoLib\MediaInfoParserInternal.cs,GetAspectRatio,The following statement contains a magic number: r < 1.5F
Magic Number,Shoko.Server.Utilities.MediaInfoLib,MediaInfoParserInternal,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utilities\MediaInfoLib\MediaInfoParserInternal.cs,GetAspectRatio,The following statement contains a magic number: return 1.66F;
Magic Number,Shoko.Server.Utilities.MediaInfoLib,MediaInfoParserInternal,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utilities\MediaInfoLib\MediaInfoParserInternal.cs,GetAspectRatio,The following statement contains a magic number: r < 1.72F
Magic Number,Shoko.Server.Utilities.MediaInfoLib,MediaInfoParserInternal,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utilities\MediaInfoLib\MediaInfoParserInternal.cs,GetAspectRatio,The following statement contains a magic number: return 1.78F;
Magic Number,Shoko.Server.Utilities.MediaInfoLib,MediaInfoParserInternal,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utilities\MediaInfoLib\MediaInfoParserInternal.cs,GetAspectRatio,The following statement contains a magic number: r < 1.815F
Magic Number,Shoko.Server.Utilities.MediaInfoLib,MediaInfoParserInternal,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utilities\MediaInfoLib\MediaInfoParserInternal.cs,GetAspectRatio,The following statement contains a magic number: return 1.85F;
Magic Number,Shoko.Server.Utilities.MediaInfoLib,MediaInfoParserInternal,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utilities\MediaInfoLib\MediaInfoParserInternal.cs,GetAspectRatio,The following statement contains a magic number: r < 2.025F
Magic Number,Shoko.Server.Utilities.MediaInfoLib,MediaInfoParserInternal,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utilities\MediaInfoLib\MediaInfoParserInternal.cs,GetAspectRatio,The following statement contains a magic number: return 2.20F;
Magic Number,Shoko.Server.Utilities.MediaInfoLib,MediaInfoParserInternal,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utilities\MediaInfoLib\MediaInfoParserInternal.cs,GetAspectRatio,The following statement contains a magic number: r < 2.275F
Magic Number,Shoko.Server.Utilities.MediaInfoLib,MediaInfoParserInternal,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utilities\MediaInfoLib\MediaInfoParserInternal.cs,GetAspectRatio,The following statement contains a magic number: return 2.35F;
Magic Number,UPnP,NAT,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utilities\UPnP.cs,Discover,The following statement contains a magic number: IPEndPoint ipe = new IPEndPoint(IPAddress.Broadcast' 1900);
Magic Number,UPnP,NAT,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utilities\UPnP.cs,Discover,The following statement contains a magic number: resp = resp.Substring(resp.ToLower().IndexOf("location:") + 9);
Magic Number,UPnP,NAT,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utilities\UPnP.cs,CombineUrls,The following statement contains a magic number: n = resp.IndexOf('/'' n + 3);
Magic Number,Shoko.Server.Providers.Azure,AzureWebAPI,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Providers\Azure\AzureWebAPI.cs,Get_AnimeXML,The following statement contains a magic number: content = content.Substring(0' 100);
Magic Number,Shoko.Server.Providers.Azure,AzureWebAPI,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Providers\Azure\AzureWebAPI.cs,Get_AnimeXML,The following statement contains a magic number: content.Length > 100
Magic Number,Shoko.Server.Providers.Azure,AzureWebAPI,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Providers\Azure\AzureWebAPI.cs,GetDataJson,The following statement contains a magic number: webReq.Timeout = 30000;
Magic Number,Shoko.Server.Providers.Azure,AzureWebAPI,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Providers\Azure\AzureWebAPI.cs,DeleteDataJson,The following statement contains a magic number: webReq.Timeout = 30000;
Magic Number,Shoko.Server.Providers.Azure,AzureWebAPI,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Providers\Azure\AzureWebAPI.cs,GetDataXML,The following statement contains a magic number: webReq.Timeout = 30000;
Magic Number,Shoko.Server.Providers.Azure,AzureWebAPI,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Providers\Azure\AzureWebAPI.cs,GetUserInfoData,The following statement contains a magic number: uinfo.LastEpisodeWatchedAsDate = DateTime.Now.AddDays(-5);
Magic Number,Shoko.Server.Providers.Azure,AzureWebAPI,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Providers\Azure\AzureWebAPI.cs,Send_FileHash,The following statement contains a magic number: inputs.Count < 25
Magic Number,Shoko.Server.Providers.Azure,AzureWebAPI,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Providers\Azure\AzureWebAPI.cs,Send_FileHash,The following statement contains a magic number: inputs.Count < 25
Magic Number,Shoko.Server.Providers.Azure,AzureWebAPI,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Providers\Azure\AzureWebAPI.cs,Get_FileHashWithTaskAsync,The following statement contains a magic number: await Task.WhenAny(task' Task.Delay(30000)) == task
Magic Number,Shoko.Server.Providers.Azure,AzureWebAPI,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Providers\Azure\AzureWebAPI.cs,Send_Media,The following statement contains a magic number: inputs.Count < 25
Magic Number,Shoko.Server.Providers.JMMAutoUpdates,JMMAutoUpdatesHelper,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Providers\JMMAutoUpdates\JMMAutoUpdatesHelper.cs,ConvertToAbsoluteVersion,The following statement contains a magic number: numbers.Length != 4
Magic Number,Shoko.Server.Providers.JMMAutoUpdates,JMMAutoUpdatesHelper,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Providers\JMMAutoUpdates\JMMAutoUpdatesHelper.cs,ConvertToAbsoluteVersion,The following statement contains a magic number: return int.Parse(numbers[3]) * 100 +                     int.Parse(numbers[2]) * 100 * 100 +                     int.Parse(numbers[1]) * 100 * 100 * 100 +                     int.Parse(numbers[0]) * 100 * 100 * 100 * 100;
Magic Number,Shoko.Server.Providers.JMMAutoUpdates,JMMAutoUpdatesHelper,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Providers\JMMAutoUpdates\JMMAutoUpdatesHelper.cs,ConvertToAbsoluteVersion,The following statement contains a magic number: return int.Parse(numbers[3]) * 100 +                     int.Parse(numbers[2]) * 100 * 100 +                     int.Parse(numbers[1]) * 100 * 100 * 100 +                     int.Parse(numbers[0]) * 100 * 100 * 100 * 100;
Magic Number,Shoko.Server.Providers.JMMAutoUpdates,JMMAutoUpdatesHelper,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Providers\JMMAutoUpdates\JMMAutoUpdatesHelper.cs,ConvertToAbsoluteVersion,The following statement contains a magic number: return int.Parse(numbers[3]) * 100 +                     int.Parse(numbers[2]) * 100 * 100 +                     int.Parse(numbers[1]) * 100 * 100 * 100 +                     int.Parse(numbers[0]) * 100 * 100 * 100 * 100;
Magic Number,Shoko.Server.Providers.JMMAutoUpdates,JMMAutoUpdatesHelper,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Providers\JMMAutoUpdates\JMMAutoUpdatesHelper.cs,ConvertToAbsoluteVersion,The following statement contains a magic number: return int.Parse(numbers[3]) * 100 +                     int.Parse(numbers[2]) * 100 * 100 +                     int.Parse(numbers[1]) * 100 * 100 * 100 +                     int.Parse(numbers[0]) * 100 * 100 * 100 * 100;
Magic Number,Shoko.Server.Providers.JMMAutoUpdates,JMMAutoUpdatesHelper,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Providers\JMMAutoUpdates\JMMAutoUpdatesHelper.cs,ConvertToAbsoluteVersion,The following statement contains a magic number: return int.Parse(numbers[3]) * 100 +                     int.Parse(numbers[2]) * 100 * 100 +                     int.Parse(numbers[1]) * 100 * 100 * 100 +                     int.Parse(numbers[0]) * 100 * 100 * 100 * 100;
Magic Number,Shoko.Server.Providers.JMMAutoUpdates,JMMAutoUpdatesHelper,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Providers\JMMAutoUpdates\JMMAutoUpdatesHelper.cs,ConvertToAbsoluteVersion,The following statement contains a magic number: return int.Parse(numbers[3]) * 100 +                     int.Parse(numbers[2]) * 100 * 100 +                     int.Parse(numbers[1]) * 100 * 100 * 100 +                     int.Parse(numbers[0]) * 100 * 100 * 100 * 100;
Magic Number,Shoko.Server.Providers.JMMAutoUpdates,JMMAutoUpdatesHelper,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Providers\JMMAutoUpdates\JMMAutoUpdatesHelper.cs,ConvertToAbsoluteVersion,The following statement contains a magic number: return int.Parse(numbers[3]) * 100 +                     int.Parse(numbers[2]) * 100 * 100 +                     int.Parse(numbers[1]) * 100 * 100 * 100 +                     int.Parse(numbers[0]) * 100 * 100 * 100 * 100;
Magic Number,Shoko.Server.Providers.JMMAutoUpdates,JMMAutoUpdatesHelper,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Providers\JMMAutoUpdates\JMMAutoUpdatesHelper.cs,ConvertToAbsoluteVersion,The following statement contains a magic number: return int.Parse(numbers[3]) * 100 +                     int.Parse(numbers[2]) * 100 * 100 +                     int.Parse(numbers[1]) * 100 * 100 * 100 +                     int.Parse(numbers[0]) * 100 * 100 * 100 * 100;
Magic Number,Shoko.Server.Providers.JMMAutoUpdates,JMMAutoUpdatesHelper,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Providers\JMMAutoUpdates\JMMAutoUpdatesHelper.cs,ConvertToAbsoluteVersion,The following statement contains a magic number: return int.Parse(numbers[3]) * 100 +                     int.Parse(numbers[2]) * 100 * 100 +                     int.Parse(numbers[1]) * 100 * 100 * 100 +                     int.Parse(numbers[0]) * 100 * 100 * 100 * 100;
Magic Number,Shoko.Server.Providers.JMMAutoUpdates,JMMAutoUpdatesHelper,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Providers\JMMAutoUpdates\JMMAutoUpdatesHelper.cs,ConvertToAbsoluteVersion,The following statement contains a magic number: return int.Parse(numbers[3]) * 100 +                     int.Parse(numbers[2]) * 100 * 100 +                     int.Parse(numbers[1]) * 100 * 100 * 100 +                     int.Parse(numbers[0]) * 100 * 100 * 100 * 100;
Magic Number,Shoko.Server.Providers.JMMAutoUpdates,JMMAutoUpdatesHelper,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Providers\JMMAutoUpdates\JMMAutoUpdatesHelper.cs,ConvertToAbsoluteVersion,The following statement contains a magic number: return int.Parse(numbers[3]) * 100 +                     int.Parse(numbers[2]) * 100 * 100 +                     int.Parse(numbers[1]) * 100 * 100 * 100 +                     int.Parse(numbers[0]) * 100 * 100 * 100 * 100;
Magic Number,Shoko.Server.Providers.JMMAutoUpdates,JMMAutoUpdatesHelper,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Providers\JMMAutoUpdates\JMMAutoUpdatesHelper.cs,ConvertToAbsoluteVersion,The following statement contains a magic number: return int.Parse(numbers[3]) * 100 +                     int.Parse(numbers[2]) * 100 * 100 +                     int.Parse(numbers[1]) * 100 * 100 * 100 +                     int.Parse(numbers[0]) * 100 * 100 * 100 * 100;
Magic Number,Shoko.Server.Providers.TraktTV,TraktTVHelper,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Providers\TraktTV\TraktTVHelper.cs,SendData,The following statement contains a magic number: int ret = 400;
Magic Number,Shoko.Server.Providers.TraktTV,TraktTVHelper,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Providers\TraktTV\TraktTVHelper.cs,SendData,The following statement contains a magic number: request.Timeout = 120000;
Magic Number,Shoko.Server.Providers.TraktTV,TraktTVHelper,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Providers\TraktTV\TraktTVHelper.cs,GetFromTrakt,The following statement contains a magic number: int retCode = 400;
Magic Number,Shoko.Server.Providers.TraktTV,TraktTVHelper,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Providers\TraktTV\TraktTVHelper.cs,GetFromTrakt,The following statement contains a magic number: request.Timeout = 120000;
Magic Number,Shoko.Server.Providers.TraktTV,TraktTVHelper,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Providers\TraktTV\TraktTVHelper.cs,GetTraktEpisodeIdV2,The following statement contains a magic number: int episodeNumber = dictTraktSeasons[xrefBase.TraktSeasonNumber] +                                                      (ep.EpisodeNumber + xrefBase.TraktStartEpisodeNumber - 2) -                                                      (xrefBase.AniDBStartEpisodeNumber - 1);
Magic Number,Shoko.Server.Providers.TraktTV,TraktTVHelper,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Providers\TraktTV\TraktTVHelper.cs,GetTraktEpisodeIdV2,The following statement contains a magic number: int episodeNumber = dictTraktSeasons[xrefBase.TraktSeasonNumber] +                                                  (ep.EpisodeNumber + xrefBase.TraktStartEpisodeNumber - 2) -                                                  (xrefBase.AniDBStartEpisodeNumber - 1);
Magic Number,Shoko.Server.Providers.TraktTV,TraktTVHelper,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Providers\TraktTV\TraktTVHelper.cs,Scrobble,The following statement contains a magic number: return 401;
Magic Number,Shoko.Server.Providers.TraktTV,TraktTVHelper,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Providers\TraktTV\TraktTVHelper.cs,Scrobble,The following statement contains a magic number: switch (scrobbleStatus)                  {                      case ScrobblePlayingStatus.Start:                          url = TraktURIs.SetScrobbleStart;                          break;                      case ScrobblePlayingStatus.Pause:                          url = TraktURIs.SetScrobblePause;                          break;                      case ScrobblePlayingStatus.Stop:                          url = TraktURIs.SetScrobbleStop;                          break;                      default:                          return 400;                  }
Magic Number,Shoko.Server.Providers.TraktTV,TraktTVHelper,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Providers\TraktTV\TraktTVHelper.cs,Scrobble,The following statement contains a magic number: return 400;
Magic Number,Shoko.Server.Providers.TraktTV,TraktTVHelper,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Providers\TraktTV\TraktTVHelper.cs,Scrobble,The following statement contains a magic number: return 200;
Magic Number,Shoko.Server.Security,CRC32,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Security\CRC32.cs,Reflect,The following statement contains a magic number: i < 32
Magic Number,Shoko.Server.Security,CRC32,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Security\CRC32.cs,BuildCRC32Table,The following statement contains a magic number: uint[] table = new uint[256];
Magic Number,Shoko.Server.Security,CRC32,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Security\CRC32.cs,BuildCRC32Table,The following statement contains a magic number: i < 256
Magic Number,Shoko.Server.Security,CRC32,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Security\CRC32.cs,CRC32,The following statement contains a magic number: this.HashSizeValue = 32;
Magic Number,Shoko.Server.Security,CRC32,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Security\CRC32.cs,HashCore,The following statement contains a magic number: m_crc >>= 8;
Magic Number,Shoko.Server.Security,CRC32,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Security\CRC32.cs,HashFinal,The following statement contains a magic number: byte[] finalHash = new byte[4];
Magic Number,Shoko.Server.Security,CRC32,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Security\CRC32.cs,HashFinal,The following statement contains a magic number: finalHash[0] = (byte) ((finalCRC >> 24) & 0xFF);
Magic Number,Shoko.Server.Security,CRC32,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Security\CRC32.cs,HashFinal,The following statement contains a magic number: finalHash[1] = (byte) ((finalCRC >> 16) & 0xFF);
Magic Number,Shoko.Server.Security,CRC32,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Security\CRC32.cs,HashFinal,The following statement contains a magic number: finalHash[2] = (byte) ((finalCRC >> 8) & 0xFF);
Magic Number,Shoko.Server.Security,CRC32,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Security\CRC32.cs,HashFinal,The following statement contains a magic number: finalHash[2] = (byte) ((finalCRC >> 8) & 0xFF);
Magic Number,Shoko.Server.Security,CRC32,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Security\CRC32.cs,HashFinal,The following statement contains a magic number: finalHash[3] = (byte) ((finalCRC >> 0) & 0xFF);
Magic Number,LeanWork.IO.FileSystem,RecoveringFileSystemWatcher,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utilities\LeanWork\IO\FileSystem\RecoveringFileSystemWatcher.cs,BufferingFileSystemWatcher_Error,The following statement contains a magic number: var NetworkNameNoLongerAvailable = -2147467259;
Magic Number,LeanWork.IO.FileSystem,RecoveringFileSystemWatcher,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utilities\LeanWork\IO\FileSystem\RecoveringFileSystemWatcher.cs,BufferingFileSystemWatcher_Error,The following statement contains a magic number: var AccessIsDenied = -2147467259;
Duplicate Code,Shoko.Server.Models,SVR_VideoLocal_Place,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Models\SVR_VideoLocal_Place.cs,MoveFileIfRequired,The method contains a code clone-set at the following line numbers (starting from the method definition): ((191' 272)' (279' 360))
Duplicate Code,Shoko.Server.Providers.TraktTV,TraktTVHelper,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Providers\TraktTV\TraktTVHelper.cs,GetTraktEpisodeIdV2,The method contains a code clone-set at the following line numbers (starting from the method definition): ((25' 53)' (84' 112))
Duplicate Code,Shoko.Server.Providers.TraktTV,TraktTVHelper,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Providers\TraktTV\TraktTVHelper.cs,SyncCollectionToTrakt,The method contains a code clone-set at the following line numbers (starting from the method definition): ((103' 156)' (178' 231))
Missing Default,Shoko.Server,AniDBHelper,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDBHelper.cs,GetMyListFileStatus,The following switch statement is missing a default case: switch (ev)                  {                          case AniDBUDPResponseCode.Banned_555:                              logger.Error("Recieved ban on trying to get MyList stats for file");                              return;                          // Ignore no info in MyList for file                          case AniDBUDPResponseCode.NoSuchMyListFile: return;                          case AniDBUDPResponseCode.LoginRequired:                              logger.Error("Not logged in to AniDB");                              return;                  }
Missing Default,Shoko.Server,ShokoServiceImplementation,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v1\Implementations\ShokoServiceImplementation\ShokoServiceImplementation_Entities.cs,IncrementEpisodeStats,The following switch statement is missing a default case: switch ((StatCountType) statCountType)                  {                      case StatCountType.Played:                          epUserRecord.PlayedCount++;                          break;                      case StatCountType.Stopped:                          epUserRecord.StoppedCount++;                          break;                      case StatCountType.Watched:                          epUserRecord.WatchedCount++;                          break;                  }
Missing Default,Shoko.Server,ShokoServiceImplementation,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v1\Implementations\ShokoServiceImplementation\ShokoServiceImplementation_Entities.cs,IncrementEpisodeStats,The following switch statement is missing a default case: switch ((StatCountType) statCountType)                  {                      case StatCountType.Played:                          userRecord.PlayedCount++;                          break;                      case StatCountType.Stopped:                          userRecord.StoppedCount++;                          break;                      case StatCountType.Watched:                          userRecord.WatchedCount++;                          break;                  }
Missing Default,Shoko.Server,ShokoServiceImplementation,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v1\Implementations\ShokoServiceImplementation\ShokoServiceImplementation_Entities.cs,EnableDisableImage,The following switch statement is missing a default case: switch (imgType)                  {                      case ImageEntityType.AniDB_Cover:                          SVR_AniDB_Anime anime = RepoFactory.AniDB_Anime.GetByAnimeID(imageID);                          if (anime == null) return "Could not find anime";                          anime.ImageEnabled = enabled ? 1 : 0;                          RepoFactory.AniDB_Anime.Save(anime);                          break;                        case ImageEntityType.TvDB_Banner:                          TvDB_ImageWideBanner banner = RepoFactory.TvDB_ImageWideBanner.GetByID(imageID);                          if (banner == null) return "Could not find image";                          banner.Enabled = enabled ? 1 : 0;                          RepoFactory.TvDB_ImageWideBanner.Save(banner);                          break;                        case ImageEntityType.TvDB_Cover:                          TvDB_ImagePoster poster = RepoFactory.TvDB_ImagePoster.GetByID(imageID);                          if (poster == null) return "Could not find image";                          poster.Enabled = enabled ? 1 : 0;                          RepoFactory.TvDB_ImagePoster.Save(poster);                          break;                        case ImageEntityType.TvDB_FanArt:                          TvDB_ImageFanart fanart = RepoFactory.TvDB_ImageFanart.GetByID(imageID);                          if (fanart == null) return "Could not find image";                          fanart.Enabled = enabled ? 1 : 0;                          RepoFactory.TvDB_ImageFanart.Save(fanart);                          break;                        case ImageEntityType.MovieDB_Poster:                          MovieDB_Poster moviePoster = RepoFactory.MovieDB_Poster.GetByID(imageID);                          if (moviePoster == null) return "Could not find image";                          moviePoster.Enabled = enabled ? 1 : 0;                          RepoFactory.MovieDB_Poster.Save(moviePoster);                          break;                        case ImageEntityType.MovieDB_FanArt:                          MovieDB_Fanart movieFanart = RepoFactory.MovieDB_Fanart.GetByID(imageID);                          if (movieFanart == null) return "Could not find image";                          movieFanart.Enabled = enabled ? 1 : 0;                          RepoFactory.MovieDB_Fanart.Save(movieFanart);                          break;                  }
Missing Default,Shoko.Server,ShokoServiceImplementation,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v1\Implementations\ShokoServiceImplementation\ShokoServiceImplementation_Entities.cs,SetDefaultImage,The following switch statement is missing a default case: switch (imgType)                  {                      case ImageEntityType.AniDB_Cover:                      case ImageEntityType.TvDB_Cover:                      case ImageEntityType.MovieDB_Poster:                          sizeType = ImageSizeType.Poster;                          break;                        case ImageEntityType.TvDB_Banner:                          sizeType = ImageSizeType.WideBanner;                          break;                        case ImageEntityType.TvDB_FanArt:                      case ImageEntityType.MovieDB_FanArt:                          sizeType = ImageSizeType.Fanart;                          break;                  }
Missing Default,Shoko.Server,ShokoServiceImplementation,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v1\Implementations\ShokoServiceImplementation\ShokoServiceImplementation_Entities.cs,GetRecommendations,The following switch statement is missing a default case: switch (recommendationType)                  {                      case 1:                          ignoreType = 1;                          break;                      case 2:                          ignoreType = 2;                          break;                  }
Missing Default,Shoko.Server,ShokoServiceImplementation,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v1\Implementations\ShokoServiceImplementation\ShokoServiceImplementation_Entities.cs,TraktScrobble,The following switch statement is missing a default case: switch (status)                  {                      case (int)Providers.TraktTV.ScrobblePlayingStatus.Start:                          statusTraktV2 = Providers.TraktTV.ScrobblePlayingStatus.Start;                          break;                      case (int)Providers.TraktTV.ScrobblePlayingStatus.Pause:                          statusTraktV2 = Providers.TraktTV.ScrobblePlayingStatus.Pause;                          break;                      case (int)Providers.TraktTV.ScrobblePlayingStatus.Stop:                          statusTraktV2 = Providers.TraktTV.ScrobblePlayingStatus.Stop;                          break;                  }
Missing Default,Shoko.Server,ShokoServiceImplementation,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v1\Implementations\ShokoServiceImplementation\ShokoServiceImplementation_Entities.cs,TraktScrobble,The following switch statement is missing a default case: switch (type)                      {                          // Movie                          case (int) Providers.TraktTV.ScrobblePlayingType.movie:                              return Providers.TraktTV.TraktTVHelper.Scrobble(                                  Providers.TraktTV.ScrobblePlayingType.movie' animeId.ToString()'                                  statusTraktV2' progressTrakt);                          // TV episode                          case (int) Providers.TraktTV.ScrobblePlayingType.episode:                              return Providers.TraktTV.TraktTVHelper.Scrobble(                                  Providers.TraktTV.ScrobblePlayingType.episode'                                  animeId.ToString()' statusTraktV2' progressTrakt);                      }
Missing Default,Shoko.Server,ShokoServiceImplementation,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v1\Implementations\ShokoServiceImplementation\ShokoServiceImplementation_Entities.cs,LinkAniDBOther,The following switch statement is missing a default case: switch (xrefType)                  {                      case CrossRefType.MovieDB:                          MovieDBHelper.LinkAniDBMovieDB(animeID' id' false);                          break;                  }
Missing Default,Shoko.Server,ShokoServiceImplementation,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v1\Implementations\ShokoServiceImplementation\ShokoServiceImplementation_Entities.cs,RemoveLinkAniDBOther,The following switch statement is missing a default case: switch (xrefType)                  {                      case CrossRefType.MovieDB:                            // check if there are default images used associated                          List<AniDB_Anime_DefaultImage> images =                              RepoFactory.AniDB_Anime_DefaultImage.GetByAnimeID(animeID);                          foreach (AniDB_Anime_DefaultImage image in images)                          {                              if (image.ImageParentType == (int) ImageEntityType.MovieDB_FanArt ||                                  image.ImageParentType == (int) ImageEntityType.MovieDB_Poster)                              {                                  RepoFactory.AniDB_Anime_DefaultImage.Delete(image.AniDB_Anime_DefaultImageID);                              }                          }                          MovieDBHelper.RemoveLinkAniDBMovieDB(animeID);                          break;                  }
Missing Default,Shoko.Server,ShokoServiceImplementation,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v1\Implementations\ShokoServiceImplementation\ShokoServiceImplementation_Entities.cs,SearchForFiles,The following switch statement is missing a default case: switch (sType)                  {                      case FileSearchCriteria.Name:                          List<SVR_VideoLocal> results1 = RepoFactory.VideoLocal.GetByName(searchCriteria.Trim());                          foreach (SVR_VideoLocal vid in results1)                              vids.Add(vid.ToClient(userID));                          break;                        case FileSearchCriteria.ED2KHash:                          SVR_VideoLocal vidl = RepoFactory.VideoLocal.GetByHash(searchCriteria.Trim());                          if (vidl != null)                              vids.Add(vidl.ToClient(userID));                          break;                        case FileSearchCriteria.Size:                          break;                        case FileSearchCriteria.LastOneHundred:                          int number = 100;                          if (!string.IsNullOrEmpty(searchCriteria))                          {                              if (int.TryParse(searchCriteria' out int temp)) number = temp;                          }                          List<SVR_VideoLocal> results2 = RepoFactory.VideoLocal.GetMostRecentlyAdded(number' userID);                          foreach (SVR_VideoLocal vid in results2)                              vids.Add(vid.ToClient(userID));                          break;                  }
Missing Default,Shoko.Server,FileQualityFilter,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Import\FileQualityFilter.cs,CheckFileKeep,The following switch statement is missing a default case: switch (type)                  {                      case FileQualityFilterType.AUDIOCODEC:                          result &= CheckAudioCodec(file);                          break;                      case FileQualityFilterType.AUDIOSTREAMCOUNT:                          result &= CheckAudioStreamCount(file);                          break;                      case FileQualityFilterType.CHAPTER:                          if (aniFile == null) return false;                          result &= CheckChaptered(file);                          break;                      case FileQualityFilterType.RESOLUTION:                          result &= CheckResolution(file' aniFile);                          break;                      case FileQualityFilterType.SOURCE:                          if (aniFile == null) return false;                          result &= CheckSource(aniFile);                          break;                      case FileQualityFilterType.SUBGROUP:                          if (aniFile == null) return false;                          result &= CheckSubGroup(aniFile);                          break;                      case FileQualityFilterType.SUBSTREAMCOUNT:                          result &= CheckSubStreamCount(file);                          break;                      case FileQualityFilterType.VERSION:                          if (aniFile == null) return false;                          result &= CheckDeprecated(aniFile);                          break;                      case FileQualityFilterType.VIDEOCODEC:                          if (aniFile == null) return false;                          result &= CheckVideoCodec(file);                          break;                  }
Missing Default,Shoko.Server,FileQualityFilter,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Import\FileQualityFilter.cs,CheckAudioCodec,The following switch statement is missing a default case: switch (operationType)              {                  case FileQualityFilterOperationType.IN:                      return codecs.FindInEnumerable(Settings._requiredaudiocodecs.Item1);                  case FileQualityFilterOperationType.NOTIN:                      return !codecs.FindInEnumerable(Settings._requiredaudiocodecs.Item1);              }
Missing Default,Shoko.Server,FileQualityFilter,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Import\FileQualityFilter.cs,CheckAudioStreamCount,The following switch statement is missing a default case: switch (operationType)              {                  case FileQualityFilterOperationType.EQUALS:                      return streamCount == Settings.RequiredAudioStreamCount;                  case FileQualityFilterOperationType.GREATER_EQ:                      return streamCount >= Settings.RequiredAudioStreamCount;                  case FileQualityFilterOperationType.LESS_EQ:                      return streamCount <= Settings.RequiredAudioStreamCount;              }
Missing Default,Shoko.Server,FileQualityFilter,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Import\FileQualityFilter.cs,CheckResolution,The following switch statement is missing a default case: switch (operationType)              {                  case FileQualityFilterOperationType.EQUALS:                      return res.Equals(Settings.RequiredResolutions.FirstOrDefault());                  case FileQualityFilterOperationType.GREATER_EQ:                      List<int> keysGT = ResolutionArea.Keys.Where(a => resArea >= a).ToList();                      keysGT.AddRange(ResolutionArea43.Keys.Where(a => resArea >= a));                      List<string> valuesGT = new List<string>();                      foreach (int key in keysGT)                      {                          if (ResolutionArea.ContainsKey(key)) valuesGT.Add(ResolutionArea[key]);                          if (ResolutionArea43.ContainsKey(key)) valuesGT.Add(ResolutionArea43[key]);                      }                      if (valuesGT.FindInEnumerable(Settings.RequiredResolutions)) return true;                      break;                  case FileQualityFilterOperationType.LESS_EQ:                      List<int> keysLT = ResolutionArea.Keys.Where(a => resArea <= a).ToList();                      keysLT.AddRange(ResolutionArea43.Keys.Where(a => resArea <= a));                      List<string> valuesLT = new List<string>();                      foreach (int key in keysLT)                      {                          if (ResolutionArea.ContainsKey(key)) valuesLT.Add(ResolutionArea[key]);                          if (ResolutionArea43.ContainsKey(key)) valuesLT.Add(ResolutionArea43[key]);                      }                      if (valuesLT.FindInEnumerable(Settings.RequiredResolutions)) return true;                      break;                  case FileQualityFilterOperationType.IN:                      return Settings.RequiredResolutions.Contains(res);                  case FileQualityFilterOperationType.NOTIN:                      return !Settings.RequiredResolutions.Contains(res);              }
Missing Default,Shoko.Server,FileQualityFilter,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Import\FileQualityFilter.cs,CheckSource,The following switch statement is missing a default case: switch (operationType)              {                  case FileQualityFilterOperationType.IN:                      return Settings._requiredsources.Item1.Contains(source);                  case FileQualityFilterOperationType.NOTIN:                      return !Settings._requiredsources.Item1.Contains(source);              }
Missing Default,Shoko.Server,FileQualityFilter,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Import\FileQualityFilter.cs,CheckSubGroup,The following switch statement is missing a default case: switch (operationType)              {                  case FileQualityFilterOperationType.IN:                      return Settings._requiredsubgroups.Item1.Contains(aniFile.Anime_GroupName.ToLowerInvariant()) ||                             Settings._requiredsubgroups.Item1.Contains(aniFile.Anime_GroupNameShort.ToLowerInvariant());                  case FileQualityFilterOperationType.NOTIN:                      return !Settings._requiredsubgroups.Item1.Contains(aniFile.Anime_GroupName.ToLowerInvariant()) &&                             !Settings._requiredsubgroups.Item1.Contains(aniFile.Anime_GroupNameShort.ToLowerInvariant());              }
Missing Default,Shoko.Server,FileQualityFilter,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Import\FileQualityFilter.cs,CheckSubStreamCount,The following switch statement is missing a default case: switch (operationType)              {                  case FileQualityFilterOperationType.EQUALS:                      return streamCount == Settings.RequiredSubStreamCount;                  case FileQualityFilterOperationType.GREATER_EQ:                      return streamCount >= Settings.RequiredSubStreamCount;                  case FileQualityFilterOperationType.LESS_EQ:                      return streamCount <= Settings.RequiredSubStreamCount;              }
Missing Default,Shoko.Server,FileQualityFilter,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Import\FileQualityFilter.cs,CheckVideoCodec,The following switch statement is missing a default case: switch (operationType)              {                  case FileQualityFilterOperationType.IN:                      return Settings._requiredvideocodecs.Item1.FindInEnumerable(codecs);                  case FileQualityFilterOperationType.NOTIN:                      return !Settings._requiredvideocodecs.Item1.FindInEnumerable(codecs);              }
Missing Default,Shoko.Server,FileQualityFilter,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Import\FileQualityFilter.cs,CompareTo,The following switch statement is missing a default case: switch (type)                  {                      case FileQualityFilterType.AUDIOCODEC:                          result = CompareAudioCodecTo(newFile' oldFile);                          break;                        case FileQualityFilterType.AUDIOSTREAMCOUNT:                          result = CompareAudioStreamCountTo(newFile' oldFile);                          break;                        case FileQualityFilterType.CHAPTER:                          result = CompareChapterTo(newFile' newEp' oldFile' oldEp);                          break;                        case FileQualityFilterType.RESOLUTION:                          result = CompareResolutionTo(newFile' oldFile' newEp' oldEp);                          break;                        case FileQualityFilterType.SOURCE:                          if (IsNullOrUnknown(newEp) && IsNullOrUnknown(oldEp)) return 0;                          if (IsNullOrUnknown(newEp)) return 1;                          if (IsNullOrUnknown(oldEp)) return -1;                          result = CompareSourceTo(newEp' oldEp);                          break;                        case FileQualityFilterType.SUBGROUP:                          if (IsNullOrUnknown(newEp) && IsNullOrUnknown(oldEp)) return 0;                          if (IsNullOrUnknown(newEp)) return 1;                          if (IsNullOrUnknown(oldEp)) return -1;                          result = CompareSubGroupTo(newEp' oldEp);                          break;                        case FileQualityFilterType.SUBSTREAMCOUNT:                          result = CompareSubStreamCountTo(newFile' oldFile);                          break;                        case FileQualityFilterType.VERSION:                          if (newEp == null) return 1;                          if (oldEp == null) return -1;                          result = CompareVersionTo(newFile' oldFile);                          break;                        case FileQualityFilterType.VIDEOCODEC:                          result = CompareVideoCodecTo(newFile' oldFile);                          break;                  }
Missing Default,Shoko.Server,ShokoServiceImplementationMetro,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v1\Implementations\ShokoServiceImplementationMetro.cs,GetAniDBRecommendationsForAnime,The following switch statement is missing a default case: switch (recType)                      {                          case AniDBRecommendationType.ForFans:                              shout.CommentType = (int) WhatPeopleAreSayingType.AniDBForFans;                              break;                          case AniDBRecommendationType.MustSee:                              shout.CommentType = (int) WhatPeopleAreSayingType.AniDBMustSee;                              break;                          case AniDBRecommendationType.Recommended:                              shout.CommentType = (int) WhatPeopleAreSayingType.AniDBRecommendation;                              break;                      }
Missing Default,Shoko.Server,Utils,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utils.cs,GetOSInfo,The following switch statement is missing a default case: switch (vs.Minor)                  {                      case 0:                          operatingSystem = "95";                          break;                      case 10:                          if (vs.Revision.ToString() == "2222A")                              operatingSystem = "98SE";                          else                              operatingSystem = "98";                          break;                      case 90:                          operatingSystem = "Me";                          break;                  }
Missing Default,Shoko.Server,Utils,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utils.cs,GetScheduledHours,The following switch statement is missing a default case: switch (freq)              {                  case ScheduledUpdateFrequency.Daily:                      return 24;                  case ScheduledUpdateFrequency.HoursSix:                      return 6;                  case ScheduledUpdateFrequency.HoursTwelve:                      return 12;                  case ScheduledUpdateFrequency.WeekOne:                      return 24 * 7;                  case ScheduledUpdateFrequency.MonthOne:                      return 24 * 30;                  case ScheduledUpdateFrequency.Never:                      return int.MaxValue;              }
Missing Default,AniDBAPI.Commands,AniDBCommand_AddFile,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBCommand_AddFile.cs,Process,The following switch statement is missing a default case: switch (ResponseCode)              {                  case 598: return AniDBUDPResponseCode.UnknownCommand_598;                  case 555: return AniDBUDPResponseCode.Banned_555;              }
Missing Default,AniDBAPI.Commands,AniDBCommand_AddFile,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBCommand_AddFile.cs,Process,The following switch statement is missing a default case: switch (sMsgType)              {                  case "210":                  {                      /* Response Format                       * {int4 mylist id of new entry}                       */                      // parse the MyList ID                      string[] arrResult = socketResponse.Split('\n');                      if (arrResult.Length >= 2)                      {                          int.TryParse(arrResult[1]' out MyListID);                          if (FileData == null) MyListID = 0;                      }                      return AniDBUDPResponseCode.FileAdded;                  }                  case "310":                  {                      /* Response Format                       * {int4 lid}|{int4 fid}|{int4 eid}|{int4 aid}|{int4 gid}|{int4 date}|{int2 state}|{int4 viewdate}|{str storage}|{str source}|{str other}|{int2 filestate}                       */                      //file already exists: read 'watched' status                      string[] arrResult = socketResponse.Split('\n');                      if (arrResult.Length >= 2)                      {                          string[] arrStatus = arrResult[1].Split('|');                          int.TryParse(arrStatus[0]' out MyListID);                            int state = int.Parse(arrStatus[6]);                          State = (AniDBFile_State) state;                            int viewdate = int.Parse(arrStatus[7]);                          ReturnIsWatched = viewdate > 0;                            if (ReturnIsWatched)                          {                              DateTime utcDate = new DateTime(1970' 1' 1' 0' 0' 0' DateTimeKind.Utc);                              utcDate = utcDate.AddSeconds(viewdate);                                WatchedDate = utcDate.ToLocalTime();                          }                          else                          {                              WatchedDate = null;                          }                      }                      return AniDBUDPResponseCode.FileAlreadyExists;                  }                  case "311": return AniDBUDPResponseCode.UpdatingFile;                  case "320": return AniDBUDPResponseCode.NoSuchFile;                  case "411": return AniDBUDPResponseCode.NoSuchFile;                  case "502": return AniDBUDPResponseCode.LoginFailed;                  case "501": return AniDBUDPResponseCode.LoginRequired;              }
Missing Default,AniDBAPI.Commands,AniDBCommand_DeleteFile,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBCommand_DeleteFile.cs,Process,The following switch statement is missing a default case: switch (ResponseCode)              {                  case 598: return AniDBUDPResponseCode.UnknownCommand_598;                  case 555: return AniDBUDPResponseCode.Banned_555;              }
Missing Default,AniDBAPI.Commands,AniDBCommand_DeleteFile,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBCommand_DeleteFile.cs,Process,The following switch statement is missing a default case: switch (sMsgType)              {                  case "211": return AniDBUDPResponseCode.FileDeleted;                  case "411": return AniDBUDPResponseCode.NoSuchFile;                  case "502": return AniDBUDPResponseCode.LoginFailed;                  case "501": return AniDBUDPResponseCode.LoginRequired;              }
Missing Default,AniDBAPI.Commands,AniDBCommand_GetAnimeDescription,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBCommand_GetAnimeDescription.cs,Process,The following switch statement is missing a default case: switch (ResponseCode)              {                  case 598: return AniDBUDPResponseCode.UnknownCommand_598;                  case 555: return AniDBUDPResponseCode.Banned_555;              }
Missing Default,AniDBAPI.Commands,AniDBCommand_GetAnimeDescription,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBCommand_GetAnimeDescription.cs,Process,The following switch statement is missing a default case: switch (sMsgType)              {                  case "233":                  {                      // 233 ANIMEDESC                      // the first 11 characters should be "240 EPISODE"                      // the rest of the information should be the data list                        animeDesc = new Raw_AniDB_AnimeDesc(socketResponse);                      return AniDBUDPResponseCode.GotAnimeDesc;                  }                  case "330": return AniDBUDPResponseCode.NoSuchAnime;                  case "333": // no such description                      return AniDBUDPResponseCode.NoSuchAnime;                  case "501": return AniDBUDPResponseCode.LoginRequired;              }
Missing Default,AniDBAPI.Commands,AniDBCommand_GetAnimeInfo,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBCommand_GetAnimeInfo.cs,Process,The following switch statement is missing a default case: switch (ResponseCode)              {                  case 598: return AniDBUDPResponseCode.UnknownCommand_598;                  case 555: return AniDBUDPResponseCode.Banned_555;              }
Missing Default,AniDBAPI.Commands,AniDBCommand_GetAnimeInfo,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBCommand_GetAnimeInfo.cs,Process,The following switch statement is missing a default case: switch (sMsgType)              {                  case "230":                  {                      // 230 FILE INFO                      // the first 9 characters should be "230 ANIME "                      // the rest of the information should be the data list                      animeInfo = new Raw_AniDB_Anime(socketResponse);                      return AniDBUDPResponseCode.GotAnimeInfo;                  }                  case "330": return AniDBUDPResponseCode.NoSuchAnime;                  case "501": return AniDBUDPResponseCode.LoginRequired;              }
Missing Default,AniDBAPI.Commands,AniDBCommand_GetCalendar,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBCommand_GetCalendar.cs,Process,The following switch statement is missing a default case: switch (ResponseCode)              {                  case 598: return AniDBUDPResponseCode.UnknownCommand_598;                  case 555: return AniDBUDPResponseCode.Banned_555;              }
Missing Default,AniDBAPI.Commands,AniDBCommand_GetCalendar,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBCommand_GetCalendar.cs,Process,The following switch statement is missing a default case: switch (sMsgType)              {                  case "297":                  {                      calendars = new CalendarCollection(socketResponse);                      return AniDBUDPResponseCode.GotCalendar;                  }                  case "397": return AniDBUDPResponseCode.CalendarEmpty;                  case "501": return AniDBUDPResponseCode.LoginRequired;              }
Missing Default,AniDBAPI.Commands,AniDBCommand_GetCharacterInfo,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBCommand_GetCharacterInfo.cs,Process,The following switch statement is missing a default case: switch (ResponseCode)              {                  case 598: return AniDBUDPResponseCode.UnknownCommand_598;                  case 555: return AniDBUDPResponseCode.Banned_555;              }
Missing Default,AniDBAPI.Commands,AniDBCommand_GetCharacterInfo,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBCommand_GetCharacterInfo.cs,Process,The following switch statement is missing a default case: switch (sMsgType)              {                  case "235":                  {                      // 235 CHARACTER INFO                      // the first 11 characters should be "235 CHARACTER"                      // the rest of the information should be the data list                        charInfo = new Raw_AniDB_Character(socketResponse);                      return AniDBUDPResponseCode.GotCharInfo;                          // Response: 235 CHARACTER 99297|6267|25|539|5|01|The Girl Returns|Shoujo Kikan|????|1238976000                  }                  case "335": return AniDBUDPResponseCode.NoSuchChar;                  case "501": return AniDBUDPResponseCode.LoginRequired;              }
Missing Default,AniDBAPI.Commands,AniDBCommand_GetCreatorInfo,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBCommand_GetCreatorInfo.cs,Process,The following switch statement is missing a default case: switch (ResponseCode)              {                  case 598: return AniDBUDPResponseCode.UnknownCommand_598;                  case 555: return AniDBUDPResponseCode.Banned_555;              }
Missing Default,AniDBAPI.Commands,AniDBCommand_GetCreatorInfo,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBCommand_GetCreatorInfo.cs,Process,The following switch statement is missing a default case: switch (sMsgType)              {                  case "245":                  {                      // 245 CREATOR                      // the first 11 characters should be "245 CREATOR"                      // the rest of the information should be the data list                        creatorInfo = new Raw_AniDB_Creator(socketResponse);                      return AniDBUDPResponseCode.GotCreatorInfo;                          // 245 CREATOR 200|?????|Suwabe Jun`ichi|1|17015.jpg||http://www.haikyo.or.jp/PROFILE/man/11470.html|Junichi_Suwabe|%E8%AB%8F%E8%A8%AA%E9%83%A8%E9%A0%86%E4%B8%80|1236300570                  }                  case "345": return AniDBUDPResponseCode.NoSuchCreator;                  case "501": return AniDBUDPResponseCode.LoginRequired;              }
Missing Default,AniDBAPI.Commands,AniDBCommand_GetFileInfo,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBCommand_GetFileInfo.cs,Process,The following switch statement is missing a default case: switch (ResponseCode)              {                  case 598: return AniDBUDPResponseCode.UnknownCommand_598;                  case 555: return AniDBUDPResponseCode.Banned_555;              }
Missing Default,AniDBAPI.Commands,AniDBCommand_GetFileInfo,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBCommand_GetFileInfo.cs,Process,The following switch statement is missing a default case: switch (sMsgType)              {                  case "220":                  {                      // 220 FILE INFO                      // the first 9 characters should be "220 FILE "                      // the rest of the information should be the data list                        fileInfo = new Raw_AniDB_File(socketResponse);                      //episodeInfo = new Raw_AniDB_Episode(socketResponse' enEpisodeSourceType.File);                      return AniDBUDPResponseCode.GotFileInfo;                  }                  case "320": return AniDBUDPResponseCode.FileDoesNotExist;                  case "501": return AniDBUDPResponseCode.LoginRequired;              }
Missing Default,AniDBAPI.Commands,AniDBCommand_GetGroupStatus,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBCommand_GetGroupStatus.cs,Process,The following switch statement is missing a default case: switch (ResponseCode)              {                  case 598: return AniDBUDPResponseCode.UnknownCommand_598;                  case 555: return AniDBUDPResponseCode.Banned_555;              }
Missing Default,AniDBAPI.Commands,AniDBCommand_GetGroupStatus,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBCommand_GetGroupStatus.cs,Process,The following switch statement is missing a default case: switch (sMsgType)              {                  case "225":                  {                      // 225 GROUPSTATUS                        grpStatus = new GroupStatusCollection(animeID' socketResponse);                      return AniDBUDPResponseCode.GotGroupStatus;                  }                  case "330": return AniDBUDPResponseCode.NoSuchAnime;                  case "325": // no such description                      return AniDBUDPResponseCode.NoGroupsFound;                  case "501": return AniDBUDPResponseCode.LoginRequired;              }
Missing Default,AniDBAPI.Commands,AniDBCommand_GetMyListFileInfo,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBCommand_GetMyListFileInfo.cs,Process,The following switch statement is missing a default case: switch (ResponseCode)              {                  case 598: return AniDBUDPResponseCode.UnknownCommand_598;                  case 555: return AniDBUDPResponseCode.Banned_555;              }
Missing Default,AniDBAPI.Commands,AniDBCommand_GetMyListFileInfo,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBCommand_GetMyListFileInfo.cs,Process,The following switch statement is missing a default case: switch (sMsgType)              {                  case "221":                  {                      myListFile = new Raw_AniDB_MyListFile(socketResponse);                      //BaseConfig.MyAnimeLog.Write(myListFile.ToString());                      return AniDBUDPResponseCode.GotMyListFileInfo;                  }                  case "321": return AniDBUDPResponseCode.NoSuchMyListFile;                  case "501": return AniDBUDPResponseCode.LoginRequired;              }
Missing Default,AniDBAPI.Commands,AniDBCommand_GetMyListStats,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBCommand_GetMyListStats.cs,Process,The following switch statement is missing a default case: switch (ResponseCode)              {                  case 598: return AniDBUDPResponseCode.UnknownCommand_598;                  case 555: return AniDBUDPResponseCode.Banned_555;              }
Missing Default,AniDBAPI.Commands,AniDBCommand_GetMyListStats,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBCommand_GetMyListStats.cs,Process,The following switch statement is missing a default case: switch (sMsgType)              {                  case "222":                  {                      myListStats = new Raw_AniDB_MyListStats(socketResponse);                      return AniDBUDPResponseCode.GotMyListStats;                  }                  case "501": return AniDBUDPResponseCode.LoginRequired;              }
Missing Default,AniDBAPI.Commands,AniDBCommand_GetReview,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBCommand_GetReview.cs,Process,The following switch statement is missing a default case: switch (ResponseCode)              {                  case 598: return AniDBUDPResponseCode.UnknownCommand_598;                  case 555: return AniDBUDPResponseCode.Banned_555;              }
Missing Default,AniDBAPI.Commands,AniDBCommand_GetReview,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBCommand_GetReview.cs,Process,The following switch statement is missing a default case: switch (sMsgType)              {                  case "234":                  {                      // 234 REVIEW                       // the first 10 characters should be "240 REVIEW"                      // the rest of the information should be the data list                        ReviewInfo = new Raw_AniDB_Review(socketResponse);                      return AniDBUDPResponseCode.GotReview;                  }                  case "334": return AniDBUDPResponseCode.NoSuchReview;                  case "501": return AniDBUDPResponseCode.LoginRequired;              }
Missing Default,AniDBAPI.Commands,AniDBCommand_GetUpdated,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBCommand_GetUpdated.cs,Process,The following switch statement is missing a default case: switch (ResponseCode)              {                  case 598: return AniDBUDPResponseCode.UnknownCommand_598;                  case 555: return AniDBUDPResponseCode.Banned_555;              }
Missing Default,AniDBAPI.Commands,AniDBCommand_GetUpdated,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBCommand_GetUpdated.cs,Process,The following switch statement is missing a default case: switch (sMsgType)              {                  case "243":                  {                      // remove the header info                      string[] sDetails = socketResponse.Substring(0).Split('\n');                        if (sDetails.Length > 1)                      {                          // first item will be the status command so ignore                          // only concerned with the second line                            string[] flds = sDetails[1].Substring(0).Split('|');                          AniDBEntity = int.Parse(flds[0]);                          RecordCount = int.Parse(flds[1]);                          LastUpdateTime = flds[2];                          AnimeIDListRaw = flds[3].Trim();                          AnimeIDList = AnimeIDListRaw.Split(''').Select(int.Parse).ToList();                      }                        return AniDBUDPResponseCode.GotUpdated;                  }                  case "343": return AniDBUDPResponseCode.NoUpdates;                  case "501": return AniDBUDPResponseCode.LoginRequired;              }
Missing Default,AniDBAPI.Commands,AniDBCommand_Login,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBCommand_Login.cs,Process,The following switch statement is missing a default case: switch (ResponseCode)              {                  case 598: return AniDBUDPResponseCode.UnknownCommand_598;                  case 555: return AniDBUDPResponseCode.Banned_555;              }
Missing Default,AniDBAPI.Commands,AniDBCommand_MarkFileAsDeleted,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBCommand_MarkFileAsDeleted.cs,Process,The following switch statement is missing a default case: switch (ResponseCode)              {                  case 598: return AniDBUDPResponseCode.UnknownCommand_598;                  case 555: return AniDBUDPResponseCode.Banned_555;              }
Missing Default,AniDBAPI.Commands,AniDBCommand_MarkFileAsDeleted,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBCommand_MarkFileAsDeleted.cs,Process,The following switch statement is missing a default case: switch (sMsgType)              {                  case "210": return AniDBUDPResponseCode.FileMarkedAsDeleted;                  case "310": return AniDBUDPResponseCode.FileMarkedAsDeleted;                  case "311": return AniDBUDPResponseCode.FileMarkedAsDeleted;                  case "320": return AniDBUDPResponseCode.NoSuchFile;                  case "411": return AniDBUDPResponseCode.NoSuchFile;                    case "502": return AniDBUDPResponseCode.LoginFailed;                  case "501": return AniDBUDPResponseCode.LoginRequired;              }
Missing Default,AniDBAPI.Commands,AniDBCommand_MarkFileAsDisk,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBCommand_MarkFileAsDisk.cs,Process,The following switch statement is missing a default case: switch (ResponseCode)              {                  case 598: return AniDBUDPResponseCode.UnknownCommand_598;                  case 555: return AniDBUDPResponseCode.Banned_555;              }
Missing Default,AniDBAPI.Commands,AniDBCommand_MarkFileAsDisk,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBCommand_MarkFileAsDisk.cs,Process,The following switch statement is missing a default case: switch (sMsgType)              {                  case "210": return AniDBUDPResponseCode.FileMarkedAsDeleted;                  case "310": return AniDBUDPResponseCode.FileMarkedAsDeleted;                  case "311": return AniDBUDPResponseCode.FileMarkedAsDeleted;                  case "320": return AniDBUDPResponseCode.NoSuchFile;                  case "411": return AniDBUDPResponseCode.NoSuchFile;                    case "502": return AniDBUDPResponseCode.LoginFailed;                  case "501": return AniDBUDPResponseCode.LoginRequired;              }
Missing Default,AniDBAPI.Commands,AniDBCommand_MarkFileAsRemote,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBCommand_MarkFileAsRemote.cs,Process,The following switch statement is missing a default case: switch (ResponseCode)              {                  case 598: return AniDBUDPResponseCode.UnknownCommand_598;                  case 555: return AniDBUDPResponseCode.Banned_555;              }
Missing Default,AniDBAPI.Commands,AniDBCommand_MarkFileAsRemote,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBCommand_MarkFileAsRemote.cs,Process,The following switch statement is missing a default case: switch (sMsgType)              {                  case "210": return AniDBUDPResponseCode.FileMarkedAsDeleted;                  case "310": return AniDBUDPResponseCode.FileMarkedAsDeleted;                  case "311": return AniDBUDPResponseCode.FileMarkedAsDeleted;                  case "320": return AniDBUDPResponseCode.NoSuchFile;                  case "411": return AniDBUDPResponseCode.NoSuchFile;                    case "502": return AniDBUDPResponseCode.LoginFailed;                  case "501": return AniDBUDPResponseCode.LoginRequired;              }
Missing Default,AniDBAPI.Commands,AniDBCommand_MarkFileAsUnknown,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBCommand_MarkFileAsUnknown.cs,Process,The following switch statement is missing a default case: switch (ResponseCode)              {                  case 598: return AniDBUDPResponseCode.UnknownCommand_598;                  case 555: return AniDBUDPResponseCode.Banned_555;              }
Missing Default,AniDBAPI.Commands,AniDBCommand_MarkFileAsUnknown,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBCommand_MarkFileAsUnknown.cs,Process,The following switch statement is missing a default case: switch (sMsgType)              {                  case "210": return AniDBUDPResponseCode.FileMarkedAsDeleted;                  case "310": return AniDBUDPResponseCode.FileMarkedAsDeleted;                  case "311": return AniDBUDPResponseCode.FileMarkedAsDeleted;                  case "320": return AniDBUDPResponseCode.NoSuchFile;                  case "411": return AniDBUDPResponseCode.NoSuchFile;                    case "502": return AniDBUDPResponseCode.LoginFailed;                  case "501": return AniDBUDPResponseCode.LoginRequired;              }
Missing Default,AniDBAPI.Commands,AniDBCommand_NotifyGet,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBCommand_NotifyGet.cs,Process,The following switch statement is missing a default case: switch (ResponseCode)              {                  case 598: return AniDBUDPResponseCode.UnknownCommand_598;                  case 555: return AniDBUDPResponseCode.Banned_555;              }
Missing Default,AniDBAPI.Commands,AniDBCommand_NotifyGet,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBCommand_NotifyGet.cs,Process,The following switch statement is missing a default case: switch (sMsgType)              {                  case "292":                  {                      NotifyMessage = new Raw_AniDB_NotifyMessage(socketResponse);                      return AniDBUDPResponseCode.GotNotifyGet;                  }                    case "293":                  {                      NotifyAlert = new Raw_AniDB_NotifyAlert(socketResponse);                      return AniDBUDPResponseCode.GotNotifyGet;                  }                  case "392":                  case "393":                  {                      return AniDBUDPResponseCode.NoSuchNotify;                  }                  case "501":                  {                      return AniDBUDPResponseCode.LoginRequired;                  }              }
Missing Default,AniDBAPI.Commands,AniDBCommand_NotifyList,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBCommand_NotifyList.cs,Process,The following switch statement is missing a default case: switch (ResponseCode)              {                  case 598: return AniDBUDPResponseCode.UnknownCommand_598;                  case 555: return AniDBUDPResponseCode.Banned_555;              }
Missing Default,AniDBAPI.Commands,AniDBCommand_NotifyList,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBCommand_NotifyList.cs,Process,The following switch statement is missing a default case: switch (sMsgType)              {                  case "291":                  {                      notifyListCollection = new Raw_AniDB_NotifyList(socketResponse);                      return AniDBUDPResponseCode.GotNotifyList;                  }                  case "501": return AniDBUDPResponseCode.LoginRequired;              }
Missing Default,AniDBAPI.Commands,AniDBCommand_Ping,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBCommand_Ping.cs,Process,The following switch statement is missing a default case: switch (ResponseCode)              {                  case 598: return AniDBUDPResponseCode.UnknownCommand_598;                  case 555: return AniDBUDPResponseCode.Banned_555;              }
Missing Default,AniDBAPI.Commands,AniDBCommand_UpdateFile,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBCommand_UpdateFile.cs,Process,The following switch statement is missing a default case: switch (ResponseCode)              {                  case 598: return AniDBUDPResponseCode.UnknownCommand_598;                  case 555: return AniDBUDPResponseCode.Banned_555;              }
Missing Default,AniDBAPI.Commands,AniDBCommand_UpdateFile,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBCommand_UpdateFile.cs,Process,The following switch statement is missing a default case: switch (sMsgType)              {                  case "210": return AniDBUDPResponseCode.FileAdded;                  case "310": return AniDBUDPResponseCode.FileAlreadyExists;                  case "311": return AniDBUDPResponseCode.UpdatingFile;                  case "320": return AniDBUDPResponseCode.NoSuchFile;                  case "411": return AniDBUDPResponseCode.NoSuchMyListFile;                    case "502": return AniDBUDPResponseCode.LoginFailed;                  case "501": return AniDBUDPResponseCode.LoginRequired;              }
Missing Default,AniDBAPI.Commands,AniDBCommand_Vote,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBCommand_Vote.cs,Process,The following switch statement is missing a default case: switch (ResponseCode)              {                  case 598: return AniDBUDPResponseCode.UnknownCommand_598;                  case 555: return AniDBUDPResponseCode.Banned_555;              }
Missing Default,AniDBAPI.Commands,AniDBCommand_Vote,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBCommand_Vote.cs,Process,The following switch statement is missing a default case: switch (sMsgType)              {                  case "260": return AniDBUDPResponseCode.Voted;                  case "261":                        // this means we were trying to retrieve the vote                      if (voteType == AniDBVoteType.Anime || voteType == AniDBVoteType.AnimeTemp)                      {                          // 261 VOTE FOUNDCode Geass Hangyaku no Lelouch|900|1|4521                          Raw_AniDB_Vote vote = new Raw_AniDB_Vote();                          vote.ProcessVoteFoundAnime(socketResponse' this.entityID' this.voteType);                          this.voteValue = vote.VoteValue;                      }                      if (voteType == AniDBVoteType.Episode)                      {                          //261 VOTE FOUNDThe Day a New Demon Was Born|700|1|63091                          Raw_AniDB_Vote vote = new Raw_AniDB_Vote();                          vote.ProcessVoteFoundEpisode(socketResponse' this.entityID' this.episodeNumber'                              this.episodeType);                          this.voteValue = vote.VoteValue;                      }                      return AniDBUDPResponseCode.VoteFound;                  case "262": return AniDBUDPResponseCode.VoteUpdated;                  case "263": return AniDBUDPResponseCode.VoteRevoked;                                        case "360": return AniDBUDPResponseCode.NoSuchVote;                  case "361": return AniDBUDPResponseCode.InvalidVoteType;                  case "362": return AniDBUDPResponseCode.InvalidVoteValue;                  case "363": return AniDBUDPResponseCode.PermVoteNotAllowed;                  case "364": return AniDBUDPResponseCode.PermVoteAlready;                    case "501": return AniDBUDPResponseCode.LoginRequired;              }
Missing Default,AniDBAPI.Commands,AniDBCommand_Vote,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBCommand_Vote.cs,Init,The following switch statement is missing a default case: switch (voteType)              {                  case AniDBVoteType.Anime:                      iVoteType = 1;                      break;                  case AniDBVoteType.AnimeTemp:                      iVoteType = 2;                      break;                  case AniDBVoteType.Group:                      iVoteType = 3;                      break;                  case AniDBVoteType.Episode:                      iVoteType = 1;                      break;              }
Missing Default,AniDBAPI.Commands,AniDBCommand_Vote,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBCommand_Vote.cs,InitEpisode,The following switch statement is missing a default case: switch (epType)              {                  case EpisodeType.Credits:                      epNumberFormatted = "C" + epno.ToString();                      break;                  case EpisodeType.Special:                      epNumberFormatted = "S" + epno.ToString();                      break;                  case EpisodeType.Other:                      epNumberFormatted = "0" + epno.ToString();                      break;                  case EpisodeType.Trailer:                      epNumberFormatted = "T" + epno.ToString();                      break;                  case EpisodeType.Parody:                      epNumberFormatted = "P" + epno.ToString();                      break;              }
Missing Default,AniDBAPI.Commands,AniDBUDPCommand,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBUDPCommand.cs,ProcessCommand,The following switch statement is missing a default case: switch (ResponseCode)                  {                      case 600:                          errormsg = "600 INTERNAL SERVER ERROR";                          break;                      case 601:                          errormsg = "601 ANIDB OUT OF SERVICE - TRY AGAIN LATER";                          break;                      case 602:                          errormsg = "602 SERVER BUSY - TRY AGAIN LATER";                          break;                      case 604:                          errormsg = "TIMEOUT - DELAY AND RESUBMIT";                          break;                  }
Missing Default,Shoko.Server.Commands,AniDBCommand_GetGroup,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\AniDB_API\Commands\AniDBCommand_GetGroup.cs,Process,The following switch statement is missing a default case: switch (sMsgType)              {                  case "250":                  {                      // 250 GROUP                      //3938|704|1900|53|1126|Ayako-Fansubs|Ayako|#Ayako|irc.rizon.net|http://ayakofansubs.info/|1669.png                      Group = new Raw_AniDB_Group(socketResponse);                      return AniDBUDPResponseCode.GotGroup;                  }                  case "350": return AniDBUDPResponseCode.NoSuchGroup;                  case "501": return AniDBUDPResponseCode.LoginRequired;              }
Missing Default,Shoko.Server.Commands,CommandRequest_DownloadAniDBImages,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Commands\Import\CommandRequest_DownloadAniDBImages.cs,ProcessCommand,The following switch statement is missing a default case: switch (EntityTypeEnum)                      {                          case ImageEntityType.AniDB_Cover:                              SVR_AniDB_Anime anime = RepoFactory.AniDB_Anime.GetByAnimeID(AnimeID);                              if (anime == null)                              {                                  logger.Warn(                                      $"AniDB poster image failed to download: Can't find AniDB_Anime with ID: {AnimeID}");                                  return;                              }                                downloadURLs.Add(string.Format(Constants.URLS.AniDB_Images' anime.Picname));                              fileNames.Add(anime.PosterPath);                              break;                            case ImageEntityType.AniDB_Character:                              if (!ServerSettings.Instance.AniDb.DownloadCharacters) continue;                              var chrs = (from xref1 in RepoFactory.AniDB_Anime_Character.GetByAnimeID(AnimeID)                                      select RepoFactory.AniDB_Character.GetByCharID(xref1.CharID))                                  .Where(a => !string.IsNullOrEmpty(a?.PicName))                                  .DistinctBy(a => a.CharID)                                  .ToList();                              if (chrs == null || chrs.Count == 0)                              {                                  logger.Warn(                                      $"AniDB Character image failed to download: Can't find Character for anime: {AnimeID}");                                  return;                              }                                foreach (var chr in chrs)                              {                                  downloadURLs.Add(string.Format(Constants.URLS.AniDB_Images' chr.PicName));                                  fileNames.Add(chr.GetPosterPath());                              }                                ShokoService.CmdProcessorGeneral.QueueState = PrettyDescriptionCharacters;                              break;                            case ImageEntityType.AniDB_Creator:                              if (!ServerSettings.Instance.AniDb.DownloadCreators) continue;                                var creators = (from xref1 in RepoFactory.AniDB_Anime_Character.GetByAnimeID(AnimeID)                                      from xref2 in RepoFactory.AniDB_Character_Seiyuu.GetByCharID(xref1.CharID)                                      select RepoFactory.AniDB_Seiyuu.GetBySeiyuuID(xref2.SeiyuuID))                                  .Where(a => !string.IsNullOrEmpty(a?.PicName))                                  .DistinctBy(a => a.SeiyuuID)                                  .ToList();                              if (creators == null || creators.Count == 0)                              {                                  logger.Warn(                                      $"AniDB Seiyuu image failed to download: Can't find Seiyuus for anime: {AnimeID}");                                  return;                              }                                foreach (var creator in creators)                              {                                  downloadURLs.Add(string.Format(Constants.URLS.AniDB_Images' creator.PicName));                                  fileNames.Add(creator.GetPosterPath());                              }                                ShokoService.CmdProcessorGeneral.QueueState = PrettyDescriptionCreators;                              break;                      }
Missing Default,Shoko.Server.Commands,CommandRequest_DownloadImage,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Commands\Import\CommandRequest_DownloadImage.cs,ProcessCommand,The following switch statement is missing a default case: switch (EntityTypeEnum)                  {                      case ImageEntityType.TvDB_Episode:                          TvDB_Episode ep = RepoFactory.TvDB_Episode.GetByID(EntityID);                          if (string.IsNullOrEmpty(ep?.Filename))                          {                              logger.Warn($"TvDB Episode image failed to download: Can't get episode with ID: {EntityID}");                              return;                          }                          req = new ImageDownloadRequest(EntityTypeEnum' ep' ForceDownload);                          break;                        case ImageEntityType.TvDB_FanArt:                          TvDB_ImageFanart fanart = RepoFactory.TvDB_ImageFanart.GetByID(EntityID);                          if (string.IsNullOrEmpty(fanart?.BannerPath))                          {                              logger.Warn($"TvDB Fanart image failed to download: Can't find valid fanart with ID: {EntityID}");                              RemoveImageRecord();                              return;                          }                          req = new ImageDownloadRequest(EntityTypeEnum' fanart' ForceDownload);                          break;                        case ImageEntityType.TvDB_Cover:                          TvDB_ImagePoster poster = RepoFactory.TvDB_ImagePoster.GetByID(EntityID);                          if (string.IsNullOrEmpty(poster?.BannerPath))                          {                              logger.Warn($"TvDB Poster image failed to download: Can't find valid poster with ID: {EntityID}");                              RemoveImageRecord();                              return;                          }                          req = new ImageDownloadRequest(EntityTypeEnum' poster' ForceDownload);                          break;                        case ImageEntityType.TvDB_Banner:                          TvDB_ImageWideBanner wideBanner = RepoFactory.TvDB_ImageWideBanner.GetByID(EntityID);                          if (string.IsNullOrEmpty(wideBanner?.BannerPath))                          {                              logger.Warn($"TvDB Banner image failed to download: Can't find valid banner with ID: {EntityID}");                              RemoveImageRecord();                              return;                          }                          req = new ImageDownloadRequest(EntityTypeEnum' wideBanner' ForceDownload);                          break;                        case ImageEntityType.MovieDB_Poster:                          MovieDB_Poster moviePoster = RepoFactory.MovieDB_Poster.GetByID(EntityID);                          if (string.IsNullOrEmpty(moviePoster?.URL))                          {                              logger.Warn($"MovieDB Poster image failed to download: Can't find valid poster with ID: {EntityID}");                              RemoveImageRecord();                              return;                          }                          req = new ImageDownloadRequest(EntityTypeEnum' moviePoster' ForceDownload);                          break;                        case ImageEntityType.MovieDB_FanArt:                          MovieDB_Fanart movieFanart = RepoFactory.MovieDB_Fanart.GetByID(EntityID);                          if (string.IsNullOrEmpty(movieFanart?.URL))                          {                              logger.Warn($"MovieDB Fanart image failed to download: Can't find valid fanart with ID: {EntityID}");                              return;                          }                          req = new ImageDownloadRequest(EntityTypeEnum' movieFanart' ForceDownload);                          break;                        case ImageEntityType.AniDB_Cover:                          SVR_AniDB_Anime anime = RepoFactory.AniDB_Anime.GetByAnimeID(EntityID);                          if (anime == null)                          {                              logger.Warn($"AniDB poster image failed to download: Can't find AniDB_Anime with ID: {EntityID}");                              return;                          }                          AniDbImageRateLimiter.Instance.EnsureRate();                          req = new ImageDownloadRequest(EntityTypeEnum' anime' ForceDownload);                          break;                        case ImageEntityType.AniDB_Character:                          AniDB_Character chr = RepoFactory.AniDB_Character.GetByCharID(EntityID);                          if (chr == null)                          {                              logger.Warn($"AniDB Character image failed to download: Can't find AniDB Character with ID: {EntityID}");                              return;                          }                          AniDbImageRateLimiter.Instance.EnsureRate();                          req = new ImageDownloadRequest(EntityTypeEnum' chr' ForceDownload);                          break;                        case ImageEntityType.AniDB_Creator:                          AniDB_Seiyuu creator = RepoFactory.AniDB_Seiyuu.GetBySeiyuuID(EntityID);                          if (creator == null)                          {                              logger.Warn($"AniDB Seiyuu image failed to download: Can't find Seiyuu with ID: {EntityID}");                              return;                          }                          AniDbImageRateLimiter.Instance.EnsureRate();                          req = new ImageDownloadRequest(EntityTypeEnum' creator' ForceDownload);                          break;                  }
Missing Default,Shoko.Server.Commands,CommandRequest_DownloadImage,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Commands\Import\CommandRequest_DownloadImage.cs,RemoveImageRecord,The following switch statement is missing a default case: switch (EntityTypeEnum)                  {                      case ImageEntityType.TvDB_FanArt:                          TvDB_ImageFanart fanart = RepoFactory.TvDB_ImageFanart.GetByID(EntityID);                          if (fanart == null) return;                          RepoFactory.TvDB_ImageFanart.Delete(fanart);                          break;                        case ImageEntityType.TvDB_Cover:                          TvDB_ImagePoster poster = RepoFactory.TvDB_ImagePoster.GetByID(EntityID);                          if (poster == null) return;                          RepoFactory.TvDB_ImagePoster.Delete(poster);                          break;                        case ImageEntityType.TvDB_Banner:                          TvDB_ImageWideBanner wideBanner = RepoFactory.TvDB_ImageWideBanner.GetByID(EntityID);                          if (wideBanner == null) return;                          RepoFactory.TvDB_ImageWideBanner.Delete(wideBanner);                          break;                        case ImageEntityType.MovieDB_Poster:                          MovieDB_Poster moviePoster = RepoFactory.MovieDB_Poster.GetByID(EntityID);                          if (moviePoster == null) return;                          RepoFactory.MovieDB_Poster.Delete(moviePoster);                          break;                        case ImageEntityType.MovieDB_FanArt:                          MovieDB_Fanart movieFanart = RepoFactory.MovieDB_Fanart.GetByID(EntityID);                          if (movieFanart == null) return;                          RepoFactory.MovieDB_Fanart.Delete(movieFanart);                          break;                  }
Missing Default,Shoko.Server.Commands,CommandRequestImplementation,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Commands\CommandRequestImplementation.cs,Save,The following switch statement is missing a default case: switch (CommandRequestRepository.GetQueueIndex(cri))              {                  case 0:                      ShokoService.CmdProcessorGeneral.NotifyOfNewCommand();                      break;                  case 1:                      ShokoService.CmdProcessorHasher.NotifyOfNewCommand();                      break;                  case 2:                      ShokoService.CmdProcessorImages.NotifyOfNewCommand();                      break;              }
Missing Default,Shoko.Server.Commands,CommandRequest_DeleteFileFromMyList,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Commands\AniDB\CommandRequest_DeleteFileFromMyList.cs,ProcessCommand,The following switch statement is missing a default case: switch (ServerSettings.Instance.AniDb.MyList_DeleteType)                  {                      case AniDBFileDeleteType.Delete:                          if (MyListID > 0)                          {                              ShokoService.AnidbProcessor.DeleteFileFromMyList(MyListID);                              logger.Info("Deleting file from list: MyListID: {0}"' MyListID);                          }                          else                          {                              ShokoService.AnidbProcessor.DeleteFileFromMyList(Hash' FileSize);                              logger.Info("Deleting file from list: Hash: {0}"' Hash);                          }                          break;                        case AniDBFileDeleteType.MarkDeleted:                          if (MyListID > 0)                          {                              ShokoService.AnidbProcessor.MarkFileAsDeleted(MyListID);                              logger.Info("Marking file as deleted from list: MyListID: {0}"' MyListID);                              break;                          }                          logger.Warn("File doesn't have a MyListID' can't mark as deleted: {0}"' Hash);                          break;                        case AniDBFileDeleteType.MarkUnknown:                          if (MyListID > 0)                          {                              ShokoService.AnidbProcessor.MarkFileAsUnknown(MyListID);                              logger.Info("Marking file as unknown: MyListID: {0}"' MyListID);                              break;                          }                          logger.Warn("File doesn't have a MyListID' can't mark as unknown: {0}"' Hash);                          break;                        case AniDBFileDeleteType.DeleteLocalOnly:                          if (MyListID > 0)                              logger.Info(                                  "Keeping physical file and AniDB MyList entry' deleting from local DB: MyListID: {0}"'                                  MyListID);                          else                              logger.Info(                                  "Keeping physical file and AniDB MyList entry' deleting from local DB: Hash: {0}"'                                  Hash);                          break;                        case AniDBFileDeleteType.MarkExternalStorage:                          if (MyListID > 0)                          {                              ShokoService.AnidbProcessor.MarkFileAsRemote(MyListID);                              logger.Info("Moving file to external storage: MyListID: {0}"' MyListID);                              break;                          }                          logger.Warn("File doesn't have a MyListID' can't mark as remote: {0}"' Hash);                          break;                      case AniDBFileDeleteType.MarkDisk:                          if (MyListID > 0)                          {                              ShokoService.AnidbProcessor.MarkFileAsOnDisk(MyListID);                              logger.Info("Moving file to external storage: MyListID: {0}"' MyListID);                              break;                          }                          logger.Warn("File doesn't have a MyListID' can't mark as on disk: {0}"' Hash);                          break;                  }
Missing Default,Shoko.Server.API,OmitEmptyEnumerableResolver,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\Resolvers\OmitEmptyEnumerableResolver.cs,EnumerableAny,The following switch statement is missing a default case: switch (member.MemberType)              {                  case MemberTypes.Property:                      enumerable = instance                          .GetType()                          .GetProperty(member.Name)                          ?.GetValue(instance' null) as IEnumerable;                      break;                  case MemberTypes.Field:                      enumerable = instance                          .GetType()                          .GetField(member.Name)                          .GetValue(instance) as IEnumerable;                      break;              }
Missing Default,Shoko.Server.API.SignalR,EventsHub,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\SignalR\EventsHub.cs,ChangeQueueProcessingState,The following switch statement is missing a default case: switch (queue.ToLower())              {                  case "general":                      ShokoService.CmdProcessorGeneral.Paused = paused;                      break;                  case "hasher":                      ShokoService.CmdProcessorHasher.Paused = paused;                      break;                  case "images":                      ShokoService.CmdProcessorImages.Paused = paused;                      break;              }
Missing Default,Shoko.Server.API.v2.Models.common,Group,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v2\Models\common\Group.cs,GenerateSizes,The following switch statement is missing a default case: switch (ep.EpisodeTypeEnum)                  {                      case EpisodeType.Episode:                      {                          eps++;                          if (local) local_eps++;                          if ((ep.GetUserRecord(uid)?.WatchedCount ?? 0) > 0) watched_eps++;                          break;                      }                      case EpisodeType.Credits:                      {                          credits++;                          if (local) local_credits++;                          if ((ep.GetUserRecord(uid)?.WatchedCount ?? 0) > 0) watched_credits++;                          break;                      }                      case EpisodeType.Special:                      {                          specials++;                          if (local) local_specials++;                          if ((ep.GetUserRecord(uid)?.WatchedCount ?? 0) > 0) watched_specials++;                          break;                      }                      case EpisodeType.Trailer:                      {                          trailers++;                          if (local) local_trailers++;                          if ((ep.GetUserRecord(uid)?.WatchedCount ?? 0) > 0) watched_trailers++;                          break;                      }                      case EpisodeType.Parody:                      {                          parodies++;                          if (local) local_parodies++;                          if ((ep.GetUserRecord(uid)?.WatchedCount ?? 0) > 0) watched_parodies++;                          break;                      }                      case EpisodeType.Other:                      {                          others++;                          if (local) local_others++;                          if ((ep.GetUserRecord(uid)?.WatchedCount ?? 0) > 0) watched_others++;                          break;                      }                  }
Missing Default,Shoko.Server.API.v2.Models.common,RawFile,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v2\Models\common\RawFile.cs,RawFile,The following switch statement is missing a default case: switch (p.StreamType)                      {                          //video                          case 1:                              new_media.AddVideo(p);                              break;                          //audio                          case 2:                              new_media.AddAudio(p);                              break;                          //subtitle                          case 3:                              new_media.AddSubtitle(p);                              break;                          //menu                          case 4:                              Dictionary<string' string> mdict = new Dictionary<string' string>();                              //TODO APIv2: menu object could be usefull for external players                              new_media.AddMenu(mdict);                              break;                      }
Missing Default,Shoko.Server.API.v2.Models.common,Serie,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v2\Models\common\Serie.cs,GenerateSizes,The following switch statement is missing a default case: switch (ep.EpisodeTypeEnum)                  {                      case EpisodeType.Episode:                      {                          eps++;                          if (local) local_eps++;                          if (watched) watched_eps++;                          break;                      }                      case EpisodeType.Credits:                      {                          credits++;                          if (local) local_credits++;                          if (watched) watched_credits++;                          break;                      }                      case EpisodeType.Special:                      {                          specials++;                          if (local) local_specials++;                          if (watched) watched_specials++;                          break;                      }                      case EpisodeType.Trailer:                      {                          trailers++;                          if (local) local_trailers++;                          if (watched) watched_trailers++;                          break;                      }                      case EpisodeType.Parody:                      {                          parodies++;                          if (local) local_parodies++;                          if (watched) watched_parodies++;                          break;                      }                      case EpisodeType.Other:                      {                          others++;                          if (local) local_others++;                          if (watched) watched_others++;                          break;                      }                  }
Missing Default,Shoko.Server.API.v2.Modules,PlexWebhook,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v2\Modules\PlexWebhook.cs,WebhookPost,The following switch statement is missing a default case: switch (payload.Event)              {                  case "media.scrobble":                      Scrobble(payload);                      break;                  case "media.resume":                  case "media.play":                      TraktScrobble(payload' ScrobblePlayingStatus.Start);                      break;                  case "media.pause":                      TraktScrobble(payload' ScrobblePlayingStatus.Pause);                      break;                  case "media.stop":                      TraktScrobble(payload' ScrobblePlayingStatus.Stop);                      break;              }
Missing Default,Shoko.Server.API.v3,ModelHelper,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\API\v3\Helpers\ModelHelper.cs,GenerateSizes,The following switch statement is missing a default case: switch (ep.EpisodeTypeEnum)                  {                      case EpisodeType.Episode:                      {                          eps++;                          if (local) localEps++;                          if (watched) watchedEps++;                          break;                      }                      case EpisodeType.Credits:                      {                          credits++;                          if (local) localCredits++;                          if (watched) watchedCredits++;                          break;                      }                      case EpisodeType.Special:                      {                          specials++;                          if (local) localSpecials++;                          if (watched) watchedSpecials++;                          break;                      }                      case EpisodeType.Trailer:                      {                          trailers++;                          if (local) localTrailers++;                          if (watched) watchedTrailers++;                          break;                      }                      case EpisodeType.Parody:                      {                          parodies++;                          if (local) localParodies++;                          if (watched) watchedParodies++;                          break;                      }                      case EpisodeType.Other:                      {                          others++;                          if (local) localOthers++;                          if (watched) watchedOthers++;                          break;                      }                  }
Missing Default,Shoko.Server.Extensions,ModelClients,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Extensions\ModelClients.cs,ToClient,The following switch statement is missing a default case: switch (imgType)              {                  case ImageEntityType.TvDB_Banner:                      parentImage = RepoFactory.TvDB_ImageWideBanner.GetByID(defaultImage.ImageParentID);                      break;                  case ImageEntityType.TvDB_Cover:                      parentImage = RepoFactory.TvDB_ImagePoster.GetByID(defaultImage.ImageParentID);                      break;                  case ImageEntityType.TvDB_FanArt:                      parentImage = RepoFactory.TvDB_ImageFanart.GetByID(defaultImage.ImageParentID);                      break;                  case ImageEntityType.MovieDB_Poster:                      parentImage = RepoFactory.MovieDB_Poster.GetByID(defaultImage.ImageParentID);                      break;                  case ImageEntityType.MovieDB_FanArt:                      parentImage = RepoFactory.MovieDB_Fanart.GetByID(defaultImage.ImageParentID);                      break;              }
Missing Default,Shoko.Server.Extensions,ModelClients,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Extensions\ModelClients.cs,ToClient,The following switch statement is missing a default case: switch (imgType)              {                  case ImageEntityType.TvDB_Banner:                      contract.TVWideBanner = (parentImage as TvDB_ImageWideBanner);                      break;                  case ImageEntityType.TvDB_Cover:                      contract.TVPoster = (parentImage as TvDB_ImagePoster);                      break;                  case ImageEntityType.TvDB_FanArt:                      contract.TVFanart = (parentImage as TvDB_ImageFanart);                      break;                  case ImageEntityType.MovieDB_Poster:                      contract.MoviePoster = (parentImage as MovieDB_Poster);                      break;                  case ImageEntityType.MovieDB_FanArt:                      contract.MovieFanart = (parentImage as MovieDB_Fanart);                      break;              }
Missing Default,Shoko.Server.Models,SVR_AniDB_Anime,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Models\SVR_AniDB_Anime.cs,GetDefaultPosterPathNoBlanks,The following switch statement is missing a default case: switch (imageType)              {                  case ImageEntityType.AniDB_Cover:                      return PosterPath;                    case ImageEntityType.TvDB_Cover:                      TvDB_ImagePoster tvPoster =                          RepoFactory.TvDB_ImagePoster.GetByID(defaultPoster.ImageParentID);                      if (tvPoster != null)                          return tvPoster.GetFullImagePath();                      else                          return PosterPath;                    case ImageEntityType.MovieDB_Poster:                      MovieDB_Poster moviePoster =                          RepoFactory.MovieDB_Poster.GetByID(defaultPoster.ImageParentID);                      if (moviePoster != null)                          return moviePoster.GetFullImagePath();                      else                          return PosterPath;              }
Missing Default,Shoko.Server.Models,SVR_AniDB_Anime,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Models\SVR_AniDB_Anime.cs,GetDefaultPosterDetailsNoBlanks,The following switch statement is missing a default case: switch (imageType)              {                  case ImageEntityType.AniDB_Cover:                      return details;                    case ImageEntityType.TvDB_Cover:                      TvDB_ImagePoster tvPoster =                          RepoFactory.TvDB_ImagePoster.GetByID(defaultPoster.ImageParentID);                      if (tvPoster != null)                          details = new ImageDetails                          {                              ImageType = ImageEntityType.TvDB_Cover'                              ImageID = tvPoster.TvDB_ImagePosterID                          };                      return details;                    case ImageEntityType.MovieDB_Poster:                      MovieDB_Poster moviePoster =                          RepoFactory.MovieDB_Poster.GetByID(defaultPoster.ImageParentID);                      if (moviePoster != null)                          details = new ImageDetails                          {                              ImageType = ImageEntityType.MovieDB_Poster'                              ImageID = moviePoster.MovieDB_PosterID                          };                      return details;              }
Missing Default,Shoko.Server.Models,SVR_AniDB_Anime,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Models\SVR_AniDB_Anime.cs,GetDefaultFanartDetailsNoBlanks,The following switch statement is missing a default case: switch (imageType)              {                  case ImageEntityType.TvDB_FanArt:                      TvDB_ImageFanart tvFanart = RepoFactory.TvDB_ImageFanart.GetByID(fanart.ImageParentID);                      if (tvFanart != null)                          details = new ImageDetails                          {                              ImageType = ImageEntityType.TvDB_FanArt'                              ImageID = tvFanart.TvDB_ImageFanartID                          };                      return details;                    case ImageEntityType.MovieDB_FanArt:                      MovieDB_Fanart movieFanart = RepoFactory.MovieDB_Fanart.GetByID(fanart.ImageParentID);                      if (movieFanart != null)                          details = new ImageDetails                          {                              ImageType = ImageEntityType.MovieDB_FanArt'                              ImageID = movieFanart.MovieDB_FanartID                          };                      return details;              }
Missing Default,Shoko.Server.Models,SVR_AniDB_Anime,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Models\SVR_AniDB_Anime.cs,GetDefaultFanartOnlineURL,The following switch statement is missing a default case: switch (imageType)              {                  case ImageEntityType.TvDB_FanArt:                      TvDB_ImageFanart tvFanart =                          RepoFactory.TvDB_ImageFanart.GetByID(fanart.ImageParentID);                      if (tvFanart != null)                          return string.Format(Constants.URLS.TvDB_Images' tvFanart.BannerPath);                      break;                    case ImageEntityType.MovieDB_FanArt:                      MovieDB_Fanart movieFanart =                          RepoFactory.MovieDB_Fanart.GetByID(fanart.ImageParentID);                      if (movieFanart != null)                          return movieFanart.URL;                      break;              }
Missing Default,Shoko.Server.Models,SVR_AniDB_Anime,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Models\SVR_AniDB_Anime.cs,GetDefaultWideBannerDetailsNoBlanks,The following switch statement is missing a default case: switch (imageType)              {                  case ImageEntityType.TvDB_Banner:                      details = new ImageDetails                      {                          ImageType = ImageEntityType.TvDB_Banner'                          ImageID = banner.ToClient().TVWideBanner.TvDB_ImageWideBannerID                      };                      return details;              }
Missing Default,Shoko.Server.Models,SVR_AniDB_Anime,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Models\SVR_AniDB_Anime.cs,CreateResources,The following switch statement is missing a default case: switch (resource.Type)                  {                      case AniDB_ResourceLinkType.ANN:                      {                          this.ANNID = resource.ID;                          break;                      }                      case AniDB_ResourceLinkType.ALLCinema:                      {                          this.AllCinemaID = resource.ID;                          break;                      }                      case AniDB_ResourceLinkType.AnimeNFO:                      {                          this.AnimeNfo = resource.ID;                          break;                      }                      case AniDB_ResourceLinkType.Site_JP:                      {                          this.Site_JP = resource.RawID;                          break;                      }                      case AniDB_ResourceLinkType.Site_EN:                      {                          this.Site_EN = resource.RawID;                          break;                      }                      case AniDB_ResourceLinkType.Wiki_EN:                      {                          this.Wikipedia_ID = resource.RawID;                          break;                      }                      case AniDB_ResourceLinkType.Wiki_JP:                      {                          this.WikipediaJP_ID = resource.RawID;                          break;                      }                      case AniDB_ResourceLinkType.Syoboi:                      {                          this.SyoboiID = resource.ID;                          break;                      }                      case AniDB_ResourceLinkType.Anison:                      {                          this.AnisonID = resource.ID;                          break;                      }                      case AniDB_ResourceLinkType.Crunchyroll:                      {                          this.CrunchyrollID = resource.RawID;                          break;                      }                      case AniDB_ResourceLinkType.MAL:                      {                          int id = resource.ID;                          if (id == 0) break;                          if (RepoFactory.CrossRef_AniDB_MAL.GetByMALID(id) != null) continue;                          CrossRef_AniDB_MAL xref = new CrossRef_AniDB_MAL                          {                              AnimeID = AnimeID'                              CrossRefSource = (int) CrossRefSource.AniDB'                              MALID = id'                              StartEpisodeNumber = 1'                              StartEpisodeType = 1                          };                            malLinks.Add(xref);                          break;                      }                  }
Missing Default,Shoko.Server.Models,SVR_AniDB_Anime,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Models\SVR_AniDB_Anime.cs,ToAzure,The following switch statement is missing a default case: switch (recType)                  {                      case AniDBRecommendationType.ForFans:                          comment.CommentType = (int) WhatPeopleAreSayingType.AniDBForFans;                          break;                      case AniDBRecommendationType.MustSee:                          comment.CommentType = (int) WhatPeopleAreSayingType.AniDBMustSee;                          break;                      case AniDBRecommendationType.Recommended:                          comment.CommentType = (int) WhatPeopleAreSayingType.AniDBRecommendation;                          break;                  }
Missing Default,Shoko.Server.Models,SVR_AnimeGroup,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Models\SVR_AnimeGroup.cs,BatchGetVotes,The following switch statement is missing a default case: switch (vote.VoteType)                          {                              case (int)AniDBVoteType.Anime:                                  permVoteCount++;                                  permVoteTotal += vote.VoteValue;                                  break;                              case (int)AniDBVoteType.AnimeTemp:                                  tempVoteCount++;                                  tempVoteTotal += vote.VoteValue;                                  break;                          }
Missing Default,Shoko.Server.Models,SVR_GroupFilter,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Models\SVR_GroupFilter.cs,EvaluateConditions,The following switch statement is missing a default case: switch (gfc.GetConditionTypeEnum())              {                  case GroupFilterConditionType.Favourite:                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.Include && contractGroup.IsFave == 0)                          return false;                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.Exclude && contractGroup.IsFave == 1)                          return false;                      break;                    case GroupFilterConditionType.MissingEpisodes:                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.Include &&                          (contractGroup.MissingEpisodeCount > 0 || contractGroup.MissingEpisodeCountGroups > 0) ==                          false) return false;                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.Exclude &&                          (contractGroup.MissingEpisodeCount > 0 || contractGroup.MissingEpisodeCountGroups > 0)) return false;                      break;                    case GroupFilterConditionType.MissingEpisodesCollecting:                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.Include &&                          contractGroup.MissingEpisodeCountGroups > 0 == false) return false;                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.Exclude &&                          contractGroup.MissingEpisodeCountGroups > 0) return false;                      break;                  case GroupFilterConditionType.Tag:                      List<string> tags =                          gfc.ConditionParameter.Trim()                              .Split(new[] {'''}' StringSplitOptions.RemoveEmptyEntries)                              .Select(a => a.ToLowerInvariant().Trim())                              .Where(a => !string.IsNullOrWhiteSpace(a))                              .ToList();                      bool tagsFound =                          tags.Any(                              a => contractGroup.Stat_AllTags.Contains(a' StringComparer.InvariantCultureIgnoreCase));                      if ((gfc.GetConditionOperatorEnum() == GroupFilterOperator.In ||                           gfc.GetConditionOperatorEnum() == GroupFilterOperator.Include) && !tagsFound) return false;                      if ((gfc.GetConditionOperatorEnum() == GroupFilterOperator.NotIn ||                           gfc.GetConditionOperatorEnum() == GroupFilterOperator.Exclude) && tagsFound) return false;                      break;                  case GroupFilterConditionType.Year:                      HashSet<int> years = new HashSet<int>();                      string[] parameterStrings = gfc.ConditionParameter.Trim()                          .Split(new[] {'''}' StringSplitOptions.RemoveEmptyEntries);                      foreach (string yearString in parameterStrings)                      {                          if (int.TryParse(yearString.Trim()' out int year))                              years.Add(year);                      }                      if (years.Count <= 0) return false;                      if ((gfc.GetConditionOperatorEnum() == GroupFilterOperator.Include || gfc.GetConditionOperatorEnum() == GroupFilterOperator.In) &&                          !contractGroup.Stat_AllYears.FindInEnumerable(years))                          return false;                      if ((gfc.GetConditionOperatorEnum() == GroupFilterOperator.Exclude || gfc.GetConditionOperatorEnum() == GroupFilterOperator.NotIn) &&                          contractGroup.Stat_AllYears.FindInEnumerable(years))                          return false;                      break;                  case GroupFilterConditionType.Season:                      string[] paramStrings = gfc.ConditionParameter.Trim().Split(''');                        switch (gfc.GetConditionOperatorEnum())                      {                          case GroupFilterOperator.Include:                          case GroupFilterOperator.In:                              return paramStrings.FindInEnumerable(contractGroup.Stat_AllSeasons);                          case GroupFilterOperator.Exclude:                          case GroupFilterOperator.NotIn:                              return !paramStrings.FindInEnumerable(contractGroup.Stat_AllSeasons);                      }                      break;                  case GroupFilterConditionType.HasWatchedEpisodes:                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.Include &&                          contractGroup.WatchedEpisodeCount > 0 == false)                          return false;                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.Exclude &&                          contractGroup.WatchedEpisodeCount > 0)                          return false;                      break;                    case GroupFilterConditionType.HasUnwatchedEpisodes:                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.Include &&                          contractGroup.UnwatchedEpisodeCount > 0 == false)                          return false;                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.Exclude &&                          contractGroup.UnwatchedEpisodeCount > 0)                          return false;                      break;                    case GroupFilterConditionType.AssignedTvDBInfo:                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.Include &&                          contractGroup.Stat_HasTvDBLink == false)                          return false;                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.Exclude &&                          contractGroup.Stat_HasTvDBLink)                          return false;                      break;                    case GroupFilterConditionType.AssignedMALInfo:                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.Include &&                          contractGroup.Stat_HasMALLink == false)                          return false;                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.Exclude &&                          contractGroup.Stat_HasMALLink)                          return false;                      break;                    case GroupFilterConditionType.AssignedMovieDBInfo:                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.Include &&                          contractGroup.Stat_HasMovieDBLink == false)                          return false;                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.Exclude &&                          contractGroup.Stat_HasMovieDBLink)                          return false;                      break;                    case GroupFilterConditionType.AssignedTvDBOrMovieDBInfo:                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.Include &&                          !contractGroup.Stat_HasMovieDBOrTvDBLink)                          return false;                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.Exclude &&                          contractGroup.Stat_HasMovieDBOrTvDBLink)                          return false;                      break;                    case GroupFilterConditionType.CompletedSeries:                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.Include &&                          contractGroup.Stat_IsComplete == false)                          return false;                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.Exclude &&                          contractGroup.Stat_IsComplete)                          return false;                      break;                    case GroupFilterConditionType.FinishedAiring:                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.Include &&                          contractGroup.Stat_HasFinishedAiring == false)                          return false;                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.Exclude &&                          contractGroup.Stat_HasFinishedAiring)                          return false;                      break;                    case GroupFilterConditionType.UserVoted:                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.Include &&                          contractGroup.Stat_UserVotePermanent.HasValue == false) return false;                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.Exclude &&                          contractGroup.Stat_UserVotePermanent.HasValue) return false;                      break;                    case GroupFilterConditionType.UserVotedAny:                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.Include &&                          contractGroup.Stat_UserVoteOverall.HasValue == false) return false;                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.Exclude &&                          contractGroup.Stat_UserVoteOverall.HasValue) return false;                      break;                    case GroupFilterConditionType.AirDate:                      DateTime filterDate;                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.LastXDays)                      {                          int.TryParse(gfc.ConditionParameter' out int days);                          filterDate = DateTime.Today.AddDays(0 - days);                      }                      else                          filterDate = GetDateFromString(gfc.ConditionParameter);                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.GreaterThan ||                          gfc.GetConditionOperatorEnum() == GroupFilterOperator.LastXDays)                      {                          if (!contractGroup.Stat_AirDate_Min.HasValue || !contractGroup.Stat_AirDate_Max.HasValue)                              return false;                          if (contractGroup.Stat_AirDate_Max.Value < filterDate) return false;                      }                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.LessThan)                      {                          if (!contractGroup.Stat_AirDate_Min.HasValue || !contractGroup.Stat_AirDate_Max.HasValue)                              return false;                          if (contractGroup.Stat_AirDate_Min.Value > filterDate) return false;                      }                      break;                  case GroupFilterConditionType.LatestEpisodeAirDate:                      DateTime filterDateEpisodeLastAired;                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.LastXDays)                      {                          int.TryParse(gfc.ConditionParameter' out int days);                          filterDateEpisodeLastAired = DateTime.Today.AddDays(0 - days);                      }                      else                          filterDateEpisodeLastAired = GetDateFromString(gfc.ConditionParameter);                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.GreaterThan ||                          gfc.GetConditionOperatorEnum() == GroupFilterOperator.LastXDays)                      {                          if (!contractGroup.LatestEpisodeAirDate.HasValue) return false;                          if (contractGroup.LatestEpisodeAirDate.Value < filterDateEpisodeLastAired) return false;                      }                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.LessThan)                      {                          if (!contractGroup.LatestEpisodeAirDate.HasValue) return false;                          if (contractGroup.LatestEpisodeAirDate.Value > filterDateEpisodeLastAired) return false;                      }                      break;                  case GroupFilterConditionType.SeriesCreatedDate:                      DateTime filterDateSeries;                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.LastXDays)                      {                          int.TryParse(gfc.ConditionParameter' out int days);                          filterDateSeries = DateTime.Today.AddDays(0 - days);                      }                      else                          filterDateSeries = GetDateFromString(gfc.ConditionParameter);                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.GreaterThan ||                          gfc.GetConditionOperatorEnum() == GroupFilterOperator.LastXDays)                      {                          if (!contractGroup.Stat_SeriesCreatedDate.HasValue) return false;                          if (contractGroup.Stat_SeriesCreatedDate.Value < filterDateSeries) return false;                      }                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.LessThan)                      {                          if (!contractGroup.Stat_SeriesCreatedDate.HasValue) return false;                          if (contractGroup.Stat_SeriesCreatedDate.Value > filterDateSeries) return false;                      }                      break;                    case GroupFilterConditionType.EpisodeWatchedDate:                      DateTime filterDateEpsiodeWatched;                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.LastXDays)                      {                          int.TryParse(gfc.ConditionParameter' out int days);                          filterDateEpsiodeWatched = DateTime.Today.AddDays(0 - days);                      }                      else                          filterDateEpsiodeWatched = GetDateFromString(gfc.ConditionParameter);                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.GreaterThan ||                          gfc.GetConditionOperatorEnum() == GroupFilterOperator.LastXDays)                      {                          if (!contractGroup.WatchedDate.HasValue) return false;                          if (contractGroup.WatchedDate.Value < filterDateEpsiodeWatched) return false;                      }                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.LessThan)                      {                          if (contractGroup?.WatchedDate == null) return false;                          if (contractGroup.WatchedDate.Value > filterDateEpsiodeWatched) return false;                      }                      break;                    case GroupFilterConditionType.EpisodeAddedDate:                      DateTime filterDateEpisodeAdded;                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.LastXDays)                      {                          int.TryParse(gfc.ConditionParameter' out int days);                          filterDateEpisodeAdded = DateTime.Today.AddDays(0 - days);                      }                      else                          filterDateEpisodeAdded = GetDateFromString(gfc.ConditionParameter);                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.GreaterThan ||                          gfc.GetConditionOperatorEnum() == GroupFilterOperator.LastXDays)                      {                          if (!contractGroup.EpisodeAddedDate.HasValue) return false;                          if (contractGroup.EpisodeAddedDate.Value < filterDateEpisodeAdded) return false;                      }                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.LessThan)                      {                          if (!contractGroup.EpisodeAddedDate.HasValue) return false;                          if (contractGroup.EpisodeAddedDate.Value > filterDateEpisodeAdded) return false;                      }                      break;                    case GroupFilterConditionType.EpisodeCount:                      int.TryParse(gfc.ConditionParameter' out var epCount);                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.GreaterThan &&                          contractGroup.Stat_EpisodeCount < epCount)                          return false;                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.LessThan &&                          contractGroup.Stat_EpisodeCount > epCount)                          return false;                      break;                    case GroupFilterConditionType.AniDBRating:                      decimal.TryParse(gfc.ConditionParameter' style' culture' out var dRating);                      decimal thisRating = contractGroup.Stat_AniDBRating / 100;                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.GreaterThan && thisRating < dRating)                          return false;                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.LessThan && thisRating > dRating)                          return false;                      break;                    case GroupFilterConditionType.UserRating:                      if (!contractGroup.Stat_UserVoteOverall.HasValue) return false;                      decimal.TryParse(gfc.ConditionParameter' style' culture' out var dUserRating);                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.GreaterThan &&                          contractGroup.Stat_UserVoteOverall.Value < dUserRating) return false;                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.LessThan &&                          contractGroup.Stat_UserVoteOverall.Value > dUserRating) return false;                      break;                    case GroupFilterConditionType.CustomTags:                      List<string> ctags =                          gfc.ConditionParameter.Trim()                              .Split(new[] {'''}' StringSplitOptions.RemoveEmptyEntries)                              .Select(a => a.ToLowerInvariant().Trim())                              .ToList();                      bool foundTag = ctags.FindInEnumerable(contractGroup.Stat_AllCustomTags);                      if ((gfc.GetConditionOperatorEnum() == GroupFilterOperator.In) && !foundTag) return false;                      if ((gfc.GetConditionOperatorEnum() == GroupFilterOperator.NotIn) && foundTag) return false;                      break;                    case GroupFilterConditionType.AnimeType:                      List<string> ctypes =                          gfc.ConditionParameter                              .Split(new[] {'''}' StringSplitOptions.RemoveEmptyEntries)                              .Select(a => ((int) Commons.Extensions.Models.RawToType(a)).ToString())                              .ToList();                      bool foundAnimeType = ctypes.FindInEnumerable(contractGroup.Stat_AnimeTypes);                      if ((gfc.GetConditionOperatorEnum() == GroupFilterOperator.In) && !foundAnimeType) return false;                      if ((gfc.GetConditionOperatorEnum() == GroupFilterOperator.NotIn) && foundAnimeType)                          return false;                      break;                    case GroupFilterConditionType.VideoQuality:                      List<string> vqs =                          gfc.ConditionParameter                              .Split(new[] {'''}' StringSplitOptions.RemoveEmptyEntries)                              .Select(a => a.ToLowerInvariant().Trim())                              .ToList();                      bool foundVid = vqs.FindInEnumerable(contractGroup.Stat_AllVideoQuality);                      bool foundVidAllEps = vqs.FindInEnumerable(contractGroup.Stat_AllVideoQuality_Episodes);                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.In && !foundVid) return false;                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.NotIn && foundVid) return false;                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.InAllEpisodes && !foundVidAllEps)                          return false;                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.NotInAllEpisodes && foundVidAllEps)                          return false;                      break;                    case GroupFilterConditionType.AudioLanguage:                      List<string> als =                          gfc.ConditionParameter.Trim()                              .Split(new[] {'''}' StringSplitOptions.RemoveEmptyEntries)                              .Select(a => a.ToLowerInvariant().Trim())                              .ToList();                      bool foundLang = als.FindInEnumerable(contractGroup.Stat_AudioLanguages);                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.In && !foundLang) return false;                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.NotIn && foundLang) return false;                      break;                    case GroupFilterConditionType.SubtitleLanguage:                      List<string> ass =                          gfc.ConditionParameter                              .Split(new[] {'''}' StringSplitOptions.RemoveEmptyEntries)                              .Select(a => a.ToLowerInvariant().Trim())                              .ToList();                      bool foundSub = ass.FindInEnumerable(contractGroup.Stat_SubtitleLanguages);                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.In && !foundSub) return false;                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.NotIn && foundSub) return false;                      break;              }
Missing Default,Shoko.Server.Models,SVR_GroupFilter,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Models\SVR_GroupFilter.cs,EvaluateConditions,The following switch statement is missing a default case: switch (gfc.GetConditionOperatorEnum())                      {                          case GroupFilterOperator.Include:                          case GroupFilterOperator.In:                              return paramStrings.FindInEnumerable(contractGroup.Stat_AllSeasons);                          case GroupFilterOperator.Exclude:                          case GroupFilterOperator.NotIn:                              return !paramStrings.FindInEnumerable(contractGroup.Stat_AllSeasons);                      }
Missing Default,Shoko.Server.Models,SVR_GroupFilter,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Models\SVR_GroupFilter.cs,EvaluateConditions,The following switch statement is missing a default case: switch (gfc.GetConditionTypeEnum())              {                  case GroupFilterConditionType.MissingEpisodes:                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.Include &&                          (contractSerie.MissingEpisodeCount > 0 || contractSerie.MissingEpisodeCountGroups > 0) ==                          false) return false;                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.Exclude &&                          (contractSerie.MissingEpisodeCount > 0 || contractSerie.MissingEpisodeCountGroups > 0))                          return false;                      break;                    case GroupFilterConditionType.MissingEpisodesCollecting:                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.Include &&                          contractSerie.MissingEpisodeCountGroups > 0 == false) return false;                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.Exclude &&                          contractSerie.MissingEpisodeCountGroups > 0) return false;                      break;                  case GroupFilterConditionType.Tag:                      List<string> tags =                          gfc.ConditionParameter.Trim()                              .Split(new[] {'''}' StringSplitOptions.RemoveEmptyEntries)                              .Select(a => a.ToLowerInvariant().Trim())                              .Where(a => !string.IsNullOrWhiteSpace(a))                              .ToList();                      bool tagsFound =                          tags.Any(a => contractSerie.AniDBAnime.AniDBAnime.GetAllTags()                              .Contains(a'                                  StringComparer.InvariantCultureIgnoreCase));                      if ((gfc.GetConditionOperatorEnum() == GroupFilterOperator.In ||                           gfc.GetConditionOperatorEnum() == GroupFilterOperator.Include) && !tagsFound) return false;                      if ((gfc.GetConditionOperatorEnum() == GroupFilterOperator.NotIn ||                           gfc.GetConditionOperatorEnum() == GroupFilterOperator.Exclude) && tagsFound) return false;                      break;                  case GroupFilterConditionType.Year:                      HashSet<int> years = new HashSet<int>();                      string[] parameterStrings = gfc.ConditionParameter.Trim().Split(''');                      foreach (string yearString in parameterStrings)                      {                          if (int.TryParse(yearString.Trim()' out int paramYear))                              years.Add(paramYear);                      }                        if (years.Count <= 0) return false;                      switch (gfc.GetConditionOperatorEnum())                      {                          case GroupFilterOperator.Include:                          case GroupFilterOperator.In:                              if (years.Any(year => contractSerie.AniDBAnime.IsInYear(year)))                                  return true;                              return false;                          case GroupFilterOperator.Exclude:                          case GroupFilterOperator.NotIn:                              if (years.Any(year => contractSerie.AniDBAnime.IsInYear(year)))                                  return false;                              return true;                      }                        break;                  case GroupFilterConditionType.Season:                      Tuple<AnimeSeason' int>[] paramStrings = gfc.ConditionParameter.Trim().Split(''').Select(a =>                      {                          var b = a.Trim().Split(' ');                          if (!Enum.TryParse(b[0]' out AnimeSeason season)) return null;                          if (!int.TryParse(b[1]' out int year)) return null;                          return Tuple.Create(season' year);                      }).Where(a => a != null).ToArray();                        switch (gfc.GetConditionOperatorEnum())                      {                          case GroupFilterOperator.Include:                          case GroupFilterOperator.In:                              return paramStrings.Any(a => contractSerie?.AniDBAnime?.IsInSeason(a.Item1' a.Item2) ?? false);                          case GroupFilterOperator.Exclude:                          case GroupFilterOperator.NotIn:                              return !paramStrings.Any(a => contractSerie?.AniDBAnime?.IsInSeason(a.Item1' a.Item2) ?? false);                      }                        break;                  case GroupFilterConditionType.HasWatchedEpisodes:                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.Include &&                          contractSerie.WatchedEpisodeCount > 0 == false)                          return false;                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.Exclude &&                          contractSerie.WatchedEpisodeCount > 0)                          return false;                      break;                    case GroupFilterConditionType.HasUnwatchedEpisodes:                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.Include &&                          contractSerie.UnwatchedEpisodeCount > 0 == false)                          return false;                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.Exclude &&                          contractSerie.UnwatchedEpisodeCount > 0)                          return false;                      break;                    case GroupFilterConditionType.AssignedTvDBInfo:                      bool tvDBInfoMissing = RepoFactory.CrossRef_AniDB_TvDB.GetByAnimeID(contractSerie.AniDB_ID).Count == 0;                      bool supposedToHaveTvDBLink = contractSerie.AniDBAnime.AniDBAnime.AnimeType !=                                                    (int) AnimeType.Movie &&                                                    !(contractSerie.AniDBAnime.AniDBAnime.Restricted > 0);                      tvDBInfoMissing &= supposedToHaveTvDBLink;                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.Include && tvDBInfoMissing)                          return false;                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.Exclude && !tvDBInfoMissing)                          return false;                      break;                    case GroupFilterConditionType.AssignedMALInfo:                      bool malMissing = contractSerie.CrossRefAniDBMAL == null ||                                        contractSerie.CrossRefAniDBMAL.Count == 0;                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.Include && malMissing) return false;                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.Exclude && !malMissing) return false;                      break;                    case GroupFilterConditionType.AssignedMovieDBInfo:                      bool movieMissing = contractSerie.CrossRefAniDBMovieDB == null;                      bool supposedToHaveMovieLink = contractSerie.AniDBAnime.AniDBAnime.AnimeType ==                                                     (int) AnimeType.Movie &&                                                     !(contractSerie.AniDBAnime.AniDBAnime.Restricted > 0);                      movieMissing &= supposedToHaveMovieLink;                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.Include && movieMissing) return false;                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.Exclude && !movieMissing)                          return false;                      break;                    case GroupFilterConditionType.AssignedTvDBOrMovieDBInfo:                      bool restricted = (contractSerie.AniDBAnime.AniDBAnime.Restricted > 0);                      bool movieLinkMissing = contractSerie.CrossRefAniDBMovieDB == null && !restricted;                      bool tvlinkMissing =                          RepoFactory.CrossRef_AniDB_TvDB.GetByAnimeID(contractSerie.AniDB_ID).Count == 0 &&                          !restricted;                      bool bothMissing = movieLinkMissing && tvlinkMissing;                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.Include && bothMissing) return false;                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.Exclude && !bothMissing) return false;                      break;                    case GroupFilterConditionType.CompletedSeries:                      bool completed = contractSerie.AniDBAnime.AniDBAnime.EndDate.HasValue &&                                       contractSerie.AniDBAnime.AniDBAnime.EndDate.Value < DateTime.Now &&                                       !(contractSerie.MissingEpisodeCount > 0 ||                                         contractSerie.MissingEpisodeCountGroups > 0);                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.Include && !completed) return false;                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.Exclude && completed) return false;                      break;                    case GroupFilterConditionType.FinishedAiring:                      bool finished = contractSerie.AniDBAnime.AniDBAnime.EndDate.HasValue &&                                      contractSerie.AniDBAnime.AniDBAnime.EndDate.Value < DateTime.Now;                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.Include && !finished) return false;                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.Exclude && finished) return false;                      break;                    case GroupFilterConditionType.UserVoted:                      bool voted = (contractSerie.AniDBAnime.UserVote != null) &&                                   (contractSerie.AniDBAnime.UserVote.VoteType == (int) AniDBVoteType.Anime);                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.Include && !voted) return false;                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.Exclude && voted) return false;                      break;                    case GroupFilterConditionType.UserVotedAny:                      bool votedany = contractSerie.AniDBAnime.UserVote != null;                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.Include && !votedany) return false;                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.Exclude && votedany) return false;                      break;                    case GroupFilterConditionType.AirDate:                      DateTime filterDate;                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.LastXDays)                      {                          int.TryParse(gfc.ConditionParameter' out int days);                          filterDate = DateTime.Today.AddDays(0 - days);                      }                      else                          filterDate = GroupFilterHelper.GetDateFromString(gfc.ConditionParameter);                        if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.GreaterThan ||                          gfc.GetConditionOperatorEnum() == GroupFilterOperator.LastXDays)                          if (!contractSerie.AniDBAnime.AniDBAnime.AirDate.HasValue ||                              contractSerie.AniDBAnime.AniDBAnime.AirDate.Value < filterDate)                              return false;                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.LessThan)                          if (!contractSerie.AniDBAnime.AniDBAnime.AirDate.HasValue ||                              contractSerie.AniDBAnime.AniDBAnime.AirDate.Value > filterDate)                              return false;                      break;                  case GroupFilterConditionType.LatestEpisodeAirDate:                      DateTime filterDateEpisodeLastAired;                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.LastXDays)                      {                          int.TryParse(gfc.ConditionParameter' out int days);                          filterDateEpisodeLastAired = DateTime.Today.AddDays(0 - days);                      }                      else                          filterDateEpisodeLastAired = GetDateFromString(gfc.ConditionParameter);                        if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.GreaterThan ||                          gfc.GetConditionOperatorEnum() == GroupFilterOperator.LastXDays)                      {                          if (!contractSerie.LatestEpisodeAirDate.HasValue) return false;                          if (contractSerie.LatestEpisodeAirDate.Value < filterDateEpisodeLastAired) return false;                      }                        if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.LessThan)                      {                          if (!contractSerie.LatestEpisodeAirDate.HasValue) return false;                          if (contractSerie.LatestEpisodeAirDate.Value > filterDateEpisodeLastAired) return false;                      }                        break;                  case GroupFilterConditionType.SeriesCreatedDate:                      DateTime filterDateSeries;                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.LastXDays)                      {                          int.TryParse(gfc.ConditionParameter' out int days);                          filterDateSeries = DateTime.Today.AddDays(0 - days);                      }                      else                          filterDateSeries = GetDateFromString(gfc.ConditionParameter);                        if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.GreaterThan ||                          gfc.GetConditionOperatorEnum() == GroupFilterOperator.LastXDays)                      {                          if (contractSerie.DateTimeCreated < filterDateSeries) return false;                      }                        if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.LessThan)                      {                          if (contractSerie.DateTimeCreated > filterDateSeries) return false;                      }                        break;                    case GroupFilterConditionType.EpisodeWatchedDate:                      DateTime filterDateEpsiodeWatched;                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.LastXDays)                      {                          int.TryParse(gfc.ConditionParameter' out int days);                          filterDateEpsiodeWatched = DateTime.Today.AddDays(0 - days);                      }                      else                          filterDateEpsiodeWatched = GetDateFromString(gfc.ConditionParameter);                        if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.GreaterThan ||                          gfc.GetConditionOperatorEnum() == GroupFilterOperator.LastXDays)                      {                          if (!contractSerie.WatchedDate.HasValue) return false;                          if (contractSerie.WatchedDate.Value < filterDateEpsiodeWatched) return false;                      }                        if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.LessThan)                      {                          if (contractSerie?.WatchedDate == null) return false;                          if (contractSerie.WatchedDate.Value > filterDateEpsiodeWatched) return false;                      }                        break;                    case GroupFilterConditionType.EpisodeAddedDate:                      DateTime filterDateEpisodeAdded;                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.LastXDays)                      {                          int.TryParse(gfc.ConditionParameter' out int days);                          filterDateEpisodeAdded = DateTime.Today.AddDays(0 - days);                      }                      else                          filterDateEpisodeAdded = GetDateFromString(gfc.ConditionParameter);                        if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.GreaterThan ||                          gfc.GetConditionOperatorEnum() == GroupFilterOperator.LastXDays)                      {                          if (!contractSerie.EpisodeAddedDate.HasValue) return false;                          if (contractSerie.EpisodeAddedDate.Value < filterDateEpisodeAdded) return false;                      }                        if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.LessThan)                      {                          if (!contractSerie.EpisodeAddedDate.HasValue) return false;                          if (contractSerie.EpisodeAddedDate.Value > filterDateEpisodeAdded) return false;                      }                        break;                    case GroupFilterConditionType.EpisodeCount:                      int.TryParse(gfc.ConditionParameter' out var epCount);                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.GreaterThan &&                          contractSerie.AniDBAnime.AniDBAnime.EpisodeCount < epCount) return false;                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.LessThan &&                          contractSerie.AniDBAnime.AniDBAnime.EpisodeCount > epCount) return false;                      break;                    case GroupFilterConditionType.AniDBRating:                      decimal.TryParse(gfc.ConditionParameter' style' culture' out var dRating);                      int totalVotes = contractSerie.AniDBAnime.AniDBAnime.VoteCount +                                       contractSerie.AniDBAnime.AniDBAnime.TempVoteCount;                      decimal totalRating = contractSerie.AniDBAnime.AniDBAnime.Rating *                                            contractSerie.AniDBAnime.AniDBAnime.VoteCount +                                            contractSerie.AniDBAnime.AniDBAnime.TempRating *                                            contractSerie.AniDBAnime.AniDBAnime.TempVoteCount;                      decimal thisRating = totalVotes == 0 ? 0 : totalRating / totalVotes / 100;                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.GreaterThan && thisRating < dRating)                          return false;                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.LessThan && thisRating > dRating)                          return false;                      break;                    case GroupFilterConditionType.UserRating:                      decimal.TryParse(gfc.ConditionParameter' style' culture' out var dUserRating);                      decimal val = contractSerie.AniDBAnime.UserVote?.VoteValue ?? 0;                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.GreaterThan && val < dUserRating)                          return false;                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.LessThan && val > dUserRating)                          return false;                      break;                      case GroupFilterConditionType.CustomTags:                      List<string> ctags =                          gfc.ConditionParameter.Trim()                              .Split(new[] {'''}' StringSplitOptions.RemoveEmptyEntries)                              .Select(a => a.ToLowerInvariant().Trim())                              .ToList();                      bool foundTag =                          ctags.FindInEnumerable(contractSerie.AniDBAnime.CustomTags.Select(a => a.TagName));                      if ((gfc.GetConditionOperatorEnum() == GroupFilterOperator.In) && !foundTag) return false;                      if ((gfc.GetConditionOperatorEnum() == GroupFilterOperator.NotIn) && foundTag) return false;                      break;                    case GroupFilterConditionType.AnimeType:                      List<string> ctypes =                          gfc.ConditionParameter.Trim()                              .Split(new[] {'''}' StringSplitOptions.RemoveEmptyEntries)                              .Select(                                  a => ((int) Commons.Extensions.Models.RawToType(a.ToLowerInvariant())).ToString())                              .ToList();                      bool foundAnimeType = ctypes.Contains(contractSerie.AniDBAnime.AniDBAnime.AnimeType.ToString());                      if ((gfc.GetConditionOperatorEnum() == GroupFilterOperator.In) && !foundAnimeType) return false;                      if ((gfc.GetConditionOperatorEnum() == GroupFilterOperator.NotIn) && foundAnimeType)                          return false;                      break;                    case GroupFilterConditionType.VideoQuality:                      List<string> vqs =                          gfc.ConditionParameter.Trim()                              .Split(new[] {'''}' StringSplitOptions.RemoveEmptyEntries)                              .Select(a => a.ToLowerInvariant().Trim())                              .ToList();                      bool foundVid = vqs.FindInEnumerable(contractSerie.AniDBAnime.Stat_AllVideoQuality);                      bool foundVidAllEps =                          vqs.FindInEnumerable(contractSerie.AniDBAnime.Stat_AllVideoQuality_Episodes);                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.In && !foundVid) return false;                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.NotIn && foundVid) return false;                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.InAllEpisodes && !foundVidAllEps)                          return false;                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.NotInAllEpisodes && foundVidAllEps)                          return false;                      break;                    case GroupFilterConditionType.AudioLanguage:                      List<string> als =                          gfc.ConditionParameter.Trim()                              .Split(new[] {'''}' StringSplitOptions.RemoveEmptyEntries)                              .Select(a => a.ToLowerInvariant().Trim())                              .ToList();                      bool foundLang = als.FindInEnumerable(contractSerie.AniDBAnime.Stat_AudioLanguages);                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.In && !foundLang) return false;                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.NotIn && foundLang) return false;                      break;                    case GroupFilterConditionType.SubtitleLanguage:                      List<string> ass =                          gfc.ConditionParameter.Trim()                              .Split(new[] {'''}' StringSplitOptions.RemoveEmptyEntries)                              .Select(a => a.ToLowerInvariant().Trim())                              .ToList();                      bool foundSub = ass.FindInEnumerable(contractSerie.AniDBAnime.Stat_AudioLanguages);                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.In && !foundSub) return false;                      if (gfc.GetConditionOperatorEnum() == GroupFilterOperator.NotIn && foundSub) return false;                      break;              }
Missing Default,Shoko.Server.Models,SVR_GroupFilter,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Models\SVR_GroupFilter.cs,EvaluateConditions,The following switch statement is missing a default case: switch (gfc.GetConditionOperatorEnum())                      {                          case GroupFilterOperator.Include:                          case GroupFilterOperator.In:                              if (years.Any(year => contractSerie.AniDBAnime.IsInYear(year)))                                  return true;                              return false;                          case GroupFilterOperator.Exclude:                          case GroupFilterOperator.NotIn:                              if (years.Any(year => contractSerie.AniDBAnime.IsInYear(year)))                                  return false;                              return true;                      }
Missing Default,Shoko.Server.Models,SVR_GroupFilter,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Models\SVR_GroupFilter.cs,EvaluateConditions,The following switch statement is missing a default case: switch (gfc.GetConditionOperatorEnum())                      {                          case GroupFilterOperator.Include:                          case GroupFilterOperator.In:                              return paramStrings.Any(a => contractSerie?.AniDBAnime?.IsInSeason(a.Item1' a.Item2) ?? false);                          case GroupFilterOperator.Exclude:                          case GroupFilterOperator.NotIn:                              return !paramStrings.Any(a => contractSerie?.AniDBAnime?.IsInSeason(a.Item1' a.Item2) ?? false);                      }
Missing Default,Shoko.Server.Providers.AniDB,AniDBConnectionHandler,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Providers\AniDB\AniDBConnectionHandler.cs,CallAniDBUDPDirectly,The following switch statement is missing a default case: switch (code)                  {                      case 600:                          errormsg = "600 INTERNAL SERVER ERROR";                          break;                      case 601:                          errormsg = "601 ANIDB OUT OF SERVICE - TRY AGAIN LATER";                          break;                      case 602:                          errormsg = "602 SERVER BUSY - TRY AGAIN LATER";                          break;                      case 604:                          errormsg = "TIMEOUT - DELAY AND RESUBMIT";                          break;                  }
Missing Default,Shoko.Server.Providers.AniDB.MyList.Commands,AniDBMyList_RequestAddFile,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Providers\AniDB\UDP\MyList\Requests\AniDBMyList_RequestAddFile.cs,ParseResponse,The following switch statement is missing a default case: switch (code)              {                  case AniDBUDPReturnCode.MYLIST_ENTRY_ADDED:                  {                      /* Response Format                       * {int4 mylist id of new entry}                       */                      // parse the MyList ID                      string[] arrResult = receivedData.Split('\n');                      if (arrResult.Length >= 2)                      {                          int.TryParse(arrResult[1]' out int myListID);                          return new AniDBUDP_Response<AniDBMyList_ResponseAddFile>                          {                              Code = code'                              Response = new AniDBMyList_ResponseAddFile                              {                                  MyListID = myListID'                                  State = State'                                  IsWatched = IsWatched'                                  WatchedDate = WatchedDate                              }                          };                      }                      break;                  }                  case AniDBUDPReturnCode.FILE_ALREADY_IN_MYLIST:                  {                      /* Response Format                       * {int4 lid}|{int4 fid}|{int4 eid}|{int4 aid}|{int4 gid}|{int4 date}|{int2 state}|{int4 viewdate}|{str storage}|{str source}|{str other}|{int2 filestate}                       */                      //file already exists: read 'watched' status                      string[] arrResult = receivedData.Split('\n');                      if (arrResult.Length >= 2)                      {                          string[] arrStatus = arrResult[1].Split('|');                          bool hasMyListID = int.TryParse(arrStatus[0]' out int myListID);                          if (!hasMyListID) throw new UnexpectedAniDBResponseException                          {                              Message = "MyListID was not provided. Use AniDBMyList_CommandAddEpisode for generic files."'                              Response = receivedData'                              ReturnCode = code                          };                                                      AniDBFile_State state = (AniDBFile_State) int.Parse(arrStatus[6]);                            int viewdate = int.Parse(arrStatus[7]);                          bool watched = viewdate > 0;                            DateTime? watchedDate = null;                          if (watched)                          {                              DateTime utcDate = new DateTime(1970' 1' 1' 0' 0' 0' DateTimeKind.Utc);                              utcDate = utcDate.AddSeconds(viewdate);                                watchedDate = utcDate.ToLocalTime();                          }                            return new AniDBUDP_Response<AniDBMyList_ResponseAddFile>                          {                              Code = code'                              Response = new AniDBMyList_ResponseAddFile                              {                                  MyListID = myListID'                                  State = state'                                  IsWatched = watched'                                  WatchedDate = watchedDate                              }                          };                      }                      break;                  }              }
Missing Default,Shoko.Server.Renamer,LegacyRenamer,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Renamer\LegacyRenamer.cs,EvaluateTestH,The following switch statement is missing a default case: switch (episodes[0].GetEpisodeTypeEnum())                  {                      case EpisodeType.Episode:                          epType = "E";                          break;                      case EpisodeType.Credits:                          epType = "C";                          break;                      case EpisodeType.Other:                          epType = "O";                          break;                      case EpisodeType.Parody:                          epType = "P";                          break;                      case EpisodeType.Special:                          epType = "S";                          break;                      case EpisodeType.Trailer:                          epType = "T";                          break;                  }
Missing Default,Shoko.Server.Repositories.Cached,AniDB_VoteRepository,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Repositories\Cached\AniDB_VoteRepository.cs,AniDB_VoteRepository,The following switch statement is missing a default case: switch (cr.VoteType)                  {                      case (int) AniDBVoteType.Anime:                      case (int) AniDBVoteType.AnimeTemp:                          SVR_AniDB_Anime.UpdateStatsByAnimeID(cr.EntityID);                          break;                      case (int) AniDBVoteType.Episode:                          SVR_AnimeEpisode ep = RepoFactory.AnimeEpisode.GetByID(cr.EntityID);                          RepoFactory.AnimeEpisode.Save(ep);                          break;                  }
Missing Default,Shoko.Server.Repositories.Cached,AniDB_VoteRepository,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Repositories\Cached\AniDB_VoteRepository.cs,AniDB_VoteRepository,The following switch statement is missing a default case: switch (cr.VoteType)                  {                      case (int) AniDBVoteType.Anime:                      case (int) AniDBVoteType.AnimeTemp:                          SVR_AniDB_Anime.UpdateStatsByAnimeID(cr.EntityID);                          break;                      case (int) AniDBVoteType.Episode:                          SVR_AnimeEpisode ep = RepoFactory.AnimeEpisode.GetByID(cr.EntityID);                          RepoFactory.AnimeEpisode.Save(ep);                          break;                  }
Missing Default,Shoko.Server.Repositories,AniDB_AnimeRepository,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Repositories\Cached\AniDB_AnimeRepository.cs,GetDefaultImagesByAnime,The following switch statement is missing a default case: switch ((ImageEntityType) aniDbDefImage.ImageParentType)                      {                          case ImageEntityType.TvDB_Banner:                              parentImage = (IImageEntity) result[1];                              break;                          case ImageEntityType.TvDB_Cover:                              parentImage = (IImageEntity) result[2];                              break;                          case ImageEntityType.TvDB_FanArt:                              parentImage = (IImageEntity) result[3];                              break;                          case ImageEntityType.MovieDB_Poster:                              parentImage = (IImageEntity) result[4];                              break;                          case ImageEntityType.MovieDB_FanArt:                              parentImage = (IImageEntity) result[5];                              break;                      }
Missing Default,Shoko.Server.Repositories,AniDB_AnimeRepository,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Repositories\Cached\AniDB_AnimeRepository.cs,GetDefaultImagesByAnime,The following switch statement is missing a default case: switch (defImage.AniDBImageSizeType)                      {                          case ImageSizeType.Poster:                              defImages.Poster = defImage;                              break;                          case ImageSizeType.WideBanner:                              defImages.WideBanner = defImage;                              break;                          case ImageSizeType.Fanart:                              defImages.Fanart = defImage;                              break;                      }
Missing Default,Shoko.Server.Settings,ServerSettings,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Settings\ServerSettings.cs,LoadLegacySettings,The following switch statement is missing a default case: switch (Legacy.DatabaseType)              {                  case Constants.DatabaseType.MySQL:                      settings.Database.Username = Legacy.MySQL_Username;                      settings.Database.Password = Legacy.MySQL_Password;                      settings.Database.Schema = Legacy.MySQL_SchemaName;                      settings.Database.Hostname = Legacy.MySQL_Hostname;                      break;                  case Constants.DatabaseType.SqlServer:                      settings.Database.Username = Legacy.DatabaseUsername;                      settings.Database.Password = Legacy.DatabasePassword;                      settings.Database.Schema = Legacy.DatabaseName;                      settings.Database.Hostname = Legacy.DatabaseServer;                      break;              }
Missing Default,Shoko.Server.Settings.Migration,ServerSettings_Legacy,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Settings\Migration\ServerSettings_Legacy.cs,LoadSettingsFromFile,The following switch statement is missing a default case: switch (res)                      {                          case true:                              // gonna try grant access again in advance                              try                              {                                  //TODO add MessageBox If Failed                                  if (!Utils.GrantAccess(ApplicationPath))                                  {                                      logger.Error("Unable to gain permissions for program data. Try running as admin.");                                  }                              }                              catch (Exception)                              {                                  // ignored                              }                              Utils.RestartAsAdmin();                              break;                          case false:                              ServerShutdown?.Invoke(null' new ReasonedEventArgs { Reason="Failed to set folder permissions" } );                              Environment.Exit(0);                              break;                      }
Missing Default,Shoko.Server.PlexAndKodi,CommonImplementation,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\PlexAndKodi\CommonImplementation.cs,GetMetadata,The following switch statement is missing a default case: switch ((JMMType) type)                  {                      case JMMType.Group:                          return GetItemsFromGroup(prov' user.JMMUserID' Id' his' nocast' filter);                      case JMMType.GroupFilter:                          return GetGroupsOrSubFiltersFromFilter(prov' user.JMMUserID' Id' his' nocast);                      case JMMType.GroupUnsort:                          return GetUnsort(prov' user.JMMUserID' his);                      case JMMType.Serie:                          return GetItemsFromSerie(prov' user.JMMUserID' Id' his' nocast);                      case JMMType.Episode:                          return GetFromEpisode(prov' user.JMMUserID' Id' his);                      case JMMType.File:                          return GetFromFile(prov' user.JMMUserID' Id' his);                      case JMMType.Playlist:                          return GetItemsFromPlaylist(prov' user.JMMUserID' Id' his);                      case JMMType.FakeIosThumb:                          return FakeParentForIOSThumbnail(prov' Id);                  }
Missing Default,Shoko.Server.PlexAndKodi,CommonImplementation,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\PlexAndKodi\CommonImplementation.cs,Search,The following switch statement is missing a default case: switch (ser.Contract.AniDBAnime.AniDBAnime.AnimeType)                      {                          case (int) AnimeType.Movie:                              v.SourceTitle = "Anime Movies";                              break;                          case (int) AnimeType.OVA:                              v.SourceTitle = "Anime Ovas";                              break;                          case (int) AnimeType.Other:                              v.SourceTitle = "Anime Others";                              break;                          case (int) AnimeType.TVSeries:                              v.SourceTitle = "Anime Series";                              break;                          case (int) AnimeType.TVSpecial:                              v.SourceTitle = "Anime Specials";                              break;                          case (int) AnimeType.Web:                              v.SourceTitle = "Anime Web Clips";                              break;                      }
Missing Default,Shoko.Server.PlexAndKodi,CommonImplementation,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\PlexAndKodi\CommonImplementation.cs,TraktScrobble,The following switch statement is missing a default case: switch (status)                  {                      case (int) Providers.TraktTV.ScrobblePlayingStatus.Start:                          statusTraktV2 = Providers.TraktTV.ScrobblePlayingStatus.Start;                          break;                      case (int) Providers.TraktTV.ScrobblePlayingStatus.Pause:                          statusTraktV2 = Providers.TraktTV.ScrobblePlayingStatus.Pause;                          break;                      case (int) Providers.TraktTV.ScrobblePlayingStatus.Stop:                          statusTraktV2 = Providers.TraktTV.ScrobblePlayingStatus.Stop;                          break;                  }
Missing Default,Shoko.Server.PlexAndKodi,CommonImplementation,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\PlexAndKodi\CommonImplementation.cs,TraktScrobble,The following switch statement is missing a default case: switch (typeTrakt)                  {                      // Movie                      case (int) Providers.TraktTV.ScrobblePlayingType.movie:                          rsp.Code = Providers.TraktTV.TraktTVHelper.Scrobble(                                  Providers.TraktTV.ScrobblePlayingType.movie' animeId'                                  statusTraktV2' progressTrakt)                              .ToString();                          rsp.Message = "Movie Scrobbled";                          break;                      // TV episode                      case (int) Providers.TraktTV.ScrobblePlayingType.episode:                          rsp.Code =                              Providers.TraktTV.TraktTVHelper.Scrobble(Providers.TraktTV.ScrobblePlayingType.episode'                                      animeId'                                      statusTraktV2' progressTrakt)                                  .ToString();                          rsp.Message = "Episode Scrobbled";                          break;                      //error                  }
Missing Default,Shoko.Server.PlexAndKodi,PlexEpisodeType,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\PlexAndKodi\EpisodeType.cs,EpisodeTypeTranslated,The following switch statement is missing a default case: switch (an)                      {                          case AnimeType.Movie:                              tp.Name = plural ? "Movies" : "Movie";                              tp.Image = "plex_movies.png";                              return;                          case AnimeType.OVA:                              tp.Name = plural ? "Ovas" : "Ova";                              tp.Image = "plex_ovas.png";                              return;                          case AnimeType.Other:                              tp.Name = plural ? "Others" : "Other";                              tp.Image = "plex_others.png";                              return;                          case AnimeType.TVSeries:                              tp.Name = plural ? "Episodes" : "Episode";                              tp.Image = "plex_episodes.png";                              return;                          case AnimeType.TVSpecial:                              tp.Name = plural ? "TV Episodes" : "TV Episode";                              tp.Image = "plex_tvepisodes.png";                              return;                          case AnimeType.Web:                              tp.Name = plural ? "Web Clips" : "Web Clip";                              tp.Image = "plex_webclips.png";                              return;                      }
Missing Default,Shoko.Server.PlexAndKodi,Extensions,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\PlexAndKodi\Extensions.cs,GenerateKey,The following switch statement is missing a default case: switch ((Shoko.Models.PlexAndKodi.AnimeTypes) Enum.Parse(typeof(Shoko.Models.PlexAndKodi.AnimeTypes)'                  v.AnimeType' true))              {                  case Shoko.Models.PlexAndKodi.AnimeTypes.AnimeGroup:                      v.Key = prov.ConstructGroupIdUrl(userid' v.Id);                      break;                  case Shoko.Models.PlexAndKodi.AnimeTypes.AnimeSerie:                      v.Key = prov.ConstructSerieIdUrl(userid' v.Id.ToString());                      break;                  case Shoko.Models.PlexAndKodi.AnimeTypes.AnimeEpisode:                  case Shoko.Models.PlexAndKodi.AnimeTypes.AnimeFile:                      Helper.AddLinksToAnimeEpisodeVideo(prov' v' userid);                      AddResumePosition(v' prov' userid);                      break;              }
Missing Default,Shoko.Server.PlexAndKodi,Extensions,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\PlexAndKodi\Extensions.cs,AddResumePosition,The following switch statement is missing a default case: switch (                  (Shoko.Models.PlexAndKodi.AnimeTypes)                  Enum.Parse(typeof(Shoko.Models.PlexAndKodi.AnimeTypes)' v.AnimeType' true))              {                  case Shoko.Models.PlexAndKodi.AnimeTypes.AnimeEpisode:                      if (v.Medias != null)                      {                          VideoLocal_User vl = v.Medias.Select(a => RepoFactory.VideoLocal.GetByID(a.Id))                              .Where(a => a != null)                              .Select(a => a.GetUserRecord(userid))                              .Where(a => a != null)                              .OrderByDescending(a => a.ResumePosition)                              .FirstOrDefault();                          if (vl != null && vl.ResumePosition > 0)                          {                              v.ViewOffset = vl.ResumePosition;                              if (vl.WatchedDate.HasValue)                                  v.LastViewedAt = vl.WatchedDate.Value.ToUnixTime();                          }                      }                      break;                  case Shoko.Models.PlexAndKodi.AnimeTypes.AnimeFile:                      VideoLocal_User vl2 = RepoFactory.VideoLocal.GetByID(v.Id)?.GetUserRecord(userid);                      if (vl2 != null && vl2.ResumePosition > 0)                      {                          v.ViewOffset = vl2.ResumePosition;                          if (vl2.WatchedDate.HasValue)                              v.LastViewedAt = vl2.WatchedDate.Value.ToUnixTime();                      }                      break;              }
Missing Default,Shoko.Server.PlexAndKodi,Helper,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\PlexAndKodi\Helper.cs,AddInformationFromMasterSeries,The following switch statement is missing a default case: switch (cserie.AniDBAnime.AniDBAnime.AnimeType)              {                  case (int) AnimeType.Movie:                      v.Type = "movie";                      if (v.Title.StartsWith("Complete Movie"))                      {                          v.Title = nv.Title;                          v.Summary = nv.Summary;                          v.Index = 0;                          ret = true;                      }                      else if (v.Title.StartsWith("Part "))                      {                          v.Title = nv.Title + " - " + v.Title;                          v.Summary = nv.Summary;                      }                      v.Thumb = nv.Thumb;                      break;                  case (int) AnimeType.OVA:                      if (v.Title == "OVA")                      {                          v.Title = nv.Title;                          v.Type = "movie";                          v.Thumb = nv.Thumb;                          v.Summary = nv.Summary;                          v.Index = 0;                          ret = true;                      }                      break;              }
Missing Default,Shoko.Server.PlexAndKodi.Plex,PlexProvider,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\PlexAndKodi\Plex\PlexProvider.cs,NewMediaContainer,The following switch statement is missing a default case: switch (type)              {                  case MediaContainerTypes.Show:                      m.ViewGroup = "show";                      m.ViewMode = "65592";                      break;                  case MediaContainerTypes.Episode:                      m.ViewGroup = "episode";                      m.ViewMode = "65592";                      break;                  case MediaContainerTypes.Video:                      m.ViewMode = "65586";                      m.ViewGroup = "video";                      break;                  case MediaContainerTypes.Season:                      m.ViewMode = "131132";                      m.ViewGroup = "season";                      break;                  case MediaContainerTypes.Movie:                      m.ViewGroup = "movie";                      m.ViewMode = "65592";                      break;                  case MediaContainerTypes.File:                      break;              }
Missing Default,Shoko.Server.Tasks,AutoAnimeGroupCalculator,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Tasks\AutoAnimeGroupCalculator.cs,AutoAnimeGroupCalculator,The following switch statement is missing a default case: switch (mainAnimeSelectionStrategy)              {                  case MainAnimeSelectionStrategy.MinAirDate:                      _mainAnimeSelector = FindSuitableAnimeByMinAirDate;                      break;                  case MainAnimeSelectionStrategy.Weighted:                      _mainAnimeSelector = FindSuitableAnimeByWeighting;                      break;              }
Missing Default,Shoko.Server.Utilities,SeriesSearch,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utilities\SeriesSearch.cs,Search,The following switch statement is missing a default case: switch (flags)              {                  case SearchFlags.Titles:                      return SearchTitlesIndexOf(query' limit' allSeries);                  case SearchFlags.Fuzzy | SearchFlags.Titles:                      return SearchTitlesFuzzy(query' limit' allSeries);                  case SearchFlags.Tags:                      return SearchTagsEquals(query' limit' user' allTags);                  case SearchFlags.Fuzzy | SearchFlags.Tags:                      return SearchTagsFuzzy(query' limit' user' allTags);                  case SearchFlags.Tags | SearchFlags.Titles:                      List<SearchResult> titleResult = SearchTitlesIndexOf(query' limit' allSeries);                        int tagLimit = limit - titleResult.Count;                      if (tagLimit <= 0) return titleResult;                      titleResult.AddRange(SearchTagsEquals(query' tagLimit' user' allTags));                      return titleResult;                  case SearchFlags.Fuzzy | SearchFlags.Tags | SearchFlags.Titles:                      List<SearchResult> titles = SearchTitlesFuzzy(query' limit' allSeries);                        int tagLimit2 = limit - titles.Count;                      if (tagLimit2 <= 0) return titles;                      titles.AddRange(SearchTagsFuzzy(query' tagLimit2' user' allTags));                      return titles;              }
Missing Default,Shoko.Server.Utilities.MediaInfoLib,MediaInfoParserInternal,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utilities\MediaInfoLib\MediaInfoParserInternal.cs,TranslateVideoStream,The following switch statement is missing a default case: switch (rot)                  {                      case 90F:                          s.Orientation = 9;                          break;                      case 180F:                          s.Orientation = 3;                          break;                      case 270F:                          s.Orientation = 6;                          break;                  }
Missing Default,Shoko.Server.Utilities.MediaInfoLib,MediaInfoParserInternal,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utilities\MediaInfoLib\MediaInfoParserInternal.cs,GetMediaInfo,The following switch statement is missing a default case: switch (frs)                                      {                                          case "25p":                                          case "25i":                                              frs = "PAL";                                              break;                                          case "30p":                                          case "30i":                                              frs = "NTSC";                                              break;                                      }
Missing Default,Shoko.Server.Providers.TraktTV,TraktTVHelper,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Providers\TraktTV\TraktTVHelper.cs,SyncEpisodeToTrakt,The following switch statement is missing a default case: switch (syncType)                  {                      case TraktSyncType.CollectionAdd:                          url = TraktURIs.SyncCollectionAdd;                          break;                      case TraktSyncType.CollectionRemove:                          url = TraktURIs.SyncCollectionRemove;                          break;                      case TraktSyncType.HistoryAdd:                          url = TraktURIs.SyncHistoryAdd;                          break;                      case TraktSyncType.HistoryRemove:                          url = TraktURIs.SyncHistoryRemove;                          break;                  }
Missing Default,Shoko.Server.Providers.TraktTV,TraktTVHelper,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Providers\TraktTV\TraktTVHelper.cs,Scrobble,The following switch statement is missing a default case: switch (scrobbleType)                      {                          case ScrobblePlayingType.episode:                              TraktV2ScrobbleEpisode showE = new TraktV2ScrobbleEpisode();                              showE.Init(progress' traktID' slugID' season' epNumber);                              json = JSONHelper.Serialize(showE);                              break;                            //do we have any movies that work?                          case ScrobblePlayingType.movie:                              TraktV2ScrobbleMovie showM = new TraktV2ScrobbleMovie();                              json = JSONHelper.Serialize(showM);                              showM.Init(progress' slugID' traktID.ToString());                              break;                      }
Missing Default,Shoko.Server.Providers.TraktTV,TraktTVHelper,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Providers\TraktTV\TraktTVHelper.cs,SyncCollectionToTrakt,The following switch statement is missing a default case: switch (epsync.SyncType)                                  {                                      case TraktSyncType.CollectionAdd:                                          syncCollectionAdd.AddEpisode(epsync.Slug' epsync.Season' epsync.EpNumber'                                              epsync.EpDate);                                          break;                                      case TraktSyncType.CollectionRemove:                                          syncCollectionRemove.AddEpisode(epsync.Slug' epsync.Season' epsync.EpNumber'                                              epsync.EpDate);                                          break;                                      case TraktSyncType.HistoryAdd:                                          syncHistoryAdd.AddEpisode(epsync.Slug' epsync.Season' epsync.EpNumber'                                              epsync.EpDate);                                          break;                                      case TraktSyncType.HistoryRemove:                                          syncHistoryRemove.AddEpisode(epsync.Slug' epsync.Season' epsync.EpNumber'                                              epsync.EpDate);                                          break;                                  }
Missing Default,Shoko.Server.Providers.TraktTV,TraktTVHelper,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Providers\TraktTV\TraktTVHelper.cs,SyncCollectionToTrakt,The following switch statement is missing a default case: switch (epsync.SyncType)                                          {                                              case TraktSyncType.CollectionAdd:                                                  syncCollectionAdd.AddEpisode(epsync.Slug' epsync.Season'                                                      epsync.EpNumber'                                                      epsync.EpDate);                                                  break;                                              case TraktSyncType.CollectionRemove:                                                  syncCollectionRemove.AddEpisode(epsync.Slug' epsync.Season'                                                      epsync.EpNumber' epsync.EpDate);                                                  break;                                              case TraktSyncType.HistoryAdd:                                                  syncHistoryAdd.AddEpisode(epsync.Slug' epsync.Season' epsync.EpNumber'                                                      epsync.EpDate);                                                  break;                                              case TraktSyncType.HistoryRemove:                                                  syncHistoryRemove.AddEpisode(epsync.Slug' epsync.Season'                                                      epsync.EpNumber'                                                      epsync.EpDate);                                                  break;                                          }
Missing Default,Shoko.Server.Providers.TraktTV,TraktTVHelper,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Providers\TraktTV\TraktTVHelper.cs,SyncCollectionToTrakt,The following switch statement is missing a default case: switch (epsync.SyncType)                                          {                                              case TraktSyncType.CollectionAdd:                                                  syncCollectionAdd.AddEpisode(epsync.Slug' epsync.Season'                                                      epsync.EpNumber'                                                      epsync.EpDate);                                                  break;                                              case TraktSyncType.CollectionRemove:                                                  syncCollectionRemove.AddEpisode(epsync.Slug' epsync.Season'                                                      epsync.EpNumber' epsync.EpDate);                                                  break;                                              case TraktSyncType.HistoryAdd:                                                  syncHistoryAdd.AddEpisode(epsync.Slug' epsync.Season' epsync.EpNumber'                                                      epsync.EpDate);                                                  break;                                              case TraktSyncType.HistoryRemove:                                                  syncHistoryRemove.AddEpisode(epsync.Slug' epsync.Season'                                                      epsync.EpNumber'                                                      epsync.EpDate);                                                  break;                                          }
Missing Default,LeanWork.IO.FileSystem,BufferingFileSystemWatcher,D:\research\architectureSmells\repos\japanesemediamanager_jmmserver\Shoko.Server\Utilities\LeanWork\IO\FileSystem\BufferingFileSystemWatcher.cs,RaiseBufferedEventsUntilCancelled,The following switch statement is missing a default case: switch (e.ChangeType)                              {                                  case WatcherChangeTypes.Created:                                      InvokeHandler(_onCreatedHandler' e);                                      break;                                  case WatcherChangeTypes.Changed:                                      InvokeHandler(_onChangedHandler' e);                                      break;                                  case WatcherChangeTypes.Deleted:                                      InvokeHandler(_onDeletedHandler' e);                                      break;                                  case WatcherChangeTypes.Renamed:                                      InvokeHandler(_onRenamedHandler' e as RenamedEventArgs);                                      break;                              }
