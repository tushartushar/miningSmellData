Implementation smell,Namespace,Class,File,Method,Description
Long Method,NuGet.CommandLine.Test,NetworkCallCountTest,C:\research\architectureSmells\repos\NuGet_NuGet.PackageManagement\test\NuGet.CommandLine.Test\NetworkCallCountTest.cs,NetworkCallCount_RestoreLargePackagesConfigWithMultipleSourcesWithPartialMissingPackages,The method has 113 lines of code.
Long Method,NuGet.CommandLine.Test,NetworkCallCountTest,C:\research\architectureSmells\repos\NuGet_NuGet.PackageManagement\test\NuGet.CommandLine.Test\NetworkCallCountTest.cs,NetworkCallCount_RestoreLargePackagesConfigWithMultipleSourcesMainlyV3,The method has 103 lines of code.
Long Method,NuGet.CommandLine.Test,NetworkCallCountTest,C:\research\architectureSmells\repos\NuGet_NuGet.PackageManagement\test\NuGet.CommandLine.Test\NetworkCallCountTest.cs,NetworkCallCount_RestoreLargePackagesConfigWithMultipleSourcesMainlyV2,The method has 103 lines of code.
Long Method,NuGet.CommandLine.Test,NetworkCallCountTest,C:\research\architectureSmells\repos\NuGet_NuGet.PackageManagement\test\NuGet.CommandLine.Test\NetworkCallCountTest.cs,CreateMixedConfigAndJson,The method has 104 lines of code.
Long Method,NuGet.CommandLine.Test,NetworkCallCountTest,C:\research\architectureSmells\repos\NuGet_NuGet.PackageManagement\test\NuGet.CommandLine.Test\NetworkCallCountTest.cs,ServerHandler,The method has 171 lines of code.
Long Method,NuGet.CommandLine.Test,NuGetInstallCommandTest,C:\research\architectureSmells\repos\NuGet_NuGet.PackageManagement\test\NuGet.CommandLine.Test\NuGetInstallCommandTest.cs,InstallCommand_AuthenticatedV3WithCredentialSavedInConfig,The method has 103 lines of code.
Long Method,NuGet.CommandLine.Test,NuGetPackCommandTest,C:\research\architectureSmells\repos\NuGet_NuGet.PackageManagement\test\NuGet.CommandLine.Test\NuGetPackCommandTest.cs,PackCommand_WithProjectReferencesSymbols,The method has 103 lines of code.
Long Method,NuGet.CommandLine.Test,NuGetPackCommandTest,C:\research\architectureSmells\repos\NuGet_NuGet.PackageManagement\test\NuGet.CommandLine.Test\NuGetPackCommandTest.cs,PackCommand_ReferencedProjectWithNuspecFile,The method has 106 lines of code.
Long Method,NuGet.CommandLine.Test,NuGetPackCommandTest,C:\research\architectureSmells\repos\NuGet_NuGet.PackageManagement\test\NuGet.CommandLine.Test\NuGetPackCommandTest.cs,PackCommand_ReferencedProjectWithNuspecFileWithMsbuild14,The method has 106 lines of code.
Long Method,NuGet.CommandLine.Test,NuGetPackCommandTest,C:\research\architectureSmells\repos\NuGet_NuGet.PackageManagement\test\NuGet.CommandLine.Test\NuGetPackCommandTest.cs,PackCommand_IncludeReferencedProjectsOff,The method has 120 lines of code.
Long Method,NuGet.CommandLine.Test,NuGetPackCommandTest,C:\research\architectureSmells\repos\NuGet_NuGet.PackageManagement\test\NuGet.CommandLine.Test\NuGetPackCommandTest.cs,PackCommand_PropertiesAppliedToReferencedProjects,The method has 113 lines of code.
Long Method,NuGet.CommandLine.Test,NuGetPackCommandTest,C:\research\architectureSmells\repos\NuGet_NuGet.PackageManagement\test\NuGet.CommandLine.Test\NuGetPackCommandTest.cs,PackCommand_WithMsBuild14,The method has 119 lines of code.
Long Method,NuGet.CommandLine.Test,NuGetPackCommandTest,C:\research\architectureSmells\repos\NuGet_NuGet.PackageManagement\test\NuGet.CommandLine.Test\NuGetPackCommandTest.cs,PackCommand_WithMsBuild12,The method has 119 lines of code.
Long Method,NuGet.CommandLine.Test,NuGetPushCommandTest,C:\research\architectureSmells\repos\NuGet_NuGet.PackageManagement\test\NuGet.CommandLine.Test\NuGetPushCommandTest.cs,PushCommand_PushToServerV3_ApiKeyFromConfig,The method has 100 lines of code.
Long Method,NuGet.CommandLine.Test,NuGetUpdateCommandTests,C:\research\architectureSmells\repos\NuGet_NuGet.PackageManagement\test\NuGet.CommandLine.Test\NuGetUpdateCommandTests.cs,UpdateCommand_Success_ContentFiles,The method has 100 lines of code.
Long Method,NuGet.CommandLine.Test,RestoreProjectJsonTest,C:\research\architectureSmells\repos\NuGet_NuGet.PackageManagement\test\NuGet.CommandLine.Test\RestoreProjectJsonTest.cs,RestoreProjectJson_RestoreFromSlnWithUnknownProjAndCsproj,The method has 100 lines of code.
Long Method,NuGet.CommandLine.Test,RestoreProjectJsonTest,C:\research\architectureSmells\repos\NuGet_NuGet.PackageManagement\test\NuGet.CommandLine.Test\RestoreProjectJsonTest.cs,RestoreProjectJson_SolutionFileWithAllProjectsInOneFolder,The method has 105 lines of code.
Long Method,NuGet.CommandLine.Test,RestoreRetryTests,C:\research\architectureSmells\repos\NuGet_NuGet.PackageManagement\test\NuGet.CommandLine.Test\RestoreRetryTests.cs,RestoreRetry_ProjectJsonRetryOnFailingV2Source,The method has 118 lines of code.
Long Method,NuGet.CommandLine.Test,RestoreRetryTests,C:\research\architectureSmells\repos\NuGet_NuGet.PackageManagement\test\NuGet.CommandLine.Test\RestoreRetryTests.cs,RestoreRetry_ProjectJsonRetryOnFailingV3Source,The method has 129 lines of code.
Long Method,NuGet.CommandLine.Test,RestoreRetryTests,C:\research\architectureSmells\repos\NuGet_NuGet.PackageManagement\test\NuGet.CommandLine.Test\RestoreRetryTests.cs,RestoreRetry_PackagesConfigRetryOnFailingV3Source,The method has 163 lines of code.
Complex Method,NuGet.CommandLine.Test,MockServer,C:\research\architectureSmells\repos\NuGet_NuGet.PackageManagement\test\NuGet.CommandLine.Test\MockServer.cs,GenerateResponse,Cyclomatic complexity of the method is 10
Complex Method,NuGet.CommandLine.Test,NetworkCallCountTest,C:\research\architectureSmells\repos\NuGet_NuGet.PackageManagement\test\NuGet.CommandLine.Test\NetworkCallCountTest.cs,ServerHandler,Cyclomatic complexity of the method is 15
Long Parameter List,NuGet.CommandLine.Test,CommandRunner,C:\research\architectureSmells\repos\NuGet_NuGet.PackageManagement\test\NuGet.CommandLine.Test\CommandRunner.cs,Run,The method has 6 parameters. Parameters: process' workingDirectory' arguments' waitForExit' timeOutInMilliseconds' inputAction
Long Parameter List,NuGet.CommandLine.Test,NetworkCallCountTest,C:\research\architectureSmells\repos\NuGet_NuGet.PackageManagement\test\NuGet.CommandLine.Test\NetworkCallCountTest.cs,ServerHandler,The method has 5 parameters. Parameters: request' hitsByUrl' server' indexJson' localRepo
Long Parameter List,NuGet.CommandLine.Test,NetworkCallCountTest,C:\research\architectureSmells\repos\NuGet_NuGet.PackageManagement\test\NuGet.CommandLine.Test\NetworkCallCountTest.cs,ServerHandler,The method has 7 parameters. Parameters: request' hitsByUrl' server' indexJson' localRepo' v2DownloadWait' v3DownloadWait
Long Parameter List,NuGet.CommandLine.Test,NuGetPackCommandTest,C:\research\architectureSmells\repos\NuGet_NuGet.PackageManagement\test\NuGet.CommandLine.Test\NuGetPackCommandTest.cs,CreateTestProject,The method has 5 parameters. Parameters: baseDirectory' projectName' referencedProject' targetFrameworkVersion' version
Long Parameter List,NuGet.CommandLine.Test,Util,C:\research\architectureSmells\repos\NuGet_NuGet.PackageManagement\test\NuGet.CommandLine.Test\Util.cs,CreateTestPackage,The method has 6 parameters. Parameters: packageId' version' path' framework' dependencyPackageId' dependencyPackageVersion
Long Parameter List,NuGet.CommandLine.Test,Util,C:\research\architectureSmells\repos\NuGet_NuGet.PackageManagement\test\NuGet.CommandLine.Test\Util.cs,CreateTestPackage,The method has 5 parameters. Parameters: packageId' version' path' frameworks' dependencies
Long Parameter List,NuGet.CommandLine.Test,Util,C:\research\architectureSmells\repos\NuGet_NuGet.PackageManagement\test\NuGet.CommandLine.Test\Util.cs,CreateTestPackage,The method has 5 parameters. Parameters: packageId' version' path' licenseUrl' contentFiles
Long Identifier,NuGet.CommandLine.Test,NuGetInstallCommandTest,C:\research\architectureSmells\repos\NuGet_NuGet.PackageManagement\test\NuGet.CommandLine.Test\NuGetInstallCommandTest.cs,InstallCommand_AuthenticatedV3WithCredentialSavedInConfig,The length of the parameter credentialsPassedToRegistrationEndPoint is 39.
Long Identifier,NuGet.CommandLine.Test,NuGetRestoreCommandTest,C:\research\architectureSmells\repos\NuGet_NuGet.PackageManagement\test\NuGet.CommandLine.Test\NuGetRestoreCommandTest.cs,RestoreCommand_LegacySolutionLevelPackages_SolutionDirectory,The length of the parameter nugetFolderAtSolutionDirectory is 30.
Long Identifier,NuGet.CommandLine.Test,NuGetRestoreCommandTest,C:\research\architectureSmells\repos\NuGet_NuGet.PackageManagement\test\NuGet.CommandLine.Test\NuGetRestoreCommandTest.cs,RestoreCommand_LegacySolutionLevelPackages_SolutionFile,The length of the parameter nugetFolderAtSolutionDirectory is 30.
Long Identifier,NuGet.CommandLine.Test,NuGetRestoreCommandTest,C:\research\architectureSmells\repos\NuGet_NuGet.PackageManagement\test\NuGet.CommandLine.Test\NuGetRestoreCommandTest.cs,RestoreCommand_LegacySolutionLevelPackages_NoArgument,The length of the parameter nugetFolderAtSolutionDirectory is 30.
Long Identifier,NuGet.CommandLine.Test,NuGetRestoreCommandTest,C:\research\architectureSmells\repos\NuGet_NuGet.PackageManagement\test\NuGet.CommandLine.Test\NuGetRestoreCommandTest.cs,RestoreCommand_LegacySolutionLevelPackages_DuplicatePackageIds,The length of the parameter nugetFolderAtSolutionDirectory is 30.
Long Identifier,NuGet.CommandLine.Test,NuGetRestoreCommandTest,C:\research\architectureSmells\repos\NuGet_NuGet.PackageManagement\test\NuGet.CommandLine.Test\NuGetRestoreCommandTest.cs,RestoreCommand_LegacySolutionLevelPackages_DuplicatePackageIdentities,The length of the parameter nugetFolderAtSolutionDirectory is 30.
Long Statement,NuGet.CommandLine.Test,NetworkCallCountTest,C:\research\architectureSmells\repos\NuGet_NuGet.PackageManagement\test\NuGet.CommandLine.Test\NetworkCallCountTest.cs,CreateMixedConfigAndJson,The length of the statement  "                        Project(""{AAE04EC0-301F-11D3-BF4B-00C04F79EFBC}"") = ""proj1""' ""proj1\proj1.csproj""' ""{AA6279C1-B5EE-4C6B-9FA3-A794CE195136}"" " is 131.
Long Statement,NuGet.CommandLine.Test,NetworkCallCountTest,C:\research\architectureSmells\repos\NuGet_NuGet.PackageManagement\test\NuGet.CommandLine.Test\NetworkCallCountTest.cs,CreateMixedConfigAndJson,The length of the statement  "                        Project(""{BBE04EC0-301F-11D3-BF4B-00C04F79EFBC}"") = ""proj2""' ""proj2\proj2.csproj""' ""{BB6279C1-B5EE-4C6B-9FA3-A794CE195136}"" " is 131.
Long Statement,NuGet.CommandLine.Test,NetworkCallCountTest,C:\research\architectureSmells\repos\NuGet_NuGet.PackageManagement\test\NuGet.CommandLine.Test\NetworkCallCountTest.cs,CreateMixedConfigAndJson,The length of the statement  "                        Project(""{CCE04EC0-301F-11D3-BF4B-00C04F79EFBC}"") = ""proj3""' ""proj3\proj3.csproj""' ""{CC6279C1-B5EE-4C6B-9FA3-A794CE195136}"" " is 131.
Long Statement,NuGet.CommandLine.Test,NetworkCallCountTest,C:\research\architectureSmells\repos\NuGet_NuGet.PackageManagement\test\NuGet.CommandLine.Test\NetworkCallCountTest.cs,CreateMixedConfigAndJson,The length of the statement  "                        Project(""{DDE04EC0-301F-11D3-BF4B-00C04F79EFBC}"") = ""proj4""' ""proj4\proj4.csproj""' ""{DD6279C1-B5EE-4C6B-9FA3-A794CE195136}"" " is 131.
Long Statement,NuGet.CommandLine.Test,NuGetInstallCommandTest,C:\research\architectureSmells\repos\NuGet_NuGet.PackageManagement\test\NuGet.CommandLine.Test\NuGetInstallCommandTest.cs,InstallCommand_OptOutMessage,The length of the statement  "                    "install " + configFileName + " -Source " + repositoryPath + @" -ConfigFile ..\my.config -RequireConsent -Verbosity detailed"' " is 126.
Long Statement,NuGet.CommandLine.Test,NuGetRestoreCommandTest,C:\research\architectureSmells\repos\NuGet_NuGet.PackageManagement\test\NuGet.CommandLine.Test\NuGetRestoreCommandTest.cs,RestoreCommand_FromSolutionFile,The length of the statement  "Project(""{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}"") = ""proj1""' ""proj1\proj1.csproj""' ""{A04C59CC-7622-4223-B16B-CDF2ECAD438D}"" " is 131.
Long Statement,NuGet.CommandLine.Test,NuGetRestoreCommandTest,C:\research\architectureSmells\repos\NuGet_NuGet.PackageManagement\test\NuGet.CommandLine.Test\NuGetRestoreCommandTest.cs,RestoreCommand_FromSolutionFile,The length of the statement  "Project(""{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}"") = ""proj2""' ""proj2\proj2.csproj""' ""{42641DAE-D6C4-49D4-92EA-749D2573554A}"" " is 131.
Long Statement,NuGet.CommandLine.Test,NuGetRestoreCommandTest,C:\research\architectureSmells\repos\NuGet_NuGet.PackageManagement\test\NuGet.CommandLine.Test\NuGetRestoreCommandTest.cs,RestoreCommand_FromSolutionFileWithMsbuild12,The length of the statement  "Project(""{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}"") = ""proj1""' ""proj1\proj1.csproj""' ""{A04C59CC-7622-4223-B16B-CDF2ECAD438D}"" " is 131.
Long Statement,NuGet.CommandLine.Test,NuGetRestoreCommandTest,C:\research\architectureSmells\repos\NuGet_NuGet.PackageManagement\test\NuGet.CommandLine.Test\NuGetRestoreCommandTest.cs,RestoreCommand_FromSolutionFileWithMsbuild12,The length of the statement  "Project(""{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}"") = ""proj2""' ""proj2\proj2.csproj""' ""{42641DAE-D6C4-49D4-92EA-749D2573554A}"" " is 131.
Long Statement,NuGet.CommandLine.Test,NuGetRestoreCommandTest,C:\research\architectureSmells\repos\NuGet_NuGet.PackageManagement\test\NuGet.CommandLine.Test\NuGetRestoreCommandTest.cs,RestoreCommand_FromSolutionFileWithMsbuild14,The length of the statement  "Project(""{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}"") = ""proj1""' ""proj1\proj1.csproj""' ""{A04C59CC-7622-4223-B16B-CDF2ECAD438D}"" " is 131.
Long Statement,NuGet.CommandLine.Test,NuGetRestoreCommandTest,C:\research\architectureSmells\repos\NuGet_NuGet.PackageManagement\test\NuGet.CommandLine.Test\NuGetRestoreCommandTest.cs,RestoreCommand_FromSolutionFileWithMsbuild14,The length of the statement  "Project(""{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}"") = ""proj2""' ""proj2\proj2.csproj""' ""{42641DAE-D6C4-49D4-92EA-749D2573554A}"" " is 131.
Long Statement,NuGet.CommandLine.Test,NuGetRestoreCommandTest,C:\research\architectureSmells\repos\NuGet_NuGet.PackageManagement\test\NuGet.CommandLine.Test\NuGetRestoreCommandTest.cs,RestoreCommand_ProjectCannotBeLoaded,The length of the statement  "Project(""{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}"") = ""proj1""' ""proj1\proj1.csproj""' ""{A04C59CC-7622-4223-B16B-CDF2ECAD438D}"" " is 131.
Long Statement,NuGet.CommandLine.Test,NuGetRestoreCommandTest,C:\research\architectureSmells\repos\NuGet_NuGet.PackageManagement\test\NuGet.CommandLine.Test\NuGetRestoreCommandTest.cs,RestoreCommand_OptOutMessage,The length of the statement  "Project(""{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}"") = ""proj1""' ""proj1\proj1.csproj""' ""{A04C59CC-7622-4223-B16B-CDF2ECAD438D}"" " is 131.
Long Statement,NuGet.CommandLine.Test,NuGetRestoreCommandTest,C:\research\architectureSmells\repos\NuGet_NuGet.PackageManagement\test\NuGet.CommandLine.Test\NuGetRestoreCommandTest.cs,RestoreCommand_OptOutMessage,The length of the statement  "Project(""{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}"") = ""proj2""' ""proj2\proj2.csproj""' ""{42641DAE-D6C4-49D4-92EA-749D2573554A}"" " is 131.
Long Statement,NuGet.CommandLine.Test,NuGetRestoreCommandTest,C:\research\architectureSmells\repos\NuGet_NuGet.PackageManagement\test\NuGet.CommandLine.Test\NuGetRestoreCommandTest.cs,RestoreCommand_NoOptOutMessage,The length of the statement  "Project(""{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}"") = ""proj1""' ""proj1\proj1.csproj""' ""{A04C59CC-7622-4223-B16B-CDF2ECAD438D}"" " is 131.
Long Statement,NuGet.CommandLine.Test,NuGetRestoreCommandTest,C:\research\architectureSmells\repos\NuGet_NuGet.PackageManagement\test\NuGet.CommandLine.Test\NuGetRestoreCommandTest.cs,RestoreCommand_NoOptOutMessage,The length of the statement  "Project(""{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}"") = ""proj2""' ""proj2\proj2.csproj""' ""{42641DAE-D6C4-49D4-92EA-749D2573554A}"" " is 131.
Long Statement,NuGet.CommandLine.Test,NuGetRestoreCommandTest,C:\research\architectureSmells\repos\NuGet_NuGet.PackageManagement\test\NuGet.CommandLine.Test\NuGetRestoreCommandTest.cs,RestoreCommand_OneSolutionFileInDirectory,The length of the statement  "Project(""{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}"") = ""proj1""' ""proj1\proj1.csproj""' ""{A04C59CC-7622-4223-B16B-CDF2ECAD438D}"" " is 131.
Long Statement,NuGet.CommandLine.Test,NuGetRestoreCommandTest,C:\research\architectureSmells\repos\NuGet_NuGet.PackageManagement\test\NuGet.CommandLine.Test\NuGetRestoreCommandTest.cs,RestoreCommand_OneSolutionFileInDirectory,The length of the statement  "Project(""{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}"") = ""proj2""' ""proj2\proj2.csproj""' ""{42641DAE-D6C4-49D4-92EA-749D2573554A}"" " is 131.
Long Statement,NuGet.CommandLine.Test,NuGetRestoreCommandTest,C:\research\architectureSmells\repos\NuGet_NuGet.PackageManagement\test\NuGet.CommandLine.Test\NuGetRestoreCommandTest.cs,RestoreCommand_MutipleSolutionFilesInDirectory,The length of the statement  "Project(""{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}"") = ""proj1""' ""proj1\proj1.csproj""' ""{A04C59CC-7622-4223-B16B-CDF2ECAD438D}"" " is 131.
Long Statement,NuGet.CommandLine.Test,NuGetRestoreCommandTest,C:\research\architectureSmells\repos\NuGet_NuGet.PackageManagement\test\NuGet.CommandLine.Test\NuGetRestoreCommandTest.cs,RestoreCommand_MutipleSolutionFilesInDirectory,The length of the statement  "Project(""{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}"") = ""proj2""' ""proj2\proj2.csproj""' ""{42641DAE-D6C4-49D4-92EA-749D2573554A}"" " is 131.
Long Statement,NuGet.CommandLine.Test,NuGetRestoreCommandTest,C:\research\architectureSmells\repos\NuGet_NuGet.PackageManagement\test\NuGet.CommandLine.Test\NuGetRestoreCommandTest.cs,RestoreCommand_MutipleSolutionFilesInDirectory,The length of the statement  "Project(""{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}"") = ""proj1""' ""proj1\proj1.csproj""' ""{A04C59CC-7622-4223-B16B-CDF2ECAD438D}"" " is 131.
Long Statement,NuGet.CommandLine.Test,NuGetRestoreCommandTest,C:\research\architectureSmells\repos\NuGet_NuGet.PackageManagement\test\NuGet.CommandLine.Test\NuGetRestoreCommandTest.cs,RestoreCommand_MutipleSolutionFilesInDirectory,The length of the statement  "Project(""{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}"") = ""proj2""' ""proj2\proj2.csproj""' ""{42641DAE-D6C4-49D4-92EA-749D2573554A}"" " is 131.
Long Statement,NuGet.CommandLine.Test,NuGetRestoreCommandTest,C:\research\architectureSmells\repos\NuGet_NuGet.PackageManagement\test\NuGet.CommandLine.Test\NuGetRestoreCommandTest.cs,RestoreCommand_ConfigFile,The length of the statement  "Project(""{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}"") = ""proj1""' ""proj1\proj1.csproj""' ""{A04C59CC-7622-4223-B16B-CDF2ECAD438D}"" " is 131.
Long Statement,NuGet.CommandLine.Test,NuGetRestoreCommandTest,C:\research\architectureSmells\repos\NuGet_NuGet.PackageManagement\test\NuGet.CommandLine.Test\NuGetRestoreCommandTest.cs,RestoreCommand_PackageSaveModeNuspec,The length of the statement  "Project(""{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}"") = ""proj1""' ""proj1\proj1.csproj""' ""{A04C59CC-7622-4223-B16B-CDF2ECAD438D}"" " is 131.
Long Statement,NuGet.CommandLine.Test,NuGetRestoreCommandTest,C:\research\architectureSmells\repos\NuGet_NuGet.PackageManagement\test\NuGet.CommandLine.Test\NuGetRestoreCommandTest.cs,RestoreCommand_PackageSaveModeNuspec,The length of the statement  "Project(""{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}"") = ""proj2""' ""proj2\proj2.csproj""' ""{42641DAE-D6C4-49D4-92EA-749D2573554A}"" " is 131.
Long Statement,NuGet.CommandLine.Test,RestoreProjectJsonTest,C:\research\architectureSmells\repos\NuGet_NuGet.PackageManagement\test\NuGet.CommandLine.Test\RestoreProjectJsonTest.cs,RestoreProjectJson_RestoreFromSlnWithUnknownProjAndCsproj,The length of the statement  "                        Project(""{AAE04EC0-301F-11D3-BF4B-00C04F79EFBC}"") = ""test1""' ""test1\test1.csproj""' ""{AA6279C1-B5EE-4C6B-9FA3-A794CE195136}"" " is 131.
Long Statement,NuGet.CommandLine.Test,RestoreProjectJsonTest,C:\research\architectureSmells\repos\NuGet_NuGet.PackageManagement\test\NuGet.CommandLine.Test\RestoreProjectJsonTest.cs,RestoreProjectJson_RestoreFromSlnWithUnknownProjAndCsproj,The length of the statement  "                        Project(""{BBE04EC0-301F-11D3-BF4B-00C04F79EFBC}"") = ""test2""' ""test2\test2.abcproj""' ""{BB6279C1-B5EE-4C6B-9FA3-A794CE195136}"" " is 132.
Long Statement,NuGet.CommandLine.Test,RestoreProjectJsonTest,C:\research\architectureSmells\repos\NuGet_NuGet.PackageManagement\test\NuGet.CommandLine.Test\RestoreProjectJsonTest.cs,RestoreProjectJson_RestoreFromSlnWithXprojAndCsproj,The length of the statement  "                        Project(""{AAE04EC0-301F-11D3-BF4B-00C04F79EFBC}"") = ""test1""' ""test1\test1.csproj""' ""{AA6279C1-B5EE-4C6B-9FA3-A794CE195136}"" " is 131.
Long Statement,NuGet.CommandLine.Test,RestoreProjectJsonTest,C:\research\architectureSmells\repos\NuGet_NuGet.PackageManagement\test\NuGet.CommandLine.Test\RestoreProjectJsonTest.cs,RestoreProjectJson_RestoreFromSlnWithXprojAndCsproj,The length of the statement  "                        Project(""{BBE04EC0-301F-11D3-BF4B-00C04F79EFBC}"") = ""test2""' ""test2\test2.xproj""' ""{BB6279C1-B5EE-4C6B-9FA3-A794CE195136}"" " is 130.
Long Statement,NuGet.CommandLine.Test,RestoreProjectJsonTest,C:\research\architectureSmells\repos\NuGet_NuGet.PackageManagement\test\NuGet.CommandLine.Test\RestoreProjectJsonTest.cs,RestoreProjectJson_SolutionFileWithAllProjectsInOneFolder,The length of the statement  "            var targetContent = "<?xml version=\"1.0\" encoding=\"utf-8\"?><Project ToolsVersion=\"12.0\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\"></Project>"; " is 168.
Long Statement,NuGet.CommandLine.Test,RestoreProjectJsonTest,C:\research\architectureSmells\repos\NuGet_NuGet.PackageManagement\test\NuGet.CommandLine.Test\RestoreProjectJsonTest.cs,RestoreProjectJson_SolutionFileWithAllProjectsInOneFolder,The length of the statement  "                        Project(""{AAE04EC0-301F-11D3-BF4B-00C04F79EFBC}"") = ""testA""' ""abc\testA.csproj""' ""{6A6279C1-B5EE-4C6B-9FA3-A794CE195136}"" " is 129.
Long Statement,NuGet.CommandLine.Test,RestoreProjectJsonTest,C:\research\architectureSmells\repos\NuGet_NuGet.PackageManagement\test\NuGet.CommandLine.Test\RestoreProjectJsonTest.cs,RestoreProjectJson_SolutionFileWithAllProjectsInOneFolder,The length of the statement  "                        Project(""{ABE04EC0-301F-11D3-BF4B-00C04F79EFBC}"") = ""testB""' ""abc\testB.csproj""' ""{6A6279C1-B5EE-4C6B-9FA3-A794CE195136}"" " is 129.
Long Statement,NuGet.CommandLine.Test,RestoreProjectJsonTest,C:\research\architectureSmells\repos\NuGet_NuGet.PackageManagement\test\NuGet.CommandLine.Test\RestoreProjectJsonTest.cs,RestoreProjectJson_SolutionFileWithAllProjectsInOneFolder,The length of the statement  "                        Project(""{ACE04EC0-301F-11D3-BF4B-00C04F79EFBC}"") = ""testC""' ""abc\testC.csproj""' ""{6A6279C1-B5EE-4C6B-9FA3-A794CE195136}"" " is 129.
Long Statement,NuGet.CommandLine.Test,RestoreProjectJsonTest,C:\research\architectureSmells\repos\NuGet_NuGet.PackageManagement\test\NuGet.CommandLine.Test\RestoreProjectJsonTest.cs,RestoreProjectJson_SolutionFileWithAllProjectsInOneFolder,The length of the statement  "                        Project(""{ADE04EC0-301F-11D3-BF4B-00C04F79EFBC}"") = ""testD""' ""abc\testD.csproj""' ""{6A6279C1-B5EE-4C6B-9FA3-A794CE195136}"" " is 129.
Long Statement,NuGet.CommandLine.Test,RestoreProjectJsonTest,C:\research\architectureSmells\repos\NuGet_NuGet.PackageManagement\test\NuGet.CommandLine.Test\RestoreProjectJsonTest.cs,RestoreProjectJson_GenerateFilesWithProjectNameFromCSProj,The length of the statement  "            var targetContent = "<?xml version=\"1.0\" encoding=\"utf-8\"?><Project ToolsVersion=\"12.0\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\"></Project>"; " is 168.
Long Statement,NuGet.CommandLine.Test,RestoreProjectJsonTest,C:\research\architectureSmells\repos\NuGet_NuGet.PackageManagement\test\NuGet.CommandLine.Test\RestoreProjectJsonTest.cs,RestoreProjectJson_GenerateTargetsFileFromSln,The length of the statement  "            var targetContent = "<?xml version=\"1.0\" encoding=\"utf-8\"?><Project ToolsVersion=\"12.0\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\"></Project>"; " is 168.
Long Statement,NuGet.CommandLine.Test,RestoreProjectJsonTest,C:\research\architectureSmells\repos\NuGet_NuGet.PackageManagement\test\NuGet.CommandLine.Test\RestoreProjectJsonTest.cs,RestoreProjectJson_GenerateTargetsFileFromSln,The length of the statement  "                        Project(""{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}"") = ""test""' ""abc\test.csproj""' ""{6A6279C1-B5EE-4C6B-9FA3-A794CE195136}"" " is 127.
Long Statement,NuGet.CommandLine.Test,RestoreProjectJsonTest,C:\research\architectureSmells\repos\NuGet_NuGet.PackageManagement\test\NuGet.CommandLine.Test\RestoreProjectJsonTest.cs,RestoreProjectJson_GenerateTargetsFileFromCSProj,The length of the statement  "            var targetContent = "<?xml version=\"1.0\" encoding=\"utf-8\"?><Project ToolsVersion=\"12.0\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\"></Project>"; " is 168.
Long Statement,NuGet.CommandLine.Test,RestoreProjectJsonTest,C:\research\architectureSmells\repos\NuGet_NuGet.PackageManagement\test\NuGet.CommandLine.Test\RestoreProjectJsonTest.cs,RestoreProjectJson_GenerateTargetsFileWithFolder,The length of the statement  "            var targetContent = "<?xml version=\"1.0\" encoding=\"utf-8\"?><Project ToolsVersion=\"12.0\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\"></Project>"; " is 168.
Long Statement,NuGet.CommandLine.Test,RestoreProjectJsonTest,C:\research\architectureSmells\repos\NuGet_NuGet.PackageManagement\test\NuGet.CommandLine.Test\RestoreProjectJsonTest.cs,RestoreProjectJson_GenerateTargetsPersistsWithMultipleRestores,The length of the statement  "            var targetContent = "<?xml version=\"1.0\" encoding=\"utf-8\"?><Project ToolsVersion=\"12.0\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\"></Project>"; " is 168.
Long Statement,NuGet.CommandLine,ProjectFactoryTest,C:\research\architectureSmells\repos\NuGet_NuGet.PackageManagement\test\NuGet.CommandLine.Test\ProjectFactoryTest.cs,GetProjectContent,The length of the statement  "  <Import Project=""$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props"" Condition=""Exists('$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props')"" /> " is 188.
Empty Catch Block,NuGet.CommandLine.Test,RestoreProjectJsonTest,C:\research\architectureSmells\repos\NuGet_NuGet.PackageManagement\test\NuGet.CommandLine.Test\RestoreProjectJsonTest.cs,Dispose,The method has an empty catch block.
Empty Catch Block,NuGet.CommandLine.Test,RestoreRetryTests,C:\research\architectureSmells\repos\NuGet_NuGet.PackageManagement\test\NuGet.CommandLine.Test\RestoreRetryTests.cs,Dispose,The method has an empty catch block.
Empty Catch Block,NuGet.CommandLine,ProjectFactoryTest,C:\research\architectureSmells\repos\NuGet_NuGet.PackageManagement\test\NuGet.CommandLine.Test\ProjectFactoryTest.cs,EnsureProjectFactoryDoesNotAddFileThatIsAlreadyInPackage,The method has an empty catch block.
Magic Number,NuGet.CommandLine.Test,DefaultConfigurationFilePreserver,C:\research\architectureSmells\repos\NuGet_NuGet.PackageManagement\test\NuGet.CommandLine.Test\DefaultConfigurationFilePreserver.cs,DefaultConfigurationFilePreserver,The following statement contains a magic number: var owner = _mutex.WaitOne(TimeSpan.FromMinutes(2));
Magic Number,NuGet.CommandLine.Test,MockServer,C:\research\architectureSmells\repos\NuGet_NuGet.PackageManagement\test\NuGet.CommandLine.Test\MockServer.cs,HandleRequest,The following statement contains a magic number: const int ERROR_OPERATION_ABORTED = 995;
Magic Number,NuGet.CommandLine.Test,MockServer,C:\research\architectureSmells\repos\NuGet_NuGet.PackageManagement\test\NuGet.CommandLine.Test\MockServer.cs,HandleRequest,The following statement contains a magic number: const int ERROR_INVALID_HANDLE = 6;
Magic Number,NuGet.CommandLine.Test,NetworkCallCountTest,C:\research\architectureSmells\repos\NuGet_NuGet.PackageManagement\test\NuGet.CommandLine.Test\NetworkCallCountTest.cs,NetworkCallCount_RestoreLargePackagesConfigWithMultipleSourcesWithAllMissingPackages,The following statement contains a magic number: var testCount = 100;
Magic Number,NuGet.CommandLine.Test,NetworkCallCountTest,C:\research\architectureSmells\repos\NuGet_NuGet.PackageManagement\test\NuGet.CommandLine.Test\NetworkCallCountTest.cs,NetworkCallCount_RestoreLargePackagesConfigWithMultipleSourcesWithAllMissingPackages,The following statement contains a magic number: var r = CommandRunner.Run(                      nugetexe'                      workingPath'                      string.Join(" "' args)'                      waitForExit: true'                      timeOutInMilliseconds: (int)TimeSpan.FromMinutes(3).TotalMilliseconds);
Magic Number,NuGet.CommandLine.Test,NetworkCallCountTest,C:\research\architectureSmells\repos\NuGet_NuGet.PackageManagement\test\NuGet.CommandLine.Test\NetworkCallCountTest.cs,NetworkCallCount_RestoreLargePackagesConfigWithMultipleSourcesWithPartialMissingPackages,The following statement contains a magic number: var testCount = 100;
Magic Number,NuGet.CommandLine.Test,NetworkCallCountTest,C:\research\architectureSmells\repos\NuGet_NuGet.PackageManagement\test\NuGet.CommandLine.Test\NetworkCallCountTest.cs,NetworkCallCount_RestoreLargePackagesConfigWithMultipleSourcesWithPartialMissingPackages,The following statement contains a magic number: var r = CommandRunner.Run(                      nugetexe'                      workingPath'                      string.Join(" "' args)'                      waitForExit: true'                      timeOutInMilliseconds: (int)TimeSpan.FromMinutes(3).TotalMilliseconds);
Magic Number,NuGet.CommandLine.Test,NetworkCallCountTest,C:\research\architectureSmells\repos\NuGet_NuGet.PackageManagement\test\NuGet.CommandLine.Test\NetworkCallCountTest.cs,NetworkCallCount_RestoreLargePackagesConfigWithMultipleSourcesMainlyV3,The following statement contains a magic number: var testCount = 100;
Magic Number,NuGet.CommandLine.Test,NetworkCallCountTest,C:\research\architectureSmells\repos\NuGet_NuGet.PackageManagement\test\NuGet.CommandLine.Test\NetworkCallCountTest.cs,NetworkCallCount_RestoreLargePackagesConfigWithMultipleSourcesMainlyV3,The following statement contains a magic number: var r = CommandRunner.Run(                      nugetexe'                      workingPath'                      string.Join(" "' args)'                      waitForExit: true'                      timeOutInMilliseconds: (int)TimeSpan.FromMinutes(3).TotalMilliseconds);
Magic Number,NuGet.CommandLine.Test,NetworkCallCountTest,C:\research\architectureSmells\repos\NuGet_NuGet.PackageManagement\test\NuGet.CommandLine.Test\NetworkCallCountTest.cs,NetworkCallCount_RestoreLargePackagesConfigWithMultipleSourcesMainlyV2,The following statement contains a magic number: var testCount = 100;
Magic Number,NuGet.CommandLine.Test,NetworkCallCountTest,C:\research\architectureSmells\repos\NuGet_NuGet.PackageManagement\test\NuGet.CommandLine.Test\NetworkCallCountTest.cs,NetworkCallCount_RestoreLargePackagesConfigWithMultipleSourcesMainlyV2,The following statement contains a magic number: var r = CommandRunner.Run(                      nugetexe'                      workingPath'                      string.Join(" "' args)'                      waitForExit: true'                      timeOutInMilliseconds: (int)TimeSpan.FromMinutes(3).TotalMilliseconds);
Magic Number,NuGet.CommandLine.Test,NetworkCallCountTest,C:\research\architectureSmells\repos\NuGet_NuGet.PackageManagement\test\NuGet.CommandLine.Test\NetworkCallCountTest.cs,NetworkCallCount_CancelPackageDownloadForV3,The following statement contains a magic number: var task = Task.Run(() =>                  {                      // Wait until all packages exist before allowing v2 to return                      while (packagesFolder.GetDirectories("*"' SearchOption.TopDirectoryOnly).Count() < 3)                      {                          Thread.Sleep(100);                      }                        v3ResetEvent.Set();                  });
Magic Number,NuGet.CommandLine.Test,NetworkCallCountTest,C:\research\architectureSmells\repos\NuGet_NuGet.PackageManagement\test\NuGet.CommandLine.Test\NetworkCallCountTest.cs,NetworkCallCount_CancelPackageDownloadForV3,The following statement contains a magic number: var task = Task.Run(() =>                  {                      // Wait until all packages exist before allowing v2 to return                      while (packagesFolder.GetDirectories("*"' SearchOption.TopDirectoryOnly).Count() < 3)                      {                          Thread.Sleep(100);                      }                        v3ResetEvent.Set();                  });
Magic Number,NuGet.CommandLine.Test,NetworkCallCountTest,C:\research\architectureSmells\repos\NuGet_NuGet.PackageManagement\test\NuGet.CommandLine.Test\NetworkCallCountTest.cs,NetworkCallCount_CancelPackageDownloadForV3,The following statement contains a magic number: Assert.Equal(3' machineCacheCount);
Magic Number,NuGet.CommandLine.Test,NetworkCallCountTest,C:\research\architectureSmells\repos\NuGet_NuGet.PackageManagement\test\NuGet.CommandLine.Test\NetworkCallCountTest.cs,NetworkCallCount_CancelPackageDownloadForV3,The following statement contains a magic number: Assert.Equal(3' packagesFolderCount);
Magic Number,NuGet.CommandLine.Test,NetworkCallCountTest,C:\research\architectureSmells\repos\NuGet_NuGet.PackageManagement\test\NuGet.CommandLine.Test\NetworkCallCountTest.cs,NetworkCallCount_CancelPackageDownloadForV3,The following statement contains a magic number: Assert.Equal(3' globalFolderCount);
Magic Number,NuGet.CommandLine.Test,NetworkCallCountTest,C:\research\architectureSmells\repos\NuGet_NuGet.PackageManagement\test\NuGet.CommandLine.Test\NetworkCallCountTest.cs,NetworkCallCount_CancelPackageDownloadForV2,The following statement contains a magic number: var task = Task.Run(() =>                  {                      // Wait until all packages exist before allowing v2 to return                      while (packagesFolder.GetDirectories("*"' SearchOption.TopDirectoryOnly).Count() < 3)                      {                          Thread.Sleep(100);                      }                        v2ResetEvent.Set();                  });
Magic Number,NuGet.CommandLine.Test,NetworkCallCountTest,C:\research\architectureSmells\repos\NuGet_NuGet.PackageManagement\test\NuGet.CommandLine.Test\NetworkCallCountTest.cs,NetworkCallCount_CancelPackageDownloadForV2,The following statement contains a magic number: var task = Task.Run(() =>                  {                      // Wait until all packages exist before allowing v2 to return                      while (packagesFolder.GetDirectories("*"' SearchOption.TopDirectoryOnly).Count() < 3)                      {                          Thread.Sleep(100);                      }                        v2ResetEvent.Set();                  });
Magic Number,NuGet.CommandLine.Test,NetworkCallCountTest,C:\research\architectureSmells\repos\NuGet_NuGet.PackageManagement\test\NuGet.CommandLine.Test\NetworkCallCountTest.cs,NetworkCallCount_CancelPackageDownloadForV2,The following statement contains a magic number: Assert.Equal(3' packagesFolderCount);
Magic Number,NuGet.CommandLine.Test,NetworkCallCountTest,C:\research\architectureSmells\repos\NuGet_NuGet.PackageManagement\test\NuGet.CommandLine.Test\NetworkCallCountTest.cs,NetworkCallCount_CancelPackageDownloadForV2,The following statement contains a magic number: Assert.Equal(6' globalFolderCount);
Magic Number,NuGet.CommandLine.Test,NetworkCallCountTest,C:\research\architectureSmells\repos\NuGet_NuGet.PackageManagement\test\NuGet.CommandLine.Test\NetworkCallCountTest.cs,NetworkCallCount_RestoreSolutionMultipleSourcesV2V3AndLocal,The following statement contains a magic number: Assert.True(2 >= hitsByUrl[url]' url + " " + hitsByUrl[url]);
Magic Number,NuGet.CommandLine.Test,NetworkCallCountTest,C:\research\architectureSmells\repos\NuGet_NuGet.PackageManagement\test\NuGet.CommandLine.Test\NetworkCallCountTest.cs,NetworkCallCount_RestoreSolutionMultipleSourcesV2V3AndLocal,The following statement contains a magic number: Assert.True(2 >= hitsByUrl2[url]' url + " " + hitsByUrl2[url]);
Magic Number,NuGet.CommandLine.Test,NetworkCallCountTest,C:\research\architectureSmells\repos\NuGet_NuGet.PackageManagement\test\NuGet.CommandLine.Test\NetworkCallCountTest.cs,ServerHandler,The following statement contains a magic number: return new Action<HttpListenerResponse>(response =>                      {                          response.StatusCode = 200;                          response.ContentType = "text/javascript";                          MockServer.SetResponseContent(response' indexJson.ToString());                      });
Magic Number,NuGet.CommandLine.Test,ConfigCommandTest,C:\research\architectureSmells\repos\NuGet_NuGet.PackageManagement\test\NuGet.CommandLine.Test\NuGetConfigCommandTest.cs,AssertEqualCollections,The following statement contains a magic number: Assert.Equal(actual.Count' expected.Length / 2);
Magic Number,NuGet.CommandLine.Test,ConfigCommandTest,C:\research\architectureSmells\repos\NuGet_NuGet.PackageManagement\test\NuGet.CommandLine.Test\NuGetConfigCommandTest.cs,AssertEqualCollections,The following statement contains a magic number: Assert.Equal(expected[2 * i]' actual[i].Key);
Magic Number,NuGet.CommandLine.Test,ConfigCommandTest,C:\research\architectureSmells\repos\NuGet_NuGet.PackageManagement\test\NuGet.CommandLine.Test\NuGetConfigCommandTest.cs,AssertEqualCollections,The following statement contains a magic number: Assert.Equal(expected[2 * i + 1]' actual[i].Value);
Magic Number,NuGet.CommandLine.Test,NuGetInstallCommandTest,C:\research\architectureSmells\repos\NuGet_NuGet.PackageManagement\test\NuGet.CommandLine.Test\NuGetInstallCommandTest.cs,InstallCommand_WillTryNewVersionsByAppendingZeros,The following statement contains a magic number: Assert.Equal(3' requests.Count);
Magic Number,NuGet.CommandLine.Test,NuGetInstallCommandTest,C:\research\architectureSmells\repos\NuGet_NuGet.PackageManagement\test\NuGet.CommandLine.Test\NuGetInstallCommandTest.cs,InstallCommand_WillTryNewVersionsByAppendingZeros,The following statement contains a magic number: Assert.True(requests[2].EndsWith("Packages(Id='testPackage1''Version='1.1.0.0')"));
Magic Number,NuGet.CommandLine.Test,NuGetInstallCommandTest,C:\research\architectureSmells\repos\NuGet_NuGet.PackageManagement\test\NuGet.CommandLine.Test\NuGetInstallCommandTest.cs,InstallCommand_AuthenticatedV3WithCredentialSavedInConfig,The following statement contains a magic number: serverV3.Get.Add("/a/b/c/index.json"' r =>                      {                          var h = r.Headers["Authorization"];                          var credential = String.IsNullOrEmpty(h) ?                              null :                              System.Text.Encoding.Default.GetString(Convert.FromBase64String(h.Substring(6)));                            if (StringComparer.OrdinalIgnoreCase.Equals("test_user:test_password"' credential))                          {                              return new Action<HttpListenerResponse>(response =>                              {                                  response.StatusCode = (int)HttpStatusCode.OK;                                  response.ContentType = "application/json";                                  MockServer.SetResponseContent(response' indexJson.ToString());                              });                          }                          else                          {                              return new Action<HttpListenerResponse>(response =>                              {                                  response.AddHeader("WWW-Authenticate"' "Basic ");                                  response.StatusCode = (int)HttpStatusCode.Unauthorized;                              });                          }                      });
Magic Number,NuGet.CommandLine.Test,NuGetInstallCommandTest,C:\research\architectureSmells\repos\NuGet_NuGet.PackageManagement\test\NuGet.CommandLine.Test\NuGetInstallCommandTest.cs,InstallCommand_AuthenticatedV3WithCredentialSavedInConfig,The following statement contains a magic number: serverV3.Get.Add("/reg/test_package/index.json"' r =>                      {                          var h = r.Headers["Authorization"];                          var credential = String.IsNullOrEmpty(h) ?                              null :                              System.Text.Encoding.Default.GetString(Convert.FromBase64String(h.Substring(6)));                            if (StringComparer.OrdinalIgnoreCase.Equals("test_user:test_password"' credential))                          {                              credentialsPassedToRegistrationEndPoint = true;                                return new Action<HttpListenerResponse>(response =>                              {                                  response.StatusCode = (int)HttpStatusCode.OK;                                  response.ContentType = "text/javascript";                                  MockServer.SetResponseContent(response' indexJson.ToString());                              });                          }                          else                          {                              return new Action<HttpListenerResponse>(response =>                              {                                  response.AddHeader("WWW-Authenticate"' "Basic ");                                  response.StatusCode = (int)HttpStatusCode.Unauthorized;                              });                          }                      });
Magic Number,NuGet.CommandLine.Test,NuGetListCommandTest,C:\research\architectureSmells\repos\NuGet_NuGet.PackageManagement\test\NuGet.CommandLine.Test\NuGetListCommandTest.cs,ListCommand_ShowLicenseUrlWithDetailedVerbosity,The following statement contains a magic number: Assert.Equal(4' lines.Length);
Magic Number,NuGet.CommandLine.Test,NuGetListCommandTest,C:\research\architectureSmells\repos\NuGet_NuGet.PackageManagement\test\NuGet.CommandLine.Test\NuGetListCommandTest.cs,ListCommand_ShowLicenseUrlWithDetailedVerbosity,The following statement contains a magic number: Assert.Equal(" desc of testPackage1 1.1.0"' lines[2]);
Magic Number,NuGet.CommandLine.Test,NuGetListCommandTest,C:\research\architectureSmells\repos\NuGet_NuGet.PackageManagement\test\NuGet.CommandLine.Test\NuGetListCommandTest.cs,ListCommand_ShowLicenseUrlWithDetailedVerbosity,The following statement contains a magic number: Assert.Equal(" License url: http://kaka"' lines[3]);
Magic Number,NuGet.CommandLine.Test,NuGetListCommandTest,C:\research\architectureSmells\repos\NuGet_NuGet.PackageManagement\test\NuGet.CommandLine.Test\NuGetListCommandTest.cs,ListCommand_SimpleV3,The following statement contains a magic number: serverV3.Get.Add("/"' r =>                      {                          var path = r.Url.AbsolutePath;                            if (path == "/index.json")                          {                              return new Action<HttpListenerResponse>(response =>                              {                                  response.StatusCode = 200;                                  response.ContentType = "text/javascript";                                  MockServer.SetResponseContent(response' indexJson.ToString());                              });                          }                            throw new Exception("This test needs to be updated to support: " + path);                      });
Magic Number,NuGet.CommandLine.Test,NuGetListCommandTest,C:\research\architectureSmells\repos\NuGet_NuGet.PackageManagement\test\NuGet.CommandLine.Test\NuGetListCommandTest.cs,ListCommand_SimpleV3_NoListEndpoint,The following statement contains a magic number: serverV3.Get.Add("/"' r =>                      {                          var path = r.Url.AbsolutePath;                            if (path == "/index.json")                          {                              return new Action<HttpListenerResponse>(response =>                              {                                  response.StatusCode = 200;                                  response.ContentType = "text/javascript";                                  MockServer.SetResponseContent(response' indexJson.ToString());                              });                          }                            throw new Exception("This test needs to be updated to support: " + path);                      });
Magic Number,NuGet.CommandLine.Test,NuGetListCommandTest,C:\research\architectureSmells\repos\NuGet_NuGet.PackageManagement\test\NuGet.CommandLine.Test\NuGetListCommandTest.cs,ListCommand_UnavailableV3,The following statement contains a magic number: serverV3.Get.Add("/"' r =>                      {                          var path = r.Url.AbsolutePath;                            if (path == "/index.json")                          {                              return new Action<HttpListenerResponse>(response =>                              {                                  response.StatusCode = 404;                                  response.ContentType = "text/javascript";                                  MockServer.SetResponseContent(response' response.StatusCode.ToString());                              });                          }                            throw new Exception("This test needs to be updated to support: " + path);                      });
Magic Number,NuGet.CommandLine.Test,NuGetPushCommandTest,C:\research\architectureSmells\repos\NuGet_NuGet.PackageManagement\test\NuGet.CommandLine.Test\NuGetPushCommandTest.cs,PushCommand_PushToServerWontRetryForever,The following statement contains a magic number: var r1 = CommandRunner.Run(                          nugetexe'                          packageDirectory'                          args'                          waitForExit: true'                          timeOutInMilliseconds: 10000);
Magic Number,NuGet.CommandLine.Test,NuGetPushCommandTest,C:\research\architectureSmells\repos\NuGet_NuGet.PackageManagement\test\NuGet.CommandLine.Test\NuGetPushCommandTest.cs,PushCommand_PushToServerBasicAuth,The following statement contains a magic number: server.Get.Add("/nuget"' r =>                      {                          var h = r.Headers["Authorization"];                          var credential = Encoding.Default.GetString(Convert.FromBase64String(h.Substring(6)));                          credentialForGetRequest.Add(credential);                          return HttpStatusCode.OK;                      });
Magic Number,NuGet.CommandLine.Test,NuGetPushCommandTest,C:\research\architectureSmells\repos\NuGet_NuGet.PackageManagement\test\NuGet.CommandLine.Test\NuGetPushCommandTest.cs,PushCommand_PushToServerBasicAuth,The following statement contains a magic number: server.Put.Add("/nuget"' r => new Action<HttpListenerResponse>(res =>                      {                          var h = r.Headers["Authorization"];                          var credential = Encoding.Default.GetString(Convert.FromBase64String(h.Substring(6)));                          credentialForPutRequest.Add(credential);                            if (credential.Equals("testuser:testpassword"' StringComparison.OrdinalIgnoreCase))                          {                              res.StatusCode = (int)HttpStatusCode.OK;                          }                          else                          {                              res.AddHeader("WWW-Authenticate"' "Basic ");                              res.StatusCode = (int)HttpStatusCode.Unauthorized;                          }                      }));
Magic Number,NuGet.CommandLine.Test,NuGetPushCommandTest,C:\research\architectureSmells\repos\NuGet_NuGet.PackageManagement\test\NuGet.CommandLine.Test\NuGetPushCommandTest.cs,PushCommand_PushToServerBasicAuth,The following statement contains a magic number: var r1 = CommandRunner.Run(                          nugetexe'                          packageDirectory'                          args'                          waitForExit: true'                          timeOutInMilliseconds: 10000'                          inputAction: (w) =>                          {                              // This user/password pair is first sent to                              // GET /nuget' then PUT /nuget                              w.WriteLine("a");                              w.WriteLine("b");                                // Send another user/password pair to PUT                              w.WriteLine("c");                              w.WriteLine("d");                                // Now send the right user/password to PUT                              w.WriteLine("testuser");                              w.WriteLine("testpassword");                          });
Magic Number,NuGet.CommandLine.Test,NuGetPushCommandTest,C:\research\architectureSmells\repos\NuGet_NuGet.PackageManagement\test\NuGet.CommandLine.Test\NuGetPushCommandTest.cs,PushCommand_PushToServerBasicAuth,The following statement contains a magic number: Assert.Equal(3' credentialForPutRequest.Count);
Magic Number,NuGet.CommandLine.Test,NuGetPushCommandTest,C:\research\architectureSmells\repos\NuGet_NuGet.PackageManagement\test\NuGet.CommandLine.Test\NuGetPushCommandTest.cs,PushCommand_PushToServerBasicAuth,The following statement contains a magic number: Assert.Equal("testuser:testpassword"' credentialForPutRequest[2]);
Magic Number,NuGet.CommandLine.Test,NuGetPushCommandTest,C:\research\architectureSmells\repos\NuGet_NuGet.PackageManagement\test\NuGet.CommandLine.Test\NuGetPushCommandTest.cs,PushCommand_PushToServerBasicAuthDisableBuffering,The following statement contains a magic number: server.Get.Add("/nuget"' r =>                      {                          var h = r.Headers["Authorization"];                          var credential = System.Text.Encoding.Default.GetString(Convert.FromBase64String(h.Substring(6)));                          credentialForGetRequest.Add(credential);                          return HttpStatusCode.OK;                      });
Magic Number,NuGet.CommandLine.Test,NuGetPushCommandTest,C:\research\architectureSmells\repos\NuGet_NuGet.PackageManagement\test\NuGet.CommandLine.Test\NuGetPushCommandTest.cs,PushCommand_PushToServerBasicAuthDisableBuffering,The following statement contains a magic number: server.Put.Add("/nuget"' r => new Action<HttpListenerResponse>(res =>                      {                          var h = r.Headers["Authorization"];                          var credential = System.Text.Encoding.Default.GetString(Convert.FromBase64String(h.Substring(6)));                          credentialForPutRequest.Add(credential);                            if (credential.Equals("testuser:testpassword"' StringComparison.OrdinalIgnoreCase))                          {                              res.StatusCode = (int)HttpStatusCode.OK;                          }                          else                          {                              res.AddHeader("WWW-Authenticate"' "Basic ");                              res.StatusCode = (int)HttpStatusCode.Unauthorized;                          }                      }));
Magic Number,NuGet.CommandLine.Test,NuGetPushCommandTest,C:\research\architectureSmells\repos\NuGet_NuGet.PackageManagement\test\NuGet.CommandLine.Test\NuGetPushCommandTest.cs,PushCommand_PushToServerBasicAuthDisableBuffering,The following statement contains a magic number: var r1 = CommandRunner.Run(                          nugetexe'                          packageDirectory'                          args'                          waitForExit: true'                          timeOutInMilliseconds: 10000'                          inputAction: (w) =>                          {                              // This user/password pair is first sent to                              // GET /nuget' then PUT /nuget                              w.WriteLine("a");                              w.WriteLine("b");                                // Send another user/password pair to PUT                              w.WriteLine("c");                              w.WriteLine("d");                                // Now send the right user/password to PUT                              w.WriteLine("testuser");                              w.WriteLine("testpassword");                          });
Magic Number,NuGet.CommandLine.Test,NuGetPushCommandTest,C:\research\architectureSmells\repos\NuGet_NuGet.PackageManagement\test\NuGet.CommandLine.Test\NuGetPushCommandTest.cs,PushCommand_PushToServerBasicAuthDisableBuffering,The following statement contains a magic number: Assert.Equal(3' credentialForPutRequest.Count);
Magic Number,NuGet.CommandLine.Test,NuGetPushCommandTest,C:\research\architectureSmells\repos\NuGet_NuGet.PackageManagement\test\NuGet.CommandLine.Test\NuGetPushCommandTest.cs,PushCommand_PushToServerBasicAuthDisableBuffering,The following statement contains a magic number: Assert.Equal("testuser:testpassword"' credentialForPutRequest[2]);
Magic Number,NuGet.CommandLine.Test,NuGetPushCommandTest,C:\research\architectureSmells\repos\NuGet_NuGet.PackageManagement\test\NuGet.CommandLine.Test\NuGetPushCommandTest.cs,PushCommand_PushToServerIntegratedWindowsAuthentication,The following statement contains a magic number: var r1 = CommandRunner.Run(                          nugetexe'                          packageDirectory'                          args'                          waitForExit: true'                          timeOutInMilliseconds: 10000);
Magic Number,NuGet.CommandLine.Test,NuGetPushCommandTest,C:\research\architectureSmells\repos\NuGet_NuGet.PackageManagement\test\NuGet.CommandLine.Test\NuGetPushCommandTest.cs,PushCommand_PushToServerIntegratedWindowsAuthenticationDisableBuffering,The following statement contains a magic number: var r1 = CommandRunner.Run(                          nugetexe'                          packageDirectory'                          args'                          waitForExit: true'                          timeOutInMilliseconds: 10000);
Magic Number,NuGet.CommandLine.Test,NuGetPushCommandTest,C:\research\architectureSmells\repos\NuGet_NuGet.PackageManagement\test\NuGet.CommandLine.Test\NuGetPushCommandTest.cs,PushCommand_PushToServerV3,The following statement contains a magic number: serverV3.Get.Add("/"' r =>                      {                          var path = r.Url.AbsolutePath;                            if (path == "/index.json")                          {                              return new Action<HttpListenerResponse>(response =>                              {                                  response.StatusCode = 200;                                  response.ContentType = "text/javascript";                                  MockServer.SetResponseContent(response' indexJson.ToString());                              });                          }                            throw new Exception("This test needs to be updated to support: " + path);                      });
Magic Number,NuGet.CommandLine.Test,NuGetPushCommandTest,C:\research\architectureSmells\repos\NuGet_NuGet.PackageManagement\test\NuGet.CommandLine.Test\NuGetPushCommandTest.cs,PushCommand_PushToServerV3_NoPushEndpoint,The following statement contains a magic number: serverV3.Get.Add("/"' r =>                      {                          var path = r.Url.AbsolutePath;                            if (path == "/index.json")                          {                              return new Action<HttpListenerResponse>(response =>                              {                                  response.StatusCode = 200;                                  response.ContentType = "text/javascript";                                  MockServer.SetResponseContent(response' indexJson.ToString());                              });                          }                            throw new Exception("This test needs to be updated to support: " + path);                      });
Magic Number,NuGet.CommandLine.Test,NuGetPushCommandTest,C:\research\architectureSmells\repos\NuGet_NuGet.PackageManagement\test\NuGet.CommandLine.Test\NuGetPushCommandTest.cs,PushCommand_PushToServerV3_Unavailable,The following statement contains a magic number: serverV3.Get.Add("/"' r =>                      {                          var path = r.Url.AbsolutePath;                            if (path == "/index.json")                          {                              return new Action<HttpListenerResponse>(response =>                              {                                  response.StatusCode = 404;                                  response.ContentType = "text/javascript";                                  MockServer.SetResponseContent(response' response.StatusCode.ToString());                              });                          }                            throw new Exception("This test needs to be updated to support: " + path);                      });
Magic Number,NuGet.CommandLine.Test,NuGetPushCommandTest,C:\research\architectureSmells\repos\NuGet_NuGet.PackageManagement\test\NuGet.CommandLine.Test\NuGetPushCommandTest.cs,PushCommand_PushToServerV3_ApiKey,The following statement contains a magic number: serverV3.Get.Add("/"' r =>                      {                          var path = r.Url.AbsolutePath;                            if (path == "/index.json")                          {                              return new Action<HttpListenerResponse>(response =>                              {                                  response.StatusCode = 200;                                  response.ContentType = "text/javascript";                                  MockServer.SetResponseContent(response' indexJson.ToString());                              });                          }                            throw new Exception("This test needs to be updated to support: " + path);                      });
Magic Number,NuGet.CommandLine.Test,NuGetPushCommandTest,C:\research\architectureSmells\repos\NuGet_NuGet.PackageManagement\test\NuGet.CommandLine.Test\NuGetPushCommandTest.cs,PushCommand_PushToServerV3_ApiKeyFromConfig,The following statement contains a magic number: serverV3.Get.Add("/"' r =>                      {                          var path = r.Url.AbsolutePath;                            if (path == "/index.json")                          {                              return new Action<HttpListenerResponse>(response =>                              {                                  response.StatusCode = 200;                                  response.ContentType = "text/javascript";                                  MockServer.SetResponseContent(response' indexJson.ToString());                              });                          }                            throw new Exception("This test needs to be updated to support: " + path);                      });
Magic Number,NuGet.CommandLine.Test,PortReserver,C:\research\architectureSmells\repos\NuGet_NuGet.PackageManagement\test\NuGet.CommandLine.Test\PortReserver.cs,PortReserver,The following statement contains a magic number: port > 65535
Magic Number,NuGet.CommandLine.Test,PortReserver,C:\research\architectureSmells\repos\NuGet_NuGet.PackageManagement\test\NuGet.CommandLine.Test\PortReserver.cs,GetGlobalMutex,The following statement contains a magic number: !mutex.WaitOne(30000)
Magic Number,NuGet.CommandLine.Test,RestoreProjectJsonTest,C:\research\architectureSmells\repos\NuGet_NuGet.PackageManagement\test\NuGet.CommandLine.Test\RestoreProjectJsonTest.cs,RestoreProjectJson_CorruptedLockFile,The following statement contains a magic number: Assert.Equal(2' lockFile.Libraries.Count);
Magic Number,NuGet.CommandLine.Test,NuGetSourcesCommandTest,C:\research\architectureSmells\repos\NuGet_NuGet.PackageManagement\test\NuGet.CommandLine.Test\NuGetSourcesCommandTest.cs,SourcesCommandTest_AddWithUserNamePassword,The following statement contains a magic number: Assert.Equal(2' credentials.Count);
Magic Number,NuGet.CommandLine.Test,NuGetSourcesCommandTest,C:\research\architectureSmells\repos\NuGet_NuGet.PackageManagement\test\NuGet.CommandLine.Test\NuGetSourcesCommandTest.cs,SourcesCommandTest_AddWithUserNamePasswordInClearText,The following statement contains a magic number: Assert.Equal(2' credentials.Count);
Magic Number,NuGet.CommandLine.Test,NuGetSourcesCommandTest,C:\research\architectureSmells\repos\NuGet_NuGet.PackageManagement\test\NuGet.CommandLine.Test\NuGetSourcesCommandTest.cs,SourcesCommandTest_AddWithUserNamePassword_UserDefinedConfigFile,The following statement contains a magic number: Assert.Equal(2' credentials.Count);
Magic Number,NuGet.CommandLine.Test,RestoreRetryTests,C:\research\architectureSmells\repos\NuGet_NuGet.PackageManagement\test\NuGet.CommandLine.Test\RestoreRetryTests.cs,RestoreRetry_PackagesConfigRetryOnFailingV2Source,The following statement contains a magic number: server.Get.Add("/"' r =>                  {                      var path = r.Url.PathAndQuery;                        // track hits on the url                      var urlHits = hitsByUrl.AddOrUpdate(path' 1' (s' i) => i + 1);                        if (path == "/nuget/$metadata")                      {                          return new Action<HttpListenerResponse>(response =>                          {                              MockServer.SetResponseContent(response' MockServerResource.NuGetV2APIMetadata);                          });                      }                      else if (path == "/package/testPackage1/1.1.0")                      {                          // Fail on the first two requests for this download                          if (urlHits < 3)                          {                              return new Action<HttpListenerResponse>(response =>                              {                                  response.StatusCode = 503;                              });                          }                            return new Action<HttpListenerResponse>(response =>                          {                              response.ContentType = "application/zip";                              using (var stream = package.GetStream())                              {                                  var content = stream.ReadAllBytes();                                  MockServer.SetResponseContent(response' content);                              }                          });                      }                      else if (path == "/nuget/Packages(Id='testPackage1''Version='1.1.0')")                      {                          return new Action<HttpListenerResponse>(response =>                          {                              response.ContentType = "application/atom+xml;type=entry;charset=utf-8";                              var odata = server.ToOData(package);                              MockServer.SetResponseContent(response' odata);                          });                      }                      else if (path == "/nuget")                      {                          return new Action<HttpListenerResponse>(response =>                          {                              response.StatusCode = 200;                          });                      }                        throw new Exception("This test needs to be updated to support: " + path);                  });
Magic Number,NuGet.CommandLine.Test,RestoreRetryTests,C:\research\architectureSmells\repos\NuGet_NuGet.PackageManagement\test\NuGet.CommandLine.Test\RestoreRetryTests.cs,RestoreRetry_PackagesConfigRetryOnFailingV2Source,The following statement contains a magic number: server.Get.Add("/"' r =>                  {                      var path = r.Url.PathAndQuery;                        // track hits on the url                      var urlHits = hitsByUrl.AddOrUpdate(path' 1' (s' i) => i + 1);                        if (path == "/nuget/$metadata")                      {                          return new Action<HttpListenerResponse>(response =>                          {                              MockServer.SetResponseContent(response' MockServerResource.NuGetV2APIMetadata);                          });                      }                      else if (path == "/package/testPackage1/1.1.0")                      {                          // Fail on the first two requests for this download                          if (urlHits < 3)                          {                              return new Action<HttpListenerResponse>(response =>                              {                                  response.StatusCode = 503;                              });                          }                            return new Action<HttpListenerResponse>(response =>                          {                              response.ContentType = "application/zip";                              using (var stream = package.GetStream())                              {                                  var content = stream.ReadAllBytes();                                  MockServer.SetResponseContent(response' content);                              }                          });                      }                      else if (path == "/nuget/Packages(Id='testPackage1''Version='1.1.0')")                      {                          return new Action<HttpListenerResponse>(response =>                          {                              response.ContentType = "application/atom+xml;type=entry;charset=utf-8";                              var odata = server.ToOData(package);                              MockServer.SetResponseContent(response' odata);                          });                      }                      else if (path == "/nuget")                      {                          return new Action<HttpListenerResponse>(response =>                          {                              response.StatusCode = 200;                          });                      }                        throw new Exception("This test needs to be updated to support: " + path);                  });
Magic Number,NuGet.CommandLine.Test,RestoreRetryTests,C:\research\architectureSmells\repos\NuGet_NuGet.PackageManagement\test\NuGet.CommandLine.Test\RestoreRetryTests.cs,RestoreRetry_PackagesConfigRetryOnFailingV2Source,The following statement contains a magic number: server.Get.Add("/"' r =>                  {                      var path = r.Url.PathAndQuery;                        // track hits on the url                      var urlHits = hitsByUrl.AddOrUpdate(path' 1' (s' i) => i + 1);                        if (path == "/nuget/$metadata")                      {                          return new Action<HttpListenerResponse>(response =>                          {                              MockServer.SetResponseContent(response' MockServerResource.NuGetV2APIMetadata);                          });                      }                      else if (path == "/package/testPackage1/1.1.0")                      {                          // Fail on the first two requests for this download                          if (urlHits < 3)                          {                              return new Action<HttpListenerResponse>(response =>                              {                                  response.StatusCode = 503;                              });                          }                            return new Action<HttpListenerResponse>(response =>                          {                              response.ContentType = "application/zip";                              using (var stream = package.GetStream())                              {                                  var content = stream.ReadAllBytes();                                  MockServer.SetResponseContent(response' content);                              }                          });                      }                      else if (path == "/nuget/Packages(Id='testPackage1''Version='1.1.0')")                      {                          return new Action<HttpListenerResponse>(response =>                          {                              response.ContentType = "application/atom+xml;type=entry;charset=utf-8";                              var odata = server.ToOData(package);                              MockServer.SetResponseContent(response' odata);                          });                      }                      else if (path == "/nuget")                      {                          return new Action<HttpListenerResponse>(response =>                          {                              response.StatusCode = 200;                          });                      }                        throw new Exception("This test needs to be updated to support: " + path);                  });
Magic Number,NuGet.CommandLine.Test,RestoreRetryTests,C:\research\architectureSmells\repos\NuGet_NuGet.PackageManagement\test\NuGet.CommandLine.Test\RestoreRetryTests.cs,RestoreRetry_ProjectJsonRetryOnFailingV2Source,The following statement contains a magic number: server.Get.Add("/"' r =>                  {                      var path = r.Url.PathAndQuery;                        // track hits on the url                      var urlHits = hitsByUrl.AddOrUpdate(path' 1' (s' i) => i + 1);                        // Fail on the first 3 requests for every url                      if (urlHits < 4)                      {                          return new Action<HttpListenerResponse>(response =>                          {                              response.StatusCode = 503;                          });                      }                        if (path == "/nuget/$metadata")                      {                          return new Action<HttpListenerResponse>(response =>                          {                              MockServer.SetResponseContent(response' MockServerResource.NuGetV2APIMetadata);                          });                      }                      else if (path == "/package/testPackage1/1.1.0")                      {                          return new Action<HttpListenerResponse>(response =>                          {                              response.ContentType = "application/zip";                              using (var stream = package.GetStream())                              {                                  var content = stream.ReadAllBytes();                                  MockServer.SetResponseContent(response' content);                              }                          });                      }                      else if (path == "/nuget/FindPackagesById()?id='testPackage1'")                      {                          return new Action<HttpListenerResponse>(response =>                          {                              response.ContentType = "application/atom+xml;type=feed;charset=utf-8";                              string feed = server.ToODataFeed(new[] { package }' "FindPackagesById");                              MockServer.SetResponseContent(response' feed);                          });                      }                      else if (path == "/nuget")                      {                          return new Action<HttpListenerResponse>(response =>                          {                              response.StatusCode = 200;                          });                      }                        throw new Exception("This test needs to be updated to support: " + path);                  });
Magic Number,NuGet.CommandLine.Test,RestoreRetryTests,C:\research\architectureSmells\repos\NuGet_NuGet.PackageManagement\test\NuGet.CommandLine.Test\RestoreRetryTests.cs,RestoreRetry_ProjectJsonRetryOnFailingV2Source,The following statement contains a magic number: server.Get.Add("/"' r =>                  {                      var path = r.Url.PathAndQuery;                        // track hits on the url                      var urlHits = hitsByUrl.AddOrUpdate(path' 1' (s' i) => i + 1);                        // Fail on the first 3 requests for every url                      if (urlHits < 4)                      {                          return new Action<HttpListenerResponse>(response =>                          {                              response.StatusCode = 503;                          });                      }                        if (path == "/nuget/$metadata")                      {                          return new Action<HttpListenerResponse>(response =>                          {                              MockServer.SetResponseContent(response' MockServerResource.NuGetV2APIMetadata);                          });                      }                      else if (path == "/package/testPackage1/1.1.0")                      {                          return new Action<HttpListenerResponse>(response =>                          {                              response.ContentType = "application/zip";                              using (var stream = package.GetStream())                              {                                  var content = stream.ReadAllBytes();                                  MockServer.SetResponseContent(response' content);                              }                          });                      }                      else if (path == "/nuget/FindPackagesById()?id='testPackage1'")                      {                          return new Action<HttpListenerResponse>(response =>                          {                              response.ContentType = "application/atom+xml;type=feed;charset=utf-8";                              string feed = server.ToODataFeed(new[] { package }' "FindPackagesById");                              MockServer.SetResponseContent(response' feed);                          });                      }                      else if (path == "/nuget")                      {                          return new Action<HttpListenerResponse>(response =>                          {                              response.StatusCode = 200;                          });                      }                        throw new Exception("This test needs to be updated to support: " + path);                  });
Magic Number,NuGet.CommandLine.Test,RestoreRetryTests,C:\research\architectureSmells\repos\NuGet_NuGet.PackageManagement\test\NuGet.CommandLine.Test\RestoreRetryTests.cs,RestoreRetry_ProjectJsonRetryOnFailingV2Source,The following statement contains a magic number: server.Get.Add("/"' r =>                  {                      var path = r.Url.PathAndQuery;                        // track hits on the url                      var urlHits = hitsByUrl.AddOrUpdate(path' 1' (s' i) => i + 1);                        // Fail on the first 3 requests for every url                      if (urlHits < 4)                      {                          return new Action<HttpListenerResponse>(response =>                          {                              response.StatusCode = 503;                          });                      }                        if (path == "/nuget/$metadata")                      {                          return new Action<HttpListenerResponse>(response =>                          {                              MockServer.SetResponseContent(response' MockServerResource.NuGetV2APIMetadata);                          });                      }                      else if (path == "/package/testPackage1/1.1.0")                      {                          return new Action<HttpListenerResponse>(response =>                          {                              response.ContentType = "application/zip";                              using (var stream = package.GetStream())                              {                                  var content = stream.ReadAllBytes();                                  MockServer.SetResponseContent(response' content);                              }                          });                      }                      else if (path == "/nuget/FindPackagesById()?id='testPackage1'")                      {                          return new Action<HttpListenerResponse>(response =>                          {                              response.ContentType = "application/atom+xml;type=feed;charset=utf-8";                              string feed = server.ToODataFeed(new[] { package }' "FindPackagesById");                              MockServer.SetResponseContent(response' feed);                          });                      }                      else if (path == "/nuget")                      {                          return new Action<HttpListenerResponse>(response =>                          {                              response.StatusCode = 200;                          });                      }                        throw new Exception("This test needs to be updated to support: " + path);                  });
Magic Number,NuGet.CommandLine.Test,RestoreRetryTests,C:\research\architectureSmells\repos\NuGet_NuGet.PackageManagement\test\NuGet.CommandLine.Test\RestoreRetryTests.cs,RestoreRetry_ProjectJsonRetryOnFailingV2Source,The following statement contains a magic number: Assert.True(hitsByUrl[url] == 4' url);
Magic Number,NuGet.CommandLine.Test,RestoreRetryTests,C:\research\architectureSmells\repos\NuGet_NuGet.PackageManagement\test\NuGet.CommandLine.Test\RestoreRetryTests.cs,RestoreRetry_ProjectJsonRetryOnFailingV3Source,The following statement contains a magic number: server.Get.Add("/"' r =>                  {                      var path = r.Url.AbsolutePath;                        // track hits on the url                      var urlHits = hitsByUrl.AddOrUpdate(path' 1' (s' i) => i + 1);                        // Fail on the first 3 requests for every url                      if (urlHits < 4)                      {                          return new Action<HttpListenerResponse>(response =>                          {                              response.StatusCode = 503;                          });                      }                        if (path == "/index.json")                      {                          return new Action<HttpListenerResponse>(response =>                          {                              response.StatusCode = 200;                              response.ContentType = "text/javascript";                              MockServer.SetResponseContent(response' indexJson.ToString());                          });                      }                      else if (path == "/flat/testpackage1/1.1.0/testpackage1.1.1.0.nupkg")                      {                          return new Action<HttpListenerResponse>(response =>                          {                              response.ContentType = "application/zip";                              using (var stream = package.GetStream())                              {                                  var content = stream.ReadAllBytes();                                  MockServer.SetResponseContent(response' content);                              }                          });                      }                      else if (path == "/flat/testpackage1/index.json")                      {                          return new Action<HttpListenerResponse>(response =>                          {                              response.ContentType = "text/javascript";                                MockServer.SetResponseContent(response' @"{                                ""versions"": [                                  ""0.1.0""'                                  ""0.3.0""'                                  ""0.4.0""'                                  ""0.5.0""'                                  ""1.0.0""'                                  ""1.1.0""'                                  ""1.2.0""                                ]                              }");                          });                      }                        throw new Exception("This test needs to be updated to support: " + path);                  });
Magic Number,NuGet.CommandLine.Test,RestoreRetryTests,C:\research\architectureSmells\repos\NuGet_NuGet.PackageManagement\test\NuGet.CommandLine.Test\RestoreRetryTests.cs,RestoreRetry_ProjectJsonRetryOnFailingV3Source,The following statement contains a magic number: server.Get.Add("/"' r =>                  {                      var path = r.Url.AbsolutePath;                        // track hits on the url                      var urlHits = hitsByUrl.AddOrUpdate(path' 1' (s' i) => i + 1);                        // Fail on the first 3 requests for every url                      if (urlHits < 4)                      {                          return new Action<HttpListenerResponse>(response =>                          {                              response.StatusCode = 503;                          });                      }                        if (path == "/index.json")                      {                          return new Action<HttpListenerResponse>(response =>                          {                              response.StatusCode = 200;                              response.ContentType = "text/javascript";                              MockServer.SetResponseContent(response' indexJson.ToString());                          });                      }                      else if (path == "/flat/testpackage1/1.1.0/testpackage1.1.1.0.nupkg")                      {                          return new Action<HttpListenerResponse>(response =>                          {                              response.ContentType = "application/zip";                              using (var stream = package.GetStream())                              {                                  var content = stream.ReadAllBytes();                                  MockServer.SetResponseContent(response' content);                              }                          });                      }                      else if (path == "/flat/testpackage1/index.json")                      {                          return new Action<HttpListenerResponse>(response =>                          {                              response.ContentType = "text/javascript";                                MockServer.SetResponseContent(response' @"{                                ""versions"": [                                  ""0.1.0""'                                  ""0.3.0""'                                  ""0.4.0""'                                  ""0.5.0""'                                  ""1.0.0""'                                  ""1.1.0""'                                  ""1.2.0""                                ]                              }");                          });                      }                        throw new Exception("This test needs to be updated to support: " + path);                  });
Magic Number,NuGet.CommandLine.Test,RestoreRetryTests,C:\research\architectureSmells\repos\NuGet_NuGet.PackageManagement\test\NuGet.CommandLine.Test\RestoreRetryTests.cs,RestoreRetry_ProjectJsonRetryOnFailingV3Source,The following statement contains a magic number: server.Get.Add("/"' r =>                  {                      var path = r.Url.AbsolutePath;                        // track hits on the url                      var urlHits = hitsByUrl.AddOrUpdate(path' 1' (s' i) => i + 1);                        // Fail on the first 3 requests for every url                      if (urlHits < 4)                      {                          return new Action<HttpListenerResponse>(response =>                          {                              response.StatusCode = 503;                          });                      }                        if (path == "/index.json")                      {                          return new Action<HttpListenerResponse>(response =>                          {                              response.StatusCode = 200;                              response.ContentType = "text/javascript";                              MockServer.SetResponseContent(response' indexJson.ToString());                          });                      }                      else if (path == "/flat/testpackage1/1.1.0/testpackage1.1.1.0.nupkg")                      {                          return new Action<HttpListenerResponse>(response =>                          {                              response.ContentType = "application/zip";                              using (var stream = package.GetStream())                              {                                  var content = stream.ReadAllBytes();                                  MockServer.SetResponseContent(response' content);                              }                          });                      }                      else if (path == "/flat/testpackage1/index.json")                      {                          return new Action<HttpListenerResponse>(response =>                          {                              response.ContentType = "text/javascript";                                MockServer.SetResponseContent(response' @"{                                ""versions"": [                                  ""0.1.0""'                                  ""0.3.0""'                                  ""0.4.0""'                                  ""0.5.0""'                                  ""1.0.0""'                                  ""1.1.0""'                                  ""1.2.0""                                ]                              }");                          });                      }                        throw new Exception("This test needs to be updated to support: " + path);                  });
Magic Number,NuGet.CommandLine.Test,RestoreRetryTests,C:\research\architectureSmells\repos\NuGet_NuGet.PackageManagement\test\NuGet.CommandLine.Test\RestoreRetryTests.cs,RestoreRetry_ProjectJsonRetryOnFailingV3Source,The following statement contains a magic number: var minTime = TimeSpan.FromMilliseconds(hitsByUrl.Count * 3 * 200);
Magic Number,NuGet.CommandLine.Test,RestoreRetryTests,C:\research\architectureSmells\repos\NuGet_NuGet.PackageManagement\test\NuGet.CommandLine.Test\RestoreRetryTests.cs,RestoreRetry_ProjectJsonRetryOnFailingV3Source,The following statement contains a magic number: var minTime = TimeSpan.FromMilliseconds(hitsByUrl.Count * 3 * 200);
Magic Number,NuGet.CommandLine.Test,RestoreRetryTests,C:\research\architectureSmells\repos\NuGet_NuGet.PackageManagement\test\NuGet.CommandLine.Test\RestoreRetryTests.cs,RestoreRetry_ProjectJsonRetryOnFailingV3Source,The following statement contains a magic number: Assert.True(hitsByUrl[url] == 4' url);
Magic Number,NuGet.CommandLine.Test,RestoreRetryTests,C:\research\architectureSmells\repos\NuGet_NuGet.PackageManagement\test\NuGet.CommandLine.Test\RestoreRetryTests.cs,RestoreRetry_PackagesConfigRetryOnFailingV3Source,The following statement contains a magic number: server.Get.Add("/"' r =>                  {                      var path = r.Url.AbsolutePath;                        // track hits on the url                      var urlHits = hitsByUrl.AddOrUpdate(path' 1' (s' i) => i + 1);                        // Fail on the first 3 requests for every url                      if (urlHits < 4)                      {                          return new Action<HttpListenerResponse>(response =>                          {                              response.StatusCode = 503;                          });                      }                        if (path == "/index.json")                      {                          return new Action<HttpListenerResponse>(response =>                          {                              response.StatusCode = 200;                              response.ContentType = "text/javascript";                              MockServer.SetResponseContent(response' indexJson.ToString());                          });                      }                      else if (path == "/flat/testpackage1/1.1.0/testpackage1.1.1.0.nupkg")                      {                          return new Action<HttpListenerResponse>(response =>                          {                              response.ContentType = "application/zip";                              using (var stream = package.GetStream())                              {                                  var content = stream.ReadAllBytes();                                  MockServer.SetResponseContent(response' content);                              }                          });                      }                      else if (path == "/reg/testpackage1/index.json")                      {                          return new Action<HttpListenerResponse>(response =>                          {                              response.ContentType = "text/javascript";                                string json = null;                                json = @"{                      ""@id"": ""{0}/reg/testPackage1/index.json""'                      ""@type"": [                      ""catalog:CatalogRoot""'                      ""PackageRegistration""'                      ""catalog:Permalink""                      ]'                      ""commitId"": ""6d2d2375-b263-49ee-9a46-fd6b2d77e592""'                      ""commitTimeStamp"": ""2015-06-22T22:30:00.1487642Z""'                      ""count"": 1'                      ""items"": [                      {                          ""@id"": ""{0}reg/testPackage1/index.json#page/0.0.0/9.0.0""'                          ""@type"": ""catalog:CatalogPage""'                          ""commitId"": ""6d2d2375-b263-49ee-9a46-fd6b2d77e592""'                          ""commitTimeStamp"": ""2015-06-22T22:30:00.1487642Z""'                          ""count"": 1'                          ""items"": [                          {                              ""@id"": ""{0}reg/testPackage1/1.1.0.json""'                              ""@type"": ""Package""'                              ""commitId"": ""1fa214b1-6a03-4b4e-a16e-4925f994057f""'                              ""commitTimeStamp"": ""2015-04-01T20:27:37.8431747Z""'                              ""catalogEntry"": {                              ""@id"": ""{0}catalog0/data/2015.02.01.06.24.15/testPackage1.1.1.0.json""'                              ""@type"": ""PackageDetails""'                              ""authors"": ""test master""'                              ""description"": ""test one""'                              ""iconUrl"": """"'                              ""id"": ""testPackage1""'                              ""language"": ""en-US""'                              ""licenseUrl"": """"'                              ""listed"": true'                              ""minClientVersion"": """"'                              ""projectUrl"": """"'                              ""published"": ""2012-01-01T22:12:57.713Z""'                              ""requireLicenseAcceptance"": false'                              ""summary"": ""stuffs""'                              ""tags"": [                                  """"                              ]'                              ""title"": """"'                              ""version"": ""1.1.0""                              }'                              ""packageContent"": ""{0}packages/testPackage1.1.1.0.nupkg""'                              ""registration"": ""{0}reg/testPackage1/index.json""                          }]'                  ""parent"": ""{0}reg/testPackage1/index.json""'                          ""lower"": ""0.0.0""'                          ""upper"": ""9.0.0""                      }                      ]}".Replace("{0}"' server.Uri);                                var jObject = JObject.Parse(json);                                MockServer.SetResponseContent(response' jObject.ToString());                          });                      }                        throw new Exception("This test needs to be updated to support: " + path);                  });
Magic Number,NuGet.CommandLine.Test,RestoreRetryTests,C:\research\architectureSmells\repos\NuGet_NuGet.PackageManagement\test\NuGet.CommandLine.Test\RestoreRetryTests.cs,RestoreRetry_PackagesConfigRetryOnFailingV3Source,The following statement contains a magic number: server.Get.Add("/"' r =>                  {                      var path = r.Url.AbsolutePath;                        // track hits on the url                      var urlHits = hitsByUrl.AddOrUpdate(path' 1' (s' i) => i + 1);                        // Fail on the first 3 requests for every url                      if (urlHits < 4)                      {                          return new Action<HttpListenerResponse>(response =>                          {                              response.StatusCode = 503;                          });                      }                        if (path == "/index.json")                      {                          return new Action<HttpListenerResponse>(response =>                          {                              response.StatusCode = 200;                              response.ContentType = "text/javascript";                              MockServer.SetResponseContent(response' indexJson.ToString());                          });                      }                      else if (path == "/flat/testpackage1/1.1.0/testpackage1.1.1.0.nupkg")                      {                          return new Action<HttpListenerResponse>(response =>                          {                              response.ContentType = "application/zip";                              using (var stream = package.GetStream())                              {                                  var content = stream.ReadAllBytes();                                  MockServer.SetResponseContent(response' content);                              }                          });                      }                      else if (path == "/reg/testpackage1/index.json")                      {                          return new Action<HttpListenerResponse>(response =>                          {                              response.ContentType = "text/javascript";                                string json = null;                                json = @"{                      ""@id"": ""{0}/reg/testPackage1/index.json""'                      ""@type"": [                      ""catalog:CatalogRoot""'                      ""PackageRegistration""'                      ""catalog:Permalink""                      ]'                      ""commitId"": ""6d2d2375-b263-49ee-9a46-fd6b2d77e592""'                      ""commitTimeStamp"": ""2015-06-22T22:30:00.1487642Z""'                      ""count"": 1'                      ""items"": [                      {                          ""@id"": ""{0}reg/testPackage1/index.json#page/0.0.0/9.0.0""'                          ""@type"": ""catalog:CatalogPage""'                          ""commitId"": ""6d2d2375-b263-49ee-9a46-fd6b2d77e592""'                          ""commitTimeStamp"": ""2015-06-22T22:30:00.1487642Z""'                          ""count"": 1'                          ""items"": [                          {                              ""@id"": ""{0}reg/testPackage1/1.1.0.json""'                              ""@type"": ""Package""'                              ""commitId"": ""1fa214b1-6a03-4b4e-a16e-4925f994057f""'                              ""commitTimeStamp"": ""2015-04-01T20:27:37.8431747Z""'                              ""catalogEntry"": {                              ""@id"": ""{0}catalog0/data/2015.02.01.06.24.15/testPackage1.1.1.0.json""'                              ""@type"": ""PackageDetails""'                              ""authors"": ""test master""'                              ""description"": ""test one""'                              ""iconUrl"": """"'                              ""id"": ""testPackage1""'                              ""language"": ""en-US""'                              ""licenseUrl"": """"'                              ""listed"": true'                              ""minClientVersion"": """"'                              ""projectUrl"": """"'                              ""published"": ""2012-01-01T22:12:57.713Z""'                              ""requireLicenseAcceptance"": false'                              ""summary"": ""stuffs""'                              ""tags"": [                                  """"                              ]'                              ""title"": """"'                              ""version"": ""1.1.0""                              }'                              ""packageContent"": ""{0}packages/testPackage1.1.1.0.nupkg""'                              ""registration"": ""{0}reg/testPackage1/index.json""                          }]'                  ""parent"": ""{0}reg/testPackage1/index.json""'                          ""lower"": ""0.0.0""'                          ""upper"": ""9.0.0""                      }                      ]}".Replace("{0}"' server.Uri);                                var jObject = JObject.Parse(json);                                MockServer.SetResponseContent(response' jObject.ToString());                          });                      }                        throw new Exception("This test needs to be updated to support: " + path);                  });
Magic Number,NuGet.CommandLine.Test,RestoreRetryTests,C:\research\architectureSmells\repos\NuGet_NuGet.PackageManagement\test\NuGet.CommandLine.Test\RestoreRetryTests.cs,RestoreRetry_PackagesConfigRetryOnFailingV3Source,The following statement contains a magic number: server.Get.Add("/"' r =>                  {                      var path = r.Url.AbsolutePath;                        // track hits on the url                      var urlHits = hitsByUrl.AddOrUpdate(path' 1' (s' i) => i + 1);                        // Fail on the first 3 requests for every url                      if (urlHits < 4)                      {                          return new Action<HttpListenerResponse>(response =>                          {                              response.StatusCode = 503;                          });                      }                        if (path == "/index.json")                      {                          return new Action<HttpListenerResponse>(response =>                          {                              response.StatusCode = 200;                              response.ContentType = "text/javascript";                              MockServer.SetResponseContent(response' indexJson.ToString());                          });                      }                      else if (path == "/flat/testpackage1/1.1.0/testpackage1.1.1.0.nupkg")                      {                          return new Action<HttpListenerResponse>(response =>                          {                              response.ContentType = "application/zip";                              using (var stream = package.GetStream())                              {                                  var content = stream.ReadAllBytes();                                  MockServer.SetResponseContent(response' content);                              }                          });                      }                      else if (path == "/reg/testpackage1/index.json")                      {                          return new Action<HttpListenerResponse>(response =>                          {                              response.ContentType = "text/javascript";                                string json = null;                                json = @"{                      ""@id"": ""{0}/reg/testPackage1/index.json""'                      ""@type"": [                      ""catalog:CatalogRoot""'                      ""PackageRegistration""'                      ""catalog:Permalink""                      ]'                      ""commitId"": ""6d2d2375-b263-49ee-9a46-fd6b2d77e592""'                      ""commitTimeStamp"": ""2015-06-22T22:30:00.1487642Z""'                      ""count"": 1'                      ""items"": [                      {                          ""@id"": ""{0}reg/testPackage1/index.json#page/0.0.0/9.0.0""'                          ""@type"": ""catalog:CatalogPage""'                          ""commitId"": ""6d2d2375-b263-49ee-9a46-fd6b2d77e592""'                          ""commitTimeStamp"": ""2015-06-22T22:30:00.1487642Z""'                          ""count"": 1'                          ""items"": [                          {                              ""@id"": ""{0}reg/testPackage1/1.1.0.json""'                              ""@type"": ""Package""'                              ""commitId"": ""1fa214b1-6a03-4b4e-a16e-4925f994057f""'                              ""commitTimeStamp"": ""2015-04-01T20:27:37.8431747Z""'                              ""catalogEntry"": {                              ""@id"": ""{0}catalog0/data/2015.02.01.06.24.15/testPackage1.1.1.0.json""'                              ""@type"": ""PackageDetails""'                              ""authors"": ""test master""'                              ""description"": ""test one""'                              ""iconUrl"": """"'                              ""id"": ""testPackage1""'                              ""language"": ""en-US""'                              ""licenseUrl"": """"'                              ""listed"": true'                              ""minClientVersion"": """"'                              ""projectUrl"": """"'                              ""published"": ""2012-01-01T22:12:57.713Z""'                              ""requireLicenseAcceptance"": false'                              ""summary"": ""stuffs""'                              ""tags"": [                                  """"                              ]'                              ""title"": """"'                              ""version"": ""1.1.0""                              }'                              ""packageContent"": ""{0}packages/testPackage1.1.1.0.nupkg""'                              ""registration"": ""{0}reg/testPackage1/index.json""                          }]'                  ""parent"": ""{0}reg/testPackage1/index.json""'                          ""lower"": ""0.0.0""'                          ""upper"": ""9.0.0""                      }                      ]}".Replace("{0}"' server.Uri);                                var jObject = JObject.Parse(json);                                MockServer.SetResponseContent(response' jObject.ToString());                          });                      }                        throw new Exception("This test needs to be updated to support: " + path);                  });
Magic Number,NuGet.CommandLine.Test,RestoreRetryTests,C:\research\architectureSmells\repos\NuGet_NuGet.PackageManagement\test\NuGet.CommandLine.Test\RestoreRetryTests.cs,RestoreRetry_PackagesConfigRetryOnFailingV3Source,The following statement contains a magic number: var minTime = TimeSpan.FromMilliseconds(hitsByUrl.Count * 3 * 200);
Magic Number,NuGet.CommandLine.Test,RestoreRetryTests,C:\research\architectureSmells\repos\NuGet_NuGet.PackageManagement\test\NuGet.CommandLine.Test\RestoreRetryTests.cs,RestoreRetry_PackagesConfigRetryOnFailingV3Source,The following statement contains a magic number: var minTime = TimeSpan.FromMilliseconds(hitsByUrl.Count * 3 * 200);
Magic Number,NuGet.CommandLine.Test,RestoreRetryTests,C:\research\architectureSmells\repos\NuGet_NuGet.PackageManagement\test\NuGet.CommandLine.Test\RestoreRetryTests.cs,RestoreRetry_PackagesConfigRetryOnFailingV3Source,The following statement contains a magic number: Assert.True(hitsByUrl[url] == 4' url);
Duplicate Code,NuGet.CommandLine.Test,NetworkCallCountTest,C:\research\architectureSmells\repos\NuGet_NuGet.PackageManagement\test\NuGet.CommandLine.Test\NetworkCallCountTest.cs,ServerHandler,The method contains a code clone-set at the following line numbers (starting from the method definition): ((49' 73)' (131' 155))
Duplicate Code,NuGet.CommandLine.Test,NetworkCallCountTest,C:\research\architectureSmells\repos\NuGet_NuGet.PackageManagement\test\NuGet.CommandLine.Test\NetworkCallCountTest.cs,ServerHandler,The method contains a code clone-set at the following line numbers (starting from the method definition): ((53' 73)' (82' 102)' (135' 155))
