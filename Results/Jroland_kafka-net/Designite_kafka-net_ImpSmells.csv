Implementation smell,Namespace,Class,File,Method,Description
Complex Method,KafkaNet.Common,BigEndianBinaryWriter,F:\newReposMay17\Jroland_kafka-net\src\kafka-net\Common\BigEndianBinaryWriter.cs,Write,Cyclomatic complexity of the method is 10
Complex Method,KafkaNet.Statistics,StatisticsTracker,F:\newReposMay17\Jroland_kafka-net\src\kafka-net\Statistics\StatisticsTracker.cs,IncrementGauge,Cyclomatic complexity of the method is 9
Complex Method,KafkaNet.Statistics,StatisticsTracker,F:\newReposMay17\Jroland_kafka-net\src\kafka-net\Statistics\StatisticsTracker.cs,DecrementGauge,Cyclomatic complexity of the method is 9
Complex Method,KafkaNet,Consumer,F:\newReposMay17\Jroland_kafka-net\src\kafka-net\Consumer.cs,HandleResponseErrors,Cyclomatic complexity of the method is 10
Complex Method,KafkaNet,KafkaMetadataProvider,F:\newReposMay17\Jroland_kafka-net\src\kafka-net\KafkaMetadataProvider.cs,Get,Cyclomatic complexity of the method is 8
Complex Method,KafkaNet,KafkaTcpSocket,F:\newReposMay17\Jroland_kafka-net\src\kafka-net\KafkaTcpSocket.cs,ProcessReadTaskAsync,Cyclomatic complexity of the method is 10
Complex Method,KafkaNet.Protocol,Message,F:\newReposMay17\Jroland_kafka-net\src\kafka-net\Protocol\Message.cs,DecodeMessageSet,Cyclomatic complexity of the method is 8
Complex Method,KafkaNet.Protocol,Message,F:\newReposMay17\Jroland_kafka-net\src\kafka-net\Protocol\Message.cs,DecodeMessage,Cyclomatic complexity of the method is 14
Complex Method,KafkaNet.Protocol,ProduceRequest,F:\newReposMay17\Jroland_kafka-net\src\kafka-net\Protocol\ProduceRequest.cs,EncodeProduceRequest,Cyclomatic complexity of the method is 14
Long Parameter List,KafkaNet,Producer,F:\newReposMay17\Jroland_kafka-net\src\kafka-net\Producer.cs,SendMessageAsync,The method has 5 parameters.
Long Statement,KafkaNet.Common,AsyncLock,F:\newReposMay17\Jroland_kafka-net\src\kafka-net\Common\AsyncLock.cs,LockAsync,The length of the statement  "	return wait.IsCompleted ? _releaser : wait.ContinueWith ((_' state) => new Releaser ((AsyncLock)state)' this' CancellationToken.None' TaskContinuationOptions.ExecuteSynchronously' TaskScheduler.Default); " is 203.
Long Statement,KafkaNet.Common,Extensions,F:\newReposMay17\Jroland_kafka-net\src\kafka-net\Common\Extensions.cs,WithCancellation,The length of the statement  "	var cancelRegistration = cancellationToken.Register (source => ((TaskCompletionSource<bool>)source).TrySetResult (true)' tcs); " is 126.
Long Statement,KafkaNet.Common,Extensions,F:\newReposMay17\Jroland_kafka-net\src\kafka-net\Common\Extensions.cs,WithCancellation,The length of the statement  "	var cancelRegistration = cancellationToken.Register (source => ((TaskCompletionSource<bool>)source).TrySetResult (true)' tcs); " is 126.
Long Statement,KafkaNet.Statistics,StatisticsTracker,F:\newReposMay17\Jroland_kafka-net\src\kafka-net\Statistics\StatisticsTracker.cs,HeartBeatAction,The length of the statement  "		OnStatisticsHeartbeat (new StatisticsSummary (ProduceRequestStatistics.ToList ()' NetworkWriteQueuedIndex.Values.ToList ()' CompletedNetworkWriteStatistics.ToList ()' Gauges)); " is 176.
Long Statement,KafkaNet,DefaultKafkaConnectionFactory,F:\newReposMay17\Jroland_kafka-net\src\kafka-net\Default\DefaultKafkaConnectionFactory.cs,GetFirstAddress,The length of the statement  "			var selectedAddress = addresses.FirstOrDefault (item => item.AddressFamily == AddressFamily.InterNetwork) ?? addresses.First (); " is 128.
Long Statement,KafkaNet,Consumer,F:\newReposMay17\Jroland_kafka-net\src\kafka-net\Consumer.cs,EnsurePartitionPollingThreads,The length of the statement  "					_partitionPollingIndex.AddOrUpdate (partitionId' i => ConsumeTopicPartitionAsync (_topic.Name' partitionId)' (i' task) => task); " is 128.
Long Statement,KafkaNet,Consumer,F:\newReposMay17\Jroland_kafka-net\src\kafka-net\Consumer.cs,EnsurePartitionPollingThreads,The length of the statement  "		_options.Log.ErrorFormat ("Exception occured trying to setup consumer for topic:{0}.  Exception={1}"' _options.Topic' ex); " is 122.
Long Statement,KafkaNet,Consumer,F:\newReposMay17\Jroland_kafka-net\src\kafka-net\Consumer.cs,ConsumeTopicPartitionAsync,The length of the statement  "					_options.Log.ErrorFormat ("Exception occured while polling topic:{0} partition:{1}.  Polling will continue.  Exception={2}"' topic' partitionId' ex); " is 149.
Long Statement,KafkaNet,Consumer,F:\newReposMay17\Jroland_kafka-net\src\kafka-net\Consumer.cs,HandleResponseErrors,The length of the statement  "		throw new OffsetOutOfRangeException ("FetchResponse indicated we requested an offset that is out of range.  Requested Offset:{0}"' request.Offset) { " is 148.
Long Statement,KafkaNet,Consumer,F:\newReposMay17\Jroland_kafka-net\src\kafka-net\Consumer.cs,HandleResponseErrors,The length of the statement  "		throw new InvalidMetadataException ("FetchResponse indicated we may have mismatched metadata.  ErrorCode:{0}"' response.Error) { " is 128.
Long Statement,KafkaNet,Consumer,F:\newReposMay17\Jroland_kafka-net\src\kafka-net\Consumer.cs,FixOffsetOutOfRangeExceptionAsync,The length of the statement  "			_options.Log.ErrorFormat ("Failed to fix the offset out of range exception on topic:{0} partition:{1}.  Polling will continue.  Exception={2}"' request.Topic' request.PartitionId' ex); " is 184.
Long Statement,KafkaNet,MetadataQueries,F:\newReposMay17\Jroland_kafka-net\src\kafka-net\MetadataQueries.cs,GetTopic,The length of the statement  "		throw new InvalidTopicMetadataException (ErrorResponseCode.NoError' "No metadata could be found for topic: {0}"' topic); " is 120.
Long Statement,KafkaNet,DefaultPartitionSelector,F:\newReposMay17\Jroland_kafka-net\src\kafka-net\Default\DefaultPartitionSelector.cs,Select,The length of the statement  "		throw new InvalidPartitionException (string.Format ("Hash function return partition id: {0}' but the available partitions are:{1}"' partitionId' string.Join ("'"' partitions.Select (x => x.PartitionId)))); " is 205.
Long Statement,KafkaNet,BrokerRouter,F:\newReposMay17\Jroland_kafka-net\src\kafka-net\BrokerRouter.cs,SelectBrokerRoute,The length of the statement  "		throw new InvalidTopicMetadataException (ErrorResponseCode.NoError' "The Metadata is invalid as it returned no data for the given topic:{0}"' topic); " is 149.
Long Statement,KafkaNet,BrokerRouter,F:\newReposMay17\Jroland_kafka-net\src\kafka-net\BrokerRouter.cs,SelectBrokerRoute,The length of the statement  "		throw new InvalidPartitionException (string.Format ("The topic:{0} does not have a partitionId:{1} defined."' topic' partitionId)); " is 131.
Long Statement,KafkaNet,BrokerRouter,F:\newReposMay17\Jroland_kafka-net\src\kafka-net\BrokerRouter.cs,SelectBrokerRoute,The length of the statement  "		throw new InvalidTopicMetadataException (ErrorResponseCode.NoError' "The Metadata is invalid as it returned no data for the given topic:{0}"' topic); " is 149.
Long Statement,KafkaNet,BrokerRouter,F:\newReposMay17\Jroland_kafka-net\src\kafka-net\BrokerRouter.cs,GetCachedRoute,The length of the statement  "	throw new LeaderNotFoundException (string.Format ("Lead broker cannot be found for parition: {0}' leader: {1}"' partition.PartitionId' partition.LeaderId)); " is 156.
Long Statement,KafkaNet,BrokerRouter,F:\newReposMay17\Jroland_kafka-net\src\kafka-net\BrokerRouter.cs,UpdateInternalMetadataCache,The length of the statement  "			connection = _kafkaOptions.KafkaConnectionFactory.Create (broker.Endpoint' _kafkaOptions.ResponseTimeoutMs' _kafkaOptions.Log); " is 127.
Long Statement,KafkaNet,BrokerRouter,F:\newReposMay17\Jroland_kafka-net\src\kafka-net\BrokerRouter.cs,UpsertConnectionToBrokerConnectionIndex,The length of the statement  "		_kafkaOptions.Log.WarnFormat ("Broker:{0} Uri changed from:{1} to {2}"' brokerId' existingConnection.Endpoint' newConnection.Endpoint); " is 135.
Long Statement,KafkaNet,KafkaMetadataProvider,F:\newReposMay17\Jroland_kafka-net\src\kafka-net\KafkaMetadataProvider.cs,GetMetadataResponse,The length of the statement  "	throw new ServerUnreachableException ("Unable to query for metadata from any of the default Kafka servers.  At least one provided server must be available.  Server list: {0}"' string.Join ("' "' connections.Select (x => x.ToString ()))); " is 237.
Long Statement,KafkaNet,KafkaMetadataProvider,F:\newReposMay17\Jroland_kafka-net\src\kafka-net\KafkaMetadataProvider.cs,ValidateTopic,The length of the statement  "			Exception = new InvalidTopicMetadataException (ErrorResponseCode.Unknown' "Unknown error code returned in metadata response.  ErrorCode: {0}"' topic.ErrorCode) " is 159.
Long Statement,KafkaNet,Producer,F:\newReposMay17\Jroland_kafka-net\src\kafka-net\Producer.cs,ProduceAndSendBatchAsync,The length of the statement  "					topicMessageBatch.Tcs.TrySetException (new KafkaApplicationException ("An exception occured while executing a send operation against {0}.  Exception:{1}"' failedTask.Route' failedTask.Task.Exception)); " is 201.
Long Statement,KafkaNet,KafkaConnection,F:\newReposMay17\Jroland_kafka-net\src\kafka-net\KafkaConnection.cs,SendAsync,The length of the statement  "				await _client.WriteAsync (request.Encode ()).ContinueWith (t => asyncRequest.MarkRequestAsSent (t.Exception' _responseTimeoutMS' TriggerMessageTimeout)).ConfigureAwait (false); " is 176.
Long Statement,KafkaNet,KafkaConnection,F:\newReposMay17\Jroland_kafka-net\src\kafka-net\KafkaConnection.cs,StartReadStreamPoller,The length of the statement  "						//TODO being in sync with the byte order on read is important.  What happens if this exception causes us to be out of sync? " is 123.
Long Statement,KafkaNet,KafkaConnection,F:\newReposMay17\Jroland_kafka-net\src\kafka-net\KafkaConnection.cs,CorrelatePayloadToRequest,The length of the statement  "		_log.WarnFormat ("Message response received with correlationId={0}' but did not exist in the request queue."' correlationId); " is 125.
Long Statement,KafkaNet,KafkaConnection,F:\newReposMay17\Jroland_kafka-net\src\kafka-net\KafkaConnection.cs,TriggerMessageTimeout,The length of the statement  "		asyncRequestItem.ReceiveTask.TrySetException (new ObjectDisposedException ("The object is being disposed and the connection is closing.")); " is 139.
Long Statement,KafkaNet,KafkaConnection,F:\newReposMay17\Jroland_kafka-net\src\kafka-net\KafkaConnection.cs,TriggerMessageTimeout,The length of the statement  "		asyncRequestItem.ReceiveTask.TrySetException (new ResponseTimeoutException (string.Format ("Timeout Expired. Client failed to receive a response from server after waiting {0}ms."' _responseTimeoutMS))); " is 202.
Long Statement,KafkaNet,KafkaTcpSocket,F:\newReposMay17\Jroland_kafka-net\src\kafka-net\KafkaTcpSocket.cs,ProcessNetworkstreamTasks,The length of the statement  "	//Read and write operations can be performed simultaneously on an instance of the NetworkStream class without the need for synchronization.  " is 139.
Long Statement,KafkaNet,KafkaTcpSocket,F:\newReposMay17\Jroland_kafka-net\src\kafka-net\KafkaTcpSocket.cs,ProcessNetworkstreamTasks,The length of the statement  "	//As long as there is one unique thread for the write operations and one unique thread for the read operations' there will be no cross-interference  " is 147.
Long Statement,KafkaNet,KafkaTcpSocket,F:\newReposMay17\Jroland_kafka-net\src\kafka-net\KafkaTcpSocket.cs,ProcessReadTaskAsync,The length of the statement  "				bytesReceived = await netStream.ReadAsync (buffer' 0' readSize' readTask.CancellationToken).WithCancellation (readTask.CancellationToken).ConfigureAwait (false); " is 161.
Long Statement,KafkaNet.Protocol,OffsetFetchResponse,F:\newReposMay17\Jroland_kafka-net\src\kafka-net\Protocol\OffsetFetchRequest.cs,ToString,The length of the statement  "	return string.Format ("[OffsetFetchResponse TopicName={0}' PartitionID={1}' Offset={2}' MetaData={3}' ErrorCode={4}]"' Topic' PartitionId' Offset' MetaData' Error); " is 164.
Long Statement,KafkaNet.Protocol,BaseRequest,F:\newReposMay17\Jroland_kafka-net\src\kafka-net\Protocol\BaseRequest.cs,EncodeHeader,The length of the statement  "	return new KafkaMessagePacker ().Pack (((Int16)request.ApiKey)).Pack (ApiVersion).Pack (request.CorrelationId).Pack (request.ClientId' StringPrefixEncoding.Int16); " is 163.
Long Statement,KafkaNet.Protocol,Message,F:\newReposMay17\Jroland_kafka-net\src\kafka-net\Protocol\Message.cs,EncodeMessage,The length of the statement  "		return stream.Pack (message.MagicNumber).Pack (message.Attribute).Pack (message.Key).Pack (message.Value).CrcPayload (); " is 120.
Long Statement,KafkaNet.Protocol,MetadataRequest,F:\newReposMay17\Jroland_kafka-net\src\kafka-net\Protocol\MetadataRequest.cs,EncodeMetadataRequest,The length of the statement  "	using (var message = EncodeHeader (request).Pack (request.Topics.Count).Pack (request.Topics' StringPrefixEncoding.Int16)) { " is 124.
Long Statement,KafkaNet.Protocol,OffsetCommitRequest,F:\newReposMay17\Jroland_kafka-net\src\kafka-net\Protocol\OffsetCommitRequest.cs,EncodeOffsetCommitRequest,The length of the statement  "					message.Pack (partition.Key).Pack (commit.Offset).Pack (commit.TimeStamp).Pack (commit.Metadata' StringPrefixEncoding.Int16); " is 125.
Long Statement,KafkaNet.Protocol,ProduceRequest,F:\newReposMay17\Jroland_kafka-net\src\kafka-net\Protocol\ProduceRequest.cs,EncodeProduceRequest,The length of the statement  "	using (var message = EncodeHeader (request).Pack (request.Acks).Pack (request.TimeoutMS).Pack (groupedPayloads.Count)) { " is 120.
Long Statement,KafkaNet.Protocol,ProduceRequest,F:\newReposMay17\Jroland_kafka-net\src\kafka-net\Protocol\ProduceRequest.cs,EncodeProduceRequest,The length of the statement  "			message.Pack (groupedPayload.Key.Topic' StringPrefixEncoding.Int16).Pack (payloads.Count).Pack (groupedPayload.Key.Partition); " is 126.
Long Statement,KafkaNet.Protocol,ProduceResponse,F:\newReposMay17\Jroland_kafka-net\src\kafka-net\Protocol\ProduceRequest.cs,Equals,The length of the statement  "	return string.Equals (Topic' other.Topic) && PartitionId == other.PartitionId && Error == other.Error && Offset == other.Offset; " is 128.
Empty Catch Block,KafkaNet.Common,Extensions,F:\newReposMay17\Jroland_kafka-net\src\kafka-net\Common\Extensions.cs,SafeWait,The method has an empty catch block.
Empty Catch Block,KafkaNet,Producer,F:\newReposMay17\Jroland_kafka-net\src\kafka-net\Producer.cs,BatchSendAsync,The method has an empty catch block.
Magic Number,KafkaNet.Common,BigEndianBinaryReader,F:\newReposMay17\Jroland_kafka-net\src\kafka-net\Common\BigEndianBinaryReader.cs,ReadDecimal,The following statement contains a magic number: ints [0] = (Int32)bytes [0] << 0 | (Int32)bytes [1] << 8 | (Int32)bytes [2] << 16 | (Int32)bytes [3] << 24;  
Magic Number,KafkaNet.Common,BigEndianBinaryReader,F:\newReposMay17\Jroland_kafka-net\src\kafka-net\Common\BigEndianBinaryReader.cs,ReadDecimal,The following statement contains a magic number: ints [0] = (Int32)bytes [0] << 0 | (Int32)bytes [1] << 8 | (Int32)bytes [2] << 16 | (Int32)bytes [3] << 24;  
Magic Number,KafkaNet.Common,BigEndianBinaryReader,F:\newReposMay17\Jroland_kafka-net\src\kafka-net\Common\BigEndianBinaryReader.cs,ReadDecimal,The following statement contains a magic number: ints [0] = (Int32)bytes [0] << 0 | (Int32)bytes [1] << 8 | (Int32)bytes [2] << 16 | (Int32)bytes [3] << 24;  
Magic Number,KafkaNet.Common,BigEndianBinaryReader,F:\newReposMay17\Jroland_kafka-net\src\kafka-net\Common\BigEndianBinaryReader.cs,ReadDecimal,The following statement contains a magic number: ints [0] = (Int32)bytes [0] << 0 | (Int32)bytes [1] << 8 | (Int32)bytes [2] << 16 | (Int32)bytes [3] << 24;  
Magic Number,KafkaNet.Common,BigEndianBinaryReader,F:\newReposMay17\Jroland_kafka-net\src\kafka-net\Common\BigEndianBinaryReader.cs,ReadDecimal,The following statement contains a magic number: ints [0] = (Int32)bytes [0] << 0 | (Int32)bytes [1] << 8 | (Int32)bytes [2] << 16 | (Int32)bytes [3] << 24;  
Magic Number,KafkaNet.Common,BigEndianBinaryReader,F:\newReposMay17\Jroland_kafka-net\src\kafka-net\Common\BigEndianBinaryReader.cs,ReadDecimal,The following statement contains a magic number: ints [1] = (Int32)bytes [4] << 0 | (Int32)bytes [5] << 8 | (Int32)bytes [6] << 16 | (Int32)bytes [7] << 24;  
Magic Number,KafkaNet.Common,BigEndianBinaryReader,F:\newReposMay17\Jroland_kafka-net\src\kafka-net\Common\BigEndianBinaryReader.cs,ReadDecimal,The following statement contains a magic number: ints [1] = (Int32)bytes [4] << 0 | (Int32)bytes [5] << 8 | (Int32)bytes [6] << 16 | (Int32)bytes [7] << 24;  
Magic Number,KafkaNet.Common,BigEndianBinaryReader,F:\newReposMay17\Jroland_kafka-net\src\kafka-net\Common\BigEndianBinaryReader.cs,ReadDecimal,The following statement contains a magic number: ints [1] = (Int32)bytes [4] << 0 | (Int32)bytes [5] << 8 | (Int32)bytes [6] << 16 | (Int32)bytes [7] << 24;  
Magic Number,KafkaNet.Common,BigEndianBinaryReader,F:\newReposMay17\Jroland_kafka-net\src\kafka-net\Common\BigEndianBinaryReader.cs,ReadDecimal,The following statement contains a magic number: ints [1] = (Int32)bytes [4] << 0 | (Int32)bytes [5] << 8 | (Int32)bytes [6] << 16 | (Int32)bytes [7] << 24;  
Magic Number,KafkaNet.Common,BigEndianBinaryReader,F:\newReposMay17\Jroland_kafka-net\src\kafka-net\Common\BigEndianBinaryReader.cs,ReadDecimal,The following statement contains a magic number: ints [1] = (Int32)bytes [4] << 0 | (Int32)bytes [5] << 8 | (Int32)bytes [6] << 16 | (Int32)bytes [7] << 24;  
Magic Number,KafkaNet.Common,BigEndianBinaryReader,F:\newReposMay17\Jroland_kafka-net\src\kafka-net\Common\BigEndianBinaryReader.cs,ReadDecimal,The following statement contains a magic number: ints [1] = (Int32)bytes [4] << 0 | (Int32)bytes [5] << 8 | (Int32)bytes [6] << 16 | (Int32)bytes [7] << 24;  
Magic Number,KafkaNet.Common,BigEndianBinaryReader,F:\newReposMay17\Jroland_kafka-net\src\kafka-net\Common\BigEndianBinaryReader.cs,ReadDecimal,The following statement contains a magic number: ints [1] = (Int32)bytes [4] << 0 | (Int32)bytes [5] << 8 | (Int32)bytes [6] << 16 | (Int32)bytes [7] << 24;  
Magic Number,KafkaNet.Common,BigEndianBinaryReader,F:\newReposMay17\Jroland_kafka-net\src\kafka-net\Common\BigEndianBinaryReader.cs,ReadDecimal,The following statement contains a magic number: ints [2] = (Int32)bytes [8] << 0 | (Int32)bytes [9] << 8 | (Int32)bytes [10] << 16 | (Int32)bytes [11] << 24;  
Magic Number,KafkaNet.Common,BigEndianBinaryReader,F:\newReposMay17\Jroland_kafka-net\src\kafka-net\Common\BigEndianBinaryReader.cs,ReadDecimal,The following statement contains a magic number: ints [2] = (Int32)bytes [8] << 0 | (Int32)bytes [9] << 8 | (Int32)bytes [10] << 16 | (Int32)bytes [11] << 24;  
Magic Number,KafkaNet.Common,BigEndianBinaryReader,F:\newReposMay17\Jroland_kafka-net\src\kafka-net\Common\BigEndianBinaryReader.cs,ReadDecimal,The following statement contains a magic number: ints [2] = (Int32)bytes [8] << 0 | (Int32)bytes [9] << 8 | (Int32)bytes [10] << 16 | (Int32)bytes [11] << 24;  
Magic Number,KafkaNet.Common,BigEndianBinaryReader,F:\newReposMay17\Jroland_kafka-net\src\kafka-net\Common\BigEndianBinaryReader.cs,ReadDecimal,The following statement contains a magic number: ints [2] = (Int32)bytes [8] << 0 | (Int32)bytes [9] << 8 | (Int32)bytes [10] << 16 | (Int32)bytes [11] << 24;  
Magic Number,KafkaNet.Common,BigEndianBinaryReader,F:\newReposMay17\Jroland_kafka-net\src\kafka-net\Common\BigEndianBinaryReader.cs,ReadDecimal,The following statement contains a magic number: ints [2] = (Int32)bytes [8] << 0 | (Int32)bytes [9] << 8 | (Int32)bytes [10] << 16 | (Int32)bytes [11] << 24;  
Magic Number,KafkaNet.Common,BigEndianBinaryReader,F:\newReposMay17\Jroland_kafka-net\src\kafka-net\Common\BigEndianBinaryReader.cs,ReadDecimal,The following statement contains a magic number: ints [2] = (Int32)bytes [8] << 0 | (Int32)bytes [9] << 8 | (Int32)bytes [10] << 16 | (Int32)bytes [11] << 24;  
Magic Number,KafkaNet.Common,BigEndianBinaryReader,F:\newReposMay17\Jroland_kafka-net\src\kafka-net\Common\BigEndianBinaryReader.cs,ReadDecimal,The following statement contains a magic number: ints [2] = (Int32)bytes [8] << 0 | (Int32)bytes [9] << 8 | (Int32)bytes [10] << 16 | (Int32)bytes [11] << 24;  
Magic Number,KafkaNet.Common,BigEndianBinaryReader,F:\newReposMay17\Jroland_kafka-net\src\kafka-net\Common\BigEndianBinaryReader.cs,ReadDecimal,The following statement contains a magic number: ints [2] = (Int32)bytes [8] << 0 | (Int32)bytes [9] << 8 | (Int32)bytes [10] << 16 | (Int32)bytes [11] << 24;  
Magic Number,KafkaNet.Common,BigEndianBinaryReader,F:\newReposMay17\Jroland_kafka-net\src\kafka-net\Common\BigEndianBinaryReader.cs,ReadDecimal,The following statement contains a magic number: ints [3] = (Int32)bytes [12] << 0 | (Int32)bytes [13] << 8 | (Int32)bytes [14] << 16 | (Int32)bytes [15] << 24;  
Magic Number,KafkaNet.Common,BigEndianBinaryReader,F:\newReposMay17\Jroland_kafka-net\src\kafka-net\Common\BigEndianBinaryReader.cs,ReadDecimal,The following statement contains a magic number: ints [3] = (Int32)bytes [12] << 0 | (Int32)bytes [13] << 8 | (Int32)bytes [14] << 16 | (Int32)bytes [15] << 24;  
Magic Number,KafkaNet.Common,BigEndianBinaryReader,F:\newReposMay17\Jroland_kafka-net\src\kafka-net\Common\BigEndianBinaryReader.cs,ReadDecimal,The following statement contains a magic number: ints [3] = (Int32)bytes [12] << 0 | (Int32)bytes [13] << 8 | (Int32)bytes [14] << 16 | (Int32)bytes [15] << 24;  
Magic Number,KafkaNet.Common,BigEndianBinaryReader,F:\newReposMay17\Jroland_kafka-net\src\kafka-net\Common\BigEndianBinaryReader.cs,ReadDecimal,The following statement contains a magic number: ints [3] = (Int32)bytes [12] << 0 | (Int32)bytes [13] << 8 | (Int32)bytes [14] << 16 | (Int32)bytes [15] << 24;  
Magic Number,KafkaNet.Common,BigEndianBinaryReader,F:\newReposMay17\Jroland_kafka-net\src\kafka-net\Common\BigEndianBinaryReader.cs,ReadDecimal,The following statement contains a magic number: ints [3] = (Int32)bytes [12] << 0 | (Int32)bytes [13] << 8 | (Int32)bytes [14] << 16 | (Int32)bytes [15] << 24;  
Magic Number,KafkaNet.Common,BigEndianBinaryReader,F:\newReposMay17\Jroland_kafka-net\src\kafka-net\Common\BigEndianBinaryReader.cs,ReadDecimal,The following statement contains a magic number: ints [3] = (Int32)bytes [12] << 0 | (Int32)bytes [13] << 8 | (Int32)bytes [14] << 16 | (Int32)bytes [15] << 24;  
Magic Number,KafkaNet.Common,BigEndianBinaryReader,F:\newReposMay17\Jroland_kafka-net\src\kafka-net\Common\BigEndianBinaryReader.cs,ReadDecimal,The following statement contains a magic number: ints [3] = (Int32)bytes [12] << 0 | (Int32)bytes [13] << 8 | (Int32)bytes [14] << 16 | (Int32)bytes [15] << 24;  
Magic Number,KafkaNet.Common,BigEndianBinaryReader,F:\newReposMay17\Jroland_kafka-net\src\kafka-net\Common\BigEndianBinaryReader.cs,ReadDecimal,The following statement contains a magic number: ints [3] = (Int32)bytes [12] << 0 | (Int32)bytes [13] << 8 | (Int32)bytes [14] << 16 | (Int32)bytes [15] << 24;  
Magic Number,KafkaNet.Common,BigEndianBinaryReader,F:\newReposMay17\Jroland_kafka-net\src\kafka-net\Common\BigEndianBinaryReader.cs,ReadSingle,The following statement contains a magic number: return EndianAwareRead (4' BitConverter.ToSingle);  
Magic Number,KafkaNet.Common,BigEndianBinaryReader,F:\newReposMay17\Jroland_kafka-net\src\kafka-net\Common\BigEndianBinaryReader.cs,ReadDouble,The following statement contains a magic number: return EndianAwareRead (8' BitConverter.ToDouble);  
Magic Number,KafkaNet.Common,BigEndianBinaryReader,F:\newReposMay17\Jroland_kafka-net\src\kafka-net\Common\BigEndianBinaryReader.cs,ReadInt16,The following statement contains a magic number: return EndianAwareRead (2' BitConverter.ToInt16);  
Magic Number,KafkaNet.Common,BigEndianBinaryReader,F:\newReposMay17\Jroland_kafka-net\src\kafka-net\Common\BigEndianBinaryReader.cs,ReadInt32,The following statement contains a magic number: return EndianAwareRead (4' BitConverter.ToInt32);  
Magic Number,KafkaNet.Common,BigEndianBinaryReader,F:\newReposMay17\Jroland_kafka-net\src\kafka-net\Common\BigEndianBinaryReader.cs,ReadInt64,The following statement contains a magic number: return EndianAwareRead (8' BitConverter.ToInt64);  
Magic Number,KafkaNet.Common,BigEndianBinaryReader,F:\newReposMay17\Jroland_kafka-net\src\kafka-net\Common\BigEndianBinaryReader.cs,ReadUInt16,The following statement contains a magic number: return EndianAwareRead (2' BitConverter.ToUInt16);  
Magic Number,KafkaNet.Common,BigEndianBinaryReader,F:\newReposMay17\Jroland_kafka-net\src\kafka-net\Common\BigEndianBinaryReader.cs,ReadUInt32,The following statement contains a magic number: return EndianAwareRead (4' BitConverter.ToUInt32);  
Magic Number,KafkaNet.Common,BigEndianBinaryReader,F:\newReposMay17\Jroland_kafka-net\src\kafka-net\Common\BigEndianBinaryReader.cs,ReadUInt64,The following statement contains a magic number: return EndianAwareRead (8' BitConverter.ToUInt64);  
Magic Number,KafkaNet.Common,BigEndianBinaryWriter,F:\newReposMay17\Jroland_kafka-net\src\kafka-net\Common\BigEndianBinaryWriter.cs,Write,The following statement contains a magic number: Contract.Assume (ints.Length == 4);  
Magic Number,KafkaNet.Common,BigEndianBinaryWriter,F:\newReposMay17\Jroland_kafka-net\src\kafka-net\Common\BigEndianBinaryWriter.cs,Write,The following statement contains a magic number: for (var i = 0; i < 4; ++i) {  	var bytes = BitConverter.GetBytes (ints [i]);  	if (BitConverter.IsLittleEndian)  		Array.Reverse (bytes);  	Write (bytes);  }  
Magic Number,KafkaNet.Common,KafkaMessagePacker,F:\newReposMay17\Jroland_kafka-net\src\kafka-net\Common\KafkaMessagePacker.cs,CrcPayload,The following statement contains a magic number: buffer [2] = crc [2];  
Magic Number,KafkaNet.Common,KafkaMessagePacker,F:\newReposMay17\Jroland_kafka-net\src\kafka-net\Common\KafkaMessagePacker.cs,CrcPayload,The following statement contains a magic number: buffer [2] = crc [2];  
Magic Number,KafkaNet.Common,KafkaMessagePacker,F:\newReposMay17\Jroland_kafka-net\src\kafka-net\Common\KafkaMessagePacker.cs,CrcPayload,The following statement contains a magic number: buffer [3] = crc [3];  
Magic Number,KafkaNet.Common,KafkaMessagePacker,F:\newReposMay17\Jroland_kafka-net\src\kafka-net\Common\KafkaMessagePacker.cs,CrcPayload,The following statement contains a magic number: buffer [3] = crc [3];  
Magic Number,KafkaNet.Common,Crc32Provider,F:\newReposMay17\Jroland_kafka-net\src\kafka-net\Common\Crc32Provider.cs,InitializeTable,The following statement contains a magic number: for (var i = 0; i < 256; i++) {  	var entry = (UInt32)i;  	for (var j = 0; j < 8; j++)  		if ((entry & 1) == 1)  			entry = (entry >> 1) ^ polynomial;  		else  			entry = entry >> 1;  	createTable [i] = entry;  }  
Magic Number,KafkaNet.Common,Crc32Provider,F:\newReposMay17\Jroland_kafka-net\src\kafka-net\Common\Crc32Provider.cs,InitializeTable,The following statement contains a magic number: for (var i = 0; i < 256; i++) {  	var entry = (UInt32)i;  	for (var j = 0; j < 8; j++)  		if ((entry & 1) == 1)  			entry = (entry >> 1) ^ polynomial;  		else  			entry = entry >> 1;  	createTable [i] = entry;  }  
Magic Number,KafkaNet.Common,Crc32Provider,F:\newReposMay17\Jroland_kafka-net\src\kafka-net\Common\Crc32Provider.cs,InitializeTable,The following statement contains a magic number: for (var j = 0; j < 8; j++)  	if ((entry & 1) == 1)  		entry = (entry >> 1) ^ polynomial;  	else  		entry = entry >> 1;  
Magic Number,KafkaNet.Common,Crc32Provider,F:\newReposMay17\Jroland_kafka-net\src\kafka-net\Common\Crc32Provider.cs,CalculateHash,The following statement contains a magic number: for (var i = offset; i < length; i++) {  	crc = (crc >> 8) ^ PolynomialTable [buffer [i] ^ crc & 0xff];  }  
Magic Number,KafkaNet.Common,Crc32Provider,F:\newReposMay17\Jroland_kafka-net\src\kafka-net\Common\Crc32Provider.cs,CalculateHash,The following statement contains a magic number: crc = (crc >> 8) ^ PolynomialTable [buffer [i] ^ crc & 0xff];  
Magic Number,KafkaNet.Statistics,StatisticsTracker,F:\newReposMay17\Jroland_kafka-net\src\kafka-net\Statistics\StatisticsTracker.cs,StatisticsTracker,The following statement contains a magic number: HeartbeatTimer = new ScheduledTimer ().StartingAt (DateTime.Now).Every (TimeSpan.FromSeconds (5)).Do (HeartBeatAction).Begin ();  
Magic Number,KafkaNet.Statistics,StatisticsSummary,F:\newReposMay17\Jroland_kafka-net\src\kafka-net\Statistics\StatisticsTracker.cs,StatisticsSummary,The following statement contains a magic number: if (ProduceRequestStatistics.Count > 0) {  	var produceRequestSampleTimespan = DateTime.UtcNow - ProduceRequestStatistics.Min (x => x.CreatedOnUtc);  	ProduceRequestSummary = new ProduceRequestSummary {  		SampleSize = ProduceRequestStatistics.Count'  		MessageCount = ProduceRequestStatistics.Sum (s => s.MessageCount)'  		MessageBytesPerSecond = (int)(ProduceRequestStatistics.Sum (s => s.MessageBytes) / produceRequestSampleTimespan.TotalSeconds)'  		PayloadBytesPerSecond = (int)(ProduceRequestStatistics.Sum (s => s.PayloadBytes) / produceRequestSampleTimespan.TotalSeconds)'  		CompressedBytesPerSecond = (int)(ProduceRequestStatistics.Sum (s => s.CompressedBytes) / produceRequestSampleTimespan.TotalSeconds)'  		AverageCompressionRatio = Math.Round (ProduceRequestStatistics.Sum (s => s.CompressionRatio) / ProduceRequestStatistics.Count' 4)'  		MessagesPerSecond = (int)(ProduceRequestStatistics.Sum (x => x.MessageCount) / produceRequestSampleTimespan.TotalSeconds)  	};  } else {  	ProduceRequestSummary = new ProduceRequestSummary ();  }  
Magic Number,KafkaNet.Statistics,StatisticsSummary,F:\newReposMay17\Jroland_kafka-net\src\kafka-net\Statistics\StatisticsTracker.cs,StatisticsSummary,The following statement contains a magic number: ProduceRequestSummary = new ProduceRequestSummary {  	SampleSize = ProduceRequestStatistics.Count'  	MessageCount = ProduceRequestStatistics.Sum (s => s.MessageCount)'  	MessageBytesPerSecond = (int)(ProduceRequestStatistics.Sum (s => s.MessageBytes) / produceRequestSampleTimespan.TotalSeconds)'  	PayloadBytesPerSecond = (int)(ProduceRequestStatistics.Sum (s => s.PayloadBytes) / produceRequestSampleTimespan.TotalSeconds)'  	CompressedBytesPerSecond = (int)(ProduceRequestStatistics.Sum (s => s.CompressedBytes) / produceRequestSampleTimespan.TotalSeconds)'  	AverageCompressionRatio = Math.Round (ProduceRequestStatistics.Sum (s => s.CompressionRatio) / ProduceRequestStatistics.Count' 4)'  	MessagesPerSecond = (int)(ProduceRequestStatistics.Sum (x => x.MessageCount) / produceRequestSampleTimespan.TotalSeconds)  };  
Magic Number,KafkaNet.Statistics,ProduceRequestStatistic,F:\newReposMay17\Jroland_kafka-net\src\kafka-net\Statistics\StatisticsTracker.cs,ProduceRequestStatistic,The following statement contains a magic number: CompressionRatio = MessageBytes == 0 ? 0 : Math.Round ((double)compressedBytes / MessageBytes' 4);  
Magic Number,KafkaNet.Statistics,MathHelper,F:\newReposMay17\Jroland_kafka-net\src\kafka-net\Statistics\StatisticsTracker.cs,ConvertToMegabytes,The following statement contains a magic number: return Math.Round ((double)bytes / 1048576' 4);  
Magic Number,KafkaNet.Statistics,MathHelper,F:\newReposMay17\Jroland_kafka-net\src\kafka-net\Statistics\StatisticsTracker.cs,ConvertToMegabytes,The following statement contains a magic number: return Math.Round ((double)bytes / 1048576' 4);  
Magic Number,KafkaNet.Statistics,MathHelper,F:\newReposMay17\Jroland_kafka-net\src\kafka-net\Statistics\StatisticsTracker.cs,ConvertToKilobytes,The following statement contains a magic number: return Math.Round ((double)bytes / 1000' 4);  
Magic Number,KafkaNet.Statistics,MathHelper,F:\newReposMay17\Jroland_kafka-net\src\kafka-net\Statistics\StatisticsTracker.cs,ConvertToKilobytes,The following statement contains a magic number: return Math.Round ((double)bytes / 1000' 4);  
Magic Number,KafkaNet,BrokerRoute,F:\newReposMay17\Jroland_kafka-net\src\kafka-net\Model\BrokerRoute.cs,GetHashCode,The following statement contains a magic number: unchecked {  	return ((Topic != null ? Topic.GetHashCode () : 0) * 397) ^ PartitionId;  }  
Magic Number,KafkaNet,BrokerRoute,F:\newReposMay17\Jroland_kafka-net\src\kafka-net\Model\BrokerRoute.cs,GetHashCode,The following statement contains a magic number: return ((Topic != null ? Topic.GetHashCode () : 0) * 397) ^ PartitionId;  
Magic Number,KafkaNet,Consumer,F:\newReposMay17\Jroland_kafka-net\src\kafka-net\Consumer.cs,Dispose,The following statement contains a magic number: foreach (var task in _partitionPollingIndex.Values.Where (task => task != null)) {  	task.Wait (TimeSpan.FromSeconds (5));  }  
Magic Number,KafkaNet,Consumer,F:\newReposMay17\Jroland_kafka-net\src\kafka-net\Consumer.cs,Dispose,The following statement contains a magic number: task.Wait (TimeSpan.FromSeconds (5));  
Magic Number,KafkaNet,KafkaConnection,F:\newReposMay17\Jroland_kafka-net\src\kafka-net\KafkaConnection.cs,StartReadStreamPoller,The following statement contains a magic number: _connectionReadPollingTask = Task.Run (async () => {  	try {  		//only allow one reader to execute' dump out all other requests  		if (Interlocked.Increment (ref _ensureOneActiveReader) != 1)  			return;  		while (_disposeToken.IsCancellationRequested == false) {  			try {  				_log.DebugFormat ("Awaiting message from: {0}"' _client.Endpoint);  				var messageSizeResult = await _client.ReadAsync (4' _disposeToken.Token).ConfigureAwait (false);  				var messageSize = messageSizeResult.ToInt32 ();  				_log.DebugFormat ("Received message of size: {0} From: {1}"' messageSize' _client.Endpoint);  				var message = await _client.ReadAsync (messageSize' _disposeToken.Token).ConfigureAwait (false);  				CorrelatePayloadToRequest (message);  			} catch (Exception ex) {  				//don't record the exception if we are disposing  				if (_disposeToken.IsCancellationRequested == false) {  					//TODO being in sync with the byte order on read is important.  What happens if this exception causes us to be out of sync?  					//record exception and continue to scan for data.  					_log.ErrorFormat ("Exception occured in polling read thread.  Exception={0}"' ex);  				}  			}  		}  	} finally {  		Interlocked.Decrement (ref _ensureOneActiveReader);  		_log.DebugFormat ("Closed down connection to: {0}"' _client.Endpoint);  	}  });  
Magic Number,KafkaNet,KafkaConnection,F:\newReposMay17\Jroland_kafka-net\src\kafka-net\KafkaConnection.cs,StartReadStreamPoller,The following statement contains a magic number: try {  	//only allow one reader to execute' dump out all other requests  	if (Interlocked.Increment (ref _ensureOneActiveReader) != 1)  		return;  	while (_disposeToken.IsCancellationRequested == false) {  		try {  			_log.DebugFormat ("Awaiting message from: {0}"' _client.Endpoint);  			var messageSizeResult = await _client.ReadAsync (4' _disposeToken.Token).ConfigureAwait (false);  			var messageSize = messageSizeResult.ToInt32 ();  			_log.DebugFormat ("Received message of size: {0} From: {1}"' messageSize' _client.Endpoint);  			var message = await _client.ReadAsync (messageSize' _disposeToken.Token).ConfigureAwait (false);  			CorrelatePayloadToRequest (message);  		} catch (Exception ex) {  			//don't record the exception if we are disposing  			if (_disposeToken.IsCancellationRequested == false) {  				//TODO being in sync with the byte order on read is important.  What happens if this exception causes us to be out of sync?  				//record exception and continue to scan for data.  				_log.ErrorFormat ("Exception occured in polling read thread.  Exception={0}"' ex);  			}  		}  	}  } finally {  	Interlocked.Decrement (ref _ensureOneActiveReader);  	_log.DebugFormat ("Closed down connection to: {0}"' _client.Endpoint);  }  
Magic Number,KafkaNet,KafkaConnection,F:\newReposMay17\Jroland_kafka-net\src\kafka-net\KafkaConnection.cs,StartReadStreamPoller,The following statement contains a magic number: while (_disposeToken.IsCancellationRequested == false) {  	try {  		_log.DebugFormat ("Awaiting message from: {0}"' _client.Endpoint);  		var messageSizeResult = await _client.ReadAsync (4' _disposeToken.Token).ConfigureAwait (false);  		var messageSize = messageSizeResult.ToInt32 ();  		_log.DebugFormat ("Received message of size: {0} From: {1}"' messageSize' _client.Endpoint);  		var message = await _client.ReadAsync (messageSize' _disposeToken.Token).ConfigureAwait (false);  		CorrelatePayloadToRequest (message);  	} catch (Exception ex) {  		//don't record the exception if we are disposing  		if (_disposeToken.IsCancellationRequested == false) {  			//TODO being in sync with the byte order on read is important.  What happens if this exception causes us to be out of sync?  			//record exception and continue to scan for data.  			_log.ErrorFormat ("Exception occured in polling read thread.  Exception={0}"' ex);  		}  	}  }  
Magic Number,KafkaNet,KafkaConnection,F:\newReposMay17\Jroland_kafka-net\src\kafka-net\KafkaConnection.cs,StartReadStreamPoller,The following statement contains a magic number: try {  	_log.DebugFormat ("Awaiting message from: {0}"' _client.Endpoint);  	var messageSizeResult = await _client.ReadAsync (4' _disposeToken.Token).ConfigureAwait (false);  	var messageSize = messageSizeResult.ToInt32 ();  	_log.DebugFormat ("Received message of size: {0} From: {1}"' messageSize' _client.Endpoint);  	var message = await _client.ReadAsync (messageSize' _disposeToken.Token).ConfigureAwait (false);  	CorrelatePayloadToRequest (message);  } catch (Exception ex) {  	//don't record the exception if we are disposing  	if (_disposeToken.IsCancellationRequested == false) {  		//TODO being in sync with the byte order on read is important.  What happens if this exception causes us to be out of sync?  		//record exception and continue to scan for data.  		_log.ErrorFormat ("Exception occured in polling read thread.  Exception={0}"' ex);  	}  }  
Magic Number,KafkaNet,KafkaConnection,F:\newReposMay17\Jroland_kafka-net\src\kafka-net\KafkaConnection.cs,NextCorrelationId,The following statement contains a magic number: if (id > int.MaxValue - 100)//somewhere close to max reset.   {  	Interlocked.Exchange (ref _correlationIdSeed' 0);  }  
Magic Number,KafkaNet,KafkaTcpSocket,F:\newReposMay17\Jroland_kafka-net\src\kafka-net\KafkaTcpSocket.cs,Dispose,The following statement contains a magic number: using (_disposeToken)  	using (_disposeRegistration)  		using (_client)  			using (_socketTask) {  				_socketTask.SafeWait (TimeSpan.FromSeconds (30));  			}  
Magic Number,KafkaNet,KafkaTcpSocket,F:\newReposMay17\Jroland_kafka-net\src\kafka-net\KafkaTcpSocket.cs,Dispose,The following statement contains a magic number: using (_disposeRegistration)  	using (_client)  		using (_socketTask) {  			_socketTask.SafeWait (TimeSpan.FromSeconds (30));  		}  
Magic Number,KafkaNet,KafkaTcpSocket,F:\newReposMay17\Jroland_kafka-net\src\kafka-net\KafkaTcpSocket.cs,Dispose,The following statement contains a magic number: using (_client)  	using (_socketTask) {  		_socketTask.SafeWait (TimeSpan.FromSeconds (30));  	}  
Magic Number,KafkaNet,KafkaTcpSocket,F:\newReposMay17\Jroland_kafka-net\src\kafka-net\KafkaTcpSocket.cs,Dispose,The following statement contains a magic number: using (_socketTask) {  	_socketTask.SafeWait (TimeSpan.FromSeconds (30));  }  
Magic Number,KafkaNet,KafkaTcpSocket,F:\newReposMay17\Jroland_kafka-net\src\kafka-net\KafkaTcpSocket.cs,Dispose,The following statement contains a magic number: _socketTask.SafeWait (TimeSpan.FromSeconds (30));  
Magic Number,KafkaNet.Model,ConsumerOptions,F:\newReposMay17\Jroland_kafka-net\src\kafka-net\Model\ConsumerOptions.cs,ConsumerOptions,The following statement contains a magic number: TopicPartitionQueryTimeMs = (int)TimeSpan.FromMinutes (15).TotalMilliseconds;  
Magic Number,KafkaNet.Protocol,Fetch,F:\newReposMay17\Jroland_kafka-net\src\kafka-net\Protocol\FetchRequest.cs,Fetch,The following statement contains a magic number: MaxBytes = FetchRequest.DefaultMinBlockingByteBufferSize * 8;  
Magic Number,KafkaNet.Protocol,Message,F:\newReposMay17\Jroland_kafka-net\src\kafka-net\Protocol\Message.cs,DecodeMessage,The following statement contains a magic number: using (var stream = new BigEndianBinaryReader (payload.Skip (4))) {  	if (crc.SequenceEqual (stream.CrcHash ()) == false)  		throw new FailCrcCheckException ("Buffer did not match CRC validation.");  	var message = new Message {  		Meta = new MessageMetadata {  			Offset = offset  		}'  		MagicNumber = stream.ReadByte ()'  		Attribute = stream.ReadByte ()'  		Key = stream.ReadIntPrefixedBytes ()  	};  	var codec = (MessageCodec)(ProtocolConstants.AttributeCodeMask & message.Attribute);  	switch (codec) {  	case MessageCodec.CodecNone:  		message.Value = stream.ReadIntPrefixedBytes ();  		yield return message;  		break;  	case MessageCodec.CodecGzip:  		var gZipData = stream.ReadIntPrefixedBytes ();  		foreach (var m in DecodeMessageSet (Compression.Unzip (gZipData))) {  			yield return m;  		}  		break;  	default:  		throw new NotSupportedException (string.Format ("Codec type of {0} is not supported."' codec));  	}  }  
Magic Number,KafkaNet.Protocol,OffsetPosition,F:\newReposMay17\Jroland_kafka-net\src\kafka-net\Protocol\OffsetRequest.cs,GetHashCode,The following statement contains a magic number: unchecked {  	return (PartitionId * 397) ^ Offset.GetHashCode ();  }  
Magic Number,KafkaNet.Protocol,OffsetPosition,F:\newReposMay17\Jroland_kafka-net\src\kafka-net\Protocol\OffsetRequest.cs,GetHashCode,The following statement contains a magic number: return (PartitionId * 397) ^ Offset.GetHashCode ();  
Magic Number,KafkaNet.Protocol,ProduceResponse,F:\newReposMay17\Jroland_kafka-net\src\kafka-net\Protocol\ProduceRequest.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int hashCode = (Topic != null ? Topic.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ PartitionId;  	hashCode = (hashCode * 397) ^ Error.GetHashCode ();  	hashCode = (hashCode * 397) ^ Offset.GetHashCode ();  	return hashCode;  }  
Magic Number,KafkaNet.Protocol,ProduceResponse,F:\newReposMay17\Jroland_kafka-net\src\kafka-net\Protocol\ProduceRequest.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int hashCode = (Topic != null ? Topic.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ PartitionId;  	hashCode = (hashCode * 397) ^ Error.GetHashCode ();  	hashCode = (hashCode * 397) ^ Offset.GetHashCode ();  	return hashCode;  }  
Magic Number,KafkaNet.Protocol,ProduceResponse,F:\newReposMay17\Jroland_kafka-net\src\kafka-net\Protocol\ProduceRequest.cs,GetHashCode,The following statement contains a magic number: unchecked {  	int hashCode = (Topic != null ? Topic.GetHashCode () : 0);  	hashCode = (hashCode * 397) ^ PartitionId;  	hashCode = (hashCode * 397) ^ Error.GetHashCode ();  	hashCode = (hashCode * 397) ^ Offset.GetHashCode ();  	return hashCode;  }  
Magic Number,KafkaNet.Protocol,ProduceResponse,F:\newReposMay17\Jroland_kafka-net\src\kafka-net\Protocol\ProduceRequest.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ PartitionId;  
Magic Number,KafkaNet.Protocol,ProduceResponse,F:\newReposMay17\Jroland_kafka-net\src\kafka-net\Protocol\ProduceRequest.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ Error.GetHashCode ();  
Magic Number,KafkaNet.Protocol,ProduceResponse,F:\newReposMay17\Jroland_kafka-net\src\kafka-net\Protocol\ProduceRequest.cs,GetHashCode,The following statement contains a magic number: hashCode = (hashCode * 397) ^ Offset.GetHashCode ();  
Missing Default,KafkaNet.Common,BigEndianBinaryWriter,F:\newReposMay17\Jroland_kafka-net\src\kafka-net\Common\BigEndianBinaryWriter.cs,Write,The following switch statement is missing a default case: switch (encoding) {  case StringPrefixEncoding.Int16:  	Write ((Int16)value.Length);  	break;  case StringPrefixEncoding.Int32:  	Write (value.Length);  	break;  }  
Missing Default,KafkaNet.Common,BigEndianBinaryWriter,F:\newReposMay17\Jroland_kafka-net\src\kafka-net\Common\BigEndianBinaryWriter.cs,Write,The following switch statement is missing a default case: switch (encoding) {  case StringPrefixEncoding.Int16:  	Write ((Int16)value.Length);  	break;  case StringPrefixEncoding.Int32:  	Write (value.Length);  	break;  }  
Missing Default,KafkaNet.Statistics,StatisticsTracker,F:\newReposMay17\Jroland_kafka-net\src\kafka-net\Statistics\StatisticsTracker.cs,IncrementGauge,The following switch statement is missing a default case: switch (gauge) {  case StatisticGauge.ActiveReadOperation:  	Interlocked.Increment (ref Gauges.ActiveReadOperation);  	break;  case StatisticGauge.ActiveWriteOperation:  	Interlocked.Increment (ref Gauges.ActiveWriteOperation);  	break;  case StatisticGauge.QueuedWriteOperation:  	Interlocked.Increment (ref Gauges.QueuedWriteOperation);  	break;  }  
Missing Default,KafkaNet.Statistics,StatisticsTracker,F:\newReposMay17\Jroland_kafka-net\src\kafka-net\Statistics\StatisticsTracker.cs,DecrementGauge,The following switch statement is missing a default case: switch (gauge) {  case StatisticGauge.ActiveReadOperation:  	Interlocked.Decrement (ref Gauges.ActiveReadOperation);  	break;  case StatisticGauge.ActiveWriteOperation:  	Interlocked.Decrement (ref Gauges.ActiveWriteOperation);  	break;  case StatisticGauge.QueuedWriteOperation:  	Interlocked.Decrement (ref Gauges.QueuedWriteOperation);  	break;  }  
Missing Default,KafkaNet,KafkaMetadataProvider,F:\newReposMay17\Jroland_kafka-net\src\kafka-net\KafkaMetadataProvider.cs,Get,The following switch statement is missing a default case: switch (validation.Status) {  case ValidationResult.Retry:  	performRetry = true;  	_log.WarnFormat (validation.Message);  	break;  case ValidationResult.Error:  	throw validation.Exception;  }  
Missing Default,KafkaNet,KafkaMetadataProvider,F:\newReposMay17\Jroland_kafka-net\src\kafka-net\KafkaMetadataProvider.cs,ValidateTopic,The following switch statement is missing a default case: switch (errorCode) {  case ErrorResponseCode.LeaderNotAvailable:  case ErrorResponseCode.OffsetsLoadInProgressCode:  case ErrorResponseCode.ConsumerCoordinatorNotAvailableCode:  	return new MetadataValidationResult {  		Status = ValidationResult.Retry'  		ErrorCode = errorCode'  		Message = string.Format ("Topic:{0} returned error code of {1}.  Retrying."' topic.Name' errorCode)  	};  }  
