Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Examine.AzureDirectory,AzureIndexInput,D:\research\architectureSmells\repos1\Shazwazza_Examine\src\Examine.AzureDirectory\AzureIndexInput.cs,AzureIndexInput,Cyclomatic complexity of the method is 10
Long Parameter List,Examine.AzureDirectory,AzureDirectory,D:\research\architectureSmells\repos1\Shazwazza_Examine\src\Examine.AzureDirectory\AzureDirectory.cs,AzureDirectory,The method has 6 parameters. Parameters: storageAccount' containerName' cacheDirectory' compressBlobs' rootFolder' isReadOnly
Long Statement,Examine.AzureDirectory,AzureDirectory,D:\research\architectureSmells\repos1\Shazwazza_Examine\src\Examine.AzureDirectory\AzureDirectory.cs,DeleteFile,The length of the statement  "                //This will occur because this file is locked' when this is the case' we don't really want to delete it from the master either because " is 134.
Long Statement,Examine.AzureDirectory,AzureDirectory,D:\research\architectureSmells\repos1\Shazwazza_Examine\src\Examine.AzureDirectory\AzureDirectory.cs,DeleteFile,The length of the statement  "                // if we do that then this file will never get removed from the cache folder either! This is based on the Deletion Policy which the " is 131.
Long Statement,Examine.AzureDirectory,AzureDirectory,D:\research\architectureSmells\repos1\Shazwazza_Examine\src\Examine.AzureDirectory\AzureDirectory.cs,DeleteFile,The length of the statement  "                // IndexFileDeleter uses. We could implement our own one of those to deal with this scenario too but it seems the easiest way it to just  " is 136.
Long Statement,Examine.AzureDirectory,AzureIndexOutput,D:\research\architectureSmells\repos1\Shazwazza_Examine\src\Examine.AzureDirectory\AzureIndexOutput.cs,CompressStream,The length of the statement  "                Trace.WriteLine($"COMPRESSED {originalLength} -> {compressedStream.Length} {((float) compressedStream.Length / (float) originalLength) * 100}% to {_name}"); " is 156.
Virtual Method Call from Constructor,Examine.AzureDirectory,AzureIndexInput,D:\research\architectureSmells\repos1\Shazwazza_Examine\src\Examine.AzureDirectory\AzureIndexInput.cs,AzureIndexInput,The constructor "AzureIndexInput" calls a virtual method "ShouldCompressFile".
Magic Number,Examine.AzureDirectory,AzureDirectory,D:\research\architectureSmells\repos1\Shazwazza_Examine\src\Examine.AzureDirectory\AzureDirectory.cs,FileModified,The following statement contains a magic number: return (long)utcDate.Subtract(new DateTime(1970' 1' 1' 0' 0' 0)).TotalMilliseconds;
Magic Number,Examine.AzureDirectory,AzureIndexInput,D:\research\architectureSmells\repos1\Shazwazza_Examine\src\Examine.AzureDirectory\AzureIndexInput.cs,InflateStream,The following statement contains a magic number: var bytes = new byte[65535];
Magic Number,Examine.AzureDirectory,AzureIndexInput,D:\research\architectureSmells\repos1\Shazwazza_Examine\src\Examine.AzureDirectory\AzureIndexInput.cs,InflateStream,The following statement contains a magic number: do                      {                          nRead = decompressor.Read(bytes' 0' 65535);                          if (nRead > 0)                              fileStream.Write(bytes' 0' nRead);                      } while (nRead == 65535);
Magic Number,Examine.AzureDirectory,AzureIndexInput,D:\research\architectureSmells\repos1\Shazwazza_Examine\src\Examine.AzureDirectory\AzureIndexInput.cs,InflateStream,The following statement contains a magic number: do                      {                          nRead = decompressor.Read(bytes' 0' 65535);                          if (nRead > 0)                              fileStream.Write(bytes' 0' nRead);                      } while (nRead == 65535);
Magic Number,Examine.AzureDirectory,AzureIndexOutput,D:\research\architectureSmells\repos1\Shazwazza_Examine\src\Examine.AzureDirectory\AzureIndexOutput.cs,CompressStream,The following statement contains a magic number: Trace.WriteLine($"COMPRESSED {originalLength} -> {compressedStream.Length} {((float) compressedStream.Length / (float) originalLength) * 100}% to {_name}");
