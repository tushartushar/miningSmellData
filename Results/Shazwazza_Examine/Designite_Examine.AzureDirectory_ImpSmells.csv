Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,Examine.AzureDirectory,AzureDirectory,C:\repos\Shazwazza_Examine\src\Examine.AzureDirectory\AzureDirectory.cs,AzureDirectory,The method has 5 parameters. Parameters: storageAccount' containerName' cacheDirectory' compressBlobs' rootFolder
Long Statement,Examine.AzureDirectory,AzureDirectory,C:\repos\Shazwazza_Examine\src\Examine.AzureDirectory\AzureDirectory.cs,DeleteFile,The length of the statement  "                //This will occur because this file is locked' when this is the case' we don't really want to delete it from the master either because " is 134.
Long Statement,Examine.AzureDirectory,AzureDirectory,C:\repos\Shazwazza_Examine\src\Examine.AzureDirectory\AzureDirectory.cs,DeleteFile,The length of the statement  "                // if we do that then this file will never get removed from the cache folder either! This is based on the Deletion Policy which the " is 131.
Long Statement,Examine.AzureDirectory,AzureDirectory,C:\repos\Shazwazza_Examine\src\Examine.AzureDirectory\AzureDirectory.cs,DeleteFile,The length of the statement  "                // IndexFileDeleter uses. We could implement our own one of those to deal with this scenario too but it seems the easiest way it to just  " is 136.
Long Statement,Examine.AzureDirectory,AzureIndexOutput,C:\repos\Shazwazza_Examine\src\Examine.AzureDirectory\AzureIndexOutput.cs,CompressStream,The length of the statement  "                Trace.WriteLine($"COMPRESSED {originalLength} -> {compressedStream.Length} {((float) compressedStream.Length / (float) originalLength) * 100}% to {_name}"); " is 156.
Virtual Method Call from Constructor,Examine.AzureDirectory,AzureIndexInput,C:\repos\Shazwazza_Examine\src\Examine.AzureDirectory\AzureIndexInput.cs,AzureIndexInput,The constructor "AzureIndexInput" calls a virtual method "ShouldCompressFile".
Empty Catch Block,Examine.AzureDirectory,AzureLockOriginal,C:\repos\Shazwazza_Examine\src\Examine.AzureDirectory\AzureNativeLock.cs,BreakLock,The method has an empty catch block.
Magic Number,Examine.AzureDirectory,AzureDirectory,C:\repos\Shazwazza_Examine\src\Examine.AzureDirectory\AzureDirectory.cs,FileModified,The following statement contains a magic number: try              {                  var blob = _blobContainer.GetBlockBlobReference(RootFolder + name);                  blob.FetchAttributes();                  var utcDate = blob.Properties.LastModified.Value.UtcDateTime;                    //This is the data structure of how the default Lucene FSDirectory returns this value so we want                  // to be consistent with how Lucene works                  return (long)utcDate.Subtract(new DateTime(1970' 1' 1' 0' 0' 0)).TotalMilliseconds;              }              catch              {                  return 0;              }
Magic Number,Examine.AzureDirectory,AzureIndexInput,C:\repos\Shazwazza_Examine\src\Examine.AzureDirectory\AzureIndexInput.cs,AzureIndexInput,The following statement contains a magic number: try              {                                  _blobContainer = azuredirectory.BlobContainer;                  _blob = blob;                    var fileName = _name;                    var fFileNeeded = false;                  if (!CacheDirectory.FileExists(fileName))                  {                      fFileNeeded = true;                  }                  else                  {                      long cachedLength = CacheDirectory.FileLength(fileName);                      string blobLengthMetadata;                      bool hasMetadataValue = blob.Metadata.TryGetValue("CachedLength"' out blobLengthMetadata);                       long blobLength = blob.Properties.Length;                      if (hasMetadataValue) long.TryParse(blobLengthMetadata' out blobLength);                        string blobLastModifiedMetadata;                      long longLastModified = 0;                      DateTime blobLastModifiedUTC = blob.Properties.LastModified.Value.UtcDateTime;                      if (blob.Metadata.TryGetValue("CachedLastModified"' out blobLastModifiedMetadata)) {                          if (long.TryParse(blobLastModifiedMetadata' out longLastModified))                              blobLastModifiedUTC = new DateTime(longLastModified).ToUniversalTime();                      }                                            if (cachedLength != blobLength)                          fFileNeeded = true;                      else                      {                            // cachedLastModifiedUTC was not ouputting with a date (just time) and the time was always off                          long unixDate = CacheDirectory.FileModified(fileName);                          DateTime start = new DateTime(1970' 1' 1' 0' 0' 0' DateTimeKind.Utc);                          var cachedLastModifiedUTC = start.AddMilliseconds(unixDate).ToUniversalTime();                                                    if (cachedLastModifiedUTC != blobLastModifiedUTC)                          {                              var timeSpan = blobLastModifiedUTC.Subtract(cachedLastModifiedUTC);                              if (timeSpan.TotalSeconds > 1)                                  fFileNeeded = true;                              else                              {  #if FULLDEBUG                                  Trace.WriteLine(timeSpan.TotalSeconds);  #endif                                  // file not needed                              }                          }                      }                  }                    // if the file does not exist                  // or if it exists and it is older then the lastmodified time in the blobproperties (which always comes from the blob storage)                  if (fFileNeeded)                  {                      if (_azureDirectory.ShouldCompressFile(_name))                      {                          InflateStream(fileName);                      }                      else                      {                          using (var fileStream = _azureDirectory.CreateCachedOutputAsStream(fileName))                          {                              // get the blob                              _blob.DownloadToStream(fileStream);                                fileStream.Flush();  #if FULLDEBUG                              Trace.WriteLine($"GET {_name} RETREIVED {fileStream.Length} bytes");  #endif                          }                      }                        // and open it as an input                       _indexInput = CacheDirectory.OpenInput(fileName);                  }                  else                  {  #if FULLDEBUG                      Trace.WriteLine($"Using cached file for {_name}");  #endif                        // open the file in read only mode                      _indexInput = CacheDirectory.OpenInput(fileName);                  }              }              finally              {                  _fileMutex.ReleaseMutex();              }
Magic Number,Examine.AzureDirectory,AzureIndexInput,C:\repos\Shazwazza_Examine\src\Examine.AzureDirectory\AzureIndexInput.cs,InflateStream,The following statement contains a magic number: using (var deflatedStream = new MemoryStream())              {                  // get the deflated blob                  _blob.DownloadToStream(deflatedStream);    #if FULLDEBUG                  Trace.WriteLine($"GET {_name} RETREIVED {deflatedStream.Length} bytes");  #endif                     // seek back to begininng                  deflatedStream.Seek(0' SeekOrigin.Begin);                    // open output file for uncompressed contents                  using (var fileStream = _azureDirectory.CreateCachedOutputAsStream(fileName))                  using (var decompressor = new DeflateStream(deflatedStream' CompressionMode.Decompress))                  {                      var bytes = new byte[65535];                      var nRead = 0;                      do                      {                          nRead = decompressor.Read(bytes' 0' 65535);                          if (nRead > 0)                              fileStream.Write(bytes' 0' nRead);                      } while (nRead == 65535);                  }              }
Magic Number,Examine.AzureDirectory,AzureIndexInput,C:\repos\Shazwazza_Examine\src\Examine.AzureDirectory\AzureIndexInput.cs,InflateStream,The following statement contains a magic number: using (var deflatedStream = new MemoryStream())              {                  // get the deflated blob                  _blob.DownloadToStream(deflatedStream);    #if FULLDEBUG                  Trace.WriteLine($"GET {_name} RETREIVED {deflatedStream.Length} bytes");  #endif                     // seek back to begininng                  deflatedStream.Seek(0' SeekOrigin.Begin);                    // open output file for uncompressed contents                  using (var fileStream = _azureDirectory.CreateCachedOutputAsStream(fileName))                  using (var decompressor = new DeflateStream(deflatedStream' CompressionMode.Decompress))                  {                      var bytes = new byte[65535];                      var nRead = 0;                      do                      {                          nRead = decompressor.Read(bytes' 0' 65535);                          if (nRead > 0)                              fileStream.Write(bytes' 0' nRead);                      } while (nRead == 65535);                  }              }
Magic Number,Examine.AzureDirectory,AzureIndexInput,C:\repos\Shazwazza_Examine\src\Examine.AzureDirectory\AzureIndexInput.cs,InflateStream,The following statement contains a magic number: using (var deflatedStream = new MemoryStream())              {                  // get the deflated blob                  _blob.DownloadToStream(deflatedStream);    #if FULLDEBUG                  Trace.WriteLine($"GET {_name} RETREIVED {deflatedStream.Length} bytes");  #endif                     // seek back to begininng                  deflatedStream.Seek(0' SeekOrigin.Begin);                    // open output file for uncompressed contents                  using (var fileStream = _azureDirectory.CreateCachedOutputAsStream(fileName))                  using (var decompressor = new DeflateStream(deflatedStream' CompressionMode.Decompress))                  {                      var bytes = new byte[65535];                      var nRead = 0;                      do                      {                          nRead = decompressor.Read(bytes' 0' 65535);                          if (nRead > 0)                              fileStream.Write(bytes' 0' nRead);                      } while (nRead == 65535);                  }              }
Magic Number,Examine.AzureDirectory,AzureIndexOutput,C:\repos\Shazwazza_Examine\src\Examine.AzureDirectory\AzureIndexOutput.cs,CompressStream,The following statement contains a magic number: try              {                  indexInput = CacheDirectory.OpenInput(fileName);                  using (var compressor = new DeflateStream(compressedStream' CompressionMode.Compress' true))                  {                      // compress to compressedOutputStream                      byte[] bytes = new byte[indexInput.Length()];                      indexInput.ReadBytes(bytes' 0' (int) bytes.Length);                      compressor.Write(bytes' 0' (int) bytes.Length);                  }                    // seek back to beginning of comrpessed stream                  compressedStream.Seek(0' SeekOrigin.Begin);  #if FULLDEBUG                  Trace.WriteLine($"COMPRESSED {originalLength} -> {compressedStream.Length} {((float) compressedStream.Length / (float) originalLength) * 100}% to {_name}");  #endif              }              catch              {                  // release the compressed stream resources if an error occurs                  compressedStream.Dispose();                  throw;              }              finally              {                  if (indexInput != null)                      indexInput.Close();              }
Magic Number,Examine.AzureDirectory,AzureNativeLock,C:\repos\Shazwazza_Examine\src\Examine.AzureDirectory\AzureNativeLock.cs,HandleWebException,The following statement contains a magic number: if (err.RequestInformation.HttpStatusCode == 404 || err.RequestInformation.HttpStatusCode == 409)              {                  _azureDirectory.EnsureContainer();                  using (var stream = new MemoryStream())                  using (var writer = new StreamWriter(stream))                  {                      writer.Write(_lockFile);                      blob.UploadFromStream(stream);                  }                  return true;              }
Magic Number,Examine.AzureDirectory,AzureNativeLock,C:\repos\Shazwazza_Examine\src\Examine.AzureDirectory\AzureNativeLock.cs,HandleWebException,The following statement contains a magic number: if (err.RequestInformation.HttpStatusCode == 404 || err.RequestInformation.HttpStatusCode == 409)              {                  _azureDirectory.EnsureContainer();                  using (var stream = new MemoryStream())                  using (var writer = new StreamWriter(stream))                  {                      writer.Write(_lockFile);                      blob.UploadFromStream(stream);                  }                  return true;              }
Magic Number,Examine.AzureDirectory,AzureNativeLock,C:\repos\Shazwazza_Examine\src\Examine.AzureDirectory\AzureNativeLock.cs,IsLocked,The following statement contains a magic number: try              {                  //is there a current lease id in mem?                  if (string.IsNullOrEmpty(_leaseid))                  {                      //pass in null - propose no lease id'                       // https://msdn.microsoft.com/en-us/library/microsoft.windowsazure.storage.blob.cloudblobcontainer.acquirelease.aspx                      // https://www.simple-talk.com/cloud/platform-as-a-service/azure-blob-storage-part-8-blob-leases/                      //if this already has a lease on this file' this will result in a failure (409 – conflict); which will be caught                       //in the exception handler                      var tempLease = blob.AcquireLease(TimeSpan.FromSeconds(60)' null);                        //TODO: Will this ever happen? A null result is not in the docs                      if (string.IsNullOrEmpty(tempLease))                      {                          return true;                      }                        blob.ReleaseLease(new AccessCondition() { LeaseId = tempLease });                  }                    //TODO: It IS locked when there is no lease id?                  return string.IsNullOrEmpty(_leaseid);              }              catch (StorageException webErr)              {                  if (webErr.RequestInformation.HttpStatusCode == 409)                  {                      //there is alraedy a lease on this blob!                       //TODO: Can we store the ID?                      return true;                  }                    if (HandleWebException(blob' webErr))                      return IsLocked();              }
Magic Number,Examine.AzureDirectory,AzureNativeLock,C:\repos\Shazwazza_Examine\src\Examine.AzureDirectory\AzureNativeLock.cs,IsLocked,The following statement contains a magic number: try              {                  //is there a current lease id in mem?                  if (string.IsNullOrEmpty(_leaseid))                  {                      //pass in null - propose no lease id'                       // https://msdn.microsoft.com/en-us/library/microsoft.windowsazure.storage.blob.cloudblobcontainer.acquirelease.aspx                      // https://www.simple-talk.com/cloud/platform-as-a-service/azure-blob-storage-part-8-blob-leases/                      //if this already has a lease on this file' this will result in a failure (409 – conflict); which will be caught                       //in the exception handler                      var tempLease = blob.AcquireLease(TimeSpan.FromSeconds(60)' null);                        //TODO: Will this ever happen? A null result is not in the docs                      if (string.IsNullOrEmpty(tempLease))                      {                          return true;                      }                        blob.ReleaseLease(new AccessCondition() { LeaseId = tempLease });                  }                    //TODO: It IS locked when there is no lease id?                  return string.IsNullOrEmpty(_leaseid);              }              catch (StorageException webErr)              {                  if (webErr.RequestInformation.HttpStatusCode == 409)                  {                      //there is alraedy a lease on this blob!                       //TODO: Can we store the ID?                      return true;                  }                    if (HandleWebException(blob' webErr))                      return IsLocked();              }
Magic Number,Examine.AzureDirectory,AzureLockOriginal,C:\repos\Shazwazza_Examine\src\Examine.AzureDirectory\AzureNativeLock.cs,IsLocked,The following statement contains a magic number: try              {                  Debug.Print("IsLocked() : {0}"' _leaseid);                  if (String.IsNullOrEmpty(_leaseid))                  {                      var tempLease = blob.AcquireLease(TimeSpan.FromSeconds(60)' _leaseid);                      if (String.IsNullOrEmpty(tempLease))                      {                          Debug.Print("IsLocked() : TRUE");                          return true;                      }                      blob.ReleaseLease(new AccessCondition() { LeaseId = tempLease });                  }                  Debug.Print("IsLocked() : {0}"' _leaseid);                  return String.IsNullOrEmpty(_leaseid);              }              catch (StorageException webErr)              {                  if (_handleWebException(blob' webErr))                      return IsLocked();              }
Magic Number,Examine.AzureDirectory,AzureLockOriginal,C:\repos\Shazwazza_Examine\src\Examine.AzureDirectory\AzureNativeLock.cs,Obtain,The following statement contains a magic number: try              {                  Debug.Print("AzureLock:Obtain({0}) : {1}"' _lockFile' _leaseid);                  if (String.IsNullOrEmpty(_leaseid))                  {                      _leaseid = blob.AcquireLease(TimeSpan.FromSeconds(60)' _leaseid);                      Debug.Print("AzureLock:Obtain({0}): AcquireLease : {1}"' _lockFile' _leaseid);                        // keep the lease alive by renewing every 30 seconds                      long interval = (long)TimeSpan.FromSeconds(30).TotalMilliseconds;                      _renewTimer = new Timer((obj) =>                      {                          try                          {                              AzureLockOriginal al = (AzureLockOriginal)obj;                              al.Renew();                          }                          catch (Exception err) { Debug.Print(err.ToString()); }                      }' this' interval' interval);                  }                  return !String.IsNullOrEmpty(_leaseid);              }              catch (StorageException webErr)              {                  if (_handleWebException(blob' webErr))                      return Obtain();              }
Magic Number,Examine.AzureDirectory,AzureLockOriginal,C:\repos\Shazwazza_Examine\src\Examine.AzureDirectory\AzureNativeLock.cs,Obtain,The following statement contains a magic number: try              {                  Debug.Print("AzureLock:Obtain({0}) : {1}"' _lockFile' _leaseid);                  if (String.IsNullOrEmpty(_leaseid))                  {                      _leaseid = blob.AcquireLease(TimeSpan.FromSeconds(60)' _leaseid);                      Debug.Print("AzureLock:Obtain({0}): AcquireLease : {1}"' _lockFile' _leaseid);                        // keep the lease alive by renewing every 30 seconds                      long interval = (long)TimeSpan.FromSeconds(30).TotalMilliseconds;                      _renewTimer = new Timer((obj) =>                      {                          try                          {                              AzureLockOriginal al = (AzureLockOriginal)obj;                              al.Renew();                          }                          catch (Exception err) { Debug.Print(err.ToString()); }                      }' this' interval' interval);                  }                  return !String.IsNullOrEmpty(_leaseid);              }              catch (StorageException webErr)              {                  if (_handleWebException(blob' webErr))                      return Obtain();              }
Magic Number,Examine.AzureDirectory,AzureLockOriginal,C:\repos\Shazwazza_Examine\src\Examine.AzureDirectory\AzureNativeLock.cs,_handleWebException,The following statement contains a magic number: if (err.RequestInformation.HttpStatusCode == 404 || err.RequestInformation.HttpStatusCode == 409)              {                  _azureDirectory.EnsureContainer();                  using (var stream = new MemoryStream())                  using (var writer = new StreamWriter(stream))                  {                      writer.Write(_lockFile);                      blob.UploadFromStream(stream);                  }                  return true;              }
Magic Number,Examine.AzureDirectory,AzureLockOriginal,C:\repos\Shazwazza_Examine\src\Examine.AzureDirectory\AzureNativeLock.cs,_handleWebException,The following statement contains a magic number: if (err.RequestInformation.HttpStatusCode == 404 || err.RequestInformation.HttpStatusCode == 409)              {                  _azureDirectory.EnsureContainer();                  using (var stream = new MemoryStream())                  using (var writer = new StreamWriter(stream))                  {                      writer.Write(_lockFile);                      blob.UploadFromStream(stream);                  }                  return true;              }
